{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AzureBlobFileSystem.java",
  "functionName": "initialize",
  "functionId": "initialize___uri-URI__configuration-Configuration",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystem.java",
  "functionStartLine": 99,
  "functionEndLine": 140,
  "numCommitsSeen": 34,
  "timeTaken": 7664,
  "changeHistory": [
    "791270a2e5e31546ff5c1ef4fa8bad6852b906dc",
    "d1f5976c004292f35b0fc5efbc86273becc4a304",
    "770adc5d4abd71c58812066cf691fc565efea64c",
    "65f60e56b082faf92e1cd3daee2569d8fc669c67",
    "1f1655028eede24197705a594b6ef19e6737db35",
    "668817a6cefa6025ddfe082ed71d7d317d811381",
    "fa8cd1bf28f5b81849ba351a2d7225fbc580350d",
    "a8bbd818d5bc4762324bcdb7cf1fdd5c2f93891b",
    "7051bd78b17b2666c2fa0f61823920285a060a76",
    "d5da9928c99073abdd27b66f794fe4312434ff96",
    "df2166a6435b4b62011a363ea24dfcc9bc44181c",
    "97f06b3fc70ad509e601076c015bc244daa1243f",
    "4410eacba7862ec24173356fe3fd468fd79aeb8f",
    "df57c6c3b12117788b78c30b9d0703c5e9d88458",
    "b54b0c1b676c616aef9574e4e88ea30c314c79dc",
    "ce03a93f78c4d97ccb48a3906fcd77ad0ac756be",
    "a271fd0eca75cef8b8ba940cdac8ad4fd21b4462",
    "f044deedbbfee0812316d587139cb828f27172e9"
  ],
  "changeHistoryShort": {
    "791270a2e5e31546ff5c1ef4fa8bad6852b906dc": "Ybodychange",
    "d1f5976c004292f35b0fc5efbc86273becc4a304": "Ybodychange",
    "770adc5d4abd71c58812066cf691fc565efea64c": "Ybodychange",
    "65f60e56b082faf92e1cd3daee2569d8fc669c67": "Ybodychange",
    "1f1655028eede24197705a594b6ef19e6737db35": "Ybodychange",
    "668817a6cefa6025ddfe082ed71d7d317d811381": "Ybodychange",
    "fa8cd1bf28f5b81849ba351a2d7225fbc580350d": "Ybodychange",
    "a8bbd818d5bc4762324bcdb7cf1fdd5c2f93891b": "Ybodychange",
    "7051bd78b17b2666c2fa0f61823920285a060a76": "Ybodychange",
    "d5da9928c99073abdd27b66f794fe4312434ff96": "Ybodychange",
    "df2166a6435b4b62011a363ea24dfcc9bc44181c": "Ybodychange",
    "97f06b3fc70ad509e601076c015bc244daa1243f": "Ybodychange",
    "4410eacba7862ec24173356fe3fd468fd79aeb8f": "Ybodychange",
    "df57c6c3b12117788b78c30b9d0703c5e9d88458": "Ybodychange",
    "b54b0c1b676c616aef9574e4e88ea30c314c79dc": "Ybodychange",
    "ce03a93f78c4d97ccb48a3906fcd77ad0ac756be": "Ybodychange",
    "a271fd0eca75cef8b8ba940cdac8ad4fd21b4462": "Ybodychange",
    "f044deedbbfee0812316d587139cb828f27172e9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "791270a2e5e31546ff5c1ef4fa8bad6852b906dc": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16730: ABFS: Support for Shared Access Signatures (SAS). Contributed by Sneha Vijayarajan.\n",
      "commitDate": "27/02/20 10:27 AM",
      "commitName": "791270a2e5e31546ff5c1ef4fa8bad6852b906dc",
      "commitAuthor": "Sneha Vijayarajan",
      "commitDateOld": "14/01/20 5:28 PM",
      "commitNameOld": "c36f09deb91454c086926c01f872d8ca4419aee0",
      "commitAuthorOld": "Clemens Wolff",
      "daysBetweenCommits": 43.71,
      "commitsBetweenForRepo": 144,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,42 @@\n   public void initialize(URI uri, Configuration configuration)\n       throws IOException {\n     uri \u003d ensureAuthority(uri, configuration);\n     super.initialize(uri, configuration);\n     setConf(configuration);\n \n     LOG.debug(\"Initializing AzureBlobFileSystem for {}\", uri);\n \n     this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n     this.abfsStore \u003d new AzureBlobFileSystemStore(uri, this.isSecureScheme(), configuration);\n     LOG.trace(\"AzureBlobFileSystemStore init complete\");\n \n     final AbfsConfiguration abfsConfiguration \u003d abfsStore.getAbfsConfiguration();\n \n     this.setWorkingDirectory(this.getHomeDirectory());\n \n     if (abfsConfiguration.getCreateRemoteFileSystemDuringInitialization()) {\n       if (this.tryGetFileStatus(new Path(AbfsHttpConstants.ROOT_PATH)) \u003d\u003d null) {\n         try {\n           this.createFileSystem();\n         } catch (AzureBlobFileSystemException ex) {\n           checkException(null, ex, AzureServiceErrorCode.FILE_SYSTEM_ALREADY_EXISTS);\n         }\n       }\n     }\n \n     LOG.trace(\"Initiate check for delegation token manager\");\n     if (UserGroupInformation.isSecurityEnabled()) {\n       this.delegationTokenEnabled \u003d abfsConfiguration.isDelegationTokenManagerEnabled();\n \n       if (this.delegationTokenEnabled) {\n         LOG.debug(\"Initializing DelegationTokenManager for {}\", uri);\n         this.delegationTokenManager \u003d abfsConfiguration.getDelegationTokenManager();\n         delegationTokenManager.bind(getUri(), configuration);\n         LOG.debug(\"Created DelegationTokenManager {}\", delegationTokenManager);\n       }\n     }\n \n     AbfsClientThrottlingIntercept.initializeSingleton(abfsConfiguration.isAutoThrottlingEnabled());\n \n-    // Initialize ABFS authorizer\n-    //\n-    this.authorizer \u003d abfsConfiguration.getAbfsAuthorizer();\n     LOG.debug(\"Initializing AzureBlobFileSystem for {} complete\", uri);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration configuration)\n      throws IOException {\n    uri \u003d ensureAuthority(uri, configuration);\n    super.initialize(uri, configuration);\n    setConf(configuration);\n\n    LOG.debug(\"Initializing AzureBlobFileSystem for {}\", uri);\n\n    this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n    this.abfsStore \u003d new AzureBlobFileSystemStore(uri, this.isSecureScheme(), configuration);\n    LOG.trace(\"AzureBlobFileSystemStore init complete\");\n\n    final AbfsConfiguration abfsConfiguration \u003d abfsStore.getAbfsConfiguration();\n\n    this.setWorkingDirectory(this.getHomeDirectory());\n\n    if (abfsConfiguration.getCreateRemoteFileSystemDuringInitialization()) {\n      if (this.tryGetFileStatus(new Path(AbfsHttpConstants.ROOT_PATH)) \u003d\u003d null) {\n        try {\n          this.createFileSystem();\n        } catch (AzureBlobFileSystemException ex) {\n          checkException(null, ex, AzureServiceErrorCode.FILE_SYSTEM_ALREADY_EXISTS);\n        }\n      }\n    }\n\n    LOG.trace(\"Initiate check for delegation token manager\");\n    if (UserGroupInformation.isSecurityEnabled()) {\n      this.delegationTokenEnabled \u003d abfsConfiguration.isDelegationTokenManagerEnabled();\n\n      if (this.delegationTokenEnabled) {\n        LOG.debug(\"Initializing DelegationTokenManager for {}\", uri);\n        this.delegationTokenManager \u003d abfsConfiguration.getDelegationTokenManager();\n        delegationTokenManager.bind(getUri(), configuration);\n        LOG.debug(\"Created DelegationTokenManager {}\", delegationTokenManager);\n      }\n    }\n\n    AbfsClientThrottlingIntercept.initializeSingleton(abfsConfiguration.isAutoThrottlingEnabled());\n\n    LOG.debug(\"Initializing AzureBlobFileSystem for {} complete\", uri);\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystem.java",
      "extendedDetails": {}
    },
    "d1f5976c004292f35b0fc5efbc86273becc4a304": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16699. Add verbose TRACE logging to ABFS.\n\nContributed by Sneha Vijayarajan,\n\nChange-Id: Ic616a10406e6e9f11616c9cc05d8630ebbedaf65\n",
      "commitDate": "07/01/20 10:05 AM",
      "commitName": "d1f5976c004292f35b0fc5efbc86273becc4a304",
      "commitAuthor": "Sneha Vijayarajan",
      "commitDateOld": "27/11/19 7:56 AM",
      "commitNameOld": "9e69628f55be4acc040b7fe06cc22097238bb848",
      "commitAuthorOld": "bilaharith",
      "daysBetweenCommits": 41.09,
      "commitsBetweenForRepo": 123,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,45 @@\n   public void initialize(URI uri, Configuration configuration)\n       throws IOException {\n     uri \u003d ensureAuthority(uri, configuration);\n     super.initialize(uri, configuration);\n     setConf(configuration);\n \n     LOG.debug(\"Initializing AzureBlobFileSystem for {}\", uri);\n \n     this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n     this.abfsStore \u003d new AzureBlobFileSystemStore(uri, this.isSecureScheme(), configuration);\n+    LOG.trace(\"AzureBlobFileSystemStore init complete\");\n+\n     final AbfsConfiguration abfsConfiguration \u003d abfsStore.getAbfsConfiguration();\n \n     this.setWorkingDirectory(this.getHomeDirectory());\n \n     if (abfsConfiguration.getCreateRemoteFileSystemDuringInitialization()) {\n       if (this.tryGetFileStatus(new Path(AbfsHttpConstants.ROOT_PATH)) \u003d\u003d null) {\n         try {\n           this.createFileSystem();\n         } catch (AzureBlobFileSystemException ex) {\n           checkException(null, ex, AzureServiceErrorCode.FILE_SYSTEM_ALREADY_EXISTS);\n         }\n       }\n     }\n \n+    LOG.trace(\"Initiate check for delegation token manager\");\n     if (UserGroupInformation.isSecurityEnabled()) {\n       this.delegationTokenEnabled \u003d abfsConfiguration.isDelegationTokenManagerEnabled();\n \n       if (this.delegationTokenEnabled) {\n         LOG.debug(\"Initializing DelegationTokenManager for {}\", uri);\n         this.delegationTokenManager \u003d abfsConfiguration.getDelegationTokenManager();\n         delegationTokenManager.bind(getUri(), configuration);\n         LOG.debug(\"Created DelegationTokenManager {}\", delegationTokenManager);\n       }\n     }\n \n     AbfsClientThrottlingIntercept.initializeSingleton(abfsConfiguration.isAutoThrottlingEnabled());\n \n     // Initialize ABFS authorizer\n     //\n     this.authorizer \u003d abfsConfiguration.getAbfsAuthorizer();\n+    LOG.debug(\"Initializing AzureBlobFileSystem for {} complete\", uri);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration configuration)\n      throws IOException {\n    uri \u003d ensureAuthority(uri, configuration);\n    super.initialize(uri, configuration);\n    setConf(configuration);\n\n    LOG.debug(\"Initializing AzureBlobFileSystem for {}\", uri);\n\n    this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n    this.abfsStore \u003d new AzureBlobFileSystemStore(uri, this.isSecureScheme(), configuration);\n    LOG.trace(\"AzureBlobFileSystemStore init complete\");\n\n    final AbfsConfiguration abfsConfiguration \u003d abfsStore.getAbfsConfiguration();\n\n    this.setWorkingDirectory(this.getHomeDirectory());\n\n    if (abfsConfiguration.getCreateRemoteFileSystemDuringInitialization()) {\n      if (this.tryGetFileStatus(new Path(AbfsHttpConstants.ROOT_PATH)) \u003d\u003d null) {\n        try {\n          this.createFileSystem();\n        } catch (AzureBlobFileSystemException ex) {\n          checkException(null, ex, AzureServiceErrorCode.FILE_SYSTEM_ALREADY_EXISTS);\n        }\n      }\n    }\n\n    LOG.trace(\"Initiate check for delegation token manager\");\n    if (UserGroupInformation.isSecurityEnabled()) {\n      this.delegationTokenEnabled \u003d abfsConfiguration.isDelegationTokenManagerEnabled();\n\n      if (this.delegationTokenEnabled) {\n        LOG.debug(\"Initializing DelegationTokenManager for {}\", uri);\n        this.delegationTokenManager \u003d abfsConfiguration.getDelegationTokenManager();\n        delegationTokenManager.bind(getUri(), configuration);\n        LOG.debug(\"Created DelegationTokenManager {}\", delegationTokenManager);\n      }\n    }\n\n    AbfsClientThrottlingIntercept.initializeSingleton(abfsConfiguration.isAutoThrottlingEnabled());\n\n    // Initialize ABFS authorizer\n    //\n    this.authorizer \u003d abfsConfiguration.getAbfsAuthorizer();\n    LOG.debug(\"Initializing AzureBlobFileSystem for {} complete\", uri);\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystem.java",
      "extendedDetails": {}
    },
    "770adc5d4abd71c58812066cf691fc565efea64c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16578 : Avoid FileSystem API calls when FileSystem already exists\n",
      "commitDate": "01/10/19 5:38 PM",
      "commitName": "770adc5d4abd71c58812066cf691fc565efea64c",
      "commitAuthor": "Sneha Vijayarajan",
      "commitDateOld": "25/09/19 4:16 AM",
      "commitNameOld": "e346e3638c595a512cd582739ff51fb64c3b4950",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 6.56,
      "commitsBetweenForRepo": 45,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n   public void initialize(URI uri, Configuration configuration)\n       throws IOException {\n     uri \u003d ensureAuthority(uri, configuration);\n     super.initialize(uri, configuration);\n     setConf(configuration);\n \n     LOG.debug(\"Initializing AzureBlobFileSystem for {}\", uri);\n \n     this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n     this.abfsStore \u003d new AzureBlobFileSystemStore(uri, this.isSecureScheme(), configuration);\n     final AbfsConfiguration abfsConfiguration \u003d abfsStore.getAbfsConfiguration();\n \n     this.setWorkingDirectory(this.getHomeDirectory());\n \n     if (abfsConfiguration.getCreateRemoteFileSystemDuringInitialization()) {\n-      if (!this.fileSystemExists()) {\n+      if (this.tryGetFileStatus(new Path(AbfsHttpConstants.ROOT_PATH)) \u003d\u003d null) {\n         try {\n           this.createFileSystem();\n         } catch (AzureBlobFileSystemException ex) {\n           checkException(null, ex, AzureServiceErrorCode.FILE_SYSTEM_ALREADY_EXISTS);\n         }\n       }\n     }\n \n     if (UserGroupInformation.isSecurityEnabled()) {\n       this.delegationTokenEnabled \u003d abfsConfiguration.isDelegationTokenManagerEnabled();\n \n       if (this.delegationTokenEnabled) {\n         LOG.debug(\"Initializing DelegationTokenManager for {}\", uri);\n         this.delegationTokenManager \u003d abfsConfiguration.getDelegationTokenManager();\n         delegationTokenManager.bind(getUri(), configuration);\n         LOG.debug(\"Created DelegationTokenManager {}\", delegationTokenManager);\n       }\n     }\n \n     AbfsClientThrottlingIntercept.initializeSingleton(abfsConfiguration.isAutoThrottlingEnabled());\n \n     // Initialize ABFS authorizer\n     //\n     this.authorizer \u003d abfsConfiguration.getAbfsAuthorizer();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration configuration)\n      throws IOException {\n    uri \u003d ensureAuthority(uri, configuration);\n    super.initialize(uri, configuration);\n    setConf(configuration);\n\n    LOG.debug(\"Initializing AzureBlobFileSystem for {}\", uri);\n\n    this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n    this.abfsStore \u003d new AzureBlobFileSystemStore(uri, this.isSecureScheme(), configuration);\n    final AbfsConfiguration abfsConfiguration \u003d abfsStore.getAbfsConfiguration();\n\n    this.setWorkingDirectory(this.getHomeDirectory());\n\n    if (abfsConfiguration.getCreateRemoteFileSystemDuringInitialization()) {\n      if (this.tryGetFileStatus(new Path(AbfsHttpConstants.ROOT_PATH)) \u003d\u003d null) {\n        try {\n          this.createFileSystem();\n        } catch (AzureBlobFileSystemException ex) {\n          checkException(null, ex, AzureServiceErrorCode.FILE_SYSTEM_ALREADY_EXISTS);\n        }\n      }\n    }\n\n    if (UserGroupInformation.isSecurityEnabled()) {\n      this.delegationTokenEnabled \u003d abfsConfiguration.isDelegationTokenManagerEnabled();\n\n      if (this.delegationTokenEnabled) {\n        LOG.debug(\"Initializing DelegationTokenManager for {}\", uri);\n        this.delegationTokenManager \u003d abfsConfiguration.getDelegationTokenManager();\n        delegationTokenManager.bind(getUri(), configuration);\n        LOG.debug(\"Created DelegationTokenManager {}\", delegationTokenManager);\n      }\n    }\n\n    AbfsClientThrottlingIntercept.initializeSingleton(abfsConfiguration.isAutoThrottlingEnabled());\n\n    // Initialize ABFS authorizer\n    //\n    this.authorizer \u003d abfsConfiguration.getAbfsAuthorizer();\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystem.java",
      "extendedDetails": {}
    },
    "65f60e56b082faf92e1cd3daee2569d8fc669c67": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16068. ABFS Authentication and Delegation Token plugins to optionally be bound to specific URI of the store.\n\nContributed by Steve Loughran.\n",
      "commitDate": "28/02/19 6:22 AM",
      "commitName": "65f60e56b082faf92e1cd3daee2569d8fc669c67",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "07/02/19 1:58 PM",
      "commitNameOld": "1f1655028eede24197705a594b6ef19e6737db35",
      "commitAuthorOld": "Da Zhou",
      "daysBetweenCommits": 20.68,
      "commitsBetweenForRepo": 183,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,41 @@\n   public void initialize(URI uri, Configuration configuration)\n       throws IOException {\n     uri \u003d ensureAuthority(uri, configuration);\n     super.initialize(uri, configuration);\n     setConf(configuration);\n \n     LOG.debug(\"Initializing AzureBlobFileSystem for {}\", uri);\n \n     this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n     this.abfsStore \u003d new AzureBlobFileSystemStore(uri, this.isSecureScheme(), configuration);\n     final AbfsConfiguration abfsConfiguration \u003d abfsStore.getAbfsConfiguration();\n \n     this.setWorkingDirectory(this.getHomeDirectory());\n \n     if (abfsConfiguration.getCreateRemoteFileSystemDuringInitialization()) {\n       if (!this.fileSystemExists()) {\n         try {\n           this.createFileSystem();\n         } catch (AzureBlobFileSystemException ex) {\n           checkException(null, ex, AzureServiceErrorCode.FILE_SYSTEM_ALREADY_EXISTS);\n         }\n       }\n     }\n \n     if (UserGroupInformation.isSecurityEnabled()) {\n       this.delegationTokenEnabled \u003d abfsConfiguration.isDelegationTokenManagerEnabled();\n \n       if (this.delegationTokenEnabled) {\n         LOG.debug(\"Initializing DelegationTokenManager for {}\", uri);\n         this.delegationTokenManager \u003d abfsConfiguration.getDelegationTokenManager();\n+        delegationTokenManager.bind(getUri(), configuration);\n+        LOG.debug(\"Created DelegationTokenManager {}\", delegationTokenManager);\n       }\n     }\n \n     AbfsClientThrottlingIntercept.initializeSingleton(abfsConfiguration.isAutoThrottlingEnabled());\n \n     // Initialize ABFS authorizer\n     //\n     this.authorizer \u003d abfsConfiguration.getAbfsAuthorizer();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration configuration)\n      throws IOException {\n    uri \u003d ensureAuthority(uri, configuration);\n    super.initialize(uri, configuration);\n    setConf(configuration);\n\n    LOG.debug(\"Initializing AzureBlobFileSystem for {}\", uri);\n\n    this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n    this.abfsStore \u003d new AzureBlobFileSystemStore(uri, this.isSecureScheme(), configuration);\n    final AbfsConfiguration abfsConfiguration \u003d abfsStore.getAbfsConfiguration();\n\n    this.setWorkingDirectory(this.getHomeDirectory());\n\n    if (abfsConfiguration.getCreateRemoteFileSystemDuringInitialization()) {\n      if (!this.fileSystemExists()) {\n        try {\n          this.createFileSystem();\n        } catch (AzureBlobFileSystemException ex) {\n          checkException(null, ex, AzureServiceErrorCode.FILE_SYSTEM_ALREADY_EXISTS);\n        }\n      }\n    }\n\n    if (UserGroupInformation.isSecurityEnabled()) {\n      this.delegationTokenEnabled \u003d abfsConfiguration.isDelegationTokenManagerEnabled();\n\n      if (this.delegationTokenEnabled) {\n        LOG.debug(\"Initializing DelegationTokenManager for {}\", uri);\n        this.delegationTokenManager \u003d abfsConfiguration.getDelegationTokenManager();\n        delegationTokenManager.bind(getUri(), configuration);\n        LOG.debug(\"Created DelegationTokenManager {}\", delegationTokenManager);\n      }\n    }\n\n    AbfsClientThrottlingIntercept.initializeSingleton(abfsConfiguration.isAutoThrottlingEnabled());\n\n    // Initialize ABFS authorizer\n    //\n    this.authorizer \u003d abfsConfiguration.getAbfsAuthorizer();\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystem.java",
      "extendedDetails": {}
    },
    "1f1655028eede24197705a594b6ef19e6737db35": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15954. ABFS: Enable owner and group conversion for MSI and login user using OAuth.\n\nContributed by Da Zhou and Junhua Gu.\n",
      "commitDate": "07/02/19 1:58 PM",
      "commitName": "1f1655028eede24197705a594b6ef19e6737db35",
      "commitAuthor": "Da Zhou",
      "commitDateOld": "07/02/19 1:57 PM",
      "commitNameOld": "668817a6cefa6025ddfe082ed71d7d317d811381",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,39 @@\n   public void initialize(URI uri, Configuration configuration)\n       throws IOException {\n     uri \u003d ensureAuthority(uri, configuration);\n     super.initialize(uri, configuration);\n     setConf(configuration);\n \n     LOG.debug(\"Initializing AzureBlobFileSystem for {}\", uri);\n \n     this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n-    this.userGroupInformation \u003d UserGroupInformation.getCurrentUser();\n-    this.user \u003d userGroupInformation.getUserName();\n-    this.abfsStore \u003d new AzureBlobFileSystemStore(uri, this.isSecureScheme(), configuration, userGroupInformation);\n+    this.abfsStore \u003d new AzureBlobFileSystemStore(uri, this.isSecureScheme(), configuration);\n     final AbfsConfiguration abfsConfiguration \u003d abfsStore.getAbfsConfiguration();\n \n     this.setWorkingDirectory(this.getHomeDirectory());\n \n     if (abfsConfiguration.getCreateRemoteFileSystemDuringInitialization()) {\n       if (!this.fileSystemExists()) {\n         try {\n           this.createFileSystem();\n         } catch (AzureBlobFileSystemException ex) {\n           checkException(null, ex, AzureServiceErrorCode.FILE_SYSTEM_ALREADY_EXISTS);\n         }\n       }\n     }\n \n-    if (!abfsConfiguration.getSkipUserGroupMetadataDuringInitialization()) {\n-      try {\n-        this.primaryUserGroup \u003d userGroupInformation.getPrimaryGroupName();\n-      } catch (IOException ex) {\n-        LOG.error(\"Failed to get primary group for {}, using user name as primary group name\", user);\n-        this.primaryUserGroup \u003d this.user;\n-      }\n-    } else {\n-      //Provide a default group name\n-      this.primaryUserGroup \u003d this.user;\n-    }\n-\n     if (UserGroupInformation.isSecurityEnabled()) {\n       this.delegationTokenEnabled \u003d abfsConfiguration.isDelegationTokenManagerEnabled();\n \n       if (this.delegationTokenEnabled) {\n         LOG.debug(\"Initializing DelegationTokenManager for {}\", uri);\n         this.delegationTokenManager \u003d abfsConfiguration.getDelegationTokenManager();\n       }\n     }\n \n     AbfsClientThrottlingIntercept.initializeSingleton(abfsConfiguration.isAutoThrottlingEnabled());\n \n     // Initialize ABFS authorizer\n     //\n     this.authorizer \u003d abfsConfiguration.getAbfsAuthorizer();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration configuration)\n      throws IOException {\n    uri \u003d ensureAuthority(uri, configuration);\n    super.initialize(uri, configuration);\n    setConf(configuration);\n\n    LOG.debug(\"Initializing AzureBlobFileSystem for {}\", uri);\n\n    this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n    this.abfsStore \u003d new AzureBlobFileSystemStore(uri, this.isSecureScheme(), configuration);\n    final AbfsConfiguration abfsConfiguration \u003d abfsStore.getAbfsConfiguration();\n\n    this.setWorkingDirectory(this.getHomeDirectory());\n\n    if (abfsConfiguration.getCreateRemoteFileSystemDuringInitialization()) {\n      if (!this.fileSystemExists()) {\n        try {\n          this.createFileSystem();\n        } catch (AzureBlobFileSystemException ex) {\n          checkException(null, ex, AzureServiceErrorCode.FILE_SYSTEM_ALREADY_EXISTS);\n        }\n      }\n    }\n\n    if (UserGroupInformation.isSecurityEnabled()) {\n      this.delegationTokenEnabled \u003d abfsConfiguration.isDelegationTokenManagerEnabled();\n\n      if (this.delegationTokenEnabled) {\n        LOG.debug(\"Initializing DelegationTokenManager for {}\", uri);\n        this.delegationTokenManager \u003d abfsConfiguration.getDelegationTokenManager();\n      }\n    }\n\n    AbfsClientThrottlingIntercept.initializeSingleton(abfsConfiguration.isAutoThrottlingEnabled());\n\n    // Initialize ABFS authorizer\n    //\n    this.authorizer \u003d abfsConfiguration.getAbfsAuthorizer();\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystem.java",
      "extendedDetails": {}
    },
    "668817a6cefa6025ddfe082ed71d7d317d811381": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-15954. ABFS: Enable owner and group conversion for MSI and login user using OAuth.\"\n\n(accidentally mixed in two patches)\n\nThis reverts commit fa8cd1bf28f5b81849ba351a2d7225fbc580350d.\n",
      "commitDate": "07/02/19 1:57 PM",
      "commitName": "668817a6cefa6025ddfe082ed71d7d317d811381",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "05/02/19 11:23 AM",
      "commitNameOld": "fa8cd1bf28f5b81849ba351a2d7225fbc580350d",
      "commitAuthorOld": "Da Zhou",
      "daysBetweenCommits": 2.11,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,53 @@\n   public void initialize(URI uri, Configuration configuration)\n       throws IOException {\n     uri \u003d ensureAuthority(uri, configuration);\n     super.initialize(uri, configuration);\n     setConf(configuration);\n \n     LOG.debug(\"Initializing AzureBlobFileSystem for {}\", uri);\n \n     this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n-    this.abfsStore \u003d new AzureBlobFileSystemStore(uri, this.isSecureScheme(), configuration);\n+    this.userGroupInformation \u003d UserGroupInformation.getCurrentUser();\n+    this.user \u003d userGroupInformation.getUserName();\n+    this.abfsStore \u003d new AzureBlobFileSystemStore(uri, this.isSecureScheme(), configuration, userGroupInformation);\n     final AbfsConfiguration abfsConfiguration \u003d abfsStore.getAbfsConfiguration();\n \n     this.setWorkingDirectory(this.getHomeDirectory());\n \n     if (abfsConfiguration.getCreateRemoteFileSystemDuringInitialization()) {\n       if (!this.fileSystemExists()) {\n         try {\n           this.createFileSystem();\n         } catch (AzureBlobFileSystemException ex) {\n           checkException(null, ex, AzureServiceErrorCode.FILE_SYSTEM_ALREADY_EXISTS);\n         }\n       }\n     }\n \n+    if (!abfsConfiguration.getSkipUserGroupMetadataDuringInitialization()) {\n+      try {\n+        this.primaryUserGroup \u003d userGroupInformation.getPrimaryGroupName();\n+      } catch (IOException ex) {\n+        LOG.error(\"Failed to get primary group for {}, using user name as primary group name\", user);\n+        this.primaryUserGroup \u003d this.user;\n+      }\n+    } else {\n+      //Provide a default group name\n+      this.primaryUserGroup \u003d this.user;\n+    }\n+\n     if (UserGroupInformation.isSecurityEnabled()) {\n       this.delegationTokenEnabled \u003d abfsConfiguration.isDelegationTokenManagerEnabled();\n \n       if (this.delegationTokenEnabled) {\n         LOG.debug(\"Initializing DelegationTokenManager for {}\", uri);\n         this.delegationTokenManager \u003d abfsConfiguration.getDelegationTokenManager();\n       }\n     }\n \n     AbfsClientThrottlingIntercept.initializeSingleton(abfsConfiguration.isAutoThrottlingEnabled());\n \n     // Initialize ABFS authorizer\n     //\n     this.authorizer \u003d abfsConfiguration.getAbfsAuthorizer();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration configuration)\n      throws IOException {\n    uri \u003d ensureAuthority(uri, configuration);\n    super.initialize(uri, configuration);\n    setConf(configuration);\n\n    LOG.debug(\"Initializing AzureBlobFileSystem for {}\", uri);\n\n    this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n    this.userGroupInformation \u003d UserGroupInformation.getCurrentUser();\n    this.user \u003d userGroupInformation.getUserName();\n    this.abfsStore \u003d new AzureBlobFileSystemStore(uri, this.isSecureScheme(), configuration, userGroupInformation);\n    final AbfsConfiguration abfsConfiguration \u003d abfsStore.getAbfsConfiguration();\n\n    this.setWorkingDirectory(this.getHomeDirectory());\n\n    if (abfsConfiguration.getCreateRemoteFileSystemDuringInitialization()) {\n      if (!this.fileSystemExists()) {\n        try {\n          this.createFileSystem();\n        } catch (AzureBlobFileSystemException ex) {\n          checkException(null, ex, AzureServiceErrorCode.FILE_SYSTEM_ALREADY_EXISTS);\n        }\n      }\n    }\n\n    if (!abfsConfiguration.getSkipUserGroupMetadataDuringInitialization()) {\n      try {\n        this.primaryUserGroup \u003d userGroupInformation.getPrimaryGroupName();\n      } catch (IOException ex) {\n        LOG.error(\"Failed to get primary group for {}, using user name as primary group name\", user);\n        this.primaryUserGroup \u003d this.user;\n      }\n    } else {\n      //Provide a default group name\n      this.primaryUserGroup \u003d this.user;\n    }\n\n    if (UserGroupInformation.isSecurityEnabled()) {\n      this.delegationTokenEnabled \u003d abfsConfiguration.isDelegationTokenManagerEnabled();\n\n      if (this.delegationTokenEnabled) {\n        LOG.debug(\"Initializing DelegationTokenManager for {}\", uri);\n        this.delegationTokenManager \u003d abfsConfiguration.getDelegationTokenManager();\n      }\n    }\n\n    AbfsClientThrottlingIntercept.initializeSingleton(abfsConfiguration.isAutoThrottlingEnabled());\n\n    // Initialize ABFS authorizer\n    //\n    this.authorizer \u003d abfsConfiguration.getAbfsAuthorizer();\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystem.java",
      "extendedDetails": {}
    },
    "fa8cd1bf28f5b81849ba351a2d7225fbc580350d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15954. ABFS: Enable owner and group conversion for MSI and login user using OAuth.\n\nContributed by Da Zhou and Junhua Gu.\n",
      "commitDate": "05/02/19 11:23 AM",
      "commitName": "fa8cd1bf28f5b81849ba351a2d7225fbc580350d",
      "commitAuthor": "Da Zhou",
      "commitDateOld": "02/01/19 8:33 AM",
      "commitNameOld": "13f0ee21f2c17ebacaa35e14ee01f39624f38a8d",
      "commitAuthorOld": "Sean Mackrory",
      "daysBetweenCommits": 34.12,
      "commitsBetweenForRepo": 244,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,39 @@\n   public void initialize(URI uri, Configuration configuration)\n       throws IOException {\n     uri \u003d ensureAuthority(uri, configuration);\n     super.initialize(uri, configuration);\n     setConf(configuration);\n \n     LOG.debug(\"Initializing AzureBlobFileSystem for {}\", uri);\n \n     this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n-    this.userGroupInformation \u003d UserGroupInformation.getCurrentUser();\n-    this.user \u003d userGroupInformation.getUserName();\n-    this.abfsStore \u003d new AzureBlobFileSystemStore(uri, this.isSecureScheme(), configuration, userGroupInformation);\n+    this.abfsStore \u003d new AzureBlobFileSystemStore(uri, this.isSecureScheme(), configuration);\n     final AbfsConfiguration abfsConfiguration \u003d abfsStore.getAbfsConfiguration();\n \n     this.setWorkingDirectory(this.getHomeDirectory());\n \n     if (abfsConfiguration.getCreateRemoteFileSystemDuringInitialization()) {\n       if (!this.fileSystemExists()) {\n         try {\n           this.createFileSystem();\n         } catch (AzureBlobFileSystemException ex) {\n           checkException(null, ex, AzureServiceErrorCode.FILE_SYSTEM_ALREADY_EXISTS);\n         }\n       }\n     }\n \n-    if (!abfsConfiguration.getSkipUserGroupMetadataDuringInitialization()) {\n-      try {\n-        this.primaryUserGroup \u003d userGroupInformation.getPrimaryGroupName();\n-      } catch (IOException ex) {\n-        LOG.error(\"Failed to get primary group for {}, using user name as primary group name\", user);\n-        this.primaryUserGroup \u003d this.user;\n-      }\n-    } else {\n-      //Provide a default group name\n-      this.primaryUserGroup \u003d this.user;\n-    }\n-\n     if (UserGroupInformation.isSecurityEnabled()) {\n       this.delegationTokenEnabled \u003d abfsConfiguration.isDelegationTokenManagerEnabled();\n \n       if (this.delegationTokenEnabled) {\n         LOG.debug(\"Initializing DelegationTokenManager for {}\", uri);\n         this.delegationTokenManager \u003d abfsConfiguration.getDelegationTokenManager();\n       }\n     }\n \n     AbfsClientThrottlingIntercept.initializeSingleton(abfsConfiguration.isAutoThrottlingEnabled());\n \n     // Initialize ABFS authorizer\n     //\n     this.authorizer \u003d abfsConfiguration.getAbfsAuthorizer();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration configuration)\n      throws IOException {\n    uri \u003d ensureAuthority(uri, configuration);\n    super.initialize(uri, configuration);\n    setConf(configuration);\n\n    LOG.debug(\"Initializing AzureBlobFileSystem for {}\", uri);\n\n    this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n    this.abfsStore \u003d new AzureBlobFileSystemStore(uri, this.isSecureScheme(), configuration);\n    final AbfsConfiguration abfsConfiguration \u003d abfsStore.getAbfsConfiguration();\n\n    this.setWorkingDirectory(this.getHomeDirectory());\n\n    if (abfsConfiguration.getCreateRemoteFileSystemDuringInitialization()) {\n      if (!this.fileSystemExists()) {\n        try {\n          this.createFileSystem();\n        } catch (AzureBlobFileSystemException ex) {\n          checkException(null, ex, AzureServiceErrorCode.FILE_SYSTEM_ALREADY_EXISTS);\n        }\n      }\n    }\n\n    if (UserGroupInformation.isSecurityEnabled()) {\n      this.delegationTokenEnabled \u003d abfsConfiguration.isDelegationTokenManagerEnabled();\n\n      if (this.delegationTokenEnabled) {\n        LOG.debug(\"Initializing DelegationTokenManager for {}\", uri);\n        this.delegationTokenManager \u003d abfsConfiguration.getDelegationTokenManager();\n      }\n    }\n\n    AbfsClientThrottlingIntercept.initializeSingleton(abfsConfiguration.isAutoThrottlingEnabled());\n\n    // Initialize ABFS authorizer\n    //\n    this.authorizer \u003d abfsConfiguration.getAbfsAuthorizer();\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystem.java",
      "extendedDetails": {}
    },
    "a8bbd818d5bc4762324bcdb7cf1fdd5c2f93891b": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15968. ABFS: add try catch for UGI failure when initializing ABFS.\n\nContributed by Da Zhou.\n",
      "commitDate": "04/12/18 5:39 AM",
      "commitName": "a8bbd818d5bc4762324bcdb7cf1fdd5c2f93891b",
      "commitAuthor": "Da Zhou",
      "commitDateOld": "27/11/18 10:13 AM",
      "commitNameOld": "300f772c36da7e616afbf94df19238d6ac70e69d",
      "commitAuthorOld": "Da Zhou",
      "daysBetweenCommits": 6.81,
      "commitsBetweenForRepo": 54,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,53 @@\n   public void initialize(URI uri, Configuration configuration)\n       throws IOException {\n     uri \u003d ensureAuthority(uri, configuration);\n     super.initialize(uri, configuration);\n     setConf(configuration);\n \n     LOG.debug(\"Initializing AzureBlobFileSystem for {}\", uri);\n \n     this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n     this.userGroupInformation \u003d UserGroupInformation.getCurrentUser();\n     this.user \u003d userGroupInformation.getUserName();\n     this.abfsStore \u003d new AzureBlobFileSystemStore(uri, this.isSecureScheme(), configuration, userGroupInformation);\n     final AbfsConfiguration abfsConfiguration \u003d abfsStore.getAbfsConfiguration();\n \n     this.setWorkingDirectory(this.getHomeDirectory());\n \n     if (abfsConfiguration.getCreateRemoteFileSystemDuringInitialization()) {\n       if (!this.fileSystemExists()) {\n         try {\n           this.createFileSystem();\n         } catch (AzureBlobFileSystemException ex) {\n           checkException(null, ex, AzureServiceErrorCode.FILE_SYSTEM_ALREADY_EXISTS);\n         }\n       }\n     }\n \n     if (!abfsConfiguration.getSkipUserGroupMetadataDuringInitialization()) {\n-      this.primaryUserGroup \u003d userGroupInformation.getPrimaryGroupName();\n+      try {\n+        this.primaryUserGroup \u003d userGroupInformation.getPrimaryGroupName();\n+      } catch (IOException ex) {\n+        LOG.error(\"Failed to get primary group for {}, using user name as primary group name\", user);\n+        this.primaryUserGroup \u003d this.user;\n+      }\n     } else {\n       //Provide a default group name\n       this.primaryUserGroup \u003d this.user;\n     }\n \n     if (UserGroupInformation.isSecurityEnabled()) {\n       this.delegationTokenEnabled \u003d abfsConfiguration.isDelegationTokenManagerEnabled();\n \n       if (this.delegationTokenEnabled) {\n         LOG.debug(\"Initializing DelegationTokenManager for {}\", uri);\n         this.delegationTokenManager \u003d abfsConfiguration.getDelegationTokenManager();\n       }\n     }\n \n     AbfsClientThrottlingIntercept.initializeSingleton(abfsConfiguration.isAutoThrottlingEnabled());\n \n     // Initialize ABFS authorizer\n     //\n     this.authorizer \u003d abfsConfiguration.getAbfsAuthorizer();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration configuration)\n      throws IOException {\n    uri \u003d ensureAuthority(uri, configuration);\n    super.initialize(uri, configuration);\n    setConf(configuration);\n\n    LOG.debug(\"Initializing AzureBlobFileSystem for {}\", uri);\n\n    this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n    this.userGroupInformation \u003d UserGroupInformation.getCurrentUser();\n    this.user \u003d userGroupInformation.getUserName();\n    this.abfsStore \u003d new AzureBlobFileSystemStore(uri, this.isSecureScheme(), configuration, userGroupInformation);\n    final AbfsConfiguration abfsConfiguration \u003d abfsStore.getAbfsConfiguration();\n\n    this.setWorkingDirectory(this.getHomeDirectory());\n\n    if (abfsConfiguration.getCreateRemoteFileSystemDuringInitialization()) {\n      if (!this.fileSystemExists()) {\n        try {\n          this.createFileSystem();\n        } catch (AzureBlobFileSystemException ex) {\n          checkException(null, ex, AzureServiceErrorCode.FILE_SYSTEM_ALREADY_EXISTS);\n        }\n      }\n    }\n\n    if (!abfsConfiguration.getSkipUserGroupMetadataDuringInitialization()) {\n      try {\n        this.primaryUserGroup \u003d userGroupInformation.getPrimaryGroupName();\n      } catch (IOException ex) {\n        LOG.error(\"Failed to get primary group for {}, using user name as primary group name\", user);\n        this.primaryUserGroup \u003d this.user;\n      }\n    } else {\n      //Provide a default group name\n      this.primaryUserGroup \u003d this.user;\n    }\n\n    if (UserGroupInformation.isSecurityEnabled()) {\n      this.delegationTokenEnabled \u003d abfsConfiguration.isDelegationTokenManagerEnabled();\n\n      if (this.delegationTokenEnabled) {\n        LOG.debug(\"Initializing DelegationTokenManager for {}\", uri);\n        this.delegationTokenManager \u003d abfsConfiguration.getDelegationTokenManager();\n      }\n    }\n\n    AbfsClientThrottlingIntercept.initializeSingleton(abfsConfiguration.isAutoThrottlingEnabled());\n\n    // Initialize ABFS authorizer\n    //\n    this.authorizer \u003d abfsConfiguration.getAbfsAuthorizer();\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystem.java",
      "extendedDetails": {}
    },
    "7051bd78b17b2666c2fa0f61823920285a060a76": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15795. Make HTTPS the default protocol for ABFS.\nContributed by Da Zhou.\n",
      "commitDate": "03/10/18 4:52 AM",
      "commitName": "7051bd78b17b2666c2fa0f61823920285a060a76",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "02/10/18 10:57 AM",
      "commitNameOld": "e8b8604314a2ea894b1f24939c42e782b83335aa",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 0.75,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n   public void initialize(URI uri, Configuration configuration)\n       throws IOException {\n     uri \u003d ensureAuthority(uri, configuration);\n     super.initialize(uri, configuration);\n     setConf(configuration);\n \n     LOG.debug(\"Initializing AzureBlobFileSystem for {}\", uri);\n \n     this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n     this.userGroupInformation \u003d UserGroupInformation.getCurrentUser();\n     this.user \u003d userGroupInformation.getUserName();\n-    this.abfsStore \u003d new AzureBlobFileSystemStore(uri, this.isSecure(), configuration, userGroupInformation);\n+    this.abfsStore \u003d new AzureBlobFileSystemStore(uri, this.isSecureScheme(), configuration, userGroupInformation);\n     final AbfsConfiguration abfsConfiguration \u003d abfsStore.getAbfsConfiguration();\n \n     this.setWorkingDirectory(this.getHomeDirectory());\n \n     if (abfsConfiguration.getCreateRemoteFileSystemDuringInitialization()) {\n       if (!this.fileSystemExists()) {\n         try {\n           this.createFileSystem();\n         } catch (AzureBlobFileSystemException ex) {\n           checkException(null, ex, AzureServiceErrorCode.FILE_SYSTEM_ALREADY_EXISTS);\n         }\n       }\n     }\n \n     if (!abfsConfiguration.getSkipUserGroupMetadataDuringInitialization()) {\n       this.primaryUserGroup \u003d userGroupInformation.getPrimaryGroupName();\n     } else {\n       //Provide a default group name\n       this.primaryUserGroup \u003d this.user;\n     }\n \n     if (UserGroupInformation.isSecurityEnabled()) {\n       this.delegationTokenEnabled \u003d abfsConfiguration.isDelegationTokenManagerEnabled();\n \n       if (this.delegationTokenEnabled) {\n         LOG.debug(\"Initializing DelegationTokenManager for {}\", uri);\n         this.delegationTokenManager \u003d abfsConfiguration.getDelegationTokenManager();\n       }\n     }\n \n     AbfsClientThrottlingIntercept.initializeSingleton(abfsConfiguration.isAutoThrottlingEnabled());\n \n     // Initialize ABFS authorizer\n     //\n     this.authorizer \u003d abfsConfiguration.getAbfsAuthorizer();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration configuration)\n      throws IOException {\n    uri \u003d ensureAuthority(uri, configuration);\n    super.initialize(uri, configuration);\n    setConf(configuration);\n\n    LOG.debug(\"Initializing AzureBlobFileSystem for {}\", uri);\n\n    this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n    this.userGroupInformation \u003d UserGroupInformation.getCurrentUser();\n    this.user \u003d userGroupInformation.getUserName();\n    this.abfsStore \u003d new AzureBlobFileSystemStore(uri, this.isSecureScheme(), configuration, userGroupInformation);\n    final AbfsConfiguration abfsConfiguration \u003d abfsStore.getAbfsConfiguration();\n\n    this.setWorkingDirectory(this.getHomeDirectory());\n\n    if (abfsConfiguration.getCreateRemoteFileSystemDuringInitialization()) {\n      if (!this.fileSystemExists()) {\n        try {\n          this.createFileSystem();\n        } catch (AzureBlobFileSystemException ex) {\n          checkException(null, ex, AzureServiceErrorCode.FILE_SYSTEM_ALREADY_EXISTS);\n        }\n      }\n    }\n\n    if (!abfsConfiguration.getSkipUserGroupMetadataDuringInitialization()) {\n      this.primaryUserGroup \u003d userGroupInformation.getPrimaryGroupName();\n    } else {\n      //Provide a default group name\n      this.primaryUserGroup \u003d this.user;\n    }\n\n    if (UserGroupInformation.isSecurityEnabled()) {\n      this.delegationTokenEnabled \u003d abfsConfiguration.isDelegationTokenManagerEnabled();\n\n      if (this.delegationTokenEnabled) {\n        LOG.debug(\"Initializing DelegationTokenManager for {}\", uri);\n        this.delegationTokenManager \u003d abfsConfiguration.getDelegationTokenManager();\n      }\n    }\n\n    AbfsClientThrottlingIntercept.initializeSingleton(abfsConfiguration.isAutoThrottlingEnabled());\n\n    // Initialize ABFS authorizer\n    //\n    this.authorizer \u003d abfsConfiguration.getAbfsAuthorizer();\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystem.java",
      "extendedDetails": {}
    },
    "d5da9928c99073abdd27b66f794fe4312434ff96": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15723. ABFS: Ranger Support.\nContributed by Yuan Gao.\n",
      "commitDate": "25/09/18 11:13 AM",
      "commitName": "d5da9928c99073abdd27b66f794fe4312434ff96",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "19/09/18 3:56 PM",
      "commitNameOld": "8e831ba458ab5ebe9c919c76d66615bbef63f82e",
      "commitAuthorOld": "Sean Mackrory",
      "daysBetweenCommits": 5.8,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,48 @@\n   public void initialize(URI uri, Configuration configuration)\n       throws IOException {\n     uri \u003d ensureAuthority(uri, configuration);\n     super.initialize(uri, configuration);\n     setConf(configuration);\n \n     LOG.debug(\"Initializing AzureBlobFileSystem for {}\", uri);\n \n     this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n     this.userGroupInformation \u003d UserGroupInformation.getCurrentUser();\n     this.user \u003d userGroupInformation.getUserName();\n     this.abfsStore \u003d new AzureBlobFileSystemStore(uri, this.isSecure(), configuration, userGroupInformation);\n     final AbfsConfiguration abfsConfiguration \u003d abfsStore.getAbfsConfiguration();\n \n     this.setWorkingDirectory(this.getHomeDirectory());\n \n     if (abfsConfiguration.getCreateRemoteFileSystemDuringInitialization()) {\n       if (!this.fileSystemExists()) {\n         try {\n           this.createFileSystem();\n         } catch (AzureBlobFileSystemException ex) {\n           checkException(null, ex, AzureServiceErrorCode.FILE_SYSTEM_ALREADY_EXISTS);\n         }\n       }\n     }\n \n     if (!abfsConfiguration.getSkipUserGroupMetadataDuringInitialization()) {\n       this.primaryUserGroup \u003d userGroupInformation.getPrimaryGroupName();\n     } else {\n       //Provide a default group name\n       this.primaryUserGroup \u003d this.user;\n     }\n \n     if (UserGroupInformation.isSecurityEnabled()) {\n       this.delegationTokenEnabled \u003d abfsConfiguration.isDelegationTokenManagerEnabled();\n \n       if (this.delegationTokenEnabled) {\n         LOG.debug(\"Initializing DelegationTokenManager for {}\", uri);\n         this.delegationTokenManager \u003d abfsConfiguration.getDelegationTokenManager();\n       }\n     }\n \n     AbfsClientThrottlingIntercept.initializeSingleton(abfsConfiguration.isAutoThrottlingEnabled());\n+\n+    // Initialize ABFS authorizer\n+    //\n+    this.authorizer \u003d abfsConfiguration.getAbfsAuthorizer();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration configuration)\n      throws IOException {\n    uri \u003d ensureAuthority(uri, configuration);\n    super.initialize(uri, configuration);\n    setConf(configuration);\n\n    LOG.debug(\"Initializing AzureBlobFileSystem for {}\", uri);\n\n    this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n    this.userGroupInformation \u003d UserGroupInformation.getCurrentUser();\n    this.user \u003d userGroupInformation.getUserName();\n    this.abfsStore \u003d new AzureBlobFileSystemStore(uri, this.isSecure(), configuration, userGroupInformation);\n    final AbfsConfiguration abfsConfiguration \u003d abfsStore.getAbfsConfiguration();\n\n    this.setWorkingDirectory(this.getHomeDirectory());\n\n    if (abfsConfiguration.getCreateRemoteFileSystemDuringInitialization()) {\n      if (!this.fileSystemExists()) {\n        try {\n          this.createFileSystem();\n        } catch (AzureBlobFileSystemException ex) {\n          checkException(null, ex, AzureServiceErrorCode.FILE_SYSTEM_ALREADY_EXISTS);\n        }\n      }\n    }\n\n    if (!abfsConfiguration.getSkipUserGroupMetadataDuringInitialization()) {\n      this.primaryUserGroup \u003d userGroupInformation.getPrimaryGroupName();\n    } else {\n      //Provide a default group name\n      this.primaryUserGroup \u003d this.user;\n    }\n\n    if (UserGroupInformation.isSecurityEnabled()) {\n      this.delegationTokenEnabled \u003d abfsConfiguration.isDelegationTokenManagerEnabled();\n\n      if (this.delegationTokenEnabled) {\n        LOG.debug(\"Initializing DelegationTokenManager for {}\", uri);\n        this.delegationTokenManager \u003d abfsConfiguration.getDelegationTokenManager();\n      }\n    }\n\n    AbfsClientThrottlingIntercept.initializeSingleton(abfsConfiguration.isAutoThrottlingEnabled());\n\n    // Initialize ABFS authorizer\n    //\n    this.authorizer \u003d abfsConfiguration.getAbfsAuthorizer();\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystem.java",
      "extendedDetails": {}
    },
    "df2166a6435b4b62011a363ea24dfcc9bc44181c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15719. Fail-fast when using OAuth over http.\nContributed by Da Zhou.\n",
      "commitDate": "18/09/18 4:20 AM",
      "commitName": "df2166a6435b4b62011a363ea24dfcc9bc44181c",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "17/09/18 12:54 PM",
      "commitNameOld": "26211019c80e6180297dd94abcefe718b70e8cd9",
      "commitAuthorOld": "Thomas Marquardt",
      "daysBetweenCommits": 0.64,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,44 @@\n   public void initialize(URI uri, Configuration configuration)\n       throws IOException {\n     uri \u003d ensureAuthority(uri, configuration);\n     super.initialize(uri, configuration);\n     setConf(configuration);\n \n     LOG.debug(\"Initializing AzureBlobFileSystem for {}\", uri);\n \n     this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n     this.userGroupInformation \u003d UserGroupInformation.getCurrentUser();\n     this.user \u003d userGroupInformation.getUserName();\n     this.abfsStore \u003d new AzureBlobFileSystemStore(uri, this.isSecure(), configuration, userGroupInformation);\n-\n-    LOG.debug(\"Initializing NativeAzureFileSystem for {}\", uri);\n+    final AbfsConfiguration abfsConfiguration \u003d abfsStore.getAbfsConfiguration();\n \n     this.setWorkingDirectory(this.getHomeDirectory());\n \n-    if (abfsStore.getAbfsConfiguration().getCreateRemoteFileSystemDuringInitialization()) {\n+    if (abfsConfiguration.getCreateRemoteFileSystemDuringInitialization()) {\n       if (!this.fileSystemExists()) {\n         try {\n           this.createFileSystem();\n         } catch (AzureBlobFileSystemException ex) {\n           checkException(null, ex, AzureServiceErrorCode.FILE_SYSTEM_ALREADY_EXISTS);\n         }\n       }\n     }\n \n-    if (!abfsStore.getAbfsConfiguration().getSkipUserGroupMetadataDuringInitialization()) {\n+    if (!abfsConfiguration.getSkipUserGroupMetadataDuringInitialization()) {\n       this.primaryUserGroup \u003d userGroupInformation.getPrimaryGroupName();\n     } else {\n       //Provide a default group name\n       this.primaryUserGroup \u003d this.user;\n     }\n \n     if (UserGroupInformation.isSecurityEnabled()) {\n-      this.delegationTokenEnabled \u003d abfsStore.getAbfsConfiguration().isDelegationTokenManagerEnabled();\n+      this.delegationTokenEnabled \u003d abfsConfiguration.isDelegationTokenManagerEnabled();\n \n       if (this.delegationTokenEnabled) {\n         LOG.debug(\"Initializing DelegationTokenManager for {}\", uri);\n-        this.delegationTokenManager \u003d abfsStore.getAbfsConfiguration().getDelegationTokenManager();\n+        this.delegationTokenManager \u003d abfsConfiguration.getDelegationTokenManager();\n       }\n     }\n     \n-    AbfsClientThrottlingIntercept.initializeSingleton(abfsStore.getAbfsConfiguration().isAutoThrottlingEnabled());\n+    AbfsClientThrottlingIntercept.initializeSingleton(abfsConfiguration.isAutoThrottlingEnabled());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration configuration)\n      throws IOException {\n    uri \u003d ensureAuthority(uri, configuration);\n    super.initialize(uri, configuration);\n    setConf(configuration);\n\n    LOG.debug(\"Initializing AzureBlobFileSystem for {}\", uri);\n\n    this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n    this.userGroupInformation \u003d UserGroupInformation.getCurrentUser();\n    this.user \u003d userGroupInformation.getUserName();\n    this.abfsStore \u003d new AzureBlobFileSystemStore(uri, this.isSecure(), configuration, userGroupInformation);\n    final AbfsConfiguration abfsConfiguration \u003d abfsStore.getAbfsConfiguration();\n\n    this.setWorkingDirectory(this.getHomeDirectory());\n\n    if (abfsConfiguration.getCreateRemoteFileSystemDuringInitialization()) {\n      if (!this.fileSystemExists()) {\n        try {\n          this.createFileSystem();\n        } catch (AzureBlobFileSystemException ex) {\n          checkException(null, ex, AzureServiceErrorCode.FILE_SYSTEM_ALREADY_EXISTS);\n        }\n      }\n    }\n\n    if (!abfsConfiguration.getSkipUserGroupMetadataDuringInitialization()) {\n      this.primaryUserGroup \u003d userGroupInformation.getPrimaryGroupName();\n    } else {\n      //Provide a default group name\n      this.primaryUserGroup \u003d this.user;\n    }\n\n    if (UserGroupInformation.isSecurityEnabled()) {\n      this.delegationTokenEnabled \u003d abfsConfiguration.isDelegationTokenManagerEnabled();\n\n      if (this.delegationTokenEnabled) {\n        LOG.debug(\"Initializing DelegationTokenManager for {}\", uri);\n        this.delegationTokenManager \u003d abfsConfiguration.getDelegationTokenManager();\n      }\n    }\n    \n    AbfsClientThrottlingIntercept.initializeSingleton(abfsConfiguration.isAutoThrottlingEnabled());\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystem.java",
      "extendedDetails": {}
    },
    "97f06b3fc70ad509e601076c015bc244daa1243f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15703. ABFS - Implement client-side throttling.\nContributed by Sneha Varma and Thomas Marquardt.\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "97f06b3fc70ad509e601076c015bc244daa1243f",
      "commitAuthor": "Thomas Marquardt",
      "commitDateOld": "17/09/18 12:54 PM",
      "commitNameOld": "4410eacba7862ec24173356fe3fd468fd79aeb8f",
      "commitAuthorOld": "Thomas Marquardt",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,45 @@\n   public void initialize(URI uri, Configuration configuration)\n       throws IOException {\n     uri \u003d ensureAuthority(uri, configuration);\n     super.initialize(uri, configuration);\n     setConf(configuration);\n \n     LOG.debug(\"Initializing AzureBlobFileSystem for {}\", uri);\n \n     this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n     this.userGroupInformation \u003d UserGroupInformation.getCurrentUser();\n     this.user \u003d userGroupInformation.getUserName();\n     this.abfsStore \u003d new AzureBlobFileSystemStore(uri, this.isSecure(), configuration, userGroupInformation);\n \n     LOG.debug(\"Initializing NativeAzureFileSystem for {}\", uri);\n \n     this.setWorkingDirectory(this.getHomeDirectory());\n \n     if (abfsStore.getAbfsConfiguration().getCreateRemoteFileSystemDuringInitialization()) {\n       if (!this.fileSystemExists()) {\n         try {\n           this.createFileSystem();\n         } catch (AzureBlobFileSystemException ex) {\n           checkException(null, ex, AzureServiceErrorCode.FILE_SYSTEM_ALREADY_EXISTS);\n         }\n       }\n     }\n \n     if (!abfsStore.getAbfsConfiguration().getSkipUserGroupMetadataDuringInitialization()) {\n       this.primaryUserGroup \u003d userGroupInformation.getPrimaryGroupName();\n     } else {\n       //Provide a default group name\n       this.primaryUserGroup \u003d this.user;\n     }\n \n     if (UserGroupInformation.isSecurityEnabled()) {\n       this.delegationTokenEnabled \u003d abfsStore.getAbfsConfiguration().isDelegationTokenManagerEnabled();\n \n       if (this.delegationTokenEnabled) {\n         LOG.debug(\"Initializing DelegationTokenManager for {}\", uri);\n         this.delegationTokenManager \u003d abfsStore.getAbfsConfiguration().getDelegationTokenManager();\n       }\n     }\n+    \n+    AbfsClientThrottlingIntercept.initializeSingleton(abfsStore.getAbfsConfiguration().isAutoThrottlingEnabled());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration configuration)\n      throws IOException {\n    uri \u003d ensureAuthority(uri, configuration);\n    super.initialize(uri, configuration);\n    setConf(configuration);\n\n    LOG.debug(\"Initializing AzureBlobFileSystem for {}\", uri);\n\n    this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n    this.userGroupInformation \u003d UserGroupInformation.getCurrentUser();\n    this.user \u003d userGroupInformation.getUserName();\n    this.abfsStore \u003d new AzureBlobFileSystemStore(uri, this.isSecure(), configuration, userGroupInformation);\n\n    LOG.debug(\"Initializing NativeAzureFileSystem for {}\", uri);\n\n    this.setWorkingDirectory(this.getHomeDirectory());\n\n    if (abfsStore.getAbfsConfiguration().getCreateRemoteFileSystemDuringInitialization()) {\n      if (!this.fileSystemExists()) {\n        try {\n          this.createFileSystem();\n        } catch (AzureBlobFileSystemException ex) {\n          checkException(null, ex, AzureServiceErrorCode.FILE_SYSTEM_ALREADY_EXISTS);\n        }\n      }\n    }\n\n    if (!abfsStore.getAbfsConfiguration().getSkipUserGroupMetadataDuringInitialization()) {\n      this.primaryUserGroup \u003d userGroupInformation.getPrimaryGroupName();\n    } else {\n      //Provide a default group name\n      this.primaryUserGroup \u003d this.user;\n    }\n\n    if (UserGroupInformation.isSecurityEnabled()) {\n      this.delegationTokenEnabled \u003d abfsStore.getAbfsConfiguration().isDelegationTokenManagerEnabled();\n\n      if (this.delegationTokenEnabled) {\n        LOG.debug(\"Initializing DelegationTokenManager for {}\", uri);\n        this.delegationTokenManager \u003d abfsStore.getAbfsConfiguration().getDelegationTokenManager();\n      }\n    }\n    \n    AbfsClientThrottlingIntercept.initializeSingleton(abfsStore.getAbfsConfiguration().isAutoThrottlingEnabled());\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystem.java",
      "extendedDetails": {}
    },
    "4410eacba7862ec24173356fe3fd468fd79aeb8f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15664. ABFS: Reduce test run time via parallelization and grouping.\nContributed by Da Zhou.\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "4410eacba7862ec24173356fe3fd468fd79aeb8f",
      "commitAuthor": "Thomas Marquardt",
      "commitDateOld": "17/09/18 12:54 PM",
      "commitNameOld": "df57c6c3b12117788b78c30b9d0703c5e9d88458",
      "commitAuthorOld": "Thomas Marquardt",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,43 @@\n   public void initialize(URI uri, Configuration configuration)\n       throws IOException {\n     uri \u003d ensureAuthority(uri, configuration);\n     super.initialize(uri, configuration);\n     setConf(configuration);\n \n     LOG.debug(\"Initializing AzureBlobFileSystem for {}\", uri);\n \n     this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n     this.userGroupInformation \u003d UserGroupInformation.getCurrentUser();\n     this.user \u003d userGroupInformation.getUserName();\n     this.abfsStore \u003d new AzureBlobFileSystemStore(uri, this.isSecure(), configuration, userGroupInformation);\n \n     LOG.debug(\"Initializing NativeAzureFileSystem for {}\", uri);\n \n     this.setWorkingDirectory(this.getHomeDirectory());\n \n     if (abfsStore.getAbfsConfiguration().getCreateRemoteFileSystemDuringInitialization()) {\n       if (!this.fileSystemExists()) {\n-        this.createFileSystem();\n+        try {\n+          this.createFileSystem();\n+        } catch (AzureBlobFileSystemException ex) {\n+          checkException(null, ex, AzureServiceErrorCode.FILE_SYSTEM_ALREADY_EXISTS);\n+        }\n       }\n     }\n \n     if (!abfsStore.getAbfsConfiguration().getSkipUserGroupMetadataDuringInitialization()) {\n       this.primaryUserGroup \u003d userGroupInformation.getPrimaryGroupName();\n     } else {\n       //Provide a default group name\n       this.primaryUserGroup \u003d this.user;\n     }\n \n     if (UserGroupInformation.isSecurityEnabled()) {\n       this.delegationTokenEnabled \u003d abfsStore.getAbfsConfiguration().isDelegationTokenManagerEnabled();\n \n-      if(this.delegationTokenEnabled) {\n+      if (this.delegationTokenEnabled) {\n         LOG.debug(\"Initializing DelegationTokenManager for {}\", uri);\n         this.delegationTokenManager \u003d abfsStore.getAbfsConfiguration().getDelegationTokenManager();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration configuration)\n      throws IOException {\n    uri \u003d ensureAuthority(uri, configuration);\n    super.initialize(uri, configuration);\n    setConf(configuration);\n\n    LOG.debug(\"Initializing AzureBlobFileSystem for {}\", uri);\n\n    this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n    this.userGroupInformation \u003d UserGroupInformation.getCurrentUser();\n    this.user \u003d userGroupInformation.getUserName();\n    this.abfsStore \u003d new AzureBlobFileSystemStore(uri, this.isSecure(), configuration, userGroupInformation);\n\n    LOG.debug(\"Initializing NativeAzureFileSystem for {}\", uri);\n\n    this.setWorkingDirectory(this.getHomeDirectory());\n\n    if (abfsStore.getAbfsConfiguration().getCreateRemoteFileSystemDuringInitialization()) {\n      if (!this.fileSystemExists()) {\n        try {\n          this.createFileSystem();\n        } catch (AzureBlobFileSystemException ex) {\n          checkException(null, ex, AzureServiceErrorCode.FILE_SYSTEM_ALREADY_EXISTS);\n        }\n      }\n    }\n\n    if (!abfsStore.getAbfsConfiguration().getSkipUserGroupMetadataDuringInitialization()) {\n      this.primaryUserGroup \u003d userGroupInformation.getPrimaryGroupName();\n    } else {\n      //Provide a default group name\n      this.primaryUserGroup \u003d this.user;\n    }\n\n    if (UserGroupInformation.isSecurityEnabled()) {\n      this.delegationTokenEnabled \u003d abfsStore.getAbfsConfiguration().isDelegationTokenManagerEnabled();\n\n      if (this.delegationTokenEnabled) {\n        LOG.debug(\"Initializing DelegationTokenManager for {}\", uri);\n        this.delegationTokenManager \u003d abfsStore.getAbfsConfiguration().getDelegationTokenManager();\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystem.java",
      "extendedDetails": {}
    },
    "df57c6c3b12117788b78c30b9d0703c5e9d88458": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15692. ABFS: extensible support for custom oauth.\nContributed by Junhua Gu and Rajeev Bansal.\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "df57c6c3b12117788b78c30b9d0703c5e9d88458",
      "commitAuthor": "Thomas Marquardt",
      "commitDateOld": "17/09/18 12:54 PM",
      "commitNameOld": "9c1e4e81399913f180131f4faa95604087c6d962",
      "commitAuthorOld": "Thomas Marquardt",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,39 @@\n   public void initialize(URI uri, Configuration configuration)\n       throws IOException {\n     uri \u003d ensureAuthority(uri, configuration);\n     super.initialize(uri, configuration);\n     setConf(configuration);\n \n     LOG.debug(\"Initializing AzureBlobFileSystem for {}\", uri);\n \n     this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n     this.userGroupInformation \u003d UserGroupInformation.getCurrentUser();\n     this.user \u003d userGroupInformation.getUserName();\n     this.abfsStore \u003d new AzureBlobFileSystemStore(uri, this.isSecure(), configuration, userGroupInformation);\n \n     LOG.debug(\"Initializing NativeAzureFileSystem for {}\", uri);\n \n     this.setWorkingDirectory(this.getHomeDirectory());\n \n     if (abfsStore.getAbfsConfiguration().getCreateRemoteFileSystemDuringInitialization()) {\n       if (!this.fileSystemExists()) {\n         this.createFileSystem();\n       }\n     }\n \n     if (!abfsStore.getAbfsConfiguration().getSkipUserGroupMetadataDuringInitialization()) {\n       this.primaryUserGroup \u003d userGroupInformation.getPrimaryGroupName();\n     } else {\n       //Provide a default group name\n       this.primaryUserGroup \u003d this.user;\n     }\n+\n+    if (UserGroupInformation.isSecurityEnabled()) {\n+      this.delegationTokenEnabled \u003d abfsStore.getAbfsConfiguration().isDelegationTokenManagerEnabled();\n+\n+      if(this.delegationTokenEnabled) {\n+        LOG.debug(\"Initializing DelegationTokenManager for {}\", uri);\n+        this.delegationTokenManager \u003d abfsStore.getAbfsConfiguration().getDelegationTokenManager();\n+      }\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration configuration)\n      throws IOException {\n    uri \u003d ensureAuthority(uri, configuration);\n    super.initialize(uri, configuration);\n    setConf(configuration);\n\n    LOG.debug(\"Initializing AzureBlobFileSystem for {}\", uri);\n\n    this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n    this.userGroupInformation \u003d UserGroupInformation.getCurrentUser();\n    this.user \u003d userGroupInformation.getUserName();\n    this.abfsStore \u003d new AzureBlobFileSystemStore(uri, this.isSecure(), configuration, userGroupInformation);\n\n    LOG.debug(\"Initializing NativeAzureFileSystem for {}\", uri);\n\n    this.setWorkingDirectory(this.getHomeDirectory());\n\n    if (abfsStore.getAbfsConfiguration().getCreateRemoteFileSystemDuringInitialization()) {\n      if (!this.fileSystemExists()) {\n        this.createFileSystem();\n      }\n    }\n\n    if (!abfsStore.getAbfsConfiguration().getSkipUserGroupMetadataDuringInitialization()) {\n      this.primaryUserGroup \u003d userGroupInformation.getPrimaryGroupName();\n    } else {\n      //Provide a default group name\n      this.primaryUserGroup \u003d this.user;\n    }\n\n    if (UserGroupInformation.isSecurityEnabled()) {\n      this.delegationTokenEnabled \u003d abfsStore.getAbfsConfiguration().isDelegationTokenManagerEnabled();\n\n      if(this.delegationTokenEnabled) {\n        LOG.debug(\"Initializing DelegationTokenManager for {}\", uri);\n        this.delegationTokenManager \u003d abfsStore.getAbfsConfiguration().getDelegationTokenManager();\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystem.java",
      "extendedDetails": {}
    },
    "b54b0c1b676c616aef9574e4e88ea30c314c79dc": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15659. Code changes for bug fix and new tests.\nContributed by Da Zhou.\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "b54b0c1b676c616aef9574e4e88ea30c314c79dc",
      "commitAuthor": "Thomas Marquardt",
      "commitDateOld": "17/09/18 12:54 PM",
      "commitNameOld": "ce03a93f78c4d97ccb48a3906fcd77ad0ac756be",
      "commitAuthorOld": "Thomas Marquardt",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,30 @@\n   public void initialize(URI uri, Configuration configuration)\n       throws IOException {\n     uri \u003d ensureAuthority(uri, configuration);\n     super.initialize(uri, configuration);\n     setConf(configuration);\n \n     LOG.debug(\"Initializing AzureBlobFileSystem for {}\", uri);\n \n     this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n     this.userGroupInformation \u003d UserGroupInformation.getCurrentUser();\n     this.user \u003d userGroupInformation.getUserName();\n-    this.primaryUserGroup \u003d userGroupInformation.getPrimaryGroupName();\n     this.abfsStore \u003d new AzureBlobFileSystemStore(uri, this.isSecure(), configuration, userGroupInformation);\n \n     LOG.debug(\"Initializing NativeAzureFileSystem for {}\", uri);\n \n     this.setWorkingDirectory(this.getHomeDirectory());\n \n     if (abfsStore.getAbfsConfiguration().getCreateRemoteFileSystemDuringInitialization()) {\n-      this.createFileSystem();\n+      if (!this.fileSystemExists()) {\n+        this.createFileSystem();\n+      }\n+    }\n+\n+    if (!abfsStore.getAbfsConfiguration().getSkipUserGroupMetadataDuringInitialization()) {\n+      this.primaryUserGroup \u003d userGroupInformation.getPrimaryGroupName();\n+    } else {\n+      //Provide a default group name\n+      this.primaryUserGroup \u003d this.user;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration configuration)\n      throws IOException {\n    uri \u003d ensureAuthority(uri, configuration);\n    super.initialize(uri, configuration);\n    setConf(configuration);\n\n    LOG.debug(\"Initializing AzureBlobFileSystem for {}\", uri);\n\n    this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n    this.userGroupInformation \u003d UserGroupInformation.getCurrentUser();\n    this.user \u003d userGroupInformation.getUserName();\n    this.abfsStore \u003d new AzureBlobFileSystemStore(uri, this.isSecure(), configuration, userGroupInformation);\n\n    LOG.debug(\"Initializing NativeAzureFileSystem for {}\", uri);\n\n    this.setWorkingDirectory(this.getHomeDirectory());\n\n    if (abfsStore.getAbfsConfiguration().getCreateRemoteFileSystemDuringInitialization()) {\n      if (!this.fileSystemExists()) {\n        this.createFileSystem();\n      }\n    }\n\n    if (!abfsStore.getAbfsConfiguration().getSkipUserGroupMetadataDuringInitialization()) {\n      this.primaryUserGroup \u003d userGroupInformation.getPrimaryGroupName();\n    } else {\n      //Provide a default group name\n      this.primaryUserGroup \u003d this.user;\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystem.java",
      "extendedDetails": {}
    },
    "ce03a93f78c4d97ccb48a3906fcd77ad0ac756be": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15446. ABFS: tune imports \u0026 javadocs; stabilise tests.\nContributed by Steve Loughran and Da Zhou.\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "ce03a93f78c4d97ccb48a3906fcd77ad0ac756be",
      "commitAuthor": "Thomas Marquardt",
      "commitDateOld": "17/09/18 12:54 PM",
      "commitNameOld": "a271fd0eca75cef8b8ba940cdac8ad4fd21b4462",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,22 @@\n   public void initialize(URI uri, Configuration configuration)\n       throws IOException {\n     uri \u003d ensureAuthority(uri, configuration);\n     super.initialize(uri, configuration);\n     setConf(configuration);\n \n-    this.LOG.debug(\n-        \"Initializing AzureBlobFileSystem for {}\", uri);\n+    LOG.debug(\"Initializing AzureBlobFileSystem for {}\", uri);\n \n     this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n     this.userGroupInformation \u003d UserGroupInformation.getCurrentUser();\n     this.user \u003d userGroupInformation.getUserName();\n     this.primaryUserGroup \u003d userGroupInformation.getPrimaryGroupName();\n     this.abfsStore \u003d new AzureBlobFileSystemStore(uri, this.isSecure(), configuration, userGroupInformation);\n \n-    this.LOG.debug(\n-        \"Initializing NativeAzureFileSystem for {}\", uri);\n+    LOG.debug(\"Initializing NativeAzureFileSystem for {}\", uri);\n \n     this.setWorkingDirectory(this.getHomeDirectory());\n \n     if (abfsStore.getAbfsConfiguration().getCreateRemoteFileSystemDuringInitialization()) {\n       this.createFileSystem();\n     }\n-\n-    this.mkdirs(this.workingDir);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration configuration)\n      throws IOException {\n    uri \u003d ensureAuthority(uri, configuration);\n    super.initialize(uri, configuration);\n    setConf(configuration);\n\n    LOG.debug(\"Initializing AzureBlobFileSystem for {}\", uri);\n\n    this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n    this.userGroupInformation \u003d UserGroupInformation.getCurrentUser();\n    this.user \u003d userGroupInformation.getUserName();\n    this.primaryUserGroup \u003d userGroupInformation.getPrimaryGroupName();\n    this.abfsStore \u003d new AzureBlobFileSystemStore(uri, this.isSecure(), configuration, userGroupInformation);\n\n    LOG.debug(\"Initializing NativeAzureFileSystem for {}\", uri);\n\n    this.setWorkingDirectory(this.getHomeDirectory());\n\n    if (abfsStore.getAbfsConfiguration().getCreateRemoteFileSystemDuringInitialization()) {\n      this.createFileSystem();\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystem.java",
      "extendedDetails": {}
    },
    "a271fd0eca75cef8b8ba940cdac8ad4fd21b4462": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15560. ABFS: removed dependency injection and unnecessary dependencies.\nContributed by Da Zhou.\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "a271fd0eca75cef8b8ba940cdac8ad4fd21b4462",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "17/09/18 12:54 PM",
      "commitNameOld": "f044deedbbfee0812316d587139cb828f27172e9",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,26 @@\n   public void initialize(URI uri, Configuration configuration)\n       throws IOException {\n     uri \u003d ensureAuthority(uri, configuration);\n     super.initialize(uri, configuration);\n-\n     setConf(configuration);\n \n-    try {\n-      this.abfsServiceProvider \u003d AbfsServiceProviderImpl.create(configuration);\n-      this.tracingService \u003d abfsServiceProvider.get(TracingService.class);\n-      this.abfsHttpService \u003d abfsServiceProvider.get(AbfsHttpService.class);\n-      this.configurationService \u003d abfsServiceProvider.get(ConfigurationService.class);\n-    } catch (AzureBlobFileSystemException exception) {\n-      throw new IOException(exception);\n-    }\n-\n     this.LOG.debug(\n         \"Initializing AzureBlobFileSystem for {}\", uri);\n \n     this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n     this.userGroupInformation \u003d UserGroupInformation.getCurrentUser();\n     this.user \u003d userGroupInformation.getUserName();\n     this.primaryUserGroup \u003d userGroupInformation.getPrimaryGroupName();\n+    this.abfsStore \u003d new AzureBlobFileSystemStore(uri, this.isSecure(), configuration, userGroupInformation);\n \n     this.LOG.debug(\n         \"Initializing NativeAzureFileSystem for {}\", uri);\n \n     this.setWorkingDirectory(this.getHomeDirectory());\n \n-    if (this.configurationService.getCreateRemoteFileSystemDuringInitialization()) {\n+    if (abfsStore.getAbfsConfiguration().getCreateRemoteFileSystemDuringInitialization()) {\n       this.createFileSystem();\n     }\n \n     this.mkdirs(this.workingDir);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration configuration)\n      throws IOException {\n    uri \u003d ensureAuthority(uri, configuration);\n    super.initialize(uri, configuration);\n    setConf(configuration);\n\n    this.LOG.debug(\n        \"Initializing AzureBlobFileSystem for {}\", uri);\n\n    this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n    this.userGroupInformation \u003d UserGroupInformation.getCurrentUser();\n    this.user \u003d userGroupInformation.getUserName();\n    this.primaryUserGroup \u003d userGroupInformation.getPrimaryGroupName();\n    this.abfsStore \u003d new AzureBlobFileSystemStore(uri, this.isSecure(), configuration, userGroupInformation);\n\n    this.LOG.debug(\n        \"Initializing NativeAzureFileSystem for {}\", uri);\n\n    this.setWorkingDirectory(this.getHomeDirectory());\n\n    if (abfsStore.getAbfsConfiguration().getCreateRemoteFileSystemDuringInitialization()) {\n      this.createFileSystem();\n    }\n\n    this.mkdirs(this.workingDir);\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystem.java",
      "extendedDetails": {}
    },
    "f044deedbbfee0812316d587139cb828f27172e9": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15407. HADOOP-15540. Support Windows Azure Storage - Blob file system \"ABFS\" in Hadoop: Core Commit.\n\nContributed by Shane Mainali, Thomas Marquardt, Zichen Sun, Georgi Chalakov, Esfandiar Manii, Amit Singh, Dana Kaban, Da Zhou, Junhua Gu, Saher Ahwal, Saurabh Pant, James Baker, Shaoyu Zhang, Lawrence Chen, Kevin Chen and Steve Loughran\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "f044deedbbfee0812316d587139cb828f27172e9",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,35 @@\n+  public void initialize(URI uri, Configuration configuration)\n+      throws IOException {\n+    uri \u003d ensureAuthority(uri, configuration);\n+    super.initialize(uri, configuration);\n+\n+    setConf(configuration);\n+\n+    try {\n+      this.abfsServiceProvider \u003d AbfsServiceProviderImpl.create(configuration);\n+      this.tracingService \u003d abfsServiceProvider.get(TracingService.class);\n+      this.abfsHttpService \u003d abfsServiceProvider.get(AbfsHttpService.class);\n+      this.configurationService \u003d abfsServiceProvider.get(ConfigurationService.class);\n+    } catch (AzureBlobFileSystemException exception) {\n+      throw new IOException(exception);\n+    }\n+\n+    this.LOG.debug(\n+        \"Initializing AzureBlobFileSystem for {}\", uri);\n+\n+    this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n+    this.userGroupInformation \u003d UserGroupInformation.getCurrentUser();\n+    this.user \u003d userGroupInformation.getUserName();\n+    this.primaryUserGroup \u003d userGroupInformation.getPrimaryGroupName();\n+\n+    this.LOG.debug(\n+        \"Initializing NativeAzureFileSystem for {}\", uri);\n+\n+    this.setWorkingDirectory(this.getHomeDirectory());\n+\n+    if (this.configurationService.getCreateRemoteFileSystemDuringInitialization()) {\n+      this.createFileSystem();\n+    }\n+\n+    this.mkdirs(this.workingDir);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration configuration)\n      throws IOException {\n    uri \u003d ensureAuthority(uri, configuration);\n    super.initialize(uri, configuration);\n\n    setConf(configuration);\n\n    try {\n      this.abfsServiceProvider \u003d AbfsServiceProviderImpl.create(configuration);\n      this.tracingService \u003d abfsServiceProvider.get(TracingService.class);\n      this.abfsHttpService \u003d abfsServiceProvider.get(AbfsHttpService.class);\n      this.configurationService \u003d abfsServiceProvider.get(ConfigurationService.class);\n    } catch (AzureBlobFileSystemException exception) {\n      throw new IOException(exception);\n    }\n\n    this.LOG.debug(\n        \"Initializing AzureBlobFileSystem for {}\", uri);\n\n    this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n    this.userGroupInformation \u003d UserGroupInformation.getCurrentUser();\n    this.user \u003d userGroupInformation.getUserName();\n    this.primaryUserGroup \u003d userGroupInformation.getPrimaryGroupName();\n\n    this.LOG.debug(\n        \"Initializing NativeAzureFileSystem for {}\", uri);\n\n    this.setWorkingDirectory(this.getHomeDirectory());\n\n    if (this.configurationService.getCreateRemoteFileSystemDuringInitialization()) {\n      this.createFileSystem();\n    }\n\n    this.mkdirs(this.workingDir);\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystem.java"
    }
  }
}