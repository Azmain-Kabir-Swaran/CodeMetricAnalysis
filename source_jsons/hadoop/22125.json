{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "InMemoryMapOutput.java",
  "functionName": "doShuffle",
  "functionId": "doShuffle___host-MapHost__iFin-IFileInputStream__compressedLength-long__decompressedLength-long__metrics-ShuffleClientMetrics__reporter-Reporter",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/InMemoryMapOutput.java",
  "functionStartLine": 78,
  "functionEndLine": 111,
  "numCommitsSeen": 19,
  "timeTaken": 7123,
  "changeHistory": [
    "d90c13e2da8867661bf19a802add70145ab9a462",
    "c0737b0bdb53c72a036644ad48f57dd8d3f58b36",
    "73fd247c7649919350ecfd16806af57ffe554649",
    "8fcad7e8e9fd8c80207d9593115901d53b3b7d42",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "d90c13e2da8867661bf19a802add70145ab9a462": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange)",
    "c0737b0bdb53c72a036644ad48f57dd8d3f58b36": "Ybodychange",
    "73fd247c7649919350ecfd16806af57ffe554649": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yrename,Yparameterchange)",
    "8fcad7e8e9fd8c80207d9593115901d53b3b7d42": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d90c13e2da8867661bf19a802add70145ab9a462": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-6174. Combine common stream code into parent class for InMemoryMapOutput and OnDiskMapOutput. (Eric Payne via gera)\n",
      "commitDate": "03/06/15 4:50 PM",
      "commitName": "d90c13e2da8867661bf19a802add70145ab9a462",
      "commitAuthor": "Gera Shegalov",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "MAPREDUCE-6174. Combine common stream code into parent class for InMemoryMapOutput and OnDiskMapOutput. (Eric Payne via gera)\n",
          "commitDate": "03/06/15 4:50 PM",
          "commitName": "d90c13e2da8867661bf19a802add70145ab9a462",
          "commitAuthor": "Gera Shegalov",
          "commitDateOld": "10/06/13 2:39 PM",
          "commitNameOld": "c0737b0bdb53c72a036644ad48f57dd8d3f58b36",
          "commitAuthorOld": "Jason Darrell Lowe",
          "daysBetweenCommits": 723.09,
          "commitsBetweenForRepo": 5549,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,34 @@\n-  public void shuffle(MapHost host, InputStream input,\n+  protected void doShuffle(MapHost host, IFileInputStream iFin,\n                       long compressedLength, long decompressedLength,\n                       ShuffleClientMetrics metrics,\n                       Reporter reporter) throws IOException {\n-    IFileInputStream checksumIn \u003d \n-      new IFileInputStream(input, compressedLength, conf);\n+    InputStream input \u003d iFin;\n \n-    input \u003d checksumIn;       \n-  \n     // Are map-outputs compressed?\n     if (codec !\u003d null) {\n       decompressor.reset();\n       input \u003d codec.createInputStream(input, decompressor);\n     }\n   \n     try {\n       IOUtils.readFully(input, memory, 0, memory.length);\n       metrics.inputBytes(memory.length);\n       reporter.progress();\n       LOG.info(\"Read \" + memory.length + \" bytes from map-output for \" +\n                 getMapId());\n \n       /**\n        * We\u0027ve gotten the amount of data we were expecting. Verify the\n        * decompressor has nothing more to offer. This action also forces the\n        * decompressor to read any trailing bytes that weren\u0027t critical\n        * for decompression, which is necessary to keep the stream\n        * in sync.\n        */\n       if (input.read() \u003e\u003d 0 ) {\n         throw new IOException(\"Unexpected extra bytes from input stream for \" +\n                                getMapId());\n       }\n-\n-    } catch (IOException ioe) {      \n-      // Close the streams\n-      IOUtils.cleanup(LOG, input);\n-\n-      // Re-throw\n-      throw ioe;\n     } finally {\n       CodecPool.returnDecompressor(decompressor);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void doShuffle(MapHost host, IFileInputStream iFin,\n                      long compressedLength, long decompressedLength,\n                      ShuffleClientMetrics metrics,\n                      Reporter reporter) throws IOException {\n    InputStream input \u003d iFin;\n\n    // Are map-outputs compressed?\n    if (codec !\u003d null) {\n      decompressor.reset();\n      input \u003d codec.createInputStream(input, decompressor);\n    }\n  \n    try {\n      IOUtils.readFully(input, memory, 0, memory.length);\n      metrics.inputBytes(memory.length);\n      reporter.progress();\n      LOG.info(\"Read \" + memory.length + \" bytes from map-output for \" +\n                getMapId());\n\n      /**\n       * We\u0027ve gotten the amount of data we were expecting. Verify the\n       * decompressor has nothing more to offer. This action also forces the\n       * decompressor to read any trailing bytes that weren\u0027t critical\n       * for decompression, which is necessary to keep the stream\n       * in sync.\n       */\n      if (input.read() \u003e\u003d 0 ) {\n        throw new IOException(\"Unexpected extra bytes from input stream for \" +\n                               getMapId());\n      }\n    } finally {\n      CodecPool.returnDecompressor(decompressor);\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/InMemoryMapOutput.java",
          "extendedDetails": {
            "oldValue": "shuffle",
            "newValue": "doShuffle"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-6174. Combine common stream code into parent class for InMemoryMapOutput and OnDiskMapOutput. (Eric Payne via gera)\n",
          "commitDate": "03/06/15 4:50 PM",
          "commitName": "d90c13e2da8867661bf19a802add70145ab9a462",
          "commitAuthor": "Gera Shegalov",
          "commitDateOld": "10/06/13 2:39 PM",
          "commitNameOld": "c0737b0bdb53c72a036644ad48f57dd8d3f58b36",
          "commitAuthorOld": "Jason Darrell Lowe",
          "daysBetweenCommits": 723.09,
          "commitsBetweenForRepo": 5549,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,34 @@\n-  public void shuffle(MapHost host, InputStream input,\n+  protected void doShuffle(MapHost host, IFileInputStream iFin,\n                       long compressedLength, long decompressedLength,\n                       ShuffleClientMetrics metrics,\n                       Reporter reporter) throws IOException {\n-    IFileInputStream checksumIn \u003d \n-      new IFileInputStream(input, compressedLength, conf);\n+    InputStream input \u003d iFin;\n \n-    input \u003d checksumIn;       \n-  \n     // Are map-outputs compressed?\n     if (codec !\u003d null) {\n       decompressor.reset();\n       input \u003d codec.createInputStream(input, decompressor);\n     }\n   \n     try {\n       IOUtils.readFully(input, memory, 0, memory.length);\n       metrics.inputBytes(memory.length);\n       reporter.progress();\n       LOG.info(\"Read \" + memory.length + \" bytes from map-output for \" +\n                 getMapId());\n \n       /**\n        * We\u0027ve gotten the amount of data we were expecting. Verify the\n        * decompressor has nothing more to offer. This action also forces the\n        * decompressor to read any trailing bytes that weren\u0027t critical\n        * for decompression, which is necessary to keep the stream\n        * in sync.\n        */\n       if (input.read() \u003e\u003d 0 ) {\n         throw new IOException(\"Unexpected extra bytes from input stream for \" +\n                                getMapId());\n       }\n-\n-    } catch (IOException ioe) {      \n-      // Close the streams\n-      IOUtils.cleanup(LOG, input);\n-\n-      // Re-throw\n-      throw ioe;\n     } finally {\n       CodecPool.returnDecompressor(decompressor);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void doShuffle(MapHost host, IFileInputStream iFin,\n                      long compressedLength, long decompressedLength,\n                      ShuffleClientMetrics metrics,\n                      Reporter reporter) throws IOException {\n    InputStream input \u003d iFin;\n\n    // Are map-outputs compressed?\n    if (codec !\u003d null) {\n      decompressor.reset();\n      input \u003d codec.createInputStream(input, decompressor);\n    }\n  \n    try {\n      IOUtils.readFully(input, memory, 0, memory.length);\n      metrics.inputBytes(memory.length);\n      reporter.progress();\n      LOG.info(\"Read \" + memory.length + \" bytes from map-output for \" +\n                getMapId());\n\n      /**\n       * We\u0027ve gotten the amount of data we were expecting. Verify the\n       * decompressor has nothing more to offer. This action also forces the\n       * decompressor to read any trailing bytes that weren\u0027t critical\n       * for decompression, which is necessary to keep the stream\n       * in sync.\n       */\n      if (input.read() \u003e\u003d 0 ) {\n        throw new IOException(\"Unexpected extra bytes from input stream for \" +\n                               getMapId());\n      }\n    } finally {\n      CodecPool.returnDecompressor(decompressor);\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/InMemoryMapOutput.java",
          "extendedDetails": {
            "oldValue": "[host-MapHost, input-InputStream, compressedLength-long, decompressedLength-long, metrics-ShuffleClientMetrics, reporter-Reporter]",
            "newValue": "[host-MapHost, iFin-IFileInputStream, compressedLength-long, decompressedLength-long, metrics-ShuffleClientMetrics, reporter-Reporter]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "MAPREDUCE-6174. Combine common stream code into parent class for InMemoryMapOutput and OnDiskMapOutput. (Eric Payne via gera)\n",
          "commitDate": "03/06/15 4:50 PM",
          "commitName": "d90c13e2da8867661bf19a802add70145ab9a462",
          "commitAuthor": "Gera Shegalov",
          "commitDateOld": "10/06/13 2:39 PM",
          "commitNameOld": "c0737b0bdb53c72a036644ad48f57dd8d3f58b36",
          "commitAuthorOld": "Jason Darrell Lowe",
          "daysBetweenCommits": 723.09,
          "commitsBetweenForRepo": 5549,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,34 @@\n-  public void shuffle(MapHost host, InputStream input,\n+  protected void doShuffle(MapHost host, IFileInputStream iFin,\n                       long compressedLength, long decompressedLength,\n                       ShuffleClientMetrics metrics,\n                       Reporter reporter) throws IOException {\n-    IFileInputStream checksumIn \u003d \n-      new IFileInputStream(input, compressedLength, conf);\n+    InputStream input \u003d iFin;\n \n-    input \u003d checksumIn;       \n-  \n     // Are map-outputs compressed?\n     if (codec !\u003d null) {\n       decompressor.reset();\n       input \u003d codec.createInputStream(input, decompressor);\n     }\n   \n     try {\n       IOUtils.readFully(input, memory, 0, memory.length);\n       metrics.inputBytes(memory.length);\n       reporter.progress();\n       LOG.info(\"Read \" + memory.length + \" bytes from map-output for \" +\n                 getMapId());\n \n       /**\n        * We\u0027ve gotten the amount of data we were expecting. Verify the\n        * decompressor has nothing more to offer. This action also forces the\n        * decompressor to read any trailing bytes that weren\u0027t critical\n        * for decompression, which is necessary to keep the stream\n        * in sync.\n        */\n       if (input.read() \u003e\u003d 0 ) {\n         throw new IOException(\"Unexpected extra bytes from input stream for \" +\n                                getMapId());\n       }\n-\n-    } catch (IOException ioe) {      \n-      // Close the streams\n-      IOUtils.cleanup(LOG, input);\n-\n-      // Re-throw\n-      throw ioe;\n     } finally {\n       CodecPool.returnDecompressor(decompressor);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void doShuffle(MapHost host, IFileInputStream iFin,\n                      long compressedLength, long decompressedLength,\n                      ShuffleClientMetrics metrics,\n                      Reporter reporter) throws IOException {\n    InputStream input \u003d iFin;\n\n    // Are map-outputs compressed?\n    if (codec !\u003d null) {\n      decompressor.reset();\n      input \u003d codec.createInputStream(input, decompressor);\n    }\n  \n    try {\n      IOUtils.readFully(input, memory, 0, memory.length);\n      metrics.inputBytes(memory.length);\n      reporter.progress();\n      LOG.info(\"Read \" + memory.length + \" bytes from map-output for \" +\n                getMapId());\n\n      /**\n       * We\u0027ve gotten the amount of data we were expecting. Verify the\n       * decompressor has nothing more to offer. This action also forces the\n       * decompressor to read any trailing bytes that weren\u0027t critical\n       * for decompression, which is necessary to keep the stream\n       * in sync.\n       */\n      if (input.read() \u003e\u003d 0 ) {\n        throw new IOException(\"Unexpected extra bytes from input stream for \" +\n                               getMapId());\n      }\n    } finally {\n      CodecPool.returnDecompressor(decompressor);\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/InMemoryMapOutput.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-6174. Combine common stream code into parent class for InMemoryMapOutput and OnDiskMapOutput. (Eric Payne via gera)\n",
          "commitDate": "03/06/15 4:50 PM",
          "commitName": "d90c13e2da8867661bf19a802add70145ab9a462",
          "commitAuthor": "Gera Shegalov",
          "commitDateOld": "10/06/13 2:39 PM",
          "commitNameOld": "c0737b0bdb53c72a036644ad48f57dd8d3f58b36",
          "commitAuthorOld": "Jason Darrell Lowe",
          "daysBetweenCommits": 723.09,
          "commitsBetweenForRepo": 5549,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,34 @@\n-  public void shuffle(MapHost host, InputStream input,\n+  protected void doShuffle(MapHost host, IFileInputStream iFin,\n                       long compressedLength, long decompressedLength,\n                       ShuffleClientMetrics metrics,\n                       Reporter reporter) throws IOException {\n-    IFileInputStream checksumIn \u003d \n-      new IFileInputStream(input, compressedLength, conf);\n+    InputStream input \u003d iFin;\n \n-    input \u003d checksumIn;       \n-  \n     // Are map-outputs compressed?\n     if (codec !\u003d null) {\n       decompressor.reset();\n       input \u003d codec.createInputStream(input, decompressor);\n     }\n   \n     try {\n       IOUtils.readFully(input, memory, 0, memory.length);\n       metrics.inputBytes(memory.length);\n       reporter.progress();\n       LOG.info(\"Read \" + memory.length + \" bytes from map-output for \" +\n                 getMapId());\n \n       /**\n        * We\u0027ve gotten the amount of data we were expecting. Verify the\n        * decompressor has nothing more to offer. This action also forces the\n        * decompressor to read any trailing bytes that weren\u0027t critical\n        * for decompression, which is necessary to keep the stream\n        * in sync.\n        */\n       if (input.read() \u003e\u003d 0 ) {\n         throw new IOException(\"Unexpected extra bytes from input stream for \" +\n                                getMapId());\n       }\n-\n-    } catch (IOException ioe) {      \n-      // Close the streams\n-      IOUtils.cleanup(LOG, input);\n-\n-      // Re-throw\n-      throw ioe;\n     } finally {\n       CodecPool.returnDecompressor(decompressor);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void doShuffle(MapHost host, IFileInputStream iFin,\n                      long compressedLength, long decompressedLength,\n                      ShuffleClientMetrics metrics,\n                      Reporter reporter) throws IOException {\n    InputStream input \u003d iFin;\n\n    // Are map-outputs compressed?\n    if (codec !\u003d null) {\n      decompressor.reset();\n      input \u003d codec.createInputStream(input, decompressor);\n    }\n  \n    try {\n      IOUtils.readFully(input, memory, 0, memory.length);\n      metrics.inputBytes(memory.length);\n      reporter.progress();\n      LOG.info(\"Read \" + memory.length + \" bytes from map-output for \" +\n                getMapId());\n\n      /**\n       * We\u0027ve gotten the amount of data we were expecting. Verify the\n       * decompressor has nothing more to offer. This action also forces the\n       * decompressor to read any trailing bytes that weren\u0027t critical\n       * for decompression, which is necessary to keep the stream\n       * in sync.\n       */\n      if (input.read() \u003e\u003d 0 ) {\n        throw new IOException(\"Unexpected extra bytes from input stream for \" +\n                               getMapId());\n      }\n    } finally {\n      CodecPool.returnDecompressor(decompressor);\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/InMemoryMapOutput.java",
          "extendedDetails": {}
        }
      ]
    },
    "c0737b0bdb53c72a036644ad48f57dd8d3f58b36": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5308. Shuffling to memory can get out-of-sync when fetching multiple compressed map outputs. Contributed by Nathan Roberts\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1491611 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/06/13 2:39 PM",
      "commitName": "c0737b0bdb53c72a036644ad48f57dd8d3f58b36",
      "commitAuthor": "Jason Darrell Lowe",
      "commitDateOld": "22/01/13 6:10 AM",
      "commitNameOld": "73fd247c7649919350ecfd16806af57ffe554649",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 139.31,
      "commitsBetweenForRepo": 804,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,44 @@\n   public void shuffle(MapHost host, InputStream input,\n                       long compressedLength, long decompressedLength,\n                       ShuffleClientMetrics metrics,\n                       Reporter reporter) throws IOException {\n     IFileInputStream checksumIn \u003d \n       new IFileInputStream(input, compressedLength, conf);\n \n     input \u003d checksumIn;       \n   \n     // Are map-outputs compressed?\n     if (codec !\u003d null) {\n       decompressor.reset();\n       input \u003d codec.createInputStream(input, decompressor);\n     }\n   \n     try {\n       IOUtils.readFully(input, memory, 0, memory.length);\n       metrics.inputBytes(memory.length);\n       reporter.progress();\n       LOG.info(\"Read \" + memory.length + \" bytes from map-output for \" +\n                 getMapId());\n+\n+      /**\n+       * We\u0027ve gotten the amount of data we were expecting. Verify the\n+       * decompressor has nothing more to offer. This action also forces the\n+       * decompressor to read any trailing bytes that weren\u0027t critical\n+       * for decompression, which is necessary to keep the stream\n+       * in sync.\n+       */\n+      if (input.read() \u003e\u003d 0 ) {\n+        throw new IOException(\"Unexpected extra bytes from input stream for \" +\n+                               getMapId());\n+      }\n+\n     } catch (IOException ioe) {      \n       // Close the streams\n       IOUtils.cleanup(LOG, input);\n \n       // Re-throw\n       throw ioe;\n     } finally {\n       CodecPool.returnDecompressor(decompressor);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void shuffle(MapHost host, InputStream input,\n                      long compressedLength, long decompressedLength,\n                      ShuffleClientMetrics metrics,\n                      Reporter reporter) throws IOException {\n    IFileInputStream checksumIn \u003d \n      new IFileInputStream(input, compressedLength, conf);\n\n    input \u003d checksumIn;       \n  \n    // Are map-outputs compressed?\n    if (codec !\u003d null) {\n      decompressor.reset();\n      input \u003d codec.createInputStream(input, decompressor);\n    }\n  \n    try {\n      IOUtils.readFully(input, memory, 0, memory.length);\n      metrics.inputBytes(memory.length);\n      reporter.progress();\n      LOG.info(\"Read \" + memory.length + \" bytes from map-output for \" +\n                getMapId());\n\n      /**\n       * We\u0027ve gotten the amount of data we were expecting. Verify the\n       * decompressor has nothing more to offer. This action also forces the\n       * decompressor to read any trailing bytes that weren\u0027t critical\n       * for decompression, which is necessary to keep the stream\n       * in sync.\n       */\n      if (input.read() \u003e\u003d 0 ) {\n        throw new IOException(\"Unexpected extra bytes from input stream for \" +\n                               getMapId());\n      }\n\n    } catch (IOException ioe) {      \n      // Close the streams\n      IOUtils.cleanup(LOG, input);\n\n      // Re-throw\n      throw ioe;\n    } finally {\n      CodecPool.returnDecompressor(decompressor);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/InMemoryMapOutput.java",
      "extendedDetails": {}
    },
    "73fd247c7649919350ecfd16806af57ffe554649": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yrename,Yparameterchange)",
      "commitMessage": "MAPREDUCE-4808. Refactor MapOutput and MergeManager to facilitate reuse by Shuffle implementations. (masokan via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1436936 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/01/13 6:10 AM",
      "commitName": "73fd247c7649919350ecfd16806af57ffe554649",
      "commitAuthor": "Alejandro Abdelnur",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "MAPREDUCE-4808. Refactor MapOutput and MergeManager to facilitate reuse by Shuffle implementations. (masokan via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1436936 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/01/13 6:10 AM",
          "commitName": "73fd247c7649919350ecfd16806af57ffe554649",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "21/01/13 6:59 PM",
          "commitNameOld": "cfae13306ac0fb3f3c139d5ac511bf78cede1b77",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.47,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,31 @@\n-  private void shuffleToMemory(MapHost host, MapOutput\u003cK,V\u003e mapOutput, \n-                               InputStream input, \n-                               int decompressedLength, \n-                               int compressedLength) throws IOException {    \n+  public void shuffle(MapHost host, InputStream input,\n+                      long compressedLength, long decompressedLength,\n+                      ShuffleClientMetrics metrics,\n+                      Reporter reporter) throws IOException {\n     IFileInputStream checksumIn \u003d \n-      new IFileInputStream(input, compressedLength, job);\n+      new IFileInputStream(input, compressedLength, conf);\n \n     input \u003d checksumIn;       \n   \n     // Are map-outputs compressed?\n     if (codec !\u003d null) {\n       decompressor.reset();\n       input \u003d codec.createInputStream(input, decompressor);\n     }\n   \n-    // Copy map-output into an in-memory buffer\n-    byte[] shuffleData \u003d mapOutput.getMemory();\n-    \n     try {\n-      IOUtils.readFully(input, shuffleData, 0, shuffleData.length);\n-      metrics.inputBytes(shuffleData.length);\n+      IOUtils.readFully(input, memory, 0, memory.length);\n+      metrics.inputBytes(memory.length);\n       reporter.progress();\n-      LOG.info(\"Read \" + shuffleData.length + \" bytes from map-output for \" +\n-               mapOutput.getMapId());\n+      LOG.info(\"Read \" + memory.length + \" bytes from map-output for \" +\n+                getMapId());\n     } catch (IOException ioe) {      \n       // Close the streams\n       IOUtils.cleanup(LOG, input);\n \n       // Re-throw\n       throw ioe;\n+    } finally {\n+      CodecPool.returnDecompressor(decompressor);\n     }\n-\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void shuffle(MapHost host, InputStream input,\n                      long compressedLength, long decompressedLength,\n                      ShuffleClientMetrics metrics,\n                      Reporter reporter) throws IOException {\n    IFileInputStream checksumIn \u003d \n      new IFileInputStream(input, compressedLength, conf);\n\n    input \u003d checksumIn;       \n  \n    // Are map-outputs compressed?\n    if (codec !\u003d null) {\n      decompressor.reset();\n      input \u003d codec.createInputStream(input, decompressor);\n    }\n  \n    try {\n      IOUtils.readFully(input, memory, 0, memory.length);\n      metrics.inputBytes(memory.length);\n      reporter.progress();\n      LOG.info(\"Read \" + memory.length + \" bytes from map-output for \" +\n                getMapId());\n    } catch (IOException ioe) {      \n      // Close the streams\n      IOUtils.cleanup(LOG, input);\n\n      // Re-throw\n      throw ioe;\n    } finally {\n      CodecPool.returnDecompressor(decompressor);\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/InMemoryMapOutput.java",
          "extendedDetails": {
            "oldPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/Fetcher.java",
            "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/InMemoryMapOutput.java",
            "oldMethodName": "shuffleToMemory",
            "newMethodName": "shuffle"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "MAPREDUCE-4808. Refactor MapOutput and MergeManager to facilitate reuse by Shuffle implementations. (masokan via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1436936 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/01/13 6:10 AM",
          "commitName": "73fd247c7649919350ecfd16806af57ffe554649",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "21/01/13 6:59 PM",
          "commitNameOld": "cfae13306ac0fb3f3c139d5ac511bf78cede1b77",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.47,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,31 @@\n-  private void shuffleToMemory(MapHost host, MapOutput\u003cK,V\u003e mapOutput, \n-                               InputStream input, \n-                               int decompressedLength, \n-                               int compressedLength) throws IOException {    \n+  public void shuffle(MapHost host, InputStream input,\n+                      long compressedLength, long decompressedLength,\n+                      ShuffleClientMetrics metrics,\n+                      Reporter reporter) throws IOException {\n     IFileInputStream checksumIn \u003d \n-      new IFileInputStream(input, compressedLength, job);\n+      new IFileInputStream(input, compressedLength, conf);\n \n     input \u003d checksumIn;       \n   \n     // Are map-outputs compressed?\n     if (codec !\u003d null) {\n       decompressor.reset();\n       input \u003d codec.createInputStream(input, decompressor);\n     }\n   \n-    // Copy map-output into an in-memory buffer\n-    byte[] shuffleData \u003d mapOutput.getMemory();\n-    \n     try {\n-      IOUtils.readFully(input, shuffleData, 0, shuffleData.length);\n-      metrics.inputBytes(shuffleData.length);\n+      IOUtils.readFully(input, memory, 0, memory.length);\n+      metrics.inputBytes(memory.length);\n       reporter.progress();\n-      LOG.info(\"Read \" + shuffleData.length + \" bytes from map-output for \" +\n-               mapOutput.getMapId());\n+      LOG.info(\"Read \" + memory.length + \" bytes from map-output for \" +\n+                getMapId());\n     } catch (IOException ioe) {      \n       // Close the streams\n       IOUtils.cleanup(LOG, input);\n \n       // Re-throw\n       throw ioe;\n+    } finally {\n+      CodecPool.returnDecompressor(decompressor);\n     }\n-\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void shuffle(MapHost host, InputStream input,\n                      long compressedLength, long decompressedLength,\n                      ShuffleClientMetrics metrics,\n                      Reporter reporter) throws IOException {\n    IFileInputStream checksumIn \u003d \n      new IFileInputStream(input, compressedLength, conf);\n\n    input \u003d checksumIn;       \n  \n    // Are map-outputs compressed?\n    if (codec !\u003d null) {\n      decompressor.reset();\n      input \u003d codec.createInputStream(input, decompressor);\n    }\n  \n    try {\n      IOUtils.readFully(input, memory, 0, memory.length);\n      metrics.inputBytes(memory.length);\n      reporter.progress();\n      LOG.info(\"Read \" + memory.length + \" bytes from map-output for \" +\n                getMapId());\n    } catch (IOException ioe) {      \n      // Close the streams\n      IOUtils.cleanup(LOG, input);\n\n      // Re-throw\n      throw ioe;\n    } finally {\n      CodecPool.returnDecompressor(decompressor);\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/InMemoryMapOutput.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-4808. Refactor MapOutput and MergeManager to facilitate reuse by Shuffle implementations. (masokan via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1436936 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/01/13 6:10 AM",
          "commitName": "73fd247c7649919350ecfd16806af57ffe554649",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "21/01/13 6:59 PM",
          "commitNameOld": "cfae13306ac0fb3f3c139d5ac511bf78cede1b77",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.47,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,31 @@\n-  private void shuffleToMemory(MapHost host, MapOutput\u003cK,V\u003e mapOutput, \n-                               InputStream input, \n-                               int decompressedLength, \n-                               int compressedLength) throws IOException {    \n+  public void shuffle(MapHost host, InputStream input,\n+                      long compressedLength, long decompressedLength,\n+                      ShuffleClientMetrics metrics,\n+                      Reporter reporter) throws IOException {\n     IFileInputStream checksumIn \u003d \n-      new IFileInputStream(input, compressedLength, job);\n+      new IFileInputStream(input, compressedLength, conf);\n \n     input \u003d checksumIn;       \n   \n     // Are map-outputs compressed?\n     if (codec !\u003d null) {\n       decompressor.reset();\n       input \u003d codec.createInputStream(input, decompressor);\n     }\n   \n-    // Copy map-output into an in-memory buffer\n-    byte[] shuffleData \u003d mapOutput.getMemory();\n-    \n     try {\n-      IOUtils.readFully(input, shuffleData, 0, shuffleData.length);\n-      metrics.inputBytes(shuffleData.length);\n+      IOUtils.readFully(input, memory, 0, memory.length);\n+      metrics.inputBytes(memory.length);\n       reporter.progress();\n-      LOG.info(\"Read \" + shuffleData.length + \" bytes from map-output for \" +\n-               mapOutput.getMapId());\n+      LOG.info(\"Read \" + memory.length + \" bytes from map-output for \" +\n+                getMapId());\n     } catch (IOException ioe) {      \n       // Close the streams\n       IOUtils.cleanup(LOG, input);\n \n       // Re-throw\n       throw ioe;\n+    } finally {\n+      CodecPool.returnDecompressor(decompressor);\n     }\n-\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void shuffle(MapHost host, InputStream input,\n                      long compressedLength, long decompressedLength,\n                      ShuffleClientMetrics metrics,\n                      Reporter reporter) throws IOException {\n    IFileInputStream checksumIn \u003d \n      new IFileInputStream(input, compressedLength, conf);\n\n    input \u003d checksumIn;       \n  \n    // Are map-outputs compressed?\n    if (codec !\u003d null) {\n      decompressor.reset();\n      input \u003d codec.createInputStream(input, decompressor);\n    }\n  \n    try {\n      IOUtils.readFully(input, memory, 0, memory.length);\n      metrics.inputBytes(memory.length);\n      reporter.progress();\n      LOG.info(\"Read \" + memory.length + \" bytes from map-output for \" +\n                getMapId());\n    } catch (IOException ioe) {      \n      // Close the streams\n      IOUtils.cleanup(LOG, input);\n\n      // Re-throw\n      throw ioe;\n    } finally {\n      CodecPool.returnDecompressor(decompressor);\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/InMemoryMapOutput.java",
          "extendedDetails": {}
        },
        {
          "type": "Yrename",
          "commitMessage": "MAPREDUCE-4808. Refactor MapOutput and MergeManager to facilitate reuse by Shuffle implementations. (masokan via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1436936 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/01/13 6:10 AM",
          "commitName": "73fd247c7649919350ecfd16806af57ffe554649",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "21/01/13 6:59 PM",
          "commitNameOld": "cfae13306ac0fb3f3c139d5ac511bf78cede1b77",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.47,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,31 @@\n-  private void shuffleToMemory(MapHost host, MapOutput\u003cK,V\u003e mapOutput, \n-                               InputStream input, \n-                               int decompressedLength, \n-                               int compressedLength) throws IOException {    \n+  public void shuffle(MapHost host, InputStream input,\n+                      long compressedLength, long decompressedLength,\n+                      ShuffleClientMetrics metrics,\n+                      Reporter reporter) throws IOException {\n     IFileInputStream checksumIn \u003d \n-      new IFileInputStream(input, compressedLength, job);\n+      new IFileInputStream(input, compressedLength, conf);\n \n     input \u003d checksumIn;       \n   \n     // Are map-outputs compressed?\n     if (codec !\u003d null) {\n       decompressor.reset();\n       input \u003d codec.createInputStream(input, decompressor);\n     }\n   \n-    // Copy map-output into an in-memory buffer\n-    byte[] shuffleData \u003d mapOutput.getMemory();\n-    \n     try {\n-      IOUtils.readFully(input, shuffleData, 0, shuffleData.length);\n-      metrics.inputBytes(shuffleData.length);\n+      IOUtils.readFully(input, memory, 0, memory.length);\n+      metrics.inputBytes(memory.length);\n       reporter.progress();\n-      LOG.info(\"Read \" + shuffleData.length + \" bytes from map-output for \" +\n-               mapOutput.getMapId());\n+      LOG.info(\"Read \" + memory.length + \" bytes from map-output for \" +\n+                getMapId());\n     } catch (IOException ioe) {      \n       // Close the streams\n       IOUtils.cleanup(LOG, input);\n \n       // Re-throw\n       throw ioe;\n+    } finally {\n+      CodecPool.returnDecompressor(decompressor);\n     }\n-\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void shuffle(MapHost host, InputStream input,\n                      long compressedLength, long decompressedLength,\n                      ShuffleClientMetrics metrics,\n                      Reporter reporter) throws IOException {\n    IFileInputStream checksumIn \u003d \n      new IFileInputStream(input, compressedLength, conf);\n\n    input \u003d checksumIn;       \n  \n    // Are map-outputs compressed?\n    if (codec !\u003d null) {\n      decompressor.reset();\n      input \u003d codec.createInputStream(input, decompressor);\n    }\n  \n    try {\n      IOUtils.readFully(input, memory, 0, memory.length);\n      metrics.inputBytes(memory.length);\n      reporter.progress();\n      LOG.info(\"Read \" + memory.length + \" bytes from map-output for \" +\n                getMapId());\n    } catch (IOException ioe) {      \n      // Close the streams\n      IOUtils.cleanup(LOG, input);\n\n      // Re-throw\n      throw ioe;\n    } finally {\n      CodecPool.returnDecompressor(decompressor);\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/InMemoryMapOutput.java",
          "extendedDetails": {
            "oldValue": "shuffleToMemory",
            "newValue": "shuffle"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-4808. Refactor MapOutput and MergeManager to facilitate reuse by Shuffle implementations. (masokan via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1436936 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/01/13 6:10 AM",
          "commitName": "73fd247c7649919350ecfd16806af57ffe554649",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "21/01/13 6:59 PM",
          "commitNameOld": "cfae13306ac0fb3f3c139d5ac511bf78cede1b77",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.47,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,31 @@\n-  private void shuffleToMemory(MapHost host, MapOutput\u003cK,V\u003e mapOutput, \n-                               InputStream input, \n-                               int decompressedLength, \n-                               int compressedLength) throws IOException {    \n+  public void shuffle(MapHost host, InputStream input,\n+                      long compressedLength, long decompressedLength,\n+                      ShuffleClientMetrics metrics,\n+                      Reporter reporter) throws IOException {\n     IFileInputStream checksumIn \u003d \n-      new IFileInputStream(input, compressedLength, job);\n+      new IFileInputStream(input, compressedLength, conf);\n \n     input \u003d checksumIn;       \n   \n     // Are map-outputs compressed?\n     if (codec !\u003d null) {\n       decompressor.reset();\n       input \u003d codec.createInputStream(input, decompressor);\n     }\n   \n-    // Copy map-output into an in-memory buffer\n-    byte[] shuffleData \u003d mapOutput.getMemory();\n-    \n     try {\n-      IOUtils.readFully(input, shuffleData, 0, shuffleData.length);\n-      metrics.inputBytes(shuffleData.length);\n+      IOUtils.readFully(input, memory, 0, memory.length);\n+      metrics.inputBytes(memory.length);\n       reporter.progress();\n-      LOG.info(\"Read \" + shuffleData.length + \" bytes from map-output for \" +\n-               mapOutput.getMapId());\n+      LOG.info(\"Read \" + memory.length + \" bytes from map-output for \" +\n+                getMapId());\n     } catch (IOException ioe) {      \n       // Close the streams\n       IOUtils.cleanup(LOG, input);\n \n       // Re-throw\n       throw ioe;\n+    } finally {\n+      CodecPool.returnDecompressor(decompressor);\n     }\n-\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void shuffle(MapHost host, InputStream input,\n                      long compressedLength, long decompressedLength,\n                      ShuffleClientMetrics metrics,\n                      Reporter reporter) throws IOException {\n    IFileInputStream checksumIn \u003d \n      new IFileInputStream(input, compressedLength, conf);\n\n    input \u003d checksumIn;       \n  \n    // Are map-outputs compressed?\n    if (codec !\u003d null) {\n      decompressor.reset();\n      input \u003d codec.createInputStream(input, decompressor);\n    }\n  \n    try {\n      IOUtils.readFully(input, memory, 0, memory.length);\n      metrics.inputBytes(memory.length);\n      reporter.progress();\n      LOG.info(\"Read \" + memory.length + \" bytes from map-output for \" +\n                getMapId());\n    } catch (IOException ioe) {      \n      // Close the streams\n      IOUtils.cleanup(LOG, input);\n\n      // Re-throw\n      throw ioe;\n    } finally {\n      CodecPool.returnDecompressor(decompressor);\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/InMemoryMapOutput.java",
          "extendedDetails": {
            "oldValue": "[host-MapHost, mapOutput-MapOutput\u003cK,V\u003e, input-InputStream, decompressedLength-int, compressedLength-int]",
            "newValue": "[host-MapHost, input-InputStream, compressedLength-long, decompressedLength-long, metrics-ShuffleClientMetrics, reporter-Reporter]"
          }
        }
      ]
    },
    "8fcad7e8e9fd8c80207d9593115901d53b3b7d42": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4511. Add IFile readahead (ahmed via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1373669 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/08/12 4:08 PM",
      "commitName": "8fcad7e8e9fd8c80207d9593115901d53b3b7d42",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "26/07/12 6:48 PM",
      "commitNameOld": "d87b545165f9442f614665521ce04424af1490e8",
      "commitAuthorOld": "Thomas Graves",
      "daysBetweenCommits": 19.89,
      "commitsBetweenForRepo": 91,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n   private void shuffleToMemory(MapHost host, MapOutput\u003cK,V\u003e mapOutput, \n                                InputStream input, \n                                int decompressedLength, \n                                int compressedLength) throws IOException {    \n     IFileInputStream checksumIn \u003d \n-      new IFileInputStream(input, compressedLength);\n+      new IFileInputStream(input, compressedLength, job);\n \n     input \u003d checksumIn;       \n   \n     // Are map-outputs compressed?\n     if (codec !\u003d null) {\n       decompressor.reset();\n       input \u003d codec.createInputStream(input, decompressor);\n     }\n   \n     // Copy map-output into an in-memory buffer\n     byte[] shuffleData \u003d mapOutput.getMemory();\n     \n     try {\n       IOUtils.readFully(input, shuffleData, 0, shuffleData.length);\n       metrics.inputBytes(shuffleData.length);\n       reporter.progress();\n       LOG.info(\"Read \" + shuffleData.length + \" bytes from map-output for \" +\n                mapOutput.getMapId());\n     } catch (IOException ioe) {      \n       // Close the streams\n       IOUtils.cleanup(LOG, input);\n \n       // Re-throw\n       throw ioe;\n     }\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void shuffleToMemory(MapHost host, MapOutput\u003cK,V\u003e mapOutput, \n                               InputStream input, \n                               int decompressedLength, \n                               int compressedLength) throws IOException {    \n    IFileInputStream checksumIn \u003d \n      new IFileInputStream(input, compressedLength, job);\n\n    input \u003d checksumIn;       \n  \n    // Are map-outputs compressed?\n    if (codec !\u003d null) {\n      decompressor.reset();\n      input \u003d codec.createInputStream(input, decompressor);\n    }\n  \n    // Copy map-output into an in-memory buffer\n    byte[] shuffleData \u003d mapOutput.getMemory();\n    \n    try {\n      IOUtils.readFully(input, shuffleData, 0, shuffleData.length);\n      metrics.inputBytes(shuffleData.length);\n      reporter.progress();\n      LOG.info(\"Read \" + shuffleData.length + \" bytes from map-output for \" +\n               mapOutput.getMapId());\n    } catch (IOException ioe) {      \n      // Close the streams\n      IOUtils.cleanup(LOG, input);\n\n      // Re-throw\n      throw ioe;\n    }\n\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/Fetcher.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void shuffleToMemory(MapHost host, MapOutput\u003cK,V\u003e mapOutput, \n                               InputStream input, \n                               int decompressedLength, \n                               int compressedLength) throws IOException {    \n    IFileInputStream checksumIn \u003d \n      new IFileInputStream(input, compressedLength);\n\n    input \u003d checksumIn;       \n  \n    // Are map-outputs compressed?\n    if (codec !\u003d null) {\n      decompressor.reset();\n      input \u003d codec.createInputStream(input, decompressor);\n    }\n  \n    // Copy map-output into an in-memory buffer\n    byte[] shuffleData \u003d mapOutput.getMemory();\n    \n    try {\n      IOUtils.readFully(input, shuffleData, 0, shuffleData.length);\n      metrics.inputBytes(shuffleData.length);\n      reporter.progress();\n      LOG.info(\"Read \" + shuffleData.length + \" bytes from map-output for \" +\n               mapOutput.getMapId());\n    } catch (IOException ioe) {      \n      // Close the streams\n      IOUtils.cleanup(LOG, input);\n\n      // Re-throw\n      throw ioe;\n    }\n\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/Fetcher.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/Fetcher.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/Fetcher.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void shuffleToMemory(MapHost host, MapOutput\u003cK,V\u003e mapOutput, \n                               InputStream input, \n                               int decompressedLength, \n                               int compressedLength) throws IOException {    \n    IFileInputStream checksumIn \u003d \n      new IFileInputStream(input, compressedLength);\n\n    input \u003d checksumIn;       \n  \n    // Are map-outputs compressed?\n    if (codec !\u003d null) {\n      decompressor.reset();\n      input \u003d codec.createInputStream(input, decompressor);\n    }\n  \n    // Copy map-output into an in-memory buffer\n    byte[] shuffleData \u003d mapOutput.getMemory();\n    \n    try {\n      IOUtils.readFully(input, shuffleData, 0, shuffleData.length);\n      metrics.inputBytes(shuffleData.length);\n      reporter.progress();\n      LOG.info(\"Read \" + shuffleData.length + \" bytes from map-output for \" +\n               mapOutput.getMapId());\n    } catch (IOException ioe) {      \n      // Close the streams\n      IOUtils.cleanup(LOG, input);\n\n      // Re-throw\n      throw ioe;\n    }\n\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/Fetcher.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapreduce/task/reduce/Fetcher.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/Fetcher.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,33 @@\n+  private void shuffleToMemory(MapHost host, MapOutput\u003cK,V\u003e mapOutput, \n+                               InputStream input, \n+                               int decompressedLength, \n+                               int compressedLength) throws IOException {    \n+    IFileInputStream checksumIn \u003d \n+      new IFileInputStream(input, compressedLength);\n+\n+    input \u003d checksumIn;       \n+  \n+    // Are map-outputs compressed?\n+    if (codec !\u003d null) {\n+      decompressor.reset();\n+      input \u003d codec.createInputStream(input, decompressor);\n+    }\n+  \n+    // Copy map-output into an in-memory buffer\n+    byte[] shuffleData \u003d mapOutput.getMemory();\n+    \n+    try {\n+      IOUtils.readFully(input, shuffleData, 0, shuffleData.length);\n+      metrics.inputBytes(shuffleData.length);\n+      reporter.progress();\n+      LOG.info(\"Read \" + shuffleData.length + \" bytes from map-output for \" +\n+               mapOutput.getMapId());\n+    } catch (IOException ioe) {      \n+      // Close the streams\n+      IOUtils.cleanup(LOG, input);\n+\n+      // Re-throw\n+      throw ioe;\n+    }\n+\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void shuffleToMemory(MapHost host, MapOutput\u003cK,V\u003e mapOutput, \n                               InputStream input, \n                               int decompressedLength, \n                               int compressedLength) throws IOException {    \n    IFileInputStream checksumIn \u003d \n      new IFileInputStream(input, compressedLength);\n\n    input \u003d checksumIn;       \n  \n    // Are map-outputs compressed?\n    if (codec !\u003d null) {\n      decompressor.reset();\n      input \u003d codec.createInputStream(input, decompressor);\n    }\n  \n    // Copy map-output into an in-memory buffer\n    byte[] shuffleData \u003d mapOutput.getMemory();\n    \n    try {\n      IOUtils.readFully(input, shuffleData, 0, shuffleData.length);\n      metrics.inputBytes(shuffleData.length);\n      reporter.progress();\n      LOG.info(\"Read \" + shuffleData.length + \" bytes from map-output for \" +\n               mapOutput.getMapId());\n    } catch (IOException ioe) {      \n      // Close the streams\n      IOUtils.cleanup(LOG, input);\n\n      // Re-throw\n      throw ioe;\n    }\n\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapreduce/task/reduce/Fetcher.java"
    }
  }
}