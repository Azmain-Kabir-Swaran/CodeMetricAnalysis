{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AuditReplayMapper.java",
  "functionName": "map",
  "functionId": "map___lineNum-LongWritable__inputLine-Text__context-Mapper.Context",
  "sourceFilePath": "hadoop-tools/hadoop-dynamometer/hadoop-dynamometer-workload/src/main/java/org/apache/hadoop/tools/dynamometer/workloadgenerator/audit/AuditReplayMapper.java",
  "functionStartLine": 247,
  "functionEndLine": 258,
  "numCommitsSeen": 3,
  "timeTaken": 394,
  "changeHistory": [
    "ab0b180ddb5d0775a2452d5eeb7badd252aadb91"
  ],
  "changeHistoryShort": {
    "ab0b180ddb5d0775a2452d5eeb7badd252aadb91": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ab0b180ddb5d0775a2452d5eeb7badd252aadb91": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-12345 Add Dynamometer to hadoop-tools, a tool for scale testing the HDFS NameNode with real metadata and workloads. Contributed by Erik Krogen.\n",
      "commitDate": "25/06/19 8:07 AM",
      "commitName": "ab0b180ddb5d0775a2452d5eeb7badd252aadb91",
      "commitAuthor": "Erik Krogen",
      "diff": "@@ -0,0 +1,12 @@\n+  public void map(LongWritable lineNum, Text inputLine, Mapper.Context context)\n+      throws IOException, InterruptedException {\n+    AuditReplayCommand cmd \u003d commandParser.parse(inputLine,\n+        relativeToAbsoluteTimestamp);\n+    long delay \u003d cmd.getDelay(TimeUnit.MILLISECONDS);\n+    // Prevent from loading too many elements into memory all at once\n+    if (delay \u003e MAX_READAHEAD_MS) {\n+      Thread.sleep(delay - (MAX_READAHEAD_MS / 2));\n+    }\n+    commandQueue.put(cmd);\n+    highestTimestamp \u003d cmd.getAbsoluteTimestamp();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void map(LongWritable lineNum, Text inputLine, Mapper.Context context)\n      throws IOException, InterruptedException {\n    AuditReplayCommand cmd \u003d commandParser.parse(inputLine,\n        relativeToAbsoluteTimestamp);\n    long delay \u003d cmd.getDelay(TimeUnit.MILLISECONDS);\n    // Prevent from loading too many elements into memory all at once\n    if (delay \u003e MAX_READAHEAD_MS) {\n      Thread.sleep(delay - (MAX_READAHEAD_MS / 2));\n    }\n    commandQueue.put(cmd);\n    highestTimestamp \u003d cmd.getAbsoluteTimestamp();\n  }",
      "path": "hadoop-tools/hadoop-dynamometer/hadoop-dynamometer-workload/src/main/java/org/apache/hadoop/tools/dynamometer/workloadgenerator/audit/AuditReplayMapper.java"
    }
  }
}