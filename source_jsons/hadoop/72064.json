{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LdapAuthenticationHandler.java",
  "functionName": "authenticate",
  "functionId": "authenticate___request-HttpServletRequest__response-HttpServletResponse",
  "sourceFilePath": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/LdapAuthenticationHandler.java",
  "functionStartLine": 171,
  "functionEndLine": 203,
  "numCommitsSeen": 2,
  "timeTaken": 581,
  "changeHistory": [
    "4bca385241c0fc8ff168c7b0f2984a7aed2c7492"
  ],
  "changeHistoryShort": {
    "4bca385241c0fc8ff168c7b0f2984a7aed2c7492": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4bca385241c0fc8ff168c7b0f2984a7aed2c7492": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-12082 Support multiple authentication schemes via AuthenticationFilter\n",
      "commitDate": "18/10/16 6:32 PM",
      "commitName": "4bca385241c0fc8ff168c7b0f2984a7aed2c7492",
      "commitAuthor": "Benoy Antony",
      "diff": "@@ -0,0 +1,33 @@\n+  public AuthenticationToken authenticate(HttpServletRequest request,\n+      HttpServletResponse response)\n+          throws IOException, AuthenticationException {\n+    AuthenticationToken token \u003d null;\n+    String authorization \u003d\n+        request.getHeader(HttpConstants.AUTHORIZATION_HEADER);\n+\n+    if (authorization \u003d\u003d null\n+        || !AuthenticationHandlerUtil.matchAuthScheme(HttpConstants.BASIC,\n+            authorization)) {\n+      response.setHeader(WWW_AUTHENTICATE, HttpConstants.BASIC);\n+      response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n+      if (authorization \u003d\u003d null) {\n+        logger.trace(\"Basic auth starting\");\n+      } else {\n+        logger.warn(\"\u0027\" + HttpConstants.AUTHORIZATION_HEADER\n+            + \"\u0027 does not start with \u0027\" + HttpConstants.BASIC + \"\u0027 :  {}\",\n+            authorization);\n+      }\n+    } else {\n+      authorization \u003d\n+          authorization.substring(HttpConstants.BASIC.length()).trim();\n+      final Base64 base64 \u003d new Base64(0);\n+      // As per RFC7617, UTF-8 charset should be used for decoding.\n+      String[] credentials \u003d new String(base64.decode(authorization),\n+          StandardCharsets.UTF_8).split(\":\", 2);\n+      if (credentials.length \u003d\u003d 2) {\n+        token \u003d authenticateUser(credentials[0], credentials[1]);\n+        response.setStatus(HttpServletResponse.SC_OK);\n+      }\n+    }\n+    return token;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public AuthenticationToken authenticate(HttpServletRequest request,\n      HttpServletResponse response)\n          throws IOException, AuthenticationException {\n    AuthenticationToken token \u003d null;\n    String authorization \u003d\n        request.getHeader(HttpConstants.AUTHORIZATION_HEADER);\n\n    if (authorization \u003d\u003d null\n        || !AuthenticationHandlerUtil.matchAuthScheme(HttpConstants.BASIC,\n            authorization)) {\n      response.setHeader(WWW_AUTHENTICATE, HttpConstants.BASIC);\n      response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n      if (authorization \u003d\u003d null) {\n        logger.trace(\"Basic auth starting\");\n      } else {\n        logger.warn(\"\u0027\" + HttpConstants.AUTHORIZATION_HEADER\n            + \"\u0027 does not start with \u0027\" + HttpConstants.BASIC + \"\u0027 :  {}\",\n            authorization);\n      }\n    } else {\n      authorization \u003d\n          authorization.substring(HttpConstants.BASIC.length()).trim();\n      final Base64 base64 \u003d new Base64(0);\n      // As per RFC7617, UTF-8 charset should be used for decoding.\n      String[] credentials \u003d new String(base64.decode(authorization),\n          StandardCharsets.UTF_8).split(\":\", 2);\n      if (credentials.length \u003d\u003d 2) {\n        token \u003d authenticateUser(credentials[0], credentials[1]);\n        response.setStatus(HttpServletResponse.SC_OK);\n      }\n    }\n    return token;\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/LdapAuthenticationHandler.java"
    }
  }
}