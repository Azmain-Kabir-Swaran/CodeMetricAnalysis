{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AzureNativeFileSystemStore.java",
  "functionName": "safeDelete",
  "functionId": "safeDelete___blob-CloudBlobWrapper__lease-SelfRenewingLease",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java",
  "functionStartLine": 2620,
  "functionEndLine": 2648,
  "numCommitsSeen": 56,
  "timeTaken": 4067,
  "changeHistory": [
    "c6b4e656b76b68cc1d0dbcc15a5aa5ea23335b7b",
    "990aa34de23c625163745ebc338483065d955bbe",
    "5f6edb30c2bb648d5564c951edc25645e17e6636",
    "2217e2f8ff418b88eac6ad36cafe3a9795a11f40",
    "81bc395deb3ba00567dc067d6ca71bacf9e3bc82"
  ],
  "changeHistoryShort": {
    "c6b4e656b76b68cc1d0dbcc15a5aa5ea23335b7b": "Ybodychange",
    "990aa34de23c625163745ebc338483065d955bbe": "Ybodychange",
    "5f6edb30c2bb648d5564c951edc25645e17e6636": "Ybodychange",
    "2217e2f8ff418b88eac6ad36cafe3a9795a11f40": "Ymultichange(Yparameterchange,Ybodychange)",
    "81bc395deb3ba00567dc067d6ca71bacf9e3bc82": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c6b4e656b76b68cc1d0dbcc15a5aa5ea23335b7b": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14769. WASB: delete recursive should not fail if a file is deleted.\nContributed by Thomas Marquardt\n",
      "commitDate": "18/08/17 6:13 AM",
      "commitName": "c6b4e656b76b68cc1d0dbcc15a5aa5ea23335b7b",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "01/08/17 1:36 PM",
      "commitNameOld": "778d4edd9adbe9519c3d6df65e45ddc8bb0ab2da",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 16.69,
      "commitsBetweenForRepo": 169,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,29 @@\n   private void safeDelete(CloudBlobWrapper blob, SelfRenewingLease lease) throws StorageException {\n     OperationContext operationContext \u003d getInstrumentedContext();\n     try {\n       blob.delete(operationContext, lease);\n     } catch (StorageException e) {\n-      LOG.error(\"Encountered Storage Exception for delete on Blob: {}, Exception Details: {} Error Code: {}\",\n-          blob.getUri(), e.getMessage(), e.getErrorCode());\n+      if (!NativeAzureFileSystemHelper.isFileNotFoundException(e)) {\n+        LOG.error(\"Encountered Storage Exception for delete on Blob: {}\"\n+            + \", Exception Details: {} Error Code: {}\",\n+            blob.getUri(), e.getMessage(), e.getErrorCode());\n+      }\n       // On exception, check that if:\n       // 1. It\u0027s a BlobNotFound exception AND\n       // 2. It got there after one-or-more retries THEN\n       // we swallow the exception.\n       if (e.getErrorCode() !\u003d null\n           \u0026\u0026 \"BlobNotFound\".equals(e.getErrorCode())\n           \u0026\u0026 operationContext.getRequestResults().size() \u003e 1\n           \u0026\u0026 operationContext.getRequestResults().get(0).getException() !\u003d null) {\n         LOG.debug(\"Swallowing delete exception on retry: {}\", e.getMessage());\n         return;\n       } else {\n         throw e;\n       }\n     } finally {\n       if (lease !\u003d null) {\n         lease.free();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void safeDelete(CloudBlobWrapper blob, SelfRenewingLease lease) throws StorageException {\n    OperationContext operationContext \u003d getInstrumentedContext();\n    try {\n      blob.delete(operationContext, lease);\n    } catch (StorageException e) {\n      if (!NativeAzureFileSystemHelper.isFileNotFoundException(e)) {\n        LOG.error(\"Encountered Storage Exception for delete on Blob: {}\"\n            + \", Exception Details: {} Error Code: {}\",\n            blob.getUri(), e.getMessage(), e.getErrorCode());\n      }\n      // On exception, check that if:\n      // 1. It\u0027s a BlobNotFound exception AND\n      // 2. It got there after one-or-more retries THEN\n      // we swallow the exception.\n      if (e.getErrorCode() !\u003d null\n          \u0026\u0026 \"BlobNotFound\".equals(e.getErrorCode())\n          \u0026\u0026 operationContext.getRequestResults().size() \u003e 1\n          \u0026\u0026 operationContext.getRequestResults().get(0).getException() !\u003d null) {\n        LOG.debug(\"Swallowing delete exception on retry: {}\", e.getMessage());\n        return;\n      } else {\n        throw e;\n      }\n    } finally {\n      if (lease !\u003d null) {\n        lease.free();\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java",
      "extendedDetails": {}
    },
    "990aa34de23c625163745ebc338483065d955bbe": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14609. NPE in AzureNativeFileSystemStore.checkContainer() if StorageException lacks an error code. Contributed by Steve Loughran\n",
      "commitDate": "28/06/17 2:18 PM",
      "commitName": "990aa34de23c625163745ebc338483065d955bbe",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "27/06/17 5:32 PM",
      "commitNameOld": "7e031c2c18b8812ec9f843ed3b4abe9e6d12bb28",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 0.87,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   private void safeDelete(CloudBlobWrapper blob, SelfRenewingLease lease) throws StorageException {\n     OperationContext operationContext \u003d getInstrumentedContext();\n     try {\n       blob.delete(operationContext, lease);\n     } catch (StorageException e) {\n       LOG.error(\"Encountered Storage Exception for delete on Blob: {}, Exception Details: {} Error Code: {}\",\n           blob.getUri(), e.getMessage(), e.getErrorCode());\n       // On exception, check that if:\n       // 1. It\u0027s a BlobNotFound exception AND\n       // 2. It got there after one-or-more retries THEN\n       // we swallow the exception.\n       if (e.getErrorCode() !\u003d null \u0026\u0026\n-          e.getErrorCode().equals(\"BlobNotFound\") \u0026\u0026\n+          \"BlobNotFound\".equals(e.getErrorCode()) \u0026\u0026\n           operationContext.getRequestResults().size() \u003e 1 \u0026\u0026\n           operationContext.getRequestResults().get(0).getException() !\u003d null) {\n         LOG.debug(\"Swallowing delete exception on retry: {}\", e.getMessage());\n         return;\n       } else {\n         throw e;\n       }\n     } finally {\n       if (lease !\u003d null) {\n         lease.free();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void safeDelete(CloudBlobWrapper blob, SelfRenewingLease lease) throws StorageException {\n    OperationContext operationContext \u003d getInstrumentedContext();\n    try {\n      blob.delete(operationContext, lease);\n    } catch (StorageException e) {\n      LOG.error(\"Encountered Storage Exception for delete on Blob: {}, Exception Details: {} Error Code: {}\",\n          blob.getUri(), e.getMessage(), e.getErrorCode());\n      // On exception, check that if:\n      // 1. It\u0027s a BlobNotFound exception AND\n      // 2. It got there after one-or-more retries THEN\n      // we swallow the exception.\n      if (e.getErrorCode() !\u003d null \u0026\u0026\n          \"BlobNotFound\".equals(e.getErrorCode()) \u0026\u0026\n          operationContext.getRequestResults().size() \u003e 1 \u0026\u0026\n          operationContext.getRequestResults().get(0).getException() !\u003d null) {\n        LOG.debug(\"Swallowing delete exception on retry: {}\", e.getMessage());\n        return;\n      } else {\n        throw e;\n      }\n    } finally {\n      if (lease !\u003d null) {\n        lease.free();\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java",
      "extendedDetails": {}
    },
    "5f6edb30c2bb648d5564c951edc25645e17e6636": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12350. WASB Logging: Improve WASB Logging around deletes, reads and writes. Contributed by Dushyanth.\n",
      "commitDate": "05/10/15 8:11 PM",
      "commitName": "5f6edb30c2bb648d5564c951edc25645e17e6636",
      "commitAuthor": "cnauroth",
      "commitDateOld": "08/06/15 10:42 PM",
      "commitNameOld": "c45784bc9031353b938f4756473937cca759b3dc",
      "commitAuthorOld": "cnauroth",
      "daysBetweenCommits": 118.9,
      "commitsBetweenForRepo": 778,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   private void safeDelete(CloudBlobWrapper blob, SelfRenewingLease lease) throws StorageException {\n     OperationContext operationContext \u003d getInstrumentedContext();\n     try {\n       blob.delete(operationContext, lease);\n     } catch (StorageException e) {\n+      LOG.error(\"Encountered Storage Exception for delete on Blob: {}, Exception Details: {} Error Code: {}\",\n+          blob.getUri(), e.getMessage(), e.getErrorCode());\n       // On exception, check that if:\n       // 1. It\u0027s a BlobNotFound exception AND\n       // 2. It got there after one-or-more retries THEN\n       // we swallow the exception.\n       if (e.getErrorCode() !\u003d null \u0026\u0026\n           e.getErrorCode().equals(\"BlobNotFound\") \u0026\u0026\n           operationContext.getRequestResults().size() \u003e 1 \u0026\u0026\n           operationContext.getRequestResults().get(0).getException() !\u003d null) {\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Swallowing delete exception on retry: \" + e.getMessage());\n-        }\n+        LOG.debug(\"Swallowing delete exception on retry: {}\", e.getMessage());\n         return;\n       } else {\n         throw e;\n       }\n     } finally {\n       if (lease !\u003d null) {\n         lease.free();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void safeDelete(CloudBlobWrapper blob, SelfRenewingLease lease) throws StorageException {\n    OperationContext operationContext \u003d getInstrumentedContext();\n    try {\n      blob.delete(operationContext, lease);\n    } catch (StorageException e) {\n      LOG.error(\"Encountered Storage Exception for delete on Blob: {}, Exception Details: {} Error Code: {}\",\n          blob.getUri(), e.getMessage(), e.getErrorCode());\n      // On exception, check that if:\n      // 1. It\u0027s a BlobNotFound exception AND\n      // 2. It got there after one-or-more retries THEN\n      // we swallow the exception.\n      if (e.getErrorCode() !\u003d null \u0026\u0026\n          e.getErrorCode().equals(\"BlobNotFound\") \u0026\u0026\n          operationContext.getRequestResults().size() \u003e 1 \u0026\u0026\n          operationContext.getRequestResults().get(0).getException() !\u003d null) {\n        LOG.debug(\"Swallowing delete exception on retry: {}\", e.getMessage());\n        return;\n      } else {\n        throw e;\n      }\n    } finally {\n      if (lease !\u003d null) {\n        lease.free();\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java",
      "extendedDetails": {}
    },
    "2217e2f8ff418b88eac6ad36cafe3a9795a11f40": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-10809. hadoop-azure: page blob support. Contributed by Dexter Bradshaw, Mostafa Elhemali, Eric Hanson, and Mike Liddell.\n",
      "commitDate": "08/10/14 2:20 PM",
      "commitName": "2217e2f8ff418b88eac6ad36cafe3a9795a11f40",
      "commitAuthor": "cnauroth",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-10809. hadoop-azure: page blob support. Contributed by Dexter Bradshaw, Mostafa Elhemali, Eric Hanson, and Mike Liddell.\n",
          "commitDate": "08/10/14 2:20 PM",
          "commitName": "2217e2f8ff418b88eac6ad36cafe3a9795a11f40",
          "commitAuthor": "cnauroth",
          "commitDateOld": "24/06/14 1:52 PM",
          "commitNameOld": "0d91576ec31f63402f2db6107a04155368e2632d",
          "commitAuthorOld": "Chris Nauroth",
          "daysBetweenCommits": 106.02,
          "commitsBetweenForRepo": 1005,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,26 @@\n-  private void safeDelete(CloudBlockBlobWrapper blob) throws StorageException {\n+  private void safeDelete(CloudBlobWrapper blob, SelfRenewingLease lease) throws StorageException {\n     OperationContext operationContext \u003d getInstrumentedContext();\n     try {\n-      blob.delete(operationContext);\n+      blob.delete(operationContext, lease);\n     } catch (StorageException e) {\n       // On exception, check that if:\n       // 1. It\u0027s a BlobNotFound exception AND\n       // 2. It got there after one-or-more retries THEN\n       // we swallow the exception.\n-      if (e.getErrorCode() !\u003d null \u0026\u0026 e.getErrorCode().equals(\"BlobNotFound\")\n-          \u0026\u0026 operationContext.getRequestResults().size() \u003e 1\n-          \u0026\u0026 operationContext.getRequestResults().get(0).getException() !\u003d null) {\n+      if (e.getErrorCode() !\u003d null \u0026\u0026\n+          e.getErrorCode().equals(\"BlobNotFound\") \u0026\u0026\n+          operationContext.getRequestResults().size() \u003e 1 \u0026\u0026\n+          operationContext.getRequestResults().get(0).getException() !\u003d null) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Swallowing delete exception on retry: \" + e.getMessage());\n         }\n         return;\n       } else {\n         throw e;\n       }\n+    } finally {\n+      if (lease !\u003d null) {\n+        lease.free();\n+      }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void safeDelete(CloudBlobWrapper blob, SelfRenewingLease lease) throws StorageException {\n    OperationContext operationContext \u003d getInstrumentedContext();\n    try {\n      blob.delete(operationContext, lease);\n    } catch (StorageException e) {\n      // On exception, check that if:\n      // 1. It\u0027s a BlobNotFound exception AND\n      // 2. It got there after one-or-more retries THEN\n      // we swallow the exception.\n      if (e.getErrorCode() !\u003d null \u0026\u0026\n          e.getErrorCode().equals(\"BlobNotFound\") \u0026\u0026\n          operationContext.getRequestResults().size() \u003e 1 \u0026\u0026\n          operationContext.getRequestResults().get(0).getException() !\u003d null) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Swallowing delete exception on retry: \" + e.getMessage());\n        }\n        return;\n      } else {\n        throw e;\n      }\n    } finally {\n      if (lease !\u003d null) {\n        lease.free();\n      }\n    }\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java",
          "extendedDetails": {
            "oldValue": "[blob-CloudBlockBlobWrapper]",
            "newValue": "[blob-CloudBlobWrapper, lease-SelfRenewingLease]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-10809. hadoop-azure: page blob support. Contributed by Dexter Bradshaw, Mostafa Elhemali, Eric Hanson, and Mike Liddell.\n",
          "commitDate": "08/10/14 2:20 PM",
          "commitName": "2217e2f8ff418b88eac6ad36cafe3a9795a11f40",
          "commitAuthor": "cnauroth",
          "commitDateOld": "24/06/14 1:52 PM",
          "commitNameOld": "0d91576ec31f63402f2db6107a04155368e2632d",
          "commitAuthorOld": "Chris Nauroth",
          "daysBetweenCommits": 106.02,
          "commitsBetweenForRepo": 1005,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,26 @@\n-  private void safeDelete(CloudBlockBlobWrapper blob) throws StorageException {\n+  private void safeDelete(CloudBlobWrapper blob, SelfRenewingLease lease) throws StorageException {\n     OperationContext operationContext \u003d getInstrumentedContext();\n     try {\n-      blob.delete(operationContext);\n+      blob.delete(operationContext, lease);\n     } catch (StorageException e) {\n       // On exception, check that if:\n       // 1. It\u0027s a BlobNotFound exception AND\n       // 2. It got there after one-or-more retries THEN\n       // we swallow the exception.\n-      if (e.getErrorCode() !\u003d null \u0026\u0026 e.getErrorCode().equals(\"BlobNotFound\")\n-          \u0026\u0026 operationContext.getRequestResults().size() \u003e 1\n-          \u0026\u0026 operationContext.getRequestResults().get(0).getException() !\u003d null) {\n+      if (e.getErrorCode() !\u003d null \u0026\u0026\n+          e.getErrorCode().equals(\"BlobNotFound\") \u0026\u0026\n+          operationContext.getRequestResults().size() \u003e 1 \u0026\u0026\n+          operationContext.getRequestResults().get(0).getException() !\u003d null) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Swallowing delete exception on retry: \" + e.getMessage());\n         }\n         return;\n       } else {\n         throw e;\n       }\n+    } finally {\n+      if (lease !\u003d null) {\n+        lease.free();\n+      }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void safeDelete(CloudBlobWrapper blob, SelfRenewingLease lease) throws StorageException {\n    OperationContext operationContext \u003d getInstrumentedContext();\n    try {\n      blob.delete(operationContext, lease);\n    } catch (StorageException e) {\n      // On exception, check that if:\n      // 1. It\u0027s a BlobNotFound exception AND\n      // 2. It got there after one-or-more retries THEN\n      // we swallow the exception.\n      if (e.getErrorCode() !\u003d null \u0026\u0026\n          e.getErrorCode().equals(\"BlobNotFound\") \u0026\u0026\n          operationContext.getRequestResults().size() \u003e 1 \u0026\u0026\n          operationContext.getRequestResults().get(0).getException() !\u003d null) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Swallowing delete exception on retry: \" + e.getMessage());\n        }\n        return;\n      } else {\n        throw e;\n      }\n    } finally {\n      if (lease !\u003d null) {\n        lease.free();\n      }\n    }\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java",
          "extendedDetails": {}
        }
      ]
    },
    "81bc395deb3ba00567dc067d6ca71bacf9e3bc82": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-9629. Support Windows Azure Storage - Blob as a file system in Hadoop. Contributed by Dexter Bradshaw, Mostafa Elhemali, Xi Fang, Johannes Klein, David Lao, Mike Liddell, Chuan Liu, Lengning Liu, Ivan Mitic, Michael Rys, Alexander Stojanovic, Brian Swan, and Min Wei.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1601781 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/06/14 3:26 PM",
      "commitName": "81bc395deb3ba00567dc067d6ca71bacf9e3bc82",
      "commitAuthor": "Chris Nauroth",
      "diff": "@@ -0,0 +1,21 @@\n+  private void safeDelete(CloudBlockBlobWrapper blob) throws StorageException {\n+    OperationContext operationContext \u003d getInstrumentedContext();\n+    try {\n+      blob.delete(operationContext);\n+    } catch (StorageException e) {\n+      // On exception, check that if:\n+      // 1. It\u0027s a BlobNotFound exception AND\n+      // 2. It got there after one-or-more retries THEN\n+      // we swallow the exception.\n+      if (e.getErrorCode() !\u003d null \u0026\u0026 e.getErrorCode().equals(\"BlobNotFound\")\n+          \u0026\u0026 operationContext.getRequestResults().size() \u003e 1\n+          \u0026\u0026 operationContext.getRequestResults().get(0).getException() !\u003d null) {\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Swallowing delete exception on retry: \" + e.getMessage());\n+        }\n+        return;\n+      } else {\n+        throw e;\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void safeDelete(CloudBlockBlobWrapper blob) throws StorageException {\n    OperationContext operationContext \u003d getInstrumentedContext();\n    try {\n      blob.delete(operationContext);\n    } catch (StorageException e) {\n      // On exception, check that if:\n      // 1. It\u0027s a BlobNotFound exception AND\n      // 2. It got there after one-or-more retries THEN\n      // we swallow the exception.\n      if (e.getErrorCode() !\u003d null \u0026\u0026 e.getErrorCode().equals(\"BlobNotFound\")\n          \u0026\u0026 operationContext.getRequestResults().size() \u003e 1\n          \u0026\u0026 operationContext.getRequestResults().get(0).getException() !\u003d null) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Swallowing delete exception on retry: \" + e.getMessage());\n        }\n        return;\n      } else {\n        throw e;\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java"
    }
  }
}