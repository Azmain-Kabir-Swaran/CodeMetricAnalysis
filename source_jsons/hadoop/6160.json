{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSImageFormat.java",
  "functionName": "loadFilesUnderConstruction",
  "functionId": "loadFilesUnderConstruction___in-DataInput__supportSnapshot-boolean__counter-Counter",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormat.java",
  "functionStartLine": 931,
  "functionEndLine": 975,
  "numCommitsSeen": 180,
  "timeTaken": 5666,
  "changeHistory": [
    "9d175853b0170683ad5f21d9bcdeaac49fe89e04",
    "4928f5473394981829e5ffd4b16ea0801baf5c45",
    "4c039b0876bb9399c2b4a751ad7b99b36349117b",
    "9f2f583f401189c3f4a2687795a9e3e0b288322b",
    "00fe1ed3a4b3ee35fe24be257ec36445d2f44d63",
    "1382ae525c67bf95d8f3a436b547dbc72cfbb177",
    "c78e3a7cdd10c40454e9acb06986ba6d8573cb19",
    "e171254d56bfff467a67a6cf9160595c941f50c0",
    "1e89eba47d0f291b33fc26f9406231fc70b63a87",
    "00067895a01c66d53715b50bbcb3605efd6425f2",
    "ce68f410b05a58ad05965f32ad7f5b246b363a75",
    "aa002344d0466a62672eae73cdb2bb2ae7c19a72",
    "8162fdcdbc23d749fdb188ae8419e173c59cb1ed",
    "da8e962e39bd41b73b53966826c82e741b08010b"
  ],
  "changeHistoryShort": {
    "9d175853b0170683ad5f21d9bcdeaac49fe89e04": "Ybodychange",
    "4928f5473394981829e5ffd4b16ea0801baf5c45": "Ybodychange",
    "4c039b0876bb9399c2b4a751ad7b99b36349117b": "Ybodychange",
    "9f2f583f401189c3f4a2687795a9e3e0b288322b": "Ybodychange",
    "00fe1ed3a4b3ee35fe24be257ec36445d2f44d63": "Ybodychange",
    "1382ae525c67bf95d8f3a436b547dbc72cfbb177": "Ybodychange",
    "c78e3a7cdd10c40454e9acb06986ba6d8573cb19": "Ybodychange",
    "e171254d56bfff467a67a6cf9160595c941f50c0": "Ybodychange",
    "1e89eba47d0f291b33fc26f9406231fc70b63a87": "Ybodychange",
    "00067895a01c66d53715b50bbcb3605efd6425f2": "Ybodychange",
    "ce68f410b05a58ad05965f32ad7f5b246b363a75": "Ybodychange",
    "aa002344d0466a62672eae73cdb2bb2ae7c19a72": "Ybodychange",
    "8162fdcdbc23d749fdb188ae8419e173c59cb1ed": "Ybodychange",
    "da8e962e39bd41b73b53966826c82e741b08010b": "Ymultichange(Yparameterchange,Ybodychange)"
  },
  "changeHistoryDetails": {
    "9d175853b0170683ad5f21d9bcdeaac49fe89e04": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10997. Reduce number of path resolving methods. Contributed by Daryn Sharp.\n",
      "commitDate": "24/10/16 3:14 PM",
      "commitName": "9d175853b0170683ad5f21d9bcdeaac49fe89e04",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "27/01/16 4:34 PM",
      "commitNameOld": "ec25c7f9c7e60c077d8c4143253c20445fcdaecf",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 270.9,
      "commitsBetweenForRepo": 1893,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n     private void loadFilesUnderConstruction(DataInput in,\n         boolean supportSnapshot, Counter counter) throws IOException {\n       FSDirectory fsDir \u003d namesystem.dir;\n       int size \u003d in.readInt();\n \n       LOG.info(\"Number of files under construction \u003d \" + size);\n \n       for (int i \u003d 0; i \u003c size; i++) {\n         INodeFile cons \u003d FSImageSerialization.readINodeUnderConstruction(in,\n             namesystem, getLayoutVersion());\n         counter.increment();\n \n         // verify that file exists in namespace\n         String path \u003d cons.getLocalName();\n         INodeFile oldnode \u003d null;\n         boolean inSnapshot \u003d false;\n         if (path !\u003d null \u0026\u0026 FSDirectory.isReservedName(path) \u0026\u0026 \n             NameNodeLayoutVersion.supports(\n                 LayoutVersion.Feature.ADD_INODE_ID, getLayoutVersion())) {\n           // TODO: for HDFS-5428, we use reserved path for those INodeFileUC in\n           // snapshot. If we support INode ID in the layout version, we can use\n           // the inode id to find the oldnode.\n           oldnode \u003d namesystem.dir.getInode(cons.getId()).asFile();\n           inSnapshot \u003d true;\n         } else {\n           path \u003d renameReservedPathsOnUpgrade(path, getLayoutVersion());\n-          final INodesInPath iip \u003d fsDir.getINodesInPath(path, true);\n+          final INodesInPath iip \u003d fsDir.getINodesInPath(path, DirOp.WRITE);\n           oldnode \u003d INodeFile.valueOf(iip.getLastINode(), path);\n         }\n \n         FileUnderConstructionFeature uc \u003d cons.getFileUnderConstructionFeature();\n         oldnode.toUnderConstruction(uc.getClientName(), uc.getClientMachine());\n         if (oldnode.numBlocks() \u003e 0) {\n           BlockInfo ucBlock \u003d cons.getLastBlock();\n           // we do not replace the inode, just replace the last block of oldnode\n           BlockInfo info \u003d namesystem.getBlockManager()\n               .addBlockCollectionWithCheck(ucBlock, oldnode);\n           oldnode.setBlock(oldnode.numBlocks() - 1, info);\n         }\n \n         if (!inSnapshot) {\n           namesystem.leaseManager.addLease(uc.getClientName(), oldnode.getId());\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void loadFilesUnderConstruction(DataInput in,\n        boolean supportSnapshot, Counter counter) throws IOException {\n      FSDirectory fsDir \u003d namesystem.dir;\n      int size \u003d in.readInt();\n\n      LOG.info(\"Number of files under construction \u003d \" + size);\n\n      for (int i \u003d 0; i \u003c size; i++) {\n        INodeFile cons \u003d FSImageSerialization.readINodeUnderConstruction(in,\n            namesystem, getLayoutVersion());\n        counter.increment();\n\n        // verify that file exists in namespace\n        String path \u003d cons.getLocalName();\n        INodeFile oldnode \u003d null;\n        boolean inSnapshot \u003d false;\n        if (path !\u003d null \u0026\u0026 FSDirectory.isReservedName(path) \u0026\u0026 \n            NameNodeLayoutVersion.supports(\n                LayoutVersion.Feature.ADD_INODE_ID, getLayoutVersion())) {\n          // TODO: for HDFS-5428, we use reserved path for those INodeFileUC in\n          // snapshot. If we support INode ID in the layout version, we can use\n          // the inode id to find the oldnode.\n          oldnode \u003d namesystem.dir.getInode(cons.getId()).asFile();\n          inSnapshot \u003d true;\n        } else {\n          path \u003d renameReservedPathsOnUpgrade(path, getLayoutVersion());\n          final INodesInPath iip \u003d fsDir.getINodesInPath(path, DirOp.WRITE);\n          oldnode \u003d INodeFile.valueOf(iip.getLastINode(), path);\n        }\n\n        FileUnderConstructionFeature uc \u003d cons.getFileUnderConstructionFeature();\n        oldnode.toUnderConstruction(uc.getClientName(), uc.getClientMachine());\n        if (oldnode.numBlocks() \u003e 0) {\n          BlockInfo ucBlock \u003d cons.getLastBlock();\n          // we do not replace the inode, just replace the last block of oldnode\n          BlockInfo info \u003d namesystem.getBlockManager()\n              .addBlockCollectionWithCheck(ucBlock, oldnode);\n          oldnode.setBlock(oldnode.numBlocks() - 1, info);\n        }\n\n        if (!inSnapshot) {\n          namesystem.leaseManager.addLease(uc.getClientName(), oldnode.getId());\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormat.java",
      "extendedDetails": {}
    },
    "4928f5473394981829e5ffd4b16ea0801baf5c45": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8482. Rename BlockInfoContiguous to BlockInfo. Contributed by Zhe Zhang.\n",
      "commitDate": "27/05/15 3:42 PM",
      "commitName": "4928f5473394981829e5ffd4b16ea0801baf5c45",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "08/05/15 11:04 PM",
      "commitNameOld": "00fe1ed3a4b3ee35fe24be257ec36445d2f44d63",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 18.69,
      "commitsBetweenForRepo": 146,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n     private void loadFilesUnderConstruction(DataInput in,\n         boolean supportSnapshot, Counter counter) throws IOException {\n       FSDirectory fsDir \u003d namesystem.dir;\n       int size \u003d in.readInt();\n \n       LOG.info(\"Number of files under construction \u003d \" + size);\n \n       for (int i \u003d 0; i \u003c size; i++) {\n         INodeFile cons \u003d FSImageSerialization.readINodeUnderConstruction(in,\n             namesystem, getLayoutVersion());\n         counter.increment();\n \n         // verify that file exists in namespace\n         String path \u003d cons.getLocalName();\n         INodeFile oldnode \u003d null;\n         boolean inSnapshot \u003d false;\n         if (path !\u003d null \u0026\u0026 FSDirectory.isReservedName(path) \u0026\u0026 \n             NameNodeLayoutVersion.supports(\n                 LayoutVersion.Feature.ADD_INODE_ID, getLayoutVersion())) {\n           // TODO: for HDFS-5428, we use reserved path for those INodeFileUC in\n           // snapshot. If we support INode ID in the layout version, we can use\n           // the inode id to find the oldnode.\n           oldnode \u003d namesystem.dir.getInode(cons.getId()).asFile();\n           inSnapshot \u003d true;\n         } else {\n           path \u003d renameReservedPathsOnUpgrade(path, getLayoutVersion());\n           final INodesInPath iip \u003d fsDir.getINodesInPath(path, true);\n           oldnode \u003d INodeFile.valueOf(iip.getLastINode(), path);\n         }\n \n         FileUnderConstructionFeature uc \u003d cons.getFileUnderConstructionFeature();\n         oldnode.toUnderConstruction(uc.getClientName(), uc.getClientMachine());\n         if (oldnode.numBlocks() \u003e 0) {\n-          BlockInfoContiguous ucBlock \u003d cons.getLastBlock();\n+          BlockInfo ucBlock \u003d cons.getLastBlock();\n           // we do not replace the inode, just replace the last block of oldnode\n-          BlockInfoContiguous info \u003d namesystem.getBlockManager().addBlockCollection(\n+          BlockInfo info \u003d namesystem.getBlockManager().addBlockCollection(\n               ucBlock, oldnode);\n           oldnode.setBlock(oldnode.numBlocks() - 1, info);\n         }\n \n         if (!inSnapshot) {\n           namesystem.leaseManager.addLease(uc.getClientName(), oldnode.getId());\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void loadFilesUnderConstruction(DataInput in,\n        boolean supportSnapshot, Counter counter) throws IOException {\n      FSDirectory fsDir \u003d namesystem.dir;\n      int size \u003d in.readInt();\n\n      LOG.info(\"Number of files under construction \u003d \" + size);\n\n      for (int i \u003d 0; i \u003c size; i++) {\n        INodeFile cons \u003d FSImageSerialization.readINodeUnderConstruction(in,\n            namesystem, getLayoutVersion());\n        counter.increment();\n\n        // verify that file exists in namespace\n        String path \u003d cons.getLocalName();\n        INodeFile oldnode \u003d null;\n        boolean inSnapshot \u003d false;\n        if (path !\u003d null \u0026\u0026 FSDirectory.isReservedName(path) \u0026\u0026 \n            NameNodeLayoutVersion.supports(\n                LayoutVersion.Feature.ADD_INODE_ID, getLayoutVersion())) {\n          // TODO: for HDFS-5428, we use reserved path for those INodeFileUC in\n          // snapshot. If we support INode ID in the layout version, we can use\n          // the inode id to find the oldnode.\n          oldnode \u003d namesystem.dir.getInode(cons.getId()).asFile();\n          inSnapshot \u003d true;\n        } else {\n          path \u003d renameReservedPathsOnUpgrade(path, getLayoutVersion());\n          final INodesInPath iip \u003d fsDir.getINodesInPath(path, true);\n          oldnode \u003d INodeFile.valueOf(iip.getLastINode(), path);\n        }\n\n        FileUnderConstructionFeature uc \u003d cons.getFileUnderConstructionFeature();\n        oldnode.toUnderConstruction(uc.getClientName(), uc.getClientMachine());\n        if (oldnode.numBlocks() \u003e 0) {\n          BlockInfo ucBlock \u003d cons.getLastBlock();\n          // we do not replace the inode, just replace the last block of oldnode\n          BlockInfo info \u003d namesystem.getBlockManager().addBlockCollection(\n              ucBlock, oldnode);\n          oldnode.setBlock(oldnode.numBlocks() - 1, info);\n        }\n\n        if (!inSnapshot) {\n          namesystem.leaseManager.addLease(uc.getClientName(), oldnode.getId());\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormat.java",
      "extendedDetails": {}
    },
    "4c039b0876bb9399c2b4a751ad7b99b36349117b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7994. Detect if resevered EC Block ID is already used during namenode startup. Contributed by Hui Zheng\n",
      "commitDate": "26/05/15 11:59 AM",
      "commitName": "4c039b0876bb9399c2b4a751ad7b99b36349117b",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "26/05/15 11:43 AM",
      "commitNameOld": "d0d75a833907f6cf723a42a007ca04e0004a8e52",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n     private void loadFilesUnderConstruction(DataInput in,\n         boolean supportSnapshot, Counter counter) throws IOException {\n       FSDirectory fsDir \u003d namesystem.dir;\n       int size \u003d in.readInt();\n \n       LOG.info(\"Number of files under construction \u003d \" + size);\n \n       for (int i \u003d 0; i \u003c size; i++) {\n         INodeFile cons \u003d FSImageSerialization.readINodeUnderConstruction(in,\n             namesystem, getLayoutVersion());\n         counter.increment();\n \n         // verify that file exists in namespace\n         String path \u003d cons.getLocalName();\n         INodeFile oldnode \u003d null;\n         boolean inSnapshot \u003d false;\n         if (path !\u003d null \u0026\u0026 FSDirectory.isReservedName(path) \u0026\u0026 \n             NameNodeLayoutVersion.supports(\n                 LayoutVersion.Feature.ADD_INODE_ID, getLayoutVersion())) {\n           // TODO: for HDFS-5428, we use reserved path for those INodeFileUC in\n           // snapshot. If we support INode ID in the layout version, we can use\n           // the inode id to find the oldnode.\n           oldnode \u003d namesystem.dir.getInode(cons.getId()).asFile();\n           inSnapshot \u003d true;\n         } else {\n           path \u003d renameReservedPathsOnUpgrade(path, getLayoutVersion());\n           final INodesInPath iip \u003d fsDir.getINodesInPath(path, true);\n           oldnode \u003d INodeFile.valueOf(iip.getLastINode(), path);\n         }\n \n         FileUnderConstructionFeature uc \u003d cons.getFileUnderConstructionFeature();\n         oldnode.toUnderConstruction(uc.getClientName(), uc.getClientMachine());\n         if (oldnode.numBlocks() \u003e 0) {\n           BlockInfo ucBlock \u003d cons.getLastBlock();\n           // we do not replace the inode, just replace the last block of oldnode\n-          BlockInfo info \u003d namesystem.getBlockManager().addBlockCollection(\n-              ucBlock, oldnode);\n+          BlockInfo info \u003d namesystem.getBlockManager()\n+              .addBlockCollectionWithCheck(ucBlock, oldnode);\n           oldnode.setBlock(oldnode.numBlocks() - 1, info);\n         }\n \n         if (!inSnapshot) {\n           namesystem.leaseManager.addLease(uc.getClientName(), oldnode.getId());\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void loadFilesUnderConstruction(DataInput in,\n        boolean supportSnapshot, Counter counter) throws IOException {\n      FSDirectory fsDir \u003d namesystem.dir;\n      int size \u003d in.readInt();\n\n      LOG.info(\"Number of files under construction \u003d \" + size);\n\n      for (int i \u003d 0; i \u003c size; i++) {\n        INodeFile cons \u003d FSImageSerialization.readINodeUnderConstruction(in,\n            namesystem, getLayoutVersion());\n        counter.increment();\n\n        // verify that file exists in namespace\n        String path \u003d cons.getLocalName();\n        INodeFile oldnode \u003d null;\n        boolean inSnapshot \u003d false;\n        if (path !\u003d null \u0026\u0026 FSDirectory.isReservedName(path) \u0026\u0026 \n            NameNodeLayoutVersion.supports(\n                LayoutVersion.Feature.ADD_INODE_ID, getLayoutVersion())) {\n          // TODO: for HDFS-5428, we use reserved path for those INodeFileUC in\n          // snapshot. If we support INode ID in the layout version, we can use\n          // the inode id to find the oldnode.\n          oldnode \u003d namesystem.dir.getInode(cons.getId()).asFile();\n          inSnapshot \u003d true;\n        } else {\n          path \u003d renameReservedPathsOnUpgrade(path, getLayoutVersion());\n          final INodesInPath iip \u003d fsDir.getINodesInPath(path, true);\n          oldnode \u003d INodeFile.valueOf(iip.getLastINode(), path);\n        }\n\n        FileUnderConstructionFeature uc \u003d cons.getFileUnderConstructionFeature();\n        oldnode.toUnderConstruction(uc.getClientName(), uc.getClientMachine());\n        if (oldnode.numBlocks() \u003e 0) {\n          BlockInfo ucBlock \u003d cons.getLastBlock();\n          // we do not replace the inode, just replace the last block of oldnode\n          BlockInfo info \u003d namesystem.getBlockManager()\n              .addBlockCollectionWithCheck(ucBlock, oldnode);\n          oldnode.setBlock(oldnode.numBlocks() - 1, info);\n        }\n\n        if (!inSnapshot) {\n          namesystem.leaseManager.addLease(uc.getClientName(), oldnode.getId());\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormat.java",
      "extendedDetails": {}
    },
    "9f2f583f401189c3f4a2687795a9e3e0b288322b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7749. Erasure Coding: Add striped block support in INodeFile. Contributed by Jing Zhao.\n",
      "commitDate": "26/05/15 11:07 AM",
      "commitName": "9f2f583f401189c3f4a2687795a9e3e0b288322b",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "08/05/15 11:04 PM",
      "commitNameOld": "00fe1ed3a4b3ee35fe24be257ec36445d2f44d63",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 17.5,
      "commitsBetweenForRepo": 144,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n     private void loadFilesUnderConstruction(DataInput in,\n         boolean supportSnapshot, Counter counter) throws IOException {\n       FSDirectory fsDir \u003d namesystem.dir;\n       int size \u003d in.readInt();\n \n       LOG.info(\"Number of files under construction \u003d \" + size);\n \n       for (int i \u003d 0; i \u003c size; i++) {\n         INodeFile cons \u003d FSImageSerialization.readINodeUnderConstruction(in,\n             namesystem, getLayoutVersion());\n         counter.increment();\n \n         // verify that file exists in namespace\n         String path \u003d cons.getLocalName();\n         INodeFile oldnode \u003d null;\n         boolean inSnapshot \u003d false;\n         if (path !\u003d null \u0026\u0026 FSDirectory.isReservedName(path) \u0026\u0026 \n             NameNodeLayoutVersion.supports(\n                 LayoutVersion.Feature.ADD_INODE_ID, getLayoutVersion())) {\n           // TODO: for HDFS-5428, we use reserved path for those INodeFileUC in\n           // snapshot. If we support INode ID in the layout version, we can use\n           // the inode id to find the oldnode.\n           oldnode \u003d namesystem.dir.getInode(cons.getId()).asFile();\n           inSnapshot \u003d true;\n         } else {\n           path \u003d renameReservedPathsOnUpgrade(path, getLayoutVersion());\n           final INodesInPath iip \u003d fsDir.getINodesInPath(path, true);\n           oldnode \u003d INodeFile.valueOf(iip.getLastINode(), path);\n         }\n \n         FileUnderConstructionFeature uc \u003d cons.getFileUnderConstructionFeature();\n         oldnode.toUnderConstruction(uc.getClientName(), uc.getClientMachine());\n         if (oldnode.numBlocks() \u003e 0) {\n-          BlockInfoContiguous ucBlock \u003d cons.getLastBlock();\n+          BlockInfo ucBlock \u003d cons.getLastBlock();\n           // we do not replace the inode, just replace the last block of oldnode\n-          BlockInfoContiguous info \u003d namesystem.getBlockManager().addBlockCollection(\n+          BlockInfo info \u003d namesystem.getBlockManager().addBlockCollection(\n               ucBlock, oldnode);\n           oldnode.setBlock(oldnode.numBlocks() - 1, info);\n         }\n \n         if (!inSnapshot) {\n           namesystem.leaseManager.addLease(uc.getClientName(), oldnode.getId());\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void loadFilesUnderConstruction(DataInput in,\n        boolean supportSnapshot, Counter counter) throws IOException {\n      FSDirectory fsDir \u003d namesystem.dir;\n      int size \u003d in.readInt();\n\n      LOG.info(\"Number of files under construction \u003d \" + size);\n\n      for (int i \u003d 0; i \u003c size; i++) {\n        INodeFile cons \u003d FSImageSerialization.readINodeUnderConstruction(in,\n            namesystem, getLayoutVersion());\n        counter.increment();\n\n        // verify that file exists in namespace\n        String path \u003d cons.getLocalName();\n        INodeFile oldnode \u003d null;\n        boolean inSnapshot \u003d false;\n        if (path !\u003d null \u0026\u0026 FSDirectory.isReservedName(path) \u0026\u0026 \n            NameNodeLayoutVersion.supports(\n                LayoutVersion.Feature.ADD_INODE_ID, getLayoutVersion())) {\n          // TODO: for HDFS-5428, we use reserved path for those INodeFileUC in\n          // snapshot. If we support INode ID in the layout version, we can use\n          // the inode id to find the oldnode.\n          oldnode \u003d namesystem.dir.getInode(cons.getId()).asFile();\n          inSnapshot \u003d true;\n        } else {\n          path \u003d renameReservedPathsOnUpgrade(path, getLayoutVersion());\n          final INodesInPath iip \u003d fsDir.getINodesInPath(path, true);\n          oldnode \u003d INodeFile.valueOf(iip.getLastINode(), path);\n        }\n\n        FileUnderConstructionFeature uc \u003d cons.getFileUnderConstructionFeature();\n        oldnode.toUnderConstruction(uc.getClientName(), uc.getClientMachine());\n        if (oldnode.numBlocks() \u003e 0) {\n          BlockInfo ucBlock \u003d cons.getLastBlock();\n          // we do not replace the inode, just replace the last block of oldnode\n          BlockInfo info \u003d namesystem.getBlockManager().addBlockCollection(\n              ucBlock, oldnode);\n          oldnode.setBlock(oldnode.numBlocks() - 1, info);\n        }\n\n        if (!inSnapshot) {\n          namesystem.leaseManager.addLease(uc.getClientName(), oldnode.getId());\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormat.java",
      "extendedDetails": {}
    },
    "00fe1ed3a4b3ee35fe24be257ec36445d2f44d63": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6757. Simplify lease manager with INodeID. Contributed by Haohui Mai.\n",
      "commitDate": "08/05/15 11:04 PM",
      "commitName": "00fe1ed3a4b3ee35fe24be257ec36445d2f44d63",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "02/05/15 10:03 AM",
      "commitNameOld": "6ae2a0d048e133b43249c248a75a4d77d9abb80d",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 6.54,
      "commitsBetweenForRepo": 129,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,45 @@\n     private void loadFilesUnderConstruction(DataInput in,\n         boolean supportSnapshot, Counter counter) throws IOException {\n       FSDirectory fsDir \u003d namesystem.dir;\n       int size \u003d in.readInt();\n \n       LOG.info(\"Number of files under construction \u003d \" + size);\n \n       for (int i \u003d 0; i \u003c size; i++) {\n         INodeFile cons \u003d FSImageSerialization.readINodeUnderConstruction(in,\n             namesystem, getLayoutVersion());\n         counter.increment();\n \n         // verify that file exists in namespace\n         String path \u003d cons.getLocalName();\n         INodeFile oldnode \u003d null;\n         boolean inSnapshot \u003d false;\n         if (path !\u003d null \u0026\u0026 FSDirectory.isReservedName(path) \u0026\u0026 \n             NameNodeLayoutVersion.supports(\n                 LayoutVersion.Feature.ADD_INODE_ID, getLayoutVersion())) {\n           // TODO: for HDFS-5428, we use reserved path for those INodeFileUC in\n           // snapshot. If we support INode ID in the layout version, we can use\n           // the inode id to find the oldnode.\n           oldnode \u003d namesystem.dir.getInode(cons.getId()).asFile();\n           inSnapshot \u003d true;\n         } else {\n           path \u003d renameReservedPathsOnUpgrade(path, getLayoutVersion());\n           final INodesInPath iip \u003d fsDir.getINodesInPath(path, true);\n           oldnode \u003d INodeFile.valueOf(iip.getLastINode(), path);\n         }\n \n         FileUnderConstructionFeature uc \u003d cons.getFileUnderConstructionFeature();\n         oldnode.toUnderConstruction(uc.getClientName(), uc.getClientMachine());\n         if (oldnode.numBlocks() \u003e 0) {\n           BlockInfoContiguous ucBlock \u003d cons.getLastBlock();\n           // we do not replace the inode, just replace the last block of oldnode\n           BlockInfoContiguous info \u003d namesystem.getBlockManager().addBlockCollection(\n               ucBlock, oldnode);\n           oldnode.setBlock(oldnode.numBlocks() - 1, info);\n         }\n \n         if (!inSnapshot) {\n-          namesystem.leaseManager.addLease(cons\n-              .getFileUnderConstructionFeature().getClientName(), path);\n+          namesystem.leaseManager.addLease(uc.getClientName(), oldnode.getId());\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void loadFilesUnderConstruction(DataInput in,\n        boolean supportSnapshot, Counter counter) throws IOException {\n      FSDirectory fsDir \u003d namesystem.dir;\n      int size \u003d in.readInt();\n\n      LOG.info(\"Number of files under construction \u003d \" + size);\n\n      for (int i \u003d 0; i \u003c size; i++) {\n        INodeFile cons \u003d FSImageSerialization.readINodeUnderConstruction(in,\n            namesystem, getLayoutVersion());\n        counter.increment();\n\n        // verify that file exists in namespace\n        String path \u003d cons.getLocalName();\n        INodeFile oldnode \u003d null;\n        boolean inSnapshot \u003d false;\n        if (path !\u003d null \u0026\u0026 FSDirectory.isReservedName(path) \u0026\u0026 \n            NameNodeLayoutVersion.supports(\n                LayoutVersion.Feature.ADD_INODE_ID, getLayoutVersion())) {\n          // TODO: for HDFS-5428, we use reserved path for those INodeFileUC in\n          // snapshot. If we support INode ID in the layout version, we can use\n          // the inode id to find the oldnode.\n          oldnode \u003d namesystem.dir.getInode(cons.getId()).asFile();\n          inSnapshot \u003d true;\n        } else {\n          path \u003d renameReservedPathsOnUpgrade(path, getLayoutVersion());\n          final INodesInPath iip \u003d fsDir.getINodesInPath(path, true);\n          oldnode \u003d INodeFile.valueOf(iip.getLastINode(), path);\n        }\n\n        FileUnderConstructionFeature uc \u003d cons.getFileUnderConstructionFeature();\n        oldnode.toUnderConstruction(uc.getClientName(), uc.getClientMachine());\n        if (oldnode.numBlocks() \u003e 0) {\n          BlockInfoContiguous ucBlock \u003d cons.getLastBlock();\n          // we do not replace the inode, just replace the last block of oldnode\n          BlockInfoContiguous info \u003d namesystem.getBlockManager().addBlockCollection(\n              ucBlock, oldnode);\n          oldnode.setBlock(oldnode.numBlocks() - 1, info);\n        }\n\n        if (!inSnapshot) {\n          namesystem.leaseManager.addLease(uc.getClientName(), oldnode.getId());\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormat.java",
      "extendedDetails": {}
    },
    "1382ae525c67bf95d8f3a436b547dbc72cfbb177": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7743. Code cleanup of BlockInfo and rename BlockInfo to BlockInfoContiguous. Contributed by Jing Zhao.\n",
      "commitDate": "08/02/15 11:51 AM",
      "commitName": "1382ae525c67bf95d8f3a436b547dbc72cfbb177",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "12/12/14 3:13 PM",
      "commitNameOld": "c78e3a7cdd10c40454e9acb06986ba6d8573cb19",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 57.86,
      "commitsBetweenForRepo": 371,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n     private void loadFilesUnderConstruction(DataInput in,\n         boolean supportSnapshot, Counter counter) throws IOException {\n       FSDirectory fsDir \u003d namesystem.dir;\n       int size \u003d in.readInt();\n \n       LOG.info(\"Number of files under construction \u003d \" + size);\n \n       for (int i \u003d 0; i \u003c size; i++) {\n         INodeFile cons \u003d FSImageSerialization.readINodeUnderConstruction(in,\n             namesystem, getLayoutVersion());\n         counter.increment();\n \n         // verify that file exists in namespace\n         String path \u003d cons.getLocalName();\n         INodeFile oldnode \u003d null;\n         boolean inSnapshot \u003d false;\n         if (path !\u003d null \u0026\u0026 FSDirectory.isReservedName(path) \u0026\u0026 \n             NameNodeLayoutVersion.supports(\n                 LayoutVersion.Feature.ADD_INODE_ID, getLayoutVersion())) {\n           // TODO: for HDFS-5428, we use reserved path for those INodeFileUC in\n           // snapshot. If we support INode ID in the layout version, we can use\n           // the inode id to find the oldnode.\n           oldnode \u003d namesystem.dir.getInode(cons.getId()).asFile();\n           inSnapshot \u003d true;\n         } else {\n           path \u003d renameReservedPathsOnUpgrade(path, getLayoutVersion());\n           final INodesInPath iip \u003d fsDir.getINodesInPath(path, true);\n           oldnode \u003d INodeFile.valueOf(iip.getLastINode(), path);\n         }\n \n         FileUnderConstructionFeature uc \u003d cons.getFileUnderConstructionFeature();\n         oldnode.toUnderConstruction(uc.getClientName(), uc.getClientMachine());\n         if (oldnode.numBlocks() \u003e 0) {\n-          BlockInfo ucBlock \u003d cons.getLastBlock();\n+          BlockInfoContiguous ucBlock \u003d cons.getLastBlock();\n           // we do not replace the inode, just replace the last block of oldnode\n-          BlockInfo info \u003d namesystem.getBlockManager().addBlockCollection(\n+          BlockInfoContiguous info \u003d namesystem.getBlockManager().addBlockCollection(\n               ucBlock, oldnode);\n           oldnode.setBlock(oldnode.numBlocks() - 1, info);\n         }\n \n         if (!inSnapshot) {\n           namesystem.leaseManager.addLease(cons\n               .getFileUnderConstructionFeature().getClientName(), path);\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void loadFilesUnderConstruction(DataInput in,\n        boolean supportSnapshot, Counter counter) throws IOException {\n      FSDirectory fsDir \u003d namesystem.dir;\n      int size \u003d in.readInt();\n\n      LOG.info(\"Number of files under construction \u003d \" + size);\n\n      for (int i \u003d 0; i \u003c size; i++) {\n        INodeFile cons \u003d FSImageSerialization.readINodeUnderConstruction(in,\n            namesystem, getLayoutVersion());\n        counter.increment();\n\n        // verify that file exists in namespace\n        String path \u003d cons.getLocalName();\n        INodeFile oldnode \u003d null;\n        boolean inSnapshot \u003d false;\n        if (path !\u003d null \u0026\u0026 FSDirectory.isReservedName(path) \u0026\u0026 \n            NameNodeLayoutVersion.supports(\n                LayoutVersion.Feature.ADD_INODE_ID, getLayoutVersion())) {\n          // TODO: for HDFS-5428, we use reserved path for those INodeFileUC in\n          // snapshot. If we support INode ID in the layout version, we can use\n          // the inode id to find the oldnode.\n          oldnode \u003d namesystem.dir.getInode(cons.getId()).asFile();\n          inSnapshot \u003d true;\n        } else {\n          path \u003d renameReservedPathsOnUpgrade(path, getLayoutVersion());\n          final INodesInPath iip \u003d fsDir.getINodesInPath(path, true);\n          oldnode \u003d INodeFile.valueOf(iip.getLastINode(), path);\n        }\n\n        FileUnderConstructionFeature uc \u003d cons.getFileUnderConstructionFeature();\n        oldnode.toUnderConstruction(uc.getClientName(), uc.getClientMachine());\n        if (oldnode.numBlocks() \u003e 0) {\n          BlockInfoContiguous ucBlock \u003d cons.getLastBlock();\n          // we do not replace the inode, just replace the last block of oldnode\n          BlockInfoContiguous info \u003d namesystem.getBlockManager().addBlockCollection(\n              ucBlock, oldnode);\n          oldnode.setBlock(oldnode.numBlocks() - 1, info);\n        }\n\n        if (!inSnapshot) {\n          namesystem.leaseManager.addLease(cons\n              .getFileUnderConstructionFeature().getClientName(), path);\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormat.java",
      "extendedDetails": {}
    },
    "c78e3a7cdd10c40454e9acb06986ba6d8573cb19": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7059. Avoid resolving path multiple times. Contributed by Jing Zhao.\n",
      "commitDate": "12/12/14 3:13 PM",
      "commitName": "c78e3a7cdd10c40454e9acb06986ba6d8573cb19",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "02/12/14 2:53 PM",
      "commitNameOld": "185e0c7b4c056b88f606362c71e4a22aae7076e0",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 10.01,
      "commitsBetweenForRepo": 86,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n     private void loadFilesUnderConstruction(DataInput in,\n         boolean supportSnapshot, Counter counter) throws IOException {\n       FSDirectory fsDir \u003d namesystem.dir;\n       int size \u003d in.readInt();\n \n       LOG.info(\"Number of files under construction \u003d \" + size);\n \n       for (int i \u003d 0; i \u003c size; i++) {\n         INodeFile cons \u003d FSImageSerialization.readINodeUnderConstruction(in,\n             namesystem, getLayoutVersion());\n         counter.increment();\n \n         // verify that file exists in namespace\n         String path \u003d cons.getLocalName();\n         INodeFile oldnode \u003d null;\n         boolean inSnapshot \u003d false;\n         if (path !\u003d null \u0026\u0026 FSDirectory.isReservedName(path) \u0026\u0026 \n             NameNodeLayoutVersion.supports(\n                 LayoutVersion.Feature.ADD_INODE_ID, getLayoutVersion())) {\n           // TODO: for HDFS-5428, we use reserved path for those INodeFileUC in\n           // snapshot. If we support INode ID in the layout version, we can use\n           // the inode id to find the oldnode.\n           oldnode \u003d namesystem.dir.getInode(cons.getId()).asFile();\n           inSnapshot \u003d true;\n         } else {\n           path \u003d renameReservedPathsOnUpgrade(path, getLayoutVersion());\n-          final INodesInPath iip \u003d fsDir.getLastINodeInPath(path);\n-          oldnode \u003d INodeFile.valueOf(iip.getINode(0), path);\n+          final INodesInPath iip \u003d fsDir.getINodesInPath(path, true);\n+          oldnode \u003d INodeFile.valueOf(iip.getLastINode(), path);\n         }\n \n         FileUnderConstructionFeature uc \u003d cons.getFileUnderConstructionFeature();\n         oldnode.toUnderConstruction(uc.getClientName(), uc.getClientMachine());\n         if (oldnode.numBlocks() \u003e 0) {\n           BlockInfo ucBlock \u003d cons.getLastBlock();\n           // we do not replace the inode, just replace the last block of oldnode\n           BlockInfo info \u003d namesystem.getBlockManager().addBlockCollection(\n               ucBlock, oldnode);\n           oldnode.setBlock(oldnode.numBlocks() - 1, info);\n         }\n \n         if (!inSnapshot) {\n           namesystem.leaseManager.addLease(cons\n               .getFileUnderConstructionFeature().getClientName(), path);\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void loadFilesUnderConstruction(DataInput in,\n        boolean supportSnapshot, Counter counter) throws IOException {\n      FSDirectory fsDir \u003d namesystem.dir;\n      int size \u003d in.readInt();\n\n      LOG.info(\"Number of files under construction \u003d \" + size);\n\n      for (int i \u003d 0; i \u003c size; i++) {\n        INodeFile cons \u003d FSImageSerialization.readINodeUnderConstruction(in,\n            namesystem, getLayoutVersion());\n        counter.increment();\n\n        // verify that file exists in namespace\n        String path \u003d cons.getLocalName();\n        INodeFile oldnode \u003d null;\n        boolean inSnapshot \u003d false;\n        if (path !\u003d null \u0026\u0026 FSDirectory.isReservedName(path) \u0026\u0026 \n            NameNodeLayoutVersion.supports(\n                LayoutVersion.Feature.ADD_INODE_ID, getLayoutVersion())) {\n          // TODO: for HDFS-5428, we use reserved path for those INodeFileUC in\n          // snapshot. If we support INode ID in the layout version, we can use\n          // the inode id to find the oldnode.\n          oldnode \u003d namesystem.dir.getInode(cons.getId()).asFile();\n          inSnapshot \u003d true;\n        } else {\n          path \u003d renameReservedPathsOnUpgrade(path, getLayoutVersion());\n          final INodesInPath iip \u003d fsDir.getINodesInPath(path, true);\n          oldnode \u003d INodeFile.valueOf(iip.getLastINode(), path);\n        }\n\n        FileUnderConstructionFeature uc \u003d cons.getFileUnderConstructionFeature();\n        oldnode.toUnderConstruction(uc.getClientName(), uc.getClientMachine());\n        if (oldnode.numBlocks() \u003e 0) {\n          BlockInfo ucBlock \u003d cons.getLastBlock();\n          // we do not replace the inode, just replace the last block of oldnode\n          BlockInfo info \u003d namesystem.getBlockManager().addBlockCollection(\n              ucBlock, oldnode);\n          oldnode.setBlock(oldnode.numBlocks() - 1, info);\n        }\n\n        if (!inSnapshot) {\n          namesystem.leaseManager.addLease(cons\n              .getFileUnderConstructionFeature().getClientName(), path);\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormat.java",
      "extendedDetails": {}
    },
    "e171254d56bfff467a67a6cf9160595c941f50c0": {
      "type": "Ybodychange",
      "commitMessage": "Name node cannot start if the path of a file under construction contains .snapshot. (wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1613329 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/07/14 4:42 PM",
      "commitName": "e171254d56bfff467a67a6cf9160595c941f50c0",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "07/07/14 5:08 PM",
      "commitNameOld": "76a621ffd2d66bf012a554f4400091a92a5b473e",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 16.98,
      "commitsBetweenForRepo": 140,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,46 @@\n     private void loadFilesUnderConstruction(DataInput in,\n         boolean supportSnapshot, Counter counter) throws IOException {\n       FSDirectory fsDir \u003d namesystem.dir;\n       int size \u003d in.readInt();\n \n       LOG.info(\"Number of files under construction \u003d \" + size);\n \n       for (int i \u003d 0; i \u003c size; i++) {\n         INodeFile cons \u003d FSImageSerialization.readINodeUnderConstruction(in,\n             namesystem, getLayoutVersion());\n         counter.increment();\n \n         // verify that file exists in namespace\n         String path \u003d cons.getLocalName();\n         INodeFile oldnode \u003d null;\n         boolean inSnapshot \u003d false;\n         if (path !\u003d null \u0026\u0026 FSDirectory.isReservedName(path) \u0026\u0026 \n             NameNodeLayoutVersion.supports(\n                 LayoutVersion.Feature.ADD_INODE_ID, getLayoutVersion())) {\n           // TODO: for HDFS-5428, we use reserved path for those INodeFileUC in\n           // snapshot. If we support INode ID in the layout version, we can use\n           // the inode id to find the oldnode.\n           oldnode \u003d namesystem.dir.getInode(cons.getId()).asFile();\n           inSnapshot \u003d true;\n         } else {\n+          path \u003d renameReservedPathsOnUpgrade(path, getLayoutVersion());\n           final INodesInPath iip \u003d fsDir.getLastINodeInPath(path);\n           oldnode \u003d INodeFile.valueOf(iip.getINode(0), path);\n         }\n \n         FileUnderConstructionFeature uc \u003d cons.getFileUnderConstructionFeature();\n         oldnode.toUnderConstruction(uc.getClientName(), uc.getClientMachine());\n         if (oldnode.numBlocks() \u003e 0) {\n           BlockInfo ucBlock \u003d cons.getLastBlock();\n           // we do not replace the inode, just replace the last block of oldnode\n           BlockInfo info \u003d namesystem.getBlockManager().addBlockCollection(\n               ucBlock, oldnode);\n           oldnode.setBlock(oldnode.numBlocks() - 1, info);\n         }\n \n         if (!inSnapshot) {\n           namesystem.leaseManager.addLease(cons\n               .getFileUnderConstructionFeature().getClientName(), path);\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void loadFilesUnderConstruction(DataInput in,\n        boolean supportSnapshot, Counter counter) throws IOException {\n      FSDirectory fsDir \u003d namesystem.dir;\n      int size \u003d in.readInt();\n\n      LOG.info(\"Number of files under construction \u003d \" + size);\n\n      for (int i \u003d 0; i \u003c size; i++) {\n        INodeFile cons \u003d FSImageSerialization.readINodeUnderConstruction(in,\n            namesystem, getLayoutVersion());\n        counter.increment();\n\n        // verify that file exists in namespace\n        String path \u003d cons.getLocalName();\n        INodeFile oldnode \u003d null;\n        boolean inSnapshot \u003d false;\n        if (path !\u003d null \u0026\u0026 FSDirectory.isReservedName(path) \u0026\u0026 \n            NameNodeLayoutVersion.supports(\n                LayoutVersion.Feature.ADD_INODE_ID, getLayoutVersion())) {\n          // TODO: for HDFS-5428, we use reserved path for those INodeFileUC in\n          // snapshot. If we support INode ID in the layout version, we can use\n          // the inode id to find the oldnode.\n          oldnode \u003d namesystem.dir.getInode(cons.getId()).asFile();\n          inSnapshot \u003d true;\n        } else {\n          path \u003d renameReservedPathsOnUpgrade(path, getLayoutVersion());\n          final INodesInPath iip \u003d fsDir.getLastINodeInPath(path);\n          oldnode \u003d INodeFile.valueOf(iip.getINode(0), path);\n        }\n\n        FileUnderConstructionFeature uc \u003d cons.getFileUnderConstructionFeature();\n        oldnode.toUnderConstruction(uc.getClientName(), uc.getClientMachine());\n        if (oldnode.numBlocks() \u003e 0) {\n          BlockInfo ucBlock \u003d cons.getLastBlock();\n          // we do not replace the inode, just replace the last block of oldnode\n          BlockInfo info \u003d namesystem.getBlockManager().addBlockCollection(\n              ucBlock, oldnode);\n          oldnode.setBlock(oldnode.numBlocks() - 1, info);\n        }\n\n        if (!inSnapshot) {\n          namesystem.leaseManager.addLease(cons\n              .getFileUnderConstructionFeature().getClientName(), path);\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormat.java",
      "extendedDetails": {}
    },
    "1e89eba47d0f291b33fc26f9406231fc70b63a87": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6583. Remove clientNode in FileUnderConstructionFeature. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1604541 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/06/14 12:39 AM",
      "commitName": "1e89eba47d0f291b33fc26f9406231fc70b63a87",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "21/05/14 6:57 AM",
      "commitNameOld": "ac23a55547716df29b3e25c98a113399e184d9d1",
      "commitAuthorOld": "Uma Maheswara Rao G",
      "daysBetweenCommits": 31.74,
      "commitsBetweenForRepo": 189,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,45 @@\n     private void loadFilesUnderConstruction(DataInput in,\n         boolean supportSnapshot, Counter counter) throws IOException {\n       FSDirectory fsDir \u003d namesystem.dir;\n       int size \u003d in.readInt();\n \n       LOG.info(\"Number of files under construction \u003d \" + size);\n \n       for (int i \u003d 0; i \u003c size; i++) {\n         INodeFile cons \u003d FSImageSerialization.readINodeUnderConstruction(in,\n             namesystem, getLayoutVersion());\n         counter.increment();\n \n         // verify that file exists in namespace\n         String path \u003d cons.getLocalName();\n         INodeFile oldnode \u003d null;\n         boolean inSnapshot \u003d false;\n         if (path !\u003d null \u0026\u0026 FSDirectory.isReservedName(path) \u0026\u0026 \n             NameNodeLayoutVersion.supports(\n                 LayoutVersion.Feature.ADD_INODE_ID, getLayoutVersion())) {\n           // TODO: for HDFS-5428, we use reserved path for those INodeFileUC in\n           // snapshot. If we support INode ID in the layout version, we can use\n           // the inode id to find the oldnode.\n           oldnode \u003d namesystem.dir.getInode(cons.getId()).asFile();\n           inSnapshot \u003d true;\n         } else {\n           final INodesInPath iip \u003d fsDir.getLastINodeInPath(path);\n           oldnode \u003d INodeFile.valueOf(iip.getINode(0), path);\n         }\n \n         FileUnderConstructionFeature uc \u003d cons.getFileUnderConstructionFeature();\n-        oldnode.toUnderConstruction(uc.getClientName(), uc.getClientMachine(),\n-            uc.getClientNode());\n+        oldnode.toUnderConstruction(uc.getClientName(), uc.getClientMachine());\n         if (oldnode.numBlocks() \u003e 0) {\n           BlockInfo ucBlock \u003d cons.getLastBlock();\n           // we do not replace the inode, just replace the last block of oldnode\n           BlockInfo info \u003d namesystem.getBlockManager().addBlockCollection(\n               ucBlock, oldnode);\n           oldnode.setBlock(oldnode.numBlocks() - 1, info);\n         }\n \n         if (!inSnapshot) {\n           namesystem.leaseManager.addLease(cons\n               .getFileUnderConstructionFeature().getClientName(), path);\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void loadFilesUnderConstruction(DataInput in,\n        boolean supportSnapshot, Counter counter) throws IOException {\n      FSDirectory fsDir \u003d namesystem.dir;\n      int size \u003d in.readInt();\n\n      LOG.info(\"Number of files under construction \u003d \" + size);\n\n      for (int i \u003d 0; i \u003c size; i++) {\n        INodeFile cons \u003d FSImageSerialization.readINodeUnderConstruction(in,\n            namesystem, getLayoutVersion());\n        counter.increment();\n\n        // verify that file exists in namespace\n        String path \u003d cons.getLocalName();\n        INodeFile oldnode \u003d null;\n        boolean inSnapshot \u003d false;\n        if (path !\u003d null \u0026\u0026 FSDirectory.isReservedName(path) \u0026\u0026 \n            NameNodeLayoutVersion.supports(\n                LayoutVersion.Feature.ADD_INODE_ID, getLayoutVersion())) {\n          // TODO: for HDFS-5428, we use reserved path for those INodeFileUC in\n          // snapshot. If we support INode ID in the layout version, we can use\n          // the inode id to find the oldnode.\n          oldnode \u003d namesystem.dir.getInode(cons.getId()).asFile();\n          inSnapshot \u003d true;\n        } else {\n          final INodesInPath iip \u003d fsDir.getLastINodeInPath(path);\n          oldnode \u003d INodeFile.valueOf(iip.getINode(0), path);\n        }\n\n        FileUnderConstructionFeature uc \u003d cons.getFileUnderConstructionFeature();\n        oldnode.toUnderConstruction(uc.getClientName(), uc.getClientMachine());\n        if (oldnode.numBlocks() \u003e 0) {\n          BlockInfo ucBlock \u003d cons.getLastBlock();\n          // we do not replace the inode, just replace the last block of oldnode\n          BlockInfo info \u003d namesystem.getBlockManager().addBlockCollection(\n              ucBlock, oldnode);\n          oldnode.setBlock(oldnode.numBlocks() - 1, info);\n        }\n\n        if (!inSnapshot) {\n          namesystem.leaseManager.addLease(cons\n              .getFileUnderConstructionFeature().getClientName(), path);\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormat.java",
      "extendedDetails": {}
    },
    "00067895a01c66d53715b50bbcb3605efd6425f2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5754. Split LayoutVerion into NameNodeLayoutVersion and DataNodeLayoutVersion. Contributed by Brandon Li\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1563041 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/01/14 7:21 PM",
      "commitName": "00067895a01c66d53715b50bbcb3605efd6425f2",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "16/01/14 5:32 PM",
      "commitNameOld": "a7ec44d41b0ad1fa133408a10caaae32a27ea569",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 14.08,
      "commitsBetweenForRepo": 56,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,46 @@\n     private void loadFilesUnderConstruction(DataInput in,\n         boolean supportSnapshot, Counter counter) throws IOException {\n       FSDirectory fsDir \u003d namesystem.dir;\n       int size \u003d in.readInt();\n \n       LOG.info(\"Number of files under construction \u003d \" + size);\n \n       for (int i \u003d 0; i \u003c size; i++) {\n         INodeFile cons \u003d FSImageSerialization.readINodeUnderConstruction(in,\n             namesystem, getLayoutVersion());\n         counter.increment();\n \n         // verify that file exists in namespace\n         String path \u003d cons.getLocalName();\n         INodeFile oldnode \u003d null;\n         boolean inSnapshot \u003d false;\n         if (path !\u003d null \u0026\u0026 FSDirectory.isReservedName(path) \u0026\u0026 \n-            LayoutVersion.supports(Feature.ADD_INODE_ID, getLayoutVersion())) {\n+            NameNodeLayoutVersion.supports(\n+                LayoutVersion.Feature.ADD_INODE_ID, getLayoutVersion())) {\n           // TODO: for HDFS-5428, we use reserved path for those INodeFileUC in \n           // snapshot. If we support INode ID in the layout version, we can use\n           // the inode id to find the oldnode.\n           oldnode \u003d namesystem.dir.getInode(cons.getId()).asFile();\n           inSnapshot \u003d true;\n         } else {\n           final INodesInPath iip \u003d fsDir.getLastINodeInPath(path);\n           oldnode \u003d INodeFile.valueOf(iip.getINode(0), path);\n         }\n \n         FileUnderConstructionFeature uc \u003d cons.getFileUnderConstructionFeature();\n         oldnode.toUnderConstruction(uc.getClientName(), uc.getClientMachine(),\n             uc.getClientNode());\n         if (oldnode.numBlocks() \u003e 0) {\n           BlockInfo ucBlock \u003d cons.getLastBlock();\n           // we do not replace the inode, just replace the last block of oldnode\n           BlockInfo info \u003d namesystem.getBlockManager().addBlockCollection(\n               ucBlock, oldnode);\n           oldnode.setBlock(oldnode.numBlocks() - 1, info);\n         }\n \n         if (!inSnapshot) {\n           namesystem.leaseManager.addLease(cons\n               .getFileUnderConstructionFeature().getClientName(), path);\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void loadFilesUnderConstruction(DataInput in,\n        boolean supportSnapshot, Counter counter) throws IOException {\n      FSDirectory fsDir \u003d namesystem.dir;\n      int size \u003d in.readInt();\n\n      LOG.info(\"Number of files under construction \u003d \" + size);\n\n      for (int i \u003d 0; i \u003c size; i++) {\n        INodeFile cons \u003d FSImageSerialization.readINodeUnderConstruction(in,\n            namesystem, getLayoutVersion());\n        counter.increment();\n\n        // verify that file exists in namespace\n        String path \u003d cons.getLocalName();\n        INodeFile oldnode \u003d null;\n        boolean inSnapshot \u003d false;\n        if (path !\u003d null \u0026\u0026 FSDirectory.isReservedName(path) \u0026\u0026 \n            NameNodeLayoutVersion.supports(\n                LayoutVersion.Feature.ADD_INODE_ID, getLayoutVersion())) {\n          // TODO: for HDFS-5428, we use reserved path for those INodeFileUC in \n          // snapshot. If we support INode ID in the layout version, we can use\n          // the inode id to find the oldnode.\n          oldnode \u003d namesystem.dir.getInode(cons.getId()).asFile();\n          inSnapshot \u003d true;\n        } else {\n          final INodesInPath iip \u003d fsDir.getLastINodeInPath(path);\n          oldnode \u003d INodeFile.valueOf(iip.getINode(0), path);\n        }\n\n        FileUnderConstructionFeature uc \u003d cons.getFileUnderConstructionFeature();\n        oldnode.toUnderConstruction(uc.getClientName(), uc.getClientMachine(),\n            uc.getClientNode());\n        if (oldnode.numBlocks() \u003e 0) {\n          BlockInfo ucBlock \u003d cons.getLastBlock();\n          // we do not replace the inode, just replace the last block of oldnode\n          BlockInfo info \u003d namesystem.getBlockManager().addBlockCollection(\n              ucBlock, oldnode);\n          oldnode.setBlock(oldnode.numBlocks() - 1, info);\n        }\n\n        if (!inSnapshot) {\n          namesystem.leaseManager.addLease(cons\n              .getFileUnderConstructionFeature().getClientName(), path);\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormat.java",
      "extendedDetails": {}
    },
    "ce68f410b05a58ad05965f32ad7f5b246b363a75": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5285. Flatten INodeFile hierarchy: Replace INodeFileUnderConstruction and INodeFileUnderConstructionWithSnapshot with FileUnderContructionFeature.  Contributed by jing9\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1544389 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/11/13 5:39 PM",
      "commitName": "ce68f410b05a58ad05965f32ad7f5b246b363a75",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "20/11/13 7:17 PM",
      "commitNameOld": "5f458ef23f097c784f12a973b326f7e1254ae0b2",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 0.93,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,45 @@\n     private void loadFilesUnderConstruction(DataInput in,\n         boolean supportSnapshot, Counter counter) throws IOException {\n       FSDirectory fsDir \u003d namesystem.dir;\n       int size \u003d in.readInt();\n \n       LOG.info(\"Number of files under construction \u003d \" + size);\n \n       for (int i \u003d 0; i \u003c size; i++) {\n-        INodeFileUnderConstruction cons \u003d FSImageSerialization\n-            .readINodeUnderConstruction(in, namesystem, getLayoutVersion());\n+        INodeFile cons \u003d FSImageSerialization.readINodeUnderConstruction(in,\n+            namesystem, getLayoutVersion());\n         counter.increment();\n \n         // verify that file exists in namespace\n         String path \u003d cons.getLocalName();\n         INodeFile oldnode \u003d null;\n         boolean inSnapshot \u003d false;\n         if (path !\u003d null \u0026\u0026 FSDirectory.isReservedName(path) \u0026\u0026 \n             LayoutVersion.supports(Feature.ADD_INODE_ID, getLayoutVersion())) {\n           // TODO: for HDFS-5428, we use reserved path for those INodeFileUC in \n           // snapshot. If we support INode ID in the layout version, we can use\n           // the inode id to find the oldnode.\n           oldnode \u003d namesystem.dir.getInode(cons.getId()).asFile();\n           inSnapshot \u003d true;\n         } else {\n           final INodesInPath iip \u003d fsDir.getLastINodeInPath(path);\n           oldnode \u003d INodeFile.valueOf(iip.getINode(0), path);\n         }\n-        \n-        cons.setLocalName(oldnode.getLocalNameBytes());\n-        INodeReference parentRef \u003d oldnode.getParentReference();\n-        if (parentRef !\u003d null) {\n-          cons.setParentReference(parentRef);\n-        } else {\n-          cons.setParent(oldnode.getParent());\n-        }\n \n-        if (oldnode instanceof INodeFileWithSnapshot) {\n-          cons \u003d new INodeFileUnderConstructionWithSnapshot(cons,\n-              ((INodeFileWithSnapshot) oldnode).getDiffs());\n+        FileUnderConstructionFeature uc \u003d cons.getFileUnderConstructionFeature();\n+        oldnode.toUnderConstruction(uc.getClientName(), uc.getClientMachine(),\n+            uc.getClientNode());\n+        if (oldnode.numBlocks() \u003e 0) {\n+          BlockInfo ucBlock \u003d cons.getLastBlock();\n+          // we do not replace the inode, just replace the last block of oldnode\n+          BlockInfo info \u003d namesystem.getBlockManager().addBlockCollection(\n+              ucBlock, oldnode);\n+          oldnode.setBlock(oldnode.numBlocks() - 1, info);\n         }\n \n         if (!inSnapshot) {\n-          fsDir.replaceINodeFile(path, oldnode, cons);\n-          namesystem.leaseManager.addLease(cons.getClientName(), path);\n-        } else {\n-          if (parentRef !\u003d null) {\n-            // replace oldnode with cons\n-            parentRef.setReferredINode(cons);\n-          } else {\n-            // replace old node in its parent\u0027s children list and deleted list\n-            oldnode.getParent().replaceChildFileInSnapshot(oldnode, cons);\n-            namesystem.dir.addToInodeMap(cons);\n-            updateBlocksMap(cons);\n-          }\n+          namesystem.leaseManager.addLease(cons\n+              .getFileUnderConstructionFeature().getClientName(), path);\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void loadFilesUnderConstruction(DataInput in,\n        boolean supportSnapshot, Counter counter) throws IOException {\n      FSDirectory fsDir \u003d namesystem.dir;\n      int size \u003d in.readInt();\n\n      LOG.info(\"Number of files under construction \u003d \" + size);\n\n      for (int i \u003d 0; i \u003c size; i++) {\n        INodeFile cons \u003d FSImageSerialization.readINodeUnderConstruction(in,\n            namesystem, getLayoutVersion());\n        counter.increment();\n\n        // verify that file exists in namespace\n        String path \u003d cons.getLocalName();\n        INodeFile oldnode \u003d null;\n        boolean inSnapshot \u003d false;\n        if (path !\u003d null \u0026\u0026 FSDirectory.isReservedName(path) \u0026\u0026 \n            LayoutVersion.supports(Feature.ADD_INODE_ID, getLayoutVersion())) {\n          // TODO: for HDFS-5428, we use reserved path for those INodeFileUC in \n          // snapshot. If we support INode ID in the layout version, we can use\n          // the inode id to find the oldnode.\n          oldnode \u003d namesystem.dir.getInode(cons.getId()).asFile();\n          inSnapshot \u003d true;\n        } else {\n          final INodesInPath iip \u003d fsDir.getLastINodeInPath(path);\n          oldnode \u003d INodeFile.valueOf(iip.getINode(0), path);\n        }\n\n        FileUnderConstructionFeature uc \u003d cons.getFileUnderConstructionFeature();\n        oldnode.toUnderConstruction(uc.getClientName(), uc.getClientMachine(),\n            uc.getClientNode());\n        if (oldnode.numBlocks() \u003e 0) {\n          BlockInfo ucBlock \u003d cons.getLastBlock();\n          // we do not replace the inode, just replace the last block of oldnode\n          BlockInfo info \u003d namesystem.getBlockManager().addBlockCollection(\n              ucBlock, oldnode);\n          oldnode.setBlock(oldnode.numBlocks() - 1, info);\n        }\n\n        if (!inSnapshot) {\n          namesystem.leaseManager.addLease(cons\n              .getFileUnderConstructionFeature().getClientName(), path);\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormat.java",
      "extendedDetails": {}
    },
    "aa002344d0466a62672eae73cdb2bb2ae7c19a72": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5428. Under construction files deletion after snapshot+checkpoint+nn restart leads nn safemode. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1543329 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/11/13 11:31 PM",
      "commitName": "aa002344d0466a62672eae73cdb2bb2ae7c19a72",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "12/11/13 2:10 PM",
      "commitNameOld": "8162fdcdbc23d749fdb188ae8419e173c59cb1ed",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 6.39,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,57 @@\n     private void loadFilesUnderConstruction(DataInput in,\n         boolean supportSnapshot, Counter counter) throws IOException {\n       FSDirectory fsDir \u003d namesystem.dir;\n       int size \u003d in.readInt();\n \n       LOG.info(\"Number of files under construction \u003d \" + size);\n \n       for (int i \u003d 0; i \u003c size; i++) {\n         INodeFileUnderConstruction cons \u003d FSImageSerialization\n             .readINodeUnderConstruction(in, namesystem, getLayoutVersion());\n         counter.increment();\n \n         // verify that file exists in namespace\n         String path \u003d cons.getLocalName();\n-        final INodesInPath iip \u003d fsDir.getLastINodeInPath(path);\n-        INodeFile oldnode \u003d INodeFile.valueOf(iip.getINode(0), path);\n+        INodeFile oldnode \u003d null;\n+        boolean inSnapshot \u003d false;\n+        if (path !\u003d null \u0026\u0026 FSDirectory.isReservedName(path) \u0026\u0026 \n+            LayoutVersion.supports(Feature.ADD_INODE_ID, getLayoutVersion())) {\n+          // TODO: for HDFS-5428, we use reserved path for those INodeFileUC in \n+          // snapshot. If we support INode ID in the layout version, we can use\n+          // the inode id to find the oldnode.\n+          oldnode \u003d namesystem.dir.getInode(cons.getId()).asFile();\n+          inSnapshot \u003d true;\n+        } else {\n+          final INodesInPath iip \u003d fsDir.getLastINodeInPath(path);\n+          oldnode \u003d INodeFile.valueOf(iip.getINode(0), path);\n+        }\n+        \n         cons.setLocalName(oldnode.getLocalNameBytes());\n         INodeReference parentRef \u003d oldnode.getParentReference();\n         if (parentRef !\u003d null) {\n           cons.setParentReference(parentRef);\n         } else {\n           cons.setParent(oldnode.getParent());\n         }\n \n         if (oldnode instanceof INodeFileWithSnapshot) {\n           cons \u003d new INodeFileUnderConstructionWithSnapshot(cons,\n-              ((INodeFileWithSnapshot)oldnode).getDiffs());\n+              ((INodeFileWithSnapshot) oldnode).getDiffs());\n         }\n \n-        fsDir.replaceINodeFile(path, oldnode, cons);\n-        namesystem.leaseManager.addLease(cons.getClientName(), path); \n+        if (!inSnapshot) {\n+          fsDir.replaceINodeFile(path, oldnode, cons);\n+          namesystem.leaseManager.addLease(cons.getClientName(), path);\n+        } else {\n+          if (parentRef !\u003d null) {\n+            // replace oldnode with cons\n+            parentRef.setReferredINode(cons);\n+          } else {\n+            // replace old node in its parent\u0027s children list and deleted list\n+            oldnode.getParent().replaceChildFileInSnapshot(oldnode, cons);\n+            namesystem.dir.addToInodeMap(cons);\n+            updateBlocksMap(cons);\n+          }\n+        }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void loadFilesUnderConstruction(DataInput in,\n        boolean supportSnapshot, Counter counter) throws IOException {\n      FSDirectory fsDir \u003d namesystem.dir;\n      int size \u003d in.readInt();\n\n      LOG.info(\"Number of files under construction \u003d \" + size);\n\n      for (int i \u003d 0; i \u003c size; i++) {\n        INodeFileUnderConstruction cons \u003d FSImageSerialization\n            .readINodeUnderConstruction(in, namesystem, getLayoutVersion());\n        counter.increment();\n\n        // verify that file exists in namespace\n        String path \u003d cons.getLocalName();\n        INodeFile oldnode \u003d null;\n        boolean inSnapshot \u003d false;\n        if (path !\u003d null \u0026\u0026 FSDirectory.isReservedName(path) \u0026\u0026 \n            LayoutVersion.supports(Feature.ADD_INODE_ID, getLayoutVersion())) {\n          // TODO: for HDFS-5428, we use reserved path for those INodeFileUC in \n          // snapshot. If we support INode ID in the layout version, we can use\n          // the inode id to find the oldnode.\n          oldnode \u003d namesystem.dir.getInode(cons.getId()).asFile();\n          inSnapshot \u003d true;\n        } else {\n          final INodesInPath iip \u003d fsDir.getLastINodeInPath(path);\n          oldnode \u003d INodeFile.valueOf(iip.getINode(0), path);\n        }\n        \n        cons.setLocalName(oldnode.getLocalNameBytes());\n        INodeReference parentRef \u003d oldnode.getParentReference();\n        if (parentRef !\u003d null) {\n          cons.setParentReference(parentRef);\n        } else {\n          cons.setParent(oldnode.getParent());\n        }\n\n        if (oldnode instanceof INodeFileWithSnapshot) {\n          cons \u003d new INodeFileUnderConstructionWithSnapshot(cons,\n              ((INodeFileWithSnapshot) oldnode).getDiffs());\n        }\n\n        if (!inSnapshot) {\n          fsDir.replaceINodeFile(path, oldnode, cons);\n          namesystem.leaseManager.addLease(cons.getClientName(), path);\n        } else {\n          if (parentRef !\u003d null) {\n            // replace oldnode with cons\n            parentRef.setReferredINode(cons);\n          } else {\n            // replace old node in its parent\u0027s children list and deleted list\n            oldnode.getParent().replaceChildFileInSnapshot(oldnode, cons);\n            namesystem.dir.addToInodeMap(cons);\n            updateBlocksMap(cons);\n          }\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormat.java",
      "extendedDetails": {}
    },
    "8162fdcdbc23d749fdb188ae8419e173c59cb1ed": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5425. Renaming underconstruction file with snapshots can make NN failure on restart. Contributed by Vinay and Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1541261 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/11/13 2:10 PM",
      "commitName": "8162fdcdbc23d749fdb188ae8419e173c59cb1ed",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "04/11/13 10:38 PM",
      "commitNameOld": "a6250a4943d90c10bcfe9a2a46d6558c6d1a2d50",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 7.65,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,33 @@\n     private void loadFilesUnderConstruction(DataInput in,\n         boolean supportSnapshot, Counter counter) throws IOException {\n       FSDirectory fsDir \u003d namesystem.dir;\n       int size \u003d in.readInt();\n \n       LOG.info(\"Number of files under construction \u003d \" + size);\n \n       for (int i \u003d 0; i \u003c size; i++) {\n         INodeFileUnderConstruction cons \u003d FSImageSerialization\n             .readINodeUnderConstruction(in, namesystem, getLayoutVersion());\n         counter.increment();\n \n         // verify that file exists in namespace\n         String path \u003d cons.getLocalName();\n         final INodesInPath iip \u003d fsDir.getLastINodeInPath(path);\n         INodeFile oldnode \u003d INodeFile.valueOf(iip.getINode(0), path);\n         cons.setLocalName(oldnode.getLocalNameBytes());\n-        cons.setParent(oldnode.getParent());\n+        INodeReference parentRef \u003d oldnode.getParentReference();\n+        if (parentRef !\u003d null) {\n+          cons.setParentReference(parentRef);\n+        } else {\n+          cons.setParent(oldnode.getParent());\n+        }\n \n         if (oldnode instanceof INodeFileWithSnapshot) {\n           cons \u003d new INodeFileUnderConstructionWithSnapshot(cons,\n               ((INodeFileWithSnapshot)oldnode).getDiffs());\n         }\n \n         fsDir.replaceINodeFile(path, oldnode, cons);\n         namesystem.leaseManager.addLease(cons.getClientName(), path); \n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void loadFilesUnderConstruction(DataInput in,\n        boolean supportSnapshot, Counter counter) throws IOException {\n      FSDirectory fsDir \u003d namesystem.dir;\n      int size \u003d in.readInt();\n\n      LOG.info(\"Number of files under construction \u003d \" + size);\n\n      for (int i \u003d 0; i \u003c size; i++) {\n        INodeFileUnderConstruction cons \u003d FSImageSerialization\n            .readINodeUnderConstruction(in, namesystem, getLayoutVersion());\n        counter.increment();\n\n        // verify that file exists in namespace\n        String path \u003d cons.getLocalName();\n        final INodesInPath iip \u003d fsDir.getLastINodeInPath(path);\n        INodeFile oldnode \u003d INodeFile.valueOf(iip.getINode(0), path);\n        cons.setLocalName(oldnode.getLocalNameBytes());\n        INodeReference parentRef \u003d oldnode.getParentReference();\n        if (parentRef !\u003d null) {\n          cons.setParentReference(parentRef);\n        } else {\n          cons.setParent(oldnode.getParent());\n        }\n\n        if (oldnode instanceof INodeFileWithSnapshot) {\n          cons \u003d new INodeFileUnderConstructionWithSnapshot(cons,\n              ((INodeFileWithSnapshot)oldnode).getDiffs());\n        }\n\n        fsDir.replaceINodeFile(path, oldnode, cons);\n        namesystem.leaseManager.addLease(cons.getClientName(), path); \n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormat.java",
      "extendedDetails": {}
    },
    "da8e962e39bd41b73b53966826c82e741b08010b": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-4372. Track NameNode startup progress. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1502120 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/07/13 10:35 PM",
      "commitName": "da8e962e39bd41b73b53966826c82e741b08010b",
      "commitAuthor": "Chris Nauroth",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-4372. Track NameNode startup progress. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1502120 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/07/13 10:35 PM",
          "commitName": "da8e962e39bd41b73b53966826c82e741b08010b",
          "commitAuthor": "Chris Nauroth",
          "commitDateOld": "07/07/13 10:29 PM",
          "commitNameOld": "6770de7ec4f73e16740f1723f4e35d2fef2c22c8",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 3.0,
          "commitsBetweenForRepo": 22,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,28 @@\n     private void loadFilesUnderConstruction(DataInput in,\n-        boolean supportSnapshot) throws IOException {\n+        boolean supportSnapshot, Counter counter) throws IOException {\n       FSDirectory fsDir \u003d namesystem.dir;\n       int size \u003d in.readInt();\n \n       LOG.info(\"Number of files under construction \u003d \" + size);\n \n       for (int i \u003d 0; i \u003c size; i++) {\n         INodeFileUnderConstruction cons \u003d FSImageSerialization\n             .readINodeUnderConstruction(in, namesystem, getLayoutVersion());\n+        counter.increment();\n \n         // verify that file exists in namespace\n         String path \u003d cons.getLocalName();\n         final INodesInPath iip \u003d fsDir.getLastINodeInPath(path);\n         INodeFile oldnode \u003d INodeFile.valueOf(iip.getINode(0), path);\n         cons.setLocalName(oldnode.getLocalNameBytes());\n         cons.setParent(oldnode.getParent());\n \n         if (oldnode instanceof INodeFileWithSnapshot) {\n           cons \u003d new INodeFileUnderConstructionWithSnapshot(cons,\n               ((INodeFileWithSnapshot)oldnode).getDiffs());\n         }\n \n         fsDir.replaceINodeFile(path, oldnode, cons);\n         namesystem.leaseManager.addLease(cons.getClientName(), path); \n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void loadFilesUnderConstruction(DataInput in,\n        boolean supportSnapshot, Counter counter) throws IOException {\n      FSDirectory fsDir \u003d namesystem.dir;\n      int size \u003d in.readInt();\n\n      LOG.info(\"Number of files under construction \u003d \" + size);\n\n      for (int i \u003d 0; i \u003c size; i++) {\n        INodeFileUnderConstruction cons \u003d FSImageSerialization\n            .readINodeUnderConstruction(in, namesystem, getLayoutVersion());\n        counter.increment();\n\n        // verify that file exists in namespace\n        String path \u003d cons.getLocalName();\n        final INodesInPath iip \u003d fsDir.getLastINodeInPath(path);\n        INodeFile oldnode \u003d INodeFile.valueOf(iip.getINode(0), path);\n        cons.setLocalName(oldnode.getLocalNameBytes());\n        cons.setParent(oldnode.getParent());\n\n        if (oldnode instanceof INodeFileWithSnapshot) {\n          cons \u003d new INodeFileUnderConstructionWithSnapshot(cons,\n              ((INodeFileWithSnapshot)oldnode).getDiffs());\n        }\n\n        fsDir.replaceINodeFile(path, oldnode, cons);\n        namesystem.leaseManager.addLease(cons.getClientName(), path); \n      }\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormat.java",
          "extendedDetails": {
            "oldValue": "[in-DataInput, supportSnapshot-boolean]",
            "newValue": "[in-DataInput, supportSnapshot-boolean, counter-Counter]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4372. Track NameNode startup progress. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1502120 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/07/13 10:35 PM",
          "commitName": "da8e962e39bd41b73b53966826c82e741b08010b",
          "commitAuthor": "Chris Nauroth",
          "commitDateOld": "07/07/13 10:29 PM",
          "commitNameOld": "6770de7ec4f73e16740f1723f4e35d2fef2c22c8",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 3.0,
          "commitsBetweenForRepo": 22,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,28 @@\n     private void loadFilesUnderConstruction(DataInput in,\n-        boolean supportSnapshot) throws IOException {\n+        boolean supportSnapshot, Counter counter) throws IOException {\n       FSDirectory fsDir \u003d namesystem.dir;\n       int size \u003d in.readInt();\n \n       LOG.info(\"Number of files under construction \u003d \" + size);\n \n       for (int i \u003d 0; i \u003c size; i++) {\n         INodeFileUnderConstruction cons \u003d FSImageSerialization\n             .readINodeUnderConstruction(in, namesystem, getLayoutVersion());\n+        counter.increment();\n \n         // verify that file exists in namespace\n         String path \u003d cons.getLocalName();\n         final INodesInPath iip \u003d fsDir.getLastINodeInPath(path);\n         INodeFile oldnode \u003d INodeFile.valueOf(iip.getINode(0), path);\n         cons.setLocalName(oldnode.getLocalNameBytes());\n         cons.setParent(oldnode.getParent());\n \n         if (oldnode instanceof INodeFileWithSnapshot) {\n           cons \u003d new INodeFileUnderConstructionWithSnapshot(cons,\n               ((INodeFileWithSnapshot)oldnode).getDiffs());\n         }\n \n         fsDir.replaceINodeFile(path, oldnode, cons);\n         namesystem.leaseManager.addLease(cons.getClientName(), path); \n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void loadFilesUnderConstruction(DataInput in,\n        boolean supportSnapshot, Counter counter) throws IOException {\n      FSDirectory fsDir \u003d namesystem.dir;\n      int size \u003d in.readInt();\n\n      LOG.info(\"Number of files under construction \u003d \" + size);\n\n      for (int i \u003d 0; i \u003c size; i++) {\n        INodeFileUnderConstruction cons \u003d FSImageSerialization\n            .readINodeUnderConstruction(in, namesystem, getLayoutVersion());\n        counter.increment();\n\n        // verify that file exists in namespace\n        String path \u003d cons.getLocalName();\n        final INodesInPath iip \u003d fsDir.getLastINodeInPath(path);\n        INodeFile oldnode \u003d INodeFile.valueOf(iip.getINode(0), path);\n        cons.setLocalName(oldnode.getLocalNameBytes());\n        cons.setParent(oldnode.getParent());\n\n        if (oldnode instanceof INodeFileWithSnapshot) {\n          cons \u003d new INodeFileUnderConstructionWithSnapshot(cons,\n              ((INodeFileWithSnapshot)oldnode).getDiffs());\n        }\n\n        fsDir.replaceINodeFile(path, oldnode, cons);\n        namesystem.leaseManager.addLease(cons.getClientName(), path); \n      }\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormat.java",
          "extendedDetails": {}
        }
      ]
    }
  }
}