{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ResourceSet.java",
  "functionName": "addResources",
  "functionId": "addResources___localResourceMap-Map__String,LocalResource__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceSet.java",
  "functionStartLine": 70,
  "functionEndLine": 119,
  "numCommitsSeen": 5,
  "timeTaken": 1653,
  "changeHistory": [
    "40b5a59b726733df456330a26f03d5174cc0bc1c",
    "e6fcfe28e304062c7d09231db757acb2953703ce"
  ],
  "changeHistoryShort": {
    "40b5a59b726733df456330a26f03d5174cc0bc1c": "Ybodychange",
    "e6fcfe28e304062c7d09231db757acb2953703ce": "Yintroduced"
  },
  "changeHistoryDetails": {
    "40b5a59b726733df456330a26f03d5174cc0bc1c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5620. Core changes in NodeManager to support re-initialization of Containers with new launchContext. (asuresh)\n",
      "commitDate": "15/09/16 7:15 AM",
      "commitName": "40b5a59b726733df456330a26f03d5174cc0bc1c",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "06/09/16 7:31 AM",
      "commitNameOld": "e6fcfe28e304062c7d09231db757acb2953703ce",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 8.99,
      "commitsBetweenForRepo": 51,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,50 @@\n       addResources(Map\u003cString, LocalResource\u003e localResourceMap)\n       throws URISyntaxException {\n     if (localResourceMap \u003d\u003d null || localResourceMap.isEmpty()) {\n       return null;\n     }\n-    Map\u003cLocalResourceRequest, List\u003cString\u003e\u003e allResources \u003d new HashMap\u003c\u003e();\n+    Map\u003cLocalResourceRequest, Set\u003cString\u003e\u003e allResources \u003d new HashMap\u003c\u003e();\n     List\u003cLocalResourceRequest\u003e publicList \u003d new ArrayList\u003c\u003e();\n     List\u003cLocalResourceRequest\u003e privateList \u003d new ArrayList\u003c\u003e();\n     List\u003cLocalResourceRequest\u003e appList \u003d new ArrayList\u003c\u003e();\n \n     for (Map.Entry\u003cString, LocalResource\u003e rsrc : localResourceMap.entrySet()) {\n       LocalResource resource \u003d rsrc.getValue();\n       LocalResourceRequest req \u003d new LocalResourceRequest(rsrc.getValue());\n-      allResources.putIfAbsent(req, new ArrayList\u003c\u003e());\n+      allResources.putIfAbsent(req, new HashSet\u003c\u003e());\n       allResources.get(req).add(rsrc.getKey());\n       storeSharedCacheUploadPolicy(req,\n           resource.getShouldBeUploadedToSharedCache());\n       switch (resource.getVisibility()) {\n       case PUBLIC:\n         publicList.add(req);\n         break;\n       case PRIVATE:\n         privateList.add(req);\n         break;\n       case APPLICATION:\n         appList.add(req);\n         break;\n       default:\n         break;\n       }\n     }\n     Map\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e req \u003d\n         new LinkedHashMap\u003c\u003e();\n     if (!publicList.isEmpty()) {\n       publicRsrcs.addAll(publicList);\n       req.put(LocalResourceVisibility.PUBLIC, publicList);\n     }\n     if (!privateList.isEmpty()) {\n       privateRsrcs.addAll(privateList);\n       req.put(LocalResourceVisibility.PRIVATE, privateList);\n     }\n     if (!appList.isEmpty()) {\n       appRsrcs.addAll(appList);\n       req.put(LocalResourceVisibility.APPLICATION, appList);\n     }\n     if (!allResources.isEmpty()) {\n       this.pendingResources.putAll(allResources);\n     }\n     return req;\n   }\n\\ No newline at end of file\n",
      "actualSource": "      addResources(Map\u003cString, LocalResource\u003e localResourceMap)\n      throws URISyntaxException {\n    if (localResourceMap \u003d\u003d null || localResourceMap.isEmpty()) {\n      return null;\n    }\n    Map\u003cLocalResourceRequest, Set\u003cString\u003e\u003e allResources \u003d new HashMap\u003c\u003e();\n    List\u003cLocalResourceRequest\u003e publicList \u003d new ArrayList\u003c\u003e();\n    List\u003cLocalResourceRequest\u003e privateList \u003d new ArrayList\u003c\u003e();\n    List\u003cLocalResourceRequest\u003e appList \u003d new ArrayList\u003c\u003e();\n\n    for (Map.Entry\u003cString, LocalResource\u003e rsrc : localResourceMap.entrySet()) {\n      LocalResource resource \u003d rsrc.getValue();\n      LocalResourceRequest req \u003d new LocalResourceRequest(rsrc.getValue());\n      allResources.putIfAbsent(req, new HashSet\u003c\u003e());\n      allResources.get(req).add(rsrc.getKey());\n      storeSharedCacheUploadPolicy(req,\n          resource.getShouldBeUploadedToSharedCache());\n      switch (resource.getVisibility()) {\n      case PUBLIC:\n        publicList.add(req);\n        break;\n      case PRIVATE:\n        privateList.add(req);\n        break;\n      case APPLICATION:\n        appList.add(req);\n        break;\n      default:\n        break;\n      }\n    }\n    Map\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e req \u003d\n        new LinkedHashMap\u003c\u003e();\n    if (!publicList.isEmpty()) {\n      publicRsrcs.addAll(publicList);\n      req.put(LocalResourceVisibility.PUBLIC, publicList);\n    }\n    if (!privateList.isEmpty()) {\n      privateRsrcs.addAll(privateList);\n      req.put(LocalResourceVisibility.PRIVATE, privateList);\n    }\n    if (!appList.isEmpty()) {\n      appRsrcs.addAll(appList);\n      req.put(LocalResourceVisibility.APPLICATION, appList);\n    }\n    if (!allResources.isEmpty()) {\n      this.pendingResources.putAll(allResources);\n    }\n    return req;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceSet.java",
      "extendedDetails": {}
    },
    "e6fcfe28e304062c7d09231db757acb2953703ce": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5576. Allow resource localization while container is running. Contributed by Jian He.\n",
      "commitDate": "06/09/16 7:31 AM",
      "commitName": "e6fcfe28e304062c7d09231db757acb2953703ce",
      "commitAuthor": "Varun Vasudev",
      "diff": "@@ -0,0 +1,50 @@\n+      addResources(Map\u003cString, LocalResource\u003e localResourceMap)\n+      throws URISyntaxException {\n+    if (localResourceMap \u003d\u003d null || localResourceMap.isEmpty()) {\n+      return null;\n+    }\n+    Map\u003cLocalResourceRequest, List\u003cString\u003e\u003e allResources \u003d new HashMap\u003c\u003e();\n+    List\u003cLocalResourceRequest\u003e publicList \u003d new ArrayList\u003c\u003e();\n+    List\u003cLocalResourceRequest\u003e privateList \u003d new ArrayList\u003c\u003e();\n+    List\u003cLocalResourceRequest\u003e appList \u003d new ArrayList\u003c\u003e();\n+\n+    for (Map.Entry\u003cString, LocalResource\u003e rsrc : localResourceMap.entrySet()) {\n+      LocalResource resource \u003d rsrc.getValue();\n+      LocalResourceRequest req \u003d new LocalResourceRequest(rsrc.getValue());\n+      allResources.putIfAbsent(req, new ArrayList\u003c\u003e());\n+      allResources.get(req).add(rsrc.getKey());\n+      storeSharedCacheUploadPolicy(req,\n+          resource.getShouldBeUploadedToSharedCache());\n+      switch (resource.getVisibility()) {\n+      case PUBLIC:\n+        publicList.add(req);\n+        break;\n+      case PRIVATE:\n+        privateList.add(req);\n+        break;\n+      case APPLICATION:\n+        appList.add(req);\n+        break;\n+      default:\n+        break;\n+      }\n+    }\n+    Map\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e req \u003d\n+        new LinkedHashMap\u003c\u003e();\n+    if (!publicList.isEmpty()) {\n+      publicRsrcs.addAll(publicList);\n+      req.put(LocalResourceVisibility.PUBLIC, publicList);\n+    }\n+    if (!privateList.isEmpty()) {\n+      privateRsrcs.addAll(privateList);\n+      req.put(LocalResourceVisibility.PRIVATE, privateList);\n+    }\n+    if (!appList.isEmpty()) {\n+      appRsrcs.addAll(appList);\n+      req.put(LocalResourceVisibility.APPLICATION, appList);\n+    }\n+    if (!allResources.isEmpty()) {\n+      this.pendingResources.putAll(allResources);\n+    }\n+    return req;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "      addResources(Map\u003cString, LocalResource\u003e localResourceMap)\n      throws URISyntaxException {\n    if (localResourceMap \u003d\u003d null || localResourceMap.isEmpty()) {\n      return null;\n    }\n    Map\u003cLocalResourceRequest, List\u003cString\u003e\u003e allResources \u003d new HashMap\u003c\u003e();\n    List\u003cLocalResourceRequest\u003e publicList \u003d new ArrayList\u003c\u003e();\n    List\u003cLocalResourceRequest\u003e privateList \u003d new ArrayList\u003c\u003e();\n    List\u003cLocalResourceRequest\u003e appList \u003d new ArrayList\u003c\u003e();\n\n    for (Map.Entry\u003cString, LocalResource\u003e rsrc : localResourceMap.entrySet()) {\n      LocalResource resource \u003d rsrc.getValue();\n      LocalResourceRequest req \u003d new LocalResourceRequest(rsrc.getValue());\n      allResources.putIfAbsent(req, new ArrayList\u003c\u003e());\n      allResources.get(req).add(rsrc.getKey());\n      storeSharedCacheUploadPolicy(req,\n          resource.getShouldBeUploadedToSharedCache());\n      switch (resource.getVisibility()) {\n      case PUBLIC:\n        publicList.add(req);\n        break;\n      case PRIVATE:\n        privateList.add(req);\n        break;\n      case APPLICATION:\n        appList.add(req);\n        break;\n      default:\n        break;\n      }\n    }\n    Map\u003cLocalResourceVisibility, Collection\u003cLocalResourceRequest\u003e\u003e req \u003d\n        new LinkedHashMap\u003c\u003e();\n    if (!publicList.isEmpty()) {\n      publicRsrcs.addAll(publicList);\n      req.put(LocalResourceVisibility.PUBLIC, publicList);\n    }\n    if (!privateList.isEmpty()) {\n      privateRsrcs.addAll(privateList);\n      req.put(LocalResourceVisibility.PRIVATE, privateList);\n    }\n    if (!appList.isEmpty()) {\n      appRsrcs.addAll(appList);\n      req.put(LocalResourceVisibility.APPLICATION, appList);\n    }\n    if (!allResources.isEmpty()) {\n      this.pendingResources.putAll(allResources);\n    }\n    return req;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceSet.java"
    }
  }
}