{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CapacityScheduler.java",
  "functionName": "createResourceCommitRequest",
  "functionId": "createResourceCommitRequest___csAssignment-CSAssignment",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
  "functionStartLine": 2939,
  "functionEndLine": 3027,
  "numCommitsSeen": 239,
  "timeTaken": 7173,
  "changeHistory": [
    "951c98f89059d64fda8456366f680eff4a7a6785",
    "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c"
  ],
  "changeHistoryShort": {
    "951c98f89059d64fda8456366f680eff4a7a6785": "Ybodychange",
    "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4": "Ybodychange",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "951c98f89059d64fda8456366f680eff4a7a6785": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8233. NPE in CapacityScheduler#tryCommit when handling allocate/reserve proposal whose allocatedOrReservedContainer is null. Contributed by Tao Yang.\n",
      "commitDate": "06/11/18 6:17 PM",
      "commitName": "951c98f89059d64fda8456366f680eff4a7a6785",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "05/11/18 10:50 PM",
      "commitNameOld": "5d6554c722f08f79bce904e021243605ee75bae3",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 0.81,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,73 +1,89 @@\n       createResourceCommitRequest(CSAssignment csAssignment) {\n     ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e allocated \u003d\n         null;\n     ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e reserved \u003d\n         null;\n     List\u003cSchedulerContainer\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\u003e released \u003d\n         null;\n \n     if (Resources.greaterThan(calculator, getClusterResource(),\n         csAssignment.getResource(), Resources.none())) {\n       // Allocated something\n       List\u003cAssignmentInformation.AssignmentDetails\u003e allocations \u003d\n           csAssignment.getAssignmentInformation().getAllocationDetails();\n       if (!allocations.isEmpty()) {\n         RMContainer rmContainer \u003d allocations.get(0).rmContainer;\n-        allocated \u003d new ContainerAllocationProposal\u003c\u003e(\n-            getSchedulerContainer(rmContainer, true),\n-            getSchedulerContainersToRelease(csAssignment),\n-            getSchedulerContainer(csAssignment.getFulfilledReservedContainer(),\n-                false), csAssignment.getType(),\n-            csAssignment.getRequestLocalityType(),\n-            csAssignment.getSchedulingMode() !\u003d null ?\n-                csAssignment.getSchedulingMode() :\n-                SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY,\n-            csAssignment.getResource());\n+        SchedulerContainer\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\n+            schedulerContainer \u003d getSchedulerContainer(rmContainer, true);\n+        if (schedulerContainer \u003d\u003d null) {\n+          allocated \u003d null;\n+          // Decrease unconfirmed resource if app is alive\n+          FiCaSchedulerApp app \u003d getApplicationAttempt(\n+              rmContainer.getApplicationAttemptId());\n+          if (app !\u003d null) {\n+            app.decUnconfirmedRes(rmContainer.getAllocatedResource());\n+          }\n+        } else {\n+          allocated \u003d new ContainerAllocationProposal\u003c\u003e(schedulerContainer,\n+              getSchedulerContainersToRelease(csAssignment),\n+              getSchedulerContainer(\n+                  csAssignment.getFulfilledReservedContainer(), false),\n+              csAssignment.getType(), csAssignment.getRequestLocalityType(),\n+              csAssignment.getSchedulingMode() !\u003d null ?\n+                  csAssignment.getSchedulingMode() :\n+                  SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY,\n+              csAssignment.getResource());\n+        }\n       }\n \n       // Reserved something\n       List\u003cAssignmentInformation.AssignmentDetails\u003e reservation \u003d\n           csAssignment.getAssignmentInformation().getReservationDetails();\n       if (!reservation.isEmpty()) {\n         RMContainer rmContainer \u003d reservation.get(0).rmContainer;\n-        reserved \u003d new ContainerAllocationProposal\u003c\u003e(\n-            getSchedulerContainer(rmContainer, false),\n-            getSchedulerContainersToRelease(csAssignment),\n-            getSchedulerContainer(csAssignment.getFulfilledReservedContainer(),\n-                false), csAssignment.getType(),\n-            csAssignment.getRequestLocalityType(),\n-            csAssignment.getSchedulingMode() !\u003d null ?\n-                csAssignment.getSchedulingMode() :\n-                SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY,\n-            csAssignment.getResource());\n+        SchedulerContainer\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\n+            schedulerContainer \u003d getSchedulerContainer(rmContainer, false);\n+        if (schedulerContainer \u003d\u003d null) {\n+          reserved \u003d null;\n+        } else {\n+          reserved \u003d new ContainerAllocationProposal\u003c\u003e(schedulerContainer,\n+              getSchedulerContainersToRelease(csAssignment),\n+              getSchedulerContainer(\n+                  csAssignment.getFulfilledReservedContainer(), false),\n+              csAssignment.getType(), csAssignment.getRequestLocalityType(),\n+              csAssignment.getSchedulingMode() !\u003d null ?\n+                  csAssignment.getSchedulingMode() :\n+                  SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY,\n+              csAssignment.getResource());\n+        }\n       }\n     }\n \n     // When we don\u0027t need to allocate/reserve anything, we can feel free to\n     // kill all to-release containers in the request.\n     if (null \u003d\u003d allocated \u0026\u0026 null \u003d\u003d reserved) {\n       released \u003d getSchedulerContainersToRelease(csAssignment);\n     }\n \n     if (null !\u003d allocated || null !\u003d reserved || (null !\u003d released \u0026\u0026 !released\n         .isEmpty())) {\n       List\u003cContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\u003e\n           allocationsList \u003d null;\n       if (allocated !\u003d null) {\n         allocationsList \u003d new ArrayList\u003c\u003e();\n         allocationsList.add(allocated);\n       }\n \n       List\u003cContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\u003e\n           reservationsList \u003d null;\n       if (reserved !\u003d null) {\n         reservationsList \u003d new ArrayList\u003c\u003e();\n         reservationsList.add(reserved);\n       }\n \n       return new ResourceCommitRequest\u003c\u003e(allocationsList, reservationsList,\n           released);\n     }\n \n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "      createResourceCommitRequest(CSAssignment csAssignment) {\n    ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e allocated \u003d\n        null;\n    ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e reserved \u003d\n        null;\n    List\u003cSchedulerContainer\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\u003e released \u003d\n        null;\n\n    if (Resources.greaterThan(calculator, getClusterResource(),\n        csAssignment.getResource(), Resources.none())) {\n      // Allocated something\n      List\u003cAssignmentInformation.AssignmentDetails\u003e allocations \u003d\n          csAssignment.getAssignmentInformation().getAllocationDetails();\n      if (!allocations.isEmpty()) {\n        RMContainer rmContainer \u003d allocations.get(0).rmContainer;\n        SchedulerContainer\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\n            schedulerContainer \u003d getSchedulerContainer(rmContainer, true);\n        if (schedulerContainer \u003d\u003d null) {\n          allocated \u003d null;\n          // Decrease unconfirmed resource if app is alive\n          FiCaSchedulerApp app \u003d getApplicationAttempt(\n              rmContainer.getApplicationAttemptId());\n          if (app !\u003d null) {\n            app.decUnconfirmedRes(rmContainer.getAllocatedResource());\n          }\n        } else {\n          allocated \u003d new ContainerAllocationProposal\u003c\u003e(schedulerContainer,\n              getSchedulerContainersToRelease(csAssignment),\n              getSchedulerContainer(\n                  csAssignment.getFulfilledReservedContainer(), false),\n              csAssignment.getType(), csAssignment.getRequestLocalityType(),\n              csAssignment.getSchedulingMode() !\u003d null ?\n                  csAssignment.getSchedulingMode() :\n                  SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY,\n              csAssignment.getResource());\n        }\n      }\n\n      // Reserved something\n      List\u003cAssignmentInformation.AssignmentDetails\u003e reservation \u003d\n          csAssignment.getAssignmentInformation().getReservationDetails();\n      if (!reservation.isEmpty()) {\n        RMContainer rmContainer \u003d reservation.get(0).rmContainer;\n        SchedulerContainer\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\n            schedulerContainer \u003d getSchedulerContainer(rmContainer, false);\n        if (schedulerContainer \u003d\u003d null) {\n          reserved \u003d null;\n        } else {\n          reserved \u003d new ContainerAllocationProposal\u003c\u003e(schedulerContainer,\n              getSchedulerContainersToRelease(csAssignment),\n              getSchedulerContainer(\n                  csAssignment.getFulfilledReservedContainer(), false),\n              csAssignment.getType(), csAssignment.getRequestLocalityType(),\n              csAssignment.getSchedulingMode() !\u003d null ?\n                  csAssignment.getSchedulingMode() :\n                  SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY,\n              csAssignment.getResource());\n        }\n      }\n    }\n\n    // When we don\u0027t need to allocate/reserve anything, we can feel free to\n    // kill all to-release containers in the request.\n    if (null \u003d\u003d allocated \u0026\u0026 null \u003d\u003d reserved) {\n      released \u003d getSchedulerContainersToRelease(csAssignment);\n    }\n\n    if (null !\u003d allocated || null !\u003d reserved || (null !\u003d released \u0026\u0026 !released\n        .isEmpty())) {\n      List\u003cContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\u003e\n          allocationsList \u003d null;\n      if (allocated !\u003d null) {\n        allocationsList \u003d new ArrayList\u003c\u003e();\n        allocationsList.add(allocated);\n      }\n\n      List\u003cContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\u003e\n          reservationsList \u003d null;\n      if (reserved !\u003d null) {\n        reservationsList \u003d new ArrayList\u003c\u003e();\n        reservationsList.add(reserved);\n      }\n\n      return new ResourceCommitRequest\u003c\u003e(allocationsList, reservationsList,\n          released);\n    }\n\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6216. Unify Container Resizing code paths with Container Updates making it scheduler agnostic. (Arun Suresh via wangda)\n",
      "commitDate": "28/02/17 10:35 AM",
      "commitName": "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "09/02/17 10:23 AM",
      "commitNameOld": "5fb723bb77722d41df6959eee23e1b0cfeb5584e",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 19.01,
      "commitsBetweenForRepo": 112,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,73 +1,73 @@\n       createResourceCommitRequest(CSAssignment csAssignment) {\n     ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e allocated \u003d\n         null;\n     ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e reserved \u003d\n         null;\n     List\u003cSchedulerContainer\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\u003e released \u003d\n         null;\n \n     if (Resources.greaterThan(calculator, getClusterResource(),\n         csAssignment.getResource(), Resources.none())) {\n       // Allocated something\n       List\u003cAssignmentInformation.AssignmentDetails\u003e allocations \u003d\n           csAssignment.getAssignmentInformation().getAllocationDetails();\n       if (!allocations.isEmpty()) {\n         RMContainer rmContainer \u003d allocations.get(0).rmContainer;\n         allocated \u003d new ContainerAllocationProposal\u003c\u003e(\n             getSchedulerContainer(rmContainer, true),\n             getSchedulerContainersToRelease(csAssignment),\n             getSchedulerContainer(csAssignment.getFulfilledReservedContainer(),\n-                false), csAssignment.isIncreasedAllocation(),\n-            csAssignment.getType(), csAssignment.getRequestLocalityType(),\n+                false), csAssignment.getType(),\n+            csAssignment.getRequestLocalityType(),\n             csAssignment.getSchedulingMode() !\u003d null ?\n                 csAssignment.getSchedulingMode() :\n                 SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY,\n             csAssignment.getResource());\n       }\n \n       // Reserved something\n       List\u003cAssignmentInformation.AssignmentDetails\u003e reservation \u003d\n           csAssignment.getAssignmentInformation().getReservationDetails();\n       if (!reservation.isEmpty()) {\n         RMContainer rmContainer \u003d reservation.get(0).rmContainer;\n         reserved \u003d new ContainerAllocationProposal\u003c\u003e(\n             getSchedulerContainer(rmContainer, false),\n             getSchedulerContainersToRelease(csAssignment),\n             getSchedulerContainer(csAssignment.getFulfilledReservedContainer(),\n-                false), csAssignment.isIncreasedAllocation(),\n-            csAssignment.getType(), csAssignment.getRequestLocalityType(),\n+                false), csAssignment.getType(),\n+            csAssignment.getRequestLocalityType(),\n             csAssignment.getSchedulingMode() !\u003d null ?\n                 csAssignment.getSchedulingMode() :\n                 SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY,\n             csAssignment.getResource());\n       }\n     }\n \n     // When we don\u0027t need to allocate/reserve anything, we can feel free to\n     // kill all to-release containers in the request.\n     if (null \u003d\u003d allocated \u0026\u0026 null \u003d\u003d reserved) {\n       released \u003d getSchedulerContainersToRelease(csAssignment);\n     }\n \n     if (null !\u003d allocated || null !\u003d reserved || (null !\u003d released \u0026\u0026 !released\n         .isEmpty())) {\n       List\u003cContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\u003e\n           allocationsList \u003d null;\n       if (allocated !\u003d null) {\n         allocationsList \u003d new ArrayList\u003c\u003e();\n         allocationsList.add(allocated);\n       }\n \n       List\u003cContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\u003e\n           reservationsList \u003d null;\n       if (reserved !\u003d null) {\n         reservationsList \u003d new ArrayList\u003c\u003e();\n         reservationsList.add(reserved);\n       }\n \n       return new ResourceCommitRequest\u003c\u003e(allocationsList, reservationsList,\n           released);\n     }\n \n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "      createResourceCommitRequest(CSAssignment csAssignment) {\n    ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e allocated \u003d\n        null;\n    ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e reserved \u003d\n        null;\n    List\u003cSchedulerContainer\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\u003e released \u003d\n        null;\n\n    if (Resources.greaterThan(calculator, getClusterResource(),\n        csAssignment.getResource(), Resources.none())) {\n      // Allocated something\n      List\u003cAssignmentInformation.AssignmentDetails\u003e allocations \u003d\n          csAssignment.getAssignmentInformation().getAllocationDetails();\n      if (!allocations.isEmpty()) {\n        RMContainer rmContainer \u003d allocations.get(0).rmContainer;\n        allocated \u003d new ContainerAllocationProposal\u003c\u003e(\n            getSchedulerContainer(rmContainer, true),\n            getSchedulerContainersToRelease(csAssignment),\n            getSchedulerContainer(csAssignment.getFulfilledReservedContainer(),\n                false), csAssignment.getType(),\n            csAssignment.getRequestLocalityType(),\n            csAssignment.getSchedulingMode() !\u003d null ?\n                csAssignment.getSchedulingMode() :\n                SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY,\n            csAssignment.getResource());\n      }\n\n      // Reserved something\n      List\u003cAssignmentInformation.AssignmentDetails\u003e reservation \u003d\n          csAssignment.getAssignmentInformation().getReservationDetails();\n      if (!reservation.isEmpty()) {\n        RMContainer rmContainer \u003d reservation.get(0).rmContainer;\n        reserved \u003d new ContainerAllocationProposal\u003c\u003e(\n            getSchedulerContainer(rmContainer, false),\n            getSchedulerContainersToRelease(csAssignment),\n            getSchedulerContainer(csAssignment.getFulfilledReservedContainer(),\n                false), csAssignment.getType(),\n            csAssignment.getRequestLocalityType(),\n            csAssignment.getSchedulingMode() !\u003d null ?\n                csAssignment.getSchedulingMode() :\n                SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY,\n            csAssignment.getResource());\n      }\n    }\n\n    // When we don\u0027t need to allocate/reserve anything, we can feel free to\n    // kill all to-release containers in the request.\n    if (null \u003d\u003d allocated \u0026\u0026 null \u003d\u003d reserved) {\n      released \u003d getSchedulerContainersToRelease(csAssignment);\n    }\n\n    if (null !\u003d allocated || null !\u003d reserved || (null !\u003d released \u0026\u0026 !released\n        .isEmpty())) {\n      List\u003cContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\u003e\n          allocationsList \u003d null;\n      if (allocated !\u003d null) {\n        allocationsList \u003d new ArrayList\u003c\u003e();\n        allocationsList.add(allocated);\n      }\n\n      List\u003cContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\u003e\n          reservationsList \u003d null;\n      if (reserved !\u003d null) {\n        reservationsList \u003d new ArrayList\u003c\u003e();\n        reservationsList.add(reserved);\n      }\n\n      return new ResourceCommitRequest\u003c\u003e(allocationsList, reservationsList,\n          released);\n    }\n\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5716. Add global scheduler interface definition and update CapacityScheduler to use it. Contributed by Wangda Tan\n",
      "commitDate": "07/11/16 10:14 AM",
      "commitName": "de3b4aac561258ad242a3c5ed1c919428893fd4c",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,73 @@\n+      createResourceCommitRequest(CSAssignment csAssignment) {\n+    ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e allocated \u003d\n+        null;\n+    ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e reserved \u003d\n+        null;\n+    List\u003cSchedulerContainer\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\u003e released \u003d\n+        null;\n+\n+    if (Resources.greaterThan(calculator, getClusterResource(),\n+        csAssignment.getResource(), Resources.none())) {\n+      // Allocated something\n+      List\u003cAssignmentInformation.AssignmentDetails\u003e allocations \u003d\n+          csAssignment.getAssignmentInformation().getAllocationDetails();\n+      if (!allocations.isEmpty()) {\n+        RMContainer rmContainer \u003d allocations.get(0).rmContainer;\n+        allocated \u003d new ContainerAllocationProposal\u003c\u003e(\n+            getSchedulerContainer(rmContainer, true),\n+            getSchedulerContainersToRelease(csAssignment),\n+            getSchedulerContainer(csAssignment.getFulfilledReservedContainer(),\n+                false), csAssignment.isIncreasedAllocation(),\n+            csAssignment.getType(), csAssignment.getRequestLocalityType(),\n+            csAssignment.getSchedulingMode() !\u003d null ?\n+                csAssignment.getSchedulingMode() :\n+                SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY,\n+            csAssignment.getResource());\n+      }\n+\n+      // Reserved something\n+      List\u003cAssignmentInformation.AssignmentDetails\u003e reservation \u003d\n+          csAssignment.getAssignmentInformation().getReservationDetails();\n+      if (!reservation.isEmpty()) {\n+        RMContainer rmContainer \u003d reservation.get(0).rmContainer;\n+        reserved \u003d new ContainerAllocationProposal\u003c\u003e(\n+            getSchedulerContainer(rmContainer, false),\n+            getSchedulerContainersToRelease(csAssignment),\n+            getSchedulerContainer(csAssignment.getFulfilledReservedContainer(),\n+                false), csAssignment.isIncreasedAllocation(),\n+            csAssignment.getType(), csAssignment.getRequestLocalityType(),\n+            csAssignment.getSchedulingMode() !\u003d null ?\n+                csAssignment.getSchedulingMode() :\n+                SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY,\n+            csAssignment.getResource());\n+      }\n+    }\n+\n+    // When we don\u0027t need to allocate/reserve anything, we can feel free to\n+    // kill all to-release containers in the request.\n+    if (null \u003d\u003d allocated \u0026\u0026 null \u003d\u003d reserved) {\n+      released \u003d getSchedulerContainersToRelease(csAssignment);\n+    }\n+\n+    if (null !\u003d allocated || null !\u003d reserved || (null !\u003d released \u0026\u0026 !released\n+        .isEmpty())) {\n+      List\u003cContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\u003e\n+          allocationsList \u003d null;\n+      if (allocated !\u003d null) {\n+        allocationsList \u003d new ArrayList\u003c\u003e();\n+        allocationsList.add(allocated);\n+      }\n+\n+      List\u003cContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\u003e\n+          reservationsList \u003d null;\n+      if (reserved !\u003d null) {\n+        reservationsList \u003d new ArrayList\u003c\u003e();\n+        reservationsList.add(reserved);\n+      }\n+\n+      return new ResourceCommitRequest\u003c\u003e(allocationsList, reservationsList,\n+          released);\n+    }\n+\n+    return null;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "      createResourceCommitRequest(CSAssignment csAssignment) {\n    ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e allocated \u003d\n        null;\n    ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e reserved \u003d\n        null;\n    List\u003cSchedulerContainer\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\u003e released \u003d\n        null;\n\n    if (Resources.greaterThan(calculator, getClusterResource(),\n        csAssignment.getResource(), Resources.none())) {\n      // Allocated something\n      List\u003cAssignmentInformation.AssignmentDetails\u003e allocations \u003d\n          csAssignment.getAssignmentInformation().getAllocationDetails();\n      if (!allocations.isEmpty()) {\n        RMContainer rmContainer \u003d allocations.get(0).rmContainer;\n        allocated \u003d new ContainerAllocationProposal\u003c\u003e(\n            getSchedulerContainer(rmContainer, true),\n            getSchedulerContainersToRelease(csAssignment),\n            getSchedulerContainer(csAssignment.getFulfilledReservedContainer(),\n                false), csAssignment.isIncreasedAllocation(),\n            csAssignment.getType(), csAssignment.getRequestLocalityType(),\n            csAssignment.getSchedulingMode() !\u003d null ?\n                csAssignment.getSchedulingMode() :\n                SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY,\n            csAssignment.getResource());\n      }\n\n      // Reserved something\n      List\u003cAssignmentInformation.AssignmentDetails\u003e reservation \u003d\n          csAssignment.getAssignmentInformation().getReservationDetails();\n      if (!reservation.isEmpty()) {\n        RMContainer rmContainer \u003d reservation.get(0).rmContainer;\n        reserved \u003d new ContainerAllocationProposal\u003c\u003e(\n            getSchedulerContainer(rmContainer, false),\n            getSchedulerContainersToRelease(csAssignment),\n            getSchedulerContainer(csAssignment.getFulfilledReservedContainer(),\n                false), csAssignment.isIncreasedAllocation(),\n            csAssignment.getType(), csAssignment.getRequestLocalityType(),\n            csAssignment.getSchedulingMode() !\u003d null ?\n                csAssignment.getSchedulingMode() :\n                SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY,\n            csAssignment.getResource());\n      }\n    }\n\n    // When we don\u0027t need to allocate/reserve anything, we can feel free to\n    // kill all to-release containers in the request.\n    if (null \u003d\u003d allocated \u0026\u0026 null \u003d\u003d reserved) {\n      released \u003d getSchedulerContainersToRelease(csAssignment);\n    }\n\n    if (null !\u003d allocated || null !\u003d reserved || (null !\u003d released \u0026\u0026 !released\n        .isEmpty())) {\n      List\u003cContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\u003e\n          allocationsList \u003d null;\n      if (allocated !\u003d null) {\n        allocationsList \u003d new ArrayList\u003c\u003e();\n        allocationsList.add(allocated);\n      }\n\n      List\u003cContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\u003e\n          reservationsList \u003d null;\n      if (reserved !\u003d null) {\n        reservationsList \u003d new ArrayList\u003c\u003e();\n        reservationsList.add(reserved);\n      }\n\n      return new ResourceCommitRequest\u003c\u003e(allocationsList, reservationsList,\n          released);\n    }\n\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java"
    }
  }
}