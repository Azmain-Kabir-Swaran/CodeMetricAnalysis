{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AggregatedLogFormat.java",
  "functionName": "initialize",
  "functionId": "initialize___conf-Configuration(modifiers-final)__remoteAppLogFile-Path(modifiers-final)__userUgi-UserGroupInformation",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/AggregatedLogFormat.java",
  "functionStartLine": 469,
  "functionEndLine": 497,
  "numCommitsSeen": 47,
  "timeTaken": 1621,
  "changeHistory": [
    "498e3bfb6b93bf542e5581d83e64e920983fe87e",
    "1b081ca27e05e97d8b7d284ca24200d43763e481"
  ],
  "changeHistoryShort": {
    "498e3bfb6b93bf542e5581d83e64e920983fe87e": "Ybodychange",
    "1b081ca27e05e97d8b7d284ca24200d43763e481": "Yintroduced"
  },
  "changeHistoryDetails": {
    "498e3bfb6b93bf542e5581d83e64e920983fe87e": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15571. Multiple FileContexts created with the same configuration object should be allowed to have different umask. Contributed by Vinod Kumar Vavilapalli.\n",
      "commitDate": "06/07/18 11:56 AM",
      "commitName": "498e3bfb6b93bf542e5581d83e64e920983fe87e",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "22/05/18 2:24 PM",
      "commitNameOld": "b22f56c4719e63bd4f6edc2a075e0bcdb9442255",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 44.9,
      "commitsBetweenForRepo": 299,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,29 @@\n     public void initialize(final Configuration conf,\n                            final Path remoteAppLogFile,\n                            UserGroupInformation userUgi) throws IOException {\n       try {\n         this.fsDataOStream \u003d\n             userUgi.doAs(new PrivilegedExceptionAction\u003cFSDataOutputStream\u003e() {\n               @Override\n               public FSDataOutputStream run() throws Exception {\n                 fc \u003d FileContext.getFileContext(remoteAppLogFile.toUri(), conf);\n+                fc.setUMask(APP_LOG_FILE_UMASK);\n                 return fc.create(\n                     remoteAppLogFile,\n                     EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE),\n-                    Options.CreateOpts.perms(APP_LOG_FILE_PERM));\n+                    new Options.CreateOpts[] {});\n               }\n             });\n       } catch (InterruptedException e) {\n         throw new IOException(e);\n       }\n \n       // Keys are not sorted: null arg\n       // 256KB minBlockSize : Expected log size for each container too\n       this.writer \u003d\n           new TFile.Writer(this.fsDataOStream, 256 * 1024, conf.get(\n               YarnConfiguration.NM_LOG_AGG_COMPRESSION_TYPE,\n               YarnConfiguration.DEFAULT_NM_LOG_AGG_COMPRESSION_TYPE), null, conf);\n       //Write the version string\n       writeVersion();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void initialize(final Configuration conf,\n                           final Path remoteAppLogFile,\n                           UserGroupInformation userUgi) throws IOException {\n      try {\n        this.fsDataOStream \u003d\n            userUgi.doAs(new PrivilegedExceptionAction\u003cFSDataOutputStream\u003e() {\n              @Override\n              public FSDataOutputStream run() throws Exception {\n                fc \u003d FileContext.getFileContext(remoteAppLogFile.toUri(), conf);\n                fc.setUMask(APP_LOG_FILE_UMASK);\n                return fc.create(\n                    remoteAppLogFile,\n                    EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE),\n                    new Options.CreateOpts[] {});\n              }\n            });\n      } catch (InterruptedException e) {\n        throw new IOException(e);\n      }\n\n      // Keys are not sorted: null arg\n      // 256KB minBlockSize : Expected log size for each container too\n      this.writer \u003d\n          new TFile.Writer(this.fsDataOStream, 256 * 1024, conf.get(\n              YarnConfiguration.NM_LOG_AGG_COMPRESSION_TYPE,\n              YarnConfiguration.DEFAULT_NM_LOG_AGG_COMPRESSION_TYPE), null, conf);\n      //Write the version string\n      writeVersion();\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/AggregatedLogFormat.java",
      "extendedDetails": {}
    },
    "1b081ca27e05e97d8b7d284ca24200d43763e481": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6288. Exceptions during aggregated log writes are mishandled. Contributed by Akira Ajisaka\n",
      "commitDate": "06/04/17 2:24 PM",
      "commitName": "1b081ca27e05e97d8b7d284ca24200d43763e481",
      "commitAuthor": "Jason Lowe",
      "diff": "@@ -0,0 +1,28 @@\n+    public void initialize(final Configuration conf,\n+                           final Path remoteAppLogFile,\n+                           UserGroupInformation userUgi) throws IOException {\n+      try {\n+        this.fsDataOStream \u003d\n+            userUgi.doAs(new PrivilegedExceptionAction\u003cFSDataOutputStream\u003e() {\n+              @Override\n+              public FSDataOutputStream run() throws Exception {\n+                fc \u003d FileContext.getFileContext(remoteAppLogFile.toUri(), conf);\n+                return fc.create(\n+                    remoteAppLogFile,\n+                    EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE),\n+                    Options.CreateOpts.perms(APP_LOG_FILE_PERM));\n+              }\n+            });\n+      } catch (InterruptedException e) {\n+        throw new IOException(e);\n+      }\n+\n+      // Keys are not sorted: null arg\n+      // 256KB minBlockSize : Expected log size for each container too\n+      this.writer \u003d\n+          new TFile.Writer(this.fsDataOStream, 256 * 1024, conf.get(\n+              YarnConfiguration.NM_LOG_AGG_COMPRESSION_TYPE,\n+              YarnConfiguration.DEFAULT_NM_LOG_AGG_COMPRESSION_TYPE), null, conf);\n+      //Write the version string\n+      writeVersion();\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void initialize(final Configuration conf,\n                           final Path remoteAppLogFile,\n                           UserGroupInformation userUgi) throws IOException {\n      try {\n        this.fsDataOStream \u003d\n            userUgi.doAs(new PrivilegedExceptionAction\u003cFSDataOutputStream\u003e() {\n              @Override\n              public FSDataOutputStream run() throws Exception {\n                fc \u003d FileContext.getFileContext(remoteAppLogFile.toUri(), conf);\n                return fc.create(\n                    remoteAppLogFile,\n                    EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE),\n                    Options.CreateOpts.perms(APP_LOG_FILE_PERM));\n              }\n            });\n      } catch (InterruptedException e) {\n        throw new IOException(e);\n      }\n\n      // Keys are not sorted: null arg\n      // 256KB minBlockSize : Expected log size for each container too\n      this.writer \u003d\n          new TFile.Writer(this.fsDataOStream, 256 * 1024, conf.get(\n              YarnConfiguration.NM_LOG_AGG_COMPRESSION_TYPE,\n              YarnConfiguration.DEFAULT_NM_LOG_AGG_COMPRESSION_TYPE), null, conf);\n      //Write the version string\n      writeVersion();\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/AggregatedLogFormat.java"
    }
  }
}