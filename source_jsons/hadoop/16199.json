{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RouterRpcClient.java",
  "functionName": "invokeSequential",
  "functionId": "invokeSequential___locations-List__? extends RemoteLocationContext__(modifiers-final)__remoteMethod-RemoteMethod(modifiers-final)__expectedResultClass-Class__T____expectedResultValue-Object",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcClient.java",
  "functionStartLine": 848,
  "functionEndLine": 913,
  "numCommitsSeen": 34,
  "timeTaken": 4511,
  "changeHistory": [
    "263413e83840c7795a988e3939cd292d020c8d5f",
    "0c93d43f3d624a4fd17b3b050443d9e7e20d4f0a",
    "2be64eb201134502a92f7239bef8aa780771ca0b",
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
    "d5d6a0353bb85b882cc4ef60e3a12d63243d34ba",
    "ca4f209b49e3aad6a80306f7342c9b6b560a79a7"
  ],
  "changeHistoryShort": {
    "263413e83840c7795a988e3939cd292d020c8d5f": "Ybodychange",
    "0c93d43f3d624a4fd17b3b050443d9e7e20d4f0a": "Ybodychange",
    "2be64eb201134502a92f7239bef8aa780771ca0b": "Ybodychange",
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": "Yfilerename",
    "d5d6a0353bb85b882cc4ef60e3a12d63243d34ba": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
    "ca4f209b49e3aad6a80306f7342c9b6b560a79a7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "263413e83840c7795a988e3939cd292d020c8d5f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15112. RBF: Do not return FileNotFoundException when a subcluster is unavailable.\n",
      "commitDate": "16/01/20 10:39 AM",
      "commitName": "263413e83840c7795a988e3939cd292d020c8d5f",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "01/11/19 10:14 AM",
      "commitNameOld": "f18bbdd9d84cc1a23d33524f5cb61321cdb1b926",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 76.06,
      "commitsBetweenForRepo": 280,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,66 @@\n   public \u003cT\u003e T invokeSequential(\n       final List\u003c? extends RemoteLocationContext\u003e locations,\n       final RemoteMethod remoteMethod, Class\u003cT\u003e expectedResultClass,\n       Object expectedResultValue) throws IOException {\n \n     final UserGroupInformation ugi \u003d RouterRpcServer.getRemoteUser();\n     final Method m \u003d remoteMethod.getMethod();\n-    IOException firstThrownException \u003d null;\n-    IOException lastThrownException \u003d null;\n+    List\u003cIOException\u003e thrownExceptions \u003d new ArrayList\u003c\u003e();\n     Object firstResult \u003d null;\n     // Invoke in priority order\n     for (final RemoteLocationContext loc : locations) {\n       String ns \u003d loc.getNameserviceId();\n       List\u003c? extends FederationNamenodeContext\u003e namenodes \u003d\n           getNamenodesForNameservice(ns);\n       try {\n         Class\u003c?\u003e proto \u003d remoteMethod.getProtocol();\n         Object[] params \u003d remoteMethod.getParams(loc);\n         Object result \u003d invokeMethod(ugi, namenodes, proto, m, params);\n         // Check if the result is what we expected\n         if (isExpectedClass(expectedResultClass, result) \u0026\u0026\n             isExpectedValue(expectedResultValue, result)) {\n           // Valid result, stop here\n           @SuppressWarnings(\"unchecked\")\n           T ret \u003d (T)result;\n           return ret;\n         }\n         if (firstResult \u003d\u003d null) {\n           firstResult \u003d result;\n         }\n       } catch (IOException ioe) {\n         // Localize the exception\n \n         ioe \u003d processException(ioe, loc);\n \n         // Record it and move on\n-        lastThrownException \u003d  ioe;\n-        if (firstThrownException \u003d\u003d null) {\n-          firstThrownException \u003d lastThrownException;\n-        }\n+        thrownExceptions.add(ioe);\n       } catch (Exception e) {\n         // Unusual error, ClientProtocol calls always use IOException (or\n         // RemoteException). Re-wrap in IOException for compatibility with\n         // ClientProtcol.\n         LOG.error(\"Unexpected exception {} proxying {} to {}\",\n             e.getClass(), m.getName(), ns, e);\n-        lastThrownException \u003d new IOException(\n+        IOException ioe \u003d new IOException(\n             \"Unexpected exception proxying API \" + e.getMessage(), e);\n-        if (firstThrownException \u003d\u003d null) {\n-          firstThrownException \u003d lastThrownException;\n-        }\n+        thrownExceptions.add(ioe);\n       }\n     }\n \n-    if (firstThrownException !\u003d null) {\n-      // re-throw the last exception thrown for compatibility\n-      throw firstThrownException;\n+    if (!thrownExceptions.isEmpty()) {\n+      // An unavailable subcluster may be the actual cause\n+      // We cannot surface other exceptions (e.g., FileNotFoundException)\n+      for (int i \u003d 0; i \u003c thrownExceptions.size(); i++) {\n+        IOException ioe \u003d thrownExceptions.get(i);\n+        if (isUnavailableException(ioe)) {\n+          throw ioe;\n+        }\n+      }\n+\n+      // re-throw the first exception thrown for compatibility\n+      throw thrownExceptions.get(0);\n     }\n-    // Return the last result, whether it is the value we are looking for or a\n+    // Return the first result, whether it is the value or not\n     @SuppressWarnings(\"unchecked\")\n     T ret \u003d (T)firstResult;\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public \u003cT\u003e T invokeSequential(\n      final List\u003c? extends RemoteLocationContext\u003e locations,\n      final RemoteMethod remoteMethod, Class\u003cT\u003e expectedResultClass,\n      Object expectedResultValue) throws IOException {\n\n    final UserGroupInformation ugi \u003d RouterRpcServer.getRemoteUser();\n    final Method m \u003d remoteMethod.getMethod();\n    List\u003cIOException\u003e thrownExceptions \u003d new ArrayList\u003c\u003e();\n    Object firstResult \u003d null;\n    // Invoke in priority order\n    for (final RemoteLocationContext loc : locations) {\n      String ns \u003d loc.getNameserviceId();\n      List\u003c? extends FederationNamenodeContext\u003e namenodes \u003d\n          getNamenodesForNameservice(ns);\n      try {\n        Class\u003c?\u003e proto \u003d remoteMethod.getProtocol();\n        Object[] params \u003d remoteMethod.getParams(loc);\n        Object result \u003d invokeMethod(ugi, namenodes, proto, m, params);\n        // Check if the result is what we expected\n        if (isExpectedClass(expectedResultClass, result) \u0026\u0026\n            isExpectedValue(expectedResultValue, result)) {\n          // Valid result, stop here\n          @SuppressWarnings(\"unchecked\")\n          T ret \u003d (T)result;\n          return ret;\n        }\n        if (firstResult \u003d\u003d null) {\n          firstResult \u003d result;\n        }\n      } catch (IOException ioe) {\n        // Localize the exception\n\n        ioe \u003d processException(ioe, loc);\n\n        // Record it and move on\n        thrownExceptions.add(ioe);\n      } catch (Exception e) {\n        // Unusual error, ClientProtocol calls always use IOException (or\n        // RemoteException). Re-wrap in IOException for compatibility with\n        // ClientProtcol.\n        LOG.error(\"Unexpected exception {} proxying {} to {}\",\n            e.getClass(), m.getName(), ns, e);\n        IOException ioe \u003d new IOException(\n            \"Unexpected exception proxying API \" + e.getMessage(), e);\n        thrownExceptions.add(ioe);\n      }\n    }\n\n    if (!thrownExceptions.isEmpty()) {\n      // An unavailable subcluster may be the actual cause\n      // We cannot surface other exceptions (e.g., FileNotFoundException)\n      for (int i \u003d 0; i \u003c thrownExceptions.size(); i++) {\n        IOException ioe \u003d thrownExceptions.get(i);\n        if (isUnavailableException(ioe)) {\n          throw ioe;\n        }\n      }\n\n      // re-throw the first exception thrown for compatibility\n      throw thrownExceptions.get(0);\n    }\n    // Return the first result, whether it is the value or not\n    @SuppressWarnings(\"unchecked\")\n    T ret \u003d (T)firstResult;\n    return ret;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcClient.java",
      "extendedDetails": {}
    },
    "0c93d43f3d624a4fd17b3b050443d9e7e20d4f0a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13045. RBF: Improve error message returned from subcluster. Contributed by Inigo Goiri.\n",
      "commitDate": "11/04/18 8:37 AM",
      "commitName": "0c93d43f3d624a4fd17b3b050443d9e7e20d4f0a",
      "commitAuthor": "Wei Yan",
      "commitDateOld": "10/04/18 12:34 AM",
      "commitNameOld": "e87be8a2a49573897e40bfdf43541e3635e35c98",
      "commitAuthorOld": "Yiqun Lin",
      "daysBetweenCommits": 1.34,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,63 @@\n   public \u003cT\u003e T invokeSequential(\n       final List\u003c? extends RemoteLocationContext\u003e locations,\n       final RemoteMethod remoteMethod, Class\u003cT\u003e expectedResultClass,\n       Object expectedResultValue) throws IOException {\n \n     final UserGroupInformation ugi \u003d RouterRpcServer.getRemoteUser();\n     final Method m \u003d remoteMethod.getMethod();\n     IOException firstThrownException \u003d null;\n     IOException lastThrownException \u003d null;\n     Object firstResult \u003d null;\n     // Invoke in priority order\n     for (final RemoteLocationContext loc : locations) {\n       String ns \u003d loc.getNameserviceId();\n       List\u003c? extends FederationNamenodeContext\u003e namenodes \u003d\n           getNamenodesForNameservice(ns);\n       try {\n         Class\u003c?\u003e proto \u003d remoteMethod.getProtocol();\n         Object[] params \u003d remoteMethod.getParams(loc);\n         Object result \u003d invokeMethod(ugi, namenodes, proto, m, params);\n         // Check if the result is what we expected\n         if (isExpectedClass(expectedResultClass, result) \u0026\u0026\n             isExpectedValue(expectedResultValue, result)) {\n           // Valid result, stop here\n           @SuppressWarnings(\"unchecked\")\n           T ret \u003d (T)result;\n           return ret;\n         }\n         if (firstResult \u003d\u003d null) {\n           firstResult \u003d result;\n         }\n       } catch (IOException ioe) {\n+        // Localize the exception\n+\n+        ioe \u003d processException(ioe, loc);\n+\n         // Record it and move on\n-        lastThrownException \u003d (IOException) ioe;\n+        lastThrownException \u003d  ioe;\n         if (firstThrownException \u003d\u003d null) {\n           firstThrownException \u003d lastThrownException;\n         }\n       } catch (Exception e) {\n         // Unusual error, ClientProtocol calls always use IOException (or\n         // RemoteException). Re-wrap in IOException for compatibility with\n         // ClientProtcol.\n         LOG.error(\"Unexpected exception {} proxying {} to {}\",\n             e.getClass(), m.getName(), ns, e);\n         lastThrownException \u003d new IOException(\n             \"Unexpected exception proxying API \" + e.getMessage(), e);\n         if (firstThrownException \u003d\u003d null) {\n           firstThrownException \u003d lastThrownException;\n         }\n       }\n     }\n \n     if (firstThrownException !\u003d null) {\n       // re-throw the last exception thrown for compatibility\n       throw firstThrownException;\n     }\n     // Return the last result, whether it is the value we are looking for or a\n     @SuppressWarnings(\"unchecked\")\n     T ret \u003d (T)firstResult;\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public \u003cT\u003e T invokeSequential(\n      final List\u003c? extends RemoteLocationContext\u003e locations,\n      final RemoteMethod remoteMethod, Class\u003cT\u003e expectedResultClass,\n      Object expectedResultValue) throws IOException {\n\n    final UserGroupInformation ugi \u003d RouterRpcServer.getRemoteUser();\n    final Method m \u003d remoteMethod.getMethod();\n    IOException firstThrownException \u003d null;\n    IOException lastThrownException \u003d null;\n    Object firstResult \u003d null;\n    // Invoke in priority order\n    for (final RemoteLocationContext loc : locations) {\n      String ns \u003d loc.getNameserviceId();\n      List\u003c? extends FederationNamenodeContext\u003e namenodes \u003d\n          getNamenodesForNameservice(ns);\n      try {\n        Class\u003c?\u003e proto \u003d remoteMethod.getProtocol();\n        Object[] params \u003d remoteMethod.getParams(loc);\n        Object result \u003d invokeMethod(ugi, namenodes, proto, m, params);\n        // Check if the result is what we expected\n        if (isExpectedClass(expectedResultClass, result) \u0026\u0026\n            isExpectedValue(expectedResultValue, result)) {\n          // Valid result, stop here\n          @SuppressWarnings(\"unchecked\")\n          T ret \u003d (T)result;\n          return ret;\n        }\n        if (firstResult \u003d\u003d null) {\n          firstResult \u003d result;\n        }\n      } catch (IOException ioe) {\n        // Localize the exception\n\n        ioe \u003d processException(ioe, loc);\n\n        // Record it and move on\n        lastThrownException \u003d  ioe;\n        if (firstThrownException \u003d\u003d null) {\n          firstThrownException \u003d lastThrownException;\n        }\n      } catch (Exception e) {\n        // Unusual error, ClientProtocol calls always use IOException (or\n        // RemoteException). Re-wrap in IOException for compatibility with\n        // ClientProtcol.\n        LOG.error(\"Unexpected exception {} proxying {} to {}\",\n            e.getClass(), m.getName(), ns, e);\n        lastThrownException \u003d new IOException(\n            \"Unexpected exception proxying API \" + e.getMessage(), e);\n        if (firstThrownException \u003d\u003d null) {\n          firstThrownException \u003d lastThrownException;\n        }\n      }\n    }\n\n    if (firstThrownException !\u003d null) {\n      // re-throw the last exception thrown for compatibility\n      throw firstThrownException;\n    }\n    // Return the last result, whether it is the value we are looking for or a\n    @SuppressWarnings(\"unchecked\")\n    T ret \u003d (T)firstResult;\n    return ret;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcClient.java",
      "extendedDetails": {}
    },
    "2be64eb201134502a92f7239bef8aa780771ca0b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13364. RBF: Support NamenodeProtocol in the Router. Contributed by Inigo Goiri.\n",
      "commitDate": "03/04/18 12:08 AM",
      "commitName": "2be64eb201134502a92f7239bef8aa780771ca0b",
      "commitAuthor": "Yiqun Lin",
      "commitDateOld": "20/03/18 8:32 PM",
      "commitNameOld": "2caba999bbb9d6e3ec56024a0a9d3d56a229edcf",
      "commitAuthorOld": "Yiqun Lin",
      "daysBetweenCommits": 13.15,
      "commitsBetweenForRepo": 209,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,59 @@\n   public \u003cT\u003e T invokeSequential(\n       final List\u003c? extends RemoteLocationContext\u003e locations,\n       final RemoteMethod remoteMethod, Class\u003cT\u003e expectedResultClass,\n       Object expectedResultValue) throws IOException {\n \n     final UserGroupInformation ugi \u003d RouterRpcServer.getRemoteUser();\n     final Method m \u003d remoteMethod.getMethod();\n     IOException firstThrownException \u003d null;\n     IOException lastThrownException \u003d null;\n     Object firstResult \u003d null;\n     // Invoke in priority order\n     for (final RemoteLocationContext loc : locations) {\n       String ns \u003d loc.getNameserviceId();\n       List\u003c? extends FederationNamenodeContext\u003e namenodes \u003d\n           getNamenodesForNameservice(ns);\n       try {\n+        Class\u003c?\u003e proto \u003d remoteMethod.getProtocol();\n         Object[] params \u003d remoteMethod.getParams(loc);\n-        Object result \u003d invokeMethod(ugi, namenodes, m, params);\n+        Object result \u003d invokeMethod(ugi, namenodes, proto, m, params);\n         // Check if the result is what we expected\n         if (isExpectedClass(expectedResultClass, result) \u0026\u0026\n             isExpectedValue(expectedResultValue, result)) {\n           // Valid result, stop here\n           @SuppressWarnings(\"unchecked\")\n           T ret \u003d (T)result;\n           return ret;\n         }\n         if (firstResult \u003d\u003d null) {\n           firstResult \u003d result;\n         }\n       } catch (IOException ioe) {\n         // Record it and move on\n         lastThrownException \u003d (IOException) ioe;\n         if (firstThrownException \u003d\u003d null) {\n           firstThrownException \u003d lastThrownException;\n         }\n       } catch (Exception e) {\n         // Unusual error, ClientProtocol calls always use IOException (or\n         // RemoteException). Re-wrap in IOException for compatibility with\n         // ClientProtcol.\n         LOG.error(\"Unexpected exception {} proxying {} to {}\",\n             e.getClass(), m.getName(), ns, e);\n         lastThrownException \u003d new IOException(\n             \"Unexpected exception proxying API \" + e.getMessage(), e);\n         if (firstThrownException \u003d\u003d null) {\n           firstThrownException \u003d lastThrownException;\n         }\n       }\n     }\n \n     if (firstThrownException !\u003d null) {\n       // re-throw the last exception thrown for compatibility\n       throw firstThrownException;\n     }\n     // Return the last result, whether it is the value we are looking for or a\n     @SuppressWarnings(\"unchecked\")\n     T ret \u003d (T)firstResult;\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public \u003cT\u003e T invokeSequential(\n      final List\u003c? extends RemoteLocationContext\u003e locations,\n      final RemoteMethod remoteMethod, Class\u003cT\u003e expectedResultClass,\n      Object expectedResultValue) throws IOException {\n\n    final UserGroupInformation ugi \u003d RouterRpcServer.getRemoteUser();\n    final Method m \u003d remoteMethod.getMethod();\n    IOException firstThrownException \u003d null;\n    IOException lastThrownException \u003d null;\n    Object firstResult \u003d null;\n    // Invoke in priority order\n    for (final RemoteLocationContext loc : locations) {\n      String ns \u003d loc.getNameserviceId();\n      List\u003c? extends FederationNamenodeContext\u003e namenodes \u003d\n          getNamenodesForNameservice(ns);\n      try {\n        Class\u003c?\u003e proto \u003d remoteMethod.getProtocol();\n        Object[] params \u003d remoteMethod.getParams(loc);\n        Object result \u003d invokeMethod(ugi, namenodes, proto, m, params);\n        // Check if the result is what we expected\n        if (isExpectedClass(expectedResultClass, result) \u0026\u0026\n            isExpectedValue(expectedResultValue, result)) {\n          // Valid result, stop here\n          @SuppressWarnings(\"unchecked\")\n          T ret \u003d (T)result;\n          return ret;\n        }\n        if (firstResult \u003d\u003d null) {\n          firstResult \u003d result;\n        }\n      } catch (IOException ioe) {\n        // Record it and move on\n        lastThrownException \u003d (IOException) ioe;\n        if (firstThrownException \u003d\u003d null) {\n          firstThrownException \u003d lastThrownException;\n        }\n      } catch (Exception e) {\n        // Unusual error, ClientProtocol calls always use IOException (or\n        // RemoteException). Re-wrap in IOException for compatibility with\n        // ClientProtcol.\n        LOG.error(\"Unexpected exception {} proxying {} to {}\",\n            e.getClass(), m.getName(), ns, e);\n        lastThrownException \u003d new IOException(\n            \"Unexpected exception proxying API \" + e.getMessage(), e);\n        if (firstThrownException \u003d\u003d null) {\n          firstThrownException \u003d lastThrownException;\n        }\n      }\n    }\n\n    if (firstThrownException !\u003d null) {\n      // re-throw the last exception thrown for compatibility\n      throw firstThrownException;\n    }\n    // Return the last result, whether it is the value we are looking for or a\n    @SuppressWarnings(\"unchecked\")\n    T ret \u003d (T)firstResult;\n    return ret;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcClient.java",
      "extendedDetails": {}
    },
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-13215. RBF: Move Router to its own module. Contributed by Wei Yan\n",
      "commitDate": "19/03/18 10:13 PM",
      "commitName": "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
      "commitAuthor": "weiy",
      "commitDateOld": "19/03/18 5:19 PM",
      "commitNameOld": "e65ff1c8be48ef4f04ed96f96ac4caef4974944d",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.2,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public \u003cT\u003e T invokeSequential(\n      final List\u003c? extends RemoteLocationContext\u003e locations,\n      final RemoteMethod remoteMethod, Class\u003cT\u003e expectedResultClass,\n      Object expectedResultValue) throws IOException {\n\n    final UserGroupInformation ugi \u003d RouterRpcServer.getRemoteUser();\n    final Method m \u003d remoteMethod.getMethod();\n    IOException firstThrownException \u003d null;\n    IOException lastThrownException \u003d null;\n    Object firstResult \u003d null;\n    // Invoke in priority order\n    for (final RemoteLocationContext loc : locations) {\n      String ns \u003d loc.getNameserviceId();\n      List\u003c? extends FederationNamenodeContext\u003e namenodes \u003d\n          getNamenodesForNameservice(ns);\n      try {\n        Object[] params \u003d remoteMethod.getParams(loc);\n        Object result \u003d invokeMethod(ugi, namenodes, m, params);\n        // Check if the result is what we expected\n        if (isExpectedClass(expectedResultClass, result) \u0026\u0026\n            isExpectedValue(expectedResultValue, result)) {\n          // Valid result, stop here\n          @SuppressWarnings(\"unchecked\")\n          T ret \u003d (T)result;\n          return ret;\n        }\n        if (firstResult \u003d\u003d null) {\n          firstResult \u003d result;\n        }\n      } catch (IOException ioe) {\n        // Record it and move on\n        lastThrownException \u003d (IOException) ioe;\n        if (firstThrownException \u003d\u003d null) {\n          firstThrownException \u003d lastThrownException;\n        }\n      } catch (Exception e) {\n        // Unusual error, ClientProtocol calls always use IOException (or\n        // RemoteException). Re-wrap in IOException for compatibility with\n        // ClientProtcol.\n        LOG.error(\"Unexpected exception {} proxying {} to {}\",\n            e.getClass(), m.getName(), ns, e);\n        lastThrownException \u003d new IOException(\n            \"Unexpected exception proxying API \" + e.getMessage(), e);\n        if (firstThrownException \u003d\u003d null) {\n          firstThrownException \u003d lastThrownException;\n        }\n      }\n    }\n\n    if (firstThrownException !\u003d null) {\n      // re-throw the last exception thrown for compatibility\n      throw firstThrownException;\n    }\n    // Return the last result, whether it is the value we are looking for or a\n    @SuppressWarnings(\"unchecked\")\n    T ret \u003d (T)firstResult;\n    return ret;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcClient.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcClient.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcClient.java"
      }
    },
    "d5d6a0353bb85b882cc4ef60e3a12d63243d34ba": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-12919. RBF: Support erasure coding methods in RouterRpcServer. Contributed by Inigo Goiri.\n",
      "commitDate": "12/01/18 4:25 PM",
      "commitName": "d5d6a0353bb85b882cc4ef60e3a12d63243d34ba",
      "commitAuthor": "Inigo Goiri",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-12919. RBF: Support erasure coding methods in RouterRpcServer. Contributed by Inigo Goiri.\n",
          "commitDate": "12/01/18 4:25 PM",
          "commitName": "d5d6a0353bb85b882cc4ef60e3a12d63243d34ba",
          "commitAuthor": "Inigo Goiri",
          "commitDateOld": "29/11/17 9:43 AM",
          "commitNameOld": "301641811d93ac22dc6fe1a05f18c1f266cc5e54",
          "commitAuthorOld": "Wei Yan",
          "daysBetweenCommits": 44.28,
          "commitsBetweenForRepo": 258,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,54 +1,58 @@\n-  public Object invokeSequential(\n+  public \u003cT\u003e T invokeSequential(\n       final List\u003c? extends RemoteLocationContext\u003e locations,\n-      final RemoteMethod remoteMethod, Class\u003c?\u003e expectedResultClass,\n+      final RemoteMethod remoteMethod, Class\u003cT\u003e expectedResultClass,\n       Object expectedResultValue) throws IOException {\n \n     final UserGroupInformation ugi \u003d RouterRpcServer.getRemoteUser();\n     final Method m \u003d remoteMethod.getMethod();\n     IOException firstThrownException \u003d null;\n     IOException lastThrownException \u003d null;\n     Object firstResult \u003d null;\n     // Invoke in priority order\n     for (final RemoteLocationContext loc : locations) {\n       String ns \u003d loc.getNameserviceId();\n       List\u003c? extends FederationNamenodeContext\u003e namenodes \u003d\n           getNamenodesForNameservice(ns);\n       try {\n         Object[] params \u003d remoteMethod.getParams(loc);\n         Object result \u003d invokeMethod(ugi, namenodes, m, params);\n         // Check if the result is what we expected\n         if (isExpectedClass(expectedResultClass, result) \u0026\u0026\n             isExpectedValue(expectedResultValue, result)) {\n           // Valid result, stop here\n-          return result;\n+          @SuppressWarnings(\"unchecked\")\n+          T ret \u003d (T)result;\n+          return ret;\n         }\n         if (firstResult \u003d\u003d null) {\n           firstResult \u003d result;\n         }\n       } catch (IOException ioe) {\n         // Record it and move on\n         lastThrownException \u003d (IOException) ioe;\n         if (firstThrownException \u003d\u003d null) {\n           firstThrownException \u003d lastThrownException;\n         }\n       } catch (Exception e) {\n         // Unusual error, ClientProtocol calls always use IOException (or\n         // RemoteException). Re-wrap in IOException for compatibility with\n         // ClientProtcol.\n         LOG.error(\"Unexpected exception {} proxying {} to {}\",\n             e.getClass(), m.getName(), ns, e);\n         lastThrownException \u003d new IOException(\n             \"Unexpected exception proxying API \" + e.getMessage(), e);\n         if (firstThrownException \u003d\u003d null) {\n           firstThrownException \u003d lastThrownException;\n         }\n       }\n     }\n \n     if (firstThrownException !\u003d null) {\n       // re-throw the last exception thrown for compatibility\n       throw firstThrownException;\n     }\n     // Return the last result, whether it is the value we are looking for or a\n-    return firstResult;\n+    @SuppressWarnings(\"unchecked\")\n+    T ret \u003d (T)firstResult;\n+    return ret;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public \u003cT\u003e T invokeSequential(\n      final List\u003c? extends RemoteLocationContext\u003e locations,\n      final RemoteMethod remoteMethod, Class\u003cT\u003e expectedResultClass,\n      Object expectedResultValue) throws IOException {\n\n    final UserGroupInformation ugi \u003d RouterRpcServer.getRemoteUser();\n    final Method m \u003d remoteMethod.getMethod();\n    IOException firstThrownException \u003d null;\n    IOException lastThrownException \u003d null;\n    Object firstResult \u003d null;\n    // Invoke in priority order\n    for (final RemoteLocationContext loc : locations) {\n      String ns \u003d loc.getNameserviceId();\n      List\u003c? extends FederationNamenodeContext\u003e namenodes \u003d\n          getNamenodesForNameservice(ns);\n      try {\n        Object[] params \u003d remoteMethod.getParams(loc);\n        Object result \u003d invokeMethod(ugi, namenodes, m, params);\n        // Check if the result is what we expected\n        if (isExpectedClass(expectedResultClass, result) \u0026\u0026\n            isExpectedValue(expectedResultValue, result)) {\n          // Valid result, stop here\n          @SuppressWarnings(\"unchecked\")\n          T ret \u003d (T)result;\n          return ret;\n        }\n        if (firstResult \u003d\u003d null) {\n          firstResult \u003d result;\n        }\n      } catch (IOException ioe) {\n        // Record it and move on\n        lastThrownException \u003d (IOException) ioe;\n        if (firstThrownException \u003d\u003d null) {\n          firstThrownException \u003d lastThrownException;\n        }\n      } catch (Exception e) {\n        // Unusual error, ClientProtocol calls always use IOException (or\n        // RemoteException). Re-wrap in IOException for compatibility with\n        // ClientProtcol.\n        LOG.error(\"Unexpected exception {} proxying {} to {}\",\n            e.getClass(), m.getName(), ns, e);\n        lastThrownException \u003d new IOException(\n            \"Unexpected exception proxying API \" + e.getMessage(), e);\n        if (firstThrownException \u003d\u003d null) {\n          firstThrownException \u003d lastThrownException;\n        }\n      }\n    }\n\n    if (firstThrownException !\u003d null) {\n      // re-throw the last exception thrown for compatibility\n      throw firstThrownException;\n    }\n    // Return the last result, whether it is the value we are looking for or a\n    @SuppressWarnings(\"unchecked\")\n    T ret \u003d (T)firstResult;\n    return ret;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcClient.java",
          "extendedDetails": {
            "oldValue": "[locations-List\u003c? extends RemoteLocationContext\u003e(modifiers-final), remoteMethod-RemoteMethod(modifiers-final), expectedResultClass-Class\u003c?\u003e, expectedResultValue-Object]",
            "newValue": "[locations-List\u003c? extends RemoteLocationContext\u003e(modifiers-final), remoteMethod-RemoteMethod(modifiers-final), expectedResultClass-Class\u003cT\u003e, expectedResultValue-Object]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-12919. RBF: Support erasure coding methods in RouterRpcServer. Contributed by Inigo Goiri.\n",
          "commitDate": "12/01/18 4:25 PM",
          "commitName": "d5d6a0353bb85b882cc4ef60e3a12d63243d34ba",
          "commitAuthor": "Inigo Goiri",
          "commitDateOld": "29/11/17 9:43 AM",
          "commitNameOld": "301641811d93ac22dc6fe1a05f18c1f266cc5e54",
          "commitAuthorOld": "Wei Yan",
          "daysBetweenCommits": 44.28,
          "commitsBetweenForRepo": 258,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,54 +1,58 @@\n-  public Object invokeSequential(\n+  public \u003cT\u003e T invokeSequential(\n       final List\u003c? extends RemoteLocationContext\u003e locations,\n-      final RemoteMethod remoteMethod, Class\u003c?\u003e expectedResultClass,\n+      final RemoteMethod remoteMethod, Class\u003cT\u003e expectedResultClass,\n       Object expectedResultValue) throws IOException {\n \n     final UserGroupInformation ugi \u003d RouterRpcServer.getRemoteUser();\n     final Method m \u003d remoteMethod.getMethod();\n     IOException firstThrownException \u003d null;\n     IOException lastThrownException \u003d null;\n     Object firstResult \u003d null;\n     // Invoke in priority order\n     for (final RemoteLocationContext loc : locations) {\n       String ns \u003d loc.getNameserviceId();\n       List\u003c? extends FederationNamenodeContext\u003e namenodes \u003d\n           getNamenodesForNameservice(ns);\n       try {\n         Object[] params \u003d remoteMethod.getParams(loc);\n         Object result \u003d invokeMethod(ugi, namenodes, m, params);\n         // Check if the result is what we expected\n         if (isExpectedClass(expectedResultClass, result) \u0026\u0026\n             isExpectedValue(expectedResultValue, result)) {\n           // Valid result, stop here\n-          return result;\n+          @SuppressWarnings(\"unchecked\")\n+          T ret \u003d (T)result;\n+          return ret;\n         }\n         if (firstResult \u003d\u003d null) {\n           firstResult \u003d result;\n         }\n       } catch (IOException ioe) {\n         // Record it and move on\n         lastThrownException \u003d (IOException) ioe;\n         if (firstThrownException \u003d\u003d null) {\n           firstThrownException \u003d lastThrownException;\n         }\n       } catch (Exception e) {\n         // Unusual error, ClientProtocol calls always use IOException (or\n         // RemoteException). Re-wrap in IOException for compatibility with\n         // ClientProtcol.\n         LOG.error(\"Unexpected exception {} proxying {} to {}\",\n             e.getClass(), m.getName(), ns, e);\n         lastThrownException \u003d new IOException(\n             \"Unexpected exception proxying API \" + e.getMessage(), e);\n         if (firstThrownException \u003d\u003d null) {\n           firstThrownException \u003d lastThrownException;\n         }\n       }\n     }\n \n     if (firstThrownException !\u003d null) {\n       // re-throw the last exception thrown for compatibility\n       throw firstThrownException;\n     }\n     // Return the last result, whether it is the value we are looking for or a\n-    return firstResult;\n+    @SuppressWarnings(\"unchecked\")\n+    T ret \u003d (T)firstResult;\n+    return ret;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public \u003cT\u003e T invokeSequential(\n      final List\u003c? extends RemoteLocationContext\u003e locations,\n      final RemoteMethod remoteMethod, Class\u003cT\u003e expectedResultClass,\n      Object expectedResultValue) throws IOException {\n\n    final UserGroupInformation ugi \u003d RouterRpcServer.getRemoteUser();\n    final Method m \u003d remoteMethod.getMethod();\n    IOException firstThrownException \u003d null;\n    IOException lastThrownException \u003d null;\n    Object firstResult \u003d null;\n    // Invoke in priority order\n    for (final RemoteLocationContext loc : locations) {\n      String ns \u003d loc.getNameserviceId();\n      List\u003c? extends FederationNamenodeContext\u003e namenodes \u003d\n          getNamenodesForNameservice(ns);\n      try {\n        Object[] params \u003d remoteMethod.getParams(loc);\n        Object result \u003d invokeMethod(ugi, namenodes, m, params);\n        // Check if the result is what we expected\n        if (isExpectedClass(expectedResultClass, result) \u0026\u0026\n            isExpectedValue(expectedResultValue, result)) {\n          // Valid result, stop here\n          @SuppressWarnings(\"unchecked\")\n          T ret \u003d (T)result;\n          return ret;\n        }\n        if (firstResult \u003d\u003d null) {\n          firstResult \u003d result;\n        }\n      } catch (IOException ioe) {\n        // Record it and move on\n        lastThrownException \u003d (IOException) ioe;\n        if (firstThrownException \u003d\u003d null) {\n          firstThrownException \u003d lastThrownException;\n        }\n      } catch (Exception e) {\n        // Unusual error, ClientProtocol calls always use IOException (or\n        // RemoteException). Re-wrap in IOException for compatibility with\n        // ClientProtcol.\n        LOG.error(\"Unexpected exception {} proxying {} to {}\",\n            e.getClass(), m.getName(), ns, e);\n        lastThrownException \u003d new IOException(\n            \"Unexpected exception proxying API \" + e.getMessage(), e);\n        if (firstThrownException \u003d\u003d null) {\n          firstThrownException \u003d lastThrownException;\n        }\n      }\n    }\n\n    if (firstThrownException !\u003d null) {\n      // re-throw the last exception thrown for compatibility\n      throw firstThrownException;\n    }\n    // Return the last result, whether it is the value we are looking for or a\n    @SuppressWarnings(\"unchecked\")\n    T ret \u003d (T)firstResult;\n    return ret;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcClient.java",
          "extendedDetails": {
            "oldValue": "Object",
            "newValue": "T"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-12919. RBF: Support erasure coding methods in RouterRpcServer. Contributed by Inigo Goiri.\n",
          "commitDate": "12/01/18 4:25 PM",
          "commitName": "d5d6a0353bb85b882cc4ef60e3a12d63243d34ba",
          "commitAuthor": "Inigo Goiri",
          "commitDateOld": "29/11/17 9:43 AM",
          "commitNameOld": "301641811d93ac22dc6fe1a05f18c1f266cc5e54",
          "commitAuthorOld": "Wei Yan",
          "daysBetweenCommits": 44.28,
          "commitsBetweenForRepo": 258,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,54 +1,58 @@\n-  public Object invokeSequential(\n+  public \u003cT\u003e T invokeSequential(\n       final List\u003c? extends RemoteLocationContext\u003e locations,\n-      final RemoteMethod remoteMethod, Class\u003c?\u003e expectedResultClass,\n+      final RemoteMethod remoteMethod, Class\u003cT\u003e expectedResultClass,\n       Object expectedResultValue) throws IOException {\n \n     final UserGroupInformation ugi \u003d RouterRpcServer.getRemoteUser();\n     final Method m \u003d remoteMethod.getMethod();\n     IOException firstThrownException \u003d null;\n     IOException lastThrownException \u003d null;\n     Object firstResult \u003d null;\n     // Invoke in priority order\n     for (final RemoteLocationContext loc : locations) {\n       String ns \u003d loc.getNameserviceId();\n       List\u003c? extends FederationNamenodeContext\u003e namenodes \u003d\n           getNamenodesForNameservice(ns);\n       try {\n         Object[] params \u003d remoteMethod.getParams(loc);\n         Object result \u003d invokeMethod(ugi, namenodes, m, params);\n         // Check if the result is what we expected\n         if (isExpectedClass(expectedResultClass, result) \u0026\u0026\n             isExpectedValue(expectedResultValue, result)) {\n           // Valid result, stop here\n-          return result;\n+          @SuppressWarnings(\"unchecked\")\n+          T ret \u003d (T)result;\n+          return ret;\n         }\n         if (firstResult \u003d\u003d null) {\n           firstResult \u003d result;\n         }\n       } catch (IOException ioe) {\n         // Record it and move on\n         lastThrownException \u003d (IOException) ioe;\n         if (firstThrownException \u003d\u003d null) {\n           firstThrownException \u003d lastThrownException;\n         }\n       } catch (Exception e) {\n         // Unusual error, ClientProtocol calls always use IOException (or\n         // RemoteException). Re-wrap in IOException for compatibility with\n         // ClientProtcol.\n         LOG.error(\"Unexpected exception {} proxying {} to {}\",\n             e.getClass(), m.getName(), ns, e);\n         lastThrownException \u003d new IOException(\n             \"Unexpected exception proxying API \" + e.getMessage(), e);\n         if (firstThrownException \u003d\u003d null) {\n           firstThrownException \u003d lastThrownException;\n         }\n       }\n     }\n \n     if (firstThrownException !\u003d null) {\n       // re-throw the last exception thrown for compatibility\n       throw firstThrownException;\n     }\n     // Return the last result, whether it is the value we are looking for or a\n-    return firstResult;\n+    @SuppressWarnings(\"unchecked\")\n+    T ret \u003d (T)firstResult;\n+    return ret;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public \u003cT\u003e T invokeSequential(\n      final List\u003c? extends RemoteLocationContext\u003e locations,\n      final RemoteMethod remoteMethod, Class\u003cT\u003e expectedResultClass,\n      Object expectedResultValue) throws IOException {\n\n    final UserGroupInformation ugi \u003d RouterRpcServer.getRemoteUser();\n    final Method m \u003d remoteMethod.getMethod();\n    IOException firstThrownException \u003d null;\n    IOException lastThrownException \u003d null;\n    Object firstResult \u003d null;\n    // Invoke in priority order\n    for (final RemoteLocationContext loc : locations) {\n      String ns \u003d loc.getNameserviceId();\n      List\u003c? extends FederationNamenodeContext\u003e namenodes \u003d\n          getNamenodesForNameservice(ns);\n      try {\n        Object[] params \u003d remoteMethod.getParams(loc);\n        Object result \u003d invokeMethod(ugi, namenodes, m, params);\n        // Check if the result is what we expected\n        if (isExpectedClass(expectedResultClass, result) \u0026\u0026\n            isExpectedValue(expectedResultValue, result)) {\n          // Valid result, stop here\n          @SuppressWarnings(\"unchecked\")\n          T ret \u003d (T)result;\n          return ret;\n        }\n        if (firstResult \u003d\u003d null) {\n          firstResult \u003d result;\n        }\n      } catch (IOException ioe) {\n        // Record it and move on\n        lastThrownException \u003d (IOException) ioe;\n        if (firstThrownException \u003d\u003d null) {\n          firstThrownException \u003d lastThrownException;\n        }\n      } catch (Exception e) {\n        // Unusual error, ClientProtocol calls always use IOException (or\n        // RemoteException). Re-wrap in IOException for compatibility with\n        // ClientProtcol.\n        LOG.error(\"Unexpected exception {} proxying {} to {}\",\n            e.getClass(), m.getName(), ns, e);\n        lastThrownException \u003d new IOException(\n            \"Unexpected exception proxying API \" + e.getMessage(), e);\n        if (firstThrownException \u003d\u003d null) {\n          firstThrownException \u003d lastThrownException;\n        }\n      }\n    }\n\n    if (firstThrownException !\u003d null) {\n      // re-throw the last exception thrown for compatibility\n      throw firstThrownException;\n    }\n    // Return the last result, whether it is the value we are looking for or a\n    @SuppressWarnings(\"unchecked\")\n    T ret \u003d (T)firstResult;\n    return ret;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcClient.java",
          "extendedDetails": {}
        }
      ]
    },
    "ca4f209b49e3aad6a80306f7342c9b6b560a79a7": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-11546. Federation Router RPC server. Contributed by Jason Kace and Inigo Goiri.\n\n(cherry picked from commit 8a9cdebebf26841a0f1e99fb08135f4597f2eba2)\n",
      "commitDate": "06/10/17 6:50 PM",
      "commitName": "ca4f209b49e3aad6a80306f7342c9b6b560a79a7",
      "commitAuthor": "Inigo Goiri",
      "diff": "@@ -0,0 +1,54 @@\n+  public Object invokeSequential(\n+      final List\u003c? extends RemoteLocationContext\u003e locations,\n+      final RemoteMethod remoteMethod, Class\u003c?\u003e expectedResultClass,\n+      Object expectedResultValue) throws IOException {\n+\n+    final UserGroupInformation ugi \u003d RouterRpcServer.getRemoteUser();\n+    final Method m \u003d remoteMethod.getMethod();\n+    IOException firstThrownException \u003d null;\n+    IOException lastThrownException \u003d null;\n+    Object firstResult \u003d null;\n+    // Invoke in priority order\n+    for (final RemoteLocationContext loc : locations) {\n+      String ns \u003d loc.getNameserviceId();\n+      List\u003c? extends FederationNamenodeContext\u003e namenodes \u003d\n+          getNamenodesForNameservice(ns);\n+      try {\n+        Object[] params \u003d remoteMethod.getParams(loc);\n+        Object result \u003d invokeMethod(ugi, namenodes, m, params);\n+        // Check if the result is what we expected\n+        if (isExpectedClass(expectedResultClass, result) \u0026\u0026\n+            isExpectedValue(expectedResultValue, result)) {\n+          // Valid result, stop here\n+          return result;\n+        }\n+        if (firstResult \u003d\u003d null) {\n+          firstResult \u003d result;\n+        }\n+      } catch (IOException ioe) {\n+        // Record it and move on\n+        lastThrownException \u003d (IOException) ioe;\n+        if (firstThrownException \u003d\u003d null) {\n+          firstThrownException \u003d lastThrownException;\n+        }\n+      } catch (Exception e) {\n+        // Unusual error, ClientProtocol calls always use IOException (or\n+        // RemoteException). Re-wrap in IOException for compatibility with\n+        // ClientProtcol.\n+        LOG.error(\"Unexpected exception {} proxying {} to {}\",\n+            e.getClass(), m.getName(), ns, e);\n+        lastThrownException \u003d new IOException(\n+            \"Unexpected exception proxying API \" + e.getMessage(), e);\n+        if (firstThrownException \u003d\u003d null) {\n+          firstThrownException \u003d lastThrownException;\n+        }\n+      }\n+    }\n+\n+    if (firstThrownException !\u003d null) {\n+      // re-throw the last exception thrown for compatibility\n+      throw firstThrownException;\n+    }\n+    // Return the last result, whether it is the value we are looking for or a\n+    return firstResult;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Object invokeSequential(\n      final List\u003c? extends RemoteLocationContext\u003e locations,\n      final RemoteMethod remoteMethod, Class\u003c?\u003e expectedResultClass,\n      Object expectedResultValue) throws IOException {\n\n    final UserGroupInformation ugi \u003d RouterRpcServer.getRemoteUser();\n    final Method m \u003d remoteMethod.getMethod();\n    IOException firstThrownException \u003d null;\n    IOException lastThrownException \u003d null;\n    Object firstResult \u003d null;\n    // Invoke in priority order\n    for (final RemoteLocationContext loc : locations) {\n      String ns \u003d loc.getNameserviceId();\n      List\u003c? extends FederationNamenodeContext\u003e namenodes \u003d\n          getNamenodesForNameservice(ns);\n      try {\n        Object[] params \u003d remoteMethod.getParams(loc);\n        Object result \u003d invokeMethod(ugi, namenodes, m, params);\n        // Check if the result is what we expected\n        if (isExpectedClass(expectedResultClass, result) \u0026\u0026\n            isExpectedValue(expectedResultValue, result)) {\n          // Valid result, stop here\n          return result;\n        }\n        if (firstResult \u003d\u003d null) {\n          firstResult \u003d result;\n        }\n      } catch (IOException ioe) {\n        // Record it and move on\n        lastThrownException \u003d (IOException) ioe;\n        if (firstThrownException \u003d\u003d null) {\n          firstThrownException \u003d lastThrownException;\n        }\n      } catch (Exception e) {\n        // Unusual error, ClientProtocol calls always use IOException (or\n        // RemoteException). Re-wrap in IOException for compatibility with\n        // ClientProtcol.\n        LOG.error(\"Unexpected exception {} proxying {} to {}\",\n            e.getClass(), m.getName(), ns, e);\n        lastThrownException \u003d new IOException(\n            \"Unexpected exception proxying API \" + e.getMessage(), e);\n        if (firstThrownException \u003d\u003d null) {\n          firstThrownException \u003d lastThrownException;\n        }\n      }\n    }\n\n    if (firstThrownException !\u003d null) {\n      // re-throw the last exception thrown for compatibility\n      throw firstThrownException;\n    }\n    // Return the last result, whether it is the value we are looking for or a\n    return firstResult;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcClient.java"
    }
  }
}