{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RSUtil.java",
  "functionName": "encodeData",
  "functionId": "encodeData___gfTables-byte[]__inputs-ByteBuffer[]__outputs-ByteBuffer[]",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/util/RSUtil.java",
  "functionStartLine": 137,
  "functionEndLine": 185,
  "numCommitsSeen": 6,
  "timeTaken": 1182,
  "changeHistory": [
    "19e8f076919932b17f24ec4090df1926677651e7",
    "c89a14a8a4fe58f01f0cba643f2bc203e1a8701e"
  ],
  "changeHistoryShort": {
    "19e8f076919932b17f24ec4090df1926677651e7": "Ymovefromfile",
    "c89a14a8a4fe58f01f0cba643f2bc203e1a8701e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "19e8f076919932b17f24ec4090df1926677651e7": {
      "type": "Ymovefromfile",
      "commitMessage": "HADOOP-12826. Rename the new Java coder and make it default. Contributed by Rui Li.\n",
      "commitDate": "14/03/16 4:45 PM",
      "commitName": "19e8f076919932b17f24ec4090df1926677651e7",
      "commitAuthor": "Zhe Zhang",
      "commitDateOld": "14/03/16 3:48 PM",
      "commitNameOld": "1898810cda83e6d273a2963b56ed499c0fb91118",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n   public static void encodeData(byte[] gfTables, ByteBuffer[] inputs,\n-                                ByteBuffer[] outputs) {\n+      ByteBuffer[] outputs) {\n     int numInputs \u003d inputs.length;\n     int numOutputs \u003d outputs.length;\n     int dataLen \u003d inputs[0].remaining();\n     int l, i, j, iPos, oPos;\n     ByteBuffer input, output;\n     byte s;\n     final int times \u003d dataLen / 8;\n     final int extra \u003d dataLen - dataLen % 8;\n     byte[] tableLine;\n \n     for (l \u003d 0; l \u003c numOutputs; l++) {\n       output \u003d outputs[l];\n \n       for (j \u003d 0; j \u003c numInputs; j++) {\n         input \u003d inputs[j];\n         iPos \u003d input.position();\n         oPos \u003d output.position();\n \n         s \u003d gfTables[j * 32 + l * numInputs * 32 + 1];\n         tableLine \u003d GF256.gfMulTab()[s \u0026 0xff];\n \n         for (i \u003d 0; i \u003c times; i++, iPos +\u003d 8, oPos +\u003d 8) {\n           output.put(oPos + 0, (byte) (output.get(oPos + 0) ^\n               tableLine[0xff \u0026 input.get(iPos + 0)]));\n           output.put(oPos + 1, (byte) (output.get(oPos + 1) ^\n               tableLine[0xff \u0026 input.get(iPos + 1)]));\n           output.put(oPos + 2, (byte) (output.get(oPos + 2) ^\n               tableLine[0xff \u0026 input.get(iPos + 2)]));\n           output.put(oPos + 3, (byte) (output.get(oPos + 3) ^\n               tableLine[0xff \u0026 input.get(iPos + 3)]));\n           output.put(oPos + 4, (byte) (output.get(oPos + 4) ^\n               tableLine[0xff \u0026 input.get(iPos + 4)]));\n           output.put(oPos + 5, (byte) (output.get(oPos + 5) ^\n               tableLine[0xff \u0026 input.get(iPos + 5)]));\n           output.put(oPos + 6, (byte) (output.get(oPos + 6) ^\n               tableLine[0xff \u0026 input.get(iPos + 6)]));\n           output.put(oPos + 7, (byte) (output.get(oPos + 7) ^\n               tableLine[0xff \u0026 input.get(iPos + 7)]));\n         }\n \n         for (i \u003d extra; i \u003c dataLen; i++, iPos++, oPos++) {\n           output.put(oPos, (byte) (output.get(oPos) ^\n               tableLine[0xff \u0026 input.get(iPos)]));\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void encodeData(byte[] gfTables, ByteBuffer[] inputs,\n      ByteBuffer[] outputs) {\n    int numInputs \u003d inputs.length;\n    int numOutputs \u003d outputs.length;\n    int dataLen \u003d inputs[0].remaining();\n    int l, i, j, iPos, oPos;\n    ByteBuffer input, output;\n    byte s;\n    final int times \u003d dataLen / 8;\n    final int extra \u003d dataLen - dataLen % 8;\n    byte[] tableLine;\n\n    for (l \u003d 0; l \u003c numOutputs; l++) {\n      output \u003d outputs[l];\n\n      for (j \u003d 0; j \u003c numInputs; j++) {\n        input \u003d inputs[j];\n        iPos \u003d input.position();\n        oPos \u003d output.position();\n\n        s \u003d gfTables[j * 32 + l * numInputs * 32 + 1];\n        tableLine \u003d GF256.gfMulTab()[s \u0026 0xff];\n\n        for (i \u003d 0; i \u003c times; i++, iPos +\u003d 8, oPos +\u003d 8) {\n          output.put(oPos + 0, (byte) (output.get(oPos + 0) ^\n              tableLine[0xff \u0026 input.get(iPos + 0)]));\n          output.put(oPos + 1, (byte) (output.get(oPos + 1) ^\n              tableLine[0xff \u0026 input.get(iPos + 1)]));\n          output.put(oPos + 2, (byte) (output.get(oPos + 2) ^\n              tableLine[0xff \u0026 input.get(iPos + 2)]));\n          output.put(oPos + 3, (byte) (output.get(oPos + 3) ^\n              tableLine[0xff \u0026 input.get(iPos + 3)]));\n          output.put(oPos + 4, (byte) (output.get(oPos + 4) ^\n              tableLine[0xff \u0026 input.get(iPos + 4)]));\n          output.put(oPos + 5, (byte) (output.get(oPos + 5) ^\n              tableLine[0xff \u0026 input.get(iPos + 5)]));\n          output.put(oPos + 6, (byte) (output.get(oPos + 6) ^\n              tableLine[0xff \u0026 input.get(iPos + 6)]));\n          output.put(oPos + 7, (byte) (output.get(oPos + 7) ^\n              tableLine[0xff \u0026 input.get(iPos + 7)]));\n        }\n\n        for (i \u003d extra; i \u003c dataLen; i++, iPos++, oPos++) {\n          output.put(oPos, (byte) (output.get(oPos) ^\n              tableLine[0xff \u0026 input.get(iPos)]));\n        }\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/util/RSUtil.java",
      "extendedDetails": {
        "oldPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/util/RSUtil2.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/util/RSUtil.java",
        "oldMethodName": "encodeData",
        "newMethodName": "encodeData"
      }
    },
    "c89a14a8a4fe58f01f0cba643f2bc203e1a8701e": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-12041. Implement another Reed-Solomon coder in pure Java. Contributed by Kai Zheng.\n\nChange-Id: I35ff2e498d4f988c9a064f74374f7c7258b7a6b7\n",
      "commitDate": "03/02/16 3:05 PM",
      "commitName": "c89a14a8a4fe58f01f0cba643f2bc203e1a8701e",
      "commitAuthor": "zhezhang",
      "diff": "@@ -0,0 +1,49 @@\n+  public static void encodeData(byte[] gfTables, ByteBuffer[] inputs,\n+                                ByteBuffer[] outputs) {\n+    int numInputs \u003d inputs.length;\n+    int numOutputs \u003d outputs.length;\n+    int dataLen \u003d inputs[0].remaining();\n+    int l, i, j, iPos, oPos;\n+    ByteBuffer input, output;\n+    byte s;\n+    final int times \u003d dataLen / 8;\n+    final int extra \u003d dataLen - dataLen % 8;\n+    byte[] tableLine;\n+\n+    for (l \u003d 0; l \u003c numOutputs; l++) {\n+      output \u003d outputs[l];\n+\n+      for (j \u003d 0; j \u003c numInputs; j++) {\n+        input \u003d inputs[j];\n+        iPos \u003d input.position();\n+        oPos \u003d output.position();\n+\n+        s \u003d gfTables[j * 32 + l * numInputs * 32 + 1];\n+        tableLine \u003d GF256.gfMulTab()[s \u0026 0xff];\n+\n+        for (i \u003d 0; i \u003c times; i++, iPos +\u003d 8, oPos +\u003d 8) {\n+          output.put(oPos + 0, (byte) (output.get(oPos + 0) ^\n+              tableLine[0xff \u0026 input.get(iPos + 0)]));\n+          output.put(oPos + 1, (byte) (output.get(oPos + 1) ^\n+              tableLine[0xff \u0026 input.get(iPos + 1)]));\n+          output.put(oPos + 2, (byte) (output.get(oPos + 2) ^\n+              tableLine[0xff \u0026 input.get(iPos + 2)]));\n+          output.put(oPos + 3, (byte) (output.get(oPos + 3) ^\n+              tableLine[0xff \u0026 input.get(iPos + 3)]));\n+          output.put(oPos + 4, (byte) (output.get(oPos + 4) ^\n+              tableLine[0xff \u0026 input.get(iPos + 4)]));\n+          output.put(oPos + 5, (byte) (output.get(oPos + 5) ^\n+              tableLine[0xff \u0026 input.get(iPos + 5)]));\n+          output.put(oPos + 6, (byte) (output.get(oPos + 6) ^\n+              tableLine[0xff \u0026 input.get(iPos + 6)]));\n+          output.put(oPos + 7, (byte) (output.get(oPos + 7) ^\n+              tableLine[0xff \u0026 input.get(iPos + 7)]));\n+        }\n+\n+        for (i \u003d extra; i \u003c dataLen; i++, iPos++, oPos++) {\n+          output.put(oPos, (byte) (output.get(oPos) ^\n+              tableLine[0xff \u0026 input.get(iPos)]));\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static void encodeData(byte[] gfTables, ByteBuffer[] inputs,\n                                ByteBuffer[] outputs) {\n    int numInputs \u003d inputs.length;\n    int numOutputs \u003d outputs.length;\n    int dataLen \u003d inputs[0].remaining();\n    int l, i, j, iPos, oPos;\n    ByteBuffer input, output;\n    byte s;\n    final int times \u003d dataLen / 8;\n    final int extra \u003d dataLen - dataLen % 8;\n    byte[] tableLine;\n\n    for (l \u003d 0; l \u003c numOutputs; l++) {\n      output \u003d outputs[l];\n\n      for (j \u003d 0; j \u003c numInputs; j++) {\n        input \u003d inputs[j];\n        iPos \u003d input.position();\n        oPos \u003d output.position();\n\n        s \u003d gfTables[j * 32 + l * numInputs * 32 + 1];\n        tableLine \u003d GF256.gfMulTab()[s \u0026 0xff];\n\n        for (i \u003d 0; i \u003c times; i++, iPos +\u003d 8, oPos +\u003d 8) {\n          output.put(oPos + 0, (byte) (output.get(oPos + 0) ^\n              tableLine[0xff \u0026 input.get(iPos + 0)]));\n          output.put(oPos + 1, (byte) (output.get(oPos + 1) ^\n              tableLine[0xff \u0026 input.get(iPos + 1)]));\n          output.put(oPos + 2, (byte) (output.get(oPos + 2) ^\n              tableLine[0xff \u0026 input.get(iPos + 2)]));\n          output.put(oPos + 3, (byte) (output.get(oPos + 3) ^\n              tableLine[0xff \u0026 input.get(iPos + 3)]));\n          output.put(oPos + 4, (byte) (output.get(oPos + 4) ^\n              tableLine[0xff \u0026 input.get(iPos + 4)]));\n          output.put(oPos + 5, (byte) (output.get(oPos + 5) ^\n              tableLine[0xff \u0026 input.get(iPos + 5)]));\n          output.put(oPos + 6, (byte) (output.get(oPos + 6) ^\n              tableLine[0xff \u0026 input.get(iPos + 6)]));\n          output.put(oPos + 7, (byte) (output.get(oPos + 7) ^\n              tableLine[0xff \u0026 input.get(iPos + 7)]));\n        }\n\n        for (i \u003d extra; i \u003c dataLen; i++, iPos++, oPos++) {\n          output.put(oPos, (byte) (output.get(oPos) ^\n              tableLine[0xff \u0026 input.get(iPos)]));\n        }\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/util/RSUtil2.java"
    }
  }
}