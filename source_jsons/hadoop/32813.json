{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainerLaunch.java",
  "functionName": "getContainerPid",
  "functionId": "getContainerPid",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java",
  "functionStartLine": 1002,
  "functionEndLine": 1033,
  "numCommitsSeen": 196,
  "timeTaken": 5681,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "5ce70e1211e624d58e8bb1181aec00729ebdc085",
    "310aa4686eb697f0700a71d33106514c404dab1b",
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
    "c5a46d4c8ca236ff641a309f256bbbdf4dd56db5",
    "2692675fc3b5046d2ec88542c30203c87e135b70",
    "27e8c86999bc6a972a99216060b11ef35b7de858",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "2fe343f96348e894e6ed16c447c8c77ba1611d11"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "5ce70e1211e624d58e8bb1181aec00729ebdc085": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
    "310aa4686eb697f0700a71d33106514c404dab1b": "Ybodychange",
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": "Ybodychange",
    "c5a46d4c8ca236ff641a309f256bbbdf4dd56db5": "Ybodychange",
    "2692675fc3b5046d2ec88542c30203c87e135b70": "Ybodychange",
    "27e8c86999bc6a972a99216060b11ef35b7de858": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "2fe343f96348e894e6ed16c447c8c77ba1611d11": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "03/01/19 10:40 PM",
      "commitNameOld": "f4906ac01960c78ff0c91797eaa4b36d80f6826d",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 70.7,
      "commitsBetweenForRepo": 575,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,32 @@\n   String getContainerPid() throws Exception {\n     if (pidFilePath \u003d\u003d null) {\n       return null;\n     }\n     String containerIdStr \u003d \n         container.getContainerId().toString();\n     String processId;\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Accessing pid for container \" + containerIdStr\n-          + \" from pid file \" + pidFilePath);\n-    }\n+    LOG.debug(\"Accessing pid for container {} from pid file {}\",\n+        containerIdStr, pidFilePath);\n     int sleepCounter \u003d 0;\n     final int sleepInterval \u003d 100;\n \n     // loop waiting for pid file to show up \n     // until our timer expires in which case we admit defeat\n     while (true) {\n       processId \u003d ProcessIdFileReader.getProcessId(pidFilePath);\n       if (processId !\u003d null) {\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\n-              \"Got pid \" + processId + \" for container \" + containerIdStr);\n-        }\n+        LOG.debug(\"Got pid {} for container {}\", processId, containerIdStr);\n         break;\n       }\n       else if ((sleepCounter*sleepInterval) \u003e maxKillWaitTime) {\n         LOG.info(\"Could not get pid for \" + containerIdStr\n         \t\t+ \". Waited for \" + maxKillWaitTime + \" ms.\");\n         break;\n       }\n       else {\n         ++sleepCounter;\n         Thread.sleep(sleepInterval);\n       }\n     }\n     return processId;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  String getContainerPid() throws Exception {\n    if (pidFilePath \u003d\u003d null) {\n      return null;\n    }\n    String containerIdStr \u003d \n        container.getContainerId().toString();\n    String processId;\n    LOG.debug(\"Accessing pid for container {} from pid file {}\",\n        containerIdStr, pidFilePath);\n    int sleepCounter \u003d 0;\n    final int sleepInterval \u003d 100;\n\n    // loop waiting for pid file to show up \n    // until our timer expires in which case we admit defeat\n    while (true) {\n      processId \u003d ProcessIdFileReader.getProcessId(pidFilePath);\n      if (processId !\u003d null) {\n        LOG.debug(\"Got pid {} for container {}\", processId, containerIdStr);\n        break;\n      }\n      else if ((sleepCounter*sleepInterval) \u003e maxKillWaitTime) {\n        LOG.info(\"Could not get pid for \" + containerIdStr\n        \t\t+ \". Waited for \" + maxKillWaitTime + \" ms.\");\n        break;\n      }\n      else {\n        ++sleepCounter;\n        Thread.sleep(sleepInterval);\n      }\n    }\n    return processId;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java",
      "extendedDetails": {}
    },
    "5ce70e1211e624d58e8bb1181aec00729ebdc085": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-7644. NM gets backed up deleting docker containers. Contributed by Chandni Singh\n",
      "commitDate": "10/10/18 7:52 AM",
      "commitName": "5ce70e1211e624d58e8bb1181aec00729ebdc085",
      "commitAuthor": "Jason Lowe",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7644. NM gets backed up deleting docker containers. Contributed by Chandni Singh\n",
          "commitDate": "10/10/18 7:52 AM",
          "commitName": "5ce70e1211e624d58e8bb1181aec00729ebdc085",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "27/09/18 12:31 PM",
          "commitNameOld": "b237a0dd44ab285941983648d7ef26b99b30d624",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 12.81,
          "commitsBetweenForRepo": 107,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,37 @@\n-  private String getContainerPid(Path pidFilePath) throws Exception {\n+  String getContainerPid() throws Exception {\n+    if (pidFilePath \u003d\u003d null) {\n+      return null;\n+    }\n     String containerIdStr \u003d \n         container.getContainerId().toString();\n-    String processId \u003d null;\n+    String processId;\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Accessing pid for container \" + containerIdStr\n           + \" from pid file \" + pidFilePath);\n     }\n     int sleepCounter \u003d 0;\n     final int sleepInterval \u003d 100;\n \n     // loop waiting for pid file to show up \n     // until our timer expires in which case we admit defeat\n     while (true) {\n       processId \u003d ProcessIdFileReader.getProcessId(pidFilePath);\n       if (processId !\u003d null) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\n               \"Got pid \" + processId + \" for container \" + containerIdStr);\n         }\n         break;\n       }\n       else if ((sleepCounter*sleepInterval) \u003e maxKillWaitTime) {\n         LOG.info(\"Could not get pid for \" + containerIdStr\n         \t\t+ \". Waited for \" + maxKillWaitTime + \" ms.\");\n         break;\n       }\n       else {\n         ++sleepCounter;\n         Thread.sleep(sleepInterval);\n       }\n     }\n     return processId;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  String getContainerPid() throws Exception {\n    if (pidFilePath \u003d\u003d null) {\n      return null;\n    }\n    String containerIdStr \u003d \n        container.getContainerId().toString();\n    String processId;\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Accessing pid for container \" + containerIdStr\n          + \" from pid file \" + pidFilePath);\n    }\n    int sleepCounter \u003d 0;\n    final int sleepInterval \u003d 100;\n\n    // loop waiting for pid file to show up \n    // until our timer expires in which case we admit defeat\n    while (true) {\n      processId \u003d ProcessIdFileReader.getProcessId(pidFilePath);\n      if (processId !\u003d null) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\n              \"Got pid \" + processId + \" for container \" + containerIdStr);\n        }\n        break;\n      }\n      else if ((sleepCounter*sleepInterval) \u003e maxKillWaitTime) {\n        LOG.info(\"Could not get pid for \" + containerIdStr\n        \t\t+ \". Waited for \" + maxKillWaitTime + \" ms.\");\n        break;\n      }\n      else {\n        ++sleepCounter;\n        Thread.sleep(sleepInterval);\n      }\n    }\n    return processId;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java",
          "extendedDetails": {
            "oldValue": "[pidFilePath-Path]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-7644. NM gets backed up deleting docker containers. Contributed by Chandni Singh\n",
          "commitDate": "10/10/18 7:52 AM",
          "commitName": "5ce70e1211e624d58e8bb1181aec00729ebdc085",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "27/09/18 12:31 PM",
          "commitNameOld": "b237a0dd44ab285941983648d7ef26b99b30d624",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 12.81,
          "commitsBetweenForRepo": 107,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,37 @@\n-  private String getContainerPid(Path pidFilePath) throws Exception {\n+  String getContainerPid() throws Exception {\n+    if (pidFilePath \u003d\u003d null) {\n+      return null;\n+    }\n     String containerIdStr \u003d \n         container.getContainerId().toString();\n-    String processId \u003d null;\n+    String processId;\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Accessing pid for container \" + containerIdStr\n           + \" from pid file \" + pidFilePath);\n     }\n     int sleepCounter \u003d 0;\n     final int sleepInterval \u003d 100;\n \n     // loop waiting for pid file to show up \n     // until our timer expires in which case we admit defeat\n     while (true) {\n       processId \u003d ProcessIdFileReader.getProcessId(pidFilePath);\n       if (processId !\u003d null) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\n               \"Got pid \" + processId + \" for container \" + containerIdStr);\n         }\n         break;\n       }\n       else if ((sleepCounter*sleepInterval) \u003e maxKillWaitTime) {\n         LOG.info(\"Could not get pid for \" + containerIdStr\n         \t\t+ \". Waited for \" + maxKillWaitTime + \" ms.\");\n         break;\n       }\n       else {\n         ++sleepCounter;\n         Thread.sleep(sleepInterval);\n       }\n     }\n     return processId;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  String getContainerPid() throws Exception {\n    if (pidFilePath \u003d\u003d null) {\n      return null;\n    }\n    String containerIdStr \u003d \n        container.getContainerId().toString();\n    String processId;\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Accessing pid for container \" + containerIdStr\n          + \" from pid file \" + pidFilePath);\n    }\n    int sleepCounter \u003d 0;\n    final int sleepInterval \u003d 100;\n\n    // loop waiting for pid file to show up \n    // until our timer expires in which case we admit defeat\n    while (true) {\n      processId \u003d ProcessIdFileReader.getProcessId(pidFilePath);\n      if (processId !\u003d null) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\n              \"Got pid \" + processId + \" for container \" + containerIdStr);\n        }\n        break;\n      }\n      else if ((sleepCounter*sleepInterval) \u003e maxKillWaitTime) {\n        LOG.info(\"Could not get pid for \" + containerIdStr\n        \t\t+ \". Waited for \" + maxKillWaitTime + \" ms.\");\n        break;\n      }\n      else {\n        ++sleepCounter;\n        Thread.sleep(sleepInterval);\n      }\n    }\n    return processId;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7644. NM gets backed up deleting docker containers. Contributed by Chandni Singh\n",
          "commitDate": "10/10/18 7:52 AM",
          "commitName": "5ce70e1211e624d58e8bb1181aec00729ebdc085",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "27/09/18 12:31 PM",
          "commitNameOld": "b237a0dd44ab285941983648d7ef26b99b30d624",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 12.81,
          "commitsBetweenForRepo": 107,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,37 @@\n-  private String getContainerPid(Path pidFilePath) throws Exception {\n+  String getContainerPid() throws Exception {\n+    if (pidFilePath \u003d\u003d null) {\n+      return null;\n+    }\n     String containerIdStr \u003d \n         container.getContainerId().toString();\n-    String processId \u003d null;\n+    String processId;\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Accessing pid for container \" + containerIdStr\n           + \" from pid file \" + pidFilePath);\n     }\n     int sleepCounter \u003d 0;\n     final int sleepInterval \u003d 100;\n \n     // loop waiting for pid file to show up \n     // until our timer expires in which case we admit defeat\n     while (true) {\n       processId \u003d ProcessIdFileReader.getProcessId(pidFilePath);\n       if (processId !\u003d null) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\n               \"Got pid \" + processId + \" for container \" + containerIdStr);\n         }\n         break;\n       }\n       else if ((sleepCounter*sleepInterval) \u003e maxKillWaitTime) {\n         LOG.info(\"Could not get pid for \" + containerIdStr\n         \t\t+ \". Waited for \" + maxKillWaitTime + \" ms.\");\n         break;\n       }\n       else {\n         ++sleepCounter;\n         Thread.sleep(sleepInterval);\n       }\n     }\n     return processId;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  String getContainerPid() throws Exception {\n    if (pidFilePath \u003d\u003d null) {\n      return null;\n    }\n    String containerIdStr \u003d \n        container.getContainerId().toString();\n    String processId;\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Accessing pid for container \" + containerIdStr\n          + \" from pid file \" + pidFilePath);\n    }\n    int sleepCounter \u003d 0;\n    final int sleepInterval \u003d 100;\n\n    // loop waiting for pid file to show up \n    // until our timer expires in which case we admit defeat\n    while (true) {\n      processId \u003d ProcessIdFileReader.getProcessId(pidFilePath);\n      if (processId !\u003d null) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\n              \"Got pid \" + processId + \" for container \" + containerIdStr);\n        }\n        break;\n      }\n      else if ((sleepCounter*sleepInterval) \u003e maxKillWaitTime) {\n        LOG.info(\"Could not get pid for \" + containerIdStr\n        \t\t+ \". Waited for \" + maxKillWaitTime + \" ms.\");\n        break;\n      }\n      else {\n        ++sleepCounter;\n        Thread.sleep(sleepInterval);\n      }\n    }\n    return processId;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java",
          "extendedDetails": {}
        }
      ]
    },
    "310aa4686eb697f0700a71d33106514c404dab1b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5805. Add isDebugEnabled check for debug logs in nodemanager (Bibin A Chundatt via Varun Saxena)\n",
      "commitDate": "01/11/16 2:21 AM",
      "commitName": "310aa4686eb697f0700a71d33106514c404dab1b",
      "commitAuthor": "Varun Saxena",
      "commitDateOld": "06/09/16 7:31 AM",
      "commitNameOld": "e6fcfe28e304062c7d09231db757acb2953703ce",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 55.78,
      "commitsBetweenForRepo": 428,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,34 @@\n   private String getContainerPid(Path pidFilePath) throws Exception {\n     String containerIdStr \u003d \n         container.getContainerId().toString();\n     String processId \u003d null;\n-    LOG.debug(\"Accessing pid for container \" + containerIdStr\n-        + \" from pid file \" + pidFilePath);\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Accessing pid for container \" + containerIdStr\n+          + \" from pid file \" + pidFilePath);\n+    }\n     int sleepCounter \u003d 0;\n     final int sleepInterval \u003d 100;\n \n     // loop waiting for pid file to show up \n     // until our timer expires in which case we admit defeat\n     while (true) {\n       processId \u003d ProcessIdFileReader.getProcessId(pidFilePath);\n       if (processId !\u003d null) {\n-        LOG.debug(\"Got pid \" + processId + \" for container \"\n-            + containerIdStr);\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\n+              \"Got pid \" + processId + \" for container \" + containerIdStr);\n+        }\n         break;\n       }\n       else if ((sleepCounter*sleepInterval) \u003e maxKillWaitTime) {\n         LOG.info(\"Could not get pid for \" + containerIdStr\n         \t\t+ \". Waited for \" + maxKillWaitTime + \" ms.\");\n         break;\n       }\n       else {\n         ++sleepCounter;\n         Thread.sleep(sleepInterval);\n       }\n     }\n     return processId;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private String getContainerPid(Path pidFilePath) throws Exception {\n    String containerIdStr \u003d \n        container.getContainerId().toString();\n    String processId \u003d null;\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Accessing pid for container \" + containerIdStr\n          + \" from pid file \" + pidFilePath);\n    }\n    int sleepCounter \u003d 0;\n    final int sleepInterval \u003d 100;\n\n    // loop waiting for pid file to show up \n    // until our timer expires in which case we admit defeat\n    while (true) {\n      processId \u003d ProcessIdFileReader.getProcessId(pidFilePath);\n      if (processId !\u003d null) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\n              \"Got pid \" + processId + \" for container \" + containerIdStr);\n        }\n        break;\n      }\n      else if ((sleepCounter*sleepInterval) \u003e maxKillWaitTime) {\n        LOG.info(\"Could not get pid for \" + containerIdStr\n        \t\t+ \". Waited for \" + maxKillWaitTime + \" ms.\");\n        break;\n      }\n      else {\n        ++sleepCounter;\n        Thread.sleep(sleepInterval);\n      }\n    }\n    return processId;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java",
      "extendedDetails": {}
    },
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1942. Deprecate toString/fromString methods from ConverterUtils and move them to records classes like ContainerId/ApplicationId, etc. (wangda)\n",
      "commitDate": "14/06/16 3:06 PM",
      "commitName": "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "29/04/16 3:39 AM",
      "commitNameOld": "0f25a1bb52bc56661fd020a6ba82df99f8c6ef1f",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 46.48,
      "commitsBetweenForRepo": 304,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   private String getContainerPid(Path pidFilePath) throws Exception {\n     String containerIdStr \u003d \n-        ConverterUtils.toString(container.getContainerId());\n+        container.getContainerId().toString();\n     String processId \u003d null;\n     LOG.debug(\"Accessing pid for container \" + containerIdStr\n         + \" from pid file \" + pidFilePath);\n     int sleepCounter \u003d 0;\n     final int sleepInterval \u003d 100;\n \n     // loop waiting for pid file to show up \n     // until our timer expires in which case we admit defeat\n     while (true) {\n       processId \u003d ProcessIdFileReader.getProcessId(pidFilePath);\n       if (processId !\u003d null) {\n         LOG.debug(\"Got pid \" + processId + \" for container \"\n             + containerIdStr);\n         break;\n       }\n       else if ((sleepCounter*sleepInterval) \u003e maxKillWaitTime) {\n         LOG.info(\"Could not get pid for \" + containerIdStr\n         \t\t+ \". Waited for \" + maxKillWaitTime + \" ms.\");\n         break;\n       }\n       else {\n         ++sleepCounter;\n         Thread.sleep(sleepInterval);\n       }\n     }\n     return processId;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private String getContainerPid(Path pidFilePath) throws Exception {\n    String containerIdStr \u003d \n        container.getContainerId().toString();\n    String processId \u003d null;\n    LOG.debug(\"Accessing pid for container \" + containerIdStr\n        + \" from pid file \" + pidFilePath);\n    int sleepCounter \u003d 0;\n    final int sleepInterval \u003d 100;\n\n    // loop waiting for pid file to show up \n    // until our timer expires in which case we admit defeat\n    while (true) {\n      processId \u003d ProcessIdFileReader.getProcessId(pidFilePath);\n      if (processId !\u003d null) {\n        LOG.debug(\"Got pid \" + processId + \" for container \"\n            + containerIdStr);\n        break;\n      }\n      else if ((sleepCounter*sleepInterval) \u003e maxKillWaitTime) {\n        LOG.info(\"Could not get pid for \" + containerIdStr\n        \t\t+ \". Waited for \" + maxKillWaitTime + \" ms.\");\n        break;\n      }\n      else {\n        ++sleepCounter;\n        Thread.sleep(sleepInterval);\n      }\n    }\n    return processId;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java",
      "extendedDetails": {}
    },
    "c5a46d4c8ca236ff641a309f256bbbdf4dd56db5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1922. Fixed NodeManager to kill process-trees correctly in the presence of races between the launch and the stop-container call and when root processes crash. Contributed by Billie Rinaldi.\n",
      "commitDate": "03/11/14 4:38 PM",
      "commitName": "c5a46d4c8ca236ff641a309f256bbbdf4dd56db5",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "22/10/14 3:57 PM",
      "commitNameOld": "3b12fd6cfbf4cc91ef8e8616c7aafa9de006cde5",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 12.07,
      "commitsBetweenForRepo": 122,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,30 @@\n   private String getContainerPid(Path pidFilePath) throws Exception {\n     String containerIdStr \u003d \n         ConverterUtils.toString(container.getContainerId());\n     String processId \u003d null;\n     LOG.debug(\"Accessing pid for container \" + containerIdStr\n         + \" from pid file \" + pidFilePath);\n     int sleepCounter \u003d 0;\n     final int sleepInterval \u003d 100;\n \n     // loop waiting for pid file to show up \n-    // until either the completed flag is set which means something bad \n-    // happened or our timer expires in which case we admit defeat\n-    while (!completed.get()) {\n+    // until our timer expires in which case we admit defeat\n+    while (true) {\n       processId \u003d ProcessIdFileReader.getProcessId(pidFilePath);\n       if (processId !\u003d null) {\n         LOG.debug(\"Got pid \" + processId + \" for container \"\n             + containerIdStr);\n         break;\n       }\n       else if ((sleepCounter*sleepInterval) \u003e maxKillWaitTime) {\n         LOG.info(\"Could not get pid for \" + containerIdStr\n         \t\t+ \". Waited for \" + maxKillWaitTime + \" ms.\");\n         break;\n       }\n       else {\n         ++sleepCounter;\n         Thread.sleep(sleepInterval);\n       }\n     }\n     return processId;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private String getContainerPid(Path pidFilePath) throws Exception {\n    String containerIdStr \u003d \n        ConverterUtils.toString(container.getContainerId());\n    String processId \u003d null;\n    LOG.debug(\"Accessing pid for container \" + containerIdStr\n        + \" from pid file \" + pidFilePath);\n    int sleepCounter \u003d 0;\n    final int sleepInterval \u003d 100;\n\n    // loop waiting for pid file to show up \n    // until our timer expires in which case we admit defeat\n    while (true) {\n      processId \u003d ProcessIdFileReader.getProcessId(pidFilePath);\n      if (processId !\u003d null) {\n        LOG.debug(\"Got pid \" + processId + \" for container \"\n            + containerIdStr);\n        break;\n      }\n      else if ((sleepCounter*sleepInterval) \u003e maxKillWaitTime) {\n        LOG.info(\"Could not get pid for \" + containerIdStr\n        \t\t+ \". Waited for \" + maxKillWaitTime + \" ms.\");\n        break;\n      }\n      else {\n        ++sleepCounter;\n        Thread.sleep(sleepInterval);\n      }\n    }\n    return processId;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java",
      "extendedDetails": {}
    },
    "2692675fc3b5046d2ec88542c30203c87e135b70": {
      "type": "Ybodychange",
      "commitMessage": "YARN-684. ContainerManager.startContainer should use ContainerTokenIdentifier instead of the entire Container. Contributed by Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1488085 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/05/13 9:13 PM",
      "commitName": "2692675fc3b5046d2ec88542c30203c87e135b70",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "23/05/13 8:22 PM",
      "commitNameOld": "259edf8dca44de54033e96f7eb65a83aaa6096f2",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 7.03,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   private String getContainerPid(Path pidFilePath) throws Exception {\n     String containerIdStr \u003d \n-        ConverterUtils.toString(container.getContainer().getId());\n+        ConverterUtils.toString(container.getContainerId());\n     String processId \u003d null;\n     LOG.debug(\"Accessing pid for container \" + containerIdStr\n         + \" from pid file \" + pidFilePath);\n     int sleepCounter \u003d 0;\n     final int sleepInterval \u003d 100;\n \n     // loop waiting for pid file to show up \n     // until either the completed flag is set which means something bad \n     // happened or our timer expires in which case we admit defeat\n     while (!completed.get()) {\n       processId \u003d ProcessIdFileReader.getProcessId(pidFilePath);\n       if (processId !\u003d null) {\n         LOG.debug(\"Got pid \" + processId + \" for container \"\n             + containerIdStr);\n         break;\n       }\n       else if ((sleepCounter*sleepInterval) \u003e maxKillWaitTime) {\n         LOG.info(\"Could not get pid for \" + containerIdStr\n         \t\t+ \". Waited for \" + maxKillWaitTime + \" ms.\");\n         break;\n       }\n       else {\n         ++sleepCounter;\n         Thread.sleep(sleepInterval);\n       }\n     }\n     return processId;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private String getContainerPid(Path pidFilePath) throws Exception {\n    String containerIdStr \u003d \n        ConverterUtils.toString(container.getContainerId());\n    String processId \u003d null;\n    LOG.debug(\"Accessing pid for container \" + containerIdStr\n        + \" from pid file \" + pidFilePath);\n    int sleepCounter \u003d 0;\n    final int sleepInterval \u003d 100;\n\n    // loop waiting for pid file to show up \n    // until either the completed flag is set which means something bad \n    // happened or our timer expires in which case we admit defeat\n    while (!completed.get()) {\n      processId \u003d ProcessIdFileReader.getProcessId(pidFilePath);\n      if (processId !\u003d null) {\n        LOG.debug(\"Got pid \" + processId + \" for container \"\n            + containerIdStr);\n        break;\n      }\n      else if ((sleepCounter*sleepInterval) \u003e maxKillWaitTime) {\n        LOG.info(\"Could not get pid for \" + containerIdStr\n        \t\t+ \". Waited for \" + maxKillWaitTime + \" ms.\");\n        break;\n      }\n      else {\n        ++sleepCounter;\n        Thread.sleep(sleepInterval);\n      }\n    }\n    return processId;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java",
      "extendedDetails": {}
    },
    "27e8c86999bc6a972a99216060b11ef35b7de858": {
      "type": "Ybodychange",
      "commitMessage": "YARN-561. Modified NodeManager to set key information into the environment of every container that it launches. Contributed by Xuan Gong.\nMAPREDUCE-5175. Updated MR App to not set envs that will be set by NMs anyways after YARN-561. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1471156 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/04/13 2:39 PM",
      "commitName": "27e8c86999bc6a972a99216060b11ef35b7de858",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "19/04/13 12:29 PM",
      "commitNameOld": "edcfd4527ca93acdf54403aafaa070b17aff5dd0",
      "commitAuthorOld": "Bikas Saha",
      "daysBetweenCommits": 4.09,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   private String getContainerPid(Path pidFilePath) throws Exception {\n     String containerIdStr \u003d \n-        ConverterUtils.toString(container.getContainerID());\n+        ConverterUtils.toString(container.getContainer().getId());\n     String processId \u003d null;\n     LOG.debug(\"Accessing pid for container \" + containerIdStr\n         + \" from pid file \" + pidFilePath);\n     int sleepCounter \u003d 0;\n     final int sleepInterval \u003d 100;\n \n     // loop waiting for pid file to show up \n     // until either the completed flag is set which means something bad \n     // happened or our timer expires in which case we admit defeat\n     while (!completed.get()) {\n       processId \u003d ProcessIdFileReader.getProcessId(pidFilePath);\n       if (processId !\u003d null) {\n         LOG.debug(\"Got pid \" + processId + \" for container \"\n             + containerIdStr);\n         break;\n       }\n       else if ((sleepCounter*sleepInterval) \u003e maxKillWaitTime) {\n         LOG.info(\"Could not get pid for \" + containerIdStr\n         \t\t+ \". Waited for \" + maxKillWaitTime + \" ms.\");\n         break;\n       }\n       else {\n         ++sleepCounter;\n         Thread.sleep(sleepInterval);\n       }\n     }\n     return processId;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private String getContainerPid(Path pidFilePath) throws Exception {\n    String containerIdStr \u003d \n        ConverterUtils.toString(container.getContainer().getId());\n    String processId \u003d null;\n    LOG.debug(\"Accessing pid for container \" + containerIdStr\n        + \" from pid file \" + pidFilePath);\n    int sleepCounter \u003d 0;\n    final int sleepInterval \u003d 100;\n\n    // loop waiting for pid file to show up \n    // until either the completed flag is set which means something bad \n    // happened or our timer expires in which case we admit defeat\n    while (!completed.get()) {\n      processId \u003d ProcessIdFileReader.getProcessId(pidFilePath);\n      if (processId !\u003d null) {\n        LOG.debug(\"Got pid \" + processId + \" for container \"\n            + containerIdStr);\n        break;\n      }\n      else if ((sleepCounter*sleepInterval) \u003e maxKillWaitTime) {\n        LOG.info(\"Could not get pid for \" + containerIdStr\n        \t\t+ \". Waited for \" + maxKillWaitTime + \" ms.\");\n        break;\n      }\n      else {\n        ++sleepCounter;\n        Thread.sleep(sleepInterval);\n      }\n    }\n    return processId;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private String getContainerPid(Path pidFilePath) throws Exception {\n    String containerIdStr \u003d \n        ConverterUtils.toString(container.getContainerID());\n    String processId \u003d null;\n    LOG.debug(\"Accessing pid for container \" + containerIdStr\n        + \" from pid file \" + pidFilePath);\n    int sleepCounter \u003d 0;\n    final int sleepInterval \u003d 100;\n\n    // loop waiting for pid file to show up \n    // until either the completed flag is set which means something bad \n    // happened or our timer expires in which case we admit defeat\n    while (!completed.get()) {\n      processId \u003d ProcessIdFileReader.getProcessId(pidFilePath);\n      if (processId !\u003d null) {\n        LOG.debug(\"Got pid \" + processId + \" for container \"\n            + containerIdStr);\n        break;\n      }\n      else if ((sleepCounter*sleepInterval) \u003e maxKillWaitTime) {\n        LOG.info(\"Could not get pid for \" + containerIdStr\n        \t\t+ \". Waited for \" + maxKillWaitTime + \" ms.\");\n        break;\n      }\n      else {\n        ++sleepCounter;\n        Thread.sleep(sleepInterval);\n      }\n    }\n    return processId;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java"
      }
    },
    "2fe343f96348e894e6ed16c447c8c77ba1611d11": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-3240. Fixed NodeManager to be able to forcefully cleanup its containers (process-trees) irrespective of whether the container succeeded, or killed. Contributed by Hitesh Shah.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1189711 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/10/11 5:03 AM",
      "commitName": "2fe343f96348e894e6ed16c447c8c77ba1611d11",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,31 @@\n+  private String getContainerPid(Path pidFilePath) throws Exception {\n+    String containerIdStr \u003d \n+        ConverterUtils.toString(container.getContainerID());\n+    String processId \u003d null;\n+    LOG.debug(\"Accessing pid for container \" + containerIdStr\n+        + \" from pid file \" + pidFilePath);\n+    int sleepCounter \u003d 0;\n+    final int sleepInterval \u003d 100;\n+\n+    // loop waiting for pid file to show up \n+    // until either the completed flag is set which means something bad \n+    // happened or our timer expires in which case we admit defeat\n+    while (!completed.get()) {\n+      processId \u003d ProcessIdFileReader.getProcessId(pidFilePath);\n+      if (processId !\u003d null) {\n+        LOG.debug(\"Got pid \" + processId + \" for container \"\n+            + containerIdStr);\n+        break;\n+      }\n+      else if ((sleepCounter*sleepInterval) \u003e maxKillWaitTime) {\n+        LOG.info(\"Could not get pid for \" + containerIdStr\n+        \t\t+ \". Waited for \" + maxKillWaitTime + \" ms.\");\n+        break;\n+      }\n+      else {\n+        ++sleepCounter;\n+        Thread.sleep(sleepInterval);\n+      }\n+    }\n+    return processId;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private String getContainerPid(Path pidFilePath) throws Exception {\n    String containerIdStr \u003d \n        ConverterUtils.toString(container.getContainerID());\n    String processId \u003d null;\n    LOG.debug(\"Accessing pid for container \" + containerIdStr\n        + \" from pid file \" + pidFilePath);\n    int sleepCounter \u003d 0;\n    final int sleepInterval \u003d 100;\n\n    // loop waiting for pid file to show up \n    // until either the completed flag is set which means something bad \n    // happened or our timer expires in which case we admit defeat\n    while (!completed.get()) {\n      processId \u003d ProcessIdFileReader.getProcessId(pidFilePath);\n      if (processId !\u003d null) {\n        LOG.debug(\"Got pid \" + processId + \" for container \"\n            + containerIdStr);\n        break;\n      }\n      else if ((sleepCounter*sleepInterval) \u003e maxKillWaitTime) {\n        LOG.info(\"Could not get pid for \" + containerIdStr\n        \t\t+ \". Waited for \" + maxKillWaitTime + \" ms.\");\n        break;\n      }\n      else {\n        ++sleepCounter;\n        Thread.sleep(sleepInterval);\n      }\n    }\n    return processId;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java"
    }
  }
}