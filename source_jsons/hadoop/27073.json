{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ProxyCA.java",
  "functionName": "checkServerTrusted",
  "functionId": "checkServerTrusted___certs-java.security.cert.X509Certificate[]__authType-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/ProxyCA.java",
  "functionStartLine": 293,
  "functionEndLine": 330,
  "numCommitsSeen": 3,
  "timeTaken": 1259,
  "changeHistory": [
    "c2288ac45b748b4119442c46147ccc324926c340"
  ],
  "changeHistoryShort": {
    "c2288ac45b748b4119442c46147ccc324926c340": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c2288ac45b748b4119442c46147ccc324926c340": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8448. AM HTTPS Support for AM communication with RMWeb proxy. (Contributed by Robert Kanter)\n",
      "commitDate": "16/10/18 1:36 PM",
      "commitName": "c2288ac45b748b4119442c46147ccc324926c340",
      "commitAuthor": "Haibo Chen",
      "diff": "@@ -0,0 +1,38 @@\n+      public void checkServerTrusted(\n+          java.security.cert.X509Certificate[] certs, String authType)\n+          throws CertificateException {\n+        // Our certs will always have 2 in the chain, with 0 being the app\u0027s\n+        // cert and 1 being the RM\u0027s cert\n+        boolean issuedByRM \u003d false;\n+        if (certs.length \u003d\u003d 2) {\n+          try {\n+            // We can verify both certs using the CA cert\u0027s public key - the\n+            // child cert\u0027s info is not needed\n+            certs[0].verify(caKeyPair.getPublic());\n+            certs[1].verify(caKeyPair.getPublic());\n+            issuedByRM \u003d true;\n+          } catch (CertificateException | NoSuchAlgorithmException\n+              | InvalidKeyException | NoSuchProviderException\n+              | SignatureException e) {\n+            // Fall back to the default trust manager\n+            LOG.debug(\"Could not verify certificate with RM CA, falling \" +\n+                \"back to default\", e);\n+            defaultTrustManager.checkServerTrusted(certs, authType);\n+          }\n+        } else {\n+          LOG.debug(\"Certificate not issued by RM CA, falling back to \" +\n+              \"default\");\n+          defaultTrustManager.checkServerTrusted(certs, authType);\n+        }\n+        if (issuedByRM) {\n+          // Check that it has the correct App ID\n+          if (!certs[0].getSubjectX500Principal().getName()\n+              .equals(\"CN\u003d\" + appId)) {\n+            throw new CertificateException(\n+                \"Expected to find Subject X500 Principal with CN\u003d\"\n+                    + appId + \" but found \"\n+                    + certs[0].getSubjectX500Principal().getName());\n+          }\n+          LOG.debug(\"Verified certificate signed by RM CA\");\n+        }\n+      }\n\\ No newline at end of file\n",
      "actualSource": "      public void checkServerTrusted(\n          java.security.cert.X509Certificate[] certs, String authType)\n          throws CertificateException {\n        // Our certs will always have 2 in the chain, with 0 being the app\u0027s\n        // cert and 1 being the RM\u0027s cert\n        boolean issuedByRM \u003d false;\n        if (certs.length \u003d\u003d 2) {\n          try {\n            // We can verify both certs using the CA cert\u0027s public key - the\n            // child cert\u0027s info is not needed\n            certs[0].verify(caKeyPair.getPublic());\n            certs[1].verify(caKeyPair.getPublic());\n            issuedByRM \u003d true;\n          } catch (CertificateException | NoSuchAlgorithmException\n              | InvalidKeyException | NoSuchProviderException\n              | SignatureException e) {\n            // Fall back to the default trust manager\n            LOG.debug(\"Could not verify certificate with RM CA, falling \" +\n                \"back to default\", e);\n            defaultTrustManager.checkServerTrusted(certs, authType);\n          }\n        } else {\n          LOG.debug(\"Certificate not issued by RM CA, falling back to \" +\n              \"default\");\n          defaultTrustManager.checkServerTrusted(certs, authType);\n        }\n        if (issuedByRM) {\n          // Check that it has the correct App ID\n          if (!certs[0].getSubjectX500Principal().getName()\n              .equals(\"CN\u003d\" + appId)) {\n            throw new CertificateException(\n                \"Expected to find Subject X500 Principal with CN\u003d\"\n                    + appId + \" but found \"\n                    + certs[0].getSubjectX500Principal().getName());\n          }\n          LOG.debug(\"Verified certificate signed by RM CA\");\n        }\n      }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-web-proxy/src/main/java/org/apache/hadoop/yarn/server/webproxy/ProxyCA.java"
    }
  }
}