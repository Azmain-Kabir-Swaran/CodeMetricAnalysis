{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FederationInterceptor.java",
  "functionName": "splitAllocateRequest",
  "functionId": "splitAllocateRequest___request-AllocateRequest",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java",
  "functionStartLine": 1075,
  "functionEndLine": 1160,
  "numCommitsSeen": 21,
  "timeTaken": 1675,
  "changeHistory": [
    "ca669f9f8bc7abe5b7d4648c589aa1756bd336d1",
    "70b1a757f13b01a9192ea5fb0820ba7babfd974e",
    "bed1832c934fe4ba44efdcdc49fce06457dc3d4f"
  ],
  "changeHistoryShort": {
    "ca669f9f8bc7abe5b7d4648c589aa1756bd336d1": "Ybodychange",
    "70b1a757f13b01a9192ea5fb0820ba7babfd974e": "Ybodychange",
    "bed1832c934fe4ba44efdcdc49fce06457dc3d4f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ca669f9f8bc7abe5b7d4648c589aa1756bd336d1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6962. Add support for updateContainers when allocating using FederationInterceptor. (Botong Huang via Subru).\n",
      "commitDate": "28/09/17 1:04 PM",
      "commitName": "ca669f9f8bc7abe5b7d4648c589aa1756bd336d1",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "07/08/17 4:58 PM",
      "commitNameOld": "c61f2c419830e40bb47fb2b1fe1f7d6109ed29a9",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 51.84,
      "commitsBetweenForRepo": 471,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,83 +1,86 @@\n   private Map\u003cSubClusterId, AllocateRequest\u003e splitAllocateRequest(\n       AllocateRequest request) throws YarnException {\n     Map\u003cSubClusterId, AllocateRequest\u003e requestMap \u003d\n         new HashMap\u003cSubClusterId, AllocateRequest\u003e();\n \n     // Create heart beat request for home sub-cluster resource manager\n     findOrCreateAllocateRequestForSubCluster(this.homeSubClusterId, request,\n         requestMap);\n \n     // Create heart beat request instances for all other already registered\n     // sub-cluster resource managers\n     Set\u003cString\u003e subClusterIds \u003d this.uamPool.getAllUAMIds();\n     for (String subClusterId : subClusterIds) {\n       findOrCreateAllocateRequestForSubCluster(\n           SubClusterId.newInstance(subClusterId), request, requestMap);\n     }\n \n     if (!isNullOrEmpty(request.getAskList())) {\n       // Ask the federation policy interpreter to split the ask list for\n       // sending it to all the sub-cluster resource managers.\n       Map\u003cSubClusterId, List\u003cResourceRequest\u003e\u003e asks \u003d\n           splitResourceRequests(request.getAskList());\n \n       // Add the askLists to the corresponding sub-cluster requests.\n       for (Entry\u003cSubClusterId, List\u003cResourceRequest\u003e\u003e entry : asks.entrySet()) {\n         AllocateRequest newRequest \u003d findOrCreateAllocateRequestForSubCluster(\n             entry.getKey(), request, requestMap);\n         newRequest.getAskList().addAll(entry.getValue());\n       }\n     }\n \n-    if (request.getResourceBlacklistRequest() !\u003d null \u0026\u0026 !isNullOrEmpty(\n-        request.getResourceBlacklistRequest().getBlacklistAdditions())) {\n-      for (String resourceName : request.getResourceBlacklistRequest()\n-          .getBlacklistAdditions()) {\n-        SubClusterId subClusterId \u003d getSubClusterForNode(resourceName);\n-        if (subClusterId !\u003d null) {\n-          AllocateRequest newRequest \u003d findOrCreateAllocateRequestForSubCluster(\n-              subClusterId, request, requestMap);\n-          newRequest.getResourceBlacklistRequest().getBlacklistAdditions()\n-              .add(resourceName);\n+    if (request.getResourceBlacklistRequest() !\u003d null) {\n+      if (!isNullOrEmpty(\n+          request.getResourceBlacklistRequest().getBlacklistAdditions())) {\n+        for (String resourceName : request.getResourceBlacklistRequest()\n+            .getBlacklistAdditions()) {\n+          SubClusterId subClusterId \u003d getSubClusterForNode(resourceName);\n+          if (subClusterId !\u003d null) {\n+            AllocateRequest newRequest \u003d\n+                findOrCreateAllocateRequestForSubCluster(subClusterId, request,\n+                    requestMap);\n+            newRequest.getResourceBlacklistRequest().getBlacklistAdditions()\n+                .add(resourceName);\n+          }\n         }\n       }\n-    }\n-\n-    if (request.getResourceBlacklistRequest() !\u003d null \u0026\u0026 !isNullOrEmpty(\n-        request.getResourceBlacklistRequest().getBlacklistRemovals())) {\n-      for (String resourceName : request.getResourceBlacklistRequest()\n-          .getBlacklistRemovals()) {\n-        SubClusterId subClusterId \u003d getSubClusterForNode(resourceName);\n-        if (subClusterId !\u003d null) {\n-          AllocateRequest newRequest \u003d findOrCreateAllocateRequestForSubCluster(\n-              subClusterId, request, requestMap);\n-          newRequest.getResourceBlacklistRequest().getBlacklistRemovals()\n-              .add(resourceName);\n+      if (!isNullOrEmpty(\n+          request.getResourceBlacklistRequest().getBlacklistRemovals())) {\n+        for (String resourceName : request.getResourceBlacklistRequest()\n+            .getBlacklistRemovals()) {\n+          SubClusterId subClusterId \u003d getSubClusterForNode(resourceName);\n+          if (subClusterId !\u003d null) {\n+            AllocateRequest newRequest \u003d\n+                findOrCreateAllocateRequestForSubCluster(subClusterId, request,\n+                    requestMap);\n+            newRequest.getResourceBlacklistRequest().getBlacklistRemovals()\n+                .add(resourceName);\n+          }\n         }\n       }\n     }\n \n     if (!isNullOrEmpty(request.getReleaseList())) {\n       for (ContainerId cid : request.getReleaseList()) {\n         if (warnIfNotExists(cid, \"release\")) {\n           SubClusterId subClusterId \u003d\n               this.containerIdToSubClusterIdMap.get(cid);\n           AllocateRequest newRequest \u003d requestMap.get(subClusterId);\n           newRequest.getReleaseList().add(cid);\n         }\n       }\n     }\n \n     if (!isNullOrEmpty(request.getUpdateRequests())) {\n       for (UpdateContainerRequest ucr : request.getUpdateRequests()) {\n         if (warnIfNotExists(ucr.getContainerId(), \"update\")) {\n           SubClusterId subClusterId \u003d\n               this.containerIdToSubClusterIdMap.get(ucr.getContainerId());\n           AllocateRequest newRequest \u003d requestMap.get(subClusterId);\n           newRequest.getUpdateRequests().add(ucr);\n         }\n       }\n     }\n \n     return requestMap;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Map\u003cSubClusterId, AllocateRequest\u003e splitAllocateRequest(\n      AllocateRequest request) throws YarnException {\n    Map\u003cSubClusterId, AllocateRequest\u003e requestMap \u003d\n        new HashMap\u003cSubClusterId, AllocateRequest\u003e();\n\n    // Create heart beat request for home sub-cluster resource manager\n    findOrCreateAllocateRequestForSubCluster(this.homeSubClusterId, request,\n        requestMap);\n\n    // Create heart beat request instances for all other already registered\n    // sub-cluster resource managers\n    Set\u003cString\u003e subClusterIds \u003d this.uamPool.getAllUAMIds();\n    for (String subClusterId : subClusterIds) {\n      findOrCreateAllocateRequestForSubCluster(\n          SubClusterId.newInstance(subClusterId), request, requestMap);\n    }\n\n    if (!isNullOrEmpty(request.getAskList())) {\n      // Ask the federation policy interpreter to split the ask list for\n      // sending it to all the sub-cluster resource managers.\n      Map\u003cSubClusterId, List\u003cResourceRequest\u003e\u003e asks \u003d\n          splitResourceRequests(request.getAskList());\n\n      // Add the askLists to the corresponding sub-cluster requests.\n      for (Entry\u003cSubClusterId, List\u003cResourceRequest\u003e\u003e entry : asks.entrySet()) {\n        AllocateRequest newRequest \u003d findOrCreateAllocateRequestForSubCluster(\n            entry.getKey(), request, requestMap);\n        newRequest.getAskList().addAll(entry.getValue());\n      }\n    }\n\n    if (request.getResourceBlacklistRequest() !\u003d null) {\n      if (!isNullOrEmpty(\n          request.getResourceBlacklistRequest().getBlacklistAdditions())) {\n        for (String resourceName : request.getResourceBlacklistRequest()\n            .getBlacklistAdditions()) {\n          SubClusterId subClusterId \u003d getSubClusterForNode(resourceName);\n          if (subClusterId !\u003d null) {\n            AllocateRequest newRequest \u003d\n                findOrCreateAllocateRequestForSubCluster(subClusterId, request,\n                    requestMap);\n            newRequest.getResourceBlacklistRequest().getBlacklistAdditions()\n                .add(resourceName);\n          }\n        }\n      }\n      if (!isNullOrEmpty(\n          request.getResourceBlacklistRequest().getBlacklistRemovals())) {\n        for (String resourceName : request.getResourceBlacklistRequest()\n            .getBlacklistRemovals()) {\n          SubClusterId subClusterId \u003d getSubClusterForNode(resourceName);\n          if (subClusterId !\u003d null) {\n            AllocateRequest newRequest \u003d\n                findOrCreateAllocateRequestForSubCluster(subClusterId, request,\n                    requestMap);\n            newRequest.getResourceBlacklistRequest().getBlacklistRemovals()\n                .add(resourceName);\n          }\n        }\n      }\n    }\n\n    if (!isNullOrEmpty(request.getReleaseList())) {\n      for (ContainerId cid : request.getReleaseList()) {\n        if (warnIfNotExists(cid, \"release\")) {\n          SubClusterId subClusterId \u003d\n              this.containerIdToSubClusterIdMap.get(cid);\n          AllocateRequest newRequest \u003d requestMap.get(subClusterId);\n          newRequest.getReleaseList().add(cid);\n        }\n      }\n    }\n\n    if (!isNullOrEmpty(request.getUpdateRequests())) {\n      for (UpdateContainerRequest ucr : request.getUpdateRequests()) {\n        if (warnIfNotExists(ucr.getContainerId(), \"update\")) {\n          SubClusterId subClusterId \u003d\n              this.containerIdToSubClusterIdMap.get(ucr.getContainerId());\n          AllocateRequest newRequest \u003d requestMap.get(subClusterId);\n          newRequest.getUpdateRequests().add(ucr);\n        }\n      }\n    }\n\n    return requestMap;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java",
      "extendedDetails": {}
    },
    "70b1a757f13b01a9192ea5fb0820ba7babfd974e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6511. Federation: transparently spanning application across multiple sub-clusters. (Botong Huang via Subru).\n\n(cherry picked from commit 8c988d235eaf0972783985b1ab24680d029aea79)\n",
      "commitDate": "01/08/17 5:28 PM",
      "commitName": "70b1a757f13b01a9192ea5fb0820ba7babfd974e",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "01/08/17 5:28 PM",
      "commitNameOld": "bed1832c934fe4ba44efdcdc49fce06457dc3d4f",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,83 @@\n   private Map\u003cSubClusterId, AllocateRequest\u003e splitAllocateRequest(\n       AllocateRequest request) throws YarnException {\n     Map\u003cSubClusterId, AllocateRequest\u003e requestMap \u003d\n         new HashMap\u003cSubClusterId, AllocateRequest\u003e();\n \n     // Create heart beat request for home sub-cluster resource manager\n     findOrCreateAllocateRequestForSubCluster(this.homeSubClusterId, request,\n         requestMap);\n \n+    // Create heart beat request instances for all other already registered\n+    // sub-cluster resource managers\n+    Set\u003cString\u003e subClusterIds \u003d this.uamPool.getAllUAMIds();\n+    for (String subClusterId : subClusterIds) {\n+      findOrCreateAllocateRequestForSubCluster(\n+          SubClusterId.newInstance(subClusterId), request, requestMap);\n+    }\n+\n     if (!isNullOrEmpty(request.getAskList())) {\n-      AllocateRequest newRequest \u003d findOrCreateAllocateRequestForSubCluster(\n-          this.homeSubClusterId, request, requestMap);\n-      newRequest.getAskList().addAll(request.getAskList());\n+      // Ask the federation policy interpreter to split the ask list for\n+      // sending it to all the sub-cluster resource managers.\n+      Map\u003cSubClusterId, List\u003cResourceRequest\u003e\u003e asks \u003d\n+          splitResourceRequests(request.getAskList());\n+\n+      // Add the askLists to the corresponding sub-cluster requests.\n+      for (Entry\u003cSubClusterId, List\u003cResourceRequest\u003e\u003e entry : asks.entrySet()) {\n+        AllocateRequest newRequest \u003d findOrCreateAllocateRequestForSubCluster(\n+            entry.getKey(), request, requestMap);\n+        newRequest.getAskList().addAll(entry.getValue());\n+      }\n     }\n \n     if (request.getResourceBlacklistRequest() !\u003d null \u0026\u0026 !isNullOrEmpty(\n         request.getResourceBlacklistRequest().getBlacklistAdditions())) {\n       for (String resourceName : request.getResourceBlacklistRequest()\n           .getBlacklistAdditions()) {\n-        AllocateRequest newRequest \u003d findOrCreateAllocateRequestForSubCluster(\n-            this.homeSubClusterId, request, requestMap);\n-        newRequest.getResourceBlacklistRequest().getBlacklistAdditions()\n-            .add(resourceName);\n+        SubClusterId subClusterId \u003d getSubClusterForNode(resourceName);\n+        if (subClusterId !\u003d null) {\n+          AllocateRequest newRequest \u003d findOrCreateAllocateRequestForSubCluster(\n+              subClusterId, request, requestMap);\n+          newRequest.getResourceBlacklistRequest().getBlacklistAdditions()\n+              .add(resourceName);\n+        }\n       }\n     }\n \n     if (request.getResourceBlacklistRequest() !\u003d null \u0026\u0026 !isNullOrEmpty(\n         request.getResourceBlacklistRequest().getBlacklistRemovals())) {\n       for (String resourceName : request.getResourceBlacklistRequest()\n           .getBlacklistRemovals()) {\n-        AllocateRequest newRequest \u003d findOrCreateAllocateRequestForSubCluster(\n-            this.homeSubClusterId, request, requestMap);\n-        newRequest.getResourceBlacklistRequest().getBlacklistRemovals()\n-            .add(resourceName);\n+        SubClusterId subClusterId \u003d getSubClusterForNode(resourceName);\n+        if (subClusterId !\u003d null) {\n+          AllocateRequest newRequest \u003d findOrCreateAllocateRequestForSubCluster(\n+              subClusterId, request, requestMap);\n+          newRequest.getResourceBlacklistRequest().getBlacklistRemovals()\n+              .add(resourceName);\n+        }\n       }\n     }\n \n     if (!isNullOrEmpty(request.getReleaseList())) {\n       for (ContainerId cid : request.getReleaseList()) {\n         if (warnIfNotExists(cid, \"release\")) {\n           SubClusterId subClusterId \u003d\n               this.containerIdToSubClusterIdMap.get(cid);\n           AllocateRequest newRequest \u003d requestMap.get(subClusterId);\n           newRequest.getReleaseList().add(cid);\n         }\n       }\n     }\n \n     if (!isNullOrEmpty(request.getUpdateRequests())) {\n       for (UpdateContainerRequest ucr : request.getUpdateRequests()) {\n         if (warnIfNotExists(ucr.getContainerId(), \"update\")) {\n           SubClusterId subClusterId \u003d\n               this.containerIdToSubClusterIdMap.get(ucr.getContainerId());\n           AllocateRequest newRequest \u003d requestMap.get(subClusterId);\n           newRequest.getUpdateRequests().add(ucr);\n         }\n       }\n     }\n \n     return requestMap;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Map\u003cSubClusterId, AllocateRequest\u003e splitAllocateRequest(\n      AllocateRequest request) throws YarnException {\n    Map\u003cSubClusterId, AllocateRequest\u003e requestMap \u003d\n        new HashMap\u003cSubClusterId, AllocateRequest\u003e();\n\n    // Create heart beat request for home sub-cluster resource manager\n    findOrCreateAllocateRequestForSubCluster(this.homeSubClusterId, request,\n        requestMap);\n\n    // Create heart beat request instances for all other already registered\n    // sub-cluster resource managers\n    Set\u003cString\u003e subClusterIds \u003d this.uamPool.getAllUAMIds();\n    for (String subClusterId : subClusterIds) {\n      findOrCreateAllocateRequestForSubCluster(\n          SubClusterId.newInstance(subClusterId), request, requestMap);\n    }\n\n    if (!isNullOrEmpty(request.getAskList())) {\n      // Ask the federation policy interpreter to split the ask list for\n      // sending it to all the sub-cluster resource managers.\n      Map\u003cSubClusterId, List\u003cResourceRequest\u003e\u003e asks \u003d\n          splitResourceRequests(request.getAskList());\n\n      // Add the askLists to the corresponding sub-cluster requests.\n      for (Entry\u003cSubClusterId, List\u003cResourceRequest\u003e\u003e entry : asks.entrySet()) {\n        AllocateRequest newRequest \u003d findOrCreateAllocateRequestForSubCluster(\n            entry.getKey(), request, requestMap);\n        newRequest.getAskList().addAll(entry.getValue());\n      }\n    }\n\n    if (request.getResourceBlacklistRequest() !\u003d null \u0026\u0026 !isNullOrEmpty(\n        request.getResourceBlacklistRequest().getBlacklistAdditions())) {\n      for (String resourceName : request.getResourceBlacklistRequest()\n          .getBlacklistAdditions()) {\n        SubClusterId subClusterId \u003d getSubClusterForNode(resourceName);\n        if (subClusterId !\u003d null) {\n          AllocateRequest newRequest \u003d findOrCreateAllocateRequestForSubCluster(\n              subClusterId, request, requestMap);\n          newRequest.getResourceBlacklistRequest().getBlacklistAdditions()\n              .add(resourceName);\n        }\n      }\n    }\n\n    if (request.getResourceBlacklistRequest() !\u003d null \u0026\u0026 !isNullOrEmpty(\n        request.getResourceBlacklistRequest().getBlacklistRemovals())) {\n      for (String resourceName : request.getResourceBlacklistRequest()\n          .getBlacklistRemovals()) {\n        SubClusterId subClusterId \u003d getSubClusterForNode(resourceName);\n        if (subClusterId !\u003d null) {\n          AllocateRequest newRequest \u003d findOrCreateAllocateRequestForSubCluster(\n              subClusterId, request, requestMap);\n          newRequest.getResourceBlacklistRequest().getBlacklistRemovals()\n              .add(resourceName);\n        }\n      }\n    }\n\n    if (!isNullOrEmpty(request.getReleaseList())) {\n      for (ContainerId cid : request.getReleaseList()) {\n        if (warnIfNotExists(cid, \"release\")) {\n          SubClusterId subClusterId \u003d\n              this.containerIdToSubClusterIdMap.get(cid);\n          AllocateRequest newRequest \u003d requestMap.get(subClusterId);\n          newRequest.getReleaseList().add(cid);\n        }\n      }\n    }\n\n    if (!isNullOrEmpty(request.getUpdateRequests())) {\n      for (UpdateContainerRequest ucr : request.getUpdateRequests()) {\n        if (warnIfNotExists(ucr.getContainerId(), \"update\")) {\n          SubClusterId subClusterId \u003d\n              this.containerIdToSubClusterIdMap.get(ucr.getContainerId());\n          AllocateRequest newRequest \u003d requestMap.get(subClusterId);\n          newRequest.getUpdateRequests().add(ucr);\n        }\n      }\n    }\n\n    return requestMap;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java",
      "extendedDetails": {}
    },
    "bed1832c934fe4ba44efdcdc49fce06457dc3d4f": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3666. Federation Intercepting and propagating AM- home RM communications. (Botong Huang via Subru).\n\n(cherry picked from commit 2399eb8200609246cb623c74450ca4a2032063cc)\n",
      "commitDate": "01/08/17 5:28 PM",
      "commitName": "bed1832c934fe4ba44efdcdc49fce06457dc3d4f",
      "commitAuthor": "Subru Krishnan",
      "diff": "@@ -0,0 +1,61 @@\n+  private Map\u003cSubClusterId, AllocateRequest\u003e splitAllocateRequest(\n+      AllocateRequest request) throws YarnException {\n+    Map\u003cSubClusterId, AllocateRequest\u003e requestMap \u003d\n+        new HashMap\u003cSubClusterId, AllocateRequest\u003e();\n+\n+    // Create heart beat request for home sub-cluster resource manager\n+    findOrCreateAllocateRequestForSubCluster(this.homeSubClusterId, request,\n+        requestMap);\n+\n+    if (!isNullOrEmpty(request.getAskList())) {\n+      AllocateRequest newRequest \u003d findOrCreateAllocateRequestForSubCluster(\n+          this.homeSubClusterId, request, requestMap);\n+      newRequest.getAskList().addAll(request.getAskList());\n+    }\n+\n+    if (request.getResourceBlacklistRequest() !\u003d null \u0026\u0026 !isNullOrEmpty(\n+        request.getResourceBlacklistRequest().getBlacklistAdditions())) {\n+      for (String resourceName : request.getResourceBlacklistRequest()\n+          .getBlacklistAdditions()) {\n+        AllocateRequest newRequest \u003d findOrCreateAllocateRequestForSubCluster(\n+            this.homeSubClusterId, request, requestMap);\n+        newRequest.getResourceBlacklistRequest().getBlacklistAdditions()\n+            .add(resourceName);\n+      }\n+    }\n+\n+    if (request.getResourceBlacklistRequest() !\u003d null \u0026\u0026 !isNullOrEmpty(\n+        request.getResourceBlacklistRequest().getBlacklistRemovals())) {\n+      for (String resourceName : request.getResourceBlacklistRequest()\n+          .getBlacklistRemovals()) {\n+        AllocateRequest newRequest \u003d findOrCreateAllocateRequestForSubCluster(\n+            this.homeSubClusterId, request, requestMap);\n+        newRequest.getResourceBlacklistRequest().getBlacklistRemovals()\n+            .add(resourceName);\n+      }\n+    }\n+\n+    if (!isNullOrEmpty(request.getReleaseList())) {\n+      for (ContainerId cid : request.getReleaseList()) {\n+        if (warnIfNotExists(cid, \"release\")) {\n+          SubClusterId subClusterId \u003d\n+              this.containerIdToSubClusterIdMap.get(cid);\n+          AllocateRequest newRequest \u003d requestMap.get(subClusterId);\n+          newRequest.getReleaseList().add(cid);\n+        }\n+      }\n+    }\n+\n+    if (!isNullOrEmpty(request.getUpdateRequests())) {\n+      for (UpdateContainerRequest ucr : request.getUpdateRequests()) {\n+        if (warnIfNotExists(ucr.getContainerId(), \"update\")) {\n+          SubClusterId subClusterId \u003d\n+              this.containerIdToSubClusterIdMap.get(ucr.getContainerId());\n+          AllocateRequest newRequest \u003d requestMap.get(subClusterId);\n+          newRequest.getUpdateRequests().add(ucr);\n+        }\n+      }\n+    }\n+\n+    return requestMap;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Map\u003cSubClusterId, AllocateRequest\u003e splitAllocateRequest(\n      AllocateRequest request) throws YarnException {\n    Map\u003cSubClusterId, AllocateRequest\u003e requestMap \u003d\n        new HashMap\u003cSubClusterId, AllocateRequest\u003e();\n\n    // Create heart beat request for home sub-cluster resource manager\n    findOrCreateAllocateRequestForSubCluster(this.homeSubClusterId, request,\n        requestMap);\n\n    if (!isNullOrEmpty(request.getAskList())) {\n      AllocateRequest newRequest \u003d findOrCreateAllocateRequestForSubCluster(\n          this.homeSubClusterId, request, requestMap);\n      newRequest.getAskList().addAll(request.getAskList());\n    }\n\n    if (request.getResourceBlacklistRequest() !\u003d null \u0026\u0026 !isNullOrEmpty(\n        request.getResourceBlacklistRequest().getBlacklistAdditions())) {\n      for (String resourceName : request.getResourceBlacklistRequest()\n          .getBlacklistAdditions()) {\n        AllocateRequest newRequest \u003d findOrCreateAllocateRequestForSubCluster(\n            this.homeSubClusterId, request, requestMap);\n        newRequest.getResourceBlacklistRequest().getBlacklistAdditions()\n            .add(resourceName);\n      }\n    }\n\n    if (request.getResourceBlacklistRequest() !\u003d null \u0026\u0026 !isNullOrEmpty(\n        request.getResourceBlacklistRequest().getBlacklistRemovals())) {\n      for (String resourceName : request.getResourceBlacklistRequest()\n          .getBlacklistRemovals()) {\n        AllocateRequest newRequest \u003d findOrCreateAllocateRequestForSubCluster(\n            this.homeSubClusterId, request, requestMap);\n        newRequest.getResourceBlacklistRequest().getBlacklistRemovals()\n            .add(resourceName);\n      }\n    }\n\n    if (!isNullOrEmpty(request.getReleaseList())) {\n      for (ContainerId cid : request.getReleaseList()) {\n        if (warnIfNotExists(cid, \"release\")) {\n          SubClusterId subClusterId \u003d\n              this.containerIdToSubClusterIdMap.get(cid);\n          AllocateRequest newRequest \u003d requestMap.get(subClusterId);\n          newRequest.getReleaseList().add(cid);\n        }\n      }\n    }\n\n    if (!isNullOrEmpty(request.getUpdateRequests())) {\n      for (UpdateContainerRequest ucr : request.getUpdateRequests()) {\n        if (warnIfNotExists(ucr.getContainerId(), \"update\")) {\n          SubClusterId subClusterId \u003d\n              this.containerIdToSubClusterIdMap.get(ucr.getContainerId());\n          AllocateRequest newRequest \u003d requestMap.get(subClusterId);\n          newRequest.getUpdateRequests().add(ucr);\n        }\n      }\n    }\n\n    return requestMap;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java"
    }
  }
}