{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NativeAzureFileSystem.java",
  "functionName": "renameFile",
  "functionId": "renameFile___file-FileMetadata",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
  "functionStartLine": 472,
  "functionEndLine": 487,
  "numCommitsSeen": 66,
  "timeTaken": 2640,
  "changeHistory": [
    "2ed58c40e5dcbf5c5303c00e85096085b1055f85"
  ],
  "changeHistoryShort": {
    "2ed58c40e5dcbf5c5303c00e85096085b1055f85": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2ed58c40e5dcbf5c5303c00e85096085b1055f85": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-13403. AzureNativeFileSystem rename/delete performance improvements. Contributed by Subramanyam Pattipaka.\n",
      "commitDate": "08/08/16 12:28 PM",
      "commitName": "2ed58c40e5dcbf5c5303c00e85096085b1055f85",
      "commitAuthor": "Chris Nauroth",
      "diff": "@@ -0,0 +1,16 @@\n+    void renameFile(FileMetadata file) throws IOException{\n+      // Rename all materialized entries under the folder to point to the\n+      // final destination.\n+      if (file.getBlobMaterialization() \u003d\u003d BlobMaterialization.Explicit) {\n+        String srcName \u003d file.getKey();\n+        String suffix  \u003d srcName.substring((this.getSrcKey()).length());\n+        String dstName \u003d this.getDstKey() + suffix;\n+\n+        // Rename gets exclusive access (via a lease) for files\n+        // designated for atomic rename.\n+        // The main use case is for HBase write-ahead log (WAL) and data\n+        // folder processing correctness.  See the rename code for details.\n+        boolean acquireLease \u003d this.fs.getStoreInterface().isAtomicRenameKey(srcName);\n+        this.fs.getStoreInterface().rename(srcName, dstName, acquireLease, null);\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    void renameFile(FileMetadata file) throws IOException{\n      // Rename all materialized entries under the folder to point to the\n      // final destination.\n      if (file.getBlobMaterialization() \u003d\u003d BlobMaterialization.Explicit) {\n        String srcName \u003d file.getKey();\n        String suffix  \u003d srcName.substring((this.getSrcKey()).length());\n        String dstName \u003d this.getDstKey() + suffix;\n\n        // Rename gets exclusive access (via a lease) for files\n        // designated for atomic rename.\n        // The main use case is for HBase write-ahead log (WAL) and data\n        // folder processing correctness.  See the rename code for details.\n        boolean acquireLease \u003d this.fs.getStoreInterface().isAtomicRenameKey(srcName);\n        this.fs.getStoreInterface().rename(srcName, dstName, acquireLease, null);\n      }\n    }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java"
    }
  }
}