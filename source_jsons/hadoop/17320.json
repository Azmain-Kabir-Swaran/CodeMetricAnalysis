{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LocalResolver.java",
  "functionName": "getNamenodesSubcluster",
  "functionId": "getNamenodesSubcluster___membershipStore-MembershipStore",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/resolver/order/LocalResolver.java",
  "functionStartLine": 176,
  "functionEndLine": 216,
  "numCommitsSeen": 7,
  "timeTaken": 3370,
  "changeHistory": [
    "d7979079ea8c6514858b77a78f0119cffc178086",
    "c4d3636c21acaeb2b7d56d19cd4996aa25151bd1",
    "cfc3a1c8f06fba4f4bd5ffe8bb2a6944d066948e",
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
    "e71bc00a471422ddb26dd54e706f09f0fe09925c"
  ],
  "changeHistoryShort": {
    "d7979079ea8c6514858b77a78f0119cffc178086": "Ybodychange",
    "c4d3636c21acaeb2b7d56d19cd4996aa25151bd1": "Ybodychange",
    "cfc3a1c8f06fba4f4bd5ffe8bb2a6944d066948e": "Ymultichange(Yparameterchange,Ybodychange)",
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": "Yfilerename",
    "e71bc00a471422ddb26dd54e706f09f0fe09925c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d7979079ea8c6514858b77a78f0119cffc178086": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16210. Update guava to 27.0-jre in hadoop-project trunk. Contributed by Gabor Bota.\n",
      "commitDate": "03/04/19 11:59 AM",
      "commitName": "d7979079ea8c6514858b77a78f0119cffc178086",
      "commitAuthor": "Gabor Bota",
      "commitDateOld": "02/10/18 8:48 PM",
      "commitNameOld": "fa7f7078a713c44783425195a891582bcf8a6d5c",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 182.63,
      "commitsBetweenForRepo": 1409,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n   private Map\u003cString, String\u003e getNamenodesSubcluster(\n       MembershipStore membershipStore) {\n     // Manage requests from this hostname (127.0.0.1)\n     String localIp \u003d \"127.0.0.1\";\n     String localHostname \u003d localIp;\n     try {\n       localHostname \u003d InetAddress.getLocalHost().getHostName();\n     } catch (UnknownHostException e) {\n       LOG.error(\"Cannot get local host name\");\n     }\n \n     Map\u003cString, String\u003e ret \u003d new HashMap\u003c\u003e();\n     try {\n       // Get the values from the store\n       GetNamenodeRegistrationsRequest request \u003d\n           GetNamenodeRegistrationsRequest.newInstance();\n       GetNamenodeRegistrationsResponse response \u003d\n           membershipStore.getNamenodeRegistrations(request);\n       final List\u003cMembershipState\u003e nns \u003d response.getNamenodeMemberships();\n       for (MembershipState nn : nns) {\n         try {\n           String nsId \u003d nn.getNameserviceId();\n           String rpcAddress \u003d nn.getRpcAddress();\n-          String hostname \u003d HostAndPort.fromString(rpcAddress).getHostText();\n+          String hostname \u003d HostAndPort.fromString(rpcAddress).getHost();\n           ret.put(hostname, nsId);\n           if (hostname.equals(localHostname)) {\n             ret.put(localIp, nsId);\n           }\n \n           InetAddress addr \u003d InetAddress.getByName(hostname);\n           String ipAddr \u003d addr.getHostAddress();\n           ret.put(ipAddr, nsId);\n         } catch (Exception e) {\n           LOG.error(\"Cannot get address for {}: {}\", nn, e.getMessage());\n         }\n       }\n     } catch (IOException ioe) {\n       LOG.error(\"Cannot get Namenodes from the State Store\", ioe);\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Map\u003cString, String\u003e getNamenodesSubcluster(\n      MembershipStore membershipStore) {\n    // Manage requests from this hostname (127.0.0.1)\n    String localIp \u003d \"127.0.0.1\";\n    String localHostname \u003d localIp;\n    try {\n      localHostname \u003d InetAddress.getLocalHost().getHostName();\n    } catch (UnknownHostException e) {\n      LOG.error(\"Cannot get local host name\");\n    }\n\n    Map\u003cString, String\u003e ret \u003d new HashMap\u003c\u003e();\n    try {\n      // Get the values from the store\n      GetNamenodeRegistrationsRequest request \u003d\n          GetNamenodeRegistrationsRequest.newInstance();\n      GetNamenodeRegistrationsResponse response \u003d\n          membershipStore.getNamenodeRegistrations(request);\n      final List\u003cMembershipState\u003e nns \u003d response.getNamenodeMemberships();\n      for (MembershipState nn : nns) {\n        try {\n          String nsId \u003d nn.getNameserviceId();\n          String rpcAddress \u003d nn.getRpcAddress();\n          String hostname \u003d HostAndPort.fromString(rpcAddress).getHost();\n          ret.put(hostname, nsId);\n          if (hostname.equals(localHostname)) {\n            ret.put(localIp, nsId);\n          }\n\n          InetAddress addr \u003d InetAddress.getByName(hostname);\n          String ipAddr \u003d addr.getHostAddress();\n          ret.put(ipAddr, nsId);\n        } catch (Exception e) {\n          LOG.error(\"Cannot get address for {}: {}\", nn, e.getMessage());\n        }\n      }\n    } catch (IOException ioe) {\n      LOG.error(\"Cannot get Namenodes from the State Store\", ioe);\n    }\n    return ret;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/resolver/order/LocalResolver.java",
      "extendedDetails": {}
    },
    "c4d3636c21acaeb2b7d56d19cd4996aa25151bd1": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13435. RBF: Improve the error loggings for printing the stack trace.\n",
      "commitDate": "16/04/18 8:23 PM",
      "commitName": "c4d3636c21acaeb2b7d56d19cd4996aa25151bd1",
      "commitAuthor": "Yiqun Lin",
      "commitDateOld": "26/03/18 3:33 AM",
      "commitNameOld": "cfc3a1c8f06fba4f4bd5ffe8bb2a6944d066948e",
      "commitAuthorOld": "Yiqun Lin",
      "daysBetweenCommits": 21.7,
      "commitsBetweenForRepo": 137,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,41 @@\n   private Map\u003cString, String\u003e getNamenodesSubcluster(\n       MembershipStore membershipStore) {\n     // Manage requests from this hostname (127.0.0.1)\n     String localIp \u003d \"127.0.0.1\";\n     String localHostname \u003d localIp;\n     try {\n       localHostname \u003d InetAddress.getLocalHost().getHostName();\n     } catch (UnknownHostException e) {\n       LOG.error(\"Cannot get local host name\");\n     }\n \n     Map\u003cString, String\u003e ret \u003d new HashMap\u003c\u003e();\n     try {\n       // Get the values from the store\n       GetNamenodeRegistrationsRequest request \u003d\n           GetNamenodeRegistrationsRequest.newInstance();\n       GetNamenodeRegistrationsResponse response \u003d\n           membershipStore.getNamenodeRegistrations(request);\n       final List\u003cMembershipState\u003e nns \u003d response.getNamenodeMemberships();\n       for (MembershipState nn : nns) {\n         try {\n           String nsId \u003d nn.getNameserviceId();\n           String rpcAddress \u003d nn.getRpcAddress();\n           String hostname \u003d HostAndPort.fromString(rpcAddress).getHostText();\n           ret.put(hostname, nsId);\n           if (hostname.equals(localHostname)) {\n             ret.put(localIp, nsId);\n           }\n \n           InetAddress addr \u003d InetAddress.getByName(hostname);\n           String ipAddr \u003d addr.getHostAddress();\n           ret.put(ipAddr, nsId);\n         } catch (Exception e) {\n           LOG.error(\"Cannot get address for {}: {}\", nn, e.getMessage());\n         }\n       }\n     } catch (IOException ioe) {\n-      LOG.error(\"Cannot get Namenodes from the State Store: {}\",\n-          ioe.getMessage());\n+      LOG.error(\"Cannot get Namenodes from the State Store\", ioe);\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Map\u003cString, String\u003e getNamenodesSubcluster(\n      MembershipStore membershipStore) {\n    // Manage requests from this hostname (127.0.0.1)\n    String localIp \u003d \"127.0.0.1\";\n    String localHostname \u003d localIp;\n    try {\n      localHostname \u003d InetAddress.getLocalHost().getHostName();\n    } catch (UnknownHostException e) {\n      LOG.error(\"Cannot get local host name\");\n    }\n\n    Map\u003cString, String\u003e ret \u003d new HashMap\u003c\u003e();\n    try {\n      // Get the values from the store\n      GetNamenodeRegistrationsRequest request \u003d\n          GetNamenodeRegistrationsRequest.newInstance();\n      GetNamenodeRegistrationsResponse response \u003d\n          membershipStore.getNamenodeRegistrations(request);\n      final List\u003cMembershipState\u003e nns \u003d response.getNamenodeMemberships();\n      for (MembershipState nn : nns) {\n        try {\n          String nsId \u003d nn.getNameserviceId();\n          String rpcAddress \u003d nn.getRpcAddress();\n          String hostname \u003d HostAndPort.fromString(rpcAddress).getHostText();\n          ret.put(hostname, nsId);\n          if (hostname.equals(localHostname)) {\n            ret.put(localIp, nsId);\n          }\n\n          InetAddress addr \u003d InetAddress.getByName(hostname);\n          String ipAddr \u003d addr.getHostAddress();\n          ret.put(ipAddr, nsId);\n        } catch (Exception e) {\n          LOG.error(\"Cannot get address for {}: {}\", nn, e.getMessage());\n        }\n      }\n    } catch (IOException ioe) {\n      LOG.error(\"Cannot get Namenodes from the State Store\", ioe);\n    }\n    return ret;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/resolver/order/LocalResolver.java",
      "extendedDetails": {}
    },
    "cfc3a1c8f06fba4f4bd5ffe8bb2a6944d066948e": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-13291. RBF: Implement available space based OrderResolver. Contributed by Yiqun Lin.\n",
      "commitDate": "26/03/18 3:33 AM",
      "commitName": "cfc3a1c8f06fba4f4bd5ffe8bb2a6944d066948e",
      "commitAuthor": "Yiqun Lin",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-13291. RBF: Implement available space based OrderResolver. Contributed by Yiqun Lin.\n",
          "commitDate": "26/03/18 3:33 AM",
          "commitName": "cfc3a1c8f06fba4f4bd5ffe8bb2a6944d066948e",
          "commitAuthor": "Yiqun Lin",
          "commitDateOld": "19/03/18 10:13 PM",
          "commitNameOld": "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
          "commitAuthorOld": "weiy",
          "daysBetweenCommits": 6.22,
          "commitsBetweenForRepo": 169,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,42 @@\n-  private Map\u003cString, String\u003e getNamenodesSubcluster() {\n-\n-    final MembershipStore membershipStore \u003d getMembershipStore();\n-    if (membershipStore \u003d\u003d null) {\n-      LOG.error(\"Cannot access the Membership store\");\n-      return null;\n-    }\n-\n+  private Map\u003cString, String\u003e getNamenodesSubcluster(\n+      MembershipStore membershipStore) {\n     // Manage requests from this hostname (127.0.0.1)\n     String localIp \u003d \"127.0.0.1\";\n     String localHostname \u003d localIp;\n     try {\n       localHostname \u003d InetAddress.getLocalHost().getHostName();\n     } catch (UnknownHostException e) {\n       LOG.error(\"Cannot get local host name\");\n     }\n \n     Map\u003cString, String\u003e ret \u003d new HashMap\u003c\u003e();\n     try {\n       // Get the values from the store\n       GetNamenodeRegistrationsRequest request \u003d\n           GetNamenodeRegistrationsRequest.newInstance();\n       GetNamenodeRegistrationsResponse response \u003d\n           membershipStore.getNamenodeRegistrations(request);\n       final List\u003cMembershipState\u003e nns \u003d response.getNamenodeMemberships();\n       for (MembershipState nn : nns) {\n         try {\n           String nsId \u003d nn.getNameserviceId();\n           String rpcAddress \u003d nn.getRpcAddress();\n           String hostname \u003d HostAndPort.fromString(rpcAddress).getHostText();\n           ret.put(hostname, nsId);\n           if (hostname.equals(localHostname)) {\n             ret.put(localIp, nsId);\n           }\n \n           InetAddress addr \u003d InetAddress.getByName(hostname);\n           String ipAddr \u003d addr.getHostAddress();\n           ret.put(ipAddr, nsId);\n         } catch (Exception e) {\n           LOG.error(\"Cannot get address for {}: {}\", nn, e.getMessage());\n         }\n       }\n     } catch (IOException ioe) {\n       LOG.error(\"Cannot get Namenodes from the State Store: {}\",\n           ioe.getMessage());\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Map\u003cString, String\u003e getNamenodesSubcluster(\n      MembershipStore membershipStore) {\n    // Manage requests from this hostname (127.0.0.1)\n    String localIp \u003d \"127.0.0.1\";\n    String localHostname \u003d localIp;\n    try {\n      localHostname \u003d InetAddress.getLocalHost().getHostName();\n    } catch (UnknownHostException e) {\n      LOG.error(\"Cannot get local host name\");\n    }\n\n    Map\u003cString, String\u003e ret \u003d new HashMap\u003c\u003e();\n    try {\n      // Get the values from the store\n      GetNamenodeRegistrationsRequest request \u003d\n          GetNamenodeRegistrationsRequest.newInstance();\n      GetNamenodeRegistrationsResponse response \u003d\n          membershipStore.getNamenodeRegistrations(request);\n      final List\u003cMembershipState\u003e nns \u003d response.getNamenodeMemberships();\n      for (MembershipState nn : nns) {\n        try {\n          String nsId \u003d nn.getNameserviceId();\n          String rpcAddress \u003d nn.getRpcAddress();\n          String hostname \u003d HostAndPort.fromString(rpcAddress).getHostText();\n          ret.put(hostname, nsId);\n          if (hostname.equals(localHostname)) {\n            ret.put(localIp, nsId);\n          }\n\n          InetAddress addr \u003d InetAddress.getByName(hostname);\n          String ipAddr \u003d addr.getHostAddress();\n          ret.put(ipAddr, nsId);\n        } catch (Exception e) {\n          LOG.error(\"Cannot get address for {}: {}\", nn, e.getMessage());\n        }\n      }\n    } catch (IOException ioe) {\n      LOG.error(\"Cannot get Namenodes from the State Store: {}\",\n          ioe.getMessage());\n    }\n    return ret;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/resolver/order/LocalResolver.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[membershipStore-MembershipStore]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-13291. RBF: Implement available space based OrderResolver. Contributed by Yiqun Lin.\n",
          "commitDate": "26/03/18 3:33 AM",
          "commitName": "cfc3a1c8f06fba4f4bd5ffe8bb2a6944d066948e",
          "commitAuthor": "Yiqun Lin",
          "commitDateOld": "19/03/18 10:13 PM",
          "commitNameOld": "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
          "commitAuthorOld": "weiy",
          "daysBetweenCommits": 6.22,
          "commitsBetweenForRepo": 169,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,42 @@\n-  private Map\u003cString, String\u003e getNamenodesSubcluster() {\n-\n-    final MembershipStore membershipStore \u003d getMembershipStore();\n-    if (membershipStore \u003d\u003d null) {\n-      LOG.error(\"Cannot access the Membership store\");\n-      return null;\n-    }\n-\n+  private Map\u003cString, String\u003e getNamenodesSubcluster(\n+      MembershipStore membershipStore) {\n     // Manage requests from this hostname (127.0.0.1)\n     String localIp \u003d \"127.0.0.1\";\n     String localHostname \u003d localIp;\n     try {\n       localHostname \u003d InetAddress.getLocalHost().getHostName();\n     } catch (UnknownHostException e) {\n       LOG.error(\"Cannot get local host name\");\n     }\n \n     Map\u003cString, String\u003e ret \u003d new HashMap\u003c\u003e();\n     try {\n       // Get the values from the store\n       GetNamenodeRegistrationsRequest request \u003d\n           GetNamenodeRegistrationsRequest.newInstance();\n       GetNamenodeRegistrationsResponse response \u003d\n           membershipStore.getNamenodeRegistrations(request);\n       final List\u003cMembershipState\u003e nns \u003d response.getNamenodeMemberships();\n       for (MembershipState nn : nns) {\n         try {\n           String nsId \u003d nn.getNameserviceId();\n           String rpcAddress \u003d nn.getRpcAddress();\n           String hostname \u003d HostAndPort.fromString(rpcAddress).getHostText();\n           ret.put(hostname, nsId);\n           if (hostname.equals(localHostname)) {\n             ret.put(localIp, nsId);\n           }\n \n           InetAddress addr \u003d InetAddress.getByName(hostname);\n           String ipAddr \u003d addr.getHostAddress();\n           ret.put(ipAddr, nsId);\n         } catch (Exception e) {\n           LOG.error(\"Cannot get address for {}: {}\", nn, e.getMessage());\n         }\n       }\n     } catch (IOException ioe) {\n       LOG.error(\"Cannot get Namenodes from the State Store: {}\",\n           ioe.getMessage());\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Map\u003cString, String\u003e getNamenodesSubcluster(\n      MembershipStore membershipStore) {\n    // Manage requests from this hostname (127.0.0.1)\n    String localIp \u003d \"127.0.0.1\";\n    String localHostname \u003d localIp;\n    try {\n      localHostname \u003d InetAddress.getLocalHost().getHostName();\n    } catch (UnknownHostException e) {\n      LOG.error(\"Cannot get local host name\");\n    }\n\n    Map\u003cString, String\u003e ret \u003d new HashMap\u003c\u003e();\n    try {\n      // Get the values from the store\n      GetNamenodeRegistrationsRequest request \u003d\n          GetNamenodeRegistrationsRequest.newInstance();\n      GetNamenodeRegistrationsResponse response \u003d\n          membershipStore.getNamenodeRegistrations(request);\n      final List\u003cMembershipState\u003e nns \u003d response.getNamenodeMemberships();\n      for (MembershipState nn : nns) {\n        try {\n          String nsId \u003d nn.getNameserviceId();\n          String rpcAddress \u003d nn.getRpcAddress();\n          String hostname \u003d HostAndPort.fromString(rpcAddress).getHostText();\n          ret.put(hostname, nsId);\n          if (hostname.equals(localHostname)) {\n            ret.put(localIp, nsId);\n          }\n\n          InetAddress addr \u003d InetAddress.getByName(hostname);\n          String ipAddr \u003d addr.getHostAddress();\n          ret.put(ipAddr, nsId);\n        } catch (Exception e) {\n          LOG.error(\"Cannot get address for {}: {}\", nn, e.getMessage());\n        }\n      }\n    } catch (IOException ioe) {\n      LOG.error(\"Cannot get Namenodes from the State Store: {}\",\n          ioe.getMessage());\n    }\n    return ret;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/resolver/order/LocalResolver.java",
          "extendedDetails": {}
        }
      ]
    },
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-13215. RBF: Move Router to its own module. Contributed by Wei Yan\n",
      "commitDate": "19/03/18 10:13 PM",
      "commitName": "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
      "commitAuthor": "weiy",
      "commitDateOld": "19/03/18 5:19 PM",
      "commitNameOld": "e65ff1c8be48ef4f04ed96f96ac4caef4974944d",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.2,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private Map\u003cString, String\u003e getNamenodesSubcluster() {\n\n    final MembershipStore membershipStore \u003d getMembershipStore();\n    if (membershipStore \u003d\u003d null) {\n      LOG.error(\"Cannot access the Membership store\");\n      return null;\n    }\n\n    // Manage requests from this hostname (127.0.0.1)\n    String localIp \u003d \"127.0.0.1\";\n    String localHostname \u003d localIp;\n    try {\n      localHostname \u003d InetAddress.getLocalHost().getHostName();\n    } catch (UnknownHostException e) {\n      LOG.error(\"Cannot get local host name\");\n    }\n\n    Map\u003cString, String\u003e ret \u003d new HashMap\u003c\u003e();\n    try {\n      // Get the values from the store\n      GetNamenodeRegistrationsRequest request \u003d\n          GetNamenodeRegistrationsRequest.newInstance();\n      GetNamenodeRegistrationsResponse response \u003d\n          membershipStore.getNamenodeRegistrations(request);\n      final List\u003cMembershipState\u003e nns \u003d response.getNamenodeMemberships();\n      for (MembershipState nn : nns) {\n        try {\n          String nsId \u003d nn.getNameserviceId();\n          String rpcAddress \u003d nn.getRpcAddress();\n          String hostname \u003d HostAndPort.fromString(rpcAddress).getHostText();\n          ret.put(hostname, nsId);\n          if (hostname.equals(localHostname)) {\n            ret.put(localIp, nsId);\n          }\n\n          InetAddress addr \u003d InetAddress.getByName(hostname);\n          String ipAddr \u003d addr.getHostAddress();\n          ret.put(ipAddr, nsId);\n        } catch (Exception e) {\n          LOG.error(\"Cannot get address for {}: {}\", nn, e.getMessage());\n        }\n      }\n    } catch (IOException ioe) {\n      LOG.error(\"Cannot get Namenodes from the State Store: {}\",\n          ioe.getMessage());\n    }\n    return ret;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/resolver/order/LocalResolver.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/resolver/order/LocalResolver.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/resolver/order/LocalResolver.java"
      }
    },
    "e71bc00a471422ddb26dd54e706f09f0fe09925c": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-13224. RBF: Resolvers to support mount points across multiple subclusters. Contributed by Inigo Goiri.\n",
      "commitDate": "15/03/18 10:32 AM",
      "commitName": "e71bc00a471422ddb26dd54e706f09f0fe09925c",
      "commitAuthor": "Inigo Goiri",
      "diff": "@@ -0,0 +1,48 @@\n+  private Map\u003cString, String\u003e getNamenodesSubcluster() {\n+\n+    final MembershipStore membershipStore \u003d getMembershipStore();\n+    if (membershipStore \u003d\u003d null) {\n+      LOG.error(\"Cannot access the Membership store\");\n+      return null;\n+    }\n+\n+    // Manage requests from this hostname (127.0.0.1)\n+    String localIp \u003d \"127.0.0.1\";\n+    String localHostname \u003d localIp;\n+    try {\n+      localHostname \u003d InetAddress.getLocalHost().getHostName();\n+    } catch (UnknownHostException e) {\n+      LOG.error(\"Cannot get local host name\");\n+    }\n+\n+    Map\u003cString, String\u003e ret \u003d new HashMap\u003c\u003e();\n+    try {\n+      // Get the values from the store\n+      GetNamenodeRegistrationsRequest request \u003d\n+          GetNamenodeRegistrationsRequest.newInstance();\n+      GetNamenodeRegistrationsResponse response \u003d\n+          membershipStore.getNamenodeRegistrations(request);\n+      final List\u003cMembershipState\u003e nns \u003d response.getNamenodeMemberships();\n+      for (MembershipState nn : nns) {\n+        try {\n+          String nsId \u003d nn.getNameserviceId();\n+          String rpcAddress \u003d nn.getRpcAddress();\n+          String hostname \u003d HostAndPort.fromString(rpcAddress).getHostText();\n+          ret.put(hostname, nsId);\n+          if (hostname.equals(localHostname)) {\n+            ret.put(localIp, nsId);\n+          }\n+\n+          InetAddress addr \u003d InetAddress.getByName(hostname);\n+          String ipAddr \u003d addr.getHostAddress();\n+          ret.put(ipAddr, nsId);\n+        } catch (Exception e) {\n+          LOG.error(\"Cannot get address for {}: {}\", nn, e.getMessage());\n+        }\n+      }\n+    } catch (IOException ioe) {\n+      LOG.error(\"Cannot get Namenodes from the State Store: {}\",\n+          ioe.getMessage());\n+    }\n+    return ret;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Map\u003cString, String\u003e getNamenodesSubcluster() {\n\n    final MembershipStore membershipStore \u003d getMembershipStore();\n    if (membershipStore \u003d\u003d null) {\n      LOG.error(\"Cannot access the Membership store\");\n      return null;\n    }\n\n    // Manage requests from this hostname (127.0.0.1)\n    String localIp \u003d \"127.0.0.1\";\n    String localHostname \u003d localIp;\n    try {\n      localHostname \u003d InetAddress.getLocalHost().getHostName();\n    } catch (UnknownHostException e) {\n      LOG.error(\"Cannot get local host name\");\n    }\n\n    Map\u003cString, String\u003e ret \u003d new HashMap\u003c\u003e();\n    try {\n      // Get the values from the store\n      GetNamenodeRegistrationsRequest request \u003d\n          GetNamenodeRegistrationsRequest.newInstance();\n      GetNamenodeRegistrationsResponse response \u003d\n          membershipStore.getNamenodeRegistrations(request);\n      final List\u003cMembershipState\u003e nns \u003d response.getNamenodeMemberships();\n      for (MembershipState nn : nns) {\n        try {\n          String nsId \u003d nn.getNameserviceId();\n          String rpcAddress \u003d nn.getRpcAddress();\n          String hostname \u003d HostAndPort.fromString(rpcAddress).getHostText();\n          ret.put(hostname, nsId);\n          if (hostname.equals(localHostname)) {\n            ret.put(localIp, nsId);\n          }\n\n          InetAddress addr \u003d InetAddress.getByName(hostname);\n          String ipAddr \u003d addr.getHostAddress();\n          ret.put(ipAddr, nsId);\n        } catch (Exception e) {\n          LOG.error(\"Cannot get address for {}: {}\", nn, e.getMessage());\n        }\n      }\n    } catch (IOException ioe) {\n      LOG.error(\"Cannot get Namenodes from the State Store: {}\",\n          ioe.getMessage());\n    }\n    return ret;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/resolver/order/LocalResolver.java"
    }
  }
}