{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSDirAclOp.java",
  "functionName": "getAclStatus",
  "functionId": "getAclStatus___fsd-FSDirectory__pc-FSPermissionChecker__src-String",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAclOp.java",
  "functionStartLine": 155,
  "functionEndLine": 179,
  "numCommitsSeen": 240,
  "timeTaken": 10380,
  "changeHistory": [
    "d2637cb1766674afb4a3d4627396f8981eaf9964",
    "e76c2aeb288710ebee39680528dec44e454bbe9e",
    "84a1321f6aa0af6895564a7c47f8f264656f0294",
    "9d175853b0170683ad5f21d9bcdeaac49fe89e04",
    "a0730aa5ced7666a8c92f9fb830b615f5f9f477a",
    "869393643de23dcb010cc33091c8eb398de0fd6c",
    "03dea65e0b17ca2f9460bb6110f6ab3a321b8bf2",
    "922b7ed21d1f1460263ca42f709bb9f415d189c5",
    "c78e3a7cdd10c40454e9acb06986ba6d8573cb19",
    "ffe942b82c1208bc7b22899da3a233944cb5ab52",
    "9297f980c2de8886ff970946a2513e6890cd5552",
    "0689363343a281a6f7f6f395227668bddc2663eb",
    "14f1f76bf609704d36a1699c05fa85750cefe917"
  ],
  "changeHistoryShort": {
    "d2637cb1766674afb4a3d4627396f8981eaf9964": "Ybodychange",
    "e76c2aeb288710ebee39680528dec44e454bbe9e": "Ybodychange",
    "84a1321f6aa0af6895564a7c47f8f264656f0294": "Ymultichange(Yparameterchange,Ybodychange)",
    "9d175853b0170683ad5f21d9bcdeaac49fe89e04": "Ybodychange",
    "a0730aa5ced7666a8c92f9fb830b615f5f9f477a": "Ybodychange",
    "869393643de23dcb010cc33091c8eb398de0fd6c": "Ybodychange",
    "03dea65e0b17ca2f9460bb6110f6ab3a321b8bf2": "Ybodychange",
    "922b7ed21d1f1460263ca42f709bb9f415d189c5": "Ybodychange",
    "c78e3a7cdd10c40454e9acb06986ba6d8573cb19": "Ybodychange",
    "ffe942b82c1208bc7b22899da3a233944cb5ab52": "Ybodychange",
    "9297f980c2de8886ff970946a2513e6890cd5552": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
    "0689363343a281a6f7f6f395227668bddc2663eb": "Ybodychange",
    "14f1f76bf609704d36a1699c05fa85750cefe917": "Ybodychange"
  },
  "changeHistoryDetails": {
    "d2637cb1766674afb4a3d4627396f8981eaf9964": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14389. getAclStatus returns incorrect permissions and owner when an iNodeAttributeProvider is configured. Contributed by Stephen O\u0027Donnell.\n\nSigned-off-by: Wei-Chiu Chuang \u003cweichiu@apache.org\u003e\n",
      "commitDate": "04/04/19 4:07 AM",
      "commitName": "d2637cb1766674afb4a3d4627396f8981eaf9964",
      "commitAuthor": "Stephen O\u0027Donnell",
      "commitDateOld": "10/04/18 11:19 AM",
      "commitNameOld": "e76c2aeb288710ebee39680528dec44e454bbe9e",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 358.7,
      "commitsBetweenForRepo": 3297,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,25 @@\n   static AclStatus getAclStatus(\n       FSDirectory fsd, FSPermissionChecker pc, String src) throws IOException {\n     checkAclsConfigFlag(fsd);\n     fsd.readLock();\n     try {\n       INodesInPath iip \u003d fsd.resolvePath(pc, src, DirOp.READ);\n       // There is no real inode for the path ending in \".snapshot\", so return a\n       // non-null, unpopulated AclStatus.  This is similar to getFileInfo.\n       if (iip.isDotSnapshotDir() \u0026\u0026 fsd.getINode4DotSnapshot(iip) !\u003d null) {\n         return new AclStatus.Builder().owner(\"\").group(\"\").build();\n       }\n-      INode inode \u003d FSDirectory.resolveLastINode(iip);\n-      int snapshotId \u003d iip.getPathSnapshotId();\n-      List\u003cAclEntry\u003e acl \u003d AclStorage.readINodeAcl(fsd.getAttributes(iip));\n-      FsPermission fsPermission \u003d inode.getFsPermission(snapshotId);\n+      INodeAttributes inodeAttrs \u003d fsd.getAttributes(iip);\n+      List\u003cAclEntry\u003e acl \u003d AclStorage.readINodeAcl(inodeAttrs);\n+      FsPermission fsPermission \u003d inodeAttrs.getFsPermission();\n       return new AclStatus.Builder()\n-          .owner(inode.getUserName()).group(inode.getGroupName())\n+          .owner(inodeAttrs.getUserName()).group(inodeAttrs.getGroupName())\n           .stickyBit(fsPermission.getStickyBit())\n           .setPermission(fsPermission)\n           .addEntries(acl).build();\n     } catch (AclException e){\n       throw new AclException(e.getMessage() + \" Path: \" + src, e);\n     } finally {\n       fsd.readUnlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static AclStatus getAclStatus(\n      FSDirectory fsd, FSPermissionChecker pc, String src) throws IOException {\n    checkAclsConfigFlag(fsd);\n    fsd.readLock();\n    try {\n      INodesInPath iip \u003d fsd.resolvePath(pc, src, DirOp.READ);\n      // There is no real inode for the path ending in \".snapshot\", so return a\n      // non-null, unpopulated AclStatus.  This is similar to getFileInfo.\n      if (iip.isDotSnapshotDir() \u0026\u0026 fsd.getINode4DotSnapshot(iip) !\u003d null) {\n        return new AclStatus.Builder().owner(\"\").group(\"\").build();\n      }\n      INodeAttributes inodeAttrs \u003d fsd.getAttributes(iip);\n      List\u003cAclEntry\u003e acl \u003d AclStorage.readINodeAcl(inodeAttrs);\n      FsPermission fsPermission \u003d inodeAttrs.getFsPermission();\n      return new AclStatus.Builder()\n          .owner(inodeAttrs.getUserName()).group(inodeAttrs.getGroupName())\n          .stickyBit(fsPermission.getStickyBit())\n          .setPermission(fsPermission)\n          .addEntries(acl).build();\n    } catch (AclException e){\n      throw new AclException(e.getMessage() + \" Path: \" + src, e);\n    } finally {\n      fsd.readUnlock();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAclOp.java",
      "extendedDetails": {}
    },
    "e76c2aeb288710ebee39680528dec44e454bbe9e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13363. Record file path when FSDirAclOp throws AclException. Contributed by Gabor Bota.\n",
      "commitDate": "10/04/18 11:19 AM",
      "commitName": "e76c2aeb288710ebee39680528dec44e454bbe9e",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "22/02/18 11:32 AM",
      "commitNameOld": "84a1321f6aa0af6895564a7c47f8f264656f0294",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 46.95,
      "commitsBetweenForRepo": 437,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,26 @@\n   static AclStatus getAclStatus(\n       FSDirectory fsd, FSPermissionChecker pc, String src) throws IOException {\n     checkAclsConfigFlag(fsd);\n     fsd.readLock();\n     try {\n       INodesInPath iip \u003d fsd.resolvePath(pc, src, DirOp.READ);\n       // There is no real inode for the path ending in \".snapshot\", so return a\n       // non-null, unpopulated AclStatus.  This is similar to getFileInfo.\n       if (iip.isDotSnapshotDir() \u0026\u0026 fsd.getINode4DotSnapshot(iip) !\u003d null) {\n         return new AclStatus.Builder().owner(\"\").group(\"\").build();\n       }\n       INode inode \u003d FSDirectory.resolveLastINode(iip);\n       int snapshotId \u003d iip.getPathSnapshotId();\n       List\u003cAclEntry\u003e acl \u003d AclStorage.readINodeAcl(fsd.getAttributes(iip));\n       FsPermission fsPermission \u003d inode.getFsPermission(snapshotId);\n       return new AclStatus.Builder()\n           .owner(inode.getUserName()).group(inode.getGroupName())\n           .stickyBit(fsPermission.getStickyBit())\n           .setPermission(fsPermission)\n           .addEntries(acl).build();\n+    } catch (AclException e){\n+      throw new AclException(e.getMessage() + \" Path: \" + src, e);\n     } finally {\n       fsd.readUnlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static AclStatus getAclStatus(\n      FSDirectory fsd, FSPermissionChecker pc, String src) throws IOException {\n    checkAclsConfigFlag(fsd);\n    fsd.readLock();\n    try {\n      INodesInPath iip \u003d fsd.resolvePath(pc, src, DirOp.READ);\n      // There is no real inode for the path ending in \".snapshot\", so return a\n      // non-null, unpopulated AclStatus.  This is similar to getFileInfo.\n      if (iip.isDotSnapshotDir() \u0026\u0026 fsd.getINode4DotSnapshot(iip) !\u003d null) {\n        return new AclStatus.Builder().owner(\"\").group(\"\").build();\n      }\n      INode inode \u003d FSDirectory.resolveLastINode(iip);\n      int snapshotId \u003d iip.getPathSnapshotId();\n      List\u003cAclEntry\u003e acl \u003d AclStorage.readINodeAcl(fsd.getAttributes(iip));\n      FsPermission fsPermission \u003d inode.getFsPermission(snapshotId);\n      return new AclStatus.Builder()\n          .owner(inode.getUserName()).group(inode.getGroupName())\n          .stickyBit(fsPermission.getStickyBit())\n          .setPermission(fsPermission)\n          .addEntries(acl).build();\n    } catch (AclException e){\n      throw new AclException(e.getMessage() + \" Path: \" + src, e);\n    } finally {\n      fsd.readUnlock();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAclOp.java",
      "extendedDetails": {}
    },
    "84a1321f6aa0af6895564a7c47f8f264656f0294": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-13136. Avoid taking FSN lock while doing group member lookup for FSD permission check. Contributed by Xiaoyu Yao.\n",
      "commitDate": "22/02/18 11:32 AM",
      "commitName": "84a1321f6aa0af6895564a7c47f8f264656f0294",
      "commitAuthor": "Xiaoyu Yao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-13136. Avoid taking FSN lock while doing group member lookup for FSD permission check. Contributed by Xiaoyu Yao.\n",
          "commitDate": "22/02/18 11:32 AM",
          "commitName": "84a1321f6aa0af6895564a7c47f8f264656f0294",
          "commitAuthor": "Xiaoyu Yao",
          "commitDateOld": "16/05/17 9:28 AM",
          "commitNameOld": "9b90e52f1ec22c18cd535af2a569defcef65b093",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 282.13,
          "commitsBetweenForRepo": 1928,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,24 @@\n   static AclStatus getAclStatus(\n-      FSDirectory fsd, String src) throws IOException {\n+      FSDirectory fsd, FSPermissionChecker pc, String src) throws IOException {\n     checkAclsConfigFlag(fsd);\n-    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n     fsd.readLock();\n     try {\n       INodesInPath iip \u003d fsd.resolvePath(pc, src, DirOp.READ);\n       // There is no real inode for the path ending in \".snapshot\", so return a\n       // non-null, unpopulated AclStatus.  This is similar to getFileInfo.\n       if (iip.isDotSnapshotDir() \u0026\u0026 fsd.getINode4DotSnapshot(iip) !\u003d null) {\n         return new AclStatus.Builder().owner(\"\").group(\"\").build();\n       }\n       INode inode \u003d FSDirectory.resolveLastINode(iip);\n       int snapshotId \u003d iip.getPathSnapshotId();\n       List\u003cAclEntry\u003e acl \u003d AclStorage.readINodeAcl(fsd.getAttributes(iip));\n       FsPermission fsPermission \u003d inode.getFsPermission(snapshotId);\n       return new AclStatus.Builder()\n           .owner(inode.getUserName()).group(inode.getGroupName())\n           .stickyBit(fsPermission.getStickyBit())\n           .setPermission(fsPermission)\n           .addEntries(acl).build();\n     } finally {\n       fsd.readUnlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static AclStatus getAclStatus(\n      FSDirectory fsd, FSPermissionChecker pc, String src) throws IOException {\n    checkAclsConfigFlag(fsd);\n    fsd.readLock();\n    try {\n      INodesInPath iip \u003d fsd.resolvePath(pc, src, DirOp.READ);\n      // There is no real inode for the path ending in \".snapshot\", so return a\n      // non-null, unpopulated AclStatus.  This is similar to getFileInfo.\n      if (iip.isDotSnapshotDir() \u0026\u0026 fsd.getINode4DotSnapshot(iip) !\u003d null) {\n        return new AclStatus.Builder().owner(\"\").group(\"\").build();\n      }\n      INode inode \u003d FSDirectory.resolveLastINode(iip);\n      int snapshotId \u003d iip.getPathSnapshotId();\n      List\u003cAclEntry\u003e acl \u003d AclStorage.readINodeAcl(fsd.getAttributes(iip));\n      FsPermission fsPermission \u003d inode.getFsPermission(snapshotId);\n      return new AclStatus.Builder()\n          .owner(inode.getUserName()).group(inode.getGroupName())\n          .stickyBit(fsPermission.getStickyBit())\n          .setPermission(fsPermission)\n          .addEntries(acl).build();\n    } finally {\n      fsd.readUnlock();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAclOp.java",
          "extendedDetails": {
            "oldValue": "[fsd-FSDirectory, src-String]",
            "newValue": "[fsd-FSDirectory, pc-FSPermissionChecker, src-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-13136. Avoid taking FSN lock while doing group member lookup for FSD permission check. Contributed by Xiaoyu Yao.\n",
          "commitDate": "22/02/18 11:32 AM",
          "commitName": "84a1321f6aa0af6895564a7c47f8f264656f0294",
          "commitAuthor": "Xiaoyu Yao",
          "commitDateOld": "16/05/17 9:28 AM",
          "commitNameOld": "9b90e52f1ec22c18cd535af2a569defcef65b093",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 282.13,
          "commitsBetweenForRepo": 1928,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,24 @@\n   static AclStatus getAclStatus(\n-      FSDirectory fsd, String src) throws IOException {\n+      FSDirectory fsd, FSPermissionChecker pc, String src) throws IOException {\n     checkAclsConfigFlag(fsd);\n-    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n     fsd.readLock();\n     try {\n       INodesInPath iip \u003d fsd.resolvePath(pc, src, DirOp.READ);\n       // There is no real inode for the path ending in \".snapshot\", so return a\n       // non-null, unpopulated AclStatus.  This is similar to getFileInfo.\n       if (iip.isDotSnapshotDir() \u0026\u0026 fsd.getINode4DotSnapshot(iip) !\u003d null) {\n         return new AclStatus.Builder().owner(\"\").group(\"\").build();\n       }\n       INode inode \u003d FSDirectory.resolveLastINode(iip);\n       int snapshotId \u003d iip.getPathSnapshotId();\n       List\u003cAclEntry\u003e acl \u003d AclStorage.readINodeAcl(fsd.getAttributes(iip));\n       FsPermission fsPermission \u003d inode.getFsPermission(snapshotId);\n       return new AclStatus.Builder()\n           .owner(inode.getUserName()).group(inode.getGroupName())\n           .stickyBit(fsPermission.getStickyBit())\n           .setPermission(fsPermission)\n           .addEntries(acl).build();\n     } finally {\n       fsd.readUnlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static AclStatus getAclStatus(\n      FSDirectory fsd, FSPermissionChecker pc, String src) throws IOException {\n    checkAclsConfigFlag(fsd);\n    fsd.readLock();\n    try {\n      INodesInPath iip \u003d fsd.resolvePath(pc, src, DirOp.READ);\n      // There is no real inode for the path ending in \".snapshot\", so return a\n      // non-null, unpopulated AclStatus.  This is similar to getFileInfo.\n      if (iip.isDotSnapshotDir() \u0026\u0026 fsd.getINode4DotSnapshot(iip) !\u003d null) {\n        return new AclStatus.Builder().owner(\"\").group(\"\").build();\n      }\n      INode inode \u003d FSDirectory.resolveLastINode(iip);\n      int snapshotId \u003d iip.getPathSnapshotId();\n      List\u003cAclEntry\u003e acl \u003d AclStorage.readINodeAcl(fsd.getAttributes(iip));\n      FsPermission fsPermission \u003d inode.getFsPermission(snapshotId);\n      return new AclStatus.Builder()\n          .owner(inode.getUserName()).group(inode.getGroupName())\n          .stickyBit(fsPermission.getStickyBit())\n          .setPermission(fsPermission)\n          .addEntries(acl).build();\n    } finally {\n      fsd.readUnlock();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAclOp.java",
          "extendedDetails": {}
        }
      ]
    },
    "9d175853b0170683ad5f21d9bcdeaac49fe89e04": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10997. Reduce number of path resolving methods. Contributed by Daryn Sharp.\n",
      "commitDate": "24/10/16 3:14 PM",
      "commitName": "9d175853b0170683ad5f21d9bcdeaac49fe89e04",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "30/09/16 11:03 AM",
      "commitNameOld": "a0730aa5ced7666a8c92f9fb830b615f5f9f477a",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 24.17,
      "commitsBetweenForRepo": 168,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,25 @@\n   static AclStatus getAclStatus(\n       FSDirectory fsd, String src) throws IOException {\n     checkAclsConfigFlag(fsd);\n     FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n     fsd.readLock();\n     try {\n-      INodesInPath iip \u003d fsd.resolvePath(pc, src);\n+      INodesInPath iip \u003d fsd.resolvePath(pc, src, DirOp.READ);\n       // There is no real inode for the path ending in \".snapshot\", so return a\n       // non-null, unpopulated AclStatus.  This is similar to getFileInfo.\n       if (iip.isDotSnapshotDir() \u0026\u0026 fsd.getINode4DotSnapshot(iip) !\u003d null) {\n         return new AclStatus.Builder().owner(\"\").group(\"\").build();\n       }\n-      if (fsd.isPermissionEnabled()) {\n-        fsd.checkTraverse(pc, iip);\n-      }\n       INode inode \u003d FSDirectory.resolveLastINode(iip);\n       int snapshotId \u003d iip.getPathSnapshotId();\n       List\u003cAclEntry\u003e acl \u003d AclStorage.readINodeAcl(fsd.getAttributes(iip));\n       FsPermission fsPermission \u003d inode.getFsPermission(snapshotId);\n       return new AclStatus.Builder()\n           .owner(inode.getUserName()).group(inode.getGroupName())\n           .stickyBit(fsPermission.getStickyBit())\n           .setPermission(fsPermission)\n           .addEntries(acl).build();\n     } finally {\n       fsd.readUnlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static AclStatus getAclStatus(\n      FSDirectory fsd, String src) throws IOException {\n    checkAclsConfigFlag(fsd);\n    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n    fsd.readLock();\n    try {\n      INodesInPath iip \u003d fsd.resolvePath(pc, src, DirOp.READ);\n      // There is no real inode for the path ending in \".snapshot\", so return a\n      // non-null, unpopulated AclStatus.  This is similar to getFileInfo.\n      if (iip.isDotSnapshotDir() \u0026\u0026 fsd.getINode4DotSnapshot(iip) !\u003d null) {\n        return new AclStatus.Builder().owner(\"\").group(\"\").build();\n      }\n      INode inode \u003d FSDirectory.resolveLastINode(iip);\n      int snapshotId \u003d iip.getPathSnapshotId();\n      List\u003cAclEntry\u003e acl \u003d AclStorage.readINodeAcl(fsd.getAttributes(iip));\n      FsPermission fsPermission \u003d inode.getFsPermission(snapshotId);\n      return new AclStatus.Builder()\n          .owner(inode.getUserName()).group(inode.getGroupName())\n          .stickyBit(fsPermission.getStickyBit())\n          .setPermission(fsPermission)\n          .addEntries(acl).build();\n    } finally {\n      fsd.readUnlock();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAclOp.java",
      "extendedDetails": {}
    },
    "a0730aa5ced7666a8c92f9fb830b615f5f9f477a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10851. FSDirStatAndListingOp: stop passing path as string. Contributed by Daryn Sharp.\n",
      "commitDate": "30/09/16 11:03 AM",
      "commitName": "a0730aa5ced7666a8c92f9fb830b615f5f9f477a",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "17/08/16 1:53 PM",
      "commitNameOld": "869393643de23dcb010cc33091c8eb398de0fd6c",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 43.88,
      "commitsBetweenForRepo": 258,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,28 @@\n   static AclStatus getAclStatus(\n       FSDirectory fsd, String src) throws IOException {\n     checkAclsConfigFlag(fsd);\n     FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n     fsd.readLock();\n     try {\n       INodesInPath iip \u003d fsd.resolvePath(pc, src);\n-      src \u003d iip.getPath();\n       // There is no real inode for the path ending in \".snapshot\", so return a\n       // non-null, unpopulated AclStatus.  This is similar to getFileInfo.\n       if (iip.isDotSnapshotDir() \u0026\u0026 fsd.getINode4DotSnapshot(iip) !\u003d null) {\n         return new AclStatus.Builder().owner(\"\").group(\"\").build();\n       }\n       if (fsd.isPermissionEnabled()) {\n         fsd.checkTraverse(pc, iip);\n       }\n       INode inode \u003d FSDirectory.resolveLastINode(iip);\n       int snapshotId \u003d iip.getPathSnapshotId();\n-      List\u003cAclEntry\u003e acl \u003d AclStorage.readINodeAcl(fsd.getAttributes(src,\n-              inode.getLocalNameBytes(), inode, snapshotId));\n+      List\u003cAclEntry\u003e acl \u003d AclStorage.readINodeAcl(fsd.getAttributes(iip));\n       FsPermission fsPermission \u003d inode.getFsPermission(snapshotId);\n       return new AclStatus.Builder()\n           .owner(inode.getUserName()).group(inode.getGroupName())\n           .stickyBit(fsPermission.getStickyBit())\n           .setPermission(fsPermission)\n           .addEntries(acl).build();\n     } finally {\n       fsd.readUnlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static AclStatus getAclStatus(\n      FSDirectory fsd, String src) throws IOException {\n    checkAclsConfigFlag(fsd);\n    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n    fsd.readLock();\n    try {\n      INodesInPath iip \u003d fsd.resolvePath(pc, src);\n      // There is no real inode for the path ending in \".snapshot\", so return a\n      // non-null, unpopulated AclStatus.  This is similar to getFileInfo.\n      if (iip.isDotSnapshotDir() \u0026\u0026 fsd.getINode4DotSnapshot(iip) !\u003d null) {\n        return new AclStatus.Builder().owner(\"\").group(\"\").build();\n      }\n      if (fsd.isPermissionEnabled()) {\n        fsd.checkTraverse(pc, iip);\n      }\n      INode inode \u003d FSDirectory.resolveLastINode(iip);\n      int snapshotId \u003d iip.getPathSnapshotId();\n      List\u003cAclEntry\u003e acl \u003d AclStorage.readINodeAcl(fsd.getAttributes(iip));\n      FsPermission fsPermission \u003d inode.getFsPermission(snapshotId);\n      return new AclStatus.Builder()\n          .owner(inode.getUserName()).group(inode.getGroupName())\n          .stickyBit(fsPermission.getStickyBit())\n          .setPermission(fsPermission)\n          .addEntries(acl).build();\n    } finally {\n      fsd.readUnlock();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAclOp.java",
      "extendedDetails": {}
    },
    "869393643de23dcb010cc33091c8eb398de0fd6c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10745. Directly resolve paths into INodesInPath. Contributed by Daryn Sharp.\n",
      "commitDate": "17/08/16 1:53 PM",
      "commitName": "869393643de23dcb010cc33091c8eb398de0fd6c",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "15/08/16 2:45 PM",
      "commitNameOld": "03dea65e0b17ca2f9460bb6110f6ab3a321b8bf2",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 1.96,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,30 @@\n   static AclStatus getAclStatus(\n       FSDirectory fsd, String src) throws IOException {\n     checkAclsConfigFlag(fsd);\n     FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n-    src \u003d fsd.resolvePath(pc, src);\n-    String srcs \u003d FSDirectory.normalizePath(src);\n     fsd.readLock();\n     try {\n+      INodesInPath iip \u003d fsd.resolvePath(pc, src);\n+      src \u003d iip.getPath();\n       // There is no real inode for the path ending in \".snapshot\", so return a\n       // non-null, unpopulated AclStatus.  This is similar to getFileInfo.\n-      if (srcs.endsWith(HdfsConstants.SEPARATOR_DOT_SNAPSHOT_DIR) \u0026\u0026\n-          fsd.getINode4DotSnapshot(srcs) !\u003d null) {\n+      if (iip.isDotSnapshotDir() \u0026\u0026 fsd.getINode4DotSnapshot(iip) !\u003d null) {\n         return new AclStatus.Builder().owner(\"\").group(\"\").build();\n       }\n-      INodesInPath iip \u003d fsd.getINodesInPath(srcs, true);\n       if (fsd.isPermissionEnabled()) {\n         fsd.checkTraverse(pc, iip);\n       }\n       INode inode \u003d FSDirectory.resolveLastINode(iip);\n       int snapshotId \u003d iip.getPathSnapshotId();\n       List\u003cAclEntry\u003e acl \u003d AclStorage.readINodeAcl(fsd.getAttributes(src,\n               inode.getLocalNameBytes(), inode, snapshotId));\n       FsPermission fsPermission \u003d inode.getFsPermission(snapshotId);\n       return new AclStatus.Builder()\n           .owner(inode.getUserName()).group(inode.getGroupName())\n           .stickyBit(fsPermission.getStickyBit())\n           .setPermission(fsPermission)\n           .addEntries(acl).build();\n     } finally {\n       fsd.readUnlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static AclStatus getAclStatus(\n      FSDirectory fsd, String src) throws IOException {\n    checkAclsConfigFlag(fsd);\n    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n    fsd.readLock();\n    try {\n      INodesInPath iip \u003d fsd.resolvePath(pc, src);\n      src \u003d iip.getPath();\n      // There is no real inode for the path ending in \".snapshot\", so return a\n      // non-null, unpopulated AclStatus.  This is similar to getFileInfo.\n      if (iip.isDotSnapshotDir() \u0026\u0026 fsd.getINode4DotSnapshot(iip) !\u003d null) {\n        return new AclStatus.Builder().owner(\"\").group(\"\").build();\n      }\n      if (fsd.isPermissionEnabled()) {\n        fsd.checkTraverse(pc, iip);\n      }\n      INode inode \u003d FSDirectory.resolveLastINode(iip);\n      int snapshotId \u003d iip.getPathSnapshotId();\n      List\u003cAclEntry\u003e acl \u003d AclStorage.readINodeAcl(fsd.getAttributes(src,\n              inode.getLocalNameBytes(), inode, snapshotId));\n      FsPermission fsPermission \u003d inode.getFsPermission(snapshotId);\n      return new AclStatus.Builder()\n          .owner(inode.getUserName()).group(inode.getGroupName())\n          .stickyBit(fsPermission.getStickyBit())\n          .setPermission(fsPermission)\n          .addEntries(acl).build();\n    } finally {\n      fsd.readUnlock();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAclOp.java",
      "extendedDetails": {}
    },
    "03dea65e0b17ca2f9460bb6110f6ab3a321b8bf2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10744. Internally optimize path component resolution. Contributed by Daryn Sharp.\n",
      "commitDate": "15/08/16 2:45 PM",
      "commitName": "03dea65e0b17ca2f9460bb6110f6ab3a321b8bf2",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "09/04/15 12:38 PM",
      "commitNameOld": "922b7ed21d1f1460263ca42f709bb9f415d189c5",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 494.09,
      "commitsBetweenForRepo": 3721,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,32 @@\n   static AclStatus getAclStatus(\n       FSDirectory fsd, String src) throws IOException {\n     checkAclsConfigFlag(fsd);\n     FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n-    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n-    src \u003d fsd.resolvePath(pc, src, pathComponents);\n+    src \u003d fsd.resolvePath(pc, src);\n     String srcs \u003d FSDirectory.normalizePath(src);\n     fsd.readLock();\n     try {\n       // There is no real inode for the path ending in \".snapshot\", so return a\n       // non-null, unpopulated AclStatus.  This is similar to getFileInfo.\n       if (srcs.endsWith(HdfsConstants.SEPARATOR_DOT_SNAPSHOT_DIR) \u0026\u0026\n           fsd.getINode4DotSnapshot(srcs) !\u003d null) {\n         return new AclStatus.Builder().owner(\"\").group(\"\").build();\n       }\n       INodesInPath iip \u003d fsd.getINodesInPath(srcs, true);\n       if (fsd.isPermissionEnabled()) {\n         fsd.checkTraverse(pc, iip);\n       }\n       INode inode \u003d FSDirectory.resolveLastINode(iip);\n       int snapshotId \u003d iip.getPathSnapshotId();\n       List\u003cAclEntry\u003e acl \u003d AclStorage.readINodeAcl(fsd.getAttributes(src,\n               inode.getLocalNameBytes(), inode, snapshotId));\n       FsPermission fsPermission \u003d inode.getFsPermission(snapshotId);\n       return new AclStatus.Builder()\n           .owner(inode.getUserName()).group(inode.getGroupName())\n           .stickyBit(fsPermission.getStickyBit())\n           .setPermission(fsPermission)\n           .addEntries(acl).build();\n     } finally {\n       fsd.readUnlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static AclStatus getAclStatus(\n      FSDirectory fsd, String src) throws IOException {\n    checkAclsConfigFlag(fsd);\n    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n    src \u003d fsd.resolvePath(pc, src);\n    String srcs \u003d FSDirectory.normalizePath(src);\n    fsd.readLock();\n    try {\n      // There is no real inode for the path ending in \".snapshot\", so return a\n      // non-null, unpopulated AclStatus.  This is similar to getFileInfo.\n      if (srcs.endsWith(HdfsConstants.SEPARATOR_DOT_SNAPSHOT_DIR) \u0026\u0026\n          fsd.getINode4DotSnapshot(srcs) !\u003d null) {\n        return new AclStatus.Builder().owner(\"\").group(\"\").build();\n      }\n      INodesInPath iip \u003d fsd.getINodesInPath(srcs, true);\n      if (fsd.isPermissionEnabled()) {\n        fsd.checkTraverse(pc, iip);\n      }\n      INode inode \u003d FSDirectory.resolveLastINode(iip);\n      int snapshotId \u003d iip.getPathSnapshotId();\n      List\u003cAclEntry\u003e acl \u003d AclStorage.readINodeAcl(fsd.getAttributes(src,\n              inode.getLocalNameBytes(), inode, snapshotId));\n      FsPermission fsPermission \u003d inode.getFsPermission(snapshotId);\n      return new AclStatus.Builder()\n          .owner(inode.getUserName()).group(inode.getGroupName())\n          .stickyBit(fsPermission.getStickyBit())\n          .setPermission(fsPermission)\n          .addEntries(acl).build();\n    } finally {\n      fsd.readUnlock();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAclOp.java",
      "extendedDetails": {}
    },
    "922b7ed21d1f1460263ca42f709bb9f415d189c5": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8091: ACLStatus and XAttributes should be presented to INodeAttributesProvider before returning to client (asuresh)\n",
      "commitDate": "09/04/15 12:38 PM",
      "commitName": "922b7ed21d1f1460263ca42f709bb9f415d189c5",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "22/12/14 1:59 PM",
      "commitNameOld": "2cf90a2c338497a466bbad9e83966033bf14bfb7",
      "commitAuthorOld": "cnauroth",
      "daysBetweenCommits": 107.9,
      "commitsBetweenForRepo": 872,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,33 @@\n   static AclStatus getAclStatus(\n       FSDirectory fsd, String src) throws IOException {\n     checkAclsConfigFlag(fsd);\n     FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n     byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n     src \u003d fsd.resolvePath(pc, src, pathComponents);\n     String srcs \u003d FSDirectory.normalizePath(src);\n     fsd.readLock();\n     try {\n       // There is no real inode for the path ending in \".snapshot\", so return a\n       // non-null, unpopulated AclStatus.  This is similar to getFileInfo.\n       if (srcs.endsWith(HdfsConstants.SEPARATOR_DOT_SNAPSHOT_DIR) \u0026\u0026\n           fsd.getINode4DotSnapshot(srcs) !\u003d null) {\n         return new AclStatus.Builder().owner(\"\").group(\"\").build();\n       }\n       INodesInPath iip \u003d fsd.getINodesInPath(srcs, true);\n       if (fsd.isPermissionEnabled()) {\n         fsd.checkTraverse(pc, iip);\n       }\n       INode inode \u003d FSDirectory.resolveLastINode(iip);\n       int snapshotId \u003d iip.getPathSnapshotId();\n-      List\u003cAclEntry\u003e acl \u003d AclStorage.readINodeAcl(inode, snapshotId);\n+      List\u003cAclEntry\u003e acl \u003d AclStorage.readINodeAcl(fsd.getAttributes(src,\n+              inode.getLocalNameBytes(), inode, snapshotId));\n       FsPermission fsPermission \u003d inode.getFsPermission(snapshotId);\n       return new AclStatus.Builder()\n           .owner(inode.getUserName()).group(inode.getGroupName())\n           .stickyBit(fsPermission.getStickyBit())\n           .setPermission(fsPermission)\n           .addEntries(acl).build();\n     } finally {\n       fsd.readUnlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static AclStatus getAclStatus(\n      FSDirectory fsd, String src) throws IOException {\n    checkAclsConfigFlag(fsd);\n    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n    src \u003d fsd.resolvePath(pc, src, pathComponents);\n    String srcs \u003d FSDirectory.normalizePath(src);\n    fsd.readLock();\n    try {\n      // There is no real inode for the path ending in \".snapshot\", so return a\n      // non-null, unpopulated AclStatus.  This is similar to getFileInfo.\n      if (srcs.endsWith(HdfsConstants.SEPARATOR_DOT_SNAPSHOT_DIR) \u0026\u0026\n          fsd.getINode4DotSnapshot(srcs) !\u003d null) {\n        return new AclStatus.Builder().owner(\"\").group(\"\").build();\n      }\n      INodesInPath iip \u003d fsd.getINodesInPath(srcs, true);\n      if (fsd.isPermissionEnabled()) {\n        fsd.checkTraverse(pc, iip);\n      }\n      INode inode \u003d FSDirectory.resolveLastINode(iip);\n      int snapshotId \u003d iip.getPathSnapshotId();\n      List\u003cAclEntry\u003e acl \u003d AclStorage.readINodeAcl(fsd.getAttributes(src,\n              inode.getLocalNameBytes(), inode, snapshotId));\n      FsPermission fsPermission \u003d inode.getFsPermission(snapshotId);\n      return new AclStatus.Builder()\n          .owner(inode.getUserName()).group(inode.getGroupName())\n          .stickyBit(fsPermission.getStickyBit())\n          .setPermission(fsPermission)\n          .addEntries(acl).build();\n    } finally {\n      fsd.readUnlock();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAclOp.java",
      "extendedDetails": {}
    },
    "c78e3a7cdd10c40454e9acb06986ba6d8573cb19": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7059. Avoid resolving path multiple times. Contributed by Jing Zhao.\n",
      "commitDate": "12/12/14 3:13 PM",
      "commitName": "c78e3a7cdd10c40454e9acb06986ba6d8573cb19",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "08/12/14 10:23 AM",
      "commitNameOld": "ffe942b82c1208bc7b22899da3a233944cb5ab52",
      "commitAuthorOld": "cnauroth",
      "daysBetweenCommits": 4.2,
      "commitsBetweenForRepo": 50,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   static AclStatus getAclStatus(\n       FSDirectory fsd, String src) throws IOException {\n     checkAclsConfigFlag(fsd);\n     FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n     byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n     src \u003d fsd.resolvePath(pc, src, pathComponents);\n     String srcs \u003d FSDirectory.normalizePath(src);\n     fsd.readLock();\n     try {\n       // There is no real inode for the path ending in \".snapshot\", so return a\n       // non-null, unpopulated AclStatus.  This is similar to getFileInfo.\n       if (srcs.endsWith(HdfsConstants.SEPARATOR_DOT_SNAPSHOT_DIR) \u0026\u0026\n           fsd.getINode4DotSnapshot(srcs) !\u003d null) {\n         return new AclStatus.Builder().owner(\"\").group(\"\").build();\n       }\n       INodesInPath iip \u003d fsd.getINodesInPath(srcs, true);\n       if (fsd.isPermissionEnabled()) {\n         fsd.checkTraverse(pc, iip);\n       }\n-      INode inode \u003d FSDirectory.resolveLastINode(srcs, iip);\n+      INode inode \u003d FSDirectory.resolveLastINode(iip);\n       int snapshotId \u003d iip.getPathSnapshotId();\n       List\u003cAclEntry\u003e acl \u003d AclStorage.readINodeAcl(inode, snapshotId);\n       FsPermission fsPermission \u003d inode.getFsPermission(snapshotId);\n       return new AclStatus.Builder()\n           .owner(inode.getUserName()).group(inode.getGroupName())\n           .stickyBit(fsPermission.getStickyBit())\n           .setPermission(fsPermission)\n           .addEntries(acl).build();\n     } finally {\n       fsd.readUnlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static AclStatus getAclStatus(\n      FSDirectory fsd, String src) throws IOException {\n    checkAclsConfigFlag(fsd);\n    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n    src \u003d fsd.resolvePath(pc, src, pathComponents);\n    String srcs \u003d FSDirectory.normalizePath(src);\n    fsd.readLock();\n    try {\n      // There is no real inode for the path ending in \".snapshot\", so return a\n      // non-null, unpopulated AclStatus.  This is similar to getFileInfo.\n      if (srcs.endsWith(HdfsConstants.SEPARATOR_DOT_SNAPSHOT_DIR) \u0026\u0026\n          fsd.getINode4DotSnapshot(srcs) !\u003d null) {\n        return new AclStatus.Builder().owner(\"\").group(\"\").build();\n      }\n      INodesInPath iip \u003d fsd.getINodesInPath(srcs, true);\n      if (fsd.isPermissionEnabled()) {\n        fsd.checkTraverse(pc, iip);\n      }\n      INode inode \u003d FSDirectory.resolveLastINode(iip);\n      int snapshotId \u003d iip.getPathSnapshotId();\n      List\u003cAclEntry\u003e acl \u003d AclStorage.readINodeAcl(inode, snapshotId);\n      FsPermission fsPermission \u003d inode.getFsPermission(snapshotId);\n      return new AclStatus.Builder()\n          .owner(inode.getUserName()).group(inode.getGroupName())\n          .stickyBit(fsPermission.getStickyBit())\n          .setPermission(fsPermission)\n          .addEntries(acl).build();\n    } finally {\n      fsd.readUnlock();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAclOp.java",
      "extendedDetails": {}
    },
    "ffe942b82c1208bc7b22899da3a233944cb5ab52": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7384. getfacl command and getAclStatus output should be in sync. Contributed by Vinayakumar B.\n",
      "commitDate": "08/12/14 10:23 AM",
      "commitName": "ffe942b82c1208bc7b22899da3a233944cb5ab52",
      "commitAuthor": "cnauroth",
      "commitDateOld": "06/12/14 2:20 PM",
      "commitNameOld": "9297f980c2de8886ff970946a2513e6890cd5552",
      "commitAuthorOld": "cnauroth",
      "daysBetweenCommits": 1.84,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,32 @@\n   static AclStatus getAclStatus(\n       FSDirectory fsd, String src) throws IOException {\n     checkAclsConfigFlag(fsd);\n     FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n     byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n     src \u003d fsd.resolvePath(pc, src, pathComponents);\n     String srcs \u003d FSDirectory.normalizePath(src);\n     fsd.readLock();\n     try {\n       // There is no real inode for the path ending in \".snapshot\", so return a\n       // non-null, unpopulated AclStatus.  This is similar to getFileInfo.\n       if (srcs.endsWith(HdfsConstants.SEPARATOR_DOT_SNAPSHOT_DIR) \u0026\u0026\n           fsd.getINode4DotSnapshot(srcs) !\u003d null) {\n         return new AclStatus.Builder().owner(\"\").group(\"\").build();\n       }\n       INodesInPath iip \u003d fsd.getINodesInPath(srcs, true);\n       if (fsd.isPermissionEnabled()) {\n         fsd.checkTraverse(pc, iip);\n       }\n       INode inode \u003d FSDirectory.resolveLastINode(srcs, iip);\n       int snapshotId \u003d iip.getPathSnapshotId();\n       List\u003cAclEntry\u003e acl \u003d AclStorage.readINodeAcl(inode, snapshotId);\n+      FsPermission fsPermission \u003d inode.getFsPermission(snapshotId);\n       return new AclStatus.Builder()\n           .owner(inode.getUserName()).group(inode.getGroupName())\n-          .stickyBit(inode.getFsPermission(snapshotId).getStickyBit())\n+          .stickyBit(fsPermission.getStickyBit())\n+          .setPermission(fsPermission)\n           .addEntries(acl).build();\n     } finally {\n       fsd.readUnlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static AclStatus getAclStatus(\n      FSDirectory fsd, String src) throws IOException {\n    checkAclsConfigFlag(fsd);\n    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n    src \u003d fsd.resolvePath(pc, src, pathComponents);\n    String srcs \u003d FSDirectory.normalizePath(src);\n    fsd.readLock();\n    try {\n      // There is no real inode for the path ending in \".snapshot\", so return a\n      // non-null, unpopulated AclStatus.  This is similar to getFileInfo.\n      if (srcs.endsWith(HdfsConstants.SEPARATOR_DOT_SNAPSHOT_DIR) \u0026\u0026\n          fsd.getINode4DotSnapshot(srcs) !\u003d null) {\n        return new AclStatus.Builder().owner(\"\").group(\"\").build();\n      }\n      INodesInPath iip \u003d fsd.getINodesInPath(srcs, true);\n      if (fsd.isPermissionEnabled()) {\n        fsd.checkTraverse(pc, iip);\n      }\n      INode inode \u003d FSDirectory.resolveLastINode(srcs, iip);\n      int snapshotId \u003d iip.getPathSnapshotId();\n      List\u003cAclEntry\u003e acl \u003d AclStorage.readINodeAcl(inode, snapshotId);\n      FsPermission fsPermission \u003d inode.getFsPermission(snapshotId);\n      return new AclStatus.Builder()\n          .owner(inode.getUserName()).group(inode.getGroupName())\n          .stickyBit(fsPermission.getStickyBit())\n          .setPermission(fsPermission)\n          .addEntries(acl).build();\n    } finally {\n      fsd.readUnlock();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAclOp.java",
      "extendedDetails": {}
    },
    "9297f980c2de8886ff970946a2513e6890cd5552": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "HDFS-7476. Consolidate ACL-related operations to a single class. Contributed by Haohui Mai.\n",
      "commitDate": "06/12/14 2:20 PM",
      "commitName": "9297f980c2de8886ff970946a2513e6890cd5552",
      "commitAuthor": "cnauroth",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-7476. Consolidate ACL-related operations to a single class. Contributed by Haohui Mai.\n",
          "commitDate": "06/12/14 2:20 PM",
          "commitName": "9297f980c2de8886ff970946a2513e6890cd5552",
          "commitAuthor": "cnauroth",
          "commitDateOld": "05/12/14 6:37 PM",
          "commitNameOld": "e227fb8fbcd414717faded9454b8ef813f7aafea",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.82,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,30 @@\n-  AclStatus getAclStatus(String src) throws IOException {\n-    String srcs \u003d normalizePath(src);\n-    readLock();\n+  static AclStatus getAclStatus(\n+      FSDirectory fsd, String src) throws IOException {\n+    checkAclsConfigFlag(fsd);\n+    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n+    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n+    src \u003d fsd.resolvePath(pc, src, pathComponents);\n+    String srcs \u003d FSDirectory.normalizePath(src);\n+    fsd.readLock();\n     try {\n       // There is no real inode for the path ending in \".snapshot\", so return a\n       // non-null, unpopulated AclStatus.  This is similar to getFileInfo.\n       if (srcs.endsWith(HdfsConstants.SEPARATOR_DOT_SNAPSHOT_DIR) \u0026\u0026\n-          getINode4DotSnapshot(srcs) !\u003d null) {\n+          fsd.getINode4DotSnapshot(srcs) !\u003d null) {\n         return new AclStatus.Builder().owner(\"\").group(\"\").build();\n       }\n-      INodesInPath iip \u003d getLastINodeInPath(srcs, true);\n-      INode inode \u003d resolveLastINode(src, iip);\n+      INodesInPath iip \u003d fsd.getINodesInPath(srcs, true);\n+      if (fsd.isPermissionEnabled()) {\n+        fsd.checkTraverse(pc, iip);\n+      }\n+      INode inode \u003d FSDirectory.resolveLastINode(srcs, iip);\n       int snapshotId \u003d iip.getPathSnapshotId();\n       List\u003cAclEntry\u003e acl \u003d AclStorage.readINodeAcl(inode, snapshotId);\n       return new AclStatus.Builder()\n           .owner(inode.getUserName()).group(inode.getGroupName())\n           .stickyBit(inode.getFsPermission(snapshotId).getStickyBit())\n           .addEntries(acl).build();\n     } finally {\n-      readUnlock();\n+      fsd.readUnlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static AclStatus getAclStatus(\n      FSDirectory fsd, String src) throws IOException {\n    checkAclsConfigFlag(fsd);\n    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n    src \u003d fsd.resolvePath(pc, src, pathComponents);\n    String srcs \u003d FSDirectory.normalizePath(src);\n    fsd.readLock();\n    try {\n      // There is no real inode for the path ending in \".snapshot\", so return a\n      // non-null, unpopulated AclStatus.  This is similar to getFileInfo.\n      if (srcs.endsWith(HdfsConstants.SEPARATOR_DOT_SNAPSHOT_DIR) \u0026\u0026\n          fsd.getINode4DotSnapshot(srcs) !\u003d null) {\n        return new AclStatus.Builder().owner(\"\").group(\"\").build();\n      }\n      INodesInPath iip \u003d fsd.getINodesInPath(srcs, true);\n      if (fsd.isPermissionEnabled()) {\n        fsd.checkTraverse(pc, iip);\n      }\n      INode inode \u003d FSDirectory.resolveLastINode(srcs, iip);\n      int snapshotId \u003d iip.getPathSnapshotId();\n      List\u003cAclEntry\u003e acl \u003d AclStorage.readINodeAcl(inode, snapshotId);\n      return new AclStatus.Builder()\n          .owner(inode.getUserName()).group(inode.getGroupName())\n          .stickyBit(inode.getFsPermission(snapshotId).getStickyBit())\n          .addEntries(acl).build();\n    } finally {\n      fsd.readUnlock();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAclOp.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAclOp.java",
            "oldMethodName": "getAclStatus",
            "newMethodName": "getAclStatus"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-7476. Consolidate ACL-related operations to a single class. Contributed by Haohui Mai.\n",
          "commitDate": "06/12/14 2:20 PM",
          "commitName": "9297f980c2de8886ff970946a2513e6890cd5552",
          "commitAuthor": "cnauroth",
          "commitDateOld": "05/12/14 6:37 PM",
          "commitNameOld": "e227fb8fbcd414717faded9454b8ef813f7aafea",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.82,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,30 @@\n-  AclStatus getAclStatus(String src) throws IOException {\n-    String srcs \u003d normalizePath(src);\n-    readLock();\n+  static AclStatus getAclStatus(\n+      FSDirectory fsd, String src) throws IOException {\n+    checkAclsConfigFlag(fsd);\n+    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n+    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n+    src \u003d fsd.resolvePath(pc, src, pathComponents);\n+    String srcs \u003d FSDirectory.normalizePath(src);\n+    fsd.readLock();\n     try {\n       // There is no real inode for the path ending in \".snapshot\", so return a\n       // non-null, unpopulated AclStatus.  This is similar to getFileInfo.\n       if (srcs.endsWith(HdfsConstants.SEPARATOR_DOT_SNAPSHOT_DIR) \u0026\u0026\n-          getINode4DotSnapshot(srcs) !\u003d null) {\n+          fsd.getINode4DotSnapshot(srcs) !\u003d null) {\n         return new AclStatus.Builder().owner(\"\").group(\"\").build();\n       }\n-      INodesInPath iip \u003d getLastINodeInPath(srcs, true);\n-      INode inode \u003d resolveLastINode(src, iip);\n+      INodesInPath iip \u003d fsd.getINodesInPath(srcs, true);\n+      if (fsd.isPermissionEnabled()) {\n+        fsd.checkTraverse(pc, iip);\n+      }\n+      INode inode \u003d FSDirectory.resolveLastINode(srcs, iip);\n       int snapshotId \u003d iip.getPathSnapshotId();\n       List\u003cAclEntry\u003e acl \u003d AclStorage.readINodeAcl(inode, snapshotId);\n       return new AclStatus.Builder()\n           .owner(inode.getUserName()).group(inode.getGroupName())\n           .stickyBit(inode.getFsPermission(snapshotId).getStickyBit())\n           .addEntries(acl).build();\n     } finally {\n-      readUnlock();\n+      fsd.readUnlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static AclStatus getAclStatus(\n      FSDirectory fsd, String src) throws IOException {\n    checkAclsConfigFlag(fsd);\n    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n    src \u003d fsd.resolvePath(pc, src, pathComponents);\n    String srcs \u003d FSDirectory.normalizePath(src);\n    fsd.readLock();\n    try {\n      // There is no real inode for the path ending in \".snapshot\", so return a\n      // non-null, unpopulated AclStatus.  This is similar to getFileInfo.\n      if (srcs.endsWith(HdfsConstants.SEPARATOR_DOT_SNAPSHOT_DIR) \u0026\u0026\n          fsd.getINode4DotSnapshot(srcs) !\u003d null) {\n        return new AclStatus.Builder().owner(\"\").group(\"\").build();\n      }\n      INodesInPath iip \u003d fsd.getINodesInPath(srcs, true);\n      if (fsd.isPermissionEnabled()) {\n        fsd.checkTraverse(pc, iip);\n      }\n      INode inode \u003d FSDirectory.resolveLastINode(srcs, iip);\n      int snapshotId \u003d iip.getPathSnapshotId();\n      List\u003cAclEntry\u003e acl \u003d AclStorage.readINodeAcl(inode, snapshotId);\n      return new AclStatus.Builder()\n          .owner(inode.getUserName()).group(inode.getGroupName())\n          .stickyBit(inode.getFsPermission(snapshotId).getStickyBit())\n          .addEntries(acl).build();\n    } finally {\n      fsd.readUnlock();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAclOp.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7476. Consolidate ACL-related operations to a single class. Contributed by Haohui Mai.\n",
          "commitDate": "06/12/14 2:20 PM",
          "commitName": "9297f980c2de8886ff970946a2513e6890cd5552",
          "commitAuthor": "cnauroth",
          "commitDateOld": "05/12/14 6:37 PM",
          "commitNameOld": "e227fb8fbcd414717faded9454b8ef813f7aafea",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.82,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,30 @@\n-  AclStatus getAclStatus(String src) throws IOException {\n-    String srcs \u003d normalizePath(src);\n-    readLock();\n+  static AclStatus getAclStatus(\n+      FSDirectory fsd, String src) throws IOException {\n+    checkAclsConfigFlag(fsd);\n+    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n+    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n+    src \u003d fsd.resolvePath(pc, src, pathComponents);\n+    String srcs \u003d FSDirectory.normalizePath(src);\n+    fsd.readLock();\n     try {\n       // There is no real inode for the path ending in \".snapshot\", so return a\n       // non-null, unpopulated AclStatus.  This is similar to getFileInfo.\n       if (srcs.endsWith(HdfsConstants.SEPARATOR_DOT_SNAPSHOT_DIR) \u0026\u0026\n-          getINode4DotSnapshot(srcs) !\u003d null) {\n+          fsd.getINode4DotSnapshot(srcs) !\u003d null) {\n         return new AclStatus.Builder().owner(\"\").group(\"\").build();\n       }\n-      INodesInPath iip \u003d getLastINodeInPath(srcs, true);\n-      INode inode \u003d resolveLastINode(src, iip);\n+      INodesInPath iip \u003d fsd.getINodesInPath(srcs, true);\n+      if (fsd.isPermissionEnabled()) {\n+        fsd.checkTraverse(pc, iip);\n+      }\n+      INode inode \u003d FSDirectory.resolveLastINode(srcs, iip);\n       int snapshotId \u003d iip.getPathSnapshotId();\n       List\u003cAclEntry\u003e acl \u003d AclStorage.readINodeAcl(inode, snapshotId);\n       return new AclStatus.Builder()\n           .owner(inode.getUserName()).group(inode.getGroupName())\n           .stickyBit(inode.getFsPermission(snapshotId).getStickyBit())\n           .addEntries(acl).build();\n     } finally {\n-      readUnlock();\n+      fsd.readUnlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static AclStatus getAclStatus(\n      FSDirectory fsd, String src) throws IOException {\n    checkAclsConfigFlag(fsd);\n    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n    src \u003d fsd.resolvePath(pc, src, pathComponents);\n    String srcs \u003d FSDirectory.normalizePath(src);\n    fsd.readLock();\n    try {\n      // There is no real inode for the path ending in \".snapshot\", so return a\n      // non-null, unpopulated AclStatus.  This is similar to getFileInfo.\n      if (srcs.endsWith(HdfsConstants.SEPARATOR_DOT_SNAPSHOT_DIR) \u0026\u0026\n          fsd.getINode4DotSnapshot(srcs) !\u003d null) {\n        return new AclStatus.Builder().owner(\"\").group(\"\").build();\n      }\n      INodesInPath iip \u003d fsd.getINodesInPath(srcs, true);\n      if (fsd.isPermissionEnabled()) {\n        fsd.checkTraverse(pc, iip);\n      }\n      INode inode \u003d FSDirectory.resolveLastINode(srcs, iip);\n      int snapshotId \u003d iip.getPathSnapshotId();\n      List\u003cAclEntry\u003e acl \u003d AclStorage.readINodeAcl(inode, snapshotId);\n      return new AclStatus.Builder()\n          .owner(inode.getUserName()).group(inode.getGroupName())\n          .stickyBit(inode.getFsPermission(snapshotId).getStickyBit())\n          .addEntries(acl).build();\n    } finally {\n      fsd.readUnlock();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAclOp.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7476. Consolidate ACL-related operations to a single class. Contributed by Haohui Mai.\n",
          "commitDate": "06/12/14 2:20 PM",
          "commitName": "9297f980c2de8886ff970946a2513e6890cd5552",
          "commitAuthor": "cnauroth",
          "commitDateOld": "05/12/14 6:37 PM",
          "commitNameOld": "e227fb8fbcd414717faded9454b8ef813f7aafea",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.82,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,30 @@\n-  AclStatus getAclStatus(String src) throws IOException {\n-    String srcs \u003d normalizePath(src);\n-    readLock();\n+  static AclStatus getAclStatus(\n+      FSDirectory fsd, String src) throws IOException {\n+    checkAclsConfigFlag(fsd);\n+    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n+    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n+    src \u003d fsd.resolvePath(pc, src, pathComponents);\n+    String srcs \u003d FSDirectory.normalizePath(src);\n+    fsd.readLock();\n     try {\n       // There is no real inode for the path ending in \".snapshot\", so return a\n       // non-null, unpopulated AclStatus.  This is similar to getFileInfo.\n       if (srcs.endsWith(HdfsConstants.SEPARATOR_DOT_SNAPSHOT_DIR) \u0026\u0026\n-          getINode4DotSnapshot(srcs) !\u003d null) {\n+          fsd.getINode4DotSnapshot(srcs) !\u003d null) {\n         return new AclStatus.Builder().owner(\"\").group(\"\").build();\n       }\n-      INodesInPath iip \u003d getLastINodeInPath(srcs, true);\n-      INode inode \u003d resolveLastINode(src, iip);\n+      INodesInPath iip \u003d fsd.getINodesInPath(srcs, true);\n+      if (fsd.isPermissionEnabled()) {\n+        fsd.checkTraverse(pc, iip);\n+      }\n+      INode inode \u003d FSDirectory.resolveLastINode(srcs, iip);\n       int snapshotId \u003d iip.getPathSnapshotId();\n       List\u003cAclEntry\u003e acl \u003d AclStorage.readINodeAcl(inode, snapshotId);\n       return new AclStatus.Builder()\n           .owner(inode.getUserName()).group(inode.getGroupName())\n           .stickyBit(inode.getFsPermission(snapshotId).getStickyBit())\n           .addEntries(acl).build();\n     } finally {\n-      readUnlock();\n+      fsd.readUnlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static AclStatus getAclStatus(\n      FSDirectory fsd, String src) throws IOException {\n    checkAclsConfigFlag(fsd);\n    FSPermissionChecker pc \u003d fsd.getPermissionChecker();\n    byte[][] pathComponents \u003d FSDirectory.getPathComponentsForReservedPath(src);\n    src \u003d fsd.resolvePath(pc, src, pathComponents);\n    String srcs \u003d FSDirectory.normalizePath(src);\n    fsd.readLock();\n    try {\n      // There is no real inode for the path ending in \".snapshot\", so return a\n      // non-null, unpopulated AclStatus.  This is similar to getFileInfo.\n      if (srcs.endsWith(HdfsConstants.SEPARATOR_DOT_SNAPSHOT_DIR) \u0026\u0026\n          fsd.getINode4DotSnapshot(srcs) !\u003d null) {\n        return new AclStatus.Builder().owner(\"\").group(\"\").build();\n      }\n      INodesInPath iip \u003d fsd.getINodesInPath(srcs, true);\n      if (fsd.isPermissionEnabled()) {\n        fsd.checkTraverse(pc, iip);\n      }\n      INode inode \u003d FSDirectory.resolveLastINode(srcs, iip);\n      int snapshotId \u003d iip.getPathSnapshotId();\n      List\u003cAclEntry\u003e acl \u003d AclStorage.readINodeAcl(inode, snapshotId);\n      return new AclStatus.Builder()\n          .owner(inode.getUserName()).group(inode.getGroupName())\n          .stickyBit(inode.getFsPermission(snapshotId).getStickyBit())\n          .addEntries(acl).build();\n    } finally {\n      fsd.readUnlock();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAclOp.java",
          "extendedDetails": {
            "oldValue": "[src-String]",
            "newValue": "[fsd-FSDirectory, src-String]"
          }
        }
      ]
    },
    "0689363343a281a6f7f6f395227668bddc2663eb": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6304. Consolidate the logic of path resolution in FSDirectory. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1591411 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/04/14 10:44 AM",
      "commitName": "0689363343a281a6f7f6f395227668bddc2663eb",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "24/04/14 7:05 PM",
      "commitNameOld": "10a037cccb00c9f791da394bf2dc05985fb80612",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 5.65,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n   AclStatus getAclStatus(String src) throws IOException {\n     String srcs \u003d normalizePath(src);\n     readLock();\n     try {\n       // There is no real inode for the path ending in \".snapshot\", so return a\n       // non-null, unpopulated AclStatus.  This is similar to getFileInfo.\n       if (srcs.endsWith(HdfsConstants.SEPARATOR_DOT_SNAPSHOT_DIR) \u0026\u0026\n           getINode4DotSnapshot(srcs) !\u003d null) {\n         return new AclStatus.Builder().owner(\"\").group(\"\").build();\n       }\n-      INodesInPath iip \u003d rootDir.getLastINodeInPath(srcs, true);\n+      INodesInPath iip \u003d getLastINodeInPath(srcs, true);\n       INode inode \u003d resolveLastINode(src, iip);\n       int snapshotId \u003d iip.getPathSnapshotId();\n       List\u003cAclEntry\u003e acl \u003d AclStorage.readINodeAcl(inode, snapshotId);\n       return new AclStatus.Builder()\n           .owner(inode.getUserName()).group(inode.getGroupName())\n           .stickyBit(inode.getFsPermission(snapshotId).getStickyBit())\n           .addEntries(acl).build();\n     } finally {\n       readUnlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  AclStatus getAclStatus(String src) throws IOException {\n    String srcs \u003d normalizePath(src);\n    readLock();\n    try {\n      // There is no real inode for the path ending in \".snapshot\", so return a\n      // non-null, unpopulated AclStatus.  This is similar to getFileInfo.\n      if (srcs.endsWith(HdfsConstants.SEPARATOR_DOT_SNAPSHOT_DIR) \u0026\u0026\n          getINode4DotSnapshot(srcs) !\u003d null) {\n        return new AclStatus.Builder().owner(\"\").group(\"\").build();\n      }\n      INodesInPath iip \u003d getLastINodeInPath(srcs, true);\n      INode inode \u003d resolveLastINode(src, iip);\n      int snapshotId \u003d iip.getPathSnapshotId();\n      List\u003cAclEntry\u003e acl \u003d AclStorage.readINodeAcl(inode, snapshotId);\n      return new AclStatus.Builder()\n          .owner(inode.getUserName()).group(inode.getGroupName())\n          .stickyBit(inode.getFsPermission(snapshotId).getStickyBit())\n          .addEntries(acl).build();\n    } finally {\n      readUnlock();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
      "extendedDetails": {}
    },
    "14f1f76bf609704d36a1699c05fa85750cefe917": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5614. NameNode: implement handling of ACLs in combination with snapshots. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4685@1563304 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/01/14 2:21 PM",
      "commitName": "14f1f76bf609704d36a1699c05fa85750cefe917",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "23/01/14 9:49 AM",
      "commitNameOld": "738b076cc6d12a99c454584df08d35c43184be8b",
      "commitAuthorOld": "",
      "daysBetweenCommits": 8.19,
      "commitsBetweenForRepo": 49,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,22 @@\n   AclStatus getAclStatus(String src) throws IOException {\n+    String srcs \u003d normalizePath(src);\n     readLock();\n     try {\n-      INodesInPath iip \u003d rootDir.getINodesInPath4Write(normalizePath(src), true);\n-      final INodeWithAdditionalFields inode \u003d resolveINodeWithAdditionalFields(\n-        src, iip);\n-      int snapshotId \u003d iip.getLatestSnapshotId();\n+      // There is no real inode for the path ending in \".snapshot\", so return a\n+      // non-null, unpopulated AclStatus.  This is similar to getFileInfo.\n+      if (srcs.endsWith(HdfsConstants.SEPARATOR_DOT_SNAPSHOT_DIR) \u0026\u0026\n+          getINode4DotSnapshot(srcs) !\u003d null) {\n+        return new AclStatus.Builder().owner(\"\").group(\"\").build();\n+      }\n+      INodesInPath iip \u003d rootDir.getLastINodeInPath(srcs, true);\n+      INode inode \u003d resolveLastINode(src, iip);\n+      int snapshotId \u003d iip.getPathSnapshotId();\n       List\u003cAclEntry\u003e acl \u003d AclStorage.readINodeAcl(inode, snapshotId);\n       return new AclStatus.Builder()\n           .owner(inode.getUserName()).group(inode.getGroupName())\n           .stickyBit(inode.getFsPermission(snapshotId).getStickyBit())\n           .addEntries(acl).build();\n     } finally {\n       readUnlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  AclStatus getAclStatus(String src) throws IOException {\n    String srcs \u003d normalizePath(src);\n    readLock();\n    try {\n      // There is no real inode for the path ending in \".snapshot\", so return a\n      // non-null, unpopulated AclStatus.  This is similar to getFileInfo.\n      if (srcs.endsWith(HdfsConstants.SEPARATOR_DOT_SNAPSHOT_DIR) \u0026\u0026\n          getINode4DotSnapshot(srcs) !\u003d null) {\n        return new AclStatus.Builder().owner(\"\").group(\"\").build();\n      }\n      INodesInPath iip \u003d rootDir.getLastINodeInPath(srcs, true);\n      INode inode \u003d resolveLastINode(src, iip);\n      int snapshotId \u003d iip.getPathSnapshotId();\n      List\u003cAclEntry\u003e acl \u003d AclStorage.readINodeAcl(inode, snapshotId);\n      return new AclStatus.Builder()\n          .owner(inode.getUserName()).group(inode.getGroupName())\n          .stickyBit(inode.getFsPermission(snapshotId).getStickyBit())\n          .addEntries(acl).build();\n    } finally {\n      readUnlock();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
      "extendedDetails": {}
    }
  }
}