{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CumulativeCpuUsageEmulatorPlugin.java",
  "functionName": "calibrate",
  "functionId": "calibrate___monitor-ResourceCalculatorPlugin__totalCpuUsage-long",
  "sourceFilePath": "hadoop-tools/hadoop-gridmix/src/main/java/org/apache/hadoop/mapred/gridmix/emulators/resourceusage/CumulativeCpuUsageEmulatorPlugin.java",
  "functionStartLine": 167,
  "functionEndLine": 196,
  "numCommitsSeen": 8,
  "timeTaken": 1078,
  "changeHistory": [
    "d41e67b966b4ced602ae27e6ccc6a73cd4068a05",
    "dcf84707ab50662add112bd6b01c0bfd63374853",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "3fd40ae8d0b45d7bf6186fe14851ca87eb9ee3ef"
  ],
  "changeHistoryShort": {
    "d41e67b966b4ced602ae27e6ccc6a73cd4068a05": "Ybodychange",
    "dcf84707ab50662add112bd6b01c0bfd63374853": "Yfilerename",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "3fd40ae8d0b45d7bf6186fe14851ca87eb9ee3ef": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d41e67b966b4ced602ae27e6ccc6a73cd4068a05": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5077. Remove mapreduce.util.ResourceCalculatorPlugin and related code. Contributed by Karthik Kambatla.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1461251 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/03/13 11:15 AM",
      "commitName": "d41e67b966b4ced602ae27e6ccc6a73cd4068a05",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "17/05/12 8:06 AM",
      "commitNameOld": "dcf84707ab50662add112bd6b01c0bfd63374853",
      "commitAuthorOld": "Thomas Graves",
      "daysBetweenCommits": 313.13,
      "commitsBetweenForRepo": 1589,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n     public void calibrate(ResourceCalculatorPlugin monitor, \n                           long totalCpuUsage) {\n-      long initTime \u003d monitor.getProcResourceValues().getCumulativeCpuTime();\n+      long initTime \u003d monitor.getCumulativeCpuTime();\n       \n       long defaultLoopSize \u003d 0;\n       long finalTime \u003d initTime;\n       \n       //TODO Make this configurable\n       while (finalTime - initTime \u003c 100) { // 100 ms\n         ++defaultLoopSize;\n         performUnitComputation(); //perform unit computation\n-        finalTime \u003d monitor.getProcResourceValues().getCumulativeCpuTime();\n+        finalTime \u003d monitor.getCumulativeCpuTime();\n       }\n       \n       long referenceRuntime \u003d finalTime - initTime;\n       \n       // time for one loop \u003d (final-time - init-time) / total-loops\n       float timePerLoop \u003d ((float)referenceRuntime) / defaultLoopSize;\n       \n       // compute the 1% of the total CPU usage desired\n       //TODO Make this configurable\n       long onePercent \u003d totalCpuUsage / 100;\n       \n       // num-iterations for 1% \u003d (total-desired-usage / 100) / time-for-one-loop\n       numIterations \u003d Math.max(1, (int)((float)onePercent/timePerLoop));\n       \n       System.out.println(\"Calibration done. Basic computation runtime : \" \n           + timePerLoop + \" milliseconds. Optimal number of iterations (1%): \" \n           + numIterations);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void calibrate(ResourceCalculatorPlugin monitor, \n                          long totalCpuUsage) {\n      long initTime \u003d monitor.getCumulativeCpuTime();\n      \n      long defaultLoopSize \u003d 0;\n      long finalTime \u003d initTime;\n      \n      //TODO Make this configurable\n      while (finalTime - initTime \u003c 100) { // 100 ms\n        ++defaultLoopSize;\n        performUnitComputation(); //perform unit computation\n        finalTime \u003d monitor.getCumulativeCpuTime();\n      }\n      \n      long referenceRuntime \u003d finalTime - initTime;\n      \n      // time for one loop \u003d (final-time - init-time) / total-loops\n      float timePerLoop \u003d ((float)referenceRuntime) / defaultLoopSize;\n      \n      // compute the 1% of the total CPU usage desired\n      //TODO Make this configurable\n      long onePercent \u003d totalCpuUsage / 100;\n      \n      // num-iterations for 1% \u003d (total-desired-usage / 100) / time-for-one-loop\n      numIterations \u003d Math.max(1, (int)((float)onePercent/timePerLoop));\n      \n      System.out.println(\"Calibration done. Basic computation runtime : \" \n          + timePerLoop + \" milliseconds. Optimal number of iterations (1%): \" \n          + numIterations);\n    }",
      "path": "hadoop-tools/hadoop-gridmix/src/main/java/org/apache/hadoop/mapred/gridmix/emulators/resourceusage/CumulativeCpuUsageEmulatorPlugin.java",
      "extendedDetails": {}
    },
    "dcf84707ab50662add112bd6b01c0bfd63374853": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-3543. Mavenize Gridmix. (tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1339629 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/05/12 8:06 AM",
      "commitName": "dcf84707ab50662add112bd6b01c0bfd63374853",
      "commitAuthor": "Thomas Graves",
      "commitDateOld": "17/05/12 7:20 AM",
      "commitNameOld": "e1f09365ca0bee093f849fcf2e546dd6e2c0a965",
      "commitAuthorOld": "Harsh J",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void calibrate(ResourceCalculatorPlugin monitor, \n                          long totalCpuUsage) {\n      long initTime \u003d monitor.getProcResourceValues().getCumulativeCpuTime();\n      \n      long defaultLoopSize \u003d 0;\n      long finalTime \u003d initTime;\n      \n      //TODO Make this configurable\n      while (finalTime - initTime \u003c 100) { // 100 ms\n        ++defaultLoopSize;\n        performUnitComputation(); //perform unit computation\n        finalTime \u003d monitor.getProcResourceValues().getCumulativeCpuTime();\n      }\n      \n      long referenceRuntime \u003d finalTime - initTime;\n      \n      // time for one loop \u003d (final-time - init-time) / total-loops\n      float timePerLoop \u003d ((float)referenceRuntime) / defaultLoopSize;\n      \n      // compute the 1% of the total CPU usage desired\n      //TODO Make this configurable\n      long onePercent \u003d totalCpuUsage / 100;\n      \n      // num-iterations for 1% \u003d (total-desired-usage / 100) / time-for-one-loop\n      numIterations \u003d Math.max(1, (int)((float)onePercent/timePerLoop));\n      \n      System.out.println(\"Calibration done. Basic computation runtime : \" \n          + timePerLoop + \" milliseconds. Optimal number of iterations (1%): \" \n          + numIterations);\n    }",
      "path": "hadoop-tools/hadoop-gridmix/src/main/java/org/apache/hadoop/mapred/gridmix/emulators/resourceusage/CumulativeCpuUsageEmulatorPlugin.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/emulators/resourceusage/CumulativeCpuUsageEmulatorPlugin.java",
        "newPath": "hadoop-tools/hadoop-gridmix/src/main/java/org/apache/hadoop/mapred/gridmix/emulators/resourceusage/CumulativeCpuUsageEmulatorPlugin.java"
      }
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void calibrate(ResourceCalculatorPlugin monitor, \n                          long totalCpuUsage) {\n      long initTime \u003d monitor.getProcResourceValues().getCumulativeCpuTime();\n      \n      long defaultLoopSize \u003d 0;\n      long finalTime \u003d initTime;\n      \n      //TODO Make this configurable\n      while (finalTime - initTime \u003c 100) { // 100 ms\n        ++defaultLoopSize;\n        performUnitComputation(); //perform unit computation\n        finalTime \u003d monitor.getProcResourceValues().getCumulativeCpuTime();\n      }\n      \n      long referenceRuntime \u003d finalTime - initTime;\n      \n      // time for one loop \u003d (final-time - init-time) / total-loops\n      float timePerLoop \u003d ((float)referenceRuntime) / defaultLoopSize;\n      \n      // compute the 1% of the total CPU usage desired\n      //TODO Make this configurable\n      long onePercent \u003d totalCpuUsage / 100;\n      \n      // num-iterations for 1% \u003d (total-desired-usage / 100) / time-for-one-loop\n      numIterations \u003d Math.max(1, (int)((float)onePercent/timePerLoop));\n      \n      System.out.println(\"Calibration done. Basic computation runtime : \" \n          + timePerLoop + \" milliseconds. Optimal number of iterations (1%): \" \n          + numIterations);\n    }",
      "path": "hadoop-mapreduce-project/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/emulators/resourceusage/CumulativeCpuUsageEmulatorPlugin.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/emulators/resourceusage/CumulativeCpuUsageEmulatorPlugin.java",
        "newPath": "hadoop-mapreduce-project/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/emulators/resourceusage/CumulativeCpuUsageEmulatorPlugin.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void calibrate(ResourceCalculatorPlugin monitor, \n                          long totalCpuUsage) {\n      long initTime \u003d monitor.getProcResourceValues().getCumulativeCpuTime();\n      \n      long defaultLoopSize \u003d 0;\n      long finalTime \u003d initTime;\n      \n      //TODO Make this configurable\n      while (finalTime - initTime \u003c 100) { // 100 ms\n        ++defaultLoopSize;\n        performUnitComputation(); //perform unit computation\n        finalTime \u003d monitor.getProcResourceValues().getCumulativeCpuTime();\n      }\n      \n      long referenceRuntime \u003d finalTime - initTime;\n      \n      // time for one loop \u003d (final-time - init-time) / total-loops\n      float timePerLoop \u003d ((float)referenceRuntime) / defaultLoopSize;\n      \n      // compute the 1% of the total CPU usage desired\n      //TODO Make this configurable\n      long onePercent \u003d totalCpuUsage / 100;\n      \n      // num-iterations for 1% \u003d (total-desired-usage / 100) / time-for-one-loop\n      numIterations \u003d Math.max(1, (int)((float)onePercent/timePerLoop));\n      \n      System.out.println(\"Calibration done. Basic computation runtime : \" \n          + timePerLoop + \" milliseconds. Optimal number of iterations (1%): \" \n          + numIterations);\n    }",
      "path": "hadoop-mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/emulators/resourceusage/CumulativeCpuUsageEmulatorPlugin.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/emulators/resourceusage/CumulativeCpuUsageEmulatorPlugin.java",
        "newPath": "hadoop-mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/emulators/resourceusage/CumulativeCpuUsageEmulatorPlugin.java"
      }
    },
    "3fd40ae8d0b45d7bf6186fe14851ca87eb9ee3ef": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-2106. [Gridmix] Cumulative CPU usage emulation in Gridmix. (amarrk)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1135396 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/06/11 12:44 AM",
      "commitName": "3fd40ae8d0b45d7bf6186fe14851ca87eb9ee3ef",
      "commitAuthor": "Amar Kamat",
      "diff": "@@ -0,0 +1,30 @@\n+    public void calibrate(ResourceCalculatorPlugin monitor, \n+                          long totalCpuUsage) {\n+      long initTime \u003d monitor.getProcResourceValues().getCumulativeCpuTime();\n+      \n+      long defaultLoopSize \u003d 0;\n+      long finalTime \u003d initTime;\n+      \n+      //TODO Make this configurable\n+      while (finalTime - initTime \u003c 100) { // 100 ms\n+        ++defaultLoopSize;\n+        performUnitComputation(); //perform unit computation\n+        finalTime \u003d monitor.getProcResourceValues().getCumulativeCpuTime();\n+      }\n+      \n+      long referenceRuntime \u003d finalTime - initTime;\n+      \n+      // time for one loop \u003d (final-time - init-time) / total-loops\n+      float timePerLoop \u003d ((float)referenceRuntime) / defaultLoopSize;\n+      \n+      // compute the 1% of the total CPU usage desired\n+      //TODO Make this configurable\n+      long onePercent \u003d totalCpuUsage / 100;\n+      \n+      // num-iterations for 1% \u003d (total-desired-usage / 100) / time-for-one-loop\n+      numIterations \u003d Math.max(1, (int)((float)onePercent/timePerLoop));\n+      \n+      System.out.println(\"Calibration done. Basic computation runtime : \" \n+          + timePerLoop + \" milliseconds. Optimal number of iterations (1%): \" \n+          + numIterations);\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void calibrate(ResourceCalculatorPlugin monitor, \n                          long totalCpuUsage) {\n      long initTime \u003d monitor.getProcResourceValues().getCumulativeCpuTime();\n      \n      long defaultLoopSize \u003d 0;\n      long finalTime \u003d initTime;\n      \n      //TODO Make this configurable\n      while (finalTime - initTime \u003c 100) { // 100 ms\n        ++defaultLoopSize;\n        performUnitComputation(); //perform unit computation\n        finalTime \u003d monitor.getProcResourceValues().getCumulativeCpuTime();\n      }\n      \n      long referenceRuntime \u003d finalTime - initTime;\n      \n      // time for one loop \u003d (final-time - init-time) / total-loops\n      float timePerLoop \u003d ((float)referenceRuntime) / defaultLoopSize;\n      \n      // compute the 1% of the total CPU usage desired\n      //TODO Make this configurable\n      long onePercent \u003d totalCpuUsage / 100;\n      \n      // num-iterations for 1% \u003d (total-desired-usage / 100) / time-for-one-loop\n      numIterations \u003d Math.max(1, (int)((float)onePercent/timePerLoop));\n      \n      System.out.println(\"Calibration done. Basic computation runtime : \" \n          + timePerLoop + \" milliseconds. Optimal number of iterations (1%): \" \n          + numIterations);\n    }",
      "path": "mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/emulators/resourceusage/CumulativeCpuUsageEmulatorPlugin.java"
    }
  }
}