{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JavaSandboxLinuxContainerRuntime.java",
  "functionName": "appendSecurityFlags",
  "functionId": "appendSecurityFlags___commands-List__String____env-Map__String,String____policyPath-Path__sandboxMode-SandboxMode",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/JavaSandboxLinuxContainerRuntime.java",
  "functionStartLine": 514,
  "functionEndLine": 540,
  "numCommitsSeen": 9,
  "timeTaken": 1312,
  "changeHistory": [
    "68e45f554b6cf7d56fca6bbf6e89dc4f55fdc716",
    "6f6dfe0202249c129b36edfd145a2224140139cc"
  ],
  "changeHistoryShort": {
    "68e45f554b6cf7d56fca6bbf6e89dc4f55fdc716": "Ybodychange",
    "6f6dfe0202249c129b36edfd145a2224140139cc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "68e45f554b6cf7d56fca6bbf6e89dc4f55fdc716": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6472. Improve Java sandbox regex (gphillips via rkanter)\n",
      "commitDate": "28/04/17 11:01 AM",
      "commitName": "68e45f554b6cf7d56fca6bbf6e89dc4f55fdc716",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "01/03/17 2:53 PM",
      "commitNameOld": "6f6dfe0202249c129b36edfd145a2224140139cc",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 57.8,
      "commitsBetweenForRepo": 341,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n     static void appendSecurityFlags(List\u003cString\u003e commands,\n         Map\u003cString, String\u003e env, Path policyPath, SandboxMode sandboxMode)\n         throws ContainerExecutionException {\n \n       for(int i \u003d 0; i \u003c commands.size(); i++){\n         String command \u003d commands.get(i);\n         if(validateJavaHome(env.get(JAVA_HOME.name()))\n             \u0026\u0026 command.matches(CONTAINS_JAVA_CMD)\n-            \u0026\u0026 !command.matches(CHAINED_COMMAND_REGEX)){\n+            \u0026\u0026 !command.matches(MULTI_COMMAND_REGEX)){\n           command \u003d command.replaceAll(CLEAN_CMD_REGEX, \"\");\n           String securityString \u003d JVM_SECURITY_CMD + policyPath + \" \";\n           if(LOG.isDebugEnabled()) {\n             securityString +\u003d SECURITY_DEBUG;\n           }\n           commands.set(i, command.replaceFirst(JAVA_CMD, securityString));\n         } else if (sandboxMode \u003d\u003d SandboxMode.enforcing){\n           throw new ContainerExecutionException(\n               \"Only JVM containers permitted in YARN sandbox mode (enforcing). \"\n             + \"The following command can not be executed securely: \" + command);\n         } else if (sandboxMode \u003d\u003d SandboxMode.permissive){\n           LOG.warn(\"The container will run without the java security manager\"\n               + \" due to an unsupported container command.  The command\"\n               + \" will be permitted to run in Sandbox permissive mode: \"\n               + command);\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    static void appendSecurityFlags(List\u003cString\u003e commands,\n        Map\u003cString, String\u003e env, Path policyPath, SandboxMode sandboxMode)\n        throws ContainerExecutionException {\n\n      for(int i \u003d 0; i \u003c commands.size(); i++){\n        String command \u003d commands.get(i);\n        if(validateJavaHome(env.get(JAVA_HOME.name()))\n            \u0026\u0026 command.matches(CONTAINS_JAVA_CMD)\n            \u0026\u0026 !command.matches(MULTI_COMMAND_REGEX)){\n          command \u003d command.replaceAll(CLEAN_CMD_REGEX, \"\");\n          String securityString \u003d JVM_SECURITY_CMD + policyPath + \" \";\n          if(LOG.isDebugEnabled()) {\n            securityString +\u003d SECURITY_DEBUG;\n          }\n          commands.set(i, command.replaceFirst(JAVA_CMD, securityString));\n        } else if (sandboxMode \u003d\u003d SandboxMode.enforcing){\n          throw new ContainerExecutionException(\n              \"Only JVM containers permitted in YARN sandbox mode (enforcing). \"\n            + \"The following command can not be executed securely: \" + command);\n        } else if (sandboxMode \u003d\u003d SandboxMode.permissive){\n          LOG.warn(\"The container will run without the java security manager\"\n              + \" due to an unsupported container command.  The command\"\n              + \" will be permitted to run in Sandbox permissive mode: \"\n              + command);\n        }\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/JavaSandboxLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "6f6dfe0202249c129b36edfd145a2224140139cc": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5280. Allow YARN containers to run with Java Security Manager (gphillips via rkanter)\n",
      "commitDate": "01/03/17 2:53 PM",
      "commitName": "6f6dfe0202249c129b36edfd145a2224140139cc",
      "commitAuthor": "Robert Kanter",
      "diff": "@@ -0,0 +1,27 @@\n+    static void appendSecurityFlags(List\u003cString\u003e commands,\n+        Map\u003cString, String\u003e env, Path policyPath, SandboxMode sandboxMode)\n+        throws ContainerExecutionException {\n+\n+      for(int i \u003d 0; i \u003c commands.size(); i++){\n+        String command \u003d commands.get(i);\n+        if(validateJavaHome(env.get(JAVA_HOME.name()))\n+            \u0026\u0026 command.matches(CONTAINS_JAVA_CMD)\n+            \u0026\u0026 !command.matches(CHAINED_COMMAND_REGEX)){\n+          command \u003d command.replaceAll(CLEAN_CMD_REGEX, \"\");\n+          String securityString \u003d JVM_SECURITY_CMD + policyPath + \" \";\n+          if(LOG.isDebugEnabled()) {\n+            securityString +\u003d SECURITY_DEBUG;\n+          }\n+          commands.set(i, command.replaceFirst(JAVA_CMD, securityString));\n+        } else if (sandboxMode \u003d\u003d SandboxMode.enforcing){\n+          throw new ContainerExecutionException(\n+              \"Only JVM containers permitted in YARN sandbox mode (enforcing). \"\n+            + \"The following command can not be executed securely: \" + command);\n+        } else if (sandboxMode \u003d\u003d SandboxMode.permissive){\n+          LOG.warn(\"The container will run without the java security manager\"\n+              + \" due to an unsupported container command.  The command\"\n+              + \" will be permitted to run in Sandbox permissive mode: \"\n+              + command);\n+        }\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    static void appendSecurityFlags(List\u003cString\u003e commands,\n        Map\u003cString, String\u003e env, Path policyPath, SandboxMode sandboxMode)\n        throws ContainerExecutionException {\n\n      for(int i \u003d 0; i \u003c commands.size(); i++){\n        String command \u003d commands.get(i);\n        if(validateJavaHome(env.get(JAVA_HOME.name()))\n            \u0026\u0026 command.matches(CONTAINS_JAVA_CMD)\n            \u0026\u0026 !command.matches(CHAINED_COMMAND_REGEX)){\n          command \u003d command.replaceAll(CLEAN_CMD_REGEX, \"\");\n          String securityString \u003d JVM_SECURITY_CMD + policyPath + \" \";\n          if(LOG.isDebugEnabled()) {\n            securityString +\u003d SECURITY_DEBUG;\n          }\n          commands.set(i, command.replaceFirst(JAVA_CMD, securityString));\n        } else if (sandboxMode \u003d\u003d SandboxMode.enforcing){\n          throw new ContainerExecutionException(\n              \"Only JVM containers permitted in YARN sandbox mode (enforcing). \"\n            + \"The following command can not be executed securely: \" + command);\n        } else if (sandboxMode \u003d\u003d SandboxMode.permissive){\n          LOG.warn(\"The container will run without the java security manager\"\n              + \" due to an unsupported container command.  The command\"\n              + \" will be permitted to run in Sandbox permissive mode: \"\n              + command);\n        }\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/JavaSandboxLinuxContainerRuntime.java"
    }
  }
}