{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "KeyProvider.java",
  "functionName": "serialize",
  "functionId": "serialize",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/KeyProvider.java",
  "functionStartLine": 250,
  "functionEndLine": 282,
  "numCommitsSeen": 29,
  "timeTaken": 1724,
  "changeHistory": [
    "770b5eb2db686275df445be9280e76cc3710ffdc",
    "5b9fcedb4d116d91d70aaad6cbf59093eeee36df",
    "38e2322d84d54896eac23afec0a1434629b8c8b2",
    "c54a4bb666cdeef41a71ed8eeb5ddbe7c5ccc337",
    "350ab4d2466117124c8563114cdb9eb83fa37a02",
    "77306291643838ed7b57b99d6497553314a525f2"
  ],
  "changeHistoryShort": {
    "770b5eb2db686275df445be9280e76cc3710ffdc": "Ybodychange",
    "5b9fcedb4d116d91d70aaad6cbf59093eeee36df": "Ybodychange",
    "38e2322d84d54896eac23afec0a1434629b8c8b2": "Ybodychange",
    "c54a4bb666cdeef41a71ed8eeb5ddbe7c5ccc337": "Ybodychange",
    "350ab4d2466117124c8563114cdb9eb83fa37a02": "Ybodychange",
    "77306291643838ed7b57b99d6497553314a525f2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "770b5eb2db686275df445be9280e76cc3710ffdc": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13444. Replace org.apache.commons.io.Charsets with java.nio.charset.StandardCharsets. Contributed by Vincent Poon.\n",
      "commitDate": "01/08/16 1:35 AM",
      "commitName": "770b5eb2db686275df445be9280e76cc3710ffdc",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "11/05/16 11:30 AM",
      "commitNameOld": "acb509b2fa0bbe6e00f8a90aec37f63a09463afa",
      "commitAuthorOld": "Larry McCay",
      "daysBetweenCommits": 81.59,
      "commitsBetweenForRepo": 671,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n     protected byte[] serialize() throws IOException {\n       ByteArrayOutputStream buffer \u003d new ByteArrayOutputStream();\n       JsonWriter writer \u003d new JsonWriter(\n-          new OutputStreamWriter(buffer, Charsets.UTF_8));\n+          new OutputStreamWriter(buffer, StandardCharsets.UTF_8));\n       try {\n         writer.beginObject();\n         if (cipher !\u003d null) {\n           writer.name(CIPHER_FIELD).value(cipher);\n         }\n         if (bitLength !\u003d 0) {\n           writer.name(BIT_LENGTH_FIELD).value(bitLength);\n         }\n         if (created !\u003d null) {\n           writer.name(CREATED_FIELD).value(created.getTime());\n         }\n         if (description !\u003d null) {\n           writer.name(DESCRIPTION_FIELD).value(description);\n         }\n         if (attributes !\u003d null \u0026\u0026 attributes.size() \u003e 0) {\n           writer.name(ATTRIBUTES_FIELD).beginObject();\n           for (Map.Entry\u003cString, String\u003e attribute : attributes.entrySet()) {\n             writer.name(attribute.getKey()).value(attribute.getValue());\n           }\n           writer.endObject();\n         }\n         writer.name(VERSIONS_FIELD).value(versions);\n         writer.endObject();\n         writer.flush();\n       } finally {\n         writer.close();\n       }\n       return buffer.toByteArray();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected byte[] serialize() throws IOException {\n      ByteArrayOutputStream buffer \u003d new ByteArrayOutputStream();\n      JsonWriter writer \u003d new JsonWriter(\n          new OutputStreamWriter(buffer, StandardCharsets.UTF_8));\n      try {\n        writer.beginObject();\n        if (cipher !\u003d null) {\n          writer.name(CIPHER_FIELD).value(cipher);\n        }\n        if (bitLength !\u003d 0) {\n          writer.name(BIT_LENGTH_FIELD).value(bitLength);\n        }\n        if (created !\u003d null) {\n          writer.name(CREATED_FIELD).value(created.getTime());\n        }\n        if (description !\u003d null) {\n          writer.name(DESCRIPTION_FIELD).value(description);\n        }\n        if (attributes !\u003d null \u0026\u0026 attributes.size() \u003e 0) {\n          writer.name(ATTRIBUTES_FIELD).beginObject();\n          for (Map.Entry\u003cString, String\u003e attribute : attributes.entrySet()) {\n            writer.name(attribute.getKey()).value(attribute.getValue());\n          }\n          writer.endObject();\n        }\n        writer.name(VERSIONS_FIELD).value(versions);\n        writer.endObject();\n        writer.flush();\n      } finally {\n        writer.close();\n      }\n      return buffer.toByteArray();\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/KeyProvider.java",
      "extendedDetails": {}
    },
    "5b9fcedb4d116d91d70aaad6cbf59093eeee36df": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11389. Clean up byte to string encoding issues in hadoop-common. Contributed by Haohui Mai.\n",
      "commitDate": "11/12/14 4:42 PM",
      "commitName": "5b9fcedb4d116d91d70aaad6cbf59093eeee36df",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "08/10/14 6:01 PM",
      "commitNameOld": "2a51494ce1b05fc494fb3a818a7a3526f3f40070",
      "commitAuthorOld": "Aaron T. Myers",
      "daysBetweenCommits": 63.99,
      "commitsBetweenForRepo": 534,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,33 @@\n     protected byte[] serialize() throws IOException {\n       ByteArrayOutputStream buffer \u003d new ByteArrayOutputStream();\n-      JsonWriter writer \u003d new JsonWriter(new OutputStreamWriter(buffer));\n+      JsonWriter writer \u003d new JsonWriter(\n+          new OutputStreamWriter(buffer, Charsets.UTF_8));\n       try {\n         writer.beginObject();\n         if (cipher !\u003d null) {\n           writer.name(CIPHER_FIELD).value(cipher);\n         }\n         if (bitLength !\u003d 0) {\n           writer.name(BIT_LENGTH_FIELD).value(bitLength);\n         }\n         if (created !\u003d null) {\n           writer.name(CREATED_FIELD).value(created.getTime());\n         }\n         if (description !\u003d null) {\n           writer.name(DESCRIPTION_FIELD).value(description);\n         }\n         if (attributes !\u003d null \u0026\u0026 attributes.size() \u003e 0) {\n           writer.name(ATTRIBUTES_FIELD).beginObject();\n           for (Map.Entry\u003cString, String\u003e attribute : attributes.entrySet()) {\n             writer.name(attribute.getKey()).value(attribute.getValue());\n           }\n           writer.endObject();\n         }\n         writer.name(VERSIONS_FIELD).value(versions);\n         writer.endObject();\n         writer.flush();\n       } finally {\n         writer.close();\n       }\n       return buffer.toByteArray();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected byte[] serialize() throws IOException {\n      ByteArrayOutputStream buffer \u003d new ByteArrayOutputStream();\n      JsonWriter writer \u003d new JsonWriter(\n          new OutputStreamWriter(buffer, Charsets.UTF_8));\n      try {\n        writer.beginObject();\n        if (cipher !\u003d null) {\n          writer.name(CIPHER_FIELD).value(cipher);\n        }\n        if (bitLength !\u003d 0) {\n          writer.name(BIT_LENGTH_FIELD).value(bitLength);\n        }\n        if (created !\u003d null) {\n          writer.name(CREATED_FIELD).value(created.getTime());\n        }\n        if (description !\u003d null) {\n          writer.name(DESCRIPTION_FIELD).value(description);\n        }\n        if (attributes !\u003d null \u0026\u0026 attributes.size() \u003e 0) {\n          writer.name(ATTRIBUTES_FIELD).beginObject();\n          for (Map.Entry\u003cString, String\u003e attribute : attributes.entrySet()) {\n            writer.name(attribute.getKey()).value(attribute.getValue());\n          }\n          writer.endObject();\n        }\n        writer.name(VERSIONS_FIELD).value(versions);\n        writer.endObject();\n        writer.flush();\n      } finally {\n        writer.close();\n      }\n      return buffer.toByteArray();\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/KeyProvider.java",
      "extendedDetails": {}
    },
    "38e2322d84d54896eac23afec0a1434629b8c8b2": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10696. Add optional attributes to KeyProvider Options and Metadata. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1604041 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/06/14 3:18 PM",
      "commitName": "38e2322d84d54896eac23afec0a1434629b8c8b2",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "18/06/14 8:45 AM",
      "commitNameOld": "c79728478caadd8374bce2bc3f466db1da1e3ad1",
      "commitAuthorOld": "Owen O\u0027Malley",
      "daysBetweenCommits": 1.27,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,32 @@\n     protected byte[] serialize() throws IOException {\n       ByteArrayOutputStream buffer \u003d new ByteArrayOutputStream();\n       JsonWriter writer \u003d new JsonWriter(new OutputStreamWriter(buffer));\n       try {\n         writer.beginObject();\n         if (cipher !\u003d null) {\n           writer.name(CIPHER_FIELD).value(cipher);\n         }\n         if (bitLength !\u003d 0) {\n           writer.name(BIT_LENGTH_FIELD).value(bitLength);\n         }\n         if (created !\u003d null) {\n           writer.name(CREATED_FIELD).value(created.getTime());\n         }\n         if (description !\u003d null) {\n           writer.name(DESCRIPTION_FIELD).value(description);\n         }\n+        if (attributes !\u003d null \u0026\u0026 attributes.size() \u003e 0) {\n+          writer.name(ATTRIBUTES_FIELD).beginObject();\n+          for (Map.Entry\u003cString, String\u003e attribute : attributes.entrySet()) {\n+            writer.name(attribute.getKey()).value(attribute.getValue());\n+          }\n+          writer.endObject();\n+        }\n         writer.name(VERSIONS_FIELD).value(versions);\n         writer.endObject();\n         writer.flush();\n       } finally {\n         writer.close();\n       }\n       return buffer.toByteArray();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected byte[] serialize() throws IOException {\n      ByteArrayOutputStream buffer \u003d new ByteArrayOutputStream();\n      JsonWriter writer \u003d new JsonWriter(new OutputStreamWriter(buffer));\n      try {\n        writer.beginObject();\n        if (cipher !\u003d null) {\n          writer.name(CIPHER_FIELD).value(cipher);\n        }\n        if (bitLength !\u003d 0) {\n          writer.name(BIT_LENGTH_FIELD).value(bitLength);\n        }\n        if (created !\u003d null) {\n          writer.name(CREATED_FIELD).value(created.getTime());\n        }\n        if (description !\u003d null) {\n          writer.name(DESCRIPTION_FIELD).value(description);\n        }\n        if (attributes !\u003d null \u0026\u0026 attributes.size() \u003e 0) {\n          writer.name(ATTRIBUTES_FIELD).beginObject();\n          for (Map.Entry\u003cString, String\u003e attribute : attributes.entrySet()) {\n            writer.name(attribute.getKey()).value(attribute.getValue());\n          }\n          writer.endObject();\n        }\n        writer.name(VERSIONS_FIELD).value(versions);\n        writer.endObject();\n        writer.flush();\n      } finally {\n        writer.close();\n      }\n      return buffer.toByteArray();\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/KeyProvider.java",
      "extendedDetails": {}
    },
    "c54a4bb666cdeef41a71ed8eeb5ddbe7c5ccc337": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10583. bin/hadoop key throws NPE with no args and assorted other fixups. (clamb via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1594320 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/05/14 11:29 AM",
      "commitName": "c54a4bb666cdeef41a71ed8eeb5ddbe7c5ccc337",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "24/04/14 8:49 AM",
      "commitNameOld": "f9a9c1ee633fd50ba478b87e1c9d84dce089a345",
      "commitAuthorOld": "Owen O\u0027Malley",
      "daysBetweenCommits": 19.11,
      "commitsBetweenForRepo": 96,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,25 @@\n     protected byte[] serialize() throws IOException {\n       ByteArrayOutputStream buffer \u003d new ByteArrayOutputStream();\n       JsonWriter writer \u003d new JsonWriter(new OutputStreamWriter(buffer));\n-      writer.beginObject();\n-      if (cipher !\u003d null) {\n-        writer.name(CIPHER_FIELD).value(cipher);\n+      try {\n+        writer.beginObject();\n+        if (cipher !\u003d null) {\n+          writer.name(CIPHER_FIELD).value(cipher);\n+        }\n+        if (bitLength !\u003d 0) {\n+          writer.name(BIT_LENGTH_FIELD).value(bitLength);\n+        }\n+        if (created !\u003d null) {\n+          writer.name(CREATED_FIELD).value(created.getTime());\n+        }\n+        if (description !\u003d null) {\n+          writer.name(DESCRIPTION_FIELD).value(description);\n+        }\n+        writer.name(VERSIONS_FIELD).value(versions);\n+        writer.endObject();\n+        writer.flush();\n+      } finally {\n+        writer.close();\n       }\n-      if (bitLength !\u003d 0) {\n-        writer.name(BIT_LENGTH_FIELD).value(bitLength);\n-      }\n-      if (created !\u003d null) {\n-        writer.name(CREATED_FIELD).value(created.getTime());\n-      }\n-      if (description !\u003d null) {\n-        writer.name(DESCRIPTION_FIELD).value(description);\n-      }\n-      writer.name(VERSIONS_FIELD).value(versions);\n-      writer.endObject();\n-      writer.flush();\n       return buffer.toByteArray();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected byte[] serialize() throws IOException {\n      ByteArrayOutputStream buffer \u003d new ByteArrayOutputStream();\n      JsonWriter writer \u003d new JsonWriter(new OutputStreamWriter(buffer));\n      try {\n        writer.beginObject();\n        if (cipher !\u003d null) {\n          writer.name(CIPHER_FIELD).value(cipher);\n        }\n        if (bitLength !\u003d 0) {\n          writer.name(BIT_LENGTH_FIELD).value(bitLength);\n        }\n        if (created !\u003d null) {\n          writer.name(CREATED_FIELD).value(created.getTime());\n        }\n        if (description !\u003d null) {\n          writer.name(DESCRIPTION_FIELD).value(description);\n        }\n        writer.name(VERSIONS_FIELD).value(versions);\n        writer.endObject();\n        writer.flush();\n      } finally {\n        writer.close();\n      }\n      return buffer.toByteArray();\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/KeyProvider.java",
      "extendedDetails": {}
    },
    "350ab4d2466117124c8563114cdb9eb83fa37a02": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10430. KeyProvider Metadata should have an optional description, there should be a method to retrieve the metadata from all keys. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1586730 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/04/14 11:02 AM",
      "commitName": "350ab4d2466117124c8563114cdb9eb83fa37a02",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "09/04/14 12:46 PM",
      "commitNameOld": "9a1f15532fd26f66a2d1a482e82bb5d7fbab4946",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 1.93,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,21 @@\n     protected byte[] serialize() throws IOException {\n       ByteArrayOutputStream buffer \u003d new ByteArrayOutputStream();\n       JsonWriter writer \u003d new JsonWriter(new OutputStreamWriter(buffer));\n       writer.beginObject();\n       if (cipher !\u003d null) {\n         writer.name(CIPHER_FIELD).value(cipher);\n       }\n       if (bitLength !\u003d 0) {\n         writer.name(BIT_LENGTH_FIELD).value(bitLength);\n       }\n       if (created !\u003d null) {\n         writer.name(CREATED_FIELD).value(created.getTime());\n       }\n+      if (description !\u003d null) {\n+        writer.name(DESCRIPTION_FIELD).value(description);\n+      }\n       writer.name(VERSIONS_FIELD).value(versions);\n       writer.endObject();\n       writer.flush();\n       return buffer.toByteArray();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected byte[] serialize() throws IOException {\n      ByteArrayOutputStream buffer \u003d new ByteArrayOutputStream();\n      JsonWriter writer \u003d new JsonWriter(new OutputStreamWriter(buffer));\n      writer.beginObject();\n      if (cipher !\u003d null) {\n        writer.name(CIPHER_FIELD).value(cipher);\n      }\n      if (bitLength !\u003d 0) {\n        writer.name(BIT_LENGTH_FIELD).value(bitLength);\n      }\n      if (created !\u003d null) {\n        writer.name(CREATED_FIELD).value(created.getTime());\n      }\n      if (description !\u003d null) {\n        writer.name(DESCRIPTION_FIELD).value(description);\n      }\n      writer.name(VERSIONS_FIELD).value(versions);\n      writer.endObject();\n      writer.flush();\n      return buffer.toByteArray();\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/KeyProvider.java",
      "extendedDetails": {}
    },
    "77306291643838ed7b57b99d6497553314a525f2": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10141. Create KeyProvider API to separate encryption key storage\nfrom the applications. (omalley)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1552462 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/12/13 4:25 PM",
      "commitName": "77306291643838ed7b57b99d6497553314a525f2",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,18 @@\n+    protected byte[] serialize() throws IOException {\n+      ByteArrayOutputStream buffer \u003d new ByteArrayOutputStream();\n+      JsonWriter writer \u003d new JsonWriter(new OutputStreamWriter(buffer));\n+      writer.beginObject();\n+      if (cipher !\u003d null) {\n+        writer.name(CIPHER_FIELD).value(cipher);\n+      }\n+      if (bitLength !\u003d 0) {\n+        writer.name(BIT_LENGTH_FIELD).value(bitLength);\n+      }\n+      if (created !\u003d null) {\n+        writer.name(CREATED_FIELD).value(created.getTime());\n+      }\n+      writer.name(VERSIONS_FIELD).value(versions);\n+      writer.endObject();\n+      writer.flush();\n+      return buffer.toByteArray();\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    protected byte[] serialize() throws IOException {\n      ByteArrayOutputStream buffer \u003d new ByteArrayOutputStream();\n      JsonWriter writer \u003d new JsonWriter(new OutputStreamWriter(buffer));\n      writer.beginObject();\n      if (cipher !\u003d null) {\n        writer.name(CIPHER_FIELD).value(cipher);\n      }\n      if (bitLength !\u003d 0) {\n        writer.name(BIT_LENGTH_FIELD).value(bitLength);\n      }\n      if (created !\u003d null) {\n        writer.name(CREATED_FIELD).value(created.getTime());\n      }\n      writer.name(VERSIONS_FIELD).value(versions);\n      writer.endObject();\n      writer.flush();\n      return buffer.toByteArray();\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/KeyProvider.java"
    }
  }
}