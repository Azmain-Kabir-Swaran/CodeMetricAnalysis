{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CommandFormat.java",
  "functionName": "parse",
  "functionId": "parse___args-List__String__",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/CommandFormat.java",
  "functionStartLine": 99,
  "functionEndLine": 140,
  "numCommitsSeen": 13,
  "timeTaken": 1711,
  "changeHistory": [
    "0d5b0143cc003e132ce454415e35d55d46311416",
    "18a3dad44afd8061643fffc5bbe50fa66e47b72c",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "a7a3653b7006297958e79146aa46011d6060099f",
    "38ac23159dd0eea5a58928fbcff501cbd9ffdd5b",
    "16593c1f136ee92508e7554fb9130d24bcc79562"
  ],
  "changeHistoryShort": {
    "0d5b0143cc003e132ce454415e35d55d46311416": "Ybodychange",
    "18a3dad44afd8061643fffc5bbe50fa66e47b72c": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "a7a3653b7006297958e79146aa46011d6060099f": "Ybodychange",
    "38ac23159dd0eea5a58928fbcff501cbd9ffdd5b": "Ybodychange",
    "16593c1f136ee92508e7554fb9130d24bcc79562": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0d5b0143cc003e132ce454415e35d55d46311416": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8205. CommandFormat#parse() should not parse option as value of option. (Contributed by Peter Shi and Xiaoyu Yao)\n",
      "commitDate": "27/04/15 12:23 PM",
      "commitName": "0d5b0143cc003e132ce454415e35d55d46311416",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "26/04/15 6:35 PM",
      "commitNameOld": "1a2459bd4be54e64eec0eebffd941989476c2a5b",
      "commitAuthorOld": "Jakob Homan",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,42 @@\n   public void parse(List\u003cString\u003e args) {\n     int pos \u003d 0;\n     while (pos \u003c args.size()) {\n       String arg \u003d args.get(pos);\n       // stop if not an opt, or the stdin arg \"-\" is found\n       if (!arg.startsWith(\"-\") || arg.equals(\"-\")) { \n         break;\n       } else if (arg.equals(\"--\")) { // force end of option processing\n         args.remove(pos);\n         break;\n       }\n       \n       String opt \u003d arg.substring(1);\n       if (options.containsKey(opt)) {\n         args.remove(pos);\n         options.put(opt, Boolean.TRUE);\n       } else if (optionsWithValue.containsKey(opt)) {\n         args.remove(pos);\n-        if (pos \u003c args.size() \u0026\u0026 (args.size() \u003e minPar)) {\n+        if (pos \u003c args.size() \u0026\u0026 (args.size() \u003e minPar)\n+                \u0026\u0026 !args.get(pos).startsWith(\"-\")) {\n           arg \u003d args.get(pos);\n           args.remove(pos);\n         } else {\n           arg \u003d \"\";\n         }\n         if (!arg.startsWith(\"-\") || arg.equals(\"-\")) {\n           optionsWithValue.put(opt, arg);\n         }\n       } else if (ignoreUnknownOpts) {\n         pos++;\n       } else {\n         throw new UnknownOptionException(arg);\n       }\n     }\n     int psize \u003d args.size();\n     if (psize \u003c minPar) {\n       throw new NotEnoughArgumentsException(minPar, psize);\n     }\n     if (psize \u003e maxPar) {\n       throw new TooManyArgumentsException(maxPar, psize);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void parse(List\u003cString\u003e args) {\n    int pos \u003d 0;\n    while (pos \u003c args.size()) {\n      String arg \u003d args.get(pos);\n      // stop if not an opt, or the stdin arg \"-\" is found\n      if (!arg.startsWith(\"-\") || arg.equals(\"-\")) { \n        break;\n      } else if (arg.equals(\"--\")) { // force end of option processing\n        args.remove(pos);\n        break;\n      }\n      \n      String opt \u003d arg.substring(1);\n      if (options.containsKey(opt)) {\n        args.remove(pos);\n        options.put(opt, Boolean.TRUE);\n      } else if (optionsWithValue.containsKey(opt)) {\n        args.remove(pos);\n        if (pos \u003c args.size() \u0026\u0026 (args.size() \u003e minPar)\n                \u0026\u0026 !args.get(pos).startsWith(\"-\")) {\n          arg \u003d args.get(pos);\n          args.remove(pos);\n        } else {\n          arg \u003d \"\";\n        }\n        if (!arg.startsWith(\"-\") || arg.equals(\"-\")) {\n          optionsWithValue.put(opt, arg);\n        }\n      } else if (ignoreUnknownOpts) {\n        pos++;\n      } else {\n        throw new UnknownOptionException(arg);\n      }\n    }\n    int psize \u003d args.size();\n    if (psize \u003c minPar) {\n      throw new NotEnoughArgumentsException(minPar, psize);\n    }\n    if (psize \u003e maxPar) {\n      throw new TooManyArgumentsException(maxPar, psize);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/CommandFormat.java",
      "extendedDetails": {}
    },
    "18a3dad44afd8061643fffc5bbe50fa66e47b72c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7701. Support reporting per storage type quota and usage with hadoop/hdfs shell. (Contributed by Peter Shi)\n",
      "commitDate": "13/04/15 9:01 PM",
      "commitName": "18a3dad44afd8061643fffc5bbe50fa66e47b72c",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "24/08/12 6:03 PM",
      "commitNameOld": "deead78e35b0cb81af875b5a8032cbd06c9a2dae",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 962.12,
      "commitsBetweenForRepo": 6692,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,41 @@\n   public void parse(List\u003cString\u003e args) {\n     int pos \u003d 0;\n     while (pos \u003c args.size()) {\n       String arg \u003d args.get(pos);\n       // stop if not an opt, or the stdin arg \"-\" is found\n       if (!arg.startsWith(\"-\") || arg.equals(\"-\")) { \n         break;\n       } else if (arg.equals(\"--\")) { // force end of option processing\n         args.remove(pos);\n         break;\n       }\n       \n       String opt \u003d arg.substring(1);\n       if (options.containsKey(opt)) {\n         args.remove(pos);\n         options.put(opt, Boolean.TRUE);\n+      } else if (optionsWithValue.containsKey(opt)) {\n+        args.remove(pos);\n+        if (pos \u003c args.size() \u0026\u0026 (args.size() \u003e minPar)) {\n+          arg \u003d args.get(pos);\n+          args.remove(pos);\n+        } else {\n+          arg \u003d \"\";\n+        }\n+        if (!arg.startsWith(\"-\") || arg.equals(\"-\")) {\n+          optionsWithValue.put(opt, arg);\n+        }\n       } else if (ignoreUnknownOpts) {\n         pos++;\n       } else {\n         throw new UnknownOptionException(arg);\n       }\n     }\n     int psize \u003d args.size();\n     if (psize \u003c minPar) {\n       throw new NotEnoughArgumentsException(minPar, psize);\n     }\n     if (psize \u003e maxPar) {\n       throw new TooManyArgumentsException(maxPar, psize);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void parse(List\u003cString\u003e args) {\n    int pos \u003d 0;\n    while (pos \u003c args.size()) {\n      String arg \u003d args.get(pos);\n      // stop if not an opt, or the stdin arg \"-\" is found\n      if (!arg.startsWith(\"-\") || arg.equals(\"-\")) { \n        break;\n      } else if (arg.equals(\"--\")) { // force end of option processing\n        args.remove(pos);\n        break;\n      }\n      \n      String opt \u003d arg.substring(1);\n      if (options.containsKey(opt)) {\n        args.remove(pos);\n        options.put(opt, Boolean.TRUE);\n      } else if (optionsWithValue.containsKey(opt)) {\n        args.remove(pos);\n        if (pos \u003c args.size() \u0026\u0026 (args.size() \u003e minPar)) {\n          arg \u003d args.get(pos);\n          args.remove(pos);\n        } else {\n          arg \u003d \"\";\n        }\n        if (!arg.startsWith(\"-\") || arg.equals(\"-\")) {\n          optionsWithValue.put(opt, arg);\n        }\n      } else if (ignoreUnknownOpts) {\n        pos++;\n      } else {\n        throw new UnknownOptionException(arg);\n      }\n    }\n    int psize \u003d args.size();\n    if (psize \u003c minPar) {\n      throw new NotEnoughArgumentsException(minPar, psize);\n    }\n    if (psize \u003e maxPar) {\n      throw new TooManyArgumentsException(maxPar, psize);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/CommandFormat.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void parse(List\u003cString\u003e args) {\n    int pos \u003d 0;\n    while (pos \u003c args.size()) {\n      String arg \u003d args.get(pos);\n      // stop if not an opt, or the stdin arg \"-\" is found\n      if (!arg.startsWith(\"-\") || arg.equals(\"-\")) { \n        break;\n      } else if (arg.equals(\"--\")) { // force end of option processing\n        args.remove(pos);\n        break;\n      }\n      \n      String opt \u003d arg.substring(1);\n      if (options.containsKey(opt)) {\n        args.remove(pos);\n        options.put(opt, Boolean.TRUE);\n      } else if (ignoreUnknownOpts) {\n        pos++;\n      } else {\n        throw new UnknownOptionException(arg);\n      }\n    }\n    int psize \u003d args.size();\n    if (psize \u003c minPar) {\n      throw new NotEnoughArgumentsException(minPar, psize);\n    }\n    if (psize \u003e maxPar) {\n      throw new TooManyArgumentsException(maxPar, psize);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/CommandFormat.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/shell/CommandFormat.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/CommandFormat.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void parse(List\u003cString\u003e args) {\n    int pos \u003d 0;\n    while (pos \u003c args.size()) {\n      String arg \u003d args.get(pos);\n      // stop if not an opt, or the stdin arg \"-\" is found\n      if (!arg.startsWith(\"-\") || arg.equals(\"-\")) { \n        break;\n      } else if (arg.equals(\"--\")) { // force end of option processing\n        args.remove(pos);\n        break;\n      }\n      \n      String opt \u003d arg.substring(1);\n      if (options.containsKey(opt)) {\n        args.remove(pos);\n        options.put(opt, Boolean.TRUE);\n      } else if (ignoreUnknownOpts) {\n        pos++;\n      } else {\n        throw new UnknownOptionException(arg);\n      }\n    }\n    int psize \u003d args.size();\n    if (psize \u003c minPar) {\n      throw new NotEnoughArgumentsException(minPar, psize);\n    }\n    if (psize \u003e maxPar) {\n      throw new TooManyArgumentsException(maxPar, psize);\n    }\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/fs/shell/CommandFormat.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/fs/shell/CommandFormat.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/shell/CommandFormat.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void parse(List\u003cString\u003e args) {\n    int pos \u003d 0;\n    while (pos \u003c args.size()) {\n      String arg \u003d args.get(pos);\n      // stop if not an opt, or the stdin arg \"-\" is found\n      if (!arg.startsWith(\"-\") || arg.equals(\"-\")) { \n        break;\n      } else if (arg.equals(\"--\")) { // force end of option processing\n        args.remove(pos);\n        break;\n      }\n      \n      String opt \u003d arg.substring(1);\n      if (options.containsKey(opt)) {\n        args.remove(pos);\n        options.put(opt, Boolean.TRUE);\n      } else if (ignoreUnknownOpts) {\n        pos++;\n      } else {\n        throw new UnknownOptionException(arg);\n      }\n    }\n    int psize \u003d args.size();\n    if (psize \u003c minPar) {\n      throw new NotEnoughArgumentsException(minPar, psize);\n    }\n    if (psize \u003e maxPar) {\n      throw new TooManyArgumentsException(maxPar, psize);\n    }\n  }",
      "path": "common/src/java/org/apache/hadoop/fs/shell/CommandFormat.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/fs/shell/CommandFormat.java",
        "newPath": "common/src/java/org/apache/hadoop/fs/shell/CommandFormat.java"
      }
    },
    "a7a3653b7006297958e79146aa46011d6060099f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7341. Fix options parsing in CommandFormat. Contributed by Daryn Sharp.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1132505 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/06/11 4:42 PM",
      "commitName": "a7a3653b7006297958e79146aa46011d6060099f",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "06/05/11 1:14 PM",
      "commitNameOld": "38ac23159dd0eea5a58928fbcff501cbd9ffdd5b",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 30.14,
      "commitsBetweenForRepo": 62,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,30 @@\n   public void parse(List\u003cString\u003e args) {\n     int pos \u003d 0;\n     while (pos \u003c args.size()) {\n       String arg \u003d args.get(pos);\n-      if (arg.startsWith(\"-\") \u0026\u0026 arg.length() \u003e 1) {\n-        String opt \u003d arg.substring(1);\n-        if (options.containsKey(opt)) {\n-          args.remove(pos);\n-          options.put(opt, Boolean.TRUE);\n-          continue;\n-        }\n-        if (!ignoreUnknownOpts) throw new UnknownOptionException(arg);\n+      // stop if not an opt, or the stdin arg \"-\" is found\n+      if (!arg.startsWith(\"-\") || arg.equals(\"-\")) { \n+        break;\n+      } else if (arg.equals(\"--\")) { // force end of option processing\n+        args.remove(pos);\n+        break;\n       }\n-      pos++;\n+      \n+      String opt \u003d arg.substring(1);\n+      if (options.containsKey(opt)) {\n+        args.remove(pos);\n+        options.put(opt, Boolean.TRUE);\n+      } else if (ignoreUnknownOpts) {\n+        pos++;\n+      } else {\n+        throw new UnknownOptionException(arg);\n+      }\n     }\n     int psize \u003d args.size();\n     if (psize \u003c minPar) {\n       throw new NotEnoughArgumentsException(minPar, psize);\n     }\n     if (psize \u003e maxPar) {\n       throw new TooManyArgumentsException(maxPar, psize);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void parse(List\u003cString\u003e args) {\n    int pos \u003d 0;\n    while (pos \u003c args.size()) {\n      String arg \u003d args.get(pos);\n      // stop if not an opt, or the stdin arg \"-\" is found\n      if (!arg.startsWith(\"-\") || arg.equals(\"-\")) { \n        break;\n      } else if (arg.equals(\"--\")) { // force end of option processing\n        args.remove(pos);\n        break;\n      }\n      \n      String opt \u003d arg.substring(1);\n      if (options.containsKey(opt)) {\n        args.remove(pos);\n        options.put(opt, Boolean.TRUE);\n      } else if (ignoreUnknownOpts) {\n        pos++;\n      } else {\n        throw new UnknownOptionException(arg);\n      }\n    }\n    int psize \u003d args.size();\n    if (psize \u003c minPar) {\n      throw new NotEnoughArgumentsException(minPar, psize);\n    }\n    if (psize \u003e maxPar) {\n      throw new TooManyArgumentsException(maxPar, psize);\n    }\n  }",
      "path": "src/java/org/apache/hadoop/fs/shell/CommandFormat.java",
      "extendedDetails": {}
    },
    "38ac23159dd0eea5a58928fbcff501cbd9ffdd5b": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7249. Refactor the chmod/chown/chgrp command to conform to new FsCommand class.  Contributed by Daryn Sharp\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1100356 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/05/11 1:14 PM",
      "commitName": "38ac23159dd0eea5a58928fbcff501cbd9ffdd5b",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "17/03/11 6:48 PM",
      "commitNameOld": "16593c1f136ee92508e7554fb9130d24bcc79562",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 49.77,
      "commitsBetweenForRepo": 50,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   public void parse(List\u003cString\u003e args) {\n     int pos \u003d 0;\n     while (pos \u003c args.size()) {\n       String arg \u003d args.get(pos);\n       if (arg.startsWith(\"-\") \u0026\u0026 arg.length() \u003e 1) {\n         String opt \u003d arg.substring(1);\n-        if (!options.containsKey(opt)) {\n-          throw new UnknownOptionException(arg);\n+        if (options.containsKey(opt)) {\n+          args.remove(pos);\n+          options.put(opt, Boolean.TRUE);\n+          continue;\n         }\n-        args.remove(pos);\n-        options.put(opt, Boolean.TRUE);\n-      } else {\n-        pos++;\n+        if (!ignoreUnknownOpts) throw new UnknownOptionException(arg);\n       }\n+      pos++;\n     }\n     int psize \u003d args.size();\n     if (psize \u003c minPar) {\n       throw new NotEnoughArgumentsException(minPar, psize);\n     }\n     if (psize \u003e maxPar) {\n       throw new TooManyArgumentsException(maxPar, psize);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void parse(List\u003cString\u003e args) {\n    int pos \u003d 0;\n    while (pos \u003c args.size()) {\n      String arg \u003d args.get(pos);\n      if (arg.startsWith(\"-\") \u0026\u0026 arg.length() \u003e 1) {\n        String opt \u003d arg.substring(1);\n        if (options.containsKey(opt)) {\n          args.remove(pos);\n          options.put(opt, Boolean.TRUE);\n          continue;\n        }\n        if (!ignoreUnknownOpts) throw new UnknownOptionException(arg);\n      }\n      pos++;\n    }\n    int psize \u003d args.size();\n    if (psize \u003c minPar) {\n      throw new NotEnoughArgumentsException(minPar, psize);\n    }\n    if (psize \u003e maxPar) {\n      throw new TooManyArgumentsException(maxPar, psize);\n    }\n  }",
      "path": "src/java/org/apache/hadoop/fs/shell/CommandFormat.java",
      "extendedDetails": {}
    },
    "16593c1f136ee92508e7554fb9130d24bcc79562": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7180. Better support on CommandFormat on the API and exceptions.  Contributed by Daryn Sharp\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1082787 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/03/11 6:48 PM",
      "commitName": "16593c1f136ee92508e7554fb9130d24bcc79562",
      "commitAuthor": "Tsz-wo Sze",
      "diff": "@@ -0,0 +1,23 @@\n+  public void parse(List\u003cString\u003e args) {\n+    int pos \u003d 0;\n+    while (pos \u003c args.size()) {\n+      String arg \u003d args.get(pos);\n+      if (arg.startsWith(\"-\") \u0026\u0026 arg.length() \u003e 1) {\n+        String opt \u003d arg.substring(1);\n+        if (!options.containsKey(opt)) {\n+          throw new UnknownOptionException(arg);\n+        }\n+        args.remove(pos);\n+        options.put(opt, Boolean.TRUE);\n+      } else {\n+        pos++;\n+      }\n+    }\n+    int psize \u003d args.size();\n+    if (psize \u003c minPar) {\n+      throw new NotEnoughArgumentsException(minPar, psize);\n+    }\n+    if (psize \u003e maxPar) {\n+      throw new TooManyArgumentsException(maxPar, psize);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void parse(List\u003cString\u003e args) {\n    int pos \u003d 0;\n    while (pos \u003c args.size()) {\n      String arg \u003d args.get(pos);\n      if (arg.startsWith(\"-\") \u0026\u0026 arg.length() \u003e 1) {\n        String opt \u003d arg.substring(1);\n        if (!options.containsKey(opt)) {\n          throw new UnknownOptionException(arg);\n        }\n        args.remove(pos);\n        options.put(opt, Boolean.TRUE);\n      } else {\n        pos++;\n      }\n    }\n    int psize \u003d args.size();\n    if (psize \u003c minPar) {\n      throw new NotEnoughArgumentsException(minPar, psize);\n    }\n    if (psize \u003e maxPar) {\n      throw new TooManyArgumentsException(maxPar, psize);\n    }\n  }",
      "path": "src/java/org/apache/hadoop/fs/shell/CommandFormat.java"
    }
  }
}