{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Server.java",
  "functionName": "updateMetrics",
  "functionId": "updateMetrics___call-Call__startTime-long__connDropped-boolean",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
  "functionStartLine": 553,
  "functionEndLine": 589,
  "numCommitsSeen": 436,
  "timeTaken": 5977,
  "changeHistory": [
    "a23417533e1ee052893baf207ec636c4993c5994",
    "f96a2df38d889f29314c57f4d94227b2e419a11f",
    "3d94da1e00fc6238fad458e415219f87920f1fc3",
    "d95c6eb32cec7768ac418fb467b1198ccf3cf0dc"
  ],
  "changeHistoryShort": {
    "a23417533e1ee052893baf207ec636c4993c5994": "Ybodychange",
    "f96a2df38d889f29314c57f4d94227b2e419a11f": "Ymultichange(Yparameterchange,Ybodychange)",
    "3d94da1e00fc6238fad458e415219f87920f1fc3": "Ymultichange(Yparameterchange,Ybodychange)",
    "d95c6eb32cec7768ac418fb467b1198ccf3cf0dc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a23417533e1ee052893baf207ec636c4993c5994": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16531. Log more timing information for slow RPCs. Contributed by Chen Zhang.\n",
      "commitDate": "06/09/19 10:28 AM",
      "commitName": "a23417533e1ee052893baf207ec636c4993c5994",
      "commitAuthor": "Erik Krogen",
      "commitDateOld": "26/07/19 1:53 AM",
      "commitNameOld": "07530314c2130ecd1525682c59bf51f15b82c024",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 42.36,
      "commitsBetweenForRepo": 406,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   void updateMetrics(Call call, long startTime, boolean connDropped) {\n     // delta \u003d handler + processing + response\n     long deltaNanos \u003d Time.monotonicNowNanos() - startTime;\n     long timestampNanos \u003d call.timestampNanos;\n \n     ProcessingDetails details \u003d call.getProcessingDetails();\n     // queue time is the delta between when the call first arrived and when it\n     // began being serviced, minus the time it took to be put into the queue\n     details.set(Timing.QUEUE,\n         startTime - timestampNanos - details.get(Timing.ENQUEUE));\n     deltaNanos -\u003d details.get(Timing.PROCESSING);\n     deltaNanos -\u003d details.get(Timing.RESPONSE);\n     details.set(Timing.HANDLER, deltaNanos);\n \n     long queueTime \u003d details.get(Timing.QUEUE, RpcMetrics.TIMEUNIT);\n     rpcMetrics.addRpcQueueTime(queueTime);\n \n     if (call.isResponseDeferred() || connDropped) {\n       // call was skipped; don\u0027t include it in processing metrics\n       return;\n     }\n \n     long processingTime \u003d\n         details.get(Timing.PROCESSING, RpcMetrics.TIMEUNIT);\n     long waitTime \u003d\n         details.get(Timing.LOCKWAIT, RpcMetrics.TIMEUNIT);\n     rpcMetrics.addRpcLockWaitTime(waitTime);\n     rpcMetrics.addRpcProcessingTime(processingTime);\n     // don\u0027t include lock wait for detailed metrics.\n     processingTime -\u003d waitTime;\n     String name \u003d call.getDetailedMetricsName();\n     rpcDetailedMetrics.addProcessingTime(name, processingTime);\n     callQueue.addResponseTime(name, call, details);\n     if (isLogSlowRPC()) {\n-      logSlowRpcCalls(name, call, processingTime);\n+      logSlowRpcCalls(name, call, details);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void updateMetrics(Call call, long startTime, boolean connDropped) {\n    // delta \u003d handler + processing + response\n    long deltaNanos \u003d Time.monotonicNowNanos() - startTime;\n    long timestampNanos \u003d call.timestampNanos;\n\n    ProcessingDetails details \u003d call.getProcessingDetails();\n    // queue time is the delta between when the call first arrived and when it\n    // began being serviced, minus the time it took to be put into the queue\n    details.set(Timing.QUEUE,\n        startTime - timestampNanos - details.get(Timing.ENQUEUE));\n    deltaNanos -\u003d details.get(Timing.PROCESSING);\n    deltaNanos -\u003d details.get(Timing.RESPONSE);\n    details.set(Timing.HANDLER, deltaNanos);\n\n    long queueTime \u003d details.get(Timing.QUEUE, RpcMetrics.TIMEUNIT);\n    rpcMetrics.addRpcQueueTime(queueTime);\n\n    if (call.isResponseDeferred() || connDropped) {\n      // call was skipped; don\u0027t include it in processing metrics\n      return;\n    }\n\n    long processingTime \u003d\n        details.get(Timing.PROCESSING, RpcMetrics.TIMEUNIT);\n    long waitTime \u003d\n        details.get(Timing.LOCKWAIT, RpcMetrics.TIMEUNIT);\n    rpcMetrics.addRpcLockWaitTime(waitTime);\n    rpcMetrics.addRpcProcessingTime(processingTime);\n    // don\u0027t include lock wait for detailed metrics.\n    processingTime -\u003d waitTime;\n    String name \u003d call.getDetailedMetricsName();\n    rpcDetailedMetrics.addProcessingTime(name, processingTime);\n    callQueue.addResponseTime(name, call, details);\n    if (isLogSlowRPC()) {\n      logSlowRpcCalls(name, call, details);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "f96a2df38d889f29314c57f4d94227b2e419a11f": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-16266. Add more fine-grained processing time metrics to the RPC layer. Contributed by Christopher Gregorian.\n",
      "commitDate": "23/05/19 10:28 AM",
      "commitName": "f96a2df38d889f29314c57f4d94227b2e419a11f",
      "commitAuthor": "Christopher Gregorian",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-16266. Add more fine-grained processing time metrics to the RPC layer. Contributed by Christopher Gregorian.\n",
          "commitDate": "23/05/19 10:28 AM",
          "commitName": "f96a2df38d889f29314c57f4d94227b2e419a11f",
          "commitAuthor": "Christopher Gregorian",
          "commitDateOld": "07/05/19 5:48 PM",
          "commitNameOld": "713e8a27aea03f302b7a7d58769c967958f6e46a",
          "commitAuthorOld": "Peter Bacsko",
          "daysBetweenCommits": 15.69,
          "commitsBetweenForRepo": 76,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,37 @@\n-  void updateMetrics(String name, int queueTime, int processingTime,\n-                     boolean deferredCall) {\n+  void updateMetrics(Call call, long startTime, boolean connDropped) {\n+    // delta \u003d handler + processing + response\n+    long deltaNanos \u003d Time.monotonicNowNanos() - startTime;\n+    long timestampNanos \u003d call.timestampNanos;\n+\n+    ProcessingDetails details \u003d call.getProcessingDetails();\n+    // queue time is the delta between when the call first arrived and when it\n+    // began being serviced, minus the time it took to be put into the queue\n+    details.set(Timing.QUEUE,\n+        startTime - timestampNanos - details.get(Timing.ENQUEUE));\n+    deltaNanos -\u003d details.get(Timing.PROCESSING);\n+    deltaNanos -\u003d details.get(Timing.RESPONSE);\n+    details.set(Timing.HANDLER, deltaNanos);\n+\n+    long queueTime \u003d details.get(Timing.QUEUE, RpcMetrics.TIMEUNIT);\n     rpcMetrics.addRpcQueueTime(queueTime);\n-    if (!deferredCall) {\n-      rpcMetrics.addRpcProcessingTime(processingTime);\n-      rpcDetailedMetrics.addProcessingTime(name, processingTime);\n-      callQueue.addResponseTime(name, getPriorityLevel(), queueTime,\n-          processingTime);\n-      if (isLogSlowRPC()) {\n-        logSlowRpcCalls(name, processingTime);\n-      }\n+\n+    if (call.isResponseDeferred() || connDropped) {\n+      // call was skipped; don\u0027t include it in processing metrics\n+      return;\n+    }\n+\n+    long processingTime \u003d\n+        details.get(Timing.PROCESSING, RpcMetrics.TIMEUNIT);\n+    long waitTime \u003d\n+        details.get(Timing.LOCKWAIT, RpcMetrics.TIMEUNIT);\n+    rpcMetrics.addRpcLockWaitTime(waitTime);\n+    rpcMetrics.addRpcProcessingTime(processingTime);\n+    // don\u0027t include lock wait for detailed metrics.\n+    processingTime -\u003d waitTime;\n+    String name \u003d call.getDetailedMetricsName();\n+    rpcDetailedMetrics.addProcessingTime(name, processingTime);\n+    callQueue.addResponseTime(name, call, details);\n+    if (isLogSlowRPC()) {\n+      logSlowRpcCalls(name, call, processingTime);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void updateMetrics(Call call, long startTime, boolean connDropped) {\n    // delta \u003d handler + processing + response\n    long deltaNanos \u003d Time.monotonicNowNanos() - startTime;\n    long timestampNanos \u003d call.timestampNanos;\n\n    ProcessingDetails details \u003d call.getProcessingDetails();\n    // queue time is the delta between when the call first arrived and when it\n    // began being serviced, minus the time it took to be put into the queue\n    details.set(Timing.QUEUE,\n        startTime - timestampNanos - details.get(Timing.ENQUEUE));\n    deltaNanos -\u003d details.get(Timing.PROCESSING);\n    deltaNanos -\u003d details.get(Timing.RESPONSE);\n    details.set(Timing.HANDLER, deltaNanos);\n\n    long queueTime \u003d details.get(Timing.QUEUE, RpcMetrics.TIMEUNIT);\n    rpcMetrics.addRpcQueueTime(queueTime);\n\n    if (call.isResponseDeferred() || connDropped) {\n      // call was skipped; don\u0027t include it in processing metrics\n      return;\n    }\n\n    long processingTime \u003d\n        details.get(Timing.PROCESSING, RpcMetrics.TIMEUNIT);\n    long waitTime \u003d\n        details.get(Timing.LOCKWAIT, RpcMetrics.TIMEUNIT);\n    rpcMetrics.addRpcLockWaitTime(waitTime);\n    rpcMetrics.addRpcProcessingTime(processingTime);\n    // don\u0027t include lock wait for detailed metrics.\n    processingTime -\u003d waitTime;\n    String name \u003d call.getDetailedMetricsName();\n    rpcDetailedMetrics.addProcessingTime(name, processingTime);\n    callQueue.addResponseTime(name, call, details);\n    if (isLogSlowRPC()) {\n      logSlowRpcCalls(name, call, processingTime);\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {
            "oldValue": "[name-String, queueTime-int, processingTime-int, deferredCall-boolean]",
            "newValue": "[call-Call, startTime-long, connDropped-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-16266. Add more fine-grained processing time metrics to the RPC layer. Contributed by Christopher Gregorian.\n",
          "commitDate": "23/05/19 10:28 AM",
          "commitName": "f96a2df38d889f29314c57f4d94227b2e419a11f",
          "commitAuthor": "Christopher Gregorian",
          "commitDateOld": "07/05/19 5:48 PM",
          "commitNameOld": "713e8a27aea03f302b7a7d58769c967958f6e46a",
          "commitAuthorOld": "Peter Bacsko",
          "daysBetweenCommits": 15.69,
          "commitsBetweenForRepo": 76,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,37 @@\n-  void updateMetrics(String name, int queueTime, int processingTime,\n-                     boolean deferredCall) {\n+  void updateMetrics(Call call, long startTime, boolean connDropped) {\n+    // delta \u003d handler + processing + response\n+    long deltaNanos \u003d Time.monotonicNowNanos() - startTime;\n+    long timestampNanos \u003d call.timestampNanos;\n+\n+    ProcessingDetails details \u003d call.getProcessingDetails();\n+    // queue time is the delta between when the call first arrived and when it\n+    // began being serviced, minus the time it took to be put into the queue\n+    details.set(Timing.QUEUE,\n+        startTime - timestampNanos - details.get(Timing.ENQUEUE));\n+    deltaNanos -\u003d details.get(Timing.PROCESSING);\n+    deltaNanos -\u003d details.get(Timing.RESPONSE);\n+    details.set(Timing.HANDLER, deltaNanos);\n+\n+    long queueTime \u003d details.get(Timing.QUEUE, RpcMetrics.TIMEUNIT);\n     rpcMetrics.addRpcQueueTime(queueTime);\n-    if (!deferredCall) {\n-      rpcMetrics.addRpcProcessingTime(processingTime);\n-      rpcDetailedMetrics.addProcessingTime(name, processingTime);\n-      callQueue.addResponseTime(name, getPriorityLevel(), queueTime,\n-          processingTime);\n-      if (isLogSlowRPC()) {\n-        logSlowRpcCalls(name, processingTime);\n-      }\n+\n+    if (call.isResponseDeferred() || connDropped) {\n+      // call was skipped; don\u0027t include it in processing metrics\n+      return;\n+    }\n+\n+    long processingTime \u003d\n+        details.get(Timing.PROCESSING, RpcMetrics.TIMEUNIT);\n+    long waitTime \u003d\n+        details.get(Timing.LOCKWAIT, RpcMetrics.TIMEUNIT);\n+    rpcMetrics.addRpcLockWaitTime(waitTime);\n+    rpcMetrics.addRpcProcessingTime(processingTime);\n+    // don\u0027t include lock wait for detailed metrics.\n+    processingTime -\u003d waitTime;\n+    String name \u003d call.getDetailedMetricsName();\n+    rpcDetailedMetrics.addProcessingTime(name, processingTime);\n+    callQueue.addResponseTime(name, call, details);\n+    if (isLogSlowRPC()) {\n+      logSlowRpcCalls(name, call, processingTime);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void updateMetrics(Call call, long startTime, boolean connDropped) {\n    // delta \u003d handler + processing + response\n    long deltaNanos \u003d Time.monotonicNowNanos() - startTime;\n    long timestampNanos \u003d call.timestampNanos;\n\n    ProcessingDetails details \u003d call.getProcessingDetails();\n    // queue time is the delta between when the call first arrived and when it\n    // began being serviced, minus the time it took to be put into the queue\n    details.set(Timing.QUEUE,\n        startTime - timestampNanos - details.get(Timing.ENQUEUE));\n    deltaNanos -\u003d details.get(Timing.PROCESSING);\n    deltaNanos -\u003d details.get(Timing.RESPONSE);\n    details.set(Timing.HANDLER, deltaNanos);\n\n    long queueTime \u003d details.get(Timing.QUEUE, RpcMetrics.TIMEUNIT);\n    rpcMetrics.addRpcQueueTime(queueTime);\n\n    if (call.isResponseDeferred() || connDropped) {\n      // call was skipped; don\u0027t include it in processing metrics\n      return;\n    }\n\n    long processingTime \u003d\n        details.get(Timing.PROCESSING, RpcMetrics.TIMEUNIT);\n    long waitTime \u003d\n        details.get(Timing.LOCKWAIT, RpcMetrics.TIMEUNIT);\n    rpcMetrics.addRpcLockWaitTime(waitTime);\n    rpcMetrics.addRpcProcessingTime(processingTime);\n    // don\u0027t include lock wait for detailed metrics.\n    processingTime -\u003d waitTime;\n    String name \u003d call.getDetailedMetricsName();\n    rpcDetailedMetrics.addProcessingTime(name, processingTime);\n    callQueue.addResponseTime(name, call, details);\n    if (isLogSlowRPC()) {\n      logSlowRpcCalls(name, call, processingTime);\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {}
        }
      ]
    },
    "3d94da1e00fc6238fad458e415219f87920f1fc3": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-11552. Allow handoff on the server side for RPC requests. Contributed by Siddharth Seth\n",
      "commitDate": "23/11/16 4:01 PM",
      "commitName": "3d94da1e00fc6238fad458e415219f87920f1fc3",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-11552. Allow handoff on the server side for RPC requests. Contributed by Siddharth Seth\n",
          "commitDate": "23/11/16 4:01 PM",
          "commitName": "3d94da1e00fc6238fad458e415219f87920f1fc3",
          "commitAuthor": "Jian He",
          "commitDateOld": "17/11/16 10:16 AM",
          "commitNameOld": "bd3735554fa5c3bc064c57ec78f4308430b14b48",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 6.24,
          "commitsBetweenForRepo": 32,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,11 +1,13 @@\n-  void updateMetrics(String name, int queueTime, int processingTime) {\n+  void updateMetrics(String name, int queueTime, int processingTime,\n+                     boolean deferredCall) {\n     rpcMetrics.addRpcQueueTime(queueTime);\n-    rpcMetrics.addRpcProcessingTime(processingTime);\n-    rpcDetailedMetrics.addProcessingTime(name, processingTime);\n-    callQueue.addResponseTime(name, getPriorityLevel(), queueTime,\n-        processingTime);\n-\n-    if (isLogSlowRPC()) {\n-      logSlowRpcCalls(name, processingTime);\n+    if (!deferredCall) {\n+      rpcMetrics.addRpcProcessingTime(processingTime);\n+      rpcDetailedMetrics.addProcessingTime(name, processingTime);\n+      callQueue.addResponseTime(name, getPriorityLevel(), queueTime,\n+          processingTime);\n+      if (isLogSlowRPC()) {\n+        logSlowRpcCalls(name, processingTime);\n+      }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void updateMetrics(String name, int queueTime, int processingTime,\n                     boolean deferredCall) {\n    rpcMetrics.addRpcQueueTime(queueTime);\n    if (!deferredCall) {\n      rpcMetrics.addRpcProcessingTime(processingTime);\n      rpcDetailedMetrics.addProcessingTime(name, processingTime);\n      callQueue.addResponseTime(name, getPriorityLevel(), queueTime,\n          processingTime);\n      if (isLogSlowRPC()) {\n        logSlowRpcCalls(name, processingTime);\n      }\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {
            "oldValue": "[name-String, queueTime-int, processingTime-int]",
            "newValue": "[name-String, queueTime-int, processingTime-int, deferredCall-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-11552. Allow handoff on the server side for RPC requests. Contributed by Siddharth Seth\n",
          "commitDate": "23/11/16 4:01 PM",
          "commitName": "3d94da1e00fc6238fad458e415219f87920f1fc3",
          "commitAuthor": "Jian He",
          "commitDateOld": "17/11/16 10:16 AM",
          "commitNameOld": "bd3735554fa5c3bc064c57ec78f4308430b14b48",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 6.24,
          "commitsBetweenForRepo": 32,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,11 +1,13 @@\n-  void updateMetrics(String name, int queueTime, int processingTime) {\n+  void updateMetrics(String name, int queueTime, int processingTime,\n+                     boolean deferredCall) {\n     rpcMetrics.addRpcQueueTime(queueTime);\n-    rpcMetrics.addRpcProcessingTime(processingTime);\n-    rpcDetailedMetrics.addProcessingTime(name, processingTime);\n-    callQueue.addResponseTime(name, getPriorityLevel(), queueTime,\n-        processingTime);\n-\n-    if (isLogSlowRPC()) {\n-      logSlowRpcCalls(name, processingTime);\n+    if (!deferredCall) {\n+      rpcMetrics.addRpcProcessingTime(processingTime);\n+      rpcDetailedMetrics.addProcessingTime(name, processingTime);\n+      callQueue.addResponseTime(name, getPriorityLevel(), queueTime,\n+          processingTime);\n+      if (isLogSlowRPC()) {\n+        logSlowRpcCalls(name, processingTime);\n+      }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void updateMetrics(String name, int queueTime, int processingTime,\n                     boolean deferredCall) {\n    rpcMetrics.addRpcQueueTime(queueTime);\n    if (!deferredCall) {\n      rpcMetrics.addRpcProcessingTime(processingTime);\n      rpcDetailedMetrics.addProcessingTime(name, processingTime);\n      callQueue.addResponseTime(name, getPriorityLevel(), queueTime,\n          processingTime);\n      if (isLogSlowRPC()) {\n        logSlowRpcCalls(name, processingTime);\n      }\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {}
        }
      ]
    },
    "d95c6eb32cec7768ac418fb467b1198ccf3cf0dc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-12916. Allow RPC scheduler/callqueue backoff using response times. Contributed by Xiaoyu Yao.\n",
      "commitDate": "31/03/16 8:42 AM",
      "commitName": "d95c6eb32cec7768ac418fb467b1198ccf3cf0dc",
      "commitAuthor": "Xiaoyu Yao",
      "diff": "@@ -0,0 +1,11 @@\n+  void updateMetrics(String name, int queueTime, int processingTime) {\n+    rpcMetrics.addRpcQueueTime(queueTime);\n+    rpcMetrics.addRpcProcessingTime(processingTime);\n+    rpcDetailedMetrics.addProcessingTime(name, processingTime);\n+    callQueue.addResponseTime(name, getPriorityLevel(), queueTime,\n+        processingTime);\n+\n+    if (isLogSlowRPC()) {\n+      logSlowRpcCalls(name, processingTime);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  void updateMetrics(String name, int queueTime, int processingTime) {\n    rpcMetrics.addRpcQueueTime(queueTime);\n    rpcMetrics.addRpcProcessingTime(processingTime);\n    rpcDetailedMetrics.addProcessingTime(name, processingTime);\n    callQueue.addResponseTime(name, getPriorityLevel(), queueTime,\n        processingTime);\n\n    if (isLogSlowRPC()) {\n      logSlowRpcCalls(name, processingTime);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java"
    }
  }
}