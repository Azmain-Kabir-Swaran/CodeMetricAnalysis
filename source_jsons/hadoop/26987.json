{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CosNInputStream.java",
  "functionName": "read",
  "functionId": "read___b-byte[]__off-int__len-int",
  "sourceFilePath": "hadoop-cloud-storage-project/hadoop-cos/src/main/java/org/apache/hadoop/fs/cosn/CosNInputStream.java",
  "functionStartLine": 299,
  "functionEndLine": 342,
  "numCommitsSeen": 1,
  "timeTaken": 335,
  "changeHistory": [
    "8a9ede5cff816b66afc37e7c9d2b33aee48795d2"
  ],
  "changeHistoryShort": {
    "8a9ede5cff816b66afc37e7c9d2b33aee48795d2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8a9ede5cff816b66afc37e7c9d2b33aee48795d2": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15616. Incorporate Tencent Cloud COS File System Implementation. Contributed by Yang Yu.\n",
      "commitDate": "27/09/19 1:53 AM",
      "commitName": "8a9ede5cff816b66afc37e7c9d2b33aee48795d2",
      "commitAuthor": "Sammi Chen",
      "diff": "@@ -0,0 +1,44 @@\n+  public int read(byte[] b, int off, int len) throws IOException {\n+    if (this.closed) {\n+      throw new IOException(FSExceptionMessages.STREAM_IS_CLOSED);\n+    }\n+\n+    if (len \u003d\u003d 0) {\n+      return 0;\n+    }\n+\n+    if (off \u003c 0 || len \u003c 0 || len \u003e b.length) {\n+      throw new IndexOutOfBoundsException();\n+    }\n+\n+    int bytesRead \u003d 0;\n+    while (position \u003c fileSize \u0026\u0026 bytesRead \u003c len) {\n+      if (partRemaining \u003c\u003d 0) {\n+        reopen(position);\n+      }\n+\n+      int bytes \u003d 0;\n+      for (int i \u003d this.buffer.length - (int) partRemaining;\n+           i \u003c this.buffer.length; i++) {\n+        b[off + bytesRead] \u003d this.buffer[i];\n+        bytes++;\n+        bytesRead++;\n+        if (off + bytesRead \u003e\u003d len) {\n+          break;\n+        }\n+      }\n+\n+      if (bytes \u003e 0) {\n+        this.position +\u003d bytes;\n+        this.partRemaining -\u003d bytes;\n+      } else if (this.partRemaining !\u003d 0) {\n+        throw new IOException(\n+            \"Failed to read from stream. Remaining: \" + this.partRemaining);\n+      }\n+    }\n+    if (null !\u003d this.statistics \u0026\u0026 bytesRead \u003e 0) {\n+      this.statistics.incrementBytesRead(bytesRead);\n+    }\n+\n+    return bytesRead \u003d\u003d 0 ? -1 : bytesRead;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public int read(byte[] b, int off, int len) throws IOException {\n    if (this.closed) {\n      throw new IOException(FSExceptionMessages.STREAM_IS_CLOSED);\n    }\n\n    if (len \u003d\u003d 0) {\n      return 0;\n    }\n\n    if (off \u003c 0 || len \u003c 0 || len \u003e b.length) {\n      throw new IndexOutOfBoundsException();\n    }\n\n    int bytesRead \u003d 0;\n    while (position \u003c fileSize \u0026\u0026 bytesRead \u003c len) {\n      if (partRemaining \u003c\u003d 0) {\n        reopen(position);\n      }\n\n      int bytes \u003d 0;\n      for (int i \u003d this.buffer.length - (int) partRemaining;\n           i \u003c this.buffer.length; i++) {\n        b[off + bytesRead] \u003d this.buffer[i];\n        bytes++;\n        bytesRead++;\n        if (off + bytesRead \u003e\u003d len) {\n          break;\n        }\n      }\n\n      if (bytes \u003e 0) {\n        this.position +\u003d bytes;\n        this.partRemaining -\u003d bytes;\n      } else if (this.partRemaining !\u003d 0) {\n        throw new IOException(\n            \"Failed to read from stream. Remaining: \" + this.partRemaining);\n      }\n    }\n    if (null !\u003d this.statistics \u0026\u0026 bytesRead \u003e 0) {\n      this.statistics.incrementBytesRead(bytesRead);\n    }\n\n    return bytesRead \u003d\u003d 0 ? -1 : bytesRead;\n  }",
      "path": "hadoop-cloud-storage-project/hadoop-cos/src/main/java/org/apache/hadoop/fs/cosn/CosNInputStream.java"
    }
  }
}