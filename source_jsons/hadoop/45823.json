{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LogAggregationFileController.java",
  "functionName": "verifyAndCreateRemoteLogDir",
  "functionId": "verifyAndCreateRemoteLogDir",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/filecontroller/LogAggregationFileController.java",
  "functionStartLine": 295,
  "functionEndLine": 391,
  "numCommitsSeen": 65,
  "timeTaken": 5590,
  "changeHistory": [
    "01d79244732c7f60dff3cd7181647c0460955491",
    "9de8e8d0496a2628b63cc841b1fdee80e2912f7a",
    "c2cb7ea1ef6532020b69031dbd18b0f9b8369f0f",
    "76893a41003d57d94eb1a5f486010815266046af",
    "6161d9ba5230f553db5f5490dce67e2afd1e29ca",
    "78063b3a76840ffade33667a90f9c9dbe7fc99eb",
    "a83fb61ac07c0468cbc7a38526e92683883dd932",
    "31c96829c767a093d6de8bdc30e06089eeba860b",
    "967b62f5d23e5e3b3573caab5cf03d089e5bcc11",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "1cf60106758c482991f08caa136446885d5f8f27",
    "670fa24b48acb407c22fbfdde87ae3123dcbf449"
  ],
  "changeHistoryShort": {
    "01d79244732c7f60dff3cd7181647c0460955491": "Ybodychange",
    "9de8e8d0496a2628b63cc841b1fdee80e2912f7a": "Ybodychange",
    "c2cb7ea1ef6532020b69031dbd18b0f9b8369f0f": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
    "76893a41003d57d94eb1a5f486010815266046af": "Ybodychange",
    "6161d9ba5230f553db5f5490dce67e2afd1e29ca": "Ybodychange",
    "78063b3a76840ffade33667a90f9c9dbe7fc99eb": "Ybodychange",
    "a83fb61ac07c0468cbc7a38526e92683883dd932": "Ybodychange",
    "31c96829c767a093d6de8bdc30e06089eeba860b": "Ybodychange",
    "967b62f5d23e5e3b3573caab5cf03d089e5bcc11": "Ymultichange(Ymodifierchange,Ybodychange)",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "1cf60106758c482991f08caa136446885d5f8f27": "Ybodychange",
    "670fa24b48acb407c22fbfdde87ae3123dcbf449": "Yintroduced"
  },
  "changeHistoryDetails": {
    "01d79244732c7f60dff3cd7181647c0460955491": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9814. JobHistoryServer can\u0027t delete aggregated files, if remote app root directory is created by NodeManager. Contributed by Adam Antal.\n",
      "commitDate": "17/09/19 8:57 PM",
      "commitName": "01d79244732c7f60dff3cd7181647c0460955491",
      "commitAuthor": "Sunil G",
      "commitDateOld": "14/05/19 10:48 AM",
      "commitNameOld": "7d831eca645f93d064975ebae35a7cbea3bbad31",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 126.42,
      "commitsBetweenForRepo": 1051,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,87 +1,97 @@\n   public void verifyAndCreateRemoteLogDir() {\n     // Checking the existence of the TLD\n     FileSystem remoteFS \u003d null;\n     try {\n       remoteFS \u003d getFileSystem(conf);\n     } catch (IOException e) {\n       throw new YarnRuntimeException(\n           \"Unable to get Remote FileSystem instance\", e);\n     }\n     boolean remoteExists \u003d true;\n     Path remoteRootLogDir \u003d getRemoteRootLogDir();\n     try {\n       FsPermission perms \u003d\n           remoteFS.getFileStatus(remoteRootLogDir).getPermission();\n       if (!perms.equals(TLDIR_PERMISSIONS)) {\n         LOG.warn(\"Remote Root Log Dir [\" + remoteRootLogDir\n             + \"] already exist, but with incorrect permissions. \"\n             + \"Expected: [\" + TLDIR_PERMISSIONS + \"], Found: [\" + perms\n             + \"].\" + \" The cluster may have problems with multiple users.\");\n \n       }\n     } catch (FileNotFoundException e) {\n       remoteExists \u003d false;\n     } catch (IOException e) {\n       throw new YarnRuntimeException(\n           \"Failed to check permissions for dir [\"\n               + remoteRootLogDir + \"]\", e);\n     }\n \n     Path qualified \u003d\n         remoteRootLogDir.makeQualified(remoteFS.getUri(),\n             remoteFS.getWorkingDirectory());\n     if (!remoteExists) {\n       LOG.warn(\"Remote Root Log Dir [\" + remoteRootLogDir\n           + \"] does not exist. Attempting to create it.\");\n       try {\n         remoteFS.mkdirs(qualified, new FsPermission(TLDIR_PERMISSIONS));\n \n         // Not possible to query FileSystem API to check if it supports\n         // chmod, chown etc. Hence resorting to catching exceptions here.\n         // Remove when FS APi is ready\n         try {\n           remoteFS.setPermission(qualified, new FsPermission(TLDIR_PERMISSIONS));\n         } catch ( UnsupportedOperationException use) {\n           LOG.info(\"Unable to set permissions for configured filesystem since\"\n               + \" it does not support this\", remoteFS.getScheme());\n           fsSupportsChmod \u003d false;\n         }\n \n         UserGroupInformation loginUser \u003d UserGroupInformation.getLoginUser();\n-        String primaryGroupName \u003d null;\n-        try {\n-          primaryGroupName \u003d loginUser.getPrimaryGroupName();\n-        } catch (IOException e) {\n-          LOG.warn(\"No primary group found. The remote root log directory\" +\n-              \" will be created with the HDFS superuser being its group \" +\n-              \"owner. JobHistoryServer may be unable to read the directory.\");\n+        String primaryGroupName \u003d conf.get(\n+            YarnConfiguration.NM_REMOTE_APP_LOG_DIR_GROUPNAME);\n+        if (primaryGroupName \u003d\u003d null || primaryGroupName.isEmpty()) {\n+          try {\n+            primaryGroupName \u003d loginUser.getPrimaryGroupName();\n+          } catch (IOException e) {\n+            LOG.warn(\"No primary group found. The remote root log directory\" +\n+                    \" will be created with the HDFS superuser being its \" +\n+                    \"group owner. JobHistoryServer may be unable to read \" +\n+                    \"the directory.\");\n+          }\n+        } else {\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"The group of remote root log directory has been \" +\n+                \"determined by the configuration and set to \" +\n+                primaryGroupName);\n+          }\n         }\n         // set owner on the remote directory only if the primary group exists\n         if (primaryGroupName !\u003d null) {\n           try {\n             remoteFS.setOwner(qualified, loginUser.getShortUserName(),\n                 primaryGroupName);\n           } catch (UnsupportedOperationException use) {\n             LOG.info(\n                 \"File System does not support setting user/group\" + remoteFS\n                     .getScheme(), use);\n           }\n         }\n       } catch (IOException e) {\n         throw new YarnRuntimeException(\"Failed to create remoteLogDir [\"\n             + remoteRootLogDir + \"]\", e);\n       }\n     } else{\n       //Check if FS has capability to set/modify permissions\n       try {\n         remoteFS.setPermission(qualified, new FsPermission(TLDIR_PERMISSIONS));\n       } catch (UnsupportedOperationException use) {\n         LOG.info(\"Unable to set permissions for configured filesystem since\"\n             + \" it does not support this\", remoteFS.getScheme());\n         fsSupportsChmod \u003d false;\n       } catch (IOException e) {\n         LOG.warn(\"Failed to check if FileSystem suppports permissions on \"\n             + \"remoteLogDir [\" + remoteRootLogDir + \"]\", e);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void verifyAndCreateRemoteLogDir() {\n    // Checking the existence of the TLD\n    FileSystem remoteFS \u003d null;\n    try {\n      remoteFS \u003d getFileSystem(conf);\n    } catch (IOException e) {\n      throw new YarnRuntimeException(\n          \"Unable to get Remote FileSystem instance\", e);\n    }\n    boolean remoteExists \u003d true;\n    Path remoteRootLogDir \u003d getRemoteRootLogDir();\n    try {\n      FsPermission perms \u003d\n          remoteFS.getFileStatus(remoteRootLogDir).getPermission();\n      if (!perms.equals(TLDIR_PERMISSIONS)) {\n        LOG.warn(\"Remote Root Log Dir [\" + remoteRootLogDir\n            + \"] already exist, but with incorrect permissions. \"\n            + \"Expected: [\" + TLDIR_PERMISSIONS + \"], Found: [\" + perms\n            + \"].\" + \" The cluster may have problems with multiple users.\");\n\n      }\n    } catch (FileNotFoundException e) {\n      remoteExists \u003d false;\n    } catch (IOException e) {\n      throw new YarnRuntimeException(\n          \"Failed to check permissions for dir [\"\n              + remoteRootLogDir + \"]\", e);\n    }\n\n    Path qualified \u003d\n        remoteRootLogDir.makeQualified(remoteFS.getUri(),\n            remoteFS.getWorkingDirectory());\n    if (!remoteExists) {\n      LOG.warn(\"Remote Root Log Dir [\" + remoteRootLogDir\n          + \"] does not exist. Attempting to create it.\");\n      try {\n        remoteFS.mkdirs(qualified, new FsPermission(TLDIR_PERMISSIONS));\n\n        // Not possible to query FileSystem API to check if it supports\n        // chmod, chown etc. Hence resorting to catching exceptions here.\n        // Remove when FS APi is ready\n        try {\n          remoteFS.setPermission(qualified, new FsPermission(TLDIR_PERMISSIONS));\n        } catch ( UnsupportedOperationException use) {\n          LOG.info(\"Unable to set permissions for configured filesystem since\"\n              + \" it does not support this\", remoteFS.getScheme());\n          fsSupportsChmod \u003d false;\n        }\n\n        UserGroupInformation loginUser \u003d UserGroupInformation.getLoginUser();\n        String primaryGroupName \u003d conf.get(\n            YarnConfiguration.NM_REMOTE_APP_LOG_DIR_GROUPNAME);\n        if (primaryGroupName \u003d\u003d null || primaryGroupName.isEmpty()) {\n          try {\n            primaryGroupName \u003d loginUser.getPrimaryGroupName();\n          } catch (IOException e) {\n            LOG.warn(\"No primary group found. The remote root log directory\" +\n                    \" will be created with the HDFS superuser being its \" +\n                    \"group owner. JobHistoryServer may be unable to read \" +\n                    \"the directory.\");\n          }\n        } else {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"The group of remote root log directory has been \" +\n                \"determined by the configuration and set to \" +\n                primaryGroupName);\n          }\n        }\n        // set owner on the remote directory only if the primary group exists\n        if (primaryGroupName !\u003d null) {\n          try {\n            remoteFS.setOwner(qualified, loginUser.getShortUserName(),\n                primaryGroupName);\n          } catch (UnsupportedOperationException use) {\n            LOG.info(\n                \"File System does not support setting user/group\" + remoteFS\n                    .getScheme(), use);\n          }\n        }\n      } catch (IOException e) {\n        throw new YarnRuntimeException(\"Failed to create remoteLogDir [\"\n            + remoteRootLogDir + \"]\", e);\n      }\n    } else{\n      //Check if FS has capability to set/modify permissions\n      try {\n        remoteFS.setPermission(qualified, new FsPermission(TLDIR_PERMISSIONS));\n      } catch (UnsupportedOperationException use) {\n        LOG.info(\"Unable to set permissions for configured filesystem since\"\n            + \" it does not support this\", remoteFS.getScheme());\n        fsSupportsChmod \u003d false;\n      } catch (IOException e) {\n        LOG.warn(\"Failed to check if FileSystem suppports permissions on \"\n            + \"remoteLogDir [\" + remoteRootLogDir + \"]\", e);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/filecontroller/LogAggregationFileController.java",
      "extendedDetails": {}
    },
    "9de8e8d0496a2628b63cc841b1fdee80e2912f7a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9030. Log aggregation changes to handle filesystems which do not support setting permissions. (Suma Shivaprasad via wangda)\n\nChange-Id: I80f1e8196b8624e24d74494719fdedfd7061dced\n",
      "commitDate": "28/11/18 1:36 PM",
      "commitName": "9de8e8d0496a2628b63cc841b1fdee80e2912f7a",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "07/08/18 12:37 PM",
      "commitNameOld": "c0599151bb438d3dc0c6a54af93b2670770daefd",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 113.08,
      "commitsBetweenForRepo": 1027,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,87 @@\n   public void verifyAndCreateRemoteLogDir() {\n-    boolean logPermError \u003d true;\n     // Checking the existence of the TLD\n     FileSystem remoteFS \u003d null;\n     try {\n       remoteFS \u003d getFileSystem(conf);\n     } catch (IOException e) {\n       throw new YarnRuntimeException(\n           \"Unable to get Remote FileSystem instance\", e);\n     }\n     boolean remoteExists \u003d true;\n     Path remoteRootLogDir \u003d getRemoteRootLogDir();\n     try {\n       FsPermission perms \u003d\n           remoteFS.getFileStatus(remoteRootLogDir).getPermission();\n-      if (!perms.equals(TLDIR_PERMISSIONS) \u0026\u0026 logPermError) {\n+      if (!perms.equals(TLDIR_PERMISSIONS)) {\n         LOG.warn(\"Remote Root Log Dir [\" + remoteRootLogDir\n             + \"] already exist, but with incorrect permissions. \"\n             + \"Expected: [\" + TLDIR_PERMISSIONS + \"], Found: [\" + perms\n             + \"].\" + \" The cluster may have problems with multiple users.\");\n-        logPermError \u003d false;\n-      } else {\n-        logPermError \u003d true;\n+\n       }\n     } catch (FileNotFoundException e) {\n       remoteExists \u003d false;\n     } catch (IOException e) {\n       throw new YarnRuntimeException(\n           \"Failed to check permissions for dir [\"\n               + remoteRootLogDir + \"]\", e);\n     }\n+\n+    Path qualified \u003d\n+        remoteRootLogDir.makeQualified(remoteFS.getUri(),\n+            remoteFS.getWorkingDirectory());\n     if (!remoteExists) {\n       LOG.warn(\"Remote Root Log Dir [\" + remoteRootLogDir\n           + \"] does not exist. Attempting to create it.\");\n       try {\n-        Path qualified \u003d\n-            remoteRootLogDir.makeQualified(remoteFS.getUri(),\n-                remoteFS.getWorkingDirectory());\n         remoteFS.mkdirs(qualified, new FsPermission(TLDIR_PERMISSIONS));\n-        remoteFS.setPermission(qualified, new FsPermission(TLDIR_PERMISSIONS));\n+\n+        // Not possible to query FileSystem API to check if it supports\n+        // chmod, chown etc. Hence resorting to catching exceptions here.\n+        // Remove when FS APi is ready\n+        try {\n+          remoteFS.setPermission(qualified, new FsPermission(TLDIR_PERMISSIONS));\n+        } catch ( UnsupportedOperationException use) {\n+          LOG.info(\"Unable to set permissions for configured filesystem since\"\n+              + \" it does not support this\", remoteFS.getScheme());\n+          fsSupportsChmod \u003d false;\n+        }\n \n         UserGroupInformation loginUser \u003d UserGroupInformation.getLoginUser();\n         String primaryGroupName \u003d null;\n         try {\n           primaryGroupName \u003d loginUser.getPrimaryGroupName();\n         } catch (IOException e) {\n           LOG.warn(\"No primary group found. The remote root log directory\" +\n               \" will be created with the HDFS superuser being its group \" +\n               \"owner. JobHistoryServer may be unable to read the directory.\");\n         }\n         // set owner on the remote directory only if the primary group exists\n         if (primaryGroupName !\u003d null) {\n-          remoteFS.setOwner(qualified,\n-              loginUser.getShortUserName(), primaryGroupName);\n+          try {\n+            remoteFS.setOwner(qualified, loginUser.getShortUserName(),\n+                primaryGroupName);\n+          } catch (UnsupportedOperationException use) {\n+            LOG.info(\n+                \"File System does not support setting user/group\" + remoteFS\n+                    .getScheme(), use);\n+          }\n         }\n       } catch (IOException e) {\n         throw new YarnRuntimeException(\"Failed to create remoteLogDir [\"\n             + remoteRootLogDir + \"]\", e);\n       }\n+    } else{\n+      //Check if FS has capability to set/modify permissions\n+      try {\n+        remoteFS.setPermission(qualified, new FsPermission(TLDIR_PERMISSIONS));\n+      } catch (UnsupportedOperationException use) {\n+        LOG.info(\"Unable to set permissions for configured filesystem since\"\n+            + \" it does not support this\", remoteFS.getScheme());\n+        fsSupportsChmod \u003d false;\n+      } catch (IOException e) {\n+        LOG.warn(\"Failed to check if FileSystem suppports permissions on \"\n+            + \"remoteLogDir [\" + remoteRootLogDir + \"]\", e);\n+      }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void verifyAndCreateRemoteLogDir() {\n    // Checking the existence of the TLD\n    FileSystem remoteFS \u003d null;\n    try {\n      remoteFS \u003d getFileSystem(conf);\n    } catch (IOException e) {\n      throw new YarnRuntimeException(\n          \"Unable to get Remote FileSystem instance\", e);\n    }\n    boolean remoteExists \u003d true;\n    Path remoteRootLogDir \u003d getRemoteRootLogDir();\n    try {\n      FsPermission perms \u003d\n          remoteFS.getFileStatus(remoteRootLogDir).getPermission();\n      if (!perms.equals(TLDIR_PERMISSIONS)) {\n        LOG.warn(\"Remote Root Log Dir [\" + remoteRootLogDir\n            + \"] already exist, but with incorrect permissions. \"\n            + \"Expected: [\" + TLDIR_PERMISSIONS + \"], Found: [\" + perms\n            + \"].\" + \" The cluster may have problems with multiple users.\");\n\n      }\n    } catch (FileNotFoundException e) {\n      remoteExists \u003d false;\n    } catch (IOException e) {\n      throw new YarnRuntimeException(\n          \"Failed to check permissions for dir [\"\n              + remoteRootLogDir + \"]\", e);\n    }\n\n    Path qualified \u003d\n        remoteRootLogDir.makeQualified(remoteFS.getUri(),\n            remoteFS.getWorkingDirectory());\n    if (!remoteExists) {\n      LOG.warn(\"Remote Root Log Dir [\" + remoteRootLogDir\n          + \"] does not exist. Attempting to create it.\");\n      try {\n        remoteFS.mkdirs(qualified, new FsPermission(TLDIR_PERMISSIONS));\n\n        // Not possible to query FileSystem API to check if it supports\n        // chmod, chown etc. Hence resorting to catching exceptions here.\n        // Remove when FS APi is ready\n        try {\n          remoteFS.setPermission(qualified, new FsPermission(TLDIR_PERMISSIONS));\n        } catch ( UnsupportedOperationException use) {\n          LOG.info(\"Unable to set permissions for configured filesystem since\"\n              + \" it does not support this\", remoteFS.getScheme());\n          fsSupportsChmod \u003d false;\n        }\n\n        UserGroupInformation loginUser \u003d UserGroupInformation.getLoginUser();\n        String primaryGroupName \u003d null;\n        try {\n          primaryGroupName \u003d loginUser.getPrimaryGroupName();\n        } catch (IOException e) {\n          LOG.warn(\"No primary group found. The remote root log directory\" +\n              \" will be created with the HDFS superuser being its group \" +\n              \"owner. JobHistoryServer may be unable to read the directory.\");\n        }\n        // set owner on the remote directory only if the primary group exists\n        if (primaryGroupName !\u003d null) {\n          try {\n            remoteFS.setOwner(qualified, loginUser.getShortUserName(),\n                primaryGroupName);\n          } catch (UnsupportedOperationException use) {\n            LOG.info(\n                \"File System does not support setting user/group\" + remoteFS\n                    .getScheme(), use);\n          }\n        }\n      } catch (IOException e) {\n        throw new YarnRuntimeException(\"Failed to create remoteLogDir [\"\n            + remoteRootLogDir + \"]\", e);\n      }\n    } else{\n      //Check if FS has capability to set/modify permissions\n      try {\n        remoteFS.setPermission(qualified, new FsPermission(TLDIR_PERMISSIONS));\n      } catch (UnsupportedOperationException use) {\n        LOG.info(\"Unable to set permissions for configured filesystem since\"\n            + \" it does not support this\", remoteFS.getScheme());\n        fsSupportsChmod \u003d false;\n      } catch (IOException e) {\n        LOG.warn(\"Failed to check if FileSystem suppports permissions on \"\n            + \"remoteLogDir [\" + remoteRootLogDir + \"]\", e);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/filecontroller/LogAggregationFileController.java",
      "extendedDetails": {}
    },
    "c2cb7ea1ef6532020b69031dbd18b0f9b8369f0f": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-6876. Create an abstract log writer for extendability. Contributed by Xuan Gong.\n",
      "commitDate": "24/08/17 1:36 PM",
      "commitName": "c2cb7ea1ef6532020b69031dbd18b0f9b8369f0f",
      "commitAuthor": "Junping Du",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-6876. Create an abstract log writer for extendability. Contributed by Xuan Gong.\n",
          "commitDate": "24/08/17 1:36 PM",
          "commitName": "c2cb7ea1ef6532020b69031dbd18b0f9b8369f0f",
          "commitAuthor": "Junping Du",
          "commitDateOld": "24/08/17 8:17 AM",
          "commitNameOld": "8196a07c3211385ce85ae24f763b62696edc60b9",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 0.22,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,58 +1,61 @@\n-  void verifyAndCreateRemoteLogDir(Configuration conf) {\n+  public void verifyAndCreateRemoteLogDir() {\n+    boolean logPermError \u003d true;\n     // Checking the existence of the TLD\n     FileSystem remoteFS \u003d null;\n     try {\n       remoteFS \u003d getFileSystem(conf);\n     } catch (IOException e) {\n-      throw new YarnRuntimeException(\"Unable to get Remote FileSystem instance\", e);\n+      throw new YarnRuntimeException(\n+          \"Unable to get Remote FileSystem instance\", e);\n     }\n     boolean remoteExists \u003d true;\n+    Path remoteRootLogDir \u003d getRemoteRootLogDir();\n     try {\n       FsPermission perms \u003d\n-          remoteFS.getFileStatus(this.remoteRootLogDir).getPermission();\n+          remoteFS.getFileStatus(remoteRootLogDir).getPermission();\n       if (!perms.equals(TLDIR_PERMISSIONS) \u0026\u0026 logPermError) {\n-        LOG.warn(\"Remote Root Log Dir [\" + this.remoteRootLogDir\n+        LOG.warn(\"Remote Root Log Dir [\" + remoteRootLogDir\n             + \"] already exist, but with incorrect permissions. \"\n             + \"Expected: [\" + TLDIR_PERMISSIONS + \"], Found: [\" + perms\n             + \"].\" + \" The cluster may have problems with multiple users.\");\n         logPermError \u003d false;\n       } else {\n         logPermError \u003d true;\n       }\n     } catch (FileNotFoundException e) {\n       remoteExists \u003d false;\n     } catch (IOException e) {\n       throw new YarnRuntimeException(\n           \"Failed to check permissions for dir [\"\n-              + this.remoteRootLogDir + \"]\", e);\n+              + remoteRootLogDir + \"]\", e);\n     }\n     if (!remoteExists) {\n-      LOG.warn(\"Remote Root Log Dir [\" + this.remoteRootLogDir\n+      LOG.warn(\"Remote Root Log Dir [\" + remoteRootLogDir\n           + \"] does not exist. Attempting to create it.\");\n       try {\n         Path qualified \u003d\n-            this.remoteRootLogDir.makeQualified(remoteFS.getUri(),\n+            remoteRootLogDir.makeQualified(remoteFS.getUri(),\n                 remoteFS.getWorkingDirectory());\n         remoteFS.mkdirs(qualified, new FsPermission(TLDIR_PERMISSIONS));\n         remoteFS.setPermission(qualified, new FsPermission(TLDIR_PERMISSIONS));\n \n         UserGroupInformation loginUser \u003d UserGroupInformation.getLoginUser();\n         String primaryGroupName \u003d null;\n         try {\n           primaryGroupName \u003d loginUser.getPrimaryGroupName();\n         } catch (IOException e) {\n           LOG.warn(\"No primary group found. The remote root log directory\" +\n               \" will be created with the HDFS superuser being its group \" +\n               \"owner. JobHistoryServer may be unable to read the directory.\");\n         }\n         // set owner on the remote directory only if the primary group exists\n         if (primaryGroupName !\u003d null) {\n           remoteFS.setOwner(qualified,\n               loginUser.getShortUserName(), primaryGroupName);\n         }\n       } catch (IOException e) {\n         throw new YarnRuntimeException(\"Failed to create remoteLogDir [\"\n-            + this.remoteRootLogDir + \"]\", e);\n+            + remoteRootLogDir + \"]\", e);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void verifyAndCreateRemoteLogDir() {\n    boolean logPermError \u003d true;\n    // Checking the existence of the TLD\n    FileSystem remoteFS \u003d null;\n    try {\n      remoteFS \u003d getFileSystem(conf);\n    } catch (IOException e) {\n      throw new YarnRuntimeException(\n          \"Unable to get Remote FileSystem instance\", e);\n    }\n    boolean remoteExists \u003d true;\n    Path remoteRootLogDir \u003d getRemoteRootLogDir();\n    try {\n      FsPermission perms \u003d\n          remoteFS.getFileStatus(remoteRootLogDir).getPermission();\n      if (!perms.equals(TLDIR_PERMISSIONS) \u0026\u0026 logPermError) {\n        LOG.warn(\"Remote Root Log Dir [\" + remoteRootLogDir\n            + \"] already exist, but with incorrect permissions. \"\n            + \"Expected: [\" + TLDIR_PERMISSIONS + \"], Found: [\" + perms\n            + \"].\" + \" The cluster may have problems with multiple users.\");\n        logPermError \u003d false;\n      } else {\n        logPermError \u003d true;\n      }\n    } catch (FileNotFoundException e) {\n      remoteExists \u003d false;\n    } catch (IOException e) {\n      throw new YarnRuntimeException(\n          \"Failed to check permissions for dir [\"\n              + remoteRootLogDir + \"]\", e);\n    }\n    if (!remoteExists) {\n      LOG.warn(\"Remote Root Log Dir [\" + remoteRootLogDir\n          + \"] does not exist. Attempting to create it.\");\n      try {\n        Path qualified \u003d\n            remoteRootLogDir.makeQualified(remoteFS.getUri(),\n                remoteFS.getWorkingDirectory());\n        remoteFS.mkdirs(qualified, new FsPermission(TLDIR_PERMISSIONS));\n        remoteFS.setPermission(qualified, new FsPermission(TLDIR_PERMISSIONS));\n\n        UserGroupInformation loginUser \u003d UserGroupInformation.getLoginUser();\n        String primaryGroupName \u003d null;\n        try {\n          primaryGroupName \u003d loginUser.getPrimaryGroupName();\n        } catch (IOException e) {\n          LOG.warn(\"No primary group found. The remote root log directory\" +\n              \" will be created with the HDFS superuser being its group \" +\n              \"owner. JobHistoryServer may be unable to read the directory.\");\n        }\n        // set owner on the remote directory only if the primary group exists\n        if (primaryGroupName !\u003d null) {\n          remoteFS.setOwner(qualified,\n              loginUser.getShortUserName(), primaryGroupName);\n        }\n      } catch (IOException e) {\n        throw new YarnRuntimeException(\"Failed to create remoteLogDir [\"\n            + remoteRootLogDir + \"]\", e);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/filecontroller/LogAggregationFileController.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/filecontroller/LogAggregationFileController.java",
            "oldMethodName": "verifyAndCreateRemoteLogDir",
            "newMethodName": "verifyAndCreateRemoteLogDir"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-6876. Create an abstract log writer for extendability. Contributed by Xuan Gong.\n",
          "commitDate": "24/08/17 1:36 PM",
          "commitName": "c2cb7ea1ef6532020b69031dbd18b0f9b8369f0f",
          "commitAuthor": "Junping Du",
          "commitDateOld": "24/08/17 8:17 AM",
          "commitNameOld": "8196a07c3211385ce85ae24f763b62696edc60b9",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 0.22,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,58 +1,61 @@\n-  void verifyAndCreateRemoteLogDir(Configuration conf) {\n+  public void verifyAndCreateRemoteLogDir() {\n+    boolean logPermError \u003d true;\n     // Checking the existence of the TLD\n     FileSystem remoteFS \u003d null;\n     try {\n       remoteFS \u003d getFileSystem(conf);\n     } catch (IOException e) {\n-      throw new YarnRuntimeException(\"Unable to get Remote FileSystem instance\", e);\n+      throw new YarnRuntimeException(\n+          \"Unable to get Remote FileSystem instance\", e);\n     }\n     boolean remoteExists \u003d true;\n+    Path remoteRootLogDir \u003d getRemoteRootLogDir();\n     try {\n       FsPermission perms \u003d\n-          remoteFS.getFileStatus(this.remoteRootLogDir).getPermission();\n+          remoteFS.getFileStatus(remoteRootLogDir).getPermission();\n       if (!perms.equals(TLDIR_PERMISSIONS) \u0026\u0026 logPermError) {\n-        LOG.warn(\"Remote Root Log Dir [\" + this.remoteRootLogDir\n+        LOG.warn(\"Remote Root Log Dir [\" + remoteRootLogDir\n             + \"] already exist, but with incorrect permissions. \"\n             + \"Expected: [\" + TLDIR_PERMISSIONS + \"], Found: [\" + perms\n             + \"].\" + \" The cluster may have problems with multiple users.\");\n         logPermError \u003d false;\n       } else {\n         logPermError \u003d true;\n       }\n     } catch (FileNotFoundException e) {\n       remoteExists \u003d false;\n     } catch (IOException e) {\n       throw new YarnRuntimeException(\n           \"Failed to check permissions for dir [\"\n-              + this.remoteRootLogDir + \"]\", e);\n+              + remoteRootLogDir + \"]\", e);\n     }\n     if (!remoteExists) {\n-      LOG.warn(\"Remote Root Log Dir [\" + this.remoteRootLogDir\n+      LOG.warn(\"Remote Root Log Dir [\" + remoteRootLogDir\n           + \"] does not exist. Attempting to create it.\");\n       try {\n         Path qualified \u003d\n-            this.remoteRootLogDir.makeQualified(remoteFS.getUri(),\n+            remoteRootLogDir.makeQualified(remoteFS.getUri(),\n                 remoteFS.getWorkingDirectory());\n         remoteFS.mkdirs(qualified, new FsPermission(TLDIR_PERMISSIONS));\n         remoteFS.setPermission(qualified, new FsPermission(TLDIR_PERMISSIONS));\n \n         UserGroupInformation loginUser \u003d UserGroupInformation.getLoginUser();\n         String primaryGroupName \u003d null;\n         try {\n           primaryGroupName \u003d loginUser.getPrimaryGroupName();\n         } catch (IOException e) {\n           LOG.warn(\"No primary group found. The remote root log directory\" +\n               \" will be created with the HDFS superuser being its group \" +\n               \"owner. JobHistoryServer may be unable to read the directory.\");\n         }\n         // set owner on the remote directory only if the primary group exists\n         if (primaryGroupName !\u003d null) {\n           remoteFS.setOwner(qualified,\n               loginUser.getShortUserName(), primaryGroupName);\n         }\n       } catch (IOException e) {\n         throw new YarnRuntimeException(\"Failed to create remoteLogDir [\"\n-            + this.remoteRootLogDir + \"]\", e);\n+            + remoteRootLogDir + \"]\", e);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void verifyAndCreateRemoteLogDir() {\n    boolean logPermError \u003d true;\n    // Checking the existence of the TLD\n    FileSystem remoteFS \u003d null;\n    try {\n      remoteFS \u003d getFileSystem(conf);\n    } catch (IOException e) {\n      throw new YarnRuntimeException(\n          \"Unable to get Remote FileSystem instance\", e);\n    }\n    boolean remoteExists \u003d true;\n    Path remoteRootLogDir \u003d getRemoteRootLogDir();\n    try {\n      FsPermission perms \u003d\n          remoteFS.getFileStatus(remoteRootLogDir).getPermission();\n      if (!perms.equals(TLDIR_PERMISSIONS) \u0026\u0026 logPermError) {\n        LOG.warn(\"Remote Root Log Dir [\" + remoteRootLogDir\n            + \"] already exist, but with incorrect permissions. \"\n            + \"Expected: [\" + TLDIR_PERMISSIONS + \"], Found: [\" + perms\n            + \"].\" + \" The cluster may have problems with multiple users.\");\n        logPermError \u003d false;\n      } else {\n        logPermError \u003d true;\n      }\n    } catch (FileNotFoundException e) {\n      remoteExists \u003d false;\n    } catch (IOException e) {\n      throw new YarnRuntimeException(\n          \"Failed to check permissions for dir [\"\n              + remoteRootLogDir + \"]\", e);\n    }\n    if (!remoteExists) {\n      LOG.warn(\"Remote Root Log Dir [\" + remoteRootLogDir\n          + \"] does not exist. Attempting to create it.\");\n      try {\n        Path qualified \u003d\n            remoteRootLogDir.makeQualified(remoteFS.getUri(),\n                remoteFS.getWorkingDirectory());\n        remoteFS.mkdirs(qualified, new FsPermission(TLDIR_PERMISSIONS));\n        remoteFS.setPermission(qualified, new FsPermission(TLDIR_PERMISSIONS));\n\n        UserGroupInformation loginUser \u003d UserGroupInformation.getLoginUser();\n        String primaryGroupName \u003d null;\n        try {\n          primaryGroupName \u003d loginUser.getPrimaryGroupName();\n        } catch (IOException e) {\n          LOG.warn(\"No primary group found. The remote root log directory\" +\n              \" will be created with the HDFS superuser being its group \" +\n              \"owner. JobHistoryServer may be unable to read the directory.\");\n        }\n        // set owner on the remote directory only if the primary group exists\n        if (primaryGroupName !\u003d null) {\n          remoteFS.setOwner(qualified,\n              loginUser.getShortUserName(), primaryGroupName);\n        }\n      } catch (IOException e) {\n        throw new YarnRuntimeException(\"Failed to create remoteLogDir [\"\n            + remoteRootLogDir + \"]\", e);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/filecontroller/LogAggregationFileController.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6876. Create an abstract log writer for extendability. Contributed by Xuan Gong.\n",
          "commitDate": "24/08/17 1:36 PM",
          "commitName": "c2cb7ea1ef6532020b69031dbd18b0f9b8369f0f",
          "commitAuthor": "Junping Du",
          "commitDateOld": "24/08/17 8:17 AM",
          "commitNameOld": "8196a07c3211385ce85ae24f763b62696edc60b9",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 0.22,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,58 +1,61 @@\n-  void verifyAndCreateRemoteLogDir(Configuration conf) {\n+  public void verifyAndCreateRemoteLogDir() {\n+    boolean logPermError \u003d true;\n     // Checking the existence of the TLD\n     FileSystem remoteFS \u003d null;\n     try {\n       remoteFS \u003d getFileSystem(conf);\n     } catch (IOException e) {\n-      throw new YarnRuntimeException(\"Unable to get Remote FileSystem instance\", e);\n+      throw new YarnRuntimeException(\n+          \"Unable to get Remote FileSystem instance\", e);\n     }\n     boolean remoteExists \u003d true;\n+    Path remoteRootLogDir \u003d getRemoteRootLogDir();\n     try {\n       FsPermission perms \u003d\n-          remoteFS.getFileStatus(this.remoteRootLogDir).getPermission();\n+          remoteFS.getFileStatus(remoteRootLogDir).getPermission();\n       if (!perms.equals(TLDIR_PERMISSIONS) \u0026\u0026 logPermError) {\n-        LOG.warn(\"Remote Root Log Dir [\" + this.remoteRootLogDir\n+        LOG.warn(\"Remote Root Log Dir [\" + remoteRootLogDir\n             + \"] already exist, but with incorrect permissions. \"\n             + \"Expected: [\" + TLDIR_PERMISSIONS + \"], Found: [\" + perms\n             + \"].\" + \" The cluster may have problems with multiple users.\");\n         logPermError \u003d false;\n       } else {\n         logPermError \u003d true;\n       }\n     } catch (FileNotFoundException e) {\n       remoteExists \u003d false;\n     } catch (IOException e) {\n       throw new YarnRuntimeException(\n           \"Failed to check permissions for dir [\"\n-              + this.remoteRootLogDir + \"]\", e);\n+              + remoteRootLogDir + \"]\", e);\n     }\n     if (!remoteExists) {\n-      LOG.warn(\"Remote Root Log Dir [\" + this.remoteRootLogDir\n+      LOG.warn(\"Remote Root Log Dir [\" + remoteRootLogDir\n           + \"] does not exist. Attempting to create it.\");\n       try {\n         Path qualified \u003d\n-            this.remoteRootLogDir.makeQualified(remoteFS.getUri(),\n+            remoteRootLogDir.makeQualified(remoteFS.getUri(),\n                 remoteFS.getWorkingDirectory());\n         remoteFS.mkdirs(qualified, new FsPermission(TLDIR_PERMISSIONS));\n         remoteFS.setPermission(qualified, new FsPermission(TLDIR_PERMISSIONS));\n \n         UserGroupInformation loginUser \u003d UserGroupInformation.getLoginUser();\n         String primaryGroupName \u003d null;\n         try {\n           primaryGroupName \u003d loginUser.getPrimaryGroupName();\n         } catch (IOException e) {\n           LOG.warn(\"No primary group found. The remote root log directory\" +\n               \" will be created with the HDFS superuser being its group \" +\n               \"owner. JobHistoryServer may be unable to read the directory.\");\n         }\n         // set owner on the remote directory only if the primary group exists\n         if (primaryGroupName !\u003d null) {\n           remoteFS.setOwner(qualified,\n               loginUser.getShortUserName(), primaryGroupName);\n         }\n       } catch (IOException e) {\n         throw new YarnRuntimeException(\"Failed to create remoteLogDir [\"\n-            + this.remoteRootLogDir + \"]\", e);\n+            + remoteRootLogDir + \"]\", e);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void verifyAndCreateRemoteLogDir() {\n    boolean logPermError \u003d true;\n    // Checking the existence of the TLD\n    FileSystem remoteFS \u003d null;\n    try {\n      remoteFS \u003d getFileSystem(conf);\n    } catch (IOException e) {\n      throw new YarnRuntimeException(\n          \"Unable to get Remote FileSystem instance\", e);\n    }\n    boolean remoteExists \u003d true;\n    Path remoteRootLogDir \u003d getRemoteRootLogDir();\n    try {\n      FsPermission perms \u003d\n          remoteFS.getFileStatus(remoteRootLogDir).getPermission();\n      if (!perms.equals(TLDIR_PERMISSIONS) \u0026\u0026 logPermError) {\n        LOG.warn(\"Remote Root Log Dir [\" + remoteRootLogDir\n            + \"] already exist, but with incorrect permissions. \"\n            + \"Expected: [\" + TLDIR_PERMISSIONS + \"], Found: [\" + perms\n            + \"].\" + \" The cluster may have problems with multiple users.\");\n        logPermError \u003d false;\n      } else {\n        logPermError \u003d true;\n      }\n    } catch (FileNotFoundException e) {\n      remoteExists \u003d false;\n    } catch (IOException e) {\n      throw new YarnRuntimeException(\n          \"Failed to check permissions for dir [\"\n              + remoteRootLogDir + \"]\", e);\n    }\n    if (!remoteExists) {\n      LOG.warn(\"Remote Root Log Dir [\" + remoteRootLogDir\n          + \"] does not exist. Attempting to create it.\");\n      try {\n        Path qualified \u003d\n            remoteRootLogDir.makeQualified(remoteFS.getUri(),\n                remoteFS.getWorkingDirectory());\n        remoteFS.mkdirs(qualified, new FsPermission(TLDIR_PERMISSIONS));\n        remoteFS.setPermission(qualified, new FsPermission(TLDIR_PERMISSIONS));\n\n        UserGroupInformation loginUser \u003d UserGroupInformation.getLoginUser();\n        String primaryGroupName \u003d null;\n        try {\n          primaryGroupName \u003d loginUser.getPrimaryGroupName();\n        } catch (IOException e) {\n          LOG.warn(\"No primary group found. The remote root log directory\" +\n              \" will be created with the HDFS superuser being its group \" +\n              \"owner. JobHistoryServer may be unable to read the directory.\");\n        }\n        // set owner on the remote directory only if the primary group exists\n        if (primaryGroupName !\u003d null) {\n          remoteFS.setOwner(qualified,\n              loginUser.getShortUserName(), primaryGroupName);\n        }\n      } catch (IOException e) {\n        throw new YarnRuntimeException(\"Failed to create remoteLogDir [\"\n            + remoteRootLogDir + \"]\", e);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/filecontroller/LogAggregationFileController.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6876. Create an abstract log writer for extendability. Contributed by Xuan Gong.\n",
          "commitDate": "24/08/17 1:36 PM",
          "commitName": "c2cb7ea1ef6532020b69031dbd18b0f9b8369f0f",
          "commitAuthor": "Junping Du",
          "commitDateOld": "24/08/17 8:17 AM",
          "commitNameOld": "8196a07c3211385ce85ae24f763b62696edc60b9",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 0.22,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,58 +1,61 @@\n-  void verifyAndCreateRemoteLogDir(Configuration conf) {\n+  public void verifyAndCreateRemoteLogDir() {\n+    boolean logPermError \u003d true;\n     // Checking the existence of the TLD\n     FileSystem remoteFS \u003d null;\n     try {\n       remoteFS \u003d getFileSystem(conf);\n     } catch (IOException e) {\n-      throw new YarnRuntimeException(\"Unable to get Remote FileSystem instance\", e);\n+      throw new YarnRuntimeException(\n+          \"Unable to get Remote FileSystem instance\", e);\n     }\n     boolean remoteExists \u003d true;\n+    Path remoteRootLogDir \u003d getRemoteRootLogDir();\n     try {\n       FsPermission perms \u003d\n-          remoteFS.getFileStatus(this.remoteRootLogDir).getPermission();\n+          remoteFS.getFileStatus(remoteRootLogDir).getPermission();\n       if (!perms.equals(TLDIR_PERMISSIONS) \u0026\u0026 logPermError) {\n-        LOG.warn(\"Remote Root Log Dir [\" + this.remoteRootLogDir\n+        LOG.warn(\"Remote Root Log Dir [\" + remoteRootLogDir\n             + \"] already exist, but with incorrect permissions. \"\n             + \"Expected: [\" + TLDIR_PERMISSIONS + \"], Found: [\" + perms\n             + \"].\" + \" The cluster may have problems with multiple users.\");\n         logPermError \u003d false;\n       } else {\n         logPermError \u003d true;\n       }\n     } catch (FileNotFoundException e) {\n       remoteExists \u003d false;\n     } catch (IOException e) {\n       throw new YarnRuntimeException(\n           \"Failed to check permissions for dir [\"\n-              + this.remoteRootLogDir + \"]\", e);\n+              + remoteRootLogDir + \"]\", e);\n     }\n     if (!remoteExists) {\n-      LOG.warn(\"Remote Root Log Dir [\" + this.remoteRootLogDir\n+      LOG.warn(\"Remote Root Log Dir [\" + remoteRootLogDir\n           + \"] does not exist. Attempting to create it.\");\n       try {\n         Path qualified \u003d\n-            this.remoteRootLogDir.makeQualified(remoteFS.getUri(),\n+            remoteRootLogDir.makeQualified(remoteFS.getUri(),\n                 remoteFS.getWorkingDirectory());\n         remoteFS.mkdirs(qualified, new FsPermission(TLDIR_PERMISSIONS));\n         remoteFS.setPermission(qualified, new FsPermission(TLDIR_PERMISSIONS));\n \n         UserGroupInformation loginUser \u003d UserGroupInformation.getLoginUser();\n         String primaryGroupName \u003d null;\n         try {\n           primaryGroupName \u003d loginUser.getPrimaryGroupName();\n         } catch (IOException e) {\n           LOG.warn(\"No primary group found. The remote root log directory\" +\n               \" will be created with the HDFS superuser being its group \" +\n               \"owner. JobHistoryServer may be unable to read the directory.\");\n         }\n         // set owner on the remote directory only if the primary group exists\n         if (primaryGroupName !\u003d null) {\n           remoteFS.setOwner(qualified,\n               loginUser.getShortUserName(), primaryGroupName);\n         }\n       } catch (IOException e) {\n         throw new YarnRuntimeException(\"Failed to create remoteLogDir [\"\n-            + this.remoteRootLogDir + \"]\", e);\n+            + remoteRootLogDir + \"]\", e);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void verifyAndCreateRemoteLogDir() {\n    boolean logPermError \u003d true;\n    // Checking the existence of the TLD\n    FileSystem remoteFS \u003d null;\n    try {\n      remoteFS \u003d getFileSystem(conf);\n    } catch (IOException e) {\n      throw new YarnRuntimeException(\n          \"Unable to get Remote FileSystem instance\", e);\n    }\n    boolean remoteExists \u003d true;\n    Path remoteRootLogDir \u003d getRemoteRootLogDir();\n    try {\n      FsPermission perms \u003d\n          remoteFS.getFileStatus(remoteRootLogDir).getPermission();\n      if (!perms.equals(TLDIR_PERMISSIONS) \u0026\u0026 logPermError) {\n        LOG.warn(\"Remote Root Log Dir [\" + remoteRootLogDir\n            + \"] already exist, but with incorrect permissions. \"\n            + \"Expected: [\" + TLDIR_PERMISSIONS + \"], Found: [\" + perms\n            + \"].\" + \" The cluster may have problems with multiple users.\");\n        logPermError \u003d false;\n      } else {\n        logPermError \u003d true;\n      }\n    } catch (FileNotFoundException e) {\n      remoteExists \u003d false;\n    } catch (IOException e) {\n      throw new YarnRuntimeException(\n          \"Failed to check permissions for dir [\"\n              + remoteRootLogDir + \"]\", e);\n    }\n    if (!remoteExists) {\n      LOG.warn(\"Remote Root Log Dir [\" + remoteRootLogDir\n          + \"] does not exist. Attempting to create it.\");\n      try {\n        Path qualified \u003d\n            remoteRootLogDir.makeQualified(remoteFS.getUri(),\n                remoteFS.getWorkingDirectory());\n        remoteFS.mkdirs(qualified, new FsPermission(TLDIR_PERMISSIONS));\n        remoteFS.setPermission(qualified, new FsPermission(TLDIR_PERMISSIONS));\n\n        UserGroupInformation loginUser \u003d UserGroupInformation.getLoginUser();\n        String primaryGroupName \u003d null;\n        try {\n          primaryGroupName \u003d loginUser.getPrimaryGroupName();\n        } catch (IOException e) {\n          LOG.warn(\"No primary group found. The remote root log directory\" +\n              \" will be created with the HDFS superuser being its group \" +\n              \"owner. JobHistoryServer may be unable to read the directory.\");\n        }\n        // set owner on the remote directory only if the primary group exists\n        if (primaryGroupName !\u003d null) {\n          remoteFS.setOwner(qualified,\n              loginUser.getShortUserName(), primaryGroupName);\n        }\n      } catch (IOException e) {\n        throw new YarnRuntimeException(\"Failed to create remoteLogDir [\"\n            + remoteRootLogDir + \"]\", e);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/filecontroller/LogAggregationFileController.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration]",
            "newValue": "[]"
          }
        }
      ]
    },
    "76893a41003d57d94eb1a5f486010815266046af": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5001. Aggregated Logs root directory is created with wrong group if nonexistent. Contributed by Haibo Chen\n",
      "commitDate": "01/11/16 1:23 PM",
      "commitName": "76893a41003d57d94eb1a5f486010815266046af",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "25/05/16 10:25 AM",
      "commitNameOld": "e07519b8dbb96d73c48e910a4de12563c5c2f8aa",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 160.12,
      "commitsBetweenForRepo": 1238,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,58 @@\n   void verifyAndCreateRemoteLogDir(Configuration conf) {\n     // Checking the existence of the TLD\n     FileSystem remoteFS \u003d null;\n     try {\n       remoteFS \u003d getFileSystem(conf);\n     } catch (IOException e) {\n       throw new YarnRuntimeException(\"Unable to get Remote FileSystem instance\", e);\n     }\n     boolean remoteExists \u003d true;\n     try {\n       FsPermission perms \u003d\n           remoteFS.getFileStatus(this.remoteRootLogDir).getPermission();\n       if (!perms.equals(TLDIR_PERMISSIONS) \u0026\u0026 logPermError) {\n         LOG.warn(\"Remote Root Log Dir [\" + this.remoteRootLogDir\n             + \"] already exist, but with incorrect permissions. \"\n             + \"Expected: [\" + TLDIR_PERMISSIONS + \"], Found: [\" + perms\n             + \"].\" + \" The cluster may have problems with multiple users.\");\n         logPermError \u003d false;\n       } else {\n         logPermError \u003d true;\n       }\n     } catch (FileNotFoundException e) {\n       remoteExists \u003d false;\n     } catch (IOException e) {\n       throw new YarnRuntimeException(\n           \"Failed to check permissions for dir [\"\n               + this.remoteRootLogDir + \"]\", e);\n     }\n     if (!remoteExists) {\n       LOG.warn(\"Remote Root Log Dir [\" + this.remoteRootLogDir\n           + \"] does not exist. Attempting to create it.\");\n       try {\n         Path qualified \u003d\n             this.remoteRootLogDir.makeQualified(remoteFS.getUri(),\n                 remoteFS.getWorkingDirectory());\n         remoteFS.mkdirs(qualified, new FsPermission(TLDIR_PERMISSIONS));\n         remoteFS.setPermission(qualified, new FsPermission(TLDIR_PERMISSIONS));\n+\n+        UserGroupInformation loginUser \u003d UserGroupInformation.getLoginUser();\n+        String primaryGroupName \u003d null;\n+        try {\n+          primaryGroupName \u003d loginUser.getPrimaryGroupName();\n+        } catch (IOException e) {\n+          LOG.warn(\"No primary group found. The remote root log directory\" +\n+              \" will be created with the HDFS superuser being its group \" +\n+              \"owner. JobHistoryServer may be unable to read the directory.\");\n+        }\n+        // set owner on the remote directory only if the primary group exists\n+        if (primaryGroupName !\u003d null) {\n+          remoteFS.setOwner(qualified,\n+              loginUser.getShortUserName(), primaryGroupName);\n+        }\n       } catch (IOException e) {\n         throw new YarnRuntimeException(\"Failed to create remoteLogDir [\"\n             + this.remoteRootLogDir + \"]\", e);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void verifyAndCreateRemoteLogDir(Configuration conf) {\n    // Checking the existence of the TLD\n    FileSystem remoteFS \u003d null;\n    try {\n      remoteFS \u003d getFileSystem(conf);\n    } catch (IOException e) {\n      throw new YarnRuntimeException(\"Unable to get Remote FileSystem instance\", e);\n    }\n    boolean remoteExists \u003d true;\n    try {\n      FsPermission perms \u003d\n          remoteFS.getFileStatus(this.remoteRootLogDir).getPermission();\n      if (!perms.equals(TLDIR_PERMISSIONS) \u0026\u0026 logPermError) {\n        LOG.warn(\"Remote Root Log Dir [\" + this.remoteRootLogDir\n            + \"] already exist, but with incorrect permissions. \"\n            + \"Expected: [\" + TLDIR_PERMISSIONS + \"], Found: [\" + perms\n            + \"].\" + \" The cluster may have problems with multiple users.\");\n        logPermError \u003d false;\n      } else {\n        logPermError \u003d true;\n      }\n    } catch (FileNotFoundException e) {\n      remoteExists \u003d false;\n    } catch (IOException e) {\n      throw new YarnRuntimeException(\n          \"Failed to check permissions for dir [\"\n              + this.remoteRootLogDir + \"]\", e);\n    }\n    if (!remoteExists) {\n      LOG.warn(\"Remote Root Log Dir [\" + this.remoteRootLogDir\n          + \"] does not exist. Attempting to create it.\");\n      try {\n        Path qualified \u003d\n            this.remoteRootLogDir.makeQualified(remoteFS.getUri(),\n                remoteFS.getWorkingDirectory());\n        remoteFS.mkdirs(qualified, new FsPermission(TLDIR_PERMISSIONS));\n        remoteFS.setPermission(qualified, new FsPermission(TLDIR_PERMISSIONS));\n\n        UserGroupInformation loginUser \u003d UserGroupInformation.getLoginUser();\n        String primaryGroupName \u003d null;\n        try {\n          primaryGroupName \u003d loginUser.getPrimaryGroupName();\n        } catch (IOException e) {\n          LOG.warn(\"No primary group found. The remote root log directory\" +\n              \" will be created with the HDFS superuser being its group \" +\n              \"owner. JobHistoryServer may be unable to read the directory.\");\n        }\n        // set owner on the remote directory only if the primary group exists\n        if (primaryGroupName !\u003d null) {\n          remoteFS.setOwner(qualified,\n              loginUser.getShortUserName(), primaryGroupName);\n        }\n      } catch (IOException e) {\n        throw new YarnRuntimeException(\"Failed to create remoteLogDir [\"\n            + this.remoteRootLogDir + \"]\", e);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
      "extendedDetails": {}
    },
    "6161d9ba5230f553db5f5490dce67e2afd1e29ca": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5112. Excessive log warnings for directory permission issue on NM recovery. Contributed by Jian He.\n(cherry picked from commit 867cd2f5a2e5966d6a7c5f5accb2fce78f9e7778)\n",
      "commitDate": "22/05/16 4:04 PM",
      "commitName": "6161d9ba5230f553db5f5490dce67e2afd1e29ca",
      "commitAuthor": "Junping Du",
      "commitDateOld": "16/05/16 8:40 AM",
      "commitNameOld": "81effb7dcde2b31423438d6f1b8b8204d4ca05b3",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 6.31,
      "commitsBetweenForRepo": 61,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,43 @@\n   void verifyAndCreateRemoteLogDir(Configuration conf) {\n     // Checking the existence of the TLD\n     FileSystem remoteFS \u003d null;\n     try {\n       remoteFS \u003d getFileSystem(conf);\n     } catch (IOException e) {\n       throw new YarnRuntimeException(\"Unable to get Remote FileSystem instance\", e);\n     }\n     boolean remoteExists \u003d true;\n     try {\n       FsPermission perms \u003d\n           remoteFS.getFileStatus(this.remoteRootLogDir).getPermission();\n-      if (!perms.equals(TLDIR_PERMISSIONS)) {\n+      if (!perms.equals(TLDIR_PERMISSIONS) \u0026\u0026 logPermError) {\n         LOG.warn(\"Remote Root Log Dir [\" + this.remoteRootLogDir\n             + \"] already exist, but with incorrect permissions. \"\n             + \"Expected: [\" + TLDIR_PERMISSIONS + \"], Found: [\" + perms\n             + \"].\" + \" The cluster may have problems with multiple users.\");\n+        logPermError \u003d false;\n+      } else {\n+        logPermError \u003d true;\n       }\n     } catch (FileNotFoundException e) {\n       remoteExists \u003d false;\n     } catch (IOException e) {\n       throw new YarnRuntimeException(\n           \"Failed to check permissions for dir [\"\n               + this.remoteRootLogDir + \"]\", e);\n     }\n     if (!remoteExists) {\n       LOG.warn(\"Remote Root Log Dir [\" + this.remoteRootLogDir\n           + \"] does not exist. Attempting to create it.\");\n       try {\n         Path qualified \u003d\n             this.remoteRootLogDir.makeQualified(remoteFS.getUri(),\n                 remoteFS.getWorkingDirectory());\n         remoteFS.mkdirs(qualified, new FsPermission(TLDIR_PERMISSIONS));\n         remoteFS.setPermission(qualified, new FsPermission(TLDIR_PERMISSIONS));\n       } catch (IOException e) {\n         throw new YarnRuntimeException(\"Failed to create remoteLogDir [\"\n             + this.remoteRootLogDir + \"]\", e);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void verifyAndCreateRemoteLogDir(Configuration conf) {\n    // Checking the existence of the TLD\n    FileSystem remoteFS \u003d null;\n    try {\n      remoteFS \u003d getFileSystem(conf);\n    } catch (IOException e) {\n      throw new YarnRuntimeException(\"Unable to get Remote FileSystem instance\", e);\n    }\n    boolean remoteExists \u003d true;\n    try {\n      FsPermission perms \u003d\n          remoteFS.getFileStatus(this.remoteRootLogDir).getPermission();\n      if (!perms.equals(TLDIR_PERMISSIONS) \u0026\u0026 logPermError) {\n        LOG.warn(\"Remote Root Log Dir [\" + this.remoteRootLogDir\n            + \"] already exist, but with incorrect permissions. \"\n            + \"Expected: [\" + TLDIR_PERMISSIONS + \"], Found: [\" + perms\n            + \"].\" + \" The cluster may have problems with multiple users.\");\n        logPermError \u003d false;\n      } else {\n        logPermError \u003d true;\n      }\n    } catch (FileNotFoundException e) {\n      remoteExists \u003d false;\n    } catch (IOException e) {\n      throw new YarnRuntimeException(\n          \"Failed to check permissions for dir [\"\n              + this.remoteRootLogDir + \"]\", e);\n    }\n    if (!remoteExists) {\n      LOG.warn(\"Remote Root Log Dir [\" + this.remoteRootLogDir\n          + \"] does not exist. Attempting to create it.\");\n      try {\n        Path qualified \u003d\n            this.remoteRootLogDir.makeQualified(remoteFS.getUri(),\n                remoteFS.getWorkingDirectory());\n        remoteFS.mkdirs(qualified, new FsPermission(TLDIR_PERMISSIONS));\n        remoteFS.setPermission(qualified, new FsPermission(TLDIR_PERMISSIONS));\n      } catch (IOException e) {\n        throw new YarnRuntimeException(\"Failed to create remoteLogDir [\"\n            + this.remoteRootLogDir + \"]\", e);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
      "extendedDetails": {}
    },
    "78063b3a76840ffade33667a90f9c9dbe7fc99eb": {
      "type": "Ybodychange",
      "commitMessage": "YARN-742. Log aggregation causes a lot of redundant setPermission calls. Contributed by Jason Lowe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489596 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/06/13 1:49 PM",
      "commitName": "78063b3a76840ffade33667a90f9c9dbe7fc99eb",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "03/06/13 9:05 PM",
      "commitNameOld": "a83fb61ac07c0468cbc7a38526e92683883dd932",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.7,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   void verifyAndCreateRemoteLogDir(Configuration conf) {\n     // Checking the existence of the TLD\n     FileSystem remoteFS \u003d null;\n     try {\n-      remoteFS \u003d FileSystem.get(conf);\n+      remoteFS \u003d getFileSystem(conf);\n     } catch (IOException e) {\n       throw new YarnRuntimeException(\"Unable to get Remote FileSystem instance\", e);\n     }\n     boolean remoteExists \u003d true;\n     try {\n       FsPermission perms \u003d\n           remoteFS.getFileStatus(this.remoteRootLogDir).getPermission();\n       if (!perms.equals(TLDIR_PERMISSIONS)) {\n         LOG.warn(\"Remote Root Log Dir [\" + this.remoteRootLogDir\n             + \"] already exist, but with incorrect permissions. \"\n             + \"Expected: [\" + TLDIR_PERMISSIONS + \"], Found: [\" + perms\n             + \"].\" + \" The cluster may have problems with multiple users.\");\n       }\n     } catch (FileNotFoundException e) {\n       remoteExists \u003d false;\n     } catch (IOException e) {\n       throw new YarnRuntimeException(\n           \"Failed to check permissions for dir [\"\n               + this.remoteRootLogDir + \"]\", e);\n     }\n     if (!remoteExists) {\n       LOG.warn(\"Remote Root Log Dir [\" + this.remoteRootLogDir\n           + \"] does not exist. Attempting to create it.\");\n       try {\n         Path qualified \u003d\n             this.remoteRootLogDir.makeQualified(remoteFS.getUri(),\n                 remoteFS.getWorkingDirectory());\n         remoteFS.mkdirs(qualified, new FsPermission(TLDIR_PERMISSIONS));\n         remoteFS.setPermission(qualified, new FsPermission(TLDIR_PERMISSIONS));\n       } catch (IOException e) {\n         throw new YarnRuntimeException(\"Failed to create remoteLogDir [\"\n             + this.remoteRootLogDir + \"]\", e);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void verifyAndCreateRemoteLogDir(Configuration conf) {\n    // Checking the existence of the TLD\n    FileSystem remoteFS \u003d null;\n    try {\n      remoteFS \u003d getFileSystem(conf);\n    } catch (IOException e) {\n      throw new YarnRuntimeException(\"Unable to get Remote FileSystem instance\", e);\n    }\n    boolean remoteExists \u003d true;\n    try {\n      FsPermission perms \u003d\n          remoteFS.getFileStatus(this.remoteRootLogDir).getPermission();\n      if (!perms.equals(TLDIR_PERMISSIONS)) {\n        LOG.warn(\"Remote Root Log Dir [\" + this.remoteRootLogDir\n            + \"] already exist, but with incorrect permissions. \"\n            + \"Expected: [\" + TLDIR_PERMISSIONS + \"], Found: [\" + perms\n            + \"].\" + \" The cluster may have problems with multiple users.\");\n      }\n    } catch (FileNotFoundException e) {\n      remoteExists \u003d false;\n    } catch (IOException e) {\n      throw new YarnRuntimeException(\n          \"Failed to check permissions for dir [\"\n              + this.remoteRootLogDir + \"]\", e);\n    }\n    if (!remoteExists) {\n      LOG.warn(\"Remote Root Log Dir [\" + this.remoteRootLogDir\n          + \"] does not exist. Attempting to create it.\");\n      try {\n        Path qualified \u003d\n            this.remoteRootLogDir.makeQualified(remoteFS.getUri(),\n                remoteFS.getWorkingDirectory());\n        remoteFS.mkdirs(qualified, new FsPermission(TLDIR_PERMISSIONS));\n        remoteFS.setPermission(qualified, new FsPermission(TLDIR_PERMISSIONS));\n      } catch (IOException e) {\n        throw new YarnRuntimeException(\"Failed to create remoteLogDir [\"\n            + this.remoteRootLogDir + \"]\", e);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
      "extendedDetails": {}
    },
    "a83fb61ac07c0468cbc7a38526e92683883dd932": {
      "type": "Ybodychange",
      "commitMessage": "YARN-635. Renamed YarnRemoteException to YarnException. Contributed by Siddharth Seth.\nMAPREDUCE-5301. Updated MR code to work with YARN-635 changes of renaming YarnRemoteException to YarnException. Contributed by Siddharth Seth\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489283 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/06/13 9:05 PM",
      "commitName": "a83fb61ac07c0468cbc7a38526e92683883dd932",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "29/05/13 7:25 AM",
      "commitNameOld": "31c96829c767a093d6de8bdc30e06089eeba860b",
      "commitAuthorOld": "Jason Darrell Lowe",
      "daysBetweenCommits": 5.57,
      "commitsBetweenForRepo": 64,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   void verifyAndCreateRemoteLogDir(Configuration conf) {\n     // Checking the existence of the TLD\n     FileSystem remoteFS \u003d null;\n     try {\n       remoteFS \u003d FileSystem.get(conf);\n     } catch (IOException e) {\n-      throw new YarnException(\"Unable to get Remote FileSystem instance\", e);\n+      throw new YarnRuntimeException(\"Unable to get Remote FileSystem instance\", e);\n     }\n     boolean remoteExists \u003d true;\n     try {\n       FsPermission perms \u003d\n           remoteFS.getFileStatus(this.remoteRootLogDir).getPermission();\n       if (!perms.equals(TLDIR_PERMISSIONS)) {\n         LOG.warn(\"Remote Root Log Dir [\" + this.remoteRootLogDir\n             + \"] already exist, but with incorrect permissions. \"\n             + \"Expected: [\" + TLDIR_PERMISSIONS + \"], Found: [\" + perms\n             + \"].\" + \" The cluster may have problems with multiple users.\");\n       }\n     } catch (FileNotFoundException e) {\n       remoteExists \u003d false;\n     } catch (IOException e) {\n-      throw new YarnException(\n+      throw new YarnRuntimeException(\n           \"Failed to check permissions for dir [\"\n               + this.remoteRootLogDir + \"]\", e);\n     }\n     if (!remoteExists) {\n       LOG.warn(\"Remote Root Log Dir [\" + this.remoteRootLogDir\n           + \"] does not exist. Attempting to create it.\");\n       try {\n         Path qualified \u003d\n             this.remoteRootLogDir.makeQualified(remoteFS.getUri(),\n                 remoteFS.getWorkingDirectory());\n         remoteFS.mkdirs(qualified, new FsPermission(TLDIR_PERMISSIONS));\n         remoteFS.setPermission(qualified, new FsPermission(TLDIR_PERMISSIONS));\n       } catch (IOException e) {\n-        throw new YarnException(\"Failed to create remoteLogDir [\"\n+        throw new YarnRuntimeException(\"Failed to create remoteLogDir [\"\n             + this.remoteRootLogDir + \"]\", e);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void verifyAndCreateRemoteLogDir(Configuration conf) {\n    // Checking the existence of the TLD\n    FileSystem remoteFS \u003d null;\n    try {\n      remoteFS \u003d FileSystem.get(conf);\n    } catch (IOException e) {\n      throw new YarnRuntimeException(\"Unable to get Remote FileSystem instance\", e);\n    }\n    boolean remoteExists \u003d true;\n    try {\n      FsPermission perms \u003d\n          remoteFS.getFileStatus(this.remoteRootLogDir).getPermission();\n      if (!perms.equals(TLDIR_PERMISSIONS)) {\n        LOG.warn(\"Remote Root Log Dir [\" + this.remoteRootLogDir\n            + \"] already exist, but with incorrect permissions. \"\n            + \"Expected: [\" + TLDIR_PERMISSIONS + \"], Found: [\" + perms\n            + \"].\" + \" The cluster may have problems with multiple users.\");\n      }\n    } catch (FileNotFoundException e) {\n      remoteExists \u003d false;\n    } catch (IOException e) {\n      throw new YarnRuntimeException(\n          \"Failed to check permissions for dir [\"\n              + this.remoteRootLogDir + \"]\", e);\n    }\n    if (!remoteExists) {\n      LOG.warn(\"Remote Root Log Dir [\" + this.remoteRootLogDir\n          + \"] does not exist. Attempting to create it.\");\n      try {\n        Path qualified \u003d\n            this.remoteRootLogDir.makeQualified(remoteFS.getUri(),\n                remoteFS.getWorkingDirectory());\n        remoteFS.mkdirs(qualified, new FsPermission(TLDIR_PERMISSIONS));\n        remoteFS.setPermission(qualified, new FsPermission(TLDIR_PERMISSIONS));\n      } catch (IOException e) {\n        throw new YarnRuntimeException(\"Failed to create remoteLogDir [\"\n            + this.remoteRootLogDir + \"]\", e);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
      "extendedDetails": {}
    },
    "31c96829c767a093d6de8bdc30e06089eeba860b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-512. Log aggregation root directory check is more expensive than it needs to be. Contributed by Maysam Yabandeh\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1487498 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/05/13 7:25 AM",
      "commitName": "31c96829c767a093d6de8bdc30e06089eeba860b",
      "commitAuthor": "Jason Darrell Lowe",
      "commitDateOld": "27/03/13 4:14 PM",
      "commitNameOld": "967b62f5d23e5e3b3573caab5cf03d089e5bcc11",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 62.63,
      "commitsBetweenForRepo": 352,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,40 @@\n   void verifyAndCreateRemoteLogDir(Configuration conf) {\n-    // Checking the existance of the TLD\n+    // Checking the existence of the TLD\n     FileSystem remoteFS \u003d null;\n     try {\n       remoteFS \u003d FileSystem.get(conf);\n     } catch (IOException e) {\n       throw new YarnException(\"Unable to get Remote FileSystem instance\", e);\n     }\n-    boolean remoteExists \u003d false;\n+    boolean remoteExists \u003d true;\n     try {\n-      remoteExists \u003d remoteFS.exists(this.remoteRootLogDir);\n-    } catch (IOException e) {\n-      throw new YarnException(\"Failed to check for existence of remoteLogDir [\"\n-          + this.remoteRootLogDir + \"]\", e);\n-    }\n-    if (remoteExists) {\n-      try {\n-        FsPermission perms \u003d\n-            remoteFS.getFileStatus(this.remoteRootLogDir).getPermission();\n-        if (!perms.equals(TLDIR_PERMISSIONS)) {\n-          LOG.warn(\"Remote Root Log Dir [\" + this.remoteRootLogDir\n-              + \"] already exist, but with incorrect permissions. \"\n-              + \"Expected: [\" + TLDIR_PERMISSIONS + \"], Found: [\" + perms\n-              + \"].\" + \" The cluster may have problems with multiple users.\");\n-        }\n-      } catch (IOException e) {\n-        throw new YarnException(\n-            \"Failed to check permissions for dir [\"\n-                + this.remoteRootLogDir + \"]\", e);\n+      FsPermission perms \u003d\n+          remoteFS.getFileStatus(this.remoteRootLogDir).getPermission();\n+      if (!perms.equals(TLDIR_PERMISSIONS)) {\n+        LOG.warn(\"Remote Root Log Dir [\" + this.remoteRootLogDir\n+            + \"] already exist, but with incorrect permissions. \"\n+            + \"Expected: [\" + TLDIR_PERMISSIONS + \"], Found: [\" + perms\n+            + \"].\" + \" The cluster may have problems with multiple users.\");\n       }\n-    } else {\n+    } catch (FileNotFoundException e) {\n+      remoteExists \u003d false;\n+    } catch (IOException e) {\n+      throw new YarnException(\n+          \"Failed to check permissions for dir [\"\n+              + this.remoteRootLogDir + \"]\", e);\n+    }\n+    if (!remoteExists) {\n       LOG.warn(\"Remote Root Log Dir [\" + this.remoteRootLogDir\n           + \"] does not exist. Attempting to create it.\");\n       try {\n         Path qualified \u003d\n             this.remoteRootLogDir.makeQualified(remoteFS.getUri(),\n                 remoteFS.getWorkingDirectory());\n         remoteFS.mkdirs(qualified, new FsPermission(TLDIR_PERMISSIONS));\n         remoteFS.setPermission(qualified, new FsPermission(TLDIR_PERMISSIONS));\n       } catch (IOException e) {\n         throw new YarnException(\"Failed to create remoteLogDir [\"\n             + this.remoteRootLogDir + \"]\", e);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void verifyAndCreateRemoteLogDir(Configuration conf) {\n    // Checking the existence of the TLD\n    FileSystem remoteFS \u003d null;\n    try {\n      remoteFS \u003d FileSystem.get(conf);\n    } catch (IOException e) {\n      throw new YarnException(\"Unable to get Remote FileSystem instance\", e);\n    }\n    boolean remoteExists \u003d true;\n    try {\n      FsPermission perms \u003d\n          remoteFS.getFileStatus(this.remoteRootLogDir).getPermission();\n      if (!perms.equals(TLDIR_PERMISSIONS)) {\n        LOG.warn(\"Remote Root Log Dir [\" + this.remoteRootLogDir\n            + \"] already exist, but with incorrect permissions. \"\n            + \"Expected: [\" + TLDIR_PERMISSIONS + \"], Found: [\" + perms\n            + \"].\" + \" The cluster may have problems with multiple users.\");\n      }\n    } catch (FileNotFoundException e) {\n      remoteExists \u003d false;\n    } catch (IOException e) {\n      throw new YarnException(\n          \"Failed to check permissions for dir [\"\n              + this.remoteRootLogDir + \"]\", e);\n    }\n    if (!remoteExists) {\n      LOG.warn(\"Remote Root Log Dir [\" + this.remoteRootLogDir\n          + \"] does not exist. Attempting to create it.\");\n      try {\n        Path qualified \u003d\n            this.remoteRootLogDir.makeQualified(remoteFS.getUri(),\n                remoteFS.getWorkingDirectory());\n        remoteFS.mkdirs(qualified, new FsPermission(TLDIR_PERMISSIONS));\n        remoteFS.setPermission(qualified, new FsPermission(TLDIR_PERMISSIONS));\n      } catch (IOException e) {\n        throw new YarnException(\"Failed to create remoteLogDir [\"\n            + this.remoteRootLogDir + \"]\", e);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
      "extendedDetails": {}
    },
    "967b62f5d23e5e3b3573caab5cf03d089e5bcc11": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-24. Nodemanager fails to start if log aggregation enabled and namenode unavailable. (sandyr via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1461891 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/03/13 4:14 PM",
      "commitName": "967b62f5d23e5e3b3573caab5cf03d089e5bcc11",
      "commitAuthor": "Alejandro Abdelnur",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-24. Nodemanager fails to start if log aggregation enabled and namenode unavailable. (sandyr via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1461891 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "27/03/13 4:14 PM",
          "commitName": "967b62f5d23e5e3b3573caab5cf03d089e5bcc11",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "04/03/13 1:47 PM",
          "commitNameOld": "5889f54ad1d144add94a0295e4a8ddb3ccd282df",
          "commitAuthorOld": "Jason Darrell Lowe",
          "daysBetweenCommits": 23.06,
          "commitsBetweenForRepo": 145,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,45 @@\n-  private void verifyAndCreateRemoteLogDir(Configuration conf) {\n+  void verifyAndCreateRemoteLogDir(Configuration conf) {\n     // Checking the existance of the TLD\n     FileSystem remoteFS \u003d null;\n     try {\n       remoteFS \u003d FileSystem.get(conf);\n     } catch (IOException e) {\n       throw new YarnException(\"Unable to get Remote FileSystem instance\", e);\n     }\n     boolean remoteExists \u003d false;\n     try {\n       remoteExists \u003d remoteFS.exists(this.remoteRootLogDir);\n     } catch (IOException e) {\n       throw new YarnException(\"Failed to check for existence of remoteLogDir [\"\n-          + this.remoteRootLogDir + \"]\");\n+          + this.remoteRootLogDir + \"]\", e);\n     }\n     if (remoteExists) {\n       try {\n         FsPermission perms \u003d\n             remoteFS.getFileStatus(this.remoteRootLogDir).getPermission();\n         if (!perms.equals(TLDIR_PERMISSIONS)) {\n           LOG.warn(\"Remote Root Log Dir [\" + this.remoteRootLogDir\n               + \"] already exist, but with incorrect permissions. \"\n               + \"Expected: [\" + TLDIR_PERMISSIONS + \"], Found: [\" + perms\n               + \"].\" + \" The cluster may have problems with multiple users.\");\n         }\n       } catch (IOException e) {\n         throw new YarnException(\n-            \"Failed while attempting to check permissions for dir [\"\n-                + this.remoteRootLogDir + \"]\");\n+            \"Failed to check permissions for dir [\"\n+                + this.remoteRootLogDir + \"]\", e);\n       }\n     } else {\n       LOG.warn(\"Remote Root Log Dir [\" + this.remoteRootLogDir\n           + \"] does not exist. Attempting to create it.\");\n       try {\n         Path qualified \u003d\n             this.remoteRootLogDir.makeQualified(remoteFS.getUri(),\n                 remoteFS.getWorkingDirectory());\n         remoteFS.mkdirs(qualified, new FsPermission(TLDIR_PERMISSIONS));\n         remoteFS.setPermission(qualified, new FsPermission(TLDIR_PERMISSIONS));\n       } catch (IOException e) {\n         throw new YarnException(\"Failed to create remoteLogDir [\"\n             + this.remoteRootLogDir + \"]\", e);\n       }\n     }\n-\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void verifyAndCreateRemoteLogDir(Configuration conf) {\n    // Checking the existance of the TLD\n    FileSystem remoteFS \u003d null;\n    try {\n      remoteFS \u003d FileSystem.get(conf);\n    } catch (IOException e) {\n      throw new YarnException(\"Unable to get Remote FileSystem instance\", e);\n    }\n    boolean remoteExists \u003d false;\n    try {\n      remoteExists \u003d remoteFS.exists(this.remoteRootLogDir);\n    } catch (IOException e) {\n      throw new YarnException(\"Failed to check for existence of remoteLogDir [\"\n          + this.remoteRootLogDir + \"]\", e);\n    }\n    if (remoteExists) {\n      try {\n        FsPermission perms \u003d\n            remoteFS.getFileStatus(this.remoteRootLogDir).getPermission();\n        if (!perms.equals(TLDIR_PERMISSIONS)) {\n          LOG.warn(\"Remote Root Log Dir [\" + this.remoteRootLogDir\n              + \"] already exist, but with incorrect permissions. \"\n              + \"Expected: [\" + TLDIR_PERMISSIONS + \"], Found: [\" + perms\n              + \"].\" + \" The cluster may have problems with multiple users.\");\n        }\n      } catch (IOException e) {\n        throw new YarnException(\n            \"Failed to check permissions for dir [\"\n                + this.remoteRootLogDir + \"]\", e);\n      }\n    } else {\n      LOG.warn(\"Remote Root Log Dir [\" + this.remoteRootLogDir\n          + \"] does not exist. Attempting to create it.\");\n      try {\n        Path qualified \u003d\n            this.remoteRootLogDir.makeQualified(remoteFS.getUri(),\n                remoteFS.getWorkingDirectory());\n        remoteFS.mkdirs(qualified, new FsPermission(TLDIR_PERMISSIONS));\n        remoteFS.setPermission(qualified, new FsPermission(TLDIR_PERMISSIONS));\n      } catch (IOException e) {\n        throw new YarnException(\"Failed to create remoteLogDir [\"\n            + this.remoteRootLogDir + \"]\", e);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-24. Nodemanager fails to start if log aggregation enabled and namenode unavailable. (sandyr via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1461891 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "27/03/13 4:14 PM",
          "commitName": "967b62f5d23e5e3b3573caab5cf03d089e5bcc11",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "04/03/13 1:47 PM",
          "commitNameOld": "5889f54ad1d144add94a0295e4a8ddb3ccd282df",
          "commitAuthorOld": "Jason Darrell Lowe",
          "daysBetweenCommits": 23.06,
          "commitsBetweenForRepo": 145,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,45 @@\n-  private void verifyAndCreateRemoteLogDir(Configuration conf) {\n+  void verifyAndCreateRemoteLogDir(Configuration conf) {\n     // Checking the existance of the TLD\n     FileSystem remoteFS \u003d null;\n     try {\n       remoteFS \u003d FileSystem.get(conf);\n     } catch (IOException e) {\n       throw new YarnException(\"Unable to get Remote FileSystem instance\", e);\n     }\n     boolean remoteExists \u003d false;\n     try {\n       remoteExists \u003d remoteFS.exists(this.remoteRootLogDir);\n     } catch (IOException e) {\n       throw new YarnException(\"Failed to check for existence of remoteLogDir [\"\n-          + this.remoteRootLogDir + \"]\");\n+          + this.remoteRootLogDir + \"]\", e);\n     }\n     if (remoteExists) {\n       try {\n         FsPermission perms \u003d\n             remoteFS.getFileStatus(this.remoteRootLogDir).getPermission();\n         if (!perms.equals(TLDIR_PERMISSIONS)) {\n           LOG.warn(\"Remote Root Log Dir [\" + this.remoteRootLogDir\n               + \"] already exist, but with incorrect permissions. \"\n               + \"Expected: [\" + TLDIR_PERMISSIONS + \"], Found: [\" + perms\n               + \"].\" + \" The cluster may have problems with multiple users.\");\n         }\n       } catch (IOException e) {\n         throw new YarnException(\n-            \"Failed while attempting to check permissions for dir [\"\n-                + this.remoteRootLogDir + \"]\");\n+            \"Failed to check permissions for dir [\"\n+                + this.remoteRootLogDir + \"]\", e);\n       }\n     } else {\n       LOG.warn(\"Remote Root Log Dir [\" + this.remoteRootLogDir\n           + \"] does not exist. Attempting to create it.\");\n       try {\n         Path qualified \u003d\n             this.remoteRootLogDir.makeQualified(remoteFS.getUri(),\n                 remoteFS.getWorkingDirectory());\n         remoteFS.mkdirs(qualified, new FsPermission(TLDIR_PERMISSIONS));\n         remoteFS.setPermission(qualified, new FsPermission(TLDIR_PERMISSIONS));\n       } catch (IOException e) {\n         throw new YarnException(\"Failed to create remoteLogDir [\"\n             + this.remoteRootLogDir + \"]\", e);\n       }\n     }\n-\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void verifyAndCreateRemoteLogDir(Configuration conf) {\n    // Checking the existance of the TLD\n    FileSystem remoteFS \u003d null;\n    try {\n      remoteFS \u003d FileSystem.get(conf);\n    } catch (IOException e) {\n      throw new YarnException(\"Unable to get Remote FileSystem instance\", e);\n    }\n    boolean remoteExists \u003d false;\n    try {\n      remoteExists \u003d remoteFS.exists(this.remoteRootLogDir);\n    } catch (IOException e) {\n      throw new YarnException(\"Failed to check for existence of remoteLogDir [\"\n          + this.remoteRootLogDir + \"]\", e);\n    }\n    if (remoteExists) {\n      try {\n        FsPermission perms \u003d\n            remoteFS.getFileStatus(this.remoteRootLogDir).getPermission();\n        if (!perms.equals(TLDIR_PERMISSIONS)) {\n          LOG.warn(\"Remote Root Log Dir [\" + this.remoteRootLogDir\n              + \"] already exist, but with incorrect permissions. \"\n              + \"Expected: [\" + TLDIR_PERMISSIONS + \"], Found: [\" + perms\n              + \"].\" + \" The cluster may have problems with multiple users.\");\n        }\n      } catch (IOException e) {\n        throw new YarnException(\n            \"Failed to check permissions for dir [\"\n                + this.remoteRootLogDir + \"]\", e);\n      }\n    } else {\n      LOG.warn(\"Remote Root Log Dir [\" + this.remoteRootLogDir\n          + \"] does not exist. Attempting to create it.\");\n      try {\n        Path qualified \u003d\n            this.remoteRootLogDir.makeQualified(remoteFS.getUri(),\n                remoteFS.getWorkingDirectory());\n        remoteFS.mkdirs(qualified, new FsPermission(TLDIR_PERMISSIONS));\n        remoteFS.setPermission(qualified, new FsPermission(TLDIR_PERMISSIONS));\n      } catch (IOException e) {\n        throw new YarnException(\"Failed to create remoteLogDir [\"\n            + this.remoteRootLogDir + \"]\", e);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
          "extendedDetails": {}
        }
      ]
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void verifyAndCreateRemoteLogDir(Configuration conf) {\n    // Checking the existance of the TLD\n    FileSystem remoteFS \u003d null;\n    try {\n      remoteFS \u003d FileSystem.get(conf);\n    } catch (IOException e) {\n      throw new YarnException(\"Unable to get Remote FileSystem instance\", e);\n    }\n    boolean remoteExists \u003d false;\n    try {\n      remoteExists \u003d remoteFS.exists(this.remoteRootLogDir);\n    } catch (IOException e) {\n      throw new YarnException(\"Failed to check for existence of remoteLogDir [\"\n          + this.remoteRootLogDir + \"]\");\n    }\n    if (remoteExists) {\n      try {\n        FsPermission perms \u003d\n            remoteFS.getFileStatus(this.remoteRootLogDir).getPermission();\n        if (!perms.equals(TLDIR_PERMISSIONS)) {\n          LOG.warn(\"Remote Root Log Dir [\" + this.remoteRootLogDir\n              + \"] already exist, but with incorrect permissions. \"\n              + \"Expected: [\" + TLDIR_PERMISSIONS + \"], Found: [\" + perms\n              + \"].\" + \" The cluster may have problems with multiple users.\");\n        }\n      } catch (IOException e) {\n        throw new YarnException(\n            \"Failed while attempting to check permissions for dir [\"\n                + this.remoteRootLogDir + \"]\");\n      }\n    } else {\n      LOG.warn(\"Remote Root Log Dir [\" + this.remoteRootLogDir\n          + \"] does not exist. Attempting to create it.\");\n      try {\n        Path qualified \u003d\n            this.remoteRootLogDir.makeQualified(remoteFS.getUri(),\n                remoteFS.getWorkingDirectory());\n        remoteFS.mkdirs(qualified, new FsPermission(TLDIR_PERMISSIONS));\n        remoteFS.setPermission(qualified, new FsPermission(TLDIR_PERMISSIONS));\n      } catch (IOException e) {\n        throw new YarnException(\"Failed to create remoteLogDir [\"\n            + this.remoteRootLogDir + \"]\", e);\n      }\n    }\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java"
      }
    },
    "1cf60106758c482991f08caa136446885d5f8f27": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4302. NM goes down if error encountered during log aggregation (Daryn Sharp via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1345362 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/06/12 2:54 PM",
      "commitName": "1cf60106758c482991f08caa136446885d5f8f27",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "06/03/12 3:44 PM",
      "commitNameOld": "25cceb65ceb3aafbb078d4a112169ab5dca7f200",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 86.92,
      "commitsBetweenForRepo": 585,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   private void verifyAndCreateRemoteLogDir(Configuration conf) {\n     // Checking the existance of the TLD\n     FileSystem remoteFS \u003d null;\n     try {\n       remoteFS \u003d FileSystem.get(conf);\n     } catch (IOException e) {\n-      throw new YarnException(\"Unable to get Remote FileSystem isntance\", e);\n+      throw new YarnException(\"Unable to get Remote FileSystem instance\", e);\n     }\n     boolean remoteExists \u003d false;\n     try {\n       remoteExists \u003d remoteFS.exists(this.remoteRootLogDir);\n     } catch (IOException e) {\n-      throw new YarnException(\"Failed to check for existance of remoteLogDir [\"\n+      throw new YarnException(\"Failed to check for existence of remoteLogDir [\"\n           + this.remoteRootLogDir + \"]\");\n     }\n     if (remoteExists) {\n       try {\n         FsPermission perms \u003d\n             remoteFS.getFileStatus(this.remoteRootLogDir).getPermission();\n         if (!perms.equals(TLDIR_PERMISSIONS)) {\n           LOG.warn(\"Remote Root Log Dir [\" + this.remoteRootLogDir\n               + \"] already exist, but with incorrect permissions. \"\n               + \"Expected: [\" + TLDIR_PERMISSIONS + \"], Found: [\" + perms\n               + \"].\" + \" The cluster may have problems with multiple users.\");\n         }\n       } catch (IOException e) {\n         throw new YarnException(\n             \"Failed while attempting to check permissions for dir [\"\n                 + this.remoteRootLogDir + \"]\");\n       }\n     } else {\n       LOG.warn(\"Remote Root Log Dir [\" + this.remoteRootLogDir\n           + \"] does not exist. Attempting to create it.\");\n       try {\n         Path qualified \u003d\n             this.remoteRootLogDir.makeQualified(remoteFS.getUri(),\n                 remoteFS.getWorkingDirectory());\n         remoteFS.mkdirs(qualified, new FsPermission(TLDIR_PERMISSIONS));\n         remoteFS.setPermission(qualified, new FsPermission(TLDIR_PERMISSIONS));\n       } catch (IOException e) {\n         throw new YarnException(\"Failed to create remoteLogDir [\"\n             + this.remoteRootLogDir + \"]\", e);\n       }\n     }\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void verifyAndCreateRemoteLogDir(Configuration conf) {\n    // Checking the existance of the TLD\n    FileSystem remoteFS \u003d null;\n    try {\n      remoteFS \u003d FileSystem.get(conf);\n    } catch (IOException e) {\n      throw new YarnException(\"Unable to get Remote FileSystem instance\", e);\n    }\n    boolean remoteExists \u003d false;\n    try {\n      remoteExists \u003d remoteFS.exists(this.remoteRootLogDir);\n    } catch (IOException e) {\n      throw new YarnException(\"Failed to check for existence of remoteLogDir [\"\n          + this.remoteRootLogDir + \"]\");\n    }\n    if (remoteExists) {\n      try {\n        FsPermission perms \u003d\n            remoteFS.getFileStatus(this.remoteRootLogDir).getPermission();\n        if (!perms.equals(TLDIR_PERMISSIONS)) {\n          LOG.warn(\"Remote Root Log Dir [\" + this.remoteRootLogDir\n              + \"] already exist, but with incorrect permissions. \"\n              + \"Expected: [\" + TLDIR_PERMISSIONS + \"], Found: [\" + perms\n              + \"].\" + \" The cluster may have problems with multiple users.\");\n        }\n      } catch (IOException e) {\n        throw new YarnException(\n            \"Failed while attempting to check permissions for dir [\"\n                + this.remoteRootLogDir + \"]\");\n      }\n    } else {\n      LOG.warn(\"Remote Root Log Dir [\" + this.remoteRootLogDir\n          + \"] does not exist. Attempting to create it.\");\n      try {\n        Path qualified \u003d\n            this.remoteRootLogDir.makeQualified(remoteFS.getUri(),\n                remoteFS.getWorkingDirectory());\n        remoteFS.mkdirs(qualified, new FsPermission(TLDIR_PERMISSIONS));\n        remoteFS.setPermission(qualified, new FsPermission(TLDIR_PERMISSIONS));\n      } catch (IOException e) {\n        throw new YarnException(\"Failed to create remoteLogDir [\"\n            + this.remoteRootLogDir + \"]\", e);\n      }\n    }\n\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
      "extendedDetails": {}
    },
    "670fa24b48acb407c22fbfdde87ae3123dcbf449": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-2989. Modified JobHistory to link to task and AM logs from the JobHistoryServer. Contributed by Siddharth Seth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1190174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/10/11 11:45 PM",
      "commitName": "670fa24b48acb407c22fbfdde87ae3123dcbf449",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,46 @@\n+  private void verifyAndCreateRemoteLogDir(Configuration conf) {\n+    // Checking the existance of the TLD\n+    FileSystem remoteFS \u003d null;\n+    try {\n+      remoteFS \u003d FileSystem.get(conf);\n+    } catch (IOException e) {\n+      throw new YarnException(\"Unable to get Remote FileSystem isntance\", e);\n+    }\n+    boolean remoteExists \u003d false;\n+    try {\n+      remoteExists \u003d remoteFS.exists(this.remoteRootLogDir);\n+    } catch (IOException e) {\n+      throw new YarnException(\"Failed to check for existance of remoteLogDir [\"\n+          + this.remoteRootLogDir + \"]\");\n+    }\n+    if (remoteExists) {\n+      try {\n+        FsPermission perms \u003d\n+            remoteFS.getFileStatus(this.remoteRootLogDir).getPermission();\n+        if (!perms.equals(TLDIR_PERMISSIONS)) {\n+          LOG.warn(\"Remote Root Log Dir [\" + this.remoteRootLogDir\n+              + \"] already exist, but with incorrect permissions. \"\n+              + \"Expected: [\" + TLDIR_PERMISSIONS + \"], Found: [\" + perms\n+              + \"].\" + \" The cluster may have problems with multiple users.\");\n+        }\n+      } catch (IOException e) {\n+        throw new YarnException(\n+            \"Failed while attempting to check permissions for dir [\"\n+                + this.remoteRootLogDir + \"]\");\n+      }\n+    } else {\n+      LOG.warn(\"Remote Root Log Dir [\" + this.remoteRootLogDir\n+          + \"] does not exist. Attempting to create it.\");\n+      try {\n+        Path qualified \u003d\n+            this.remoteRootLogDir.makeQualified(remoteFS.getUri(),\n+                remoteFS.getWorkingDirectory());\n+        remoteFS.mkdirs(qualified, new FsPermission(TLDIR_PERMISSIONS));\n+        remoteFS.setPermission(qualified, new FsPermission(TLDIR_PERMISSIONS));\n+      } catch (IOException e) {\n+        throw new YarnException(\"Failed to create remoteLogDir [\"\n+            + this.remoteRootLogDir + \"]\", e);\n+      }\n+    }\n+\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void verifyAndCreateRemoteLogDir(Configuration conf) {\n    // Checking the existance of the TLD\n    FileSystem remoteFS \u003d null;\n    try {\n      remoteFS \u003d FileSystem.get(conf);\n    } catch (IOException e) {\n      throw new YarnException(\"Unable to get Remote FileSystem isntance\", e);\n    }\n    boolean remoteExists \u003d false;\n    try {\n      remoteExists \u003d remoteFS.exists(this.remoteRootLogDir);\n    } catch (IOException e) {\n      throw new YarnException(\"Failed to check for existance of remoteLogDir [\"\n          + this.remoteRootLogDir + \"]\");\n    }\n    if (remoteExists) {\n      try {\n        FsPermission perms \u003d\n            remoteFS.getFileStatus(this.remoteRootLogDir).getPermission();\n        if (!perms.equals(TLDIR_PERMISSIONS)) {\n          LOG.warn(\"Remote Root Log Dir [\" + this.remoteRootLogDir\n              + \"] already exist, but with incorrect permissions. \"\n              + \"Expected: [\" + TLDIR_PERMISSIONS + \"], Found: [\" + perms\n              + \"].\" + \" The cluster may have problems with multiple users.\");\n        }\n      } catch (IOException e) {\n        throw new YarnException(\n            \"Failed while attempting to check permissions for dir [\"\n                + this.remoteRootLogDir + \"]\");\n      }\n    } else {\n      LOG.warn(\"Remote Root Log Dir [\" + this.remoteRootLogDir\n          + \"] does not exist. Attempting to create it.\");\n      try {\n        Path qualified \u003d\n            this.remoteRootLogDir.makeQualified(remoteFS.getUri(),\n                remoteFS.getWorkingDirectory());\n        remoteFS.mkdirs(qualified, new FsPermission(TLDIR_PERMISSIONS));\n        remoteFS.setPermission(qualified, new FsPermission(TLDIR_PERMISSIONS));\n      } catch (IOException e) {\n        throw new YarnException(\"Failed to create remoteLogDir [\"\n            + this.remoteRootLogDir + \"]\", e);\n      }\n    }\n\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java"
    }
  }
}