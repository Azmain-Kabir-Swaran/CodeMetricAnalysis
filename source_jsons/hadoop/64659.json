{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "S3AFileSystem.java",
  "functionName": "copyFromLocalFile",
  "functionId": "copyFromLocalFile___delSrc-boolean__overwrite-boolean__src-Path__dst-Path",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
  "functionStartLine": 3133,
  "functionEndLine": 3139,
  "numCommitsSeen": 141,
  "timeTaken": 5666,
  "changeHistory": [
    "4c106fca0ca91536e288f11052568406a0b84300",
    "de8b6ca5ef8614de6d6277b7617e27c788b0555c",
    "39ec1515a205952eda7e171408a8b83eceb4abde",
    "27c4e90efce04e1b1302f668b5eb22412e00d033",
    "d5403747b57b1e294e533ce17f197e7be8f5339c",
    "4e7ad4f0a88bd36bc91db6b1bd311d7f5c6bebee",
    "2e98ad34ce64a9e5184c53447004de20a637f927",
    "6ba52d88ec11444cbac946ffadbc645acd0657de",
    "24d920b80eb3626073925a1d0b6dcf148add8cc0"
  ],
  "changeHistoryShort": {
    "4c106fca0ca91536e288f11052568406a0b84300": "Ybodychange",
    "de8b6ca5ef8614de6d6277b7617e27c788b0555c": "Ybodychange",
    "39ec1515a205952eda7e171408a8b83eceb4abde": "Ybodychange",
    "27c4e90efce04e1b1302f668b5eb22412e00d033": "Ybodychange",
    "d5403747b57b1e294e533ce17f197e7be8f5339c": "Ybodychange",
    "4e7ad4f0a88bd36bc91db6b1bd311d7f5c6bebee": "Ybodychange",
    "2e98ad34ce64a9e5184c53447004de20a637f927": "Ybodychange",
    "6ba52d88ec11444cbac946ffadbc645acd0657de": "Ybodychange",
    "24d920b80eb3626073925a1d0b6dcf148add8cc0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4c106fca0ca91536e288f11052568406a0b84300": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15932. Oozie unable to create sharelib in s3a filesystem.\n\nContributed by Steve Loughran.\n",
      "commitDate": "27/11/18 12:39 PM",
      "commitName": "4c106fca0ca91536e288f11052568406a0b84300",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "16/10/18 12:02 PM",
      "commitNameOld": "d59ca43bff8a457ce7ab62a61acd89aacbe71b93",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 42.07,
      "commitsBetweenForRepo": 326,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,4 +1,7 @@\n   public void copyFromLocalFile(boolean delSrc, boolean overwrite, Path src,\n       Path dst) throws IOException {\n-    innerCopyFromLocalFile(delSrc, overwrite, src, dst);\n+    entryPoint(INVOCATION_COPY_FROM_LOCAL_FILE);\n+    LOG.debug(\"Copying local file from {} to {}\", src, dst);\n+//    innerCopyFromLocalFile(delSrc, overwrite, src, dst);\n+    super.copyFromLocalFile(delSrc, overwrite, src, dst);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void copyFromLocalFile(boolean delSrc, boolean overwrite, Path src,\n      Path dst) throws IOException {\n    entryPoint(INVOCATION_COPY_FROM_LOCAL_FILE);\n    LOG.debug(\"Copying local file from {} to {}\", src, dst);\n//    innerCopyFromLocalFile(delSrc, overwrite, src, dst);\n    super.copyFromLocalFile(delSrc, overwrite, src, dst);\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "de8b6ca5ef8614de6d6277b7617e27c788b0555c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13786 Add S3A committer for zero-rename commits to S3 endpoints.\nContributed by Steve Loughran and Ryan Blue.\n",
      "commitDate": "22/11/17 7:28 AM",
      "commitName": "de8b6ca5ef8614de6d6277b7617e27c788b0555c",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "25/09/17 3:59 PM",
      "commitNameOld": "47011d7dd300b0c74bb6cfe25b918c479d718f4f",
      "commitAuthorOld": "Aaron Fabbri",
      "daysBetweenCommits": 57.69,
      "commitsBetweenForRepo": 477,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,9 +1,4 @@\n   public void copyFromLocalFile(boolean delSrc, boolean overwrite, Path src,\n       Path dst) throws IOException {\n-    try {\n-      innerCopyFromLocalFile(delSrc, overwrite, src, dst);\n-    } catch (AmazonClientException e) {\n-      throw translateException(\"copyFromLocalFile(\" + src + \", \" + dst + \")\",\n-          src, e);\n-    }\n+    innerCopyFromLocalFile(delSrc, overwrite, src, dst);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void copyFromLocalFile(boolean delSrc, boolean overwrite, Path src,\n      Path dst) throws IOException {\n    innerCopyFromLocalFile(delSrc, overwrite, src, dst);\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "39ec1515a205952eda7e171408a8b83eceb4abde": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13130. s3a failures can surface as RTEs, not IOEs. (Steve Loughran)\n",
      "commitDate": "21/05/16 8:39 AM",
      "commitName": "39ec1515a205952eda7e171408a8b83eceb4abde",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "20/05/16 5:52 AM",
      "commitNameOld": "757050ff355d40bc28f9dbfd0c0083c5f337d270",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 1.12,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,9 @@\n   public void copyFromLocalFile(boolean delSrc, boolean overwrite, Path src,\n       Path dst) throws IOException {\n-    String key \u003d pathToKey(dst);\n-\n-    if (!overwrite \u0026\u0026 exists(dst)) {\n-      throw new FileAlreadyExistsException(dst + \" already exists\");\n-    }\n-    LOG.debug(\"Copying local file from {} to {}\", src, dst);\n-\n-    // Since we have a local file, we don\u0027t need to stream into a temporary file\n-    LocalFileSystem local \u003d getLocal(getConf());\n-    File srcfile \u003d local.pathToFile(src);\n-\n-    final ObjectMetadata om \u003d new ObjectMetadata();\n-    if (StringUtils.isNotBlank(serverSideEncryptionAlgorithm)) {\n-      om.setSSEAlgorithm(serverSideEncryptionAlgorithm);\n-    }\n-    PutObjectRequest putObjectRequest \u003d new PutObjectRequest(bucket, key, srcfile);\n-    putObjectRequest.setCannedAcl(cannedACL);\n-    putObjectRequest.setMetadata(om);\n-\n-    ProgressListener progressListener \u003d new ProgressListener() {\n-      public void progressChanged(ProgressEvent progressEvent) {\n-        switch (progressEvent.getEventType()) {\n-          case TRANSFER_PART_COMPLETED_EVENT:\n-            statistics.incrementWriteOps(1);\n-            break;\n-          default:\n-            break;\n-        }\n-      }\n-    };\n-\n-    statistics.incrementWriteOps(1);\n-    Upload up \u003d transfers.upload(putObjectRequest);\n-    up.addProgressListener(progressListener);\n     try {\n-      up.waitForUploadResult();\n-    } catch (InterruptedException e) {\n-      throw new InterruptedIOException(\"Interrupted copying \" + src\n-          + \" to \"  + dst + \", cancelling\");\n-    }\n-\n-    // This will delete unnecessary fake parent directories\n-    finishedWrite(key);\n-\n-    if (delSrc) {\n-      local.delete(src, false);\n+      innerCopyFromLocalFile(delSrc, overwrite, src, dst);\n+    } catch (AmazonClientException e) {\n+      throw translateException(\"copyFromLocalFile(\" + src + \", \" + dst + \")\",\n+          src, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void copyFromLocalFile(boolean delSrc, boolean overwrite, Path src,\n      Path dst) throws IOException {\n    try {\n      innerCopyFromLocalFile(delSrc, overwrite, src, dst);\n    } catch (AmazonClientException e) {\n      throw translateException(\"copyFromLocalFile(\" + src + \", \" + dst + \")\",\n          src, e);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "27c4e90efce04e1b1302f668b5eb22412e00d033": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13028 add low level counter metrics for S3A; use in read performance tests. contributed by: stevel\npatch includes\nHADOOP-12844 Recover when S3A fails on IOException in read()\nHADOOP-13058 S3A FS fails during init against a read-only FS if multipart purge\nHADOOP-13047 S3a Forward seek in stream length to be configurable\n",
      "commitDate": "12/05/16 11:24 AM",
      "commitName": "27c4e90efce04e1b1302f668b5eb22412e00d033",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "12/05/16 5:57 AM",
      "commitNameOld": "def2a6d3856452d5c804f04e5bf485541a3bc53a",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 0.23,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,50 @@\n   public void copyFromLocalFile(boolean delSrc, boolean overwrite, Path src,\n-    Path dst) throws IOException {\n+      Path dst) throws IOException {\n     String key \u003d pathToKey(dst);\n \n     if (!overwrite \u0026\u0026 exists(dst)) {\n-      throw new IOException(dst + \" already exists\");\n+      throw new FileAlreadyExistsException(dst + \" already exists\");\n     }\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Copying local file from \" + src + \" to \" + dst);\n-    }\n+    LOG.debug(\"Copying local file from {} to {}\", src, dst);\n \n     // Since we have a local file, we don\u0027t need to stream into a temporary file\n     LocalFileSystem local \u003d getLocal(getConf());\n     File srcfile \u003d local.pathToFile(src);\n \n     final ObjectMetadata om \u003d new ObjectMetadata();\n     if (StringUtils.isNotBlank(serverSideEncryptionAlgorithm)) {\n       om.setSSEAlgorithm(serverSideEncryptionAlgorithm);\n     }\n     PutObjectRequest putObjectRequest \u003d new PutObjectRequest(bucket, key, srcfile);\n     putObjectRequest.setCannedAcl(cannedACL);\n     putObjectRequest.setMetadata(om);\n \n     ProgressListener progressListener \u003d new ProgressListener() {\n       public void progressChanged(ProgressEvent progressEvent) {\n         switch (progressEvent.getEventType()) {\n           case TRANSFER_PART_COMPLETED_EVENT:\n             statistics.incrementWriteOps(1);\n             break;\n           default:\n             break;\n         }\n       }\n     };\n \n+    statistics.incrementWriteOps(1);\n     Upload up \u003d transfers.upload(putObjectRequest);\n     up.addProgressListener(progressListener);\n     try {\n       up.waitForUploadResult();\n-      statistics.incrementWriteOps(1);\n     } catch (InterruptedException e) {\n-      throw new IOException(\"Got interrupted, cancelling\");\n+      throw new InterruptedIOException(\"Interrupted copying \" + src\n+          + \" to \"  + dst + \", cancelling\");\n     }\n \n     // This will delete unnecessary fake parent directories\n     finishedWrite(key);\n \n     if (delSrc) {\n       local.delete(src, false);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void copyFromLocalFile(boolean delSrc, boolean overwrite, Path src,\n      Path dst) throws IOException {\n    String key \u003d pathToKey(dst);\n\n    if (!overwrite \u0026\u0026 exists(dst)) {\n      throw new FileAlreadyExistsException(dst + \" already exists\");\n    }\n    LOG.debug(\"Copying local file from {} to {}\", src, dst);\n\n    // Since we have a local file, we don\u0027t need to stream into a temporary file\n    LocalFileSystem local \u003d getLocal(getConf());\n    File srcfile \u003d local.pathToFile(src);\n\n    final ObjectMetadata om \u003d new ObjectMetadata();\n    if (StringUtils.isNotBlank(serverSideEncryptionAlgorithm)) {\n      om.setSSEAlgorithm(serverSideEncryptionAlgorithm);\n    }\n    PutObjectRequest putObjectRequest \u003d new PutObjectRequest(bucket, key, srcfile);\n    putObjectRequest.setCannedAcl(cannedACL);\n    putObjectRequest.setMetadata(om);\n\n    ProgressListener progressListener \u003d new ProgressListener() {\n      public void progressChanged(ProgressEvent progressEvent) {\n        switch (progressEvent.getEventType()) {\n          case TRANSFER_PART_COMPLETED_EVENT:\n            statistics.incrementWriteOps(1);\n            break;\n          default:\n            break;\n        }\n      }\n    };\n\n    statistics.incrementWriteOps(1);\n    Upload up \u003d transfers.upload(putObjectRequest);\n    up.addProgressListener(progressListener);\n    try {\n      up.waitForUploadResult();\n    } catch (InterruptedException e) {\n      throw new InterruptedIOException(\"Interrupted copying \" + src\n          + \" to \"  + dst + \", cancelling\");\n    }\n\n    // This will delete unnecessary fake parent directories\n    finishedWrite(key);\n\n    if (delSrc) {\n      local.delete(src, false);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "d5403747b57b1e294e533ce17f197e7be8f5339c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12269. Update aws-sdk dependency to 1.10.6 (Thomas Demoor via Lei (Eddy) Xu)\n",
      "commitDate": "04/08/15 6:51 PM",
      "commitName": "d5403747b57b1e294e533ce17f197e7be8f5339c",
      "commitAuthor": "Lei Xu",
      "commitDateOld": "08/03/15 11:22 AM",
      "commitNameOld": "64443490d7f189e8e42d284615f3814ef751395a",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 149.31,
      "commitsBetweenForRepo": 1216,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,51 @@\n   public void copyFromLocalFile(boolean delSrc, boolean overwrite, Path src, \n     Path dst) throws IOException {\n     String key \u003d pathToKey(dst);\n \n     if (!overwrite \u0026\u0026 exists(dst)) {\n       throw new IOException(dst + \" already exists\");\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Copying local file from \" + src + \" to \" + dst);\n     }\n \n     // Since we have a local file, we don\u0027t need to stream into a temporary file\n     LocalFileSystem local \u003d getLocal(getConf());\n     File srcfile \u003d local.pathToFile(src);\n \n     final ObjectMetadata om \u003d new ObjectMetadata();\n     if (StringUtils.isNotBlank(serverSideEncryptionAlgorithm)) {\n-      om.setServerSideEncryption(serverSideEncryptionAlgorithm);\n+      om.setSSEAlgorithm(serverSideEncryptionAlgorithm);\n     }\n     PutObjectRequest putObjectRequest \u003d new PutObjectRequest(bucket, key, srcfile);\n     putObjectRequest.setCannedAcl(cannedACL);\n     putObjectRequest.setMetadata(om);\n \n     ProgressListener progressListener \u003d new ProgressListener() {\n       public void progressChanged(ProgressEvent progressEvent) {\n-        switch (progressEvent.getEventCode()) {\n-          case ProgressEvent.PART_COMPLETED_EVENT_CODE:\n+        switch (progressEvent.getEventType()) {\n+          case TRANSFER_PART_COMPLETED_EVENT:\n             statistics.incrementWriteOps(1);\n             break;\n           default:\n             break;\n         }\n       }\n     };\n \n     Upload up \u003d transfers.upload(putObjectRequest);\n     up.addProgressListener(progressListener);\n     try {\n       up.waitForUploadResult();\n       statistics.incrementWriteOps(1);\n     } catch (InterruptedException e) {\n       throw new IOException(\"Got interrupted, cancelling\");\n     }\n \n     // This will delete unnecessary fake parent directories\n     finishedWrite(key);\n \n     if (delSrc) {\n       local.delete(src, false);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void copyFromLocalFile(boolean delSrc, boolean overwrite, Path src, \n    Path dst) throws IOException {\n    String key \u003d pathToKey(dst);\n\n    if (!overwrite \u0026\u0026 exists(dst)) {\n      throw new IOException(dst + \" already exists\");\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Copying local file from \" + src + \" to \" + dst);\n    }\n\n    // Since we have a local file, we don\u0027t need to stream into a temporary file\n    LocalFileSystem local \u003d getLocal(getConf());\n    File srcfile \u003d local.pathToFile(src);\n\n    final ObjectMetadata om \u003d new ObjectMetadata();\n    if (StringUtils.isNotBlank(serverSideEncryptionAlgorithm)) {\n      om.setSSEAlgorithm(serverSideEncryptionAlgorithm);\n    }\n    PutObjectRequest putObjectRequest \u003d new PutObjectRequest(bucket, key, srcfile);\n    putObjectRequest.setCannedAcl(cannedACL);\n    putObjectRequest.setMetadata(om);\n\n    ProgressListener progressListener \u003d new ProgressListener() {\n      public void progressChanged(ProgressEvent progressEvent) {\n        switch (progressEvent.getEventType()) {\n          case TRANSFER_PART_COMPLETED_EVENT:\n            statistics.incrementWriteOps(1);\n            break;\n          default:\n            break;\n        }\n      }\n    };\n\n    Upload up \u003d transfers.upload(putObjectRequest);\n    up.addProgressListener(progressListener);\n    try {\n      up.waitForUploadResult();\n      statistics.incrementWriteOps(1);\n    } catch (InterruptedException e) {\n      throw new IOException(\"Got interrupted, cancelling\");\n    }\n\n    // This will delete unnecessary fake parent directories\n    finishedWrite(key);\n\n    if (delSrc) {\n      local.delete(src, false);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "4e7ad4f0a88bd36bc91db6b1bd311d7f5c6bebee": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11463 Replace method-local TransferManager object with S3AFileSystem#transfers. (Ted Yu via stevel)\n",
      "commitDate": "05/02/15 4:20 AM",
      "commitName": "4e7ad4f0a88bd36bc91db6b1bd311d7f5c6bebee",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "17/01/15 10:40 AM",
      "commitNameOld": "2908fe4ec52f78d74e4207274a34d88d54cd468f",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 18.74,
      "commitsBetweenForRepo": 152,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,51 @@\n   public void copyFromLocalFile(boolean delSrc, boolean overwrite, Path src, \n     Path dst) throws IOException {\n     String key \u003d pathToKey(dst);\n \n     if (!overwrite \u0026\u0026 exists(dst)) {\n       throw new IOException(dst + \" already exists\");\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Copying local file from \" + src + \" to \" + dst);\n     }\n \n     // Since we have a local file, we don\u0027t need to stream into a temporary file\n     LocalFileSystem local \u003d getLocal(getConf());\n     File srcfile \u003d local.pathToFile(src);\n \n-    TransferManagerConfiguration transferConfiguration \u003d new TransferManagerConfiguration();\n-    transferConfiguration.setMinimumUploadPartSize(partSize);\n-    transferConfiguration.setMultipartUploadThreshold(partSizeThreshold);\n-\n-    TransferManager transfers \u003d new TransferManager(s3);\n-    transfers.setConfiguration(transferConfiguration);\n-\n     final ObjectMetadata om \u003d new ObjectMetadata();\n     if (StringUtils.isNotBlank(serverSideEncryptionAlgorithm)) {\n       om.setServerSideEncryption(serverSideEncryptionAlgorithm);\n     }\n     PutObjectRequest putObjectRequest \u003d new PutObjectRequest(bucket, key, srcfile);\n     putObjectRequest.setCannedAcl(cannedACL);\n     putObjectRequest.setMetadata(om);\n \n     ProgressListener progressListener \u003d new ProgressListener() {\n       public void progressChanged(ProgressEvent progressEvent) {\n         switch (progressEvent.getEventCode()) {\n           case ProgressEvent.PART_COMPLETED_EVENT_CODE:\n             statistics.incrementWriteOps(1);\n             break;\n           default:\n             break;\n         }\n       }\n     };\n \n     Upload up \u003d transfers.upload(putObjectRequest);\n     up.addProgressListener(progressListener);\n     try {\n       up.waitForUploadResult();\n       statistics.incrementWriteOps(1);\n     } catch (InterruptedException e) {\n       throw new IOException(\"Got interrupted, cancelling\");\n-    } finally {\n-      transfers.shutdownNow(false);\n     }\n \n     // This will delete unnecessary fake parent directories\n     finishedWrite(key);\n \n     if (delSrc) {\n       local.delete(src, false);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void copyFromLocalFile(boolean delSrc, boolean overwrite, Path src, \n    Path dst) throws IOException {\n    String key \u003d pathToKey(dst);\n\n    if (!overwrite \u0026\u0026 exists(dst)) {\n      throw new IOException(dst + \" already exists\");\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Copying local file from \" + src + \" to \" + dst);\n    }\n\n    // Since we have a local file, we don\u0027t need to stream into a temporary file\n    LocalFileSystem local \u003d getLocal(getConf());\n    File srcfile \u003d local.pathToFile(src);\n\n    final ObjectMetadata om \u003d new ObjectMetadata();\n    if (StringUtils.isNotBlank(serverSideEncryptionAlgorithm)) {\n      om.setServerSideEncryption(serverSideEncryptionAlgorithm);\n    }\n    PutObjectRequest putObjectRequest \u003d new PutObjectRequest(bucket, key, srcfile);\n    putObjectRequest.setCannedAcl(cannedACL);\n    putObjectRequest.setMetadata(om);\n\n    ProgressListener progressListener \u003d new ProgressListener() {\n      public void progressChanged(ProgressEvent progressEvent) {\n        switch (progressEvent.getEventCode()) {\n          case ProgressEvent.PART_COMPLETED_EVENT_CODE:\n            statistics.incrementWriteOps(1);\n            break;\n          default:\n            break;\n        }\n      }\n    };\n\n    Upload up \u003d transfers.upload(putObjectRequest);\n    up.addProgressListener(progressListener);\n    try {\n      up.waitForUploadResult();\n      statistics.incrementWriteOps(1);\n    } catch (InterruptedException e) {\n      throw new IOException(\"Got interrupted, cancelling\");\n    }\n\n    // This will delete unnecessary fake parent directories\n    finishedWrite(key);\n\n    if (delSrc) {\n      local.delete(src, false);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "2e98ad34ce64a9e5184c53447004de20a637f927": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11381. Fix findbugs warnings in hadoop-distcp, hadoop-aws, hadoop-azure, and hadoop-openstack. Contributed by Li Lu.\n",
      "commitDate": "09/12/14 8:45 PM",
      "commitName": "2e98ad34ce64a9e5184c53447004de20a637f927",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "05/11/14 5:17 PM",
      "commitNameOld": "6ba52d88ec11444cbac946ffadbc645acd0657de",
      "commitAuthorOld": "Aaron T. Myers",
      "daysBetweenCommits": 34.14,
      "commitsBetweenForRepo": 255,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,60 @@\n   public void copyFromLocalFile(boolean delSrc, boolean overwrite, Path src, \n     Path dst) throws IOException {\n     String key \u003d pathToKey(dst);\n \n     if (!overwrite \u0026\u0026 exists(dst)) {\n       throw new IOException(dst + \" already exists\");\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Copying local file from \" + src + \" to \" + dst);\n     }\n \n     // Since we have a local file, we don\u0027t need to stream into a temporary file\n     LocalFileSystem local \u003d getLocal(getConf());\n     File srcfile \u003d local.pathToFile(src);\n \n     TransferManagerConfiguration transferConfiguration \u003d new TransferManagerConfiguration();\n     transferConfiguration.setMinimumUploadPartSize(partSize);\n     transferConfiguration.setMultipartUploadThreshold(partSizeThreshold);\n \n     TransferManager transfers \u003d new TransferManager(s3);\n     transfers.setConfiguration(transferConfiguration);\n \n     final ObjectMetadata om \u003d new ObjectMetadata();\n     if (StringUtils.isNotBlank(serverSideEncryptionAlgorithm)) {\n       om.setServerSideEncryption(serverSideEncryptionAlgorithm);\n     }\n     PutObjectRequest putObjectRequest \u003d new PutObjectRequest(bucket, key, srcfile);\n     putObjectRequest.setCannedAcl(cannedACL);\n     putObjectRequest.setMetadata(om);\n \n     ProgressListener progressListener \u003d new ProgressListener() {\n       public void progressChanged(ProgressEvent progressEvent) {\n         switch (progressEvent.getEventCode()) {\n           case ProgressEvent.PART_COMPLETED_EVENT_CODE:\n             statistics.incrementWriteOps(1);\n             break;\n+          default:\n+            break;\n         }\n       }\n     };\n \n     Upload up \u003d transfers.upload(putObjectRequest);\n     up.addProgressListener(progressListener);\n     try {\n       up.waitForUploadResult();\n       statistics.incrementWriteOps(1);\n     } catch (InterruptedException e) {\n       throw new IOException(\"Got interrupted, cancelling\");\n     } finally {\n       transfers.shutdownNow(false);\n     }\n \n     // This will delete unnecessary fake parent directories\n     finishedWrite(key);\n \n     if (delSrc) {\n       local.delete(src, false);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void copyFromLocalFile(boolean delSrc, boolean overwrite, Path src, \n    Path dst) throws IOException {\n    String key \u003d pathToKey(dst);\n\n    if (!overwrite \u0026\u0026 exists(dst)) {\n      throw new IOException(dst + \" already exists\");\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Copying local file from \" + src + \" to \" + dst);\n    }\n\n    // Since we have a local file, we don\u0027t need to stream into a temporary file\n    LocalFileSystem local \u003d getLocal(getConf());\n    File srcfile \u003d local.pathToFile(src);\n\n    TransferManagerConfiguration transferConfiguration \u003d new TransferManagerConfiguration();\n    transferConfiguration.setMinimumUploadPartSize(partSize);\n    transferConfiguration.setMultipartUploadThreshold(partSizeThreshold);\n\n    TransferManager transfers \u003d new TransferManager(s3);\n    transfers.setConfiguration(transferConfiguration);\n\n    final ObjectMetadata om \u003d new ObjectMetadata();\n    if (StringUtils.isNotBlank(serverSideEncryptionAlgorithm)) {\n      om.setServerSideEncryption(serverSideEncryptionAlgorithm);\n    }\n    PutObjectRequest putObjectRequest \u003d new PutObjectRequest(bucket, key, srcfile);\n    putObjectRequest.setCannedAcl(cannedACL);\n    putObjectRequest.setMetadata(om);\n\n    ProgressListener progressListener \u003d new ProgressListener() {\n      public void progressChanged(ProgressEvent progressEvent) {\n        switch (progressEvent.getEventCode()) {\n          case ProgressEvent.PART_COMPLETED_EVENT_CODE:\n            statistics.incrementWriteOps(1);\n            break;\n          default:\n            break;\n        }\n      }\n    };\n\n    Upload up \u003d transfers.upload(putObjectRequest);\n    up.addProgressListener(progressListener);\n    try {\n      up.waitForUploadResult();\n      statistics.incrementWriteOps(1);\n    } catch (InterruptedException e) {\n      throw new IOException(\"Got interrupted, cancelling\");\n    } finally {\n      transfers.shutdownNow(false);\n    }\n\n    // This will delete unnecessary fake parent directories\n    finishedWrite(key);\n\n    if (delSrc) {\n      local.delete(src, false);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "6ba52d88ec11444cbac946ffadbc645acd0657de": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10714. AmazonS3Client.deleteObjects() need to be limited to 1000 entries per call. Contributed by Juan Yu.\n",
      "commitDate": "05/11/14 5:17 PM",
      "commitName": "6ba52d88ec11444cbac946ffadbc645acd0657de",
      "commitAuthor": "Aaron T. Myers",
      "commitDateOld": "15/09/14 4:49 PM",
      "commitNameOld": "0ac760a58d96b36ab30e9d60679bbea6365ef120",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 51.06,
      "commitsBetweenForRepo": 536,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,58 @@\n   public void copyFromLocalFile(boolean delSrc, boolean overwrite, Path src, \n     Path dst) throws IOException {\n     String key \u003d pathToKey(dst);\n \n     if (!overwrite \u0026\u0026 exists(dst)) {\n       throw new IOException(dst + \" already exists\");\n     }\n-\n-    LOG.info(\"Copying local file from \" + src + \" to \" + dst);\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Copying local file from \" + src + \" to \" + dst);\n+    }\n \n     // Since we have a local file, we don\u0027t need to stream into a temporary file\n     LocalFileSystem local \u003d getLocal(getConf());\n     File srcfile \u003d local.pathToFile(src);\n \n     TransferManagerConfiguration transferConfiguration \u003d new TransferManagerConfiguration();\n     transferConfiguration.setMinimumUploadPartSize(partSize);\n     transferConfiguration.setMultipartUploadThreshold(partSizeThreshold);\n \n     TransferManager transfers \u003d new TransferManager(s3);\n     transfers.setConfiguration(transferConfiguration);\n \n     final ObjectMetadata om \u003d new ObjectMetadata();\n     if (StringUtils.isNotBlank(serverSideEncryptionAlgorithm)) {\n       om.setServerSideEncryption(serverSideEncryptionAlgorithm);\n     }\n     PutObjectRequest putObjectRequest \u003d new PutObjectRequest(bucket, key, srcfile);\n     putObjectRequest.setCannedAcl(cannedACL);\n     putObjectRequest.setMetadata(om);\n \n     ProgressListener progressListener \u003d new ProgressListener() {\n       public void progressChanged(ProgressEvent progressEvent) {\n         switch (progressEvent.getEventCode()) {\n           case ProgressEvent.PART_COMPLETED_EVENT_CODE:\n             statistics.incrementWriteOps(1);\n             break;\n         }\n       }\n     };\n \n     Upload up \u003d transfers.upload(putObjectRequest);\n     up.addProgressListener(progressListener);\n     try {\n       up.waitForUploadResult();\n       statistics.incrementWriteOps(1);\n     } catch (InterruptedException e) {\n       throw new IOException(\"Got interrupted, cancelling\");\n     } finally {\n       transfers.shutdownNow(false);\n     }\n \n     // This will delete unnecessary fake parent directories\n     finishedWrite(key);\n \n     if (delSrc) {\n       local.delete(src, false);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void copyFromLocalFile(boolean delSrc, boolean overwrite, Path src, \n    Path dst) throws IOException {\n    String key \u003d pathToKey(dst);\n\n    if (!overwrite \u0026\u0026 exists(dst)) {\n      throw new IOException(dst + \" already exists\");\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Copying local file from \" + src + \" to \" + dst);\n    }\n\n    // Since we have a local file, we don\u0027t need to stream into a temporary file\n    LocalFileSystem local \u003d getLocal(getConf());\n    File srcfile \u003d local.pathToFile(src);\n\n    TransferManagerConfiguration transferConfiguration \u003d new TransferManagerConfiguration();\n    transferConfiguration.setMinimumUploadPartSize(partSize);\n    transferConfiguration.setMultipartUploadThreshold(partSizeThreshold);\n\n    TransferManager transfers \u003d new TransferManager(s3);\n    transfers.setConfiguration(transferConfiguration);\n\n    final ObjectMetadata om \u003d new ObjectMetadata();\n    if (StringUtils.isNotBlank(serverSideEncryptionAlgorithm)) {\n      om.setServerSideEncryption(serverSideEncryptionAlgorithm);\n    }\n    PutObjectRequest putObjectRequest \u003d new PutObjectRequest(bucket, key, srcfile);\n    putObjectRequest.setCannedAcl(cannedACL);\n    putObjectRequest.setMetadata(om);\n\n    ProgressListener progressListener \u003d new ProgressListener() {\n      public void progressChanged(ProgressEvent progressEvent) {\n        switch (progressEvent.getEventCode()) {\n          case ProgressEvent.PART_COMPLETED_EVENT_CODE:\n            statistics.incrementWriteOps(1);\n            break;\n        }\n      }\n    };\n\n    Upload up \u003d transfers.upload(putObjectRequest);\n    up.addProgressListener(progressListener);\n    try {\n      up.waitForUploadResult();\n      statistics.incrementWriteOps(1);\n    } catch (InterruptedException e) {\n      throw new IOException(\"Got interrupted, cancelling\");\n    } finally {\n      transfers.shutdownNow(false);\n    }\n\n    // This will delete unnecessary fake parent directories\n    finishedWrite(key);\n\n    if (delSrc) {\n      local.delete(src, false);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
      "extendedDetails": {}
    },
    "24d920b80eb3626073925a1d0b6dcf148add8cc0": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10400. Incorporate new S3A FileSystem implementation. Contributed by Jordan Mendelson and Dave Wang.\n",
      "commitDate": "15/09/14 8:27 AM",
      "commitName": "24d920b80eb3626073925a1d0b6dcf148add8cc0",
      "commitAuthor": "Aaron T. Myers",
      "diff": "@@ -0,0 +1,57 @@\n+  public void copyFromLocalFile(boolean delSrc, boolean overwrite, Path src, \n+    Path dst) throws IOException {\n+    String key \u003d pathToKey(dst);\n+\n+    if (!overwrite \u0026\u0026 exists(dst)) {\n+      throw new IOException(dst + \" already exists\");\n+    }\n+\n+    LOG.info(\"Copying local file from \" + src + \" to \" + dst);\n+\n+    // Since we have a local file, we don\u0027t need to stream into a temporary file\n+    LocalFileSystem local \u003d getLocal(getConf());\n+    File srcfile \u003d local.pathToFile(src);\n+\n+    TransferManagerConfiguration transferConfiguration \u003d new TransferManagerConfiguration();\n+    transferConfiguration.setMinimumUploadPartSize(partSize);\n+    transferConfiguration.setMultipartUploadThreshold(partSizeThreshold);\n+\n+    TransferManager transfers \u003d new TransferManager(s3);\n+    transfers.setConfiguration(transferConfiguration);\n+\n+    final ObjectMetadata om \u003d new ObjectMetadata();\n+    if (StringUtils.isNotBlank(serverSideEncryptionAlgorithm)) {\n+      om.setServerSideEncryption(serverSideEncryptionAlgorithm);\n+    }\n+    PutObjectRequest putObjectRequest \u003d new PutObjectRequest(bucket, key, srcfile);\n+    putObjectRequest.setCannedAcl(cannedACL);\n+    putObjectRequest.setMetadata(om);\n+\n+    ProgressListener progressListener \u003d new ProgressListener() {\n+      public void progressChanged(ProgressEvent progressEvent) {\n+        switch (progressEvent.getEventCode()) {\n+          case ProgressEvent.PART_COMPLETED_EVENT_CODE:\n+            statistics.incrementWriteOps(1);\n+            break;\n+        }\n+      }\n+    };\n+\n+    Upload up \u003d transfers.upload(putObjectRequest);\n+    up.addProgressListener(progressListener);\n+    try {\n+      up.waitForUploadResult();\n+      statistics.incrementWriteOps(1);\n+    } catch (InterruptedException e) {\n+      throw new IOException(\"Got interrupted, cancelling\");\n+    } finally {\n+      transfers.shutdownNow(false);\n+    }\n+\n+    // This will delete unnecessary fake parent directories\n+    finishedWrite(key);\n+\n+    if (delSrc) {\n+      local.delete(src, false);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void copyFromLocalFile(boolean delSrc, boolean overwrite, Path src, \n    Path dst) throws IOException {\n    String key \u003d pathToKey(dst);\n\n    if (!overwrite \u0026\u0026 exists(dst)) {\n      throw new IOException(dst + \" already exists\");\n    }\n\n    LOG.info(\"Copying local file from \" + src + \" to \" + dst);\n\n    // Since we have a local file, we don\u0027t need to stream into a temporary file\n    LocalFileSystem local \u003d getLocal(getConf());\n    File srcfile \u003d local.pathToFile(src);\n\n    TransferManagerConfiguration transferConfiguration \u003d new TransferManagerConfiguration();\n    transferConfiguration.setMinimumUploadPartSize(partSize);\n    transferConfiguration.setMultipartUploadThreshold(partSizeThreshold);\n\n    TransferManager transfers \u003d new TransferManager(s3);\n    transfers.setConfiguration(transferConfiguration);\n\n    final ObjectMetadata om \u003d new ObjectMetadata();\n    if (StringUtils.isNotBlank(serverSideEncryptionAlgorithm)) {\n      om.setServerSideEncryption(serverSideEncryptionAlgorithm);\n    }\n    PutObjectRequest putObjectRequest \u003d new PutObjectRequest(bucket, key, srcfile);\n    putObjectRequest.setCannedAcl(cannedACL);\n    putObjectRequest.setMetadata(om);\n\n    ProgressListener progressListener \u003d new ProgressListener() {\n      public void progressChanged(ProgressEvent progressEvent) {\n        switch (progressEvent.getEventCode()) {\n          case ProgressEvent.PART_COMPLETED_EVENT_CODE:\n            statistics.incrementWriteOps(1);\n            break;\n        }\n      }\n    };\n\n    Upload up \u003d transfers.upload(putObjectRequest);\n    up.addProgressListener(progressListener);\n    try {\n      up.waitForUploadResult();\n      statistics.incrementWriteOps(1);\n    } catch (InterruptedException e) {\n      throw new IOException(\"Got interrupted, cancelling\");\n    } finally {\n      transfers.shutdownNow(false);\n    }\n\n    // This will delete unnecessary fake parent directories\n    finishedWrite(key);\n\n    if (delSrc) {\n      local.delete(src, false);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java"
    }
  }
}