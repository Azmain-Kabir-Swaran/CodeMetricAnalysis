{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NameNodeRpcServer.java",
  "functionName": "createSymlink",
  "functionId": "createSymlink___target-String__link-String__dirPerms-FsPermission__createParent-boolean",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeRpcServer.java",
  "functionStartLine": 1521,
  "functionEndLine": 1551,
  "numCommitsSeen": 324,
  "timeTaken": 10348,
  "changeHistory": [
    "7817674a3a4d097b647dd77f1345787dd376d5ea",
    "db334bb8625da97c7e518cbcf477530c7ba7001e",
    "0da1330bfd3080a7ad95a4b48ba7b7ac89c3608f",
    "8e253cb93030642f5a7324bad0f161cd0ad33206",
    "313dd0250543177752ebbad7f7f6a6bcf3a8ab42",
    "36d1c49486587c2dbb193e8538b1d4510c462fa6",
    "b0632df93ae5d00180b21983d960d50a45f8fb7a",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "7817674a3a4d097b647dd77f1345787dd376d5ea": "Ybodychange",
    "db334bb8625da97c7e518cbcf477530c7ba7001e": "Ybodychange",
    "0da1330bfd3080a7ad95a4b48ba7b7ac89c3608f": "Ybodychange",
    "8e253cb93030642f5a7324bad0f161cd0ad33206": "Ybodychange",
    "313dd0250543177752ebbad7f7f6a6bcf3a8ab42": "Ybodychange",
    "36d1c49486587c2dbb193e8538b1d4510c462fa6": "Ybodychange",
    "b0632df93ae5d00180b21983d960d50a45f8fb7a": "Ymovefromfile",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7817674a3a4d097b647dd77f1345787dd376d5ea": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7609. Avoid retry cache collision when Standby NameNode loading edits. Contributed by Ming Ma.\n",
      "commitDate": "29/05/15 11:05 AM",
      "commitName": "7817674a3a4d097b647dd77f1345787dd376d5ea",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "15/05/15 7:09 PM",
      "commitNameOld": "e5afac5896a1a88e152746598527d91f73cbb724",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 13.66,
      "commitsBetweenForRepo": 105,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,31 @@\n   public void createSymlink(String target, String link, FsPermission dirPerms,\n       boolean createParent) throws IOException {\n     checkNNStartup();\n+    namesystem.checkOperation(OperationCategory.WRITE);\n     CacheEntry cacheEntry \u003d RetryCache.waitForCompletion(retryCache);\n     if (cacheEntry !\u003d null \u0026\u0026 cacheEntry.isSuccess()) {\n       return; // Return previous response\n     }\n \n     /* We enforce the MAX_PATH_LENGTH limit even though a symlink target\n      * URI may refer to a non-HDFS file system. \n      */\n     if (!checkPathLength(link)) {\n       throw new IOException(\"Symlink path exceeds \" + MAX_PATH_LENGTH +\n                             \" character limit\");\n                             \n     }\n \n     final UserGroupInformation ugi \u003d getRemoteUser();\n \n     boolean success \u003d false;\n     try {\n       PermissionStatus perm \u003d new PermissionStatus(ugi.getShortUserName(),\n           null, dirPerms);\n       namesystem.createSymlink(target, link, perm, createParent,\n           cacheEntry !\u003d null);\n       success \u003d true;\n     } finally {\n       RetryCache.setState(cacheEntry, success);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void createSymlink(String target, String link, FsPermission dirPerms,\n      boolean createParent) throws IOException {\n    checkNNStartup();\n    namesystem.checkOperation(OperationCategory.WRITE);\n    CacheEntry cacheEntry \u003d RetryCache.waitForCompletion(retryCache);\n    if (cacheEntry !\u003d null \u0026\u0026 cacheEntry.isSuccess()) {\n      return; // Return previous response\n    }\n\n    /* We enforce the MAX_PATH_LENGTH limit even though a symlink target\n     * URI may refer to a non-HDFS file system. \n     */\n    if (!checkPathLength(link)) {\n      throw new IOException(\"Symlink path exceeds \" + MAX_PATH_LENGTH +\n                            \" character limit\");\n                            \n    }\n\n    final UserGroupInformation ugi \u003d getRemoteUser();\n\n    boolean success \u003d false;\n    try {\n      PermissionStatus perm \u003d new PermissionStatus(ugi.getShortUserName(),\n          null, dirPerms);\n      namesystem.createSymlink(target, link, perm, createParent,\n          cacheEntry !\u003d null);\n      success \u003d true;\n    } finally {\n      RetryCache.setState(cacheEntry, success);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeRpcServer.java",
      "extendedDetails": {}
    },
    "db334bb8625da97c7e518cbcf477530c7ba7001e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3443. Fix NPE when namenode transition to active during startup by adding checkNNStartup() in NameNodeRpcServer.  Contributed by Vinayakumar B\n",
      "commitDate": "21/01/15 11:33 AM",
      "commitName": "db334bb8625da97c7e518cbcf477530c7ba7001e",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "12/01/15 10:50 PM",
      "commitNameOld": "7e9358feb326d48b8c4f00249e7af5023cebd2e2",
      "commitAuthorOld": "Plamen Jeliazkov",
      "daysBetweenCommits": 8.53,
      "commitsBetweenForRepo": 59,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,30 @@\n   public void createSymlink(String target, String link, FsPermission dirPerms,\n       boolean createParent) throws IOException {\n+    checkNNStartup();\n     CacheEntry cacheEntry \u003d RetryCache.waitForCompletion(retryCache);\n     if (cacheEntry !\u003d null \u0026\u0026 cacheEntry.isSuccess()) {\n       return; // Return previous response\n     }\n \n     /* We enforce the MAX_PATH_LENGTH limit even though a symlink target\n      * URI may refer to a non-HDFS file system. \n      */\n     if (!checkPathLength(link)) {\n       throw new IOException(\"Symlink path exceeds \" + MAX_PATH_LENGTH +\n                             \" character limit\");\n                             \n     }\n \n     final UserGroupInformation ugi \u003d getRemoteUser();\n \n     boolean success \u003d false;\n     try {\n       PermissionStatus perm \u003d new PermissionStatus(ugi.getShortUserName(),\n           null, dirPerms);\n       namesystem.createSymlink(target, link, perm, createParent,\n           cacheEntry !\u003d null);\n       success \u003d true;\n     } finally {\n       RetryCache.setState(cacheEntry, success);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void createSymlink(String target, String link, FsPermission dirPerms,\n      boolean createParent) throws IOException {\n    checkNNStartup();\n    CacheEntry cacheEntry \u003d RetryCache.waitForCompletion(retryCache);\n    if (cacheEntry !\u003d null \u0026\u0026 cacheEntry.isSuccess()) {\n      return; // Return previous response\n    }\n\n    /* We enforce the MAX_PATH_LENGTH limit even though a symlink target\n     * URI may refer to a non-HDFS file system. \n     */\n    if (!checkPathLength(link)) {\n      throw new IOException(\"Symlink path exceeds \" + MAX_PATH_LENGTH +\n                            \" character limit\");\n                            \n    }\n\n    final UserGroupInformation ugi \u003d getRemoteUser();\n\n    boolean success \u003d false;\n    try {\n      PermissionStatus perm \u003d new PermissionStatus(ugi.getShortUserName(),\n          null, dirPerms);\n      namesystem.createSymlink(target, link, perm, createParent,\n          cacheEntry !\u003d null);\n      success \u003d true;\n    } finally {\n      RetryCache.setState(cacheEntry, success);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeRpcServer.java",
      "extendedDetails": {}
    },
    "0da1330bfd3080a7ad95a4b48ba7b7ac89c3608f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7528. Consolidate symlink-related implementation into a single class. Contributed by Haohui Mai.\n",
      "commitDate": "17/12/14 2:48 PM",
      "commitName": "0da1330bfd3080a7ad95a4b48ba7b7ac89c3608f",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "11/12/14 12:36 PM",
      "commitNameOld": "b9f6d0c956f0278c8b9b83e05b523a442a730ebb",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 6.09,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,29 @@\n   public void createSymlink(String target, String link, FsPermission dirPerms,\n       boolean createParent) throws IOException {\n     CacheEntry cacheEntry \u003d RetryCache.waitForCompletion(retryCache);\n     if (cacheEntry !\u003d null \u0026\u0026 cacheEntry.isSuccess()) {\n       return; // Return previous response\n     }\n \n-    metrics.incrCreateSymlinkOps();\n-    /* We enforce the MAX_PATH_LENGTH limit even though a symlink target \n+    /* We enforce the MAX_PATH_LENGTH limit even though a symlink target\n      * URI may refer to a non-HDFS file system. \n      */\n     if (!checkPathLength(link)) {\n       throw new IOException(\"Symlink path exceeds \" + MAX_PATH_LENGTH +\n                             \" character limit\");\n                             \n     }\n-    if (\"\".equals(target)) {\n-      throw new IOException(\"Invalid symlink target\");\n-    }\n+\n     final UserGroupInformation ugi \u003d getRemoteUser();\n \n     boolean success \u003d false;\n     try {\n       PermissionStatus perm \u003d new PermissionStatus(ugi.getShortUserName(),\n           null, dirPerms);\n       namesystem.createSymlink(target, link, perm, createParent,\n           cacheEntry !\u003d null);\n       success \u003d true;\n     } finally {\n       RetryCache.setState(cacheEntry, success);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void createSymlink(String target, String link, FsPermission dirPerms,\n      boolean createParent) throws IOException {\n    CacheEntry cacheEntry \u003d RetryCache.waitForCompletion(retryCache);\n    if (cacheEntry !\u003d null \u0026\u0026 cacheEntry.isSuccess()) {\n      return; // Return previous response\n    }\n\n    /* We enforce the MAX_PATH_LENGTH limit even though a symlink target\n     * URI may refer to a non-HDFS file system. \n     */\n    if (!checkPathLength(link)) {\n      throw new IOException(\"Symlink path exceeds \" + MAX_PATH_LENGTH +\n                            \" character limit\");\n                            \n    }\n\n    final UserGroupInformation ugi \u003d getRemoteUser();\n\n    boolean success \u003d false;\n    try {\n      PermissionStatus perm \u003d new PermissionStatus(ugi.getShortUserName(),\n          null, dirPerms);\n      namesystem.createSymlink(target, link, perm, createParent,\n          cacheEntry !\u003d null);\n      success \u003d true;\n    } finally {\n      RetryCache.setState(cacheEntry, success);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeRpcServer.java",
      "extendedDetails": {}
    },
    "8e253cb93030642f5a7324bad0f161cd0ad33206": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7412. Move RetryCache to NameNodeRpcServer. Contributed by Haohui Mai.\n",
      "commitDate": "24/11/14 11:11 AM",
      "commitName": "8e253cb93030642f5a7324bad0f161cd0ad33206",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "04/11/14 4:02 PM",
      "commitNameOld": "5bd3a569f941ffcfc425a55288bec78a37a75aa1",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 19.8,
      "commitsBetweenForRepo": 170,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,32 @@\n   public void createSymlink(String target, String link, FsPermission dirPerms,\n       boolean createParent) throws IOException {\n+    CacheEntry cacheEntry \u003d RetryCache.waitForCompletion(retryCache);\n+    if (cacheEntry !\u003d null \u0026\u0026 cacheEntry.isSuccess()) {\n+      return; // Return previous response\n+    }\n+\n     metrics.incrCreateSymlinkOps();\n     /* We enforce the MAX_PATH_LENGTH limit even though a symlink target \n      * URI may refer to a non-HDFS file system. \n      */\n     if (!checkPathLength(link)) {\n       throw new IOException(\"Symlink path exceeds \" + MAX_PATH_LENGTH +\n                             \" character limit\");\n                             \n     }\n     if (\"\".equals(target)) {\n       throw new IOException(\"Invalid symlink target\");\n     }\n     final UserGroupInformation ugi \u003d getRemoteUser();\n-    namesystem.createSymlink(target, link,\n-      new PermissionStatus(ugi.getShortUserName(), null, dirPerms), createParent);\n+\n+    boolean success \u003d false;\n+    try {\n+      PermissionStatus perm \u003d new PermissionStatus(ugi.getShortUserName(),\n+          null, dirPerms);\n+      namesystem.createSymlink(target, link, perm, createParent,\n+          cacheEntry !\u003d null);\n+      success \u003d true;\n+    } finally {\n+      RetryCache.setState(cacheEntry, success);\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void createSymlink(String target, String link, FsPermission dirPerms,\n      boolean createParent) throws IOException {\n    CacheEntry cacheEntry \u003d RetryCache.waitForCompletion(retryCache);\n    if (cacheEntry !\u003d null \u0026\u0026 cacheEntry.isSuccess()) {\n      return; // Return previous response\n    }\n\n    metrics.incrCreateSymlinkOps();\n    /* We enforce the MAX_PATH_LENGTH limit even though a symlink target \n     * URI may refer to a non-HDFS file system. \n     */\n    if (!checkPathLength(link)) {\n      throw new IOException(\"Symlink path exceeds \" + MAX_PATH_LENGTH +\n                            \" character limit\");\n                            \n    }\n    if (\"\".equals(target)) {\n      throw new IOException(\"Invalid symlink target\");\n    }\n    final UserGroupInformation ugi \u003d getRemoteUser();\n\n    boolean success \u003d false;\n    try {\n      PermissionStatus perm \u003d new PermissionStatus(ugi.getShortUserName(),\n          null, dirPerms);\n      namesystem.createSymlink(target, link, perm, createParent,\n          cacheEntry !\u003d null);\n      success \u003d true;\n    } finally {\n      RetryCache.setState(cacheEntry, success);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeRpcServer.java",
      "extendedDetails": {}
    },
    "313dd0250543177752ebbad7f7f6a6bcf3a8ab42": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5010. Reduce the frequency of getCurrentUser() calls from namenode. Contributed by Kihwal Lee.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1505160 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/07/13 9:22 AM",
      "commitName": "313dd0250543177752ebbad7f7f6a6bcf3a8ab42",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "16/07/13 5:06 PM",
      "commitNameOld": "febc5040b9aad24a6c9df9e7fe138965cf1c994b",
      "commitAuthorOld": "Jason Darrell Lowe",
      "daysBetweenCommits": 3.68,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n   public void createSymlink(String target, String link, FsPermission dirPerms,\n       boolean createParent) throws IOException {\n     metrics.incrCreateSymlinkOps();\n     /* We enforce the MAX_PATH_LENGTH limit even though a symlink target \n      * URI may refer to a non-HDFS file system. \n      */\n     if (!checkPathLength(link)) {\n       throw new IOException(\"Symlink path exceeds \" + MAX_PATH_LENGTH +\n                             \" character limit\");\n                             \n     }\n     if (\"\".equals(target)) {\n       throw new IOException(\"Invalid symlink target\");\n     }\n-    final UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n+    final UserGroupInformation ugi \u003d getRemoteUser();\n     namesystem.createSymlink(target, link,\n       new PermissionStatus(ugi.getShortUserName(), null, dirPerms), createParent);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void createSymlink(String target, String link, FsPermission dirPerms,\n      boolean createParent) throws IOException {\n    metrics.incrCreateSymlinkOps();\n    /* We enforce the MAX_PATH_LENGTH limit even though a symlink target \n     * URI may refer to a non-HDFS file system. \n     */\n    if (!checkPathLength(link)) {\n      throw new IOException(\"Symlink path exceeds \" + MAX_PATH_LENGTH +\n                            \" character limit\");\n                            \n    }\n    if (\"\".equals(target)) {\n      throw new IOException(\"Invalid symlink target\");\n    }\n    final UserGroupInformation ugi \u003d getRemoteUser();\n    namesystem.createSymlink(target, link,\n      new PermissionStatus(ugi.getShortUserName(), null, dirPerms), createParent);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeRpcServer.java",
      "extendedDetails": {}
    },
    "36d1c49486587c2dbb193e8538b1d4510c462fa6": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2693. Fix synchronization issues around state transition. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1221582 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/12/11 7:03 PM",
      "commitName": "36d1c49486587c2dbb193e8538b1d4510c462fa6",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "18/12/11 9:24 PM",
      "commitNameOld": "329717264f8380a1f0fd2cdabd1bf0517ff1067b",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 1.9,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,18 @@\n   public void createSymlink(String target, String link, FsPermission dirPerms,\n       boolean createParent) throws IOException {\n-    nn.checkOperation(OperationCategory.WRITE);\n     metrics.incrCreateSymlinkOps();\n     /* We enforce the MAX_PATH_LENGTH limit even though a symlink target \n      * URI may refer to a non-HDFS file system. \n      */\n     if (!checkPathLength(link)) {\n       throw new IOException(\"Symlink path exceeds \" + MAX_PATH_LENGTH +\n                             \" character limit\");\n                             \n     }\n     if (\"\".equals(target)) {\n       throw new IOException(\"Invalid symlink target\");\n     }\n     final UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n     namesystem.createSymlink(target, link,\n       new PermissionStatus(ugi.getShortUserName(), null, dirPerms), createParent);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void createSymlink(String target, String link, FsPermission dirPerms,\n      boolean createParent) throws IOException {\n    metrics.incrCreateSymlinkOps();\n    /* We enforce the MAX_PATH_LENGTH limit even though a symlink target \n     * URI may refer to a non-HDFS file system. \n     */\n    if (!checkPathLength(link)) {\n      throw new IOException(\"Symlink path exceeds \" + MAX_PATH_LENGTH +\n                            \" character limit\");\n                            \n    }\n    if (\"\".equals(target)) {\n      throw new IOException(\"Invalid symlink target\");\n    }\n    final UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n    namesystem.createSymlink(target, link,\n      new PermissionStatus(ugi.getShortUserName(), null, dirPerms), createParent);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeRpcServer.java",
      "extendedDetails": {}
    },
    "b0632df93ae5d00180b21983d960d50a45f8fb7a": {
      "type": "Ymovefromfile",
      "commitMessage": "HDFS-2197. Refactor RPC call implementations out of NameNode class. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1165463 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/09/11 5:41 PM",
      "commitName": "b0632df93ae5d00180b21983d960d50a45f8fb7a",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "05/09/11 5:34 PM",
      "commitNameOld": "d1438b501dae9efc7aa84de35a57e1b8e6f5645e",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void createSymlink(String target, String link, FsPermission dirPerms,\n      boolean createParent) throws IOException {\n    metrics.incrCreateSymlinkOps();\n    /* We enforce the MAX_PATH_LENGTH limit even though a symlink target \n     * URI may refer to a non-HDFS file system. \n     */\n    if (!checkPathLength(link)) {\n      throw new IOException(\"Symlink path exceeds \" + MAX_PATH_LENGTH +\n                            \" character limit\");\n                            \n    }\n    if (\"\".equals(target)) {\n      throw new IOException(\"Invalid symlink target\");\n    }\n    final UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n    namesystem.createSymlink(target, link,\n      new PermissionStatus(ugi.getShortUserName(), null, dirPerms), createParent);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeRpcServer.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeRpcServer.java",
        "oldMethodName": "createSymlink",
        "newMethodName": "createSymlink"
      }
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void createSymlink(String target, String link, FsPermission dirPerms,\n      boolean createParent) throws IOException {\n    metrics.incrCreateSymlinkOps();\n    /* We enforce the MAX_PATH_LENGTH limit even though a symlink target \n     * URI may refer to a non-HDFS file system. \n     */\n    if (!checkPathLength(link)) {\n      throw new IOException(\"Symlink path exceeds \" + MAX_PATH_LENGTH +\n                            \" character limit\");\n                            \n    }\n    if (\"\".equals(target)) {\n      throw new IOException(\"Invalid symlink target\");\n    }\n    final UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n    namesystem.createSymlink(target, link,\n      new PermissionStatus(ugi.getShortUserName(), null, dirPerms), createParent);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void createSymlink(String target, String link, FsPermission dirPerms,\n      boolean createParent) throws IOException {\n    metrics.incrCreateSymlinkOps();\n    /* We enforce the MAX_PATH_LENGTH limit even though a symlink target \n     * URI may refer to a non-HDFS file system. \n     */\n    if (!checkPathLength(link)) {\n      throw new IOException(\"Symlink path exceeds \" + MAX_PATH_LENGTH +\n                            \" character limit\");\n                            \n    }\n    if (\"\".equals(target)) {\n      throw new IOException(\"Invalid symlink target\");\n    }\n    final UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n    namesystem.createSymlink(target, link,\n      new PermissionStatus(ugi.getShortUserName(), null, dirPerms), createParent);\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,19 @@\n+  public void createSymlink(String target, String link, FsPermission dirPerms, \n+                            boolean createParent) \n+      throws IOException {\n+    metrics.incrCreateSymlinkOps();\n+    /* We enforce the MAX_PATH_LENGTH limit even though a symlink target \n+     * URI may refer to a non-HDFS file system. \n+     */\n+    if (!checkPathLength(link)) {\n+      throw new IOException(\"Symlink path exceeds \" + MAX_PATH_LENGTH +\n+                            \" character limit\");\n+                            \n+    }\n+    if (\"\".equals(target)) {\n+      throw new IOException(\"Invalid symlink target\");\n+    }\n+    final UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n+    namesystem.createSymlink(target, link,\n+      new PermissionStatus(ugi.getShortUserName(), null, dirPerms), createParent);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void createSymlink(String target, String link, FsPermission dirPerms, \n                            boolean createParent) \n      throws IOException {\n    metrics.incrCreateSymlinkOps();\n    /* We enforce the MAX_PATH_LENGTH limit even though a symlink target \n     * URI may refer to a non-HDFS file system. \n     */\n    if (!checkPathLength(link)) {\n      throw new IOException(\"Symlink path exceeds \" + MAX_PATH_LENGTH +\n                            \" character limit\");\n                            \n    }\n    if (\"\".equals(target)) {\n      throw new IOException(\"Invalid symlink target\");\n    }\n    final UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n    namesystem.createSymlink(target, link,\n      new PermissionStatus(ugi.getShortUserName(), null, dirPerms), createParent);\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/NameNode.java"
    }
  }
}