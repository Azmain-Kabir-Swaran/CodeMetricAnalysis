{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LogWebService.java",
  "functionName": "getContainerLogsInfo",
  "functionId": "getContainerLogsInfo___req-HttpServletRequest(annotations-@Context)__res-HttpServletResponse(annotations-@Context)__containerIdStr-String(annotations-@PathParam(YarnWebServiceParams.CONTAINER_ID))__nmId-String(annotations-@QueryParam(YarnWebServiceParams.NM_ID))__redirectedFromNode-boolean(annotations-@QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)-@DefaultValue(\"false\"))__clusterId-String(annotations-@QueryParam(YarnWebServiceParams.CLUSTER_ID))__manualRedirection-boolean(annotations-@QueryParam(YarnWebServiceParams.MANUAL_REDIRECTION)-@DefaultValue(\"false\"))",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/LogWebService.java",
  "functionStartLine": 146,
  "functionEndLine": 162,
  "numCommitsSeen": 51,
  "timeTaken": 8658,
  "changeHistory": [
    "ab3642955971dec1ce285f39cf0f02e6cc64b4b2",
    "71b2c2ffe962ff4f5799e1f55961db687cb55842",
    "dd2607e3ec3c349130e4143b0f67b23e11da420a",
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "8d1981806feb8278966c02a9eff42d72541bb35e",
    "91cc070d67533ebb3325b982eba2135e0d175a82",
    "ce2d5bfa5f84e7e563980796549b56ef1e4bbf1e",
    "9dbfab1284015af6983b4a55b79c9e65bc0194e5",
    "8528d85a68c0e6ea71026df4d3026e7edc206b2d",
    "cf695577aa6d9715b77ab7309ecd792ef226c439"
  ],
  "changeHistoryShort": {
    "ab3642955971dec1ce285f39cf0f02e6cc64b4b2": "Ymultichange(Yparameterchange,Ybodychange)",
    "71b2c2ffe962ff4f5799e1f55961db687cb55842": "Ybodychange",
    "dd2607e3ec3c349130e4143b0f67b23e11da420a": "Ybodychange",
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "8d1981806feb8278966c02a9eff42d72541bb35e": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparametermetachange,Yrename,Yparameterchange)",
    "91cc070d67533ebb3325b982eba2135e0d175a82": "Ybodychange",
    "ce2d5bfa5f84e7e563980796549b56ef1e4bbf1e": "Ybodychange",
    "9dbfab1284015af6983b4a55b79c9e65bc0194e5": "Ybodychange",
    "8528d85a68c0e6ea71026df4d3026e7edc206b2d": "Ymultichange(Yparameterchange,Ybodychange)",
    "cf695577aa6d9715b77ab7309ecd792ef226c439": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ab3642955971dec1ce285f39cf0f02e6cc64b4b2": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-10215. Endpoint for obtaining direct URL for the logs. Contributed by Andras Gyori\n",
      "commitDate": "28/04/20 9:53 AM",
      "commitName": "ab3642955971dec1ce285f39cf0f02e6cc64b4b2",
      "commitAuthor": "Szilard Nemeth",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-10215. Endpoint for obtaining direct URL for the logs. Contributed by Andras Gyori\n",
          "commitDate": "28/04/20 9:53 AM",
          "commitName": "ab3642955971dec1ce285f39cf0f02e6cc64b4b2",
          "commitAuthor": "Szilard Nemeth",
          "commitDateOld": "06/02/20 3:25 AM",
          "commitNameOld": "71b2c2ffe962ff4f5799e1f55961db687cb55842",
          "commitAuthorOld": "Szilard Nemeth",
          "daysBetweenCommits": 82.23,
          "commitsBetweenForRepo": 275,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,17 @@\n   public Response getContainerLogsInfo(@Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n       @QueryParam(YarnWebServiceParams.NM_ID) String nmId,\n       @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)\n       @DefaultValue(\"false\") boolean redirectedFromNode,\n-      @QueryParam(YarnWebServiceParams.CLUSTER_ID) String clusterId) {\n+      @QueryParam(YarnWebServiceParams.CLUSTER_ID) String clusterId,\n+      @QueryParam(YarnWebServiceParams.MANUAL_REDIRECTION)\n+      @DefaultValue(\"false\") boolean manualRedirection) {\n     initForReadableEndpoints(res);\n \n     WrappedLogMetaRequest.Builder logMetaRequestBuilder \u003d\n         LogServlet.createRequestFromContainerId(containerIdStr);\n \n     return logServlet.getContainerLogsInfo(req, logMetaRequestBuilder, nmId,\n-        redirectedFromNode, clusterId);\n+        redirectedFromNode, clusterId, manualRedirection);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response getContainerLogsInfo(@Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n      @QueryParam(YarnWebServiceParams.NM_ID) String nmId,\n      @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)\n      @DefaultValue(\"false\") boolean redirectedFromNode,\n      @QueryParam(YarnWebServiceParams.CLUSTER_ID) String clusterId,\n      @QueryParam(YarnWebServiceParams.MANUAL_REDIRECTION)\n      @DefaultValue(\"false\") boolean manualRedirection) {\n    initForReadableEndpoints(res);\n\n    WrappedLogMetaRequest.Builder logMetaRequestBuilder \u003d\n        LogServlet.createRequestFromContainerId(containerIdStr);\n\n    return logServlet.getContainerLogsInfo(req, logMetaRequestBuilder, nmId,\n        redirectedFromNode, clusterId, manualRedirection);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/LogWebService.java",
          "extendedDetails": {
            "oldValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), containerIdStr-String(annotations-@PathParam(YarnWebServiceParams.CONTAINER_ID)), nmId-String(annotations-@QueryParam(YarnWebServiceParams.NM_ID)), redirectedFromNode-boolean(annotations-@QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)-@DefaultValue(\"false\")), clusterId-String(annotations-@QueryParam(YarnWebServiceParams.CLUSTER_ID))]",
            "newValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), containerIdStr-String(annotations-@PathParam(YarnWebServiceParams.CONTAINER_ID)), nmId-String(annotations-@QueryParam(YarnWebServiceParams.NM_ID)), redirectedFromNode-boolean(annotations-@QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)-@DefaultValue(\"false\")), clusterId-String(annotations-@QueryParam(YarnWebServiceParams.CLUSTER_ID)), manualRedirection-boolean(annotations-@QueryParam(YarnWebServiceParams.MANUAL_REDIRECTION)-@DefaultValue(\"false\"))]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-10215. Endpoint for obtaining direct URL for the logs. Contributed by Andras Gyori\n",
          "commitDate": "28/04/20 9:53 AM",
          "commitName": "ab3642955971dec1ce285f39cf0f02e6cc64b4b2",
          "commitAuthor": "Szilard Nemeth",
          "commitDateOld": "06/02/20 3:25 AM",
          "commitNameOld": "71b2c2ffe962ff4f5799e1f55961db687cb55842",
          "commitAuthorOld": "Szilard Nemeth",
          "daysBetweenCommits": 82.23,
          "commitsBetweenForRepo": 275,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,17 @@\n   public Response getContainerLogsInfo(@Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n       @QueryParam(YarnWebServiceParams.NM_ID) String nmId,\n       @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)\n       @DefaultValue(\"false\") boolean redirectedFromNode,\n-      @QueryParam(YarnWebServiceParams.CLUSTER_ID) String clusterId) {\n+      @QueryParam(YarnWebServiceParams.CLUSTER_ID) String clusterId,\n+      @QueryParam(YarnWebServiceParams.MANUAL_REDIRECTION)\n+      @DefaultValue(\"false\") boolean manualRedirection) {\n     initForReadableEndpoints(res);\n \n     WrappedLogMetaRequest.Builder logMetaRequestBuilder \u003d\n         LogServlet.createRequestFromContainerId(containerIdStr);\n \n     return logServlet.getContainerLogsInfo(req, logMetaRequestBuilder, nmId,\n-        redirectedFromNode, clusterId);\n+        redirectedFromNode, clusterId, manualRedirection);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response getContainerLogsInfo(@Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n      @QueryParam(YarnWebServiceParams.NM_ID) String nmId,\n      @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)\n      @DefaultValue(\"false\") boolean redirectedFromNode,\n      @QueryParam(YarnWebServiceParams.CLUSTER_ID) String clusterId,\n      @QueryParam(YarnWebServiceParams.MANUAL_REDIRECTION)\n      @DefaultValue(\"false\") boolean manualRedirection) {\n    initForReadableEndpoints(res);\n\n    WrappedLogMetaRequest.Builder logMetaRequestBuilder \u003d\n        LogServlet.createRequestFromContainerId(containerIdStr);\n\n    return logServlet.getContainerLogsInfo(req, logMetaRequestBuilder, nmId,\n        redirectedFromNode, clusterId, manualRedirection);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/LogWebService.java",
          "extendedDetails": {}
        }
      ]
    },
    "71b2c2ffe962ff4f5799e1f55961db687cb55842": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10101. Support listing of aggregated logs for containers belonging to an application attempt. Contributed by Adam Antal\n",
      "commitDate": "06/02/20 3:25 AM",
      "commitName": "71b2c2ffe962ff4f5799e1f55961db687cb55842",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "06/01/20 8:16 AM",
      "commitNameOld": "dd2607e3ec3c349130e4143b0f67b23e11da420a",
      "commitAuthorOld": "Szilard Nemeth",
      "daysBetweenCommits": 30.8,
      "commitsBetweenForRepo": 112,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,15 @@\n   public Response getContainerLogsInfo(@Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n       @QueryParam(YarnWebServiceParams.NM_ID) String nmId,\n       @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)\n       @DefaultValue(\"false\") boolean redirectedFromNode,\n       @QueryParam(YarnWebServiceParams.CLUSTER_ID) String clusterId) {\n     initForReadableEndpoints(res);\n-    return logServlet.getContainerLogsInfo(req, containerIdStr, nmId,\n+\n+    WrappedLogMetaRequest.Builder logMetaRequestBuilder \u003d\n+        LogServlet.createRequestFromContainerId(containerIdStr);\n+\n+    return logServlet.getContainerLogsInfo(req, logMetaRequestBuilder, nmId,\n         redirectedFromNode, clusterId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response getContainerLogsInfo(@Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n      @QueryParam(YarnWebServiceParams.NM_ID) String nmId,\n      @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)\n      @DefaultValue(\"false\") boolean redirectedFromNode,\n      @QueryParam(YarnWebServiceParams.CLUSTER_ID) String clusterId) {\n    initForReadableEndpoints(res);\n\n    WrappedLogMetaRequest.Builder logMetaRequestBuilder \u003d\n        LogServlet.createRequestFromContainerId(containerIdStr);\n\n    return logServlet.getContainerLogsInfo(req, logMetaRequestBuilder, nmId,\n        redirectedFromNode, clusterId);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/LogWebService.java",
      "extendedDetails": {}
    },
    "dd2607e3ec3c349130e4143b0f67b23e11da420a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10026. Pull out common code pieces from ATS v1.5 and v2. Contributed by Adam Antal\n",
      "commitDate": "06/01/20 8:16 AM",
      "commitName": "dd2607e3ec3c349130e4143b0f67b23e11da420a",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "15/03/19 4:20 PM",
      "commitNameOld": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 296.7,
      "commitsBetweenForRepo": 1914,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,89 +1,11 @@\n   public Response getContainerLogsInfo(@Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n       @QueryParam(YarnWebServiceParams.NM_ID) String nmId,\n       @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)\n       @DefaultValue(\"false\") boolean redirectedFromNode,\n       @QueryParam(YarnWebServiceParams.CLUSTER_ID) String clusterId) {\n-    ContainerId containerId \u003d null;\n     initForReadableEndpoints(res);\n-    try {\n-      containerId \u003d ContainerId.fromString(containerIdStr);\n-    } catch (IllegalArgumentException e) {\n-      throw new BadRequestException(\"invalid container id, \" + containerIdStr);\n-    }\n-\n-    ApplicationId appId \u003d\n-        containerId.getApplicationAttemptId().getApplicationId();\n-    AppInfo appInfo;\n-    try {\n-      appInfo \u003d getApp(req, appId.toString(), clusterId);\n-    } catch (Exception ex) {\n-      // directly find logs from HDFS.\n-      return LogWebServiceUtils\n-          .getContainerLogMeta(factory, appId, null, null, containerIdStr,\n-              false);\n-    }\n-    // if the application finishes, directly find logs\n-    // from HDFS.\n-    if (LogWebServiceUtils.isFinishedState(appInfo.getAppState())) {\n-      return LogWebServiceUtils\n-          .getContainerLogMeta(factory, appId, null, null, containerIdStr,\n-              false);\n-    }\n-    if (LogWebServiceUtils.isRunningState(appInfo.getAppState())) {\n-      String appOwner \u003d appInfo.getUser();\n-      String nodeHttpAddress \u003d null;\n-      if (nmId !\u003d null \u0026\u0026 !nmId.isEmpty()) {\n-        try {\n-          nodeHttpAddress \u003d\n-              LogWebServiceUtils.getNMWebAddressFromRM(yarnConf, nmId);\n-        } catch (Exception ex) {\n-          LOG.debug(\"{}\", ex);\n-        }\n-      }\n-      if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n-        ContainerInfo containerInfo;\n-        try {\n-          containerInfo \u003d\n-              getContainer(req, appId.toString(), containerId.toString(),\n-                  clusterId);\n-        } catch (Exception ex) {\n-          // return log meta for the aggregated logs if exists.\n-          // It will also return empty log meta for the local logs.\n-          return LogWebServiceUtils\n-              .getContainerLogMeta(factory, appId, appOwner, null,\n-                  containerIdStr, true);\n-        }\n-        nodeHttpAddress \u003d containerInfo.getNodeHttpAddress();\n-        // make sure nodeHttpAddress is not null and not empty. Otherwise,\n-        // we would only get log meta for aggregated logs instead of\n-        // re-directing the request\n-        if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()\n-            || redirectedFromNode) {\n-          // return log meta for the aggregated logs if exists.\n-          // It will also return empty log meta for the local logs.\n-          // If this is the redirect request from NM, we should not\n-          // re-direct the request back. Simply output the aggregated log meta.\n-          return LogWebServiceUtils\n-              .getContainerLogMeta(factory, appId, appOwner, null,\n-                  containerIdStr, true);\n-        }\n-      }\n-      String uri \u003d \"/\" + containerId.toString() + \"/logs\";\n-      String resURI \u003d JOINER.join(\n-          LogWebServiceUtils.getAbsoluteNMWebAddress(yarnConf, nodeHttpAddress),\n-          NM_DOWNLOAD_URI_STR, uri);\n-      String query \u003d req.getQueryString();\n-      if (query !\u003d null \u0026\u0026 !query.isEmpty()) {\n-        resURI +\u003d \"?\" + query;\n-      }\n-      Response.ResponseBuilder response \u003d\n-          Response.status(HttpServletResponse.SC_TEMPORARY_REDIRECT);\n-      response.header(\"Location\", resURI);\n-      return response.build();\n-    } else {\n-      throw new NotFoundException(\n-          \"The application is not at Running or Finished State.\");\n-    }\n+    return logServlet.getContainerLogsInfo(req, containerIdStr, nmId,\n+        redirectedFromNode, clusterId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response getContainerLogsInfo(@Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n      @QueryParam(YarnWebServiceParams.NM_ID) String nmId,\n      @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)\n      @DefaultValue(\"false\") boolean redirectedFromNode,\n      @QueryParam(YarnWebServiceParams.CLUSTER_ID) String clusterId) {\n    initForReadableEndpoints(res);\n    return logServlet.getContainerLogsInfo(req, containerIdStr, nmId,\n        redirectedFromNode, clusterId);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/LogWebService.java",
      "extendedDetails": {}
    },
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "11/10/18 4:26 PM",
      "commitNameOld": "8d1981806feb8278966c02a9eff42d72541bb35e",
      "commitAuthorOld": "Vrushali C",
      "daysBetweenCommits": 155.0,
      "commitsBetweenForRepo": 1186,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,91 +1,89 @@\n   public Response getContainerLogsInfo(@Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n       @QueryParam(YarnWebServiceParams.NM_ID) String nmId,\n       @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)\n       @DefaultValue(\"false\") boolean redirectedFromNode,\n       @QueryParam(YarnWebServiceParams.CLUSTER_ID) String clusterId) {\n     ContainerId containerId \u003d null;\n     initForReadableEndpoints(res);\n     try {\n       containerId \u003d ContainerId.fromString(containerIdStr);\n     } catch (IllegalArgumentException e) {\n       throw new BadRequestException(\"invalid container id, \" + containerIdStr);\n     }\n \n     ApplicationId appId \u003d\n         containerId.getApplicationAttemptId().getApplicationId();\n     AppInfo appInfo;\n     try {\n       appInfo \u003d getApp(req, appId.toString(), clusterId);\n     } catch (Exception ex) {\n       // directly find logs from HDFS.\n       return LogWebServiceUtils\n           .getContainerLogMeta(factory, appId, null, null, containerIdStr,\n               false);\n     }\n     // if the application finishes, directly find logs\n     // from HDFS.\n     if (LogWebServiceUtils.isFinishedState(appInfo.getAppState())) {\n       return LogWebServiceUtils\n           .getContainerLogMeta(factory, appId, null, null, containerIdStr,\n               false);\n     }\n     if (LogWebServiceUtils.isRunningState(appInfo.getAppState())) {\n       String appOwner \u003d appInfo.getUser();\n       String nodeHttpAddress \u003d null;\n       if (nmId !\u003d null \u0026\u0026 !nmId.isEmpty()) {\n         try {\n           nodeHttpAddress \u003d\n               LogWebServiceUtils.getNMWebAddressFromRM(yarnConf, nmId);\n         } catch (Exception ex) {\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(ex.getMessage());\n-          }\n+          LOG.debug(\"{}\", ex);\n         }\n       }\n       if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n         ContainerInfo containerInfo;\n         try {\n           containerInfo \u003d\n               getContainer(req, appId.toString(), containerId.toString(),\n                   clusterId);\n         } catch (Exception ex) {\n           // return log meta for the aggregated logs if exists.\n           // It will also return empty log meta for the local logs.\n           return LogWebServiceUtils\n               .getContainerLogMeta(factory, appId, appOwner, null,\n                   containerIdStr, true);\n         }\n         nodeHttpAddress \u003d containerInfo.getNodeHttpAddress();\n         // make sure nodeHttpAddress is not null and not empty. Otherwise,\n         // we would only get log meta for aggregated logs instead of\n         // re-directing the request\n         if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()\n             || redirectedFromNode) {\n           // return log meta for the aggregated logs if exists.\n           // It will also return empty log meta for the local logs.\n           // If this is the redirect request from NM, we should not\n           // re-direct the request back. Simply output the aggregated log meta.\n           return LogWebServiceUtils\n               .getContainerLogMeta(factory, appId, appOwner, null,\n                   containerIdStr, true);\n         }\n       }\n       String uri \u003d \"/\" + containerId.toString() + \"/logs\";\n       String resURI \u003d JOINER.join(\n           LogWebServiceUtils.getAbsoluteNMWebAddress(yarnConf, nodeHttpAddress),\n           NM_DOWNLOAD_URI_STR, uri);\n       String query \u003d req.getQueryString();\n       if (query !\u003d null \u0026\u0026 !query.isEmpty()) {\n         resURI +\u003d \"?\" + query;\n       }\n       Response.ResponseBuilder response \u003d\n           Response.status(HttpServletResponse.SC_TEMPORARY_REDIRECT);\n       response.header(\"Location\", resURI);\n       return response.build();\n     } else {\n       throw new NotFoundException(\n           \"The application is not at Running or Finished State.\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response getContainerLogsInfo(@Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n      @QueryParam(YarnWebServiceParams.NM_ID) String nmId,\n      @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)\n      @DefaultValue(\"false\") boolean redirectedFromNode,\n      @QueryParam(YarnWebServiceParams.CLUSTER_ID) String clusterId) {\n    ContainerId containerId \u003d null;\n    initForReadableEndpoints(res);\n    try {\n      containerId \u003d ContainerId.fromString(containerIdStr);\n    } catch (IllegalArgumentException e) {\n      throw new BadRequestException(\"invalid container id, \" + containerIdStr);\n    }\n\n    ApplicationId appId \u003d\n        containerId.getApplicationAttemptId().getApplicationId();\n    AppInfo appInfo;\n    try {\n      appInfo \u003d getApp(req, appId.toString(), clusterId);\n    } catch (Exception ex) {\n      // directly find logs from HDFS.\n      return LogWebServiceUtils\n          .getContainerLogMeta(factory, appId, null, null, containerIdStr,\n              false);\n    }\n    // if the application finishes, directly find logs\n    // from HDFS.\n    if (LogWebServiceUtils.isFinishedState(appInfo.getAppState())) {\n      return LogWebServiceUtils\n          .getContainerLogMeta(factory, appId, null, null, containerIdStr,\n              false);\n    }\n    if (LogWebServiceUtils.isRunningState(appInfo.getAppState())) {\n      String appOwner \u003d appInfo.getUser();\n      String nodeHttpAddress \u003d null;\n      if (nmId !\u003d null \u0026\u0026 !nmId.isEmpty()) {\n        try {\n          nodeHttpAddress \u003d\n              LogWebServiceUtils.getNMWebAddressFromRM(yarnConf, nmId);\n        } catch (Exception ex) {\n          LOG.debug(\"{}\", ex);\n        }\n      }\n      if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n        ContainerInfo containerInfo;\n        try {\n          containerInfo \u003d\n              getContainer(req, appId.toString(), containerId.toString(),\n                  clusterId);\n        } catch (Exception ex) {\n          // return log meta for the aggregated logs if exists.\n          // It will also return empty log meta for the local logs.\n          return LogWebServiceUtils\n              .getContainerLogMeta(factory, appId, appOwner, null,\n                  containerIdStr, true);\n        }\n        nodeHttpAddress \u003d containerInfo.getNodeHttpAddress();\n        // make sure nodeHttpAddress is not null and not empty. Otherwise,\n        // we would only get log meta for aggregated logs instead of\n        // re-directing the request\n        if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()\n            || redirectedFromNode) {\n          // return log meta for the aggregated logs if exists.\n          // It will also return empty log meta for the local logs.\n          // If this is the redirect request from NM, we should not\n          // re-direct the request back. Simply output the aggregated log meta.\n          return LogWebServiceUtils\n              .getContainerLogMeta(factory, appId, appOwner, null,\n                  containerIdStr, true);\n        }\n      }\n      String uri \u003d \"/\" + containerId.toString() + \"/logs\";\n      String resURI \u003d JOINER.join(\n          LogWebServiceUtils.getAbsoluteNMWebAddress(yarnConf, nodeHttpAddress),\n          NM_DOWNLOAD_URI_STR, uri);\n      String query \u003d req.getQueryString();\n      if (query !\u003d null \u0026\u0026 !query.isEmpty()) {\n        resURI +\u003d \"?\" + query;\n      }\n      Response.ResponseBuilder response \u003d\n          Response.status(HttpServletResponse.SC_TEMPORARY_REDIRECT);\n      response.header(\"Location\", resURI);\n      return response.build();\n    } else {\n      throw new NotFoundException(\n          \"The application is not at Running or Finished State.\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/LogWebService.java",
      "extendedDetails": {}
    },
    "8d1981806feb8278966c02a9eff42d72541bb35e": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparametermetachange,Yrename,Yparameterchange)",
      "commitMessage": "YARN-5742 Serve aggregated logs of historical apps from timeline service. Contributed by Rohith Sharma KS\n",
      "commitDate": "11/10/18 4:26 PM",
      "commitName": "8d1981806feb8278966c02a9eff42d72541bb35e",
      "commitAuthor": "Vrushali C",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-5742 Serve aggregated logs of historical apps from timeline service. Contributed by Rohith Sharma KS\n",
          "commitDate": "11/10/18 4:26 PM",
          "commitName": "8d1981806feb8278966c02a9eff42d72541bb35e",
          "commitAuthor": "Vrushali C",
          "commitDateOld": "11/10/18 3:35 PM",
          "commitNameOld": "d91d47bc739f23ca22a7e44fc83d449db57ab130",
          "commitAuthorOld": "Robert Kanter",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,91 @@\n-  private Response getContainerLogMeta(ApplicationId appId, String appOwner,\n-      final String nodeId, final String containerIdStr,\n-      boolean emptyLocalContainerLogMeta) {\n+  public Response getContainerLogsInfo(@Context HttpServletRequest req,\n+      @Context HttpServletResponse res,\n+      @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n+      @QueryParam(YarnWebServiceParams.NM_ID) String nmId,\n+      @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)\n+      @DefaultValue(\"false\") boolean redirectedFromNode,\n+      @QueryParam(YarnWebServiceParams.CLUSTER_ID) String clusterId) {\n+    ContainerId containerId \u003d null;\n+    initForReadableEndpoints(res);\n     try {\n-      ContainerLogsRequest request \u003d new ContainerLogsRequest();\n-      request.setAppId(appId);\n-      request.setAppOwner(appOwner);\n-      request.setContainerId(containerIdStr);\n-      request.setNodeId(nodeId);\n-      List\u003cContainerLogMeta\u003e containerLogMeta \u003d factory\n-          .getFileControllerForRead(appId, appOwner)\n-          .readAggregatedLogsMeta(request);\n-      if (containerLogMeta.isEmpty()) {\n-        throw new NotFoundException(\n-            \"Can not get log meta for container: \" + containerIdStr);\n-      }\n-      List\u003cContainerLogsInfo\u003e containersLogsInfo \u003d new ArrayList\u003c\u003e();\n-      for (ContainerLogMeta meta : containerLogMeta) {\n-        ContainerLogsInfo logInfo \u003d new ContainerLogsInfo(meta,\n-            ContainerLogAggregationType.AGGREGATED);\n-        containersLogsInfo.add(logInfo);\n-      }\n-      if (emptyLocalContainerLogMeta) {\n-        ContainerLogMeta emptyMeta \u003d new ContainerLogMeta(\n-            containerIdStr, \"N/A\");\n-        ContainerLogsInfo empty \u003d new ContainerLogsInfo(emptyMeta,\n-            ContainerLogAggregationType.LOCAL);\n-        containersLogsInfo.add(empty);\n-      }\n-      GenericEntity\u003cList\u003cContainerLogsInfo\u003e\u003e meta \u003d new GenericEntity\u003cList\u003c\n-          ContainerLogsInfo\u003e\u003e(containersLogsInfo){};\n-      ResponseBuilder response \u003d Response.ok(meta);\n-      // Sending the X-Content-Type-Options response header with the value\n-      // nosniff will prevent Internet Explorer from MIME-sniffing a response\n-      // away from the declared content-type.\n-      response.header(\"X-Content-Type-Options\", \"nosniff\");\n-      return response.build();\n+      containerId \u003d ContainerId.fromString(containerIdStr);\n+    } catch (IllegalArgumentException e) {\n+      throw new BadRequestException(\"invalid container id, \" + containerIdStr);\n+    }\n+\n+    ApplicationId appId \u003d\n+        containerId.getApplicationAttemptId().getApplicationId();\n+    AppInfo appInfo;\n+    try {\n+      appInfo \u003d getApp(req, appId.toString(), clusterId);\n     } catch (Exception ex) {\n-      throw new WebApplicationException(ex);\n+      // directly find logs from HDFS.\n+      return LogWebServiceUtils\n+          .getContainerLogMeta(factory, appId, null, null, containerIdStr,\n+              false);\n+    }\n+    // if the application finishes, directly find logs\n+    // from HDFS.\n+    if (LogWebServiceUtils.isFinishedState(appInfo.getAppState())) {\n+      return LogWebServiceUtils\n+          .getContainerLogMeta(factory, appId, null, null, containerIdStr,\n+              false);\n+    }\n+    if (LogWebServiceUtils.isRunningState(appInfo.getAppState())) {\n+      String appOwner \u003d appInfo.getUser();\n+      String nodeHttpAddress \u003d null;\n+      if (nmId !\u003d null \u0026\u0026 !nmId.isEmpty()) {\n+        try {\n+          nodeHttpAddress \u003d\n+              LogWebServiceUtils.getNMWebAddressFromRM(yarnConf, nmId);\n+        } catch (Exception ex) {\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(ex.getMessage());\n+          }\n+        }\n+      }\n+      if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n+        ContainerInfo containerInfo;\n+        try {\n+          containerInfo \u003d\n+              getContainer(req, appId.toString(), containerId.toString(),\n+                  clusterId);\n+        } catch (Exception ex) {\n+          // return log meta for the aggregated logs if exists.\n+          // It will also return empty log meta for the local logs.\n+          return LogWebServiceUtils\n+              .getContainerLogMeta(factory, appId, appOwner, null,\n+                  containerIdStr, true);\n+        }\n+        nodeHttpAddress \u003d containerInfo.getNodeHttpAddress();\n+        // make sure nodeHttpAddress is not null and not empty. Otherwise,\n+        // we would only get log meta for aggregated logs instead of\n+        // re-directing the request\n+        if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()\n+            || redirectedFromNode) {\n+          // return log meta for the aggregated logs if exists.\n+          // It will also return empty log meta for the local logs.\n+          // If this is the redirect request from NM, we should not\n+          // re-direct the request back. Simply output the aggregated log meta.\n+          return LogWebServiceUtils\n+              .getContainerLogMeta(factory, appId, appOwner, null,\n+                  containerIdStr, true);\n+        }\n+      }\n+      String uri \u003d \"/\" + containerId.toString() + \"/logs\";\n+      String resURI \u003d JOINER.join(\n+          LogWebServiceUtils.getAbsoluteNMWebAddress(yarnConf, nodeHttpAddress),\n+          NM_DOWNLOAD_URI_STR, uri);\n+      String query \u003d req.getQueryString();\n+      if (query !\u003d null \u0026\u0026 !query.isEmpty()) {\n+        resURI +\u003d \"?\" + query;\n+      }\n+      Response.ResponseBuilder response \u003d\n+          Response.status(HttpServletResponse.SC_TEMPORARY_REDIRECT);\n+      response.header(\"Location\", resURI);\n+      return response.build();\n+    } else {\n+      throw new NotFoundException(\n+          \"The application is not at Running or Finished State.\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response getContainerLogsInfo(@Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n      @QueryParam(YarnWebServiceParams.NM_ID) String nmId,\n      @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)\n      @DefaultValue(\"false\") boolean redirectedFromNode,\n      @QueryParam(YarnWebServiceParams.CLUSTER_ID) String clusterId) {\n    ContainerId containerId \u003d null;\n    initForReadableEndpoints(res);\n    try {\n      containerId \u003d ContainerId.fromString(containerIdStr);\n    } catch (IllegalArgumentException e) {\n      throw new BadRequestException(\"invalid container id, \" + containerIdStr);\n    }\n\n    ApplicationId appId \u003d\n        containerId.getApplicationAttemptId().getApplicationId();\n    AppInfo appInfo;\n    try {\n      appInfo \u003d getApp(req, appId.toString(), clusterId);\n    } catch (Exception ex) {\n      // directly find logs from HDFS.\n      return LogWebServiceUtils\n          .getContainerLogMeta(factory, appId, null, null, containerIdStr,\n              false);\n    }\n    // if the application finishes, directly find logs\n    // from HDFS.\n    if (LogWebServiceUtils.isFinishedState(appInfo.getAppState())) {\n      return LogWebServiceUtils\n          .getContainerLogMeta(factory, appId, null, null, containerIdStr,\n              false);\n    }\n    if (LogWebServiceUtils.isRunningState(appInfo.getAppState())) {\n      String appOwner \u003d appInfo.getUser();\n      String nodeHttpAddress \u003d null;\n      if (nmId !\u003d null \u0026\u0026 !nmId.isEmpty()) {\n        try {\n          nodeHttpAddress \u003d\n              LogWebServiceUtils.getNMWebAddressFromRM(yarnConf, nmId);\n        } catch (Exception ex) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(ex.getMessage());\n          }\n        }\n      }\n      if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n        ContainerInfo containerInfo;\n        try {\n          containerInfo \u003d\n              getContainer(req, appId.toString(), containerId.toString(),\n                  clusterId);\n        } catch (Exception ex) {\n          // return log meta for the aggregated logs if exists.\n          // It will also return empty log meta for the local logs.\n          return LogWebServiceUtils\n              .getContainerLogMeta(factory, appId, appOwner, null,\n                  containerIdStr, true);\n        }\n        nodeHttpAddress \u003d containerInfo.getNodeHttpAddress();\n        // make sure nodeHttpAddress is not null and not empty. Otherwise,\n        // we would only get log meta for aggregated logs instead of\n        // re-directing the request\n        if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()\n            || redirectedFromNode) {\n          // return log meta for the aggregated logs if exists.\n          // It will also return empty log meta for the local logs.\n          // If this is the redirect request from NM, we should not\n          // re-direct the request back. Simply output the aggregated log meta.\n          return LogWebServiceUtils\n              .getContainerLogMeta(factory, appId, appOwner, null,\n                  containerIdStr, true);\n        }\n      }\n      String uri \u003d \"/\" + containerId.toString() + \"/logs\";\n      String resURI \u003d JOINER.join(\n          LogWebServiceUtils.getAbsoluteNMWebAddress(yarnConf, nodeHttpAddress),\n          NM_DOWNLOAD_URI_STR, uri);\n      String query \u003d req.getQueryString();\n      if (query !\u003d null \u0026\u0026 !query.isEmpty()) {\n        resURI +\u003d \"?\" + query;\n      }\n      Response.ResponseBuilder response \u003d\n          Response.status(HttpServletResponse.SC_TEMPORARY_REDIRECT);\n      response.header(\"Location\", resURI);\n      return response.build();\n    } else {\n      throw new NotFoundException(\n          \"The application is not at Running or Finished State.\");\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/LogWebService.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/AHSWebServices.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/LogWebService.java",
            "oldMethodName": "getContainerLogMeta",
            "newMethodName": "getContainerLogsInfo"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-5742 Serve aggregated logs of historical apps from timeline service. Contributed by Rohith Sharma KS\n",
          "commitDate": "11/10/18 4:26 PM",
          "commitName": "8d1981806feb8278966c02a9eff42d72541bb35e",
          "commitAuthor": "Vrushali C",
          "commitDateOld": "11/10/18 3:35 PM",
          "commitNameOld": "d91d47bc739f23ca22a7e44fc83d449db57ab130",
          "commitAuthorOld": "Robert Kanter",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,91 @@\n-  private Response getContainerLogMeta(ApplicationId appId, String appOwner,\n-      final String nodeId, final String containerIdStr,\n-      boolean emptyLocalContainerLogMeta) {\n+  public Response getContainerLogsInfo(@Context HttpServletRequest req,\n+      @Context HttpServletResponse res,\n+      @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n+      @QueryParam(YarnWebServiceParams.NM_ID) String nmId,\n+      @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)\n+      @DefaultValue(\"false\") boolean redirectedFromNode,\n+      @QueryParam(YarnWebServiceParams.CLUSTER_ID) String clusterId) {\n+    ContainerId containerId \u003d null;\n+    initForReadableEndpoints(res);\n     try {\n-      ContainerLogsRequest request \u003d new ContainerLogsRequest();\n-      request.setAppId(appId);\n-      request.setAppOwner(appOwner);\n-      request.setContainerId(containerIdStr);\n-      request.setNodeId(nodeId);\n-      List\u003cContainerLogMeta\u003e containerLogMeta \u003d factory\n-          .getFileControllerForRead(appId, appOwner)\n-          .readAggregatedLogsMeta(request);\n-      if (containerLogMeta.isEmpty()) {\n-        throw new NotFoundException(\n-            \"Can not get log meta for container: \" + containerIdStr);\n-      }\n-      List\u003cContainerLogsInfo\u003e containersLogsInfo \u003d new ArrayList\u003c\u003e();\n-      for (ContainerLogMeta meta : containerLogMeta) {\n-        ContainerLogsInfo logInfo \u003d new ContainerLogsInfo(meta,\n-            ContainerLogAggregationType.AGGREGATED);\n-        containersLogsInfo.add(logInfo);\n-      }\n-      if (emptyLocalContainerLogMeta) {\n-        ContainerLogMeta emptyMeta \u003d new ContainerLogMeta(\n-            containerIdStr, \"N/A\");\n-        ContainerLogsInfo empty \u003d new ContainerLogsInfo(emptyMeta,\n-            ContainerLogAggregationType.LOCAL);\n-        containersLogsInfo.add(empty);\n-      }\n-      GenericEntity\u003cList\u003cContainerLogsInfo\u003e\u003e meta \u003d new GenericEntity\u003cList\u003c\n-          ContainerLogsInfo\u003e\u003e(containersLogsInfo){};\n-      ResponseBuilder response \u003d Response.ok(meta);\n-      // Sending the X-Content-Type-Options response header with the value\n-      // nosniff will prevent Internet Explorer from MIME-sniffing a response\n-      // away from the declared content-type.\n-      response.header(\"X-Content-Type-Options\", \"nosniff\");\n-      return response.build();\n+      containerId \u003d ContainerId.fromString(containerIdStr);\n+    } catch (IllegalArgumentException e) {\n+      throw new BadRequestException(\"invalid container id, \" + containerIdStr);\n+    }\n+\n+    ApplicationId appId \u003d\n+        containerId.getApplicationAttemptId().getApplicationId();\n+    AppInfo appInfo;\n+    try {\n+      appInfo \u003d getApp(req, appId.toString(), clusterId);\n     } catch (Exception ex) {\n-      throw new WebApplicationException(ex);\n+      // directly find logs from HDFS.\n+      return LogWebServiceUtils\n+          .getContainerLogMeta(factory, appId, null, null, containerIdStr,\n+              false);\n+    }\n+    // if the application finishes, directly find logs\n+    // from HDFS.\n+    if (LogWebServiceUtils.isFinishedState(appInfo.getAppState())) {\n+      return LogWebServiceUtils\n+          .getContainerLogMeta(factory, appId, null, null, containerIdStr,\n+              false);\n+    }\n+    if (LogWebServiceUtils.isRunningState(appInfo.getAppState())) {\n+      String appOwner \u003d appInfo.getUser();\n+      String nodeHttpAddress \u003d null;\n+      if (nmId !\u003d null \u0026\u0026 !nmId.isEmpty()) {\n+        try {\n+          nodeHttpAddress \u003d\n+              LogWebServiceUtils.getNMWebAddressFromRM(yarnConf, nmId);\n+        } catch (Exception ex) {\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(ex.getMessage());\n+          }\n+        }\n+      }\n+      if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n+        ContainerInfo containerInfo;\n+        try {\n+          containerInfo \u003d\n+              getContainer(req, appId.toString(), containerId.toString(),\n+                  clusterId);\n+        } catch (Exception ex) {\n+          // return log meta for the aggregated logs if exists.\n+          // It will also return empty log meta for the local logs.\n+          return LogWebServiceUtils\n+              .getContainerLogMeta(factory, appId, appOwner, null,\n+                  containerIdStr, true);\n+        }\n+        nodeHttpAddress \u003d containerInfo.getNodeHttpAddress();\n+        // make sure nodeHttpAddress is not null and not empty. Otherwise,\n+        // we would only get log meta for aggregated logs instead of\n+        // re-directing the request\n+        if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()\n+            || redirectedFromNode) {\n+          // return log meta for the aggregated logs if exists.\n+          // It will also return empty log meta for the local logs.\n+          // If this is the redirect request from NM, we should not\n+          // re-direct the request back. Simply output the aggregated log meta.\n+          return LogWebServiceUtils\n+              .getContainerLogMeta(factory, appId, appOwner, null,\n+                  containerIdStr, true);\n+        }\n+      }\n+      String uri \u003d \"/\" + containerId.toString() + \"/logs\";\n+      String resURI \u003d JOINER.join(\n+          LogWebServiceUtils.getAbsoluteNMWebAddress(yarnConf, nodeHttpAddress),\n+          NM_DOWNLOAD_URI_STR, uri);\n+      String query \u003d req.getQueryString();\n+      if (query !\u003d null \u0026\u0026 !query.isEmpty()) {\n+        resURI +\u003d \"?\" + query;\n+      }\n+      Response.ResponseBuilder response \u003d\n+          Response.status(HttpServletResponse.SC_TEMPORARY_REDIRECT);\n+      response.header(\"Location\", resURI);\n+      return response.build();\n+    } else {\n+      throw new NotFoundException(\n+          \"The application is not at Running or Finished State.\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response getContainerLogsInfo(@Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n      @QueryParam(YarnWebServiceParams.NM_ID) String nmId,\n      @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)\n      @DefaultValue(\"false\") boolean redirectedFromNode,\n      @QueryParam(YarnWebServiceParams.CLUSTER_ID) String clusterId) {\n    ContainerId containerId \u003d null;\n    initForReadableEndpoints(res);\n    try {\n      containerId \u003d ContainerId.fromString(containerIdStr);\n    } catch (IllegalArgumentException e) {\n      throw new BadRequestException(\"invalid container id, \" + containerIdStr);\n    }\n\n    ApplicationId appId \u003d\n        containerId.getApplicationAttemptId().getApplicationId();\n    AppInfo appInfo;\n    try {\n      appInfo \u003d getApp(req, appId.toString(), clusterId);\n    } catch (Exception ex) {\n      // directly find logs from HDFS.\n      return LogWebServiceUtils\n          .getContainerLogMeta(factory, appId, null, null, containerIdStr,\n              false);\n    }\n    // if the application finishes, directly find logs\n    // from HDFS.\n    if (LogWebServiceUtils.isFinishedState(appInfo.getAppState())) {\n      return LogWebServiceUtils\n          .getContainerLogMeta(factory, appId, null, null, containerIdStr,\n              false);\n    }\n    if (LogWebServiceUtils.isRunningState(appInfo.getAppState())) {\n      String appOwner \u003d appInfo.getUser();\n      String nodeHttpAddress \u003d null;\n      if (nmId !\u003d null \u0026\u0026 !nmId.isEmpty()) {\n        try {\n          nodeHttpAddress \u003d\n              LogWebServiceUtils.getNMWebAddressFromRM(yarnConf, nmId);\n        } catch (Exception ex) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(ex.getMessage());\n          }\n        }\n      }\n      if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n        ContainerInfo containerInfo;\n        try {\n          containerInfo \u003d\n              getContainer(req, appId.toString(), containerId.toString(),\n                  clusterId);\n        } catch (Exception ex) {\n          // return log meta for the aggregated logs if exists.\n          // It will also return empty log meta for the local logs.\n          return LogWebServiceUtils\n              .getContainerLogMeta(factory, appId, appOwner, null,\n                  containerIdStr, true);\n        }\n        nodeHttpAddress \u003d containerInfo.getNodeHttpAddress();\n        // make sure nodeHttpAddress is not null and not empty. Otherwise,\n        // we would only get log meta for aggregated logs instead of\n        // re-directing the request\n        if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()\n            || redirectedFromNode) {\n          // return log meta for the aggregated logs if exists.\n          // It will also return empty log meta for the local logs.\n          // If this is the redirect request from NM, we should not\n          // re-direct the request back. Simply output the aggregated log meta.\n          return LogWebServiceUtils\n              .getContainerLogMeta(factory, appId, appOwner, null,\n                  containerIdStr, true);\n        }\n      }\n      String uri \u003d \"/\" + containerId.toString() + \"/logs\";\n      String resURI \u003d JOINER.join(\n          LogWebServiceUtils.getAbsoluteNMWebAddress(yarnConf, nodeHttpAddress),\n          NM_DOWNLOAD_URI_STR, uri);\n      String query \u003d req.getQueryString();\n      if (query !\u003d null \u0026\u0026 !query.isEmpty()) {\n        resURI +\u003d \"?\" + query;\n      }\n      Response.ResponseBuilder response \u003d\n          Response.status(HttpServletResponse.SC_TEMPORARY_REDIRECT);\n      response.header(\"Location\", resURI);\n      return response.build();\n    } else {\n      throw new NotFoundException(\n          \"The application is not at Running or Finished State.\");\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/LogWebService.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5742 Serve aggregated logs of historical apps from timeline service. Contributed by Rohith Sharma KS\n",
          "commitDate": "11/10/18 4:26 PM",
          "commitName": "8d1981806feb8278966c02a9eff42d72541bb35e",
          "commitAuthor": "Vrushali C",
          "commitDateOld": "11/10/18 3:35 PM",
          "commitNameOld": "d91d47bc739f23ca22a7e44fc83d449db57ab130",
          "commitAuthorOld": "Robert Kanter",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,91 @@\n-  private Response getContainerLogMeta(ApplicationId appId, String appOwner,\n-      final String nodeId, final String containerIdStr,\n-      boolean emptyLocalContainerLogMeta) {\n+  public Response getContainerLogsInfo(@Context HttpServletRequest req,\n+      @Context HttpServletResponse res,\n+      @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n+      @QueryParam(YarnWebServiceParams.NM_ID) String nmId,\n+      @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)\n+      @DefaultValue(\"false\") boolean redirectedFromNode,\n+      @QueryParam(YarnWebServiceParams.CLUSTER_ID) String clusterId) {\n+    ContainerId containerId \u003d null;\n+    initForReadableEndpoints(res);\n     try {\n-      ContainerLogsRequest request \u003d new ContainerLogsRequest();\n-      request.setAppId(appId);\n-      request.setAppOwner(appOwner);\n-      request.setContainerId(containerIdStr);\n-      request.setNodeId(nodeId);\n-      List\u003cContainerLogMeta\u003e containerLogMeta \u003d factory\n-          .getFileControllerForRead(appId, appOwner)\n-          .readAggregatedLogsMeta(request);\n-      if (containerLogMeta.isEmpty()) {\n-        throw new NotFoundException(\n-            \"Can not get log meta for container: \" + containerIdStr);\n-      }\n-      List\u003cContainerLogsInfo\u003e containersLogsInfo \u003d new ArrayList\u003c\u003e();\n-      for (ContainerLogMeta meta : containerLogMeta) {\n-        ContainerLogsInfo logInfo \u003d new ContainerLogsInfo(meta,\n-            ContainerLogAggregationType.AGGREGATED);\n-        containersLogsInfo.add(logInfo);\n-      }\n-      if (emptyLocalContainerLogMeta) {\n-        ContainerLogMeta emptyMeta \u003d new ContainerLogMeta(\n-            containerIdStr, \"N/A\");\n-        ContainerLogsInfo empty \u003d new ContainerLogsInfo(emptyMeta,\n-            ContainerLogAggregationType.LOCAL);\n-        containersLogsInfo.add(empty);\n-      }\n-      GenericEntity\u003cList\u003cContainerLogsInfo\u003e\u003e meta \u003d new GenericEntity\u003cList\u003c\n-          ContainerLogsInfo\u003e\u003e(containersLogsInfo){};\n-      ResponseBuilder response \u003d Response.ok(meta);\n-      // Sending the X-Content-Type-Options response header with the value\n-      // nosniff will prevent Internet Explorer from MIME-sniffing a response\n-      // away from the declared content-type.\n-      response.header(\"X-Content-Type-Options\", \"nosniff\");\n-      return response.build();\n+      containerId \u003d ContainerId.fromString(containerIdStr);\n+    } catch (IllegalArgumentException e) {\n+      throw new BadRequestException(\"invalid container id, \" + containerIdStr);\n+    }\n+\n+    ApplicationId appId \u003d\n+        containerId.getApplicationAttemptId().getApplicationId();\n+    AppInfo appInfo;\n+    try {\n+      appInfo \u003d getApp(req, appId.toString(), clusterId);\n     } catch (Exception ex) {\n-      throw new WebApplicationException(ex);\n+      // directly find logs from HDFS.\n+      return LogWebServiceUtils\n+          .getContainerLogMeta(factory, appId, null, null, containerIdStr,\n+              false);\n+    }\n+    // if the application finishes, directly find logs\n+    // from HDFS.\n+    if (LogWebServiceUtils.isFinishedState(appInfo.getAppState())) {\n+      return LogWebServiceUtils\n+          .getContainerLogMeta(factory, appId, null, null, containerIdStr,\n+              false);\n+    }\n+    if (LogWebServiceUtils.isRunningState(appInfo.getAppState())) {\n+      String appOwner \u003d appInfo.getUser();\n+      String nodeHttpAddress \u003d null;\n+      if (nmId !\u003d null \u0026\u0026 !nmId.isEmpty()) {\n+        try {\n+          nodeHttpAddress \u003d\n+              LogWebServiceUtils.getNMWebAddressFromRM(yarnConf, nmId);\n+        } catch (Exception ex) {\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(ex.getMessage());\n+          }\n+        }\n+      }\n+      if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n+        ContainerInfo containerInfo;\n+        try {\n+          containerInfo \u003d\n+              getContainer(req, appId.toString(), containerId.toString(),\n+                  clusterId);\n+        } catch (Exception ex) {\n+          // return log meta for the aggregated logs if exists.\n+          // It will also return empty log meta for the local logs.\n+          return LogWebServiceUtils\n+              .getContainerLogMeta(factory, appId, appOwner, null,\n+                  containerIdStr, true);\n+        }\n+        nodeHttpAddress \u003d containerInfo.getNodeHttpAddress();\n+        // make sure nodeHttpAddress is not null and not empty. Otherwise,\n+        // we would only get log meta for aggregated logs instead of\n+        // re-directing the request\n+        if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()\n+            || redirectedFromNode) {\n+          // return log meta for the aggregated logs if exists.\n+          // It will also return empty log meta for the local logs.\n+          // If this is the redirect request from NM, we should not\n+          // re-direct the request back. Simply output the aggregated log meta.\n+          return LogWebServiceUtils\n+              .getContainerLogMeta(factory, appId, appOwner, null,\n+                  containerIdStr, true);\n+        }\n+      }\n+      String uri \u003d \"/\" + containerId.toString() + \"/logs\";\n+      String resURI \u003d JOINER.join(\n+          LogWebServiceUtils.getAbsoluteNMWebAddress(yarnConf, nodeHttpAddress),\n+          NM_DOWNLOAD_URI_STR, uri);\n+      String query \u003d req.getQueryString();\n+      if (query !\u003d null \u0026\u0026 !query.isEmpty()) {\n+        resURI +\u003d \"?\" + query;\n+      }\n+      Response.ResponseBuilder response \u003d\n+          Response.status(HttpServletResponse.SC_TEMPORARY_REDIRECT);\n+      response.header(\"Location\", resURI);\n+      return response.build();\n+    } else {\n+      throw new NotFoundException(\n+          \"The application is not at Running or Finished State.\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response getContainerLogsInfo(@Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n      @QueryParam(YarnWebServiceParams.NM_ID) String nmId,\n      @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)\n      @DefaultValue(\"false\") boolean redirectedFromNode,\n      @QueryParam(YarnWebServiceParams.CLUSTER_ID) String clusterId) {\n    ContainerId containerId \u003d null;\n    initForReadableEndpoints(res);\n    try {\n      containerId \u003d ContainerId.fromString(containerIdStr);\n    } catch (IllegalArgumentException e) {\n      throw new BadRequestException(\"invalid container id, \" + containerIdStr);\n    }\n\n    ApplicationId appId \u003d\n        containerId.getApplicationAttemptId().getApplicationId();\n    AppInfo appInfo;\n    try {\n      appInfo \u003d getApp(req, appId.toString(), clusterId);\n    } catch (Exception ex) {\n      // directly find logs from HDFS.\n      return LogWebServiceUtils\n          .getContainerLogMeta(factory, appId, null, null, containerIdStr,\n              false);\n    }\n    // if the application finishes, directly find logs\n    // from HDFS.\n    if (LogWebServiceUtils.isFinishedState(appInfo.getAppState())) {\n      return LogWebServiceUtils\n          .getContainerLogMeta(factory, appId, null, null, containerIdStr,\n              false);\n    }\n    if (LogWebServiceUtils.isRunningState(appInfo.getAppState())) {\n      String appOwner \u003d appInfo.getUser();\n      String nodeHttpAddress \u003d null;\n      if (nmId !\u003d null \u0026\u0026 !nmId.isEmpty()) {\n        try {\n          nodeHttpAddress \u003d\n              LogWebServiceUtils.getNMWebAddressFromRM(yarnConf, nmId);\n        } catch (Exception ex) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(ex.getMessage());\n          }\n        }\n      }\n      if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n        ContainerInfo containerInfo;\n        try {\n          containerInfo \u003d\n              getContainer(req, appId.toString(), containerId.toString(),\n                  clusterId);\n        } catch (Exception ex) {\n          // return log meta for the aggregated logs if exists.\n          // It will also return empty log meta for the local logs.\n          return LogWebServiceUtils\n              .getContainerLogMeta(factory, appId, appOwner, null,\n                  containerIdStr, true);\n        }\n        nodeHttpAddress \u003d containerInfo.getNodeHttpAddress();\n        // make sure nodeHttpAddress is not null and not empty. Otherwise,\n        // we would only get log meta for aggregated logs instead of\n        // re-directing the request\n        if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()\n            || redirectedFromNode) {\n          // return log meta for the aggregated logs if exists.\n          // It will also return empty log meta for the local logs.\n          // If this is the redirect request from NM, we should not\n          // re-direct the request back. Simply output the aggregated log meta.\n          return LogWebServiceUtils\n              .getContainerLogMeta(factory, appId, appOwner, null,\n                  containerIdStr, true);\n        }\n      }\n      String uri \u003d \"/\" + containerId.toString() + \"/logs\";\n      String resURI \u003d JOINER.join(\n          LogWebServiceUtils.getAbsoluteNMWebAddress(yarnConf, nodeHttpAddress),\n          NM_DOWNLOAD_URI_STR, uri);\n      String query \u003d req.getQueryString();\n      if (query !\u003d null \u0026\u0026 !query.isEmpty()) {\n        resURI +\u003d \"?\" + query;\n      }\n      Response.ResponseBuilder response \u003d\n          Response.status(HttpServletResponse.SC_TEMPORARY_REDIRECT);\n      response.header(\"Location\", resURI);\n      return response.build();\n    } else {\n      throw new NotFoundException(\n          \"The application is not at Running or Finished State.\");\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/LogWebService.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "YARN-5742 Serve aggregated logs of historical apps from timeline service. Contributed by Rohith Sharma KS\n",
          "commitDate": "11/10/18 4:26 PM",
          "commitName": "8d1981806feb8278966c02a9eff42d72541bb35e",
          "commitAuthor": "Vrushali C",
          "commitDateOld": "11/10/18 3:35 PM",
          "commitNameOld": "d91d47bc739f23ca22a7e44fc83d449db57ab130",
          "commitAuthorOld": "Robert Kanter",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,91 @@\n-  private Response getContainerLogMeta(ApplicationId appId, String appOwner,\n-      final String nodeId, final String containerIdStr,\n-      boolean emptyLocalContainerLogMeta) {\n+  public Response getContainerLogsInfo(@Context HttpServletRequest req,\n+      @Context HttpServletResponse res,\n+      @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n+      @QueryParam(YarnWebServiceParams.NM_ID) String nmId,\n+      @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)\n+      @DefaultValue(\"false\") boolean redirectedFromNode,\n+      @QueryParam(YarnWebServiceParams.CLUSTER_ID) String clusterId) {\n+    ContainerId containerId \u003d null;\n+    initForReadableEndpoints(res);\n     try {\n-      ContainerLogsRequest request \u003d new ContainerLogsRequest();\n-      request.setAppId(appId);\n-      request.setAppOwner(appOwner);\n-      request.setContainerId(containerIdStr);\n-      request.setNodeId(nodeId);\n-      List\u003cContainerLogMeta\u003e containerLogMeta \u003d factory\n-          .getFileControllerForRead(appId, appOwner)\n-          .readAggregatedLogsMeta(request);\n-      if (containerLogMeta.isEmpty()) {\n-        throw new NotFoundException(\n-            \"Can not get log meta for container: \" + containerIdStr);\n-      }\n-      List\u003cContainerLogsInfo\u003e containersLogsInfo \u003d new ArrayList\u003c\u003e();\n-      for (ContainerLogMeta meta : containerLogMeta) {\n-        ContainerLogsInfo logInfo \u003d new ContainerLogsInfo(meta,\n-            ContainerLogAggregationType.AGGREGATED);\n-        containersLogsInfo.add(logInfo);\n-      }\n-      if (emptyLocalContainerLogMeta) {\n-        ContainerLogMeta emptyMeta \u003d new ContainerLogMeta(\n-            containerIdStr, \"N/A\");\n-        ContainerLogsInfo empty \u003d new ContainerLogsInfo(emptyMeta,\n-            ContainerLogAggregationType.LOCAL);\n-        containersLogsInfo.add(empty);\n-      }\n-      GenericEntity\u003cList\u003cContainerLogsInfo\u003e\u003e meta \u003d new GenericEntity\u003cList\u003c\n-          ContainerLogsInfo\u003e\u003e(containersLogsInfo){};\n-      ResponseBuilder response \u003d Response.ok(meta);\n-      // Sending the X-Content-Type-Options response header with the value\n-      // nosniff will prevent Internet Explorer from MIME-sniffing a response\n-      // away from the declared content-type.\n-      response.header(\"X-Content-Type-Options\", \"nosniff\");\n-      return response.build();\n+      containerId \u003d ContainerId.fromString(containerIdStr);\n+    } catch (IllegalArgumentException e) {\n+      throw new BadRequestException(\"invalid container id, \" + containerIdStr);\n+    }\n+\n+    ApplicationId appId \u003d\n+        containerId.getApplicationAttemptId().getApplicationId();\n+    AppInfo appInfo;\n+    try {\n+      appInfo \u003d getApp(req, appId.toString(), clusterId);\n     } catch (Exception ex) {\n-      throw new WebApplicationException(ex);\n+      // directly find logs from HDFS.\n+      return LogWebServiceUtils\n+          .getContainerLogMeta(factory, appId, null, null, containerIdStr,\n+              false);\n+    }\n+    // if the application finishes, directly find logs\n+    // from HDFS.\n+    if (LogWebServiceUtils.isFinishedState(appInfo.getAppState())) {\n+      return LogWebServiceUtils\n+          .getContainerLogMeta(factory, appId, null, null, containerIdStr,\n+              false);\n+    }\n+    if (LogWebServiceUtils.isRunningState(appInfo.getAppState())) {\n+      String appOwner \u003d appInfo.getUser();\n+      String nodeHttpAddress \u003d null;\n+      if (nmId !\u003d null \u0026\u0026 !nmId.isEmpty()) {\n+        try {\n+          nodeHttpAddress \u003d\n+              LogWebServiceUtils.getNMWebAddressFromRM(yarnConf, nmId);\n+        } catch (Exception ex) {\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(ex.getMessage());\n+          }\n+        }\n+      }\n+      if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n+        ContainerInfo containerInfo;\n+        try {\n+          containerInfo \u003d\n+              getContainer(req, appId.toString(), containerId.toString(),\n+                  clusterId);\n+        } catch (Exception ex) {\n+          // return log meta for the aggregated logs if exists.\n+          // It will also return empty log meta for the local logs.\n+          return LogWebServiceUtils\n+              .getContainerLogMeta(factory, appId, appOwner, null,\n+                  containerIdStr, true);\n+        }\n+        nodeHttpAddress \u003d containerInfo.getNodeHttpAddress();\n+        // make sure nodeHttpAddress is not null and not empty. Otherwise,\n+        // we would only get log meta for aggregated logs instead of\n+        // re-directing the request\n+        if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()\n+            || redirectedFromNode) {\n+          // return log meta for the aggregated logs if exists.\n+          // It will also return empty log meta for the local logs.\n+          // If this is the redirect request from NM, we should not\n+          // re-direct the request back. Simply output the aggregated log meta.\n+          return LogWebServiceUtils\n+              .getContainerLogMeta(factory, appId, appOwner, null,\n+                  containerIdStr, true);\n+        }\n+      }\n+      String uri \u003d \"/\" + containerId.toString() + \"/logs\";\n+      String resURI \u003d JOINER.join(\n+          LogWebServiceUtils.getAbsoluteNMWebAddress(yarnConf, nodeHttpAddress),\n+          NM_DOWNLOAD_URI_STR, uri);\n+      String query \u003d req.getQueryString();\n+      if (query !\u003d null \u0026\u0026 !query.isEmpty()) {\n+        resURI +\u003d \"?\" + query;\n+      }\n+      Response.ResponseBuilder response \u003d\n+          Response.status(HttpServletResponse.SC_TEMPORARY_REDIRECT);\n+      response.header(\"Location\", resURI);\n+      return response.build();\n+    } else {\n+      throw new NotFoundException(\n+          \"The application is not at Running or Finished State.\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response getContainerLogsInfo(@Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n      @QueryParam(YarnWebServiceParams.NM_ID) String nmId,\n      @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)\n      @DefaultValue(\"false\") boolean redirectedFromNode,\n      @QueryParam(YarnWebServiceParams.CLUSTER_ID) String clusterId) {\n    ContainerId containerId \u003d null;\n    initForReadableEndpoints(res);\n    try {\n      containerId \u003d ContainerId.fromString(containerIdStr);\n    } catch (IllegalArgumentException e) {\n      throw new BadRequestException(\"invalid container id, \" + containerIdStr);\n    }\n\n    ApplicationId appId \u003d\n        containerId.getApplicationAttemptId().getApplicationId();\n    AppInfo appInfo;\n    try {\n      appInfo \u003d getApp(req, appId.toString(), clusterId);\n    } catch (Exception ex) {\n      // directly find logs from HDFS.\n      return LogWebServiceUtils\n          .getContainerLogMeta(factory, appId, null, null, containerIdStr,\n              false);\n    }\n    // if the application finishes, directly find logs\n    // from HDFS.\n    if (LogWebServiceUtils.isFinishedState(appInfo.getAppState())) {\n      return LogWebServiceUtils\n          .getContainerLogMeta(factory, appId, null, null, containerIdStr,\n              false);\n    }\n    if (LogWebServiceUtils.isRunningState(appInfo.getAppState())) {\n      String appOwner \u003d appInfo.getUser();\n      String nodeHttpAddress \u003d null;\n      if (nmId !\u003d null \u0026\u0026 !nmId.isEmpty()) {\n        try {\n          nodeHttpAddress \u003d\n              LogWebServiceUtils.getNMWebAddressFromRM(yarnConf, nmId);\n        } catch (Exception ex) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(ex.getMessage());\n          }\n        }\n      }\n      if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n        ContainerInfo containerInfo;\n        try {\n          containerInfo \u003d\n              getContainer(req, appId.toString(), containerId.toString(),\n                  clusterId);\n        } catch (Exception ex) {\n          // return log meta for the aggregated logs if exists.\n          // It will also return empty log meta for the local logs.\n          return LogWebServiceUtils\n              .getContainerLogMeta(factory, appId, appOwner, null,\n                  containerIdStr, true);\n        }\n        nodeHttpAddress \u003d containerInfo.getNodeHttpAddress();\n        // make sure nodeHttpAddress is not null and not empty. Otherwise,\n        // we would only get log meta for aggregated logs instead of\n        // re-directing the request\n        if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()\n            || redirectedFromNode) {\n          // return log meta for the aggregated logs if exists.\n          // It will also return empty log meta for the local logs.\n          // If this is the redirect request from NM, we should not\n          // re-direct the request back. Simply output the aggregated log meta.\n          return LogWebServiceUtils\n              .getContainerLogMeta(factory, appId, appOwner, null,\n                  containerIdStr, true);\n        }\n      }\n      String uri \u003d \"/\" + containerId.toString() + \"/logs\";\n      String resURI \u003d JOINER.join(\n          LogWebServiceUtils.getAbsoluteNMWebAddress(yarnConf, nodeHttpAddress),\n          NM_DOWNLOAD_URI_STR, uri);\n      String query \u003d req.getQueryString();\n      if (query !\u003d null \u0026\u0026 !query.isEmpty()) {\n        resURI +\u003d \"?\" + query;\n      }\n      Response.ResponseBuilder response \u003d\n          Response.status(HttpServletResponse.SC_TEMPORARY_REDIRECT);\n      response.header(\"Location\", resURI);\n      return response.build();\n    } else {\n      throw new NotFoundException(\n          \"The application is not at Running or Finished State.\");\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/LogWebService.java",
          "extendedDetails": {
            "oldValue": "[appId-ApplicationId, appOwner-String, nodeId-String(modifiers-final), containerIdStr-String(modifiers-final), emptyLocalContainerLogMeta-boolean]",
            "newValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), containerIdStr-String(annotations-@PathParam(YarnWebServiceParams.CONTAINER_ID)), nmId-String(annotations-@QueryParam(YarnWebServiceParams.NM_ID)), redirectedFromNode-boolean(annotations-@QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)-@DefaultValue(\"false\")), clusterId-String(annotations-@QueryParam(YarnWebServiceParams.CLUSTER_ID))]"
          }
        },
        {
          "type": "Yrename",
          "commitMessage": "YARN-5742 Serve aggregated logs of historical apps from timeline service. Contributed by Rohith Sharma KS\n",
          "commitDate": "11/10/18 4:26 PM",
          "commitName": "8d1981806feb8278966c02a9eff42d72541bb35e",
          "commitAuthor": "Vrushali C",
          "commitDateOld": "11/10/18 3:35 PM",
          "commitNameOld": "d91d47bc739f23ca22a7e44fc83d449db57ab130",
          "commitAuthorOld": "Robert Kanter",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,91 @@\n-  private Response getContainerLogMeta(ApplicationId appId, String appOwner,\n-      final String nodeId, final String containerIdStr,\n-      boolean emptyLocalContainerLogMeta) {\n+  public Response getContainerLogsInfo(@Context HttpServletRequest req,\n+      @Context HttpServletResponse res,\n+      @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n+      @QueryParam(YarnWebServiceParams.NM_ID) String nmId,\n+      @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)\n+      @DefaultValue(\"false\") boolean redirectedFromNode,\n+      @QueryParam(YarnWebServiceParams.CLUSTER_ID) String clusterId) {\n+    ContainerId containerId \u003d null;\n+    initForReadableEndpoints(res);\n     try {\n-      ContainerLogsRequest request \u003d new ContainerLogsRequest();\n-      request.setAppId(appId);\n-      request.setAppOwner(appOwner);\n-      request.setContainerId(containerIdStr);\n-      request.setNodeId(nodeId);\n-      List\u003cContainerLogMeta\u003e containerLogMeta \u003d factory\n-          .getFileControllerForRead(appId, appOwner)\n-          .readAggregatedLogsMeta(request);\n-      if (containerLogMeta.isEmpty()) {\n-        throw new NotFoundException(\n-            \"Can not get log meta for container: \" + containerIdStr);\n-      }\n-      List\u003cContainerLogsInfo\u003e containersLogsInfo \u003d new ArrayList\u003c\u003e();\n-      for (ContainerLogMeta meta : containerLogMeta) {\n-        ContainerLogsInfo logInfo \u003d new ContainerLogsInfo(meta,\n-            ContainerLogAggregationType.AGGREGATED);\n-        containersLogsInfo.add(logInfo);\n-      }\n-      if (emptyLocalContainerLogMeta) {\n-        ContainerLogMeta emptyMeta \u003d new ContainerLogMeta(\n-            containerIdStr, \"N/A\");\n-        ContainerLogsInfo empty \u003d new ContainerLogsInfo(emptyMeta,\n-            ContainerLogAggregationType.LOCAL);\n-        containersLogsInfo.add(empty);\n-      }\n-      GenericEntity\u003cList\u003cContainerLogsInfo\u003e\u003e meta \u003d new GenericEntity\u003cList\u003c\n-          ContainerLogsInfo\u003e\u003e(containersLogsInfo){};\n-      ResponseBuilder response \u003d Response.ok(meta);\n-      // Sending the X-Content-Type-Options response header with the value\n-      // nosniff will prevent Internet Explorer from MIME-sniffing a response\n-      // away from the declared content-type.\n-      response.header(\"X-Content-Type-Options\", \"nosniff\");\n-      return response.build();\n+      containerId \u003d ContainerId.fromString(containerIdStr);\n+    } catch (IllegalArgumentException e) {\n+      throw new BadRequestException(\"invalid container id, \" + containerIdStr);\n+    }\n+\n+    ApplicationId appId \u003d\n+        containerId.getApplicationAttemptId().getApplicationId();\n+    AppInfo appInfo;\n+    try {\n+      appInfo \u003d getApp(req, appId.toString(), clusterId);\n     } catch (Exception ex) {\n-      throw new WebApplicationException(ex);\n+      // directly find logs from HDFS.\n+      return LogWebServiceUtils\n+          .getContainerLogMeta(factory, appId, null, null, containerIdStr,\n+              false);\n+    }\n+    // if the application finishes, directly find logs\n+    // from HDFS.\n+    if (LogWebServiceUtils.isFinishedState(appInfo.getAppState())) {\n+      return LogWebServiceUtils\n+          .getContainerLogMeta(factory, appId, null, null, containerIdStr,\n+              false);\n+    }\n+    if (LogWebServiceUtils.isRunningState(appInfo.getAppState())) {\n+      String appOwner \u003d appInfo.getUser();\n+      String nodeHttpAddress \u003d null;\n+      if (nmId !\u003d null \u0026\u0026 !nmId.isEmpty()) {\n+        try {\n+          nodeHttpAddress \u003d\n+              LogWebServiceUtils.getNMWebAddressFromRM(yarnConf, nmId);\n+        } catch (Exception ex) {\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(ex.getMessage());\n+          }\n+        }\n+      }\n+      if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n+        ContainerInfo containerInfo;\n+        try {\n+          containerInfo \u003d\n+              getContainer(req, appId.toString(), containerId.toString(),\n+                  clusterId);\n+        } catch (Exception ex) {\n+          // return log meta for the aggregated logs if exists.\n+          // It will also return empty log meta for the local logs.\n+          return LogWebServiceUtils\n+              .getContainerLogMeta(factory, appId, appOwner, null,\n+                  containerIdStr, true);\n+        }\n+        nodeHttpAddress \u003d containerInfo.getNodeHttpAddress();\n+        // make sure nodeHttpAddress is not null and not empty. Otherwise,\n+        // we would only get log meta for aggregated logs instead of\n+        // re-directing the request\n+        if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()\n+            || redirectedFromNode) {\n+          // return log meta for the aggregated logs if exists.\n+          // It will also return empty log meta for the local logs.\n+          // If this is the redirect request from NM, we should not\n+          // re-direct the request back. Simply output the aggregated log meta.\n+          return LogWebServiceUtils\n+              .getContainerLogMeta(factory, appId, appOwner, null,\n+                  containerIdStr, true);\n+        }\n+      }\n+      String uri \u003d \"/\" + containerId.toString() + \"/logs\";\n+      String resURI \u003d JOINER.join(\n+          LogWebServiceUtils.getAbsoluteNMWebAddress(yarnConf, nodeHttpAddress),\n+          NM_DOWNLOAD_URI_STR, uri);\n+      String query \u003d req.getQueryString();\n+      if (query !\u003d null \u0026\u0026 !query.isEmpty()) {\n+        resURI +\u003d \"?\" + query;\n+      }\n+      Response.ResponseBuilder response \u003d\n+          Response.status(HttpServletResponse.SC_TEMPORARY_REDIRECT);\n+      response.header(\"Location\", resURI);\n+      return response.build();\n+    } else {\n+      throw new NotFoundException(\n+          \"The application is not at Running or Finished State.\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response getContainerLogsInfo(@Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n      @QueryParam(YarnWebServiceParams.NM_ID) String nmId,\n      @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)\n      @DefaultValue(\"false\") boolean redirectedFromNode,\n      @QueryParam(YarnWebServiceParams.CLUSTER_ID) String clusterId) {\n    ContainerId containerId \u003d null;\n    initForReadableEndpoints(res);\n    try {\n      containerId \u003d ContainerId.fromString(containerIdStr);\n    } catch (IllegalArgumentException e) {\n      throw new BadRequestException(\"invalid container id, \" + containerIdStr);\n    }\n\n    ApplicationId appId \u003d\n        containerId.getApplicationAttemptId().getApplicationId();\n    AppInfo appInfo;\n    try {\n      appInfo \u003d getApp(req, appId.toString(), clusterId);\n    } catch (Exception ex) {\n      // directly find logs from HDFS.\n      return LogWebServiceUtils\n          .getContainerLogMeta(factory, appId, null, null, containerIdStr,\n              false);\n    }\n    // if the application finishes, directly find logs\n    // from HDFS.\n    if (LogWebServiceUtils.isFinishedState(appInfo.getAppState())) {\n      return LogWebServiceUtils\n          .getContainerLogMeta(factory, appId, null, null, containerIdStr,\n              false);\n    }\n    if (LogWebServiceUtils.isRunningState(appInfo.getAppState())) {\n      String appOwner \u003d appInfo.getUser();\n      String nodeHttpAddress \u003d null;\n      if (nmId !\u003d null \u0026\u0026 !nmId.isEmpty()) {\n        try {\n          nodeHttpAddress \u003d\n              LogWebServiceUtils.getNMWebAddressFromRM(yarnConf, nmId);\n        } catch (Exception ex) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(ex.getMessage());\n          }\n        }\n      }\n      if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n        ContainerInfo containerInfo;\n        try {\n          containerInfo \u003d\n              getContainer(req, appId.toString(), containerId.toString(),\n                  clusterId);\n        } catch (Exception ex) {\n          // return log meta for the aggregated logs if exists.\n          // It will also return empty log meta for the local logs.\n          return LogWebServiceUtils\n              .getContainerLogMeta(factory, appId, appOwner, null,\n                  containerIdStr, true);\n        }\n        nodeHttpAddress \u003d containerInfo.getNodeHttpAddress();\n        // make sure nodeHttpAddress is not null and not empty. Otherwise,\n        // we would only get log meta for aggregated logs instead of\n        // re-directing the request\n        if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()\n            || redirectedFromNode) {\n          // return log meta for the aggregated logs if exists.\n          // It will also return empty log meta for the local logs.\n          // If this is the redirect request from NM, we should not\n          // re-direct the request back. Simply output the aggregated log meta.\n          return LogWebServiceUtils\n              .getContainerLogMeta(factory, appId, appOwner, null,\n                  containerIdStr, true);\n        }\n      }\n      String uri \u003d \"/\" + containerId.toString() + \"/logs\";\n      String resURI \u003d JOINER.join(\n          LogWebServiceUtils.getAbsoluteNMWebAddress(yarnConf, nodeHttpAddress),\n          NM_DOWNLOAD_URI_STR, uri);\n      String query \u003d req.getQueryString();\n      if (query !\u003d null \u0026\u0026 !query.isEmpty()) {\n        resURI +\u003d \"?\" + query;\n      }\n      Response.ResponseBuilder response \u003d\n          Response.status(HttpServletResponse.SC_TEMPORARY_REDIRECT);\n      response.header(\"Location\", resURI);\n      return response.build();\n    } else {\n      throw new NotFoundException(\n          \"The application is not at Running or Finished State.\");\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/LogWebService.java",
          "extendedDetails": {
            "oldValue": "getContainerLogMeta",
            "newValue": "getContainerLogsInfo"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5742 Serve aggregated logs of historical apps from timeline service. Contributed by Rohith Sharma KS\n",
          "commitDate": "11/10/18 4:26 PM",
          "commitName": "8d1981806feb8278966c02a9eff42d72541bb35e",
          "commitAuthor": "Vrushali C",
          "commitDateOld": "11/10/18 3:35 PM",
          "commitNameOld": "d91d47bc739f23ca22a7e44fc83d449db57ab130",
          "commitAuthorOld": "Robert Kanter",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,91 @@\n-  private Response getContainerLogMeta(ApplicationId appId, String appOwner,\n-      final String nodeId, final String containerIdStr,\n-      boolean emptyLocalContainerLogMeta) {\n+  public Response getContainerLogsInfo(@Context HttpServletRequest req,\n+      @Context HttpServletResponse res,\n+      @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n+      @QueryParam(YarnWebServiceParams.NM_ID) String nmId,\n+      @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)\n+      @DefaultValue(\"false\") boolean redirectedFromNode,\n+      @QueryParam(YarnWebServiceParams.CLUSTER_ID) String clusterId) {\n+    ContainerId containerId \u003d null;\n+    initForReadableEndpoints(res);\n     try {\n-      ContainerLogsRequest request \u003d new ContainerLogsRequest();\n-      request.setAppId(appId);\n-      request.setAppOwner(appOwner);\n-      request.setContainerId(containerIdStr);\n-      request.setNodeId(nodeId);\n-      List\u003cContainerLogMeta\u003e containerLogMeta \u003d factory\n-          .getFileControllerForRead(appId, appOwner)\n-          .readAggregatedLogsMeta(request);\n-      if (containerLogMeta.isEmpty()) {\n-        throw new NotFoundException(\n-            \"Can not get log meta for container: \" + containerIdStr);\n-      }\n-      List\u003cContainerLogsInfo\u003e containersLogsInfo \u003d new ArrayList\u003c\u003e();\n-      for (ContainerLogMeta meta : containerLogMeta) {\n-        ContainerLogsInfo logInfo \u003d new ContainerLogsInfo(meta,\n-            ContainerLogAggregationType.AGGREGATED);\n-        containersLogsInfo.add(logInfo);\n-      }\n-      if (emptyLocalContainerLogMeta) {\n-        ContainerLogMeta emptyMeta \u003d new ContainerLogMeta(\n-            containerIdStr, \"N/A\");\n-        ContainerLogsInfo empty \u003d new ContainerLogsInfo(emptyMeta,\n-            ContainerLogAggregationType.LOCAL);\n-        containersLogsInfo.add(empty);\n-      }\n-      GenericEntity\u003cList\u003cContainerLogsInfo\u003e\u003e meta \u003d new GenericEntity\u003cList\u003c\n-          ContainerLogsInfo\u003e\u003e(containersLogsInfo){};\n-      ResponseBuilder response \u003d Response.ok(meta);\n-      // Sending the X-Content-Type-Options response header with the value\n-      // nosniff will prevent Internet Explorer from MIME-sniffing a response\n-      // away from the declared content-type.\n-      response.header(\"X-Content-Type-Options\", \"nosniff\");\n-      return response.build();\n+      containerId \u003d ContainerId.fromString(containerIdStr);\n+    } catch (IllegalArgumentException e) {\n+      throw new BadRequestException(\"invalid container id, \" + containerIdStr);\n+    }\n+\n+    ApplicationId appId \u003d\n+        containerId.getApplicationAttemptId().getApplicationId();\n+    AppInfo appInfo;\n+    try {\n+      appInfo \u003d getApp(req, appId.toString(), clusterId);\n     } catch (Exception ex) {\n-      throw new WebApplicationException(ex);\n+      // directly find logs from HDFS.\n+      return LogWebServiceUtils\n+          .getContainerLogMeta(factory, appId, null, null, containerIdStr,\n+              false);\n+    }\n+    // if the application finishes, directly find logs\n+    // from HDFS.\n+    if (LogWebServiceUtils.isFinishedState(appInfo.getAppState())) {\n+      return LogWebServiceUtils\n+          .getContainerLogMeta(factory, appId, null, null, containerIdStr,\n+              false);\n+    }\n+    if (LogWebServiceUtils.isRunningState(appInfo.getAppState())) {\n+      String appOwner \u003d appInfo.getUser();\n+      String nodeHttpAddress \u003d null;\n+      if (nmId !\u003d null \u0026\u0026 !nmId.isEmpty()) {\n+        try {\n+          nodeHttpAddress \u003d\n+              LogWebServiceUtils.getNMWebAddressFromRM(yarnConf, nmId);\n+        } catch (Exception ex) {\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(ex.getMessage());\n+          }\n+        }\n+      }\n+      if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n+        ContainerInfo containerInfo;\n+        try {\n+          containerInfo \u003d\n+              getContainer(req, appId.toString(), containerId.toString(),\n+                  clusterId);\n+        } catch (Exception ex) {\n+          // return log meta for the aggregated logs if exists.\n+          // It will also return empty log meta for the local logs.\n+          return LogWebServiceUtils\n+              .getContainerLogMeta(factory, appId, appOwner, null,\n+                  containerIdStr, true);\n+        }\n+        nodeHttpAddress \u003d containerInfo.getNodeHttpAddress();\n+        // make sure nodeHttpAddress is not null and not empty. Otherwise,\n+        // we would only get log meta for aggregated logs instead of\n+        // re-directing the request\n+        if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()\n+            || redirectedFromNode) {\n+          // return log meta for the aggregated logs if exists.\n+          // It will also return empty log meta for the local logs.\n+          // If this is the redirect request from NM, we should not\n+          // re-direct the request back. Simply output the aggregated log meta.\n+          return LogWebServiceUtils\n+              .getContainerLogMeta(factory, appId, appOwner, null,\n+                  containerIdStr, true);\n+        }\n+      }\n+      String uri \u003d \"/\" + containerId.toString() + \"/logs\";\n+      String resURI \u003d JOINER.join(\n+          LogWebServiceUtils.getAbsoluteNMWebAddress(yarnConf, nodeHttpAddress),\n+          NM_DOWNLOAD_URI_STR, uri);\n+      String query \u003d req.getQueryString();\n+      if (query !\u003d null \u0026\u0026 !query.isEmpty()) {\n+        resURI +\u003d \"?\" + query;\n+      }\n+      Response.ResponseBuilder response \u003d\n+          Response.status(HttpServletResponse.SC_TEMPORARY_REDIRECT);\n+      response.header(\"Location\", resURI);\n+      return response.build();\n+    } else {\n+      throw new NotFoundException(\n+          \"The application is not at Running or Finished State.\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response getContainerLogsInfo(@Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr,\n      @QueryParam(YarnWebServiceParams.NM_ID) String nmId,\n      @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)\n      @DefaultValue(\"false\") boolean redirectedFromNode,\n      @QueryParam(YarnWebServiceParams.CLUSTER_ID) String clusterId) {\n    ContainerId containerId \u003d null;\n    initForReadableEndpoints(res);\n    try {\n      containerId \u003d ContainerId.fromString(containerIdStr);\n    } catch (IllegalArgumentException e) {\n      throw new BadRequestException(\"invalid container id, \" + containerIdStr);\n    }\n\n    ApplicationId appId \u003d\n        containerId.getApplicationAttemptId().getApplicationId();\n    AppInfo appInfo;\n    try {\n      appInfo \u003d getApp(req, appId.toString(), clusterId);\n    } catch (Exception ex) {\n      // directly find logs from HDFS.\n      return LogWebServiceUtils\n          .getContainerLogMeta(factory, appId, null, null, containerIdStr,\n              false);\n    }\n    // if the application finishes, directly find logs\n    // from HDFS.\n    if (LogWebServiceUtils.isFinishedState(appInfo.getAppState())) {\n      return LogWebServiceUtils\n          .getContainerLogMeta(factory, appId, null, null, containerIdStr,\n              false);\n    }\n    if (LogWebServiceUtils.isRunningState(appInfo.getAppState())) {\n      String appOwner \u003d appInfo.getUser();\n      String nodeHttpAddress \u003d null;\n      if (nmId !\u003d null \u0026\u0026 !nmId.isEmpty()) {\n        try {\n          nodeHttpAddress \u003d\n              LogWebServiceUtils.getNMWebAddressFromRM(yarnConf, nmId);\n        } catch (Exception ex) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(ex.getMessage());\n          }\n        }\n      }\n      if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()) {\n        ContainerInfo containerInfo;\n        try {\n          containerInfo \u003d\n              getContainer(req, appId.toString(), containerId.toString(),\n                  clusterId);\n        } catch (Exception ex) {\n          // return log meta for the aggregated logs if exists.\n          // It will also return empty log meta for the local logs.\n          return LogWebServiceUtils\n              .getContainerLogMeta(factory, appId, appOwner, null,\n                  containerIdStr, true);\n        }\n        nodeHttpAddress \u003d containerInfo.getNodeHttpAddress();\n        // make sure nodeHttpAddress is not null and not empty. Otherwise,\n        // we would only get log meta for aggregated logs instead of\n        // re-directing the request\n        if (nodeHttpAddress \u003d\u003d null || nodeHttpAddress.isEmpty()\n            || redirectedFromNode) {\n          // return log meta for the aggregated logs if exists.\n          // It will also return empty log meta for the local logs.\n          // If this is the redirect request from NM, we should not\n          // re-direct the request back. Simply output the aggregated log meta.\n          return LogWebServiceUtils\n              .getContainerLogMeta(factory, appId, appOwner, null,\n                  containerIdStr, true);\n        }\n      }\n      String uri \u003d \"/\" + containerId.toString() + \"/logs\";\n      String resURI \u003d JOINER.join(\n          LogWebServiceUtils.getAbsoluteNMWebAddress(yarnConf, nodeHttpAddress),\n          NM_DOWNLOAD_URI_STR, uri);\n      String query \u003d req.getQueryString();\n      if (query !\u003d null \u0026\u0026 !query.isEmpty()) {\n        resURI +\u003d \"?\" + query;\n      }\n      Response.ResponseBuilder response \u003d\n          Response.status(HttpServletResponse.SC_TEMPORARY_REDIRECT);\n      response.header(\"Location\", resURI);\n      return response.build();\n    } else {\n      throw new NotFoundException(\n          \"The application is not at Running or Finished State.\");\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/webapp/LogWebService.java",
          "extendedDetails": {
            "oldValue": "[appId-ApplicationId, appOwner-String, nodeId-String(modifiers-final), containerIdStr-String(modifiers-final), emptyLocalContainerLogMeta-boolean]",
            "newValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), containerIdStr-String(annotations-@PathParam(YarnWebServiceParams.CONTAINER_ID)), nmId-String(annotations-@QueryParam(YarnWebServiceParams.NM_ID)), redirectedFromNode-boolean(annotations-@QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE)-@DefaultValue(\"false\")), clusterId-String(annotations-@QueryParam(YarnWebServiceParams.CLUSTER_ID))]"
          }
        }
      ]
    },
    "91cc070d67533ebb3325b982eba2135e0d175a82": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6877. Create an abstract log reader for extendability. Contributed by Xuan Gong.\n",
      "commitDate": "31/08/17 4:41 PM",
      "commitName": "91cc070d67533ebb3325b982eba2135e0d175a82",
      "commitAuthor": "Junping Du",
      "commitDateOld": "07/08/17 2:56 AM",
      "commitNameOld": "839e077faf4019d6efdcd89d95930023cd0b0a08",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 24.57,
      "commitsBetweenForRepo": 215,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,41 @@\n   private Response getContainerLogMeta(ApplicationId appId, String appOwner,\n       final String nodeId, final String containerIdStr,\n       boolean emptyLocalContainerLogMeta) {\n     try {\n-      List\u003cContainerLogMeta\u003e containerLogMeta \u003d LogToolUtils\n-          .getContainerLogMetaFromRemoteFS(conf, appId, containerIdStr,\n-              nodeId, appOwner);\n+      ContainerLogsRequest request \u003d new ContainerLogsRequest();\n+      request.setAppId(appId);\n+      request.setAppOwner(appOwner);\n+      request.setContainerId(containerIdStr);\n+      request.setNodeId(nodeId);\n+      List\u003cContainerLogMeta\u003e containerLogMeta \u003d factory\n+          .getFileControllerForRead(appId, appOwner)\n+          .readAggregatedLogsMeta(request);\n       if (containerLogMeta.isEmpty()) {\n         throw new NotFoundException(\n             \"Can not get log meta for container: \" + containerIdStr);\n       }\n       List\u003cContainerLogsInfo\u003e containersLogsInfo \u003d new ArrayList\u003c\u003e();\n       for (ContainerLogMeta meta : containerLogMeta) {\n         ContainerLogsInfo logInfo \u003d new ContainerLogsInfo(meta,\n             ContainerLogAggregationType.AGGREGATED);\n         containersLogsInfo.add(logInfo);\n       }\n       if (emptyLocalContainerLogMeta) {\n         ContainerLogMeta emptyMeta \u003d new ContainerLogMeta(\n             containerIdStr, \"N/A\");\n         ContainerLogsInfo empty \u003d new ContainerLogsInfo(emptyMeta,\n             ContainerLogAggregationType.LOCAL);\n         containersLogsInfo.add(empty);\n       }\n       GenericEntity\u003cList\u003cContainerLogsInfo\u003e\u003e meta \u003d new GenericEntity\u003cList\u003c\n           ContainerLogsInfo\u003e\u003e(containersLogsInfo){};\n       ResponseBuilder response \u003d Response.ok(meta);\n       // Sending the X-Content-Type-Options response header with the value\n       // nosniff will prevent Internet Explorer from MIME-sniffing a response\n       // away from the declared content-type.\n       response.header(\"X-Content-Type-Options\", \"nosniff\");\n       return response.build();\n     } catch (Exception ex) {\n       throw new WebApplicationException(ex);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Response getContainerLogMeta(ApplicationId appId, String appOwner,\n      final String nodeId, final String containerIdStr,\n      boolean emptyLocalContainerLogMeta) {\n    try {\n      ContainerLogsRequest request \u003d new ContainerLogsRequest();\n      request.setAppId(appId);\n      request.setAppOwner(appOwner);\n      request.setContainerId(containerIdStr);\n      request.setNodeId(nodeId);\n      List\u003cContainerLogMeta\u003e containerLogMeta \u003d factory\n          .getFileControllerForRead(appId, appOwner)\n          .readAggregatedLogsMeta(request);\n      if (containerLogMeta.isEmpty()) {\n        throw new NotFoundException(\n            \"Can not get log meta for container: \" + containerIdStr);\n      }\n      List\u003cContainerLogsInfo\u003e containersLogsInfo \u003d new ArrayList\u003c\u003e();\n      for (ContainerLogMeta meta : containerLogMeta) {\n        ContainerLogsInfo logInfo \u003d new ContainerLogsInfo(meta,\n            ContainerLogAggregationType.AGGREGATED);\n        containersLogsInfo.add(logInfo);\n      }\n      if (emptyLocalContainerLogMeta) {\n        ContainerLogMeta emptyMeta \u003d new ContainerLogMeta(\n            containerIdStr, \"N/A\");\n        ContainerLogsInfo empty \u003d new ContainerLogsInfo(emptyMeta,\n            ContainerLogAggregationType.LOCAL);\n        containersLogsInfo.add(empty);\n      }\n      GenericEntity\u003cList\u003cContainerLogsInfo\u003e\u003e meta \u003d new GenericEntity\u003cList\u003c\n          ContainerLogsInfo\u003e\u003e(containersLogsInfo){};\n      ResponseBuilder response \u003d Response.ok(meta);\n      // Sending the X-Content-Type-Options response header with the value\n      // nosniff will prevent Internet Explorer from MIME-sniffing a response\n      // away from the declared content-type.\n      response.header(\"X-Content-Type-Options\", \"nosniff\");\n      return response.build();\n    } catch (Exception ex) {\n      throw new WebApplicationException(ex);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/AHSWebServices.java",
      "extendedDetails": {}
    },
    "ce2d5bfa5f84e7e563980796549b56ef1e4bbf1e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6174. Log files pattern should be same for both running and finished container. Contributed by Xuan Gong.\n",
      "commitDate": "15/02/17 9:05 AM",
      "commitName": "ce2d5bfa5f84e7e563980796549b56ef1e4bbf1e",
      "commitAuthor": "Junping Du",
      "commitDateOld": "07/02/17 2:13 AM",
      "commitNameOld": "9dbfab1284015af6983b4a55b79c9e65bc0194e5",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 8.29,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   private Response getContainerLogMeta(ApplicationId appId, String appOwner,\n       final String nodeId, final String containerIdStr,\n       boolean emptyLocalContainerLogMeta) {\n     try {\n       List\u003cContainerLogMeta\u003e containerLogMeta \u003d LogToolUtils\n           .getContainerLogMetaFromRemoteFS(conf, appId, containerIdStr,\n               nodeId, appOwner);\n       if (containerLogMeta.isEmpty()) {\n         throw new NotFoundException(\n             \"Can not get log meta for container: \" + containerIdStr);\n       }\n       List\u003cContainerLogsInfo\u003e containersLogsInfo \u003d new ArrayList\u003c\u003e();\n       for (ContainerLogMeta meta : containerLogMeta) {\n         ContainerLogsInfo logInfo \u003d new ContainerLogsInfo(meta,\n-            ContainerLogType.AGGREGATED);\n+            ContainerLogAggregationType.AGGREGATED);\n         containersLogsInfo.add(logInfo);\n       }\n       if (emptyLocalContainerLogMeta) {\n         ContainerLogMeta emptyMeta \u003d new ContainerLogMeta(\n             containerIdStr, \"N/A\");\n         ContainerLogsInfo empty \u003d new ContainerLogsInfo(emptyMeta,\n-            ContainerLogType.LOCAL);\n+            ContainerLogAggregationType.LOCAL);\n         containersLogsInfo.add(empty);\n       }\n       GenericEntity\u003cList\u003cContainerLogsInfo\u003e\u003e meta \u003d new GenericEntity\u003cList\u003c\n           ContainerLogsInfo\u003e\u003e(containersLogsInfo){};\n       ResponseBuilder response \u003d Response.ok(meta);\n       // Sending the X-Content-Type-Options response header with the value\n       // nosniff will prevent Internet Explorer from MIME-sniffing a response\n       // away from the declared content-type.\n       response.header(\"X-Content-Type-Options\", \"nosniff\");\n       return response.build();\n     } catch (Exception ex) {\n       throw new WebApplicationException(ex);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Response getContainerLogMeta(ApplicationId appId, String appOwner,\n      final String nodeId, final String containerIdStr,\n      boolean emptyLocalContainerLogMeta) {\n    try {\n      List\u003cContainerLogMeta\u003e containerLogMeta \u003d LogToolUtils\n          .getContainerLogMetaFromRemoteFS(conf, appId, containerIdStr,\n              nodeId, appOwner);\n      if (containerLogMeta.isEmpty()) {\n        throw new NotFoundException(\n            \"Can not get log meta for container: \" + containerIdStr);\n      }\n      List\u003cContainerLogsInfo\u003e containersLogsInfo \u003d new ArrayList\u003c\u003e();\n      for (ContainerLogMeta meta : containerLogMeta) {\n        ContainerLogsInfo logInfo \u003d new ContainerLogsInfo(meta,\n            ContainerLogAggregationType.AGGREGATED);\n        containersLogsInfo.add(logInfo);\n      }\n      if (emptyLocalContainerLogMeta) {\n        ContainerLogMeta emptyMeta \u003d new ContainerLogMeta(\n            containerIdStr, \"N/A\");\n        ContainerLogsInfo empty \u003d new ContainerLogsInfo(emptyMeta,\n            ContainerLogAggregationType.LOCAL);\n        containersLogsInfo.add(empty);\n      }\n      GenericEntity\u003cList\u003cContainerLogsInfo\u003e\u003e meta \u003d new GenericEntity\u003cList\u003c\n          ContainerLogsInfo\u003e\u003e(containersLogsInfo){};\n      ResponseBuilder response \u003d Response.ok(meta);\n      // Sending the X-Content-Type-Options response header with the value\n      // nosniff will prevent Internet Explorer from MIME-sniffing a response\n      // away from the declared content-type.\n      response.header(\"X-Content-Type-Options\", \"nosniff\");\n      return response.build();\n    } catch (Exception ex) {\n      throw new WebApplicationException(ex);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/AHSWebServices.java",
      "extendedDetails": {}
    },
    "9dbfab1284015af6983b4a55b79c9e65bc0194e5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6108. Improve AHS webservice to accept NM address as a parameter to get container logs. Contributed by Xuan Gong.\n",
      "commitDate": "07/02/17 2:13 AM",
      "commitName": "9dbfab1284015af6983b4a55b79c9e65bc0194e5",
      "commitAuthor": "Junping Du",
      "commitDateOld": "02/02/17 12:41 AM",
      "commitNameOld": "327c9980aafce52cc02d2b8885fc4e9f628ab23c",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 5.06,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   private Response getContainerLogMeta(ApplicationId appId, String appOwner,\n       final String nodeId, final String containerIdStr,\n       boolean emptyLocalContainerLogMeta) {\n     try {\n       List\u003cContainerLogMeta\u003e containerLogMeta \u003d LogToolUtils\n           .getContainerLogMetaFromRemoteFS(conf, appId, containerIdStr,\n               nodeId, appOwner);\n       if (containerLogMeta.isEmpty()) {\n-        return createBadResponse(Status.INTERNAL_SERVER_ERROR,\n+        throw new NotFoundException(\n             \"Can not get log meta for container: \" + containerIdStr);\n       }\n       List\u003cContainerLogsInfo\u003e containersLogsInfo \u003d new ArrayList\u003c\u003e();\n       for (ContainerLogMeta meta : containerLogMeta) {\n         ContainerLogsInfo logInfo \u003d new ContainerLogsInfo(meta,\n             ContainerLogType.AGGREGATED);\n         containersLogsInfo.add(logInfo);\n       }\n       if (emptyLocalContainerLogMeta) {\n         ContainerLogMeta emptyMeta \u003d new ContainerLogMeta(\n             containerIdStr, \"N/A\");\n         ContainerLogsInfo empty \u003d new ContainerLogsInfo(emptyMeta,\n             ContainerLogType.LOCAL);\n         containersLogsInfo.add(empty);\n       }\n       GenericEntity\u003cList\u003cContainerLogsInfo\u003e\u003e meta \u003d new GenericEntity\u003cList\u003c\n           ContainerLogsInfo\u003e\u003e(containersLogsInfo){};\n       ResponseBuilder response \u003d Response.ok(meta);\n       // Sending the X-Content-Type-Options response header with the value\n       // nosniff will prevent Internet Explorer from MIME-sniffing a response\n       // away from the declared content-type.\n       response.header(\"X-Content-Type-Options\", \"nosniff\");\n       return response.build();\n     } catch (Exception ex) {\n       throw new WebApplicationException(ex);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Response getContainerLogMeta(ApplicationId appId, String appOwner,\n      final String nodeId, final String containerIdStr,\n      boolean emptyLocalContainerLogMeta) {\n    try {\n      List\u003cContainerLogMeta\u003e containerLogMeta \u003d LogToolUtils\n          .getContainerLogMetaFromRemoteFS(conf, appId, containerIdStr,\n              nodeId, appOwner);\n      if (containerLogMeta.isEmpty()) {\n        throw new NotFoundException(\n            \"Can not get log meta for container: \" + containerIdStr);\n      }\n      List\u003cContainerLogsInfo\u003e containersLogsInfo \u003d new ArrayList\u003c\u003e();\n      for (ContainerLogMeta meta : containerLogMeta) {\n        ContainerLogsInfo logInfo \u003d new ContainerLogsInfo(meta,\n            ContainerLogType.AGGREGATED);\n        containersLogsInfo.add(logInfo);\n      }\n      if (emptyLocalContainerLogMeta) {\n        ContainerLogMeta emptyMeta \u003d new ContainerLogMeta(\n            containerIdStr, \"N/A\");\n        ContainerLogsInfo empty \u003d new ContainerLogsInfo(emptyMeta,\n            ContainerLogType.LOCAL);\n        containersLogsInfo.add(empty);\n      }\n      GenericEntity\u003cList\u003cContainerLogsInfo\u003e\u003e meta \u003d new GenericEntity\u003cList\u003c\n          ContainerLogsInfo\u003e\u003e(containersLogsInfo){};\n      ResponseBuilder response \u003d Response.ok(meta);\n      // Sending the X-Content-Type-Options response header with the value\n      // nosniff will prevent Internet Explorer from MIME-sniffing a response\n      // away from the declared content-type.\n      response.header(\"X-Content-Type-Options\", \"nosniff\");\n      return response.build();\n    } catch (Exception ex) {\n      throw new WebApplicationException(ex);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/AHSWebServices.java",
      "extendedDetails": {}
    },
    "8528d85a68c0e6ea71026df4d3026e7edc206b2d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-6099. Improve webservice to list aggregated log files. Contributed by Xuan Gong.\n",
      "commitDate": "24/01/17 3:26 PM",
      "commitName": "8528d85a68c0e6ea71026df4d3026e7edc206b2d",
      "commitAuthor": "Junping Du",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6099. Improve webservice to list aggregated log files. Contributed by Xuan Gong.\n",
          "commitDate": "24/01/17 3:26 PM",
          "commitName": "8528d85a68c0e6ea71026df4d3026e7edc206b2d",
          "commitAuthor": "Junping Du",
          "commitDateOld": "16/01/17 4:20 PM",
          "commitNameOld": "cf695577aa6d9715b77ab7309ecd792ef226c439",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 7.96,
          "commitsBetweenForRepo": 52,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,87 +1,36 @@\n   private Response getContainerLogMeta(ApplicationId appId, String appOwner,\n-      final String nodeId, final String containerIdStr) {\n-    Map\u003cString, String\u003e containerLogMeta \u003d new HashMap\u003c\u003e();\n+      final String nodeId, final String containerIdStr,\n+      boolean emptyLocalContainerLogMeta) {\n     try {\n-      String suffix \u003d LogAggregationUtils.getRemoteNodeLogDirSuffix(conf);\n-      org.apache.hadoop.fs.Path remoteRootLogDir \u003d\n-          new org.apache.hadoop.fs.Path(conf.get(\n-              YarnConfiguration.NM_REMOTE_APP_LOG_DIR,\n-              YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));\n-      org.apache.hadoop.fs.Path qualifiedRemoteRootLogDir \u003d\n-          FileContext.getFileContext(conf).makeQualified(remoteRootLogDir);\n-      FileContext fc \u003d FileContext.getFileContext(\n-          qualifiedRemoteRootLogDir.toUri(), conf);\n-      org.apache.hadoop.fs.Path remoteAppDir \u003d null;\n-      if (appOwner \u003d\u003d null) {\n-        org.apache.hadoop.fs.Path toMatch \u003d LogAggregationUtils\n-            .getRemoteAppLogDir(remoteRootLogDir, appId, \"*\", suffix);\n-        FileStatus[] matching  \u003d fc.util().globStatus(toMatch);\n-        if (matching \u003d\u003d null || matching.length !\u003d 1) {\n-          return createBadResponse(Status.INTERNAL_SERVER_ERROR,\n-              \"Can not get log meta for container: \" + containerIdStr);\n-        }\n-        remoteAppDir \u003d matching[0].getPath();\n-      } else {\n-        remoteAppDir \u003d LogAggregationUtils.getRemoteAppLogDir(\n-            remoteRootLogDir, appId, appOwner, suffix);\n-      }\n-      final RemoteIterator\u003cFileStatus\u003e nodeFiles;\n-      nodeFiles \u003d fc.listStatus(remoteAppDir);\n-      if (!nodeFiles.hasNext()) {\n+      List\u003cContainerLogMeta\u003e containerLogMeta \u003d LogToolUtils\n+          .getContainerLogMetaFromRemoteFS(conf, appId, containerIdStr,\n+              nodeId, appOwner);\n+      if (containerLogMeta.isEmpty()) {\n         return createBadResponse(Status.INTERNAL_SERVER_ERROR,\n             \"Can not get log meta for container: \" + containerIdStr);\n       }\n-      String nodeIdStr \u003d (nodeId \u003d\u003d null) ? null\n-          : LogAggregationUtils.getNodeString(nodeId);\n-      while (nodeFiles.hasNext()) {\n-        FileStatus thisNodeFile \u003d nodeFiles.next();\n-        if (nodeIdStr !\u003d null) {\n-          if (!thisNodeFile.getPath().getName().contains(nodeIdStr)) {\n-            continue;\n-          }\n-        }\n-        if (!thisNodeFile.getPath().getName().endsWith(\n-            LogAggregationUtils.TMP_FILE_SUFFIX)) {\n-          AggregatedLogFormat.LogReader reader \u003d\n-              new AggregatedLogFormat.LogReader(conf,\n-                  thisNodeFile.getPath());\n-          try {\n-            DataInputStream valueStream;\n-            LogKey key \u003d new LogKey();\n-            valueStream \u003d reader.next(key);\n-            while (valueStream !\u003d null) {\n-              if (key.toString().equals(containerIdStr)) {\n-                while (true) {\n-                  try {\n-                    Pair\u003cString, String\u003e logMeta \u003d\n-                        LogReader.readContainerMetaDataAndSkipData(\n-                            valueStream, null);\n-                    containerLogMeta.put(logMeta.getFirst(),\n-                        logMeta.getSecond());\n-                  } catch (EOFException eof) {\n-                    break;\n-                  }\n-                }\n-                break;\n-              }\n-              // Next container\n-              key \u003d new LogKey();\n-              valueStream \u003d reader.next(key);\n-            }\n-          } finally {\n-            reader.close();\n-          }\n-        }\n+      List\u003cContainerLogsInfo\u003e containersLogsInfo \u003d new ArrayList\u003c\u003e();\n+      for (ContainerLogMeta meta : containerLogMeta) {\n+        ContainerLogsInfo logInfo \u003d new ContainerLogsInfo(meta,\n+            ContainerLogType.AGGREGATED);\n+        containersLogsInfo.add(logInfo);\n       }\n-      ResponseBuilder response \u003d Response.ok(new ContainerLogsInfo(\n-          containerLogMeta));\n+      if (emptyLocalContainerLogMeta) {\n+        ContainerLogMeta emptyMeta \u003d new ContainerLogMeta(\n+            containerIdStr, \"N/A\");\n+        ContainerLogsInfo empty \u003d new ContainerLogsInfo(emptyMeta,\n+            ContainerLogType.LOCAL);\n+        containersLogsInfo.add(empty);\n+      }\n+      GenericEntity\u003cList\u003cContainerLogsInfo\u003e\u003e meta \u003d new GenericEntity\u003cList\u003c\n+          ContainerLogsInfo\u003e\u003e(containersLogsInfo){};\n+      ResponseBuilder response \u003d Response.ok(meta);\n       // Sending the X-Content-Type-Options response header with the value\n       // nosniff will prevent Internet Explorer from MIME-sniffing a response\n       // away from the declared content-type.\n       response.header(\"X-Content-Type-Options\", \"nosniff\");\n       return response.build();\n     } catch (Exception ex) {\n-      return createBadResponse(Status.INTERNAL_SERVER_ERROR,\n-          ex.getMessage());\n+      throw new WebApplicationException(ex);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Response getContainerLogMeta(ApplicationId appId, String appOwner,\n      final String nodeId, final String containerIdStr,\n      boolean emptyLocalContainerLogMeta) {\n    try {\n      List\u003cContainerLogMeta\u003e containerLogMeta \u003d LogToolUtils\n          .getContainerLogMetaFromRemoteFS(conf, appId, containerIdStr,\n              nodeId, appOwner);\n      if (containerLogMeta.isEmpty()) {\n        return createBadResponse(Status.INTERNAL_SERVER_ERROR,\n            \"Can not get log meta for container: \" + containerIdStr);\n      }\n      List\u003cContainerLogsInfo\u003e containersLogsInfo \u003d new ArrayList\u003c\u003e();\n      for (ContainerLogMeta meta : containerLogMeta) {\n        ContainerLogsInfo logInfo \u003d new ContainerLogsInfo(meta,\n            ContainerLogType.AGGREGATED);\n        containersLogsInfo.add(logInfo);\n      }\n      if (emptyLocalContainerLogMeta) {\n        ContainerLogMeta emptyMeta \u003d new ContainerLogMeta(\n            containerIdStr, \"N/A\");\n        ContainerLogsInfo empty \u003d new ContainerLogsInfo(emptyMeta,\n            ContainerLogType.LOCAL);\n        containersLogsInfo.add(empty);\n      }\n      GenericEntity\u003cList\u003cContainerLogsInfo\u003e\u003e meta \u003d new GenericEntity\u003cList\u003c\n          ContainerLogsInfo\u003e\u003e(containersLogsInfo){};\n      ResponseBuilder response \u003d Response.ok(meta);\n      // Sending the X-Content-Type-Options response header with the value\n      // nosniff will prevent Internet Explorer from MIME-sniffing a response\n      // away from the declared content-type.\n      response.header(\"X-Content-Type-Options\", \"nosniff\");\n      return response.build();\n    } catch (Exception ex) {\n      throw new WebApplicationException(ex);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/AHSWebServices.java",
          "extendedDetails": {
            "oldValue": "[appId-ApplicationId, appOwner-String, nodeId-String(modifiers-final), containerIdStr-String(modifiers-final)]",
            "newValue": "[appId-ApplicationId, appOwner-String, nodeId-String(modifiers-final), containerIdStr-String(modifiers-final), emptyLocalContainerLogMeta-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6099. Improve webservice to list aggregated log files. Contributed by Xuan Gong.\n",
          "commitDate": "24/01/17 3:26 PM",
          "commitName": "8528d85a68c0e6ea71026df4d3026e7edc206b2d",
          "commitAuthor": "Junping Du",
          "commitDateOld": "16/01/17 4:20 PM",
          "commitNameOld": "cf695577aa6d9715b77ab7309ecd792ef226c439",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 7.96,
          "commitsBetweenForRepo": 52,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,87 +1,36 @@\n   private Response getContainerLogMeta(ApplicationId appId, String appOwner,\n-      final String nodeId, final String containerIdStr) {\n-    Map\u003cString, String\u003e containerLogMeta \u003d new HashMap\u003c\u003e();\n+      final String nodeId, final String containerIdStr,\n+      boolean emptyLocalContainerLogMeta) {\n     try {\n-      String suffix \u003d LogAggregationUtils.getRemoteNodeLogDirSuffix(conf);\n-      org.apache.hadoop.fs.Path remoteRootLogDir \u003d\n-          new org.apache.hadoop.fs.Path(conf.get(\n-              YarnConfiguration.NM_REMOTE_APP_LOG_DIR,\n-              YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));\n-      org.apache.hadoop.fs.Path qualifiedRemoteRootLogDir \u003d\n-          FileContext.getFileContext(conf).makeQualified(remoteRootLogDir);\n-      FileContext fc \u003d FileContext.getFileContext(\n-          qualifiedRemoteRootLogDir.toUri(), conf);\n-      org.apache.hadoop.fs.Path remoteAppDir \u003d null;\n-      if (appOwner \u003d\u003d null) {\n-        org.apache.hadoop.fs.Path toMatch \u003d LogAggregationUtils\n-            .getRemoteAppLogDir(remoteRootLogDir, appId, \"*\", suffix);\n-        FileStatus[] matching  \u003d fc.util().globStatus(toMatch);\n-        if (matching \u003d\u003d null || matching.length !\u003d 1) {\n-          return createBadResponse(Status.INTERNAL_SERVER_ERROR,\n-              \"Can not get log meta for container: \" + containerIdStr);\n-        }\n-        remoteAppDir \u003d matching[0].getPath();\n-      } else {\n-        remoteAppDir \u003d LogAggregationUtils.getRemoteAppLogDir(\n-            remoteRootLogDir, appId, appOwner, suffix);\n-      }\n-      final RemoteIterator\u003cFileStatus\u003e nodeFiles;\n-      nodeFiles \u003d fc.listStatus(remoteAppDir);\n-      if (!nodeFiles.hasNext()) {\n+      List\u003cContainerLogMeta\u003e containerLogMeta \u003d LogToolUtils\n+          .getContainerLogMetaFromRemoteFS(conf, appId, containerIdStr,\n+              nodeId, appOwner);\n+      if (containerLogMeta.isEmpty()) {\n         return createBadResponse(Status.INTERNAL_SERVER_ERROR,\n             \"Can not get log meta for container: \" + containerIdStr);\n       }\n-      String nodeIdStr \u003d (nodeId \u003d\u003d null) ? null\n-          : LogAggregationUtils.getNodeString(nodeId);\n-      while (nodeFiles.hasNext()) {\n-        FileStatus thisNodeFile \u003d nodeFiles.next();\n-        if (nodeIdStr !\u003d null) {\n-          if (!thisNodeFile.getPath().getName().contains(nodeIdStr)) {\n-            continue;\n-          }\n-        }\n-        if (!thisNodeFile.getPath().getName().endsWith(\n-            LogAggregationUtils.TMP_FILE_SUFFIX)) {\n-          AggregatedLogFormat.LogReader reader \u003d\n-              new AggregatedLogFormat.LogReader(conf,\n-                  thisNodeFile.getPath());\n-          try {\n-            DataInputStream valueStream;\n-            LogKey key \u003d new LogKey();\n-            valueStream \u003d reader.next(key);\n-            while (valueStream !\u003d null) {\n-              if (key.toString().equals(containerIdStr)) {\n-                while (true) {\n-                  try {\n-                    Pair\u003cString, String\u003e logMeta \u003d\n-                        LogReader.readContainerMetaDataAndSkipData(\n-                            valueStream, null);\n-                    containerLogMeta.put(logMeta.getFirst(),\n-                        logMeta.getSecond());\n-                  } catch (EOFException eof) {\n-                    break;\n-                  }\n-                }\n-                break;\n-              }\n-              // Next container\n-              key \u003d new LogKey();\n-              valueStream \u003d reader.next(key);\n-            }\n-          } finally {\n-            reader.close();\n-          }\n-        }\n+      List\u003cContainerLogsInfo\u003e containersLogsInfo \u003d new ArrayList\u003c\u003e();\n+      for (ContainerLogMeta meta : containerLogMeta) {\n+        ContainerLogsInfo logInfo \u003d new ContainerLogsInfo(meta,\n+            ContainerLogType.AGGREGATED);\n+        containersLogsInfo.add(logInfo);\n       }\n-      ResponseBuilder response \u003d Response.ok(new ContainerLogsInfo(\n-          containerLogMeta));\n+      if (emptyLocalContainerLogMeta) {\n+        ContainerLogMeta emptyMeta \u003d new ContainerLogMeta(\n+            containerIdStr, \"N/A\");\n+        ContainerLogsInfo empty \u003d new ContainerLogsInfo(emptyMeta,\n+            ContainerLogType.LOCAL);\n+        containersLogsInfo.add(empty);\n+      }\n+      GenericEntity\u003cList\u003cContainerLogsInfo\u003e\u003e meta \u003d new GenericEntity\u003cList\u003c\n+          ContainerLogsInfo\u003e\u003e(containersLogsInfo){};\n+      ResponseBuilder response \u003d Response.ok(meta);\n       // Sending the X-Content-Type-Options response header with the value\n       // nosniff will prevent Internet Explorer from MIME-sniffing a response\n       // away from the declared content-type.\n       response.header(\"X-Content-Type-Options\", \"nosniff\");\n       return response.build();\n     } catch (Exception ex) {\n-      return createBadResponse(Status.INTERNAL_SERVER_ERROR,\n-          ex.getMessage());\n+      throw new WebApplicationException(ex);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Response getContainerLogMeta(ApplicationId appId, String appOwner,\n      final String nodeId, final String containerIdStr,\n      boolean emptyLocalContainerLogMeta) {\n    try {\n      List\u003cContainerLogMeta\u003e containerLogMeta \u003d LogToolUtils\n          .getContainerLogMetaFromRemoteFS(conf, appId, containerIdStr,\n              nodeId, appOwner);\n      if (containerLogMeta.isEmpty()) {\n        return createBadResponse(Status.INTERNAL_SERVER_ERROR,\n            \"Can not get log meta for container: \" + containerIdStr);\n      }\n      List\u003cContainerLogsInfo\u003e containersLogsInfo \u003d new ArrayList\u003c\u003e();\n      for (ContainerLogMeta meta : containerLogMeta) {\n        ContainerLogsInfo logInfo \u003d new ContainerLogsInfo(meta,\n            ContainerLogType.AGGREGATED);\n        containersLogsInfo.add(logInfo);\n      }\n      if (emptyLocalContainerLogMeta) {\n        ContainerLogMeta emptyMeta \u003d new ContainerLogMeta(\n            containerIdStr, \"N/A\");\n        ContainerLogsInfo empty \u003d new ContainerLogsInfo(emptyMeta,\n            ContainerLogType.LOCAL);\n        containersLogsInfo.add(empty);\n      }\n      GenericEntity\u003cList\u003cContainerLogsInfo\u003e\u003e meta \u003d new GenericEntity\u003cList\u003c\n          ContainerLogsInfo\u003e\u003e(containersLogsInfo){};\n      ResponseBuilder response \u003d Response.ok(meta);\n      // Sending the X-Content-Type-Options response header with the value\n      // nosniff will prevent Internet Explorer from MIME-sniffing a response\n      // away from the declared content-type.\n      response.header(\"X-Content-Type-Options\", \"nosniff\");\n      return response.build();\n    } catch (Exception ex) {\n      throw new WebApplicationException(ex);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/AHSWebServices.java",
          "extendedDetails": {}
        }
      ]
    },
    "cf695577aa6d9715b77ab7309ecd792ef226c439": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6011. Add a new web service to list the files on a container in AHSWebService. Contributed by Xuan Gong.\n",
      "commitDate": "16/01/17 4:20 PM",
      "commitName": "cf695577aa6d9715b77ab7309ecd792ef226c439",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,87 @@\n+  private Response getContainerLogMeta(ApplicationId appId, String appOwner,\n+      final String nodeId, final String containerIdStr) {\n+    Map\u003cString, String\u003e containerLogMeta \u003d new HashMap\u003c\u003e();\n+    try {\n+      String suffix \u003d LogAggregationUtils.getRemoteNodeLogDirSuffix(conf);\n+      org.apache.hadoop.fs.Path remoteRootLogDir \u003d\n+          new org.apache.hadoop.fs.Path(conf.get(\n+              YarnConfiguration.NM_REMOTE_APP_LOG_DIR,\n+              YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));\n+      org.apache.hadoop.fs.Path qualifiedRemoteRootLogDir \u003d\n+          FileContext.getFileContext(conf).makeQualified(remoteRootLogDir);\n+      FileContext fc \u003d FileContext.getFileContext(\n+          qualifiedRemoteRootLogDir.toUri(), conf);\n+      org.apache.hadoop.fs.Path remoteAppDir \u003d null;\n+      if (appOwner \u003d\u003d null) {\n+        org.apache.hadoop.fs.Path toMatch \u003d LogAggregationUtils\n+            .getRemoteAppLogDir(remoteRootLogDir, appId, \"*\", suffix);\n+        FileStatus[] matching  \u003d fc.util().globStatus(toMatch);\n+        if (matching \u003d\u003d null || matching.length !\u003d 1) {\n+          return createBadResponse(Status.INTERNAL_SERVER_ERROR,\n+              \"Can not get log meta for container: \" + containerIdStr);\n+        }\n+        remoteAppDir \u003d matching[0].getPath();\n+      } else {\n+        remoteAppDir \u003d LogAggregationUtils.getRemoteAppLogDir(\n+            remoteRootLogDir, appId, appOwner, suffix);\n+      }\n+      final RemoteIterator\u003cFileStatus\u003e nodeFiles;\n+      nodeFiles \u003d fc.listStatus(remoteAppDir);\n+      if (!nodeFiles.hasNext()) {\n+        return createBadResponse(Status.INTERNAL_SERVER_ERROR,\n+            \"Can not get log meta for container: \" + containerIdStr);\n+      }\n+      String nodeIdStr \u003d (nodeId \u003d\u003d null) ? null\n+          : LogAggregationUtils.getNodeString(nodeId);\n+      while (nodeFiles.hasNext()) {\n+        FileStatus thisNodeFile \u003d nodeFiles.next();\n+        if (nodeIdStr !\u003d null) {\n+          if (!thisNodeFile.getPath().getName().contains(nodeIdStr)) {\n+            continue;\n+          }\n+        }\n+        if (!thisNodeFile.getPath().getName().endsWith(\n+            LogAggregationUtils.TMP_FILE_SUFFIX)) {\n+          AggregatedLogFormat.LogReader reader \u003d\n+              new AggregatedLogFormat.LogReader(conf,\n+                  thisNodeFile.getPath());\n+          try {\n+            DataInputStream valueStream;\n+            LogKey key \u003d new LogKey();\n+            valueStream \u003d reader.next(key);\n+            while (valueStream !\u003d null) {\n+              if (key.toString().equals(containerIdStr)) {\n+                while (true) {\n+                  try {\n+                    Pair\u003cString, String\u003e logMeta \u003d\n+                        LogReader.readContainerMetaDataAndSkipData(\n+                            valueStream, null);\n+                    containerLogMeta.put(logMeta.getFirst(),\n+                        logMeta.getSecond());\n+                  } catch (EOFException eof) {\n+                    break;\n+                  }\n+                }\n+                break;\n+              }\n+              // Next container\n+              key \u003d new LogKey();\n+              valueStream \u003d reader.next(key);\n+            }\n+          } finally {\n+            reader.close();\n+          }\n+        }\n+      }\n+      ResponseBuilder response \u003d Response.ok(new ContainerLogsInfo(\n+          containerLogMeta));\n+      // Sending the X-Content-Type-Options response header with the value\n+      // nosniff will prevent Internet Explorer from MIME-sniffing a response\n+      // away from the declared content-type.\n+      response.header(\"X-Content-Type-Options\", \"nosniff\");\n+      return response.build();\n+    } catch (Exception ex) {\n+      return createBadResponse(Status.INTERNAL_SERVER_ERROR,\n+          ex.getMessage());\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Response getContainerLogMeta(ApplicationId appId, String appOwner,\n      final String nodeId, final String containerIdStr) {\n    Map\u003cString, String\u003e containerLogMeta \u003d new HashMap\u003c\u003e();\n    try {\n      String suffix \u003d LogAggregationUtils.getRemoteNodeLogDirSuffix(conf);\n      org.apache.hadoop.fs.Path remoteRootLogDir \u003d\n          new org.apache.hadoop.fs.Path(conf.get(\n              YarnConfiguration.NM_REMOTE_APP_LOG_DIR,\n              YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));\n      org.apache.hadoop.fs.Path qualifiedRemoteRootLogDir \u003d\n          FileContext.getFileContext(conf).makeQualified(remoteRootLogDir);\n      FileContext fc \u003d FileContext.getFileContext(\n          qualifiedRemoteRootLogDir.toUri(), conf);\n      org.apache.hadoop.fs.Path remoteAppDir \u003d null;\n      if (appOwner \u003d\u003d null) {\n        org.apache.hadoop.fs.Path toMatch \u003d LogAggregationUtils\n            .getRemoteAppLogDir(remoteRootLogDir, appId, \"*\", suffix);\n        FileStatus[] matching  \u003d fc.util().globStatus(toMatch);\n        if (matching \u003d\u003d null || matching.length !\u003d 1) {\n          return createBadResponse(Status.INTERNAL_SERVER_ERROR,\n              \"Can not get log meta for container: \" + containerIdStr);\n        }\n        remoteAppDir \u003d matching[0].getPath();\n      } else {\n        remoteAppDir \u003d LogAggregationUtils.getRemoteAppLogDir(\n            remoteRootLogDir, appId, appOwner, suffix);\n      }\n      final RemoteIterator\u003cFileStatus\u003e nodeFiles;\n      nodeFiles \u003d fc.listStatus(remoteAppDir);\n      if (!nodeFiles.hasNext()) {\n        return createBadResponse(Status.INTERNAL_SERVER_ERROR,\n            \"Can not get log meta for container: \" + containerIdStr);\n      }\n      String nodeIdStr \u003d (nodeId \u003d\u003d null) ? null\n          : LogAggregationUtils.getNodeString(nodeId);\n      while (nodeFiles.hasNext()) {\n        FileStatus thisNodeFile \u003d nodeFiles.next();\n        if (nodeIdStr !\u003d null) {\n          if (!thisNodeFile.getPath().getName().contains(nodeIdStr)) {\n            continue;\n          }\n        }\n        if (!thisNodeFile.getPath().getName().endsWith(\n            LogAggregationUtils.TMP_FILE_SUFFIX)) {\n          AggregatedLogFormat.LogReader reader \u003d\n              new AggregatedLogFormat.LogReader(conf,\n                  thisNodeFile.getPath());\n          try {\n            DataInputStream valueStream;\n            LogKey key \u003d new LogKey();\n            valueStream \u003d reader.next(key);\n            while (valueStream !\u003d null) {\n              if (key.toString().equals(containerIdStr)) {\n                while (true) {\n                  try {\n                    Pair\u003cString, String\u003e logMeta \u003d\n                        LogReader.readContainerMetaDataAndSkipData(\n                            valueStream, null);\n                    containerLogMeta.put(logMeta.getFirst(),\n                        logMeta.getSecond());\n                  } catch (EOFException eof) {\n                    break;\n                  }\n                }\n                break;\n              }\n              // Next container\n              key \u003d new LogKey();\n              valueStream \u003d reader.next(key);\n            }\n          } finally {\n            reader.close();\n          }\n        }\n      }\n      ResponseBuilder response \u003d Response.ok(new ContainerLogsInfo(\n          containerLogMeta));\n      // Sending the X-Content-Type-Options response header with the value\n      // nosniff will prevent Internet Explorer from MIME-sniffing a response\n      // away from the declared content-type.\n      response.header(\"X-Content-Type-Options\", \"nosniff\");\n      return response.build();\n    } catch (Exception ex) {\n      return createBadResponse(Status.INTERNAL_SERVER_ERROR,\n          ex.getMessage());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/AHSWebServices.java"
    }
  }
}