{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MembershipNamenodeResolver.java",
  "functionName": "getRecentRegistrationForQuery",
  "functionId": "getRecentRegistrationForQuery___request-GetNamenodeRegistrationsRequest__addUnavailable-boolean__addExpired-boolean",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/resolver/MembershipNamenodeResolver.java",
  "functionStartLine": 361,
  "functionEndLine": 391,
  "numCommitsSeen": 13,
  "timeTaken": 1828,
  "changeHistory": [
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
    "b3e6bd22e3c02b3e4f50396538f56a1bcb007638",
    "55da7fd7ebe2f3fa1c1c828dda727fddc75a1b81"
  ],
  "changeHistoryShort": {
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": "Yfilerename",
    "b3e6bd22e3c02b3e4f50396538f56a1bcb007638": "Ybodychange",
    "55da7fd7ebe2f3fa1c1c828dda727fddc75a1b81": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-13215. RBF: Move Router to its own module. Contributed by Wei Yan\n",
      "commitDate": "19/03/18 10:13 PM",
      "commitName": "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
      "commitAuthor": "weiy",
      "commitDateOld": "19/03/18 5:19 PM",
      "commitNameOld": "e65ff1c8be48ef4f04ed96f96ac4caef4974944d",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.2,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private List\u003cMembershipState\u003e getRecentRegistrationForQuery(\n      GetNamenodeRegistrationsRequest request, boolean addUnavailable,\n      boolean addExpired) throws IOException {\n\n    // Retrieve a list of all registrations that match this query.\n    // This may include all NN records for a namespace/blockpool, including\n    // duplicate records for the same NN from different routers.\n    MembershipStore membershipStore \u003d getMembershipStore();\n    GetNamenodeRegistrationsResponse response \u003d\n        membershipStore.getNamenodeRegistrations(request);\n\n    List\u003cMembershipState\u003e memberships \u003d response.getNamenodeMemberships();\n    if (!addExpired || !addUnavailable) {\n      Iterator\u003cMembershipState\u003e iterator \u003d memberships.iterator();\n      while (iterator.hasNext()) {\n        MembershipState membership \u003d iterator.next();\n        if (membership.getState() \u003d\u003d EXPIRED \u0026\u0026 !addExpired) {\n          iterator.remove();\n        } else if (membership.getState() \u003d\u003d UNAVAILABLE \u0026\u0026 !addUnavailable) {\n          iterator.remove();\n        }\n      }\n    }\n\n    List\u003cMembershipState\u003e priorityList \u003d new ArrayList\u003c\u003e();\n    priorityList.addAll(memberships);\n    Collections.sort(priorityList, new NamenodePriorityComparator());\n\n    LOG.debug(\"Selected most recent NN {} for query\", priorityList);\n    return priorityList;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/resolver/MembershipNamenodeResolver.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/resolver/MembershipNamenodeResolver.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/resolver/MembershipNamenodeResolver.java"
      }
    },
    "b3e6bd22e3c02b3e4f50396538f56a1bcb007638": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10646. Federation admin tool. Contributed by Inigo Goiri.\n\n(cherry picked from commit ae27e31fbcf546481db0b0345772db2e9132372e)\n",
      "commitDate": "06/10/17 6:50 PM",
      "commitName": "b3e6bd22e3c02b3e4f50396538f56a1bcb007638",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "06/10/17 6:50 PM",
      "commitNameOld": "55da7fd7ebe2f3fa1c1c828dda727fddc75a1b81",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,31 @@\n   private List\u003cMembershipState\u003e getRecentRegistrationForQuery(\n       GetNamenodeRegistrationsRequest request, boolean addUnavailable,\n       boolean addExpired) throws IOException {\n \n     // Retrieve a list of all registrations that match this query.\n     // This may include all NN records for a namespace/blockpool, including\n     // duplicate records for the same NN from different routers.\n+    MembershipStore membershipStore \u003d getMembershipStore();\n     GetNamenodeRegistrationsResponse response \u003d\n-        this.membershipInterface.getNamenodeRegistrations(request);\n+        membershipStore.getNamenodeRegistrations(request);\n \n     List\u003cMembershipState\u003e memberships \u003d response.getNamenodeMemberships();\n     if (!addExpired || !addUnavailable) {\n       Iterator\u003cMembershipState\u003e iterator \u003d memberships.iterator();\n       while (iterator.hasNext()) {\n         MembershipState membership \u003d iterator.next();\n         if (membership.getState() \u003d\u003d EXPIRED \u0026\u0026 !addExpired) {\n           iterator.remove();\n         } else if (membership.getState() \u003d\u003d UNAVAILABLE \u0026\u0026 !addUnavailable) {\n           iterator.remove();\n         }\n       }\n     }\n \n     List\u003cMembershipState\u003e priorityList \u003d new ArrayList\u003c\u003e();\n     priorityList.addAll(memberships);\n     Collections.sort(priorityList, new NamenodePriorityComparator());\n \n     LOG.debug(\"Selected most recent NN {} for query\", priorityList);\n     return priorityList;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cMembershipState\u003e getRecentRegistrationForQuery(\n      GetNamenodeRegistrationsRequest request, boolean addUnavailable,\n      boolean addExpired) throws IOException {\n\n    // Retrieve a list of all registrations that match this query.\n    // This may include all NN records for a namespace/blockpool, including\n    // duplicate records for the same NN from different routers.\n    MembershipStore membershipStore \u003d getMembershipStore();\n    GetNamenodeRegistrationsResponse response \u003d\n        membershipStore.getNamenodeRegistrations(request);\n\n    List\u003cMembershipState\u003e memberships \u003d response.getNamenodeMemberships();\n    if (!addExpired || !addUnavailable) {\n      Iterator\u003cMembershipState\u003e iterator \u003d memberships.iterator();\n      while (iterator.hasNext()) {\n        MembershipState membership \u003d iterator.next();\n        if (membership.getState() \u003d\u003d EXPIRED \u0026\u0026 !addExpired) {\n          iterator.remove();\n        } else if (membership.getState() \u003d\u003d UNAVAILABLE \u0026\u0026 !addUnavailable) {\n          iterator.remove();\n        }\n      }\n    }\n\n    List\u003cMembershipState\u003e priorityList \u003d new ArrayList\u003c\u003e();\n    priorityList.addAll(memberships);\n    Collections.sort(priorityList, new NamenodePriorityComparator());\n\n    LOG.debug(\"Selected most recent NN {} for query\", priorityList);\n    return priorityList;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/resolver/MembershipNamenodeResolver.java",
      "extendedDetails": {}
    },
    "55da7fd7ebe2f3fa1c1c828dda727fddc75a1b81": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-10687. Federation Membership State Store internal API. Contributed by Jason Kace and Inigo Goiri.\n\n(cherry picked from commit 95cae08849d23cf12c5d280c29f90908e6a90d40)\n",
      "commitDate": "06/10/17 6:50 PM",
      "commitName": "55da7fd7ebe2f3fa1c1c828dda727fddc75a1b81",
      "commitAuthor": "Inigo Goiri",
      "diff": "@@ -0,0 +1,30 @@\n+  private List\u003cMembershipState\u003e getRecentRegistrationForQuery(\n+      GetNamenodeRegistrationsRequest request, boolean addUnavailable,\n+      boolean addExpired) throws IOException {\n+\n+    // Retrieve a list of all registrations that match this query.\n+    // This may include all NN records for a namespace/blockpool, including\n+    // duplicate records for the same NN from different routers.\n+    GetNamenodeRegistrationsResponse response \u003d\n+        this.membershipInterface.getNamenodeRegistrations(request);\n+\n+    List\u003cMembershipState\u003e memberships \u003d response.getNamenodeMemberships();\n+    if (!addExpired || !addUnavailable) {\n+      Iterator\u003cMembershipState\u003e iterator \u003d memberships.iterator();\n+      while (iterator.hasNext()) {\n+        MembershipState membership \u003d iterator.next();\n+        if (membership.getState() \u003d\u003d EXPIRED \u0026\u0026 !addExpired) {\n+          iterator.remove();\n+        } else if (membership.getState() \u003d\u003d UNAVAILABLE \u0026\u0026 !addUnavailable) {\n+          iterator.remove();\n+        }\n+      }\n+    }\n+\n+    List\u003cMembershipState\u003e priorityList \u003d new ArrayList\u003c\u003e();\n+    priorityList.addAll(memberships);\n+    Collections.sort(priorityList, new NamenodePriorityComparator());\n+\n+    LOG.debug(\"Selected most recent NN {} for query\", priorityList);\n+    return priorityList;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cMembershipState\u003e getRecentRegistrationForQuery(\n      GetNamenodeRegistrationsRequest request, boolean addUnavailable,\n      boolean addExpired) throws IOException {\n\n    // Retrieve a list of all registrations that match this query.\n    // This may include all NN records for a namespace/blockpool, including\n    // duplicate records for the same NN from different routers.\n    GetNamenodeRegistrationsResponse response \u003d\n        this.membershipInterface.getNamenodeRegistrations(request);\n\n    List\u003cMembershipState\u003e memberships \u003d response.getNamenodeMemberships();\n    if (!addExpired || !addUnavailable) {\n      Iterator\u003cMembershipState\u003e iterator \u003d memberships.iterator();\n      while (iterator.hasNext()) {\n        MembershipState membership \u003d iterator.next();\n        if (membership.getState() \u003d\u003d EXPIRED \u0026\u0026 !addExpired) {\n          iterator.remove();\n        } else if (membership.getState() \u003d\u003d UNAVAILABLE \u0026\u0026 !addUnavailable) {\n          iterator.remove();\n        }\n      }\n    }\n\n    List\u003cMembershipState\u003e priorityList \u003d new ArrayList\u003c\u003e();\n    priorityList.addAll(memberships);\n    Collections.sort(priorityList, new NamenodePriorityComparator());\n\n    LOG.debug(\"Selected most recent NN {} for query\", priorityList);\n    return priorityList;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/resolver/MembershipNamenodeResolver.java"
    }
  }
}