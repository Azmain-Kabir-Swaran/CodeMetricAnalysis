{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ResourceSerDe.java",
  "functionName": "deserialize",
  "functionId": "deserialize___json-JsonElement(modifiers-final)__type-Type(modifiers-final)__context-JsonDeserializationContext(modifiers-final)",
  "sourceFilePath": "hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/common/serialization/ResourceSerDe.java",
  "functionStartLine": 51,
  "functionEndLine": 60,
  "numCommitsSeen": 1,
  "timeTaken": 371,
  "changeHistory": [
    "625039ef20e6011ab360131d70582a6e4bf2ec1d"
  ],
  "changeHistoryShort": {
    "625039ef20e6011ab360131d70582a6e4bf2ec1d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "625039ef20e6011ab360131d70582a6e4bf2ec1d": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-14840. Tool to estimate resource requirements of an application pipeline based on prior executions. (Rui Li via Subru).\n",
      "commitDate": "25/10/17 3:51 PM",
      "commitName": "625039ef20e6011ab360131d70582a6e4bf2ec1d",
      "commitAuthor": "Subru Krishnan",
      "diff": "@@ -0,0 +1,10 @@\n+  @Override public final Resource deserialize(final JsonElement json,\n+      final Type type, final JsonDeserializationContext context)\n+      throws JsonParseException {\n+    JsonObject jo \u003d json.getAsJsonObject();\n+    long mem \u003d jo.getAsJsonPrimitive(KEY1).getAsLong();\n+    int vcore \u003d jo.getAsJsonPrimitive(KEY2).getAsInt();\n+    Resource resource \u003d Resource.newInstance(mem, vcore);\n+\n+    return resource;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  @Override public final Resource deserialize(final JsonElement json,\n      final Type type, final JsonDeserializationContext context)\n      throws JsonParseException {\n    JsonObject jo \u003d json.getAsJsonObject();\n    long mem \u003d jo.getAsJsonPrimitive(KEY1).getAsLong();\n    int vcore \u003d jo.getAsJsonPrimitive(KEY2).getAsInt();\n    Resource resource \u003d Resource.newInstance(mem, vcore);\n\n    return resource;\n  }",
      "path": "hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/common/serialization/ResourceSerDe.java"
    }
  }
}