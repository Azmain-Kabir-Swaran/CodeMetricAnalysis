{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ApplicationHistoryManagerOnTimelineStore.java",
  "functionName": "convertToApplicationAttemptReport",
  "functionId": "convertToApplicationAttemptReport___entity-TimelineEntity",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/ApplicationHistoryManagerOnTimelineStore.java",
  "functionStartLine": 478,
  "functionEndLine": 563,
  "numCommitsSeen": 42,
  "timeTaken": 2544,
  "changeHistory": [
    "1f304b0c7f261369dd68839507bb609a949965ad",
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
    "4ff973f96ae7f77cda3b52b38427e2991819ad31",
    "6b8b1608e64e300e4e1d23c60476febaca29ca38"
  ],
  "changeHistoryShort": {
    "1f304b0c7f261369dd68839507bb609a949965ad": "Ybodychange",
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": "Ybodychange",
    "4ff973f96ae7f77cda3b52b38427e2991819ad31": "Ybodychange",
    "6b8b1608e64e300e4e1d23c60476febaca29ca38": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1f304b0c7f261369dd68839507bb609a949965ad": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5699. Retrospect yarn entity fields which are publishing in events info fields. Contributed by Rohith Sharma K S.\n",
      "commitDate": "15/10/16 1:54 PM",
      "commitName": "1f304b0c7f261369dd68839507bb609a949965ad",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "06/10/16 8:12 AM",
      "commitNameOld": "4d2f380d787a6145f45c87ba663079fedbf645b8",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 9.24,
      "commitsBetweenForRepo": 73,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,85 +1,86 @@\n   private static ApplicationAttemptReport convertToApplicationAttemptReport(\n       TimelineEntity entity) {\n     String host \u003d null;\n     int rpcPort \u003d -1;\n     ContainerId amContainerId \u003d null;\n     String trackingUrl \u003d null;\n     String originalTrackingUrl \u003d null;\n     String diagnosticsInfo \u003d null;\n     YarnApplicationAttemptState state \u003d null;\n     List\u003cTimelineEvent\u003e events \u003d entity.getEvents();\n     if (events !\u003d null) {\n       for (TimelineEvent event : events) {\n         if (event.getEventType().equals(\n             AppAttemptMetricsConstants.REGISTERED_EVENT_TYPE)) {\n           Map\u003cString, Object\u003e eventInfo \u003d event.getEventInfo();\n           if (eventInfo \u003d\u003d null) {\n             continue;\n           }\n-          if (eventInfo.containsKey(AppAttemptMetricsConstants.HOST_EVENT_INFO)) {\n+          if (eventInfo.containsKey(AppAttemptMetricsConstants.HOST_INFO)) {\n             host \u003d\n-                eventInfo.get(AppAttemptMetricsConstants.HOST_EVENT_INFO)\n+                eventInfo.get(AppAttemptMetricsConstants.HOST_INFO)\n                     .toString();\n           }\n           if (eventInfo\n-              .containsKey(AppAttemptMetricsConstants.RPC_PORT_EVENT_INFO)) {\n+              .containsKey(AppAttemptMetricsConstants.RPC_PORT_INFO)) {\n             rpcPort \u003d (Integer) eventInfo.get(\n-                    AppAttemptMetricsConstants.RPC_PORT_EVENT_INFO);\n+                    AppAttemptMetricsConstants.RPC_PORT_INFO);\n           }\n           if (eventInfo\n-              .containsKey(AppAttemptMetricsConstants.MASTER_CONTAINER_EVENT_INFO)) {\n+              .containsKey(AppAttemptMetricsConstants.MASTER_CONTAINER_INFO)) {\n             amContainerId \u003d\n                 ContainerId.fromString(eventInfo.get(\n-                    AppAttemptMetricsConstants.MASTER_CONTAINER_EVENT_INFO)\n+                    AppAttemptMetricsConstants.MASTER_CONTAINER_INFO)\n                     .toString());\n           }\n         } else if (event.getEventType().equals(\n             AppAttemptMetricsConstants.FINISHED_EVENT_TYPE)) {\n           Map\u003cString, Object\u003e eventInfo \u003d event.getEventInfo();\n           if (eventInfo \u003d\u003d null) {\n             continue;\n           }\n           if (eventInfo\n-              .containsKey(AppAttemptMetricsConstants.TRACKING_URL_EVENT_INFO)) {\n+              .containsKey(AppAttemptMetricsConstants.TRACKING_URL_INFO)) {\n             trackingUrl \u003d\n                 eventInfo.get(\n-                    AppAttemptMetricsConstants.TRACKING_URL_EVENT_INFO)\n+                    AppAttemptMetricsConstants.TRACKING_URL_INFO)\n                     .toString();\n           }\n           if (eventInfo\n-              .containsKey(AppAttemptMetricsConstants.ORIGINAL_TRACKING_URL_EVENT_INFO)) {\n+              .containsKey(\n+                  AppAttemptMetricsConstants.ORIGINAL_TRACKING_URL_INFO)) {\n             originalTrackingUrl \u003d\n                 eventInfo\n                     .get(\n-                        AppAttemptMetricsConstants.ORIGINAL_TRACKING_URL_EVENT_INFO)\n+                        AppAttemptMetricsConstants.ORIGINAL_TRACKING_URL_INFO)\n                     .toString();\n           }\n           if (eventInfo\n-              .containsKey(AppAttemptMetricsConstants.DIAGNOSTICS_INFO_EVENT_INFO)) {\n+              .containsKey(AppAttemptMetricsConstants.DIAGNOSTICS_INFO)) {\n             diagnosticsInfo \u003d\n                 eventInfo.get(\n-                    AppAttemptMetricsConstants.DIAGNOSTICS_INFO_EVENT_INFO)\n+                    AppAttemptMetricsConstants.DIAGNOSTICS_INFO)\n                     .toString();\n           }\n           if (eventInfo\n-              .containsKey(AppAttemptMetricsConstants.STATE_EVENT_INFO)) {\n+              .containsKey(AppAttemptMetricsConstants.STATE_INFO)) {\n             state \u003d\n                 YarnApplicationAttemptState.valueOf(eventInfo.get(\n-                    AppAttemptMetricsConstants.STATE_EVENT_INFO)\n+                    AppAttemptMetricsConstants.STATE_INFO)\n                     .toString());\n           }\n           if (eventInfo\n-              .containsKey(AppAttemptMetricsConstants.MASTER_CONTAINER_EVENT_INFO)) {\n+              .containsKey(AppAttemptMetricsConstants.MASTER_CONTAINER_INFO)) {\n             amContainerId \u003d\n                 ContainerId.fromString(eventInfo.get(\n-                    AppAttemptMetricsConstants.MASTER_CONTAINER_EVENT_INFO)\n+                    AppAttemptMetricsConstants.MASTER_CONTAINER_INFO)\n                     .toString());\n           }\n         }\n       }\n     }\n     return ApplicationAttemptReport.newInstance(\n         ApplicationAttemptId.fromString(entity.getEntityId()),\n         host, rpcPort, trackingUrl, originalTrackingUrl, diagnosticsInfo,\n         state, amContainerId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static ApplicationAttemptReport convertToApplicationAttemptReport(\n      TimelineEntity entity) {\n    String host \u003d null;\n    int rpcPort \u003d -1;\n    ContainerId amContainerId \u003d null;\n    String trackingUrl \u003d null;\n    String originalTrackingUrl \u003d null;\n    String diagnosticsInfo \u003d null;\n    YarnApplicationAttemptState state \u003d null;\n    List\u003cTimelineEvent\u003e events \u003d entity.getEvents();\n    if (events !\u003d null) {\n      for (TimelineEvent event : events) {\n        if (event.getEventType().equals(\n            AppAttemptMetricsConstants.REGISTERED_EVENT_TYPE)) {\n          Map\u003cString, Object\u003e eventInfo \u003d event.getEventInfo();\n          if (eventInfo \u003d\u003d null) {\n            continue;\n          }\n          if (eventInfo.containsKey(AppAttemptMetricsConstants.HOST_INFO)) {\n            host \u003d\n                eventInfo.get(AppAttemptMetricsConstants.HOST_INFO)\n                    .toString();\n          }\n          if (eventInfo\n              .containsKey(AppAttemptMetricsConstants.RPC_PORT_INFO)) {\n            rpcPort \u003d (Integer) eventInfo.get(\n                    AppAttemptMetricsConstants.RPC_PORT_INFO);\n          }\n          if (eventInfo\n              .containsKey(AppAttemptMetricsConstants.MASTER_CONTAINER_INFO)) {\n            amContainerId \u003d\n                ContainerId.fromString(eventInfo.get(\n                    AppAttemptMetricsConstants.MASTER_CONTAINER_INFO)\n                    .toString());\n          }\n        } else if (event.getEventType().equals(\n            AppAttemptMetricsConstants.FINISHED_EVENT_TYPE)) {\n          Map\u003cString, Object\u003e eventInfo \u003d event.getEventInfo();\n          if (eventInfo \u003d\u003d null) {\n            continue;\n          }\n          if (eventInfo\n              .containsKey(AppAttemptMetricsConstants.TRACKING_URL_INFO)) {\n            trackingUrl \u003d\n                eventInfo.get(\n                    AppAttemptMetricsConstants.TRACKING_URL_INFO)\n                    .toString();\n          }\n          if (eventInfo\n              .containsKey(\n                  AppAttemptMetricsConstants.ORIGINAL_TRACKING_URL_INFO)) {\n            originalTrackingUrl \u003d\n                eventInfo\n                    .get(\n                        AppAttemptMetricsConstants.ORIGINAL_TRACKING_URL_INFO)\n                    .toString();\n          }\n          if (eventInfo\n              .containsKey(AppAttemptMetricsConstants.DIAGNOSTICS_INFO)) {\n            diagnosticsInfo \u003d\n                eventInfo.get(\n                    AppAttemptMetricsConstants.DIAGNOSTICS_INFO)\n                    .toString();\n          }\n          if (eventInfo\n              .containsKey(AppAttemptMetricsConstants.STATE_INFO)) {\n            state \u003d\n                YarnApplicationAttemptState.valueOf(eventInfo.get(\n                    AppAttemptMetricsConstants.STATE_INFO)\n                    .toString());\n          }\n          if (eventInfo\n              .containsKey(AppAttemptMetricsConstants.MASTER_CONTAINER_INFO)) {\n            amContainerId \u003d\n                ContainerId.fromString(eventInfo.get(\n                    AppAttemptMetricsConstants.MASTER_CONTAINER_INFO)\n                    .toString());\n          }\n        }\n      }\n    }\n    return ApplicationAttemptReport.newInstance(\n        ApplicationAttemptId.fromString(entity.getEntityId()),\n        host, rpcPort, trackingUrl, originalTrackingUrl, diagnosticsInfo,\n        state, amContainerId);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/ApplicationHistoryManagerOnTimelineStore.java",
      "extendedDetails": {}
    },
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1942. Deprecate toString/fromString methods from ConverterUtils and move them to records classes like ContainerId/ApplicationId, etc. (wangda)\n",
      "commitDate": "14/06/16 3:06 PM",
      "commitName": "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "19/05/16 9:13 AM",
      "commitNameOld": "141873ca7d68619e3458712b17aed57fec8fd7c8",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 26.25,
      "commitsBetweenForRepo": 163,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,85 +1,85 @@\n   private static ApplicationAttemptReport convertToApplicationAttemptReport(\n       TimelineEntity entity) {\n     String host \u003d null;\n     int rpcPort \u003d -1;\n     ContainerId amContainerId \u003d null;\n     String trackingUrl \u003d null;\n     String originalTrackingUrl \u003d null;\n     String diagnosticsInfo \u003d null;\n     YarnApplicationAttemptState state \u003d null;\n     List\u003cTimelineEvent\u003e events \u003d entity.getEvents();\n     if (events !\u003d null) {\n       for (TimelineEvent event : events) {\n         if (event.getEventType().equals(\n             AppAttemptMetricsConstants.REGISTERED_EVENT_TYPE)) {\n           Map\u003cString, Object\u003e eventInfo \u003d event.getEventInfo();\n           if (eventInfo \u003d\u003d null) {\n             continue;\n           }\n           if (eventInfo.containsKey(AppAttemptMetricsConstants.HOST_EVENT_INFO)) {\n             host \u003d\n                 eventInfo.get(AppAttemptMetricsConstants.HOST_EVENT_INFO)\n                     .toString();\n           }\n           if (eventInfo\n               .containsKey(AppAttemptMetricsConstants.RPC_PORT_EVENT_INFO)) {\n             rpcPort \u003d (Integer) eventInfo.get(\n                     AppAttemptMetricsConstants.RPC_PORT_EVENT_INFO);\n           }\n           if (eventInfo\n               .containsKey(AppAttemptMetricsConstants.MASTER_CONTAINER_EVENT_INFO)) {\n             amContainerId \u003d\n-                ConverterUtils.toContainerId(eventInfo.get(\n+                ContainerId.fromString(eventInfo.get(\n                     AppAttemptMetricsConstants.MASTER_CONTAINER_EVENT_INFO)\n                     .toString());\n           }\n         } else if (event.getEventType().equals(\n             AppAttemptMetricsConstants.FINISHED_EVENT_TYPE)) {\n           Map\u003cString, Object\u003e eventInfo \u003d event.getEventInfo();\n           if (eventInfo \u003d\u003d null) {\n             continue;\n           }\n           if (eventInfo\n               .containsKey(AppAttemptMetricsConstants.TRACKING_URL_EVENT_INFO)) {\n             trackingUrl \u003d\n                 eventInfo.get(\n                     AppAttemptMetricsConstants.TRACKING_URL_EVENT_INFO)\n                     .toString();\n           }\n           if (eventInfo\n               .containsKey(AppAttemptMetricsConstants.ORIGINAL_TRACKING_URL_EVENT_INFO)) {\n             originalTrackingUrl \u003d\n                 eventInfo\n                     .get(\n                         AppAttemptMetricsConstants.ORIGINAL_TRACKING_URL_EVENT_INFO)\n                     .toString();\n           }\n           if (eventInfo\n               .containsKey(AppAttemptMetricsConstants.DIAGNOSTICS_INFO_EVENT_INFO)) {\n             diagnosticsInfo \u003d\n                 eventInfo.get(\n                     AppAttemptMetricsConstants.DIAGNOSTICS_INFO_EVENT_INFO)\n                     .toString();\n           }\n           if (eventInfo\n               .containsKey(AppAttemptMetricsConstants.STATE_EVENT_INFO)) {\n             state \u003d\n                 YarnApplicationAttemptState.valueOf(eventInfo.get(\n                     AppAttemptMetricsConstants.STATE_EVENT_INFO)\n                     .toString());\n           }\n           if (eventInfo\n               .containsKey(AppAttemptMetricsConstants.MASTER_CONTAINER_EVENT_INFO)) {\n             amContainerId \u003d\n-                ConverterUtils.toContainerId(eventInfo.get(\n+                ContainerId.fromString(eventInfo.get(\n                     AppAttemptMetricsConstants.MASTER_CONTAINER_EVENT_INFO)\n                     .toString());\n           }\n         }\n       }\n     }\n     return ApplicationAttemptReport.newInstance(\n-        ConverterUtils.toApplicationAttemptId(entity.getEntityId()),\n+        ApplicationAttemptId.fromString(entity.getEntityId()),\n         host, rpcPort, trackingUrl, originalTrackingUrl, diagnosticsInfo,\n         state, amContainerId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static ApplicationAttemptReport convertToApplicationAttemptReport(\n      TimelineEntity entity) {\n    String host \u003d null;\n    int rpcPort \u003d -1;\n    ContainerId amContainerId \u003d null;\n    String trackingUrl \u003d null;\n    String originalTrackingUrl \u003d null;\n    String diagnosticsInfo \u003d null;\n    YarnApplicationAttemptState state \u003d null;\n    List\u003cTimelineEvent\u003e events \u003d entity.getEvents();\n    if (events !\u003d null) {\n      for (TimelineEvent event : events) {\n        if (event.getEventType().equals(\n            AppAttemptMetricsConstants.REGISTERED_EVENT_TYPE)) {\n          Map\u003cString, Object\u003e eventInfo \u003d event.getEventInfo();\n          if (eventInfo \u003d\u003d null) {\n            continue;\n          }\n          if (eventInfo.containsKey(AppAttemptMetricsConstants.HOST_EVENT_INFO)) {\n            host \u003d\n                eventInfo.get(AppAttemptMetricsConstants.HOST_EVENT_INFO)\n                    .toString();\n          }\n          if (eventInfo\n              .containsKey(AppAttemptMetricsConstants.RPC_PORT_EVENT_INFO)) {\n            rpcPort \u003d (Integer) eventInfo.get(\n                    AppAttemptMetricsConstants.RPC_PORT_EVENT_INFO);\n          }\n          if (eventInfo\n              .containsKey(AppAttemptMetricsConstants.MASTER_CONTAINER_EVENT_INFO)) {\n            amContainerId \u003d\n                ContainerId.fromString(eventInfo.get(\n                    AppAttemptMetricsConstants.MASTER_CONTAINER_EVENT_INFO)\n                    .toString());\n          }\n        } else if (event.getEventType().equals(\n            AppAttemptMetricsConstants.FINISHED_EVENT_TYPE)) {\n          Map\u003cString, Object\u003e eventInfo \u003d event.getEventInfo();\n          if (eventInfo \u003d\u003d null) {\n            continue;\n          }\n          if (eventInfo\n              .containsKey(AppAttemptMetricsConstants.TRACKING_URL_EVENT_INFO)) {\n            trackingUrl \u003d\n                eventInfo.get(\n                    AppAttemptMetricsConstants.TRACKING_URL_EVENT_INFO)\n                    .toString();\n          }\n          if (eventInfo\n              .containsKey(AppAttemptMetricsConstants.ORIGINAL_TRACKING_URL_EVENT_INFO)) {\n            originalTrackingUrl \u003d\n                eventInfo\n                    .get(\n                        AppAttemptMetricsConstants.ORIGINAL_TRACKING_URL_EVENT_INFO)\n                    .toString();\n          }\n          if (eventInfo\n              .containsKey(AppAttemptMetricsConstants.DIAGNOSTICS_INFO_EVENT_INFO)) {\n            diagnosticsInfo \u003d\n                eventInfo.get(\n                    AppAttemptMetricsConstants.DIAGNOSTICS_INFO_EVENT_INFO)\n                    .toString();\n          }\n          if (eventInfo\n              .containsKey(AppAttemptMetricsConstants.STATE_EVENT_INFO)) {\n            state \u003d\n                YarnApplicationAttemptState.valueOf(eventInfo.get(\n                    AppAttemptMetricsConstants.STATE_EVENT_INFO)\n                    .toString());\n          }\n          if (eventInfo\n              .containsKey(AppAttemptMetricsConstants.MASTER_CONTAINER_EVENT_INFO)) {\n            amContainerId \u003d\n                ContainerId.fromString(eventInfo.get(\n                    AppAttemptMetricsConstants.MASTER_CONTAINER_EVENT_INFO)\n                    .toString());\n          }\n        }\n      }\n    }\n    return ApplicationAttemptReport.newInstance(\n        ApplicationAttemptId.fromString(entity.getEntityId()),\n        host, rpcPort, trackingUrl, originalTrackingUrl, diagnosticsInfo,\n        state, amContainerId);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/ApplicationHistoryManagerOnTimelineStore.java",
      "extendedDetails": {}
    },
    "4ff973f96ae7f77cda3b52b38427e2991819ad31": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4422. Generic AHS sometimes doesn\u0027t show started, node, or logs on App page (Eric Payne via jeagles)\n",
      "commitDate": "07/12/15 1:04 PM",
      "commitName": "4ff973f96ae7f77cda3b52b38427e2991819ad31",
      "commitAuthor": "Jonathan Eagles",
      "commitDateOld": "26/10/15 1:07 PM",
      "commitNameOld": "3cc73773eb26f7469c99b25a76814d6fad0be28e",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 42.04,
      "commitsBetweenForRepo": 306,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,78 +1,85 @@\n   private static ApplicationAttemptReport convertToApplicationAttemptReport(\n       TimelineEntity entity) {\n     String host \u003d null;\n     int rpcPort \u003d -1;\n     ContainerId amContainerId \u003d null;\n     String trackingUrl \u003d null;\n     String originalTrackingUrl \u003d null;\n     String diagnosticsInfo \u003d null;\n     YarnApplicationAttemptState state \u003d null;\n     List\u003cTimelineEvent\u003e events \u003d entity.getEvents();\n     if (events !\u003d null) {\n       for (TimelineEvent event : events) {\n         if (event.getEventType().equals(\n             AppAttemptMetricsConstants.REGISTERED_EVENT_TYPE)) {\n           Map\u003cString, Object\u003e eventInfo \u003d event.getEventInfo();\n           if (eventInfo \u003d\u003d null) {\n             continue;\n           }\n           if (eventInfo.containsKey(AppAttemptMetricsConstants.HOST_EVENT_INFO)) {\n             host \u003d\n                 eventInfo.get(AppAttemptMetricsConstants.HOST_EVENT_INFO)\n                     .toString();\n           }\n           if (eventInfo\n               .containsKey(AppAttemptMetricsConstants.RPC_PORT_EVENT_INFO)) {\n             rpcPort \u003d (Integer) eventInfo.get(\n                     AppAttemptMetricsConstants.RPC_PORT_EVENT_INFO);\n           }\n           if (eventInfo\n               .containsKey(AppAttemptMetricsConstants.MASTER_CONTAINER_EVENT_INFO)) {\n             amContainerId \u003d\n                 ConverterUtils.toContainerId(eventInfo.get(\n                     AppAttemptMetricsConstants.MASTER_CONTAINER_EVENT_INFO)\n                     .toString());\n           }\n         } else if (event.getEventType().equals(\n             AppAttemptMetricsConstants.FINISHED_EVENT_TYPE)) {\n           Map\u003cString, Object\u003e eventInfo \u003d event.getEventInfo();\n           if (eventInfo \u003d\u003d null) {\n             continue;\n           }\n           if (eventInfo\n               .containsKey(AppAttemptMetricsConstants.TRACKING_URL_EVENT_INFO)) {\n             trackingUrl \u003d\n                 eventInfo.get(\n                     AppAttemptMetricsConstants.TRACKING_URL_EVENT_INFO)\n                     .toString();\n           }\n           if (eventInfo\n               .containsKey(AppAttemptMetricsConstants.ORIGINAL_TRACKING_URL_EVENT_INFO)) {\n             originalTrackingUrl \u003d\n                 eventInfo\n                     .get(\n                         AppAttemptMetricsConstants.ORIGINAL_TRACKING_URL_EVENT_INFO)\n                     .toString();\n           }\n           if (eventInfo\n               .containsKey(AppAttemptMetricsConstants.DIAGNOSTICS_INFO_EVENT_INFO)) {\n             diagnosticsInfo \u003d\n                 eventInfo.get(\n                     AppAttemptMetricsConstants.DIAGNOSTICS_INFO_EVENT_INFO)\n                     .toString();\n           }\n           if (eventInfo\n               .containsKey(AppAttemptMetricsConstants.STATE_EVENT_INFO)) {\n             state \u003d\n                 YarnApplicationAttemptState.valueOf(eventInfo.get(\n                     AppAttemptMetricsConstants.STATE_EVENT_INFO)\n                     .toString());\n           }\n+          if (eventInfo\n+              .containsKey(AppAttemptMetricsConstants.MASTER_CONTAINER_EVENT_INFO)) {\n+            amContainerId \u003d\n+                ConverterUtils.toContainerId(eventInfo.get(\n+                    AppAttemptMetricsConstants.MASTER_CONTAINER_EVENT_INFO)\n+                    .toString());\n+          }\n         }\n       }\n     }\n     return ApplicationAttemptReport.newInstance(\n         ConverterUtils.toApplicationAttemptId(entity.getEntityId()),\n         host, rpcPort, trackingUrl, originalTrackingUrl, diagnosticsInfo,\n         state, amContainerId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static ApplicationAttemptReport convertToApplicationAttemptReport(\n      TimelineEntity entity) {\n    String host \u003d null;\n    int rpcPort \u003d -1;\n    ContainerId amContainerId \u003d null;\n    String trackingUrl \u003d null;\n    String originalTrackingUrl \u003d null;\n    String diagnosticsInfo \u003d null;\n    YarnApplicationAttemptState state \u003d null;\n    List\u003cTimelineEvent\u003e events \u003d entity.getEvents();\n    if (events !\u003d null) {\n      for (TimelineEvent event : events) {\n        if (event.getEventType().equals(\n            AppAttemptMetricsConstants.REGISTERED_EVENT_TYPE)) {\n          Map\u003cString, Object\u003e eventInfo \u003d event.getEventInfo();\n          if (eventInfo \u003d\u003d null) {\n            continue;\n          }\n          if (eventInfo.containsKey(AppAttemptMetricsConstants.HOST_EVENT_INFO)) {\n            host \u003d\n                eventInfo.get(AppAttemptMetricsConstants.HOST_EVENT_INFO)\n                    .toString();\n          }\n          if (eventInfo\n              .containsKey(AppAttemptMetricsConstants.RPC_PORT_EVENT_INFO)) {\n            rpcPort \u003d (Integer) eventInfo.get(\n                    AppAttemptMetricsConstants.RPC_PORT_EVENT_INFO);\n          }\n          if (eventInfo\n              .containsKey(AppAttemptMetricsConstants.MASTER_CONTAINER_EVENT_INFO)) {\n            amContainerId \u003d\n                ConverterUtils.toContainerId(eventInfo.get(\n                    AppAttemptMetricsConstants.MASTER_CONTAINER_EVENT_INFO)\n                    .toString());\n          }\n        } else if (event.getEventType().equals(\n            AppAttemptMetricsConstants.FINISHED_EVENT_TYPE)) {\n          Map\u003cString, Object\u003e eventInfo \u003d event.getEventInfo();\n          if (eventInfo \u003d\u003d null) {\n            continue;\n          }\n          if (eventInfo\n              .containsKey(AppAttemptMetricsConstants.TRACKING_URL_EVENT_INFO)) {\n            trackingUrl \u003d\n                eventInfo.get(\n                    AppAttemptMetricsConstants.TRACKING_URL_EVENT_INFO)\n                    .toString();\n          }\n          if (eventInfo\n              .containsKey(AppAttemptMetricsConstants.ORIGINAL_TRACKING_URL_EVENT_INFO)) {\n            originalTrackingUrl \u003d\n                eventInfo\n                    .get(\n                        AppAttemptMetricsConstants.ORIGINAL_TRACKING_URL_EVENT_INFO)\n                    .toString();\n          }\n          if (eventInfo\n              .containsKey(AppAttemptMetricsConstants.DIAGNOSTICS_INFO_EVENT_INFO)) {\n            diagnosticsInfo \u003d\n                eventInfo.get(\n                    AppAttemptMetricsConstants.DIAGNOSTICS_INFO_EVENT_INFO)\n                    .toString();\n          }\n          if (eventInfo\n              .containsKey(AppAttemptMetricsConstants.STATE_EVENT_INFO)) {\n            state \u003d\n                YarnApplicationAttemptState.valueOf(eventInfo.get(\n                    AppAttemptMetricsConstants.STATE_EVENT_INFO)\n                    .toString());\n          }\n          if (eventInfo\n              .containsKey(AppAttemptMetricsConstants.MASTER_CONTAINER_EVENT_INFO)) {\n            amContainerId \u003d\n                ConverterUtils.toContainerId(eventInfo.get(\n                    AppAttemptMetricsConstants.MASTER_CONTAINER_EVENT_INFO)\n                    .toString());\n          }\n        }\n      }\n    }\n    return ApplicationAttemptReport.newInstance(\n        ConverterUtils.toApplicationAttemptId(entity.getEntityId()),\n        host, rpcPort, trackingUrl, originalTrackingUrl, diagnosticsInfo,\n        state, amContainerId);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/ApplicationHistoryManagerOnTimelineStore.java",
      "extendedDetails": {}
    },
    "6b8b1608e64e300e4e1d23c60476febaca29ca38": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2033. Merging generic-history into the Timeline Store (Contributed by Zhijie Shen)\n",
      "commitDate": "11/09/14 7:04 PM",
      "commitName": "6b8b1608e64e300e4e1d23c60476febaca29ca38",
      "commitAuthor": "junping_du",
      "diff": "@@ -0,0 +1,78 @@\n+  private static ApplicationAttemptReport convertToApplicationAttemptReport(\n+      TimelineEntity entity) {\n+    String host \u003d null;\n+    int rpcPort \u003d -1;\n+    ContainerId amContainerId \u003d null;\n+    String trackingUrl \u003d null;\n+    String originalTrackingUrl \u003d null;\n+    String diagnosticsInfo \u003d null;\n+    YarnApplicationAttemptState state \u003d null;\n+    List\u003cTimelineEvent\u003e events \u003d entity.getEvents();\n+    if (events !\u003d null) {\n+      for (TimelineEvent event : events) {\n+        if (event.getEventType().equals(\n+            AppAttemptMetricsConstants.REGISTERED_EVENT_TYPE)) {\n+          Map\u003cString, Object\u003e eventInfo \u003d event.getEventInfo();\n+          if (eventInfo \u003d\u003d null) {\n+            continue;\n+          }\n+          if (eventInfo.containsKey(AppAttemptMetricsConstants.HOST_EVENT_INFO)) {\n+            host \u003d\n+                eventInfo.get(AppAttemptMetricsConstants.HOST_EVENT_INFO)\n+                    .toString();\n+          }\n+          if (eventInfo\n+              .containsKey(AppAttemptMetricsConstants.RPC_PORT_EVENT_INFO)) {\n+            rpcPort \u003d (Integer) eventInfo.get(\n+                    AppAttemptMetricsConstants.RPC_PORT_EVENT_INFO);\n+          }\n+          if (eventInfo\n+              .containsKey(AppAttemptMetricsConstants.MASTER_CONTAINER_EVENT_INFO)) {\n+            amContainerId \u003d\n+                ConverterUtils.toContainerId(eventInfo.get(\n+                    AppAttemptMetricsConstants.MASTER_CONTAINER_EVENT_INFO)\n+                    .toString());\n+          }\n+        } else if (event.getEventType().equals(\n+            AppAttemptMetricsConstants.FINISHED_EVENT_TYPE)) {\n+          Map\u003cString, Object\u003e eventInfo \u003d event.getEventInfo();\n+          if (eventInfo \u003d\u003d null) {\n+            continue;\n+          }\n+          if (eventInfo\n+              .containsKey(AppAttemptMetricsConstants.TRACKING_URL_EVENT_INFO)) {\n+            trackingUrl \u003d\n+                eventInfo.get(\n+                    AppAttemptMetricsConstants.TRACKING_URL_EVENT_INFO)\n+                    .toString();\n+          }\n+          if (eventInfo\n+              .containsKey(AppAttemptMetricsConstants.ORIGINAL_TRACKING_URL_EVENT_INFO)) {\n+            originalTrackingUrl \u003d\n+                eventInfo\n+                    .get(\n+                        AppAttemptMetricsConstants.ORIGINAL_TRACKING_URL_EVENT_INFO)\n+                    .toString();\n+          }\n+          if (eventInfo\n+              .containsKey(AppAttemptMetricsConstants.DIAGNOSTICS_INFO_EVENT_INFO)) {\n+            diagnosticsInfo \u003d\n+                eventInfo.get(\n+                    AppAttemptMetricsConstants.DIAGNOSTICS_INFO_EVENT_INFO)\n+                    .toString();\n+          }\n+          if (eventInfo\n+              .containsKey(AppAttemptMetricsConstants.STATE_EVENT_INFO)) {\n+            state \u003d\n+                YarnApplicationAttemptState.valueOf(eventInfo.get(\n+                    AppAttemptMetricsConstants.STATE_EVENT_INFO)\n+                    .toString());\n+          }\n+        }\n+      }\n+    }\n+    return ApplicationAttemptReport.newInstance(\n+        ConverterUtils.toApplicationAttemptId(entity.getEntityId()),\n+        host, rpcPort, trackingUrl, originalTrackingUrl, diagnosticsInfo,\n+        state, amContainerId);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static ApplicationAttemptReport convertToApplicationAttemptReport(\n      TimelineEntity entity) {\n    String host \u003d null;\n    int rpcPort \u003d -1;\n    ContainerId amContainerId \u003d null;\n    String trackingUrl \u003d null;\n    String originalTrackingUrl \u003d null;\n    String diagnosticsInfo \u003d null;\n    YarnApplicationAttemptState state \u003d null;\n    List\u003cTimelineEvent\u003e events \u003d entity.getEvents();\n    if (events !\u003d null) {\n      for (TimelineEvent event : events) {\n        if (event.getEventType().equals(\n            AppAttemptMetricsConstants.REGISTERED_EVENT_TYPE)) {\n          Map\u003cString, Object\u003e eventInfo \u003d event.getEventInfo();\n          if (eventInfo \u003d\u003d null) {\n            continue;\n          }\n          if (eventInfo.containsKey(AppAttemptMetricsConstants.HOST_EVENT_INFO)) {\n            host \u003d\n                eventInfo.get(AppAttemptMetricsConstants.HOST_EVENT_INFO)\n                    .toString();\n          }\n          if (eventInfo\n              .containsKey(AppAttemptMetricsConstants.RPC_PORT_EVENT_INFO)) {\n            rpcPort \u003d (Integer) eventInfo.get(\n                    AppAttemptMetricsConstants.RPC_PORT_EVENT_INFO);\n          }\n          if (eventInfo\n              .containsKey(AppAttemptMetricsConstants.MASTER_CONTAINER_EVENT_INFO)) {\n            amContainerId \u003d\n                ConverterUtils.toContainerId(eventInfo.get(\n                    AppAttemptMetricsConstants.MASTER_CONTAINER_EVENT_INFO)\n                    .toString());\n          }\n        } else if (event.getEventType().equals(\n            AppAttemptMetricsConstants.FINISHED_EVENT_TYPE)) {\n          Map\u003cString, Object\u003e eventInfo \u003d event.getEventInfo();\n          if (eventInfo \u003d\u003d null) {\n            continue;\n          }\n          if (eventInfo\n              .containsKey(AppAttemptMetricsConstants.TRACKING_URL_EVENT_INFO)) {\n            trackingUrl \u003d\n                eventInfo.get(\n                    AppAttemptMetricsConstants.TRACKING_URL_EVENT_INFO)\n                    .toString();\n          }\n          if (eventInfo\n              .containsKey(AppAttemptMetricsConstants.ORIGINAL_TRACKING_URL_EVENT_INFO)) {\n            originalTrackingUrl \u003d\n                eventInfo\n                    .get(\n                        AppAttemptMetricsConstants.ORIGINAL_TRACKING_URL_EVENT_INFO)\n                    .toString();\n          }\n          if (eventInfo\n              .containsKey(AppAttemptMetricsConstants.DIAGNOSTICS_INFO_EVENT_INFO)) {\n            diagnosticsInfo \u003d\n                eventInfo.get(\n                    AppAttemptMetricsConstants.DIAGNOSTICS_INFO_EVENT_INFO)\n                    .toString();\n          }\n          if (eventInfo\n              .containsKey(AppAttemptMetricsConstants.STATE_EVENT_INFO)) {\n            state \u003d\n                YarnApplicationAttemptState.valueOf(eventInfo.get(\n                    AppAttemptMetricsConstants.STATE_EVENT_INFO)\n                    .toString());\n          }\n        }\n      }\n    }\n    return ApplicationAttemptReport.newInstance(\n        ConverterUtils.toApplicationAttemptId(entity.getEntityId()),\n        host, rpcPort, trackingUrl, originalTrackingUrl, diagnosticsInfo,\n        state, amContainerId);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/ApplicationHistoryManagerOnTimelineStore.java"
    }
  }
}