{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LeaseRenewer.java",
  "functionName": "run",
  "functionId": "run___id-int(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/client/impl/LeaseRenewer.java",
  "functionStartLine": 410,
  "functionEndLine": 467,
  "numCommitsSeen": 30,
  "timeTaken": 6660,
  "changeHistory": [
    "738d1a206aba05f0b4be7d633b17db7fcd1c74bc",
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
    "fbd88f1062f3c4b208724d208e3f501eb196dfab",
    "d3d019c337ecc10e9c6bbefc3a97c6cd1f5283c3",
    "75ead273bea8a7dad61c4f99c3a16cab2697c498",
    "c04a7d974aa5ae2589d36f63c4ac45fb42cd1b80",
    "0a6806ce8c946b26eceac7d16b467c54c453df84",
    "4a5ba3b7bd2360fd9605863630b477d362874e1e",
    "0ee71adeb4b2a91d74110c0f0c1df63a1cf36014",
    "1d2e706dd1e4b0cab5595ab57f21b38abb01fda9",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "738d1a206aba05f0b4be7d633b17db7fcd1c74bc": "Ybodychange",
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c": "Yfilerename",
    "fbd88f1062f3c4b208724d208e3f501eb196dfab": "Ybodychange",
    "d3d019c337ecc10e9c6bbefc3a97c6cd1f5283c3": "Yfilerename",
    "75ead273bea8a7dad61c4f99c3a16cab2697c498": "Ybodychange",
    "c04a7d974aa5ae2589d36f63c4ac45fb42cd1b80": "Ybodychange",
    "0a6806ce8c946b26eceac7d16b467c54c453df84": "Ybodychange",
    "4a5ba3b7bd2360fd9605863630b477d362874e1e": "Ybodychange",
    "0ee71adeb4b2a91d74110c0f0c1df63a1cf36014": "Ybodychange",
    "1d2e706dd1e4b0cab5595ab57f21b38abb01fda9": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "738d1a206aba05f0b4be7d633b17db7fcd1c74bc": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12754. Lease renewal can hit a deadlock. Contributed by Kuhu Shukla.\n",
      "commitDate": "22/11/17 11:01 AM",
      "commitName": "738d1a206aba05f0b4be7d633b17db7fcd1c74bc",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "03/10/15 11:38 AM",
      "commitNameOld": "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 781.02,
      "commitsBetweenForRepo": 5310,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,58 @@\n   private void run(final int id) throws InterruptedException {\n     for(long lastRenewed \u003d Time.monotonicNow(); !Thread.interrupted();\n         Thread.sleep(getSleepPeriod())) {\n       final long elapsed \u003d Time.monotonicNow() - lastRenewed;\n       if (elapsed \u003e\u003d getRenewalTime()) {\n         try {\n           renew();\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Lease renewer daemon for \" + clientsString()\n                 + \" with renew id \" + id + \" executed\");\n           }\n           lastRenewed \u003d Time.monotonicNow();\n         } catch (SocketTimeoutException ie) {\n           LOG.warn(\"Failed to renew lease for \" + clientsString() + \" for \"\n               + (elapsed/1000) + \" seconds.  Aborting ...\", ie);\n+          List\u003cDFSClient\u003e dfsclientsCopy;\n           synchronized (this) {\n-            while (!dfsclients.isEmpty()) {\n-              DFSClient dfsClient \u003d dfsclients.get(0);\n-              dfsClient.closeAllFilesBeingWritten(true);\n-              closeClient(dfsClient);\n-            }\n+            DFSClientFaultInjector.get().delayWhenRenewLeaseTimeout();\n+            dfsclientsCopy \u003d new ArrayList\u003c\u003e(dfsclients);\n+            dfsclients.clear();\n             //Expire the current LeaseRenewer thread.\n             emptyTime \u003d 0;\n+            Factory.INSTANCE.remove(LeaseRenewer.this);\n+          }\n+          for (DFSClient dfsClient : dfsclientsCopy) {\n+            dfsClient.closeAllFilesBeingWritten(true);\n           }\n           break;\n         } catch (IOException ie) {\n           LOG.warn(\"Failed to renew lease for \" + clientsString() + \" for \"\n               + (elapsed/1000) + \" seconds.  Will retry shortly ...\", ie);\n         }\n       }\n \n       synchronized(this) {\n         if (id !\u003d currentId || isRenewerExpired()) {\n           if (LOG.isDebugEnabled()) {\n             if (id !\u003d currentId) {\n               LOG.debug(\"Lease renewer daemon for \" + clientsString()\n                   + \" with renew id \" + id + \" is not current\");\n             } else {\n               LOG.debug(\"Lease renewer daemon for \" + clientsString()\n                   + \" with renew id \" + id + \" expired\");\n             }\n           }\n           //no longer the current daemon or expired\n           return;\n         }\n \n         // if no clients are in running state or there is no more clients\n         // registered with this renewer, stop the daemon after the grace\n         // period.\n         if (!clientsRunning() \u0026\u0026 emptyTime \u003d\u003d Long.MAX_VALUE) {\n           emptyTime \u003d Time.monotonicNow();\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void run(final int id) throws InterruptedException {\n    for(long lastRenewed \u003d Time.monotonicNow(); !Thread.interrupted();\n        Thread.sleep(getSleepPeriod())) {\n      final long elapsed \u003d Time.monotonicNow() - lastRenewed;\n      if (elapsed \u003e\u003d getRenewalTime()) {\n        try {\n          renew();\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Lease renewer daemon for \" + clientsString()\n                + \" with renew id \" + id + \" executed\");\n          }\n          lastRenewed \u003d Time.monotonicNow();\n        } catch (SocketTimeoutException ie) {\n          LOG.warn(\"Failed to renew lease for \" + clientsString() + \" for \"\n              + (elapsed/1000) + \" seconds.  Aborting ...\", ie);\n          List\u003cDFSClient\u003e dfsclientsCopy;\n          synchronized (this) {\n            DFSClientFaultInjector.get().delayWhenRenewLeaseTimeout();\n            dfsclientsCopy \u003d new ArrayList\u003c\u003e(dfsclients);\n            dfsclients.clear();\n            //Expire the current LeaseRenewer thread.\n            emptyTime \u003d 0;\n            Factory.INSTANCE.remove(LeaseRenewer.this);\n          }\n          for (DFSClient dfsClient : dfsclientsCopy) {\n            dfsClient.closeAllFilesBeingWritten(true);\n          }\n          break;\n        } catch (IOException ie) {\n          LOG.warn(\"Failed to renew lease for \" + clientsString() + \" for \"\n              + (elapsed/1000) + \" seconds.  Will retry shortly ...\", ie);\n        }\n      }\n\n      synchronized(this) {\n        if (id !\u003d currentId || isRenewerExpired()) {\n          if (LOG.isDebugEnabled()) {\n            if (id !\u003d currentId) {\n              LOG.debug(\"Lease renewer daemon for \" + clientsString()\n                  + \" with renew id \" + id + \" is not current\");\n            } else {\n              LOG.debug(\"Lease renewer daemon for \" + clientsString()\n                  + \" with renew id \" + id + \" expired\");\n            }\n          }\n          //no longer the current daemon or expired\n          return;\n        }\n\n        // if no clients are in running state or there is no more clients\n        // registered with this renewer, stop the daemon after the grace\n        // period.\n        if (!clientsRunning() \u0026\u0026 emptyTime \u003d\u003d Long.MAX_VALUE) {\n          emptyTime \u003d Time.monotonicNow();\n        }\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/client/impl/LeaseRenewer.java",
      "extendedDetails": {}
    },
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8053. Move DFSIn/OutputStream and related classes to hadoop-hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "26/09/15 11:08 AM",
      "commitName": "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "26/09/15 9:06 AM",
      "commitNameOld": "861b52db242f238d7e36ad75c158025be959a696",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void run(final int id) throws InterruptedException {\n    for(long lastRenewed \u003d Time.monotonicNow(); !Thread.interrupted();\n        Thread.sleep(getSleepPeriod())) {\n      final long elapsed \u003d Time.monotonicNow() - lastRenewed;\n      if (elapsed \u003e\u003d getRenewalTime()) {\n        try {\n          renew();\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Lease renewer daemon for \" + clientsString()\n                + \" with renew id \" + id + \" executed\");\n          }\n          lastRenewed \u003d Time.monotonicNow();\n        } catch (SocketTimeoutException ie) {\n          LOG.warn(\"Failed to renew lease for \" + clientsString() + \" for \"\n              + (elapsed/1000) + \" seconds.  Aborting ...\", ie);\n          synchronized (this) {\n            while (!dfsclients.isEmpty()) {\n              DFSClient dfsClient \u003d dfsclients.get(0);\n              dfsClient.closeAllFilesBeingWritten(true);\n              closeClient(dfsClient);\n            }\n            //Expire the current LeaseRenewer thread.\n            emptyTime \u003d 0;\n          }\n          break;\n        } catch (IOException ie) {\n          LOG.warn(\"Failed to renew lease for \" + clientsString() + \" for \"\n              + (elapsed/1000) + \" seconds.  Will retry shortly ...\", ie);\n        }\n      }\n\n      synchronized(this) {\n        if (id !\u003d currentId || isRenewerExpired()) {\n          if (LOG.isDebugEnabled()) {\n            if (id !\u003d currentId) {\n              LOG.debug(\"Lease renewer daemon for \" + clientsString()\n                  + \" with renew id \" + id + \" is not current\");\n            } else {\n               LOG.debug(\"Lease renewer daemon for \" + clientsString()\n                  + \" with renew id \" + id + \" expired\");\n            }\n          }\n          //no longer the current daemon or expired\n          return;\n        }\n\n        // if no clients are in running state or there is no more clients\n        // registered with this renewer, stop the daemon after the grace\n        // period.\n        if (!clientsRunning() \u0026\u0026 emptyTime \u003d\u003d Long.MAX_VALUE) {\n          emptyTime \u003d Time.monotonicNow();\n        }\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/client/impl/LeaseRenewer.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/impl/LeaseRenewer.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/client/impl/LeaseRenewer.java"
      }
    },
    "fbd88f1062f3c4b208724d208e3f501eb196dfab": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7314. When the DFSClient lease cannot be renewed, abort open-for-write files rather than the entire DFSClient. (mingma)\n",
      "commitDate": "16/07/15 12:33 PM",
      "commitName": "fbd88f1062f3c4b208724d208e3f501eb196dfab",
      "commitAuthor": "Ming Ma",
      "commitDateOld": "02/05/15 10:03 AM",
      "commitNameOld": "6ae2a0d048e133b43249c248a75a4d77d9abb80d",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 75.1,
      "commitsBetweenForRepo": 613,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,55 @@\n   private void run(final int id) throws InterruptedException {\n     for(long lastRenewed \u003d Time.monotonicNow(); !Thread.interrupted();\n         Thread.sleep(getSleepPeriod())) {\n       final long elapsed \u003d Time.monotonicNow() - lastRenewed;\n       if (elapsed \u003e\u003d getRenewalTime()) {\n         try {\n           renew();\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Lease renewer daemon for \" + clientsString()\n                 + \" with renew id \" + id + \" executed\");\n           }\n           lastRenewed \u003d Time.monotonicNow();\n         } catch (SocketTimeoutException ie) {\n           LOG.warn(\"Failed to renew lease for \" + clientsString() + \" for \"\n               + (elapsed/1000) + \" seconds.  Aborting ...\", ie);\n           synchronized (this) {\n             while (!dfsclients.isEmpty()) {\n-              dfsclients.get(0).abort();\n+              DFSClient dfsClient \u003d dfsclients.get(0);\n+              dfsClient.closeAllFilesBeingWritten(true);\n+              closeClient(dfsClient);\n             }\n+            //Expire the current LeaseRenewer thread.\n+            emptyTime \u003d 0;\n           }\n           break;\n         } catch (IOException ie) {\n           LOG.warn(\"Failed to renew lease for \" + clientsString() + \" for \"\n               + (elapsed/1000) + \" seconds.  Will retry shortly ...\", ie);\n         }\n       }\n \n       synchronized(this) {\n         if (id !\u003d currentId || isRenewerExpired()) {\n           if (LOG.isDebugEnabled()) {\n             if (id !\u003d currentId) {\n               LOG.debug(\"Lease renewer daemon for \" + clientsString()\n                   + \" with renew id \" + id + \" is not current\");\n             } else {\n                LOG.debug(\"Lease renewer daemon for \" + clientsString()\n                   + \" with renew id \" + id + \" expired\");\n             }\n           }\n           //no longer the current daemon or expired\n           return;\n         }\n \n         // if no clients are in running state or there is no more clients\n         // registered with this renewer, stop the daemon after the grace\n         // period.\n         if (!clientsRunning() \u0026\u0026 emptyTime \u003d\u003d Long.MAX_VALUE) {\n           emptyTime \u003d Time.monotonicNow();\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void run(final int id) throws InterruptedException {\n    for(long lastRenewed \u003d Time.monotonicNow(); !Thread.interrupted();\n        Thread.sleep(getSleepPeriod())) {\n      final long elapsed \u003d Time.monotonicNow() - lastRenewed;\n      if (elapsed \u003e\u003d getRenewalTime()) {\n        try {\n          renew();\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Lease renewer daemon for \" + clientsString()\n                + \" with renew id \" + id + \" executed\");\n          }\n          lastRenewed \u003d Time.monotonicNow();\n        } catch (SocketTimeoutException ie) {\n          LOG.warn(\"Failed to renew lease for \" + clientsString() + \" for \"\n              + (elapsed/1000) + \" seconds.  Aborting ...\", ie);\n          synchronized (this) {\n            while (!dfsclients.isEmpty()) {\n              DFSClient dfsClient \u003d dfsclients.get(0);\n              dfsClient.closeAllFilesBeingWritten(true);\n              closeClient(dfsClient);\n            }\n            //Expire the current LeaseRenewer thread.\n            emptyTime \u003d 0;\n          }\n          break;\n        } catch (IOException ie) {\n          LOG.warn(\"Failed to renew lease for \" + clientsString() + \" for \"\n              + (elapsed/1000) + \" seconds.  Will retry shortly ...\", ie);\n        }\n      }\n\n      synchronized(this) {\n        if (id !\u003d currentId || isRenewerExpired()) {\n          if (LOG.isDebugEnabled()) {\n            if (id !\u003d currentId) {\n              LOG.debug(\"Lease renewer daemon for \" + clientsString()\n                  + \" with renew id \" + id + \" is not current\");\n            } else {\n               LOG.debug(\"Lease renewer daemon for \" + clientsString()\n                  + \" with renew id \" + id + \" expired\");\n            }\n          }\n          //no longer the current daemon or expired\n          return;\n        }\n\n        // if no clients are in running state or there is no more clients\n        // registered with this renewer, stop the daemon after the grace\n        // period.\n        if (!clientsRunning() \u0026\u0026 emptyTime \u003d\u003d Long.MAX_VALUE) {\n          emptyTime \u003d Time.monotonicNow();\n        }\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/impl/LeaseRenewer.java",
      "extendedDetails": {}
    },
    "d3d019c337ecc10e9c6bbefc3a97c6cd1f5283c3": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8086. Move LeaseRenewer to the hdfs.client.impl package.  Contributed by Takanobu\n",
      "commitDate": "01/05/15 3:12 PM",
      "commitName": "d3d019c337ecc10e9c6bbefc3a97c6cd1f5283c3",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "01/05/15 2:43 PM",
      "commitNameOld": "64d30a61867e5cb0a2acaa7ae4fa4d3eb3be8edd",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void run(final int id) throws InterruptedException {\n    for(long lastRenewed \u003d Time.monotonicNow(); !Thread.interrupted();\n        Thread.sleep(getSleepPeriod())) {\n      final long elapsed \u003d Time.monotonicNow() - lastRenewed;\n      if (elapsed \u003e\u003d getRenewalTime()) {\n        try {\n          renew();\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Lease renewer daemon for \" + clientsString()\n                + \" with renew id \" + id + \" executed\");\n          }\n          lastRenewed \u003d Time.monotonicNow();\n        } catch (SocketTimeoutException ie) {\n          LOG.warn(\"Failed to renew lease for \" + clientsString() + \" for \"\n              + (elapsed/1000) + \" seconds.  Aborting ...\", ie);\n          synchronized (this) {\n            while (!dfsclients.isEmpty()) {\n              dfsclients.get(0).abort();\n            }\n          }\n          break;\n        } catch (IOException ie) {\n          LOG.warn(\"Failed to renew lease for \" + clientsString() + \" for \"\n              + (elapsed/1000) + \" seconds.  Will retry shortly ...\", ie);\n        }\n      }\n\n      synchronized(this) {\n        if (id !\u003d currentId || isRenewerExpired()) {\n          if (LOG.isDebugEnabled()) {\n            if (id !\u003d currentId) {\n              LOG.debug(\"Lease renewer daemon for \" + clientsString()\n                  + \" with renew id \" + id + \" is not current\");\n            } else {\n               LOG.debug(\"Lease renewer daemon for \" + clientsString()\n                  + \" with renew id \" + id + \" expired\");\n            }\n          }\n          //no longer the current daemon or expired\n          return;\n        }\n\n        // if no clients are in running state or there is no more clients\n        // registered with this renewer, stop the daemon after the grace\n        // period.\n        if (!clientsRunning() \u0026\u0026 emptyTime \u003d\u003d Long.MAX_VALUE) {\n          emptyTime \u003d Time.monotonicNow();\n        }\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/impl/LeaseRenewer.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/LeaseRenewer.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/impl/LeaseRenewer.java"
      }
    },
    "75ead273bea8a7dad61c4f99c3a16cab2697c498": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6841. Use Time.monotonicNow() wherever applicable instead of Time.now(). Contributed by Vinayakumar B\n",
      "commitDate": "20/03/15 12:02 PM",
      "commitName": "75ead273bea8a7dad61c4f99c3a16cab2697c498",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "09/05/14 3:36 PM",
      "commitNameOld": "f131dba8a3d603a5d15c4f035ed3da75b4daf0dc",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 314.85,
      "commitsBetweenForRepo": 2615,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,51 @@\n   private void run(final int id) throws InterruptedException {\n-    for(long lastRenewed \u003d Time.now(); !Thread.interrupted();\n+    for(long lastRenewed \u003d Time.monotonicNow(); !Thread.interrupted();\n         Thread.sleep(getSleepPeriod())) {\n-      final long elapsed \u003d Time.now() - lastRenewed;\n+      final long elapsed \u003d Time.monotonicNow() - lastRenewed;\n       if (elapsed \u003e\u003d getRenewalTime()) {\n         try {\n           renew();\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Lease renewer daemon for \" + clientsString()\n                 + \" with renew id \" + id + \" executed\");\n           }\n-          lastRenewed \u003d Time.now();\n+          lastRenewed \u003d Time.monotonicNow();\n         } catch (SocketTimeoutException ie) {\n           LOG.warn(\"Failed to renew lease for \" + clientsString() + \" for \"\n               + (elapsed/1000) + \" seconds.  Aborting ...\", ie);\n           synchronized (this) {\n             while (!dfsclients.isEmpty()) {\n               dfsclients.get(0).abort();\n             }\n           }\n           break;\n         } catch (IOException ie) {\n           LOG.warn(\"Failed to renew lease for \" + clientsString() + \" for \"\n               + (elapsed/1000) + \" seconds.  Will retry shortly ...\", ie);\n         }\n       }\n \n       synchronized(this) {\n         if (id !\u003d currentId || isRenewerExpired()) {\n           if (LOG.isDebugEnabled()) {\n             if (id !\u003d currentId) {\n               LOG.debug(\"Lease renewer daemon for \" + clientsString()\n                   + \" with renew id \" + id + \" is not current\");\n             } else {\n                LOG.debug(\"Lease renewer daemon for \" + clientsString()\n                   + \" with renew id \" + id + \" expired\");\n             }\n           }\n           //no longer the current daemon or expired\n           return;\n         }\n \n         // if no clients are in running state or there is no more clients\n         // registered with this renewer, stop the daemon after the grace\n         // period.\n         if (!clientsRunning() \u0026\u0026 emptyTime \u003d\u003d Long.MAX_VALUE) {\n-          emptyTime \u003d Time.now();\n+          emptyTime \u003d Time.monotonicNow();\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void run(final int id) throws InterruptedException {\n    for(long lastRenewed \u003d Time.monotonicNow(); !Thread.interrupted();\n        Thread.sleep(getSleepPeriod())) {\n      final long elapsed \u003d Time.monotonicNow() - lastRenewed;\n      if (elapsed \u003e\u003d getRenewalTime()) {\n        try {\n          renew();\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Lease renewer daemon for \" + clientsString()\n                + \" with renew id \" + id + \" executed\");\n          }\n          lastRenewed \u003d Time.monotonicNow();\n        } catch (SocketTimeoutException ie) {\n          LOG.warn(\"Failed to renew lease for \" + clientsString() + \" for \"\n              + (elapsed/1000) + \" seconds.  Aborting ...\", ie);\n          synchronized (this) {\n            while (!dfsclients.isEmpty()) {\n              dfsclients.get(0).abort();\n            }\n          }\n          break;\n        } catch (IOException ie) {\n          LOG.warn(\"Failed to renew lease for \" + clientsString() + \" for \"\n              + (elapsed/1000) + \" seconds.  Will retry shortly ...\", ie);\n        }\n      }\n\n      synchronized(this) {\n        if (id !\u003d currentId || isRenewerExpired()) {\n          if (LOG.isDebugEnabled()) {\n            if (id !\u003d currentId) {\n              LOG.debug(\"Lease renewer daemon for \" + clientsString()\n                  + \" with renew id \" + id + \" is not current\");\n            } else {\n               LOG.debug(\"Lease renewer daemon for \" + clientsString()\n                  + \" with renew id \" + id + \" expired\");\n            }\n          }\n          //no longer the current daemon or expired\n          return;\n        }\n\n        // if no clients are in running state or there is no more clients\n        // registered with this renewer, stop the daemon after the grace\n        // period.\n        if (!clientsRunning() \u0026\u0026 emptyTime \u003d\u003d Long.MAX_VALUE) {\n          emptyTime \u003d Time.monotonicNow();\n        }\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/LeaseRenewer.java",
      "extendedDetails": {}
    },
    "c04a7d974aa5ae2589d36f63c4ac45fb42cd1b80": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5028. LeaseRenewer throws ConcurrentModificationException when timeout.  Contributed by zhaoyunjiong\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1509565 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/13 12:08 AM",
      "commitName": "c04a7d974aa5ae2589d36f63c4ac45fb42cd1b80",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "10/05/13 12:43 PM",
      "commitNameOld": "b9a0286223e9cfef36aa5447fe342897c9167281",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 83.48,
      "commitsBetweenForRepo": 510,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,51 @@\n   private void run(final int id) throws InterruptedException {\n     for(long lastRenewed \u003d Time.now(); !Thread.interrupted();\n         Thread.sleep(getSleepPeriod())) {\n       final long elapsed \u003d Time.now() - lastRenewed;\n       if (elapsed \u003e\u003d getRenewalTime()) {\n         try {\n           renew();\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Lease renewer daemon for \" + clientsString()\n                 + \" with renew id \" + id + \" executed\");\n           }\n           lastRenewed \u003d Time.now();\n         } catch (SocketTimeoutException ie) {\n           LOG.warn(\"Failed to renew lease for \" + clientsString() + \" for \"\n               + (elapsed/1000) + \" seconds.  Aborting ...\", ie);\n           synchronized (this) {\n-            for(DFSClient c : dfsclients) {\n-              c.abort();\n+            while (!dfsclients.isEmpty()) {\n+              dfsclients.get(0).abort();\n             }\n           }\n           break;\n         } catch (IOException ie) {\n           LOG.warn(\"Failed to renew lease for \" + clientsString() + \" for \"\n               + (elapsed/1000) + \" seconds.  Will retry shortly ...\", ie);\n         }\n       }\n \n       synchronized(this) {\n         if (id !\u003d currentId || isRenewerExpired()) {\n           if (LOG.isDebugEnabled()) {\n             if (id !\u003d currentId) {\n               LOG.debug(\"Lease renewer daemon for \" + clientsString()\n                   + \" with renew id \" + id + \" is not current\");\n             } else {\n                LOG.debug(\"Lease renewer daemon for \" + clientsString()\n                   + \" with renew id \" + id + \" expired\");\n             }\n           }\n           //no longer the current daemon or expired\n           return;\n         }\n \n         // if no clients are in running state or there is no more clients\n         // registered with this renewer, stop the daemon after the grace\n         // period.\n         if (!clientsRunning() \u0026\u0026 emptyTime \u003d\u003d Long.MAX_VALUE) {\n           emptyTime \u003d Time.now();\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void run(final int id) throws InterruptedException {\n    for(long lastRenewed \u003d Time.now(); !Thread.interrupted();\n        Thread.sleep(getSleepPeriod())) {\n      final long elapsed \u003d Time.now() - lastRenewed;\n      if (elapsed \u003e\u003d getRenewalTime()) {\n        try {\n          renew();\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Lease renewer daemon for \" + clientsString()\n                + \" with renew id \" + id + \" executed\");\n          }\n          lastRenewed \u003d Time.now();\n        } catch (SocketTimeoutException ie) {\n          LOG.warn(\"Failed to renew lease for \" + clientsString() + \" for \"\n              + (elapsed/1000) + \" seconds.  Aborting ...\", ie);\n          synchronized (this) {\n            while (!dfsclients.isEmpty()) {\n              dfsclients.get(0).abort();\n            }\n          }\n          break;\n        } catch (IOException ie) {\n          LOG.warn(\"Failed to renew lease for \" + clientsString() + \" for \"\n              + (elapsed/1000) + \" seconds.  Will retry shortly ...\", ie);\n        }\n      }\n\n      synchronized(this) {\n        if (id !\u003d currentId || isRenewerExpired()) {\n          if (LOG.isDebugEnabled()) {\n            if (id !\u003d currentId) {\n              LOG.debug(\"Lease renewer daemon for \" + clientsString()\n                  + \" with renew id \" + id + \" is not current\");\n            } else {\n               LOG.debug(\"Lease renewer daemon for \" + clientsString()\n                  + \" with renew id \" + id + \" expired\");\n            }\n          }\n          //no longer the current daemon or expired\n          return;\n        }\n\n        // if no clients are in running state or there is no more clients\n        // registered with this renewer, stop the daemon after the grace\n        // period.\n        if (!clientsRunning() \u0026\u0026 emptyTime \u003d\u003d Long.MAX_VALUE) {\n          emptyTime \u003d Time.now();\n        }\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/LeaseRenewer.java",
      "extendedDetails": {}
    },
    "0a6806ce8c946b26eceac7d16b467c54c453df84": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3646. LeaseRenewer can hold reference to inactive DFSClient instances forever (Kihwal Lee via daryn)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1363170 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/07/12 4:21 PM",
      "commitName": "0a6806ce8c946b26eceac7d16b467c54c453df84",
      "commitAuthor": "Daryn Sharp",
      "commitDateOld": "12/07/12 12:01 PM",
      "commitNameOld": "4a5ba3b7bd2360fd9605863630b477d362874e1e",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 6.18,
      "commitsBetweenForRepo": 54,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,51 @@\n   private void run(final int id) throws InterruptedException {\n-    for(long lastRenewed \u003d Time.now();\n-        clientsRunning() \u0026\u0026 !Thread.interrupted();\n+    for(long lastRenewed \u003d Time.now(); !Thread.interrupted();\n         Thread.sleep(getSleepPeriod())) {\n       final long elapsed \u003d Time.now() - lastRenewed;\n       if (elapsed \u003e\u003d getRenewalTime()) {\n         try {\n           renew();\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Lease renewer daemon for \" + clientsString()\n                 + \" with renew id \" + id + \" executed\");\n           }\n           lastRenewed \u003d Time.now();\n         } catch (SocketTimeoutException ie) {\n           LOG.warn(\"Failed to renew lease for \" + clientsString() + \" for \"\n               + (elapsed/1000) + \" seconds.  Aborting ...\", ie);\n           synchronized (this) {\n             for(DFSClient c : dfsclients) {\n               c.abort();\n             }\n           }\n           break;\n         } catch (IOException ie) {\n           LOG.warn(\"Failed to renew lease for \" + clientsString() + \" for \"\n               + (elapsed/1000) + \" seconds.  Will retry shortly ...\", ie);\n         }\n       }\n \n       synchronized(this) {\n         if (id !\u003d currentId || isRenewerExpired()) {\n           if (LOG.isDebugEnabled()) {\n             if (id !\u003d currentId) {\n               LOG.debug(\"Lease renewer daemon for \" + clientsString()\n                   + \" with renew id \" + id + \" is not current\");\n             } else {\n                LOG.debug(\"Lease renewer daemon for \" + clientsString()\n                   + \" with renew id \" + id + \" expired\");\n             }\n           }\n           //no longer the current daemon or expired\n           return;\n         }\n+\n+        // if no clients are in running state or there is no more clients\n+        // registered with this renewer, stop the daemon after the grace\n+        // period.\n+        if (!clientsRunning() \u0026\u0026 emptyTime \u003d\u003d Long.MAX_VALUE) {\n+          emptyTime \u003d Time.now();\n+        }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void run(final int id) throws InterruptedException {\n    for(long lastRenewed \u003d Time.now(); !Thread.interrupted();\n        Thread.sleep(getSleepPeriod())) {\n      final long elapsed \u003d Time.now() - lastRenewed;\n      if (elapsed \u003e\u003d getRenewalTime()) {\n        try {\n          renew();\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Lease renewer daemon for \" + clientsString()\n                + \" with renew id \" + id + \" executed\");\n          }\n          lastRenewed \u003d Time.now();\n        } catch (SocketTimeoutException ie) {\n          LOG.warn(\"Failed to renew lease for \" + clientsString() + \" for \"\n              + (elapsed/1000) + \" seconds.  Aborting ...\", ie);\n          synchronized (this) {\n            for(DFSClient c : dfsclients) {\n              c.abort();\n            }\n          }\n          break;\n        } catch (IOException ie) {\n          LOG.warn(\"Failed to renew lease for \" + clientsString() + \" for \"\n              + (elapsed/1000) + \" seconds.  Will retry shortly ...\", ie);\n        }\n      }\n\n      synchronized(this) {\n        if (id !\u003d currentId || isRenewerExpired()) {\n          if (LOG.isDebugEnabled()) {\n            if (id !\u003d currentId) {\n              LOG.debug(\"Lease renewer daemon for \" + clientsString()\n                  + \" with renew id \" + id + \" is not current\");\n            } else {\n               LOG.debug(\"Lease renewer daemon for \" + clientsString()\n                  + \" with renew id \" + id + \" expired\");\n            }\n          }\n          //no longer the current daemon or expired\n          return;\n        }\n\n        // if no clients are in running state or there is no more clients\n        // registered with this renewer, stop the daemon after the grace\n        // period.\n        if (!clientsRunning() \u0026\u0026 emptyTime \u003d\u003d Long.MAX_VALUE) {\n          emptyTime \u003d Time.now();\n        }\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/LeaseRenewer.java",
      "extendedDetails": {}
    },
    "4a5ba3b7bd2360fd9605863630b477d362874e1e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3641. Move server Util time methods to common and use now instead of System#currentTimeMillis. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1360858 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/07/12 12:01 PM",
      "commitName": "4a5ba3b7bd2360fd9605863630b477d362874e1e",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "05/03/12 6:42 PM",
      "commitNameOld": "0ee71adeb4b2a91d74110c0f0c1df63a1cf36014",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 128.68,
      "commitsBetweenForRepo": 787,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n   private void run(final int id) throws InterruptedException {\n-    for(long lastRenewed \u003d System.currentTimeMillis();\n+    for(long lastRenewed \u003d Time.now();\n         clientsRunning() \u0026\u0026 !Thread.interrupted();\n         Thread.sleep(getSleepPeriod())) {\n-      final long elapsed \u003d System.currentTimeMillis() - lastRenewed;\n+      final long elapsed \u003d Time.now() - lastRenewed;\n       if (elapsed \u003e\u003d getRenewalTime()) {\n         try {\n           renew();\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Lease renewer daemon for \" + clientsString()\n                 + \" with renew id \" + id + \" executed\");\n           }\n-          lastRenewed \u003d System.currentTimeMillis();\n+          lastRenewed \u003d Time.now();\n         } catch (SocketTimeoutException ie) {\n           LOG.warn(\"Failed to renew lease for \" + clientsString() + \" for \"\n               + (elapsed/1000) + \" seconds.  Aborting ...\", ie);\n           synchronized (this) {\n             for(DFSClient c : dfsclients) {\n               c.abort();\n             }\n           }\n           break;\n         } catch (IOException ie) {\n           LOG.warn(\"Failed to renew lease for \" + clientsString() + \" for \"\n               + (elapsed/1000) + \" seconds.  Will retry shortly ...\", ie);\n         }\n       }\n \n       synchronized(this) {\n         if (id !\u003d currentId || isRenewerExpired()) {\n           if (LOG.isDebugEnabled()) {\n             if (id !\u003d currentId) {\n               LOG.debug(\"Lease renewer daemon for \" + clientsString()\n                   + \" with renew id \" + id + \" is not current\");\n             } else {\n                LOG.debug(\"Lease renewer daemon for \" + clientsString()\n                   + \" with renew id \" + id + \" expired\");\n             }\n           }\n           //no longer the current daemon or expired\n           return;\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void run(final int id) throws InterruptedException {\n    for(long lastRenewed \u003d Time.now();\n        clientsRunning() \u0026\u0026 !Thread.interrupted();\n        Thread.sleep(getSleepPeriod())) {\n      final long elapsed \u003d Time.now() - lastRenewed;\n      if (elapsed \u003e\u003d getRenewalTime()) {\n        try {\n          renew();\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Lease renewer daemon for \" + clientsString()\n                + \" with renew id \" + id + \" executed\");\n          }\n          lastRenewed \u003d Time.now();\n        } catch (SocketTimeoutException ie) {\n          LOG.warn(\"Failed to renew lease for \" + clientsString() + \" for \"\n              + (elapsed/1000) + \" seconds.  Aborting ...\", ie);\n          synchronized (this) {\n            for(DFSClient c : dfsclients) {\n              c.abort();\n            }\n          }\n          break;\n        } catch (IOException ie) {\n          LOG.warn(\"Failed to renew lease for \" + clientsString() + \" for \"\n              + (elapsed/1000) + \" seconds.  Will retry shortly ...\", ie);\n        }\n      }\n\n      synchronized(this) {\n        if (id !\u003d currentId || isRenewerExpired()) {\n          if (LOG.isDebugEnabled()) {\n            if (id !\u003d currentId) {\n              LOG.debug(\"Lease renewer daemon for \" + clientsString()\n                  + \" with renew id \" + id + \" is not current\");\n            } else {\n               LOG.debug(\"Lease renewer daemon for \" + clientsString()\n                  + \" with renew id \" + id + \" expired\");\n            }\n          }\n          //no longer the current daemon or expired\n          return;\n        }\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/LeaseRenewer.java",
      "extendedDetails": {}
    },
    "0ee71adeb4b2a91d74110c0f0c1df63a1cf36014": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3032. Change DFSClient.renewLease() so that it only retries up to the lease soft-limit.  Contributed by Kihwal Lee \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1297328 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/03/12 6:42 PM",
      "commitName": "0ee71adeb4b2a91d74110c0f0c1df63a1cf36014",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "19/01/12 11:26 PM",
      "commitNameOld": "520a39ac2daf86c0d67fff1b67f5f8d63e65114c",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 45.8,
      "commitsBetweenForRepo": 404,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n   private void run(final int id) throws InterruptedException {\n     for(long lastRenewed \u003d System.currentTimeMillis();\n         clientsRunning() \u0026\u0026 !Thread.interrupted();\n         Thread.sleep(getSleepPeriod())) {\n-      if (System.currentTimeMillis() - lastRenewed \u003e\u003d getRenewalTime()) {\n+      final long elapsed \u003d System.currentTimeMillis() - lastRenewed;\n+      if (elapsed \u003e\u003d getRenewalTime()) {\n         try {\n           renew();\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Lease renewer daemon for \" + clientsString()\n                 + \" with renew id \" + id + \" executed\");\n           }\n           lastRenewed \u003d System.currentTimeMillis();\n         } catch (SocketTimeoutException ie) {\n           LOG.warn(\"Failed to renew lease for \" + clientsString() + \" for \"\n-              + (getRenewalTime()/1000) + \" seconds.  Aborting ...\", ie);\n+              + (elapsed/1000) + \" seconds.  Aborting ...\", ie);\n           synchronized (this) {\n             for(DFSClient c : dfsclients) {\n               c.abort();\n             }\n           }\n           break;\n         } catch (IOException ie) {\n           LOG.warn(\"Failed to renew lease for \" + clientsString() + \" for \"\n-              + (getRenewalTime()/1000) + \" seconds.  Will retry shortly ...\",\n-              ie);\n+              + (elapsed/1000) + \" seconds.  Will retry shortly ...\", ie);\n         }\n       }\n \n       synchronized(this) {\n         if (id !\u003d currentId || isRenewerExpired()) {\n           if (LOG.isDebugEnabled()) {\n             if (id !\u003d currentId) {\n               LOG.debug(\"Lease renewer daemon for \" + clientsString()\n                   + \" with renew id \" + id + \" is not current\");\n             } else {\n                LOG.debug(\"Lease renewer daemon for \" + clientsString()\n                   + \" with renew id \" + id + \" expired\");\n             }\n           }\n           //no longer the current daemon or expired\n           return;\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void run(final int id) throws InterruptedException {\n    for(long lastRenewed \u003d System.currentTimeMillis();\n        clientsRunning() \u0026\u0026 !Thread.interrupted();\n        Thread.sleep(getSleepPeriod())) {\n      final long elapsed \u003d System.currentTimeMillis() - lastRenewed;\n      if (elapsed \u003e\u003d getRenewalTime()) {\n        try {\n          renew();\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Lease renewer daemon for \" + clientsString()\n                + \" with renew id \" + id + \" executed\");\n          }\n          lastRenewed \u003d System.currentTimeMillis();\n        } catch (SocketTimeoutException ie) {\n          LOG.warn(\"Failed to renew lease for \" + clientsString() + \" for \"\n              + (elapsed/1000) + \" seconds.  Aborting ...\", ie);\n          synchronized (this) {\n            for(DFSClient c : dfsclients) {\n              c.abort();\n            }\n          }\n          break;\n        } catch (IOException ie) {\n          LOG.warn(\"Failed to renew lease for \" + clientsString() + \" for \"\n              + (elapsed/1000) + \" seconds.  Will retry shortly ...\", ie);\n        }\n      }\n\n      synchronized(this) {\n        if (id !\u003d currentId || isRenewerExpired()) {\n          if (LOG.isDebugEnabled()) {\n            if (id !\u003d currentId) {\n              LOG.debug(\"Lease renewer daemon for \" + clientsString()\n                  + \" with renew id \" + id + \" is not current\");\n            } else {\n               LOG.debug(\"Lease renewer daemon for \" + clientsString()\n                  + \" with renew id \" + id + \" expired\");\n            }\n          }\n          //no longer the current daemon or expired\n          return;\n        }\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/LeaseRenewer.java",
      "extendedDetails": {}
    },
    "1d2e706dd1e4b0cab5595ab57f21b38abb01fda9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2803. Add logging to LeaseRenewer for better lease expiration debugging. Contributed by Jimmy Xiang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1233453 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/01/12 8:35 AM",
      "commitName": "1d2e706dd1e4b0cab5595ab57f21b38abb01fda9",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "04/09/11 12:30 PM",
      "commitNameOld": "8ae98a9d1ca4725e28783370517cb3a3ecda7324",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 136.88,
      "commitsBetweenForRepo": 856,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,45 @@\n   private void run(final int id) throws InterruptedException {\n     for(long lastRenewed \u003d System.currentTimeMillis();\n         clientsRunning() \u0026\u0026 !Thread.interrupted();\n         Thread.sleep(getSleepPeriod())) {\n       if (System.currentTimeMillis() - lastRenewed \u003e\u003d getRenewalTime()) {\n         try {\n           renew();\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Lease renewer daemon for \" + clientsString()\n+                + \" with renew id \" + id + \" executed\");\n+          }\n           lastRenewed \u003d System.currentTimeMillis();\n         } catch (SocketTimeoutException ie) {\n           LOG.warn(\"Failed to renew lease for \" + clientsString() + \" for \"\n               + (getRenewalTime()/1000) + \" seconds.  Aborting ...\", ie);\n           synchronized (this) {\n             for(DFSClient c : dfsclients) {\n               c.abort();\n             }\n           }\n           break;\n         } catch (IOException ie) {\n           LOG.warn(\"Failed to renew lease for \" + clientsString() + \" for \"\n               + (getRenewalTime()/1000) + \" seconds.  Will retry shortly ...\",\n               ie);\n         }\n       }\n \n       synchronized(this) {\n         if (id !\u003d currentId || isRenewerExpired()) {\n+          if (LOG.isDebugEnabled()) {\n+            if (id !\u003d currentId) {\n+              LOG.debug(\"Lease renewer daemon for \" + clientsString()\n+                  + \" with renew id \" + id + \" is not current\");\n+            } else {\n+               LOG.debug(\"Lease renewer daemon for \" + clientsString()\n+                  + \" with renew id \" + id + \" expired\");\n+            }\n+          }\n           //no longer the current daemon or expired\n           return;\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void run(final int id) throws InterruptedException {\n    for(long lastRenewed \u003d System.currentTimeMillis();\n        clientsRunning() \u0026\u0026 !Thread.interrupted();\n        Thread.sleep(getSleepPeriod())) {\n      if (System.currentTimeMillis() - lastRenewed \u003e\u003d getRenewalTime()) {\n        try {\n          renew();\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Lease renewer daemon for \" + clientsString()\n                + \" with renew id \" + id + \" executed\");\n          }\n          lastRenewed \u003d System.currentTimeMillis();\n        } catch (SocketTimeoutException ie) {\n          LOG.warn(\"Failed to renew lease for \" + clientsString() + \" for \"\n              + (getRenewalTime()/1000) + \" seconds.  Aborting ...\", ie);\n          synchronized (this) {\n            for(DFSClient c : dfsclients) {\n              c.abort();\n            }\n          }\n          break;\n        } catch (IOException ie) {\n          LOG.warn(\"Failed to renew lease for \" + clientsString() + \" for \"\n              + (getRenewalTime()/1000) + \" seconds.  Will retry shortly ...\",\n              ie);\n        }\n      }\n\n      synchronized(this) {\n        if (id !\u003d currentId || isRenewerExpired()) {\n          if (LOG.isDebugEnabled()) {\n            if (id !\u003d currentId) {\n              LOG.debug(\"Lease renewer daemon for \" + clientsString()\n                  + \" with renew id \" + id + \" is not current\");\n            } else {\n               LOG.debug(\"Lease renewer daemon for \" + clientsString()\n                  + \" with renew id \" + id + \" expired\");\n            }\n          }\n          //no longer the current daemon or expired\n          return;\n        }\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/LeaseRenewer.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void run(final int id) throws InterruptedException {\n    for(long lastRenewed \u003d System.currentTimeMillis();\n        clientsRunning() \u0026\u0026 !Thread.interrupted();\n        Thread.sleep(getSleepPeriod())) {\n      if (System.currentTimeMillis() - lastRenewed \u003e\u003d getRenewalTime()) {\n        try {\n          renew();\n          lastRenewed \u003d System.currentTimeMillis();\n        } catch (SocketTimeoutException ie) {\n          LOG.warn(\"Failed to renew lease for \" + clientsString() + \" for \"\n              + (getRenewalTime()/1000) + \" seconds.  Aborting ...\", ie);\n          synchronized (this) {\n            for(DFSClient c : dfsclients) {\n              c.abort();\n            }\n          }\n          break;\n        } catch (IOException ie) {\n          LOG.warn(\"Failed to renew lease for \" + clientsString() + \" for \"\n              + (getRenewalTime()/1000) + \" seconds.  Will retry shortly ...\",\n              ie);\n        }\n      }\n\n      synchronized(this) {\n        if (id !\u003d currentId || isRenewerExpired()) {\n          //no longer the current daemon or expired\n          return;\n        }\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/LeaseRenewer.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/LeaseRenewer.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/LeaseRenewer.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void run(final int id) throws InterruptedException {\n    for(long lastRenewed \u003d System.currentTimeMillis();\n        clientsRunning() \u0026\u0026 !Thread.interrupted();\n        Thread.sleep(getSleepPeriod())) {\n      if (System.currentTimeMillis() - lastRenewed \u003e\u003d getRenewalTime()) {\n        try {\n          renew();\n          lastRenewed \u003d System.currentTimeMillis();\n        } catch (SocketTimeoutException ie) {\n          LOG.warn(\"Failed to renew lease for \" + clientsString() + \" for \"\n              + (getRenewalTime()/1000) + \" seconds.  Aborting ...\", ie);\n          synchronized (this) {\n            for(DFSClient c : dfsclients) {\n              c.abort();\n            }\n          }\n          break;\n        } catch (IOException ie) {\n          LOG.warn(\"Failed to renew lease for \" + clientsString() + \" for \"\n              + (getRenewalTime()/1000) + \" seconds.  Will retry shortly ...\",\n              ie);\n        }\n      }\n\n      synchronized(this) {\n        if (id !\u003d currentId || isRenewerExpired()) {\n          //no longer the current daemon or expired\n          return;\n        }\n      }\n    }\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/LeaseRenewer.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/LeaseRenewer.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/LeaseRenewer.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,32 @@\n+  private void run(final int id) throws InterruptedException {\n+    for(long lastRenewed \u003d System.currentTimeMillis();\n+        clientsRunning() \u0026\u0026 !Thread.interrupted();\n+        Thread.sleep(getSleepPeriod())) {\n+      if (System.currentTimeMillis() - lastRenewed \u003e\u003d getRenewalTime()) {\n+        try {\n+          renew();\n+          lastRenewed \u003d System.currentTimeMillis();\n+        } catch (SocketTimeoutException ie) {\n+          LOG.warn(\"Failed to renew lease for \" + clientsString() + \" for \"\n+              + (getRenewalTime()/1000) + \" seconds.  Aborting ...\", ie);\n+          synchronized (this) {\n+            for(DFSClient c : dfsclients) {\n+              c.abort();\n+            }\n+          }\n+          break;\n+        } catch (IOException ie) {\n+          LOG.warn(\"Failed to renew lease for \" + clientsString() + \" for \"\n+              + (getRenewalTime()/1000) + \" seconds.  Will retry shortly ...\",\n+              ie);\n+        }\n+      }\n+\n+      synchronized(this) {\n+        if (id !\u003d currentId || isRenewerExpired()) {\n+          //no longer the current daemon or expired\n+          return;\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void run(final int id) throws InterruptedException {\n    for(long lastRenewed \u003d System.currentTimeMillis();\n        clientsRunning() \u0026\u0026 !Thread.interrupted();\n        Thread.sleep(getSleepPeriod())) {\n      if (System.currentTimeMillis() - lastRenewed \u003e\u003d getRenewalTime()) {\n        try {\n          renew();\n          lastRenewed \u003d System.currentTimeMillis();\n        } catch (SocketTimeoutException ie) {\n          LOG.warn(\"Failed to renew lease for \" + clientsString() + \" for \"\n              + (getRenewalTime()/1000) + \" seconds.  Aborting ...\", ie);\n          synchronized (this) {\n            for(DFSClient c : dfsclients) {\n              c.abort();\n            }\n          }\n          break;\n        } catch (IOException ie) {\n          LOG.warn(\"Failed to renew lease for \" + clientsString() + \" for \"\n              + (getRenewalTime()/1000) + \" seconds.  Will retry shortly ...\",\n              ie);\n        }\n      }\n\n      synchronized(this) {\n        if (id !\u003d currentId || isRenewerExpired()) {\n          //no longer the current daemon or expired\n          return;\n        }\n      }\n    }\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/LeaseRenewer.java"
    }
  }
}