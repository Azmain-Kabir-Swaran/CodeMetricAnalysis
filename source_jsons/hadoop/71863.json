{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "KeyAuthorizationKeyProvider.java",
  "functionName": "verifyKeyVersionBelongsToKey",
  "functionId": "verifyKeyVersionBelongsToKey___ekv-EncryptedKeyVersion",
  "sourceFilePath": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KeyAuthorizationKeyProvider.java",
  "functionStartLine": 249,
  "functionEndLine": 262,
  "numCommitsSeen": 10,
  "timeTaken": 1021,
  "changeHistory": [
    "9cdaec6a6f6cb1680ad6e44d7b0c8d70cdcbe3fa",
    "e14e71d5feff961b681d828b00e6f12cb197ebf5"
  ],
  "changeHistoryShort": {
    "9cdaec6a6f6cb1680ad6e44d7b0c8d70cdcbe3fa": "Ybodychange",
    "e14e71d5feff961b681d828b00e6f12cb197ebf5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9cdaec6a6f6cb1680ad6e44d7b0c8d70cdcbe3fa": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11355. When accessing data in HDFS and the key has been deleted, a Null Pointer Exception is shown. Contributed by Arun Suresh.\n",
      "commitDate": "05/12/14 12:01 PM",
      "commitName": "9cdaec6a6f6cb1680ad6e44d7b0c8d70cdcbe3fa",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "01/12/14 9:21 PM",
      "commitNameOld": "9fa29902575ac3774bf3728e7bcde7f3eefb1d4c",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 3.61,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,10 +1,14 @@\n   private void verifyKeyVersionBelongsToKey(EncryptedKeyVersion ekv)\n       throws IOException {\n     String kn \u003d ekv.getEncryptionKeyName();\n     String kvn \u003d ekv.getEncryptionKeyVersionName();\n     KeyVersion kv \u003d provider.getKeyVersion(kvn);\n+    if (kv \u003d\u003d null) {\n+      throw new IllegalArgumentException(String.format(\n+          \"\u0027%s\u0027 not found\", kvn));\n+    }\n     if (!kv.getName().equals(kn)) {\n       throw new IllegalArgumentException(String.format(\n           \"KeyVersion \u0027%s\u0027 does not belong to the key \u0027%s\u0027\", kvn, kn));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void verifyKeyVersionBelongsToKey(EncryptedKeyVersion ekv)\n      throws IOException {\n    String kn \u003d ekv.getEncryptionKeyName();\n    String kvn \u003d ekv.getEncryptionKeyVersionName();\n    KeyVersion kv \u003d provider.getKeyVersion(kvn);\n    if (kv \u003d\u003d null) {\n      throw new IllegalArgumentException(String.format(\n          \"\u0027%s\u0027 not found\", kvn));\n    }\n    if (!kv.getName().equals(kn)) {\n      throw new IllegalArgumentException(String.format(\n          \"KeyVersion \u0027%s\u0027 does not belong to the key \u0027%s\u0027\", kvn, kn));\n    }\n  }",
      "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KeyAuthorizationKeyProvider.java",
      "extendedDetails": {}
    },
    "e14e71d5feff961b681d828b00e6f12cb197ebf5": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-11096. KMS: KeyAuthorizationKeyProvider should verify the keyversion belongs to the keyname on decrypt. (tucu)\n",
      "commitDate": "16/09/14 11:20 PM",
      "commitName": "e14e71d5feff961b681d828b00e6f12cb197ebf5",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,10 @@\n+  private void verifyKeyVersionBelongsToKey(EncryptedKeyVersion ekv)\n+      throws IOException {\n+    String kn \u003d ekv.getEncryptionKeyName();\n+    String kvn \u003d ekv.getEncryptionKeyVersionName();\n+    KeyVersion kv \u003d provider.getKeyVersion(kvn);\n+    if (!kv.getName().equals(kn)) {\n+      throw new IllegalArgumentException(String.format(\n+          \"KeyVersion \u0027%s\u0027 does not belong to the key \u0027%s\u0027\", kvn, kn));\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void verifyKeyVersionBelongsToKey(EncryptedKeyVersion ekv)\n      throws IOException {\n    String kn \u003d ekv.getEncryptionKeyName();\n    String kvn \u003d ekv.getEncryptionKeyVersionName();\n    KeyVersion kv \u003d provider.getKeyVersion(kvn);\n    if (!kv.getName().equals(kn)) {\n      throw new IllegalArgumentException(String.format(\n          \"KeyVersion \u0027%s\u0027 does not belong to the key \u0027%s\u0027\", kvn, kn));\n    }\n  }",
      "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KeyAuthorizationKeyProvider.java"
    }
  }
}