{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PipeMapRed.java",
  "functionName": "run",
  "functionId": "run",
  "sourceFilePath": "hadoop-tools/hadoop-streaming/src/main/java/org/apache/hadoop/streaming/PipeMapRed.java",
  "functionStartLine": 434,
  "functionEndLine": 483,
  "numCommitsSeen": 8,
  "timeTaken": 5672,
  "changeHistory": [
    "3e3963b035911703c61e6d9a2939eb894da5644c",
    "26447229ba2c3d43db978c1b3ce95613669182ee",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "3e3963b035911703c61e6d9a2939eb894da5644c": "Ybodychange",
    "26447229ba2c3d43db978c1b3ce95613669182ee": "Yfilerename",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3e3963b035911703c61e6d9a2939eb894da5644c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15552. Move logging APIs over to slf4j in hadoop-tools - Part2. Contributed by Ian Pickering.\n",
      "commitDate": "15/08/18 8:31 AM",
      "commitName": "3e3963b035911703c61e6d9a2939eb894da5644c",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "03/06/15 6:41 PM",
      "commitNameOld": "cc70df98e74142331043a611a3bd8a53ff6a2242",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 1168.58,
      "commitsBetweenForRepo": 8551,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,50 @@\n     public void run() {\n       Text line \u003d new Text();\n       LineReader lineReader \u003d null;\n       try {\n         lineReader \u003d new LineReader((InputStream)clientErr_, job_);\n         while (lineReader.readLine(line) \u003e 0) {\n           String lineStr \u003d line.toString();\n           if (matchesReporter(lineStr)) {\n             if (matchesCounter(lineStr)) {\n               incrCounter(lineStr);\n             } else if (matchesStatus(lineStr)) {\n               processProvidedStatus_ \u003d true;\n               setStatus(lineStr);\n             } else {\n               LOG.warn(\"Cannot parse reporter line: \" + lineStr);\n             }\n           } else {\n             System.err.println(lineStr);\n           }\n           long now \u003d System.currentTimeMillis(); \n           if (reporter !\u003d null \u0026\u0026 now-lastStderrReport \u003e reporterErrDelay_) {\n             lastStderrReport \u003d now;\n             reporter.progress();\n           }\n           line.clear();\n         }\n         if (lineReader !\u003d null) {\n           lineReader.close();\n         }\n         if (clientErr_ !\u003d null) {\n           clientErr_.close();\n           clientErr_ \u003d null;\n           LOG.info(\"MRErrorThread done\");\n         }\n       } catch (Throwable th) {\n         outerrThreadsThrowable \u003d th;\n-        LOG.warn(th);\n+        LOG.warn(\"{}\", th);\n         try {\n           if (lineReader !\u003d null) {\n             lineReader.close();\n           }\n           if (clientErr_ !\u003d null) {\n             clientErr_.close();\n             clientErr_ \u003d null;\n           }\n         } catch (IOException io) {\n-          LOG.info(io);\n+          LOG.info(\"{}\", io);\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      Text line \u003d new Text();\n      LineReader lineReader \u003d null;\n      try {\n        lineReader \u003d new LineReader((InputStream)clientErr_, job_);\n        while (lineReader.readLine(line) \u003e 0) {\n          String lineStr \u003d line.toString();\n          if (matchesReporter(lineStr)) {\n            if (matchesCounter(lineStr)) {\n              incrCounter(lineStr);\n            } else if (matchesStatus(lineStr)) {\n              processProvidedStatus_ \u003d true;\n              setStatus(lineStr);\n            } else {\n              LOG.warn(\"Cannot parse reporter line: \" + lineStr);\n            }\n          } else {\n            System.err.println(lineStr);\n          }\n          long now \u003d System.currentTimeMillis(); \n          if (reporter !\u003d null \u0026\u0026 now-lastStderrReport \u003e reporterErrDelay_) {\n            lastStderrReport \u003d now;\n            reporter.progress();\n          }\n          line.clear();\n        }\n        if (lineReader !\u003d null) {\n          lineReader.close();\n        }\n        if (clientErr_ !\u003d null) {\n          clientErr_.close();\n          clientErr_ \u003d null;\n          LOG.info(\"MRErrorThread done\");\n        }\n      } catch (Throwable th) {\n        outerrThreadsThrowable \u003d th;\n        LOG.warn(\"{}\", th);\n        try {\n          if (lineReader !\u003d null) {\n            lineReader.close();\n          }\n          if (clientErr_ !\u003d null) {\n            clientErr_.close();\n            clientErr_ \u003d null;\n          }\n        } catch (IOException io) {\n          LOG.info(\"{}\", io);\n        }\n      }\n    }",
      "path": "hadoop-tools/hadoop-streaming/src/main/java/org/apache/hadoop/streaming/PipeMapRed.java",
      "extendedDetails": {}
    },
    "26447229ba2c3d43db978c1b3ce95613669182ee": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7590. Mavenize streaming and MR examples. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1203941 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/11/11 5:24 PM",
      "commitName": "26447229ba2c3d43db978c1b3ce95613669182ee",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "18/11/11 1:04 AM",
      "commitNameOld": "905a127850d5e0cba85c2e075f989fa0f5cf129a",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.68,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void run() {\n      Text line \u003d new Text();\n      LineReader lineReader \u003d null;\n      try {\n        lineReader \u003d new LineReader((InputStream)clientErr_, job_);\n        while (lineReader.readLine(line) \u003e 0) {\n          String lineStr \u003d line.toString();\n          if (matchesReporter(lineStr)) {\n            if (matchesCounter(lineStr)) {\n              incrCounter(lineStr);\n            } else if (matchesStatus(lineStr)) {\n              processProvidedStatus_ \u003d true;\n              setStatus(lineStr);\n            } else {\n              LOG.warn(\"Cannot parse reporter line: \" + lineStr);\n            }\n          } else {\n            System.err.println(lineStr);\n          }\n          long now \u003d System.currentTimeMillis(); \n          if (reporter !\u003d null \u0026\u0026 now-lastStderrReport \u003e reporterErrDelay_) {\n            lastStderrReport \u003d now;\n            reporter.progress();\n          }\n          line.clear();\n        }\n        if (lineReader !\u003d null) {\n          lineReader.close();\n        }\n        if (clientErr_ !\u003d null) {\n          clientErr_.close();\n          clientErr_ \u003d null;\n          LOG.info(\"MRErrorThread done\");\n        }\n      } catch (Throwable th) {\n        outerrThreadsThrowable \u003d th;\n        LOG.warn(th);\n        try {\n          if (lineReader !\u003d null) {\n            lineReader.close();\n          }\n          if (clientErr_ !\u003d null) {\n            clientErr_.close();\n            clientErr_ \u003d null;\n          }\n        } catch (IOException io) {\n          LOG.info(io);\n        }\n      }\n    }",
      "path": "hadoop-tools/hadoop-streaming/src/main/java/org/apache/hadoop/streaming/PipeMapRed.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/src/contrib/streaming/src/java/org/apache/hadoop/streaming/PipeMapRed.java",
        "newPath": "hadoop-tools/hadoop-streaming/src/main/java/org/apache/hadoop/streaming/PipeMapRed.java"
      }
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void run() {\n      Text line \u003d new Text();\n      LineReader lineReader \u003d null;\n      try {\n        lineReader \u003d new LineReader((InputStream)clientErr_, job_);\n        while (lineReader.readLine(line) \u003e 0) {\n          String lineStr \u003d line.toString();\n          if (matchesReporter(lineStr)) {\n            if (matchesCounter(lineStr)) {\n              incrCounter(lineStr);\n            } else if (matchesStatus(lineStr)) {\n              processProvidedStatus_ \u003d true;\n              setStatus(lineStr);\n            } else {\n              LOG.warn(\"Cannot parse reporter line: \" + lineStr);\n            }\n          } else {\n            System.err.println(lineStr);\n          }\n          long now \u003d System.currentTimeMillis(); \n          if (reporter !\u003d null \u0026\u0026 now-lastStderrReport \u003e reporterErrDelay_) {\n            lastStderrReport \u003d now;\n            reporter.progress();\n          }\n          line.clear();\n        }\n        if (lineReader !\u003d null) {\n          lineReader.close();\n        }\n        if (clientErr_ !\u003d null) {\n          clientErr_.close();\n          clientErr_ \u003d null;\n          LOG.info(\"MRErrorThread done\");\n        }\n      } catch (Throwable th) {\n        outerrThreadsThrowable \u003d th;\n        LOG.warn(th);\n        try {\n          if (lineReader !\u003d null) {\n            lineReader.close();\n          }\n          if (clientErr_ !\u003d null) {\n            clientErr_.close();\n            clientErr_ \u003d null;\n          }\n        } catch (IOException io) {\n          LOG.info(io);\n        }\n      }\n    }",
      "path": "hadoop-mapreduce-project/src/contrib/streaming/src/java/org/apache/hadoop/streaming/PipeMapRed.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/src/contrib/streaming/src/java/org/apache/hadoop/streaming/PipeMapRed.java",
        "newPath": "hadoop-mapreduce-project/src/contrib/streaming/src/java/org/apache/hadoop/streaming/PipeMapRed.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void run() {\n      Text line \u003d new Text();\n      LineReader lineReader \u003d null;\n      try {\n        lineReader \u003d new LineReader((InputStream)clientErr_, job_);\n        while (lineReader.readLine(line) \u003e 0) {\n          String lineStr \u003d line.toString();\n          if (matchesReporter(lineStr)) {\n            if (matchesCounter(lineStr)) {\n              incrCounter(lineStr);\n            } else if (matchesStatus(lineStr)) {\n              processProvidedStatus_ \u003d true;\n              setStatus(lineStr);\n            } else {\n              LOG.warn(\"Cannot parse reporter line: \" + lineStr);\n            }\n          } else {\n            System.err.println(lineStr);\n          }\n          long now \u003d System.currentTimeMillis(); \n          if (reporter !\u003d null \u0026\u0026 now-lastStderrReport \u003e reporterErrDelay_) {\n            lastStderrReport \u003d now;\n            reporter.progress();\n          }\n          line.clear();\n        }\n        if (lineReader !\u003d null) {\n          lineReader.close();\n        }\n        if (clientErr_ !\u003d null) {\n          clientErr_.close();\n          clientErr_ \u003d null;\n          LOG.info(\"MRErrorThread done\");\n        }\n      } catch (Throwable th) {\n        outerrThreadsThrowable \u003d th;\n        LOG.warn(th);\n        try {\n          if (lineReader !\u003d null) {\n            lineReader.close();\n          }\n          if (clientErr_ !\u003d null) {\n            clientErr_.close();\n            clientErr_ \u003d null;\n          }\n        } catch (IOException io) {\n          LOG.info(io);\n        }\n      }\n    }",
      "path": "hadoop-mapreduce/src/contrib/streaming/src/java/org/apache/hadoop/streaming/PipeMapRed.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/contrib/streaming/src/java/org/apache/hadoop/streaming/PipeMapRed.java",
        "newPath": "hadoop-mapreduce/src/contrib/streaming/src/java/org/apache/hadoop/streaming/PipeMapRed.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,50 @@\n+    public void run() {\n+      Text line \u003d new Text();\n+      LineReader lineReader \u003d null;\n+      try {\n+        lineReader \u003d new LineReader((InputStream)clientErr_, job_);\n+        while (lineReader.readLine(line) \u003e 0) {\n+          String lineStr \u003d line.toString();\n+          if (matchesReporter(lineStr)) {\n+            if (matchesCounter(lineStr)) {\n+              incrCounter(lineStr);\n+            } else if (matchesStatus(lineStr)) {\n+              processProvidedStatus_ \u003d true;\n+              setStatus(lineStr);\n+            } else {\n+              LOG.warn(\"Cannot parse reporter line: \" + lineStr);\n+            }\n+          } else {\n+            System.err.println(lineStr);\n+          }\n+          long now \u003d System.currentTimeMillis(); \n+          if (reporter !\u003d null \u0026\u0026 now-lastStderrReport \u003e reporterErrDelay_) {\n+            lastStderrReport \u003d now;\n+            reporter.progress();\n+          }\n+          line.clear();\n+        }\n+        if (lineReader !\u003d null) {\n+          lineReader.close();\n+        }\n+        if (clientErr_ !\u003d null) {\n+          clientErr_.close();\n+          clientErr_ \u003d null;\n+          LOG.info(\"MRErrorThread done\");\n+        }\n+      } catch (Throwable th) {\n+        outerrThreadsThrowable \u003d th;\n+        LOG.warn(th);\n+        try {\n+          if (lineReader !\u003d null) {\n+            lineReader.close();\n+          }\n+          if (clientErr_ !\u003d null) {\n+            clientErr_.close();\n+            clientErr_ \u003d null;\n+          }\n+        } catch (IOException io) {\n+          LOG.info(io);\n+        }\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      Text line \u003d new Text();\n      LineReader lineReader \u003d null;\n      try {\n        lineReader \u003d new LineReader((InputStream)clientErr_, job_);\n        while (lineReader.readLine(line) \u003e 0) {\n          String lineStr \u003d line.toString();\n          if (matchesReporter(lineStr)) {\n            if (matchesCounter(lineStr)) {\n              incrCounter(lineStr);\n            } else if (matchesStatus(lineStr)) {\n              processProvidedStatus_ \u003d true;\n              setStatus(lineStr);\n            } else {\n              LOG.warn(\"Cannot parse reporter line: \" + lineStr);\n            }\n          } else {\n            System.err.println(lineStr);\n          }\n          long now \u003d System.currentTimeMillis(); \n          if (reporter !\u003d null \u0026\u0026 now-lastStderrReport \u003e reporterErrDelay_) {\n            lastStderrReport \u003d now;\n            reporter.progress();\n          }\n          line.clear();\n        }\n        if (lineReader !\u003d null) {\n          lineReader.close();\n        }\n        if (clientErr_ !\u003d null) {\n          clientErr_.close();\n          clientErr_ \u003d null;\n          LOG.info(\"MRErrorThread done\");\n        }\n      } catch (Throwable th) {\n        outerrThreadsThrowable \u003d th;\n        LOG.warn(th);\n        try {\n          if (lineReader !\u003d null) {\n            lineReader.close();\n          }\n          if (clientErr_ !\u003d null) {\n            clientErr_.close();\n            clientErr_ \u003d null;\n          }\n        } catch (IOException io) {\n          LOG.info(io);\n        }\n      }\n    }",
      "path": "mapreduce/src/contrib/streaming/src/java/org/apache/hadoop/streaming/PipeMapRed.java"
    }
  }
}