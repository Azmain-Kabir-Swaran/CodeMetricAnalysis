{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HardLink.java",
  "functionName": "getLinkCount",
  "functionId": "getLinkCount___fileName-File",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/HardLink.java",
  "functionStartLine": 208,
  "functionEndLine": 249,
  "numCommitsSeen": 24,
  "timeTaken": 1466,
  "changeHistory": [
    "b34b7db2155d3ff070b8443c4396f7230f7e57c6",
    "fdba5fac263f9bf79fccf566c36bbc42ef67e875",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "527bac7e2265548d8611723109f7f91b629079ed",
    "710d5177685529c95b49eac02b7cc25a084d6b5f",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "b34b7db2155d3ff070b8443c4396f7230f7e57c6": "Ybodychange",
    "fdba5fac263f9bf79fccf566c36bbc42ef67e875": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "527bac7e2265548d8611723109f7f91b629079ed": "Ymultichange(Ymovefromfile,Ybodychange)",
    "710d5177685529c95b49eac02b7cc25a084d6b5f": "Ybodychange",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b34b7db2155d3ff070b8443c4396f7230f7e57c6": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10540. Datanode upgrade in Windows fails with hardlink error. (Contributed by Chris Nauroth and Arpit Agarwal)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1589923 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/04/14 8:08 PM",
      "commitName": "b34b7db2155d3ff070b8443c4396f7230f7e57c6",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "14/08/13 4:12 PM",
      "commitNameOld": "fdba5fac263f9bf79fccf566c36bbc42ef67e875",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 253.16,
      "commitsBetweenForRepo": 1758,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,42 @@\n   public static int getLinkCount(File fileName) throws IOException {\n     if (fileName \u003d\u003d null) {\n       throw new IOException(\n           \"invalid argument to getLinkCount: file name is null\");\n     }\n     if (!fileName.exists()) {\n       throw new FileNotFoundException(fileName + \" not found.\");\n     }\n \n     // construct and execute shell command\n     String[] cmd \u003d getHardLinkCommand.linkCount(fileName);\n     String inpMsg \u003d null;\n     String errMsg \u003d null;\n     int exitValue \u003d -1;\n     BufferedReader in \u003d null;\n-    BufferedReader err \u003d null;\n \n-    Process process \u003d Runtime.getRuntime().exec(cmd);\n+    ShellCommandExecutor shexec \u003d new ShellCommandExecutor(cmd);\n     try {\n-      exitValue \u003d process.waitFor();\n-      in \u003d new BufferedReader(new InputStreamReader(\n-                                  process.getInputStream()));\n+      shexec.execute();\n+      in \u003d new BufferedReader(new StringReader(shexec.getOutput()));\n       inpMsg \u003d in.readLine();\n-      err \u003d new BufferedReader(new InputStreamReader(\n-                                   process.getErrorStream()));\n-      errMsg \u003d err.readLine();\n+      exitValue \u003d shexec.getExitCode();\n       if (inpMsg \u003d\u003d null || exitValue !\u003d 0) {\n         throw createIOException(fileName, inpMsg, errMsg, exitValue, null);\n       }\n       if (Shell.SOLARIS) {\n         String[] result \u003d inpMsg.split(\"\\\\s+\");\n         return Integer.parseInt(result[1]);\n       } else {\n         return Integer.parseInt(inpMsg);\n       }\n+    } catch (ExitCodeException e) {\n+      inpMsg \u003d shexec.getOutput();\n+      errMsg \u003d e.getMessage();\n+      exitValue \u003d e.getExitCode();\n+      throw createIOException(fileName, inpMsg, errMsg, exitValue, e);\n     } catch (NumberFormatException e) {\n       throw createIOException(fileName, inpMsg, errMsg, exitValue, e);\n-    } catch (InterruptedException e) {\n-      throw createIOException(fileName, inpMsg, errMsg, exitValue, e);\n     } finally {\n-      process.destroy();\n-      if (in !\u003d null) in.close();\n-      if (err !\u003d null) err.close();\n+      IOUtils.closeStream(in);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static int getLinkCount(File fileName) throws IOException {\n    if (fileName \u003d\u003d null) {\n      throw new IOException(\n          \"invalid argument to getLinkCount: file name is null\");\n    }\n    if (!fileName.exists()) {\n      throw new FileNotFoundException(fileName + \" not found.\");\n    }\n\n    // construct and execute shell command\n    String[] cmd \u003d getHardLinkCommand.linkCount(fileName);\n    String inpMsg \u003d null;\n    String errMsg \u003d null;\n    int exitValue \u003d -1;\n    BufferedReader in \u003d null;\n\n    ShellCommandExecutor shexec \u003d new ShellCommandExecutor(cmd);\n    try {\n      shexec.execute();\n      in \u003d new BufferedReader(new StringReader(shexec.getOutput()));\n      inpMsg \u003d in.readLine();\n      exitValue \u003d shexec.getExitCode();\n      if (inpMsg \u003d\u003d null || exitValue !\u003d 0) {\n        throw createIOException(fileName, inpMsg, errMsg, exitValue, null);\n      }\n      if (Shell.SOLARIS) {\n        String[] result \u003d inpMsg.split(\"\\\\s+\");\n        return Integer.parseInt(result[1]);\n      } else {\n        return Integer.parseInt(inpMsg);\n      }\n    } catch (ExitCodeException e) {\n      inpMsg \u003d shexec.getOutput();\n      errMsg \u003d e.getMessage();\n      exitValue \u003d e.getExitCode();\n      throw createIOException(fileName, inpMsg, errMsg, exitValue, e);\n    } catch (NumberFormatException e) {\n      throw createIOException(fileName, inpMsg, errMsg, exitValue, e);\n    } finally {\n      IOUtils.closeStream(in);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/HardLink.java",
      "extendedDetails": {}
    },
    "fdba5fac263f9bf79fccf566c36bbc42ef67e875": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9652.  RawLocalFs#getFileLinkStatus does not fill in the link owner and mode.  (Andrew Wang via Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1514088 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/08/13 4:12 PM",
      "commitName": "fdba5fac263f9bf79fccf566c36bbc42ef67e875",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "29/07/13 4:56 PM",
      "commitNameOld": "f593d5729687ec1acc6b6a253303a2b5481dc962",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 15.97,
      "commitsBetweenForRepo": 93,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n   public static int getLinkCount(File fileName) throws IOException {\n     if (fileName \u003d\u003d null) {\n       throw new IOException(\n           \"invalid argument to getLinkCount: file name is null\");\n     }\n     if (!fileName.exists()) {\n       throw new FileNotFoundException(fileName + \" not found.\");\n     }\n \n     // construct and execute shell command\n     String[] cmd \u003d getHardLinkCommand.linkCount(fileName);\n     String inpMsg \u003d null;\n     String errMsg \u003d null;\n     int exitValue \u003d -1;\n     BufferedReader in \u003d null;\n     BufferedReader err \u003d null;\n \n     Process process \u003d Runtime.getRuntime().exec(cmd);\n     try {\n       exitValue \u003d process.waitFor();\n       in \u003d new BufferedReader(new InputStreamReader(\n                                   process.getInputStream()));\n       inpMsg \u003d in.readLine();\n       err \u003d new BufferedReader(new InputStreamReader(\n                                    process.getErrorStream()));\n       errMsg \u003d err.readLine();\n       if (inpMsg \u003d\u003d null || exitValue !\u003d 0) {\n         throw createIOException(fileName, inpMsg, errMsg, exitValue, null);\n       }\n-      if (osType \u003d\u003d OSType.OS_TYPE_SOLARIS) {\n+      if (Shell.SOLARIS) {\n         String[] result \u003d inpMsg.split(\"\\\\s+\");\n         return Integer.parseInt(result[1]);\n       } else {\n         return Integer.parseInt(inpMsg);\n       }\n     } catch (NumberFormatException e) {\n       throw createIOException(fileName, inpMsg, errMsg, exitValue, e);\n     } catch (InterruptedException e) {\n       throw createIOException(fileName, inpMsg, errMsg, exitValue, e);\n     } finally {\n       process.destroy();\n       if (in !\u003d null) in.close();\n       if (err !\u003d null) err.close();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static int getLinkCount(File fileName) throws IOException {\n    if (fileName \u003d\u003d null) {\n      throw new IOException(\n          \"invalid argument to getLinkCount: file name is null\");\n    }\n    if (!fileName.exists()) {\n      throw new FileNotFoundException(fileName + \" not found.\");\n    }\n\n    // construct and execute shell command\n    String[] cmd \u003d getHardLinkCommand.linkCount(fileName);\n    String inpMsg \u003d null;\n    String errMsg \u003d null;\n    int exitValue \u003d -1;\n    BufferedReader in \u003d null;\n    BufferedReader err \u003d null;\n\n    Process process \u003d Runtime.getRuntime().exec(cmd);\n    try {\n      exitValue \u003d process.waitFor();\n      in \u003d new BufferedReader(new InputStreamReader(\n                                  process.getInputStream()));\n      inpMsg \u003d in.readLine();\n      err \u003d new BufferedReader(new InputStreamReader(\n                                   process.getErrorStream()));\n      errMsg \u003d err.readLine();\n      if (inpMsg \u003d\u003d null || exitValue !\u003d 0) {\n        throw createIOException(fileName, inpMsg, errMsg, exitValue, null);\n      }\n      if (Shell.SOLARIS) {\n        String[] result \u003d inpMsg.split(\"\\\\s+\");\n        return Integer.parseInt(result[1]);\n      } else {\n        return Integer.parseInt(inpMsg);\n      }\n    } catch (NumberFormatException e) {\n      throw createIOException(fileName, inpMsg, errMsg, exitValue, e);\n    } catch (InterruptedException e) {\n      throw createIOException(fileName, inpMsg, errMsg, exitValue, e);\n    } finally {\n      process.destroy();\n      if (in !\u003d null) in.close();\n      if (err !\u003d null) err.close();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/HardLink.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static int getLinkCount(File fileName) throws IOException {\n    if (fileName \u003d\u003d null) {\n      throw new IOException(\n          \"invalid argument to getLinkCount: file name is null\");\n    }\n    if (!fileName.exists()) {\n      throw new FileNotFoundException(fileName + \" not found.\");\n    }\n\n    // construct and execute shell command\n    String[] cmd \u003d getHardLinkCommand.linkCount(fileName);\n    String inpMsg \u003d null;\n    String errMsg \u003d null;\n    int exitValue \u003d -1;\n    BufferedReader in \u003d null;\n    BufferedReader err \u003d null;\n\n    Process process \u003d Runtime.getRuntime().exec(cmd);\n    try {\n      exitValue \u003d process.waitFor();\n      in \u003d new BufferedReader(new InputStreamReader(\n                                  process.getInputStream()));\n      inpMsg \u003d in.readLine();\n      err \u003d new BufferedReader(new InputStreamReader(\n                                   process.getErrorStream()));\n      errMsg \u003d err.readLine();\n      if (inpMsg \u003d\u003d null || exitValue !\u003d 0) {\n        throw createIOException(fileName, inpMsg, errMsg, exitValue, null);\n      }\n      if (osType \u003d\u003d OSType.OS_TYPE_SOLARIS) {\n        String[] result \u003d inpMsg.split(\"\\\\s+\");\n        return Integer.parseInt(result[1]);\n      } else {\n        return Integer.parseInt(inpMsg);\n      }\n    } catch (NumberFormatException e) {\n      throw createIOException(fileName, inpMsg, errMsg, exitValue, e);\n    } catch (InterruptedException e) {\n      throw createIOException(fileName, inpMsg, errMsg, exitValue, e);\n    } finally {\n      process.destroy();\n      if (in !\u003d null) in.close();\n      if (err !\u003d null) err.close();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/HardLink.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/HardLink.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/HardLink.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static int getLinkCount(File fileName) throws IOException {\n    if (fileName \u003d\u003d null) {\n      throw new IOException(\n          \"invalid argument to getLinkCount: file name is null\");\n    }\n    if (!fileName.exists()) {\n      throw new FileNotFoundException(fileName + \" not found.\");\n    }\n\n    // construct and execute shell command\n    String[] cmd \u003d getHardLinkCommand.linkCount(fileName);\n    String inpMsg \u003d null;\n    String errMsg \u003d null;\n    int exitValue \u003d -1;\n    BufferedReader in \u003d null;\n    BufferedReader err \u003d null;\n\n    Process process \u003d Runtime.getRuntime().exec(cmd);\n    try {\n      exitValue \u003d process.waitFor();\n      in \u003d new BufferedReader(new InputStreamReader(\n                                  process.getInputStream()));\n      inpMsg \u003d in.readLine();\n      err \u003d new BufferedReader(new InputStreamReader(\n                                   process.getErrorStream()));\n      errMsg \u003d err.readLine();\n      if (inpMsg \u003d\u003d null || exitValue !\u003d 0) {\n        throw createIOException(fileName, inpMsg, errMsg, exitValue, null);\n      }\n      if (osType \u003d\u003d OSType.OS_TYPE_SOLARIS) {\n        String[] result \u003d inpMsg.split(\"\\\\s+\");\n        return Integer.parseInt(result[1]);\n      } else {\n        return Integer.parseInt(inpMsg);\n      }\n    } catch (NumberFormatException e) {\n      throw createIOException(fileName, inpMsg, errMsg, exitValue, e);\n    } catch (InterruptedException e) {\n      throw createIOException(fileName, inpMsg, errMsg, exitValue, e);\n    } finally {\n      process.destroy();\n      if (in !\u003d null) in.close();\n      if (err !\u003d null) err.close();\n    }\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/fs/HardLink.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/fs/HardLink.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/HardLink.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static int getLinkCount(File fileName) throws IOException {\n    if (fileName \u003d\u003d null) {\n      throw new IOException(\n          \"invalid argument to getLinkCount: file name is null\");\n    }\n    if (!fileName.exists()) {\n      throw new FileNotFoundException(fileName + \" not found.\");\n    }\n\n    // construct and execute shell command\n    String[] cmd \u003d getHardLinkCommand.linkCount(fileName);\n    String inpMsg \u003d null;\n    String errMsg \u003d null;\n    int exitValue \u003d -1;\n    BufferedReader in \u003d null;\n    BufferedReader err \u003d null;\n\n    Process process \u003d Runtime.getRuntime().exec(cmd);\n    try {\n      exitValue \u003d process.waitFor();\n      in \u003d new BufferedReader(new InputStreamReader(\n                                  process.getInputStream()));\n      inpMsg \u003d in.readLine();\n      err \u003d new BufferedReader(new InputStreamReader(\n                                   process.getErrorStream()));\n      errMsg \u003d err.readLine();\n      if (inpMsg \u003d\u003d null || exitValue !\u003d 0) {\n        throw createIOException(fileName, inpMsg, errMsg, exitValue, null);\n      }\n      if (osType \u003d\u003d OSType.OS_TYPE_SOLARIS) {\n        String[] result \u003d inpMsg.split(\"\\\\s+\");\n        return Integer.parseInt(result[1]);\n      } else {\n        return Integer.parseInt(inpMsg);\n      }\n    } catch (NumberFormatException e) {\n      throw createIOException(fileName, inpMsg, errMsg, exitValue, e);\n    } catch (InterruptedException e) {\n      throw createIOException(fileName, inpMsg, errMsg, exitValue, e);\n    } finally {\n      process.destroy();\n      if (in !\u003d null) in.close();\n      if (err !\u003d null) err.close();\n    }\n  }",
      "path": "common/src/java/org/apache/hadoop/fs/HardLink.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/fs/HardLink.java",
        "newPath": "common/src/java/org/apache/hadoop/fs/HardLink.java"
      }
    },
    "527bac7e2265548d8611723109f7f91b629079ed": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "HADOOP-7133. Batch the calls in DataStorage to FileUtil.createHardLink().  Contributed by Matt Foley.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1080396 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/03/11 3:33 PM",
      "commitName": "527bac7e2265548d8611723109f7f91b629079ed",
      "commitAuthor": "Jakob Homan",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HADOOP-7133. Batch the calls in DataStorage to FileUtil.createHardLink().  Contributed by Matt Foley.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1080396 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/03/11 3:33 PM",
          "commitName": "527bac7e2265548d8611723109f7f91b629079ed",
          "commitAuthor": "Jakob Homan",
          "commitDateOld": "08/03/11 3:51 PM",
          "commitNameOld": "ad459690e0032bf0387b2e40ff7f21e932048590",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 1.99,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,45 @@\n-    public static int getLinkCount(File fileName) throws IOException {\n-      if (!fileName.exists()) {\n-        throw new FileNotFoundException(fileName + \" not found.\");\n-      }\n+  public static int getLinkCount(File fileName) throws IOException {\n+    if (fileName \u003d\u003d null) {\n+      throw new IOException(\n+          \"invalid argument to getLinkCount: file name is null\");\n+    }\n+    if (!fileName.exists()) {\n+      throw new FileNotFoundException(fileName + \" not found.\");\n+    }\n \n-      int len \u003d getLinkCountCommand.length;\n-      String[] cmd \u003d new String[len + 1];\n-      for (int i \u003d 0; i \u003c len; i++) {\n-        cmd[i] \u003d getLinkCountCommand[i];\n-      }\n-      cmd[len] \u003d fileName.toString();\n-      String inpMsg \u003d null;\n-      String errMsg \u003d null;\n-      int exitValue \u003d -1;\n-      BufferedReader in \u003d null;\n-      BufferedReader err \u003d null;\n+    // construct and execute shell command\n+    String[] cmd \u003d getHardLinkCommand.linkCount(fileName);\n+    String inpMsg \u003d null;\n+    String errMsg \u003d null;\n+    int exitValue \u003d -1;\n+    BufferedReader in \u003d null;\n+    BufferedReader err \u003d null;\n \n-      // execute shell command\n-      Process process \u003d Runtime.getRuntime().exec(cmd);\n-      try {\n-        exitValue \u003d process.waitFor();\n-        in \u003d new BufferedReader(new InputStreamReader(\n-                                    process.getInputStream()));\n-        inpMsg \u003d in.readLine();\n-        err \u003d new BufferedReader(new InputStreamReader(\n-                                     process.getErrorStream()));\n-        errMsg \u003d err.readLine();\n-        if (inpMsg \u003d\u003d null || exitValue !\u003d 0) {\n-          throw createIOException(fileName, inpMsg, errMsg, exitValue, null);\n-        }\n-        if (getOSType() \u003d\u003d OSType.OS_TYPE_SOLARIS) {\n-          String[] result \u003d inpMsg.split(\"\\\\s+\");\n-          return Integer.parseInt(result[1]);\n-        } else {\n-          return Integer.parseInt(inpMsg);\n-        }\n-      } catch (NumberFormatException e) {\n-        throw createIOException(fileName, inpMsg, errMsg, exitValue, e);\n-      } catch (InterruptedException e) {\n-        throw createIOException(fileName, inpMsg, errMsg, exitValue, e);\n-      } finally {\n-        process.destroy();\n-        if (in !\u003d null) in.close();\n-        if (err !\u003d null) err.close();\n+    Process process \u003d Runtime.getRuntime().exec(cmd);\n+    try {\n+      exitValue \u003d process.waitFor();\n+      in \u003d new BufferedReader(new InputStreamReader(\n+                                  process.getInputStream()));\n+      inpMsg \u003d in.readLine();\n+      err \u003d new BufferedReader(new InputStreamReader(\n+                                   process.getErrorStream()));\n+      errMsg \u003d err.readLine();\n+      if (inpMsg \u003d\u003d null || exitValue !\u003d 0) {\n+        throw createIOException(fileName, inpMsg, errMsg, exitValue, null);\n       }\n-    }\n\\ No newline at end of file\n+      if (osType \u003d\u003d OSType.OS_TYPE_SOLARIS) {\n+        String[] result \u003d inpMsg.split(\"\\\\s+\");\n+        return Integer.parseInt(result[1]);\n+      } else {\n+        return Integer.parseInt(inpMsg);\n+      }\n+    } catch (NumberFormatException e) {\n+      throw createIOException(fileName, inpMsg, errMsg, exitValue, e);\n+    } catch (InterruptedException e) {\n+      throw createIOException(fileName, inpMsg, errMsg, exitValue, e);\n+    } finally {\n+      process.destroy();\n+      if (in !\u003d null) in.close();\n+      if (err !\u003d null) err.close();\n+    }\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  public static int getLinkCount(File fileName) throws IOException {\n    if (fileName \u003d\u003d null) {\n      throw new IOException(\n          \"invalid argument to getLinkCount: file name is null\");\n    }\n    if (!fileName.exists()) {\n      throw new FileNotFoundException(fileName + \" not found.\");\n    }\n\n    // construct and execute shell command\n    String[] cmd \u003d getHardLinkCommand.linkCount(fileName);\n    String inpMsg \u003d null;\n    String errMsg \u003d null;\n    int exitValue \u003d -1;\n    BufferedReader in \u003d null;\n    BufferedReader err \u003d null;\n\n    Process process \u003d Runtime.getRuntime().exec(cmd);\n    try {\n      exitValue \u003d process.waitFor();\n      in \u003d new BufferedReader(new InputStreamReader(\n                                  process.getInputStream()));\n      inpMsg \u003d in.readLine();\n      err \u003d new BufferedReader(new InputStreamReader(\n                                   process.getErrorStream()));\n      errMsg \u003d err.readLine();\n      if (inpMsg \u003d\u003d null || exitValue !\u003d 0) {\n        throw createIOException(fileName, inpMsg, errMsg, exitValue, null);\n      }\n      if (osType \u003d\u003d OSType.OS_TYPE_SOLARIS) {\n        String[] result \u003d inpMsg.split(\"\\\\s+\");\n        return Integer.parseInt(result[1]);\n      } else {\n        return Integer.parseInt(inpMsg);\n      }\n    } catch (NumberFormatException e) {\n      throw createIOException(fileName, inpMsg, errMsg, exitValue, e);\n    } catch (InterruptedException e) {\n      throw createIOException(fileName, inpMsg, errMsg, exitValue, e);\n    } finally {\n      process.destroy();\n      if (in !\u003d null) in.close();\n      if (err !\u003d null) err.close();\n    }\n  }",
          "path": "src/java/org/apache/hadoop/fs/HardLink.java",
          "extendedDetails": {
            "oldPath": "src/java/org/apache/hadoop/fs/FileUtil.java",
            "newPath": "src/java/org/apache/hadoop/fs/HardLink.java",
            "oldMethodName": "getLinkCount",
            "newMethodName": "getLinkCount"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-7133. Batch the calls in DataStorage to FileUtil.createHardLink().  Contributed by Matt Foley.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1080396 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/03/11 3:33 PM",
          "commitName": "527bac7e2265548d8611723109f7f91b629079ed",
          "commitAuthor": "Jakob Homan",
          "commitDateOld": "08/03/11 3:51 PM",
          "commitNameOld": "ad459690e0032bf0387b2e40ff7f21e932048590",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 1.99,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,45 @@\n-    public static int getLinkCount(File fileName) throws IOException {\n-      if (!fileName.exists()) {\n-        throw new FileNotFoundException(fileName + \" not found.\");\n-      }\n+  public static int getLinkCount(File fileName) throws IOException {\n+    if (fileName \u003d\u003d null) {\n+      throw new IOException(\n+          \"invalid argument to getLinkCount: file name is null\");\n+    }\n+    if (!fileName.exists()) {\n+      throw new FileNotFoundException(fileName + \" not found.\");\n+    }\n \n-      int len \u003d getLinkCountCommand.length;\n-      String[] cmd \u003d new String[len + 1];\n-      for (int i \u003d 0; i \u003c len; i++) {\n-        cmd[i] \u003d getLinkCountCommand[i];\n-      }\n-      cmd[len] \u003d fileName.toString();\n-      String inpMsg \u003d null;\n-      String errMsg \u003d null;\n-      int exitValue \u003d -1;\n-      BufferedReader in \u003d null;\n-      BufferedReader err \u003d null;\n+    // construct and execute shell command\n+    String[] cmd \u003d getHardLinkCommand.linkCount(fileName);\n+    String inpMsg \u003d null;\n+    String errMsg \u003d null;\n+    int exitValue \u003d -1;\n+    BufferedReader in \u003d null;\n+    BufferedReader err \u003d null;\n \n-      // execute shell command\n-      Process process \u003d Runtime.getRuntime().exec(cmd);\n-      try {\n-        exitValue \u003d process.waitFor();\n-        in \u003d new BufferedReader(new InputStreamReader(\n-                                    process.getInputStream()));\n-        inpMsg \u003d in.readLine();\n-        err \u003d new BufferedReader(new InputStreamReader(\n-                                     process.getErrorStream()));\n-        errMsg \u003d err.readLine();\n-        if (inpMsg \u003d\u003d null || exitValue !\u003d 0) {\n-          throw createIOException(fileName, inpMsg, errMsg, exitValue, null);\n-        }\n-        if (getOSType() \u003d\u003d OSType.OS_TYPE_SOLARIS) {\n-          String[] result \u003d inpMsg.split(\"\\\\s+\");\n-          return Integer.parseInt(result[1]);\n-        } else {\n-          return Integer.parseInt(inpMsg);\n-        }\n-      } catch (NumberFormatException e) {\n-        throw createIOException(fileName, inpMsg, errMsg, exitValue, e);\n-      } catch (InterruptedException e) {\n-        throw createIOException(fileName, inpMsg, errMsg, exitValue, e);\n-      } finally {\n-        process.destroy();\n-        if (in !\u003d null) in.close();\n-        if (err !\u003d null) err.close();\n+    Process process \u003d Runtime.getRuntime().exec(cmd);\n+    try {\n+      exitValue \u003d process.waitFor();\n+      in \u003d new BufferedReader(new InputStreamReader(\n+                                  process.getInputStream()));\n+      inpMsg \u003d in.readLine();\n+      err \u003d new BufferedReader(new InputStreamReader(\n+                                   process.getErrorStream()));\n+      errMsg \u003d err.readLine();\n+      if (inpMsg \u003d\u003d null || exitValue !\u003d 0) {\n+        throw createIOException(fileName, inpMsg, errMsg, exitValue, null);\n       }\n-    }\n\\ No newline at end of file\n+      if (osType \u003d\u003d OSType.OS_TYPE_SOLARIS) {\n+        String[] result \u003d inpMsg.split(\"\\\\s+\");\n+        return Integer.parseInt(result[1]);\n+      } else {\n+        return Integer.parseInt(inpMsg);\n+      }\n+    } catch (NumberFormatException e) {\n+      throw createIOException(fileName, inpMsg, errMsg, exitValue, e);\n+    } catch (InterruptedException e) {\n+      throw createIOException(fileName, inpMsg, errMsg, exitValue, e);\n+    } finally {\n+      process.destroy();\n+      if (in !\u003d null) in.close();\n+      if (err !\u003d null) err.close();\n+    }\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  public static int getLinkCount(File fileName) throws IOException {\n    if (fileName \u003d\u003d null) {\n      throw new IOException(\n          \"invalid argument to getLinkCount: file name is null\");\n    }\n    if (!fileName.exists()) {\n      throw new FileNotFoundException(fileName + \" not found.\");\n    }\n\n    // construct and execute shell command\n    String[] cmd \u003d getHardLinkCommand.linkCount(fileName);\n    String inpMsg \u003d null;\n    String errMsg \u003d null;\n    int exitValue \u003d -1;\n    BufferedReader in \u003d null;\n    BufferedReader err \u003d null;\n\n    Process process \u003d Runtime.getRuntime().exec(cmd);\n    try {\n      exitValue \u003d process.waitFor();\n      in \u003d new BufferedReader(new InputStreamReader(\n                                  process.getInputStream()));\n      inpMsg \u003d in.readLine();\n      err \u003d new BufferedReader(new InputStreamReader(\n                                   process.getErrorStream()));\n      errMsg \u003d err.readLine();\n      if (inpMsg \u003d\u003d null || exitValue !\u003d 0) {\n        throw createIOException(fileName, inpMsg, errMsg, exitValue, null);\n      }\n      if (osType \u003d\u003d OSType.OS_TYPE_SOLARIS) {\n        String[] result \u003d inpMsg.split(\"\\\\s+\");\n        return Integer.parseInt(result[1]);\n      } else {\n        return Integer.parseInt(inpMsg);\n      }\n    } catch (NumberFormatException e) {\n      throw createIOException(fileName, inpMsg, errMsg, exitValue, e);\n    } catch (InterruptedException e) {\n      throw createIOException(fileName, inpMsg, errMsg, exitValue, e);\n    } finally {\n      process.destroy();\n      if (in !\u003d null) in.close();\n      if (err !\u003d null) err.close();\n    }\n  }",
          "path": "src/java/org/apache/hadoop/fs/HardLink.java",
          "extendedDetails": {}
        }
      ]
    },
    "710d5177685529c95b49eac02b7cc25a084d6b5f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6283. Improve the exception messages thrown by FileUtil$HardLink.getLinkCount(..).\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@823263 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/10/09 11:37 AM",
      "commitName": "710d5177685529c95b49eac02b7cc25a084d6b5f",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "18/05/09 9:20 PM",
      "commitNameOld": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthorOld": "Owen O\u0027Malley",
      "daysBetweenCommits": 142.6,
      "commitsBetweenForRepo": 131,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,46 @@\n     public static int getLinkCount(File fileName) throws IOException {\n+      if (!fileName.exists()) {\n+        throw new FileNotFoundException(fileName + \" not found.\");\n+      }\n+\n       int len \u003d getLinkCountCommand.length;\n       String[] cmd \u003d new String[len + 1];\n       for (int i \u003d 0; i \u003c len; i++) {\n         cmd[i] \u003d getLinkCountCommand[i];\n       }\n       cmd[len] \u003d fileName.toString();\n-      String inpMsg \u003d \"\";\n-      String errMsg \u003d \"\";\n+      String inpMsg \u003d null;\n+      String errMsg \u003d null;\n       int exitValue \u003d -1;\n       BufferedReader in \u003d null;\n       BufferedReader err \u003d null;\n \n       // execute shell command\n       Process process \u003d Runtime.getRuntime().exec(cmd);\n       try {\n         exitValue \u003d process.waitFor();\n         in \u003d new BufferedReader(new InputStreamReader(\n                                     process.getInputStream()));\n         inpMsg \u003d in.readLine();\n-        if (inpMsg \u003d\u003d null)  inpMsg \u003d \"\";\n-        \n         err \u003d new BufferedReader(new InputStreamReader(\n                                      process.getErrorStream()));\n         errMsg \u003d err.readLine();\n-        if (errMsg \u003d\u003d null)  errMsg \u003d \"\";\n-        if (exitValue !\u003d 0) {\n-          throw new IOException(inpMsg + errMsg);\n+        if (inpMsg \u003d\u003d null || exitValue !\u003d 0) {\n+          throw createIOException(fileName, inpMsg, errMsg, exitValue, null);\n         }\n         if (getOSType() \u003d\u003d OSType.OS_TYPE_SOLARIS) {\n           String[] result \u003d inpMsg.split(\"\\\\s+\");\n           return Integer.parseInt(result[1]);\n         } else {\n           return Integer.parseInt(inpMsg);\n         }\n       } catch (NumberFormatException e) {\n-        throw new IOException(StringUtils.stringifyException(e) + \n-                              inpMsg + errMsg +\n-                              \" on file:\" + fileName);\n+        throw createIOException(fileName, inpMsg, errMsg, exitValue, e);\n       } catch (InterruptedException e) {\n-        throw new IOException(StringUtils.stringifyException(e) + \n-                              inpMsg + errMsg +\n-                              \" on file:\" + fileName);\n+        throw createIOException(fileName, inpMsg, errMsg, exitValue, e);\n       } finally {\n         process.destroy();\n         if (in !\u003d null) in.close();\n         if (err !\u003d null) err.close();\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public static int getLinkCount(File fileName) throws IOException {\n      if (!fileName.exists()) {\n        throw new FileNotFoundException(fileName + \" not found.\");\n      }\n\n      int len \u003d getLinkCountCommand.length;\n      String[] cmd \u003d new String[len + 1];\n      for (int i \u003d 0; i \u003c len; i++) {\n        cmd[i] \u003d getLinkCountCommand[i];\n      }\n      cmd[len] \u003d fileName.toString();\n      String inpMsg \u003d null;\n      String errMsg \u003d null;\n      int exitValue \u003d -1;\n      BufferedReader in \u003d null;\n      BufferedReader err \u003d null;\n\n      // execute shell command\n      Process process \u003d Runtime.getRuntime().exec(cmd);\n      try {\n        exitValue \u003d process.waitFor();\n        in \u003d new BufferedReader(new InputStreamReader(\n                                    process.getInputStream()));\n        inpMsg \u003d in.readLine();\n        err \u003d new BufferedReader(new InputStreamReader(\n                                     process.getErrorStream()));\n        errMsg \u003d err.readLine();\n        if (inpMsg \u003d\u003d null || exitValue !\u003d 0) {\n          throw createIOException(fileName, inpMsg, errMsg, exitValue, null);\n        }\n        if (getOSType() \u003d\u003d OSType.OS_TYPE_SOLARIS) {\n          String[] result \u003d inpMsg.split(\"\\\\s+\");\n          return Integer.parseInt(result[1]);\n        } else {\n          return Integer.parseInt(inpMsg);\n        }\n      } catch (NumberFormatException e) {\n        throw createIOException(fileName, inpMsg, errMsg, exitValue, e);\n      } catch (InterruptedException e) {\n        throw createIOException(fileName, inpMsg, errMsg, exitValue, e);\n      } finally {\n        process.destroy();\n        if (in !\u003d null) in.close();\n        if (err !\u003d null) err.close();\n      }\n    }",
      "path": "src/java/org/apache/hadoop/fs/FileUtil.java",
      "extendedDetails": {}
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,49 @@\n+    public static int getLinkCount(File fileName) throws IOException {\n+      int len \u003d getLinkCountCommand.length;\n+      String[] cmd \u003d new String[len + 1];\n+      for (int i \u003d 0; i \u003c len; i++) {\n+        cmd[i] \u003d getLinkCountCommand[i];\n+      }\n+      cmd[len] \u003d fileName.toString();\n+      String inpMsg \u003d \"\";\n+      String errMsg \u003d \"\";\n+      int exitValue \u003d -1;\n+      BufferedReader in \u003d null;\n+      BufferedReader err \u003d null;\n+\n+      // execute shell command\n+      Process process \u003d Runtime.getRuntime().exec(cmd);\n+      try {\n+        exitValue \u003d process.waitFor();\n+        in \u003d new BufferedReader(new InputStreamReader(\n+                                    process.getInputStream()));\n+        inpMsg \u003d in.readLine();\n+        if (inpMsg \u003d\u003d null)  inpMsg \u003d \"\";\n+        \n+        err \u003d new BufferedReader(new InputStreamReader(\n+                                     process.getErrorStream()));\n+        errMsg \u003d err.readLine();\n+        if (errMsg \u003d\u003d null)  errMsg \u003d \"\";\n+        if (exitValue !\u003d 0) {\n+          throw new IOException(inpMsg + errMsg);\n+        }\n+        if (getOSType() \u003d\u003d OSType.OS_TYPE_SOLARIS) {\n+          String[] result \u003d inpMsg.split(\"\\\\s+\");\n+          return Integer.parseInt(result[1]);\n+        } else {\n+          return Integer.parseInt(inpMsg);\n+        }\n+      } catch (NumberFormatException e) {\n+        throw new IOException(StringUtils.stringifyException(e) + \n+                              inpMsg + errMsg +\n+                              \" on file:\" + fileName);\n+      } catch (InterruptedException e) {\n+        throw new IOException(StringUtils.stringifyException(e) + \n+                              inpMsg + errMsg +\n+                              \" on file:\" + fileName);\n+      } finally {\n+        process.destroy();\n+        if (in !\u003d null) in.close();\n+        if (err !\u003d null) err.close();\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public static int getLinkCount(File fileName) throws IOException {\n      int len \u003d getLinkCountCommand.length;\n      String[] cmd \u003d new String[len + 1];\n      for (int i \u003d 0; i \u003c len; i++) {\n        cmd[i] \u003d getLinkCountCommand[i];\n      }\n      cmd[len] \u003d fileName.toString();\n      String inpMsg \u003d \"\";\n      String errMsg \u003d \"\";\n      int exitValue \u003d -1;\n      BufferedReader in \u003d null;\n      BufferedReader err \u003d null;\n\n      // execute shell command\n      Process process \u003d Runtime.getRuntime().exec(cmd);\n      try {\n        exitValue \u003d process.waitFor();\n        in \u003d new BufferedReader(new InputStreamReader(\n                                    process.getInputStream()));\n        inpMsg \u003d in.readLine();\n        if (inpMsg \u003d\u003d null)  inpMsg \u003d \"\";\n        \n        err \u003d new BufferedReader(new InputStreamReader(\n                                     process.getErrorStream()));\n        errMsg \u003d err.readLine();\n        if (errMsg \u003d\u003d null)  errMsg \u003d \"\";\n        if (exitValue !\u003d 0) {\n          throw new IOException(inpMsg + errMsg);\n        }\n        if (getOSType() \u003d\u003d OSType.OS_TYPE_SOLARIS) {\n          String[] result \u003d inpMsg.split(\"\\\\s+\");\n          return Integer.parseInt(result[1]);\n        } else {\n          return Integer.parseInt(inpMsg);\n        }\n      } catch (NumberFormatException e) {\n        throw new IOException(StringUtils.stringifyException(e) + \n                              inpMsg + errMsg +\n                              \" on file:\" + fileName);\n      } catch (InterruptedException e) {\n        throw new IOException(StringUtils.stringifyException(e) + \n                              inpMsg + errMsg +\n                              \" on file:\" + fileName);\n      } finally {\n        process.destroy();\n        if (in !\u003d null) in.close();\n        if (err !\u003d null) err.close();\n      }\n    }",
      "path": "src/java/org/apache/hadoop/fs/FileUtil.java"
    }
  }
}