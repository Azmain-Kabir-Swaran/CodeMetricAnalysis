{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ServiceApiUtil.java",
  "functionName": "sortByDependencies",
  "functionId": "sortByDependencies___components-List__Component____sortedComponents-Map__String,Component__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/utils/ServiceApiUtil.java",
  "functionStartLine": 497,
  "functionEndLine": 535,
  "numCommitsSeen": 39,
  "timeTaken": 2768,
  "changeHistory": [
    "a127f7b0fbde3942ca4329d5463bb8fe421daf7b",
    "40ab068eabe50875449d601471619a4e82fff86d",
    "1888318c89776f0bf354c1b13e3ee169e14ff638",
    "e86d828548c17ebadc0e6d22b50151eebd9696d5"
  ],
  "changeHistoryShort": {
    "a127f7b0fbde3942ca4329d5463bb8fe421daf7b": "Ybodychange",
    "40ab068eabe50875449d601471619a4e82fff86d": "Yfilerename",
    "1888318c89776f0bf354c1b13e3ee169e14ff638": "Yfilerename",
    "e86d828548c17ebadc0e6d22b50151eebd9696d5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a127f7b0fbde3942ca4329d5463bb8fe421daf7b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7423. Improve service client loggings. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "a127f7b0fbde3942ca4329d5463bb8fe421daf7b",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "68acd88dcbfe03a0134c60b5398dfaa31ad2b786",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   private static Map\u003cString, Component\u003e sortByDependencies(List\u003cComponent\u003e\n       components, Map\u003cString, Component\u003e sortedComponents) {\n     if (sortedComponents \u003d\u003d null) {\n       sortedComponents \u003d new LinkedHashMap\u003c\u003e();\n     }\n \n     Map\u003cString, Component\u003e componentsToAdd \u003d new LinkedHashMap\u003c\u003e();\n     List\u003cComponent\u003e componentsSkipped \u003d new ArrayList\u003c\u003e();\n     for (Component component : components) {\n       String name \u003d component.getName();\n       if (sortedComponents.containsKey(name)) {\n         continue;\n       }\n       boolean dependenciesAlreadySorted \u003d true;\n-      if (!SliderUtils.isEmpty(component.getDependencies())) {\n+      if (!ServiceUtils.isEmpty(component.getDependencies())) {\n         for (String dependency : component.getDependencies()) {\n           if (!sortedComponents.containsKey(dependency)) {\n             dependenciesAlreadySorted \u003d false;\n             break;\n           }\n         }\n       }\n       if (dependenciesAlreadySorted) {\n         componentsToAdd.put(name, component);\n       } else {\n         componentsSkipped.add(component);\n       }\n     }\n \n     if (componentsToAdd.size() \u003d\u003d 0) {\n       throw new IllegalArgumentException(String.format(RestApiErrorMessages\n           .ERROR_DEPENDENCY_CYCLE, componentsSkipped));\n     }\n     sortedComponents.putAll(componentsToAdd);\n     if (sortedComponents.size() \u003d\u003d components.size()) {\n       return sortedComponents;\n     }\n     return sortByDependencies(components, sortedComponents);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static Map\u003cString, Component\u003e sortByDependencies(List\u003cComponent\u003e\n      components, Map\u003cString, Component\u003e sortedComponents) {\n    if (sortedComponents \u003d\u003d null) {\n      sortedComponents \u003d new LinkedHashMap\u003c\u003e();\n    }\n\n    Map\u003cString, Component\u003e componentsToAdd \u003d new LinkedHashMap\u003c\u003e();\n    List\u003cComponent\u003e componentsSkipped \u003d new ArrayList\u003c\u003e();\n    for (Component component : components) {\n      String name \u003d component.getName();\n      if (sortedComponents.containsKey(name)) {\n        continue;\n      }\n      boolean dependenciesAlreadySorted \u003d true;\n      if (!ServiceUtils.isEmpty(component.getDependencies())) {\n        for (String dependency : component.getDependencies()) {\n          if (!sortedComponents.containsKey(dependency)) {\n            dependenciesAlreadySorted \u003d false;\n            break;\n          }\n        }\n      }\n      if (dependenciesAlreadySorted) {\n        componentsToAdd.put(name, component);\n      } else {\n        componentsSkipped.add(component);\n      }\n    }\n\n    if (componentsToAdd.size() \u003d\u003d 0) {\n      throw new IllegalArgumentException(String.format(RestApiErrorMessages\n          .ERROR_DEPENDENCY_CYCLE, componentsSkipped));\n    }\n    sortedComponents.putAll(componentsToAdd);\n    if (sortedComponents.size() \u003d\u003d components.size()) {\n      return sortedComponents;\n    }\n    return sortByDependencies(components, sortedComponents);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/utils/ServiceApiUtil.java",
      "extendedDetails": {}
    },
    "40ab068eabe50875449d601471619a4e82fff86d": {
      "type": "Yfilerename",
      "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
      "commitAuthorOld": "Gour Saha",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static Map\u003cString, Component\u003e sortByDependencies(List\u003cComponent\u003e\n      components, Map\u003cString, Component\u003e sortedComponents) {\n    if (sortedComponents \u003d\u003d null) {\n      sortedComponents \u003d new LinkedHashMap\u003c\u003e();\n    }\n\n    Map\u003cString, Component\u003e componentsToAdd \u003d new LinkedHashMap\u003c\u003e();\n    List\u003cComponent\u003e componentsSkipped \u003d new ArrayList\u003c\u003e();\n    for (Component component : components) {\n      String name \u003d component.getName();\n      if (sortedComponents.containsKey(name)) {\n        continue;\n      }\n      boolean dependenciesAlreadySorted \u003d true;\n      if (!SliderUtils.isEmpty(component.getDependencies())) {\n        for (String dependency : component.getDependencies()) {\n          if (!sortedComponents.containsKey(dependency)) {\n            dependenciesAlreadySorted \u003d false;\n            break;\n          }\n        }\n      }\n      if (dependenciesAlreadySorted) {\n        componentsToAdd.put(name, component);\n      } else {\n        componentsSkipped.add(component);\n      }\n    }\n\n    if (componentsToAdd.size() \u003d\u003d 0) {\n      throw new IllegalArgumentException(String.format(RestApiErrorMessages\n          .ERROR_DEPENDENCY_CYCLE, componentsSkipped));\n    }\n    sortedComponents.putAll(componentsToAdd);\n    if (sortedComponents.size() \u003d\u003d components.size()) {\n      return sortedComponents;\n    }\n    return sortByDependencies(components, sortedComponents);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/utils/ServiceApiUtil.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/utils/ServiceApiUtil.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/utils/ServiceApiUtil.java"
      }
    },
    "1888318c89776f0bf354c1b13e3ee169e14ff638": {
      "type": "Yfilerename",
      "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "27dcc679596edaaeb18dc42d2a812957a9d34e89",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static Map\u003cString, Component\u003e sortByDependencies(List\u003cComponent\u003e\n      components, Map\u003cString, Component\u003e sortedComponents) {\n    if (sortedComponents \u003d\u003d null) {\n      sortedComponents \u003d new LinkedHashMap\u003c\u003e();\n    }\n\n    Map\u003cString, Component\u003e componentsToAdd \u003d new LinkedHashMap\u003c\u003e();\n    List\u003cComponent\u003e componentsSkipped \u003d new ArrayList\u003c\u003e();\n    for (Component component : components) {\n      String name \u003d component.getName();\n      if (sortedComponents.containsKey(name)) {\n        continue;\n      }\n      boolean dependenciesAlreadySorted \u003d true;\n      if (!SliderUtils.isEmpty(component.getDependencies())) {\n        for (String dependency : component.getDependencies()) {\n          if (!sortedComponents.containsKey(dependency)) {\n            dependenciesAlreadySorted \u003d false;\n            break;\n          }\n        }\n      }\n      if (dependenciesAlreadySorted) {\n        componentsToAdd.put(name, component);\n      } else {\n        componentsSkipped.add(component);\n      }\n    }\n\n    if (componentsToAdd.size() \u003d\u003d 0) {\n      throw new IllegalArgumentException(String.format(RestApiErrorMessages\n          .ERROR_DEPENDENCY_CYCLE, componentsSkipped));\n    }\n    sortedComponents.putAll(componentsToAdd);\n    if (sortedComponents.size() \u003d\u003d components.size()) {\n      return sortedComponents;\n    }\n    return sortByDependencies(components, sortedComponents);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/utils/ServiceApiUtil.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/util/ServiceApiUtil.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/utils/ServiceApiUtil.java"
      }
    },
    "e86d828548c17ebadc0e6d22b50151eebd9696d5": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6716. Native services support for specifying component start order. Contributed by Billie Rinaldi\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "e86d828548c17ebadc0e6d22b50151eebd9696d5",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,39 @@\n+  private static Map\u003cString, Component\u003e sortByDependencies(List\u003cComponent\u003e\n+      components, Map\u003cString, Component\u003e sortedComponents) {\n+    if (sortedComponents \u003d\u003d null) {\n+      sortedComponents \u003d new LinkedHashMap\u003c\u003e();\n+    }\n+\n+    Map\u003cString, Component\u003e componentsToAdd \u003d new LinkedHashMap\u003c\u003e();\n+    List\u003cComponent\u003e componentsSkipped \u003d new ArrayList\u003c\u003e();\n+    for (Component component : components) {\n+      String name \u003d component.getName();\n+      if (sortedComponents.containsKey(name)) {\n+        continue;\n+      }\n+      boolean dependenciesAlreadySorted \u003d true;\n+      if (!SliderUtils.isEmpty(component.getDependencies())) {\n+        for (String dependency : component.getDependencies()) {\n+          if (!sortedComponents.containsKey(dependency)) {\n+            dependenciesAlreadySorted \u003d false;\n+            break;\n+          }\n+        }\n+      }\n+      if (dependenciesAlreadySorted) {\n+        componentsToAdd.put(name, component);\n+      } else {\n+        componentsSkipped.add(component);\n+      }\n+    }\n+\n+    if (componentsToAdd.size() \u003d\u003d 0) {\n+      throw new IllegalArgumentException(String.format(RestApiErrorMessages\n+          .ERROR_DEPENDENCY_CYCLE, componentsSkipped));\n+    }\n+    sortedComponents.putAll(componentsToAdd);\n+    if (sortedComponents.size() \u003d\u003d components.size()) {\n+      return sortedComponents;\n+    }\n+    return sortByDependencies(components, sortedComponents);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static Map\u003cString, Component\u003e sortByDependencies(List\u003cComponent\u003e\n      components, Map\u003cString, Component\u003e sortedComponents) {\n    if (sortedComponents \u003d\u003d null) {\n      sortedComponents \u003d new LinkedHashMap\u003c\u003e();\n    }\n\n    Map\u003cString, Component\u003e componentsToAdd \u003d new LinkedHashMap\u003c\u003e();\n    List\u003cComponent\u003e componentsSkipped \u003d new ArrayList\u003c\u003e();\n    for (Component component : components) {\n      String name \u003d component.getName();\n      if (sortedComponents.containsKey(name)) {\n        continue;\n      }\n      boolean dependenciesAlreadySorted \u003d true;\n      if (!SliderUtils.isEmpty(component.getDependencies())) {\n        for (String dependency : component.getDependencies()) {\n          if (!sortedComponents.containsKey(dependency)) {\n            dependenciesAlreadySorted \u003d false;\n            break;\n          }\n        }\n      }\n      if (dependenciesAlreadySorted) {\n        componentsToAdd.put(name, component);\n      } else {\n        componentsSkipped.add(component);\n      }\n    }\n\n    if (componentsToAdd.size() \u003d\u003d 0) {\n      throw new IllegalArgumentException(String.format(RestApiErrorMessages\n          .ERROR_DEPENDENCY_CYCLE, componentsSkipped));\n    }\n    sortedComponents.putAll(componentsToAdd);\n    if (sortedComponents.size() \u003d\u003d components.size()) {\n      return sortedComponents;\n    }\n    return sortByDependencies(components, sortedComponents);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/util/ServiceApiUtil.java"
    }
  }
}