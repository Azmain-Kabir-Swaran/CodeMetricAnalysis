{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AppSchedulingInfo.java",
  "functionName": "recoverContainer",
  "functionId": "recoverContainer___rmContainer-RMContainer__partition-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
  "functionStartLine": 687,
  "functionEndLine": 711,
  "numCommitsSeen": 141,
  "timeTaken": 6160,
  "changeHistory": [
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "1f53ae79728065417c6a99eb6fcc8d3a080ab4cc",
    "f9139ac8f60184a82a8bb315237bea04bdb98ec8",
    "e9c2aa1bc383cb08784846534415bf17667d6e41",
    "1831be8e737fd423a9f3d590767b944147e85641",
    "b0c51504c494847a5d0e98d212660297ed43ba56",
    "424fd9494f144c035fdef8c533be51e2027ad8d9"
  ],
  "changeHistoryShort": {
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "1f53ae79728065417c6a99eb6fcc8d3a080ab4cc": "Ybodychange",
    "f9139ac8f60184a82a8bb315237bea04bdb98ec8": "Ymultichange(Yparameterchange,Ybodychange)",
    "e9c2aa1bc383cb08784846534415bf17667d6e41": "Ybodychange",
    "1831be8e737fd423a9f3d590767b944147e85641": "Ymultichange(Ymodifierchange,Ybodychange)",
    "b0c51504c494847a5d0e98d212660297ed43ba56": "Ybodychange",
    "424fd9494f144c035fdef8c533be51e2027ad8d9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 2.69,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   public void recoverContainer(RMContainer rmContainer, String partition) {\n     if (rmContainer.getExecutionType() !\u003d ExecutionType.GUARANTEED) {\n       return;\n     }\n+    this.writeLock.lock();\n     try {\n-      this.writeLock.lock();\n       QueueMetrics metrics \u003d queue.getMetrics();\n       if (pending) {\n         // If there was any container to recover, the application was\n         // running from scheduler\u0027s POV.\n         pending \u003d false;\n         metrics.runAppAttempt(applicationId, user);\n       }\n \n       // Container is completed. Skip recovering resources.\n       if (rmContainer.getState().equals(RMContainerState.COMPLETED)) {\n         return;\n       }\n \n       metrics.allocateResources(partition, user, 1,\n           rmContainer.getAllocatedResource(), false);\n     } finally {\n       this.writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void recoverContainer(RMContainer rmContainer, String partition) {\n    if (rmContainer.getExecutionType() !\u003d ExecutionType.GUARANTEED) {\n      return;\n    }\n    this.writeLock.lock();\n    try {\n      QueueMetrics metrics \u003d queue.getMetrics();\n      if (pending) {\n        // If there was any container to recover, the application was\n        // running from scheduler\u0027s POV.\n        pending \u003d false;\n        metrics.runAppAttempt(applicationId, user);\n      }\n\n      // Container is completed. Skip recovering resources.\n      if (rmContainer.getState().equals(RMContainerState.COMPLETED)) {\n        return;\n      }\n\n      metrics.allocateResources(partition, user, 1,\n          rmContainer.getAllocatedResource(), false);\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
      "extendedDetails": {}
    },
    "1f53ae79728065417c6a99eb6fcc8d3a080ab4cc": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6849. NMContainerStatus should have the Container ExecutionType. (Kartheek Muthyala via asuresh)\n",
      "commitDate": "08/09/17 9:24 AM",
      "commitName": "1f53ae79728065417c6a99eb6fcc8d3a080ab4cc",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "02/08/17 12:03 AM",
      "commitNameOld": "f9139ac8f60184a82a8bb315237bea04bdb98ec8",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 37.39,
      "commitsBetweenForRepo": 302,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,25 @@\n   public void recoverContainer(RMContainer rmContainer, String partition) {\n+    if (rmContainer.getExecutionType() !\u003d ExecutionType.GUARANTEED) {\n+      return;\n+    }\n     try {\n       this.writeLock.lock();\n       QueueMetrics metrics \u003d queue.getMetrics();\n       if (pending) {\n         // If there was any container to recover, the application was\n         // running from scheduler\u0027s POV.\n         pending \u003d false;\n         metrics.runAppAttempt(applicationId, user);\n       }\n \n       // Container is completed. Skip recovering resources.\n       if (rmContainer.getState().equals(RMContainerState.COMPLETED)) {\n         return;\n       }\n \n       metrics.allocateResources(partition, user, 1,\n           rmContainer.getAllocatedResource(), false);\n     } finally {\n       this.writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void recoverContainer(RMContainer rmContainer, String partition) {\n    if (rmContainer.getExecutionType() !\u003d ExecutionType.GUARANTEED) {\n      return;\n    }\n    try {\n      this.writeLock.lock();\n      QueueMetrics metrics \u003d queue.getMetrics();\n      if (pending) {\n        // If there was any container to recover, the application was\n        // running from scheduler\u0027s POV.\n        pending \u003d false;\n        metrics.runAppAttempt(applicationId, user);\n      }\n\n      // Container is completed. Skip recovering resources.\n      if (rmContainer.getState().equals(RMContainerState.COMPLETED)) {\n        return;\n      }\n\n      metrics.allocateResources(partition, user, 1,\n          rmContainer.getAllocatedResource(), false);\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
      "extendedDetails": {}
    },
    "f9139ac8f60184a82a8bb315237bea04bdb98ec8": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-6872. [Addendum patch] Ensure apps could run given NodeLabels are disabled post RM switchover/restart. Contributed by Sunil G\n",
      "commitDate": "02/08/17 12:03 AM",
      "commitName": "f9139ac8f60184a82a8bb315237bea04bdb98ec8",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6872. [Addendum patch] Ensure apps could run given NodeLabels are disabled post RM switchover/restart. Contributed by Sunil G\n",
          "commitDate": "02/08/17 12:03 AM",
          "commitName": "f9139ac8f60184a82a8bb315237bea04bdb98ec8",
          "commitAuthor": "Jian He",
          "commitDateOld": "19/06/17 9:01 AM",
          "commitNameOld": "e9c2aa1bc383cb08784846534415bf17667d6e41",
          "commitAuthorOld": "Naganarasimha",
          "daysBetweenCommits": 43.63,
          "commitsBetweenForRepo": 278,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,22 @@\n-  public void recoverContainer(RMContainer rmContainer) {\n+  public void recoverContainer(RMContainer rmContainer, String partition) {\n     try {\n       this.writeLock.lock();\n       QueueMetrics metrics \u003d queue.getMetrics();\n       if (pending) {\n         // If there was any container to recover, the application was\n         // running from scheduler\u0027s POV.\n         pending \u003d false;\n         metrics.runAppAttempt(applicationId, user);\n       }\n \n       // Container is completed. Skip recovering resources.\n       if (rmContainer.getState().equals(RMContainerState.COMPLETED)) {\n         return;\n       }\n \n-      metrics.allocateResources(rmContainer.getNodeLabelExpression(),\n-          user, 1, rmContainer.getAllocatedResource(), false);\n+      metrics.allocateResources(partition, user, 1,\n+          rmContainer.getAllocatedResource(), false);\n     } finally {\n       this.writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void recoverContainer(RMContainer rmContainer, String partition) {\n    try {\n      this.writeLock.lock();\n      QueueMetrics metrics \u003d queue.getMetrics();\n      if (pending) {\n        // If there was any container to recover, the application was\n        // running from scheduler\u0027s POV.\n        pending \u003d false;\n        metrics.runAppAttempt(applicationId, user);\n      }\n\n      // Container is completed. Skip recovering resources.\n      if (rmContainer.getState().equals(RMContainerState.COMPLETED)) {\n        return;\n      }\n\n      metrics.allocateResources(partition, user, 1,\n          rmContainer.getAllocatedResource(), false);\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
          "extendedDetails": {
            "oldValue": "[rmContainer-RMContainer]",
            "newValue": "[rmContainer-RMContainer, partition-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6872. [Addendum patch] Ensure apps could run given NodeLabels are disabled post RM switchover/restart. Contributed by Sunil G\n",
          "commitDate": "02/08/17 12:03 AM",
          "commitName": "f9139ac8f60184a82a8bb315237bea04bdb98ec8",
          "commitAuthor": "Jian He",
          "commitDateOld": "19/06/17 9:01 AM",
          "commitNameOld": "e9c2aa1bc383cb08784846534415bf17667d6e41",
          "commitAuthorOld": "Naganarasimha",
          "daysBetweenCommits": 43.63,
          "commitsBetweenForRepo": 278,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,22 @@\n-  public void recoverContainer(RMContainer rmContainer) {\n+  public void recoverContainer(RMContainer rmContainer, String partition) {\n     try {\n       this.writeLock.lock();\n       QueueMetrics metrics \u003d queue.getMetrics();\n       if (pending) {\n         // If there was any container to recover, the application was\n         // running from scheduler\u0027s POV.\n         pending \u003d false;\n         metrics.runAppAttempt(applicationId, user);\n       }\n \n       // Container is completed. Skip recovering resources.\n       if (rmContainer.getState().equals(RMContainerState.COMPLETED)) {\n         return;\n       }\n \n-      metrics.allocateResources(rmContainer.getNodeLabelExpression(),\n-          user, 1, rmContainer.getAllocatedResource(), false);\n+      metrics.allocateResources(partition, user, 1,\n+          rmContainer.getAllocatedResource(), false);\n     } finally {\n       this.writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void recoverContainer(RMContainer rmContainer, String partition) {\n    try {\n      this.writeLock.lock();\n      QueueMetrics metrics \u003d queue.getMetrics();\n      if (pending) {\n        // If there was any container to recover, the application was\n        // running from scheduler\u0027s POV.\n        pending \u003d false;\n        metrics.runAppAttempt(applicationId, user);\n      }\n\n      // Container is completed. Skip recovering resources.\n      if (rmContainer.getState().equals(RMContainerState.COMPLETED)) {\n        return;\n      }\n\n      metrics.allocateResources(partition, user, 1,\n          rmContainer.getAllocatedResource(), false);\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
          "extendedDetails": {}
        }
      ]
    },
    "e9c2aa1bc383cb08784846534415bf17667d6e41": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6467. CSQueueMetrics needs to update the current metrics for default partition only. Contributed by Manikandan R.\n",
      "commitDate": "19/06/17 9:01 AM",
      "commitName": "e9c2aa1bc383cb08784846534415bf17667d6e41",
      "commitAuthor": "Naganarasimha",
      "commitDateOld": "05/04/17 11:28 AM",
      "commitNameOld": "87e2ef8c985bb72a916477e8783359f2859f7890",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 74.9,
      "commitsBetweenForRepo": 382,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n   public void recoverContainer(RMContainer rmContainer) {\n     try {\n       this.writeLock.lock();\n       QueueMetrics metrics \u003d queue.getMetrics();\n       if (pending) {\n         // If there was any container to recover, the application was\n         // running from scheduler\u0027s POV.\n         pending \u003d false;\n         metrics.runAppAttempt(applicationId, user);\n       }\n \n       // Container is completed. Skip recovering resources.\n       if (rmContainer.getState().equals(RMContainerState.COMPLETED)) {\n         return;\n       }\n \n-      metrics.allocateResources(user, 1, rmContainer.getAllocatedResource(),\n-          false);\n+      metrics.allocateResources(rmContainer.getNodeLabelExpression(),\n+          user, 1, rmContainer.getAllocatedResource(), false);\n     } finally {\n       this.writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void recoverContainer(RMContainer rmContainer) {\n    try {\n      this.writeLock.lock();\n      QueueMetrics metrics \u003d queue.getMetrics();\n      if (pending) {\n        // If there was any container to recover, the application was\n        // running from scheduler\u0027s POV.\n        pending \u003d false;\n        metrics.runAppAttempt(applicationId, user);\n      }\n\n      // Container is completed. Skip recovering resources.\n      if (rmContainer.getState().equals(RMContainerState.COMPLETED)) {\n        return;\n      }\n\n      metrics.allocateResources(rmContainer.getNodeLabelExpression(),\n          user, 1, rmContainer.getAllocatedResource(), false);\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
      "extendedDetails": {}
    },
    "1831be8e737fd423a9f3d590767b944147e85641": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-3142. Improve locks in AppSchedulingInfo. (Varun Saxena via wangda)\n",
      "commitDate": "27/09/16 11:54 AM",
      "commitName": "1831be8e737fd423a9f3d590767b944147e85641",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-3142. Improve locks in AppSchedulingInfo. (Varun Saxena via wangda)\n",
          "commitDate": "27/09/16 11:54 AM",
          "commitName": "1831be8e737fd423a9f3d590767b944147e85641",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "19/09/16 1:31 PM",
          "commitNameOld": "7558dbbb481eab055e794beb3603bbe5671a4b4c",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 7.93,
          "commitsBetweenForRepo": 48,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,22 @@\n-  public synchronized void recoverContainer(RMContainer rmContainer) {\n-    QueueMetrics metrics \u003d queue.getMetrics();\n-    if (pending) {\n-      // If there was any container to recover, the application was\n-      // running from scheduler\u0027s POV.\n-      pending \u003d false;\n-      metrics.runAppAttempt(applicationId, user);\n-    }\n+  public void recoverContainer(RMContainer rmContainer) {\n+    try {\n+      this.writeLock.lock();\n+      QueueMetrics metrics \u003d queue.getMetrics();\n+      if (pending) {\n+        // If there was any container to recover, the application was\n+        // running from scheduler\u0027s POV.\n+        pending \u003d false;\n+        metrics.runAppAttempt(applicationId, user);\n+      }\n \n-    // Container is completed. Skip recovering resources.\n-    if (rmContainer.getState().equals(RMContainerState.COMPLETED)) {\n-      return;\n-    }\n+      // Container is completed. Skip recovering resources.\n+      if (rmContainer.getState().equals(RMContainerState.COMPLETED)) {\n+        return;\n+      }\n \n-    metrics.allocateResources(user, 1, rmContainer.getAllocatedResource(),\n-      false);\n+      metrics.allocateResources(user, 1, rmContainer.getAllocatedResource(),\n+          false);\n+    } finally {\n+      this.writeLock.unlock();\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void recoverContainer(RMContainer rmContainer) {\n    try {\n      this.writeLock.lock();\n      QueueMetrics metrics \u003d queue.getMetrics();\n      if (pending) {\n        // If there was any container to recover, the application was\n        // running from scheduler\u0027s POV.\n        pending \u003d false;\n        metrics.runAppAttempt(applicationId, user);\n      }\n\n      // Container is completed. Skip recovering resources.\n      if (rmContainer.getState().equals(RMContainerState.COMPLETED)) {\n        return;\n      }\n\n      metrics.allocateResources(user, 1, rmContainer.getAllocatedResource(),\n          false);\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3142. Improve locks in AppSchedulingInfo. (Varun Saxena via wangda)\n",
          "commitDate": "27/09/16 11:54 AM",
          "commitName": "1831be8e737fd423a9f3d590767b944147e85641",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "19/09/16 1:31 PM",
          "commitNameOld": "7558dbbb481eab055e794beb3603bbe5671a4b4c",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 7.93,
          "commitsBetweenForRepo": 48,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,22 @@\n-  public synchronized void recoverContainer(RMContainer rmContainer) {\n-    QueueMetrics metrics \u003d queue.getMetrics();\n-    if (pending) {\n-      // If there was any container to recover, the application was\n-      // running from scheduler\u0027s POV.\n-      pending \u003d false;\n-      metrics.runAppAttempt(applicationId, user);\n-    }\n+  public void recoverContainer(RMContainer rmContainer) {\n+    try {\n+      this.writeLock.lock();\n+      QueueMetrics metrics \u003d queue.getMetrics();\n+      if (pending) {\n+        // If there was any container to recover, the application was\n+        // running from scheduler\u0027s POV.\n+        pending \u003d false;\n+        metrics.runAppAttempt(applicationId, user);\n+      }\n \n-    // Container is completed. Skip recovering resources.\n-    if (rmContainer.getState().equals(RMContainerState.COMPLETED)) {\n-      return;\n-    }\n+      // Container is completed. Skip recovering resources.\n+      if (rmContainer.getState().equals(RMContainerState.COMPLETED)) {\n+        return;\n+      }\n \n-    metrics.allocateResources(user, 1, rmContainer.getAllocatedResource(),\n-      false);\n+      metrics.allocateResources(user, 1, rmContainer.getAllocatedResource(),\n+          false);\n+    } finally {\n+      this.writeLock.unlock();\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void recoverContainer(RMContainer rmContainer) {\n    try {\n      this.writeLock.lock();\n      QueueMetrics metrics \u003d queue.getMetrics();\n      if (pending) {\n        // If there was any container to recover, the application was\n        // running from scheduler\u0027s POV.\n        pending \u003d false;\n        metrics.runAppAttempt(applicationId, user);\n      }\n\n      // Container is completed. Skip recovering resources.\n      if (rmContainer.getState().equals(RMContainerState.COMPLETED)) {\n        return;\n      }\n\n      metrics.allocateResources(user, 1, rmContainer.getAllocatedResource(),\n          false);\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
          "extendedDetails": {}
        }
      ]
    },
    "b0c51504c494847a5d0e98d212660297ed43ba56": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2052. Embedded an epoch number in container id to ensure the uniqueness of container id after RM restarts. Contributed by Tsuyoshi OZAWA\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1606557 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/06/14 11:24 AM",
      "commitName": "b0c51504c494847a5d0e98d212660297ed43ba56",
      "commitAuthor": "Jian He",
      "commitDateOld": "08/06/14 8:09 PM",
      "commitNameOld": "424fd9494f144c035fdef8c533be51e2027ad8d9",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 20.64,
      "commitsBetweenForRepo": 150,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,17 @@\n   public synchronized void recoverContainer(RMContainer rmContainer) {\n-    // ContainerIdCounter on recovery will be addressed in YARN-2052\n-    this.containerIdCounter.incrementAndGet();\n-\n     QueueMetrics metrics \u003d queue.getMetrics();\n     if (pending) {\n       // If there was any container to recover, the application was\n       // running from scheduler\u0027s POV.\n       pending \u003d false;\n       metrics.runAppAttempt(applicationId, user);\n     }\n \n     // Container is completed. Skip recovering resources.\n     if (rmContainer.getState().equals(RMContainerState.COMPLETED)) {\n       return;\n     }\n \n     metrics.allocateResources(user, 1, rmContainer.getAllocatedResource(),\n       false);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void recoverContainer(RMContainer rmContainer) {\n    QueueMetrics metrics \u003d queue.getMetrics();\n    if (pending) {\n      // If there was any container to recover, the application was\n      // running from scheduler\u0027s POV.\n      pending \u003d false;\n      metrics.runAppAttempt(applicationId, user);\n    }\n\n    // Container is completed. Skip recovering resources.\n    if (rmContainer.getState().equals(RMContainerState.COMPLETED)) {\n      return;\n    }\n\n    metrics.allocateResources(user, 1, rmContainer.getAllocatedResource(),\n      false);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java",
      "extendedDetails": {}
    },
    "424fd9494f144c035fdef8c533be51e2027ad8d9": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1368. Added core functionality of recovering container state into schedulers after ResourceManager Restart so as to preserve running work in the cluster. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1601303 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/06/14 8:09 PM",
      "commitName": "424fd9494f144c035fdef8c533be51e2027ad8d9",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,20 @@\n+  public synchronized void recoverContainer(RMContainer rmContainer) {\n+    // ContainerIdCounter on recovery will be addressed in YARN-2052\n+    this.containerIdCounter.incrementAndGet();\n+\n+    QueueMetrics metrics \u003d queue.getMetrics();\n+    if (pending) {\n+      // If there was any container to recover, the application was\n+      // running from scheduler\u0027s POV.\n+      pending \u003d false;\n+      metrics.runAppAttempt(applicationId, user);\n+    }\n+\n+    // Container is completed. Skip recovering resources.\n+    if (rmContainer.getState().equals(RMContainerState.COMPLETED)) {\n+      return;\n+    }\n+\n+    metrics.allocateResources(user, 1, rmContainer.getAllocatedResource(),\n+      false);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void recoverContainer(RMContainer rmContainer) {\n    // ContainerIdCounter on recovery will be addressed in YARN-2052\n    this.containerIdCounter.incrementAndGet();\n\n    QueueMetrics metrics \u003d queue.getMetrics();\n    if (pending) {\n      // If there was any container to recover, the application was\n      // running from scheduler\u0027s POV.\n      pending \u003d false;\n      metrics.runAppAttempt(applicationId, user);\n    }\n\n    // Container is completed. Skip recovering resources.\n    if (rmContainer.getState().equals(RMContainerState.COMPLETED)) {\n      return;\n    }\n\n    metrics.allocateResources(user, 1, rmContainer.getAllocatedResource(),\n      false);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AppSchedulingInfo.java"
    }
  }
}