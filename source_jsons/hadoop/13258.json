{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DatanodeManager.java",
  "functionName": "getStaleIntervalFromConf",
  "functionId": "getStaleIntervalFromConf___conf-Configuration__heartbeatExpireInterval-long",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java",
  "functionStartLine": 356,
  "functionEndLine": 391,
  "numCommitsSeen": 172,
  "timeTaken": 4005,
  "changeHistory": [
    "d37dc5d1b8e022a7085118a2e7066623483c293f",
    "2887bbb33cefaac0c548eb2450a1f8e3e60f5ea7"
  ],
  "changeHistoryShort": {
    "d37dc5d1b8e022a7085118a2e7066623483c293f": "Ybodychange",
    "2887bbb33cefaac0c548eb2450a1f8e3e60f5ea7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d37dc5d1b8e022a7085118a2e7066623483c293f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9847. HDFS configuration should accept time units. Contributed by Yiqun Lin\n",
      "commitDate": "06/09/16 10:38 AM",
      "commitName": "d37dc5d1b8e022a7085118a2e7066623483c293f",
      "commitAuthor": "Chris Douglas",
      "commitDateOld": "30/08/16 2:00 PM",
      "commitNameOld": "9dcbdbdb5a34d85910707f81ebc1bb1f81c99978",
      "commitAuthorOld": "Ming Ma",
      "daysBetweenCommits": 6.86,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   private static long getStaleIntervalFromConf(Configuration conf,\n       long heartbeatExpireInterval) {\n     long staleInterval \u003d conf.getLong(\n         DFSConfigKeys.DFS_NAMENODE_STALE_DATANODE_INTERVAL_KEY, \n         DFSConfigKeys.DFS_NAMENODE_STALE_DATANODE_INTERVAL_DEFAULT);\n     Preconditions.checkArgument(staleInterval \u003e 0,\n         DFSConfigKeys.DFS_NAMENODE_STALE_DATANODE_INTERVAL_KEY +\n         \" \u003d \u0027\" + staleInterval + \"\u0027 is invalid. \" +\n         \"It should be a positive non-zero value.\");\n     \n-    final long heartbeatIntervalSeconds \u003d conf.getLong(\n+    final long heartbeatIntervalSeconds \u003d conf.getTimeDuration(\n         DFSConfigKeys.DFS_HEARTBEAT_INTERVAL_KEY,\n-        DFSConfigKeys.DFS_HEARTBEAT_INTERVAL_DEFAULT);\n+        DFSConfigKeys.DFS_HEARTBEAT_INTERVAL_DEFAULT, TimeUnit.SECONDS);\n     // The stale interval value cannot be smaller than \n     // 3 times of heartbeat interval \n     final long minStaleInterval \u003d conf.getInt(\n         DFSConfigKeys.DFS_NAMENODE_STALE_DATANODE_MINIMUM_INTERVAL_KEY,\n         DFSConfigKeys.DFS_NAMENODE_STALE_DATANODE_MINIMUM_INTERVAL_DEFAULT)\n         * heartbeatIntervalSeconds * 1000;\n     if (staleInterval \u003c minStaleInterval) {\n       LOG.warn(\"The given interval for marking stale datanode \u003d \"\n           + staleInterval + \", which is less than \"\n           + DFSConfigKeys.DFS_NAMENODE_STALE_DATANODE_MINIMUM_INTERVAL_DEFAULT\n           + \" heartbeat intervals. This may cause too frequent changes of \" \n           + \"stale states of DataNodes since a heartbeat msg may be missing \" \n           + \"due to temporary short-term failures. Reset stale interval to \" \n           + minStaleInterval + \".\");\n       staleInterval \u003d minStaleInterval;\n     }\n     if (staleInterval \u003e heartbeatExpireInterval) {\n       LOG.warn(\"The given interval for marking stale datanode \u003d \"\n           + staleInterval + \", which is larger than heartbeat expire interval \"\n           + heartbeatExpireInterval + \".\");\n     }\n     return staleInterval;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static long getStaleIntervalFromConf(Configuration conf,\n      long heartbeatExpireInterval) {\n    long staleInterval \u003d conf.getLong(\n        DFSConfigKeys.DFS_NAMENODE_STALE_DATANODE_INTERVAL_KEY, \n        DFSConfigKeys.DFS_NAMENODE_STALE_DATANODE_INTERVAL_DEFAULT);\n    Preconditions.checkArgument(staleInterval \u003e 0,\n        DFSConfigKeys.DFS_NAMENODE_STALE_DATANODE_INTERVAL_KEY +\n        \" \u003d \u0027\" + staleInterval + \"\u0027 is invalid. \" +\n        \"It should be a positive non-zero value.\");\n    \n    final long heartbeatIntervalSeconds \u003d conf.getTimeDuration(\n        DFSConfigKeys.DFS_HEARTBEAT_INTERVAL_KEY,\n        DFSConfigKeys.DFS_HEARTBEAT_INTERVAL_DEFAULT, TimeUnit.SECONDS);\n    // The stale interval value cannot be smaller than \n    // 3 times of heartbeat interval \n    final long minStaleInterval \u003d conf.getInt(\n        DFSConfigKeys.DFS_NAMENODE_STALE_DATANODE_MINIMUM_INTERVAL_KEY,\n        DFSConfigKeys.DFS_NAMENODE_STALE_DATANODE_MINIMUM_INTERVAL_DEFAULT)\n        * heartbeatIntervalSeconds * 1000;\n    if (staleInterval \u003c minStaleInterval) {\n      LOG.warn(\"The given interval for marking stale datanode \u003d \"\n          + staleInterval + \", which is less than \"\n          + DFSConfigKeys.DFS_NAMENODE_STALE_DATANODE_MINIMUM_INTERVAL_DEFAULT\n          + \" heartbeat intervals. This may cause too frequent changes of \" \n          + \"stale states of DataNodes since a heartbeat msg may be missing \" \n          + \"due to temporary short-term failures. Reset stale interval to \" \n          + minStaleInterval + \".\");\n      staleInterval \u003d minStaleInterval;\n    }\n    if (staleInterval \u003e heartbeatExpireInterval) {\n      LOG.warn(\"The given interval for marking stale datanode \u003d \"\n          + staleInterval + \", which is larger than heartbeat expire interval \"\n          + heartbeatExpireInterval + \".\");\n    }\n    return staleInterval;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java",
      "extendedDetails": {}
    },
    "2887bbb33cefaac0c548eb2450a1f8e3e60f5ea7": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-3912. Detect and avoid stale datanodes for writes. Contributed by Jing Zhao\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1397211 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/10/12 11:08 AM",
      "commitName": "2887bbb33cefaac0c548eb2450a1f8e3e60f5ea7",
      "commitAuthor": "Suresh Srinivas",
      "diff": "@@ -0,0 +1,36 @@\n+  private static long getStaleIntervalFromConf(Configuration conf,\n+      long heartbeatExpireInterval) {\n+    long staleInterval \u003d conf.getLong(\n+        DFSConfigKeys.DFS_NAMENODE_STALE_DATANODE_INTERVAL_KEY, \n+        DFSConfigKeys.DFS_NAMENODE_STALE_DATANODE_INTERVAL_DEFAULT);\n+    Preconditions.checkArgument(staleInterval \u003e 0,\n+        DFSConfigKeys.DFS_NAMENODE_STALE_DATANODE_INTERVAL_KEY +\n+        \" \u003d \u0027\" + staleInterval + \"\u0027 is invalid. \" +\n+        \"It should be a positive non-zero value.\");\n+    \n+    final long heartbeatIntervalSeconds \u003d conf.getLong(\n+        DFSConfigKeys.DFS_HEARTBEAT_INTERVAL_KEY,\n+        DFSConfigKeys.DFS_HEARTBEAT_INTERVAL_DEFAULT);\n+    // The stale interval value cannot be smaller than \n+    // 3 times of heartbeat interval \n+    final long minStaleInterval \u003d conf.getInt(\n+        DFSConfigKeys.DFS_NAMENODE_STALE_DATANODE_MINIMUM_INTERVAL_KEY,\n+        DFSConfigKeys.DFS_NAMENODE_STALE_DATANODE_MINIMUM_INTERVAL_DEFAULT)\n+        * heartbeatIntervalSeconds * 1000;\n+    if (staleInterval \u003c minStaleInterval) {\n+      LOG.warn(\"The given interval for marking stale datanode \u003d \"\n+          + staleInterval + \", which is less than \"\n+          + DFSConfigKeys.DFS_NAMENODE_STALE_DATANODE_MINIMUM_INTERVAL_DEFAULT\n+          + \" heartbeat intervals. This may cause too frequent changes of \" \n+          + \"stale states of DataNodes since a heartbeat msg may be missing \" \n+          + \"due to temporary short-term failures. Reset stale interval to \" \n+          + minStaleInterval + \".\");\n+      staleInterval \u003d minStaleInterval;\n+    }\n+    if (staleInterval \u003e heartbeatExpireInterval) {\n+      LOG.warn(\"The given interval for marking stale datanode \u003d \"\n+          + staleInterval + \", which is larger than heartbeat expire interval \"\n+          + heartbeatExpireInterval + \".\");\n+    }\n+    return staleInterval;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static long getStaleIntervalFromConf(Configuration conf,\n      long heartbeatExpireInterval) {\n    long staleInterval \u003d conf.getLong(\n        DFSConfigKeys.DFS_NAMENODE_STALE_DATANODE_INTERVAL_KEY, \n        DFSConfigKeys.DFS_NAMENODE_STALE_DATANODE_INTERVAL_DEFAULT);\n    Preconditions.checkArgument(staleInterval \u003e 0,\n        DFSConfigKeys.DFS_NAMENODE_STALE_DATANODE_INTERVAL_KEY +\n        \" \u003d \u0027\" + staleInterval + \"\u0027 is invalid. \" +\n        \"It should be a positive non-zero value.\");\n    \n    final long heartbeatIntervalSeconds \u003d conf.getLong(\n        DFSConfigKeys.DFS_HEARTBEAT_INTERVAL_KEY,\n        DFSConfigKeys.DFS_HEARTBEAT_INTERVAL_DEFAULT);\n    // The stale interval value cannot be smaller than \n    // 3 times of heartbeat interval \n    final long minStaleInterval \u003d conf.getInt(\n        DFSConfigKeys.DFS_NAMENODE_STALE_DATANODE_MINIMUM_INTERVAL_KEY,\n        DFSConfigKeys.DFS_NAMENODE_STALE_DATANODE_MINIMUM_INTERVAL_DEFAULT)\n        * heartbeatIntervalSeconds * 1000;\n    if (staleInterval \u003c minStaleInterval) {\n      LOG.warn(\"The given interval for marking stale datanode \u003d \"\n          + staleInterval + \", which is less than \"\n          + DFSConfigKeys.DFS_NAMENODE_STALE_DATANODE_MINIMUM_INTERVAL_DEFAULT\n          + \" heartbeat intervals. This may cause too frequent changes of \" \n          + \"stale states of DataNodes since a heartbeat msg may be missing \" \n          + \"due to temporary short-term failures. Reset stale interval to \" \n          + minStaleInterval + \".\");\n      staleInterval \u003d minStaleInterval;\n    }\n    if (staleInterval \u003e heartbeatExpireInterval) {\n      LOG.warn(\"The given interval for marking stale datanode \u003d \"\n          + staleInterval + \", which is larger than heartbeat expire interval \"\n          + heartbeatExpireInterval + \".\");\n    }\n    return staleInterval;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java"
    }
  }
}