{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BlockPoolSlice.java",
  "functionName": "recoverTempUnlinkedBlock",
  "functionId": "recoverTempUnlinkedBlock___unlinkedTmp-File",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/BlockPoolSlice.java",
  "functionStartLine": 503,
  "functionEndLine": 516,
  "numCommitsSeen": 92,
  "timeTaken": 7839,
  "changeHistory": [
    "6ba9587d370fbf39c129c08c00ebbb894ccc1389",
    "1ba3f8971433cdbc3e43fd3605065d811dab5b16",
    "bc13dfb1426944ce45293cb8f444239a7406762c",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "6ba9587d370fbf39c129c08c00ebbb894ccc1389": "Ybodychange",
    "1ba3f8971433cdbc3e43fd3605065d811dab5b16": "Ymultichange(Ymovefromfile,Yreturntypechange,Ymodifierchange,Ybodychange,Yparameterchange)",
    "bc13dfb1426944ce45293cb8f444239a7406762c": "Ymultichange(Ymovefromfile,Ybodychange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6ba9587d370fbf39c129c08c00ebbb894ccc1389": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10958. Add instrumentation hooks around Datanode disk IO.\n",
      "commitDate": "14/12/16 11:18 AM",
      "commitName": "6ba9587d370fbf39c129c08c00ebbb894ccc1389",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "06/12/16 11:05 AM",
      "commitNameOld": "df983b524ab68ea0c70cee9033bfff2d28052cbf",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 8.01,
      "commitsBetweenForRepo": 51,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,14 @@\n   File recoverTempUnlinkedBlock(File unlinkedTmp) throws IOException {\n     File blockFile \u003d FsDatasetUtil.getOrigFile(unlinkedTmp);\n     if (blockFile.exists()) {\n       // If the original block file still exists, then no recovery is needed.\n-      if (!unlinkedTmp.delete()) {\n+      if (!fileIoProvider.delete(volume, unlinkedTmp)) {\n         throw new IOException(\"Unable to cleanup unlinked tmp file \" +\n             unlinkedTmp);\n       }\n       return null;\n     } else {\n-      if (!unlinkedTmp.renameTo(blockFile)) {\n-        throw new IOException(\"Unable to rename unlinked tmp file \" +\n-            unlinkedTmp);\n-      }\n+      fileIoProvider.rename(volume, unlinkedTmp, blockFile);\n       return blockFile;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  File recoverTempUnlinkedBlock(File unlinkedTmp) throws IOException {\n    File blockFile \u003d FsDatasetUtil.getOrigFile(unlinkedTmp);\n    if (blockFile.exists()) {\n      // If the original block file still exists, then no recovery is needed.\n      if (!fileIoProvider.delete(volume, unlinkedTmp)) {\n        throw new IOException(\"Unable to cleanup unlinked tmp file \" +\n            unlinkedTmp);\n      }\n      return null;\n    } else {\n      fileIoProvider.rename(volume, unlinkedTmp, blockFile);\n      return blockFile;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/BlockPoolSlice.java",
      "extendedDetails": {}
    },
    "1ba3f8971433cdbc3e43fd3605065d811dab5b16": {
      "type": "Ymultichange(Ymovefromfile,Yreturntypechange,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "HDFS-6482. Use block ID-based block layout on datanodes (James Thomas via Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615223 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/08/14 1:41 PM",
      "commitName": "1ba3f8971433cdbc3e43fd3605065d811dab5b16",
      "commitAuthor": "Colin McCabe",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-6482. Use block ID-based block layout on datanodes (James Thomas via Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615223 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/08/14 1:41 PM",
          "commitName": "1ba3f8971433cdbc3e43fd3605065d811dab5b16",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "01/08/14 11:56 AM",
          "commitNameOld": "07860b1c9ee3e1d77d39a52d41c3243fdcc10c45",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,17 @@\n-  private void recoverTempUnlinkedBlock() throws IOException {\n-    File files[] \u003d FileUtil.listFiles(dir);\n-    for (File file : files) {\n-      if (!FsDatasetUtil.isUnlinkTmpFile(file)) {\n-        continue;\n+  File recoverTempUnlinkedBlock(File unlinkedTmp) throws IOException {\n+    File blockFile \u003d FsDatasetUtil.getOrigFile(unlinkedTmp);\n+    if (blockFile.exists()) {\n+      // If the original block file still exists, then no recovery is needed.\n+      if (!unlinkedTmp.delete()) {\n+        throw new IOException(\"Unable to cleanup unlinked tmp file \" +\n+            unlinkedTmp);\n       }\n-      File blockFile \u003d FsDatasetUtil.getOrigFile(file);\n-      if (blockFile.exists()) {\n-        // If the original block file still exists, then no recovery  is needed.\n-        if (!file.delete()) {\n-          throw new IOException(\"Unable to cleanup unlinked tmp file \" + file);\n-        }\n-      } else {\n-        if (!file.renameTo(blockFile)) {\n-          throw new IOException(\"Unable to cleanup detached file \" + file);\n-        }\n+      return null;\n+    } else {\n+      if (!unlinkedTmp.renameTo(blockFile)) {\n+        throw new IOException(\"Unable to rename unlinked tmp file \" +\n+            unlinkedTmp);\n       }\n+      return blockFile;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  File recoverTempUnlinkedBlock(File unlinkedTmp) throws IOException {\n    File blockFile \u003d FsDatasetUtil.getOrigFile(unlinkedTmp);\n    if (blockFile.exists()) {\n      // If the original block file still exists, then no recovery is needed.\n      if (!unlinkedTmp.delete()) {\n        throw new IOException(\"Unable to cleanup unlinked tmp file \" +\n            unlinkedTmp);\n      }\n      return null;\n    } else {\n      if (!unlinkedTmp.renameTo(blockFile)) {\n        throw new IOException(\"Unable to rename unlinked tmp file \" +\n            unlinkedTmp);\n      }\n      return blockFile;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/BlockPoolSlice.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/LDir.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/BlockPoolSlice.java",
            "oldMethodName": "recoverTempUnlinkedBlock",
            "newMethodName": "recoverTempUnlinkedBlock"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-6482. Use block ID-based block layout on datanodes (James Thomas via Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615223 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/08/14 1:41 PM",
          "commitName": "1ba3f8971433cdbc3e43fd3605065d811dab5b16",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "01/08/14 11:56 AM",
          "commitNameOld": "07860b1c9ee3e1d77d39a52d41c3243fdcc10c45",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,17 @@\n-  private void recoverTempUnlinkedBlock() throws IOException {\n-    File files[] \u003d FileUtil.listFiles(dir);\n-    for (File file : files) {\n-      if (!FsDatasetUtil.isUnlinkTmpFile(file)) {\n-        continue;\n+  File recoverTempUnlinkedBlock(File unlinkedTmp) throws IOException {\n+    File blockFile \u003d FsDatasetUtil.getOrigFile(unlinkedTmp);\n+    if (blockFile.exists()) {\n+      // If the original block file still exists, then no recovery is needed.\n+      if (!unlinkedTmp.delete()) {\n+        throw new IOException(\"Unable to cleanup unlinked tmp file \" +\n+            unlinkedTmp);\n       }\n-      File blockFile \u003d FsDatasetUtil.getOrigFile(file);\n-      if (blockFile.exists()) {\n-        // If the original block file still exists, then no recovery  is needed.\n-        if (!file.delete()) {\n-          throw new IOException(\"Unable to cleanup unlinked tmp file \" + file);\n-        }\n-      } else {\n-        if (!file.renameTo(blockFile)) {\n-          throw new IOException(\"Unable to cleanup detached file \" + file);\n-        }\n+      return null;\n+    } else {\n+      if (!unlinkedTmp.renameTo(blockFile)) {\n+        throw new IOException(\"Unable to rename unlinked tmp file \" +\n+            unlinkedTmp);\n       }\n+      return blockFile;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  File recoverTempUnlinkedBlock(File unlinkedTmp) throws IOException {\n    File blockFile \u003d FsDatasetUtil.getOrigFile(unlinkedTmp);\n    if (blockFile.exists()) {\n      // If the original block file still exists, then no recovery is needed.\n      if (!unlinkedTmp.delete()) {\n        throw new IOException(\"Unable to cleanup unlinked tmp file \" +\n            unlinkedTmp);\n      }\n      return null;\n    } else {\n      if (!unlinkedTmp.renameTo(blockFile)) {\n        throw new IOException(\"Unable to rename unlinked tmp file \" +\n            unlinkedTmp);\n      }\n      return blockFile;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/BlockPoolSlice.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "File"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-6482. Use block ID-based block layout on datanodes (James Thomas via Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615223 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/08/14 1:41 PM",
          "commitName": "1ba3f8971433cdbc3e43fd3605065d811dab5b16",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "01/08/14 11:56 AM",
          "commitNameOld": "07860b1c9ee3e1d77d39a52d41c3243fdcc10c45",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,17 @@\n-  private void recoverTempUnlinkedBlock() throws IOException {\n-    File files[] \u003d FileUtil.listFiles(dir);\n-    for (File file : files) {\n-      if (!FsDatasetUtil.isUnlinkTmpFile(file)) {\n-        continue;\n+  File recoverTempUnlinkedBlock(File unlinkedTmp) throws IOException {\n+    File blockFile \u003d FsDatasetUtil.getOrigFile(unlinkedTmp);\n+    if (blockFile.exists()) {\n+      // If the original block file still exists, then no recovery is needed.\n+      if (!unlinkedTmp.delete()) {\n+        throw new IOException(\"Unable to cleanup unlinked tmp file \" +\n+            unlinkedTmp);\n       }\n-      File blockFile \u003d FsDatasetUtil.getOrigFile(file);\n-      if (blockFile.exists()) {\n-        // If the original block file still exists, then no recovery  is needed.\n-        if (!file.delete()) {\n-          throw new IOException(\"Unable to cleanup unlinked tmp file \" + file);\n-        }\n-      } else {\n-        if (!file.renameTo(blockFile)) {\n-          throw new IOException(\"Unable to cleanup detached file \" + file);\n-        }\n+      return null;\n+    } else {\n+      if (!unlinkedTmp.renameTo(blockFile)) {\n+        throw new IOException(\"Unable to rename unlinked tmp file \" +\n+            unlinkedTmp);\n       }\n+      return blockFile;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  File recoverTempUnlinkedBlock(File unlinkedTmp) throws IOException {\n    File blockFile \u003d FsDatasetUtil.getOrigFile(unlinkedTmp);\n    if (blockFile.exists()) {\n      // If the original block file still exists, then no recovery is needed.\n      if (!unlinkedTmp.delete()) {\n        throw new IOException(\"Unable to cleanup unlinked tmp file \" +\n            unlinkedTmp);\n      }\n      return null;\n    } else {\n      if (!unlinkedTmp.renameTo(blockFile)) {\n        throw new IOException(\"Unable to rename unlinked tmp file \" +\n            unlinkedTmp);\n      }\n      return blockFile;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/BlockPoolSlice.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6482. Use block ID-based block layout on datanodes (James Thomas via Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615223 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/08/14 1:41 PM",
          "commitName": "1ba3f8971433cdbc3e43fd3605065d811dab5b16",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "01/08/14 11:56 AM",
          "commitNameOld": "07860b1c9ee3e1d77d39a52d41c3243fdcc10c45",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,17 @@\n-  private void recoverTempUnlinkedBlock() throws IOException {\n-    File files[] \u003d FileUtil.listFiles(dir);\n-    for (File file : files) {\n-      if (!FsDatasetUtil.isUnlinkTmpFile(file)) {\n-        continue;\n+  File recoverTempUnlinkedBlock(File unlinkedTmp) throws IOException {\n+    File blockFile \u003d FsDatasetUtil.getOrigFile(unlinkedTmp);\n+    if (blockFile.exists()) {\n+      // If the original block file still exists, then no recovery is needed.\n+      if (!unlinkedTmp.delete()) {\n+        throw new IOException(\"Unable to cleanup unlinked tmp file \" +\n+            unlinkedTmp);\n       }\n-      File blockFile \u003d FsDatasetUtil.getOrigFile(file);\n-      if (blockFile.exists()) {\n-        // If the original block file still exists, then no recovery  is needed.\n-        if (!file.delete()) {\n-          throw new IOException(\"Unable to cleanup unlinked tmp file \" + file);\n-        }\n-      } else {\n-        if (!file.renameTo(blockFile)) {\n-          throw new IOException(\"Unable to cleanup detached file \" + file);\n-        }\n+      return null;\n+    } else {\n+      if (!unlinkedTmp.renameTo(blockFile)) {\n+        throw new IOException(\"Unable to rename unlinked tmp file \" +\n+            unlinkedTmp);\n       }\n+      return blockFile;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  File recoverTempUnlinkedBlock(File unlinkedTmp) throws IOException {\n    File blockFile \u003d FsDatasetUtil.getOrigFile(unlinkedTmp);\n    if (blockFile.exists()) {\n      // If the original block file still exists, then no recovery is needed.\n      if (!unlinkedTmp.delete()) {\n        throw new IOException(\"Unable to cleanup unlinked tmp file \" +\n            unlinkedTmp);\n      }\n      return null;\n    } else {\n      if (!unlinkedTmp.renameTo(blockFile)) {\n        throw new IOException(\"Unable to rename unlinked tmp file \" +\n            unlinkedTmp);\n      }\n      return blockFile;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/BlockPoolSlice.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6482. Use block ID-based block layout on datanodes (James Thomas via Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615223 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/08/14 1:41 PM",
          "commitName": "1ba3f8971433cdbc3e43fd3605065d811dab5b16",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "01/08/14 11:56 AM",
          "commitNameOld": "07860b1c9ee3e1d77d39a52d41c3243fdcc10c45",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,17 @@\n-  private void recoverTempUnlinkedBlock() throws IOException {\n-    File files[] \u003d FileUtil.listFiles(dir);\n-    for (File file : files) {\n-      if (!FsDatasetUtil.isUnlinkTmpFile(file)) {\n-        continue;\n+  File recoverTempUnlinkedBlock(File unlinkedTmp) throws IOException {\n+    File blockFile \u003d FsDatasetUtil.getOrigFile(unlinkedTmp);\n+    if (blockFile.exists()) {\n+      // If the original block file still exists, then no recovery is needed.\n+      if (!unlinkedTmp.delete()) {\n+        throw new IOException(\"Unable to cleanup unlinked tmp file \" +\n+            unlinkedTmp);\n       }\n-      File blockFile \u003d FsDatasetUtil.getOrigFile(file);\n-      if (blockFile.exists()) {\n-        // If the original block file still exists, then no recovery  is needed.\n-        if (!file.delete()) {\n-          throw new IOException(\"Unable to cleanup unlinked tmp file \" + file);\n-        }\n-      } else {\n-        if (!file.renameTo(blockFile)) {\n-          throw new IOException(\"Unable to cleanup detached file \" + file);\n-        }\n+      return null;\n+    } else {\n+      if (!unlinkedTmp.renameTo(blockFile)) {\n+        throw new IOException(\"Unable to rename unlinked tmp file \" +\n+            unlinkedTmp);\n       }\n+      return blockFile;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  File recoverTempUnlinkedBlock(File unlinkedTmp) throws IOException {\n    File blockFile \u003d FsDatasetUtil.getOrigFile(unlinkedTmp);\n    if (blockFile.exists()) {\n      // If the original block file still exists, then no recovery is needed.\n      if (!unlinkedTmp.delete()) {\n        throw new IOException(\"Unable to cleanup unlinked tmp file \" +\n            unlinkedTmp);\n      }\n      return null;\n    } else {\n      if (!unlinkedTmp.renameTo(blockFile)) {\n        throw new IOException(\"Unable to rename unlinked tmp file \" +\n            unlinkedTmp);\n      }\n      return blockFile;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/BlockPoolSlice.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[unlinkedTmp-File]"
          }
        }
      ]
    },
    "bc13dfb1426944ce45293cb8f444239a7406762c": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "HDFS-3130. Move fsdataset implementation to a package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1308437 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/04/12 10:38 AM",
      "commitName": "bc13dfb1426944ce45293cb8f444239a7406762c",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-3130. Move fsdataset implementation to a package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1308437 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "02/04/12 10:38 AM",
          "commitName": "bc13dfb1426944ce45293cb8f444239a7406762c",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "01/04/12 8:48 PM",
          "commitNameOld": "a4ccb8f504e79802f1b3c69acbcbb00b2343c529",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.58,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,19 @@\n-    private void recoverTempUnlinkedBlock() throws IOException {\n-      File files[] \u003d FileUtil.listFiles(dir);\n-      for (File file : files) {\n-        if (!FSDataset.isUnlinkTmpFile(file)) {\n-          continue;\n+  private void recoverTempUnlinkedBlock() throws IOException {\n+    File files[] \u003d FileUtil.listFiles(dir);\n+    for (File file : files) {\n+      if (!FsDatasetUtil.isUnlinkTmpFile(file)) {\n+        continue;\n+      }\n+      File blockFile \u003d FsDatasetUtil.getOrigFile(file);\n+      if (blockFile.exists()) {\n+        // If the original block file still exists, then no recovery  is needed.\n+        if (!file.delete()) {\n+          throw new IOException(\"Unable to cleanup unlinked tmp file \" + file);\n         }\n-        File blockFile \u003d getOrigFile(file);\n-        if (blockFile.exists()) {\n-          //\n-          // If the original block file still exists, then no recovery\n-          // is needed.\n-          //\n-          if (!file.delete()) {\n-            throw new IOException(\"Unable to cleanup unlinked tmp file \" +\n-                file);\n-          }\n-        } else {\n-          if (!file.renameTo(blockFile)) {\n-            throw new IOException(\"Unable to cleanup detached file \" +\n-                file);\n-          }\n+      } else {\n+        if (!file.renameTo(blockFile)) {\n+          throw new IOException(\"Unable to cleanup detached file \" + file);\n         }\n       }\n-    }\n\\ No newline at end of file\n+    }\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  private void recoverTempUnlinkedBlock() throws IOException {\n    File files[] \u003d FileUtil.listFiles(dir);\n    for (File file : files) {\n      if (!FsDatasetUtil.isUnlinkTmpFile(file)) {\n        continue;\n      }\n      File blockFile \u003d FsDatasetUtil.getOrigFile(file);\n      if (blockFile.exists()) {\n        // If the original block file still exists, then no recovery  is needed.\n        if (!file.delete()) {\n          throw new IOException(\"Unable to cleanup unlinked tmp file \" + file);\n        }\n      } else {\n        if (!file.renameTo(blockFile)) {\n          throw new IOException(\"Unable to cleanup detached file \" + file);\n        }\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/LDir.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/LDir.java",
            "oldMethodName": "recoverTempUnlinkedBlock",
            "newMethodName": "recoverTempUnlinkedBlock"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-3130. Move fsdataset implementation to a package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1308437 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "02/04/12 10:38 AM",
          "commitName": "bc13dfb1426944ce45293cb8f444239a7406762c",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "01/04/12 8:48 PM",
          "commitNameOld": "a4ccb8f504e79802f1b3c69acbcbb00b2343c529",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.58,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,19 @@\n-    private void recoverTempUnlinkedBlock() throws IOException {\n-      File files[] \u003d FileUtil.listFiles(dir);\n-      for (File file : files) {\n-        if (!FSDataset.isUnlinkTmpFile(file)) {\n-          continue;\n+  private void recoverTempUnlinkedBlock() throws IOException {\n+    File files[] \u003d FileUtil.listFiles(dir);\n+    for (File file : files) {\n+      if (!FsDatasetUtil.isUnlinkTmpFile(file)) {\n+        continue;\n+      }\n+      File blockFile \u003d FsDatasetUtil.getOrigFile(file);\n+      if (blockFile.exists()) {\n+        // If the original block file still exists, then no recovery  is needed.\n+        if (!file.delete()) {\n+          throw new IOException(\"Unable to cleanup unlinked tmp file \" + file);\n         }\n-        File blockFile \u003d getOrigFile(file);\n-        if (blockFile.exists()) {\n-          //\n-          // If the original block file still exists, then no recovery\n-          // is needed.\n-          //\n-          if (!file.delete()) {\n-            throw new IOException(\"Unable to cleanup unlinked tmp file \" +\n-                file);\n-          }\n-        } else {\n-          if (!file.renameTo(blockFile)) {\n-            throw new IOException(\"Unable to cleanup detached file \" +\n-                file);\n-          }\n+      } else {\n+        if (!file.renameTo(blockFile)) {\n+          throw new IOException(\"Unable to cleanup detached file \" + file);\n         }\n       }\n-    }\n\\ No newline at end of file\n+    }\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  private void recoverTempUnlinkedBlock() throws IOException {\n    File files[] \u003d FileUtil.listFiles(dir);\n    for (File file : files) {\n      if (!FsDatasetUtil.isUnlinkTmpFile(file)) {\n        continue;\n      }\n      File blockFile \u003d FsDatasetUtil.getOrigFile(file);\n      if (blockFile.exists()) {\n        // If the original block file still exists, then no recovery  is needed.\n        if (!file.delete()) {\n          throw new IOException(\"Unable to cleanup unlinked tmp file \" + file);\n        }\n      } else {\n        if (!file.renameTo(blockFile)) {\n          throw new IOException(\"Unable to cleanup detached file \" + file);\n        }\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/LDir.java",
          "extendedDetails": {}
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private void recoverTempUnlinkedBlock() throws IOException {\n      File files[] \u003d FileUtil.listFiles(dir);\n      for (File file : files) {\n        if (!FSDataset.isUnlinkTmpFile(file)) {\n          continue;\n        }\n        File blockFile \u003d getOrigFile(file);\n        if (blockFile.exists()) {\n          //\n          // If the original block file still exists, then no recovery\n          // is needed.\n          //\n          if (!file.delete()) {\n            throw new IOException(\"Unable to cleanup unlinked tmp file \" +\n                file);\n          }\n        } else {\n          if (!file.renameTo(blockFile)) {\n            throw new IOException(\"Unable to cleanup detached file \" +\n                file);\n          }\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private void recoverTempUnlinkedBlock() throws IOException {\n      File files[] \u003d FileUtil.listFiles(dir);\n      for (File file : files) {\n        if (!FSDataset.isUnlinkTmpFile(file)) {\n          continue;\n        }\n        File blockFile \u003d getOrigFile(file);\n        if (blockFile.exists()) {\n          //\n          // If the original block file still exists, then no recovery\n          // is needed.\n          //\n          if (!file.delete()) {\n            throw new IOException(\"Unable to cleanup unlinked tmp file \" +\n                file);\n          }\n        } else {\n          if (!file.renameTo(blockFile)) {\n            throw new IOException(\"Unable to cleanup detached file \" +\n                file);\n          }\n        }\n      }\n    }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,24 @@\n+    private void recoverTempUnlinkedBlock() throws IOException {\n+      File files[] \u003d FileUtil.listFiles(dir);\n+      for (File file : files) {\n+        if (!FSDataset.isUnlinkTmpFile(file)) {\n+          continue;\n+        }\n+        File blockFile \u003d getOrigFile(file);\n+        if (blockFile.exists()) {\n+          //\n+          // If the original block file still exists, then no recovery\n+          // is needed.\n+          //\n+          if (!file.delete()) {\n+            throw new IOException(\"Unable to cleanup unlinked tmp file \" +\n+                file);\n+          }\n+        } else {\n+          if (!file.renameTo(blockFile)) {\n+            throw new IOException(\"Unable to cleanup detached file \" +\n+                file);\n+          }\n+        }\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void recoverTempUnlinkedBlock() throws IOException {\n      File files[] \u003d FileUtil.listFiles(dir);\n      for (File file : files) {\n        if (!FSDataset.isUnlinkTmpFile(file)) {\n          continue;\n        }\n        File blockFile \u003d getOrigFile(file);\n        if (blockFile.exists()) {\n          //\n          // If the original block file still exists, then no recovery\n          // is needed.\n          //\n          if (!file.delete()) {\n            throw new IOException(\"Unable to cleanup unlinked tmp file \" +\n                file);\n          }\n        } else {\n          if (!file.renameTo(blockFile)) {\n            throw new IOException(\"Unable to cleanup detached file \" +\n                file);\n          }\n        }\n      }\n    }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java"
    }
  }
}