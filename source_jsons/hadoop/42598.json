{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMAppAttemptMetrics.java",
  "functionName": "getAggregateAppResourceUsage",
  "functionId": "getAggregateAppResourceUsage",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptMetrics.java",
  "functionStartLine": 133,
  "functionEndLine": 160,
  "numCommitsSeen": 15,
  "timeTaken": 3321,
  "changeHistory": [
    "0a72c2f56c37063609de72eef1f74632890c048a",
    "dae65f3bef8ffa34d02a37041f1dfdfeeee91845",
    "e05fa3451db343c0d22496b332910874b6be5b7f",
    "83be3ad44484bf8a24cb90de4b9c26ab59d226a8"
  ],
  "changeHistoryShort": {
    "0a72c2f56c37063609de72eef1f74632890c048a": "Ybodychange",
    "dae65f3bef8ffa34d02a37041f1dfdfeeee91845": "Ybodychange",
    "e05fa3451db343c0d22496b332910874b6be5b7f": "Ybodychange",
    "83be3ad44484bf8a24cb90de4b9c26ab59d226a8": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0a72c2f56c37063609de72eef1f74632890c048a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7454. RMAppAttemptMetrics#getAggregateResourceUsage can NPE due to double lookup. Contributed by Jason Lowe.\n",
      "commitDate": "09/11/17 7:31 AM",
      "commitName": "0a72c2f56c37063609de72eef1f74632890c048a",
      "commitAuthor": "bibinchundatt",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 57.97,
      "commitsBetweenForRepo": 555,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,28 @@\n   public AggregateAppResourceUsage getAggregateAppResourceUsage() {\n     Map\u003cString, Long\u003e resourcesUsed \u003d\n         convertAtomicLongMaptoLongMap(resourceUsageMap);\n \n     // Only add in the running containers if this is the active attempt.\n     RMApp rmApp \u003d rmContext.getRMApps().get(attemptId.getApplicationId());\n     if (rmApp !\u003d null) {\n-      RMAppAttempt currentAttempt \u003d rmContext.getRMApps().get(attemptId.getApplicationId()).getCurrentAppAttempt();\n-      if (currentAttempt.getAppAttemptId().equals(attemptId)) {\n+      RMAppAttempt currentAttempt \u003d rmApp.getCurrentAppAttempt();\n+      if (currentAttempt !\u003d null\n+          \u0026\u0026 currentAttempt.getAppAttemptId().equals(attemptId)) {\n         ApplicationResourceUsageReport appResUsageReport \u003d\n             rmContext.getScheduler().getAppResourceUsageReport(attemptId);\n         if (appResUsageReport !\u003d null) {\n           Map\u003cString, Long\u003e tmp \u003d appResUsageReport.getResourceSecondsMap();\n           for (Map.Entry\u003cString, Long\u003e entry : tmp.entrySet()) {\n-            if (resourcesUsed.containsKey(entry.getKey())) {\n-              Long value \u003d resourcesUsed.get(entry.getKey());\n+            Long value \u003d resourcesUsed.get(entry.getKey());\n+            if (value !\u003d null) {\n               value +\u003d entry.getValue();\n-              resourcesUsed.put(entry.getKey(), value);\n-            } else{\n-              resourcesUsed.put(entry.getKey(), entry.getValue());\n+            } else {\n+              value \u003d entry.getValue();\n             }\n+            resourcesUsed.put(entry.getKey(), value);\n           }\n         }\n       }\n     }\n     return new AggregateAppResourceUsage(resourcesUsed);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public AggregateAppResourceUsage getAggregateAppResourceUsage() {\n    Map\u003cString, Long\u003e resourcesUsed \u003d\n        convertAtomicLongMaptoLongMap(resourceUsageMap);\n\n    // Only add in the running containers if this is the active attempt.\n    RMApp rmApp \u003d rmContext.getRMApps().get(attemptId.getApplicationId());\n    if (rmApp !\u003d null) {\n      RMAppAttempt currentAttempt \u003d rmApp.getCurrentAppAttempt();\n      if (currentAttempt !\u003d null\n          \u0026\u0026 currentAttempt.getAppAttemptId().equals(attemptId)) {\n        ApplicationResourceUsageReport appResUsageReport \u003d\n            rmContext.getScheduler().getAppResourceUsageReport(attemptId);\n        if (appResUsageReport !\u003d null) {\n          Map\u003cString, Long\u003e tmp \u003d appResUsageReport.getResourceSecondsMap();\n          for (Map.Entry\u003cString, Long\u003e entry : tmp.entrySet()) {\n            Long value \u003d resourcesUsed.get(entry.getKey());\n            if (value !\u003d null) {\n              value +\u003d entry.getValue();\n            } else {\n              value \u003d entry.getValue();\n            }\n            resourcesUsed.put(entry.getKey(), value);\n          }\n        }\n      }\n    }\n    return new AggregateAppResourceUsage(resourcesUsed);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptMetrics.java",
      "extendedDetails": {}
    },
    "dae65f3bef8ffa34d02a37041f1dfdfeeee91845": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6232. Update resource usage and preempted resource calculations to take into account all resource types. Contributed by Varun Vasudev.\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "dae65f3bef8ffa34d02a37041f1dfdfeeee91845",
      "commitAuthor": "Sunil G",
      "commitDateOld": "18/08/17 7:58 AM",
      "commitNameOld": "e05fa3451db343c0d22496b332910874b6be5b7f",
      "commitAuthorOld": "bibinchundatt",
      "daysBetweenCommits": 25.06,
      "commitsBetweenForRepo": 223,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,27 @@\n   public AggregateAppResourceUsage getAggregateAppResourceUsage() {\n-    long memorySeconds \u003d finishedMemorySeconds.get();\n-    long vcoreSeconds \u003d finishedVcoreSeconds.get();\n+    Map\u003cString, Long\u003e resourcesUsed \u003d\n+        convertAtomicLongMaptoLongMap(resourceUsageMap);\n \n     // Only add in the running containers if this is the active attempt.\n     RMApp rmApp \u003d rmContext.getRMApps().get(attemptId.getApplicationId());\n-    if (null !\u003d rmApp) {\n-      RMAppAttempt currentAttempt \u003d rmApp.getCurrentAppAttempt();\n+    if (rmApp !\u003d null) {\n+      RMAppAttempt currentAttempt \u003d rmContext.getRMApps().get(attemptId.getApplicationId()).getCurrentAppAttempt();\n       if (currentAttempt.getAppAttemptId().equals(attemptId)) {\n-        ApplicationResourceUsageReport appResUsageReport \u003d rmContext\n-                .getScheduler().getAppResourceUsageReport(attemptId);\n+        ApplicationResourceUsageReport appResUsageReport \u003d\n+            rmContext.getScheduler().getAppResourceUsageReport(attemptId);\n         if (appResUsageReport !\u003d null) {\n-          memorySeconds +\u003d appResUsageReport.getMemorySeconds();\n-          vcoreSeconds +\u003d appResUsageReport.getVcoreSeconds();\n+          Map\u003cString, Long\u003e tmp \u003d appResUsageReport.getResourceSecondsMap();\n+          for (Map.Entry\u003cString, Long\u003e entry : tmp.entrySet()) {\n+            if (resourcesUsed.containsKey(entry.getKey())) {\n+              Long value \u003d resourcesUsed.get(entry.getKey());\n+              value +\u003d entry.getValue();\n+              resourcesUsed.put(entry.getKey(), value);\n+            } else{\n+              resourcesUsed.put(entry.getKey(), entry.getValue());\n+            }\n+          }\n         }\n       }\n     }\n-    return new AggregateAppResourceUsage(memorySeconds, vcoreSeconds);\n+    return new AggregateAppResourceUsage(resourcesUsed);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public AggregateAppResourceUsage getAggregateAppResourceUsage() {\n    Map\u003cString, Long\u003e resourcesUsed \u003d\n        convertAtomicLongMaptoLongMap(resourceUsageMap);\n\n    // Only add in the running containers if this is the active attempt.\n    RMApp rmApp \u003d rmContext.getRMApps().get(attemptId.getApplicationId());\n    if (rmApp !\u003d null) {\n      RMAppAttempt currentAttempt \u003d rmContext.getRMApps().get(attemptId.getApplicationId()).getCurrentAppAttempt();\n      if (currentAttempt.getAppAttemptId().equals(attemptId)) {\n        ApplicationResourceUsageReport appResUsageReport \u003d\n            rmContext.getScheduler().getAppResourceUsageReport(attemptId);\n        if (appResUsageReport !\u003d null) {\n          Map\u003cString, Long\u003e tmp \u003d appResUsageReport.getResourceSecondsMap();\n          for (Map.Entry\u003cString, Long\u003e entry : tmp.entrySet()) {\n            if (resourcesUsed.containsKey(entry.getKey())) {\n              Long value \u003d resourcesUsed.get(entry.getKey());\n              value +\u003d entry.getValue();\n              resourcesUsed.put(entry.getKey(), value);\n            } else{\n              resourcesUsed.put(entry.getKey(), entry.getValue());\n            }\n          }\n        }\n      }\n    }\n    return new AggregateAppResourceUsage(resourcesUsed);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptMetrics.java",
      "extendedDetails": {}
    },
    "e05fa3451db343c0d22496b332910874b6be5b7f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7007. NPE in RM while using YarnClient.getApplications(). Contributed by Lingfeng Su.\n",
      "commitDate": "18/08/17 7:58 AM",
      "commitName": "e05fa3451db343c0d22496b332910874b6be5b7f",
      "commitAuthor": "bibinchundatt",
      "commitDateOld": "01/05/17 7:45 AM",
      "commitNameOld": "30fc5801966feb7f9bdd7d79db75acc595102913",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 109.01,
      "commitsBetweenForRepo": 633,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,19 @@\n   public AggregateAppResourceUsage getAggregateAppResourceUsage() {\n     long memorySeconds \u003d finishedMemorySeconds.get();\n     long vcoreSeconds \u003d finishedVcoreSeconds.get();\n \n     // Only add in the running containers if this is the active attempt.\n-    RMAppAttempt currentAttempt \u003d rmContext.getRMApps()\n-                   .get(attemptId.getApplicationId()).getCurrentAppAttempt();\n-    if (currentAttempt.getAppAttemptId().equals(attemptId)) {\n-      ApplicationResourceUsageReport appResUsageReport \u003d rmContext\n-            .getScheduler().getAppResourceUsageReport(attemptId);\n-      if (appResUsageReport !\u003d null) {\n-        memorySeconds +\u003d appResUsageReport.getMemorySeconds();\n-        vcoreSeconds +\u003d appResUsageReport.getVcoreSeconds();\n+    RMApp rmApp \u003d rmContext.getRMApps().get(attemptId.getApplicationId());\n+    if (null !\u003d rmApp) {\n+      RMAppAttempt currentAttempt \u003d rmApp.getCurrentAppAttempt();\n+      if (currentAttempt.getAppAttemptId().equals(attemptId)) {\n+        ApplicationResourceUsageReport appResUsageReport \u003d rmContext\n+                .getScheduler().getAppResourceUsageReport(attemptId);\n+        if (appResUsageReport !\u003d null) {\n+          memorySeconds +\u003d appResUsageReport.getMemorySeconds();\n+          vcoreSeconds +\u003d appResUsageReport.getVcoreSeconds();\n+        }\n       }\n     }\n     return new AggregateAppResourceUsage(memorySeconds, vcoreSeconds);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public AggregateAppResourceUsage getAggregateAppResourceUsage() {\n    long memorySeconds \u003d finishedMemorySeconds.get();\n    long vcoreSeconds \u003d finishedVcoreSeconds.get();\n\n    // Only add in the running containers if this is the active attempt.\n    RMApp rmApp \u003d rmContext.getRMApps().get(attemptId.getApplicationId());\n    if (null !\u003d rmApp) {\n      RMAppAttempt currentAttempt \u003d rmApp.getCurrentAppAttempt();\n      if (currentAttempt.getAppAttemptId().equals(attemptId)) {\n        ApplicationResourceUsageReport appResUsageReport \u003d rmContext\n                .getScheduler().getAppResourceUsageReport(attemptId);\n        if (appResUsageReport !\u003d null) {\n          memorySeconds +\u003d appResUsageReport.getMemorySeconds();\n          vcoreSeconds +\u003d appResUsageReport.getVcoreSeconds();\n        }\n      }\n    }\n    return new AggregateAppResourceUsage(memorySeconds, vcoreSeconds);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptMetrics.java",
      "extendedDetails": {}
    },
    "83be3ad44484bf8a24cb90de4b9c26ab59d226a8": {
      "type": "Yintroduced",
      "commitMessage": "YARN-415. Capture aggregate memory allocation at the app-level for chargeback. Contributed by Eric Payne \u0026 Andrey Klochkov\n",
      "commitDate": "10/09/14 6:20 PM",
      "commitName": "83be3ad44484bf8a24cb90de4b9c26ab59d226a8",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,17 @@\n+  public AggregateAppResourceUsage getAggregateAppResourceUsage() {\n+    long memorySeconds \u003d finishedMemorySeconds.get();\n+    long vcoreSeconds \u003d finishedVcoreSeconds.get();\n+\n+    // Only add in the running containers if this is the active attempt.\n+    RMAppAttempt currentAttempt \u003d rmContext.getRMApps()\n+                   .get(attemptId.getApplicationId()).getCurrentAppAttempt();\n+    if (currentAttempt.getAppAttemptId().equals(attemptId)) {\n+      ApplicationResourceUsageReport appResUsageReport \u003d rmContext\n+            .getScheduler().getAppResourceUsageReport(attemptId);\n+      if (appResUsageReport !\u003d null) {\n+        memorySeconds +\u003d appResUsageReport.getMemorySeconds();\n+        vcoreSeconds +\u003d appResUsageReport.getVcoreSeconds();\n+      }\n+    }\n+    return new AggregateAppResourceUsage(memorySeconds, vcoreSeconds);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public AggregateAppResourceUsage getAggregateAppResourceUsage() {\n    long memorySeconds \u003d finishedMemorySeconds.get();\n    long vcoreSeconds \u003d finishedVcoreSeconds.get();\n\n    // Only add in the running containers if this is the active attempt.\n    RMAppAttempt currentAttempt \u003d rmContext.getRMApps()\n                   .get(attemptId.getApplicationId()).getCurrentAppAttempt();\n    if (currentAttempt.getAppAttemptId().equals(attemptId)) {\n      ApplicationResourceUsageReport appResUsageReport \u003d rmContext\n            .getScheduler().getAppResourceUsageReport(attemptId);\n      if (appResUsageReport !\u003d null) {\n        memorySeconds +\u003d appResUsageReport.getMemorySeconds();\n        vcoreSeconds +\u003d appResUsageReport.getVcoreSeconds();\n      }\n    }\n    return new AggregateAppResourceUsage(memorySeconds, vcoreSeconds);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptMetrics.java"
    }
  }
}