{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ShortCircuitRegistry.java",
  "functionName": "registerSlot",
  "functionId": "registerSlot___blockId-ExtendedBlockId__slotId-SlotId__isCached-boolean",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/ShortCircuitRegistry.java",
  "functionStartLine": 340,
  "functionEndLine": 367,
  "numCommitsSeen": 21,
  "timeTaken": 1274,
  "changeHistory": [
    "a3616c58dd2ddb16172ca3ab5d66fad52ec0e6d7",
    "6465b0b55f263c06f4d37800db951adba314a9fd"
  ],
  "changeHistoryShort": {
    "a3616c58dd2ddb16172ca3ab5d66fad52ec0e6d7": "Ymultichange(Yparameterchange,Ybodychange)",
    "6465b0b55f263c06f4d37800db951adba314a9fd": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a3616c58dd2ddb16172ca3ab5d66fad52ec0e6d7": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-6086. Fix a case where zero-copy or no-checksum reads were not allowed even when the block was cached. (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1576533 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/03/14 3:41 PM",
      "commitName": "a3616c58dd2ddb16172ca3ab5d66fad52ec0e6d7",
      "commitAuthor": "Colin McCabe",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6086. Fix a case where zero-copy or no-checksum reads were not allowed even when the block was cached. (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1576533 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/03/14 3:41 PM",
          "commitName": "a3616c58dd2ddb16172ca3ab5d66fad52ec0e6d7",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "06/03/14 12:21 AM",
          "commitNameOld": "5a3f614794f6669ef2a15307e810b373b653776a",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 5.6,
          "commitsBetweenForRepo": 48,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,28 @@\n-  public synchronized void registerSlot(ExtendedBlockId blockId, SlotId slotId)\n-      throws InvalidRequestException {\n+  public synchronized void registerSlot(ExtendedBlockId blockId, SlotId slotId,\n+      boolean isCached) throws InvalidRequestException {\n     if (!enabled) {\n       if (LOG.isTraceEnabled()) {\n-        LOG.trace(\"registerSlot: ShortCircuitRegistry is \" +\n-            \"not enabled.\");\n+        LOG.trace(this + \" can\u0027t register a slot because the \" +\n+            \"ShortCircuitRegistry is not enabled.\");\n       }\n       throw new UnsupportedOperationException();\n     }\n     ShmId shmId \u003d slotId.getShmId();\n     RegisteredShm shm \u003d segments.get(shmId);\n     if (shm \u003d\u003d null) {\n       throw new InvalidRequestException(\"there is no shared memory segment \" +\n           \"registered with shmId \" + shmId);\n     }\n     Slot slot \u003d shm.registerSlot(slotId.getSlotIdx(), blockId);\n+    if (isCached) {\n+      slot.makeAnchorable();\n+    } else {\n+      slot.makeUnanchorable();\n+    }\n     boolean added \u003d slots.put(blockId, slot);\n     Preconditions.checkState(added);\n+    if (LOG.isTraceEnabled()) {\n+      LOG.trace(this + \": registered \" + blockId + \" with slot \" +\n+        slotId + \" (isCached\u003d\" + isCached + \")\");\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void registerSlot(ExtendedBlockId blockId, SlotId slotId,\n      boolean isCached) throws InvalidRequestException {\n    if (!enabled) {\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(this + \" can\u0027t register a slot because the \" +\n            \"ShortCircuitRegistry is not enabled.\");\n      }\n      throw new UnsupportedOperationException();\n    }\n    ShmId shmId \u003d slotId.getShmId();\n    RegisteredShm shm \u003d segments.get(shmId);\n    if (shm \u003d\u003d null) {\n      throw new InvalidRequestException(\"there is no shared memory segment \" +\n          \"registered with shmId \" + shmId);\n    }\n    Slot slot \u003d shm.registerSlot(slotId.getSlotIdx(), blockId);\n    if (isCached) {\n      slot.makeAnchorable();\n    } else {\n      slot.makeUnanchorable();\n    }\n    boolean added \u003d slots.put(blockId, slot);\n    Preconditions.checkState(added);\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(this + \": registered \" + blockId + \" with slot \" +\n        slotId + \" (isCached\u003d\" + isCached + \")\");\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/ShortCircuitRegistry.java",
          "extendedDetails": {
            "oldValue": "[blockId-ExtendedBlockId, slotId-SlotId]",
            "newValue": "[blockId-ExtendedBlockId, slotId-SlotId, isCached-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6086. Fix a case where zero-copy or no-checksum reads were not allowed even when the block was cached. (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1576533 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/03/14 3:41 PM",
          "commitName": "a3616c58dd2ddb16172ca3ab5d66fad52ec0e6d7",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "06/03/14 12:21 AM",
          "commitNameOld": "5a3f614794f6669ef2a15307e810b373b653776a",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 5.6,
          "commitsBetweenForRepo": 48,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,28 @@\n-  public synchronized void registerSlot(ExtendedBlockId blockId, SlotId slotId)\n-      throws InvalidRequestException {\n+  public synchronized void registerSlot(ExtendedBlockId blockId, SlotId slotId,\n+      boolean isCached) throws InvalidRequestException {\n     if (!enabled) {\n       if (LOG.isTraceEnabled()) {\n-        LOG.trace(\"registerSlot: ShortCircuitRegistry is \" +\n-            \"not enabled.\");\n+        LOG.trace(this + \" can\u0027t register a slot because the \" +\n+            \"ShortCircuitRegistry is not enabled.\");\n       }\n       throw new UnsupportedOperationException();\n     }\n     ShmId shmId \u003d slotId.getShmId();\n     RegisteredShm shm \u003d segments.get(shmId);\n     if (shm \u003d\u003d null) {\n       throw new InvalidRequestException(\"there is no shared memory segment \" +\n           \"registered with shmId \" + shmId);\n     }\n     Slot slot \u003d shm.registerSlot(slotId.getSlotIdx(), blockId);\n+    if (isCached) {\n+      slot.makeAnchorable();\n+    } else {\n+      slot.makeUnanchorable();\n+    }\n     boolean added \u003d slots.put(blockId, slot);\n     Preconditions.checkState(added);\n+    if (LOG.isTraceEnabled()) {\n+      LOG.trace(this + \": registered \" + blockId + \" with slot \" +\n+        slotId + \" (isCached\u003d\" + isCached + \")\");\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void registerSlot(ExtendedBlockId blockId, SlotId slotId,\n      boolean isCached) throws InvalidRequestException {\n    if (!enabled) {\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(this + \" can\u0027t register a slot because the \" +\n            \"ShortCircuitRegistry is not enabled.\");\n      }\n      throw new UnsupportedOperationException();\n    }\n    ShmId shmId \u003d slotId.getShmId();\n    RegisteredShm shm \u003d segments.get(shmId);\n    if (shm \u003d\u003d null) {\n      throw new InvalidRequestException(\"there is no shared memory segment \" +\n          \"registered with shmId \" + shmId);\n    }\n    Slot slot \u003d shm.registerSlot(slotId.getSlotIdx(), blockId);\n    if (isCached) {\n      slot.makeAnchorable();\n    } else {\n      slot.makeUnanchorable();\n    }\n    boolean added \u003d slots.put(blockId, slot);\n    Preconditions.checkState(added);\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(this + \": registered \" + blockId + \" with slot \" +\n        slotId + \" (isCached\u003d\" + isCached + \")\");\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/ShortCircuitRegistry.java",
          "extendedDetails": {}
        }
      ]
    },
    "6465b0b55f263c06f4d37800db951adba314a9fd": {
      "type": "Yintroduced",
      "commitMessage": "add missing file for HDFS-5950\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1573434 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/03/14 8:01 PM",
      "commitName": "6465b0b55f263c06f4d37800db951adba314a9fd",
      "commitAuthor": "Colin McCabe",
      "diff": "@@ -0,0 +1,19 @@\n+  public synchronized void registerSlot(ExtendedBlockId blockId, SlotId slotId)\n+      throws InvalidRequestException {\n+    if (!enabled) {\n+      if (LOG.isTraceEnabled()) {\n+        LOG.trace(\"registerSlot: ShortCircuitRegistry is \" +\n+            \"not enabled.\");\n+      }\n+      throw new UnsupportedOperationException();\n+    }\n+    ShmId shmId \u003d slotId.getShmId();\n+    RegisteredShm shm \u003d segments.get(shmId);\n+    if (shm \u003d\u003d null) {\n+      throw new InvalidRequestException(\"there is no shared memory segment \" +\n+          \"registered with shmId \" + shmId);\n+    }\n+    Slot slot \u003d shm.registerSlot(slotId.getSlotIdx(), blockId);\n+    boolean added \u003d slots.put(blockId, slot);\n+    Preconditions.checkState(added);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void registerSlot(ExtendedBlockId blockId, SlotId slotId)\n      throws InvalidRequestException {\n    if (!enabled) {\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(\"registerSlot: ShortCircuitRegistry is \" +\n            \"not enabled.\");\n      }\n      throw new UnsupportedOperationException();\n    }\n    ShmId shmId \u003d slotId.getShmId();\n    RegisteredShm shm \u003d segments.get(shmId);\n    if (shm \u003d\u003d null) {\n      throw new InvalidRequestException(\"there is no shared memory segment \" +\n          \"registered with shmId \" + shmId);\n    }\n    Slot slot \u003d shm.registerSlot(slotId.getSlotIdx(), blockId);\n    boolean added \u003d slots.put(blockId, slot);\n    Preconditions.checkState(added);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/ShortCircuitRegistry.java"
    }
  }
}