{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMAppAttemptImpl.java",
  "functionName": "rememberTargetTransitionsAndStoreState",
  "functionId": "rememberTargetTransitionsAndStoreState___event-RMAppAttemptEvent__transitionToDo-Object__targetFinalState-RMAppAttemptState__stateToBeStored-RMAppAttemptState",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java",
  "functionStartLine": 1357,
  "functionEndLine": 1429,
  "numCommitsSeen": 155,
  "timeTaken": 8638,
  "changeHistory": [
    "6ce189c62132706d9aaee5abf020ae4dc783ba26",
    "15098df744deb045c0a33b095d45728d5b2af454",
    "a63c358b78ad1d4765d7f0b2d595c49b693efb3f",
    "dae65f3bef8ffa34d02a37041f1dfdfeeee91845",
    "cc23514abacb4d6589e731cc5ce5d8e6f19c955d",
    "65364defb4a633ca20b39ebc38cd9c0db63a5835",
    "93eeb13164707d0e3556c2bf737bd2ee09a335c6",
    "772ea7b41b06beaa1f4ac4fa86eac8d6e6c8cd36",
    "cf23f2c2b5b4eb9e51de1a66b7aa57dee7ff30b5",
    "a0bca2b5ad2344fda5411d910a3730c85f12a0df",
    "65c69e296edad48e50ef36e47803625ea46b51e1",
    "5805a81efbc024024d8172489dfdc6cf77879416",
    "14e2639fd0d53f7e0b58f2f4744af44983d4e867",
    "83be3ad44484bf8a24cb90de4b9c26ab59d226a8",
    "d16470025aa0c51a04c530863a96108895d72ddf",
    "dab635980d089a0836c08a58d915dfa32ae3c7c0",
    "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f",
    "9f4d4e27fb1760b352cc5b301cd65a50d2d43ff6"
  ],
  "changeHistoryShort": {
    "6ce189c62132706d9aaee5abf020ae4dc783ba26": "Ybodychange",
    "15098df744deb045c0a33b095d45728d5b2af454": "Ybodychange",
    "a63c358b78ad1d4765d7f0b2d595c49b693efb3f": "Ybodychange",
    "dae65f3bef8ffa34d02a37041f1dfdfeeee91845": "Ybodychange",
    "cc23514abacb4d6589e731cc5ce5d8e6f19c955d": "Ybodychange",
    "65364defb4a633ca20b39ebc38cd9c0db63a5835": "Ybodychange",
    "93eeb13164707d0e3556c2bf737bd2ee09a335c6": "Ybodychange",
    "772ea7b41b06beaa1f4ac4fa86eac8d6e6c8cd36": "Ybodychange",
    "cf23f2c2b5b4eb9e51de1a66b7aa57dee7ff30b5": "Ybodychange",
    "a0bca2b5ad2344fda5411d910a3730c85f12a0df": "Ybodychange",
    "65c69e296edad48e50ef36e47803625ea46b51e1": "Ybodychange",
    "5805a81efbc024024d8172489dfdc6cf77879416": "Ybodychange",
    "14e2639fd0d53f7e0b58f2f4744af44983d4e867": "Ybodychange",
    "83be3ad44484bf8a24cb90de4b9c26ab59d226a8": "Ybodychange",
    "d16470025aa0c51a04c530863a96108895d72ddf": "Ybodychange",
    "dab635980d089a0836c08a58d915dfa32ae3c7c0": "Ybodychange",
    "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f": "Ybodychange",
    "9f4d4e27fb1760b352cc5b301cd65a50d2d43ff6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6ce189c62132706d9aaee5abf020ae4dc783ba26": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10200. Add number of containers to RMAppManager summary\n",
      "commitDate": "25/03/20 10:41 AM",
      "commitName": "6ce189c62132706d9aaee5abf020ae4dc783ba26",
      "commitAuthor": "Jonathan Hung",
      "commitDateOld": "06/09/19 4:52 PM",
      "commitNameOld": "73575701ab8b3185e070491fd9c04580d7381a59",
      "commitAuthorOld": "Tao Yang",
      "daysBetweenCommits": 200.74,
      "commitsBetweenForRepo": 863,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,72 +1,73 @@\n   private void rememberTargetTransitionsAndStoreState(RMAppAttemptEvent event,\n       Object transitionToDo, RMAppAttemptState targetFinalState,\n       RMAppAttemptState stateToBeStored) {\n \n     rememberTargetTransitions(event, transitionToDo, targetFinalState);\n     stateBeforeFinalSaving \u003d getState();\n \n     // As of today, finalState, diagnostics, final-tracking-url and\n     // finalAppStatus are the only things that we store into the StateStore\n     // AFTER the initial saving on app-attempt-start\n     // These fields can be visible from outside only after they are saved in\n     // StateStore\n     BoundedAppender diags \u003d new BoundedAppender(diagnostics.getLimit());\n \n     // don\u0027t leave the tracking URL pointing to a non-existent AM\n     if (conf.getBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED,\n             YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\n       setTrackingUrlToAHSPage(stateToBeStored);\n     } else {\n       setTrackingUrlToRMAppPage(stateToBeStored);\n     }\n     String finalTrackingUrl \u003d getOriginalTrackingUrl();\n     FinalApplicationStatus finalStatus \u003d null;\n     int exitStatus \u003d ContainerExitStatus.INVALID;\n     switch (event.getType()) {\n     case LAUNCH_FAILED:\n       diags.append(event.getDiagnosticMsg());\n       break;\n     case REGISTERED:\n       diags.append(getUnexpectedAMRegisteredDiagnostics());\n       break;\n     case UNREGISTERED:\n       RMAppAttemptUnregistrationEvent unregisterEvent \u003d\n           (RMAppAttemptUnregistrationEvent) event;\n       diags.append(unregisterEvent.getDiagnosticMsg());\n       // reset finalTrackingUrl to url sent by am\n       finalTrackingUrl \u003d sanitizeTrackingUrl(unregisterEvent.getFinalTrackingUrl());\n       finalStatus \u003d unregisterEvent.getFinalApplicationStatus();\n       break;\n     case CONTAINER_FINISHED:\n       RMAppAttemptContainerFinishedEvent finishEvent \u003d\n           (RMAppAttemptContainerFinishedEvent) event;\n       diags.append(getAMContainerCrashedDiagnostics(finishEvent));\n       exitStatus \u003d finishEvent.getContainerStatus().getExitStatus();\n       break;\n     case KILL:\n       break;\n     case FAIL:\n       diags.append(event.getDiagnosticMsg());\n       break;\n     case EXPIRE:\n       diags.append(getAMExpiredDiagnostics(event));\n       break;\n     default:\n       break;\n     }\n     AggregateAppResourceUsage resUsage \u003d\n         this.attemptMetrics.getAggregateAppResourceUsage();\n     RMStateStore rmStore \u003d rmContext.getStateStore();\n     setFinishTime(System.currentTimeMillis());\n \n     ApplicationAttemptStateData attemptState \u003d ApplicationAttemptStateData\n         .newInstance(applicationAttemptId, getMasterContainer(),\n             rmStore.getCredentialsFromAppAttempt(this), startTime,\n             stateToBeStored, finalTrackingUrl, diags.toString(), finalStatus, exitStatus,\n             getFinishTime(), resUsage.getResourceUsageSecondsMap(),\n-            this.attemptMetrics.getPreemptedResourceSecondsMap());\n+            this.attemptMetrics.getPreemptedResourceSecondsMap(),\n+            this.attemptMetrics.getTotalAllocatedContainers());\n     LOG.info(\"Updating application attempt \" + applicationAttemptId\n         + \" with final state: \" + targetedFinalState + \", and exit status: \"\n         + exitStatus);\n     rmStore.updateApplicationAttemptState(attemptState);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void rememberTargetTransitionsAndStoreState(RMAppAttemptEvent event,\n      Object transitionToDo, RMAppAttemptState targetFinalState,\n      RMAppAttemptState stateToBeStored) {\n\n    rememberTargetTransitions(event, transitionToDo, targetFinalState);\n    stateBeforeFinalSaving \u003d getState();\n\n    // As of today, finalState, diagnostics, final-tracking-url and\n    // finalAppStatus are the only things that we store into the StateStore\n    // AFTER the initial saving on app-attempt-start\n    // These fields can be visible from outside only after they are saved in\n    // StateStore\n    BoundedAppender diags \u003d new BoundedAppender(diagnostics.getLimit());\n\n    // don\u0027t leave the tracking URL pointing to a non-existent AM\n    if (conf.getBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED,\n            YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\n      setTrackingUrlToAHSPage(stateToBeStored);\n    } else {\n      setTrackingUrlToRMAppPage(stateToBeStored);\n    }\n    String finalTrackingUrl \u003d getOriginalTrackingUrl();\n    FinalApplicationStatus finalStatus \u003d null;\n    int exitStatus \u003d ContainerExitStatus.INVALID;\n    switch (event.getType()) {\n    case LAUNCH_FAILED:\n      diags.append(event.getDiagnosticMsg());\n      break;\n    case REGISTERED:\n      diags.append(getUnexpectedAMRegisteredDiagnostics());\n      break;\n    case UNREGISTERED:\n      RMAppAttemptUnregistrationEvent unregisterEvent \u003d\n          (RMAppAttemptUnregistrationEvent) event;\n      diags.append(unregisterEvent.getDiagnosticMsg());\n      // reset finalTrackingUrl to url sent by am\n      finalTrackingUrl \u003d sanitizeTrackingUrl(unregisterEvent.getFinalTrackingUrl());\n      finalStatus \u003d unregisterEvent.getFinalApplicationStatus();\n      break;\n    case CONTAINER_FINISHED:\n      RMAppAttemptContainerFinishedEvent finishEvent \u003d\n          (RMAppAttemptContainerFinishedEvent) event;\n      diags.append(getAMContainerCrashedDiagnostics(finishEvent));\n      exitStatus \u003d finishEvent.getContainerStatus().getExitStatus();\n      break;\n    case KILL:\n      break;\n    case FAIL:\n      diags.append(event.getDiagnosticMsg());\n      break;\n    case EXPIRE:\n      diags.append(getAMExpiredDiagnostics(event));\n      break;\n    default:\n      break;\n    }\n    AggregateAppResourceUsage resUsage \u003d\n        this.attemptMetrics.getAggregateAppResourceUsage();\n    RMStateStore rmStore \u003d rmContext.getStateStore();\n    setFinishTime(System.currentTimeMillis());\n\n    ApplicationAttemptStateData attemptState \u003d ApplicationAttemptStateData\n        .newInstance(applicationAttemptId, getMasterContainer(),\n            rmStore.getCredentialsFromAppAttempt(this), startTime,\n            stateToBeStored, finalTrackingUrl, diags.toString(), finalStatus, exitStatus,\n            getFinishTime(), resUsage.getResourceUsageSecondsMap(),\n            this.attemptMetrics.getPreemptedResourceSecondsMap(),\n            this.attemptMetrics.getTotalAllocatedContainers());\n    LOG.info(\"Updating application attempt \" + applicationAttemptId\n        + \" with final state: \" + targetedFinalState + \", and exit status: \"\n        + exitStatus);\n    rmStore.updateApplicationAttemptState(attemptState);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java",
      "extendedDetails": {}
    },
    "15098df744deb045c0a33b095d45728d5b2af454": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"YARN-8132. Final Status of applications shown as UNDEFINED in ATS app queries. Contributed by Prabhu Joseph.\"\n\nThis reverts commit a63c358b78ad1d4765d7f0b2d595c49b693efb3f.\n",
      "commitDate": "04/03/19 3:27 AM",
      "commitName": "15098df744deb045c0a33b095d45728d5b2af454",
      "commitAuthor": "bibinchundatt",
      "commitDateOld": "20/02/19 11:59 PM",
      "commitNameOld": "a63c358b78ad1d4765d7f0b2d595c49b693efb3f",
      "commitAuthorOld": "bibinchundatt",
      "daysBetweenCommits": 11.14,
      "commitsBetweenForRepo": 105,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,75 +1,72 @@\n   private void rememberTargetTransitionsAndStoreState(RMAppAttemptEvent event,\n       Object transitionToDo, RMAppAttemptState targetFinalState,\n       RMAppAttemptState stateToBeStored) {\n \n     rememberTargetTransitions(event, transitionToDo, targetFinalState);\n     stateBeforeFinalSaving \u003d getState();\n \n     // As of today, finalState, diagnostics, final-tracking-url and\n     // finalAppStatus are the only things that we store into the StateStore\n     // AFTER the initial saving on app-attempt-start\n     // These fields can be visible from outside only after they are saved in\n     // StateStore\n     BoundedAppender diags \u003d new BoundedAppender(diagnostics.getLimit());\n \n     // don\u0027t leave the tracking URL pointing to a non-existent AM\n     if (conf.getBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED,\n             YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\n       setTrackingUrlToAHSPage(stateToBeStored);\n     } else {\n       setTrackingUrlToRMAppPage(stateToBeStored);\n     }\n     String finalTrackingUrl \u003d getOriginalTrackingUrl();\n-    FinalApplicationStatus status \u003d null;\n+    FinalApplicationStatus finalStatus \u003d null;\n     int exitStatus \u003d ContainerExitStatus.INVALID;\n     switch (event.getType()) {\n     case LAUNCH_FAILED:\n       diags.append(event.getDiagnosticMsg());\n       break;\n     case REGISTERED:\n       diags.append(getUnexpectedAMRegisteredDiagnostics());\n       break;\n     case UNREGISTERED:\n       RMAppAttemptUnregistrationEvent unregisterEvent \u003d\n           (RMAppAttemptUnregistrationEvent) event;\n       diags.append(unregisterEvent.getDiagnosticMsg());\n       // reset finalTrackingUrl to url sent by am\n       finalTrackingUrl \u003d sanitizeTrackingUrl(unregisterEvent.getFinalTrackingUrl());\n-      status \u003d unregisterEvent.getFinalApplicationStatus();\n+      finalStatus \u003d unregisterEvent.getFinalApplicationStatus();\n       break;\n     case CONTAINER_FINISHED:\n       RMAppAttemptContainerFinishedEvent finishEvent \u003d\n           (RMAppAttemptContainerFinishedEvent) event;\n       diags.append(getAMContainerCrashedDiagnostics(finishEvent));\n       exitStatus \u003d finishEvent.getContainerStatus().getExitStatus();\n       break;\n     case KILL:\n-      status \u003d FinalApplicationStatus.KILLED;\n       break;\n     case FAIL:\n-      status \u003d FinalApplicationStatus.FAILED;\n       diags.append(event.getDiagnosticMsg());\n       break;\n     case EXPIRE:\n       diags.append(getAMExpiredDiagnostics(event));\n       break;\n     default:\n       break;\n     }\n     AggregateAppResourceUsage resUsage \u003d\n         this.attemptMetrics.getAggregateAppResourceUsage();\n     RMStateStore rmStore \u003d rmContext.getStateStore();\n     setFinishTime(System.currentTimeMillis());\n \n     ApplicationAttemptStateData attemptState \u003d ApplicationAttemptStateData\n         .newInstance(applicationAttemptId, getMasterContainer(),\n             rmStore.getCredentialsFromAppAttempt(this), startTime,\n-            stateToBeStored, finalTrackingUrl, diags.toString(), status,\n-            exitStatus, getFinishTime(), resUsage.getResourceUsageSecondsMap(),\n+            stateToBeStored, finalTrackingUrl, diags.toString(), finalStatus, exitStatus,\n+            getFinishTime(), resUsage.getResourceUsageSecondsMap(),\n             this.attemptMetrics.getPreemptedResourceSecondsMap());\n     LOG.info(\"Updating application attempt \" + applicationAttemptId\n         + \" with final state: \" + targetedFinalState + \", and exit status: \"\n         + exitStatus);\n     rmStore.updateApplicationAttemptState(attemptState);\n-    finalStatus \u003d status;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void rememberTargetTransitionsAndStoreState(RMAppAttemptEvent event,\n      Object transitionToDo, RMAppAttemptState targetFinalState,\n      RMAppAttemptState stateToBeStored) {\n\n    rememberTargetTransitions(event, transitionToDo, targetFinalState);\n    stateBeforeFinalSaving \u003d getState();\n\n    // As of today, finalState, diagnostics, final-tracking-url and\n    // finalAppStatus are the only things that we store into the StateStore\n    // AFTER the initial saving on app-attempt-start\n    // These fields can be visible from outside only after they are saved in\n    // StateStore\n    BoundedAppender diags \u003d new BoundedAppender(diagnostics.getLimit());\n\n    // don\u0027t leave the tracking URL pointing to a non-existent AM\n    if (conf.getBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED,\n            YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\n      setTrackingUrlToAHSPage(stateToBeStored);\n    } else {\n      setTrackingUrlToRMAppPage(stateToBeStored);\n    }\n    String finalTrackingUrl \u003d getOriginalTrackingUrl();\n    FinalApplicationStatus finalStatus \u003d null;\n    int exitStatus \u003d ContainerExitStatus.INVALID;\n    switch (event.getType()) {\n    case LAUNCH_FAILED:\n      diags.append(event.getDiagnosticMsg());\n      break;\n    case REGISTERED:\n      diags.append(getUnexpectedAMRegisteredDiagnostics());\n      break;\n    case UNREGISTERED:\n      RMAppAttemptUnregistrationEvent unregisterEvent \u003d\n          (RMAppAttemptUnregistrationEvent) event;\n      diags.append(unregisterEvent.getDiagnosticMsg());\n      // reset finalTrackingUrl to url sent by am\n      finalTrackingUrl \u003d sanitizeTrackingUrl(unregisterEvent.getFinalTrackingUrl());\n      finalStatus \u003d unregisterEvent.getFinalApplicationStatus();\n      break;\n    case CONTAINER_FINISHED:\n      RMAppAttemptContainerFinishedEvent finishEvent \u003d\n          (RMAppAttemptContainerFinishedEvent) event;\n      diags.append(getAMContainerCrashedDiagnostics(finishEvent));\n      exitStatus \u003d finishEvent.getContainerStatus().getExitStatus();\n      break;\n    case KILL:\n      break;\n    case FAIL:\n      diags.append(event.getDiagnosticMsg());\n      break;\n    case EXPIRE:\n      diags.append(getAMExpiredDiagnostics(event));\n      break;\n    default:\n      break;\n    }\n    AggregateAppResourceUsage resUsage \u003d\n        this.attemptMetrics.getAggregateAppResourceUsage();\n    RMStateStore rmStore \u003d rmContext.getStateStore();\n    setFinishTime(System.currentTimeMillis());\n\n    ApplicationAttemptStateData attemptState \u003d ApplicationAttemptStateData\n        .newInstance(applicationAttemptId, getMasterContainer(),\n            rmStore.getCredentialsFromAppAttempt(this), startTime,\n            stateToBeStored, finalTrackingUrl, diags.toString(), finalStatus, exitStatus,\n            getFinishTime(), resUsage.getResourceUsageSecondsMap(),\n            this.attemptMetrics.getPreemptedResourceSecondsMap());\n    LOG.info(\"Updating application attempt \" + applicationAttemptId\n        + \" with final state: \" + targetedFinalState + \", and exit status: \"\n        + exitStatus);\n    rmStore.updateApplicationAttemptState(attemptState);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java",
      "extendedDetails": {}
    },
    "a63c358b78ad1d4765d7f0b2d595c49b693efb3f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8132. Final Status of applications shown as UNDEFINED in ATS app queries. Contributed by Prabhu Joseph.\n",
      "commitDate": "20/02/19 11:59 PM",
      "commitName": "a63c358b78ad1d4765d7f0b2d595c49b693efb3f",
      "commitAuthor": "bibinchundatt",
      "commitDateOld": "17/01/19 2:20 PM",
      "commitNameOld": "6d7eedfd28cc1712690db2f6ca8a281b0901ee28",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 34.4,
      "commitsBetweenForRepo": 235,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,72 +1,75 @@\n   private void rememberTargetTransitionsAndStoreState(RMAppAttemptEvent event,\n       Object transitionToDo, RMAppAttemptState targetFinalState,\n       RMAppAttemptState stateToBeStored) {\n \n     rememberTargetTransitions(event, transitionToDo, targetFinalState);\n     stateBeforeFinalSaving \u003d getState();\n \n     // As of today, finalState, diagnostics, final-tracking-url and\n     // finalAppStatus are the only things that we store into the StateStore\n     // AFTER the initial saving on app-attempt-start\n     // These fields can be visible from outside only after they are saved in\n     // StateStore\n     BoundedAppender diags \u003d new BoundedAppender(diagnostics.getLimit());\n \n     // don\u0027t leave the tracking URL pointing to a non-existent AM\n     if (conf.getBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED,\n             YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\n       setTrackingUrlToAHSPage(stateToBeStored);\n     } else {\n       setTrackingUrlToRMAppPage(stateToBeStored);\n     }\n     String finalTrackingUrl \u003d getOriginalTrackingUrl();\n-    FinalApplicationStatus finalStatus \u003d null;\n+    FinalApplicationStatus status \u003d null;\n     int exitStatus \u003d ContainerExitStatus.INVALID;\n     switch (event.getType()) {\n     case LAUNCH_FAILED:\n       diags.append(event.getDiagnosticMsg());\n       break;\n     case REGISTERED:\n       diags.append(getUnexpectedAMRegisteredDiagnostics());\n       break;\n     case UNREGISTERED:\n       RMAppAttemptUnregistrationEvent unregisterEvent \u003d\n           (RMAppAttemptUnregistrationEvent) event;\n       diags.append(unregisterEvent.getDiagnosticMsg());\n       // reset finalTrackingUrl to url sent by am\n       finalTrackingUrl \u003d sanitizeTrackingUrl(unregisterEvent.getFinalTrackingUrl());\n-      finalStatus \u003d unregisterEvent.getFinalApplicationStatus();\n+      status \u003d unregisterEvent.getFinalApplicationStatus();\n       break;\n     case CONTAINER_FINISHED:\n       RMAppAttemptContainerFinishedEvent finishEvent \u003d\n           (RMAppAttemptContainerFinishedEvent) event;\n       diags.append(getAMContainerCrashedDiagnostics(finishEvent));\n       exitStatus \u003d finishEvent.getContainerStatus().getExitStatus();\n       break;\n     case KILL:\n+      status \u003d FinalApplicationStatus.KILLED;\n       break;\n     case FAIL:\n+      status \u003d FinalApplicationStatus.FAILED;\n       diags.append(event.getDiagnosticMsg());\n       break;\n     case EXPIRE:\n       diags.append(getAMExpiredDiagnostics(event));\n       break;\n     default:\n       break;\n     }\n     AggregateAppResourceUsage resUsage \u003d\n         this.attemptMetrics.getAggregateAppResourceUsage();\n     RMStateStore rmStore \u003d rmContext.getStateStore();\n     setFinishTime(System.currentTimeMillis());\n \n     ApplicationAttemptStateData attemptState \u003d ApplicationAttemptStateData\n         .newInstance(applicationAttemptId, getMasterContainer(),\n             rmStore.getCredentialsFromAppAttempt(this), startTime,\n-            stateToBeStored, finalTrackingUrl, diags.toString(), finalStatus, exitStatus,\n-            getFinishTime(), resUsage.getResourceUsageSecondsMap(),\n+            stateToBeStored, finalTrackingUrl, diags.toString(), status,\n+            exitStatus, getFinishTime(), resUsage.getResourceUsageSecondsMap(),\n             this.attemptMetrics.getPreemptedResourceSecondsMap());\n     LOG.info(\"Updating application attempt \" + applicationAttemptId\n         + \" with final state: \" + targetedFinalState + \", and exit status: \"\n         + exitStatus);\n     rmStore.updateApplicationAttemptState(attemptState);\n+    finalStatus \u003d status;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void rememberTargetTransitionsAndStoreState(RMAppAttemptEvent event,\n      Object transitionToDo, RMAppAttemptState targetFinalState,\n      RMAppAttemptState stateToBeStored) {\n\n    rememberTargetTransitions(event, transitionToDo, targetFinalState);\n    stateBeforeFinalSaving \u003d getState();\n\n    // As of today, finalState, diagnostics, final-tracking-url and\n    // finalAppStatus are the only things that we store into the StateStore\n    // AFTER the initial saving on app-attempt-start\n    // These fields can be visible from outside only after they are saved in\n    // StateStore\n    BoundedAppender diags \u003d new BoundedAppender(diagnostics.getLimit());\n\n    // don\u0027t leave the tracking URL pointing to a non-existent AM\n    if (conf.getBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED,\n            YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\n      setTrackingUrlToAHSPage(stateToBeStored);\n    } else {\n      setTrackingUrlToRMAppPage(stateToBeStored);\n    }\n    String finalTrackingUrl \u003d getOriginalTrackingUrl();\n    FinalApplicationStatus status \u003d null;\n    int exitStatus \u003d ContainerExitStatus.INVALID;\n    switch (event.getType()) {\n    case LAUNCH_FAILED:\n      diags.append(event.getDiagnosticMsg());\n      break;\n    case REGISTERED:\n      diags.append(getUnexpectedAMRegisteredDiagnostics());\n      break;\n    case UNREGISTERED:\n      RMAppAttemptUnregistrationEvent unregisterEvent \u003d\n          (RMAppAttemptUnregistrationEvent) event;\n      diags.append(unregisterEvent.getDiagnosticMsg());\n      // reset finalTrackingUrl to url sent by am\n      finalTrackingUrl \u003d sanitizeTrackingUrl(unregisterEvent.getFinalTrackingUrl());\n      status \u003d unregisterEvent.getFinalApplicationStatus();\n      break;\n    case CONTAINER_FINISHED:\n      RMAppAttemptContainerFinishedEvent finishEvent \u003d\n          (RMAppAttemptContainerFinishedEvent) event;\n      diags.append(getAMContainerCrashedDiagnostics(finishEvent));\n      exitStatus \u003d finishEvent.getContainerStatus().getExitStatus();\n      break;\n    case KILL:\n      status \u003d FinalApplicationStatus.KILLED;\n      break;\n    case FAIL:\n      status \u003d FinalApplicationStatus.FAILED;\n      diags.append(event.getDiagnosticMsg());\n      break;\n    case EXPIRE:\n      diags.append(getAMExpiredDiagnostics(event));\n      break;\n    default:\n      break;\n    }\n    AggregateAppResourceUsage resUsage \u003d\n        this.attemptMetrics.getAggregateAppResourceUsage();\n    RMStateStore rmStore \u003d rmContext.getStateStore();\n    setFinishTime(System.currentTimeMillis());\n\n    ApplicationAttemptStateData attemptState \u003d ApplicationAttemptStateData\n        .newInstance(applicationAttemptId, getMasterContainer(),\n            rmStore.getCredentialsFromAppAttempt(this), startTime,\n            stateToBeStored, finalTrackingUrl, diags.toString(), status,\n            exitStatus, getFinishTime(), resUsage.getResourceUsageSecondsMap(),\n            this.attemptMetrics.getPreemptedResourceSecondsMap());\n    LOG.info(\"Updating application attempt \" + applicationAttemptId\n        + \" with final state: \" + targetedFinalState + \", and exit status: \"\n        + exitStatus);\n    rmStore.updateApplicationAttemptState(attemptState);\n    finalStatus \u003d status;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java",
      "extendedDetails": {}
    },
    "dae65f3bef8ffa34d02a37041f1dfdfeeee91845": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6232. Update resource usage and preempted resource calculations to take into account all resource types. Contributed by Varun Vasudev.\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "dae65f3bef8ffa34d02a37041f1dfdfeeee91845",
      "commitAuthor": "Sunil G",
      "commitDateOld": "30/08/17 5:26 PM",
      "commitNameOld": "cc23514abacb4d6589e731cc5ce5d8e6f19c955d",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 12.66,
      "commitsBetweenForRepo": 100,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,76 +1,72 @@\n   private void rememberTargetTransitionsAndStoreState(RMAppAttemptEvent event,\n       Object transitionToDo, RMAppAttemptState targetFinalState,\n       RMAppAttemptState stateToBeStored) {\n \n     rememberTargetTransitions(event, transitionToDo, targetFinalState);\n     stateBeforeFinalSaving \u003d getState();\n \n     // As of today, finalState, diagnostics, final-tracking-url and\n     // finalAppStatus are the only things that we store into the StateStore\n     // AFTER the initial saving on app-attempt-start\n     // These fields can be visible from outside only after they are saved in\n     // StateStore\n     BoundedAppender diags \u003d new BoundedAppender(diagnostics.getLimit());\n \n     // don\u0027t leave the tracking URL pointing to a non-existent AM\n     if (conf.getBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED,\n             YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\n       setTrackingUrlToAHSPage(stateToBeStored);\n     } else {\n       setTrackingUrlToRMAppPage(stateToBeStored);\n     }\n     String finalTrackingUrl \u003d getOriginalTrackingUrl();\n     FinalApplicationStatus finalStatus \u003d null;\n     int exitStatus \u003d ContainerExitStatus.INVALID;\n     switch (event.getType()) {\n     case LAUNCH_FAILED:\n       diags.append(event.getDiagnosticMsg());\n       break;\n     case REGISTERED:\n       diags.append(getUnexpectedAMRegisteredDiagnostics());\n       break;\n     case UNREGISTERED:\n       RMAppAttemptUnregistrationEvent unregisterEvent \u003d\n           (RMAppAttemptUnregistrationEvent) event;\n       diags.append(unregisterEvent.getDiagnosticMsg());\n       // reset finalTrackingUrl to url sent by am\n       finalTrackingUrl \u003d sanitizeTrackingUrl(unregisterEvent.getFinalTrackingUrl());\n       finalStatus \u003d unregisterEvent.getFinalApplicationStatus();\n       break;\n     case CONTAINER_FINISHED:\n       RMAppAttemptContainerFinishedEvent finishEvent \u003d\n           (RMAppAttemptContainerFinishedEvent) event;\n       diags.append(getAMContainerCrashedDiagnostics(finishEvent));\n       exitStatus \u003d finishEvent.getContainerStatus().getExitStatus();\n       break;\n     case KILL:\n       break;\n     case FAIL:\n       diags.append(event.getDiagnosticMsg());\n       break;\n     case EXPIRE:\n       diags.append(getAMExpiredDiagnostics(event));\n       break;\n     default:\n       break;\n     }\n     AggregateAppResourceUsage resUsage \u003d\n         this.attemptMetrics.getAggregateAppResourceUsage();\n     RMStateStore rmStore \u003d rmContext.getStateStore();\n     setFinishTime(System.currentTimeMillis());\n \n-    ApplicationAttemptStateData attemptState \u003d\n-        ApplicationAttemptStateData.newInstance(\n-            applicationAttemptId,  getMasterContainer(),\n-            rmStore.getCredentialsFromAppAttempt(this),\n-            startTime, stateToBeStored, finalTrackingUrl, diags.toString(),\n-            finalStatus, exitStatus,\n-          getFinishTime(), resUsage.getMemorySeconds(),\n-          resUsage.getVcoreSeconds(),\n-          this.attemptMetrics.getPreemptedMemory(),\n-          this.attemptMetrics.getPreemptedVcore());\n+    ApplicationAttemptStateData attemptState \u003d ApplicationAttemptStateData\n+        .newInstance(applicationAttemptId, getMasterContainer(),\n+            rmStore.getCredentialsFromAppAttempt(this), startTime,\n+            stateToBeStored, finalTrackingUrl, diags.toString(), finalStatus, exitStatus,\n+            getFinishTime(), resUsage.getResourceUsageSecondsMap(),\n+            this.attemptMetrics.getPreemptedResourceSecondsMap());\n     LOG.info(\"Updating application attempt \" + applicationAttemptId\n         + \" with final state: \" + targetedFinalState + \", and exit status: \"\n         + exitStatus);\n     rmStore.updateApplicationAttemptState(attemptState);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void rememberTargetTransitionsAndStoreState(RMAppAttemptEvent event,\n      Object transitionToDo, RMAppAttemptState targetFinalState,\n      RMAppAttemptState stateToBeStored) {\n\n    rememberTargetTransitions(event, transitionToDo, targetFinalState);\n    stateBeforeFinalSaving \u003d getState();\n\n    // As of today, finalState, diagnostics, final-tracking-url and\n    // finalAppStatus are the only things that we store into the StateStore\n    // AFTER the initial saving on app-attempt-start\n    // These fields can be visible from outside only after they are saved in\n    // StateStore\n    BoundedAppender diags \u003d new BoundedAppender(diagnostics.getLimit());\n\n    // don\u0027t leave the tracking URL pointing to a non-existent AM\n    if (conf.getBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED,\n            YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\n      setTrackingUrlToAHSPage(stateToBeStored);\n    } else {\n      setTrackingUrlToRMAppPage(stateToBeStored);\n    }\n    String finalTrackingUrl \u003d getOriginalTrackingUrl();\n    FinalApplicationStatus finalStatus \u003d null;\n    int exitStatus \u003d ContainerExitStatus.INVALID;\n    switch (event.getType()) {\n    case LAUNCH_FAILED:\n      diags.append(event.getDiagnosticMsg());\n      break;\n    case REGISTERED:\n      diags.append(getUnexpectedAMRegisteredDiagnostics());\n      break;\n    case UNREGISTERED:\n      RMAppAttemptUnregistrationEvent unregisterEvent \u003d\n          (RMAppAttemptUnregistrationEvent) event;\n      diags.append(unregisterEvent.getDiagnosticMsg());\n      // reset finalTrackingUrl to url sent by am\n      finalTrackingUrl \u003d sanitizeTrackingUrl(unregisterEvent.getFinalTrackingUrl());\n      finalStatus \u003d unregisterEvent.getFinalApplicationStatus();\n      break;\n    case CONTAINER_FINISHED:\n      RMAppAttemptContainerFinishedEvent finishEvent \u003d\n          (RMAppAttemptContainerFinishedEvent) event;\n      diags.append(getAMContainerCrashedDiagnostics(finishEvent));\n      exitStatus \u003d finishEvent.getContainerStatus().getExitStatus();\n      break;\n    case KILL:\n      break;\n    case FAIL:\n      diags.append(event.getDiagnosticMsg());\n      break;\n    case EXPIRE:\n      diags.append(getAMExpiredDiagnostics(event));\n      break;\n    default:\n      break;\n    }\n    AggregateAppResourceUsage resUsage \u003d\n        this.attemptMetrics.getAggregateAppResourceUsage();\n    RMStateStore rmStore \u003d rmContext.getStateStore();\n    setFinishTime(System.currentTimeMillis());\n\n    ApplicationAttemptStateData attemptState \u003d ApplicationAttemptStateData\n        .newInstance(applicationAttemptId, getMasterContainer(),\n            rmStore.getCredentialsFromAppAttempt(this), startTime,\n            stateToBeStored, finalTrackingUrl, diags.toString(), finalStatus, exitStatus,\n            getFinishTime(), resUsage.getResourceUsageSecondsMap(),\n            this.attemptMetrics.getPreemptedResourceSecondsMap());\n    LOG.info(\"Updating application attempt \" + applicationAttemptId\n        + \" with final state: \" + targetedFinalState + \", and exit status: \"\n        + exitStatus);\n    rmStore.updateApplicationAttemptState(attemptState);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java",
      "extendedDetails": {}
    },
    "cc23514abacb4d6589e731cc5ce5d8e6f19c955d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7115. Move BoundedAppender to org.hadoop.yarn.util pacakge\n(Contributed by Jian He via Daniel Templeton)\n",
      "commitDate": "30/08/17 5:26 PM",
      "commitName": "cc23514abacb4d6589e731cc5ce5d8e6f19c955d",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "22/08/17 10:56 AM",
      "commitNameOld": "3efcd51c3b3eb667d83e08b500bb7a7ea559fabe",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 8.27,
      "commitsBetweenForRepo": 108,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,76 +1,76 @@\n   private void rememberTargetTransitionsAndStoreState(RMAppAttemptEvent event,\n       Object transitionToDo, RMAppAttemptState targetFinalState,\n       RMAppAttemptState stateToBeStored) {\n \n     rememberTargetTransitions(event, transitionToDo, targetFinalState);\n     stateBeforeFinalSaving \u003d getState();\n \n     // As of today, finalState, diagnostics, final-tracking-url and\n     // finalAppStatus are the only things that we store into the StateStore\n     // AFTER the initial saving on app-attempt-start\n     // These fields can be visible from outside only after they are saved in\n     // StateStore\n-    BoundedAppender diags \u003d new BoundedAppender(diagnostics.limit);\n+    BoundedAppender diags \u003d new BoundedAppender(diagnostics.getLimit());\n \n     // don\u0027t leave the tracking URL pointing to a non-existent AM\n     if (conf.getBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED,\n             YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\n       setTrackingUrlToAHSPage(stateToBeStored);\n     } else {\n       setTrackingUrlToRMAppPage(stateToBeStored);\n     }\n     String finalTrackingUrl \u003d getOriginalTrackingUrl();\n     FinalApplicationStatus finalStatus \u003d null;\n     int exitStatus \u003d ContainerExitStatus.INVALID;\n     switch (event.getType()) {\n     case LAUNCH_FAILED:\n       diags.append(event.getDiagnosticMsg());\n       break;\n     case REGISTERED:\n       diags.append(getUnexpectedAMRegisteredDiagnostics());\n       break;\n     case UNREGISTERED:\n       RMAppAttemptUnregistrationEvent unregisterEvent \u003d\n           (RMAppAttemptUnregistrationEvent) event;\n       diags.append(unregisterEvent.getDiagnosticMsg());\n       // reset finalTrackingUrl to url sent by am\n       finalTrackingUrl \u003d sanitizeTrackingUrl(unregisterEvent.getFinalTrackingUrl());\n       finalStatus \u003d unregisterEvent.getFinalApplicationStatus();\n       break;\n     case CONTAINER_FINISHED:\n       RMAppAttemptContainerFinishedEvent finishEvent \u003d\n           (RMAppAttemptContainerFinishedEvent) event;\n       diags.append(getAMContainerCrashedDiagnostics(finishEvent));\n       exitStatus \u003d finishEvent.getContainerStatus().getExitStatus();\n       break;\n     case KILL:\n       break;\n     case FAIL:\n       diags.append(event.getDiagnosticMsg());\n       break;\n     case EXPIRE:\n       diags.append(getAMExpiredDiagnostics(event));\n       break;\n     default:\n       break;\n     }\n     AggregateAppResourceUsage resUsage \u003d\n         this.attemptMetrics.getAggregateAppResourceUsage();\n     RMStateStore rmStore \u003d rmContext.getStateStore();\n     setFinishTime(System.currentTimeMillis());\n \n     ApplicationAttemptStateData attemptState \u003d\n         ApplicationAttemptStateData.newInstance(\n             applicationAttemptId,  getMasterContainer(),\n             rmStore.getCredentialsFromAppAttempt(this),\n             startTime, stateToBeStored, finalTrackingUrl, diags.toString(),\n             finalStatus, exitStatus,\n           getFinishTime(), resUsage.getMemorySeconds(),\n           resUsage.getVcoreSeconds(),\n           this.attemptMetrics.getPreemptedMemory(),\n           this.attemptMetrics.getPreemptedVcore());\n     LOG.info(\"Updating application attempt \" + applicationAttemptId\n         + \" with final state: \" + targetedFinalState + \", and exit status: \"\n         + exitStatus);\n     rmStore.updateApplicationAttemptState(attemptState);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void rememberTargetTransitionsAndStoreState(RMAppAttemptEvent event,\n      Object transitionToDo, RMAppAttemptState targetFinalState,\n      RMAppAttemptState stateToBeStored) {\n\n    rememberTargetTransitions(event, transitionToDo, targetFinalState);\n    stateBeforeFinalSaving \u003d getState();\n\n    // As of today, finalState, diagnostics, final-tracking-url and\n    // finalAppStatus are the only things that we store into the StateStore\n    // AFTER the initial saving on app-attempt-start\n    // These fields can be visible from outside only after they are saved in\n    // StateStore\n    BoundedAppender diags \u003d new BoundedAppender(diagnostics.getLimit());\n\n    // don\u0027t leave the tracking URL pointing to a non-existent AM\n    if (conf.getBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED,\n            YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\n      setTrackingUrlToAHSPage(stateToBeStored);\n    } else {\n      setTrackingUrlToRMAppPage(stateToBeStored);\n    }\n    String finalTrackingUrl \u003d getOriginalTrackingUrl();\n    FinalApplicationStatus finalStatus \u003d null;\n    int exitStatus \u003d ContainerExitStatus.INVALID;\n    switch (event.getType()) {\n    case LAUNCH_FAILED:\n      diags.append(event.getDiagnosticMsg());\n      break;\n    case REGISTERED:\n      diags.append(getUnexpectedAMRegisteredDiagnostics());\n      break;\n    case UNREGISTERED:\n      RMAppAttemptUnregistrationEvent unregisterEvent \u003d\n          (RMAppAttemptUnregistrationEvent) event;\n      diags.append(unregisterEvent.getDiagnosticMsg());\n      // reset finalTrackingUrl to url sent by am\n      finalTrackingUrl \u003d sanitizeTrackingUrl(unregisterEvent.getFinalTrackingUrl());\n      finalStatus \u003d unregisterEvent.getFinalApplicationStatus();\n      break;\n    case CONTAINER_FINISHED:\n      RMAppAttemptContainerFinishedEvent finishEvent \u003d\n          (RMAppAttemptContainerFinishedEvent) event;\n      diags.append(getAMContainerCrashedDiagnostics(finishEvent));\n      exitStatus \u003d finishEvent.getContainerStatus().getExitStatus();\n      break;\n    case KILL:\n      break;\n    case FAIL:\n      diags.append(event.getDiagnosticMsg());\n      break;\n    case EXPIRE:\n      diags.append(getAMExpiredDiagnostics(event));\n      break;\n    default:\n      break;\n    }\n    AggregateAppResourceUsage resUsage \u003d\n        this.attemptMetrics.getAggregateAppResourceUsage();\n    RMStateStore rmStore \u003d rmContext.getStateStore();\n    setFinishTime(System.currentTimeMillis());\n\n    ApplicationAttemptStateData attemptState \u003d\n        ApplicationAttemptStateData.newInstance(\n            applicationAttemptId,  getMasterContainer(),\n            rmStore.getCredentialsFromAppAttempt(this),\n            startTime, stateToBeStored, finalTrackingUrl, diags.toString(),\n            finalStatus, exitStatus,\n          getFinishTime(), resUsage.getMemorySeconds(),\n          resUsage.getVcoreSeconds(),\n          this.attemptMetrics.getPreemptedMemory(),\n          this.attemptMetrics.getPreemptedVcore());\n    LOG.info(\"Updating application attempt \" + applicationAttemptId\n        + \" with final state: \" + targetedFinalState + \", and exit status: \"\n        + exitStatus);\n    rmStore.updateApplicationAttemptState(attemptState);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java",
      "extendedDetails": {}
    },
    "65364defb4a633ca20b39ebc38cd9c0db63a5835": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6967. Limit application attempt\u0027s diagnostic message size thoroughly\n(Contributed by Chengbing Liu via Daniel Templeton)\n",
      "commitDate": "11/08/17 2:28 PM",
      "commitName": "65364defb4a633ca20b39ebc38cd9c0db63a5835",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "14/07/17 12:56 PM",
      "commitNameOld": "a5ae5ac50e97cf829c41dcf01655cd9bd4d36a00",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 28.06,
      "commitsBetweenForRepo": 222,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,76 +1,76 @@\n   private void rememberTargetTransitionsAndStoreState(RMAppAttemptEvent event,\n       Object transitionToDo, RMAppAttemptState targetFinalState,\n       RMAppAttemptState stateToBeStored) {\n \n     rememberTargetTransitions(event, transitionToDo, targetFinalState);\n     stateBeforeFinalSaving \u003d getState();\n \n     // As of today, finalState, diagnostics, final-tracking-url and\n     // finalAppStatus are the only things that we store into the StateStore\n     // AFTER the initial saving on app-attempt-start\n     // These fields can be visible from outside only after they are saved in\n     // StateStore\n-    String diags \u003d null;\n+    BoundedAppender diags \u003d new BoundedAppender(diagnostics.limit);\n \n     // don\u0027t leave the tracking URL pointing to a non-existent AM\n     if (conf.getBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED,\n             YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\n       setTrackingUrlToAHSPage(stateToBeStored);\n     } else {\n       setTrackingUrlToRMAppPage(stateToBeStored);\n     }\n     String finalTrackingUrl \u003d getOriginalTrackingUrl();\n     FinalApplicationStatus finalStatus \u003d null;\n     int exitStatus \u003d ContainerExitStatus.INVALID;\n     switch (event.getType()) {\n     case LAUNCH_FAILED:\n-      diags \u003d event.getDiagnosticMsg();\n+      diags.append(event.getDiagnosticMsg());\n       break;\n     case REGISTERED:\n-      diags \u003d getUnexpectedAMRegisteredDiagnostics();\n+      diags.append(getUnexpectedAMRegisteredDiagnostics());\n       break;\n     case UNREGISTERED:\n       RMAppAttemptUnregistrationEvent unregisterEvent \u003d\n           (RMAppAttemptUnregistrationEvent) event;\n-      diags \u003d unregisterEvent.getDiagnosticMsg();\n+      diags.append(unregisterEvent.getDiagnosticMsg());\n       // reset finalTrackingUrl to url sent by am\n       finalTrackingUrl \u003d sanitizeTrackingUrl(unregisterEvent.getFinalTrackingUrl());\n       finalStatus \u003d unregisterEvent.getFinalApplicationStatus();\n       break;\n     case CONTAINER_FINISHED:\n       RMAppAttemptContainerFinishedEvent finishEvent \u003d\n           (RMAppAttemptContainerFinishedEvent) event;\n-      diags \u003d getAMContainerCrashedDiagnostics(finishEvent);\n+      diags.append(getAMContainerCrashedDiagnostics(finishEvent));\n       exitStatus \u003d finishEvent.getContainerStatus().getExitStatus();\n       break;\n     case KILL:\n       break;\n     case FAIL:\n-      diags \u003d event.getDiagnosticMsg();\n+      diags.append(event.getDiagnosticMsg());\n       break;\n     case EXPIRE:\n-      diags \u003d getAMExpiredDiagnostics(event);\n+      diags.append(getAMExpiredDiagnostics(event));\n       break;\n     default:\n       break;\n     }\n     AggregateAppResourceUsage resUsage \u003d\n         this.attemptMetrics.getAggregateAppResourceUsage();\n     RMStateStore rmStore \u003d rmContext.getStateStore();\n     setFinishTime(System.currentTimeMillis());\n \n     ApplicationAttemptStateData attemptState \u003d\n         ApplicationAttemptStateData.newInstance(\n             applicationAttemptId,  getMasterContainer(),\n             rmStore.getCredentialsFromAppAttempt(this),\n-            startTime, stateToBeStored, finalTrackingUrl, diags,\n+            startTime, stateToBeStored, finalTrackingUrl, diags.toString(),\n             finalStatus, exitStatus,\n           getFinishTime(), resUsage.getMemorySeconds(),\n           resUsage.getVcoreSeconds(),\n           this.attemptMetrics.getPreemptedMemory(),\n           this.attemptMetrics.getPreemptedVcore());\n     LOG.info(\"Updating application attempt \" + applicationAttemptId\n         + \" with final state: \" + targetedFinalState + \", and exit status: \"\n         + exitStatus);\n     rmStore.updateApplicationAttemptState(attemptState);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void rememberTargetTransitionsAndStoreState(RMAppAttemptEvent event,\n      Object transitionToDo, RMAppAttemptState targetFinalState,\n      RMAppAttemptState stateToBeStored) {\n\n    rememberTargetTransitions(event, transitionToDo, targetFinalState);\n    stateBeforeFinalSaving \u003d getState();\n\n    // As of today, finalState, diagnostics, final-tracking-url and\n    // finalAppStatus are the only things that we store into the StateStore\n    // AFTER the initial saving on app-attempt-start\n    // These fields can be visible from outside only after they are saved in\n    // StateStore\n    BoundedAppender diags \u003d new BoundedAppender(diagnostics.limit);\n\n    // don\u0027t leave the tracking URL pointing to a non-existent AM\n    if (conf.getBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED,\n            YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\n      setTrackingUrlToAHSPage(stateToBeStored);\n    } else {\n      setTrackingUrlToRMAppPage(stateToBeStored);\n    }\n    String finalTrackingUrl \u003d getOriginalTrackingUrl();\n    FinalApplicationStatus finalStatus \u003d null;\n    int exitStatus \u003d ContainerExitStatus.INVALID;\n    switch (event.getType()) {\n    case LAUNCH_FAILED:\n      diags.append(event.getDiagnosticMsg());\n      break;\n    case REGISTERED:\n      diags.append(getUnexpectedAMRegisteredDiagnostics());\n      break;\n    case UNREGISTERED:\n      RMAppAttemptUnregistrationEvent unregisterEvent \u003d\n          (RMAppAttemptUnregistrationEvent) event;\n      diags.append(unregisterEvent.getDiagnosticMsg());\n      // reset finalTrackingUrl to url sent by am\n      finalTrackingUrl \u003d sanitizeTrackingUrl(unregisterEvent.getFinalTrackingUrl());\n      finalStatus \u003d unregisterEvent.getFinalApplicationStatus();\n      break;\n    case CONTAINER_FINISHED:\n      RMAppAttemptContainerFinishedEvent finishEvent \u003d\n          (RMAppAttemptContainerFinishedEvent) event;\n      diags.append(getAMContainerCrashedDiagnostics(finishEvent));\n      exitStatus \u003d finishEvent.getContainerStatus().getExitStatus();\n      break;\n    case KILL:\n      break;\n    case FAIL:\n      diags.append(event.getDiagnosticMsg());\n      break;\n    case EXPIRE:\n      diags.append(getAMExpiredDiagnostics(event));\n      break;\n    default:\n      break;\n    }\n    AggregateAppResourceUsage resUsage \u003d\n        this.attemptMetrics.getAggregateAppResourceUsage();\n    RMStateStore rmStore \u003d rmContext.getStateStore();\n    setFinishTime(System.currentTimeMillis());\n\n    ApplicationAttemptStateData attemptState \u003d\n        ApplicationAttemptStateData.newInstance(\n            applicationAttemptId,  getMasterContainer(),\n            rmStore.getCredentialsFromAppAttempt(this),\n            startTime, stateToBeStored, finalTrackingUrl, diags.toString(),\n            finalStatus, exitStatus,\n          getFinishTime(), resUsage.getMemorySeconds(),\n          resUsage.getVcoreSeconds(),\n          this.attemptMetrics.getPreemptedMemory(),\n          this.attemptMetrics.getPreemptedVcore());\n    LOG.info(\"Updating application attempt \" + applicationAttemptId\n        + \" with final state: \" + targetedFinalState + \", and exit status: \"\n        + exitStatus);\n    rmStore.updateApplicationAttemptState(attemptState);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java",
      "extendedDetails": {}
    },
    "93eeb13164707d0e3556c2bf737bd2ee09a335c6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4218. Metric for resource*time that was preempted. Contributed by Chang Li.\n",
      "commitDate": "10/11/16 2:35 PM",
      "commitName": "93eeb13164707d0e3556c2bf737bd2ee09a335c6",
      "commitAuthor": "Eric Payne",
      "commitDateOld": "10/08/16 11:04 AM",
      "commitNameOld": "e0b570dffb47ede298e0378a63350b699128d96e",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 92.19,
      "commitsBetweenForRepo": 700,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,74 +1,76 @@\n   private void rememberTargetTransitionsAndStoreState(RMAppAttemptEvent event,\n       Object transitionToDo, RMAppAttemptState targetFinalState,\n       RMAppAttemptState stateToBeStored) {\n \n     rememberTargetTransitions(event, transitionToDo, targetFinalState);\n     stateBeforeFinalSaving \u003d getState();\n \n     // As of today, finalState, diagnostics, final-tracking-url and\n     // finalAppStatus are the only things that we store into the StateStore\n     // AFTER the initial saving on app-attempt-start\n     // These fields can be visible from outside only after they are saved in\n     // StateStore\n     String diags \u003d null;\n \n     // don\u0027t leave the tracking URL pointing to a non-existent AM\n     if (conf.getBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED,\n             YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\n       setTrackingUrlToAHSPage(stateToBeStored);\n     } else {\n       setTrackingUrlToRMAppPage(stateToBeStored);\n     }\n     String finalTrackingUrl \u003d getOriginalTrackingUrl();\n     FinalApplicationStatus finalStatus \u003d null;\n     int exitStatus \u003d ContainerExitStatus.INVALID;\n     switch (event.getType()) {\n     case LAUNCH_FAILED:\n       diags \u003d event.getDiagnosticMsg();\n       break;\n     case REGISTERED:\n       diags \u003d getUnexpectedAMRegisteredDiagnostics();\n       break;\n     case UNREGISTERED:\n       RMAppAttemptUnregistrationEvent unregisterEvent \u003d\n           (RMAppAttemptUnregistrationEvent) event;\n       diags \u003d unregisterEvent.getDiagnosticMsg();\n       // reset finalTrackingUrl to url sent by am\n       finalTrackingUrl \u003d sanitizeTrackingUrl(unregisterEvent.getFinalTrackingUrl());\n       finalStatus \u003d unregisterEvent.getFinalApplicationStatus();\n       break;\n     case CONTAINER_FINISHED:\n       RMAppAttemptContainerFinishedEvent finishEvent \u003d\n           (RMAppAttemptContainerFinishedEvent) event;\n       diags \u003d getAMContainerCrashedDiagnostics(finishEvent);\n       exitStatus \u003d finishEvent.getContainerStatus().getExitStatus();\n       break;\n     case KILL:\n       break;\n     case FAIL:\n       diags \u003d event.getDiagnosticMsg();\n       break;\n     case EXPIRE:\n       diags \u003d getAMExpiredDiagnostics(event);\n       break;\n     default:\n       break;\n     }\n     AggregateAppResourceUsage resUsage \u003d\n         this.attemptMetrics.getAggregateAppResourceUsage();\n     RMStateStore rmStore \u003d rmContext.getStateStore();\n     setFinishTime(System.currentTimeMillis());\n \n     ApplicationAttemptStateData attemptState \u003d\n         ApplicationAttemptStateData.newInstance(\n             applicationAttemptId,  getMasterContainer(),\n             rmStore.getCredentialsFromAppAttempt(this),\n             startTime, stateToBeStored, finalTrackingUrl, diags,\n             finalStatus, exitStatus,\n           getFinishTime(), resUsage.getMemorySeconds(),\n-          resUsage.getVcoreSeconds());\n+          resUsage.getVcoreSeconds(),\n+          this.attemptMetrics.getPreemptedMemory(),\n+          this.attemptMetrics.getPreemptedVcore());\n     LOG.info(\"Updating application attempt \" + applicationAttemptId\n         + \" with final state: \" + targetedFinalState + \", and exit status: \"\n         + exitStatus);\n     rmStore.updateApplicationAttemptState(attemptState);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void rememberTargetTransitionsAndStoreState(RMAppAttemptEvent event,\n      Object transitionToDo, RMAppAttemptState targetFinalState,\n      RMAppAttemptState stateToBeStored) {\n\n    rememberTargetTransitions(event, transitionToDo, targetFinalState);\n    stateBeforeFinalSaving \u003d getState();\n\n    // As of today, finalState, diagnostics, final-tracking-url and\n    // finalAppStatus are the only things that we store into the StateStore\n    // AFTER the initial saving on app-attempt-start\n    // These fields can be visible from outside only after they are saved in\n    // StateStore\n    String diags \u003d null;\n\n    // don\u0027t leave the tracking URL pointing to a non-existent AM\n    if (conf.getBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED,\n            YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\n      setTrackingUrlToAHSPage(stateToBeStored);\n    } else {\n      setTrackingUrlToRMAppPage(stateToBeStored);\n    }\n    String finalTrackingUrl \u003d getOriginalTrackingUrl();\n    FinalApplicationStatus finalStatus \u003d null;\n    int exitStatus \u003d ContainerExitStatus.INVALID;\n    switch (event.getType()) {\n    case LAUNCH_FAILED:\n      diags \u003d event.getDiagnosticMsg();\n      break;\n    case REGISTERED:\n      diags \u003d getUnexpectedAMRegisteredDiagnostics();\n      break;\n    case UNREGISTERED:\n      RMAppAttemptUnregistrationEvent unregisterEvent \u003d\n          (RMAppAttemptUnregistrationEvent) event;\n      diags \u003d unregisterEvent.getDiagnosticMsg();\n      // reset finalTrackingUrl to url sent by am\n      finalTrackingUrl \u003d sanitizeTrackingUrl(unregisterEvent.getFinalTrackingUrl());\n      finalStatus \u003d unregisterEvent.getFinalApplicationStatus();\n      break;\n    case CONTAINER_FINISHED:\n      RMAppAttemptContainerFinishedEvent finishEvent \u003d\n          (RMAppAttemptContainerFinishedEvent) event;\n      diags \u003d getAMContainerCrashedDiagnostics(finishEvent);\n      exitStatus \u003d finishEvent.getContainerStatus().getExitStatus();\n      break;\n    case KILL:\n      break;\n    case FAIL:\n      diags \u003d event.getDiagnosticMsg();\n      break;\n    case EXPIRE:\n      diags \u003d getAMExpiredDiagnostics(event);\n      break;\n    default:\n      break;\n    }\n    AggregateAppResourceUsage resUsage \u003d\n        this.attemptMetrics.getAggregateAppResourceUsage();\n    RMStateStore rmStore \u003d rmContext.getStateStore();\n    setFinishTime(System.currentTimeMillis());\n\n    ApplicationAttemptStateData attemptState \u003d\n        ApplicationAttemptStateData.newInstance(\n            applicationAttemptId,  getMasterContainer(),\n            rmStore.getCredentialsFromAppAttempt(this),\n            startTime, stateToBeStored, finalTrackingUrl, diags,\n            finalStatus, exitStatus,\n          getFinishTime(), resUsage.getMemorySeconds(),\n          resUsage.getVcoreSeconds(),\n          this.attemptMetrics.getPreemptedMemory(),\n          this.attemptMetrics.getPreemptedVcore());\n    LOG.info(\"Updating application attempt \" + applicationAttemptId\n        + \" with final state: \" + targetedFinalState + \", and exit status: \"\n        + exitStatus);\n    rmStore.updateApplicationAttemptState(attemptState);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java",
      "extendedDetails": {}
    },
    "772ea7b41b06beaa1f4ac4fa86eac8d6e6c8cd36": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4428. Redirect RM page to AHS page when AHS turned on and RM page is not available. Contributed by Chang Li\n",
      "commitDate": "29/01/16 1:48 PM",
      "commitName": "772ea7b41b06beaa1f4ac4fa86eac8d6e6c8cd36",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "29/01/16 12:21 AM",
      "commitNameOld": "a277bdc9edc66bef419fcd063b832073e512f234",
      "commitAuthorOld": "Devaraj K",
      "daysBetweenCommits": 0.56,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,69 +1,74 @@\n   private void rememberTargetTransitionsAndStoreState(RMAppAttemptEvent event,\n       Object transitionToDo, RMAppAttemptState targetFinalState,\n       RMAppAttemptState stateToBeStored) {\n \n     rememberTargetTransitions(event, transitionToDo, targetFinalState);\n     stateBeforeFinalSaving \u003d getState();\n \n     // As of today, finalState, diagnostics, final-tracking-url and\n     // finalAppStatus are the only things that we store into the StateStore\n     // AFTER the initial saving on app-attempt-start\n     // These fields can be visible from outside only after they are saved in\n     // StateStore\n     String diags \u003d null;\n \n     // don\u0027t leave the tracking URL pointing to a non-existent AM\n-    setTrackingUrlToRMAppPage(stateToBeStored);\n+    if (conf.getBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED,\n+            YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\n+      setTrackingUrlToAHSPage(stateToBeStored);\n+    } else {\n+      setTrackingUrlToRMAppPage(stateToBeStored);\n+    }\n     String finalTrackingUrl \u003d getOriginalTrackingUrl();\n     FinalApplicationStatus finalStatus \u003d null;\n     int exitStatus \u003d ContainerExitStatus.INVALID;\n     switch (event.getType()) {\n     case LAUNCH_FAILED:\n       diags \u003d event.getDiagnosticMsg();\n       break;\n     case REGISTERED:\n       diags \u003d getUnexpectedAMRegisteredDiagnostics();\n       break;\n     case UNREGISTERED:\n       RMAppAttemptUnregistrationEvent unregisterEvent \u003d\n           (RMAppAttemptUnregistrationEvent) event;\n       diags \u003d unregisterEvent.getDiagnosticMsg();\n       // reset finalTrackingUrl to url sent by am\n       finalTrackingUrl \u003d sanitizeTrackingUrl(unregisterEvent.getFinalTrackingUrl());\n       finalStatus \u003d unregisterEvent.getFinalApplicationStatus();\n       break;\n     case CONTAINER_FINISHED:\n       RMAppAttemptContainerFinishedEvent finishEvent \u003d\n           (RMAppAttemptContainerFinishedEvent) event;\n       diags \u003d getAMContainerCrashedDiagnostics(finishEvent);\n       exitStatus \u003d finishEvent.getContainerStatus().getExitStatus();\n       break;\n     case KILL:\n       break;\n     case FAIL:\n       diags \u003d event.getDiagnosticMsg();\n       break;\n     case EXPIRE:\n       diags \u003d getAMExpiredDiagnostics(event);\n       break;\n     default:\n       break;\n     }\n     AggregateAppResourceUsage resUsage \u003d\n         this.attemptMetrics.getAggregateAppResourceUsage();\n     RMStateStore rmStore \u003d rmContext.getStateStore();\n     setFinishTime(System.currentTimeMillis());\n \n     ApplicationAttemptStateData attemptState \u003d\n         ApplicationAttemptStateData.newInstance(\n             applicationAttemptId,  getMasterContainer(),\n             rmStore.getCredentialsFromAppAttempt(this),\n             startTime, stateToBeStored, finalTrackingUrl, diags,\n             finalStatus, exitStatus,\n           getFinishTime(), resUsage.getMemorySeconds(),\n           resUsage.getVcoreSeconds());\n     LOG.info(\"Updating application attempt \" + applicationAttemptId\n         + \" with final state: \" + targetedFinalState + \", and exit status: \"\n         + exitStatus);\n     rmStore.updateApplicationAttemptState(attemptState);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void rememberTargetTransitionsAndStoreState(RMAppAttemptEvent event,\n      Object transitionToDo, RMAppAttemptState targetFinalState,\n      RMAppAttemptState stateToBeStored) {\n\n    rememberTargetTransitions(event, transitionToDo, targetFinalState);\n    stateBeforeFinalSaving \u003d getState();\n\n    // As of today, finalState, diagnostics, final-tracking-url and\n    // finalAppStatus are the only things that we store into the StateStore\n    // AFTER the initial saving on app-attempt-start\n    // These fields can be visible from outside only after they are saved in\n    // StateStore\n    String diags \u003d null;\n\n    // don\u0027t leave the tracking URL pointing to a non-existent AM\n    if (conf.getBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED,\n            YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\n      setTrackingUrlToAHSPage(stateToBeStored);\n    } else {\n      setTrackingUrlToRMAppPage(stateToBeStored);\n    }\n    String finalTrackingUrl \u003d getOriginalTrackingUrl();\n    FinalApplicationStatus finalStatus \u003d null;\n    int exitStatus \u003d ContainerExitStatus.INVALID;\n    switch (event.getType()) {\n    case LAUNCH_FAILED:\n      diags \u003d event.getDiagnosticMsg();\n      break;\n    case REGISTERED:\n      diags \u003d getUnexpectedAMRegisteredDiagnostics();\n      break;\n    case UNREGISTERED:\n      RMAppAttemptUnregistrationEvent unregisterEvent \u003d\n          (RMAppAttemptUnregistrationEvent) event;\n      diags \u003d unregisterEvent.getDiagnosticMsg();\n      // reset finalTrackingUrl to url sent by am\n      finalTrackingUrl \u003d sanitizeTrackingUrl(unregisterEvent.getFinalTrackingUrl());\n      finalStatus \u003d unregisterEvent.getFinalApplicationStatus();\n      break;\n    case CONTAINER_FINISHED:\n      RMAppAttemptContainerFinishedEvent finishEvent \u003d\n          (RMAppAttemptContainerFinishedEvent) event;\n      diags \u003d getAMContainerCrashedDiagnostics(finishEvent);\n      exitStatus \u003d finishEvent.getContainerStatus().getExitStatus();\n      break;\n    case KILL:\n      break;\n    case FAIL:\n      diags \u003d event.getDiagnosticMsg();\n      break;\n    case EXPIRE:\n      diags \u003d getAMExpiredDiagnostics(event);\n      break;\n    default:\n      break;\n    }\n    AggregateAppResourceUsage resUsage \u003d\n        this.attemptMetrics.getAggregateAppResourceUsage();\n    RMStateStore rmStore \u003d rmContext.getStateStore();\n    setFinishTime(System.currentTimeMillis());\n\n    ApplicationAttemptStateData attemptState \u003d\n        ApplicationAttemptStateData.newInstance(\n            applicationAttemptId,  getMasterContainer(),\n            rmStore.getCredentialsFromAppAttempt(this),\n            startTime, stateToBeStored, finalTrackingUrl, diags,\n            finalStatus, exitStatus,\n          getFinishTime(), resUsage.getMemorySeconds(),\n          resUsage.getVcoreSeconds());\n    LOG.info(\"Updating application attempt \" + applicationAttemptId\n        + \" with final state: \" + targetedFinalState + \", and exit status: \"\n        + exitStatus);\n    rmStore.updateApplicationAttemptState(attemptState);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java",
      "extendedDetails": {}
    },
    "cf23f2c2b5b4eb9e51de1a66b7aa57dee7ff30b5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4000. RM crashes with NPE if leaf queue becomes parent queue during restart. Contributed by Varun Saxena\n",
      "commitDate": "15/10/15 5:12 PM",
      "commitName": "cf23f2c2b5b4eb9e51de1a66b7aa57dee7ff30b5",
      "commitAuthor": "Jian He",
      "commitDateOld": "12/10/15 12:14 AM",
      "commitNameOld": "049c6e8dc0f952b5ff7d394aa564ab7db13e4f26",
      "commitAuthorOld": "Zhihai Xu",
      "daysBetweenCommits": 3.71,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,73 +1,69 @@\n   private void rememberTargetTransitionsAndStoreState(RMAppAttemptEvent event,\n       Object transitionToDo, RMAppAttemptState targetFinalState,\n       RMAppAttemptState stateToBeStored) {\n \n     rememberTargetTransitions(event, transitionToDo, targetFinalState);\n     stateBeforeFinalSaving \u003d getState();\n \n     // As of today, finalState, diagnostics, final-tracking-url and\n     // finalAppStatus are the only things that we store into the StateStore\n     // AFTER the initial saving on app-attempt-start\n     // These fields can be visible from outside only after they are saved in\n     // StateStore\n     String diags \u003d null;\n \n     // don\u0027t leave the tracking URL pointing to a non-existent AM\n     setTrackingUrlToRMAppPage(stateToBeStored);\n     String finalTrackingUrl \u003d getOriginalTrackingUrl();\n     FinalApplicationStatus finalStatus \u003d null;\n     int exitStatus \u003d ContainerExitStatus.INVALID;\n     switch (event.getType()) {\n     case LAUNCH_FAILED:\n-      RMAppAttemptLaunchFailedEvent launchFaileEvent \u003d\n-          (RMAppAttemptLaunchFailedEvent) event;\n-      diags \u003d launchFaileEvent.getMessage();\n+      diags \u003d event.getDiagnosticMsg();\n       break;\n     case REGISTERED:\n       diags \u003d getUnexpectedAMRegisteredDiagnostics();\n       break;\n     case UNREGISTERED:\n       RMAppAttemptUnregistrationEvent unregisterEvent \u003d\n           (RMAppAttemptUnregistrationEvent) event;\n-      diags \u003d unregisterEvent.getDiagnostics();\n+      diags \u003d unregisterEvent.getDiagnosticMsg();\n       // reset finalTrackingUrl to url sent by am\n       finalTrackingUrl \u003d sanitizeTrackingUrl(unregisterEvent.getFinalTrackingUrl());\n       finalStatus \u003d unregisterEvent.getFinalApplicationStatus();\n       break;\n     case CONTAINER_FINISHED:\n       RMAppAttemptContainerFinishedEvent finishEvent \u003d\n           (RMAppAttemptContainerFinishedEvent) event;\n       diags \u003d getAMContainerCrashedDiagnostics(finishEvent);\n       exitStatus \u003d finishEvent.getContainerStatus().getExitStatus();\n       break;\n     case KILL:\n       break;\n     case FAIL:\n-      RMAppAttemptFailedEvent failEvent \u003d\n-          (RMAppAttemptFailedEvent) event;\n-      diags \u003d failEvent.getDiagnostics();\n+      diags \u003d event.getDiagnosticMsg();\n       break;\n     case EXPIRE:\n       diags \u003d getAMExpiredDiagnostics(event);\n       break;\n     default:\n       break;\n     }\n     AggregateAppResourceUsage resUsage \u003d\n         this.attemptMetrics.getAggregateAppResourceUsage();\n     RMStateStore rmStore \u003d rmContext.getStateStore();\n     setFinishTime(System.currentTimeMillis());\n \n     ApplicationAttemptStateData attemptState \u003d\n         ApplicationAttemptStateData.newInstance(\n             applicationAttemptId,  getMasterContainer(),\n             rmStore.getCredentialsFromAppAttempt(this),\n             startTime, stateToBeStored, finalTrackingUrl, diags,\n             finalStatus, exitStatus,\n           getFinishTime(), resUsage.getMemorySeconds(),\n           resUsage.getVcoreSeconds());\n     LOG.info(\"Updating application attempt \" + applicationAttemptId\n         + \" with final state: \" + targetedFinalState + \", and exit status: \"\n         + exitStatus);\n     rmStore.updateApplicationAttemptState(attemptState);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void rememberTargetTransitionsAndStoreState(RMAppAttemptEvent event,\n      Object transitionToDo, RMAppAttemptState targetFinalState,\n      RMAppAttemptState stateToBeStored) {\n\n    rememberTargetTransitions(event, transitionToDo, targetFinalState);\n    stateBeforeFinalSaving \u003d getState();\n\n    // As of today, finalState, diagnostics, final-tracking-url and\n    // finalAppStatus are the only things that we store into the StateStore\n    // AFTER the initial saving on app-attempt-start\n    // These fields can be visible from outside only after they are saved in\n    // StateStore\n    String diags \u003d null;\n\n    // don\u0027t leave the tracking URL pointing to a non-existent AM\n    setTrackingUrlToRMAppPage(stateToBeStored);\n    String finalTrackingUrl \u003d getOriginalTrackingUrl();\n    FinalApplicationStatus finalStatus \u003d null;\n    int exitStatus \u003d ContainerExitStatus.INVALID;\n    switch (event.getType()) {\n    case LAUNCH_FAILED:\n      diags \u003d event.getDiagnosticMsg();\n      break;\n    case REGISTERED:\n      diags \u003d getUnexpectedAMRegisteredDiagnostics();\n      break;\n    case UNREGISTERED:\n      RMAppAttemptUnregistrationEvent unregisterEvent \u003d\n          (RMAppAttemptUnregistrationEvent) event;\n      diags \u003d unregisterEvent.getDiagnosticMsg();\n      // reset finalTrackingUrl to url sent by am\n      finalTrackingUrl \u003d sanitizeTrackingUrl(unregisterEvent.getFinalTrackingUrl());\n      finalStatus \u003d unregisterEvent.getFinalApplicationStatus();\n      break;\n    case CONTAINER_FINISHED:\n      RMAppAttemptContainerFinishedEvent finishEvent \u003d\n          (RMAppAttemptContainerFinishedEvent) event;\n      diags \u003d getAMContainerCrashedDiagnostics(finishEvent);\n      exitStatus \u003d finishEvent.getContainerStatus().getExitStatus();\n      break;\n    case KILL:\n      break;\n    case FAIL:\n      diags \u003d event.getDiagnosticMsg();\n      break;\n    case EXPIRE:\n      diags \u003d getAMExpiredDiagnostics(event);\n      break;\n    default:\n      break;\n    }\n    AggregateAppResourceUsage resUsage \u003d\n        this.attemptMetrics.getAggregateAppResourceUsage();\n    RMStateStore rmStore \u003d rmContext.getStateStore();\n    setFinishTime(System.currentTimeMillis());\n\n    ApplicationAttemptStateData attemptState \u003d\n        ApplicationAttemptStateData.newInstance(\n            applicationAttemptId,  getMasterContainer(),\n            rmStore.getCredentialsFromAppAttempt(this),\n            startTime, stateToBeStored, finalTrackingUrl, diags,\n            finalStatus, exitStatus,\n          getFinishTime(), resUsage.getMemorySeconds(),\n          resUsage.getVcoreSeconds());\n    LOG.info(\"Updating application attempt \" + applicationAttemptId\n        + \" with final state: \" + targetedFinalState + \", and exit status: \"\n        + exitStatus);\n    rmStore.updateApplicationAttemptState(attemptState);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java",
      "extendedDetails": {}
    },
    "a0bca2b5ad2344fda5411d910a3730c85f12a0df": {
      "type": "Ybodychange",
      "commitMessage": "YARN-261. Ability to fail AM attempts. Contributed by Andrey Klochkov and Rohith Sharma K S\n",
      "commitDate": "09/10/15 7:17 AM",
      "commitName": "a0bca2b5ad2344fda5411d910a3730c85f12a0df",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "23/09/15 1:29 PM",
      "commitNameOld": "89cab1ba5f0671f8ef30dbe7432079c18362b434",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 15.74,
      "commitsBetweenForRepo": 114,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,73 @@\n   private void rememberTargetTransitionsAndStoreState(RMAppAttemptEvent event,\n       Object transitionToDo, RMAppAttemptState targetFinalState,\n       RMAppAttemptState stateToBeStored) {\n \n     rememberTargetTransitions(event, transitionToDo, targetFinalState);\n     stateBeforeFinalSaving \u003d getState();\n \n     // As of today, finalState, diagnostics, final-tracking-url and\n     // finalAppStatus are the only things that we store into the StateStore\n     // AFTER the initial saving on app-attempt-start\n     // These fields can be visible from outside only after they are saved in\n     // StateStore\n     String diags \u003d null;\n \n     // don\u0027t leave the tracking URL pointing to a non-existent AM\n     setTrackingUrlToRMAppPage(stateToBeStored);\n     String finalTrackingUrl \u003d getOriginalTrackingUrl();\n     FinalApplicationStatus finalStatus \u003d null;\n     int exitStatus \u003d ContainerExitStatus.INVALID;\n     switch (event.getType()) {\n     case LAUNCH_FAILED:\n       RMAppAttemptLaunchFailedEvent launchFaileEvent \u003d\n           (RMAppAttemptLaunchFailedEvent) event;\n       diags \u003d launchFaileEvent.getMessage();\n       break;\n     case REGISTERED:\n       diags \u003d getUnexpectedAMRegisteredDiagnostics();\n       break;\n     case UNREGISTERED:\n       RMAppAttemptUnregistrationEvent unregisterEvent \u003d\n           (RMAppAttemptUnregistrationEvent) event;\n       diags \u003d unregisterEvent.getDiagnostics();\n       // reset finalTrackingUrl to url sent by am\n       finalTrackingUrl \u003d sanitizeTrackingUrl(unregisterEvent.getFinalTrackingUrl());\n       finalStatus \u003d unregisterEvent.getFinalApplicationStatus();\n       break;\n     case CONTAINER_FINISHED:\n       RMAppAttemptContainerFinishedEvent finishEvent \u003d\n           (RMAppAttemptContainerFinishedEvent) event;\n       diags \u003d getAMContainerCrashedDiagnostics(finishEvent);\n       exitStatus \u003d finishEvent.getContainerStatus().getExitStatus();\n       break;\n     case KILL:\n       break;\n+    case FAIL:\n+      RMAppAttemptFailedEvent failEvent \u003d\n+          (RMAppAttemptFailedEvent) event;\n+      diags \u003d failEvent.getDiagnostics();\n+      break;\n     case EXPIRE:\n       diags \u003d getAMExpiredDiagnostics(event);\n       break;\n     default:\n       break;\n     }\n     AggregateAppResourceUsage resUsage \u003d\n         this.attemptMetrics.getAggregateAppResourceUsage();\n     RMStateStore rmStore \u003d rmContext.getStateStore();\n     setFinishTime(System.currentTimeMillis());\n \n     ApplicationAttemptStateData attemptState \u003d\n         ApplicationAttemptStateData.newInstance(\n             applicationAttemptId,  getMasterContainer(),\n             rmStore.getCredentialsFromAppAttempt(this),\n             startTime, stateToBeStored, finalTrackingUrl, diags,\n             finalStatus, exitStatus,\n           getFinishTime(), resUsage.getMemorySeconds(),\n           resUsage.getVcoreSeconds());\n     LOG.info(\"Updating application attempt \" + applicationAttemptId\n         + \" with final state: \" + targetedFinalState + \", and exit status: \"\n         + exitStatus);\n     rmStore.updateApplicationAttemptState(attemptState);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void rememberTargetTransitionsAndStoreState(RMAppAttemptEvent event,\n      Object transitionToDo, RMAppAttemptState targetFinalState,\n      RMAppAttemptState stateToBeStored) {\n\n    rememberTargetTransitions(event, transitionToDo, targetFinalState);\n    stateBeforeFinalSaving \u003d getState();\n\n    // As of today, finalState, diagnostics, final-tracking-url and\n    // finalAppStatus are the only things that we store into the StateStore\n    // AFTER the initial saving on app-attempt-start\n    // These fields can be visible from outside only after they are saved in\n    // StateStore\n    String diags \u003d null;\n\n    // don\u0027t leave the tracking URL pointing to a non-existent AM\n    setTrackingUrlToRMAppPage(stateToBeStored);\n    String finalTrackingUrl \u003d getOriginalTrackingUrl();\n    FinalApplicationStatus finalStatus \u003d null;\n    int exitStatus \u003d ContainerExitStatus.INVALID;\n    switch (event.getType()) {\n    case LAUNCH_FAILED:\n      RMAppAttemptLaunchFailedEvent launchFaileEvent \u003d\n          (RMAppAttemptLaunchFailedEvent) event;\n      diags \u003d launchFaileEvent.getMessage();\n      break;\n    case REGISTERED:\n      diags \u003d getUnexpectedAMRegisteredDiagnostics();\n      break;\n    case UNREGISTERED:\n      RMAppAttemptUnregistrationEvent unregisterEvent \u003d\n          (RMAppAttemptUnregistrationEvent) event;\n      diags \u003d unregisterEvent.getDiagnostics();\n      // reset finalTrackingUrl to url sent by am\n      finalTrackingUrl \u003d sanitizeTrackingUrl(unregisterEvent.getFinalTrackingUrl());\n      finalStatus \u003d unregisterEvent.getFinalApplicationStatus();\n      break;\n    case CONTAINER_FINISHED:\n      RMAppAttemptContainerFinishedEvent finishEvent \u003d\n          (RMAppAttemptContainerFinishedEvent) event;\n      diags \u003d getAMContainerCrashedDiagnostics(finishEvent);\n      exitStatus \u003d finishEvent.getContainerStatus().getExitStatus();\n      break;\n    case KILL:\n      break;\n    case FAIL:\n      RMAppAttemptFailedEvent failEvent \u003d\n          (RMAppAttemptFailedEvent) event;\n      diags \u003d failEvent.getDiagnostics();\n      break;\n    case EXPIRE:\n      diags \u003d getAMExpiredDiagnostics(event);\n      break;\n    default:\n      break;\n    }\n    AggregateAppResourceUsage resUsage \u003d\n        this.attemptMetrics.getAggregateAppResourceUsage();\n    RMStateStore rmStore \u003d rmContext.getStateStore();\n    setFinishTime(System.currentTimeMillis());\n\n    ApplicationAttemptStateData attemptState \u003d\n        ApplicationAttemptStateData.newInstance(\n            applicationAttemptId,  getMasterContainer(),\n            rmStore.getCredentialsFromAppAttempt(this),\n            startTime, stateToBeStored, finalTrackingUrl, diags,\n            finalStatus, exitStatus,\n          getFinishTime(), resUsage.getMemorySeconds(),\n          resUsage.getVcoreSeconds());\n    LOG.info(\"Updating application attempt \" + applicationAttemptId\n        + \" with final state: \" + targetedFinalState + \", and exit status: \"\n        + exitStatus);\n    rmStore.updateApplicationAttemptState(attemptState);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java",
      "extendedDetails": {}
    },
    "65c69e296edad48e50ef36e47803625ea46b51e1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3151. On Failover tracking url wrong in application cli for KILLED\napplication. Contributed by Rohith\n",
      "commitDate": "11/02/15 9:19 PM",
      "commitName": "65c69e296edad48e50ef36e47803625ea46b51e1",
      "commitAuthor": "Xuan",
      "commitDateOld": "10/02/15 3:24 PM",
      "commitNameOld": "d5855c0e46404cfc1b5a63e59015e68ba668f0ea",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 1.25,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,68 @@\n   private void rememberTargetTransitionsAndStoreState(RMAppAttemptEvent event,\n       Object transitionToDo, RMAppAttemptState targetFinalState,\n       RMAppAttemptState stateToBeStored) {\n \n     rememberTargetTransitions(event, transitionToDo, targetFinalState);\n     stateBeforeFinalSaving \u003d getState();\n \n     // As of today, finalState, diagnostics, final-tracking-url and\n     // finalAppStatus are the only things that we store into the StateStore\n     // AFTER the initial saving on app-attempt-start\n     // These fields can be visible from outside only after they are saved in\n     // StateStore\n     String diags \u003d null;\n-    String finalTrackingUrl \u003d null;\n+\n+    // don\u0027t leave the tracking URL pointing to a non-existent AM\n+    setTrackingUrlToRMAppPage(stateToBeStored);\n+    String finalTrackingUrl \u003d getOriginalTrackingUrl();\n     FinalApplicationStatus finalStatus \u003d null;\n     int exitStatus \u003d ContainerExitStatus.INVALID;\n     switch (event.getType()) {\n     case LAUNCH_FAILED:\n       RMAppAttemptLaunchFailedEvent launchFaileEvent \u003d\n           (RMAppAttemptLaunchFailedEvent) event;\n       diags \u003d launchFaileEvent.getMessage();\n       break;\n     case REGISTERED:\n       diags \u003d getUnexpectedAMRegisteredDiagnostics();\n       break;\n     case UNREGISTERED:\n       RMAppAttemptUnregistrationEvent unregisterEvent \u003d\n           (RMAppAttemptUnregistrationEvent) event;\n       diags \u003d unregisterEvent.getDiagnostics();\n+      // reset finalTrackingUrl to url sent by am\n       finalTrackingUrl \u003d sanitizeTrackingUrl(unregisterEvent.getFinalTrackingUrl());\n       finalStatus \u003d unregisterEvent.getFinalApplicationStatus();\n       break;\n     case CONTAINER_FINISHED:\n       RMAppAttemptContainerFinishedEvent finishEvent \u003d\n           (RMAppAttemptContainerFinishedEvent) event;\n       diags \u003d getAMContainerCrashedDiagnostics(finishEvent);\n       exitStatus \u003d finishEvent.getContainerStatus().getExitStatus();\n       break;\n     case KILL:\n       break;\n     case EXPIRE:\n       diags \u003d getAMExpiredDiagnostics(event);\n       break;\n     default:\n       break;\n     }\n     AggregateAppResourceUsage resUsage \u003d\n         this.attemptMetrics.getAggregateAppResourceUsage();\n     RMStateStore rmStore \u003d rmContext.getStateStore();\n     setFinishTime(System.currentTimeMillis());\n \n     ApplicationAttemptStateData attemptState \u003d\n         ApplicationAttemptStateData.newInstance(\n             applicationAttemptId,  getMasterContainer(),\n             rmStore.getCredentialsFromAppAttempt(this),\n             startTime, stateToBeStored, finalTrackingUrl, diags,\n             finalStatus, exitStatus,\n           getFinishTime(), resUsage.getMemorySeconds(),\n           resUsage.getVcoreSeconds());\n     LOG.info(\"Updating application attempt \" + applicationAttemptId\n         + \" with final state: \" + targetedFinalState + \", and exit status: \"\n         + exitStatus);\n     rmStore.updateApplicationAttemptState(attemptState);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void rememberTargetTransitionsAndStoreState(RMAppAttemptEvent event,\n      Object transitionToDo, RMAppAttemptState targetFinalState,\n      RMAppAttemptState stateToBeStored) {\n\n    rememberTargetTransitions(event, transitionToDo, targetFinalState);\n    stateBeforeFinalSaving \u003d getState();\n\n    // As of today, finalState, diagnostics, final-tracking-url and\n    // finalAppStatus are the only things that we store into the StateStore\n    // AFTER the initial saving on app-attempt-start\n    // These fields can be visible from outside only after they are saved in\n    // StateStore\n    String diags \u003d null;\n\n    // don\u0027t leave the tracking URL pointing to a non-existent AM\n    setTrackingUrlToRMAppPage(stateToBeStored);\n    String finalTrackingUrl \u003d getOriginalTrackingUrl();\n    FinalApplicationStatus finalStatus \u003d null;\n    int exitStatus \u003d ContainerExitStatus.INVALID;\n    switch (event.getType()) {\n    case LAUNCH_FAILED:\n      RMAppAttemptLaunchFailedEvent launchFaileEvent \u003d\n          (RMAppAttemptLaunchFailedEvent) event;\n      diags \u003d launchFaileEvent.getMessage();\n      break;\n    case REGISTERED:\n      diags \u003d getUnexpectedAMRegisteredDiagnostics();\n      break;\n    case UNREGISTERED:\n      RMAppAttemptUnregistrationEvent unregisterEvent \u003d\n          (RMAppAttemptUnregistrationEvent) event;\n      diags \u003d unregisterEvent.getDiagnostics();\n      // reset finalTrackingUrl to url sent by am\n      finalTrackingUrl \u003d sanitizeTrackingUrl(unregisterEvent.getFinalTrackingUrl());\n      finalStatus \u003d unregisterEvent.getFinalApplicationStatus();\n      break;\n    case CONTAINER_FINISHED:\n      RMAppAttemptContainerFinishedEvent finishEvent \u003d\n          (RMAppAttemptContainerFinishedEvent) event;\n      diags \u003d getAMContainerCrashedDiagnostics(finishEvent);\n      exitStatus \u003d finishEvent.getContainerStatus().getExitStatus();\n      break;\n    case KILL:\n      break;\n    case EXPIRE:\n      diags \u003d getAMExpiredDiagnostics(event);\n      break;\n    default:\n      break;\n    }\n    AggregateAppResourceUsage resUsage \u003d\n        this.attemptMetrics.getAggregateAppResourceUsage();\n    RMStateStore rmStore \u003d rmContext.getStateStore();\n    setFinishTime(System.currentTimeMillis());\n\n    ApplicationAttemptStateData attemptState \u003d\n        ApplicationAttemptStateData.newInstance(\n            applicationAttemptId,  getMasterContainer(),\n            rmStore.getCredentialsFromAppAttempt(this),\n            startTime, stateToBeStored, finalTrackingUrl, diags,\n            finalStatus, exitStatus,\n          getFinishTime(), resUsage.getMemorySeconds(),\n          resUsage.getVcoreSeconds());\n    LOG.info(\"Updating application attempt \" + applicationAttemptId\n        + \" with final state: \" + targetedFinalState + \", and exit status: \"\n        + exitStatus);\n    rmStore.updateApplicationAttemptState(attemptState);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java",
      "extendedDetails": {}
    },
    "5805a81efbc024024d8172489dfdc6cf77879416": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2404. Removed ApplicationAttemptState and ApplicationState class in RMStateStore. Contributed by Tsuyoshi OZAWA\n",
      "commitDate": "25/11/14 12:48 PM",
      "commitName": "5805a81efbc024024d8172489dfdc6cf77879416",
      "commitAuthor": "Jian He",
      "commitDateOld": "19/11/14 7:50 PM",
      "commitNameOld": "c90fb84aaa902e6676de65d0016dee3a5414eb95",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 5.71,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,64 @@\n   private void rememberTargetTransitionsAndStoreState(RMAppAttemptEvent event,\n       Object transitionToDo, RMAppAttemptState targetFinalState,\n       RMAppAttemptState stateToBeStored) {\n \n     rememberTargetTransitions(event, transitionToDo, targetFinalState);\n     stateBeforeFinalSaving \u003d getState();\n \n     // As of today, finalState, diagnostics, final-tracking-url and\n     // finalAppStatus are the only things that we store into the StateStore\n     // AFTER the initial saving on app-attempt-start\n     // These fields can be visible from outside only after they are saved in\n     // StateStore\n     String diags \u003d null;\n     String finalTrackingUrl \u003d null;\n     FinalApplicationStatus finalStatus \u003d null;\n     int exitStatus \u003d ContainerExitStatus.INVALID;\n     switch (event.getType()) {\n     case LAUNCH_FAILED:\n       RMAppAttemptLaunchFailedEvent launchFaileEvent \u003d\n           (RMAppAttemptLaunchFailedEvent) event;\n       diags \u003d launchFaileEvent.getMessage();\n       break;\n     case REGISTERED:\n       diags \u003d getUnexpectedAMRegisteredDiagnostics();\n       break;\n     case UNREGISTERED:\n       RMAppAttemptUnregistrationEvent unregisterEvent \u003d\n           (RMAppAttemptUnregistrationEvent) event;\n       diags \u003d unregisterEvent.getDiagnostics();\n       finalTrackingUrl \u003d sanitizeTrackingUrl(unregisterEvent.getFinalTrackingUrl());\n       finalStatus \u003d unregisterEvent.getFinalApplicationStatus();\n       break;\n     case CONTAINER_FINISHED:\n       RMAppAttemptContainerFinishedEvent finishEvent \u003d\n           (RMAppAttemptContainerFinishedEvent) event;\n       diags \u003d getAMContainerCrashedDiagnostics(finishEvent);\n       exitStatus \u003d finishEvent.getContainerStatus().getExitStatus();\n       break;\n     case KILL:\n       break;\n     case EXPIRE:\n       diags \u003d getAMExpiredDiagnostics(event);\n       break;\n     default:\n       break;\n     }\n     AggregateAppResourceUsage resUsage \u003d\n         this.attemptMetrics.getAggregateAppResourceUsage();\n     RMStateStore rmStore \u003d rmContext.getStateStore();\n     setFinishTime(System.currentTimeMillis());\n-    ApplicationAttemptState attemptState \u003d\n-        new ApplicationAttemptState(applicationAttemptId, getMasterContainer(),\n-          rmStore.getCredentialsFromAppAttempt(this), startTime,\n-          stateToBeStored, finalTrackingUrl, diags, finalStatus, exitStatus,\n+\n+    ApplicationAttemptStateData attemptState \u003d\n+        ApplicationAttemptStateData.newInstance(\n+            applicationAttemptId,  getMasterContainer(),\n+            rmStore.getCredentialsFromAppAttempt(this),\n+            startTime, stateToBeStored, finalTrackingUrl, diags,\n+            finalStatus, exitStatus,\n           getFinishTime(), resUsage.getMemorySeconds(),\n           resUsage.getVcoreSeconds());\n     LOG.info(\"Updating application attempt \" + applicationAttemptId\n         + \" with final state: \" + targetedFinalState + \", and exit status: \"\n         + exitStatus);\n     rmStore.updateApplicationAttemptState(attemptState);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void rememberTargetTransitionsAndStoreState(RMAppAttemptEvent event,\n      Object transitionToDo, RMAppAttemptState targetFinalState,\n      RMAppAttemptState stateToBeStored) {\n\n    rememberTargetTransitions(event, transitionToDo, targetFinalState);\n    stateBeforeFinalSaving \u003d getState();\n\n    // As of today, finalState, diagnostics, final-tracking-url and\n    // finalAppStatus are the only things that we store into the StateStore\n    // AFTER the initial saving on app-attempt-start\n    // These fields can be visible from outside only after they are saved in\n    // StateStore\n    String diags \u003d null;\n    String finalTrackingUrl \u003d null;\n    FinalApplicationStatus finalStatus \u003d null;\n    int exitStatus \u003d ContainerExitStatus.INVALID;\n    switch (event.getType()) {\n    case LAUNCH_FAILED:\n      RMAppAttemptLaunchFailedEvent launchFaileEvent \u003d\n          (RMAppAttemptLaunchFailedEvent) event;\n      diags \u003d launchFaileEvent.getMessage();\n      break;\n    case REGISTERED:\n      diags \u003d getUnexpectedAMRegisteredDiagnostics();\n      break;\n    case UNREGISTERED:\n      RMAppAttemptUnregistrationEvent unregisterEvent \u003d\n          (RMAppAttemptUnregistrationEvent) event;\n      diags \u003d unregisterEvent.getDiagnostics();\n      finalTrackingUrl \u003d sanitizeTrackingUrl(unregisterEvent.getFinalTrackingUrl());\n      finalStatus \u003d unregisterEvent.getFinalApplicationStatus();\n      break;\n    case CONTAINER_FINISHED:\n      RMAppAttemptContainerFinishedEvent finishEvent \u003d\n          (RMAppAttemptContainerFinishedEvent) event;\n      diags \u003d getAMContainerCrashedDiagnostics(finishEvent);\n      exitStatus \u003d finishEvent.getContainerStatus().getExitStatus();\n      break;\n    case KILL:\n      break;\n    case EXPIRE:\n      diags \u003d getAMExpiredDiagnostics(event);\n      break;\n    default:\n      break;\n    }\n    AggregateAppResourceUsage resUsage \u003d\n        this.attemptMetrics.getAggregateAppResourceUsage();\n    RMStateStore rmStore \u003d rmContext.getStateStore();\n    setFinishTime(System.currentTimeMillis());\n\n    ApplicationAttemptStateData attemptState \u003d\n        ApplicationAttemptStateData.newInstance(\n            applicationAttemptId,  getMasterContainer(),\n            rmStore.getCredentialsFromAppAttempt(this),\n            startTime, stateToBeStored, finalTrackingUrl, diags,\n            finalStatus, exitStatus,\n          getFinishTime(), resUsage.getMemorySeconds(),\n          resUsage.getVcoreSeconds());\n    LOG.info(\"Updating application attempt \" + applicationAttemptId\n        + \" with final state: \" + targetedFinalState + \", and exit status: \"\n        + exitStatus);\n    rmStore.updateApplicationAttemptState(attemptState);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java",
      "extendedDetails": {}
    },
    "14e2639fd0d53f7e0b58f2f4744af44983d4e867": {
      "type": "Ybodychange",
      "commitMessage": "YARN-611. Added an API to let apps specify an interval beyond which AM failures should be ignored towards counting max-attempts. Contributed by Xuan Gong.\n",
      "commitDate": "13/09/14 6:04 PM",
      "commitName": "14e2639fd0d53f7e0b58f2f4744af44983d4e867",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "11/09/14 7:04 PM",
      "commitNameOld": "6b8b1608e64e300e4e1d23c60476febaca29ca38",
      "commitAuthorOld": "junping_du",
      "daysBetweenCommits": 1.96,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,61 @@\n   private void rememberTargetTransitionsAndStoreState(RMAppAttemptEvent event,\n       Object transitionToDo, RMAppAttemptState targetFinalState,\n       RMAppAttemptState stateToBeStored) {\n \n     rememberTargetTransitions(event, transitionToDo, targetFinalState);\n     stateBeforeFinalSaving \u003d getState();\n \n     // As of today, finalState, diagnostics, final-tracking-url and\n     // finalAppStatus are the only things that we store into the StateStore\n     // AFTER the initial saving on app-attempt-start\n     // These fields can be visible from outside only after they are saved in\n     // StateStore\n     String diags \u003d null;\n     String finalTrackingUrl \u003d null;\n     FinalApplicationStatus finalStatus \u003d null;\n     int exitStatus \u003d ContainerExitStatus.INVALID;\n     switch (event.getType()) {\n     case LAUNCH_FAILED:\n       RMAppAttemptLaunchFailedEvent launchFaileEvent \u003d\n           (RMAppAttemptLaunchFailedEvent) event;\n       diags \u003d launchFaileEvent.getMessage();\n       break;\n     case REGISTERED:\n       diags \u003d getUnexpectedAMRegisteredDiagnostics();\n       break;\n     case UNREGISTERED:\n       RMAppAttemptUnregistrationEvent unregisterEvent \u003d\n           (RMAppAttemptUnregistrationEvent) event;\n       diags \u003d unregisterEvent.getDiagnostics();\n       finalTrackingUrl \u003d sanitizeTrackingUrl(unregisterEvent.getFinalTrackingUrl());\n       finalStatus \u003d unregisterEvent.getFinalApplicationStatus();\n       break;\n     case CONTAINER_FINISHED:\n       RMAppAttemptContainerFinishedEvent finishEvent \u003d\n           (RMAppAttemptContainerFinishedEvent) event;\n       diags \u003d getAMContainerCrashedDiagnostics(finishEvent);\n       exitStatus \u003d finishEvent.getContainerStatus().getExitStatus();\n       break;\n     case KILL:\n       break;\n     case EXPIRE:\n       diags \u003d getAMExpiredDiagnostics(event);\n       break;\n     default:\n       break;\n     }\n     AggregateAppResourceUsage resUsage \u003d\n         this.attemptMetrics.getAggregateAppResourceUsage();\n     RMStateStore rmStore \u003d rmContext.getStateStore();\n+    setFinishTime(System.currentTimeMillis());\n     ApplicationAttemptState attemptState \u003d\n         new ApplicationAttemptState(applicationAttemptId, getMasterContainer(),\n           rmStore.getCredentialsFromAppAttempt(this), startTime,\n           stateToBeStored, finalTrackingUrl, diags, finalStatus, exitStatus,\n-          resUsage.getMemorySeconds(), resUsage.getVcoreSeconds());\n+          getFinishTime(), resUsage.getMemorySeconds(),\n+          resUsage.getVcoreSeconds());\n     LOG.info(\"Updating application attempt \" + applicationAttemptId\n         + \" with final state: \" + targetedFinalState + \", and exit status: \"\n         + exitStatus);\n     rmStore.updateApplicationAttemptState(attemptState);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void rememberTargetTransitionsAndStoreState(RMAppAttemptEvent event,\n      Object transitionToDo, RMAppAttemptState targetFinalState,\n      RMAppAttemptState stateToBeStored) {\n\n    rememberTargetTransitions(event, transitionToDo, targetFinalState);\n    stateBeforeFinalSaving \u003d getState();\n\n    // As of today, finalState, diagnostics, final-tracking-url and\n    // finalAppStatus are the only things that we store into the StateStore\n    // AFTER the initial saving on app-attempt-start\n    // These fields can be visible from outside only after they are saved in\n    // StateStore\n    String diags \u003d null;\n    String finalTrackingUrl \u003d null;\n    FinalApplicationStatus finalStatus \u003d null;\n    int exitStatus \u003d ContainerExitStatus.INVALID;\n    switch (event.getType()) {\n    case LAUNCH_FAILED:\n      RMAppAttemptLaunchFailedEvent launchFaileEvent \u003d\n          (RMAppAttemptLaunchFailedEvent) event;\n      diags \u003d launchFaileEvent.getMessage();\n      break;\n    case REGISTERED:\n      diags \u003d getUnexpectedAMRegisteredDiagnostics();\n      break;\n    case UNREGISTERED:\n      RMAppAttemptUnregistrationEvent unregisterEvent \u003d\n          (RMAppAttemptUnregistrationEvent) event;\n      diags \u003d unregisterEvent.getDiagnostics();\n      finalTrackingUrl \u003d sanitizeTrackingUrl(unregisterEvent.getFinalTrackingUrl());\n      finalStatus \u003d unregisterEvent.getFinalApplicationStatus();\n      break;\n    case CONTAINER_FINISHED:\n      RMAppAttemptContainerFinishedEvent finishEvent \u003d\n          (RMAppAttemptContainerFinishedEvent) event;\n      diags \u003d getAMContainerCrashedDiagnostics(finishEvent);\n      exitStatus \u003d finishEvent.getContainerStatus().getExitStatus();\n      break;\n    case KILL:\n      break;\n    case EXPIRE:\n      diags \u003d getAMExpiredDiagnostics(event);\n      break;\n    default:\n      break;\n    }\n    AggregateAppResourceUsage resUsage \u003d\n        this.attemptMetrics.getAggregateAppResourceUsage();\n    RMStateStore rmStore \u003d rmContext.getStateStore();\n    setFinishTime(System.currentTimeMillis());\n    ApplicationAttemptState attemptState \u003d\n        new ApplicationAttemptState(applicationAttemptId, getMasterContainer(),\n          rmStore.getCredentialsFromAppAttempt(this), startTime,\n          stateToBeStored, finalTrackingUrl, diags, finalStatus, exitStatus,\n          getFinishTime(), resUsage.getMemorySeconds(),\n          resUsage.getVcoreSeconds());\n    LOG.info(\"Updating application attempt \" + applicationAttemptId\n        + \" with final state: \" + targetedFinalState + \", and exit status: \"\n        + exitStatus);\n    rmStore.updateApplicationAttemptState(attemptState);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java",
      "extendedDetails": {}
    },
    "83be3ad44484bf8a24cb90de4b9c26ab59d226a8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-415. Capture aggregate memory allocation at the app-level for chargeback. Contributed by Eric Payne \u0026 Andrey Klochkov\n",
      "commitDate": "10/09/14 6:20 PM",
      "commitName": "83be3ad44484bf8a24cb90de4b9c26ab59d226a8",
      "commitAuthor": "Jian He",
      "commitDateOld": "11/08/14 11:24 AM",
      "commitNameOld": "c4dc6853439d54076c6875e66accfc61dddf74d1",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 30.29,
      "commitsBetweenForRepo": 242,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,59 @@\n   private void rememberTargetTransitionsAndStoreState(RMAppAttemptEvent event,\n       Object transitionToDo, RMAppAttemptState targetFinalState,\n       RMAppAttemptState stateToBeStored) {\n \n     rememberTargetTransitions(event, transitionToDo, targetFinalState);\n     stateBeforeFinalSaving \u003d getState();\n \n     // As of today, finalState, diagnostics, final-tracking-url and\n     // finalAppStatus are the only things that we store into the StateStore\n     // AFTER the initial saving on app-attempt-start\n     // These fields can be visible from outside only after they are saved in\n     // StateStore\n     String diags \u003d null;\n     String finalTrackingUrl \u003d null;\n     FinalApplicationStatus finalStatus \u003d null;\n     int exitStatus \u003d ContainerExitStatus.INVALID;\n     switch (event.getType()) {\n     case LAUNCH_FAILED:\n       RMAppAttemptLaunchFailedEvent launchFaileEvent \u003d\n           (RMAppAttemptLaunchFailedEvent) event;\n       diags \u003d launchFaileEvent.getMessage();\n       break;\n     case REGISTERED:\n       diags \u003d getUnexpectedAMRegisteredDiagnostics();\n       break;\n     case UNREGISTERED:\n       RMAppAttemptUnregistrationEvent unregisterEvent \u003d\n           (RMAppAttemptUnregistrationEvent) event;\n       diags \u003d unregisterEvent.getDiagnostics();\n       finalTrackingUrl \u003d sanitizeTrackingUrl(unregisterEvent.getFinalTrackingUrl());\n       finalStatus \u003d unregisterEvent.getFinalApplicationStatus();\n       break;\n     case CONTAINER_FINISHED:\n       RMAppAttemptContainerFinishedEvent finishEvent \u003d\n           (RMAppAttemptContainerFinishedEvent) event;\n       diags \u003d getAMContainerCrashedDiagnostics(finishEvent);\n       exitStatus \u003d finishEvent.getContainerStatus().getExitStatus();\n       break;\n     case KILL:\n       break;\n     case EXPIRE:\n       diags \u003d getAMExpiredDiagnostics(event);\n       break;\n     default:\n       break;\n     }\n-\n+    AggregateAppResourceUsage resUsage \u003d\n+        this.attemptMetrics.getAggregateAppResourceUsage();\n     RMStateStore rmStore \u003d rmContext.getStateStore();\n     ApplicationAttemptState attemptState \u003d\n         new ApplicationAttemptState(applicationAttemptId, getMasterContainer(),\n           rmStore.getCredentialsFromAppAttempt(this), startTime,\n-          stateToBeStored, finalTrackingUrl, diags, finalStatus, exitStatus);\n+          stateToBeStored, finalTrackingUrl, diags, finalStatus, exitStatus,\n+          resUsage.getMemorySeconds(), resUsage.getVcoreSeconds());\n     LOG.info(\"Updating application attempt \" + applicationAttemptId\n         + \" with final state: \" + targetedFinalState + \", and exit status: \"\n         + exitStatus);\n     rmStore.updateApplicationAttemptState(attemptState);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void rememberTargetTransitionsAndStoreState(RMAppAttemptEvent event,\n      Object transitionToDo, RMAppAttemptState targetFinalState,\n      RMAppAttemptState stateToBeStored) {\n\n    rememberTargetTransitions(event, transitionToDo, targetFinalState);\n    stateBeforeFinalSaving \u003d getState();\n\n    // As of today, finalState, diagnostics, final-tracking-url and\n    // finalAppStatus are the only things that we store into the StateStore\n    // AFTER the initial saving on app-attempt-start\n    // These fields can be visible from outside only after they are saved in\n    // StateStore\n    String diags \u003d null;\n    String finalTrackingUrl \u003d null;\n    FinalApplicationStatus finalStatus \u003d null;\n    int exitStatus \u003d ContainerExitStatus.INVALID;\n    switch (event.getType()) {\n    case LAUNCH_FAILED:\n      RMAppAttemptLaunchFailedEvent launchFaileEvent \u003d\n          (RMAppAttemptLaunchFailedEvent) event;\n      diags \u003d launchFaileEvent.getMessage();\n      break;\n    case REGISTERED:\n      diags \u003d getUnexpectedAMRegisteredDiagnostics();\n      break;\n    case UNREGISTERED:\n      RMAppAttemptUnregistrationEvent unregisterEvent \u003d\n          (RMAppAttemptUnregistrationEvent) event;\n      diags \u003d unregisterEvent.getDiagnostics();\n      finalTrackingUrl \u003d sanitizeTrackingUrl(unregisterEvent.getFinalTrackingUrl());\n      finalStatus \u003d unregisterEvent.getFinalApplicationStatus();\n      break;\n    case CONTAINER_FINISHED:\n      RMAppAttemptContainerFinishedEvent finishEvent \u003d\n          (RMAppAttemptContainerFinishedEvent) event;\n      diags \u003d getAMContainerCrashedDiagnostics(finishEvent);\n      exitStatus \u003d finishEvent.getContainerStatus().getExitStatus();\n      break;\n    case KILL:\n      break;\n    case EXPIRE:\n      diags \u003d getAMExpiredDiagnostics(event);\n      break;\n    default:\n      break;\n    }\n    AggregateAppResourceUsage resUsage \u003d\n        this.attemptMetrics.getAggregateAppResourceUsage();\n    RMStateStore rmStore \u003d rmContext.getStateStore();\n    ApplicationAttemptState attemptState \u003d\n        new ApplicationAttemptState(applicationAttemptId, getMasterContainer(),\n          rmStore.getCredentialsFromAppAttempt(this), startTime,\n          stateToBeStored, finalTrackingUrl, diags, finalStatus, exitStatus,\n          resUsage.getMemorySeconds(), resUsage.getVcoreSeconds());\n    LOG.info(\"Updating application attempt \" + applicationAttemptId\n        + \" with final state: \" + targetedFinalState + \", and exit status: \"\n        + exitStatus);\n    rmStore.updateApplicationAttemptState(attemptState);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java",
      "extendedDetails": {}
    },
    "d16470025aa0c51a04c530863a96108895d72ddf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2074. Changed ResourceManager to not count AM preemptions towards app failures. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1605106 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/06/14 8:15 AM",
      "commitName": "d16470025aa0c51a04c530863a96108895d72ddf",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "16/06/14 4:56 PM",
      "commitNameOld": "95897ca14b7abd7fe047fdcf150473a8a2cbb024",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 7.64,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,57 @@\n   private void rememberTargetTransitionsAndStoreState(RMAppAttemptEvent event,\n       Object transitionToDo, RMAppAttemptState targetFinalState,\n       RMAppAttemptState stateToBeStored) {\n \n     rememberTargetTransitions(event, transitionToDo, targetFinalState);\n     stateBeforeFinalSaving \u003d getState();\n \n     // As of today, finalState, diagnostics, final-tracking-url and\n     // finalAppStatus are the only things that we store into the StateStore\n     // AFTER the initial saving on app-attempt-start\n     // These fields can be visible from outside only after they are saved in\n     // StateStore\n     String diags \u003d null;\n     String finalTrackingUrl \u003d null;\n     FinalApplicationStatus finalStatus \u003d null;\n-\n+    int exitStatus \u003d ContainerExitStatus.INVALID;\n     switch (event.getType()) {\n     case LAUNCH_FAILED:\n       RMAppAttemptLaunchFailedEvent launchFaileEvent \u003d\n           (RMAppAttemptLaunchFailedEvent) event;\n       diags \u003d launchFaileEvent.getMessage();\n       break;\n     case REGISTERED:\n       diags \u003d getUnexpectedAMRegisteredDiagnostics();\n       break;\n     case UNREGISTERED:\n       RMAppAttemptUnregistrationEvent unregisterEvent \u003d\n           (RMAppAttemptUnregistrationEvent) event;\n       diags \u003d unregisterEvent.getDiagnostics();\n       finalTrackingUrl \u003d sanitizeTrackingUrl(unregisterEvent.getFinalTrackingUrl());\n       finalStatus \u003d unregisterEvent.getFinalApplicationStatus();\n       break;\n     case CONTAINER_FINISHED:\n       RMAppAttemptContainerFinishedEvent finishEvent \u003d\n           (RMAppAttemptContainerFinishedEvent) event;\n       diags \u003d getAMContainerCrashedDiagnostics(finishEvent);\n+      exitStatus \u003d finishEvent.getContainerStatus().getExitStatus();\n       break;\n     case KILL:\n       break;\n     case EXPIRE:\n       diags \u003d getAMExpiredDiagnostics(event);\n       break;\n     default:\n       break;\n     }\n \n     RMStateStore rmStore \u003d rmContext.getStateStore();\n     ApplicationAttemptState attemptState \u003d\n         new ApplicationAttemptState(applicationAttemptId, getMasterContainer(),\n           rmStore.getCredentialsFromAppAttempt(this), startTime,\n-          stateToBeStored, finalTrackingUrl, diags, finalStatus);\n+          stateToBeStored, finalTrackingUrl, diags, finalStatus, exitStatus);\n     LOG.info(\"Updating application attempt \" + applicationAttemptId\n-        + \" with final state: \" + targetedFinalState);\n+        + \" with final state: \" + targetedFinalState + \", and exit status: \"\n+        + exitStatus);\n     rmStore.updateApplicationAttemptState(attemptState);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void rememberTargetTransitionsAndStoreState(RMAppAttemptEvent event,\n      Object transitionToDo, RMAppAttemptState targetFinalState,\n      RMAppAttemptState stateToBeStored) {\n\n    rememberTargetTransitions(event, transitionToDo, targetFinalState);\n    stateBeforeFinalSaving \u003d getState();\n\n    // As of today, finalState, diagnostics, final-tracking-url and\n    // finalAppStatus are the only things that we store into the StateStore\n    // AFTER the initial saving on app-attempt-start\n    // These fields can be visible from outside only after they are saved in\n    // StateStore\n    String diags \u003d null;\n    String finalTrackingUrl \u003d null;\n    FinalApplicationStatus finalStatus \u003d null;\n    int exitStatus \u003d ContainerExitStatus.INVALID;\n    switch (event.getType()) {\n    case LAUNCH_FAILED:\n      RMAppAttemptLaunchFailedEvent launchFaileEvent \u003d\n          (RMAppAttemptLaunchFailedEvent) event;\n      diags \u003d launchFaileEvent.getMessage();\n      break;\n    case REGISTERED:\n      diags \u003d getUnexpectedAMRegisteredDiagnostics();\n      break;\n    case UNREGISTERED:\n      RMAppAttemptUnregistrationEvent unregisterEvent \u003d\n          (RMAppAttemptUnregistrationEvent) event;\n      diags \u003d unregisterEvent.getDiagnostics();\n      finalTrackingUrl \u003d sanitizeTrackingUrl(unregisterEvent.getFinalTrackingUrl());\n      finalStatus \u003d unregisterEvent.getFinalApplicationStatus();\n      break;\n    case CONTAINER_FINISHED:\n      RMAppAttemptContainerFinishedEvent finishEvent \u003d\n          (RMAppAttemptContainerFinishedEvent) event;\n      diags \u003d getAMContainerCrashedDiagnostics(finishEvent);\n      exitStatus \u003d finishEvent.getContainerStatus().getExitStatus();\n      break;\n    case KILL:\n      break;\n    case EXPIRE:\n      diags \u003d getAMExpiredDiagnostics(event);\n      break;\n    default:\n      break;\n    }\n\n    RMStateStore rmStore \u003d rmContext.getStateStore();\n    ApplicationAttemptState attemptState \u003d\n        new ApplicationAttemptState(applicationAttemptId, getMasterContainer(),\n          rmStore.getCredentialsFromAppAttempt(this), startTime,\n          stateToBeStored, finalTrackingUrl, diags, finalStatus, exitStatus);\n    LOG.info(\"Updating application attempt \" + applicationAttemptId\n        + \" with final state: \" + targetedFinalState + \", and exit status: \"\n        + exitStatus);\n    rmStore.updateApplicationAttemptState(attemptState);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java",
      "extendedDetails": {}
    },
    "dab635980d089a0836c08a58d915dfa32ae3c7c0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1345. Remove FINAL_SAVING state from YarnApplicationAttemptState. Contributed by Zhijie Shen\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1567820 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/02/14 4:59 PM",
      "commitName": "dab635980d089a0836c08a58d915dfa32ae3c7c0",
      "commitAuthor": "Jian He",
      "commitDateOld": "25/01/14 8:51 PM",
      "commitNameOld": "cbee889711eddc5c67a61df4a6531b4ab3cd205a",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 17.84,
      "commitsBetweenForRepo": 146,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,55 @@\n   private void rememberTargetTransitionsAndStoreState(RMAppAttemptEvent event,\n       Object transitionToDo, RMAppAttemptState targetFinalState,\n       RMAppAttemptState stateToBeStored) {\n \n     rememberTargetTransitions(event, transitionToDo, targetFinalState);\n+    stateBeforeFinalSaving \u003d getState();\n \n     // As of today, finalState, diagnostics, final-tracking-url and\n     // finalAppStatus are the only things that we store into the StateStore\n     // AFTER the initial saving on app-attempt-start\n     // These fields can be visible from outside only after they are saved in\n     // StateStore\n     String diags \u003d null;\n     String finalTrackingUrl \u003d null;\n     FinalApplicationStatus finalStatus \u003d null;\n \n     switch (event.getType()) {\n     case LAUNCH_FAILED:\n       RMAppAttemptLaunchFailedEvent launchFaileEvent \u003d\n           (RMAppAttemptLaunchFailedEvent) event;\n       diags \u003d launchFaileEvent.getMessage();\n       break;\n     case REGISTERED:\n       diags \u003d getUnexpectedAMRegisteredDiagnostics();\n       break;\n     case UNREGISTERED:\n       RMAppAttemptUnregistrationEvent unregisterEvent \u003d\n           (RMAppAttemptUnregistrationEvent) event;\n       diags \u003d unregisterEvent.getDiagnostics();\n       finalTrackingUrl \u003d sanitizeTrackingUrl(unregisterEvent.getFinalTrackingUrl());\n       finalStatus \u003d unregisterEvent.getFinalApplicationStatus();\n       break;\n     case CONTAINER_FINISHED:\n       RMAppAttemptContainerFinishedEvent finishEvent \u003d\n           (RMAppAttemptContainerFinishedEvent) event;\n       diags \u003d getAMContainerCrashedDiagnostics(finishEvent);\n       break;\n     case KILL:\n       break;\n     case EXPIRE:\n       diags \u003d getAMExpiredDiagnostics(event);\n       break;\n     default:\n       break;\n     }\n \n     RMStateStore rmStore \u003d rmContext.getStateStore();\n     ApplicationAttemptState attemptState \u003d\n         new ApplicationAttemptState(applicationAttemptId, getMasterContainer(),\n           rmStore.getCredentialsFromAppAttempt(this), startTime,\n           stateToBeStored, finalTrackingUrl, diags, finalStatus);\n     LOG.info(\"Updating application attempt \" + applicationAttemptId\n         + \" with final state: \" + targetedFinalState);\n     rmStore.updateApplicationAttemptState(attemptState);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void rememberTargetTransitionsAndStoreState(RMAppAttemptEvent event,\n      Object transitionToDo, RMAppAttemptState targetFinalState,\n      RMAppAttemptState stateToBeStored) {\n\n    rememberTargetTransitions(event, transitionToDo, targetFinalState);\n    stateBeforeFinalSaving \u003d getState();\n\n    // As of today, finalState, diagnostics, final-tracking-url and\n    // finalAppStatus are the only things that we store into the StateStore\n    // AFTER the initial saving on app-attempt-start\n    // These fields can be visible from outside only after they are saved in\n    // StateStore\n    String diags \u003d null;\n    String finalTrackingUrl \u003d null;\n    FinalApplicationStatus finalStatus \u003d null;\n\n    switch (event.getType()) {\n    case LAUNCH_FAILED:\n      RMAppAttemptLaunchFailedEvent launchFaileEvent \u003d\n          (RMAppAttemptLaunchFailedEvent) event;\n      diags \u003d launchFaileEvent.getMessage();\n      break;\n    case REGISTERED:\n      diags \u003d getUnexpectedAMRegisteredDiagnostics();\n      break;\n    case UNREGISTERED:\n      RMAppAttemptUnregistrationEvent unregisterEvent \u003d\n          (RMAppAttemptUnregistrationEvent) event;\n      diags \u003d unregisterEvent.getDiagnostics();\n      finalTrackingUrl \u003d sanitizeTrackingUrl(unregisterEvent.getFinalTrackingUrl());\n      finalStatus \u003d unregisterEvent.getFinalApplicationStatus();\n      break;\n    case CONTAINER_FINISHED:\n      RMAppAttemptContainerFinishedEvent finishEvent \u003d\n          (RMAppAttemptContainerFinishedEvent) event;\n      diags \u003d getAMContainerCrashedDiagnostics(finishEvent);\n      break;\n    case KILL:\n      break;\n    case EXPIRE:\n      diags \u003d getAMExpiredDiagnostics(event);\n      break;\n    default:\n      break;\n    }\n\n    RMStateStore rmStore \u003d rmContext.getStateStore();\n    ApplicationAttemptState attemptState \u003d\n        new ApplicationAttemptState(applicationAttemptId, getMasterContainer(),\n          rmStore.getCredentialsFromAppAttempt(this), startTime,\n          stateToBeStored, finalTrackingUrl, diags, finalStatus);\n    LOG.info(\"Updating application attempt \" + applicationAttemptId\n        + \" with final state: \" + targetedFinalState);\n    rmStore.updateApplicationAttemptState(attemptState);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java",
      "extendedDetails": {}
    },
    "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1493. Changed ResourceManager and Scheduler interfacing to recognize app-attempts separately from apps. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1554896 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/01/14 12:19 PM",
      "commitName": "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "27/12/13 5:09 PM",
      "commitNameOld": "8f0bf54d3442e6beedfaeaf3b53c5769019ca9d1",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 5.8,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,54 @@\n   private void rememberTargetTransitionsAndStoreState(RMAppAttemptEvent event,\n       Object transitionToDo, RMAppAttemptState targetFinalState,\n       RMAppAttemptState stateToBeStored) {\n \n     rememberTargetTransitions(event, transitionToDo, targetFinalState);\n \n     // As of today, finalState, diagnostics, final-tracking-url and\n     // finalAppStatus are the only things that we store into the StateStore\n     // AFTER the initial saving on app-attempt-start\n     // These fields can be visible from outside only after they are saved in\n     // StateStore\n     String diags \u003d null;\n     String finalTrackingUrl \u003d null;\n     FinalApplicationStatus finalStatus \u003d null;\n \n     switch (event.getType()) {\n-    case APP_REJECTED:\n-      RMAppAttemptRejectedEvent rejectedEvent \u003d\n-          (RMAppAttemptRejectedEvent) event;\n-      diags \u003d rejectedEvent.getMessage();\n-      break;\n     case LAUNCH_FAILED:\n       RMAppAttemptLaunchFailedEvent launchFaileEvent \u003d\n           (RMAppAttemptLaunchFailedEvent) event;\n       diags \u003d launchFaileEvent.getMessage();\n       break;\n     case REGISTERED:\n       diags \u003d getUnexpectedAMRegisteredDiagnostics();\n       break;\n     case UNREGISTERED:\n       RMAppAttemptUnregistrationEvent unregisterEvent \u003d\n           (RMAppAttemptUnregistrationEvent) event;\n       diags \u003d unregisterEvent.getDiagnostics();\n       finalTrackingUrl \u003d sanitizeTrackingUrl(unregisterEvent.getFinalTrackingUrl());\n       finalStatus \u003d unregisterEvent.getFinalApplicationStatus();\n       break;\n     case CONTAINER_FINISHED:\n       RMAppAttemptContainerFinishedEvent finishEvent \u003d\n           (RMAppAttemptContainerFinishedEvent) event;\n       diags \u003d getAMContainerCrashedDiagnostics(finishEvent);\n       break;\n     case KILL:\n       break;\n     case EXPIRE:\n       diags \u003d getAMExpiredDiagnostics(event);\n       break;\n     default:\n       break;\n     }\n \n     RMStateStore rmStore \u003d rmContext.getStateStore();\n     ApplicationAttemptState attemptState \u003d\n         new ApplicationAttemptState(applicationAttemptId, getMasterContainer(),\n           rmStore.getCredentialsFromAppAttempt(this), startTime,\n           stateToBeStored, finalTrackingUrl, diags, finalStatus);\n     LOG.info(\"Updating application attempt \" + applicationAttemptId\n         + \" with final state: \" + targetedFinalState);\n     rmStore.updateApplicationAttemptState(attemptState);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void rememberTargetTransitionsAndStoreState(RMAppAttemptEvent event,\n      Object transitionToDo, RMAppAttemptState targetFinalState,\n      RMAppAttemptState stateToBeStored) {\n\n    rememberTargetTransitions(event, transitionToDo, targetFinalState);\n\n    // As of today, finalState, diagnostics, final-tracking-url and\n    // finalAppStatus are the only things that we store into the StateStore\n    // AFTER the initial saving on app-attempt-start\n    // These fields can be visible from outside only after they are saved in\n    // StateStore\n    String diags \u003d null;\n    String finalTrackingUrl \u003d null;\n    FinalApplicationStatus finalStatus \u003d null;\n\n    switch (event.getType()) {\n    case LAUNCH_FAILED:\n      RMAppAttemptLaunchFailedEvent launchFaileEvent \u003d\n          (RMAppAttemptLaunchFailedEvent) event;\n      diags \u003d launchFaileEvent.getMessage();\n      break;\n    case REGISTERED:\n      diags \u003d getUnexpectedAMRegisteredDiagnostics();\n      break;\n    case UNREGISTERED:\n      RMAppAttemptUnregistrationEvent unregisterEvent \u003d\n          (RMAppAttemptUnregistrationEvent) event;\n      diags \u003d unregisterEvent.getDiagnostics();\n      finalTrackingUrl \u003d sanitizeTrackingUrl(unregisterEvent.getFinalTrackingUrl());\n      finalStatus \u003d unregisterEvent.getFinalApplicationStatus();\n      break;\n    case CONTAINER_FINISHED:\n      RMAppAttemptContainerFinishedEvent finishEvent \u003d\n          (RMAppAttemptContainerFinishedEvent) event;\n      diags \u003d getAMContainerCrashedDiagnostics(finishEvent);\n      break;\n    case KILL:\n      break;\n    case EXPIRE:\n      diags \u003d getAMExpiredDiagnostics(event);\n      break;\n    default:\n      break;\n    }\n\n    RMStateStore rmStore \u003d rmContext.getStateStore();\n    ApplicationAttemptState attemptState \u003d\n        new ApplicationAttemptState(applicationAttemptId, getMasterContainer(),\n          rmStore.getCredentialsFromAppAttempt(this), startTime,\n          stateToBeStored, finalTrackingUrl, diags, finalStatus);\n    LOG.info(\"Updating application attempt \" + applicationAttemptId\n        + \" with final state: \" + targetedFinalState);\n    rmStore.updateApplicationAttemptState(attemptState);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java",
      "extendedDetails": {}
    },
    "9f4d4e27fb1760b352cc5b301cd65a50d2d43ff6": {
      "type": "Yintroduced",
      "commitMessage": "YARN-891. Modified ResourceManager state-store to remember completed applications so that clients can get information about them post RM-restart. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1537560 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/10/13 10:25 AM",
      "commitName": "9f4d4e27fb1760b352cc5b301cd65a50d2d43ff6",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,59 @@\n+  private void rememberTargetTransitionsAndStoreState(RMAppAttemptEvent event,\n+      Object transitionToDo, RMAppAttemptState targetFinalState,\n+      RMAppAttemptState stateToBeStored) {\n+\n+    rememberTargetTransitions(event, transitionToDo, targetFinalState);\n+\n+    // As of today, finalState, diagnostics, final-tracking-url and\n+    // finalAppStatus are the only things that we store into the StateStore\n+    // AFTER the initial saving on app-attempt-start\n+    // These fields can be visible from outside only after they are saved in\n+    // StateStore\n+    String diags \u003d null;\n+    String finalTrackingUrl \u003d null;\n+    FinalApplicationStatus finalStatus \u003d null;\n+\n+    switch (event.getType()) {\n+    case APP_REJECTED:\n+      RMAppAttemptRejectedEvent rejectedEvent \u003d\n+          (RMAppAttemptRejectedEvent) event;\n+      diags \u003d rejectedEvent.getMessage();\n+      break;\n+    case LAUNCH_FAILED:\n+      RMAppAttemptLaunchFailedEvent launchFaileEvent \u003d\n+          (RMAppAttemptLaunchFailedEvent) event;\n+      diags \u003d launchFaileEvent.getMessage();\n+      break;\n+    case REGISTERED:\n+      diags \u003d getUnexpectedAMRegisteredDiagnostics();\n+      break;\n+    case UNREGISTERED:\n+      RMAppAttemptUnregistrationEvent unregisterEvent \u003d\n+          (RMAppAttemptUnregistrationEvent) event;\n+      diags \u003d unregisterEvent.getDiagnostics();\n+      finalTrackingUrl \u003d sanitizeTrackingUrl(unregisterEvent.getFinalTrackingUrl());\n+      finalStatus \u003d unregisterEvent.getFinalApplicationStatus();\n+      break;\n+    case CONTAINER_FINISHED:\n+      RMAppAttemptContainerFinishedEvent finishEvent \u003d\n+          (RMAppAttemptContainerFinishedEvent) event;\n+      diags \u003d getAMContainerCrashedDiagnostics(finishEvent);\n+      break;\n+    case KILL:\n+      break;\n+    case EXPIRE:\n+      diags \u003d getAMExpiredDiagnostics(event);\n+      break;\n+    default:\n+      break;\n+    }\n+\n+    RMStateStore rmStore \u003d rmContext.getStateStore();\n+    ApplicationAttemptState attemptState \u003d\n+        new ApplicationAttemptState(applicationAttemptId, getMasterContainer(),\n+          rmStore.getCredentialsFromAppAttempt(this), startTime,\n+          stateToBeStored, finalTrackingUrl, diags, finalStatus);\n+    LOG.info(\"Updating application attempt \" + applicationAttemptId\n+        + \" with final state: \" + targetedFinalState);\n+    rmStore.updateApplicationAttemptState(attemptState);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void rememberTargetTransitionsAndStoreState(RMAppAttemptEvent event,\n      Object transitionToDo, RMAppAttemptState targetFinalState,\n      RMAppAttemptState stateToBeStored) {\n\n    rememberTargetTransitions(event, transitionToDo, targetFinalState);\n\n    // As of today, finalState, diagnostics, final-tracking-url and\n    // finalAppStatus are the only things that we store into the StateStore\n    // AFTER the initial saving on app-attempt-start\n    // These fields can be visible from outside only after they are saved in\n    // StateStore\n    String diags \u003d null;\n    String finalTrackingUrl \u003d null;\n    FinalApplicationStatus finalStatus \u003d null;\n\n    switch (event.getType()) {\n    case APP_REJECTED:\n      RMAppAttemptRejectedEvent rejectedEvent \u003d\n          (RMAppAttemptRejectedEvent) event;\n      diags \u003d rejectedEvent.getMessage();\n      break;\n    case LAUNCH_FAILED:\n      RMAppAttemptLaunchFailedEvent launchFaileEvent \u003d\n          (RMAppAttemptLaunchFailedEvent) event;\n      diags \u003d launchFaileEvent.getMessage();\n      break;\n    case REGISTERED:\n      diags \u003d getUnexpectedAMRegisteredDiagnostics();\n      break;\n    case UNREGISTERED:\n      RMAppAttemptUnregistrationEvent unregisterEvent \u003d\n          (RMAppAttemptUnregistrationEvent) event;\n      diags \u003d unregisterEvent.getDiagnostics();\n      finalTrackingUrl \u003d sanitizeTrackingUrl(unregisterEvent.getFinalTrackingUrl());\n      finalStatus \u003d unregisterEvent.getFinalApplicationStatus();\n      break;\n    case CONTAINER_FINISHED:\n      RMAppAttemptContainerFinishedEvent finishEvent \u003d\n          (RMAppAttemptContainerFinishedEvent) event;\n      diags \u003d getAMContainerCrashedDiagnostics(finishEvent);\n      break;\n    case KILL:\n      break;\n    case EXPIRE:\n      diags \u003d getAMExpiredDiagnostics(event);\n      break;\n    default:\n      break;\n    }\n\n    RMStateStore rmStore \u003d rmContext.getStateStore();\n    ApplicationAttemptState attemptState \u003d\n        new ApplicationAttemptState(applicationAttemptId, getMasterContainer(),\n          rmStore.getCredentialsFromAppAttempt(this), startTime,\n          stateToBeStored, finalTrackingUrl, diags, finalStatus);\n    LOG.info(\"Updating application attempt \" + applicationAttemptId\n        + \" with final state: \" + targetedFinalState);\n    rmStore.updateApplicationAttemptState(attemptState);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/attempt/RMAppAttemptImpl.java"
    }
  }
}