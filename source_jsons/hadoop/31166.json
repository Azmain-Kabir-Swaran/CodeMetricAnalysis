{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RouterWebServiceUtil.java",
  "functionName": "invokeRMWebService",
  "functionId": "invokeRMWebService___webApp-String__path-String__method-HTTPMethods__additionalPath-String__queryParams-Map__String,String[]____formParam-Object__mediaType-String__conf-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-router/src/main/java/org/apache/hadoop/yarn/server/router/webapp/RouterWebServiceUtil.java",
  "functionStartLine": 167,
  "functionEndLine": 223,
  "numCommitsSeen": 19,
  "timeTaken": 4812,
  "changeHistory": [
    "25361b077bd34606259dac5a00c41faddd2dfc7d",
    "8be5707067509b78bde5fcf60072ae988d5a9f32",
    "acda6b96a4e92e432bd1d97fa14004a11e70387e"
  ],
  "changeHistoryShort": {
    "25361b077bd34606259dac5a00c41faddd2dfc7d": "Ymultichange(Yparameterchange,Ybodychange)",
    "8be5707067509b78bde5fcf60072ae988d5a9f32": "Ymultichange(Yparameterchange,Ybodychange)",
    "acda6b96a4e92e432bd1d97fa14004a11e70387e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "25361b077bd34606259dac5a00c41faddd2dfc7d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-10120. Https Support in Router WebServiceClient.\n\nContributed by Bilwa S T.\n",
      "commitDate": "02/04/20 5:41 AM",
      "commitName": "25361b077bd34606259dac5a00c41faddd2dfc7d",
      "commitAuthor": "Prabhu Joseph",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-10120. Https Support in Router WebServiceClient.\n\nContributed by Bilwa S T.\n",
          "commitDate": "02/04/20 5:41 AM",
          "commitName": "25361b077bd34606259dac5a00c41faddd2dfc7d",
          "commitAuthor": "Prabhu Joseph",
          "commitDateOld": "27/10/17 4:46 PM",
          "commitNameOld": "8be5707067509b78bde5fcf60072ae988d5a9f32",
          "commitAuthorOld": "Inigo Goiri",
          "daysBetweenCommits": 887.54,
          "commitsBetweenForRepo": 6584,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,52 +1,57 @@\n   private static ClientResponse invokeRMWebService(String webApp, String path,\n       HTTPMethods method, String additionalPath,\n-      Map\u003cString, String[]\u003e queryParams, Object formParam, String mediaType) {\n-    Client client \u003d Client.create();\n-\n-    WebResource webResource \u003d client.resource(webApp).path(path);\n+      Map\u003cString, String[]\u003e queryParams, Object formParam, String mediaType,\n+      Configuration conf) {\n+    Client client \u003d WebServiceClient.getWebServiceClient().createClient();\n+    InetSocketAddress socketAddress \u003d NetUtils\n+        .getConnectAddress(NetUtils.createSocketAddr(webApp));\n+    String scheme \u003d YarnConfiguration.useHttps(conf) ? \"https://\" : \"http://\";\n+    String webAddress \u003d scheme + socketAddress.getHostName() + \":\"\n+        + socketAddress.getPort();\n+    WebResource webResource \u003d client.resource(webAddress).path(path);\n \n     if (additionalPath !\u003d null \u0026\u0026 !additionalPath.isEmpty()) {\n       webResource \u003d webResource.path(additionalPath);\n     }\n \n     if (queryParams !\u003d null \u0026\u0026 !queryParams.isEmpty()) {\n       MultivaluedMap\u003cString, String\u003e paramMap \u003d new MultivaluedMapImpl();\n \n       for (Entry\u003cString, String[]\u003e param : queryParams.entrySet()) {\n         String[] values \u003d param.getValue();\n         for (int i \u003d 0; i \u003c values.length; i++) {\n           paramMap.add(param.getKey(), values[i]);\n         }\n       }\n       webResource \u003d webResource.queryParams(paramMap);\n     }\n \n     Builder builder \u003d null;\n     if (formParam !\u003d null) {\n       builder \u003d webResource.entity(formParam, mediaType);\n       builder \u003d builder.accept(mediaType);\n     } else {\n       builder \u003d webResource.accept(mediaType);\n     }\n \n     ClientResponse response \u003d null;\n \n     switch (method) {\n     case DELETE:\n       response \u003d builder.delete(ClientResponse.class);\n       break;\n     case GET:\n       response \u003d builder.get(ClientResponse.class);\n       break;\n     case POST:\n       response \u003d builder.post(ClientResponse.class);\n       break;\n     case PUT:\n       response \u003d builder.put(ClientResponse.class);\n       break;\n     default:\n       break;\n     }\n \n     return response;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static ClientResponse invokeRMWebService(String webApp, String path,\n      HTTPMethods method, String additionalPath,\n      Map\u003cString, String[]\u003e queryParams, Object formParam, String mediaType,\n      Configuration conf) {\n    Client client \u003d WebServiceClient.getWebServiceClient().createClient();\n    InetSocketAddress socketAddress \u003d NetUtils\n        .getConnectAddress(NetUtils.createSocketAddr(webApp));\n    String scheme \u003d YarnConfiguration.useHttps(conf) ? \"https://\" : \"http://\";\n    String webAddress \u003d scheme + socketAddress.getHostName() + \":\"\n        + socketAddress.getPort();\n    WebResource webResource \u003d client.resource(webAddress).path(path);\n\n    if (additionalPath !\u003d null \u0026\u0026 !additionalPath.isEmpty()) {\n      webResource \u003d webResource.path(additionalPath);\n    }\n\n    if (queryParams !\u003d null \u0026\u0026 !queryParams.isEmpty()) {\n      MultivaluedMap\u003cString, String\u003e paramMap \u003d new MultivaluedMapImpl();\n\n      for (Entry\u003cString, String[]\u003e param : queryParams.entrySet()) {\n        String[] values \u003d param.getValue();\n        for (int i \u003d 0; i \u003c values.length; i++) {\n          paramMap.add(param.getKey(), values[i]);\n        }\n      }\n      webResource \u003d webResource.queryParams(paramMap);\n    }\n\n    Builder builder \u003d null;\n    if (formParam !\u003d null) {\n      builder \u003d webResource.entity(formParam, mediaType);\n      builder \u003d builder.accept(mediaType);\n    } else {\n      builder \u003d webResource.accept(mediaType);\n    }\n\n    ClientResponse response \u003d null;\n\n    switch (method) {\n    case DELETE:\n      response \u003d builder.delete(ClientResponse.class);\n      break;\n    case GET:\n      response \u003d builder.get(ClientResponse.class);\n      break;\n    case POST:\n      response \u003d builder.post(ClientResponse.class);\n      break;\n    case PUT:\n      response \u003d builder.put(ClientResponse.class);\n      break;\n    default:\n      break;\n    }\n\n    return response;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-router/src/main/java/org/apache/hadoop/yarn/server/router/webapp/RouterWebServiceUtil.java",
          "extendedDetails": {
            "oldValue": "[webApp-String, path-String, method-HTTPMethods, additionalPath-String, queryParams-Map\u003cString,String[]\u003e, formParam-Object, mediaType-String]",
            "newValue": "[webApp-String, path-String, method-HTTPMethods, additionalPath-String, queryParams-Map\u003cString,String[]\u003e, formParam-Object, mediaType-String, conf-Configuration]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-10120. Https Support in Router WebServiceClient.\n\nContributed by Bilwa S T.\n",
          "commitDate": "02/04/20 5:41 AM",
          "commitName": "25361b077bd34606259dac5a00c41faddd2dfc7d",
          "commitAuthor": "Prabhu Joseph",
          "commitDateOld": "27/10/17 4:46 PM",
          "commitNameOld": "8be5707067509b78bde5fcf60072ae988d5a9f32",
          "commitAuthorOld": "Inigo Goiri",
          "daysBetweenCommits": 887.54,
          "commitsBetweenForRepo": 6584,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,52 +1,57 @@\n   private static ClientResponse invokeRMWebService(String webApp, String path,\n       HTTPMethods method, String additionalPath,\n-      Map\u003cString, String[]\u003e queryParams, Object formParam, String mediaType) {\n-    Client client \u003d Client.create();\n-\n-    WebResource webResource \u003d client.resource(webApp).path(path);\n+      Map\u003cString, String[]\u003e queryParams, Object formParam, String mediaType,\n+      Configuration conf) {\n+    Client client \u003d WebServiceClient.getWebServiceClient().createClient();\n+    InetSocketAddress socketAddress \u003d NetUtils\n+        .getConnectAddress(NetUtils.createSocketAddr(webApp));\n+    String scheme \u003d YarnConfiguration.useHttps(conf) ? \"https://\" : \"http://\";\n+    String webAddress \u003d scheme + socketAddress.getHostName() + \":\"\n+        + socketAddress.getPort();\n+    WebResource webResource \u003d client.resource(webAddress).path(path);\n \n     if (additionalPath !\u003d null \u0026\u0026 !additionalPath.isEmpty()) {\n       webResource \u003d webResource.path(additionalPath);\n     }\n \n     if (queryParams !\u003d null \u0026\u0026 !queryParams.isEmpty()) {\n       MultivaluedMap\u003cString, String\u003e paramMap \u003d new MultivaluedMapImpl();\n \n       for (Entry\u003cString, String[]\u003e param : queryParams.entrySet()) {\n         String[] values \u003d param.getValue();\n         for (int i \u003d 0; i \u003c values.length; i++) {\n           paramMap.add(param.getKey(), values[i]);\n         }\n       }\n       webResource \u003d webResource.queryParams(paramMap);\n     }\n \n     Builder builder \u003d null;\n     if (formParam !\u003d null) {\n       builder \u003d webResource.entity(formParam, mediaType);\n       builder \u003d builder.accept(mediaType);\n     } else {\n       builder \u003d webResource.accept(mediaType);\n     }\n \n     ClientResponse response \u003d null;\n \n     switch (method) {\n     case DELETE:\n       response \u003d builder.delete(ClientResponse.class);\n       break;\n     case GET:\n       response \u003d builder.get(ClientResponse.class);\n       break;\n     case POST:\n       response \u003d builder.post(ClientResponse.class);\n       break;\n     case PUT:\n       response \u003d builder.put(ClientResponse.class);\n       break;\n     default:\n       break;\n     }\n \n     return response;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static ClientResponse invokeRMWebService(String webApp, String path,\n      HTTPMethods method, String additionalPath,\n      Map\u003cString, String[]\u003e queryParams, Object formParam, String mediaType,\n      Configuration conf) {\n    Client client \u003d WebServiceClient.getWebServiceClient().createClient();\n    InetSocketAddress socketAddress \u003d NetUtils\n        .getConnectAddress(NetUtils.createSocketAddr(webApp));\n    String scheme \u003d YarnConfiguration.useHttps(conf) ? \"https://\" : \"http://\";\n    String webAddress \u003d scheme + socketAddress.getHostName() + \":\"\n        + socketAddress.getPort();\n    WebResource webResource \u003d client.resource(webAddress).path(path);\n\n    if (additionalPath !\u003d null \u0026\u0026 !additionalPath.isEmpty()) {\n      webResource \u003d webResource.path(additionalPath);\n    }\n\n    if (queryParams !\u003d null \u0026\u0026 !queryParams.isEmpty()) {\n      MultivaluedMap\u003cString, String\u003e paramMap \u003d new MultivaluedMapImpl();\n\n      for (Entry\u003cString, String[]\u003e param : queryParams.entrySet()) {\n        String[] values \u003d param.getValue();\n        for (int i \u003d 0; i \u003c values.length; i++) {\n          paramMap.add(param.getKey(), values[i]);\n        }\n      }\n      webResource \u003d webResource.queryParams(paramMap);\n    }\n\n    Builder builder \u003d null;\n    if (formParam !\u003d null) {\n      builder \u003d webResource.entity(formParam, mediaType);\n      builder \u003d builder.accept(mediaType);\n    } else {\n      builder \u003d webResource.accept(mediaType);\n    }\n\n    ClientResponse response \u003d null;\n\n    switch (method) {\n    case DELETE:\n      response \u003d builder.delete(ClientResponse.class);\n      break;\n    case GET:\n      response \u003d builder.get(ClientResponse.class);\n      break;\n    case POST:\n      response \u003d builder.post(ClientResponse.class);\n      break;\n    case PUT:\n      response \u003d builder.put(ClientResponse.class);\n      break;\n    default:\n      break;\n    }\n\n    return response;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-router/src/main/java/org/apache/hadoop/yarn/server/router/webapp/RouterWebServiceUtil.java",
          "extendedDetails": {}
        }
      ]
    },
    "8be5707067509b78bde5fcf60072ae988d5a9f32": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-7276. Federation Router Web Service fixes. Contributed by Inigo Goiri.\n",
      "commitDate": "27/10/17 4:46 PM",
      "commitName": "8be5707067509b78bde5fcf60072ae988d5a9f32",
      "commitAuthor": "Inigo Goiri",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7276. Federation Router Web Service fixes. Contributed by Inigo Goiri.\n",
          "commitDate": "27/10/17 4:46 PM",
          "commitName": "8be5707067509b78bde5fcf60072ae988d5a9f32",
          "commitAuthor": "Inigo Goiri",
          "commitDateOld": "17/10/17 10:15 AM",
          "commitNameOld": "acabc657ff5433f36ce1b238cecd3a3b5bbe87ae",
          "commitAuthorOld": "Haibo Chen",
          "daysBetweenCommits": 10.27,
          "commitsBetweenForRepo": 68,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,54 +1,52 @@\n   private static ClientResponse invokeRMWebService(String webApp, String path,\n       HTTPMethods method, String additionalPath,\n-      Map\u003cString, String[]\u003e queryParams, Object formParam) {\n+      Map\u003cString, String[]\u003e queryParams, Object formParam, String mediaType) {\n     Client client \u003d Client.create();\n \n     WebResource webResource \u003d client.resource(webApp).path(path);\n \n     if (additionalPath !\u003d null \u0026\u0026 !additionalPath.isEmpty()) {\n       webResource \u003d webResource.path(additionalPath);\n     }\n \n     if (queryParams !\u003d null \u0026\u0026 !queryParams.isEmpty()) {\n       MultivaluedMap\u003cString, String\u003e paramMap \u003d new MultivaluedMapImpl();\n \n       for (Entry\u003cString, String[]\u003e param : queryParams.entrySet()) {\n         String[] values \u003d param.getValue();\n         for (int i \u003d 0; i \u003c values.length; i++) {\n           paramMap.add(param.getKey(), values[i]);\n         }\n       }\n       webResource \u003d webResource.queryParams(paramMap);\n     }\n \n-    // I can forward the call in JSON or XML since the Router will convert it\n-    // again in Object before send it back to the client\n     Builder builder \u003d null;\n     if (formParam !\u003d null) {\n-      builder \u003d webResource.entity(formParam, MediaType.APPLICATION_XML);\n-      builder \u003d builder.accept(MediaType.APPLICATION_XML);\n+      builder \u003d webResource.entity(formParam, mediaType);\n+      builder \u003d builder.accept(mediaType);\n     } else {\n-      builder \u003d webResource.accept(MediaType.APPLICATION_XML);\n+      builder \u003d webResource.accept(mediaType);\n     }\n \n     ClientResponse response \u003d null;\n \n     switch (method) {\n     case DELETE:\n       response \u003d builder.delete(ClientResponse.class);\n       break;\n     case GET:\n       response \u003d builder.get(ClientResponse.class);\n       break;\n     case POST:\n       response \u003d builder.post(ClientResponse.class);\n       break;\n     case PUT:\n       response \u003d builder.put(ClientResponse.class);\n       break;\n     default:\n       break;\n     }\n \n     return response;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static ClientResponse invokeRMWebService(String webApp, String path,\n      HTTPMethods method, String additionalPath,\n      Map\u003cString, String[]\u003e queryParams, Object formParam, String mediaType) {\n    Client client \u003d Client.create();\n\n    WebResource webResource \u003d client.resource(webApp).path(path);\n\n    if (additionalPath !\u003d null \u0026\u0026 !additionalPath.isEmpty()) {\n      webResource \u003d webResource.path(additionalPath);\n    }\n\n    if (queryParams !\u003d null \u0026\u0026 !queryParams.isEmpty()) {\n      MultivaluedMap\u003cString, String\u003e paramMap \u003d new MultivaluedMapImpl();\n\n      for (Entry\u003cString, String[]\u003e param : queryParams.entrySet()) {\n        String[] values \u003d param.getValue();\n        for (int i \u003d 0; i \u003c values.length; i++) {\n          paramMap.add(param.getKey(), values[i]);\n        }\n      }\n      webResource \u003d webResource.queryParams(paramMap);\n    }\n\n    Builder builder \u003d null;\n    if (formParam !\u003d null) {\n      builder \u003d webResource.entity(formParam, mediaType);\n      builder \u003d builder.accept(mediaType);\n    } else {\n      builder \u003d webResource.accept(mediaType);\n    }\n\n    ClientResponse response \u003d null;\n\n    switch (method) {\n    case DELETE:\n      response \u003d builder.delete(ClientResponse.class);\n      break;\n    case GET:\n      response \u003d builder.get(ClientResponse.class);\n      break;\n    case POST:\n      response \u003d builder.post(ClientResponse.class);\n      break;\n    case PUT:\n      response \u003d builder.put(ClientResponse.class);\n      break;\n    default:\n      break;\n    }\n\n    return response;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-router/src/main/java/org/apache/hadoop/yarn/server/router/webapp/RouterWebServiceUtil.java",
          "extendedDetails": {
            "oldValue": "[webApp-String, path-String, method-HTTPMethods, additionalPath-String, queryParams-Map\u003cString,String[]\u003e, formParam-Object]",
            "newValue": "[webApp-String, path-String, method-HTTPMethods, additionalPath-String, queryParams-Map\u003cString,String[]\u003e, formParam-Object, mediaType-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7276. Federation Router Web Service fixes. Contributed by Inigo Goiri.\n",
          "commitDate": "27/10/17 4:46 PM",
          "commitName": "8be5707067509b78bde5fcf60072ae988d5a9f32",
          "commitAuthor": "Inigo Goiri",
          "commitDateOld": "17/10/17 10:15 AM",
          "commitNameOld": "acabc657ff5433f36ce1b238cecd3a3b5bbe87ae",
          "commitAuthorOld": "Haibo Chen",
          "daysBetweenCommits": 10.27,
          "commitsBetweenForRepo": 68,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,54 +1,52 @@\n   private static ClientResponse invokeRMWebService(String webApp, String path,\n       HTTPMethods method, String additionalPath,\n-      Map\u003cString, String[]\u003e queryParams, Object formParam) {\n+      Map\u003cString, String[]\u003e queryParams, Object formParam, String mediaType) {\n     Client client \u003d Client.create();\n \n     WebResource webResource \u003d client.resource(webApp).path(path);\n \n     if (additionalPath !\u003d null \u0026\u0026 !additionalPath.isEmpty()) {\n       webResource \u003d webResource.path(additionalPath);\n     }\n \n     if (queryParams !\u003d null \u0026\u0026 !queryParams.isEmpty()) {\n       MultivaluedMap\u003cString, String\u003e paramMap \u003d new MultivaluedMapImpl();\n \n       for (Entry\u003cString, String[]\u003e param : queryParams.entrySet()) {\n         String[] values \u003d param.getValue();\n         for (int i \u003d 0; i \u003c values.length; i++) {\n           paramMap.add(param.getKey(), values[i]);\n         }\n       }\n       webResource \u003d webResource.queryParams(paramMap);\n     }\n \n-    // I can forward the call in JSON or XML since the Router will convert it\n-    // again in Object before send it back to the client\n     Builder builder \u003d null;\n     if (formParam !\u003d null) {\n-      builder \u003d webResource.entity(formParam, MediaType.APPLICATION_XML);\n-      builder \u003d builder.accept(MediaType.APPLICATION_XML);\n+      builder \u003d webResource.entity(formParam, mediaType);\n+      builder \u003d builder.accept(mediaType);\n     } else {\n-      builder \u003d webResource.accept(MediaType.APPLICATION_XML);\n+      builder \u003d webResource.accept(mediaType);\n     }\n \n     ClientResponse response \u003d null;\n \n     switch (method) {\n     case DELETE:\n       response \u003d builder.delete(ClientResponse.class);\n       break;\n     case GET:\n       response \u003d builder.get(ClientResponse.class);\n       break;\n     case POST:\n       response \u003d builder.post(ClientResponse.class);\n       break;\n     case PUT:\n       response \u003d builder.put(ClientResponse.class);\n       break;\n     default:\n       break;\n     }\n \n     return response;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static ClientResponse invokeRMWebService(String webApp, String path,\n      HTTPMethods method, String additionalPath,\n      Map\u003cString, String[]\u003e queryParams, Object formParam, String mediaType) {\n    Client client \u003d Client.create();\n\n    WebResource webResource \u003d client.resource(webApp).path(path);\n\n    if (additionalPath !\u003d null \u0026\u0026 !additionalPath.isEmpty()) {\n      webResource \u003d webResource.path(additionalPath);\n    }\n\n    if (queryParams !\u003d null \u0026\u0026 !queryParams.isEmpty()) {\n      MultivaluedMap\u003cString, String\u003e paramMap \u003d new MultivaluedMapImpl();\n\n      for (Entry\u003cString, String[]\u003e param : queryParams.entrySet()) {\n        String[] values \u003d param.getValue();\n        for (int i \u003d 0; i \u003c values.length; i++) {\n          paramMap.add(param.getKey(), values[i]);\n        }\n      }\n      webResource \u003d webResource.queryParams(paramMap);\n    }\n\n    Builder builder \u003d null;\n    if (formParam !\u003d null) {\n      builder \u003d webResource.entity(formParam, mediaType);\n      builder \u003d builder.accept(mediaType);\n    } else {\n      builder \u003d webResource.accept(mediaType);\n    }\n\n    ClientResponse response \u003d null;\n\n    switch (method) {\n    case DELETE:\n      response \u003d builder.delete(ClientResponse.class);\n      break;\n    case GET:\n      response \u003d builder.get(ClientResponse.class);\n      break;\n    case POST:\n      response \u003d builder.post(ClientResponse.class);\n      break;\n    case PUT:\n      response \u003d builder.put(ClientResponse.class);\n      break;\n    default:\n      break;\n    }\n\n    return response;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-router/src/main/java/org/apache/hadoop/yarn/server/router/webapp/RouterWebServiceUtil.java",
          "extendedDetails": {}
        }
      ]
    },
    "acda6b96a4e92e432bd1d97fa14004a11e70387e": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5412. Create a proxy chain for ResourceManager REST API in the Router. (Contributed by Giovanni Matteo Fumarola via curino)\n\n(cherry picked from commit b6240b92abf453affc5fd64e1eedf2d29842aa75)\n",
      "commitDate": "01/08/17 5:28 PM",
      "commitName": "acda6b96a4e92e432bd1d97fa14004a11e70387e",
      "commitAuthor": "Carlo Curino",
      "diff": "@@ -0,0 +1,54 @@\n+  private static ClientResponse invokeRMWebService(String webApp, String path,\n+      HTTPMethods method, String additionalPath,\n+      Map\u003cString, String[]\u003e queryParams, Object formParam) {\n+    Client client \u003d Client.create();\n+\n+    WebResource webResource \u003d client.resource(webApp).path(path);\n+\n+    if (additionalPath !\u003d null \u0026\u0026 !additionalPath.isEmpty()) {\n+      webResource \u003d webResource.path(additionalPath);\n+    }\n+\n+    if (queryParams !\u003d null \u0026\u0026 !queryParams.isEmpty()) {\n+      MultivaluedMap\u003cString, String\u003e paramMap \u003d new MultivaluedMapImpl();\n+\n+      for (Entry\u003cString, String[]\u003e param : queryParams.entrySet()) {\n+        String[] values \u003d param.getValue();\n+        for (int i \u003d 0; i \u003c values.length; i++) {\n+          paramMap.add(param.getKey(), values[i]);\n+        }\n+      }\n+      webResource \u003d webResource.queryParams(paramMap);\n+    }\n+\n+    // I can forward the call in JSON or XML since the Router will convert it\n+    // again in Object before send it back to the client\n+    Builder builder \u003d null;\n+    if (formParam !\u003d null) {\n+      builder \u003d webResource.entity(formParam, MediaType.APPLICATION_XML);\n+      builder \u003d builder.accept(MediaType.APPLICATION_XML);\n+    } else {\n+      builder \u003d webResource.accept(MediaType.APPLICATION_XML);\n+    }\n+\n+    ClientResponse response \u003d null;\n+\n+    switch (method) {\n+    case DELETE:\n+      response \u003d builder.delete(ClientResponse.class);\n+      break;\n+    case GET:\n+      response \u003d builder.get(ClientResponse.class);\n+      break;\n+    case POST:\n+      response \u003d builder.post(ClientResponse.class);\n+      break;\n+    case PUT:\n+      response \u003d builder.put(ClientResponse.class);\n+      break;\n+    default:\n+      break;\n+    }\n+\n+    return response;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static ClientResponse invokeRMWebService(String webApp, String path,\n      HTTPMethods method, String additionalPath,\n      Map\u003cString, String[]\u003e queryParams, Object formParam) {\n    Client client \u003d Client.create();\n\n    WebResource webResource \u003d client.resource(webApp).path(path);\n\n    if (additionalPath !\u003d null \u0026\u0026 !additionalPath.isEmpty()) {\n      webResource \u003d webResource.path(additionalPath);\n    }\n\n    if (queryParams !\u003d null \u0026\u0026 !queryParams.isEmpty()) {\n      MultivaluedMap\u003cString, String\u003e paramMap \u003d new MultivaluedMapImpl();\n\n      for (Entry\u003cString, String[]\u003e param : queryParams.entrySet()) {\n        String[] values \u003d param.getValue();\n        for (int i \u003d 0; i \u003c values.length; i++) {\n          paramMap.add(param.getKey(), values[i]);\n        }\n      }\n      webResource \u003d webResource.queryParams(paramMap);\n    }\n\n    // I can forward the call in JSON or XML since the Router will convert it\n    // again in Object before send it back to the client\n    Builder builder \u003d null;\n    if (formParam !\u003d null) {\n      builder \u003d webResource.entity(formParam, MediaType.APPLICATION_XML);\n      builder \u003d builder.accept(MediaType.APPLICATION_XML);\n    } else {\n      builder \u003d webResource.accept(MediaType.APPLICATION_XML);\n    }\n\n    ClientResponse response \u003d null;\n\n    switch (method) {\n    case DELETE:\n      response \u003d builder.delete(ClientResponse.class);\n      break;\n    case GET:\n      response \u003d builder.get(ClientResponse.class);\n      break;\n    case POST:\n      response \u003d builder.post(ClientResponse.class);\n      break;\n    case PUT:\n      response \u003d builder.put(ClientResponse.class);\n      break;\n    default:\n      break;\n    }\n\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-router/src/main/java/org/apache/hadoop/yarn/server/router/webapp/RouterWebServiceUtil.java"
    }
  }
}