{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainerLaunch.java",
  "functionName": "prepareForLaunch",
  "functionId": "prepareForLaunch___ctx-ContainerStartContext",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java",
  "functionStartLine": 608,
  "functionEndLine": 632,
  "numCommitsSeen": 95,
  "timeTaken": 1834,
  "changeHistory": [
    "c467f311d0c7155c09052d93fac12045af925583"
  ],
  "changeHistoryShort": {
    "c467f311d0c7155c09052d93fac12045af925583": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c467f311d0c7155c09052d93fac12045af925583": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7973. Added ContainerRelaunch feature for Docker containers.\n           Contributed by Shane Kumpf\n",
      "commitDate": "10/04/18 4:25 PM",
      "commitName": "c467f311d0c7155c09052d93fac12045af925583",
      "commitAuthor": "Eric Yang",
      "diff": "@@ -0,0 +1,25 @@\n+  protected int prepareForLaunch(ContainerStartContext ctx) throws IOException {\n+    ContainerId containerId \u003d container.getContainerId();\n+    if (container.isMarkedForKilling()) {\n+      LOG.info(\"Container \" + containerId + \" not launched as it has already \"\n+          + \"been marked for Killing\");\n+      this.killedBeforeStart \u003d true;\n+      return ExitCode.TERMINATED.getExitCode();\n+    }\n+    // LaunchContainer is a blocking call. We are here almost means the\n+    // container is launched, so send out the event.\n+    dispatcher.getEventHandler().handle(new ContainerEvent(\n+        containerId,\n+        ContainerEventType.CONTAINER_LAUNCHED));\n+    context.getNMStateStore().storeContainerLaunched(containerId);\n+\n+    // Check if the container is signalled to be killed.\n+    if (!containerAlreadyLaunched.compareAndSet(false, true)) {\n+      LOG.info(\"Container \" + containerId + \" not launched as \"\n+          + \"cleanup already called\");\n+      return ExitCode.TERMINATED.getExitCode();\n+    } else {\n+      exec.activateContainer(containerId, pidFilePath);\n+    }\n+    return ExitCode.SUCCESS.getExitCode();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected int prepareForLaunch(ContainerStartContext ctx) throws IOException {\n    ContainerId containerId \u003d container.getContainerId();\n    if (container.isMarkedForKilling()) {\n      LOG.info(\"Container \" + containerId + \" not launched as it has already \"\n          + \"been marked for Killing\");\n      this.killedBeforeStart \u003d true;\n      return ExitCode.TERMINATED.getExitCode();\n    }\n    // LaunchContainer is a blocking call. We are here almost means the\n    // container is launched, so send out the event.\n    dispatcher.getEventHandler().handle(new ContainerEvent(\n        containerId,\n        ContainerEventType.CONTAINER_LAUNCHED));\n    context.getNMStateStore().storeContainerLaunched(containerId);\n\n    // Check if the container is signalled to be killed.\n    if (!containerAlreadyLaunched.compareAndSet(false, true)) {\n      LOG.info(\"Container \" + containerId + \" not launched as \"\n          + \"cleanup already called\");\n      return ExitCode.TERMINATED.getExitCode();\n    } else {\n      exec.activateContainer(containerId, pidFilePath);\n    }\n    return ExitCode.SUCCESS.getExitCode();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java"
    }
  }
}