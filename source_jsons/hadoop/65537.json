{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "S3GuardFsck.java",
  "functionName": "compareS3ToMs",
  "functionId": "compareS3ToMs___p-Path",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/S3GuardFsck.java",
  "functionStartLine": 111,
  "functionEndLine": 170,
  "numCommitsSeen": 4,
  "timeTaken": 1733,
  "changeHistory": [
    "c91ff8c18ffc070eeef22afeb2e519b184398e89",
    "1505d3f5ff725f5a2dcd775b52e7f962e6f3308e",
    "4e273a31f66013b7c20e8114451f5bc6c741f2cc"
  ],
  "changeHistoryShort": {
    "c91ff8c18ffc070eeef22afeb2e519b184398e89": "Ybodychange",
    "1505d3f5ff725f5a2dcd775b52e7f962e6f3308e": "Ybodychange",
    "4e273a31f66013b7c20e8114451f5bc6c741f2cc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c91ff8c18ffc070eeef22afeb2e519b184398e89": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16858. S3Guard fsck: Add option to remove orphaned entries (#1851). Contributed by Gabor Bota.\n\nAdding a new feature to S3GuardTool\u0027s fsck: -fix. \r\n\r\nChange-Id: I2cdb6601fea1d859b54370046b827ef06eb1107d",
      "commitDate": "18/03/20 4:48 AM",
      "commitName": "c91ff8c18ffc070eeef22afeb2e519b184398e89",
      "commitAuthor": "Gabor Bota",
      "commitDateOld": "10/12/19 6:51 AM",
      "commitNameOld": "875a3e97dd4a26fe224a1858c54d1b4512db6be3",
      "commitAuthorOld": "Gabor Bota",
      "daysBetweenCommits": 98.87,
      "commitsBetweenForRepo": 318,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,60 @@\n   public List\u003cComparePair\u003e compareS3ToMs(Path p) throws IOException {\n     StopWatch stopwatch \u003d new StopWatch();\n     stopwatch.start();\n     int scannedItems \u003d 0;\n \n     final Path rootPath \u003d rawFS.qualify(p);\n     S3AFileStatus root \u003d (S3AFileStatus) rawFS.getFileStatus(rootPath);\n     final List\u003cComparePair\u003e comparePairs \u003d new ArrayList\u003c\u003e();\n     final Queue\u003cS3AFileStatus\u003e queue \u003d new ArrayDeque\u003c\u003e();\n     queue.add(root);\n \n     while (!queue.isEmpty()) {\n       final S3AFileStatus currentDir \u003d queue.poll();\n \n \n       final Path currentDirPath \u003d currentDir.getPath();\n       try {\n         List\u003cFileStatus\u003e s3DirListing \u003d Arrays.asList(\n             rawFS.listStatus(currentDirPath));\n \n         // Check authoritative directory flag.\n         compareAuthoritativeDirectoryFlag(comparePairs, currentDirPath,\n             s3DirListing);\n         // Add all descendant directory to the queue\n         s3DirListing.stream().filter(pm -\u003e pm.isDirectory())\n             .map(S3AFileStatus.class::cast)\n             .forEach(pm -\u003e queue.add(pm));\n \n         // Check file and directory metadata for consistency.\n         final List\u003cS3AFileStatus\u003e children \u003d s3DirListing.stream()\n             .filter(status -\u003e !status.isDirectory())\n             .map(S3AFileStatus.class::cast).collect(toList());\n         final List\u003cComparePair\u003e compareResult \u003d\n             compareS3DirContentToMs(currentDir, children);\n         comparePairs.addAll(compareResult);\n \n         // Increase the scanned file size.\n         // One for the directory, one for the children.\n         scannedItems++;\n         scannedItems +\u003d children.size();\n       } catch (FileNotFoundException e) {\n         LOG.error(\"The path has been deleted since it was queued: \"\n             + currentDirPath, e);\n       }\n \n     }\n     stopwatch.stop();\n \n     // Create a handler and handle each violated pairs\n     S3GuardFsckViolationHandler handler \u003d\n         new S3GuardFsckViolationHandler(rawFS, metadataStore);\n-    comparePairs.forEach(handler::handle);\n+    for (ComparePair comparePair : comparePairs) {\n+      handler.logError(comparePair);\n+    }\n \n     LOG.info(\"Total scan time: {}s\", stopwatch.now(TimeUnit.SECONDS));\n     LOG.info(\"Scanned entries: {}\", scannedItems);\n \n     return comparePairs;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cComparePair\u003e compareS3ToMs(Path p) throws IOException {\n    StopWatch stopwatch \u003d new StopWatch();\n    stopwatch.start();\n    int scannedItems \u003d 0;\n\n    final Path rootPath \u003d rawFS.qualify(p);\n    S3AFileStatus root \u003d (S3AFileStatus) rawFS.getFileStatus(rootPath);\n    final List\u003cComparePair\u003e comparePairs \u003d new ArrayList\u003c\u003e();\n    final Queue\u003cS3AFileStatus\u003e queue \u003d new ArrayDeque\u003c\u003e();\n    queue.add(root);\n\n    while (!queue.isEmpty()) {\n      final S3AFileStatus currentDir \u003d queue.poll();\n\n\n      final Path currentDirPath \u003d currentDir.getPath();\n      try {\n        List\u003cFileStatus\u003e s3DirListing \u003d Arrays.asList(\n            rawFS.listStatus(currentDirPath));\n\n        // Check authoritative directory flag.\n        compareAuthoritativeDirectoryFlag(comparePairs, currentDirPath,\n            s3DirListing);\n        // Add all descendant directory to the queue\n        s3DirListing.stream().filter(pm -\u003e pm.isDirectory())\n            .map(S3AFileStatus.class::cast)\n            .forEach(pm -\u003e queue.add(pm));\n\n        // Check file and directory metadata for consistency.\n        final List\u003cS3AFileStatus\u003e children \u003d s3DirListing.stream()\n            .filter(status -\u003e !status.isDirectory())\n            .map(S3AFileStatus.class::cast).collect(toList());\n        final List\u003cComparePair\u003e compareResult \u003d\n            compareS3DirContentToMs(currentDir, children);\n        comparePairs.addAll(compareResult);\n\n        // Increase the scanned file size.\n        // One for the directory, one for the children.\n        scannedItems++;\n        scannedItems +\u003d children.size();\n      } catch (FileNotFoundException e) {\n        LOG.error(\"The path has been deleted since it was queued: \"\n            + currentDirPath, e);\n      }\n\n    }\n    stopwatch.stop();\n\n    // Create a handler and handle each violated pairs\n    S3GuardFsckViolationHandler handler \u003d\n        new S3GuardFsckViolationHandler(rawFS, metadataStore);\n    for (ComparePair comparePair : comparePairs) {\n      handler.logError(comparePair);\n    }\n\n    LOG.info(\"Total scan time: {}s\", stopwatch.now(TimeUnit.SECONDS));\n    LOG.info(\"Scanned entries: {}\", scannedItems);\n\n    return comparePairs;\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/S3GuardFsck.java",
      "extendedDetails": {}
    },
    "1505d3f5ff725f5a2dcd775b52e7f962e6f3308e": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16566. S3Guard fsck: Use org.apache.hadoop.util.StopWatch instead of com.google.common.base.Stopwatch (#1433). Contributed by Gabor Bota.\n\nChange-Id: Ied43ef1522dfc6a1210d6fc58c38d8208824931b",
      "commitDate": "12/09/19 10:04 AM",
      "commitName": "1505d3f5ff725f5a2dcd775b52e7f962e6f3308e",
      "commitAuthor": "Gabor Bota",
      "commitDateOld": "12/09/19 4:12 AM",
      "commitNameOld": "4e273a31f66013b7c20e8114451f5bc6c741f2cc",
      "commitAuthorOld": "Gabor Bota",
      "daysBetweenCommits": 0.24,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,58 @@\n   public List\u003cComparePair\u003e compareS3ToMs(Path p) throws IOException {\n-    Stopwatch stopwatch \u003d Stopwatch.createStarted();\n+    StopWatch stopwatch \u003d new StopWatch();\n+    stopwatch.start();\n     int scannedItems \u003d 0;\n \n     final Path rootPath \u003d rawFS.qualify(p);\n     S3AFileStatus root \u003d (S3AFileStatus) rawFS.getFileStatus(rootPath);\n     final List\u003cComparePair\u003e comparePairs \u003d new ArrayList\u003c\u003e();\n     final Queue\u003cS3AFileStatus\u003e queue \u003d new ArrayDeque\u003c\u003e();\n     queue.add(root);\n \n     while (!queue.isEmpty()) {\n       final S3AFileStatus currentDir \u003d queue.poll();\n \n \n       final Path currentDirPath \u003d currentDir.getPath();\n       try {\n         List\u003cFileStatus\u003e s3DirListing \u003d Arrays.asList(\n             rawFS.listStatus(currentDirPath));\n \n         // Check authoritative directory flag.\n         compareAuthoritativeDirectoryFlag(comparePairs, currentDirPath,\n             s3DirListing);\n         // Add all descendant directory to the queue\n         s3DirListing.stream().filter(pm -\u003e pm.isDirectory())\n             .map(S3AFileStatus.class::cast)\n             .forEach(pm -\u003e queue.add(pm));\n \n         // Check file and directory metadata for consistency.\n         final List\u003cS3AFileStatus\u003e children \u003d s3DirListing.stream()\n             .filter(status -\u003e !status.isDirectory())\n             .map(S3AFileStatus.class::cast).collect(toList());\n         final List\u003cComparePair\u003e compareResult \u003d\n             compareS3DirContentToMs(currentDir, children);\n         comparePairs.addAll(compareResult);\n \n         // Increase the scanned file size.\n         // One for the directory, one for the children.\n         scannedItems++;\n         scannedItems +\u003d children.size();\n       } catch (FileNotFoundException e) {\n         LOG.error(\"The path has been deleted since it was queued: \"\n             + currentDirPath, e);\n       }\n \n     }\n     stopwatch.stop();\n \n     // Create a handler and handle each violated pairs\n     S3GuardFsckViolationHandler handler \u003d\n         new S3GuardFsckViolationHandler(rawFS, metadataStore);\n     comparePairs.forEach(handler::handle);\n \n-    LOG.info(\"Total scan time: {}s\", stopwatch.elapsed(TimeUnit.SECONDS));\n+    LOG.info(\"Total scan time: {}s\", stopwatch.now(TimeUnit.SECONDS));\n     LOG.info(\"Scanned entries: {}\", scannedItems);\n \n     return comparePairs;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cComparePair\u003e compareS3ToMs(Path p) throws IOException {\n    StopWatch stopwatch \u003d new StopWatch();\n    stopwatch.start();\n    int scannedItems \u003d 0;\n\n    final Path rootPath \u003d rawFS.qualify(p);\n    S3AFileStatus root \u003d (S3AFileStatus) rawFS.getFileStatus(rootPath);\n    final List\u003cComparePair\u003e comparePairs \u003d new ArrayList\u003c\u003e();\n    final Queue\u003cS3AFileStatus\u003e queue \u003d new ArrayDeque\u003c\u003e();\n    queue.add(root);\n\n    while (!queue.isEmpty()) {\n      final S3AFileStatus currentDir \u003d queue.poll();\n\n\n      final Path currentDirPath \u003d currentDir.getPath();\n      try {\n        List\u003cFileStatus\u003e s3DirListing \u003d Arrays.asList(\n            rawFS.listStatus(currentDirPath));\n\n        // Check authoritative directory flag.\n        compareAuthoritativeDirectoryFlag(comparePairs, currentDirPath,\n            s3DirListing);\n        // Add all descendant directory to the queue\n        s3DirListing.stream().filter(pm -\u003e pm.isDirectory())\n            .map(S3AFileStatus.class::cast)\n            .forEach(pm -\u003e queue.add(pm));\n\n        // Check file and directory metadata for consistency.\n        final List\u003cS3AFileStatus\u003e children \u003d s3DirListing.stream()\n            .filter(status -\u003e !status.isDirectory())\n            .map(S3AFileStatus.class::cast).collect(toList());\n        final List\u003cComparePair\u003e compareResult \u003d\n            compareS3DirContentToMs(currentDir, children);\n        comparePairs.addAll(compareResult);\n\n        // Increase the scanned file size.\n        // One for the directory, one for the children.\n        scannedItems++;\n        scannedItems +\u003d children.size();\n      } catch (FileNotFoundException e) {\n        LOG.error(\"The path has been deleted since it was queued: \"\n            + currentDirPath, e);\n      }\n\n    }\n    stopwatch.stop();\n\n    // Create a handler and handle each violated pairs\n    S3GuardFsckViolationHandler handler \u003d\n        new S3GuardFsckViolationHandler(rawFS, metadataStore);\n    comparePairs.forEach(handler::handle);\n\n    LOG.info(\"Total scan time: {}s\", stopwatch.now(TimeUnit.SECONDS));\n    LOG.info(\"Scanned entries: {}\", scannedItems);\n\n    return comparePairs;\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/S3GuardFsck.java",
      "extendedDetails": {}
    },
    "4e273a31f66013b7c20e8114451f5bc6c741f2cc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-16423. S3Guard fsck: Check metadata consistency between S3 and metadatastore (log) (#1208). Contributed by Gabor Bota.\n\nChange-Id: I6bbb331b6c0a41c61043e482b95504fda8a50596",
      "commitDate": "12/09/19 4:12 AM",
      "commitName": "4e273a31f66013b7c20e8114451f5bc6c741f2cc",
      "commitAuthor": "Gabor Bota",
      "diff": "@@ -0,0 +1,57 @@\n+  public List\u003cComparePair\u003e compareS3ToMs(Path p) throws IOException {\n+    Stopwatch stopwatch \u003d Stopwatch.createStarted();\n+    int scannedItems \u003d 0;\n+\n+    final Path rootPath \u003d rawFS.qualify(p);\n+    S3AFileStatus root \u003d (S3AFileStatus) rawFS.getFileStatus(rootPath);\n+    final List\u003cComparePair\u003e comparePairs \u003d new ArrayList\u003c\u003e();\n+    final Queue\u003cS3AFileStatus\u003e queue \u003d new ArrayDeque\u003c\u003e();\n+    queue.add(root);\n+\n+    while (!queue.isEmpty()) {\n+      final S3AFileStatus currentDir \u003d queue.poll();\n+\n+\n+      final Path currentDirPath \u003d currentDir.getPath();\n+      try {\n+        List\u003cFileStatus\u003e s3DirListing \u003d Arrays.asList(\n+            rawFS.listStatus(currentDirPath));\n+\n+        // Check authoritative directory flag.\n+        compareAuthoritativeDirectoryFlag(comparePairs, currentDirPath,\n+            s3DirListing);\n+        // Add all descendant directory to the queue\n+        s3DirListing.stream().filter(pm -\u003e pm.isDirectory())\n+            .map(S3AFileStatus.class::cast)\n+            .forEach(pm -\u003e queue.add(pm));\n+\n+        // Check file and directory metadata for consistency.\n+        final List\u003cS3AFileStatus\u003e children \u003d s3DirListing.stream()\n+            .filter(status -\u003e !status.isDirectory())\n+            .map(S3AFileStatus.class::cast).collect(toList());\n+        final List\u003cComparePair\u003e compareResult \u003d\n+            compareS3DirContentToMs(currentDir, children);\n+        comparePairs.addAll(compareResult);\n+\n+        // Increase the scanned file size.\n+        // One for the directory, one for the children.\n+        scannedItems++;\n+        scannedItems +\u003d children.size();\n+      } catch (FileNotFoundException e) {\n+        LOG.error(\"The path has been deleted since it was queued: \"\n+            + currentDirPath, e);\n+      }\n+\n+    }\n+    stopwatch.stop();\n+\n+    // Create a handler and handle each violated pairs\n+    S3GuardFsckViolationHandler handler \u003d\n+        new S3GuardFsckViolationHandler(rawFS, metadataStore);\n+    comparePairs.forEach(handler::handle);\n+\n+    LOG.info(\"Total scan time: {}s\", stopwatch.elapsed(TimeUnit.SECONDS));\n+    LOG.info(\"Scanned entries: {}\", scannedItems);\n+\n+    return comparePairs;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cComparePair\u003e compareS3ToMs(Path p) throws IOException {\n    Stopwatch stopwatch \u003d Stopwatch.createStarted();\n    int scannedItems \u003d 0;\n\n    final Path rootPath \u003d rawFS.qualify(p);\n    S3AFileStatus root \u003d (S3AFileStatus) rawFS.getFileStatus(rootPath);\n    final List\u003cComparePair\u003e comparePairs \u003d new ArrayList\u003c\u003e();\n    final Queue\u003cS3AFileStatus\u003e queue \u003d new ArrayDeque\u003c\u003e();\n    queue.add(root);\n\n    while (!queue.isEmpty()) {\n      final S3AFileStatus currentDir \u003d queue.poll();\n\n\n      final Path currentDirPath \u003d currentDir.getPath();\n      try {\n        List\u003cFileStatus\u003e s3DirListing \u003d Arrays.asList(\n            rawFS.listStatus(currentDirPath));\n\n        // Check authoritative directory flag.\n        compareAuthoritativeDirectoryFlag(comparePairs, currentDirPath,\n            s3DirListing);\n        // Add all descendant directory to the queue\n        s3DirListing.stream().filter(pm -\u003e pm.isDirectory())\n            .map(S3AFileStatus.class::cast)\n            .forEach(pm -\u003e queue.add(pm));\n\n        // Check file and directory metadata for consistency.\n        final List\u003cS3AFileStatus\u003e children \u003d s3DirListing.stream()\n            .filter(status -\u003e !status.isDirectory())\n            .map(S3AFileStatus.class::cast).collect(toList());\n        final List\u003cComparePair\u003e compareResult \u003d\n            compareS3DirContentToMs(currentDir, children);\n        comparePairs.addAll(compareResult);\n\n        // Increase the scanned file size.\n        // One for the directory, one for the children.\n        scannedItems++;\n        scannedItems +\u003d children.size();\n      } catch (FileNotFoundException e) {\n        LOG.error(\"The path has been deleted since it was queued: \"\n            + currentDirPath, e);\n      }\n\n    }\n    stopwatch.stop();\n\n    // Create a handler and handle each violated pairs\n    S3GuardFsckViolationHandler handler \u003d\n        new S3GuardFsckViolationHandler(rawFS, metadataStore);\n    comparePairs.forEach(handler::handle);\n\n    LOG.info(\"Total scan time: {}s\", stopwatch.elapsed(TimeUnit.SECONDS));\n    LOG.info(\"Scanned entries: {}\", scannedItems);\n\n    return comparePairs;\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/S3GuardFsck.java"
    }
  }
}