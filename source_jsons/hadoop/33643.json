{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DockerCommandExecutor.java",
  "functionName": "parseContainerStatus",
  "functionId": "parseContainerStatus___containerStatusStr-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/docker/DockerCommandExecutor.java",
  "functionStartLine": 137,
  "functionEndLine": 170,
  "numCommitsSeen": 10,
  "timeTaken": 1389,
  "changeHistory": [
    "bf8a1750e99cfbfa76021ce51b6514c74c06f498"
  ],
  "changeHistoryShort": {
    "bf8a1750e99cfbfa76021ce51b6514c74c06f498": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bf8a1750e99cfbfa76021ce51b6514c74c06f498": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8706. Updated docker container stop logic to avoid double kill.\n           Contributed by Chandni Singh\n",
      "commitDate": "07/09/18 5:18 PM",
      "commitName": "bf8a1750e99cfbfa76021ce51b6514c74c06f498",
      "commitAuthor": "Eric Yang",
      "diff": "@@ -0,0 +1,34 @@\n+  public static DockerContainerStatus parseContainerStatus(\n+      String containerStatusStr) {\n+    DockerContainerStatus dockerContainerStatus;\n+    if (containerStatusStr \u003d\u003d null) {\n+      dockerContainerStatus \u003d DockerContainerStatus.UNKNOWN;\n+    } else if (containerStatusStr\n+        .equals(DockerContainerStatus.CREATED.getName())) {\n+      dockerContainerStatus \u003d DockerContainerStatus.CREATED;\n+    } else if (containerStatusStr\n+        .equals(DockerContainerStatus.RUNNING.getName())) {\n+      dockerContainerStatus \u003d DockerContainerStatus.RUNNING;\n+    } else if (containerStatusStr\n+        .equals(DockerContainerStatus.STOPPED.getName())) {\n+      dockerContainerStatus \u003d DockerContainerStatus.STOPPED;\n+    } else if (containerStatusStr\n+        .equals(DockerContainerStatus.RESTARTING.getName())) {\n+      dockerContainerStatus \u003d DockerContainerStatus.RESTARTING;\n+    } else if (containerStatusStr\n+        .equals(DockerContainerStatus.REMOVING.getName())) {\n+      dockerContainerStatus \u003d DockerContainerStatus.REMOVING;\n+    } else if (containerStatusStr\n+        .equals(DockerContainerStatus.DEAD.getName())) {\n+      dockerContainerStatus \u003d DockerContainerStatus.DEAD;\n+    } else if (containerStatusStr\n+        .equals(DockerContainerStatus.EXITED.getName())) {\n+      dockerContainerStatus \u003d DockerContainerStatus.EXITED;\n+    } else if (containerStatusStr\n+        .equals(DockerContainerStatus.NONEXISTENT.getName())) {\n+      dockerContainerStatus \u003d DockerContainerStatus.NONEXISTENT;\n+    } else {\n+      dockerContainerStatus \u003d DockerContainerStatus.UNKNOWN;\n+    }\n+    return dockerContainerStatus;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static DockerContainerStatus parseContainerStatus(\n      String containerStatusStr) {\n    DockerContainerStatus dockerContainerStatus;\n    if (containerStatusStr \u003d\u003d null) {\n      dockerContainerStatus \u003d DockerContainerStatus.UNKNOWN;\n    } else if (containerStatusStr\n        .equals(DockerContainerStatus.CREATED.getName())) {\n      dockerContainerStatus \u003d DockerContainerStatus.CREATED;\n    } else if (containerStatusStr\n        .equals(DockerContainerStatus.RUNNING.getName())) {\n      dockerContainerStatus \u003d DockerContainerStatus.RUNNING;\n    } else if (containerStatusStr\n        .equals(DockerContainerStatus.STOPPED.getName())) {\n      dockerContainerStatus \u003d DockerContainerStatus.STOPPED;\n    } else if (containerStatusStr\n        .equals(DockerContainerStatus.RESTARTING.getName())) {\n      dockerContainerStatus \u003d DockerContainerStatus.RESTARTING;\n    } else if (containerStatusStr\n        .equals(DockerContainerStatus.REMOVING.getName())) {\n      dockerContainerStatus \u003d DockerContainerStatus.REMOVING;\n    } else if (containerStatusStr\n        .equals(DockerContainerStatus.DEAD.getName())) {\n      dockerContainerStatus \u003d DockerContainerStatus.DEAD;\n    } else if (containerStatusStr\n        .equals(DockerContainerStatus.EXITED.getName())) {\n      dockerContainerStatus \u003d DockerContainerStatus.EXITED;\n    } else if (containerStatusStr\n        .equals(DockerContainerStatus.NONEXISTENT.getName())) {\n      dockerContainerStatus \u003d DockerContainerStatus.NONEXISTENT;\n    } else {\n      dockerContainerStatus \u003d DockerContainerStatus.UNKNOWN;\n    }\n    return dockerContainerStatus;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/docker/DockerCommandExecutor.java"
    }
  }
}