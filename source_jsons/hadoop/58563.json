{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CommonNodeLabelsManager.java",
  "functionName": "generateNodeLabelsInfoPerNode",
  "functionId": "generateNodeLabelsInfoPerNode___type-Class__T__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/nodelabels/CommonNodeLabelsManager.java",
  "functionStartLine": 768,
  "functionEndLine": 804,
  "numCommitsSeen": 64,
  "timeTaken": 3249,
  "changeHistory": [
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "d4f53fc9631d682cd79ba440aefa6750dcc898be",
    "db7f1653198b950e89567c06898d64f6b930a0ee"
  ],
  "changeHistoryShort": {
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "d4f53fc9631d682cd79ba440aefa6750dcc898be": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ymodifierchange,Ybodychange)",
    "db7f1653198b950e89567c06898d64f6b930a0ee": "Yintroduced"
  },
  "changeHistoryDetails": {
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "03/03/19 11:59 PM",
      "commitNameOld": "bd8d299ded742813cabd4b4e7ce1e33e0d1f9509",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 3.58,
      "commitsBetweenForRepo": 49,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   private \u003cT\u003e Map\u003cNodeId, Set\u003cT\u003e\u003e generateNodeLabelsInfoPerNode(Class\u003cT\u003e type) {\n+    readLock.lock();\n     try {\n-      readLock.lock();\n       Map\u003cNodeId, Set\u003cT\u003e\u003e nodeToLabels \u003d new HashMap\u003c\u003e();\n       for (Entry\u003cString, Host\u003e entry : nodeCollections.entrySet()) {\n         String hostName \u003d entry.getKey();\n         Host host \u003d entry.getValue();\n         for (NodeId nodeId : host.nms.keySet()) {\n           if (type.isAssignableFrom(String.class)) {\n             Set\u003cString\u003e nodeLabels \u003d getLabelsByNode(nodeId);\n             if (nodeLabels \u003d\u003d null || nodeLabels.isEmpty()) {\n               continue;\n             }\n             nodeToLabels.put(nodeId, (Set\u003cT\u003e) nodeLabels);\n           } else {\n             Set\u003cNodeLabel\u003e nodeLabels \u003d getLabelsInfoByNode(nodeId);\n             if (nodeLabels \u003d\u003d null || nodeLabels.isEmpty()) {\n               continue;\n             }\n             nodeToLabels.put(nodeId, (Set\u003cT\u003e) nodeLabels);\n           }\n         }\n         if (!host.labels.isEmpty()) {\n           if (type.isAssignableFrom(String.class)) {\n             nodeToLabels.put(NodeId.newInstance(hostName, WILDCARD_PORT),\n                 (Set\u003cT\u003e) host.labels);\n           } else {\n             nodeToLabels.put(NodeId.newInstance(hostName, WILDCARD_PORT),\n                 (Set\u003cT\u003e) createNodeLabelFromLabelNames(host.labels));\n           }\n         }\n       }\n       return Collections.unmodifiableMap(nodeToLabels);\n     } finally {\n       readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private \u003cT\u003e Map\u003cNodeId, Set\u003cT\u003e\u003e generateNodeLabelsInfoPerNode(Class\u003cT\u003e type) {\n    readLock.lock();\n    try {\n      Map\u003cNodeId, Set\u003cT\u003e\u003e nodeToLabels \u003d new HashMap\u003c\u003e();\n      for (Entry\u003cString, Host\u003e entry : nodeCollections.entrySet()) {\n        String hostName \u003d entry.getKey();\n        Host host \u003d entry.getValue();\n        for (NodeId nodeId : host.nms.keySet()) {\n          if (type.isAssignableFrom(String.class)) {\n            Set\u003cString\u003e nodeLabels \u003d getLabelsByNode(nodeId);\n            if (nodeLabels \u003d\u003d null || nodeLabels.isEmpty()) {\n              continue;\n            }\n            nodeToLabels.put(nodeId, (Set\u003cT\u003e) nodeLabels);\n          } else {\n            Set\u003cNodeLabel\u003e nodeLabels \u003d getLabelsInfoByNode(nodeId);\n            if (nodeLabels \u003d\u003d null || nodeLabels.isEmpty()) {\n              continue;\n            }\n            nodeToLabels.put(nodeId, (Set\u003cT\u003e) nodeLabels);\n          }\n        }\n        if (!host.labels.isEmpty()) {\n          if (type.isAssignableFrom(String.class)) {\n            nodeToLabels.put(NodeId.newInstance(hostName, WILDCARD_PORT),\n                (Set\u003cT\u003e) host.labels);\n          } else {\n            nodeToLabels.put(NodeId.newInstance(hostName, WILDCARD_PORT),\n                (Set\u003cT\u003e) createNodeLabelFromLabelNames(host.labels));\n          }\n        }\n      }\n      return Collections.unmodifiableMap(nodeToLabels);\n    } finally {\n      readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/nodelabels/CommonNodeLabelsManager.java",
      "extendedDetails": {}
    },
    "d4f53fc9631d682cd79ba440aefa6750dcc898be": {
      "type": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-3579. CommonNodeLabelsManager should support NodeLabel instead of string label name when getting node-to-label/label-to-label mappings. (Sunil G via wangda)\n",
      "commitDate": "13/05/15 1:29 PM",
      "commitName": "d4f53fc9631d682cd79ba440aefa6750dcc898be",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-3579. CommonNodeLabelsManager should support NodeLabel instead of string label name when getting node-to-label/label-to-label mappings. (Sunil G via wangda)\n",
          "commitDate": "13/05/15 1:29 PM",
          "commitName": "d4f53fc9631d682cd79ba440aefa6750dcc898be",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "27/04/15 4:24 PM",
          "commitNameOld": "db1b674b50ddecf2774f4092d677c412722bdcb1",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 15.88,
          "commitsBetweenForRepo": 212,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,37 @@\n-  public Map\u003cNodeId, Set\u003cString\u003e\u003e getNodeLabels() {\n+  private \u003cT\u003e Map\u003cNodeId, Set\u003cT\u003e\u003e generateNodeLabelsInfoPerNode(Class\u003cT\u003e type) {\n     try {\n       readLock.lock();\n-      Map\u003cNodeId, Set\u003cString\u003e\u003e nodeToLabels \u003d\n-          new HashMap\u003cNodeId, Set\u003cString\u003e\u003e();\n+      Map\u003cNodeId, Set\u003cT\u003e\u003e nodeToLabels \u003d new HashMap\u003c\u003e();\n       for (Entry\u003cString, Host\u003e entry : nodeCollections.entrySet()) {\n         String hostName \u003d entry.getKey();\n         Host host \u003d entry.getValue();\n         for (NodeId nodeId : host.nms.keySet()) {\n-          Set\u003cString\u003e nodeLabels \u003d getLabelsByNode(nodeId);\n-          if (nodeLabels \u003d\u003d null || nodeLabels.isEmpty()) {\n-            continue;\n+          if (type.isAssignableFrom(String.class)) {\n+            Set\u003cString\u003e nodeLabels \u003d getLabelsByNode(nodeId);\n+            if (nodeLabels \u003d\u003d null || nodeLabels.isEmpty()) {\n+              continue;\n+            }\n+            nodeToLabels.put(nodeId, (Set\u003cT\u003e) nodeLabels);\n+          } else {\n+            Set\u003cNodeLabel\u003e nodeLabels \u003d getLabelsInfoByNode(nodeId);\n+            if (nodeLabels \u003d\u003d null || nodeLabels.isEmpty()) {\n+              continue;\n+            }\n+            nodeToLabels.put(nodeId, (Set\u003cT\u003e) nodeLabels);\n           }\n-          nodeToLabels.put(nodeId, nodeLabels);\n         }\n         if (!host.labels.isEmpty()) {\n-          nodeToLabels\n-              .put(NodeId.newInstance(hostName, WILDCARD_PORT), host.labels);\n+          if (type.isAssignableFrom(String.class)) {\n+            nodeToLabels.put(NodeId.newInstance(hostName, WILDCARD_PORT),\n+                (Set\u003cT\u003e) host.labels);\n+          } else {\n+            nodeToLabels.put(NodeId.newInstance(hostName, WILDCARD_PORT),\n+                (Set\u003cT\u003e) createNodeLabelFromLabelNames(host.labels));\n+          }\n         }\n       }\n       return Collections.unmodifiableMap(nodeToLabels);\n     } finally {\n       readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private \u003cT\u003e Map\u003cNodeId, Set\u003cT\u003e\u003e generateNodeLabelsInfoPerNode(Class\u003cT\u003e type) {\n    try {\n      readLock.lock();\n      Map\u003cNodeId, Set\u003cT\u003e\u003e nodeToLabels \u003d new HashMap\u003c\u003e();\n      for (Entry\u003cString, Host\u003e entry : nodeCollections.entrySet()) {\n        String hostName \u003d entry.getKey();\n        Host host \u003d entry.getValue();\n        for (NodeId nodeId : host.nms.keySet()) {\n          if (type.isAssignableFrom(String.class)) {\n            Set\u003cString\u003e nodeLabels \u003d getLabelsByNode(nodeId);\n            if (nodeLabels \u003d\u003d null || nodeLabels.isEmpty()) {\n              continue;\n            }\n            nodeToLabels.put(nodeId, (Set\u003cT\u003e) nodeLabels);\n          } else {\n            Set\u003cNodeLabel\u003e nodeLabels \u003d getLabelsInfoByNode(nodeId);\n            if (nodeLabels \u003d\u003d null || nodeLabels.isEmpty()) {\n              continue;\n            }\n            nodeToLabels.put(nodeId, (Set\u003cT\u003e) nodeLabels);\n          }\n        }\n        if (!host.labels.isEmpty()) {\n          if (type.isAssignableFrom(String.class)) {\n            nodeToLabels.put(NodeId.newInstance(hostName, WILDCARD_PORT),\n                (Set\u003cT\u003e) host.labels);\n          } else {\n            nodeToLabels.put(NodeId.newInstance(hostName, WILDCARD_PORT),\n                (Set\u003cT\u003e) createNodeLabelFromLabelNames(host.labels));\n          }\n        }\n      }\n      return Collections.unmodifiableMap(nodeToLabels);\n    } finally {\n      readLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/nodelabels/CommonNodeLabelsManager.java",
          "extendedDetails": {
            "oldValue": "getNodeLabels",
            "newValue": "generateNodeLabelsInfoPerNode"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3579. CommonNodeLabelsManager should support NodeLabel instead of string label name when getting node-to-label/label-to-label mappings. (Sunil G via wangda)\n",
          "commitDate": "13/05/15 1:29 PM",
          "commitName": "d4f53fc9631d682cd79ba440aefa6750dcc898be",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "27/04/15 4:24 PM",
          "commitNameOld": "db1b674b50ddecf2774f4092d677c412722bdcb1",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 15.88,
          "commitsBetweenForRepo": 212,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,37 @@\n-  public Map\u003cNodeId, Set\u003cString\u003e\u003e getNodeLabels() {\n+  private \u003cT\u003e Map\u003cNodeId, Set\u003cT\u003e\u003e generateNodeLabelsInfoPerNode(Class\u003cT\u003e type) {\n     try {\n       readLock.lock();\n-      Map\u003cNodeId, Set\u003cString\u003e\u003e nodeToLabels \u003d\n-          new HashMap\u003cNodeId, Set\u003cString\u003e\u003e();\n+      Map\u003cNodeId, Set\u003cT\u003e\u003e nodeToLabels \u003d new HashMap\u003c\u003e();\n       for (Entry\u003cString, Host\u003e entry : nodeCollections.entrySet()) {\n         String hostName \u003d entry.getKey();\n         Host host \u003d entry.getValue();\n         for (NodeId nodeId : host.nms.keySet()) {\n-          Set\u003cString\u003e nodeLabels \u003d getLabelsByNode(nodeId);\n-          if (nodeLabels \u003d\u003d null || nodeLabels.isEmpty()) {\n-            continue;\n+          if (type.isAssignableFrom(String.class)) {\n+            Set\u003cString\u003e nodeLabels \u003d getLabelsByNode(nodeId);\n+            if (nodeLabels \u003d\u003d null || nodeLabels.isEmpty()) {\n+              continue;\n+            }\n+            nodeToLabels.put(nodeId, (Set\u003cT\u003e) nodeLabels);\n+          } else {\n+            Set\u003cNodeLabel\u003e nodeLabels \u003d getLabelsInfoByNode(nodeId);\n+            if (nodeLabels \u003d\u003d null || nodeLabels.isEmpty()) {\n+              continue;\n+            }\n+            nodeToLabels.put(nodeId, (Set\u003cT\u003e) nodeLabels);\n           }\n-          nodeToLabels.put(nodeId, nodeLabels);\n         }\n         if (!host.labels.isEmpty()) {\n-          nodeToLabels\n-              .put(NodeId.newInstance(hostName, WILDCARD_PORT), host.labels);\n+          if (type.isAssignableFrom(String.class)) {\n+            nodeToLabels.put(NodeId.newInstance(hostName, WILDCARD_PORT),\n+                (Set\u003cT\u003e) host.labels);\n+          } else {\n+            nodeToLabels.put(NodeId.newInstance(hostName, WILDCARD_PORT),\n+                (Set\u003cT\u003e) createNodeLabelFromLabelNames(host.labels));\n+          }\n         }\n       }\n       return Collections.unmodifiableMap(nodeToLabels);\n     } finally {\n       readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private \u003cT\u003e Map\u003cNodeId, Set\u003cT\u003e\u003e generateNodeLabelsInfoPerNode(Class\u003cT\u003e type) {\n    try {\n      readLock.lock();\n      Map\u003cNodeId, Set\u003cT\u003e\u003e nodeToLabels \u003d new HashMap\u003c\u003e();\n      for (Entry\u003cString, Host\u003e entry : nodeCollections.entrySet()) {\n        String hostName \u003d entry.getKey();\n        Host host \u003d entry.getValue();\n        for (NodeId nodeId : host.nms.keySet()) {\n          if (type.isAssignableFrom(String.class)) {\n            Set\u003cString\u003e nodeLabels \u003d getLabelsByNode(nodeId);\n            if (nodeLabels \u003d\u003d null || nodeLabels.isEmpty()) {\n              continue;\n            }\n            nodeToLabels.put(nodeId, (Set\u003cT\u003e) nodeLabels);\n          } else {\n            Set\u003cNodeLabel\u003e nodeLabels \u003d getLabelsInfoByNode(nodeId);\n            if (nodeLabels \u003d\u003d null || nodeLabels.isEmpty()) {\n              continue;\n            }\n            nodeToLabels.put(nodeId, (Set\u003cT\u003e) nodeLabels);\n          }\n        }\n        if (!host.labels.isEmpty()) {\n          if (type.isAssignableFrom(String.class)) {\n            nodeToLabels.put(NodeId.newInstance(hostName, WILDCARD_PORT),\n                (Set\u003cT\u003e) host.labels);\n          } else {\n            nodeToLabels.put(NodeId.newInstance(hostName, WILDCARD_PORT),\n                (Set\u003cT\u003e) createNodeLabelFromLabelNames(host.labels));\n          }\n        }\n      }\n      return Collections.unmodifiableMap(nodeToLabels);\n    } finally {\n      readLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/nodelabels/CommonNodeLabelsManager.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[type-Class\u003cT\u003e]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-3579. CommonNodeLabelsManager should support NodeLabel instead of string label name when getting node-to-label/label-to-label mappings. (Sunil G via wangda)\n",
          "commitDate": "13/05/15 1:29 PM",
          "commitName": "d4f53fc9631d682cd79ba440aefa6750dcc898be",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "27/04/15 4:24 PM",
          "commitNameOld": "db1b674b50ddecf2774f4092d677c412722bdcb1",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 15.88,
          "commitsBetweenForRepo": 212,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,37 @@\n-  public Map\u003cNodeId, Set\u003cString\u003e\u003e getNodeLabels() {\n+  private \u003cT\u003e Map\u003cNodeId, Set\u003cT\u003e\u003e generateNodeLabelsInfoPerNode(Class\u003cT\u003e type) {\n     try {\n       readLock.lock();\n-      Map\u003cNodeId, Set\u003cString\u003e\u003e nodeToLabels \u003d\n-          new HashMap\u003cNodeId, Set\u003cString\u003e\u003e();\n+      Map\u003cNodeId, Set\u003cT\u003e\u003e nodeToLabels \u003d new HashMap\u003c\u003e();\n       for (Entry\u003cString, Host\u003e entry : nodeCollections.entrySet()) {\n         String hostName \u003d entry.getKey();\n         Host host \u003d entry.getValue();\n         for (NodeId nodeId : host.nms.keySet()) {\n-          Set\u003cString\u003e nodeLabels \u003d getLabelsByNode(nodeId);\n-          if (nodeLabels \u003d\u003d null || nodeLabels.isEmpty()) {\n-            continue;\n+          if (type.isAssignableFrom(String.class)) {\n+            Set\u003cString\u003e nodeLabels \u003d getLabelsByNode(nodeId);\n+            if (nodeLabels \u003d\u003d null || nodeLabels.isEmpty()) {\n+              continue;\n+            }\n+            nodeToLabels.put(nodeId, (Set\u003cT\u003e) nodeLabels);\n+          } else {\n+            Set\u003cNodeLabel\u003e nodeLabels \u003d getLabelsInfoByNode(nodeId);\n+            if (nodeLabels \u003d\u003d null || nodeLabels.isEmpty()) {\n+              continue;\n+            }\n+            nodeToLabels.put(nodeId, (Set\u003cT\u003e) nodeLabels);\n           }\n-          nodeToLabels.put(nodeId, nodeLabels);\n         }\n         if (!host.labels.isEmpty()) {\n-          nodeToLabels\n-              .put(NodeId.newInstance(hostName, WILDCARD_PORT), host.labels);\n+          if (type.isAssignableFrom(String.class)) {\n+            nodeToLabels.put(NodeId.newInstance(hostName, WILDCARD_PORT),\n+                (Set\u003cT\u003e) host.labels);\n+          } else {\n+            nodeToLabels.put(NodeId.newInstance(hostName, WILDCARD_PORT),\n+                (Set\u003cT\u003e) createNodeLabelFromLabelNames(host.labels));\n+          }\n         }\n       }\n       return Collections.unmodifiableMap(nodeToLabels);\n     } finally {\n       readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private \u003cT\u003e Map\u003cNodeId, Set\u003cT\u003e\u003e generateNodeLabelsInfoPerNode(Class\u003cT\u003e type) {\n    try {\n      readLock.lock();\n      Map\u003cNodeId, Set\u003cT\u003e\u003e nodeToLabels \u003d new HashMap\u003c\u003e();\n      for (Entry\u003cString, Host\u003e entry : nodeCollections.entrySet()) {\n        String hostName \u003d entry.getKey();\n        Host host \u003d entry.getValue();\n        for (NodeId nodeId : host.nms.keySet()) {\n          if (type.isAssignableFrom(String.class)) {\n            Set\u003cString\u003e nodeLabels \u003d getLabelsByNode(nodeId);\n            if (nodeLabels \u003d\u003d null || nodeLabels.isEmpty()) {\n              continue;\n            }\n            nodeToLabels.put(nodeId, (Set\u003cT\u003e) nodeLabels);\n          } else {\n            Set\u003cNodeLabel\u003e nodeLabels \u003d getLabelsInfoByNode(nodeId);\n            if (nodeLabels \u003d\u003d null || nodeLabels.isEmpty()) {\n              continue;\n            }\n            nodeToLabels.put(nodeId, (Set\u003cT\u003e) nodeLabels);\n          }\n        }\n        if (!host.labels.isEmpty()) {\n          if (type.isAssignableFrom(String.class)) {\n            nodeToLabels.put(NodeId.newInstance(hostName, WILDCARD_PORT),\n                (Set\u003cT\u003e) host.labels);\n          } else {\n            nodeToLabels.put(NodeId.newInstance(hostName, WILDCARD_PORT),\n                (Set\u003cT\u003e) createNodeLabelFromLabelNames(host.labels));\n          }\n        }\n      }\n      return Collections.unmodifiableMap(nodeToLabels);\n    } finally {\n      readLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/nodelabels/CommonNodeLabelsManager.java",
          "extendedDetails": {
            "oldValue": "Map\u003cNodeId,Set\u003cString\u003e\u003e",
            "newValue": "Map\u003cNodeId,Set\u003cT\u003e\u003e"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-3579. CommonNodeLabelsManager should support NodeLabel instead of string label name when getting node-to-label/label-to-label mappings. (Sunil G via wangda)\n",
          "commitDate": "13/05/15 1:29 PM",
          "commitName": "d4f53fc9631d682cd79ba440aefa6750dcc898be",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "27/04/15 4:24 PM",
          "commitNameOld": "db1b674b50ddecf2774f4092d677c412722bdcb1",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 15.88,
          "commitsBetweenForRepo": 212,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,37 @@\n-  public Map\u003cNodeId, Set\u003cString\u003e\u003e getNodeLabels() {\n+  private \u003cT\u003e Map\u003cNodeId, Set\u003cT\u003e\u003e generateNodeLabelsInfoPerNode(Class\u003cT\u003e type) {\n     try {\n       readLock.lock();\n-      Map\u003cNodeId, Set\u003cString\u003e\u003e nodeToLabels \u003d\n-          new HashMap\u003cNodeId, Set\u003cString\u003e\u003e();\n+      Map\u003cNodeId, Set\u003cT\u003e\u003e nodeToLabels \u003d new HashMap\u003c\u003e();\n       for (Entry\u003cString, Host\u003e entry : nodeCollections.entrySet()) {\n         String hostName \u003d entry.getKey();\n         Host host \u003d entry.getValue();\n         for (NodeId nodeId : host.nms.keySet()) {\n-          Set\u003cString\u003e nodeLabels \u003d getLabelsByNode(nodeId);\n-          if (nodeLabels \u003d\u003d null || nodeLabels.isEmpty()) {\n-            continue;\n+          if (type.isAssignableFrom(String.class)) {\n+            Set\u003cString\u003e nodeLabels \u003d getLabelsByNode(nodeId);\n+            if (nodeLabels \u003d\u003d null || nodeLabels.isEmpty()) {\n+              continue;\n+            }\n+            nodeToLabels.put(nodeId, (Set\u003cT\u003e) nodeLabels);\n+          } else {\n+            Set\u003cNodeLabel\u003e nodeLabels \u003d getLabelsInfoByNode(nodeId);\n+            if (nodeLabels \u003d\u003d null || nodeLabels.isEmpty()) {\n+              continue;\n+            }\n+            nodeToLabels.put(nodeId, (Set\u003cT\u003e) nodeLabels);\n           }\n-          nodeToLabels.put(nodeId, nodeLabels);\n         }\n         if (!host.labels.isEmpty()) {\n-          nodeToLabels\n-              .put(NodeId.newInstance(hostName, WILDCARD_PORT), host.labels);\n+          if (type.isAssignableFrom(String.class)) {\n+            nodeToLabels.put(NodeId.newInstance(hostName, WILDCARD_PORT),\n+                (Set\u003cT\u003e) host.labels);\n+          } else {\n+            nodeToLabels.put(NodeId.newInstance(hostName, WILDCARD_PORT),\n+                (Set\u003cT\u003e) createNodeLabelFromLabelNames(host.labels));\n+          }\n         }\n       }\n       return Collections.unmodifiableMap(nodeToLabels);\n     } finally {\n       readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private \u003cT\u003e Map\u003cNodeId, Set\u003cT\u003e\u003e generateNodeLabelsInfoPerNode(Class\u003cT\u003e type) {\n    try {\n      readLock.lock();\n      Map\u003cNodeId, Set\u003cT\u003e\u003e nodeToLabels \u003d new HashMap\u003c\u003e();\n      for (Entry\u003cString, Host\u003e entry : nodeCollections.entrySet()) {\n        String hostName \u003d entry.getKey();\n        Host host \u003d entry.getValue();\n        for (NodeId nodeId : host.nms.keySet()) {\n          if (type.isAssignableFrom(String.class)) {\n            Set\u003cString\u003e nodeLabels \u003d getLabelsByNode(nodeId);\n            if (nodeLabels \u003d\u003d null || nodeLabels.isEmpty()) {\n              continue;\n            }\n            nodeToLabels.put(nodeId, (Set\u003cT\u003e) nodeLabels);\n          } else {\n            Set\u003cNodeLabel\u003e nodeLabels \u003d getLabelsInfoByNode(nodeId);\n            if (nodeLabels \u003d\u003d null || nodeLabels.isEmpty()) {\n              continue;\n            }\n            nodeToLabels.put(nodeId, (Set\u003cT\u003e) nodeLabels);\n          }\n        }\n        if (!host.labels.isEmpty()) {\n          if (type.isAssignableFrom(String.class)) {\n            nodeToLabels.put(NodeId.newInstance(hostName, WILDCARD_PORT),\n                (Set\u003cT\u003e) host.labels);\n          } else {\n            nodeToLabels.put(NodeId.newInstance(hostName, WILDCARD_PORT),\n                (Set\u003cT\u003e) createNodeLabelFromLabelNames(host.labels));\n          }\n        }\n      }\n      return Collections.unmodifiableMap(nodeToLabels);\n    } finally {\n      readLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/nodelabels/CommonNodeLabelsManager.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3579. CommonNodeLabelsManager should support NodeLabel instead of string label name when getting node-to-label/label-to-label mappings. (Sunil G via wangda)\n",
          "commitDate": "13/05/15 1:29 PM",
          "commitName": "d4f53fc9631d682cd79ba440aefa6750dcc898be",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "27/04/15 4:24 PM",
          "commitNameOld": "db1b674b50ddecf2774f4092d677c412722bdcb1",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 15.88,
          "commitsBetweenForRepo": 212,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,37 @@\n-  public Map\u003cNodeId, Set\u003cString\u003e\u003e getNodeLabels() {\n+  private \u003cT\u003e Map\u003cNodeId, Set\u003cT\u003e\u003e generateNodeLabelsInfoPerNode(Class\u003cT\u003e type) {\n     try {\n       readLock.lock();\n-      Map\u003cNodeId, Set\u003cString\u003e\u003e nodeToLabels \u003d\n-          new HashMap\u003cNodeId, Set\u003cString\u003e\u003e();\n+      Map\u003cNodeId, Set\u003cT\u003e\u003e nodeToLabels \u003d new HashMap\u003c\u003e();\n       for (Entry\u003cString, Host\u003e entry : nodeCollections.entrySet()) {\n         String hostName \u003d entry.getKey();\n         Host host \u003d entry.getValue();\n         for (NodeId nodeId : host.nms.keySet()) {\n-          Set\u003cString\u003e nodeLabels \u003d getLabelsByNode(nodeId);\n-          if (nodeLabels \u003d\u003d null || nodeLabels.isEmpty()) {\n-            continue;\n+          if (type.isAssignableFrom(String.class)) {\n+            Set\u003cString\u003e nodeLabels \u003d getLabelsByNode(nodeId);\n+            if (nodeLabels \u003d\u003d null || nodeLabels.isEmpty()) {\n+              continue;\n+            }\n+            nodeToLabels.put(nodeId, (Set\u003cT\u003e) nodeLabels);\n+          } else {\n+            Set\u003cNodeLabel\u003e nodeLabels \u003d getLabelsInfoByNode(nodeId);\n+            if (nodeLabels \u003d\u003d null || nodeLabels.isEmpty()) {\n+              continue;\n+            }\n+            nodeToLabels.put(nodeId, (Set\u003cT\u003e) nodeLabels);\n           }\n-          nodeToLabels.put(nodeId, nodeLabels);\n         }\n         if (!host.labels.isEmpty()) {\n-          nodeToLabels\n-              .put(NodeId.newInstance(hostName, WILDCARD_PORT), host.labels);\n+          if (type.isAssignableFrom(String.class)) {\n+            nodeToLabels.put(NodeId.newInstance(hostName, WILDCARD_PORT),\n+                (Set\u003cT\u003e) host.labels);\n+          } else {\n+            nodeToLabels.put(NodeId.newInstance(hostName, WILDCARD_PORT),\n+                (Set\u003cT\u003e) createNodeLabelFromLabelNames(host.labels));\n+          }\n         }\n       }\n       return Collections.unmodifiableMap(nodeToLabels);\n     } finally {\n       readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private \u003cT\u003e Map\u003cNodeId, Set\u003cT\u003e\u003e generateNodeLabelsInfoPerNode(Class\u003cT\u003e type) {\n    try {\n      readLock.lock();\n      Map\u003cNodeId, Set\u003cT\u003e\u003e nodeToLabels \u003d new HashMap\u003c\u003e();\n      for (Entry\u003cString, Host\u003e entry : nodeCollections.entrySet()) {\n        String hostName \u003d entry.getKey();\n        Host host \u003d entry.getValue();\n        for (NodeId nodeId : host.nms.keySet()) {\n          if (type.isAssignableFrom(String.class)) {\n            Set\u003cString\u003e nodeLabels \u003d getLabelsByNode(nodeId);\n            if (nodeLabels \u003d\u003d null || nodeLabels.isEmpty()) {\n              continue;\n            }\n            nodeToLabels.put(nodeId, (Set\u003cT\u003e) nodeLabels);\n          } else {\n            Set\u003cNodeLabel\u003e nodeLabels \u003d getLabelsInfoByNode(nodeId);\n            if (nodeLabels \u003d\u003d null || nodeLabels.isEmpty()) {\n              continue;\n            }\n            nodeToLabels.put(nodeId, (Set\u003cT\u003e) nodeLabels);\n          }\n        }\n        if (!host.labels.isEmpty()) {\n          if (type.isAssignableFrom(String.class)) {\n            nodeToLabels.put(NodeId.newInstance(hostName, WILDCARD_PORT),\n                (Set\u003cT\u003e) host.labels);\n          } else {\n            nodeToLabels.put(NodeId.newInstance(hostName, WILDCARD_PORT),\n                (Set\u003cT\u003e) createNodeLabelFromLabelNames(host.labels));\n          }\n        }\n      }\n      return Collections.unmodifiableMap(nodeToLabels);\n    } finally {\n      readLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/nodelabels/CommonNodeLabelsManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "db7f1653198b950e89567c06898d64f6b930a0ee": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2494. Added NodeLabels Manager internal API and implementation. Contributed by Wangda Tan.\n",
      "commitDate": "10/10/14 11:44 AM",
      "commitName": "db7f1653198b950e89567c06898d64f6b930a0ee",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,25 @@\n+  public Map\u003cNodeId, Set\u003cString\u003e\u003e getNodeLabels() {\n+    try {\n+      readLock.lock();\n+      Map\u003cNodeId, Set\u003cString\u003e\u003e nodeToLabels \u003d\n+          new HashMap\u003cNodeId, Set\u003cString\u003e\u003e();\n+      for (Entry\u003cString, Host\u003e entry : nodeCollections.entrySet()) {\n+        String hostName \u003d entry.getKey();\n+        Host host \u003d entry.getValue();\n+        for (NodeId nodeId : host.nms.keySet()) {\n+          Set\u003cString\u003e nodeLabels \u003d getLabelsByNode(nodeId);\n+          if (nodeLabels \u003d\u003d null || nodeLabels.isEmpty()) {\n+            continue;\n+          }\n+          nodeToLabels.put(nodeId, nodeLabels);\n+        }\n+        if (!host.labels.isEmpty()) {\n+          nodeToLabels\n+              .put(NodeId.newInstance(hostName, WILDCARD_PORT), host.labels);\n+        }\n+      }\n+      return Collections.unmodifiableMap(nodeToLabels);\n+    } finally {\n+      readLock.unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Map\u003cNodeId, Set\u003cString\u003e\u003e getNodeLabels() {\n    try {\n      readLock.lock();\n      Map\u003cNodeId, Set\u003cString\u003e\u003e nodeToLabels \u003d\n          new HashMap\u003cNodeId, Set\u003cString\u003e\u003e();\n      for (Entry\u003cString, Host\u003e entry : nodeCollections.entrySet()) {\n        String hostName \u003d entry.getKey();\n        Host host \u003d entry.getValue();\n        for (NodeId nodeId : host.nms.keySet()) {\n          Set\u003cString\u003e nodeLabels \u003d getLabelsByNode(nodeId);\n          if (nodeLabels \u003d\u003d null || nodeLabels.isEmpty()) {\n            continue;\n          }\n          nodeToLabels.put(nodeId, nodeLabels);\n        }\n        if (!host.labels.isEmpty()) {\n          nodeToLabels\n              .put(NodeId.newInstance(hostName, WILDCARD_PORT), host.labels);\n        }\n      }\n      return Collections.unmodifiableMap(nodeToLabels);\n    } finally {\n      readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/nodelabels/CommonNodeLabelsManager.java"
    }
  }
}