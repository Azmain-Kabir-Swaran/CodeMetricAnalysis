{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MergeManagerImpl.java",
  "functionName": "reserve",
  "functionId": "reserve___mapId-TaskAttemptID__requestedSize-long__fetcher-int",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/MergeManagerImpl.java",
  "functionStartLine": 264,
  "functionEndLine": 304,
  "numCommitsSeen": 28,
  "timeTaken": 9727,
  "changeHistory": [
    "6890d5b472320fa7592ed1b08b623c55a27089c6",
    "d90c13e2da8867661bf19a802add70145ab9a462",
    "73fd247c7649919350ecfd16806af57ffe554649",
    "fae75c2d7f46217378cee71890be797e1ce45507",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "6890d5b472320fa7592ed1b08b623c55a27089c6": "Ybodychange",
    "d90c13e2da8867661bf19a802add70145ab9a462": "Ybodychange",
    "73fd247c7649919350ecfd16806af57ffe554649": "Ymultichange(Ymovefromfile,Ybodychange)",
    "fae75c2d7f46217378cee71890be797e1ce45507": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Ymultichange(Ymovefromfile,Ybodychange)",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6890d5b472320fa7592ed1b08b623c55a27089c6": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6724. Single shuffle to memory must not exceed Integer#MAX_VALUE. (Haibo Chen via gera)\n",
      "commitDate": "01/08/16 11:35 PM",
      "commitName": "6890d5b472320fa7592ed1b08b623c55a27089c6",
      "commitAuthor": "Gera Shegalov",
      "commitDateOld": "22/06/16 5:20 PM",
      "commitNameOld": "79a7289165510072c46779251ebb010248cb0ce8",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 40.26,
      "commitsBetweenForRepo": 390,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n   public synchronized MapOutput\u003cK,V\u003e reserve(TaskAttemptID mapId, \n                                              long requestedSize,\n                                              int fetcher\n                                              ) throws IOException {\n-    if (!canShuffleToMemory(requestedSize)) {\n+    if (requestedSize \u003e maxSingleShuffleLimit) {\n       LOG.info(mapId + \": Shuffling to disk since \" + requestedSize + \n                \" is greater than maxSingleShuffleLimit (\" + \n                maxSingleShuffleLimit + \")\");\n       return new OnDiskMapOutput\u003cK,V\u003e(mapId, this, requestedSize, jobConf,\n          fetcher, true, FileSystem.getLocal(jobConf).getRaw(),\n          mapOutputFile.getInputFileForWrite(mapId.getTaskID(), requestedSize));\n     }\n     \n     // Stall shuffle if we are above the memory limit\n \n     // It is possible that all threads could just be stalling and not make\n     // progress at all. This could happen when:\n     //\n     // requested size is causing the used memory to go above limit \u0026\u0026\n     // requested size \u003c singleShuffleLimit \u0026\u0026\n     // current used size \u003c mergeThreshold (merge will not get triggered)\n     //\n     // To avoid this from happening, we allow exactly one thread to go past\n     // the memory limit. We check (usedMemory \u003e memoryLimit) and not\n     // (usedMemory + requestedSize \u003e memoryLimit). When this thread is done\n     // fetching, this will automatically trigger a merge thereby unlocking\n     // all the stalled threads\n     \n     if (usedMemory \u003e memoryLimit) {\n       LOG.debug(mapId + \": Stalling shuffle since usedMemory (\" + usedMemory\n           + \") is greater than memoryLimit (\" + memoryLimit + \").\" + \n           \" CommitMemory is (\" + commitMemory + \")\"); \n       return null;\n     }\n     \n     // Allow the in-memory shuffle to progress\n     LOG.debug(mapId + \": Proceeding with shuffle since usedMemory (\"\n         + usedMemory + \") is lesser than memoryLimit (\" + memoryLimit + \").\"\n         + \"CommitMemory is (\" + commitMemory + \")\"); \n     return unconditionalReserve(mapId, requestedSize, true);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized MapOutput\u003cK,V\u003e reserve(TaskAttemptID mapId, \n                                             long requestedSize,\n                                             int fetcher\n                                             ) throws IOException {\n    if (requestedSize \u003e maxSingleShuffleLimit) {\n      LOG.info(mapId + \": Shuffling to disk since \" + requestedSize + \n               \" is greater than maxSingleShuffleLimit (\" + \n               maxSingleShuffleLimit + \")\");\n      return new OnDiskMapOutput\u003cK,V\u003e(mapId, this, requestedSize, jobConf,\n         fetcher, true, FileSystem.getLocal(jobConf).getRaw(),\n         mapOutputFile.getInputFileForWrite(mapId.getTaskID(), requestedSize));\n    }\n    \n    // Stall shuffle if we are above the memory limit\n\n    // It is possible that all threads could just be stalling and not make\n    // progress at all. This could happen when:\n    //\n    // requested size is causing the used memory to go above limit \u0026\u0026\n    // requested size \u003c singleShuffleLimit \u0026\u0026\n    // current used size \u003c mergeThreshold (merge will not get triggered)\n    //\n    // To avoid this from happening, we allow exactly one thread to go past\n    // the memory limit. We check (usedMemory \u003e memoryLimit) and not\n    // (usedMemory + requestedSize \u003e memoryLimit). When this thread is done\n    // fetching, this will automatically trigger a merge thereby unlocking\n    // all the stalled threads\n    \n    if (usedMemory \u003e memoryLimit) {\n      LOG.debug(mapId + \": Stalling shuffle since usedMemory (\" + usedMemory\n          + \") is greater than memoryLimit (\" + memoryLimit + \").\" + \n          \" CommitMemory is (\" + commitMemory + \")\"); \n      return null;\n    }\n    \n    // Allow the in-memory shuffle to progress\n    LOG.debug(mapId + \": Proceeding with shuffle since usedMemory (\"\n        + usedMemory + \") is lesser than memoryLimit (\" + memoryLimit + \").\"\n        + \"CommitMemory is (\" + commitMemory + \")\"); \n    return unconditionalReserve(mapId, requestedSize, true);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/MergeManagerImpl.java",
      "extendedDetails": {}
    },
    "d90c13e2da8867661bf19a802add70145ab9a462": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6174. Combine common stream code into parent class for InMemoryMapOutput and OnDiskMapOutput. (Eric Payne via gera)\n",
      "commitDate": "03/06/15 4:50 PM",
      "commitName": "d90c13e2da8867661bf19a802add70145ab9a462",
      "commitAuthor": "Gera Shegalov",
      "commitDateOld": "04/05/15 12:02 PM",
      "commitNameOld": "7dc3c1203d1ab14c09d0aaf0869a5bcdfafb0a5a",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 30.2,
      "commitsBetweenForRepo": 326,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,41 @@\n   public synchronized MapOutput\u003cK,V\u003e reserve(TaskAttemptID mapId, \n                                              long requestedSize,\n                                              int fetcher\n                                              ) throws IOException {\n     if (!canShuffleToMemory(requestedSize)) {\n       LOG.info(mapId + \": Shuffling to disk since \" + requestedSize + \n                \" is greater than maxSingleShuffleLimit (\" + \n                maxSingleShuffleLimit + \")\");\n-      return new OnDiskMapOutput\u003cK,V\u003e(mapId, reduceId, this, requestedSize,\n-                                      jobConf, mapOutputFile, fetcher, true);\n+      return new OnDiskMapOutput\u003cK,V\u003e(mapId, this, requestedSize, jobConf,\n+         fetcher, true, FileSystem.getLocal(jobConf).getRaw(),\n+         mapOutputFile.getInputFileForWrite(mapId.getTaskID(), requestedSize));\n     }\n     \n     // Stall shuffle if we are above the memory limit\n \n     // It is possible that all threads could just be stalling and not make\n     // progress at all. This could happen when:\n     //\n     // requested size is causing the used memory to go above limit \u0026\u0026\n     // requested size \u003c singleShuffleLimit \u0026\u0026\n     // current used size \u003c mergeThreshold (merge will not get triggered)\n     //\n     // To avoid this from happening, we allow exactly one thread to go past\n     // the memory limit. We check (usedMemory \u003e memoryLimit) and not\n     // (usedMemory + requestedSize \u003e memoryLimit). When this thread is done\n     // fetching, this will automatically trigger a merge thereby unlocking\n     // all the stalled threads\n     \n     if (usedMemory \u003e memoryLimit) {\n       LOG.debug(mapId + \": Stalling shuffle since usedMemory (\" + usedMemory\n           + \") is greater than memoryLimit (\" + memoryLimit + \").\" + \n           \" CommitMemory is (\" + commitMemory + \")\"); \n       return null;\n     }\n     \n     // Allow the in-memory shuffle to progress\n     LOG.debug(mapId + \": Proceeding with shuffle since usedMemory (\"\n         + usedMemory + \") is lesser than memoryLimit (\" + memoryLimit + \").\"\n         + \"CommitMemory is (\" + commitMemory + \")\"); \n     return unconditionalReserve(mapId, requestedSize, true);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized MapOutput\u003cK,V\u003e reserve(TaskAttemptID mapId, \n                                             long requestedSize,\n                                             int fetcher\n                                             ) throws IOException {\n    if (!canShuffleToMemory(requestedSize)) {\n      LOG.info(mapId + \": Shuffling to disk since \" + requestedSize + \n               \" is greater than maxSingleShuffleLimit (\" + \n               maxSingleShuffleLimit + \")\");\n      return new OnDiskMapOutput\u003cK,V\u003e(mapId, this, requestedSize, jobConf,\n         fetcher, true, FileSystem.getLocal(jobConf).getRaw(),\n         mapOutputFile.getInputFileForWrite(mapId.getTaskID(), requestedSize));\n    }\n    \n    // Stall shuffle if we are above the memory limit\n\n    // It is possible that all threads could just be stalling and not make\n    // progress at all. This could happen when:\n    //\n    // requested size is causing the used memory to go above limit \u0026\u0026\n    // requested size \u003c singleShuffleLimit \u0026\u0026\n    // current used size \u003c mergeThreshold (merge will not get triggered)\n    //\n    // To avoid this from happening, we allow exactly one thread to go past\n    // the memory limit. We check (usedMemory \u003e memoryLimit) and not\n    // (usedMemory + requestedSize \u003e memoryLimit). When this thread is done\n    // fetching, this will automatically trigger a merge thereby unlocking\n    // all the stalled threads\n    \n    if (usedMemory \u003e memoryLimit) {\n      LOG.debug(mapId + \": Stalling shuffle since usedMemory (\" + usedMemory\n          + \") is greater than memoryLimit (\" + memoryLimit + \").\" + \n          \" CommitMemory is (\" + commitMemory + \")\"); \n      return null;\n    }\n    \n    // Allow the in-memory shuffle to progress\n    LOG.debug(mapId + \": Proceeding with shuffle since usedMemory (\"\n        + usedMemory + \") is lesser than memoryLimit (\" + memoryLimit + \").\"\n        + \"CommitMemory is (\" + commitMemory + \")\"); \n    return unconditionalReserve(mapId, requestedSize, true);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/MergeManagerImpl.java",
      "extendedDetails": {}
    },
    "73fd247c7649919350ecfd16806af57ffe554649": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "MAPREDUCE-4808. Refactor MapOutput and MergeManager to facilitate reuse by Shuffle implementations. (masokan via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1436936 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/01/13 6:10 AM",
      "commitName": "73fd247c7649919350ecfd16806af57ffe554649",
      "commitAuthor": "Alejandro Abdelnur",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "MAPREDUCE-4808. Refactor MapOutput and MergeManager to facilitate reuse by Shuffle implementations. (masokan via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1436936 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/01/13 6:10 AM",
          "commitName": "73fd247c7649919350ecfd16806af57ffe554649",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "21/01/13 6:59 PM",
          "commitNameOld": "cfae13306ac0fb3f3c139d5ac511bf78cede1b77",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.47,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,40 @@\n   public synchronized MapOutput\u003cK,V\u003e reserve(TaskAttemptID mapId, \n                                              long requestedSize,\n                                              int fetcher\n                                              ) throws IOException {\n     if (!canShuffleToMemory(requestedSize)) {\n       LOG.info(mapId + \": Shuffling to disk since \" + requestedSize + \n                \" is greater than maxSingleShuffleLimit (\" + \n                maxSingleShuffleLimit + \")\");\n-      return new MapOutput\u003cK,V\u003e(mapId, this, requestedSize, jobConf, \n-                                localDirAllocator, fetcher, true,\n-                                mapOutputFile);\n+      return new OnDiskMapOutput\u003cK,V\u003e(mapId, reduceId, this, requestedSize,\n+                                      jobConf, mapOutputFile, fetcher, true);\n     }\n     \n     // Stall shuffle if we are above the memory limit\n \n     // It is possible that all threads could just be stalling and not make\n     // progress at all. This could happen when:\n     //\n     // requested size is causing the used memory to go above limit \u0026\u0026\n     // requested size \u003c singleShuffleLimit \u0026\u0026\n     // current used size \u003c mergeThreshold (merge will not get triggered)\n     //\n     // To avoid this from happening, we allow exactly one thread to go past\n     // the memory limit. We check (usedMemory \u003e memoryLimit) and not\n     // (usedMemory + requestedSize \u003e memoryLimit). When this thread is done\n     // fetching, this will automatically trigger a merge thereby unlocking\n     // all the stalled threads\n     \n     if (usedMemory \u003e memoryLimit) {\n       LOG.debug(mapId + \": Stalling shuffle since usedMemory (\" + usedMemory\n           + \") is greater than memoryLimit (\" + memoryLimit + \").\" + \n           \" CommitMemory is (\" + commitMemory + \")\"); \n-      return stallShuffle;\n+      return null;\n     }\n     \n     // Allow the in-memory shuffle to progress\n     LOG.debug(mapId + \": Proceeding with shuffle since usedMemory (\"\n         + usedMemory + \") is lesser than memoryLimit (\" + memoryLimit + \").\"\n         + \"CommitMemory is (\" + commitMemory + \")\"); \n     return unconditionalReserve(mapId, requestedSize, true);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized MapOutput\u003cK,V\u003e reserve(TaskAttemptID mapId, \n                                             long requestedSize,\n                                             int fetcher\n                                             ) throws IOException {\n    if (!canShuffleToMemory(requestedSize)) {\n      LOG.info(mapId + \": Shuffling to disk since \" + requestedSize + \n               \" is greater than maxSingleShuffleLimit (\" + \n               maxSingleShuffleLimit + \")\");\n      return new OnDiskMapOutput\u003cK,V\u003e(mapId, reduceId, this, requestedSize,\n                                      jobConf, mapOutputFile, fetcher, true);\n    }\n    \n    // Stall shuffle if we are above the memory limit\n\n    // It is possible that all threads could just be stalling and not make\n    // progress at all. This could happen when:\n    //\n    // requested size is causing the used memory to go above limit \u0026\u0026\n    // requested size \u003c singleShuffleLimit \u0026\u0026\n    // current used size \u003c mergeThreshold (merge will not get triggered)\n    //\n    // To avoid this from happening, we allow exactly one thread to go past\n    // the memory limit. We check (usedMemory \u003e memoryLimit) and not\n    // (usedMemory + requestedSize \u003e memoryLimit). When this thread is done\n    // fetching, this will automatically trigger a merge thereby unlocking\n    // all the stalled threads\n    \n    if (usedMemory \u003e memoryLimit) {\n      LOG.debug(mapId + \": Stalling shuffle since usedMemory (\" + usedMemory\n          + \") is greater than memoryLimit (\" + memoryLimit + \").\" + \n          \" CommitMemory is (\" + commitMemory + \")\"); \n      return null;\n    }\n    \n    // Allow the in-memory shuffle to progress\n    LOG.debug(mapId + \": Proceeding with shuffle since usedMemory (\"\n        + usedMemory + \") is lesser than memoryLimit (\" + memoryLimit + \").\"\n        + \"CommitMemory is (\" + commitMemory + \")\"); \n    return unconditionalReserve(mapId, requestedSize, true);\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/MergeManagerImpl.java",
          "extendedDetails": {
            "oldPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/MergeManager.java",
            "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/MergeManagerImpl.java",
            "oldMethodName": "reserve",
            "newMethodName": "reserve"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-4808. Refactor MapOutput and MergeManager to facilitate reuse by Shuffle implementations. (masokan via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1436936 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/01/13 6:10 AM",
          "commitName": "73fd247c7649919350ecfd16806af57ffe554649",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "21/01/13 6:59 PM",
          "commitNameOld": "cfae13306ac0fb3f3c139d5ac511bf78cede1b77",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.47,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,40 @@\n   public synchronized MapOutput\u003cK,V\u003e reserve(TaskAttemptID mapId, \n                                              long requestedSize,\n                                              int fetcher\n                                              ) throws IOException {\n     if (!canShuffleToMemory(requestedSize)) {\n       LOG.info(mapId + \": Shuffling to disk since \" + requestedSize + \n                \" is greater than maxSingleShuffleLimit (\" + \n                maxSingleShuffleLimit + \")\");\n-      return new MapOutput\u003cK,V\u003e(mapId, this, requestedSize, jobConf, \n-                                localDirAllocator, fetcher, true,\n-                                mapOutputFile);\n+      return new OnDiskMapOutput\u003cK,V\u003e(mapId, reduceId, this, requestedSize,\n+                                      jobConf, mapOutputFile, fetcher, true);\n     }\n     \n     // Stall shuffle if we are above the memory limit\n \n     // It is possible that all threads could just be stalling and not make\n     // progress at all. This could happen when:\n     //\n     // requested size is causing the used memory to go above limit \u0026\u0026\n     // requested size \u003c singleShuffleLimit \u0026\u0026\n     // current used size \u003c mergeThreshold (merge will not get triggered)\n     //\n     // To avoid this from happening, we allow exactly one thread to go past\n     // the memory limit. We check (usedMemory \u003e memoryLimit) and not\n     // (usedMemory + requestedSize \u003e memoryLimit). When this thread is done\n     // fetching, this will automatically trigger a merge thereby unlocking\n     // all the stalled threads\n     \n     if (usedMemory \u003e memoryLimit) {\n       LOG.debug(mapId + \": Stalling shuffle since usedMemory (\" + usedMemory\n           + \") is greater than memoryLimit (\" + memoryLimit + \").\" + \n           \" CommitMemory is (\" + commitMemory + \")\"); \n-      return stallShuffle;\n+      return null;\n     }\n     \n     // Allow the in-memory shuffle to progress\n     LOG.debug(mapId + \": Proceeding with shuffle since usedMemory (\"\n         + usedMemory + \") is lesser than memoryLimit (\" + memoryLimit + \").\"\n         + \"CommitMemory is (\" + commitMemory + \")\"); \n     return unconditionalReserve(mapId, requestedSize, true);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized MapOutput\u003cK,V\u003e reserve(TaskAttemptID mapId, \n                                             long requestedSize,\n                                             int fetcher\n                                             ) throws IOException {\n    if (!canShuffleToMemory(requestedSize)) {\n      LOG.info(mapId + \": Shuffling to disk since \" + requestedSize + \n               \" is greater than maxSingleShuffleLimit (\" + \n               maxSingleShuffleLimit + \")\");\n      return new OnDiskMapOutput\u003cK,V\u003e(mapId, reduceId, this, requestedSize,\n                                      jobConf, mapOutputFile, fetcher, true);\n    }\n    \n    // Stall shuffle if we are above the memory limit\n\n    // It is possible that all threads could just be stalling and not make\n    // progress at all. This could happen when:\n    //\n    // requested size is causing the used memory to go above limit \u0026\u0026\n    // requested size \u003c singleShuffleLimit \u0026\u0026\n    // current used size \u003c mergeThreshold (merge will not get triggered)\n    //\n    // To avoid this from happening, we allow exactly one thread to go past\n    // the memory limit. We check (usedMemory \u003e memoryLimit) and not\n    // (usedMemory + requestedSize \u003e memoryLimit). When this thread is done\n    // fetching, this will automatically trigger a merge thereby unlocking\n    // all the stalled threads\n    \n    if (usedMemory \u003e memoryLimit) {\n      LOG.debug(mapId + \": Stalling shuffle since usedMemory (\" + usedMemory\n          + \") is greater than memoryLimit (\" + memoryLimit + \").\" + \n          \" CommitMemory is (\" + commitMemory + \")\"); \n      return null;\n    }\n    \n    // Allow the in-memory shuffle to progress\n    LOG.debug(mapId + \": Proceeding with shuffle since usedMemory (\"\n        + usedMemory + \") is lesser than memoryLimit (\" + memoryLimit + \").\"\n        + \"CommitMemory is (\" + commitMemory + \")\"); \n    return unconditionalReserve(mapId, requestedSize, true);\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/MergeManagerImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "fae75c2d7f46217378cee71890be797e1ce45507": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3721. Fixed a race in shuffle which caused reduces to hang. Contributed by Siddharth Seth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1236041 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/01/12 9:40 PM",
      "commitName": "fae75c2d7f46217378cee71890be797e1ce45507",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 154.23,
      "commitsBetweenForRepo": 943,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n   public synchronized MapOutput\u003cK,V\u003e reserve(TaskAttemptID mapId, \n                                              long requestedSize,\n                                              int fetcher\n                                              ) throws IOException {\n     if (!canShuffleToMemory(requestedSize)) {\n       LOG.info(mapId + \": Shuffling to disk since \" + requestedSize + \n                \" is greater than maxSingleShuffleLimit (\" + \n                maxSingleShuffleLimit + \")\");\n       return new MapOutput\u003cK,V\u003e(mapId, this, requestedSize, jobConf, \n                                 localDirAllocator, fetcher, true,\n                                 mapOutputFile);\n     }\n     \n     // Stall shuffle if we are above the memory limit\n \n     // It is possible that all threads could just be stalling and not make\n     // progress at all. This could happen when:\n     //\n     // requested size is causing the used memory to go above limit \u0026\u0026\n     // requested size \u003c singleShuffleLimit \u0026\u0026\n     // current used size \u003c mergeThreshold (merge will not get triggered)\n     //\n     // To avoid this from happening, we allow exactly one thread to go past\n     // the memory limit. We check (usedMemory \u003e memoryLimit) and not\n     // (usedMemory + requestedSize \u003e memoryLimit). When this thread is done\n     // fetching, this will automatically trigger a merge thereby unlocking\n     // all the stalled threads\n     \n     if (usedMemory \u003e memoryLimit) {\n-      LOG.debug(mapId + \": Stalling shuffle since usedMemory (\" + usedMemory + \n-               \") is greater than memoryLimit (\" + memoryLimit + \")\"); \n-      \n+      LOG.debug(mapId + \": Stalling shuffle since usedMemory (\" + usedMemory\n+          + \") is greater than memoryLimit (\" + memoryLimit + \").\" + \n+          \" CommitMemory is (\" + commitMemory + \")\"); \n       return stallShuffle;\n     }\n     \n     // Allow the in-memory shuffle to progress\n-    LOG.debug(mapId + \": Proceeding with shuffle since usedMemory (\" +\n-        usedMemory + \n-        \") is lesser than memoryLimit (\" + memoryLimit + \")\"); \n+    LOG.debug(mapId + \": Proceeding with shuffle since usedMemory (\"\n+        + usedMemory + \") is lesser than memoryLimit (\" + memoryLimit + \").\"\n+        + \"CommitMemory is (\" + commitMemory + \")\"); \n     return unconditionalReserve(mapId, requestedSize, true);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized MapOutput\u003cK,V\u003e reserve(TaskAttemptID mapId, \n                                             long requestedSize,\n                                             int fetcher\n                                             ) throws IOException {\n    if (!canShuffleToMemory(requestedSize)) {\n      LOG.info(mapId + \": Shuffling to disk since \" + requestedSize + \n               \" is greater than maxSingleShuffleLimit (\" + \n               maxSingleShuffleLimit + \")\");\n      return new MapOutput\u003cK,V\u003e(mapId, this, requestedSize, jobConf, \n                                localDirAllocator, fetcher, true,\n                                mapOutputFile);\n    }\n    \n    // Stall shuffle if we are above the memory limit\n\n    // It is possible that all threads could just be stalling and not make\n    // progress at all. This could happen when:\n    //\n    // requested size is causing the used memory to go above limit \u0026\u0026\n    // requested size \u003c singleShuffleLimit \u0026\u0026\n    // current used size \u003c mergeThreshold (merge will not get triggered)\n    //\n    // To avoid this from happening, we allow exactly one thread to go past\n    // the memory limit. We check (usedMemory \u003e memoryLimit) and not\n    // (usedMemory + requestedSize \u003e memoryLimit). When this thread is done\n    // fetching, this will automatically trigger a merge thereby unlocking\n    // all the stalled threads\n    \n    if (usedMemory \u003e memoryLimit) {\n      LOG.debug(mapId + \": Stalling shuffle since usedMemory (\" + usedMemory\n          + \") is greater than memoryLimit (\" + memoryLimit + \").\" + \n          \" CommitMemory is (\" + commitMemory + \")\"); \n      return stallShuffle;\n    }\n    \n    // Allow the in-memory shuffle to progress\n    LOG.debug(mapId + \": Proceeding with shuffle since usedMemory (\"\n        + usedMemory + \") is lesser than memoryLimit (\" + memoryLimit + \").\"\n        + \"CommitMemory is (\" + commitMemory + \")\"); \n    return unconditionalReserve(mapId, requestedSize, true);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/MergeManager.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized MapOutput\u003cK,V\u003e reserve(TaskAttemptID mapId, \n                                             long requestedSize,\n                                             int fetcher\n                                             ) throws IOException {\n    if (!canShuffleToMemory(requestedSize)) {\n      LOG.info(mapId + \": Shuffling to disk since \" + requestedSize + \n               \" is greater than maxSingleShuffleLimit (\" + \n               maxSingleShuffleLimit + \")\");\n      return new MapOutput\u003cK,V\u003e(mapId, this, requestedSize, jobConf, \n                                localDirAllocator, fetcher, true,\n                                mapOutputFile);\n    }\n    \n    // Stall shuffle if we are above the memory limit\n\n    // It is possible that all threads could just be stalling and not make\n    // progress at all. This could happen when:\n    //\n    // requested size is causing the used memory to go above limit \u0026\u0026\n    // requested size \u003c singleShuffleLimit \u0026\u0026\n    // current used size \u003c mergeThreshold (merge will not get triggered)\n    //\n    // To avoid this from happening, we allow exactly one thread to go past\n    // the memory limit. We check (usedMemory \u003e memoryLimit) and not\n    // (usedMemory + requestedSize \u003e memoryLimit). When this thread is done\n    // fetching, this will automatically trigger a merge thereby unlocking\n    // all the stalled threads\n    \n    if (usedMemory \u003e memoryLimit) {\n      LOG.debug(mapId + \": Stalling shuffle since usedMemory (\" + usedMemory + \n               \") is greater than memoryLimit (\" + memoryLimit + \")\"); \n      \n      return stallShuffle;\n    }\n    \n    // Allow the in-memory shuffle to progress\n    LOG.debug(mapId + \": Proceeding with shuffle since usedMemory (\" +\n        usedMemory + \n        \") is lesser than memoryLimit (\" + memoryLimit + \")\"); \n    return unconditionalReserve(mapId, requestedSize, true);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/MergeManager.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/MergeManager.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/MergeManager.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/08/11 4:07 AM",
          "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/08/11 8:02 PM",
          "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,41 @@\n   public synchronized MapOutput\u003cK,V\u003e reserve(TaskAttemptID mapId, \n                                              long requestedSize,\n                                              int fetcher\n                                              ) throws IOException {\n     if (!canShuffleToMemory(requestedSize)) {\n       LOG.info(mapId + \": Shuffling to disk since \" + requestedSize + \n                \" is greater than maxSingleShuffleLimit (\" + \n                maxSingleShuffleLimit + \")\");\n       return new MapOutput\u003cK,V\u003e(mapId, this, requestedSize, jobConf, \n-                                localDirAllocator, fetcher, true);\n+                                localDirAllocator, fetcher, true,\n+                                mapOutputFile);\n     }\n     \n     // Stall shuffle if we are above the memory limit\n \n     // It is possible that all threads could just be stalling and not make\n     // progress at all. This could happen when:\n     //\n     // requested size is causing the used memory to go above limit \u0026\u0026\n     // requested size \u003c singleShuffleLimit \u0026\u0026\n     // current used size \u003c mergeThreshold (merge will not get triggered)\n     //\n     // To avoid this from happening, we allow exactly one thread to go past\n     // the memory limit. We check (usedMemory \u003e memoryLimit) and not\n     // (usedMemory + requestedSize \u003e memoryLimit). When this thread is done\n     // fetching, this will automatically trigger a merge thereby unlocking\n     // all the stalled threads\n     \n     if (usedMemory \u003e memoryLimit) {\n       LOG.debug(mapId + \": Stalling shuffle since usedMemory (\" + usedMemory + \n                \") is greater than memoryLimit (\" + memoryLimit + \")\"); \n       \n       return stallShuffle;\n     }\n     \n     // Allow the in-memory shuffle to progress\n     LOG.debug(mapId + \": Proceeding with shuffle since usedMemory (\" +\n         usedMemory + \n         \") is lesser than memoryLimit (\" + memoryLimit + \")\"); \n     return unconditionalReserve(mapId, requestedSize, true);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized MapOutput\u003cK,V\u003e reserve(TaskAttemptID mapId, \n                                             long requestedSize,\n                                             int fetcher\n                                             ) throws IOException {\n    if (!canShuffleToMemory(requestedSize)) {\n      LOG.info(mapId + \": Shuffling to disk since \" + requestedSize + \n               \" is greater than maxSingleShuffleLimit (\" + \n               maxSingleShuffleLimit + \")\");\n      return new MapOutput\u003cK,V\u003e(mapId, this, requestedSize, jobConf, \n                                localDirAllocator, fetcher, true,\n                                mapOutputFile);\n    }\n    \n    // Stall shuffle if we are above the memory limit\n\n    // It is possible that all threads could just be stalling and not make\n    // progress at all. This could happen when:\n    //\n    // requested size is causing the used memory to go above limit \u0026\u0026\n    // requested size \u003c singleShuffleLimit \u0026\u0026\n    // current used size \u003c mergeThreshold (merge will not get triggered)\n    //\n    // To avoid this from happening, we allow exactly one thread to go past\n    // the memory limit. We check (usedMemory \u003e memoryLimit) and not\n    // (usedMemory + requestedSize \u003e memoryLimit). When this thread is done\n    // fetching, this will automatically trigger a merge thereby unlocking\n    // all the stalled threads\n    \n    if (usedMemory \u003e memoryLimit) {\n      LOG.debug(mapId + \": Stalling shuffle since usedMemory (\" + usedMemory + \n               \") is greater than memoryLimit (\" + memoryLimit + \")\"); \n      \n      return stallShuffle;\n    }\n    \n    // Allow the in-memory shuffle to progress\n    LOG.debug(mapId + \": Proceeding with shuffle since usedMemory (\" +\n        usedMemory + \n        \") is lesser than memoryLimit (\" + memoryLimit + \")\"); \n    return unconditionalReserve(mapId, requestedSize, true);\n  }",
          "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/MergeManager.java",
          "extendedDetails": {
            "oldPath": "mapreduce/src/java/org/apache/hadoop/mapreduce/task/reduce/MergeManager.java",
            "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/MergeManager.java",
            "oldMethodName": "reserve",
            "newMethodName": "reserve"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/08/11 4:07 AM",
          "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/08/11 8:02 PM",
          "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,41 @@\n   public synchronized MapOutput\u003cK,V\u003e reserve(TaskAttemptID mapId, \n                                              long requestedSize,\n                                              int fetcher\n                                              ) throws IOException {\n     if (!canShuffleToMemory(requestedSize)) {\n       LOG.info(mapId + \": Shuffling to disk since \" + requestedSize + \n                \" is greater than maxSingleShuffleLimit (\" + \n                maxSingleShuffleLimit + \")\");\n       return new MapOutput\u003cK,V\u003e(mapId, this, requestedSize, jobConf, \n-                                localDirAllocator, fetcher, true);\n+                                localDirAllocator, fetcher, true,\n+                                mapOutputFile);\n     }\n     \n     // Stall shuffle if we are above the memory limit\n \n     // It is possible that all threads could just be stalling and not make\n     // progress at all. This could happen when:\n     //\n     // requested size is causing the used memory to go above limit \u0026\u0026\n     // requested size \u003c singleShuffleLimit \u0026\u0026\n     // current used size \u003c mergeThreshold (merge will not get triggered)\n     //\n     // To avoid this from happening, we allow exactly one thread to go past\n     // the memory limit. We check (usedMemory \u003e memoryLimit) and not\n     // (usedMemory + requestedSize \u003e memoryLimit). When this thread is done\n     // fetching, this will automatically trigger a merge thereby unlocking\n     // all the stalled threads\n     \n     if (usedMemory \u003e memoryLimit) {\n       LOG.debug(mapId + \": Stalling shuffle since usedMemory (\" + usedMemory + \n                \") is greater than memoryLimit (\" + memoryLimit + \")\"); \n       \n       return stallShuffle;\n     }\n     \n     // Allow the in-memory shuffle to progress\n     LOG.debug(mapId + \": Proceeding with shuffle since usedMemory (\" +\n         usedMemory + \n         \") is lesser than memoryLimit (\" + memoryLimit + \")\"); \n     return unconditionalReserve(mapId, requestedSize, true);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized MapOutput\u003cK,V\u003e reserve(TaskAttemptID mapId, \n                                             long requestedSize,\n                                             int fetcher\n                                             ) throws IOException {\n    if (!canShuffleToMemory(requestedSize)) {\n      LOG.info(mapId + \": Shuffling to disk since \" + requestedSize + \n               \" is greater than maxSingleShuffleLimit (\" + \n               maxSingleShuffleLimit + \")\");\n      return new MapOutput\u003cK,V\u003e(mapId, this, requestedSize, jobConf, \n                                localDirAllocator, fetcher, true,\n                                mapOutputFile);\n    }\n    \n    // Stall shuffle if we are above the memory limit\n\n    // It is possible that all threads could just be stalling and not make\n    // progress at all. This could happen when:\n    //\n    // requested size is causing the used memory to go above limit \u0026\u0026\n    // requested size \u003c singleShuffleLimit \u0026\u0026\n    // current used size \u003c mergeThreshold (merge will not get triggered)\n    //\n    // To avoid this from happening, we allow exactly one thread to go past\n    // the memory limit. We check (usedMemory \u003e memoryLimit) and not\n    // (usedMemory + requestedSize \u003e memoryLimit). When this thread is done\n    // fetching, this will automatically trigger a merge thereby unlocking\n    // all the stalled threads\n    \n    if (usedMemory \u003e memoryLimit) {\n      LOG.debug(mapId + \": Stalling shuffle since usedMemory (\" + usedMemory + \n               \") is greater than memoryLimit (\" + memoryLimit + \")\"); \n      \n      return stallShuffle;\n    }\n    \n    // Allow the in-memory shuffle to progress\n    LOG.debug(mapId + \": Proceeding with shuffle since usedMemory (\" +\n        usedMemory + \n        \") is lesser than memoryLimit (\" + memoryLimit + \")\"); \n    return unconditionalReserve(mapId, requestedSize, true);\n  }",
          "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/MergeManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,40 @@\n+  public synchronized MapOutput\u003cK,V\u003e reserve(TaskAttemptID mapId, \n+                                             long requestedSize,\n+                                             int fetcher\n+                                             ) throws IOException {\n+    if (!canShuffleToMemory(requestedSize)) {\n+      LOG.info(mapId + \": Shuffling to disk since \" + requestedSize + \n+               \" is greater than maxSingleShuffleLimit (\" + \n+               maxSingleShuffleLimit + \")\");\n+      return new MapOutput\u003cK,V\u003e(mapId, this, requestedSize, jobConf, \n+                                localDirAllocator, fetcher, true);\n+    }\n+    \n+    // Stall shuffle if we are above the memory limit\n+\n+    // It is possible that all threads could just be stalling and not make\n+    // progress at all. This could happen when:\n+    //\n+    // requested size is causing the used memory to go above limit \u0026\u0026\n+    // requested size \u003c singleShuffleLimit \u0026\u0026\n+    // current used size \u003c mergeThreshold (merge will not get triggered)\n+    //\n+    // To avoid this from happening, we allow exactly one thread to go past\n+    // the memory limit. We check (usedMemory \u003e memoryLimit) and not\n+    // (usedMemory + requestedSize \u003e memoryLimit). When this thread is done\n+    // fetching, this will automatically trigger a merge thereby unlocking\n+    // all the stalled threads\n+    \n+    if (usedMemory \u003e memoryLimit) {\n+      LOG.debug(mapId + \": Stalling shuffle since usedMemory (\" + usedMemory + \n+               \") is greater than memoryLimit (\" + memoryLimit + \")\"); \n+      \n+      return stallShuffle;\n+    }\n+    \n+    // Allow the in-memory shuffle to progress\n+    LOG.debug(mapId + \": Proceeding with shuffle since usedMemory (\" +\n+        usedMemory + \n+        \") is lesser than memoryLimit (\" + memoryLimit + \")\"); \n+    return unconditionalReserve(mapId, requestedSize, true);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized MapOutput\u003cK,V\u003e reserve(TaskAttemptID mapId, \n                                             long requestedSize,\n                                             int fetcher\n                                             ) throws IOException {\n    if (!canShuffleToMemory(requestedSize)) {\n      LOG.info(mapId + \": Shuffling to disk since \" + requestedSize + \n               \" is greater than maxSingleShuffleLimit (\" + \n               maxSingleShuffleLimit + \")\");\n      return new MapOutput\u003cK,V\u003e(mapId, this, requestedSize, jobConf, \n                                localDirAllocator, fetcher, true);\n    }\n    \n    // Stall shuffle if we are above the memory limit\n\n    // It is possible that all threads could just be stalling and not make\n    // progress at all. This could happen when:\n    //\n    // requested size is causing the used memory to go above limit \u0026\u0026\n    // requested size \u003c singleShuffleLimit \u0026\u0026\n    // current used size \u003c mergeThreshold (merge will not get triggered)\n    //\n    // To avoid this from happening, we allow exactly one thread to go past\n    // the memory limit. We check (usedMemory \u003e memoryLimit) and not\n    // (usedMemory + requestedSize \u003e memoryLimit). When this thread is done\n    // fetching, this will automatically trigger a merge thereby unlocking\n    // all the stalled threads\n    \n    if (usedMemory \u003e memoryLimit) {\n      LOG.debug(mapId + \": Stalling shuffle since usedMemory (\" + usedMemory + \n               \") is greater than memoryLimit (\" + memoryLimit + \")\"); \n      \n      return stallShuffle;\n    }\n    \n    // Allow the in-memory shuffle to progress\n    LOG.debug(mapId + \": Proceeding with shuffle since usedMemory (\" +\n        usedMemory + \n        \") is lesser than memoryLimit (\" + memoryLimit + \")\"); \n    return unconditionalReserve(mapId, requestedSize, true);\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapreduce/task/reduce/MergeManager.java"
    }
  }
}