{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ApiServer.java",
  "functionName": "updateComponentInstances",
  "functionId": "updateComponentInstances___request-HttpServletRequest(annotations-@Context)__serviceName-String(annotations-@PathParam(SERVICE_NAME))__requestContainers-List__Container__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
  "functionStartLine": 558,
  "functionEndLine": 596,
  "numCommitsSeen": 30,
  "timeTaken": 2219,
  "changeHistory": [
    "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0",
    "8d3b39de89809f5eed06f85f00ab223e2f75e49c",
    "4a7369b09547a78f532af66c763c6994a38b5d68"
  ],
  "changeHistoryShort": {
    "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0": "Yfilerename",
    "8d3b39de89809f5eed06f85f00ab223e2f75e49c": "Ybodychange",
    "4a7369b09547a78f532af66c763c6994a38b5d68": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0": {
      "type": "Yfilerename",
      "commitMessage": "YARN-7530.  Refactored YARN service API project location.\n            Contributed by Chandni Singh\n",
      "commitDate": "18/05/18 2:29 PM",
      "commitName": "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "18/05/18 11:29 AM",
      "commitNameOld": "89f59113927dd886f09d8fe2c05ff2cd5d1390c1",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 0.12,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public Response updateComponentInstances(@Context HttpServletRequest request,\n      @PathParam(SERVICE_NAME) String serviceName,\n      List\u003cContainer\u003e requestContainers) {\n\n    try {\n      if (requestContainers \u003d\u003d null || requestContainers.isEmpty()) {\n        throw new YarnException(\"No containers provided.\");\n      }\n      UserGroupInformation ugi \u003d getProxyUser(request);\n      List\u003cString\u003e toUpgrade \u003d new ArrayList\u003c\u003e();\n      for (Container reqContainer : requestContainers) {\n        if (reqContainer.getState() !\u003d null \u0026\u0026\n            reqContainer.getState().equals(ContainerState.UPGRADING)) {\n          toUpgrade.add(reqContainer.getComponentInstanceName());\n        }\n      }\n\n      if (!toUpgrade.isEmpty()) {\n        Service service \u003d getServiceFromClient(ugi, serviceName);\n        LOG.info(\"PUT: upgrade component instances {} for service \u003d {} \" +\n            \"user \u003d {}\", toUpgrade, serviceName, ugi);\n        List\u003cContainer\u003e liveContainers \u003d ServiceApiUtil\n            .getLiveContainers(service, toUpgrade);\n\n        return processContainersUpgrade(ugi, service, liveContainers);\n      }\n    } catch (AccessControlException e) {\n      return formatResponse(Response.Status.FORBIDDEN, e.getMessage());\n    } catch (YarnException e) {\n      return formatResponse(Response.Status.BAD_REQUEST, e.getMessage());\n    } catch (IOException | InterruptedException e) {\n      return formatResponse(Response.Status.INTERNAL_SERVER_ERROR,\n          e.getMessage());\n    } catch (UndeclaredThrowableException e) {\n      return formatResponse(Response.Status.INTERNAL_SERVER_ERROR,\n          e.getCause().getMessage());\n    }\n    return Response.status(Status.NO_CONTENT).build();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java"
      }
    },
    "8d3b39de89809f5eed06f85f00ab223e2f75e49c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8081.  Add support to upgrade a component.\n            Contributed by Chandni Singh\n",
      "commitDate": "15/05/18 5:40 PM",
      "commitName": "8d3b39de89809f5eed06f85f00ab223e2f75e49c",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "03/05/18 10:27 AM",
      "commitNameOld": "7fe3214d4bb810c0da18dd936875b4e2588ba518",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 12.3,
      "commitsBetweenForRepo": 93,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   public Response updateComponentInstances(@Context HttpServletRequest request,\n       @PathParam(SERVICE_NAME) String serviceName,\n       List\u003cContainer\u003e requestContainers) {\n \n     try {\n       if (requestContainers \u003d\u003d null || requestContainers.isEmpty()) {\n         throw new YarnException(\"No containers provided.\");\n       }\n       UserGroupInformation ugi \u003d getProxyUser(request);\n       List\u003cString\u003e toUpgrade \u003d new ArrayList\u003c\u003e();\n       for (Container reqContainer : requestContainers) {\n         if (reqContainer.getState() !\u003d null \u0026\u0026\n             reqContainer.getState().equals(ContainerState.UPGRADING)) {\n           toUpgrade.add(reqContainer.getComponentInstanceName());\n         }\n       }\n \n       if (!toUpgrade.isEmpty()) {\n         Service service \u003d getServiceFromClient(ugi, serviceName);\n         LOG.info(\"PUT: upgrade component instances {} for service \u003d {} \" +\n             \"user \u003d {}\", toUpgrade, serviceName, ugi);\n         List\u003cContainer\u003e liveContainers \u003d ServiceApiUtil\n             .getLiveContainers(service, toUpgrade);\n \n-        return processContainerUpgrade(ugi, service, liveContainers);\n+        return processContainersUpgrade(ugi, service, liveContainers);\n       }\n     } catch (AccessControlException e) {\n       return formatResponse(Response.Status.FORBIDDEN, e.getMessage());\n     } catch (YarnException e) {\n       return formatResponse(Response.Status.BAD_REQUEST, e.getMessage());\n     } catch (IOException | InterruptedException e) {\n       return formatResponse(Response.Status.INTERNAL_SERVER_ERROR,\n           e.getMessage());\n     } catch (UndeclaredThrowableException e) {\n       return formatResponse(Response.Status.INTERNAL_SERVER_ERROR,\n           e.getCause().getMessage());\n     }\n     return Response.status(Status.NO_CONTENT).build();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response updateComponentInstances(@Context HttpServletRequest request,\n      @PathParam(SERVICE_NAME) String serviceName,\n      List\u003cContainer\u003e requestContainers) {\n\n    try {\n      if (requestContainers \u003d\u003d null || requestContainers.isEmpty()) {\n        throw new YarnException(\"No containers provided.\");\n      }\n      UserGroupInformation ugi \u003d getProxyUser(request);\n      List\u003cString\u003e toUpgrade \u003d new ArrayList\u003c\u003e();\n      for (Container reqContainer : requestContainers) {\n        if (reqContainer.getState() !\u003d null \u0026\u0026\n            reqContainer.getState().equals(ContainerState.UPGRADING)) {\n          toUpgrade.add(reqContainer.getComponentInstanceName());\n        }\n      }\n\n      if (!toUpgrade.isEmpty()) {\n        Service service \u003d getServiceFromClient(ugi, serviceName);\n        LOG.info(\"PUT: upgrade component instances {} for service \u003d {} \" +\n            \"user \u003d {}\", toUpgrade, serviceName, ugi);\n        List\u003cContainer\u003e liveContainers \u003d ServiceApiUtil\n            .getLiveContainers(service, toUpgrade);\n\n        return processContainersUpgrade(ugi, service, liveContainers);\n      }\n    } catch (AccessControlException e) {\n      return formatResponse(Response.Status.FORBIDDEN, e.getMessage());\n    } catch (YarnException e) {\n      return formatResponse(Response.Status.BAD_REQUEST, e.getMessage());\n    } catch (IOException | InterruptedException e) {\n      return formatResponse(Response.Status.INTERNAL_SERVER_ERROR,\n          e.getMessage());\n    } catch (UndeclaredThrowableException e) {\n      return formatResponse(Response.Status.INTERNAL_SERVER_ERROR,\n          e.getCause().getMessage());\n    }\n    return Response.status(Status.NO_CONTENT).build();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
      "extendedDetails": {}
    },
    "4a7369b09547a78f532af66c763c6994a38b5d68": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7939.  Added support to upgrade a component instance.\n            Contributed by Chandni Singh\n",
      "commitDate": "26/04/18 1:54 PM",
      "commitName": "4a7369b09547a78f532af66c763c6994a38b5d68",
      "commitAuthor": "Eric Yang",
      "diff": "@@ -0,0 +1,39 @@\n+  public Response updateComponentInstances(@Context HttpServletRequest request,\n+      @PathParam(SERVICE_NAME) String serviceName,\n+      List\u003cContainer\u003e requestContainers) {\n+\n+    try {\n+      if (requestContainers \u003d\u003d null || requestContainers.isEmpty()) {\n+        throw new YarnException(\"No containers provided.\");\n+      }\n+      UserGroupInformation ugi \u003d getProxyUser(request);\n+      List\u003cString\u003e toUpgrade \u003d new ArrayList\u003c\u003e();\n+      for (Container reqContainer : requestContainers) {\n+        if (reqContainer.getState() !\u003d null \u0026\u0026\n+            reqContainer.getState().equals(ContainerState.UPGRADING)) {\n+          toUpgrade.add(reqContainer.getComponentInstanceName());\n+        }\n+      }\n+\n+      if (!toUpgrade.isEmpty()) {\n+        Service service \u003d getServiceFromClient(ugi, serviceName);\n+        LOG.info(\"PUT: upgrade component instances {} for service \u003d {} \" +\n+            \"user \u003d {}\", toUpgrade, serviceName, ugi);\n+        List\u003cContainer\u003e liveContainers \u003d ServiceApiUtil\n+            .getLiveContainers(service, toUpgrade);\n+\n+        return processContainerUpgrade(ugi, service, liveContainers);\n+      }\n+    } catch (AccessControlException e) {\n+      return formatResponse(Response.Status.FORBIDDEN, e.getMessage());\n+    } catch (YarnException e) {\n+      return formatResponse(Response.Status.BAD_REQUEST, e.getMessage());\n+    } catch (IOException | InterruptedException e) {\n+      return formatResponse(Response.Status.INTERNAL_SERVER_ERROR,\n+          e.getMessage());\n+    } catch (UndeclaredThrowableException e) {\n+      return formatResponse(Response.Status.INTERNAL_SERVER_ERROR,\n+          e.getCause().getMessage());\n+    }\n+    return Response.status(Status.NO_CONTENT).build();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Response updateComponentInstances(@Context HttpServletRequest request,\n      @PathParam(SERVICE_NAME) String serviceName,\n      List\u003cContainer\u003e requestContainers) {\n\n    try {\n      if (requestContainers \u003d\u003d null || requestContainers.isEmpty()) {\n        throw new YarnException(\"No containers provided.\");\n      }\n      UserGroupInformation ugi \u003d getProxyUser(request);\n      List\u003cString\u003e toUpgrade \u003d new ArrayList\u003c\u003e();\n      for (Container reqContainer : requestContainers) {\n        if (reqContainer.getState() !\u003d null \u0026\u0026\n            reqContainer.getState().equals(ContainerState.UPGRADING)) {\n          toUpgrade.add(reqContainer.getComponentInstanceName());\n        }\n      }\n\n      if (!toUpgrade.isEmpty()) {\n        Service service \u003d getServiceFromClient(ugi, serviceName);\n        LOG.info(\"PUT: upgrade component instances {} for service \u003d {} \" +\n            \"user \u003d {}\", toUpgrade, serviceName, ugi);\n        List\u003cContainer\u003e liveContainers \u003d ServiceApiUtil\n            .getLiveContainers(service, toUpgrade);\n\n        return processContainerUpgrade(ugi, service, liveContainers);\n      }\n    } catch (AccessControlException e) {\n      return formatResponse(Response.Status.FORBIDDEN, e.getMessage());\n    } catch (YarnException e) {\n      return formatResponse(Response.Status.BAD_REQUEST, e.getMessage());\n    } catch (IOException | InterruptedException e) {\n      return formatResponse(Response.Status.INTERNAL_SERVER_ERROR,\n          e.getMessage());\n    } catch (UndeclaredThrowableException e) {\n      return formatResponse(Response.Status.INTERNAL_SERVER_ERROR,\n          e.getCause().getMessage());\n    }\n    return Response.status(Status.NO_CONTENT).build();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java"
    }
  }
}