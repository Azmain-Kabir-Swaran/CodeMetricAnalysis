{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "S3AInputStream.java",
  "functionName": "lazySeek",
  "functionId": "lazySeek___targetPos-long__len-long",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AInputStream.java",
  "functionStartLine": 344,
  "functionEndLine": 362,
  "numCommitsSeen": 28,
  "timeTaken": 2301,
  "changeHistory": [
    "a36274d69947648dbe82721220cc5240ec5d396d",
    "d503f65b6689b19278ec2a0cf9da5a8762539de8",
    "8110d6a0d59e7dc2ddb25fa424fab188c5e9ce35",
    "4ee3543625c77c06d566fe81644d21c607d6d74d",
    "27c4e90efce04e1b1302f668b5eb22412e00d033",
    "b9e3eff62a7415d8666656a75db69ff3e43f8e7e"
  ],
  "changeHistoryShort": {
    "a36274d69947648dbe82721220cc5240ec5d396d": "Ybodychange",
    "d503f65b6689b19278ec2a0cf9da5a8762539de8": "Ybodychange",
    "8110d6a0d59e7dc2ddb25fa424fab188c5e9ce35": "Ybodychange",
    "4ee3543625c77c06d566fe81644d21c607d6d74d": "Ybodychange",
    "27c4e90efce04e1b1302f668b5eb22412e00d033": "Ybodychange",
    "b9e3eff62a7415d8666656a75db69ff3e43f8e7e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a36274d69947648dbe82721220cc5240ec5d396d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16085. S3Guard: use object version or etags to protect against inconsistent read after replace/overwrite.\n\nContributed by Ben Roling.\n\nS3Guard will now track the etag of uploaded files and, if an S3\nbucket is versioned, the object version.\n\nYou can then control how to react to a mismatch between the data\nin the DynamoDB table and that in the store: warn, fail, or, when\nusing versions, return the original value.\n\nThis adds two new columns to the table: etag and version.\nThis is transparent to older S3A clients -but when such clients\nadd/update data to the S3Guard table, they will not add these values.\nAs a result, the etag/version checks will not work with files uploaded by older clients.\n\nFor a consistent experience, upgrade all clients to use the latest hadoop version.\n",
      "commitDate": "19/05/19 2:29 PM",
      "commitName": "a36274d69947648dbe82721220cc5240ec5d396d",
      "commitAuthor": "Ben Roling",
      "commitDateOld": "12/04/19 6:12 PM",
      "commitNameOld": "2382f63fc0bb4108f3f3c542b4be7c04fbedd7c4",
      "commitAuthorOld": "Sahil Takiar",
      "daysBetweenCommits": 36.85,
      "commitsBetweenForRepo": 174,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,19 @@\n   private void lazySeek(long targetPos, long len) throws IOException {\n \n     // With S3Guard, the metadatastore gave us metadata for the file in\n-    // open(), so we use a slightly different retry policy.\n+    // open(), so we use a slightly different retry policy, but only on initial\n+    // open.  After that, an exception generally means the file has changed\n+    // and there is no point retrying anymore.\n     Invoker invoker \u003d context.getReadInvoker();\n-    invoker.retry(\"lazySeek\", pathStr, true,\n+    invoker.maybeRetry(streamStatistics.openOperations \u003d\u003d 0,\n+        \"lazySeek\", pathStr, true,\n         () -\u003e {\n           //For lazy seek\n           seekInStream(targetPos, len);\n \n           //re-open at specific location if needed\n           if (wrappedStream \u003d\u003d null) {\n             reopen(\"read from new offset\", targetPos, len, false);\n           }\n         });\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void lazySeek(long targetPos, long len) throws IOException {\n\n    // With S3Guard, the metadatastore gave us metadata for the file in\n    // open(), so we use a slightly different retry policy, but only on initial\n    // open.  After that, an exception generally means the file has changed\n    // and there is no point retrying anymore.\n    Invoker invoker \u003d context.getReadInvoker();\n    invoker.maybeRetry(streamStatistics.openOperations \u003d\u003d 0,\n        \"lazySeek\", pathStr, true,\n        () -\u003e {\n          //For lazy seek\n          seekInStream(targetPos, len);\n\n          //re-open at specific location if needed\n          if (wrappedStream \u003d\u003d null) {\n            reopen(\"read from new offset\", targetPos, len, false);\n          }\n        });\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AInputStream.java",
      "extendedDetails": {}
    },
    "d503f65b6689b19278ec2a0cf9da5a8762539de8": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15541. [s3a] Shouldn\u0027t try to drain stream before aborting\nconnection in case of timeout.\n",
      "commitDate": "10/07/18 8:52 AM",
      "commitName": "d503f65b6689b19278ec2a0cf9da5a8762539de8",
      "commitAuthor": "Sean Mackrory",
      "commitDateOld": "27/06/18 10:37 PM",
      "commitNameOld": "2b2399d623539ab68e71a38fa9fbfc9a405bddb8",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 12.43,
      "commitsBetweenForRepo": 75,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,16 @@\n   private void lazySeek(long targetPos, long len) throws IOException {\n \n     // With S3Guard, the metadatastore gave us metadata for the file in\n     // open(), so we use a slightly different retry policy.\n     Invoker invoker \u003d context.getReadInvoker();\n     invoker.retry(\"lazySeek\", pathStr, true,\n         () -\u003e {\n           //For lazy seek\n           seekInStream(targetPos, len);\n \n           //re-open at specific location if needed\n           if (wrappedStream \u003d\u003d null) {\n-            reopen(\"read from new offset\", targetPos, len);\n+            reopen(\"read from new offset\", targetPos, len, false);\n           }\n         });\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void lazySeek(long targetPos, long len) throws IOException {\n\n    // With S3Guard, the metadatastore gave us metadata for the file in\n    // open(), so we use a slightly different retry policy.\n    Invoker invoker \u003d context.getReadInvoker();\n    invoker.retry(\"lazySeek\", pathStr, true,\n        () -\u003e {\n          //For lazy seek\n          seekInStream(targetPos, len);\n\n          //re-open at specific location if needed\n          if (wrappedStream \u003d\u003d null) {\n            reopen(\"read from new offset\", targetPos, len, false);\n          }\n        });\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AInputStream.java",
      "extendedDetails": {}
    },
    "8110d6a0d59e7dc2ddb25fa424fab188c5e9ce35": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13761. S3Guard: implement retries for DDB failures and throttling; translate exceptions.\nContributed by Aaron Fabbri.\n",
      "commitDate": "05/03/18 6:06 AM",
      "commitName": "8110d6a0d59e7dc2ddb25fa424fab188c5e9ce35",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "20/12/17 10:25 AM",
      "commitNameOld": "1ba491ff907fc5d2618add980734a3534e2be098",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 74.82,
      "commitsBetweenForRepo": 402,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,9 +1,16 @@\n   private void lazySeek(long targetPos, long len) throws IOException {\n-    //For lazy seek\n-    seekInStream(targetPos, len);\n \n-    //re-open at specific location if needed\n-    if (wrappedStream \u003d\u003d null) {\n-      reopen(\"read from new offset\", targetPos, len);\n-    }\n+    // With S3Guard, the metadatastore gave us metadata for the file in\n+    // open(), so we use a slightly different retry policy.\n+    Invoker invoker \u003d context.getReadInvoker();\n+    invoker.retry(\"lazySeek\", pathStr, true,\n+        () -\u003e {\n+          //For lazy seek\n+          seekInStream(targetPos, len);\n+\n+          //re-open at specific location if needed\n+          if (wrappedStream \u003d\u003d null) {\n+            reopen(\"read from new offset\", targetPos, len);\n+          }\n+        });\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void lazySeek(long targetPos, long len) throws IOException {\n\n    // With S3Guard, the metadatastore gave us metadata for the file in\n    // open(), so we use a slightly different retry policy.\n    Invoker invoker \u003d context.getReadInvoker();\n    invoker.retry(\"lazySeek\", pathStr, true,\n        () -\u003e {\n          //For lazy seek\n          seekInStream(targetPos, len);\n\n          //re-open at specific location if needed\n          if (wrappedStream \u003d\u003d null) {\n            reopen(\"read from new offset\", targetPos, len);\n          }\n        });\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AInputStream.java",
      "extendedDetails": {}
    },
    "4ee3543625c77c06d566fe81644d21c607d6d74d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13203 S3A: Support fadvise \"random\" mode for high performance readPositioned() reads. Contributed by Rajesh Balamohan and stevel.\n",
      "commitDate": "22/06/16 7:45 AM",
      "commitName": "4ee3543625c77c06d566fe81644d21c607d6d74d",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "21/05/16 8:39 AM",
      "commitNameOld": "39ec1515a205952eda7e171408a8b83eceb4abde",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 31.96,
      "commitsBetweenForRepo": 198,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,9 @@\n   private void lazySeek(long targetPos, long len) throws IOException {\n     //For lazy seek\n-    if (targetPos !\u003d this.pos) {\n-      seekInStream(targetPos, len);\n-    }\n+    seekInStream(targetPos, len);\n \n     //re-open at specific location if needed\n     if (wrappedStream \u003d\u003d null) {\n       reopen(\"read from new offset\", targetPos, len);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void lazySeek(long targetPos, long len) throws IOException {\n    //For lazy seek\n    seekInStream(targetPos, len);\n\n    //re-open at specific location if needed\n    if (wrappedStream \u003d\u003d null) {\n      reopen(\"read from new offset\", targetPos, len);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AInputStream.java",
      "extendedDetails": {}
    },
    "27c4e90efce04e1b1302f668b5eb22412e00d033": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13028 add low level counter metrics for S3A; use in read performance tests. contributed by: stevel\npatch includes\nHADOOP-12844 Recover when S3A fails on IOException in read()\nHADOOP-13058 S3A FS fails during init against a read-only FS if multipart purge\nHADOOP-13047 S3a Forward seek in stream length to be configurable\n",
      "commitDate": "12/05/16 11:24 AM",
      "commitName": "27c4e90efce04e1b1302f668b5eb22412e00d033",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "09/04/16 3:25 AM",
      "commitNameOld": "b9e3eff62a7415d8666656a75db69ff3e43f8e7e",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 33.33,
      "commitsBetweenForRepo": 203,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,11 @@\n   private void lazySeek(long targetPos, long len) throws IOException {\n     //For lazy seek\n     if (targetPos !\u003d this.pos) {\n       seekInStream(targetPos, len);\n     }\n \n     //re-open at specific location if needed\n     if (wrappedStream \u003d\u003d null) {\n-      reopen(targetPos, len);\n+      reopen(\"read from new offset\", targetPos, len);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void lazySeek(long targetPos, long len) throws IOException {\n    //For lazy seek\n    if (targetPos !\u003d this.pos) {\n      seekInStream(targetPos, len);\n    }\n\n    //re-open at specific location if needed\n    if (wrappedStream \u003d\u003d null) {\n      reopen(\"read from new offset\", targetPos, len);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AInputStream.java",
      "extendedDetails": {}
    },
    "b9e3eff62a7415d8666656a75db69ff3e43f8e7e": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-12444 Support lazy seek in S3AInputStream. Rajesh Balamohan via stevel\n",
      "commitDate": "09/04/16 3:25 AM",
      "commitName": "b9e3eff62a7415d8666656a75db69ff3e43f8e7e",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,11 @@\n+  private void lazySeek(long targetPos, long len) throws IOException {\n+    //For lazy seek\n+    if (targetPos !\u003d this.pos) {\n+      seekInStream(targetPos, len);\n+    }\n+\n+    //re-open at specific location if needed\n+    if (wrappedStream \u003d\u003d null) {\n+      reopen(targetPos, len);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void lazySeek(long targetPos, long len) throws IOException {\n    //For lazy seek\n    if (targetPos !\u003d this.pos) {\n      seekInStream(targetPos, len);\n    }\n\n    //re-open at specific location if needed\n    if (wrappedStream \u003d\u003d null) {\n      reopen(targetPos, len);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AInputStream.java"
    }
  }
}