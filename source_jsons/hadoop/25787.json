{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMCommunicator.java",
  "functionName": "register",
  "functionId": "register",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
  "functionStartLine": 145,
  "functionEndLine": 180,
  "numCommitsSeen": 52,
  "timeTaken": 8630,
  "changeHistory": [
    "376233cdd4a4ddbde5a92a0627f78338cb4c38b7",
    "d9f723ed74ce6ffdba02832dd5d2e45bd48b3c92",
    "db807057193311fc06caf912e13000193edd1bd8",
    "82f4348f27a7b6bb74edb583fc17fef9f4f3b082",
    "13420d01f2fb28a0e445dc87ad9ee9b607804d53",
    "ac914f79bc80b152e71e7de5497b73f22824f4a7",
    "5d1b453b8591d87ffb564857015c26c99fb7437c",
    "079ed1c9e1ab0a902e183dca2a5a9d79a7201264",
    "a83fb61ac07c0468cbc7a38526e92683883dd932",
    "64e4fb983e022d8d3375a3e1b8facbf95f7ba403",
    "aa60da6c2ec049cc70897afee6c368cb70493773",
    "c3a4de0ec0389064f5468180d1b9024f64b00f40",
    "28a2eb9d722bb8cbbeee87a1c43b4dc4ef4467ce",
    "df2991c0cbc3f35c2640b93680667507c4f810dd",
    "12743d2169f5a24a9b3be07c9e9dcc3f2f1001f0",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "376233cdd4a4ddbde5a92a0627f78338cb4c38b7": "Ybodychange",
    "d9f723ed74ce6ffdba02832dd5d2e45bd48b3c92": "Ybodychange",
    "db807057193311fc06caf912e13000193edd1bd8": "Ybodychange",
    "82f4348f27a7b6bb74edb583fc17fef9f4f3b082": "Ybodychange",
    "13420d01f2fb28a0e445dc87ad9ee9b607804d53": "Ybodychange",
    "ac914f79bc80b152e71e7de5497b73f22824f4a7": "Ybodychange",
    "5d1b453b8591d87ffb564857015c26c99fb7437c": "Ybodychange",
    "079ed1c9e1ab0a902e183dca2a5a9d79a7201264": "Ybodychange",
    "a83fb61ac07c0468cbc7a38526e92683883dd932": "Ybodychange",
    "64e4fb983e022d8d3375a3e1b8facbf95f7ba403": "Ybodychange",
    "aa60da6c2ec049cc70897afee6c368cb70493773": "Ybodychange",
    "c3a4de0ec0389064f5468180d1b9024f64b00f40": "Ybodychange",
    "28a2eb9d722bb8cbbeee87a1c43b4dc4ef4467ce": "Ybodychange",
    "df2991c0cbc3f35c2640b93680667507c4f810dd": "Ybodychange",
    "12743d2169f5a24a9b3be07c9e9dcc3f2f1001f0": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "376233cdd4a4ddbde5a92a0627f78338cb4c38b7": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5279. Made MR headroom calculation honor cpu dimension when YARN scheduler resource type is memory plus cpu. Contributed by Peng Zhang and Varun Vasudev.\n",
      "commitDate": "22/09/14 9:28 AM",
      "commitName": "376233cdd4a4ddbde5a92a0627f78338cb4c38b7",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "28/08/14 4:29 PM",
      "commitNameOld": "48aa3b7274b73e022835268123d3711e28e7d48e",
      "commitAuthorOld": "Chris Douglas",
      "daysBetweenCommits": 24.71,
      "commitsBetweenForRepo": 251,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,36 @@\n   protected void register() {\n     //Register\n     InetSocketAddress serviceAddr \u003d null;\n     if (clientService !\u003d null ) {\n       serviceAddr \u003d clientService.getBindAddress();\n     }\n     try {\n       RegisterApplicationMasterRequest request \u003d\n         recordFactory.newRecordInstance(RegisterApplicationMasterRequest.class);\n       if (serviceAddr !\u003d null) {\n         request.setHost(serviceAddr.getHostName());\n         request.setRpcPort(serviceAddr.getPort());\n         request.setTrackingUrl(MRWebAppUtil\n             .getAMWebappScheme(getConfig())\n             + serviceAddr.getHostName() + \":\" + clientService.getHttpPort());\n       }\n       RegisterApplicationMasterResponse response \u003d\n         scheduler.registerApplicationMaster(request);\n       isApplicationMasterRegistered \u003d true;\n       maxContainerCapability \u003d response.getMaximumResourceCapability();\n       this.context.getClusterInfo().setMaxContainerCapability(\n           maxContainerCapability);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         setClientToAMToken(response.getClientToAMTokenMasterKey());        \n       }\n       this.applicationACLs \u003d response.getApplicationACLs();\n-      LOG.info(\"maxContainerCapability: \" + maxContainerCapability.getMemory());\n+      LOG.info(\"maxContainerCapability: \" + maxContainerCapability);\n       String queue \u003d response.getQueue();\n       LOG.info(\"queue: \" + queue);\n       job.setQueueName(queue);\n+      this.schedulerResourceTypes.addAll(response.getSchedulerResourceTypes());\n     } catch (Exception are) {\n       LOG.error(\"Exception while registering\", are);\n       throw new YarnRuntimeException(are);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void register() {\n    //Register\n    InetSocketAddress serviceAddr \u003d null;\n    if (clientService !\u003d null ) {\n      serviceAddr \u003d clientService.getBindAddress();\n    }\n    try {\n      RegisterApplicationMasterRequest request \u003d\n        recordFactory.newRecordInstance(RegisterApplicationMasterRequest.class);\n      if (serviceAddr !\u003d null) {\n        request.setHost(serviceAddr.getHostName());\n        request.setRpcPort(serviceAddr.getPort());\n        request.setTrackingUrl(MRWebAppUtil\n            .getAMWebappScheme(getConfig())\n            + serviceAddr.getHostName() + \":\" + clientService.getHttpPort());\n      }\n      RegisterApplicationMasterResponse response \u003d\n        scheduler.registerApplicationMaster(request);\n      isApplicationMasterRegistered \u003d true;\n      maxContainerCapability \u003d response.getMaximumResourceCapability();\n      this.context.getClusterInfo().setMaxContainerCapability(\n          maxContainerCapability);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        setClientToAMToken(response.getClientToAMTokenMasterKey());        \n      }\n      this.applicationACLs \u003d response.getApplicationACLs();\n      LOG.info(\"maxContainerCapability: \" + maxContainerCapability);\n      String queue \u003d response.getQueue();\n      LOG.info(\"queue: \" + queue);\n      job.setQueueName(queue);\n      this.schedulerResourceTypes.addAll(response.getSchedulerResourceTypes());\n    } catch (Exception are) {\n      LOG.error(\"Exception while registering\", are);\n      throw new YarnRuntimeException(are);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {}
    },
    "d9f723ed74ce6ffdba02832dd5d2e45bd48b3c92": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5769. Unregistration to RM should not be called if AM is crashed before registering with RM. Contributed by Rohith\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1577647 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/03/14 11:15 AM",
      "commitName": "d9f723ed74ce6ffdba02832dd5d2e45bd48b3c92",
      "commitAuthor": "Jason Darrell Lowe",
      "commitDateOld": "29/01/14 3:51 PM",
      "commitNameOld": "db807057193311fc06caf912e13000193edd1bd8",
      "commitAuthorOld": "Sanford Ryza",
      "daysBetweenCommits": 43.77,
      "commitsBetweenForRepo": 423,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,35 @@\n   protected void register() {\n     //Register\n     InetSocketAddress serviceAddr \u003d null;\n     if (clientService !\u003d null ) {\n       serviceAddr \u003d clientService.getBindAddress();\n     }\n     try {\n       RegisterApplicationMasterRequest request \u003d\n         recordFactory.newRecordInstance(RegisterApplicationMasterRequest.class);\n       if (serviceAddr !\u003d null) {\n         request.setHost(serviceAddr.getHostName());\n         request.setRpcPort(serviceAddr.getPort());\n         request.setTrackingUrl(MRWebAppUtil\n             .getAMWebappScheme(getConfig())\n             + serviceAddr.getHostName() + \":\" + clientService.getHttpPort());\n       }\n       RegisterApplicationMasterResponse response \u003d\n         scheduler.registerApplicationMaster(request);\n+      isApplicationMasterRegistered \u003d true;\n       maxContainerCapability \u003d response.getMaximumResourceCapability();\n       this.context.getClusterInfo().setMaxContainerCapability(\n           maxContainerCapability);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         setClientToAMToken(response.getClientToAMTokenMasterKey());        \n       }\n       this.applicationACLs \u003d response.getApplicationACLs();\n       LOG.info(\"maxContainerCapability: \" + maxContainerCapability.getMemory());\n       String queue \u003d response.getQueue();\n       LOG.info(\"queue: \" + queue);\n       job.setQueueName(queue);\n     } catch (Exception are) {\n       LOG.error(\"Exception while registering\", are);\n       throw new YarnRuntimeException(are);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void register() {\n    //Register\n    InetSocketAddress serviceAddr \u003d null;\n    if (clientService !\u003d null ) {\n      serviceAddr \u003d clientService.getBindAddress();\n    }\n    try {\n      RegisterApplicationMasterRequest request \u003d\n        recordFactory.newRecordInstance(RegisterApplicationMasterRequest.class);\n      if (serviceAddr !\u003d null) {\n        request.setHost(serviceAddr.getHostName());\n        request.setRpcPort(serviceAddr.getPort());\n        request.setTrackingUrl(MRWebAppUtil\n            .getAMWebappScheme(getConfig())\n            + serviceAddr.getHostName() + \":\" + clientService.getHttpPort());\n      }\n      RegisterApplicationMasterResponse response \u003d\n        scheduler.registerApplicationMaster(request);\n      isApplicationMasterRegistered \u003d true;\n      maxContainerCapability \u003d response.getMaximumResourceCapability();\n      this.context.getClusterInfo().setMaxContainerCapability(\n          maxContainerCapability);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        setClientToAMToken(response.getClientToAMTokenMasterKey());        \n      }\n      this.applicationACLs \u003d response.getApplicationACLs();\n      LOG.info(\"maxContainerCapability: \" + maxContainerCapability.getMemory());\n      String queue \u003d response.getQueue();\n      LOG.info(\"queue: \" + queue);\n      job.setQueueName(queue);\n    } catch (Exception are) {\n      LOG.error(\"Exception while registering\", are);\n      throw new YarnRuntimeException(are);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {}
    },
    "db807057193311fc06caf912e13000193edd1bd8": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5732. Report proper queue when job has been automatically placed (Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1562641 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/01/14 3:51 PM",
      "commitName": "db807057193311fc06caf912e13000193edd1bd8",
      "commitAuthor": "Sanford Ryza",
      "commitDateOld": "06/10/13 1:53 PM",
      "commitNameOld": "f0799c55360e1e77224955f331892390e4361729",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 115.12,
      "commitsBetweenForRepo": 655,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,34 @@\n   protected void register() {\n     //Register\n     InetSocketAddress serviceAddr \u003d null;\n     if (clientService !\u003d null ) {\n       serviceAddr \u003d clientService.getBindAddress();\n     }\n     try {\n       RegisterApplicationMasterRequest request \u003d\n         recordFactory.newRecordInstance(RegisterApplicationMasterRequest.class);\n       if (serviceAddr !\u003d null) {\n         request.setHost(serviceAddr.getHostName());\n         request.setRpcPort(serviceAddr.getPort());\n         request.setTrackingUrl(MRWebAppUtil\n             .getAMWebappScheme(getConfig())\n             + serviceAddr.getHostName() + \":\" + clientService.getHttpPort());\n       }\n       RegisterApplicationMasterResponse response \u003d\n         scheduler.registerApplicationMaster(request);\n       maxContainerCapability \u003d response.getMaximumResourceCapability();\n       this.context.getClusterInfo().setMaxContainerCapability(\n           maxContainerCapability);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         setClientToAMToken(response.getClientToAMTokenMasterKey());        \n       }\n       this.applicationACLs \u003d response.getApplicationACLs();\n       LOG.info(\"maxContainerCapability: \" + maxContainerCapability.getMemory());\n+      String queue \u003d response.getQueue();\n+      LOG.info(\"queue: \" + queue);\n+      job.setQueueName(queue);\n     } catch (Exception are) {\n       LOG.error(\"Exception while registering\", are);\n       throw new YarnRuntimeException(are);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void register() {\n    //Register\n    InetSocketAddress serviceAddr \u003d null;\n    if (clientService !\u003d null ) {\n      serviceAddr \u003d clientService.getBindAddress();\n    }\n    try {\n      RegisterApplicationMasterRequest request \u003d\n        recordFactory.newRecordInstance(RegisterApplicationMasterRequest.class);\n      if (serviceAddr !\u003d null) {\n        request.setHost(serviceAddr.getHostName());\n        request.setRpcPort(serviceAddr.getPort());\n        request.setTrackingUrl(MRWebAppUtil\n            .getAMWebappScheme(getConfig())\n            + serviceAddr.getHostName() + \":\" + clientService.getHttpPort());\n      }\n      RegisterApplicationMasterResponse response \u003d\n        scheduler.registerApplicationMaster(request);\n      maxContainerCapability \u003d response.getMaximumResourceCapability();\n      this.context.getClusterInfo().setMaxContainerCapability(\n          maxContainerCapability);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        setClientToAMToken(response.getClientToAMTokenMasterKey());        \n      }\n      this.applicationACLs \u003d response.getApplicationACLs();\n      LOG.info(\"maxContainerCapability: \" + maxContainerCapability.getMemory());\n      String queue \u003d response.getQueue();\n      LOG.info(\"queue: \" + queue);\n      job.setQueueName(queue);\n    } catch (Exception are) {\n      LOG.error(\"Exception while registering\", are);\n      throw new YarnRuntimeException(are);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {}
    },
    "82f4348f27a7b6bb74edb583fc17fef9f4f3b082": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5536. Fixed MR AM and JHS to respect mapreduce.jobhistory.webapp.https.address. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1528251 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/10/13 3:52 PM",
      "commitName": "82f4348f27a7b6bb74edb583fc17fef9f4f3b082",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "19/09/13 4:35 PM",
      "commitNameOld": "13420d01f2fb28a0e445dc87ad9ee9b607804d53",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 11.97,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,31 @@\n   protected void register() {\n     //Register\n     InetSocketAddress serviceAddr \u003d null;\n     if (clientService !\u003d null ) {\n       serviceAddr \u003d clientService.getBindAddress();\n     }\n     try {\n       RegisterApplicationMasterRequest request \u003d\n         recordFactory.newRecordInstance(RegisterApplicationMasterRequest.class);\n       if (serviceAddr !\u003d null) {\n         request.setHost(serviceAddr.getHostName());\n         request.setRpcPort(serviceAddr.getPort());\n-        String scheme \u003d \"http://\";\n-        if (getConfig().getBoolean(MRConfig.SSL_ENABLED_KEY,\n-            MRConfig.SSL_ENABLED_KEY_DEFAULT)) {\n-          scheme \u003d \"https://\";\n-        }\n-        request.setTrackingUrl(scheme + serviceAddr.getHostName() + \":\"\n-            + clientService.getHttpPort());\n+        request.setTrackingUrl(MRWebAppUtil\n+            .getAMWebappScheme(getConfig())\n+            + serviceAddr.getHostName() + \":\" + clientService.getHttpPort());\n       }\n       RegisterApplicationMasterResponse response \u003d\n         scheduler.registerApplicationMaster(request);\n       maxContainerCapability \u003d response.getMaximumResourceCapability();\n       this.context.getClusterInfo().setMaxContainerCapability(\n           maxContainerCapability);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         setClientToAMToken(response.getClientToAMTokenMasterKey());        \n       }\n       this.applicationACLs \u003d response.getApplicationACLs();\n       LOG.info(\"maxContainerCapability: \" + maxContainerCapability.getMemory());\n     } catch (Exception are) {\n       LOG.error(\"Exception while registering\", are);\n       throw new YarnRuntimeException(are);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void register() {\n    //Register\n    InetSocketAddress serviceAddr \u003d null;\n    if (clientService !\u003d null ) {\n      serviceAddr \u003d clientService.getBindAddress();\n    }\n    try {\n      RegisterApplicationMasterRequest request \u003d\n        recordFactory.newRecordInstance(RegisterApplicationMasterRequest.class);\n      if (serviceAddr !\u003d null) {\n        request.setHost(serviceAddr.getHostName());\n        request.setRpcPort(serviceAddr.getPort());\n        request.setTrackingUrl(MRWebAppUtil\n            .getAMWebappScheme(getConfig())\n            + serviceAddr.getHostName() + \":\" + clientService.getHttpPort());\n      }\n      RegisterApplicationMasterResponse response \u003d\n        scheduler.registerApplicationMaster(request);\n      maxContainerCapability \u003d response.getMaximumResourceCapability();\n      this.context.getClusterInfo().setMaxContainerCapability(\n          maxContainerCapability);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        setClientToAMToken(response.getClientToAMTokenMasterKey());        \n      }\n      this.applicationACLs \u003d response.getApplicationACLs();\n      LOG.info(\"maxContainerCapability: \" + maxContainerCapability.getMemory());\n    } catch (Exception are) {\n      LOG.error(\"Exception while registering\", are);\n      throw new YarnRuntimeException(are);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {}
    },
    "13420d01f2fb28a0e445dc87ad9ee9b607804d53": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1203. Changed YARN web-app proxy to handle http and https URLs from AM registration and finish correctly. Contributed by Omkar Vinit Joshi.\nMAPREDUCE-5515. Fixed MR AM\u0027s webapp to depend on a new config mapreduce.ssl.enabled to enable https and disabling it by default as MR AM needs\nto set up its own certificates etc and not depend on clusters\u0027. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1524864 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/09/13 4:35 PM",
      "commitName": "13420d01f2fb28a0e445dc87ad9ee9b607804d53",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "14/09/13 6:01 PM",
      "commitNameOld": "ec010a29362c6c5572f8681f4e7d0469176345e1",
      "commitAuthorOld": "Bikas Saha",
      "daysBetweenCommits": 4.94,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,35 @@\n   protected void register() {\n     //Register\n     InetSocketAddress serviceAddr \u003d null;\n     if (clientService !\u003d null ) {\n       serviceAddr \u003d clientService.getBindAddress();\n     }\n     try {\n       RegisterApplicationMasterRequest request \u003d\n         recordFactory.newRecordInstance(RegisterApplicationMasterRequest.class);\n       if (serviceAddr !\u003d null) {\n         request.setHost(serviceAddr.getHostName());\n         request.setRpcPort(serviceAddr.getPort());\n-        request.setTrackingUrl(serviceAddr.getHostName() + \":\" + clientService.getHttpPort());\n+        String scheme \u003d \"http://\";\n+        if (getConfig().getBoolean(MRConfig.SSL_ENABLED_KEY,\n+            MRConfig.SSL_ENABLED_KEY_DEFAULT)) {\n+          scheme \u003d \"https://\";\n+        }\n+        request.setTrackingUrl(scheme + serviceAddr.getHostName() + \":\"\n+            + clientService.getHttpPort());\n       }\n       RegisterApplicationMasterResponse response \u003d\n         scheduler.registerApplicationMaster(request);\n       maxContainerCapability \u003d response.getMaximumResourceCapability();\n       this.context.getClusterInfo().setMaxContainerCapability(\n           maxContainerCapability);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         setClientToAMToken(response.getClientToAMTokenMasterKey());        \n       }\n       this.applicationACLs \u003d response.getApplicationACLs();\n       LOG.info(\"maxContainerCapability: \" + maxContainerCapability.getMemory());\n     } catch (Exception are) {\n       LOG.error(\"Exception while registering\", are);\n       throw new YarnRuntimeException(are);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void register() {\n    //Register\n    InetSocketAddress serviceAddr \u003d null;\n    if (clientService !\u003d null ) {\n      serviceAddr \u003d clientService.getBindAddress();\n    }\n    try {\n      RegisterApplicationMasterRequest request \u003d\n        recordFactory.newRecordInstance(RegisterApplicationMasterRequest.class);\n      if (serviceAddr !\u003d null) {\n        request.setHost(serviceAddr.getHostName());\n        request.setRpcPort(serviceAddr.getPort());\n        String scheme \u003d \"http://\";\n        if (getConfig().getBoolean(MRConfig.SSL_ENABLED_KEY,\n            MRConfig.SSL_ENABLED_KEY_DEFAULT)) {\n          scheme \u003d \"https://\";\n        }\n        request.setTrackingUrl(scheme + serviceAddr.getHostName() + \":\"\n            + clientService.getHttpPort());\n      }\n      RegisterApplicationMasterResponse response \u003d\n        scheduler.registerApplicationMaster(request);\n      maxContainerCapability \u003d response.getMaximumResourceCapability();\n      this.context.getClusterInfo().setMaxContainerCapability(\n          maxContainerCapability);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        setClientToAMToken(response.getClientToAMTokenMasterKey());        \n      }\n      this.applicationACLs \u003d response.getApplicationACLs();\n      LOG.info(\"maxContainerCapability: \" + maxContainerCapability.getMemory());\n    } catch (Exception are) {\n      LOG.error(\"Exception while registering\", are);\n      throw new YarnRuntimeException(are);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {}
    },
    "ac914f79bc80b152e71e7de5497b73f22824f4a7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-918. Remove ApplicationAttemptId from RegisterApplicationMasterRequestProto. Contributed by Vinod K V.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1504735 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/07/13 5:57 PM",
      "commitName": "ac914f79bc80b152e71e7de5497b73f22824f4a7",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "16/07/13 3:51 PM",
      "commitNameOld": "bf876f70fba1fbc61f4062255981684b992a56b6",
      "commitAuthorOld": "Bikas Saha",
      "daysBetweenCommits": 2.09,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,29 @@\n   protected void register() {\n     //Register\n     InetSocketAddress serviceAddr \u003d null;\n     if (clientService !\u003d null ) {\n       serviceAddr \u003d clientService.getBindAddress();\n     }\n     try {\n       RegisterApplicationMasterRequest request \u003d\n         recordFactory.newRecordInstance(RegisterApplicationMasterRequest.class);\n-      request.setApplicationAttemptId(applicationAttemptId);\n       if (serviceAddr !\u003d null) {\n         request.setHost(serviceAddr.getHostName());\n         request.setRpcPort(serviceAddr.getPort());\n         request.setTrackingUrl(serviceAddr.getHostName() + \":\" + clientService.getHttpPort());\n       }\n       RegisterApplicationMasterResponse response \u003d\n         scheduler.registerApplicationMaster(request);\n       maxContainerCapability \u003d response.getMaximumResourceCapability();\n       this.context.getClusterInfo().setMaxContainerCapability(\n           maxContainerCapability);\n       if (UserGroupInformation.isSecurityEnabled()) {\n         setClientToAMToken(response.getClientToAMTokenMasterKey());        \n       }\n       this.applicationACLs \u003d response.getApplicationACLs();\n       LOG.info(\"maxContainerCapability: \" + maxContainerCapability.getMemory());\n     } catch (Exception are) {\n       LOG.error(\"Exception while registering\", are);\n       throw new YarnRuntimeException(are);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void register() {\n    //Register\n    InetSocketAddress serviceAddr \u003d null;\n    if (clientService !\u003d null ) {\n      serviceAddr \u003d clientService.getBindAddress();\n    }\n    try {\n      RegisterApplicationMasterRequest request \u003d\n        recordFactory.newRecordInstance(RegisterApplicationMasterRequest.class);\n      if (serviceAddr !\u003d null) {\n        request.setHost(serviceAddr.getHostName());\n        request.setRpcPort(serviceAddr.getPort());\n        request.setTrackingUrl(serviceAddr.getHostName() + \":\" + clientService.getHttpPort());\n      }\n      RegisterApplicationMasterResponse response \u003d\n        scheduler.registerApplicationMaster(request);\n      maxContainerCapability \u003d response.getMaximumResourceCapability();\n      this.context.getClusterInfo().setMaxContainerCapability(\n          maxContainerCapability);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        setClientToAMToken(response.getClientToAMTokenMasterKey());        \n      }\n      this.applicationACLs \u003d response.getApplicationACLs();\n      LOG.info(\"maxContainerCapability: \" + maxContainerCapability.getMemory());\n    } catch (Exception are) {\n      LOG.error(\"Exception while registering\", are);\n      throw new YarnRuntimeException(are);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {}
    },
    "5d1b453b8591d87ffb564857015c26c99fb7437c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-610. ClientToken is no longer set in the environment of the Containers. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1493968 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/06/13 4:13 PM",
      "commitName": "5d1b453b8591d87ffb564857015c26c99fb7437c",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "16/06/13 11:39 PM",
      "commitNameOld": "b9efe6bd4a1277b4067ecde715a7713a85968886",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.69,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,30 @@\n   protected void register() {\n     //Register\n     InetSocketAddress serviceAddr \u003d null;\n     if (clientService !\u003d null ) {\n       serviceAddr \u003d clientService.getBindAddress();\n     }\n     try {\n       RegisterApplicationMasterRequest request \u003d\n         recordFactory.newRecordInstance(RegisterApplicationMasterRequest.class);\n       request.setApplicationAttemptId(applicationAttemptId);\n       if (serviceAddr !\u003d null) {\n         request.setHost(serviceAddr.getHostName());\n         request.setRpcPort(serviceAddr.getPort());\n         request.setTrackingUrl(serviceAddr.getHostName() + \":\" + clientService.getHttpPort());\n       }\n       RegisterApplicationMasterResponse response \u003d\n         scheduler.registerApplicationMaster(request);\n       maxContainerCapability \u003d response.getMaximumResourceCapability();\n       this.context.getClusterInfo().setMaxContainerCapability(\n           maxContainerCapability);\n+      if (UserGroupInformation.isSecurityEnabled()) {\n+        setClientToAMToken(response.getClientToAMTokenMasterKey());        \n+      }\n       this.applicationACLs \u003d response.getApplicationACLs();\n       LOG.info(\"maxContainerCapability: \" + maxContainerCapability.getMemory());\n     } catch (Exception are) {\n       LOG.error(\"Exception while registering\", are);\n       throw new YarnRuntimeException(are);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void register() {\n    //Register\n    InetSocketAddress serviceAddr \u003d null;\n    if (clientService !\u003d null ) {\n      serviceAddr \u003d clientService.getBindAddress();\n    }\n    try {\n      RegisterApplicationMasterRequest request \u003d\n        recordFactory.newRecordInstance(RegisterApplicationMasterRequest.class);\n      request.setApplicationAttemptId(applicationAttemptId);\n      if (serviceAddr !\u003d null) {\n        request.setHost(serviceAddr.getHostName());\n        request.setRpcPort(serviceAddr.getPort());\n        request.setTrackingUrl(serviceAddr.getHostName() + \":\" + clientService.getHttpPort());\n      }\n      RegisterApplicationMasterResponse response \u003d\n        scheduler.registerApplicationMaster(request);\n      maxContainerCapability \u003d response.getMaximumResourceCapability();\n      this.context.getClusterInfo().setMaxContainerCapability(\n          maxContainerCapability);\n      if (UserGroupInformation.isSecurityEnabled()) {\n        setClientToAMToken(response.getClientToAMTokenMasterKey());        \n      }\n      this.applicationACLs \u003d response.getApplicationACLs();\n      LOG.info(\"maxContainerCapability: \" + maxContainerCapability.getMemory());\n    } catch (Exception are) {\n      LOG.error(\"Exception while registering\", are);\n      throw new YarnRuntimeException(are);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {}
    },
    "079ed1c9e1ab0a902e183dca2a5a9d79a7201264": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5310. MRAM should not normalize allocation request capabilities. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1493207 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/06/13 12:06 PM",
      "commitName": "079ed1c9e1ab0a902e183dca2a5a9d79a7201264",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "13/06/13 4:25 PM",
      "commitNameOld": "c0cd68d8fbf5c8cafa6d563c7d0401e7a87a2d9e",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.82,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,27 @@\n   protected void register() {\n     //Register\n     InetSocketAddress serviceAddr \u003d null;\n     if (clientService !\u003d null ) {\n       serviceAddr \u003d clientService.getBindAddress();\n     }\n     try {\n       RegisterApplicationMasterRequest request \u003d\n         recordFactory.newRecordInstance(RegisterApplicationMasterRequest.class);\n       request.setApplicationAttemptId(applicationAttemptId);\n       if (serviceAddr !\u003d null) {\n         request.setHost(serviceAddr.getHostName());\n         request.setRpcPort(serviceAddr.getPort());\n         request.setTrackingUrl(serviceAddr.getHostName() + \":\" + clientService.getHttpPort());\n       }\n       RegisterApplicationMasterResponse response \u003d\n         scheduler.registerApplicationMaster(request);\n-      minContainerCapability \u003d response.getMinimumResourceCapability();\n       maxContainerCapability \u003d response.getMaximumResourceCapability();\n-      this.context.getClusterInfo().setMinContainerCapability(\n-          minContainerCapability);\n       this.context.getClusterInfo().setMaxContainerCapability(\n           maxContainerCapability);\n       this.applicationACLs \u003d response.getApplicationACLs();\n-      LOG.info(\"minContainerCapability: \" + minContainerCapability.getMemory());\n       LOG.info(\"maxContainerCapability: \" + maxContainerCapability.getMemory());\n     } catch (Exception are) {\n       LOG.error(\"Exception while registering\", are);\n       throw new YarnRuntimeException(are);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void register() {\n    //Register\n    InetSocketAddress serviceAddr \u003d null;\n    if (clientService !\u003d null ) {\n      serviceAddr \u003d clientService.getBindAddress();\n    }\n    try {\n      RegisterApplicationMasterRequest request \u003d\n        recordFactory.newRecordInstance(RegisterApplicationMasterRequest.class);\n      request.setApplicationAttemptId(applicationAttemptId);\n      if (serviceAddr !\u003d null) {\n        request.setHost(serviceAddr.getHostName());\n        request.setRpcPort(serviceAddr.getPort());\n        request.setTrackingUrl(serviceAddr.getHostName() + \":\" + clientService.getHttpPort());\n      }\n      RegisterApplicationMasterResponse response \u003d\n        scheduler.registerApplicationMaster(request);\n      maxContainerCapability \u003d response.getMaximumResourceCapability();\n      this.context.getClusterInfo().setMaxContainerCapability(\n          maxContainerCapability);\n      this.applicationACLs \u003d response.getApplicationACLs();\n      LOG.info(\"maxContainerCapability: \" + maxContainerCapability.getMemory());\n    } catch (Exception are) {\n      LOG.error(\"Exception while registering\", are);\n      throw new YarnRuntimeException(are);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {}
    },
    "a83fb61ac07c0468cbc7a38526e92683883dd932": {
      "type": "Ybodychange",
      "commitMessage": "YARN-635. Renamed YarnRemoteException to YarnException. Contributed by Siddharth Seth.\nMAPREDUCE-5301. Updated MR code to work with YARN-635 changes of renaming YarnRemoteException to YarnException. Contributed by Siddharth Seth\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489283 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/06/13 9:05 PM",
      "commitName": "a83fb61ac07c0468cbc7a38526e92683883dd932",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "24/04/13 7:50 PM",
      "commitNameOld": "e96077aaf4846a9c49c2012359b0e70aaba242e1",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 40.05,
      "commitsBetweenForRepo": 251,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   protected void register() {\n     //Register\n     InetSocketAddress serviceAddr \u003d null;\n     if (clientService !\u003d null ) {\n       serviceAddr \u003d clientService.getBindAddress();\n     }\n     try {\n       RegisterApplicationMasterRequest request \u003d\n         recordFactory.newRecordInstance(RegisterApplicationMasterRequest.class);\n       request.setApplicationAttemptId(applicationAttemptId);\n       if (serviceAddr !\u003d null) {\n         request.setHost(serviceAddr.getHostName());\n         request.setRpcPort(serviceAddr.getPort());\n         request.setTrackingUrl(serviceAddr.getHostName() + \":\" + clientService.getHttpPort());\n       }\n       RegisterApplicationMasterResponse response \u003d\n         scheduler.registerApplicationMaster(request);\n       minContainerCapability \u003d response.getMinimumResourceCapability();\n       maxContainerCapability \u003d response.getMaximumResourceCapability();\n       this.context.getClusterInfo().setMinContainerCapability(\n           minContainerCapability);\n       this.context.getClusterInfo().setMaxContainerCapability(\n           maxContainerCapability);\n       this.applicationACLs \u003d response.getApplicationACLs();\n       LOG.info(\"minContainerCapability: \" + minContainerCapability.getMemory());\n       LOG.info(\"maxContainerCapability: \" + maxContainerCapability.getMemory());\n     } catch (Exception are) {\n       LOG.error(\"Exception while registering\", are);\n-      throw new YarnException(are);\n+      throw new YarnRuntimeException(are);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void register() {\n    //Register\n    InetSocketAddress serviceAddr \u003d null;\n    if (clientService !\u003d null ) {\n      serviceAddr \u003d clientService.getBindAddress();\n    }\n    try {\n      RegisterApplicationMasterRequest request \u003d\n        recordFactory.newRecordInstance(RegisterApplicationMasterRequest.class);\n      request.setApplicationAttemptId(applicationAttemptId);\n      if (serviceAddr !\u003d null) {\n        request.setHost(serviceAddr.getHostName());\n        request.setRpcPort(serviceAddr.getPort());\n        request.setTrackingUrl(serviceAddr.getHostName() + \":\" + clientService.getHttpPort());\n      }\n      RegisterApplicationMasterResponse response \u003d\n        scheduler.registerApplicationMaster(request);\n      minContainerCapability \u003d response.getMinimumResourceCapability();\n      maxContainerCapability \u003d response.getMaximumResourceCapability();\n      this.context.getClusterInfo().setMinContainerCapability(\n          minContainerCapability);\n      this.context.getClusterInfo().setMaxContainerCapability(\n          maxContainerCapability);\n      this.applicationACLs \u003d response.getApplicationACLs();\n      LOG.info(\"minContainerCapability: \" + minContainerCapability.getMemory());\n      LOG.info(\"maxContainerCapability: \" + maxContainerCapability.getMemory());\n    } catch (Exception are) {\n      LOG.error(\"Exception while registering\", are);\n      throw new YarnRuntimeException(are);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {}
    },
    "64e4fb983e022d8d3375a3e1b8facbf95f7ba403": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4819. AM can rerun job after reporting final job status to the client (bobby and Bikas Saha via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1429114 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/01/13 12:35 PM",
      "commitName": "64e4fb983e022d8d3375a3e1b8facbf95f7ba403",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "04/01/13 11:15 AM",
      "commitNameOld": "78ab699fe93cafbaff8f496be53d26aff40a68b1",
      "commitAuthorOld": "Jason Darrell Lowe",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,31 @@\n   protected void register() {\n     //Register\n-    InetSocketAddress serviceAddr \u003d clientService.getBindAddress();\n+    InetSocketAddress serviceAddr \u003d null;\n+    if (clientService !\u003d null ) {\n+      serviceAddr \u003d clientService.getBindAddress();\n+    }\n     try {\n       RegisterApplicationMasterRequest request \u003d\n         recordFactory.newRecordInstance(RegisterApplicationMasterRequest.class);\n       request.setApplicationAttemptId(applicationAttemptId);\n-      request.setHost(serviceAddr.getHostName());\n-      request.setRpcPort(serviceAddr.getPort());\n-      request.setTrackingUrl(serviceAddr.getHostName() + \":\" + clientService.getHttpPort());\n+      if (serviceAddr !\u003d null) {\n+        request.setHost(serviceAddr.getHostName());\n+        request.setRpcPort(serviceAddr.getPort());\n+        request.setTrackingUrl(serviceAddr.getHostName() + \":\" + clientService.getHttpPort());\n+      }\n       RegisterApplicationMasterResponse response \u003d\n         scheduler.registerApplicationMaster(request);\n       minContainerCapability \u003d response.getMinimumResourceCapability();\n       maxContainerCapability \u003d response.getMaximumResourceCapability();\n       this.context.getClusterInfo().setMinContainerCapability(\n           minContainerCapability);\n       this.context.getClusterInfo().setMaxContainerCapability(\n           maxContainerCapability);\n       this.applicationACLs \u003d response.getApplicationACLs();\n       LOG.info(\"minContainerCapability: \" + minContainerCapability.getMemory());\n       LOG.info(\"maxContainerCapability: \" + maxContainerCapability.getMemory());\n     } catch (Exception are) {\n       LOG.error(\"Exception while registering\", are);\n       throw new YarnException(are);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void register() {\n    //Register\n    InetSocketAddress serviceAddr \u003d null;\n    if (clientService !\u003d null ) {\n      serviceAddr \u003d clientService.getBindAddress();\n    }\n    try {\n      RegisterApplicationMasterRequest request \u003d\n        recordFactory.newRecordInstance(RegisterApplicationMasterRequest.class);\n      request.setApplicationAttemptId(applicationAttemptId);\n      if (serviceAddr !\u003d null) {\n        request.setHost(serviceAddr.getHostName());\n        request.setRpcPort(serviceAddr.getPort());\n        request.setTrackingUrl(serviceAddr.getHostName() + \":\" + clientService.getHttpPort());\n      }\n      RegisterApplicationMasterResponse response \u003d\n        scheduler.registerApplicationMaster(request);\n      minContainerCapability \u003d response.getMinimumResourceCapability();\n      maxContainerCapability \u003d response.getMaximumResourceCapability();\n      this.context.getClusterInfo().setMinContainerCapability(\n          minContainerCapability);\n      this.context.getClusterInfo().setMaxContainerCapability(\n          maxContainerCapability);\n      this.applicationACLs \u003d response.getApplicationACLs();\n      LOG.info(\"minContainerCapability: \" + minContainerCapability.getMemory());\n      LOG.info(\"maxContainerCapability: \" + maxContainerCapability.getMemory());\n    } catch (Exception are) {\n      LOG.error(\"Exception while registering\", are);\n      throw new YarnException(are);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {}
    },
    "aa60da6c2ec049cc70897afee6c368cb70493773": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4162. Correctly set token service (Daryn Sharp via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1335567 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/05/12 8:07 AM",
      "commitName": "aa60da6c2ec049cc70897afee6c368cb70493773",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "18/04/12 11:46 AM",
      "commitNameOld": "32d511065a2612d37591f09e53eed8ec1488587d",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 19.85,
      "commitsBetweenForRepo": 122,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,26 @@\n   protected void register() {\n     //Register\n-    String host \u003d clientService.getBindAddress().getAddress()\n-        .getCanonicalHostName();\n+    InetSocketAddress serviceAddr \u003d clientService.getBindAddress();\n     try {\n       RegisterApplicationMasterRequest request \u003d\n         recordFactory.newRecordInstance(RegisterApplicationMasterRequest.class);\n       request.setApplicationAttemptId(applicationAttemptId);\n-      request.setHost(host);\n-      request.setRpcPort(clientService.getBindAddress().getPort());\n-      request.setTrackingUrl(host + \":\" + clientService.getHttpPort());\n+      request.setHost(serviceAddr.getHostName());\n+      request.setRpcPort(serviceAddr.getPort());\n+      request.setTrackingUrl(serviceAddr.getHostName() + \":\" + clientService.getHttpPort());\n       RegisterApplicationMasterResponse response \u003d\n         scheduler.registerApplicationMaster(request);\n       minContainerCapability \u003d response.getMinimumResourceCapability();\n       maxContainerCapability \u003d response.getMaximumResourceCapability();\n       this.context.getClusterInfo().setMinContainerCapability(\n           minContainerCapability);\n       this.context.getClusterInfo().setMaxContainerCapability(\n           maxContainerCapability);\n       this.applicationACLs \u003d response.getApplicationACLs();\n       LOG.info(\"minContainerCapability: \" + minContainerCapability.getMemory());\n       LOG.info(\"maxContainerCapability: \" + maxContainerCapability.getMemory());\n     } catch (Exception are) {\n       LOG.error(\"Exception while registering\", are);\n       throw new YarnException(are);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void register() {\n    //Register\n    InetSocketAddress serviceAddr \u003d clientService.getBindAddress();\n    try {\n      RegisterApplicationMasterRequest request \u003d\n        recordFactory.newRecordInstance(RegisterApplicationMasterRequest.class);\n      request.setApplicationAttemptId(applicationAttemptId);\n      request.setHost(serviceAddr.getHostName());\n      request.setRpcPort(serviceAddr.getPort());\n      request.setTrackingUrl(serviceAddr.getHostName() + \":\" + clientService.getHttpPort());\n      RegisterApplicationMasterResponse response \u003d\n        scheduler.registerApplicationMaster(request);\n      minContainerCapability \u003d response.getMinimumResourceCapability();\n      maxContainerCapability \u003d response.getMaximumResourceCapability();\n      this.context.getClusterInfo().setMinContainerCapability(\n          minContainerCapability);\n      this.context.getClusterInfo().setMaxContainerCapability(\n          maxContainerCapability);\n      this.applicationACLs \u003d response.getApplicationACLs();\n      LOG.info(\"minContainerCapability: \" + minContainerCapability.getMemory());\n      LOG.info(\"maxContainerCapability: \" + maxContainerCapability.getMemory());\n    } catch (Exception are) {\n      LOG.error(\"Exception while registering\", are);\n      throw new YarnException(are);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {}
    },
    "c3a4de0ec0389064f5468180d1b9024f64b00f40": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3961. Map/ReduceSlotMillis computation incorrect (Siddharth Seth via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1297788 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/03/12 3:21 PM",
      "commitName": "c3a4de0ec0389064f5468180d1b9024f64b00f40",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "03/03/12 9:23 PM",
      "commitNameOld": "5f52156aa2389e8583a699fb3ba7b78250390154",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 2.75,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,27 @@\n   protected void register() {\n     //Register\n     String host \u003d clientService.getBindAddress().getAddress()\n         .getCanonicalHostName();\n     try {\n       RegisterApplicationMasterRequest request \u003d\n         recordFactory.newRecordInstance(RegisterApplicationMasterRequest.class);\n       request.setApplicationAttemptId(applicationAttemptId);\n       request.setHost(host);\n       request.setRpcPort(clientService.getBindAddress().getPort());\n       request.setTrackingUrl(host + \":\" + clientService.getHttpPort());\n       RegisterApplicationMasterResponse response \u003d\n         scheduler.registerApplicationMaster(request);\n       minContainerCapability \u003d response.getMinimumResourceCapability();\n       maxContainerCapability \u003d response.getMaximumResourceCapability();\n+      this.context.getClusterInfo().setMinContainerCapability(\n+          minContainerCapability);\n+      this.context.getClusterInfo().setMaxContainerCapability(\n+          maxContainerCapability);\n       this.applicationACLs \u003d response.getApplicationACLs();\n       LOG.info(\"minContainerCapability: \" + minContainerCapability.getMemory());\n       LOG.info(\"maxContainerCapability: \" + maxContainerCapability.getMemory());\n     } catch (Exception are) {\n       LOG.error(\"Exception while registering\", are);\n       throw new YarnException(are);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void register() {\n    //Register\n    String host \u003d clientService.getBindAddress().getAddress()\n        .getCanonicalHostName();\n    try {\n      RegisterApplicationMasterRequest request \u003d\n        recordFactory.newRecordInstance(RegisterApplicationMasterRequest.class);\n      request.setApplicationAttemptId(applicationAttemptId);\n      request.setHost(host);\n      request.setRpcPort(clientService.getBindAddress().getPort());\n      request.setTrackingUrl(host + \":\" + clientService.getHttpPort());\n      RegisterApplicationMasterResponse response \u003d\n        scheduler.registerApplicationMaster(request);\n      minContainerCapability \u003d response.getMinimumResourceCapability();\n      maxContainerCapability \u003d response.getMaximumResourceCapability();\n      this.context.getClusterInfo().setMinContainerCapability(\n          minContainerCapability);\n      this.context.getClusterInfo().setMaxContainerCapability(\n          maxContainerCapability);\n      this.applicationACLs \u003d response.getApplicationACLs();\n      LOG.info(\"minContainerCapability: \" + minContainerCapability.getMemory());\n      LOG.info(\"maxContainerCapability: \" + maxContainerCapability.getMemory());\n    } catch (Exception are) {\n      LOG.error(\"Exception while registering\", are);\n      throw new YarnException(are);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {}
    },
    "28a2eb9d722bb8cbbeee87a1c43b4dc4ef4467ce": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3810. Performance tweaks - reduced logging in AM and defined hascode/equals for ResourceRequest \u0026 Priority. Contributed by Vinod K V. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1241205 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/02/12 2:01 PM",
      "commitName": "28a2eb9d722bb8cbbeee87a1c43b4dc4ef4467ce",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "04/01/12 5:37 PM",
      "commitNameOld": "08f8abf5639d39167952dc5120b44fe35c63ff7a",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 32.85,
      "commitsBetweenForRepo": 189,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   protected void register() {\n     //Register\n     String host \u003d clientService.getBindAddress().getAddress()\n         .getCanonicalHostName();\n     try {\n       RegisterApplicationMasterRequest request \u003d\n         recordFactory.newRecordInstance(RegisterApplicationMasterRequest.class);\n       request.setApplicationAttemptId(applicationAttemptId);\n       request.setHost(host);\n       request.setRpcPort(clientService.getBindAddress().getPort());\n       request.setTrackingUrl(host + \":\" + clientService.getHttpPort());\n       RegisterApplicationMasterResponse response \u003d\n         scheduler.registerApplicationMaster(request);\n       minContainerCapability \u003d response.getMinimumResourceCapability();\n       maxContainerCapability \u003d response.getMaximumResourceCapability();\n       this.applicationACLs \u003d response.getApplicationACLs();\n       LOG.info(\"minContainerCapability: \" + minContainerCapability.getMemory());\n       LOG.info(\"maxContainerCapability: \" + maxContainerCapability.getMemory());\n     } catch (Exception are) {\n-      LOG.info(\"Exception while registering\", are);\n+      LOG.error(\"Exception while registering\", are);\n       throw new YarnException(are);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void register() {\n    //Register\n    String host \u003d clientService.getBindAddress().getAddress()\n        .getCanonicalHostName();\n    try {\n      RegisterApplicationMasterRequest request \u003d\n        recordFactory.newRecordInstance(RegisterApplicationMasterRequest.class);\n      request.setApplicationAttemptId(applicationAttemptId);\n      request.setHost(host);\n      request.setRpcPort(clientService.getBindAddress().getPort());\n      request.setTrackingUrl(host + \":\" + clientService.getHttpPort());\n      RegisterApplicationMasterResponse response \u003d\n        scheduler.registerApplicationMaster(request);\n      minContainerCapability \u003d response.getMinimumResourceCapability();\n      maxContainerCapability \u003d response.getMaximumResourceCapability();\n      this.applicationACLs \u003d response.getApplicationACLs();\n      LOG.info(\"minContainerCapability: \" + minContainerCapability.getMemory());\n      LOG.info(\"maxContainerCapability: \" + maxContainerCapability.getMemory());\n    } catch (Exception are) {\n      LOG.error(\"Exception while registering\", are);\n      throw new YarnException(are);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {}
    },
    "df2991c0cbc3f35c2640b93680667507c4f810dd": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3104. Implemented Application-acls. (vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1186748 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/10/11 4:45 AM",
      "commitName": "df2991c0cbc3f35c2640b93680667507c4f810dd",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "16/10/11 12:27 PM",
      "commitNameOld": "68328ae92632afc9cdd6e75b7a8d832723ddbe3b",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 3.68,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,23 @@\n   protected void register() {\n     //Register\n     String host \u003d clientService.getBindAddress().getAddress()\n         .getCanonicalHostName();\n     try {\n       RegisterApplicationMasterRequest request \u003d\n         recordFactory.newRecordInstance(RegisterApplicationMasterRequest.class);\n       request.setApplicationAttemptId(applicationAttemptId);\n       request.setHost(host);\n       request.setRpcPort(clientService.getBindAddress().getPort());\n       request.setTrackingUrl(host + \":\" + clientService.getHttpPort());\n       RegisterApplicationMasterResponse response \u003d\n         scheduler.registerApplicationMaster(request);\n       minContainerCapability \u003d response.getMinimumResourceCapability();\n       maxContainerCapability \u003d response.getMaximumResourceCapability();\n+      this.applicationACLs \u003d response.getApplicationACLs();\n       LOG.info(\"minContainerCapability: \" + minContainerCapability.getMemory());\n       LOG.info(\"maxContainerCapability: \" + maxContainerCapability.getMemory());\n     } catch (Exception are) {\n       LOG.info(\"Exception while registering\", are);\n       throw new YarnException(are);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void register() {\n    //Register\n    String host \u003d clientService.getBindAddress().getAddress()\n        .getCanonicalHostName();\n    try {\n      RegisterApplicationMasterRequest request \u003d\n        recordFactory.newRecordInstance(RegisterApplicationMasterRequest.class);\n      request.setApplicationAttemptId(applicationAttemptId);\n      request.setHost(host);\n      request.setRpcPort(clientService.getBindAddress().getPort());\n      request.setTrackingUrl(host + \":\" + clientService.getHttpPort());\n      RegisterApplicationMasterResponse response \u003d\n        scheduler.registerApplicationMaster(request);\n      minContainerCapability \u003d response.getMinimumResourceCapability();\n      maxContainerCapability \u003d response.getMaximumResourceCapability();\n      this.applicationACLs \u003d response.getApplicationACLs();\n      LOG.info(\"minContainerCapability: \" + minContainerCapability.getMemory());\n      LOG.info(\"maxContainerCapability: \" + maxContainerCapability.getMemory());\n    } catch (Exception are) {\n      LOG.info(\"Exception while registering\", are);\n      throw new YarnException(are);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {}
    },
    "12743d2169f5a24a9b3be07c9e9dcc3f2f1001f0": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2792. Replace usage of node ip-addresses with hostnames. Contributed by Vinod K V.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1178631 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/10/11 4:21 PM",
      "commitName": "12743d2169f5a24a9b3be07c9e9dcc3f2f1001f0",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "30/09/11 5:46 AM",
      "commitNameOld": "063e33a862f99ce93b8399924c35d39ccd880f01",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 3.44,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n   protected void register() {\n     //Register\n-    String host \u003d\n-      clientService.getBindAddress().getAddress().getHostAddress();\n+    String host \u003d clientService.getBindAddress().getAddress()\n+        .getCanonicalHostName();\n     try {\n       RegisterApplicationMasterRequest request \u003d\n         recordFactory.newRecordInstance(RegisterApplicationMasterRequest.class);\n       request.setApplicationAttemptId(applicationAttemptId);\n       request.setHost(host);\n       request.setRpcPort(clientService.getBindAddress().getPort());\n       request.setTrackingUrl(host + \":\" + clientService.getHttpPort());\n       RegisterApplicationMasterResponse response \u003d\n         scheduler.registerApplicationMaster(request);\n       minContainerCapability \u003d response.getMinimumResourceCapability();\n       maxContainerCapability \u003d response.getMaximumResourceCapability();\n       LOG.info(\"minContainerCapability: \" + minContainerCapability.getMemory());\n       LOG.info(\"maxContainerCapability: \" + maxContainerCapability.getMemory());\n     } catch (Exception are) {\n       LOG.info(\"Exception while registering\", are);\n       throw new YarnException(are);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void register() {\n    //Register\n    String host \u003d clientService.getBindAddress().getAddress()\n        .getCanonicalHostName();\n    try {\n      RegisterApplicationMasterRequest request \u003d\n        recordFactory.newRecordInstance(RegisterApplicationMasterRequest.class);\n      request.setApplicationAttemptId(applicationAttemptId);\n      request.setHost(host);\n      request.setRpcPort(clientService.getBindAddress().getPort());\n      request.setTrackingUrl(host + \":\" + clientService.getHttpPort());\n      RegisterApplicationMasterResponse response \u003d\n        scheduler.registerApplicationMaster(request);\n      minContainerCapability \u003d response.getMinimumResourceCapability();\n      maxContainerCapability \u003d response.getMaximumResourceCapability();\n      LOG.info(\"minContainerCapability: \" + minContainerCapability.getMemory());\n      LOG.info(\"maxContainerCapability: \" + maxContainerCapability.getMemory());\n    } catch (Exception are) {\n      LOG.info(\"Exception while registering\", are);\n      throw new YarnException(are);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected void register() {\n    //Register\n    String host \u003d \n      clientService.getBindAddress().getAddress().getHostAddress();\n    try {\n      RegisterApplicationMasterRequest request \u003d\n        recordFactory.newRecordInstance(RegisterApplicationMasterRequest.class);\n      request.setApplicationAttemptId(applicationAttemptId);\n      request.setHost(host);\n      request.setRpcPort(clientService.getBindAddress().getPort());\n      request.setTrackingUrl(host + \":\" + clientService.getHttpPort());\n      RegisterApplicationMasterResponse response \u003d \n        scheduler.registerApplicationMaster(request);\n      minContainerCapability \u003d response.getMinimumResourceCapability();\n      maxContainerCapability \u003d response.getMaximumResourceCapability();\n      LOG.info(\"minContainerCapability: \" + minContainerCapability.getMemory());\n      LOG.info(\"maxContainerCapability: \" + maxContainerCapability.getMemory());\n    } catch (Exception are) {\n      LOG.info(\"Exception while registering\", are);\n      throw new YarnException(are);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,22 @@\n+  protected void register() {\n+    //Register\n+    String host \u003d \n+      clientService.getBindAddress().getAddress().getHostAddress();\n+    try {\n+      RegisterApplicationMasterRequest request \u003d\n+        recordFactory.newRecordInstance(RegisterApplicationMasterRequest.class);\n+      request.setApplicationAttemptId(applicationAttemptId);\n+      request.setHost(host);\n+      request.setRpcPort(clientService.getBindAddress().getPort());\n+      request.setTrackingUrl(host + \":\" + clientService.getHttpPort());\n+      RegisterApplicationMasterResponse response \u003d \n+        scheduler.registerApplicationMaster(request);\n+      minContainerCapability \u003d response.getMinimumResourceCapability();\n+      maxContainerCapability \u003d response.getMaximumResourceCapability();\n+      LOG.info(\"minContainerCapability: \" + minContainerCapability.getMemory());\n+      LOG.info(\"maxContainerCapability: \" + maxContainerCapability.getMemory());\n+    } catch (Exception are) {\n+      LOG.info(\"Exception while registering\", are);\n+      throw new YarnException(are);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void register() {\n    //Register\n    String host \u003d \n      clientService.getBindAddress().getAddress().getHostAddress();\n    try {\n      RegisterApplicationMasterRequest request \u003d\n        recordFactory.newRecordInstance(RegisterApplicationMasterRequest.class);\n      request.setApplicationAttemptId(applicationAttemptId);\n      request.setHost(host);\n      request.setRpcPort(clientService.getBindAddress().getPort());\n      request.setTrackingUrl(host + \":\" + clientService.getHttpPort());\n      RegisterApplicationMasterResponse response \u003d \n        scheduler.registerApplicationMaster(request);\n      minContainerCapability \u003d response.getMinimumResourceCapability();\n      maxContainerCapability \u003d response.getMaximumResourceCapability();\n      LOG.info(\"minContainerCapability: \" + minContainerCapability.getMemory());\n      LOG.info(\"maxContainerCapability: \" + maxContainerCapability.getMemory());\n    } catch (Exception are) {\n      LOG.info(\"Exception while registering\", are);\n      throw new YarnException(are);\n    }\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMCommunicator.java"
    }
  }
}