{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ServiceScheduler.java",
  "functionName": "syncSysFs",
  "functionId": "syncSysFs___yarnApp-Service",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
  "functionStartLine": 1084,
  "functionEndLine": 1143,
  "numCommitsSeen": 31,
  "timeTaken": 1492,
  "changeHistory": [
    "95372657fc25c02399b01793833021ccf88dada2",
    "d07e873b7db6cb317eccb4768607c1afb505c99b"
  ],
  "changeHistoryShort": {
    "95372657fc25c02399b01793833021ccf88dada2": "Ybodychange",
    "d07e873b7db6cb317eccb4768607c1afb505c99b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "95372657fc25c02399b01793833021ccf88dada2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9287. Consecutive StringBuilder append should be reuse. Contributed by Ayush Saxena.\n",
      "commitDate": "25/02/19 11:45 AM",
      "commitName": "95372657fc25c02399b01793833021ccf88dada2",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "18/01/19 5:23 PM",
      "commitNameOld": "824dfa3b099a09f18db6b0a3285eb4379ab72c2d",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 37.77,
      "commitsBetweenForRepo": 275,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,60 @@\n   public void syncSysFs(Service yarnApp) {\n     boolean success \u003d true;\n     Configuration conf \u003d getConfig();\n     String spec;\n     boolean useKerberos \u003d UserGroupInformation.isSecurityEnabled();\n     boolean printSyncResult \u003d false;\n     try {\n       String port \u003d conf.get(\"yarn.nodemanager.webapp.address\").split(\":\")[1];\n       spec \u003d ServiceApiUtil.jsonSerDeser.toJson(yarnApp);\n       for (org.apache.hadoop.yarn.service.api.records.Component c :\n           yarnApp.getComponents()) {\n         Set\u003cString\u003e nodes \u003d new HashSet\u003cString\u003e();\n         boolean update \u003d Boolean.parseBoolean(c.getConfiguration()\n             .getEnv(ApplicationConstants.Environment\n                 .YARN_CONTAINER_RUNTIME_YARN_SYSFS_ENABLE.name()));\n         if (!update) {\n           continue;\n         }\n         printSyncResult \u003d true;\n         for (org.apache.hadoop.yarn.service.api.records.Container container :\n             c.getContainers()) {\n           String bareHost \u003d container.getBareHost();\n           nodes.add(bareHost);\n         }\n         for (String bareHost : nodes) {\n           StringBuilder requestPath \u003d new StringBuilder();\n           if (YarnConfiguration.useHttps(conf)) {\n             requestPath.append(\"https://\");\n           } else {\n             requestPath.append(\"http://\");\n           }\n-          requestPath.append(bareHost);\n-          requestPath.append(\":\");\n-          requestPath.append(port);\n-          requestPath.append(\"/ws/v1/node/yarn/sysfs/\");\n-          requestPath.append(UserGroupInformation.getCurrentUser()\n-              .getShortUserName());\n-          requestPath.append(\"/\");\n-          requestPath.append(yarnApp.getId());\n+          requestPath.append(bareHost)\n+              .append(\":\")\n+              .append(port)\n+              .append(\"/ws/v1/node/yarn/sysfs/\")\n+              .append(UserGroupInformation.getCurrentUser()\n+                  .getShortUserName())\n+              .append(\"/\")\n+              .append(yarnApp.getId());\n           if (!useKerberos) {\n-            requestPath.append(\"?user.name\u003d\");\n-            requestPath.append(UserGroupInformation.getCurrentUser()\n-                .getShortUserName());\n+            requestPath.append(\"?user.name\u003d\")\n+                .append(UserGroupInformation.getCurrentUser()\n+                    .getShortUserName());\n           }\n           Builder builder \u003d HttpUtil.connect(requestPath.toString());\n           ClientResponse response \u003d builder.put(ClientResponse.class, spec);\n           if (response.getStatus()!\u003dClientResponse.Status.OK.getStatusCode()) {\n             LOG.warn(\"Error synchronize YARN sysfs: \" +\n                 response.getEntity(String.class));\n             success \u003d false;\n           }\n         }\n       }\n       if (printSyncResult \u0026\u0026 success) {\n         LOG.info(\"YARN sysfs synchronized.\");\n       }\n     } catch (IOException | URISyntaxException | InterruptedException e) {\n       LOG.error(\"Fail to sync service spec: {}\", e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void syncSysFs(Service yarnApp) {\n    boolean success \u003d true;\n    Configuration conf \u003d getConfig();\n    String spec;\n    boolean useKerberos \u003d UserGroupInformation.isSecurityEnabled();\n    boolean printSyncResult \u003d false;\n    try {\n      String port \u003d conf.get(\"yarn.nodemanager.webapp.address\").split(\":\")[1];\n      spec \u003d ServiceApiUtil.jsonSerDeser.toJson(yarnApp);\n      for (org.apache.hadoop.yarn.service.api.records.Component c :\n          yarnApp.getComponents()) {\n        Set\u003cString\u003e nodes \u003d new HashSet\u003cString\u003e();\n        boolean update \u003d Boolean.parseBoolean(c.getConfiguration()\n            .getEnv(ApplicationConstants.Environment\n                .YARN_CONTAINER_RUNTIME_YARN_SYSFS_ENABLE.name()));\n        if (!update) {\n          continue;\n        }\n        printSyncResult \u003d true;\n        for (org.apache.hadoop.yarn.service.api.records.Container container :\n            c.getContainers()) {\n          String bareHost \u003d container.getBareHost();\n          nodes.add(bareHost);\n        }\n        for (String bareHost : nodes) {\n          StringBuilder requestPath \u003d new StringBuilder();\n          if (YarnConfiguration.useHttps(conf)) {\n            requestPath.append(\"https://\");\n          } else {\n            requestPath.append(\"http://\");\n          }\n          requestPath.append(bareHost)\n              .append(\":\")\n              .append(port)\n              .append(\"/ws/v1/node/yarn/sysfs/\")\n              .append(UserGroupInformation.getCurrentUser()\n                  .getShortUserName())\n              .append(\"/\")\n              .append(yarnApp.getId());\n          if (!useKerberos) {\n            requestPath.append(\"?user.name\u003d\")\n                .append(UserGroupInformation.getCurrentUser()\n                    .getShortUserName());\n          }\n          Builder builder \u003d HttpUtil.connect(requestPath.toString());\n          ClientResponse response \u003d builder.put(ClientResponse.class, spec);\n          if (response.getStatus()!\u003dClientResponse.Status.OK.getStatusCode()) {\n            LOG.warn(\"Error synchronize YARN sysfs: \" +\n                response.getEntity(String.class));\n            success \u003d false;\n          }\n        }\n      }\n      if (printSyncResult \u0026\u0026 success) {\n        LOG.info(\"YARN sysfs synchronized.\");\n      }\n    } catch (IOException | URISyntaxException | InterruptedException e) {\n      LOG.error(\"Fail to sync service spec: {}\", e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
      "extendedDetails": {}
    },
    "d07e873b7db6cb317eccb4768607c1afb505c99b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8569. Create an interface to provide cluster information to application. Contributed by Eric Yang\n",
      "commitDate": "26/10/18 5:57 PM",
      "commitName": "d07e873b7db6cb317eccb4768607c1afb505c99b",
      "commitAuthor": "Billie Rinaldi",
      "diff": "@@ -0,0 +1,60 @@\n+  public void syncSysFs(Service yarnApp) {\n+    boolean success \u003d true;\n+    Configuration conf \u003d getConfig();\n+    String spec;\n+    boolean useKerberos \u003d UserGroupInformation.isSecurityEnabled();\n+    boolean printSyncResult \u003d false;\n+    try {\n+      String port \u003d conf.get(\"yarn.nodemanager.webapp.address\").split(\":\")[1];\n+      spec \u003d ServiceApiUtil.jsonSerDeser.toJson(yarnApp);\n+      for (org.apache.hadoop.yarn.service.api.records.Component c :\n+          yarnApp.getComponents()) {\n+        Set\u003cString\u003e nodes \u003d new HashSet\u003cString\u003e();\n+        boolean update \u003d Boolean.parseBoolean(c.getConfiguration()\n+            .getEnv(ApplicationConstants.Environment\n+                .YARN_CONTAINER_RUNTIME_YARN_SYSFS_ENABLE.name()));\n+        if (!update) {\n+          continue;\n+        }\n+        printSyncResult \u003d true;\n+        for (org.apache.hadoop.yarn.service.api.records.Container container :\n+            c.getContainers()) {\n+          String bareHost \u003d container.getBareHost();\n+          nodes.add(bareHost);\n+        }\n+        for (String bareHost : nodes) {\n+          StringBuilder requestPath \u003d new StringBuilder();\n+          if (YarnConfiguration.useHttps(conf)) {\n+            requestPath.append(\"https://\");\n+          } else {\n+            requestPath.append(\"http://\");\n+          }\n+          requestPath.append(bareHost);\n+          requestPath.append(\":\");\n+          requestPath.append(port);\n+          requestPath.append(\"/ws/v1/node/yarn/sysfs/\");\n+          requestPath.append(UserGroupInformation.getCurrentUser()\n+              .getShortUserName());\n+          requestPath.append(\"/\");\n+          requestPath.append(yarnApp.getId());\n+          if (!useKerberos) {\n+            requestPath.append(\"?user.name\u003d\");\n+            requestPath.append(UserGroupInformation.getCurrentUser()\n+                .getShortUserName());\n+          }\n+          Builder builder \u003d HttpUtil.connect(requestPath.toString());\n+          ClientResponse response \u003d builder.put(ClientResponse.class, spec);\n+          if (response.getStatus()!\u003dClientResponse.Status.OK.getStatusCode()) {\n+            LOG.warn(\"Error synchronize YARN sysfs: \" +\n+                response.getEntity(String.class));\n+            success \u003d false;\n+          }\n+        }\n+      }\n+      if (printSyncResult \u0026\u0026 success) {\n+        LOG.info(\"YARN sysfs synchronized.\");\n+      }\n+    } catch (IOException | URISyntaxException | InterruptedException e) {\n+      LOG.error(\"Fail to sync service spec: {}\", e);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void syncSysFs(Service yarnApp) {\n    boolean success \u003d true;\n    Configuration conf \u003d getConfig();\n    String spec;\n    boolean useKerberos \u003d UserGroupInformation.isSecurityEnabled();\n    boolean printSyncResult \u003d false;\n    try {\n      String port \u003d conf.get(\"yarn.nodemanager.webapp.address\").split(\":\")[1];\n      spec \u003d ServiceApiUtil.jsonSerDeser.toJson(yarnApp);\n      for (org.apache.hadoop.yarn.service.api.records.Component c :\n          yarnApp.getComponents()) {\n        Set\u003cString\u003e nodes \u003d new HashSet\u003cString\u003e();\n        boolean update \u003d Boolean.parseBoolean(c.getConfiguration()\n            .getEnv(ApplicationConstants.Environment\n                .YARN_CONTAINER_RUNTIME_YARN_SYSFS_ENABLE.name()));\n        if (!update) {\n          continue;\n        }\n        printSyncResult \u003d true;\n        for (org.apache.hadoop.yarn.service.api.records.Container container :\n            c.getContainers()) {\n          String bareHost \u003d container.getBareHost();\n          nodes.add(bareHost);\n        }\n        for (String bareHost : nodes) {\n          StringBuilder requestPath \u003d new StringBuilder();\n          if (YarnConfiguration.useHttps(conf)) {\n            requestPath.append(\"https://\");\n          } else {\n            requestPath.append(\"http://\");\n          }\n          requestPath.append(bareHost);\n          requestPath.append(\":\");\n          requestPath.append(port);\n          requestPath.append(\"/ws/v1/node/yarn/sysfs/\");\n          requestPath.append(UserGroupInformation.getCurrentUser()\n              .getShortUserName());\n          requestPath.append(\"/\");\n          requestPath.append(yarnApp.getId());\n          if (!useKerberos) {\n            requestPath.append(\"?user.name\u003d\");\n            requestPath.append(UserGroupInformation.getCurrentUser()\n                .getShortUserName());\n          }\n          Builder builder \u003d HttpUtil.connect(requestPath.toString());\n          ClientResponse response \u003d builder.put(ClientResponse.class, spec);\n          if (response.getStatus()!\u003dClientResponse.Status.OK.getStatusCode()) {\n            LOG.warn(\"Error synchronize YARN sysfs: \" +\n                response.getEntity(String.class));\n            success \u003d false;\n          }\n        }\n      }\n      if (printSyncResult \u0026\u0026 success) {\n        LOG.info(\"YARN sysfs synchronized.\");\n      }\n    } catch (IOException | URISyntaxException | InterruptedException e) {\n      LOG.error(\"Fail to sync service spec: {}\", e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java"
    }
  }
}