{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RouterHeartbeatService.java",
  "functionName": "updateStateStore",
  "functionId": "updateStateStore",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterHeartbeatService.java",
  "functionStartLine": 80,
  "functionEndLine": 113,
  "numCommitsSeen": 5,
  "timeTaken": 3093,
  "changeHistory": [
    "8f6f9d9c8398567064c9369f48213db63f45538c",
    "c4d3636c21acaeb2b7d56d19cd4996aa25151bd1",
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
    "41fc7f80beb32f4a1fac73faf7c9116ad5ee3420",
    "7721fff74494eb7fbbbba7f8bb4b4692d880d301"
  ],
  "changeHistoryShort": {
    "8f6f9d9c8398567064c9369f48213db63f45538c": "Ybodychange",
    "c4d3636c21acaeb2b7d56d19cd4996aa25151bd1": "Ybodychange",
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": "Yfilerename",
    "41fc7f80beb32f4a1fac73faf7c9116ad5ee3420": "Ymultichange(Ymodifierchange,Ybodychange)",
    "7721fff74494eb7fbbbba7f8bb4b4692d880d301": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8f6f9d9c8398567064c9369f48213db63f45538c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13443. RBF: Update mount table cache immediately after changing (add/update/remove) mount table entries. Contributed by Mohammad Arshad.\n",
      "commitDate": "24/06/19 9:33 AM",
      "commitName": "8f6f9d9c8398567064c9369f48213db63f45538c",
      "commitAuthor": "Yiqun Lin",
      "commitDateOld": "16/04/18 8:23 PM",
      "commitNameOld": "c4d3636c21acaeb2b7d56d19cd4996aa25151bd1",
      "commitAuthorOld": "Yiqun Lin",
      "daysBetweenCommits": 433.55,
      "commitsBetweenForRepo": 3765,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,34 @@\n   synchronized void updateStateStore() {\n     String routerId \u003d router.getRouterId();\n     if (routerId \u003d\u003d null) {\n       LOG.error(\"Cannot heartbeat for router: unknown router id\");\n       return;\n     }\n     if (isStoreAvailable()) {\n       RouterStore routerStore \u003d router.getRouterStateManager();\n       try {\n         RouterState record \u003d RouterState.newInstance(\n             routerId, router.getStartTime(), router.getRouterState());\n         StateStoreVersion stateStoreVersion \u003d StateStoreVersion.newInstance(\n             getStateStoreVersion(MembershipStore.class),\n             getStateStoreVersion(MountTableStore.class));\n         record.setStateStoreVersion(stateStoreVersion);\n+        // if admin server not started then hostPort will be empty\n+        String hostPort \u003d\n+            StateStoreUtils.getHostPortString(router.getAdminServerAddress());\n+        record.setAdminAddress(hostPort);\n         RouterHeartbeatRequest request \u003d\n             RouterHeartbeatRequest.newInstance(record);\n         RouterHeartbeatResponse response \u003d routerStore.routerHeartbeat(request);\n         if (!response.getStatus()) {\n           LOG.warn(\"Cannot heartbeat router {}\", routerId);\n         } else {\n           LOG.debug(\"Router heartbeat for router {}\", routerId);\n         }\n       } catch (IOException e) {\n         LOG.error(\"Cannot heartbeat router {}\", routerId, e);\n       }\n     } else {\n       LOG.warn(\"Cannot heartbeat router {}: State Store unavailable\", routerId);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void updateStateStore() {\n    String routerId \u003d router.getRouterId();\n    if (routerId \u003d\u003d null) {\n      LOG.error(\"Cannot heartbeat for router: unknown router id\");\n      return;\n    }\n    if (isStoreAvailable()) {\n      RouterStore routerStore \u003d router.getRouterStateManager();\n      try {\n        RouterState record \u003d RouterState.newInstance(\n            routerId, router.getStartTime(), router.getRouterState());\n        StateStoreVersion stateStoreVersion \u003d StateStoreVersion.newInstance(\n            getStateStoreVersion(MembershipStore.class),\n            getStateStoreVersion(MountTableStore.class));\n        record.setStateStoreVersion(stateStoreVersion);\n        // if admin server not started then hostPort will be empty\n        String hostPort \u003d\n            StateStoreUtils.getHostPortString(router.getAdminServerAddress());\n        record.setAdminAddress(hostPort);\n        RouterHeartbeatRequest request \u003d\n            RouterHeartbeatRequest.newInstance(record);\n        RouterHeartbeatResponse response \u003d routerStore.routerHeartbeat(request);\n        if (!response.getStatus()) {\n          LOG.warn(\"Cannot heartbeat router {}\", routerId);\n        } else {\n          LOG.debug(\"Router heartbeat for router {}\", routerId);\n        }\n      } catch (IOException e) {\n        LOG.error(\"Cannot heartbeat router {}\", routerId, e);\n      }\n    } else {\n      LOG.warn(\"Cannot heartbeat router {}: State Store unavailable\", routerId);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterHeartbeatService.java",
      "extendedDetails": {}
    },
    "c4d3636c21acaeb2b7d56d19cd4996aa25151bd1": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13435. RBF: Improve the error loggings for printing the stack trace.\n",
      "commitDate": "16/04/18 8:23 PM",
      "commitName": "c4d3636c21acaeb2b7d56d19cd4996aa25151bd1",
      "commitAuthor": "Yiqun Lin",
      "commitDateOld": "19/03/18 10:13 PM",
      "commitNameOld": "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
      "commitAuthorOld": "weiy",
      "daysBetweenCommits": 27.92,
      "commitsBetweenForRepo": 306,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   synchronized void updateStateStore() {\n     String routerId \u003d router.getRouterId();\n     if (routerId \u003d\u003d null) {\n       LOG.error(\"Cannot heartbeat for router: unknown router id\");\n       return;\n     }\n     if (isStoreAvailable()) {\n       RouterStore routerStore \u003d router.getRouterStateManager();\n       try {\n         RouterState record \u003d RouterState.newInstance(\n             routerId, router.getStartTime(), router.getRouterState());\n         StateStoreVersion stateStoreVersion \u003d StateStoreVersion.newInstance(\n             getStateStoreVersion(MembershipStore.class),\n             getStateStoreVersion(MountTableStore.class));\n         record.setStateStoreVersion(stateStoreVersion);\n         RouterHeartbeatRequest request \u003d\n             RouterHeartbeatRequest.newInstance(record);\n         RouterHeartbeatResponse response \u003d routerStore.routerHeartbeat(request);\n         if (!response.getStatus()) {\n           LOG.warn(\"Cannot heartbeat router {}\", routerId);\n         } else {\n           LOG.debug(\"Router heartbeat for router {}\", routerId);\n         }\n       } catch (IOException e) {\n-        LOG.error(\"Cannot heartbeat router {}: {}\", routerId, e.getMessage());\n+        LOG.error(\"Cannot heartbeat router {}\", routerId, e);\n       }\n     } else {\n       LOG.warn(\"Cannot heartbeat router {}: State Store unavailable\", routerId);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void updateStateStore() {\n    String routerId \u003d router.getRouterId();\n    if (routerId \u003d\u003d null) {\n      LOG.error(\"Cannot heartbeat for router: unknown router id\");\n      return;\n    }\n    if (isStoreAvailable()) {\n      RouterStore routerStore \u003d router.getRouterStateManager();\n      try {\n        RouterState record \u003d RouterState.newInstance(\n            routerId, router.getStartTime(), router.getRouterState());\n        StateStoreVersion stateStoreVersion \u003d StateStoreVersion.newInstance(\n            getStateStoreVersion(MembershipStore.class),\n            getStateStoreVersion(MountTableStore.class));\n        record.setStateStoreVersion(stateStoreVersion);\n        RouterHeartbeatRequest request \u003d\n            RouterHeartbeatRequest.newInstance(record);\n        RouterHeartbeatResponse response \u003d routerStore.routerHeartbeat(request);\n        if (!response.getStatus()) {\n          LOG.warn(\"Cannot heartbeat router {}\", routerId);\n        } else {\n          LOG.debug(\"Router heartbeat for router {}\", routerId);\n        }\n      } catch (IOException e) {\n        LOG.error(\"Cannot heartbeat router {}\", routerId, e);\n      }\n    } else {\n      LOG.warn(\"Cannot heartbeat router {}: State Store unavailable\", routerId);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterHeartbeatService.java",
      "extendedDetails": {}
    },
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-13215. RBF: Move Router to its own module. Contributed by Wei Yan\n",
      "commitDate": "19/03/18 10:13 PM",
      "commitName": "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
      "commitAuthor": "weiy",
      "commitDateOld": "19/03/18 5:19 PM",
      "commitNameOld": "e65ff1c8be48ef4f04ed96f96ac4caef4974944d",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.2,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  synchronized void updateStateStore() {\n    String routerId \u003d router.getRouterId();\n    if (routerId \u003d\u003d null) {\n      LOG.error(\"Cannot heartbeat for router: unknown router id\");\n      return;\n    }\n    if (isStoreAvailable()) {\n      RouterStore routerStore \u003d router.getRouterStateManager();\n      try {\n        RouterState record \u003d RouterState.newInstance(\n            routerId, router.getStartTime(), router.getRouterState());\n        StateStoreVersion stateStoreVersion \u003d StateStoreVersion.newInstance(\n            getStateStoreVersion(MembershipStore.class),\n            getStateStoreVersion(MountTableStore.class));\n        record.setStateStoreVersion(stateStoreVersion);\n        RouterHeartbeatRequest request \u003d\n            RouterHeartbeatRequest.newInstance(record);\n        RouterHeartbeatResponse response \u003d routerStore.routerHeartbeat(request);\n        if (!response.getStatus()) {\n          LOG.warn(\"Cannot heartbeat router {}\", routerId);\n        } else {\n          LOG.debug(\"Router heartbeat for router {}\", routerId);\n        }\n      } catch (IOException e) {\n        LOG.error(\"Cannot heartbeat router {}: {}\", routerId, e.getMessage());\n      }\n    } else {\n      LOG.warn(\"Cannot heartbeat router {}: State Store unavailable\", routerId);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterHeartbeatService.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterHeartbeatService.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterHeartbeatService.java"
      }
    },
    "41fc7f80beb32f4a1fac73faf7c9116ad5ee3420": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "HDFS-13198. RBF: RouterHeartbeatService throws out CachedStateStore related exceptions when starting router. Contributed by Wei Yan.\n",
      "commitDate": "14/03/18 1:14 PM",
      "commitName": "41fc7f80beb32f4a1fac73faf7c9116ad5ee3420",
      "commitAuthor": "Inigo Goiri",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-13198. RBF: RouterHeartbeatService throws out CachedStateStore related exceptions when starting router. Contributed by Wei Yan.\n",
          "commitDate": "14/03/18 1:14 PM",
          "commitName": "41fc7f80beb32f4a1fac73faf7c9116ad5ee3420",
          "commitAuthor": "Inigo Goiri",
          "commitDateOld": "24/01/18 11:51 PM",
          "commitNameOld": "7721fff74494eb7fbbbba7f8bb4b4692d880d301",
          "commitAuthorOld": "Yiqun Lin",
          "daysBetweenCommits": 48.52,
          "commitsBetweenForRepo": 343,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,30 @@\n-  private synchronized void updateStateStore() {\n+  synchronized void updateStateStore() {\n     String routerId \u003d router.getRouterId();\n     if (routerId \u003d\u003d null) {\n       LOG.error(\"Cannot heartbeat for router: unknown router id\");\n       return;\n     }\n-    RouterStore routerStore \u003d router.getRouterStateManager();\n-    if (routerStore !\u003d null) {\n+    if (isStoreAvailable()) {\n+      RouterStore routerStore \u003d router.getRouterStateManager();\n       try {\n         RouterState record \u003d RouterState.newInstance(\n             routerId, router.getStartTime(), router.getRouterState());\n         StateStoreVersion stateStoreVersion \u003d StateStoreVersion.newInstance(\n             getStateStoreVersion(MembershipStore.class),\n             getStateStoreVersion(MountTableStore.class));\n         record.setStateStoreVersion(stateStoreVersion);\n         RouterHeartbeatRequest request \u003d\n             RouterHeartbeatRequest.newInstance(record);\n         RouterHeartbeatResponse response \u003d routerStore.routerHeartbeat(request);\n         if (!response.getStatus()) {\n           LOG.warn(\"Cannot heartbeat router {}\", routerId);\n         } else {\n           LOG.debug(\"Router heartbeat for router {}\", routerId);\n         }\n       } catch (IOException e) {\n         LOG.error(\"Cannot heartbeat router {}: {}\", routerId, e.getMessage());\n       }\n     } else {\n       LOG.warn(\"Cannot heartbeat router {}: State Store unavailable\", routerId);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized void updateStateStore() {\n    String routerId \u003d router.getRouterId();\n    if (routerId \u003d\u003d null) {\n      LOG.error(\"Cannot heartbeat for router: unknown router id\");\n      return;\n    }\n    if (isStoreAvailable()) {\n      RouterStore routerStore \u003d router.getRouterStateManager();\n      try {\n        RouterState record \u003d RouterState.newInstance(\n            routerId, router.getStartTime(), router.getRouterState());\n        StateStoreVersion stateStoreVersion \u003d StateStoreVersion.newInstance(\n            getStateStoreVersion(MembershipStore.class),\n            getStateStoreVersion(MountTableStore.class));\n        record.setStateStoreVersion(stateStoreVersion);\n        RouterHeartbeatRequest request \u003d\n            RouterHeartbeatRequest.newInstance(record);\n        RouterHeartbeatResponse response \u003d routerStore.routerHeartbeat(request);\n        if (!response.getStatus()) {\n          LOG.warn(\"Cannot heartbeat router {}\", routerId);\n        } else {\n          LOG.debug(\"Router heartbeat for router {}\", routerId);\n        }\n      } catch (IOException e) {\n        LOG.error(\"Cannot heartbeat router {}: {}\", routerId, e.getMessage());\n      }\n    } else {\n      LOG.warn(\"Cannot heartbeat router {}: State Store unavailable\", routerId);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterHeartbeatService.java",
          "extendedDetails": {
            "oldValue": "[private, synchronized]",
            "newValue": "[synchronized]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-13198. RBF: RouterHeartbeatService throws out CachedStateStore related exceptions when starting router. Contributed by Wei Yan.\n",
          "commitDate": "14/03/18 1:14 PM",
          "commitName": "41fc7f80beb32f4a1fac73faf7c9116ad5ee3420",
          "commitAuthor": "Inigo Goiri",
          "commitDateOld": "24/01/18 11:51 PM",
          "commitNameOld": "7721fff74494eb7fbbbba7f8bb4b4692d880d301",
          "commitAuthorOld": "Yiqun Lin",
          "daysBetweenCommits": 48.52,
          "commitsBetweenForRepo": 343,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,30 @@\n-  private synchronized void updateStateStore() {\n+  synchronized void updateStateStore() {\n     String routerId \u003d router.getRouterId();\n     if (routerId \u003d\u003d null) {\n       LOG.error(\"Cannot heartbeat for router: unknown router id\");\n       return;\n     }\n-    RouterStore routerStore \u003d router.getRouterStateManager();\n-    if (routerStore !\u003d null) {\n+    if (isStoreAvailable()) {\n+      RouterStore routerStore \u003d router.getRouterStateManager();\n       try {\n         RouterState record \u003d RouterState.newInstance(\n             routerId, router.getStartTime(), router.getRouterState());\n         StateStoreVersion stateStoreVersion \u003d StateStoreVersion.newInstance(\n             getStateStoreVersion(MembershipStore.class),\n             getStateStoreVersion(MountTableStore.class));\n         record.setStateStoreVersion(stateStoreVersion);\n         RouterHeartbeatRequest request \u003d\n             RouterHeartbeatRequest.newInstance(record);\n         RouterHeartbeatResponse response \u003d routerStore.routerHeartbeat(request);\n         if (!response.getStatus()) {\n           LOG.warn(\"Cannot heartbeat router {}\", routerId);\n         } else {\n           LOG.debug(\"Router heartbeat for router {}\", routerId);\n         }\n       } catch (IOException e) {\n         LOG.error(\"Cannot heartbeat router {}: {}\", routerId, e.getMessage());\n       }\n     } else {\n       LOG.warn(\"Cannot heartbeat router {}: State Store unavailable\", routerId);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized void updateStateStore() {\n    String routerId \u003d router.getRouterId();\n    if (routerId \u003d\u003d null) {\n      LOG.error(\"Cannot heartbeat for router: unknown router id\");\n      return;\n    }\n    if (isStoreAvailable()) {\n      RouterStore routerStore \u003d router.getRouterStateManager();\n      try {\n        RouterState record \u003d RouterState.newInstance(\n            routerId, router.getStartTime(), router.getRouterState());\n        StateStoreVersion stateStoreVersion \u003d StateStoreVersion.newInstance(\n            getStateStoreVersion(MembershipStore.class),\n            getStateStoreVersion(MountTableStore.class));\n        record.setStateStoreVersion(stateStoreVersion);\n        RouterHeartbeatRequest request \u003d\n            RouterHeartbeatRequest.newInstance(record);\n        RouterHeartbeatResponse response \u003d routerStore.routerHeartbeat(request);\n        if (!response.getStatus()) {\n          LOG.warn(\"Cannot heartbeat router {}\", routerId);\n        } else {\n          LOG.debug(\"Router heartbeat for router {}\", routerId);\n        }\n      } catch (IOException e) {\n        LOG.error(\"Cannot heartbeat router {}: {}\", routerId, e.getMessage());\n      }\n    } else {\n      LOG.warn(\"Cannot heartbeat router {}: State Store unavailable\", routerId);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterHeartbeatService.java",
          "extendedDetails": {}
        }
      ]
    },
    "7721fff74494eb7fbbbba7f8bb4b4692d880d301": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-13042. RBF: Heartbeat Router State. Contributed by Inigo Goiri.\n",
      "commitDate": "24/01/18 11:51 PM",
      "commitName": "7721fff74494eb7fbbbba7f8bb4b4692d880d301",
      "commitAuthor": "Yiqun Lin",
      "diff": "@@ -0,0 +1,30 @@\n+  private synchronized void updateStateStore() {\n+    String routerId \u003d router.getRouterId();\n+    if (routerId \u003d\u003d null) {\n+      LOG.error(\"Cannot heartbeat for router: unknown router id\");\n+      return;\n+    }\n+    RouterStore routerStore \u003d router.getRouterStateManager();\n+    if (routerStore !\u003d null) {\n+      try {\n+        RouterState record \u003d RouterState.newInstance(\n+            routerId, router.getStartTime(), router.getRouterState());\n+        StateStoreVersion stateStoreVersion \u003d StateStoreVersion.newInstance(\n+            getStateStoreVersion(MembershipStore.class),\n+            getStateStoreVersion(MountTableStore.class));\n+        record.setStateStoreVersion(stateStoreVersion);\n+        RouterHeartbeatRequest request \u003d\n+            RouterHeartbeatRequest.newInstance(record);\n+        RouterHeartbeatResponse response \u003d routerStore.routerHeartbeat(request);\n+        if (!response.getStatus()) {\n+          LOG.warn(\"Cannot heartbeat router {}\", routerId);\n+        } else {\n+          LOG.debug(\"Router heartbeat for router {}\", routerId);\n+        }\n+      } catch (IOException e) {\n+        LOG.error(\"Cannot heartbeat router {}: {}\", routerId, e.getMessage());\n+      }\n+    } else {\n+      LOG.warn(\"Cannot heartbeat router {}: State Store unavailable\", routerId);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void updateStateStore() {\n    String routerId \u003d router.getRouterId();\n    if (routerId \u003d\u003d null) {\n      LOG.error(\"Cannot heartbeat for router: unknown router id\");\n      return;\n    }\n    RouterStore routerStore \u003d router.getRouterStateManager();\n    if (routerStore !\u003d null) {\n      try {\n        RouterState record \u003d RouterState.newInstance(\n            routerId, router.getStartTime(), router.getRouterState());\n        StateStoreVersion stateStoreVersion \u003d StateStoreVersion.newInstance(\n            getStateStoreVersion(MembershipStore.class),\n            getStateStoreVersion(MountTableStore.class));\n        record.setStateStoreVersion(stateStoreVersion);\n        RouterHeartbeatRequest request \u003d\n            RouterHeartbeatRequest.newInstance(record);\n        RouterHeartbeatResponse response \u003d routerStore.routerHeartbeat(request);\n        if (!response.getStatus()) {\n          LOG.warn(\"Cannot heartbeat router {}\", routerId);\n        } else {\n          LOG.debug(\"Router heartbeat for router {}\", routerId);\n        }\n      } catch (IOException e) {\n        LOG.error(\"Cannot heartbeat router {}: {}\", routerId, e.getMessage());\n      }\n    } else {\n      LOG.warn(\"Cannot heartbeat router {}: State Store unavailable\", routerId);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterHeartbeatService.java"
    }
  }
}