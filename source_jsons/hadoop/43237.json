{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ServiceScheduler.java",
  "functionName": "createAllComponents",
  "functionId": "createAllComponents",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
  "functionStartLine": 597,
  "functionEndLine": 616,
  "numCommitsSeen": 34,
  "timeTaken": 3682,
  "changeHistory": [
    "a0bde7d525911680f9e5fb0a939604865eb8e164",
    "b8a7ef1b64392094562e7782e0fd092934724ad2",
    "40ab068eabe50875449d601471619a4e82fff86d",
    "2191f5b533c6b4763f5d443d21127f1f8552ce64",
    "1888318c89776f0bf354c1b13e3ee169e14ff638"
  ],
  "changeHistoryShort": {
    "a0bde7d525911680f9e5fb0a939604865eb8e164": "Ybodychange",
    "b8a7ef1b64392094562e7782e0fd092934724ad2": "Ybodychange",
    "40ab068eabe50875449d601471619a4e82fff86d": "Yfilerename",
    "2191f5b533c6b4763f5d443d21127f1f8552ce64": "Ybodychange",
    "1888318c89776f0bf354c1b13e3ee169e14ff638": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a0bde7d525911680f9e5fb0a939604865eb8e164": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7142. Support placement policy in yarn native services. (Gour Saha via wangda)\n\nChange-Id: I166c67a7a34430627c17365f60bac75b6da1b434\n",
      "commitDate": "02/04/18 7:26 AM",
      "commitName": "a0bde7d525911680f9e5fb0a939604865eb8e164",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "26/03/18 3:46 PM",
      "commitNameOld": "27d60a16342fd39973d43b61008f54a8815a6237",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 6.65,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,20 @@\n   private void createAllComponents() {\n     long allocateId \u003d 0;\n \n     // sort components by dependencies\n     Collection\u003corg.apache.hadoop.yarn.service.api.records.Component\u003e sortedComponents \u003d\n         ServiceApiUtil.sortByDependencies(app.getComponents());\n \n     for (org.apache.hadoop.yarn.service.api.records.Component compSpec : sortedComponents) {\n       Component component \u003d new Component(compSpec, allocateId, context);\n       componentsById.put(allocateId, component);\n       componentsByName.put(component.getName(), component);\n       allocateId++;\n+      if (!hasAtLeastOnePlacementConstraint\n+          \u0026\u0026 compSpec.getPlacementPolicy() !\u003d null\n+          \u0026\u0026 compSpec.getPlacementPolicy().getConstraints() !\u003d null\n+          \u0026\u0026 !compSpec.getPlacementPolicy().getConstraints().isEmpty()) {\n+        hasAtLeastOnePlacementConstraint \u003d true;\n+      }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void createAllComponents() {\n    long allocateId \u003d 0;\n\n    // sort components by dependencies\n    Collection\u003corg.apache.hadoop.yarn.service.api.records.Component\u003e sortedComponents \u003d\n        ServiceApiUtil.sortByDependencies(app.getComponents());\n\n    for (org.apache.hadoop.yarn.service.api.records.Component compSpec : sortedComponents) {\n      Component component \u003d new Component(compSpec, allocateId, context);\n      componentsById.put(allocateId, component);\n      componentsByName.put(component.getName(), component);\n      allocateId++;\n      if (!hasAtLeastOnePlacementConstraint\n          \u0026\u0026 compSpec.getPlacementPolicy() !\u003d null\n          \u0026\u0026 compSpec.getPlacementPolicy().getConstraints() !\u003d null\n          \u0026\u0026 !compSpec.getPlacementPolicy().getConstraints().isEmpty()) {\n        hasAtLeastOnePlacementConstraint \u003d true;\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
      "extendedDetails": {}
    },
    "b8a7ef1b64392094562e7782e0fd092934724ad2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6744. Recover component information on YARN native services AM restart. Contributed by Billie Rinaldi\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "b8a7ef1b64392094562e7782e0fd092934724ad2",
      "commitAuthor": "Jian He",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "ce74e64363abc64561263be70a923ab3e67f043f",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,14 @@\n   private void createAllComponents() {\n     long allocateId \u003d 0;\n \n     // sort components by dependencies\n     Collection\u003corg.apache.hadoop.yarn.service.api.records.Component\u003e sortedComponents \u003d\n         ServiceApiUtil.sortByDependencies(app.getComponents());\n \n     for (org.apache.hadoop.yarn.service.api.records.Component compSpec : sortedComponents) {\n       Component component \u003d new Component(compSpec, allocateId, context);\n       componentsById.put(allocateId, component);\n       componentsByName.put(component.getName(), component);\n       allocateId++;\n-\n-      // Trigger the component without dependencies\n-      if (component.areDependenciesReady()) {\n-        ComponentEvent event \u003d new ComponentEvent(compSpec.getName(), FLEX)\n-            .setDesired(compSpec.getNumberOfContainers());\n-        component.handle(event);\n-      }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void createAllComponents() {\n    long allocateId \u003d 0;\n\n    // sort components by dependencies\n    Collection\u003corg.apache.hadoop.yarn.service.api.records.Component\u003e sortedComponents \u003d\n        ServiceApiUtil.sortByDependencies(app.getComponents());\n\n    for (org.apache.hadoop.yarn.service.api.records.Component compSpec : sortedComponents) {\n      Component component \u003d new Component(compSpec, allocateId, context);\n      componentsById.put(allocateId, component);\n      componentsByName.put(component.getName(), component);\n      allocateId++;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
      "extendedDetails": {}
    },
    "40ab068eabe50875449d601471619a4e82fff86d": {
      "type": "Yfilerename",
      "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
      "commitAuthorOld": "Gour Saha",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void createAllComponents() {\n    long allocateId \u003d 0;\n\n    // sort components by dependencies\n    Collection\u003corg.apache.hadoop.yarn.service.api.records.Component\u003e sortedComponents \u003d\n        ServiceApiUtil.sortByDependencies(app.getComponents());\n\n    for (org.apache.hadoop.yarn.service.api.records.Component compSpec : sortedComponents) {\n      Component component \u003d new Component(compSpec, allocateId, context);\n      componentsById.put(allocateId, component);\n      componentsByName.put(component.getName(), component);\n      allocateId++;\n\n      // Trigger the component without dependencies\n      if (component.areDependenciesReady()) {\n        ComponentEvent event \u003d new ComponentEvent(compSpec.getName(), FLEX)\n            .setDesired(compSpec.getNumberOfContainers());\n        component.handle(event);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java"
      }
    },
    "2191f5b533c6b4763f5d443d21127f1f8552ce64": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7050. Post cleanup after YARN-6903, removal of org.apache.slider package. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "2191f5b533c6b4763f5d443d21127f1f8552ce64",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "79bf5c084d4a063f1a933cae498af23edfd46792",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n   private void createAllComponents() {\n     long allocateId \u003d 0;\n \n     // sort components by dependencies\n-    Collection\u003corg.apache.slider.api.resource.Component\u003e sortedComponents \u003d\n+    Collection\u003corg.apache.hadoop.yarn.service.api.records.Component\u003e sortedComponents \u003d\n         ServiceApiUtil.sortByDependencies(app.getComponents());\n \n-    for (org.apache.slider.api.resource.Component compSpec : sortedComponents) {\n+    for (org.apache.hadoop.yarn.service.api.records.Component compSpec : sortedComponents) {\n       Component component \u003d new Component(compSpec, allocateId, context);\n       componentsById.put(allocateId, component);\n       componentsByName.put(component.getName(), component);\n       allocateId++;\n \n       // Trigger the component without dependencies\n       if (component.areDependenciesReady()) {\n         ComponentEvent event \u003d new ComponentEvent(compSpec.getName(), FLEX)\n             .setDesired(compSpec.getNumberOfContainers());\n         component.handle(event);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void createAllComponents() {\n    long allocateId \u003d 0;\n\n    // sort components by dependencies\n    Collection\u003corg.apache.hadoop.yarn.service.api.records.Component\u003e sortedComponents \u003d\n        ServiceApiUtil.sortByDependencies(app.getComponents());\n\n    for (org.apache.hadoop.yarn.service.api.records.Component compSpec : sortedComponents) {\n      Component component \u003d new Component(compSpec, allocateId, context);\n      componentsById.put(allocateId, component);\n      componentsByName.put(component.getName(), component);\n      allocateId++;\n\n      // Trigger the component without dependencies\n      if (component.areDependenciesReady()) {\n        ComponentEvent event \u003d new ComponentEvent(compSpec.getName(), FLEX)\n            .setDesired(compSpec.getNumberOfContainers());\n        component.handle(event);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
      "extendedDetails": {}
    },
    "1888318c89776f0bf354c1b13e3ee169e14ff638": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
      "commitAuthor": "Billie Rinaldi",
      "diff": "@@ -0,0 +1,21 @@\n+  private void createAllComponents() {\n+    long allocateId \u003d 0;\n+\n+    // sort components by dependencies\n+    Collection\u003corg.apache.slider.api.resource.Component\u003e sortedComponents \u003d\n+        ServiceApiUtil.sortByDependencies(app.getComponents());\n+\n+    for (org.apache.slider.api.resource.Component compSpec : sortedComponents) {\n+      Component component \u003d new Component(compSpec, allocateId, context);\n+      componentsById.put(allocateId, component);\n+      componentsByName.put(component.getName(), component);\n+      allocateId++;\n+\n+      // Trigger the component without dependencies\n+      if (component.areDependenciesReady()) {\n+        ComponentEvent event \u003d new ComponentEvent(compSpec.getName(), FLEX)\n+            .setDesired(compSpec.getNumberOfContainers());\n+        component.handle(event);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void createAllComponents() {\n    long allocateId \u003d 0;\n\n    // sort components by dependencies\n    Collection\u003corg.apache.slider.api.resource.Component\u003e sortedComponents \u003d\n        ServiceApiUtil.sortByDependencies(app.getComponents());\n\n    for (org.apache.slider.api.resource.Component compSpec : sortedComponents) {\n      Component component \u003d new Component(compSpec, allocateId, context);\n      componentsById.put(allocateId, component);\n      componentsByName.put(component.getName(), component);\n      allocateId++;\n\n      // Trigger the component without dependencies\n      if (component.areDependenciesReady()) {\n        ComponentEvent event \u003d new ComponentEvent(compSpec.getName(), FLEX)\n            .setDesired(compSpec.getNumberOfContainers());\n        component.handle(event);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java"
    }
  }
}