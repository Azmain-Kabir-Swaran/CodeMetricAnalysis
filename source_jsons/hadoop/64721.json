{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "S3AFileSystem.java",
  "functionName": "extractOrFetchSimpleFileStatus",
  "functionId": "extractOrFetchSimpleFileStatus___path-Path(modifiers-final)__optStatus-Optional__S3AFileStatus__(modifiers-final)",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
  "functionStartLine": 4606,
  "functionEndLine": 4626,
  "numCommitsSeen": 141,
  "timeTaken": 1663,
  "changeHistory": [
    "5e2ce370a322a46b496541ccd17443197fcfeb5a"
  ],
  "changeHistoryShort": {
    "5e2ce370a322a46b496541ccd17443197fcfeb5a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5e2ce370a322a46b496541ccd17443197fcfeb5a": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-16759. Filesystem openFile() builder to take a FileStatus param (#1761). Contributed by Steve Loughran\n\n* Enhanced builder + FS spec\r\n* s3a FS to use this to skip HEAD on open\r\n* and to use version/etag when opening the file\r\n\r\nworks with S3AFileStatus FS and S3ALocatedFileStatus",
      "commitDate": "21/01/20 2:31 PM",
      "commitName": "5e2ce370a322a46b496541ccd17443197fcfeb5a",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,21 @@\n+  private S3AFileStatus extractOrFetchSimpleFileStatus(\n+      final Path path, final Optional\u003cS3AFileStatus\u003e optStatus)\n+      throws IOException {\n+    S3AFileStatus fileStatus;\n+    if (optStatus.isPresent()) {\n+      fileStatus \u003d optStatus.get();\n+    } else {\n+      // this looks at S3guard and gets any type of status back,\n+      // if it falls back to S3 it does a HEAD only.\n+      // therefore: if there is no S3Guard and there is a dir, this\n+      // will raise a FileNotFoundException\n+      fileStatus \u003d innerGetFileStatus(path, false,\n+          StatusProbeEnum.HEAD_ONLY);\n+    }\n+    // we check here for the passed in status or the S3Guard value\n+    // for being a directory\n+    if (fileStatus.isDirectory()) {\n+      throw new FileNotFoundException(path.toString() + \" is a directory\");\n+    }\n+    return fileStatus;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private S3AFileStatus extractOrFetchSimpleFileStatus(\n      final Path path, final Optional\u003cS3AFileStatus\u003e optStatus)\n      throws IOException {\n    S3AFileStatus fileStatus;\n    if (optStatus.isPresent()) {\n      fileStatus \u003d optStatus.get();\n    } else {\n      // this looks at S3guard and gets any type of status back,\n      // if it falls back to S3 it does a HEAD only.\n      // therefore: if there is no S3Guard and there is a dir, this\n      // will raise a FileNotFoundException\n      fileStatus \u003d innerGetFileStatus(path, false,\n          StatusProbeEnum.HEAD_ONLY);\n    }\n    // we check here for the passed in status or the S3Guard value\n    // for being a directory\n    if (fileStatus.isDirectory()) {\n      throw new FileNotFoundException(path.toString() + \" is a directory\");\n    }\n    return fileStatus;\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java"
    }
  }
}