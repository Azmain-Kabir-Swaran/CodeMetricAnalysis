{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ResourceEstimatorUtil.java",
  "functionName": "createProviderInstance",
  "functionId": "createProviderInstance___conf-Configuration__configuredClassName-String__defaultValue-String__type-Class__T__",
  "sourceFilePath": "hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/common/config/ResourceEstimatorUtil.java",
  "functionStartLine": 49,
  "functionEndLine": 80,
  "numCommitsSeen": 1,
  "timeTaken": 406,
  "changeHistory": [
    "625039ef20e6011ab360131d70582a6e4bf2ec1d"
  ],
  "changeHistoryShort": {
    "625039ef20e6011ab360131d70582a6e4bf2ec1d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "625039ef20e6011ab360131d70582a6e4bf2ec1d": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-14840. Tool to estimate resource requirements of an application pipeline based on prior executions. (Rui Li via Subru).\n",
      "commitDate": "25/10/17 3:51 PM",
      "commitName": "625039ef20e6011ab360131d70582a6e4bf2ec1d",
      "commitAuthor": "Subru Krishnan",
      "diff": "@@ -0,0 +1,32 @@\n+  @SuppressWarnings(\"unchecked\") public static \u003cT\u003e T createProviderInstance(\n+      Configuration conf, String configuredClassName, String defaultValue,\n+      Class\u003cT\u003e type) throws ResourceEstimatorException {\n+    String className \u003d conf.get(configuredClassName);\n+    if (className \u003d\u003d null) {\n+      className \u003d defaultValue;\n+    }\n+    try {\n+      Class\u003c?\u003e concreteClass \u003d Class.forName(className);\n+      if (type.isAssignableFrom(concreteClass)) {\n+        Constructor\u003cT\u003e meth \u003d\n+            (Constructor\u003cT\u003e) concreteClass.getDeclaredConstructor(EMPTY_ARRAY);\n+        meth.setAccessible(true);\n+        return meth.newInstance();\n+      } else {\n+        StringBuilder errMsg \u003d new StringBuilder();\n+        errMsg.append(\"Class: \").append(className).append(\" not instance of \")\n+            .append(type.getCanonicalName());\n+        throw new ResourceEstimatorException(errMsg.toString());\n+      }\n+    } catch (ClassNotFoundException e) {\n+      StringBuilder errMsg \u003d new StringBuilder();\n+      errMsg.append(\"Could not instantiate : \").append(className)\n+          .append(\" due to exception: \").append(e.getCause());\n+      throw new ResourceEstimatorException(errMsg.toString());\n+    } catch (ReflectiveOperationException e) {\n+      StringBuilder errMsg \u003d new StringBuilder();\n+      errMsg.append(\"Could not instantiate : \").append(className)\n+          .append(\" due to exception: \").append(e.getCause());\n+      throw new ResourceEstimatorException(errMsg.toString());\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  @SuppressWarnings(\"unchecked\") public static \u003cT\u003e T createProviderInstance(\n      Configuration conf, String configuredClassName, String defaultValue,\n      Class\u003cT\u003e type) throws ResourceEstimatorException {\n    String className \u003d conf.get(configuredClassName);\n    if (className \u003d\u003d null) {\n      className \u003d defaultValue;\n    }\n    try {\n      Class\u003c?\u003e concreteClass \u003d Class.forName(className);\n      if (type.isAssignableFrom(concreteClass)) {\n        Constructor\u003cT\u003e meth \u003d\n            (Constructor\u003cT\u003e) concreteClass.getDeclaredConstructor(EMPTY_ARRAY);\n        meth.setAccessible(true);\n        return meth.newInstance();\n      } else {\n        StringBuilder errMsg \u003d new StringBuilder();\n        errMsg.append(\"Class: \").append(className).append(\" not instance of \")\n            .append(type.getCanonicalName());\n        throw new ResourceEstimatorException(errMsg.toString());\n      }\n    } catch (ClassNotFoundException e) {\n      StringBuilder errMsg \u003d new StringBuilder();\n      errMsg.append(\"Could not instantiate : \").append(className)\n          .append(\" due to exception: \").append(e.getCause());\n      throw new ResourceEstimatorException(errMsg.toString());\n    } catch (ReflectiveOperationException e) {\n      StringBuilder errMsg \u003d new StringBuilder();\n      errMsg.append(\"Could not instantiate : \").append(className)\n          .append(\" due to exception: \").append(e.getCause());\n      throw new ResourceEstimatorException(errMsg.toString());\n    }\n  }",
      "path": "hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/common/config/ResourceEstimatorUtil.java"
    }
  }
}