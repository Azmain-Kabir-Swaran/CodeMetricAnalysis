{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RollingLevelDBTimelineStore.java",
  "functionName": "put",
  "functionId": "put___entities-TimelineEntities",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/RollingLevelDBTimelineStore.java",
  "functionStartLine": 1164,
  "functionEndLine": 1203,
  "numCommitsSeen": 12,
  "timeTaken": 1510,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "daf3e4ef8bf73cbe4a799d51b4765809cd81089f"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "daf3e4ef8bf73cbe4a799d51b4765809cd81089f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "02/07/18 3:34 PM",
      "commitNameOld": "fa9ef15ecd6dc30fb260e1c342a2b51505d39b6b",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 256.03,
      "commitsBetweenForRepo": 2038,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,40 @@\n   public TimelinePutResponse put(TimelineEntities entities) {\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Starting put\");\n-    }\n+    LOG.debug(\"Starting put\");\n     TimelinePutResponse response \u003d new TimelinePutResponse();\n     TreeMap\u003cLong, RollingWriteBatch\u003e entityUpdates \u003d\n         new TreeMap\u003cLong, RollingWriteBatch\u003e();\n     TreeMap\u003cLong, RollingWriteBatch\u003e indexUpdates \u003d\n         new TreeMap\u003cLong, RollingWriteBatch\u003e();\n \n     long entityCount \u003d 0;\n     long indexCount \u003d 0;\n \n     try {\n \n       for (TimelineEntity entity : entities.getEntities()) {\n         entityCount +\u003d putEntities(entityUpdates, indexUpdates, entity,\n             response);\n       }\n \n       for (RollingWriteBatch entityUpdate : entityUpdates.values()) {\n         entityUpdate.write();\n       }\n \n       for (RollingWriteBatch indexUpdate : indexUpdates.values()) {\n         indexUpdate.write();\n       }\n \n     } finally {\n \n       for (RollingWriteBatch entityRollingWriteBatch : entityUpdates.values()) {\n         entityRollingWriteBatch.close();\n       }\n       for (RollingWriteBatch indexRollingWriteBatch : indexUpdates.values()) {\n         indexRollingWriteBatch.close();\n       }\n     }\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Put \" + entityCount + \" new leveldb entity entries and \"\n-          + indexCount + \" new leveldb index entries from \"\n-          + entities.getEntities().size() + \" timeline entities\");\n-    }\n+    LOG.debug(\"Put {} new leveldb entity entries and {} new leveldb index\"\n+        + \" entries from {} timeline entities\", entityCount, indexCount,\n+        entities.getEntities().size());\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelinePutResponse put(TimelineEntities entities) {\n    LOG.debug(\"Starting put\");\n    TimelinePutResponse response \u003d new TimelinePutResponse();\n    TreeMap\u003cLong, RollingWriteBatch\u003e entityUpdates \u003d\n        new TreeMap\u003cLong, RollingWriteBatch\u003e();\n    TreeMap\u003cLong, RollingWriteBatch\u003e indexUpdates \u003d\n        new TreeMap\u003cLong, RollingWriteBatch\u003e();\n\n    long entityCount \u003d 0;\n    long indexCount \u003d 0;\n\n    try {\n\n      for (TimelineEntity entity : entities.getEntities()) {\n        entityCount +\u003d putEntities(entityUpdates, indexUpdates, entity,\n            response);\n      }\n\n      for (RollingWriteBatch entityUpdate : entityUpdates.values()) {\n        entityUpdate.write();\n      }\n\n      for (RollingWriteBatch indexUpdate : indexUpdates.values()) {\n        indexUpdate.write();\n      }\n\n    } finally {\n\n      for (RollingWriteBatch entityRollingWriteBatch : entityUpdates.values()) {\n        entityRollingWriteBatch.close();\n      }\n      for (RollingWriteBatch indexRollingWriteBatch : indexUpdates.values()) {\n        indexRollingWriteBatch.close();\n      }\n    }\n    LOG.debug(\"Put {} new leveldb entity entries and {} new leveldb index\"\n        + \" entries from {} timeline entities\", entityCount, indexCount,\n        entities.getEntities().size());\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/RollingLevelDBTimelineStore.java",
      "extendedDetails": {}
    },
    "daf3e4ef8bf73cbe4a799d51b4765809cd81089f": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3448. Added a rolling time-to-live LevelDB timeline store implementation. Contributed by Jonathan Eagles.\n",
      "commitDate": "07/05/15 10:01 AM",
      "commitName": "daf3e4ef8bf73cbe4a799d51b4765809cd81089f",
      "commitAuthor": "Zhijie Shen",
      "diff": "@@ -0,0 +1,44 @@\n+  public TimelinePutResponse put(TimelineEntities entities) {\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Starting put\");\n+    }\n+    TimelinePutResponse response \u003d new TimelinePutResponse();\n+    TreeMap\u003cLong, RollingWriteBatch\u003e entityUpdates \u003d\n+        new TreeMap\u003cLong, RollingWriteBatch\u003e();\n+    TreeMap\u003cLong, RollingWriteBatch\u003e indexUpdates \u003d\n+        new TreeMap\u003cLong, RollingWriteBatch\u003e();\n+\n+    long entityCount \u003d 0;\n+    long indexCount \u003d 0;\n+\n+    try {\n+\n+      for (TimelineEntity entity : entities.getEntities()) {\n+        entityCount +\u003d putEntities(entityUpdates, indexUpdates, entity,\n+            response);\n+      }\n+\n+      for (RollingWriteBatch entityUpdate : entityUpdates.values()) {\n+        entityUpdate.write();\n+      }\n+\n+      for (RollingWriteBatch indexUpdate : indexUpdates.values()) {\n+        indexUpdate.write();\n+      }\n+\n+    } finally {\n+\n+      for (RollingWriteBatch entityRollingWriteBatch : entityUpdates.values()) {\n+        entityRollingWriteBatch.close();\n+      }\n+      for (RollingWriteBatch indexRollingWriteBatch : indexUpdates.values()) {\n+        indexRollingWriteBatch.close();\n+      }\n+    }\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Put \" + entityCount + \" new leveldb entity entries and \"\n+          + indexCount + \" new leveldb index entries from \"\n+          + entities.getEntities().size() + \" timeline entities\");\n+    }\n+    return response;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelinePutResponse put(TimelineEntities entities) {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Starting put\");\n    }\n    TimelinePutResponse response \u003d new TimelinePutResponse();\n    TreeMap\u003cLong, RollingWriteBatch\u003e entityUpdates \u003d\n        new TreeMap\u003cLong, RollingWriteBatch\u003e();\n    TreeMap\u003cLong, RollingWriteBatch\u003e indexUpdates \u003d\n        new TreeMap\u003cLong, RollingWriteBatch\u003e();\n\n    long entityCount \u003d 0;\n    long indexCount \u003d 0;\n\n    try {\n\n      for (TimelineEntity entity : entities.getEntities()) {\n        entityCount +\u003d putEntities(entityUpdates, indexUpdates, entity,\n            response);\n      }\n\n      for (RollingWriteBatch entityUpdate : entityUpdates.values()) {\n        entityUpdate.write();\n      }\n\n      for (RollingWriteBatch indexUpdate : indexUpdates.values()) {\n        indexUpdate.write();\n      }\n\n    } finally {\n\n      for (RollingWriteBatch entityRollingWriteBatch : entityUpdates.values()) {\n        entityRollingWriteBatch.close();\n      }\n      for (RollingWriteBatch indexRollingWriteBatch : indexUpdates.values()) {\n        indexRollingWriteBatch.close();\n      }\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Put \" + entityCount + \" new leveldb entity entries and \"\n          + indexCount + \" new leveldb index entries from \"\n          + entities.getEntities().size() + \" timeline entities\");\n    }\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/RollingLevelDBTimelineStore.java"
    }
  }
}