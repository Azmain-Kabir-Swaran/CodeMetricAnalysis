{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HttpFSServer.java",
  "functionName": "post",
  "functionId": "post___is-InputStream__uriInfo-UriInfo(annotations-@Context)__path-String(annotations-@PathParam(\"path\"))__op-OperationParam(annotations-@QueryParam(OperationParam.NAME))__params-Parameters(annotations-@Context)__request-HttpServletRequest(annotations-@Context)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSServer.java",
  "functionStartLine": 573,
  "functionEndLine": 650,
  "numCommitsSeen": 75,
  "timeTaken": 4203,
  "changeHistory": [
    "1fdfaebd98d9b8f40f616d03fa2f3b6b5c71b11b",
    "59aac002834aaeb6475faad4c894b8c764957f68",
    "ad5256e44dffba2e9994f2db27d9ae71eab690e8",
    "ea2895f4ed5031809d856faa52e9de5b9501bdea",
    "2fd02afeca3710f487b6a039a65c1a666322b229",
    "828429dec1a7fd3bb5aab6f5bd81423cf8fcbc90",
    "065d9ec5d93e37b4bbd6fd27cb411dc58b0fb686",
    "bbdae834d2ec26b329b48b4c9343ebb182a63242",
    "5a8ea48c37da39f4f4879dabce3b640c9294dd73",
    "d263653ae22217439d1740c936d1c78e1644d73e",
    "3334306512b5dc932814fded31a89ba1ee97cd9f"
  ],
  "changeHistoryShort": {
    "1fdfaebd98d9b8f40f616d03fa2f3b6b5c71b11b": "Ybodychange",
    "59aac002834aaeb6475faad4c894b8c764957f68": "Ybodychange",
    "ad5256e44dffba2e9994f2db27d9ae71eab690e8": "Ybodychange",
    "ea2895f4ed5031809d856faa52e9de5b9501bdea": "Ybodychange",
    "2fd02afeca3710f487b6a039a65c1a666322b229": "Ybodychange",
    "828429dec1a7fd3bb5aab6f5bd81423cf8fcbc90": "Ymultichange(Yparameterchange,Ybodychange)",
    "065d9ec5d93e37b4bbd6fd27cb411dc58b0fb686": "Ymultichange(Yparameterchange,Ybodychange)",
    "bbdae834d2ec26b329b48b4c9343ebb182a63242": "Ybodychange",
    "5a8ea48c37da39f4f4879dabce3b640c9294dd73": "Ybodychange",
    "d263653ae22217439d1740c936d1c78e1644d73e": "Ymultichange(Yparameterchange,Ybodychange)",
    "3334306512b5dc932814fded31a89ba1ee97cd9f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1fdfaebd98d9b8f40f616d03fa2f3b6b5c71b11b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15275. HttpFS: Response of Create was not correct with noredirect and data are true. Contributed by hemanthboyina.\n",
      "commitDate": "20/04/20 7:09 AM",
      "commitName": "1fdfaebd98d9b8f40f616d03fa2f3b6b5c71b11b",
      "commitAuthor": "Takanobu Asanuma",
      "commitDateOld": "28/02/20 5:30 PM",
      "commitNameOld": "9a3a28018af71806412d9a2d3ea6b63f3d6737dd",
      "commitAuthorOld": "Takanobu Asanuma",
      "daysBetweenCommits": 51.53,
      "commitsBetweenForRepo": 165,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,80 +1,78 @@\n   public Response post(InputStream is,\n                        @Context UriInfo uriInfo,\n                        @PathParam(\"path\") String path,\n                        @QueryParam(OperationParam.NAME) OperationParam op,\n                        @Context Parameters params,\n                        @Context HttpServletRequest request)\n     throws IOException, FileSystemAccessException {\n     UserGroupInformation user \u003d HttpUserGroupInformation.get();\n     Response response;\n     path \u003d makeAbsolute(path);\n     MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n     MDC.put(\"hostname\", request.getRemoteAddr());\n     switch (op.value()) {\n       case APPEND: {\n         Boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n-        if (!hasData) {\n-          URI redirectURL \u003d createUploadRedirectionURL(\n-              uriInfo, HttpFSFileSystem.Operation.APPEND);\n-          Boolean noRedirect \u003d params.get(\n-              NoRedirectParam.NAME, NoRedirectParam.class);\n-          if (noRedirect) {\n+        URI redirectURL \u003d createUploadRedirectionURL(uriInfo,\n+            HttpFSFileSystem.Operation.APPEND);\n+        Boolean noRedirect \u003d\n+            params.get(NoRedirectParam.NAME, NoRedirectParam.class);\n+        if (noRedirect) {\n             final String js \u003d JsonUtil.toJsonString(\"Location\", redirectURL);\n             response \u003d Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n-          } else {\n-            response \u003d Response.temporaryRedirect(redirectURL).build();\n-          }\n-        } else {\n+        } else if (hasData) {\n           FSOperations.FSAppend command \u003d\n             new FSOperations.FSAppend(is, path);\n           fsExecute(user, command);\n           AUDIT_LOG.info(\"[{}]\", path);\n           response \u003d Response.ok().type(MediaType.APPLICATION_JSON).build();\n+        } else {\n+          response \u003d Response.temporaryRedirect(redirectURL).build();\n         }\n         break;\n       }\n       case CONCAT: {\n         System.out.println(\"HTTPFS SERVER CONCAT\");\n         String sources \u003d params.get(SourcesParam.NAME, SourcesParam.class);\n \n         FSOperations.FSConcat command \u003d\n             new FSOperations.FSConcat(path, sources.split(\",\"));\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}]\", path);\n         System.out.println(\"SENT RESPONSE\");\n         response \u003d Response.ok().build();\n         break;\n       }\n       case TRUNCATE: {\n         Long newLength \u003d params.get(NewLengthParam.NAME, NewLengthParam.class);\n         FSOperations.FSTruncate command \u003d \n             new FSOperations.FSTruncate(path, newLength);\n         JSONObject json \u003d fsExecute(user, command);\n         AUDIT_LOG.info(\"Truncate [{}] to length [{}]\", path, newLength);\n         response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n         break;\n       }\n       case UNSETSTORAGEPOLICY: {\n         FSOperations.FSUnsetStoragePolicy command \u003d\n              new FSOperations.FSUnsetStoragePolicy(path);\n          fsExecute(user, command);\n          AUDIT_LOG.info(\"Unset storage policy [{}]\", path);\n          response \u003d Response.ok().build();\n          break;\n       }\n       case UNSETECPOLICY: {\n         FSOperations.FSUnSetErasureCodingPolicy command \u003d\n             new FSOperations.FSUnSetErasureCodingPolicy(path);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"Unset ec policy [{}]\", path);\n         response \u003d Response.ok().build();\n         break;\n       }\n       default: {\n         throw new IOException(\n           MessageFormat.format(\"Invalid HTTP POST operation [{0}]\",\n                                op.value()));\n       }\n     }\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response post(InputStream is,\n                       @Context UriInfo uriInfo,\n                       @PathParam(\"path\") String path,\n                       @QueryParam(OperationParam.NAME) OperationParam op,\n                       @Context Parameters params,\n                       @Context HttpServletRequest request)\n    throws IOException, FileSystemAccessException {\n    UserGroupInformation user \u003d HttpUserGroupInformation.get();\n    Response response;\n    path \u003d makeAbsolute(path);\n    MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n    MDC.put(\"hostname\", request.getRemoteAddr());\n    switch (op.value()) {\n      case APPEND: {\n        Boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n        URI redirectURL \u003d createUploadRedirectionURL(uriInfo,\n            HttpFSFileSystem.Operation.APPEND);\n        Boolean noRedirect \u003d\n            params.get(NoRedirectParam.NAME, NoRedirectParam.class);\n        if (noRedirect) {\n            final String js \u003d JsonUtil.toJsonString(\"Location\", redirectURL);\n            response \u003d Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n        } else if (hasData) {\n          FSOperations.FSAppend command \u003d\n            new FSOperations.FSAppend(is, path);\n          fsExecute(user, command);\n          AUDIT_LOG.info(\"[{}]\", path);\n          response \u003d Response.ok().type(MediaType.APPLICATION_JSON).build();\n        } else {\n          response \u003d Response.temporaryRedirect(redirectURL).build();\n        }\n        break;\n      }\n      case CONCAT: {\n        System.out.println(\"HTTPFS SERVER CONCAT\");\n        String sources \u003d params.get(SourcesParam.NAME, SourcesParam.class);\n\n        FSOperations.FSConcat command \u003d\n            new FSOperations.FSConcat(path, sources.split(\",\"));\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}]\", path);\n        System.out.println(\"SENT RESPONSE\");\n        response \u003d Response.ok().build();\n        break;\n      }\n      case TRUNCATE: {\n        Long newLength \u003d params.get(NewLengthParam.NAME, NewLengthParam.class);\n        FSOperations.FSTruncate command \u003d \n            new FSOperations.FSTruncate(path, newLength);\n        JSONObject json \u003d fsExecute(user, command);\n        AUDIT_LOG.info(\"Truncate [{}] to length [{}]\", path, newLength);\n        response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n        break;\n      }\n      case UNSETSTORAGEPOLICY: {\n        FSOperations.FSUnsetStoragePolicy command \u003d\n             new FSOperations.FSUnsetStoragePolicy(path);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"Unset storage policy [{}]\", path);\n         response \u003d Response.ok().build();\n         break;\n      }\n      case UNSETECPOLICY: {\n        FSOperations.FSUnSetErasureCodingPolicy command \u003d\n            new FSOperations.FSUnSetErasureCodingPolicy(path);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"Unset ec policy [{}]\", path);\n        response \u003d Response.ok().build();\n        break;\n      }\n      default: {\n        throw new IOException(\n          MessageFormat.format(\"Invalid HTTP POST operation [{0}]\",\n                               op.value()));\n      }\n    }\n    return response;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSServer.java",
      "extendedDetails": {}
    },
    "59aac002834aaeb6475faad4c894b8c764957f68": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15066. HttpFS: Implement setErasureCodingPolicy , unsetErasureCodingPolicy , getErasureCodingPolicy. Contributed by hemanthboyina.\n",
      "commitDate": "06/01/20 6:10 PM",
      "commitName": "59aac002834aaeb6475faad4c894b8c764957f68",
      "commitAuthor": "Takanobu Asanuma",
      "commitDateOld": "02/12/19 4:38 PM",
      "commitNameOld": "4ede8bce28aadc62007ad65dc6d44be550632b5f",
      "commitAuthorOld": "Takanobu Asanuma",
      "daysBetweenCommits": 35.06,
      "commitsBetweenForRepo": 110,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,72 +1,80 @@\n   public Response post(InputStream is,\n                        @Context UriInfo uriInfo,\n                        @PathParam(\"path\") String path,\n                        @QueryParam(OperationParam.NAME) OperationParam op,\n                        @Context Parameters params,\n                        @Context HttpServletRequest request)\n     throws IOException, FileSystemAccessException {\n     UserGroupInformation user \u003d HttpUserGroupInformation.get();\n     Response response;\n     path \u003d makeAbsolute(path);\n     MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n     MDC.put(\"hostname\", request.getRemoteAddr());\n     switch (op.value()) {\n       case APPEND: {\n         Boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n         if (!hasData) {\n           URI redirectURL \u003d createUploadRedirectionURL(\n               uriInfo, HttpFSFileSystem.Operation.APPEND);\n           Boolean noRedirect \u003d params.get(\n               NoRedirectParam.NAME, NoRedirectParam.class);\n           if (noRedirect) {\n             final String js \u003d JsonUtil.toJsonString(\"Location\", redirectURL);\n             response \u003d Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n           } else {\n             response \u003d Response.temporaryRedirect(redirectURL).build();\n           }\n         } else {\n           FSOperations.FSAppend command \u003d\n             new FSOperations.FSAppend(is, path);\n           fsExecute(user, command);\n           AUDIT_LOG.info(\"[{}]\", path);\n           response \u003d Response.ok().type(MediaType.APPLICATION_JSON).build();\n         }\n         break;\n       }\n       case CONCAT: {\n         System.out.println(\"HTTPFS SERVER CONCAT\");\n         String sources \u003d params.get(SourcesParam.NAME, SourcesParam.class);\n \n         FSOperations.FSConcat command \u003d\n             new FSOperations.FSConcat(path, sources.split(\",\"));\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}]\", path);\n         System.out.println(\"SENT RESPONSE\");\n         response \u003d Response.ok().build();\n         break;\n       }\n       case TRUNCATE: {\n         Long newLength \u003d params.get(NewLengthParam.NAME, NewLengthParam.class);\n         FSOperations.FSTruncate command \u003d \n             new FSOperations.FSTruncate(path, newLength);\n         JSONObject json \u003d fsExecute(user, command);\n         AUDIT_LOG.info(\"Truncate [{}] to length [{}]\", path, newLength);\n         response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n         break;\n       }\n       case UNSETSTORAGEPOLICY: {\n         FSOperations.FSUnsetStoragePolicy command \u003d\n              new FSOperations.FSUnsetStoragePolicy(path);\n          fsExecute(user, command);\n          AUDIT_LOG.info(\"Unset storage policy [{}]\", path);\n          response \u003d Response.ok().build();\n          break;\n       }\n+      case UNSETECPOLICY: {\n+        FSOperations.FSUnSetErasureCodingPolicy command \u003d\n+            new FSOperations.FSUnSetErasureCodingPolicy(path);\n+        fsExecute(user, command);\n+        AUDIT_LOG.info(\"Unset ec policy [{}]\", path);\n+        response \u003d Response.ok().build();\n+        break;\n+      }\n       default: {\n         throw new IOException(\n           MessageFormat.format(\"Invalid HTTP POST operation [{0}]\",\n                                op.value()));\n       }\n     }\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response post(InputStream is,\n                       @Context UriInfo uriInfo,\n                       @PathParam(\"path\") String path,\n                       @QueryParam(OperationParam.NAME) OperationParam op,\n                       @Context Parameters params,\n                       @Context HttpServletRequest request)\n    throws IOException, FileSystemAccessException {\n    UserGroupInformation user \u003d HttpUserGroupInformation.get();\n    Response response;\n    path \u003d makeAbsolute(path);\n    MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n    MDC.put(\"hostname\", request.getRemoteAddr());\n    switch (op.value()) {\n      case APPEND: {\n        Boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n        if (!hasData) {\n          URI redirectURL \u003d createUploadRedirectionURL(\n              uriInfo, HttpFSFileSystem.Operation.APPEND);\n          Boolean noRedirect \u003d params.get(\n              NoRedirectParam.NAME, NoRedirectParam.class);\n          if (noRedirect) {\n            final String js \u003d JsonUtil.toJsonString(\"Location\", redirectURL);\n            response \u003d Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n          } else {\n            response \u003d Response.temporaryRedirect(redirectURL).build();\n          }\n        } else {\n          FSOperations.FSAppend command \u003d\n            new FSOperations.FSAppend(is, path);\n          fsExecute(user, command);\n          AUDIT_LOG.info(\"[{}]\", path);\n          response \u003d Response.ok().type(MediaType.APPLICATION_JSON).build();\n        }\n        break;\n      }\n      case CONCAT: {\n        System.out.println(\"HTTPFS SERVER CONCAT\");\n        String sources \u003d params.get(SourcesParam.NAME, SourcesParam.class);\n\n        FSOperations.FSConcat command \u003d\n            new FSOperations.FSConcat(path, sources.split(\",\"));\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}]\", path);\n        System.out.println(\"SENT RESPONSE\");\n        response \u003d Response.ok().build();\n        break;\n      }\n      case TRUNCATE: {\n        Long newLength \u003d params.get(NewLengthParam.NAME, NewLengthParam.class);\n        FSOperations.FSTruncate command \u003d \n            new FSOperations.FSTruncate(path, newLength);\n        JSONObject json \u003d fsExecute(user, command);\n        AUDIT_LOG.info(\"Truncate [{}] to length [{}]\", path, newLength);\n        response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n        break;\n      }\n      case UNSETSTORAGEPOLICY: {\n        FSOperations.FSUnsetStoragePolicy command \u003d\n             new FSOperations.FSUnsetStoragePolicy(path);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"Unset storage policy [{}]\", path);\n         response \u003d Response.ok().build();\n         break;\n      }\n      case UNSETECPOLICY: {\n        FSOperations.FSUnSetErasureCodingPolicy command \u003d\n            new FSOperations.FSUnSetErasureCodingPolicy(path);\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"Unset ec policy [{}]\", path);\n        response \u003d Response.ok().build();\n        break;\n      }\n      default: {\n        throw new IOException(\n          MessageFormat.format(\"Invalid HTTP POST operation [{0}]\",\n                               op.value()));\n      }\n    }\n    return response;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSServer.java",
      "extendedDetails": {}
    },
    "ad5256e44dffba2e9994f2db27d9ae71eab690e8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14063. Support noredirect param for CREATE/APPEND/OPEN/GETFILECHECKSUM in HttpFS. Contributed by Íñigo Goiri.\n",
      "commitDate": "16/11/18 9:12 AM",
      "commitName": "ad5256e44dffba2e9994f2db27d9ae71eab690e8",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "11/10/18 3:01 PM",
      "commitNameOld": "6dcfef79afe97eda6d09fe2567bb4d4074223141",
      "commitAuthorOld": "Siyao Meng",
      "daysBetweenCommits": 35.8,
      "commitsBetweenForRepo": 324,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,72 @@\n   public Response post(InputStream is,\n                        @Context UriInfo uriInfo,\n                        @PathParam(\"path\") String path,\n                        @QueryParam(OperationParam.NAME) OperationParam op,\n                        @Context Parameters params,\n                        @Context HttpServletRequest request)\n     throws IOException, FileSystemAccessException {\n     UserGroupInformation user \u003d HttpUserGroupInformation.get();\n     Response response;\n     path \u003d makeAbsolute(path);\n     MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n     MDC.put(\"hostname\", request.getRemoteAddr());\n     switch (op.value()) {\n       case APPEND: {\n         Boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n         if (!hasData) {\n-          response \u003d Response.temporaryRedirect(\n-            createUploadRedirectionURL(uriInfo,\n-              HttpFSFileSystem.Operation.APPEND)).build();\n+          URI redirectURL \u003d createUploadRedirectionURL(\n+              uriInfo, HttpFSFileSystem.Operation.APPEND);\n+          Boolean noRedirect \u003d params.get(\n+              NoRedirectParam.NAME, NoRedirectParam.class);\n+          if (noRedirect) {\n+            final String js \u003d JsonUtil.toJsonString(\"Location\", redirectURL);\n+            response \u003d Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n+          } else {\n+            response \u003d Response.temporaryRedirect(redirectURL).build();\n+          }\n         } else {\n           FSOperations.FSAppend command \u003d\n             new FSOperations.FSAppend(is, path);\n           fsExecute(user, command);\n           AUDIT_LOG.info(\"[{}]\", path);\n           response \u003d Response.ok().type(MediaType.APPLICATION_JSON).build();\n         }\n         break;\n       }\n       case CONCAT: {\n         System.out.println(\"HTTPFS SERVER CONCAT\");\n         String sources \u003d params.get(SourcesParam.NAME, SourcesParam.class);\n \n         FSOperations.FSConcat command \u003d\n             new FSOperations.FSConcat(path, sources.split(\",\"));\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}]\", path);\n         System.out.println(\"SENT RESPONSE\");\n         response \u003d Response.ok().build();\n         break;\n       }\n       case TRUNCATE: {\n         Long newLength \u003d params.get(NewLengthParam.NAME, NewLengthParam.class);\n         FSOperations.FSTruncate command \u003d \n             new FSOperations.FSTruncate(path, newLength);\n         JSONObject json \u003d fsExecute(user, command);\n         AUDIT_LOG.info(\"Truncate [{}] to length [{}]\", path, newLength);\n         response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n         break;\n       }\n       case UNSETSTORAGEPOLICY: {\n         FSOperations.FSUnsetStoragePolicy command \u003d\n              new FSOperations.FSUnsetStoragePolicy(path);\n          fsExecute(user, command);\n          AUDIT_LOG.info(\"Unset storage policy [{}]\", path);\n          response \u003d Response.ok().build();\n          break;\n       }\n       default: {\n         throw new IOException(\n           MessageFormat.format(\"Invalid HTTP POST operation [{0}]\",\n                                op.value()));\n       }\n     }\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response post(InputStream is,\n                       @Context UriInfo uriInfo,\n                       @PathParam(\"path\") String path,\n                       @QueryParam(OperationParam.NAME) OperationParam op,\n                       @Context Parameters params,\n                       @Context HttpServletRequest request)\n    throws IOException, FileSystemAccessException {\n    UserGroupInformation user \u003d HttpUserGroupInformation.get();\n    Response response;\n    path \u003d makeAbsolute(path);\n    MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n    MDC.put(\"hostname\", request.getRemoteAddr());\n    switch (op.value()) {\n      case APPEND: {\n        Boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n        if (!hasData) {\n          URI redirectURL \u003d createUploadRedirectionURL(\n              uriInfo, HttpFSFileSystem.Operation.APPEND);\n          Boolean noRedirect \u003d params.get(\n              NoRedirectParam.NAME, NoRedirectParam.class);\n          if (noRedirect) {\n            final String js \u003d JsonUtil.toJsonString(\"Location\", redirectURL);\n            response \u003d Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n          } else {\n            response \u003d Response.temporaryRedirect(redirectURL).build();\n          }\n        } else {\n          FSOperations.FSAppend command \u003d\n            new FSOperations.FSAppend(is, path);\n          fsExecute(user, command);\n          AUDIT_LOG.info(\"[{}]\", path);\n          response \u003d Response.ok().type(MediaType.APPLICATION_JSON).build();\n        }\n        break;\n      }\n      case CONCAT: {\n        System.out.println(\"HTTPFS SERVER CONCAT\");\n        String sources \u003d params.get(SourcesParam.NAME, SourcesParam.class);\n\n        FSOperations.FSConcat command \u003d\n            new FSOperations.FSConcat(path, sources.split(\",\"));\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}]\", path);\n        System.out.println(\"SENT RESPONSE\");\n        response \u003d Response.ok().build();\n        break;\n      }\n      case TRUNCATE: {\n        Long newLength \u003d params.get(NewLengthParam.NAME, NewLengthParam.class);\n        FSOperations.FSTruncate command \u003d \n            new FSOperations.FSTruncate(path, newLength);\n        JSONObject json \u003d fsExecute(user, command);\n        AUDIT_LOG.info(\"Truncate [{}] to length [{}]\", path, newLength);\n        response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n        break;\n      }\n      case UNSETSTORAGEPOLICY: {\n        FSOperations.FSUnsetStoragePolicy command \u003d\n             new FSOperations.FSUnsetStoragePolicy(path);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"Unset storage policy [{}]\", path);\n         response \u003d Response.ok().build();\n         break;\n      }\n      default: {\n        throw new IOException(\n          MessageFormat.format(\"Invalid HTTP POST operation [{0}]\",\n                               op.value()));\n      }\n    }\n    return response;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSServer.java",
      "extendedDetails": {}
    },
    "ea2895f4ed5031809d856faa52e9de5b9501bdea": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8630. WebHDFS : Support get/set/unset StoragePolicy. Contributed by Surendra Singh Lilhore.\n",
      "commitDate": "07/12/16 3:52 PM",
      "commitName": "ea2895f4ed5031809d856faa52e9de5b9501bdea",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "04/11/16 6:06 PM",
      "commitNameOld": "d8bab3dcb693b2773ede9a6e4f71ae85ee056f79",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 32.95,
      "commitsBetweenForRepo": 236,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,65 @@\n   public Response post(InputStream is,\n                        @Context UriInfo uriInfo,\n                        @PathParam(\"path\") String path,\n                        @QueryParam(OperationParam.NAME) OperationParam op,\n                        @Context Parameters params,\n                        @Context HttpServletRequest request)\n     throws IOException, FileSystemAccessException {\n     UserGroupInformation user \u003d HttpUserGroupInformation.get();\n     Response response;\n     path \u003d makeAbsolute(path);\n     MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n     MDC.put(\"hostname\", request.getRemoteAddr());\n     switch (op.value()) {\n       case APPEND: {\n         Boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n         if (!hasData) {\n           response \u003d Response.temporaryRedirect(\n             createUploadRedirectionURL(uriInfo,\n               HttpFSFileSystem.Operation.APPEND)).build();\n         } else {\n           FSOperations.FSAppend command \u003d\n             new FSOperations.FSAppend(is, path);\n           fsExecute(user, command);\n           AUDIT_LOG.info(\"[{}]\", path);\n           response \u003d Response.ok().type(MediaType.APPLICATION_JSON).build();\n         }\n         break;\n       }\n       case CONCAT: {\n         System.out.println(\"HTTPFS SERVER CONCAT\");\n         String sources \u003d params.get(SourcesParam.NAME, SourcesParam.class);\n \n         FSOperations.FSConcat command \u003d\n             new FSOperations.FSConcat(path, sources.split(\",\"));\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}]\", path);\n         System.out.println(\"SENT RESPONSE\");\n         response \u003d Response.ok().build();\n         break;\n       }\n       case TRUNCATE: {\n         Long newLength \u003d params.get(NewLengthParam.NAME, NewLengthParam.class);\n         FSOperations.FSTruncate command \u003d \n             new FSOperations.FSTruncate(path, newLength);\n         JSONObject json \u003d fsExecute(user, command);\n         AUDIT_LOG.info(\"Truncate [{}] to length [{}]\", path, newLength);\n         response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n         break;\n       }\n+      case UNSETSTORAGEPOLICY: {\n+        FSOperations.FSUnsetStoragePolicy command \u003d\n+             new FSOperations.FSUnsetStoragePolicy(path);\n+         fsExecute(user, command);\n+         AUDIT_LOG.info(\"Unset storage policy [{}]\", path);\n+         response \u003d Response.ok().build();\n+         break;\n+      }\n       default: {\n         throw new IOException(\n           MessageFormat.format(\"Invalid HTTP POST operation [{0}]\",\n                                op.value()));\n       }\n     }\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response post(InputStream is,\n                       @Context UriInfo uriInfo,\n                       @PathParam(\"path\") String path,\n                       @QueryParam(OperationParam.NAME) OperationParam op,\n                       @Context Parameters params,\n                       @Context HttpServletRequest request)\n    throws IOException, FileSystemAccessException {\n    UserGroupInformation user \u003d HttpUserGroupInformation.get();\n    Response response;\n    path \u003d makeAbsolute(path);\n    MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n    MDC.put(\"hostname\", request.getRemoteAddr());\n    switch (op.value()) {\n      case APPEND: {\n        Boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n        if (!hasData) {\n          response \u003d Response.temporaryRedirect(\n            createUploadRedirectionURL(uriInfo,\n              HttpFSFileSystem.Operation.APPEND)).build();\n        } else {\n          FSOperations.FSAppend command \u003d\n            new FSOperations.FSAppend(is, path);\n          fsExecute(user, command);\n          AUDIT_LOG.info(\"[{}]\", path);\n          response \u003d Response.ok().type(MediaType.APPLICATION_JSON).build();\n        }\n        break;\n      }\n      case CONCAT: {\n        System.out.println(\"HTTPFS SERVER CONCAT\");\n        String sources \u003d params.get(SourcesParam.NAME, SourcesParam.class);\n\n        FSOperations.FSConcat command \u003d\n            new FSOperations.FSConcat(path, sources.split(\",\"));\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}]\", path);\n        System.out.println(\"SENT RESPONSE\");\n        response \u003d Response.ok().build();\n        break;\n      }\n      case TRUNCATE: {\n        Long newLength \u003d params.get(NewLengthParam.NAME, NewLengthParam.class);\n        FSOperations.FSTruncate command \u003d \n            new FSOperations.FSTruncate(path, newLength);\n        JSONObject json \u003d fsExecute(user, command);\n        AUDIT_LOG.info(\"Truncate [{}] to length [{}]\", path, newLength);\n        response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n        break;\n      }\n      case UNSETSTORAGEPOLICY: {\n        FSOperations.FSUnsetStoragePolicy command \u003d\n             new FSOperations.FSUnsetStoragePolicy(path);\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"Unset storage policy [{}]\", path);\n         response \u003d Response.ok().build();\n         break;\n      }\n      default: {\n        throw new IOException(\n          MessageFormat.format(\"Invalid HTTP POST operation [{0}]\",\n                               op.value()));\n      }\n    }\n    return response;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSServer.java",
      "extendedDetails": {}
    },
    "2fd02afeca3710f487b6a039a65c1a666322b229": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7656. Expose truncate API for HDFS httpfs. (yliu)\n",
      "commitDate": "18/02/15 4:36 PM",
      "commitName": "2fd02afeca3710f487b6a039a65c1a666322b229",
      "commitAuthor": "yliu",
      "commitDateOld": "10/12/14 2:54 PM",
      "commitNameOld": "92916ae4876e4e24f85b22ccf9418f347d8d9666",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 70.07,
      "commitsBetweenForRepo": 533,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,57 @@\n   public Response post(InputStream is,\n                        @Context UriInfo uriInfo,\n                        @PathParam(\"path\") String path,\n                        @QueryParam(OperationParam.NAME) OperationParam op,\n                        @Context Parameters params,\n                        @Context HttpServletRequest request)\n     throws IOException, FileSystemAccessException {\n     UserGroupInformation user \u003d HttpUserGroupInformation.get();\n     Response response;\n     path \u003d makeAbsolute(path);\n     MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n     MDC.put(\"hostname\", request.getRemoteAddr());\n     switch (op.value()) {\n       case APPEND: {\n         Boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n         if (!hasData) {\n           response \u003d Response.temporaryRedirect(\n             createUploadRedirectionURL(uriInfo,\n               HttpFSFileSystem.Operation.APPEND)).build();\n         } else {\n           FSOperations.FSAppend command \u003d\n             new FSOperations.FSAppend(is, path);\n           fsExecute(user, command);\n           AUDIT_LOG.info(\"[{}]\", path);\n           response \u003d Response.ok().type(MediaType.APPLICATION_JSON).build();\n         }\n         break;\n       }\n       case CONCAT: {\n         System.out.println(\"HTTPFS SERVER CONCAT\");\n         String sources \u003d params.get(SourcesParam.NAME, SourcesParam.class);\n \n         FSOperations.FSConcat command \u003d\n             new FSOperations.FSConcat(path, sources.split(\",\"));\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}]\", path);\n         System.out.println(\"SENT RESPONSE\");\n         response \u003d Response.ok().build();\n         break;\n       }\n+      case TRUNCATE: {\n+        Long newLength \u003d params.get(NewLengthParam.NAME, NewLengthParam.class);\n+        FSOperations.FSTruncate command \u003d \n+            new FSOperations.FSTruncate(path, newLength);\n+        JSONObject json \u003d fsExecute(user, command);\n+        AUDIT_LOG.info(\"Truncate [{}] to length [{}]\", path, newLength);\n+        response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n+        break;\n+      }\n       default: {\n         throw new IOException(\n           MessageFormat.format(\"Invalid HTTP POST operation [{0}]\",\n                                op.value()));\n       }\n     }\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response post(InputStream is,\n                       @Context UriInfo uriInfo,\n                       @PathParam(\"path\") String path,\n                       @QueryParam(OperationParam.NAME) OperationParam op,\n                       @Context Parameters params,\n                       @Context HttpServletRequest request)\n    throws IOException, FileSystemAccessException {\n    UserGroupInformation user \u003d HttpUserGroupInformation.get();\n    Response response;\n    path \u003d makeAbsolute(path);\n    MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n    MDC.put(\"hostname\", request.getRemoteAddr());\n    switch (op.value()) {\n      case APPEND: {\n        Boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n        if (!hasData) {\n          response \u003d Response.temporaryRedirect(\n            createUploadRedirectionURL(uriInfo,\n              HttpFSFileSystem.Operation.APPEND)).build();\n        } else {\n          FSOperations.FSAppend command \u003d\n            new FSOperations.FSAppend(is, path);\n          fsExecute(user, command);\n          AUDIT_LOG.info(\"[{}]\", path);\n          response \u003d Response.ok().type(MediaType.APPLICATION_JSON).build();\n        }\n        break;\n      }\n      case CONCAT: {\n        System.out.println(\"HTTPFS SERVER CONCAT\");\n        String sources \u003d params.get(SourcesParam.NAME, SourcesParam.class);\n\n        FSOperations.FSConcat command \u003d\n            new FSOperations.FSConcat(path, sources.split(\",\"));\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}]\", path);\n        System.out.println(\"SENT RESPONSE\");\n        response \u003d Response.ok().build();\n        break;\n      }\n      case TRUNCATE: {\n        Long newLength \u003d params.get(NewLengthParam.NAME, NewLengthParam.class);\n        FSOperations.FSTruncate command \u003d \n            new FSOperations.FSTruncate(path, newLength);\n        JSONObject json \u003d fsExecute(user, command);\n        AUDIT_LOG.info(\"Truncate [{}] to length [{}]\", path, newLength);\n        response \u003d Response.ok(json).type(MediaType.APPLICATION_JSON).build();\n        break;\n      }\n      default: {\n        throw new IOException(\n          MessageFormat.format(\"Invalid HTTP POST operation [{0}]\",\n                               op.value()));\n      }\n    }\n    return response;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSServer.java",
      "extendedDetails": {}
    },
    "828429dec1a7fd3bb5aab6f5bd81423cf8fcbc90": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-7232. Populate hostname in httpfs audit log (Zoran Dimitrijevic via aw)\n",
      "commitDate": "23/10/14 2:06 PM",
      "commitName": "828429dec1a7fd3bb5aab6f5bd81423cf8fcbc90",
      "commitAuthor": "Allen Wittenauer",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7232. Populate hostname in httpfs audit log (Zoran Dimitrijevic via aw)\n",
          "commitDate": "23/10/14 2:06 PM",
          "commitName": "828429dec1a7fd3bb5aab6f5bd81423cf8fcbc90",
          "commitAuthor": "Allen Wittenauer",
          "commitDateOld": "13/08/14 1:27 PM",
          "commitNameOld": "065d9ec5d93e37b4bbd6fd27cb411dc58b0fb686",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 71.03,
          "commitsBetweenForRepo": 700,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,48 @@\n   public Response post(InputStream is,\n                        @Context UriInfo uriInfo,\n                        @PathParam(\"path\") String path,\n                        @QueryParam(OperationParam.NAME) OperationParam op,\n-                       @Context Parameters params)\n+                       @Context Parameters params,\n+                       @Context HttpServletRequest request)\n     throws IOException, FileSystemAccessException {\n     UserGroupInformation user \u003d HttpUserGroupInformation.get();\n     Response response;\n     path \u003d makeAbsolute(path);\n     MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n+    MDC.put(\"hostname\", request.getRemoteAddr());\n     switch (op.value()) {\n       case APPEND: {\n         Boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n         if (!hasData) {\n           response \u003d Response.temporaryRedirect(\n             createUploadRedirectionURL(uriInfo,\n               HttpFSFileSystem.Operation.APPEND)).build();\n         } else {\n           FSOperations.FSAppend command \u003d\n             new FSOperations.FSAppend(is, path);\n           fsExecute(user, command);\n           AUDIT_LOG.info(\"[{}]\", path);\n           response \u003d Response.ok().type(MediaType.APPLICATION_JSON).build();\n         }\n         break;\n       }\n       case CONCAT: {\n         System.out.println(\"HTTPFS SERVER CONCAT\");\n         String sources \u003d params.get(SourcesParam.NAME, SourcesParam.class);\n \n         FSOperations.FSConcat command \u003d\n             new FSOperations.FSConcat(path, sources.split(\",\"));\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}]\", path);\n         System.out.println(\"SENT RESPONSE\");\n         response \u003d Response.ok().build();\n         break;\n       }\n       default: {\n         throw new IOException(\n           MessageFormat.format(\"Invalid HTTP POST operation [{0}]\",\n                                op.value()));\n       }\n     }\n     return response;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response post(InputStream is,\n                       @Context UriInfo uriInfo,\n                       @PathParam(\"path\") String path,\n                       @QueryParam(OperationParam.NAME) OperationParam op,\n                       @Context Parameters params,\n                       @Context HttpServletRequest request)\n    throws IOException, FileSystemAccessException {\n    UserGroupInformation user \u003d HttpUserGroupInformation.get();\n    Response response;\n    path \u003d makeAbsolute(path);\n    MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n    MDC.put(\"hostname\", request.getRemoteAddr());\n    switch (op.value()) {\n      case APPEND: {\n        Boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n        if (!hasData) {\n          response \u003d Response.temporaryRedirect(\n            createUploadRedirectionURL(uriInfo,\n              HttpFSFileSystem.Operation.APPEND)).build();\n        } else {\n          FSOperations.FSAppend command \u003d\n            new FSOperations.FSAppend(is, path);\n          fsExecute(user, command);\n          AUDIT_LOG.info(\"[{}]\", path);\n          response \u003d Response.ok().type(MediaType.APPLICATION_JSON).build();\n        }\n        break;\n      }\n      case CONCAT: {\n        System.out.println(\"HTTPFS SERVER CONCAT\");\n        String sources \u003d params.get(SourcesParam.NAME, SourcesParam.class);\n\n        FSOperations.FSConcat command \u003d\n            new FSOperations.FSConcat(path, sources.split(\",\"));\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}]\", path);\n        System.out.println(\"SENT RESPONSE\");\n        response \u003d Response.ok().build();\n        break;\n      }\n      default: {\n        throw new IOException(\n          MessageFormat.format(\"Invalid HTTP POST operation [{0}]\",\n                               op.value()));\n      }\n    }\n    return response;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSServer.java",
          "extendedDetails": {
            "oldValue": "[is-InputStream, uriInfo-UriInfo(annotations-@Context), path-String(annotations-@PathParam(\"path\")), op-OperationParam(annotations-@QueryParam(OperationParam.NAME)), params-Parameters(annotations-@Context)]",
            "newValue": "[is-InputStream, uriInfo-UriInfo(annotations-@Context), path-String(annotations-@PathParam(\"path\")), op-OperationParam(annotations-@QueryParam(OperationParam.NAME)), params-Parameters(annotations-@Context), request-HttpServletRequest(annotations-@Context)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7232. Populate hostname in httpfs audit log (Zoran Dimitrijevic via aw)\n",
          "commitDate": "23/10/14 2:06 PM",
          "commitName": "828429dec1a7fd3bb5aab6f5bd81423cf8fcbc90",
          "commitAuthor": "Allen Wittenauer",
          "commitDateOld": "13/08/14 1:27 PM",
          "commitNameOld": "065d9ec5d93e37b4bbd6fd27cb411dc58b0fb686",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 71.03,
          "commitsBetweenForRepo": 700,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,48 @@\n   public Response post(InputStream is,\n                        @Context UriInfo uriInfo,\n                        @PathParam(\"path\") String path,\n                        @QueryParam(OperationParam.NAME) OperationParam op,\n-                       @Context Parameters params)\n+                       @Context Parameters params,\n+                       @Context HttpServletRequest request)\n     throws IOException, FileSystemAccessException {\n     UserGroupInformation user \u003d HttpUserGroupInformation.get();\n     Response response;\n     path \u003d makeAbsolute(path);\n     MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n+    MDC.put(\"hostname\", request.getRemoteAddr());\n     switch (op.value()) {\n       case APPEND: {\n         Boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n         if (!hasData) {\n           response \u003d Response.temporaryRedirect(\n             createUploadRedirectionURL(uriInfo,\n               HttpFSFileSystem.Operation.APPEND)).build();\n         } else {\n           FSOperations.FSAppend command \u003d\n             new FSOperations.FSAppend(is, path);\n           fsExecute(user, command);\n           AUDIT_LOG.info(\"[{}]\", path);\n           response \u003d Response.ok().type(MediaType.APPLICATION_JSON).build();\n         }\n         break;\n       }\n       case CONCAT: {\n         System.out.println(\"HTTPFS SERVER CONCAT\");\n         String sources \u003d params.get(SourcesParam.NAME, SourcesParam.class);\n \n         FSOperations.FSConcat command \u003d\n             new FSOperations.FSConcat(path, sources.split(\",\"));\n         fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}]\", path);\n         System.out.println(\"SENT RESPONSE\");\n         response \u003d Response.ok().build();\n         break;\n       }\n       default: {\n         throw new IOException(\n           MessageFormat.format(\"Invalid HTTP POST operation [{0}]\",\n                                op.value()));\n       }\n     }\n     return response;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response post(InputStream is,\n                       @Context UriInfo uriInfo,\n                       @PathParam(\"path\") String path,\n                       @QueryParam(OperationParam.NAME) OperationParam op,\n                       @Context Parameters params,\n                       @Context HttpServletRequest request)\n    throws IOException, FileSystemAccessException {\n    UserGroupInformation user \u003d HttpUserGroupInformation.get();\n    Response response;\n    path \u003d makeAbsolute(path);\n    MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n    MDC.put(\"hostname\", request.getRemoteAddr());\n    switch (op.value()) {\n      case APPEND: {\n        Boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n        if (!hasData) {\n          response \u003d Response.temporaryRedirect(\n            createUploadRedirectionURL(uriInfo,\n              HttpFSFileSystem.Operation.APPEND)).build();\n        } else {\n          FSOperations.FSAppend command \u003d\n            new FSOperations.FSAppend(is, path);\n          fsExecute(user, command);\n          AUDIT_LOG.info(\"[{}]\", path);\n          response \u003d Response.ok().type(MediaType.APPLICATION_JSON).build();\n        }\n        break;\n      }\n      case CONCAT: {\n        System.out.println(\"HTTPFS SERVER CONCAT\");\n        String sources \u003d params.get(SourcesParam.NAME, SourcesParam.class);\n\n        FSOperations.FSConcat command \u003d\n            new FSOperations.FSConcat(path, sources.split(\",\"));\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}]\", path);\n        System.out.println(\"SENT RESPONSE\");\n        response \u003d Response.ok().build();\n        break;\n      }\n      default: {\n        throw new IOException(\n          MessageFormat.format(\"Invalid HTTP POST operation [{0}]\",\n                               op.value()));\n      }\n    }\n    return response;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSServer.java",
          "extendedDetails": {}
        }
      ]
    },
    "065d9ec5d93e37b4bbd6fd27cb411dc58b0fb686": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-6849. Replace HttpFS custom proxyuser handling with common implementation. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617831 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/08/14 1:27 PM",
      "commitName": "065d9ec5d93e37b4bbd6fd27cb411dc58b0fb686",
      "commitAuthor": "Alejandro Abdelnur",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6849. Replace HttpFS custom proxyuser handling with common implementation. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617831 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/08/14 1:27 PM",
          "commitName": "065d9ec5d93e37b4bbd6fd27cb411dc58b0fb686",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "24/06/14 8:59 AM",
          "commitNameOld": "46162a213f60f915df76c60b0412f45a021e1e7e",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 50.19,
          "commitsBetweenForRepo": 363,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,46 @@\n   public Response post(InputStream is,\n-                       @Context Principal user,\n                        @Context UriInfo uriInfo,\n                        @PathParam(\"path\") String path,\n                        @QueryParam(OperationParam.NAME) OperationParam op,\n                        @Context Parameters params)\n     throws IOException, FileSystemAccessException {\n+    UserGroupInformation user \u003d HttpUserGroupInformation.get();\n     Response response;\n     path \u003d makeAbsolute(path);\n     MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n     switch (op.value()) {\n       case APPEND: {\n-        String doAs \u003d params.get(DoAsParam.NAME, DoAsParam.class);\n         Boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n         if (!hasData) {\n           response \u003d Response.temporaryRedirect(\n             createUploadRedirectionURL(uriInfo,\n               HttpFSFileSystem.Operation.APPEND)).build();\n         } else {\n           FSOperations.FSAppend command \u003d\n             new FSOperations.FSAppend(is, path);\n-          fsExecute(user, doAs, command);\n+          fsExecute(user, command);\n           AUDIT_LOG.info(\"[{}]\", path);\n           response \u003d Response.ok().type(MediaType.APPLICATION_JSON).build();\n         }\n         break;\n       }\n       case CONCAT: {\n         System.out.println(\"HTTPFS SERVER CONCAT\");\n         String sources \u003d params.get(SourcesParam.NAME, SourcesParam.class);\n \n         FSOperations.FSConcat command \u003d\n             new FSOperations.FSConcat(path, sources.split(\",\"));\n-        fsExecute(user, null, command);\n+        fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}]\", path);\n         System.out.println(\"SENT RESPONSE\");\n         response \u003d Response.ok().build();\n         break;\n       }\n       default: {\n         throw new IOException(\n           MessageFormat.format(\"Invalid HTTP POST operation [{0}]\",\n                                op.value()));\n       }\n     }\n     return response;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response post(InputStream is,\n                       @Context UriInfo uriInfo,\n                       @PathParam(\"path\") String path,\n                       @QueryParam(OperationParam.NAME) OperationParam op,\n                       @Context Parameters params)\n    throws IOException, FileSystemAccessException {\n    UserGroupInformation user \u003d HttpUserGroupInformation.get();\n    Response response;\n    path \u003d makeAbsolute(path);\n    MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n    switch (op.value()) {\n      case APPEND: {\n        Boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n        if (!hasData) {\n          response \u003d Response.temporaryRedirect(\n            createUploadRedirectionURL(uriInfo,\n              HttpFSFileSystem.Operation.APPEND)).build();\n        } else {\n          FSOperations.FSAppend command \u003d\n            new FSOperations.FSAppend(is, path);\n          fsExecute(user, command);\n          AUDIT_LOG.info(\"[{}]\", path);\n          response \u003d Response.ok().type(MediaType.APPLICATION_JSON).build();\n        }\n        break;\n      }\n      case CONCAT: {\n        System.out.println(\"HTTPFS SERVER CONCAT\");\n        String sources \u003d params.get(SourcesParam.NAME, SourcesParam.class);\n\n        FSOperations.FSConcat command \u003d\n            new FSOperations.FSConcat(path, sources.split(\",\"));\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}]\", path);\n        System.out.println(\"SENT RESPONSE\");\n        response \u003d Response.ok().build();\n        break;\n      }\n      default: {\n        throw new IOException(\n          MessageFormat.format(\"Invalid HTTP POST operation [{0}]\",\n                               op.value()));\n      }\n    }\n    return response;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSServer.java",
          "extendedDetails": {
            "oldValue": "[is-InputStream, user-Principal(annotations-@Context), uriInfo-UriInfo(annotations-@Context), path-String(annotations-@PathParam(\"path\")), op-OperationParam(annotations-@QueryParam(OperationParam.NAME)), params-Parameters(annotations-@Context)]",
            "newValue": "[is-InputStream, uriInfo-UriInfo(annotations-@Context), path-String(annotations-@PathParam(\"path\")), op-OperationParam(annotations-@QueryParam(OperationParam.NAME)), params-Parameters(annotations-@Context)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6849. Replace HttpFS custom proxyuser handling with common implementation. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617831 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/08/14 1:27 PM",
          "commitName": "065d9ec5d93e37b4bbd6fd27cb411dc58b0fb686",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "24/06/14 8:59 AM",
          "commitNameOld": "46162a213f60f915df76c60b0412f45a021e1e7e",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 50.19,
          "commitsBetweenForRepo": 363,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,46 @@\n   public Response post(InputStream is,\n-                       @Context Principal user,\n                        @Context UriInfo uriInfo,\n                        @PathParam(\"path\") String path,\n                        @QueryParam(OperationParam.NAME) OperationParam op,\n                        @Context Parameters params)\n     throws IOException, FileSystemAccessException {\n+    UserGroupInformation user \u003d HttpUserGroupInformation.get();\n     Response response;\n     path \u003d makeAbsolute(path);\n     MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n     switch (op.value()) {\n       case APPEND: {\n-        String doAs \u003d params.get(DoAsParam.NAME, DoAsParam.class);\n         Boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n         if (!hasData) {\n           response \u003d Response.temporaryRedirect(\n             createUploadRedirectionURL(uriInfo,\n               HttpFSFileSystem.Operation.APPEND)).build();\n         } else {\n           FSOperations.FSAppend command \u003d\n             new FSOperations.FSAppend(is, path);\n-          fsExecute(user, doAs, command);\n+          fsExecute(user, command);\n           AUDIT_LOG.info(\"[{}]\", path);\n           response \u003d Response.ok().type(MediaType.APPLICATION_JSON).build();\n         }\n         break;\n       }\n       case CONCAT: {\n         System.out.println(\"HTTPFS SERVER CONCAT\");\n         String sources \u003d params.get(SourcesParam.NAME, SourcesParam.class);\n \n         FSOperations.FSConcat command \u003d\n             new FSOperations.FSConcat(path, sources.split(\",\"));\n-        fsExecute(user, null, command);\n+        fsExecute(user, command);\n         AUDIT_LOG.info(\"[{}]\", path);\n         System.out.println(\"SENT RESPONSE\");\n         response \u003d Response.ok().build();\n         break;\n       }\n       default: {\n         throw new IOException(\n           MessageFormat.format(\"Invalid HTTP POST operation [{0}]\",\n                                op.value()));\n       }\n     }\n     return response;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response post(InputStream is,\n                       @Context UriInfo uriInfo,\n                       @PathParam(\"path\") String path,\n                       @QueryParam(OperationParam.NAME) OperationParam op,\n                       @Context Parameters params)\n    throws IOException, FileSystemAccessException {\n    UserGroupInformation user \u003d HttpUserGroupInformation.get();\n    Response response;\n    path \u003d makeAbsolute(path);\n    MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n    switch (op.value()) {\n      case APPEND: {\n        Boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n        if (!hasData) {\n          response \u003d Response.temporaryRedirect(\n            createUploadRedirectionURL(uriInfo,\n              HttpFSFileSystem.Operation.APPEND)).build();\n        } else {\n          FSOperations.FSAppend command \u003d\n            new FSOperations.FSAppend(is, path);\n          fsExecute(user, command);\n          AUDIT_LOG.info(\"[{}]\", path);\n          response \u003d Response.ok().type(MediaType.APPLICATION_JSON).build();\n        }\n        break;\n      }\n      case CONCAT: {\n        System.out.println(\"HTTPFS SERVER CONCAT\");\n        String sources \u003d params.get(SourcesParam.NAME, SourcesParam.class);\n\n        FSOperations.FSConcat command \u003d\n            new FSOperations.FSConcat(path, sources.split(\",\"));\n        fsExecute(user, command);\n        AUDIT_LOG.info(\"[{}]\", path);\n        System.out.println(\"SENT RESPONSE\");\n        response \u003d Response.ok().build();\n        break;\n      }\n      default: {\n        throw new IOException(\n          MessageFormat.format(\"Invalid HTTP POST operation [{0}]\",\n                               op.value()));\n      }\n    }\n    return response;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSServer.java",
          "extendedDetails": {}
        }
      ]
    },
    "bbdae834d2ec26b329b48b4c9343ebb182a63242": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4456. Add concat to HttpFS and WebHDFS REST API docs. (plamenj2003 via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1441603 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/02/13 11:42 AM",
      "commitName": "bbdae834d2ec26b329b48b4c9343ebb182a63242",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "01/08/12 4:14 PM",
      "commitNameOld": "08e89662170010dd619c0df859c670cb37b630dd",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 183.85,
      "commitsBetweenForRepo": 961,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,47 @@\n   public Response post(InputStream is,\n                        @Context Principal user,\n                        @Context UriInfo uriInfo,\n                        @PathParam(\"path\") String path,\n                        @QueryParam(OperationParam.NAME) OperationParam op,\n                        @Context Parameters params)\n     throws IOException, FileSystemAccessException {\n     Response response;\n     path \u003d makeAbsolute(path);\n     MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n-    String doAs \u003d params.get(DoAsParam.NAME, DoAsParam.class);\n     switch (op.value()) {\n       case APPEND: {\n+        String doAs \u003d params.get(DoAsParam.NAME, DoAsParam.class);\n         Boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n         if (!hasData) {\n           response \u003d Response.temporaryRedirect(\n             createUploadRedirectionURL(uriInfo,\n               HttpFSFileSystem.Operation.APPEND)).build();\n         } else {\n           FSOperations.FSAppend command \u003d\n             new FSOperations.FSAppend(is, path);\n           fsExecute(user, doAs, command);\n           AUDIT_LOG.info(\"[{}]\", path);\n           response \u003d Response.ok().type(MediaType.APPLICATION_JSON).build();\n         }\n         break;\n       }\n+      case CONCAT: {\n+        System.out.println(\"HTTPFS SERVER CONCAT\");\n+        String sources \u003d params.get(SourcesParam.NAME, SourcesParam.class);\n+\n+        FSOperations.FSConcat command \u003d\n+            new FSOperations.FSConcat(path, sources.split(\",\"));\n+        fsExecute(user, null, command);\n+        AUDIT_LOG.info(\"[{}]\", path);\n+        System.out.println(\"SENT RESPONSE\");\n+        response \u003d Response.ok().build();\n+        break;\n+      }\n       default: {\n         throw new IOException(\n           MessageFormat.format(\"Invalid HTTP POST operation [{0}]\",\n                                op.value()));\n       }\n     }\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response post(InputStream is,\n                       @Context Principal user,\n                       @Context UriInfo uriInfo,\n                       @PathParam(\"path\") String path,\n                       @QueryParam(OperationParam.NAME) OperationParam op,\n                       @Context Parameters params)\n    throws IOException, FileSystemAccessException {\n    Response response;\n    path \u003d makeAbsolute(path);\n    MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n    switch (op.value()) {\n      case APPEND: {\n        String doAs \u003d params.get(DoAsParam.NAME, DoAsParam.class);\n        Boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n        if (!hasData) {\n          response \u003d Response.temporaryRedirect(\n            createUploadRedirectionURL(uriInfo,\n              HttpFSFileSystem.Operation.APPEND)).build();\n        } else {\n          FSOperations.FSAppend command \u003d\n            new FSOperations.FSAppend(is, path);\n          fsExecute(user, doAs, command);\n          AUDIT_LOG.info(\"[{}]\", path);\n          response \u003d Response.ok().type(MediaType.APPLICATION_JSON).build();\n        }\n        break;\n      }\n      case CONCAT: {\n        System.out.println(\"HTTPFS SERVER CONCAT\");\n        String sources \u003d params.get(SourcesParam.NAME, SourcesParam.class);\n\n        FSOperations.FSConcat command \u003d\n            new FSOperations.FSConcat(path, sources.split(\",\"));\n        fsExecute(user, null, command);\n        AUDIT_LOG.info(\"[{}]\", path);\n        System.out.println(\"SENT RESPONSE\");\n        response \u003d Response.ok().build();\n        break;\n      }\n      default: {\n        throw new IOException(\n          MessageFormat.format(\"Invalid HTTP POST operation [{0}]\",\n                               op.value()));\n      }\n    }\n    return response;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSServer.java",
      "extendedDetails": {}
    },
    "5a8ea48c37da39f4f4879dabce3b640c9294dd73": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3580. incompatible types; no instance(s) of type variable(s) V exist so that V conforms to boolean compiling HttpFSServer.java with OpenJDK (adi2 via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1355593 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/06/12 3:58 PM",
      "commitName": "5a8ea48c37da39f4f4879dabce3b640c9294dd73",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "29/06/12 1:59 PM",
      "commitNameOld": "34605c9594770b204b28a809d8dbc0dae11ff0d1",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n   public Response post(InputStream is,\n                        @Context Principal user,\n                        @Context UriInfo uriInfo,\n                        @PathParam(\"path\") String path,\n                        @QueryParam(OperationParam.NAME) OperationParam op,\n                        @Context Parameters params)\n     throws IOException, FileSystemAccessException {\n     Response response;\n     path \u003d makeAbsolute(path);\n     MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n     String doAs \u003d params.get(DoAsParam.NAME, DoAsParam.class);\n     switch (op.value()) {\n       case APPEND: {\n-        boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n+        Boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n         if (!hasData) {\n           response \u003d Response.temporaryRedirect(\n             createUploadRedirectionURL(uriInfo,\n               HttpFSFileSystem.Operation.APPEND)).build();\n         } else {\n           FSOperations.FSAppend command \u003d\n             new FSOperations.FSAppend(is, path);\n           fsExecute(user, doAs, command);\n           AUDIT_LOG.info(\"[{}]\", path);\n           response \u003d Response.ok().type(MediaType.APPLICATION_JSON).build();\n         }\n         break;\n       }\n       default: {\n         throw new IOException(\n           MessageFormat.format(\"Invalid HTTP POST operation [{0}]\",\n                                op.value()));\n       }\n     }\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response post(InputStream is,\n                       @Context Principal user,\n                       @Context UriInfo uriInfo,\n                       @PathParam(\"path\") String path,\n                       @QueryParam(OperationParam.NAME) OperationParam op,\n                       @Context Parameters params)\n    throws IOException, FileSystemAccessException {\n    Response response;\n    path \u003d makeAbsolute(path);\n    MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n    String doAs \u003d params.get(DoAsParam.NAME, DoAsParam.class);\n    switch (op.value()) {\n      case APPEND: {\n        Boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n        if (!hasData) {\n          response \u003d Response.temporaryRedirect(\n            createUploadRedirectionURL(uriInfo,\n              HttpFSFileSystem.Operation.APPEND)).build();\n        } else {\n          FSOperations.FSAppend command \u003d\n            new FSOperations.FSAppend(is, path);\n          fsExecute(user, doAs, command);\n          AUDIT_LOG.info(\"[{}]\", path);\n          response \u003d Response.ok().type(MediaType.APPLICATION_JSON).build();\n        }\n        break;\n      }\n      default: {\n        throw new IOException(\n          MessageFormat.format(\"Invalid HTTP POST operation [{0}]\",\n                               op.value()));\n      }\n    }\n    return response;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSServer.java",
      "extendedDetails": {}
    },
    "d263653ae22217439d1740c936d1c78e1644d73e": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-3481. Refactor HttpFS handling of JAX-RS query string parameters (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1354599 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/06/12 9:06 AM",
      "commitName": "d263653ae22217439d1740c936d1c78e1644d73e",
      "commitAuthor": "Alejandro Abdelnur",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-3481. Refactor HttpFS handling of JAX-RS query string parameters (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1354599 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "27/06/12 9:06 AM",
          "commitName": "d263653ae22217439d1740c936d1c78e1644d73e",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "24/05/12 9:51 AM",
          "commitNameOld": "e937068c0bc68fc56e5c75ccc6b91fd164acf30d",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 33.97,
          "commitsBetweenForRepo": 136,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,35 @@\n   public Response post(InputStream is,\n                        @Context Principal user,\n                        @Context UriInfo uriInfo,\n-                       @PathParam(\"path\") FsPathParam path,\n-                       @QueryParam(PostOpParam.NAME) PostOpParam op,\n-                       @QueryParam(DataParam.NAME) @DefaultValue(DataParam.DEFAULT) DataParam hasData,\n-                       @QueryParam(DoAsParam.NAME) @DefaultValue(DoAsParam.DEFAULT) DoAsParam doAs)\n+                       @PathParam(\"path\") String path,\n+                       @QueryParam(OperationParam.NAME) OperationParam op,\n+                       @Context Parameters params)\n     throws IOException, FileSystemAccessException {\n-    Response response \u003d null;\n-    if (op \u003d\u003d null) {\n-      throw new UnsupportedOperationException(MessageFormat.format(\"Missing [{0}] parameter\", PostOpParam.NAME));\n-    }\n-    path.makeAbsolute();\n+    Response response;\n+    path \u003d makeAbsolute(path);\n     MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n+    String doAs \u003d params.get(DoAsParam.NAME, DoAsParam.class);\n     switch (op.value()) {\n       case APPEND: {\n-        if (!hasData.value()) {\n+        boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n+        if (!hasData) {\n           response \u003d Response.temporaryRedirect(\n-            createUploadRedirectionURL(uriInfo, HttpFSFileSystem.PostOpValues.APPEND)).build();\n+            createUploadRedirectionURL(uriInfo,\n+              HttpFSFileSystem.Operation.APPEND)).build();\n         } else {\n-          FSOperations.FSAppend command \u003d new FSOperations.FSAppend(is, path.value());\n-          fsExecute(user, doAs.value(), command);\n+          FSOperations.FSAppend command \u003d\n+            new FSOperations.FSAppend(is, path);\n+          fsExecute(user, doAs, command);\n           AUDIT_LOG.info(\"[{}]\", path);\n           response \u003d Response.ok().type(MediaType.APPLICATION_JSON).build();\n         }\n         break;\n       }\n+      default: {\n+        throw new IOException(\n+          MessageFormat.format(\"Invalid HTTP POST operation [{0}]\",\n+                               op.value()));\n+      }\n     }\n     return response;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response post(InputStream is,\n                       @Context Principal user,\n                       @Context UriInfo uriInfo,\n                       @PathParam(\"path\") String path,\n                       @QueryParam(OperationParam.NAME) OperationParam op,\n                       @Context Parameters params)\n    throws IOException, FileSystemAccessException {\n    Response response;\n    path \u003d makeAbsolute(path);\n    MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n    String doAs \u003d params.get(DoAsParam.NAME, DoAsParam.class);\n    switch (op.value()) {\n      case APPEND: {\n        boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n        if (!hasData) {\n          response \u003d Response.temporaryRedirect(\n            createUploadRedirectionURL(uriInfo,\n              HttpFSFileSystem.Operation.APPEND)).build();\n        } else {\n          FSOperations.FSAppend command \u003d\n            new FSOperations.FSAppend(is, path);\n          fsExecute(user, doAs, command);\n          AUDIT_LOG.info(\"[{}]\", path);\n          response \u003d Response.ok().type(MediaType.APPLICATION_JSON).build();\n        }\n        break;\n      }\n      default: {\n        throw new IOException(\n          MessageFormat.format(\"Invalid HTTP POST operation [{0}]\",\n                               op.value()));\n      }\n    }\n    return response;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSServer.java",
          "extendedDetails": {
            "oldValue": "[is-InputStream, user-Principal(annotations-@Context), uriInfo-UriInfo(annotations-@Context), path-FsPathParam(annotations-@PathParam(\"path\")), op-PostOpParam(annotations-@QueryParam(PostOpParam.NAME)), hasData-DataParam(annotations-@QueryParam(DataParam.NAME)-@DefaultValue(DataParam.DEFAULT)), doAs-DoAsParam(annotations-@QueryParam(DoAsParam.NAME)-@DefaultValue(DoAsParam.DEFAULT))]",
            "newValue": "[is-InputStream, user-Principal(annotations-@Context), uriInfo-UriInfo(annotations-@Context), path-String(annotations-@PathParam(\"path\")), op-OperationParam(annotations-@QueryParam(OperationParam.NAME)), params-Parameters(annotations-@Context)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-3481. Refactor HttpFS handling of JAX-RS query string parameters (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1354599 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "27/06/12 9:06 AM",
          "commitName": "d263653ae22217439d1740c936d1c78e1644d73e",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "24/05/12 9:51 AM",
          "commitNameOld": "e937068c0bc68fc56e5c75ccc6b91fd164acf30d",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 33.97,
          "commitsBetweenForRepo": 136,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,35 @@\n   public Response post(InputStream is,\n                        @Context Principal user,\n                        @Context UriInfo uriInfo,\n-                       @PathParam(\"path\") FsPathParam path,\n-                       @QueryParam(PostOpParam.NAME) PostOpParam op,\n-                       @QueryParam(DataParam.NAME) @DefaultValue(DataParam.DEFAULT) DataParam hasData,\n-                       @QueryParam(DoAsParam.NAME) @DefaultValue(DoAsParam.DEFAULT) DoAsParam doAs)\n+                       @PathParam(\"path\") String path,\n+                       @QueryParam(OperationParam.NAME) OperationParam op,\n+                       @Context Parameters params)\n     throws IOException, FileSystemAccessException {\n-    Response response \u003d null;\n-    if (op \u003d\u003d null) {\n-      throw new UnsupportedOperationException(MessageFormat.format(\"Missing [{0}] parameter\", PostOpParam.NAME));\n-    }\n-    path.makeAbsolute();\n+    Response response;\n+    path \u003d makeAbsolute(path);\n     MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n+    String doAs \u003d params.get(DoAsParam.NAME, DoAsParam.class);\n     switch (op.value()) {\n       case APPEND: {\n-        if (!hasData.value()) {\n+        boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n+        if (!hasData) {\n           response \u003d Response.temporaryRedirect(\n-            createUploadRedirectionURL(uriInfo, HttpFSFileSystem.PostOpValues.APPEND)).build();\n+            createUploadRedirectionURL(uriInfo,\n+              HttpFSFileSystem.Operation.APPEND)).build();\n         } else {\n-          FSOperations.FSAppend command \u003d new FSOperations.FSAppend(is, path.value());\n-          fsExecute(user, doAs.value(), command);\n+          FSOperations.FSAppend command \u003d\n+            new FSOperations.FSAppend(is, path);\n+          fsExecute(user, doAs, command);\n           AUDIT_LOG.info(\"[{}]\", path);\n           response \u003d Response.ok().type(MediaType.APPLICATION_JSON).build();\n         }\n         break;\n       }\n+      default: {\n+        throw new IOException(\n+          MessageFormat.format(\"Invalid HTTP POST operation [{0}]\",\n+                               op.value()));\n+      }\n     }\n     return response;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Response post(InputStream is,\n                       @Context Principal user,\n                       @Context UriInfo uriInfo,\n                       @PathParam(\"path\") String path,\n                       @QueryParam(OperationParam.NAME) OperationParam op,\n                       @Context Parameters params)\n    throws IOException, FileSystemAccessException {\n    Response response;\n    path \u003d makeAbsolute(path);\n    MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n    String doAs \u003d params.get(DoAsParam.NAME, DoAsParam.class);\n    switch (op.value()) {\n      case APPEND: {\n        boolean hasData \u003d params.get(DataParam.NAME, DataParam.class);\n        if (!hasData) {\n          response \u003d Response.temporaryRedirect(\n            createUploadRedirectionURL(uriInfo,\n              HttpFSFileSystem.Operation.APPEND)).build();\n        } else {\n          FSOperations.FSAppend command \u003d\n            new FSOperations.FSAppend(is, path);\n          fsExecute(user, doAs, command);\n          AUDIT_LOG.info(\"[{}]\", path);\n          response \u003d Response.ok().type(MediaType.APPLICATION_JSON).build();\n        }\n        break;\n      }\n      default: {\n        throw new IOException(\n          MessageFormat.format(\"Invalid HTTP POST operation [{0}]\",\n                               op.value()));\n      }\n    }\n    return response;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSServer.java",
          "extendedDetails": {}
        }
      ]
    },
    "3334306512b5dc932814fded31a89ba1ee97cd9f": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-2178. Contributing Hoop to HDFS, replacement for HDFS proxy with read/write capabilities. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1212060 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/12/11 11:25 AM",
      "commitName": "3334306512b5dc932814fded31a89ba1ee97cd9f",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,30 @@\n+  public Response post(InputStream is,\n+                       @Context Principal user,\n+                       @Context UriInfo uriInfo,\n+                       @PathParam(\"path\") FsPathParam path,\n+                       @QueryParam(PostOpParam.NAME) PostOpParam op,\n+                       @QueryParam(DataParam.NAME) @DefaultValue(DataParam.DEFAULT) DataParam hasData,\n+                       @QueryParam(DoAsParam.NAME) @DefaultValue(DoAsParam.DEFAULT) DoAsParam doAs)\n+    throws IOException, FileSystemAccessException {\n+    Response response \u003d null;\n+    if (op \u003d\u003d null) {\n+      throw new UnsupportedOperationException(MessageFormat.format(\"Missing [{0}] parameter\", PostOpParam.NAME));\n+    }\n+    path.makeAbsolute();\n+    MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n+    switch (op.value()) {\n+      case APPEND: {\n+        if (!hasData.value()) {\n+          response \u003d Response.temporaryRedirect(\n+            createUploadRedirectionURL(uriInfo, HttpFSFileSystem.PostOpValues.APPEND)).build();\n+        } else {\n+          FSOperations.FSAppend command \u003d new FSOperations.FSAppend(is, path.value());\n+          fsExecute(user, doAs.value(), command);\n+          AUDIT_LOG.info(\"[{}]\", path);\n+          response \u003d Response.ok().type(MediaType.APPLICATION_JSON).build();\n+        }\n+        break;\n+      }\n+    }\n+    return response;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Response post(InputStream is,\n                       @Context Principal user,\n                       @Context UriInfo uriInfo,\n                       @PathParam(\"path\") FsPathParam path,\n                       @QueryParam(PostOpParam.NAME) PostOpParam op,\n                       @QueryParam(DataParam.NAME) @DefaultValue(DataParam.DEFAULT) DataParam hasData,\n                       @QueryParam(DoAsParam.NAME) @DefaultValue(DoAsParam.DEFAULT) DoAsParam doAs)\n    throws IOException, FileSystemAccessException {\n    Response response \u003d null;\n    if (op \u003d\u003d null) {\n      throw new UnsupportedOperationException(MessageFormat.format(\"Missing [{0}] parameter\", PostOpParam.NAME));\n    }\n    path.makeAbsolute();\n    MDC.put(HttpFSFileSystem.OP_PARAM, op.value().name());\n    switch (op.value()) {\n      case APPEND: {\n        if (!hasData.value()) {\n          response \u003d Response.temporaryRedirect(\n            createUploadRedirectionURL(uriInfo, HttpFSFileSystem.PostOpValues.APPEND)).build();\n        } else {\n          FSOperations.FSAppend command \u003d new FSOperations.FSAppend(is, path.value());\n          fsExecute(user, doAs.value(), command);\n          AUDIT_LOG.info(\"[{}]\", path);\n          response \u003d Response.ok().type(MediaType.APPLICATION_JSON).build();\n        }\n        break;\n      }\n    }\n    return response;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSServer.java"
    }
  }
}