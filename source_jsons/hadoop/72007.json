{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "KerberosAuthenticationHandler.java",
  "functionName": "init",
  "functionId": "init___config-Properties",
  "sourceFilePath": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/KerberosAuthenticationHandler.java",
  "functionStartLine": 144,
  "functionEndLine": 217,
  "numCommitsSeen": 23,
  "timeTaken": 2986,
  "changeHistory": [
    "55cc115878d029869be3e622e8792c9ad9f64982",
    "d43af8b3db4743b4b240751b6f29de6c20cfd6e5",
    "e806c6e0ce6026d53227b51d58ec6d5458164571",
    "f5e0bd30fde654ed48fe73e5c0523030365385a4",
    "4c38f11cec0664b70e52f9563052dca8fb17c33f",
    "c04a4b42274362560c019c3169a582e546864abf",
    "47f03bc9fe9c8c94a567d29765cef2266f2993d0",
    "58361d3f34a3598b55944c37623052cbb0d1659d",
    "2ce817aecf38c5e8aafbd7e2b5da08f01b2d50e6",
    "a90f8fb50fc0f24d2e9481651b7c14c90ad7e861",
    "2b016dac8232e0f5c43293adcbdf7164f5fca74c",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "a0f120ce68dddb0cb31b64c89f3224313f3cb5af"
  ],
  "changeHistoryShort": {
    "55cc115878d029869be3e622e8792c9ad9f64982": "Ybodychange",
    "d43af8b3db4743b4b240751b6f29de6c20cfd6e5": "Ybodychange",
    "e806c6e0ce6026d53227b51d58ec6d5458164571": "Ybodychange",
    "f5e0bd30fde654ed48fe73e5c0523030365385a4": "Ybodychange",
    "4c38f11cec0664b70e52f9563052dca8fb17c33f": "Ybodychange",
    "c04a4b42274362560c019c3169a582e546864abf": "Ybodychange",
    "47f03bc9fe9c8c94a567d29765cef2266f2993d0": "Ybodychange",
    "58361d3f34a3598b55944c37623052cbb0d1659d": "Ybodychange",
    "2ce817aecf38c5e8aafbd7e2b5da08f01b2d50e6": "Ybodychange",
    "a90f8fb50fc0f24d2e9481651b7c14c90ad7e861": "Ybodychange",
    "2b016dac8232e0f5c43293adcbdf7164f5fca74c": "Yfilerename",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "a0f120ce68dddb0cb31b64c89f3224313f3cb5af": "Yintroduced"
  },
  "changeHistoryDetails": {
    "55cc115878d029869be3e622e8792c9ad9f64982": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16527. Add a whitelist of endpoints to skip Kerberos authentication (#1336) Contributed by Akira Ajisaka.\n\n",
      "commitDate": "27/08/19 10:28 PM",
      "commitName": "55cc115878d029869be3e622e8792c9ad9f64982",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "04/01/19 2:54 PM",
      "commitNameOld": "d43af8b3db4743b4b240751b6f29de6c20cfd6e5",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 235.27,
      "commitsBetweenForRepo": 1807,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,74 @@\n   public void init(Properties config) throws ServletException {\n     try {\n       String principal \u003d config.getProperty(PRINCIPAL);\n       if (principal \u003d\u003d null || principal.trim().length() \u003d\u003d 0) {\n         throw new ServletException(\"Principal not defined in configuration\");\n       }\n       keytab \u003d config.getProperty(KEYTAB, keytab);\n       if (keytab \u003d\u003d null || keytab.trim().length() \u003d\u003d 0) {\n         throw new ServletException(\"Keytab not defined in configuration\");\n       }\n       File keytabFile \u003d new File(keytab);\n       if (!keytabFile.exists()) {\n         throw new ServletException(\"Keytab does not exist: \" + keytab);\n       }\n       \n       // use all SPNEGO principals in the keytab if a principal isn\u0027t\n       // specifically configured\n       final String[] spnegoPrincipals;\n       if (principal.equals(\"*\")) {\n         spnegoPrincipals \u003d KerberosUtil.getPrincipalNames(\n             keytab, Pattern.compile(\"HTTP/.*\"));\n         if (spnegoPrincipals.length \u003d\u003d 0) {\n           throw new ServletException(\"Principals do not exist in the keytab\");\n         }\n       } else {\n         spnegoPrincipals \u003d new String[]{principal};\n       }\n       KeyTab keytabInstance \u003d KeyTab.getInstance(keytabFile);\n       serverSubject.getPrivateCredentials().add(keytabInstance);\n       for (String spnegoPrincipal : spnegoPrincipals) {\n         Principal krbPrincipal \u003d new KerberosPrincipal(spnegoPrincipal);\n         LOG.info(\"Using keytab {}, for principal {}\",\n             keytab, krbPrincipal);\n         serverSubject.getPrincipals().add(krbPrincipal);\n       }\n       String nameRules \u003d config.getProperty(NAME_RULES, null);\n       if (nameRules !\u003d null) {\n         KerberosName.setRules(nameRules);\n       }\n       String ruleMechanism \u003d config.getProperty(RULE_MECHANISM, null);\n       if (ruleMechanism !\u003d null) {\n         KerberosName.setRuleMechanism(ruleMechanism);\n       }\n+\n+      final String whitelistStr \u003d config.getProperty(ENDPOINT_WHITELIST, null);\n+      if (whitelistStr !\u003d null) {\n+        final String[] strs \u003d whitelistStr.trim().split(\"\\\\s*[,\\n]\\\\s*\");\n+        for (String s: strs) {\n+          if (s.isEmpty()) continue;\n+          if (ENDPOINT_PATTERN.matcher(s).matches()) {\n+            whitelist.add(s);\n+          } else {\n+            throw new ServletException(\n+                \"The element of the whitelist: \" + s + \" must start with \u0027/\u0027\"\n+                    + \" and must not contain special characters afterwards\");\n+          }\n+        }\n+      }\n+\n       try {\n         gssManager \u003d Subject.doAs(serverSubject,\n             new PrivilegedExceptionAction\u003cGSSManager\u003e() {\n               @Override\n               public GSSManager run() throws Exception {\n                 return GSSManager.getInstance();\n               }\n             });\n       } catch (PrivilegedActionException ex) {\n         throw ex.getException();\n       }\n     } catch (Exception ex) {\n       throw new ServletException(ex);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Properties config) throws ServletException {\n    try {\n      String principal \u003d config.getProperty(PRINCIPAL);\n      if (principal \u003d\u003d null || principal.trim().length() \u003d\u003d 0) {\n        throw new ServletException(\"Principal not defined in configuration\");\n      }\n      keytab \u003d config.getProperty(KEYTAB, keytab);\n      if (keytab \u003d\u003d null || keytab.trim().length() \u003d\u003d 0) {\n        throw new ServletException(\"Keytab not defined in configuration\");\n      }\n      File keytabFile \u003d new File(keytab);\n      if (!keytabFile.exists()) {\n        throw new ServletException(\"Keytab does not exist: \" + keytab);\n      }\n      \n      // use all SPNEGO principals in the keytab if a principal isn\u0027t\n      // specifically configured\n      final String[] spnegoPrincipals;\n      if (principal.equals(\"*\")) {\n        spnegoPrincipals \u003d KerberosUtil.getPrincipalNames(\n            keytab, Pattern.compile(\"HTTP/.*\"));\n        if (spnegoPrincipals.length \u003d\u003d 0) {\n          throw new ServletException(\"Principals do not exist in the keytab\");\n        }\n      } else {\n        spnegoPrincipals \u003d new String[]{principal};\n      }\n      KeyTab keytabInstance \u003d KeyTab.getInstance(keytabFile);\n      serverSubject.getPrivateCredentials().add(keytabInstance);\n      for (String spnegoPrincipal : spnegoPrincipals) {\n        Principal krbPrincipal \u003d new KerberosPrincipal(spnegoPrincipal);\n        LOG.info(\"Using keytab {}, for principal {}\",\n            keytab, krbPrincipal);\n        serverSubject.getPrincipals().add(krbPrincipal);\n      }\n      String nameRules \u003d config.getProperty(NAME_RULES, null);\n      if (nameRules !\u003d null) {\n        KerberosName.setRules(nameRules);\n      }\n      String ruleMechanism \u003d config.getProperty(RULE_MECHANISM, null);\n      if (ruleMechanism !\u003d null) {\n        KerberosName.setRuleMechanism(ruleMechanism);\n      }\n\n      final String whitelistStr \u003d config.getProperty(ENDPOINT_WHITELIST, null);\n      if (whitelistStr !\u003d null) {\n        final String[] strs \u003d whitelistStr.trim().split(\"\\\\s*[,\\n]\\\\s*\");\n        for (String s: strs) {\n          if (s.isEmpty()) continue;\n          if (ENDPOINT_PATTERN.matcher(s).matches()) {\n            whitelist.add(s);\n          } else {\n            throw new ServletException(\n                \"The element of the whitelist: \" + s + \" must start with \u0027/\u0027\"\n                    + \" and must not contain special characters afterwards\");\n          }\n        }\n      }\n\n      try {\n        gssManager \u003d Subject.doAs(serverSubject,\n            new PrivilegedExceptionAction\u003cGSSManager\u003e() {\n              @Override\n              public GSSManager run() throws Exception {\n                return GSSManager.getInstance();\n              }\n            });\n      } catch (PrivilegedActionException ex) {\n        throw ex.getException();\n      }\n    } catch (Exception ex) {\n      throw new ServletException(ex);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/KerberosAuthenticationHandler.java",
      "extendedDetails": {}
    },
    "d43af8b3db4743b4b240751b6f29de6c20cfd6e5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15996.  Improved Kerberos username mapping strategy in Hadoop.\n               Contributed by Bolke de Bruin\n",
      "commitDate": "04/01/19 2:54 PM",
      "commitName": "d43af8b3db4743b4b240751b6f29de6c20cfd6e5",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "21/06/17 9:03 AM",
      "commitNameOld": "e806c6e0ce6026d53227b51d58ec6d5458164571",
      "commitAuthorOld": "Daryn Sharp",
      "daysBetweenCommits": 562.29,
      "commitsBetweenForRepo": 4776,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,58 @@\n   public void init(Properties config) throws ServletException {\n     try {\n       String principal \u003d config.getProperty(PRINCIPAL);\n       if (principal \u003d\u003d null || principal.trim().length() \u003d\u003d 0) {\n         throw new ServletException(\"Principal not defined in configuration\");\n       }\n       keytab \u003d config.getProperty(KEYTAB, keytab);\n       if (keytab \u003d\u003d null || keytab.trim().length() \u003d\u003d 0) {\n         throw new ServletException(\"Keytab not defined in configuration\");\n       }\n       File keytabFile \u003d new File(keytab);\n       if (!keytabFile.exists()) {\n         throw new ServletException(\"Keytab does not exist: \" + keytab);\n       }\n       \n       // use all SPNEGO principals in the keytab if a principal isn\u0027t\n       // specifically configured\n       final String[] spnegoPrincipals;\n       if (principal.equals(\"*\")) {\n         spnegoPrincipals \u003d KerberosUtil.getPrincipalNames(\n             keytab, Pattern.compile(\"HTTP/.*\"));\n         if (spnegoPrincipals.length \u003d\u003d 0) {\n           throw new ServletException(\"Principals do not exist in the keytab\");\n         }\n       } else {\n         spnegoPrincipals \u003d new String[]{principal};\n       }\n       KeyTab keytabInstance \u003d KeyTab.getInstance(keytabFile);\n       serverSubject.getPrivateCredentials().add(keytabInstance);\n       for (String spnegoPrincipal : spnegoPrincipals) {\n         Principal krbPrincipal \u003d new KerberosPrincipal(spnegoPrincipal);\n         LOG.info(\"Using keytab {}, for principal {}\",\n             keytab, krbPrincipal);\n         serverSubject.getPrincipals().add(krbPrincipal);\n       }\n       String nameRules \u003d config.getProperty(NAME_RULES, null);\n       if (nameRules !\u003d null) {\n         KerberosName.setRules(nameRules);\n       }\n-\n+      String ruleMechanism \u003d config.getProperty(RULE_MECHANISM, null);\n+      if (ruleMechanism !\u003d null) {\n+        KerberosName.setRuleMechanism(ruleMechanism);\n+      }\n       try {\n         gssManager \u003d Subject.doAs(serverSubject,\n             new PrivilegedExceptionAction\u003cGSSManager\u003e() {\n               @Override\n               public GSSManager run() throws Exception {\n                 return GSSManager.getInstance();\n               }\n             });\n       } catch (PrivilegedActionException ex) {\n         throw ex.getException();\n       }\n     } catch (Exception ex) {\n       throw new ServletException(ex);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Properties config) throws ServletException {\n    try {\n      String principal \u003d config.getProperty(PRINCIPAL);\n      if (principal \u003d\u003d null || principal.trim().length() \u003d\u003d 0) {\n        throw new ServletException(\"Principal not defined in configuration\");\n      }\n      keytab \u003d config.getProperty(KEYTAB, keytab);\n      if (keytab \u003d\u003d null || keytab.trim().length() \u003d\u003d 0) {\n        throw new ServletException(\"Keytab not defined in configuration\");\n      }\n      File keytabFile \u003d new File(keytab);\n      if (!keytabFile.exists()) {\n        throw new ServletException(\"Keytab does not exist: \" + keytab);\n      }\n      \n      // use all SPNEGO principals in the keytab if a principal isn\u0027t\n      // specifically configured\n      final String[] spnegoPrincipals;\n      if (principal.equals(\"*\")) {\n        spnegoPrincipals \u003d KerberosUtil.getPrincipalNames(\n            keytab, Pattern.compile(\"HTTP/.*\"));\n        if (spnegoPrincipals.length \u003d\u003d 0) {\n          throw new ServletException(\"Principals do not exist in the keytab\");\n        }\n      } else {\n        spnegoPrincipals \u003d new String[]{principal};\n      }\n      KeyTab keytabInstance \u003d KeyTab.getInstance(keytabFile);\n      serverSubject.getPrivateCredentials().add(keytabInstance);\n      for (String spnegoPrincipal : spnegoPrincipals) {\n        Principal krbPrincipal \u003d new KerberosPrincipal(spnegoPrincipal);\n        LOG.info(\"Using keytab {}, for principal {}\",\n            keytab, krbPrincipal);\n        serverSubject.getPrincipals().add(krbPrincipal);\n      }\n      String nameRules \u003d config.getProperty(NAME_RULES, null);\n      if (nameRules !\u003d null) {\n        KerberosName.setRules(nameRules);\n      }\n      String ruleMechanism \u003d config.getProperty(RULE_MECHANISM, null);\n      if (ruleMechanism !\u003d null) {\n        KerberosName.setRuleMechanism(ruleMechanism);\n      }\n      try {\n        gssManager \u003d Subject.doAs(serverSubject,\n            new PrivilegedExceptionAction\u003cGSSManager\u003e() {\n              @Override\n              public GSSManager run() throws Exception {\n                return GSSManager.getInstance();\n              }\n            });\n      } catch (PrivilegedActionException ex) {\n        throw ex.getException();\n      }\n    } catch (Exception ex) {\n      throw new ServletException(ex);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/KerberosAuthenticationHandler.java",
      "extendedDetails": {}
    },
    "e806c6e0ce6026d53227b51d58ec6d5458164571": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14146.  KerberosAuthenticationHandler should authenticate with SPN in AP-REQ.  Contributed by Daryn Sharp\n",
      "commitDate": "21/06/17 9:03 AM",
      "commitName": "e806c6e0ce6026d53227b51d58ec6d5458164571",
      "commitAuthor": "Daryn Sharp",
      "commitDateOld": "14/12/16 1:45 PM",
      "commitNameOld": "f5e0bd30fde654ed48fe73e5c0523030365385a4",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 188.76,
      "commitsBetweenForRepo": 981,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,74 +1,55 @@\n   public void init(Properties config) throws ServletException {\n     try {\n       String principal \u003d config.getProperty(PRINCIPAL);\n       if (principal \u003d\u003d null || principal.trim().length() \u003d\u003d 0) {\n         throw new ServletException(\"Principal not defined in configuration\");\n       }\n       keytab \u003d config.getProperty(KEYTAB, keytab);\n       if (keytab \u003d\u003d null || keytab.trim().length() \u003d\u003d 0) {\n         throw new ServletException(\"Keytab not defined in configuration\");\n       }\n-      if (!new File(keytab).exists()) {\n+      File keytabFile \u003d new File(keytab);\n+      if (!keytabFile.exists()) {\n         throw new ServletException(\"Keytab does not exist: \" + keytab);\n       }\n       \n       // use all SPNEGO principals in the keytab if a principal isn\u0027t\n       // specifically configured\n       final String[] spnegoPrincipals;\n       if (principal.equals(\"*\")) {\n         spnegoPrincipals \u003d KerberosUtil.getPrincipalNames(\n             keytab, Pattern.compile(\"HTTP/.*\"));\n         if (spnegoPrincipals.length \u003d\u003d 0) {\n           throw new ServletException(\"Principals do not exist in the keytab\");\n         }\n       } else {\n         spnegoPrincipals \u003d new String[]{principal};\n       }\n-\n+      KeyTab keytabInstance \u003d KeyTab.getInstance(keytabFile);\n+      serverSubject.getPrivateCredentials().add(keytabInstance);\n+      for (String spnegoPrincipal : spnegoPrincipals) {\n+        Principal krbPrincipal \u003d new KerberosPrincipal(spnegoPrincipal);\n+        LOG.info(\"Using keytab {}, for principal {}\",\n+            keytab, krbPrincipal);\n+        serverSubject.getPrincipals().add(krbPrincipal);\n+      }\n       String nameRules \u003d config.getProperty(NAME_RULES, null);\n       if (nameRules !\u003d null) {\n         KerberosName.setRules(nameRules);\n       }\n-      \n-      for (String spnegoPrincipal : spnegoPrincipals) {\n-        LOG.info(\"Login using keytab {}, for principal {}\",\n-            keytab, spnegoPrincipal);\n-        final KerberosConfiguration kerberosConfiguration \u003d\n-            new KerberosConfiguration(keytab, spnegoPrincipal);\n-        final LoginContext loginContext \u003d\n-            new LoginContext(\"\", serverSubject, null, kerberosConfiguration);\n-        try {\n-          loginContext.login();\n-        } catch (LoginException le) {\n-          LOG.warn(\"Failed to login as [{}]\", spnegoPrincipal, le);\n-          throw new AuthenticationException(le);          \n-        }\n-        loginContexts.add(loginContext);\n-        KerberosName kerbName \u003d new KerberosName(spnegoPrincipal);\n-        if (kerbName.getHostName() !\u003d null\n-            \u0026\u0026 kerbName.getServiceName() !\u003d null\n-            \u0026\u0026 kerbName.getServiceName().equals(\"HTTP\")) {\n-          boolean added \u003d serverPrincipalMap.put(kerbName.getHostName(),\n-              spnegoPrincipal);\n-          LOG.info(\"Map server: {} to principal: [{}], added \u003d {}\",\n-              kerbName.getHostName(), spnegoPrincipal, added);\n-        } else {\n-          LOG.warn(\"HTTP principal: [{}] is invalid for SPNEGO!\",\n-              spnegoPrincipal);\n-        }\n-      }\n+\n       try {\n         gssManager \u003d Subject.doAs(serverSubject,\n             new PrivilegedExceptionAction\u003cGSSManager\u003e() {\n               @Override\n               public GSSManager run() throws Exception {\n                 return GSSManager.getInstance();\n               }\n             });\n       } catch (PrivilegedActionException ex) {\n         throw ex.getException();\n       }\n     } catch (Exception ex) {\n       throw new ServletException(ex);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Properties config) throws ServletException {\n    try {\n      String principal \u003d config.getProperty(PRINCIPAL);\n      if (principal \u003d\u003d null || principal.trim().length() \u003d\u003d 0) {\n        throw new ServletException(\"Principal not defined in configuration\");\n      }\n      keytab \u003d config.getProperty(KEYTAB, keytab);\n      if (keytab \u003d\u003d null || keytab.trim().length() \u003d\u003d 0) {\n        throw new ServletException(\"Keytab not defined in configuration\");\n      }\n      File keytabFile \u003d new File(keytab);\n      if (!keytabFile.exists()) {\n        throw new ServletException(\"Keytab does not exist: \" + keytab);\n      }\n      \n      // use all SPNEGO principals in the keytab if a principal isn\u0027t\n      // specifically configured\n      final String[] spnegoPrincipals;\n      if (principal.equals(\"*\")) {\n        spnegoPrincipals \u003d KerberosUtil.getPrincipalNames(\n            keytab, Pattern.compile(\"HTTP/.*\"));\n        if (spnegoPrincipals.length \u003d\u003d 0) {\n          throw new ServletException(\"Principals do not exist in the keytab\");\n        }\n      } else {\n        spnegoPrincipals \u003d new String[]{principal};\n      }\n      KeyTab keytabInstance \u003d KeyTab.getInstance(keytabFile);\n      serverSubject.getPrivateCredentials().add(keytabInstance);\n      for (String spnegoPrincipal : spnegoPrincipals) {\n        Principal krbPrincipal \u003d new KerberosPrincipal(spnegoPrincipal);\n        LOG.info(\"Using keytab {}, for principal {}\",\n            keytab, krbPrincipal);\n        serverSubject.getPrincipals().add(krbPrincipal);\n      }\n      String nameRules \u003d config.getProperty(NAME_RULES, null);\n      if (nameRules !\u003d null) {\n        KerberosName.setRules(nameRules);\n      }\n\n      try {\n        gssManager \u003d Subject.doAs(serverSubject,\n            new PrivilegedExceptionAction\u003cGSSManager\u003e() {\n              @Override\n              public GSSManager run() throws Exception {\n                return GSSManager.getInstance();\n              }\n            });\n      } catch (PrivilegedActionException ex) {\n        throw ex.getException();\n      }\n    } catch (Exception ex) {\n      throw new ServletException(ex);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/KerberosAuthenticationHandler.java",
      "extendedDetails": {}
    },
    "f5e0bd30fde654ed48fe73e5c0523030365385a4": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13890. Maintain HTTP/host as SPNEGO SPN support and fix KerberosName parsing. Contributed by Xiaoyu Yao.\n",
      "commitDate": "14/12/16 1:45 PM",
      "commitName": "f5e0bd30fde654ed48fe73e5c0523030365385a4",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "09/12/16 9:27 PM",
      "commitNameOld": "4c38f11cec0664b70e52f9563052dca8fb17c33f",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 4.68,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,74 +1,74 @@\n   public void init(Properties config) throws ServletException {\n     try {\n       String principal \u003d config.getProperty(PRINCIPAL);\n       if (principal \u003d\u003d null || principal.trim().length() \u003d\u003d 0) {\n         throw new ServletException(\"Principal not defined in configuration\");\n       }\n       keytab \u003d config.getProperty(KEYTAB, keytab);\n       if (keytab \u003d\u003d null || keytab.trim().length() \u003d\u003d 0) {\n         throw new ServletException(\"Keytab not defined in configuration\");\n       }\n       if (!new File(keytab).exists()) {\n         throw new ServletException(\"Keytab does not exist: \" + keytab);\n       }\n       \n       // use all SPNEGO principals in the keytab if a principal isn\u0027t\n       // specifically configured\n       final String[] spnegoPrincipals;\n       if (principal.equals(\"*\")) {\n         spnegoPrincipals \u003d KerberosUtil.getPrincipalNames(\n             keytab, Pattern.compile(\"HTTP/.*\"));\n         if (spnegoPrincipals.length \u003d\u003d 0) {\n           throw new ServletException(\"Principals do not exist in the keytab\");\n         }\n       } else {\n         spnegoPrincipals \u003d new String[]{principal};\n       }\n \n       String nameRules \u003d config.getProperty(NAME_RULES, null);\n       if (nameRules !\u003d null) {\n         KerberosName.setRules(nameRules);\n       }\n       \n       for (String spnegoPrincipal : spnegoPrincipals) {\n         LOG.info(\"Login using keytab {}, for principal {}\",\n             keytab, spnegoPrincipal);\n         final KerberosConfiguration kerberosConfiguration \u003d\n             new KerberosConfiguration(keytab, spnegoPrincipal);\n         final LoginContext loginContext \u003d\n             new LoginContext(\"\", serverSubject, null, kerberosConfiguration);\n         try {\n           loginContext.login();\n         } catch (LoginException le) {\n           LOG.warn(\"Failed to login as [{}]\", spnegoPrincipal, le);\n           throw new AuthenticationException(le);          \n         }\n         loginContexts.add(loginContext);\n         KerberosName kerbName \u003d new KerberosName(spnegoPrincipal);\n         if (kerbName.getHostName() !\u003d null\n-            \u0026\u0026 kerbName.getRealm() !\u003d null\n             \u0026\u0026 kerbName.getServiceName() !\u003d null\n             \u0026\u0026 kerbName.getServiceName().equals(\"HTTP\")) {\n-          LOG.trace(\"Map server: {} to principal: {}\", kerbName.getHostName(),\n+          boolean added \u003d serverPrincipalMap.put(kerbName.getHostName(),\n               spnegoPrincipal);\n-          serverPrincipalMap.put(kerbName.getHostName(), spnegoPrincipal);\n+          LOG.info(\"Map server: {} to principal: [{}], added \u003d {}\",\n+              kerbName.getHostName(), spnegoPrincipal, added);\n         } else {\n-          LOG.warn(\"HTTP principal: {} is invalid for SPNEGO!\",\n+          LOG.warn(\"HTTP principal: [{}] is invalid for SPNEGO!\",\n               spnegoPrincipal);\n         }\n       }\n       try {\n         gssManager \u003d Subject.doAs(serverSubject,\n             new PrivilegedExceptionAction\u003cGSSManager\u003e() {\n               @Override\n               public GSSManager run() throws Exception {\n                 return GSSManager.getInstance();\n               }\n             });\n       } catch (PrivilegedActionException ex) {\n         throw ex.getException();\n       }\n     } catch (Exception ex) {\n       throw new ServletException(ex);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Properties config) throws ServletException {\n    try {\n      String principal \u003d config.getProperty(PRINCIPAL);\n      if (principal \u003d\u003d null || principal.trim().length() \u003d\u003d 0) {\n        throw new ServletException(\"Principal not defined in configuration\");\n      }\n      keytab \u003d config.getProperty(KEYTAB, keytab);\n      if (keytab \u003d\u003d null || keytab.trim().length() \u003d\u003d 0) {\n        throw new ServletException(\"Keytab not defined in configuration\");\n      }\n      if (!new File(keytab).exists()) {\n        throw new ServletException(\"Keytab does not exist: \" + keytab);\n      }\n      \n      // use all SPNEGO principals in the keytab if a principal isn\u0027t\n      // specifically configured\n      final String[] spnegoPrincipals;\n      if (principal.equals(\"*\")) {\n        spnegoPrincipals \u003d KerberosUtil.getPrincipalNames(\n            keytab, Pattern.compile(\"HTTP/.*\"));\n        if (spnegoPrincipals.length \u003d\u003d 0) {\n          throw new ServletException(\"Principals do not exist in the keytab\");\n        }\n      } else {\n        spnegoPrincipals \u003d new String[]{principal};\n      }\n\n      String nameRules \u003d config.getProperty(NAME_RULES, null);\n      if (nameRules !\u003d null) {\n        KerberosName.setRules(nameRules);\n      }\n      \n      for (String spnegoPrincipal : spnegoPrincipals) {\n        LOG.info(\"Login using keytab {}, for principal {}\",\n            keytab, spnegoPrincipal);\n        final KerberosConfiguration kerberosConfiguration \u003d\n            new KerberosConfiguration(keytab, spnegoPrincipal);\n        final LoginContext loginContext \u003d\n            new LoginContext(\"\", serverSubject, null, kerberosConfiguration);\n        try {\n          loginContext.login();\n        } catch (LoginException le) {\n          LOG.warn(\"Failed to login as [{}]\", spnegoPrincipal, le);\n          throw new AuthenticationException(le);          \n        }\n        loginContexts.add(loginContext);\n        KerberosName kerbName \u003d new KerberosName(spnegoPrincipal);\n        if (kerbName.getHostName() !\u003d null\n            \u0026\u0026 kerbName.getServiceName() !\u003d null\n            \u0026\u0026 kerbName.getServiceName().equals(\"HTTP\")) {\n          boolean added \u003d serverPrincipalMap.put(kerbName.getHostName(),\n              spnegoPrincipal);\n          LOG.info(\"Map server: {} to principal: [{}], added \u003d {}\",\n              kerbName.getHostName(), spnegoPrincipal, added);\n        } else {\n          LOG.warn(\"HTTP principal: [{}] is invalid for SPNEGO!\",\n              spnegoPrincipal);\n        }\n      }\n      try {\n        gssManager \u003d Subject.doAs(serverSubject,\n            new PrivilegedExceptionAction\u003cGSSManager\u003e() {\n              @Override\n              public GSSManager run() throws Exception {\n                return GSSManager.getInstance();\n              }\n            });\n      } catch (PrivilegedActionException ex) {\n        throw ex.getException();\n      }\n    } catch (Exception ex) {\n      throw new ServletException(ex);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/KerberosAuthenticationHandler.java",
      "extendedDetails": {}
    },
    "4c38f11cec0664b70e52f9563052dca8fb17c33f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13565. KerberosAuthenticationHandler#authenticate should not rebuild SPN based on client request. Contributed by Xiaoyu Yao.\n",
      "commitDate": "09/12/16 9:27 PM",
      "commitName": "4c38f11cec0664b70e52f9563052dca8fb17c33f",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "04/11/16 4:02 PM",
      "commitNameOld": "95665a6eea32ff7134ea556db4dd4ae068364fc0",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 35.27,
      "commitsBetweenForRepo": 262,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,74 @@\n   public void init(Properties config) throws ServletException {\n     try {\n       String principal \u003d config.getProperty(PRINCIPAL);\n       if (principal \u003d\u003d null || principal.trim().length() \u003d\u003d 0) {\n         throw new ServletException(\"Principal not defined in configuration\");\n       }\n       keytab \u003d config.getProperty(KEYTAB, keytab);\n       if (keytab \u003d\u003d null || keytab.trim().length() \u003d\u003d 0) {\n         throw new ServletException(\"Keytab not defined in configuration\");\n       }\n       if (!new File(keytab).exists()) {\n         throw new ServletException(\"Keytab does not exist: \" + keytab);\n       }\n       \n       // use all SPNEGO principals in the keytab if a principal isn\u0027t\n       // specifically configured\n       final String[] spnegoPrincipals;\n       if (principal.equals(\"*\")) {\n         spnegoPrincipals \u003d KerberosUtil.getPrincipalNames(\n             keytab, Pattern.compile(\"HTTP/.*\"));\n         if (spnegoPrincipals.length \u003d\u003d 0) {\n           throw new ServletException(\"Principals do not exist in the keytab\");\n         }\n       } else {\n         spnegoPrincipals \u003d new String[]{principal};\n       }\n \n       String nameRules \u003d config.getProperty(NAME_RULES, null);\n       if (nameRules !\u003d null) {\n         KerberosName.setRules(nameRules);\n       }\n       \n       for (String spnegoPrincipal : spnegoPrincipals) {\n         LOG.info(\"Login using keytab {}, for principal {}\",\n             keytab, spnegoPrincipal);\n         final KerberosConfiguration kerberosConfiguration \u003d\n             new KerberosConfiguration(keytab, spnegoPrincipal);\n         final LoginContext loginContext \u003d\n             new LoginContext(\"\", serverSubject, null, kerberosConfiguration);\n         try {\n           loginContext.login();\n         } catch (LoginException le) {\n           LOG.warn(\"Failed to login as [{}]\", spnegoPrincipal, le);\n           throw new AuthenticationException(le);          \n         }\n         loginContexts.add(loginContext);\n+        KerberosName kerbName \u003d new KerberosName(spnegoPrincipal);\n+        if (kerbName.getHostName() !\u003d null\n+            \u0026\u0026 kerbName.getRealm() !\u003d null\n+            \u0026\u0026 kerbName.getServiceName() !\u003d null\n+            \u0026\u0026 kerbName.getServiceName().equals(\"HTTP\")) {\n+          LOG.trace(\"Map server: {} to principal: {}\", kerbName.getHostName(),\n+              spnegoPrincipal);\n+          serverPrincipalMap.put(kerbName.getHostName(), spnegoPrincipal);\n+        } else {\n+          LOG.warn(\"HTTP principal: {} is invalid for SPNEGO!\",\n+              spnegoPrincipal);\n+        }\n       }\n       try {\n-        gssManager \u003d Subject.doAs(serverSubject, new PrivilegedExceptionAction\u003cGSSManager\u003e() {\n-\n-          @Override\n-          public GSSManager run() throws Exception {\n-            return GSSManager.getInstance();\n-          }\n-        });\n+        gssManager \u003d Subject.doAs(serverSubject,\n+            new PrivilegedExceptionAction\u003cGSSManager\u003e() {\n+              @Override\n+              public GSSManager run() throws Exception {\n+                return GSSManager.getInstance();\n+              }\n+            });\n       } catch (PrivilegedActionException ex) {\n         throw ex.getException();\n       }\n     } catch (Exception ex) {\n       throw new ServletException(ex);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Properties config) throws ServletException {\n    try {\n      String principal \u003d config.getProperty(PRINCIPAL);\n      if (principal \u003d\u003d null || principal.trim().length() \u003d\u003d 0) {\n        throw new ServletException(\"Principal not defined in configuration\");\n      }\n      keytab \u003d config.getProperty(KEYTAB, keytab);\n      if (keytab \u003d\u003d null || keytab.trim().length() \u003d\u003d 0) {\n        throw new ServletException(\"Keytab not defined in configuration\");\n      }\n      if (!new File(keytab).exists()) {\n        throw new ServletException(\"Keytab does not exist: \" + keytab);\n      }\n      \n      // use all SPNEGO principals in the keytab if a principal isn\u0027t\n      // specifically configured\n      final String[] spnegoPrincipals;\n      if (principal.equals(\"*\")) {\n        spnegoPrincipals \u003d KerberosUtil.getPrincipalNames(\n            keytab, Pattern.compile(\"HTTP/.*\"));\n        if (spnegoPrincipals.length \u003d\u003d 0) {\n          throw new ServletException(\"Principals do not exist in the keytab\");\n        }\n      } else {\n        spnegoPrincipals \u003d new String[]{principal};\n      }\n\n      String nameRules \u003d config.getProperty(NAME_RULES, null);\n      if (nameRules !\u003d null) {\n        KerberosName.setRules(nameRules);\n      }\n      \n      for (String spnegoPrincipal : spnegoPrincipals) {\n        LOG.info(\"Login using keytab {}, for principal {}\",\n            keytab, spnegoPrincipal);\n        final KerberosConfiguration kerberosConfiguration \u003d\n            new KerberosConfiguration(keytab, spnegoPrincipal);\n        final LoginContext loginContext \u003d\n            new LoginContext(\"\", serverSubject, null, kerberosConfiguration);\n        try {\n          loginContext.login();\n        } catch (LoginException le) {\n          LOG.warn(\"Failed to login as [{}]\", spnegoPrincipal, le);\n          throw new AuthenticationException(le);          \n        }\n        loginContexts.add(loginContext);\n        KerberosName kerbName \u003d new KerberosName(spnegoPrincipal);\n        if (kerbName.getHostName() !\u003d null\n            \u0026\u0026 kerbName.getRealm() !\u003d null\n            \u0026\u0026 kerbName.getServiceName() !\u003d null\n            \u0026\u0026 kerbName.getServiceName().equals(\"HTTP\")) {\n          LOG.trace(\"Map server: {} to principal: {}\", kerbName.getHostName(),\n              spnegoPrincipal);\n          serverPrincipalMap.put(kerbName.getHostName(), spnegoPrincipal);\n        } else {\n          LOG.warn(\"HTTP principal: {} is invalid for SPNEGO!\",\n              spnegoPrincipal);\n        }\n      }\n      try {\n        gssManager \u003d Subject.doAs(serverSubject,\n            new PrivilegedExceptionAction\u003cGSSManager\u003e() {\n              @Override\n              public GSSManager run() throws Exception {\n                return GSSManager.getInstance();\n              }\n            });\n      } catch (PrivilegedActionException ex) {\n        throw ex.getException();\n      }\n    } catch (Exception ex) {\n      throw new ServletException(ex);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/KerberosAuthenticationHandler.java",
      "extendedDetails": {}
    },
    "c04a4b42274362560c019c3169a582e546864abf": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10702. KerberosAuthenticationHandler does not log the principal names correctly. Contributed by Benoy Antony.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603023 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/06/14 4:09 PM",
      "commitName": "c04a4b42274362560c019c3169a582e546864abf",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "08/05/14 11:26 AM",
      "commitNameOld": "47f03bc9fe9c8c94a567d29765cef2266f2993d0",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 39.2,
      "commitsBetweenForRepo": 227,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,62 @@\n   public void init(Properties config) throws ServletException {\n     try {\n       String principal \u003d config.getProperty(PRINCIPAL);\n       if (principal \u003d\u003d null || principal.trim().length() \u003d\u003d 0) {\n         throw new ServletException(\"Principal not defined in configuration\");\n       }\n       keytab \u003d config.getProperty(KEYTAB, keytab);\n       if (keytab \u003d\u003d null || keytab.trim().length() \u003d\u003d 0) {\n         throw new ServletException(\"Keytab not defined in configuration\");\n       }\n       if (!new File(keytab).exists()) {\n         throw new ServletException(\"Keytab does not exist: \" + keytab);\n       }\n       \n       // use all SPNEGO principals in the keytab if a principal isn\u0027t\n       // specifically configured\n       final String[] spnegoPrincipals;\n       if (principal.equals(\"*\")) {\n         spnegoPrincipals \u003d KerberosUtil.getPrincipalNames(\n             keytab, Pattern.compile(\"HTTP/.*\"));\n         if (spnegoPrincipals.length \u003d\u003d 0) {\n           throw new ServletException(\"Principals do not exist in the keytab\");\n         }\n       } else {\n         spnegoPrincipals \u003d new String[]{principal};\n       }\n \n       String nameRules \u003d config.getProperty(NAME_RULES, null);\n       if (nameRules !\u003d null) {\n         KerberosName.setRules(nameRules);\n       }\n       \n       for (String spnegoPrincipal : spnegoPrincipals) {\n         LOG.info(\"Login using keytab {}, for principal {}\",\n-            keytab, principal);\n+            keytab, spnegoPrincipal);\n         final KerberosConfiguration kerberosConfiguration \u003d\n             new KerberosConfiguration(keytab, spnegoPrincipal);\n         final LoginContext loginContext \u003d\n             new LoginContext(\"\", serverSubject, null, kerberosConfiguration);\n         try {\n           loginContext.login();\n         } catch (LoginException le) {\n           LOG.warn(\"Failed to login as [{}]\", spnegoPrincipal, le);\n           throw new AuthenticationException(le);          \n         }\n         loginContexts.add(loginContext);\n       }\n       try {\n         gssManager \u003d Subject.doAs(serverSubject, new PrivilegedExceptionAction\u003cGSSManager\u003e() {\n \n           @Override\n           public GSSManager run() throws Exception {\n             return GSSManager.getInstance();\n           }\n         });\n       } catch (PrivilegedActionException ex) {\n         throw ex.getException();\n       }\n     } catch (Exception ex) {\n       throw new ServletException(ex);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Properties config) throws ServletException {\n    try {\n      String principal \u003d config.getProperty(PRINCIPAL);\n      if (principal \u003d\u003d null || principal.trim().length() \u003d\u003d 0) {\n        throw new ServletException(\"Principal not defined in configuration\");\n      }\n      keytab \u003d config.getProperty(KEYTAB, keytab);\n      if (keytab \u003d\u003d null || keytab.trim().length() \u003d\u003d 0) {\n        throw new ServletException(\"Keytab not defined in configuration\");\n      }\n      if (!new File(keytab).exists()) {\n        throw new ServletException(\"Keytab does not exist: \" + keytab);\n      }\n      \n      // use all SPNEGO principals in the keytab if a principal isn\u0027t\n      // specifically configured\n      final String[] spnegoPrincipals;\n      if (principal.equals(\"*\")) {\n        spnegoPrincipals \u003d KerberosUtil.getPrincipalNames(\n            keytab, Pattern.compile(\"HTTP/.*\"));\n        if (spnegoPrincipals.length \u003d\u003d 0) {\n          throw new ServletException(\"Principals do not exist in the keytab\");\n        }\n      } else {\n        spnegoPrincipals \u003d new String[]{principal};\n      }\n\n      String nameRules \u003d config.getProperty(NAME_RULES, null);\n      if (nameRules !\u003d null) {\n        KerberosName.setRules(nameRules);\n      }\n      \n      for (String spnegoPrincipal : spnegoPrincipals) {\n        LOG.info(\"Login using keytab {}, for principal {}\",\n            keytab, spnegoPrincipal);\n        final KerberosConfiguration kerberosConfiguration \u003d\n            new KerberosConfiguration(keytab, spnegoPrincipal);\n        final LoginContext loginContext \u003d\n            new LoginContext(\"\", serverSubject, null, kerberosConfiguration);\n        try {\n          loginContext.login();\n        } catch (LoginException le) {\n          LOG.warn(\"Failed to login as [{}]\", spnegoPrincipal, le);\n          throw new AuthenticationException(le);          \n        }\n        loginContexts.add(loginContext);\n      }\n      try {\n        gssManager \u003d Subject.doAs(serverSubject, new PrivilegedExceptionAction\u003cGSSManager\u003e() {\n\n          @Override\n          public GSSManager run() throws Exception {\n            return GSSManager.getInstance();\n          }\n        });\n      } catch (PrivilegedActionException ex) {\n        throw ex.getException();\n      }\n    } catch (Exception ex) {\n      throw new ServletException(ex);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/KerberosAuthenticationHandler.java",
      "extendedDetails": {}
    },
    "47f03bc9fe9c8c94a567d29765cef2266f2993d0": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10158. SPNEGO should work with multiple interfaces/SPNs. Contributed by Daryn Sharp.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1593362 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/05/14 11:26 AM",
      "commitName": "47f03bc9fe9c8c94a567d29765cef2266f2993d0",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "13/08/13 4:12 PM",
      "commitNameOld": "228742acad6b56c0e4fafe285099fcdfa5b6e47f",
      "commitAuthorOld": "Luke Lu",
      "daysBetweenCommits": 267.8,
      "commitsBetweenForRepo": 1818,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,62 @@\n   public void init(Properties config) throws ServletException {\n     try {\n-      principal \u003d config.getProperty(PRINCIPAL, principal);\n+      String principal \u003d config.getProperty(PRINCIPAL);\n       if (principal \u003d\u003d null || principal.trim().length() \u003d\u003d 0) {\n         throw new ServletException(\"Principal not defined in configuration\");\n       }\n       keytab \u003d config.getProperty(KEYTAB, keytab);\n       if (keytab \u003d\u003d null || keytab.trim().length() \u003d\u003d 0) {\n         throw new ServletException(\"Keytab not defined in configuration\");\n       }\n       if (!new File(keytab).exists()) {\n         throw new ServletException(\"Keytab does not exist: \" + keytab);\n       }\n+      \n+      // use all SPNEGO principals in the keytab if a principal isn\u0027t\n+      // specifically configured\n+      final String[] spnegoPrincipals;\n+      if (principal.equals(\"*\")) {\n+        spnegoPrincipals \u003d KerberosUtil.getPrincipalNames(\n+            keytab, Pattern.compile(\"HTTP/.*\"));\n+        if (spnegoPrincipals.length \u003d\u003d 0) {\n+          throw new ServletException(\"Principals do not exist in the keytab\");\n+        }\n+      } else {\n+        spnegoPrincipals \u003d new String[]{principal};\n+      }\n \n       String nameRules \u003d config.getProperty(NAME_RULES, null);\n       if (nameRules !\u003d null) {\n         KerberosName.setRules(nameRules);\n       }\n       \n-      Set\u003cPrincipal\u003e principals \u003d new HashSet\u003cPrincipal\u003e();\n-      principals.add(new KerberosPrincipal(principal));\n-      Subject subject \u003d new Subject(false, principals, new HashSet\u003cObject\u003e(), new HashSet\u003cObject\u003e());\n-\n-      KerberosConfiguration kerberosConfiguration \u003d new KerberosConfiguration(keytab, principal);\n-\n-      LOG.info(\"Login using keytab \"+keytab+\", for principal \"+principal);\n-      loginContext \u003d new LoginContext(\"\", subject, null, kerberosConfiguration);\n-      loginContext.login();\n-\n-      Subject serverSubject \u003d loginContext.getSubject();\n+      for (String spnegoPrincipal : spnegoPrincipals) {\n+        LOG.info(\"Login using keytab {}, for principal {}\",\n+            keytab, principal);\n+        final KerberosConfiguration kerberosConfiguration \u003d\n+            new KerberosConfiguration(keytab, spnegoPrincipal);\n+        final LoginContext loginContext \u003d\n+            new LoginContext(\"\", serverSubject, null, kerberosConfiguration);\n+        try {\n+          loginContext.login();\n+        } catch (LoginException le) {\n+          LOG.warn(\"Failed to login as [{}]\", spnegoPrincipal, le);\n+          throw new AuthenticationException(le);          \n+        }\n+        loginContexts.add(loginContext);\n+      }\n       try {\n         gssManager \u003d Subject.doAs(serverSubject, new PrivilegedExceptionAction\u003cGSSManager\u003e() {\n \n           @Override\n           public GSSManager run() throws Exception {\n             return GSSManager.getInstance();\n           }\n         });\n       } catch (PrivilegedActionException ex) {\n         throw ex.getException();\n       }\n-      LOG.info(\"Initialized, principal [{}] from keytab [{}]\", principal, keytab);\n     } catch (Exception ex) {\n       throw new ServletException(ex);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Properties config) throws ServletException {\n    try {\n      String principal \u003d config.getProperty(PRINCIPAL);\n      if (principal \u003d\u003d null || principal.trim().length() \u003d\u003d 0) {\n        throw new ServletException(\"Principal not defined in configuration\");\n      }\n      keytab \u003d config.getProperty(KEYTAB, keytab);\n      if (keytab \u003d\u003d null || keytab.trim().length() \u003d\u003d 0) {\n        throw new ServletException(\"Keytab not defined in configuration\");\n      }\n      if (!new File(keytab).exists()) {\n        throw new ServletException(\"Keytab does not exist: \" + keytab);\n      }\n      \n      // use all SPNEGO principals in the keytab if a principal isn\u0027t\n      // specifically configured\n      final String[] spnegoPrincipals;\n      if (principal.equals(\"*\")) {\n        spnegoPrincipals \u003d KerberosUtil.getPrincipalNames(\n            keytab, Pattern.compile(\"HTTP/.*\"));\n        if (spnegoPrincipals.length \u003d\u003d 0) {\n          throw new ServletException(\"Principals do not exist in the keytab\");\n        }\n      } else {\n        spnegoPrincipals \u003d new String[]{principal};\n      }\n\n      String nameRules \u003d config.getProperty(NAME_RULES, null);\n      if (nameRules !\u003d null) {\n        KerberosName.setRules(nameRules);\n      }\n      \n      for (String spnegoPrincipal : spnegoPrincipals) {\n        LOG.info(\"Login using keytab {}, for principal {}\",\n            keytab, principal);\n        final KerberosConfiguration kerberosConfiguration \u003d\n            new KerberosConfiguration(keytab, spnegoPrincipal);\n        final LoginContext loginContext \u003d\n            new LoginContext(\"\", serverSubject, null, kerberosConfiguration);\n        try {\n          loginContext.login();\n        } catch (LoginException le) {\n          LOG.warn(\"Failed to login as [{}]\", spnegoPrincipal, le);\n          throw new AuthenticationException(le);          \n        }\n        loginContexts.add(loginContext);\n      }\n      try {\n        gssManager \u003d Subject.doAs(serverSubject, new PrivilegedExceptionAction\u003cGSSManager\u003e() {\n\n          @Override\n          public GSSManager run() throws Exception {\n            return GSSManager.getInstance();\n          }\n        });\n      } catch (PrivilegedActionException ex) {\n        throw ex.getException();\n      }\n    } catch (Exception ex) {\n      throw new ServletException(ex);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/KerberosAuthenticationHandler.java",
      "extendedDetails": {}
    },
    "58361d3f34a3598b55944c37623052cbb0d1659d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7887. KerberosAuthenticatorHandler is not setting KerberosName name rules from configuration. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1211673 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/12/11 2:17 PM",
      "commitName": "58361d3f34a3598b55944c37623052cbb0d1659d",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "26/10/11 11:20 AM",
      "commitNameOld": "2ce817aecf38c5e8aafbd7e2b5da08f01b2d50e6",
      "commitAuthorOld": "Jitendra Nath Pandey",
      "daysBetweenCommits": 42.16,
      "commitsBetweenForRepo": 270,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,46 @@\n   public void init(Properties config) throws ServletException {\n     try {\n       principal \u003d config.getProperty(PRINCIPAL, principal);\n       if (principal \u003d\u003d null || principal.trim().length() \u003d\u003d 0) {\n         throw new ServletException(\"Principal not defined in configuration\");\n       }\n       keytab \u003d config.getProperty(KEYTAB, keytab);\n       if (keytab \u003d\u003d null || keytab.trim().length() \u003d\u003d 0) {\n         throw new ServletException(\"Keytab not defined in configuration\");\n       }\n       if (!new File(keytab).exists()) {\n         throw new ServletException(\"Keytab does not exist: \" + keytab);\n       }\n \n+      String nameRules \u003d config.getProperty(NAME_RULES, null);\n+      if (nameRules !\u003d null) {\n+        KerberosName.setRules(nameRules);\n+      }\n+      \n       Set\u003cPrincipal\u003e principals \u003d new HashSet\u003cPrincipal\u003e();\n       principals.add(new KerberosPrincipal(principal));\n       Subject subject \u003d new Subject(false, principals, new HashSet\u003cObject\u003e(), new HashSet\u003cObject\u003e());\n \n       KerberosConfiguration kerberosConfiguration \u003d new KerberosConfiguration(keytab, principal);\n \n       LOG.info(\"Login using keytab \"+keytab+\", for principal \"+principal);\n       loginContext \u003d new LoginContext(\"\", subject, null, kerberosConfiguration);\n       loginContext.login();\n \n       Subject serverSubject \u003d loginContext.getSubject();\n       try {\n         gssManager \u003d Subject.doAs(serverSubject, new PrivilegedExceptionAction\u003cGSSManager\u003e() {\n \n           @Override\n           public GSSManager run() throws Exception {\n             return GSSManager.getInstance();\n           }\n         });\n       } catch (PrivilegedActionException ex) {\n         throw ex.getException();\n       }\n       LOG.info(\"Initialized, principal [{}] from keytab [{}]\", principal, keytab);\n     } catch (Exception ex) {\n       throw new ServletException(ex);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Properties config) throws ServletException {\n    try {\n      principal \u003d config.getProperty(PRINCIPAL, principal);\n      if (principal \u003d\u003d null || principal.trim().length() \u003d\u003d 0) {\n        throw new ServletException(\"Principal not defined in configuration\");\n      }\n      keytab \u003d config.getProperty(KEYTAB, keytab);\n      if (keytab \u003d\u003d null || keytab.trim().length() \u003d\u003d 0) {\n        throw new ServletException(\"Keytab not defined in configuration\");\n      }\n      if (!new File(keytab).exists()) {\n        throw new ServletException(\"Keytab does not exist: \" + keytab);\n      }\n\n      String nameRules \u003d config.getProperty(NAME_RULES, null);\n      if (nameRules !\u003d null) {\n        KerberosName.setRules(nameRules);\n      }\n      \n      Set\u003cPrincipal\u003e principals \u003d new HashSet\u003cPrincipal\u003e();\n      principals.add(new KerberosPrincipal(principal));\n      Subject subject \u003d new Subject(false, principals, new HashSet\u003cObject\u003e(), new HashSet\u003cObject\u003e());\n\n      KerberosConfiguration kerberosConfiguration \u003d new KerberosConfiguration(keytab, principal);\n\n      LOG.info(\"Login using keytab \"+keytab+\", for principal \"+principal);\n      loginContext \u003d new LoginContext(\"\", subject, null, kerberosConfiguration);\n      loginContext.login();\n\n      Subject serverSubject \u003d loginContext.getSubject();\n      try {\n        gssManager \u003d Subject.doAs(serverSubject, new PrivilegedExceptionAction\u003cGSSManager\u003e() {\n\n          @Override\n          public GSSManager run() throws Exception {\n            return GSSManager.getInstance();\n          }\n        });\n      } catch (PrivilegedActionException ex) {\n        throw ex.getException();\n      }\n      LOG.info(\"Initialized, principal [{}] from keytab [{}]\", principal, keytab);\n    } catch (Exception ex) {\n      throw new ServletException(ex);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/KerberosAuthenticationHandler.java",
      "extendedDetails": {}
    },
    "2ce817aecf38c5e8aafbd7e2b5da08f01b2d50e6": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7766. The auth to local mappings are not being respected, with webhdfs and security enabled.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1189357 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/10/11 11:20 AM",
      "commitName": "2ce817aecf38c5e8aafbd7e2b5da08f01b2d50e6",
      "commitAuthor": "Jitendra Nath Pandey",
      "commitDateOld": "06/10/11 2:41 PM",
      "commitNameOld": "a90f8fb50fc0f24d2e9481651b7c14c90ad7e861",
      "commitAuthorOld": "Jitendra Nath Pandey",
      "daysBetweenCommits": 19.86,
      "commitsBetweenForRepo": 159,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,41 @@\n   public void init(Properties config) throws ServletException {\n     try {\n       principal \u003d config.getProperty(PRINCIPAL, principal);\n       if (principal \u003d\u003d null || principal.trim().length() \u003d\u003d 0) {\n         throw new ServletException(\"Principal not defined in configuration\");\n       }\n       keytab \u003d config.getProperty(KEYTAB, keytab);\n       if (keytab \u003d\u003d null || keytab.trim().length() \u003d\u003d 0) {\n         throw new ServletException(\"Keytab not defined in configuration\");\n       }\n       if (!new File(keytab).exists()) {\n         throw new ServletException(\"Keytab does not exist: \" + keytab);\n       }\n \n-      String nameRules \u003d config.getProperty(NAME_RULES, \"DEFAULT\");\n-      KerberosName.setRules(nameRules);\n-\n       Set\u003cPrincipal\u003e principals \u003d new HashSet\u003cPrincipal\u003e();\n       principals.add(new KerberosPrincipal(principal));\n       Subject subject \u003d new Subject(false, principals, new HashSet\u003cObject\u003e(), new HashSet\u003cObject\u003e());\n \n       KerberosConfiguration kerberosConfiguration \u003d new KerberosConfiguration(keytab, principal);\n \n       LOG.info(\"Login using keytab \"+keytab+\", for principal \"+principal);\n       loginContext \u003d new LoginContext(\"\", subject, null, kerberosConfiguration);\n       loginContext.login();\n \n       Subject serverSubject \u003d loginContext.getSubject();\n       try {\n         gssManager \u003d Subject.doAs(serverSubject, new PrivilegedExceptionAction\u003cGSSManager\u003e() {\n \n           @Override\n           public GSSManager run() throws Exception {\n             return GSSManager.getInstance();\n           }\n         });\n       } catch (PrivilegedActionException ex) {\n         throw ex.getException();\n       }\n       LOG.info(\"Initialized, principal [{}] from keytab [{}]\", principal, keytab);\n     } catch (Exception ex) {\n       throw new ServletException(ex);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Properties config) throws ServletException {\n    try {\n      principal \u003d config.getProperty(PRINCIPAL, principal);\n      if (principal \u003d\u003d null || principal.trim().length() \u003d\u003d 0) {\n        throw new ServletException(\"Principal not defined in configuration\");\n      }\n      keytab \u003d config.getProperty(KEYTAB, keytab);\n      if (keytab \u003d\u003d null || keytab.trim().length() \u003d\u003d 0) {\n        throw new ServletException(\"Keytab not defined in configuration\");\n      }\n      if (!new File(keytab).exists()) {\n        throw new ServletException(\"Keytab does not exist: \" + keytab);\n      }\n\n      Set\u003cPrincipal\u003e principals \u003d new HashSet\u003cPrincipal\u003e();\n      principals.add(new KerberosPrincipal(principal));\n      Subject subject \u003d new Subject(false, principals, new HashSet\u003cObject\u003e(), new HashSet\u003cObject\u003e());\n\n      KerberosConfiguration kerberosConfiguration \u003d new KerberosConfiguration(keytab, principal);\n\n      LOG.info(\"Login using keytab \"+keytab+\", for principal \"+principal);\n      loginContext \u003d new LoginContext(\"\", subject, null, kerberosConfiguration);\n      loginContext.login();\n\n      Subject serverSubject \u003d loginContext.getSubject();\n      try {\n        gssManager \u003d Subject.doAs(serverSubject, new PrivilegedExceptionAction\u003cGSSManager\u003e() {\n\n          @Override\n          public GSSManager run() throws Exception {\n            return GSSManager.getInstance();\n          }\n        });\n      } catch (PrivilegedActionException ex) {\n        throw ex.getException();\n      }\n      LOG.info(\"Initialized, principal [{}] from keytab [{}]\", principal, keytab);\n    } catch (Exception ex) {\n      throw new ServletException(ex);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/KerberosAuthenticationHandler.java",
      "extendedDetails": {}
    },
    "a90f8fb50fc0f24d2e9481651b7c14c90ad7e861": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7721. Add a log before login in KerberosAuthenticationHandler.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1179869 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/10/11 2:41 PM",
      "commitName": "a90f8fb50fc0f24d2e9481651b7c14c90ad7e861",
      "commitAuthor": "Jitendra Nath Pandey",
      "commitDateOld": "31/08/11 3:40 PM",
      "commitNameOld": "2b016dac8232e0f5c43293adcbdf7164f5fca74c",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 35.96,
      "commitsBetweenForRepo": 239,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,44 @@\n   public void init(Properties config) throws ServletException {\n     try {\n       principal \u003d config.getProperty(PRINCIPAL, principal);\n       if (principal \u003d\u003d null || principal.trim().length() \u003d\u003d 0) {\n         throw new ServletException(\"Principal not defined in configuration\");\n       }\n       keytab \u003d config.getProperty(KEYTAB, keytab);\n       if (keytab \u003d\u003d null || keytab.trim().length() \u003d\u003d 0) {\n         throw new ServletException(\"Keytab not defined in configuration\");\n       }\n       if (!new File(keytab).exists()) {\n         throw new ServletException(\"Keytab does not exist: \" + keytab);\n       }\n \n       String nameRules \u003d config.getProperty(NAME_RULES, \"DEFAULT\");\n       KerberosName.setRules(nameRules);\n \n       Set\u003cPrincipal\u003e principals \u003d new HashSet\u003cPrincipal\u003e();\n       principals.add(new KerberosPrincipal(principal));\n       Subject subject \u003d new Subject(false, principals, new HashSet\u003cObject\u003e(), new HashSet\u003cObject\u003e());\n \n       KerberosConfiguration kerberosConfiguration \u003d new KerberosConfiguration(keytab, principal);\n \n+      LOG.info(\"Login using keytab \"+keytab+\", for principal \"+principal);\n       loginContext \u003d new LoginContext(\"\", subject, null, kerberosConfiguration);\n       loginContext.login();\n \n       Subject serverSubject \u003d loginContext.getSubject();\n       try {\n         gssManager \u003d Subject.doAs(serverSubject, new PrivilegedExceptionAction\u003cGSSManager\u003e() {\n \n           @Override\n           public GSSManager run() throws Exception {\n             return GSSManager.getInstance();\n           }\n         });\n       } catch (PrivilegedActionException ex) {\n         throw ex.getException();\n       }\n       LOG.info(\"Initialized, principal [{}] from keytab [{}]\", principal, keytab);\n     } catch (Exception ex) {\n       throw new ServletException(ex);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Properties config) throws ServletException {\n    try {\n      principal \u003d config.getProperty(PRINCIPAL, principal);\n      if (principal \u003d\u003d null || principal.trim().length() \u003d\u003d 0) {\n        throw new ServletException(\"Principal not defined in configuration\");\n      }\n      keytab \u003d config.getProperty(KEYTAB, keytab);\n      if (keytab \u003d\u003d null || keytab.trim().length() \u003d\u003d 0) {\n        throw new ServletException(\"Keytab not defined in configuration\");\n      }\n      if (!new File(keytab).exists()) {\n        throw new ServletException(\"Keytab does not exist: \" + keytab);\n      }\n\n      String nameRules \u003d config.getProperty(NAME_RULES, \"DEFAULT\");\n      KerberosName.setRules(nameRules);\n\n      Set\u003cPrincipal\u003e principals \u003d new HashSet\u003cPrincipal\u003e();\n      principals.add(new KerberosPrincipal(principal));\n      Subject subject \u003d new Subject(false, principals, new HashSet\u003cObject\u003e(), new HashSet\u003cObject\u003e());\n\n      KerberosConfiguration kerberosConfiguration \u003d new KerberosConfiguration(keytab, principal);\n\n      LOG.info(\"Login using keytab \"+keytab+\", for principal \"+principal);\n      loginContext \u003d new LoginContext(\"\", subject, null, kerberosConfiguration);\n      loginContext.login();\n\n      Subject serverSubject \u003d loginContext.getSubject();\n      try {\n        gssManager \u003d Subject.doAs(serverSubject, new PrivilegedExceptionAction\u003cGSSManager\u003e() {\n\n          @Override\n          public GSSManager run() throws Exception {\n            return GSSManager.getInstance();\n          }\n        });\n      } catch (PrivilegedActionException ex) {\n        throw ex.getException();\n      }\n      LOG.info(\"Initialized, principal [{}] from keytab [{}]\", principal, keytab);\n    } catch (Exception ex) {\n      throw new ServletException(ex);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/KerberosAuthenticationHandler.java",
      "extendedDetails": {}
    },
    "2b016dac8232e0f5c43293adcbdf7164f5fca74c": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7579. Rename package names from alfredo to auth.  Contributed by Alejandro Abdelnur\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1163852 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/08/11 3:40 PM",
      "commitName": "2b016dac8232e0f5c43293adcbdf7164f5fca74c",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "31/08/11 2:18 PM",
      "commitNameOld": "4f1a0e36fab1f18e6e2c5fcc72cd9a7634967fcd",
      "commitAuthorOld": "Konstantin Shvachko",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void init(Properties config) throws ServletException {\n    try {\n      principal \u003d config.getProperty(PRINCIPAL, principal);\n      if (principal \u003d\u003d null || principal.trim().length() \u003d\u003d 0) {\n        throw new ServletException(\"Principal not defined in configuration\");\n      }\n      keytab \u003d config.getProperty(KEYTAB, keytab);\n      if (keytab \u003d\u003d null || keytab.trim().length() \u003d\u003d 0) {\n        throw new ServletException(\"Keytab not defined in configuration\");\n      }\n      if (!new File(keytab).exists()) {\n        throw new ServletException(\"Keytab does not exist: \" + keytab);\n      }\n\n      String nameRules \u003d config.getProperty(NAME_RULES, \"DEFAULT\");\n      KerberosName.setRules(nameRules);\n\n      Set\u003cPrincipal\u003e principals \u003d new HashSet\u003cPrincipal\u003e();\n      principals.add(new KerberosPrincipal(principal));\n      Subject subject \u003d new Subject(false, principals, new HashSet\u003cObject\u003e(), new HashSet\u003cObject\u003e());\n\n      KerberosConfiguration kerberosConfiguration \u003d new KerberosConfiguration(keytab, principal);\n\n      loginContext \u003d new LoginContext(\"\", subject, null, kerberosConfiguration);\n      loginContext.login();\n\n      Subject serverSubject \u003d loginContext.getSubject();\n      try {\n        gssManager \u003d Subject.doAs(serverSubject, new PrivilegedExceptionAction\u003cGSSManager\u003e() {\n\n          @Override\n          public GSSManager run() throws Exception {\n            return GSSManager.getInstance();\n          }\n        });\n      } catch (PrivilegedActionException ex) {\n        throw ex.getException();\n      }\n      LOG.info(\"Initialized, principal [{}] from keytab [{}]\", principal, keytab);\n    } catch (Exception ex) {\n      throw new ServletException(ex);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/KerberosAuthenticationHandler.java",
      "extendedDetails": {
        "oldPath": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/alfredo/server/KerberosAuthenticationHandler.java",
        "newPath": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/KerberosAuthenticationHandler.java"
      }
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void init(Properties config) throws ServletException {\n    try {\n      principal \u003d config.getProperty(PRINCIPAL, principal);\n      if (principal \u003d\u003d null || principal.trim().length() \u003d\u003d 0) {\n        throw new ServletException(\"Principal not defined in configuration\");\n      }\n      keytab \u003d config.getProperty(KEYTAB, keytab);\n      if (keytab \u003d\u003d null || keytab.trim().length() \u003d\u003d 0) {\n        throw new ServletException(\"Keytab not defined in configuration\");\n      }\n      if (!new File(keytab).exists()) {\n        throw new ServletException(\"Keytab does not exist: \" + keytab);\n      }\n\n      String nameRules \u003d config.getProperty(NAME_RULES, \"DEFAULT\");\n      KerberosName.setRules(nameRules);\n\n      Set\u003cPrincipal\u003e principals \u003d new HashSet\u003cPrincipal\u003e();\n      principals.add(new KerberosPrincipal(principal));\n      Subject subject \u003d new Subject(false, principals, new HashSet\u003cObject\u003e(), new HashSet\u003cObject\u003e());\n\n      KerberosConfiguration kerberosConfiguration \u003d new KerberosConfiguration(keytab, principal);\n\n      loginContext \u003d new LoginContext(\"\", subject, null, kerberosConfiguration);\n      loginContext.login();\n\n      Subject serverSubject \u003d loginContext.getSubject();\n      try {\n        gssManager \u003d Subject.doAs(serverSubject, new PrivilegedExceptionAction\u003cGSSManager\u003e() {\n\n          @Override\n          public GSSManager run() throws Exception {\n            return GSSManager.getInstance();\n          }\n        });\n      } catch (PrivilegedActionException ex) {\n        throw ex.getException();\n      }\n      LOG.info(\"Initialized, principal [{}] from keytab [{}]\", principal, keytab);\n    } catch (Exception ex) {\n      throw new ServletException(ex);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/alfredo/server/KerberosAuthenticationHandler.java",
      "extendedDetails": {
        "oldPath": "hadoop-alfredo/src/main/java/org/apache/hadoop/alfredo/server/KerberosAuthenticationHandler.java",
        "newPath": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/alfredo/server/KerberosAuthenticationHandler.java"
      }
    },
    "a0f120ce68dddb0cb31b64c89f3224313f3cb5af": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7119. add Kerberos HTTP SPNEGO authentication support to Hadoop JT/NN/DN/TT web-consoles. (Alejandro Abdelnur via atm)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159804 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 3:31 PM",
      "commitName": "a0f120ce68dddb0cb31b64c89f3224313f3cb5af",
      "commitAuthor": "Aaron Myers",
      "diff": "@@ -0,0 +1,43 @@\n+  public void init(Properties config) throws ServletException {\n+    try {\n+      principal \u003d config.getProperty(PRINCIPAL, principal);\n+      if (principal \u003d\u003d null || principal.trim().length() \u003d\u003d 0) {\n+        throw new ServletException(\"Principal not defined in configuration\");\n+      }\n+      keytab \u003d config.getProperty(KEYTAB, keytab);\n+      if (keytab \u003d\u003d null || keytab.trim().length() \u003d\u003d 0) {\n+        throw new ServletException(\"Keytab not defined in configuration\");\n+      }\n+      if (!new File(keytab).exists()) {\n+        throw new ServletException(\"Keytab does not exist: \" + keytab);\n+      }\n+\n+      String nameRules \u003d config.getProperty(NAME_RULES, \"DEFAULT\");\n+      KerberosName.setRules(nameRules);\n+\n+      Set\u003cPrincipal\u003e principals \u003d new HashSet\u003cPrincipal\u003e();\n+      principals.add(new KerberosPrincipal(principal));\n+      Subject subject \u003d new Subject(false, principals, new HashSet\u003cObject\u003e(), new HashSet\u003cObject\u003e());\n+\n+      KerberosConfiguration kerberosConfiguration \u003d new KerberosConfiguration(keytab, principal);\n+\n+      loginContext \u003d new LoginContext(\"\", subject, null, kerberosConfiguration);\n+      loginContext.login();\n+\n+      Subject serverSubject \u003d loginContext.getSubject();\n+      try {\n+        gssManager \u003d Subject.doAs(serverSubject, new PrivilegedExceptionAction\u003cGSSManager\u003e() {\n+\n+          @Override\n+          public GSSManager run() throws Exception {\n+            return GSSManager.getInstance();\n+          }\n+        });\n+      } catch (PrivilegedActionException ex) {\n+        throw ex.getException();\n+      }\n+      LOG.info(\"Initialized, principal [{}] from keytab [{}]\", principal, keytab);\n+    } catch (Exception ex) {\n+      throw new ServletException(ex);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Properties config) throws ServletException {\n    try {\n      principal \u003d config.getProperty(PRINCIPAL, principal);\n      if (principal \u003d\u003d null || principal.trim().length() \u003d\u003d 0) {\n        throw new ServletException(\"Principal not defined in configuration\");\n      }\n      keytab \u003d config.getProperty(KEYTAB, keytab);\n      if (keytab \u003d\u003d null || keytab.trim().length() \u003d\u003d 0) {\n        throw new ServletException(\"Keytab not defined in configuration\");\n      }\n      if (!new File(keytab).exists()) {\n        throw new ServletException(\"Keytab does not exist: \" + keytab);\n      }\n\n      String nameRules \u003d config.getProperty(NAME_RULES, \"DEFAULT\");\n      KerberosName.setRules(nameRules);\n\n      Set\u003cPrincipal\u003e principals \u003d new HashSet\u003cPrincipal\u003e();\n      principals.add(new KerberosPrincipal(principal));\n      Subject subject \u003d new Subject(false, principals, new HashSet\u003cObject\u003e(), new HashSet\u003cObject\u003e());\n\n      KerberosConfiguration kerberosConfiguration \u003d new KerberosConfiguration(keytab, principal);\n\n      loginContext \u003d new LoginContext(\"\", subject, null, kerberosConfiguration);\n      loginContext.login();\n\n      Subject serverSubject \u003d loginContext.getSubject();\n      try {\n        gssManager \u003d Subject.doAs(serverSubject, new PrivilegedExceptionAction\u003cGSSManager\u003e() {\n\n          @Override\n          public GSSManager run() throws Exception {\n            return GSSManager.getInstance();\n          }\n        });\n      } catch (PrivilegedActionException ex) {\n        throw ex.getException();\n      }\n      LOG.info(\"Initialized, principal [{}] from keytab [{}]\", principal, keytab);\n    } catch (Exception ex) {\n      throw new ServletException(ex);\n    }\n  }",
      "path": "hadoop-alfredo/src/main/java/org/apache/hadoop/alfredo/server/KerberosAuthenticationHandler.java"
    }
  }
}