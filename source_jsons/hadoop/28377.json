{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AMRMClientRelayer.java",
  "functionName": "shutdown",
  "functionId": "shutdown",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/AMRMClientRelayer.java",
  "functionStartLine": 158,
  "functionEndLine": 203,
  "numCommitsSeen": 8,
  "timeTaken": 1659,
  "changeHistory": [
    "989715ec5066c6ac7868e25ad9234dc64723e61e",
    "02b9bfdf9e4bd0b3c05ca5fd75399dedcb656e09"
  ],
  "changeHistoryShort": {
    "989715ec5066c6ac7868e25ad9234dc64723e61e": "Ybodychange",
    "02b9bfdf9e4bd0b3c05ca5fd75399dedcb656e09": "Yintroduced"
  },
  "changeHistoryDetails": {
    "989715ec5066c6ac7868e25ad9234dc64723e61e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8893. [AMRMProxy] Fix thread leak in AMRMClientRelayer and UAM client. Contributed by Botong Huang.\n",
      "commitDate": "02/11/18 3:30 PM",
      "commitName": "989715ec5066c6ac7868e25ad9234dc64723e61e",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "09/10/18 10:29 AM",
      "commitNameOld": "c3d22d3b4569b7f87af4ee4abfcc284deebe90de",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 24.21,
      "commitsBetweenForRepo": 265,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,46 @@\n   public void shutdown() {\n     // On finish, clear out our pending count from the metrics\n     // and set the shut down flag so no more pending requests get\n     // added\n     synchronized (this) {\n       if (this.shutdown) {\n         LOG.warn(\n             \"Shutdown called twice for AMRMClientRelayer for RM \" + this.rmId);\n         return;\n       }\n       this.shutdown \u003d true;\n       for (Map.Entry\u003cResourceRequestSetKey, ResourceRequestSet\u003e entry\n           : this.remotePendingAsks .entrySet()) {\n         ResourceRequestSetKey key \u003d entry.getKey();\n         if (key.getAllocationRequestId() \u003d\u003d 0) {\n           this.metrics.decrClientPending(this.rmId,\n               AMRMClientRelayerMetrics.getRequestType(key.getExeType()),\n               entry.getValue().getNumContainers());\n         } else {\n           this.askTimeStamp.remove(key.getAllocationRequestId());\n           Integer pending \u003d\n               this.pendingCountForMetrics.remove(key.getAllocationRequestId());\n           if (pending \u003d\u003d null) {\n             throw new YarnRuntimeException(\n                 \"pendingCountForMetrics not found for key \" + key\n                     + \" during shutdown\");\n           }\n           this.metrics.decrClientPending(this.rmId,\n               AMRMClientRelayerMetrics.getRequestType(key.getExeType()),\n               pending);\n         }\n       }\n       for(UpdateContainerRequest req : remotePendingChange.values()) {\n         this.metrics\n             .decrClientPending(rmId, req.getContainerUpdateType(), 1);\n       }\n     }\n+\n+    if (this.rmClient !\u003d null) {\n+      try {\n+        RPC.stopProxy(this.rmClient);\n+        this.rmClient \u003d null;\n+      } catch (HadoopIllegalArgumentException e) {\n+      }\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void shutdown() {\n    // On finish, clear out our pending count from the metrics\n    // and set the shut down flag so no more pending requests get\n    // added\n    synchronized (this) {\n      if (this.shutdown) {\n        LOG.warn(\n            \"Shutdown called twice for AMRMClientRelayer for RM \" + this.rmId);\n        return;\n      }\n      this.shutdown \u003d true;\n      for (Map.Entry\u003cResourceRequestSetKey, ResourceRequestSet\u003e entry\n          : this.remotePendingAsks .entrySet()) {\n        ResourceRequestSetKey key \u003d entry.getKey();\n        if (key.getAllocationRequestId() \u003d\u003d 0) {\n          this.metrics.decrClientPending(this.rmId,\n              AMRMClientRelayerMetrics.getRequestType(key.getExeType()),\n              entry.getValue().getNumContainers());\n        } else {\n          this.askTimeStamp.remove(key.getAllocationRequestId());\n          Integer pending \u003d\n              this.pendingCountForMetrics.remove(key.getAllocationRequestId());\n          if (pending \u003d\u003d null) {\n            throw new YarnRuntimeException(\n                \"pendingCountForMetrics not found for key \" + key\n                    + \" during shutdown\");\n          }\n          this.metrics.decrClientPending(this.rmId,\n              AMRMClientRelayerMetrics.getRequestType(key.getExeType()),\n              pending);\n        }\n      }\n      for(UpdateContainerRequest req : remotePendingChange.values()) {\n        this.metrics\n            .decrClientPending(rmId, req.getContainerUpdateType(), 1);\n      }\n    }\n\n    if (this.rmClient !\u003d null) {\n      try {\n        RPC.stopProxy(this.rmClient);\n        this.rmClient \u003d null;\n      } catch (HadoopIllegalArgumentException e) {\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/AMRMClientRelayer.java",
      "extendedDetails": {}
    },
    "02b9bfdf9e4bd0b3c05ca5fd75399dedcb656e09": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8658. [AMRMProxy] Metrics for AMRMClientRelayer inside FederationInterceptor. Contributed by Young Chen.\n",
      "commitDate": "12/09/18 11:46 AM",
      "commitName": "02b9bfdf9e4bd0b3c05ca5fd75399dedcb656e09",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "diff": "@@ -0,0 +1,38 @@\n+  public void shutdown() {\n+    // On finish, clear out our pending count from the metrics\n+    // and set the shut down flag so no more pending requests get\n+    // added\n+    synchronized (this) {\n+      if (this.shutdown) {\n+        LOG.warn(\n+            \"Shutdown called twice for AMRMClientRelayer for RM \" + this.rmId);\n+        return;\n+      }\n+      this.shutdown \u003d true;\n+      for (Map.Entry\u003cResourceRequestSetKey, ResourceRequestSet\u003e entry\n+          : this.remotePendingAsks .entrySet()) {\n+        ResourceRequestSetKey key \u003d entry.getKey();\n+        if (key.getAllocationRequestId() \u003d\u003d 0) {\n+          this.metrics.decrClientPending(this.rmId,\n+              AMRMClientRelayerMetrics.getRequestType(key.getExeType()),\n+              entry.getValue().getNumContainers());\n+        } else {\n+          this.askTimeStamp.remove(key.getAllocationRequestId());\n+          Integer pending \u003d\n+              this.pendingCountForMetrics.remove(key.getAllocationRequestId());\n+          if (pending \u003d\u003d null) {\n+            throw new YarnRuntimeException(\n+                \"pendingCountForMetrics not found for key \" + key\n+                    + \" during shutdown\");\n+          }\n+          this.metrics.decrClientPending(this.rmId,\n+              AMRMClientRelayerMetrics.getRequestType(key.getExeType()),\n+              pending);\n+        }\n+      }\n+      for(UpdateContainerRequest req : remotePendingChange.values()) {\n+        this.metrics\n+            .decrClientPending(rmId, req.getContainerUpdateType(), 1);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void shutdown() {\n    // On finish, clear out our pending count from the metrics\n    // and set the shut down flag so no more pending requests get\n    // added\n    synchronized (this) {\n      if (this.shutdown) {\n        LOG.warn(\n            \"Shutdown called twice for AMRMClientRelayer for RM \" + this.rmId);\n        return;\n      }\n      this.shutdown \u003d true;\n      for (Map.Entry\u003cResourceRequestSetKey, ResourceRequestSet\u003e entry\n          : this.remotePendingAsks .entrySet()) {\n        ResourceRequestSetKey key \u003d entry.getKey();\n        if (key.getAllocationRequestId() \u003d\u003d 0) {\n          this.metrics.decrClientPending(this.rmId,\n              AMRMClientRelayerMetrics.getRequestType(key.getExeType()),\n              entry.getValue().getNumContainers());\n        } else {\n          this.askTimeStamp.remove(key.getAllocationRequestId());\n          Integer pending \u003d\n              this.pendingCountForMetrics.remove(key.getAllocationRequestId());\n          if (pending \u003d\u003d null) {\n            throw new YarnRuntimeException(\n                \"pendingCountForMetrics not found for key \" + key\n                    + \" during shutdown\");\n          }\n          this.metrics.decrClientPending(this.rmId,\n              AMRMClientRelayerMetrics.getRequestType(key.getExeType()),\n              pending);\n        }\n      }\n      for(UpdateContainerRequest req : remotePendingChange.values()) {\n        this.metrics\n            .decrClientPending(rmId, req.getContainerUpdateType(), 1);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/AMRMClientRelayer.java"
    }
  }
}