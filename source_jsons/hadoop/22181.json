{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ShuffleSchedulerImpl.java",
  "functionName": "getTotalCopyMillis",
  "functionId": "getTotalCopyMillis___newInterval-Interval",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/ShuffleSchedulerImpl.java",
  "functionStartLine": 610,
  "functionEndLine": 636,
  "numCommitsSeen": 13,
  "timeTaken": 1074,
  "changeHistory": [
    "b9edad64034a9c8a121ec2b37792c190ba561e26"
  ],
  "changeHistoryShort": {
    "b9edad64034a9c8a121ec2b37792c190ba561e26": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b9edad64034a9c8a121ec2b37792c190ba561e26": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-5873. Shuffle bandwidth computation includes time spent waiting for maps. Contributed by Siqi Li\n",
      "commitDate": "15/10/14 8:52 AM",
      "commitName": "b9edad64034a9c8a121ec2b37792c190ba561e26",
      "commitAuthor": "Jason Lowe",
      "diff": "@@ -0,0 +1,27 @@\n+    private long getTotalCopyMillis(Interval newInterval) {\n+      if (newInterval \u003d\u003d null) {\n+        return copyMillis;\n+      }\n+      List\u003cInterval\u003e result \u003d new ArrayList\u003cInterval\u003e(intervals.size() + 1);\n+      for (Interval interval: intervals) {\n+        if (interval.end \u003c newInterval.start) {\n+          result.add(interval);\n+        } else if (interval.start \u003e newInterval.end) {\n+          result.add(newInterval);\n+          newInterval \u003d interval;        \n+        } else {\n+          newInterval \u003d new Interval(\n+              Math.min(interval.start, newInterval.start),\n+              Math.max(newInterval.end, interval.end));\n+        }\n+      }\n+      result.add(newInterval);\n+      intervals \u003d result;\n+      \n+      //compute total millis\n+      long length \u003d 0;\n+      for (Interval interval : intervals) {\n+        length +\u003d interval.getIntervalLength();\n+      }\n+      return length;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private long getTotalCopyMillis(Interval newInterval) {\n      if (newInterval \u003d\u003d null) {\n        return copyMillis;\n      }\n      List\u003cInterval\u003e result \u003d new ArrayList\u003cInterval\u003e(intervals.size() + 1);\n      for (Interval interval: intervals) {\n        if (interval.end \u003c newInterval.start) {\n          result.add(interval);\n        } else if (interval.start \u003e newInterval.end) {\n          result.add(newInterval);\n          newInterval \u003d interval;        \n        } else {\n          newInterval \u003d new Interval(\n              Math.min(interval.start, newInterval.start),\n              Math.max(newInterval.end, interval.end));\n        }\n      }\n      result.add(newInterval);\n      intervals \u003d result;\n      \n      //compute total millis\n      long length \u003d 0;\n      for (Interval interval : intervals) {\n        length +\u003d interval.getIntervalLength();\n      }\n      return length;\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/ShuffleSchedulerImpl.java"
    }
  }
}