{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CapacityScheduler.java",
  "functionName": "normalizeSchedulingRequests",
  "functionId": "normalizeSchedulingRequests___asks-List__SchedulingRequest__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
  "functionStartLine": 1192,
  "functionEndLine": 1204,
  "numCommitsSeen": 239,
  "timeTaken": 4474,
  "changeHistory": [
    "fd6be5898ad1a650e3bceacb8169a53520da57e5",
    "38af23796971193fa529c3d08ffde8fcd6e607b6"
  ],
  "changeHistoryShort": {
    "fd6be5898ad1a650e3bceacb8169a53520da57e5": "Ybodychange",
    "38af23796971193fa529c3d08ffde8fcd6e607b6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "fd6be5898ad1a650e3bceacb8169a53520da57e5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8468. Enable the use of queue based maximum container allocation limit and implement it in FairScheduler. Contributed by Antal BÃ¡lint Steinbach.\n",
      "commitDate": "29/09/18 2:47 AM",
      "commitName": "fd6be5898ad1a650e3bceacb8169a53520da57e5",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "12/09/18 3:31 AM",
      "commitNameOld": "52194351e7df33b8438569c3a032f73d696c534d",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 16.97,
      "commitsBetweenForRepo": 192,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,13 @@\n   private void normalizeSchedulingRequests(List\u003cSchedulingRequest\u003e asks) {\n     if (asks \u003d\u003d null) {\n       return;\n     }\n+    Resource maxAllocation \u003d getMaximumResourceCapability();\n     for (SchedulingRequest ask: asks) {\n       ResourceSizing sizing \u003d ask.getResourceSizing();\n       if (sizing !\u003d null \u0026\u0026 sizing.getResources() !\u003d null) {\n-        sizing.setResources(getNormalizedResource(sizing.getResources()));\n+        sizing.setResources(\n+            getNormalizedResource(sizing.getResources(), maxAllocation));\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void normalizeSchedulingRequests(List\u003cSchedulingRequest\u003e asks) {\n    if (asks \u003d\u003d null) {\n      return;\n    }\n    Resource maxAllocation \u003d getMaximumResourceCapability();\n    for (SchedulingRequest ask: asks) {\n      ResourceSizing sizing \u003d ask.getResourceSizing();\n      if (sizing !\u003d null \u0026\u0026 sizing.getResources() !\u003d null) {\n        sizing.setResources(\n            getNormalizedResource(sizing.getResources(), maxAllocation));\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "38af23796971193fa529c3d08ffde8fcd6e607b6": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6599. Support anti-affinity constraint via AppPlacementAllocator. (Wangda Tan via asuresh)\n",
      "commitDate": "31/01/18 1:30 AM",
      "commitName": "38af23796971193fa529c3d08ffde8fcd6e607b6",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,11 @@\n+  private void normalizeSchedulingRequests(List\u003cSchedulingRequest\u003e asks) {\n+    if (asks \u003d\u003d null) {\n+      return;\n+    }\n+    for (SchedulingRequest ask: asks) {\n+      ResourceSizing sizing \u003d ask.getResourceSizing();\n+      if (sizing !\u003d null \u0026\u0026 sizing.getResources() !\u003d null) {\n+        sizing.setResources(getNormalizedResource(sizing.getResources()));\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void normalizeSchedulingRequests(List\u003cSchedulingRequest\u003e asks) {\n    if (asks \u003d\u003d null) {\n      return;\n    }\n    for (SchedulingRequest ask: asks) {\n      ResourceSizing sizing \u003d ask.getResourceSizing();\n      if (sizing !\u003d null \u0026\u0026 sizing.getResources() !\u003d null) {\n        sizing.setResources(getNormalizedResource(sizing.getResources()));\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java"
    }
  }
}