{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Lz4Decompressor.java",
  "functionName": "decompress",
  "functionId": "decompress___b-byte[]__off-int__len-int",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/lz4/Lz4Decompressor.java",
  "functionStartLine": 207,
  "functionEndLine": 244,
  "numCommitsSeen": 4,
  "timeTaken": 755,
  "changeHistory": [
    "191b56d802b78b8d5ca43e43544b5ecef674a09c"
  ],
  "changeHistoryShort": {
    "191b56d802b78b8d5ca43e43544b5ecef674a09c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "191b56d802b78b8d5ca43e43544b5ecef674a09c": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7657. Add support for LZ4 compression. Contributed by Binglin Chang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1220314 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/12/11 4:54 PM",
      "commitName": "191b56d802b78b8d5ca43e43544b5ecef674a09c",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,38 @@\n+  public synchronized int decompress(byte[] b, int off, int len)\n+      throws IOException {\n+    if (b \u003d\u003d null) {\n+      throw new NullPointerException();\n+    }\n+    if (off \u003c 0 || len \u003c 0 || off \u003e b.length - len) {\n+      throw new ArrayIndexOutOfBoundsException();\n+    }\n+\n+    int n \u003d 0;\n+\n+    // Check if there is uncompressed data\n+    n \u003d uncompressedDirectBuf.remaining();\n+    if (n \u003e 0) {\n+      n \u003d Math.min(n, len);\n+      ((ByteBuffer) uncompressedDirectBuf).get(b, off, n);\n+      return n;\n+    }\n+    if (compressedDirectBufLen \u003e 0) {\n+      // Re-initialize the lz4\u0027s output direct buffer\n+      uncompressedDirectBuf.rewind();\n+      uncompressedDirectBuf.limit(directBufferSize);\n+\n+      // Decompress data\n+      n \u003d decompressBytesDirect();\n+      uncompressedDirectBuf.limit(n);\n+\n+      if (userBufLen \u003c\u003d 0) {\n+        finished \u003d true;\n+      }\n+\n+      // Get atmost \u0027len\u0027 bytes\n+      n \u003d Math.min(n, len);\n+      ((ByteBuffer) uncompressedDirectBuf).get(b, off, n);\n+    }\n+\n+    return n;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized int decompress(byte[] b, int off, int len)\n      throws IOException {\n    if (b \u003d\u003d null) {\n      throw new NullPointerException();\n    }\n    if (off \u003c 0 || len \u003c 0 || off \u003e b.length - len) {\n      throw new ArrayIndexOutOfBoundsException();\n    }\n\n    int n \u003d 0;\n\n    // Check if there is uncompressed data\n    n \u003d uncompressedDirectBuf.remaining();\n    if (n \u003e 0) {\n      n \u003d Math.min(n, len);\n      ((ByteBuffer) uncompressedDirectBuf).get(b, off, n);\n      return n;\n    }\n    if (compressedDirectBufLen \u003e 0) {\n      // Re-initialize the lz4\u0027s output direct buffer\n      uncompressedDirectBuf.rewind();\n      uncompressedDirectBuf.limit(directBufferSize);\n\n      // Decompress data\n      n \u003d decompressBytesDirect();\n      uncompressedDirectBuf.limit(n);\n\n      if (userBufLen \u003c\u003d 0) {\n        finished \u003d true;\n      }\n\n      // Get atmost \u0027len\u0027 bytes\n      n \u003d Math.min(n, len);\n      ((ByteBuffer) uncompressedDirectBuf).get(b, off, n);\n    }\n\n    return n;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/lz4/Lz4Decompressor.java"
    }
  }
}