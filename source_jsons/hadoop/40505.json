{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MultiNodeSortingManager.java",
  "functionName": "getMultiNodeSortIterator",
  "functionId": "getMultiNodeSortIterator___nodes-Collection__N____partition-String__policyName-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/placement/MultiNodeSortingManager.java",
  "functionStartLine": 109,
  "functionEndLine": 138,
  "numCommitsSeen": 2,
  "timeTaken": 1898,
  "changeHistory": [
    "9c3fc3ef2865164aa5f121793ac914cfeb21a181"
  ],
  "changeHistoryShort": {
    "9c3fc3ef2865164aa5f121793ac914cfeb21a181": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9c3fc3ef2865164aa5f121793ac914cfeb21a181": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7494. Add muti-node lookup mechanism and pluggable nodes sorting policies to optimize placement decision. Contributed by Sunil Govindan.\n",
      "commitDate": "21/08/18 7:42 AM",
      "commitName": "9c3fc3ef2865164aa5f121793ac914cfeb21a181",
      "commitAuthor": "Weiwei Yang",
      "diff": "@@ -0,0 +1,30 @@\n+  public Iterator\u003cN\u003e getMultiNodeSortIterator(Collection\u003cN\u003e nodes,\n+      String partition, String policyName) {\n+    // nodeLookupPolicy can be null if app is configured with invalid policy.\n+    // in such cases, use the the first node.\n+    if(policyName \u003d\u003d null) {\n+      LOG.warn(\"Multi Node scheduling is enabled, however invalid class is\"\n+          + \" configured. Valid sorting policy has to be configured in\"\n+          + \" yarn.scheduler.capacity.\u003cqueue\u003e.multi-node-sorting.policy\");\n+      return IteratorUtils.singletonIterator(\n+          nodes.iterator().next());\n+    }\n+\n+    MultiNodeSorter multiNodeSorter \u003d getMultiNodePolicy(policyName);\n+    if (multiNodeSorter \u003d\u003d null) {\n+      LOG.warn(\n+          \"MultiNode policy \u0027\" + policyName + \"\u0027 is configured, however \" +\n+              \"yarn.scheduler.capacity.multi-node-placement-enabled is false\");\n+      return IteratorUtils.singletonIterator(\n+          nodes.iterator().next());\n+    }\n+\n+    MultiNodeLookupPolicy\u003cN\u003e policy \u003d multiNodeSorter\n+        .getMultiNodeLookupPolicy();\n+    // If sorter thread is not running, refresh node set.\n+    if (!multiNodeSorter.isSorterThreadRunning()) {\n+      policy.addAndRefreshNodesSet(nodes, partition);\n+    }\n+\n+    return policy.getPreferredNodeIterator(nodes, partition);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Iterator\u003cN\u003e getMultiNodeSortIterator(Collection\u003cN\u003e nodes,\n      String partition, String policyName) {\n    // nodeLookupPolicy can be null if app is configured with invalid policy.\n    // in such cases, use the the first node.\n    if(policyName \u003d\u003d null) {\n      LOG.warn(\"Multi Node scheduling is enabled, however invalid class is\"\n          + \" configured. Valid sorting policy has to be configured in\"\n          + \" yarn.scheduler.capacity.\u003cqueue\u003e.multi-node-sorting.policy\");\n      return IteratorUtils.singletonIterator(\n          nodes.iterator().next());\n    }\n\n    MultiNodeSorter multiNodeSorter \u003d getMultiNodePolicy(policyName);\n    if (multiNodeSorter \u003d\u003d null) {\n      LOG.warn(\n          \"MultiNode policy \u0027\" + policyName + \"\u0027 is configured, however \" +\n              \"yarn.scheduler.capacity.multi-node-placement-enabled is false\");\n      return IteratorUtils.singletonIterator(\n          nodes.iterator().next());\n    }\n\n    MultiNodeLookupPolicy\u003cN\u003e policy \u003d multiNodeSorter\n        .getMultiNodeLookupPolicy();\n    // If sorter thread is not running, refresh node set.\n    if (!multiNodeSorter.isSorterThreadRunning()) {\n      policy.addAndRefreshNodesSet(nodes, partition);\n    }\n\n    return policy.getPreferredNodeIterator(nodes, partition);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/placement/MultiNodeSortingManager.java"
    }
  }
}