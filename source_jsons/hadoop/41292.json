{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSAppAttempt.java",
  "functionName": "subtractResourcesOnBlacklistedNodes",
  "functionId": "subtractResourcesOnBlacklistedNodes___availableResources-Resource",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
  "functionStartLine": 217,
  "functionEndLine": 227,
  "numCommitsSeen": 76,
  "timeTaken": 3477,
  "changeHistory": [
    "6c25dbcdc0517a825b92fb16444aa1d3761e160c",
    "819224dcf9c683aa52f58633ac8e13663f1916d8",
    "42f90ab885d9693fcc1e52f9637f7de4111110ae",
    "20d389ce61eaacb5ddfb329015f50e96ad894f8d",
    "f9692770a58af0ab082eb7f15da9cbdcd177605b",
    "9d04f26d4c42170ee3dab2f6fb09a94bbf72fc65"
  ],
  "changeHistoryShort": {
    "6c25dbcdc0517a825b92fb16444aa1d3761e160c": "Ybodychange",
    "819224dcf9c683aa52f58633ac8e13663f1916d8": "Ybodychange",
    "42f90ab885d9693fcc1e52f9637f7de4111110ae": "Ybodychange",
    "20d389ce61eaacb5ddfb329015f50e96ad894f8d": "Ybodychange",
    "f9692770a58af0ab082eb7f15da9cbdcd177605b": "Ybodychange",
    "9d04f26d4c42170ee3dab2f6fb09a94bbf72fc65": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6c25dbcdc0517a825b92fb16444aa1d3761e160c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6163. FS Preemption is a trickle for severely starved applications. (kasha)\n",
      "commitDate": "15/02/17 11:16 PM",
      "commitName": "6c25dbcdc0517a825b92fb16444aa1d3761e160c",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "13/02/17 11:26 AM",
      "commitNameOld": "646c6d6509f515b1373288869fb92807fa2ddc9b",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 2.49,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,11 @@\n   private void subtractResourcesOnBlacklistedNodes(\n       Resource availableResources) {\n     if (appSchedulingInfo.getAndResetBlacklistChanged()) {\n       blacklistNodeIds.clear();\n       blacklistNodeIds.addAll(scheduler.getBlacklistedNodes(this));\n     }\n     for (FSSchedulerNode node: blacklistNodeIds) {\n-      Resources.subtractFrom(availableResources,\n+      Resources.subtractFromNonNegative(availableResources,\n           node.getUnallocatedResource());\n     }\n-    if (availableResources.getMemorySize() \u003c 0) {\n-      availableResources.setMemorySize(0);\n-    }\n-    if (availableResources.getVirtualCores() \u003c 0) {\n-      availableResources.setVirtualCores(0);\n-    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void subtractResourcesOnBlacklistedNodes(\n      Resource availableResources) {\n    if (appSchedulingInfo.getAndResetBlacklistChanged()) {\n      blacklistNodeIds.clear();\n      blacklistNodeIds.addAll(scheduler.getBlacklistedNodes(this));\n    }\n    for (FSSchedulerNode node: blacklistNodeIds) {\n      Resources.subtractFromNonNegative(availableResources,\n          node.getUnallocatedResource());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "819224dcf9c683aa52f58633ac8e13663f1916d8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5270. Solve miscellaneous issues caused by YARN-4844. Contributed by Wangda Tan\n",
      "commitDate": "11/07/16 10:36 PM",
      "commitName": "819224dcf9c683aa52f58633ac8e13663f1916d8",
      "commitAuthor": "Jian He",
      "commitDateOld": "10/06/16 10:33 PM",
      "commitNameOld": "5279af7cd4afb090da742a96b5786d9dee6224bc",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 31.0,
      "commitsBetweenForRepo": 316,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n   private void subtractResourcesOnBlacklistedNodes(\n       Resource availableResources) {\n     if (appSchedulingInfo.getAndResetBlacklistChanged()) {\n       blacklistNodeIds.clear();\n       blacklistNodeIds.addAll(scheduler.getBlacklistedNodes(this));\n     }\n     for (FSSchedulerNode node: blacklistNodeIds) {\n       Resources.subtractFrom(availableResources,\n           node.getUnallocatedResource());\n     }\n     if (availableResources.getMemorySize() \u003c 0) {\n-      availableResources.setMemory(0);\n+      availableResources.setMemorySize(0);\n     }\n     if (availableResources.getVirtualCores() \u003c 0) {\n       availableResources.setVirtualCores(0);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void subtractResourcesOnBlacklistedNodes(\n      Resource availableResources) {\n    if (appSchedulingInfo.getAndResetBlacklistChanged()) {\n      blacklistNodeIds.clear();\n      blacklistNodeIds.addAll(scheduler.getBlacklistedNodes(this));\n    }\n    for (FSSchedulerNode node: blacklistNodeIds) {\n      Resources.subtractFrom(availableResources,\n          node.getUnallocatedResource());\n    }\n    if (availableResources.getMemorySize() \u003c 0) {\n      availableResources.setMemorySize(0);\n    }\n    if (availableResources.getVirtualCores() \u003c 0) {\n      availableResources.setVirtualCores(0);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "42f90ab885d9693fcc1e52f9637f7de4111110ae": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4844. Add getMemorySize/getVirtualCoresSize to o.a.h.y.api.records.Resource. Contributed by Wangda Tan.\n",
      "commitDate": "29/05/16 8:54 AM",
      "commitName": "42f90ab885d9693fcc1e52f9637f7de4111110ae",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "23/05/16 2:29 PM",
      "commitNameOld": "6d043aa4cf14bc88b1a19991e3bb0752499312b8",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 5.77,
      "commitsBetweenForRepo": 46,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n   private void subtractResourcesOnBlacklistedNodes(\n       Resource availableResources) {\n     if (appSchedulingInfo.getAndResetBlacklistChanged()) {\n       blacklistNodeIds.clear();\n       blacklistNodeIds.addAll(scheduler.getBlacklistedNodes(this));\n     }\n     for (FSSchedulerNode node: blacklistNodeIds) {\n       Resources.subtractFrom(availableResources,\n           node.getUnallocatedResource());\n     }\n-    if (availableResources.getMemory() \u003c 0) {\n+    if (availableResources.getMemorySize() \u003c 0) {\n       availableResources.setMemory(0);\n     }\n     if (availableResources.getVirtualCores() \u003c 0) {\n       availableResources.setVirtualCores(0);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void subtractResourcesOnBlacklistedNodes(\n      Resource availableResources) {\n    if (appSchedulingInfo.getAndResetBlacklistChanged()) {\n      blacklistNodeIds.clear();\n      blacklistNodeIds.addAll(scheduler.getBlacklistedNodes(this));\n    }\n    for (FSSchedulerNode node: blacklistNodeIds) {\n      Resources.subtractFrom(availableResources,\n          node.getUnallocatedResource());\n    }\n    if (availableResources.getMemorySize() \u003c 0) {\n      availableResources.setMemory(0);\n    }\n    if (availableResources.getVirtualCores() \u003c 0) {\n      availableResources.setVirtualCores(0);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "20d389ce61eaacb5ddfb329015f50e96ad894f8d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4719. Add a helper library to maintain node state and allows common queries. (kasha)\n",
      "commitDate": "14/03/16 2:19 PM",
      "commitName": "20d389ce61eaacb5ddfb329015f50e96ad894f8d",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "28/02/16 9:35 AM",
      "commitNameOld": "f9692770a58af0ab082eb7f15da9cbdcd177605b",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 15.15,
      "commitsBetweenForRepo": 90,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,17 @@\n   private void subtractResourcesOnBlacklistedNodes(\n       Resource availableResources) {\n     if (appSchedulingInfo.getAndResetBlacklistChanged()) {\n       blacklistNodeIds.clear();\n-      scheduler.addBlacklistedNodeIdsToList(this, blacklistNodeIds);\n+      blacklistNodeIds.addAll(scheduler.getBlacklistedNodes(this));\n     }\n-    for (NodeId nodeId: blacklistNodeIds) {\n-      SchedulerNode node \u003d scheduler.getSchedulerNode(nodeId);\n-      if (node !\u003d null) {\n-        Resources.subtractFrom(availableResources,\n-            node.getUnallocatedResource());\n-      }\n+    for (FSSchedulerNode node: blacklistNodeIds) {\n+      Resources.subtractFrom(availableResources,\n+          node.getUnallocatedResource());\n     }\n     if (availableResources.getMemory() \u003c 0) {\n       availableResources.setMemory(0);\n     }\n     if (availableResources.getVirtualCores() \u003c 0) {\n       availableResources.setVirtualCores(0);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void subtractResourcesOnBlacklistedNodes(\n      Resource availableResources) {\n    if (appSchedulingInfo.getAndResetBlacklistChanged()) {\n      blacklistNodeIds.clear();\n      blacklistNodeIds.addAll(scheduler.getBlacklistedNodes(this));\n    }\n    for (FSSchedulerNode node: blacklistNodeIds) {\n      Resources.subtractFrom(availableResources,\n          node.getUnallocatedResource());\n    }\n    if (availableResources.getMemory() \u003c 0) {\n      availableResources.setMemory(0);\n    }\n    if (availableResources.getVirtualCores() \u003c 0) {\n      availableResources.setVirtualCores(0);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "f9692770a58af0ab082eb7f15da9cbdcd177605b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4718. Rename variables in SchedulerNode to reduce ambiguity post YARN-1011. (Inigo Goiri via kasha)\n",
      "commitDate": "28/02/16 9:35 AM",
      "commitName": "f9692770a58af0ab082eb7f15da9cbdcd177605b",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "17/02/16 8:55 PM",
      "commitNameOld": "7de70680fe44967e2afc92ba4c92f8e7afa7b151",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 10.53,
      "commitsBetweenForRepo": 72,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n   private void subtractResourcesOnBlacklistedNodes(\n       Resource availableResources) {\n     if (appSchedulingInfo.getAndResetBlacklistChanged()) {\n       blacklistNodeIds.clear();\n       scheduler.addBlacklistedNodeIdsToList(this, blacklistNodeIds);\n     }\n     for (NodeId nodeId: blacklistNodeIds) {\n       SchedulerNode node \u003d scheduler.getSchedulerNode(nodeId);\n       if (node !\u003d null) {\n         Resources.subtractFrom(availableResources,\n-            node.getAvailableResource());\n+            node.getUnallocatedResource());\n       }\n     }\n     if (availableResources.getMemory() \u003c 0) {\n       availableResources.setMemory(0);\n     }\n     if (availableResources.getVirtualCores() \u003c 0) {\n       availableResources.setVirtualCores(0);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void subtractResourcesOnBlacklistedNodes(\n      Resource availableResources) {\n    if (appSchedulingInfo.getAndResetBlacklistChanged()) {\n      blacklistNodeIds.clear();\n      scheduler.addBlacklistedNodeIdsToList(this, blacklistNodeIds);\n    }\n    for (NodeId nodeId: blacklistNodeIds) {\n      SchedulerNode node \u003d scheduler.getSchedulerNode(nodeId);\n      if (node !\u003d null) {\n        Resources.subtractFrom(availableResources,\n            node.getUnallocatedResource());\n      }\n    }\n    if (availableResources.getMemory() \u003c 0) {\n      availableResources.setMemory(0);\n    }\n    if (availableResources.getVirtualCores() \u003c 0) {\n      availableResources.setVirtualCores(0);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "9d04f26d4c42170ee3dab2f6fb09a94bbf72fc65": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3446. FairScheduler headroom calculation should exclude nodes in the blacklist. (Zhihai Xu via kasha)\n",
      "commitDate": "14/01/16 8:33 AM",
      "commitName": "9d04f26d4c42170ee3dab2f6fb09a94bbf72fc65",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,20 @@\n+  private void subtractResourcesOnBlacklistedNodes(\n+      Resource availableResources) {\n+    if (appSchedulingInfo.getAndResetBlacklistChanged()) {\n+      blacklistNodeIds.clear();\n+      scheduler.addBlacklistedNodeIdsToList(this, blacklistNodeIds);\n+    }\n+    for (NodeId nodeId: blacklistNodeIds) {\n+      SchedulerNode node \u003d scheduler.getSchedulerNode(nodeId);\n+      if (node !\u003d null) {\n+        Resources.subtractFrom(availableResources,\n+            node.getAvailableResource());\n+      }\n+    }\n+    if (availableResources.getMemory() \u003c 0) {\n+      availableResources.setMemory(0);\n+    }\n+    if (availableResources.getVirtualCores() \u003c 0) {\n+      availableResources.setVirtualCores(0);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void subtractResourcesOnBlacklistedNodes(\n      Resource availableResources) {\n    if (appSchedulingInfo.getAndResetBlacklistChanged()) {\n      blacklistNodeIds.clear();\n      scheduler.addBlacklistedNodeIdsToList(this, blacklistNodeIds);\n    }\n    for (NodeId nodeId: blacklistNodeIds) {\n      SchedulerNode node \u003d scheduler.getSchedulerNode(nodeId);\n      if (node !\u003d null) {\n        Resources.subtractFrom(availableResources,\n            node.getAvailableResource());\n      }\n    }\n    if (availableResources.getMemory() \u003c 0) {\n      availableResources.setMemory(0);\n    }\n    if (availableResources.getVirtualCores() \u003c 0) {\n      availableResources.setVirtualCores(0);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java"
    }
  }
}