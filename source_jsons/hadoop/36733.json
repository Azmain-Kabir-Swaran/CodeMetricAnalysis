{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NodesPage.java",
  "functionName": "render",
  "functionId": "render___html-Block",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/NodesPage.java",
  "functionStartLine": 66,
  "functionEndLine": 210,
  "numCommitsSeen": 38,
  "timeTaken": 12646,
  "changeHistory": [
    "d43df31751bcadab77d42b31e3e1dd5748b471b5",
    "6d7b44c48923c3e8a9c4d38f6803664dd5d61c2a",
    "9b81cb0537e5b731581e6a375bf0a59abf61c359",
    "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397",
    "b0aace21b1ef3436ba9d516186208fee9a9ceef2",
    "0aafc122d401a2f49d0f9ca556343f9ba871e979",
    "776b549e2ac20a68a5513cbcaac0edc33233dc03",
    "1de56b0448d332717c8316c621b4f6af542a85cc",
    "d7e7f6aa03c67b6a6ccf664adcb06d90bc963e58",
    "d1c6accb6f87b08975175580e15f1ff1fe29ab04",
    "9cedad11d8d2197a54732667a15344983de5c437",
    "946456c6d88780abe0251b098dd771e9e1e93ab3",
    "b7442bf92eb6e1ae64a0f9644ffc2eee4597aad5",
    "746ad6e989683fe1dfc61a611702c9be7b5cd264",
    "5f57b904f550515693d93a2959e663b0d0260696",
    "241d3b3a50c6af92f023d8b2c24598f4813f4674",
    "392c3aaea8e8f156b76e418157fa347256283c56",
    "d5e0a09721a5156fa2ee51ac1c32fbfd9905b8fb",
    "1f9a0fd927ab7bef13db42dd80368fd781b3d2d1",
    "990cffdcfa9349fff0cee144b1d0e5267c40f63d",
    "7b687dda098c94b55c9848827cfc2d6326b6f9b6",
    "af8514eef297574240652672d048748100c97733",
    "4bca22005f48f426b9bc7cf36d435ead470a2590",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "407cfa3b56a0645d64d2d9af305f6ef24307e775",
    "47df4697ba22becdab530c0695b9a2a100798f94",
    "3343494d6c39883485d29c7439831ab3c1c7248d",
    "3cdc100369ce920701fdddae12d7f7247332b3f3",
    "0ea8570be578be60e2f32849900a1c50506d78d3",
    "9a4e890f4aadc921fa468fd1292d215704429b61",
    "cc42ccf02acca7b5a971fa5ca0986e075169fc8c",
    "dd34c4e24f5430003561318880d2a7b9e6be6e16",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "d43df31751bcadab77d42b31e3e1dd5748b471b5": "Ybodychange",
    "6d7b44c48923c3e8a9c4d38f6803664dd5d61c2a": "Ybodychange",
    "9b81cb0537e5b731581e6a375bf0a59abf61c359": "Ybodychange",
    "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397": "Ybodychange",
    "b0aace21b1ef3436ba9d516186208fee9a9ceef2": "Ybodychange",
    "0aafc122d401a2f49d0f9ca556343f9ba871e979": "Ybodychange",
    "776b549e2ac20a68a5513cbcaac0edc33233dc03": "Ybodychange",
    "1de56b0448d332717c8316c621b4f6af542a85cc": "Ybodychange",
    "d7e7f6aa03c67b6a6ccf664adcb06d90bc963e58": "Ybodychange",
    "d1c6accb6f87b08975175580e15f1ff1fe29ab04": "Ybodychange",
    "9cedad11d8d2197a54732667a15344983de5c437": "Ybodychange",
    "946456c6d88780abe0251b098dd771e9e1e93ab3": "Ybodychange",
    "b7442bf92eb6e1ae64a0f9644ffc2eee4597aad5": "Ybodychange",
    "746ad6e989683fe1dfc61a611702c9be7b5cd264": "Ybodychange",
    "5f57b904f550515693d93a2959e663b0d0260696": "Ybodychange",
    "241d3b3a50c6af92f023d8b2c24598f4813f4674": "Ybodychange",
    "392c3aaea8e8f156b76e418157fa347256283c56": "Ybodychange",
    "d5e0a09721a5156fa2ee51ac1c32fbfd9905b8fb": "Ybodychange",
    "1f9a0fd927ab7bef13db42dd80368fd781b3d2d1": "Ybodychange",
    "990cffdcfa9349fff0cee144b1d0e5267c40f63d": "Ybodychange",
    "7b687dda098c94b55c9848827cfc2d6326b6f9b6": "Ybodychange",
    "af8514eef297574240652672d048748100c97733": "Ybodychange",
    "4bca22005f48f426b9bc7cf36d435ead470a2590": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "407cfa3b56a0645d64d2d9af305f6ef24307e775": "Ybodychange",
    "47df4697ba22becdab530c0695b9a2a100798f94": "Ybodychange",
    "3343494d6c39883485d29c7439831ab3c1c7248d": "Ybodychange",
    "3cdc100369ce920701fdddae12d7f7247332b3f3": "Ybodychange",
    "0ea8570be578be60e2f32849900a1c50506d78d3": "Ybodychange",
    "9a4e890f4aadc921fa468fd1292d215704429b61": "Ybodychange",
    "cc42ccf02acca7b5a971fa5ca0986e075169fc8c": "Ybodychange",
    "dd34c4e24f5430003561318880d2a7b9e6be6e16": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d43df31751bcadab77d42b31e3e1dd5748b471b5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9210. RM nodes web page can not display node info. Contributed by Jiandan Yang.\n",
      "commitDate": "21/01/19 6:23 PM",
      "commitName": "d43df31751bcadab77d42b31e3e1dd5748b471b5",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "30/11/18 10:13 AM",
      "commitNameOld": "6d7b44c48923c3e8a9c4d38f6803664dd5d61c2a",
      "commitAuthorOld": "Jonathan Hung",
      "daysBetweenCommits": 52.34,
      "commitsBetweenForRepo": 322,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,146 +1,145 @@\n     protected void render(Block html) {\n       html.__(MetricsOverviewTable.class);\n \n       ResourceScheduler sched \u003d rm.getResourceScheduler();\n \n       String type \u003d $(NODE_STATE);\n       String labelFilter \u003d $(NODE_LABEL, CommonNodeLabelsManager.ANY).trim();\n       Hamlet.TR\u003cHamlet.THEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e trbody \u003d\n           html.table(\"#nodes\").thead().tr()\n               .th(\".nodelabels\", \"Node Labels\")\n               .th(\".rack\", \"Rack\")\n               .th(\".state\", \"Node State\")\n               .th(\".nodeaddress\", \"Node Address\")\n               .th(\".nodehttpaddress\", \"Node HTTP Address\")\n               .th(\".lastHealthUpdate\", \"Last health-update\")\n               .th(\".healthReport\", \"Health-report\");\n \n       if (!this.opportunisticContainersEnabled) {\n         trbody.th(\".containers\", \"Containers\")\n             .th(\".allocationTags\", \"Allocation Tags\")\n             .th(\".mem\", \"Mem Used\")\n             .th(\".mem\", \"Mem Avail\")\n             .th(\".vcores\", \"VCores Used\")\n             .th(\".vcores\", \"VCores Avail\");\n       } else {\n         trbody.th(\".containers\", \"Running Containers (G)\")\n             .th(\".allocationTags\", \"Allocation Tags\")\n             .th(\".mem\", \"Mem Used (G)\")\n             .th(\".mem\", \"Mem Avail (G)\")\n             .th(\".vcores\", \"VCores Used (G)\")\n             .th(\".vcores\", \"VCores Avail (G)\")\n             .th(\".containers\", \"Running Containers (O)\")\n             .th(\".mem\", \"Mem Used (O)\")\n             .th(\".vcores\", \"VCores Used (O)\")\n             .th(\".containers\", \"Queued Containers\");\n       }\n \n       TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n           trbody.th(\".nodeManagerVersion\", \"Version\").__().__().tbody();\n \n       NodeState stateFilter \u003d null;\n       if (type !\u003d null \u0026\u0026 !type.isEmpty()) {\n         stateFilter \u003d NodeState.valueOf(StringUtils.toUpperCase(type));\n       }\n       Collection\u003cRMNode\u003e rmNodes \u003d this.rm.getRMContext().getRMNodes().values();\n       boolean isInactive \u003d false;\n       if (stateFilter !\u003d null) {\n         switch (stateFilter) {\n         case DECOMMISSIONED:\n         case LOST:\n         case REBOOTED:\n         case SHUTDOWN:\n           rmNodes \u003d this.rm.getRMContext().getInactiveRMNodes().values();\n           isInactive \u003d true;\n           break;\n         case DECOMMISSIONING:\n           // Do nothing\n           break;\n         default:\n           LOG.debug(\"Unexpected state filter for inactive RM node\");\n         }\n       }\n       StringBuilder nodeTableData \u003d new StringBuilder(\"[\\n\");\n       for (RMNode ni : rmNodes) {\n         if (stateFilter !\u003d null) {\n           NodeState state \u003d ni.getState();\n           if (!stateFilter.equals(state)) {\n             continue;\n           }\n         } else {\n           // No filter. User is asking for all nodes. Make sure you skip the\n           // unhealthy nodes.\n           if (ni.getState() \u003d\u003d NodeState.UNHEALTHY) {\n             continue;\n           }\n         }\n         // Besides state, we need to filter label as well.\n         if (!labelFilter.equals(RMNodeLabelsManager.ANY)) {\n           if (labelFilter.isEmpty()) {\n             // Empty label filter means only shows nodes without label\n             if (!ni.getNodeLabels().isEmpty()) {\n               continue;\n             }\n           } else if (!ni.getNodeLabels().contains(labelFilter)) {\n             // Only nodes have given label can show on web page.\n             continue;\n           }\n         }\n         NodeInfo info \u003d new NodeInfo(ni, sched);\n         int usedMemory \u003d (int) info.getUsedMemory();\n         int availableMemory \u003d (int) info.getAvailableMemory();\n         nodeTableData.append(\"[\\\"\")\n             .append(StringUtils.join(\",\", info.getNodeLabels())).append(\"\\\",\\\"\")\n             .append(info.getRack()).append(\"\\\",\\\"\").append(info.getState())\n             .append(\"\\\",\\\"\").append(info.getNodeId());\n         if (isInactive) {\n           nodeTableData.append(\"\\\",\\\"\").append(\"N/A\").append(\"\\\",\\\"\");\n         } else {\n           String httpAddress \u003d info.getNodeHTTPAddress();\n           nodeTableData.append(\"\\\",\\\"\u003ca \").append(\"href\u003d\u0027\" + \"//\" + httpAddress)\n               .append(\"\u0027\u003e\").append(httpAddress).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\");\n         }\n         nodeTableData.append(\"\u003cbr title\u003d\u0027\")\n             .append(String.valueOf(info.getLastHealthUpdate())).append(\"\u0027\u003e\")\n             .append(Times.format(info.getLastHealthUpdate())).append(\"\\\",\\\"\")\n-            .append(info.getHealthReport()).append(\"\\\",\\\"\")\n+            .append(StringEscapeUtils.escapeJava(info.getHealthReport())).append(\"\\\",\\\"\")\n             .append(String.valueOf(info.getNumContainers())).append(\"\\\",\\\"\")\n             .append(info.getAllocationTagsSummary()).append(\"\\\",\\\"\")\n             .append(\"\u003cbr title\u003d\u0027\").append(String.valueOf(usedMemory))\n             .append(\"\u0027\u003e\").append(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))\n             .append(\"\\\",\\\"\").append(\"\u003cbr title\u003d\u0027\")\n             .append(String.valueOf(availableMemory)).append(\"\u0027\u003e\")\n             .append(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))\n             .append(\"\\\",\\\"\").append(String.valueOf(info.getUsedVirtualCores()))\n             .append(\"\\\",\\\"\")\n             .append(String.valueOf(info.getAvailableVirtualCores()))\n             .append(\"\\\",\\\"\");\n \n         // If opportunistic containers are enabled, add extra fields.\n         if (this.opportunisticContainersEnabled) {\n           nodeTableData\n               .append(String.valueOf(info.getNumRunningOpportContainers()))\n               .append(\"\\\",\\\"\").append(\"\u003cbr title\u003d\u0027\")\n               .append(String.valueOf(info.getUsedMemoryOpportGB())).append(\"\u0027\u003e\")\n               .append(StringUtils.byteDesc(\n                   info.getUsedMemoryOpportGB() * BYTES_IN_GB))\n               .append(\"\\\",\\\"\")\n               .append(String.valueOf(info.getUsedVirtualCoresOpport()))\n               .append(\"\\\",\\\"\")\n               .append(String.valueOf(info.getNumQueuedContainers()))\n               .append(\"\\\",\\\"\");\n         }\n \n         nodeTableData.append(ni.getNodeManagerVersion())\n             .append(\"\\\"],\\n\");\n       }\n       if (nodeTableData.charAt(nodeTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n         nodeTableData.delete(nodeTableData.length() - 2,\n             nodeTableData.length() - 1);\n       }\n       nodeTableData.append(\"]\");\n-      String nodeTableDataEscaped \u003d StringEscapeUtils.escapeJava(nodeTableData.toString());\n       html.script().$type(\"text/javascript\")\n-          .__(\"var nodeTableData\u003d\" + nodeTableDataEscaped).__();\n+          .__(\"var nodeTableData\u003d\" + nodeTableData).__();\n       tbody.__().__();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      html.__(MetricsOverviewTable.class);\n\n      ResourceScheduler sched \u003d rm.getResourceScheduler();\n\n      String type \u003d $(NODE_STATE);\n      String labelFilter \u003d $(NODE_LABEL, CommonNodeLabelsManager.ANY).trim();\n      Hamlet.TR\u003cHamlet.THEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e trbody \u003d\n          html.table(\"#nodes\").thead().tr()\n              .th(\".nodelabels\", \"Node Labels\")\n              .th(\".rack\", \"Rack\")\n              .th(\".state\", \"Node State\")\n              .th(\".nodeaddress\", \"Node Address\")\n              .th(\".nodehttpaddress\", \"Node HTTP Address\")\n              .th(\".lastHealthUpdate\", \"Last health-update\")\n              .th(\".healthReport\", \"Health-report\");\n\n      if (!this.opportunisticContainersEnabled) {\n        trbody.th(\".containers\", \"Containers\")\n            .th(\".allocationTags\", \"Allocation Tags\")\n            .th(\".mem\", \"Mem Used\")\n            .th(\".mem\", \"Mem Avail\")\n            .th(\".vcores\", \"VCores Used\")\n            .th(\".vcores\", \"VCores Avail\");\n      } else {\n        trbody.th(\".containers\", \"Running Containers (G)\")\n            .th(\".allocationTags\", \"Allocation Tags\")\n            .th(\".mem\", \"Mem Used (G)\")\n            .th(\".mem\", \"Mem Avail (G)\")\n            .th(\".vcores\", \"VCores Used (G)\")\n            .th(\".vcores\", \"VCores Avail (G)\")\n            .th(\".containers\", \"Running Containers (O)\")\n            .th(\".mem\", \"Mem Used (O)\")\n            .th(\".vcores\", \"VCores Used (O)\")\n            .th(\".containers\", \"Queued Containers\");\n      }\n\n      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n          trbody.th(\".nodeManagerVersion\", \"Version\").__().__().tbody();\n\n      NodeState stateFilter \u003d null;\n      if (type !\u003d null \u0026\u0026 !type.isEmpty()) {\n        stateFilter \u003d NodeState.valueOf(StringUtils.toUpperCase(type));\n      }\n      Collection\u003cRMNode\u003e rmNodes \u003d this.rm.getRMContext().getRMNodes().values();\n      boolean isInactive \u003d false;\n      if (stateFilter !\u003d null) {\n        switch (stateFilter) {\n        case DECOMMISSIONED:\n        case LOST:\n        case REBOOTED:\n        case SHUTDOWN:\n          rmNodes \u003d this.rm.getRMContext().getInactiveRMNodes().values();\n          isInactive \u003d true;\n          break;\n        case DECOMMISSIONING:\n          // Do nothing\n          break;\n        default:\n          LOG.debug(\"Unexpected state filter for inactive RM node\");\n        }\n      }\n      StringBuilder nodeTableData \u003d new StringBuilder(\"[\\n\");\n      for (RMNode ni : rmNodes) {\n        if (stateFilter !\u003d null) {\n          NodeState state \u003d ni.getState();\n          if (!stateFilter.equals(state)) {\n            continue;\n          }\n        } else {\n          // No filter. User is asking for all nodes. Make sure you skip the\n          // unhealthy nodes.\n          if (ni.getState() \u003d\u003d NodeState.UNHEALTHY) {\n            continue;\n          }\n        }\n        // Besides state, we need to filter label as well.\n        if (!labelFilter.equals(RMNodeLabelsManager.ANY)) {\n          if (labelFilter.isEmpty()) {\n            // Empty label filter means only shows nodes without label\n            if (!ni.getNodeLabels().isEmpty()) {\n              continue;\n            }\n          } else if (!ni.getNodeLabels().contains(labelFilter)) {\n            // Only nodes have given label can show on web page.\n            continue;\n          }\n        }\n        NodeInfo info \u003d new NodeInfo(ni, sched);\n        int usedMemory \u003d (int) info.getUsedMemory();\n        int availableMemory \u003d (int) info.getAvailableMemory();\n        nodeTableData.append(\"[\\\"\")\n            .append(StringUtils.join(\",\", info.getNodeLabels())).append(\"\\\",\\\"\")\n            .append(info.getRack()).append(\"\\\",\\\"\").append(info.getState())\n            .append(\"\\\",\\\"\").append(info.getNodeId());\n        if (isInactive) {\n          nodeTableData.append(\"\\\",\\\"\").append(\"N/A\").append(\"\\\",\\\"\");\n        } else {\n          String httpAddress \u003d info.getNodeHTTPAddress();\n          nodeTableData.append(\"\\\",\\\"\u003ca \").append(\"href\u003d\u0027\" + \"//\" + httpAddress)\n              .append(\"\u0027\u003e\").append(httpAddress).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\");\n        }\n        nodeTableData.append(\"\u003cbr title\u003d\u0027\")\n            .append(String.valueOf(info.getLastHealthUpdate())).append(\"\u0027\u003e\")\n            .append(Times.format(info.getLastHealthUpdate())).append(\"\\\",\\\"\")\n            .append(StringEscapeUtils.escapeJava(info.getHealthReport())).append(\"\\\",\\\"\")\n            .append(String.valueOf(info.getNumContainers())).append(\"\\\",\\\"\")\n            .append(info.getAllocationTagsSummary()).append(\"\\\",\\\"\")\n            .append(\"\u003cbr title\u003d\u0027\").append(String.valueOf(usedMemory))\n            .append(\"\u0027\u003e\").append(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))\n            .append(\"\\\",\\\"\").append(\"\u003cbr title\u003d\u0027\")\n            .append(String.valueOf(availableMemory)).append(\"\u0027\u003e\")\n            .append(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))\n            .append(\"\\\",\\\"\").append(String.valueOf(info.getUsedVirtualCores()))\n            .append(\"\\\",\\\"\")\n            .append(String.valueOf(info.getAvailableVirtualCores()))\n            .append(\"\\\",\\\"\");\n\n        // If opportunistic containers are enabled, add extra fields.\n        if (this.opportunisticContainersEnabled) {\n          nodeTableData\n              .append(String.valueOf(info.getNumRunningOpportContainers()))\n              .append(\"\\\",\\\"\").append(\"\u003cbr title\u003d\u0027\")\n              .append(String.valueOf(info.getUsedMemoryOpportGB())).append(\"\u0027\u003e\")\n              .append(StringUtils.byteDesc(\n                  info.getUsedMemoryOpportGB() * BYTES_IN_GB))\n              .append(\"\\\",\\\"\")\n              .append(String.valueOf(info.getUsedVirtualCoresOpport()))\n              .append(\"\\\",\\\"\")\n              .append(String.valueOf(info.getNumQueuedContainers()))\n              .append(\"\\\",\\\"\");\n        }\n\n        nodeTableData.append(ni.getNodeManagerVersion())\n            .append(\"\\\"],\\n\");\n      }\n      if (nodeTableData.charAt(nodeTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n        nodeTableData.delete(nodeTableData.length() - 2,\n            nodeTableData.length() - 1);\n      }\n      nodeTableData.append(\"]\");\n      html.script().$type(\"text/javascript\")\n          .__(\"var nodeTableData\u003d\" + nodeTableData).__();\n      tbody.__().__();\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/NodesPage.java",
      "extendedDetails": {}
    },
    "6d7b44c48923c3e8a9c4d38f6803664dd5d61c2a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9036. Escape newlines in health report in YARN UI. Contributed by Keqiu Hu\n",
      "commitDate": "30/11/18 10:13 AM",
      "commitName": "6d7b44c48923c3e8a9c4d38f6803664dd5d61c2a",
      "commitAuthor": "Jonathan Hung",
      "commitDateOld": "26/04/18 1:54 PM",
      "commitNameOld": "7ac0abdc13abce6dd95643c48d84254ac9fcec78",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 217.89,
      "commitsBetweenForRepo": 1774,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,145 +1,146 @@\n     protected void render(Block html) {\n       html.__(MetricsOverviewTable.class);\n \n       ResourceScheduler sched \u003d rm.getResourceScheduler();\n \n       String type \u003d $(NODE_STATE);\n       String labelFilter \u003d $(NODE_LABEL, CommonNodeLabelsManager.ANY).trim();\n       Hamlet.TR\u003cHamlet.THEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e trbody \u003d\n           html.table(\"#nodes\").thead().tr()\n               .th(\".nodelabels\", \"Node Labels\")\n               .th(\".rack\", \"Rack\")\n               .th(\".state\", \"Node State\")\n               .th(\".nodeaddress\", \"Node Address\")\n               .th(\".nodehttpaddress\", \"Node HTTP Address\")\n               .th(\".lastHealthUpdate\", \"Last health-update\")\n               .th(\".healthReport\", \"Health-report\");\n \n       if (!this.opportunisticContainersEnabled) {\n         trbody.th(\".containers\", \"Containers\")\n             .th(\".allocationTags\", \"Allocation Tags\")\n             .th(\".mem\", \"Mem Used\")\n             .th(\".mem\", \"Mem Avail\")\n             .th(\".vcores\", \"VCores Used\")\n             .th(\".vcores\", \"VCores Avail\");\n       } else {\n         trbody.th(\".containers\", \"Running Containers (G)\")\n             .th(\".allocationTags\", \"Allocation Tags\")\n             .th(\".mem\", \"Mem Used (G)\")\n             .th(\".mem\", \"Mem Avail (G)\")\n             .th(\".vcores\", \"VCores Used (G)\")\n             .th(\".vcores\", \"VCores Avail (G)\")\n             .th(\".containers\", \"Running Containers (O)\")\n             .th(\".mem\", \"Mem Used (O)\")\n             .th(\".vcores\", \"VCores Used (O)\")\n             .th(\".containers\", \"Queued Containers\");\n       }\n \n       TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n           trbody.th(\".nodeManagerVersion\", \"Version\").__().__().tbody();\n \n       NodeState stateFilter \u003d null;\n       if (type !\u003d null \u0026\u0026 !type.isEmpty()) {\n         stateFilter \u003d NodeState.valueOf(StringUtils.toUpperCase(type));\n       }\n       Collection\u003cRMNode\u003e rmNodes \u003d this.rm.getRMContext().getRMNodes().values();\n       boolean isInactive \u003d false;\n       if (stateFilter !\u003d null) {\n         switch (stateFilter) {\n         case DECOMMISSIONED:\n         case LOST:\n         case REBOOTED:\n         case SHUTDOWN:\n           rmNodes \u003d this.rm.getRMContext().getInactiveRMNodes().values();\n           isInactive \u003d true;\n           break;\n         case DECOMMISSIONING:\n           // Do nothing\n           break;\n         default:\n           LOG.debug(\"Unexpected state filter for inactive RM node\");\n         }\n       }\n       StringBuilder nodeTableData \u003d new StringBuilder(\"[\\n\");\n       for (RMNode ni : rmNodes) {\n         if (stateFilter !\u003d null) {\n           NodeState state \u003d ni.getState();\n           if (!stateFilter.equals(state)) {\n             continue;\n           }\n         } else {\n           // No filter. User is asking for all nodes. Make sure you skip the\n           // unhealthy nodes.\n           if (ni.getState() \u003d\u003d NodeState.UNHEALTHY) {\n             continue;\n           }\n         }\n         // Besides state, we need to filter label as well.\n         if (!labelFilter.equals(RMNodeLabelsManager.ANY)) {\n           if (labelFilter.isEmpty()) {\n             // Empty label filter means only shows nodes without label\n             if (!ni.getNodeLabels().isEmpty()) {\n               continue;\n             }\n           } else if (!ni.getNodeLabels().contains(labelFilter)) {\n             // Only nodes have given label can show on web page.\n             continue;\n           }\n         }\n         NodeInfo info \u003d new NodeInfo(ni, sched);\n         int usedMemory \u003d (int) info.getUsedMemory();\n         int availableMemory \u003d (int) info.getAvailableMemory();\n         nodeTableData.append(\"[\\\"\")\n             .append(StringUtils.join(\",\", info.getNodeLabels())).append(\"\\\",\\\"\")\n             .append(info.getRack()).append(\"\\\",\\\"\").append(info.getState())\n             .append(\"\\\",\\\"\").append(info.getNodeId());\n         if (isInactive) {\n           nodeTableData.append(\"\\\",\\\"\").append(\"N/A\").append(\"\\\",\\\"\");\n         } else {\n           String httpAddress \u003d info.getNodeHTTPAddress();\n           nodeTableData.append(\"\\\",\\\"\u003ca \").append(\"href\u003d\u0027\" + \"//\" + httpAddress)\n               .append(\"\u0027\u003e\").append(httpAddress).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\");\n         }\n         nodeTableData.append(\"\u003cbr title\u003d\u0027\")\n             .append(String.valueOf(info.getLastHealthUpdate())).append(\"\u0027\u003e\")\n             .append(Times.format(info.getLastHealthUpdate())).append(\"\\\",\\\"\")\n             .append(info.getHealthReport()).append(\"\\\",\\\"\")\n             .append(String.valueOf(info.getNumContainers())).append(\"\\\",\\\"\")\n             .append(info.getAllocationTagsSummary()).append(\"\\\",\\\"\")\n             .append(\"\u003cbr title\u003d\u0027\").append(String.valueOf(usedMemory))\n             .append(\"\u0027\u003e\").append(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))\n             .append(\"\\\",\\\"\").append(\"\u003cbr title\u003d\u0027\")\n             .append(String.valueOf(availableMemory)).append(\"\u0027\u003e\")\n             .append(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))\n             .append(\"\\\",\\\"\").append(String.valueOf(info.getUsedVirtualCores()))\n             .append(\"\\\",\\\"\")\n             .append(String.valueOf(info.getAvailableVirtualCores()))\n             .append(\"\\\",\\\"\");\n \n         // If opportunistic containers are enabled, add extra fields.\n         if (this.opportunisticContainersEnabled) {\n           nodeTableData\n               .append(String.valueOf(info.getNumRunningOpportContainers()))\n               .append(\"\\\",\\\"\").append(\"\u003cbr title\u003d\u0027\")\n               .append(String.valueOf(info.getUsedMemoryOpportGB())).append(\"\u0027\u003e\")\n               .append(StringUtils.byteDesc(\n                   info.getUsedMemoryOpportGB() * BYTES_IN_GB))\n               .append(\"\\\",\\\"\")\n               .append(String.valueOf(info.getUsedVirtualCoresOpport()))\n               .append(\"\\\",\\\"\")\n               .append(String.valueOf(info.getNumQueuedContainers()))\n               .append(\"\\\",\\\"\");\n         }\n \n         nodeTableData.append(ni.getNodeManagerVersion())\n             .append(\"\\\"],\\n\");\n       }\n       if (nodeTableData.charAt(nodeTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n         nodeTableData.delete(nodeTableData.length() - 2,\n             nodeTableData.length() - 1);\n       }\n       nodeTableData.append(\"]\");\n+      String nodeTableDataEscaped \u003d StringEscapeUtils.escapeJava(nodeTableData.toString());\n       html.script().$type(\"text/javascript\")\n-          .__(\"var nodeTableData\u003d\" + nodeTableData).__();\n+          .__(\"var nodeTableData\u003d\" + nodeTableDataEscaped).__();\n       tbody.__().__();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      html.__(MetricsOverviewTable.class);\n\n      ResourceScheduler sched \u003d rm.getResourceScheduler();\n\n      String type \u003d $(NODE_STATE);\n      String labelFilter \u003d $(NODE_LABEL, CommonNodeLabelsManager.ANY).trim();\n      Hamlet.TR\u003cHamlet.THEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e trbody \u003d\n          html.table(\"#nodes\").thead().tr()\n              .th(\".nodelabels\", \"Node Labels\")\n              .th(\".rack\", \"Rack\")\n              .th(\".state\", \"Node State\")\n              .th(\".nodeaddress\", \"Node Address\")\n              .th(\".nodehttpaddress\", \"Node HTTP Address\")\n              .th(\".lastHealthUpdate\", \"Last health-update\")\n              .th(\".healthReport\", \"Health-report\");\n\n      if (!this.opportunisticContainersEnabled) {\n        trbody.th(\".containers\", \"Containers\")\n            .th(\".allocationTags\", \"Allocation Tags\")\n            .th(\".mem\", \"Mem Used\")\n            .th(\".mem\", \"Mem Avail\")\n            .th(\".vcores\", \"VCores Used\")\n            .th(\".vcores\", \"VCores Avail\");\n      } else {\n        trbody.th(\".containers\", \"Running Containers (G)\")\n            .th(\".allocationTags\", \"Allocation Tags\")\n            .th(\".mem\", \"Mem Used (G)\")\n            .th(\".mem\", \"Mem Avail (G)\")\n            .th(\".vcores\", \"VCores Used (G)\")\n            .th(\".vcores\", \"VCores Avail (G)\")\n            .th(\".containers\", \"Running Containers (O)\")\n            .th(\".mem\", \"Mem Used (O)\")\n            .th(\".vcores\", \"VCores Used (O)\")\n            .th(\".containers\", \"Queued Containers\");\n      }\n\n      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n          trbody.th(\".nodeManagerVersion\", \"Version\").__().__().tbody();\n\n      NodeState stateFilter \u003d null;\n      if (type !\u003d null \u0026\u0026 !type.isEmpty()) {\n        stateFilter \u003d NodeState.valueOf(StringUtils.toUpperCase(type));\n      }\n      Collection\u003cRMNode\u003e rmNodes \u003d this.rm.getRMContext().getRMNodes().values();\n      boolean isInactive \u003d false;\n      if (stateFilter !\u003d null) {\n        switch (stateFilter) {\n        case DECOMMISSIONED:\n        case LOST:\n        case REBOOTED:\n        case SHUTDOWN:\n          rmNodes \u003d this.rm.getRMContext().getInactiveRMNodes().values();\n          isInactive \u003d true;\n          break;\n        case DECOMMISSIONING:\n          // Do nothing\n          break;\n        default:\n          LOG.debug(\"Unexpected state filter for inactive RM node\");\n        }\n      }\n      StringBuilder nodeTableData \u003d new StringBuilder(\"[\\n\");\n      for (RMNode ni : rmNodes) {\n        if (stateFilter !\u003d null) {\n          NodeState state \u003d ni.getState();\n          if (!stateFilter.equals(state)) {\n            continue;\n          }\n        } else {\n          // No filter. User is asking for all nodes. Make sure you skip the\n          // unhealthy nodes.\n          if (ni.getState() \u003d\u003d NodeState.UNHEALTHY) {\n            continue;\n          }\n        }\n        // Besides state, we need to filter label as well.\n        if (!labelFilter.equals(RMNodeLabelsManager.ANY)) {\n          if (labelFilter.isEmpty()) {\n            // Empty label filter means only shows nodes without label\n            if (!ni.getNodeLabels().isEmpty()) {\n              continue;\n            }\n          } else if (!ni.getNodeLabels().contains(labelFilter)) {\n            // Only nodes have given label can show on web page.\n            continue;\n          }\n        }\n        NodeInfo info \u003d new NodeInfo(ni, sched);\n        int usedMemory \u003d (int) info.getUsedMemory();\n        int availableMemory \u003d (int) info.getAvailableMemory();\n        nodeTableData.append(\"[\\\"\")\n            .append(StringUtils.join(\",\", info.getNodeLabels())).append(\"\\\",\\\"\")\n            .append(info.getRack()).append(\"\\\",\\\"\").append(info.getState())\n            .append(\"\\\",\\\"\").append(info.getNodeId());\n        if (isInactive) {\n          nodeTableData.append(\"\\\",\\\"\").append(\"N/A\").append(\"\\\",\\\"\");\n        } else {\n          String httpAddress \u003d info.getNodeHTTPAddress();\n          nodeTableData.append(\"\\\",\\\"\u003ca \").append(\"href\u003d\u0027\" + \"//\" + httpAddress)\n              .append(\"\u0027\u003e\").append(httpAddress).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\");\n        }\n        nodeTableData.append(\"\u003cbr title\u003d\u0027\")\n            .append(String.valueOf(info.getLastHealthUpdate())).append(\"\u0027\u003e\")\n            .append(Times.format(info.getLastHealthUpdate())).append(\"\\\",\\\"\")\n            .append(info.getHealthReport()).append(\"\\\",\\\"\")\n            .append(String.valueOf(info.getNumContainers())).append(\"\\\",\\\"\")\n            .append(info.getAllocationTagsSummary()).append(\"\\\",\\\"\")\n            .append(\"\u003cbr title\u003d\u0027\").append(String.valueOf(usedMemory))\n            .append(\"\u0027\u003e\").append(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))\n            .append(\"\\\",\\\"\").append(\"\u003cbr title\u003d\u0027\")\n            .append(String.valueOf(availableMemory)).append(\"\u0027\u003e\")\n            .append(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))\n            .append(\"\\\",\\\"\").append(String.valueOf(info.getUsedVirtualCores()))\n            .append(\"\\\",\\\"\")\n            .append(String.valueOf(info.getAvailableVirtualCores()))\n            .append(\"\\\",\\\"\");\n\n        // If opportunistic containers are enabled, add extra fields.\n        if (this.opportunisticContainersEnabled) {\n          nodeTableData\n              .append(String.valueOf(info.getNumRunningOpportContainers()))\n              .append(\"\\\",\\\"\").append(\"\u003cbr title\u003d\u0027\")\n              .append(String.valueOf(info.getUsedMemoryOpportGB())).append(\"\u0027\u003e\")\n              .append(StringUtils.byteDesc(\n                  info.getUsedMemoryOpportGB() * BYTES_IN_GB))\n              .append(\"\\\",\\\"\")\n              .append(String.valueOf(info.getUsedVirtualCoresOpport()))\n              .append(\"\\\",\\\"\")\n              .append(String.valueOf(info.getNumQueuedContainers()))\n              .append(\"\\\",\\\"\");\n        }\n\n        nodeTableData.append(ni.getNodeManagerVersion())\n            .append(\"\\\"],\\n\");\n      }\n      if (nodeTableData.charAt(nodeTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n        nodeTableData.delete(nodeTableData.length() - 2,\n            nodeTableData.length() - 1);\n      }\n      nodeTableData.append(\"]\");\n      String nodeTableDataEscaped \u003d StringEscapeUtils.escapeJava(nodeTableData.toString());\n      html.script().$type(\"text/javascript\")\n          .__(\"var nodeTableData\u003d\" + nodeTableDataEscaped).__();\n      tbody.__().__();\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/NodesPage.java",
      "extendedDetails": {}
    },
    "9b81cb0537e5b731581e6a375bf0a59abf61c359": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7779. Display allocation tags in RM web UI and expose same through REST API. Contributed by Weiwei Yang.\n",
      "commitDate": "31/01/18 1:30 AM",
      "commitName": "9b81cb0537e5b731581e6a375bf0a59abf61c359",
      "commitAuthor": "Sunil G",
      "commitDateOld": "27/07/17 5:10 PM",
      "commitNameOld": "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 187.39,
      "commitsBetweenForRepo": 1448,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,142 +1,145 @@\n     protected void render(Block html) {\n       html.__(MetricsOverviewTable.class);\n \n       ResourceScheduler sched \u003d rm.getResourceScheduler();\n \n       String type \u003d $(NODE_STATE);\n       String labelFilter \u003d $(NODE_LABEL, CommonNodeLabelsManager.ANY).trim();\n       Hamlet.TR\u003cHamlet.THEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e trbody \u003d\n           html.table(\"#nodes\").thead().tr()\n               .th(\".nodelabels\", \"Node Labels\")\n               .th(\".rack\", \"Rack\")\n               .th(\".state\", \"Node State\")\n               .th(\".nodeaddress\", \"Node Address\")\n               .th(\".nodehttpaddress\", \"Node HTTP Address\")\n               .th(\".lastHealthUpdate\", \"Last health-update\")\n               .th(\".healthReport\", \"Health-report\");\n \n       if (!this.opportunisticContainersEnabled) {\n         trbody.th(\".containers\", \"Containers\")\n+            .th(\".allocationTags\", \"Allocation Tags\")\n             .th(\".mem\", \"Mem Used\")\n             .th(\".mem\", \"Mem Avail\")\n             .th(\".vcores\", \"VCores Used\")\n             .th(\".vcores\", \"VCores Avail\");\n       } else {\n         trbody.th(\".containers\", \"Running Containers (G)\")\n+            .th(\".allocationTags\", \"Allocation Tags\")\n             .th(\".mem\", \"Mem Used (G)\")\n             .th(\".mem\", \"Mem Avail (G)\")\n             .th(\".vcores\", \"VCores Used (G)\")\n             .th(\".vcores\", \"VCores Avail (G)\")\n             .th(\".containers\", \"Running Containers (O)\")\n             .th(\".mem\", \"Mem Used (O)\")\n             .th(\".vcores\", \"VCores Used (O)\")\n             .th(\".containers\", \"Queued Containers\");\n       }\n \n       TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n           trbody.th(\".nodeManagerVersion\", \"Version\").__().__().tbody();\n \n       NodeState stateFilter \u003d null;\n       if (type !\u003d null \u0026\u0026 !type.isEmpty()) {\n         stateFilter \u003d NodeState.valueOf(StringUtils.toUpperCase(type));\n       }\n       Collection\u003cRMNode\u003e rmNodes \u003d this.rm.getRMContext().getRMNodes().values();\n       boolean isInactive \u003d false;\n       if (stateFilter !\u003d null) {\n         switch (stateFilter) {\n         case DECOMMISSIONED:\n         case LOST:\n         case REBOOTED:\n         case SHUTDOWN:\n           rmNodes \u003d this.rm.getRMContext().getInactiveRMNodes().values();\n           isInactive \u003d true;\n           break;\n         case DECOMMISSIONING:\n           // Do nothing\n           break;\n         default:\n           LOG.debug(\"Unexpected state filter for inactive RM node\");\n         }\n       }\n       StringBuilder nodeTableData \u003d new StringBuilder(\"[\\n\");\n       for (RMNode ni : rmNodes) {\n         if (stateFilter !\u003d null) {\n           NodeState state \u003d ni.getState();\n           if (!stateFilter.equals(state)) {\n             continue;\n           }\n         } else {\n           // No filter. User is asking for all nodes. Make sure you skip the\n           // unhealthy nodes.\n           if (ni.getState() \u003d\u003d NodeState.UNHEALTHY) {\n             continue;\n           }\n         }\n         // Besides state, we need to filter label as well.\n         if (!labelFilter.equals(RMNodeLabelsManager.ANY)) {\n           if (labelFilter.isEmpty()) {\n             // Empty label filter means only shows nodes without label\n             if (!ni.getNodeLabels().isEmpty()) {\n               continue;\n             }\n           } else if (!ni.getNodeLabels().contains(labelFilter)) {\n             // Only nodes have given label can show on web page.\n             continue;\n           }\n         }\n         NodeInfo info \u003d new NodeInfo(ni, sched);\n         int usedMemory \u003d (int) info.getUsedMemory();\n         int availableMemory \u003d (int) info.getAvailableMemory();\n         nodeTableData.append(\"[\\\"\")\n             .append(StringUtils.join(\",\", info.getNodeLabels())).append(\"\\\",\\\"\")\n             .append(info.getRack()).append(\"\\\",\\\"\").append(info.getState())\n             .append(\"\\\",\\\"\").append(info.getNodeId());\n         if (isInactive) {\n           nodeTableData.append(\"\\\",\\\"\").append(\"N/A\").append(\"\\\",\\\"\");\n         } else {\n           String httpAddress \u003d info.getNodeHTTPAddress();\n           nodeTableData.append(\"\\\",\\\"\u003ca \").append(\"href\u003d\u0027\" + \"//\" + httpAddress)\n               .append(\"\u0027\u003e\").append(httpAddress).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\");\n         }\n         nodeTableData.append(\"\u003cbr title\u003d\u0027\")\n             .append(String.valueOf(info.getLastHealthUpdate())).append(\"\u0027\u003e\")\n             .append(Times.format(info.getLastHealthUpdate())).append(\"\\\",\\\"\")\n             .append(info.getHealthReport()).append(\"\\\",\\\"\")\n             .append(String.valueOf(info.getNumContainers())).append(\"\\\",\\\"\")\n+            .append(info.getAllocationTagsSummary()).append(\"\\\",\\\"\")\n             .append(\"\u003cbr title\u003d\u0027\").append(String.valueOf(usedMemory))\n             .append(\"\u0027\u003e\").append(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))\n             .append(\"\\\",\\\"\").append(\"\u003cbr title\u003d\u0027\")\n             .append(String.valueOf(availableMemory)).append(\"\u0027\u003e\")\n             .append(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))\n             .append(\"\\\",\\\"\").append(String.valueOf(info.getUsedVirtualCores()))\n             .append(\"\\\",\\\"\")\n             .append(String.valueOf(info.getAvailableVirtualCores()))\n             .append(\"\\\",\\\"\");\n \n         // If opportunistic containers are enabled, add extra fields.\n         if (this.opportunisticContainersEnabled) {\n           nodeTableData\n               .append(String.valueOf(info.getNumRunningOpportContainers()))\n               .append(\"\\\",\\\"\").append(\"\u003cbr title\u003d\u0027\")\n               .append(String.valueOf(info.getUsedMemoryOpportGB())).append(\"\u0027\u003e\")\n               .append(StringUtils.byteDesc(\n                   info.getUsedMemoryOpportGB() * BYTES_IN_GB))\n               .append(\"\\\",\\\"\")\n               .append(String.valueOf(info.getUsedVirtualCoresOpport()))\n               .append(\"\\\",\\\"\")\n               .append(String.valueOf(info.getNumQueuedContainers()))\n               .append(\"\\\",\\\"\");\n         }\n \n         nodeTableData.append(ni.getNodeManagerVersion())\n             .append(\"\\\"],\\n\");\n       }\n       if (nodeTableData.charAt(nodeTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n         nodeTableData.delete(nodeTableData.length() - 2,\n             nodeTableData.length() - 1);\n       }\n       nodeTableData.append(\"]\");\n       html.script().$type(\"text/javascript\")\n           .__(\"var nodeTableData\u003d\" + nodeTableData).__();\n       tbody.__().__();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      html.__(MetricsOverviewTable.class);\n\n      ResourceScheduler sched \u003d rm.getResourceScheduler();\n\n      String type \u003d $(NODE_STATE);\n      String labelFilter \u003d $(NODE_LABEL, CommonNodeLabelsManager.ANY).trim();\n      Hamlet.TR\u003cHamlet.THEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e trbody \u003d\n          html.table(\"#nodes\").thead().tr()\n              .th(\".nodelabels\", \"Node Labels\")\n              .th(\".rack\", \"Rack\")\n              .th(\".state\", \"Node State\")\n              .th(\".nodeaddress\", \"Node Address\")\n              .th(\".nodehttpaddress\", \"Node HTTP Address\")\n              .th(\".lastHealthUpdate\", \"Last health-update\")\n              .th(\".healthReport\", \"Health-report\");\n\n      if (!this.opportunisticContainersEnabled) {\n        trbody.th(\".containers\", \"Containers\")\n            .th(\".allocationTags\", \"Allocation Tags\")\n            .th(\".mem\", \"Mem Used\")\n            .th(\".mem\", \"Mem Avail\")\n            .th(\".vcores\", \"VCores Used\")\n            .th(\".vcores\", \"VCores Avail\");\n      } else {\n        trbody.th(\".containers\", \"Running Containers (G)\")\n            .th(\".allocationTags\", \"Allocation Tags\")\n            .th(\".mem\", \"Mem Used (G)\")\n            .th(\".mem\", \"Mem Avail (G)\")\n            .th(\".vcores\", \"VCores Used (G)\")\n            .th(\".vcores\", \"VCores Avail (G)\")\n            .th(\".containers\", \"Running Containers (O)\")\n            .th(\".mem\", \"Mem Used (O)\")\n            .th(\".vcores\", \"VCores Used (O)\")\n            .th(\".containers\", \"Queued Containers\");\n      }\n\n      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n          trbody.th(\".nodeManagerVersion\", \"Version\").__().__().tbody();\n\n      NodeState stateFilter \u003d null;\n      if (type !\u003d null \u0026\u0026 !type.isEmpty()) {\n        stateFilter \u003d NodeState.valueOf(StringUtils.toUpperCase(type));\n      }\n      Collection\u003cRMNode\u003e rmNodes \u003d this.rm.getRMContext().getRMNodes().values();\n      boolean isInactive \u003d false;\n      if (stateFilter !\u003d null) {\n        switch (stateFilter) {\n        case DECOMMISSIONED:\n        case LOST:\n        case REBOOTED:\n        case SHUTDOWN:\n          rmNodes \u003d this.rm.getRMContext().getInactiveRMNodes().values();\n          isInactive \u003d true;\n          break;\n        case DECOMMISSIONING:\n          // Do nothing\n          break;\n        default:\n          LOG.debug(\"Unexpected state filter for inactive RM node\");\n        }\n      }\n      StringBuilder nodeTableData \u003d new StringBuilder(\"[\\n\");\n      for (RMNode ni : rmNodes) {\n        if (stateFilter !\u003d null) {\n          NodeState state \u003d ni.getState();\n          if (!stateFilter.equals(state)) {\n            continue;\n          }\n        } else {\n          // No filter. User is asking for all nodes. Make sure you skip the\n          // unhealthy nodes.\n          if (ni.getState() \u003d\u003d NodeState.UNHEALTHY) {\n            continue;\n          }\n        }\n        // Besides state, we need to filter label as well.\n        if (!labelFilter.equals(RMNodeLabelsManager.ANY)) {\n          if (labelFilter.isEmpty()) {\n            // Empty label filter means only shows nodes without label\n            if (!ni.getNodeLabels().isEmpty()) {\n              continue;\n            }\n          } else if (!ni.getNodeLabels().contains(labelFilter)) {\n            // Only nodes have given label can show on web page.\n            continue;\n          }\n        }\n        NodeInfo info \u003d new NodeInfo(ni, sched);\n        int usedMemory \u003d (int) info.getUsedMemory();\n        int availableMemory \u003d (int) info.getAvailableMemory();\n        nodeTableData.append(\"[\\\"\")\n            .append(StringUtils.join(\",\", info.getNodeLabels())).append(\"\\\",\\\"\")\n            .append(info.getRack()).append(\"\\\",\\\"\").append(info.getState())\n            .append(\"\\\",\\\"\").append(info.getNodeId());\n        if (isInactive) {\n          nodeTableData.append(\"\\\",\\\"\").append(\"N/A\").append(\"\\\",\\\"\");\n        } else {\n          String httpAddress \u003d info.getNodeHTTPAddress();\n          nodeTableData.append(\"\\\",\\\"\u003ca \").append(\"href\u003d\u0027\" + \"//\" + httpAddress)\n              .append(\"\u0027\u003e\").append(httpAddress).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\");\n        }\n        nodeTableData.append(\"\u003cbr title\u003d\u0027\")\n            .append(String.valueOf(info.getLastHealthUpdate())).append(\"\u0027\u003e\")\n            .append(Times.format(info.getLastHealthUpdate())).append(\"\\\",\\\"\")\n            .append(info.getHealthReport()).append(\"\\\",\\\"\")\n            .append(String.valueOf(info.getNumContainers())).append(\"\\\",\\\"\")\n            .append(info.getAllocationTagsSummary()).append(\"\\\",\\\"\")\n            .append(\"\u003cbr title\u003d\u0027\").append(String.valueOf(usedMemory))\n            .append(\"\u0027\u003e\").append(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))\n            .append(\"\\\",\\\"\").append(\"\u003cbr title\u003d\u0027\")\n            .append(String.valueOf(availableMemory)).append(\"\u0027\u003e\")\n            .append(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))\n            .append(\"\\\",\\\"\").append(String.valueOf(info.getUsedVirtualCores()))\n            .append(\"\\\",\\\"\")\n            .append(String.valueOf(info.getAvailableVirtualCores()))\n            .append(\"\\\",\\\"\");\n\n        // If opportunistic containers are enabled, add extra fields.\n        if (this.opportunisticContainersEnabled) {\n          nodeTableData\n              .append(String.valueOf(info.getNumRunningOpportContainers()))\n              .append(\"\\\",\\\"\").append(\"\u003cbr title\u003d\u0027\")\n              .append(String.valueOf(info.getUsedMemoryOpportGB())).append(\"\u0027\u003e\")\n              .append(StringUtils.byteDesc(\n                  info.getUsedMemoryOpportGB() * BYTES_IN_GB))\n              .append(\"\\\",\\\"\")\n              .append(String.valueOf(info.getUsedVirtualCoresOpport()))\n              .append(\"\\\",\\\"\")\n              .append(String.valueOf(info.getNumQueuedContainers()))\n              .append(\"\\\",\\\"\");\n        }\n\n        nodeTableData.append(ni.getNodeManagerVersion())\n            .append(\"\\\"],\\n\");\n      }\n      if (nodeTableData.charAt(nodeTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n        nodeTableData.delete(nodeTableData.length() - 2,\n            nodeTableData.length() - 1);\n      }\n      nodeTableData.append(\"]\");\n      html.script().$type(\"text/javascript\")\n          .__(\"var nodeTableData\u003d\" + nodeTableData).__();\n      tbody.__().__();\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/NodesPage.java",
      "extendedDetails": {}
    },
    "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11875. [JDK9] Adding a second copy of Hamlet without _ as a one-character identifier.\n",
      "commitDate": "27/07/17 5:10 PM",
      "commitName": "38c6fa5c7a61c7f6d4d2db5f12f9c60d477fb397",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "09/12/16 4:41 PM",
      "commitNameOld": "b0aace21b1ef3436ba9d516186208fee9a9ceef2",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 229.98,
      "commitsBetweenForRepo": 1171,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,142 +1,142 @@\n     protected void render(Block html) {\n-      html._(MetricsOverviewTable.class);\n+      html.__(MetricsOverviewTable.class);\n \n       ResourceScheduler sched \u003d rm.getResourceScheduler();\n \n       String type \u003d $(NODE_STATE);\n       String labelFilter \u003d $(NODE_LABEL, CommonNodeLabelsManager.ANY).trim();\n       Hamlet.TR\u003cHamlet.THEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e trbody \u003d\n           html.table(\"#nodes\").thead().tr()\n               .th(\".nodelabels\", \"Node Labels\")\n               .th(\".rack\", \"Rack\")\n               .th(\".state\", \"Node State\")\n               .th(\".nodeaddress\", \"Node Address\")\n               .th(\".nodehttpaddress\", \"Node HTTP Address\")\n               .th(\".lastHealthUpdate\", \"Last health-update\")\n               .th(\".healthReport\", \"Health-report\");\n \n       if (!this.opportunisticContainersEnabled) {\n         trbody.th(\".containers\", \"Containers\")\n             .th(\".mem\", \"Mem Used\")\n             .th(\".mem\", \"Mem Avail\")\n             .th(\".vcores\", \"VCores Used\")\n             .th(\".vcores\", \"VCores Avail\");\n       } else {\n         trbody.th(\".containers\", \"Running Containers (G)\")\n             .th(\".mem\", \"Mem Used (G)\")\n             .th(\".mem\", \"Mem Avail (G)\")\n             .th(\".vcores\", \"VCores Used (G)\")\n             .th(\".vcores\", \"VCores Avail (G)\")\n             .th(\".containers\", \"Running Containers (O)\")\n             .th(\".mem\", \"Mem Used (O)\")\n             .th(\".vcores\", \"VCores Used (O)\")\n             .th(\".containers\", \"Queued Containers\");\n       }\n \n       TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n-          trbody.th(\".nodeManagerVersion\", \"Version\")._()._().tbody();\n+          trbody.th(\".nodeManagerVersion\", \"Version\").__().__().tbody();\n \n       NodeState stateFilter \u003d null;\n       if (type !\u003d null \u0026\u0026 !type.isEmpty()) {\n         stateFilter \u003d NodeState.valueOf(StringUtils.toUpperCase(type));\n       }\n       Collection\u003cRMNode\u003e rmNodes \u003d this.rm.getRMContext().getRMNodes().values();\n       boolean isInactive \u003d false;\n       if (stateFilter !\u003d null) {\n         switch (stateFilter) {\n         case DECOMMISSIONED:\n         case LOST:\n         case REBOOTED:\n         case SHUTDOWN:\n           rmNodes \u003d this.rm.getRMContext().getInactiveRMNodes().values();\n           isInactive \u003d true;\n           break;\n         case DECOMMISSIONING:\n           // Do nothing\n           break;\n         default:\n           LOG.debug(\"Unexpected state filter for inactive RM node\");\n         }\n       }\n       StringBuilder nodeTableData \u003d new StringBuilder(\"[\\n\");\n       for (RMNode ni : rmNodes) {\n         if (stateFilter !\u003d null) {\n           NodeState state \u003d ni.getState();\n           if (!stateFilter.equals(state)) {\n             continue;\n           }\n         } else {\n           // No filter. User is asking for all nodes. Make sure you skip the\n           // unhealthy nodes.\n           if (ni.getState() \u003d\u003d NodeState.UNHEALTHY) {\n             continue;\n           }\n         }\n         // Besides state, we need to filter label as well.\n         if (!labelFilter.equals(RMNodeLabelsManager.ANY)) {\n           if (labelFilter.isEmpty()) {\n             // Empty label filter means only shows nodes without label\n             if (!ni.getNodeLabels().isEmpty()) {\n               continue;\n             }\n           } else if (!ni.getNodeLabels().contains(labelFilter)) {\n             // Only nodes have given label can show on web page.\n             continue;\n           }\n         }\n         NodeInfo info \u003d new NodeInfo(ni, sched);\n         int usedMemory \u003d (int) info.getUsedMemory();\n         int availableMemory \u003d (int) info.getAvailableMemory();\n         nodeTableData.append(\"[\\\"\")\n             .append(StringUtils.join(\",\", info.getNodeLabels())).append(\"\\\",\\\"\")\n             .append(info.getRack()).append(\"\\\",\\\"\").append(info.getState())\n             .append(\"\\\",\\\"\").append(info.getNodeId());\n         if (isInactive) {\n           nodeTableData.append(\"\\\",\\\"\").append(\"N/A\").append(\"\\\",\\\"\");\n         } else {\n           String httpAddress \u003d info.getNodeHTTPAddress();\n           nodeTableData.append(\"\\\",\\\"\u003ca \").append(\"href\u003d\u0027\" + \"//\" + httpAddress)\n               .append(\"\u0027\u003e\").append(httpAddress).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\");\n         }\n         nodeTableData.append(\"\u003cbr title\u003d\u0027\")\n             .append(String.valueOf(info.getLastHealthUpdate())).append(\"\u0027\u003e\")\n             .append(Times.format(info.getLastHealthUpdate())).append(\"\\\",\\\"\")\n             .append(info.getHealthReport()).append(\"\\\",\\\"\")\n             .append(String.valueOf(info.getNumContainers())).append(\"\\\",\\\"\")\n             .append(\"\u003cbr title\u003d\u0027\").append(String.valueOf(usedMemory))\n             .append(\"\u0027\u003e\").append(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))\n             .append(\"\\\",\\\"\").append(\"\u003cbr title\u003d\u0027\")\n             .append(String.valueOf(availableMemory)).append(\"\u0027\u003e\")\n             .append(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))\n             .append(\"\\\",\\\"\").append(String.valueOf(info.getUsedVirtualCores()))\n             .append(\"\\\",\\\"\")\n             .append(String.valueOf(info.getAvailableVirtualCores()))\n             .append(\"\\\",\\\"\");\n \n         // If opportunistic containers are enabled, add extra fields.\n         if (this.opportunisticContainersEnabled) {\n           nodeTableData\n               .append(String.valueOf(info.getNumRunningOpportContainers()))\n               .append(\"\\\",\\\"\").append(\"\u003cbr title\u003d\u0027\")\n               .append(String.valueOf(info.getUsedMemoryOpportGB())).append(\"\u0027\u003e\")\n               .append(StringUtils.byteDesc(\n                   info.getUsedMemoryOpportGB() * BYTES_IN_GB))\n               .append(\"\\\",\\\"\")\n               .append(String.valueOf(info.getUsedVirtualCoresOpport()))\n               .append(\"\\\",\\\"\")\n               .append(String.valueOf(info.getNumQueuedContainers()))\n               .append(\"\\\",\\\"\");\n         }\n \n         nodeTableData.append(ni.getNodeManagerVersion())\n             .append(\"\\\"],\\n\");\n       }\n       if (nodeTableData.charAt(nodeTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n         nodeTableData.delete(nodeTableData.length() - 2,\n             nodeTableData.length() - 1);\n       }\n       nodeTableData.append(\"]\");\n       html.script().$type(\"text/javascript\")\n-          ._(\"var nodeTableData\u003d\" + nodeTableData)._();\n-      tbody._()._();\n+          .__(\"var nodeTableData\u003d\" + nodeTableData).__();\n+      tbody.__().__();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      html.__(MetricsOverviewTable.class);\n\n      ResourceScheduler sched \u003d rm.getResourceScheduler();\n\n      String type \u003d $(NODE_STATE);\n      String labelFilter \u003d $(NODE_LABEL, CommonNodeLabelsManager.ANY).trim();\n      Hamlet.TR\u003cHamlet.THEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e trbody \u003d\n          html.table(\"#nodes\").thead().tr()\n              .th(\".nodelabels\", \"Node Labels\")\n              .th(\".rack\", \"Rack\")\n              .th(\".state\", \"Node State\")\n              .th(\".nodeaddress\", \"Node Address\")\n              .th(\".nodehttpaddress\", \"Node HTTP Address\")\n              .th(\".lastHealthUpdate\", \"Last health-update\")\n              .th(\".healthReport\", \"Health-report\");\n\n      if (!this.opportunisticContainersEnabled) {\n        trbody.th(\".containers\", \"Containers\")\n            .th(\".mem\", \"Mem Used\")\n            .th(\".mem\", \"Mem Avail\")\n            .th(\".vcores\", \"VCores Used\")\n            .th(\".vcores\", \"VCores Avail\");\n      } else {\n        trbody.th(\".containers\", \"Running Containers (G)\")\n            .th(\".mem\", \"Mem Used (G)\")\n            .th(\".mem\", \"Mem Avail (G)\")\n            .th(\".vcores\", \"VCores Used (G)\")\n            .th(\".vcores\", \"VCores Avail (G)\")\n            .th(\".containers\", \"Running Containers (O)\")\n            .th(\".mem\", \"Mem Used (O)\")\n            .th(\".vcores\", \"VCores Used (O)\")\n            .th(\".containers\", \"Queued Containers\");\n      }\n\n      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n          trbody.th(\".nodeManagerVersion\", \"Version\").__().__().tbody();\n\n      NodeState stateFilter \u003d null;\n      if (type !\u003d null \u0026\u0026 !type.isEmpty()) {\n        stateFilter \u003d NodeState.valueOf(StringUtils.toUpperCase(type));\n      }\n      Collection\u003cRMNode\u003e rmNodes \u003d this.rm.getRMContext().getRMNodes().values();\n      boolean isInactive \u003d false;\n      if (stateFilter !\u003d null) {\n        switch (stateFilter) {\n        case DECOMMISSIONED:\n        case LOST:\n        case REBOOTED:\n        case SHUTDOWN:\n          rmNodes \u003d this.rm.getRMContext().getInactiveRMNodes().values();\n          isInactive \u003d true;\n          break;\n        case DECOMMISSIONING:\n          // Do nothing\n          break;\n        default:\n          LOG.debug(\"Unexpected state filter for inactive RM node\");\n        }\n      }\n      StringBuilder nodeTableData \u003d new StringBuilder(\"[\\n\");\n      for (RMNode ni : rmNodes) {\n        if (stateFilter !\u003d null) {\n          NodeState state \u003d ni.getState();\n          if (!stateFilter.equals(state)) {\n            continue;\n          }\n        } else {\n          // No filter. User is asking for all nodes. Make sure you skip the\n          // unhealthy nodes.\n          if (ni.getState() \u003d\u003d NodeState.UNHEALTHY) {\n            continue;\n          }\n        }\n        // Besides state, we need to filter label as well.\n        if (!labelFilter.equals(RMNodeLabelsManager.ANY)) {\n          if (labelFilter.isEmpty()) {\n            // Empty label filter means only shows nodes without label\n            if (!ni.getNodeLabels().isEmpty()) {\n              continue;\n            }\n          } else if (!ni.getNodeLabels().contains(labelFilter)) {\n            // Only nodes have given label can show on web page.\n            continue;\n          }\n        }\n        NodeInfo info \u003d new NodeInfo(ni, sched);\n        int usedMemory \u003d (int) info.getUsedMemory();\n        int availableMemory \u003d (int) info.getAvailableMemory();\n        nodeTableData.append(\"[\\\"\")\n            .append(StringUtils.join(\",\", info.getNodeLabels())).append(\"\\\",\\\"\")\n            .append(info.getRack()).append(\"\\\",\\\"\").append(info.getState())\n            .append(\"\\\",\\\"\").append(info.getNodeId());\n        if (isInactive) {\n          nodeTableData.append(\"\\\",\\\"\").append(\"N/A\").append(\"\\\",\\\"\");\n        } else {\n          String httpAddress \u003d info.getNodeHTTPAddress();\n          nodeTableData.append(\"\\\",\\\"\u003ca \").append(\"href\u003d\u0027\" + \"//\" + httpAddress)\n              .append(\"\u0027\u003e\").append(httpAddress).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\");\n        }\n        nodeTableData.append(\"\u003cbr title\u003d\u0027\")\n            .append(String.valueOf(info.getLastHealthUpdate())).append(\"\u0027\u003e\")\n            .append(Times.format(info.getLastHealthUpdate())).append(\"\\\",\\\"\")\n            .append(info.getHealthReport()).append(\"\\\",\\\"\")\n            .append(String.valueOf(info.getNumContainers())).append(\"\\\",\\\"\")\n            .append(\"\u003cbr title\u003d\u0027\").append(String.valueOf(usedMemory))\n            .append(\"\u0027\u003e\").append(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))\n            .append(\"\\\",\\\"\").append(\"\u003cbr title\u003d\u0027\")\n            .append(String.valueOf(availableMemory)).append(\"\u0027\u003e\")\n            .append(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))\n            .append(\"\\\",\\\"\").append(String.valueOf(info.getUsedVirtualCores()))\n            .append(\"\\\",\\\"\")\n            .append(String.valueOf(info.getAvailableVirtualCores()))\n            .append(\"\\\",\\\"\");\n\n        // If opportunistic containers are enabled, add extra fields.\n        if (this.opportunisticContainersEnabled) {\n          nodeTableData\n              .append(String.valueOf(info.getNumRunningOpportContainers()))\n              .append(\"\\\",\\\"\").append(\"\u003cbr title\u003d\u0027\")\n              .append(String.valueOf(info.getUsedMemoryOpportGB())).append(\"\u0027\u003e\")\n              .append(StringUtils.byteDesc(\n                  info.getUsedMemoryOpportGB() * BYTES_IN_GB))\n              .append(\"\\\",\\\"\")\n              .append(String.valueOf(info.getUsedVirtualCoresOpport()))\n              .append(\"\\\",\\\"\")\n              .append(String.valueOf(info.getNumQueuedContainers()))\n              .append(\"\\\",\\\"\");\n        }\n\n        nodeTableData.append(ni.getNodeManagerVersion())\n            .append(\"\\\"],\\n\");\n      }\n      if (nodeTableData.charAt(nodeTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n        nodeTableData.delete(nodeTableData.length() - 2,\n            nodeTableData.length() - 1);\n      }\n      nodeTableData.append(\"]\");\n      html.script().$type(\"text/javascript\")\n          .__(\"var nodeTableData\u003d\" + nodeTableData).__();\n      tbody.__().__();\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/NodesPage.java",
      "extendedDetails": {}
    },
    "b0aace21b1ef3436ba9d516186208fee9a9ceef2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5982. Simplify opportunistic container parameters and metrics. (Konstantinos Karanasos via asuresh)\n",
      "commitDate": "09/12/16 4:41 PM",
      "commitName": "b0aace21b1ef3436ba9d516186208fee9a9ceef2",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "04/11/16 7:31 AM",
      "commitNameOld": "0aafc122d401a2f49d0f9ca556343f9ba871e979",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 35.42,
      "commitsBetweenForRepo": 263,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,141 +1,142 @@\n     protected void render(Block html) {\n       html._(MetricsOverviewTable.class);\n \n       ResourceScheduler sched \u003d rm.getResourceScheduler();\n \n       String type \u003d $(NODE_STATE);\n       String labelFilter \u003d $(NODE_LABEL, CommonNodeLabelsManager.ANY).trim();\n       Hamlet.TR\u003cHamlet.THEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e trbody \u003d\n           html.table(\"#nodes\").thead().tr()\n               .th(\".nodelabels\", \"Node Labels\")\n               .th(\".rack\", \"Rack\")\n               .th(\".state\", \"Node State\")\n               .th(\".nodeaddress\", \"Node Address\")\n               .th(\".nodehttpaddress\", \"Node HTTP Address\")\n               .th(\".lastHealthUpdate\", \"Last health-update\")\n               .th(\".healthReport\", \"Health-report\");\n \n       if (!this.opportunisticContainersEnabled) {\n         trbody.th(\".containers\", \"Containers\")\n             .th(\".mem\", \"Mem Used\")\n             .th(\".mem\", \"Mem Avail\")\n             .th(\".vcores\", \"VCores Used\")\n             .th(\".vcores\", \"VCores Avail\");\n       } else {\n         trbody.th(\".containers\", \"Running Containers (G)\")\n             .th(\".mem\", \"Mem Used (G)\")\n             .th(\".mem\", \"Mem Avail (G)\")\n             .th(\".vcores\", \"VCores Used (G)\")\n             .th(\".vcores\", \"VCores Avail (G)\")\n             .th(\".containers\", \"Running Containers (O)\")\n             .th(\".mem\", \"Mem Used (O)\")\n             .th(\".vcores\", \"VCores Used (O)\")\n             .th(\".containers\", \"Queued Containers\");\n       }\n \n       TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n           trbody.th(\".nodeManagerVersion\", \"Version\")._()._().tbody();\n \n       NodeState stateFilter \u003d null;\n       if (type !\u003d null \u0026\u0026 !type.isEmpty()) {\n         stateFilter \u003d NodeState.valueOf(StringUtils.toUpperCase(type));\n       }\n       Collection\u003cRMNode\u003e rmNodes \u003d this.rm.getRMContext().getRMNodes().values();\n       boolean isInactive \u003d false;\n       if (stateFilter !\u003d null) {\n         switch (stateFilter) {\n         case DECOMMISSIONED:\n         case LOST:\n         case REBOOTED:\n         case SHUTDOWN:\n           rmNodes \u003d this.rm.getRMContext().getInactiveRMNodes().values();\n           isInactive \u003d true;\n           break;\n         case DECOMMISSIONING:\n           // Do nothing\n           break;\n         default:\n           LOG.debug(\"Unexpected state filter for inactive RM node\");\n         }\n       }\n       StringBuilder nodeTableData \u003d new StringBuilder(\"[\\n\");\n       for (RMNode ni : rmNodes) {\n         if (stateFilter !\u003d null) {\n           NodeState state \u003d ni.getState();\n           if (!stateFilter.equals(state)) {\n             continue;\n           }\n         } else {\n           // No filter. User is asking for all nodes. Make sure you skip the\n           // unhealthy nodes.\n           if (ni.getState() \u003d\u003d NodeState.UNHEALTHY) {\n             continue;\n           }\n         }\n         // Besides state, we need to filter label as well.\n         if (!labelFilter.equals(RMNodeLabelsManager.ANY)) {\n           if (labelFilter.isEmpty()) {\n             // Empty label filter means only shows nodes without label\n             if (!ni.getNodeLabels().isEmpty()) {\n               continue;\n             }\n           } else if (!ni.getNodeLabels().contains(labelFilter)) {\n             // Only nodes have given label can show on web page.\n             continue;\n           }\n         }\n         NodeInfo info \u003d new NodeInfo(ni, sched);\n         int usedMemory \u003d (int) info.getUsedMemory();\n         int availableMemory \u003d (int) info.getAvailableMemory();\n         nodeTableData.append(\"[\\\"\")\n             .append(StringUtils.join(\",\", info.getNodeLabels())).append(\"\\\",\\\"\")\n             .append(info.getRack()).append(\"\\\",\\\"\").append(info.getState())\n             .append(\"\\\",\\\"\").append(info.getNodeId());\n         if (isInactive) {\n           nodeTableData.append(\"\\\",\\\"\").append(\"N/A\").append(\"\\\",\\\"\");\n         } else {\n           String httpAddress \u003d info.getNodeHTTPAddress();\n           nodeTableData.append(\"\\\",\\\"\u003ca \").append(\"href\u003d\u0027\" + \"//\" + httpAddress)\n               .append(\"\u0027\u003e\").append(httpAddress).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\");\n         }\n         nodeTableData.append(\"\u003cbr title\u003d\u0027\")\n             .append(String.valueOf(info.getLastHealthUpdate())).append(\"\u0027\u003e\")\n             .append(Times.format(info.getLastHealthUpdate())).append(\"\\\",\\\"\")\n             .append(info.getHealthReport()).append(\"\\\",\\\"\")\n             .append(String.valueOf(info.getNumContainers())).append(\"\\\",\\\"\")\n             .append(\"\u003cbr title\u003d\u0027\").append(String.valueOf(usedMemory))\n             .append(\"\u0027\u003e\").append(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))\n             .append(\"\\\",\\\"\").append(\"\u003cbr title\u003d\u0027\")\n             .append(String.valueOf(availableMemory)).append(\"\u0027\u003e\")\n             .append(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))\n             .append(\"\\\",\\\"\").append(String.valueOf(info.getUsedVirtualCores()))\n             .append(\"\\\",\\\"\")\n             .append(String.valueOf(info.getAvailableVirtualCores()))\n             .append(\"\\\",\\\"\");\n \n         // If opportunistic containers are enabled, add extra fields.\n         if (this.opportunisticContainersEnabled) {\n           nodeTableData\n               .append(String.valueOf(info.getNumRunningOpportContainers()))\n               .append(\"\\\",\\\"\").append(\"\u003cbr title\u003d\u0027\")\n-              .append(String.valueOf(info.getUsedMemoryOpport())).append(\"\u0027\u003e\")\n-              .append(StringUtils.byteDesc(info.getUsedMemoryOpport()))\n+              .append(String.valueOf(info.getUsedMemoryOpportGB())).append(\"\u0027\u003e\")\n+              .append(StringUtils.byteDesc(\n+                  info.getUsedMemoryOpportGB() * BYTES_IN_GB))\n               .append(\"\\\",\\\"\")\n               .append(String.valueOf(info.getUsedVirtualCoresOpport()))\n               .append(\"\\\",\\\"\")\n               .append(String.valueOf(info.getNumQueuedContainers()))\n               .append(\"\\\",\\\"\");\n         }\n \n         nodeTableData.append(ni.getNodeManagerVersion())\n             .append(\"\\\"],\\n\");\n       }\n       if (nodeTableData.charAt(nodeTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n         nodeTableData.delete(nodeTableData.length() - 2,\n             nodeTableData.length() - 1);\n       }\n       nodeTableData.append(\"]\");\n       html.script().$type(\"text/javascript\")\n           ._(\"var nodeTableData\u003d\" + nodeTableData)._();\n       tbody._()._();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      html._(MetricsOverviewTable.class);\n\n      ResourceScheduler sched \u003d rm.getResourceScheduler();\n\n      String type \u003d $(NODE_STATE);\n      String labelFilter \u003d $(NODE_LABEL, CommonNodeLabelsManager.ANY).trim();\n      Hamlet.TR\u003cHamlet.THEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e trbody \u003d\n          html.table(\"#nodes\").thead().tr()\n              .th(\".nodelabels\", \"Node Labels\")\n              .th(\".rack\", \"Rack\")\n              .th(\".state\", \"Node State\")\n              .th(\".nodeaddress\", \"Node Address\")\n              .th(\".nodehttpaddress\", \"Node HTTP Address\")\n              .th(\".lastHealthUpdate\", \"Last health-update\")\n              .th(\".healthReport\", \"Health-report\");\n\n      if (!this.opportunisticContainersEnabled) {\n        trbody.th(\".containers\", \"Containers\")\n            .th(\".mem\", \"Mem Used\")\n            .th(\".mem\", \"Mem Avail\")\n            .th(\".vcores\", \"VCores Used\")\n            .th(\".vcores\", \"VCores Avail\");\n      } else {\n        trbody.th(\".containers\", \"Running Containers (G)\")\n            .th(\".mem\", \"Mem Used (G)\")\n            .th(\".mem\", \"Mem Avail (G)\")\n            .th(\".vcores\", \"VCores Used (G)\")\n            .th(\".vcores\", \"VCores Avail (G)\")\n            .th(\".containers\", \"Running Containers (O)\")\n            .th(\".mem\", \"Mem Used (O)\")\n            .th(\".vcores\", \"VCores Used (O)\")\n            .th(\".containers\", \"Queued Containers\");\n      }\n\n      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n          trbody.th(\".nodeManagerVersion\", \"Version\")._()._().tbody();\n\n      NodeState stateFilter \u003d null;\n      if (type !\u003d null \u0026\u0026 !type.isEmpty()) {\n        stateFilter \u003d NodeState.valueOf(StringUtils.toUpperCase(type));\n      }\n      Collection\u003cRMNode\u003e rmNodes \u003d this.rm.getRMContext().getRMNodes().values();\n      boolean isInactive \u003d false;\n      if (stateFilter !\u003d null) {\n        switch (stateFilter) {\n        case DECOMMISSIONED:\n        case LOST:\n        case REBOOTED:\n        case SHUTDOWN:\n          rmNodes \u003d this.rm.getRMContext().getInactiveRMNodes().values();\n          isInactive \u003d true;\n          break;\n        case DECOMMISSIONING:\n          // Do nothing\n          break;\n        default:\n          LOG.debug(\"Unexpected state filter for inactive RM node\");\n        }\n      }\n      StringBuilder nodeTableData \u003d new StringBuilder(\"[\\n\");\n      for (RMNode ni : rmNodes) {\n        if (stateFilter !\u003d null) {\n          NodeState state \u003d ni.getState();\n          if (!stateFilter.equals(state)) {\n            continue;\n          }\n        } else {\n          // No filter. User is asking for all nodes. Make sure you skip the\n          // unhealthy nodes.\n          if (ni.getState() \u003d\u003d NodeState.UNHEALTHY) {\n            continue;\n          }\n        }\n        // Besides state, we need to filter label as well.\n        if (!labelFilter.equals(RMNodeLabelsManager.ANY)) {\n          if (labelFilter.isEmpty()) {\n            // Empty label filter means only shows nodes without label\n            if (!ni.getNodeLabels().isEmpty()) {\n              continue;\n            }\n          } else if (!ni.getNodeLabels().contains(labelFilter)) {\n            // Only nodes have given label can show on web page.\n            continue;\n          }\n        }\n        NodeInfo info \u003d new NodeInfo(ni, sched);\n        int usedMemory \u003d (int) info.getUsedMemory();\n        int availableMemory \u003d (int) info.getAvailableMemory();\n        nodeTableData.append(\"[\\\"\")\n            .append(StringUtils.join(\",\", info.getNodeLabels())).append(\"\\\",\\\"\")\n            .append(info.getRack()).append(\"\\\",\\\"\").append(info.getState())\n            .append(\"\\\",\\\"\").append(info.getNodeId());\n        if (isInactive) {\n          nodeTableData.append(\"\\\",\\\"\").append(\"N/A\").append(\"\\\",\\\"\");\n        } else {\n          String httpAddress \u003d info.getNodeHTTPAddress();\n          nodeTableData.append(\"\\\",\\\"\u003ca \").append(\"href\u003d\u0027\" + \"//\" + httpAddress)\n              .append(\"\u0027\u003e\").append(httpAddress).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\");\n        }\n        nodeTableData.append(\"\u003cbr title\u003d\u0027\")\n            .append(String.valueOf(info.getLastHealthUpdate())).append(\"\u0027\u003e\")\n            .append(Times.format(info.getLastHealthUpdate())).append(\"\\\",\\\"\")\n            .append(info.getHealthReport()).append(\"\\\",\\\"\")\n            .append(String.valueOf(info.getNumContainers())).append(\"\\\",\\\"\")\n            .append(\"\u003cbr title\u003d\u0027\").append(String.valueOf(usedMemory))\n            .append(\"\u0027\u003e\").append(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))\n            .append(\"\\\",\\\"\").append(\"\u003cbr title\u003d\u0027\")\n            .append(String.valueOf(availableMemory)).append(\"\u0027\u003e\")\n            .append(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))\n            .append(\"\\\",\\\"\").append(String.valueOf(info.getUsedVirtualCores()))\n            .append(\"\\\",\\\"\")\n            .append(String.valueOf(info.getAvailableVirtualCores()))\n            .append(\"\\\",\\\"\");\n\n        // If opportunistic containers are enabled, add extra fields.\n        if (this.opportunisticContainersEnabled) {\n          nodeTableData\n              .append(String.valueOf(info.getNumRunningOpportContainers()))\n              .append(\"\\\",\\\"\").append(\"\u003cbr title\u003d\u0027\")\n              .append(String.valueOf(info.getUsedMemoryOpportGB())).append(\"\u0027\u003e\")\n              .append(StringUtils.byteDesc(\n                  info.getUsedMemoryOpportGB() * BYTES_IN_GB))\n              .append(\"\\\",\\\"\")\n              .append(String.valueOf(info.getUsedVirtualCoresOpport()))\n              .append(\"\\\",\\\"\")\n              .append(String.valueOf(info.getNumQueuedContainers()))\n              .append(\"\\\",\\\"\");\n        }\n\n        nodeTableData.append(ni.getNodeManagerVersion())\n            .append(\"\\\"],\\n\");\n      }\n      if (nodeTableData.charAt(nodeTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n        nodeTableData.delete(nodeTableData.length() - 2,\n            nodeTableData.length() - 1);\n      }\n      nodeTableData.append(\"]\");\n      html.script().$type(\"text/javascript\")\n          ._(\"var nodeTableData\u003d\" + nodeTableData)._();\n      tbody._()._();\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/NodesPage.java",
      "extendedDetails": {}
    },
    "0aafc122d401a2f49d0f9ca556343f9ba871e979": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2995. Enhance UI to show cluster resource utilization of various container Execution types. (Konstantinos Karanasos via asuresh)\n",
      "commitDate": "04/11/16 7:31 AM",
      "commitName": "0aafc122d401a2f49d0f9ca556343f9ba871e979",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "05/04/16 2:17 AM",
      "commitNameOld": "776b549e2ac20a68a5513cbcaac0edc33233dc03",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 213.22,
      "commitsBetweenForRepo": 1597,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,108 +1,141 @@\n     protected void render(Block html) {\n       html._(MetricsOverviewTable.class);\n \n       ResourceScheduler sched \u003d rm.getResourceScheduler();\n+\n       String type \u003d $(NODE_STATE);\n       String labelFilter \u003d $(NODE_LABEL, CommonNodeLabelsManager.ANY).trim();\n-      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n+      Hamlet.TR\u003cHamlet.THEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e trbody \u003d\n           html.table(\"#nodes\").thead().tr()\n               .th(\".nodelabels\", \"Node Labels\")\n               .th(\".rack\", \"Rack\")\n               .th(\".state\", \"Node State\")\n               .th(\".nodeaddress\", \"Node Address\")\n               .th(\".nodehttpaddress\", \"Node HTTP Address\")\n               .th(\".lastHealthUpdate\", \"Last health-update\")\n-              .th(\".healthReport\", \"Health-report\")\n-              .th(\".containers\", \"Containers\")\n-              .th(\".mem\", \"Mem Used\")\n-              .th(\".mem\", \"Mem Avail\")\n-              .th(\".vcores\", \"VCores Used\")\n-              .th(\".vcores\", \"VCores Avail\")\n-              .th(\".nodeManagerVersion\", \"Version\")._()._().tbody();\n+              .th(\".healthReport\", \"Health-report\");\n+\n+      if (!this.opportunisticContainersEnabled) {\n+        trbody.th(\".containers\", \"Containers\")\n+            .th(\".mem\", \"Mem Used\")\n+            .th(\".mem\", \"Mem Avail\")\n+            .th(\".vcores\", \"VCores Used\")\n+            .th(\".vcores\", \"VCores Avail\");\n+      } else {\n+        trbody.th(\".containers\", \"Running Containers (G)\")\n+            .th(\".mem\", \"Mem Used (G)\")\n+            .th(\".mem\", \"Mem Avail (G)\")\n+            .th(\".vcores\", \"VCores Used (G)\")\n+            .th(\".vcores\", \"VCores Avail (G)\")\n+            .th(\".containers\", \"Running Containers (O)\")\n+            .th(\".mem\", \"Mem Used (O)\")\n+            .th(\".vcores\", \"VCores Used (O)\")\n+            .th(\".containers\", \"Queued Containers\");\n+      }\n+\n+      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n+          trbody.th(\".nodeManagerVersion\", \"Version\")._()._().tbody();\n+\n       NodeState stateFilter \u003d null;\n       if (type !\u003d null \u0026\u0026 !type.isEmpty()) {\n         stateFilter \u003d NodeState.valueOf(StringUtils.toUpperCase(type));\n       }\n       Collection\u003cRMNode\u003e rmNodes \u003d this.rm.getRMContext().getRMNodes().values();\n       boolean isInactive \u003d false;\n       if (stateFilter !\u003d null) {\n         switch (stateFilter) {\n         case DECOMMISSIONED:\n         case LOST:\n         case REBOOTED:\n         case SHUTDOWN:\n           rmNodes \u003d this.rm.getRMContext().getInactiveRMNodes().values();\n           isInactive \u003d true;\n           break;\n         case DECOMMISSIONING:\n           // Do nothing\n           break;\n         default:\n           LOG.debug(\"Unexpected state filter for inactive RM node\");\n         }\n       }\n       StringBuilder nodeTableData \u003d new StringBuilder(\"[\\n\");\n       for (RMNode ni : rmNodes) {\n         if (stateFilter !\u003d null) {\n           NodeState state \u003d ni.getState();\n           if (!stateFilter.equals(state)) {\n             continue;\n           }\n         } else {\n           // No filter. User is asking for all nodes. Make sure you skip the\n           // unhealthy nodes.\n           if (ni.getState() \u003d\u003d NodeState.UNHEALTHY) {\n             continue;\n           }\n         }\n         // Besides state, we need to filter label as well.\n         if (!labelFilter.equals(RMNodeLabelsManager.ANY)) {\n           if (labelFilter.isEmpty()) {\n             // Empty label filter means only shows nodes without label\n             if (!ni.getNodeLabels().isEmpty()) {\n               continue;\n             }\n           } else if (!ni.getNodeLabels().contains(labelFilter)) {\n             // Only nodes have given label can show on web page.\n             continue;\n           }\n         }\n         NodeInfo info \u003d new NodeInfo(ni, sched);\n         int usedMemory \u003d (int) info.getUsedMemory();\n         int availableMemory \u003d (int) info.getAvailableMemory();\n         nodeTableData.append(\"[\\\"\")\n             .append(StringUtils.join(\",\", info.getNodeLabels())).append(\"\\\",\\\"\")\n             .append(info.getRack()).append(\"\\\",\\\"\").append(info.getState())\n             .append(\"\\\",\\\"\").append(info.getNodeId());\n         if (isInactive) {\n           nodeTableData.append(\"\\\",\\\"\").append(\"N/A\").append(\"\\\",\\\"\");\n         } else {\n           String httpAddress \u003d info.getNodeHTTPAddress();\n           nodeTableData.append(\"\\\",\\\"\u003ca \").append(\"href\u003d\u0027\" + \"//\" + httpAddress)\n               .append(\"\u0027\u003e\").append(httpAddress).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\");\n         }\n         nodeTableData.append(\"\u003cbr title\u003d\u0027\")\n             .append(String.valueOf(info.getLastHealthUpdate())).append(\"\u0027\u003e\")\n             .append(Times.format(info.getLastHealthUpdate())).append(\"\\\",\\\"\")\n             .append(info.getHealthReport()).append(\"\\\",\\\"\")\n             .append(String.valueOf(info.getNumContainers())).append(\"\\\",\\\"\")\n             .append(\"\u003cbr title\u003d\u0027\").append(String.valueOf(usedMemory))\n             .append(\"\u0027\u003e\").append(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))\n             .append(\"\\\",\\\"\").append(\"\u003cbr title\u003d\u0027\")\n             .append(String.valueOf(availableMemory)).append(\"\u0027\u003e\")\n             .append(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))\n             .append(\"\\\",\\\"\").append(String.valueOf(info.getUsedVirtualCores()))\n             .append(\"\\\",\\\"\")\n             .append(String.valueOf(info.getAvailableVirtualCores()))\n-            .append(\"\\\",\\\"\").append(ni.getNodeManagerVersion())\n+            .append(\"\\\",\\\"\");\n+\n+        // If opportunistic containers are enabled, add extra fields.\n+        if (this.opportunisticContainersEnabled) {\n+          nodeTableData\n+              .append(String.valueOf(info.getNumRunningOpportContainers()))\n+              .append(\"\\\",\\\"\").append(\"\u003cbr title\u003d\u0027\")\n+              .append(String.valueOf(info.getUsedMemoryOpport())).append(\"\u0027\u003e\")\n+              .append(StringUtils.byteDesc(info.getUsedMemoryOpport()))\n+              .append(\"\\\",\\\"\")\n+              .append(String.valueOf(info.getUsedVirtualCoresOpport()))\n+              .append(\"\\\",\\\"\")\n+              .append(String.valueOf(info.getNumQueuedContainers()))\n+              .append(\"\\\",\\\"\");\n+        }\n+\n+        nodeTableData.append(ni.getNodeManagerVersion())\n             .append(\"\\\"],\\n\");\n       }\n       if (nodeTableData.charAt(nodeTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n         nodeTableData.delete(nodeTableData.length() - 2,\n             nodeTableData.length() - 1);\n       }\n       nodeTableData.append(\"]\");\n       html.script().$type(\"text/javascript\")\n           ._(\"var nodeTableData\u003d\" + nodeTableData)._();\n       tbody._()._();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      html._(MetricsOverviewTable.class);\n\n      ResourceScheduler sched \u003d rm.getResourceScheduler();\n\n      String type \u003d $(NODE_STATE);\n      String labelFilter \u003d $(NODE_LABEL, CommonNodeLabelsManager.ANY).trim();\n      Hamlet.TR\u003cHamlet.THEAD\u003cTABLE\u003cHamlet\u003e\u003e\u003e trbody \u003d\n          html.table(\"#nodes\").thead().tr()\n              .th(\".nodelabels\", \"Node Labels\")\n              .th(\".rack\", \"Rack\")\n              .th(\".state\", \"Node State\")\n              .th(\".nodeaddress\", \"Node Address\")\n              .th(\".nodehttpaddress\", \"Node HTTP Address\")\n              .th(\".lastHealthUpdate\", \"Last health-update\")\n              .th(\".healthReport\", \"Health-report\");\n\n      if (!this.opportunisticContainersEnabled) {\n        trbody.th(\".containers\", \"Containers\")\n            .th(\".mem\", \"Mem Used\")\n            .th(\".mem\", \"Mem Avail\")\n            .th(\".vcores\", \"VCores Used\")\n            .th(\".vcores\", \"VCores Avail\");\n      } else {\n        trbody.th(\".containers\", \"Running Containers (G)\")\n            .th(\".mem\", \"Mem Used (G)\")\n            .th(\".mem\", \"Mem Avail (G)\")\n            .th(\".vcores\", \"VCores Used (G)\")\n            .th(\".vcores\", \"VCores Avail (G)\")\n            .th(\".containers\", \"Running Containers (O)\")\n            .th(\".mem\", \"Mem Used (O)\")\n            .th(\".vcores\", \"VCores Used (O)\")\n            .th(\".containers\", \"Queued Containers\");\n      }\n\n      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n          trbody.th(\".nodeManagerVersion\", \"Version\")._()._().tbody();\n\n      NodeState stateFilter \u003d null;\n      if (type !\u003d null \u0026\u0026 !type.isEmpty()) {\n        stateFilter \u003d NodeState.valueOf(StringUtils.toUpperCase(type));\n      }\n      Collection\u003cRMNode\u003e rmNodes \u003d this.rm.getRMContext().getRMNodes().values();\n      boolean isInactive \u003d false;\n      if (stateFilter !\u003d null) {\n        switch (stateFilter) {\n        case DECOMMISSIONED:\n        case LOST:\n        case REBOOTED:\n        case SHUTDOWN:\n          rmNodes \u003d this.rm.getRMContext().getInactiveRMNodes().values();\n          isInactive \u003d true;\n          break;\n        case DECOMMISSIONING:\n          // Do nothing\n          break;\n        default:\n          LOG.debug(\"Unexpected state filter for inactive RM node\");\n        }\n      }\n      StringBuilder nodeTableData \u003d new StringBuilder(\"[\\n\");\n      for (RMNode ni : rmNodes) {\n        if (stateFilter !\u003d null) {\n          NodeState state \u003d ni.getState();\n          if (!stateFilter.equals(state)) {\n            continue;\n          }\n        } else {\n          // No filter. User is asking for all nodes. Make sure you skip the\n          // unhealthy nodes.\n          if (ni.getState() \u003d\u003d NodeState.UNHEALTHY) {\n            continue;\n          }\n        }\n        // Besides state, we need to filter label as well.\n        if (!labelFilter.equals(RMNodeLabelsManager.ANY)) {\n          if (labelFilter.isEmpty()) {\n            // Empty label filter means only shows nodes without label\n            if (!ni.getNodeLabels().isEmpty()) {\n              continue;\n            }\n          } else if (!ni.getNodeLabels().contains(labelFilter)) {\n            // Only nodes have given label can show on web page.\n            continue;\n          }\n        }\n        NodeInfo info \u003d new NodeInfo(ni, sched);\n        int usedMemory \u003d (int) info.getUsedMemory();\n        int availableMemory \u003d (int) info.getAvailableMemory();\n        nodeTableData.append(\"[\\\"\")\n            .append(StringUtils.join(\",\", info.getNodeLabels())).append(\"\\\",\\\"\")\n            .append(info.getRack()).append(\"\\\",\\\"\").append(info.getState())\n            .append(\"\\\",\\\"\").append(info.getNodeId());\n        if (isInactive) {\n          nodeTableData.append(\"\\\",\\\"\").append(\"N/A\").append(\"\\\",\\\"\");\n        } else {\n          String httpAddress \u003d info.getNodeHTTPAddress();\n          nodeTableData.append(\"\\\",\\\"\u003ca \").append(\"href\u003d\u0027\" + \"//\" + httpAddress)\n              .append(\"\u0027\u003e\").append(httpAddress).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\");\n        }\n        nodeTableData.append(\"\u003cbr title\u003d\u0027\")\n            .append(String.valueOf(info.getLastHealthUpdate())).append(\"\u0027\u003e\")\n            .append(Times.format(info.getLastHealthUpdate())).append(\"\\\",\\\"\")\n            .append(info.getHealthReport()).append(\"\\\",\\\"\")\n            .append(String.valueOf(info.getNumContainers())).append(\"\\\",\\\"\")\n            .append(\"\u003cbr title\u003d\u0027\").append(String.valueOf(usedMemory))\n            .append(\"\u0027\u003e\").append(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))\n            .append(\"\\\",\\\"\").append(\"\u003cbr title\u003d\u0027\")\n            .append(String.valueOf(availableMemory)).append(\"\u0027\u003e\")\n            .append(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))\n            .append(\"\\\",\\\"\").append(String.valueOf(info.getUsedVirtualCores()))\n            .append(\"\\\",\\\"\")\n            .append(String.valueOf(info.getAvailableVirtualCores()))\n            .append(\"\\\",\\\"\");\n\n        // If opportunistic containers are enabled, add extra fields.\n        if (this.opportunisticContainersEnabled) {\n          nodeTableData\n              .append(String.valueOf(info.getNumRunningOpportContainers()))\n              .append(\"\\\",\\\"\").append(\"\u003cbr title\u003d\u0027\")\n              .append(String.valueOf(info.getUsedMemoryOpport())).append(\"\u0027\u003e\")\n              .append(StringUtils.byteDesc(info.getUsedMemoryOpport()))\n              .append(\"\\\",\\\"\")\n              .append(String.valueOf(info.getUsedVirtualCoresOpport()))\n              .append(\"\\\",\\\"\")\n              .append(String.valueOf(info.getNumQueuedContainers()))\n              .append(\"\\\",\\\"\");\n        }\n\n        nodeTableData.append(ni.getNodeManagerVersion())\n            .append(\"\\\"],\\n\");\n      }\n      if (nodeTableData.charAt(nodeTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n        nodeTableData.delete(nodeTableData.length() - 2,\n            nodeTableData.length() - 1);\n      }\n      nodeTableData.append(\"]\");\n      html.script().$type(\"text/javascript\")\n          ._(\"var nodeTableData\u003d\" + nodeTableData)._();\n      tbody._()._();\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/NodesPage.java",
      "extendedDetails": {}
    },
    "776b549e2ac20a68a5513cbcaac0edc33233dc03": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4609. RM Nodes list page takes too much time to load. Contributed by Bibin A Chundatt\n",
      "commitDate": "05/04/16 2:17 AM",
      "commitName": "776b549e2ac20a68a5513cbcaac0edc33233dc03",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "17/12/15 3:20 PM",
      "commitNameOld": "1de56b0448d332717c8316c621b4f6af542a85cc",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 109.41,
      "commitsBetweenForRepo": 665,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,94 +1,108 @@\n     protected void render(Block html) {\n       html._(MetricsOverviewTable.class);\n \n       ResourceScheduler sched \u003d rm.getResourceScheduler();\n       String type \u003d $(NODE_STATE);\n       String labelFilter \u003d $(NODE_LABEL, CommonNodeLabelsManager.ANY).trim();\n       TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n           html.table(\"#nodes\").thead().tr()\n               .th(\".nodelabels\", \"Node Labels\")\n               .th(\".rack\", \"Rack\")\n               .th(\".state\", \"Node State\")\n               .th(\".nodeaddress\", \"Node Address\")\n               .th(\".nodehttpaddress\", \"Node HTTP Address\")\n               .th(\".lastHealthUpdate\", \"Last health-update\")\n               .th(\".healthReport\", \"Health-report\")\n               .th(\".containers\", \"Containers\")\n               .th(\".mem\", \"Mem Used\")\n               .th(\".mem\", \"Mem Avail\")\n               .th(\".vcores\", \"VCores Used\")\n               .th(\".vcores\", \"VCores Avail\")\n               .th(\".nodeManagerVersion\", \"Version\")._()._().tbody();\n       NodeState stateFilter \u003d null;\n       if (type !\u003d null \u0026\u0026 !type.isEmpty()) {\n         stateFilter \u003d NodeState.valueOf(StringUtils.toUpperCase(type));\n       }\n       Collection\u003cRMNode\u003e rmNodes \u003d this.rm.getRMContext().getRMNodes().values();\n       boolean isInactive \u003d false;\n       if (stateFilter !\u003d null) {\n         switch (stateFilter) {\n         case DECOMMISSIONED:\n         case LOST:\n         case REBOOTED:\n         case SHUTDOWN:\n           rmNodes \u003d this.rm.getRMContext().getInactiveRMNodes().values();\n           isInactive \u003d true;\n           break;\n         case DECOMMISSIONING:\n           // Do nothing\n           break;\n         default:\n           LOG.debug(\"Unexpected state filter for inactive RM node\");\n         }\n       }\n+      StringBuilder nodeTableData \u003d new StringBuilder(\"[\\n\");\n       for (RMNode ni : rmNodes) {\n         if (stateFilter !\u003d null) {\n           NodeState state \u003d ni.getState();\n           if (!stateFilter.equals(state)) {\n             continue;\n           }\n         } else {\n           // No filter. User is asking for all nodes. Make sure you skip the\n           // unhealthy nodes.\n           if (ni.getState() \u003d\u003d NodeState.UNHEALTHY) {\n             continue;\n           }\n         }\n         // Besides state, we need to filter label as well.\n         if (!labelFilter.equals(RMNodeLabelsManager.ANY)) {\n           if (labelFilter.isEmpty()) {\n             // Empty label filter means only shows nodes without label\n             if (!ni.getNodeLabels().isEmpty()) {\n               continue;\n             }\n           } else if (!ni.getNodeLabels().contains(labelFilter)) {\n             // Only nodes have given label can show on web page.\n             continue;\n           }\n         }\n         NodeInfo info \u003d new NodeInfo(ni, sched);\n         int usedMemory \u003d (int) info.getUsedMemory();\n         int availableMemory \u003d (int) info.getAvailableMemory();\n-        TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d\n-            tbody.tr().td(StringUtils.join(\",\", info.getNodeLabels()))\n-                .td(info.getRack()).td(info.getState()).td(info.getNodeId());\n+        nodeTableData.append(\"[\\\"\")\n+            .append(StringUtils.join(\",\", info.getNodeLabels())).append(\"\\\",\\\"\")\n+            .append(info.getRack()).append(\"\\\",\\\"\").append(info.getState())\n+            .append(\"\\\",\\\"\").append(info.getNodeId());\n         if (isInactive) {\n-          row.td()._(\"N/A\")._();\n+          nodeTableData.append(\"\\\",\\\"\").append(\"N/A\").append(\"\\\",\\\"\");\n         } else {\n           String httpAddress \u003d info.getNodeHTTPAddress();\n-          row.td().a(\"//\" + httpAddress, httpAddress)._();\n+          nodeTableData.append(\"\\\",\\\"\u003ca \").append(\"href\u003d\u0027\" + \"//\" + httpAddress)\n+              .append(\"\u0027\u003e\").append(httpAddress).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\");\n         }\n-        row.td().br().$title(String.valueOf(info.getLastHealthUpdate()))._()\n-            ._(Times.format(info.getLastHealthUpdate()))._()\n-            .td(info.getHealthReport())\n-            .td(String.valueOf(info.getNumContainers())).td().br()\n-            .$title(String.valueOf(usedMemory))._()\n-            ._(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))._().td().br()\n-            .$title(String.valueOf(availableMemory))._()\n-            ._(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))._()\n-            .td(String.valueOf(info.getUsedVirtualCores()))\n-            .td(String.valueOf(info.getAvailableVirtualCores()))\n-            .td(ni.getNodeManagerVersion())._();\n+        nodeTableData.append(\"\u003cbr title\u003d\u0027\")\n+            .append(String.valueOf(info.getLastHealthUpdate())).append(\"\u0027\u003e\")\n+            .append(Times.format(info.getLastHealthUpdate())).append(\"\\\",\\\"\")\n+            .append(info.getHealthReport()).append(\"\\\",\\\"\")\n+            .append(String.valueOf(info.getNumContainers())).append(\"\\\",\\\"\")\n+            .append(\"\u003cbr title\u003d\u0027\").append(String.valueOf(usedMemory))\n+            .append(\"\u0027\u003e\").append(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))\n+            .append(\"\\\",\\\"\").append(\"\u003cbr title\u003d\u0027\")\n+            .append(String.valueOf(availableMemory)).append(\"\u0027\u003e\")\n+            .append(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))\n+            .append(\"\\\",\\\"\").append(String.valueOf(info.getUsedVirtualCores()))\n+            .append(\"\\\",\\\"\")\n+            .append(String.valueOf(info.getAvailableVirtualCores()))\n+            .append(\"\\\",\\\"\").append(ni.getNodeManagerVersion())\n+            .append(\"\\\"],\\n\");\n       }\n+      if (nodeTableData.charAt(nodeTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n+        nodeTableData.delete(nodeTableData.length() - 2,\n+            nodeTableData.length() - 1);\n+      }\n+      nodeTableData.append(\"]\");\n+      html.script().$type(\"text/javascript\")\n+          ._(\"var nodeTableData\u003d\" + nodeTableData)._();\n       tbody._()._();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      html._(MetricsOverviewTable.class);\n\n      ResourceScheduler sched \u003d rm.getResourceScheduler();\n      String type \u003d $(NODE_STATE);\n      String labelFilter \u003d $(NODE_LABEL, CommonNodeLabelsManager.ANY).trim();\n      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n          html.table(\"#nodes\").thead().tr()\n              .th(\".nodelabels\", \"Node Labels\")\n              .th(\".rack\", \"Rack\")\n              .th(\".state\", \"Node State\")\n              .th(\".nodeaddress\", \"Node Address\")\n              .th(\".nodehttpaddress\", \"Node HTTP Address\")\n              .th(\".lastHealthUpdate\", \"Last health-update\")\n              .th(\".healthReport\", \"Health-report\")\n              .th(\".containers\", \"Containers\")\n              .th(\".mem\", \"Mem Used\")\n              .th(\".mem\", \"Mem Avail\")\n              .th(\".vcores\", \"VCores Used\")\n              .th(\".vcores\", \"VCores Avail\")\n              .th(\".nodeManagerVersion\", \"Version\")._()._().tbody();\n      NodeState stateFilter \u003d null;\n      if (type !\u003d null \u0026\u0026 !type.isEmpty()) {\n        stateFilter \u003d NodeState.valueOf(StringUtils.toUpperCase(type));\n      }\n      Collection\u003cRMNode\u003e rmNodes \u003d this.rm.getRMContext().getRMNodes().values();\n      boolean isInactive \u003d false;\n      if (stateFilter !\u003d null) {\n        switch (stateFilter) {\n        case DECOMMISSIONED:\n        case LOST:\n        case REBOOTED:\n        case SHUTDOWN:\n          rmNodes \u003d this.rm.getRMContext().getInactiveRMNodes().values();\n          isInactive \u003d true;\n          break;\n        case DECOMMISSIONING:\n          // Do nothing\n          break;\n        default:\n          LOG.debug(\"Unexpected state filter for inactive RM node\");\n        }\n      }\n      StringBuilder nodeTableData \u003d new StringBuilder(\"[\\n\");\n      for (RMNode ni : rmNodes) {\n        if (stateFilter !\u003d null) {\n          NodeState state \u003d ni.getState();\n          if (!stateFilter.equals(state)) {\n            continue;\n          }\n        } else {\n          // No filter. User is asking for all nodes. Make sure you skip the\n          // unhealthy nodes.\n          if (ni.getState() \u003d\u003d NodeState.UNHEALTHY) {\n            continue;\n          }\n        }\n        // Besides state, we need to filter label as well.\n        if (!labelFilter.equals(RMNodeLabelsManager.ANY)) {\n          if (labelFilter.isEmpty()) {\n            // Empty label filter means only shows nodes without label\n            if (!ni.getNodeLabels().isEmpty()) {\n              continue;\n            }\n          } else if (!ni.getNodeLabels().contains(labelFilter)) {\n            // Only nodes have given label can show on web page.\n            continue;\n          }\n        }\n        NodeInfo info \u003d new NodeInfo(ni, sched);\n        int usedMemory \u003d (int) info.getUsedMemory();\n        int availableMemory \u003d (int) info.getAvailableMemory();\n        nodeTableData.append(\"[\\\"\")\n            .append(StringUtils.join(\",\", info.getNodeLabels())).append(\"\\\",\\\"\")\n            .append(info.getRack()).append(\"\\\",\\\"\").append(info.getState())\n            .append(\"\\\",\\\"\").append(info.getNodeId());\n        if (isInactive) {\n          nodeTableData.append(\"\\\",\\\"\").append(\"N/A\").append(\"\\\",\\\"\");\n        } else {\n          String httpAddress \u003d info.getNodeHTTPAddress();\n          nodeTableData.append(\"\\\",\\\"\u003ca \").append(\"href\u003d\u0027\" + \"//\" + httpAddress)\n              .append(\"\u0027\u003e\").append(httpAddress).append(\"\u003c/a\u003e\\\",\").append(\"\\\"\");\n        }\n        nodeTableData.append(\"\u003cbr title\u003d\u0027\")\n            .append(String.valueOf(info.getLastHealthUpdate())).append(\"\u0027\u003e\")\n            .append(Times.format(info.getLastHealthUpdate())).append(\"\\\",\\\"\")\n            .append(info.getHealthReport()).append(\"\\\",\\\"\")\n            .append(String.valueOf(info.getNumContainers())).append(\"\\\",\\\"\")\n            .append(\"\u003cbr title\u003d\u0027\").append(String.valueOf(usedMemory))\n            .append(\"\u0027\u003e\").append(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))\n            .append(\"\\\",\\\"\").append(\"\u003cbr title\u003d\u0027\")\n            .append(String.valueOf(availableMemory)).append(\"\u0027\u003e\")\n            .append(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))\n            .append(\"\\\",\\\"\").append(String.valueOf(info.getUsedVirtualCores()))\n            .append(\"\\\",\\\"\")\n            .append(String.valueOf(info.getAvailableVirtualCores()))\n            .append(\"\\\",\\\"\").append(ni.getNodeManagerVersion())\n            .append(\"\\\"],\\n\");\n      }\n      if (nodeTableData.charAt(nodeTableData.length() - 2) \u003d\u003d \u0027,\u0027) {\n        nodeTableData.delete(nodeTableData.length() - 2,\n            nodeTableData.length() - 1);\n      }\n      nodeTableData.append(\"]\");\n      html.script().$type(\"text/javascript\")\n          ._(\"var nodeTableData\u003d\" + nodeTableData)._();\n      tbody._()._();\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/NodesPage.java",
      "extendedDetails": {}
    },
    "1de56b0448d332717c8316c621b4f6af542a85cc": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3226. UI changes for decommissioning node. Contributed by Sunil G.\n",
      "commitDate": "17/12/15 3:20 PM",
      "commitName": "1de56b0448d332717c8316c621b4f6af542a85cc",
      "commitAuthor": "Junping Du",
      "commitDateOld": "04/06/15 4:59 AM",
      "commitNameOld": "d7e7f6aa03c67b6a6ccf664adcb06d90bc963e58",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 196.47,
      "commitsBetweenForRepo": 1371,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,91 +1,94 @@\n     protected void render(Block html) {\n       html._(MetricsOverviewTable.class);\n \n       ResourceScheduler sched \u003d rm.getResourceScheduler();\n       String type \u003d $(NODE_STATE);\n       String labelFilter \u003d $(NODE_LABEL, CommonNodeLabelsManager.ANY).trim();\n       TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n           html.table(\"#nodes\").thead().tr()\n               .th(\".nodelabels\", \"Node Labels\")\n               .th(\".rack\", \"Rack\")\n               .th(\".state\", \"Node State\")\n               .th(\".nodeaddress\", \"Node Address\")\n               .th(\".nodehttpaddress\", \"Node HTTP Address\")\n               .th(\".lastHealthUpdate\", \"Last health-update\")\n               .th(\".healthReport\", \"Health-report\")\n               .th(\".containers\", \"Containers\")\n               .th(\".mem\", \"Mem Used\")\n               .th(\".mem\", \"Mem Avail\")\n               .th(\".vcores\", \"VCores Used\")\n               .th(\".vcores\", \"VCores Avail\")\n               .th(\".nodeManagerVersion\", \"Version\")._()._().tbody();\n       NodeState stateFilter \u003d null;\n       if (type !\u003d null \u0026\u0026 !type.isEmpty()) {\n         stateFilter \u003d NodeState.valueOf(StringUtils.toUpperCase(type));\n       }\n       Collection\u003cRMNode\u003e rmNodes \u003d this.rm.getRMContext().getRMNodes().values();\n       boolean isInactive \u003d false;\n       if (stateFilter !\u003d null) {\n         switch (stateFilter) {\n         case DECOMMISSIONED:\n         case LOST:\n         case REBOOTED:\n         case SHUTDOWN:\n           rmNodes \u003d this.rm.getRMContext().getInactiveRMNodes().values();\n           isInactive \u003d true;\n           break;\n+        case DECOMMISSIONING:\n+          // Do nothing\n+          break;\n         default:\n           LOG.debug(\"Unexpected state filter for inactive RM node\");\n         }\n       }\n       for (RMNode ni : rmNodes) {\n         if (stateFilter !\u003d null) {\n           NodeState state \u003d ni.getState();\n           if (!stateFilter.equals(state)) {\n             continue;\n           }\n         } else {\n           // No filter. User is asking for all nodes. Make sure you skip the\n           // unhealthy nodes.\n           if (ni.getState() \u003d\u003d NodeState.UNHEALTHY) {\n             continue;\n           }\n         }\n         // Besides state, we need to filter label as well.\n         if (!labelFilter.equals(RMNodeLabelsManager.ANY)) {\n           if (labelFilter.isEmpty()) {\n             // Empty label filter means only shows nodes without label\n             if (!ni.getNodeLabels().isEmpty()) {\n               continue;\n             }\n           } else if (!ni.getNodeLabels().contains(labelFilter)) {\n             // Only nodes have given label can show on web page.\n             continue;\n           }\n         }\n         NodeInfo info \u003d new NodeInfo(ni, sched);\n         int usedMemory \u003d (int) info.getUsedMemory();\n         int availableMemory \u003d (int) info.getAvailableMemory();\n         TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d\n             tbody.tr().td(StringUtils.join(\",\", info.getNodeLabels()))\n                 .td(info.getRack()).td(info.getState()).td(info.getNodeId());\n         if (isInactive) {\n           row.td()._(\"N/A\")._();\n         } else {\n           String httpAddress \u003d info.getNodeHTTPAddress();\n           row.td().a(\"//\" + httpAddress, httpAddress)._();\n         }\n         row.td().br().$title(String.valueOf(info.getLastHealthUpdate()))._()\n             ._(Times.format(info.getLastHealthUpdate()))._()\n             .td(info.getHealthReport())\n             .td(String.valueOf(info.getNumContainers())).td().br()\n             .$title(String.valueOf(usedMemory))._()\n             ._(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))._().td().br()\n             .$title(String.valueOf(availableMemory))._()\n             ._(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))._()\n             .td(String.valueOf(info.getUsedVirtualCores()))\n             .td(String.valueOf(info.getAvailableVirtualCores()))\n             .td(ni.getNodeManagerVersion())._();\n       }\n       tbody._()._();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      html._(MetricsOverviewTable.class);\n\n      ResourceScheduler sched \u003d rm.getResourceScheduler();\n      String type \u003d $(NODE_STATE);\n      String labelFilter \u003d $(NODE_LABEL, CommonNodeLabelsManager.ANY).trim();\n      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n          html.table(\"#nodes\").thead().tr()\n              .th(\".nodelabels\", \"Node Labels\")\n              .th(\".rack\", \"Rack\")\n              .th(\".state\", \"Node State\")\n              .th(\".nodeaddress\", \"Node Address\")\n              .th(\".nodehttpaddress\", \"Node HTTP Address\")\n              .th(\".lastHealthUpdate\", \"Last health-update\")\n              .th(\".healthReport\", \"Health-report\")\n              .th(\".containers\", \"Containers\")\n              .th(\".mem\", \"Mem Used\")\n              .th(\".mem\", \"Mem Avail\")\n              .th(\".vcores\", \"VCores Used\")\n              .th(\".vcores\", \"VCores Avail\")\n              .th(\".nodeManagerVersion\", \"Version\")._()._().tbody();\n      NodeState stateFilter \u003d null;\n      if (type !\u003d null \u0026\u0026 !type.isEmpty()) {\n        stateFilter \u003d NodeState.valueOf(StringUtils.toUpperCase(type));\n      }\n      Collection\u003cRMNode\u003e rmNodes \u003d this.rm.getRMContext().getRMNodes().values();\n      boolean isInactive \u003d false;\n      if (stateFilter !\u003d null) {\n        switch (stateFilter) {\n        case DECOMMISSIONED:\n        case LOST:\n        case REBOOTED:\n        case SHUTDOWN:\n          rmNodes \u003d this.rm.getRMContext().getInactiveRMNodes().values();\n          isInactive \u003d true;\n          break;\n        case DECOMMISSIONING:\n          // Do nothing\n          break;\n        default:\n          LOG.debug(\"Unexpected state filter for inactive RM node\");\n        }\n      }\n      for (RMNode ni : rmNodes) {\n        if (stateFilter !\u003d null) {\n          NodeState state \u003d ni.getState();\n          if (!stateFilter.equals(state)) {\n            continue;\n          }\n        } else {\n          // No filter. User is asking for all nodes. Make sure you skip the\n          // unhealthy nodes.\n          if (ni.getState() \u003d\u003d NodeState.UNHEALTHY) {\n            continue;\n          }\n        }\n        // Besides state, we need to filter label as well.\n        if (!labelFilter.equals(RMNodeLabelsManager.ANY)) {\n          if (labelFilter.isEmpty()) {\n            // Empty label filter means only shows nodes without label\n            if (!ni.getNodeLabels().isEmpty()) {\n              continue;\n            }\n          } else if (!ni.getNodeLabels().contains(labelFilter)) {\n            // Only nodes have given label can show on web page.\n            continue;\n          }\n        }\n        NodeInfo info \u003d new NodeInfo(ni, sched);\n        int usedMemory \u003d (int) info.getUsedMemory();\n        int availableMemory \u003d (int) info.getAvailableMemory();\n        TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d\n            tbody.tr().td(StringUtils.join(\",\", info.getNodeLabels()))\n                .td(info.getRack()).td(info.getState()).td(info.getNodeId());\n        if (isInactive) {\n          row.td()._(\"N/A\")._();\n        } else {\n          String httpAddress \u003d info.getNodeHTTPAddress();\n          row.td().a(\"//\" + httpAddress, httpAddress)._();\n        }\n        row.td().br().$title(String.valueOf(info.getLastHealthUpdate()))._()\n            ._(Times.format(info.getLastHealthUpdate()))._()\n            .td(info.getHealthReport())\n            .td(String.valueOf(info.getNumContainers())).td().br()\n            .$title(String.valueOf(usedMemory))._()\n            ._(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))._().td().br()\n            .$title(String.valueOf(availableMemory))._()\n            ._(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))._()\n            .td(String.valueOf(info.getUsedVirtualCores()))\n            .td(String.valueOf(info.getAvailableVirtualCores()))\n            .td(ni.getNodeManagerVersion())._();\n      }\n      tbody._()._();\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/NodesPage.java",
      "extendedDetails": {}
    },
    "d7e7f6aa03c67b6a6ccf664adcb06d90bc963e58": {
      "type": "Ybodychange",
      "commitMessage": "YARN-41. The RM should handle the graceful shutdown of the NM. Contributed by Devaraj K.\n",
      "commitDate": "04/06/15 4:59 AM",
      "commitName": "d7e7f6aa03c67b6a6ccf664adcb06d90bc963e58",
      "commitAuthor": "Junping Du",
      "commitDateOld": "09/04/15 10:35 AM",
      "commitNameOld": "1885141e90837252934192040a40047c7adbc1b5",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 55.77,
      "commitsBetweenForRepo": 539,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,90 +1,91 @@\n     protected void render(Block html) {\n       html._(MetricsOverviewTable.class);\n \n       ResourceScheduler sched \u003d rm.getResourceScheduler();\n       String type \u003d $(NODE_STATE);\n       String labelFilter \u003d $(NODE_LABEL, CommonNodeLabelsManager.ANY).trim();\n       TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n           html.table(\"#nodes\").thead().tr()\n               .th(\".nodelabels\", \"Node Labels\")\n               .th(\".rack\", \"Rack\")\n               .th(\".state\", \"Node State\")\n               .th(\".nodeaddress\", \"Node Address\")\n               .th(\".nodehttpaddress\", \"Node HTTP Address\")\n               .th(\".lastHealthUpdate\", \"Last health-update\")\n               .th(\".healthReport\", \"Health-report\")\n               .th(\".containers\", \"Containers\")\n               .th(\".mem\", \"Mem Used\")\n               .th(\".mem\", \"Mem Avail\")\n               .th(\".vcores\", \"VCores Used\")\n               .th(\".vcores\", \"VCores Avail\")\n               .th(\".nodeManagerVersion\", \"Version\")._()._().tbody();\n       NodeState stateFilter \u003d null;\n       if (type !\u003d null \u0026\u0026 !type.isEmpty()) {\n         stateFilter \u003d NodeState.valueOf(StringUtils.toUpperCase(type));\n       }\n       Collection\u003cRMNode\u003e rmNodes \u003d this.rm.getRMContext().getRMNodes().values();\n       boolean isInactive \u003d false;\n       if (stateFilter !\u003d null) {\n         switch (stateFilter) {\n         case DECOMMISSIONED:\n         case LOST:\n         case REBOOTED:\n+        case SHUTDOWN:\n           rmNodes \u003d this.rm.getRMContext().getInactiveRMNodes().values();\n           isInactive \u003d true;\n           break;\n         default:\n           LOG.debug(\"Unexpected state filter for inactive RM node\");\n         }\n       }\n       for (RMNode ni : rmNodes) {\n         if (stateFilter !\u003d null) {\n           NodeState state \u003d ni.getState();\n           if (!stateFilter.equals(state)) {\n             continue;\n           }\n         } else {\n           // No filter. User is asking for all nodes. Make sure you skip the\n           // unhealthy nodes.\n           if (ni.getState() \u003d\u003d NodeState.UNHEALTHY) {\n             continue;\n           }\n         }\n         // Besides state, we need to filter label as well.\n         if (!labelFilter.equals(RMNodeLabelsManager.ANY)) {\n           if (labelFilter.isEmpty()) {\n             // Empty label filter means only shows nodes without label\n             if (!ni.getNodeLabels().isEmpty()) {\n               continue;\n             }\n           } else if (!ni.getNodeLabels().contains(labelFilter)) {\n             // Only nodes have given label can show on web page.\n             continue;\n           }\n         }\n         NodeInfo info \u003d new NodeInfo(ni, sched);\n         int usedMemory \u003d (int) info.getUsedMemory();\n         int availableMemory \u003d (int) info.getAvailableMemory();\n         TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d\n             tbody.tr().td(StringUtils.join(\",\", info.getNodeLabels()))\n                 .td(info.getRack()).td(info.getState()).td(info.getNodeId());\n         if (isInactive) {\n           row.td()._(\"N/A\")._();\n         } else {\n           String httpAddress \u003d info.getNodeHTTPAddress();\n           row.td().a(\"//\" + httpAddress, httpAddress)._();\n         }\n         row.td().br().$title(String.valueOf(info.getLastHealthUpdate()))._()\n             ._(Times.format(info.getLastHealthUpdate()))._()\n             .td(info.getHealthReport())\n             .td(String.valueOf(info.getNumContainers())).td().br()\n             .$title(String.valueOf(usedMemory))._()\n             ._(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))._().td().br()\n             .$title(String.valueOf(availableMemory))._()\n             ._(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))._()\n             .td(String.valueOf(info.getUsedVirtualCores()))\n             .td(String.valueOf(info.getAvailableVirtualCores()))\n             .td(ni.getNodeManagerVersion())._();\n       }\n       tbody._()._();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      html._(MetricsOverviewTable.class);\n\n      ResourceScheduler sched \u003d rm.getResourceScheduler();\n      String type \u003d $(NODE_STATE);\n      String labelFilter \u003d $(NODE_LABEL, CommonNodeLabelsManager.ANY).trim();\n      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n          html.table(\"#nodes\").thead().tr()\n              .th(\".nodelabels\", \"Node Labels\")\n              .th(\".rack\", \"Rack\")\n              .th(\".state\", \"Node State\")\n              .th(\".nodeaddress\", \"Node Address\")\n              .th(\".nodehttpaddress\", \"Node HTTP Address\")\n              .th(\".lastHealthUpdate\", \"Last health-update\")\n              .th(\".healthReport\", \"Health-report\")\n              .th(\".containers\", \"Containers\")\n              .th(\".mem\", \"Mem Used\")\n              .th(\".mem\", \"Mem Avail\")\n              .th(\".vcores\", \"VCores Used\")\n              .th(\".vcores\", \"VCores Avail\")\n              .th(\".nodeManagerVersion\", \"Version\")._()._().tbody();\n      NodeState stateFilter \u003d null;\n      if (type !\u003d null \u0026\u0026 !type.isEmpty()) {\n        stateFilter \u003d NodeState.valueOf(StringUtils.toUpperCase(type));\n      }\n      Collection\u003cRMNode\u003e rmNodes \u003d this.rm.getRMContext().getRMNodes().values();\n      boolean isInactive \u003d false;\n      if (stateFilter !\u003d null) {\n        switch (stateFilter) {\n        case DECOMMISSIONED:\n        case LOST:\n        case REBOOTED:\n        case SHUTDOWN:\n          rmNodes \u003d this.rm.getRMContext().getInactiveRMNodes().values();\n          isInactive \u003d true;\n          break;\n        default:\n          LOG.debug(\"Unexpected state filter for inactive RM node\");\n        }\n      }\n      for (RMNode ni : rmNodes) {\n        if (stateFilter !\u003d null) {\n          NodeState state \u003d ni.getState();\n          if (!stateFilter.equals(state)) {\n            continue;\n          }\n        } else {\n          // No filter. User is asking for all nodes. Make sure you skip the\n          // unhealthy nodes.\n          if (ni.getState() \u003d\u003d NodeState.UNHEALTHY) {\n            continue;\n          }\n        }\n        // Besides state, we need to filter label as well.\n        if (!labelFilter.equals(RMNodeLabelsManager.ANY)) {\n          if (labelFilter.isEmpty()) {\n            // Empty label filter means only shows nodes without label\n            if (!ni.getNodeLabels().isEmpty()) {\n              continue;\n            }\n          } else if (!ni.getNodeLabels().contains(labelFilter)) {\n            // Only nodes have given label can show on web page.\n            continue;\n          }\n        }\n        NodeInfo info \u003d new NodeInfo(ni, sched);\n        int usedMemory \u003d (int) info.getUsedMemory();\n        int availableMemory \u003d (int) info.getAvailableMemory();\n        TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d\n            tbody.tr().td(StringUtils.join(\",\", info.getNodeLabels()))\n                .td(info.getRack()).td(info.getState()).td(info.getNodeId());\n        if (isInactive) {\n          row.td()._(\"N/A\")._();\n        } else {\n          String httpAddress \u003d info.getNodeHTTPAddress();\n          row.td().a(\"//\" + httpAddress, httpAddress)._();\n        }\n        row.td().br().$title(String.valueOf(info.getLastHealthUpdate()))._()\n            ._(Times.format(info.getLastHealthUpdate()))._()\n            .td(info.getHealthReport())\n            .td(String.valueOf(info.getNumContainers())).td().br()\n            .$title(String.valueOf(usedMemory))._()\n            ._(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))._().td().br()\n            .$title(String.valueOf(availableMemory))._()\n            ._(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))._()\n            .td(String.valueOf(info.getUsedVirtualCores()))\n            .td(String.valueOf(info.getAvailableVirtualCores()))\n            .td(ni.getNodeManagerVersion())._();\n      }\n      tbody._()._();\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/NodesPage.java",
      "extendedDetails": {}
    },
    "d1c6accb6f87b08975175580e15f1ff1fe29ab04": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11602. Fix toUpperCase/toLowerCase to use Locale.ENGLISH. (ozawa)\n",
      "commitDate": "02/03/15 9:17 PM",
      "commitName": "d1c6accb6f87b08975175580e15f1ff1fe29ab04",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "24/02/15 7:32 AM",
      "commitNameOld": "9cedad11d8d2197a54732667a15344983de5c437",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 6.57,
      "commitsBetweenForRepo": 57,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,86 +1,86 @@\n     protected void render(Block html) {\n       html._(MetricsOverviewTable.class);\n \n       ResourceScheduler sched \u003d rm.getResourceScheduler();\n       String type \u003d $(NODE_STATE);\n       String labelFilter \u003d $(NODE_LABEL, CommonNodeLabelsManager.ANY).trim();\n       TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n           html.table(\"#nodes\").thead().tr().th(\".nodelabels\", \"Node Labels\")\n               .th(\".rack\", \"Rack\").th(\".state\", \"Node State\")\n               .th(\".nodeaddress\", \"Node Address\")\n               .th(\".nodehttpaddress\", \"Node HTTP Address\")\n               .th(\".lastHealthUpdate\", \"Last health-update\")\n               .th(\".healthReport\", \"Health-report\")\n               .th(\".containers\", \"Containers\").th(\".mem\", \"Mem Used\")\n               .th(\".mem\", \"Mem Avail\").th(\".vcores\", \"VCores Used\")\n               .th(\".vcores\", \"VCores Avail\")\n               .th(\".nodeManagerVersion\", \"Version\")._()._().tbody();\n       NodeState stateFilter \u003d null;\n       if (type !\u003d null \u0026\u0026 !type.isEmpty()) {\n-        stateFilter \u003d NodeState.valueOf(type.toUpperCase());\n+        stateFilter \u003d NodeState.valueOf(StringUtils.toUpperCase(type));\n       }\n       Collection\u003cRMNode\u003e rmNodes \u003d this.rm.getRMContext().getRMNodes().values();\n       boolean isInactive \u003d false;\n       if (stateFilter !\u003d null) {\n         switch (stateFilter) {\n         case DECOMMISSIONED:\n         case LOST:\n         case REBOOTED:\n           rmNodes \u003d this.rm.getRMContext().getInactiveRMNodes().values();\n           isInactive \u003d true;\n           break;\n         default:\n           LOG.debug(\"Unexpected state filter for inactive RM node\");\n         }\n       }\n       for (RMNode ni : rmNodes) {\n         if (stateFilter !\u003d null) {\n           NodeState state \u003d ni.getState();\n           if (!stateFilter.equals(state)) {\n             continue;\n           }\n         } else {\n           // No filter. User is asking for all nodes. Make sure you skip the\n           // unhealthy nodes.\n           if (ni.getState() \u003d\u003d NodeState.UNHEALTHY) {\n             continue;\n           }\n         }\n         // Besides state, we need to filter label as well.\n         if (!labelFilter.equals(RMNodeLabelsManager.ANY)) {\n           if (labelFilter.isEmpty()) {\n             // Empty label filter means only shows nodes without label\n             if (!ni.getNodeLabels().isEmpty()) {\n               continue;\n             }\n           } else if (!ni.getNodeLabels().contains(labelFilter)) {\n             // Only nodes have given label can show on web page.\n             continue;\n           }\n         }\n         NodeInfo info \u003d new NodeInfo(ni, sched);\n         int usedMemory \u003d (int) info.getUsedMemory();\n         int availableMemory \u003d (int) info.getAvailableMemory();\n         TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d\n             tbody.tr().td(StringUtils.join(\",\", info.getNodeLabels()))\n                 .td(info.getRack()).td(info.getState()).td(info.getNodeId());\n         if (isInactive) {\n           row.td()._(\"N/A\")._();\n         } else {\n           String httpAddress \u003d info.getNodeHTTPAddress();\n           row.td().a(\"//\" + httpAddress, httpAddress)._();\n         }\n         row.td().br().$title(String.valueOf(info.getLastHealthUpdate()))._()\n             ._(Times.format(info.getLastHealthUpdate()))._()\n             .td(info.getHealthReport())\n             .td(String.valueOf(info.getNumContainers())).td().br()\n             .$title(String.valueOf(usedMemory))._()\n             ._(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))._().td().br()\n             .$title(String.valueOf(availableMemory))._()\n             ._(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))._()\n             .td(String.valueOf(info.getUsedVirtualCores()))\n             .td(String.valueOf(info.getAvailableVirtualCores()))\n             .td(ni.getNodeManagerVersion())._();\n       }\n       tbody._()._();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      html._(MetricsOverviewTable.class);\n\n      ResourceScheduler sched \u003d rm.getResourceScheduler();\n      String type \u003d $(NODE_STATE);\n      String labelFilter \u003d $(NODE_LABEL, CommonNodeLabelsManager.ANY).trim();\n      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n          html.table(\"#nodes\").thead().tr().th(\".nodelabels\", \"Node Labels\")\n              .th(\".rack\", \"Rack\").th(\".state\", \"Node State\")\n              .th(\".nodeaddress\", \"Node Address\")\n              .th(\".nodehttpaddress\", \"Node HTTP Address\")\n              .th(\".lastHealthUpdate\", \"Last health-update\")\n              .th(\".healthReport\", \"Health-report\")\n              .th(\".containers\", \"Containers\").th(\".mem\", \"Mem Used\")\n              .th(\".mem\", \"Mem Avail\").th(\".vcores\", \"VCores Used\")\n              .th(\".vcores\", \"VCores Avail\")\n              .th(\".nodeManagerVersion\", \"Version\")._()._().tbody();\n      NodeState stateFilter \u003d null;\n      if (type !\u003d null \u0026\u0026 !type.isEmpty()) {\n        stateFilter \u003d NodeState.valueOf(StringUtils.toUpperCase(type));\n      }\n      Collection\u003cRMNode\u003e rmNodes \u003d this.rm.getRMContext().getRMNodes().values();\n      boolean isInactive \u003d false;\n      if (stateFilter !\u003d null) {\n        switch (stateFilter) {\n        case DECOMMISSIONED:\n        case LOST:\n        case REBOOTED:\n          rmNodes \u003d this.rm.getRMContext().getInactiveRMNodes().values();\n          isInactive \u003d true;\n          break;\n        default:\n          LOG.debug(\"Unexpected state filter for inactive RM node\");\n        }\n      }\n      for (RMNode ni : rmNodes) {\n        if (stateFilter !\u003d null) {\n          NodeState state \u003d ni.getState();\n          if (!stateFilter.equals(state)) {\n            continue;\n          }\n        } else {\n          // No filter. User is asking for all nodes. Make sure you skip the\n          // unhealthy nodes.\n          if (ni.getState() \u003d\u003d NodeState.UNHEALTHY) {\n            continue;\n          }\n        }\n        // Besides state, we need to filter label as well.\n        if (!labelFilter.equals(RMNodeLabelsManager.ANY)) {\n          if (labelFilter.isEmpty()) {\n            // Empty label filter means only shows nodes without label\n            if (!ni.getNodeLabels().isEmpty()) {\n              continue;\n            }\n          } else if (!ni.getNodeLabels().contains(labelFilter)) {\n            // Only nodes have given label can show on web page.\n            continue;\n          }\n        }\n        NodeInfo info \u003d new NodeInfo(ni, sched);\n        int usedMemory \u003d (int) info.getUsedMemory();\n        int availableMemory \u003d (int) info.getAvailableMemory();\n        TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d\n            tbody.tr().td(StringUtils.join(\",\", info.getNodeLabels()))\n                .td(info.getRack()).td(info.getState()).td(info.getNodeId());\n        if (isInactive) {\n          row.td()._(\"N/A\")._();\n        } else {\n          String httpAddress \u003d info.getNodeHTTPAddress();\n          row.td().a(\"//\" + httpAddress, httpAddress)._();\n        }\n        row.td().br().$title(String.valueOf(info.getLastHealthUpdate()))._()\n            ._(Times.format(info.getLastHealthUpdate()))._()\n            .td(info.getHealthReport())\n            .td(String.valueOf(info.getNumContainers())).td().br()\n            .$title(String.valueOf(usedMemory))._()\n            ._(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))._().td().br()\n            .$title(String.valueOf(availableMemory))._()\n            ._(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))._()\n            .td(String.valueOf(info.getUsedVirtualCores()))\n            .td(String.valueOf(info.getAvailableVirtualCores()))\n            .td(ni.getNodeManagerVersion())._();\n      }\n      tbody._()._();\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/NodesPage.java",
      "extendedDetails": {}
    },
    "9cedad11d8d2197a54732667a15344983de5c437": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-11602. Fix toUpperCase/toLowerCase to use Locale.ENGLISH. (ozawa)\"\n\nThis reverts commit 946456c6d88780abe0251b098dd771e9e1e93ab3.\n\nConflicts:\n\thadoop-common-project/hadoop-common/CHANGES.txt\n\thadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/QuotaByStorageTypeEntry.java\n",
      "commitDate": "24/02/15 7:32 AM",
      "commitName": "9cedad11d8d2197a54732667a15344983de5c437",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "18/02/15 8:06 PM",
      "commitNameOld": "946456c6d88780abe0251b098dd771e9e1e93ab3",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 5.48,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,86 +1,86 @@\n     protected void render(Block html) {\n       html._(MetricsOverviewTable.class);\n \n       ResourceScheduler sched \u003d rm.getResourceScheduler();\n       String type \u003d $(NODE_STATE);\n       String labelFilter \u003d $(NODE_LABEL, CommonNodeLabelsManager.ANY).trim();\n       TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n           html.table(\"#nodes\").thead().tr().th(\".nodelabels\", \"Node Labels\")\n               .th(\".rack\", \"Rack\").th(\".state\", \"Node State\")\n               .th(\".nodeaddress\", \"Node Address\")\n               .th(\".nodehttpaddress\", \"Node HTTP Address\")\n               .th(\".lastHealthUpdate\", \"Last health-update\")\n               .th(\".healthReport\", \"Health-report\")\n               .th(\".containers\", \"Containers\").th(\".mem\", \"Mem Used\")\n               .th(\".mem\", \"Mem Avail\").th(\".vcores\", \"VCores Used\")\n               .th(\".vcores\", \"VCores Avail\")\n               .th(\".nodeManagerVersion\", \"Version\")._()._().tbody();\n       NodeState stateFilter \u003d null;\n       if (type !\u003d null \u0026\u0026 !type.isEmpty()) {\n-        stateFilter \u003d NodeState.valueOf(type.toUpperCase(Locale.ENGLISH));\n+        stateFilter \u003d NodeState.valueOf(type.toUpperCase());\n       }\n       Collection\u003cRMNode\u003e rmNodes \u003d this.rm.getRMContext().getRMNodes().values();\n       boolean isInactive \u003d false;\n       if (stateFilter !\u003d null) {\n         switch (stateFilter) {\n         case DECOMMISSIONED:\n         case LOST:\n         case REBOOTED:\n           rmNodes \u003d this.rm.getRMContext().getInactiveRMNodes().values();\n           isInactive \u003d true;\n           break;\n         default:\n           LOG.debug(\"Unexpected state filter for inactive RM node\");\n         }\n       }\n       for (RMNode ni : rmNodes) {\n         if (stateFilter !\u003d null) {\n           NodeState state \u003d ni.getState();\n           if (!stateFilter.equals(state)) {\n             continue;\n           }\n         } else {\n           // No filter. User is asking for all nodes. Make sure you skip the\n           // unhealthy nodes.\n           if (ni.getState() \u003d\u003d NodeState.UNHEALTHY) {\n             continue;\n           }\n         }\n         // Besides state, we need to filter label as well.\n         if (!labelFilter.equals(RMNodeLabelsManager.ANY)) {\n           if (labelFilter.isEmpty()) {\n             // Empty label filter means only shows nodes without label\n             if (!ni.getNodeLabels().isEmpty()) {\n               continue;\n             }\n           } else if (!ni.getNodeLabels().contains(labelFilter)) {\n             // Only nodes have given label can show on web page.\n             continue;\n           }\n         }\n         NodeInfo info \u003d new NodeInfo(ni, sched);\n         int usedMemory \u003d (int) info.getUsedMemory();\n         int availableMemory \u003d (int) info.getAvailableMemory();\n         TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d\n             tbody.tr().td(StringUtils.join(\",\", info.getNodeLabels()))\n                 .td(info.getRack()).td(info.getState()).td(info.getNodeId());\n         if (isInactive) {\n           row.td()._(\"N/A\")._();\n         } else {\n           String httpAddress \u003d info.getNodeHTTPAddress();\n           row.td().a(\"//\" + httpAddress, httpAddress)._();\n         }\n         row.td().br().$title(String.valueOf(info.getLastHealthUpdate()))._()\n             ._(Times.format(info.getLastHealthUpdate()))._()\n             .td(info.getHealthReport())\n             .td(String.valueOf(info.getNumContainers())).td().br()\n             .$title(String.valueOf(usedMemory))._()\n             ._(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))._().td().br()\n             .$title(String.valueOf(availableMemory))._()\n             ._(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))._()\n             .td(String.valueOf(info.getUsedVirtualCores()))\n             .td(String.valueOf(info.getAvailableVirtualCores()))\n             .td(ni.getNodeManagerVersion())._();\n       }\n       tbody._()._();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      html._(MetricsOverviewTable.class);\n\n      ResourceScheduler sched \u003d rm.getResourceScheduler();\n      String type \u003d $(NODE_STATE);\n      String labelFilter \u003d $(NODE_LABEL, CommonNodeLabelsManager.ANY).trim();\n      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n          html.table(\"#nodes\").thead().tr().th(\".nodelabels\", \"Node Labels\")\n              .th(\".rack\", \"Rack\").th(\".state\", \"Node State\")\n              .th(\".nodeaddress\", \"Node Address\")\n              .th(\".nodehttpaddress\", \"Node HTTP Address\")\n              .th(\".lastHealthUpdate\", \"Last health-update\")\n              .th(\".healthReport\", \"Health-report\")\n              .th(\".containers\", \"Containers\").th(\".mem\", \"Mem Used\")\n              .th(\".mem\", \"Mem Avail\").th(\".vcores\", \"VCores Used\")\n              .th(\".vcores\", \"VCores Avail\")\n              .th(\".nodeManagerVersion\", \"Version\")._()._().tbody();\n      NodeState stateFilter \u003d null;\n      if (type !\u003d null \u0026\u0026 !type.isEmpty()) {\n        stateFilter \u003d NodeState.valueOf(type.toUpperCase());\n      }\n      Collection\u003cRMNode\u003e rmNodes \u003d this.rm.getRMContext().getRMNodes().values();\n      boolean isInactive \u003d false;\n      if (stateFilter !\u003d null) {\n        switch (stateFilter) {\n        case DECOMMISSIONED:\n        case LOST:\n        case REBOOTED:\n          rmNodes \u003d this.rm.getRMContext().getInactiveRMNodes().values();\n          isInactive \u003d true;\n          break;\n        default:\n          LOG.debug(\"Unexpected state filter for inactive RM node\");\n        }\n      }\n      for (RMNode ni : rmNodes) {\n        if (stateFilter !\u003d null) {\n          NodeState state \u003d ni.getState();\n          if (!stateFilter.equals(state)) {\n            continue;\n          }\n        } else {\n          // No filter. User is asking for all nodes. Make sure you skip the\n          // unhealthy nodes.\n          if (ni.getState() \u003d\u003d NodeState.UNHEALTHY) {\n            continue;\n          }\n        }\n        // Besides state, we need to filter label as well.\n        if (!labelFilter.equals(RMNodeLabelsManager.ANY)) {\n          if (labelFilter.isEmpty()) {\n            // Empty label filter means only shows nodes without label\n            if (!ni.getNodeLabels().isEmpty()) {\n              continue;\n            }\n          } else if (!ni.getNodeLabels().contains(labelFilter)) {\n            // Only nodes have given label can show on web page.\n            continue;\n          }\n        }\n        NodeInfo info \u003d new NodeInfo(ni, sched);\n        int usedMemory \u003d (int) info.getUsedMemory();\n        int availableMemory \u003d (int) info.getAvailableMemory();\n        TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d\n            tbody.tr().td(StringUtils.join(\",\", info.getNodeLabels()))\n                .td(info.getRack()).td(info.getState()).td(info.getNodeId());\n        if (isInactive) {\n          row.td()._(\"N/A\")._();\n        } else {\n          String httpAddress \u003d info.getNodeHTTPAddress();\n          row.td().a(\"//\" + httpAddress, httpAddress)._();\n        }\n        row.td().br().$title(String.valueOf(info.getLastHealthUpdate()))._()\n            ._(Times.format(info.getLastHealthUpdate()))._()\n            .td(info.getHealthReport())\n            .td(String.valueOf(info.getNumContainers())).td().br()\n            .$title(String.valueOf(usedMemory))._()\n            ._(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))._().td().br()\n            .$title(String.valueOf(availableMemory))._()\n            ._(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))._()\n            .td(String.valueOf(info.getUsedVirtualCores()))\n            .td(String.valueOf(info.getAvailableVirtualCores()))\n            .td(ni.getNodeManagerVersion())._();\n      }\n      tbody._()._();\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/NodesPage.java",
      "extendedDetails": {}
    },
    "946456c6d88780abe0251b098dd771e9e1e93ab3": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11602. Fix toUpperCase/toLowerCase to use Locale.ENGLISH. (ozawa)\n",
      "commitDate": "18/02/15 8:06 PM",
      "commitName": "946456c6d88780abe0251b098dd771e9e1e93ab3",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "30/12/14 4:49 PM",
      "commitNameOld": "b7442bf92eb6e1ae64a0f9644ffc2eee4597aad5",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 50.14,
      "commitsBetweenForRepo": 419,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,86 +1,86 @@\n     protected void render(Block html) {\n       html._(MetricsOverviewTable.class);\n \n       ResourceScheduler sched \u003d rm.getResourceScheduler();\n       String type \u003d $(NODE_STATE);\n       String labelFilter \u003d $(NODE_LABEL, CommonNodeLabelsManager.ANY).trim();\n       TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n           html.table(\"#nodes\").thead().tr().th(\".nodelabels\", \"Node Labels\")\n               .th(\".rack\", \"Rack\").th(\".state\", \"Node State\")\n               .th(\".nodeaddress\", \"Node Address\")\n               .th(\".nodehttpaddress\", \"Node HTTP Address\")\n               .th(\".lastHealthUpdate\", \"Last health-update\")\n               .th(\".healthReport\", \"Health-report\")\n               .th(\".containers\", \"Containers\").th(\".mem\", \"Mem Used\")\n               .th(\".mem\", \"Mem Avail\").th(\".vcores\", \"VCores Used\")\n               .th(\".vcores\", \"VCores Avail\")\n               .th(\".nodeManagerVersion\", \"Version\")._()._().tbody();\n       NodeState stateFilter \u003d null;\n       if (type !\u003d null \u0026\u0026 !type.isEmpty()) {\n-        stateFilter \u003d NodeState.valueOf(type.toUpperCase());\n+        stateFilter \u003d NodeState.valueOf(type.toUpperCase(Locale.ENGLISH));\n       }\n       Collection\u003cRMNode\u003e rmNodes \u003d this.rm.getRMContext().getRMNodes().values();\n       boolean isInactive \u003d false;\n       if (stateFilter !\u003d null) {\n         switch (stateFilter) {\n         case DECOMMISSIONED:\n         case LOST:\n         case REBOOTED:\n           rmNodes \u003d this.rm.getRMContext().getInactiveRMNodes().values();\n           isInactive \u003d true;\n           break;\n         default:\n           LOG.debug(\"Unexpected state filter for inactive RM node\");\n         }\n       }\n       for (RMNode ni : rmNodes) {\n         if (stateFilter !\u003d null) {\n           NodeState state \u003d ni.getState();\n           if (!stateFilter.equals(state)) {\n             continue;\n           }\n         } else {\n           // No filter. User is asking for all nodes. Make sure you skip the\n           // unhealthy nodes.\n           if (ni.getState() \u003d\u003d NodeState.UNHEALTHY) {\n             continue;\n           }\n         }\n         // Besides state, we need to filter label as well.\n         if (!labelFilter.equals(RMNodeLabelsManager.ANY)) {\n           if (labelFilter.isEmpty()) {\n             // Empty label filter means only shows nodes without label\n             if (!ni.getNodeLabels().isEmpty()) {\n               continue;\n             }\n           } else if (!ni.getNodeLabels().contains(labelFilter)) {\n             // Only nodes have given label can show on web page.\n             continue;\n           }\n         }\n         NodeInfo info \u003d new NodeInfo(ni, sched);\n         int usedMemory \u003d (int) info.getUsedMemory();\n         int availableMemory \u003d (int) info.getAvailableMemory();\n         TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d\n             tbody.tr().td(StringUtils.join(\",\", info.getNodeLabels()))\n                 .td(info.getRack()).td(info.getState()).td(info.getNodeId());\n         if (isInactive) {\n           row.td()._(\"N/A\")._();\n         } else {\n           String httpAddress \u003d info.getNodeHTTPAddress();\n           row.td().a(\"//\" + httpAddress, httpAddress)._();\n         }\n         row.td().br().$title(String.valueOf(info.getLastHealthUpdate()))._()\n             ._(Times.format(info.getLastHealthUpdate()))._()\n             .td(info.getHealthReport())\n             .td(String.valueOf(info.getNumContainers())).td().br()\n             .$title(String.valueOf(usedMemory))._()\n             ._(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))._().td().br()\n             .$title(String.valueOf(availableMemory))._()\n             ._(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))._()\n             .td(String.valueOf(info.getUsedVirtualCores()))\n             .td(String.valueOf(info.getAvailableVirtualCores()))\n             .td(ni.getNodeManagerVersion())._();\n       }\n       tbody._()._();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      html._(MetricsOverviewTable.class);\n\n      ResourceScheduler sched \u003d rm.getResourceScheduler();\n      String type \u003d $(NODE_STATE);\n      String labelFilter \u003d $(NODE_LABEL, CommonNodeLabelsManager.ANY).trim();\n      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n          html.table(\"#nodes\").thead().tr().th(\".nodelabels\", \"Node Labels\")\n              .th(\".rack\", \"Rack\").th(\".state\", \"Node State\")\n              .th(\".nodeaddress\", \"Node Address\")\n              .th(\".nodehttpaddress\", \"Node HTTP Address\")\n              .th(\".lastHealthUpdate\", \"Last health-update\")\n              .th(\".healthReport\", \"Health-report\")\n              .th(\".containers\", \"Containers\").th(\".mem\", \"Mem Used\")\n              .th(\".mem\", \"Mem Avail\").th(\".vcores\", \"VCores Used\")\n              .th(\".vcores\", \"VCores Avail\")\n              .th(\".nodeManagerVersion\", \"Version\")._()._().tbody();\n      NodeState stateFilter \u003d null;\n      if (type !\u003d null \u0026\u0026 !type.isEmpty()) {\n        stateFilter \u003d NodeState.valueOf(type.toUpperCase(Locale.ENGLISH));\n      }\n      Collection\u003cRMNode\u003e rmNodes \u003d this.rm.getRMContext().getRMNodes().values();\n      boolean isInactive \u003d false;\n      if (stateFilter !\u003d null) {\n        switch (stateFilter) {\n        case DECOMMISSIONED:\n        case LOST:\n        case REBOOTED:\n          rmNodes \u003d this.rm.getRMContext().getInactiveRMNodes().values();\n          isInactive \u003d true;\n          break;\n        default:\n          LOG.debug(\"Unexpected state filter for inactive RM node\");\n        }\n      }\n      for (RMNode ni : rmNodes) {\n        if (stateFilter !\u003d null) {\n          NodeState state \u003d ni.getState();\n          if (!stateFilter.equals(state)) {\n            continue;\n          }\n        } else {\n          // No filter. User is asking for all nodes. Make sure you skip the\n          // unhealthy nodes.\n          if (ni.getState() \u003d\u003d NodeState.UNHEALTHY) {\n            continue;\n          }\n        }\n        // Besides state, we need to filter label as well.\n        if (!labelFilter.equals(RMNodeLabelsManager.ANY)) {\n          if (labelFilter.isEmpty()) {\n            // Empty label filter means only shows nodes without label\n            if (!ni.getNodeLabels().isEmpty()) {\n              continue;\n            }\n          } else if (!ni.getNodeLabels().contains(labelFilter)) {\n            // Only nodes have given label can show on web page.\n            continue;\n          }\n        }\n        NodeInfo info \u003d new NodeInfo(ni, sched);\n        int usedMemory \u003d (int) info.getUsedMemory();\n        int availableMemory \u003d (int) info.getAvailableMemory();\n        TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d\n            tbody.tr().td(StringUtils.join(\",\", info.getNodeLabels()))\n                .td(info.getRack()).td(info.getState()).td(info.getNodeId());\n        if (isInactive) {\n          row.td()._(\"N/A\")._();\n        } else {\n          String httpAddress \u003d info.getNodeHTTPAddress();\n          row.td().a(\"//\" + httpAddress, httpAddress)._();\n        }\n        row.td().br().$title(String.valueOf(info.getLastHealthUpdate()))._()\n            ._(Times.format(info.getLastHealthUpdate()))._()\n            .td(info.getHealthReport())\n            .td(String.valueOf(info.getNumContainers())).td().br()\n            .$title(String.valueOf(usedMemory))._()\n            ._(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))._().td().br()\n            .$title(String.valueOf(availableMemory))._()\n            ._(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))._()\n            .td(String.valueOf(info.getUsedVirtualCores()))\n            .td(String.valueOf(info.getAvailableVirtualCores()))\n            .td(ni.getNodeManagerVersion())._();\n      }\n      tbody._()._();\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/NodesPage.java",
      "extendedDetails": {}
    },
    "b7442bf92eb6e1ae64a0f9644ffc2eee4597aad5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2493. Added node-labels page on RM web UI. Contributed by Wangda Tan\n",
      "commitDate": "30/12/14 4:49 PM",
      "commitName": "b7442bf92eb6e1ae64a0f9644ffc2eee4597aad5",
      "commitAuthor": "Jian He",
      "commitDateOld": "30/12/14 4:48 PM",
      "commitNameOld": "746ad6e989683fe1dfc61a611702c9be7b5cd264",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,84 +1,86 @@\n     protected void render(Block html) {\n       html._(MetricsOverviewTable.class);\n \n       ResourceScheduler sched \u003d rm.getResourceScheduler();\n       String type \u003d $(NODE_STATE);\n-      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.table(\"#nodes\").\n-          thead().\n-          tr().\n-          th(\".nodelabels\", \"Node Labels\").\n-          th(\".rack\", \"Rack\").\n-          th(\".state\", \"Node State\").\n-          th(\".nodeaddress\", \"Node Address\").\n-          th(\".nodehttpaddress\", \"Node HTTP Address\").\n-          th(\".lastHealthUpdate\", \"Last health-update\").\n-          th(\".healthReport\", \"Health-report\").\n-          th(\".containers\", \"Containers\").\n-          th(\".mem\", \"Mem Used\").\n-          th(\".mem\", \"Mem Avail\").\n-          th(\".vcores\", \"VCores Used\").\n-          th(\".vcores\", \"VCores Avail\").\n-          th(\".nodeManagerVersion\", \"Version\").\n-          _()._().\n-          tbody();\n+      String labelFilter \u003d $(NODE_LABEL, CommonNodeLabelsManager.ANY).trim();\n+      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n+          html.table(\"#nodes\").thead().tr().th(\".nodelabels\", \"Node Labels\")\n+              .th(\".rack\", \"Rack\").th(\".state\", \"Node State\")\n+              .th(\".nodeaddress\", \"Node Address\")\n+              .th(\".nodehttpaddress\", \"Node HTTP Address\")\n+              .th(\".lastHealthUpdate\", \"Last health-update\")\n+              .th(\".healthReport\", \"Health-report\")\n+              .th(\".containers\", \"Containers\").th(\".mem\", \"Mem Used\")\n+              .th(\".mem\", \"Mem Avail\").th(\".vcores\", \"VCores Used\")\n+              .th(\".vcores\", \"VCores Avail\")\n+              .th(\".nodeManagerVersion\", \"Version\")._()._().tbody();\n       NodeState stateFilter \u003d null;\n-      if(type !\u003d null \u0026\u0026 !type.isEmpty()) {\n+      if (type !\u003d null \u0026\u0026 !type.isEmpty()) {\n         stateFilter \u003d NodeState.valueOf(type.toUpperCase());\n       }\n       Collection\u003cRMNode\u003e rmNodes \u003d this.rm.getRMContext().getRMNodes().values();\n       boolean isInactive \u003d false;\n       if (stateFilter !\u003d null) {\n         switch (stateFilter) {\n         case DECOMMISSIONED:\n         case LOST:\n         case REBOOTED:\n           rmNodes \u003d this.rm.getRMContext().getInactiveRMNodes().values();\n           isInactive \u003d true;\n           break;\n         default:\n           LOG.debug(\"Unexpected state filter for inactive RM node\");\n         }\n       }\n       for (RMNode ni : rmNodes) {\n-        if(stateFilter !\u003d null) {\n+        if (stateFilter !\u003d null) {\n           NodeState state \u003d ni.getState();\n-          if(!stateFilter.equals(state)) {\n+          if (!stateFilter.equals(state)) {\n             continue;\n           }\n         } else {\n           // No filter. User is asking for all nodes. Make sure you skip the\n           // unhealthy nodes.\n           if (ni.getState() \u003d\u003d NodeState.UNHEALTHY) {\n             continue;\n           }\n         }\n+        // Besides state, we need to filter label as well.\n+        if (!labelFilter.equals(RMNodeLabelsManager.ANY)) {\n+          if (labelFilter.isEmpty()) {\n+            // Empty label filter means only shows nodes without label\n+            if (!ni.getNodeLabels().isEmpty()) {\n+              continue;\n+            }\n+          } else if (!ni.getNodeLabels().contains(labelFilter)) {\n+            // Only nodes have given label can show on web page.\n+            continue;\n+          }\n+        }\n         NodeInfo info \u003d new NodeInfo(ni, sched);\n-        int usedMemory \u003d (int)info.getUsedMemory();\n-        int availableMemory \u003d (int)info.getAvailableMemory();\n-        TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d tbody.tr().\n-            td(StringUtils.join(\",\", info.getNodeLabels())).\n-            td(info.getRack()).\n-            td(info.getState()).\n-            td(info.getNodeId());\n+        int usedMemory \u003d (int) info.getUsedMemory();\n+        int availableMemory \u003d (int) info.getAvailableMemory();\n+        TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d\n+            tbody.tr().td(StringUtils.join(\",\", info.getNodeLabels()))\n+                .td(info.getRack()).td(info.getState()).td(info.getNodeId());\n         if (isInactive) {\n           row.td()._(\"N/A\")._();\n         } else {\n           String httpAddress \u003d info.getNodeHTTPAddress();\n-          row.td().a(\"//\" + httpAddress,\n-              httpAddress)._();\n+          row.td().a(\"//\" + httpAddress, httpAddress)._();\n         }\n-        row.td().br().$title(String.valueOf(info.getLastHealthUpdate()))._().\n-              _(Times.format(info.getLastHealthUpdate()))._().\n-            td(info.getHealthReport()).\n-            td(String.valueOf(info.getNumContainers())).\n-            td().br().$title(String.valueOf(usedMemory))._().\n-              _(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))._().\n-            td().br().$title(String.valueOf(availableMemory))._().\n-              _(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))._().\n-              td(String.valueOf(info.getUsedVirtualCores())).\n-              td(String.valueOf(info.getAvailableVirtualCores())).\n-            td(ni.getNodeManagerVersion()).\n-            _();\n+        row.td().br().$title(String.valueOf(info.getLastHealthUpdate()))._()\n+            ._(Times.format(info.getLastHealthUpdate()))._()\n+            .td(info.getHealthReport())\n+            .td(String.valueOf(info.getNumContainers())).td().br()\n+            .$title(String.valueOf(usedMemory))._()\n+            ._(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))._().td().br()\n+            .$title(String.valueOf(availableMemory))._()\n+            ._(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))._()\n+            .td(String.valueOf(info.getUsedVirtualCores()))\n+            .td(String.valueOf(info.getAvailableVirtualCores()))\n+            .td(ni.getNodeManagerVersion())._();\n       }\n       tbody._()._();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      html._(MetricsOverviewTable.class);\n\n      ResourceScheduler sched \u003d rm.getResourceScheduler();\n      String type \u003d $(NODE_STATE);\n      String labelFilter \u003d $(NODE_LABEL, CommonNodeLabelsManager.ANY).trim();\n      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n          html.table(\"#nodes\").thead().tr().th(\".nodelabels\", \"Node Labels\")\n              .th(\".rack\", \"Rack\").th(\".state\", \"Node State\")\n              .th(\".nodeaddress\", \"Node Address\")\n              .th(\".nodehttpaddress\", \"Node HTTP Address\")\n              .th(\".lastHealthUpdate\", \"Last health-update\")\n              .th(\".healthReport\", \"Health-report\")\n              .th(\".containers\", \"Containers\").th(\".mem\", \"Mem Used\")\n              .th(\".mem\", \"Mem Avail\").th(\".vcores\", \"VCores Used\")\n              .th(\".vcores\", \"VCores Avail\")\n              .th(\".nodeManagerVersion\", \"Version\")._()._().tbody();\n      NodeState stateFilter \u003d null;\n      if (type !\u003d null \u0026\u0026 !type.isEmpty()) {\n        stateFilter \u003d NodeState.valueOf(type.toUpperCase());\n      }\n      Collection\u003cRMNode\u003e rmNodes \u003d this.rm.getRMContext().getRMNodes().values();\n      boolean isInactive \u003d false;\n      if (stateFilter !\u003d null) {\n        switch (stateFilter) {\n        case DECOMMISSIONED:\n        case LOST:\n        case REBOOTED:\n          rmNodes \u003d this.rm.getRMContext().getInactiveRMNodes().values();\n          isInactive \u003d true;\n          break;\n        default:\n          LOG.debug(\"Unexpected state filter for inactive RM node\");\n        }\n      }\n      for (RMNode ni : rmNodes) {\n        if (stateFilter !\u003d null) {\n          NodeState state \u003d ni.getState();\n          if (!stateFilter.equals(state)) {\n            continue;\n          }\n        } else {\n          // No filter. User is asking for all nodes. Make sure you skip the\n          // unhealthy nodes.\n          if (ni.getState() \u003d\u003d NodeState.UNHEALTHY) {\n            continue;\n          }\n        }\n        // Besides state, we need to filter label as well.\n        if (!labelFilter.equals(RMNodeLabelsManager.ANY)) {\n          if (labelFilter.isEmpty()) {\n            // Empty label filter means only shows nodes without label\n            if (!ni.getNodeLabels().isEmpty()) {\n              continue;\n            }\n          } else if (!ni.getNodeLabels().contains(labelFilter)) {\n            // Only nodes have given label can show on web page.\n            continue;\n          }\n        }\n        NodeInfo info \u003d new NodeInfo(ni, sched);\n        int usedMemory \u003d (int) info.getUsedMemory();\n        int availableMemory \u003d (int) info.getAvailableMemory();\n        TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d\n            tbody.tr().td(StringUtils.join(\",\", info.getNodeLabels()))\n                .td(info.getRack()).td(info.getState()).td(info.getNodeId());\n        if (isInactive) {\n          row.td()._(\"N/A\")._();\n        } else {\n          String httpAddress \u003d info.getNodeHTTPAddress();\n          row.td().a(\"//\" + httpAddress, httpAddress)._();\n        }\n        row.td().br().$title(String.valueOf(info.getLastHealthUpdate()))._()\n            ._(Times.format(info.getLastHealthUpdate()))._()\n            .td(info.getHealthReport())\n            .td(String.valueOf(info.getNumContainers())).td().br()\n            .$title(String.valueOf(usedMemory))._()\n            ._(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))._().td().br()\n            .$title(String.valueOf(availableMemory))._()\n            ._(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))._()\n            .td(String.valueOf(info.getUsedVirtualCores()))\n            .td(String.valueOf(info.getAvailableVirtualCores()))\n            .td(ni.getNodeManagerVersion())._();\n      }\n      tbody._()._();\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/NodesPage.java",
      "extendedDetails": {}
    },
    "746ad6e989683fe1dfc61a611702c9be7b5cd264": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"YARN-2492(wrong jira number). Added node-labels page on RM web UI. Contributed by Wangda Tan\"\n\nThis reverts commit 5f57b904f550515693d93a2959e663b0d0260696.\n",
      "commitDate": "30/12/14 4:48 PM",
      "commitName": "746ad6e989683fe1dfc61a611702c9be7b5cd264",
      "commitAuthor": "Jian He",
      "commitDateOld": "30/12/14 3:38 PM",
      "commitNameOld": "5f57b904f550515693d93a2959e663b0d0260696",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.05,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,86 +1,84 @@\n     protected void render(Block html) {\n       html._(MetricsOverviewTable.class);\n \n       ResourceScheduler sched \u003d rm.getResourceScheduler();\n       String type \u003d $(NODE_STATE);\n-      String labelFilter \u003d $(NODE_LABEL, CommonNodeLabelsManager.ANY).trim();\n-      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n-          html.table(\"#nodes\").thead().tr().th(\".nodelabels\", \"Node Labels\")\n-              .th(\".rack\", \"Rack\").th(\".state\", \"Node State\")\n-              .th(\".nodeaddress\", \"Node Address\")\n-              .th(\".nodehttpaddress\", \"Node HTTP Address\")\n-              .th(\".lastHealthUpdate\", \"Last health-update\")\n-              .th(\".healthReport\", \"Health-report\")\n-              .th(\".containers\", \"Containers\").th(\".mem\", \"Mem Used\")\n-              .th(\".mem\", \"Mem Avail\").th(\".vcores\", \"VCores Used\")\n-              .th(\".vcores\", \"VCores Avail\")\n-              .th(\".nodeManagerVersion\", \"Version\")._()._().tbody();\n+      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.table(\"#nodes\").\n+          thead().\n+          tr().\n+          th(\".nodelabels\", \"Node Labels\").\n+          th(\".rack\", \"Rack\").\n+          th(\".state\", \"Node State\").\n+          th(\".nodeaddress\", \"Node Address\").\n+          th(\".nodehttpaddress\", \"Node HTTP Address\").\n+          th(\".lastHealthUpdate\", \"Last health-update\").\n+          th(\".healthReport\", \"Health-report\").\n+          th(\".containers\", \"Containers\").\n+          th(\".mem\", \"Mem Used\").\n+          th(\".mem\", \"Mem Avail\").\n+          th(\".vcores\", \"VCores Used\").\n+          th(\".vcores\", \"VCores Avail\").\n+          th(\".nodeManagerVersion\", \"Version\").\n+          _()._().\n+          tbody();\n       NodeState stateFilter \u003d null;\n-      if (type !\u003d null \u0026\u0026 !type.isEmpty()) {\n+      if(type !\u003d null \u0026\u0026 !type.isEmpty()) {\n         stateFilter \u003d NodeState.valueOf(type.toUpperCase());\n       }\n       Collection\u003cRMNode\u003e rmNodes \u003d this.rm.getRMContext().getRMNodes().values();\n       boolean isInactive \u003d false;\n       if (stateFilter !\u003d null) {\n         switch (stateFilter) {\n         case DECOMMISSIONED:\n         case LOST:\n         case REBOOTED:\n           rmNodes \u003d this.rm.getRMContext().getInactiveRMNodes().values();\n           isInactive \u003d true;\n           break;\n         default:\n           LOG.debug(\"Unexpected state filter for inactive RM node\");\n         }\n       }\n       for (RMNode ni : rmNodes) {\n-        if (stateFilter !\u003d null) {\n+        if(stateFilter !\u003d null) {\n           NodeState state \u003d ni.getState();\n-          if (!stateFilter.equals(state)) {\n+          if(!stateFilter.equals(state)) {\n             continue;\n           }\n         } else {\n           // No filter. User is asking for all nodes. Make sure you skip the\n           // unhealthy nodes.\n           if (ni.getState() \u003d\u003d NodeState.UNHEALTHY) {\n             continue;\n           }\n         }\n-        // Besides state, we need to filter label as well.\n-        if (!labelFilter.equals(RMNodeLabelsManager.ANY)) {\n-          if (labelFilter.isEmpty()) {\n-            // Empty label filter means only shows nodes without label\n-            if (!ni.getNodeLabels().isEmpty()) {\n-              continue;\n-            }\n-          } else if (!ni.getNodeLabels().contains(labelFilter)) {\n-            // Only nodes have given label can show on web page.\n-            continue;\n-          }\n-        }\n         NodeInfo info \u003d new NodeInfo(ni, sched);\n-        int usedMemory \u003d (int) info.getUsedMemory();\n-        int availableMemory \u003d (int) info.getAvailableMemory();\n-        TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d\n-            tbody.tr().td(StringUtils.join(\",\", info.getNodeLabels()))\n-                .td(info.getRack()).td(info.getState()).td(info.getNodeId());\n+        int usedMemory \u003d (int)info.getUsedMemory();\n+        int availableMemory \u003d (int)info.getAvailableMemory();\n+        TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d tbody.tr().\n+            td(StringUtils.join(\",\", info.getNodeLabels())).\n+            td(info.getRack()).\n+            td(info.getState()).\n+            td(info.getNodeId());\n         if (isInactive) {\n           row.td()._(\"N/A\")._();\n         } else {\n           String httpAddress \u003d info.getNodeHTTPAddress();\n-          row.td().a(\"//\" + httpAddress, httpAddress)._();\n+          row.td().a(\"//\" + httpAddress,\n+              httpAddress)._();\n         }\n-        row.td().br().$title(String.valueOf(info.getLastHealthUpdate()))._()\n-            ._(Times.format(info.getLastHealthUpdate()))._()\n-            .td(info.getHealthReport())\n-            .td(String.valueOf(info.getNumContainers())).td().br()\n-            .$title(String.valueOf(usedMemory))._()\n-            ._(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))._().td().br()\n-            .$title(String.valueOf(availableMemory))._()\n-            ._(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))._()\n-            .td(String.valueOf(info.getUsedVirtualCores()))\n-            .td(String.valueOf(info.getAvailableVirtualCores()))\n-            .td(ni.getNodeManagerVersion())._();\n+        row.td().br().$title(String.valueOf(info.getLastHealthUpdate()))._().\n+              _(Times.format(info.getLastHealthUpdate()))._().\n+            td(info.getHealthReport()).\n+            td(String.valueOf(info.getNumContainers())).\n+            td().br().$title(String.valueOf(usedMemory))._().\n+              _(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))._().\n+            td().br().$title(String.valueOf(availableMemory))._().\n+              _(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))._().\n+              td(String.valueOf(info.getUsedVirtualCores())).\n+              td(String.valueOf(info.getAvailableVirtualCores())).\n+            td(ni.getNodeManagerVersion()).\n+            _();\n       }\n       tbody._()._();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      html._(MetricsOverviewTable.class);\n\n      ResourceScheduler sched \u003d rm.getResourceScheduler();\n      String type \u003d $(NODE_STATE);\n      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.table(\"#nodes\").\n          thead().\n          tr().\n          th(\".nodelabels\", \"Node Labels\").\n          th(\".rack\", \"Rack\").\n          th(\".state\", \"Node State\").\n          th(\".nodeaddress\", \"Node Address\").\n          th(\".nodehttpaddress\", \"Node HTTP Address\").\n          th(\".lastHealthUpdate\", \"Last health-update\").\n          th(\".healthReport\", \"Health-report\").\n          th(\".containers\", \"Containers\").\n          th(\".mem\", \"Mem Used\").\n          th(\".mem\", \"Mem Avail\").\n          th(\".vcores\", \"VCores Used\").\n          th(\".vcores\", \"VCores Avail\").\n          th(\".nodeManagerVersion\", \"Version\").\n          _()._().\n          tbody();\n      NodeState stateFilter \u003d null;\n      if(type !\u003d null \u0026\u0026 !type.isEmpty()) {\n        stateFilter \u003d NodeState.valueOf(type.toUpperCase());\n      }\n      Collection\u003cRMNode\u003e rmNodes \u003d this.rm.getRMContext().getRMNodes().values();\n      boolean isInactive \u003d false;\n      if (stateFilter !\u003d null) {\n        switch (stateFilter) {\n        case DECOMMISSIONED:\n        case LOST:\n        case REBOOTED:\n          rmNodes \u003d this.rm.getRMContext().getInactiveRMNodes().values();\n          isInactive \u003d true;\n          break;\n        default:\n          LOG.debug(\"Unexpected state filter for inactive RM node\");\n        }\n      }\n      for (RMNode ni : rmNodes) {\n        if(stateFilter !\u003d null) {\n          NodeState state \u003d ni.getState();\n          if(!stateFilter.equals(state)) {\n            continue;\n          }\n        } else {\n          // No filter. User is asking for all nodes. Make sure you skip the\n          // unhealthy nodes.\n          if (ni.getState() \u003d\u003d NodeState.UNHEALTHY) {\n            continue;\n          }\n        }\n        NodeInfo info \u003d new NodeInfo(ni, sched);\n        int usedMemory \u003d (int)info.getUsedMemory();\n        int availableMemory \u003d (int)info.getAvailableMemory();\n        TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d tbody.tr().\n            td(StringUtils.join(\",\", info.getNodeLabels())).\n            td(info.getRack()).\n            td(info.getState()).\n            td(info.getNodeId());\n        if (isInactive) {\n          row.td()._(\"N/A\")._();\n        } else {\n          String httpAddress \u003d info.getNodeHTTPAddress();\n          row.td().a(\"//\" + httpAddress,\n              httpAddress)._();\n        }\n        row.td().br().$title(String.valueOf(info.getLastHealthUpdate()))._().\n              _(Times.format(info.getLastHealthUpdate()))._().\n            td(info.getHealthReport()).\n            td(String.valueOf(info.getNumContainers())).\n            td().br().$title(String.valueOf(usedMemory))._().\n              _(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))._().\n            td().br().$title(String.valueOf(availableMemory))._().\n              _(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))._().\n              td(String.valueOf(info.getUsedVirtualCores())).\n              td(String.valueOf(info.getAvailableVirtualCores())).\n            td(ni.getNodeManagerVersion()).\n            _();\n      }\n      tbody._()._();\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/NodesPage.java",
      "extendedDetails": {}
    },
    "5f57b904f550515693d93a2959e663b0d0260696": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2492. Added node-labels page on RM web UI. Contributed by Wangda Tan\n",
      "commitDate": "30/12/14 3:38 PM",
      "commitName": "5f57b904f550515693d93a2959e663b0d0260696",
      "commitAuthor": "Jian He",
      "commitDateOld": "29/12/14 9:59 AM",
      "commitNameOld": "241d3b3a50c6af92f023d8b2c24598f4813f4674",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 1.24,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,84 +1,86 @@\n     protected void render(Block html) {\n       html._(MetricsOverviewTable.class);\n \n       ResourceScheduler sched \u003d rm.getResourceScheduler();\n       String type \u003d $(NODE_STATE);\n-      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.table(\"#nodes\").\n-          thead().\n-          tr().\n-          th(\".nodelabels\", \"Node Labels\").\n-          th(\".rack\", \"Rack\").\n-          th(\".state\", \"Node State\").\n-          th(\".nodeaddress\", \"Node Address\").\n-          th(\".nodehttpaddress\", \"Node HTTP Address\").\n-          th(\".lastHealthUpdate\", \"Last health-update\").\n-          th(\".healthReport\", \"Health-report\").\n-          th(\".containers\", \"Containers\").\n-          th(\".mem\", \"Mem Used\").\n-          th(\".mem\", \"Mem Avail\").\n-          th(\".vcores\", \"VCores Used\").\n-          th(\".vcores\", \"VCores Avail\").\n-          th(\".nodeManagerVersion\", \"Version\").\n-          _()._().\n-          tbody();\n+      String labelFilter \u003d $(NODE_LABEL, CommonNodeLabelsManager.ANY).trim();\n+      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n+          html.table(\"#nodes\").thead().tr().th(\".nodelabels\", \"Node Labels\")\n+              .th(\".rack\", \"Rack\").th(\".state\", \"Node State\")\n+              .th(\".nodeaddress\", \"Node Address\")\n+              .th(\".nodehttpaddress\", \"Node HTTP Address\")\n+              .th(\".lastHealthUpdate\", \"Last health-update\")\n+              .th(\".healthReport\", \"Health-report\")\n+              .th(\".containers\", \"Containers\").th(\".mem\", \"Mem Used\")\n+              .th(\".mem\", \"Mem Avail\").th(\".vcores\", \"VCores Used\")\n+              .th(\".vcores\", \"VCores Avail\")\n+              .th(\".nodeManagerVersion\", \"Version\")._()._().tbody();\n       NodeState stateFilter \u003d null;\n-      if(type !\u003d null \u0026\u0026 !type.isEmpty()) {\n+      if (type !\u003d null \u0026\u0026 !type.isEmpty()) {\n         stateFilter \u003d NodeState.valueOf(type.toUpperCase());\n       }\n       Collection\u003cRMNode\u003e rmNodes \u003d this.rm.getRMContext().getRMNodes().values();\n       boolean isInactive \u003d false;\n       if (stateFilter !\u003d null) {\n         switch (stateFilter) {\n         case DECOMMISSIONED:\n         case LOST:\n         case REBOOTED:\n           rmNodes \u003d this.rm.getRMContext().getInactiveRMNodes().values();\n           isInactive \u003d true;\n           break;\n         default:\n           LOG.debug(\"Unexpected state filter for inactive RM node\");\n         }\n       }\n       for (RMNode ni : rmNodes) {\n-        if(stateFilter !\u003d null) {\n+        if (stateFilter !\u003d null) {\n           NodeState state \u003d ni.getState();\n-          if(!stateFilter.equals(state)) {\n+          if (!stateFilter.equals(state)) {\n             continue;\n           }\n         } else {\n           // No filter. User is asking for all nodes. Make sure you skip the\n           // unhealthy nodes.\n           if (ni.getState() \u003d\u003d NodeState.UNHEALTHY) {\n             continue;\n           }\n         }\n+        // Besides state, we need to filter label as well.\n+        if (!labelFilter.equals(RMNodeLabelsManager.ANY)) {\n+          if (labelFilter.isEmpty()) {\n+            // Empty label filter means only shows nodes without label\n+            if (!ni.getNodeLabels().isEmpty()) {\n+              continue;\n+            }\n+          } else if (!ni.getNodeLabels().contains(labelFilter)) {\n+            // Only nodes have given label can show on web page.\n+            continue;\n+          }\n+        }\n         NodeInfo info \u003d new NodeInfo(ni, sched);\n-        int usedMemory \u003d (int)info.getUsedMemory();\n-        int availableMemory \u003d (int)info.getAvailableMemory();\n-        TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d tbody.tr().\n-            td(StringUtils.join(\",\", info.getNodeLabels())).\n-            td(info.getRack()).\n-            td(info.getState()).\n-            td(info.getNodeId());\n+        int usedMemory \u003d (int) info.getUsedMemory();\n+        int availableMemory \u003d (int) info.getAvailableMemory();\n+        TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d\n+            tbody.tr().td(StringUtils.join(\",\", info.getNodeLabels()))\n+                .td(info.getRack()).td(info.getState()).td(info.getNodeId());\n         if (isInactive) {\n           row.td()._(\"N/A\")._();\n         } else {\n           String httpAddress \u003d info.getNodeHTTPAddress();\n-          row.td().a(\"//\" + httpAddress,\n-              httpAddress)._();\n+          row.td().a(\"//\" + httpAddress, httpAddress)._();\n         }\n-        row.td().br().$title(String.valueOf(info.getLastHealthUpdate()))._().\n-              _(Times.format(info.getLastHealthUpdate()))._().\n-            td(info.getHealthReport()).\n-            td(String.valueOf(info.getNumContainers())).\n-            td().br().$title(String.valueOf(usedMemory))._().\n-              _(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))._().\n-            td().br().$title(String.valueOf(availableMemory))._().\n-              _(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))._().\n-              td(String.valueOf(info.getUsedVirtualCores())).\n-              td(String.valueOf(info.getAvailableVirtualCores())).\n-            td(ni.getNodeManagerVersion()).\n-            _();\n+        row.td().br().$title(String.valueOf(info.getLastHealthUpdate()))._()\n+            ._(Times.format(info.getLastHealthUpdate()))._()\n+            .td(info.getHealthReport())\n+            .td(String.valueOf(info.getNumContainers())).td().br()\n+            .$title(String.valueOf(usedMemory))._()\n+            ._(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))._().td().br()\n+            .$title(String.valueOf(availableMemory))._()\n+            ._(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))._()\n+            .td(String.valueOf(info.getUsedVirtualCores()))\n+            .td(String.valueOf(info.getAvailableVirtualCores()))\n+            .td(ni.getNodeManagerVersion())._();\n       }\n       tbody._()._();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      html._(MetricsOverviewTable.class);\n\n      ResourceScheduler sched \u003d rm.getResourceScheduler();\n      String type \u003d $(NODE_STATE);\n      String labelFilter \u003d $(NODE_LABEL, CommonNodeLabelsManager.ANY).trim();\n      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d\n          html.table(\"#nodes\").thead().tr().th(\".nodelabels\", \"Node Labels\")\n              .th(\".rack\", \"Rack\").th(\".state\", \"Node State\")\n              .th(\".nodeaddress\", \"Node Address\")\n              .th(\".nodehttpaddress\", \"Node HTTP Address\")\n              .th(\".lastHealthUpdate\", \"Last health-update\")\n              .th(\".healthReport\", \"Health-report\")\n              .th(\".containers\", \"Containers\").th(\".mem\", \"Mem Used\")\n              .th(\".mem\", \"Mem Avail\").th(\".vcores\", \"VCores Used\")\n              .th(\".vcores\", \"VCores Avail\")\n              .th(\".nodeManagerVersion\", \"Version\")._()._().tbody();\n      NodeState stateFilter \u003d null;\n      if (type !\u003d null \u0026\u0026 !type.isEmpty()) {\n        stateFilter \u003d NodeState.valueOf(type.toUpperCase());\n      }\n      Collection\u003cRMNode\u003e rmNodes \u003d this.rm.getRMContext().getRMNodes().values();\n      boolean isInactive \u003d false;\n      if (stateFilter !\u003d null) {\n        switch (stateFilter) {\n        case DECOMMISSIONED:\n        case LOST:\n        case REBOOTED:\n          rmNodes \u003d this.rm.getRMContext().getInactiveRMNodes().values();\n          isInactive \u003d true;\n          break;\n        default:\n          LOG.debug(\"Unexpected state filter for inactive RM node\");\n        }\n      }\n      for (RMNode ni : rmNodes) {\n        if (stateFilter !\u003d null) {\n          NodeState state \u003d ni.getState();\n          if (!stateFilter.equals(state)) {\n            continue;\n          }\n        } else {\n          // No filter. User is asking for all nodes. Make sure you skip the\n          // unhealthy nodes.\n          if (ni.getState() \u003d\u003d NodeState.UNHEALTHY) {\n            continue;\n          }\n        }\n        // Besides state, we need to filter label as well.\n        if (!labelFilter.equals(RMNodeLabelsManager.ANY)) {\n          if (labelFilter.isEmpty()) {\n            // Empty label filter means only shows nodes without label\n            if (!ni.getNodeLabels().isEmpty()) {\n              continue;\n            }\n          } else if (!ni.getNodeLabels().contains(labelFilter)) {\n            // Only nodes have given label can show on web page.\n            continue;\n          }\n        }\n        NodeInfo info \u003d new NodeInfo(ni, sched);\n        int usedMemory \u003d (int) info.getUsedMemory();\n        int availableMemory \u003d (int) info.getAvailableMemory();\n        TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d\n            tbody.tr().td(StringUtils.join(\",\", info.getNodeLabels()))\n                .td(info.getRack()).td(info.getState()).td(info.getNodeId());\n        if (isInactive) {\n          row.td()._(\"N/A\")._();\n        } else {\n          String httpAddress \u003d info.getNodeHTTPAddress();\n          row.td().a(\"//\" + httpAddress, httpAddress)._();\n        }\n        row.td().br().$title(String.valueOf(info.getLastHealthUpdate()))._()\n            ._(Times.format(info.getLastHealthUpdate()))._()\n            .td(info.getHealthReport())\n            .td(String.valueOf(info.getNumContainers())).td().br()\n            .$title(String.valueOf(usedMemory))._()\n            ._(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))._().td().br()\n            .$title(String.valueOf(availableMemory))._()\n            ._(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))._()\n            .td(String.valueOf(info.getUsedVirtualCores()))\n            .td(String.valueOf(info.getAvailableVirtualCores()))\n            .td(ni.getNodeManagerVersion())._();\n      }\n      tbody._()._();\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/NodesPage.java",
      "extendedDetails": {}
    },
    "241d3b3a50c6af92f023d8b2c24598f4813f4674": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2938. Fixed new findbugs warnings in hadoop-yarn-resourcemanager and hadoop-yarn-applicationhistoryservice. Contributed by Varun Saxena.\n",
      "commitDate": "29/12/14 9:59 AM",
      "commitName": "241d3b3a50c6af92f023d8b2c24598f4813f4674",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "02/12/14 5:16 PM",
      "commitNameOld": "392c3aaea8e8f156b76e418157fa347256283c56",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 26.7,
      "commitsBetweenForRepo": 173,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,82 +1,84 @@\n     protected void render(Block html) {\n       html._(MetricsOverviewTable.class);\n \n       ResourceScheduler sched \u003d rm.getResourceScheduler();\n       String type \u003d $(NODE_STATE);\n       TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.table(\"#nodes\").\n           thead().\n           tr().\n           th(\".nodelabels\", \"Node Labels\").\n           th(\".rack\", \"Rack\").\n           th(\".state\", \"Node State\").\n           th(\".nodeaddress\", \"Node Address\").\n           th(\".nodehttpaddress\", \"Node HTTP Address\").\n           th(\".lastHealthUpdate\", \"Last health-update\").\n           th(\".healthReport\", \"Health-report\").\n           th(\".containers\", \"Containers\").\n           th(\".mem\", \"Mem Used\").\n           th(\".mem\", \"Mem Avail\").\n           th(\".vcores\", \"VCores Used\").\n           th(\".vcores\", \"VCores Avail\").\n           th(\".nodeManagerVersion\", \"Version\").\n           _()._().\n           tbody();\n       NodeState stateFilter \u003d null;\n       if(type !\u003d null \u0026\u0026 !type.isEmpty()) {\n         stateFilter \u003d NodeState.valueOf(type.toUpperCase());\n       }\n       Collection\u003cRMNode\u003e rmNodes \u003d this.rm.getRMContext().getRMNodes().values();\n       boolean isInactive \u003d false;\n       if (stateFilter !\u003d null) {\n         switch (stateFilter) {\n         case DECOMMISSIONED:\n         case LOST:\n         case REBOOTED:\n           rmNodes \u003d this.rm.getRMContext().getInactiveRMNodes().values();\n           isInactive \u003d true;\n           break;\n+        default:\n+          LOG.debug(\"Unexpected state filter for inactive RM node\");\n         }\n       }\n       for (RMNode ni : rmNodes) {\n         if(stateFilter !\u003d null) {\n           NodeState state \u003d ni.getState();\n           if(!stateFilter.equals(state)) {\n             continue;\n           }\n         } else {\n           // No filter. User is asking for all nodes. Make sure you skip the\n           // unhealthy nodes.\n           if (ni.getState() \u003d\u003d NodeState.UNHEALTHY) {\n             continue;\n           }\n         }\n         NodeInfo info \u003d new NodeInfo(ni, sched);\n         int usedMemory \u003d (int)info.getUsedMemory();\n         int availableMemory \u003d (int)info.getAvailableMemory();\n         TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d tbody.tr().\n             td(StringUtils.join(\",\", info.getNodeLabels())).\n             td(info.getRack()).\n             td(info.getState()).\n             td(info.getNodeId());\n         if (isInactive) {\n           row.td()._(\"N/A\")._();\n         } else {\n           String httpAddress \u003d info.getNodeHTTPAddress();\n           row.td().a(\"//\" + httpAddress,\n               httpAddress)._();\n         }\n         row.td().br().$title(String.valueOf(info.getLastHealthUpdate()))._().\n               _(Times.format(info.getLastHealthUpdate()))._().\n             td(info.getHealthReport()).\n             td(String.valueOf(info.getNumContainers())).\n             td().br().$title(String.valueOf(usedMemory))._().\n               _(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))._().\n             td().br().$title(String.valueOf(availableMemory))._().\n               _(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))._().\n               td(String.valueOf(info.getUsedVirtualCores())).\n               td(String.valueOf(info.getAvailableVirtualCores())).\n             td(ni.getNodeManagerVersion()).\n             _();\n       }\n       tbody._()._();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      html._(MetricsOverviewTable.class);\n\n      ResourceScheduler sched \u003d rm.getResourceScheduler();\n      String type \u003d $(NODE_STATE);\n      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.table(\"#nodes\").\n          thead().\n          tr().\n          th(\".nodelabels\", \"Node Labels\").\n          th(\".rack\", \"Rack\").\n          th(\".state\", \"Node State\").\n          th(\".nodeaddress\", \"Node Address\").\n          th(\".nodehttpaddress\", \"Node HTTP Address\").\n          th(\".lastHealthUpdate\", \"Last health-update\").\n          th(\".healthReport\", \"Health-report\").\n          th(\".containers\", \"Containers\").\n          th(\".mem\", \"Mem Used\").\n          th(\".mem\", \"Mem Avail\").\n          th(\".vcores\", \"VCores Used\").\n          th(\".vcores\", \"VCores Avail\").\n          th(\".nodeManagerVersion\", \"Version\").\n          _()._().\n          tbody();\n      NodeState stateFilter \u003d null;\n      if(type !\u003d null \u0026\u0026 !type.isEmpty()) {\n        stateFilter \u003d NodeState.valueOf(type.toUpperCase());\n      }\n      Collection\u003cRMNode\u003e rmNodes \u003d this.rm.getRMContext().getRMNodes().values();\n      boolean isInactive \u003d false;\n      if (stateFilter !\u003d null) {\n        switch (stateFilter) {\n        case DECOMMISSIONED:\n        case LOST:\n        case REBOOTED:\n          rmNodes \u003d this.rm.getRMContext().getInactiveRMNodes().values();\n          isInactive \u003d true;\n          break;\n        default:\n          LOG.debug(\"Unexpected state filter for inactive RM node\");\n        }\n      }\n      for (RMNode ni : rmNodes) {\n        if(stateFilter !\u003d null) {\n          NodeState state \u003d ni.getState();\n          if(!stateFilter.equals(state)) {\n            continue;\n          }\n        } else {\n          // No filter. User is asking for all nodes. Make sure you skip the\n          // unhealthy nodes.\n          if (ni.getState() \u003d\u003d NodeState.UNHEALTHY) {\n            continue;\n          }\n        }\n        NodeInfo info \u003d new NodeInfo(ni, sched);\n        int usedMemory \u003d (int)info.getUsedMemory();\n        int availableMemory \u003d (int)info.getAvailableMemory();\n        TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d tbody.tr().\n            td(StringUtils.join(\",\", info.getNodeLabels())).\n            td(info.getRack()).\n            td(info.getState()).\n            td(info.getNodeId());\n        if (isInactive) {\n          row.td()._(\"N/A\")._();\n        } else {\n          String httpAddress \u003d info.getNodeHTTPAddress();\n          row.td().a(\"//\" + httpAddress,\n              httpAddress)._();\n        }\n        row.td().br().$title(String.valueOf(info.getLastHealthUpdate()))._().\n              _(Times.format(info.getLastHealthUpdate()))._().\n            td(info.getHealthReport()).\n            td(String.valueOf(info.getNumContainers())).\n            td().br().$title(String.valueOf(usedMemory))._().\n              _(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))._().\n            td().br().$title(String.valueOf(availableMemory))._().\n              _(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))._().\n              td(String.valueOf(info.getUsedVirtualCores())).\n              td(String.valueOf(info.getAvailableVirtualCores())).\n            td(ni.getNodeManagerVersion()).\n            _();\n      }\n      tbody._()._();\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/NodesPage.java",
      "extendedDetails": {}
    },
    "392c3aaea8e8f156b76e418157fa347256283c56": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2894. Fixed a bug regarding application view acl when RM fails over. Contributed by Rohith Sharmaks\n",
      "commitDate": "02/12/14 5:16 PM",
      "commitName": "392c3aaea8e8f156b76e418157fa347256283c56",
      "commitAuthor": "Jian He",
      "commitDateOld": "28/10/14 5:57 PM",
      "commitNameOld": "d5e0a09721a5156fa2ee51ac1c32fbfd9905b8fb",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 35.01,
      "commitsBetweenForRepo": 287,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,82 +1,82 @@\n     protected void render(Block html) {\n       html._(MetricsOverviewTable.class);\n \n       ResourceScheduler sched \u003d rm.getResourceScheduler();\n       String type \u003d $(NODE_STATE);\n       TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.table(\"#nodes\").\n           thead().\n           tr().\n           th(\".nodelabels\", \"Node Labels\").\n           th(\".rack\", \"Rack\").\n           th(\".state\", \"Node State\").\n           th(\".nodeaddress\", \"Node Address\").\n           th(\".nodehttpaddress\", \"Node HTTP Address\").\n           th(\".lastHealthUpdate\", \"Last health-update\").\n           th(\".healthReport\", \"Health-report\").\n           th(\".containers\", \"Containers\").\n           th(\".mem\", \"Mem Used\").\n           th(\".mem\", \"Mem Avail\").\n           th(\".vcores\", \"VCores Used\").\n           th(\".vcores\", \"VCores Avail\").\n           th(\".nodeManagerVersion\", \"Version\").\n           _()._().\n           tbody();\n       NodeState stateFilter \u003d null;\n       if(type !\u003d null \u0026\u0026 !type.isEmpty()) {\n         stateFilter \u003d NodeState.valueOf(type.toUpperCase());\n       }\n-      Collection\u003cRMNode\u003e rmNodes \u003d this.rmContext.getRMNodes().values();\n+      Collection\u003cRMNode\u003e rmNodes \u003d this.rm.getRMContext().getRMNodes().values();\n       boolean isInactive \u003d false;\n       if (stateFilter !\u003d null) {\n         switch (stateFilter) {\n         case DECOMMISSIONED:\n         case LOST:\n         case REBOOTED:\n-          rmNodes \u003d this.rmContext.getInactiveRMNodes().values();\n+          rmNodes \u003d this.rm.getRMContext().getInactiveRMNodes().values();\n           isInactive \u003d true;\n           break;\n         }\n       }\n       for (RMNode ni : rmNodes) {\n         if(stateFilter !\u003d null) {\n           NodeState state \u003d ni.getState();\n           if(!stateFilter.equals(state)) {\n             continue;\n           }\n         } else {\n           // No filter. User is asking for all nodes. Make sure you skip the\n           // unhealthy nodes.\n           if (ni.getState() \u003d\u003d NodeState.UNHEALTHY) {\n             continue;\n           }\n         }\n         NodeInfo info \u003d new NodeInfo(ni, sched);\n         int usedMemory \u003d (int)info.getUsedMemory();\n         int availableMemory \u003d (int)info.getAvailableMemory();\n         TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d tbody.tr().\n             td(StringUtils.join(\",\", info.getNodeLabels())).\n             td(info.getRack()).\n             td(info.getState()).\n             td(info.getNodeId());\n         if (isInactive) {\n           row.td()._(\"N/A\")._();\n         } else {\n           String httpAddress \u003d info.getNodeHTTPAddress();\n           row.td().a(\"//\" + httpAddress,\n               httpAddress)._();\n         }\n         row.td().br().$title(String.valueOf(info.getLastHealthUpdate()))._().\n               _(Times.format(info.getLastHealthUpdate()))._().\n             td(info.getHealthReport()).\n             td(String.valueOf(info.getNumContainers())).\n             td().br().$title(String.valueOf(usedMemory))._().\n               _(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))._().\n             td().br().$title(String.valueOf(availableMemory))._().\n               _(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))._().\n               td(String.valueOf(info.getUsedVirtualCores())).\n               td(String.valueOf(info.getAvailableVirtualCores())).\n             td(ni.getNodeManagerVersion()).\n             _();\n       }\n       tbody._()._();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      html._(MetricsOverviewTable.class);\n\n      ResourceScheduler sched \u003d rm.getResourceScheduler();\n      String type \u003d $(NODE_STATE);\n      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.table(\"#nodes\").\n          thead().\n          tr().\n          th(\".nodelabels\", \"Node Labels\").\n          th(\".rack\", \"Rack\").\n          th(\".state\", \"Node State\").\n          th(\".nodeaddress\", \"Node Address\").\n          th(\".nodehttpaddress\", \"Node HTTP Address\").\n          th(\".lastHealthUpdate\", \"Last health-update\").\n          th(\".healthReport\", \"Health-report\").\n          th(\".containers\", \"Containers\").\n          th(\".mem\", \"Mem Used\").\n          th(\".mem\", \"Mem Avail\").\n          th(\".vcores\", \"VCores Used\").\n          th(\".vcores\", \"VCores Avail\").\n          th(\".nodeManagerVersion\", \"Version\").\n          _()._().\n          tbody();\n      NodeState stateFilter \u003d null;\n      if(type !\u003d null \u0026\u0026 !type.isEmpty()) {\n        stateFilter \u003d NodeState.valueOf(type.toUpperCase());\n      }\n      Collection\u003cRMNode\u003e rmNodes \u003d this.rm.getRMContext().getRMNodes().values();\n      boolean isInactive \u003d false;\n      if (stateFilter !\u003d null) {\n        switch (stateFilter) {\n        case DECOMMISSIONED:\n        case LOST:\n        case REBOOTED:\n          rmNodes \u003d this.rm.getRMContext().getInactiveRMNodes().values();\n          isInactive \u003d true;\n          break;\n        }\n      }\n      for (RMNode ni : rmNodes) {\n        if(stateFilter !\u003d null) {\n          NodeState state \u003d ni.getState();\n          if(!stateFilter.equals(state)) {\n            continue;\n          }\n        } else {\n          // No filter. User is asking for all nodes. Make sure you skip the\n          // unhealthy nodes.\n          if (ni.getState() \u003d\u003d NodeState.UNHEALTHY) {\n            continue;\n          }\n        }\n        NodeInfo info \u003d new NodeInfo(ni, sched);\n        int usedMemory \u003d (int)info.getUsedMemory();\n        int availableMemory \u003d (int)info.getAvailableMemory();\n        TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d tbody.tr().\n            td(StringUtils.join(\",\", info.getNodeLabels())).\n            td(info.getRack()).\n            td(info.getState()).\n            td(info.getNodeId());\n        if (isInactive) {\n          row.td()._(\"N/A\")._();\n        } else {\n          String httpAddress \u003d info.getNodeHTTPAddress();\n          row.td().a(\"//\" + httpAddress,\n              httpAddress)._();\n        }\n        row.td().br().$title(String.valueOf(info.getLastHealthUpdate()))._().\n              _(Times.format(info.getLastHealthUpdate()))._().\n            td(info.getHealthReport()).\n            td(String.valueOf(info.getNumContainers())).\n            td().br().$title(String.valueOf(usedMemory))._().\n              _(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))._().\n            td().br().$title(String.valueOf(availableMemory))._().\n              _(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))._().\n              td(String.valueOf(info.getUsedVirtualCores())).\n              td(String.valueOf(info.getAvailableVirtualCores())).\n            td(ni.getNodeManagerVersion()).\n            _();\n      }\n      tbody._()._();\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/NodesPage.java",
      "extendedDetails": {}
    },
    "d5e0a09721a5156fa2ee51ac1c32fbfd9905b8fb": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2503. Added node lablels in web UI. Contributed by Wangda Tan\n",
      "commitDate": "28/10/14 5:57 PM",
      "commitName": "d5e0a09721a5156fa2ee51ac1c32fbfd9905b8fb",
      "commitAuthor": "Jian He",
      "commitDateOld": "24/06/14 12:34 PM",
      "commitNameOld": "1f9a0fd927ab7bef13db42dd80368fd781b3d2d1",
      "commitAuthorOld": "Thomas Graves",
      "daysBetweenCommits": 126.22,
      "commitsBetweenForRepo": 1183,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,80 +1,82 @@\n     protected void render(Block html) {\n       html._(MetricsOverviewTable.class);\n \n       ResourceScheduler sched \u003d rm.getResourceScheduler();\n       String type \u003d $(NODE_STATE);\n       TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.table(\"#nodes\").\n           thead().\n           tr().\n+          th(\".nodelabels\", \"Node Labels\").\n           th(\".rack\", \"Rack\").\n           th(\".state\", \"Node State\").\n           th(\".nodeaddress\", \"Node Address\").\n           th(\".nodehttpaddress\", \"Node HTTP Address\").\n           th(\".lastHealthUpdate\", \"Last health-update\").\n           th(\".healthReport\", \"Health-report\").\n           th(\".containers\", \"Containers\").\n           th(\".mem\", \"Mem Used\").\n           th(\".mem\", \"Mem Avail\").\n           th(\".vcores\", \"VCores Used\").\n           th(\".vcores\", \"VCores Avail\").\n           th(\".nodeManagerVersion\", \"Version\").\n           _()._().\n           tbody();\n       NodeState stateFilter \u003d null;\n       if(type !\u003d null \u0026\u0026 !type.isEmpty()) {\n         stateFilter \u003d NodeState.valueOf(type.toUpperCase());\n       }\n       Collection\u003cRMNode\u003e rmNodes \u003d this.rmContext.getRMNodes().values();\n       boolean isInactive \u003d false;\n       if (stateFilter !\u003d null) {\n         switch (stateFilter) {\n         case DECOMMISSIONED:\n         case LOST:\n         case REBOOTED:\n           rmNodes \u003d this.rmContext.getInactiveRMNodes().values();\n           isInactive \u003d true;\n           break;\n         }\n       }\n       for (RMNode ni : rmNodes) {\n         if(stateFilter !\u003d null) {\n           NodeState state \u003d ni.getState();\n           if(!stateFilter.equals(state)) {\n             continue;\n           }\n         } else {\n           // No filter. User is asking for all nodes. Make sure you skip the\n           // unhealthy nodes.\n           if (ni.getState() \u003d\u003d NodeState.UNHEALTHY) {\n             continue;\n           }\n         }\n         NodeInfo info \u003d new NodeInfo(ni, sched);\n         int usedMemory \u003d (int)info.getUsedMemory();\n         int availableMemory \u003d (int)info.getAvailableMemory();\n         TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d tbody.tr().\n+            td(StringUtils.join(\",\", info.getNodeLabels())).\n             td(info.getRack()).\n             td(info.getState()).\n             td(info.getNodeId());\n         if (isInactive) {\n           row.td()._(\"N/A\")._();\n         } else {\n           String httpAddress \u003d info.getNodeHTTPAddress();\n           row.td().a(\"//\" + httpAddress,\n               httpAddress)._();\n         }\n         row.td().br().$title(String.valueOf(info.getLastHealthUpdate()))._().\n               _(Times.format(info.getLastHealthUpdate()))._().\n             td(info.getHealthReport()).\n             td(String.valueOf(info.getNumContainers())).\n             td().br().$title(String.valueOf(usedMemory))._().\n               _(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))._().\n             td().br().$title(String.valueOf(availableMemory))._().\n               _(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))._().\n               td(String.valueOf(info.getUsedVirtualCores())).\n               td(String.valueOf(info.getAvailableVirtualCores())).\n             td(ni.getNodeManagerVersion()).\n             _();\n       }\n       tbody._()._();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      html._(MetricsOverviewTable.class);\n\n      ResourceScheduler sched \u003d rm.getResourceScheduler();\n      String type \u003d $(NODE_STATE);\n      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.table(\"#nodes\").\n          thead().\n          tr().\n          th(\".nodelabels\", \"Node Labels\").\n          th(\".rack\", \"Rack\").\n          th(\".state\", \"Node State\").\n          th(\".nodeaddress\", \"Node Address\").\n          th(\".nodehttpaddress\", \"Node HTTP Address\").\n          th(\".lastHealthUpdate\", \"Last health-update\").\n          th(\".healthReport\", \"Health-report\").\n          th(\".containers\", \"Containers\").\n          th(\".mem\", \"Mem Used\").\n          th(\".mem\", \"Mem Avail\").\n          th(\".vcores\", \"VCores Used\").\n          th(\".vcores\", \"VCores Avail\").\n          th(\".nodeManagerVersion\", \"Version\").\n          _()._().\n          tbody();\n      NodeState stateFilter \u003d null;\n      if(type !\u003d null \u0026\u0026 !type.isEmpty()) {\n        stateFilter \u003d NodeState.valueOf(type.toUpperCase());\n      }\n      Collection\u003cRMNode\u003e rmNodes \u003d this.rmContext.getRMNodes().values();\n      boolean isInactive \u003d false;\n      if (stateFilter !\u003d null) {\n        switch (stateFilter) {\n        case DECOMMISSIONED:\n        case LOST:\n        case REBOOTED:\n          rmNodes \u003d this.rmContext.getInactiveRMNodes().values();\n          isInactive \u003d true;\n          break;\n        }\n      }\n      for (RMNode ni : rmNodes) {\n        if(stateFilter !\u003d null) {\n          NodeState state \u003d ni.getState();\n          if(!stateFilter.equals(state)) {\n            continue;\n          }\n        } else {\n          // No filter. User is asking for all nodes. Make sure you skip the\n          // unhealthy nodes.\n          if (ni.getState() \u003d\u003d NodeState.UNHEALTHY) {\n            continue;\n          }\n        }\n        NodeInfo info \u003d new NodeInfo(ni, sched);\n        int usedMemory \u003d (int)info.getUsedMemory();\n        int availableMemory \u003d (int)info.getAvailableMemory();\n        TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d tbody.tr().\n            td(StringUtils.join(\",\", info.getNodeLabels())).\n            td(info.getRack()).\n            td(info.getState()).\n            td(info.getNodeId());\n        if (isInactive) {\n          row.td()._(\"N/A\")._();\n        } else {\n          String httpAddress \u003d info.getNodeHTTPAddress();\n          row.td().a(\"//\" + httpAddress,\n              httpAddress)._();\n        }\n        row.td().br().$title(String.valueOf(info.getLastHealthUpdate()))._().\n              _(Times.format(info.getLastHealthUpdate()))._().\n            td(info.getHealthReport()).\n            td(String.valueOf(info.getNumContainers())).\n            td().br().$title(String.valueOf(usedMemory))._().\n              _(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))._().\n            td().br().$title(String.valueOf(availableMemory))._().\n              _(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))._().\n              td(String.valueOf(info.getUsedVirtualCores())).\n              td(String.valueOf(info.getAvailableVirtualCores())).\n            td(ni.getNodeManagerVersion()).\n            _();\n      }\n      tbody._()._();\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/NodesPage.java",
      "extendedDetails": {}
    },
    "1f9a0fd927ab7bef13db42dd80368fd781b3d2d1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2072. RM/NM UIs and webservices are missing vcore information. (Nathan Roberts via tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1605162 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/06/14 12:34 PM",
      "commitName": "1f9a0fd927ab7bef13db42dd80368fd781b3d2d1",
      "commitAuthor": "Thomas Graves",
      "commitDateOld": "14/02/14 12:01 PM",
      "commitNameOld": "990cffdcfa9349fff0cee144b1d0e5267c40f63d",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 129.98,
      "commitsBetweenForRepo": 896,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,76 +1,80 @@\n     protected void render(Block html) {\n       html._(MetricsOverviewTable.class);\n \n       ResourceScheduler sched \u003d rm.getResourceScheduler();\n       String type \u003d $(NODE_STATE);\n       TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.table(\"#nodes\").\n           thead().\n           tr().\n           th(\".rack\", \"Rack\").\n           th(\".state\", \"Node State\").\n           th(\".nodeaddress\", \"Node Address\").\n           th(\".nodehttpaddress\", \"Node HTTP Address\").\n           th(\".lastHealthUpdate\", \"Last health-update\").\n           th(\".healthReport\", \"Health-report\").\n           th(\".containers\", \"Containers\").\n           th(\".mem\", \"Mem Used\").\n           th(\".mem\", \"Mem Avail\").\n+          th(\".vcores\", \"VCores Used\").\n+          th(\".vcores\", \"VCores Avail\").\n           th(\".nodeManagerVersion\", \"Version\").\n           _()._().\n           tbody();\n       NodeState stateFilter \u003d null;\n       if(type !\u003d null \u0026\u0026 !type.isEmpty()) {\n         stateFilter \u003d NodeState.valueOf(type.toUpperCase());\n       }\n       Collection\u003cRMNode\u003e rmNodes \u003d this.rmContext.getRMNodes().values();\n       boolean isInactive \u003d false;\n       if (stateFilter !\u003d null) {\n         switch (stateFilter) {\n         case DECOMMISSIONED:\n         case LOST:\n         case REBOOTED:\n           rmNodes \u003d this.rmContext.getInactiveRMNodes().values();\n           isInactive \u003d true;\n           break;\n         }\n       }\n       for (RMNode ni : rmNodes) {\n         if(stateFilter !\u003d null) {\n           NodeState state \u003d ni.getState();\n           if(!stateFilter.equals(state)) {\n             continue;\n           }\n         } else {\n           // No filter. User is asking for all nodes. Make sure you skip the\n           // unhealthy nodes.\n           if (ni.getState() \u003d\u003d NodeState.UNHEALTHY) {\n             continue;\n           }\n         }\n         NodeInfo info \u003d new NodeInfo(ni, sched);\n         int usedMemory \u003d (int)info.getUsedMemory();\n         int availableMemory \u003d (int)info.getAvailableMemory();\n         TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d tbody.tr().\n             td(info.getRack()).\n             td(info.getState()).\n             td(info.getNodeId());\n         if (isInactive) {\n           row.td()._(\"N/A\")._();\n         } else {\n           String httpAddress \u003d info.getNodeHTTPAddress();\n           row.td().a(\"//\" + httpAddress,\n               httpAddress)._();\n         }\n         row.td().br().$title(String.valueOf(info.getLastHealthUpdate()))._().\n               _(Times.format(info.getLastHealthUpdate()))._().\n             td(info.getHealthReport()).\n             td(String.valueOf(info.getNumContainers())).\n             td().br().$title(String.valueOf(usedMemory))._().\n               _(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))._().\n-            td().br().$title(String.valueOf(usedMemory))._().\n+            td().br().$title(String.valueOf(availableMemory))._().\n               _(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))._().\n+              td(String.valueOf(info.getUsedVirtualCores())).\n+              td(String.valueOf(info.getAvailableVirtualCores())).\n             td(ni.getNodeManagerVersion()).\n             _();\n       }\n       tbody._()._();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      html._(MetricsOverviewTable.class);\n\n      ResourceScheduler sched \u003d rm.getResourceScheduler();\n      String type \u003d $(NODE_STATE);\n      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.table(\"#nodes\").\n          thead().\n          tr().\n          th(\".rack\", \"Rack\").\n          th(\".state\", \"Node State\").\n          th(\".nodeaddress\", \"Node Address\").\n          th(\".nodehttpaddress\", \"Node HTTP Address\").\n          th(\".lastHealthUpdate\", \"Last health-update\").\n          th(\".healthReport\", \"Health-report\").\n          th(\".containers\", \"Containers\").\n          th(\".mem\", \"Mem Used\").\n          th(\".mem\", \"Mem Avail\").\n          th(\".vcores\", \"VCores Used\").\n          th(\".vcores\", \"VCores Avail\").\n          th(\".nodeManagerVersion\", \"Version\").\n          _()._().\n          tbody();\n      NodeState stateFilter \u003d null;\n      if(type !\u003d null \u0026\u0026 !type.isEmpty()) {\n        stateFilter \u003d NodeState.valueOf(type.toUpperCase());\n      }\n      Collection\u003cRMNode\u003e rmNodes \u003d this.rmContext.getRMNodes().values();\n      boolean isInactive \u003d false;\n      if (stateFilter !\u003d null) {\n        switch (stateFilter) {\n        case DECOMMISSIONED:\n        case LOST:\n        case REBOOTED:\n          rmNodes \u003d this.rmContext.getInactiveRMNodes().values();\n          isInactive \u003d true;\n          break;\n        }\n      }\n      for (RMNode ni : rmNodes) {\n        if(stateFilter !\u003d null) {\n          NodeState state \u003d ni.getState();\n          if(!stateFilter.equals(state)) {\n            continue;\n          }\n        } else {\n          // No filter. User is asking for all nodes. Make sure you skip the\n          // unhealthy nodes.\n          if (ni.getState() \u003d\u003d NodeState.UNHEALTHY) {\n            continue;\n          }\n        }\n        NodeInfo info \u003d new NodeInfo(ni, sched);\n        int usedMemory \u003d (int)info.getUsedMemory();\n        int availableMemory \u003d (int)info.getAvailableMemory();\n        TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d tbody.tr().\n            td(info.getRack()).\n            td(info.getState()).\n            td(info.getNodeId());\n        if (isInactive) {\n          row.td()._(\"N/A\")._();\n        } else {\n          String httpAddress \u003d info.getNodeHTTPAddress();\n          row.td().a(\"//\" + httpAddress,\n              httpAddress)._();\n        }\n        row.td().br().$title(String.valueOf(info.getLastHealthUpdate()))._().\n              _(Times.format(info.getLastHealthUpdate()))._().\n            td(info.getHealthReport()).\n            td(String.valueOf(info.getNumContainers())).\n            td().br().$title(String.valueOf(usedMemory))._().\n              _(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))._().\n            td().br().$title(String.valueOf(availableMemory))._().\n              _(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))._().\n              td(String.valueOf(info.getUsedVirtualCores())).\n              td(String.valueOf(info.getAvailableVirtualCores())).\n            td(ni.getNodeManagerVersion()).\n            _();\n      }\n      tbody._()._();\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/NodesPage.java",
      "extendedDetails": {}
    },
    "990cffdcfa9349fff0cee144b1d0e5267c40f63d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1553. Modified YARN and MR to stop using HttpConfig.isSecure() and\ninstead rely on the http policy framework. And also fix some bugs related\nto https handling in YARN web-apps. Contributed by Haohui Mai.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1568501 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/02/14 12:01 PM",
      "commitName": "990cffdcfa9349fff0cee144b1d0e5267c40f63d",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "03/10/13 2:04 PM",
      "commitNameOld": "7b687dda098c94b55c9848827cfc2d6326b6f9b6",
      "commitAuthorOld": "Jonathan Turner Eagles",
      "daysBetweenCommits": 133.96,
      "commitsBetweenForRepo": 820,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,76 +1,76 @@\n     protected void render(Block html) {\n       html._(MetricsOverviewTable.class);\n \n       ResourceScheduler sched \u003d rm.getResourceScheduler();\n       String type \u003d $(NODE_STATE);\n       TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.table(\"#nodes\").\n           thead().\n           tr().\n           th(\".rack\", \"Rack\").\n           th(\".state\", \"Node State\").\n           th(\".nodeaddress\", \"Node Address\").\n           th(\".nodehttpaddress\", \"Node HTTP Address\").\n           th(\".lastHealthUpdate\", \"Last health-update\").\n           th(\".healthReport\", \"Health-report\").\n           th(\".containers\", \"Containers\").\n           th(\".mem\", \"Mem Used\").\n           th(\".mem\", \"Mem Avail\").\n           th(\".nodeManagerVersion\", \"Version\").\n           _()._().\n           tbody();\n       NodeState stateFilter \u003d null;\n       if(type !\u003d null \u0026\u0026 !type.isEmpty()) {\n         stateFilter \u003d NodeState.valueOf(type.toUpperCase());\n       }\n       Collection\u003cRMNode\u003e rmNodes \u003d this.rmContext.getRMNodes().values();\n       boolean isInactive \u003d false;\n       if (stateFilter !\u003d null) {\n         switch (stateFilter) {\n         case DECOMMISSIONED:\n         case LOST:\n         case REBOOTED:\n           rmNodes \u003d this.rmContext.getInactiveRMNodes().values();\n           isInactive \u003d true;\n           break;\n         }\n       }\n       for (RMNode ni : rmNodes) {\n         if(stateFilter !\u003d null) {\n           NodeState state \u003d ni.getState();\n           if(!stateFilter.equals(state)) {\n             continue;\n           }\n         } else {\n           // No filter. User is asking for all nodes. Make sure you skip the\n           // unhealthy nodes.\n           if (ni.getState() \u003d\u003d NodeState.UNHEALTHY) {\n             continue;\n           }\n         }\n         NodeInfo info \u003d new NodeInfo(ni, sched);\n         int usedMemory \u003d (int)info.getUsedMemory();\n         int availableMemory \u003d (int)info.getAvailableMemory();\n         TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d tbody.tr().\n             td(info.getRack()).\n             td(info.getState()).\n             td(info.getNodeId());\n         if (isInactive) {\n           row.td()._(\"N/A\")._();\n         } else {\n           String httpAddress \u003d info.getNodeHTTPAddress();\n-          row.td().a(HttpConfig.getSchemePrefix() + httpAddress,\n+          row.td().a(\"//\" + httpAddress,\n               httpAddress)._();\n         }\n         row.td().br().$title(String.valueOf(info.getLastHealthUpdate()))._().\n               _(Times.format(info.getLastHealthUpdate()))._().\n             td(info.getHealthReport()).\n             td(String.valueOf(info.getNumContainers())).\n             td().br().$title(String.valueOf(usedMemory))._().\n               _(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))._().\n             td().br().$title(String.valueOf(usedMemory))._().\n               _(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))._().\n             td(ni.getNodeManagerVersion()).\n             _();\n       }\n       tbody._()._();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      html._(MetricsOverviewTable.class);\n\n      ResourceScheduler sched \u003d rm.getResourceScheduler();\n      String type \u003d $(NODE_STATE);\n      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.table(\"#nodes\").\n          thead().\n          tr().\n          th(\".rack\", \"Rack\").\n          th(\".state\", \"Node State\").\n          th(\".nodeaddress\", \"Node Address\").\n          th(\".nodehttpaddress\", \"Node HTTP Address\").\n          th(\".lastHealthUpdate\", \"Last health-update\").\n          th(\".healthReport\", \"Health-report\").\n          th(\".containers\", \"Containers\").\n          th(\".mem\", \"Mem Used\").\n          th(\".mem\", \"Mem Avail\").\n          th(\".nodeManagerVersion\", \"Version\").\n          _()._().\n          tbody();\n      NodeState stateFilter \u003d null;\n      if(type !\u003d null \u0026\u0026 !type.isEmpty()) {\n        stateFilter \u003d NodeState.valueOf(type.toUpperCase());\n      }\n      Collection\u003cRMNode\u003e rmNodes \u003d this.rmContext.getRMNodes().values();\n      boolean isInactive \u003d false;\n      if (stateFilter !\u003d null) {\n        switch (stateFilter) {\n        case DECOMMISSIONED:\n        case LOST:\n        case REBOOTED:\n          rmNodes \u003d this.rmContext.getInactiveRMNodes().values();\n          isInactive \u003d true;\n          break;\n        }\n      }\n      for (RMNode ni : rmNodes) {\n        if(stateFilter !\u003d null) {\n          NodeState state \u003d ni.getState();\n          if(!stateFilter.equals(state)) {\n            continue;\n          }\n        } else {\n          // No filter. User is asking for all nodes. Make sure you skip the\n          // unhealthy nodes.\n          if (ni.getState() \u003d\u003d NodeState.UNHEALTHY) {\n            continue;\n          }\n        }\n        NodeInfo info \u003d new NodeInfo(ni, sched);\n        int usedMemory \u003d (int)info.getUsedMemory();\n        int availableMemory \u003d (int)info.getAvailableMemory();\n        TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d tbody.tr().\n            td(info.getRack()).\n            td(info.getState()).\n            td(info.getNodeId());\n        if (isInactive) {\n          row.td()._(\"N/A\")._();\n        } else {\n          String httpAddress \u003d info.getNodeHTTPAddress();\n          row.td().a(\"//\" + httpAddress,\n              httpAddress)._();\n        }\n        row.td().br().$title(String.valueOf(info.getLastHealthUpdate()))._().\n              _(Times.format(info.getLastHealthUpdate()))._().\n            td(info.getHealthReport()).\n            td(String.valueOf(info.getNumContainers())).\n            td().br().$title(String.valueOf(usedMemory))._().\n              _(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))._().\n            td().br().$title(String.valueOf(usedMemory))._().\n              _(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))._().\n            td(ni.getNodeManagerVersion()).\n            _();\n      }\n      tbody._()._();\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/NodesPage.java",
      "extendedDetails": {}
    },
    "7b687dda098c94b55c9848827cfc2d6326b6f9b6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1199. Make NM/RM Versions Available (Mit Desai via jeagles)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1529003 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/10/13 2:04 PM",
      "commitName": "7b687dda098c94b55c9848827cfc2d6326b6f9b6",
      "commitAuthor": "Jonathan Turner Eagles",
      "commitDateOld": "19/08/13 3:04 PM",
      "commitNameOld": "8f343e684c4672212ad206c412603e2a5b0ee733",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 44.96,
      "commitsBetweenForRepo": 255,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,74 +1,76 @@\n     protected void render(Block html) {\n       html._(MetricsOverviewTable.class);\n \n       ResourceScheduler sched \u003d rm.getResourceScheduler();\n       String type \u003d $(NODE_STATE);\n       TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.table(\"#nodes\").\n           thead().\n           tr().\n           th(\".rack\", \"Rack\").\n           th(\".state\", \"Node State\").\n           th(\".nodeaddress\", \"Node Address\").\n           th(\".nodehttpaddress\", \"Node HTTP Address\").\n           th(\".lastHealthUpdate\", \"Last health-update\").\n           th(\".healthReport\", \"Health-report\").\n           th(\".containers\", \"Containers\").\n           th(\".mem\", \"Mem Used\").\n           th(\".mem\", \"Mem Avail\").\n+          th(\".nodeManagerVersion\", \"Version\").\n           _()._().\n           tbody();\n       NodeState stateFilter \u003d null;\n       if(type !\u003d null \u0026\u0026 !type.isEmpty()) {\n         stateFilter \u003d NodeState.valueOf(type.toUpperCase());\n       }\n       Collection\u003cRMNode\u003e rmNodes \u003d this.rmContext.getRMNodes().values();\n       boolean isInactive \u003d false;\n       if (stateFilter !\u003d null) {\n         switch (stateFilter) {\n         case DECOMMISSIONED:\n         case LOST:\n         case REBOOTED:\n           rmNodes \u003d this.rmContext.getInactiveRMNodes().values();\n           isInactive \u003d true;\n           break;\n         }\n       }\n       for (RMNode ni : rmNodes) {\n         if(stateFilter !\u003d null) {\n           NodeState state \u003d ni.getState();\n           if(!stateFilter.equals(state)) {\n             continue;\n           }\n         } else {\n           // No filter. User is asking for all nodes. Make sure you skip the\n           // unhealthy nodes.\n           if (ni.getState() \u003d\u003d NodeState.UNHEALTHY) {\n             continue;\n           }\n         }\n         NodeInfo info \u003d new NodeInfo(ni, sched);\n         int usedMemory \u003d (int)info.getUsedMemory();\n         int availableMemory \u003d (int)info.getAvailableMemory();\n         TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d tbody.tr().\n             td(info.getRack()).\n             td(info.getState()).\n             td(info.getNodeId());\n         if (isInactive) {\n           row.td()._(\"N/A\")._();\n         } else {\n           String httpAddress \u003d info.getNodeHTTPAddress();\n           row.td().a(HttpConfig.getSchemePrefix() + httpAddress,\n               httpAddress)._();\n         }\n         row.td().br().$title(String.valueOf(info.getLastHealthUpdate()))._().\n               _(Times.format(info.getLastHealthUpdate()))._().\n             td(info.getHealthReport()).\n             td(String.valueOf(info.getNumContainers())).\n             td().br().$title(String.valueOf(usedMemory))._().\n               _(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))._().\n             td().br().$title(String.valueOf(usedMemory))._().\n               _(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))._().\n+            td(ni.getNodeManagerVersion()).\n             _();\n       }\n       tbody._()._();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      html._(MetricsOverviewTable.class);\n\n      ResourceScheduler sched \u003d rm.getResourceScheduler();\n      String type \u003d $(NODE_STATE);\n      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.table(\"#nodes\").\n          thead().\n          tr().\n          th(\".rack\", \"Rack\").\n          th(\".state\", \"Node State\").\n          th(\".nodeaddress\", \"Node Address\").\n          th(\".nodehttpaddress\", \"Node HTTP Address\").\n          th(\".lastHealthUpdate\", \"Last health-update\").\n          th(\".healthReport\", \"Health-report\").\n          th(\".containers\", \"Containers\").\n          th(\".mem\", \"Mem Used\").\n          th(\".mem\", \"Mem Avail\").\n          th(\".nodeManagerVersion\", \"Version\").\n          _()._().\n          tbody();\n      NodeState stateFilter \u003d null;\n      if(type !\u003d null \u0026\u0026 !type.isEmpty()) {\n        stateFilter \u003d NodeState.valueOf(type.toUpperCase());\n      }\n      Collection\u003cRMNode\u003e rmNodes \u003d this.rmContext.getRMNodes().values();\n      boolean isInactive \u003d false;\n      if (stateFilter !\u003d null) {\n        switch (stateFilter) {\n        case DECOMMISSIONED:\n        case LOST:\n        case REBOOTED:\n          rmNodes \u003d this.rmContext.getInactiveRMNodes().values();\n          isInactive \u003d true;\n          break;\n        }\n      }\n      for (RMNode ni : rmNodes) {\n        if(stateFilter !\u003d null) {\n          NodeState state \u003d ni.getState();\n          if(!stateFilter.equals(state)) {\n            continue;\n          }\n        } else {\n          // No filter. User is asking for all nodes. Make sure you skip the\n          // unhealthy nodes.\n          if (ni.getState() \u003d\u003d NodeState.UNHEALTHY) {\n            continue;\n          }\n        }\n        NodeInfo info \u003d new NodeInfo(ni, sched);\n        int usedMemory \u003d (int)info.getUsedMemory();\n        int availableMemory \u003d (int)info.getAvailableMemory();\n        TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d tbody.tr().\n            td(info.getRack()).\n            td(info.getState()).\n            td(info.getNodeId());\n        if (isInactive) {\n          row.td()._(\"N/A\")._();\n        } else {\n          String httpAddress \u003d info.getNodeHTTPAddress();\n          row.td().a(HttpConfig.getSchemePrefix() + httpAddress,\n              httpAddress)._();\n        }\n        row.td().br().$title(String.valueOf(info.getLastHealthUpdate()))._().\n              _(Times.format(info.getLastHealthUpdate()))._().\n            td(info.getHealthReport()).\n            td(String.valueOf(info.getNumContainers())).\n            td().br().$title(String.valueOf(usedMemory))._().\n              _(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))._().\n            td().br().$title(String.valueOf(usedMemory))._().\n              _(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))._().\n            td(ni.getNodeManagerVersion()).\n            _();\n      }\n      tbody._()._();\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/NodesPage.java",
      "extendedDetails": {}
    },
    "af8514eef297574240652672d048748100c97733": {
      "type": "Ybodychange",
      "commitMessage": "YARN-686. Flatten NodeReport. (sandyr via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1490827 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/06/13 1:59 PM",
      "commitName": "af8514eef297574240652672d048748100c97733",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "09/08/12 3:52 PM",
      "commitNameOld": "4bca22005f48f426b9bc7cf36d435ead470a2590",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 301.92,
      "commitsBetweenForRepo": 1741,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,76 +1,74 @@\n     protected void render(Block html) {\n       html._(MetricsOverviewTable.class);\n \n       ResourceScheduler sched \u003d rm.getResourceScheduler();\n       String type \u003d $(NODE_STATE);\n       TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.table(\"#nodes\").\n           thead().\n           tr().\n           th(\".rack\", \"Rack\").\n           th(\".state\", \"Node State\").\n           th(\".nodeaddress\", \"Node Address\").\n           th(\".nodehttpaddress\", \"Node HTTP Address\").\n-          th(\".healthStatus\", \"Health-status\").\n           th(\".lastHealthUpdate\", \"Last health-update\").\n           th(\".healthReport\", \"Health-report\").\n           th(\".containers\", \"Containers\").\n           th(\".mem\", \"Mem Used\").\n           th(\".mem\", \"Mem Avail\").\n           _()._().\n           tbody();\n       NodeState stateFilter \u003d null;\n       if(type !\u003d null \u0026\u0026 !type.isEmpty()) {\n         stateFilter \u003d NodeState.valueOf(type.toUpperCase());\n       }\n       Collection\u003cRMNode\u003e rmNodes \u003d this.rmContext.getRMNodes().values();\n       boolean isInactive \u003d false;\n       if (stateFilter !\u003d null) {\n         switch (stateFilter) {\n         case DECOMMISSIONED:\n         case LOST:\n         case REBOOTED:\n           rmNodes \u003d this.rmContext.getInactiveRMNodes().values();\n           isInactive \u003d true;\n           break;\n         }\n       }\n       for (RMNode ni : rmNodes) {\n         if(stateFilter !\u003d null) {\n           NodeState state \u003d ni.getState();\n           if(!stateFilter.equals(state)) {\n             continue;\n           }\n         } else {\n           // No filter. User is asking for all nodes. Make sure you skip the\n           // unhealthy nodes.\n           if (ni.getState() \u003d\u003d NodeState.UNHEALTHY) {\n             continue;\n           }\n         }\n         NodeInfo info \u003d new NodeInfo(ni, sched);\n         int usedMemory \u003d (int)info.getUsedMemory();\n         int availableMemory \u003d (int)info.getAvailableMemory();\n         TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d tbody.tr().\n             td(info.getRack()).\n             td(info.getState()).\n             td(info.getNodeId());\n         if (isInactive) {\n           row.td()._(\"N/A\")._();\n         } else {\n           String httpAddress \u003d info.getNodeHTTPAddress();\n           row.td().a(HttpConfig.getSchemePrefix() + httpAddress,\n               httpAddress)._();\n         }\n-        row.td(info.getHealthStatus()).\n-            td().br().$title(String.valueOf(info.getLastHealthUpdate()))._().\n+        row.td().br().$title(String.valueOf(info.getLastHealthUpdate()))._().\n               _(Times.format(info.getLastHealthUpdate()))._().\n             td(info.getHealthReport()).\n             td(String.valueOf(info.getNumContainers())).\n             td().br().$title(String.valueOf(usedMemory))._().\n               _(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))._().\n             td().br().$title(String.valueOf(usedMemory))._().\n               _(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))._().\n             _();\n       }\n       tbody._()._();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      html._(MetricsOverviewTable.class);\n\n      ResourceScheduler sched \u003d rm.getResourceScheduler();\n      String type \u003d $(NODE_STATE);\n      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.table(\"#nodes\").\n          thead().\n          tr().\n          th(\".rack\", \"Rack\").\n          th(\".state\", \"Node State\").\n          th(\".nodeaddress\", \"Node Address\").\n          th(\".nodehttpaddress\", \"Node HTTP Address\").\n          th(\".lastHealthUpdate\", \"Last health-update\").\n          th(\".healthReport\", \"Health-report\").\n          th(\".containers\", \"Containers\").\n          th(\".mem\", \"Mem Used\").\n          th(\".mem\", \"Mem Avail\").\n          _()._().\n          tbody();\n      NodeState stateFilter \u003d null;\n      if(type !\u003d null \u0026\u0026 !type.isEmpty()) {\n        stateFilter \u003d NodeState.valueOf(type.toUpperCase());\n      }\n      Collection\u003cRMNode\u003e rmNodes \u003d this.rmContext.getRMNodes().values();\n      boolean isInactive \u003d false;\n      if (stateFilter !\u003d null) {\n        switch (stateFilter) {\n        case DECOMMISSIONED:\n        case LOST:\n        case REBOOTED:\n          rmNodes \u003d this.rmContext.getInactiveRMNodes().values();\n          isInactive \u003d true;\n          break;\n        }\n      }\n      for (RMNode ni : rmNodes) {\n        if(stateFilter !\u003d null) {\n          NodeState state \u003d ni.getState();\n          if(!stateFilter.equals(state)) {\n            continue;\n          }\n        } else {\n          // No filter. User is asking for all nodes. Make sure you skip the\n          // unhealthy nodes.\n          if (ni.getState() \u003d\u003d NodeState.UNHEALTHY) {\n            continue;\n          }\n        }\n        NodeInfo info \u003d new NodeInfo(ni, sched);\n        int usedMemory \u003d (int)info.getUsedMemory();\n        int availableMemory \u003d (int)info.getAvailableMemory();\n        TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d tbody.tr().\n            td(info.getRack()).\n            td(info.getState()).\n            td(info.getNodeId());\n        if (isInactive) {\n          row.td()._(\"N/A\")._();\n        } else {\n          String httpAddress \u003d info.getNodeHTTPAddress();\n          row.td().a(HttpConfig.getSchemePrefix() + httpAddress,\n              httpAddress)._();\n        }\n        row.td().br().$title(String.valueOf(info.getLastHealthUpdate()))._().\n              _(Times.format(info.getLastHealthUpdate()))._().\n            td(info.getHealthReport()).\n            td(String.valueOf(info.getNumContainers())).\n            td().br().$title(String.valueOf(usedMemory))._().\n              _(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))._().\n            td().br().$title(String.valueOf(usedMemory))._().\n              _(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))._().\n            _();\n      }\n      tbody._()._();\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/NodesPage.java",
      "extendedDetails": {}
    },
    "4bca22005f48f426b9bc7cf36d435ead470a2590": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8681. add support for HTTPS to the web UIs. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1371525 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/08/12 3:52 PM",
      "commitName": "4bca22005f48f426b9bc7cf36d435ead470a2590",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "07/08/12 10:22 PM",
      "commitNameOld": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 1.73,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,75 +1,76 @@\n     protected void render(Block html) {\n       html._(MetricsOverviewTable.class);\n \n       ResourceScheduler sched \u003d rm.getResourceScheduler();\n       String type \u003d $(NODE_STATE);\n       TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.table(\"#nodes\").\n           thead().\n           tr().\n           th(\".rack\", \"Rack\").\n           th(\".state\", \"Node State\").\n           th(\".nodeaddress\", \"Node Address\").\n           th(\".nodehttpaddress\", \"Node HTTP Address\").\n           th(\".healthStatus\", \"Health-status\").\n           th(\".lastHealthUpdate\", \"Last health-update\").\n           th(\".healthReport\", \"Health-report\").\n           th(\".containers\", \"Containers\").\n           th(\".mem\", \"Mem Used\").\n           th(\".mem\", \"Mem Avail\").\n           _()._().\n           tbody();\n       NodeState stateFilter \u003d null;\n       if(type !\u003d null \u0026\u0026 !type.isEmpty()) {\n         stateFilter \u003d NodeState.valueOf(type.toUpperCase());\n       }\n       Collection\u003cRMNode\u003e rmNodes \u003d this.rmContext.getRMNodes().values();\n       boolean isInactive \u003d false;\n       if (stateFilter !\u003d null) {\n         switch (stateFilter) {\n         case DECOMMISSIONED:\n         case LOST:\n         case REBOOTED:\n           rmNodes \u003d this.rmContext.getInactiveRMNodes().values();\n           isInactive \u003d true;\n           break;\n         }\n       }\n       for (RMNode ni : rmNodes) {\n         if(stateFilter !\u003d null) {\n           NodeState state \u003d ni.getState();\n           if(!stateFilter.equals(state)) {\n             continue;\n           }\n         } else {\n           // No filter. User is asking for all nodes. Make sure you skip the\n           // unhealthy nodes.\n           if (ni.getState() \u003d\u003d NodeState.UNHEALTHY) {\n             continue;\n           }\n         }\n         NodeInfo info \u003d new NodeInfo(ni, sched);\n         int usedMemory \u003d (int)info.getUsedMemory();\n         int availableMemory \u003d (int)info.getAvailableMemory();\n         TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d tbody.tr().\n             td(info.getRack()).\n             td(info.getState()).\n             td(info.getNodeId());\n         if (isInactive) {\n           row.td()._(\"N/A\")._();\n         } else {\n           String httpAddress \u003d info.getNodeHTTPAddress();\n-          row.td().a(\"http://\" + httpAddress, httpAddress)._();\n+          row.td().a(HttpConfig.getSchemePrefix() + httpAddress,\n+              httpAddress)._();\n         }\n         row.td(info.getHealthStatus()).\n             td().br().$title(String.valueOf(info.getLastHealthUpdate()))._().\n               _(Times.format(info.getLastHealthUpdate()))._().\n             td(info.getHealthReport()).\n             td(String.valueOf(info.getNumContainers())).\n             td().br().$title(String.valueOf(usedMemory))._().\n               _(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))._().\n             td().br().$title(String.valueOf(usedMemory))._().\n               _(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))._().\n             _();\n       }\n       tbody._()._();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      html._(MetricsOverviewTable.class);\n\n      ResourceScheduler sched \u003d rm.getResourceScheduler();\n      String type \u003d $(NODE_STATE);\n      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.table(\"#nodes\").\n          thead().\n          tr().\n          th(\".rack\", \"Rack\").\n          th(\".state\", \"Node State\").\n          th(\".nodeaddress\", \"Node Address\").\n          th(\".nodehttpaddress\", \"Node HTTP Address\").\n          th(\".healthStatus\", \"Health-status\").\n          th(\".lastHealthUpdate\", \"Last health-update\").\n          th(\".healthReport\", \"Health-report\").\n          th(\".containers\", \"Containers\").\n          th(\".mem\", \"Mem Used\").\n          th(\".mem\", \"Mem Avail\").\n          _()._().\n          tbody();\n      NodeState stateFilter \u003d null;\n      if(type !\u003d null \u0026\u0026 !type.isEmpty()) {\n        stateFilter \u003d NodeState.valueOf(type.toUpperCase());\n      }\n      Collection\u003cRMNode\u003e rmNodes \u003d this.rmContext.getRMNodes().values();\n      boolean isInactive \u003d false;\n      if (stateFilter !\u003d null) {\n        switch (stateFilter) {\n        case DECOMMISSIONED:\n        case LOST:\n        case REBOOTED:\n          rmNodes \u003d this.rmContext.getInactiveRMNodes().values();\n          isInactive \u003d true;\n          break;\n        }\n      }\n      for (RMNode ni : rmNodes) {\n        if(stateFilter !\u003d null) {\n          NodeState state \u003d ni.getState();\n          if(!stateFilter.equals(state)) {\n            continue;\n          }\n        } else {\n          // No filter. User is asking for all nodes. Make sure you skip the\n          // unhealthy nodes.\n          if (ni.getState() \u003d\u003d NodeState.UNHEALTHY) {\n            continue;\n          }\n        }\n        NodeInfo info \u003d new NodeInfo(ni, sched);\n        int usedMemory \u003d (int)info.getUsedMemory();\n        int availableMemory \u003d (int)info.getAvailableMemory();\n        TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d tbody.tr().\n            td(info.getRack()).\n            td(info.getState()).\n            td(info.getNodeId());\n        if (isInactive) {\n          row.td()._(\"N/A\")._();\n        } else {\n          String httpAddress \u003d info.getNodeHTTPAddress();\n          row.td().a(HttpConfig.getSchemePrefix() + httpAddress,\n              httpAddress)._();\n        }\n        row.td(info.getHealthStatus()).\n            td().br().$title(String.valueOf(info.getLastHealthUpdate()))._().\n              _(Times.format(info.getLastHealthUpdate()))._().\n            td(info.getHealthReport()).\n            td(String.valueOf(info.getNumContainers())).\n            td().br().$title(String.valueOf(usedMemory))._().\n              _(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))._().\n            td().br().$title(String.valueOf(usedMemory))._().\n              _(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))._().\n            _();\n      }\n      tbody._()._();\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/NodesPage.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    protected void render(Block html) {\n      html._(MetricsOverviewTable.class);\n\n      ResourceScheduler sched \u003d rm.getResourceScheduler();\n      String type \u003d $(NODE_STATE);\n      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.table(\"#nodes\").\n          thead().\n          tr().\n          th(\".rack\", \"Rack\").\n          th(\".state\", \"Node State\").\n          th(\".nodeaddress\", \"Node Address\").\n          th(\".nodehttpaddress\", \"Node HTTP Address\").\n          th(\".healthStatus\", \"Health-status\").\n          th(\".lastHealthUpdate\", \"Last health-update\").\n          th(\".healthReport\", \"Health-report\").\n          th(\".containers\", \"Containers\").\n          th(\".mem\", \"Mem Used\").\n          th(\".mem\", \"Mem Avail\").\n          _()._().\n          tbody();\n      NodeState stateFilter \u003d null;\n      if(type !\u003d null \u0026\u0026 !type.isEmpty()) {\n        stateFilter \u003d NodeState.valueOf(type.toUpperCase());\n      }\n      Collection\u003cRMNode\u003e rmNodes \u003d this.rmContext.getRMNodes().values();\n      boolean isInactive \u003d false;\n      if (stateFilter !\u003d null) {\n        switch (stateFilter) {\n        case DECOMMISSIONED:\n        case LOST:\n        case REBOOTED:\n          rmNodes \u003d this.rmContext.getInactiveRMNodes().values();\n          isInactive \u003d true;\n          break;\n        }\n      }\n      for (RMNode ni : rmNodes) {\n        if(stateFilter !\u003d null) {\n          NodeState state \u003d ni.getState();\n          if(!stateFilter.equals(state)) {\n            continue;\n          }\n        } else {\n          // No filter. User is asking for all nodes. Make sure you skip the\n          // unhealthy nodes.\n          if (ni.getState() \u003d\u003d NodeState.UNHEALTHY) {\n            continue;\n          }\n        }\n        NodeInfo info \u003d new NodeInfo(ni, sched);\n        int usedMemory \u003d (int)info.getUsedMemory();\n        int availableMemory \u003d (int)info.getAvailableMemory();\n        TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d tbody.tr().\n            td(info.getRack()).\n            td(info.getState()).\n            td(info.getNodeId());\n        if (isInactive) {\n          row.td()._(\"N/A\")._();\n        } else {\n          String httpAddress \u003d info.getNodeHTTPAddress();\n          row.td().a(\"http://\" + httpAddress, httpAddress)._();\n        }\n        row.td(info.getHealthStatus()).\n            td().br().$title(String.valueOf(info.getLastHealthUpdate()))._().\n              _(Times.format(info.getLastHealthUpdate()))._().\n            td(info.getHealthReport()).\n            td(String.valueOf(info.getNumContainers())).\n            td().br().$title(String.valueOf(usedMemory))._().\n              _(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))._().\n            td().br().$title(String.valueOf(usedMemory))._().\n              _(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))._().\n            _();\n      }\n      tbody._()._();\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/NodesPage.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/NodesPage.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/NodesPage.java"
      }
    },
    "407cfa3b56a0645d64d2d9af305f6ef24307e775": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3958. RM: Remove RMNodeState and replace it with NodeState (Bikas Saha via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1334043 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/05/12 8:47 AM",
      "commitName": "407cfa3b56a0645d64d2d9af305f6ef24307e775",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "30/04/12 8:07 AM",
      "commitNameOld": "47df4697ba22becdab530c0695b9a2a100798f94",
      "commitAuthorOld": "Thomas Graves",
      "daysBetweenCommits": 4.03,
      "commitsBetweenForRepo": 41,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,75 +1,75 @@\n     protected void render(Block html) {\n       html._(MetricsOverviewTable.class);\n \n       ResourceScheduler sched \u003d rm.getResourceScheduler();\n       String type \u003d $(NODE_STATE);\n       TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.table(\"#nodes\").\n           thead().\n           tr().\n           th(\".rack\", \"Rack\").\n           th(\".state\", \"Node State\").\n           th(\".nodeaddress\", \"Node Address\").\n           th(\".nodehttpaddress\", \"Node HTTP Address\").\n           th(\".healthStatus\", \"Health-status\").\n           th(\".lastHealthUpdate\", \"Last health-update\").\n           th(\".healthReport\", \"Health-report\").\n           th(\".containers\", \"Containers\").\n           th(\".mem\", \"Mem Used\").\n           th(\".mem\", \"Mem Avail\").\n           _()._().\n           tbody();\n-      RMNodeState stateFilter \u003d null;\n+      NodeState stateFilter \u003d null;\n       if(type !\u003d null \u0026\u0026 !type.isEmpty()) {\n-        stateFilter \u003d RMNodeState.valueOf(type.toUpperCase());\n+        stateFilter \u003d NodeState.valueOf(type.toUpperCase());\n       }\n       Collection\u003cRMNode\u003e rmNodes \u003d this.rmContext.getRMNodes().values();\n       boolean isInactive \u003d false;\n       if (stateFilter !\u003d null) {\n         switch (stateFilter) {\n         case DECOMMISSIONED:\n         case LOST:\n         case REBOOTED:\n           rmNodes \u003d this.rmContext.getInactiveRMNodes().values();\n           isInactive \u003d true;\n           break;\n         }\n       }\n       for (RMNode ni : rmNodes) {\n         if(stateFilter !\u003d null) {\n-          RMNodeState state \u003d ni.getState();\n+          NodeState state \u003d ni.getState();\n           if(!stateFilter.equals(state)) {\n             continue;\n           }\n         } else {\n           // No filter. User is asking for all nodes. Make sure you skip the\n           // unhealthy nodes.\n-          if (ni.getState() \u003d\u003d RMNodeState.UNHEALTHY) {\n+          if (ni.getState() \u003d\u003d NodeState.UNHEALTHY) {\n             continue;\n           }\n         }\n         NodeInfo info \u003d new NodeInfo(ni, sched);\n         int usedMemory \u003d (int)info.getUsedMemory();\n         int availableMemory \u003d (int)info.getAvailableMemory();\n         TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d tbody.tr().\n             td(info.getRack()).\n             td(info.getState()).\n             td(info.getNodeId());\n         if (isInactive) {\n           row.td()._(\"N/A\")._();\n         } else {\n           String httpAddress \u003d info.getNodeHTTPAddress();\n           row.td().a(\"http://\" + httpAddress, httpAddress)._();\n         }\n         row.td(info.getHealthStatus()).\n             td().br().$title(String.valueOf(info.getLastHealthUpdate()))._().\n               _(Times.format(info.getLastHealthUpdate()))._().\n             td(info.getHealthReport()).\n             td(String.valueOf(info.getNumContainers())).\n             td().br().$title(String.valueOf(usedMemory))._().\n               _(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))._().\n             td().br().$title(String.valueOf(usedMemory))._().\n               _(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))._().\n             _();\n       }\n       tbody._()._();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      html._(MetricsOverviewTable.class);\n\n      ResourceScheduler sched \u003d rm.getResourceScheduler();\n      String type \u003d $(NODE_STATE);\n      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.table(\"#nodes\").\n          thead().\n          tr().\n          th(\".rack\", \"Rack\").\n          th(\".state\", \"Node State\").\n          th(\".nodeaddress\", \"Node Address\").\n          th(\".nodehttpaddress\", \"Node HTTP Address\").\n          th(\".healthStatus\", \"Health-status\").\n          th(\".lastHealthUpdate\", \"Last health-update\").\n          th(\".healthReport\", \"Health-report\").\n          th(\".containers\", \"Containers\").\n          th(\".mem\", \"Mem Used\").\n          th(\".mem\", \"Mem Avail\").\n          _()._().\n          tbody();\n      NodeState stateFilter \u003d null;\n      if(type !\u003d null \u0026\u0026 !type.isEmpty()) {\n        stateFilter \u003d NodeState.valueOf(type.toUpperCase());\n      }\n      Collection\u003cRMNode\u003e rmNodes \u003d this.rmContext.getRMNodes().values();\n      boolean isInactive \u003d false;\n      if (stateFilter !\u003d null) {\n        switch (stateFilter) {\n        case DECOMMISSIONED:\n        case LOST:\n        case REBOOTED:\n          rmNodes \u003d this.rmContext.getInactiveRMNodes().values();\n          isInactive \u003d true;\n          break;\n        }\n      }\n      for (RMNode ni : rmNodes) {\n        if(stateFilter !\u003d null) {\n          NodeState state \u003d ni.getState();\n          if(!stateFilter.equals(state)) {\n            continue;\n          }\n        } else {\n          // No filter. User is asking for all nodes. Make sure you skip the\n          // unhealthy nodes.\n          if (ni.getState() \u003d\u003d NodeState.UNHEALTHY) {\n            continue;\n          }\n        }\n        NodeInfo info \u003d new NodeInfo(ni, sched);\n        int usedMemory \u003d (int)info.getUsedMemory();\n        int availableMemory \u003d (int)info.getAvailableMemory();\n        TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d tbody.tr().\n            td(info.getRack()).\n            td(info.getState()).\n            td(info.getNodeId());\n        if (isInactive) {\n          row.td()._(\"N/A\")._();\n        } else {\n          String httpAddress \u003d info.getNodeHTTPAddress();\n          row.td().a(\"http://\" + httpAddress, httpAddress)._();\n        }\n        row.td(info.getHealthStatus()).\n            td().br().$title(String.valueOf(info.getLastHealthUpdate()))._().\n              _(Times.format(info.getLastHealthUpdate()))._().\n            td(info.getHealthReport()).\n            td(String.valueOf(info.getNumContainers())).\n            td().br().$title(String.valueOf(usedMemory))._().\n              _(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))._().\n            td().br().$title(String.valueOf(usedMemory))._().\n              _(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))._().\n            _();\n      }\n      tbody._()._();\n    }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/NodesPage.java",
      "extendedDetails": {}
    },
    "47df4697ba22becdab530c0695b9a2a100798f94": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4206. Sorting by Last Health-Update on the RM nodes page sorts does not work correctly (Jonathon Eagles via tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1332232 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/04/12 8:07 AM",
      "commitName": "47df4697ba22becdab530c0695b9a2a100798f94",
      "commitAuthor": "Thomas Graves",
      "commitDateOld": "03/02/12 5:03 PM",
      "commitNameOld": "3343494d6c39883485d29c7439831ab3c1c7248d",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 86.59,
      "commitsBetweenForRepo": 652,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,74 +1,75 @@\n     protected void render(Block html) {\n       html._(MetricsOverviewTable.class);\n \n       ResourceScheduler sched \u003d rm.getResourceScheduler();\n       String type \u003d $(NODE_STATE);\n       TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.table(\"#nodes\").\n           thead().\n           tr().\n           th(\".rack\", \"Rack\").\n           th(\".state\", \"Node State\").\n           th(\".nodeaddress\", \"Node Address\").\n           th(\".nodehttpaddress\", \"Node HTTP Address\").\n           th(\".healthStatus\", \"Health-status\").\n           th(\".lastHealthUpdate\", \"Last health-update\").\n           th(\".healthReport\", \"Health-report\").\n           th(\".containers\", \"Containers\").\n           th(\".mem\", \"Mem Used\").\n           th(\".mem\", \"Mem Avail\").\n           _()._().\n           tbody();\n       RMNodeState stateFilter \u003d null;\n       if(type !\u003d null \u0026\u0026 !type.isEmpty()) {\n         stateFilter \u003d RMNodeState.valueOf(type.toUpperCase());\n       }\n       Collection\u003cRMNode\u003e rmNodes \u003d this.rmContext.getRMNodes().values();\n       boolean isInactive \u003d false;\n       if (stateFilter !\u003d null) {\n         switch (stateFilter) {\n         case DECOMMISSIONED:\n         case LOST:\n         case REBOOTED:\n           rmNodes \u003d this.rmContext.getInactiveRMNodes().values();\n           isInactive \u003d true;\n           break;\n         }\n       }\n       for (RMNode ni : rmNodes) {\n         if(stateFilter !\u003d null) {\n           RMNodeState state \u003d ni.getState();\n           if(!stateFilter.equals(state)) {\n             continue;\n           }\n         } else {\n           // No filter. User is asking for all nodes. Make sure you skip the\n           // unhealthy nodes.\n           if (ni.getState() \u003d\u003d RMNodeState.UNHEALTHY) {\n             continue;\n           }\n         }\n         NodeInfo info \u003d new NodeInfo(ni, sched);\n         int usedMemory \u003d (int)info.getUsedMemory();\n         int availableMemory \u003d (int)info.getAvailableMemory();\n         TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d tbody.tr().\n             td(info.getRack()).\n             td(info.getState()).\n             td(info.getNodeId());\n         if (isInactive) {\n           row.td()._(\"N/A\")._();\n         } else {\n           String httpAddress \u003d info.getNodeHTTPAddress();\n           row.td().a(\"http://\" + httpAddress, httpAddress)._();\n         }\n         row.td(info.getHealthStatus()).\n-            td(Times.format(info.getLastHealthUpdate())).\n+            td().br().$title(String.valueOf(info.getLastHealthUpdate()))._().\n+              _(Times.format(info.getLastHealthUpdate()))._().\n             td(info.getHealthReport()).\n             td(String.valueOf(info.getNumContainers())).\n             td().br().$title(String.valueOf(usedMemory))._().\n               _(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))._().\n             td().br().$title(String.valueOf(usedMemory))._().\n               _(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))._().\n             _();\n       }\n       tbody._()._();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      html._(MetricsOverviewTable.class);\n\n      ResourceScheduler sched \u003d rm.getResourceScheduler();\n      String type \u003d $(NODE_STATE);\n      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.table(\"#nodes\").\n          thead().\n          tr().\n          th(\".rack\", \"Rack\").\n          th(\".state\", \"Node State\").\n          th(\".nodeaddress\", \"Node Address\").\n          th(\".nodehttpaddress\", \"Node HTTP Address\").\n          th(\".healthStatus\", \"Health-status\").\n          th(\".lastHealthUpdate\", \"Last health-update\").\n          th(\".healthReport\", \"Health-report\").\n          th(\".containers\", \"Containers\").\n          th(\".mem\", \"Mem Used\").\n          th(\".mem\", \"Mem Avail\").\n          _()._().\n          tbody();\n      RMNodeState stateFilter \u003d null;\n      if(type !\u003d null \u0026\u0026 !type.isEmpty()) {\n        stateFilter \u003d RMNodeState.valueOf(type.toUpperCase());\n      }\n      Collection\u003cRMNode\u003e rmNodes \u003d this.rmContext.getRMNodes().values();\n      boolean isInactive \u003d false;\n      if (stateFilter !\u003d null) {\n        switch (stateFilter) {\n        case DECOMMISSIONED:\n        case LOST:\n        case REBOOTED:\n          rmNodes \u003d this.rmContext.getInactiveRMNodes().values();\n          isInactive \u003d true;\n          break;\n        }\n      }\n      for (RMNode ni : rmNodes) {\n        if(stateFilter !\u003d null) {\n          RMNodeState state \u003d ni.getState();\n          if(!stateFilter.equals(state)) {\n            continue;\n          }\n        } else {\n          // No filter. User is asking for all nodes. Make sure you skip the\n          // unhealthy nodes.\n          if (ni.getState() \u003d\u003d RMNodeState.UNHEALTHY) {\n            continue;\n          }\n        }\n        NodeInfo info \u003d new NodeInfo(ni, sched);\n        int usedMemory \u003d (int)info.getUsedMemory();\n        int availableMemory \u003d (int)info.getAvailableMemory();\n        TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d tbody.tr().\n            td(info.getRack()).\n            td(info.getState()).\n            td(info.getNodeId());\n        if (isInactive) {\n          row.td()._(\"N/A\")._();\n        } else {\n          String httpAddress \u003d info.getNodeHTTPAddress();\n          row.td().a(\"http://\" + httpAddress, httpAddress)._();\n        }\n        row.td(info.getHealthStatus()).\n            td().br().$title(String.valueOf(info.getLastHealthUpdate()))._().\n              _(Times.format(info.getLastHealthUpdate()))._().\n            td(info.getHealthReport()).\n            td(String.valueOf(info.getNumContainers())).\n            td().br().$title(String.valueOf(usedMemory))._().\n              _(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))._().\n            td().br().$title(String.valueOf(usedMemory))._().\n              _(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))._().\n            _();\n      }\n      tbody._()._();\n    }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/NodesPage.java",
      "extendedDetails": {}
    },
    "3343494d6c39883485d29c7439831ab3c1c7248d": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3760. Changed active nodes list to not contain unhealthy nodes on the webUI and metrics. (vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1240421 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/02/12 5:03 PM",
      "commitName": "3343494d6c39883485d29c7439831ab3c1c7248d",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "26/01/12 2:56 PM",
      "commitNameOld": "3cdc100369ce920701fdddae12d7f7247332b3f3",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 8.09,
      "commitsBetweenForRepo": 63,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,74 @@\n     protected void render(Block html) {\n       html._(MetricsOverviewTable.class);\n \n       ResourceScheduler sched \u003d rm.getResourceScheduler();\n       String type \u003d $(NODE_STATE);\n       TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.table(\"#nodes\").\n           thead().\n           tr().\n           th(\".rack\", \"Rack\").\n           th(\".state\", \"Node State\").\n           th(\".nodeaddress\", \"Node Address\").\n           th(\".nodehttpaddress\", \"Node HTTP Address\").\n           th(\".healthStatus\", \"Health-status\").\n           th(\".lastHealthUpdate\", \"Last health-update\").\n           th(\".healthReport\", \"Health-report\").\n           th(\".containers\", \"Containers\").\n           th(\".mem\", \"Mem Used\").\n           th(\".mem\", \"Mem Avail\").\n           _()._().\n           tbody();\n       RMNodeState stateFilter \u003d null;\n       if(type !\u003d null \u0026\u0026 !type.isEmpty()) {\n         stateFilter \u003d RMNodeState.valueOf(type.toUpperCase());\n       }\n       Collection\u003cRMNode\u003e rmNodes \u003d this.rmContext.getRMNodes().values();\n       boolean isInactive \u003d false;\n       if (stateFilter !\u003d null) {\n         switch (stateFilter) {\n         case DECOMMISSIONED:\n         case LOST:\n         case REBOOTED:\n           rmNodes \u003d this.rmContext.getInactiveRMNodes().values();\n           isInactive \u003d true;\n           break;\n         }\n       }\n       for (RMNode ni : rmNodes) {\n         if(stateFilter !\u003d null) {\n           RMNodeState state \u003d ni.getState();\n           if(!stateFilter.equals(state)) {\n             continue;\n           }\n+        } else {\n+          // No filter. User is asking for all nodes. Make sure you skip the\n+          // unhealthy nodes.\n+          if (ni.getState() \u003d\u003d RMNodeState.UNHEALTHY) {\n+            continue;\n+          }\n         }\n         NodeInfo info \u003d new NodeInfo(ni, sched);\n         int usedMemory \u003d (int)info.getUsedMemory();\n         int availableMemory \u003d (int)info.getAvailableMemory();\n         TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d tbody.tr().\n             td(info.getRack()).\n             td(info.getState()).\n             td(info.getNodeId());\n         if (isInactive) {\n           row.td()._(\"N/A\")._();\n         } else {\n           String httpAddress \u003d info.getNodeHTTPAddress();\n           row.td().a(\"http://\" + httpAddress, httpAddress)._();\n         }\n         row.td(info.getHealthStatus()).\n             td(Times.format(info.getLastHealthUpdate())).\n             td(info.getHealthReport()).\n             td(String.valueOf(info.getNumContainers())).\n             td().br().$title(String.valueOf(usedMemory))._().\n               _(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))._().\n             td().br().$title(String.valueOf(usedMemory))._().\n               _(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))._().\n             _();\n       }\n       tbody._()._();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      html._(MetricsOverviewTable.class);\n\n      ResourceScheduler sched \u003d rm.getResourceScheduler();\n      String type \u003d $(NODE_STATE);\n      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.table(\"#nodes\").\n          thead().\n          tr().\n          th(\".rack\", \"Rack\").\n          th(\".state\", \"Node State\").\n          th(\".nodeaddress\", \"Node Address\").\n          th(\".nodehttpaddress\", \"Node HTTP Address\").\n          th(\".healthStatus\", \"Health-status\").\n          th(\".lastHealthUpdate\", \"Last health-update\").\n          th(\".healthReport\", \"Health-report\").\n          th(\".containers\", \"Containers\").\n          th(\".mem\", \"Mem Used\").\n          th(\".mem\", \"Mem Avail\").\n          _()._().\n          tbody();\n      RMNodeState stateFilter \u003d null;\n      if(type !\u003d null \u0026\u0026 !type.isEmpty()) {\n        stateFilter \u003d RMNodeState.valueOf(type.toUpperCase());\n      }\n      Collection\u003cRMNode\u003e rmNodes \u003d this.rmContext.getRMNodes().values();\n      boolean isInactive \u003d false;\n      if (stateFilter !\u003d null) {\n        switch (stateFilter) {\n        case DECOMMISSIONED:\n        case LOST:\n        case REBOOTED:\n          rmNodes \u003d this.rmContext.getInactiveRMNodes().values();\n          isInactive \u003d true;\n          break;\n        }\n      }\n      for (RMNode ni : rmNodes) {\n        if(stateFilter !\u003d null) {\n          RMNodeState state \u003d ni.getState();\n          if(!stateFilter.equals(state)) {\n            continue;\n          }\n        } else {\n          // No filter. User is asking for all nodes. Make sure you skip the\n          // unhealthy nodes.\n          if (ni.getState() \u003d\u003d RMNodeState.UNHEALTHY) {\n            continue;\n          }\n        }\n        NodeInfo info \u003d new NodeInfo(ni, sched);\n        int usedMemory \u003d (int)info.getUsedMemory();\n        int availableMemory \u003d (int)info.getAvailableMemory();\n        TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d tbody.tr().\n            td(info.getRack()).\n            td(info.getState()).\n            td(info.getNodeId());\n        if (isInactive) {\n          row.td()._(\"N/A\")._();\n        } else {\n          String httpAddress \u003d info.getNodeHTTPAddress();\n          row.td().a(\"http://\" + httpAddress, httpAddress)._();\n        }\n        row.td(info.getHealthStatus()).\n            td(Times.format(info.getLastHealthUpdate())).\n            td(info.getHealthReport()).\n            td(String.valueOf(info.getNumContainers())).\n            td().br().$title(String.valueOf(usedMemory))._().\n              _(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))._().\n            td().br().$title(String.valueOf(usedMemory))._().\n              _(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))._().\n            _();\n      }\n      tbody._()._();\n    }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/NodesPage.java",
      "extendedDetails": {}
    },
    "3cdc100369ce920701fdddae12d7f7247332b3f3": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3360. Added information about lost/rebooted/decommissioned nodes on the webapps. Contributed by Bhallamudi Venkata Siva Kamesh and Jason Lowe.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1236433 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/01/12 2:56 PM",
      "commitName": "3cdc100369ce920701fdddae12d7f7247332b3f3",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "13/12/11 3:05 PM",
      "commitNameOld": "0ea8570be578be60e2f32849900a1c50506d78d3",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 43.99,
      "commitsBetweenForRepo": 201,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,68 @@\n     protected void render(Block html) {\n       html._(MetricsOverviewTable.class);\n \n       ResourceScheduler sched \u003d rm.getResourceScheduler();\n       String type \u003d $(NODE_STATE);\n       TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.table(\"#nodes\").\n           thead().\n           tr().\n           th(\".rack\", \"Rack\").\n           th(\".state\", \"Node State\").\n           th(\".nodeaddress\", \"Node Address\").\n           th(\".nodehttpaddress\", \"Node HTTP Address\").\n           th(\".healthStatus\", \"Health-status\").\n           th(\".lastHealthUpdate\", \"Last health-update\").\n           th(\".healthReport\", \"Health-report\").\n           th(\".containers\", \"Containers\").\n           th(\".mem\", \"Mem Used\").\n           th(\".mem\", \"Mem Avail\").\n           _()._().\n           tbody();\n       RMNodeState stateFilter \u003d null;\n       if(type !\u003d null \u0026\u0026 !type.isEmpty()) {\n         stateFilter \u003d RMNodeState.valueOf(type.toUpperCase());\n       }\n-      for (RMNode ni : this.rmContext.getRMNodes().values()) {\n+      Collection\u003cRMNode\u003e rmNodes \u003d this.rmContext.getRMNodes().values();\n+      boolean isInactive \u003d false;\n+      if (stateFilter !\u003d null) {\n+        switch (stateFilter) {\n+        case DECOMMISSIONED:\n+        case LOST:\n+        case REBOOTED:\n+          rmNodes \u003d this.rmContext.getInactiveRMNodes().values();\n+          isInactive \u003d true;\n+          break;\n+        }\n+      }\n+      for (RMNode ni : rmNodes) {\n         if(stateFilter !\u003d null) {\n           RMNodeState state \u003d ni.getState();\n           if(!stateFilter.equals(state)) {\n             continue;\n           }\n         }\n         NodeInfo info \u003d new NodeInfo(ni, sched);\n         int usedMemory \u003d (int)info.getUsedMemory();\n         int availableMemory \u003d (int)info.getAvailableMemory();\n-        tbody.tr().\n+        TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d tbody.tr().\n             td(info.getRack()).\n             td(info.getState()).\n-            td(info.getNodeId()).\n-            td().a(\"http://\" + info.getNodeHTTPAddress(), info.getNodeHTTPAddress())._().\n-            td(info.getHealthStatus()).\n+            td(info.getNodeId());\n+        if (isInactive) {\n+          row.td()._(\"N/A\")._();\n+        } else {\n+          String httpAddress \u003d info.getNodeHTTPAddress();\n+          row.td().a(\"http://\" + httpAddress, httpAddress)._();\n+        }\n+        row.td(info.getHealthStatus()).\n             td(Times.format(info.getLastHealthUpdate())).\n             td(info.getHealthReport()).\n             td(String.valueOf(info.getNumContainers())).\n             td().br().$title(String.valueOf(usedMemory))._().\n               _(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))._().\n             td().br().$title(String.valueOf(usedMemory))._().\n               _(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))._().\n             _();\n       }\n       tbody._()._();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      html._(MetricsOverviewTable.class);\n\n      ResourceScheduler sched \u003d rm.getResourceScheduler();\n      String type \u003d $(NODE_STATE);\n      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.table(\"#nodes\").\n          thead().\n          tr().\n          th(\".rack\", \"Rack\").\n          th(\".state\", \"Node State\").\n          th(\".nodeaddress\", \"Node Address\").\n          th(\".nodehttpaddress\", \"Node HTTP Address\").\n          th(\".healthStatus\", \"Health-status\").\n          th(\".lastHealthUpdate\", \"Last health-update\").\n          th(\".healthReport\", \"Health-report\").\n          th(\".containers\", \"Containers\").\n          th(\".mem\", \"Mem Used\").\n          th(\".mem\", \"Mem Avail\").\n          _()._().\n          tbody();\n      RMNodeState stateFilter \u003d null;\n      if(type !\u003d null \u0026\u0026 !type.isEmpty()) {\n        stateFilter \u003d RMNodeState.valueOf(type.toUpperCase());\n      }\n      Collection\u003cRMNode\u003e rmNodes \u003d this.rmContext.getRMNodes().values();\n      boolean isInactive \u003d false;\n      if (stateFilter !\u003d null) {\n        switch (stateFilter) {\n        case DECOMMISSIONED:\n        case LOST:\n        case REBOOTED:\n          rmNodes \u003d this.rmContext.getInactiveRMNodes().values();\n          isInactive \u003d true;\n          break;\n        }\n      }\n      for (RMNode ni : rmNodes) {\n        if(stateFilter !\u003d null) {\n          RMNodeState state \u003d ni.getState();\n          if(!stateFilter.equals(state)) {\n            continue;\n          }\n        }\n        NodeInfo info \u003d new NodeInfo(ni, sched);\n        int usedMemory \u003d (int)info.getUsedMemory();\n        int availableMemory \u003d (int)info.getAvailableMemory();\n        TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d tbody.tr().\n            td(info.getRack()).\n            td(info.getState()).\n            td(info.getNodeId());\n        if (isInactive) {\n          row.td()._(\"N/A\")._();\n        } else {\n          String httpAddress \u003d info.getNodeHTTPAddress();\n          row.td().a(\"http://\" + httpAddress, httpAddress)._();\n        }\n        row.td(info.getHealthStatus()).\n            td(Times.format(info.getLastHealthUpdate())).\n            td(info.getHealthReport()).\n            td(String.valueOf(info.getNumContainers())).\n            td().br().$title(String.valueOf(usedMemory))._().\n              _(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))._().\n            td().br().$title(String.valueOf(usedMemory))._().\n              _(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))._().\n            _();\n      }\n      tbody._()._();\n    }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/NodesPage.java",
      "extendedDetails": {}
    },
    "0ea8570be578be60e2f32849900a1c50506d78d3": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2863. Support web services for YARN and MR components. (Thomas Graves via vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1213975 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/12/11 3:05 PM",
      "commitName": "0ea8570be578be60e2f32849900a1c50506d78d3",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "05/10/11 7:01 AM",
      "commitNameOld": "9a4e890f4aadc921fa468fd1292d215704429b61",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 69.38,
      "commitsBetweenForRepo": 483,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,51 @@\n     protected void render(Block html) {\n       html._(MetricsOverviewTable.class);\n-      \n+\n       ResourceScheduler sched \u003d rm.getResourceScheduler();\n       String type \u003d $(NODE_STATE);\n       TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.table(\"#nodes\").\n           thead().\n           tr().\n           th(\".rack\", \"Rack\").\n           th(\".state\", \"Node State\").\n           th(\".nodeaddress\", \"Node Address\").\n           th(\".nodehttpaddress\", \"Node HTTP Address\").\n           th(\".healthStatus\", \"Health-status\").\n           th(\".lastHealthUpdate\", \"Last health-update\").\n           th(\".healthReport\", \"Health-report\").\n           th(\".containers\", \"Containers\").\n           th(\".mem\", \"Mem Used\").\n           th(\".mem\", \"Mem Avail\").\n           _()._().\n           tbody();\n       RMNodeState stateFilter \u003d null;\n       if(type !\u003d null \u0026\u0026 !type.isEmpty()) {\n         stateFilter \u003d RMNodeState.valueOf(type.toUpperCase());\n       }\n       for (RMNode ni : this.rmContext.getRMNodes().values()) {\n         if(stateFilter !\u003d null) {\n           RMNodeState state \u003d ni.getState();\n           if(!stateFilter.equals(state)) {\n             continue;\n           }\n         }\n-        NodeId id \u003d ni.getNodeID();\n-        SchedulerNodeReport report \u003d sched.getNodeReport(id);\n-        int numContainers \u003d 0;\n-        int usedMemory \u003d 0;\n-        int availableMemory \u003d 0;\n-        if(report !\u003d null) {\n-          numContainers \u003d report.getNumContainers();\n-          usedMemory \u003d report.getUsedResource().getMemory();\n-          availableMemory \u003d report.getAvailableResource().getMemory();\n-        }\n-\n-        NodeHealthStatus health \u003d ni.getNodeHealthStatus();\n+        NodeInfo info \u003d new NodeInfo(ni, sched);\n+        int usedMemory \u003d (int)info.getUsedMemory();\n+        int availableMemory \u003d (int)info.getAvailableMemory();\n         tbody.tr().\n-            td(ni.getRackName()).\n-            td(String.valueOf(ni.getState())).\n-            td(String.valueOf(ni.getNodeID().toString())).\n-            td().a(\"http://\" + ni.getHttpAddress(), ni.getHttpAddress())._().\n-            td(health.getIsNodeHealthy() ? \"Healthy\" : \"Unhealthy\").\n-            td(Times.format(health.getLastHealthReportTime())).\n-            td(String.valueOf(health.getHealthReport())).\n-            td(String.valueOf(numContainers)).\n+            td(info.getRack()).\n+            td(info.getState()).\n+            td(info.getNodeId()).\n+            td().a(\"http://\" + info.getNodeHTTPAddress(), info.getNodeHTTPAddress())._().\n+            td(info.getHealthStatus()).\n+            td(Times.format(info.getLastHealthUpdate())).\n+            td(info.getHealthReport()).\n+            td(String.valueOf(info.getNumContainers())).\n             td().br().$title(String.valueOf(usedMemory))._().\n               _(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))._().\n             td().br().$title(String.valueOf(usedMemory))._().\n               _(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))._().\n             _();\n       }\n       tbody._()._();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      html._(MetricsOverviewTable.class);\n\n      ResourceScheduler sched \u003d rm.getResourceScheduler();\n      String type \u003d $(NODE_STATE);\n      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.table(\"#nodes\").\n          thead().\n          tr().\n          th(\".rack\", \"Rack\").\n          th(\".state\", \"Node State\").\n          th(\".nodeaddress\", \"Node Address\").\n          th(\".nodehttpaddress\", \"Node HTTP Address\").\n          th(\".healthStatus\", \"Health-status\").\n          th(\".lastHealthUpdate\", \"Last health-update\").\n          th(\".healthReport\", \"Health-report\").\n          th(\".containers\", \"Containers\").\n          th(\".mem\", \"Mem Used\").\n          th(\".mem\", \"Mem Avail\").\n          _()._().\n          tbody();\n      RMNodeState stateFilter \u003d null;\n      if(type !\u003d null \u0026\u0026 !type.isEmpty()) {\n        stateFilter \u003d RMNodeState.valueOf(type.toUpperCase());\n      }\n      for (RMNode ni : this.rmContext.getRMNodes().values()) {\n        if(stateFilter !\u003d null) {\n          RMNodeState state \u003d ni.getState();\n          if(!stateFilter.equals(state)) {\n            continue;\n          }\n        }\n        NodeInfo info \u003d new NodeInfo(ni, sched);\n        int usedMemory \u003d (int)info.getUsedMemory();\n        int availableMemory \u003d (int)info.getAvailableMemory();\n        tbody.tr().\n            td(info.getRack()).\n            td(info.getState()).\n            td(info.getNodeId()).\n            td().a(\"http://\" + info.getNodeHTTPAddress(), info.getNodeHTTPAddress())._().\n            td(info.getHealthStatus()).\n            td(Times.format(info.getLastHealthUpdate())).\n            td(info.getHealthReport()).\n            td(String.valueOf(info.getNumContainers())).\n            td().br().$title(String.valueOf(usedMemory))._().\n              _(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))._().\n            td().br().$title(String.valueOf(usedMemory))._().\n              _(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))._().\n            _();\n      }\n      tbody._()._();\n    }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/NodesPage.java",
      "extendedDetails": {}
    },
    "9a4e890f4aadc921fa468fd1292d215704429b61": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2738. Added the missing cluster level statisticss on the RM web UI. Contributed by Robert Joseph Evans.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1179229 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/10/11 7:01 AM",
      "commitName": "9a4e890f4aadc921fa468fd1292d215704429b61",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "27/09/11 10:35 PM",
      "commitNameOld": "cc42ccf02acca7b5a971fa5ca0986e075169fc8c",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 7.35,
      "commitsBetweenForRepo": 57,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,60 @@\n     protected void render(Block html) {\n+      html._(MetricsOverviewTable.class);\n+      \n+      ResourceScheduler sched \u003d rm.getResourceScheduler();\n+      String type \u003d $(NODE_STATE);\n       TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.table(\"#nodes\").\n           thead().\n           tr().\n           th(\".rack\", \"Rack\").\n+          th(\".state\", \"Node State\").\n           th(\".nodeaddress\", \"Node Address\").\n           th(\".nodehttpaddress\", \"Node HTTP Address\").\n           th(\".healthStatus\", \"Health-status\").\n           th(\".lastHealthUpdate\", \"Last health-update\").\n           th(\".healthReport\", \"Health-report\").\n           th(\".containers\", \"Containers\").\n-//          th(\".mem\", \"Mem Used (MB)\").\n-//          th(\".mem\", \"Mem Avail (MB)\").\n+          th(\".mem\", \"Mem Used\").\n+          th(\".mem\", \"Mem Avail\").\n           _()._().\n           tbody();\n+      RMNodeState stateFilter \u003d null;\n+      if(type !\u003d null \u0026\u0026 !type.isEmpty()) {\n+        stateFilter \u003d RMNodeState.valueOf(type.toUpperCase());\n+      }\n       for (RMNode ni : this.rmContext.getRMNodes().values()) {\n+        if(stateFilter !\u003d null) {\n+          RMNodeState state \u003d ni.getState();\n+          if(!stateFilter.equals(state)) {\n+            continue;\n+          }\n+        }\n+        NodeId id \u003d ni.getNodeID();\n+        SchedulerNodeReport report \u003d sched.getNodeReport(id);\n+        int numContainers \u003d 0;\n+        int usedMemory \u003d 0;\n+        int availableMemory \u003d 0;\n+        if(report !\u003d null) {\n+          numContainers \u003d report.getNumContainers();\n+          usedMemory \u003d report.getUsedResource().getMemory();\n+          availableMemory \u003d report.getAvailableResource().getMemory();\n+        }\n+\n         NodeHealthStatus health \u003d ni.getNodeHealthStatus();\n         tbody.tr().\n             td(ni.getRackName()).\n+            td(String.valueOf(ni.getState())).\n             td(String.valueOf(ni.getNodeID().toString())).\n             td().a(\"http://\" + ni.getHttpAddress(), ni.getHttpAddress())._().\n             td(health.getIsNodeHealthy() ? \"Healthy\" : \"Unhealthy\").\n             td(Times.format(health.getLastHealthReportTime())).\n             td(String.valueOf(health.getHealthReport())).\n-            // TODO: acm: refactor2 FIXME\n-            //td(String.valueOf(ni.getNumContainers())).\n-            // TODO: FIXME Vinodkv\n-//            td(String.valueOf(ni.getUsedResource().getMemory())).\n-//            td(String.valueOf(ni.getAvailableResource().getMemory())).\n-            td(\"n/a\")._();\n+            td(String.valueOf(numContainers)).\n+            td().br().$title(String.valueOf(usedMemory))._().\n+              _(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))._().\n+            td().br().$title(String.valueOf(usedMemory))._().\n+              _(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))._().\n+            _();\n       }\n       tbody._()._();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      html._(MetricsOverviewTable.class);\n      \n      ResourceScheduler sched \u003d rm.getResourceScheduler();\n      String type \u003d $(NODE_STATE);\n      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.table(\"#nodes\").\n          thead().\n          tr().\n          th(\".rack\", \"Rack\").\n          th(\".state\", \"Node State\").\n          th(\".nodeaddress\", \"Node Address\").\n          th(\".nodehttpaddress\", \"Node HTTP Address\").\n          th(\".healthStatus\", \"Health-status\").\n          th(\".lastHealthUpdate\", \"Last health-update\").\n          th(\".healthReport\", \"Health-report\").\n          th(\".containers\", \"Containers\").\n          th(\".mem\", \"Mem Used\").\n          th(\".mem\", \"Mem Avail\").\n          _()._().\n          tbody();\n      RMNodeState stateFilter \u003d null;\n      if(type !\u003d null \u0026\u0026 !type.isEmpty()) {\n        stateFilter \u003d RMNodeState.valueOf(type.toUpperCase());\n      }\n      for (RMNode ni : this.rmContext.getRMNodes().values()) {\n        if(stateFilter !\u003d null) {\n          RMNodeState state \u003d ni.getState();\n          if(!stateFilter.equals(state)) {\n            continue;\n          }\n        }\n        NodeId id \u003d ni.getNodeID();\n        SchedulerNodeReport report \u003d sched.getNodeReport(id);\n        int numContainers \u003d 0;\n        int usedMemory \u003d 0;\n        int availableMemory \u003d 0;\n        if(report !\u003d null) {\n          numContainers \u003d report.getNumContainers();\n          usedMemory \u003d report.getUsedResource().getMemory();\n          availableMemory \u003d report.getAvailableResource().getMemory();\n        }\n\n        NodeHealthStatus health \u003d ni.getNodeHealthStatus();\n        tbody.tr().\n            td(ni.getRackName()).\n            td(String.valueOf(ni.getState())).\n            td(String.valueOf(ni.getNodeID().toString())).\n            td().a(\"http://\" + ni.getHttpAddress(), ni.getHttpAddress())._().\n            td(health.getIsNodeHealthy() ? \"Healthy\" : \"Unhealthy\").\n            td(Times.format(health.getLastHealthReportTime())).\n            td(String.valueOf(health.getHealthReport())).\n            td(String.valueOf(numContainers)).\n            td().br().$title(String.valueOf(usedMemory))._().\n              _(StringUtils.byteDesc(usedMemory * BYTES_IN_MB))._().\n            td().br().$title(String.valueOf(usedMemory))._().\n              _(StringUtils.byteDesc(availableMemory * BYTES_IN_MB))._().\n            _();\n      }\n      tbody._()._();\n    }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/NodesPage.java",
      "extendedDetails": {}
    },
    "cc42ccf02acca7b5a971fa5ca0986e075169fc8c": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2843. Fixed the node-table to be completely displayed and making node entries on RM UI to be sortable. Contributed by Abhijit Suresh Shingate.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1176730 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/09/11 10:35 PM",
      "commitName": "cc42ccf02acca7b5a971fa5ca0986e075169fc8c",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "08/09/11 11:49 AM",
      "commitNameOld": "dd34c4e24f5430003561318880d2a7b9e6be6e16",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 19.45,
      "commitsBetweenForRepo": 131,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n     protected void render(Block html) {\n       TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.table(\"#nodes\").\n           thead().\n           tr().\n           th(\".rack\", \"Rack\").\n           th(\".nodeaddress\", \"Node Address\").\n           th(\".nodehttpaddress\", \"Node HTTP Address\").\n           th(\".healthStatus\", \"Health-status\").\n           th(\".lastHealthUpdate\", \"Last health-update\").\n           th(\".healthReport\", \"Health-report\").\n           th(\".containers\", \"Containers\").\n //          th(\".mem\", \"Mem Used (MB)\").\n //          th(\".mem\", \"Mem Avail (MB)\").\n           _()._().\n           tbody();\n       for (RMNode ni : this.rmContext.getRMNodes().values()) {\n         NodeHealthStatus health \u003d ni.getNodeHealthStatus();\n         tbody.tr().\n             td(ni.getRackName()).\n             td(String.valueOf(ni.getNodeID().toString())).\n             td().a(\"http://\" + ni.getHttpAddress(), ni.getHttpAddress())._().\n             td(health.getIsNodeHealthy() ? \"Healthy\" : \"Unhealthy\").\n             td(Times.format(health.getLastHealthReportTime())).\n             td(String.valueOf(health.getHealthReport())).\n             // TODO: acm: refactor2 FIXME\n             //td(String.valueOf(ni.getNumContainers())).\n             // TODO: FIXME Vinodkv\n //            td(String.valueOf(ni.getUsedResource().getMemory())).\n //            td(String.valueOf(ni.getAvailableResource().getMemory())).\n-            _();\n+            td(\"n/a\")._();\n       }\n       tbody._()._();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.table(\"#nodes\").\n          thead().\n          tr().\n          th(\".rack\", \"Rack\").\n          th(\".nodeaddress\", \"Node Address\").\n          th(\".nodehttpaddress\", \"Node HTTP Address\").\n          th(\".healthStatus\", \"Health-status\").\n          th(\".lastHealthUpdate\", \"Last health-update\").\n          th(\".healthReport\", \"Health-report\").\n          th(\".containers\", \"Containers\").\n//          th(\".mem\", \"Mem Used (MB)\").\n//          th(\".mem\", \"Mem Avail (MB)\").\n          _()._().\n          tbody();\n      for (RMNode ni : this.rmContext.getRMNodes().values()) {\n        NodeHealthStatus health \u003d ni.getNodeHealthStatus();\n        tbody.tr().\n            td(ni.getRackName()).\n            td(String.valueOf(ni.getNodeID().toString())).\n            td().a(\"http://\" + ni.getHttpAddress(), ni.getHttpAddress())._().\n            td(health.getIsNodeHealthy() ? \"Healthy\" : \"Unhealthy\").\n            td(Times.format(health.getLastHealthReportTime())).\n            td(String.valueOf(health.getHealthReport())).\n            // TODO: acm: refactor2 FIXME\n            //td(String.valueOf(ni.getNumContainers())).\n            // TODO: FIXME Vinodkv\n//            td(String.valueOf(ni.getUsedResource().getMemory())).\n//            td(String.valueOf(ni.getAvailableResource().getMemory())).\n            td(\"n/a\")._();\n      }\n      tbody._()._();\n    }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/NodesPage.java",
      "extendedDetails": {}
    },
    "dd34c4e24f5430003561318880d2a7b9e6be6e16": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2844. Fixed display of nodes in UI.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1166856 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/09/11 11:49 AM",
      "commitName": "dd34c4e24f5430003561318880d2a7b9e6be6e16",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 14.77,
      "commitsBetweenForRepo": 83,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n     protected void render(Block html) {\n       TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.table(\"#nodes\").\n           thead().\n           tr().\n           th(\".rack\", \"Rack\").\n-          th(\".nodeid\", \"Node ID\").\n-          th(\".host\", \"Host\").\n+          th(\".nodeaddress\", \"Node Address\").\n+          th(\".nodehttpaddress\", \"Node HTTP Address\").\n           th(\".healthStatus\", \"Health-status\").\n           th(\".lastHealthUpdate\", \"Last health-update\").\n           th(\".healthReport\", \"Health-report\").\n           th(\".containers\", \"Containers\").\n //          th(\".mem\", \"Mem Used (MB)\").\n //          th(\".mem\", \"Mem Avail (MB)\").\n           _()._().\n           tbody();\n       for (RMNode ni : this.rmContext.getRMNodes().values()) {\n         NodeHealthStatus health \u003d ni.getNodeHealthStatus();\n         tbody.tr().\n             td(ni.getRackName()).\n             td(String.valueOf(ni.getNodeID().toString())).\n             td().a(\"http://\" + ni.getHttpAddress(), ni.getHttpAddress())._().\n             td(health.getIsNodeHealthy() ? \"Healthy\" : \"Unhealthy\").\n             td(Times.format(health.getLastHealthReportTime())).\n             td(String.valueOf(health.getHealthReport())).\n             // TODO: acm: refactor2 FIXME\n             //td(String.valueOf(ni.getNumContainers())).\n             // TODO: FIXME Vinodkv\n //            td(String.valueOf(ni.getUsedResource().getMemory())).\n //            td(String.valueOf(ni.getAvailableResource().getMemory())).\n             _();\n       }\n       tbody._()._();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.table(\"#nodes\").\n          thead().\n          tr().\n          th(\".rack\", \"Rack\").\n          th(\".nodeaddress\", \"Node Address\").\n          th(\".nodehttpaddress\", \"Node HTTP Address\").\n          th(\".healthStatus\", \"Health-status\").\n          th(\".lastHealthUpdate\", \"Last health-update\").\n          th(\".healthReport\", \"Health-report\").\n          th(\".containers\", \"Containers\").\n//          th(\".mem\", \"Mem Used (MB)\").\n//          th(\".mem\", \"Mem Avail (MB)\").\n          _()._().\n          tbody();\n      for (RMNode ni : this.rmContext.getRMNodes().values()) {\n        NodeHealthStatus health \u003d ni.getNodeHealthStatus();\n        tbody.tr().\n            td(ni.getRackName()).\n            td(String.valueOf(ni.getNodeID().toString())).\n            td().a(\"http://\" + ni.getHttpAddress(), ni.getHttpAddress())._().\n            td(health.getIsNodeHealthy() ? \"Healthy\" : \"Unhealthy\").\n            td(Times.format(health.getLastHealthReportTime())).\n            td(String.valueOf(health.getHealthReport())).\n            // TODO: acm: refactor2 FIXME\n            //td(String.valueOf(ni.getNumContainers())).\n            // TODO: FIXME Vinodkv\n//            td(String.valueOf(ni.getUsedResource().getMemory())).\n//            td(String.valueOf(ni.getAvailableResource().getMemory())).\n            _();\n      }\n      tbody._()._();\n    }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/NodesPage.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    protected void render(Block html) {\n      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.table(\"#nodes\").\n          thead().\n          tr().\n          th(\".rack\", \"Rack\").\n          th(\".nodeid\", \"Node ID\").\n          th(\".host\", \"Host\").\n          th(\".healthStatus\", \"Health-status\").\n          th(\".lastHealthUpdate\", \"Last health-update\").\n          th(\".healthReport\", \"Health-report\").\n          th(\".containers\", \"Containers\").\n//          th(\".mem\", \"Mem Used (MB)\").\n//          th(\".mem\", \"Mem Avail (MB)\").\n          _()._().\n          tbody();\n      for (RMNode ni : this.rmContext.getRMNodes().values()) {\n        NodeHealthStatus health \u003d ni.getNodeHealthStatus();\n        tbody.tr().\n            td(ni.getRackName()).\n            td(String.valueOf(ni.getNodeID().toString())).\n            td().a(\"http://\" + ni.getHttpAddress(), ni.getHttpAddress())._().\n            td(health.getIsNodeHealthy() ? \"Healthy\" : \"Unhealthy\").\n            td(Times.format(health.getLastHealthReportTime())).\n            td(String.valueOf(health.getHealthReport())).\n            // TODO: acm: refactor2 FIXME\n            //td(String.valueOf(ni.getNumContainers())).\n            // TODO: FIXME Vinodkv\n//            td(String.valueOf(ni.getUsedResource().getMemory())).\n//            td(String.valueOf(ni.getAvailableResource().getMemory())).\n            _();\n      }\n      tbody._()._();\n    }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/NodesPage.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/NodesPage.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/NodesPage.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,33 @@\n+    protected void render(Block html) {\n+      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.table(\"#nodes\").\n+          thead().\n+          tr().\n+          th(\".rack\", \"Rack\").\n+          th(\".nodeid\", \"Node ID\").\n+          th(\".host\", \"Host\").\n+          th(\".healthStatus\", \"Health-status\").\n+          th(\".lastHealthUpdate\", \"Last health-update\").\n+          th(\".healthReport\", \"Health-report\").\n+          th(\".containers\", \"Containers\").\n+//          th(\".mem\", \"Mem Used (MB)\").\n+//          th(\".mem\", \"Mem Avail (MB)\").\n+          _()._().\n+          tbody();\n+      for (RMNode ni : this.rmContext.getRMNodes().values()) {\n+        NodeHealthStatus health \u003d ni.getNodeHealthStatus();\n+        tbody.tr().\n+            td(ni.getRackName()).\n+            td(String.valueOf(ni.getNodeID().toString())).\n+            td().a(\"http://\" + ni.getHttpAddress(), ni.getHttpAddress())._().\n+            td(health.getIsNodeHealthy() ? \"Healthy\" : \"Unhealthy\").\n+            td(Times.format(health.getLastHealthReportTime())).\n+            td(String.valueOf(health.getHealthReport())).\n+            // TODO: acm: refactor2 FIXME\n+            //td(String.valueOf(ni.getNumContainers())).\n+            // TODO: FIXME Vinodkv\n+//            td(String.valueOf(ni.getUsedResource().getMemory())).\n+//            td(String.valueOf(ni.getAvailableResource().getMemory())).\n+            _();\n+      }\n+      tbody._()._();\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    protected void render(Block html) {\n      TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.table(\"#nodes\").\n          thead().\n          tr().\n          th(\".rack\", \"Rack\").\n          th(\".nodeid\", \"Node ID\").\n          th(\".host\", \"Host\").\n          th(\".healthStatus\", \"Health-status\").\n          th(\".lastHealthUpdate\", \"Last health-update\").\n          th(\".healthReport\", \"Health-report\").\n          th(\".containers\", \"Containers\").\n//          th(\".mem\", \"Mem Used (MB)\").\n//          th(\".mem\", \"Mem Avail (MB)\").\n          _()._().\n          tbody();\n      for (RMNode ni : this.rmContext.getRMNodes().values()) {\n        NodeHealthStatus health \u003d ni.getNodeHealthStatus();\n        tbody.tr().\n            td(ni.getRackName()).\n            td(String.valueOf(ni.getNodeID().toString())).\n            td().a(\"http://\" + ni.getHttpAddress(), ni.getHttpAddress())._().\n            td(health.getIsNodeHealthy() ? \"Healthy\" : \"Unhealthy\").\n            td(Times.format(health.getLastHealthReportTime())).\n            td(String.valueOf(health.getHealthReport())).\n            // TODO: acm: refactor2 FIXME\n            //td(String.valueOf(ni.getNumContainers())).\n            // TODO: FIXME Vinodkv\n//            td(String.valueOf(ni.getUsedResource().getMemory())).\n//            td(String.valueOf(ni.getAvailableResource().getMemory())).\n            _();\n      }\n      tbody._()._();\n    }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/NodesPage.java"
    }
  }
}