{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LeveldbRMStateStore.java",
  "functionName": "loadReservationState",
  "functionId": "loadReservationState___rmState-RMState",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/LeveldbRMStateStore.java",
  "functionStartLine": 239,
  "functionEndLine": 275,
  "numCommitsSeen": 19,
  "timeTaken": 2735,
  "changeHistory": [
    "76900b4f5b7ad8d11baf505abc43f7b24d364071",
    "318bfb01bc6793da09e32e9cc292eb63224b6ca2",
    "f271d377357ad680924d19f07e6c8315e7c89bae"
  ],
  "changeHistoryShort": {
    "76900b4f5b7ad8d11baf505abc43f7b24d364071": "Ybodychange",
    "318bfb01bc6793da09e32e9cc292eb63224b6ca2": "Ybodychange",
    "f271d377357ad680924d19f07e6c8315e7c89bae": "Yintroduced"
  },
  "changeHistoryDetails": {
    "76900b4f5b7ad8d11baf505abc43f7b24d364071": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10189. Code cleanup in LeveldbRMStateStore. Contributed by Benjamin Teke\n",
      "commitDate": "18/04/20 12:57 AM",
      "commitName": "76900b4f5b7ad8d11baf505abc43f7b24d364071",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "15/03/19 4:20 PM",
      "commitNameOld": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 399.36,
      "commitsBetweenForRepo": 2266,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,37 @@\n   private void loadReservationState(RMState rmState) throws IOException {\n     int numReservations \u003d 0;\n-    LeveldbIterator iter \u003d null;\n-    try {\n-      iter \u003d new LeveldbIterator(db);\n+    try (LeveldbIterator iter \u003d new LeveldbIterator(db)) {\n       iter.seek(bytes(RM_RESERVATION_KEY_PREFIX));\n       while (iter.hasNext()) {\n         Entry\u003cbyte[],byte[]\u003e entry \u003d iter.next();\n         String key \u003d asString(entry.getKey());\n         if (!key.startsWith(RM_RESERVATION_KEY_PREFIX)) {\n           break;\n         }\n \n         String planReservationString \u003d\n             key.substring(RM_RESERVATION_KEY_PREFIX.length());\n         String[] parts \u003d planReservationString.split(SEPARATOR);\n         if (parts.length !\u003d 2) {\n           LOG.warn(\"Incorrect reservation state key \" + key);\n           continue;\n         }\n         String planName \u003d parts[0];\n         String reservationName \u003d parts[1];\n         ReservationAllocationStateProto allocationState \u003d\n             ReservationAllocationStateProto.parseFrom(entry.getValue());\n         if (!rmState.getReservationState().containsKey(planName)) {\n           rmState.getReservationState().put(planName,\n               new HashMap\u003cReservationId, ReservationAllocationStateProto\u003e());\n         }\n         ReservationId reservationId \u003d\n             ReservationId.parseReservationId(reservationName);\n         rmState.getReservationState().get(planName).put(reservationId,\n             allocationState);\n         numReservations++;\n       }\n     } catch (DBException e) {\n       throw new IOException(e);\n-    } finally {\n-      if (iter !\u003d null) {\n-        iter.close();\n-      }\n     }\n     LOG.info(\"Recovered \" + numReservations + \" reservations\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void loadReservationState(RMState rmState) throws IOException {\n    int numReservations \u003d 0;\n    try (LeveldbIterator iter \u003d new LeveldbIterator(db)) {\n      iter.seek(bytes(RM_RESERVATION_KEY_PREFIX));\n      while (iter.hasNext()) {\n        Entry\u003cbyte[],byte[]\u003e entry \u003d iter.next();\n        String key \u003d asString(entry.getKey());\n        if (!key.startsWith(RM_RESERVATION_KEY_PREFIX)) {\n          break;\n        }\n\n        String planReservationString \u003d\n            key.substring(RM_RESERVATION_KEY_PREFIX.length());\n        String[] parts \u003d planReservationString.split(SEPARATOR);\n        if (parts.length !\u003d 2) {\n          LOG.warn(\"Incorrect reservation state key \" + key);\n          continue;\n        }\n        String planName \u003d parts[0];\n        String reservationName \u003d parts[1];\n        ReservationAllocationStateProto allocationState \u003d\n            ReservationAllocationStateProto.parseFrom(entry.getValue());\n        if (!rmState.getReservationState().containsKey(planName)) {\n          rmState.getReservationState().put(planName,\n              new HashMap\u003cReservationId, ReservationAllocationStateProto\u003e());\n        }\n        ReservationId reservationId \u003d\n            ReservationId.parseReservationId(reservationName);\n        rmState.getReservationState().get(planName).put(reservationId,\n            allocationState);\n        numReservations++;\n      }\n    } catch (DBException e) {\n      throw new IOException(e);\n    }\n    LOG.info(\"Recovered \" + numReservations + \" reservations\");\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/LeveldbRMStateStore.java",
      "extendedDetails": {}
    },
    "318bfb01bc6793da09e32e9cc292eb63224b6ca2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6354. LeveldbRMStateStore can parse invalid keys when recovering reservations. Contributed by Jason Lowe\n",
      "commitDate": "31/03/17 10:30 AM",
      "commitName": "318bfb01bc6793da09e32e9cc292eb63224b6ca2",
      "commitAuthor": "Eric Payne",
      "commitDateOld": "14/06/16 3:06 PM",
      "commitNameOld": "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 289.81,
      "commitsBetweenForRepo": 1977,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,43 @@\n   private void loadReservationState(RMState rmState) throws IOException {\n     int numReservations \u003d 0;\n     LeveldbIterator iter \u003d null;\n     try {\n       iter \u003d new LeveldbIterator(db);\n       iter.seek(bytes(RM_RESERVATION_KEY_PREFIX));\n       while (iter.hasNext()) {\n         Entry\u003cbyte[],byte[]\u003e entry \u003d iter.next();\n         String key \u003d asString(entry.getKey());\n+        if (!key.startsWith(RM_RESERVATION_KEY_PREFIX)) {\n+          break;\n+        }\n \n         String planReservationString \u003d\n             key.substring(RM_RESERVATION_KEY_PREFIX.length());\n         String[] parts \u003d planReservationString.split(SEPARATOR);\n         if (parts.length !\u003d 2) {\n           LOG.warn(\"Incorrect reservation state key \" + key);\n           continue;\n         }\n         String planName \u003d parts[0];\n         String reservationName \u003d parts[1];\n         ReservationAllocationStateProto allocationState \u003d\n             ReservationAllocationStateProto.parseFrom(entry.getValue());\n         if (!rmState.getReservationState().containsKey(planName)) {\n           rmState.getReservationState().put(planName,\n               new HashMap\u003cReservationId, ReservationAllocationStateProto\u003e());\n         }\n         ReservationId reservationId \u003d\n             ReservationId.parseReservationId(reservationName);\n         rmState.getReservationState().get(planName).put(reservationId,\n             allocationState);\n         numReservations++;\n       }\n     } catch (DBException e) {\n       throw new IOException(e);\n     } finally {\n       if (iter !\u003d null) {\n         iter.close();\n       }\n     }\n     LOG.info(\"Recovered \" + numReservations + \" reservations\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void loadReservationState(RMState rmState) throws IOException {\n    int numReservations \u003d 0;\n    LeveldbIterator iter \u003d null;\n    try {\n      iter \u003d new LeveldbIterator(db);\n      iter.seek(bytes(RM_RESERVATION_KEY_PREFIX));\n      while (iter.hasNext()) {\n        Entry\u003cbyte[],byte[]\u003e entry \u003d iter.next();\n        String key \u003d asString(entry.getKey());\n        if (!key.startsWith(RM_RESERVATION_KEY_PREFIX)) {\n          break;\n        }\n\n        String planReservationString \u003d\n            key.substring(RM_RESERVATION_KEY_PREFIX.length());\n        String[] parts \u003d planReservationString.split(SEPARATOR);\n        if (parts.length !\u003d 2) {\n          LOG.warn(\"Incorrect reservation state key \" + key);\n          continue;\n        }\n        String planName \u003d parts[0];\n        String reservationName \u003d parts[1];\n        ReservationAllocationStateProto allocationState \u003d\n            ReservationAllocationStateProto.parseFrom(entry.getValue());\n        if (!rmState.getReservationState().containsKey(planName)) {\n          rmState.getReservationState().put(planName,\n              new HashMap\u003cReservationId, ReservationAllocationStateProto\u003e());\n        }\n        ReservationId reservationId \u003d\n            ReservationId.parseReservationId(reservationName);\n        rmState.getReservationState().get(planName).put(reservationId,\n            allocationState);\n        numReservations++;\n      }\n    } catch (DBException e) {\n      throw new IOException(e);\n    } finally {\n      if (iter !\u003d null) {\n        iter.close();\n      }\n    }\n    LOG.info(\"Recovered \" + numReservations + \" reservations\");\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/LeveldbRMStateStore.java",
      "extendedDetails": {}
    },
    "f271d377357ad680924d19f07e6c8315e7c89bae": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3736. Add RMStateStore apis to store and load accepted reservations for failover (adhoot via asuresh)\n",
      "commitDate": "05/08/15 12:57 PM",
      "commitName": "f271d377357ad680924d19f07e6c8315e7c89bae",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,40 @@\n+  private void loadReservationState(RMState rmState) throws IOException {\n+    int numReservations \u003d 0;\n+    LeveldbIterator iter \u003d null;\n+    try {\n+      iter \u003d new LeveldbIterator(db);\n+      iter.seek(bytes(RM_RESERVATION_KEY_PREFIX));\n+      while (iter.hasNext()) {\n+        Entry\u003cbyte[],byte[]\u003e entry \u003d iter.next();\n+        String key \u003d asString(entry.getKey());\n+\n+        String planReservationString \u003d\n+            key.substring(RM_RESERVATION_KEY_PREFIX.length());\n+        String[] parts \u003d planReservationString.split(SEPARATOR);\n+        if (parts.length !\u003d 2) {\n+          LOG.warn(\"Incorrect reservation state key \" + key);\n+          continue;\n+        }\n+        String planName \u003d parts[0];\n+        String reservationName \u003d parts[1];\n+        ReservationAllocationStateProto allocationState \u003d\n+            ReservationAllocationStateProto.parseFrom(entry.getValue());\n+        if (!rmState.getReservationState().containsKey(planName)) {\n+          rmState.getReservationState().put(planName,\n+              new HashMap\u003cReservationId, ReservationAllocationStateProto\u003e());\n+        }\n+        ReservationId reservationId \u003d\n+            ReservationId.parseReservationId(reservationName);\n+        rmState.getReservationState().get(planName).put(reservationId,\n+            allocationState);\n+        numReservations++;\n+      }\n+    } catch (DBException e) {\n+      throw new IOException(e);\n+    } finally {\n+      if (iter !\u003d null) {\n+        iter.close();\n+      }\n+    }\n+    LOG.info(\"Recovered \" + numReservations + \" reservations\");\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void loadReservationState(RMState rmState) throws IOException {\n    int numReservations \u003d 0;\n    LeveldbIterator iter \u003d null;\n    try {\n      iter \u003d new LeveldbIterator(db);\n      iter.seek(bytes(RM_RESERVATION_KEY_PREFIX));\n      while (iter.hasNext()) {\n        Entry\u003cbyte[],byte[]\u003e entry \u003d iter.next();\n        String key \u003d asString(entry.getKey());\n\n        String planReservationString \u003d\n            key.substring(RM_RESERVATION_KEY_PREFIX.length());\n        String[] parts \u003d planReservationString.split(SEPARATOR);\n        if (parts.length !\u003d 2) {\n          LOG.warn(\"Incorrect reservation state key \" + key);\n          continue;\n        }\n        String planName \u003d parts[0];\n        String reservationName \u003d parts[1];\n        ReservationAllocationStateProto allocationState \u003d\n            ReservationAllocationStateProto.parseFrom(entry.getValue());\n        if (!rmState.getReservationState().containsKey(planName)) {\n          rmState.getReservationState().put(planName,\n              new HashMap\u003cReservationId, ReservationAllocationStateProto\u003e());\n        }\n        ReservationId reservationId \u003d\n            ReservationId.parseReservationId(reservationName);\n        rmState.getReservationState().get(planName).put(reservationId,\n            allocationState);\n        numReservations++;\n      }\n    } catch (DBException e) {\n      throw new IOException(e);\n    } finally {\n      if (iter !\u003d null) {\n        iter.close();\n      }\n    }\n    LOG.info(\"Recovered \" + numReservations + \" reservations\");\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/LeveldbRMStateStore.java"
    }
  }
}