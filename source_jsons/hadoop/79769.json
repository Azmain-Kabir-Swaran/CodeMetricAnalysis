{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FileSystemLinkResolver.java",
  "functionName": "resolve",
  "functionId": "resolve___filesys-FileSystem(modifiers-final)__path-Path(modifiers-final)",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystemLinkResolver.java",
  "functionStartLine": 71,
  "functionEndLine": 111,
  "numCommitsSeen": 4,
  "timeTaken": 1221,
  "changeHistory": [
    "26971e52ae65590e618a23621be244e588845adc",
    "f216f22915f9620c086e361e6eb759a75bed199a",
    "9ad19eec6f20530c9f2b9b80ee858ac9ca02827b",
    "33fe54a25f04673048f0f0db4abaa42535f043ec"
  ],
  "changeHistoryShort": {
    "26971e52ae65590e618a23621be244e588845adc": "Ybodychange",
    "f216f22915f9620c086e361e6eb759a75bed199a": "Ybodychange",
    "9ad19eec6f20530c9f2b9b80ee858ac9ca02827b": "Ybodychange",
    "33fe54a25f04673048f0f0db4abaa42535f043ec": "Yintroduced"
  },
  "changeHistoryDetails": {
    "26971e52ae65590e618a23621be244e588845adc": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11852. Disable symlinks in trunk.\n",
      "commitDate": "23/04/15 11:47 AM",
      "commitName": "26971e52ae65590e618a23621be244e588845adc",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "02/08/13 2:42 PM",
      "commitNameOld": "f216f22915f9620c086e361e6eb759a75bed199a",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 628.88,
      "commitsBetweenForRepo": 4790,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,41 @@\n   public T resolve(final FileSystem filesys, final Path path)\n       throws IOException {\n     int count \u003d 0;\n     T in \u003d null;\n     Path p \u003d path;\n     // Assumes path belongs to this FileSystem.\n     // Callers validate this by passing paths through FileSystem#checkPath\n     FileSystem fs \u003d filesys;\n     for (boolean isLink \u003d true; isLink;) {\n       try {\n         in \u003d doCall(p);\n         isLink \u003d false;\n       } catch (UnresolvedLinkException e) {\n         if (!filesys.resolveSymlinks) {\n           throw new IOException(\"Path \" + path + \" contains a symlink\"\n               + \" and symlink resolution is disabled (\"\n               + CommonConfigurationKeys.FS_CLIENT_RESOLVE_REMOTE_SYMLINKS_KEY\n               + \").\", e);\n         }\n+        if (!FileSystem.areSymlinksEnabled()) {\n+          throw new IOException(\"Symlink resolution is disabled in\" +\n+              \" this version of Hadoop.\");\n+        }\n         if (count++ \u003e FsConstants.MAX_PATH_LINKS) {\n           throw new IOException(\"Possible cyclic loop while \" +\n                                 \"following symbolic link \" + path);\n         }\n         // Resolve the first unresolved path component\n         p \u003d FSLinkResolver.qualifySymlinkTarget(fs.getUri(), p,\n             filesys.resolveLink(p));\n         fs \u003d FileSystem.getFSofPath(p, filesys.getConf());\n         // Have to call next if it\u0027s a new FS\n         if (!fs.equals(filesys)) {\n           return next(fs, p);\n         }\n         // Else, we keep resolving with this filesystem\n       }\n     }\n     // Successful call, path was fully resolved\n     return in;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public T resolve(final FileSystem filesys, final Path path)\n      throws IOException {\n    int count \u003d 0;\n    T in \u003d null;\n    Path p \u003d path;\n    // Assumes path belongs to this FileSystem.\n    // Callers validate this by passing paths through FileSystem#checkPath\n    FileSystem fs \u003d filesys;\n    for (boolean isLink \u003d true; isLink;) {\n      try {\n        in \u003d doCall(p);\n        isLink \u003d false;\n      } catch (UnresolvedLinkException e) {\n        if (!filesys.resolveSymlinks) {\n          throw new IOException(\"Path \" + path + \" contains a symlink\"\n              + \" and symlink resolution is disabled (\"\n              + CommonConfigurationKeys.FS_CLIENT_RESOLVE_REMOTE_SYMLINKS_KEY\n              + \").\", e);\n        }\n        if (!FileSystem.areSymlinksEnabled()) {\n          throw new IOException(\"Symlink resolution is disabled in\" +\n              \" this version of Hadoop.\");\n        }\n        if (count++ \u003e FsConstants.MAX_PATH_LINKS) {\n          throw new IOException(\"Possible cyclic loop while \" +\n                                \"following symbolic link \" + path);\n        }\n        // Resolve the first unresolved path component\n        p \u003d FSLinkResolver.qualifySymlinkTarget(fs.getUri(), p,\n            filesys.resolveLink(p));\n        fs \u003d FileSystem.getFSofPath(p, filesys.getConf());\n        // Have to call next if it\u0027s a new FS\n        if (!fs.equals(filesys)) {\n          return next(fs, p);\n        }\n        // Else, we keep resolving with this filesystem\n      }\n    }\n    // Successful call, path was fully resolved\n    return in;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystemLinkResolver.java",
      "extendedDetails": {}
    },
    "f216f22915f9620c086e361e6eb759a75bed199a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9761.  ViewFileSystem#rename fails when using DistributedFileSystem (Andrew Wang via Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1509874 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/13 2:42 PM",
      "commitName": "f216f22915f9620c086e361e6eb759a75bed199a",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "31/07/13 6:04 PM",
      "commitNameOld": "9ad19eec6f20530c9f2b9b80ee858ac9ca02827b",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 1.86,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,37 @@\n   public T resolve(final FileSystem filesys, final Path path)\n       throws IOException {\n     int count \u003d 0;\n     T in \u003d null;\n     Path p \u003d path;\n-    FileSystem fs \u003d FileSystem.getFSofPath(p, filesys.getConf());\n+    // Assumes path belongs to this FileSystem.\n+    // Callers validate this by passing paths through FileSystem#checkPath\n+    FileSystem fs \u003d filesys;\n     for (boolean isLink \u003d true; isLink;) {\n       try {\n         in \u003d doCall(p);\n         isLink \u003d false;\n       } catch (UnresolvedLinkException e) {\n         if (!filesys.resolveSymlinks) {\n           throw new IOException(\"Path \" + path + \" contains a symlink\"\n               + \" and symlink resolution is disabled (\"\n               + CommonConfigurationKeys.FS_CLIENT_RESOLVE_REMOTE_SYMLINKS_KEY\n               + \").\", e);\n         }\n         if (count++ \u003e FsConstants.MAX_PATH_LINKS) {\n           throw new IOException(\"Possible cyclic loop while \" +\n                                 \"following symbolic link \" + path);\n         }\n         // Resolve the first unresolved path component\n         p \u003d FSLinkResolver.qualifySymlinkTarget(fs.getUri(), p,\n             filesys.resolveLink(p));\n         fs \u003d FileSystem.getFSofPath(p, filesys.getConf());\n         // Have to call next if it\u0027s a new FS\n         if (!fs.equals(filesys)) {\n           return next(fs, p);\n         }\n         // Else, we keep resolving with this filesystem\n       }\n     }\n     // Successful call, path was fully resolved\n     return in;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public T resolve(final FileSystem filesys, final Path path)\n      throws IOException {\n    int count \u003d 0;\n    T in \u003d null;\n    Path p \u003d path;\n    // Assumes path belongs to this FileSystem.\n    // Callers validate this by passing paths through FileSystem#checkPath\n    FileSystem fs \u003d filesys;\n    for (boolean isLink \u003d true; isLink;) {\n      try {\n        in \u003d doCall(p);\n        isLink \u003d false;\n      } catch (UnresolvedLinkException e) {\n        if (!filesys.resolveSymlinks) {\n          throw new IOException(\"Path \" + path + \" contains a symlink\"\n              + \" and symlink resolution is disabled (\"\n              + CommonConfigurationKeys.FS_CLIENT_RESOLVE_REMOTE_SYMLINKS_KEY\n              + \").\", e);\n        }\n        if (count++ \u003e FsConstants.MAX_PATH_LINKS) {\n          throw new IOException(\"Possible cyclic loop while \" +\n                                \"following symbolic link \" + path);\n        }\n        // Resolve the first unresolved path component\n        p \u003d FSLinkResolver.qualifySymlinkTarget(fs.getUri(), p,\n            filesys.resolveLink(p));\n        fs \u003d FileSystem.getFSofPath(p, filesys.getConf());\n        // Have to call next if it\u0027s a new FS\n        if (!fs.equals(filesys)) {\n          return next(fs, p);\n        }\n        // Else, we keep resolving with this filesystem\n      }\n    }\n    // Successful call, path was fully resolved\n    return in;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystemLinkResolver.java",
      "extendedDetails": {}
    },
    "9ad19eec6f20530c9f2b9b80ee858ac9ca02827b": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9758.  Provide configuration option for FS/FC symlink resolution.  (Andrew Wang via Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1509064 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/07/13 6:04 PM",
      "commitName": "9ad19eec6f20530c9f2b9b80ee858ac9ca02827b",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "03/07/13 4:29 PM",
      "commitNameOld": "33fe54a25f04673048f0f0db4abaa42535f043ec",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 28.07,
      "commitsBetweenForRepo": 166,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,35 @@\n   public T resolve(final FileSystem filesys, final Path path)\n       throws IOException {\n     int count \u003d 0;\n     T in \u003d null;\n     Path p \u003d path;\n     FileSystem fs \u003d FileSystem.getFSofPath(p, filesys.getConf());\n     for (boolean isLink \u003d true; isLink;) {\n       try {\n         in \u003d doCall(p);\n         isLink \u003d false;\n       } catch (UnresolvedLinkException e) {\n+        if (!filesys.resolveSymlinks) {\n+          throw new IOException(\"Path \" + path + \" contains a symlink\"\n+              + \" and symlink resolution is disabled (\"\n+              + CommonConfigurationKeys.FS_CLIENT_RESOLVE_REMOTE_SYMLINKS_KEY\n+              + \").\", e);\n+        }\n         if (count++ \u003e FsConstants.MAX_PATH_LINKS) {\n           throw new IOException(\"Possible cyclic loop while \" +\n                                 \"following symbolic link \" + path);\n         }\n         // Resolve the first unresolved path component\n         p \u003d FSLinkResolver.qualifySymlinkTarget(fs.getUri(), p,\n             filesys.resolveLink(p));\n         fs \u003d FileSystem.getFSofPath(p, filesys.getConf());\n         // Have to call next if it\u0027s a new FS\n         if (!fs.equals(filesys)) {\n           return next(fs, p);\n         }\n         // Else, we keep resolving with this filesystem\n       }\n     }\n     // Successful call, path was fully resolved\n     return in;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public T resolve(final FileSystem filesys, final Path path)\n      throws IOException {\n    int count \u003d 0;\n    T in \u003d null;\n    Path p \u003d path;\n    FileSystem fs \u003d FileSystem.getFSofPath(p, filesys.getConf());\n    for (boolean isLink \u003d true; isLink;) {\n      try {\n        in \u003d doCall(p);\n        isLink \u003d false;\n      } catch (UnresolvedLinkException e) {\n        if (!filesys.resolveSymlinks) {\n          throw new IOException(\"Path \" + path + \" contains a symlink\"\n              + \" and symlink resolution is disabled (\"\n              + CommonConfigurationKeys.FS_CLIENT_RESOLVE_REMOTE_SYMLINKS_KEY\n              + \").\", e);\n        }\n        if (count++ \u003e FsConstants.MAX_PATH_LINKS) {\n          throw new IOException(\"Possible cyclic loop while \" +\n                                \"following symbolic link \" + path);\n        }\n        // Resolve the first unresolved path component\n        p \u003d FSLinkResolver.qualifySymlinkTarget(fs.getUri(), p,\n            filesys.resolveLink(p));\n        fs \u003d FileSystem.getFSofPath(p, filesys.getConf());\n        // Have to call next if it\u0027s a new FS\n        if (!fs.equals(filesys)) {\n          return next(fs, p);\n        }\n        // Else, we keep resolving with this filesystem\n      }\n    }\n    // Successful call, path was fully resolved\n    return in;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystemLinkResolver.java",
      "extendedDetails": {}
    },
    "33fe54a25f04673048f0f0db4abaa42535f043ec": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-9416.  Add new symlink resolution methods in FileSystem and FileSystemLinkResolver.  (awang via cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1499602 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/07/13 4:29 PM",
      "commitName": "33fe54a25f04673048f0f0db4abaa42535f043ec",
      "commitAuthor": "Colin McCabe",
      "diff": "@@ -0,0 +1,29 @@\n+  public T resolve(final FileSystem filesys, final Path path)\n+      throws IOException {\n+    int count \u003d 0;\n+    T in \u003d null;\n+    Path p \u003d path;\n+    FileSystem fs \u003d FileSystem.getFSofPath(p, filesys.getConf());\n+    for (boolean isLink \u003d true; isLink;) {\n+      try {\n+        in \u003d doCall(p);\n+        isLink \u003d false;\n+      } catch (UnresolvedLinkException e) {\n+        if (count++ \u003e FsConstants.MAX_PATH_LINKS) {\n+          throw new IOException(\"Possible cyclic loop while \" +\n+                                \"following symbolic link \" + path);\n+        }\n+        // Resolve the first unresolved path component\n+        p \u003d FSLinkResolver.qualifySymlinkTarget(fs.getUri(), p,\n+            filesys.resolveLink(p));\n+        fs \u003d FileSystem.getFSofPath(p, filesys.getConf());\n+        // Have to call next if it\u0027s a new FS\n+        if (!fs.equals(filesys)) {\n+          return next(fs, p);\n+        }\n+        // Else, we keep resolving with this filesystem\n+      }\n+    }\n+    // Successful call, path was fully resolved\n+    return in;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public T resolve(final FileSystem filesys, final Path path)\n      throws IOException {\n    int count \u003d 0;\n    T in \u003d null;\n    Path p \u003d path;\n    FileSystem fs \u003d FileSystem.getFSofPath(p, filesys.getConf());\n    for (boolean isLink \u003d true; isLink;) {\n      try {\n        in \u003d doCall(p);\n        isLink \u003d false;\n      } catch (UnresolvedLinkException e) {\n        if (count++ \u003e FsConstants.MAX_PATH_LINKS) {\n          throw new IOException(\"Possible cyclic loop while \" +\n                                \"following symbolic link \" + path);\n        }\n        // Resolve the first unresolved path component\n        p \u003d FSLinkResolver.qualifySymlinkTarget(fs.getUri(), p,\n            filesys.resolveLink(p));\n        fs \u003d FileSystem.getFSofPath(p, filesys.getConf());\n        // Have to call next if it\u0027s a new FS\n        if (!fs.equals(filesys)) {\n          return next(fs, p);\n        }\n        // Else, we keep resolving with this filesystem\n      }\n    }\n    // Successful call, path was fully resolved\n    return in;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystemLinkResolver.java"
    }
  }
}