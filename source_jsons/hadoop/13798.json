{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BlockManager.java",
  "functionName": "createLocatedBlocks",
  "functionId": "createLocatedBlocks___blocks-BlockInfo[](modifiers-final)__fileSizeExcludeBlocksUnderConstruction-long(modifiers-final)__isFileUnderConstruction-boolean(modifiers-final)__offset-long(modifiers-final)__length-long(modifiers-final)__needBlockToken-boolean(modifiers-final)__inSnapshot-boolean(modifiers-final)__feInfo-FileEncryptionInfo__ecPolicy-ErasureCodingPolicy",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
  "functionStartLine": 1472,
  "functionEndLine": 1522,
  "numCommitsSeen": 760,
  "timeTaken": 10151,
  "changeHistory": [
    "d65df0f27395792c6e25f5e03b6ba1765e2ba925",
    "a7f085d6bf499edf23e650a4f7211c53a442da0e",
    "744208431f7365bf054e6b773b86af2583001e1d",
    "f62237bc2f02afe11ce185e13aa51a60b5960037"
  ],
  "changeHistoryShort": {
    "d65df0f27395792c6e25f5e03b6ba1765e2ba925": "Ybodychange",
    "a7f085d6bf499edf23e650a4f7211c53a442da0e": "Ybodychange",
    "744208431f7365bf054e6b773b86af2583001e1d": "Ybodychange",
    "f62237bc2f02afe11ce185e13aa51a60b5960037": "Ymultichange(Yparameterchange,Ybodychange)"
  },
  "changeHistoryDetails": {
    "d65df0f27395792c6e25f5e03b6ba1765e2ba925": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11190. [READ] Namenode support for data stored in external stores.\n",
      "commitDate": "15/12/17 5:51 PM",
      "commitName": "d65df0f27395792c6e25f5e03b6ba1765e2ba925",
      "commitAuthor": "Virajith Jalaparti",
      "commitDateOld": "05/12/17 8:48 PM",
      "commitNameOld": "56b1ff80dd9fbcde8d21a604eff0babb3a16418f",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 9.88,
      "commitsBetweenForRepo": 75,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,51 @@\n   public LocatedBlocks createLocatedBlocks(final BlockInfo[] blocks,\n       final long fileSizeExcludeBlocksUnderConstruction,\n       final boolean isFileUnderConstruction, final long offset,\n       final long length, final boolean needBlockToken,\n       final boolean inSnapshot, FileEncryptionInfo feInfo,\n       ErasureCodingPolicy ecPolicy)\n       throws IOException {\n     assert namesystem.hasReadLock();\n     if (blocks \u003d\u003d null) {\n       return null;\n     } else if (blocks.length \u003d\u003d 0) {\n       return new LocatedBlocks(0, isFileUnderConstruction,\n           Collections.\u003cLocatedBlock\u003e emptyList(), null, false, feInfo, ecPolicy);\n     } else {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"blocks \u003d {}\", java.util.Arrays.asList(blocks));\n       }\n       final AccessMode mode \u003d needBlockToken? BlockTokenIdentifier.AccessMode.READ: null;\n-      final List\u003cLocatedBlock\u003e locatedblocks \u003d createLocatedBlockList(\n-          blocks, offset, length, Integer.MAX_VALUE, mode);\n \n-      final LocatedBlock lastlb;\n-      final boolean isComplete;\n+      LocatedBlockBuilder locatedBlocks \u003d providedStorageMap\n+          .newLocatedBlocks(Integer.MAX_VALUE)\n+          .fileLength(fileSizeExcludeBlocksUnderConstruction)\n+          .lastUC(isFileUnderConstruction)\n+          .encryption(feInfo)\n+          .erasureCoding(ecPolicy);\n+\n+      createLocatedBlockList(locatedBlocks, blocks, offset, length, mode);\n       if (!inSnapshot) {\n         final BlockInfo last \u003d blocks[blocks.length - 1];\n         final long lastPos \u003d last.isComplete()?\n             fileSizeExcludeBlocksUnderConstruction - last.getNumBytes()\n             : fileSizeExcludeBlocksUnderConstruction;\n-        lastlb \u003d createLocatedBlock(last, lastPos, mode);\n-        isComplete \u003d last.isComplete();\n+\n+        locatedBlocks\n+          .lastBlock(createLocatedBlock(locatedBlocks, last, lastPos, mode))\n+          .lastComplete(last.isComplete());\n       } else {\n-        lastlb \u003d createLocatedBlock(blocks,\n-            fileSizeExcludeBlocksUnderConstruction, mode);\n-        isComplete \u003d true;\n+        locatedBlocks\n+          .lastBlock(createLocatedBlock(locatedBlocks, blocks,\n+              fileSizeExcludeBlocksUnderConstruction, mode))\n+          .lastComplete(true);\n       }\n-      LocatedBlocks locations \u003d new LocatedBlocks(\n-          fileSizeExcludeBlocksUnderConstruction,\n-          isFileUnderConstruction, locatedblocks, lastlb, isComplete, feInfo,\n-          ecPolicy);\n+      LocatedBlocks locations \u003d locatedBlocks.build();\n       // Set caching information for the located blocks.\n       CacheManager cm \u003d namesystem.getCacheManager();\n       if (cm !\u003d null) {\n         cm.setCachedLocations(locations);\n       }\n       return locations;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public LocatedBlocks createLocatedBlocks(final BlockInfo[] blocks,\n      final long fileSizeExcludeBlocksUnderConstruction,\n      final boolean isFileUnderConstruction, final long offset,\n      final long length, final boolean needBlockToken,\n      final boolean inSnapshot, FileEncryptionInfo feInfo,\n      ErasureCodingPolicy ecPolicy)\n      throws IOException {\n    assert namesystem.hasReadLock();\n    if (blocks \u003d\u003d null) {\n      return null;\n    } else if (blocks.length \u003d\u003d 0) {\n      return new LocatedBlocks(0, isFileUnderConstruction,\n          Collections.\u003cLocatedBlock\u003e emptyList(), null, false, feInfo, ecPolicy);\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"blocks \u003d {}\", java.util.Arrays.asList(blocks));\n      }\n      final AccessMode mode \u003d needBlockToken? BlockTokenIdentifier.AccessMode.READ: null;\n\n      LocatedBlockBuilder locatedBlocks \u003d providedStorageMap\n          .newLocatedBlocks(Integer.MAX_VALUE)\n          .fileLength(fileSizeExcludeBlocksUnderConstruction)\n          .lastUC(isFileUnderConstruction)\n          .encryption(feInfo)\n          .erasureCoding(ecPolicy);\n\n      createLocatedBlockList(locatedBlocks, blocks, offset, length, mode);\n      if (!inSnapshot) {\n        final BlockInfo last \u003d blocks[blocks.length - 1];\n        final long lastPos \u003d last.isComplete()?\n            fileSizeExcludeBlocksUnderConstruction - last.getNumBytes()\n            : fileSizeExcludeBlocksUnderConstruction;\n\n        locatedBlocks\n          .lastBlock(createLocatedBlock(locatedBlocks, last, lastPos, mode))\n          .lastComplete(last.isComplete());\n      } else {\n        locatedBlocks\n          .lastBlock(createLocatedBlock(locatedBlocks, blocks,\n              fileSizeExcludeBlocksUnderConstruction, mode))\n          .lastComplete(true);\n      }\n      LocatedBlocks locations \u003d locatedBlocks.build();\n      // Set caching information for the located blocks.\n      CacheManager cm \u003d namesystem.getCacheManager();\n      if (cm !\u003d null) {\n        cm.setCachedLocations(locations);\n      }\n      return locations;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "a7f085d6bf499edf23e650a4f7211c53a442da0e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11832. Switch leftover logs to slf4j format in BlockManager.java. Contributed by Hui Xu and Chen Liang.\n",
      "commitDate": "29/05/17 1:30 AM",
      "commitName": "a7f085d6bf499edf23e650a4f7211c53a442da0e",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "25/05/17 7:35 AM",
      "commitNameOld": "2e41f8803dd46d1bab16c1b206c71be72ea260a1",
      "commitAuthorOld": "Brahma Reddy Battula",
      "daysBetweenCommits": 3.75,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n   public LocatedBlocks createLocatedBlocks(final BlockInfo[] blocks,\n       final long fileSizeExcludeBlocksUnderConstruction,\n       final boolean isFileUnderConstruction, final long offset,\n       final long length, final boolean needBlockToken,\n       final boolean inSnapshot, FileEncryptionInfo feInfo,\n       ErasureCodingPolicy ecPolicy)\n       throws IOException {\n     assert namesystem.hasReadLock();\n     if (blocks \u003d\u003d null) {\n       return null;\n     } else if (blocks.length \u003d\u003d 0) {\n       return new LocatedBlocks(0, isFileUnderConstruction,\n           Collections.\u003cLocatedBlock\u003e emptyList(), null, false, feInfo, ecPolicy);\n     } else {\n       if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"blocks \u003d \" + java.util.Arrays.asList(blocks));\n+        LOG.debug(\"blocks \u003d {}\", java.util.Arrays.asList(blocks));\n       }\n       final AccessMode mode \u003d needBlockToken? BlockTokenIdentifier.AccessMode.READ: null;\n       final List\u003cLocatedBlock\u003e locatedblocks \u003d createLocatedBlockList(\n           blocks, offset, length, Integer.MAX_VALUE, mode);\n \n       final LocatedBlock lastlb;\n       final boolean isComplete;\n       if (!inSnapshot) {\n         final BlockInfo last \u003d blocks[blocks.length - 1];\n         final long lastPos \u003d last.isComplete()?\n             fileSizeExcludeBlocksUnderConstruction - last.getNumBytes()\n             : fileSizeExcludeBlocksUnderConstruction;\n         lastlb \u003d createLocatedBlock(last, lastPos, mode);\n         isComplete \u003d last.isComplete();\n       } else {\n         lastlb \u003d createLocatedBlock(blocks,\n             fileSizeExcludeBlocksUnderConstruction, mode);\n         isComplete \u003d true;\n       }\n       LocatedBlocks locations \u003d new LocatedBlocks(\n           fileSizeExcludeBlocksUnderConstruction,\n           isFileUnderConstruction, locatedblocks, lastlb, isComplete, feInfo,\n           ecPolicy);\n       // Set caching information for the located blocks.\n       CacheManager cm \u003d namesystem.getCacheManager();\n       if (cm !\u003d null) {\n         cm.setCachedLocations(locations);\n       }\n       return locations;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public LocatedBlocks createLocatedBlocks(final BlockInfo[] blocks,\n      final long fileSizeExcludeBlocksUnderConstruction,\n      final boolean isFileUnderConstruction, final long offset,\n      final long length, final boolean needBlockToken,\n      final boolean inSnapshot, FileEncryptionInfo feInfo,\n      ErasureCodingPolicy ecPolicy)\n      throws IOException {\n    assert namesystem.hasReadLock();\n    if (blocks \u003d\u003d null) {\n      return null;\n    } else if (blocks.length \u003d\u003d 0) {\n      return new LocatedBlocks(0, isFileUnderConstruction,\n          Collections.\u003cLocatedBlock\u003e emptyList(), null, false, feInfo, ecPolicy);\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"blocks \u003d {}\", java.util.Arrays.asList(blocks));\n      }\n      final AccessMode mode \u003d needBlockToken? BlockTokenIdentifier.AccessMode.READ: null;\n      final List\u003cLocatedBlock\u003e locatedblocks \u003d createLocatedBlockList(\n          blocks, offset, length, Integer.MAX_VALUE, mode);\n\n      final LocatedBlock lastlb;\n      final boolean isComplete;\n      if (!inSnapshot) {\n        final BlockInfo last \u003d blocks[blocks.length - 1];\n        final long lastPos \u003d last.isComplete()?\n            fileSizeExcludeBlocksUnderConstruction - last.getNumBytes()\n            : fileSizeExcludeBlocksUnderConstruction;\n        lastlb \u003d createLocatedBlock(last, lastPos, mode);\n        isComplete \u003d last.isComplete();\n      } else {\n        lastlb \u003d createLocatedBlock(blocks,\n            fileSizeExcludeBlocksUnderConstruction, mode);\n        isComplete \u003d true;\n      }\n      LocatedBlocks locations \u003d new LocatedBlocks(\n          fileSizeExcludeBlocksUnderConstruction,\n          isFileUnderConstruction, locatedblocks, lastlb, isComplete, feInfo,\n          ecPolicy);\n      // Set caching information for the located blocks.\n      CacheManager cm \u003d namesystem.getCacheManager();\n      if (cm !\u003d null) {\n        cm.setCachedLocations(locations);\n      }\n      return locations;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "744208431f7365bf054e6b773b86af2583001e1d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10940. Reduce performance penalty of block caching when not used. Contributed by Daryn Sharp.\n",
      "commitDate": "03/10/16 9:27 AM",
      "commitName": "744208431f7365bf054e6b773b86af2583001e1d",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "23/09/16 10:37 AM",
      "commitNameOld": "a5bb88c8e0fd4bd19b6d377fecbe1d2d441514f6",
      "commitAuthorOld": "Konstantin V Shvachko",
      "daysBetweenCommits": 9.95,
      "commitsBetweenForRepo": 65,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,47 @@\n   public LocatedBlocks createLocatedBlocks(final BlockInfo[] blocks,\n       final long fileSizeExcludeBlocksUnderConstruction,\n       final boolean isFileUnderConstruction, final long offset,\n       final long length, final boolean needBlockToken,\n       final boolean inSnapshot, FileEncryptionInfo feInfo,\n       ErasureCodingPolicy ecPolicy)\n       throws IOException {\n     assert namesystem.hasReadLock();\n     if (blocks \u003d\u003d null) {\n       return null;\n     } else if (blocks.length \u003d\u003d 0) {\n       return new LocatedBlocks(0, isFileUnderConstruction,\n           Collections.\u003cLocatedBlock\u003e emptyList(), null, false, feInfo, ecPolicy);\n     } else {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"blocks \u003d \" + java.util.Arrays.asList(blocks));\n       }\n       final AccessMode mode \u003d needBlockToken? BlockTokenIdentifier.AccessMode.READ: null;\n       final List\u003cLocatedBlock\u003e locatedblocks \u003d createLocatedBlockList(\n           blocks, offset, length, Integer.MAX_VALUE, mode);\n \n       final LocatedBlock lastlb;\n       final boolean isComplete;\n       if (!inSnapshot) {\n         final BlockInfo last \u003d blocks[blocks.length - 1];\n         final long lastPos \u003d last.isComplete()?\n             fileSizeExcludeBlocksUnderConstruction - last.getNumBytes()\n             : fileSizeExcludeBlocksUnderConstruction;\n         lastlb \u003d createLocatedBlock(last, lastPos, mode);\n         isComplete \u003d last.isComplete();\n       } else {\n         lastlb \u003d createLocatedBlock(blocks,\n             fileSizeExcludeBlocksUnderConstruction, mode);\n         isComplete \u003d true;\n       }\n-      return new LocatedBlocks(fileSizeExcludeBlocksUnderConstruction,\n+      LocatedBlocks locations \u003d new LocatedBlocks(\n+          fileSizeExcludeBlocksUnderConstruction,\n           isFileUnderConstruction, locatedblocks, lastlb, isComplete, feInfo,\n           ecPolicy);\n+      // Set caching information for the located blocks.\n+      CacheManager cm \u003d namesystem.getCacheManager();\n+      if (cm !\u003d null) {\n+        cm.setCachedLocations(locations);\n+      }\n+      return locations;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public LocatedBlocks createLocatedBlocks(final BlockInfo[] blocks,\n      final long fileSizeExcludeBlocksUnderConstruction,\n      final boolean isFileUnderConstruction, final long offset,\n      final long length, final boolean needBlockToken,\n      final boolean inSnapshot, FileEncryptionInfo feInfo,\n      ErasureCodingPolicy ecPolicy)\n      throws IOException {\n    assert namesystem.hasReadLock();\n    if (blocks \u003d\u003d null) {\n      return null;\n    } else if (blocks.length \u003d\u003d 0) {\n      return new LocatedBlocks(0, isFileUnderConstruction,\n          Collections.\u003cLocatedBlock\u003e emptyList(), null, false, feInfo, ecPolicy);\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"blocks \u003d \" + java.util.Arrays.asList(blocks));\n      }\n      final AccessMode mode \u003d needBlockToken? BlockTokenIdentifier.AccessMode.READ: null;\n      final List\u003cLocatedBlock\u003e locatedblocks \u003d createLocatedBlockList(\n          blocks, offset, length, Integer.MAX_VALUE, mode);\n\n      final LocatedBlock lastlb;\n      final boolean isComplete;\n      if (!inSnapshot) {\n        final BlockInfo last \u003d blocks[blocks.length - 1];\n        final long lastPos \u003d last.isComplete()?\n            fileSizeExcludeBlocksUnderConstruction - last.getNumBytes()\n            : fileSizeExcludeBlocksUnderConstruction;\n        lastlb \u003d createLocatedBlock(last, lastPos, mode);\n        isComplete \u003d last.isComplete();\n      } else {\n        lastlb \u003d createLocatedBlock(blocks,\n            fileSizeExcludeBlocksUnderConstruction, mode);\n        isComplete \u003d true;\n      }\n      LocatedBlocks locations \u003d new LocatedBlocks(\n          fileSizeExcludeBlocksUnderConstruction,\n          isFileUnderConstruction, locatedblocks, lastlb, isComplete, feInfo,\n          ecPolicy);\n      // Set caching information for the located blocks.\n      CacheManager cm \u003d namesystem.getCacheManager();\n      if (cm !\u003d null) {\n        cm.setCachedLocations(locations);\n      }\n      return locations;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "f62237bc2f02afe11ce185e13aa51a60b5960037": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-8833. Erasure coding: store EC schema and cell size in INodeFile and eliminate notion of EC zones.\n",
      "commitDate": "09/09/15 11:07 PM",
      "commitName": "f62237bc2f02afe11ce185e13aa51a60b5960037",
      "commitAuthor": "Zhe Zhang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-8833. Erasure coding: store EC schema and cell size in INodeFile and eliminate notion of EC zones.\n",
          "commitDate": "09/09/15 11:07 PM",
          "commitName": "f62237bc2f02afe11ce185e13aa51a60b5960037",
          "commitAuthor": "Zhe Zhang",
          "commitDateOld": "01/09/15 2:48 PM",
          "commitNameOld": "53358fe680a11c1b66a7f60733d11c1f4efe0232",
          "commitAuthorOld": "",
          "daysBetweenCommits": 8.35,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,40 @@\n   public LocatedBlocks createLocatedBlocks(final BlockInfo[] blocks,\n       final long fileSizeExcludeBlocksUnderConstruction,\n       final boolean isFileUnderConstruction, final long offset,\n       final long length, final boolean needBlockToken,\n       final boolean inSnapshot, FileEncryptionInfo feInfo,\n-      ErasureCodingZone ecZone)\n+      ErasureCodingPolicy ecPolicy)\n       throws IOException {\n     assert namesystem.hasReadLock();\n-    final ErasureCodingPolicy ecPolicy \u003d ecZone !\u003d null ? ecZone\n-        .getErasureCodingPolicy() : null;\n     if (blocks \u003d\u003d null) {\n       return null;\n     } else if (blocks.length \u003d\u003d 0) {\n       return new LocatedBlocks(0, isFileUnderConstruction,\n           Collections.\u003cLocatedBlock\u003e emptyList(), null, false, feInfo, ecPolicy);\n     } else {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"blocks \u003d \" + java.util.Arrays.asList(blocks));\n       }\n       final AccessMode mode \u003d needBlockToken? BlockTokenIdentifier.AccessMode.READ: null;\n       final List\u003cLocatedBlock\u003e locatedblocks \u003d createLocatedBlockList(\n           blocks, offset, length, Integer.MAX_VALUE, mode);\n \n       final LocatedBlock lastlb;\n       final boolean isComplete;\n       if (!inSnapshot) {\n         final BlockInfo last \u003d blocks[blocks.length - 1];\n         final long lastPos \u003d last.isComplete()?\n             fileSizeExcludeBlocksUnderConstruction - last.getNumBytes()\n             : fileSizeExcludeBlocksUnderConstruction;\n         lastlb \u003d createLocatedBlock(last, lastPos, mode);\n         isComplete \u003d last.isComplete();\n       } else {\n         lastlb \u003d createLocatedBlock(blocks,\n             fileSizeExcludeBlocksUnderConstruction, mode);\n         isComplete \u003d true;\n       }\n       return new LocatedBlocks(fileSizeExcludeBlocksUnderConstruction,\n           isFileUnderConstruction, locatedblocks, lastlb, isComplete, feInfo,\n           ecPolicy);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public LocatedBlocks createLocatedBlocks(final BlockInfo[] blocks,\n      final long fileSizeExcludeBlocksUnderConstruction,\n      final boolean isFileUnderConstruction, final long offset,\n      final long length, final boolean needBlockToken,\n      final boolean inSnapshot, FileEncryptionInfo feInfo,\n      ErasureCodingPolicy ecPolicy)\n      throws IOException {\n    assert namesystem.hasReadLock();\n    if (blocks \u003d\u003d null) {\n      return null;\n    } else if (blocks.length \u003d\u003d 0) {\n      return new LocatedBlocks(0, isFileUnderConstruction,\n          Collections.\u003cLocatedBlock\u003e emptyList(), null, false, feInfo, ecPolicy);\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"blocks \u003d \" + java.util.Arrays.asList(blocks));\n      }\n      final AccessMode mode \u003d needBlockToken? BlockTokenIdentifier.AccessMode.READ: null;\n      final List\u003cLocatedBlock\u003e locatedblocks \u003d createLocatedBlockList(\n          blocks, offset, length, Integer.MAX_VALUE, mode);\n\n      final LocatedBlock lastlb;\n      final boolean isComplete;\n      if (!inSnapshot) {\n        final BlockInfo last \u003d blocks[blocks.length - 1];\n        final long lastPos \u003d last.isComplete()?\n            fileSizeExcludeBlocksUnderConstruction - last.getNumBytes()\n            : fileSizeExcludeBlocksUnderConstruction;\n        lastlb \u003d createLocatedBlock(last, lastPos, mode);\n        isComplete \u003d last.isComplete();\n      } else {\n        lastlb \u003d createLocatedBlock(blocks,\n            fileSizeExcludeBlocksUnderConstruction, mode);\n        isComplete \u003d true;\n      }\n      return new LocatedBlocks(fileSizeExcludeBlocksUnderConstruction,\n          isFileUnderConstruction, locatedblocks, lastlb, isComplete, feInfo,\n          ecPolicy);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {
            "oldValue": "[blocks-BlockInfo[](modifiers-final), fileSizeExcludeBlocksUnderConstruction-long(modifiers-final), isFileUnderConstruction-boolean(modifiers-final), offset-long(modifiers-final), length-long(modifiers-final), needBlockToken-boolean(modifiers-final), inSnapshot-boolean(modifiers-final), feInfo-FileEncryptionInfo, ecZone-ErasureCodingZone]",
            "newValue": "[blocks-BlockInfo[](modifiers-final), fileSizeExcludeBlocksUnderConstruction-long(modifiers-final), isFileUnderConstruction-boolean(modifiers-final), offset-long(modifiers-final), length-long(modifiers-final), needBlockToken-boolean(modifiers-final), inSnapshot-boolean(modifiers-final), feInfo-FileEncryptionInfo, ecPolicy-ErasureCodingPolicy]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8833. Erasure coding: store EC schema and cell size in INodeFile and eliminate notion of EC zones.\n",
          "commitDate": "09/09/15 11:07 PM",
          "commitName": "f62237bc2f02afe11ce185e13aa51a60b5960037",
          "commitAuthor": "Zhe Zhang",
          "commitDateOld": "01/09/15 2:48 PM",
          "commitNameOld": "53358fe680a11c1b66a7f60733d11c1f4efe0232",
          "commitAuthorOld": "",
          "daysBetweenCommits": 8.35,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,40 @@\n   public LocatedBlocks createLocatedBlocks(final BlockInfo[] blocks,\n       final long fileSizeExcludeBlocksUnderConstruction,\n       final boolean isFileUnderConstruction, final long offset,\n       final long length, final boolean needBlockToken,\n       final boolean inSnapshot, FileEncryptionInfo feInfo,\n-      ErasureCodingZone ecZone)\n+      ErasureCodingPolicy ecPolicy)\n       throws IOException {\n     assert namesystem.hasReadLock();\n-    final ErasureCodingPolicy ecPolicy \u003d ecZone !\u003d null ? ecZone\n-        .getErasureCodingPolicy() : null;\n     if (blocks \u003d\u003d null) {\n       return null;\n     } else if (blocks.length \u003d\u003d 0) {\n       return new LocatedBlocks(0, isFileUnderConstruction,\n           Collections.\u003cLocatedBlock\u003e emptyList(), null, false, feInfo, ecPolicy);\n     } else {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"blocks \u003d \" + java.util.Arrays.asList(blocks));\n       }\n       final AccessMode mode \u003d needBlockToken? BlockTokenIdentifier.AccessMode.READ: null;\n       final List\u003cLocatedBlock\u003e locatedblocks \u003d createLocatedBlockList(\n           blocks, offset, length, Integer.MAX_VALUE, mode);\n \n       final LocatedBlock lastlb;\n       final boolean isComplete;\n       if (!inSnapshot) {\n         final BlockInfo last \u003d blocks[blocks.length - 1];\n         final long lastPos \u003d last.isComplete()?\n             fileSizeExcludeBlocksUnderConstruction - last.getNumBytes()\n             : fileSizeExcludeBlocksUnderConstruction;\n         lastlb \u003d createLocatedBlock(last, lastPos, mode);\n         isComplete \u003d last.isComplete();\n       } else {\n         lastlb \u003d createLocatedBlock(blocks,\n             fileSizeExcludeBlocksUnderConstruction, mode);\n         isComplete \u003d true;\n       }\n       return new LocatedBlocks(fileSizeExcludeBlocksUnderConstruction,\n           isFileUnderConstruction, locatedblocks, lastlb, isComplete, feInfo,\n           ecPolicy);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public LocatedBlocks createLocatedBlocks(final BlockInfo[] blocks,\n      final long fileSizeExcludeBlocksUnderConstruction,\n      final boolean isFileUnderConstruction, final long offset,\n      final long length, final boolean needBlockToken,\n      final boolean inSnapshot, FileEncryptionInfo feInfo,\n      ErasureCodingPolicy ecPolicy)\n      throws IOException {\n    assert namesystem.hasReadLock();\n    if (blocks \u003d\u003d null) {\n      return null;\n    } else if (blocks.length \u003d\u003d 0) {\n      return new LocatedBlocks(0, isFileUnderConstruction,\n          Collections.\u003cLocatedBlock\u003e emptyList(), null, false, feInfo, ecPolicy);\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"blocks \u003d \" + java.util.Arrays.asList(blocks));\n      }\n      final AccessMode mode \u003d needBlockToken? BlockTokenIdentifier.AccessMode.READ: null;\n      final List\u003cLocatedBlock\u003e locatedblocks \u003d createLocatedBlockList(\n          blocks, offset, length, Integer.MAX_VALUE, mode);\n\n      final LocatedBlock lastlb;\n      final boolean isComplete;\n      if (!inSnapshot) {\n        final BlockInfo last \u003d blocks[blocks.length - 1];\n        final long lastPos \u003d last.isComplete()?\n            fileSizeExcludeBlocksUnderConstruction - last.getNumBytes()\n            : fileSizeExcludeBlocksUnderConstruction;\n        lastlb \u003d createLocatedBlock(last, lastPos, mode);\n        isComplete \u003d last.isComplete();\n      } else {\n        lastlb \u003d createLocatedBlock(blocks,\n            fileSizeExcludeBlocksUnderConstruction, mode);\n        isComplete \u003d true;\n      }\n      return new LocatedBlocks(fileSizeExcludeBlocksUnderConstruction,\n          isFileUnderConstruction, locatedblocks, lastlb, isComplete, feInfo,\n          ecPolicy);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {}
        }
      ]
    }
  }
}