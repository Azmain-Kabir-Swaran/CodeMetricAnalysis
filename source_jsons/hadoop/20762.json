{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JobResourceUploader.java",
  "functionName": "explorePath",
  "functionId": "explorePath___job-Configuration__p-Path__limitChecker-LimitChecker__statCache-Map__URI,FileStatus__",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobResourceUploader.java",
  "functionStartLine": 619,
  "functionEndLine": 639,
  "numCommitsSeen": 17,
  "timeTaken": 1039,
  "changeHistory": [
    "f80a7298325a4626638ee24467e2012442e480d4"
  ],
  "changeHistoryShort": {
    "f80a7298325a4626638ee24467e2012442e480d4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f80a7298325a4626638ee24467e2012442e480d4": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-6690. Limit the number of resources a single map reduce job can submit for localization. Contributed by Chris Trezzo\n",
      "commitDate": "17/08/16 9:22 AM",
      "commitName": "f80a7298325a4626638ee24467e2012442e480d4",
      "commitAuthor": "Jason Lowe",
      "diff": "@@ -0,0 +1,21 @@\n+  private void explorePath(Configuration job, Path p,\n+      LimitChecker limitChecker, Map\u003cURI, FileStatus\u003e statCache)\n+      throws IOException {\n+    Path pathWithScheme \u003d p;\n+    if (!pathWithScheme.toUri().isAbsolute()) {\n+      // the path does not have a scheme, so we assume it is a path from the\n+      // local filesystem\n+      FileSystem localFs \u003d FileSystem.getLocal(job);\n+      pathWithScheme \u003d localFs.makeQualified(p);\n+    }\n+    FileStatus status \u003d getFileStatus(statCache, job, pathWithScheme);\n+    if (status.isDirectory()) {\n+      FileStatus[] statusArray \u003d\n+          pathWithScheme.getFileSystem(job).listStatus(pathWithScheme);\n+      for (FileStatus s : statusArray) {\n+        explorePath(job, s.getPath(), limitChecker, statCache);\n+      }\n+    } else {\n+      limitChecker.addFile(pathWithScheme, status.getLen());\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void explorePath(Configuration job, Path p,\n      LimitChecker limitChecker, Map\u003cURI, FileStatus\u003e statCache)\n      throws IOException {\n    Path pathWithScheme \u003d p;\n    if (!pathWithScheme.toUri().isAbsolute()) {\n      // the path does not have a scheme, so we assume it is a path from the\n      // local filesystem\n      FileSystem localFs \u003d FileSystem.getLocal(job);\n      pathWithScheme \u003d localFs.makeQualified(p);\n    }\n    FileStatus status \u003d getFileStatus(statCache, job, pathWithScheme);\n    if (status.isDirectory()) {\n      FileStatus[] statusArray \u003d\n          pathWithScheme.getFileSystem(job).listStatus(pathWithScheme);\n      for (FileStatus s : statusArray) {\n        explorePath(job, s.getPath(), limitChecker, statCache);\n      }\n    } else {\n      limitChecker.addFile(pathWithScheme, status.getLen());\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobResourceUploader.java"
    }
  }
}