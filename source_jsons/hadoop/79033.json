{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HarFileSystem.java",
  "functionName": "decodeHarURI",
  "functionId": "decodeHarURI___rawURI-URI__conf-Configuration",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/HarFileSystem.java",
  "functionStartLine": 217,
  "functionEndLine": 253,
  "numCommitsSeen": 36,
  "timeTaken": 5418,
  "changeHistory": [
    "bbd6a3277678a60d472e76a207f25a916220946c",
    "4e9c652c5200d5bf296a5a776d12b6ca4b2d5fab",
    "9b252b39df7a67064346c3edea02f71ab1434abb",
    "909176c1fc21501d9cd2b2d70528cca2fa02e68b",
    "0201be46c298e94176ec6297e9d9cdba3afc2bbd",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "bbd6a3277678a60d472e76a207f25a916220946c": "Ybodychange",
    "4e9c652c5200d5bf296a5a776d12b6ca4b2d5fab": "Ybodychange",
    "9b252b39df7a67064346c3edea02f71ab1434abb": "Ybodychange",
    "909176c1fc21501d9cd2b2d70528cca2fa02e68b": "Ybodychange",
    "0201be46c298e94176ec6297e9d9cdba3afc2bbd": "Yfilerename",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bbd6a3277678a60d472e76a207f25a916220946c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10482. Fix various findbugs warnings in hadoop-common. Contributed by Haohui Mai.\n",
      "commitDate": "10/12/14 12:44 PM",
      "commitName": "bbd6a3277678a60d472e76a207f25a916220946c",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "22/05/14 11:17 AM",
      "commitNameOld": "3671a5e16fbddbe5a0516289ce98e1305e02291c",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 202.1,
      "commitsBetweenForRepo": 1742,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,37 @@\n   private URI decodeHarURI(URI rawURI, Configuration conf) throws IOException {\n     String tmpAuth \u003d rawURI.getAuthority();\n     //we are using the default file\n     //system in the config \n     //so create a underlying uri and \n     //return it\n     if (tmpAuth \u003d\u003d null) {\n       //create a path \n       return FileSystem.getDefaultUri(conf);\n     }\n     String authority \u003d rawURI.getAuthority();\n-    if (authority \u003d\u003d null) {\n-      throw new IOException(\"URI: \" + rawURI\n-          + \" is an invalid Har URI since authority\u003d\u003dnull.\"\n-          + \"  Expecting har://\u003cscheme\u003e-\u003chost\u003e/\u003cpath\u003e.\");\n-    }\n- \n+\n     int i \u003d authority.indexOf(\u0027-\u0027);\n     if (i \u003c 0) {\n       throw new IOException(\"URI: \" + rawURI\n           + \" is an invalid Har URI since \u0027-\u0027 not found.\"\n           + \"  Expecting har://\u003cscheme\u003e-\u003chost\u003e/\u003cpath\u003e.\");\n     }\n  \n     if (rawURI.getQuery() !\u003d null) {\n       // query component not allowed\n       throw new IOException(\"query component in Path not supported  \" + rawURI);\n     }\n  \n     URI tmp;\n     try {\n       // convert \u003cscheme\u003e-\u003chost\u003e to \u003cscheme\u003e://\u003chost\u003e\n       URI baseUri \u003d new URI(authority.replaceFirst(\"-\", \"://\"));\n  \n       tmp \u003d new URI(baseUri.getScheme(), baseUri.getAuthority(),\n             rawURI.getPath(), rawURI.getQuery(), rawURI.getFragment());\n     } catch (URISyntaxException e) {\n       throw new IOException(\"URI: \" + rawURI\n           + \" is an invalid Har URI. Expecting har://\u003cscheme\u003e-\u003chost\u003e/\u003cpath\u003e.\");\n     }\n     return tmp;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private URI decodeHarURI(URI rawURI, Configuration conf) throws IOException {\n    String tmpAuth \u003d rawURI.getAuthority();\n    //we are using the default file\n    //system in the config \n    //so create a underlying uri and \n    //return it\n    if (tmpAuth \u003d\u003d null) {\n      //create a path \n      return FileSystem.getDefaultUri(conf);\n    }\n    String authority \u003d rawURI.getAuthority();\n\n    int i \u003d authority.indexOf(\u0027-\u0027);\n    if (i \u003c 0) {\n      throw new IOException(\"URI: \" + rawURI\n          + \" is an invalid Har URI since \u0027-\u0027 not found.\"\n          + \"  Expecting har://\u003cscheme\u003e-\u003chost\u003e/\u003cpath\u003e.\");\n    }\n \n    if (rawURI.getQuery() !\u003d null) {\n      // query component not allowed\n      throw new IOException(\"query component in Path not supported  \" + rawURI);\n    }\n \n    URI tmp;\n    try {\n      // convert \u003cscheme\u003e-\u003chost\u003e to \u003cscheme\u003e://\u003chost\u003e\n      URI baseUri \u003d new URI(authority.replaceFirst(\"-\", \"://\"));\n \n      tmp \u003d new URI(baseUri.getScheme(), baseUri.getAuthority(),\n            rawURI.getPath(), rawURI.getQuery(), rawURI.getFragment());\n    } catch (URISyntaxException e) {\n      throw new IOException(\"URI: \" + rawURI\n          + \" is an invalid Har URI. Expecting har://\u003cscheme\u003e-\u003chost\u003e/\u003cpath\u003e.\");\n    }\n    return tmp;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/HarFileSystem.java",
      "extendedDetails": {}
    },
    "4e9c652c5200d5bf296a5a776d12b6ca4b2d5fab": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10003. HarFileSystem.listLocatedStatus() fails. Contributed by Jason Dere and suresh.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1528256 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/10/13 3:57 PM",
      "commitName": "4e9c652c5200d5bf296a5a776d12b6ca4b2d5fab",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "24/09/13 10:17 PM",
      "commitNameOld": "43bb7c8d529364af325be7fee7442997d807b11a",
      "commitAuthorOld": "Ivan Mitic",
      "daysBetweenCommits": 6.74,
      "commitsBetweenForRepo": 50,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,42 @@\n   private URI decodeHarURI(URI rawURI, Configuration conf) throws IOException {\n     String tmpAuth \u003d rawURI.getAuthority();\n     //we are using the default file\n     //system in the config \n     //so create a underlying uri and \n     //return it\n     if (tmpAuth \u003d\u003d null) {\n       //create a path \n       return FileSystem.getDefaultUri(conf);\n     }\n     String authority \u003d rawURI.getAuthority();\n     if (authority \u003d\u003d null) {\n       throw new IOException(\"URI: \" + rawURI\n           + \" is an invalid Har URI since authority\u003d\u003dnull.\"\n           + \"  Expecting har://\u003cscheme\u003e-\u003chost\u003e/\u003cpath\u003e.\");\n     }\n  \n     int i \u003d authority.indexOf(\u0027-\u0027);\n     if (i \u003c 0) {\n       throw new IOException(\"URI: \" + rawURI\n           + \" is an invalid Har URI since \u0027-\u0027 not found.\"\n           + \"  Expecting har://\u003cscheme\u003e-\u003chost\u003e/\u003cpath\u003e.\");\n     }\n  \n     if (rawURI.getQuery() !\u003d null) {\n       // query component not allowed\n       throw new IOException(\"query component in Path not supported  \" + rawURI);\n     }\n  \n-    URI tmp \u003d null;\n- \n+    URI tmp;\n     try {\n       // convert \u003cscheme\u003e-\u003chost\u003e to \u003cscheme\u003e://\u003chost\u003e\n       URI baseUri \u003d new URI(authority.replaceFirst(\"-\", \"://\"));\n  \n       tmp \u003d new URI(baseUri.getScheme(), baseUri.getAuthority(),\n             rawURI.getPath(), rawURI.getQuery(), rawURI.getFragment());\n     } catch (URISyntaxException e) {\n       throw new IOException(\"URI: \" + rawURI\n           + \" is an invalid Har URI. Expecting har://\u003cscheme\u003e-\u003chost\u003e/\u003cpath\u003e.\");\n     }\n     return tmp;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private URI decodeHarURI(URI rawURI, Configuration conf) throws IOException {\n    String tmpAuth \u003d rawURI.getAuthority();\n    //we are using the default file\n    //system in the config \n    //so create a underlying uri and \n    //return it\n    if (tmpAuth \u003d\u003d null) {\n      //create a path \n      return FileSystem.getDefaultUri(conf);\n    }\n    String authority \u003d rawURI.getAuthority();\n    if (authority \u003d\u003d null) {\n      throw new IOException(\"URI: \" + rawURI\n          + \" is an invalid Har URI since authority\u003d\u003dnull.\"\n          + \"  Expecting har://\u003cscheme\u003e-\u003chost\u003e/\u003cpath\u003e.\");\n    }\n \n    int i \u003d authority.indexOf(\u0027-\u0027);\n    if (i \u003c 0) {\n      throw new IOException(\"URI: \" + rawURI\n          + \" is an invalid Har URI since \u0027-\u0027 not found.\"\n          + \"  Expecting har://\u003cscheme\u003e-\u003chost\u003e/\u003cpath\u003e.\");\n    }\n \n    if (rawURI.getQuery() !\u003d null) {\n      // query component not allowed\n      throw new IOException(\"query component in Path not supported  \" + rawURI);\n    }\n \n    URI tmp;\n    try {\n      // convert \u003cscheme\u003e-\u003chost\u003e to \u003cscheme\u003e://\u003chost\u003e\n      URI baseUri \u003d new URI(authority.replaceFirst(\"-\", \"://\"));\n \n      tmp \u003d new URI(baseUri.getScheme(), baseUri.getAuthority(),\n            rawURI.getPath(), rawURI.getQuery(), rawURI.getFragment());\n    } catch (URISyntaxException e) {\n      throw new IOException(\"URI: \" + rawURI\n          + \" is an invalid Har URI. Expecting har://\u003cscheme\u003e-\u003chost\u003e/\u003cpath\u003e.\");\n    }\n    return tmp;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/HarFileSystem.java",
      "extendedDetails": {}
    },
    "9b252b39df7a67064346c3edea02f71ab1434abb": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8440. HarFileSystem.decodeHarURI fails for URIs whose host contains numbers. Contributed by Ivan Mitic.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1501424 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/07/13 11:22 AM",
      "commitName": "9b252b39df7a67064346c3edea02f71ab1434abb",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "05/02/13 1:23 PM",
      "commitNameOld": "0b565a967d7abb1bdab9827f1209118bf17e4471",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 153.87,
      "commitsBetweenForRepo": 897,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,43 @@\n   private URI decodeHarURI(URI rawURI, Configuration conf) throws IOException {\n     String tmpAuth \u003d rawURI.getAuthority();\n     //we are using the default file\n     //system in the config \n     //so create a underlying uri and \n     //return it\n     if (tmpAuth \u003d\u003d null) {\n       //create a path \n       return FileSystem.getDefaultUri(conf);\n     }\n-    String host \u003d rawURI.getHost();\n-    if (host \u003d\u003d null) {\n+    String authority \u003d rawURI.getAuthority();\n+    if (authority \u003d\u003d null) {\n       throw new IOException(\"URI: \" + rawURI\n-          + \" is an invalid Har URI since host\u003d\u003dnull.\"\n+          + \" is an invalid Har URI since authority\u003d\u003dnull.\"\n           + \"  Expecting har://\u003cscheme\u003e-\u003chost\u003e/\u003cpath\u003e.\");\n     }\n-    int i \u003d host.indexOf(\u0027-\u0027);\n+ \n+    int i \u003d authority.indexOf(\u0027-\u0027);\n     if (i \u003c 0) {\n       throw new IOException(\"URI: \" + rawURI\n           + \" is an invalid Har URI since \u0027-\u0027 not found.\"\n           + \"  Expecting har://\u003cscheme\u003e-\u003chost\u003e/\u003cpath\u003e.\");\n     }\n-    final String underLyingScheme \u003d host.substring(0, i);\n-    i++;\n-    final String underLyingHost \u003d i \u003d\u003d host.length()? null: host.substring(i);\n-    int underLyingPort \u003d rawURI.getPort();\n-    String auth \u003d (underLyingHost \u003d\u003d null \u0026\u0026 underLyingPort \u003d\u003d -1)?\n-                  null:(underLyingHost+\n-                      (underLyingPort \u003d\u003d -1 ? \"\" : \":\"+underLyingPort));\n-    URI tmp \u003d null;\n+ \n     if (rawURI.getQuery() !\u003d null) {\n       // query component not allowed\n       throw new IOException(\"query component in Path not supported  \" + rawURI);\n     }\n+ \n+    URI tmp \u003d null;\n+ \n     try {\n-      tmp \u003d new URI(underLyingScheme, auth, rawURI.getPath(), \n-            rawURI.getQuery(), rawURI.getFragment());\n+      // convert \u003cscheme\u003e-\u003chost\u003e to \u003cscheme\u003e://\u003chost\u003e\n+      URI baseUri \u003d new URI(authority.replaceFirst(\"-\", \"://\"));\n+ \n+      tmp \u003d new URI(baseUri.getScheme(), baseUri.getAuthority(),\n+            rawURI.getPath(), rawURI.getQuery(), rawURI.getFragment());\n     } catch (URISyntaxException e) {\n-        // do nothing should not happen\n+      throw new IOException(\"URI: \" + rawURI\n+          + \" is an invalid Har URI. Expecting har://\u003cscheme\u003e-\u003chost\u003e/\u003cpath\u003e.\");\n     }\n     return tmp;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private URI decodeHarURI(URI rawURI, Configuration conf) throws IOException {\n    String tmpAuth \u003d rawURI.getAuthority();\n    //we are using the default file\n    //system in the config \n    //so create a underlying uri and \n    //return it\n    if (tmpAuth \u003d\u003d null) {\n      //create a path \n      return FileSystem.getDefaultUri(conf);\n    }\n    String authority \u003d rawURI.getAuthority();\n    if (authority \u003d\u003d null) {\n      throw new IOException(\"URI: \" + rawURI\n          + \" is an invalid Har URI since authority\u003d\u003dnull.\"\n          + \"  Expecting har://\u003cscheme\u003e-\u003chost\u003e/\u003cpath\u003e.\");\n    }\n \n    int i \u003d authority.indexOf(\u0027-\u0027);\n    if (i \u003c 0) {\n      throw new IOException(\"URI: \" + rawURI\n          + \" is an invalid Har URI since \u0027-\u0027 not found.\"\n          + \"  Expecting har://\u003cscheme\u003e-\u003chost\u003e/\u003cpath\u003e.\");\n    }\n \n    if (rawURI.getQuery() !\u003d null) {\n      // query component not allowed\n      throw new IOException(\"query component in Path not supported  \" + rawURI);\n    }\n \n    URI tmp \u003d null;\n \n    try {\n      // convert \u003cscheme\u003e-\u003chost\u003e to \u003cscheme\u003e://\u003chost\u003e\n      URI baseUri \u003d new URI(authority.replaceFirst(\"-\", \"://\"));\n \n      tmp \u003d new URI(baseUri.getScheme(), baseUri.getAuthority(),\n            rawURI.getPath(), rawURI.getQuery(), rawURI.getFragment());\n    } catch (URISyntaxException e) {\n      throw new IOException(\"URI: \" + rawURI\n          + \" is an invalid Har URI. Expecting har://\u003cscheme\u003e-\u003chost\u003e/\u003cpath\u003e.\");\n    }\n    return tmp;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/HarFileSystem.java",
      "extendedDetails": {}
    },
    "909176c1fc21501d9cd2b2d70528cca2fa02e68b": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8261. Har file system doesn\u0027t deal with FS URIs with a host but no port. Contributed by Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1311133 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/04/12 10:56 PM",
      "commitName": "909176c1fc21501d9cd2b2d70528cca2fa02e68b",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "13/12/11 12:17 PM",
      "commitNameOld": "0201be46c298e94176ec6297e9d9cdba3afc2bbd",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 117.4,
      "commitsBetweenForRepo": 854,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,42 @@\n   private URI decodeHarURI(URI rawURI, Configuration conf) throws IOException {\n     String tmpAuth \u003d rawURI.getAuthority();\n     //we are using the default file\n     //system in the config \n     //so create a underlying uri and \n     //return it\n     if (tmpAuth \u003d\u003d null) {\n       //create a path \n       return FileSystem.getDefaultUri(conf);\n     }\n     String host \u003d rawURI.getHost();\n     if (host \u003d\u003d null) {\n       throw new IOException(\"URI: \" + rawURI\n           + \" is an invalid Har URI since host\u003d\u003dnull.\"\n           + \"  Expecting har://\u003cscheme\u003e-\u003chost\u003e/\u003cpath\u003e.\");\n     }\n     int i \u003d host.indexOf(\u0027-\u0027);\n     if (i \u003c 0) {\n       throw new IOException(\"URI: \" + rawURI\n           + \" is an invalid Har URI since \u0027-\u0027 not found.\"\n           + \"  Expecting har://\u003cscheme\u003e-\u003chost\u003e/\u003cpath\u003e.\");\n     }\n     final String underLyingScheme \u003d host.substring(0, i);\n     i++;\n     final String underLyingHost \u003d i \u003d\u003d host.length()? null: host.substring(i);\n     int underLyingPort \u003d rawURI.getPort();\n     String auth \u003d (underLyingHost \u003d\u003d null \u0026\u0026 underLyingPort \u003d\u003d -1)?\n-                  null:(underLyingHost+\":\"+underLyingPort);\n+                  null:(underLyingHost+\n+                      (underLyingPort \u003d\u003d -1 ? \"\" : \":\"+underLyingPort));\n     URI tmp \u003d null;\n     if (rawURI.getQuery() !\u003d null) {\n       // query component not allowed\n       throw new IOException(\"query component in Path not supported  \" + rawURI);\n     }\n     try {\n       tmp \u003d new URI(underLyingScheme, auth, rawURI.getPath(), \n             rawURI.getQuery(), rawURI.getFragment());\n     } catch (URISyntaxException e) {\n         // do nothing should not happen\n     }\n     return tmp;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private URI decodeHarURI(URI rawURI, Configuration conf) throws IOException {\n    String tmpAuth \u003d rawURI.getAuthority();\n    //we are using the default file\n    //system in the config \n    //so create a underlying uri and \n    //return it\n    if (tmpAuth \u003d\u003d null) {\n      //create a path \n      return FileSystem.getDefaultUri(conf);\n    }\n    String host \u003d rawURI.getHost();\n    if (host \u003d\u003d null) {\n      throw new IOException(\"URI: \" + rawURI\n          + \" is an invalid Har URI since host\u003d\u003dnull.\"\n          + \"  Expecting har://\u003cscheme\u003e-\u003chost\u003e/\u003cpath\u003e.\");\n    }\n    int i \u003d host.indexOf(\u0027-\u0027);\n    if (i \u003c 0) {\n      throw new IOException(\"URI: \" + rawURI\n          + \" is an invalid Har URI since \u0027-\u0027 not found.\"\n          + \"  Expecting har://\u003cscheme\u003e-\u003chost\u003e/\u003cpath\u003e.\");\n    }\n    final String underLyingScheme \u003d host.substring(0, i);\n    i++;\n    final String underLyingHost \u003d i \u003d\u003d host.length()? null: host.substring(i);\n    int underLyingPort \u003d rawURI.getPort();\n    String auth \u003d (underLyingHost \u003d\u003d null \u0026\u0026 underLyingPort \u003d\u003d -1)?\n                  null:(underLyingHost+\n                      (underLyingPort \u003d\u003d -1 ? \"\" : \":\"+underLyingPort));\n    URI tmp \u003d null;\n    if (rawURI.getQuery() !\u003d null) {\n      // query component not allowed\n      throw new IOException(\"query component in Path not supported  \" + rawURI);\n    }\n    try {\n      tmp \u003d new URI(underLyingScheme, auth, rawURI.getPath(), \n            rawURI.getQuery(), rawURI.getFragment());\n    } catch (URISyntaxException e) {\n        // do nothing should not happen\n    }\n    return tmp;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/HarFileSystem.java",
      "extendedDetails": {}
    },
    "0201be46c298e94176ec6297e9d9cdba3afc2bbd": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7810. move hadoop archive to core from tools. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1213907 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/12/11 12:17 PM",
      "commitName": "0201be46c298e94176ec6297e9d9cdba3afc2bbd",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "13/12/11 10:07 AM",
      "commitNameOld": "f2f4e9341387199e04679ebc8de5e05c0fdbd437",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 0.09,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private URI decodeHarURI(URI rawURI, Configuration conf) throws IOException {\n    String tmpAuth \u003d rawURI.getAuthority();\n    //we are using the default file\n    //system in the config \n    //so create a underlying uri and \n    //return it\n    if (tmpAuth \u003d\u003d null) {\n      //create a path \n      return FileSystem.getDefaultUri(conf);\n    }\n    String host \u003d rawURI.getHost();\n    if (host \u003d\u003d null) {\n      throw new IOException(\"URI: \" + rawURI\n          + \" is an invalid Har URI since host\u003d\u003dnull.\"\n          + \"  Expecting har://\u003cscheme\u003e-\u003chost\u003e/\u003cpath\u003e.\");\n    }\n    int i \u003d host.indexOf(\u0027-\u0027);\n    if (i \u003c 0) {\n      throw new IOException(\"URI: \" + rawURI\n          + \" is an invalid Har URI since \u0027-\u0027 not found.\"\n          + \"  Expecting har://\u003cscheme\u003e-\u003chost\u003e/\u003cpath\u003e.\");\n    }\n    final String underLyingScheme \u003d host.substring(0, i);\n    i++;\n    final String underLyingHost \u003d i \u003d\u003d host.length()? null: host.substring(i);\n    int underLyingPort \u003d rawURI.getPort();\n    String auth \u003d (underLyingHost \u003d\u003d null \u0026\u0026 underLyingPort \u003d\u003d -1)?\n                  null:(underLyingHost+\":\"+underLyingPort);\n    URI tmp \u003d null;\n    if (rawURI.getQuery() !\u003d null) {\n      // query component not allowed\n      throw new IOException(\"query component in Path not supported  \" + rawURI);\n    }\n    try {\n      tmp \u003d new URI(underLyingScheme, auth, rawURI.getPath(), \n            rawURI.getQuery(), rawURI.getFragment());\n    } catch (URISyntaxException e) {\n        // do nothing should not happen\n    }\n    return tmp;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/HarFileSystem.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/src/tools/org/apache/hadoop/fs/HarFileSystem.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/HarFileSystem.java"
      }
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private URI decodeHarURI(URI rawURI, Configuration conf) throws IOException {\n    String tmpAuth \u003d rawURI.getAuthority();\n    //we are using the default file\n    //system in the config \n    //so create a underlying uri and \n    //return it\n    if (tmpAuth \u003d\u003d null) {\n      //create a path \n      return FileSystem.getDefaultUri(conf);\n    }\n    String host \u003d rawURI.getHost();\n    if (host \u003d\u003d null) {\n      throw new IOException(\"URI: \" + rawURI\n          + \" is an invalid Har URI since host\u003d\u003dnull.\"\n          + \"  Expecting har://\u003cscheme\u003e-\u003chost\u003e/\u003cpath\u003e.\");\n    }\n    int i \u003d host.indexOf(\u0027-\u0027);\n    if (i \u003c 0) {\n      throw new IOException(\"URI: \" + rawURI\n          + \" is an invalid Har URI since \u0027-\u0027 not found.\"\n          + \"  Expecting har://\u003cscheme\u003e-\u003chost\u003e/\u003cpath\u003e.\");\n    }\n    final String underLyingScheme \u003d host.substring(0, i);\n    i++;\n    final String underLyingHost \u003d i \u003d\u003d host.length()? null: host.substring(i);\n    int underLyingPort \u003d rawURI.getPort();\n    String auth \u003d (underLyingHost \u003d\u003d null \u0026\u0026 underLyingPort \u003d\u003d -1)?\n                  null:(underLyingHost+\":\"+underLyingPort);\n    URI tmp \u003d null;\n    if (rawURI.getQuery() !\u003d null) {\n      // query component not allowed\n      throw new IOException(\"query component in Path not supported  \" + rawURI);\n    }\n    try {\n      tmp \u003d new URI(underLyingScheme, auth, rawURI.getPath(), \n            rawURI.getQuery(), rawURI.getFragment());\n    } catch (URISyntaxException e) {\n        // do nothing should not happen\n    }\n    return tmp;\n  }",
      "path": "hadoop-mapreduce-project/src/tools/org/apache/hadoop/fs/HarFileSystem.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/src/tools/org/apache/hadoop/fs/HarFileSystem.java",
        "newPath": "hadoop-mapreduce-project/src/tools/org/apache/hadoop/fs/HarFileSystem.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private URI decodeHarURI(URI rawURI, Configuration conf) throws IOException {\n    String tmpAuth \u003d rawURI.getAuthority();\n    //we are using the default file\n    //system in the config \n    //so create a underlying uri and \n    //return it\n    if (tmpAuth \u003d\u003d null) {\n      //create a path \n      return FileSystem.getDefaultUri(conf);\n    }\n    String host \u003d rawURI.getHost();\n    if (host \u003d\u003d null) {\n      throw new IOException(\"URI: \" + rawURI\n          + \" is an invalid Har URI since host\u003d\u003dnull.\"\n          + \"  Expecting har://\u003cscheme\u003e-\u003chost\u003e/\u003cpath\u003e.\");\n    }\n    int i \u003d host.indexOf(\u0027-\u0027);\n    if (i \u003c 0) {\n      throw new IOException(\"URI: \" + rawURI\n          + \" is an invalid Har URI since \u0027-\u0027 not found.\"\n          + \"  Expecting har://\u003cscheme\u003e-\u003chost\u003e/\u003cpath\u003e.\");\n    }\n    final String underLyingScheme \u003d host.substring(0, i);\n    i++;\n    final String underLyingHost \u003d i \u003d\u003d host.length()? null: host.substring(i);\n    int underLyingPort \u003d rawURI.getPort();\n    String auth \u003d (underLyingHost \u003d\u003d null \u0026\u0026 underLyingPort \u003d\u003d -1)?\n                  null:(underLyingHost+\":\"+underLyingPort);\n    URI tmp \u003d null;\n    if (rawURI.getQuery() !\u003d null) {\n      // query component not allowed\n      throw new IOException(\"query component in Path not supported  \" + rawURI);\n    }\n    try {\n      tmp \u003d new URI(underLyingScheme, auth, rawURI.getPath(), \n            rawURI.getQuery(), rawURI.getFragment());\n    } catch (URISyntaxException e) {\n        // do nothing should not happen\n    }\n    return tmp;\n  }",
      "path": "hadoop-mapreduce/src/tools/org/apache/hadoop/fs/HarFileSystem.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/tools/org/apache/hadoop/fs/HarFileSystem.java",
        "newPath": "hadoop-mapreduce/src/tools/org/apache/hadoop/fs/HarFileSystem.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,41 @@\n+  private URI decodeHarURI(URI rawURI, Configuration conf) throws IOException {\n+    String tmpAuth \u003d rawURI.getAuthority();\n+    //we are using the default file\n+    //system in the config \n+    //so create a underlying uri and \n+    //return it\n+    if (tmpAuth \u003d\u003d null) {\n+      //create a path \n+      return FileSystem.getDefaultUri(conf);\n+    }\n+    String host \u003d rawURI.getHost();\n+    if (host \u003d\u003d null) {\n+      throw new IOException(\"URI: \" + rawURI\n+          + \" is an invalid Har URI since host\u003d\u003dnull.\"\n+          + \"  Expecting har://\u003cscheme\u003e-\u003chost\u003e/\u003cpath\u003e.\");\n+    }\n+    int i \u003d host.indexOf(\u0027-\u0027);\n+    if (i \u003c 0) {\n+      throw new IOException(\"URI: \" + rawURI\n+          + \" is an invalid Har URI since \u0027-\u0027 not found.\"\n+          + \"  Expecting har://\u003cscheme\u003e-\u003chost\u003e/\u003cpath\u003e.\");\n+    }\n+    final String underLyingScheme \u003d host.substring(0, i);\n+    i++;\n+    final String underLyingHost \u003d i \u003d\u003d host.length()? null: host.substring(i);\n+    int underLyingPort \u003d rawURI.getPort();\n+    String auth \u003d (underLyingHost \u003d\u003d null \u0026\u0026 underLyingPort \u003d\u003d -1)?\n+                  null:(underLyingHost+\":\"+underLyingPort);\n+    URI tmp \u003d null;\n+    if (rawURI.getQuery() !\u003d null) {\n+      // query component not allowed\n+      throw new IOException(\"query component in Path not supported  \" + rawURI);\n+    }\n+    try {\n+      tmp \u003d new URI(underLyingScheme, auth, rawURI.getPath(), \n+            rawURI.getQuery(), rawURI.getFragment());\n+    } catch (URISyntaxException e) {\n+        // do nothing should not happen\n+    }\n+    return tmp;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private URI decodeHarURI(URI rawURI, Configuration conf) throws IOException {\n    String tmpAuth \u003d rawURI.getAuthority();\n    //we are using the default file\n    //system in the config \n    //so create a underlying uri and \n    //return it\n    if (tmpAuth \u003d\u003d null) {\n      //create a path \n      return FileSystem.getDefaultUri(conf);\n    }\n    String host \u003d rawURI.getHost();\n    if (host \u003d\u003d null) {\n      throw new IOException(\"URI: \" + rawURI\n          + \" is an invalid Har URI since host\u003d\u003dnull.\"\n          + \"  Expecting har://\u003cscheme\u003e-\u003chost\u003e/\u003cpath\u003e.\");\n    }\n    int i \u003d host.indexOf(\u0027-\u0027);\n    if (i \u003c 0) {\n      throw new IOException(\"URI: \" + rawURI\n          + \" is an invalid Har URI since \u0027-\u0027 not found.\"\n          + \"  Expecting har://\u003cscheme\u003e-\u003chost\u003e/\u003cpath\u003e.\");\n    }\n    final String underLyingScheme \u003d host.substring(0, i);\n    i++;\n    final String underLyingHost \u003d i \u003d\u003d host.length()? null: host.substring(i);\n    int underLyingPort \u003d rawURI.getPort();\n    String auth \u003d (underLyingHost \u003d\u003d null \u0026\u0026 underLyingPort \u003d\u003d -1)?\n                  null:(underLyingHost+\":\"+underLyingPort);\n    URI tmp \u003d null;\n    if (rawURI.getQuery() !\u003d null) {\n      // query component not allowed\n      throw new IOException(\"query component in Path not supported  \" + rawURI);\n    }\n    try {\n      tmp \u003d new URI(underLyingScheme, auth, rawURI.getPath(), \n            rawURI.getQuery(), rawURI.getFragment());\n    } catch (URISyntaxException e) {\n        // do nothing should not happen\n    }\n    return tmp;\n  }",
      "path": "mapreduce/src/tools/org/apache/hadoop/fs/HarFileSystem.java"
    }
  }
}