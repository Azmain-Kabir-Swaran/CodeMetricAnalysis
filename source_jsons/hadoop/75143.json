{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "UserGroupInformation.java",
  "functionName": "run",
  "functionId": "run",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
  "functionStartLine": 956,
  "functionEndLine": 1031,
  "numCommitsSeen": 147,
  "timeTaken": 5602,
  "changeHistory": [
    "d0302d3849cc4f801f3b7d417b2c7bd7378d51e9",
    "bfb9adc2b9e6e97f1036bcf8ea4cee6893a782b2",
    "d91d47bc739f23ca22a7e44fc83d449db57ab130",
    "77721f39e26b630352a1f4087524a3fbd21ff06e",
    "bff3d7b0cf073ccc061db30af6d52fa4a9f21c05",
    "367c3d41217728c2e61252c5a5235e5bc1f9822f",
    "d50e06d9e0232dccf5681ae7dda5996046e7eb1c",
    "4a5ba3b7bd2360fd9605863630b477d362874e1e",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "7d6fa858ca41ee6e2632ebc455194ef231ccfd74",
    "7efb9640be26aabe3878310e82248a1b6b767a9a",
    "1a6ed79ebf6649d4f0828b8c2adff26d0f79832f"
  ],
  "changeHistoryShort": {
    "d0302d3849cc4f801f3b7d417b2c7bd7378d51e9": "Ybodychange",
    "bfb9adc2b9e6e97f1036bcf8ea4cee6893a782b2": "Ybodychange",
    "d91d47bc739f23ca22a7e44fc83d449db57ab130": "Ybodychange",
    "77721f39e26b630352a1f4087524a3fbd21ff06e": "Ybodychange",
    "bff3d7b0cf073ccc061db30af6d52fa4a9f21c05": "Ybodychange",
    "367c3d41217728c2e61252c5a5235e5bc1f9822f": "Ybodychange",
    "d50e06d9e0232dccf5681ae7dda5996046e7eb1c": "Ybodychange",
    "4a5ba3b7bd2360fd9605863630b477d362874e1e": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "7d6fa858ca41ee6e2632ebc455194ef231ccfd74": "Ybodychange",
    "7efb9640be26aabe3878310e82248a1b6b767a9a": "Ybodychange",
    "1a6ed79ebf6649d4f0828b8c2adff26d0f79832f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d0302d3849cc4f801f3b7d417b2c7bd7378d51e9": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16691. Unify Logging in UserGroupInformation.\n\nUnify Logging in UserGroupInformation.",
      "commitDate": "14/11/19 10:28 AM",
      "commitName": "d0302d3849cc4f801f3b7d417b2c7bd7378d51e9",
      "commitAuthor": "belugabehr",
      "commitDateOld": "28/02/19 10:34 AM",
      "commitNameOld": "0d61facd3777c26178a9974e646b6ff351fedcb5",
      "commitAuthorOld": "Ajay Kumar",
      "daysBetweenCommits": 259.0,
      "commitsBetweenForRepo": 1874,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,79 +1,76 @@\n     public void run() {\n       do {\n         try {\n           long now \u003d Time.now();\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Current time is \" + now);\n-            LOG.debug(\"Next refresh is \" + nextRefresh);\n-          }\n+          LOG.debug(\"Current time is {}, next refresh is {}\", now, nextRefresh);\n           if (now \u003c nextRefresh) {\n             Thread.sleep(nextRefresh - now);\n           }\n           relogin();\n           tgt \u003d getTGT();\n           if (tgt \u003d\u003d null) {\n             LOG.warn(\"No TGT after renewal. Aborting renew thread for \" +\n                 getUserName());\n             return;\n           }\n           nextRefresh \u003d Math.max(getRefreshTime(tgt),\n               now + kerberosMinSecondsBeforeRelogin);\n           metrics.renewalFailures.set(0);\n           rp \u003d null;\n         } catch (InterruptedException ie) {\n           LOG.warn(\"Terminating renewal thread\");\n           return;\n         } catch (IOException ie) {\n           metrics.renewalFailuresTotal.incr();\n           final long now \u003d Time.now();\n \n           if (tgt.isDestroyed()) {\n             LOG.error(String.format(\"TGT is destroyed. \" +\n                     \"Aborting renew thread for %s.\", getUserName()), ie);\n             return;\n           }\n \n           long tgtEndTime;\n           // As described in HADOOP-15593 we need to handle the case when\n           // tgt.getEndTime() throws NPE because of JDK issue JDK-8147772\n           // NPE is only possible if this issue is not fixed in the JDK\n           // currently used\n           try {\n             tgtEndTime \u003d tgt.getEndTime().getTime();\n           } catch (NullPointerException npe) {\n-            LOG.error(String.format(\"NPE thrown while getting \" +\n-                \"KerberosTicket endTime. Aborting renew thread for %s.\",\n-                getUserName()), ie);\n+            LOG.error(\"NPE thrown while getting KerberosTicket endTime. \"\n+                + \"Aborting renew thread for {}.\", getUserName(), ie);\n             return;\n           }\n \n-          LOG.warn(String.format(\"Exception encountered while running the \" +\n-                  \"renewal command for %s. \" +\n-                  \"(TGT end time:%d, renewalFailures: %d, \" +\n-                  \"renewalFailuresTotal: %d)\", getUserName(), tgtEndTime,\n-              metrics.renewalFailures.value(),\n-              metrics.renewalFailuresTotal.value()), ie);\n+          LOG.warn(\n+              \"Exception encountered while running the \"\n+                  + \"renewal command for {}. \"\n+                  + \"(TGT end time:{}, renewalFailures: {}, \"\n+                  + \"renewalFailuresTotal: {})\",\n+              getUserName(), tgtEndTime, metrics.renewalFailures.value(),\n+              metrics.renewalFailuresTotal.value(), ie);\n           if (rp \u003d\u003d null) {\n             // Use a dummy maxRetries to create the policy. The policy will\n             // only be used to get next retry time with exponential back-off.\n             // The final retry time will be later limited within the\n             // tgt endTime in getNextTgtRenewalTime.\n             rp \u003d RetryPolicies.exponentialBackoffRetry(Long.SIZE - 2,\n                 kerberosMinSecondsBeforeRelogin, TimeUnit.MILLISECONDS);\n           }\n           try {\n             nextRefresh \u003d getNextTgtRenewalTime(tgtEndTime, now, rp);\n           } catch (Exception e) {\n             LOG.error(\"Exception when calculating next tgt renewal time\", e);\n             return;\n           }\n           metrics.renewalFailures.incr();\n           // retry until close enough to tgt endTime.\n           if (now \u003e nextRefresh) {\n             LOG.error(\"TGT is expired. Aborting renew thread for {}.\",\n                 getUserName());\n             return;\n           }\n         }\n       } while (runRenewalLoop);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      do {\n        try {\n          long now \u003d Time.now();\n          LOG.debug(\"Current time is {}, next refresh is {}\", now, nextRefresh);\n          if (now \u003c nextRefresh) {\n            Thread.sleep(nextRefresh - now);\n          }\n          relogin();\n          tgt \u003d getTGT();\n          if (tgt \u003d\u003d null) {\n            LOG.warn(\"No TGT after renewal. Aborting renew thread for \" +\n                getUserName());\n            return;\n          }\n          nextRefresh \u003d Math.max(getRefreshTime(tgt),\n              now + kerberosMinSecondsBeforeRelogin);\n          metrics.renewalFailures.set(0);\n          rp \u003d null;\n        } catch (InterruptedException ie) {\n          LOG.warn(\"Terminating renewal thread\");\n          return;\n        } catch (IOException ie) {\n          metrics.renewalFailuresTotal.incr();\n          final long now \u003d Time.now();\n\n          if (tgt.isDestroyed()) {\n            LOG.error(String.format(\"TGT is destroyed. \" +\n                    \"Aborting renew thread for %s.\", getUserName()), ie);\n            return;\n          }\n\n          long tgtEndTime;\n          // As described in HADOOP-15593 we need to handle the case when\n          // tgt.getEndTime() throws NPE because of JDK issue JDK-8147772\n          // NPE is only possible if this issue is not fixed in the JDK\n          // currently used\n          try {\n            tgtEndTime \u003d tgt.getEndTime().getTime();\n          } catch (NullPointerException npe) {\n            LOG.error(\"NPE thrown while getting KerberosTicket endTime. \"\n                + \"Aborting renew thread for {}.\", getUserName(), ie);\n            return;\n          }\n\n          LOG.warn(\n              \"Exception encountered while running the \"\n                  + \"renewal command for {}. \"\n                  + \"(TGT end time:{}, renewalFailures: {}, \"\n                  + \"renewalFailuresTotal: {})\",\n              getUserName(), tgtEndTime, metrics.renewalFailures.value(),\n              metrics.renewalFailuresTotal.value(), ie);\n          if (rp \u003d\u003d null) {\n            // Use a dummy maxRetries to create the policy. The policy will\n            // only be used to get next retry time with exponential back-off.\n            // The final retry time will be later limited within the\n            // tgt endTime in getNextTgtRenewalTime.\n            rp \u003d RetryPolicies.exponentialBackoffRetry(Long.SIZE - 2,\n                kerberosMinSecondsBeforeRelogin, TimeUnit.MILLISECONDS);\n          }\n          try {\n            nextRefresh \u003d getNextTgtRenewalTime(tgtEndTime, now, rp);\n          } catch (Exception e) {\n            LOG.error(\"Exception when calculating next tgt renewal time\", e);\n            return;\n          }\n          metrics.renewalFailures.incr();\n          // retry until close enough to tgt endTime.\n          if (now \u003e nextRefresh) {\n            LOG.error(\"TGT is expired. Aborting renew thread for {}.\",\n                getUserName());\n            return;\n          }\n        }\n      } while (runRenewalLoop);\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "bfb9adc2b9e6e97f1036bcf8ea4cee6893a782b2": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9567. Provide auto-renewal for keytab based logins. Contributed by Hrishikesh Gadre, Gary Helmling  and Harsh J.\n\nSigned-off-by: Wei-Chiu Chuang \u003cweichiu@apache.org\u003e\n",
      "commitDate": "27/10/18 8:59 AM",
      "commitName": "bfb9adc2b9e6e97f1036bcf8ea4cee6893a782b2",
      "commitAuthor": "Hrishikesh Gadre",
      "commitDateOld": "11/10/18 3:35 PM",
      "commitNameOld": "d91d47bc739f23ca22a7e44fc83d449db57ab130",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 15.73,
      "commitsBetweenForRepo": 180,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,83 +1,79 @@\n     public void run() {\n       do {\n         try {\n           long now \u003d Time.now();\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Current time is \" + now);\n             LOG.debug(\"Next refresh is \" + nextRefresh);\n           }\n           if (now \u003c nextRefresh) {\n             Thread.sleep(nextRefresh - now);\n           }\n-          String output \u003d Shell.execCommand(kinitCmd, \"-R\");\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Renewed ticket. kinit output: {}\", output);\n-          }\n-          reloginFromTicketCache();\n+          relogin();\n           tgt \u003d getTGT();\n           if (tgt \u003d\u003d null) {\n             LOG.warn(\"No TGT after renewal. Aborting renew thread for \" +\n                 getUserName());\n             return;\n           }\n           nextRefresh \u003d Math.max(getRefreshTime(tgt),\n               now + kerberosMinSecondsBeforeRelogin);\n           metrics.renewalFailures.set(0);\n           rp \u003d null;\n         } catch (InterruptedException ie) {\n           LOG.warn(\"Terminating renewal thread\");\n           return;\n         } catch (IOException ie) {\n           metrics.renewalFailuresTotal.incr();\n           final long now \u003d Time.now();\n \n           if (tgt.isDestroyed()) {\n             LOG.error(String.format(\"TGT is destroyed. \" +\n                     \"Aborting renew thread for %s.\", getUserName()), ie);\n             return;\n           }\n \n           long tgtEndTime;\n           // As described in HADOOP-15593 we need to handle the case when\n           // tgt.getEndTime() throws NPE because of JDK issue JDK-8147772\n           // NPE is only possible if this issue is not fixed in the JDK\n           // currently used\n           try {\n             tgtEndTime \u003d tgt.getEndTime().getTime();\n           } catch (NullPointerException npe) {\n             LOG.error(String.format(\"NPE thrown while getting \" +\n                 \"KerberosTicket endTime. Aborting renew thread for %s.\",\n                 getUserName()), ie);\n             return;\n           }\n \n           LOG.warn(String.format(\"Exception encountered while running the \" +\n                   \"renewal command for %s. \" +\n                   \"(TGT end time:%d, renewalFailures: %d, \" +\n                   \"renewalFailuresTotal: %d)\", getUserName(), tgtEndTime,\n               metrics.renewalFailures.value(),\n               metrics.renewalFailuresTotal.value()), ie);\n           if (rp \u003d\u003d null) {\n             // Use a dummy maxRetries to create the policy. The policy will\n             // only be used to get next retry time with exponential back-off.\n             // The final retry time will be later limited within the\n             // tgt endTime in getNextTgtRenewalTime.\n             rp \u003d RetryPolicies.exponentialBackoffRetry(Long.SIZE - 2,\n                 kerberosMinSecondsBeforeRelogin, TimeUnit.MILLISECONDS);\n           }\n           try {\n             nextRefresh \u003d getNextTgtRenewalTime(tgtEndTime, now, rp);\n           } catch (Exception e) {\n             LOG.error(\"Exception when calculating next tgt renewal time\", e);\n             return;\n           }\n           metrics.renewalFailures.incr();\n           // retry until close enough to tgt endTime.\n           if (now \u003e nextRefresh) {\n             LOG.error(\"TGT is expired. Aborting renew thread for {}.\",\n                 getUserName());\n             return;\n           }\n         }\n       } while (runRenewalLoop);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      do {\n        try {\n          long now \u003d Time.now();\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Current time is \" + now);\n            LOG.debug(\"Next refresh is \" + nextRefresh);\n          }\n          if (now \u003c nextRefresh) {\n            Thread.sleep(nextRefresh - now);\n          }\n          relogin();\n          tgt \u003d getTGT();\n          if (tgt \u003d\u003d null) {\n            LOG.warn(\"No TGT after renewal. Aborting renew thread for \" +\n                getUserName());\n            return;\n          }\n          nextRefresh \u003d Math.max(getRefreshTime(tgt),\n              now + kerberosMinSecondsBeforeRelogin);\n          metrics.renewalFailures.set(0);\n          rp \u003d null;\n        } catch (InterruptedException ie) {\n          LOG.warn(\"Terminating renewal thread\");\n          return;\n        } catch (IOException ie) {\n          metrics.renewalFailuresTotal.incr();\n          final long now \u003d Time.now();\n\n          if (tgt.isDestroyed()) {\n            LOG.error(String.format(\"TGT is destroyed. \" +\n                    \"Aborting renew thread for %s.\", getUserName()), ie);\n            return;\n          }\n\n          long tgtEndTime;\n          // As described in HADOOP-15593 we need to handle the case when\n          // tgt.getEndTime() throws NPE because of JDK issue JDK-8147772\n          // NPE is only possible if this issue is not fixed in the JDK\n          // currently used\n          try {\n            tgtEndTime \u003d tgt.getEndTime().getTime();\n          } catch (NullPointerException npe) {\n            LOG.error(String.format(\"NPE thrown while getting \" +\n                \"KerberosTicket endTime. Aborting renew thread for %s.\",\n                getUserName()), ie);\n            return;\n          }\n\n          LOG.warn(String.format(\"Exception encountered while running the \" +\n                  \"renewal command for %s. \" +\n                  \"(TGT end time:%d, renewalFailures: %d, \" +\n                  \"renewalFailuresTotal: %d)\", getUserName(), tgtEndTime,\n              metrics.renewalFailures.value(),\n              metrics.renewalFailuresTotal.value()), ie);\n          if (rp \u003d\u003d null) {\n            // Use a dummy maxRetries to create the policy. The policy will\n            // only be used to get next retry time with exponential back-off.\n            // The final retry time will be later limited within the\n            // tgt endTime in getNextTgtRenewalTime.\n            rp \u003d RetryPolicies.exponentialBackoffRetry(Long.SIZE - 2,\n                kerberosMinSecondsBeforeRelogin, TimeUnit.MILLISECONDS);\n          }\n          try {\n            nextRefresh \u003d getNextTgtRenewalTime(tgtEndTime, now, rp);\n          } catch (Exception e) {\n            LOG.error(\"Exception when calculating next tgt renewal time\", e);\n            return;\n          }\n          metrics.renewalFailures.incr();\n          // retry until close enough to tgt endTime.\n          if (now \u003e nextRefresh) {\n            LOG.error(\"TGT is expired. Aborting renew thread for {}.\",\n                getUserName());\n            return;\n          }\n        }\n      } while (runRenewalLoop);\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "d91d47bc739f23ca22a7e44fc83d449db57ab130": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15717. TGT renewal thread does not log IOException (snemeth via rkanter)\n",
      "commitDate": "11/10/18 3:35 PM",
      "commitName": "d91d47bc739f23ca22a7e44fc83d449db57ab130",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "10/10/18 9:51 PM",
      "commitNameOld": "7b57f2f71fbaa5af4897309597cca70a95b04edd",
      "commitAuthorOld": "Takanobu Asanuma",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,81 +1,83 @@\n     public void run() {\n       do {\n         try {\n           long now \u003d Time.now();\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Current time is \" + now);\n             LOG.debug(\"Next refresh is \" + nextRefresh);\n           }\n           if (now \u003c nextRefresh) {\n             Thread.sleep(nextRefresh - now);\n           }\n           String output \u003d Shell.execCommand(kinitCmd, \"-R\");\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Renewed ticket. kinit output: {}\", output);\n           }\n           reloginFromTicketCache();\n           tgt \u003d getTGT();\n           if (tgt \u003d\u003d null) {\n             LOG.warn(\"No TGT after renewal. Aborting renew thread for \" +\n                 getUserName());\n             return;\n           }\n           nextRefresh \u003d Math.max(getRefreshTime(tgt),\n               now + kerberosMinSecondsBeforeRelogin);\n           metrics.renewalFailures.set(0);\n           rp \u003d null;\n         } catch (InterruptedException ie) {\n           LOG.warn(\"Terminating renewal thread\");\n           return;\n         } catch (IOException ie) {\n           metrics.renewalFailuresTotal.incr();\n           final long now \u003d Time.now();\n \n           if (tgt.isDestroyed()) {\n-            LOG.error(\"TGT is destroyed. Aborting renew thread for {}.\",\n-                getUserName());\n+            LOG.error(String.format(\"TGT is destroyed. \" +\n+                    \"Aborting renew thread for %s.\", getUserName()), ie);\n             return;\n           }\n \n           long tgtEndTime;\n           // As described in HADOOP-15593 we need to handle the case when\n           // tgt.getEndTime() throws NPE because of JDK issue JDK-8147772\n           // NPE is only possible if this issue is not fixed in the JDK\n           // currently used\n           try {\n             tgtEndTime \u003d tgt.getEndTime().getTime();\n           } catch (NullPointerException npe) {\n-            LOG.error(\"NPE thrown while getting KerberosTicket endTime. \"\n-                + \"Aborting renew thread for {}.\", getUserName());\n+            LOG.error(String.format(\"NPE thrown while getting \" +\n+                \"KerberosTicket endTime. Aborting renew thread for %s.\",\n+                getUserName()), ie);\n             return;\n           }\n \n-          LOG.warn(\"Exception encountered while running the renewal \"\n-                  + \"command for {}. (TGT end time:{}, renewalFailures: {},\"\n-                  + \"renewalFailuresTotal: {})\", getUserName(), tgtEndTime,\n+          LOG.warn(String.format(\"Exception encountered while running the \" +\n+                  \"renewal command for %s. \" +\n+                  \"(TGT end time:%d, renewalFailures: %d, \" +\n+                  \"renewalFailuresTotal: %d)\", getUserName(), tgtEndTime,\n               metrics.renewalFailures.value(),\n-              metrics.renewalFailuresTotal.value(), ie);\n+              metrics.renewalFailuresTotal.value()), ie);\n           if (rp \u003d\u003d null) {\n             // Use a dummy maxRetries to create the policy. The policy will\n             // only be used to get next retry time with exponential back-off.\n             // The final retry time will be later limited within the\n             // tgt endTime in getNextTgtRenewalTime.\n             rp \u003d RetryPolicies.exponentialBackoffRetry(Long.SIZE - 2,\n                 kerberosMinSecondsBeforeRelogin, TimeUnit.MILLISECONDS);\n           }\n           try {\n             nextRefresh \u003d getNextTgtRenewalTime(tgtEndTime, now, rp);\n           } catch (Exception e) {\n             LOG.error(\"Exception when calculating next tgt renewal time\", e);\n             return;\n           }\n           metrics.renewalFailures.incr();\n           // retry until close enough to tgt endTime.\n           if (now \u003e nextRefresh) {\n             LOG.error(\"TGT is expired. Aborting renew thread for {}.\",\n                 getUserName());\n             return;\n           }\n         }\n       } while (runRenewalLoop);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      do {\n        try {\n          long now \u003d Time.now();\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Current time is \" + now);\n            LOG.debug(\"Next refresh is \" + nextRefresh);\n          }\n          if (now \u003c nextRefresh) {\n            Thread.sleep(nextRefresh - now);\n          }\n          String output \u003d Shell.execCommand(kinitCmd, \"-R\");\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Renewed ticket. kinit output: {}\", output);\n          }\n          reloginFromTicketCache();\n          tgt \u003d getTGT();\n          if (tgt \u003d\u003d null) {\n            LOG.warn(\"No TGT after renewal. Aborting renew thread for \" +\n                getUserName());\n            return;\n          }\n          nextRefresh \u003d Math.max(getRefreshTime(tgt),\n              now + kerberosMinSecondsBeforeRelogin);\n          metrics.renewalFailures.set(0);\n          rp \u003d null;\n        } catch (InterruptedException ie) {\n          LOG.warn(\"Terminating renewal thread\");\n          return;\n        } catch (IOException ie) {\n          metrics.renewalFailuresTotal.incr();\n          final long now \u003d Time.now();\n\n          if (tgt.isDestroyed()) {\n            LOG.error(String.format(\"TGT is destroyed. \" +\n                    \"Aborting renew thread for %s.\", getUserName()), ie);\n            return;\n          }\n\n          long tgtEndTime;\n          // As described in HADOOP-15593 we need to handle the case when\n          // tgt.getEndTime() throws NPE because of JDK issue JDK-8147772\n          // NPE is only possible if this issue is not fixed in the JDK\n          // currently used\n          try {\n            tgtEndTime \u003d tgt.getEndTime().getTime();\n          } catch (NullPointerException npe) {\n            LOG.error(String.format(\"NPE thrown while getting \" +\n                \"KerberosTicket endTime. Aborting renew thread for %s.\",\n                getUserName()), ie);\n            return;\n          }\n\n          LOG.warn(String.format(\"Exception encountered while running the \" +\n                  \"renewal command for %s. \" +\n                  \"(TGT end time:%d, renewalFailures: %d, \" +\n                  \"renewalFailuresTotal: %d)\", getUserName(), tgtEndTime,\n              metrics.renewalFailures.value(),\n              metrics.renewalFailuresTotal.value()), ie);\n          if (rp \u003d\u003d null) {\n            // Use a dummy maxRetries to create the policy. The policy will\n            // only be used to get next retry time with exponential back-off.\n            // The final retry time will be later limited within the\n            // tgt endTime in getNextTgtRenewalTime.\n            rp \u003d RetryPolicies.exponentialBackoffRetry(Long.SIZE - 2,\n                kerberosMinSecondsBeforeRelogin, TimeUnit.MILLISECONDS);\n          }\n          try {\n            nextRefresh \u003d getNextTgtRenewalTime(tgtEndTime, now, rp);\n          } catch (Exception e) {\n            LOG.error(\"Exception when calculating next tgt renewal time\", e);\n            return;\n          }\n          metrics.renewalFailures.incr();\n          // retry until close enough to tgt endTime.\n          if (now \u003e nextRefresh) {\n            LOG.error(\"TGT is expired. Aborting renew thread for {}.\",\n                getUserName());\n            return;\n          }\n        }\n      } while (runRenewalLoop);\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "77721f39e26b630352a1f4087524a3fbd21ff06e": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15593.  Fixed NPE in UGI spawnAutoRenewalThreadForUserCreds.\n               Contributed by Gabor Bota\n",
      "commitDate": "26/07/18 3:35 PM",
      "commitName": "77721f39e26b630352a1f4087524a3fbd21ff06e",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "20/06/18 3:58 PM",
      "commitNameOld": "32f867a6a907c05a312657139d295a92756d98ef",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 35.98,
      "commitsBetweenForRepo": 217,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,81 @@\n-      public void run() {\n-        String cmd \u003d conf.get(\"hadoop.kerberos.kinit.command\", \"kinit\");\n-        KerberosTicket tgt \u003d getTGT();\n-        if (tgt \u003d\u003d null) {\n-          return;\n-        }\n-        long nextRefresh \u003d getRefreshTime(tgt);\n-        RetryPolicy rp \u003d null;\n-        while (true) {\n-          try {\n-            long now \u003d Time.now();\n-            if (LOG.isDebugEnabled()) {\n-              LOG.debug(\"Current time is \" + now);\n-              LOG.debug(\"Next refresh is \" + nextRefresh);\n-            }\n-            if (now \u003c nextRefresh) {\n-              Thread.sleep(nextRefresh - now);\n-            }\n-            String output \u003d Shell.execCommand(cmd, \"-R\");\n-            if (LOG.isDebugEnabled()) {\n-              LOG.debug(\"Renewed ticket. kinit output: {}\", output);\n-            }\n-            reloginFromTicketCache();\n-            tgt \u003d getTGT();\n-            if (tgt \u003d\u003d null) {\n-              LOG.warn(\"No TGT after renewal. Aborting renew thread for \" +\n-                  getUserName());\n-              return;\n-            }\n-            nextRefresh \u003d Math.max(getRefreshTime(tgt),\n-              now + kerberosMinSecondsBeforeRelogin);\n-            metrics.renewalFailures.set(0);\n-            rp \u003d null;\n-          } catch (InterruptedException ie) {\n-            LOG.warn(\"Terminating renewal thread\");\n+    public void run() {\n+      do {\n+        try {\n+          long now \u003d Time.now();\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Current time is \" + now);\n+            LOG.debug(\"Next refresh is \" + nextRefresh);\n+          }\n+          if (now \u003c nextRefresh) {\n+            Thread.sleep(nextRefresh - now);\n+          }\n+          String output \u003d Shell.execCommand(kinitCmd, \"-R\");\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Renewed ticket. kinit output: {}\", output);\n+          }\n+          reloginFromTicketCache();\n+          tgt \u003d getTGT();\n+          if (tgt \u003d\u003d null) {\n+            LOG.warn(\"No TGT after renewal. Aborting renew thread for \" +\n+                getUserName());\n             return;\n-          } catch (IOException ie) {\n-            metrics.renewalFailuresTotal.incr();\n-            final long tgtEndTime \u003d tgt.getEndTime().getTime();\n-            LOG.warn(\"Exception encountered while running the renewal \"\n-                    + \"command for {}. (TGT end time:{}, renewalFailures: {},\"\n-                    + \"renewalFailuresTotal: {})\", getUserName(), tgtEndTime,\n-                metrics.renewalFailures, metrics.renewalFailuresTotal, ie);\n-            final long now \u003d Time.now();\n-            if (rp \u003d\u003d null) {\n-              // Use a dummy maxRetries to create the policy. The policy will\n-              // only be used to get next retry time with exponential back-off.\n-              // The final retry time will be later limited within the\n-              // tgt endTime in getNextTgtRenewalTime.\n-              rp \u003d RetryPolicies.exponentialBackoffRetry(Long.SIZE - 2,\n-                  kerberosMinSecondsBeforeRelogin, TimeUnit.MILLISECONDS);\n-            }\n-            try {\n-              nextRefresh \u003d getNextTgtRenewalTime(tgtEndTime, now, rp);\n-            } catch (Exception e) {\n-              LOG.error(\"Exception when calculating next tgt renewal time\", e);\n-              return;\n-            }\n-            metrics.renewalFailures.incr();\n-            // retry until close enough to tgt endTime.\n-            if (now \u003e nextRefresh) {\n-              LOG.error(\"TGT is expired. Aborting renew thread for {}.\",\n-                  getUserName());\n-              return;\n-            }\n+          }\n+          nextRefresh \u003d Math.max(getRefreshTime(tgt),\n+              now + kerberosMinSecondsBeforeRelogin);\n+          metrics.renewalFailures.set(0);\n+          rp \u003d null;\n+        } catch (InterruptedException ie) {\n+          LOG.warn(\"Terminating renewal thread\");\n+          return;\n+        } catch (IOException ie) {\n+          metrics.renewalFailuresTotal.incr();\n+          final long now \u003d Time.now();\n+\n+          if (tgt.isDestroyed()) {\n+            LOG.error(\"TGT is destroyed. Aborting renew thread for {}.\",\n+                getUserName());\n+            return;\n+          }\n+\n+          long tgtEndTime;\n+          // As described in HADOOP-15593 we need to handle the case when\n+          // tgt.getEndTime() throws NPE because of JDK issue JDK-8147772\n+          // NPE is only possible if this issue is not fixed in the JDK\n+          // currently used\n+          try {\n+            tgtEndTime \u003d tgt.getEndTime().getTime();\n+          } catch (NullPointerException npe) {\n+            LOG.error(\"NPE thrown while getting KerberosTicket endTime. \"\n+                + \"Aborting renew thread for {}.\", getUserName());\n+            return;\n+          }\n+\n+          LOG.warn(\"Exception encountered while running the renewal \"\n+                  + \"command for {}. (TGT end time:{}, renewalFailures: {},\"\n+                  + \"renewalFailuresTotal: {})\", getUserName(), tgtEndTime,\n+              metrics.renewalFailures.value(),\n+              metrics.renewalFailuresTotal.value(), ie);\n+          if (rp \u003d\u003d null) {\n+            // Use a dummy maxRetries to create the policy. The policy will\n+            // only be used to get next retry time with exponential back-off.\n+            // The final retry time will be later limited within the\n+            // tgt endTime in getNextTgtRenewalTime.\n+            rp \u003d RetryPolicies.exponentialBackoffRetry(Long.SIZE - 2,\n+                kerberosMinSecondsBeforeRelogin, TimeUnit.MILLISECONDS);\n+          }\n+          try {\n+            nextRefresh \u003d getNextTgtRenewalTime(tgtEndTime, now, rp);\n+          } catch (Exception e) {\n+            LOG.error(\"Exception when calculating next tgt renewal time\", e);\n+            return;\n+          }\n+          metrics.renewalFailures.incr();\n+          // retry until close enough to tgt endTime.\n+          if (now \u003e nextRefresh) {\n+            LOG.error(\"TGT is expired. Aborting renew thread for {}.\",\n+                getUserName());\n+            return;\n           }\n         }\n-      }\n\\ No newline at end of file\n+      } while (runRenewalLoop);\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      do {\n        try {\n          long now \u003d Time.now();\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Current time is \" + now);\n            LOG.debug(\"Next refresh is \" + nextRefresh);\n          }\n          if (now \u003c nextRefresh) {\n            Thread.sleep(nextRefresh - now);\n          }\n          String output \u003d Shell.execCommand(kinitCmd, \"-R\");\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Renewed ticket. kinit output: {}\", output);\n          }\n          reloginFromTicketCache();\n          tgt \u003d getTGT();\n          if (tgt \u003d\u003d null) {\n            LOG.warn(\"No TGT after renewal. Aborting renew thread for \" +\n                getUserName());\n            return;\n          }\n          nextRefresh \u003d Math.max(getRefreshTime(tgt),\n              now + kerberosMinSecondsBeforeRelogin);\n          metrics.renewalFailures.set(0);\n          rp \u003d null;\n        } catch (InterruptedException ie) {\n          LOG.warn(\"Terminating renewal thread\");\n          return;\n        } catch (IOException ie) {\n          metrics.renewalFailuresTotal.incr();\n          final long now \u003d Time.now();\n\n          if (tgt.isDestroyed()) {\n            LOG.error(\"TGT is destroyed. Aborting renew thread for {}.\",\n                getUserName());\n            return;\n          }\n\n          long tgtEndTime;\n          // As described in HADOOP-15593 we need to handle the case when\n          // tgt.getEndTime() throws NPE because of JDK issue JDK-8147772\n          // NPE is only possible if this issue is not fixed in the JDK\n          // currently used\n          try {\n            tgtEndTime \u003d tgt.getEndTime().getTime();\n          } catch (NullPointerException npe) {\n            LOG.error(\"NPE thrown while getting KerberosTicket endTime. \"\n                + \"Aborting renew thread for {}.\", getUserName());\n            return;\n          }\n\n          LOG.warn(\"Exception encountered while running the renewal \"\n                  + \"command for {}. (TGT end time:{}, renewalFailures: {},\"\n                  + \"renewalFailuresTotal: {})\", getUserName(), tgtEndTime,\n              metrics.renewalFailures.value(),\n              metrics.renewalFailuresTotal.value(), ie);\n          if (rp \u003d\u003d null) {\n            // Use a dummy maxRetries to create the policy. The policy will\n            // only be used to get next retry time with exponential back-off.\n            // The final retry time will be later limited within the\n            // tgt endTime in getNextTgtRenewalTime.\n            rp \u003d RetryPolicies.exponentialBackoffRetry(Long.SIZE - 2,\n                kerberosMinSecondsBeforeRelogin, TimeUnit.MILLISECONDS);\n          }\n          try {\n            nextRefresh \u003d getNextTgtRenewalTime(tgtEndTime, now, rp);\n          } catch (Exception e) {\n            LOG.error(\"Exception when calculating next tgt renewal time\", e);\n            return;\n          }\n          metrics.renewalFailures.incr();\n          // retry until close enough to tgt endTime.\n          if (now \u003e nextRefresh) {\n            LOG.error(\"TGT is expired. Aborting renew thread for {}.\",\n                getUserName());\n            return;\n          }\n        }\n      } while (runRenewalLoop);\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "bff3d7b0cf073ccc061db30af6d52fa4a9f21c05": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15382. Log kinit output in credential renewal thread. Contributed by Gabor Bota.\n",
      "commitDate": "27/04/18 10:05 AM",
      "commitName": "bff3d7b0cf073ccc061db30af6d52fa4a9f21c05",
      "commitAuthor": "Wei-Chiu Chuang",
      "commitDateOld": "26/04/18 1:54 PM",
      "commitNameOld": "bbc8dfcb8b5acd92aa3a2d945a1d51403cdde874",
      "commitAuthorOld": "Daryn Sharp",
      "daysBetweenCommits": 0.84,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,68 @@\n       public void run() {\n         String cmd \u003d conf.get(\"hadoop.kerberos.kinit.command\", \"kinit\");\n         KerberosTicket tgt \u003d getTGT();\n         if (tgt \u003d\u003d null) {\n           return;\n         }\n         long nextRefresh \u003d getRefreshTime(tgt);\n         RetryPolicy rp \u003d null;\n         while (true) {\n           try {\n             long now \u003d Time.now();\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Current time is \" + now);\n               LOG.debug(\"Next refresh is \" + nextRefresh);\n             }\n             if (now \u003c nextRefresh) {\n               Thread.sleep(nextRefresh - now);\n             }\n-            Shell.execCommand(cmd, \"-R\");\n+            String output \u003d Shell.execCommand(cmd, \"-R\");\n             if (LOG.isDebugEnabled()) {\n-              LOG.debug(\"renewed ticket\");\n+              LOG.debug(\"Renewed ticket. kinit output: {}\", output);\n             }\n             reloginFromTicketCache();\n             tgt \u003d getTGT();\n             if (tgt \u003d\u003d null) {\n               LOG.warn(\"No TGT after renewal. Aborting renew thread for \" +\n                   getUserName());\n               return;\n             }\n             nextRefresh \u003d Math.max(getRefreshTime(tgt),\n               now + kerberosMinSecondsBeforeRelogin);\n             metrics.renewalFailures.set(0);\n             rp \u003d null;\n           } catch (InterruptedException ie) {\n             LOG.warn(\"Terminating renewal thread\");\n             return;\n           } catch (IOException ie) {\n             metrics.renewalFailuresTotal.incr();\n             final long tgtEndTime \u003d tgt.getEndTime().getTime();\n             LOG.warn(\"Exception encountered while running the renewal \"\n                     + \"command for {}. (TGT end time:{}, renewalFailures: {},\"\n                     + \"renewalFailuresTotal: {})\", getUserName(), tgtEndTime,\n                 metrics.renewalFailures, metrics.renewalFailuresTotal, ie);\n             final long now \u003d Time.now();\n             if (rp \u003d\u003d null) {\n               // Use a dummy maxRetries to create the policy. The policy will\n               // only be used to get next retry time with exponential back-off.\n               // The final retry time will be later limited within the\n               // tgt endTime in getNextTgtRenewalTime.\n               rp \u003d RetryPolicies.exponentialBackoffRetry(Long.SIZE - 2,\n                   kerberosMinSecondsBeforeRelogin, TimeUnit.MILLISECONDS);\n             }\n             try {\n               nextRefresh \u003d getNextTgtRenewalTime(tgtEndTime, now, rp);\n             } catch (Exception e) {\n               LOG.error(\"Exception when calculating next tgt renewal time\", e);\n               return;\n             }\n             metrics.renewalFailures.incr();\n             // retry until close enough to tgt endTime.\n             if (now \u003e nextRefresh) {\n               LOG.error(\"TGT is expired. Aborting renew thread for {}.\",\n                   getUserName());\n               return;\n             }\n           }\n         }\n       }\n\\ No newline at end of file\n",
      "actualSource": "      public void run() {\n        String cmd \u003d conf.get(\"hadoop.kerberos.kinit.command\", \"kinit\");\n        KerberosTicket tgt \u003d getTGT();\n        if (tgt \u003d\u003d null) {\n          return;\n        }\n        long nextRefresh \u003d getRefreshTime(tgt);\n        RetryPolicy rp \u003d null;\n        while (true) {\n          try {\n            long now \u003d Time.now();\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Current time is \" + now);\n              LOG.debug(\"Next refresh is \" + nextRefresh);\n            }\n            if (now \u003c nextRefresh) {\n              Thread.sleep(nextRefresh - now);\n            }\n            String output \u003d Shell.execCommand(cmd, \"-R\");\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Renewed ticket. kinit output: {}\", output);\n            }\n            reloginFromTicketCache();\n            tgt \u003d getTGT();\n            if (tgt \u003d\u003d null) {\n              LOG.warn(\"No TGT after renewal. Aborting renew thread for \" +\n                  getUserName());\n              return;\n            }\n            nextRefresh \u003d Math.max(getRefreshTime(tgt),\n              now + kerberosMinSecondsBeforeRelogin);\n            metrics.renewalFailures.set(0);\n            rp \u003d null;\n          } catch (InterruptedException ie) {\n            LOG.warn(\"Terminating renewal thread\");\n            return;\n          } catch (IOException ie) {\n            metrics.renewalFailuresTotal.incr();\n            final long tgtEndTime \u003d tgt.getEndTime().getTime();\n            LOG.warn(\"Exception encountered while running the renewal \"\n                    + \"command for {}. (TGT end time:{}, renewalFailures: {},\"\n                    + \"renewalFailuresTotal: {})\", getUserName(), tgtEndTime,\n                metrics.renewalFailures, metrics.renewalFailuresTotal, ie);\n            final long now \u003d Time.now();\n            if (rp \u003d\u003d null) {\n              // Use a dummy maxRetries to create the policy. The policy will\n              // only be used to get next retry time with exponential back-off.\n              // The final retry time will be later limited within the\n              // tgt endTime in getNextTgtRenewalTime.\n              rp \u003d RetryPolicies.exponentialBackoffRetry(Long.SIZE - 2,\n                  kerberosMinSecondsBeforeRelogin, TimeUnit.MILLISECONDS);\n            }\n            try {\n              nextRefresh \u003d getNextTgtRenewalTime(tgtEndTime, now, rp);\n            } catch (Exception e) {\n              LOG.error(\"Exception when calculating next tgt renewal time\", e);\n              return;\n            }\n            metrics.renewalFailures.incr();\n            // retry until close enough to tgt endTime.\n            if (now \u003e nextRefresh) {\n              LOG.error(\"TGT is expired. Aborting renew thread for {}.\",\n                  getUserName());\n              return;\n            }\n          }\n        }\n      }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "367c3d41217728c2e61252c5a5235e5bc1f9822f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13590. Retry until TGT expires even if the UGI renewal thread encountered exception.\n",
      "commitDate": "09/11/16 9:07 AM",
      "commitName": "367c3d41217728c2e61252c5a5235e5bc1f9822f",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "23/10/16 10:58 AM",
      "commitNameOld": "d0a347984da175948b553a675dc357491df2fd0f",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 16.96,
      "commitsBetweenForRepo": 201,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,68 @@\n       public void run() {\n         String cmd \u003d conf.get(\"hadoop.kerberos.kinit.command\", \"kinit\");\n         KerberosTicket tgt \u003d getTGT();\n         if (tgt \u003d\u003d null) {\n           return;\n         }\n         long nextRefresh \u003d getRefreshTime(tgt);\n+        RetryPolicy rp \u003d null;\n         while (true) {\n           try {\n             long now \u003d Time.now();\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Current time is \" + now);\n               LOG.debug(\"Next refresh is \" + nextRefresh);\n             }\n             if (now \u003c nextRefresh) {\n               Thread.sleep(nextRefresh - now);\n             }\n             Shell.execCommand(cmd, \"-R\");\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"renewed ticket\");\n             }\n             reloginFromTicketCache();\n             tgt \u003d getTGT();\n             if (tgt \u003d\u003d null) {\n               LOG.warn(\"No TGT after renewal. Aborting renew thread for \" +\n                   getUserName());\n               return;\n             }\n             nextRefresh \u003d Math.max(getRefreshTime(tgt),\n               now + kerberosMinSecondsBeforeRelogin);\n+            metrics.renewalFailures.set(0);\n+            rp \u003d null;\n           } catch (InterruptedException ie) {\n             LOG.warn(\"Terminating renewal thread\");\n             return;\n           } catch (IOException ie) {\n-            LOG.warn(\"Exception encountered while running the\" +\n-                \" renewal command. Aborting renew thread. \" + ie);\n-            return;\n+            metrics.renewalFailuresTotal.incr();\n+            final long tgtEndTime \u003d tgt.getEndTime().getTime();\n+            LOG.warn(\"Exception encountered while running the renewal \"\n+                    + \"command for {}. (TGT end time:{}, renewalFailures: {},\"\n+                    + \"renewalFailuresTotal: {})\", getUserName(), tgtEndTime,\n+                metrics.renewalFailures, metrics.renewalFailuresTotal, ie);\n+            final long now \u003d Time.now();\n+            if (rp \u003d\u003d null) {\n+              // Use a dummy maxRetries to create the policy. The policy will\n+              // only be used to get next retry time with exponential back-off.\n+              // The final retry time will be later limited within the\n+              // tgt endTime in getNextTgtRenewalTime.\n+              rp \u003d RetryPolicies.exponentialBackoffRetry(Long.SIZE - 2,\n+                  kerberosMinSecondsBeforeRelogin, TimeUnit.MILLISECONDS);\n+            }\n+            try {\n+              nextRefresh \u003d getNextTgtRenewalTime(tgtEndTime, now, rp);\n+            } catch (Exception e) {\n+              LOG.error(\"Exception when calculating next tgt renewal time\", e);\n+              return;\n+            }\n+            metrics.renewalFailures.incr();\n+            // retry until close enough to tgt endTime.\n+            if (now \u003e nextRefresh) {\n+              LOG.error(\"TGT is expired. Aborting renew thread for {}.\",\n+                  getUserName());\n+              return;\n+            }\n           }\n         }\n       }\n\\ No newline at end of file\n",
      "actualSource": "      public void run() {\n        String cmd \u003d conf.get(\"hadoop.kerberos.kinit.command\", \"kinit\");\n        KerberosTicket tgt \u003d getTGT();\n        if (tgt \u003d\u003d null) {\n          return;\n        }\n        long nextRefresh \u003d getRefreshTime(tgt);\n        RetryPolicy rp \u003d null;\n        while (true) {\n          try {\n            long now \u003d Time.now();\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Current time is \" + now);\n              LOG.debug(\"Next refresh is \" + nextRefresh);\n            }\n            if (now \u003c nextRefresh) {\n              Thread.sleep(nextRefresh - now);\n            }\n            Shell.execCommand(cmd, \"-R\");\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"renewed ticket\");\n            }\n            reloginFromTicketCache();\n            tgt \u003d getTGT();\n            if (tgt \u003d\u003d null) {\n              LOG.warn(\"No TGT after renewal. Aborting renew thread for \" +\n                  getUserName());\n              return;\n            }\n            nextRefresh \u003d Math.max(getRefreshTime(tgt),\n              now + kerberosMinSecondsBeforeRelogin);\n            metrics.renewalFailures.set(0);\n            rp \u003d null;\n          } catch (InterruptedException ie) {\n            LOG.warn(\"Terminating renewal thread\");\n            return;\n          } catch (IOException ie) {\n            metrics.renewalFailuresTotal.incr();\n            final long tgtEndTime \u003d tgt.getEndTime().getTime();\n            LOG.warn(\"Exception encountered while running the renewal \"\n                    + \"command for {}. (TGT end time:{}, renewalFailures: {},\"\n                    + \"renewalFailuresTotal: {})\", getUserName(), tgtEndTime,\n                metrics.renewalFailures, metrics.renewalFailuresTotal, ie);\n            final long now \u003d Time.now();\n            if (rp \u003d\u003d null) {\n              // Use a dummy maxRetries to create the policy. The policy will\n              // only be used to get next retry time with exponential back-off.\n              // The final retry time will be later limited within the\n              // tgt endTime in getNextTgtRenewalTime.\n              rp \u003d RetryPolicies.exponentialBackoffRetry(Long.SIZE - 2,\n                  kerberosMinSecondsBeforeRelogin, TimeUnit.MILLISECONDS);\n            }\n            try {\n              nextRefresh \u003d getNextTgtRenewalTime(tgtEndTime, now, rp);\n            } catch (Exception e) {\n              LOG.error(\"Exception when calculating next tgt renewal time\", e);\n              return;\n            }\n            metrics.renewalFailures.incr();\n            // retry until close enough to tgt endTime.\n            if (now \u003e nextRefresh) {\n              LOG.error(\"TGT is expired. Aborting renew thread for {}.\",\n                  getUserName());\n              return;\n            }\n          }\n        }\n      }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "d50e06d9e0232dccf5681ae7dda5996046e7eb1c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7930. Kerberos relogin interval in UserGroupInformation should be configurable. Contributed by Robert Kanter. (harsh)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1389783 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/09/12 3:17 AM",
      "commitName": "d50e06d9e0232dccf5681ae7dda5996046e7eb1c",
      "commitAuthor": "Harsh J",
      "commitDateOld": "19/09/12 9:06 PM",
      "commitNameOld": "4c56bccf5ee1d6ec1fcef0804eacae785c4d7c18",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 5.26,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n           public void run() {\n             String cmd \u003d conf.get(\"hadoop.kerberos.kinit.command\",\n                                   \"kinit\");\n             KerberosTicket tgt \u003d getTGT();\n             if (tgt \u003d\u003d null) {\n               return;\n             }\n             long nextRefresh \u003d getRefreshTime(tgt);\n             while (true) {\n               try {\n                 long now \u003d Time.now();\n                 if(LOG.isDebugEnabled()) {\n                   LOG.debug(\"Current time is \" + now);\n                   LOG.debug(\"Next refresh is \" + nextRefresh);\n                 }\n                 if (now \u003c nextRefresh) {\n                   Thread.sleep(nextRefresh - now);\n                 }\n                 Shell.execCommand(cmd, \"-R\");\n                 if(LOG.isDebugEnabled()) {\n                   LOG.debug(\"renewed ticket\");\n                 }\n                 reloginFromTicketCache();\n                 tgt \u003d getTGT();\n                 if (tgt \u003d\u003d null) {\n                   LOG.warn(\"No TGT after renewal. Aborting renew thread for \" +\n                            getUserName());\n                   return;\n                 }\n                 nextRefresh \u003d Math.max(getRefreshTime(tgt),\n-                                       now + MIN_TIME_BEFORE_RELOGIN);\n+                                       now + kerberosMinSecondsBeforeRelogin);\n               } catch (InterruptedException ie) {\n                 LOG.warn(\"Terminating renewal thread\");\n                 return;\n               } catch (IOException ie) {\n                 LOG.warn(\"Exception encountered while running the\" +\n                     \" renewal command. Aborting renew thread. \" + ie);\n                 return;\n               }\n             }\n           }\n\\ No newline at end of file\n",
      "actualSource": "          public void run() {\n            String cmd \u003d conf.get(\"hadoop.kerberos.kinit.command\",\n                                  \"kinit\");\n            KerberosTicket tgt \u003d getTGT();\n            if (tgt \u003d\u003d null) {\n              return;\n            }\n            long nextRefresh \u003d getRefreshTime(tgt);\n            while (true) {\n              try {\n                long now \u003d Time.now();\n                if(LOG.isDebugEnabled()) {\n                  LOG.debug(\"Current time is \" + now);\n                  LOG.debug(\"Next refresh is \" + nextRefresh);\n                }\n                if (now \u003c nextRefresh) {\n                  Thread.sleep(nextRefresh - now);\n                }\n                Shell.execCommand(cmd, \"-R\");\n                if(LOG.isDebugEnabled()) {\n                  LOG.debug(\"renewed ticket\");\n                }\n                reloginFromTicketCache();\n                tgt \u003d getTGT();\n                if (tgt \u003d\u003d null) {\n                  LOG.warn(\"No TGT after renewal. Aborting renew thread for \" +\n                           getUserName());\n                  return;\n                }\n                nextRefresh \u003d Math.max(getRefreshTime(tgt),\n                                       now + kerberosMinSecondsBeforeRelogin);\n              } catch (InterruptedException ie) {\n                LOG.warn(\"Terminating renewal thread\");\n                return;\n              } catch (IOException ie) {\n                LOG.warn(\"Exception encountered while running the\" +\n                    \" renewal command. Aborting renew thread. \" + ie);\n                return;\n              }\n            }\n          }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "4a5ba3b7bd2360fd9605863630b477d362874e1e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3641. Move server Util time methods to common and use now instead of System#currentTimeMillis. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1360858 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/07/12 12:01 PM",
      "commitName": "4a5ba3b7bd2360fd9605863630b477d362874e1e",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "11/07/12 6:22 PM",
      "commitNameOld": "96d77c17cc1f792de4ae026f236e091156d28b53",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n           public void run() {\n             String cmd \u003d conf.get(\"hadoop.kerberos.kinit.command\",\n                                   \"kinit\");\n             KerberosTicket tgt \u003d getTGT();\n             if (tgt \u003d\u003d null) {\n               return;\n             }\n             long nextRefresh \u003d getRefreshTime(tgt);\n             while (true) {\n               try {\n-                long now \u003d System.currentTimeMillis();\n+                long now \u003d Time.now();\n                 if(LOG.isDebugEnabled()) {\n                   LOG.debug(\"Current time is \" + now);\n                   LOG.debug(\"Next refresh is \" + nextRefresh);\n                 }\n                 if (now \u003c nextRefresh) {\n                   Thread.sleep(nextRefresh - now);\n                 }\n                 Shell.execCommand(cmd, \"-R\");\n                 if(LOG.isDebugEnabled()) {\n                   LOG.debug(\"renewed ticket\");\n                 }\n                 reloginFromTicketCache();\n                 tgt \u003d getTGT();\n                 if (tgt \u003d\u003d null) {\n                   LOG.warn(\"No TGT after renewal. Aborting renew thread for \" +\n                            getUserName());\n                   return;\n                 }\n                 nextRefresh \u003d Math.max(getRefreshTime(tgt),\n                                        now + MIN_TIME_BEFORE_RELOGIN);\n               } catch (InterruptedException ie) {\n                 LOG.warn(\"Terminating renewal thread\");\n                 return;\n               } catch (IOException ie) {\n                 LOG.warn(\"Exception encountered while running the\" +\n                     \" renewal command. Aborting renew thread. \" + ie);\n                 return;\n               }\n             }\n           }\n\\ No newline at end of file\n",
      "actualSource": "          public void run() {\n            String cmd \u003d conf.get(\"hadoop.kerberos.kinit.command\",\n                                  \"kinit\");\n            KerberosTicket tgt \u003d getTGT();\n            if (tgt \u003d\u003d null) {\n              return;\n            }\n            long nextRefresh \u003d getRefreshTime(tgt);\n            while (true) {\n              try {\n                long now \u003d Time.now();\n                if(LOG.isDebugEnabled()) {\n                  LOG.debug(\"Current time is \" + now);\n                  LOG.debug(\"Next refresh is \" + nextRefresh);\n                }\n                if (now \u003c nextRefresh) {\n                  Thread.sleep(nextRefresh - now);\n                }\n                Shell.execCommand(cmd, \"-R\");\n                if(LOG.isDebugEnabled()) {\n                  LOG.debug(\"renewed ticket\");\n                }\n                reloginFromTicketCache();\n                tgt \u003d getTGT();\n                if (tgt \u003d\u003d null) {\n                  LOG.warn(\"No TGT after renewal. Aborting renew thread for \" +\n                           getUserName());\n                  return;\n                }\n                nextRefresh \u003d Math.max(getRefreshTime(tgt),\n                                       now + MIN_TIME_BEFORE_RELOGIN);\n              } catch (InterruptedException ie) {\n                LOG.warn(\"Terminating renewal thread\");\n                return;\n              } catch (IOException ie) {\n                LOG.warn(\"Exception encountered while running the\" +\n                    \" renewal command. Aborting renew thread. \" + ie);\n                return;\n              }\n            }\n          }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "          public void run() {\n            String cmd \u003d conf.get(\"hadoop.kerberos.kinit.command\",\n                                  \"kinit\");\n            KerberosTicket tgt \u003d getTGT();\n            if (tgt \u003d\u003d null) {\n              return;\n            }\n            long nextRefresh \u003d getRefreshTime(tgt);\n            while (true) {\n              try {\n                long now \u003d System.currentTimeMillis();\n                if(LOG.isDebugEnabled()) {\n                  LOG.debug(\"Current time is \" + now);\n                  LOG.debug(\"Next refresh is \" + nextRefresh);\n                }\n                if (now \u003c nextRefresh) {\n                  Thread.sleep(nextRefresh - now);\n                }\n                Shell.execCommand(cmd, \"-R\");\n                if(LOG.isDebugEnabled()) {\n                  LOG.debug(\"renewed ticket\");\n                }\n                reloginFromTicketCache();\n                tgt \u003d getTGT();\n                if (tgt \u003d\u003d null) {\n                  LOG.warn(\"No TGT after renewal. Aborting renew thread for \" +\n                           getUserName());\n                  return;\n                }\n                nextRefresh \u003d Math.max(getRefreshTime(tgt),\n                                       now + MIN_TIME_BEFORE_RELOGIN);\n              } catch (InterruptedException ie) {\n                LOG.warn(\"Terminating renewal thread\");\n                return;\n              } catch (IOException ie) {\n                LOG.warn(\"Exception encountered while running the\" +\n                    \" renewal command. Aborting renew thread. \" + ie);\n                return;\n              }\n            }\n          }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "          public void run() {\n            String cmd \u003d conf.get(\"hadoop.kerberos.kinit.command\",\n                                  \"kinit\");\n            KerberosTicket tgt \u003d getTGT();\n            if (tgt \u003d\u003d null) {\n              return;\n            }\n            long nextRefresh \u003d getRefreshTime(tgt);\n            while (true) {\n              try {\n                long now \u003d System.currentTimeMillis();\n                if(LOG.isDebugEnabled()) {\n                  LOG.debug(\"Current time is \" + now);\n                  LOG.debug(\"Next refresh is \" + nextRefresh);\n                }\n                if (now \u003c nextRefresh) {\n                  Thread.sleep(nextRefresh - now);\n                }\n                Shell.execCommand(cmd, \"-R\");\n                if(LOG.isDebugEnabled()) {\n                  LOG.debug(\"renewed ticket\");\n                }\n                reloginFromTicketCache();\n                tgt \u003d getTGT();\n                if (tgt \u003d\u003d null) {\n                  LOG.warn(\"No TGT after renewal. Aborting renew thread for \" +\n                           getUserName());\n                  return;\n                }\n                nextRefresh \u003d Math.max(getRefreshTime(tgt),\n                                       now + MIN_TIME_BEFORE_RELOGIN);\n              } catch (InterruptedException ie) {\n                LOG.warn(\"Terminating renewal thread\");\n                return;\n              } catch (IOException ie) {\n                LOG.warn(\"Exception encountered while running the\" +\n                    \" renewal command. Aborting renew thread. \" + ie);\n                return;\n              }\n            }\n          }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/security/UserGroupInformation.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/security/UserGroupInformation.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "          public void run() {\n            String cmd \u003d conf.get(\"hadoop.kerberos.kinit.command\",\n                                  \"kinit\");\n            KerberosTicket tgt \u003d getTGT();\n            if (tgt \u003d\u003d null) {\n              return;\n            }\n            long nextRefresh \u003d getRefreshTime(tgt);\n            while (true) {\n              try {\n                long now \u003d System.currentTimeMillis();\n                if(LOG.isDebugEnabled()) {\n                  LOG.debug(\"Current time is \" + now);\n                  LOG.debug(\"Next refresh is \" + nextRefresh);\n                }\n                if (now \u003c nextRefresh) {\n                  Thread.sleep(nextRefresh - now);\n                }\n                Shell.execCommand(cmd, \"-R\");\n                if(LOG.isDebugEnabled()) {\n                  LOG.debug(\"renewed ticket\");\n                }\n                reloginFromTicketCache();\n                tgt \u003d getTGT();\n                if (tgt \u003d\u003d null) {\n                  LOG.warn(\"No TGT after renewal. Aborting renew thread for \" +\n                           getUserName());\n                  return;\n                }\n                nextRefresh \u003d Math.max(getRefreshTime(tgt),\n                                       now + MIN_TIME_BEFORE_RELOGIN);\n              } catch (InterruptedException ie) {\n                LOG.warn(\"Terminating renewal thread\");\n                return;\n              } catch (IOException ie) {\n                LOG.warn(\"Exception encountered while running the\" +\n                    \" renewal command. Aborting renew thread. \" + ie);\n                return;\n              }\n            }\n          }",
      "path": "common/src/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/security/UserGroupInformation.java",
        "newPath": "common/src/java/org/apache/hadoop/security/UserGroupInformation.java"
      }
    },
    "7d6fa858ca41ee6e2632ebc455194ef231ccfd74": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7229. Do not default to an absolute path for kinit in Kerberos auto-renewal thread. Contributed by Aaron T. Myers.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1095563 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/04/11 4:53 PM",
      "commitName": "7d6fa858ca41ee6e2632ebc455194ef231ccfd74",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "07/03/11 5:19 PM",
      "commitNameOld": "aac547249134ec4f9d5229d28e4fdeef0f6f0dbb",
      "commitAuthorOld": "Jitendra Nath Pandey",
      "daysBetweenCommits": 43.94,
      "commitsBetweenForRepo": 41,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n           public void run() {\n             String cmd \u003d conf.get(\"hadoop.kerberos.kinit.command\",\n-                                  \"/usr/kerberos/bin/kinit\");\n+                                  \"kinit\");\n             KerberosTicket tgt \u003d getTGT();\n             if (tgt \u003d\u003d null) {\n               return;\n             }\n             long nextRefresh \u003d getRefreshTime(tgt);\n             while (true) {\n               try {\n                 long now \u003d System.currentTimeMillis();\n                 if(LOG.isDebugEnabled()) {\n                   LOG.debug(\"Current time is \" + now);\n                   LOG.debug(\"Next refresh is \" + nextRefresh);\n                 }\n                 if (now \u003c nextRefresh) {\n                   Thread.sleep(nextRefresh - now);\n                 }\n                 Shell.execCommand(cmd, \"-R\");\n                 if(LOG.isDebugEnabled()) {\n                   LOG.debug(\"renewed ticket\");\n                 }\n                 reloginFromTicketCache();\n                 tgt \u003d getTGT();\n                 if (tgt \u003d\u003d null) {\n                   LOG.warn(\"No TGT after renewal. Aborting renew thread for \" +\n                            getUserName());\n                   return;\n                 }\n                 nextRefresh \u003d Math.max(getRefreshTime(tgt),\n                                        now + MIN_TIME_BEFORE_RELOGIN);\n               } catch (InterruptedException ie) {\n                 LOG.warn(\"Terminating renewal thread\");\n                 return;\n               } catch (IOException ie) {\n                 LOG.warn(\"Exception encountered while running the\" +\n                     \" renewal command. Aborting renew thread. \" + ie);\n                 return;\n               }\n             }\n           }\n\\ No newline at end of file\n",
      "actualSource": "          public void run() {\n            String cmd \u003d conf.get(\"hadoop.kerberos.kinit.command\",\n                                  \"kinit\");\n            KerberosTicket tgt \u003d getTGT();\n            if (tgt \u003d\u003d null) {\n              return;\n            }\n            long nextRefresh \u003d getRefreshTime(tgt);\n            while (true) {\n              try {\n                long now \u003d System.currentTimeMillis();\n                if(LOG.isDebugEnabled()) {\n                  LOG.debug(\"Current time is \" + now);\n                  LOG.debug(\"Next refresh is \" + nextRefresh);\n                }\n                if (now \u003c nextRefresh) {\n                  Thread.sleep(nextRefresh - now);\n                }\n                Shell.execCommand(cmd, \"-R\");\n                if(LOG.isDebugEnabled()) {\n                  LOG.debug(\"renewed ticket\");\n                }\n                reloginFromTicketCache();\n                tgt \u003d getTGT();\n                if (tgt \u003d\u003d null) {\n                  LOG.warn(\"No TGT after renewal. Aborting renew thread for \" +\n                           getUserName());\n                  return;\n                }\n                nextRefresh \u003d Math.max(getRefreshTime(tgt),\n                                       now + MIN_TIME_BEFORE_RELOGIN);\n              } catch (InterruptedException ie) {\n                LOG.warn(\"Terminating renewal thread\");\n                return;\n              } catch (IOException ie) {\n                LOG.warn(\"Exception encountered while running the\" +\n                    \" renewal command. Aborting renew thread. \" + ie);\n                return;\n              }\n            }\n          }",
      "path": "src/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "7efb9640be26aabe3878310e82248a1b6b767a9a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6884. Add LOG.isDebugEnabled() guard for each LOG.debug(..).  Contributed by Erik Steffl\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@990460 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/08/10 3:44 PM",
      "commitName": "7efb9640be26aabe3878310e82248a1b6b767a9a",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "17/08/10 1:03 PM",
      "commitNameOld": "6fe92180fa0da054f46dc63e095a10e1964a9cf9",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 11.11,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,41 @@\n           public void run() {\n             String cmd \u003d conf.get(\"hadoop.kerberos.kinit.command\",\n                                   \"/usr/kerberos/bin/kinit\");\n             KerberosTicket tgt \u003d getTGT();\n             if (tgt \u003d\u003d null) {\n               return;\n             }\n             long nextRefresh \u003d getRefreshTime(tgt);\n             while (true) {\n               try {\n                 long now \u003d System.currentTimeMillis();\n-                LOG.debug(\"Current time is \" + now);\n-                LOG.debug(\"Next refresh is \" + nextRefresh);\n+                if(LOG.isDebugEnabled()) {\n+                  LOG.debug(\"Current time is \" + now);\n+                  LOG.debug(\"Next refresh is \" + nextRefresh);\n+                }\n                 if (now \u003c nextRefresh) {\n                   Thread.sleep(nextRefresh - now);\n                 }\n                 Shell.execCommand(cmd, \"-R\");\n-                LOG.debug(\"renewed ticket\");\n+                if(LOG.isDebugEnabled()) {\n+                  LOG.debug(\"renewed ticket\");\n+                }\n                 reloginFromTicketCache();\n                 tgt \u003d getTGT();\n                 if (tgt \u003d\u003d null) {\n                   LOG.warn(\"No TGT after renewal. Aborting renew thread for \" +\n                            getUserName());\n                   return;\n                 }\n                 nextRefresh \u003d Math.max(getRefreshTime(tgt),\n                                        now + MIN_TIME_BEFORE_RELOGIN);\n               } catch (InterruptedException ie) {\n                 LOG.warn(\"Terminating renewal thread\");\n                 return;\n               } catch (IOException ie) {\n                 LOG.warn(\"Exception encountered while running the\" +\n                     \" renewal command. Aborting renew thread. \" + ie);\n                 return;\n               }\n             }\n           }\n\\ No newline at end of file\n",
      "actualSource": "          public void run() {\n            String cmd \u003d conf.get(\"hadoop.kerberos.kinit.command\",\n                                  \"/usr/kerberos/bin/kinit\");\n            KerberosTicket tgt \u003d getTGT();\n            if (tgt \u003d\u003d null) {\n              return;\n            }\n            long nextRefresh \u003d getRefreshTime(tgt);\n            while (true) {\n              try {\n                long now \u003d System.currentTimeMillis();\n                if(LOG.isDebugEnabled()) {\n                  LOG.debug(\"Current time is \" + now);\n                  LOG.debug(\"Next refresh is \" + nextRefresh);\n                }\n                if (now \u003c nextRefresh) {\n                  Thread.sleep(nextRefresh - now);\n                }\n                Shell.execCommand(cmd, \"-R\");\n                if(LOG.isDebugEnabled()) {\n                  LOG.debug(\"renewed ticket\");\n                }\n                reloginFromTicketCache();\n                tgt \u003d getTGT();\n                if (tgt \u003d\u003d null) {\n                  LOG.warn(\"No TGT after renewal. Aborting renew thread for \" +\n                           getUserName());\n                  return;\n                }\n                nextRefresh \u003d Math.max(getRefreshTime(tgt),\n                                       now + MIN_TIME_BEFORE_RELOGIN);\n              } catch (InterruptedException ie) {\n                LOG.warn(\"Terminating renewal thread\");\n                return;\n              } catch (IOException ie) {\n                LOG.warn(\"Exception encountered while running the\" +\n                    \" renewal command. Aborting renew thread. \" + ie);\n                return;\n              }\n            }\n          }",
      "path": "src/java/org/apache/hadoop/security/UserGroupInformation.java",
      "extendedDetails": {}
    },
    "1a6ed79ebf6649d4f0828b8c2adff26d0f79832f": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-6656. Adds a thread in the UserGroupInformation to renew TGTs periodically. Contributed by Owen O\u0027Malley and Devaraj Das.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@980518 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/07/10 10:29 AM",
      "commitName": "1a6ed79ebf6649d4f0828b8c2adff26d0f79832f",
      "commitAuthor": "Devaraj Das",
      "diff": "@@ -0,0 +1,37 @@\n+          public void run() {\n+            String cmd \u003d conf.get(\"hadoop.kerberos.kinit.command\",\n+                                  \"/usr/kerberos/bin/kinit\");\n+            KerberosTicket tgt \u003d getTGT();\n+            if (tgt \u003d\u003d null) {\n+              return;\n+            }\n+            long nextRefresh \u003d getRefreshTime(tgt);\n+            while (true) {\n+              try {\n+                long now \u003d System.currentTimeMillis();\n+                LOG.debug(\"Current time is \" + now);\n+                LOG.debug(\"Next refresh is \" + nextRefresh);\n+                if (now \u003c nextRefresh) {\n+                  Thread.sleep(nextRefresh - now);\n+                }\n+                Shell.execCommand(cmd, \"-R\");\n+                LOG.debug(\"renewed ticket\");\n+                reloginFromTicketCache();\n+                tgt \u003d getTGT();\n+                if (tgt \u003d\u003d null) {\n+                  LOG.warn(\"No TGT after renewal. Aborting renew thread for \" +\n+                           getUserName());\n+                  return;\n+                }\n+                nextRefresh \u003d Math.max(getRefreshTime(tgt),\n+                                       now + MIN_TIME_BEFORE_RELOGIN);\n+              } catch (InterruptedException ie) {\n+                LOG.warn(\"Terminating renewal thread\");\n+                return;\n+              } catch (IOException ie) {\n+                LOG.warn(\"Exception encountered while running the\" +\n+                    \" renewal command. Aborting renew thread. \" + ie);\n+                return;\n+              }\n+            }\n+          }\n\\ No newline at end of file\n",
      "actualSource": "          public void run() {\n            String cmd \u003d conf.get(\"hadoop.kerberos.kinit.command\",\n                                  \"/usr/kerberos/bin/kinit\");\n            KerberosTicket tgt \u003d getTGT();\n            if (tgt \u003d\u003d null) {\n              return;\n            }\n            long nextRefresh \u003d getRefreshTime(tgt);\n            while (true) {\n              try {\n                long now \u003d System.currentTimeMillis();\n                LOG.debug(\"Current time is \" + now);\n                LOG.debug(\"Next refresh is \" + nextRefresh);\n                if (now \u003c nextRefresh) {\n                  Thread.sleep(nextRefresh - now);\n                }\n                Shell.execCommand(cmd, \"-R\");\n                LOG.debug(\"renewed ticket\");\n                reloginFromTicketCache();\n                tgt \u003d getTGT();\n                if (tgt \u003d\u003d null) {\n                  LOG.warn(\"No TGT after renewal. Aborting renew thread for \" +\n                           getUserName());\n                  return;\n                }\n                nextRefresh \u003d Math.max(getRefreshTime(tgt),\n                                       now + MIN_TIME_BEFORE_RELOGIN);\n              } catch (InterruptedException ie) {\n                LOG.warn(\"Terminating renewal thread\");\n                return;\n              } catch (IOException ie) {\n                LOG.warn(\"Exception encountered while running the\" +\n                    \" renewal command. Aborting renew thread. \" + ie);\n                return;\n              }\n            }\n          }",
      "path": "src/java/org/apache/hadoop/security/UserGroupInformation.java"
    }
  }
}