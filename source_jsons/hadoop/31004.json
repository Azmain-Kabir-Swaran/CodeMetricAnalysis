{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NodesBlock.java",
  "functionName": "render",
  "functionId": "render___html-Block",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-router/src/main/java/org/apache/hadoop/yarn/server/router/webapp/NodesBlock.java",
  "functionStartLine": 53,
  "functionEndLine": 108,
  "numCommitsSeen": 2,
  "timeTaken": 1073,
  "changeHistory": [
    "25361b077bd34606259dac5a00c41faddd2dfc7d",
    "ceca9694f9a0c78d07cab2c382036f175183e67b"
  ],
  "changeHistoryShort": {
    "25361b077bd34606259dac5a00c41faddd2dfc7d": "Ybodychange",
    "ceca9694f9a0c78d07cab2c382036f175183e67b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "25361b077bd34606259dac5a00c41faddd2dfc7d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10120. Https Support in Router WebServiceClient.\n\nContributed by Bilwa S T.\n",
      "commitDate": "02/04/20 5:41 AM",
      "commitName": "25361b077bd34606259dac5a00c41faddd2dfc7d",
      "commitAuthor": "Prabhu Joseph",
      "commitDateOld": "02/10/17 1:03 PM",
      "commitNameOld": "ceca9694f9a0c78d07cab2c382036f175183e67b",
      "commitAuthorOld": "Carlo Curino",
      "daysBetweenCommits": 912.69,
      "commitsBetweenForRepo": 6784,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,56 @@\n   protected void render(Block html) {\n     // Get the node info from the federation\n     Configuration conf \u003d this.router.getConfig();\n     String webAppAddress \u003d WebAppUtils.getRouterWebAppURLWithScheme(conf);\n     NodesInfo nodes \u003d RouterWebServiceUtil.genericForward(webAppAddress, null,\n         NodesInfo.class, HTTPMethods.GET,\n-        RMWSConsts.RM_WEB_SERVICE_PATH + RMWSConsts.NODES, null, null);\n+        RMWSConsts.RM_WEB_SERVICE_PATH + RMWSConsts.NODES, null, null, conf);\n \n     setTitle(\"Nodes\");\n \n     TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.table(\"#nodes\").thead().tr()\n         .th(\".nodelabels\", \"Node Labels\")\n         .th(\".rack\", \"Rack\")\n         .th(\".state\", \"Node State\")\n         .th(\".nodeaddress\", \"Node Address\")\n         .th(\".nodehttpaddress\", \"Node HTTP Address\")\n         .th(\".lastHealthUpdate\", \"Last health-update\")\n         .th(\".healthReport\", \"Health-report\")\n         .th(\".containers\", \"Containers\")\n         .th(\".mem\", \"Mem Used\")\n         .th(\".mem\", \"Mem Avail\")\n         .th(\".vcores\", \"VCores Used\")\n         .th(\".vcores\", \"VCores Avail\")\n         .th(\".nodeManagerVersion\", \"Version\")\n         .__().__().tbody();\n \n     // Add nodes to the web UI\n     for (NodeInfo info : nodes.getNodes()) {\n       int usedMemory \u003d (int) info.getUsedMemory();\n       int availableMemory \u003d (int) info.getAvailableMemory();\n       TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d tbody.tr();\n       row.td().__(StringUtils.join(\",\", info.getNodeLabels())).__();\n       row.td().__(info.getRack()).__();\n       row.td().__(info.getState()).__();\n       row.td().__(info.getNodeId()).__();\n       boolean isInactive \u003d false;\n       if (isInactive) {\n         row.td().__(\"N/A\").__();\n       } else {\n         String httpAddress \u003d info.getNodeHTTPAddress();\n         row.td().a(\"//\" + httpAddress, httpAddress).__();\n       }\n       row.td().br().$title(String.valueOf(info.getLastHealthUpdate())).__()\n           .__(Times.format(info.getLastHealthUpdate())).__()\n           .td(info.getHealthReport())\n           .td(String.valueOf(info.getNumContainers())).td().br()\n           .$title(String.valueOf(usedMemory)).__()\n           .__(StringUtils.byteDesc(usedMemory * BYTES_IN_MB)).__().td().br()\n           .$title(String.valueOf(availableMemory)).__()\n           .__(StringUtils.byteDesc(availableMemory * BYTES_IN_MB)).__()\n           .td(String.valueOf(info.getUsedVirtualCores()))\n           .td(String.valueOf(info.getAvailableVirtualCores()))\n           .td(info.getVersion()).__();\n     }\n     tbody.__().__();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    // Get the node info from the federation\n    Configuration conf \u003d this.router.getConfig();\n    String webAppAddress \u003d WebAppUtils.getRouterWebAppURLWithScheme(conf);\n    NodesInfo nodes \u003d RouterWebServiceUtil.genericForward(webAppAddress, null,\n        NodesInfo.class, HTTPMethods.GET,\n        RMWSConsts.RM_WEB_SERVICE_PATH + RMWSConsts.NODES, null, null, conf);\n\n    setTitle(\"Nodes\");\n\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.table(\"#nodes\").thead().tr()\n        .th(\".nodelabels\", \"Node Labels\")\n        .th(\".rack\", \"Rack\")\n        .th(\".state\", \"Node State\")\n        .th(\".nodeaddress\", \"Node Address\")\n        .th(\".nodehttpaddress\", \"Node HTTP Address\")\n        .th(\".lastHealthUpdate\", \"Last health-update\")\n        .th(\".healthReport\", \"Health-report\")\n        .th(\".containers\", \"Containers\")\n        .th(\".mem\", \"Mem Used\")\n        .th(\".mem\", \"Mem Avail\")\n        .th(\".vcores\", \"VCores Used\")\n        .th(\".vcores\", \"VCores Avail\")\n        .th(\".nodeManagerVersion\", \"Version\")\n        .__().__().tbody();\n\n    // Add nodes to the web UI\n    for (NodeInfo info : nodes.getNodes()) {\n      int usedMemory \u003d (int) info.getUsedMemory();\n      int availableMemory \u003d (int) info.getAvailableMemory();\n      TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d tbody.tr();\n      row.td().__(StringUtils.join(\",\", info.getNodeLabels())).__();\n      row.td().__(info.getRack()).__();\n      row.td().__(info.getState()).__();\n      row.td().__(info.getNodeId()).__();\n      boolean isInactive \u003d false;\n      if (isInactive) {\n        row.td().__(\"N/A\").__();\n      } else {\n        String httpAddress \u003d info.getNodeHTTPAddress();\n        row.td().a(\"//\" + httpAddress, httpAddress).__();\n      }\n      row.td().br().$title(String.valueOf(info.getLastHealthUpdate())).__()\n          .__(Times.format(info.getLastHealthUpdate())).__()\n          .td(info.getHealthReport())\n          .td(String.valueOf(info.getNumContainers())).td().br()\n          .$title(String.valueOf(usedMemory)).__()\n          .__(StringUtils.byteDesc(usedMemory * BYTES_IN_MB)).__().td().br()\n          .$title(String.valueOf(availableMemory)).__()\n          .__(StringUtils.byteDesc(availableMemory * BYTES_IN_MB)).__()\n          .td(String.valueOf(info.getUsedVirtualCores()))\n          .td(String.valueOf(info.getAvailableVirtualCores()))\n          .td(info.getVersion()).__();\n    }\n    tbody.__().__();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-router/src/main/java/org/apache/hadoop/yarn/server/router/webapp/NodesBlock.java",
      "extendedDetails": {}
    },
    "ceca9694f9a0c78d07cab2c382036f175183e67b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3661. Basic Federation UI. (Contributed by Inigo Goiri via curino)\n",
      "commitDate": "02/10/17 1:03 PM",
      "commitName": "ceca9694f9a0c78d07cab2c382036f175183e67b",
      "commitAuthor": "Carlo Curino",
      "diff": "@@ -0,0 +1,56 @@\n+  protected void render(Block html) {\n+    // Get the node info from the federation\n+    Configuration conf \u003d this.router.getConfig();\n+    String webAppAddress \u003d WebAppUtils.getRouterWebAppURLWithScheme(conf);\n+    NodesInfo nodes \u003d RouterWebServiceUtil.genericForward(webAppAddress, null,\n+        NodesInfo.class, HTTPMethods.GET,\n+        RMWSConsts.RM_WEB_SERVICE_PATH + RMWSConsts.NODES, null, null);\n+\n+    setTitle(\"Nodes\");\n+\n+    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.table(\"#nodes\").thead().tr()\n+        .th(\".nodelabels\", \"Node Labels\")\n+        .th(\".rack\", \"Rack\")\n+        .th(\".state\", \"Node State\")\n+        .th(\".nodeaddress\", \"Node Address\")\n+        .th(\".nodehttpaddress\", \"Node HTTP Address\")\n+        .th(\".lastHealthUpdate\", \"Last health-update\")\n+        .th(\".healthReport\", \"Health-report\")\n+        .th(\".containers\", \"Containers\")\n+        .th(\".mem\", \"Mem Used\")\n+        .th(\".mem\", \"Mem Avail\")\n+        .th(\".vcores\", \"VCores Used\")\n+        .th(\".vcores\", \"VCores Avail\")\n+        .th(\".nodeManagerVersion\", \"Version\")\n+        .__().__().tbody();\n+\n+    // Add nodes to the web UI\n+    for (NodeInfo info : nodes.getNodes()) {\n+      int usedMemory \u003d (int) info.getUsedMemory();\n+      int availableMemory \u003d (int) info.getAvailableMemory();\n+      TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d tbody.tr();\n+      row.td().__(StringUtils.join(\",\", info.getNodeLabels())).__();\n+      row.td().__(info.getRack()).__();\n+      row.td().__(info.getState()).__();\n+      row.td().__(info.getNodeId()).__();\n+      boolean isInactive \u003d false;\n+      if (isInactive) {\n+        row.td().__(\"N/A\").__();\n+      } else {\n+        String httpAddress \u003d info.getNodeHTTPAddress();\n+        row.td().a(\"//\" + httpAddress, httpAddress).__();\n+      }\n+      row.td().br().$title(String.valueOf(info.getLastHealthUpdate())).__()\n+          .__(Times.format(info.getLastHealthUpdate())).__()\n+          .td(info.getHealthReport())\n+          .td(String.valueOf(info.getNumContainers())).td().br()\n+          .$title(String.valueOf(usedMemory)).__()\n+          .__(StringUtils.byteDesc(usedMemory * BYTES_IN_MB)).__().td().br()\n+          .$title(String.valueOf(availableMemory)).__()\n+          .__(StringUtils.byteDesc(availableMemory * BYTES_IN_MB)).__()\n+          .td(String.valueOf(info.getUsedVirtualCores()))\n+          .td(String.valueOf(info.getAvailableVirtualCores()))\n+          .td(info.getVersion()).__();\n+    }\n+    tbody.__().__();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void render(Block html) {\n    // Get the node info from the federation\n    Configuration conf \u003d this.router.getConfig();\n    String webAppAddress \u003d WebAppUtils.getRouterWebAppURLWithScheme(conf);\n    NodesInfo nodes \u003d RouterWebServiceUtil.genericForward(webAppAddress, null,\n        NodesInfo.class, HTTPMethods.GET,\n        RMWSConsts.RM_WEB_SERVICE_PATH + RMWSConsts.NODES, null, null);\n\n    setTitle(\"Nodes\");\n\n    TBODY\u003cTABLE\u003cHamlet\u003e\u003e tbody \u003d html.table(\"#nodes\").thead().tr()\n        .th(\".nodelabels\", \"Node Labels\")\n        .th(\".rack\", \"Rack\")\n        .th(\".state\", \"Node State\")\n        .th(\".nodeaddress\", \"Node Address\")\n        .th(\".nodehttpaddress\", \"Node HTTP Address\")\n        .th(\".lastHealthUpdate\", \"Last health-update\")\n        .th(\".healthReport\", \"Health-report\")\n        .th(\".containers\", \"Containers\")\n        .th(\".mem\", \"Mem Used\")\n        .th(\".mem\", \"Mem Avail\")\n        .th(\".vcores\", \"VCores Used\")\n        .th(\".vcores\", \"VCores Avail\")\n        .th(\".nodeManagerVersion\", \"Version\")\n        .__().__().tbody();\n\n    // Add nodes to the web UI\n    for (NodeInfo info : nodes.getNodes()) {\n      int usedMemory \u003d (int) info.getUsedMemory();\n      int availableMemory \u003d (int) info.getAvailableMemory();\n      TR\u003cTBODY\u003cTABLE\u003cHamlet\u003e\u003e\u003e row \u003d tbody.tr();\n      row.td().__(StringUtils.join(\",\", info.getNodeLabels())).__();\n      row.td().__(info.getRack()).__();\n      row.td().__(info.getState()).__();\n      row.td().__(info.getNodeId()).__();\n      boolean isInactive \u003d false;\n      if (isInactive) {\n        row.td().__(\"N/A\").__();\n      } else {\n        String httpAddress \u003d info.getNodeHTTPAddress();\n        row.td().a(\"//\" + httpAddress, httpAddress).__();\n      }\n      row.td().br().$title(String.valueOf(info.getLastHealthUpdate())).__()\n          .__(Times.format(info.getLastHealthUpdate())).__()\n          .td(info.getHealthReport())\n          .td(String.valueOf(info.getNumContainers())).td().br()\n          .$title(String.valueOf(usedMemory)).__()\n          .__(StringUtils.byteDesc(usedMemory * BYTES_IN_MB)).__().td().br()\n          .$title(String.valueOf(availableMemory)).__()\n          .__(StringUtils.byteDesc(availableMemory * BYTES_IN_MB)).__()\n          .td(String.valueOf(info.getUsedVirtualCores()))\n          .td(String.valueOf(info.getAvailableVirtualCores()))\n          .td(info.getVersion()).__();\n    }\n    tbody.__().__();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-router/src/main/java/org/apache/hadoop/yarn/server/router/webapp/NodesBlock.java"
    }
  }
}