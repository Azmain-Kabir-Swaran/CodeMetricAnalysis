{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSNamesystem.java",
  "functionName": "logAuditEvent",
  "functionId": "logAuditEvent___succeeded-boolean__userName-String__addr-InetAddress__cmd-String__src-String__dst-String__status-FileStatus__callerContext-CallerContext__ugi-UserGroupInformation__dtSecretManager-DelegationTokenSecretManager",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
  "functionStartLine": 8504,
  "functionEndLine": 8567,
  "numCommitsSeen": 1510,
  "timeTaken": 42667,
  "changeHistory": [
    "fb8932a727f757b2e9c1c61a18145878d0eb77bd",
    "8a9388e5f6d622152798aaaa256064919e4fec37",
    "85cd06f6636f295ad1f3bf2a90063f4714c9cca7",
    "796a676d18bd7cd3ed4113d002e0e69cf261d6d1",
    "3cde6931cb5055a9d92503f4ecefa35571e7b07f",
    "600ad7bf4104bcaeec00a4089d59bb1fdf423299",
    "3bef7c80a97709b367781180b2e11fc50653d3c8",
    "0532b8bad1bc4a528d39e9ca951b7beecc57be10",
    "34f08944b7c8d58f531a3f3bf3d4ee4cd3fa643a",
    "7094738d84c61cbac9a4b82a71d7e63f6a3e3c7c"
  ],
  "changeHistoryShort": {
    "fb8932a727f757b2e9c1c61a18145878d0eb77bd": "Ybodychange",
    "8a9388e5f6d622152798aaaa256064919e4fec37": "Ybodychange",
    "85cd06f6636f295ad1f3bf2a90063f4714c9cca7": "Ybodychange",
    "796a676d18bd7cd3ed4113d002e0e69cf261d6d1": "Ybodychange",
    "3cde6931cb5055a9d92503f4ecefa35571e7b07f": "Ybodychange",
    "600ad7bf4104bcaeec00a4089d59bb1fdf423299": "Ymultichange(Yparameterchange,Ybodychange)",
    "3bef7c80a97709b367781180b2e11fc50653d3c8": "Ybodychange",
    "0532b8bad1bc4a528d39e9ca951b7beecc57be10": "Ybodychange",
    "34f08944b7c8d58f531a3f3bf3d4ee4cd3fa643a": "Ybodychange",
    "7094738d84c61cbac9a4b82a71d7e63f6a3e3c7c": "Ybodychange"
  },
  "changeHistoryDetails": {
    "fb8932a727f757b2e9c1c61a18145878d0eb77bd": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16029. Consecutive StringBuilder.append can be reused. Contributed by Ayush Saxena.\n",
      "commitDate": "11/01/19 10:54 AM",
      "commitName": "fb8932a727f757b2e9c1c61a18145878d0eb77bd",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "24/12/18 9:34 AM",
      "commitNameOld": "8c491350789a676cc8fbefab6414773054b9b495",
      "commitAuthorOld": "Chao Sun",
      "daysBetweenCommits": 18.06,
      "commitsBetweenForRepo": 92,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,64 @@\n     public void logAuditEvent(boolean succeeded, String userName,\n         InetAddress addr, String cmd, String src, String dst,\n         FileStatus status, CallerContext callerContext, UserGroupInformation ugi,\n         DelegationTokenSecretManager dtSecretManager) {\n \n       if (auditLog.isDebugEnabled() ||\n           (auditLog.isInfoEnabled() \u0026\u0026 !debugCmdSet.contains(cmd))) {\n         final StringBuilder sb \u003d STRING_BUILDER.get();\n         src \u003d escapeJava(src);\n         dst \u003d escapeJava(dst);\n         sb.setLength(0);\n-        sb.append(\"allowed\u003d\").append(succeeded).append(\"\\t\");\n-        sb.append(\"ugi\u003d\").append(userName).append(\"\\t\");\n-        sb.append(\"ip\u003d\").append(addr).append(\"\\t\");\n-        sb.append(\"cmd\u003d\").append(cmd).append(\"\\t\");\n-        sb.append(\"src\u003d\").append(src).append(\"\\t\");\n-        sb.append(\"dst\u003d\").append(dst).append(\"\\t\");\n+        sb.append(\"allowed\u003d\").append(succeeded).append(\"\\t\")\n+            .append(\"ugi\u003d\").append(userName).append(\"\\t\")\n+            .append(\"ip\u003d\").append(addr).append(\"\\t\")\n+            .append(\"cmd\u003d\").append(cmd).append(\"\\t\")\n+            .append(\"src\u003d\").append(src).append(\"\\t\")\n+            .append(\"dst\u003d\").append(dst).append(\"\\t\");\n         if (null \u003d\u003d status) {\n           sb.append(\"perm\u003dnull\");\n         } else {\n-          sb.append(\"perm\u003d\");\n-          sb.append(status.getOwner()).append(\":\");\n-          sb.append(status.getGroup()).append(\":\");\n-          sb.append(status.getPermission());\n+          sb.append(\"perm\u003d\")\n+              .append(status.getOwner()).append(\":\")\n+              .append(status.getGroup()).append(\":\")\n+              .append(status.getPermission());\n         }\n         if (logTokenTrackingId) {\n           sb.append(\"\\t\").append(\"trackingId\u003d\");\n           String trackingId \u003d null;\n           if (ugi !\u003d null \u0026\u0026 dtSecretManager !\u003d null\n               \u0026\u0026 ugi.getAuthenticationMethod() \u003d\u003d AuthenticationMethod.TOKEN) {\n             for (TokenIdentifier tid: ugi.getTokenIdentifiers()) {\n               if (tid instanceof DelegationTokenIdentifier) {\n                 DelegationTokenIdentifier dtid \u003d\n                     (DelegationTokenIdentifier)tid;\n                 trackingId \u003d dtSecretManager.getTokenTrackingId(dtid);\n                 break;\n               }\n             }\n           }\n           sb.append(trackingId);\n         }\n-        sb.append(\"\\t\").append(\"proto\u003d\");\n-        sb.append(Server.getProtocol());\n+        sb.append(\"\\t\").append(\"proto\u003d\")\n+            .append(Server.getProtocol());\n         if (isCallerContextEnabled \u0026\u0026\n             callerContext !\u003d null \u0026\u0026\n             callerContext.isContextValid()) {\n           sb.append(\"\\t\").append(\"callerContext\u003d\");\n           if (callerContext.getContext().length() \u003e callerContextMaxLen) {\n             sb.append(callerContext.getContext().substring(0,\n                 callerContextMaxLen));\n           } else {\n             sb.append(callerContext.getContext());\n           }\n           if (callerContext.getSignature() !\u003d null \u0026\u0026\n               callerContext.getSignature().length \u003e 0 \u0026\u0026\n               callerContext.getSignature().length \u003c\u003d callerSignatureMaxLen) {\n-            sb.append(\":\");\n-            sb.append(new String(callerContext.getSignature(),\n+            sb.append(\":\")\n+                .append(new String(callerContext.getSignature(),\n                 CallerContext.SIGNATURE_ENCODING));\n           }\n         }\n         logAuditMessage(sb.toString());\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void logAuditEvent(boolean succeeded, String userName,\n        InetAddress addr, String cmd, String src, String dst,\n        FileStatus status, CallerContext callerContext, UserGroupInformation ugi,\n        DelegationTokenSecretManager dtSecretManager) {\n\n      if (auditLog.isDebugEnabled() ||\n          (auditLog.isInfoEnabled() \u0026\u0026 !debugCmdSet.contains(cmd))) {\n        final StringBuilder sb \u003d STRING_BUILDER.get();\n        src \u003d escapeJava(src);\n        dst \u003d escapeJava(dst);\n        sb.setLength(0);\n        sb.append(\"allowed\u003d\").append(succeeded).append(\"\\t\")\n            .append(\"ugi\u003d\").append(userName).append(\"\\t\")\n            .append(\"ip\u003d\").append(addr).append(\"\\t\")\n            .append(\"cmd\u003d\").append(cmd).append(\"\\t\")\n            .append(\"src\u003d\").append(src).append(\"\\t\")\n            .append(\"dst\u003d\").append(dst).append(\"\\t\");\n        if (null \u003d\u003d status) {\n          sb.append(\"perm\u003dnull\");\n        } else {\n          sb.append(\"perm\u003d\")\n              .append(status.getOwner()).append(\":\")\n              .append(status.getGroup()).append(\":\")\n              .append(status.getPermission());\n        }\n        if (logTokenTrackingId) {\n          sb.append(\"\\t\").append(\"trackingId\u003d\");\n          String trackingId \u003d null;\n          if (ugi !\u003d null \u0026\u0026 dtSecretManager !\u003d null\n              \u0026\u0026 ugi.getAuthenticationMethod() \u003d\u003d AuthenticationMethod.TOKEN) {\n            for (TokenIdentifier tid: ugi.getTokenIdentifiers()) {\n              if (tid instanceof DelegationTokenIdentifier) {\n                DelegationTokenIdentifier dtid \u003d\n                    (DelegationTokenIdentifier)tid;\n                trackingId \u003d dtSecretManager.getTokenTrackingId(dtid);\n                break;\n              }\n            }\n          }\n          sb.append(trackingId);\n        }\n        sb.append(\"\\t\").append(\"proto\u003d\")\n            .append(Server.getProtocol());\n        if (isCallerContextEnabled \u0026\u0026\n            callerContext !\u003d null \u0026\u0026\n            callerContext.isContextValid()) {\n          sb.append(\"\\t\").append(\"callerContext\u003d\");\n          if (callerContext.getContext().length() \u003e callerContextMaxLen) {\n            sb.append(callerContext.getContext().substring(0,\n                callerContextMaxLen));\n          } else {\n            sb.append(callerContext.getContext());\n          }\n          if (callerContext.getSignature() !\u003d null \u0026\u0026\n              callerContext.getSignature().length \u003e 0 \u0026\u0026\n              callerContext.getSignature().length \u003c\u003d callerSignatureMaxLen) {\n            sb.append(\":\")\n                .append(new String(callerContext.getSignature(),\n                CallerContext.SIGNATURE_ENCODING));\n          }\n        }\n        logAuditMessage(sb.toString());\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "8a9388e5f6d622152798aaaa256064919e4fec37": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11048. Audit Log should escape control characters. Contributed by Eric Badger\n",
      "commitDate": "28/10/16 10:53 AM",
      "commitName": "8a9388e5f6d622152798aaaa256064919e4fec37",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "27/10/16 4:09 PM",
      "commitNameOld": "5877f20f9c3f6f0afa505715e9a2ee312475af17",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 0.78,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,64 @@\n     public void logAuditEvent(boolean succeeded, String userName,\n         InetAddress addr, String cmd, String src, String dst,\n         FileStatus status, CallerContext callerContext, UserGroupInformation ugi,\n         DelegationTokenSecretManager dtSecretManager) {\n \n       if (auditLog.isDebugEnabled() ||\n           (auditLog.isInfoEnabled() \u0026\u0026 !debugCmdSet.contains(cmd))) {\n         final StringBuilder sb \u003d STRING_BUILDER.get();\n+        src \u003d escapeJava(src);\n+        dst \u003d escapeJava(dst);\n         sb.setLength(0);\n         sb.append(\"allowed\u003d\").append(succeeded).append(\"\\t\");\n         sb.append(\"ugi\u003d\").append(userName).append(\"\\t\");\n         sb.append(\"ip\u003d\").append(addr).append(\"\\t\");\n         sb.append(\"cmd\u003d\").append(cmd).append(\"\\t\");\n         sb.append(\"src\u003d\").append(src).append(\"\\t\");\n         sb.append(\"dst\u003d\").append(dst).append(\"\\t\");\n         if (null \u003d\u003d status) {\n           sb.append(\"perm\u003dnull\");\n         } else {\n           sb.append(\"perm\u003d\");\n           sb.append(status.getOwner()).append(\":\");\n           sb.append(status.getGroup()).append(\":\");\n           sb.append(status.getPermission());\n         }\n         if (logTokenTrackingId) {\n           sb.append(\"\\t\").append(\"trackingId\u003d\");\n           String trackingId \u003d null;\n           if (ugi !\u003d null \u0026\u0026 dtSecretManager !\u003d null\n               \u0026\u0026 ugi.getAuthenticationMethod() \u003d\u003d AuthenticationMethod.TOKEN) {\n             for (TokenIdentifier tid: ugi.getTokenIdentifiers()) {\n               if (tid instanceof DelegationTokenIdentifier) {\n                 DelegationTokenIdentifier dtid \u003d\n                     (DelegationTokenIdentifier)tid;\n                 trackingId \u003d dtSecretManager.getTokenTrackingId(dtid);\n                 break;\n               }\n             }\n           }\n           sb.append(trackingId);\n         }\n         sb.append(\"\\t\").append(\"proto\u003d\");\n         sb.append(Server.getProtocol());\n         if (isCallerContextEnabled \u0026\u0026\n             callerContext !\u003d null \u0026\u0026\n             callerContext.isContextValid()) {\n           sb.append(\"\\t\").append(\"callerContext\u003d\");\n           if (callerContext.getContext().length() \u003e callerContextMaxLen) {\n             sb.append(callerContext.getContext().substring(0,\n                 callerContextMaxLen));\n           } else {\n             sb.append(callerContext.getContext());\n           }\n           if (callerContext.getSignature() !\u003d null \u0026\u0026\n               callerContext.getSignature().length \u003e 0 \u0026\u0026\n               callerContext.getSignature().length \u003c\u003d callerSignatureMaxLen) {\n             sb.append(\":\");\n             sb.append(new String(callerContext.getSignature(),\n                 CallerContext.SIGNATURE_ENCODING));\n           }\n         }\n         logAuditMessage(sb.toString());\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void logAuditEvent(boolean succeeded, String userName,\n        InetAddress addr, String cmd, String src, String dst,\n        FileStatus status, CallerContext callerContext, UserGroupInformation ugi,\n        DelegationTokenSecretManager dtSecretManager) {\n\n      if (auditLog.isDebugEnabled() ||\n          (auditLog.isInfoEnabled() \u0026\u0026 !debugCmdSet.contains(cmd))) {\n        final StringBuilder sb \u003d STRING_BUILDER.get();\n        src \u003d escapeJava(src);\n        dst \u003d escapeJava(dst);\n        sb.setLength(0);\n        sb.append(\"allowed\u003d\").append(succeeded).append(\"\\t\");\n        sb.append(\"ugi\u003d\").append(userName).append(\"\\t\");\n        sb.append(\"ip\u003d\").append(addr).append(\"\\t\");\n        sb.append(\"cmd\u003d\").append(cmd).append(\"\\t\");\n        sb.append(\"src\u003d\").append(src).append(\"\\t\");\n        sb.append(\"dst\u003d\").append(dst).append(\"\\t\");\n        if (null \u003d\u003d status) {\n          sb.append(\"perm\u003dnull\");\n        } else {\n          sb.append(\"perm\u003d\");\n          sb.append(status.getOwner()).append(\":\");\n          sb.append(status.getGroup()).append(\":\");\n          sb.append(status.getPermission());\n        }\n        if (logTokenTrackingId) {\n          sb.append(\"\\t\").append(\"trackingId\u003d\");\n          String trackingId \u003d null;\n          if (ugi !\u003d null \u0026\u0026 dtSecretManager !\u003d null\n              \u0026\u0026 ugi.getAuthenticationMethod() \u003d\u003d AuthenticationMethod.TOKEN) {\n            for (TokenIdentifier tid: ugi.getTokenIdentifiers()) {\n              if (tid instanceof DelegationTokenIdentifier) {\n                DelegationTokenIdentifier dtid \u003d\n                    (DelegationTokenIdentifier)tid;\n                trackingId \u003d dtSecretManager.getTokenTrackingId(dtid);\n                break;\n              }\n            }\n          }\n          sb.append(trackingId);\n        }\n        sb.append(\"\\t\").append(\"proto\u003d\");\n        sb.append(Server.getProtocol());\n        if (isCallerContextEnabled \u0026\u0026\n            callerContext !\u003d null \u0026\u0026\n            callerContext.isContextValid()) {\n          sb.append(\"\\t\").append(\"callerContext\u003d\");\n          if (callerContext.getContext().length() \u003e callerContextMaxLen) {\n            sb.append(callerContext.getContext().substring(0,\n                callerContextMaxLen));\n          } else {\n            sb.append(callerContext.getContext());\n          }\n          if (callerContext.getSignature() !\u003d null \u0026\u0026\n              callerContext.getSignature().length \u003e 0 \u0026\u0026\n              callerContext.getSignature().length \u003c\u003d callerSignatureMaxLen) {\n            sb.append(\":\");\n            sb.append(new String(callerContext.getSignature(),\n                CallerContext.SIGNATURE_ENCODING));\n          }\n        }\n        logAuditMessage(sb.toString());\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "85cd06f6636f295ad1f3bf2a90063f4714c9cca7": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10789. Route webhdfs through the RPC call queue. Contributed by Daryn Sharp and Rushabh S Shah.\n",
      "commitDate": "12/10/16 1:11 PM",
      "commitName": "85cd06f6636f295ad1f3bf2a90063f4714c9cca7",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "11/10/16 3:55 PM",
      "commitNameOld": "61f0490a73085bbaf6639d9234277e59dc1145db",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 0.89,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,62 @@\n     public void logAuditEvent(boolean succeeded, String userName,\n         InetAddress addr, String cmd, String src, String dst,\n         FileStatus status, CallerContext callerContext, UserGroupInformation ugi,\n         DelegationTokenSecretManager dtSecretManager) {\n \n       if (auditLog.isDebugEnabled() ||\n           (auditLog.isInfoEnabled() \u0026\u0026 !debugCmdSet.contains(cmd))) {\n         final StringBuilder sb \u003d STRING_BUILDER.get();\n         sb.setLength(0);\n         sb.append(\"allowed\u003d\").append(succeeded).append(\"\\t\");\n         sb.append(\"ugi\u003d\").append(userName).append(\"\\t\");\n         sb.append(\"ip\u003d\").append(addr).append(\"\\t\");\n         sb.append(\"cmd\u003d\").append(cmd).append(\"\\t\");\n         sb.append(\"src\u003d\").append(src).append(\"\\t\");\n         sb.append(\"dst\u003d\").append(dst).append(\"\\t\");\n         if (null \u003d\u003d status) {\n           sb.append(\"perm\u003dnull\");\n         } else {\n           sb.append(\"perm\u003d\");\n           sb.append(status.getOwner()).append(\":\");\n           sb.append(status.getGroup()).append(\":\");\n           sb.append(status.getPermission());\n         }\n         if (logTokenTrackingId) {\n           sb.append(\"\\t\").append(\"trackingId\u003d\");\n           String trackingId \u003d null;\n           if (ugi !\u003d null \u0026\u0026 dtSecretManager !\u003d null\n               \u0026\u0026 ugi.getAuthenticationMethod() \u003d\u003d AuthenticationMethod.TOKEN) {\n             for (TokenIdentifier tid: ugi.getTokenIdentifiers()) {\n               if (tid instanceof DelegationTokenIdentifier) {\n                 DelegationTokenIdentifier dtid \u003d\n                     (DelegationTokenIdentifier)tid;\n                 trackingId \u003d dtSecretManager.getTokenTrackingId(dtid);\n                 break;\n               }\n             }\n           }\n           sb.append(trackingId);\n         }\n         sb.append(\"\\t\").append(\"proto\u003d\");\n-        sb.append(NamenodeWebHdfsMethods.isWebHdfsInvocation() ? \"webhdfs\" : \"rpc\");\n+        sb.append(Server.getProtocol());\n         if (isCallerContextEnabled \u0026\u0026\n             callerContext !\u003d null \u0026\u0026\n             callerContext.isContextValid()) {\n           sb.append(\"\\t\").append(\"callerContext\u003d\");\n           if (callerContext.getContext().length() \u003e callerContextMaxLen) {\n             sb.append(callerContext.getContext().substring(0,\n                 callerContextMaxLen));\n           } else {\n             sb.append(callerContext.getContext());\n           }\n           if (callerContext.getSignature() !\u003d null \u0026\u0026\n               callerContext.getSignature().length \u003e 0 \u0026\u0026\n               callerContext.getSignature().length \u003c\u003d callerSignatureMaxLen) {\n             sb.append(\":\");\n             sb.append(new String(callerContext.getSignature(),\n                 CallerContext.SIGNATURE_ENCODING));\n           }\n         }\n         logAuditMessage(sb.toString());\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void logAuditEvent(boolean succeeded, String userName,\n        InetAddress addr, String cmd, String src, String dst,\n        FileStatus status, CallerContext callerContext, UserGroupInformation ugi,\n        DelegationTokenSecretManager dtSecretManager) {\n\n      if (auditLog.isDebugEnabled() ||\n          (auditLog.isInfoEnabled() \u0026\u0026 !debugCmdSet.contains(cmd))) {\n        final StringBuilder sb \u003d STRING_BUILDER.get();\n        sb.setLength(0);\n        sb.append(\"allowed\u003d\").append(succeeded).append(\"\\t\");\n        sb.append(\"ugi\u003d\").append(userName).append(\"\\t\");\n        sb.append(\"ip\u003d\").append(addr).append(\"\\t\");\n        sb.append(\"cmd\u003d\").append(cmd).append(\"\\t\");\n        sb.append(\"src\u003d\").append(src).append(\"\\t\");\n        sb.append(\"dst\u003d\").append(dst).append(\"\\t\");\n        if (null \u003d\u003d status) {\n          sb.append(\"perm\u003dnull\");\n        } else {\n          sb.append(\"perm\u003d\");\n          sb.append(status.getOwner()).append(\":\");\n          sb.append(status.getGroup()).append(\":\");\n          sb.append(status.getPermission());\n        }\n        if (logTokenTrackingId) {\n          sb.append(\"\\t\").append(\"trackingId\u003d\");\n          String trackingId \u003d null;\n          if (ugi !\u003d null \u0026\u0026 dtSecretManager !\u003d null\n              \u0026\u0026 ugi.getAuthenticationMethod() \u003d\u003d AuthenticationMethod.TOKEN) {\n            for (TokenIdentifier tid: ugi.getTokenIdentifiers()) {\n              if (tid instanceof DelegationTokenIdentifier) {\n                DelegationTokenIdentifier dtid \u003d\n                    (DelegationTokenIdentifier)tid;\n                trackingId \u003d dtSecretManager.getTokenTrackingId(dtid);\n                break;\n              }\n            }\n          }\n          sb.append(trackingId);\n        }\n        sb.append(\"\\t\").append(\"proto\u003d\");\n        sb.append(Server.getProtocol());\n        if (isCallerContextEnabled \u0026\u0026\n            callerContext !\u003d null \u0026\u0026\n            callerContext.isContextValid()) {\n          sb.append(\"\\t\").append(\"callerContext\u003d\");\n          if (callerContext.getContext().length() \u003e callerContextMaxLen) {\n            sb.append(callerContext.getContext().substring(0,\n                callerContextMaxLen));\n          } else {\n            sb.append(callerContext.getContext());\n          }\n          if (callerContext.getSignature() !\u003d null \u0026\u0026\n              callerContext.getSignature().length \u003e 0 \u0026\u0026\n              callerContext.getSignature().length \u003c\u003d callerSignatureMaxLen) {\n            sb.append(\":\");\n            sb.append(new String(callerContext.getSignature(),\n                CallerContext.SIGNATURE_ENCODING));\n          }\n        }\n        logAuditMessage(sb.toString());\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "796a676d18bd7cd3ed4113d002e0e69cf261d6d1": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9528. Cleanup namenode audit/log/exception messages. (szetszwo via umamahesh)\n",
      "commitDate": "11/12/15 5:57 PM",
      "commitName": "796a676d18bd7cd3ed4113d002e0e69cf261d6d1",
      "commitAuthor": "Uma Mahesh",
      "commitDateOld": "09/12/15 5:55 PM",
      "commitNameOld": "132478e805ba0f955345217b8ad87c2d17cccb2d",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 2.0,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,62 @@\n     public void logAuditEvent(boolean succeeded, String userName,\n         InetAddress addr, String cmd, String src, String dst,\n         FileStatus status, CallerContext callerContext, UserGroupInformation ugi,\n         DelegationTokenSecretManager dtSecretManager) {\n \n       if (auditLog.isDebugEnabled() ||\n           (auditLog.isInfoEnabled() \u0026\u0026 !debugCmdSet.contains(cmd))) {\n-        final StringBuilder sb \u003d auditBuffer.get();\n+        final StringBuilder sb \u003d STRING_BUILDER.get();\n         sb.setLength(0);\n         sb.append(\"allowed\u003d\").append(succeeded).append(\"\\t\");\n         sb.append(\"ugi\u003d\").append(userName).append(\"\\t\");\n         sb.append(\"ip\u003d\").append(addr).append(\"\\t\");\n         sb.append(\"cmd\u003d\").append(cmd).append(\"\\t\");\n         sb.append(\"src\u003d\").append(src).append(\"\\t\");\n         sb.append(\"dst\u003d\").append(dst).append(\"\\t\");\n         if (null \u003d\u003d status) {\n           sb.append(\"perm\u003dnull\");\n         } else {\n           sb.append(\"perm\u003d\");\n           sb.append(status.getOwner()).append(\":\");\n           sb.append(status.getGroup()).append(\":\");\n           sb.append(status.getPermission());\n         }\n         if (logTokenTrackingId) {\n           sb.append(\"\\t\").append(\"trackingId\u003d\");\n           String trackingId \u003d null;\n           if (ugi !\u003d null \u0026\u0026 dtSecretManager !\u003d null\n               \u0026\u0026 ugi.getAuthenticationMethod() \u003d\u003d AuthenticationMethod.TOKEN) {\n             for (TokenIdentifier tid: ugi.getTokenIdentifiers()) {\n               if (tid instanceof DelegationTokenIdentifier) {\n                 DelegationTokenIdentifier dtid \u003d\n                     (DelegationTokenIdentifier)tid;\n                 trackingId \u003d dtSecretManager.getTokenTrackingId(dtid);\n                 break;\n               }\n             }\n           }\n           sb.append(trackingId);\n         }\n         sb.append(\"\\t\").append(\"proto\u003d\");\n         sb.append(NamenodeWebHdfsMethods.isWebHdfsInvocation() ? \"webhdfs\" : \"rpc\");\n         if (isCallerContextEnabled \u0026\u0026\n             callerContext !\u003d null \u0026\u0026\n             callerContext.isContextValid()) {\n           sb.append(\"\\t\").append(\"callerContext\u003d\");\n           if (callerContext.getContext().length() \u003e callerContextMaxLen) {\n             sb.append(callerContext.getContext().substring(0,\n                 callerContextMaxLen));\n           } else {\n             sb.append(callerContext.getContext());\n           }\n           if (callerContext.getSignature() !\u003d null \u0026\u0026\n               callerContext.getSignature().length \u003e 0 \u0026\u0026\n               callerContext.getSignature().length \u003c\u003d callerSignatureMaxLen) {\n             sb.append(\":\");\n             sb.append(new String(callerContext.getSignature(),\n                 CallerContext.SIGNATURE_ENCODING));\n           }\n         }\n         logAuditMessage(sb.toString());\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void logAuditEvent(boolean succeeded, String userName,\n        InetAddress addr, String cmd, String src, String dst,\n        FileStatus status, CallerContext callerContext, UserGroupInformation ugi,\n        DelegationTokenSecretManager dtSecretManager) {\n\n      if (auditLog.isDebugEnabled() ||\n          (auditLog.isInfoEnabled() \u0026\u0026 !debugCmdSet.contains(cmd))) {\n        final StringBuilder sb \u003d STRING_BUILDER.get();\n        sb.setLength(0);\n        sb.append(\"allowed\u003d\").append(succeeded).append(\"\\t\");\n        sb.append(\"ugi\u003d\").append(userName).append(\"\\t\");\n        sb.append(\"ip\u003d\").append(addr).append(\"\\t\");\n        sb.append(\"cmd\u003d\").append(cmd).append(\"\\t\");\n        sb.append(\"src\u003d\").append(src).append(\"\\t\");\n        sb.append(\"dst\u003d\").append(dst).append(\"\\t\");\n        if (null \u003d\u003d status) {\n          sb.append(\"perm\u003dnull\");\n        } else {\n          sb.append(\"perm\u003d\");\n          sb.append(status.getOwner()).append(\":\");\n          sb.append(status.getGroup()).append(\":\");\n          sb.append(status.getPermission());\n        }\n        if (logTokenTrackingId) {\n          sb.append(\"\\t\").append(\"trackingId\u003d\");\n          String trackingId \u003d null;\n          if (ugi !\u003d null \u0026\u0026 dtSecretManager !\u003d null\n              \u0026\u0026 ugi.getAuthenticationMethod() \u003d\u003d AuthenticationMethod.TOKEN) {\n            for (TokenIdentifier tid: ugi.getTokenIdentifiers()) {\n              if (tid instanceof DelegationTokenIdentifier) {\n                DelegationTokenIdentifier dtid \u003d\n                    (DelegationTokenIdentifier)tid;\n                trackingId \u003d dtSecretManager.getTokenTrackingId(dtid);\n                break;\n              }\n            }\n          }\n          sb.append(trackingId);\n        }\n        sb.append(\"\\t\").append(\"proto\u003d\");\n        sb.append(NamenodeWebHdfsMethods.isWebHdfsInvocation() ? \"webhdfs\" : \"rpc\");\n        if (isCallerContextEnabled \u0026\u0026\n            callerContext !\u003d null \u0026\u0026\n            callerContext.isContextValid()) {\n          sb.append(\"\\t\").append(\"callerContext\u003d\");\n          if (callerContext.getContext().length() \u003e callerContextMaxLen) {\n            sb.append(callerContext.getContext().substring(0,\n                callerContextMaxLen));\n          } else {\n            sb.append(callerContext.getContext());\n          }\n          if (callerContext.getSignature() !\u003d null \u0026\u0026\n              callerContext.getSignature().length \u003e 0 \u0026\u0026\n              callerContext.getSignature().length \u003c\u003d callerSignatureMaxLen) {\n            sb.append(\":\");\n            sb.append(new String(callerContext.getSignature(),\n                CallerContext.SIGNATURE_ENCODING));\n          }\n        }\n        logAuditMessage(sb.toString());\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "3cde6931cb5055a9d92503f4ecefa35571e7b07f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9343. Empty caller context considered invalid. (Contributed by Mingliang Liu)\n",
      "commitDate": "01/11/15 3:35 PM",
      "commitName": "3cde6931cb5055a9d92503f4ecefa35571e7b07f",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "29/10/15 11:30 AM",
      "commitNameOld": "888c6245e20ba6bdaa57d16b5c62b4a9eda2cdaf",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 3.21,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,62 @@\n     public void logAuditEvent(boolean succeeded, String userName,\n         InetAddress addr, String cmd, String src, String dst,\n         FileStatus status, CallerContext callerContext, UserGroupInformation ugi,\n         DelegationTokenSecretManager dtSecretManager) {\n \n       if (auditLog.isDebugEnabled() ||\n           (auditLog.isInfoEnabled() \u0026\u0026 !debugCmdSet.contains(cmd))) {\n         final StringBuilder sb \u003d auditBuffer.get();\n         sb.setLength(0);\n         sb.append(\"allowed\u003d\").append(succeeded).append(\"\\t\");\n         sb.append(\"ugi\u003d\").append(userName).append(\"\\t\");\n         sb.append(\"ip\u003d\").append(addr).append(\"\\t\");\n         sb.append(\"cmd\u003d\").append(cmd).append(\"\\t\");\n         sb.append(\"src\u003d\").append(src).append(\"\\t\");\n         sb.append(\"dst\u003d\").append(dst).append(\"\\t\");\n         if (null \u003d\u003d status) {\n           sb.append(\"perm\u003dnull\");\n         } else {\n           sb.append(\"perm\u003d\");\n           sb.append(status.getOwner()).append(\":\");\n           sb.append(status.getGroup()).append(\":\");\n           sb.append(status.getPermission());\n         }\n         if (logTokenTrackingId) {\n           sb.append(\"\\t\").append(\"trackingId\u003d\");\n           String trackingId \u003d null;\n           if (ugi !\u003d null \u0026\u0026 dtSecretManager !\u003d null\n               \u0026\u0026 ugi.getAuthenticationMethod() \u003d\u003d AuthenticationMethod.TOKEN) {\n             for (TokenIdentifier tid: ugi.getTokenIdentifiers()) {\n               if (tid instanceof DelegationTokenIdentifier) {\n                 DelegationTokenIdentifier dtid \u003d\n                     (DelegationTokenIdentifier)tid;\n                 trackingId \u003d dtSecretManager.getTokenTrackingId(dtid);\n                 break;\n               }\n             }\n           }\n           sb.append(trackingId);\n         }\n         sb.append(\"\\t\").append(\"proto\u003d\");\n         sb.append(NamenodeWebHdfsMethods.isWebHdfsInvocation() ? \"webhdfs\" : \"rpc\");\n         if (isCallerContextEnabled \u0026\u0026\n             callerContext !\u003d null \u0026\u0026\n-            callerContext.isValid() \u0026\u0026\n-            (callerContext.getSignature() \u003d\u003d null ||\n-                callerContext.getSignature().length \u003c\u003d callerSignatureMaxLen)) {\n+            callerContext.isContextValid()) {\n           sb.append(\"\\t\").append(\"callerContext\u003d\");\n           if (callerContext.getContext().length() \u003e callerContextMaxLen) {\n             sb.append(callerContext.getContext().substring(0,\n                 callerContextMaxLen));\n           } else {\n             sb.append(callerContext.getContext());\n           }\n-          if (callerContext.getSignature() !\u003d null) {\n+          if (callerContext.getSignature() !\u003d null \u0026\u0026\n+              callerContext.getSignature().length \u003e 0 \u0026\u0026\n+              callerContext.getSignature().length \u003c\u003d callerSignatureMaxLen) {\n             sb.append(\":\");\n             sb.append(new String(callerContext.getSignature(),\n                 CallerContext.SIGNATURE_ENCODING));\n           }\n         }\n         logAuditMessage(sb.toString());\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void logAuditEvent(boolean succeeded, String userName,\n        InetAddress addr, String cmd, String src, String dst,\n        FileStatus status, CallerContext callerContext, UserGroupInformation ugi,\n        DelegationTokenSecretManager dtSecretManager) {\n\n      if (auditLog.isDebugEnabled() ||\n          (auditLog.isInfoEnabled() \u0026\u0026 !debugCmdSet.contains(cmd))) {\n        final StringBuilder sb \u003d auditBuffer.get();\n        sb.setLength(0);\n        sb.append(\"allowed\u003d\").append(succeeded).append(\"\\t\");\n        sb.append(\"ugi\u003d\").append(userName).append(\"\\t\");\n        sb.append(\"ip\u003d\").append(addr).append(\"\\t\");\n        sb.append(\"cmd\u003d\").append(cmd).append(\"\\t\");\n        sb.append(\"src\u003d\").append(src).append(\"\\t\");\n        sb.append(\"dst\u003d\").append(dst).append(\"\\t\");\n        if (null \u003d\u003d status) {\n          sb.append(\"perm\u003dnull\");\n        } else {\n          sb.append(\"perm\u003d\");\n          sb.append(status.getOwner()).append(\":\");\n          sb.append(status.getGroup()).append(\":\");\n          sb.append(status.getPermission());\n        }\n        if (logTokenTrackingId) {\n          sb.append(\"\\t\").append(\"trackingId\u003d\");\n          String trackingId \u003d null;\n          if (ugi !\u003d null \u0026\u0026 dtSecretManager !\u003d null\n              \u0026\u0026 ugi.getAuthenticationMethod() \u003d\u003d AuthenticationMethod.TOKEN) {\n            for (TokenIdentifier tid: ugi.getTokenIdentifiers()) {\n              if (tid instanceof DelegationTokenIdentifier) {\n                DelegationTokenIdentifier dtid \u003d\n                    (DelegationTokenIdentifier)tid;\n                trackingId \u003d dtSecretManager.getTokenTrackingId(dtid);\n                break;\n              }\n            }\n          }\n          sb.append(trackingId);\n        }\n        sb.append(\"\\t\").append(\"proto\u003d\");\n        sb.append(NamenodeWebHdfsMethods.isWebHdfsInvocation() ? \"webhdfs\" : \"rpc\");\n        if (isCallerContextEnabled \u0026\u0026\n            callerContext !\u003d null \u0026\u0026\n            callerContext.isContextValid()) {\n          sb.append(\"\\t\").append(\"callerContext\u003d\");\n          if (callerContext.getContext().length() \u003e callerContextMaxLen) {\n            sb.append(callerContext.getContext().substring(0,\n                callerContextMaxLen));\n          } else {\n            sb.append(callerContext.getContext());\n          }\n          if (callerContext.getSignature() !\u003d null \u0026\u0026\n              callerContext.getSignature().length \u003e 0 \u0026\u0026\n              callerContext.getSignature().length \u003c\u003d callerSignatureMaxLen) {\n            sb.append(\":\");\n            sb.append(new String(callerContext.getSignature(),\n                CallerContext.SIGNATURE_ENCODING));\n          }\n        }\n        logAuditMessage(sb.toString());\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "600ad7bf4104bcaeec00a4089d59bb1fdf423299": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-9184. Logging HDFS operation\u0027s caller context into audit logs. Contributed by Mingliang Liu.\n",
      "commitDate": "23/10/15 12:15 PM",
      "commitName": "600ad7bf4104bcaeec00a4089d59bb1fdf423299",
      "commitAuthor": "Jitendra Pandey",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-9184. Logging HDFS operation\u0027s caller context into audit logs. Contributed by Mingliang Liu.\n",
          "commitDate": "23/10/15 12:15 PM",
          "commitName": "600ad7bf4104bcaeec00a4089d59bb1fdf423299",
          "commitAuthor": "Jitendra Pandey",
          "commitDateOld": "21/10/15 4:58 PM",
          "commitNameOld": "3dadf369d550c2ae393b751cb5a184dbfe2814df",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 1.8,
          "commitsBetweenForRepo": 17,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,62 @@\n     public void logAuditEvent(boolean succeeded, String userName,\n         InetAddress addr, String cmd, String src, String dst,\n-        FileStatus status, UserGroupInformation ugi,\n+        FileStatus status, CallerContext callerContext, UserGroupInformation ugi,\n         DelegationTokenSecretManager dtSecretManager) {\n \n       if (auditLog.isDebugEnabled() ||\n           (auditLog.isInfoEnabled() \u0026\u0026 !debugCmdSet.contains(cmd))) {\n         final StringBuilder sb \u003d auditBuffer.get();\n         sb.setLength(0);\n         sb.append(\"allowed\u003d\").append(succeeded).append(\"\\t\");\n         sb.append(\"ugi\u003d\").append(userName).append(\"\\t\");\n         sb.append(\"ip\u003d\").append(addr).append(\"\\t\");\n         sb.append(\"cmd\u003d\").append(cmd).append(\"\\t\");\n         sb.append(\"src\u003d\").append(src).append(\"\\t\");\n         sb.append(\"dst\u003d\").append(dst).append(\"\\t\");\n         if (null \u003d\u003d status) {\n           sb.append(\"perm\u003dnull\");\n         } else {\n           sb.append(\"perm\u003d\");\n           sb.append(status.getOwner()).append(\":\");\n           sb.append(status.getGroup()).append(\":\");\n           sb.append(status.getPermission());\n         }\n         if (logTokenTrackingId) {\n           sb.append(\"\\t\").append(\"trackingId\u003d\");\n           String trackingId \u003d null;\n           if (ugi !\u003d null \u0026\u0026 dtSecretManager !\u003d null\n               \u0026\u0026 ugi.getAuthenticationMethod() \u003d\u003d AuthenticationMethod.TOKEN) {\n             for (TokenIdentifier tid: ugi.getTokenIdentifiers()) {\n               if (tid instanceof DelegationTokenIdentifier) {\n                 DelegationTokenIdentifier dtid \u003d\n                     (DelegationTokenIdentifier)tid;\n                 trackingId \u003d dtSecretManager.getTokenTrackingId(dtid);\n                 break;\n               }\n             }\n           }\n           sb.append(trackingId);\n         }\n         sb.append(\"\\t\").append(\"proto\u003d\");\n         sb.append(NamenodeWebHdfsMethods.isWebHdfsInvocation() ? \"webhdfs\" : \"rpc\");\n+        if (isCallerContextEnabled \u0026\u0026\n+            callerContext !\u003d null \u0026\u0026\n+            callerContext.isValid() \u0026\u0026\n+            (callerContext.getSignature() \u003d\u003d null ||\n+                callerContext.getSignature().length \u003c\u003d callerSignatureMaxLen)) {\n+          sb.append(\"\\t\").append(\"callerContext\u003d\");\n+          if (callerContext.getContext().length() \u003e callerContextMaxLen) {\n+            sb.append(callerContext.getContext().substring(0,\n+                callerContextMaxLen));\n+          } else {\n+            sb.append(callerContext.getContext());\n+          }\n+          if (callerContext.getSignature() !\u003d null) {\n+            sb.append(\":\");\n+            sb.append(new String(callerContext.getSignature(),\n+                CallerContext.SIGNATURE_ENCODING));\n+          }\n+        }\n         logAuditMessage(sb.toString());\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void logAuditEvent(boolean succeeded, String userName,\n        InetAddress addr, String cmd, String src, String dst,\n        FileStatus status, CallerContext callerContext, UserGroupInformation ugi,\n        DelegationTokenSecretManager dtSecretManager) {\n\n      if (auditLog.isDebugEnabled() ||\n          (auditLog.isInfoEnabled() \u0026\u0026 !debugCmdSet.contains(cmd))) {\n        final StringBuilder sb \u003d auditBuffer.get();\n        sb.setLength(0);\n        sb.append(\"allowed\u003d\").append(succeeded).append(\"\\t\");\n        sb.append(\"ugi\u003d\").append(userName).append(\"\\t\");\n        sb.append(\"ip\u003d\").append(addr).append(\"\\t\");\n        sb.append(\"cmd\u003d\").append(cmd).append(\"\\t\");\n        sb.append(\"src\u003d\").append(src).append(\"\\t\");\n        sb.append(\"dst\u003d\").append(dst).append(\"\\t\");\n        if (null \u003d\u003d status) {\n          sb.append(\"perm\u003dnull\");\n        } else {\n          sb.append(\"perm\u003d\");\n          sb.append(status.getOwner()).append(\":\");\n          sb.append(status.getGroup()).append(\":\");\n          sb.append(status.getPermission());\n        }\n        if (logTokenTrackingId) {\n          sb.append(\"\\t\").append(\"trackingId\u003d\");\n          String trackingId \u003d null;\n          if (ugi !\u003d null \u0026\u0026 dtSecretManager !\u003d null\n              \u0026\u0026 ugi.getAuthenticationMethod() \u003d\u003d AuthenticationMethod.TOKEN) {\n            for (TokenIdentifier tid: ugi.getTokenIdentifiers()) {\n              if (tid instanceof DelegationTokenIdentifier) {\n                DelegationTokenIdentifier dtid \u003d\n                    (DelegationTokenIdentifier)tid;\n                trackingId \u003d dtSecretManager.getTokenTrackingId(dtid);\n                break;\n              }\n            }\n          }\n          sb.append(trackingId);\n        }\n        sb.append(\"\\t\").append(\"proto\u003d\");\n        sb.append(NamenodeWebHdfsMethods.isWebHdfsInvocation() ? \"webhdfs\" : \"rpc\");\n        if (isCallerContextEnabled \u0026\u0026\n            callerContext !\u003d null \u0026\u0026\n            callerContext.isValid() \u0026\u0026\n            (callerContext.getSignature() \u003d\u003d null ||\n                callerContext.getSignature().length \u003c\u003d callerSignatureMaxLen)) {\n          sb.append(\"\\t\").append(\"callerContext\u003d\");\n          if (callerContext.getContext().length() \u003e callerContextMaxLen) {\n            sb.append(callerContext.getContext().substring(0,\n                callerContextMaxLen));\n          } else {\n            sb.append(callerContext.getContext());\n          }\n          if (callerContext.getSignature() !\u003d null) {\n            sb.append(\":\");\n            sb.append(new String(callerContext.getSignature(),\n                CallerContext.SIGNATURE_ENCODING));\n          }\n        }\n        logAuditMessage(sb.toString());\n      }\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {
            "oldValue": "[succeeded-boolean, userName-String, addr-InetAddress, cmd-String, src-String, dst-String, status-FileStatus, ugi-UserGroupInformation, dtSecretManager-DelegationTokenSecretManager]",
            "newValue": "[succeeded-boolean, userName-String, addr-InetAddress, cmd-String, src-String, dst-String, status-FileStatus, callerContext-CallerContext, ugi-UserGroupInformation, dtSecretManager-DelegationTokenSecretManager]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-9184. Logging HDFS operation\u0027s caller context into audit logs. Contributed by Mingliang Liu.\n",
          "commitDate": "23/10/15 12:15 PM",
          "commitName": "600ad7bf4104bcaeec00a4089d59bb1fdf423299",
          "commitAuthor": "Jitendra Pandey",
          "commitDateOld": "21/10/15 4:58 PM",
          "commitNameOld": "3dadf369d550c2ae393b751cb5a184dbfe2814df",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 1.8,
          "commitsBetweenForRepo": 17,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,62 @@\n     public void logAuditEvent(boolean succeeded, String userName,\n         InetAddress addr, String cmd, String src, String dst,\n-        FileStatus status, UserGroupInformation ugi,\n+        FileStatus status, CallerContext callerContext, UserGroupInformation ugi,\n         DelegationTokenSecretManager dtSecretManager) {\n \n       if (auditLog.isDebugEnabled() ||\n           (auditLog.isInfoEnabled() \u0026\u0026 !debugCmdSet.contains(cmd))) {\n         final StringBuilder sb \u003d auditBuffer.get();\n         sb.setLength(0);\n         sb.append(\"allowed\u003d\").append(succeeded).append(\"\\t\");\n         sb.append(\"ugi\u003d\").append(userName).append(\"\\t\");\n         sb.append(\"ip\u003d\").append(addr).append(\"\\t\");\n         sb.append(\"cmd\u003d\").append(cmd).append(\"\\t\");\n         sb.append(\"src\u003d\").append(src).append(\"\\t\");\n         sb.append(\"dst\u003d\").append(dst).append(\"\\t\");\n         if (null \u003d\u003d status) {\n           sb.append(\"perm\u003dnull\");\n         } else {\n           sb.append(\"perm\u003d\");\n           sb.append(status.getOwner()).append(\":\");\n           sb.append(status.getGroup()).append(\":\");\n           sb.append(status.getPermission());\n         }\n         if (logTokenTrackingId) {\n           sb.append(\"\\t\").append(\"trackingId\u003d\");\n           String trackingId \u003d null;\n           if (ugi !\u003d null \u0026\u0026 dtSecretManager !\u003d null\n               \u0026\u0026 ugi.getAuthenticationMethod() \u003d\u003d AuthenticationMethod.TOKEN) {\n             for (TokenIdentifier tid: ugi.getTokenIdentifiers()) {\n               if (tid instanceof DelegationTokenIdentifier) {\n                 DelegationTokenIdentifier dtid \u003d\n                     (DelegationTokenIdentifier)tid;\n                 trackingId \u003d dtSecretManager.getTokenTrackingId(dtid);\n                 break;\n               }\n             }\n           }\n           sb.append(trackingId);\n         }\n         sb.append(\"\\t\").append(\"proto\u003d\");\n         sb.append(NamenodeWebHdfsMethods.isWebHdfsInvocation() ? \"webhdfs\" : \"rpc\");\n+        if (isCallerContextEnabled \u0026\u0026\n+            callerContext !\u003d null \u0026\u0026\n+            callerContext.isValid() \u0026\u0026\n+            (callerContext.getSignature() \u003d\u003d null ||\n+                callerContext.getSignature().length \u003c\u003d callerSignatureMaxLen)) {\n+          sb.append(\"\\t\").append(\"callerContext\u003d\");\n+          if (callerContext.getContext().length() \u003e callerContextMaxLen) {\n+            sb.append(callerContext.getContext().substring(0,\n+                callerContextMaxLen));\n+          } else {\n+            sb.append(callerContext.getContext());\n+          }\n+          if (callerContext.getSignature() !\u003d null) {\n+            sb.append(\":\");\n+            sb.append(new String(callerContext.getSignature(),\n+                CallerContext.SIGNATURE_ENCODING));\n+          }\n+        }\n         logAuditMessage(sb.toString());\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void logAuditEvent(boolean succeeded, String userName,\n        InetAddress addr, String cmd, String src, String dst,\n        FileStatus status, CallerContext callerContext, UserGroupInformation ugi,\n        DelegationTokenSecretManager dtSecretManager) {\n\n      if (auditLog.isDebugEnabled() ||\n          (auditLog.isInfoEnabled() \u0026\u0026 !debugCmdSet.contains(cmd))) {\n        final StringBuilder sb \u003d auditBuffer.get();\n        sb.setLength(0);\n        sb.append(\"allowed\u003d\").append(succeeded).append(\"\\t\");\n        sb.append(\"ugi\u003d\").append(userName).append(\"\\t\");\n        sb.append(\"ip\u003d\").append(addr).append(\"\\t\");\n        sb.append(\"cmd\u003d\").append(cmd).append(\"\\t\");\n        sb.append(\"src\u003d\").append(src).append(\"\\t\");\n        sb.append(\"dst\u003d\").append(dst).append(\"\\t\");\n        if (null \u003d\u003d status) {\n          sb.append(\"perm\u003dnull\");\n        } else {\n          sb.append(\"perm\u003d\");\n          sb.append(status.getOwner()).append(\":\");\n          sb.append(status.getGroup()).append(\":\");\n          sb.append(status.getPermission());\n        }\n        if (logTokenTrackingId) {\n          sb.append(\"\\t\").append(\"trackingId\u003d\");\n          String trackingId \u003d null;\n          if (ugi !\u003d null \u0026\u0026 dtSecretManager !\u003d null\n              \u0026\u0026 ugi.getAuthenticationMethod() \u003d\u003d AuthenticationMethod.TOKEN) {\n            for (TokenIdentifier tid: ugi.getTokenIdentifiers()) {\n              if (tid instanceof DelegationTokenIdentifier) {\n                DelegationTokenIdentifier dtid \u003d\n                    (DelegationTokenIdentifier)tid;\n                trackingId \u003d dtSecretManager.getTokenTrackingId(dtid);\n                break;\n              }\n            }\n          }\n          sb.append(trackingId);\n        }\n        sb.append(\"\\t\").append(\"proto\u003d\");\n        sb.append(NamenodeWebHdfsMethods.isWebHdfsInvocation() ? \"webhdfs\" : \"rpc\");\n        if (isCallerContextEnabled \u0026\u0026\n            callerContext !\u003d null \u0026\u0026\n            callerContext.isValid() \u0026\u0026\n            (callerContext.getSignature() \u003d\u003d null ||\n                callerContext.getSignature().length \u003c\u003d callerSignatureMaxLen)) {\n          sb.append(\"\\t\").append(\"callerContext\u003d\");\n          if (callerContext.getContext().length() \u003e callerContextMaxLen) {\n            sb.append(callerContext.getContext().substring(0,\n                callerContextMaxLen));\n          } else {\n            sb.append(callerContext.getContext());\n          }\n          if (callerContext.getSignature() !\u003d null) {\n            sb.append(\":\");\n            sb.append(new String(callerContext.getSignature(),\n                CallerContext.SIGNATURE_ENCODING));\n          }\n        }\n        logAuditMessage(sb.toString());\n      }\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "3bef7c80a97709b367781180b2e11fc50653d3c8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6888. Allow selectively audit logging ops (Contributed by Chen He)\n",
      "commitDate": "14/05/15 10:37 PM",
      "commitName": "3bef7c80a97709b367781180b2e11fc50653d3c8",
      "commitAuthor": "Vinayakumar B",
      "commitDateOld": "12/05/15 6:29 AM",
      "commitNameOld": "6d5da9484185ca9f585195d6da069b9cd5be4044",
      "commitAuthorOld": "yliu",
      "daysBetweenCommits": 2.67,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,44 @@\n     public void logAuditEvent(boolean succeeded, String userName,\n         InetAddress addr, String cmd, String src, String dst,\n         FileStatus status, UserGroupInformation ugi,\n         DelegationTokenSecretManager dtSecretManager) {\n-      if (auditLog.isInfoEnabled()) {\n+\n+      if (auditLog.isDebugEnabled() ||\n+          (auditLog.isInfoEnabled() \u0026\u0026 !debugCmdSet.contains(cmd))) {\n         final StringBuilder sb \u003d auditBuffer.get();\n         sb.setLength(0);\n         sb.append(\"allowed\u003d\").append(succeeded).append(\"\\t\");\n         sb.append(\"ugi\u003d\").append(userName).append(\"\\t\");\n         sb.append(\"ip\u003d\").append(addr).append(\"\\t\");\n         sb.append(\"cmd\u003d\").append(cmd).append(\"\\t\");\n         sb.append(\"src\u003d\").append(src).append(\"\\t\");\n         sb.append(\"dst\u003d\").append(dst).append(\"\\t\");\n         if (null \u003d\u003d status) {\n           sb.append(\"perm\u003dnull\");\n         } else {\n           sb.append(\"perm\u003d\");\n           sb.append(status.getOwner()).append(\":\");\n           sb.append(status.getGroup()).append(\":\");\n           sb.append(status.getPermission());\n         }\n         if (logTokenTrackingId) {\n           sb.append(\"\\t\").append(\"trackingId\u003d\");\n           String trackingId \u003d null;\n           if (ugi !\u003d null \u0026\u0026 dtSecretManager !\u003d null\n               \u0026\u0026 ugi.getAuthenticationMethod() \u003d\u003d AuthenticationMethod.TOKEN) {\n             for (TokenIdentifier tid: ugi.getTokenIdentifiers()) {\n               if (tid instanceof DelegationTokenIdentifier) {\n                 DelegationTokenIdentifier dtid \u003d\n                     (DelegationTokenIdentifier)tid;\n                 trackingId \u003d dtSecretManager.getTokenTrackingId(dtid);\n                 break;\n               }\n             }\n           }\n           sb.append(trackingId);\n         }\n         sb.append(\"\\t\").append(\"proto\u003d\");\n         sb.append(NamenodeWebHdfsMethods.isWebHdfsInvocation() ? \"webhdfs\" : \"rpc\");\n         logAuditMessage(sb.toString());\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void logAuditEvent(boolean succeeded, String userName,\n        InetAddress addr, String cmd, String src, String dst,\n        FileStatus status, UserGroupInformation ugi,\n        DelegationTokenSecretManager dtSecretManager) {\n\n      if (auditLog.isDebugEnabled() ||\n          (auditLog.isInfoEnabled() \u0026\u0026 !debugCmdSet.contains(cmd))) {\n        final StringBuilder sb \u003d auditBuffer.get();\n        sb.setLength(0);\n        sb.append(\"allowed\u003d\").append(succeeded).append(\"\\t\");\n        sb.append(\"ugi\u003d\").append(userName).append(\"\\t\");\n        sb.append(\"ip\u003d\").append(addr).append(\"\\t\");\n        sb.append(\"cmd\u003d\").append(cmd).append(\"\\t\");\n        sb.append(\"src\u003d\").append(src).append(\"\\t\");\n        sb.append(\"dst\u003d\").append(dst).append(\"\\t\");\n        if (null \u003d\u003d status) {\n          sb.append(\"perm\u003dnull\");\n        } else {\n          sb.append(\"perm\u003d\");\n          sb.append(status.getOwner()).append(\":\");\n          sb.append(status.getGroup()).append(\":\");\n          sb.append(status.getPermission());\n        }\n        if (logTokenTrackingId) {\n          sb.append(\"\\t\").append(\"trackingId\u003d\");\n          String trackingId \u003d null;\n          if (ugi !\u003d null \u0026\u0026 dtSecretManager !\u003d null\n              \u0026\u0026 ugi.getAuthenticationMethod() \u003d\u003d AuthenticationMethod.TOKEN) {\n            for (TokenIdentifier tid: ugi.getTokenIdentifiers()) {\n              if (tid instanceof DelegationTokenIdentifier) {\n                DelegationTokenIdentifier dtid \u003d\n                    (DelegationTokenIdentifier)tid;\n                trackingId \u003d dtSecretManager.getTokenTrackingId(dtid);\n                break;\n              }\n            }\n          }\n          sb.append(trackingId);\n        }\n        sb.append(\"\\t\").append(\"proto\u003d\");\n        sb.append(NamenodeWebHdfsMethods.isWebHdfsInvocation() ? \"webhdfs\" : \"rpc\");\n        logAuditMessage(sb.toString());\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "0532b8bad1bc4a528d39e9ca951b7beecc57be10": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6269. NameNode Audit Log should differentiate between webHDFS open and HDFS open. (Eric Payne via jeagles)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1591117 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/04/14 2:51 PM",
      "commitName": "0532b8bad1bc4a528d39e9ca951b7beecc57be10",
      "commitAuthor": "Jonathan Turner Eagles",
      "commitDateOld": "24/04/14 10:19 PM",
      "commitNameOld": "0931bd94be50ba5fe266d5c31e8fcfad9897bfec",
      "commitAuthorOld": "Uma Maheswara Rao G",
      "daysBetweenCommits": 4.69,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,42 @@\n     public void logAuditEvent(boolean succeeded, String userName,\n         InetAddress addr, String cmd, String src, String dst,\n         FileStatus status, UserGroupInformation ugi,\n         DelegationTokenSecretManager dtSecretManager) {\n       if (auditLog.isInfoEnabled()) {\n         final StringBuilder sb \u003d auditBuffer.get();\n         sb.setLength(0);\n         sb.append(\"allowed\u003d\").append(succeeded).append(\"\\t\");\n         sb.append(\"ugi\u003d\").append(userName).append(\"\\t\");\n         sb.append(\"ip\u003d\").append(addr).append(\"\\t\");\n         sb.append(\"cmd\u003d\").append(cmd).append(\"\\t\");\n         sb.append(\"src\u003d\").append(src).append(\"\\t\");\n         sb.append(\"dst\u003d\").append(dst).append(\"\\t\");\n         if (null \u003d\u003d status) {\n           sb.append(\"perm\u003dnull\");\n         } else {\n           sb.append(\"perm\u003d\");\n           sb.append(status.getOwner()).append(\":\");\n           sb.append(status.getGroup()).append(\":\");\n           sb.append(status.getPermission());\n         }\n         if (logTokenTrackingId) {\n           sb.append(\"\\t\").append(\"trackingId\u003d\");\n           String trackingId \u003d null;\n           if (ugi !\u003d null \u0026\u0026 dtSecretManager !\u003d null\n               \u0026\u0026 ugi.getAuthenticationMethod() \u003d\u003d AuthenticationMethod.TOKEN) {\n             for (TokenIdentifier tid: ugi.getTokenIdentifiers()) {\n               if (tid instanceof DelegationTokenIdentifier) {\n                 DelegationTokenIdentifier dtid \u003d\n                     (DelegationTokenIdentifier)tid;\n                 trackingId \u003d dtSecretManager.getTokenTrackingId(dtid);\n                 break;\n               }\n             }\n           }\n           sb.append(trackingId);\n         }\n+        sb.append(\"\\t\").append(\"proto\u003d\");\n+        sb.append(NamenodeWebHdfsMethods.isWebHdfsInvocation() ? \"webhdfs\" : \"rpc\");\n         logAuditMessage(sb.toString());\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void logAuditEvent(boolean succeeded, String userName,\n        InetAddress addr, String cmd, String src, String dst,\n        FileStatus status, UserGroupInformation ugi,\n        DelegationTokenSecretManager dtSecretManager) {\n      if (auditLog.isInfoEnabled()) {\n        final StringBuilder sb \u003d auditBuffer.get();\n        sb.setLength(0);\n        sb.append(\"allowed\u003d\").append(succeeded).append(\"\\t\");\n        sb.append(\"ugi\u003d\").append(userName).append(\"\\t\");\n        sb.append(\"ip\u003d\").append(addr).append(\"\\t\");\n        sb.append(\"cmd\u003d\").append(cmd).append(\"\\t\");\n        sb.append(\"src\u003d\").append(src).append(\"\\t\");\n        sb.append(\"dst\u003d\").append(dst).append(\"\\t\");\n        if (null \u003d\u003d status) {\n          sb.append(\"perm\u003dnull\");\n        } else {\n          sb.append(\"perm\u003d\");\n          sb.append(status.getOwner()).append(\":\");\n          sb.append(status.getGroup()).append(\":\");\n          sb.append(status.getPermission());\n        }\n        if (logTokenTrackingId) {\n          sb.append(\"\\t\").append(\"trackingId\u003d\");\n          String trackingId \u003d null;\n          if (ugi !\u003d null \u0026\u0026 dtSecretManager !\u003d null\n              \u0026\u0026 ugi.getAuthenticationMethod() \u003d\u003d AuthenticationMethod.TOKEN) {\n            for (TokenIdentifier tid: ugi.getTokenIdentifiers()) {\n              if (tid instanceof DelegationTokenIdentifier) {\n                DelegationTokenIdentifier dtid \u003d\n                    (DelegationTokenIdentifier)tid;\n                trackingId \u003d dtSecretManager.getTokenTrackingId(dtid);\n                break;\n              }\n            }\n          }\n          sb.append(trackingId);\n        }\n        sb.append(\"\\t\").append(\"proto\u003d\");\n        sb.append(NamenodeWebHdfsMethods.isWebHdfsInvocation() ? \"webhdfs\" : \"rpc\");\n        logAuditMessage(sb.toString());\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "34f08944b7c8d58f531a3f3bf3d4ee4cd3fa643a": {
      "type": "Ybodychange",
      "commitMessage": "merge trunk to branch HDFS-4949\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1532952 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/10/13 7:14 PM",
      "commitName": "34f08944b7c8d58f531a3f3bf3d4ee4cd3fa643a",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "16/10/13 3:15 PM",
      "commitNameOld": "3cc7a38a53c8ae27ef6b2397cddc5d14a378203a",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 0.17,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n     public void logAuditEvent(boolean succeeded, String userName,\n         InetAddress addr, String cmd, String src, String dst,\n         FileStatus status, UserGroupInformation ugi,\n         DelegationTokenSecretManager dtSecretManager) {\n       if (auditLog.isInfoEnabled()) {\n         final StringBuilder sb \u003d auditBuffer.get();\n         sb.setLength(0);\n         sb.append(\"allowed\u003d\").append(succeeded).append(\"\\t\");\n         sb.append(\"ugi\u003d\").append(userName).append(\"\\t\");\n         sb.append(\"ip\u003d\").append(addr).append(\"\\t\");\n         sb.append(\"cmd\u003d\").append(cmd).append(\"\\t\");\n         sb.append(\"src\u003d\").append(src).append(\"\\t\");\n         sb.append(\"dst\u003d\").append(dst).append(\"\\t\");\n         if (null \u003d\u003d status) {\n           sb.append(\"perm\u003dnull\");\n         } else {\n           sb.append(\"perm\u003d\");\n           sb.append(status.getOwner()).append(\":\");\n           sb.append(status.getGroup()).append(\":\");\n           sb.append(status.getPermission());\n         }\n         if (logTokenTrackingId) {\n           sb.append(\"\\t\").append(\"trackingId\u003d\");\n           String trackingId \u003d null;\n           if (ugi !\u003d null \u0026\u0026 dtSecretManager !\u003d null\n               \u0026\u0026 ugi.getAuthenticationMethod() \u003d\u003d AuthenticationMethod.TOKEN) {\n             for (TokenIdentifier tid: ugi.getTokenIdentifiers()) {\n               if (tid instanceof DelegationTokenIdentifier) {\n                 DelegationTokenIdentifier dtid \u003d\n                     (DelegationTokenIdentifier)tid;\n                 trackingId \u003d dtSecretManager.getTokenTrackingId(dtid);\n                 break;\n               }\n             }\n           }\n           sb.append(trackingId);\n         }\n-        auditLog.info(sb);\n+        logAuditMessage(sb.toString());\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void logAuditEvent(boolean succeeded, String userName,\n        InetAddress addr, String cmd, String src, String dst,\n        FileStatus status, UserGroupInformation ugi,\n        DelegationTokenSecretManager dtSecretManager) {\n      if (auditLog.isInfoEnabled()) {\n        final StringBuilder sb \u003d auditBuffer.get();\n        sb.setLength(0);\n        sb.append(\"allowed\u003d\").append(succeeded).append(\"\\t\");\n        sb.append(\"ugi\u003d\").append(userName).append(\"\\t\");\n        sb.append(\"ip\u003d\").append(addr).append(\"\\t\");\n        sb.append(\"cmd\u003d\").append(cmd).append(\"\\t\");\n        sb.append(\"src\u003d\").append(src).append(\"\\t\");\n        sb.append(\"dst\u003d\").append(dst).append(\"\\t\");\n        if (null \u003d\u003d status) {\n          sb.append(\"perm\u003dnull\");\n        } else {\n          sb.append(\"perm\u003d\");\n          sb.append(status.getOwner()).append(\":\");\n          sb.append(status.getGroup()).append(\":\");\n          sb.append(status.getPermission());\n        }\n        if (logTokenTrackingId) {\n          sb.append(\"\\t\").append(\"trackingId\u003d\");\n          String trackingId \u003d null;\n          if (ugi !\u003d null \u0026\u0026 dtSecretManager !\u003d null\n              \u0026\u0026 ugi.getAuthenticationMethod() \u003d\u003d AuthenticationMethod.TOKEN) {\n            for (TokenIdentifier tid: ugi.getTokenIdentifiers()) {\n              if (tid instanceof DelegationTokenIdentifier) {\n                DelegationTokenIdentifier dtid \u003d\n                    (DelegationTokenIdentifier)tid;\n                trackingId \u003d dtSecretManager.getTokenTrackingId(dtid);\n                break;\n              }\n            }\n          }\n          sb.append(trackingId);\n        }\n        logAuditMessage(sb.toString());\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "7094738d84c61cbac9a4b82a71d7e63f6a3e3c7c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5240. Separate formatting from logging in the audit logger API (daryn)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1525626 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/09/13 8:33 AM",
      "commitName": "7094738d84c61cbac9a4b82a71d7e63f6a3e3c7c",
      "commitAuthor": "Daryn Sharp",
      "commitDateOld": "23/09/13 8:27 AM",
      "commitNameOld": "3dfadca6f5a6a1a811d467f198f5faee8f4135e2",
      "commitAuthorOld": "Daryn Sharp",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n     public void logAuditEvent(boolean succeeded, String userName,\n         InetAddress addr, String cmd, String src, String dst,\n         FileStatus status, UserGroupInformation ugi,\n         DelegationTokenSecretManager dtSecretManager) {\n       if (auditLog.isInfoEnabled()) {\n         final StringBuilder sb \u003d auditBuffer.get();\n         sb.setLength(0);\n         sb.append(\"allowed\u003d\").append(succeeded).append(\"\\t\");\n         sb.append(\"ugi\u003d\").append(userName).append(\"\\t\");\n         sb.append(\"ip\u003d\").append(addr).append(\"\\t\");\n         sb.append(\"cmd\u003d\").append(cmd).append(\"\\t\");\n         sb.append(\"src\u003d\").append(src).append(\"\\t\");\n         sb.append(\"dst\u003d\").append(dst).append(\"\\t\");\n         if (null \u003d\u003d status) {\n           sb.append(\"perm\u003dnull\");\n         } else {\n           sb.append(\"perm\u003d\");\n           sb.append(status.getOwner()).append(\":\");\n           sb.append(status.getGroup()).append(\":\");\n           sb.append(status.getPermission());\n         }\n         if (logTokenTrackingId) {\n           sb.append(\"\\t\").append(\"trackingId\u003d\");\n           String trackingId \u003d null;\n           if (ugi !\u003d null \u0026\u0026 dtSecretManager !\u003d null\n               \u0026\u0026 ugi.getAuthenticationMethod() \u003d\u003d AuthenticationMethod.TOKEN) {\n             for (TokenIdentifier tid: ugi.getTokenIdentifiers()) {\n               if (tid instanceof DelegationTokenIdentifier) {\n                 DelegationTokenIdentifier dtid \u003d\n                     (DelegationTokenIdentifier)tid;\n                 trackingId \u003d dtSecretManager.getTokenTrackingId(dtid);\n                 break;\n               }\n             }\n           }\n           sb.append(trackingId);\n         }\n-        auditLog.info(sb);\n+        logAuditMessage(sb.toString());\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void logAuditEvent(boolean succeeded, String userName,\n        InetAddress addr, String cmd, String src, String dst,\n        FileStatus status, UserGroupInformation ugi,\n        DelegationTokenSecretManager dtSecretManager) {\n      if (auditLog.isInfoEnabled()) {\n        final StringBuilder sb \u003d auditBuffer.get();\n        sb.setLength(0);\n        sb.append(\"allowed\u003d\").append(succeeded).append(\"\\t\");\n        sb.append(\"ugi\u003d\").append(userName).append(\"\\t\");\n        sb.append(\"ip\u003d\").append(addr).append(\"\\t\");\n        sb.append(\"cmd\u003d\").append(cmd).append(\"\\t\");\n        sb.append(\"src\u003d\").append(src).append(\"\\t\");\n        sb.append(\"dst\u003d\").append(dst).append(\"\\t\");\n        if (null \u003d\u003d status) {\n          sb.append(\"perm\u003dnull\");\n        } else {\n          sb.append(\"perm\u003d\");\n          sb.append(status.getOwner()).append(\":\");\n          sb.append(status.getGroup()).append(\":\");\n          sb.append(status.getPermission());\n        }\n        if (logTokenTrackingId) {\n          sb.append(\"\\t\").append(\"trackingId\u003d\");\n          String trackingId \u003d null;\n          if (ugi !\u003d null \u0026\u0026 dtSecretManager !\u003d null\n              \u0026\u0026 ugi.getAuthenticationMethod() \u003d\u003d AuthenticationMethod.TOKEN) {\n            for (TokenIdentifier tid: ugi.getTokenIdentifiers()) {\n              if (tid instanceof DelegationTokenIdentifier) {\n                DelegationTokenIdentifier dtid \u003d\n                    (DelegationTokenIdentifier)tid;\n                trackingId \u003d dtSecretManager.getTokenTrackingId(dtid);\n                break;\n              }\n            }\n          }\n          sb.append(trackingId);\n        }\n        logAuditMessage(sb.toString());\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    }
  }
}