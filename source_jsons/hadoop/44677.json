{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ApplicationCLI.java",
  "functionName": "executeListCommand",
  "functionId": "executeListCommand___cliParser-CommandLine__title-String__opts-Options",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/ApplicationCLI.java",
  "functionStartLine": 1072,
  "functionEndLine": 1168,
  "numCommitsSeen": 72,
  "timeTaken": 1348,
  "changeHistory": [
    "206e6339469ca6d362382efbb488089ece830e98"
  ],
  "changeHistoryShort": {
    "206e6339469ca6d362382efbb488089ece830e98": "Yintroduced"
  },
  "changeHistoryDetails": {
    "206e6339469ca6d362382efbb488089ece830e98": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9453. Clean up code long if-else chain in ApplicationCLI#run. Contributed by Wanqiang Ji.\n",
      "commitDate": "13/05/19 11:11 AM",
      "commitName": "206e6339469ca6d362382efbb488089ece830e98",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "diff": "@@ -0,0 +1,97 @@\n+  private int executeListCommand(CommandLine cliParser, String title,\n+      Options opts) throws Exception {\n+    int exitCode \u003d -1;\n+    if (APPLICATION.equalsIgnoreCase(title) || APP.equalsIgnoreCase(title)) {\n+      allAppStates \u003d false;\n+      Set\u003cString\u003e appTypes \u003d new HashSet\u003c\u003e();\n+      if (cliParser.hasOption(APP_TYPE_CMD)) {\n+        String[] types \u003d cliParser.getOptionValues(APP_TYPE_CMD);\n+        if (types !\u003d null) {\n+          for (String type : types) {\n+            if (!type.trim().isEmpty()) {\n+              appTypes.add(StringUtils.toUpperCase(type).trim());\n+            }\n+          }\n+        }\n+      }\n+\n+      EnumSet\u003cYarnApplicationState\u003e appStates \u003d EnumSet.noneOf(\n+          YarnApplicationState.class);\n+      if (cliParser.hasOption(APP_STATE_CMD)) {\n+        String[] states \u003d cliParser.getOptionValues(APP_STATE_CMD);\n+        if (states !\u003d null) {\n+          for (String state : states) {\n+            if (!state.trim().isEmpty()) {\n+              if (state.trim().equalsIgnoreCase(ALLSTATES_OPTION)) {\n+                allAppStates \u003d true;\n+                break;\n+              }\n+              try {\n+                appStates.add(YarnApplicationState.valueOf(\n+                    StringUtils.toUpperCase(state).trim()));\n+              } catch (IllegalArgumentException ex) {\n+                sysout.println(\"The application state \" + state\n+                    + \" is invalid.\");\n+                sysout.println(getAllValidApplicationStates());\n+                return exitCode;\n+              }\n+            }\n+          }\n+        }\n+      }\n+\n+      Set\u003cString\u003e appTags \u003d new HashSet\u003c\u003e();\n+      if (cliParser.hasOption(APP_TAG_CMD)) {\n+        String[] tags \u003d cliParser.getOptionValues(APP_TAG_CMD);\n+        if (tags !\u003d null) {\n+          for (String tag : tags) {\n+            if (!tag.trim().isEmpty()) {\n+              appTags.add(tag.trim());\n+            }\n+          }\n+        }\n+      }\n+      listApplications(appTypes, appStates, appTags);\n+    } else if (APPLICATION_ATTEMPT.equalsIgnoreCase(title)) {\n+      if (hasAnyOtherCLIOptions(cliParser, opts, LIST_CMD)) {\n+        printUsage(title, opts);\n+        return exitCode;\n+      }\n+      listApplicationAttempts(cliParser.getOptionValue(LIST_CMD));\n+    } else if (CONTAINER.equalsIgnoreCase(title)) {\n+      if (hasAnyOtherCLIOptions(cliParser, opts, LIST_CMD, APP_TYPE_CMD,\n+          VERSION, COMPONENTS, STATES)) {\n+        printUsage(title, opts);\n+        return exitCode;\n+      }\n+      String appAttemptIdOrName \u003d cliParser.getOptionValue(LIST_CMD);\n+      try {\n+        // try parsing attempt id, if it succeeds, it means it\u0027s appId\n+        ApplicationAttemptId.fromString(appAttemptIdOrName);\n+        listContainers(appAttemptIdOrName);\n+      } catch (IllegalArgumentException e) {\n+        // not appAttemptId format, it could be appName. If app-type is not\n+        // provided, assume it is yarn-service type.\n+        AppAdminClient client \u003d AppAdminClient.createAppAdminClient(\n+            getSingleAppTypeFromCLI(cliParser), getConf());\n+        String version \u003d cliParser.getOptionValue(VERSION);\n+        String[] components \u003d cliParser.getOptionValues(COMPONENTS);\n+        String[] instanceStates \u003d cliParser.getOptionValues(STATES);\n+        try {\n+          sysout.println(client.getInstances(appAttemptIdOrName,\n+              components \u003d\u003d null ? null : Arrays.asList(components),\n+              version, instanceStates \u003d\u003d null ? null :\n+                  Arrays.asList(instanceStates)));\n+          return 0;\n+        } catch (ApplicationNotFoundException exception) {\n+          System.err.println(\"Application with name \u0027\" + appAttemptIdOrName\n+              + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n+          return -1;\n+        } catch (Exception ex) {\n+          System.err.println(ex.getMessage());\n+          return -1;\n+        }\n+      }\n+    }\n+    return 0;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private int executeListCommand(CommandLine cliParser, String title,\n      Options opts) throws Exception {\n    int exitCode \u003d -1;\n    if (APPLICATION.equalsIgnoreCase(title) || APP.equalsIgnoreCase(title)) {\n      allAppStates \u003d false;\n      Set\u003cString\u003e appTypes \u003d new HashSet\u003c\u003e();\n      if (cliParser.hasOption(APP_TYPE_CMD)) {\n        String[] types \u003d cliParser.getOptionValues(APP_TYPE_CMD);\n        if (types !\u003d null) {\n          for (String type : types) {\n            if (!type.trim().isEmpty()) {\n              appTypes.add(StringUtils.toUpperCase(type).trim());\n            }\n          }\n        }\n      }\n\n      EnumSet\u003cYarnApplicationState\u003e appStates \u003d EnumSet.noneOf(\n          YarnApplicationState.class);\n      if (cliParser.hasOption(APP_STATE_CMD)) {\n        String[] states \u003d cliParser.getOptionValues(APP_STATE_CMD);\n        if (states !\u003d null) {\n          for (String state : states) {\n            if (!state.trim().isEmpty()) {\n              if (state.trim().equalsIgnoreCase(ALLSTATES_OPTION)) {\n                allAppStates \u003d true;\n                break;\n              }\n              try {\n                appStates.add(YarnApplicationState.valueOf(\n                    StringUtils.toUpperCase(state).trim()));\n              } catch (IllegalArgumentException ex) {\n                sysout.println(\"The application state \" + state\n                    + \" is invalid.\");\n                sysout.println(getAllValidApplicationStates());\n                return exitCode;\n              }\n            }\n          }\n        }\n      }\n\n      Set\u003cString\u003e appTags \u003d new HashSet\u003c\u003e();\n      if (cliParser.hasOption(APP_TAG_CMD)) {\n        String[] tags \u003d cliParser.getOptionValues(APP_TAG_CMD);\n        if (tags !\u003d null) {\n          for (String tag : tags) {\n            if (!tag.trim().isEmpty()) {\n              appTags.add(tag.trim());\n            }\n          }\n        }\n      }\n      listApplications(appTypes, appStates, appTags);\n    } else if (APPLICATION_ATTEMPT.equalsIgnoreCase(title)) {\n      if (hasAnyOtherCLIOptions(cliParser, opts, LIST_CMD)) {\n        printUsage(title, opts);\n        return exitCode;\n      }\n      listApplicationAttempts(cliParser.getOptionValue(LIST_CMD));\n    } else if (CONTAINER.equalsIgnoreCase(title)) {\n      if (hasAnyOtherCLIOptions(cliParser, opts, LIST_CMD, APP_TYPE_CMD,\n          VERSION, COMPONENTS, STATES)) {\n        printUsage(title, opts);\n        return exitCode;\n      }\n      String appAttemptIdOrName \u003d cliParser.getOptionValue(LIST_CMD);\n      try {\n        // try parsing attempt id, if it succeeds, it means it\u0027s appId\n        ApplicationAttemptId.fromString(appAttemptIdOrName);\n        listContainers(appAttemptIdOrName);\n      } catch (IllegalArgumentException e) {\n        // not appAttemptId format, it could be appName. If app-type is not\n        // provided, assume it is yarn-service type.\n        AppAdminClient client \u003d AppAdminClient.createAppAdminClient(\n            getSingleAppTypeFromCLI(cliParser), getConf());\n        String version \u003d cliParser.getOptionValue(VERSION);\n        String[] components \u003d cliParser.getOptionValues(COMPONENTS);\n        String[] instanceStates \u003d cliParser.getOptionValues(STATES);\n        try {\n          sysout.println(client.getInstances(appAttemptIdOrName,\n              components \u003d\u003d null ? null : Arrays.asList(components),\n              version, instanceStates \u003d\u003d null ? null :\n                  Arrays.asList(instanceStates)));\n          return 0;\n        } catch (ApplicationNotFoundException exception) {\n          System.err.println(\"Application with name \u0027\" + appAttemptIdOrName\n              + \"\u0027 doesn\u0027t exist in RM or Timeline Server.\");\n          return -1;\n        } catch (Exception ex) {\n          System.err.println(ex.getMessage());\n          return -1;\n        }\n      }\n    }\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/ApplicationCLI.java"
    }
  }
}