{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LogAggregationFileController.java",
  "functionName": "createAppDir",
  "functionId": "createAppDir___user-String(modifiers-final)__appId-ApplicationId(modifiers-final)__userUgi-UserGroupInformation",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/filecontroller/LogAggregationFileController.java",
  "functionStartLine": 399,
  "functionEndLine": 449,
  "numCommitsSeen": 65,
  "timeTaken": 4557,
  "changeHistory": [
    "accb811e5727f2a780a41cd5e50bab47a0cccb68",
    "4b540bbfcf02d828052999215c6135603d98f5db",
    "c2cb7ea1ef6532020b69031dbd18b0f9b8369f0f",
    "78063b3a76840ffade33667a90f9c9dbe7fc99eb",
    "a83fb61ac07c0468cbc7a38526e92683883dd932",
    "df5e2b83526634ac7c1c1131bf1aad73ac353d01",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "c27601fefebd0af887a12d684bfc6f90d9fc0321",
    "670fa24b48acb407c22fbfdde87ae3123dcbf449"
  ],
  "changeHistoryShort": {
    "accb811e5727f2a780a41cd5e50bab47a0cccb68": "Ybodychange",
    "4b540bbfcf02d828052999215c6135603d98f5db": "Ybodychange",
    "c2cb7ea1ef6532020b69031dbd18b0f9b8369f0f": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange)",
    "78063b3a76840ffade33667a90f9c9dbe7fc99eb": "Ybodychange",
    "a83fb61ac07c0468cbc7a38526e92683883dd932": "Ybodychange",
    "df5e2b83526634ac7c1c1131bf1aad73ac353d01": "Ymodifierchange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "c27601fefebd0af887a12d684bfc6f90d9fc0321": "Ybodychange",
    "670fa24b48acb407c22fbfdde87ae3123dcbf449": "Yintroduced"
  },
  "changeHistoryDetails": {
    "accb811e5727f2a780a41cd5e50bab47a0cccb68": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6929.  Improved partition algorithm for yarn remote-app-log-dir.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "30/04/19 2:04 PM",
      "commitName": "accb811e5727f2a780a41cd5e50bab47a0cccb68",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "25/02/19 11:45 AM",
      "commitNameOld": "95372657fc25c02399b01793833021ccf88dada2",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 64.06,
      "commitsBetweenForRepo": 465,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,51 @@\n   public void createAppDir(final String user, final ApplicationId appId,\n       UserGroupInformation userUgi) {\n     final Path remoteRootLogDir \u003d getRemoteRootLogDir();\n     final String remoteRootLogDirSuffix \u003d getRemoteRootLogDirSuffix();\n     try {\n       userUgi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n         @Override\n         public Object run() throws Exception {\n           try {\n             // TODO: Reuse FS for user?\n             FileSystem remoteFS \u003d getFileSystem(conf);\n \n             // Only creating directories if they are missing to avoid\n             // unnecessary load on the filesystem from all of the nodes\n             Path appDir \u003d LogAggregationUtils.getRemoteAppLogDir(\n                 remoteRootLogDir, appId, user, remoteRootLogDirSuffix);\n-\n-            appDir \u003d appDir.makeQualified(remoteFS.getUri(),\n+            Path curDir \u003d appDir.makeQualified(remoteFS.getUri(),\n+                remoteFS.getWorkingDirectory());\n+            Path rootLogDir \u003d remoteRootLogDir.makeQualified(remoteFS.getUri(),\n                 remoteFS.getWorkingDirectory());\n \n-            if (!checkExists(remoteFS, appDir, APP_DIR_PERMISSIONS)) {\n-              Path suffixDir \u003d LogAggregationUtils.getRemoteLogSuffixedDir(\n-                  remoteRootLogDir, user, remoteRootLogDirSuffix);\n-              suffixDir \u003d suffixDir.makeQualified(remoteFS.getUri(),\n-                  remoteFS.getWorkingDirectory());\n+            LinkedList\u003cPath\u003e pathsToCreate \u003d new LinkedList\u003c\u003e();\n \n-              if (!checkExists(remoteFS, suffixDir, APP_DIR_PERMISSIONS)) {\n-                Path userDir \u003d LogAggregationUtils.getRemoteLogUserDir(\n-                    remoteRootLogDir, user);\n-                userDir \u003d userDir.makeQualified(remoteFS.getUri(),\n-                    remoteFS.getWorkingDirectory());\n-\n-                if (!checkExists(remoteFS, userDir, APP_DIR_PERMISSIONS)) {\n-                  createDir(remoteFS, userDir, APP_DIR_PERMISSIONS);\n-                }\n-\n-                createDir(remoteFS, suffixDir, APP_DIR_PERMISSIONS);\n+            while (!curDir.equals(rootLogDir)) {\n+              if (!checkExists(remoteFS, curDir, APP_DIR_PERMISSIONS)) {\n+                pathsToCreate.addFirst(curDir);\n+                curDir \u003d curDir.getParent();\n+              } else {\n+                break;\n               }\n-\n-              createDir(remoteFS, appDir, APP_DIR_PERMISSIONS);\n             }\n \n+            for (Path path : pathsToCreate) {\n+              createDir(remoteFS, path, APP_DIR_PERMISSIONS);\n+            }\n           } catch (IOException e) {\n             LOG.error(\"Failed to setup application log directory for \"\n                 + appId, e);\n             throw e;\n           }\n           return null;\n         }\n       });\n     } catch (Exception e) {\n       if (e instanceof RemoteException) {\n         throw new YarnRuntimeException(((RemoteException) e)\n             .unwrapRemoteException(SecretManager.InvalidToken.class));\n       }\n       throw new YarnRuntimeException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void createAppDir(final String user, final ApplicationId appId,\n      UserGroupInformation userUgi) {\n    final Path remoteRootLogDir \u003d getRemoteRootLogDir();\n    final String remoteRootLogDirSuffix \u003d getRemoteRootLogDirSuffix();\n    try {\n      userUgi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n        @Override\n        public Object run() throws Exception {\n          try {\n            // TODO: Reuse FS for user?\n            FileSystem remoteFS \u003d getFileSystem(conf);\n\n            // Only creating directories if they are missing to avoid\n            // unnecessary load on the filesystem from all of the nodes\n            Path appDir \u003d LogAggregationUtils.getRemoteAppLogDir(\n                remoteRootLogDir, appId, user, remoteRootLogDirSuffix);\n            Path curDir \u003d appDir.makeQualified(remoteFS.getUri(),\n                remoteFS.getWorkingDirectory());\n            Path rootLogDir \u003d remoteRootLogDir.makeQualified(remoteFS.getUri(),\n                remoteFS.getWorkingDirectory());\n\n            LinkedList\u003cPath\u003e pathsToCreate \u003d new LinkedList\u003c\u003e();\n\n            while (!curDir.equals(rootLogDir)) {\n              if (!checkExists(remoteFS, curDir, APP_DIR_PERMISSIONS)) {\n                pathsToCreate.addFirst(curDir);\n                curDir \u003d curDir.getParent();\n              } else {\n                break;\n              }\n            }\n\n            for (Path path : pathsToCreate) {\n              createDir(remoteFS, path, APP_DIR_PERMISSIONS);\n            }\n          } catch (IOException e) {\n            LOG.error(\"Failed to setup application log directory for \"\n                + appId, e);\n            throw e;\n          }\n          return null;\n        }\n      });\n    } catch (Exception e) {\n      if (e instanceof RemoteException) {\n        throw new YarnRuntimeException(((RemoteException) e)\n            .unwrapRemoteException(SecretManager.InvalidToken.class));\n      }\n      throw new YarnRuntimeException(e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/filecontroller/LogAggregationFileController.java",
      "extendedDetails": {}
    },
    "4b540bbfcf02d828052999215c6135603d98f5db": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8418. App local logs could leaked if log aggregation fails to initialize for the app. (Bibin A Chundatt via wangda)\n\nChange-Id: I29a23ca4b219b48c92e7975cd44cddb8b0e04104\n",
      "commitDate": "31/07/18 12:08 PM",
      "commitName": "4b540bbfcf02d828052999215c6135603d98f5db",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "30/07/18 10:55 AM",
      "commitNameOld": "2b39ad26984d641bad57db2cfcc0b7515ef95f46",
      "commitAuthorOld": "bibinchundatt",
      "daysBetweenCommits": 1.05,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,58 @@\n   public void createAppDir(final String user, final ApplicationId appId,\n       UserGroupInformation userUgi) {\n     final Path remoteRootLogDir \u003d getRemoteRootLogDir();\n     final String remoteRootLogDirSuffix \u003d getRemoteRootLogDirSuffix();\n     try {\n       userUgi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n         @Override\n         public Object run() throws Exception {\n           try {\n             // TODO: Reuse FS for user?\n             FileSystem remoteFS \u003d getFileSystem(conf);\n \n             // Only creating directories if they are missing to avoid\n             // unnecessary load on the filesystem from all of the nodes\n             Path appDir \u003d LogAggregationUtils.getRemoteAppLogDir(\n                 remoteRootLogDir, appId, user, remoteRootLogDirSuffix);\n \n             appDir \u003d appDir.makeQualified(remoteFS.getUri(),\n                 remoteFS.getWorkingDirectory());\n \n             if (!checkExists(remoteFS, appDir, APP_DIR_PERMISSIONS)) {\n               Path suffixDir \u003d LogAggregationUtils.getRemoteLogSuffixedDir(\n                   remoteRootLogDir, user, remoteRootLogDirSuffix);\n               suffixDir \u003d suffixDir.makeQualified(remoteFS.getUri(),\n                   remoteFS.getWorkingDirectory());\n \n               if (!checkExists(remoteFS, suffixDir, APP_DIR_PERMISSIONS)) {\n                 Path userDir \u003d LogAggregationUtils.getRemoteLogUserDir(\n                     remoteRootLogDir, user);\n                 userDir \u003d userDir.makeQualified(remoteFS.getUri(),\n                     remoteFS.getWorkingDirectory());\n \n                 if (!checkExists(remoteFS, userDir, APP_DIR_PERMISSIONS)) {\n                   createDir(remoteFS, userDir, APP_DIR_PERMISSIONS);\n                 }\n \n                 createDir(remoteFS, suffixDir, APP_DIR_PERMISSIONS);\n               }\n \n               createDir(remoteFS, appDir, APP_DIR_PERMISSIONS);\n             }\n \n           } catch (IOException e) {\n             LOG.error(\"Failed to setup application log directory for \"\n                 + appId, e);\n             throw e;\n           }\n           return null;\n         }\n       });\n     } catch (Exception e) {\n+      if (e instanceof RemoteException) {\n+        throw new YarnRuntimeException(((RemoteException) e)\n+            .unwrapRemoteException(SecretManager.InvalidToken.class));\n+      }\n       throw new YarnRuntimeException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void createAppDir(final String user, final ApplicationId appId,\n      UserGroupInformation userUgi) {\n    final Path remoteRootLogDir \u003d getRemoteRootLogDir();\n    final String remoteRootLogDirSuffix \u003d getRemoteRootLogDirSuffix();\n    try {\n      userUgi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n        @Override\n        public Object run() throws Exception {\n          try {\n            // TODO: Reuse FS for user?\n            FileSystem remoteFS \u003d getFileSystem(conf);\n\n            // Only creating directories if they are missing to avoid\n            // unnecessary load on the filesystem from all of the nodes\n            Path appDir \u003d LogAggregationUtils.getRemoteAppLogDir(\n                remoteRootLogDir, appId, user, remoteRootLogDirSuffix);\n\n            appDir \u003d appDir.makeQualified(remoteFS.getUri(),\n                remoteFS.getWorkingDirectory());\n\n            if (!checkExists(remoteFS, appDir, APP_DIR_PERMISSIONS)) {\n              Path suffixDir \u003d LogAggregationUtils.getRemoteLogSuffixedDir(\n                  remoteRootLogDir, user, remoteRootLogDirSuffix);\n              suffixDir \u003d suffixDir.makeQualified(remoteFS.getUri(),\n                  remoteFS.getWorkingDirectory());\n\n              if (!checkExists(remoteFS, suffixDir, APP_DIR_PERMISSIONS)) {\n                Path userDir \u003d LogAggregationUtils.getRemoteLogUserDir(\n                    remoteRootLogDir, user);\n                userDir \u003d userDir.makeQualified(remoteFS.getUri(),\n                    remoteFS.getWorkingDirectory());\n\n                if (!checkExists(remoteFS, userDir, APP_DIR_PERMISSIONS)) {\n                  createDir(remoteFS, userDir, APP_DIR_PERMISSIONS);\n                }\n\n                createDir(remoteFS, suffixDir, APP_DIR_PERMISSIONS);\n              }\n\n              createDir(remoteFS, appDir, APP_DIR_PERMISSIONS);\n            }\n\n          } catch (IOException e) {\n            LOG.error(\"Failed to setup application log directory for \"\n                + appId, e);\n            throw e;\n          }\n          return null;\n        }\n      });\n    } catch (Exception e) {\n      if (e instanceof RemoteException) {\n        throw new YarnRuntimeException(((RemoteException) e)\n            .unwrapRemoteException(SecretManager.InvalidToken.class));\n      }\n      throw new YarnRuntimeException(e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/filecontroller/LogAggregationFileController.java",
      "extendedDetails": {}
    },
    "c2cb7ea1ef6532020b69031dbd18b0f9b8369f0f": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-6876. Create an abstract log writer for extendability. Contributed by Xuan Gong.\n",
      "commitDate": "24/08/17 1:36 PM",
      "commitName": "c2cb7ea1ef6532020b69031dbd18b0f9b8369f0f",
      "commitAuthor": "Junping Du",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-6876. Create an abstract log writer for extendability. Contributed by Xuan Gong.\n",
          "commitDate": "24/08/17 1:36 PM",
          "commitName": "c2cb7ea1ef6532020b69031dbd18b0f9b8369f0f",
          "commitAuthor": "Junping Du",
          "commitDateOld": "24/08/17 8:17 AM",
          "commitNameOld": "8196a07c3211385ce85ae24f763b62696edc60b9",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 0.22,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,53 +1,54 @@\n-  protected void createAppDir(final String user, final ApplicationId appId,\n+  public void createAppDir(final String user, final ApplicationId appId,\n       UserGroupInformation userUgi) {\n+    final Path remoteRootLogDir \u003d getRemoteRootLogDir();\n+    final String remoteRootLogDirSuffix \u003d getRemoteRootLogDirSuffix();\n     try {\n       userUgi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n         @Override\n         public Object run() throws Exception {\n           try {\n             // TODO: Reuse FS for user?\n-            FileSystem remoteFS \u003d getFileSystem(getConfig());\n+            FileSystem remoteFS \u003d getFileSystem(conf);\n \n             // Only creating directories if they are missing to avoid\n             // unnecessary load on the filesystem from all of the nodes\n             Path appDir \u003d LogAggregationUtils.getRemoteAppLogDir(\n-                LogAggregationService.this.remoteRootLogDir, appId, user,\n-                LogAggregationService.this.remoteRootLogDirSuffix);\n+                remoteRootLogDir, appId, user, remoteRootLogDirSuffix);\n+\n             appDir \u003d appDir.makeQualified(remoteFS.getUri(),\n                 remoteFS.getWorkingDirectory());\n \n             if (!checkExists(remoteFS, appDir, APP_DIR_PERMISSIONS)) {\n               Path suffixDir \u003d LogAggregationUtils.getRemoteLogSuffixedDir(\n-                  LogAggregationService.this.remoteRootLogDir, user,\n-                  LogAggregationService.this.remoteRootLogDirSuffix);\n+                  remoteRootLogDir, user, remoteRootLogDirSuffix);\n               suffixDir \u003d suffixDir.makeQualified(remoteFS.getUri(),\n                   remoteFS.getWorkingDirectory());\n \n               if (!checkExists(remoteFS, suffixDir, APP_DIR_PERMISSIONS)) {\n                 Path userDir \u003d LogAggregationUtils.getRemoteLogUserDir(\n-                    LogAggregationService.this.remoteRootLogDir, user);\n+                    remoteRootLogDir, user);\n                 userDir \u003d userDir.makeQualified(remoteFS.getUri(),\n                     remoteFS.getWorkingDirectory());\n \n                 if (!checkExists(remoteFS, userDir, APP_DIR_PERMISSIONS)) {\n                   createDir(remoteFS, userDir, APP_DIR_PERMISSIONS);\n                 }\n \n                 createDir(remoteFS, suffixDir, APP_DIR_PERMISSIONS);\n               }\n \n               createDir(remoteFS, appDir, APP_DIR_PERMISSIONS);\n             }\n \n           } catch (IOException e) {\n             LOG.error(\"Failed to setup application log directory for \"\n                 + appId, e);\n             throw e;\n           }\n           return null;\n         }\n       });\n     } catch (Exception e) {\n       throw new YarnRuntimeException(e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void createAppDir(final String user, final ApplicationId appId,\n      UserGroupInformation userUgi) {\n    final Path remoteRootLogDir \u003d getRemoteRootLogDir();\n    final String remoteRootLogDirSuffix \u003d getRemoteRootLogDirSuffix();\n    try {\n      userUgi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n        @Override\n        public Object run() throws Exception {\n          try {\n            // TODO: Reuse FS for user?\n            FileSystem remoteFS \u003d getFileSystem(conf);\n\n            // Only creating directories if they are missing to avoid\n            // unnecessary load on the filesystem from all of the nodes\n            Path appDir \u003d LogAggregationUtils.getRemoteAppLogDir(\n                remoteRootLogDir, appId, user, remoteRootLogDirSuffix);\n\n            appDir \u003d appDir.makeQualified(remoteFS.getUri(),\n                remoteFS.getWorkingDirectory());\n\n            if (!checkExists(remoteFS, appDir, APP_DIR_PERMISSIONS)) {\n              Path suffixDir \u003d LogAggregationUtils.getRemoteLogSuffixedDir(\n                  remoteRootLogDir, user, remoteRootLogDirSuffix);\n              suffixDir \u003d suffixDir.makeQualified(remoteFS.getUri(),\n                  remoteFS.getWorkingDirectory());\n\n              if (!checkExists(remoteFS, suffixDir, APP_DIR_PERMISSIONS)) {\n                Path userDir \u003d LogAggregationUtils.getRemoteLogUserDir(\n                    remoteRootLogDir, user);\n                userDir \u003d userDir.makeQualified(remoteFS.getUri(),\n                    remoteFS.getWorkingDirectory());\n\n                if (!checkExists(remoteFS, userDir, APP_DIR_PERMISSIONS)) {\n                  createDir(remoteFS, userDir, APP_DIR_PERMISSIONS);\n                }\n\n                createDir(remoteFS, suffixDir, APP_DIR_PERMISSIONS);\n              }\n\n              createDir(remoteFS, appDir, APP_DIR_PERMISSIONS);\n            }\n\n          } catch (IOException e) {\n            LOG.error(\"Failed to setup application log directory for \"\n                + appId, e);\n            throw e;\n          }\n          return null;\n        }\n      });\n    } catch (Exception e) {\n      throw new YarnRuntimeException(e);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/filecontroller/LogAggregationFileController.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/filecontroller/LogAggregationFileController.java",
            "oldMethodName": "createAppDir",
            "newMethodName": "createAppDir"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-6876. Create an abstract log writer for extendability. Contributed by Xuan Gong.\n",
          "commitDate": "24/08/17 1:36 PM",
          "commitName": "c2cb7ea1ef6532020b69031dbd18b0f9b8369f0f",
          "commitAuthor": "Junping Du",
          "commitDateOld": "24/08/17 8:17 AM",
          "commitNameOld": "8196a07c3211385ce85ae24f763b62696edc60b9",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 0.22,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,53 +1,54 @@\n-  protected void createAppDir(final String user, final ApplicationId appId,\n+  public void createAppDir(final String user, final ApplicationId appId,\n       UserGroupInformation userUgi) {\n+    final Path remoteRootLogDir \u003d getRemoteRootLogDir();\n+    final String remoteRootLogDirSuffix \u003d getRemoteRootLogDirSuffix();\n     try {\n       userUgi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n         @Override\n         public Object run() throws Exception {\n           try {\n             // TODO: Reuse FS for user?\n-            FileSystem remoteFS \u003d getFileSystem(getConfig());\n+            FileSystem remoteFS \u003d getFileSystem(conf);\n \n             // Only creating directories if they are missing to avoid\n             // unnecessary load on the filesystem from all of the nodes\n             Path appDir \u003d LogAggregationUtils.getRemoteAppLogDir(\n-                LogAggregationService.this.remoteRootLogDir, appId, user,\n-                LogAggregationService.this.remoteRootLogDirSuffix);\n+                remoteRootLogDir, appId, user, remoteRootLogDirSuffix);\n+\n             appDir \u003d appDir.makeQualified(remoteFS.getUri(),\n                 remoteFS.getWorkingDirectory());\n \n             if (!checkExists(remoteFS, appDir, APP_DIR_PERMISSIONS)) {\n               Path suffixDir \u003d LogAggregationUtils.getRemoteLogSuffixedDir(\n-                  LogAggregationService.this.remoteRootLogDir, user,\n-                  LogAggregationService.this.remoteRootLogDirSuffix);\n+                  remoteRootLogDir, user, remoteRootLogDirSuffix);\n               suffixDir \u003d suffixDir.makeQualified(remoteFS.getUri(),\n                   remoteFS.getWorkingDirectory());\n \n               if (!checkExists(remoteFS, suffixDir, APP_DIR_PERMISSIONS)) {\n                 Path userDir \u003d LogAggregationUtils.getRemoteLogUserDir(\n-                    LogAggregationService.this.remoteRootLogDir, user);\n+                    remoteRootLogDir, user);\n                 userDir \u003d userDir.makeQualified(remoteFS.getUri(),\n                     remoteFS.getWorkingDirectory());\n \n                 if (!checkExists(remoteFS, userDir, APP_DIR_PERMISSIONS)) {\n                   createDir(remoteFS, userDir, APP_DIR_PERMISSIONS);\n                 }\n \n                 createDir(remoteFS, suffixDir, APP_DIR_PERMISSIONS);\n               }\n \n               createDir(remoteFS, appDir, APP_DIR_PERMISSIONS);\n             }\n \n           } catch (IOException e) {\n             LOG.error(\"Failed to setup application log directory for \"\n                 + appId, e);\n             throw e;\n           }\n           return null;\n         }\n       });\n     } catch (Exception e) {\n       throw new YarnRuntimeException(e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void createAppDir(final String user, final ApplicationId appId,\n      UserGroupInformation userUgi) {\n    final Path remoteRootLogDir \u003d getRemoteRootLogDir();\n    final String remoteRootLogDirSuffix \u003d getRemoteRootLogDirSuffix();\n    try {\n      userUgi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n        @Override\n        public Object run() throws Exception {\n          try {\n            // TODO: Reuse FS for user?\n            FileSystem remoteFS \u003d getFileSystem(conf);\n\n            // Only creating directories if they are missing to avoid\n            // unnecessary load on the filesystem from all of the nodes\n            Path appDir \u003d LogAggregationUtils.getRemoteAppLogDir(\n                remoteRootLogDir, appId, user, remoteRootLogDirSuffix);\n\n            appDir \u003d appDir.makeQualified(remoteFS.getUri(),\n                remoteFS.getWorkingDirectory());\n\n            if (!checkExists(remoteFS, appDir, APP_DIR_PERMISSIONS)) {\n              Path suffixDir \u003d LogAggregationUtils.getRemoteLogSuffixedDir(\n                  remoteRootLogDir, user, remoteRootLogDirSuffix);\n              suffixDir \u003d suffixDir.makeQualified(remoteFS.getUri(),\n                  remoteFS.getWorkingDirectory());\n\n              if (!checkExists(remoteFS, suffixDir, APP_DIR_PERMISSIONS)) {\n                Path userDir \u003d LogAggregationUtils.getRemoteLogUserDir(\n                    remoteRootLogDir, user);\n                userDir \u003d userDir.makeQualified(remoteFS.getUri(),\n                    remoteFS.getWorkingDirectory());\n\n                if (!checkExists(remoteFS, userDir, APP_DIR_PERMISSIONS)) {\n                  createDir(remoteFS, userDir, APP_DIR_PERMISSIONS);\n                }\n\n                createDir(remoteFS, suffixDir, APP_DIR_PERMISSIONS);\n              }\n\n              createDir(remoteFS, appDir, APP_DIR_PERMISSIONS);\n            }\n\n          } catch (IOException e) {\n            LOG.error(\"Failed to setup application log directory for \"\n                + appId, e);\n            throw e;\n          }\n          return null;\n        }\n      });\n    } catch (Exception e) {\n      throw new YarnRuntimeException(e);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/filecontroller/LogAggregationFileController.java",
          "extendedDetails": {
            "oldValue": "[protected]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6876. Create an abstract log writer for extendability. Contributed by Xuan Gong.\n",
          "commitDate": "24/08/17 1:36 PM",
          "commitName": "c2cb7ea1ef6532020b69031dbd18b0f9b8369f0f",
          "commitAuthor": "Junping Du",
          "commitDateOld": "24/08/17 8:17 AM",
          "commitNameOld": "8196a07c3211385ce85ae24f763b62696edc60b9",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 0.22,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,53 +1,54 @@\n-  protected void createAppDir(final String user, final ApplicationId appId,\n+  public void createAppDir(final String user, final ApplicationId appId,\n       UserGroupInformation userUgi) {\n+    final Path remoteRootLogDir \u003d getRemoteRootLogDir();\n+    final String remoteRootLogDirSuffix \u003d getRemoteRootLogDirSuffix();\n     try {\n       userUgi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n         @Override\n         public Object run() throws Exception {\n           try {\n             // TODO: Reuse FS for user?\n-            FileSystem remoteFS \u003d getFileSystem(getConfig());\n+            FileSystem remoteFS \u003d getFileSystem(conf);\n \n             // Only creating directories if they are missing to avoid\n             // unnecessary load on the filesystem from all of the nodes\n             Path appDir \u003d LogAggregationUtils.getRemoteAppLogDir(\n-                LogAggregationService.this.remoteRootLogDir, appId, user,\n-                LogAggregationService.this.remoteRootLogDirSuffix);\n+                remoteRootLogDir, appId, user, remoteRootLogDirSuffix);\n+\n             appDir \u003d appDir.makeQualified(remoteFS.getUri(),\n                 remoteFS.getWorkingDirectory());\n \n             if (!checkExists(remoteFS, appDir, APP_DIR_PERMISSIONS)) {\n               Path suffixDir \u003d LogAggregationUtils.getRemoteLogSuffixedDir(\n-                  LogAggregationService.this.remoteRootLogDir, user,\n-                  LogAggregationService.this.remoteRootLogDirSuffix);\n+                  remoteRootLogDir, user, remoteRootLogDirSuffix);\n               suffixDir \u003d suffixDir.makeQualified(remoteFS.getUri(),\n                   remoteFS.getWorkingDirectory());\n \n               if (!checkExists(remoteFS, suffixDir, APP_DIR_PERMISSIONS)) {\n                 Path userDir \u003d LogAggregationUtils.getRemoteLogUserDir(\n-                    LogAggregationService.this.remoteRootLogDir, user);\n+                    remoteRootLogDir, user);\n                 userDir \u003d userDir.makeQualified(remoteFS.getUri(),\n                     remoteFS.getWorkingDirectory());\n \n                 if (!checkExists(remoteFS, userDir, APP_DIR_PERMISSIONS)) {\n                   createDir(remoteFS, userDir, APP_DIR_PERMISSIONS);\n                 }\n \n                 createDir(remoteFS, suffixDir, APP_DIR_PERMISSIONS);\n               }\n \n               createDir(remoteFS, appDir, APP_DIR_PERMISSIONS);\n             }\n \n           } catch (IOException e) {\n             LOG.error(\"Failed to setup application log directory for \"\n                 + appId, e);\n             throw e;\n           }\n           return null;\n         }\n       });\n     } catch (Exception e) {\n       throw new YarnRuntimeException(e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void createAppDir(final String user, final ApplicationId appId,\n      UserGroupInformation userUgi) {\n    final Path remoteRootLogDir \u003d getRemoteRootLogDir();\n    final String remoteRootLogDirSuffix \u003d getRemoteRootLogDirSuffix();\n    try {\n      userUgi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n        @Override\n        public Object run() throws Exception {\n          try {\n            // TODO: Reuse FS for user?\n            FileSystem remoteFS \u003d getFileSystem(conf);\n\n            // Only creating directories if they are missing to avoid\n            // unnecessary load on the filesystem from all of the nodes\n            Path appDir \u003d LogAggregationUtils.getRemoteAppLogDir(\n                remoteRootLogDir, appId, user, remoteRootLogDirSuffix);\n\n            appDir \u003d appDir.makeQualified(remoteFS.getUri(),\n                remoteFS.getWorkingDirectory());\n\n            if (!checkExists(remoteFS, appDir, APP_DIR_PERMISSIONS)) {\n              Path suffixDir \u003d LogAggregationUtils.getRemoteLogSuffixedDir(\n                  remoteRootLogDir, user, remoteRootLogDirSuffix);\n              suffixDir \u003d suffixDir.makeQualified(remoteFS.getUri(),\n                  remoteFS.getWorkingDirectory());\n\n              if (!checkExists(remoteFS, suffixDir, APP_DIR_PERMISSIONS)) {\n                Path userDir \u003d LogAggregationUtils.getRemoteLogUserDir(\n                    remoteRootLogDir, user);\n                userDir \u003d userDir.makeQualified(remoteFS.getUri(),\n                    remoteFS.getWorkingDirectory());\n\n                if (!checkExists(remoteFS, userDir, APP_DIR_PERMISSIONS)) {\n                  createDir(remoteFS, userDir, APP_DIR_PERMISSIONS);\n                }\n\n                createDir(remoteFS, suffixDir, APP_DIR_PERMISSIONS);\n              }\n\n              createDir(remoteFS, appDir, APP_DIR_PERMISSIONS);\n            }\n\n          } catch (IOException e) {\n            LOG.error(\"Failed to setup application log directory for \"\n                + appId, e);\n            throw e;\n          }\n          return null;\n        }\n      });\n    } catch (Exception e) {\n      throw new YarnRuntimeException(e);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/filecontroller/LogAggregationFileController.java",
          "extendedDetails": {}
        }
      ]
    },
    "78063b3a76840ffade33667a90f9c9dbe7fc99eb": {
      "type": "Ybodychange",
      "commitMessage": "YARN-742. Log aggregation causes a lot of redundant setPermission calls. Contributed by Jason Lowe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489596 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/06/13 1:49 PM",
      "commitName": "78063b3a76840ffade33667a90f9c9dbe7fc99eb",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "03/06/13 9:05 PM",
      "commitNameOld": "a83fb61ac07c0468cbc7a38526e92683883dd932",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.7,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,52 @@\n   protected void createAppDir(final String user, final ApplicationId appId,\n       UserGroupInformation userUgi) {\n     try {\n       userUgi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n         @Override\n         public Object run() throws Exception {\n-          // TODO: Reuse FS for user?\n-          FileSystem remoteFS \u003d null;\n-          Path userDir \u003d null;\n-          Path suffixDir \u003d null;\n-          Path appDir \u003d null;\n           try {\n-            remoteFS \u003d FileSystem.get(getConfig());\n-          } catch (IOException e) {\n-            LOG.error(\"Failed to get remote FileSystem while processing app \"\n-                + appId, e);\n-            throw e;\n-          }\n-          try {\n-            userDir \u003d\n-                LogAggregationUtils.getRemoteLogUserDir(\n+            // TODO: Reuse FS for user?\n+            FileSystem remoteFS \u003d getFileSystem(getConfig());\n+\n+            // Only creating directories if they are missing to avoid\n+            // unnecessary load on the filesystem from all of the nodes\n+            Path appDir \u003d LogAggregationUtils.getRemoteAppLogDir(\n+                LogAggregationService.this.remoteRootLogDir, appId, user,\n+                LogAggregationService.this.remoteRootLogDirSuffix);\n+            appDir \u003d appDir.makeQualified(remoteFS.getUri(),\n+                remoteFS.getWorkingDirectory());\n+\n+            if (!checkExists(remoteFS, appDir, APP_DIR_PERMISSIONS)) {\n+              Path suffixDir \u003d LogAggregationUtils.getRemoteLogSuffixedDir(\n+                  LogAggregationService.this.remoteRootLogDir, user,\n+                  LogAggregationService.this.remoteRootLogDirSuffix);\n+              suffixDir \u003d suffixDir.makeQualified(remoteFS.getUri(),\n+                  remoteFS.getWorkingDirectory());\n+\n+              if (!checkExists(remoteFS, suffixDir, APP_DIR_PERMISSIONS)) {\n+                Path userDir \u003d LogAggregationUtils.getRemoteLogUserDir(\n                     LogAggregationService.this.remoteRootLogDir, user);\n-            userDir \u003d\n-                userDir.makeQualified(remoteFS.getUri(),\n+                userDir \u003d userDir.makeQualified(remoteFS.getUri(),\n                     remoteFS.getWorkingDirectory());\n-            createDir(remoteFS, userDir, APP_DIR_PERMISSIONS);\n+\n+                if (!checkExists(remoteFS, userDir, APP_DIR_PERMISSIONS)) {\n+                  createDir(remoteFS, userDir, APP_DIR_PERMISSIONS);\n+                }\n+\n+                createDir(remoteFS, suffixDir, APP_DIR_PERMISSIONS);\n+              }\n+\n+              createDir(remoteFS, appDir, APP_DIR_PERMISSIONS);\n+            }\n           } catch (IOException e) {\n-            LOG.error(\"Failed to create user dir [\" + userDir\n-                + \"] while processing app \" + appId);\n-            throw e;\n-          }\n-          try {\n-            suffixDir \u003d\n-                LogAggregationUtils.getRemoteLogSuffixedDir(\n-                    LogAggregationService.this.remoteRootLogDir, user,\n-                    LogAggregationService.this.remoteRootLogDirSuffix);\n-            suffixDir \u003d\n-                suffixDir.makeQualified(remoteFS.getUri(),\n-                    remoteFS.getWorkingDirectory());\n-            createDir(remoteFS, suffixDir, APP_DIR_PERMISSIONS);\n-          } catch (IOException e) {\n-            LOG.error(\"Failed to create suffixed user dir [\" + suffixDir\n-                + \"] while processing app \" + appId);\n-            throw e;\n-          }\n-          try {\n-            appDir \u003d\n-                LogAggregationUtils.getRemoteAppLogDir(\n-                    LogAggregationService.this.remoteRootLogDir, appId, user,\n-                    LogAggregationService.this.remoteRootLogDirSuffix);\n-            appDir \u003d\n-                appDir.makeQualified(remoteFS.getUri(),\n-                    remoteFS.getWorkingDirectory());\n-            createDir(remoteFS, appDir, APP_DIR_PERMISSIONS);\n-          } catch (IOException e) {\n-            LOG.error(\"Failed to  create application log dir [\" + appDir\n-                + \"] while processing app \" + appId);\n+            LOG.error(\"Failed to setup application log directory for \"\n+                + appId, e);\n             throw e;\n           }\n           return null;\n         }\n       });\n     } catch (Exception e) {\n       throw new YarnRuntimeException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void createAppDir(final String user, final ApplicationId appId,\n      UserGroupInformation userUgi) {\n    try {\n      userUgi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n        @Override\n        public Object run() throws Exception {\n          try {\n            // TODO: Reuse FS for user?\n            FileSystem remoteFS \u003d getFileSystem(getConfig());\n\n            // Only creating directories if they are missing to avoid\n            // unnecessary load on the filesystem from all of the nodes\n            Path appDir \u003d LogAggregationUtils.getRemoteAppLogDir(\n                LogAggregationService.this.remoteRootLogDir, appId, user,\n                LogAggregationService.this.remoteRootLogDirSuffix);\n            appDir \u003d appDir.makeQualified(remoteFS.getUri(),\n                remoteFS.getWorkingDirectory());\n\n            if (!checkExists(remoteFS, appDir, APP_DIR_PERMISSIONS)) {\n              Path suffixDir \u003d LogAggregationUtils.getRemoteLogSuffixedDir(\n                  LogAggregationService.this.remoteRootLogDir, user,\n                  LogAggregationService.this.remoteRootLogDirSuffix);\n              suffixDir \u003d suffixDir.makeQualified(remoteFS.getUri(),\n                  remoteFS.getWorkingDirectory());\n\n              if (!checkExists(remoteFS, suffixDir, APP_DIR_PERMISSIONS)) {\n                Path userDir \u003d LogAggregationUtils.getRemoteLogUserDir(\n                    LogAggregationService.this.remoteRootLogDir, user);\n                userDir \u003d userDir.makeQualified(remoteFS.getUri(),\n                    remoteFS.getWorkingDirectory());\n\n                if (!checkExists(remoteFS, userDir, APP_DIR_PERMISSIONS)) {\n                  createDir(remoteFS, userDir, APP_DIR_PERMISSIONS);\n                }\n\n                createDir(remoteFS, suffixDir, APP_DIR_PERMISSIONS);\n              }\n\n              createDir(remoteFS, appDir, APP_DIR_PERMISSIONS);\n            }\n          } catch (IOException e) {\n            LOG.error(\"Failed to setup application log directory for \"\n                + appId, e);\n            throw e;\n          }\n          return null;\n        }\n      });\n    } catch (Exception e) {\n      throw new YarnRuntimeException(e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
      "extendedDetails": {}
    },
    "a83fb61ac07c0468cbc7a38526e92683883dd932": {
      "type": "Ybodychange",
      "commitMessage": "YARN-635. Renamed YarnRemoteException to YarnException. Contributed by Siddharth Seth.\nMAPREDUCE-5301. Updated MR code to work with YARN-635 changes of renaming YarnRemoteException to YarnException. Contributed by Siddharth Seth\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489283 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/06/13 9:05 PM",
      "commitName": "a83fb61ac07c0468cbc7a38526e92683883dd932",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "29/05/13 7:25 AM",
      "commitNameOld": "31c96829c767a093d6de8bdc30e06089eeba860b",
      "commitAuthorOld": "Jason Darrell Lowe",
      "daysBetweenCommits": 5.57,
      "commitsBetweenForRepo": 64,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,66 @@\n   protected void createAppDir(final String user, final ApplicationId appId,\n       UserGroupInformation userUgi) {\n     try {\n       userUgi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n         @Override\n         public Object run() throws Exception {\n           // TODO: Reuse FS for user?\n           FileSystem remoteFS \u003d null;\n           Path userDir \u003d null;\n           Path suffixDir \u003d null;\n           Path appDir \u003d null;\n           try {\n             remoteFS \u003d FileSystem.get(getConfig());\n           } catch (IOException e) {\n             LOG.error(\"Failed to get remote FileSystem while processing app \"\n                 + appId, e);\n             throw e;\n           }\n           try {\n             userDir \u003d\n                 LogAggregationUtils.getRemoteLogUserDir(\n                     LogAggregationService.this.remoteRootLogDir, user);\n             userDir \u003d\n                 userDir.makeQualified(remoteFS.getUri(),\n                     remoteFS.getWorkingDirectory());\n             createDir(remoteFS, userDir, APP_DIR_PERMISSIONS);\n           } catch (IOException e) {\n             LOG.error(\"Failed to create user dir [\" + userDir\n                 + \"] while processing app \" + appId);\n             throw e;\n           }\n           try {\n             suffixDir \u003d\n                 LogAggregationUtils.getRemoteLogSuffixedDir(\n                     LogAggregationService.this.remoteRootLogDir, user,\n                     LogAggregationService.this.remoteRootLogDirSuffix);\n             suffixDir \u003d\n                 suffixDir.makeQualified(remoteFS.getUri(),\n                     remoteFS.getWorkingDirectory());\n             createDir(remoteFS, suffixDir, APP_DIR_PERMISSIONS);\n           } catch (IOException e) {\n             LOG.error(\"Failed to create suffixed user dir [\" + suffixDir\n                 + \"] while processing app \" + appId);\n             throw e;\n           }\n           try {\n             appDir \u003d\n                 LogAggregationUtils.getRemoteAppLogDir(\n                     LogAggregationService.this.remoteRootLogDir, appId, user,\n                     LogAggregationService.this.remoteRootLogDirSuffix);\n             appDir \u003d\n                 appDir.makeQualified(remoteFS.getUri(),\n                     remoteFS.getWorkingDirectory());\n             createDir(remoteFS, appDir, APP_DIR_PERMISSIONS);\n           } catch (IOException e) {\n             LOG.error(\"Failed to  create application log dir [\" + appDir\n                 + \"] while processing app \" + appId);\n             throw e;\n           }\n           return null;\n         }\n       });\n     } catch (Exception e) {\n-      throw new YarnException(e);\n+      throw new YarnRuntimeException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void createAppDir(final String user, final ApplicationId appId,\n      UserGroupInformation userUgi) {\n    try {\n      userUgi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n        @Override\n        public Object run() throws Exception {\n          // TODO: Reuse FS for user?\n          FileSystem remoteFS \u003d null;\n          Path userDir \u003d null;\n          Path suffixDir \u003d null;\n          Path appDir \u003d null;\n          try {\n            remoteFS \u003d FileSystem.get(getConfig());\n          } catch (IOException e) {\n            LOG.error(\"Failed to get remote FileSystem while processing app \"\n                + appId, e);\n            throw e;\n          }\n          try {\n            userDir \u003d\n                LogAggregationUtils.getRemoteLogUserDir(\n                    LogAggregationService.this.remoteRootLogDir, user);\n            userDir \u003d\n                userDir.makeQualified(remoteFS.getUri(),\n                    remoteFS.getWorkingDirectory());\n            createDir(remoteFS, userDir, APP_DIR_PERMISSIONS);\n          } catch (IOException e) {\n            LOG.error(\"Failed to create user dir [\" + userDir\n                + \"] while processing app \" + appId);\n            throw e;\n          }\n          try {\n            suffixDir \u003d\n                LogAggregationUtils.getRemoteLogSuffixedDir(\n                    LogAggregationService.this.remoteRootLogDir, user,\n                    LogAggregationService.this.remoteRootLogDirSuffix);\n            suffixDir \u003d\n                suffixDir.makeQualified(remoteFS.getUri(),\n                    remoteFS.getWorkingDirectory());\n            createDir(remoteFS, suffixDir, APP_DIR_PERMISSIONS);\n          } catch (IOException e) {\n            LOG.error(\"Failed to create suffixed user dir [\" + suffixDir\n                + \"] while processing app \" + appId);\n            throw e;\n          }\n          try {\n            appDir \u003d\n                LogAggregationUtils.getRemoteAppLogDir(\n                    LogAggregationService.this.remoteRootLogDir, appId, user,\n                    LogAggregationService.this.remoteRootLogDirSuffix);\n            appDir \u003d\n                appDir.makeQualified(remoteFS.getUri(),\n                    remoteFS.getWorkingDirectory());\n            createDir(remoteFS, appDir, APP_DIR_PERMISSIONS);\n          } catch (IOException e) {\n            LOG.error(\"Failed to  create application log dir [\" + appDir\n                + \"] while processing app \" + appId);\n            throw e;\n          }\n          return null;\n        }\n      });\n    } catch (Exception e) {\n      throw new YarnRuntimeException(e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
      "extendedDetails": {}
    },
    "df5e2b83526634ac7c1c1131bf1aad73ac353d01": {
      "type": "Ymodifierchange",
      "commitMessage": "MAPREDUCE-4323. NM leaks filesystems (Jason Lowe via jeagles)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1375164 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/08/12 11:32 AM",
      "commitName": "df5e2b83526634ac7c1c1131bf1aad73ac353d01",
      "commitAuthor": "Jonathan Turner Eagles",
      "commitDateOld": "17/08/12 1:29 PM",
      "commitNameOld": "7fc6ad661d4723cc2ea1df1ff0c4611d5f534f9e",
      "commitAuthorOld": "Thomas Graves",
      "daysBetweenCommits": 2.92,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,66 @@\n-  private void createAppDir(final String user, final ApplicationId appId,\n+  protected void createAppDir(final String user, final ApplicationId appId,\n       UserGroupInformation userUgi) {\n     try {\n       userUgi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n         @Override\n         public Object run() throws Exception {\n           // TODO: Reuse FS for user?\n           FileSystem remoteFS \u003d null;\n           Path userDir \u003d null;\n           Path suffixDir \u003d null;\n           Path appDir \u003d null;\n           try {\n             remoteFS \u003d FileSystem.get(getConfig());\n           } catch (IOException e) {\n             LOG.error(\"Failed to get remote FileSystem while processing app \"\n                 + appId, e);\n             throw e;\n           }\n           try {\n             userDir \u003d\n                 LogAggregationUtils.getRemoteLogUserDir(\n                     LogAggregationService.this.remoteRootLogDir, user);\n             userDir \u003d\n                 userDir.makeQualified(remoteFS.getUri(),\n                     remoteFS.getWorkingDirectory());\n             createDir(remoteFS, userDir, APP_DIR_PERMISSIONS);\n           } catch (IOException e) {\n             LOG.error(\"Failed to create user dir [\" + userDir\n                 + \"] while processing app \" + appId);\n             throw e;\n           }\n           try {\n             suffixDir \u003d\n                 LogAggregationUtils.getRemoteLogSuffixedDir(\n                     LogAggregationService.this.remoteRootLogDir, user,\n                     LogAggregationService.this.remoteRootLogDirSuffix);\n             suffixDir \u003d\n                 suffixDir.makeQualified(remoteFS.getUri(),\n                     remoteFS.getWorkingDirectory());\n             createDir(remoteFS, suffixDir, APP_DIR_PERMISSIONS);\n           } catch (IOException e) {\n             LOG.error(\"Failed to create suffixed user dir [\" + suffixDir\n                 + \"] while processing app \" + appId);\n             throw e;\n           }\n           try {\n             appDir \u003d\n                 LogAggregationUtils.getRemoteAppLogDir(\n                     LogAggregationService.this.remoteRootLogDir, appId, user,\n                     LogAggregationService.this.remoteRootLogDirSuffix);\n             appDir \u003d\n                 appDir.makeQualified(remoteFS.getUri(),\n                     remoteFS.getWorkingDirectory());\n             createDir(remoteFS, appDir, APP_DIR_PERMISSIONS);\n           } catch (IOException e) {\n             LOG.error(\"Failed to  create application log dir [\" + appDir\n                 + \"] while processing app \" + appId);\n             throw e;\n           }\n           return null;\n         }\n       });\n     } catch (Exception e) {\n       throw new YarnException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void createAppDir(final String user, final ApplicationId appId,\n      UserGroupInformation userUgi) {\n    try {\n      userUgi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n        @Override\n        public Object run() throws Exception {\n          // TODO: Reuse FS for user?\n          FileSystem remoteFS \u003d null;\n          Path userDir \u003d null;\n          Path suffixDir \u003d null;\n          Path appDir \u003d null;\n          try {\n            remoteFS \u003d FileSystem.get(getConfig());\n          } catch (IOException e) {\n            LOG.error(\"Failed to get remote FileSystem while processing app \"\n                + appId, e);\n            throw e;\n          }\n          try {\n            userDir \u003d\n                LogAggregationUtils.getRemoteLogUserDir(\n                    LogAggregationService.this.remoteRootLogDir, user);\n            userDir \u003d\n                userDir.makeQualified(remoteFS.getUri(),\n                    remoteFS.getWorkingDirectory());\n            createDir(remoteFS, userDir, APP_DIR_PERMISSIONS);\n          } catch (IOException e) {\n            LOG.error(\"Failed to create user dir [\" + userDir\n                + \"] while processing app \" + appId);\n            throw e;\n          }\n          try {\n            suffixDir \u003d\n                LogAggregationUtils.getRemoteLogSuffixedDir(\n                    LogAggregationService.this.remoteRootLogDir, user,\n                    LogAggregationService.this.remoteRootLogDirSuffix);\n            suffixDir \u003d\n                suffixDir.makeQualified(remoteFS.getUri(),\n                    remoteFS.getWorkingDirectory());\n            createDir(remoteFS, suffixDir, APP_DIR_PERMISSIONS);\n          } catch (IOException e) {\n            LOG.error(\"Failed to create suffixed user dir [\" + suffixDir\n                + \"] while processing app \" + appId);\n            throw e;\n          }\n          try {\n            appDir \u003d\n                LogAggregationUtils.getRemoteAppLogDir(\n                    LogAggregationService.this.remoteRootLogDir, appId, user,\n                    LogAggregationService.this.remoteRootLogDirSuffix);\n            appDir \u003d\n                appDir.makeQualified(remoteFS.getUri(),\n                    remoteFS.getWorkingDirectory());\n            createDir(remoteFS, appDir, APP_DIR_PERMISSIONS);\n          } catch (IOException e) {\n            LOG.error(\"Failed to  create application log dir [\" + appDir\n                + \"] while processing app \" + appId);\n            throw e;\n          }\n          return null;\n        }\n      });\n    } catch (Exception e) {\n      throw new YarnException(e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[protected]"
      }
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void createAppDir(final String user, final ApplicationId appId,\n      UserGroupInformation userUgi) {\n    try {\n      userUgi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n        @Override\n        public Object run() throws Exception {\n          // TODO: Reuse FS for user?\n          FileSystem remoteFS \u003d null;\n          Path userDir \u003d null;\n          Path suffixDir \u003d null;\n          Path appDir \u003d null;\n          try {\n            remoteFS \u003d FileSystem.get(getConfig());\n          } catch (IOException e) {\n            LOG.error(\"Failed to get remote FileSystem while processing app \"\n                + appId, e);\n            throw e;\n          }\n          try {\n            userDir \u003d\n                LogAggregationUtils.getRemoteLogUserDir(\n                    LogAggregationService.this.remoteRootLogDir, user);\n            userDir \u003d\n                userDir.makeQualified(remoteFS.getUri(),\n                    remoteFS.getWorkingDirectory());\n            createDir(remoteFS, userDir, APP_DIR_PERMISSIONS);\n          } catch (IOException e) {\n            LOG.error(\"Failed to create user dir [\" + userDir\n                + \"] while processing app \" + appId);\n            throw e;\n          }\n          try {\n            suffixDir \u003d\n                LogAggregationUtils.getRemoteLogSuffixedDir(\n                    LogAggregationService.this.remoteRootLogDir, user,\n                    LogAggregationService.this.remoteRootLogDirSuffix);\n            suffixDir \u003d\n                suffixDir.makeQualified(remoteFS.getUri(),\n                    remoteFS.getWorkingDirectory());\n            createDir(remoteFS, suffixDir, APP_DIR_PERMISSIONS);\n          } catch (IOException e) {\n            LOG.error(\"Failed to create suffixed user dir [\" + suffixDir\n                + \"] while processing app \" + appId);\n            throw e;\n          }\n          try {\n            appDir \u003d\n                LogAggregationUtils.getRemoteAppLogDir(\n                    LogAggregationService.this.remoteRootLogDir, appId, user,\n                    LogAggregationService.this.remoteRootLogDirSuffix);\n            appDir \u003d\n                appDir.makeQualified(remoteFS.getUri(),\n                    remoteFS.getWorkingDirectory());\n            createDir(remoteFS, appDir, APP_DIR_PERMISSIONS);\n          } catch (IOException e) {\n            LOG.error(\"Failed to  create application log dir [\" + appDir\n                + \"] while processing app \" + appId);\n            throw e;\n          }\n          return null;\n        }\n      });\n    } catch (Exception e) {\n      throw new YarnException(e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java"
      }
    },
    "c27601fefebd0af887a12d684bfc6f90d9fc0321": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3297. Moved log related components into yarn-common so that HistoryServer and clients can use them without depending on the yarn-server-nodemanager module. Contributed by Siddharth Seth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1196986 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/11/11 1:02 AM",
      "commitName": "c27601fefebd0af887a12d684bfc6f90d9fc0321",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "31/10/11 2:55 AM",
      "commitNameOld": "a75c4cf4e4400a2dcb3edc88df7f35a763f93c4e",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 2.92,
      "commitsBetweenForRepo": 47,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,66 @@\n   private void createAppDir(final String user, final ApplicationId appId,\n       UserGroupInformation userUgi) {\n     try {\n       userUgi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n         @Override\n         public Object run() throws Exception {\n           // TODO: Reuse FS for user?\n           FileSystem remoteFS \u003d null;\n           Path userDir \u003d null;\n           Path suffixDir \u003d null;\n           Path appDir \u003d null;\n           try {\n             remoteFS \u003d FileSystem.get(getConfig());\n           } catch (IOException e) {\n             LOG.error(\"Failed to get remote FileSystem while processing app \"\n                 + appId, e);\n             throw e;\n           }\n           try {\n             userDir \u003d\n-                getRemoteLogUserDir(\n+                LogAggregationUtils.getRemoteLogUserDir(\n                     LogAggregationService.this.remoteRootLogDir, user);\n             userDir \u003d\n                 userDir.makeQualified(remoteFS.getUri(),\n                     remoteFS.getWorkingDirectory());\n             createDir(remoteFS, userDir, APP_DIR_PERMISSIONS);\n           } catch (IOException e) {\n             LOG.error(\"Failed to create user dir [\" + userDir\n                 + \"] while processing app \" + appId);\n             throw e;\n           }\n           try {\n             suffixDir \u003d\n-                getRemoteLogSuffixedDir(\n+                LogAggregationUtils.getRemoteLogSuffixedDir(\n                     LogAggregationService.this.remoteRootLogDir, user,\n                     LogAggregationService.this.remoteRootLogDirSuffix);\n             suffixDir \u003d\n                 suffixDir.makeQualified(remoteFS.getUri(),\n                     remoteFS.getWorkingDirectory());\n             createDir(remoteFS, suffixDir, APP_DIR_PERMISSIONS);\n           } catch (IOException e) {\n             LOG.error(\"Failed to create suffixed user dir [\" + suffixDir\n                 + \"] while processing app \" + appId);\n             throw e;\n           }\n           try {\n             appDir \u003d\n-                getRemoteAppLogDir(LogAggregationService.this.remoteRootLogDir,\n-                    appId, user,\n+                LogAggregationUtils.getRemoteAppLogDir(\n+                    LogAggregationService.this.remoteRootLogDir, appId, user,\n                     LogAggregationService.this.remoteRootLogDirSuffix);\n             appDir \u003d\n                 appDir.makeQualified(remoteFS.getUri(),\n                     remoteFS.getWorkingDirectory());\n             createDir(remoteFS, appDir, APP_DIR_PERMISSIONS);\n           } catch (IOException e) {\n             LOG.error(\"Failed to  create application log dir [\" + appDir\n                 + \"] while processing app \" + appId);\n             throw e;\n           }\n           return null;\n         }\n       });\n     } catch (Exception e) {\n       throw new YarnException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void createAppDir(final String user, final ApplicationId appId,\n      UserGroupInformation userUgi) {\n    try {\n      userUgi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n        @Override\n        public Object run() throws Exception {\n          // TODO: Reuse FS for user?\n          FileSystem remoteFS \u003d null;\n          Path userDir \u003d null;\n          Path suffixDir \u003d null;\n          Path appDir \u003d null;\n          try {\n            remoteFS \u003d FileSystem.get(getConfig());\n          } catch (IOException e) {\n            LOG.error(\"Failed to get remote FileSystem while processing app \"\n                + appId, e);\n            throw e;\n          }\n          try {\n            userDir \u003d\n                LogAggregationUtils.getRemoteLogUserDir(\n                    LogAggregationService.this.remoteRootLogDir, user);\n            userDir \u003d\n                userDir.makeQualified(remoteFS.getUri(),\n                    remoteFS.getWorkingDirectory());\n            createDir(remoteFS, userDir, APP_DIR_PERMISSIONS);\n          } catch (IOException e) {\n            LOG.error(\"Failed to create user dir [\" + userDir\n                + \"] while processing app \" + appId);\n            throw e;\n          }\n          try {\n            suffixDir \u003d\n                LogAggregationUtils.getRemoteLogSuffixedDir(\n                    LogAggregationService.this.remoteRootLogDir, user,\n                    LogAggregationService.this.remoteRootLogDirSuffix);\n            suffixDir \u003d\n                suffixDir.makeQualified(remoteFS.getUri(),\n                    remoteFS.getWorkingDirectory());\n            createDir(remoteFS, suffixDir, APP_DIR_PERMISSIONS);\n          } catch (IOException e) {\n            LOG.error(\"Failed to create suffixed user dir [\" + suffixDir\n                + \"] while processing app \" + appId);\n            throw e;\n          }\n          try {\n            appDir \u003d\n                LogAggregationUtils.getRemoteAppLogDir(\n                    LogAggregationService.this.remoteRootLogDir, appId, user,\n                    LogAggregationService.this.remoteRootLogDirSuffix);\n            appDir \u003d\n                appDir.makeQualified(remoteFS.getUri(),\n                    remoteFS.getWorkingDirectory());\n            createDir(remoteFS, appDir, APP_DIR_PERMISSIONS);\n          } catch (IOException e) {\n            LOG.error(\"Failed to  create application log dir [\" + appDir\n                + \"] while processing app \" + appId);\n            throw e;\n          }\n          return null;\n        }\n      });\n    } catch (Exception e) {\n      throw new YarnException(e);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
      "extendedDetails": {}
    },
    "670fa24b48acb407c22fbfdde87ae3123dcbf449": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-2989. Modified JobHistory to link to task and AM logs from the JobHistoryServer. Contributed by Siddharth Seth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1190174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/10/11 11:45 PM",
      "commitName": "670fa24b48acb407c22fbfdde87ae3123dcbf449",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,66 @@\n+  private void createAppDir(final String user, final ApplicationId appId,\n+      UserGroupInformation userUgi) {\n+    try {\n+      userUgi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n+        @Override\n+        public Object run() throws Exception {\n+          // TODO: Reuse FS for user?\n+          FileSystem remoteFS \u003d null;\n+          Path userDir \u003d null;\n+          Path suffixDir \u003d null;\n+          Path appDir \u003d null;\n+          try {\n+            remoteFS \u003d FileSystem.get(getConfig());\n+          } catch (IOException e) {\n+            LOG.error(\"Failed to get remote FileSystem while processing app \"\n+                + appId, e);\n+            throw e;\n+          }\n+          try {\n+            userDir \u003d\n+                getRemoteLogUserDir(\n+                    LogAggregationService.this.remoteRootLogDir, user);\n+            userDir \u003d\n+                userDir.makeQualified(remoteFS.getUri(),\n+                    remoteFS.getWorkingDirectory());\n+            createDir(remoteFS, userDir, APP_DIR_PERMISSIONS);\n+          } catch (IOException e) {\n+            LOG.error(\"Failed to create user dir [\" + userDir\n+                + \"] while processing app \" + appId);\n+            throw e;\n+          }\n+          try {\n+            suffixDir \u003d\n+                getRemoteLogSuffixedDir(\n+                    LogAggregationService.this.remoteRootLogDir, user,\n+                    LogAggregationService.this.remoteRootLogDirSuffix);\n+            suffixDir \u003d\n+                suffixDir.makeQualified(remoteFS.getUri(),\n+                    remoteFS.getWorkingDirectory());\n+            createDir(remoteFS, suffixDir, APP_DIR_PERMISSIONS);\n+          } catch (IOException e) {\n+            LOG.error(\"Failed to create suffixed user dir [\" + suffixDir\n+                + \"] while processing app \" + appId);\n+            throw e;\n+          }\n+          try {\n+            appDir \u003d\n+                getRemoteAppLogDir(LogAggregationService.this.remoteRootLogDir,\n+                    appId, user,\n+                    LogAggregationService.this.remoteRootLogDirSuffix);\n+            appDir \u003d\n+                appDir.makeQualified(remoteFS.getUri(),\n+                    remoteFS.getWorkingDirectory());\n+            createDir(remoteFS, appDir, APP_DIR_PERMISSIONS);\n+          } catch (IOException e) {\n+            LOG.error(\"Failed to  create application log dir [\" + appDir\n+                + \"] while processing app \" + appId);\n+            throw e;\n+          }\n+          return null;\n+        }\n+      });\n+    } catch (Exception e) {\n+      throw new YarnException(e);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void createAppDir(final String user, final ApplicationId appId,\n      UserGroupInformation userUgi) {\n    try {\n      userUgi.doAs(new PrivilegedExceptionAction\u003cObject\u003e() {\n        @Override\n        public Object run() throws Exception {\n          // TODO: Reuse FS for user?\n          FileSystem remoteFS \u003d null;\n          Path userDir \u003d null;\n          Path suffixDir \u003d null;\n          Path appDir \u003d null;\n          try {\n            remoteFS \u003d FileSystem.get(getConfig());\n          } catch (IOException e) {\n            LOG.error(\"Failed to get remote FileSystem while processing app \"\n                + appId, e);\n            throw e;\n          }\n          try {\n            userDir \u003d\n                getRemoteLogUserDir(\n                    LogAggregationService.this.remoteRootLogDir, user);\n            userDir \u003d\n                userDir.makeQualified(remoteFS.getUri(),\n                    remoteFS.getWorkingDirectory());\n            createDir(remoteFS, userDir, APP_DIR_PERMISSIONS);\n          } catch (IOException e) {\n            LOG.error(\"Failed to create user dir [\" + userDir\n                + \"] while processing app \" + appId);\n            throw e;\n          }\n          try {\n            suffixDir \u003d\n                getRemoteLogSuffixedDir(\n                    LogAggregationService.this.remoteRootLogDir, user,\n                    LogAggregationService.this.remoteRootLogDirSuffix);\n            suffixDir \u003d\n                suffixDir.makeQualified(remoteFS.getUri(),\n                    remoteFS.getWorkingDirectory());\n            createDir(remoteFS, suffixDir, APP_DIR_PERMISSIONS);\n          } catch (IOException e) {\n            LOG.error(\"Failed to create suffixed user dir [\" + suffixDir\n                + \"] while processing app \" + appId);\n            throw e;\n          }\n          try {\n            appDir \u003d\n                getRemoteAppLogDir(LogAggregationService.this.remoteRootLogDir,\n                    appId, user,\n                    LogAggregationService.this.remoteRootLogDirSuffix);\n            appDir \u003d\n                appDir.makeQualified(remoteFS.getUri(),\n                    remoteFS.getWorkingDirectory());\n            createDir(remoteFS, appDir, APP_DIR_PERMISSIONS);\n          } catch (IOException e) {\n            LOG.error(\"Failed to  create application log dir [\" + appDir\n                + \"] while processing app \" + appId);\n            throw e;\n          }\n          return null;\n        }\n      });\n    } catch (Exception e) {\n      throw new YarnException(e);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java"
    }
  }
}