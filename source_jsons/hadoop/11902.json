{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RamDiskReplicaLruTracker.java",
  "functionName": "getNextCandidateForEviction",
  "functionId": "getNextCandidateForEviction",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/RamDiskReplicaLruTracker.java",
  "functionStartLine": 175,
  "functionEndLine": 191,
  "numCommitsSeen": 10,
  "timeTaken": 2337,
  "changeHistory": [
    "463aec11718e47d4aabb86a7a539cb973460aae6",
    "b2d5ed36bcb80e2581191dcdc3976e825c959142",
    "cb9b485075ce773f2d6189aa2f54bbc69aad4dab"
  ],
  "changeHistoryShort": {
    "463aec11718e47d4aabb86a7a539cb973460aae6": "Ybodychange",
    "b2d5ed36bcb80e2581191dcdc3976e825c959142": "Ymultichange(Ymovefromfile,Yreturntypechange,Ybodychange)",
    "cb9b485075ce773f2d6189aa2f54bbc69aad4dab": "Yintroduced"
  },
  "changeHistoryDetails": {
    "463aec11718e47d4aabb86a7a539cb973460aae6": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6934. Move checksum computation off the hot path when writing to RAM disk. Contributed by Chris Nauroth.\n",
      "commitDate": "27/10/14 9:38 AM",
      "commitName": "463aec11718e47d4aabb86a7a539cb973460aae6",
      "commitAuthor": "cnauroth",
      "commitDateOld": "30/09/14 12:53 AM",
      "commitNameOld": "5e8b6973527e5f714652641ed95e8a4509e18cfa",
      "commitAuthorOld": "arp",
      "daysBetweenCommits": 27.36,
      "commitsBetweenForRepo": 232,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n   synchronized RamDiskReplicaLru getNextCandidateForEviction() {\n-    Iterator it \u003d replicasPersisted.values().iterator();\n+    final Iterator\u003cRamDiskReplicaLru\u003e it \u003d replicasPersisted.values().iterator();\n     while (it.hasNext()) {\n-      RamDiskReplicaLru ramDiskReplicaLru \u003d (RamDiskReplicaLru) it.next();\n+      final RamDiskReplicaLru ramDiskReplicaLru \u003d it.next();\n       it.remove();\n \n       Map\u003cLong, RamDiskReplicaLru\u003e replicaMap \u003d\n           replicaMaps.get(ramDiskReplicaLru.getBlockPoolId());\n \n       if (replicaMap !\u003d null \u0026\u0026 replicaMap.get(ramDiskReplicaLru.getBlockId()) !\u003d null) {\n         return ramDiskReplicaLru;\n       }\n \n       // The replica no longer exists, look for the next one.\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized RamDiskReplicaLru getNextCandidateForEviction() {\n    final Iterator\u003cRamDiskReplicaLru\u003e it \u003d replicasPersisted.values().iterator();\n    while (it.hasNext()) {\n      final RamDiskReplicaLru ramDiskReplicaLru \u003d it.next();\n      it.remove();\n\n      Map\u003cLong, RamDiskReplicaLru\u003e replicaMap \u003d\n          replicaMaps.get(ramDiskReplicaLru.getBlockPoolId());\n\n      if (replicaMap !\u003d null \u0026\u0026 replicaMap.get(ramDiskReplicaLru.getBlockId()) !\u003d null) {\n        return ramDiskReplicaLru;\n      }\n\n      // The replica no longer exists, look for the next one.\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/RamDiskReplicaLruTracker.java",
      "extendedDetails": {}
    },
    "b2d5ed36bcb80e2581191dcdc3976e825c959142": {
      "type": "Ymultichange(Ymovefromfile,Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-7100. Make eviction scheme pluggable. (Arpit Agarwal)\n",
      "commitDate": "20/09/14 1:25 PM",
      "commitName": "b2d5ed36bcb80e2581191dcdc3976e825c959142",
      "commitAuthor": "arp",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-7100. Make eviction scheme pluggable. (Arpit Agarwal)\n",
          "commitDate": "20/09/14 1:25 PM",
          "commitName": "b2d5ed36bcb80e2581191dcdc3976e825c959142",
          "commitAuthor": "arp",
          "commitDateOld": "20/09/14 10:34 AM",
          "commitNameOld": "09dab88d3eeb9947211b075d8103f9b836a61e8a",
          "commitAuthorOld": "arp",
          "daysBetweenCommits": 0.12,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,17 @@\n-  synchronized ReplicaState getNextCandidateForEviction() {\n-    while (replicasPersisted.size() !\u003d 0) {\n-      ReplicaState replicaState \u003d replicasPersisted.remove();\n-      Map\u003cLong, ReplicaState\u003e replicaMap \u003d replicaMaps.get(replicaState.bpid);\n+  synchronized RamDiskReplicaLru getNextCandidateForEviction() {\n+    Iterator it \u003d replicasPersisted.values().iterator();\n+    while (it.hasNext()) {\n+      RamDiskReplicaLru ramDiskReplicaLru \u003d (RamDiskReplicaLru) it.next();\n+      it.remove();\n \n-      if (replicaMap !\u003d null \u0026\u0026 replicaMap.get(replicaState.blockId) !\u003d null) {\n-        return replicaState;\n+      Map\u003cLong, RamDiskReplicaLru\u003e replicaMap \u003d\n+          replicaMaps.get(ramDiskReplicaLru.getBlockPoolId());\n+\n+      if (replicaMap !\u003d null \u0026\u0026 replicaMap.get(ramDiskReplicaLru.getBlockId()) !\u003d null) {\n+        return ramDiskReplicaLru;\n       }\n \n       // The replica no longer exists, look for the next one.\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized RamDiskReplicaLru getNextCandidateForEviction() {\n    Iterator it \u003d replicasPersisted.values().iterator();\n    while (it.hasNext()) {\n      RamDiskReplicaLru ramDiskReplicaLru \u003d (RamDiskReplicaLru) it.next();\n      it.remove();\n\n      Map\u003cLong, RamDiskReplicaLru\u003e replicaMap \u003d\n          replicaMaps.get(ramDiskReplicaLru.getBlockPoolId());\n\n      if (replicaMap !\u003d null \u0026\u0026 replicaMap.get(ramDiskReplicaLru.getBlockId()) !\u003d null) {\n        return ramDiskReplicaLru;\n      }\n\n      // The replica no longer exists, look for the next one.\n    }\n    return null;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/RamDiskReplicaLruTracker.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/LazyWriteReplicaTracker.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/RamDiskReplicaLruTracker.java",
            "oldMethodName": "getNextCandidateForEviction",
            "newMethodName": "getNextCandidateForEviction"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-7100. Make eviction scheme pluggable. (Arpit Agarwal)\n",
          "commitDate": "20/09/14 1:25 PM",
          "commitName": "b2d5ed36bcb80e2581191dcdc3976e825c959142",
          "commitAuthor": "arp",
          "commitDateOld": "20/09/14 10:34 AM",
          "commitNameOld": "09dab88d3eeb9947211b075d8103f9b836a61e8a",
          "commitAuthorOld": "arp",
          "daysBetweenCommits": 0.12,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,17 @@\n-  synchronized ReplicaState getNextCandidateForEviction() {\n-    while (replicasPersisted.size() !\u003d 0) {\n-      ReplicaState replicaState \u003d replicasPersisted.remove();\n-      Map\u003cLong, ReplicaState\u003e replicaMap \u003d replicaMaps.get(replicaState.bpid);\n+  synchronized RamDiskReplicaLru getNextCandidateForEviction() {\n+    Iterator it \u003d replicasPersisted.values().iterator();\n+    while (it.hasNext()) {\n+      RamDiskReplicaLru ramDiskReplicaLru \u003d (RamDiskReplicaLru) it.next();\n+      it.remove();\n \n-      if (replicaMap !\u003d null \u0026\u0026 replicaMap.get(replicaState.blockId) !\u003d null) {\n-        return replicaState;\n+      Map\u003cLong, RamDiskReplicaLru\u003e replicaMap \u003d\n+          replicaMaps.get(ramDiskReplicaLru.getBlockPoolId());\n+\n+      if (replicaMap !\u003d null \u0026\u0026 replicaMap.get(ramDiskReplicaLru.getBlockId()) !\u003d null) {\n+        return ramDiskReplicaLru;\n       }\n \n       // The replica no longer exists, look for the next one.\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized RamDiskReplicaLru getNextCandidateForEviction() {\n    Iterator it \u003d replicasPersisted.values().iterator();\n    while (it.hasNext()) {\n      RamDiskReplicaLru ramDiskReplicaLru \u003d (RamDiskReplicaLru) it.next();\n      it.remove();\n\n      Map\u003cLong, RamDiskReplicaLru\u003e replicaMap \u003d\n          replicaMaps.get(ramDiskReplicaLru.getBlockPoolId());\n\n      if (replicaMap !\u003d null \u0026\u0026 replicaMap.get(ramDiskReplicaLru.getBlockId()) !\u003d null) {\n        return ramDiskReplicaLru;\n      }\n\n      // The replica no longer exists, look for the next one.\n    }\n    return null;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/RamDiskReplicaLruTracker.java",
          "extendedDetails": {
            "oldValue": "ReplicaState",
            "newValue": "RamDiskReplicaLru"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7100. Make eviction scheme pluggable. (Arpit Agarwal)\n",
          "commitDate": "20/09/14 1:25 PM",
          "commitName": "b2d5ed36bcb80e2581191dcdc3976e825c959142",
          "commitAuthor": "arp",
          "commitDateOld": "20/09/14 10:34 AM",
          "commitNameOld": "09dab88d3eeb9947211b075d8103f9b836a61e8a",
          "commitAuthorOld": "arp",
          "daysBetweenCommits": 0.12,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,17 @@\n-  synchronized ReplicaState getNextCandidateForEviction() {\n-    while (replicasPersisted.size() !\u003d 0) {\n-      ReplicaState replicaState \u003d replicasPersisted.remove();\n-      Map\u003cLong, ReplicaState\u003e replicaMap \u003d replicaMaps.get(replicaState.bpid);\n+  synchronized RamDiskReplicaLru getNextCandidateForEviction() {\n+    Iterator it \u003d replicasPersisted.values().iterator();\n+    while (it.hasNext()) {\n+      RamDiskReplicaLru ramDiskReplicaLru \u003d (RamDiskReplicaLru) it.next();\n+      it.remove();\n \n-      if (replicaMap !\u003d null \u0026\u0026 replicaMap.get(replicaState.blockId) !\u003d null) {\n-        return replicaState;\n+      Map\u003cLong, RamDiskReplicaLru\u003e replicaMap \u003d\n+          replicaMaps.get(ramDiskReplicaLru.getBlockPoolId());\n+\n+      if (replicaMap !\u003d null \u0026\u0026 replicaMap.get(ramDiskReplicaLru.getBlockId()) !\u003d null) {\n+        return ramDiskReplicaLru;\n       }\n \n       // The replica no longer exists, look for the next one.\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized RamDiskReplicaLru getNextCandidateForEviction() {\n    Iterator it \u003d replicasPersisted.values().iterator();\n    while (it.hasNext()) {\n      RamDiskReplicaLru ramDiskReplicaLru \u003d (RamDiskReplicaLru) it.next();\n      it.remove();\n\n      Map\u003cLong, RamDiskReplicaLru\u003e replicaMap \u003d\n          replicaMaps.get(ramDiskReplicaLru.getBlockPoolId());\n\n      if (replicaMap !\u003d null \u0026\u0026 replicaMap.get(ramDiskReplicaLru.getBlockId()) !\u003d null) {\n        return ramDiskReplicaLru;\n      }\n\n      // The replica no longer exists, look for the next one.\n    }\n    return null;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/RamDiskReplicaLruTracker.java",
          "extendedDetails": {}
        }
      ]
    },
    "cb9b485075ce773f2d6189aa2f54bbc69aad4dab": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-6930. Improve replica eviction from RAM disk. (Arpit Agarwal)\n",
      "commitDate": "03/09/14 1:53 PM",
      "commitName": "cb9b485075ce773f2d6189aa2f54bbc69aad4dab",
      "commitAuthor": "arp",
      "diff": "@@ -0,0 +1,13 @@\n+  synchronized ReplicaState getNextCandidateForEviction() {\n+    while (replicasPersisted.size() !\u003d 0) {\n+      ReplicaState replicaState \u003d replicasPersisted.remove();\n+      Map\u003cLong, ReplicaState\u003e replicaMap \u003d replicaMaps.get(replicaState.bpid);\n+\n+      if (replicaMap !\u003d null \u0026\u0026 replicaMap.get(replicaState.blockId) !\u003d null) {\n+        return replicaState;\n+      }\n+\n+      // The replica no longer exists, look for the next one.\n+    }\n+    return null;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized ReplicaState getNextCandidateForEviction() {\n    while (replicasPersisted.size() !\u003d 0) {\n      ReplicaState replicaState \u003d replicasPersisted.remove();\n      Map\u003cLong, ReplicaState\u003e replicaMap \u003d replicaMaps.get(replicaState.bpid);\n\n      if (replicaMap !\u003d null \u0026\u0026 replicaMap.get(replicaState.blockId) !\u003d null) {\n        return replicaState;\n      }\n\n      // The replica no longer exists, look for the next one.\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/LazyWriteReplicaTracker.java"
    }
  }
}