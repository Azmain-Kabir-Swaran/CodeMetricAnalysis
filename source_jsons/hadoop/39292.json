{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CapacityScheduler.java",
  "functionName": "getCandidateNodeSet",
  "functionId": "getCandidateNodeSet___node-FiCaSchedulerNode",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
  "functionStartLine": 1479,
  "functionEndLine": 1494,
  "numCommitsSeen": 239,
  "timeTaken": 2842,
  "changeHistory": [
    "9c3fc3ef2865164aa5f121793ac914cfeb21a181"
  ],
  "changeHistoryShort": {
    "9c3fc3ef2865164aa5f121793ac914cfeb21a181": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9c3fc3ef2865164aa5f121793ac914cfeb21a181": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7494. Add muti-node lookup mechanism and pluggable nodes sorting policies to optimize placement decision. Contributed by Sunil Govindan.\n",
      "commitDate": "21/08/18 7:42 AM",
      "commitName": "9c3fc3ef2865164aa5f121793ac914cfeb21a181",
      "commitAuthor": "Weiwei Yang",
      "diff": "@@ -0,0 +1,16 @@\n+  private CandidateNodeSet\u003cFiCaSchedulerNode\u003e getCandidateNodeSet(\n+      FiCaSchedulerNode node) {\n+    CandidateNodeSet\u003cFiCaSchedulerNode\u003e candidates \u003d null;\n+    candidates \u003d new SimpleCandidateNodeSet\u003c\u003e(node);\n+    if (multiNodePlacementEnabled) {\n+      Map\u003cNodeId, FiCaSchedulerNode\u003e nodesByPartition \u003d new HashMap\u003c\u003e();\n+      List\u003cFiCaSchedulerNode\u003e nodes \u003d nodeTracker\n+          .getNodesPerPartition(node.getPartition());\n+      if (nodes !\u003d null \u0026\u0026 !nodes.isEmpty()) {\n+        nodes.forEach(n -\u003e nodesByPartition.put(n.getNodeID(), n));\n+        candidates \u003d new SimpleCandidateNodeSet\u003cFiCaSchedulerNode\u003e(\n+            nodesByPartition, node.getPartition());\n+      }\n+    }\n+    return candidates;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private CandidateNodeSet\u003cFiCaSchedulerNode\u003e getCandidateNodeSet(\n      FiCaSchedulerNode node) {\n    CandidateNodeSet\u003cFiCaSchedulerNode\u003e candidates \u003d null;\n    candidates \u003d new SimpleCandidateNodeSet\u003c\u003e(node);\n    if (multiNodePlacementEnabled) {\n      Map\u003cNodeId, FiCaSchedulerNode\u003e nodesByPartition \u003d new HashMap\u003c\u003e();\n      List\u003cFiCaSchedulerNode\u003e nodes \u003d nodeTracker\n          .getNodesPerPartition(node.getPartition());\n      if (nodes !\u003d null \u0026\u0026 !nodes.isEmpty()) {\n        nodes.forEach(n -\u003e nodesByPartition.put(n.getNodeID(), n));\n        candidates \u003d new SimpleCandidateNodeSet\u003cFiCaSchedulerNode\u003e(\n            nodesByPartition, node.getPartition());\n      }\n    }\n    return candidates;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java"
    }
  }
}