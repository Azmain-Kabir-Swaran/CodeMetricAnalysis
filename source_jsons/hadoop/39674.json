{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LeafQueue.java",
  "functionName": "completedContainer",
  "functionId": "completedContainer___clusterResource-Resource__application-FiCaSchedulerApp__node-FiCaSchedulerNode__rmContainer-RMContainer__containerStatus-ContainerStatus__event-RMContainerEventType__childQueue-CSQueue__sortQueues-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
  "functionStartLine": 1630,
  "functionEndLine": 1692,
  "numCommitsSeen": 328,
  "timeTaken": 18828,
  "changeHistory": [
    "cdb2107066a2d8557270888c0a9a75f29a6853bf",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "50094d7fefafaf0e88798b43cdce291ae067e3fd",
    "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4",
    "945db55f2e6521d33d4f90bbb09179b0feba5e7a",
    "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa",
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
    "fdc46bfb37776d8c41b68f6c33a2379d0f329994",
    "fc055a3cbe9545cf1c59421641c7b296aa33f953",
    "ae14e5d07f1b6702a5160637438028bb03d9387e",
    "fa7a43529d529f0006c8033c2003f15b9b93f103",
    "7e8c9beb4156dcaeb3a11e60aaa06d2370626913",
    "89cab1ba5f0671f8ef30dbe7432079c18362b434",
    "4bc42d76e7fa53cb268cab0f9fe1fd8d8dbb17fd",
    "83fe34ac0896cee0918bbfad7bd51231e4aec39b",
    "d497f6ea2be559aa31ed76f37ae949dbfabe2a51",
    "44872b76fcc0ddfbc7b0a4e54eef50fe8708e0f5",
    "0fefda645bca935b87b6bb8ca63e6f18340d59f5",
    "586348e4cbf197188057d6b843a6701cfffdaff3",
    "fdf042dfffa4d2474e3cac86cfb8fe9ee4648beb",
    "f2ea555ac6c06a3f2f6559731f48711fff05d3f1",
    "9c22065109a77681bc2534063eabe8692fbcb3cd",
    "44b6261bfacddea88a3cf02d406f970bbbb98d04",
    "772ead791c17b0b7415cce0934366113cdbe9379",
    "5b99672658ce24bfd1002b880583cbecfa47f9b3",
    "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61",
    "cc523683cfa76c1255667a3aedc48b08e5daabc7",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
    "ffdf980b2056b2a1b31ccb19746f23c31f7d08ef",
    "21c9116309d8482e7e28522cd7386e65415b15e9",
    "b8102dbdf8b4dc2e99bc7c58f4085a7313830a2d",
    "817ead65b99f465fc2dfa18072cf23cadf5f05d0",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": "Ybodychange",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "50094d7fefafaf0e88798b43cdce291ae067e3fd": "Ybodychange",
    "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4": "Ybodychange",
    "945db55f2e6521d33d4f90bbb09179b0feba5e7a": "Ybodychange",
    "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa": "Ybodychange",
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828": "Ybodychange",
    "fdc46bfb37776d8c41b68f6c33a2379d0f329994": "Ybodychange",
    "fc055a3cbe9545cf1c59421641c7b296aa33f953": "Ybodychange",
    "ae14e5d07f1b6702a5160637438028bb03d9387e": "Ybodychange",
    "fa7a43529d529f0006c8033c2003f15b9b93f103": "Ybodychange",
    "7e8c9beb4156dcaeb3a11e60aaa06d2370626913": "Ybodychange",
    "89cab1ba5f0671f8ef30dbe7432079c18362b434": "Ybodychange",
    "4bc42d76e7fa53cb268cab0f9fe1fd8d8dbb17fd": "Ybodychange",
    "83fe34ac0896cee0918bbfad7bd51231e4aec39b": "Ybodychange",
    "d497f6ea2be559aa31ed76f37ae949dbfabe2a51": "Ybodychange",
    "44872b76fcc0ddfbc7b0a4e54eef50fe8708e0f5": "Ybodychange",
    "0fefda645bca935b87b6bb8ca63e6f18340d59f5": "Ybodychange",
    "586348e4cbf197188057d6b843a6701cfffdaff3": "Ybodychange",
    "fdf042dfffa4d2474e3cac86cfb8fe9ee4648beb": "Ybodychange",
    "f2ea555ac6c06a3f2f6559731f48711fff05d3f1": "Ybodychange",
    "9c22065109a77681bc2534063eabe8692fbcb3cd": "Ymultichange(Yparameterchange,Ybodychange)",
    "44b6261bfacddea88a3cf02d406f970bbbb98d04": "Ybodychange",
    "772ead791c17b0b7415cce0934366113cdbe9379": "Ybodychange",
    "5b99672658ce24bfd1002b880583cbecfa47f9b3": "Ymultichange(Yparameterchange,Ybodychange)",
    "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61": "Ybodychange",
    "cc523683cfa76c1255667a3aedc48b08e5daabc7": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": "Yparameterchange",
    "ffdf980b2056b2a1b31ccb19746f23c31f7d08ef": "Ybodychange",
    "21c9116309d8482e7e28522cd7386e65415b15e9": "Ybodychange",
    "b8102dbdf8b4dc2e99bc7c58f4085a7313830a2d": "Ybodychange",
    "817ead65b99f465fc2dfa18072cf23cadf5f05d0": "Ymultichange(Yparameterchange,Ybodychange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9879. Allow multiple leaf queues with the same name in CapacityScheduler. Contributed by Gergely Pollak.\n",
      "commitDate": "25/03/20 4:20 AM",
      "commitName": "cdb2107066a2d8557270888c0a9a75f29a6853bf",
      "commitAuthor": "Sunil G",
      "commitDateOld": "28/01/20 7:54 PM",
      "commitNameOld": "e578e52aae01248507e089b406fe038ab8e84207",
      "commitAuthorOld": "Eric Badger",
      "daysBetweenCommits": 56.31,
      "commitsBetweenForRepo": 177,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,63 @@\n   public void completedContainer(Resource clusterResource, \n       FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n       ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue,\n       boolean sortQueues) {\n     // Update SchedulerHealth for released / preempted container\n     updateSchedulerHealthForCompletedContainer(rmContainer, containerStatus);\n \n     if (application !\u003d null) {\n       boolean removed \u003d false;\n \n       // Careful! Locking order is important!\n       writeLock.lock();\n       try {\n         Container container \u003d rmContainer.getContainer();\n \n         // Inform the application \u0026 the node\n         // Note: It\u0027s safe to assume that all state changes to RMContainer\n         // happen under scheduler\u0027s lock...\n         // So, this is, in effect, a transaction across application \u0026 node\n         if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n           removed \u003d application.unreserve(rmContainer.getReservedSchedulerKey(),\n               node, rmContainer);\n         } else{\n           removed \u003d application.containerCompleted(rmContainer, containerStatus,\n               event, node.getPartition());\n \n           node.releaseContainer(rmContainer.getContainerId(), false);\n         }\n \n         // Book-keeping\n         if (removed) {\n \n           // Inform the ordering policy\n           orderingPolicy.containerReleased(application, rmContainer);\n \n           releaseResource(clusterResource, application, container.getResource(),\n               node.getPartition(), rmContainer);\n         }\n       } finally {\n         writeLock.unlock();\n       }\n \n \n       if (removed) {\n         // Inform the parent queue _outside_ of the leaf-queue lock\n         getParent().completedContainer(clusterResource, application, node,\n           rmContainer, null, event, this, sortQueues);\n       }\n     }\n \n     // Notify PreemptionManager\n     csContext.getPreemptionManager().removeKillableContainer(\n-        new KillableContainer(rmContainer, node.getPartition(), queueName));\n+        new KillableContainer(\n+            rmContainer,\n+            node.getPartition(),\n+            getQueuePath()));\n \n     // Update preemption metrics if exit status is PREEMPTED\n     if (containerStatus !\u003d null\n         \u0026\u0026 ContainerExitStatus.PREEMPTED \u003d\u003d containerStatus.getExitStatus()) {\n       updateQueuePreemptionMetrics(rmContainer);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void completedContainer(Resource clusterResource, \n      FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n      ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue,\n      boolean sortQueues) {\n    // Update SchedulerHealth for released / preempted container\n    updateSchedulerHealthForCompletedContainer(rmContainer, containerStatus);\n\n    if (application !\u003d null) {\n      boolean removed \u003d false;\n\n      // Careful! Locking order is important!\n      writeLock.lock();\n      try {\n        Container container \u003d rmContainer.getContainer();\n\n        // Inform the application \u0026 the node\n        // Note: It\u0027s safe to assume that all state changes to RMContainer\n        // happen under scheduler\u0027s lock...\n        // So, this is, in effect, a transaction across application \u0026 node\n        if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n          removed \u003d application.unreserve(rmContainer.getReservedSchedulerKey(),\n              node, rmContainer);\n        } else{\n          removed \u003d application.containerCompleted(rmContainer, containerStatus,\n              event, node.getPartition());\n\n          node.releaseContainer(rmContainer.getContainerId(), false);\n        }\n\n        // Book-keeping\n        if (removed) {\n\n          // Inform the ordering policy\n          orderingPolicy.containerReleased(application, rmContainer);\n\n          releaseResource(clusterResource, application, container.getResource(),\n              node.getPartition(), rmContainer);\n        }\n      } finally {\n        writeLock.unlock();\n      }\n\n\n      if (removed) {\n        // Inform the parent queue _outside_ of the leaf-queue lock\n        getParent().completedContainer(clusterResource, application, node,\n          rmContainer, null, event, this, sortQueues);\n      }\n    }\n\n    // Notify PreemptionManager\n    csContext.getPreemptionManager().removeKillableContainer(\n        new KillableContainer(\n            rmContainer,\n            node.getPartition(),\n            getQueuePath()));\n\n    // Update preemption metrics if exit status is PREEMPTED\n    if (containerStatus !\u003d null\n        \u0026\u0026 ContainerExitStatus.PREEMPTED \u003d\u003d containerStatus.getExitStatus()) {\n      updateQueuePreemptionMetrics(rmContainer);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 2.69,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,60 @@\n   public void completedContainer(Resource clusterResource, \n       FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n       ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue,\n       boolean sortQueues) {\n     // Update SchedulerHealth for released / preempted container\n     updateSchedulerHealthForCompletedContainer(rmContainer, containerStatus);\n \n     if (application !\u003d null) {\n       boolean removed \u003d false;\n \n       // Careful! Locking order is important!\n+      writeLock.lock();\n       try {\n-        writeLock.lock();\n         Container container \u003d rmContainer.getContainer();\n \n         // Inform the application \u0026 the node\n         // Note: It\u0027s safe to assume that all state changes to RMContainer\n         // happen under scheduler\u0027s lock...\n         // So, this is, in effect, a transaction across application \u0026 node\n         if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n           removed \u003d application.unreserve(rmContainer.getReservedSchedulerKey(),\n               node, rmContainer);\n         } else{\n           removed \u003d application.containerCompleted(rmContainer, containerStatus,\n               event, node.getPartition());\n \n           node.releaseContainer(rmContainer.getContainerId(), false);\n         }\n \n         // Book-keeping\n         if (removed) {\n \n           // Inform the ordering policy\n           orderingPolicy.containerReleased(application, rmContainer);\n \n           releaseResource(clusterResource, application, container.getResource(),\n               node.getPartition(), rmContainer);\n         }\n       } finally {\n         writeLock.unlock();\n       }\n \n \n       if (removed) {\n         // Inform the parent queue _outside_ of the leaf-queue lock\n         getParent().completedContainer(clusterResource, application, node,\n           rmContainer, null, event, this, sortQueues);\n       }\n     }\n \n     // Notify PreemptionManager\n     csContext.getPreemptionManager().removeKillableContainer(\n         new KillableContainer(rmContainer, node.getPartition(), queueName));\n \n     // Update preemption metrics if exit status is PREEMPTED\n     if (containerStatus !\u003d null\n         \u0026\u0026 ContainerExitStatus.PREEMPTED \u003d\u003d containerStatus.getExitStatus()) {\n       updateQueuePreemptionMetrics(rmContainer);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void completedContainer(Resource clusterResource, \n      FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n      ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue,\n      boolean sortQueues) {\n    // Update SchedulerHealth for released / preempted container\n    updateSchedulerHealthForCompletedContainer(rmContainer, containerStatus);\n\n    if (application !\u003d null) {\n      boolean removed \u003d false;\n\n      // Careful! Locking order is important!\n      writeLock.lock();\n      try {\n        Container container \u003d rmContainer.getContainer();\n\n        // Inform the application \u0026 the node\n        // Note: It\u0027s safe to assume that all state changes to RMContainer\n        // happen under scheduler\u0027s lock...\n        // So, this is, in effect, a transaction across application \u0026 node\n        if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n          removed \u003d application.unreserve(rmContainer.getReservedSchedulerKey(),\n              node, rmContainer);\n        } else{\n          removed \u003d application.containerCompleted(rmContainer, containerStatus,\n              event, node.getPartition());\n\n          node.releaseContainer(rmContainer.getContainerId(), false);\n        }\n\n        // Book-keeping\n        if (removed) {\n\n          // Inform the ordering policy\n          orderingPolicy.containerReleased(application, rmContainer);\n\n          releaseResource(clusterResource, application, container.getResource(),\n              node.getPartition(), rmContainer);\n        }\n      } finally {\n        writeLock.unlock();\n      }\n\n\n      if (removed) {\n        // Inform the parent queue _outside_ of the leaf-queue lock\n        getParent().completedContainer(clusterResource, application, node,\n          rmContainer, null, event, this, sortQueues);\n      }\n    }\n\n    // Notify PreemptionManager\n    csContext.getPreemptionManager().removeKillableContainer(\n        new KillableContainer(rmContainer, node.getPartition(), queueName));\n\n    // Update preemption metrics if exit status is PREEMPTED\n    if (containerStatus !\u003d null\n        \u0026\u0026 ContainerExitStatus.PREEMPTED \u003d\u003d containerStatus.getExitStatus()) {\n      updateQueuePreemptionMetrics(rmContainer);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "50094d7fefafaf0e88798b43cdce291ae067e3fd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9300. Lazy preemption should trigger an update on queue preemption metrics for CapacityScheduler. Contributed by Tao Yang.\n",
      "commitDate": "24/02/19 6:17 AM",
      "commitName": "50094d7fefafaf0e88798b43cdce291ae067e3fd",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "07/12/18 10:45 AM",
      "commitNameOld": "cc51607ccdf60f4ebecf7afa3e2056297ca0ac5f",
      "commitAuthorOld": "Jonathan Hung",
      "daysBetweenCommits": 78.81,
      "commitsBetweenForRepo": 540,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,60 @@\n   public void completedContainer(Resource clusterResource, \n       FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n       ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue,\n       boolean sortQueues) {\n     // Update SchedulerHealth for released / preempted container\n     updateSchedulerHealthForCompletedContainer(rmContainer, containerStatus);\n \n     if (application !\u003d null) {\n       boolean removed \u003d false;\n \n       // Careful! Locking order is important!\n       try {\n         writeLock.lock();\n         Container container \u003d rmContainer.getContainer();\n \n         // Inform the application \u0026 the node\n         // Note: It\u0027s safe to assume that all state changes to RMContainer\n         // happen under scheduler\u0027s lock...\n         // So, this is, in effect, a transaction across application \u0026 node\n         if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n           removed \u003d application.unreserve(rmContainer.getReservedSchedulerKey(),\n               node, rmContainer);\n         } else{\n           removed \u003d application.containerCompleted(rmContainer, containerStatus,\n               event, node.getPartition());\n \n           node.releaseContainer(rmContainer.getContainerId(), false);\n         }\n \n         // Book-keeping\n         if (removed) {\n \n           // Inform the ordering policy\n           orderingPolicy.containerReleased(application, rmContainer);\n \n           releaseResource(clusterResource, application, container.getResource(),\n               node.getPartition(), rmContainer);\n         }\n       } finally {\n         writeLock.unlock();\n       }\n \n \n       if (removed) {\n         // Inform the parent queue _outside_ of the leaf-queue lock\n         getParent().completedContainer(clusterResource, application, node,\n           rmContainer, null, event, this, sortQueues);\n       }\n     }\n \n     // Notify PreemptionManager\n     csContext.getPreemptionManager().removeKillableContainer(\n         new KillableContainer(rmContainer, node.getPartition(), queueName));\n+\n+    // Update preemption metrics if exit status is PREEMPTED\n+    if (containerStatus !\u003d null\n+        \u0026\u0026 ContainerExitStatus.PREEMPTED \u003d\u003d containerStatus.getExitStatus()) {\n+      updateQueuePreemptionMetrics(rmContainer);\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void completedContainer(Resource clusterResource, \n      FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n      ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue,\n      boolean sortQueues) {\n    // Update SchedulerHealth for released / preempted container\n    updateSchedulerHealthForCompletedContainer(rmContainer, containerStatus);\n\n    if (application !\u003d null) {\n      boolean removed \u003d false;\n\n      // Careful! Locking order is important!\n      try {\n        writeLock.lock();\n        Container container \u003d rmContainer.getContainer();\n\n        // Inform the application \u0026 the node\n        // Note: It\u0027s safe to assume that all state changes to RMContainer\n        // happen under scheduler\u0027s lock...\n        // So, this is, in effect, a transaction across application \u0026 node\n        if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n          removed \u003d application.unreserve(rmContainer.getReservedSchedulerKey(),\n              node, rmContainer);\n        } else{\n          removed \u003d application.containerCompleted(rmContainer, containerStatus,\n              event, node.getPartition());\n\n          node.releaseContainer(rmContainer.getContainerId(), false);\n        }\n\n        // Book-keeping\n        if (removed) {\n\n          // Inform the ordering policy\n          orderingPolicy.containerReleased(application, rmContainer);\n\n          releaseResource(clusterResource, application, container.getResource(),\n              node.getPartition(), rmContainer);\n        }\n      } finally {\n        writeLock.unlock();\n      }\n\n\n      if (removed) {\n        // Inform the parent queue _outside_ of the leaf-queue lock\n        getParent().completedContainer(clusterResource, application, node,\n          rmContainer, null, event, this, sortQueues);\n      }\n    }\n\n    // Notify PreemptionManager\n    csContext.getPreemptionManager().removeKillableContainer(\n        new KillableContainer(rmContainer, node.getPartition(), queueName));\n\n    // Update preemption metrics if exit status is PREEMPTED\n    if (containerStatus !\u003d null\n        \u0026\u0026 ContainerExitStatus.PREEMPTED \u003d\u003d containerStatus.getExitStatus()) {\n      updateQueuePreemptionMetrics(rmContainer);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6216. Unify Container Resizing code paths with Container Updates making it scheduler agnostic. (Arun Suresh via wangda)\n",
      "commitDate": "28/02/17 10:35 AM",
      "commitName": "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "09/02/17 10:23 AM",
      "commitNameOld": "5fb723bb77722d41df6959eee23e1b0cfeb5584e",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 19.01,
      "commitsBetweenForRepo": 112,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,54 @@\n   public void completedContainer(Resource clusterResource, \n       FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n       ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue,\n       boolean sortQueues) {\n     // Update SchedulerHealth for released / preempted container\n     updateSchedulerHealthForCompletedContainer(rmContainer, containerStatus);\n \n     if (application !\u003d null) {\n-      // unreserve container increase request if it previously reserved.\n-      if (rmContainer.hasIncreaseReservation()) {\n-        unreserveIncreasedContainer(clusterResource, application, node,\n-            rmContainer);\n-      }\n-      \n-      // Remove container increase request if it exists\n-      application.removeIncreaseRequest(node.getNodeID(),\n-          rmContainer.getAllocatedSchedulerKey(), rmContainer.getContainerId());\n-\n       boolean removed \u003d false;\n \n       // Careful! Locking order is important!\n       try {\n         writeLock.lock();\n         Container container \u003d rmContainer.getContainer();\n \n         // Inform the application \u0026 the node\n         // Note: It\u0027s safe to assume that all state changes to RMContainer\n         // happen under scheduler\u0027s lock...\n         // So, this is, in effect, a transaction across application \u0026 node\n         if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n           removed \u003d application.unreserve(rmContainer.getReservedSchedulerKey(),\n               node, rmContainer);\n         } else{\n           removed \u003d application.containerCompleted(rmContainer, containerStatus,\n               event, node.getPartition());\n \n           node.releaseContainer(rmContainer.getContainerId(), false);\n         }\n \n         // Book-keeping\n         if (removed) {\n \n           // Inform the ordering policy\n           orderingPolicy.containerReleased(application, rmContainer);\n \n           releaseResource(clusterResource, application, container.getResource(),\n-              node.getPartition(), rmContainer, false);\n+              node.getPartition(), rmContainer);\n         }\n       } finally {\n         writeLock.unlock();\n       }\n \n \n       if (removed) {\n         // Inform the parent queue _outside_ of the leaf-queue lock\n         getParent().completedContainer(clusterResource, application, node,\n           rmContainer, null, event, this, sortQueues);\n       }\n     }\n \n     // Notify PreemptionManager\n     csContext.getPreemptionManager().removeKillableContainer(\n         new KillableContainer(rmContainer, node.getPartition(), queueName));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void completedContainer(Resource clusterResource, \n      FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n      ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue,\n      boolean sortQueues) {\n    // Update SchedulerHealth for released / preempted container\n    updateSchedulerHealthForCompletedContainer(rmContainer, containerStatus);\n\n    if (application !\u003d null) {\n      boolean removed \u003d false;\n\n      // Careful! Locking order is important!\n      try {\n        writeLock.lock();\n        Container container \u003d rmContainer.getContainer();\n\n        // Inform the application \u0026 the node\n        // Note: It\u0027s safe to assume that all state changes to RMContainer\n        // happen under scheduler\u0027s lock...\n        // So, this is, in effect, a transaction across application \u0026 node\n        if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n          removed \u003d application.unreserve(rmContainer.getReservedSchedulerKey(),\n              node, rmContainer);\n        } else{\n          removed \u003d application.containerCompleted(rmContainer, containerStatus,\n              event, node.getPartition());\n\n          node.releaseContainer(rmContainer.getContainerId(), false);\n        }\n\n        // Book-keeping\n        if (removed) {\n\n          // Inform the ordering policy\n          orderingPolicy.containerReleased(application, rmContainer);\n\n          releaseResource(clusterResource, application, container.getResource(),\n              node.getPartition(), rmContainer);\n        }\n      } finally {\n        writeLock.unlock();\n      }\n\n\n      if (removed) {\n        // Inform the parent queue _outside_ of the leaf-queue lock\n        getParent().completedContainer(clusterResource, application, node,\n          rmContainer, null, event, this, sortQueues);\n      }\n    }\n\n    // Notify PreemptionManager\n    csContext.getPreemptionManager().removeKillableContainer(\n        new KillableContainer(rmContainer, node.getPartition(), queueName));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "945db55f2e6521d33d4f90bbb09179b0feba5e7a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4148. When killing app, RM releases app\u0027s resource before they are released by NM. Contributed by Jason Lowe.\n",
      "commitDate": "09/01/17 6:14 PM",
      "commitName": "945db55f2e6521d33d4f90bbb09179b0feba5e7a",
      "commitAuthor": "Junping Du",
      "commitDateOld": "09/01/17 8:40 AM",
      "commitNameOld": "287d3d6804a869723ae36605a3c2d2b3eae3941e",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.4,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,64 @@\n   public void completedContainer(Resource clusterResource, \n       FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n       ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue,\n       boolean sortQueues) {\n     // Update SchedulerHealth for released / preempted container\n     updateSchedulerHealthForCompletedContainer(rmContainer, containerStatus);\n \n     if (application !\u003d null) {\n       // unreserve container increase request if it previously reserved.\n       if (rmContainer.hasIncreaseReservation()) {\n         unreserveIncreasedContainer(clusterResource, application, node,\n             rmContainer);\n       }\n       \n       // Remove container increase request if it exists\n       application.removeIncreaseRequest(node.getNodeID(),\n           rmContainer.getAllocatedSchedulerKey(), rmContainer.getContainerId());\n \n       boolean removed \u003d false;\n \n       // Careful! Locking order is important!\n       try {\n         writeLock.lock();\n         Container container \u003d rmContainer.getContainer();\n \n         // Inform the application \u0026 the node\n         // Note: It\u0027s safe to assume that all state changes to RMContainer\n         // happen under scheduler\u0027s lock...\n         // So, this is, in effect, a transaction across application \u0026 node\n         if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n           removed \u003d application.unreserve(rmContainer.getReservedSchedulerKey(),\n               node, rmContainer);\n         } else{\n           removed \u003d application.containerCompleted(rmContainer, containerStatus,\n               event, node.getPartition());\n \n-          node.releaseContainer(container);\n+          node.releaseContainer(rmContainer.getContainerId(), false);\n         }\n \n         // Book-keeping\n         if (removed) {\n \n           // Inform the ordering policy\n           orderingPolicy.containerReleased(application, rmContainer);\n \n           releaseResource(clusterResource, application, container.getResource(),\n               node.getPartition(), rmContainer, false);\n         }\n       } finally {\n         writeLock.unlock();\n       }\n \n \n       if (removed) {\n         // Inform the parent queue _outside_ of the leaf-queue lock\n         getParent().completedContainer(clusterResource, application, node,\n           rmContainer, null, event, this, sortQueues);\n       }\n     }\n \n     // Notify PreemptionManager\n     csContext.getPreemptionManager().removeKillableContainer(\n         new KillableContainer(rmContainer, node.getPartition(), queueName));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void completedContainer(Resource clusterResource, \n      FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n      ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue,\n      boolean sortQueues) {\n    // Update SchedulerHealth for released / preempted container\n    updateSchedulerHealthForCompletedContainer(rmContainer, containerStatus);\n\n    if (application !\u003d null) {\n      // unreserve container increase request if it previously reserved.\n      if (rmContainer.hasIncreaseReservation()) {\n        unreserveIncreasedContainer(clusterResource, application, node,\n            rmContainer);\n      }\n      \n      // Remove container increase request if it exists\n      application.removeIncreaseRequest(node.getNodeID(),\n          rmContainer.getAllocatedSchedulerKey(), rmContainer.getContainerId());\n\n      boolean removed \u003d false;\n\n      // Careful! Locking order is important!\n      try {\n        writeLock.lock();\n        Container container \u003d rmContainer.getContainer();\n\n        // Inform the application \u0026 the node\n        // Note: It\u0027s safe to assume that all state changes to RMContainer\n        // happen under scheduler\u0027s lock...\n        // So, this is, in effect, a transaction across application \u0026 node\n        if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n          removed \u003d application.unreserve(rmContainer.getReservedSchedulerKey(),\n              node, rmContainer);\n        } else{\n          removed \u003d application.containerCompleted(rmContainer, containerStatus,\n              event, node.getPartition());\n\n          node.releaseContainer(rmContainer.getContainerId(), false);\n        }\n\n        // Book-keeping\n        if (removed) {\n\n          // Inform the ordering policy\n          orderingPolicy.containerReleased(application, rmContainer);\n\n          releaseResource(clusterResource, application, container.getResource(),\n              node.getPartition(), rmContainer, false);\n        }\n      } finally {\n        writeLock.unlock();\n      }\n\n\n      if (removed) {\n        // Inform the parent queue _outside_ of the leaf-queue lock\n        getParent().completedContainer(clusterResource, application, node,\n          rmContainer, null, event, this, sortQueues);\n      }\n    }\n\n    // Notify PreemptionManager\n    csContext.getPreemptionManager().removeKillableContainer(\n        new KillableContainer(rmContainer, node.getPartition(), queueName));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3140. Improve locks in AbstractCSQueue/LeafQueue/ParentQueue. Contributed by Wangda Tan\n",
      "commitDate": "20/09/16 12:03 AM",
      "commitName": "2b66d9ec5bdaec7e6b278926fbb6f222c4e3afaa",
      "commitAuthor": "Jian He",
      "commitDateOld": "16/09/16 10:05 PM",
      "commitNameOld": "4174b9756c8c7877797545c4356b1f40df603ec5",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 3.08,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,64 @@\n   public void completedContainer(Resource clusterResource, \n       FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n       ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue,\n       boolean sortQueues) {\n     // Update SchedulerHealth for released / preempted container\n     updateSchedulerHealthForCompletedContainer(rmContainer, containerStatus);\n \n     if (application !\u003d null) {\n       // unreserve container increase request if it previously reserved.\n       if (rmContainer.hasIncreaseReservation()) {\n         unreserveIncreasedContainer(clusterResource, application, node,\n             rmContainer);\n       }\n       \n       // Remove container increase request if it exists\n       application.removeIncreaseRequest(node.getNodeID(),\n           rmContainer.getAllocatedSchedulerKey(), rmContainer.getContainerId());\n \n       boolean removed \u003d false;\n \n       // Careful! Locking order is important!\n-      synchronized (this) {\n-\n+      try {\n+        writeLock.lock();\n         Container container \u003d rmContainer.getContainer();\n \n         // Inform the application \u0026 the node\n         // Note: It\u0027s safe to assume that all state changes to RMContainer\n-        // happen under scheduler\u0027s lock... \n+        // happen under scheduler\u0027s lock...\n         // So, this is, in effect, a transaction across application \u0026 node\n         if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n           removed \u003d application.unreserve(rmContainer.getReservedSchedulerKey(),\n               node, rmContainer);\n-        } else {\n-          removed \u003d\n-              application.containerCompleted(rmContainer, containerStatus,\n-                  event, node.getPartition());\n+        } else{\n+          removed \u003d application.containerCompleted(rmContainer, containerStatus,\n+              event, node.getPartition());\n \n           node.releaseContainer(container);\n         }\n \n         // Book-keeping\n         if (removed) {\n \n           // Inform the ordering policy\n           orderingPolicy.containerReleased(application, rmContainer);\n-          \n+\n           releaseResource(clusterResource, application, container.getResource(),\n               node.getPartition(), rmContainer, false);\n         }\n+      } finally {\n+        writeLock.unlock();\n       }\n \n+\n       if (removed) {\n         // Inform the parent queue _outside_ of the leaf-queue lock\n         getParent().completedContainer(clusterResource, application, node,\n           rmContainer, null, event, this, sortQueues);\n       }\n     }\n \n     // Notify PreemptionManager\n     csContext.getPreemptionManager().removeKillableContainer(\n         new KillableContainer(rmContainer, node.getPartition(), queueName));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void completedContainer(Resource clusterResource, \n      FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n      ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue,\n      boolean sortQueues) {\n    // Update SchedulerHealth for released / preempted container\n    updateSchedulerHealthForCompletedContainer(rmContainer, containerStatus);\n\n    if (application !\u003d null) {\n      // unreserve container increase request if it previously reserved.\n      if (rmContainer.hasIncreaseReservation()) {\n        unreserveIncreasedContainer(clusterResource, application, node,\n            rmContainer);\n      }\n      \n      // Remove container increase request if it exists\n      application.removeIncreaseRequest(node.getNodeID(),\n          rmContainer.getAllocatedSchedulerKey(), rmContainer.getContainerId());\n\n      boolean removed \u003d false;\n\n      // Careful! Locking order is important!\n      try {\n        writeLock.lock();\n        Container container \u003d rmContainer.getContainer();\n\n        // Inform the application \u0026 the node\n        // Note: It\u0027s safe to assume that all state changes to RMContainer\n        // happen under scheduler\u0027s lock...\n        // So, this is, in effect, a transaction across application \u0026 node\n        if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n          removed \u003d application.unreserve(rmContainer.getReservedSchedulerKey(),\n              node, rmContainer);\n        } else{\n          removed \u003d application.containerCompleted(rmContainer, containerStatus,\n              event, node.getPartition());\n\n          node.releaseContainer(container);\n        }\n\n        // Book-keeping\n        if (removed) {\n\n          // Inform the ordering policy\n          orderingPolicy.containerReleased(application, rmContainer);\n\n          releaseResource(clusterResource, application, container.getResource(),\n              node.getPartition(), rmContainer, false);\n        }\n      } finally {\n        writeLock.unlock();\n      }\n\n\n      if (removed) {\n        // Inform the parent queue _outside_ of the leaf-queue lock\n        getParent().completedContainer(clusterResource, application, node,\n          rmContainer, null, event, this, sortQueues);\n      }\n    }\n\n    // Notify PreemptionManager\n    csContext.getPreemptionManager().removeKillableContainer(\n        new KillableContainer(rmContainer, node.getPartition(), queueName));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
      "commitDate": "26/07/16 2:54 PM",
      "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "29/05/16 8:54 AM",
      "commitNameOld": "42f90ab885d9693fcc1e52f9637f7de4111110ae",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 58.25,
      "commitsBetweenForRepo": 498,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,62 @@\n   public void completedContainer(Resource clusterResource, \n       FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n       ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue,\n       boolean sortQueues) {\n     // Update SchedulerHealth for released / preempted container\n     updateSchedulerHealthForCompletedContainer(rmContainer, containerStatus);\n \n     if (application !\u003d null) {\n       // unreserve container increase request if it previously reserved.\n       if (rmContainer.hasIncreaseReservation()) {\n         unreserveIncreasedContainer(clusterResource, application, node,\n             rmContainer);\n       }\n       \n       // Remove container increase request if it exists\n       application.removeIncreaseRequest(node.getNodeID(),\n-          rmContainer.getAllocatedPriority(), rmContainer.getContainerId());\n+          rmContainer.getAllocatedSchedulerKey(), rmContainer.getContainerId());\n \n       boolean removed \u003d false;\n \n       // Careful! Locking order is important!\n       synchronized (this) {\n \n         Container container \u003d rmContainer.getContainer();\n \n         // Inform the application \u0026 the node\n         // Note: It\u0027s safe to assume that all state changes to RMContainer\n         // happen under scheduler\u0027s lock... \n         // So, this is, in effect, a transaction across application \u0026 node\n         if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n-          removed \u003d application.unreserve(rmContainer.getReservedPriority(),\n+          removed \u003d application.unreserve(rmContainer.getReservedSchedulerKey(),\n               node, rmContainer);\n         } else {\n           removed \u003d\n               application.containerCompleted(rmContainer, containerStatus,\n                   event, node.getPartition());\n           \n           node.releaseContainer(container);\n         }\n \n         // Book-keeping\n         if (removed) {\n \n           // Inform the ordering policy\n           orderingPolicy.containerReleased(application, rmContainer);\n           \n           releaseResource(clusterResource, application, container.getResource(),\n               node.getPartition(), rmContainer, false);\n         }\n       }\n \n       if (removed) {\n         // Inform the parent queue _outside_ of the leaf-queue lock\n         getParent().completedContainer(clusterResource, application, node,\n           rmContainer, null, event, this, sortQueues);\n       }\n     }\n \n     // Notify PreemptionManager\n     csContext.getPreemptionManager().removeKillableContainer(\n         new KillableContainer(rmContainer, node.getPartition(), queueName));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void completedContainer(Resource clusterResource, \n      FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n      ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue,\n      boolean sortQueues) {\n    // Update SchedulerHealth for released / preempted container\n    updateSchedulerHealthForCompletedContainer(rmContainer, containerStatus);\n\n    if (application !\u003d null) {\n      // unreserve container increase request if it previously reserved.\n      if (rmContainer.hasIncreaseReservation()) {\n        unreserveIncreasedContainer(clusterResource, application, node,\n            rmContainer);\n      }\n      \n      // Remove container increase request if it exists\n      application.removeIncreaseRequest(node.getNodeID(),\n          rmContainer.getAllocatedSchedulerKey(), rmContainer.getContainerId());\n\n      boolean removed \u003d false;\n\n      // Careful! Locking order is important!\n      synchronized (this) {\n\n        Container container \u003d rmContainer.getContainer();\n\n        // Inform the application \u0026 the node\n        // Note: It\u0027s safe to assume that all state changes to RMContainer\n        // happen under scheduler\u0027s lock... \n        // So, this is, in effect, a transaction across application \u0026 node\n        if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n          removed \u003d application.unreserve(rmContainer.getReservedSchedulerKey(),\n              node, rmContainer);\n        } else {\n          removed \u003d\n              application.containerCompleted(rmContainer, containerStatus,\n                  event, node.getPartition());\n          \n          node.releaseContainer(container);\n        }\n\n        // Book-keeping\n        if (removed) {\n\n          // Inform the ordering policy\n          orderingPolicy.containerReleased(application, rmContainer);\n          \n          releaseResource(clusterResource, application, container.getResource(),\n              node.getPartition(), rmContainer, false);\n        }\n      }\n\n      if (removed) {\n        // Inform the parent queue _outside_ of the leaf-queue lock\n        getParent().completedContainer(clusterResource, application, node,\n          rmContainer, null, event, this, sortQueues);\n      }\n    }\n\n    // Notify PreemptionManager\n    csContext.getPreemptionManager().removeKillableContainer(\n        new KillableContainer(rmContainer, node.getPartition(), queueName));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "fdc46bfb37776d8c41b68f6c33a2379d0f329994": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4934. Reserved Resource for QueueMetrics needs to be handled correctly in few cases. (Sunil G via wangda)\n",
      "commitDate": "16/04/16 10:47 PM",
      "commitName": "fdc46bfb37776d8c41b68f6c33a2379d0f329994",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "08/04/16 3:33 PM",
      "commitNameOld": "ec06957941367930c855b5e05e6a84ba676fd46a",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 8.3,
      "commitsBetweenForRepo": 52,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,69 +1,62 @@\n   public void completedContainer(Resource clusterResource, \n       FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n       ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue,\n       boolean sortQueues) {\n     // Update SchedulerHealth for released / preempted container\n     updateSchedulerHealthForCompletedContainer(rmContainer, containerStatus);\n \n     if (application !\u003d null) {\n       // unreserve container increase request if it previously reserved.\n       if (rmContainer.hasIncreaseReservation()) {\n         unreserveIncreasedContainer(clusterResource, application, node,\n             rmContainer);\n       }\n       \n       // Remove container increase request if it exists\n       application.removeIncreaseRequest(node.getNodeID(),\n           rmContainer.getAllocatedPriority(), rmContainer.getContainerId());\n \n       boolean removed \u003d false;\n \n       // Careful! Locking order is important!\n       synchronized (this) {\n \n         Container container \u003d rmContainer.getContainer();\n \n         // Inform the application \u0026 the node\n         // Note: It\u0027s safe to assume that all state changes to RMContainer\n         // happen under scheduler\u0027s lock... \n         // So, this is, in effect, a transaction across application \u0026 node\n         if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n           removed \u003d application.unreserve(rmContainer.getReservedPriority(),\n               node, rmContainer);\n         } else {\n           removed \u003d\n               application.containerCompleted(rmContainer, containerStatus,\n                   event, node.getPartition());\n           \n           node.releaseContainer(container);\n         }\n \n         // Book-keeping\n         if (removed) {\n \n-          // track reserved resource for metrics, for normal container\n-          // getReservedResource will be null.\n-          Resource reservedRes \u003d rmContainer.getReservedResource();\n-          if (reservedRes !\u003d null \u0026\u0026 !reservedRes.equals(Resources.none())) {\n-            decReservedResource(node.getPartition(), reservedRes);\n-          }\n-\n           // Inform the ordering policy\n           orderingPolicy.containerReleased(application, rmContainer);\n           \n           releaseResource(clusterResource, application, container.getResource(),\n               node.getPartition(), rmContainer, false);\n         }\n       }\n \n       if (removed) {\n         // Inform the parent queue _outside_ of the leaf-queue lock\n         getParent().completedContainer(clusterResource, application, node,\n           rmContainer, null, event, this, sortQueues);\n       }\n     }\n \n     // Notify PreemptionManager\n     csContext.getPreemptionManager().removeKillableContainer(\n         new KillableContainer(rmContainer, node.getPartition(), queueName));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void completedContainer(Resource clusterResource, \n      FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n      ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue,\n      boolean sortQueues) {\n    // Update SchedulerHealth for released / preempted container\n    updateSchedulerHealthForCompletedContainer(rmContainer, containerStatus);\n\n    if (application !\u003d null) {\n      // unreserve container increase request if it previously reserved.\n      if (rmContainer.hasIncreaseReservation()) {\n        unreserveIncreasedContainer(clusterResource, application, node,\n            rmContainer);\n      }\n      \n      // Remove container increase request if it exists\n      application.removeIncreaseRequest(node.getNodeID(),\n          rmContainer.getAllocatedPriority(), rmContainer.getContainerId());\n\n      boolean removed \u003d false;\n\n      // Careful! Locking order is important!\n      synchronized (this) {\n\n        Container container \u003d rmContainer.getContainer();\n\n        // Inform the application \u0026 the node\n        // Note: It\u0027s safe to assume that all state changes to RMContainer\n        // happen under scheduler\u0027s lock... \n        // So, this is, in effect, a transaction across application \u0026 node\n        if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n          removed \u003d application.unreserve(rmContainer.getReservedPriority(),\n              node, rmContainer);\n        } else {\n          removed \u003d\n              application.containerCompleted(rmContainer, containerStatus,\n                  event, node.getPartition());\n          \n          node.releaseContainer(container);\n        }\n\n        // Book-keeping\n        if (removed) {\n\n          // Inform the ordering policy\n          orderingPolicy.containerReleased(application, rmContainer);\n          \n          releaseResource(clusterResource, application, container.getResource(),\n              node.getPartition(), rmContainer, false);\n        }\n      }\n\n      if (removed) {\n        // Inform the parent queue _outside_ of the leaf-queue lock\n        getParent().completedContainer(clusterResource, application, node,\n          rmContainer, null, event, this, sortQueues);\n      }\n    }\n\n    // Notify PreemptionManager\n    csContext.getPreemptionManager().removeKillableContainer(\n        new KillableContainer(rmContainer, node.getPartition(), queueName));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "fc055a3cbe9545cf1c59421641c7b296aa33f953": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4865. Track Reserved resources in ResourceUsage and QueueCapacities. (Sunil G via wangda)\n",
      "commitDate": "29/03/16 5:07 PM",
      "commitName": "fc055a3cbe9545cf1c59421641c7b296aa33f953",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "16/03/16 5:02 PM",
      "commitNameOld": "ae14e5d07f1b6702a5160637438028bb03d9387e",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 13.0,
      "commitsBetweenForRepo": 64,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,69 @@\n   public void completedContainer(Resource clusterResource, \n       FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n       ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue,\n       boolean sortQueues) {\n     // Update SchedulerHealth for released / preempted container\n     updateSchedulerHealthForCompletedContainer(rmContainer, containerStatus);\n \n     if (application !\u003d null) {\n       // unreserve container increase request if it previously reserved.\n       if (rmContainer.hasIncreaseReservation()) {\n         unreserveIncreasedContainer(clusterResource, application, node,\n             rmContainer);\n       }\n       \n       // Remove container increase request if it exists\n       application.removeIncreaseRequest(node.getNodeID(),\n           rmContainer.getAllocatedPriority(), rmContainer.getContainerId());\n \n       boolean removed \u003d false;\n \n       // Careful! Locking order is important!\n       synchronized (this) {\n \n         Container container \u003d rmContainer.getContainer();\n \n         // Inform the application \u0026 the node\n         // Note: It\u0027s safe to assume that all state changes to RMContainer\n         // happen under scheduler\u0027s lock... \n         // So, this is, in effect, a transaction across application \u0026 node\n         if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n           removed \u003d application.unreserve(rmContainer.getReservedPriority(),\n               node, rmContainer);\n         } else {\n           removed \u003d\n               application.containerCompleted(rmContainer, containerStatus,\n                   event, node.getPartition());\n           \n           node.releaseContainer(container);\n         }\n \n         // Book-keeping\n         if (removed) {\n-          \n+\n+          // track reserved resource for metrics, for normal container\n+          // getReservedResource will be null.\n+          Resource reservedRes \u003d rmContainer.getReservedResource();\n+          if (reservedRes !\u003d null \u0026\u0026 !reservedRes.equals(Resources.none())) {\n+            decReservedResource(node.getPartition(), reservedRes);\n+          }\n+\n           // Inform the ordering policy\n           orderingPolicy.containerReleased(application, rmContainer);\n           \n           releaseResource(clusterResource, application, container.getResource(),\n               node.getPartition(), rmContainer, false);\n         }\n       }\n \n       if (removed) {\n         // Inform the parent queue _outside_ of the leaf-queue lock\n         getParent().completedContainer(clusterResource, application, node,\n           rmContainer, null, event, this, sortQueues);\n       }\n     }\n \n     // Notify PreemptionManager\n     csContext.getPreemptionManager().removeKillableContainer(\n         new KillableContainer(rmContainer, node.getPartition(), queueName));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void completedContainer(Resource clusterResource, \n      FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n      ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue,\n      boolean sortQueues) {\n    // Update SchedulerHealth for released / preempted container\n    updateSchedulerHealthForCompletedContainer(rmContainer, containerStatus);\n\n    if (application !\u003d null) {\n      // unreserve container increase request if it previously reserved.\n      if (rmContainer.hasIncreaseReservation()) {\n        unreserveIncreasedContainer(clusterResource, application, node,\n            rmContainer);\n      }\n      \n      // Remove container increase request if it exists\n      application.removeIncreaseRequest(node.getNodeID(),\n          rmContainer.getAllocatedPriority(), rmContainer.getContainerId());\n\n      boolean removed \u003d false;\n\n      // Careful! Locking order is important!\n      synchronized (this) {\n\n        Container container \u003d rmContainer.getContainer();\n\n        // Inform the application \u0026 the node\n        // Note: It\u0027s safe to assume that all state changes to RMContainer\n        // happen under scheduler\u0027s lock... \n        // So, this is, in effect, a transaction across application \u0026 node\n        if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n          removed \u003d application.unreserve(rmContainer.getReservedPriority(),\n              node, rmContainer);\n        } else {\n          removed \u003d\n              application.containerCompleted(rmContainer, containerStatus,\n                  event, node.getPartition());\n          \n          node.releaseContainer(container);\n        }\n\n        // Book-keeping\n        if (removed) {\n\n          // track reserved resource for metrics, for normal container\n          // getReservedResource will be null.\n          Resource reservedRes \u003d rmContainer.getReservedResource();\n          if (reservedRes !\u003d null \u0026\u0026 !reservedRes.equals(Resources.none())) {\n            decReservedResource(node.getPartition(), reservedRes);\n          }\n\n          // Inform the ordering policy\n          orderingPolicy.containerReleased(application, rmContainer);\n          \n          releaseResource(clusterResource, application, container.getResource(),\n              node.getPartition(), rmContainer, false);\n        }\n      }\n\n      if (removed) {\n        // Inform the parent queue _outside_ of the leaf-queue lock\n        getParent().completedContainer(clusterResource, application, node,\n          rmContainer, null, event, this, sortQueues);\n      }\n    }\n\n    // Notify PreemptionManager\n    csContext.getPreemptionManager().removeKillableContainer(\n        new KillableContainer(rmContainer, node.getPartition(), queueName));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "ae14e5d07f1b6702a5160637438028bb03d9387e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4108. CapacityScheduler: Improve preemption to only kill containers that would satisfy the incoming request. (Wangda Tan)\n\n(cherry picked from commit 7e8c9beb4156dcaeb3a11e60aaa06d2370626913)\n",
      "commitDate": "16/03/16 5:02 PM",
      "commitName": "ae14e5d07f1b6702a5160637438028bb03d9387e",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "16/03/16 5:02 PM",
      "commitNameOld": "fa7a43529d529f0006c8033c2003f15b9b93f103",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,62 @@\n   public void completedContainer(Resource clusterResource, \n       FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n       ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue,\n       boolean sortQueues) {\n+    // Update SchedulerHealth for released / preempted container\n+    updateSchedulerHealthForCompletedContainer(rmContainer, containerStatus);\n+\n     if (application !\u003d null) {\n       // unreserve container increase request if it previously reserved.\n       if (rmContainer.hasIncreaseReservation()) {\n         unreserveIncreasedContainer(clusterResource, application, node,\n             rmContainer);\n       }\n       \n       // Remove container increase request if it exists\n       application.removeIncreaseRequest(node.getNodeID(),\n           rmContainer.getAllocatedPriority(), rmContainer.getContainerId());\n \n       boolean removed \u003d false;\n \n       // Careful! Locking order is important!\n       synchronized (this) {\n \n         Container container \u003d rmContainer.getContainer();\n \n         // Inform the application \u0026 the node\n         // Note: It\u0027s safe to assume that all state changes to RMContainer\n         // happen under scheduler\u0027s lock... \n         // So, this is, in effect, a transaction across application \u0026 node\n         if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n           removed \u003d application.unreserve(rmContainer.getReservedPriority(),\n               node, rmContainer);\n         } else {\n           removed \u003d\n               application.containerCompleted(rmContainer, containerStatus,\n                   event, node.getPartition());\n           \n           node.releaseContainer(container);\n         }\n \n         // Book-keeping\n         if (removed) {\n           \n           // Inform the ordering policy\n           orderingPolicy.containerReleased(application, rmContainer);\n           \n           releaseResource(clusterResource, application, container.getResource(),\n               node.getPartition(), rmContainer, false);\n         }\n       }\n \n       if (removed) {\n         // Inform the parent queue _outside_ of the leaf-queue lock\n         getParent().completedContainer(clusterResource, application, node,\n           rmContainer, null, event, this, sortQueues);\n       }\n     }\n+\n+    // Notify PreemptionManager\n+    csContext.getPreemptionManager().removeKillableContainer(\n+        new KillableContainer(rmContainer, node.getPartition(), queueName));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void completedContainer(Resource clusterResource, \n      FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n      ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue,\n      boolean sortQueues) {\n    // Update SchedulerHealth for released / preempted container\n    updateSchedulerHealthForCompletedContainer(rmContainer, containerStatus);\n\n    if (application !\u003d null) {\n      // unreserve container increase request if it previously reserved.\n      if (rmContainer.hasIncreaseReservation()) {\n        unreserveIncreasedContainer(clusterResource, application, node,\n            rmContainer);\n      }\n      \n      // Remove container increase request if it exists\n      application.removeIncreaseRequest(node.getNodeID(),\n          rmContainer.getAllocatedPriority(), rmContainer.getContainerId());\n\n      boolean removed \u003d false;\n\n      // Careful! Locking order is important!\n      synchronized (this) {\n\n        Container container \u003d rmContainer.getContainer();\n\n        // Inform the application \u0026 the node\n        // Note: It\u0027s safe to assume that all state changes to RMContainer\n        // happen under scheduler\u0027s lock... \n        // So, this is, in effect, a transaction across application \u0026 node\n        if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n          removed \u003d application.unreserve(rmContainer.getReservedPriority(),\n              node, rmContainer);\n        } else {\n          removed \u003d\n              application.containerCompleted(rmContainer, containerStatus,\n                  event, node.getPartition());\n          \n          node.releaseContainer(container);\n        }\n\n        // Book-keeping\n        if (removed) {\n          \n          // Inform the ordering policy\n          orderingPolicy.containerReleased(application, rmContainer);\n          \n          releaseResource(clusterResource, application, container.getResource(),\n              node.getPartition(), rmContainer, false);\n        }\n      }\n\n      if (removed) {\n        // Inform the parent queue _outside_ of the leaf-queue lock\n        getParent().completedContainer(clusterResource, application, node,\n          rmContainer, null, event, this, sortQueues);\n      }\n    }\n\n    // Notify PreemptionManager\n    csContext.getPreemptionManager().removeKillableContainer(\n        new KillableContainer(rmContainer, node.getPartition(), queueName));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "fa7a43529d529f0006c8033c2003f15b9b93f103": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"CapacityScheduler: Improve preemption to only kill containers that would satisfy the incoming request. (Wangda Tan)\"\n\nThis reverts commit 7e8c9beb4156dcaeb3a11e60aaa06d2370626913.\n",
      "commitDate": "16/03/16 5:02 PM",
      "commitName": "fa7a43529d529f0006c8033c2003f15b9b93f103",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "16/03/16 4:59 PM",
      "commitNameOld": "7e8c9beb4156dcaeb3a11e60aaa06d2370626913",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,55 @@\n   public void completedContainer(Resource clusterResource, \n       FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n       ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue,\n       boolean sortQueues) {\n-    // Update SchedulerHealth for released / preempted container\n-    updateSchedulerHealthForCompletedContainer(rmContainer, containerStatus);\n-\n     if (application !\u003d null) {\n       // unreserve container increase request if it previously reserved.\n       if (rmContainer.hasIncreaseReservation()) {\n         unreserveIncreasedContainer(clusterResource, application, node,\n             rmContainer);\n       }\n       \n       // Remove container increase request if it exists\n       application.removeIncreaseRequest(node.getNodeID(),\n           rmContainer.getAllocatedPriority(), rmContainer.getContainerId());\n \n       boolean removed \u003d false;\n \n       // Careful! Locking order is important!\n       synchronized (this) {\n \n         Container container \u003d rmContainer.getContainer();\n \n         // Inform the application \u0026 the node\n         // Note: It\u0027s safe to assume that all state changes to RMContainer\n         // happen under scheduler\u0027s lock... \n         // So, this is, in effect, a transaction across application \u0026 node\n         if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n           removed \u003d application.unreserve(rmContainer.getReservedPriority(),\n               node, rmContainer);\n         } else {\n           removed \u003d\n               application.containerCompleted(rmContainer, containerStatus,\n                   event, node.getPartition());\n           \n           node.releaseContainer(container);\n         }\n \n         // Book-keeping\n         if (removed) {\n           \n           // Inform the ordering policy\n           orderingPolicy.containerReleased(application, rmContainer);\n           \n           releaseResource(clusterResource, application, container.getResource(),\n               node.getPartition(), rmContainer, false);\n         }\n       }\n \n       if (removed) {\n         // Inform the parent queue _outside_ of the leaf-queue lock\n         getParent().completedContainer(clusterResource, application, node,\n           rmContainer, null, event, this, sortQueues);\n       }\n     }\n-\n-    // Notify PreemptionManager\n-    csContext.getPreemptionManager().removeKillableContainer(\n-        new KillableContainer(rmContainer, node.getPartition(), queueName));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void completedContainer(Resource clusterResource, \n      FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n      ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue,\n      boolean sortQueues) {\n    if (application !\u003d null) {\n      // unreserve container increase request if it previously reserved.\n      if (rmContainer.hasIncreaseReservation()) {\n        unreserveIncreasedContainer(clusterResource, application, node,\n            rmContainer);\n      }\n      \n      // Remove container increase request if it exists\n      application.removeIncreaseRequest(node.getNodeID(),\n          rmContainer.getAllocatedPriority(), rmContainer.getContainerId());\n\n      boolean removed \u003d false;\n\n      // Careful! Locking order is important!\n      synchronized (this) {\n\n        Container container \u003d rmContainer.getContainer();\n\n        // Inform the application \u0026 the node\n        // Note: It\u0027s safe to assume that all state changes to RMContainer\n        // happen under scheduler\u0027s lock... \n        // So, this is, in effect, a transaction across application \u0026 node\n        if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n          removed \u003d application.unreserve(rmContainer.getReservedPriority(),\n              node, rmContainer);\n        } else {\n          removed \u003d\n              application.containerCompleted(rmContainer, containerStatus,\n                  event, node.getPartition());\n          \n          node.releaseContainer(container);\n        }\n\n        // Book-keeping\n        if (removed) {\n          \n          // Inform the ordering policy\n          orderingPolicy.containerReleased(application, rmContainer);\n          \n          releaseResource(clusterResource, application, container.getResource(),\n              node.getPartition(), rmContainer, false);\n        }\n      }\n\n      if (removed) {\n        // Inform the parent queue _outside_ of the leaf-queue lock\n        getParent().completedContainer(clusterResource, application, node,\n          rmContainer, null, event, this, sortQueues);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "7e8c9beb4156dcaeb3a11e60aaa06d2370626913": {
      "type": "Ybodychange",
      "commitMessage": "CapacityScheduler: Improve preemption to only kill containers that would satisfy the incoming request. (Wangda Tan)\n",
      "commitDate": "16/03/16 4:59 PM",
      "commitName": "7e8c9beb4156dcaeb3a11e60aaa06d2370626913",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "29/01/16 12:22 PM",
      "commitNameOld": "f4a57d4a531e793373fe3118d644871a3b9ae0b1",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 47.15,
      "commitsBetweenForRepo": 307,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,62 @@\n   public void completedContainer(Resource clusterResource, \n       FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n       ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue,\n       boolean sortQueues) {\n+    // Update SchedulerHealth for released / preempted container\n+    updateSchedulerHealthForCompletedContainer(rmContainer, containerStatus);\n+\n     if (application !\u003d null) {\n       // unreserve container increase request if it previously reserved.\n       if (rmContainer.hasIncreaseReservation()) {\n         unreserveIncreasedContainer(clusterResource, application, node,\n             rmContainer);\n       }\n       \n       // Remove container increase request if it exists\n       application.removeIncreaseRequest(node.getNodeID(),\n           rmContainer.getAllocatedPriority(), rmContainer.getContainerId());\n \n       boolean removed \u003d false;\n \n       // Careful! Locking order is important!\n       synchronized (this) {\n \n         Container container \u003d rmContainer.getContainer();\n \n         // Inform the application \u0026 the node\n         // Note: It\u0027s safe to assume that all state changes to RMContainer\n         // happen under scheduler\u0027s lock... \n         // So, this is, in effect, a transaction across application \u0026 node\n         if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n           removed \u003d application.unreserve(rmContainer.getReservedPriority(),\n               node, rmContainer);\n         } else {\n           removed \u003d\n               application.containerCompleted(rmContainer, containerStatus,\n                   event, node.getPartition());\n           \n           node.releaseContainer(container);\n         }\n \n         // Book-keeping\n         if (removed) {\n           \n           // Inform the ordering policy\n           orderingPolicy.containerReleased(application, rmContainer);\n           \n           releaseResource(clusterResource, application, container.getResource(),\n               node.getPartition(), rmContainer, false);\n         }\n       }\n \n       if (removed) {\n         // Inform the parent queue _outside_ of the leaf-queue lock\n         getParent().completedContainer(clusterResource, application, node,\n           rmContainer, null, event, this, sortQueues);\n       }\n     }\n+\n+    // Notify PreemptionManager\n+    csContext.getPreemptionManager().removeKillableContainer(\n+        new KillableContainer(rmContainer, node.getPartition(), queueName));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void completedContainer(Resource clusterResource, \n      FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n      ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue,\n      boolean sortQueues) {\n    // Update SchedulerHealth for released / preempted container\n    updateSchedulerHealthForCompletedContainer(rmContainer, containerStatus);\n\n    if (application !\u003d null) {\n      // unreserve container increase request if it previously reserved.\n      if (rmContainer.hasIncreaseReservation()) {\n        unreserveIncreasedContainer(clusterResource, application, node,\n            rmContainer);\n      }\n      \n      // Remove container increase request if it exists\n      application.removeIncreaseRequest(node.getNodeID(),\n          rmContainer.getAllocatedPriority(), rmContainer.getContainerId());\n\n      boolean removed \u003d false;\n\n      // Careful! Locking order is important!\n      synchronized (this) {\n\n        Container container \u003d rmContainer.getContainer();\n\n        // Inform the application \u0026 the node\n        // Note: It\u0027s safe to assume that all state changes to RMContainer\n        // happen under scheduler\u0027s lock... \n        // So, this is, in effect, a transaction across application \u0026 node\n        if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n          removed \u003d application.unreserve(rmContainer.getReservedPriority(),\n              node, rmContainer);\n        } else {\n          removed \u003d\n              application.containerCompleted(rmContainer, containerStatus,\n                  event, node.getPartition());\n          \n          node.releaseContainer(container);\n        }\n\n        // Book-keeping\n        if (removed) {\n          \n          // Inform the ordering policy\n          orderingPolicy.containerReleased(application, rmContainer);\n          \n          releaseResource(clusterResource, application, container.getResource(),\n              node.getPartition(), rmContainer, false);\n        }\n      }\n\n      if (removed) {\n        // Inform the parent queue _outside_ of the leaf-queue lock\n        getParent().completedContainer(clusterResource, application, node,\n          rmContainer, null, event, this, sortQueues);\n      }\n    }\n\n    // Notify PreemptionManager\n    csContext.getPreemptionManager().removeKillableContainer(\n        new KillableContainer(rmContainer, node.getPartition(), queueName));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "89cab1ba5f0671f8ef30dbe7432079c18362b434": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1651. CapacityScheduler side changes to support container resize. Contributed by Wangda Tan\n",
      "commitDate": "23/09/15 1:29 PM",
      "commitName": "89cab1ba5f0671f8ef30dbe7432079c18362b434",
      "commitAuthor": "Jian He",
      "commitDateOld": "21/09/15 8:54 PM",
      "commitNameOld": "dfd807afab0fae3839c9cc5d552aa0304444f956",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 1.69,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,55 @@\n   public void completedContainer(Resource clusterResource, \n       FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n       ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue,\n       boolean sortQueues) {\n     if (application !\u003d null) {\n+      // unreserve container increase request if it previously reserved.\n+      if (rmContainer.hasIncreaseReservation()) {\n+        unreserveIncreasedContainer(clusterResource, application, node,\n+            rmContainer);\n+      }\n+      \n+      // Remove container increase request if it exists\n+      application.removeIncreaseRequest(node.getNodeID(),\n+          rmContainer.getAllocatedPriority(), rmContainer.getContainerId());\n \n       boolean removed \u003d false;\n \n       // Careful! Locking order is important!\n       synchronized (this) {\n \n         Container container \u003d rmContainer.getContainer();\n \n         // Inform the application \u0026 the node\n         // Note: It\u0027s safe to assume that all state changes to RMContainer\n         // happen under scheduler\u0027s lock... \n         // So, this is, in effect, a transaction across application \u0026 node\n         if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n           removed \u003d application.unreserve(rmContainer.getReservedPriority(),\n               node, rmContainer);\n         } else {\n           removed \u003d\n               application.containerCompleted(rmContainer, containerStatus,\n                   event, node.getPartition());\n           \n           node.releaseContainer(container);\n         }\n \n         // Book-keeping\n         if (removed) {\n           \n           // Inform the ordering policy\n           orderingPolicy.containerReleased(application, rmContainer);\n           \n           releaseResource(clusterResource, application, container.getResource(),\n-              node.getPartition(), rmContainer);\n+              node.getPartition(), rmContainer, false);\n         }\n       }\n \n       if (removed) {\n         // Inform the parent queue _outside_ of the leaf-queue lock\n         getParent().completedContainer(clusterResource, application, node,\n           rmContainer, null, event, this, sortQueues);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void completedContainer(Resource clusterResource, \n      FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n      ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue,\n      boolean sortQueues) {\n    if (application !\u003d null) {\n      // unreserve container increase request if it previously reserved.\n      if (rmContainer.hasIncreaseReservation()) {\n        unreserveIncreasedContainer(clusterResource, application, node,\n            rmContainer);\n      }\n      \n      // Remove container increase request if it exists\n      application.removeIncreaseRequest(node.getNodeID(),\n          rmContainer.getAllocatedPriority(), rmContainer.getContainerId());\n\n      boolean removed \u003d false;\n\n      // Careful! Locking order is important!\n      synchronized (this) {\n\n        Container container \u003d rmContainer.getContainer();\n\n        // Inform the application \u0026 the node\n        // Note: It\u0027s safe to assume that all state changes to RMContainer\n        // happen under scheduler\u0027s lock... \n        // So, this is, in effect, a transaction across application \u0026 node\n        if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n          removed \u003d application.unreserve(rmContainer.getReservedPriority(),\n              node, rmContainer);\n        } else {\n          removed \u003d\n              application.containerCompleted(rmContainer, containerStatus,\n                  event, node.getPartition());\n          \n          node.releaseContainer(container);\n        }\n\n        // Book-keeping\n        if (removed) {\n          \n          // Inform the ordering policy\n          orderingPolicy.containerReleased(application, rmContainer);\n          \n          releaseResource(clusterResource, application, container.getResource(),\n              node.getPartition(), rmContainer, false);\n        }\n      }\n\n      if (removed) {\n        // Inform the parent queue _outside_ of the leaf-queue lock\n        getParent().completedContainer(clusterResource, application, node,\n          rmContainer, null, event, this, sortQueues);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "4bc42d76e7fa53cb268cab0f9fe1fd8d8dbb17fd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3966. Fix excessive loggings in CapacityScheduler. (Jian He via wangda)\n",
      "commitDate": "07/08/15 9:46 AM",
      "commitName": "4bc42d76e7fa53cb268cab0f9fe1fd8d8dbb17fd",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "05/08/15 1:47 PM",
      "commitNameOld": "ba2313d6145a1234777938a747187373f4cd58d9",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 1.83,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,46 @@\n   public void completedContainer(Resource clusterResource, \n       FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n       ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue,\n       boolean sortQueues) {\n     if (application !\u003d null) {\n \n       boolean removed \u003d false;\n \n       // Careful! Locking order is important!\n       synchronized (this) {\n \n         Container container \u003d rmContainer.getContainer();\n \n         // Inform the application \u0026 the node\n         // Note: It\u0027s safe to assume that all state changes to RMContainer\n         // happen under scheduler\u0027s lock... \n         // So, this is, in effect, a transaction across application \u0026 node\n         if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n           removed \u003d application.unreserve(rmContainer.getReservedPriority(),\n               node, rmContainer);\n         } else {\n           removed \u003d\n               application.containerCompleted(rmContainer, containerStatus,\n                   event, node.getPartition());\n           \n           node.releaseContainer(container);\n         }\n \n         // Book-keeping\n         if (removed) {\n           \n           // Inform the ordering policy\n           orderingPolicy.containerReleased(application, rmContainer);\n           \n-          releaseResource(clusterResource, application,\n-              container.getResource(), node.getPartition(), rmContainer);\n-          LOG.info(\"completedContainer\" +\n-              \" container\u003d\" + container +\n-              \" queue\u003d\" + this +\n-              \" cluster\u003d\" + clusterResource);\n+          releaseResource(clusterResource, application, container.getResource(),\n+              node.getPartition(), rmContainer);\n         }\n       }\n \n       if (removed) {\n         // Inform the parent queue _outside_ of the leaf-queue lock\n         getParent().completedContainer(clusterResource, application, node,\n           rmContainer, null, event, this, sortQueues);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void completedContainer(Resource clusterResource, \n      FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n      ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue,\n      boolean sortQueues) {\n    if (application !\u003d null) {\n\n      boolean removed \u003d false;\n\n      // Careful! Locking order is important!\n      synchronized (this) {\n\n        Container container \u003d rmContainer.getContainer();\n\n        // Inform the application \u0026 the node\n        // Note: It\u0027s safe to assume that all state changes to RMContainer\n        // happen under scheduler\u0027s lock... \n        // So, this is, in effect, a transaction across application \u0026 node\n        if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n          removed \u003d application.unreserve(rmContainer.getReservedPriority(),\n              node, rmContainer);\n        } else {\n          removed \u003d\n              application.containerCompleted(rmContainer, containerStatus,\n                  event, node.getPartition());\n          \n          node.releaseContainer(container);\n        }\n\n        // Book-keeping\n        if (removed) {\n          \n          // Inform the ordering policy\n          orderingPolicy.containerReleased(application, rmContainer);\n          \n          releaseResource(clusterResource, application, container.getResource(),\n              node.getPartition(), rmContainer);\n        }\n      }\n\n      if (removed) {\n        // Inform the parent queue _outside_ of the leaf-queue lock\n        getParent().completedContainer(clusterResource, application, node,\n          rmContainer, null, event, this, sortQueues);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "83fe34ac0896cee0918bbfad7bd51231e4aec39b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3026. Move application-specific container allocation logic from LeafQueue to FiCaSchedulerApp. Contributed by Wangda Tan\n",
      "commitDate": "24/07/15 2:00 PM",
      "commitName": "83fe34ac0896cee0918bbfad7bd51231e4aec39b",
      "commitAuthor": "Jian He",
      "commitDateOld": "22/07/15 11:54 AM",
      "commitNameOld": "76ec26de8099dc48ce3812c595b7ab857a600442",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 2.09,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,50 @@\n   public void completedContainer(Resource clusterResource, \n       FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n       ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue,\n       boolean sortQueues) {\n     if (application !\u003d null) {\n \n       boolean removed \u003d false;\n \n       // Careful! Locking order is important!\n       synchronized (this) {\n \n         Container container \u003d rmContainer.getContainer();\n \n         // Inform the application \u0026 the node\n         // Note: It\u0027s safe to assume that all state changes to RMContainer\n         // happen under scheduler\u0027s lock... \n         // So, this is, in effect, a transaction across application \u0026 node\n         if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n-          removed \u003d unreserve(application, rmContainer.getReservedPriority(),\n+          removed \u003d application.unreserve(rmContainer.getReservedPriority(),\n               node, rmContainer);\n         } else {\n           removed \u003d\n               application.containerCompleted(rmContainer, containerStatus,\n                   event, node.getPartition());\n           \n           node.releaseContainer(container);\n         }\n \n         // Book-keeping\n         if (removed) {\n           \n           // Inform the ordering policy\n           orderingPolicy.containerReleased(application, rmContainer);\n           \n           releaseResource(clusterResource, application,\n               container.getResource(), node.getPartition(), rmContainer);\n           LOG.info(\"completedContainer\" +\n               \" container\u003d\" + container +\n               \" queue\u003d\" + this +\n               \" cluster\u003d\" + clusterResource);\n         }\n       }\n \n       if (removed) {\n         // Inform the parent queue _outside_ of the leaf-queue lock\n         getParent().completedContainer(clusterResource, application, node,\n           rmContainer, null, event, this, sortQueues);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void completedContainer(Resource clusterResource, \n      FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n      ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue,\n      boolean sortQueues) {\n    if (application !\u003d null) {\n\n      boolean removed \u003d false;\n\n      // Careful! Locking order is important!\n      synchronized (this) {\n\n        Container container \u003d rmContainer.getContainer();\n\n        // Inform the application \u0026 the node\n        // Note: It\u0027s safe to assume that all state changes to RMContainer\n        // happen under scheduler\u0027s lock... \n        // So, this is, in effect, a transaction across application \u0026 node\n        if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n          removed \u003d application.unreserve(rmContainer.getReservedPriority(),\n              node, rmContainer);\n        } else {\n          removed \u003d\n              application.containerCompleted(rmContainer, containerStatus,\n                  event, node.getPartition());\n          \n          node.releaseContainer(container);\n        }\n\n        // Book-keeping\n        if (removed) {\n          \n          // Inform the ordering policy\n          orderingPolicy.containerReleased(application, rmContainer);\n          \n          releaseResource(clusterResource, application,\n              container.getResource(), node.getPartition(), rmContainer);\n          LOG.info(\"completedContainer\" +\n              \" container\u003d\" + container +\n              \" queue\u003d\" + this +\n              \" cluster\u003d\" + clusterResource);\n        }\n      }\n\n      if (removed) {\n        // Inform the parent queue _outside_ of the leaf-queue lock\n        getParent().completedContainer(clusterResource, application, node,\n          rmContainer, null, event, this, sortQueues);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "d497f6ea2be559aa31ed76f37ae949dbfabe2a51": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2498. Respect labels in preemption policy of capacity scheduler for inter-queue preemption. Contributed by Wangda Tan\n",
      "commitDate": "24/04/15 5:03 PM",
      "commitName": "d497f6ea2be559aa31ed76f37ae949dbfabe2a51",
      "commitAuthor": "Jian He",
      "commitDateOld": "23/04/15 7:39 AM",
      "commitNameOld": "189a63a719c63b67a1783a280bfc2f72dcb55277",
      "commitAuthorOld": "tgraves",
      "daysBetweenCommits": 1.39,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,50 @@\n   public void completedContainer(Resource clusterResource, \n       FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n       ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue,\n       boolean sortQueues) {\n     if (application !\u003d null) {\n \n       boolean removed \u003d false;\n \n       // Careful! Locking order is important!\n       synchronized (this) {\n \n         Container container \u003d rmContainer.getContainer();\n \n         // Inform the application \u0026 the node\n         // Note: It\u0027s safe to assume that all state changes to RMContainer\n         // happen under scheduler\u0027s lock... \n         // So, this is, in effect, a transaction across application \u0026 node\n         if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n           removed \u003d unreserve(application, rmContainer.getReservedPriority(),\n               node, rmContainer);\n         } else {\n           removed \u003d\n               application.containerCompleted(rmContainer, containerStatus,\n                   event, node.getPartition());\n           \n           node.releaseContainer(container);\n         }\n \n         // Book-keeping\n         if (removed) {\n           \n           // Inform the ordering policy\n           orderingPolicy.containerReleased(application, rmContainer);\n           \n           releaseResource(clusterResource, application,\n-              container.getResource(), node.getPartition());\n+              container.getResource(), node.getPartition(), rmContainer);\n           LOG.info(\"completedContainer\" +\n               \" container\u003d\" + container +\n               \" queue\u003d\" + this +\n               \" cluster\u003d\" + clusterResource);\n         }\n       }\n \n       if (removed) {\n         // Inform the parent queue _outside_ of the leaf-queue lock\n         getParent().completedContainer(clusterResource, application, node,\n           rmContainer, null, event, this, sortQueues);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void completedContainer(Resource clusterResource, \n      FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n      ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue,\n      boolean sortQueues) {\n    if (application !\u003d null) {\n\n      boolean removed \u003d false;\n\n      // Careful! Locking order is important!\n      synchronized (this) {\n\n        Container container \u003d rmContainer.getContainer();\n\n        // Inform the application \u0026 the node\n        // Note: It\u0027s safe to assume that all state changes to RMContainer\n        // happen under scheduler\u0027s lock... \n        // So, this is, in effect, a transaction across application \u0026 node\n        if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n          removed \u003d unreserve(application, rmContainer.getReservedPriority(),\n              node, rmContainer);\n        } else {\n          removed \u003d\n              application.containerCompleted(rmContainer, containerStatus,\n                  event, node.getPartition());\n          \n          node.releaseContainer(container);\n        }\n\n        // Book-keeping\n        if (removed) {\n          \n          // Inform the ordering policy\n          orderingPolicy.containerReleased(application, rmContainer);\n          \n          releaseResource(clusterResource, application,\n              container.getResource(), node.getPartition(), rmContainer);\n          LOG.info(\"completedContainer\" +\n              \" container\u003d\" + container +\n              \" queue\u003d\" + this +\n              \" cluster\u003d\" + clusterResource);\n        }\n      }\n\n      if (removed) {\n        // Inform the parent queue _outside_ of the leaf-queue lock\n        getParent().completedContainer(clusterResource, application, node,\n          rmContainer, null, event, this, sortQueues);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "44872b76fcc0ddfbc7b0a4e54eef50fe8708e0f5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3463. Integrate OrderingPolicy Framework with CapacityScheduler. (Craig Welch via wangda)\n",
      "commitDate": "20/04/15 5:12 PM",
      "commitName": "44872b76fcc0ddfbc7b0a4e54eef50fe8708e0f5",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "17/04/15 1:36 PM",
      "commitNameOld": "d573f09fb93dbb711d504620af5d73840ea063a6",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 3.15,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,50 @@\n   public void completedContainer(Resource clusterResource, \n       FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n       ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue,\n       boolean sortQueues) {\n     if (application !\u003d null) {\n \n       boolean removed \u003d false;\n \n       // Careful! Locking order is important!\n       synchronized (this) {\n \n         Container container \u003d rmContainer.getContainer();\n \n         // Inform the application \u0026 the node\n         // Note: It\u0027s safe to assume that all state changes to RMContainer\n         // happen under scheduler\u0027s lock... \n         // So, this is, in effect, a transaction across application \u0026 node\n         if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n           removed \u003d unreserve(application, rmContainer.getReservedPriority(),\n               node, rmContainer);\n         } else {\n           removed \u003d\n               application.containerCompleted(rmContainer, containerStatus,\n                   event, node.getPartition());\n+          \n           node.releaseContainer(container);\n         }\n \n         // Book-keeping\n         if (removed) {\n+          \n+          // Inform the ordering policy\n+          orderingPolicy.containerReleased(application, rmContainer);\n+          \n           releaseResource(clusterResource, application,\n               container.getResource(), node.getPartition());\n           LOG.info(\"completedContainer\" +\n               \" container\u003d\" + container +\n               \" queue\u003d\" + this +\n               \" cluster\u003d\" + clusterResource);\n         }\n       }\n \n       if (removed) {\n         // Inform the parent queue _outside_ of the leaf-queue lock\n         getParent().completedContainer(clusterResource, application, node,\n           rmContainer, null, event, this, sortQueues);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void completedContainer(Resource clusterResource, \n      FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n      ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue,\n      boolean sortQueues) {\n    if (application !\u003d null) {\n\n      boolean removed \u003d false;\n\n      // Careful! Locking order is important!\n      synchronized (this) {\n\n        Container container \u003d rmContainer.getContainer();\n\n        // Inform the application \u0026 the node\n        // Note: It\u0027s safe to assume that all state changes to RMContainer\n        // happen under scheduler\u0027s lock... \n        // So, this is, in effect, a transaction across application \u0026 node\n        if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n          removed \u003d unreserve(application, rmContainer.getReservedPriority(),\n              node, rmContainer);\n        } else {\n          removed \u003d\n              application.containerCompleted(rmContainer, containerStatus,\n                  event, node.getPartition());\n          \n          node.releaseContainer(container);\n        }\n\n        // Book-keeping\n        if (removed) {\n          \n          // Inform the ordering policy\n          orderingPolicy.containerReleased(application, rmContainer);\n          \n          releaseResource(clusterResource, application,\n              container.getResource(), node.getPartition());\n          LOG.info(\"completedContainer\" +\n              \" container\u003d\" + container +\n              \" queue\u003d\" + this +\n              \" cluster\u003d\" + clusterResource);\n        }\n      }\n\n      if (removed) {\n        // Inform the parent queue _outside_ of the leaf-queue lock\n        getParent().completedContainer(clusterResource, application, node,\n          rmContainer, null, event, this, sortQueues);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "0fefda645bca935b87b6bb8ca63e6f18340d59f5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3361. CapacityScheduler side changes to support non-exclusive node labels. Contributed by Wangda Tan\n",
      "commitDate": "14/04/15 11:45 AM",
      "commitName": "0fefda645bca935b87b6bb8ca63e6f18340d59f5",
      "commitAuthor": "Jian He",
      "commitDateOld": "09/04/15 11:38 PM",
      "commitNameOld": "afa5d4715a3aea2a6e93380b014c7bb8f0880383",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 4.51,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n   public void completedContainer(Resource clusterResource, \n       FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n       ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue,\n       boolean sortQueues) {\n     if (application !\u003d null) {\n \n       boolean removed \u003d false;\n \n       // Careful! Locking order is important!\n       synchronized (this) {\n \n         Container container \u003d rmContainer.getContainer();\n \n         // Inform the application \u0026 the node\n         // Note: It\u0027s safe to assume that all state changes to RMContainer\n         // happen under scheduler\u0027s lock... \n         // So, this is, in effect, a transaction across application \u0026 node\n         if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n           removed \u003d unreserve(application, rmContainer.getReservedPriority(),\n               node, rmContainer);\n         } else {\n           removed \u003d\n               application.containerCompleted(rmContainer, containerStatus,\n                   event, node.getPartition());\n           node.releaseContainer(container);\n         }\n \n         // Book-keeping\n         if (removed) {\n           releaseResource(clusterResource, application,\n-              container.getResource(), node.getLabels());\n+              container.getResource(), node.getPartition());\n           LOG.info(\"completedContainer\" +\n               \" container\u003d\" + container +\n               \" queue\u003d\" + this +\n               \" cluster\u003d\" + clusterResource);\n         }\n       }\n \n       if (removed) {\n         // Inform the parent queue _outside_ of the leaf-queue lock\n         getParent().completedContainer(clusterResource, application, node,\n           rmContainer, null, event, this, sortQueues);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void completedContainer(Resource clusterResource, \n      FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n      ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue,\n      boolean sortQueues) {\n    if (application !\u003d null) {\n\n      boolean removed \u003d false;\n\n      // Careful! Locking order is important!\n      synchronized (this) {\n\n        Container container \u003d rmContainer.getContainer();\n\n        // Inform the application \u0026 the node\n        // Note: It\u0027s safe to assume that all state changes to RMContainer\n        // happen under scheduler\u0027s lock... \n        // So, this is, in effect, a transaction across application \u0026 node\n        if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n          removed \u003d unreserve(application, rmContainer.getReservedPriority(),\n              node, rmContainer);\n        } else {\n          removed \u003d\n              application.containerCompleted(rmContainer, containerStatus,\n                  event, node.getPartition());\n          node.releaseContainer(container);\n        }\n\n        // Book-keeping\n        if (removed) {\n          releaseResource(clusterResource, application,\n              container.getResource(), node.getPartition());\n          LOG.info(\"completedContainer\" +\n              \" container\u003d\" + container +\n              \" queue\u003d\" + this +\n              \" cluster\u003d\" + clusterResource);\n        }\n      }\n\n      if (removed) {\n        // Inform the parent queue _outside_ of the leaf-queue lock\n        getParent().completedContainer(clusterResource, application, node,\n          rmContainer, null, event, this, sortQueues);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "586348e4cbf197188057d6b843a6701cfffdaff3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3356. Capacity Scheduler FiCaSchedulerApp should use ResourceUsage to track used-resources-by-label. Contributed by Wangda Tan\n",
      "commitDate": "20/03/15 1:54 PM",
      "commitName": "586348e4cbf197188057d6b843a6701cfffdaff3",
      "commitAuthor": "Jian He",
      "commitDateOld": "17/03/15 9:30 PM",
      "commitNameOld": "658097d6da1b1aac8e01db459f0c3b456e99652f",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 2.68,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,45 @@\n   public void completedContainer(Resource clusterResource, \n       FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n       ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue,\n       boolean sortQueues) {\n     if (application !\u003d null) {\n \n       boolean removed \u003d false;\n \n       // Careful! Locking order is important!\n       synchronized (this) {\n \n         Container container \u003d rmContainer.getContainer();\n \n         // Inform the application \u0026 the node\n         // Note: It\u0027s safe to assume that all state changes to RMContainer\n         // happen under scheduler\u0027s lock... \n         // So, this is, in effect, a transaction across application \u0026 node\n         if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n           removed \u003d unreserve(application, rmContainer.getReservedPriority(),\n               node, rmContainer);\n         } else {\n           removed \u003d\n-            application.containerCompleted(rmContainer, containerStatus, event);\n+              application.containerCompleted(rmContainer, containerStatus,\n+                  event, node.getPartition());\n           node.releaseContainer(container);\n         }\n \n         // Book-keeping\n         if (removed) {\n           releaseResource(clusterResource, application,\n               container.getResource(), node.getLabels());\n           LOG.info(\"completedContainer\" +\n               \" container\u003d\" + container +\n               \" queue\u003d\" + this +\n               \" cluster\u003d\" + clusterResource);\n         }\n       }\n \n       if (removed) {\n         // Inform the parent queue _outside_ of the leaf-queue lock\n         getParent().completedContainer(clusterResource, application, node,\n           rmContainer, null, event, this, sortQueues);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void completedContainer(Resource clusterResource, \n      FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n      ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue,\n      boolean sortQueues) {\n    if (application !\u003d null) {\n\n      boolean removed \u003d false;\n\n      // Careful! Locking order is important!\n      synchronized (this) {\n\n        Container container \u003d rmContainer.getContainer();\n\n        // Inform the application \u0026 the node\n        // Note: It\u0027s safe to assume that all state changes to RMContainer\n        // happen under scheduler\u0027s lock... \n        // So, this is, in effect, a transaction across application \u0026 node\n        if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n          removed \u003d unreserve(application, rmContainer.getReservedPriority(),\n              node, rmContainer);\n        } else {\n          removed \u003d\n              application.containerCompleted(rmContainer, containerStatus,\n                  event, node.getPartition());\n          node.releaseContainer(container);\n        }\n\n        // Book-keeping\n        if (removed) {\n          releaseResource(clusterResource, application,\n              container.getResource(), node.getLabels());\n          LOG.info(\"completedContainer\" +\n              \" container\u003d\" + container +\n              \" queue\u003d\" + this +\n              \" cluster\u003d\" + clusterResource);\n        }\n      }\n\n      if (removed) {\n        // Inform the parent queue _outside_ of the leaf-queue lock\n        getParent().completedContainer(clusterResource, application, node,\n          rmContainer, null, event, this, sortQueues);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "fdf042dfffa4d2474e3cac86cfb8fe9ee4648beb": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2920. Changed CapacityScheduler to kill containers on nodes where node labels are changed. Contributed by  Wangda Tan\n",
      "commitDate": "22/12/14 4:51 PM",
      "commitName": "fdf042dfffa4d2474e3cac86cfb8fe9ee4648beb",
      "commitAuthor": "Jian He",
      "commitDateOld": "15/10/14 6:33 PM",
      "commitNameOld": "f2ea555ac6c06a3f2f6559731f48711fff05d3f1",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 67.97,
      "commitsBetweenForRepo": 558,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,44 @@\n   public void completedContainer(Resource clusterResource, \n       FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n       ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue,\n       boolean sortQueues) {\n     if (application !\u003d null) {\n \n       boolean removed \u003d false;\n \n       // Careful! Locking order is important!\n       synchronized (this) {\n \n         Container container \u003d rmContainer.getContainer();\n \n         // Inform the application \u0026 the node\n         // Note: It\u0027s safe to assume that all state changes to RMContainer\n         // happen under scheduler\u0027s lock... \n         // So, this is, in effect, a transaction across application \u0026 node\n         if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n           removed \u003d unreserve(application, rmContainer.getReservedPriority(),\n               node, rmContainer);\n         } else {\n           removed \u003d\n             application.containerCompleted(rmContainer, containerStatus, event);\n           node.releaseContainer(container);\n         }\n \n         // Book-keeping\n         if (removed) {\n           releaseResource(clusterResource, application,\n-              container.getResource(),\n-              labelManager.getLabelsOnNode(node.getNodeID()));\n+              container.getResource(), node.getLabels());\n           LOG.info(\"completedContainer\" +\n               \" container\u003d\" + container +\n               \" queue\u003d\" + this +\n               \" cluster\u003d\" + clusterResource);\n         }\n       }\n \n       if (removed) {\n         // Inform the parent queue _outside_ of the leaf-queue lock\n         getParent().completedContainer(clusterResource, application, node,\n           rmContainer, null, event, this, sortQueues);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void completedContainer(Resource clusterResource, \n      FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n      ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue,\n      boolean sortQueues) {\n    if (application !\u003d null) {\n\n      boolean removed \u003d false;\n\n      // Careful! Locking order is important!\n      synchronized (this) {\n\n        Container container \u003d rmContainer.getContainer();\n\n        // Inform the application \u0026 the node\n        // Note: It\u0027s safe to assume that all state changes to RMContainer\n        // happen under scheduler\u0027s lock... \n        // So, this is, in effect, a transaction across application \u0026 node\n        if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n          removed \u003d unreserve(application, rmContainer.getReservedPriority(),\n              node, rmContainer);\n        } else {\n          removed \u003d\n            application.containerCompleted(rmContainer, containerStatus, event);\n          node.releaseContainer(container);\n        }\n\n        // Book-keeping\n        if (removed) {\n          releaseResource(clusterResource, application,\n              container.getResource(), node.getLabels());\n          LOG.info(\"completedContainer\" +\n              \" container\u003d\" + container +\n              \" queue\u003d\" + this +\n              \" cluster\u003d\" + clusterResource);\n        }\n      }\n\n      if (removed) {\n        // Inform the parent queue _outside_ of the leaf-queue lock\n        getParent().completedContainer(clusterResource, application, node,\n          rmContainer, null, event, this, sortQueues);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "f2ea555ac6c06a3f2f6559731f48711fff05d3f1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2496. Enhanced Capacity Scheduler to have basic support for allocating resources based on node-labels. Contributed by Wangda Tan.\nYARN-2500. Ehnaced ResourceManager to support schedulers allocating resources based on node-labels. Contributed by Wangda Tan.\n",
      "commitDate": "15/10/14 6:33 PM",
      "commitName": "f2ea555ac6c06a3f2f6559731f48711fff05d3f1",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "07/10/14 1:45 PM",
      "commitNameOld": "30d56fdbb40d06c4e267d6c314c8c767a7adc6a3",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 8.2,
      "commitsBetweenForRepo": 71,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,45 @@\n   public void completedContainer(Resource clusterResource, \n       FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n       ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue,\n       boolean sortQueues) {\n     if (application !\u003d null) {\n \n       boolean removed \u003d false;\n \n       // Careful! Locking order is important!\n       synchronized (this) {\n \n         Container container \u003d rmContainer.getContainer();\n \n         // Inform the application \u0026 the node\n         // Note: It\u0027s safe to assume that all state changes to RMContainer\n         // happen under scheduler\u0027s lock... \n         // So, this is, in effect, a transaction across application \u0026 node\n         if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n           removed \u003d unreserve(application, rmContainer.getReservedPriority(),\n               node, rmContainer);\n         } else {\n           removed \u003d\n             application.containerCompleted(rmContainer, containerStatus, event);\n           node.releaseContainer(container);\n         }\n \n         // Book-keeping\n         if (removed) {\n-          releaseResource(clusterResource,\n-              application, container.getResource());\n+          releaseResource(clusterResource, application,\n+              container.getResource(),\n+              labelManager.getLabelsOnNode(node.getNodeID()));\n           LOG.info(\"completedContainer\" +\n               \" container\u003d\" + container +\n               \" queue\u003d\" + this +\n               \" cluster\u003d\" + clusterResource);\n         }\n       }\n \n       if (removed) {\n         // Inform the parent queue _outside_ of the leaf-queue lock\n         getParent().completedContainer(clusterResource, application, node,\n           rmContainer, null, event, this, sortQueues);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void completedContainer(Resource clusterResource, \n      FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n      ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue,\n      boolean sortQueues) {\n    if (application !\u003d null) {\n\n      boolean removed \u003d false;\n\n      // Careful! Locking order is important!\n      synchronized (this) {\n\n        Container container \u003d rmContainer.getContainer();\n\n        // Inform the application \u0026 the node\n        // Note: It\u0027s safe to assume that all state changes to RMContainer\n        // happen under scheduler\u0027s lock... \n        // So, this is, in effect, a transaction across application \u0026 node\n        if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n          removed \u003d unreserve(application, rmContainer.getReservedPriority(),\n              node, rmContainer);\n        } else {\n          removed \u003d\n            application.containerCompleted(rmContainer, containerStatus, event);\n          node.releaseContainer(container);\n        }\n\n        // Book-keeping\n        if (removed) {\n          releaseResource(clusterResource, application,\n              container.getResource(),\n              labelManager.getLabelsOnNode(node.getNodeID()));\n          LOG.info(\"completedContainer\" +\n              \" container\u003d\" + container +\n              \" queue\u003d\" + this +\n              \" cluster\u003d\" + clusterResource);\n        }\n      }\n\n      if (removed) {\n        // Inform the parent queue _outside_ of the leaf-queue lock\n        getParent().completedContainer(clusterResource, application, node,\n          rmContainer, null, event, this, sortQueues);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "9c22065109a77681bc2534063eabe8692fbcb3cd": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-1769. CapacityScheduler: Improve reservations. Contributed by Thomas Graves\n",
      "commitDate": "29/09/14 7:12 AM",
      "commitName": "9c22065109a77681bc2534063eabe8692fbcb3cd",
      "commitAuthor": "Jason Lowe",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-1769. CapacityScheduler: Improve reservations. Contributed by Thomas Graves\n",
          "commitDate": "29/09/14 7:12 AM",
          "commitName": "9c22065109a77681bc2534063eabe8692fbcb3cd",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "14/08/14 11:00 PM",
          "commitNameOld": "7360cec692be5dcc3377ae5082fe22870caac96b",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 45.34,
          "commitsBetweenForRepo": 409,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,44 @@\n   public void completedContainer(Resource clusterResource, \n       FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n-      ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue) {\n+      ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue,\n+      boolean sortQueues) {\n     if (application !\u003d null) {\n \n       boolean removed \u003d false;\n \n       // Careful! Locking order is important!\n       synchronized (this) {\n \n         Container container \u003d rmContainer.getContainer();\n \n         // Inform the application \u0026 the node\n         // Note: It\u0027s safe to assume that all state changes to RMContainer\n         // happen under scheduler\u0027s lock... \n         // So, this is, in effect, a transaction across application \u0026 node\n         if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n           removed \u003d unreserve(application, rmContainer.getReservedPriority(),\n               node, rmContainer);\n         } else {\n           removed \u003d\n             application.containerCompleted(rmContainer, containerStatus, event);\n           node.releaseContainer(container);\n         }\n \n         // Book-keeping\n         if (removed) {\n           releaseResource(clusterResource,\n               application, container.getResource());\n           LOG.info(\"completedContainer\" +\n               \" container\u003d\" + container +\n               \" queue\u003d\" + this +\n               \" cluster\u003d\" + clusterResource);\n         }\n       }\n \n       if (removed) {\n         // Inform the parent queue _outside_ of the leaf-queue lock\n         getParent().completedContainer(clusterResource, application, node,\n-          rmContainer, null, event, this);\n+          rmContainer, null, event, this, sortQueues);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void completedContainer(Resource clusterResource, \n      FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n      ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue,\n      boolean sortQueues) {\n    if (application !\u003d null) {\n\n      boolean removed \u003d false;\n\n      // Careful! Locking order is important!\n      synchronized (this) {\n\n        Container container \u003d rmContainer.getContainer();\n\n        // Inform the application \u0026 the node\n        // Note: It\u0027s safe to assume that all state changes to RMContainer\n        // happen under scheduler\u0027s lock... \n        // So, this is, in effect, a transaction across application \u0026 node\n        if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n          removed \u003d unreserve(application, rmContainer.getReservedPriority(),\n              node, rmContainer);\n        } else {\n          removed \u003d\n            application.containerCompleted(rmContainer, containerStatus, event);\n          node.releaseContainer(container);\n        }\n\n        // Book-keeping\n        if (removed) {\n          releaseResource(clusterResource,\n              application, container.getResource());\n          LOG.info(\"completedContainer\" +\n              \" container\u003d\" + container +\n              \" queue\u003d\" + this +\n              \" cluster\u003d\" + clusterResource);\n        }\n      }\n\n      if (removed) {\n        // Inform the parent queue _outside_ of the leaf-queue lock\n        getParent().completedContainer(clusterResource, application, node,\n          rmContainer, null, event, this, sortQueues);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {
            "oldValue": "[clusterResource-Resource, application-FiCaSchedulerApp, node-FiCaSchedulerNode, rmContainer-RMContainer, containerStatus-ContainerStatus, event-RMContainerEventType, childQueue-CSQueue]",
            "newValue": "[clusterResource-Resource, application-FiCaSchedulerApp, node-FiCaSchedulerNode, rmContainer-RMContainer, containerStatus-ContainerStatus, event-RMContainerEventType, childQueue-CSQueue, sortQueues-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1769. CapacityScheduler: Improve reservations. Contributed by Thomas Graves\n",
          "commitDate": "29/09/14 7:12 AM",
          "commitName": "9c22065109a77681bc2534063eabe8692fbcb3cd",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "14/08/14 11:00 PM",
          "commitNameOld": "7360cec692be5dcc3377ae5082fe22870caac96b",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 45.34,
          "commitsBetweenForRepo": 409,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,44 @@\n   public void completedContainer(Resource clusterResource, \n       FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n-      ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue) {\n+      ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue,\n+      boolean sortQueues) {\n     if (application !\u003d null) {\n \n       boolean removed \u003d false;\n \n       // Careful! Locking order is important!\n       synchronized (this) {\n \n         Container container \u003d rmContainer.getContainer();\n \n         // Inform the application \u0026 the node\n         // Note: It\u0027s safe to assume that all state changes to RMContainer\n         // happen under scheduler\u0027s lock... \n         // So, this is, in effect, a transaction across application \u0026 node\n         if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n           removed \u003d unreserve(application, rmContainer.getReservedPriority(),\n               node, rmContainer);\n         } else {\n           removed \u003d\n             application.containerCompleted(rmContainer, containerStatus, event);\n           node.releaseContainer(container);\n         }\n \n         // Book-keeping\n         if (removed) {\n           releaseResource(clusterResource,\n               application, container.getResource());\n           LOG.info(\"completedContainer\" +\n               \" container\u003d\" + container +\n               \" queue\u003d\" + this +\n               \" cluster\u003d\" + clusterResource);\n         }\n       }\n \n       if (removed) {\n         // Inform the parent queue _outside_ of the leaf-queue lock\n         getParent().completedContainer(clusterResource, application, node,\n-          rmContainer, null, event, this);\n+          rmContainer, null, event, this, sortQueues);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void completedContainer(Resource clusterResource, \n      FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n      ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue,\n      boolean sortQueues) {\n    if (application !\u003d null) {\n\n      boolean removed \u003d false;\n\n      // Careful! Locking order is important!\n      synchronized (this) {\n\n        Container container \u003d rmContainer.getContainer();\n\n        // Inform the application \u0026 the node\n        // Note: It\u0027s safe to assume that all state changes to RMContainer\n        // happen under scheduler\u0027s lock... \n        // So, this is, in effect, a transaction across application \u0026 node\n        if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n          removed \u003d unreserve(application, rmContainer.getReservedPriority(),\n              node, rmContainer);\n        } else {\n          removed \u003d\n            application.containerCompleted(rmContainer, containerStatus, event);\n          node.releaseContainer(container);\n        }\n\n        // Book-keeping\n        if (removed) {\n          releaseResource(clusterResource,\n              application, container.getResource());\n          LOG.info(\"completedContainer\" +\n              \" container\u003d\" + container +\n              \" queue\u003d\" + this +\n              \" cluster\u003d\" + clusterResource);\n        }\n      }\n\n      if (removed) {\n        // Inform the parent queue _outside_ of the leaf-queue lock\n        getParent().completedContainer(clusterResource, application, node,\n          rmContainer, null, event, this, sortQueues);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "44b6261bfacddea88a3cf02d406f970bbbb98d04": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1892. Improved some logs in the scheduler. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1587717 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/04/14 1:37 PM",
      "commitName": "44b6261bfacddea88a3cf02d406f970bbbb98d04",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "12/03/14 7:36 AM",
      "commitNameOld": "4ce0e4bf2e91278bbc33f4a1c44c7929627b5d6e",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 34.25,
      "commitsBetweenForRepo": 252,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,43 @@\n   public void completedContainer(Resource clusterResource, \n       FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n       ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue) {\n     if (application !\u003d null) {\n \n       boolean removed \u003d false;\n \n       // Careful! Locking order is important!\n       synchronized (this) {\n \n         Container container \u003d rmContainer.getContainer();\n \n         // Inform the application \u0026 the node\n         // Note: It\u0027s safe to assume that all state changes to RMContainer\n         // happen under scheduler\u0027s lock... \n         // So, this is, in effect, a transaction across application \u0026 node\n         if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n           removed \u003d unreserve(application, rmContainer.getReservedPriority(),\n               node, rmContainer);\n         } else {\n           removed \u003d\n             application.containerCompleted(rmContainer, containerStatus, event);\n           node.releaseContainer(container);\n         }\n \n         // Book-keeping\n         if (removed) {\n           releaseResource(clusterResource,\n               application, container.getResource());\n           LOG.info(\"completedContainer\" +\n               \" container\u003d\" + container +\n-              \" resource\u003d\" + container.getResource() +\n               \" queue\u003d\" + this +\n-              \" usedCapacity\u003d\" + getUsedCapacity() +\n-              \" absoluteUsedCapacity\u003d\" + getAbsoluteUsedCapacity() +\n-              \" used\u003d\" + usedResources +\n               \" cluster\u003d\" + clusterResource);\n         }\n       }\n \n       if (removed) {\n         // Inform the parent queue _outside_ of the leaf-queue lock\n         getParent().completedContainer(clusterResource, application, node,\n           rmContainer, null, event, this);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void completedContainer(Resource clusterResource, \n      FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n      ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue) {\n    if (application !\u003d null) {\n\n      boolean removed \u003d false;\n\n      // Careful! Locking order is important!\n      synchronized (this) {\n\n        Container container \u003d rmContainer.getContainer();\n\n        // Inform the application \u0026 the node\n        // Note: It\u0027s safe to assume that all state changes to RMContainer\n        // happen under scheduler\u0027s lock... \n        // So, this is, in effect, a transaction across application \u0026 node\n        if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n          removed \u003d unreserve(application, rmContainer.getReservedPriority(),\n              node, rmContainer);\n        } else {\n          removed \u003d\n            application.containerCompleted(rmContainer, containerStatus, event);\n          node.releaseContainer(container);\n        }\n\n        // Book-keeping\n        if (removed) {\n          releaseResource(clusterResource,\n              application, container.getResource());\n          LOG.info(\"completedContainer\" +\n              \" container\u003d\" + container +\n              \" queue\u003d\" + this +\n              \" cluster\u003d\" + clusterResource);\n        }\n      }\n\n      if (removed) {\n        // Inform the parent queue _outside_ of the leaf-queue lock\n        getParent().completedContainer(clusterResource, application, node,\n          rmContainer, null, event, this);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "772ead791c17b0b7415cce0934366113cdbe9379": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1398. Fixed a deadlock in ResourceManager between users requesting queue-acls and completing containers. Contributed by Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1570415 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/02/14 6:20 PM",
      "commitName": "772ead791c17b0b7415cce0934366113cdbe9379",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "13/02/14 2:02 PM",
      "commitNameOld": "d0a5e43de73119e57d12f2ec89a9d1a192cde204",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 7.18,
      "commitsBetweenForRepo": 56,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,47 @@\n   public void completedContainer(Resource clusterResource, \n       FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n       ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue) {\n     if (application !\u003d null) {\n+\n+      boolean removed \u003d false;\n+\n       // Careful! Locking order is important!\n       synchronized (this) {\n \n         Container container \u003d rmContainer.getContainer();\n \n-        boolean removed \u003d false;\n         // Inform the application \u0026 the node\n         // Note: It\u0027s safe to assume that all state changes to RMContainer\n         // happen under scheduler\u0027s lock... \n         // So, this is, in effect, a transaction across application \u0026 node\n         if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n           removed \u003d unreserve(application, rmContainer.getReservedPriority(),\n               node, rmContainer);\n         } else {\n           removed \u003d\n             application.containerCompleted(rmContainer, containerStatus, event);\n           node.releaseContainer(container);\n         }\n \n         // Book-keeping\n         if (removed) {\n           releaseResource(clusterResource,\n               application, container.getResource());\n           LOG.info(\"completedContainer\" +\n               \" container\u003d\" + container +\n               \" resource\u003d\" + container.getResource() +\n               \" queue\u003d\" + this +\n               \" usedCapacity\u003d\" + getUsedCapacity() +\n               \" absoluteUsedCapacity\u003d\" + getAbsoluteUsedCapacity() +\n               \" used\u003d\" + usedResources +\n               \" cluster\u003d\" + clusterResource);\n-          // Inform the parent queue\n-          getParent().completedContainer(clusterResource, application,\n-              node, rmContainer, null, event, this);\n         }\n       }\n \n-\n+      if (removed) {\n+        // Inform the parent queue _outside_ of the leaf-queue lock\n+        getParent().completedContainer(clusterResource, application, node,\n+          rmContainer, null, event, this);\n+      }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void completedContainer(Resource clusterResource, \n      FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n      ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue) {\n    if (application !\u003d null) {\n\n      boolean removed \u003d false;\n\n      // Careful! Locking order is important!\n      synchronized (this) {\n\n        Container container \u003d rmContainer.getContainer();\n\n        // Inform the application \u0026 the node\n        // Note: It\u0027s safe to assume that all state changes to RMContainer\n        // happen under scheduler\u0027s lock... \n        // So, this is, in effect, a transaction across application \u0026 node\n        if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n          removed \u003d unreserve(application, rmContainer.getReservedPriority(),\n              node, rmContainer);\n        } else {\n          removed \u003d\n            application.containerCompleted(rmContainer, containerStatus, event);\n          node.releaseContainer(container);\n        }\n\n        // Book-keeping\n        if (removed) {\n          releaseResource(clusterResource,\n              application, container.getResource());\n          LOG.info(\"completedContainer\" +\n              \" container\u003d\" + container +\n              \" resource\u003d\" + container.getResource() +\n              \" queue\u003d\" + this +\n              \" usedCapacity\u003d\" + getUsedCapacity() +\n              \" absoluteUsedCapacity\u003d\" + getAbsoluteUsedCapacity() +\n              \" used\u003d\" + usedResources +\n              \" cluster\u003d\" + clusterResource);\n        }\n      }\n\n      if (removed) {\n        // Inform the parent queue _outside_ of the leaf-queue lock\n        getParent().completedContainer(clusterResource, application, node,\n          rmContainer, null, event, this);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "5b99672658ce24bfd1002b880583cbecfa47f9b3": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-897. Ensure child queues are ordered correctly to account for completed containers. Contributed by Djellel Eddine Difallah.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1505146 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/07/13 7:59 AM",
      "commitName": "5b99672658ce24bfd1002b880583cbecfa47f9b3",
      "commitAuthor": "Arun Murthy",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-897. Ensure child queues are ordered correctly to account for completed containers. Contributed by Djellel Eddine Difallah.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1505146 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "20/07/13 7:59 AM",
          "commitName": "5b99672658ce24bfd1002b880583cbecfa47f9b3",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "10/07/13 6:20 PM",
          "commitNameOld": "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61",
          "commitAuthorOld": "Christopher Douglas",
          "daysBetweenCommits": 9.57,
          "commitsBetweenForRepo": 65,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,44 @@\n   public void completedContainer(Resource clusterResource, \n       FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n-      ContainerStatus containerStatus, RMContainerEventType event) {\n+      ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue) {\n     if (application !\u003d null) {\n       // Careful! Locking order is important!\n       synchronized (this) {\n \n         Container container \u003d rmContainer.getContainer();\n \n         boolean removed \u003d false;\n         // Inform the application \u0026 the node\n         // Note: It\u0027s safe to assume that all state changes to RMContainer\n         // happen under scheduler\u0027s lock... \n         // So, this is, in effect, a transaction across application \u0026 node\n         if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n           removed \u003d unreserve(application, rmContainer.getReservedPriority(),\n               node, rmContainer);\n         } else {\n           removed \u003d\n             application.containerCompleted(rmContainer, containerStatus, event);\n           node.releaseContainer(container);\n         }\n \n         // Book-keeping\n         if (removed) {\n           releaseResource(clusterResource,\n               application, container.getResource());\n           LOG.info(\"completedContainer\" +\n               \" container\u003d\" + container +\n               \" resource\u003d\" + container.getResource() +\n               \" queue\u003d\" + this +\n               \" usedCapacity\u003d\" + getUsedCapacity() +\n               \" absoluteUsedCapacity\u003d\" + getAbsoluteUsedCapacity() +\n               \" used\u003d\" + usedResources +\n               \" cluster\u003d\" + clusterResource);\n           // Inform the parent queue\n           getParent().completedContainer(clusterResource, application,\n-              node, rmContainer, null, event);\n+              node, rmContainer, null, event, this);\n         }\n       }\n \n \n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void completedContainer(Resource clusterResource, \n      FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n      ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue) {\n    if (application !\u003d null) {\n      // Careful! Locking order is important!\n      synchronized (this) {\n\n        Container container \u003d rmContainer.getContainer();\n\n        boolean removed \u003d false;\n        // Inform the application \u0026 the node\n        // Note: It\u0027s safe to assume that all state changes to RMContainer\n        // happen under scheduler\u0027s lock... \n        // So, this is, in effect, a transaction across application \u0026 node\n        if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n          removed \u003d unreserve(application, rmContainer.getReservedPriority(),\n              node, rmContainer);\n        } else {\n          removed \u003d\n            application.containerCompleted(rmContainer, containerStatus, event);\n          node.releaseContainer(container);\n        }\n\n        // Book-keeping\n        if (removed) {\n          releaseResource(clusterResource,\n              application, container.getResource());\n          LOG.info(\"completedContainer\" +\n              \" container\u003d\" + container +\n              \" resource\u003d\" + container.getResource() +\n              \" queue\u003d\" + this +\n              \" usedCapacity\u003d\" + getUsedCapacity() +\n              \" absoluteUsedCapacity\u003d\" + getAbsoluteUsedCapacity() +\n              \" used\u003d\" + usedResources +\n              \" cluster\u003d\" + clusterResource);\n          // Inform the parent queue\n          getParent().completedContainer(clusterResource, application,\n              node, rmContainer, null, event, this);\n        }\n      }\n\n\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {
            "oldValue": "[clusterResource-Resource, application-FiCaSchedulerApp, node-FiCaSchedulerNode, rmContainer-RMContainer, containerStatus-ContainerStatus, event-RMContainerEventType]",
            "newValue": "[clusterResource-Resource, application-FiCaSchedulerApp, node-FiCaSchedulerNode, rmContainer-RMContainer, containerStatus-ContainerStatus, event-RMContainerEventType, childQueue-CSQueue]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-897. Ensure child queues are ordered correctly to account for completed containers. Contributed by Djellel Eddine Difallah.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1505146 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "20/07/13 7:59 AM",
          "commitName": "5b99672658ce24bfd1002b880583cbecfa47f9b3",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "10/07/13 6:20 PM",
          "commitNameOld": "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61",
          "commitAuthorOld": "Christopher Douglas",
          "daysBetweenCommits": 9.57,
          "commitsBetweenForRepo": 65,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,44 @@\n   public void completedContainer(Resource clusterResource, \n       FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n-      ContainerStatus containerStatus, RMContainerEventType event) {\n+      ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue) {\n     if (application !\u003d null) {\n       // Careful! Locking order is important!\n       synchronized (this) {\n \n         Container container \u003d rmContainer.getContainer();\n \n         boolean removed \u003d false;\n         // Inform the application \u0026 the node\n         // Note: It\u0027s safe to assume that all state changes to RMContainer\n         // happen under scheduler\u0027s lock... \n         // So, this is, in effect, a transaction across application \u0026 node\n         if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n           removed \u003d unreserve(application, rmContainer.getReservedPriority(),\n               node, rmContainer);\n         } else {\n           removed \u003d\n             application.containerCompleted(rmContainer, containerStatus, event);\n           node.releaseContainer(container);\n         }\n \n         // Book-keeping\n         if (removed) {\n           releaseResource(clusterResource,\n               application, container.getResource());\n           LOG.info(\"completedContainer\" +\n               \" container\u003d\" + container +\n               \" resource\u003d\" + container.getResource() +\n               \" queue\u003d\" + this +\n               \" usedCapacity\u003d\" + getUsedCapacity() +\n               \" absoluteUsedCapacity\u003d\" + getAbsoluteUsedCapacity() +\n               \" used\u003d\" + usedResources +\n               \" cluster\u003d\" + clusterResource);\n           // Inform the parent queue\n           getParent().completedContainer(clusterResource, application,\n-              node, rmContainer, null, event);\n+              node, rmContainer, null, event, this);\n         }\n       }\n \n \n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void completedContainer(Resource clusterResource, \n      FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n      ContainerStatus containerStatus, RMContainerEventType event, CSQueue childQueue) {\n    if (application !\u003d null) {\n      // Careful! Locking order is important!\n      synchronized (this) {\n\n        Container container \u003d rmContainer.getContainer();\n\n        boolean removed \u003d false;\n        // Inform the application \u0026 the node\n        // Note: It\u0027s safe to assume that all state changes to RMContainer\n        // happen under scheduler\u0027s lock... \n        // So, this is, in effect, a transaction across application \u0026 node\n        if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n          removed \u003d unreserve(application, rmContainer.getReservedPriority(),\n              node, rmContainer);\n        } else {\n          removed \u003d\n            application.containerCompleted(rmContainer, containerStatus, event);\n          node.releaseContainer(container);\n        }\n\n        // Book-keeping\n        if (removed) {\n          releaseResource(clusterResource,\n              application, container.getResource());\n          LOG.info(\"completedContainer\" +\n              \" container\u003d\" + container +\n              \" resource\u003d\" + container.getResource() +\n              \" queue\u003d\" + this +\n              \" usedCapacity\u003d\" + getUsedCapacity() +\n              \" absoluteUsedCapacity\u003d\" + getAbsoluteUsedCapacity() +\n              \" used\u003d\" + usedResources +\n              \" cluster\u003d\" + clusterResource);\n          // Inform the parent queue\n          getParent().completedContainer(clusterResource, application,\n              node, rmContainer, null, event, this);\n        }\n      }\n\n\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61": {
      "type": "Ybodychange",
      "commitMessage": "YARN-569. Add support for requesting and enforcing preemption requests via\na capacity monitor. Contributed by Carlo Curino, Chris Douglas\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1502083 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/07/13 6:20 PM",
      "commitName": "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61",
      "commitAuthor": "Christopher Douglas",
      "commitDateOld": "04/07/13 4:31 PM",
      "commitNameOld": "eff5d9b17e0853e82968a695b498b4be37148a05",
      "commitAuthorOld": "Bikas Saha",
      "daysBetweenCommits": 6.08,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,44 @@\n   public void completedContainer(Resource clusterResource, \n       FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n       ContainerStatus containerStatus, RMContainerEventType event) {\n     if (application !\u003d null) {\n       // Careful! Locking order is important!\n       synchronized (this) {\n \n         Container container \u003d rmContainer.getContainer();\n-        \n+\n+        boolean removed \u003d false;\n         // Inform the application \u0026 the node\n         // Note: It\u0027s safe to assume that all state changes to RMContainer\n         // happen under scheduler\u0027s lock... \n         // So, this is, in effect, a transaction across application \u0026 node\n         if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n-          unreserve(application, rmContainer.getReservedPriority(), \n+          removed \u003d unreserve(application, rmContainer.getReservedPriority(),\n               node, rmContainer);\n         } else {\n-          application.containerCompleted(rmContainer, containerStatus, event);\n+          removed \u003d\n+            application.containerCompleted(rmContainer, containerStatus, event);\n           node.releaseContainer(container);\n         }\n \n-\n         // Book-keeping\n-        releaseResource(clusterResource, \n-            application, container.getResource());\n-\n-        LOG.info(\"completedContainer\" +\n-            \" container\u003d\" + container +\n-            \" resource\u003d\" + container.getResource() +\n-        \t\t\" queue\u003d\" + this + \n-            \" usedCapacity\u003d\" + getUsedCapacity() +\n-            \" absoluteUsedCapacity\u003d\" + getAbsoluteUsedCapacity() +\n-            \" used\u003d\" + usedResources + \n-            \" cluster\u003d\" + clusterResource);\n+        if (removed) {\n+          releaseResource(clusterResource,\n+              application, container.getResource());\n+          LOG.info(\"completedContainer\" +\n+              \" container\u003d\" + container +\n+              \" resource\u003d\" + container.getResource() +\n+              \" queue\u003d\" + this +\n+              \" usedCapacity\u003d\" + getUsedCapacity() +\n+              \" absoluteUsedCapacity\u003d\" + getAbsoluteUsedCapacity() +\n+              \" used\u003d\" + usedResources +\n+              \" cluster\u003d\" + clusterResource);\n+          // Inform the parent queue\n+          getParent().completedContainer(clusterResource, application,\n+              node, rmContainer, null, event);\n+        }\n       }\n \n-      // Inform the parent queue\n-      getParent().completedContainer(clusterResource, application, \n-          node, rmContainer, null, event);\n+\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void completedContainer(Resource clusterResource, \n      FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n      ContainerStatus containerStatus, RMContainerEventType event) {\n    if (application !\u003d null) {\n      // Careful! Locking order is important!\n      synchronized (this) {\n\n        Container container \u003d rmContainer.getContainer();\n\n        boolean removed \u003d false;\n        // Inform the application \u0026 the node\n        // Note: It\u0027s safe to assume that all state changes to RMContainer\n        // happen under scheduler\u0027s lock... \n        // So, this is, in effect, a transaction across application \u0026 node\n        if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n          removed \u003d unreserve(application, rmContainer.getReservedPriority(),\n              node, rmContainer);\n        } else {\n          removed \u003d\n            application.containerCompleted(rmContainer, containerStatus, event);\n          node.releaseContainer(container);\n        }\n\n        // Book-keeping\n        if (removed) {\n          releaseResource(clusterResource,\n              application, container.getResource());\n          LOG.info(\"completedContainer\" +\n              \" container\u003d\" + container +\n              \" resource\u003d\" + container.getResource() +\n              \" queue\u003d\" + this +\n              \" usedCapacity\u003d\" + getUsedCapacity() +\n              \" absoluteUsedCapacity\u003d\" + getAbsoluteUsedCapacity() +\n              \" used\u003d\" + usedResources +\n              \" cluster\u003d\" + clusterResource);\n          // Inform the parent queue\n          getParent().completedContainer(clusterResource, application,\n              node, rmContainer, null, event);\n        }\n      }\n\n\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "cc523683cfa76c1255667a3aedc48b08e5daabc7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-177. CapacityScheduler - adding a queue while the RM is running has wacky results (acmurthy vai tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1401668 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/10/12 6:21 AM",
      "commitName": "cc523683cfa76c1255667a3aedc48b08e5daabc7",
      "commitAuthor": "Thomas Graves",
      "commitDateOld": "26/09/12 8:43 PM",
      "commitNameOld": "40062e1aaa09628c6f45d20298fd66d799fd1f3f",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 27.4,
      "commitsBetweenForRepo": 163,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n   public void completedContainer(Resource clusterResource, \n       FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n       ContainerStatus containerStatus, RMContainerEventType event) {\n     if (application !\u003d null) {\n       // Careful! Locking order is important!\n       synchronized (this) {\n \n         Container container \u003d rmContainer.getContainer();\n         \n         // Inform the application \u0026 the node\n         // Note: It\u0027s safe to assume that all state changes to RMContainer\n         // happen under scheduler\u0027s lock... \n         // So, this is, in effect, a transaction across application \u0026 node\n         if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n           unreserve(application, rmContainer.getReservedPriority(), \n               node, rmContainer);\n         } else {\n           application.containerCompleted(rmContainer, containerStatus, event);\n           node.releaseContainer(container);\n         }\n \n \n         // Book-keeping\n         releaseResource(clusterResource, \n             application, container.getResource());\n \n         LOG.info(\"completedContainer\" +\n             \" container\u003d\" + container +\n             \" resource\u003d\" + container.getResource() +\n         \t\t\" queue\u003d\" + this + \n             \" usedCapacity\u003d\" + getUsedCapacity() +\n             \" absoluteUsedCapacity\u003d\" + getAbsoluteUsedCapacity() +\n             \" used\u003d\" + usedResources + \n             \" cluster\u003d\" + clusterResource);\n       }\n \n       // Inform the parent queue\n-      parent.completedContainer(clusterResource, application, \n+      getParent().completedContainer(clusterResource, application, \n           node, rmContainer, null, event);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void completedContainer(Resource clusterResource, \n      FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n      ContainerStatus containerStatus, RMContainerEventType event) {\n    if (application !\u003d null) {\n      // Careful! Locking order is important!\n      synchronized (this) {\n\n        Container container \u003d rmContainer.getContainer();\n        \n        // Inform the application \u0026 the node\n        // Note: It\u0027s safe to assume that all state changes to RMContainer\n        // happen under scheduler\u0027s lock... \n        // So, this is, in effect, a transaction across application \u0026 node\n        if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n          unreserve(application, rmContainer.getReservedPriority(), \n              node, rmContainer);\n        } else {\n          application.containerCompleted(rmContainer, containerStatus, event);\n          node.releaseContainer(container);\n        }\n\n\n        // Book-keeping\n        releaseResource(clusterResource, \n            application, container.getResource());\n\n        LOG.info(\"completedContainer\" +\n            \" container\u003d\" + container +\n            \" resource\u003d\" + container.getResource() +\n        \t\t\" queue\u003d\" + this + \n            \" usedCapacity\u003d\" + getUsedCapacity() +\n            \" absoluteUsedCapacity\u003d\" + getAbsoluteUsedCapacity() +\n            \" used\u003d\" + usedResources + \n            \" cluster\u003d\" + clusterResource);\n      }\n\n      // Inform the parent queue\n      getParent().completedContainer(clusterResource, application, \n          node, rmContainer, null, event);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void completedContainer(Resource clusterResource, \n      FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n      ContainerStatus containerStatus, RMContainerEventType event) {\n    if (application !\u003d null) {\n      // Careful! Locking order is important!\n      synchronized (this) {\n\n        Container container \u003d rmContainer.getContainer();\n        \n        // Inform the application \u0026 the node\n        // Note: It\u0027s safe to assume that all state changes to RMContainer\n        // happen under scheduler\u0027s lock... \n        // So, this is, in effect, a transaction across application \u0026 node\n        if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n          unreserve(application, rmContainer.getReservedPriority(), \n              node, rmContainer);\n        } else {\n          application.containerCompleted(rmContainer, containerStatus, event);\n          node.releaseContainer(container);\n        }\n\n\n        // Book-keeping\n        releaseResource(clusterResource, \n            application, container.getResource());\n\n        LOG.info(\"completedContainer\" +\n            \" container\u003d\" + container +\n            \" resource\u003d\" + container.getResource() +\n        \t\t\" queue\u003d\" + this + \n            \" usedCapacity\u003d\" + getUsedCapacity() +\n            \" absoluteUsedCapacity\u003d\" + getAbsoluteUsedCapacity() +\n            \" used\u003d\" + usedResources + \n            \" cluster\u003d\" + clusterResource);\n      }\n\n      // Inform the parent queue\n      parent.completedContainer(clusterResource, application, \n          node, rmContainer, null, event);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java"
      }
    },
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": {
      "type": "Yparameterchange",
      "commitMessage": "MAPREDUCE-4440. Changed SchedulerApp and SchedulerNode to be a minimal interface to allow schedulers to maintain their own.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/12 6:43 PM",
      "commitName": "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "10/07/12 2:26 PM",
      "commitNameOld": "3bfb26ad3b5ac46f992a632541c97ca2bc897638",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 6.18,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n   public void completedContainer(Resource clusterResource, \n-      SchedulerApp application, SchedulerNode node, RMContainer rmContainer, \n+      FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n       ContainerStatus containerStatus, RMContainerEventType event) {\n     if (application !\u003d null) {\n       // Careful! Locking order is important!\n       synchronized (this) {\n \n         Container container \u003d rmContainer.getContainer();\n         \n         // Inform the application \u0026 the node\n         // Note: It\u0027s safe to assume that all state changes to RMContainer\n         // happen under scheduler\u0027s lock... \n         // So, this is, in effect, a transaction across application \u0026 node\n         if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n           unreserve(application, rmContainer.getReservedPriority(), \n               node, rmContainer);\n         } else {\n           application.containerCompleted(rmContainer, containerStatus, event);\n           node.releaseContainer(container);\n         }\n \n \n         // Book-keeping\n         releaseResource(clusterResource, \n             application, container.getResource());\n \n         LOG.info(\"completedContainer\" +\n             \" container\u003d\" + container +\n             \" resource\u003d\" + container.getResource() +\n         \t\t\" queue\u003d\" + this + \n             \" usedCapacity\u003d\" + getUsedCapacity() +\n             \" absoluteUsedCapacity\u003d\" + getAbsoluteUsedCapacity() +\n             \" used\u003d\" + usedResources + \n             \" cluster\u003d\" + clusterResource);\n       }\n \n       // Inform the parent queue\n       parent.completedContainer(clusterResource, application, \n           node, rmContainer, null, event);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void completedContainer(Resource clusterResource, \n      FiCaSchedulerApp application, FiCaSchedulerNode node, RMContainer rmContainer, \n      ContainerStatus containerStatus, RMContainerEventType event) {\n    if (application !\u003d null) {\n      // Careful! Locking order is important!\n      synchronized (this) {\n\n        Container container \u003d rmContainer.getContainer();\n        \n        // Inform the application \u0026 the node\n        // Note: It\u0027s safe to assume that all state changes to RMContainer\n        // happen under scheduler\u0027s lock... \n        // So, this is, in effect, a transaction across application \u0026 node\n        if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n          unreserve(application, rmContainer.getReservedPriority(), \n              node, rmContainer);\n        } else {\n          application.containerCompleted(rmContainer, containerStatus, event);\n          node.releaseContainer(container);\n        }\n\n\n        // Book-keeping\n        releaseResource(clusterResource, \n            application, container.getResource());\n\n        LOG.info(\"completedContainer\" +\n            \" container\u003d\" + container +\n            \" resource\u003d\" + container.getResource() +\n        \t\t\" queue\u003d\" + this + \n            \" usedCapacity\u003d\" + getUsedCapacity() +\n            \" absoluteUsedCapacity\u003d\" + getAbsoluteUsedCapacity() +\n            \" used\u003d\" + usedResources + \n            \" cluster\u003d\" + clusterResource);\n      }\n\n      // Inform the parent queue\n      parent.completedContainer(clusterResource, application, \n          node, rmContainer, null, event);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {
        "oldValue": "[clusterResource-Resource, application-SchedulerApp, node-SchedulerNode, rmContainer-RMContainer, containerStatus-ContainerStatus, event-RMContainerEventType]",
        "newValue": "[clusterResource-Resource, application-FiCaSchedulerApp, node-FiCaSchedulerNode, rmContainer-RMContainer, containerStatus-ContainerStatus, event-RMContainerEventType]"
      }
    },
    "ffdf980b2056b2a1b31ccb19746f23c31f7d08ef": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3816 capacity scheduler web ui bar graphs for used capacity wrong (tgraves via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1294808 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/02/12 12:06 PM",
      "commitName": "ffdf980b2056b2a1b31ccb19746f23c31f7d08ef",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "25/02/12 10:49 PM",
      "commitNameOld": "f3cc8911485385713395a04a5b292ae375ff83a3",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 2.55,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,41 @@\n   public void completedContainer(Resource clusterResource, \n       SchedulerApp application, SchedulerNode node, RMContainer rmContainer, \n       ContainerStatus containerStatus, RMContainerEventType event) {\n     if (application !\u003d null) {\n       // Careful! Locking order is important!\n       synchronized (this) {\n \n         Container container \u003d rmContainer.getContainer();\n         \n         // Inform the application \u0026 the node\n         // Note: It\u0027s safe to assume that all state changes to RMContainer\n         // happen under scheduler\u0027s lock... \n         // So, this is, in effect, a transaction across application \u0026 node\n         if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n           unreserve(application, rmContainer.getReservedPriority(), \n               node, rmContainer);\n         } else {\n           application.containerCompleted(rmContainer, containerStatus, event);\n           node.releaseContainer(container);\n         }\n \n \n         // Book-keeping\n         releaseResource(clusterResource, \n             application, container.getResource());\n \n         LOG.info(\"completedContainer\" +\n             \" container\u003d\" + container +\n             \" resource\u003d\" + container.getResource() +\n         \t\t\" queue\u003d\" + this + \n-            \" util\u003d\" + getUtilization() + \n+            \" usedCapacity\u003d\" + getUsedCapacity() +\n+            \" absoluteUsedCapacity\u003d\" + getAbsoluteUsedCapacity() +\n             \" used\u003d\" + usedResources + \n             \" cluster\u003d\" + clusterResource);\n       }\n \n       // Inform the parent queue\n       parent.completedContainer(clusterResource, application, \n           node, rmContainer, null, event);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void completedContainer(Resource clusterResource, \n      SchedulerApp application, SchedulerNode node, RMContainer rmContainer, \n      ContainerStatus containerStatus, RMContainerEventType event) {\n    if (application !\u003d null) {\n      // Careful! Locking order is important!\n      synchronized (this) {\n\n        Container container \u003d rmContainer.getContainer();\n        \n        // Inform the application \u0026 the node\n        // Note: It\u0027s safe to assume that all state changes to RMContainer\n        // happen under scheduler\u0027s lock... \n        // So, this is, in effect, a transaction across application \u0026 node\n        if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n          unreserve(application, rmContainer.getReservedPriority(), \n              node, rmContainer);\n        } else {\n          application.containerCompleted(rmContainer, containerStatus, event);\n          node.releaseContainer(container);\n        }\n\n\n        // Book-keeping\n        releaseResource(clusterResource, \n            application, container.getResource());\n\n        LOG.info(\"completedContainer\" +\n            \" container\u003d\" + container +\n            \" resource\u003d\" + container.getResource() +\n        \t\t\" queue\u003d\" + this + \n            \" usedCapacity\u003d\" + getUsedCapacity() +\n            \" absoluteUsedCapacity\u003d\" + getAbsoluteUsedCapacity() +\n            \" used\u003d\" + usedResources + \n            \" cluster\u003d\" + clusterResource);\n      }\n\n      // Inform the parent queue\n      parent.completedContainer(clusterResource, application, \n          node, rmContainer, null, event);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "21c9116309d8482e7e28522cd7386e65415b15e9": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3713. Fixed the way head-room is allocated to applications by CapacityScheduler so that it deducts current-usage per user and not per-application. Contributed by Arun C Murthy.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1235989 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/01/12 3:31 PM",
      "commitName": "21c9116309d8482e7e28522cd7386e65415b15e9",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "25/01/12 10:17 AM",
      "commitNameOld": "9d1621da52fd7f4ee68f80fdbf420180a42b5b1d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.22,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   public void completedContainer(Resource clusterResource, \n       SchedulerApp application, SchedulerNode node, RMContainer rmContainer, \n       ContainerStatus containerStatus, RMContainerEventType event) {\n     if (application !\u003d null) {\n       // Careful! Locking order is important!\n       synchronized (this) {\n \n         Container container \u003d rmContainer.getContainer();\n         \n         // Inform the application \u0026 the node\n         // Note: It\u0027s safe to assume that all state changes to RMContainer\n         // happen under scheduler\u0027s lock... \n         // So, this is, in effect, a transaction across application \u0026 node\n         if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n-          application.unreserve(node, rmContainer.getReservedPriority());\n-          node.unreserveResource(application);\n+          unreserve(application, rmContainer.getReservedPriority(), \n+              node, rmContainer);\n         } else {\n           application.containerCompleted(rmContainer, containerStatus, event);\n           node.releaseContainer(container);\n         }\n \n \n         // Book-keeping\n         releaseResource(clusterResource, \n             application, container.getResource());\n \n         LOG.info(\"completedContainer\" +\n             \" container\u003d\" + container +\n             \" resource\u003d\" + container.getResource() +\n         \t\t\" queue\u003d\" + this + \n             \" util\u003d\" + getUtilization() + \n             \" used\u003d\" + usedResources + \n             \" cluster\u003d\" + clusterResource);\n       }\n \n       // Inform the parent queue\n       parent.completedContainer(clusterResource, application, \n           node, rmContainer, null, event);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void completedContainer(Resource clusterResource, \n      SchedulerApp application, SchedulerNode node, RMContainer rmContainer, \n      ContainerStatus containerStatus, RMContainerEventType event) {\n    if (application !\u003d null) {\n      // Careful! Locking order is important!\n      synchronized (this) {\n\n        Container container \u003d rmContainer.getContainer();\n        \n        // Inform the application \u0026 the node\n        // Note: It\u0027s safe to assume that all state changes to RMContainer\n        // happen under scheduler\u0027s lock... \n        // So, this is, in effect, a transaction across application \u0026 node\n        if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n          unreserve(application, rmContainer.getReservedPriority(), \n              node, rmContainer);\n        } else {\n          application.containerCompleted(rmContainer, containerStatus, event);\n          node.releaseContainer(container);\n        }\n\n\n        // Book-keeping\n        releaseResource(clusterResource, \n            application, container.getResource());\n\n        LOG.info(\"completedContainer\" +\n            \" container\u003d\" + container +\n            \" resource\u003d\" + container.getResource() +\n        \t\t\" queue\u003d\" + this + \n            \" util\u003d\" + getUtilization() + \n            \" used\u003d\" + usedResources + \n            \" cluster\u003d\" + clusterResource);\n      }\n\n      // Inform the parent queue\n      parent.completedContainer(clusterResource, application, \n          node, rmContainer, null, event);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "b8102dbdf8b4dc2e99bc7c58f4085a7313830a2d": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2794. [MR-279] Incorrect metrics value for AvailableGB per queue per user. (John George via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1179936 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/10/11 10:27 PM",
      "commitName": "b8102dbdf8b4dc2e99bc7c58f4085a7313830a2d",
      "commitAuthor": "Mahadev Konar",
      "commitDateOld": "05/10/11 4:56 AM",
      "commitNameOld": "f24dcb3449c77da665058427bc7fa480cad507fc",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 1.73,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   public void completedContainer(Resource clusterResource, \n       SchedulerApp application, SchedulerNode node, RMContainer rmContainer, \n       ContainerStatus containerStatus, RMContainerEventType event) {\n     if (application !\u003d null) {\n       // Careful! Locking order is important!\n       synchronized (this) {\n \n         Container container \u003d rmContainer.getContainer();\n         \n         // Inform the application \u0026 the node\n         // Note: It\u0027s safe to assume that all state changes to RMContainer\n         // happen under scheduler\u0027s lock... \n         // So, this is, in effect, a transaction across application \u0026 node\n         if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n           application.unreserve(node, rmContainer.getReservedPriority());\n           node.unreserveResource(application);\n         } else {\n           application.containerCompleted(rmContainer, containerStatus, event);\n           node.releaseContainer(container);\n         }\n \n \n         // Book-keeping\n         releaseResource(clusterResource, \n-            application.getUser(), container.getResource());\n+            application, container.getResource());\n \n         LOG.info(\"completedContainer\" +\n             \" container\u003d\" + container +\n             \" resource\u003d\" + container.getResource() +\n         \t\t\" queue\u003d\" + this + \n             \" util\u003d\" + getUtilization() + \n             \" used\u003d\" + usedResources + \n             \" cluster\u003d\" + clusterResource);\n       }\n \n       // Inform the parent queue\n       parent.completedContainer(clusterResource, application, \n           node, rmContainer, null, event);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void completedContainer(Resource clusterResource, \n      SchedulerApp application, SchedulerNode node, RMContainer rmContainer, \n      ContainerStatus containerStatus, RMContainerEventType event) {\n    if (application !\u003d null) {\n      // Careful! Locking order is important!\n      synchronized (this) {\n\n        Container container \u003d rmContainer.getContainer();\n        \n        // Inform the application \u0026 the node\n        // Note: It\u0027s safe to assume that all state changes to RMContainer\n        // happen under scheduler\u0027s lock... \n        // So, this is, in effect, a transaction across application \u0026 node\n        if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n          application.unreserve(node, rmContainer.getReservedPriority());\n          node.unreserveResource(application);\n        } else {\n          application.containerCompleted(rmContainer, containerStatus, event);\n          node.releaseContainer(container);\n        }\n\n\n        // Book-keeping\n        releaseResource(clusterResource, \n            application, container.getResource());\n\n        LOG.info(\"completedContainer\" +\n            \" container\u003d\" + container +\n            \" resource\u003d\" + container.getResource() +\n        \t\t\" queue\u003d\" + this + \n            \" util\u003d\" + getUtilization() + \n            \" used\u003d\" + usedResources + \n            \" cluster\u003d\" + clusterResource);\n      }\n\n      // Inform the parent queue\n      parent.completedContainer(clusterResource, application, \n          node, rmContainer, null, event);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "817ead65b99f465fc2dfa18072cf23cadf5f05d0": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-2933. Change allocate call to return ContainerStatus for completed containers rather than Container.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1169484 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/09/11 10:26 AM",
      "commitName": "817ead65b99f465fc2dfa18072cf23cadf5f05d0",
      "commitAuthor": "Arun Murthy",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-2933. Change allocate call to return ContainerStatus for completed containers rather than Container.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1169484 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/09/11 10:26 AM",
          "commitName": "817ead65b99f465fc2dfa18072cf23cadf5f05d0",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "08/09/11 11:26 AM",
          "commitNameOld": "1f46b991da9b91585608a0babd3eda39485dce09",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 2.96,
          "commitsBetweenForRepo": 24,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,40 @@\n   public void completedContainer(Resource clusterResource, \n       SchedulerApp application, SchedulerNode node, RMContainer rmContainer, \n-      RMContainerEventType event) {\n+      ContainerStatus containerStatus, RMContainerEventType event) {\n     if (application !\u003d null) {\n       // Careful! Locking order is important!\n       synchronized (this) {\n \n         Container container \u003d rmContainer.getContainer();\n         \n         // Inform the application \u0026 the node\n         // Note: It\u0027s safe to assume that all state changes to RMContainer\n         // happen under scheduler\u0027s lock... \n         // So, this is, in effect, a transaction across application \u0026 node\n         if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n           application.unreserve(node, rmContainer.getReservedPriority());\n           node.unreserveResource(application);\n         } else {\n-          application.containerCompleted(rmContainer, event);\n+          application.containerCompleted(rmContainer, containerStatus, event);\n           node.releaseContainer(container);\n         }\n \n \n         // Book-keeping\n         releaseResource(clusterResource, \n             application.getUser(), container.getResource());\n \n         LOG.info(\"completedContainer\" +\n             \" container\u003d\" + container +\n             \" resource\u003d\" + container.getResource() +\n         \t\t\" queue\u003d\" + this + \n             \" util\u003d\" + getUtilization() + \n             \" used\u003d\" + usedResources + \n             \" cluster\u003d\" + clusterResource);\n       }\n \n       // Inform the parent queue\n       parent.completedContainer(clusterResource, application, \n-          node, rmContainer, event);\n+          node, rmContainer, null, event);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void completedContainer(Resource clusterResource, \n      SchedulerApp application, SchedulerNode node, RMContainer rmContainer, \n      ContainerStatus containerStatus, RMContainerEventType event) {\n    if (application !\u003d null) {\n      // Careful! Locking order is important!\n      synchronized (this) {\n\n        Container container \u003d rmContainer.getContainer();\n        \n        // Inform the application \u0026 the node\n        // Note: It\u0027s safe to assume that all state changes to RMContainer\n        // happen under scheduler\u0027s lock... \n        // So, this is, in effect, a transaction across application \u0026 node\n        if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n          application.unreserve(node, rmContainer.getReservedPriority());\n          node.unreserveResource(application);\n        } else {\n          application.containerCompleted(rmContainer, containerStatus, event);\n          node.releaseContainer(container);\n        }\n\n\n        // Book-keeping\n        releaseResource(clusterResource, \n            application.getUser(), container.getResource());\n\n        LOG.info(\"completedContainer\" +\n            \" container\u003d\" + container +\n            \" resource\u003d\" + container.getResource() +\n        \t\t\" queue\u003d\" + this + \n            \" util\u003d\" + getUtilization() + \n            \" used\u003d\" + usedResources + \n            \" cluster\u003d\" + clusterResource);\n      }\n\n      // Inform the parent queue\n      parent.completedContainer(clusterResource, application, \n          node, rmContainer, null, event);\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {
            "oldValue": "[clusterResource-Resource, application-SchedulerApp, node-SchedulerNode, rmContainer-RMContainer, event-RMContainerEventType]",
            "newValue": "[clusterResource-Resource, application-SchedulerApp, node-SchedulerNode, rmContainer-RMContainer, containerStatus-ContainerStatus, event-RMContainerEventType]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-2933. Change allocate call to return ContainerStatus for completed containers rather than Container.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1169484 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/09/11 10:26 AM",
          "commitName": "817ead65b99f465fc2dfa18072cf23cadf5f05d0",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "08/09/11 11:26 AM",
          "commitNameOld": "1f46b991da9b91585608a0babd3eda39485dce09",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 2.96,
          "commitsBetweenForRepo": 24,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,40 @@\n   public void completedContainer(Resource clusterResource, \n       SchedulerApp application, SchedulerNode node, RMContainer rmContainer, \n-      RMContainerEventType event) {\n+      ContainerStatus containerStatus, RMContainerEventType event) {\n     if (application !\u003d null) {\n       // Careful! Locking order is important!\n       synchronized (this) {\n \n         Container container \u003d rmContainer.getContainer();\n         \n         // Inform the application \u0026 the node\n         // Note: It\u0027s safe to assume that all state changes to RMContainer\n         // happen under scheduler\u0027s lock... \n         // So, this is, in effect, a transaction across application \u0026 node\n         if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n           application.unreserve(node, rmContainer.getReservedPriority());\n           node.unreserveResource(application);\n         } else {\n-          application.containerCompleted(rmContainer, event);\n+          application.containerCompleted(rmContainer, containerStatus, event);\n           node.releaseContainer(container);\n         }\n \n \n         // Book-keeping\n         releaseResource(clusterResource, \n             application.getUser(), container.getResource());\n \n         LOG.info(\"completedContainer\" +\n             \" container\u003d\" + container +\n             \" resource\u003d\" + container.getResource() +\n         \t\t\" queue\u003d\" + this + \n             \" util\u003d\" + getUtilization() + \n             \" used\u003d\" + usedResources + \n             \" cluster\u003d\" + clusterResource);\n       }\n \n       // Inform the parent queue\n       parent.completedContainer(clusterResource, application, \n-          node, rmContainer, event);\n+          node, rmContainer, null, event);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void completedContainer(Resource clusterResource, \n      SchedulerApp application, SchedulerNode node, RMContainer rmContainer, \n      ContainerStatus containerStatus, RMContainerEventType event) {\n    if (application !\u003d null) {\n      // Careful! Locking order is important!\n      synchronized (this) {\n\n        Container container \u003d rmContainer.getContainer();\n        \n        // Inform the application \u0026 the node\n        // Note: It\u0027s safe to assume that all state changes to RMContainer\n        // happen under scheduler\u0027s lock... \n        // So, this is, in effect, a transaction across application \u0026 node\n        if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n          application.unreserve(node, rmContainer.getReservedPriority());\n          node.unreserveResource(application);\n        } else {\n          application.containerCompleted(rmContainer, containerStatus, event);\n          node.releaseContainer(container);\n        }\n\n\n        // Book-keeping\n        releaseResource(clusterResource, \n            application.getUser(), container.getResource());\n\n        LOG.info(\"completedContainer\" +\n            \" container\u003d\" + container +\n            \" resource\u003d\" + container.getResource() +\n        \t\t\" queue\u003d\" + this + \n            \" util\u003d\" + getUtilization() + \n            \" used\u003d\" + usedResources + \n            \" cluster\u003d\" + clusterResource);\n      }\n\n      // Inform the parent queue\n      parent.completedContainer(clusterResource, application, \n          node, rmContainer, null, event);\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void completedContainer(Resource clusterResource, \n      SchedulerApp application, SchedulerNode node, RMContainer rmContainer, \n      RMContainerEventType event) {\n    if (application !\u003d null) {\n      // Careful! Locking order is important!\n      synchronized (this) {\n\n        Container container \u003d rmContainer.getContainer();\n        \n        // Inform the application \u0026 the node\n        // Note: It\u0027s safe to assume that all state changes to RMContainer\n        // happen under scheduler\u0027s lock... \n        // So, this is, in effect, a transaction across application \u0026 node\n        if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n          application.unreserve(node, rmContainer.getReservedPriority());\n          node.unreserveResource(application);\n        } else {\n          application.containerCompleted(rmContainer, event);\n          node.releaseContainer(container);\n        }\n\n\n        // Book-keeping\n        releaseResource(clusterResource, \n            application.getUser(), container.getResource());\n\n        LOG.info(\"completedContainer\" +\n            \" container\u003d\" + container +\n            \" resource\u003d\" + container.getResource() +\n        \t\t\" queue\u003d\" + this + \n            \" util\u003d\" + getUtilization() + \n            \" used\u003d\" + usedResources + \n            \" cluster\u003d\" + clusterResource);\n      }\n\n      // Inform the parent queue\n      parent.completedContainer(clusterResource, application, \n          node, rmContainer, event);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,40 @@\n+  public void completedContainer(Resource clusterResource, \n+      SchedulerApp application, SchedulerNode node, RMContainer rmContainer, \n+      RMContainerEventType event) {\n+    if (application !\u003d null) {\n+      // Careful! Locking order is important!\n+      synchronized (this) {\n+\n+        Container container \u003d rmContainer.getContainer();\n+        \n+        // Inform the application \u0026 the node\n+        // Note: It\u0027s safe to assume that all state changes to RMContainer\n+        // happen under scheduler\u0027s lock... \n+        // So, this is, in effect, a transaction across application \u0026 node\n+        if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n+          application.unreserve(node, rmContainer.getReservedPriority());\n+          node.unreserveResource(application);\n+        } else {\n+          application.containerCompleted(rmContainer, event);\n+          node.releaseContainer(container);\n+        }\n+\n+\n+        // Book-keeping\n+        releaseResource(clusterResource, \n+            application.getUser(), container.getResource());\n+\n+        LOG.info(\"completedContainer\" +\n+            \" container\u003d\" + container +\n+            \" resource\u003d\" + container.getResource() +\n+        \t\t\" queue\u003d\" + this + \n+            \" util\u003d\" + getUtilization() + \n+            \" used\u003d\" + usedResources + \n+            \" cluster\u003d\" + clusterResource);\n+      }\n+\n+      // Inform the parent queue\n+      parent.completedContainer(clusterResource, application, \n+          node, rmContainer, event);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void completedContainer(Resource clusterResource, \n      SchedulerApp application, SchedulerNode node, RMContainer rmContainer, \n      RMContainerEventType event) {\n    if (application !\u003d null) {\n      // Careful! Locking order is important!\n      synchronized (this) {\n\n        Container container \u003d rmContainer.getContainer();\n        \n        // Inform the application \u0026 the node\n        // Note: It\u0027s safe to assume that all state changes to RMContainer\n        // happen under scheduler\u0027s lock... \n        // So, this is, in effect, a transaction across application \u0026 node\n        if (rmContainer.getState() \u003d\u003d RMContainerState.RESERVED) {\n          application.unreserve(node, rmContainer.getReservedPriority());\n          node.unreserveResource(application);\n        } else {\n          application.containerCompleted(rmContainer, event);\n          node.releaseContainer(container);\n        }\n\n\n        // Book-keeping\n        releaseResource(clusterResource, \n            application.getUser(), container.getResource());\n\n        LOG.info(\"completedContainer\" +\n            \" container\u003d\" + container +\n            \" resource\u003d\" + container.getResource() +\n        \t\t\" queue\u003d\" + this + \n            \" util\u003d\" + getUtilization() + \n            \" used\u003d\" + usedResources + \n            \" cluster\u003d\" + clusterResource);\n      }\n\n      // Inform the parent queue\n      parent.completedContainer(clusterResource, application, \n          node, rmContainer, event);\n    }\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java"
    }
  }
}