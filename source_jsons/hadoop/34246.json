{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SharedCacheUploader.java",
  "functionName": "verifyAccess",
  "functionId": "verifyAccess",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/sharedcache/SharedCacheUploader.java",
  "functionStartLine": 209,
  "functionEndLine": 238,
  "numCommitsSeen": 5,
  "timeTaken": 1289,
  "changeHistory": [
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
    "a04143039e7fe310d807f40584633096181cfada"
  ],
  "changeHistoryShort": {
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": "Ybodychange",
    "a04143039e7fe310d807f40584633096181cfada": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1942. Deprecate toString/fromString methods from ConverterUtils and move them to records classes like ContainerId/ApplicationId, etc. (wangda)\n",
      "commitDate": "14/06/16 3:06 PM",
      "commitName": "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "19/05/15 10:50 AM",
      "commitNameOld": "470c87dbc6c24dd3b370f1ad9e7ab1f6dabd2080",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 392.18,
      "commitsBetweenForRepo": 2763,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   boolean verifyAccess() throws IOException {\n     // if it is in the public cache, it\u0027s trivially OK\n     if (resource.getVisibility() \u003d\u003d LocalResourceVisibility.PUBLIC) {\n       return true;\n     }\n \n     final Path remotePath;\n     try {\n-      remotePath \u003d ConverterUtils.getPathFromYarnURL(resource.getResource());\n+      remotePath \u003d resource.getResource().toPath();\n     } catch (URISyntaxException e) {\n       throw new IOException(\"Invalid resource\", e);\n     }\n \n     // get the file status of the HDFS file\n     FileSystem remoteFs \u003d remotePath.getFileSystem(conf);\n     FileStatus status \u003d remoteFs.getFileStatus(remotePath);\n     // check to see if the file has been modified in any way\n     if (status.getModificationTime() !\u003d resource.getTimestamp()) {\n       LOG.warn(\"The remote file \" + remotePath +\n           \" has changed since it\u0027s localized; will not consider it for upload\");\n       return false;\n     }\n \n     // check for the user ownership\n     if (status.getOwner().equals(user)) {\n       return true; // the user owns the file\n     }\n     // check if the file is publicly readable otherwise\n     return fileIsPublic(remotePath, remoteFs, status);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean verifyAccess() throws IOException {\n    // if it is in the public cache, it\u0027s trivially OK\n    if (resource.getVisibility() \u003d\u003d LocalResourceVisibility.PUBLIC) {\n      return true;\n    }\n\n    final Path remotePath;\n    try {\n      remotePath \u003d resource.getResource().toPath();\n    } catch (URISyntaxException e) {\n      throw new IOException(\"Invalid resource\", e);\n    }\n\n    // get the file status of the HDFS file\n    FileSystem remoteFs \u003d remotePath.getFileSystem(conf);\n    FileStatus status \u003d remoteFs.getFileStatus(remotePath);\n    // check to see if the file has been modified in any way\n    if (status.getModificationTime() !\u003d resource.getTimestamp()) {\n      LOG.warn(\"The remote file \" + remotePath +\n          \" has changed since it\u0027s localized; will not consider it for upload\");\n      return false;\n    }\n\n    // check for the user ownership\n    if (status.getOwner().equals(user)) {\n      return true; // the user owns the file\n    }\n    // check if the file is publicly readable otherwise\n    return fileIsPublic(remotePath, remoteFs, status);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/sharedcache/SharedCacheUploader.java",
      "extendedDetails": {}
    },
    "a04143039e7fe310d807f40584633096181cfada": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2236. [YARN-1492] Shared Cache uploader service on the Node Manager. (Chris Trezzo and Sanjin Lee via kasha)\n",
      "commitDate": "12/11/14 9:31 AM",
      "commitName": "a04143039e7fe310d807f40584633096181cfada",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,30 @@\n+  boolean verifyAccess() throws IOException {\n+    // if it is in the public cache, it\u0027s trivially OK\n+    if (resource.getVisibility() \u003d\u003d LocalResourceVisibility.PUBLIC) {\n+      return true;\n+    }\n+\n+    final Path remotePath;\n+    try {\n+      remotePath \u003d ConverterUtils.getPathFromYarnURL(resource.getResource());\n+    } catch (URISyntaxException e) {\n+      throw new IOException(\"Invalid resource\", e);\n+    }\n+\n+    // get the file status of the HDFS file\n+    FileSystem remoteFs \u003d remotePath.getFileSystem(conf);\n+    FileStatus status \u003d remoteFs.getFileStatus(remotePath);\n+    // check to see if the file has been modified in any way\n+    if (status.getModificationTime() !\u003d resource.getTimestamp()) {\n+      LOG.warn(\"The remote file \" + remotePath +\n+          \" has changed since it\u0027s localized; will not consider it for upload\");\n+      return false;\n+    }\n+\n+    // check for the user ownership\n+    if (status.getOwner().equals(user)) {\n+      return true; // the user owns the file\n+    }\n+    // check if the file is publicly readable otherwise\n+    return fileIsPublic(remotePath, remoteFs, status);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  boolean verifyAccess() throws IOException {\n    // if it is in the public cache, it\u0027s trivially OK\n    if (resource.getVisibility() \u003d\u003d LocalResourceVisibility.PUBLIC) {\n      return true;\n    }\n\n    final Path remotePath;\n    try {\n      remotePath \u003d ConverterUtils.getPathFromYarnURL(resource.getResource());\n    } catch (URISyntaxException e) {\n      throw new IOException(\"Invalid resource\", e);\n    }\n\n    // get the file status of the HDFS file\n    FileSystem remoteFs \u003d remotePath.getFileSystem(conf);\n    FileStatus status \u003d remoteFs.getFileStatus(remotePath);\n    // check to see if the file has been modified in any way\n    if (status.getModificationTime() !\u003d resource.getTimestamp()) {\n      LOG.warn(\"The remote file \" + remotePath +\n          \" has changed since it\u0027s localized; will not consider it for upload\");\n      return false;\n    }\n\n    // check for the user ownership\n    if (status.getOwner().equals(user)) {\n      return true; // the user owns the file\n    }\n    // check if the file is publicly readable otherwise\n    return fileIsPublic(remotePath, remoteFs, status);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/sharedcache/SharedCacheUploader.java"
    }
  }
}