{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HdfsKMSUtil.java",
  "functionName": "getKeyProviderUri",
  "functionId": "getKeyProviderUri___ugi-UserGroupInformation__namenodeUri-URI__keyProviderUriStr-String__conf-Configuration",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/HdfsKMSUtil.java",
  "functionStartLine": 132,
  "functionEndLine": 166,
  "numCommitsSeen": 4,
  "timeTaken": 1877,
  "changeHistory": [
    "95c94dcca71a41e56a4c2989cf2aefdaf9923e13",
    "5ec86b445cc492f52c33639efb6a09a0d2f27475",
    "404eab4dc0582e0384b93664ea6ee77ccd5eeebc"
  ],
  "changeHistoryShort": {
    "95c94dcca71a41e56a4c2989cf2aefdaf9923e13": "Ybodychange",
    "5ec86b445cc492f52c33639efb6a09a0d2f27475": "Ybodychange",
    "404eab4dc0582e0384b93664ea6ee77ccd5eeebc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "95c94dcca71a41e56a4c2989cf2aefdaf9923e13": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16350. Ability to tell HDFS client not to request KMS Information from NameNode. Ccontributed  by Greg Senia, Ajay Kumar.\n",
      "commitDate": "24/06/19 11:59 AM",
      "commitName": "95c94dcca71a41e56a4c2989cf2aefdaf9923e13",
      "commitAuthor": "Ajay Kumar",
      "commitDateOld": "12/10/18 9:35 AM",
      "commitNameOld": "5ec86b445cc492f52c33639efb6a09a0d2f27475",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 255.1,
      "commitsBetweenForRepo": 1892,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,35 @@\n   public static URI getKeyProviderUri(UserGroupInformation ugi,\n       URI namenodeUri, String keyProviderUriStr, Configuration conf)\n           throws IOException {\n     URI keyProviderUri \u003d null;\n     // Lookup the secret in credentials object for namenodeuri.\n     Credentials credentials \u003d ugi.getCredentials();\n     Text credsKey \u003d getKeyProviderMapKey(namenodeUri);\n     byte[] keyProviderUriBytes \u003d\n         credentials.getSecretKey(credsKey);\n     if(keyProviderUriBytes !\u003d null) {\n       keyProviderUri \u003d\n           URI.create(DFSUtilClient.bytes2String(keyProviderUriBytes));\n     }\n     if (keyProviderUri \u003d\u003d null) {\n-      // NN is old and doesn\u0027t report provider, so use conf.\n-      if (keyProviderUriStr \u003d\u003d null) {\n+      // Check if NN provided uri is not null and ignore property is false.\n+      if (keyProviderUriStr !\u003d null \u0026\u0026 !conf.getBoolean(\n+          DFS_CLIENT_IGNORE_NAMENODE_DEFAULT_KMS_URI,\n+          DFS_CLIENT_IGNORE_NAMENODE_DEFAULT_KMS_URI_DEFAULT)) {\n+        if (!keyProviderUriStr.isEmpty()) {\n+          keyProviderUri \u003d URI.create(keyProviderUriStr);\n+        }\n+      }\n+      // Fallback to configuration.\n+      if (keyProviderUri \u003d\u003d null) {\n+        // Either NN is old and doesn\u0027t report provider or ignore NN KMS\n+        // provider property is set to true, so use conf.\n         keyProviderUri \u003d KMSUtil.getKeyProviderUri(conf, keyProviderUriKeyName);\n-      } else if (!keyProviderUriStr.isEmpty()) {\n-        keyProviderUri \u003d URI.create(keyProviderUriStr);\n       }\n       if (keyProviderUri !\u003d null) {\n         credentials.addSecretKey(\n             credsKey, DFSUtilClient.string2Bytes(keyProviderUri.toString()));\n       }\n     }\n     return keyProviderUri;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static URI getKeyProviderUri(UserGroupInformation ugi,\n      URI namenodeUri, String keyProviderUriStr, Configuration conf)\n          throws IOException {\n    URI keyProviderUri \u003d null;\n    // Lookup the secret in credentials object for namenodeuri.\n    Credentials credentials \u003d ugi.getCredentials();\n    Text credsKey \u003d getKeyProviderMapKey(namenodeUri);\n    byte[] keyProviderUriBytes \u003d\n        credentials.getSecretKey(credsKey);\n    if(keyProviderUriBytes !\u003d null) {\n      keyProviderUri \u003d\n          URI.create(DFSUtilClient.bytes2String(keyProviderUriBytes));\n    }\n    if (keyProviderUri \u003d\u003d null) {\n      // Check if NN provided uri is not null and ignore property is false.\n      if (keyProviderUriStr !\u003d null \u0026\u0026 !conf.getBoolean(\n          DFS_CLIENT_IGNORE_NAMENODE_DEFAULT_KMS_URI,\n          DFS_CLIENT_IGNORE_NAMENODE_DEFAULT_KMS_URI_DEFAULT)) {\n        if (!keyProviderUriStr.isEmpty()) {\n          keyProviderUri \u003d URI.create(keyProviderUriStr);\n        }\n      }\n      // Fallback to configuration.\n      if (keyProviderUri \u003d\u003d null) {\n        // Either NN is old and doesn\u0027t report provider or ignore NN KMS\n        // provider property is set to true, so use conf.\n        keyProviderUri \u003d KMSUtil.getKeyProviderUri(conf, keyProviderUriKeyName);\n      }\n      if (keyProviderUri !\u003d null) {\n        credentials.addSecretKey(\n            credsKey, DFSUtilClient.string2Bytes(keyProviderUri.toString()));\n      }\n    }\n    return keyProviderUri;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/HdfsKMSUtil.java",
      "extendedDetails": {}
    },
    "5ec86b445cc492f52c33639efb6a09a0d2f27475": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14445. Use DelegationTokenIssuer to create KMS delegation tokens that can authenticate to all KMS instances.\nContributed by Daryn Sharp, Xiao Chen, Rushabh S Shah.\n",
      "commitDate": "12/10/18 9:35 AM",
      "commitName": "5ec86b445cc492f52c33639efb6a09a0d2f27475",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "29/01/18 3:23 PM",
      "commitNameOld": "fde95d463c3123b315b3d07cb5b7b7dc19f7cb73",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 255.72,
      "commitsBetweenForRepo": 2583,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,27 @@\n   public static URI getKeyProviderUri(UserGroupInformation ugi,\n       URI namenodeUri, String keyProviderUriStr, Configuration conf)\n           throws IOException {\n     URI keyProviderUri \u003d null;\n     // Lookup the secret in credentials object for namenodeuri.\n     Credentials credentials \u003d ugi.getCredentials();\n+    Text credsKey \u003d getKeyProviderMapKey(namenodeUri);\n     byte[] keyProviderUriBytes \u003d\n-        credentials.getSecretKey(getKeyProviderMapKey(namenodeUri));\n+        credentials.getSecretKey(credsKey);\n     if(keyProviderUriBytes !\u003d null) {\n       keyProviderUri \u003d\n           URI.create(DFSUtilClient.bytes2String(keyProviderUriBytes));\n-      return keyProviderUri;\n     }\n-\n-    if (keyProviderUriStr !\u003d null) {\n-      if (!keyProviderUriStr.isEmpty()) {\n+    if (keyProviderUri \u003d\u003d null) {\n+      // NN is old and doesn\u0027t report provider, so use conf.\n+      if (keyProviderUriStr \u003d\u003d null) {\n+        keyProviderUri \u003d KMSUtil.getKeyProviderUri(conf, keyProviderUriKeyName);\n+      } else if (!keyProviderUriStr.isEmpty()) {\n         keyProviderUri \u003d URI.create(keyProviderUriStr);\n       }\n-      return keyProviderUri;\n-    }\n-\n-    // Last thing is to trust its own conf to be backwards compatible.\n-    String keyProviderUriFromConf \u003d conf.getTrimmed(\n-        CommonConfigurationKeysPublic.HADOOP_SECURITY_KEY_PROVIDER_PATH);\n-    if (keyProviderUriFromConf !\u003d null \u0026\u0026 !keyProviderUriFromConf.isEmpty()) {\n-      keyProviderUri \u003d URI.create(keyProviderUriFromConf);\n+      if (keyProviderUri !\u003d null) {\n+        credentials.addSecretKey(\n+            credsKey, DFSUtilClient.string2Bytes(keyProviderUri.toString()));\n+      }\n     }\n     return keyProviderUri;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static URI getKeyProviderUri(UserGroupInformation ugi,\n      URI namenodeUri, String keyProviderUriStr, Configuration conf)\n          throws IOException {\n    URI keyProviderUri \u003d null;\n    // Lookup the secret in credentials object for namenodeuri.\n    Credentials credentials \u003d ugi.getCredentials();\n    Text credsKey \u003d getKeyProviderMapKey(namenodeUri);\n    byte[] keyProviderUriBytes \u003d\n        credentials.getSecretKey(credsKey);\n    if(keyProviderUriBytes !\u003d null) {\n      keyProviderUri \u003d\n          URI.create(DFSUtilClient.bytes2String(keyProviderUriBytes));\n    }\n    if (keyProviderUri \u003d\u003d null) {\n      // NN is old and doesn\u0027t report provider, so use conf.\n      if (keyProviderUriStr \u003d\u003d null) {\n        keyProviderUri \u003d KMSUtil.getKeyProviderUri(conf, keyProviderUriKeyName);\n      } else if (!keyProviderUriStr.isEmpty()) {\n        keyProviderUri \u003d URI.create(keyProviderUriStr);\n      }\n      if (keyProviderUri !\u003d null) {\n        credentials.addSecretKey(\n            credsKey, DFSUtilClient.string2Bytes(keyProviderUri.toString()));\n      }\n    }\n    return keyProviderUri;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/HdfsKMSUtil.java",
      "extendedDetails": {}
    },
    "404eab4dc0582e0384b93664ea6ee77ccd5eeebc": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-12396. Webhdfs file system should get delegation token from kms provider. Contributed by Rushabh S Shah.\n",
      "commitDate": "04/12/17 10:40 AM",
      "commitName": "404eab4dc0582e0384b93664ea6ee77ccd5eeebc",
      "commitAuthor": "Xiao Chen",
      "diff": "@@ -0,0 +1,29 @@\n+  public static URI getKeyProviderUri(UserGroupInformation ugi,\n+      URI namenodeUri, String keyProviderUriStr, Configuration conf)\n+          throws IOException {\n+    URI keyProviderUri \u003d null;\n+    // Lookup the secret in credentials object for namenodeuri.\n+    Credentials credentials \u003d ugi.getCredentials();\n+    byte[] keyProviderUriBytes \u003d\n+        credentials.getSecretKey(getKeyProviderMapKey(namenodeUri));\n+    if(keyProviderUriBytes !\u003d null) {\n+      keyProviderUri \u003d\n+          URI.create(DFSUtilClient.bytes2String(keyProviderUriBytes));\n+      return keyProviderUri;\n+    }\n+\n+    if (keyProviderUriStr !\u003d null) {\n+      if (!keyProviderUriStr.isEmpty()) {\n+        keyProviderUri \u003d URI.create(keyProviderUriStr);\n+      }\n+      return keyProviderUri;\n+    }\n+\n+    // Last thing is to trust its own conf to be backwards compatible.\n+    String keyProviderUriFromConf \u003d conf.getTrimmed(\n+        CommonConfigurationKeysPublic.HADOOP_SECURITY_KEY_PROVIDER_PATH);\n+    if (keyProviderUriFromConf !\u003d null \u0026\u0026 !keyProviderUriFromConf.isEmpty()) {\n+      keyProviderUri \u003d URI.create(keyProviderUriFromConf);\n+    }\n+    return keyProviderUri;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static URI getKeyProviderUri(UserGroupInformation ugi,\n      URI namenodeUri, String keyProviderUriStr, Configuration conf)\n          throws IOException {\n    URI keyProviderUri \u003d null;\n    // Lookup the secret in credentials object for namenodeuri.\n    Credentials credentials \u003d ugi.getCredentials();\n    byte[] keyProviderUriBytes \u003d\n        credentials.getSecretKey(getKeyProviderMapKey(namenodeUri));\n    if(keyProviderUriBytes !\u003d null) {\n      keyProviderUri \u003d\n          URI.create(DFSUtilClient.bytes2String(keyProviderUriBytes));\n      return keyProviderUri;\n    }\n\n    if (keyProviderUriStr !\u003d null) {\n      if (!keyProviderUriStr.isEmpty()) {\n        keyProviderUri \u003d URI.create(keyProviderUriStr);\n      }\n      return keyProviderUri;\n    }\n\n    // Last thing is to trust its own conf to be backwards compatible.\n    String keyProviderUriFromConf \u003d conf.getTrimmed(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_KEY_PROVIDER_PATH);\n    if (keyProviderUriFromConf !\u003d null \u0026\u0026 !keyProviderUriFromConf.isEmpty()) {\n      keyProviderUri \u003d URI.create(keyProviderUriFromConf);\n    }\n    return keyProviderUri;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/HdfsKMSUtil.java"
    }
  }
}