{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSLeafQueue.java",
  "functionName": "minShareStarvation",
  "functionId": "minShareStarvation",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
  "functionStartLine": 583,
  "functionEndLine": 604,
  "numCommitsSeen": 69,
  "timeTaken": 2027,
  "changeHistory": [
    "8a6bb8409c2dc695c0ffc70df0528d7f8bd5d795",
    "10468529a9b858bd945e7ecb063c9c1438efa474"
  ],
  "changeHistoryShort": {
    "8a6bb8409c2dc695c0ffc70df0528d7f8bd5d795": "Ybodychange",
    "10468529a9b858bd945e7ecb063c9c1438efa474": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8a6bb8409c2dc695c0ffc70df0528d7f8bd5d795": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6964. Fair scheduler misuses Resources operations. (Daniel Templeton and Szilard Nemeth via Haibo Chen)\n",
      "commitDate": "20/07/18 10:46 AM",
      "commitName": "8a6bb8409c2dc695c0ffc70df0528d7f8bd5d795",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "24/05/18 5:12 PM",
      "commitNameOld": "86bc6425d425913899f1d951498bd040e453b3d0",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 56.73,
      "commitsBetweenForRepo": 371,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,22 @@\n   private Resource minShareStarvation() {\n     // If demand \u003c minshare, we should use demand to determine starvation\n-    Resource desiredShare \u003d Resources.min(policy.getResourceCalculator(),\n-        scheduler.getClusterResource(), getMinShare(), getDemand());\n+    Resource starvation \u003d\n+        Resources.componentwiseMin(getMinShare(), getDemand());\n \n-    Resource starvation \u003d Resources.subtract(desiredShare, getResourceUsage());\n+    Resources.subtractFromNonNegative(starvation, getResourceUsage());\n+\n     boolean starved \u003d !Resources.isNone(starvation);\n-\n     long now \u003d scheduler.getClock().getTime();\n+\n     if (!starved) {\n       // Record that the queue is not starved\n       setLastTimeAtMinShare(now);\n     }\n \n     if (now - lastTimeAtMinShare \u003c getMinSharePreemptionTimeout()) {\n       // the queue is not starved for the preemption timeout\n       starvation \u003d Resources.clone(Resources.none());\n     }\n \n     return starvation;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Resource minShareStarvation() {\n    // If demand \u003c minshare, we should use demand to determine starvation\n    Resource starvation \u003d\n        Resources.componentwiseMin(getMinShare(), getDemand());\n\n    Resources.subtractFromNonNegative(starvation, getResourceUsage());\n\n    boolean starved \u003d !Resources.isNone(starvation);\n    long now \u003d scheduler.getClock().getTime();\n\n    if (!starved) {\n      // Record that the queue is not starved\n      setLastTimeAtMinShare(now);\n    }\n\n    if (now - lastTimeAtMinShare \u003c getMinSharePreemptionTimeout()) {\n      // the queue is not starved for the preemption timeout\n      starvation \u003d Resources.clone(Resources.none());\n    }\n\n    return starvation;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
      "extendedDetails": {}
    },
    "10468529a9b858bd945e7ecb063c9c1438efa474": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4752. Improved preemption in FairScheduler. (kasha)\n\nContains:\nYARN-5605. Preempt containers (all on one node) to meet the requirement of starved applications\nYARN-5821. Drop left-over preemption-related code and clean up method visibilities in the Schedulable hierarchy\nYARN-5783. Verify identification of starved applications.\nYARN-5819. Verify fairshare and minshare preemption\nYARN-5885. Cleanup YARN-4752 branch for merge\n\nChange-Id: Iee0962377d019dd64dc69a020725d2eaf360858c\n",
      "commitDate": "23/11/16 9:48 PM",
      "commitName": "10468529a9b858bd945e7ecb063c9c1438efa474",
      "commitAuthor": "Daniel Templeton",
      "diff": "@@ -0,0 +1,21 @@\n+  private Resource minShareStarvation() {\n+    // If demand \u003c minshare, we should use demand to determine starvation\n+    Resource desiredShare \u003d Resources.min(policy.getResourceCalculator(),\n+        scheduler.getClusterResource(), getMinShare(), getDemand());\n+\n+    Resource starvation \u003d Resources.subtract(desiredShare, getResourceUsage());\n+    boolean starved \u003d !Resources.isNone(starvation);\n+\n+    long now \u003d scheduler.getClock().getTime();\n+    if (!starved) {\n+      // Record that the queue is not starved\n+      setLastTimeAtMinShare(now);\n+    }\n+\n+    if (now - lastTimeAtMinShare \u003c getMinSharePreemptionTimeout()) {\n+      // the queue is not starved for the preemption timeout\n+      starvation \u003d Resources.clone(Resources.none());\n+    }\n+\n+    return starvation;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Resource minShareStarvation() {\n    // If demand \u003c minshare, we should use demand to determine starvation\n    Resource desiredShare \u003d Resources.min(policy.getResourceCalculator(),\n        scheduler.getClusterResource(), getMinShare(), getDemand());\n\n    Resource starvation \u003d Resources.subtract(desiredShare, getResourceUsage());\n    boolean starved \u003d !Resources.isNone(starvation);\n\n    long now \u003d scheduler.getClock().getTime();\n    if (!starved) {\n      // Record that the queue is not starved\n      setLastTimeAtMinShare(now);\n    }\n\n    if (now - lastTimeAtMinShare \u003c getMinSharePreemptionTimeout()) {\n      // the queue is not starved for the preemption timeout\n      starvation \u003d Resources.clone(Resources.none());\n    }\n\n    return starvation;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java"
    }
  }
}