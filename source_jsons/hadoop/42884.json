{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMAppImpl.java",
  "functionName": "getRMAppMetrics",
  "functionId": "getRMAppMetrics",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
  "functionStartLine": 1698,
  "functionEndLine": 1745,
  "numCommitsSeen": 170,
  "timeTaken": 5518,
  "changeHistory": [
    "6ce189c62132706d9aaee5abf020ae4dc783ba26",
    "b5b81a4f086126974c75dab9b54aea20a0c1a48f",
    "dae65f3bef8ffa34d02a37041f1dfdfeeee91845",
    "93eeb13164707d0e3556c2bf737bd2ee09a335c6",
    "83be3ad44484bf8a24cb90de4b9c26ab59d226a8",
    "c9fb040c87423acb754fb7c3605d38dcf07b22ee"
  ],
  "changeHistoryShort": {
    "6ce189c62132706d9aaee5abf020ae4dc783ba26": "Ybodychange",
    "b5b81a4f086126974c75dab9b54aea20a0c1a48f": "Ybodychange",
    "dae65f3bef8ffa34d02a37041f1dfdfeeee91845": "Ybodychange",
    "93eeb13164707d0e3556c2bf737bd2ee09a335c6": "Ybodychange",
    "83be3ad44484bf8a24cb90de4b9c26ab59d226a8": "Ybodychange",
    "c9fb040c87423acb754fb7c3605d38dcf07b22ee": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6ce189c62132706d9aaee5abf020ae4dc783ba26": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10200. Add number of containers to RMAppManager summary\n",
      "commitDate": "25/03/20 10:41 AM",
      "commitName": "6ce189c62132706d9aaee5abf020ae4dc783ba26",
      "commitAuthor": "Jonathan Hung",
      "commitDateOld": "09/09/19 12:23 AM",
      "commitNameOld": "387c332b64e4b785e383162c9d6a3613aca4ac5c",
      "commitAuthorOld": "Jonathan Hung",
      "daysBetweenCommits": 198.43,
      "commitsBetweenForRepo": 855,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,48 @@\n   public RMAppMetrics getRMAppMetrics() {\n     Resource resourcePreempted \u003d Resource.newInstance(0, 0);\n     int numAMContainerPreempted \u003d 0;\n     int numNonAMContainerPreempted \u003d 0;\n     Map\u003cString, Long\u003e resourceSecondsMap \u003d new HashMap\u003c\u003e();\n     Map\u003cString, Long\u003e preemptedSecondsMap \u003d new HashMap\u003c\u003e();\n+    int totalAllocatedContainers \u003d 0;\n     this.readLock.lock();\n     try {\n       for (RMAppAttempt attempt : attempts.values()) {\n         if (null !\u003d attempt) {\n           RMAppAttemptMetrics attemptMetrics \u003d\n               attempt.getRMAppAttemptMetrics();\n           Resources.addTo(resourcePreempted,\n               attemptMetrics.getResourcePreempted());\n           numAMContainerPreempted +\u003d attemptMetrics.getIsPreempted() ? 1 : 0;\n           numNonAMContainerPreempted +\u003d\n               attemptMetrics.getNumNonAMContainersPreempted();\n           // getAggregateAppResourceUsage() will calculate resource usage stats\n           // for both running and finished containers.\n           AggregateAppResourceUsage resUsage \u003d\n               attempt.getRMAppAttemptMetrics().getAggregateAppResourceUsage();\n           for (Map.Entry\u003cString, Long\u003e entry : resUsage\n               .getResourceUsageSecondsMap().entrySet()) {\n             long value \u003d RMServerUtils\n                 .getOrDefault(resourceSecondsMap, entry.getKey(), 0L);\n             value +\u003d entry.getValue();\n             resourceSecondsMap.put(entry.getKey(), value);\n           }\n           for (Map.Entry\u003cString, Long\u003e entry : attemptMetrics\n               .getPreemptedResourceSecondsMap().entrySet()) {\n             long value \u003d RMServerUtils\n                 .getOrDefault(preemptedSecondsMap, entry.getKey(), 0L);\n             value +\u003d entry.getValue();\n             preemptedSecondsMap.put(entry.getKey(), value);\n           }\n+          totalAllocatedContainers +\u003d\n+              attemptMetrics.getTotalAllocatedContainers();\n         }\n       }\n     } finally {\n       this.readLock.unlock();\n     }\n \n     return new RMAppMetrics(resourcePreempted, numNonAMContainerPreempted,\n-        numAMContainerPreempted, resourceSecondsMap, preemptedSecondsMap);\n+        numAMContainerPreempted, resourceSecondsMap, preemptedSecondsMap,\n+        totalAllocatedContainers);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RMAppMetrics getRMAppMetrics() {\n    Resource resourcePreempted \u003d Resource.newInstance(0, 0);\n    int numAMContainerPreempted \u003d 0;\n    int numNonAMContainerPreempted \u003d 0;\n    Map\u003cString, Long\u003e resourceSecondsMap \u003d new HashMap\u003c\u003e();\n    Map\u003cString, Long\u003e preemptedSecondsMap \u003d new HashMap\u003c\u003e();\n    int totalAllocatedContainers \u003d 0;\n    this.readLock.lock();\n    try {\n      for (RMAppAttempt attempt : attempts.values()) {\n        if (null !\u003d attempt) {\n          RMAppAttemptMetrics attemptMetrics \u003d\n              attempt.getRMAppAttemptMetrics();\n          Resources.addTo(resourcePreempted,\n              attemptMetrics.getResourcePreempted());\n          numAMContainerPreempted +\u003d attemptMetrics.getIsPreempted() ? 1 : 0;\n          numNonAMContainerPreempted +\u003d\n              attemptMetrics.getNumNonAMContainersPreempted();\n          // getAggregateAppResourceUsage() will calculate resource usage stats\n          // for both running and finished containers.\n          AggregateAppResourceUsage resUsage \u003d\n              attempt.getRMAppAttemptMetrics().getAggregateAppResourceUsage();\n          for (Map.Entry\u003cString, Long\u003e entry : resUsage\n              .getResourceUsageSecondsMap().entrySet()) {\n            long value \u003d RMServerUtils\n                .getOrDefault(resourceSecondsMap, entry.getKey(), 0L);\n            value +\u003d entry.getValue();\n            resourceSecondsMap.put(entry.getKey(), value);\n          }\n          for (Map.Entry\u003cString, Long\u003e entry : attemptMetrics\n              .getPreemptedResourceSecondsMap().entrySet()) {\n            long value \u003d RMServerUtils\n                .getOrDefault(preemptedSecondsMap, entry.getKey(), 0L);\n            value +\u003d entry.getValue();\n            preemptedSecondsMap.put(entry.getKey(), value);\n          }\n          totalAllocatedContainers +\u003d\n              attemptMetrics.getTotalAllocatedContainers();\n        }\n      }\n    } finally {\n      this.readLock.unlock();\n    }\n\n    return new RMAppMetrics(resourcePreempted, numNonAMContainerPreempted,\n        numAMContainerPreempted, resourceSecondsMap, preemptedSecondsMap,\n        totalAllocatedContainers);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
      "extendedDetails": {}
    },
    "b5b81a4f086126974c75dab9b54aea20a0c1a48f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7489. ConcurrentModificationException in RMAppImpl#getRMAppMetrics. Contributed by Tao Yang.\n",
      "commitDate": "18/11/17 5:55 AM",
      "commitName": "b5b81a4f086126974c75dab9b54aea20a0c1a48f",
      "commitAuthor": "bibinchundatt",
      "commitDateOld": "16/11/17 11:25 AM",
      "commitNameOld": "0987a7b8cbbbb2c1e4c2095821d98a7db19644df",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 1.77,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,44 @@\n   public RMAppMetrics getRMAppMetrics() {\n     Resource resourcePreempted \u003d Resource.newInstance(0, 0);\n     int numAMContainerPreempted \u003d 0;\n     int numNonAMContainerPreempted \u003d 0;\n     Map\u003cString, Long\u003e resourceSecondsMap \u003d new HashMap\u003c\u003e();\n     Map\u003cString, Long\u003e preemptedSecondsMap \u003d new HashMap\u003c\u003e();\n-\n-    for (RMAppAttempt attempt : attempts.values()) {\n-      if (null !\u003d attempt) {\n-        RMAppAttemptMetrics attemptMetrics \u003d\n-            attempt.getRMAppAttemptMetrics();\n-        Resources.addTo(resourcePreempted,\n-            attemptMetrics.getResourcePreempted());\n-        numAMContainerPreempted +\u003d attemptMetrics.getIsPreempted() ? 1 : 0;\n-        numNonAMContainerPreempted +\u003d\n-            attemptMetrics.getNumNonAMContainersPreempted();\n-        // getAggregateAppResourceUsage() will calculate resource usage stats\n-        // for both running and finished containers.\n-        AggregateAppResourceUsage resUsage \u003d\n-            attempt.getRMAppAttemptMetrics().getAggregateAppResourceUsage();\n-        for (Map.Entry\u003cString, Long\u003e entry : resUsage\n-            .getResourceUsageSecondsMap().entrySet()) {\n-          long value \u003d RMServerUtils\n-              .getOrDefault(resourceSecondsMap, entry.getKey(), 0L);\n-          value +\u003d entry.getValue();\n-          resourceSecondsMap.put(entry.getKey(), value);\n-        }\n-        for (Map.Entry\u003cString, Long\u003e entry : attemptMetrics\n-            .getPreemptedResourceSecondsMap().entrySet()) {\n-          long value \u003d RMServerUtils\n-              .getOrDefault(preemptedSecondsMap, entry.getKey(), 0L);\n-          value +\u003d entry.getValue();\n-          preemptedSecondsMap.put(entry.getKey(), value);\n+    this.readLock.lock();\n+    try {\n+      for (RMAppAttempt attempt : attempts.values()) {\n+        if (null !\u003d attempt) {\n+          RMAppAttemptMetrics attemptMetrics \u003d\n+              attempt.getRMAppAttemptMetrics();\n+          Resources.addTo(resourcePreempted,\n+              attemptMetrics.getResourcePreempted());\n+          numAMContainerPreempted +\u003d attemptMetrics.getIsPreempted() ? 1 : 0;\n+          numNonAMContainerPreempted +\u003d\n+              attemptMetrics.getNumNonAMContainersPreempted();\n+          // getAggregateAppResourceUsage() will calculate resource usage stats\n+          // for both running and finished containers.\n+          AggregateAppResourceUsage resUsage \u003d\n+              attempt.getRMAppAttemptMetrics().getAggregateAppResourceUsage();\n+          for (Map.Entry\u003cString, Long\u003e entry : resUsage\n+              .getResourceUsageSecondsMap().entrySet()) {\n+            long value \u003d RMServerUtils\n+                .getOrDefault(resourceSecondsMap, entry.getKey(), 0L);\n+            value +\u003d entry.getValue();\n+            resourceSecondsMap.put(entry.getKey(), value);\n+          }\n+          for (Map.Entry\u003cString, Long\u003e entry : attemptMetrics\n+              .getPreemptedResourceSecondsMap().entrySet()) {\n+            long value \u003d RMServerUtils\n+                .getOrDefault(preemptedSecondsMap, entry.getKey(), 0L);\n+            value +\u003d entry.getValue();\n+            preemptedSecondsMap.put(entry.getKey(), value);\n+          }\n         }\n       }\n+    } finally {\n+      this.readLock.unlock();\n     }\n \n     return new RMAppMetrics(resourcePreempted, numNonAMContainerPreempted,\n         numAMContainerPreempted, resourceSecondsMap, preemptedSecondsMap);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RMAppMetrics getRMAppMetrics() {\n    Resource resourcePreempted \u003d Resource.newInstance(0, 0);\n    int numAMContainerPreempted \u003d 0;\n    int numNonAMContainerPreempted \u003d 0;\n    Map\u003cString, Long\u003e resourceSecondsMap \u003d new HashMap\u003c\u003e();\n    Map\u003cString, Long\u003e preemptedSecondsMap \u003d new HashMap\u003c\u003e();\n    this.readLock.lock();\n    try {\n      for (RMAppAttempt attempt : attempts.values()) {\n        if (null !\u003d attempt) {\n          RMAppAttemptMetrics attemptMetrics \u003d\n              attempt.getRMAppAttemptMetrics();\n          Resources.addTo(resourcePreempted,\n              attemptMetrics.getResourcePreempted());\n          numAMContainerPreempted +\u003d attemptMetrics.getIsPreempted() ? 1 : 0;\n          numNonAMContainerPreempted +\u003d\n              attemptMetrics.getNumNonAMContainersPreempted();\n          // getAggregateAppResourceUsage() will calculate resource usage stats\n          // for both running and finished containers.\n          AggregateAppResourceUsage resUsage \u003d\n              attempt.getRMAppAttemptMetrics().getAggregateAppResourceUsage();\n          for (Map.Entry\u003cString, Long\u003e entry : resUsage\n              .getResourceUsageSecondsMap().entrySet()) {\n            long value \u003d RMServerUtils\n                .getOrDefault(resourceSecondsMap, entry.getKey(), 0L);\n            value +\u003d entry.getValue();\n            resourceSecondsMap.put(entry.getKey(), value);\n          }\n          for (Map.Entry\u003cString, Long\u003e entry : attemptMetrics\n              .getPreemptedResourceSecondsMap().entrySet()) {\n            long value \u003d RMServerUtils\n                .getOrDefault(preemptedSecondsMap, entry.getKey(), 0L);\n            value +\u003d entry.getValue();\n            preemptedSecondsMap.put(entry.getKey(), value);\n          }\n        }\n      }\n    } finally {\n      this.readLock.unlock();\n    }\n\n    return new RMAppMetrics(resourcePreempted, numNonAMContainerPreempted,\n        numAMContainerPreempted, resourceSecondsMap, preemptedSecondsMap);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
      "extendedDetails": {}
    },
    "dae65f3bef8ffa34d02a37041f1dfdfeeee91845": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6232. Update resource usage and preempted resource calculations to take into account all resource types. Contributed by Varun Vasudev.\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "dae65f3bef8ffa34d02a37041f1dfdfeeee91845",
      "commitAuthor": "Sunil G",
      "commitDateOld": "07/09/17 6:45 PM",
      "commitNameOld": "56d93d2e39ead89bb79c4f4096554820dc77e84b",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 4.61,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,40 @@\n   public RMAppMetrics getRMAppMetrics() {\n     Resource resourcePreempted \u003d Resource.newInstance(0, 0);\n     int numAMContainerPreempted \u003d 0;\n     int numNonAMContainerPreempted \u003d 0;\n-    long memorySeconds \u003d 0;\n-    long vcoreSeconds \u003d 0;\n-    long preemptedMemorySeconds \u003d 0;\n-    long preemptedVcoreSeconds \u003d 0;\n+    Map\u003cString, Long\u003e resourceSecondsMap \u003d new HashMap\u003c\u003e();\n+    Map\u003cString, Long\u003e preemptedSecondsMap \u003d new HashMap\u003c\u003e();\n+\n     for (RMAppAttempt attempt : attempts.values()) {\n       if (null !\u003d attempt) {\n         RMAppAttemptMetrics attemptMetrics \u003d\n             attempt.getRMAppAttemptMetrics();\n         Resources.addTo(resourcePreempted,\n             attemptMetrics.getResourcePreempted());\n         numAMContainerPreempted +\u003d attemptMetrics.getIsPreempted() ? 1 : 0;\n         numNonAMContainerPreempted +\u003d\n             attemptMetrics.getNumNonAMContainersPreempted();\n         // getAggregateAppResourceUsage() will calculate resource usage stats\n         // for both running and finished containers.\n         AggregateAppResourceUsage resUsage \u003d\n             attempt.getRMAppAttemptMetrics().getAggregateAppResourceUsage();\n-        memorySeconds +\u003d resUsage.getMemorySeconds();\n-        vcoreSeconds +\u003d resUsage.getVcoreSeconds();\n-        preemptedMemorySeconds +\u003d attemptMetrics.getPreemptedMemory();\n-        preemptedVcoreSeconds +\u003d attemptMetrics.getPreemptedVcore();\n+        for (Map.Entry\u003cString, Long\u003e entry : resUsage\n+            .getResourceUsageSecondsMap().entrySet()) {\n+          long value \u003d RMServerUtils\n+              .getOrDefault(resourceSecondsMap, entry.getKey(), 0L);\n+          value +\u003d entry.getValue();\n+          resourceSecondsMap.put(entry.getKey(), value);\n+        }\n+        for (Map.Entry\u003cString, Long\u003e entry : attemptMetrics\n+            .getPreemptedResourceSecondsMap().entrySet()) {\n+          long value \u003d RMServerUtils\n+              .getOrDefault(preemptedSecondsMap, entry.getKey(), 0L);\n+          value +\u003d entry.getValue();\n+          preemptedSecondsMap.put(entry.getKey(), value);\n+        }\n       }\n     }\n \n-    return new RMAppMetrics(resourcePreempted,\n-        numNonAMContainerPreempted, numAMContainerPreempted,\n-        memorySeconds, vcoreSeconds,\n-        preemptedMemorySeconds, preemptedVcoreSeconds);\n+    return new RMAppMetrics(resourcePreempted, numNonAMContainerPreempted,\n+        numAMContainerPreempted, resourceSecondsMap, preemptedSecondsMap);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RMAppMetrics getRMAppMetrics() {\n    Resource resourcePreempted \u003d Resource.newInstance(0, 0);\n    int numAMContainerPreempted \u003d 0;\n    int numNonAMContainerPreempted \u003d 0;\n    Map\u003cString, Long\u003e resourceSecondsMap \u003d new HashMap\u003c\u003e();\n    Map\u003cString, Long\u003e preemptedSecondsMap \u003d new HashMap\u003c\u003e();\n\n    for (RMAppAttempt attempt : attempts.values()) {\n      if (null !\u003d attempt) {\n        RMAppAttemptMetrics attemptMetrics \u003d\n            attempt.getRMAppAttemptMetrics();\n        Resources.addTo(resourcePreempted,\n            attemptMetrics.getResourcePreempted());\n        numAMContainerPreempted +\u003d attemptMetrics.getIsPreempted() ? 1 : 0;\n        numNonAMContainerPreempted +\u003d\n            attemptMetrics.getNumNonAMContainersPreempted();\n        // getAggregateAppResourceUsage() will calculate resource usage stats\n        // for both running and finished containers.\n        AggregateAppResourceUsage resUsage \u003d\n            attempt.getRMAppAttemptMetrics().getAggregateAppResourceUsage();\n        for (Map.Entry\u003cString, Long\u003e entry : resUsage\n            .getResourceUsageSecondsMap().entrySet()) {\n          long value \u003d RMServerUtils\n              .getOrDefault(resourceSecondsMap, entry.getKey(), 0L);\n          value +\u003d entry.getValue();\n          resourceSecondsMap.put(entry.getKey(), value);\n        }\n        for (Map.Entry\u003cString, Long\u003e entry : attemptMetrics\n            .getPreemptedResourceSecondsMap().entrySet()) {\n          long value \u003d RMServerUtils\n              .getOrDefault(preemptedSecondsMap, entry.getKey(), 0L);\n          value +\u003d entry.getValue();\n          preemptedSecondsMap.put(entry.getKey(), value);\n        }\n      }\n    }\n\n    return new RMAppMetrics(resourcePreempted, numNonAMContainerPreempted,\n        numAMContainerPreempted, resourceSecondsMap, preemptedSecondsMap);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
      "extendedDetails": {}
    },
    "93eeb13164707d0e3556c2bf737bd2ee09a335c6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4218. Metric for resource*time that was preempted. Contributed by Chang Li.\n",
      "commitDate": "10/11/16 2:35 PM",
      "commitName": "93eeb13164707d0e3556c2bf737bd2ee09a335c6",
      "commitAuthor": "Eric Payne",
      "commitDateOld": "09/11/16 4:08 PM",
      "commitNameOld": "bcc15c6290b3912a054323695a6a931b0de163bd",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.94,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,33 @@\n   public RMAppMetrics getRMAppMetrics() {\n     Resource resourcePreempted \u003d Resource.newInstance(0, 0);\n     int numAMContainerPreempted \u003d 0;\n     int numNonAMContainerPreempted \u003d 0;\n     long memorySeconds \u003d 0;\n     long vcoreSeconds \u003d 0;\n+    long preemptedMemorySeconds \u003d 0;\n+    long preemptedVcoreSeconds \u003d 0;\n     for (RMAppAttempt attempt : attempts.values()) {\n       if (null !\u003d attempt) {\n         RMAppAttemptMetrics attemptMetrics \u003d\n             attempt.getRMAppAttemptMetrics();\n         Resources.addTo(resourcePreempted,\n             attemptMetrics.getResourcePreempted());\n         numAMContainerPreempted +\u003d attemptMetrics.getIsPreempted() ? 1 : 0;\n         numNonAMContainerPreempted +\u003d\n             attemptMetrics.getNumNonAMContainersPreempted();\n         // getAggregateAppResourceUsage() will calculate resource usage stats\n         // for both running and finished containers.\n         AggregateAppResourceUsage resUsage \u003d\n             attempt.getRMAppAttemptMetrics().getAggregateAppResourceUsage();\n         memorySeconds +\u003d resUsage.getMemorySeconds();\n         vcoreSeconds +\u003d resUsage.getVcoreSeconds();\n+        preemptedMemorySeconds +\u003d attemptMetrics.getPreemptedMemory();\n+        preemptedVcoreSeconds +\u003d attemptMetrics.getPreemptedVcore();\n       }\n     }\n \n     return new RMAppMetrics(resourcePreempted,\n         numNonAMContainerPreempted, numAMContainerPreempted,\n-        memorySeconds, vcoreSeconds);\n+        memorySeconds, vcoreSeconds,\n+        preemptedMemorySeconds, preemptedVcoreSeconds);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RMAppMetrics getRMAppMetrics() {\n    Resource resourcePreempted \u003d Resource.newInstance(0, 0);\n    int numAMContainerPreempted \u003d 0;\n    int numNonAMContainerPreempted \u003d 0;\n    long memorySeconds \u003d 0;\n    long vcoreSeconds \u003d 0;\n    long preemptedMemorySeconds \u003d 0;\n    long preemptedVcoreSeconds \u003d 0;\n    for (RMAppAttempt attempt : attempts.values()) {\n      if (null !\u003d attempt) {\n        RMAppAttemptMetrics attemptMetrics \u003d\n            attempt.getRMAppAttemptMetrics();\n        Resources.addTo(resourcePreempted,\n            attemptMetrics.getResourcePreempted());\n        numAMContainerPreempted +\u003d attemptMetrics.getIsPreempted() ? 1 : 0;\n        numNonAMContainerPreempted +\u003d\n            attemptMetrics.getNumNonAMContainersPreempted();\n        // getAggregateAppResourceUsage() will calculate resource usage stats\n        // for both running and finished containers.\n        AggregateAppResourceUsage resUsage \u003d\n            attempt.getRMAppAttemptMetrics().getAggregateAppResourceUsage();\n        memorySeconds +\u003d resUsage.getMemorySeconds();\n        vcoreSeconds +\u003d resUsage.getVcoreSeconds();\n        preemptedMemorySeconds +\u003d attemptMetrics.getPreemptedMemory();\n        preemptedVcoreSeconds +\u003d attemptMetrics.getPreemptedVcore();\n      }\n    }\n\n    return new RMAppMetrics(resourcePreempted,\n        numNonAMContainerPreempted, numAMContainerPreempted,\n        memorySeconds, vcoreSeconds,\n        preemptedMemorySeconds, preemptedVcoreSeconds);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
      "extendedDetails": {}
    },
    "83be3ad44484bf8a24cb90de4b9c26ab59d226a8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-415. Capture aggregate memory allocation at the app-level for chargeback. Contributed by Eric Payne \u0026 Andrey Klochkov\n",
      "commitDate": "10/09/14 6:20 PM",
      "commitName": "83be3ad44484bf8a24cb90de4b9c26ab59d226a8",
      "commitAuthor": "Jian He",
      "commitDateOld": "10/09/14 11:44 AM",
      "commitNameOld": "47bdfa044aa1d587b24edae8b1b0c796d829c960",
      "commitAuthorOld": "XUAN",
      "daysBetweenCommits": 0.28,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,28 @@\n   public RMAppMetrics getRMAppMetrics() {\n     Resource resourcePreempted \u003d Resource.newInstance(0, 0);\n     int numAMContainerPreempted \u003d 0;\n     int numNonAMContainerPreempted \u003d 0;\n+    long memorySeconds \u003d 0;\n+    long vcoreSeconds \u003d 0;\n     for (RMAppAttempt attempt : attempts.values()) {\n       if (null !\u003d attempt) {\n         RMAppAttemptMetrics attemptMetrics \u003d\n             attempt.getRMAppAttemptMetrics();\n         Resources.addTo(resourcePreempted,\n             attemptMetrics.getResourcePreempted());\n         numAMContainerPreempted +\u003d attemptMetrics.getIsPreempted() ? 1 : 0;\n         numNonAMContainerPreempted +\u003d\n             attemptMetrics.getNumNonAMContainersPreempted();\n+        // getAggregateAppResourceUsage() will calculate resource usage stats\n+        // for both running and finished containers.\n+        AggregateAppResourceUsage resUsage \u003d\n+            attempt.getRMAppAttemptMetrics().getAggregateAppResourceUsage();\n+        memorySeconds +\u003d resUsage.getMemorySeconds();\n+        vcoreSeconds +\u003d resUsage.getVcoreSeconds();\n       }\n     }\n \n     return new RMAppMetrics(resourcePreempted,\n-        numNonAMContainerPreempted, numAMContainerPreempted);\n+        numNonAMContainerPreempted, numAMContainerPreempted,\n+        memorySeconds, vcoreSeconds);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RMAppMetrics getRMAppMetrics() {\n    Resource resourcePreempted \u003d Resource.newInstance(0, 0);\n    int numAMContainerPreempted \u003d 0;\n    int numNonAMContainerPreempted \u003d 0;\n    long memorySeconds \u003d 0;\n    long vcoreSeconds \u003d 0;\n    for (RMAppAttempt attempt : attempts.values()) {\n      if (null !\u003d attempt) {\n        RMAppAttemptMetrics attemptMetrics \u003d\n            attempt.getRMAppAttemptMetrics();\n        Resources.addTo(resourcePreempted,\n            attemptMetrics.getResourcePreempted());\n        numAMContainerPreempted +\u003d attemptMetrics.getIsPreempted() ? 1 : 0;\n        numNonAMContainerPreempted +\u003d\n            attemptMetrics.getNumNonAMContainersPreempted();\n        // getAggregateAppResourceUsage() will calculate resource usage stats\n        // for both running and finished containers.\n        AggregateAppResourceUsage resUsage \u003d\n            attempt.getRMAppAttemptMetrics().getAggregateAppResourceUsage();\n        memorySeconds +\u003d resUsage.getMemorySeconds();\n        vcoreSeconds +\u003d resUsage.getVcoreSeconds();\n      }\n    }\n\n    return new RMAppMetrics(resourcePreempted,\n        numNonAMContainerPreempted, numAMContainerPreempted,\n        memorySeconds, vcoreSeconds);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
      "extendedDetails": {}
    },
    "c9fb040c87423acb754fb7c3605d38dcf07b22ee": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2181. Added preemption info to logs and RM web UI. Contributed by Wangda Tan\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1609561 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/07/14 1:03 PM",
      "commitName": "c9fb040c87423acb754fb7c3605d38dcf07b22ee",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,19 @@\n+  public RMAppMetrics getRMAppMetrics() {\n+    Resource resourcePreempted \u003d Resource.newInstance(0, 0);\n+    int numAMContainerPreempted \u003d 0;\n+    int numNonAMContainerPreempted \u003d 0;\n+    for (RMAppAttempt attempt : attempts.values()) {\n+      if (null !\u003d attempt) {\n+        RMAppAttemptMetrics attemptMetrics \u003d\n+            attempt.getRMAppAttemptMetrics();\n+        Resources.addTo(resourcePreempted,\n+            attemptMetrics.getResourcePreempted());\n+        numAMContainerPreempted +\u003d attemptMetrics.getIsPreempted() ? 1 : 0;\n+        numNonAMContainerPreempted +\u003d\n+            attemptMetrics.getNumNonAMContainersPreempted();\n+      }\n+    }\n+\n+    return new RMAppMetrics(resourcePreempted,\n+        numNonAMContainerPreempted, numAMContainerPreempted);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public RMAppMetrics getRMAppMetrics() {\n    Resource resourcePreempted \u003d Resource.newInstance(0, 0);\n    int numAMContainerPreempted \u003d 0;\n    int numNonAMContainerPreempted \u003d 0;\n    for (RMAppAttempt attempt : attempts.values()) {\n      if (null !\u003d attempt) {\n        RMAppAttemptMetrics attemptMetrics \u003d\n            attempt.getRMAppAttemptMetrics();\n        Resources.addTo(resourcePreempted,\n            attemptMetrics.getResourcePreempted());\n        numAMContainerPreempted +\u003d attemptMetrics.getIsPreempted() ? 1 : 0;\n        numNonAMContainerPreempted +\u003d\n            attemptMetrics.getNumNonAMContainersPreempted();\n      }\n    }\n\n    return new RMAppMetrics(resourcePreempted,\n        numNonAMContainerPreempted, numAMContainerPreempted);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java"
    }
  }
}