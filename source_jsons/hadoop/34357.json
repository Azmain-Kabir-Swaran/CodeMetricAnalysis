{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LocalResourcesTrackerImpl.java",
  "functionName": "handle",
  "functionId": "handle___event-ResourceEvent",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/LocalResourcesTrackerImpl.java",
  "functionStartLine": 133,
  "functionEndLine": 215,
  "numCommitsSeen": 23,
  "timeTaken": 7868,
  "changeHistory": [
    "855d52927b6115e2cfbd97a94d6c1a3ddf0e94bb",
    "e2267de2076245bd9857f6a30e3c731df017fef8",
    "66598697a6e777615334ebde5ba7738135da83ae",
    "4234bc87b3e0bf7e9716d6ca1873b8bb0239472e",
    "e67e3ff05db26437b1d7c6d3dd958362fb8425db",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "e217a05255497fcf243ad7b379553db7fd0a2493",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "855d52927b6115e2cfbd97a94d6c1a3ddf0e94bb": "Ybodychange",
    "e2267de2076245bd9857f6a30e3c731df017fef8": "Ybodychange",
    "66598697a6e777615334ebde5ba7738135da83ae": "Ybodychange",
    "4234bc87b3e0bf7e9716d6ca1873b8bb0239472e": "Ymultichange(Ymodifierchange,Ybodychange)",
    "e67e3ff05db26437b1d7c6d3dd958362fb8425db": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "e217a05255497fcf243ad7b379553db7fd0a2493": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "855d52927b6115e2cfbd97a94d6c1a3ddf0e94bb": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4354. Public resource localization fails with NPE. Contributed by Jason Lowe.\n",
      "commitDate": "15/11/15 4:43 AM",
      "commitName": "855d52927b6115e2cfbd97a94d6c1a3ddf0e94bb",
      "commitAuthor": "Junping Du",
      "commitDateOld": "29/10/15 9:34 AM",
      "commitNameOld": "e2267de2076245bd9857f6a30e3c731df017fef8",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 16.84,
      "commitsBetweenForRepo": 108,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,75 +1,83 @@\n   public synchronized void handle(ResourceEvent event) {\n     LocalResourceRequest req \u003d event.getLocalResourceRequest();\n     LocalizedResource rsrc \u003d localrsrc.get(req);\n     switch (event.getType()) {\n     case LOCALIZED:\n       if (useLocalCacheDirectoryManager) {\n         inProgressLocalResourcesMap.remove(req);\n       }\n       break;\n     case REQUEST:\n       if (rsrc !\u003d null \u0026\u0026 (!isResourcePresent(rsrc))) {\n         LOG.info(\"Resource \" + rsrc.getLocalPath()\n             + \" is missing, localizing it again\");\n         removeResource(req);\n         rsrc \u003d null;\n       }\n       if (null \u003d\u003d rsrc) {\n         rsrc \u003d new LocalizedResource(req, dispatcher);\n         localrsrc.put(req, rsrc);\n       }\n       break;\n     case RELEASE:\n       if (null \u003d\u003d rsrc) {\n         // The container sent a release event on a resource which \n         // 1) Failed\n         // 2) Removed for some reason (ex. disk is no longer accessible)\n         ResourceReleaseEvent relEvent \u003d (ResourceReleaseEvent) event;\n         LOG.info(\"Container \" + relEvent.getContainer()\n             + \" sent RELEASE event on a resource request \" + req\n             + \" not present in cache.\");\n         return;\n       }\n       break;\n     case LOCALIZATION_FAILED:\n       /*\n        * If resource localization fails then Localized resource will be\n        * removed from local cache.\n        */\n       removeResource(req);\n       break;\n     case RECOVERED:\n       if (rsrc !\u003d null) {\n         LOG.warn(\"Ignoring attempt to recover existing resource \" + rsrc);\n         return;\n       }\n       rsrc \u003d recoverResource(req, (ResourceRecoveredEvent) event);\n       localrsrc.put(req, rsrc);\n       break;\n     }\n \n+    if (rsrc \u003d\u003d null) {\n+      LOG.warn(\"Received \" + event.getType() + \" event for request \" + req\n+          + \" but localized resource is missing\");\n+      return;\n+    }\n     rsrc.handle(event);\n \n     // Remove the resource if its downloading and its reference count has\n     // become 0 after RELEASE. This maybe because a container was killed while\n     // localizing and no other container is referring to the resource.\n+    // NOTE: This should NOT be done for public resources since the\n+    //       download is not associated with a container-specific localizer.\n     if (event.getType() \u003d\u003d ResourceEventType.RELEASE) {\n       if (rsrc.getState() \u003d\u003d ResourceState.DOWNLOADING \u0026\u0026\n-          rsrc.getRefCount() \u003c\u003d 0) {\n+          rsrc.getRefCount() \u003c\u003d 0 \u0026\u0026\n+          rsrc.getRequest().getVisibility() !\u003d LocalResourceVisibility.PUBLIC) {\n         removeResource(req);\n       }\n     }\n \n     if (event.getType() \u003d\u003d ResourceEventType.LOCALIZED) {\n       if (rsrc.getLocalPath() !\u003d null) {\n         try {\n           stateStore.finishResourceLocalization(user, appId,\n               buildLocalizedResourceProto(rsrc));\n         } catch (IOException ioe) {\n           LOG.error(\"Error storing resource state for \" + rsrc, ioe);\n         }\n       } else {\n         LOG.warn(\"Resource \" + rsrc + \" localized without a location\");\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void handle(ResourceEvent event) {\n    LocalResourceRequest req \u003d event.getLocalResourceRequest();\n    LocalizedResource rsrc \u003d localrsrc.get(req);\n    switch (event.getType()) {\n    case LOCALIZED:\n      if (useLocalCacheDirectoryManager) {\n        inProgressLocalResourcesMap.remove(req);\n      }\n      break;\n    case REQUEST:\n      if (rsrc !\u003d null \u0026\u0026 (!isResourcePresent(rsrc))) {\n        LOG.info(\"Resource \" + rsrc.getLocalPath()\n            + \" is missing, localizing it again\");\n        removeResource(req);\n        rsrc \u003d null;\n      }\n      if (null \u003d\u003d rsrc) {\n        rsrc \u003d new LocalizedResource(req, dispatcher);\n        localrsrc.put(req, rsrc);\n      }\n      break;\n    case RELEASE:\n      if (null \u003d\u003d rsrc) {\n        // The container sent a release event on a resource which \n        // 1) Failed\n        // 2) Removed for some reason (ex. disk is no longer accessible)\n        ResourceReleaseEvent relEvent \u003d (ResourceReleaseEvent) event;\n        LOG.info(\"Container \" + relEvent.getContainer()\n            + \" sent RELEASE event on a resource request \" + req\n            + \" not present in cache.\");\n        return;\n      }\n      break;\n    case LOCALIZATION_FAILED:\n      /*\n       * If resource localization fails then Localized resource will be\n       * removed from local cache.\n       */\n      removeResource(req);\n      break;\n    case RECOVERED:\n      if (rsrc !\u003d null) {\n        LOG.warn(\"Ignoring attempt to recover existing resource \" + rsrc);\n        return;\n      }\n      rsrc \u003d recoverResource(req, (ResourceRecoveredEvent) event);\n      localrsrc.put(req, rsrc);\n      break;\n    }\n\n    if (rsrc \u003d\u003d null) {\n      LOG.warn(\"Received \" + event.getType() + \" event for request \" + req\n          + \" but localized resource is missing\");\n      return;\n    }\n    rsrc.handle(event);\n\n    // Remove the resource if its downloading and its reference count has\n    // become 0 after RELEASE. This maybe because a container was killed while\n    // localizing and no other container is referring to the resource.\n    // NOTE: This should NOT be done for public resources since the\n    //       download is not associated with a container-specific localizer.\n    if (event.getType() \u003d\u003d ResourceEventType.RELEASE) {\n      if (rsrc.getState() \u003d\u003d ResourceState.DOWNLOADING \u0026\u0026\n          rsrc.getRefCount() \u003c\u003d 0 \u0026\u0026\n          rsrc.getRequest().getVisibility() !\u003d LocalResourceVisibility.PUBLIC) {\n        removeResource(req);\n      }\n    }\n\n    if (event.getType() \u003d\u003d ResourceEventType.LOCALIZED) {\n      if (rsrc.getLocalPath() !\u003d null) {\n        try {\n          stateStore.finishResourceLocalization(user, appId,\n              buildLocalizedResourceProto(rsrc));\n        } catch (IOException ioe) {\n          LOG.error(\"Error storing resource state for \" + rsrc, ioe);\n        }\n      } else {\n        LOG.warn(\"Resource \" + rsrc + \" localized without a location\");\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/LocalResourcesTrackerImpl.java",
      "extendedDetails": {}
    },
    "e2267de2076245bd9857f6a30e3c731df017fef8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2902. Killing a container that is localizing can orphan resources in the DOWNLOADING state. Contributed by Varun Saxena\n",
      "commitDate": "29/10/15 9:34 AM",
      "commitName": "e2267de2076245bd9857f6a30e3c731df017fef8",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "30/09/15 7:59 AM",
      "commitNameOld": "854d25b0c30fd40f640c052e79a8747741492042",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 29.07,
      "commitsBetweenForRepo": 244,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,75 @@\n   public synchronized void handle(ResourceEvent event) {\n     LocalResourceRequest req \u003d event.getLocalResourceRequest();\n     LocalizedResource rsrc \u003d localrsrc.get(req);\n     switch (event.getType()) {\n     case LOCALIZED:\n       if (useLocalCacheDirectoryManager) {\n         inProgressLocalResourcesMap.remove(req);\n       }\n       break;\n     case REQUEST:\n       if (rsrc !\u003d null \u0026\u0026 (!isResourcePresent(rsrc))) {\n         LOG.info(\"Resource \" + rsrc.getLocalPath()\n             + \" is missing, localizing it again\");\n         removeResource(req);\n         rsrc \u003d null;\n       }\n       if (null \u003d\u003d rsrc) {\n         rsrc \u003d new LocalizedResource(req, dispatcher);\n         localrsrc.put(req, rsrc);\n       }\n       break;\n     case RELEASE:\n       if (null \u003d\u003d rsrc) {\n         // The container sent a release event on a resource which \n         // 1) Failed\n         // 2) Removed for some reason (ex. disk is no longer accessible)\n         ResourceReleaseEvent relEvent \u003d (ResourceReleaseEvent) event;\n         LOG.info(\"Container \" + relEvent.getContainer()\n             + \" sent RELEASE event on a resource request \" + req\n             + \" not present in cache.\");\n         return;\n       }\n       break;\n     case LOCALIZATION_FAILED:\n       /*\n        * If resource localization fails then Localized resource will be\n        * removed from local cache.\n        */\n       removeResource(req);\n       break;\n     case RECOVERED:\n       if (rsrc !\u003d null) {\n         LOG.warn(\"Ignoring attempt to recover existing resource \" + rsrc);\n         return;\n       }\n       rsrc \u003d recoverResource(req, (ResourceRecoveredEvent) event);\n       localrsrc.put(req, rsrc);\n       break;\n     }\n \n     rsrc.handle(event);\n \n+    // Remove the resource if its downloading and its reference count has\n+    // become 0 after RELEASE. This maybe because a container was killed while\n+    // localizing and no other container is referring to the resource.\n+    if (event.getType() \u003d\u003d ResourceEventType.RELEASE) {\n+      if (rsrc.getState() \u003d\u003d ResourceState.DOWNLOADING \u0026\u0026\n+          rsrc.getRefCount() \u003c\u003d 0) {\n+        removeResource(req);\n+      }\n+    }\n+\n     if (event.getType() \u003d\u003d ResourceEventType.LOCALIZED) {\n       if (rsrc.getLocalPath() !\u003d null) {\n         try {\n           stateStore.finishResourceLocalization(user, appId,\n               buildLocalizedResourceProto(rsrc));\n         } catch (IOException ioe) {\n           LOG.error(\"Error storing resource state for \" + rsrc, ioe);\n         }\n       } else {\n         LOG.warn(\"Resource \" + rsrc + \" localized without a location\");\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void handle(ResourceEvent event) {\n    LocalResourceRequest req \u003d event.getLocalResourceRequest();\n    LocalizedResource rsrc \u003d localrsrc.get(req);\n    switch (event.getType()) {\n    case LOCALIZED:\n      if (useLocalCacheDirectoryManager) {\n        inProgressLocalResourcesMap.remove(req);\n      }\n      break;\n    case REQUEST:\n      if (rsrc !\u003d null \u0026\u0026 (!isResourcePresent(rsrc))) {\n        LOG.info(\"Resource \" + rsrc.getLocalPath()\n            + \" is missing, localizing it again\");\n        removeResource(req);\n        rsrc \u003d null;\n      }\n      if (null \u003d\u003d rsrc) {\n        rsrc \u003d new LocalizedResource(req, dispatcher);\n        localrsrc.put(req, rsrc);\n      }\n      break;\n    case RELEASE:\n      if (null \u003d\u003d rsrc) {\n        // The container sent a release event on a resource which \n        // 1) Failed\n        // 2) Removed for some reason (ex. disk is no longer accessible)\n        ResourceReleaseEvent relEvent \u003d (ResourceReleaseEvent) event;\n        LOG.info(\"Container \" + relEvent.getContainer()\n            + \" sent RELEASE event on a resource request \" + req\n            + \" not present in cache.\");\n        return;\n      }\n      break;\n    case LOCALIZATION_FAILED:\n      /*\n       * If resource localization fails then Localized resource will be\n       * removed from local cache.\n       */\n      removeResource(req);\n      break;\n    case RECOVERED:\n      if (rsrc !\u003d null) {\n        LOG.warn(\"Ignoring attempt to recover existing resource \" + rsrc);\n        return;\n      }\n      rsrc \u003d recoverResource(req, (ResourceRecoveredEvent) event);\n      localrsrc.put(req, rsrc);\n      break;\n    }\n\n    rsrc.handle(event);\n\n    // Remove the resource if its downloading and its reference count has\n    // become 0 after RELEASE. This maybe because a container was killed while\n    // localizing and no other container is referring to the resource.\n    if (event.getType() \u003d\u003d ResourceEventType.RELEASE) {\n      if (rsrc.getState() \u003d\u003d ResourceState.DOWNLOADING \u0026\u0026\n          rsrc.getRefCount() \u003c\u003d 0) {\n        removeResource(req);\n      }\n    }\n\n    if (event.getType() \u003d\u003d ResourceEventType.LOCALIZED) {\n      if (rsrc.getLocalPath() !\u003d null) {\n        try {\n          stateStore.finishResourceLocalization(user, appId,\n              buildLocalizedResourceProto(rsrc));\n        } catch (IOException ioe) {\n          LOG.error(\"Error storing resource state for \" + rsrc, ioe);\n        }\n      } else {\n        LOG.warn(\"Resource \" + rsrc + \" localized without a location\");\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/LocalResourcesTrackerImpl.java",
      "extendedDetails": {}
    },
    "66598697a6e777615334ebde5ba7738135da83ae": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1338. Recover localized resource cache state upon nodemanager restart (Contributed by Jason Lowe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1598640 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/05/14 8:37 AM",
      "commitName": "66598697a6e777615334ebde5ba7738135da83ae",
      "commitAuthor": "Junping Du",
      "commitDateOld": "06/08/13 12:51 PM",
      "commitNameOld": "3e0203a3a428460c1eb9f0f265fb520737b64d55",
      "commitAuthorOld": "Jonathan Turner Eagles",
      "daysBetweenCommits": 296.82,
      "commitsBetweenForRepo": 1990,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,65 @@\n   public synchronized void handle(ResourceEvent event) {\n     LocalResourceRequest req \u003d event.getLocalResourceRequest();\n     LocalizedResource rsrc \u003d localrsrc.get(req);\n     switch (event.getType()) {\n     case LOCALIZED:\n       if (useLocalCacheDirectoryManager) {\n         inProgressLocalResourcesMap.remove(req);\n       }\n       break;\n     case REQUEST:\n       if (rsrc !\u003d null \u0026\u0026 (!isResourcePresent(rsrc))) {\n         LOG.info(\"Resource \" + rsrc.getLocalPath()\n             + \" is missing, localizing it again\");\n-        localrsrc.remove(req);\n-        decrementFileCountForLocalCacheDirectory(req, rsrc);\n+        removeResource(req);\n         rsrc \u003d null;\n       }\n       if (null \u003d\u003d rsrc) {\n         rsrc \u003d new LocalizedResource(req, dispatcher);\n         localrsrc.put(req, rsrc);\n       }\n       break;\n     case RELEASE:\n       if (null \u003d\u003d rsrc) {\n         // The container sent a release event on a resource which \n         // 1) Failed\n         // 2) Removed for some reason (ex. disk is no longer accessible)\n         ResourceReleaseEvent relEvent \u003d (ResourceReleaseEvent) event;\n         LOG.info(\"Container \" + relEvent.getContainer()\n             + \" sent RELEASE event on a resource request \" + req\n             + \" not present in cache.\");\n         return;\n       }\n       break;\n     case LOCALIZATION_FAILED:\n-      decrementFileCountForLocalCacheDirectory(req, null);\n       /*\n        * If resource localization fails then Localized resource will be\n        * removed from local cache.\n        */\n-      localrsrc.remove(req);\n+      removeResource(req);\n+      break;\n+    case RECOVERED:\n+      if (rsrc !\u003d null) {\n+        LOG.warn(\"Ignoring attempt to recover existing resource \" + rsrc);\n+        return;\n+      }\n+      rsrc \u003d recoverResource(req, (ResourceRecoveredEvent) event);\n+      localrsrc.put(req, rsrc);\n       break;\n     }\n+\n     rsrc.handle(event);\n+\n+    if (event.getType() \u003d\u003d ResourceEventType.LOCALIZED) {\n+      if (rsrc.getLocalPath() !\u003d null) {\n+        try {\n+          stateStore.finishResourceLocalization(user, appId,\n+              buildLocalizedResourceProto(rsrc));\n+        } catch (IOException ioe) {\n+          LOG.error(\"Error storing resource state for \" + rsrc, ioe);\n+        }\n+      } else {\n+        LOG.warn(\"Resource \" + rsrc + \" localized without a location\");\n+      }\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void handle(ResourceEvent event) {\n    LocalResourceRequest req \u003d event.getLocalResourceRequest();\n    LocalizedResource rsrc \u003d localrsrc.get(req);\n    switch (event.getType()) {\n    case LOCALIZED:\n      if (useLocalCacheDirectoryManager) {\n        inProgressLocalResourcesMap.remove(req);\n      }\n      break;\n    case REQUEST:\n      if (rsrc !\u003d null \u0026\u0026 (!isResourcePresent(rsrc))) {\n        LOG.info(\"Resource \" + rsrc.getLocalPath()\n            + \" is missing, localizing it again\");\n        removeResource(req);\n        rsrc \u003d null;\n      }\n      if (null \u003d\u003d rsrc) {\n        rsrc \u003d new LocalizedResource(req, dispatcher);\n        localrsrc.put(req, rsrc);\n      }\n      break;\n    case RELEASE:\n      if (null \u003d\u003d rsrc) {\n        // The container sent a release event on a resource which \n        // 1) Failed\n        // 2) Removed for some reason (ex. disk is no longer accessible)\n        ResourceReleaseEvent relEvent \u003d (ResourceReleaseEvent) event;\n        LOG.info(\"Container \" + relEvent.getContainer()\n            + \" sent RELEASE event on a resource request \" + req\n            + \" not present in cache.\");\n        return;\n      }\n      break;\n    case LOCALIZATION_FAILED:\n      /*\n       * If resource localization fails then Localized resource will be\n       * removed from local cache.\n       */\n      removeResource(req);\n      break;\n    case RECOVERED:\n      if (rsrc !\u003d null) {\n        LOG.warn(\"Ignoring attempt to recover existing resource \" + rsrc);\n        return;\n      }\n      rsrc \u003d recoverResource(req, (ResourceRecoveredEvent) event);\n      localrsrc.put(req, rsrc);\n      break;\n    }\n\n    rsrc.handle(event);\n\n    if (event.getType() \u003d\u003d ResourceEventType.LOCALIZED) {\n      if (rsrc.getLocalPath() !\u003d null) {\n        try {\n          stateStore.finishResourceLocalization(user, appId,\n              buildLocalizedResourceProto(rsrc));\n        } catch (IOException ioe) {\n          LOG.error(\"Error storing resource state for \" + rsrc, ioe);\n        }\n      } else {\n        LOG.warn(\"Resource \" + rsrc + \" localized without a location\");\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/LocalResourcesTrackerImpl.java",
      "extendedDetails": {}
    },
    "4234bc87b3e0bf7e9716d6ca1873b8bb0239472e": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-539. Addressed memory leak of LocalResource objects NM when a resource localization fails. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1466756 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/04/13 7:08 PM",
      "commitName": "4234bc87b3e0bf7e9716d6ca1873b8bb0239472e",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-539. Addressed memory leak of LocalResource objects NM when a resource localization fails. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1466756 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/04/13 7:08 PM",
          "commitName": "4234bc87b3e0bf7e9716d6ca1873b8bb0239472e",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "09/04/13 12:56 PM",
          "commitNameOld": "3a54a5653bf1ea0b5b98e223c7500a9606abf04d",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 1.26,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,45 @@\n-  public void handle(ResourceEvent event) {\n+  public synchronized void handle(ResourceEvent event) {\n     LocalResourceRequest req \u003d event.getLocalResourceRequest();\n     LocalizedResource rsrc \u003d localrsrc.get(req);\n     switch (event.getType()) {\n-    case REQUEST:\n     case LOCALIZED:\n+      if (useLocalCacheDirectoryManager) {\n+        inProgressLocalResourcesMap.remove(req);\n+      }\n+      break;\n+    case REQUEST:\n       if (rsrc !\u003d null \u0026\u0026 (!isResourcePresent(rsrc))) {\n         LOG.info(\"Resource \" + rsrc.getLocalPath()\n             + \" is missing, localizing it again\");\n         localrsrc.remove(req);\n         decrementFileCountForLocalCacheDirectory(req, rsrc);\n         rsrc \u003d null;\n       }\n       if (null \u003d\u003d rsrc) {\n         rsrc \u003d new LocalizedResource(req, dispatcher);\n         localrsrc.put(req, rsrc);\n       }\n       break;\n     case RELEASE:\n       if (null \u003d\u003d rsrc) {\n-        LOG.info(\"Release unknown rsrc null (discard)\");\n+        // The container sent a release event on a resource which \n+        // 1) Failed\n+        // 2) Removed for some reason (ex. disk is no longer accessible)\n+        ResourceReleaseEvent relEvent \u003d (ResourceReleaseEvent) event;\n+        LOG.info(\"Container \" + relEvent.getContainer()\n+            + \" sent RELEASE event on a resource request \" + req\n+            + \" not present in cache.\");\n         return;\n       }\n       break;\n+    case LOCALIZATION_FAILED:\n+      decrementFileCountForLocalCacheDirectory(req, null);\n+      /*\n+       * If resource localization fails then Localized resource will be\n+       * removed from local cache.\n+       */\n+      localrsrc.remove(req);\n+      break;\n     }\n     rsrc.handle(event);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void handle(ResourceEvent event) {\n    LocalResourceRequest req \u003d event.getLocalResourceRequest();\n    LocalizedResource rsrc \u003d localrsrc.get(req);\n    switch (event.getType()) {\n    case LOCALIZED:\n      if (useLocalCacheDirectoryManager) {\n        inProgressLocalResourcesMap.remove(req);\n      }\n      break;\n    case REQUEST:\n      if (rsrc !\u003d null \u0026\u0026 (!isResourcePresent(rsrc))) {\n        LOG.info(\"Resource \" + rsrc.getLocalPath()\n            + \" is missing, localizing it again\");\n        localrsrc.remove(req);\n        decrementFileCountForLocalCacheDirectory(req, rsrc);\n        rsrc \u003d null;\n      }\n      if (null \u003d\u003d rsrc) {\n        rsrc \u003d new LocalizedResource(req, dispatcher);\n        localrsrc.put(req, rsrc);\n      }\n      break;\n    case RELEASE:\n      if (null \u003d\u003d rsrc) {\n        // The container sent a release event on a resource which \n        // 1) Failed\n        // 2) Removed for some reason (ex. disk is no longer accessible)\n        ResourceReleaseEvent relEvent \u003d (ResourceReleaseEvent) event;\n        LOG.info(\"Container \" + relEvent.getContainer()\n            + \" sent RELEASE event on a resource request \" + req\n            + \" not present in cache.\");\n        return;\n      }\n      break;\n    case LOCALIZATION_FAILED:\n      decrementFileCountForLocalCacheDirectory(req, null);\n      /*\n       * If resource localization fails then Localized resource will be\n       * removed from local cache.\n       */\n      localrsrc.remove(req);\n      break;\n    }\n    rsrc.handle(event);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/LocalResourcesTrackerImpl.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[public, synchronized]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-539. Addressed memory leak of LocalResource objects NM when a resource localization fails. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1466756 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/04/13 7:08 PM",
          "commitName": "4234bc87b3e0bf7e9716d6ca1873b8bb0239472e",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "09/04/13 12:56 PM",
          "commitNameOld": "3a54a5653bf1ea0b5b98e223c7500a9606abf04d",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 1.26,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,45 @@\n-  public void handle(ResourceEvent event) {\n+  public synchronized void handle(ResourceEvent event) {\n     LocalResourceRequest req \u003d event.getLocalResourceRequest();\n     LocalizedResource rsrc \u003d localrsrc.get(req);\n     switch (event.getType()) {\n-    case REQUEST:\n     case LOCALIZED:\n+      if (useLocalCacheDirectoryManager) {\n+        inProgressLocalResourcesMap.remove(req);\n+      }\n+      break;\n+    case REQUEST:\n       if (rsrc !\u003d null \u0026\u0026 (!isResourcePresent(rsrc))) {\n         LOG.info(\"Resource \" + rsrc.getLocalPath()\n             + \" is missing, localizing it again\");\n         localrsrc.remove(req);\n         decrementFileCountForLocalCacheDirectory(req, rsrc);\n         rsrc \u003d null;\n       }\n       if (null \u003d\u003d rsrc) {\n         rsrc \u003d new LocalizedResource(req, dispatcher);\n         localrsrc.put(req, rsrc);\n       }\n       break;\n     case RELEASE:\n       if (null \u003d\u003d rsrc) {\n-        LOG.info(\"Release unknown rsrc null (discard)\");\n+        // The container sent a release event on a resource which \n+        // 1) Failed\n+        // 2) Removed for some reason (ex. disk is no longer accessible)\n+        ResourceReleaseEvent relEvent \u003d (ResourceReleaseEvent) event;\n+        LOG.info(\"Container \" + relEvent.getContainer()\n+            + \" sent RELEASE event on a resource request \" + req\n+            + \" not present in cache.\");\n         return;\n       }\n       break;\n+    case LOCALIZATION_FAILED:\n+      decrementFileCountForLocalCacheDirectory(req, null);\n+      /*\n+       * If resource localization fails then Localized resource will be\n+       * removed from local cache.\n+       */\n+      localrsrc.remove(req);\n+      break;\n     }\n     rsrc.handle(event);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void handle(ResourceEvent event) {\n    LocalResourceRequest req \u003d event.getLocalResourceRequest();\n    LocalizedResource rsrc \u003d localrsrc.get(req);\n    switch (event.getType()) {\n    case LOCALIZED:\n      if (useLocalCacheDirectoryManager) {\n        inProgressLocalResourcesMap.remove(req);\n      }\n      break;\n    case REQUEST:\n      if (rsrc !\u003d null \u0026\u0026 (!isResourcePresent(rsrc))) {\n        LOG.info(\"Resource \" + rsrc.getLocalPath()\n            + \" is missing, localizing it again\");\n        localrsrc.remove(req);\n        decrementFileCountForLocalCacheDirectory(req, rsrc);\n        rsrc \u003d null;\n      }\n      if (null \u003d\u003d rsrc) {\n        rsrc \u003d new LocalizedResource(req, dispatcher);\n        localrsrc.put(req, rsrc);\n      }\n      break;\n    case RELEASE:\n      if (null \u003d\u003d rsrc) {\n        // The container sent a release event on a resource which \n        // 1) Failed\n        // 2) Removed for some reason (ex. disk is no longer accessible)\n        ResourceReleaseEvent relEvent \u003d (ResourceReleaseEvent) event;\n        LOG.info(\"Container \" + relEvent.getContainer()\n            + \" sent RELEASE event on a resource request \" + req\n            + \" not present in cache.\");\n        return;\n      }\n      break;\n    case LOCALIZATION_FAILED:\n      decrementFileCountForLocalCacheDirectory(req, null);\n      /*\n       * If resource localization fails then Localized resource will be\n       * removed from local cache.\n       */\n      localrsrc.remove(req);\n      break;\n    }\n    rsrc.handle(event);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/LocalResourcesTrackerImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "e67e3ff05db26437b1d7c6d3dd958362fb8425db": {
      "type": "Ybodychange",
      "commitMessage": "YARN-467. Modify public distributed cache to localize files such that no local directory hits unix file count limits and thus prevent job failures. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1463823 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/04/13 10:00 PM",
      "commitName": "e67e3ff05db26437b1d7c6d3dd958362fb8425db",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "07/08/12 10:22 PM",
      "commitNameOld": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 237.98,
      "commitsBetweenForRepo": 1219,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,27 @@\n   public void handle(ResourceEvent event) {\n     LocalResourceRequest req \u003d event.getLocalResourceRequest();\n     LocalizedResource rsrc \u003d localrsrc.get(req);\n     switch (event.getType()) {\n     case REQUEST:\n     case LOCALIZED:\n       if (rsrc !\u003d null \u0026\u0026 (!isResourcePresent(rsrc))) {\n         LOG.info(\"Resource \" + rsrc.getLocalPath()\n             + \" is missing, localizing it again\");\n         localrsrc.remove(req);\n+        decrementFileCountForLocalCacheDirectory(req, rsrc);\n         rsrc \u003d null;\n       }\n       if (null \u003d\u003d rsrc) {\n         rsrc \u003d new LocalizedResource(req, dispatcher);\n         localrsrc.put(req, rsrc);\n       }\n       break;\n     case RELEASE:\n       if (null \u003d\u003d rsrc) {\n         LOG.info(\"Release unknown rsrc null (discard)\");\n         return;\n       }\n       break;\n     }\n     rsrc.handle(event);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(ResourceEvent event) {\n    LocalResourceRequest req \u003d event.getLocalResourceRequest();\n    LocalizedResource rsrc \u003d localrsrc.get(req);\n    switch (event.getType()) {\n    case REQUEST:\n    case LOCALIZED:\n      if (rsrc !\u003d null \u0026\u0026 (!isResourcePresent(rsrc))) {\n        LOG.info(\"Resource \" + rsrc.getLocalPath()\n            + \" is missing, localizing it again\");\n        localrsrc.remove(req);\n        decrementFileCountForLocalCacheDirectory(req, rsrc);\n        rsrc \u003d null;\n      }\n      if (null \u003d\u003d rsrc) {\n        rsrc \u003d new LocalizedResource(req, dispatcher);\n        localrsrc.put(req, rsrc);\n      }\n      break;\n    case RELEASE:\n      if (null \u003d\u003d rsrc) {\n        LOG.info(\"Release unknown rsrc null (discard)\");\n        return;\n      }\n      break;\n    }\n    rsrc.handle(event);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/LocalResourcesTrackerImpl.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void handle(ResourceEvent event) {\n    LocalResourceRequest req \u003d event.getLocalResourceRequest();\n    LocalizedResource rsrc \u003d localrsrc.get(req);\n    switch (event.getType()) {\n    case REQUEST:\n    case LOCALIZED:\n      if (rsrc !\u003d null \u0026\u0026 (!isResourcePresent(rsrc))) {\n        LOG.info(\"Resource \" + rsrc.getLocalPath()\n            + \" is missing, localizing it again\");\n        localrsrc.remove(req);\n        rsrc \u003d null;\n      }\n      if (null \u003d\u003d rsrc) {\n        rsrc \u003d new LocalizedResource(req, dispatcher);\n        localrsrc.put(req, rsrc);\n      }\n      break;\n    case RELEASE:\n      if (null \u003d\u003d rsrc) {\n        LOG.info(\"Release unknown rsrc null (discard)\");\n        return;\n      }\n      break;\n    }\n    rsrc.handle(event);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/LocalResourcesTrackerImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/LocalResourcesTrackerImpl.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/LocalResourcesTrackerImpl.java"
      }
    },
    "e217a05255497fcf243ad7b379553db7fd0a2493": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4342. Distributed Cache gives inconsistent result if cache files get deleted from tasktracker. (mayank_bansal via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1367352 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/07/12 3:56 PM",
      "commitName": "e217a05255497fcf243ad7b379553db7fd0a2493",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "10/11/11 10:30 PM",
      "commitNameOld": "dbc82dbdfb2c00d2193d3f300277cba6494d84d7",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 262.68,
      "commitsBetweenForRepo": 1700,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,26 @@\n   public void handle(ResourceEvent event) {\n     LocalResourceRequest req \u003d event.getLocalResourceRequest();\n     LocalizedResource rsrc \u003d localrsrc.get(req);\n     switch (event.getType()) {\n     case REQUEST:\n     case LOCALIZED:\n+      if (rsrc !\u003d null \u0026\u0026 (!isResourcePresent(rsrc))) {\n+        LOG.info(\"Resource \" + rsrc.getLocalPath()\n+            + \" is missing, localizing it again\");\n+        localrsrc.remove(req);\n+        rsrc \u003d null;\n+      }\n       if (null \u003d\u003d rsrc) {\n         rsrc \u003d new LocalizedResource(req, dispatcher);\n         localrsrc.put(req, rsrc);\n       }\n       break;\n     case RELEASE:\n       if (null \u003d\u003d rsrc) {\n         LOG.info(\"Release unknown rsrc null (discard)\");\n         return;\n       }\n       break;\n     }\n     rsrc.handle(event);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(ResourceEvent event) {\n    LocalResourceRequest req \u003d event.getLocalResourceRequest();\n    LocalizedResource rsrc \u003d localrsrc.get(req);\n    switch (event.getType()) {\n    case REQUEST:\n    case LOCALIZED:\n      if (rsrc !\u003d null \u0026\u0026 (!isResourcePresent(rsrc))) {\n        LOG.info(\"Resource \" + rsrc.getLocalPath()\n            + \" is missing, localizing it again\");\n        localrsrc.remove(req);\n        rsrc \u003d null;\n      }\n      if (null \u003d\u003d rsrc) {\n        rsrc \u003d new LocalizedResource(req, dispatcher);\n        localrsrc.put(req, rsrc);\n      }\n      break;\n    case RELEASE:\n      if (null \u003d\u003d rsrc) {\n        LOG.info(\"Release unknown rsrc null (discard)\");\n        return;\n      }\n      break;\n    }\n    rsrc.handle(event);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/LocalResourcesTrackerImpl.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void handle(ResourceEvent event) {\n    LocalResourceRequest req \u003d event.getLocalResourceRequest();\n    LocalizedResource rsrc \u003d localrsrc.get(req);\n    switch (event.getType()) {\n    case REQUEST:\n    case LOCALIZED:\n      if (null \u003d\u003d rsrc) {\n        rsrc \u003d new LocalizedResource(req, dispatcher);\n        localrsrc.put(req, rsrc);\n      }\n      break;\n    case RELEASE:\n      if (null \u003d\u003d rsrc) {\n        LOG.info(\"Release unknown rsrc null (discard)\");\n        return;\n      }\n      break;\n    }\n    rsrc.handle(event);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/LocalResourcesTrackerImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/LocalResourcesTrackerImpl.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/LocalResourcesTrackerImpl.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,20 @@\n+  public void handle(ResourceEvent event) {\n+    LocalResourceRequest req \u003d event.getLocalResourceRequest();\n+    LocalizedResource rsrc \u003d localrsrc.get(req);\n+    switch (event.getType()) {\n+    case REQUEST:\n+    case LOCALIZED:\n+      if (null \u003d\u003d rsrc) {\n+        rsrc \u003d new LocalizedResource(req, dispatcher);\n+        localrsrc.put(req, rsrc);\n+      }\n+      break;\n+    case RELEASE:\n+      if (null \u003d\u003d rsrc) {\n+        LOG.info(\"Release unknown rsrc null (discard)\");\n+        return;\n+      }\n+      break;\n+    }\n+    rsrc.handle(event);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(ResourceEvent event) {\n    LocalResourceRequest req \u003d event.getLocalResourceRequest();\n    LocalizedResource rsrc \u003d localrsrc.get(req);\n    switch (event.getType()) {\n    case REQUEST:\n    case LOCALIZED:\n      if (null \u003d\u003d rsrc) {\n        rsrc \u003d new LocalizedResource(req, dispatcher);\n        localrsrc.put(req, rsrc);\n      }\n      break;\n    case RELEASE:\n      if (null \u003d\u003d rsrc) {\n        LOG.info(\"Release unknown rsrc null (discard)\");\n        return;\n      }\n      break;\n    }\n    rsrc.handle(event);\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/LocalResourcesTrackerImpl.java"
    }
  }
}