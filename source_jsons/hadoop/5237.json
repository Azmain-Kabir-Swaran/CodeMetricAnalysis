{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSDirWriteFileOp.java",
  "functionName": "setNewINodeStoragePolicy",
  "functionId": "setNewINodeStoragePolicy___bm-BlockManager__iip-INodesInPath__isLazyPersist-boolean",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java",
  "functionStartLine": 805,
  "functionEndLine": 832,
  "numCommitsSeen": 662,
  "timeTaken": 12975,
  "changeHistory": [
    "f32e9fc8f7150f0e889c0774b3ad712af26fbd65",
    "2b6bcfdafa91223a4116e3e9304579f5f91dccac",
    "bb84f1fccb18c6c7373851e05d2451d55e908242"
  ],
  "changeHistoryShort": {
    "f32e9fc8f7150f0e889c0774b3ad712af26fbd65": "Ymultichange(Yparameterchange,Ybodychange)",
    "2b6bcfdafa91223a4116e3e9304579f5f91dccac": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
    "bb84f1fccb18c6c7373851e05d2451d55e908242": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f32e9fc8f7150f0e889c0774b3ad712af26fbd65": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-10939. Reduce performance penalty of encryption zones. Contributed by Daryn sharp.\n",
      "commitDate": "06/10/16 1:11 PM",
      "commitName": "f32e9fc8f7150f0e889c0774b3ad712af26fbd65",
      "commitAuthor": "Kihwal Lee",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-10939. Reduce performance penalty of encryption zones. Contributed by Daryn sharp.\n",
          "commitDate": "06/10/16 1:11 PM",
          "commitName": "f32e9fc8f7150f0e889c0774b3ad712af26fbd65",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "06/09/16 11:02 AM",
          "commitNameOld": "f0d5382ff3e31a47d13e4cb6c3a244cca82b17ce",
          "commitAuthorOld": "Chris Nauroth",
          "daysBetweenCommits": 30.09,
          "commitsBetweenForRepo": 188,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,28 @@\n-  private static void setNewINodeStoragePolicy(BlockManager bm, INodeFile\n-      inode, INodesInPath iip, boolean isLazyPersist)\n-      throws IOException {\n-\n+  private static void setNewINodeStoragePolicy(BlockManager bm,\n+      INodesInPath iip, boolean isLazyPersist) throws IOException {\n+    INodeFile inode \u003d iip.getLastINode().asFile();\n     if (isLazyPersist) {\n       BlockStoragePolicy lpPolicy \u003d\n           bm.getStoragePolicy(\"LAZY_PERSIST\");\n \n       // Set LAZY_PERSIST storage policy if the flag was passed to\n       // CreateFile.\n       if (lpPolicy \u003d\u003d null) {\n         throw new HadoopIllegalArgumentException(\n             \"The LAZY_PERSIST storage policy has been disabled \" +\n             \"by the administrator.\");\n       }\n       inode.setStoragePolicyID(lpPolicy.getId(),\n                                  iip.getLatestSnapshotId());\n     } else {\n       BlockStoragePolicy effectivePolicy \u003d\n           bm.getStoragePolicy(inode.getStoragePolicyID());\n \n       if (effectivePolicy !\u003d null \u0026\u0026\n           effectivePolicy.isCopyOnCreateFile()) {\n         // Copy effective policy from ancestor directory to current file.\n         inode.setStoragePolicyID(effectivePolicy.getId(),\n                                  iip.getLatestSnapshotId());\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void setNewINodeStoragePolicy(BlockManager bm,\n      INodesInPath iip, boolean isLazyPersist) throws IOException {\n    INodeFile inode \u003d iip.getLastINode().asFile();\n    if (isLazyPersist) {\n      BlockStoragePolicy lpPolicy \u003d\n          bm.getStoragePolicy(\"LAZY_PERSIST\");\n\n      // Set LAZY_PERSIST storage policy if the flag was passed to\n      // CreateFile.\n      if (lpPolicy \u003d\u003d null) {\n        throw new HadoopIllegalArgumentException(\n            \"The LAZY_PERSIST storage policy has been disabled \" +\n            \"by the administrator.\");\n      }\n      inode.setStoragePolicyID(lpPolicy.getId(),\n                                 iip.getLatestSnapshotId());\n    } else {\n      BlockStoragePolicy effectivePolicy \u003d\n          bm.getStoragePolicy(inode.getStoragePolicyID());\n\n      if (effectivePolicy !\u003d null \u0026\u0026\n          effectivePolicy.isCopyOnCreateFile()) {\n        // Copy effective policy from ancestor directory to current file.\n        inode.setStoragePolicyID(effectivePolicy.getId(),\n                                 iip.getLatestSnapshotId());\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java",
          "extendedDetails": {
            "oldValue": "[bm-BlockManager, inode-INodeFile, iip-INodesInPath, isLazyPersist-boolean]",
            "newValue": "[bm-BlockManager, iip-INodesInPath, isLazyPersist-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-10939. Reduce performance penalty of encryption zones. Contributed by Daryn sharp.\n",
          "commitDate": "06/10/16 1:11 PM",
          "commitName": "f32e9fc8f7150f0e889c0774b3ad712af26fbd65",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "06/09/16 11:02 AM",
          "commitNameOld": "f0d5382ff3e31a47d13e4cb6c3a244cca82b17ce",
          "commitAuthorOld": "Chris Nauroth",
          "daysBetweenCommits": 30.09,
          "commitsBetweenForRepo": 188,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,28 @@\n-  private static void setNewINodeStoragePolicy(BlockManager bm, INodeFile\n-      inode, INodesInPath iip, boolean isLazyPersist)\n-      throws IOException {\n-\n+  private static void setNewINodeStoragePolicy(BlockManager bm,\n+      INodesInPath iip, boolean isLazyPersist) throws IOException {\n+    INodeFile inode \u003d iip.getLastINode().asFile();\n     if (isLazyPersist) {\n       BlockStoragePolicy lpPolicy \u003d\n           bm.getStoragePolicy(\"LAZY_PERSIST\");\n \n       // Set LAZY_PERSIST storage policy if the flag was passed to\n       // CreateFile.\n       if (lpPolicy \u003d\u003d null) {\n         throw new HadoopIllegalArgumentException(\n             \"The LAZY_PERSIST storage policy has been disabled \" +\n             \"by the administrator.\");\n       }\n       inode.setStoragePolicyID(lpPolicy.getId(),\n                                  iip.getLatestSnapshotId());\n     } else {\n       BlockStoragePolicy effectivePolicy \u003d\n           bm.getStoragePolicy(inode.getStoragePolicyID());\n \n       if (effectivePolicy !\u003d null \u0026\u0026\n           effectivePolicy.isCopyOnCreateFile()) {\n         // Copy effective policy from ancestor directory to current file.\n         inode.setStoragePolicyID(effectivePolicy.getId(),\n                                  iip.getLatestSnapshotId());\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void setNewINodeStoragePolicy(BlockManager bm,\n      INodesInPath iip, boolean isLazyPersist) throws IOException {\n    INodeFile inode \u003d iip.getLastINode().asFile();\n    if (isLazyPersist) {\n      BlockStoragePolicy lpPolicy \u003d\n          bm.getStoragePolicy(\"LAZY_PERSIST\");\n\n      // Set LAZY_PERSIST storage policy if the flag was passed to\n      // CreateFile.\n      if (lpPolicy \u003d\u003d null) {\n        throw new HadoopIllegalArgumentException(\n            \"The LAZY_PERSIST storage policy has been disabled \" +\n            \"by the administrator.\");\n      }\n      inode.setStoragePolicyID(lpPolicy.getId(),\n                                 iip.getLatestSnapshotId());\n    } else {\n      BlockStoragePolicy effectivePolicy \u003d\n          bm.getStoragePolicy(inode.getStoragePolicyID());\n\n      if (effectivePolicy !\u003d null \u0026\u0026\n          effectivePolicy.isCopyOnCreateFile()) {\n        // Copy effective policy from ancestor directory to current file.\n        inode.setStoragePolicyID(effectivePolicy.getId(),\n                                 iip.getLatestSnapshotId());\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java",
          "extendedDetails": {}
        }
      ]
    },
    "2b6bcfdafa91223a4116e3e9304579f5f91dccac": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "HDFS-8421. Move startFile() and related functions into FSDirWriteFileOp. Contributed by Haohui Mai.\n",
      "commitDate": "21/05/15 8:08 AM",
      "commitName": "2b6bcfdafa91223a4116e3e9304579f5f91dccac",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-8421. Move startFile() and related functions into FSDirWriteFileOp. Contributed by Haohui Mai.\n",
          "commitDate": "21/05/15 8:08 AM",
          "commitName": "2b6bcfdafa91223a4116e3e9304579f5f91dccac",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "21/05/15 7:44 AM",
          "commitNameOld": "0305316d6932e6f1a05021354d77b6934e57e171",
          "commitAuthorOld": "Devaraj K",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,29 @@\n-  private void setNewINodeStoragePolicy(INodeFile inode,\n-                                        INodesInPath iip,\n-                                        boolean isLazyPersist)\n+  private static void setNewINodeStoragePolicy(BlockManager bm, INodeFile\n+      inode, INodesInPath iip, boolean isLazyPersist)\n       throws IOException {\n \n     if (isLazyPersist) {\n       BlockStoragePolicy lpPolicy \u003d\n-          blockManager.getStoragePolicy(\"LAZY_PERSIST\");\n+          bm.getStoragePolicy(\"LAZY_PERSIST\");\n \n       // Set LAZY_PERSIST storage policy if the flag was passed to\n       // CreateFile.\n       if (lpPolicy \u003d\u003d null) {\n         throw new HadoopIllegalArgumentException(\n             \"The LAZY_PERSIST storage policy has been disabled \" +\n             \"by the administrator.\");\n       }\n       inode.setStoragePolicyID(lpPolicy.getId(),\n                                  iip.getLatestSnapshotId());\n     } else {\n       BlockStoragePolicy effectivePolicy \u003d\n-          blockManager.getStoragePolicy(inode.getStoragePolicyID());\n+          bm.getStoragePolicy(inode.getStoragePolicyID());\n \n       if (effectivePolicy !\u003d null \u0026\u0026\n           effectivePolicy.isCopyOnCreateFile()) {\n         // Copy effective policy from ancestor directory to current file.\n         inode.setStoragePolicyID(effectivePolicy.getId(),\n                                  iip.getLatestSnapshotId());\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void setNewINodeStoragePolicy(BlockManager bm, INodeFile\n      inode, INodesInPath iip, boolean isLazyPersist)\n      throws IOException {\n\n    if (isLazyPersist) {\n      BlockStoragePolicy lpPolicy \u003d\n          bm.getStoragePolicy(\"LAZY_PERSIST\");\n\n      // Set LAZY_PERSIST storage policy if the flag was passed to\n      // CreateFile.\n      if (lpPolicy \u003d\u003d null) {\n        throw new HadoopIllegalArgumentException(\n            \"The LAZY_PERSIST storage policy has been disabled \" +\n            \"by the administrator.\");\n      }\n      inode.setStoragePolicyID(lpPolicy.getId(),\n                                 iip.getLatestSnapshotId());\n    } else {\n      BlockStoragePolicy effectivePolicy \u003d\n          bm.getStoragePolicy(inode.getStoragePolicyID());\n\n      if (effectivePolicy !\u003d null \u0026\u0026\n          effectivePolicy.isCopyOnCreateFile()) {\n        // Copy effective policy from ancestor directory to current file.\n        inode.setStoragePolicyID(effectivePolicy.getId(),\n                                 iip.getLatestSnapshotId());\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java",
            "oldMethodName": "setNewINodeStoragePolicy",
            "newMethodName": "setNewINodeStoragePolicy"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-8421. Move startFile() and related functions into FSDirWriteFileOp. Contributed by Haohui Mai.\n",
          "commitDate": "21/05/15 8:08 AM",
          "commitName": "2b6bcfdafa91223a4116e3e9304579f5f91dccac",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "21/05/15 7:44 AM",
          "commitNameOld": "0305316d6932e6f1a05021354d77b6934e57e171",
          "commitAuthorOld": "Devaraj K",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,29 @@\n-  private void setNewINodeStoragePolicy(INodeFile inode,\n-                                        INodesInPath iip,\n-                                        boolean isLazyPersist)\n+  private static void setNewINodeStoragePolicy(BlockManager bm, INodeFile\n+      inode, INodesInPath iip, boolean isLazyPersist)\n       throws IOException {\n \n     if (isLazyPersist) {\n       BlockStoragePolicy lpPolicy \u003d\n-          blockManager.getStoragePolicy(\"LAZY_PERSIST\");\n+          bm.getStoragePolicy(\"LAZY_PERSIST\");\n \n       // Set LAZY_PERSIST storage policy if the flag was passed to\n       // CreateFile.\n       if (lpPolicy \u003d\u003d null) {\n         throw new HadoopIllegalArgumentException(\n             \"The LAZY_PERSIST storage policy has been disabled \" +\n             \"by the administrator.\");\n       }\n       inode.setStoragePolicyID(lpPolicy.getId(),\n                                  iip.getLatestSnapshotId());\n     } else {\n       BlockStoragePolicy effectivePolicy \u003d\n-          blockManager.getStoragePolicy(inode.getStoragePolicyID());\n+          bm.getStoragePolicy(inode.getStoragePolicyID());\n \n       if (effectivePolicy !\u003d null \u0026\u0026\n           effectivePolicy.isCopyOnCreateFile()) {\n         // Copy effective policy from ancestor directory to current file.\n         inode.setStoragePolicyID(effectivePolicy.getId(),\n                                  iip.getLatestSnapshotId());\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void setNewINodeStoragePolicy(BlockManager bm, INodeFile\n      inode, INodesInPath iip, boolean isLazyPersist)\n      throws IOException {\n\n    if (isLazyPersist) {\n      BlockStoragePolicy lpPolicy \u003d\n          bm.getStoragePolicy(\"LAZY_PERSIST\");\n\n      // Set LAZY_PERSIST storage policy if the flag was passed to\n      // CreateFile.\n      if (lpPolicy \u003d\u003d null) {\n        throw new HadoopIllegalArgumentException(\n            \"The LAZY_PERSIST storage policy has been disabled \" +\n            \"by the administrator.\");\n      }\n      inode.setStoragePolicyID(lpPolicy.getId(),\n                                 iip.getLatestSnapshotId());\n    } else {\n      BlockStoragePolicy effectivePolicy \u003d\n          bm.getStoragePolicy(inode.getStoragePolicyID());\n\n      if (effectivePolicy !\u003d null \u0026\u0026\n          effectivePolicy.isCopyOnCreateFile()) {\n        // Copy effective policy from ancestor directory to current file.\n        inode.setStoragePolicyID(effectivePolicy.getId(),\n                                 iip.getLatestSnapshotId());\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[private, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8421. Move startFile() and related functions into FSDirWriteFileOp. Contributed by Haohui Mai.\n",
          "commitDate": "21/05/15 8:08 AM",
          "commitName": "2b6bcfdafa91223a4116e3e9304579f5f91dccac",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "21/05/15 7:44 AM",
          "commitNameOld": "0305316d6932e6f1a05021354d77b6934e57e171",
          "commitAuthorOld": "Devaraj K",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,29 @@\n-  private void setNewINodeStoragePolicy(INodeFile inode,\n-                                        INodesInPath iip,\n-                                        boolean isLazyPersist)\n+  private static void setNewINodeStoragePolicy(BlockManager bm, INodeFile\n+      inode, INodesInPath iip, boolean isLazyPersist)\n       throws IOException {\n \n     if (isLazyPersist) {\n       BlockStoragePolicy lpPolicy \u003d\n-          blockManager.getStoragePolicy(\"LAZY_PERSIST\");\n+          bm.getStoragePolicy(\"LAZY_PERSIST\");\n \n       // Set LAZY_PERSIST storage policy if the flag was passed to\n       // CreateFile.\n       if (lpPolicy \u003d\u003d null) {\n         throw new HadoopIllegalArgumentException(\n             \"The LAZY_PERSIST storage policy has been disabled \" +\n             \"by the administrator.\");\n       }\n       inode.setStoragePolicyID(lpPolicy.getId(),\n                                  iip.getLatestSnapshotId());\n     } else {\n       BlockStoragePolicy effectivePolicy \u003d\n-          blockManager.getStoragePolicy(inode.getStoragePolicyID());\n+          bm.getStoragePolicy(inode.getStoragePolicyID());\n \n       if (effectivePolicy !\u003d null \u0026\u0026\n           effectivePolicy.isCopyOnCreateFile()) {\n         // Copy effective policy from ancestor directory to current file.\n         inode.setStoragePolicyID(effectivePolicy.getId(),\n                                  iip.getLatestSnapshotId());\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void setNewINodeStoragePolicy(BlockManager bm, INodeFile\n      inode, INodesInPath iip, boolean isLazyPersist)\n      throws IOException {\n\n    if (isLazyPersist) {\n      BlockStoragePolicy lpPolicy \u003d\n          bm.getStoragePolicy(\"LAZY_PERSIST\");\n\n      // Set LAZY_PERSIST storage policy if the flag was passed to\n      // CreateFile.\n      if (lpPolicy \u003d\u003d null) {\n        throw new HadoopIllegalArgumentException(\n            \"The LAZY_PERSIST storage policy has been disabled \" +\n            \"by the administrator.\");\n      }\n      inode.setStoragePolicyID(lpPolicy.getId(),\n                                 iip.getLatestSnapshotId());\n    } else {\n      BlockStoragePolicy effectivePolicy \u003d\n          bm.getStoragePolicy(inode.getStoragePolicyID());\n\n      if (effectivePolicy !\u003d null \u0026\u0026\n          effectivePolicy.isCopyOnCreateFile()) {\n        // Copy effective policy from ancestor directory to current file.\n        inode.setStoragePolicyID(effectivePolicy.getId(),\n                                 iip.getLatestSnapshotId());\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-8421. Move startFile() and related functions into FSDirWriteFileOp. Contributed by Haohui Mai.\n",
          "commitDate": "21/05/15 8:08 AM",
          "commitName": "2b6bcfdafa91223a4116e3e9304579f5f91dccac",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "21/05/15 7:44 AM",
          "commitNameOld": "0305316d6932e6f1a05021354d77b6934e57e171",
          "commitAuthorOld": "Devaraj K",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,29 @@\n-  private void setNewINodeStoragePolicy(INodeFile inode,\n-                                        INodesInPath iip,\n-                                        boolean isLazyPersist)\n+  private static void setNewINodeStoragePolicy(BlockManager bm, INodeFile\n+      inode, INodesInPath iip, boolean isLazyPersist)\n       throws IOException {\n \n     if (isLazyPersist) {\n       BlockStoragePolicy lpPolicy \u003d\n-          blockManager.getStoragePolicy(\"LAZY_PERSIST\");\n+          bm.getStoragePolicy(\"LAZY_PERSIST\");\n \n       // Set LAZY_PERSIST storage policy if the flag was passed to\n       // CreateFile.\n       if (lpPolicy \u003d\u003d null) {\n         throw new HadoopIllegalArgumentException(\n             \"The LAZY_PERSIST storage policy has been disabled \" +\n             \"by the administrator.\");\n       }\n       inode.setStoragePolicyID(lpPolicy.getId(),\n                                  iip.getLatestSnapshotId());\n     } else {\n       BlockStoragePolicy effectivePolicy \u003d\n-          blockManager.getStoragePolicy(inode.getStoragePolicyID());\n+          bm.getStoragePolicy(inode.getStoragePolicyID());\n \n       if (effectivePolicy !\u003d null \u0026\u0026\n           effectivePolicy.isCopyOnCreateFile()) {\n         // Copy effective policy from ancestor directory to current file.\n         inode.setStoragePolicyID(effectivePolicy.getId(),\n                                  iip.getLatestSnapshotId());\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void setNewINodeStoragePolicy(BlockManager bm, INodeFile\n      inode, INodesInPath iip, boolean isLazyPersist)\n      throws IOException {\n\n    if (isLazyPersist) {\n      BlockStoragePolicy lpPolicy \u003d\n          bm.getStoragePolicy(\"LAZY_PERSIST\");\n\n      // Set LAZY_PERSIST storage policy if the flag was passed to\n      // CreateFile.\n      if (lpPolicy \u003d\u003d null) {\n        throw new HadoopIllegalArgumentException(\n            \"The LAZY_PERSIST storage policy has been disabled \" +\n            \"by the administrator.\");\n      }\n      inode.setStoragePolicyID(lpPolicy.getId(),\n                                 iip.getLatestSnapshotId());\n    } else {\n      BlockStoragePolicy effectivePolicy \u003d\n          bm.getStoragePolicy(inode.getStoragePolicyID());\n\n      if (effectivePolicy !\u003d null \u0026\u0026\n          effectivePolicy.isCopyOnCreateFile()) {\n        // Copy effective policy from ancestor directory to current file.\n        inode.setStoragePolicyID(effectivePolicy.getId(),\n                                 iip.getLatestSnapshotId());\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java",
          "extendedDetails": {
            "oldValue": "[inode-INodeFile, iip-INodesInPath, isLazyPersist-boolean]",
            "newValue": "[bm-BlockManager, inode-INodeFile, iip-INodesInPath, isLazyPersist-boolean]"
          }
        }
      ]
    },
    "bb84f1fccb18c6c7373851e05d2451d55e908242": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-7159. Use block storage policy to set lazy persist preference. (Arpit Agarwal)\n",
      "commitDate": "29/09/14 10:27 PM",
      "commitName": "bb84f1fccb18c6c7373851e05d2451d55e908242",
      "commitAuthor": "arp",
      "diff": "@@ -0,0 +1,30 @@\n+  private void setNewINodeStoragePolicy(INodeFile inode,\n+                                        INodesInPath iip,\n+                                        boolean isLazyPersist)\n+      throws IOException {\n+\n+    if (isLazyPersist) {\n+      BlockStoragePolicy lpPolicy \u003d\n+          blockManager.getStoragePolicy(\"LAZY_PERSIST\");\n+\n+      // Set LAZY_PERSIST storage policy if the flag was passed to\n+      // CreateFile.\n+      if (lpPolicy \u003d\u003d null) {\n+        throw new HadoopIllegalArgumentException(\n+            \"The LAZY_PERSIST storage policy has been disabled \" +\n+            \"by the administrator.\");\n+      }\n+      inode.setStoragePolicyID(lpPolicy.getId(),\n+                                 iip.getLatestSnapshotId());\n+    } else {\n+      BlockStoragePolicy effectivePolicy \u003d\n+          blockManager.getStoragePolicy(inode.getStoragePolicyID());\n+\n+      if (effectivePolicy !\u003d null \u0026\u0026\n+          effectivePolicy.isCopyOnCreateFile()) {\n+        // Copy effective policy from ancestor directory to current file.\n+        inode.setStoragePolicyID(effectivePolicy.getId(),\n+                                 iip.getLatestSnapshotId());\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void setNewINodeStoragePolicy(INodeFile inode,\n                                        INodesInPath iip,\n                                        boolean isLazyPersist)\n      throws IOException {\n\n    if (isLazyPersist) {\n      BlockStoragePolicy lpPolicy \u003d\n          blockManager.getStoragePolicy(\"LAZY_PERSIST\");\n\n      // Set LAZY_PERSIST storage policy if the flag was passed to\n      // CreateFile.\n      if (lpPolicy \u003d\u003d null) {\n        throw new HadoopIllegalArgumentException(\n            \"The LAZY_PERSIST storage policy has been disabled \" +\n            \"by the administrator.\");\n      }\n      inode.setStoragePolicyID(lpPolicy.getId(),\n                                 iip.getLatestSnapshotId());\n    } else {\n      BlockStoragePolicy effectivePolicy \u003d\n          blockManager.getStoragePolicy(inode.getStoragePolicyID());\n\n      if (effectivePolicy !\u003d null \u0026\u0026\n          effectivePolicy.isCopyOnCreateFile()) {\n        // Copy effective policy from ancestor directory to current file.\n        inode.setStoragePolicyID(effectivePolicy.getId(),\n                                 iip.getLatestSnapshotId());\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java"
    }
  }
}