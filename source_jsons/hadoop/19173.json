{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "QueueConfigurationParser.java",
  "functionName": "createHierarchy",
  "functionId": "createHierarchy___parent-String__queueNode-Element",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/QueueConfigurationParser.java",
  "functionStartLine": 245,
  "functionEndLine": 332,
  "numCommitsSeen": 5,
  "timeTaken": 4189,
  "changeHistory": [
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private Queue createHierarchy(String parent, Element queueNode) {\n\n    if (queueNode \u003d\u003d null) {\n      return null;\n    }\n    //Name of the current queue.\n    //Complete qualified queue name.\n    String name \u003d \"\";\n    Queue newQueue \u003d new Queue();\n    Map\u003cString, AccessControlList\u003e acls \u003d\n      new HashMap\u003cString, AccessControlList\u003e();\n\n    NodeList fields \u003d queueNode.getChildNodes();\n    validate(queueNode);\n    List\u003cElement\u003e subQueues \u003d new ArrayList\u003cElement\u003e();\n\n    String submitKey \u003d \"\";\n    String adminKey \u003d \"\";\n    \n    for (int j \u003d 0; j \u003c fields.getLength(); j++) {\n      Node fieldNode \u003d fields.item(j);\n      if (!(fieldNode instanceof Element)) {\n        continue;\n      }\n      Element field \u003d (Element) fieldNode;\n      if (QUEUE_NAME_TAG.equals(field.getTagName())) {\n        String nameValue \u003d field.getTextContent();\n        if (field.getTextContent() \u003d\u003d null ||\n          field.getTextContent().trim().equals(\"\") ||\n          field.getTextContent().contains(NAME_SEPARATOR)) {\n          throw new RuntimeException(\"Improper queue name : \" + nameValue);\n        }\n\n        if (!parent.equals(\"\")) {\n          name +\u003d parent + NAME_SEPARATOR;\n        }\n        //generate the complete qualified name\n        //parent.child\n        name +\u003d nameValue;\n        newQueue.setName(name);\n        submitKey \u003d toFullPropertyName(name,\n            QueueACL.SUBMIT_JOB.getAclName());\n        adminKey \u003d toFullPropertyName(name,\n            QueueACL.ADMINISTER_JOBS.getAclName());\n      }\n\n      if (QUEUE_TAG.equals(field.getTagName()) \u0026\u0026 field.hasChildNodes()) {\n        subQueues.add(field);\n      }\n      if(isAclsEnabled()) {\n        if (ACL_SUBMIT_JOB_TAG.equals(field.getTagName())) {\n          acls.put(submitKey, new AccessControlList(field.getTextContent()));\n        }\n\n        if (ACL_ADMINISTER_JOB_TAG.equals(field.getTagName())) {\n          acls.put(adminKey, new AccessControlList(field.getTextContent()));\n        }\n      }\n\n      if (PROPERTIES_TAG.equals(field.getTagName())) {\n        Properties properties \u003d populateProperties(field);\n        newQueue.setProperties(properties);\n      }\n\n      if (STATE_TAG.equals(field.getTagName())) {\n        String state \u003d field.getTextContent();\n        newQueue.setState(QueueState.getState(state));\n      }\n    }\n    \n    if (!acls.containsKey(submitKey)) {\n      acls.put(submitKey, new AccessControlList(\" \"));\n    }\n    \n    if (!acls.containsKey(adminKey)) {\n      acls.put(adminKey, new AccessControlList(\" \"));\n    }\n    \n    //Set acls\n    newQueue.setAcls(acls);\n    //At this point we have the queue ready at current height level.\n    //so we have parent name available.\n\n    for(Element field:subQueues) {\n      newQueue.addChild(createHierarchy(newQueue.getName(), field));\n    }\n    return newQueue;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/QueueConfigurationParser.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/QueueConfigurationParser.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/QueueConfigurationParser.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private Queue createHierarchy(String parent, Element queueNode) {\n\n    if (queueNode \u003d\u003d null) {\n      return null;\n    }\n    //Name of the current queue.\n    //Complete qualified queue name.\n    String name \u003d \"\";\n    Queue newQueue \u003d new Queue();\n    Map\u003cString, AccessControlList\u003e acls \u003d\n      new HashMap\u003cString, AccessControlList\u003e();\n\n    NodeList fields \u003d queueNode.getChildNodes();\n    validate(queueNode);\n    List\u003cElement\u003e subQueues \u003d new ArrayList\u003cElement\u003e();\n\n    String submitKey \u003d \"\";\n    String adminKey \u003d \"\";\n    \n    for (int j \u003d 0; j \u003c fields.getLength(); j++) {\n      Node fieldNode \u003d fields.item(j);\n      if (!(fieldNode instanceof Element)) {\n        continue;\n      }\n      Element field \u003d (Element) fieldNode;\n      if (QUEUE_NAME_TAG.equals(field.getTagName())) {\n        String nameValue \u003d field.getTextContent();\n        if (field.getTextContent() \u003d\u003d null ||\n          field.getTextContent().trim().equals(\"\") ||\n          field.getTextContent().contains(NAME_SEPARATOR)) {\n          throw new RuntimeException(\"Improper queue name : \" + nameValue);\n        }\n\n        if (!parent.equals(\"\")) {\n          name +\u003d parent + NAME_SEPARATOR;\n        }\n        //generate the complete qualified name\n        //parent.child\n        name +\u003d nameValue;\n        newQueue.setName(name);\n        submitKey \u003d toFullPropertyName(name,\n            QueueACL.SUBMIT_JOB.getAclName());\n        adminKey \u003d toFullPropertyName(name,\n            QueueACL.ADMINISTER_JOBS.getAclName());\n      }\n\n      if (QUEUE_TAG.equals(field.getTagName()) \u0026\u0026 field.hasChildNodes()) {\n        subQueues.add(field);\n      }\n      if(isAclsEnabled()) {\n        if (ACL_SUBMIT_JOB_TAG.equals(field.getTagName())) {\n          acls.put(submitKey, new AccessControlList(field.getTextContent()));\n        }\n\n        if (ACL_ADMINISTER_JOB_TAG.equals(field.getTagName())) {\n          acls.put(adminKey, new AccessControlList(field.getTextContent()));\n        }\n      }\n\n      if (PROPERTIES_TAG.equals(field.getTagName())) {\n        Properties properties \u003d populateProperties(field);\n        newQueue.setProperties(properties);\n      }\n\n      if (STATE_TAG.equals(field.getTagName())) {\n        String state \u003d field.getTextContent();\n        newQueue.setState(QueueState.getState(state));\n      }\n    }\n    \n    if (!acls.containsKey(submitKey)) {\n      acls.put(submitKey, new AccessControlList(\" \"));\n    }\n    \n    if (!acls.containsKey(adminKey)) {\n      acls.put(adminKey, new AccessControlList(\" \"));\n    }\n    \n    //Set acls\n    newQueue.setAcls(acls);\n    //At this point we have the queue ready at current height level.\n    //so we have parent name available.\n\n    for(Element field:subQueues) {\n      newQueue.addChild(createHierarchy(newQueue.getName(), field));\n    }\n    return newQueue;\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/QueueConfigurationParser.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapred/QueueConfigurationParser.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/QueueConfigurationParser.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,88 @@\n+  private Queue createHierarchy(String parent, Element queueNode) {\n+\n+    if (queueNode \u003d\u003d null) {\n+      return null;\n+    }\n+    //Name of the current queue.\n+    //Complete qualified queue name.\n+    String name \u003d \"\";\n+    Queue newQueue \u003d new Queue();\n+    Map\u003cString, AccessControlList\u003e acls \u003d\n+      new HashMap\u003cString, AccessControlList\u003e();\n+\n+    NodeList fields \u003d queueNode.getChildNodes();\n+    validate(queueNode);\n+    List\u003cElement\u003e subQueues \u003d new ArrayList\u003cElement\u003e();\n+\n+    String submitKey \u003d \"\";\n+    String adminKey \u003d \"\";\n+    \n+    for (int j \u003d 0; j \u003c fields.getLength(); j++) {\n+      Node fieldNode \u003d fields.item(j);\n+      if (!(fieldNode instanceof Element)) {\n+        continue;\n+      }\n+      Element field \u003d (Element) fieldNode;\n+      if (QUEUE_NAME_TAG.equals(field.getTagName())) {\n+        String nameValue \u003d field.getTextContent();\n+        if (field.getTextContent() \u003d\u003d null ||\n+          field.getTextContent().trim().equals(\"\") ||\n+          field.getTextContent().contains(NAME_SEPARATOR)) {\n+          throw new RuntimeException(\"Improper queue name : \" + nameValue);\n+        }\n+\n+        if (!parent.equals(\"\")) {\n+          name +\u003d parent + NAME_SEPARATOR;\n+        }\n+        //generate the complete qualified name\n+        //parent.child\n+        name +\u003d nameValue;\n+        newQueue.setName(name);\n+        submitKey \u003d toFullPropertyName(name,\n+            QueueACL.SUBMIT_JOB.getAclName());\n+        adminKey \u003d toFullPropertyName(name,\n+            QueueACL.ADMINISTER_JOBS.getAclName());\n+      }\n+\n+      if (QUEUE_TAG.equals(field.getTagName()) \u0026\u0026 field.hasChildNodes()) {\n+        subQueues.add(field);\n+      }\n+      if(isAclsEnabled()) {\n+        if (ACL_SUBMIT_JOB_TAG.equals(field.getTagName())) {\n+          acls.put(submitKey, new AccessControlList(field.getTextContent()));\n+        }\n+\n+        if (ACL_ADMINISTER_JOB_TAG.equals(field.getTagName())) {\n+          acls.put(adminKey, new AccessControlList(field.getTextContent()));\n+        }\n+      }\n+\n+      if (PROPERTIES_TAG.equals(field.getTagName())) {\n+        Properties properties \u003d populateProperties(field);\n+        newQueue.setProperties(properties);\n+      }\n+\n+      if (STATE_TAG.equals(field.getTagName())) {\n+        String state \u003d field.getTextContent();\n+        newQueue.setState(QueueState.getState(state));\n+      }\n+    }\n+    \n+    if (!acls.containsKey(submitKey)) {\n+      acls.put(submitKey, new AccessControlList(\" \"));\n+    }\n+    \n+    if (!acls.containsKey(adminKey)) {\n+      acls.put(adminKey, new AccessControlList(\" \"));\n+    }\n+    \n+    //Set acls\n+    newQueue.setAcls(acls);\n+    //At this point we have the queue ready at current height level.\n+    //so we have parent name available.\n+\n+    for(Element field:subQueues) {\n+      newQueue.addChild(createHierarchy(newQueue.getName(), field));\n+    }\n+    return newQueue;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Queue createHierarchy(String parent, Element queueNode) {\n\n    if (queueNode \u003d\u003d null) {\n      return null;\n    }\n    //Name of the current queue.\n    //Complete qualified queue name.\n    String name \u003d \"\";\n    Queue newQueue \u003d new Queue();\n    Map\u003cString, AccessControlList\u003e acls \u003d\n      new HashMap\u003cString, AccessControlList\u003e();\n\n    NodeList fields \u003d queueNode.getChildNodes();\n    validate(queueNode);\n    List\u003cElement\u003e subQueues \u003d new ArrayList\u003cElement\u003e();\n\n    String submitKey \u003d \"\";\n    String adminKey \u003d \"\";\n    \n    for (int j \u003d 0; j \u003c fields.getLength(); j++) {\n      Node fieldNode \u003d fields.item(j);\n      if (!(fieldNode instanceof Element)) {\n        continue;\n      }\n      Element field \u003d (Element) fieldNode;\n      if (QUEUE_NAME_TAG.equals(field.getTagName())) {\n        String nameValue \u003d field.getTextContent();\n        if (field.getTextContent() \u003d\u003d null ||\n          field.getTextContent().trim().equals(\"\") ||\n          field.getTextContent().contains(NAME_SEPARATOR)) {\n          throw new RuntimeException(\"Improper queue name : \" + nameValue);\n        }\n\n        if (!parent.equals(\"\")) {\n          name +\u003d parent + NAME_SEPARATOR;\n        }\n        //generate the complete qualified name\n        //parent.child\n        name +\u003d nameValue;\n        newQueue.setName(name);\n        submitKey \u003d toFullPropertyName(name,\n            QueueACL.SUBMIT_JOB.getAclName());\n        adminKey \u003d toFullPropertyName(name,\n            QueueACL.ADMINISTER_JOBS.getAclName());\n      }\n\n      if (QUEUE_TAG.equals(field.getTagName()) \u0026\u0026 field.hasChildNodes()) {\n        subQueues.add(field);\n      }\n      if(isAclsEnabled()) {\n        if (ACL_SUBMIT_JOB_TAG.equals(field.getTagName())) {\n          acls.put(submitKey, new AccessControlList(field.getTextContent()));\n        }\n\n        if (ACL_ADMINISTER_JOB_TAG.equals(field.getTagName())) {\n          acls.put(adminKey, new AccessControlList(field.getTextContent()));\n        }\n      }\n\n      if (PROPERTIES_TAG.equals(field.getTagName())) {\n        Properties properties \u003d populateProperties(field);\n        newQueue.setProperties(properties);\n      }\n\n      if (STATE_TAG.equals(field.getTagName())) {\n        String state \u003d field.getTextContent();\n        newQueue.setState(QueueState.getState(state));\n      }\n    }\n    \n    if (!acls.containsKey(submitKey)) {\n      acls.put(submitKey, new AccessControlList(\" \"));\n    }\n    \n    if (!acls.containsKey(adminKey)) {\n      acls.put(adminKey, new AccessControlList(\" \"));\n    }\n    \n    //Set acls\n    newQueue.setAcls(acls);\n    //At this point we have the queue ready at current height level.\n    //so we have parent name available.\n\n    for(Element field:subQueues) {\n      newQueue.addChild(createHierarchy(newQueue.getName(), field));\n    }\n    return newQueue;\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapred/QueueConfigurationParser.java"
    }
  }
}