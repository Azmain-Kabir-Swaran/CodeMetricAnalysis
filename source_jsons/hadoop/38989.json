{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ActivitiesManager.java",
  "functionName": "dynamicallyUpdateAppActivitiesMaxQueueLengthIfNeeded",
  "functionId": "dynamicallyUpdateAppActivitiesMaxQueueLengthIfNeeded",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/activities/ActivitiesManager.java",
  "functionStartLine": 233,
  "functionEndLine": 269,
  "numCommitsSeen": 16,
  "timeTaken": 1262,
  "changeHistory": [
    "cbae2413201bc470b5f16421ea69d1cd9edb64a8"
  ],
  "changeHistoryShort": {
    "cbae2413201bc470b5f16421ea69d1cd9edb64a8": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cbae2413201bc470b5f16421ea69d1cd9edb64a8": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9623. Auto adjust max queue length of app activities to make sure activities on all nodes can be covered. Contributed by Tao Yang.\n",
      "commitDate": "28/06/19 8:24 AM",
      "commitName": "cbae2413201bc470b5f16421ea69d1cd9edb64a8",
      "commitAuthor": "Weiwei Yang",
      "diff": "@@ -0,0 +1,37 @@\n+  private void dynamicallyUpdateAppActivitiesMaxQueueLengthIfNeeded() {\n+    if (rmContext.getRMNodes() \u003d\u003d null) {\n+      return;\n+    }\n+    if (rmContext.getScheduler() instanceof CapacityScheduler) {\n+      CapacityScheduler cs \u003d (CapacityScheduler) rmContext.getScheduler();\n+      if (!cs.isMultiNodePlacementEnabled()) {\n+        int numNodes \u003d rmContext.getRMNodes().size();\n+        int newAppActivitiesMaxQueueLength;\n+        int numAsyncSchedulerThreads \u003d cs.getNumAsyncSchedulerThreads();\n+        if (numAsyncSchedulerThreads \u003e 0) {\n+          newAppActivitiesMaxQueueLength \u003d\n+              Math.max(configuredAppActivitiesMaxQueueLength,\n+                  numNodes * numAsyncSchedulerThreads);\n+        } else {\n+          newAppActivitiesMaxQueueLength \u003d\n+              Math.max(configuredAppActivitiesMaxQueueLength,\n+                  (int) (numNodes * 1.2));\n+        }\n+        if (appActivitiesMaxQueueLength !\u003d newAppActivitiesMaxQueueLength) {\n+          LOG.info(\"Update max queue length of app activities from {} to {},\"\n+                  + \" configured\u003d{}, numNodes\u003d{}, numAsyncSchedulerThreads\u003d{}\"\n+                  + \" when multi-node placement disabled.\",\n+              appActivitiesMaxQueueLength, newAppActivitiesMaxQueueLength,\n+              configuredAppActivitiesMaxQueueLength, numNodes,\n+              numAsyncSchedulerThreads);\n+          appActivitiesMaxQueueLength \u003d newAppActivitiesMaxQueueLength;\n+        }\n+      } else if (appActivitiesMaxQueueLength\n+          !\u003d configuredAppActivitiesMaxQueueLength) {\n+        LOG.info(\"Update max queue length of app activities from {} to {}\"\n+                + \" when multi-node placement enabled.\",\n+            appActivitiesMaxQueueLength, configuredAppActivitiesMaxQueueLength);\n+        appActivitiesMaxQueueLength \u003d configuredAppActivitiesMaxQueueLength;\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void dynamicallyUpdateAppActivitiesMaxQueueLengthIfNeeded() {\n    if (rmContext.getRMNodes() \u003d\u003d null) {\n      return;\n    }\n    if (rmContext.getScheduler() instanceof CapacityScheduler) {\n      CapacityScheduler cs \u003d (CapacityScheduler) rmContext.getScheduler();\n      if (!cs.isMultiNodePlacementEnabled()) {\n        int numNodes \u003d rmContext.getRMNodes().size();\n        int newAppActivitiesMaxQueueLength;\n        int numAsyncSchedulerThreads \u003d cs.getNumAsyncSchedulerThreads();\n        if (numAsyncSchedulerThreads \u003e 0) {\n          newAppActivitiesMaxQueueLength \u003d\n              Math.max(configuredAppActivitiesMaxQueueLength,\n                  numNodes * numAsyncSchedulerThreads);\n        } else {\n          newAppActivitiesMaxQueueLength \u003d\n              Math.max(configuredAppActivitiesMaxQueueLength,\n                  (int) (numNodes * 1.2));\n        }\n        if (appActivitiesMaxQueueLength !\u003d newAppActivitiesMaxQueueLength) {\n          LOG.info(\"Update max queue length of app activities from {} to {},\"\n                  + \" configured\u003d{}, numNodes\u003d{}, numAsyncSchedulerThreads\u003d{}\"\n                  + \" when multi-node placement disabled.\",\n              appActivitiesMaxQueueLength, newAppActivitiesMaxQueueLength,\n              configuredAppActivitiesMaxQueueLength, numNodes,\n              numAsyncSchedulerThreads);\n          appActivitiesMaxQueueLength \u003d newAppActivitiesMaxQueueLength;\n        }\n      } else if (appActivitiesMaxQueueLength\n          !\u003d configuredAppActivitiesMaxQueueLength) {\n        LOG.info(\"Update max queue length of app activities from {} to {}\"\n                + \" when multi-node placement enabled.\",\n            appActivitiesMaxQueueLength, configuredAppActivitiesMaxQueueLength);\n        appActivitiesMaxQueueLength \u003d configuredAppActivitiesMaxQueueLength;\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/activities/ActivitiesManager.java"
    }
  }
}