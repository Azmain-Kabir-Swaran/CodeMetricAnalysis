{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSDirWriteFileOp.java",
  "functionName": "addBlock",
  "functionId": "addBlock___fsd-FSDirectory__path-String__inodesInPath-INodesInPath__block-Block__targets-DatanodeStorageInfo[]__blockType-BlockType",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java",
  "functionStartLine": 487,
  "functionEndLine": 534,
  "numCommitsSeen": 114,
  "timeTaken": 3172,
  "changeHistory": [
    "3085a604300ed76d06a0011bd5555e419897b6cd",
    "a2a5d7b5bca715835d92816e7b267b59f7270708"
  ],
  "changeHistoryShort": {
    "3085a604300ed76d06a0011bd5555e419897b6cd": "Ybodychange",
    "a2a5d7b5bca715835d92816e7b267b59f7270708": "Ymultichange(Yparameterchange,Ybodychange)"
  },
  "changeHistoryDetails": {
    "3085a604300ed76d06a0011bd5555e419897b6cd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8112. Relax permission checking for EC related operations.\n",
      "commitDate": "03/03/17 1:00 PM",
      "commitName": "3085a604300ed76d06a0011bd5555e419897b6cd",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "27/02/17 5:07 PM",
      "commitNameOld": "55c07bbed2f475f7b584a86112ee1b6fe0221e98",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 3.83,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,48 @@\n   private static BlockInfo addBlock(FSDirectory fsd, String path,\n       INodesInPath inodesInPath, Block block, DatanodeStorageInfo[] targets,\n       BlockType blockType) throws IOException {\n     fsd.writeLock();\n     try {\n       final INodeFile fileINode \u003d inodesInPath.getLastINode().asFile();\n       Preconditions.checkState(fileINode.isUnderConstruction());\n \n       // associate new last block for the file\n       final BlockInfo blockInfo;\n       if (blockType \u003d\u003d BlockType.STRIPED) {\n-        ErasureCodingPolicy ecPolicy \u003d FSDirErasureCodingOp.getErasureCodingPolicy(\n-            fsd.getFSNamesystem(), inodesInPath);\n+        ErasureCodingPolicy ecPolicy \u003d\n+            FSDirErasureCodingOp.unprotectedGetErasureCodingPolicy(\n+                fsd.getFSNamesystem(), inodesInPath);\n         short numDataUnits \u003d (short) ecPolicy.getNumDataUnits();\n         short numParityUnits \u003d (short) ecPolicy.getNumParityUnits();\n         short numLocations \u003d (short) (numDataUnits + numParityUnits);\n \n         // check quota limits and updated space consumed\n         fsd.updateCount(inodesInPath, 0, fileINode.getPreferredBlockSize(),\n             numLocations, true);\n         blockInfo \u003d new BlockInfoStriped(block, ecPolicy);\n         blockInfo.convertToBlockUnderConstruction(\n             HdfsServerConstants.BlockUCState.UNDER_CONSTRUCTION, targets);\n       } else {\n         // check quota limits and updated space consumed\n         fsd.updateCount(inodesInPath, 0, fileINode.getPreferredBlockSize(),\n             fileINode.getFileReplication(), true);\n \n         short numLocations \u003d fileINode.getFileReplication();\n         blockInfo \u003d new BlockInfoContiguous(block, numLocations);\n         blockInfo.convertToBlockUnderConstruction(\n             HdfsServerConstants.BlockUCState.UNDER_CONSTRUCTION, targets);\n       }\n       fsd.getBlockManager().addBlockCollection(blockInfo, fileINode);\n       fileINode.addBlock(blockInfo);\n \n       if(NameNode.stateChangeLog.isDebugEnabled()) {\n         NameNode.stateChangeLog.debug(\"DIR* FSDirectory.addBlock: \"\n             + path + \" with \" + block\n             + \" block is added to the in-memory \"\n             + \"file system\");\n       }\n       return blockInfo;\n     } finally {\n       fsd.writeUnlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static BlockInfo addBlock(FSDirectory fsd, String path,\n      INodesInPath inodesInPath, Block block, DatanodeStorageInfo[] targets,\n      BlockType blockType) throws IOException {\n    fsd.writeLock();\n    try {\n      final INodeFile fileINode \u003d inodesInPath.getLastINode().asFile();\n      Preconditions.checkState(fileINode.isUnderConstruction());\n\n      // associate new last block for the file\n      final BlockInfo blockInfo;\n      if (blockType \u003d\u003d BlockType.STRIPED) {\n        ErasureCodingPolicy ecPolicy \u003d\n            FSDirErasureCodingOp.unprotectedGetErasureCodingPolicy(\n                fsd.getFSNamesystem(), inodesInPath);\n        short numDataUnits \u003d (short) ecPolicy.getNumDataUnits();\n        short numParityUnits \u003d (short) ecPolicy.getNumParityUnits();\n        short numLocations \u003d (short) (numDataUnits + numParityUnits);\n\n        // check quota limits and updated space consumed\n        fsd.updateCount(inodesInPath, 0, fileINode.getPreferredBlockSize(),\n            numLocations, true);\n        blockInfo \u003d new BlockInfoStriped(block, ecPolicy);\n        blockInfo.convertToBlockUnderConstruction(\n            HdfsServerConstants.BlockUCState.UNDER_CONSTRUCTION, targets);\n      } else {\n        // check quota limits and updated space consumed\n        fsd.updateCount(inodesInPath, 0, fileINode.getPreferredBlockSize(),\n            fileINode.getFileReplication(), true);\n\n        short numLocations \u003d fileINode.getFileReplication();\n        blockInfo \u003d new BlockInfoContiguous(block, numLocations);\n        blockInfo.convertToBlockUnderConstruction(\n            HdfsServerConstants.BlockUCState.UNDER_CONSTRUCTION, targets);\n      }\n      fsd.getBlockManager().addBlockCollection(blockInfo, fileINode);\n      fileINode.addBlock(blockInfo);\n\n      if(NameNode.stateChangeLog.isDebugEnabled()) {\n        NameNode.stateChangeLog.debug(\"DIR* FSDirectory.addBlock: \"\n            + path + \" with \" + block\n            + \" block is added to the in-memory \"\n            + \"file system\");\n      }\n      return blockInfo;\n    } finally {\n      fsd.writeUnlock();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java",
      "extendedDetails": {}
    },
    "a2a5d7b5bca715835d92816e7b267b59f7270708": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-10759. Change fsimage bool isStriped from boolean to an enum. Contributed by Ewan Higgs.\n",
      "commitDate": "18/01/17 1:31 PM",
      "commitName": "a2a5d7b5bca715835d92816e7b267b59f7270708",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-10759. Change fsimage bool isStriped from boolean to an enum. Contributed by Ewan Higgs.\n",
          "commitDate": "18/01/17 1:31 PM",
          "commitName": "a2a5d7b5bca715835d92816e7b267b59f7270708",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "24/10/16 3:14 PM",
          "commitNameOld": "9d175853b0170683ad5f21d9bcdeaac49fe89e04",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 85.97,
          "commitsBetweenForRepo": 568,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,47 @@\n   private static BlockInfo addBlock(FSDirectory fsd, String path,\n       INodesInPath inodesInPath, Block block, DatanodeStorageInfo[] targets,\n-      boolean isStriped) throws IOException {\n+      BlockType blockType) throws IOException {\n     fsd.writeLock();\n     try {\n       final INodeFile fileINode \u003d inodesInPath.getLastINode().asFile();\n       Preconditions.checkState(fileINode.isUnderConstruction());\n \n       // associate new last block for the file\n       final BlockInfo blockInfo;\n-      if (isStriped) {\n+      if (blockType \u003d\u003d BlockType.STRIPED) {\n         ErasureCodingPolicy ecPolicy \u003d FSDirErasureCodingOp.getErasureCodingPolicy(\n             fsd.getFSNamesystem(), inodesInPath);\n         short numDataUnits \u003d (short) ecPolicy.getNumDataUnits();\n         short numParityUnits \u003d (short) ecPolicy.getNumParityUnits();\n         short numLocations \u003d (short) (numDataUnits + numParityUnits);\n \n         // check quota limits and updated space consumed\n         fsd.updateCount(inodesInPath, 0, fileINode.getPreferredBlockSize(),\n             numLocations, true);\n         blockInfo \u003d new BlockInfoStriped(block, ecPolicy);\n         blockInfo.convertToBlockUnderConstruction(\n             HdfsServerConstants.BlockUCState.UNDER_CONSTRUCTION, targets);\n       } else {\n         // check quota limits and updated space consumed\n         fsd.updateCount(inodesInPath, 0, fileINode.getPreferredBlockSize(),\n             fileINode.getFileReplication(), true);\n \n         short numLocations \u003d fileINode.getFileReplication();\n         blockInfo \u003d new BlockInfoContiguous(block, numLocations);\n         blockInfo.convertToBlockUnderConstruction(\n             HdfsServerConstants.BlockUCState.UNDER_CONSTRUCTION, targets);\n       }\n       fsd.getBlockManager().addBlockCollection(blockInfo, fileINode);\n       fileINode.addBlock(blockInfo);\n \n       if(NameNode.stateChangeLog.isDebugEnabled()) {\n         NameNode.stateChangeLog.debug(\"DIR* FSDirectory.addBlock: \"\n             + path + \" with \" + block\n             + \" block is added to the in-memory \"\n             + \"file system\");\n       }\n       return blockInfo;\n     } finally {\n       fsd.writeUnlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static BlockInfo addBlock(FSDirectory fsd, String path,\n      INodesInPath inodesInPath, Block block, DatanodeStorageInfo[] targets,\n      BlockType blockType) throws IOException {\n    fsd.writeLock();\n    try {\n      final INodeFile fileINode \u003d inodesInPath.getLastINode().asFile();\n      Preconditions.checkState(fileINode.isUnderConstruction());\n\n      // associate new last block for the file\n      final BlockInfo blockInfo;\n      if (blockType \u003d\u003d BlockType.STRIPED) {\n        ErasureCodingPolicy ecPolicy \u003d FSDirErasureCodingOp.getErasureCodingPolicy(\n            fsd.getFSNamesystem(), inodesInPath);\n        short numDataUnits \u003d (short) ecPolicy.getNumDataUnits();\n        short numParityUnits \u003d (short) ecPolicy.getNumParityUnits();\n        short numLocations \u003d (short) (numDataUnits + numParityUnits);\n\n        // check quota limits and updated space consumed\n        fsd.updateCount(inodesInPath, 0, fileINode.getPreferredBlockSize(),\n            numLocations, true);\n        blockInfo \u003d new BlockInfoStriped(block, ecPolicy);\n        blockInfo.convertToBlockUnderConstruction(\n            HdfsServerConstants.BlockUCState.UNDER_CONSTRUCTION, targets);\n      } else {\n        // check quota limits and updated space consumed\n        fsd.updateCount(inodesInPath, 0, fileINode.getPreferredBlockSize(),\n            fileINode.getFileReplication(), true);\n\n        short numLocations \u003d fileINode.getFileReplication();\n        blockInfo \u003d new BlockInfoContiguous(block, numLocations);\n        blockInfo.convertToBlockUnderConstruction(\n            HdfsServerConstants.BlockUCState.UNDER_CONSTRUCTION, targets);\n      }\n      fsd.getBlockManager().addBlockCollection(blockInfo, fileINode);\n      fileINode.addBlock(blockInfo);\n\n      if(NameNode.stateChangeLog.isDebugEnabled()) {\n        NameNode.stateChangeLog.debug(\"DIR* FSDirectory.addBlock: \"\n            + path + \" with \" + block\n            + \" block is added to the in-memory \"\n            + \"file system\");\n      }\n      return blockInfo;\n    } finally {\n      fsd.writeUnlock();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java",
          "extendedDetails": {
            "oldValue": "[fsd-FSDirectory, path-String, inodesInPath-INodesInPath, block-Block, targets-DatanodeStorageInfo[], isStriped-boolean]",
            "newValue": "[fsd-FSDirectory, path-String, inodesInPath-INodesInPath, block-Block, targets-DatanodeStorageInfo[], blockType-BlockType]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-10759. Change fsimage bool isStriped from boolean to an enum. Contributed by Ewan Higgs.\n",
          "commitDate": "18/01/17 1:31 PM",
          "commitName": "a2a5d7b5bca715835d92816e7b267b59f7270708",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "24/10/16 3:14 PM",
          "commitNameOld": "9d175853b0170683ad5f21d9bcdeaac49fe89e04",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 85.97,
          "commitsBetweenForRepo": 568,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,47 @@\n   private static BlockInfo addBlock(FSDirectory fsd, String path,\n       INodesInPath inodesInPath, Block block, DatanodeStorageInfo[] targets,\n-      boolean isStriped) throws IOException {\n+      BlockType blockType) throws IOException {\n     fsd.writeLock();\n     try {\n       final INodeFile fileINode \u003d inodesInPath.getLastINode().asFile();\n       Preconditions.checkState(fileINode.isUnderConstruction());\n \n       // associate new last block for the file\n       final BlockInfo blockInfo;\n-      if (isStriped) {\n+      if (blockType \u003d\u003d BlockType.STRIPED) {\n         ErasureCodingPolicy ecPolicy \u003d FSDirErasureCodingOp.getErasureCodingPolicy(\n             fsd.getFSNamesystem(), inodesInPath);\n         short numDataUnits \u003d (short) ecPolicy.getNumDataUnits();\n         short numParityUnits \u003d (short) ecPolicy.getNumParityUnits();\n         short numLocations \u003d (short) (numDataUnits + numParityUnits);\n \n         // check quota limits and updated space consumed\n         fsd.updateCount(inodesInPath, 0, fileINode.getPreferredBlockSize(),\n             numLocations, true);\n         blockInfo \u003d new BlockInfoStriped(block, ecPolicy);\n         blockInfo.convertToBlockUnderConstruction(\n             HdfsServerConstants.BlockUCState.UNDER_CONSTRUCTION, targets);\n       } else {\n         // check quota limits and updated space consumed\n         fsd.updateCount(inodesInPath, 0, fileINode.getPreferredBlockSize(),\n             fileINode.getFileReplication(), true);\n \n         short numLocations \u003d fileINode.getFileReplication();\n         blockInfo \u003d new BlockInfoContiguous(block, numLocations);\n         blockInfo.convertToBlockUnderConstruction(\n             HdfsServerConstants.BlockUCState.UNDER_CONSTRUCTION, targets);\n       }\n       fsd.getBlockManager().addBlockCollection(blockInfo, fileINode);\n       fileINode.addBlock(blockInfo);\n \n       if(NameNode.stateChangeLog.isDebugEnabled()) {\n         NameNode.stateChangeLog.debug(\"DIR* FSDirectory.addBlock: \"\n             + path + \" with \" + block\n             + \" block is added to the in-memory \"\n             + \"file system\");\n       }\n       return blockInfo;\n     } finally {\n       fsd.writeUnlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static BlockInfo addBlock(FSDirectory fsd, String path,\n      INodesInPath inodesInPath, Block block, DatanodeStorageInfo[] targets,\n      BlockType blockType) throws IOException {\n    fsd.writeLock();\n    try {\n      final INodeFile fileINode \u003d inodesInPath.getLastINode().asFile();\n      Preconditions.checkState(fileINode.isUnderConstruction());\n\n      // associate new last block for the file\n      final BlockInfo blockInfo;\n      if (blockType \u003d\u003d BlockType.STRIPED) {\n        ErasureCodingPolicy ecPolicy \u003d FSDirErasureCodingOp.getErasureCodingPolicy(\n            fsd.getFSNamesystem(), inodesInPath);\n        short numDataUnits \u003d (short) ecPolicy.getNumDataUnits();\n        short numParityUnits \u003d (short) ecPolicy.getNumParityUnits();\n        short numLocations \u003d (short) (numDataUnits + numParityUnits);\n\n        // check quota limits and updated space consumed\n        fsd.updateCount(inodesInPath, 0, fileINode.getPreferredBlockSize(),\n            numLocations, true);\n        blockInfo \u003d new BlockInfoStriped(block, ecPolicy);\n        blockInfo.convertToBlockUnderConstruction(\n            HdfsServerConstants.BlockUCState.UNDER_CONSTRUCTION, targets);\n      } else {\n        // check quota limits and updated space consumed\n        fsd.updateCount(inodesInPath, 0, fileINode.getPreferredBlockSize(),\n            fileINode.getFileReplication(), true);\n\n        short numLocations \u003d fileINode.getFileReplication();\n        blockInfo \u003d new BlockInfoContiguous(block, numLocations);\n        blockInfo.convertToBlockUnderConstruction(\n            HdfsServerConstants.BlockUCState.UNDER_CONSTRUCTION, targets);\n      }\n      fsd.getBlockManager().addBlockCollection(blockInfo, fileINode);\n      fileINode.addBlock(blockInfo);\n\n      if(NameNode.stateChangeLog.isDebugEnabled()) {\n        NameNode.stateChangeLog.debug(\"DIR* FSDirectory.addBlock: \"\n            + path + \" with \" + block\n            + \" block is added to the in-memory \"\n            + \"file system\");\n      }\n      return blockInfo;\n    } finally {\n      fsd.writeUnlock();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java",
          "extendedDetails": {}
        }
      ]
    }
  }
}