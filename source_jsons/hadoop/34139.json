{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainerScheduler.java",
  "functionName": "recoverActiveContainer",
  "functionId": "recoverActiveContainer___container-Container__rcs-RecoveredContainerState",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/ContainerScheduler.java",
  "functionStartLine": 258,
  "functionEndLine": 285,
  "numCommitsSeen": 37,
  "timeTaken": 3270,
  "changeHistory": [
    "489411579c5e30c1dc855c4fd3d5f7f68a58b27e",
    "9d3c39e9dd88b8f32223c01328581bb68507d415",
    "a50be1b8f432f50c940b66d12c7de87b95ea47c0"
  ],
  "changeHistoryShort": {
    "489411579c5e30c1dc855c4fd3d5f7f68a58b27e": "Ybodychange",
    "9d3c39e9dd88b8f32223c01328581bb68507d415": "Ymultichange(Yparameterchange,Ybodychange)",
    "a50be1b8f432f50c940b66d12c7de87b95ea47c0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "489411579c5e30c1dc855c4fd3d5f7f68a58b27e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9169. Add metrics for queued opportunistic and guaranteed containers. Contributed by Abhishek Modi.\n",
      "commitDate": "07/01/19 3:16 PM",
      "commitName": "489411579c5e30c1dc855c4fd3d5f7f68a58b27e",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "04/01/19 11:16 AM",
      "commitNameOld": "6e35f7130fb3fb17665e818f838ed750425348c0",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 3.17,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,28 @@\n   public void recoverActiveContainer(Container container,\n       RecoveredContainerState rcs) {\n     ExecutionType execType \u003d\n         container.getContainerTokenIdentifier().getExecutionType();\n     if (rcs.getStatus() \u003d\u003d RecoveredContainerStatus.QUEUED\n         || rcs.getStatus() \u003d\u003d RecoveredContainerStatus.PAUSED) {\n       if (execType \u003d\u003d ExecutionType.GUARANTEED) {\n         queuedGuaranteedContainers.put(container.getContainerId(), container);\n       } else if (execType \u003d\u003d ExecutionType.OPPORTUNISTIC) {\n         queuedOpportunisticContainers\n             .put(container.getContainerId(), container);\n       } else {\n         LOG.error(\n             \"UnKnown execution type received \" + container.getContainerId()\n                 + \", execType \" + execType);\n       }\n+      metrics.setQueuedContainers(queuedOpportunisticContainers.size(),\n+          queuedGuaranteedContainers.size());\n     } else if (rcs.getStatus() \u003d\u003d RecoveredContainerStatus.LAUNCHED) {\n       runningContainers.put(container.getContainerId(), container);\n       utilizationTracker.addContainerResources(container);\n     }\n     if (rcs.getStatus() !\u003d RecoveredContainerStatus.COMPLETED\n             \u0026\u0026 rcs.getCapability() !\u003d null) {\n       metrics.launchedContainer();\n       metrics.allocateContainer(rcs.getCapability());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void recoverActiveContainer(Container container,\n      RecoveredContainerState rcs) {\n    ExecutionType execType \u003d\n        container.getContainerTokenIdentifier().getExecutionType();\n    if (rcs.getStatus() \u003d\u003d RecoveredContainerStatus.QUEUED\n        || rcs.getStatus() \u003d\u003d RecoveredContainerStatus.PAUSED) {\n      if (execType \u003d\u003d ExecutionType.GUARANTEED) {\n        queuedGuaranteedContainers.put(container.getContainerId(), container);\n      } else if (execType \u003d\u003d ExecutionType.OPPORTUNISTIC) {\n        queuedOpportunisticContainers\n            .put(container.getContainerId(), container);\n      } else {\n        LOG.error(\n            \"UnKnown execution type received \" + container.getContainerId()\n                + \", execType \" + execType);\n      }\n      metrics.setQueuedContainers(queuedOpportunisticContainers.size(),\n          queuedGuaranteedContainers.size());\n    } else if (rcs.getStatus() \u003d\u003d RecoveredContainerStatus.LAUNCHED) {\n      runningContainers.put(container.getContainerId(), container);\n      utilizationTracker.addContainerResources(container);\n    }\n    if (rcs.getStatus() !\u003d RecoveredContainerStatus.COMPLETED\n            \u0026\u0026 rcs.getCapability() !\u003d null) {\n      metrics.launchedContainer();\n      metrics.allocateContainer(rcs.getCapability());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/ContainerScheduler.java",
      "extendedDetails": {}
    },
    "9d3c39e9dd88b8f32223c01328581bb68507d415": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-6966. NodeManager metrics may return wrong negative values when NM restart. (Szilard Nemeth via Haibo Chen)\n",
      "commitDate": "23/07/18 11:07 AM",
      "commitName": "9d3c39e9dd88b8f32223c01328581bb68507d415",
      "commitAuthor": "Haibo Chen",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6966. NodeManager metrics may return wrong negative values when NM restart. (Szilard Nemeth via Haibo Chen)\n",
          "commitDate": "23/07/18 11:07 AM",
          "commitName": "9d3c39e9dd88b8f32223c01328581bb68507d415",
          "commitAuthor": "Haibo Chen",
          "commitDateOld": "10/05/18 11:01 AM",
          "commitNameOld": "6341c3a437489737a9c4bf0911b218b0023d8dd9",
          "commitAuthorOld": "Haibo Chen",
          "daysBetweenCommits": 74.0,
          "commitsBetweenForRepo": 524,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,26 @@\n   public void recoverActiveContainer(Container container,\n-      RecoveredContainerStatus rcs) {\n+      RecoveredContainerState rcs) {\n     ExecutionType execType \u003d\n         container.getContainerTokenIdentifier().getExecutionType();\n-    if (rcs \u003d\u003d RecoveredContainerStatus.QUEUED\n-        || rcs \u003d\u003d RecoveredContainerStatus.PAUSED) {\n+    if (rcs.getStatus() \u003d\u003d RecoveredContainerStatus.QUEUED\n+        || rcs.getStatus() \u003d\u003d RecoveredContainerStatus.PAUSED) {\n       if (execType \u003d\u003d ExecutionType.GUARANTEED) {\n         queuedGuaranteedContainers.put(container.getContainerId(), container);\n       } else if (execType \u003d\u003d ExecutionType.OPPORTUNISTIC) {\n         queuedOpportunisticContainers\n             .put(container.getContainerId(), container);\n       } else {\n         LOG.error(\n             \"UnKnown execution type received \" + container.getContainerId()\n                 + \", execType \" + execType);\n       }\n-    } else if (rcs \u003d\u003d RecoveredContainerStatus.LAUNCHED) {\n+    } else if (rcs.getStatus() \u003d\u003d RecoveredContainerStatus.LAUNCHED) {\n       runningContainers.put(container.getContainerId(), container);\n       utilizationTracker.addContainerResources(container);\n     }\n+    if (rcs.getStatus() !\u003d RecoveredContainerStatus.COMPLETED\n+            \u0026\u0026 rcs.getCapability() !\u003d null) {\n+      metrics.launchedContainer();\n+      metrics.allocateContainer(rcs.getCapability());\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void recoverActiveContainer(Container container,\n      RecoveredContainerState rcs) {\n    ExecutionType execType \u003d\n        container.getContainerTokenIdentifier().getExecutionType();\n    if (rcs.getStatus() \u003d\u003d RecoveredContainerStatus.QUEUED\n        || rcs.getStatus() \u003d\u003d RecoveredContainerStatus.PAUSED) {\n      if (execType \u003d\u003d ExecutionType.GUARANTEED) {\n        queuedGuaranteedContainers.put(container.getContainerId(), container);\n      } else if (execType \u003d\u003d ExecutionType.OPPORTUNISTIC) {\n        queuedOpportunisticContainers\n            .put(container.getContainerId(), container);\n      } else {\n        LOG.error(\n            \"UnKnown execution type received \" + container.getContainerId()\n                + \", execType \" + execType);\n      }\n    } else if (rcs.getStatus() \u003d\u003d RecoveredContainerStatus.LAUNCHED) {\n      runningContainers.put(container.getContainerId(), container);\n      utilizationTracker.addContainerResources(container);\n    }\n    if (rcs.getStatus() !\u003d RecoveredContainerStatus.COMPLETED\n            \u0026\u0026 rcs.getCapability() !\u003d null) {\n      metrics.launchedContainer();\n      metrics.allocateContainer(rcs.getCapability());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/ContainerScheduler.java",
          "extendedDetails": {
            "oldValue": "[container-Container, rcs-RecoveredContainerStatus]",
            "newValue": "[container-Container, rcs-RecoveredContainerState]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6966. NodeManager metrics may return wrong negative values when NM restart. (Szilard Nemeth via Haibo Chen)\n",
          "commitDate": "23/07/18 11:07 AM",
          "commitName": "9d3c39e9dd88b8f32223c01328581bb68507d415",
          "commitAuthor": "Haibo Chen",
          "commitDateOld": "10/05/18 11:01 AM",
          "commitNameOld": "6341c3a437489737a9c4bf0911b218b0023d8dd9",
          "commitAuthorOld": "Haibo Chen",
          "daysBetweenCommits": 74.0,
          "commitsBetweenForRepo": 524,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,26 @@\n   public void recoverActiveContainer(Container container,\n-      RecoveredContainerStatus rcs) {\n+      RecoveredContainerState rcs) {\n     ExecutionType execType \u003d\n         container.getContainerTokenIdentifier().getExecutionType();\n-    if (rcs \u003d\u003d RecoveredContainerStatus.QUEUED\n-        || rcs \u003d\u003d RecoveredContainerStatus.PAUSED) {\n+    if (rcs.getStatus() \u003d\u003d RecoveredContainerStatus.QUEUED\n+        || rcs.getStatus() \u003d\u003d RecoveredContainerStatus.PAUSED) {\n       if (execType \u003d\u003d ExecutionType.GUARANTEED) {\n         queuedGuaranteedContainers.put(container.getContainerId(), container);\n       } else if (execType \u003d\u003d ExecutionType.OPPORTUNISTIC) {\n         queuedOpportunisticContainers\n             .put(container.getContainerId(), container);\n       } else {\n         LOG.error(\n             \"UnKnown execution type received \" + container.getContainerId()\n                 + \", execType \" + execType);\n       }\n-    } else if (rcs \u003d\u003d RecoveredContainerStatus.LAUNCHED) {\n+    } else if (rcs.getStatus() \u003d\u003d RecoveredContainerStatus.LAUNCHED) {\n       runningContainers.put(container.getContainerId(), container);\n       utilizationTracker.addContainerResources(container);\n     }\n+    if (rcs.getStatus() !\u003d RecoveredContainerStatus.COMPLETED\n+            \u0026\u0026 rcs.getCapability() !\u003d null) {\n+      metrics.launchedContainer();\n+      metrics.allocateContainer(rcs.getCapability());\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void recoverActiveContainer(Container container,\n      RecoveredContainerState rcs) {\n    ExecutionType execType \u003d\n        container.getContainerTokenIdentifier().getExecutionType();\n    if (rcs.getStatus() \u003d\u003d RecoveredContainerStatus.QUEUED\n        || rcs.getStatus() \u003d\u003d RecoveredContainerStatus.PAUSED) {\n      if (execType \u003d\u003d ExecutionType.GUARANTEED) {\n        queuedGuaranteedContainers.put(container.getContainerId(), container);\n      } else if (execType \u003d\u003d ExecutionType.OPPORTUNISTIC) {\n        queuedOpportunisticContainers\n            .put(container.getContainerId(), container);\n      } else {\n        LOG.error(\n            \"UnKnown execution type received \" + container.getContainerId()\n                + \", execType \" + execType);\n      }\n    } else if (rcs.getStatus() \u003d\u003d RecoveredContainerStatus.LAUNCHED) {\n      runningContainers.put(container.getContainerId(), container);\n      utilizationTracker.addContainerResources(container);\n    }\n    if (rcs.getStatus() !\u003d RecoveredContainerStatus.COMPLETED\n            \u0026\u0026 rcs.getCapability() !\u003d null) {\n      metrics.launchedContainer();\n      metrics.allocateContainer(rcs.getCapability());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/ContainerScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "a50be1b8f432f50c940b66d12c7de87b95ea47c0": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7275. NM Statestore cleanup for Container updates. (Kartheek Muthyala via asuresh)\n",
      "commitDate": "16/10/17 1:12 PM",
      "commitName": "a50be1b8f432f50c940b66d12c7de87b95ea47c0",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,21 @@\n+  public void recoverActiveContainer(Container container,\n+      RecoveredContainerStatus rcs) {\n+    ExecutionType execType \u003d\n+        container.getContainerTokenIdentifier().getExecutionType();\n+    if (rcs \u003d\u003d RecoveredContainerStatus.QUEUED\n+        || rcs \u003d\u003d RecoveredContainerStatus.PAUSED) {\n+      if (execType \u003d\u003d ExecutionType.GUARANTEED) {\n+        queuedGuaranteedContainers.put(container.getContainerId(), container);\n+      } else if (execType \u003d\u003d ExecutionType.OPPORTUNISTIC) {\n+        queuedOpportunisticContainers\n+            .put(container.getContainerId(), container);\n+      } else {\n+        LOG.error(\n+            \"UnKnown execution type received \" + container.getContainerId()\n+                + \", execType \" + execType);\n+      }\n+    } else if (rcs \u003d\u003d RecoveredContainerStatus.LAUNCHED) {\n+      runningContainers.put(container.getContainerId(), container);\n+      utilizationTracker.addContainerResources(container);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void recoverActiveContainer(Container container,\n      RecoveredContainerStatus rcs) {\n    ExecutionType execType \u003d\n        container.getContainerTokenIdentifier().getExecutionType();\n    if (rcs \u003d\u003d RecoveredContainerStatus.QUEUED\n        || rcs \u003d\u003d RecoveredContainerStatus.PAUSED) {\n      if (execType \u003d\u003d ExecutionType.GUARANTEED) {\n        queuedGuaranteedContainers.put(container.getContainerId(), container);\n      } else if (execType \u003d\u003d ExecutionType.OPPORTUNISTIC) {\n        queuedOpportunisticContainers\n            .put(container.getContainerId(), container);\n      } else {\n        LOG.error(\n            \"UnKnown execution type received \" + container.getContainerId()\n                + \", execType \" + execType);\n      }\n    } else if (rcs \u003d\u003d RecoveredContainerStatus.LAUNCHED) {\n      runningContainers.put(container.getContainerId(), container);\n      utilizationTracker.addContainerResources(container);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/scheduler/ContainerScheduler.java"
    }
  }
}