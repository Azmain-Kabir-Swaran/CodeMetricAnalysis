{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JWTRedirectAuthenticationHandler.java",
  "functionName": "init",
  "functionId": "init___config-Properties",
  "sourceFilePath": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/JWTRedirectAuthenticationHandler.java",
  "functionStartLine": 110,
  "functionEndLine": 146,
  "numCommitsSeen": 5,
  "timeTaken": 475,
  "changeHistory": [
    "ce635733144456bce6bcf8664c5850ef6b60aa49"
  ],
  "changeHistoryShort": {
    "ce635733144456bce6bcf8664c5850ef6b60aa49": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ce635733144456bce6bcf8664c5850ef6b60aa49": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-11717. Support JWT tokens for web single sign on to the Hadoop\nservers. (Larry McCay via omalley)\n",
      "commitDate": "07/04/15 8:09 AM",
      "commitName": "ce635733144456bce6bcf8664c5850ef6b60aa49",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,37 @@\n+  public void init(Properties config) throws ServletException {\n+    super.init(config);\n+    // setup the URL to redirect to for authentication\n+    authenticationProviderUrl \u003d config\n+        .getProperty(AUTHENTICATION_PROVIDER_URL);\n+    if (authenticationProviderUrl \u003d\u003d null) {\n+      throw new ServletException(\n+          \"Authentication provider URL must not be null - configure: \"\n+              + AUTHENTICATION_PROVIDER_URL);\n+    }\n+\n+    // setup the public key of the token issuer for verification\n+    if (publicKey \u003d\u003d null) {\n+      String pemPublicKey \u003d config.getProperty(PUBLIC_KEY_PEM);\n+      if (pemPublicKey \u003d\u003d null) {\n+        throw new ServletException(\n+            \"Public key for signature validation must be provisioned.\");\n+      }\n+      publicKey \u003d CertificateUtil.parseRSAPublicKey(pemPublicKey);\n+    }\n+    // setup the list of valid audiences for token validation\n+    String auds \u003d config.getProperty(EXPECTED_JWT_AUDIENCES);\n+    if (auds !\u003d null) {\n+      // parse into the list\n+      String[] audArray \u003d auds.split(\",\");\n+      audiences \u003d new ArrayList\u003cString\u003e();\n+      for (String a : audArray) {\n+        audiences.add(a);\n+      }\n+    }\n+\n+    // setup custom cookie name if configured\n+    String customCookieName \u003d config.getProperty(JWT_COOKIE_NAME);\n+    if (customCookieName !\u003d null) {\n+      cookieName \u003d customCookieName;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Properties config) throws ServletException {\n    super.init(config);\n    // setup the URL to redirect to for authentication\n    authenticationProviderUrl \u003d config\n        .getProperty(AUTHENTICATION_PROVIDER_URL);\n    if (authenticationProviderUrl \u003d\u003d null) {\n      throw new ServletException(\n          \"Authentication provider URL must not be null - configure: \"\n              + AUTHENTICATION_PROVIDER_URL);\n    }\n\n    // setup the public key of the token issuer for verification\n    if (publicKey \u003d\u003d null) {\n      String pemPublicKey \u003d config.getProperty(PUBLIC_KEY_PEM);\n      if (pemPublicKey \u003d\u003d null) {\n        throw new ServletException(\n            \"Public key for signature validation must be provisioned.\");\n      }\n      publicKey \u003d CertificateUtil.parseRSAPublicKey(pemPublicKey);\n    }\n    // setup the list of valid audiences for token validation\n    String auds \u003d config.getProperty(EXPECTED_JWT_AUDIENCES);\n    if (auds !\u003d null) {\n      // parse into the list\n      String[] audArray \u003d auds.split(\",\");\n      audiences \u003d new ArrayList\u003cString\u003e();\n      for (String a : audArray) {\n        audiences.add(a);\n      }\n    }\n\n    // setup custom cookie name if configured\n    String customCookieName \u003d config.getProperty(JWT_COOKIE_NAME);\n    if (customCookieName !\u003d null) {\n      cookieName \u003d customCookieName;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/JWTRedirectAuthenticationHandler.java"
    }
  }
}