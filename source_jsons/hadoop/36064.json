{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMAppManager.java",
  "functionName": "getUserNameForPlacement",
  "functionId": "getUserNameForPlacement___user-String(modifiers-final)__context-ApplicationSubmissionContext(modifiers-final)__placementManager-PlacementManager(modifiers-final)",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMAppManager.java",
  "functionStartLine": 886,
  "functionEndLine": 931,
  "numCommitsSeen": 106,
  "timeTaken": 3276,
  "changeHistory": [
    "a0ff42d7612e744e0bf88aa14078ea3ab6bcce49",
    "aa7ab2719f745f6e2a5cfbca713bb49865cf52bd",
    "dfdc6d6dd95e54665faf02de3a094bbe5e7d0f56"
  ],
  "changeHistoryShort": {
    "a0ff42d7612e744e0bf88aa14078ea3ab6bcce49": "Ybodychange",
    "aa7ab2719f745f6e2a5cfbca713bb49865cf52bd": "Ybodychange",
    "dfdc6d6dd95e54665faf02de3a094bbe5e7d0f56": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a0ff42d7612e744e0bf88aa14078ea3ab6bcce49": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10070. Fix NPE if no queue mapping defined for proxy user when using application tag based placement.\n\nContributed by Kinga Marton. Reviewed by Adam Antal.\n",
      "commitDate": "15/01/20 11:25 PM",
      "commitName": "a0ff42d7612e744e0bf88aa14078ea3ab6bcce49",
      "commitAuthor": "Prabhu Joseph",
      "commitDateOld": "26/11/19 12:29 PM",
      "commitNameOld": "aa7ab2719f745f6e2a5cfbca713bb49865cf52bd",
      "commitAuthorOld": "prabhujoseph",
      "daysBetweenCommits": 50.46,
      "commitsBetweenForRepo": 177,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,46 @@\n   protected String getUserNameForPlacement(final String user,\n       final ApplicationSubmissionContext context,\n       final PlacementManager placementManager) throws YarnException {\n \n     boolean applicationTagBasedPlacementEnabled \u003d conf\n         .getBoolean(YarnConfiguration.APPLICATION_TAG_BASED_PLACEMENT_ENABLED,\n         YarnConfiguration.DEFAULT_APPLICATION_TAG_BASED_PLACEMENT_ENABLED);\n-\n     String usernameUsedForPlacement \u003d user;\n     if (!applicationTagBasedPlacementEnabled) {\n       return usernameUsedForPlacement;\n     }\n     if (!isWhitelistedUser(user, conf)) {\n       LOG.warn(\"User \u0027{}\u0027 is not allowed to do placement based \" +\n               \"on application tag\", user);\n       return usernameUsedForPlacement;\n     }\n     LOG.debug(\"Application tag based placement is enabled, checking for \" +\n         \"\u0027userid\u0027 among the application tags\");\n     Set\u003cString\u003e applicationTags \u003d context.getApplicationTags();\n     String userNameFromAppTag \u003d getUserNameFromApplicationTag(applicationTags);\n     if (userNameFromAppTag !\u003d null) {\n       LOG.debug(\"Found \u0027userid\u0027 \u0027{}\u0027 in application tag\", userNameFromAppTag);\n       UserGroupInformation callerUGI \u003d UserGroupInformation\n-              .createRemoteUser(userNameFromAppTag);\n+              .createRemoteUser(user);\n       // check if the actual user has rights to submit application to the\n       // user\u0027s queue from the application tag\n-      String queue \u003d placementManager\n-              .placeApplication(context, usernameUsedForPlacement).getQueue();\n+      ApplicationPlacementContext appPlacementContext \u003d placementManager\n+              .placeApplication(context, userNameFromAppTag);\n+      if (appPlacementContext \u003d\u003d null) {\n+        LOG.warn(\"No rule was found for user \u0027{}\u0027\", userNameFromAppTag);\n+        return usernameUsedForPlacement;\n+      }\n+      String queue \u003d appPlacementContext.getQueue();\n       if (callerUGI !\u003d null \u0026\u0026 scheduler\n               .checkAccess(callerUGI, QueueACL.SUBMIT_APPLICATIONS, queue)) {\n         usernameUsedForPlacement \u003d userNameFromAppTag;\n       } else {\n         LOG.warn(\"User \u0027{}\u0027 from application tag does not have access to \" +\n                 \" queue \u0027{}\u0027. \" + \"The placement is done for user \u0027{}\u0027\",\n                 userNameFromAppTag, queue, user);\n       }\n     } else {\n       LOG.warn(\"\u0027userid\u0027 was not found in application tags\");\n     }\n     return usernameUsedForPlacement;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected String getUserNameForPlacement(final String user,\n      final ApplicationSubmissionContext context,\n      final PlacementManager placementManager) throws YarnException {\n\n    boolean applicationTagBasedPlacementEnabled \u003d conf\n        .getBoolean(YarnConfiguration.APPLICATION_TAG_BASED_PLACEMENT_ENABLED,\n        YarnConfiguration.DEFAULT_APPLICATION_TAG_BASED_PLACEMENT_ENABLED);\n    String usernameUsedForPlacement \u003d user;\n    if (!applicationTagBasedPlacementEnabled) {\n      return usernameUsedForPlacement;\n    }\n    if (!isWhitelistedUser(user, conf)) {\n      LOG.warn(\"User \u0027{}\u0027 is not allowed to do placement based \" +\n              \"on application tag\", user);\n      return usernameUsedForPlacement;\n    }\n    LOG.debug(\"Application tag based placement is enabled, checking for \" +\n        \"\u0027userid\u0027 among the application tags\");\n    Set\u003cString\u003e applicationTags \u003d context.getApplicationTags();\n    String userNameFromAppTag \u003d getUserNameFromApplicationTag(applicationTags);\n    if (userNameFromAppTag !\u003d null) {\n      LOG.debug(\"Found \u0027userid\u0027 \u0027{}\u0027 in application tag\", userNameFromAppTag);\n      UserGroupInformation callerUGI \u003d UserGroupInformation\n              .createRemoteUser(user);\n      // check if the actual user has rights to submit application to the\n      // user\u0027s queue from the application tag\n      ApplicationPlacementContext appPlacementContext \u003d placementManager\n              .placeApplication(context, userNameFromAppTag);\n      if (appPlacementContext \u003d\u003d null) {\n        LOG.warn(\"No rule was found for user \u0027{}\u0027\", userNameFromAppTag);\n        return usernameUsedForPlacement;\n      }\n      String queue \u003d appPlacementContext.getQueue();\n      if (callerUGI !\u003d null \u0026\u0026 scheduler\n              .checkAccess(callerUGI, QueueACL.SUBMIT_APPLICATIONS, queue)) {\n        usernameUsedForPlacement \u003d userNameFromAppTag;\n      } else {\n        LOG.warn(\"User \u0027{}\u0027 from application tag does not have access to \" +\n                \" queue \u0027{}\u0027. \" + \"The placement is done for user \u0027{}\u0027\",\n                userNameFromAppTag, queue, user);\n      }\n    } else {\n      LOG.warn(\"\u0027userid\u0027 was not found in application tags\");\n    }\n    return usernameUsedForPlacement;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMAppManager.java",
      "extendedDetails": {}
    },
    "aa7ab2719f745f6e2a5cfbca713bb49865cf52bd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9991. Fix Application Tag prefix to userid. Contributed by Szilard Nemeth.\n",
      "commitDate": "26/11/19 12:29 PM",
      "commitName": "aa7ab2719f745f6e2a5cfbca713bb49865cf52bd",
      "commitAuthor": "prabhujoseph",
      "commitDateOld": "19/11/19 12:14 PM",
      "commitNameOld": "dfdc6d6dd95e54665faf02de3a094bbe5e7d0f56",
      "commitAuthorOld": "Szilard Nemeth",
      "daysBetweenCommits": 7.01,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n   protected String getUserNameForPlacement(final String user,\n       final ApplicationSubmissionContext context,\n       final PlacementManager placementManager) throws YarnException {\n \n     boolean applicationTagBasedPlacementEnabled \u003d conf\n         .getBoolean(YarnConfiguration.APPLICATION_TAG_BASED_PLACEMENT_ENABLED,\n         YarnConfiguration.DEFAULT_APPLICATION_TAG_BASED_PLACEMENT_ENABLED);\n \n     String usernameUsedForPlacement \u003d user;\n     if (!applicationTagBasedPlacementEnabled) {\n       return usernameUsedForPlacement;\n     }\n     if (!isWhitelistedUser(user, conf)) {\n       LOG.warn(\"User \u0027{}\u0027 is not allowed to do placement based \" +\n               \"on application tag\", user);\n       return usernameUsedForPlacement;\n     }\n     LOG.debug(\"Application tag based placement is enabled, checking for \" +\n-        \"userId in the application tag\");\n+        \"\u0027userid\u0027 among the application tags\");\n     Set\u003cString\u003e applicationTags \u003d context.getApplicationTags();\n     String userNameFromAppTag \u003d getUserNameFromApplicationTag(applicationTags);\n     if (userNameFromAppTag !\u003d null) {\n-      LOG.debug(\"Found userId \u0027{}\u0027 in application tag\", userNameFromAppTag);\n+      LOG.debug(\"Found \u0027userid\u0027 \u0027{}\u0027 in application tag\", userNameFromAppTag);\n       UserGroupInformation callerUGI \u003d UserGroupInformation\n               .createRemoteUser(userNameFromAppTag);\n       // check if the actual user has rights to submit application to the\n       // user\u0027s queue from the application tag\n       String queue \u003d placementManager\n               .placeApplication(context, usernameUsedForPlacement).getQueue();\n       if (callerUGI !\u003d null \u0026\u0026 scheduler\n               .checkAccess(callerUGI, QueueACL.SUBMIT_APPLICATIONS, queue)) {\n         usernameUsedForPlacement \u003d userNameFromAppTag;\n       } else {\n         LOG.warn(\"User \u0027{}\u0027 from application tag does not have access to \" +\n                 \" queue \u0027{}\u0027. \" + \"The placement is done for user \u0027{}\u0027\",\n                 userNameFromAppTag, queue, user);\n       }\n     } else {\n-      LOG.warn(\"userId was not found in application tags\");\n+      LOG.warn(\"\u0027userid\u0027 was not found in application tags\");\n     }\n     return usernameUsedForPlacement;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected String getUserNameForPlacement(final String user,\n      final ApplicationSubmissionContext context,\n      final PlacementManager placementManager) throws YarnException {\n\n    boolean applicationTagBasedPlacementEnabled \u003d conf\n        .getBoolean(YarnConfiguration.APPLICATION_TAG_BASED_PLACEMENT_ENABLED,\n        YarnConfiguration.DEFAULT_APPLICATION_TAG_BASED_PLACEMENT_ENABLED);\n\n    String usernameUsedForPlacement \u003d user;\n    if (!applicationTagBasedPlacementEnabled) {\n      return usernameUsedForPlacement;\n    }\n    if (!isWhitelistedUser(user, conf)) {\n      LOG.warn(\"User \u0027{}\u0027 is not allowed to do placement based \" +\n              \"on application tag\", user);\n      return usernameUsedForPlacement;\n    }\n    LOG.debug(\"Application tag based placement is enabled, checking for \" +\n        \"\u0027userid\u0027 among the application tags\");\n    Set\u003cString\u003e applicationTags \u003d context.getApplicationTags();\n    String userNameFromAppTag \u003d getUserNameFromApplicationTag(applicationTags);\n    if (userNameFromAppTag !\u003d null) {\n      LOG.debug(\"Found \u0027userid\u0027 \u0027{}\u0027 in application tag\", userNameFromAppTag);\n      UserGroupInformation callerUGI \u003d UserGroupInformation\n              .createRemoteUser(userNameFromAppTag);\n      // check if the actual user has rights to submit application to the\n      // user\u0027s queue from the application tag\n      String queue \u003d placementManager\n              .placeApplication(context, usernameUsedForPlacement).getQueue();\n      if (callerUGI !\u003d null \u0026\u0026 scheduler\n              .checkAccess(callerUGI, QueueACL.SUBMIT_APPLICATIONS, queue)) {\n        usernameUsedForPlacement \u003d userNameFromAppTag;\n      } else {\n        LOG.warn(\"User \u0027{}\u0027 from application tag does not have access to \" +\n                \" queue \u0027{}\u0027. \" + \"The placement is done for user \u0027{}\u0027\",\n                userNameFromAppTag, queue, user);\n      }\n    } else {\n      LOG.warn(\"\u0027userid\u0027 was not found in application tags\");\n    }\n    return usernameUsedForPlacement;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMAppManager.java",
      "extendedDetails": {}
    },
    "dfdc6d6dd95e54665faf02de3a094bbe5e7d0f56": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9886. Queue mapping based on userid passed through application tag. Contributed by Julia Kinga Marton\n",
      "commitDate": "19/11/19 12:14 PM",
      "commitName": "dfdc6d6dd95e54665faf02de3a094bbe5e7d0f56",
      "commitAuthor": "Szilard Nemeth",
      "diff": "@@ -0,0 +1,42 @@\n+  protected String getUserNameForPlacement(final String user,\n+      final ApplicationSubmissionContext context,\n+      final PlacementManager placementManager) throws YarnException {\n+\n+    boolean applicationTagBasedPlacementEnabled \u003d conf\n+        .getBoolean(YarnConfiguration.APPLICATION_TAG_BASED_PLACEMENT_ENABLED,\n+        YarnConfiguration.DEFAULT_APPLICATION_TAG_BASED_PLACEMENT_ENABLED);\n+\n+    String usernameUsedForPlacement \u003d user;\n+    if (!applicationTagBasedPlacementEnabled) {\n+      return usernameUsedForPlacement;\n+    }\n+    if (!isWhitelistedUser(user, conf)) {\n+      LOG.warn(\"User \u0027{}\u0027 is not allowed to do placement based \" +\n+              \"on application tag\", user);\n+      return usernameUsedForPlacement;\n+    }\n+    LOG.debug(\"Application tag based placement is enabled, checking for \" +\n+        \"userId in the application tag\");\n+    Set\u003cString\u003e applicationTags \u003d context.getApplicationTags();\n+    String userNameFromAppTag \u003d getUserNameFromApplicationTag(applicationTags);\n+    if (userNameFromAppTag !\u003d null) {\n+      LOG.debug(\"Found userId \u0027{}\u0027 in application tag\", userNameFromAppTag);\n+      UserGroupInformation callerUGI \u003d UserGroupInformation\n+              .createRemoteUser(userNameFromAppTag);\n+      // check if the actual user has rights to submit application to the\n+      // user\u0027s queue from the application tag\n+      String queue \u003d placementManager\n+              .placeApplication(context, usernameUsedForPlacement).getQueue();\n+      if (callerUGI !\u003d null \u0026\u0026 scheduler\n+              .checkAccess(callerUGI, QueueACL.SUBMIT_APPLICATIONS, queue)) {\n+        usernameUsedForPlacement \u003d userNameFromAppTag;\n+      } else {\n+        LOG.warn(\"User \u0027{}\u0027 from application tag does not have access to \" +\n+                \" queue \u0027{}\u0027. \" + \"The placement is done for user \u0027{}\u0027\",\n+                userNameFromAppTag, queue, user);\n+      }\n+    } else {\n+      LOG.warn(\"userId was not found in application tags\");\n+    }\n+    return usernameUsedForPlacement;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected String getUserNameForPlacement(final String user,\n      final ApplicationSubmissionContext context,\n      final PlacementManager placementManager) throws YarnException {\n\n    boolean applicationTagBasedPlacementEnabled \u003d conf\n        .getBoolean(YarnConfiguration.APPLICATION_TAG_BASED_PLACEMENT_ENABLED,\n        YarnConfiguration.DEFAULT_APPLICATION_TAG_BASED_PLACEMENT_ENABLED);\n\n    String usernameUsedForPlacement \u003d user;\n    if (!applicationTagBasedPlacementEnabled) {\n      return usernameUsedForPlacement;\n    }\n    if (!isWhitelistedUser(user, conf)) {\n      LOG.warn(\"User \u0027{}\u0027 is not allowed to do placement based \" +\n              \"on application tag\", user);\n      return usernameUsedForPlacement;\n    }\n    LOG.debug(\"Application tag based placement is enabled, checking for \" +\n        \"userId in the application tag\");\n    Set\u003cString\u003e applicationTags \u003d context.getApplicationTags();\n    String userNameFromAppTag \u003d getUserNameFromApplicationTag(applicationTags);\n    if (userNameFromAppTag !\u003d null) {\n      LOG.debug(\"Found userId \u0027{}\u0027 in application tag\", userNameFromAppTag);\n      UserGroupInformation callerUGI \u003d UserGroupInformation\n              .createRemoteUser(userNameFromAppTag);\n      // check if the actual user has rights to submit application to the\n      // user\u0027s queue from the application tag\n      String queue \u003d placementManager\n              .placeApplication(context, usernameUsedForPlacement).getQueue();\n      if (callerUGI !\u003d null \u0026\u0026 scheduler\n              .checkAccess(callerUGI, QueueACL.SUBMIT_APPLICATIONS, queue)) {\n        usernameUsedForPlacement \u003d userNameFromAppTag;\n      } else {\n        LOG.warn(\"User \u0027{}\u0027 from application tag does not have access to \" +\n                \" queue \u0027{}\u0027. \" + \"The placement is done for user \u0027{}\u0027\",\n                userNameFromAppTag, queue, user);\n      }\n    } else {\n      LOG.warn(\"userId was not found in application tags\");\n    }\n    return usernameUsedForPlacement;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMAppManager.java"
    }
  }
}