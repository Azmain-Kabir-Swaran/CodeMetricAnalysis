{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PathFinder.java",
  "functionName": "getAbsolutePath",
  "functionId": "getAbsolutePath___filename-String",
  "sourceFilePath": "hadoop-tools/hadoop-streaming/src/main/java/org/apache/hadoop/streaming/PathFinder.java",
  "functionStartLine": 64,
  "functionEndLine": 89,
  "numCommitsSeen": 5,
  "timeTaken": 4375,
  "changeHistory": [
    "8f7ce62085fca12bad3b675603e599b5a53b83e8",
    "26447229ba2c3d43db978c1b3ce95613669182ee",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "8f7ce62085fca12bad3b675603e599b5a53b83e8": "Ybodychange",
    "26447229ba2c3d43db978c1b3ce95613669182ee": "Yfilerename",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8f7ce62085fca12bad3b675603e599b5a53b83e8": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5177. Use common utils FileUtil#setReadable/Writable/Executable \u0026 FileUtil#canRead/Write/Execute. Contributed by Ivan Mitic.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1477403 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/04/13 4:00 PM",
      "commitName": "8f7ce62085fca12bad3b675603e599b5a53b83e8",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "18/11/11 5:24 PM",
      "commitNameOld": "26447229ba2c3d43db978c1b3ce95613669182ee",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 527.9,
      "commitsBetweenForRepo": 3113,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   public File getAbsolutePath(String filename) {\n     if (pathenv \u003d\u003d null || pathSep \u003d\u003d null || fileSep \u003d\u003d null) {\n       return null;\n     }\n     int val \u003d -1;\n     String classvalue \u003d pathenv + pathSep;\n \n     while (((val \u003d classvalue.indexOf(pathSep)) \u003e\u003d 0)\n         \u0026\u0026 classvalue.length() \u003e 0) {\n       // Extract each entry from the pathenv\n       String entry \u003d classvalue.substring(0, val).trim();\n       File f \u003d new File(entry);\n \n       if (f.isDirectory()) {\n         // this entry in the pathenv is a directory.\n         // see if the required file is in this directory\n         f \u003d new File(entry + fileSep + filename);\n       }\n       // see if the filename matches and we can read it\n-      if (f.isFile() \u0026\u0026 f.canRead()) {\n+      if (f.isFile() \u0026\u0026 FileUtil.canRead(f)) {\n         return f;\n       }\n       classvalue \u003d classvalue.substring(val + 1).trim();\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public File getAbsolutePath(String filename) {\n    if (pathenv \u003d\u003d null || pathSep \u003d\u003d null || fileSep \u003d\u003d null) {\n      return null;\n    }\n    int val \u003d -1;\n    String classvalue \u003d pathenv + pathSep;\n\n    while (((val \u003d classvalue.indexOf(pathSep)) \u003e\u003d 0)\n        \u0026\u0026 classvalue.length() \u003e 0) {\n      // Extract each entry from the pathenv\n      String entry \u003d classvalue.substring(0, val).trim();\n      File f \u003d new File(entry);\n\n      if (f.isDirectory()) {\n        // this entry in the pathenv is a directory.\n        // see if the required file is in this directory\n        f \u003d new File(entry + fileSep + filename);\n      }\n      // see if the filename matches and we can read it\n      if (f.isFile() \u0026\u0026 FileUtil.canRead(f)) {\n        return f;\n      }\n      classvalue \u003d classvalue.substring(val + 1).trim();\n    }\n    return null;\n  }",
      "path": "hadoop-tools/hadoop-streaming/src/main/java/org/apache/hadoop/streaming/PathFinder.java",
      "extendedDetails": {}
    },
    "26447229ba2c3d43db978c1b3ce95613669182ee": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7590. Mavenize streaming and MR examples. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1203941 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/11/11 5:24 PM",
      "commitName": "26447229ba2c3d43db978c1b3ce95613669182ee",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "18/11/11 1:04 AM",
      "commitNameOld": "905a127850d5e0cba85c2e075f989fa0f5cf129a",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.68,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public File getAbsolutePath(String filename) {\n    if (pathenv \u003d\u003d null || pathSep \u003d\u003d null || fileSep \u003d\u003d null) {\n      return null;\n    }\n    int val \u003d -1;\n    String classvalue \u003d pathenv + pathSep;\n\n    while (((val \u003d classvalue.indexOf(pathSep)) \u003e\u003d 0)\n        \u0026\u0026 classvalue.length() \u003e 0) {\n      // Extract each entry from the pathenv\n      String entry \u003d classvalue.substring(0, val).trim();\n      File f \u003d new File(entry);\n\n      if (f.isDirectory()) {\n        // this entry in the pathenv is a directory.\n        // see if the required file is in this directory\n        f \u003d new File(entry + fileSep + filename);\n      }\n      // see if the filename matches and we can read it\n      if (f.isFile() \u0026\u0026 f.canRead()) {\n        return f;\n      }\n      classvalue \u003d classvalue.substring(val + 1).trim();\n    }\n    return null;\n  }",
      "path": "hadoop-tools/hadoop-streaming/src/main/java/org/apache/hadoop/streaming/PathFinder.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/src/contrib/streaming/src/java/org/apache/hadoop/streaming/PathFinder.java",
        "newPath": "hadoop-tools/hadoop-streaming/src/main/java/org/apache/hadoop/streaming/PathFinder.java"
      }
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public File getAbsolutePath(String filename) {\n    if (pathenv \u003d\u003d null || pathSep \u003d\u003d null || fileSep \u003d\u003d null) {\n      return null;\n    }\n    int val \u003d -1;\n    String classvalue \u003d pathenv + pathSep;\n\n    while (((val \u003d classvalue.indexOf(pathSep)) \u003e\u003d 0)\n        \u0026\u0026 classvalue.length() \u003e 0) {\n      // Extract each entry from the pathenv\n      String entry \u003d classvalue.substring(0, val).trim();\n      File f \u003d new File(entry);\n\n      if (f.isDirectory()) {\n        // this entry in the pathenv is a directory.\n        // see if the required file is in this directory\n        f \u003d new File(entry + fileSep + filename);\n      }\n      // see if the filename matches and we can read it\n      if (f.isFile() \u0026\u0026 f.canRead()) {\n        return f;\n      }\n      classvalue \u003d classvalue.substring(val + 1).trim();\n    }\n    return null;\n  }",
      "path": "hadoop-mapreduce-project/src/contrib/streaming/src/java/org/apache/hadoop/streaming/PathFinder.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/src/contrib/streaming/src/java/org/apache/hadoop/streaming/PathFinder.java",
        "newPath": "hadoop-mapreduce-project/src/contrib/streaming/src/java/org/apache/hadoop/streaming/PathFinder.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public File getAbsolutePath(String filename) {\n    if (pathenv \u003d\u003d null || pathSep \u003d\u003d null || fileSep \u003d\u003d null) {\n      return null;\n    }\n    int val \u003d -1;\n    String classvalue \u003d pathenv + pathSep;\n\n    while (((val \u003d classvalue.indexOf(pathSep)) \u003e\u003d 0)\n        \u0026\u0026 classvalue.length() \u003e 0) {\n      // Extract each entry from the pathenv\n      String entry \u003d classvalue.substring(0, val).trim();\n      File f \u003d new File(entry);\n\n      if (f.isDirectory()) {\n        // this entry in the pathenv is a directory.\n        // see if the required file is in this directory\n        f \u003d new File(entry + fileSep + filename);\n      }\n      // see if the filename matches and we can read it\n      if (f.isFile() \u0026\u0026 f.canRead()) {\n        return f;\n      }\n      classvalue \u003d classvalue.substring(val + 1).trim();\n    }\n    return null;\n  }",
      "path": "hadoop-mapreduce/src/contrib/streaming/src/java/org/apache/hadoop/streaming/PathFinder.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/contrib/streaming/src/java/org/apache/hadoop/streaming/PathFinder.java",
        "newPath": "hadoop-mapreduce/src/contrib/streaming/src/java/org/apache/hadoop/streaming/PathFinder.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,26 @@\n+  public File getAbsolutePath(String filename) {\n+    if (pathenv \u003d\u003d null || pathSep \u003d\u003d null || fileSep \u003d\u003d null) {\n+      return null;\n+    }\n+    int val \u003d -1;\n+    String classvalue \u003d pathenv + pathSep;\n+\n+    while (((val \u003d classvalue.indexOf(pathSep)) \u003e\u003d 0)\n+        \u0026\u0026 classvalue.length() \u003e 0) {\n+      // Extract each entry from the pathenv\n+      String entry \u003d classvalue.substring(0, val).trim();\n+      File f \u003d new File(entry);\n+\n+      if (f.isDirectory()) {\n+        // this entry in the pathenv is a directory.\n+        // see if the required file is in this directory\n+        f \u003d new File(entry + fileSep + filename);\n+      }\n+      // see if the filename matches and we can read it\n+      if (f.isFile() \u0026\u0026 f.canRead()) {\n+        return f;\n+      }\n+      classvalue \u003d classvalue.substring(val + 1).trim();\n+    }\n+    return null;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public File getAbsolutePath(String filename) {\n    if (pathenv \u003d\u003d null || pathSep \u003d\u003d null || fileSep \u003d\u003d null) {\n      return null;\n    }\n    int val \u003d -1;\n    String classvalue \u003d pathenv + pathSep;\n\n    while (((val \u003d classvalue.indexOf(pathSep)) \u003e\u003d 0)\n        \u0026\u0026 classvalue.length() \u003e 0) {\n      // Extract each entry from the pathenv\n      String entry \u003d classvalue.substring(0, val).trim();\n      File f \u003d new File(entry);\n\n      if (f.isDirectory()) {\n        // this entry in the pathenv is a directory.\n        // see if the required file is in this directory\n        f \u003d new File(entry + fileSep + filename);\n      }\n      // see if the filename matches and we can read it\n      if (f.isFile() \u0026\u0026 f.canRead()) {\n        return f;\n      }\n      classvalue \u003d classvalue.substring(val + 1).trim();\n    }\n    return null;\n  }",
      "path": "mapreduce/src/contrib/streaming/src/java/org/apache/hadoop/streaming/PathFinder.java"
    }
  }
}