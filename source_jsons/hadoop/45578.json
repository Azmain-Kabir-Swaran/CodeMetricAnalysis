{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LogCLIHelpers.java",
  "functionName": "getOwnerForAppIdOrNull",
  "functionId": "getOwnerForAppIdOrNull___appId-ApplicationId__bestGuess-String__conf-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/LogCLIHelpers.java",
  "functionStartLine": 151,
  "functionEndLine": 178,
  "numCommitsSeen": 30,
  "timeTaken": 2322,
  "changeHistory": [
    "460ba7fb14114f44e14a660f533f32c54e504478",
    "49e1292ea3e4d00ab0b0191bd8c4ea4d2afed671",
    "87f5e351337a905af5215af76c72b9312616cd4f"
  ],
  "changeHistoryShort": {
    "460ba7fb14114f44e14a660f533f32c54e504478": "Ymultichange(Yexceptionschange,Ybodychange)",
    "49e1292ea3e4d00ab0b0191bd8c4ea4d2afed671": "Ybodychange",
    "87f5e351337a905af5215af76c72b9312616cd4f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "460ba7fb14114f44e14a660f533f32c54e504478": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-9558.  Fixed LogAggregation test cases.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "23/05/19 3:38 PM",
      "commitName": "460ba7fb14114f44e14a660f533f32c54e504478",
      "commitAuthor": "Eric Yang",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-9558.  Fixed LogAggregation test cases.\n            Contributed by Prabhu Joseph\n",
          "commitDate": "23/05/19 3:38 PM",
          "commitName": "460ba7fb14114f44e14a660f533f32c54e504478",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "06/05/19 4:48 PM",
          "commitNameOld": "49e1292ea3e4d00ab0b0191bd8c4ea4d2afed671",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 16.95,
          "commitsBetweenForRepo": 93,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,67 +1,28 @@\n   public static String getOwnerForAppIdOrNull(\n       ApplicationId appId, String bestGuess,\n-      Configuration conf) throws IOException {\n-    Path remoteRootLogDir \u003d new Path(conf.get(\n-        YarnConfiguration.NM_REMOTE_APP_LOG_DIR,\n-        YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));\n-    String suffix \u003d LogAggregationUtils.getRemoteNodeLogDirSuffix(conf);\n-    Path fullPath \u003d LogAggregationUtils.getRemoteAppLogDir(remoteRootLogDir,\n-        appId, bestGuess, suffix);\n+      Configuration conf) {\n+    LogAggregationFileControllerFactory factory \u003d\n+        new LogAggregationFileControllerFactory(conf);\n+    List\u003cLogAggregationFileController\u003e fileControllers \u003d factory\n+        .getConfiguredLogAggregationFileControllerList();\n \n-    FileContext fc \u003d\n-        FileContext.getFileContext(remoteRootLogDir.toUri(), conf);\n-    String pathAccess \u003d fullPath.toString();\n-    try {\n-      if (fc.util().exists(fullPath)) {\n-        return bestGuess;\n-      }\n-\n-      boolean scanOldPath \u003d LogAggregationUtils.isOlderPathEnabled(conf);\n-      if (scanOldPath) {\n-        Path olderAppPath \u003d LogAggregationUtils.getOlderRemoteAppLogDir(appId,\n-            bestGuess, remoteRootLogDir, suffix);\n-        if (fc.util().exists(olderAppPath)) {\n-          return bestGuess;\n-        }\n-      }\n-\n-      Path toMatch \u003d LogAggregationUtils.\n-          getRemoteAppLogDir(remoteRootLogDir, appId, \"*\", suffix);\n-\n-      pathAccess \u003d toMatch.toString();\n-      FileStatus[] matching  \u003d fc.util().globStatus(toMatch);\n-      if (matching \u003d\u003d null || matching.length !\u003d 1) {\n-        if (scanOldPath) {\n-          toMatch \u003d LogAggregationUtils.getOlderRemoteAppLogDir(appId, \"*\",\n-              remoteRootLogDir, suffix);\n-          try {\n-            matching \u003d fc.util().globStatus(toMatch);\n-            if (matching !\u003d null \u0026\u0026 matching.length \u003d\u003d 1) {\n-              //fetch the user from the old path /app-logs/user[/suffix]/app_id\n-              Path parent \u003d matching[0].getPath().getParent();\n-              //skip the suffix too\n-              if (suffix !\u003d null \u0026\u0026 !StringUtils.isEmpty(suffix)) {\n-                parent \u003d parent.getParent();\n-              }\n-              return parent.getName();\n-            }\n-          } catch (IOException e) {\n-            // Ignore IOException from accessing older app log dir\n+    if (fileControllers !\u003d null \u0026\u0026 !fileControllers.isEmpty()) {\n+      String owner \u003d null;\n+      for (LogAggregationFileController fileFormat : fileControllers) {\n+        try {\n+          owner \u003d guessOwnerWithFileFormat(fileFormat, appId, bestGuess, conf);\n+          if (owner !\u003d null) {\n+            return owner;\n           }\n+        } catch (IOException e) {\n+          return null;\n         }\n-        return null;\n       }\n-      //fetch the user from the full path /app-logs/user[/suffix]/bucket/app_id\n-      Path parent \u003d matching[0].getPath().getParent();\n-      //skip the suffix too\n-      if (suffix !\u003d null \u0026\u0026 !StringUtils.isEmpty(suffix)) {\n-        parent \u003d parent.getParent();\n-      }\n-      //skip the bucket\n-      parent \u003d parent.getParent();\n-      return parent.getName();\n-    } catch (AccessControlException | AccessDeniedException ex) {\n-      logDirNoAccessPermission(pathAccess, bestGuess, ex.getMessage());\n-      return null;\n+    } else {\n+      System.err.println(\"Can not find any valid fileControllers. \" +\n+          \" The configurated fileControllers: \" +\n+          YarnConfiguration.LOG_AGGREGATION_FILE_FORMATS);\n     }\n+\n+    return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static String getOwnerForAppIdOrNull(\n      ApplicationId appId, String bestGuess,\n      Configuration conf) {\n    LogAggregationFileControllerFactory factory \u003d\n        new LogAggregationFileControllerFactory(conf);\n    List\u003cLogAggregationFileController\u003e fileControllers \u003d factory\n        .getConfiguredLogAggregationFileControllerList();\n\n    if (fileControllers !\u003d null \u0026\u0026 !fileControllers.isEmpty()) {\n      String owner \u003d null;\n      for (LogAggregationFileController fileFormat : fileControllers) {\n        try {\n          owner \u003d guessOwnerWithFileFormat(fileFormat, appId, bestGuess, conf);\n          if (owner !\u003d null) {\n            return owner;\n          }\n        } catch (IOException e) {\n          return null;\n        }\n      }\n    } else {\n      System.err.println(\"Can not find any valid fileControllers. \" +\n          \" The configurated fileControllers: \" +\n          YarnConfiguration.LOG_AGGREGATION_FILE_FORMATS);\n    }\n\n    return null;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/LogCLIHelpers.java",
          "extendedDetails": {
            "oldValue": "[IOException]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-9558.  Fixed LogAggregation test cases.\n            Contributed by Prabhu Joseph\n",
          "commitDate": "23/05/19 3:38 PM",
          "commitName": "460ba7fb14114f44e14a660f533f32c54e504478",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "06/05/19 4:48 PM",
          "commitNameOld": "49e1292ea3e4d00ab0b0191bd8c4ea4d2afed671",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 16.95,
          "commitsBetweenForRepo": 93,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,67 +1,28 @@\n   public static String getOwnerForAppIdOrNull(\n       ApplicationId appId, String bestGuess,\n-      Configuration conf) throws IOException {\n-    Path remoteRootLogDir \u003d new Path(conf.get(\n-        YarnConfiguration.NM_REMOTE_APP_LOG_DIR,\n-        YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));\n-    String suffix \u003d LogAggregationUtils.getRemoteNodeLogDirSuffix(conf);\n-    Path fullPath \u003d LogAggregationUtils.getRemoteAppLogDir(remoteRootLogDir,\n-        appId, bestGuess, suffix);\n+      Configuration conf) {\n+    LogAggregationFileControllerFactory factory \u003d\n+        new LogAggregationFileControllerFactory(conf);\n+    List\u003cLogAggregationFileController\u003e fileControllers \u003d factory\n+        .getConfiguredLogAggregationFileControllerList();\n \n-    FileContext fc \u003d\n-        FileContext.getFileContext(remoteRootLogDir.toUri(), conf);\n-    String pathAccess \u003d fullPath.toString();\n-    try {\n-      if (fc.util().exists(fullPath)) {\n-        return bestGuess;\n-      }\n-\n-      boolean scanOldPath \u003d LogAggregationUtils.isOlderPathEnabled(conf);\n-      if (scanOldPath) {\n-        Path olderAppPath \u003d LogAggregationUtils.getOlderRemoteAppLogDir(appId,\n-            bestGuess, remoteRootLogDir, suffix);\n-        if (fc.util().exists(olderAppPath)) {\n-          return bestGuess;\n-        }\n-      }\n-\n-      Path toMatch \u003d LogAggregationUtils.\n-          getRemoteAppLogDir(remoteRootLogDir, appId, \"*\", suffix);\n-\n-      pathAccess \u003d toMatch.toString();\n-      FileStatus[] matching  \u003d fc.util().globStatus(toMatch);\n-      if (matching \u003d\u003d null || matching.length !\u003d 1) {\n-        if (scanOldPath) {\n-          toMatch \u003d LogAggregationUtils.getOlderRemoteAppLogDir(appId, \"*\",\n-              remoteRootLogDir, suffix);\n-          try {\n-            matching \u003d fc.util().globStatus(toMatch);\n-            if (matching !\u003d null \u0026\u0026 matching.length \u003d\u003d 1) {\n-              //fetch the user from the old path /app-logs/user[/suffix]/app_id\n-              Path parent \u003d matching[0].getPath().getParent();\n-              //skip the suffix too\n-              if (suffix !\u003d null \u0026\u0026 !StringUtils.isEmpty(suffix)) {\n-                parent \u003d parent.getParent();\n-              }\n-              return parent.getName();\n-            }\n-          } catch (IOException e) {\n-            // Ignore IOException from accessing older app log dir\n+    if (fileControllers !\u003d null \u0026\u0026 !fileControllers.isEmpty()) {\n+      String owner \u003d null;\n+      for (LogAggregationFileController fileFormat : fileControllers) {\n+        try {\n+          owner \u003d guessOwnerWithFileFormat(fileFormat, appId, bestGuess, conf);\n+          if (owner !\u003d null) {\n+            return owner;\n           }\n+        } catch (IOException e) {\n+          return null;\n         }\n-        return null;\n       }\n-      //fetch the user from the full path /app-logs/user[/suffix]/bucket/app_id\n-      Path parent \u003d matching[0].getPath().getParent();\n-      //skip the suffix too\n-      if (suffix !\u003d null \u0026\u0026 !StringUtils.isEmpty(suffix)) {\n-        parent \u003d parent.getParent();\n-      }\n-      //skip the bucket\n-      parent \u003d parent.getParent();\n-      return parent.getName();\n-    } catch (AccessControlException | AccessDeniedException ex) {\n-      logDirNoAccessPermission(pathAccess, bestGuess, ex.getMessage());\n-      return null;\n+    } else {\n+      System.err.println(\"Can not find any valid fileControllers. \" +\n+          \" The configurated fileControllers: \" +\n+          YarnConfiguration.LOG_AGGREGATION_FILE_FORMATS);\n     }\n+\n+    return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static String getOwnerForAppIdOrNull(\n      ApplicationId appId, String bestGuess,\n      Configuration conf) {\n    LogAggregationFileControllerFactory factory \u003d\n        new LogAggregationFileControllerFactory(conf);\n    List\u003cLogAggregationFileController\u003e fileControllers \u003d factory\n        .getConfiguredLogAggregationFileControllerList();\n\n    if (fileControllers !\u003d null \u0026\u0026 !fileControllers.isEmpty()) {\n      String owner \u003d null;\n      for (LogAggregationFileController fileFormat : fileControllers) {\n        try {\n          owner \u003d guessOwnerWithFileFormat(fileFormat, appId, bestGuess, conf);\n          if (owner !\u003d null) {\n            return owner;\n          }\n        } catch (IOException e) {\n          return null;\n        }\n      }\n    } else {\n      System.err.println(\"Can not find any valid fileControllers. \" +\n          \" The configurated fileControllers: \" +\n          YarnConfiguration.LOG_AGGREGATION_FILE_FORMATS);\n    }\n\n    return null;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/LogCLIHelpers.java",
          "extendedDetails": {}
        }
      ]
    },
    "49e1292ea3e4d00ab0b0191bd8c4ea4d2afed671": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9524.  Fixed TestAHSWebService and TestLogsCLI unit tests.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "06/05/19 4:48 PM",
      "commitName": "49e1292ea3e4d00ab0b0191bd8c4ea4d2afed671",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "12/06/18 8:35 AM",
      "commitNameOld": "652bcbb3e4950758e61ce123ecc1798ae2b60a7f",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 328.34,
      "commitsBetweenForRepo": 2473,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,67 @@\n   public static String getOwnerForAppIdOrNull(\n       ApplicationId appId, String bestGuess,\n       Configuration conf) throws IOException {\n     Path remoteRootLogDir \u003d new Path(conf.get(\n         YarnConfiguration.NM_REMOTE_APP_LOG_DIR,\n         YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));\n     String suffix \u003d LogAggregationUtils.getRemoteNodeLogDirSuffix(conf);\n     Path fullPath \u003d LogAggregationUtils.getRemoteAppLogDir(remoteRootLogDir,\n         appId, bestGuess, suffix);\n+\n     FileContext fc \u003d\n         FileContext.getFileContext(remoteRootLogDir.toUri(), conf);\n     String pathAccess \u003d fullPath.toString();\n     try {\n       if (fc.util().exists(fullPath)) {\n         return bestGuess;\n       }\n+\n+      boolean scanOldPath \u003d LogAggregationUtils.isOlderPathEnabled(conf);\n+      if (scanOldPath) {\n+        Path olderAppPath \u003d LogAggregationUtils.getOlderRemoteAppLogDir(appId,\n+            bestGuess, remoteRootLogDir, suffix);\n+        if (fc.util().exists(olderAppPath)) {\n+          return bestGuess;\n+        }\n+      }\n+\n       Path toMatch \u003d LogAggregationUtils.\n           getRemoteAppLogDir(remoteRootLogDir, appId, \"*\", suffix);\n+\n       pathAccess \u003d toMatch.toString();\n       FileStatus[] matching  \u003d fc.util().globStatus(toMatch);\n       if (matching \u003d\u003d null || matching.length !\u003d 1) {\n+        if (scanOldPath) {\n+          toMatch \u003d LogAggregationUtils.getOlderRemoteAppLogDir(appId, \"*\",\n+              remoteRootLogDir, suffix);\n+          try {\n+            matching \u003d fc.util().globStatus(toMatch);\n+            if (matching !\u003d null \u0026\u0026 matching.length \u003d\u003d 1) {\n+              //fetch the user from the old path /app-logs/user[/suffix]/app_id\n+              Path parent \u003d matching[0].getPath().getParent();\n+              //skip the suffix too\n+              if (suffix !\u003d null \u0026\u0026 !StringUtils.isEmpty(suffix)) {\n+                parent \u003d parent.getParent();\n+              }\n+              return parent.getName();\n+            }\n+          } catch (IOException e) {\n+            // Ignore IOException from accessing older app log dir\n+          }\n+        }\n         return null;\n       }\n-      //fetch the user from the full path /app-logs/user[/suffix]/app_id\n+      //fetch the user from the full path /app-logs/user[/suffix]/bucket/app_id\n       Path parent \u003d matching[0].getPath().getParent();\n       //skip the suffix too\n       if (suffix !\u003d null \u0026\u0026 !StringUtils.isEmpty(suffix)) {\n         parent \u003d parent.getParent();\n       }\n+      //skip the bucket\n+      parent \u003d parent.getParent();\n       return parent.getName();\n     } catch (AccessControlException | AccessDeniedException ex) {\n       logDirNoAccessPermission(pathAccess, bestGuess, ex.getMessage());\n       return null;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static String getOwnerForAppIdOrNull(\n      ApplicationId appId, String bestGuess,\n      Configuration conf) throws IOException {\n    Path remoteRootLogDir \u003d new Path(conf.get(\n        YarnConfiguration.NM_REMOTE_APP_LOG_DIR,\n        YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));\n    String suffix \u003d LogAggregationUtils.getRemoteNodeLogDirSuffix(conf);\n    Path fullPath \u003d LogAggregationUtils.getRemoteAppLogDir(remoteRootLogDir,\n        appId, bestGuess, suffix);\n\n    FileContext fc \u003d\n        FileContext.getFileContext(remoteRootLogDir.toUri(), conf);\n    String pathAccess \u003d fullPath.toString();\n    try {\n      if (fc.util().exists(fullPath)) {\n        return bestGuess;\n      }\n\n      boolean scanOldPath \u003d LogAggregationUtils.isOlderPathEnabled(conf);\n      if (scanOldPath) {\n        Path olderAppPath \u003d LogAggregationUtils.getOlderRemoteAppLogDir(appId,\n            bestGuess, remoteRootLogDir, suffix);\n        if (fc.util().exists(olderAppPath)) {\n          return bestGuess;\n        }\n      }\n\n      Path toMatch \u003d LogAggregationUtils.\n          getRemoteAppLogDir(remoteRootLogDir, appId, \"*\", suffix);\n\n      pathAccess \u003d toMatch.toString();\n      FileStatus[] matching  \u003d fc.util().globStatus(toMatch);\n      if (matching \u003d\u003d null || matching.length !\u003d 1) {\n        if (scanOldPath) {\n          toMatch \u003d LogAggregationUtils.getOlderRemoteAppLogDir(appId, \"*\",\n              remoteRootLogDir, suffix);\n          try {\n            matching \u003d fc.util().globStatus(toMatch);\n            if (matching !\u003d null \u0026\u0026 matching.length \u003d\u003d 1) {\n              //fetch the user from the old path /app-logs/user[/suffix]/app_id\n              Path parent \u003d matching[0].getPath().getParent();\n              //skip the suffix too\n              if (suffix !\u003d null \u0026\u0026 !StringUtils.isEmpty(suffix)) {\n                parent \u003d parent.getParent();\n              }\n              return parent.getName();\n            }\n          } catch (IOException e) {\n            // Ignore IOException from accessing older app log dir\n          }\n        }\n        return null;\n      }\n      //fetch the user from the full path /app-logs/user[/suffix]/bucket/app_id\n      Path parent \u003d matching[0].getPath().getParent();\n      //skip the suffix too\n      if (suffix !\u003d null \u0026\u0026 !StringUtils.isEmpty(suffix)) {\n        parent \u003d parent.getParent();\n      }\n      //skip the bucket\n      parent \u003d parent.getParent();\n      return parent.getName();\n    } catch (AccessControlException | AccessDeniedException ex) {\n      logDirNoAccessPermission(pathAccess, bestGuess, ex.getMessage());\n      return null;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/LogCLIHelpers.java",
      "extendedDetails": {}
    },
    "87f5e351337a905af5215af76c72b9312616cd4f": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4842. Fixed \"yarn logs\" command to guess (and thus not require) the appOwner argument when viewing another user\u0027s logs. Contributed by Ram Venkatesh and Xuan Gong.\n",
      "commitDate": "09/05/16 10:41 PM",
      "commitName": "87f5e351337a905af5215af76c72b9312616cd4f",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,35 @@\n+  public static String getOwnerForAppIdOrNull(\n+      ApplicationId appId, String bestGuess,\n+      Configuration conf) throws IOException {\n+    Path remoteRootLogDir \u003d new Path(conf.get(\n+        YarnConfiguration.NM_REMOTE_APP_LOG_DIR,\n+        YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));\n+    String suffix \u003d LogAggregationUtils.getRemoteNodeLogDirSuffix(conf);\n+    Path fullPath \u003d LogAggregationUtils.getRemoteAppLogDir(remoteRootLogDir,\n+        appId, bestGuess, suffix);\n+    FileContext fc \u003d\n+        FileContext.getFileContext(remoteRootLogDir.toUri(), conf);\n+    String pathAccess \u003d fullPath.toString();\n+    try {\n+      if (fc.util().exists(fullPath)) {\n+        return bestGuess;\n+      }\n+      Path toMatch \u003d LogAggregationUtils.\n+          getRemoteAppLogDir(remoteRootLogDir, appId, \"*\", suffix);\n+      pathAccess \u003d toMatch.toString();\n+      FileStatus[] matching  \u003d fc.util().globStatus(toMatch);\n+      if (matching \u003d\u003d null || matching.length !\u003d 1) {\n+        return null;\n+      }\n+      //fetch the user from the full path /app-logs/user[/suffix]/app_id\n+      Path parent \u003d matching[0].getPath().getParent();\n+      //skip the suffix too\n+      if (suffix !\u003d null \u0026\u0026 !StringUtils.isEmpty(suffix)) {\n+        parent \u003d parent.getParent();\n+      }\n+      return parent.getName();\n+    } catch (AccessControlException | AccessDeniedException ex) {\n+      logDirNoAccessPermission(pathAccess, bestGuess, ex.getMessage());\n+      return null;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static String getOwnerForAppIdOrNull(\n      ApplicationId appId, String bestGuess,\n      Configuration conf) throws IOException {\n    Path remoteRootLogDir \u003d new Path(conf.get(\n        YarnConfiguration.NM_REMOTE_APP_LOG_DIR,\n        YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR));\n    String suffix \u003d LogAggregationUtils.getRemoteNodeLogDirSuffix(conf);\n    Path fullPath \u003d LogAggregationUtils.getRemoteAppLogDir(remoteRootLogDir,\n        appId, bestGuess, suffix);\n    FileContext fc \u003d\n        FileContext.getFileContext(remoteRootLogDir.toUri(), conf);\n    String pathAccess \u003d fullPath.toString();\n    try {\n      if (fc.util().exists(fullPath)) {\n        return bestGuess;\n      }\n      Path toMatch \u003d LogAggregationUtils.\n          getRemoteAppLogDir(remoteRootLogDir, appId, \"*\", suffix);\n      pathAccess \u003d toMatch.toString();\n      FileStatus[] matching  \u003d fc.util().globStatus(toMatch);\n      if (matching \u003d\u003d null || matching.length !\u003d 1) {\n        return null;\n      }\n      //fetch the user from the full path /app-logs/user[/suffix]/app_id\n      Path parent \u003d matching[0].getPath().getParent();\n      //skip the suffix too\n      if (suffix !\u003d null \u0026\u0026 !StringUtils.isEmpty(suffix)) {\n        parent \u003d parent.getParent();\n      }\n      return parent.getName();\n    } catch (AccessControlException | AccessDeniedException ex) {\n      logDirNoAccessPermission(pathAccess, bestGuess, ex.getMessage());\n      return null;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/LogCLIHelpers.java"
    }
  }
}