{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSAppAttempt.java",
  "functionName": "canContainerBePreempted",
  "functionId": "canContainerBePreempted___container-RMContainer__alreadyConsideringForPreemption-Resource",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
  "functionStartLine": 592,
  "functionEndLine": 624,
  "numCommitsSeen": 139,
  "timeTaken": 6307,
  "changeHistory": [
    "b83b9ab41874646e92eb28b7f9153eaba858f4d0",
    "2bde3aedf139368fc71f053d8dd6580b498ff46d",
    "82c5dd1d508292ed88eda0f5356776437ba67d4c",
    "9e2699ac2c99d8df85191dd7fbf9468b00f5b5aa",
    "718ad9f6ee93d4145f2bb19b7582ce4e1174feaf",
    "dbbfcf74ab44d7bfdc805b63affd0defc57182b8",
    "a77f432449aad67da31bd8bf8644b71def741bde",
    "e224c9623493d6c4c2f3ff731fd3c72c0f448b19",
    "10468529a9b858bd945e7ecb063c9c1438efa474"
  ],
  "changeHistoryShort": {
    "b83b9ab41874646e92eb28b7f9153eaba858f4d0": "Ybodychange",
    "2bde3aedf139368fc71f053d8dd6580b498ff46d": "Ymultichange(Yparameterchange,Ybodychange)",
    "82c5dd1d508292ed88eda0f5356776437ba67d4c": "Ybodychange",
    "9e2699ac2c99d8df85191dd7fbf9468b00f5b5aa": "Ybodychange",
    "718ad9f6ee93d4145f2bb19b7582ce4e1174feaf": "Ybodychange",
    "dbbfcf74ab44d7bfdc805b63affd0defc57182b8": "Ybodychange",
    "a77f432449aad67da31bd8bf8644b71def741bde": "Ybodychange",
    "e224c9623493d6c4c2f3ff731fd3c72c0f448b19": "Ybodychange",
    "10468529a9b858bd945e7ecb063c9c1438efa474": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b83b9ab41874646e92eb28b7f9153eaba858f4d0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9537. Add configuration to disable AM preemption. Contributed by ZhouKang\n",
      "commitDate": "12/11/19 9:40 AM",
      "commitName": "b83b9ab41874646e92eb28b7f9153eaba858f4d0",
      "commitAuthor": "Yufei Gu",
      "commitDateOld": "15/05/19 11:50 AM",
      "commitNameOld": "55bd35921c2bb013e45120bbd1602b658b8b999b",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 180.95,
      "commitsBetweenForRepo": 1366,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,33 @@\n   boolean canContainerBePreempted(RMContainer container,\n                                   Resource alreadyConsideringForPreemption) {\n     if (!isPreemptable()) {\n       return false;\n     }\n \n+    if (container.isAMContainer() \u0026\u0026 !enableAMPreemption) {\n+      return false;\n+    }\n+\n     // Sanity check that the app owns this container\n     if (!getLiveContainersMap().containsKey(container.getContainerId()) \u0026\u0026\n         !newlyAllocatedContainers.contains(container)) {\n       LOG.error(\"Looking to preempt container \" + container +\n           \". Container does not belong to app \" + getApplicationId());\n       return false;\n     }\n \n     synchronized (preemptionVariablesLock) {\n       if (containersToBePreempted.contains(container)) {\n         // The container is already under consideration for preemption\n         return false;\n       }\n     }\n \n     // Check if the app\u0027s allocation will be over its fairshare even\n     // after preempting this container\n     Resource usageAfterPreemption \u003d getUsageAfterPreemptingContainer(\n             container.getAllocatedResource(),\n             alreadyConsideringForPreemption);\n \n     return !isUsageBelowShare(usageAfterPreemption, getFairShare());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean canContainerBePreempted(RMContainer container,\n                                  Resource alreadyConsideringForPreemption) {\n    if (!isPreemptable()) {\n      return false;\n    }\n\n    if (container.isAMContainer() \u0026\u0026 !enableAMPreemption) {\n      return false;\n    }\n\n    // Sanity check that the app owns this container\n    if (!getLiveContainersMap().containsKey(container.getContainerId()) \u0026\u0026\n        !newlyAllocatedContainers.contains(container)) {\n      LOG.error(\"Looking to preempt container \" + container +\n          \". Container does not belong to app \" + getApplicationId());\n      return false;\n    }\n\n    synchronized (preemptionVariablesLock) {\n      if (containersToBePreempted.contains(container)) {\n        // The container is already under consideration for preemption\n        return false;\n      }\n    }\n\n    // Check if the app\u0027s allocation will be over its fairshare even\n    // after preempting this container\n    Resource usageAfterPreemption \u003d getUsageAfterPreemptingContainer(\n            container.getAllocatedResource(),\n            alreadyConsideringForPreemption);\n\n    return !isUsageBelowShare(usageAfterPreemption, getFairShare());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "2bde3aedf139368fc71f053d8dd6580b498ff46d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-7290. Method canContainerBePreempted can return true when it shouldn\u0027t. (Contributed by Steven Rand)\n",
      "commitDate": "24/11/17 11:32 PM",
      "commitName": "2bde3aedf139368fc71f053d8dd6580b498ff46d",
      "commitAuthor": "Yufei Gu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7290. Method canContainerBePreempted can return true when it shouldn\u0027t. (Contributed by Steven Rand)\n",
          "commitDate": "24/11/17 11:32 PM",
          "commitName": "2bde3aedf139368fc71f053d8dd6580b498ff46d",
          "commitAuthor": "Yufei Gu",
          "commitDateOld": "21/11/17 10:33 AM",
          "commitNameOld": "03c311eae3ad591630a452921172a4406dbda181",
          "commitAuthorOld": "yufei",
          "daysBetweenCommits": 3.54,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,29 @@\n-  boolean canContainerBePreempted(RMContainer container) {\n+  boolean canContainerBePreempted(RMContainer container,\n+                                  Resource alreadyConsideringForPreemption) {\n     if (!isPreemptable()) {\n       return false;\n     }\n \n     // Sanity check that the app owns this container\n     if (!getLiveContainersMap().containsKey(container.getContainerId()) \u0026\u0026\n         !newlyAllocatedContainers.contains(container)) {\n       LOG.error(\"Looking to preempt container \" + container +\n           \". Container does not belong to app \" + getApplicationId());\n       return false;\n     }\n \n     synchronized (preemptionVariablesLock) {\n       if (containersToBePreempted.contains(container)) {\n         // The container is already under consideration for preemption\n         return false;\n       }\n     }\n \n     // Check if the app\u0027s allocation will be over its fairshare even\n     // after preempting this container\n-    Resource usageAfterPreemption \u003d Resources.clone(getResourceUsage());\n+    Resource usageAfterPreemption \u003d getUsageAfterPreemptingContainer(\n+            container.getAllocatedResource(),\n+            alreadyConsideringForPreemption);\n \n-    // Subtract resources of containers already queued for preemption\n-    synchronized (preemptionVariablesLock) {\n-      Resources.subtractFrom(usageAfterPreemption, resourcesToBePreempted);\n-    }\n-\n-    // Subtract this container\u0027s allocation to compute usage after preemption\n-    Resources.subtractFrom(\n-        usageAfterPreemption, container.getAllocatedResource());\n     return !isUsageBelowShare(usageAfterPreemption, getFairShare());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  boolean canContainerBePreempted(RMContainer container,\n                                  Resource alreadyConsideringForPreemption) {\n    if (!isPreemptable()) {\n      return false;\n    }\n\n    // Sanity check that the app owns this container\n    if (!getLiveContainersMap().containsKey(container.getContainerId()) \u0026\u0026\n        !newlyAllocatedContainers.contains(container)) {\n      LOG.error(\"Looking to preempt container \" + container +\n          \". Container does not belong to app \" + getApplicationId());\n      return false;\n    }\n\n    synchronized (preemptionVariablesLock) {\n      if (containersToBePreempted.contains(container)) {\n        // The container is already under consideration for preemption\n        return false;\n      }\n    }\n\n    // Check if the app\u0027s allocation will be over its fairshare even\n    // after preempting this container\n    Resource usageAfterPreemption \u003d getUsageAfterPreemptingContainer(\n            container.getAllocatedResource(),\n            alreadyConsideringForPreemption);\n\n    return !isUsageBelowShare(usageAfterPreemption, getFairShare());\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
          "extendedDetails": {
            "oldValue": "[container-RMContainer]",
            "newValue": "[container-RMContainer, alreadyConsideringForPreemption-Resource]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7290. Method canContainerBePreempted can return true when it shouldn\u0027t. (Contributed by Steven Rand)\n",
          "commitDate": "24/11/17 11:32 PM",
          "commitName": "2bde3aedf139368fc71f053d8dd6580b498ff46d",
          "commitAuthor": "Yufei Gu",
          "commitDateOld": "21/11/17 10:33 AM",
          "commitNameOld": "03c311eae3ad591630a452921172a4406dbda181",
          "commitAuthorOld": "yufei",
          "daysBetweenCommits": 3.54,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,29 @@\n-  boolean canContainerBePreempted(RMContainer container) {\n+  boolean canContainerBePreempted(RMContainer container,\n+                                  Resource alreadyConsideringForPreemption) {\n     if (!isPreemptable()) {\n       return false;\n     }\n \n     // Sanity check that the app owns this container\n     if (!getLiveContainersMap().containsKey(container.getContainerId()) \u0026\u0026\n         !newlyAllocatedContainers.contains(container)) {\n       LOG.error(\"Looking to preempt container \" + container +\n           \". Container does not belong to app \" + getApplicationId());\n       return false;\n     }\n \n     synchronized (preemptionVariablesLock) {\n       if (containersToBePreempted.contains(container)) {\n         // The container is already under consideration for preemption\n         return false;\n       }\n     }\n \n     // Check if the app\u0027s allocation will be over its fairshare even\n     // after preempting this container\n-    Resource usageAfterPreemption \u003d Resources.clone(getResourceUsage());\n+    Resource usageAfterPreemption \u003d getUsageAfterPreemptingContainer(\n+            container.getAllocatedResource(),\n+            alreadyConsideringForPreemption);\n \n-    // Subtract resources of containers already queued for preemption\n-    synchronized (preemptionVariablesLock) {\n-      Resources.subtractFrom(usageAfterPreemption, resourcesToBePreempted);\n-    }\n-\n-    // Subtract this container\u0027s allocation to compute usage after preemption\n-    Resources.subtractFrom(\n-        usageAfterPreemption, container.getAllocatedResource());\n     return !isUsageBelowShare(usageAfterPreemption, getFairShare());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  boolean canContainerBePreempted(RMContainer container,\n                                  Resource alreadyConsideringForPreemption) {\n    if (!isPreemptable()) {\n      return false;\n    }\n\n    // Sanity check that the app owns this container\n    if (!getLiveContainersMap().containsKey(container.getContainerId()) \u0026\u0026\n        !newlyAllocatedContainers.contains(container)) {\n      LOG.error(\"Looking to preempt container \" + container +\n          \". Container does not belong to app \" + getApplicationId());\n      return false;\n    }\n\n    synchronized (preemptionVariablesLock) {\n      if (containersToBePreempted.contains(container)) {\n        // The container is already under consideration for preemption\n        return false;\n      }\n    }\n\n    // Check if the app\u0027s allocation will be over its fairshare even\n    // after preempting this container\n    Resource usageAfterPreemption \u003d getUsageAfterPreemptingContainer(\n            container.getAllocatedResource(),\n            alreadyConsideringForPreemption);\n\n    return !isUsageBelowShare(usageAfterPreemption, getFairShare());\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
          "extendedDetails": {}
        }
      ]
    },
    "82c5dd1d508292ed88eda0f5356776437ba67d4c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7057. FSAppAttempt#getResourceUsage doesn\u0027t need to consider resources queued for preemption. (Contributed by Karthik via Yufei Gu)\n",
      "commitDate": "12/09/17 4:13 PM",
      "commitName": "82c5dd1d508292ed88eda0f5356776437ba67d4c",
      "commitAuthor": "Yufei Gu",
      "commitDateOld": "24/08/17 5:52 PM",
      "commitNameOld": "9e2699ac2c99d8df85191dd7fbf9468b00f5b5aa",
      "commitAuthorOld": "Yufei Gu",
      "daysBetweenCommits": 18.93,
      "commitsBetweenForRepo": 227,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,34 @@\n   boolean canContainerBePreempted(RMContainer container) {\n     if (!isPreemptable()) {\n       return false;\n     }\n \n     // Sanity check that the app owns this container\n     if (!getLiveContainersMap().containsKey(container.getContainerId()) \u0026\u0026\n         !newlyAllocatedContainers.contains(container)) {\n       LOG.error(\"Looking to preempt container \" + container +\n           \". Container does not belong to app \" + getApplicationId());\n       return false;\n     }\n \n     synchronized (preemptionVariablesLock) {\n       if (containersToBePreempted.contains(container)) {\n         // The container is already under consideration for preemption\n         return false;\n       }\n     }\n \n     // Check if the app\u0027s allocation will be over its fairshare even\n     // after preempting this container\n-    Resource usageAfterPreemption \u003d Resources.subtract(\n-        getResourceUsage(), container.getAllocatedResource());\n+    Resource usageAfterPreemption \u003d Resources.clone(getResourceUsage());\n \n+    // Subtract resources of containers already queued for preemption\n+    synchronized (preemptionVariablesLock) {\n+      Resources.subtractFrom(usageAfterPreemption, resourcesToBePreempted);\n+    }\n+\n+    // Subtract this container\u0027s allocation to compute usage after preemption\n+    Resources.subtractFrom(\n+        usageAfterPreemption, container.getAllocatedResource());\n     return !isUsageBelowShare(usageAfterPreemption, getFairShare());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean canContainerBePreempted(RMContainer container) {\n    if (!isPreemptable()) {\n      return false;\n    }\n\n    // Sanity check that the app owns this container\n    if (!getLiveContainersMap().containsKey(container.getContainerId()) \u0026\u0026\n        !newlyAllocatedContainers.contains(container)) {\n      LOG.error(\"Looking to preempt container \" + container +\n          \". Container does not belong to app \" + getApplicationId());\n      return false;\n    }\n\n    synchronized (preemptionVariablesLock) {\n      if (containersToBePreempted.contains(container)) {\n        // The container is already under consideration for preemption\n        return false;\n      }\n    }\n\n    // Check if the app\u0027s allocation will be over its fairshare even\n    // after preempting this container\n    Resource usageAfterPreemption \u003d Resources.clone(getResourceUsage());\n\n    // Subtract resources of containers already queued for preemption\n    synchronized (preemptionVariablesLock) {\n      Resources.subtractFrom(usageAfterPreemption, resourcesToBePreempted);\n    }\n\n    // Subtract this container\u0027s allocation to compute usage after preemption\n    Resources.subtractFrom(\n        usageAfterPreemption, container.getAllocatedResource());\n    return !isUsageBelowShare(usageAfterPreemption, getFairShare());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "9e2699ac2c99d8df85191dd7fbf9468b00f5b5aa": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7049. FSAppAttempt preemption related fields have confusing names. (Contributed by Karthik Kambatla via Yufei Gu)\n",
      "commitDate": "24/08/17 5:52 PM",
      "commitName": "9e2699ac2c99d8df85191dd7fbf9468b00f5b5aa",
      "commitAuthor": "Yufei Gu",
      "commitDateOld": "02/08/17 9:25 AM",
      "commitNameOld": "45535f8afae4e5bf4f60597fc29ba94b4e7743f3",
      "commitAuthorOld": "Yufei Gu",
      "daysBetweenCommits": 22.35,
      "commitsBetweenForRepo": 137,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   boolean canContainerBePreempted(RMContainer container) {\n     if (!isPreemptable()) {\n       return false;\n     }\n \n     // Sanity check that the app owns this container\n     if (!getLiveContainersMap().containsKey(container.getContainerId()) \u0026\u0026\n         !newlyAllocatedContainers.contains(container)) {\n       LOG.error(\"Looking to preempt container \" + container +\n           \". Container does not belong to app \" + getApplicationId());\n       return false;\n     }\n \n     synchronized (preemptionVariablesLock) {\n-      if (containersToPreempt.contains(container)) {\n+      if (containersToBePreempted.contains(container)) {\n         // The container is already under consideration for preemption\n         return false;\n       }\n     }\n \n     // Check if the app\u0027s allocation will be over its fairshare even\n     // after preempting this container\n     Resource usageAfterPreemption \u003d Resources.subtract(\n         getResourceUsage(), container.getAllocatedResource());\n \n     return !isUsageBelowShare(usageAfterPreemption, getFairShare());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean canContainerBePreempted(RMContainer container) {\n    if (!isPreemptable()) {\n      return false;\n    }\n\n    // Sanity check that the app owns this container\n    if (!getLiveContainersMap().containsKey(container.getContainerId()) \u0026\u0026\n        !newlyAllocatedContainers.contains(container)) {\n      LOG.error(\"Looking to preempt container \" + container +\n          \". Container does not belong to app \" + getApplicationId());\n      return false;\n    }\n\n    synchronized (preemptionVariablesLock) {\n      if (containersToBePreempted.contains(container)) {\n        // The container is already under consideration for preemption\n        return false;\n      }\n    }\n\n    // Check if the app\u0027s allocation will be over its fairshare even\n    // after preempting this container\n    Resource usageAfterPreemption \u003d Resources.subtract(\n        getResourceUsage(), container.getAllocatedResource());\n\n    return !isUsageBelowShare(usageAfterPreemption, getFairShare());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "718ad9f6ee93d4145f2bb19b7582ce4e1174feaf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6210. FairScheduler: Node reservations can interfere with preemption. (kasha)\n",
      "commitDate": "22/02/17 3:46 PM",
      "commitName": "718ad9f6ee93d4145f2bb19b7582ce4e1174feaf",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "17/02/17 2:07 PM",
      "commitNameOld": "dbbfcf74ab44d7bfdc805b63affd0defc57182b8",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 5.07,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,27 @@\n   boolean canContainerBePreempted(RMContainer container) {\n     if (!isPreemptable()) {\n       return false;\n     }\n \n     // Sanity check that the app owns this container\n     if (!getLiveContainersMap().containsKey(container.getContainerId()) \u0026\u0026\n         !newlyAllocatedContainers.contains(container)) {\n       LOG.error(\"Looking to preempt container \" + container +\n           \". Container does not belong to app \" + getApplicationId());\n       return false;\n     }\n \n     synchronized (preemptionVariablesLock) {\n       if (containersToPreempt.contains(container)) {\n         // The container is already under consideration for preemption\n         return false;\n       }\n     }\n \n     // Check if the app\u0027s allocation will be over its fairshare even\n     // after preempting this container\n     Resource usageAfterPreemption \u003d Resources.subtract(\n         getResourceUsage(), container.getAllocatedResource());\n \n-    return !Resources.lessThan(fsQueue.getPolicy().getResourceCalculator(),\n-        scheduler.getClusterResource(), usageAfterPreemption, getFairShare());\n+    return !isUsageBelowShare(usageAfterPreemption, getFairShare());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean canContainerBePreempted(RMContainer container) {\n    if (!isPreemptable()) {\n      return false;\n    }\n\n    // Sanity check that the app owns this container\n    if (!getLiveContainersMap().containsKey(container.getContainerId()) \u0026\u0026\n        !newlyAllocatedContainers.contains(container)) {\n      LOG.error(\"Looking to preempt container \" + container +\n          \". Container does not belong to app \" + getApplicationId());\n      return false;\n    }\n\n    synchronized (preemptionVariablesLock) {\n      if (containersToPreempt.contains(container)) {\n        // The container is already under consideration for preemption\n        return false;\n      }\n    }\n\n    // Check if the app\u0027s allocation will be over its fairshare even\n    // after preempting this container\n    Resource usageAfterPreemption \u003d Resources.subtract(\n        getResourceUsage(), container.getAllocatedResource());\n\n    return !isUsageBelowShare(usageAfterPreemption, getFairShare());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "dbbfcf74ab44d7bfdc805b63affd0defc57182b8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6193. FairScheduler might not trigger preemption when using DRF. (kasha)\n",
      "commitDate": "17/02/17 2:07 PM",
      "commitName": "dbbfcf74ab44d7bfdc805b63affd0defc57182b8",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "16/02/17 2:54 PM",
      "commitNameOld": "a77f432449aad67da31bd8bf8644b71def741bde",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 0.97,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,28 @@\n   boolean canContainerBePreempted(RMContainer container) {\n     if (!isPreemptable()) {\n       return false;\n     }\n \n     // Sanity check that the app owns this container\n     if (!getLiveContainersMap().containsKey(container.getContainerId()) \u0026\u0026\n         !newlyAllocatedContainers.contains(container)) {\n       LOG.error(\"Looking to preempt container \" + container +\n           \". Container does not belong to app \" + getApplicationId());\n       return false;\n     }\n \n     synchronized (preemptionVariablesLock) {\n       if (containersToPreempt.contains(container)) {\n         // The container is already under consideration for preemption\n         return false;\n       }\n     }\n \n     // Check if the app\u0027s allocation will be over its fairshare even\n     // after preempting this container\n-    Resource currentUsage \u003d getResourceUsage();\n-    Resource fairshare \u003d getFairShare();\n-    Resource overFairShareBy \u003d Resources.subtract(currentUsage, fairshare);\n+    Resource usageAfterPreemption \u003d Resources.subtract(\n+        getResourceUsage(), container.getAllocatedResource());\n \n-    return (Resources.fitsIn(container.getAllocatedResource(),\n-        overFairShareBy));\n+    return !Resources.lessThan(fsQueue.getPolicy().getResourceCalculator(),\n+        scheduler.getClusterResource(), usageAfterPreemption, getFairShare());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean canContainerBePreempted(RMContainer container) {\n    if (!isPreemptable()) {\n      return false;\n    }\n\n    // Sanity check that the app owns this container\n    if (!getLiveContainersMap().containsKey(container.getContainerId()) \u0026\u0026\n        !newlyAllocatedContainers.contains(container)) {\n      LOG.error(\"Looking to preempt container \" + container +\n          \". Container does not belong to app \" + getApplicationId());\n      return false;\n    }\n\n    synchronized (preemptionVariablesLock) {\n      if (containersToPreempt.contains(container)) {\n        // The container is already under consideration for preemption\n        return false;\n      }\n    }\n\n    // Check if the app\u0027s allocation will be over its fairshare even\n    // after preempting this container\n    Resource usageAfterPreemption \u003d Resources.subtract(\n        getResourceUsage(), container.getAllocatedResource());\n\n    return !Resources.lessThan(fsQueue.getPolicy().getResourceCalculator(),\n        scheduler.getClusterResource(), usageAfterPreemption, getFairShare());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "a77f432449aad67da31bd8bf8644b71def741bde": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6171. ConcurrentModificationException on FSAppAttempt.containersToPreempt. (Miklos Szegedi via kasha)\n",
      "commitDate": "16/02/17 2:54 PM",
      "commitName": "a77f432449aad67da31bd8bf8644b71def741bde",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "15/02/17 11:16 PM",
      "commitNameOld": "6c25dbcdc0517a825b92fb16444aa1d3761e160c",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 0.65,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,29 @@\n   boolean canContainerBePreempted(RMContainer container) {\n     if (!isPreemptable()) {\n       return false;\n     }\n \n     // Sanity check that the app owns this container\n     if (!getLiveContainersMap().containsKey(container.getContainerId()) \u0026\u0026\n         !newlyAllocatedContainers.contains(container)) {\n       LOG.error(\"Looking to preempt container \" + container +\n           \". Container does not belong to app \" + getApplicationId());\n       return false;\n     }\n \n-    if (containersToPreempt.contains(container)) {\n-      // The container is already under consideration for preemption\n-      return false;\n+    synchronized (preemptionVariablesLock) {\n+      if (containersToPreempt.contains(container)) {\n+        // The container is already under consideration for preemption\n+        return false;\n+      }\n     }\n \n     // Check if the app\u0027s allocation will be over its fairshare even\n     // after preempting this container\n     Resource currentUsage \u003d getResourceUsage();\n     Resource fairshare \u003d getFairShare();\n     Resource overFairShareBy \u003d Resources.subtract(currentUsage, fairshare);\n \n     return (Resources.fitsIn(container.getAllocatedResource(),\n         overFairShareBy));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean canContainerBePreempted(RMContainer container) {\n    if (!isPreemptable()) {\n      return false;\n    }\n\n    // Sanity check that the app owns this container\n    if (!getLiveContainersMap().containsKey(container.getContainerId()) \u0026\u0026\n        !newlyAllocatedContainers.contains(container)) {\n      LOG.error(\"Looking to preempt container \" + container +\n          \". Container does not belong to app \" + getApplicationId());\n      return false;\n    }\n\n    synchronized (preemptionVariablesLock) {\n      if (containersToPreempt.contains(container)) {\n        // The container is already under consideration for preemption\n        return false;\n      }\n    }\n\n    // Check if the app\u0027s allocation will be over its fairshare even\n    // after preempting this container\n    Resource currentUsage \u003d getResourceUsage();\n    Resource fairshare \u003d getFairShare();\n    Resource overFairShareBy \u003d Resources.subtract(currentUsage, fairshare);\n\n    return (Resources.fitsIn(container.getAllocatedResource(),\n        overFairShareBy));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "e224c9623493d6c4c2f3ff731fd3c72c0f448b19": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5831. FairScheduler: Propagate allowPreemptionFrom flag all the way down to the app. (Yufei Gu via kasha)\n",
      "commitDate": "17/01/17 5:01 PM",
      "commitName": "e224c9623493d6c4c2f3ff731fd3c72c0f448b19",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "06/01/17 9:59 AM",
      "commitNameOld": "2977bc6a141041ef7579efc416e93fc55e0c2a1a",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 11.29,
      "commitsBetweenForRepo": 57,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,27 @@\n   boolean canContainerBePreempted(RMContainer container) {\n+    if (!isPreemptable()) {\n+      return false;\n+    }\n+\n     // Sanity check that the app owns this container\n     if (!getLiveContainersMap().containsKey(container.getContainerId()) \u0026\u0026\n         !newlyAllocatedContainers.contains(container)) {\n       LOG.error(\"Looking to preempt container \" + container +\n           \". Container does not belong to app \" + getApplicationId());\n       return false;\n     }\n \n     if (containersToPreempt.contains(container)) {\n       // The container is already under consideration for preemption\n       return false;\n     }\n \n-    // Check if any of the parent queues are not preemptable\n-    // TODO (YARN-5831): Propagate the \"preemptable\" flag all the way down to\n-    // the app to avoid recursing up every time.\n-    for (FSQueue q \u003d getQueue();\n-        !q.getQueueName().equals(\"root\");\n-        q \u003d q.getParent()) {\n-      if (!q.isPreemptable()) {\n-        return false;\n-      }\n-    }\n-\n     // Check if the app\u0027s allocation will be over its fairshare even\n     // after preempting this container\n     Resource currentUsage \u003d getResourceUsage();\n     Resource fairshare \u003d getFairShare();\n     Resource overFairShareBy \u003d Resources.subtract(currentUsage, fairshare);\n \n     return (Resources.fitsIn(container.getAllocatedResource(),\n         overFairShareBy));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean canContainerBePreempted(RMContainer container) {\n    if (!isPreemptable()) {\n      return false;\n    }\n\n    // Sanity check that the app owns this container\n    if (!getLiveContainersMap().containsKey(container.getContainerId()) \u0026\u0026\n        !newlyAllocatedContainers.contains(container)) {\n      LOG.error(\"Looking to preempt container \" + container +\n          \". Container does not belong to app \" + getApplicationId());\n      return false;\n    }\n\n    if (containersToPreempt.contains(container)) {\n      // The container is already under consideration for preemption\n      return false;\n    }\n\n    // Check if the app\u0027s allocation will be over its fairshare even\n    // after preempting this container\n    Resource currentUsage \u003d getResourceUsage();\n    Resource fairshare \u003d getFairShare();\n    Resource overFairShareBy \u003d Resources.subtract(currentUsage, fairshare);\n\n    return (Resources.fitsIn(container.getAllocatedResource(),\n        overFairShareBy));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "10468529a9b858bd945e7ecb063c9c1438efa474": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4752. Improved preemption in FairScheduler. (kasha)\n\nContains:\nYARN-5605. Preempt containers (all on one node) to meet the requirement of starved applications\nYARN-5821. Drop left-over preemption-related code and clean up method visibilities in the Schedulable hierarchy\nYARN-5783. Verify identification of starved applications.\nYARN-5819. Verify fairshare and minshare preemption\nYARN-5885. Cleanup YARN-4752 branch for merge\n\nChange-Id: Iee0962377d019dd64dc69a020725d2eaf360858c\n",
      "commitDate": "23/11/16 9:48 PM",
      "commitName": "10468529a9b858bd945e7ecb063c9c1438efa474",
      "commitAuthor": "Daniel Templeton",
      "diff": "@@ -0,0 +1,34 @@\n+  boolean canContainerBePreempted(RMContainer container) {\n+    // Sanity check that the app owns this container\n+    if (!getLiveContainersMap().containsKey(container.getContainerId()) \u0026\u0026\n+        !newlyAllocatedContainers.contains(container)) {\n+      LOG.error(\"Looking to preempt container \" + container +\n+          \". Container does not belong to app \" + getApplicationId());\n+      return false;\n+    }\n+\n+    if (containersToPreempt.contains(container)) {\n+      // The container is already under consideration for preemption\n+      return false;\n+    }\n+\n+    // Check if any of the parent queues are not preemptable\n+    // TODO (YARN-5831): Propagate the \"preemptable\" flag all the way down to\n+    // the app to avoid recursing up every time.\n+    for (FSQueue q \u003d getQueue();\n+        !q.getQueueName().equals(\"root\");\n+        q \u003d q.getParent()) {\n+      if (!q.isPreemptable()) {\n+        return false;\n+      }\n+    }\n+\n+    // Check if the app\u0027s allocation will be over its fairshare even\n+    // after preempting this container\n+    Resource currentUsage \u003d getResourceUsage();\n+    Resource fairshare \u003d getFairShare();\n+    Resource overFairShareBy \u003d Resources.subtract(currentUsage, fairshare);\n+\n+    return (Resources.fitsIn(container.getAllocatedResource(),\n+        overFairShareBy));\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  boolean canContainerBePreempted(RMContainer container) {\n    // Sanity check that the app owns this container\n    if (!getLiveContainersMap().containsKey(container.getContainerId()) \u0026\u0026\n        !newlyAllocatedContainers.contains(container)) {\n      LOG.error(\"Looking to preempt container \" + container +\n          \". Container does not belong to app \" + getApplicationId());\n      return false;\n    }\n\n    if (containersToPreempt.contains(container)) {\n      // The container is already under consideration for preemption\n      return false;\n    }\n\n    // Check if any of the parent queues are not preemptable\n    // TODO (YARN-5831): Propagate the \"preemptable\" flag all the way down to\n    // the app to avoid recursing up every time.\n    for (FSQueue q \u003d getQueue();\n        !q.getQueueName().equals(\"root\");\n        q \u003d q.getParent()) {\n      if (!q.isPreemptable()) {\n        return false;\n      }\n    }\n\n    // Check if the app\u0027s allocation will be over its fairshare even\n    // after preempting this container\n    Resource currentUsage \u003d getResourceUsage();\n    Resource fairshare \u003d getFairShare();\n    Resource overFairShareBy \u003d Resources.subtract(currentUsage, fairshare);\n\n    return (Resources.fitsIn(container.getAllocatedResource(),\n        overFairShareBy));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java"
    }
  }
}