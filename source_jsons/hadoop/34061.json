{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CGroupsCpuResourceHandlerImpl.java",
  "functionName": "preStart",
  "functionId": "preStart___container-Container",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupsCpuResourceHandlerImpl.java",
  "functionStartLine": 186,
  "functionEndLine": 197,
  "numCommitsSeen": 6,
  "timeTaken": 1533,
  "changeHistory": [
    "6341c3a437489737a9c4bf0911b218b0023d8dd9",
    "293c74a81b407274621751e2104738b2a09e666e",
    "2085e60a9655b59aa2ba8917acdc511ab71ff6e4"
  ],
  "changeHistoryShort": {
    "6341c3a437489737a9c4bf0911b218b0023d8dd9": "Ybodychange",
    "293c74a81b407274621751e2104738b2a09e666e": "Ybodychange",
    "2085e60a9655b59aa2ba8917acdc511ab71ff6e4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6341c3a437489737a9c4bf0911b218b0023d8dd9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7715. Support NM promotion/demotion of running containers. (Miklos Szegedi via Haibo Chen)\n",
      "commitDate": "10/05/18 11:01 AM",
      "commitName": "6341c3a437489737a9c4bf0911b218b0023d8dd9",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "22/08/17 1:14 AM",
      "commitNameOld": "d5ff57a08fac983f8b5d201064ce07945f0f216e",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 261.41,
      "commitsBetweenForRepo": 2521,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,12 @@\n   public List\u003cPrivilegedOperation\u003e preStart(Container container)\n       throws ResourceHandlerException {\n     String cgroupId \u003d container.getContainerId().toString();\n-    Resource containerResource \u003d container.getResource();\n     cGroupsHandler.createCGroup(CPU, cgroupId);\n-    try {\n-      int containerVCores \u003d containerResource.getVirtualCores();\n-      ContainerTokenIdentifier id \u003d container.getContainerTokenIdentifier();\n-      if (id !\u003d null \u0026\u0026 id.getExecutionType() \u003d\u003d\n-          ExecutionType.OPPORTUNISTIC) {\n-        cGroupsHandler\n-            .updateCGroupParam(CPU, cgroupId, CGroupsHandler.CGROUP_CPU_SHARES,\n-                String.valueOf(CPU_DEFAULT_WEIGHT_OPPORTUNISTIC));\n-      } else {\n-        int cpuShares \u003d CPU_DEFAULT_WEIGHT * containerVCores;\n-        cGroupsHandler\n-            .updateCGroupParam(CPU, cgroupId, CGroupsHandler.CGROUP_CPU_SHARES,\n-                String.valueOf(cpuShares));\n-      }\n-      if (strictResourceUsageMode) {\n-        if (nodeVCores !\u003d containerVCores) {\n-          float containerCPU \u003d\n-              (containerVCores * yarnProcessors) / (float) nodeVCores;\n-          int[] limits \u003d getOverallLimits(containerCPU);\n-          cGroupsHandler.updateCGroupParam(CPU, cgroupId,\n-              CGroupsHandler.CGROUP_CPU_PERIOD_US, String.valueOf(limits[0]));\n-          cGroupsHandler.updateCGroupParam(CPU, cgroupId,\n-              CGroupsHandler.CGROUP_CPU_QUOTA_US, String.valueOf(limits[1]));\n-        }\n-      }\n-    } catch (ResourceHandlerException re) {\n-      cGroupsHandler.deleteCGroup(CPU, cgroupId);\n-      LOG.warn(\"Could not update cgroup for container\", re);\n-      throw re;\n-    }\n+    updateContainer(container);\n     List\u003cPrivilegedOperation\u003e ret \u003d new ArrayList\u003c\u003e();\n     ret.add(new PrivilegedOperation(\n         PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP,\n         PrivilegedOperation.CGROUP_ARG_PREFIX + cGroupsHandler\n             .getPathForCGroupTasks(CPU, cgroupId)));\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cPrivilegedOperation\u003e preStart(Container container)\n      throws ResourceHandlerException {\n    String cgroupId \u003d container.getContainerId().toString();\n    cGroupsHandler.createCGroup(CPU, cgroupId);\n    updateContainer(container);\n    List\u003cPrivilegedOperation\u003e ret \u003d new ArrayList\u003c\u003e();\n    ret.add(new PrivilegedOperation(\n        PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP,\n        PrivilegedOperation.CGROUP_ARG_PREFIX + cGroupsHandler\n            .getPathForCGroupTasks(CPU, cgroupId)));\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupsCpuResourceHandlerImpl.java",
      "extendedDetails": {}
    },
    "293c74a81b407274621751e2104738b2a09e666e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6673 Add cpu cgroup configurations for opportunistic containers. (Miklos Szegedi via Haibo Chen)\n",
      "commitDate": "03/08/17 9:56 AM",
      "commitName": "293c74a81b407274621751e2104738b2a09e666e",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "11/01/17 4:00 PM",
      "commitNameOld": "e6f13fe5d1df8918ffc680d18f9d5576f38893a6",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 203.71,
      "commitsBetweenForRepo": 1127,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,42 @@\n   public List\u003cPrivilegedOperation\u003e preStart(Container container)\n       throws ResourceHandlerException {\n-\n     String cgroupId \u003d container.getContainerId().toString();\n     Resource containerResource \u003d container.getResource();\n     cGroupsHandler.createCGroup(CPU, cgroupId);\n     try {\n       int containerVCores \u003d containerResource.getVirtualCores();\n-      int cpuShares \u003d CPU_DEFAULT_WEIGHT * containerVCores;\n-      cGroupsHandler\n-          .updateCGroupParam(CPU, cgroupId, CGroupsHandler.CGROUP_CPU_SHARES,\n-              String.valueOf(cpuShares));\n+      ContainerTokenIdentifier id \u003d container.getContainerTokenIdentifier();\n+      if (id !\u003d null \u0026\u0026 id.getExecutionType() \u003d\u003d\n+          ExecutionType.OPPORTUNISTIC) {\n+        cGroupsHandler\n+            .updateCGroupParam(CPU, cgroupId, CGroupsHandler.CGROUP_CPU_SHARES,\n+                String.valueOf(CPU_DEFAULT_WEIGHT_OPPORTUNISTIC));\n+      } else {\n+        int cpuShares \u003d CPU_DEFAULT_WEIGHT * containerVCores;\n+        cGroupsHandler\n+            .updateCGroupParam(CPU, cgroupId, CGroupsHandler.CGROUP_CPU_SHARES,\n+                String.valueOf(cpuShares));\n+      }\n       if (strictResourceUsageMode) {\n         if (nodeVCores !\u003d containerVCores) {\n           float containerCPU \u003d\n               (containerVCores * yarnProcessors) / (float) nodeVCores;\n           int[] limits \u003d getOverallLimits(containerCPU);\n           cGroupsHandler.updateCGroupParam(CPU, cgroupId,\n               CGroupsHandler.CGROUP_CPU_PERIOD_US, String.valueOf(limits[0]));\n           cGroupsHandler.updateCGroupParam(CPU, cgroupId,\n               CGroupsHandler.CGROUP_CPU_QUOTA_US, String.valueOf(limits[1]));\n         }\n       }\n     } catch (ResourceHandlerException re) {\n       cGroupsHandler.deleteCGroup(CPU, cgroupId);\n       LOG.warn(\"Could not update cgroup for container\", re);\n       throw re;\n     }\n     List\u003cPrivilegedOperation\u003e ret \u003d new ArrayList\u003c\u003e();\n     ret.add(new PrivilegedOperation(\n         PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP,\n         PrivilegedOperation.CGROUP_ARG_PREFIX + cGroupsHandler\n             .getPathForCGroupTasks(CPU, cgroupId)));\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cPrivilegedOperation\u003e preStart(Container container)\n      throws ResourceHandlerException {\n    String cgroupId \u003d container.getContainerId().toString();\n    Resource containerResource \u003d container.getResource();\n    cGroupsHandler.createCGroup(CPU, cgroupId);\n    try {\n      int containerVCores \u003d containerResource.getVirtualCores();\n      ContainerTokenIdentifier id \u003d container.getContainerTokenIdentifier();\n      if (id !\u003d null \u0026\u0026 id.getExecutionType() \u003d\u003d\n          ExecutionType.OPPORTUNISTIC) {\n        cGroupsHandler\n            .updateCGroupParam(CPU, cgroupId, CGroupsHandler.CGROUP_CPU_SHARES,\n                String.valueOf(CPU_DEFAULT_WEIGHT_OPPORTUNISTIC));\n      } else {\n        int cpuShares \u003d CPU_DEFAULT_WEIGHT * containerVCores;\n        cGroupsHandler\n            .updateCGroupParam(CPU, cgroupId, CGroupsHandler.CGROUP_CPU_SHARES,\n                String.valueOf(cpuShares));\n      }\n      if (strictResourceUsageMode) {\n        if (nodeVCores !\u003d containerVCores) {\n          float containerCPU \u003d\n              (containerVCores * yarnProcessors) / (float) nodeVCores;\n          int[] limits \u003d getOverallLimits(containerCPU);\n          cGroupsHandler.updateCGroupParam(CPU, cgroupId,\n              CGroupsHandler.CGROUP_CPU_PERIOD_US, String.valueOf(limits[0]));\n          cGroupsHandler.updateCGroupParam(CPU, cgroupId,\n              CGroupsHandler.CGROUP_CPU_QUOTA_US, String.valueOf(limits[1]));\n        }\n      }\n    } catch (ResourceHandlerException re) {\n      cGroupsHandler.deleteCGroup(CPU, cgroupId);\n      LOG.warn(\"Could not update cgroup for container\", re);\n      throw re;\n    }\n    List\u003cPrivilegedOperation\u003e ret \u003d new ArrayList\u003c\u003e();\n    ret.add(new PrivilegedOperation(\n        PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP,\n        PrivilegedOperation.CGROUP_ARG_PREFIX + cGroupsHandler\n            .getPathForCGroupTasks(CPU, cgroupId)));\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupsCpuResourceHandlerImpl.java",
      "extendedDetails": {}
    },
    "2085e60a9655b59aa2ba8917acdc511ab71ff6e4": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3542. Refactored existing CPU cgroups support to use the newer and integrated ResourceHandler mechanism, and also deprecated the old LCEResourceHandler inteface hierarchy. Contributed by Varun Vasudev.\n",
      "commitDate": "25/01/16 4:19 PM",
      "commitName": "2085e60a9655b59aa2ba8917acdc511ab71ff6e4",
      "commitAuthor": "Vinod Kumar Vavilapalli (I am also known as @tshooter.)",
      "diff": "@@ -0,0 +1,35 @@\n+  public List\u003cPrivilegedOperation\u003e preStart(Container container)\n+      throws ResourceHandlerException {\n+\n+    String cgroupId \u003d container.getContainerId().toString();\n+    Resource containerResource \u003d container.getResource();\n+    cGroupsHandler.createCGroup(CPU, cgroupId);\n+    try {\n+      int containerVCores \u003d containerResource.getVirtualCores();\n+      int cpuShares \u003d CPU_DEFAULT_WEIGHT * containerVCores;\n+      cGroupsHandler\n+          .updateCGroupParam(CPU, cgroupId, CGroupsHandler.CGROUP_CPU_SHARES,\n+              String.valueOf(cpuShares));\n+      if (strictResourceUsageMode) {\n+        if (nodeVCores !\u003d containerVCores) {\n+          float containerCPU \u003d\n+              (containerVCores * yarnProcessors) / (float) nodeVCores;\n+          int[] limits \u003d getOverallLimits(containerCPU);\n+          cGroupsHandler.updateCGroupParam(CPU, cgroupId,\n+              CGroupsHandler.CGROUP_CPU_PERIOD_US, String.valueOf(limits[0]));\n+          cGroupsHandler.updateCGroupParam(CPU, cgroupId,\n+              CGroupsHandler.CGROUP_CPU_QUOTA_US, String.valueOf(limits[1]));\n+        }\n+      }\n+    } catch (ResourceHandlerException re) {\n+      cGroupsHandler.deleteCGroup(CPU, cgroupId);\n+      LOG.warn(\"Could not update cgroup for container\", re);\n+      throw re;\n+    }\n+    List\u003cPrivilegedOperation\u003e ret \u003d new ArrayList\u003c\u003e();\n+    ret.add(new PrivilegedOperation(\n+        PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP,\n+        PrivilegedOperation.CGROUP_ARG_PREFIX + cGroupsHandler\n+            .getPathForCGroupTasks(CPU, cgroupId)));\n+    return ret;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cPrivilegedOperation\u003e preStart(Container container)\n      throws ResourceHandlerException {\n\n    String cgroupId \u003d container.getContainerId().toString();\n    Resource containerResource \u003d container.getResource();\n    cGroupsHandler.createCGroup(CPU, cgroupId);\n    try {\n      int containerVCores \u003d containerResource.getVirtualCores();\n      int cpuShares \u003d CPU_DEFAULT_WEIGHT * containerVCores;\n      cGroupsHandler\n          .updateCGroupParam(CPU, cgroupId, CGroupsHandler.CGROUP_CPU_SHARES,\n              String.valueOf(cpuShares));\n      if (strictResourceUsageMode) {\n        if (nodeVCores !\u003d containerVCores) {\n          float containerCPU \u003d\n              (containerVCores * yarnProcessors) / (float) nodeVCores;\n          int[] limits \u003d getOverallLimits(containerCPU);\n          cGroupsHandler.updateCGroupParam(CPU, cgroupId,\n              CGroupsHandler.CGROUP_CPU_PERIOD_US, String.valueOf(limits[0]));\n          cGroupsHandler.updateCGroupParam(CPU, cgroupId,\n              CGroupsHandler.CGROUP_CPU_QUOTA_US, String.valueOf(limits[1]));\n        }\n      }\n    } catch (ResourceHandlerException re) {\n      cGroupsHandler.deleteCGroup(CPU, cgroupId);\n      LOG.warn(\"Could not update cgroup for container\", re);\n      throw re;\n    }\n    List\u003cPrivilegedOperation\u003e ret \u003d new ArrayList\u003c\u003e();\n    ret.add(new PrivilegedOperation(\n        PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP,\n        PrivilegedOperation.CGROUP_ARG_PREFIX + cGroupsHandler\n            .getPathForCGroupTasks(CPU, cgroupId)));\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupsCpuResourceHandlerImpl.java"
    }
  }
}