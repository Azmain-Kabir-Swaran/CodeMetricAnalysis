{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ClientRMService.java",
  "functionName": "updateApplicationPriority",
  "functionId": "updateApplicationPriority___request-UpdateApplicationPriorityRequest",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
  "functionStartLine": 1627,
  "functionEndLine": 1678,
  "numCommitsSeen": 128,
  "timeTaken": 4867,
  "changeHistory": [
    "cffea251be4b73ca16e5e11f0be2d22651330f73",
    "a207aa9930e7ee4f10228e2db4b4e733794eb8ea",
    "287d3d6804a869723ae36605a3c2d2b3eae3941e",
    "a926f895c11cd69cf2117c3b970304f3f1f53d92",
    "bcc15c6290b3912a054323695a6a931b0de163bd",
    "85c24660481f33684a42a7f6d665d3117577c780",
    "9f53a95ff624f66a774fe3defeea4a3454f4c4af",
    "57c7ae1affb2e1821fbdc3f47738d7e6fd83c7c1"
  ],
  "changeHistoryShort": {
    "cffea251be4b73ca16e5e11f0be2d22651330f73": "Ybodychange",
    "a207aa9930e7ee4f10228e2db4b4e733794eb8ea": "Ybodychange",
    "287d3d6804a869723ae36605a3c2d2b3eae3941e": "Ybodychange",
    "a926f895c11cd69cf2117c3b970304f3f1f53d92": "Ybodychange",
    "bcc15c6290b3912a054323695a6a931b0de163bd": "Ybodychange",
    "85c24660481f33684a42a7f6d665d3117577c780": "Ybodychange",
    "9f53a95ff624f66a774fe3defeea4a3454f4c4af": "Ybodychange",
    "57c7ae1affb2e1821fbdc3f47738d7e6fd83c7c1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cffea251be4b73ca16e5e11f0be2d22651330f73": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5956. Refactor ClientRMService for unify error handling across apis. Contributed by Kai Sasaki.\n",
      "commitDate": "25/03/17 9:56 AM",
      "commitName": "cffea251be4b73ca16e5e11f0be2d22651330f73",
      "commitAuthor": "Sunil G",
      "commitDateOld": "28/02/17 11:04 AM",
      "commitNameOld": "e0bb867c3fa638c9f689ee0b044b400481cf02b5",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 24.91,
      "commitsBetweenForRepo": 150,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,52 @@\n   public UpdateApplicationPriorityResponse updateApplicationPriority(\n       UpdateApplicationPriorityRequest request) throws YarnException,\n       IOException {\n \n     ApplicationId applicationId \u003d request.getApplicationId();\n     Priority newAppPriority \u003d request.getApplicationPriority();\n \n     UserGroupInformation callerUGI \u003d\n         getCallerUgi(applicationId, AuditConstants.UPDATE_APP_PRIORITY);\n     RMApp application \u003d verifyUserAccessForRMApp(applicationId, callerUGI,\n-        AuditConstants.UPDATE_APP_PRIORITY);\n+        AuditConstants.UPDATE_APP_PRIORITY, ApplicationAccessType.MODIFY_APP,\n+        true);\n \n     UpdateApplicationPriorityResponse response \u003d recordFactory\n         .newRecordInstance(UpdateApplicationPriorityResponse.class);\n     // Update priority only when app is tracked by the scheduler\n     if (!ACTIVE_APP_STATES.contains(application.getState())) {\n       if (application.isAppInCompletedStates()) {\n         // If Application is in any of the final states, change priority\n         // can be skipped rather throwing exception.\n         RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n             AuditConstants.UPDATE_APP_PRIORITY, \"ClientRMService\",\n             applicationId);\n         response.setApplicationPriority(application\n             .getApplicationPriority());\n         return response;\n       }\n       String msg \u003d \"Application in \" + application.getState()\n           + \" state cannot update priority.\";\n       RMAuditLogger\n           .logFailure(callerUGI.getShortUserName(),\n               AuditConstants.UPDATE_APP_PRIORITY, \"UNKNOWN\", \"ClientRMService\",\n               msg);\n       throw new YarnException(msg);\n     }\n \n     try {\n       rmAppManager.updateApplicationPriority(callerUGI,\n           application.getApplicationId(),\n           newAppPriority);\n     } catch (YarnException ex) {\n       RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n           AuditConstants.UPDATE_APP_PRIORITY, \"UNKNOWN\", \"ClientRMService\",\n           ex.getMessage());\n       throw ex;\n     }\n \n     RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n         AuditConstants.UPDATE_APP_PRIORITY, \"ClientRMService\", applicationId);\n     response.setApplicationPriority(application.getApplicationPriority());\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public UpdateApplicationPriorityResponse updateApplicationPriority(\n      UpdateApplicationPriorityRequest request) throws YarnException,\n      IOException {\n\n    ApplicationId applicationId \u003d request.getApplicationId();\n    Priority newAppPriority \u003d request.getApplicationPriority();\n\n    UserGroupInformation callerUGI \u003d\n        getCallerUgi(applicationId, AuditConstants.UPDATE_APP_PRIORITY);\n    RMApp application \u003d verifyUserAccessForRMApp(applicationId, callerUGI,\n        AuditConstants.UPDATE_APP_PRIORITY, ApplicationAccessType.MODIFY_APP,\n        true);\n\n    UpdateApplicationPriorityResponse response \u003d recordFactory\n        .newRecordInstance(UpdateApplicationPriorityResponse.class);\n    // Update priority only when app is tracked by the scheduler\n    if (!ACTIVE_APP_STATES.contains(application.getState())) {\n      if (application.isAppInCompletedStates()) {\n        // If Application is in any of the final states, change priority\n        // can be skipped rather throwing exception.\n        RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n            AuditConstants.UPDATE_APP_PRIORITY, \"ClientRMService\",\n            applicationId);\n        response.setApplicationPriority(application\n            .getApplicationPriority());\n        return response;\n      }\n      String msg \u003d \"Application in \" + application.getState()\n          + \" state cannot update priority.\";\n      RMAuditLogger\n          .logFailure(callerUGI.getShortUserName(),\n              AuditConstants.UPDATE_APP_PRIORITY, \"UNKNOWN\", \"ClientRMService\",\n              msg);\n      throw new YarnException(msg);\n    }\n\n    try {\n      rmAppManager.updateApplicationPriority(callerUGI,\n          application.getApplicationId(),\n          newAppPriority);\n    } catch (YarnException ex) {\n      RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n          AuditConstants.UPDATE_APP_PRIORITY, \"UNKNOWN\", \"ClientRMService\",\n          ex.getMessage());\n      throw ex;\n    }\n\n    RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n        AuditConstants.UPDATE_APP_PRIORITY, \"ClientRMService\", applicationId);\n    response.setApplicationPriority(application.getApplicationPriority());\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "a207aa9930e7ee4f10228e2db4b4e733794eb8ea": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6211. Synchronization improvement for moveApplicationAcrossQueues and updateApplicationPriority. Contributed by Bibin A Chundatt.\n",
      "commitDate": "23/02/17 12:49 AM",
      "commitName": "a207aa9930e7ee4f10228e2db4b4e733794eb8ea",
      "commitAuthor": "Sunil G",
      "commitDateOld": "22/02/17 11:17 AM",
      "commitNameOld": "1a6ca75f3872587fb34c995a4b372b8cd6366d7d",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.56,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,51 @@\n   public UpdateApplicationPriorityResponse updateApplicationPriority(\n       UpdateApplicationPriorityRequest request) throws YarnException,\n       IOException {\n \n     ApplicationId applicationId \u003d request.getApplicationId();\n     Priority newAppPriority \u003d request.getApplicationPriority();\n \n     UserGroupInformation callerUGI \u003d\n         getCallerUgi(applicationId, AuditConstants.UPDATE_APP_PRIORITY);\n     RMApp application \u003d verifyUserAccessForRMApp(applicationId, callerUGI,\n         AuditConstants.UPDATE_APP_PRIORITY);\n \n     UpdateApplicationPriorityResponse response \u003d recordFactory\n         .newRecordInstance(UpdateApplicationPriorityResponse.class);\n     // Update priority only when app is tracked by the scheduler\n     if (!ACTIVE_APP_STATES.contains(application.getState())) {\n       if (application.isAppInCompletedStates()) {\n         // If Application is in any of the final states, change priority\n         // can be skipped rather throwing exception.\n         RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n             AuditConstants.UPDATE_APP_PRIORITY, \"ClientRMService\",\n             applicationId);\n         response.setApplicationPriority(application\n             .getApplicationPriority());\n         return response;\n       }\n       String msg \u003d \"Application in \" + application.getState()\n           + \" state cannot update priority.\";\n       RMAuditLogger\n           .logFailure(callerUGI.getShortUserName(),\n               AuditConstants.UPDATE_APP_PRIORITY, \"UNKNOWN\", \"ClientRMService\",\n               msg);\n       throw new YarnException(msg);\n     }\n \n     try {\n-      rmAppManager.updateApplicationPriority(callerUGI, applicationId,\n+      rmAppManager.updateApplicationPriority(callerUGI,\n+          application.getApplicationId(),\n           newAppPriority);\n     } catch (YarnException ex) {\n       RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n           AuditConstants.UPDATE_APP_PRIORITY, \"UNKNOWN\", \"ClientRMService\",\n           ex.getMessage());\n       throw ex;\n     }\n \n     RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n         AuditConstants.UPDATE_APP_PRIORITY, \"ClientRMService\", applicationId);\n     response.setApplicationPriority(application.getApplicationPriority());\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public UpdateApplicationPriorityResponse updateApplicationPriority(\n      UpdateApplicationPriorityRequest request) throws YarnException,\n      IOException {\n\n    ApplicationId applicationId \u003d request.getApplicationId();\n    Priority newAppPriority \u003d request.getApplicationPriority();\n\n    UserGroupInformation callerUGI \u003d\n        getCallerUgi(applicationId, AuditConstants.UPDATE_APP_PRIORITY);\n    RMApp application \u003d verifyUserAccessForRMApp(applicationId, callerUGI,\n        AuditConstants.UPDATE_APP_PRIORITY);\n\n    UpdateApplicationPriorityResponse response \u003d recordFactory\n        .newRecordInstance(UpdateApplicationPriorityResponse.class);\n    // Update priority only when app is tracked by the scheduler\n    if (!ACTIVE_APP_STATES.contains(application.getState())) {\n      if (application.isAppInCompletedStates()) {\n        // If Application is in any of the final states, change priority\n        // can be skipped rather throwing exception.\n        RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n            AuditConstants.UPDATE_APP_PRIORITY, \"ClientRMService\",\n            applicationId);\n        response.setApplicationPriority(application\n            .getApplicationPriority());\n        return response;\n      }\n      String msg \u003d \"Application in \" + application.getState()\n          + \" state cannot update priority.\";\n      RMAuditLogger\n          .logFailure(callerUGI.getShortUserName(),\n              AuditConstants.UPDATE_APP_PRIORITY, \"UNKNOWN\", \"ClientRMService\",\n              msg);\n      throw new YarnException(msg);\n    }\n\n    try {\n      rmAppManager.updateApplicationPriority(callerUGI,\n          application.getApplicationId(),\n          newAppPriority);\n    } catch (YarnException ex) {\n      RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n          AuditConstants.UPDATE_APP_PRIORITY, \"UNKNOWN\", \"ClientRMService\",\n          ex.getMessage());\n      throw ex;\n    }\n\n    RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n        AuditConstants.UPDATE_APP_PRIORITY, \"ClientRMService\", applicationId);\n    response.setApplicationPriority(application.getApplicationPriority());\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "287d3d6804a869723ae36605a3c2d2b3eae3941e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3955. Support for application priority ACLs in queues of CapacityScheduler. (Sunil G via wangda)\n",
      "commitDate": "09/01/17 8:40 AM",
      "commitName": "287d3d6804a869723ae36605a3c2d2b3eae3941e",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "27/12/16 1:35 PM",
      "commitNameOld": "1bbd023275db535ab80fcb60e022151e9679d468",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 12.8,
      "commitsBetweenForRepo": 52,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,50 @@\n   public UpdateApplicationPriorityResponse updateApplicationPriority(\n       UpdateApplicationPriorityRequest request) throws YarnException,\n       IOException {\n \n     ApplicationId applicationId \u003d request.getApplicationId();\n     Priority newAppPriority \u003d request.getApplicationPriority();\n \n     UserGroupInformation callerUGI \u003d\n         getCallerUgi(applicationId, AuditConstants.UPDATE_APP_PRIORITY);\n     RMApp application \u003d verifyUserAccessForRMApp(applicationId, callerUGI,\n         AuditConstants.UPDATE_APP_PRIORITY);\n \n     UpdateApplicationPriorityResponse response \u003d recordFactory\n         .newRecordInstance(UpdateApplicationPriorityResponse.class);\n     // Update priority only when app is tracked by the scheduler\n     if (!ACTIVE_APP_STATES.contains(application.getState())) {\n       if (application.isAppInCompletedStates()) {\n         // If Application is in any of the final states, change priority\n         // can be skipped rather throwing exception.\n         RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n             AuditConstants.UPDATE_APP_PRIORITY, \"ClientRMService\",\n             applicationId);\n         response.setApplicationPriority(application\n             .getApplicationPriority());\n         return response;\n       }\n       String msg \u003d \"Application in \" + application.getState()\n           + \" state cannot update priority.\";\n       RMAuditLogger\n           .logFailure(callerUGI.getShortUserName(),\n               AuditConstants.UPDATE_APP_PRIORITY, \"UNKNOWN\", \"ClientRMService\",\n               msg);\n       throw new YarnException(msg);\n     }\n \n     try {\n-      rmAppManager.updateApplicationPriority(applicationId, newAppPriority);\n+      rmAppManager.updateApplicationPriority(callerUGI, applicationId,\n+          newAppPriority);\n     } catch (YarnException ex) {\n       RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n           AuditConstants.UPDATE_APP_PRIORITY, \"UNKNOWN\", \"ClientRMService\",\n           ex.getMessage());\n       throw ex;\n     }\n \n     RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n         AuditConstants.UPDATE_APP_PRIORITY, \"ClientRMService\", applicationId);\n     response.setApplicationPriority(application.getApplicationPriority());\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public UpdateApplicationPriorityResponse updateApplicationPriority(\n      UpdateApplicationPriorityRequest request) throws YarnException,\n      IOException {\n\n    ApplicationId applicationId \u003d request.getApplicationId();\n    Priority newAppPriority \u003d request.getApplicationPriority();\n\n    UserGroupInformation callerUGI \u003d\n        getCallerUgi(applicationId, AuditConstants.UPDATE_APP_PRIORITY);\n    RMApp application \u003d verifyUserAccessForRMApp(applicationId, callerUGI,\n        AuditConstants.UPDATE_APP_PRIORITY);\n\n    UpdateApplicationPriorityResponse response \u003d recordFactory\n        .newRecordInstance(UpdateApplicationPriorityResponse.class);\n    // Update priority only when app is tracked by the scheduler\n    if (!ACTIVE_APP_STATES.contains(application.getState())) {\n      if (application.isAppInCompletedStates()) {\n        // If Application is in any of the final states, change priority\n        // can be skipped rather throwing exception.\n        RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n            AuditConstants.UPDATE_APP_PRIORITY, \"ClientRMService\",\n            applicationId);\n        response.setApplicationPriority(application\n            .getApplicationPriority());\n        return response;\n      }\n      String msg \u003d \"Application in \" + application.getState()\n          + \" state cannot update priority.\";\n      RMAuditLogger\n          .logFailure(callerUGI.getShortUserName(),\n              AuditConstants.UPDATE_APP_PRIORITY, \"UNKNOWN\", \"ClientRMService\",\n              msg);\n      throw new YarnException(msg);\n    }\n\n    try {\n      rmAppManager.updateApplicationPriority(callerUGI, applicationId,\n          newAppPriority);\n    } catch (YarnException ex) {\n      RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n          AuditConstants.UPDATE_APP_PRIORITY, \"UNKNOWN\", \"ClientRMService\",\n          ex.getMessage());\n      throw ex;\n    }\n\n    RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n        AuditConstants.UPDATE_APP_PRIORITY, \"ClientRMService\", applicationId);\n    response.setApplicationPriority(application.getApplicationPriority());\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "a926f895c11cd69cf2117c3b970304f3f1f53d92": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5865. Retrospect updateApplicationPriority api to handle state store exception in align with YARN-5611. Contributed by Sunil G.\n",
      "commitDate": "22/11/16 1:19 AM",
      "commitName": "a926f895c11cd69cf2117c3b970304f3f1f53d92",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "09/11/16 4:08 PM",
      "commitNameOld": "bcc15c6290b3912a054323695a6a931b0de163bd",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 12.38,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,49 @@\n   public UpdateApplicationPriorityResponse updateApplicationPriority(\n       UpdateApplicationPriorityRequest request) throws YarnException,\n       IOException {\n \n     ApplicationId applicationId \u003d request.getApplicationId();\n     Priority newAppPriority \u003d request.getApplicationPriority();\n \n     UserGroupInformation callerUGI \u003d\n         getCallerUgi(applicationId, AuditConstants.UPDATE_APP_PRIORITY);\n     RMApp application \u003d verifyUserAccessForRMApp(applicationId, callerUGI,\n         AuditConstants.UPDATE_APP_PRIORITY);\n \n     UpdateApplicationPriorityResponse response \u003d recordFactory\n         .newRecordInstance(UpdateApplicationPriorityResponse.class);\n     // Update priority only when app is tracked by the scheduler\n     if (!ACTIVE_APP_STATES.contains(application.getState())) {\n-      if (COMPLETED_APP_STATES.contains(application.getState())) {\n+      if (application.isAppInCompletedStates()) {\n         // If Application is in any of the final states, change priority\n         // can be skipped rather throwing exception.\n         RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n             AuditConstants.UPDATE_APP_PRIORITY, \"ClientRMService\",\n             applicationId);\n         response.setApplicationPriority(application\n-            .getApplicationSubmissionContext().getPriority());\n+            .getApplicationPriority());\n         return response;\n       }\n       String msg \u003d \"Application in \" + application.getState()\n           + \" state cannot update priority.\";\n       RMAuditLogger\n           .logFailure(callerUGI.getShortUserName(),\n               AuditConstants.UPDATE_APP_PRIORITY, \"UNKNOWN\", \"ClientRMService\",\n               msg);\n       throw new YarnException(msg);\n     }\n \n     try {\n-      rmContext.getScheduler().updateApplicationPriority(newAppPriority,\n-          applicationId);\n+      rmAppManager.updateApplicationPriority(applicationId, newAppPriority);\n     } catch (YarnException ex) {\n       RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n           AuditConstants.UPDATE_APP_PRIORITY, \"UNKNOWN\", \"ClientRMService\",\n           ex.getMessage());\n       throw ex;\n     }\n \n     RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n         AuditConstants.UPDATE_APP_PRIORITY, \"ClientRMService\", applicationId);\n-    response.setApplicationPriority(application\n-        .getApplicationSubmissionContext().getPriority());\n+    response.setApplicationPriority(application.getApplicationPriority());\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public UpdateApplicationPriorityResponse updateApplicationPriority(\n      UpdateApplicationPriorityRequest request) throws YarnException,\n      IOException {\n\n    ApplicationId applicationId \u003d request.getApplicationId();\n    Priority newAppPriority \u003d request.getApplicationPriority();\n\n    UserGroupInformation callerUGI \u003d\n        getCallerUgi(applicationId, AuditConstants.UPDATE_APP_PRIORITY);\n    RMApp application \u003d verifyUserAccessForRMApp(applicationId, callerUGI,\n        AuditConstants.UPDATE_APP_PRIORITY);\n\n    UpdateApplicationPriorityResponse response \u003d recordFactory\n        .newRecordInstance(UpdateApplicationPriorityResponse.class);\n    // Update priority only when app is tracked by the scheduler\n    if (!ACTIVE_APP_STATES.contains(application.getState())) {\n      if (application.isAppInCompletedStates()) {\n        // If Application is in any of the final states, change priority\n        // can be skipped rather throwing exception.\n        RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n            AuditConstants.UPDATE_APP_PRIORITY, \"ClientRMService\",\n            applicationId);\n        response.setApplicationPriority(application\n            .getApplicationPriority());\n        return response;\n      }\n      String msg \u003d \"Application in \" + application.getState()\n          + \" state cannot update priority.\";\n      RMAuditLogger\n          .logFailure(callerUGI.getShortUserName(),\n              AuditConstants.UPDATE_APP_PRIORITY, \"UNKNOWN\", \"ClientRMService\",\n              msg);\n      throw new YarnException(msg);\n    }\n\n    try {\n      rmAppManager.updateApplicationPriority(applicationId, newAppPriority);\n    } catch (YarnException ex) {\n      RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n          AuditConstants.UPDATE_APP_PRIORITY, \"UNKNOWN\", \"ClientRMService\",\n          ex.getMessage());\n      throw ex;\n    }\n\n    RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n        AuditConstants.UPDATE_APP_PRIORITY, \"ClientRMService\", applicationId);\n    response.setApplicationPriority(application.getApplicationPriority());\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "bcc15c6290b3912a054323695a6a931b0de163bd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5611. Provide an API to update lifetime of an application. Contributed by Rohith Sharma K S\n",
      "commitDate": "09/11/16 4:08 PM",
      "commitName": "bcc15c6290b3912a054323695a6a931b0de163bd",
      "commitAuthor": "Jian He",
      "commitDateOld": "22/09/16 6:00 PM",
      "commitNameOld": "d0372dc613136910160e9d42bd5eaa0d4bde2356",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 47.96,
      "commitsBetweenForRepo": 428,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,77 +1,51 @@\n   public UpdateApplicationPriorityResponse updateApplicationPriority(\n       UpdateApplicationPriorityRequest request) throws YarnException,\n       IOException {\n \n     ApplicationId applicationId \u003d request.getApplicationId();\n     Priority newAppPriority \u003d request.getApplicationPriority();\n-    UserGroupInformation callerUGI;\n-    try {\n-      callerUGI \u003d UserGroupInformation.getCurrentUser();\n-    } catch (IOException ie) {\n-      LOG.info(\"Error getting UGI \", ie);\n-      RMAuditLogger.logFailure(\"UNKNOWN\", AuditConstants.UPDATE_APP_PRIORITY,\n-          \"UNKNOWN\", \"ClientRMService\", \"Error getting UGI\", applicationId);\n-      throw RPCUtil.getRemoteException(ie);\n-    }\n \n-    RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n-    if (application \u003d\u003d null) {\n-      RMAuditLogger.logFailure(callerUGI.getUserName(),\n-          AuditConstants.UPDATE_APP_PRIORITY, \"UNKNOWN\", \"ClientRMService\",\n-          \"Trying to update priority of an absent application\", applicationId);\n-      throw new ApplicationNotFoundException(\n-          \"Trying to update priority of an absent application \"\n-          + applicationId);\n-    }\n-\n-    if (!checkAccess(callerUGI, application.getUser(),\n-        ApplicationAccessType.MODIFY_APP, application)) {\n-      RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n-          AuditConstants.UPDATE_APP_PRIORITY,\n-          \"User doesn\u0027t have permissions to \"\n-              + ApplicationAccessType.MODIFY_APP.toString(), \"ClientRMService\",\n-          AuditConstants.UNAUTHORIZED_USER, applicationId);\n-      throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n-          + callerUGI.getShortUserName() + \" cannot perform operation \"\n-          + ApplicationAccessType.MODIFY_APP.name() + \" on \" + applicationId));\n-    }\n+    UserGroupInformation callerUGI \u003d\n+        getCallerUgi(applicationId, AuditConstants.UPDATE_APP_PRIORITY);\n+    RMApp application \u003d verifyUserAccessForRMApp(applicationId, callerUGI,\n+        AuditConstants.UPDATE_APP_PRIORITY);\n \n     UpdateApplicationPriorityResponse response \u003d recordFactory\n         .newRecordInstance(UpdateApplicationPriorityResponse.class);\n     // Update priority only when app is tracked by the scheduler\n     if (!ACTIVE_APP_STATES.contains(application.getState())) {\n       if (COMPLETED_APP_STATES.contains(application.getState())) {\n         // If Application is in any of the final states, change priority\n         // can be skipped rather throwing exception.\n         RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n             AuditConstants.UPDATE_APP_PRIORITY, \"ClientRMService\",\n             applicationId);\n         response.setApplicationPriority(application\n             .getApplicationSubmissionContext().getPriority());\n         return response;\n       }\n       String msg \u003d \"Application in \" + application.getState()\n           + \" state cannot update priority.\";\n       RMAuditLogger\n           .logFailure(callerUGI.getShortUserName(),\n               AuditConstants.UPDATE_APP_PRIORITY, \"UNKNOWN\", \"ClientRMService\",\n               msg);\n       throw new YarnException(msg);\n     }\n \n     try {\n       rmContext.getScheduler().updateApplicationPriority(newAppPriority,\n           applicationId);\n     } catch (YarnException ex) {\n       RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n           AuditConstants.UPDATE_APP_PRIORITY, \"UNKNOWN\", \"ClientRMService\",\n           ex.getMessage());\n       throw ex;\n     }\n \n     RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n         AuditConstants.UPDATE_APP_PRIORITY, \"ClientRMService\", applicationId);\n     response.setApplicationPriority(application\n         .getApplicationSubmissionContext().getPriority());\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public UpdateApplicationPriorityResponse updateApplicationPriority(\n      UpdateApplicationPriorityRequest request) throws YarnException,\n      IOException {\n\n    ApplicationId applicationId \u003d request.getApplicationId();\n    Priority newAppPriority \u003d request.getApplicationPriority();\n\n    UserGroupInformation callerUGI \u003d\n        getCallerUgi(applicationId, AuditConstants.UPDATE_APP_PRIORITY);\n    RMApp application \u003d verifyUserAccessForRMApp(applicationId, callerUGI,\n        AuditConstants.UPDATE_APP_PRIORITY);\n\n    UpdateApplicationPriorityResponse response \u003d recordFactory\n        .newRecordInstance(UpdateApplicationPriorityResponse.class);\n    // Update priority only when app is tracked by the scheduler\n    if (!ACTIVE_APP_STATES.contains(application.getState())) {\n      if (COMPLETED_APP_STATES.contains(application.getState())) {\n        // If Application is in any of the final states, change priority\n        // can be skipped rather throwing exception.\n        RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n            AuditConstants.UPDATE_APP_PRIORITY, \"ClientRMService\",\n            applicationId);\n        response.setApplicationPriority(application\n            .getApplicationSubmissionContext().getPriority());\n        return response;\n      }\n      String msg \u003d \"Application in \" + application.getState()\n          + \" state cannot update priority.\";\n      RMAuditLogger\n          .logFailure(callerUGI.getShortUserName(),\n              AuditConstants.UPDATE_APP_PRIORITY, \"UNKNOWN\", \"ClientRMService\",\n              msg);\n      throw new YarnException(msg);\n    }\n\n    try {\n      rmContext.getScheduler().updateApplicationPriority(newAppPriority,\n          applicationId);\n    } catch (YarnException ex) {\n      RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n          AuditConstants.UPDATE_APP_PRIORITY, \"UNKNOWN\", \"ClientRMService\",\n          ex.getMessage());\n      throw ex;\n    }\n\n    RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n        AuditConstants.UPDATE_APP_PRIORITY, \"ClientRMService\", applicationId);\n    response.setApplicationPriority(application\n        .getApplicationSubmissionContext().getPriority());\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "85c24660481f33684a42a7f6d665d3117577c780": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4164. Changed updateApplicationPriority API to return the updated application priority. Contributed by Rohith Sharma K S\n",
      "commitDate": "18/12/15 2:13 PM",
      "commitName": "85c24660481f33684a42a7f6d665d3117577c780",
      "commitAuthor": "Jian He",
      "commitDateOld": "16/12/15 1:18 PM",
      "commitNameOld": "79c41b1d83e981ae74cb8b58ffcf7907b7612ad4",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 2.04,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,73 +1,77 @@\n   public UpdateApplicationPriorityResponse updateApplicationPriority(\n       UpdateApplicationPriorityRequest request) throws YarnException,\n       IOException {\n \n     ApplicationId applicationId \u003d request.getApplicationId();\n     Priority newAppPriority \u003d request.getApplicationPriority();\n     UserGroupInformation callerUGI;\n     try {\n       callerUGI \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException ie) {\n       LOG.info(\"Error getting UGI \", ie);\n       RMAuditLogger.logFailure(\"UNKNOWN\", AuditConstants.UPDATE_APP_PRIORITY,\n           \"UNKNOWN\", \"ClientRMService\", \"Error getting UGI\", applicationId);\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n     RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n     if (application \u003d\u003d null) {\n       RMAuditLogger.logFailure(callerUGI.getUserName(),\n           AuditConstants.UPDATE_APP_PRIORITY, \"UNKNOWN\", \"ClientRMService\",\n           \"Trying to update priority of an absent application\", applicationId);\n       throw new ApplicationNotFoundException(\n           \"Trying to update priority of an absent application \"\n           + applicationId);\n     }\n \n     if (!checkAccess(callerUGI, application.getUser(),\n         ApplicationAccessType.MODIFY_APP, application)) {\n       RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n           AuditConstants.UPDATE_APP_PRIORITY,\n           \"User doesn\u0027t have permissions to \"\n               + ApplicationAccessType.MODIFY_APP.toString(), \"ClientRMService\",\n           AuditConstants.UNAUTHORIZED_USER, applicationId);\n       throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n           + callerUGI.getShortUserName() + \" cannot perform operation \"\n           + ApplicationAccessType.MODIFY_APP.name() + \" on \" + applicationId));\n     }\n \n     UpdateApplicationPriorityResponse response \u003d recordFactory\n         .newRecordInstance(UpdateApplicationPriorityResponse.class);\n     // Update priority only when app is tracked by the scheduler\n     if (!ACTIVE_APP_STATES.contains(application.getState())) {\n       if (COMPLETED_APP_STATES.contains(application.getState())) {\n         // If Application is in any of the final states, change priority\n         // can be skipped rather throwing exception.\n         RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n             AuditConstants.UPDATE_APP_PRIORITY, \"ClientRMService\",\n             applicationId);\n+        response.setApplicationPriority(application\n+            .getApplicationSubmissionContext().getPriority());\n         return response;\n       }\n       String msg \u003d \"Application in \" + application.getState()\n           + \" state cannot update priority.\";\n       RMAuditLogger\n           .logFailure(callerUGI.getShortUserName(),\n               AuditConstants.UPDATE_APP_PRIORITY, \"UNKNOWN\", \"ClientRMService\",\n               msg);\n       throw new YarnException(msg);\n     }\n \n     try {\n       rmContext.getScheduler().updateApplicationPriority(newAppPriority,\n           applicationId);\n     } catch (YarnException ex) {\n       RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n           AuditConstants.UPDATE_APP_PRIORITY, \"UNKNOWN\", \"ClientRMService\",\n           ex.getMessage());\n       throw ex;\n     }\n \n     RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n         AuditConstants.UPDATE_APP_PRIORITY, \"ClientRMService\", applicationId);\n+    response.setApplicationPriority(application\n+        .getApplicationSubmissionContext().getPriority());\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public UpdateApplicationPriorityResponse updateApplicationPriority(\n      UpdateApplicationPriorityRequest request) throws YarnException,\n      IOException {\n\n    ApplicationId applicationId \u003d request.getApplicationId();\n    Priority newAppPriority \u003d request.getApplicationPriority();\n    UserGroupInformation callerUGI;\n    try {\n      callerUGI \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ie) {\n      LOG.info(\"Error getting UGI \", ie);\n      RMAuditLogger.logFailure(\"UNKNOWN\", AuditConstants.UPDATE_APP_PRIORITY,\n          \"UNKNOWN\", \"ClientRMService\", \"Error getting UGI\", applicationId);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n    if (application \u003d\u003d null) {\n      RMAuditLogger.logFailure(callerUGI.getUserName(),\n          AuditConstants.UPDATE_APP_PRIORITY, \"UNKNOWN\", \"ClientRMService\",\n          \"Trying to update priority of an absent application\", applicationId);\n      throw new ApplicationNotFoundException(\n          \"Trying to update priority of an absent application \"\n          + applicationId);\n    }\n\n    if (!checkAccess(callerUGI, application.getUser(),\n        ApplicationAccessType.MODIFY_APP, application)) {\n      RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n          AuditConstants.UPDATE_APP_PRIORITY,\n          \"User doesn\u0027t have permissions to \"\n              + ApplicationAccessType.MODIFY_APP.toString(), \"ClientRMService\",\n          AuditConstants.UNAUTHORIZED_USER, applicationId);\n      throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n          + callerUGI.getShortUserName() + \" cannot perform operation \"\n          + ApplicationAccessType.MODIFY_APP.name() + \" on \" + applicationId));\n    }\n\n    UpdateApplicationPriorityResponse response \u003d recordFactory\n        .newRecordInstance(UpdateApplicationPriorityResponse.class);\n    // Update priority only when app is tracked by the scheduler\n    if (!ACTIVE_APP_STATES.contains(application.getState())) {\n      if (COMPLETED_APP_STATES.contains(application.getState())) {\n        // If Application is in any of the final states, change priority\n        // can be skipped rather throwing exception.\n        RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n            AuditConstants.UPDATE_APP_PRIORITY, \"ClientRMService\",\n            applicationId);\n        response.setApplicationPriority(application\n            .getApplicationSubmissionContext().getPriority());\n        return response;\n      }\n      String msg \u003d \"Application in \" + application.getState()\n          + \" state cannot update priority.\";\n      RMAuditLogger\n          .logFailure(callerUGI.getShortUserName(),\n              AuditConstants.UPDATE_APP_PRIORITY, \"UNKNOWN\", \"ClientRMService\",\n              msg);\n      throw new YarnException(msg);\n    }\n\n    try {\n      rmContext.getScheduler().updateApplicationPriority(newAppPriority,\n          applicationId);\n    } catch (YarnException ex) {\n      RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n          AuditConstants.UPDATE_APP_PRIORITY, \"UNKNOWN\", \"ClientRMService\",\n          ex.getMessage());\n      throw ex;\n    }\n\n    RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n        AuditConstants.UPDATE_APP_PRIORITY, \"ClientRMService\", applicationId);\n    response.setApplicationPriority(application\n        .getApplicationSubmissionContext().getPriority());\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "9f53a95ff624f66a774fe3defeea4a3454f4c4af": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4141. Runtime Application Priority change should not throw exception for applications at finishing states. Contributed by Sunil G\n",
      "commitDate": "28/09/15 3:55 PM",
      "commitName": "9f53a95ff624f66a774fe3defeea4a3454f4c4af",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "13/09/15 11:09 PM",
      "commitNameOld": "e1b1d7e4aebfed0dec4d7df21561ab37f73ef1d7",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 14.7,
      "commitsBetweenForRepo": 114,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,67 +1,73 @@\n   public UpdateApplicationPriorityResponse updateApplicationPriority(\n       UpdateApplicationPriorityRequest request) throws YarnException,\n       IOException {\n \n     ApplicationId applicationId \u003d request.getApplicationId();\n     Priority newAppPriority \u003d request.getApplicationPriority();\n     UserGroupInformation callerUGI;\n     try {\n       callerUGI \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException ie) {\n       LOG.info(\"Error getting UGI \", ie);\n       RMAuditLogger.logFailure(\"UNKNOWN\", AuditConstants.UPDATE_APP_PRIORITY,\n           \"UNKNOWN\", \"ClientRMService\", \"Error getting UGI\", applicationId);\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n     RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n     if (application \u003d\u003d null) {\n       RMAuditLogger.logFailure(callerUGI.getUserName(),\n           AuditConstants.UPDATE_APP_PRIORITY, \"UNKNOWN\", \"ClientRMService\",\n           \"Trying to update priority of an absent application\", applicationId);\n       throw new ApplicationNotFoundException(\n-          \"Trying to update priority o an absent application \" + applicationId);\n+          \"Trying to update priority of an absent application \"\n+          + applicationId);\n     }\n \n     if (!checkAccess(callerUGI, application.getUser(),\n         ApplicationAccessType.MODIFY_APP, application)) {\n       RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n           AuditConstants.UPDATE_APP_PRIORITY,\n           \"User doesn\u0027t have permissions to \"\n               + ApplicationAccessType.MODIFY_APP.toString(), \"ClientRMService\",\n           AuditConstants.UNAUTHORIZED_USER, applicationId);\n       throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n           + callerUGI.getShortUserName() + \" cannot perform operation \"\n           + ApplicationAccessType.MODIFY_APP.name() + \" on \" + applicationId));\n     }\n \n+    UpdateApplicationPriorityResponse response \u003d recordFactory\n+        .newRecordInstance(UpdateApplicationPriorityResponse.class);\n     // Update priority only when app is tracked by the scheduler\n-    if (!EnumSet.of(RMAppState.ACCEPTED, RMAppState.RUNNING).contains(\n-        application.getState())) {\n-      String msg \u003d\n-          \"Application in \" + application.getState()\n-              + \" state cannot be update priority.\";\n+    if (!ACTIVE_APP_STATES.contains(application.getState())) {\n+      if (COMPLETED_APP_STATES.contains(application.getState())) {\n+        // If Application is in any of the final states, change priority\n+        // can be skipped rather throwing exception.\n+        RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n+            AuditConstants.UPDATE_APP_PRIORITY, \"ClientRMService\",\n+            applicationId);\n+        return response;\n+      }\n+      String msg \u003d \"Application in \" + application.getState()\n+          + \" state cannot update priority.\";\n       RMAuditLogger\n           .logFailure(callerUGI.getShortUserName(),\n               AuditConstants.UPDATE_APP_PRIORITY, \"UNKNOWN\", \"ClientRMService\",\n               msg);\n       throw new YarnException(msg);\n     }\n \n     try {\n       rmContext.getScheduler().updateApplicationPriority(newAppPriority,\n           applicationId);\n     } catch (YarnException ex) {\n       RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n           AuditConstants.UPDATE_APP_PRIORITY, \"UNKNOWN\", \"ClientRMService\",\n           ex.getMessage());\n       throw ex;\n     }\n \n     RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n         AuditConstants.UPDATE_APP_PRIORITY, \"ClientRMService\", applicationId);\n-    UpdateApplicationPriorityResponse response \u003d\n-        recordFactory\n-            .newRecordInstance(UpdateApplicationPriorityResponse.class);\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public UpdateApplicationPriorityResponse updateApplicationPriority(\n      UpdateApplicationPriorityRequest request) throws YarnException,\n      IOException {\n\n    ApplicationId applicationId \u003d request.getApplicationId();\n    Priority newAppPriority \u003d request.getApplicationPriority();\n    UserGroupInformation callerUGI;\n    try {\n      callerUGI \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ie) {\n      LOG.info(\"Error getting UGI \", ie);\n      RMAuditLogger.logFailure(\"UNKNOWN\", AuditConstants.UPDATE_APP_PRIORITY,\n          \"UNKNOWN\", \"ClientRMService\", \"Error getting UGI\", applicationId);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n    if (application \u003d\u003d null) {\n      RMAuditLogger.logFailure(callerUGI.getUserName(),\n          AuditConstants.UPDATE_APP_PRIORITY, \"UNKNOWN\", \"ClientRMService\",\n          \"Trying to update priority of an absent application\", applicationId);\n      throw new ApplicationNotFoundException(\n          \"Trying to update priority of an absent application \"\n          + applicationId);\n    }\n\n    if (!checkAccess(callerUGI, application.getUser(),\n        ApplicationAccessType.MODIFY_APP, application)) {\n      RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n          AuditConstants.UPDATE_APP_PRIORITY,\n          \"User doesn\u0027t have permissions to \"\n              + ApplicationAccessType.MODIFY_APP.toString(), \"ClientRMService\",\n          AuditConstants.UNAUTHORIZED_USER, applicationId);\n      throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n          + callerUGI.getShortUserName() + \" cannot perform operation \"\n          + ApplicationAccessType.MODIFY_APP.name() + \" on \" + applicationId));\n    }\n\n    UpdateApplicationPriorityResponse response \u003d recordFactory\n        .newRecordInstance(UpdateApplicationPriorityResponse.class);\n    // Update priority only when app is tracked by the scheduler\n    if (!ACTIVE_APP_STATES.contains(application.getState())) {\n      if (COMPLETED_APP_STATES.contains(application.getState())) {\n        // If Application is in any of the final states, change priority\n        // can be skipped rather throwing exception.\n        RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n            AuditConstants.UPDATE_APP_PRIORITY, \"ClientRMService\",\n            applicationId);\n        return response;\n      }\n      String msg \u003d \"Application in \" + application.getState()\n          + \" state cannot update priority.\";\n      RMAuditLogger\n          .logFailure(callerUGI.getShortUserName(),\n              AuditConstants.UPDATE_APP_PRIORITY, \"UNKNOWN\", \"ClientRMService\",\n              msg);\n      throw new YarnException(msg);\n    }\n\n    try {\n      rmContext.getScheduler().updateApplicationPriority(newAppPriority,\n          applicationId);\n    } catch (YarnException ex) {\n      RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n          AuditConstants.UPDATE_APP_PRIORITY, \"UNKNOWN\", \"ClientRMService\",\n          ex.getMessage());\n      throw ex;\n    }\n\n    RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n        AuditConstants.UPDATE_APP_PRIORITY, \"ClientRMService\", applicationId);\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "57c7ae1affb2e1821fbdc3f47738d7e6fd83c7c1": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4014. Support user cli interface in for Application Priority. Contributed by Rohith Sharma K S\n",
      "commitDate": "24/08/15 8:36 PM",
      "commitName": "57c7ae1affb2e1821fbdc3f47738d7e6fd83c7c1",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,67 @@\n+  public UpdateApplicationPriorityResponse updateApplicationPriority(\n+      UpdateApplicationPriorityRequest request) throws YarnException,\n+      IOException {\n+\n+    ApplicationId applicationId \u003d request.getApplicationId();\n+    Priority newAppPriority \u003d request.getApplicationPriority();\n+    UserGroupInformation callerUGI;\n+    try {\n+      callerUGI \u003d UserGroupInformation.getCurrentUser();\n+    } catch (IOException ie) {\n+      LOG.info(\"Error getting UGI \", ie);\n+      RMAuditLogger.logFailure(\"UNKNOWN\", AuditConstants.UPDATE_APP_PRIORITY,\n+          \"UNKNOWN\", \"ClientRMService\", \"Error getting UGI\", applicationId);\n+      throw RPCUtil.getRemoteException(ie);\n+    }\n+\n+    RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n+    if (application \u003d\u003d null) {\n+      RMAuditLogger.logFailure(callerUGI.getUserName(),\n+          AuditConstants.UPDATE_APP_PRIORITY, \"UNKNOWN\", \"ClientRMService\",\n+          \"Trying to update priority of an absent application\", applicationId);\n+      throw new ApplicationNotFoundException(\n+          \"Trying to update priority o an absent application \" + applicationId);\n+    }\n+\n+    if (!checkAccess(callerUGI, application.getUser(),\n+        ApplicationAccessType.MODIFY_APP, application)) {\n+      RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n+          AuditConstants.UPDATE_APP_PRIORITY,\n+          \"User doesn\u0027t have permissions to \"\n+              + ApplicationAccessType.MODIFY_APP.toString(), \"ClientRMService\",\n+          AuditConstants.UNAUTHORIZED_USER, applicationId);\n+      throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n+          + callerUGI.getShortUserName() + \" cannot perform operation \"\n+          + ApplicationAccessType.MODIFY_APP.name() + \" on \" + applicationId));\n+    }\n+\n+    // Update priority only when app is tracked by the scheduler\n+    if (!EnumSet.of(RMAppState.ACCEPTED, RMAppState.RUNNING).contains(\n+        application.getState())) {\n+      String msg \u003d\n+          \"Application in \" + application.getState()\n+              + \" state cannot be update priority.\";\n+      RMAuditLogger\n+          .logFailure(callerUGI.getShortUserName(),\n+              AuditConstants.UPDATE_APP_PRIORITY, \"UNKNOWN\", \"ClientRMService\",\n+              msg);\n+      throw new YarnException(msg);\n+    }\n+\n+    try {\n+      rmContext.getScheduler().updateApplicationPriority(newAppPriority,\n+          applicationId);\n+    } catch (YarnException ex) {\n+      RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n+          AuditConstants.UPDATE_APP_PRIORITY, \"UNKNOWN\", \"ClientRMService\",\n+          ex.getMessage());\n+      throw ex;\n+    }\n+\n+    RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n+        AuditConstants.UPDATE_APP_PRIORITY, \"ClientRMService\", applicationId);\n+    UpdateApplicationPriorityResponse response \u003d\n+        recordFactory\n+            .newRecordInstance(UpdateApplicationPriorityResponse.class);\n+    return response;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public UpdateApplicationPriorityResponse updateApplicationPriority(\n      UpdateApplicationPriorityRequest request) throws YarnException,\n      IOException {\n\n    ApplicationId applicationId \u003d request.getApplicationId();\n    Priority newAppPriority \u003d request.getApplicationPriority();\n    UserGroupInformation callerUGI;\n    try {\n      callerUGI \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ie) {\n      LOG.info(\"Error getting UGI \", ie);\n      RMAuditLogger.logFailure(\"UNKNOWN\", AuditConstants.UPDATE_APP_PRIORITY,\n          \"UNKNOWN\", \"ClientRMService\", \"Error getting UGI\", applicationId);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n    if (application \u003d\u003d null) {\n      RMAuditLogger.logFailure(callerUGI.getUserName(),\n          AuditConstants.UPDATE_APP_PRIORITY, \"UNKNOWN\", \"ClientRMService\",\n          \"Trying to update priority of an absent application\", applicationId);\n      throw new ApplicationNotFoundException(\n          \"Trying to update priority o an absent application \" + applicationId);\n    }\n\n    if (!checkAccess(callerUGI, application.getUser(),\n        ApplicationAccessType.MODIFY_APP, application)) {\n      RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n          AuditConstants.UPDATE_APP_PRIORITY,\n          \"User doesn\u0027t have permissions to \"\n              + ApplicationAccessType.MODIFY_APP.toString(), \"ClientRMService\",\n          AuditConstants.UNAUTHORIZED_USER, applicationId);\n      throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n          + callerUGI.getShortUserName() + \" cannot perform operation \"\n          + ApplicationAccessType.MODIFY_APP.name() + \" on \" + applicationId));\n    }\n\n    // Update priority only when app is tracked by the scheduler\n    if (!EnumSet.of(RMAppState.ACCEPTED, RMAppState.RUNNING).contains(\n        application.getState())) {\n      String msg \u003d\n          \"Application in \" + application.getState()\n              + \" state cannot be update priority.\";\n      RMAuditLogger\n          .logFailure(callerUGI.getShortUserName(),\n              AuditConstants.UPDATE_APP_PRIORITY, \"UNKNOWN\", \"ClientRMService\",\n              msg);\n      throw new YarnException(msg);\n    }\n\n    try {\n      rmContext.getScheduler().updateApplicationPriority(newAppPriority,\n          applicationId);\n    } catch (YarnException ex) {\n      RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n          AuditConstants.UPDATE_APP_PRIORITY, \"UNKNOWN\", \"ClientRMService\",\n          ex.getMessage());\n      throw ex;\n    }\n\n    RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n        AuditConstants.UPDATE_APP_PRIORITY, \"ClientRMService\", applicationId);\n    UpdateApplicationPriorityResponse response \u003d\n        recordFactory\n            .newRecordInstance(UpdateApplicationPriorityResponse.class);\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java"
    }
  }
}