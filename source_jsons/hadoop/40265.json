{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RegularContainerAllocator.java",
  "functionName": "checkHeadroom",
  "functionId": "checkHeadroom___clusterResource-Resource__currentResourceLimits-ResourceLimits__required-Resource__nodePartition-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
  "functionStartLine": 77,
  "functionEndLine": 93,
  "numCommitsSeen": 84,
  "timeTaken": 7123,
  "changeHistory": [
    "de3b4aac561258ad242a3c5ed1c919428893fd4c",
    "89cab1ba5f0671f8ef30dbe7432079c18362b434",
    "e5003be907acef87c2770e3f2914953f62017b0e",
    "ba2313d6145a1234777938a747187373f4cd58d9",
    "83fe34ac0896cee0918bbfad7bd51231e4aec39b"
  ],
  "changeHistoryShort": {
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": "Ymultichange(Yparameterchange,Ybodychange)",
    "89cab1ba5f0671f8ef30dbe7432079c18362b434": "Ymultichange(Ymovefromfile,Ymodifierchange)",
    "e5003be907acef87c2770e3f2914953f62017b0e": "Ymodifierchange",
    "ba2313d6145a1234777938a747187373f4cd58d9": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange)",
    "83fe34ac0896cee0918bbfad7bd51231e4aec39b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5716. Add global scheduler interface definition and update CapacityScheduler to use it. Contributed by Wangda Tan\n",
      "commitDate": "07/11/16 10:14 AM",
      "commitName": "de3b4aac561258ad242a3c5ed1c919428893fd4c",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5716. Add global scheduler interface definition and update CapacityScheduler to use it. Contributed by Wangda Tan\n",
          "commitDate": "07/11/16 10:14 AM",
          "commitName": "de3b4aac561258ad242a3c5ed1c919428893fd4c",
          "commitAuthor": "Jian He",
          "commitDateOld": "19/09/16 2:08 AM",
          "commitNameOld": "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 49.38,
          "commitsBetweenForRepo": 429,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,17 @@\n   private boolean checkHeadroom(Resource clusterResource,\n       ResourceLimits currentResourceLimits, Resource required,\n-      FiCaSchedulerNode node) {\n+      String nodePartition) {\n     // If headroom + currentReservation \u003c required, we cannot allocate this\n     // require\n     Resource resourceCouldBeUnReserved \u003d application.getCurrentReservation();\n     if (!application.getCSLeafQueue().getReservationContinueLooking()\n-        || !node.getPartition().equals(RMNodeLabelsManager.NO_LABEL)) {\n+        || !nodePartition.equals(RMNodeLabelsManager.NO_LABEL)) {\n       // If we don\u0027t allow reservation continuous looking, OR we\u0027re looking at\n       // non-default node partition, we won\u0027t allow to unreserve before\n       // allocation.\n       resourceCouldBeUnReserved \u003d Resources.none();\n     }\n     return Resources.greaterThanOrEqual(rc, clusterResource, Resources.add(\n         currentResourceLimits.getHeadroom(), resourceCouldBeUnReserved),\n         required);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean checkHeadroom(Resource clusterResource,\n      ResourceLimits currentResourceLimits, Resource required,\n      String nodePartition) {\n    // If headroom + currentReservation \u003c required, we cannot allocate this\n    // require\n    Resource resourceCouldBeUnReserved \u003d application.getCurrentReservation();\n    if (!application.getCSLeafQueue().getReservationContinueLooking()\n        || !nodePartition.equals(RMNodeLabelsManager.NO_LABEL)) {\n      // If we don\u0027t allow reservation continuous looking, OR we\u0027re looking at\n      // non-default node partition, we won\u0027t allow to unreserve before\n      // allocation.\n      resourceCouldBeUnReserved \u003d Resources.none();\n    }\n    return Resources.greaterThanOrEqual(rc, clusterResource, Resources.add(\n        currentResourceLimits.getHeadroom(), resourceCouldBeUnReserved),\n        required);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
          "extendedDetails": {
            "oldValue": "[clusterResource-Resource, currentResourceLimits-ResourceLimits, required-Resource, node-FiCaSchedulerNode]",
            "newValue": "[clusterResource-Resource, currentResourceLimits-ResourceLimits, required-Resource, nodePartition-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5716. Add global scheduler interface definition and update CapacityScheduler to use it. Contributed by Wangda Tan\n",
          "commitDate": "07/11/16 10:14 AM",
          "commitName": "de3b4aac561258ad242a3c5ed1c919428893fd4c",
          "commitAuthor": "Jian He",
          "commitDateOld": "19/09/16 2:08 AM",
          "commitNameOld": "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 49.38,
          "commitsBetweenForRepo": 429,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,17 @@\n   private boolean checkHeadroom(Resource clusterResource,\n       ResourceLimits currentResourceLimits, Resource required,\n-      FiCaSchedulerNode node) {\n+      String nodePartition) {\n     // If headroom + currentReservation \u003c required, we cannot allocate this\n     // require\n     Resource resourceCouldBeUnReserved \u003d application.getCurrentReservation();\n     if (!application.getCSLeafQueue().getReservationContinueLooking()\n-        || !node.getPartition().equals(RMNodeLabelsManager.NO_LABEL)) {\n+        || !nodePartition.equals(RMNodeLabelsManager.NO_LABEL)) {\n       // If we don\u0027t allow reservation continuous looking, OR we\u0027re looking at\n       // non-default node partition, we won\u0027t allow to unreserve before\n       // allocation.\n       resourceCouldBeUnReserved \u003d Resources.none();\n     }\n     return Resources.greaterThanOrEqual(rc, clusterResource, Resources.add(\n         currentResourceLimits.getHeadroom(), resourceCouldBeUnReserved),\n         required);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean checkHeadroom(Resource clusterResource,\n      ResourceLimits currentResourceLimits, Resource required,\n      String nodePartition) {\n    // If headroom + currentReservation \u003c required, we cannot allocate this\n    // require\n    Resource resourceCouldBeUnReserved \u003d application.getCurrentReservation();\n    if (!application.getCSLeafQueue().getReservationContinueLooking()\n        || !nodePartition.equals(RMNodeLabelsManager.NO_LABEL)) {\n      // If we don\u0027t allow reservation continuous looking, OR we\u0027re looking at\n      // non-default node partition, we won\u0027t allow to unreserve before\n      // allocation.\n      resourceCouldBeUnReserved \u003d Resources.none();\n    }\n    return Resources.greaterThanOrEqual(rc, clusterResource, Resources.add(\n        currentResourceLimits.getHeadroom(), resourceCouldBeUnReserved),\n        required);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
          "extendedDetails": {}
        }
      ]
    },
    "89cab1ba5f0671f8ef30dbe7432079c18362b434": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange)",
      "commitMessage": "YARN-1651. CapacityScheduler side changes to support container resize. Contributed by Wangda Tan\n",
      "commitDate": "23/09/15 1:29 PM",
      "commitName": "89cab1ba5f0671f8ef30dbe7432079c18362b434",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-1651. CapacityScheduler side changes to support container resize. Contributed by Wangda Tan\n",
          "commitDate": "23/09/15 1:29 PM",
          "commitName": "89cab1ba5f0671f8ef30dbe7432079c18362b434",
          "commitAuthor": "Jian He",
          "commitDateOld": "23/09/15 1:29 PM",
          "commitNameOld": "c57eac5dfe277845ab4522a1188023a73ee41539",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,17 @@\n-  protected boolean checkHeadroom(Resource clusterResource,\n+  private boolean checkHeadroom(Resource clusterResource,\n       ResourceLimits currentResourceLimits, Resource required,\n       FiCaSchedulerNode node) {\n     // If headroom + currentReservation \u003c required, we cannot allocate this\n     // require\n     Resource resourceCouldBeUnReserved \u003d application.getCurrentReservation();\n     if (!application.getCSLeafQueue().getReservationContinueLooking()\n         || !node.getPartition().equals(RMNodeLabelsManager.NO_LABEL)) {\n       // If we don\u0027t allow reservation continuous looking, OR we\u0027re looking at\n       // non-default node partition, we won\u0027t allow to unreserve before\n       // allocation.\n       resourceCouldBeUnReserved \u003d Resources.none();\n     }\n     return Resources.greaterThanOrEqual(rc, clusterResource, Resources.add(\n         currentResourceLimits.getHeadroom(), resourceCouldBeUnReserved),\n         required);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean checkHeadroom(Resource clusterResource,\n      ResourceLimits currentResourceLimits, Resource required,\n      FiCaSchedulerNode node) {\n    // If headroom + currentReservation \u003c required, we cannot allocate this\n    // require\n    Resource resourceCouldBeUnReserved \u003d application.getCurrentReservation();\n    if (!application.getCSLeafQueue().getReservationContinueLooking()\n        || !node.getPartition().equals(RMNodeLabelsManager.NO_LABEL)) {\n      // If we don\u0027t allow reservation continuous looking, OR we\u0027re looking at\n      // non-default node partition, we won\u0027t allow to unreserve before\n      // allocation.\n      resourceCouldBeUnReserved \u003d Resources.none();\n    }\n    return Resources.greaterThanOrEqual(rc, clusterResource, Resources.add(\n        currentResourceLimits.getHeadroom(), resourceCouldBeUnReserved),\n        required);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/ContainerAllocator.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
            "oldMethodName": "checkHeadroom",
            "newMethodName": "checkHeadroom"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-1651. CapacityScheduler side changes to support container resize. Contributed by Wangda Tan\n",
          "commitDate": "23/09/15 1:29 PM",
          "commitName": "89cab1ba5f0671f8ef30dbe7432079c18362b434",
          "commitAuthor": "Jian He",
          "commitDateOld": "23/09/15 1:29 PM",
          "commitNameOld": "c57eac5dfe277845ab4522a1188023a73ee41539",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,17 @@\n-  protected boolean checkHeadroom(Resource clusterResource,\n+  private boolean checkHeadroom(Resource clusterResource,\n       ResourceLimits currentResourceLimits, Resource required,\n       FiCaSchedulerNode node) {\n     // If headroom + currentReservation \u003c required, we cannot allocate this\n     // require\n     Resource resourceCouldBeUnReserved \u003d application.getCurrentReservation();\n     if (!application.getCSLeafQueue().getReservationContinueLooking()\n         || !node.getPartition().equals(RMNodeLabelsManager.NO_LABEL)) {\n       // If we don\u0027t allow reservation continuous looking, OR we\u0027re looking at\n       // non-default node partition, we won\u0027t allow to unreserve before\n       // allocation.\n       resourceCouldBeUnReserved \u003d Resources.none();\n     }\n     return Resources.greaterThanOrEqual(rc, clusterResource, Resources.add(\n         currentResourceLimits.getHeadroom(), resourceCouldBeUnReserved),\n         required);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean checkHeadroom(Resource clusterResource,\n      ResourceLimits currentResourceLimits, Resource required,\n      FiCaSchedulerNode node) {\n    // If headroom + currentReservation \u003c required, we cannot allocate this\n    // require\n    Resource resourceCouldBeUnReserved \u003d application.getCurrentReservation();\n    if (!application.getCSLeafQueue().getReservationContinueLooking()\n        || !node.getPartition().equals(RMNodeLabelsManager.NO_LABEL)) {\n      // If we don\u0027t allow reservation continuous looking, OR we\u0027re looking at\n      // non-default node partition, we won\u0027t allow to unreserve before\n      // allocation.\n      resourceCouldBeUnReserved \u003d Resources.none();\n    }\n    return Resources.greaterThanOrEqual(rc, clusterResource, Resources.add(\n        currentResourceLimits.getHeadroom(), resourceCouldBeUnReserved),\n        required);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
          "extendedDetails": {
            "oldValue": "[protected]",
            "newValue": "[private]"
          }
        }
      ]
    },
    "e5003be907acef87c2770e3f2914953f62017b0e": {
      "type": "Ymodifierchange",
      "commitMessage": "YARN-4026. Refactored ContainerAllocator to accept a list of priorites rather than a single priority. Contributed by Wangda Tan\n",
      "commitDate": "12/08/15 3:07 PM",
      "commitName": "e5003be907acef87c2770e3f2914953f62017b0e",
      "commitAuthor": "Jian He",
      "commitDateOld": "05/08/15 1:47 PM",
      "commitNameOld": "ba2313d6145a1234777938a747187373f4cd58d9",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 7.06,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n-  boolean checkHeadroom(Resource clusterResource,\n+  protected boolean checkHeadroom(Resource clusterResource,\n       ResourceLimits currentResourceLimits, Resource required,\n       FiCaSchedulerNode node) {\n     // If headroom + currentReservation \u003c required, we cannot allocate this\n     // require\n     Resource resourceCouldBeUnReserved \u003d application.getCurrentReservation();\n     if (!application.getCSLeafQueue().getReservationContinueLooking()\n         || !node.getPartition().equals(RMNodeLabelsManager.NO_LABEL)) {\n       // If we don\u0027t allow reservation continuous looking, OR we\u0027re looking at\n       // non-default node partition, we won\u0027t allow to unreserve before\n       // allocation.\n       resourceCouldBeUnReserved \u003d Resources.none();\n     }\n     return Resources.greaterThanOrEqual(rc, clusterResource, Resources.add(\n         currentResourceLimits.getHeadroom(), resourceCouldBeUnReserved),\n         required);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected boolean checkHeadroom(Resource clusterResource,\n      ResourceLimits currentResourceLimits, Resource required,\n      FiCaSchedulerNode node) {\n    // If headroom + currentReservation \u003c required, we cannot allocate this\n    // require\n    Resource resourceCouldBeUnReserved \u003d application.getCurrentReservation();\n    if (!application.getCSLeafQueue().getReservationContinueLooking()\n        || !node.getPartition().equals(RMNodeLabelsManager.NO_LABEL)) {\n      // If we don\u0027t allow reservation continuous looking, OR we\u0027re looking at\n      // non-default node partition, we won\u0027t allow to unreserve before\n      // allocation.\n      resourceCouldBeUnReserved \u003d Resources.none();\n    }\n    return Resources.greaterThanOrEqual(rc, clusterResource, Resources.add(\n        currentResourceLimits.getHeadroom(), resourceCouldBeUnReserved),\n        required);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/ContainerAllocator.java",
      "extendedDetails": {
        "oldValue": "[]",
        "newValue": "[protected]"
      }
    },
    "ba2313d6145a1234777938a747187373f4cd58d9": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-3983. Refactored CapacityScheduleri#FiCaSchedulerApp to easier extend container allocation logic. Contributed by Wangda Tan\n",
      "commitDate": "05/08/15 1:47 PM",
      "commitName": "ba2313d6145a1234777938a747187373f4cd58d9",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-3983. Refactored CapacityScheduleri#FiCaSchedulerApp to easier extend container allocation logic. Contributed by Wangda Tan\n",
          "commitDate": "05/08/15 1:47 PM",
          "commitName": "ba2313d6145a1234777938a747187373f4cd58d9",
          "commitAuthor": "Jian He",
          "commitDateOld": "05/08/15 12:57 PM",
          "commitNameOld": "f271d377357ad680924d19f07e6c8315e7c89bae",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,17 @@\n-  private boolean checkHeadroom(Resource clusterResource,\n-      ResourceLimits currentResourceLimits, Resource required, FiCaSchedulerNode node) {\n+  boolean checkHeadroom(Resource clusterResource,\n+      ResourceLimits currentResourceLimits, Resource required,\n+      FiCaSchedulerNode node) {\n     // If headroom + currentReservation \u003c required, we cannot allocate this\n     // require\n-    Resource resourceCouldBeUnReserved \u003d getCurrentReservation();\n-    if (!getCSLeafQueue().getReservationContinueLooking() || !node.getPartition().equals(RMNodeLabelsManager.NO_LABEL)) {\n+    Resource resourceCouldBeUnReserved \u003d application.getCurrentReservation();\n+    if (!application.getCSLeafQueue().getReservationContinueLooking()\n+        || !node.getPartition().equals(RMNodeLabelsManager.NO_LABEL)) {\n       // If we don\u0027t allow reservation continuous looking, OR we\u0027re looking at\n       // non-default node partition, we won\u0027t allow to unreserve before\n       // allocation.\n       resourceCouldBeUnReserved \u003d Resources.none();\n     }\n-    return Resources\n-        .greaterThanOrEqual(rc, clusterResource, Resources.add(\n-            currentResourceLimits.getHeadroom(), resourceCouldBeUnReserved),\n-            required);\n+    return Resources.greaterThanOrEqual(rc, clusterResource, Resources.add(\n+        currentResourceLimits.getHeadroom(), resourceCouldBeUnReserved),\n+        required);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  boolean checkHeadroom(Resource clusterResource,\n      ResourceLimits currentResourceLimits, Resource required,\n      FiCaSchedulerNode node) {\n    // If headroom + currentReservation \u003c required, we cannot allocate this\n    // require\n    Resource resourceCouldBeUnReserved \u003d application.getCurrentReservation();\n    if (!application.getCSLeafQueue().getReservationContinueLooking()\n        || !node.getPartition().equals(RMNodeLabelsManager.NO_LABEL)) {\n      // If we don\u0027t allow reservation continuous looking, OR we\u0027re looking at\n      // non-default node partition, we won\u0027t allow to unreserve before\n      // allocation.\n      resourceCouldBeUnReserved \u003d Resources.none();\n    }\n    return Resources.greaterThanOrEqual(rc, clusterResource, Resources.add(\n        currentResourceLimits.getHeadroom(), resourceCouldBeUnReserved),\n        required);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/ContainerAllocator.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/ContainerAllocator.java",
            "oldMethodName": "checkHeadroom",
            "newMethodName": "checkHeadroom"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-3983. Refactored CapacityScheduleri#FiCaSchedulerApp to easier extend container allocation logic. Contributed by Wangda Tan\n",
          "commitDate": "05/08/15 1:47 PM",
          "commitName": "ba2313d6145a1234777938a747187373f4cd58d9",
          "commitAuthor": "Jian He",
          "commitDateOld": "05/08/15 12:57 PM",
          "commitNameOld": "f271d377357ad680924d19f07e6c8315e7c89bae",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,17 @@\n-  private boolean checkHeadroom(Resource clusterResource,\n-      ResourceLimits currentResourceLimits, Resource required, FiCaSchedulerNode node) {\n+  boolean checkHeadroom(Resource clusterResource,\n+      ResourceLimits currentResourceLimits, Resource required,\n+      FiCaSchedulerNode node) {\n     // If headroom + currentReservation \u003c required, we cannot allocate this\n     // require\n-    Resource resourceCouldBeUnReserved \u003d getCurrentReservation();\n-    if (!getCSLeafQueue().getReservationContinueLooking() || !node.getPartition().equals(RMNodeLabelsManager.NO_LABEL)) {\n+    Resource resourceCouldBeUnReserved \u003d application.getCurrentReservation();\n+    if (!application.getCSLeafQueue().getReservationContinueLooking()\n+        || !node.getPartition().equals(RMNodeLabelsManager.NO_LABEL)) {\n       // If we don\u0027t allow reservation continuous looking, OR we\u0027re looking at\n       // non-default node partition, we won\u0027t allow to unreserve before\n       // allocation.\n       resourceCouldBeUnReserved \u003d Resources.none();\n     }\n-    return Resources\n-        .greaterThanOrEqual(rc, clusterResource, Resources.add(\n-            currentResourceLimits.getHeadroom(), resourceCouldBeUnReserved),\n-            required);\n+    return Resources.greaterThanOrEqual(rc, clusterResource, Resources.add(\n+        currentResourceLimits.getHeadroom(), resourceCouldBeUnReserved),\n+        required);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  boolean checkHeadroom(Resource clusterResource,\n      ResourceLimits currentResourceLimits, Resource required,\n      FiCaSchedulerNode node) {\n    // If headroom + currentReservation \u003c required, we cannot allocate this\n    // require\n    Resource resourceCouldBeUnReserved \u003d application.getCurrentReservation();\n    if (!application.getCSLeafQueue().getReservationContinueLooking()\n        || !node.getPartition().equals(RMNodeLabelsManager.NO_LABEL)) {\n      // If we don\u0027t allow reservation continuous looking, OR we\u0027re looking at\n      // non-default node partition, we won\u0027t allow to unreserve before\n      // allocation.\n      resourceCouldBeUnReserved \u003d Resources.none();\n    }\n    return Resources.greaterThanOrEqual(rc, clusterResource, Resources.add(\n        currentResourceLimits.getHeadroom(), resourceCouldBeUnReserved),\n        required);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/ContainerAllocator.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3983. Refactored CapacityScheduleri#FiCaSchedulerApp to easier extend container allocation logic. Contributed by Wangda Tan\n",
          "commitDate": "05/08/15 1:47 PM",
          "commitName": "ba2313d6145a1234777938a747187373f4cd58d9",
          "commitAuthor": "Jian He",
          "commitDateOld": "05/08/15 12:57 PM",
          "commitNameOld": "f271d377357ad680924d19f07e6c8315e7c89bae",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,17 @@\n-  private boolean checkHeadroom(Resource clusterResource,\n-      ResourceLimits currentResourceLimits, Resource required, FiCaSchedulerNode node) {\n+  boolean checkHeadroom(Resource clusterResource,\n+      ResourceLimits currentResourceLimits, Resource required,\n+      FiCaSchedulerNode node) {\n     // If headroom + currentReservation \u003c required, we cannot allocate this\n     // require\n-    Resource resourceCouldBeUnReserved \u003d getCurrentReservation();\n-    if (!getCSLeafQueue().getReservationContinueLooking() || !node.getPartition().equals(RMNodeLabelsManager.NO_LABEL)) {\n+    Resource resourceCouldBeUnReserved \u003d application.getCurrentReservation();\n+    if (!application.getCSLeafQueue().getReservationContinueLooking()\n+        || !node.getPartition().equals(RMNodeLabelsManager.NO_LABEL)) {\n       // If we don\u0027t allow reservation continuous looking, OR we\u0027re looking at\n       // non-default node partition, we won\u0027t allow to unreserve before\n       // allocation.\n       resourceCouldBeUnReserved \u003d Resources.none();\n     }\n-    return Resources\n-        .greaterThanOrEqual(rc, clusterResource, Resources.add(\n-            currentResourceLimits.getHeadroom(), resourceCouldBeUnReserved),\n-            required);\n+    return Resources.greaterThanOrEqual(rc, clusterResource, Resources.add(\n+        currentResourceLimits.getHeadroom(), resourceCouldBeUnReserved),\n+        required);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  boolean checkHeadroom(Resource clusterResource,\n      ResourceLimits currentResourceLimits, Resource required,\n      FiCaSchedulerNode node) {\n    // If headroom + currentReservation \u003c required, we cannot allocate this\n    // require\n    Resource resourceCouldBeUnReserved \u003d application.getCurrentReservation();\n    if (!application.getCSLeafQueue().getReservationContinueLooking()\n        || !node.getPartition().equals(RMNodeLabelsManager.NO_LABEL)) {\n      // If we don\u0027t allow reservation continuous looking, OR we\u0027re looking at\n      // non-default node partition, we won\u0027t allow to unreserve before\n      // allocation.\n      resourceCouldBeUnReserved \u003d Resources.none();\n    }\n    return Resources.greaterThanOrEqual(rc, clusterResource, Resources.add(\n        currentResourceLimits.getHeadroom(), resourceCouldBeUnReserved),\n        required);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/ContainerAllocator.java",
          "extendedDetails": {}
        }
      ]
    },
    "83fe34ac0896cee0918bbfad7bd51231e4aec39b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3026. Move application-specific container allocation logic from LeafQueue to FiCaSchedulerApp. Contributed by Wangda Tan\n",
      "commitDate": "24/07/15 2:00 PM",
      "commitName": "83fe34ac0896cee0918bbfad7bd51231e4aec39b",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,16 @@\n+  private boolean checkHeadroom(Resource clusterResource,\n+      ResourceLimits currentResourceLimits, Resource required, FiCaSchedulerNode node) {\n+    // If headroom + currentReservation \u003c required, we cannot allocate this\n+    // require\n+    Resource resourceCouldBeUnReserved \u003d getCurrentReservation();\n+    if (!getCSLeafQueue().getReservationContinueLooking() || !node.getPartition().equals(RMNodeLabelsManager.NO_LABEL)) {\n+      // If we don\u0027t allow reservation continuous looking, OR we\u0027re looking at\n+      // non-default node partition, we won\u0027t allow to unreserve before\n+      // allocation.\n+      resourceCouldBeUnReserved \u003d Resources.none();\n+    }\n+    return Resources\n+        .greaterThanOrEqual(rc, clusterResource, Resources.add(\n+            currentResourceLimits.getHeadroom(), resourceCouldBeUnReserved),\n+            required);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean checkHeadroom(Resource clusterResource,\n      ResourceLimits currentResourceLimits, Resource required, FiCaSchedulerNode node) {\n    // If headroom + currentReservation \u003c required, we cannot allocate this\n    // require\n    Resource resourceCouldBeUnReserved \u003d getCurrentReservation();\n    if (!getCSLeafQueue().getReservationContinueLooking() || !node.getPartition().equals(RMNodeLabelsManager.NO_LABEL)) {\n      // If we don\u0027t allow reservation continuous looking, OR we\u0027re looking at\n      // non-default node partition, we won\u0027t allow to unreserve before\n      // allocation.\n      resourceCouldBeUnReserved \u003d Resources.none();\n    }\n    return Resources\n        .greaterThanOrEqual(rc, clusterResource, Resources.add(\n            currentResourceLimits.getHeadroom(), resourceCouldBeUnReserved),\n            required);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java"
    }
  }
}