{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMContainerTokenSecretManager.java",
  "functionName": "createContainerToken",
  "functionId": "createContainerToken___containerId-ContainerId__containerVersion-int__nodeId-NodeId__appSubmitter-String__capability-Resource__priority-Priority__createTime-long__logAggregationContext-LogAggregationContext__nodeLabelExpression-String__containerType-ContainerType__execType-ExecutionType__allocationRequestId-long__allocationTags-Set__String__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/RMContainerTokenSecretManager.java",
  "functionStartLine": 198,
  "functionEndLine": 226,
  "numCommitsSeen": 46,
  "timeTaken": 5942,
  "changeHistory": [
    "a5c1fc881e21ebf43da7ead5f3852808fce25492",
    "a55d0738f1eba225c45578bbdabd0e5a6d6f5392",
    "4d7be1d8575e9254c59d41460960708e3718503a"
  ],
  "changeHistoryShort": {
    "a5c1fc881e21ebf43da7ead5f3852808fce25492": "Ymultichange(Yparameterchange,Ybodychange)",
    "a55d0738f1eba225c45578bbdabd0e5a6d6f5392": "Ymultichange(Yparameterchange,Ybodychange)",
    "4d7be1d8575e9254c59d41460960708e3718503a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a5c1fc881e21ebf43da7ead5f3852808fce25492": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-7696. Add container tags to ContainerTokenIdentifier, api.Container and NMContainerStatus to handle all recovery cases. (asuresh)\n",
      "commitDate": "31/01/18 1:30 AM",
      "commitName": "a5c1fc881e21ebf43da7ead5f3852808fce25492",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7696. Add container tags to ContainerTokenIdentifier, api.Container and NMContainerStatus to handle all recovery cases. (asuresh)\n",
          "commitDate": "31/01/18 1:30 AM",
          "commitName": "a5c1fc881e21ebf43da7ead5f3852808fce25492",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "a55d0738f1eba225c45578bbdabd0e5a6d6f5392",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 85.5,
          "commitsBetweenForRepo": 473,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,29 @@\n   public Token createContainerToken(ContainerId containerId,\n       int containerVersion, NodeId nodeId, String appSubmitter,\n       Resource capability, Priority priority, long createTime,\n       LogAggregationContext logAggregationContext, String nodeLabelExpression,\n       ContainerType containerType, ExecutionType execType,\n-      long allocationRequestId) {\n+      long allocationRequestId, Set\u003cString\u003e allocationTags) {\n     byte[] password;\n     ContainerTokenIdentifier tokenIdentifier;\n     long expiryTimeStamp \u003d\n         System.currentTimeMillis() + containerTokenExpiryInterval;\n \n     // Lock so that we use the same MasterKey\u0027s keyId and its bytes\n     this.readLock.lock();\n     try {\n       tokenIdentifier \u003d\n           new ContainerTokenIdentifier(containerId, containerVersion,\n               nodeId.toString(), appSubmitter, capability, expiryTimeStamp,\n               this.currentMasterKey.getMasterKey().getKeyId(),\n               ResourceManager.getClusterTimeStamp(), priority, createTime,\n               logAggregationContext, nodeLabelExpression, containerType,\n-              execType, allocationRequestId);\n+              execType, allocationRequestId, allocationTags);\n       password \u003d this.createPassword(tokenIdentifier);\n \n     } finally {\n       this.readLock.unlock();\n     }\n \n     return BuilderUtils.newContainerToken(nodeId, password, tokenIdentifier);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Token createContainerToken(ContainerId containerId,\n      int containerVersion, NodeId nodeId, String appSubmitter,\n      Resource capability, Priority priority, long createTime,\n      LogAggregationContext logAggregationContext, String nodeLabelExpression,\n      ContainerType containerType, ExecutionType execType,\n      long allocationRequestId, Set\u003cString\u003e allocationTags) {\n    byte[] password;\n    ContainerTokenIdentifier tokenIdentifier;\n    long expiryTimeStamp \u003d\n        System.currentTimeMillis() + containerTokenExpiryInterval;\n\n    // Lock so that we use the same MasterKey\u0027s keyId and its bytes\n    this.readLock.lock();\n    try {\n      tokenIdentifier \u003d\n          new ContainerTokenIdentifier(containerId, containerVersion,\n              nodeId.toString(), appSubmitter, capability, expiryTimeStamp,\n              this.currentMasterKey.getMasterKey().getKeyId(),\n              ResourceManager.getClusterTimeStamp(), priority, createTime,\n              logAggregationContext, nodeLabelExpression, containerType,\n              execType, allocationRequestId, allocationTags);\n      password \u003d this.createPassword(tokenIdentifier);\n\n    } finally {\n      this.readLock.unlock();\n    }\n\n    return BuilderUtils.newContainerToken(nodeId, password, tokenIdentifier);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/RMContainerTokenSecretManager.java",
          "extendedDetails": {
            "oldValue": "[containerId-ContainerId, containerVersion-int, nodeId-NodeId, appSubmitter-String, capability-Resource, priority-Priority, createTime-long, logAggregationContext-LogAggregationContext, nodeLabelExpression-String, containerType-ContainerType, execType-ExecutionType, allocationRequestId-long]",
            "newValue": "[containerId-ContainerId, containerVersion-int, nodeId-NodeId, appSubmitter-String, capability-Resource, priority-Priority, createTime-long, logAggregationContext-LogAggregationContext, nodeLabelExpression-String, containerType-ContainerType, execType-ExecutionType, allocationRequestId-long, allocationTags-Set\u003cString\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7696. Add container tags to ContainerTokenIdentifier, api.Container and NMContainerStatus to handle all recovery cases. (asuresh)\n",
          "commitDate": "31/01/18 1:30 AM",
          "commitName": "a5c1fc881e21ebf43da7ead5f3852808fce25492",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "a55d0738f1eba225c45578bbdabd0e5a6d6f5392",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 85.5,
          "commitsBetweenForRepo": 473,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,29 @@\n   public Token createContainerToken(ContainerId containerId,\n       int containerVersion, NodeId nodeId, String appSubmitter,\n       Resource capability, Priority priority, long createTime,\n       LogAggregationContext logAggregationContext, String nodeLabelExpression,\n       ContainerType containerType, ExecutionType execType,\n-      long allocationRequestId) {\n+      long allocationRequestId, Set\u003cString\u003e allocationTags) {\n     byte[] password;\n     ContainerTokenIdentifier tokenIdentifier;\n     long expiryTimeStamp \u003d\n         System.currentTimeMillis() + containerTokenExpiryInterval;\n \n     // Lock so that we use the same MasterKey\u0027s keyId and its bytes\n     this.readLock.lock();\n     try {\n       tokenIdentifier \u003d\n           new ContainerTokenIdentifier(containerId, containerVersion,\n               nodeId.toString(), appSubmitter, capability, expiryTimeStamp,\n               this.currentMasterKey.getMasterKey().getKeyId(),\n               ResourceManager.getClusterTimeStamp(), priority, createTime,\n               logAggregationContext, nodeLabelExpression, containerType,\n-              execType, allocationRequestId);\n+              execType, allocationRequestId, allocationTags);\n       password \u003d this.createPassword(tokenIdentifier);\n \n     } finally {\n       this.readLock.unlock();\n     }\n \n     return BuilderUtils.newContainerToken(nodeId, password, tokenIdentifier);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Token createContainerToken(ContainerId containerId,\n      int containerVersion, NodeId nodeId, String appSubmitter,\n      Resource capability, Priority priority, long createTime,\n      LogAggregationContext logAggregationContext, String nodeLabelExpression,\n      ContainerType containerType, ExecutionType execType,\n      long allocationRequestId, Set\u003cString\u003e allocationTags) {\n    byte[] password;\n    ContainerTokenIdentifier tokenIdentifier;\n    long expiryTimeStamp \u003d\n        System.currentTimeMillis() + containerTokenExpiryInterval;\n\n    // Lock so that we use the same MasterKey\u0027s keyId and its bytes\n    this.readLock.lock();\n    try {\n      tokenIdentifier \u003d\n          new ContainerTokenIdentifier(containerId, containerVersion,\n              nodeId.toString(), appSubmitter, capability, expiryTimeStamp,\n              this.currentMasterKey.getMasterKey().getKeyId(),\n              ResourceManager.getClusterTimeStamp(), priority, createTime,\n              logAggregationContext, nodeLabelExpression, containerType,\n              execType, allocationRequestId, allocationTags);\n      password \u003d this.createPassword(tokenIdentifier);\n\n    } finally {\n      this.readLock.unlock();\n    }\n\n    return BuilderUtils.newContainerToken(nodeId, password, tokenIdentifier);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/RMContainerTokenSecretManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "a55d0738f1eba225c45578bbdabd0e5a6d6f5392": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-7371. Added allocateRequestId in NMContainerStatus for recovery. Contributed by Chandni Singh\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "a55d0738f1eba225c45578bbdabd0e5a6d6f5392",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7371. Added allocateRequestId in NMContainerStatus for recovery. Contributed by Chandni Singh\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "a55d0738f1eba225c45578bbdabd0e5a6d6f5392",
          "commitAuthor": "Jian He",
          "commitDateOld": "14/08/17 7:46 PM",
          "commitNameOld": "4d7be1d8575e9254c59d41460960708e3718503a",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 83.78,
          "commitsBetweenForRepo": 791,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,29 @@\n   public Token createContainerToken(ContainerId containerId,\n       int containerVersion, NodeId nodeId, String appSubmitter,\n       Resource capability, Priority priority, long createTime,\n       LogAggregationContext logAggregationContext, String nodeLabelExpression,\n-      ContainerType containerType, ExecutionType execType) {\n+      ContainerType containerType, ExecutionType execType,\n+      long allocationRequestId) {\n     byte[] password;\n     ContainerTokenIdentifier tokenIdentifier;\n     long expiryTimeStamp \u003d\n         System.currentTimeMillis() + containerTokenExpiryInterval;\n \n     // Lock so that we use the same MasterKey\u0027s keyId and its bytes\n     this.readLock.lock();\n     try {\n       tokenIdentifier \u003d\n           new ContainerTokenIdentifier(containerId, containerVersion,\n               nodeId.toString(), appSubmitter, capability, expiryTimeStamp,\n               this.currentMasterKey.getMasterKey().getKeyId(),\n               ResourceManager.getClusterTimeStamp(), priority, createTime,\n               logAggregationContext, nodeLabelExpression, containerType,\n-              execType);\n+              execType, allocationRequestId);\n       password \u003d this.createPassword(tokenIdentifier);\n \n     } finally {\n       this.readLock.unlock();\n     }\n \n     return BuilderUtils.newContainerToken(nodeId, password, tokenIdentifier);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Token createContainerToken(ContainerId containerId,\n      int containerVersion, NodeId nodeId, String appSubmitter,\n      Resource capability, Priority priority, long createTime,\n      LogAggregationContext logAggregationContext, String nodeLabelExpression,\n      ContainerType containerType, ExecutionType execType,\n      long allocationRequestId) {\n    byte[] password;\n    ContainerTokenIdentifier tokenIdentifier;\n    long expiryTimeStamp \u003d\n        System.currentTimeMillis() + containerTokenExpiryInterval;\n\n    // Lock so that we use the same MasterKey\u0027s keyId and its bytes\n    this.readLock.lock();\n    try {\n      tokenIdentifier \u003d\n          new ContainerTokenIdentifier(containerId, containerVersion,\n              nodeId.toString(), appSubmitter, capability, expiryTimeStamp,\n              this.currentMasterKey.getMasterKey().getKeyId(),\n              ResourceManager.getClusterTimeStamp(), priority, createTime,\n              logAggregationContext, nodeLabelExpression, containerType,\n              execType, allocationRequestId);\n      password \u003d this.createPassword(tokenIdentifier);\n\n    } finally {\n      this.readLock.unlock();\n    }\n\n    return BuilderUtils.newContainerToken(nodeId, password, tokenIdentifier);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/RMContainerTokenSecretManager.java",
          "extendedDetails": {
            "oldValue": "[containerId-ContainerId, containerVersion-int, nodeId-NodeId, appSubmitter-String, capability-Resource, priority-Priority, createTime-long, logAggregationContext-LogAggregationContext, nodeLabelExpression-String, containerType-ContainerType, execType-ExecutionType]",
            "newValue": "[containerId-ContainerId, containerVersion-int, nodeId-NodeId, appSubmitter-String, capability-Resource, priority-Priority, createTime-long, logAggregationContext-LogAggregationContext, nodeLabelExpression-String, containerType-ContainerType, execType-ExecutionType, allocationRequestId-long]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7371. Added allocateRequestId in NMContainerStatus for recovery. Contributed by Chandni Singh\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "a55d0738f1eba225c45578bbdabd0e5a6d6f5392",
          "commitAuthor": "Jian He",
          "commitDateOld": "14/08/17 7:46 PM",
          "commitNameOld": "4d7be1d8575e9254c59d41460960708e3718503a",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 83.78,
          "commitsBetweenForRepo": 791,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,29 @@\n   public Token createContainerToken(ContainerId containerId,\n       int containerVersion, NodeId nodeId, String appSubmitter,\n       Resource capability, Priority priority, long createTime,\n       LogAggregationContext logAggregationContext, String nodeLabelExpression,\n-      ContainerType containerType, ExecutionType execType) {\n+      ContainerType containerType, ExecutionType execType,\n+      long allocationRequestId) {\n     byte[] password;\n     ContainerTokenIdentifier tokenIdentifier;\n     long expiryTimeStamp \u003d\n         System.currentTimeMillis() + containerTokenExpiryInterval;\n \n     // Lock so that we use the same MasterKey\u0027s keyId and its bytes\n     this.readLock.lock();\n     try {\n       tokenIdentifier \u003d\n           new ContainerTokenIdentifier(containerId, containerVersion,\n               nodeId.toString(), appSubmitter, capability, expiryTimeStamp,\n               this.currentMasterKey.getMasterKey().getKeyId(),\n               ResourceManager.getClusterTimeStamp(), priority, createTime,\n               logAggregationContext, nodeLabelExpression, containerType,\n-              execType);\n+              execType, allocationRequestId);\n       password \u003d this.createPassword(tokenIdentifier);\n \n     } finally {\n       this.readLock.unlock();\n     }\n \n     return BuilderUtils.newContainerToken(nodeId, password, tokenIdentifier);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Token createContainerToken(ContainerId containerId,\n      int containerVersion, NodeId nodeId, String appSubmitter,\n      Resource capability, Priority priority, long createTime,\n      LogAggregationContext logAggregationContext, String nodeLabelExpression,\n      ContainerType containerType, ExecutionType execType,\n      long allocationRequestId) {\n    byte[] password;\n    ContainerTokenIdentifier tokenIdentifier;\n    long expiryTimeStamp \u003d\n        System.currentTimeMillis() + containerTokenExpiryInterval;\n\n    // Lock so that we use the same MasterKey\u0027s keyId and its bytes\n    this.readLock.lock();\n    try {\n      tokenIdentifier \u003d\n          new ContainerTokenIdentifier(containerId, containerVersion,\n              nodeId.toString(), appSubmitter, capability, expiryTimeStamp,\n              this.currentMasterKey.getMasterKey().getKeyId(),\n              ResourceManager.getClusterTimeStamp(), priority, createTime,\n              logAggregationContext, nodeLabelExpression, containerType,\n              execType, allocationRequestId);\n      password \u003d this.createPassword(tokenIdentifier);\n\n    } finally {\n      this.readLock.unlock();\n    }\n\n    return BuilderUtils.newContainerToken(nodeId, password, tokenIdentifier);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/RMContainerTokenSecretManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "4d7be1d8575e9254c59d41460960708e3718503a": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5978. ContainerScheduler and ContainerManager changes to support ExecType update. (Kartheek Muthyala via asuresh)\n",
      "commitDate": "14/08/17 7:46 PM",
      "commitName": "4d7be1d8575e9254c59d41460960708e3718503a",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,28 @@\n+  public Token createContainerToken(ContainerId containerId,\n+      int containerVersion, NodeId nodeId, String appSubmitter,\n+      Resource capability, Priority priority, long createTime,\n+      LogAggregationContext logAggregationContext, String nodeLabelExpression,\n+      ContainerType containerType, ExecutionType execType) {\n+    byte[] password;\n+    ContainerTokenIdentifier tokenIdentifier;\n+    long expiryTimeStamp \u003d\n+        System.currentTimeMillis() + containerTokenExpiryInterval;\n+\n+    // Lock so that we use the same MasterKey\u0027s keyId and its bytes\n+    this.readLock.lock();\n+    try {\n+      tokenIdentifier \u003d\n+          new ContainerTokenIdentifier(containerId, containerVersion,\n+              nodeId.toString(), appSubmitter, capability, expiryTimeStamp,\n+              this.currentMasterKey.getMasterKey().getKeyId(),\n+              ResourceManager.getClusterTimeStamp(), priority, createTime,\n+              logAggregationContext, nodeLabelExpression, containerType,\n+              execType);\n+      password \u003d this.createPassword(tokenIdentifier);\n+\n+    } finally {\n+      this.readLock.unlock();\n+    }\n+\n+    return BuilderUtils.newContainerToken(nodeId, password, tokenIdentifier);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Token createContainerToken(ContainerId containerId,\n      int containerVersion, NodeId nodeId, String appSubmitter,\n      Resource capability, Priority priority, long createTime,\n      LogAggregationContext logAggregationContext, String nodeLabelExpression,\n      ContainerType containerType, ExecutionType execType) {\n    byte[] password;\n    ContainerTokenIdentifier tokenIdentifier;\n    long expiryTimeStamp \u003d\n        System.currentTimeMillis() + containerTokenExpiryInterval;\n\n    // Lock so that we use the same MasterKey\u0027s keyId and its bytes\n    this.readLock.lock();\n    try {\n      tokenIdentifier \u003d\n          new ContainerTokenIdentifier(containerId, containerVersion,\n              nodeId.toString(), appSubmitter, capability, expiryTimeStamp,\n              this.currentMasterKey.getMasterKey().getKeyId(),\n              ResourceManager.getClusterTimeStamp(), priority, createTime,\n              logAggregationContext, nodeLabelExpression, containerType,\n              execType);\n      password \u003d this.createPassword(tokenIdentifier);\n\n    } finally {\n      this.readLock.unlock();\n    }\n\n    return BuilderUtils.newContainerToken(nodeId, password, tokenIdentifier);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/RMContainerTokenSecretManager.java"
    }
  }
}