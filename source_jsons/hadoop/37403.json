{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ClientRMService.java",
  "functionName": "getQueueInfo",
  "functionId": "getQueueInfo___request-GetQueueInfoRequest",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
  "functionStartLine": 1022,
  "functionEndLine": 1078,
  "numCommitsSeen": 156,
  "timeTaken": 9984,
  "changeHistory": [
    "921338cd86e7215b0c4b1efdf2daf9449fb12c7b",
    "e2351c7ae24cea9b217af4174512d279c55e8efd",
    "e1d3670f4c233696dc673c37b578ce46b44a6876",
    "89fb4d8ffd32b06db42cc3e21d2a89e99deb7732",
    "a83fb61ac07c0468cbc7a38526e92683883dd932",
    "5d6eca08bd778fd971b29d3553d32cfc0dbe8d4e",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "228736ab5170c40c8d39c4b004c8e147cf287f2c",
    "fab57a144de0cd515e1de9107e4d3ac58037d846",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "921338cd86e7215b0c4b1efdf2daf9449fb12c7b": "Ybodychange",
    "e2351c7ae24cea9b217af4174512d279c55e8efd": "Ybodychange",
    "e1d3670f4c233696dc673c37b578ce46b44a6876": "Ybodychange",
    "89fb4d8ffd32b06db42cc3e21d2a89e99deb7732": "Ybodychange",
    "a83fb61ac07c0468cbc7a38526e92683883dd932": "Yexceptionschange",
    "5d6eca08bd778fd971b29d3553d32cfc0dbe8d4e": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "228736ab5170c40c8d39c4b004c8e147cf287f2c": "Ybodychange",
    "fab57a144de0cd515e1de9107e4d3ac58037d846": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "921338cd86e7215b0c4b1efdf2daf9449fb12c7b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4163: Audit getQueueInfo and getApplications calls\n",
      "commitDate": "23/10/17 9:43 AM",
      "commitName": "921338cd86e7215b0c4b1efdf2daf9449fb12c7b",
      "commitAuthor": "Eric Payne",
      "commitDateOld": "13/09/17 11:06 AM",
      "commitNameOld": "5324388cf2357b1f80efd0c34392f577bf417455",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 39.94,
      "commitsBetweenForRepo": 304,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,57 @@\n   public GetQueueInfoResponse getQueueInfo(GetQueueInfoRequest request)\n       throws YarnException {\n     UserGroupInformation callerUGI;\n     try {\n       callerUGI \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException ie) {\n       LOG.info(\"Error getting UGI \", ie);\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n     GetQueueInfoResponse response \u003d\n       recordFactory.newRecordInstance(GetQueueInfoResponse.class);\n+    RMAuditLogger.ArgsBuilder arguments \u003d new RMAuditLogger.ArgsBuilder()\n+        .append(Keys.QUEUENAME, request.getQueueName())\n+        .append(Keys.INCLUDEAPPS,\n+            String.valueOf(request.getIncludeApplications()))\n+        .append(Keys.INCLUDECHILDQUEUES,\n+            String.valueOf(request.getIncludeChildQueues()))\n+        .append(Keys.RECURSIVE, String.valueOf(request.getRecursive()));\n     try {\n       QueueInfo queueInfo \u003d \n         scheduler.getQueueInfo(request.getQueueName(),  \n             request.getIncludeChildQueues(), \n             request.getRecursive());\n       List\u003cApplicationReport\u003e appReports \u003d EMPTY_APPS_REPORT;\n       if (request.getIncludeApplications()) {\n         List\u003cApplicationAttemptId\u003e apps \u003d\n             scheduler.getAppsInQueue(request.getQueueName());\n         appReports \u003d new ArrayList\u003cApplicationReport\u003e(apps.size());\n         for (ApplicationAttemptId app : apps) {\n           RMApp rmApp \u003d rmContext.getRMApps().get(app.getApplicationId());\n           if (rmApp !\u003d null) {\n             // Check if user is allowed access to this app\n             if (!checkAccess(callerUGI, rmApp.getUser(),\n                 ApplicationAccessType.VIEW_APP, rmApp)) {\n               continue;\n             }\n             appReports.add(\n                 rmApp.createAndGetApplicationReport(\n                     callerUGI.getUserName(), true));\n           }          \n         }\n       }\n       queueInfo.setApplications(appReports);\n       response.setQueueInfo(queueInfo);\n+      RMAuditLogger.logSuccess(callerUGI.getUserName(),\n+          AuditConstants.GET_QUEUE_INFO_REQUEST,\n+          \"ClientRMService\", arguments);\n     } catch (IOException ioe) {\n       LOG.info(\"Failed to getQueueInfo for \" + request.getQueueName(), ioe);\n+      RMAuditLogger.logFailure(callerUGI.getUserName(),\n+          AuditConstants.GET_QUEUE_INFO_REQUEST, \"UNKNOWN\", \"ClientRMService\",\n+          ioe.getMessage(), arguments);\n     }\n     \n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public GetQueueInfoResponse getQueueInfo(GetQueueInfoRequest request)\n      throws YarnException {\n    UserGroupInformation callerUGI;\n    try {\n      callerUGI \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ie) {\n      LOG.info(\"Error getting UGI \", ie);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    GetQueueInfoResponse response \u003d\n      recordFactory.newRecordInstance(GetQueueInfoResponse.class);\n    RMAuditLogger.ArgsBuilder arguments \u003d new RMAuditLogger.ArgsBuilder()\n        .append(Keys.QUEUENAME, request.getQueueName())\n        .append(Keys.INCLUDEAPPS,\n            String.valueOf(request.getIncludeApplications()))\n        .append(Keys.INCLUDECHILDQUEUES,\n            String.valueOf(request.getIncludeChildQueues()))\n        .append(Keys.RECURSIVE, String.valueOf(request.getRecursive()));\n    try {\n      QueueInfo queueInfo \u003d \n        scheduler.getQueueInfo(request.getQueueName(),  \n            request.getIncludeChildQueues(), \n            request.getRecursive());\n      List\u003cApplicationReport\u003e appReports \u003d EMPTY_APPS_REPORT;\n      if (request.getIncludeApplications()) {\n        List\u003cApplicationAttemptId\u003e apps \u003d\n            scheduler.getAppsInQueue(request.getQueueName());\n        appReports \u003d new ArrayList\u003cApplicationReport\u003e(apps.size());\n        for (ApplicationAttemptId app : apps) {\n          RMApp rmApp \u003d rmContext.getRMApps().get(app.getApplicationId());\n          if (rmApp !\u003d null) {\n            // Check if user is allowed access to this app\n            if (!checkAccess(callerUGI, rmApp.getUser(),\n                ApplicationAccessType.VIEW_APP, rmApp)) {\n              continue;\n            }\n            appReports.add(\n                rmApp.createAndGetApplicationReport(\n                    callerUGI.getUserName(), true));\n          }          \n        }\n      }\n      queueInfo.setApplications(appReports);\n      response.setQueueInfo(queueInfo);\n      RMAuditLogger.logSuccess(callerUGI.getUserName(),\n          AuditConstants.GET_QUEUE_INFO_REQUEST,\n          \"ClientRMService\", arguments);\n    } catch (IOException ioe) {\n      LOG.info(\"Failed to getQueueInfo for \" + request.getQueueName(), ioe);\n      RMAuditLogger.logFailure(callerUGI.getUserName(),\n          AuditConstants.GET_QUEUE_INFO_REQUEST, \"UNKNOWN\", \"ClientRMService\",\n          ioe.getMessage(), arguments);\n    }\n    \n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "e2351c7ae24cea9b217af4174512d279c55e8efd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2987. Fixed ClientRMService#getQueueInfo to check against queue and app ACLs. Contributed by Varun Saxena\n",
      "commitDate": "30/12/14 5:15 PM",
      "commitName": "e2351c7ae24cea9b217af4174512d279c55e8efd",
      "commitAuthor": "Jian He",
      "commitDateOld": "30/10/14 10:59 PM",
      "commitNameOld": "e0233c16ebd06bb3aabeb523cd17259008e243ef",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 60.8,
      "commitsBetweenForRepo": 435,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,44 @@\n   public GetQueueInfoResponse getQueueInfo(GetQueueInfoRequest request)\n       throws YarnException {\n+    UserGroupInformation callerUGI;\n+    try {\n+      callerUGI \u003d UserGroupInformation.getCurrentUser();\n+    } catch (IOException ie) {\n+      LOG.info(\"Error getting UGI \", ie);\n+      throw RPCUtil.getRemoteException(ie);\n+    }\n+\n     GetQueueInfoResponse response \u003d\n       recordFactory.newRecordInstance(GetQueueInfoResponse.class);\n     try {\n       QueueInfo queueInfo \u003d \n         scheduler.getQueueInfo(request.getQueueName(),  \n             request.getIncludeChildQueues(), \n             request.getRecursive());\n       List\u003cApplicationReport\u003e appReports \u003d EMPTY_APPS_REPORT;\n       if (request.getIncludeApplications()) {\n         List\u003cApplicationAttemptId\u003e apps \u003d\n             scheduler.getAppsInQueue(request.getQueueName());\n         appReports \u003d new ArrayList\u003cApplicationReport\u003e(apps.size());\n         for (ApplicationAttemptId app : apps) {\n           RMApp rmApp \u003d rmContext.getRMApps().get(app.getApplicationId());\n-          appReports.add(rmApp.createAndGetApplicationReport(null, true));\n+          if (rmApp !\u003d null) {\n+            // Check if user is allowed access to this app\n+            if (!checkAccess(callerUGI, rmApp.getUser(),\n+                ApplicationAccessType.VIEW_APP, rmApp)) {\n+              continue;\n+            }\n+            appReports.add(\n+                rmApp.createAndGetApplicationReport(\n+                    callerUGI.getUserName(), true));\n+          }          \n         }\n       }\n       queueInfo.setApplications(appReports);\n       response.setQueueInfo(queueInfo);\n     } catch (IOException ioe) {\n       LOG.info(\"Failed to getQueueInfo for \" + request.getQueueName(), ioe);\n     }\n     \n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public GetQueueInfoResponse getQueueInfo(GetQueueInfoRequest request)\n      throws YarnException {\n    UserGroupInformation callerUGI;\n    try {\n      callerUGI \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ie) {\n      LOG.info(\"Error getting UGI \", ie);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    GetQueueInfoResponse response \u003d\n      recordFactory.newRecordInstance(GetQueueInfoResponse.class);\n    try {\n      QueueInfo queueInfo \u003d \n        scheduler.getQueueInfo(request.getQueueName(),  \n            request.getIncludeChildQueues(), \n            request.getRecursive());\n      List\u003cApplicationReport\u003e appReports \u003d EMPTY_APPS_REPORT;\n      if (request.getIncludeApplications()) {\n        List\u003cApplicationAttemptId\u003e apps \u003d\n            scheduler.getAppsInQueue(request.getQueueName());\n        appReports \u003d new ArrayList\u003cApplicationReport\u003e(apps.size());\n        for (ApplicationAttemptId app : apps) {\n          RMApp rmApp \u003d rmContext.getRMApps().get(app.getApplicationId());\n          if (rmApp !\u003d null) {\n            // Check if user is allowed access to this app\n            if (!checkAccess(callerUGI, rmApp.getUser(),\n                ApplicationAccessType.VIEW_APP, rmApp)) {\n              continue;\n            }\n            appReports.add(\n                rmApp.createAndGetApplicationReport(\n                    callerUGI.getUserName(), true));\n          }          \n        }\n      }\n      queueInfo.setApplications(appReports);\n      response.setQueueInfo(queueInfo);\n    } catch (IOException ioe) {\n      LOG.info(\"Failed to getQueueInfo for \" + request.getQueueName(), ioe);\n    }\n    \n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "e1d3670f4c233696dc673c37b578ce46b44a6876": {
      "type": "Ybodychange",
      "commitMessage": "YARN-807. When querying apps by queue, iterating over all apps is inefficient and limiting (Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1548983 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/12/13 7:09 PM",
      "commitName": "e1d3670f4c233696dc673c37b578ce46b44a6876",
      "commitAuthor": "Sanford Ryza",
      "commitDateOld": "18/11/13 9:20 PM",
      "commitNameOld": "512475e56f0a27bf3c3ff596184f96993bb4bef4",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 18.91,
      "commitsBetweenForRepo": 107,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,27 @@\n   public GetQueueInfoResponse getQueueInfo(GetQueueInfoRequest request)\n       throws YarnException {\n     GetQueueInfoResponse response \u003d\n       recordFactory.newRecordInstance(GetQueueInfoResponse.class);\n     try {\n       QueueInfo queueInfo \u003d \n         scheduler.getQueueInfo(request.getQueueName(),  \n             request.getIncludeChildQueues(), \n             request.getRecursive());\n       List\u003cApplicationReport\u003e appReports \u003d EMPTY_APPS_REPORT;\n       if (request.getIncludeApplications()) {\n-        Collection\u003cRMApp\u003e apps \u003d this.rmContext.getRMApps().values();\n-        appReports \u003d new ArrayList\u003cApplicationReport\u003e(\n-            apps.size());\n-        for (RMApp app : apps) {\n-          if (app.getQueue().equals(queueInfo.getQueueName())) {\n-            appReports.add(app.createAndGetApplicationReport(null, true));\n-          }\n+        List\u003cApplicationAttemptId\u003e apps \u003d\n+            scheduler.getAppsInQueue(request.getQueueName());\n+        appReports \u003d new ArrayList\u003cApplicationReport\u003e(apps.size());\n+        for (ApplicationAttemptId app : apps) {\n+          RMApp rmApp \u003d rmContext.getRMApps().get(app.getApplicationId());\n+          appReports.add(rmApp.createAndGetApplicationReport(null, true));\n         }\n       }\n       queueInfo.setApplications(appReports);\n       response.setQueueInfo(queueInfo);\n     } catch (IOException ioe) {\n       LOG.info(\"Failed to getQueueInfo for \" + request.getQueueName(), ioe);\n     }\n     \n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public GetQueueInfoResponse getQueueInfo(GetQueueInfoRequest request)\n      throws YarnException {\n    GetQueueInfoResponse response \u003d\n      recordFactory.newRecordInstance(GetQueueInfoResponse.class);\n    try {\n      QueueInfo queueInfo \u003d \n        scheduler.getQueueInfo(request.getQueueName(),  \n            request.getIncludeChildQueues(), \n            request.getRecursive());\n      List\u003cApplicationReport\u003e appReports \u003d EMPTY_APPS_REPORT;\n      if (request.getIncludeApplications()) {\n        List\u003cApplicationAttemptId\u003e apps \u003d\n            scheduler.getAppsInQueue(request.getQueueName());\n        appReports \u003d new ArrayList\u003cApplicationReport\u003e(apps.size());\n        for (ApplicationAttemptId app : apps) {\n          RMApp rmApp \u003d rmContext.getRMApps().get(app.getApplicationId());\n          appReports.add(rmApp.createAndGetApplicationReport(null, true));\n        }\n      }\n      queueInfo.setApplications(appReports);\n      response.setQueueInfo(queueInfo);\n    } catch (IOException ioe) {\n      LOG.info(\"Failed to getQueueInfo for \" + request.getQueueName(), ioe);\n    }\n    \n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "89fb4d8ffd32b06db42cc3e21d2a89e99deb7732": {
      "type": "Ybodychange",
      "commitMessage": "YARN-707. Added user information also in the YARN ClientToken so that AMs can implement authorization based on incoming users. Contributed by Jason Lowe.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1518868 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/08/13 6:12 PM",
      "commitName": "89fb4d8ffd32b06db42cc3e21d2a89e99deb7732",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "24/08/13 2:16 PM",
      "commitNameOld": "962da4dcc74d23c7ce78164dcde38ea5aaf3dd68",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 5.16,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   public GetQueueInfoResponse getQueueInfo(GetQueueInfoRequest request)\n       throws YarnException {\n     GetQueueInfoResponse response \u003d\n       recordFactory.newRecordInstance(GetQueueInfoResponse.class);\n     try {\n       QueueInfo queueInfo \u003d \n         scheduler.getQueueInfo(request.getQueueName(),  \n             request.getIncludeChildQueues(), \n             request.getRecursive());\n       List\u003cApplicationReport\u003e appReports \u003d EMPTY_APPS_REPORT;\n       if (request.getIncludeApplications()) {\n         Collection\u003cRMApp\u003e apps \u003d this.rmContext.getRMApps().values();\n         appReports \u003d new ArrayList\u003cApplicationReport\u003e(\n             apps.size());\n         for (RMApp app : apps) {\n           if (app.getQueue().equals(queueInfo.getQueueName())) {\n-            appReports.add(app.createAndGetApplicationReport(true));\n+            appReports.add(app.createAndGetApplicationReport(null, true));\n           }\n         }\n       }\n       queueInfo.setApplications(appReports);\n       response.setQueueInfo(queueInfo);\n     } catch (IOException ioe) {\n       LOG.info(\"Failed to getQueueInfo for \" + request.getQueueName(), ioe);\n     }\n     \n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public GetQueueInfoResponse getQueueInfo(GetQueueInfoRequest request)\n      throws YarnException {\n    GetQueueInfoResponse response \u003d\n      recordFactory.newRecordInstance(GetQueueInfoResponse.class);\n    try {\n      QueueInfo queueInfo \u003d \n        scheduler.getQueueInfo(request.getQueueName(),  \n            request.getIncludeChildQueues(), \n            request.getRecursive());\n      List\u003cApplicationReport\u003e appReports \u003d EMPTY_APPS_REPORT;\n      if (request.getIncludeApplications()) {\n        Collection\u003cRMApp\u003e apps \u003d this.rmContext.getRMApps().values();\n        appReports \u003d new ArrayList\u003cApplicationReport\u003e(\n            apps.size());\n        for (RMApp app : apps) {\n          if (app.getQueue().equals(queueInfo.getQueueName())) {\n            appReports.add(app.createAndGetApplicationReport(null, true));\n          }\n        }\n      }\n      queueInfo.setApplications(appReports);\n      response.setQueueInfo(queueInfo);\n    } catch (IOException ioe) {\n      LOG.info(\"Failed to getQueueInfo for \" + request.getQueueName(), ioe);\n    }\n    \n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "a83fb61ac07c0468cbc7a38526e92683883dd932": {
      "type": "Yexceptionschange",
      "commitMessage": "YARN-635. Renamed YarnRemoteException to YarnException. Contributed by Siddharth Seth.\nMAPREDUCE-5301. Updated MR code to work with YARN-635 changes of renaming YarnRemoteException to YarnException. Contributed by Siddharth Seth\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489283 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/06/13 9:05 PM",
      "commitName": "a83fb61ac07c0468cbc7a38526e92683883dd932",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "03/06/13 5:34 PM",
      "commitNameOld": "d33534c4fb35cb82ff8d56abeeb63a949e72a031",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.15,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   public GetQueueInfoResponse getQueueInfo(GetQueueInfoRequest request)\n-      throws YarnRemoteException {\n+      throws YarnException {\n     GetQueueInfoResponse response \u003d\n       recordFactory.newRecordInstance(GetQueueInfoResponse.class);\n     try {\n       QueueInfo queueInfo \u003d \n         scheduler.getQueueInfo(request.getQueueName(),  \n             request.getIncludeChildQueues(), \n             request.getRecursive());\n       List\u003cApplicationReport\u003e appReports \u003d EMPTY_APPS_REPORT;\n       if (request.getIncludeApplications()) {\n         Collection\u003cRMApp\u003e apps \u003d this.rmContext.getRMApps().values();\n         appReports \u003d new ArrayList\u003cApplicationReport\u003e(\n             apps.size());\n         for (RMApp app : apps) {\n           if (app.getQueue().equals(queueInfo.getQueueName())) {\n             appReports.add(app.createAndGetApplicationReport(true));\n           }\n         }\n       }\n       queueInfo.setApplications(appReports);\n       response.setQueueInfo(queueInfo);\n     } catch (IOException ioe) {\n       LOG.info(\"Failed to getQueueInfo for \" + request.getQueueName(), ioe);\n     }\n     \n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public GetQueueInfoResponse getQueueInfo(GetQueueInfoRequest request)\n      throws YarnException {\n    GetQueueInfoResponse response \u003d\n      recordFactory.newRecordInstance(GetQueueInfoResponse.class);\n    try {\n      QueueInfo queueInfo \u003d \n        scheduler.getQueueInfo(request.getQueueName(),  \n            request.getIncludeChildQueues(), \n            request.getRecursive());\n      List\u003cApplicationReport\u003e appReports \u003d EMPTY_APPS_REPORT;\n      if (request.getIncludeApplications()) {\n        Collection\u003cRMApp\u003e apps \u003d this.rmContext.getRMApps().values();\n        appReports \u003d new ArrayList\u003cApplicationReport\u003e(\n            apps.size());\n        for (RMApp app : apps) {\n          if (app.getQueue().equals(queueInfo.getQueueName())) {\n            appReports.add(app.createAndGetApplicationReport(true));\n          }\n        }\n      }\n      queueInfo.setApplications(appReports);\n      response.setQueueInfo(queueInfo);\n    } catch (IOException ioe) {\n      LOG.info(\"Failed to getQueueInfo for \" + request.getQueueName(), ioe);\n    }\n    \n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {
        "oldValue": "[YarnRemoteException]",
        "newValue": "[YarnException]"
      }
    },
    "5d6eca08bd778fd971b29d3553d32cfc0dbe8d4e": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4896. mapred queue -info spits out ugly exception when queue does not exist. (sandyr via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1451452 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/02/13 5:28 PM",
      "commitName": "5d6eca08bd778fd971b29d3553d32cfc0dbe8d4e",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "06/02/13 11:03 AM",
      "commitNameOld": "ab16a375720f1b5fa8400498d6a727007275e1d8",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 22.27,
      "commitsBetweenForRepo": 74,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,28 @@\n   public GetQueueInfoResponse getQueueInfo(GetQueueInfoRequest request)\n       throws YarnRemoteException {\n     GetQueueInfoResponse response \u003d\n       recordFactory.newRecordInstance(GetQueueInfoResponse.class);\n     try {\n       QueueInfo queueInfo \u003d \n         scheduler.getQueueInfo(request.getQueueName(),  \n             request.getIncludeChildQueues(), \n             request.getRecursive());\n       List\u003cApplicationReport\u003e appReports \u003d EMPTY_APPS_REPORT;\n       if (request.getIncludeApplications()) {\n         Collection\u003cRMApp\u003e apps \u003d this.rmContext.getRMApps().values();\n         appReports \u003d new ArrayList\u003cApplicationReport\u003e(\n             apps.size());\n         for (RMApp app : apps) {\n           if (app.getQueue().equals(queueInfo.getQueueName())) {\n             appReports.add(app.createAndGetApplicationReport(true));\n           }\n         }\n       }\n       queueInfo.setApplications(appReports);\n       response.setQueueInfo(queueInfo);\n     } catch (IOException ioe) {\n       LOG.info(\"Failed to getQueueInfo for \" + request.getQueueName(), ioe);\n-      throw RPCUtil.getRemoteException(ioe);\n     }\n     \n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public GetQueueInfoResponse getQueueInfo(GetQueueInfoRequest request)\n      throws YarnRemoteException {\n    GetQueueInfoResponse response \u003d\n      recordFactory.newRecordInstance(GetQueueInfoResponse.class);\n    try {\n      QueueInfo queueInfo \u003d \n        scheduler.getQueueInfo(request.getQueueName(),  \n            request.getIncludeChildQueues(), \n            request.getRecursive());\n      List\u003cApplicationReport\u003e appReports \u003d EMPTY_APPS_REPORT;\n      if (request.getIncludeApplications()) {\n        Collection\u003cRMApp\u003e apps \u003d this.rmContext.getRMApps().values();\n        appReports \u003d new ArrayList\u003cApplicationReport\u003e(\n            apps.size());\n        for (RMApp app : apps) {\n          if (app.getQueue().equals(queueInfo.getQueueName())) {\n            appReports.add(app.createAndGetApplicationReport(true));\n          }\n        }\n      }\n      queueInfo.setApplications(appReports);\n      response.setQueueInfo(queueInfo);\n    } catch (IOException ioe) {\n      LOG.info(\"Failed to getQueueInfo for \" + request.getQueueName(), ioe);\n    }\n    \n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public GetQueueInfoResponse getQueueInfo(GetQueueInfoRequest request)\n      throws YarnRemoteException {\n    GetQueueInfoResponse response \u003d\n      recordFactory.newRecordInstance(GetQueueInfoResponse.class);\n    try {\n      QueueInfo queueInfo \u003d \n        scheduler.getQueueInfo(request.getQueueName(),  \n            request.getIncludeChildQueues(), \n            request.getRecursive());\n      List\u003cApplicationReport\u003e appReports \u003d EMPTY_APPS_REPORT;\n      if (request.getIncludeApplications()) {\n        Collection\u003cRMApp\u003e apps \u003d this.rmContext.getRMApps().values();\n        appReports \u003d new ArrayList\u003cApplicationReport\u003e(\n            apps.size());\n        for (RMApp app : apps) {\n          if (app.getQueue().equals(queueInfo.getQueueName())) {\n            appReports.add(app.createAndGetApplicationReport(true));\n          }\n        }\n      }\n      queueInfo.setApplications(appReports);\n      response.setQueueInfo(queueInfo);\n    } catch (IOException ioe) {\n      LOG.info(\"Failed to getQueueInfo for \" + request.getQueueName(), ioe);\n      throw RPCUtil.getRemoteException(ioe);\n    }\n    \n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java"
      }
    },
    "228736ab5170c40c8d39c4b004c8e147cf287f2c": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4419. ./mapred queue -info \u003cqueuename\u003e -showJobs displays all the jobs irrespective of \u003cqueuename\u003e (Devaraj K via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1361389 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/07/12 1:42 PM",
      "commitName": "228736ab5170c40c8d39c4b004c8e147cf287f2c",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "08/05/12 8:07 AM",
      "commitNameOld": "aa60da6c2ec049cc70897afee6c368cb70493773",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 66.23,
      "commitsBetweenForRepo": 342,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,29 @@\n   public GetQueueInfoResponse getQueueInfo(GetQueueInfoRequest request)\n       throws YarnRemoteException {\n     GetQueueInfoResponse response \u003d\n       recordFactory.newRecordInstance(GetQueueInfoResponse.class);\n     try {\n       QueueInfo queueInfo \u003d \n         scheduler.getQueueInfo(request.getQueueName(),  \n             request.getIncludeChildQueues(), \n             request.getRecursive());\n       List\u003cApplicationReport\u003e appReports \u003d EMPTY_APPS_REPORT;\n       if (request.getIncludeApplications()) {\n         Collection\u003cRMApp\u003e apps \u003d this.rmContext.getRMApps().values();\n         appReports \u003d new ArrayList\u003cApplicationReport\u003e(\n             apps.size());\n         for (RMApp app : apps) {\n-          appReports.add(app.createAndGetApplicationReport(true));\n+          if (app.getQueue().equals(queueInfo.getQueueName())) {\n+            appReports.add(app.createAndGetApplicationReport(true));\n+          }\n         }\n       }\n       queueInfo.setApplications(appReports);\n       response.setQueueInfo(queueInfo);\n     } catch (IOException ioe) {\n       LOG.info(\"Failed to getQueueInfo for \" + request.getQueueName(), ioe);\n       throw RPCUtil.getRemoteException(ioe);\n     }\n     \n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public GetQueueInfoResponse getQueueInfo(GetQueueInfoRequest request)\n      throws YarnRemoteException {\n    GetQueueInfoResponse response \u003d\n      recordFactory.newRecordInstance(GetQueueInfoResponse.class);\n    try {\n      QueueInfo queueInfo \u003d \n        scheduler.getQueueInfo(request.getQueueName(),  \n            request.getIncludeChildQueues(), \n            request.getRecursive());\n      List\u003cApplicationReport\u003e appReports \u003d EMPTY_APPS_REPORT;\n      if (request.getIncludeApplications()) {\n        Collection\u003cRMApp\u003e apps \u003d this.rmContext.getRMApps().values();\n        appReports \u003d new ArrayList\u003cApplicationReport\u003e(\n            apps.size());\n        for (RMApp app : apps) {\n          if (app.getQueue().equals(queueInfo.getQueueName())) {\n            appReports.add(app.createAndGetApplicationReport(true));\n          }\n        }\n      }\n      queueInfo.setApplications(appReports);\n      response.setQueueInfo(queueInfo);\n    } catch (IOException ioe) {\n      LOG.info(\"Failed to getQueueInfo for \" + request.getQueueName(), ioe);\n      throw RPCUtil.getRemoteException(ioe);\n    }\n    \n    return response;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "fab57a144de0cd515e1de9107e4d3ac58037d846": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3792. Fix \"bin/mapred job -list\" to display all jobs instead of only the jobs owned by the user. Contributed by Jason Lowe.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1296721 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/03/12 3:40 PM",
      "commitName": "fab57a144de0cd515e1de9107e4d3ac58037d846",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "04/02/12 12:03 PM",
      "commitNameOld": "c7d64769c1a72f2aab9958e33a7cf28d02612306",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 28.15,
      "commitsBetweenForRepo": 247,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   public GetQueueInfoResponse getQueueInfo(GetQueueInfoRequest request)\n       throws YarnRemoteException {\n     GetQueueInfoResponse response \u003d\n       recordFactory.newRecordInstance(GetQueueInfoResponse.class);\n     try {\n       QueueInfo queueInfo \u003d \n         scheduler.getQueueInfo(request.getQueueName(),  \n             request.getIncludeChildQueues(), \n             request.getRecursive());\n       List\u003cApplicationReport\u003e appReports \u003d EMPTY_APPS_REPORT;\n       if (request.getIncludeApplications()) {\n         Collection\u003cRMApp\u003e apps \u003d this.rmContext.getRMApps().values();\n         appReports \u003d new ArrayList\u003cApplicationReport\u003e(\n             apps.size());\n         for (RMApp app : apps) {\n-          appReports.add(app.createAndGetApplicationReport());\n+          appReports.add(app.createAndGetApplicationReport(true));\n         }\n       }\n       queueInfo.setApplications(appReports);\n       response.setQueueInfo(queueInfo);\n     } catch (IOException ioe) {\n       LOG.info(\"Failed to getQueueInfo for \" + request.getQueueName(), ioe);\n       throw RPCUtil.getRemoteException(ioe);\n     }\n     \n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public GetQueueInfoResponse getQueueInfo(GetQueueInfoRequest request)\n      throws YarnRemoteException {\n    GetQueueInfoResponse response \u003d\n      recordFactory.newRecordInstance(GetQueueInfoResponse.class);\n    try {\n      QueueInfo queueInfo \u003d \n        scheduler.getQueueInfo(request.getQueueName(),  \n            request.getIncludeChildQueues(), \n            request.getRecursive());\n      List\u003cApplicationReport\u003e appReports \u003d EMPTY_APPS_REPORT;\n      if (request.getIncludeApplications()) {\n        Collection\u003cRMApp\u003e apps \u003d this.rmContext.getRMApps().values();\n        appReports \u003d new ArrayList\u003cApplicationReport\u003e(\n            apps.size());\n        for (RMApp app : apps) {\n          appReports.add(app.createAndGetApplicationReport(true));\n        }\n      }\n      queueInfo.setApplications(appReports);\n      response.setQueueInfo(queueInfo);\n    } catch (IOException ioe) {\n      LOG.info(\"Failed to getQueueInfo for \" + request.getQueueName(), ioe);\n      throw RPCUtil.getRemoteException(ioe);\n    }\n    \n    return response;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public GetQueueInfoResponse getQueueInfo(GetQueueInfoRequest request)\n      throws YarnRemoteException {\n    GetQueueInfoResponse response \u003d\n      recordFactory.newRecordInstance(GetQueueInfoResponse.class);\n    try {\n      QueueInfo queueInfo \u003d \n        scheduler.getQueueInfo(request.getQueueName(),  \n            request.getIncludeChildQueues(), \n            request.getRecursive());\n      List\u003cApplicationReport\u003e appReports \u003d EMPTY_APPS_REPORT;\n      if (request.getIncludeApplications()) {\n        Collection\u003cRMApp\u003e apps \u003d this.rmContext.getRMApps().values();\n        appReports \u003d new ArrayList\u003cApplicationReport\u003e(\n            apps.size());\n        for (RMApp app : apps) {\n          appReports.add(app.createAndGetApplicationReport());\n        }\n      }\n      queueInfo.setApplications(appReports);\n      response.setQueueInfo(queueInfo);\n    } catch (IOException ioe) {\n      LOG.info(\"Failed to getQueueInfo for \" + request.getQueueName(), ioe);\n      throw RPCUtil.getRemoteException(ioe);\n    }\n    \n    return response;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,27 @@\n+  public GetQueueInfoResponse getQueueInfo(GetQueueInfoRequest request)\n+      throws YarnRemoteException {\n+    GetQueueInfoResponse response \u003d\n+      recordFactory.newRecordInstance(GetQueueInfoResponse.class);\n+    try {\n+      QueueInfo queueInfo \u003d \n+        scheduler.getQueueInfo(request.getQueueName(),  \n+            request.getIncludeChildQueues(), \n+            request.getRecursive());\n+      List\u003cApplicationReport\u003e appReports \u003d EMPTY_APPS_REPORT;\n+      if (request.getIncludeApplications()) {\n+        Collection\u003cRMApp\u003e apps \u003d this.rmContext.getRMApps().values();\n+        appReports \u003d new ArrayList\u003cApplicationReport\u003e(\n+            apps.size());\n+        for (RMApp app : apps) {\n+          appReports.add(app.createAndGetApplicationReport());\n+        }\n+      }\n+      queueInfo.setApplications(appReports);\n+      response.setQueueInfo(queueInfo);\n+    } catch (IOException ioe) {\n+      LOG.info(\"Failed to getQueueInfo for \" + request.getQueueName(), ioe);\n+      throw RPCUtil.getRemoteException(ioe);\n+    }\n+    \n+    return response;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public GetQueueInfoResponse getQueueInfo(GetQueueInfoRequest request)\n      throws YarnRemoteException {\n    GetQueueInfoResponse response \u003d\n      recordFactory.newRecordInstance(GetQueueInfoResponse.class);\n    try {\n      QueueInfo queueInfo \u003d \n        scheduler.getQueueInfo(request.getQueueName(),  \n            request.getIncludeChildQueues(), \n            request.getRecursive());\n      List\u003cApplicationReport\u003e appReports \u003d EMPTY_APPS_REPORT;\n      if (request.getIncludeApplications()) {\n        Collection\u003cRMApp\u003e apps \u003d this.rmContext.getRMApps().values();\n        appReports \u003d new ArrayList\u003cApplicationReport\u003e(\n            apps.size());\n        for (RMApp app : apps) {\n          appReports.add(app.createAndGetApplicationReport());\n        }\n      }\n      queueInfo.setApplications(appReports);\n      response.setQueueInfo(queueInfo);\n    } catch (IOException ioe) {\n      LOG.info(\"Failed to getQueueInfo for \" + request.getQueueName(), ioe);\n      throw RPCUtil.getRemoteException(ioe);\n    }\n    \n    return response;\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java"
    }
  }
}