{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CrcUtil.java",
  "functionName": "galoisFieldMultiply",
  "functionId": "galoisFieldMultiply___p-int__q-int__m-int",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/CrcUtil.java",
  "functionStartLine": 191,
  "functionEndLine": 219,
  "numCommitsSeen": 1,
  "timeTaken": 1298,
  "changeHistory": [
    "7c9cdad6d04c98db5a83e2108219bf6e6c903daf"
  ],
  "changeHistoryShort": {
    "7c9cdad6d04c98db5a83e2108219bf6e6c903daf": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7c9cdad6d04c98db5a83e2108219bf6e6c903daf": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-13056. Expose file-level composite CRCs in HDFS which are comparable across different instances/layouts. Contributed by Dennis Huo.\n",
      "commitDate": "10/04/18 9:31 PM",
      "commitName": "7c9cdad6d04c98db5a83e2108219bf6e6c903daf",
      "commitAuthor": "Xiao Chen",
      "diff": "@@ -0,0 +1,29 @@\n+  private static int galoisFieldMultiply(int p, int q, int m) {\n+    int summation \u003d 0;\n+\n+    // Top bit is the x^0 place; each right-shift increments the degree of the\n+    // current term.\n+    int curTerm \u003d MULTIPLICATIVE_IDENTITY;\n+\n+    // Iteratively multiply p by x mod m as we go to represent the q[i] term\n+    // (of degree x^i) times p.\n+    int px \u003d p;\n+\n+    while (curTerm !\u003d 0) {\n+      if ((q \u0026 curTerm) !\u003d 0) {\n+        summation ^\u003d px;\n+      }\n+\n+      // Bottom bit represents highest degree since we\u0027re little-endian; before\n+      // we multiply by \"x\" for the next term, check bottom bit to know whether\n+      // the resulting px will thus have a term matching the implicit \"1\" term\n+      // of \"m\" and thus will need to subtract \"m\" after mutiplying by \"x\".\n+      boolean hasMaxDegree \u003d ((px \u0026 1) !\u003d 0);\n+      px \u003e\u003e\u003e\u003d 1;\n+      if (hasMaxDegree) {\n+        px ^\u003d m;\n+      }\n+      curTerm \u003e\u003e\u003e\u003d 1;\n+    }\n+    return summation;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static int galoisFieldMultiply(int p, int q, int m) {\n    int summation \u003d 0;\n\n    // Top bit is the x^0 place; each right-shift increments the degree of the\n    // current term.\n    int curTerm \u003d MULTIPLICATIVE_IDENTITY;\n\n    // Iteratively multiply p by x mod m as we go to represent the q[i] term\n    // (of degree x^i) times p.\n    int px \u003d p;\n\n    while (curTerm !\u003d 0) {\n      if ((q \u0026 curTerm) !\u003d 0) {\n        summation ^\u003d px;\n      }\n\n      // Bottom bit represents highest degree since we\u0027re little-endian; before\n      // we multiply by \"x\" for the next term, check bottom bit to know whether\n      // the resulting px will thus have a term matching the implicit \"1\" term\n      // of \"m\" and thus will need to subtract \"m\" after mutiplying by \"x\".\n      boolean hasMaxDegree \u003d ((px \u0026 1) !\u003d 0);\n      px \u003e\u003e\u003e\u003d 1;\n      if (hasMaxDegree) {\n        px ^\u003d m;\n      }\n      curTerm \u003e\u003e\u003e\u003d 1;\n    }\n    return summation;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/CrcUtil.java"
    }
  }
}