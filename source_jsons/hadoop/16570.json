{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RouterRpcServer.java",
  "functionName": "invokeAtAvailableNs",
  "functionId": "invokeAtAvailableNs___method-RemoteMethod__clazz-Class__T__",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcServer.java",
  "functionStartLine": 560,
  "functionEndLine": 573,
  "numCommitsSeen": 53,
  "timeTaken": 1611,
  "changeHistory": [
    "6c42d4050461ab71c88f123569649793dc53aebd",
    "9eed3a49dfaba20cb1415d0712d60d17f613e19a"
  ],
  "changeHistoryShort": {
    "6c42d4050461ab71c88f123569649793dc53aebd": "Ybodychange",
    "9eed3a49dfaba20cb1415d0712d60d17f613e19a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6c42d4050461ab71c88f123569649793dc53aebd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14316. RBF: Support unavailable subclusters for mount points with multiple destinations. Contributed by Inigo Goiri.\n",
      "commitDate": "24/06/19 9:33 AM",
      "commitName": "6c42d4050461ab71c88f123569649793dc53aebd",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "24/06/19 9:33 AM",
      "commitNameOld": "0dbd87874a16403f537ef31f45ab0fe05924af6f",
      "commitAuthorOld": "Ayush Saxena",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,14 @@\n   \u003cT\u003e T invokeAtAvailableNs(RemoteMethod method, Class\u003cT\u003e clazz)\n       throws IOException {\n     String nsId \u003d subclusterResolver.getDefaultNamespace();\n     if (!nsId.isEmpty()) {\n       return rpcClient.invokeSingle(nsId, method, clazz);\n     }\n     // If default Ns is not present return result from first namespace.\n     Set\u003cFederationNamespaceInfo\u003e nss \u003d namenodeResolver.getNamespaces();\n     if (nss.isEmpty()) {\n-      throw new IOException(\"No namespace availaible.\");\n+      throw new IOException(\"No namespace available.\");\n     }\n     nsId \u003d nss.iterator().next().getNameserviceId();\n     return rpcClient.invokeSingle(nsId, method, clazz);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  \u003cT\u003e T invokeAtAvailableNs(RemoteMethod method, Class\u003cT\u003e clazz)\n      throws IOException {\n    String nsId \u003d subclusterResolver.getDefaultNamespace();\n    if (!nsId.isEmpty()) {\n      return rpcClient.invokeSingle(nsId, method, clazz);\n    }\n    // If default Ns is not present return result from first namespace.\n    Set\u003cFederationNamespaceInfo\u003e nss \u003d namenodeResolver.getNamespaces();\n    if (nss.isEmpty()) {\n      throw new IOException(\"No namespace available.\");\n    }\n    nsId \u003d nss.iterator().next().getNameserviceId();\n    return rpcClient.invokeSingle(nsId, method, clazz);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcServer.java",
      "extendedDetails": {}
    },
    "9eed3a49dfaba20cb1415d0712d60d17f613e19a": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-14215. RBF: Remove dependency on availability of default namespace. Contributed by Ayush Saxena.\n",
      "commitDate": "24/06/19 9:33 AM",
      "commitName": "9eed3a49dfaba20cb1415d0712d60d17f613e19a",
      "commitAuthor": "Inigo Goiri",
      "diff": "@@ -0,0 +1,14 @@\n+  \u003cT\u003e T invokeAtAvailableNs(RemoteMethod method, Class\u003cT\u003e clazz)\n+      throws IOException {\n+    String nsId \u003d subclusterResolver.getDefaultNamespace();\n+    if (!nsId.isEmpty()) {\n+      return rpcClient.invokeSingle(nsId, method, clazz);\n+    }\n+    // If default Ns is not present return result from first namespace.\n+    Set\u003cFederationNamespaceInfo\u003e nss \u003d namenodeResolver.getNamespaces();\n+    if (nss.isEmpty()) {\n+      throw new IOException(\"No namespace availaible.\");\n+    }\n+    nsId \u003d nss.iterator().next().getNameserviceId();\n+    return rpcClient.invokeSingle(nsId, method, clazz);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  \u003cT\u003e T invokeAtAvailableNs(RemoteMethod method, Class\u003cT\u003e clazz)\n      throws IOException {\n    String nsId \u003d subclusterResolver.getDefaultNamespace();\n    if (!nsId.isEmpty()) {\n      return rpcClient.invokeSingle(nsId, method, clazz);\n    }\n    // If default Ns is not present return result from first namespace.\n    Set\u003cFederationNamespaceInfo\u003e nss \u003d namenodeResolver.getNamespaces();\n    if (nss.isEmpty()) {\n      throw new IOException(\"No namespace availaible.\");\n    }\n    nsId \u003d nss.iterator().next().getNameserviceId();\n    return rpcClient.invokeSingle(nsId, method, clazz);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterRpcServer.java"
    }
  }
}