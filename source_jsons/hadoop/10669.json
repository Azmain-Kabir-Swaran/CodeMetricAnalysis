{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractFuture.java",
  "functionName": "getDone",
  "functionId": "getDone___future-Future__V__",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/checker/AbstractFuture.java",
  "functionStartLine": 895,
  "functionEndLine": 913,
  "numCommitsSeen": 4,
  "timeTaken": 723,
  "changeHistory": [
    "d69a82c89c1e857a2a86ff614ae11fb5df993614"
  ],
  "changeHistoryShort": {
    "d69a82c89c1e857a2a86ff614ae11fb5df993614": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d69a82c89c1e857a2a86ff614ae11fb5df993614": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-11511. Support Timeout when checking single disk. Contributed by Hanisha Koneru.\n",
      "commitDate": "15/03/17 6:01 PM",
      "commitName": "d69a82c89c1e857a2a86ff614ae11fb5df993614",
      "commitAuthor": "Hanisha Koneru",
      "diff": "@@ -0,0 +1,19 @@\n+  public static \u003cV\u003e V getDone(Future\u003cV\u003e future) throws ExecutionException {\n+    /*\n+     * We throw IllegalStateException, since the call could succeed later.\n+     * Perhaps we \"should\" throw IllegalArgumentException, since the call\n+     * could succeed with a different argument. Those exceptions\u0027 docs\n+     * suggest that either is acceptable. Google\u0027s Java Practices page\n+     * recommends IllegalArgumentException here, in part to keep its\n+     * recommendation simple: Static methods should throw\n+     * IllegalStateException only when they use static state.\n+     *\n+     *\n+     * Why do we deviate here? The answer: We want for fluentFuture.getDone()\n+      * to throw the same exception as Futures.getDone(fluentFuture).\n+     */\n+    Preconditions.checkState(future.isDone(), \"Future was expected to be \" +\n+        \"done:\" +\n+        \" %s\", future);\n+    return Uninterruptibles.getUninterruptibly(future);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static \u003cV\u003e V getDone(Future\u003cV\u003e future) throws ExecutionException {\n    /*\n     * We throw IllegalStateException, since the call could succeed later.\n     * Perhaps we \"should\" throw IllegalArgumentException, since the call\n     * could succeed with a different argument. Those exceptions\u0027 docs\n     * suggest that either is acceptable. Google\u0027s Java Practices page\n     * recommends IllegalArgumentException here, in part to keep its\n     * recommendation simple: Static methods should throw\n     * IllegalStateException only when they use static state.\n     *\n     *\n     * Why do we deviate here? The answer: We want for fluentFuture.getDone()\n      * to throw the same exception as Futures.getDone(fluentFuture).\n     */\n    Preconditions.checkState(future.isDone(), \"Future was expected to be \" +\n        \"done:\" +\n        \" %s\", future);\n    return Uninterruptibles.getUninterruptibly(future);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/checker/AbstractFuture.java"
    }
  }
}