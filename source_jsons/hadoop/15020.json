{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PBImageXmlWriter.java",
  "functionName": "dumpSnapshotDiffSection",
  "functionId": "dumpSnapshotDiffSection___in-InputStream",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/PBImageXmlWriter.java",
  "functionStartLine": 733,
  "functionEndLine": 830,
  "numCommitsSeen": 27,
  "timeTaken": 4049,
  "changeHistory": [
    "b60ca37914b22550e3630fa02742d40697decb31",
    "46d37a65cf09c2714b4c0c4ec0399031d60027a5",
    "05391c1845639d4f01da8e5df966e2dc2682f2ca",
    "680716f31e120f4d3ee70b095e4db46c05b891d9",
    "700b0e4019cf483f7532609711812150b8c44742",
    "4f8a487fcd3c5d324b0bb03157f404fb127e21e8",
    "2624b20291629b4565ea45590b66f2c38f96df67",
    "a2edb11b68ae01a44092cb14ac2717a6aad93305"
  ],
  "changeHistoryShort": {
    "b60ca37914b22550e3630fa02742d40697decb31": "Ybodychange",
    "46d37a65cf09c2714b4c0c4ec0399031d60027a5": "Ybodychange",
    "05391c1845639d4f01da8e5df966e2dc2682f2ca": "Ybodychange",
    "680716f31e120f4d3ee70b095e4db46c05b891d9": "Ybodychange",
    "700b0e4019cf483f7532609711812150b8c44742": "Ybodychange",
    "4f8a487fcd3c5d324b0bb03157f404fb127e21e8": "Ybodychange",
    "2624b20291629b4565ea45590b66f2c38f96df67": "Ybodychange",
    "a2edb11b68ae01a44092cb14ac2717a6aad93305": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b60ca37914b22550e3630fa02742d40697decb31": {
      "type": "Ybodychange",
      "commitMessage": "Fix potential FSImage corruption. Contributed by Daryn Sharp.\n",
      "commitDate": "15/10/18 3:18 AM",
      "commitName": "b60ca37914b22550e3630fa02742d40697decb31",
      "commitAuthor": "Vinayakumar B",
      "commitDateOld": "03/11/17 12:05 PM",
      "commitNameOld": "299d38295d61e3ad154814b680558969449d50fe",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 345.63,
      "commitsBetweenForRepo": 3173,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,99 +1,98 @@\n   private void dumpSnapshotDiffSection(InputStream in) throws IOException {\n     out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_NAME + \"\u003e\");\n     while (true) {\n       SnapshotDiffSection.DiffEntry e \u003d SnapshotDiffSection.DiffEntry\n           .parseDelimitedFrom(in);\n       if (e \u003d\u003d null) {\n         break;\n       }\n       switch (e.getType()) {\n       case FILEDIFF:\n         out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_FILE_DIFF_ENTRY + \"\u003e\");\n         break;\n       case DIRECTORYDIFF:\n         out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_DIR_DIFF_ENTRY + \"\u003e\");\n         break;\n       default:\n         throw new IOException(\"unknown DiffEntry type \" + e.getType());\n       }\n       o(SNAPSHOT_DIFF_SECTION_INODE_ID, e.getInodeId());\n       o(SNAPSHOT_DIFF_SECTION_COUNT, e.getNumOfDiff());\n       switch (e.getType()) {\n       case FILEDIFF: {\n         for (int i \u003d 0; i \u003c e.getNumOfDiff(); ++i) {\n           out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_FILE_DIFF + \"\u003e\");\n           SnapshotDiffSection.FileDiff f \u003d SnapshotDiffSection.FileDiff\n               .parseDelimitedFrom(in);\n           o(SNAPSHOT_DIFF_SECTION_SNAPSHOT_ID, f.getSnapshotId())\n               .o(SNAPSHOT_DIFF_SECTION_SIZE, f.getFileSize())\n               .o(SECTION_NAME, f.getName().toStringUtf8());\n           INodeSection.INodeFile snapshotCopy \u003d f.getSnapshotCopy();\n           if (snapshotCopy !\u003d null) {\n             out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_SNAPSHOT_COPY + \"\u003e\");\n             dumpINodeFile(snapshotCopy);\n             out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_SNAPSHOT_COPY + \"\u003e\\n\");\n           }\n           if (f.getBlocksCount() \u003e 0) {\n             out.print(\"\u003c\" + INODE_SECTION_BLOCKS + \"\u003e\");\n             for (BlockProto b : f.getBlocksList()) {\n               out.print(\"\u003c\" + INODE_SECTION_BLOCK + \"\u003e\");\n               o(SECTION_ID, b.getBlockId())\n                   .o(INODE_SECTION_GENSTAMP, b.getGenStamp())\n                   .o(INODE_SECTION_NUM_BYTES, b.getNumBytes());\n               out.print(\"\u003c/\" + INODE_SECTION_BLOCK + \"\u003e\\n\");\n             }\n             out.print(\"\u003c/\" + INODE_SECTION_BLOCKS + \"\u003e\\n\");\n           }\n           out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_FILE_DIFF + \"\u003e\\n\");\n         }\n       }\n         break;\n       case DIRECTORYDIFF: {\n         for (int i \u003d 0; i \u003c e.getNumOfDiff(); ++i) {\n           out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_DIR_DIFF + \"\u003e\");\n           SnapshotDiffSection.DirectoryDiff d \u003d SnapshotDiffSection.DirectoryDiff\n               .parseDelimitedFrom(in);\n           o(SNAPSHOT_DIFF_SECTION_SNAPSHOT_ID, d.getSnapshotId())\n               .o(SNAPSHOT_DIFF_SECTION_CHILDREN_SIZE, d.getChildrenSize())\n               .o(SNAPSHOT_DIFF_SECTION_IS_SNAPSHOT_ROOT, d.getIsSnapshotRoot())\n               .o(SECTION_NAME, d.getName().toStringUtf8());\n-          INodeDirectory snapshotCopy \u003d d.getSnapshotCopy();\n-          if (snapshotCopy !\u003d null) {\n+          if (d.hasSnapshotCopy()) {\n             out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_SNAPSHOT_COPY + \"\u003e\");\n-            dumpINodeDirectory(snapshotCopy);\n+            dumpINodeDirectory(d.getSnapshotCopy());\n             out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_SNAPSHOT_COPY + \"\u003e\\n\");\n           }\n           o(SNAPSHOT_DIFF_SECTION_CREATED_LIST_SIZE, d.getCreatedListSize());\n           for (long did : d.getDeletedINodeList()) {\n             o(SNAPSHOT_DIFF_SECTION_DELETED_INODE, did);\n           }\n           for (int dRefid : d.getDeletedINodeRefList()) {\n             o(SNAPSHOT_DIFF_SECTION_DELETED_INODE_REF, dRefid);\n           }\n           for (int j \u003d 0; j \u003c d.getCreatedListSize(); ++j) {\n             SnapshotDiffSection.CreatedListEntry ce \u003d SnapshotDiffSection.CreatedListEntry\n                 .parseDelimitedFrom(in);\n             out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_CREATED + \"\u003e\");\n             o(SECTION_NAME, ce.getName().toStringUtf8());\n             out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_CREATED + \"\u003e\\n\");\n           }\n           out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_DIR_DIFF + \"\u003e\\n\");\n         }\n         break;\n       }\n       default:\n         break;\n       }\n       switch (e.getType()) {\n       case FILEDIFF:\n         out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_FILE_DIFF_ENTRY + \"\u003e\");\n         break;\n       case DIRECTORYDIFF:\n         out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_DIR_DIFF_ENTRY + \"\u003e\");\n         break;\n       default:\n         throw new IOException(\"unknown DiffEntry type \" + e.getType());\n       }\n     }\n     out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_NAME + \"\u003e\\n\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void dumpSnapshotDiffSection(InputStream in) throws IOException {\n    out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_NAME + \"\u003e\");\n    while (true) {\n      SnapshotDiffSection.DiffEntry e \u003d SnapshotDiffSection.DiffEntry\n          .parseDelimitedFrom(in);\n      if (e \u003d\u003d null) {\n        break;\n      }\n      switch (e.getType()) {\n      case FILEDIFF:\n        out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_FILE_DIFF_ENTRY + \"\u003e\");\n        break;\n      case DIRECTORYDIFF:\n        out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_DIR_DIFF_ENTRY + \"\u003e\");\n        break;\n      default:\n        throw new IOException(\"unknown DiffEntry type \" + e.getType());\n      }\n      o(SNAPSHOT_DIFF_SECTION_INODE_ID, e.getInodeId());\n      o(SNAPSHOT_DIFF_SECTION_COUNT, e.getNumOfDiff());\n      switch (e.getType()) {\n      case FILEDIFF: {\n        for (int i \u003d 0; i \u003c e.getNumOfDiff(); ++i) {\n          out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_FILE_DIFF + \"\u003e\");\n          SnapshotDiffSection.FileDiff f \u003d SnapshotDiffSection.FileDiff\n              .parseDelimitedFrom(in);\n          o(SNAPSHOT_DIFF_SECTION_SNAPSHOT_ID, f.getSnapshotId())\n              .o(SNAPSHOT_DIFF_SECTION_SIZE, f.getFileSize())\n              .o(SECTION_NAME, f.getName().toStringUtf8());\n          INodeSection.INodeFile snapshotCopy \u003d f.getSnapshotCopy();\n          if (snapshotCopy !\u003d null) {\n            out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_SNAPSHOT_COPY + \"\u003e\");\n            dumpINodeFile(snapshotCopy);\n            out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_SNAPSHOT_COPY + \"\u003e\\n\");\n          }\n          if (f.getBlocksCount() \u003e 0) {\n            out.print(\"\u003c\" + INODE_SECTION_BLOCKS + \"\u003e\");\n            for (BlockProto b : f.getBlocksList()) {\n              out.print(\"\u003c\" + INODE_SECTION_BLOCK + \"\u003e\");\n              o(SECTION_ID, b.getBlockId())\n                  .o(INODE_SECTION_GENSTAMP, b.getGenStamp())\n                  .o(INODE_SECTION_NUM_BYTES, b.getNumBytes());\n              out.print(\"\u003c/\" + INODE_SECTION_BLOCK + \"\u003e\\n\");\n            }\n            out.print(\"\u003c/\" + INODE_SECTION_BLOCKS + \"\u003e\\n\");\n          }\n          out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_FILE_DIFF + \"\u003e\\n\");\n        }\n      }\n        break;\n      case DIRECTORYDIFF: {\n        for (int i \u003d 0; i \u003c e.getNumOfDiff(); ++i) {\n          out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_DIR_DIFF + \"\u003e\");\n          SnapshotDiffSection.DirectoryDiff d \u003d SnapshotDiffSection.DirectoryDiff\n              .parseDelimitedFrom(in);\n          o(SNAPSHOT_DIFF_SECTION_SNAPSHOT_ID, d.getSnapshotId())\n              .o(SNAPSHOT_DIFF_SECTION_CHILDREN_SIZE, d.getChildrenSize())\n              .o(SNAPSHOT_DIFF_SECTION_IS_SNAPSHOT_ROOT, d.getIsSnapshotRoot())\n              .o(SECTION_NAME, d.getName().toStringUtf8());\n          if (d.hasSnapshotCopy()) {\n            out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_SNAPSHOT_COPY + \"\u003e\");\n            dumpINodeDirectory(d.getSnapshotCopy());\n            out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_SNAPSHOT_COPY + \"\u003e\\n\");\n          }\n          o(SNAPSHOT_DIFF_SECTION_CREATED_LIST_SIZE, d.getCreatedListSize());\n          for (long did : d.getDeletedINodeList()) {\n            o(SNAPSHOT_DIFF_SECTION_DELETED_INODE, did);\n          }\n          for (int dRefid : d.getDeletedINodeRefList()) {\n            o(SNAPSHOT_DIFF_SECTION_DELETED_INODE_REF, dRefid);\n          }\n          for (int j \u003d 0; j \u003c d.getCreatedListSize(); ++j) {\n            SnapshotDiffSection.CreatedListEntry ce \u003d SnapshotDiffSection.CreatedListEntry\n                .parseDelimitedFrom(in);\n            out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_CREATED + \"\u003e\");\n            o(SECTION_NAME, ce.getName().toStringUtf8());\n            out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_CREATED + \"\u003e\\n\");\n          }\n          out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_DIR_DIFF + \"\u003e\\n\");\n        }\n        break;\n      }\n      default:\n        break;\n      }\n      switch (e.getType()) {\n      case FILEDIFF:\n        out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_FILE_DIFF_ENTRY + \"\u003e\");\n        break;\n      case DIRECTORYDIFF:\n        out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_DIR_DIFF_ENTRY + \"\u003e\");\n        break;\n      default:\n        throw new IOException(\"unknown DiffEntry type \" + e.getType());\n      }\n    }\n    out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_NAME + \"\u003e\\n\");\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/PBImageXmlWriter.java",
      "extendedDetails": {}
    },
    "46d37a65cf09c2714b4c0c4ec0399031d60027a5": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10506. Addendum patch to include missing changes. Contributed by Akira Ajisaka.\n",
      "commitDate": "27/03/17 5:23 AM",
      "commitName": "46d37a65cf09c2714b4c0c4ec0399031d60027a5",
      "commitAuthor": "Wei-Chiu Chuang",
      "commitDateOld": "08/03/17 3:36 PM",
      "commitNameOld": "5ca6ef0c268b1acb3abf12505b9ead6fe7e38a23",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 18.53,
      "commitsBetweenForRepo": 101,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,99 +1,99 @@\n   private void dumpSnapshotDiffSection(InputStream in) throws IOException {\n     out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_NAME + \"\u003e\");\n     while (true) {\n       SnapshotDiffSection.DiffEntry e \u003d SnapshotDiffSection.DiffEntry\n           .parseDelimitedFrom(in);\n       if (e \u003d\u003d null) {\n         break;\n       }\n       switch (e.getType()) {\n       case FILEDIFF:\n         out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_FILE_DIFF_ENTRY + \"\u003e\");\n         break;\n       case DIRECTORYDIFF:\n         out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_DIR_DIFF_ENTRY + \"\u003e\");\n         break;\n       default:\n         throw new IOException(\"unknown DiffEntry type \" + e.getType());\n       }\n       o(SNAPSHOT_DIFF_SECTION_INODE_ID, e.getInodeId());\n       o(SNAPSHOT_DIFF_SECTION_COUNT, e.getNumOfDiff());\n       switch (e.getType()) {\n       case FILEDIFF: {\n         for (int i \u003d 0; i \u003c e.getNumOfDiff(); ++i) {\n           out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_FILE_DIFF + \"\u003e\");\n           SnapshotDiffSection.FileDiff f \u003d SnapshotDiffSection.FileDiff\n               .parseDelimitedFrom(in);\n           o(SNAPSHOT_DIFF_SECTION_SNAPSHOT_ID, f.getSnapshotId())\n               .o(SNAPSHOT_DIFF_SECTION_SIZE, f.getFileSize())\n               .o(SECTION_NAME, f.getName().toStringUtf8());\n           INodeSection.INodeFile snapshotCopy \u003d f.getSnapshotCopy();\n           if (snapshotCopy !\u003d null) {\n             out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_SNAPSHOT_COPY + \"\u003e\");\n             dumpINodeFile(snapshotCopy);\n             out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_SNAPSHOT_COPY + \"\u003e\\n\");\n           }\n           if (f.getBlocksCount() \u003e 0) {\n             out.print(\"\u003c\" + INODE_SECTION_BLOCKS + \"\u003e\");\n             for (BlockProto b : f.getBlocksList()) {\n               out.print(\"\u003c\" + INODE_SECTION_BLOCK + \"\u003e\");\n               o(SECTION_ID, b.getBlockId())\n-                  .o(INODE_SECTION_GEMSTAMP, b.getGenStamp())\n+                  .o(INODE_SECTION_GENSTAMP, b.getGenStamp())\n                   .o(INODE_SECTION_NUM_BYTES, b.getNumBytes());\n               out.print(\"\u003c/\" + INODE_SECTION_BLOCK + \"\u003e\\n\");\n             }\n             out.print(\"\u003c/\" + INODE_SECTION_BLOCKS + \"\u003e\\n\");\n           }\n           out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_FILE_DIFF + \"\u003e\\n\");\n         }\n       }\n         break;\n       case DIRECTORYDIFF: {\n         for (int i \u003d 0; i \u003c e.getNumOfDiff(); ++i) {\n           out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_DIR_DIFF + \"\u003e\");\n           SnapshotDiffSection.DirectoryDiff d \u003d SnapshotDiffSection.DirectoryDiff\n               .parseDelimitedFrom(in);\n           o(SNAPSHOT_DIFF_SECTION_SNAPSHOT_ID, d.getSnapshotId())\n               .o(SNAPSHOT_DIFF_SECTION_CHILDREN_SIZE, d.getChildrenSize())\n               .o(SNAPSHOT_DIFF_SECTION_IS_SNAPSHOT_ROOT, d.getIsSnapshotRoot())\n               .o(SECTION_NAME, d.getName().toStringUtf8());\n           INodeDirectory snapshotCopy \u003d d.getSnapshotCopy();\n           if (snapshotCopy !\u003d null) {\n             out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_SNAPSHOT_COPY + \"\u003e\");\n             dumpINodeDirectory(snapshotCopy);\n             out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_SNAPSHOT_COPY + \"\u003e\\n\");\n           }\n           o(SNAPSHOT_DIFF_SECTION_CREATED_LIST_SIZE, d.getCreatedListSize());\n           for (long did : d.getDeletedINodeList()) {\n             o(SNAPSHOT_DIFF_SECTION_DELETED_INODE, did);\n           }\n           for (int dRefid : d.getDeletedINodeRefList()) {\n             o(SNAPSHOT_DIFF_SECTION_DELETED_INODE_REF, dRefid);\n           }\n           for (int j \u003d 0; j \u003c d.getCreatedListSize(); ++j) {\n             SnapshotDiffSection.CreatedListEntry ce \u003d SnapshotDiffSection.CreatedListEntry\n                 .parseDelimitedFrom(in);\n             out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_CREATED + \"\u003e\");\n             o(SECTION_NAME, ce.getName().toStringUtf8());\n             out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_CREATED + \"\u003e\\n\");\n           }\n           out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_DIR_DIFF + \"\u003e\\n\");\n         }\n         break;\n       }\n       default:\n         break;\n       }\n       switch (e.getType()) {\n       case FILEDIFF:\n         out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_FILE_DIFF_ENTRY + \"\u003e\");\n         break;\n       case DIRECTORYDIFF:\n         out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_DIR_DIFF_ENTRY + \"\u003e\");\n         break;\n       default:\n         throw new IOException(\"unknown DiffEntry type \" + e.getType());\n       }\n     }\n     out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_NAME + \"\u003e\\n\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void dumpSnapshotDiffSection(InputStream in) throws IOException {\n    out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_NAME + \"\u003e\");\n    while (true) {\n      SnapshotDiffSection.DiffEntry e \u003d SnapshotDiffSection.DiffEntry\n          .parseDelimitedFrom(in);\n      if (e \u003d\u003d null) {\n        break;\n      }\n      switch (e.getType()) {\n      case FILEDIFF:\n        out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_FILE_DIFF_ENTRY + \"\u003e\");\n        break;\n      case DIRECTORYDIFF:\n        out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_DIR_DIFF_ENTRY + \"\u003e\");\n        break;\n      default:\n        throw new IOException(\"unknown DiffEntry type \" + e.getType());\n      }\n      o(SNAPSHOT_DIFF_SECTION_INODE_ID, e.getInodeId());\n      o(SNAPSHOT_DIFF_SECTION_COUNT, e.getNumOfDiff());\n      switch (e.getType()) {\n      case FILEDIFF: {\n        for (int i \u003d 0; i \u003c e.getNumOfDiff(); ++i) {\n          out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_FILE_DIFF + \"\u003e\");\n          SnapshotDiffSection.FileDiff f \u003d SnapshotDiffSection.FileDiff\n              .parseDelimitedFrom(in);\n          o(SNAPSHOT_DIFF_SECTION_SNAPSHOT_ID, f.getSnapshotId())\n              .o(SNAPSHOT_DIFF_SECTION_SIZE, f.getFileSize())\n              .o(SECTION_NAME, f.getName().toStringUtf8());\n          INodeSection.INodeFile snapshotCopy \u003d f.getSnapshotCopy();\n          if (snapshotCopy !\u003d null) {\n            out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_SNAPSHOT_COPY + \"\u003e\");\n            dumpINodeFile(snapshotCopy);\n            out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_SNAPSHOT_COPY + \"\u003e\\n\");\n          }\n          if (f.getBlocksCount() \u003e 0) {\n            out.print(\"\u003c\" + INODE_SECTION_BLOCKS + \"\u003e\");\n            for (BlockProto b : f.getBlocksList()) {\n              out.print(\"\u003c\" + INODE_SECTION_BLOCK + \"\u003e\");\n              o(SECTION_ID, b.getBlockId())\n                  .o(INODE_SECTION_GENSTAMP, b.getGenStamp())\n                  .o(INODE_SECTION_NUM_BYTES, b.getNumBytes());\n              out.print(\"\u003c/\" + INODE_SECTION_BLOCK + \"\u003e\\n\");\n            }\n            out.print(\"\u003c/\" + INODE_SECTION_BLOCKS + \"\u003e\\n\");\n          }\n          out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_FILE_DIFF + \"\u003e\\n\");\n        }\n      }\n        break;\n      case DIRECTORYDIFF: {\n        for (int i \u003d 0; i \u003c e.getNumOfDiff(); ++i) {\n          out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_DIR_DIFF + \"\u003e\");\n          SnapshotDiffSection.DirectoryDiff d \u003d SnapshotDiffSection.DirectoryDiff\n              .parseDelimitedFrom(in);\n          o(SNAPSHOT_DIFF_SECTION_SNAPSHOT_ID, d.getSnapshotId())\n              .o(SNAPSHOT_DIFF_SECTION_CHILDREN_SIZE, d.getChildrenSize())\n              .o(SNAPSHOT_DIFF_SECTION_IS_SNAPSHOT_ROOT, d.getIsSnapshotRoot())\n              .o(SECTION_NAME, d.getName().toStringUtf8());\n          INodeDirectory snapshotCopy \u003d d.getSnapshotCopy();\n          if (snapshotCopy !\u003d null) {\n            out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_SNAPSHOT_COPY + \"\u003e\");\n            dumpINodeDirectory(snapshotCopy);\n            out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_SNAPSHOT_COPY + \"\u003e\\n\");\n          }\n          o(SNAPSHOT_DIFF_SECTION_CREATED_LIST_SIZE, d.getCreatedListSize());\n          for (long did : d.getDeletedINodeList()) {\n            o(SNAPSHOT_DIFF_SECTION_DELETED_INODE, did);\n          }\n          for (int dRefid : d.getDeletedINodeRefList()) {\n            o(SNAPSHOT_DIFF_SECTION_DELETED_INODE_REF, dRefid);\n          }\n          for (int j \u003d 0; j \u003c d.getCreatedListSize(); ++j) {\n            SnapshotDiffSection.CreatedListEntry ce \u003d SnapshotDiffSection.CreatedListEntry\n                .parseDelimitedFrom(in);\n            out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_CREATED + \"\u003e\");\n            o(SECTION_NAME, ce.getName().toStringUtf8());\n            out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_CREATED + \"\u003e\\n\");\n          }\n          out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_DIR_DIFF + \"\u003e\\n\");\n        }\n        break;\n      }\n      default:\n        break;\n      }\n      switch (e.getType()) {\n      case FILEDIFF:\n        out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_FILE_DIFF_ENTRY + \"\u003e\");\n        break;\n      case DIRECTORYDIFF:\n        out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_DIR_DIFF_ENTRY + \"\u003e\");\n        break;\n      default:\n        throw new IOException(\"unknown DiffEntry type \" + e.getType());\n      }\n    }\n    out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_NAME + \"\u003e\\n\");\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/PBImageXmlWriter.java",
      "extendedDetails": {}
    },
    "05391c1845639d4f01da8e5df966e2dc2682f2ca": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10506. OIV\u0027s ReverseXML processor cannot reconstruct some snapshot details. Contributed by Akira Ajisaka.\n",
      "commitDate": "25/02/17 2:38 PM",
      "commitName": "05391c1845639d4f01da8e5df966e2dc2682f2ca",
      "commitAuthor": "Wei-Chiu Chuang",
      "commitDateOld": "18/01/17 1:31 PM",
      "commitNameOld": "a2a5d7b5bca715835d92816e7b267b59f7270708",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 38.05,
      "commitsBetweenForRepo": 195,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,77 +1,99 @@\n   private void dumpSnapshotDiffSection(InputStream in) throws IOException {\n     out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_NAME + \"\u003e\");\n     while (true) {\n       SnapshotDiffSection.DiffEntry e \u003d SnapshotDiffSection.DiffEntry\n           .parseDelimitedFrom(in);\n       if (e \u003d\u003d null) {\n         break;\n       }\n       switch (e.getType()) {\n       case FILEDIFF:\n         out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_FILE_DIFF_ENTRY + \"\u003e\");\n         break;\n       case DIRECTORYDIFF:\n         out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_DIR_DIFF_ENTRY + \"\u003e\");\n         break;\n       default:\n         throw new IOException(\"unknown DiffEntry type \" + e.getType());\n       }\n       o(SNAPSHOT_DIFF_SECTION_INODE_ID, e.getInodeId());\n       o(SNAPSHOT_DIFF_SECTION_COUNT, e.getNumOfDiff());\n       switch (e.getType()) {\n       case FILEDIFF: {\n         for (int i \u003d 0; i \u003c e.getNumOfDiff(); ++i) {\n           out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_FILE_DIFF + \"\u003e\");\n           SnapshotDiffSection.FileDiff f \u003d SnapshotDiffSection.FileDiff\n               .parseDelimitedFrom(in);\n           o(SNAPSHOT_DIFF_SECTION_SNAPSHOT_ID, f.getSnapshotId())\n               .o(SNAPSHOT_DIFF_SECTION_SIZE, f.getFileSize())\n               .o(SECTION_NAME, f.getName().toStringUtf8());\n+          INodeSection.INodeFile snapshotCopy \u003d f.getSnapshotCopy();\n+          if (snapshotCopy !\u003d null) {\n+            out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_SNAPSHOT_COPY + \"\u003e\");\n+            dumpINodeFile(snapshotCopy);\n+            out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_SNAPSHOT_COPY + \"\u003e\\n\");\n+          }\n+          if (f.getBlocksCount() \u003e 0) {\n+            out.print(\"\u003c\" + INODE_SECTION_BLOCKS + \"\u003e\");\n+            for (BlockProto b : f.getBlocksList()) {\n+              out.print(\"\u003c\" + INODE_SECTION_BLOCK + \"\u003e\");\n+              o(SECTION_ID, b.getBlockId())\n+                  .o(INODE_SECTION_GEMSTAMP, b.getGenStamp())\n+                  .o(INODE_SECTION_NUM_BYTES, b.getNumBytes());\n+              out.print(\"\u003c/\" + INODE_SECTION_BLOCK + \"\u003e\\n\");\n+            }\n+            out.print(\"\u003c/\" + INODE_SECTION_BLOCKS + \"\u003e\\n\");\n+          }\n           out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_FILE_DIFF + \"\u003e\\n\");\n         }\n       }\n         break;\n       case DIRECTORYDIFF: {\n         for (int i \u003d 0; i \u003c e.getNumOfDiff(); ++i) {\n           out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_DIR_DIFF + \"\u003e\");\n           SnapshotDiffSection.DirectoryDiff d \u003d SnapshotDiffSection.DirectoryDiff\n               .parseDelimitedFrom(in);\n           o(SNAPSHOT_DIFF_SECTION_SNAPSHOT_ID, d.getSnapshotId())\n               .o(SNAPSHOT_DIFF_SECTION_CHILDREN_SIZE, d.getChildrenSize())\n               .o(SNAPSHOT_DIFF_SECTION_IS_SNAPSHOT_ROOT, d.getIsSnapshotRoot())\n-              .o(SECTION_NAME, d.getName().toStringUtf8())\n-              .o(SNAPSHOT_DIFF_SECTION_CREATED_LIST_SIZE,\n-                  d.getCreatedListSize());\n+              .o(SECTION_NAME, d.getName().toStringUtf8());\n+          INodeDirectory snapshotCopy \u003d d.getSnapshotCopy();\n+          if (snapshotCopy !\u003d null) {\n+            out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_SNAPSHOT_COPY + \"\u003e\");\n+            dumpINodeDirectory(snapshotCopy);\n+            out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_SNAPSHOT_COPY + \"\u003e\\n\");\n+          }\n+          o(SNAPSHOT_DIFF_SECTION_CREATED_LIST_SIZE, d.getCreatedListSize());\n           for (long did : d.getDeletedINodeList()) {\n             o(SNAPSHOT_DIFF_SECTION_DELETED_INODE, did);\n           }\n           for (int dRefid : d.getDeletedINodeRefList()) {\n             o(SNAPSHOT_DIFF_SECTION_DELETED_INODE_REF, dRefid);\n           }\n           for (int j \u003d 0; j \u003c d.getCreatedListSize(); ++j) {\n             SnapshotDiffSection.CreatedListEntry ce \u003d SnapshotDiffSection.CreatedListEntry\n                 .parseDelimitedFrom(in);\n             out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_CREATED + \"\u003e\");\n             o(SECTION_NAME, ce.getName().toStringUtf8());\n             out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_CREATED + \"\u003e\\n\");\n           }\n           out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_DIR_DIFF + \"\u003e\\n\");\n         }\n         break;\n       }\n       default:\n         break;\n       }\n       switch (e.getType()) {\n       case FILEDIFF:\n         out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_FILE_DIFF_ENTRY + \"\u003e\");\n         break;\n       case DIRECTORYDIFF:\n         out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_DIR_DIFF_ENTRY + \"\u003e\");\n         break;\n       default:\n         throw new IOException(\"unknown DiffEntry type \" + e.getType());\n       }\n     }\n     out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_NAME + \"\u003e\\n\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void dumpSnapshotDiffSection(InputStream in) throws IOException {\n    out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_NAME + \"\u003e\");\n    while (true) {\n      SnapshotDiffSection.DiffEntry e \u003d SnapshotDiffSection.DiffEntry\n          .parseDelimitedFrom(in);\n      if (e \u003d\u003d null) {\n        break;\n      }\n      switch (e.getType()) {\n      case FILEDIFF:\n        out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_FILE_DIFF_ENTRY + \"\u003e\");\n        break;\n      case DIRECTORYDIFF:\n        out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_DIR_DIFF_ENTRY + \"\u003e\");\n        break;\n      default:\n        throw new IOException(\"unknown DiffEntry type \" + e.getType());\n      }\n      o(SNAPSHOT_DIFF_SECTION_INODE_ID, e.getInodeId());\n      o(SNAPSHOT_DIFF_SECTION_COUNT, e.getNumOfDiff());\n      switch (e.getType()) {\n      case FILEDIFF: {\n        for (int i \u003d 0; i \u003c e.getNumOfDiff(); ++i) {\n          out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_FILE_DIFF + \"\u003e\");\n          SnapshotDiffSection.FileDiff f \u003d SnapshotDiffSection.FileDiff\n              .parseDelimitedFrom(in);\n          o(SNAPSHOT_DIFF_SECTION_SNAPSHOT_ID, f.getSnapshotId())\n              .o(SNAPSHOT_DIFF_SECTION_SIZE, f.getFileSize())\n              .o(SECTION_NAME, f.getName().toStringUtf8());\n          INodeSection.INodeFile snapshotCopy \u003d f.getSnapshotCopy();\n          if (snapshotCopy !\u003d null) {\n            out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_SNAPSHOT_COPY + \"\u003e\");\n            dumpINodeFile(snapshotCopy);\n            out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_SNAPSHOT_COPY + \"\u003e\\n\");\n          }\n          if (f.getBlocksCount() \u003e 0) {\n            out.print(\"\u003c\" + INODE_SECTION_BLOCKS + \"\u003e\");\n            for (BlockProto b : f.getBlocksList()) {\n              out.print(\"\u003c\" + INODE_SECTION_BLOCK + \"\u003e\");\n              o(SECTION_ID, b.getBlockId())\n                  .o(INODE_SECTION_GEMSTAMP, b.getGenStamp())\n                  .o(INODE_SECTION_NUM_BYTES, b.getNumBytes());\n              out.print(\"\u003c/\" + INODE_SECTION_BLOCK + \"\u003e\\n\");\n            }\n            out.print(\"\u003c/\" + INODE_SECTION_BLOCKS + \"\u003e\\n\");\n          }\n          out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_FILE_DIFF + \"\u003e\\n\");\n        }\n      }\n        break;\n      case DIRECTORYDIFF: {\n        for (int i \u003d 0; i \u003c e.getNumOfDiff(); ++i) {\n          out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_DIR_DIFF + \"\u003e\");\n          SnapshotDiffSection.DirectoryDiff d \u003d SnapshotDiffSection.DirectoryDiff\n              .parseDelimitedFrom(in);\n          o(SNAPSHOT_DIFF_SECTION_SNAPSHOT_ID, d.getSnapshotId())\n              .o(SNAPSHOT_DIFF_SECTION_CHILDREN_SIZE, d.getChildrenSize())\n              .o(SNAPSHOT_DIFF_SECTION_IS_SNAPSHOT_ROOT, d.getIsSnapshotRoot())\n              .o(SECTION_NAME, d.getName().toStringUtf8());\n          INodeDirectory snapshotCopy \u003d d.getSnapshotCopy();\n          if (snapshotCopy !\u003d null) {\n            out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_SNAPSHOT_COPY + \"\u003e\");\n            dumpINodeDirectory(snapshotCopy);\n            out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_SNAPSHOT_COPY + \"\u003e\\n\");\n          }\n          o(SNAPSHOT_DIFF_SECTION_CREATED_LIST_SIZE, d.getCreatedListSize());\n          for (long did : d.getDeletedINodeList()) {\n            o(SNAPSHOT_DIFF_SECTION_DELETED_INODE, did);\n          }\n          for (int dRefid : d.getDeletedINodeRefList()) {\n            o(SNAPSHOT_DIFF_SECTION_DELETED_INODE_REF, dRefid);\n          }\n          for (int j \u003d 0; j \u003c d.getCreatedListSize(); ++j) {\n            SnapshotDiffSection.CreatedListEntry ce \u003d SnapshotDiffSection.CreatedListEntry\n                .parseDelimitedFrom(in);\n            out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_CREATED + \"\u003e\");\n            o(SECTION_NAME, ce.getName().toStringUtf8());\n            out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_CREATED + \"\u003e\\n\");\n          }\n          out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_DIR_DIFF + \"\u003e\\n\");\n        }\n        break;\n      }\n      default:\n        break;\n      }\n      switch (e.getType()) {\n      case FILEDIFF:\n        out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_FILE_DIFF_ENTRY + \"\u003e\");\n        break;\n      case DIRECTORYDIFF:\n        out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_DIR_DIFF_ENTRY + \"\u003e\");\n        break;\n      default:\n        throw new IOException(\"unknown DiffEntry type \" + e.getType());\n      }\n    }\n    out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_NAME + \"\u003e\\n\");\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/PBImageXmlWriter.java",
      "extendedDetails": {}
    },
    "680716f31e120f4d3ee70b095e4db46c05b891d9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9951. Use string constants for XML tags in OfflineImageReconstructor (Lin Yiqun via cmccabe)\n",
      "commitDate": "21/03/16 11:40 AM",
      "commitName": "680716f31e120f4d3ee70b095e4db46c05b891d9",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "02/03/16 5:56 PM",
      "commitNameOld": "700b0e4019cf483f7532609711812150b8c44742",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 18.7,
      "commitsBetweenForRepo": 94,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,75 +1,77 @@\n   private void dumpSnapshotDiffSection(InputStream in) throws IOException {\n-    out.print(\"\u003cSnapshotDiffSection\u003e\");\n+    out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_NAME + \"\u003e\");\n     while (true) {\n       SnapshotDiffSection.DiffEntry e \u003d SnapshotDiffSection.DiffEntry\n           .parseDelimitedFrom(in);\n       if (e \u003d\u003d null) {\n         break;\n       }\n       switch (e.getType()) {\n       case FILEDIFF:\n-        out.print(\"\u003cfileDiffEntry\u003e\");\n+        out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_FILE_DIFF_ENTRY + \"\u003e\");\n         break;\n       case DIRECTORYDIFF:\n-        out.print(\"\u003cdirDiffEntry\u003e\");\n+        out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_DIR_DIFF_ENTRY + \"\u003e\");\n         break;\n       default:\n         throw new IOException(\"unknown DiffEntry type \" + e.getType());\n       }\n-      o(\"inodeId\", e.getInodeId());\n-      o(\"count\", e.getNumOfDiff());\n+      o(SNAPSHOT_DIFF_SECTION_INODE_ID, e.getInodeId());\n+      o(SNAPSHOT_DIFF_SECTION_COUNT, e.getNumOfDiff());\n       switch (e.getType()) {\n       case FILEDIFF: {\n         for (int i \u003d 0; i \u003c e.getNumOfDiff(); ++i) {\n-          out.print(\"\u003cfileDiff\u003e\");\n+          out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_FILE_DIFF + \"\u003e\");\n           SnapshotDiffSection.FileDiff f \u003d SnapshotDiffSection.FileDiff\n               .parseDelimitedFrom(in);\n-          o(\"snapshotId\", f.getSnapshotId()).o(\"size\", f.getFileSize()).o(\n-              \"name\", f.getName().toStringUtf8());\n-          out.print(\"\u003c/fileDiff\u003e\\n\");\n+          o(SNAPSHOT_DIFF_SECTION_SNAPSHOT_ID, f.getSnapshotId())\n+              .o(SNAPSHOT_DIFF_SECTION_SIZE, f.getFileSize())\n+              .o(SECTION_NAME, f.getName().toStringUtf8());\n+          out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_FILE_DIFF + \"\u003e\\n\");\n         }\n       }\n         break;\n       case DIRECTORYDIFF: {\n         for (int i \u003d 0; i \u003c e.getNumOfDiff(); ++i) {\n-          out.print(\"\u003cdirDiff\u003e\");\n+          out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_DIR_DIFF + \"\u003e\");\n           SnapshotDiffSection.DirectoryDiff d \u003d SnapshotDiffSection.DirectoryDiff\n               .parseDelimitedFrom(in);\n-          o(\"snapshotId\", d.getSnapshotId())\n-              .o(\"childrenSize\", d.getChildrenSize())\n-              .o(\"isSnapshotRoot\", d.getIsSnapshotRoot())\n-              .o(\"name\", d.getName().toStringUtf8())\n-              .o(\"createdListSize\", d.getCreatedListSize());\n+          o(SNAPSHOT_DIFF_SECTION_SNAPSHOT_ID, d.getSnapshotId())\n+              .o(SNAPSHOT_DIFF_SECTION_CHILDREN_SIZE, d.getChildrenSize())\n+              .o(SNAPSHOT_DIFF_SECTION_IS_SNAPSHOT_ROOT, d.getIsSnapshotRoot())\n+              .o(SECTION_NAME, d.getName().toStringUtf8())\n+              .o(SNAPSHOT_DIFF_SECTION_CREATED_LIST_SIZE,\n+                  d.getCreatedListSize());\n           for (long did : d.getDeletedINodeList()) {\n-            o(\"deletedInode\", did);\n+            o(SNAPSHOT_DIFF_SECTION_DELETED_INODE, did);\n           }\n           for (int dRefid : d.getDeletedINodeRefList()) {\n-            o(\"deletedInoderef\", dRefid);\n+            o(SNAPSHOT_DIFF_SECTION_DELETED_INODE_REF, dRefid);\n           }\n           for (int j \u003d 0; j \u003c d.getCreatedListSize(); ++j) {\n             SnapshotDiffSection.CreatedListEntry ce \u003d SnapshotDiffSection.CreatedListEntry\n                 .parseDelimitedFrom(in);\n-            out.print(\"\u003ccreated\u003e\");\n-            o(\"name\", ce.getName().toStringUtf8());\n-            out.print(\"\u003c/created\u003e\\n\");\n+            out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_CREATED + \"\u003e\");\n+            o(SECTION_NAME, ce.getName().toStringUtf8());\n+            out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_CREATED + \"\u003e\\n\");\n           }\n-          out.print(\"\u003c/dirDiff\u003e\\n\");\n+          out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_DIR_DIFF + \"\u003e\\n\");\n         }\n         break;\n       }\n       default:\n         break;\n       }\n       switch (e.getType()) {\n       case FILEDIFF:\n-        out.print(\"\u003c/fileDiffEntry\u003e\");\n+        out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_FILE_DIFF_ENTRY + \"\u003e\");\n         break;\n       case DIRECTORYDIFF:\n-        out.print(\"\u003c/dirDiffEntry\u003e\");\n+        out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_DIR_DIFF_ENTRY + \"\u003e\");\n         break;\n       default:\n         throw new IOException(\"unknown DiffEntry type \" + e.getType());\n       }\n     }\n-    out.print(\"\u003c/SnapshotDiffSection\u003e\\n\");\n+    out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_NAME + \"\u003e\\n\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void dumpSnapshotDiffSection(InputStream in) throws IOException {\n    out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_NAME + \"\u003e\");\n    while (true) {\n      SnapshotDiffSection.DiffEntry e \u003d SnapshotDiffSection.DiffEntry\n          .parseDelimitedFrom(in);\n      if (e \u003d\u003d null) {\n        break;\n      }\n      switch (e.getType()) {\n      case FILEDIFF:\n        out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_FILE_DIFF_ENTRY + \"\u003e\");\n        break;\n      case DIRECTORYDIFF:\n        out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_DIR_DIFF_ENTRY + \"\u003e\");\n        break;\n      default:\n        throw new IOException(\"unknown DiffEntry type \" + e.getType());\n      }\n      o(SNAPSHOT_DIFF_SECTION_INODE_ID, e.getInodeId());\n      o(SNAPSHOT_DIFF_SECTION_COUNT, e.getNumOfDiff());\n      switch (e.getType()) {\n      case FILEDIFF: {\n        for (int i \u003d 0; i \u003c e.getNumOfDiff(); ++i) {\n          out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_FILE_DIFF + \"\u003e\");\n          SnapshotDiffSection.FileDiff f \u003d SnapshotDiffSection.FileDiff\n              .parseDelimitedFrom(in);\n          o(SNAPSHOT_DIFF_SECTION_SNAPSHOT_ID, f.getSnapshotId())\n              .o(SNAPSHOT_DIFF_SECTION_SIZE, f.getFileSize())\n              .o(SECTION_NAME, f.getName().toStringUtf8());\n          out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_FILE_DIFF + \"\u003e\\n\");\n        }\n      }\n        break;\n      case DIRECTORYDIFF: {\n        for (int i \u003d 0; i \u003c e.getNumOfDiff(); ++i) {\n          out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_DIR_DIFF + \"\u003e\");\n          SnapshotDiffSection.DirectoryDiff d \u003d SnapshotDiffSection.DirectoryDiff\n              .parseDelimitedFrom(in);\n          o(SNAPSHOT_DIFF_SECTION_SNAPSHOT_ID, d.getSnapshotId())\n              .o(SNAPSHOT_DIFF_SECTION_CHILDREN_SIZE, d.getChildrenSize())\n              .o(SNAPSHOT_DIFF_SECTION_IS_SNAPSHOT_ROOT, d.getIsSnapshotRoot())\n              .o(SECTION_NAME, d.getName().toStringUtf8())\n              .o(SNAPSHOT_DIFF_SECTION_CREATED_LIST_SIZE,\n                  d.getCreatedListSize());\n          for (long did : d.getDeletedINodeList()) {\n            o(SNAPSHOT_DIFF_SECTION_DELETED_INODE, did);\n          }\n          for (int dRefid : d.getDeletedINodeRefList()) {\n            o(SNAPSHOT_DIFF_SECTION_DELETED_INODE_REF, dRefid);\n          }\n          for (int j \u003d 0; j \u003c d.getCreatedListSize(); ++j) {\n            SnapshotDiffSection.CreatedListEntry ce \u003d SnapshotDiffSection.CreatedListEntry\n                .parseDelimitedFrom(in);\n            out.print(\"\u003c\" + SNAPSHOT_DIFF_SECTION_CREATED + \"\u003e\");\n            o(SECTION_NAME, ce.getName().toStringUtf8());\n            out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_CREATED + \"\u003e\\n\");\n          }\n          out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_DIR_DIFF + \"\u003e\\n\");\n        }\n        break;\n      }\n      default:\n        break;\n      }\n      switch (e.getType()) {\n      case FILEDIFF:\n        out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_FILE_DIFF_ENTRY + \"\u003e\");\n        break;\n      case DIRECTORYDIFF:\n        out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_DIR_DIFF_ENTRY + \"\u003e\");\n        break;\n      default:\n        throw new IOException(\"unknown DiffEntry type \" + e.getType());\n      }\n    }\n    out.print(\"\u003c/\" + SNAPSHOT_DIFF_SECTION_NAME + \"\u003e\\n\");\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/PBImageXmlWriter.java",
      "extendedDetails": {}
    },
    "700b0e4019cf483f7532609711812150b8c44742": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9835. OIV: add ReverseXML processor which reconstructs an fsimage from an XML file (cmccabe)\n",
      "commitDate": "02/03/16 5:56 PM",
      "commitName": "700b0e4019cf483f7532609711812150b8c44742",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "21/10/15 2:58 PM",
      "commitNameOld": "a24c6e84205c684ef864b0fc5301dc07b3578351",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 133.17,
      "commitsBetweenForRepo": 905,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,75 @@\n   private void dumpSnapshotDiffSection(InputStream in) throws IOException {\n     out.print(\"\u003cSnapshotDiffSection\u003e\");\n     while (true) {\n       SnapshotDiffSection.DiffEntry e \u003d SnapshotDiffSection.DiffEntry\n           .parseDelimitedFrom(in);\n       if (e \u003d\u003d null) {\n         break;\n       }\n-      out.print(\"\u003cdiff\u003e\");\n-      o(\"inodeid\", e.getInodeId());\n+      switch (e.getType()) {\n+      case FILEDIFF:\n+        out.print(\"\u003cfileDiffEntry\u003e\");\n+        break;\n+      case DIRECTORYDIFF:\n+        out.print(\"\u003cdirDiffEntry\u003e\");\n+        break;\n+      default:\n+        throw new IOException(\"unknown DiffEntry type \" + e.getType());\n+      }\n+      o(\"inodeId\", e.getInodeId());\n+      o(\"count\", e.getNumOfDiff());\n       switch (e.getType()) {\n       case FILEDIFF: {\n         for (int i \u003d 0; i \u003c e.getNumOfDiff(); ++i) {\n-          out.print(\"\u003cfilediff\u003e\");\n+          out.print(\"\u003cfileDiff\u003e\");\n           SnapshotDiffSection.FileDiff f \u003d SnapshotDiffSection.FileDiff\n               .parseDelimitedFrom(in);\n           o(\"snapshotId\", f.getSnapshotId()).o(\"size\", f.getFileSize()).o(\n               \"name\", f.getName().toStringUtf8());\n-          out.print(\"\u003c/filediff\u003e\\n\");\n+          out.print(\"\u003c/fileDiff\u003e\\n\");\n         }\n       }\n         break;\n       case DIRECTORYDIFF: {\n         for (int i \u003d 0; i \u003c e.getNumOfDiff(); ++i) {\n-          out.print(\"\u003cdirdiff\u003e\");\n+          out.print(\"\u003cdirDiff\u003e\");\n           SnapshotDiffSection.DirectoryDiff d \u003d SnapshotDiffSection.DirectoryDiff\n               .parseDelimitedFrom(in);\n           o(\"snapshotId\", d.getSnapshotId())\n-              .o(\"isSnapshotroot\", d.getIsSnapshotRoot())\n               .o(\"childrenSize\", d.getChildrenSize())\n-              .o(\"name\", d.getName().toStringUtf8());\n-\n+              .o(\"isSnapshotRoot\", d.getIsSnapshotRoot())\n+              .o(\"name\", d.getName().toStringUtf8())\n+              .o(\"createdListSize\", d.getCreatedListSize());\n+          for (long did : d.getDeletedINodeList()) {\n+            o(\"deletedInode\", did);\n+          }\n+          for (int dRefid : d.getDeletedINodeRefList()) {\n+            o(\"deletedInoderef\", dRefid);\n+          }\n           for (int j \u003d 0; j \u003c d.getCreatedListSize(); ++j) {\n             SnapshotDiffSection.CreatedListEntry ce \u003d SnapshotDiffSection.CreatedListEntry\n                 .parseDelimitedFrom(in);\n             out.print(\"\u003ccreated\u003e\");\n             o(\"name\", ce.getName().toStringUtf8());\n             out.print(\"\u003c/created\u003e\\n\");\n           }\n-          for (long did : d.getDeletedINodeList()) {\n-            out.print(\"\u003cdeleted\u003e\");\n-            o(\"inode\", did);\n-            out.print(\"\u003c/deleted\u003e\\n\");\n-          }\n-          for (int dRefid : d.getDeletedINodeRefList()) {\n-            out.print(\"\u003cdeleted\u003e\");\n-            o(\"inodereference-index\", dRefid);\n-            out.print(\"\u003c/deleted\u003e\\n\");\n-          }\n-          out.print(\"\u003c/dirdiff\u003e\\n\");\n+          out.print(\"\u003c/dirDiff\u003e\\n\");\n         }\n-      }\n         break;\n+      }\n       default:\n         break;\n       }\n-      out.print(\"\u003c/diff\u003e\");\n+      switch (e.getType()) {\n+      case FILEDIFF:\n+        out.print(\"\u003c/fileDiffEntry\u003e\");\n+        break;\n+      case DIRECTORYDIFF:\n+        out.print(\"\u003c/dirDiffEntry\u003e\");\n+        break;\n+      default:\n+        throw new IOException(\"unknown DiffEntry type \" + e.getType());\n+      }\n     }\n     out.print(\"\u003c/SnapshotDiffSection\u003e\\n\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void dumpSnapshotDiffSection(InputStream in) throws IOException {\n    out.print(\"\u003cSnapshotDiffSection\u003e\");\n    while (true) {\n      SnapshotDiffSection.DiffEntry e \u003d SnapshotDiffSection.DiffEntry\n          .parseDelimitedFrom(in);\n      if (e \u003d\u003d null) {\n        break;\n      }\n      switch (e.getType()) {\n      case FILEDIFF:\n        out.print(\"\u003cfileDiffEntry\u003e\");\n        break;\n      case DIRECTORYDIFF:\n        out.print(\"\u003cdirDiffEntry\u003e\");\n        break;\n      default:\n        throw new IOException(\"unknown DiffEntry type \" + e.getType());\n      }\n      o(\"inodeId\", e.getInodeId());\n      o(\"count\", e.getNumOfDiff());\n      switch (e.getType()) {\n      case FILEDIFF: {\n        for (int i \u003d 0; i \u003c e.getNumOfDiff(); ++i) {\n          out.print(\"\u003cfileDiff\u003e\");\n          SnapshotDiffSection.FileDiff f \u003d SnapshotDiffSection.FileDiff\n              .parseDelimitedFrom(in);\n          o(\"snapshotId\", f.getSnapshotId()).o(\"size\", f.getFileSize()).o(\n              \"name\", f.getName().toStringUtf8());\n          out.print(\"\u003c/fileDiff\u003e\\n\");\n        }\n      }\n        break;\n      case DIRECTORYDIFF: {\n        for (int i \u003d 0; i \u003c e.getNumOfDiff(); ++i) {\n          out.print(\"\u003cdirDiff\u003e\");\n          SnapshotDiffSection.DirectoryDiff d \u003d SnapshotDiffSection.DirectoryDiff\n              .parseDelimitedFrom(in);\n          o(\"snapshotId\", d.getSnapshotId())\n              .o(\"childrenSize\", d.getChildrenSize())\n              .o(\"isSnapshotRoot\", d.getIsSnapshotRoot())\n              .o(\"name\", d.getName().toStringUtf8())\n              .o(\"createdListSize\", d.getCreatedListSize());\n          for (long did : d.getDeletedINodeList()) {\n            o(\"deletedInode\", did);\n          }\n          for (int dRefid : d.getDeletedINodeRefList()) {\n            o(\"deletedInoderef\", dRefid);\n          }\n          for (int j \u003d 0; j \u003c d.getCreatedListSize(); ++j) {\n            SnapshotDiffSection.CreatedListEntry ce \u003d SnapshotDiffSection.CreatedListEntry\n                .parseDelimitedFrom(in);\n            out.print(\"\u003ccreated\u003e\");\n            o(\"name\", ce.getName().toStringUtf8());\n            out.print(\"\u003c/created\u003e\\n\");\n          }\n          out.print(\"\u003c/dirDiff\u003e\\n\");\n        }\n        break;\n      }\n      default:\n        break;\n      }\n      switch (e.getType()) {\n      case FILEDIFF:\n        out.print(\"\u003c/fileDiffEntry\u003e\");\n        break;\n      case DIRECTORYDIFF:\n        out.print(\"\u003c/dirDiffEntry\u003e\");\n        break;\n      default:\n        throw new IOException(\"unknown DiffEntry type \" + e.getType());\n      }\n    }\n    out.print(\"\u003c/SnapshotDiffSection\u003e\\n\");\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/PBImageXmlWriter.java",
      "extendedDetails": {}
    },
    "4f8a487fcd3c5d324b0bb03157f404fb127e21e8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5981. loadGenerator exit code is not reliable. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1570468 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/02/14 10:39 PM",
      "commitName": "4f8a487fcd3c5d324b0bb03157f404fb127e21e8",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "20/02/14 8:09 AM",
      "commitNameOld": "b23f6cc1f2dd779a683bd452b5ca014848a9b782",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 0.6,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,60 @@\n   private void dumpSnapshotDiffSection(InputStream in) throws IOException {\n     out.print(\"\u003cSnapshotDiffSection\u003e\");\n     while (true) {\n       SnapshotDiffSection.DiffEntry e \u003d SnapshotDiffSection.DiffEntry\n           .parseDelimitedFrom(in);\n       if (e \u003d\u003d null) {\n         break;\n       }\n       out.print(\"\u003cdiff\u003e\");\n       o(\"inodeid\", e.getInodeId());\n       switch (e.getType()) {\n       case FILEDIFF: {\n         for (int i \u003d 0; i \u003c e.getNumOfDiff(); ++i) {\n           out.print(\"\u003cfilediff\u003e\");\n           SnapshotDiffSection.FileDiff f \u003d SnapshotDiffSection.FileDiff\n               .parseDelimitedFrom(in);\n           o(\"snapshotId\", f.getSnapshotId()).o(\"size\", f.getFileSize()).o(\n               \"name\", f.getName().toStringUtf8());\n           out.print(\"\u003c/filediff\u003e\\n\");\n         }\n       }\n         break;\n       case DIRECTORYDIFF: {\n         for (int i \u003d 0; i \u003c e.getNumOfDiff(); ++i) {\n           out.print(\"\u003cdirdiff\u003e\");\n           SnapshotDiffSection.DirectoryDiff d \u003d SnapshotDiffSection.DirectoryDiff\n               .parseDelimitedFrom(in);\n           o(\"snapshotId\", d.getSnapshotId())\n               .o(\"isSnapshotroot\", d.getIsSnapshotRoot())\n               .o(\"childrenSize\", d.getChildrenSize())\n               .o(\"name\", d.getName().toStringUtf8());\n \n           for (int j \u003d 0; j \u003c d.getCreatedListSize(); ++j) {\n             SnapshotDiffSection.CreatedListEntry ce \u003d SnapshotDiffSection.CreatedListEntry\n                 .parseDelimitedFrom(in);\n             out.print(\"\u003ccreated\u003e\");\n             o(\"name\", ce.getName().toStringUtf8());\n             out.print(\"\u003c/created\u003e\\n\");\n           }\n           for (long did : d.getDeletedINodeList()) {\n             out.print(\"\u003cdeleted\u003e\");\n             o(\"inode\", did);\n             out.print(\"\u003c/deleted\u003e\\n\");\n           }\n           for (int dRefid : d.getDeletedINodeRefList()) {\n             out.print(\"\u003cdeleted\u003e\");\n             o(\"inodereference-index\", dRefid);\n             out.print(\"\u003c/deleted\u003e\\n\");\n           }\n           out.print(\"\u003c/dirdiff\u003e\\n\");\n         }\n       }\n         break;\n       default:\n         break;\n       }\n       out.print(\"\u003c/diff\u003e\");\n     }\n-    out.print(\"\u003cSnapshotDiffSection\u003e\\n\");\n+    out.print(\"\u003c/SnapshotDiffSection\u003e\\n\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void dumpSnapshotDiffSection(InputStream in) throws IOException {\n    out.print(\"\u003cSnapshotDiffSection\u003e\");\n    while (true) {\n      SnapshotDiffSection.DiffEntry e \u003d SnapshotDiffSection.DiffEntry\n          .parseDelimitedFrom(in);\n      if (e \u003d\u003d null) {\n        break;\n      }\n      out.print(\"\u003cdiff\u003e\");\n      o(\"inodeid\", e.getInodeId());\n      switch (e.getType()) {\n      case FILEDIFF: {\n        for (int i \u003d 0; i \u003c e.getNumOfDiff(); ++i) {\n          out.print(\"\u003cfilediff\u003e\");\n          SnapshotDiffSection.FileDiff f \u003d SnapshotDiffSection.FileDiff\n              .parseDelimitedFrom(in);\n          o(\"snapshotId\", f.getSnapshotId()).o(\"size\", f.getFileSize()).o(\n              \"name\", f.getName().toStringUtf8());\n          out.print(\"\u003c/filediff\u003e\\n\");\n        }\n      }\n        break;\n      case DIRECTORYDIFF: {\n        for (int i \u003d 0; i \u003c e.getNumOfDiff(); ++i) {\n          out.print(\"\u003cdirdiff\u003e\");\n          SnapshotDiffSection.DirectoryDiff d \u003d SnapshotDiffSection.DirectoryDiff\n              .parseDelimitedFrom(in);\n          o(\"snapshotId\", d.getSnapshotId())\n              .o(\"isSnapshotroot\", d.getIsSnapshotRoot())\n              .o(\"childrenSize\", d.getChildrenSize())\n              .o(\"name\", d.getName().toStringUtf8());\n\n          for (int j \u003d 0; j \u003c d.getCreatedListSize(); ++j) {\n            SnapshotDiffSection.CreatedListEntry ce \u003d SnapshotDiffSection.CreatedListEntry\n                .parseDelimitedFrom(in);\n            out.print(\"\u003ccreated\u003e\");\n            o(\"name\", ce.getName().toStringUtf8());\n            out.print(\"\u003c/created\u003e\\n\");\n          }\n          for (long did : d.getDeletedINodeList()) {\n            out.print(\"\u003cdeleted\u003e\");\n            o(\"inode\", did);\n            out.print(\"\u003c/deleted\u003e\\n\");\n          }\n          for (int dRefid : d.getDeletedINodeRefList()) {\n            out.print(\"\u003cdeleted\u003e\");\n            o(\"inodereference-index\", dRefid);\n            out.print(\"\u003c/deleted\u003e\\n\");\n          }\n          out.print(\"\u003c/dirdiff\u003e\\n\");\n        }\n      }\n        break;\n      default:\n        break;\n      }\n      out.print(\"\u003c/diff\u003e\");\n    }\n    out.print(\"\u003c/SnapshotDiffSection\u003e\\n\");\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/PBImageXmlWriter.java",
      "extendedDetails": {}
    },
    "2624b20291629b4565ea45590b66f2c38f96df67": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5847. Consolidate INodeReference into a separate section. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1567812 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/02/14 4:00 PM",
      "commitName": "2624b20291629b4565ea45590b66f2c38f96df67",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "09/02/14 11:18 AM",
      "commitNameOld": "a2edb11b68ae01a44092cb14ac2717a6aad93305",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 3.2,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,60 @@\n   private void dumpSnapshotDiffSection(InputStream in) throws IOException {\n     out.print(\"\u003cSnapshotDiffSection\u003e\");\n     while (true) {\n       SnapshotDiffSection.DiffEntry e \u003d SnapshotDiffSection.DiffEntry\n           .parseDelimitedFrom(in);\n       if (e \u003d\u003d null) {\n         break;\n       }\n       out.print(\"\u003cdiff\u003e\");\n       o(\"inodeid\", e.getInodeId());\n       switch (e.getType()) {\n       case FILEDIFF: {\n         for (int i \u003d 0; i \u003c e.getNumOfDiff(); ++i) {\n           out.print(\"\u003cfilediff\u003e\");\n           SnapshotDiffSection.FileDiff f \u003d SnapshotDiffSection.FileDiff\n               .parseDelimitedFrom(in);\n           o(\"snapshotId\", f.getSnapshotId()).o(\"size\", f.getFileSize()).o(\n               \"name\", f.getName().toStringUtf8());\n           out.print(\"\u003c/filediff\u003e\\n\");\n         }\n       }\n         break;\n       case DIRECTORYDIFF: {\n         for (int i \u003d 0; i \u003c e.getNumOfDiff(); ++i) {\n           out.print(\"\u003cdirdiff\u003e\");\n           SnapshotDiffSection.DirectoryDiff d \u003d SnapshotDiffSection.DirectoryDiff\n               .parseDelimitedFrom(in);\n           o(\"snapshotId\", d.getSnapshotId())\n               .o(\"isSnapshotroot\", d.getIsSnapshotRoot())\n               .o(\"childrenSize\", d.getChildrenSize())\n               .o(\"name\", d.getName().toStringUtf8());\n \n           for (int j \u003d 0; j \u003c d.getCreatedListSize(); ++j) {\n             SnapshotDiffSection.CreatedListEntry ce \u003d SnapshotDiffSection.CreatedListEntry\n                 .parseDelimitedFrom(in);\n             out.print(\"\u003ccreated\u003e\");\n             o(\"name\", ce.getName().toStringUtf8());\n             out.print(\"\u003c/created\u003e\\n\");\n           }\n-          for (int j \u003d 0; j \u003c d.getNumOfDeletedRef(); ++j) {\n-            INodeSection.INodeReference r \u003d INodeSection.INodeReference\n-                .parseDelimitedFrom(in);\n-            dumpINodeReference(r);\n+          for (long did : d.getDeletedINodeList()) {\n+            out.print(\"\u003cdeleted\u003e\");\n+            o(\"inode\", did);\n+            out.print(\"\u003c/deleted\u003e\\n\");\n+          }\n+          for (int dRefid : d.getDeletedINodeRefList()) {\n+            out.print(\"\u003cdeleted\u003e\");\n+            o(\"inodereference-index\", dRefid);\n+            out.print(\"\u003c/deleted\u003e\\n\");\n           }\n           out.print(\"\u003c/dirdiff\u003e\\n\");\n         }\n       }\n         break;\n       default:\n         break;\n       }\n       out.print(\"\u003c/diff\u003e\");\n     }\n     out.print(\"\u003cSnapshotDiffSection\u003e\\n\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void dumpSnapshotDiffSection(InputStream in) throws IOException {\n    out.print(\"\u003cSnapshotDiffSection\u003e\");\n    while (true) {\n      SnapshotDiffSection.DiffEntry e \u003d SnapshotDiffSection.DiffEntry\n          .parseDelimitedFrom(in);\n      if (e \u003d\u003d null) {\n        break;\n      }\n      out.print(\"\u003cdiff\u003e\");\n      o(\"inodeid\", e.getInodeId());\n      switch (e.getType()) {\n      case FILEDIFF: {\n        for (int i \u003d 0; i \u003c e.getNumOfDiff(); ++i) {\n          out.print(\"\u003cfilediff\u003e\");\n          SnapshotDiffSection.FileDiff f \u003d SnapshotDiffSection.FileDiff\n              .parseDelimitedFrom(in);\n          o(\"snapshotId\", f.getSnapshotId()).o(\"size\", f.getFileSize()).o(\n              \"name\", f.getName().toStringUtf8());\n          out.print(\"\u003c/filediff\u003e\\n\");\n        }\n      }\n        break;\n      case DIRECTORYDIFF: {\n        for (int i \u003d 0; i \u003c e.getNumOfDiff(); ++i) {\n          out.print(\"\u003cdirdiff\u003e\");\n          SnapshotDiffSection.DirectoryDiff d \u003d SnapshotDiffSection.DirectoryDiff\n              .parseDelimitedFrom(in);\n          o(\"snapshotId\", d.getSnapshotId())\n              .o(\"isSnapshotroot\", d.getIsSnapshotRoot())\n              .o(\"childrenSize\", d.getChildrenSize())\n              .o(\"name\", d.getName().toStringUtf8());\n\n          for (int j \u003d 0; j \u003c d.getCreatedListSize(); ++j) {\n            SnapshotDiffSection.CreatedListEntry ce \u003d SnapshotDiffSection.CreatedListEntry\n                .parseDelimitedFrom(in);\n            out.print(\"\u003ccreated\u003e\");\n            o(\"name\", ce.getName().toStringUtf8());\n            out.print(\"\u003c/created\u003e\\n\");\n          }\n          for (long did : d.getDeletedINodeList()) {\n            out.print(\"\u003cdeleted\u003e\");\n            o(\"inode\", did);\n            out.print(\"\u003c/deleted\u003e\\n\");\n          }\n          for (int dRefid : d.getDeletedINodeRefList()) {\n            out.print(\"\u003cdeleted\u003e\");\n            o(\"inodereference-index\", dRefid);\n            out.print(\"\u003c/deleted\u003e\\n\");\n          }\n          out.print(\"\u003c/dirdiff\u003e\\n\");\n        }\n      }\n        break;\n      default:\n        break;\n      }\n      out.print(\"\u003c/diff\u003e\");\n    }\n    out.print(\"\u003cSnapshotDiffSection\u003e\\n\");\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/PBImageXmlWriter.java",
      "extendedDetails": {}
    },
    "a2edb11b68ae01a44092cb14ac2717a6aad93305": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5698. Use protobuf to serialize / deserialize FSImage. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1566359 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/02/14 11:18 AM",
      "commitName": "a2edb11b68ae01a44092cb14ac2717a6aad93305",
      "commitAuthor": "Jing Zhao",
      "diff": "@@ -0,0 +1,55 @@\n+  private void dumpSnapshotDiffSection(InputStream in) throws IOException {\n+    out.print(\"\u003cSnapshotDiffSection\u003e\");\n+    while (true) {\n+      SnapshotDiffSection.DiffEntry e \u003d SnapshotDiffSection.DiffEntry\n+          .parseDelimitedFrom(in);\n+      if (e \u003d\u003d null) {\n+        break;\n+      }\n+      out.print(\"\u003cdiff\u003e\");\n+      o(\"inodeid\", e.getInodeId());\n+      switch (e.getType()) {\n+      case FILEDIFF: {\n+        for (int i \u003d 0; i \u003c e.getNumOfDiff(); ++i) {\n+          out.print(\"\u003cfilediff\u003e\");\n+          SnapshotDiffSection.FileDiff f \u003d SnapshotDiffSection.FileDiff\n+              .parseDelimitedFrom(in);\n+          o(\"snapshotId\", f.getSnapshotId()).o(\"size\", f.getFileSize()).o(\n+              \"name\", f.getName().toStringUtf8());\n+          out.print(\"\u003c/filediff\u003e\\n\");\n+        }\n+      }\n+        break;\n+      case DIRECTORYDIFF: {\n+        for (int i \u003d 0; i \u003c e.getNumOfDiff(); ++i) {\n+          out.print(\"\u003cdirdiff\u003e\");\n+          SnapshotDiffSection.DirectoryDiff d \u003d SnapshotDiffSection.DirectoryDiff\n+              .parseDelimitedFrom(in);\n+          o(\"snapshotId\", d.getSnapshotId())\n+              .o(\"isSnapshotroot\", d.getIsSnapshotRoot())\n+              .o(\"childrenSize\", d.getChildrenSize())\n+              .o(\"name\", d.getName().toStringUtf8());\n+\n+          for (int j \u003d 0; j \u003c d.getCreatedListSize(); ++j) {\n+            SnapshotDiffSection.CreatedListEntry ce \u003d SnapshotDiffSection.CreatedListEntry\n+                .parseDelimitedFrom(in);\n+            out.print(\"\u003ccreated\u003e\");\n+            o(\"name\", ce.getName().toStringUtf8());\n+            out.print(\"\u003c/created\u003e\\n\");\n+          }\n+          for (int j \u003d 0; j \u003c d.getNumOfDeletedRef(); ++j) {\n+            INodeSection.INodeReference r \u003d INodeSection.INodeReference\n+                .parseDelimitedFrom(in);\n+            dumpINodeReference(r);\n+          }\n+          out.print(\"\u003c/dirdiff\u003e\\n\");\n+        }\n+      }\n+        break;\n+      default:\n+        break;\n+      }\n+      out.print(\"\u003c/diff\u003e\");\n+    }\n+    out.print(\"\u003cSnapshotDiffSection\u003e\\n\");\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void dumpSnapshotDiffSection(InputStream in) throws IOException {\n    out.print(\"\u003cSnapshotDiffSection\u003e\");\n    while (true) {\n      SnapshotDiffSection.DiffEntry e \u003d SnapshotDiffSection.DiffEntry\n          .parseDelimitedFrom(in);\n      if (e \u003d\u003d null) {\n        break;\n      }\n      out.print(\"\u003cdiff\u003e\");\n      o(\"inodeid\", e.getInodeId());\n      switch (e.getType()) {\n      case FILEDIFF: {\n        for (int i \u003d 0; i \u003c e.getNumOfDiff(); ++i) {\n          out.print(\"\u003cfilediff\u003e\");\n          SnapshotDiffSection.FileDiff f \u003d SnapshotDiffSection.FileDiff\n              .parseDelimitedFrom(in);\n          o(\"snapshotId\", f.getSnapshotId()).o(\"size\", f.getFileSize()).o(\n              \"name\", f.getName().toStringUtf8());\n          out.print(\"\u003c/filediff\u003e\\n\");\n        }\n      }\n        break;\n      case DIRECTORYDIFF: {\n        for (int i \u003d 0; i \u003c e.getNumOfDiff(); ++i) {\n          out.print(\"\u003cdirdiff\u003e\");\n          SnapshotDiffSection.DirectoryDiff d \u003d SnapshotDiffSection.DirectoryDiff\n              .parseDelimitedFrom(in);\n          o(\"snapshotId\", d.getSnapshotId())\n              .o(\"isSnapshotroot\", d.getIsSnapshotRoot())\n              .o(\"childrenSize\", d.getChildrenSize())\n              .o(\"name\", d.getName().toStringUtf8());\n\n          for (int j \u003d 0; j \u003c d.getCreatedListSize(); ++j) {\n            SnapshotDiffSection.CreatedListEntry ce \u003d SnapshotDiffSection.CreatedListEntry\n                .parseDelimitedFrom(in);\n            out.print(\"\u003ccreated\u003e\");\n            o(\"name\", ce.getName().toStringUtf8());\n            out.print(\"\u003c/created\u003e\\n\");\n          }\n          for (int j \u003d 0; j \u003c d.getNumOfDeletedRef(); ++j) {\n            INodeSection.INodeReference r \u003d INodeSection.INodeReference\n                .parseDelimitedFrom(in);\n            dumpINodeReference(r);\n          }\n          out.print(\"\u003c/dirdiff\u003e\\n\");\n        }\n      }\n        break;\n      default:\n        break;\n      }\n      out.print(\"\u003c/diff\u003e\");\n    }\n    out.print(\"\u003cSnapshotDiffSection\u003e\\n\");\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/PBImageXmlWriter.java"
    }
  }
}