{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ParentQueue.java",
  "functionName": "deriveCapacityFromAbsoluteConfigurations",
  "functionId": "deriveCapacityFromAbsoluteConfigurations___label-String__clusterResource-Resource__rc-ResourceCalculator__childQueue-CSQueue",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
  "functionStartLine": 1085,
  "functionEndLine": 1140,
  "numCommitsSeen": 85,
  "timeTaken": 3982,
  "changeHistory": [
    "2fe122e322afd35dfae6e45b3e7fdaddd20a411f",
    "cdb2107066a2d8557270888c0a9a75f29a6853bf",
    "689d2e61058b5f719c6cbe9897a72b19b44a29a3",
    "e65ca92fb6897a3004a235d7b69e308399189aae",
    "d52627a7cbddfd981db973e223aefffde1ebf82d"
  ],
  "changeHistoryShort": {
    "2fe122e322afd35dfae6e45b3e7fdaddd20a411f": "Ybodychange",
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": "Ybodychange",
    "689d2e61058b5f719c6cbe9897a72b19b44a29a3": "Ybodychange",
    "e65ca92fb6897a3004a235d7b69e308399189aae": "Ybodychange",
    "d52627a7cbddfd981db973e223aefffde1ebf82d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2fe122e322afd35dfae6e45b3e7fdaddd20a411f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10154. CS Dynamic Queues cannot be configured with absolute resources. Contributed by Manikandan R.\n",
      "commitDate": "17/04/20 6:21 AM",
      "commitName": "2fe122e322afd35dfae6e45b3e7fdaddd20a411f",
      "commitAuthor": "Sunil G",
      "commitDateOld": "25/03/20 4:20 AM",
      "commitNameOld": "cdb2107066a2d8557270888c0a9a75f29a6853bf",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 23.08,
      "commitsBetweenForRepo": 72,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,56 @@\n   private void deriveCapacityFromAbsoluteConfigurations(String label,\n       Resource clusterResource, ResourceCalculator rc, CSQueue childQueue) {\n \n     /*\n      * In case when queues are configured with absolute resources, it is better\n      * to update capacity/max-capacity etc w.r.t absolute resource as well. In\n      * case of computation, these values wont be used any more. However for\n      * metrics and UI, its better these values are pre-computed here itself.\n      */\n \n     // 1. Update capacity as a float based on parent\u0027s minResource\n     childQueue.getQueueCapacities().setCapacity(label,\n         rc.divide(clusterResource,\n             childQueue.getQueueResourceQuotas().getEffectiveMinResource(label),\n             getQueueResourceQuotas().getEffectiveMinResource(label)));\n \n     // 2. Update max-capacity as a float based on parent\u0027s maxResource\n     childQueue.getQueueCapacities().setMaximumCapacity(label,\n         rc.divide(clusterResource,\n             childQueue.getQueueResourceQuotas().getEffectiveMaxResource(label),\n             getQueueResourceQuotas().getEffectiveMaxResource(label)));\n \n     // 3. Update absolute capacity as a float based on parent\u0027s minResource and\n     // cluster resource.\n     childQueue.getQueueCapacities().setAbsoluteCapacity(label,\n         childQueue.getQueueCapacities().getCapacity(label)\n             * getQueueCapacities().getAbsoluteCapacity(label));\n \n     // 4. Update absolute max-capacity as a float based on parent\u0027s maxResource\n     // and cluster resource.\n     childQueue.getQueueCapacities().setAbsoluteMaximumCapacity(label,\n         childQueue.getQueueCapacities().getMaximumCapacity(label)\n             * getQueueCapacities().getAbsoluteMaximumCapacity(label));\n \n     // Re-visit max applications for a queue based on absolute capacity if\n     // needed.\n     if (childQueue instanceof LeafQueue) {\n       LeafQueue leafQueue \u003d (LeafQueue) childQueue;\n       CapacitySchedulerConfiguration conf \u003d csContext.getConfiguration();\n       int maxApplications \u003d (int) (conf.getMaximumSystemApplications()\n           * childQueue.getQueueCapacities().getAbsoluteCapacity(label));\n       leafQueue.setMaxApplications(maxApplications);\n \n       int maxApplicationsPerUser \u003d Math.min(maxApplications,\n           (int) (maxApplications\n               * (leafQueue.getUsersManager().getUserLimit() / 100.0f)\n               * leafQueue.getUsersManager().getUserLimitFactor()));\n       leafQueue.setMaxApplicationsPerUser(maxApplicationsPerUser);\n       LOG.info(\"LeafQueue:\" + leafQueue.getQueuePath() + \", maxApplications\u003d\"\n           + maxApplications + \", maxApplicationsPerUser\u003d\"\n           + maxApplicationsPerUser + \", Abs Cap:\"\n-          + childQueue.getQueueCapacities().getAbsoluteCapacity(label));\n+          + childQueue.getQueueCapacities().getAbsoluteCapacity(label) + \", Cap: \"\n+          + childQueue.getQueueCapacities().getCapacity(label) + \", MaxCap : \"\n+          + childQueue.getQueueCapacities().getMaximumCapacity(label));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void deriveCapacityFromAbsoluteConfigurations(String label,\n      Resource clusterResource, ResourceCalculator rc, CSQueue childQueue) {\n\n    /*\n     * In case when queues are configured with absolute resources, it is better\n     * to update capacity/max-capacity etc w.r.t absolute resource as well. In\n     * case of computation, these values wont be used any more. However for\n     * metrics and UI, its better these values are pre-computed here itself.\n     */\n\n    // 1. Update capacity as a float based on parent\u0027s minResource\n    childQueue.getQueueCapacities().setCapacity(label,\n        rc.divide(clusterResource,\n            childQueue.getQueueResourceQuotas().getEffectiveMinResource(label),\n            getQueueResourceQuotas().getEffectiveMinResource(label)));\n\n    // 2. Update max-capacity as a float based on parent\u0027s maxResource\n    childQueue.getQueueCapacities().setMaximumCapacity(label,\n        rc.divide(clusterResource,\n            childQueue.getQueueResourceQuotas().getEffectiveMaxResource(label),\n            getQueueResourceQuotas().getEffectiveMaxResource(label)));\n\n    // 3. Update absolute capacity as a float based on parent\u0027s minResource and\n    // cluster resource.\n    childQueue.getQueueCapacities().setAbsoluteCapacity(label,\n        childQueue.getQueueCapacities().getCapacity(label)\n            * getQueueCapacities().getAbsoluteCapacity(label));\n\n    // 4. Update absolute max-capacity as a float based on parent\u0027s maxResource\n    // and cluster resource.\n    childQueue.getQueueCapacities().setAbsoluteMaximumCapacity(label,\n        childQueue.getQueueCapacities().getMaximumCapacity(label)\n            * getQueueCapacities().getAbsoluteMaximumCapacity(label));\n\n    // Re-visit max applications for a queue based on absolute capacity if\n    // needed.\n    if (childQueue instanceof LeafQueue) {\n      LeafQueue leafQueue \u003d (LeafQueue) childQueue;\n      CapacitySchedulerConfiguration conf \u003d csContext.getConfiguration();\n      int maxApplications \u003d (int) (conf.getMaximumSystemApplications()\n          * childQueue.getQueueCapacities().getAbsoluteCapacity(label));\n      leafQueue.setMaxApplications(maxApplications);\n\n      int maxApplicationsPerUser \u003d Math.min(maxApplications,\n          (int) (maxApplications\n              * (leafQueue.getUsersManager().getUserLimit() / 100.0f)\n              * leafQueue.getUsersManager().getUserLimitFactor()));\n      leafQueue.setMaxApplicationsPerUser(maxApplicationsPerUser);\n      LOG.info(\"LeafQueue:\" + leafQueue.getQueuePath() + \", maxApplications\u003d\"\n          + maxApplications + \", maxApplicationsPerUser\u003d\"\n          + maxApplicationsPerUser + \", Abs Cap:\"\n          + childQueue.getQueueCapacities().getAbsoluteCapacity(label) + \", Cap: \"\n          + childQueue.getQueueCapacities().getCapacity(label) + \", MaxCap : \"\n          + childQueue.getQueueCapacities().getMaximumCapacity(label));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {}
    },
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9879. Allow multiple leaf queues with the same name in CapacityScheduler. Contributed by Gergely Pollak.\n",
      "commitDate": "25/03/20 4:20 AM",
      "commitName": "cdb2107066a2d8557270888c0a9a75f29a6853bf",
      "commitAuthor": "Sunil G",
      "commitDateOld": "29/08/19 3:14 AM",
      "commitNameOld": "8c0759d02a9a530cfdd25e0a8f410cd74a8ac4c8",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 209.05,
      "commitsBetweenForRepo": 935,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,54 @@\n   private void deriveCapacityFromAbsoluteConfigurations(String label,\n       Resource clusterResource, ResourceCalculator rc, CSQueue childQueue) {\n \n     /*\n      * In case when queues are configured with absolute resources, it is better\n      * to update capacity/max-capacity etc w.r.t absolute resource as well. In\n      * case of computation, these values wont be used any more. However for\n      * metrics and UI, its better these values are pre-computed here itself.\n      */\n \n     // 1. Update capacity as a float based on parent\u0027s minResource\n     childQueue.getQueueCapacities().setCapacity(label,\n         rc.divide(clusterResource,\n             childQueue.getQueueResourceQuotas().getEffectiveMinResource(label),\n             getQueueResourceQuotas().getEffectiveMinResource(label)));\n \n     // 2. Update max-capacity as a float based on parent\u0027s maxResource\n     childQueue.getQueueCapacities().setMaximumCapacity(label,\n         rc.divide(clusterResource,\n             childQueue.getQueueResourceQuotas().getEffectiveMaxResource(label),\n             getQueueResourceQuotas().getEffectiveMaxResource(label)));\n \n     // 3. Update absolute capacity as a float based on parent\u0027s minResource and\n     // cluster resource.\n     childQueue.getQueueCapacities().setAbsoluteCapacity(label,\n         childQueue.getQueueCapacities().getCapacity(label)\n             * getQueueCapacities().getAbsoluteCapacity(label));\n \n     // 4. Update absolute max-capacity as a float based on parent\u0027s maxResource\n     // and cluster resource.\n     childQueue.getQueueCapacities().setAbsoluteMaximumCapacity(label,\n         childQueue.getQueueCapacities().getMaximumCapacity(label)\n             * getQueueCapacities().getAbsoluteMaximumCapacity(label));\n \n     // Re-visit max applications for a queue based on absolute capacity if\n     // needed.\n     if (childQueue instanceof LeafQueue) {\n       LeafQueue leafQueue \u003d (LeafQueue) childQueue;\n       CapacitySchedulerConfiguration conf \u003d csContext.getConfiguration();\n       int maxApplications \u003d (int) (conf.getMaximumSystemApplications()\n           * childQueue.getQueueCapacities().getAbsoluteCapacity(label));\n       leafQueue.setMaxApplications(maxApplications);\n \n       int maxApplicationsPerUser \u003d Math.min(maxApplications,\n           (int) (maxApplications\n               * (leafQueue.getUsersManager().getUserLimit() / 100.0f)\n               * leafQueue.getUsersManager().getUserLimitFactor()));\n       leafQueue.setMaxApplicationsPerUser(maxApplicationsPerUser);\n-      LOG.info(\"LeafQueue:\" + leafQueue.getQueueName() + \", maxApplications\u003d\"\n+      LOG.info(\"LeafQueue:\" + leafQueue.getQueuePath() + \", maxApplications\u003d\"\n           + maxApplications + \", maxApplicationsPerUser\u003d\"\n           + maxApplicationsPerUser + \", Abs Cap:\"\n           + childQueue.getQueueCapacities().getAbsoluteCapacity(label));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void deriveCapacityFromAbsoluteConfigurations(String label,\n      Resource clusterResource, ResourceCalculator rc, CSQueue childQueue) {\n\n    /*\n     * In case when queues are configured with absolute resources, it is better\n     * to update capacity/max-capacity etc w.r.t absolute resource as well. In\n     * case of computation, these values wont be used any more. However for\n     * metrics and UI, its better these values are pre-computed here itself.\n     */\n\n    // 1. Update capacity as a float based on parent\u0027s minResource\n    childQueue.getQueueCapacities().setCapacity(label,\n        rc.divide(clusterResource,\n            childQueue.getQueueResourceQuotas().getEffectiveMinResource(label),\n            getQueueResourceQuotas().getEffectiveMinResource(label)));\n\n    // 2. Update max-capacity as a float based on parent\u0027s maxResource\n    childQueue.getQueueCapacities().setMaximumCapacity(label,\n        rc.divide(clusterResource,\n            childQueue.getQueueResourceQuotas().getEffectiveMaxResource(label),\n            getQueueResourceQuotas().getEffectiveMaxResource(label)));\n\n    // 3. Update absolute capacity as a float based on parent\u0027s minResource and\n    // cluster resource.\n    childQueue.getQueueCapacities().setAbsoluteCapacity(label,\n        childQueue.getQueueCapacities().getCapacity(label)\n            * getQueueCapacities().getAbsoluteCapacity(label));\n\n    // 4. Update absolute max-capacity as a float based on parent\u0027s maxResource\n    // and cluster resource.\n    childQueue.getQueueCapacities().setAbsoluteMaximumCapacity(label,\n        childQueue.getQueueCapacities().getMaximumCapacity(label)\n            * getQueueCapacities().getAbsoluteMaximumCapacity(label));\n\n    // Re-visit max applications for a queue based on absolute capacity if\n    // needed.\n    if (childQueue instanceof LeafQueue) {\n      LeafQueue leafQueue \u003d (LeafQueue) childQueue;\n      CapacitySchedulerConfiguration conf \u003d csContext.getConfiguration();\n      int maxApplications \u003d (int) (conf.getMaximumSystemApplications()\n          * childQueue.getQueueCapacities().getAbsoluteCapacity(label));\n      leafQueue.setMaxApplications(maxApplications);\n\n      int maxApplicationsPerUser \u003d Math.min(maxApplications,\n          (int) (maxApplications\n              * (leafQueue.getUsersManager().getUserLimit() / 100.0f)\n              * leafQueue.getUsersManager().getUserLimitFactor()));\n      leafQueue.setMaxApplicationsPerUser(maxApplicationsPerUser);\n      LOG.info(\"LeafQueue:\" + leafQueue.getQueuePath() + \", maxApplications\u003d\"\n          + maxApplications + \", maxApplicationsPerUser\u003d\"\n          + maxApplicationsPerUser + \", Abs Cap:\"\n          + childQueue.getQueueCapacities().getAbsoluteCapacity(label));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {}
    },
    "689d2e61058b5f719c6cbe9897a72b19b44a29a3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8917. Absolute (maximum) capacity of level3+ queues is wrongly calculated for absolute resource. Contributed by Tao Yang.\n",
      "commitDate": "26/08/19 8:36 AM",
      "commitName": "689d2e61058b5f719c6cbe9897a72b19b44a29a3",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "03/06/19 7:59 AM",
      "commitNameOld": "bd2590d71ba1f3db1c686f7afeaf51382f8d8a2f",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 84.03,
      "commitsBetweenForRepo": 739,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,54 @@\n   private void deriveCapacityFromAbsoluteConfigurations(String label,\n       Resource clusterResource, ResourceCalculator rc, CSQueue childQueue) {\n \n     /*\n      * In case when queues are configured with absolute resources, it is better\n      * to update capacity/max-capacity etc w.r.t absolute resource as well. In\n      * case of computation, these values wont be used any more. However for\n      * metrics and UI, its better these values are pre-computed here itself.\n      */\n \n     // 1. Update capacity as a float based on parent\u0027s minResource\n     childQueue.getQueueCapacities().setCapacity(label,\n         rc.divide(clusterResource,\n             childQueue.getQueueResourceQuotas().getEffectiveMinResource(label),\n             getQueueResourceQuotas().getEffectiveMinResource(label)));\n \n     // 2. Update max-capacity as a float based on parent\u0027s maxResource\n     childQueue.getQueueCapacities().setMaximumCapacity(label,\n         rc.divide(clusterResource,\n             childQueue.getQueueResourceQuotas().getEffectiveMaxResource(label),\n             getQueueResourceQuotas().getEffectiveMaxResource(label)));\n \n     // 3. Update absolute capacity as a float based on parent\u0027s minResource and\n     // cluster resource.\n     childQueue.getQueueCapacities().setAbsoluteCapacity(label,\n-        (float) childQueue.getQueueCapacities().getCapacity()\n-            / getQueueCapacities().getAbsoluteCapacity(label));\n+        childQueue.getQueueCapacities().getCapacity(label)\n+            * getQueueCapacities().getAbsoluteCapacity(label));\n \n     // 4. Update absolute max-capacity as a float based on parent\u0027s maxResource\n     // and cluster resource.\n     childQueue.getQueueCapacities().setAbsoluteMaximumCapacity(label,\n-        (float) childQueue.getQueueCapacities().getMaximumCapacity(label)\n-            / getQueueCapacities().getAbsoluteMaximumCapacity(label));\n+        childQueue.getQueueCapacities().getMaximumCapacity(label)\n+            * getQueueCapacities().getAbsoluteMaximumCapacity(label));\n \n     // Re-visit max applications for a queue based on absolute capacity if\n     // needed.\n     if (childQueue instanceof LeafQueue) {\n       LeafQueue leafQueue \u003d (LeafQueue) childQueue;\n       CapacitySchedulerConfiguration conf \u003d csContext.getConfiguration();\n       int maxApplications \u003d (int) (conf.getMaximumSystemApplications()\n           * childQueue.getQueueCapacities().getAbsoluteCapacity(label));\n       leafQueue.setMaxApplications(maxApplications);\n \n       int maxApplicationsPerUser \u003d Math.min(maxApplications,\n           (int) (maxApplications\n               * (leafQueue.getUsersManager().getUserLimit() / 100.0f)\n               * leafQueue.getUsersManager().getUserLimitFactor()));\n       leafQueue.setMaxApplicationsPerUser(maxApplicationsPerUser);\n       LOG.info(\"LeafQueue:\" + leafQueue.getQueueName() + \", maxApplications\u003d\"\n           + maxApplications + \", maxApplicationsPerUser\u003d\"\n           + maxApplicationsPerUser + \", Abs Cap:\"\n           + childQueue.getQueueCapacities().getAbsoluteCapacity(label));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void deriveCapacityFromAbsoluteConfigurations(String label,\n      Resource clusterResource, ResourceCalculator rc, CSQueue childQueue) {\n\n    /*\n     * In case when queues are configured with absolute resources, it is better\n     * to update capacity/max-capacity etc w.r.t absolute resource as well. In\n     * case of computation, these values wont be used any more. However for\n     * metrics and UI, its better these values are pre-computed here itself.\n     */\n\n    // 1. Update capacity as a float based on parent\u0027s minResource\n    childQueue.getQueueCapacities().setCapacity(label,\n        rc.divide(clusterResource,\n            childQueue.getQueueResourceQuotas().getEffectiveMinResource(label),\n            getQueueResourceQuotas().getEffectiveMinResource(label)));\n\n    // 2. Update max-capacity as a float based on parent\u0027s maxResource\n    childQueue.getQueueCapacities().setMaximumCapacity(label,\n        rc.divide(clusterResource,\n            childQueue.getQueueResourceQuotas().getEffectiveMaxResource(label),\n            getQueueResourceQuotas().getEffectiveMaxResource(label)));\n\n    // 3. Update absolute capacity as a float based on parent\u0027s minResource and\n    // cluster resource.\n    childQueue.getQueueCapacities().setAbsoluteCapacity(label,\n        childQueue.getQueueCapacities().getCapacity(label)\n            * getQueueCapacities().getAbsoluteCapacity(label));\n\n    // 4. Update absolute max-capacity as a float based on parent\u0027s maxResource\n    // and cluster resource.\n    childQueue.getQueueCapacities().setAbsoluteMaximumCapacity(label,\n        childQueue.getQueueCapacities().getMaximumCapacity(label)\n            * getQueueCapacities().getAbsoluteMaximumCapacity(label));\n\n    // Re-visit max applications for a queue based on absolute capacity if\n    // needed.\n    if (childQueue instanceof LeafQueue) {\n      LeafQueue leafQueue \u003d (LeafQueue) childQueue;\n      CapacitySchedulerConfiguration conf \u003d csContext.getConfiguration();\n      int maxApplications \u003d (int) (conf.getMaximumSystemApplications()\n          * childQueue.getQueueCapacities().getAbsoluteCapacity(label));\n      leafQueue.setMaxApplications(maxApplications);\n\n      int maxApplicationsPerUser \u003d Math.min(maxApplications,\n          (int) (maxApplications\n              * (leafQueue.getUsersManager().getUserLimit() / 100.0f)\n              * leafQueue.getUsersManager().getUserLimitFactor()));\n      leafQueue.setMaxApplicationsPerUser(maxApplicationsPerUser);\n      LOG.info(\"LeafQueue:\" + leafQueue.getQueueName() + \", maxApplications\u003d\"\n          + maxApplications + \", maxApplicationsPerUser\u003d\"\n          + maxApplicationsPerUser + \", Abs Cap:\"\n          + childQueue.getQueueCapacities().getAbsoluteCapacity(label));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {}
    },
    "e65ca92fb6897a3004a235d7b69e308399189aae": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7482. Max applications calculation per queue has to be retrospected with absolute resource support. Contributed by Sunil G.\n",
      "commitDate": "07/12/17 6:56 PM",
      "commitName": "e65ca92fb6897a3004a235d7b69e308399189aae",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "07/12/17 6:56 PM",
      "commitNameOld": "aa3f62740f71e6e5b2a424a9f4654c1a4ba1dbe6",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,54 @@\n   private void deriveCapacityFromAbsoluteConfigurations(String label,\n       Resource clusterResource, ResourceCalculator rc, CSQueue childQueue) {\n \n     /*\n      * In case when queues are configured with absolute resources, it is better\n      * to update capacity/max-capacity etc w.r.t absolute resource as well. In\n      * case of computation, these values wont be used any more. However for\n      * metrics and UI, its better these values are pre-computed here itself.\n      */\n \n     // 1. Update capacity as a float based on parent\u0027s minResource\n     childQueue.getQueueCapacities().setCapacity(label,\n         rc.divide(clusterResource,\n             childQueue.getQueueResourceQuotas().getEffectiveMinResource(label),\n             getQueueResourceQuotas().getEffectiveMinResource(label)));\n \n     // 2. Update max-capacity as a float based on parent\u0027s maxResource\n     childQueue.getQueueCapacities().setMaximumCapacity(label,\n         rc.divide(clusterResource,\n             childQueue.getQueueResourceQuotas().getEffectiveMaxResource(label),\n             getQueueResourceQuotas().getEffectiveMaxResource(label)));\n \n     // 3. Update absolute capacity as a float based on parent\u0027s minResource and\n     // cluster resource.\n     childQueue.getQueueCapacities().setAbsoluteCapacity(label,\n         (float) childQueue.getQueueCapacities().getCapacity()\n             / getQueueCapacities().getAbsoluteCapacity(label));\n \n     // 4. Update absolute max-capacity as a float based on parent\u0027s maxResource\n     // and cluster resource.\n     childQueue.getQueueCapacities().setAbsoluteMaximumCapacity(label,\n         (float) childQueue.getQueueCapacities().getMaximumCapacity(label)\n             / getQueueCapacities().getAbsoluteMaximumCapacity(label));\n+\n+    // Re-visit max applications for a queue based on absolute capacity if\n+    // needed.\n+    if (childQueue instanceof LeafQueue) {\n+      LeafQueue leafQueue \u003d (LeafQueue) childQueue;\n+      CapacitySchedulerConfiguration conf \u003d csContext.getConfiguration();\n+      int maxApplications \u003d (int) (conf.getMaximumSystemApplications()\n+          * childQueue.getQueueCapacities().getAbsoluteCapacity(label));\n+      leafQueue.setMaxApplications(maxApplications);\n+\n+      int maxApplicationsPerUser \u003d Math.min(maxApplications,\n+          (int) (maxApplications\n+              * (leafQueue.getUsersManager().getUserLimit() / 100.0f)\n+              * leafQueue.getUsersManager().getUserLimitFactor()));\n+      leafQueue.setMaxApplicationsPerUser(maxApplicationsPerUser);\n+      LOG.info(\"LeafQueue:\" + leafQueue.getQueueName() + \", maxApplications\u003d\"\n+          + maxApplications + \", maxApplicationsPerUser\u003d\"\n+          + maxApplicationsPerUser + \", Abs Cap:\"\n+          + childQueue.getQueueCapacities().getAbsoluteCapacity(label));\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void deriveCapacityFromAbsoluteConfigurations(String label,\n      Resource clusterResource, ResourceCalculator rc, CSQueue childQueue) {\n\n    /*\n     * In case when queues are configured with absolute resources, it is better\n     * to update capacity/max-capacity etc w.r.t absolute resource as well. In\n     * case of computation, these values wont be used any more. However for\n     * metrics and UI, its better these values are pre-computed here itself.\n     */\n\n    // 1. Update capacity as a float based on parent\u0027s minResource\n    childQueue.getQueueCapacities().setCapacity(label,\n        rc.divide(clusterResource,\n            childQueue.getQueueResourceQuotas().getEffectiveMinResource(label),\n            getQueueResourceQuotas().getEffectiveMinResource(label)));\n\n    // 2. Update max-capacity as a float based on parent\u0027s maxResource\n    childQueue.getQueueCapacities().setMaximumCapacity(label,\n        rc.divide(clusterResource,\n            childQueue.getQueueResourceQuotas().getEffectiveMaxResource(label),\n            getQueueResourceQuotas().getEffectiveMaxResource(label)));\n\n    // 3. Update absolute capacity as a float based on parent\u0027s minResource and\n    // cluster resource.\n    childQueue.getQueueCapacities().setAbsoluteCapacity(label,\n        (float) childQueue.getQueueCapacities().getCapacity()\n            / getQueueCapacities().getAbsoluteCapacity(label));\n\n    // 4. Update absolute max-capacity as a float based on parent\u0027s maxResource\n    // and cluster resource.\n    childQueue.getQueueCapacities().setAbsoluteMaximumCapacity(label,\n        (float) childQueue.getQueueCapacities().getMaximumCapacity(label)\n            / getQueueCapacities().getAbsoluteMaximumCapacity(label));\n\n    // Re-visit max applications for a queue based on absolute capacity if\n    // needed.\n    if (childQueue instanceof LeafQueue) {\n      LeafQueue leafQueue \u003d (LeafQueue) childQueue;\n      CapacitySchedulerConfiguration conf \u003d csContext.getConfiguration();\n      int maxApplications \u003d (int) (conf.getMaximumSystemApplications()\n          * childQueue.getQueueCapacities().getAbsoluteCapacity(label));\n      leafQueue.setMaxApplications(maxApplications);\n\n      int maxApplicationsPerUser \u003d Math.min(maxApplications,\n          (int) (maxApplications\n              * (leafQueue.getUsersManager().getUserLimit() / 100.0f)\n              * leafQueue.getUsersManager().getUserLimitFactor()));\n      leafQueue.setMaxApplicationsPerUser(maxApplicationsPerUser);\n      LOG.info(\"LeafQueue:\" + leafQueue.getQueueName() + \", maxApplications\u003d\"\n          + maxApplications + \", maxApplicationsPerUser\u003d\"\n          + maxApplicationsPerUser + \", Abs Cap:\"\n          + childQueue.getQueueCapacities().getAbsoluteCapacity(label));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java",
      "extendedDetails": {}
    },
    "d52627a7cbddfd981db973e223aefffde1ebf82d": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7254. UI and metrics changes related to absolute resource configuration. (Sunil G via wangda)\n",
      "commitDate": "07/12/17 6:56 PM",
      "commitName": "d52627a7cbddfd981db973e223aefffde1ebf82d",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,34 @@\n+  private void deriveCapacityFromAbsoluteConfigurations(String label,\n+      Resource clusterResource, ResourceCalculator rc, CSQueue childQueue) {\n+\n+    /*\n+     * In case when queues are configured with absolute resources, it is better\n+     * to update capacity/max-capacity etc w.r.t absolute resource as well. In\n+     * case of computation, these values wont be used any more. However for\n+     * metrics and UI, its better these values are pre-computed here itself.\n+     */\n+\n+    // 1. Update capacity as a float based on parent\u0027s minResource\n+    childQueue.getQueueCapacities().setCapacity(label,\n+        rc.divide(clusterResource,\n+            childQueue.getQueueResourceQuotas().getEffectiveMinResource(label),\n+            getQueueResourceQuotas().getEffectiveMinResource(label)));\n+\n+    // 2. Update max-capacity as a float based on parent\u0027s maxResource\n+    childQueue.getQueueCapacities().setMaximumCapacity(label,\n+        rc.divide(clusterResource,\n+            childQueue.getQueueResourceQuotas().getEffectiveMaxResource(label),\n+            getQueueResourceQuotas().getEffectiveMaxResource(label)));\n+\n+    // 3. Update absolute capacity as a float based on parent\u0027s minResource and\n+    // cluster resource.\n+    childQueue.getQueueCapacities().setAbsoluteCapacity(label,\n+        (float) childQueue.getQueueCapacities().getCapacity()\n+            / getQueueCapacities().getAbsoluteCapacity(label));\n+\n+    // 4. Update absolute max-capacity as a float based on parent\u0027s maxResource\n+    // and cluster resource.\n+    childQueue.getQueueCapacities().setAbsoluteMaximumCapacity(label,\n+        (float) childQueue.getQueueCapacities().getMaximumCapacity(label)\n+            / getQueueCapacities().getAbsoluteMaximumCapacity(label));\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void deriveCapacityFromAbsoluteConfigurations(String label,\n      Resource clusterResource, ResourceCalculator rc, CSQueue childQueue) {\n\n    /*\n     * In case when queues are configured with absolute resources, it is better\n     * to update capacity/max-capacity etc w.r.t absolute resource as well. In\n     * case of computation, these values wont be used any more. However for\n     * metrics and UI, its better these values are pre-computed here itself.\n     */\n\n    // 1. Update capacity as a float based on parent\u0027s minResource\n    childQueue.getQueueCapacities().setCapacity(label,\n        rc.divide(clusterResource,\n            childQueue.getQueueResourceQuotas().getEffectiveMinResource(label),\n            getQueueResourceQuotas().getEffectiveMinResource(label)));\n\n    // 2. Update max-capacity as a float based on parent\u0027s maxResource\n    childQueue.getQueueCapacities().setMaximumCapacity(label,\n        rc.divide(clusterResource,\n            childQueue.getQueueResourceQuotas().getEffectiveMaxResource(label),\n            getQueueResourceQuotas().getEffectiveMaxResource(label)));\n\n    // 3. Update absolute capacity as a float based on parent\u0027s minResource and\n    // cluster resource.\n    childQueue.getQueueCapacities().setAbsoluteCapacity(label,\n        (float) childQueue.getQueueCapacities().getCapacity()\n            / getQueueCapacities().getAbsoluteCapacity(label));\n\n    // 4. Update absolute max-capacity as a float based on parent\u0027s maxResource\n    // and cluster resource.\n    childQueue.getQueueCapacities().setAbsoluteMaximumCapacity(label,\n        (float) childQueue.getQueueCapacities().getMaximumCapacity(label)\n            / getQueueCapacities().getAbsoluteMaximumCapacity(label));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/ParentQueue.java"
    }
  }
}