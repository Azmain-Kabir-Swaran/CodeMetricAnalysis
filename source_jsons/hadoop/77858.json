{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CommandWithDestination.java",
  "functionName": "preserveAttributes",
  "functionId": "preserveAttributes___src-PathData__target-PathData__preserveRawXAttrs-boolean",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/CommandWithDestination.java",
  "functionStartLine": 434,
  "functionEndLine": 479,
  "numCommitsSeen": 43,
  "timeTaken": 1915,
  "changeHistory": [
    "dd7916d3cd5d880d0b257d229f43f10feff04c93",
    "e6bdb33784530f57a41e1b3cd1b0a1f601ca5b88",
    "c3e26735a662e478005c8c75b0909797a22cd640"
  ],
  "changeHistoryShort": {
    "dd7916d3cd5d880d0b257d229f43f10feff04c93": "Ybodychange",
    "e6bdb33784530f57a41e1b3cd1b0a1f601ca5b88": "Ymultichange(Yparameterchange,Ybodychange)",
    "c3e26735a662e478005c8c75b0909797a22cd640": "Yintroduced"
  },
  "changeHistoryDetails": {
    "dd7916d3cd5d880d0b257d229f43f10feff04c93": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12250. Reduce usage of FsPermissionExtension in unit tests. Contributed by Chris Douglas.\n",
      "commitDate": "17/08/17 9:35 AM",
      "commitName": "dd7916d3cd5d880d0b257d229f43f10feff04c93",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "22/06/17 6:28 PM",
      "commitNameOld": "092ebdf885468a2bf79cbfb168286b7cddc4a0db",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 55.63,
      "commitsBetweenForRepo": 358,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   protected void preserveAttributes(PathData src, PathData target,\n       boolean preserveRawXAttrs)\n       throws IOException {\n     if (shouldPreserve(FileAttribute.TIMESTAMPS)) {\n       target.fs.setTimes(\n           target.path,\n           src.stat.getModificationTime(),\n           src.stat.getAccessTime());\n     }\n     if (shouldPreserve(FileAttribute.OWNERSHIP)) {\n       target.fs.setOwner(\n           target.path,\n           src.stat.getOwner(),\n           src.stat.getGroup());\n     }\n     if (shouldPreserve(FileAttribute.PERMISSION) ||\n         shouldPreserve(FileAttribute.ACL)) {\n       target.fs.setPermission(\n           target.path,\n           src.stat.getPermission());\n     }\n     if (shouldPreserve(FileAttribute.ACL)) {\n-      FsPermission perm \u003d src.stat.getPermission();\n-      if (perm.getAclBit()) {\n+      if (src.stat.hasAcl()) {\n+        FsPermission perm \u003d src.stat.getPermission();\n         List\u003cAclEntry\u003e srcEntries \u003d\n             src.fs.getAclStatus(src.path).getEntries();\n         List\u003cAclEntry\u003e srcFullEntries \u003d\n             AclUtil.getAclFromPermAndEntries(perm, srcEntries);\n         target.fs.setAcl(target.path, srcFullEntries);\n       }\n     }\n     final boolean preserveXAttrs \u003d shouldPreserve(FileAttribute.XATTR);\n     if (preserveXAttrs || preserveRawXAttrs) {\n       Map\u003cString, byte[]\u003e srcXAttrs \u003d src.fs.getXAttrs(src.path);\n       if (srcXAttrs !\u003d null) {\n         Iterator\u003cEntry\u003cString, byte[]\u003e\u003e iter \u003d srcXAttrs.entrySet().iterator();\n         while (iter.hasNext()) {\n           Entry\u003cString, byte[]\u003e entry \u003d iter.next();\n           final String xattrName \u003d entry.getKey();\n           if (xattrName.startsWith(RAW) || preserveXAttrs) {\n             target.fs.setXAttr(target.path, entry.getKey(), entry.getValue());\n           }\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void preserveAttributes(PathData src, PathData target,\n      boolean preserveRawXAttrs)\n      throws IOException {\n    if (shouldPreserve(FileAttribute.TIMESTAMPS)) {\n      target.fs.setTimes(\n          target.path,\n          src.stat.getModificationTime(),\n          src.stat.getAccessTime());\n    }\n    if (shouldPreserve(FileAttribute.OWNERSHIP)) {\n      target.fs.setOwner(\n          target.path,\n          src.stat.getOwner(),\n          src.stat.getGroup());\n    }\n    if (shouldPreserve(FileAttribute.PERMISSION) ||\n        shouldPreserve(FileAttribute.ACL)) {\n      target.fs.setPermission(\n          target.path,\n          src.stat.getPermission());\n    }\n    if (shouldPreserve(FileAttribute.ACL)) {\n      if (src.stat.hasAcl()) {\n        FsPermission perm \u003d src.stat.getPermission();\n        List\u003cAclEntry\u003e srcEntries \u003d\n            src.fs.getAclStatus(src.path).getEntries();\n        List\u003cAclEntry\u003e srcFullEntries \u003d\n            AclUtil.getAclFromPermAndEntries(perm, srcEntries);\n        target.fs.setAcl(target.path, srcFullEntries);\n      }\n    }\n    final boolean preserveXAttrs \u003d shouldPreserve(FileAttribute.XATTR);\n    if (preserveXAttrs || preserveRawXAttrs) {\n      Map\u003cString, byte[]\u003e srcXAttrs \u003d src.fs.getXAttrs(src.path);\n      if (srcXAttrs !\u003d null) {\n        Iterator\u003cEntry\u003cString, byte[]\u003e\u003e iter \u003d srcXAttrs.entrySet().iterator();\n        while (iter.hasNext()) {\n          Entry\u003cString, byte[]\u003e entry \u003d iter.next();\n          final String xattrName \u003d entry.getKey();\n          if (xattrName.startsWith(RAW) || preserveXAttrs) {\n            target.fs.setXAttr(target.path, entry.getKey(), entry.getValue());\n          }\n        }\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/CommandWithDestination.java",
      "extendedDetails": {}
    },
    "e6bdb33784530f57a41e1b3cd1b0a1f601ca5b88": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-10919. Copy command should preserve raw.* namespace extended attributes. (clamb)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1616840 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/08/14 10:58 AM",
      "commitName": "e6bdb33784530f57a41e1b3cd1b0a1f601ca5b88",
      "commitAuthor": "Charles Lamb",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-10919. Copy command should preserve raw.* namespace extended attributes. (clamb)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1616840 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "08/08/14 10:58 AM",
          "commitName": "e6bdb33784530f57a41e1b3cd1b0a1f601ca5b88",
          "commitAuthor": "Charles Lamb",
          "commitDateOld": "25/06/14 10:36 PM",
          "commitNameOld": "c3e26735a662e478005c8c75b0909797a22cd640",
          "commitAuthorOld": "Chris Nauroth",
          "daysBetweenCommits": 43.51,
          "commitsBetweenForRepo": 335,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,46 @@\n-  protected void preserveAttributes(PathData src, PathData target)\n+  protected void preserveAttributes(PathData src, PathData target,\n+      boolean preserveRawXAttrs)\n       throws IOException {\n     if (shouldPreserve(FileAttribute.TIMESTAMPS)) {\n       target.fs.setTimes(\n           target.path,\n           src.stat.getModificationTime(),\n           src.stat.getAccessTime());\n     }\n     if (shouldPreserve(FileAttribute.OWNERSHIP)) {\n       target.fs.setOwner(\n           target.path,\n           src.stat.getOwner(),\n           src.stat.getGroup());\n     }\n     if (shouldPreserve(FileAttribute.PERMISSION) ||\n         shouldPreserve(FileAttribute.ACL)) {\n       target.fs.setPermission(\n           target.path,\n           src.stat.getPermission());\n     }\n     if (shouldPreserve(FileAttribute.ACL)) {\n       FsPermission perm \u003d src.stat.getPermission();\n       if (perm.getAclBit()) {\n         List\u003cAclEntry\u003e srcEntries \u003d\n             src.fs.getAclStatus(src.path).getEntries();\n         List\u003cAclEntry\u003e srcFullEntries \u003d\n             AclUtil.getAclFromPermAndEntries(perm, srcEntries);\n         target.fs.setAcl(target.path, srcFullEntries);\n       }\n     }\n-    if (shouldPreserve(FileAttribute.XATTR)) {\n+    final boolean preserveXAttrs \u003d shouldPreserve(FileAttribute.XATTR);\n+    if (preserveXAttrs || preserveRawXAttrs) {\n       Map\u003cString, byte[]\u003e srcXAttrs \u003d src.fs.getXAttrs(src.path);\n       if (srcXAttrs !\u003d null) {\n         Iterator\u003cEntry\u003cString, byte[]\u003e\u003e iter \u003d srcXAttrs.entrySet().iterator();\n         while (iter.hasNext()) {\n           Entry\u003cString, byte[]\u003e entry \u003d iter.next();\n-          target.fs.setXAttr(target.path, entry.getKey(), entry.getValue());\n+          final String xattrName \u003d entry.getKey();\n+          if (xattrName.startsWith(RAW) || preserveXAttrs) {\n+            target.fs.setXAttr(target.path, entry.getKey(), entry.getValue());\n+          }\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void preserveAttributes(PathData src, PathData target,\n      boolean preserveRawXAttrs)\n      throws IOException {\n    if (shouldPreserve(FileAttribute.TIMESTAMPS)) {\n      target.fs.setTimes(\n          target.path,\n          src.stat.getModificationTime(),\n          src.stat.getAccessTime());\n    }\n    if (shouldPreserve(FileAttribute.OWNERSHIP)) {\n      target.fs.setOwner(\n          target.path,\n          src.stat.getOwner(),\n          src.stat.getGroup());\n    }\n    if (shouldPreserve(FileAttribute.PERMISSION) ||\n        shouldPreserve(FileAttribute.ACL)) {\n      target.fs.setPermission(\n          target.path,\n          src.stat.getPermission());\n    }\n    if (shouldPreserve(FileAttribute.ACL)) {\n      FsPermission perm \u003d src.stat.getPermission();\n      if (perm.getAclBit()) {\n        List\u003cAclEntry\u003e srcEntries \u003d\n            src.fs.getAclStatus(src.path).getEntries();\n        List\u003cAclEntry\u003e srcFullEntries \u003d\n            AclUtil.getAclFromPermAndEntries(perm, srcEntries);\n        target.fs.setAcl(target.path, srcFullEntries);\n      }\n    }\n    final boolean preserveXAttrs \u003d shouldPreserve(FileAttribute.XATTR);\n    if (preserveXAttrs || preserveRawXAttrs) {\n      Map\u003cString, byte[]\u003e srcXAttrs \u003d src.fs.getXAttrs(src.path);\n      if (srcXAttrs !\u003d null) {\n        Iterator\u003cEntry\u003cString, byte[]\u003e\u003e iter \u003d srcXAttrs.entrySet().iterator();\n        while (iter.hasNext()) {\n          Entry\u003cString, byte[]\u003e entry \u003d iter.next();\n          final String xattrName \u003d entry.getKey();\n          if (xattrName.startsWith(RAW) || preserveXAttrs) {\n            target.fs.setXAttr(target.path, entry.getKey(), entry.getValue());\n          }\n        }\n      }\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/CommandWithDestination.java",
          "extendedDetails": {
            "oldValue": "[src-PathData, target-PathData]",
            "newValue": "[src-PathData, target-PathData, preserveRawXAttrs-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-10919. Copy command should preserve raw.* namespace extended attributes. (clamb)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1616840 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "08/08/14 10:58 AM",
          "commitName": "e6bdb33784530f57a41e1b3cd1b0a1f601ca5b88",
          "commitAuthor": "Charles Lamb",
          "commitDateOld": "25/06/14 10:36 PM",
          "commitNameOld": "c3e26735a662e478005c8c75b0909797a22cd640",
          "commitAuthorOld": "Chris Nauroth",
          "daysBetweenCommits": 43.51,
          "commitsBetweenForRepo": 335,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,46 @@\n-  protected void preserveAttributes(PathData src, PathData target)\n+  protected void preserveAttributes(PathData src, PathData target,\n+      boolean preserveRawXAttrs)\n       throws IOException {\n     if (shouldPreserve(FileAttribute.TIMESTAMPS)) {\n       target.fs.setTimes(\n           target.path,\n           src.stat.getModificationTime(),\n           src.stat.getAccessTime());\n     }\n     if (shouldPreserve(FileAttribute.OWNERSHIP)) {\n       target.fs.setOwner(\n           target.path,\n           src.stat.getOwner(),\n           src.stat.getGroup());\n     }\n     if (shouldPreserve(FileAttribute.PERMISSION) ||\n         shouldPreserve(FileAttribute.ACL)) {\n       target.fs.setPermission(\n           target.path,\n           src.stat.getPermission());\n     }\n     if (shouldPreserve(FileAttribute.ACL)) {\n       FsPermission perm \u003d src.stat.getPermission();\n       if (perm.getAclBit()) {\n         List\u003cAclEntry\u003e srcEntries \u003d\n             src.fs.getAclStatus(src.path).getEntries();\n         List\u003cAclEntry\u003e srcFullEntries \u003d\n             AclUtil.getAclFromPermAndEntries(perm, srcEntries);\n         target.fs.setAcl(target.path, srcFullEntries);\n       }\n     }\n-    if (shouldPreserve(FileAttribute.XATTR)) {\n+    final boolean preserveXAttrs \u003d shouldPreserve(FileAttribute.XATTR);\n+    if (preserveXAttrs || preserveRawXAttrs) {\n       Map\u003cString, byte[]\u003e srcXAttrs \u003d src.fs.getXAttrs(src.path);\n       if (srcXAttrs !\u003d null) {\n         Iterator\u003cEntry\u003cString, byte[]\u003e\u003e iter \u003d srcXAttrs.entrySet().iterator();\n         while (iter.hasNext()) {\n           Entry\u003cString, byte[]\u003e entry \u003d iter.next();\n-          target.fs.setXAttr(target.path, entry.getKey(), entry.getValue());\n+          final String xattrName \u003d entry.getKey();\n+          if (xattrName.startsWith(RAW) || preserveXAttrs) {\n+            target.fs.setXAttr(target.path, entry.getKey(), entry.getValue());\n+          }\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void preserveAttributes(PathData src, PathData target,\n      boolean preserveRawXAttrs)\n      throws IOException {\n    if (shouldPreserve(FileAttribute.TIMESTAMPS)) {\n      target.fs.setTimes(\n          target.path,\n          src.stat.getModificationTime(),\n          src.stat.getAccessTime());\n    }\n    if (shouldPreserve(FileAttribute.OWNERSHIP)) {\n      target.fs.setOwner(\n          target.path,\n          src.stat.getOwner(),\n          src.stat.getGroup());\n    }\n    if (shouldPreserve(FileAttribute.PERMISSION) ||\n        shouldPreserve(FileAttribute.ACL)) {\n      target.fs.setPermission(\n          target.path,\n          src.stat.getPermission());\n    }\n    if (shouldPreserve(FileAttribute.ACL)) {\n      FsPermission perm \u003d src.stat.getPermission();\n      if (perm.getAclBit()) {\n        List\u003cAclEntry\u003e srcEntries \u003d\n            src.fs.getAclStatus(src.path).getEntries();\n        List\u003cAclEntry\u003e srcFullEntries \u003d\n            AclUtil.getAclFromPermAndEntries(perm, srcEntries);\n        target.fs.setAcl(target.path, srcFullEntries);\n      }\n    }\n    final boolean preserveXAttrs \u003d shouldPreserve(FileAttribute.XATTR);\n    if (preserveXAttrs || preserveRawXAttrs) {\n      Map\u003cString, byte[]\u003e srcXAttrs \u003d src.fs.getXAttrs(src.path);\n      if (srcXAttrs !\u003d null) {\n        Iterator\u003cEntry\u003cString, byte[]\u003e\u003e iter \u003d srcXAttrs.entrySet().iterator();\n        while (iter.hasNext()) {\n          Entry\u003cString, byte[]\u003e entry \u003d iter.next();\n          final String xattrName \u003d entry.getKey();\n          if (xattrName.startsWith(RAW) || preserveXAttrs) {\n            target.fs.setXAttr(target.path, entry.getKey(), entry.getValue());\n          }\n        }\n      }\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/CommandWithDestination.java",
          "extendedDetails": {}
        }
      ]
    },
    "c3e26735a662e478005c8c75b0909797a22cd640": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-9705. FsShell cp -p does not preserve directory attibutes. Contributed by Akira AJISAKA.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1605672 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/06/14 10:36 PM",
      "commitName": "c3e26735a662e478005c8c75b0909797a22cd640",
      "commitAuthor": "Chris Nauroth",
      "diff": "@@ -0,0 +1,41 @@\n+  protected void preserveAttributes(PathData src, PathData target)\n+      throws IOException {\n+    if (shouldPreserve(FileAttribute.TIMESTAMPS)) {\n+      target.fs.setTimes(\n+          target.path,\n+          src.stat.getModificationTime(),\n+          src.stat.getAccessTime());\n+    }\n+    if (shouldPreserve(FileAttribute.OWNERSHIP)) {\n+      target.fs.setOwner(\n+          target.path,\n+          src.stat.getOwner(),\n+          src.stat.getGroup());\n+    }\n+    if (shouldPreserve(FileAttribute.PERMISSION) ||\n+        shouldPreserve(FileAttribute.ACL)) {\n+      target.fs.setPermission(\n+          target.path,\n+          src.stat.getPermission());\n+    }\n+    if (shouldPreserve(FileAttribute.ACL)) {\n+      FsPermission perm \u003d src.stat.getPermission();\n+      if (perm.getAclBit()) {\n+        List\u003cAclEntry\u003e srcEntries \u003d\n+            src.fs.getAclStatus(src.path).getEntries();\n+        List\u003cAclEntry\u003e srcFullEntries \u003d\n+            AclUtil.getAclFromPermAndEntries(perm, srcEntries);\n+        target.fs.setAcl(target.path, srcFullEntries);\n+      }\n+    }\n+    if (shouldPreserve(FileAttribute.XATTR)) {\n+      Map\u003cString, byte[]\u003e srcXAttrs \u003d src.fs.getXAttrs(src.path);\n+      if (srcXAttrs !\u003d null) {\n+        Iterator\u003cEntry\u003cString, byte[]\u003e\u003e iter \u003d srcXAttrs.entrySet().iterator();\n+        while (iter.hasNext()) {\n+          Entry\u003cString, byte[]\u003e entry \u003d iter.next();\n+          target.fs.setXAttr(target.path, entry.getKey(), entry.getValue());\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void preserveAttributes(PathData src, PathData target)\n      throws IOException {\n    if (shouldPreserve(FileAttribute.TIMESTAMPS)) {\n      target.fs.setTimes(\n          target.path,\n          src.stat.getModificationTime(),\n          src.stat.getAccessTime());\n    }\n    if (shouldPreserve(FileAttribute.OWNERSHIP)) {\n      target.fs.setOwner(\n          target.path,\n          src.stat.getOwner(),\n          src.stat.getGroup());\n    }\n    if (shouldPreserve(FileAttribute.PERMISSION) ||\n        shouldPreserve(FileAttribute.ACL)) {\n      target.fs.setPermission(\n          target.path,\n          src.stat.getPermission());\n    }\n    if (shouldPreserve(FileAttribute.ACL)) {\n      FsPermission perm \u003d src.stat.getPermission();\n      if (perm.getAclBit()) {\n        List\u003cAclEntry\u003e srcEntries \u003d\n            src.fs.getAclStatus(src.path).getEntries();\n        List\u003cAclEntry\u003e srcFullEntries \u003d\n            AclUtil.getAclFromPermAndEntries(perm, srcEntries);\n        target.fs.setAcl(target.path, srcFullEntries);\n      }\n    }\n    if (shouldPreserve(FileAttribute.XATTR)) {\n      Map\u003cString, byte[]\u003e srcXAttrs \u003d src.fs.getXAttrs(src.path);\n      if (srcXAttrs !\u003d null) {\n        Iterator\u003cEntry\u003cString, byte[]\u003e\u003e iter \u003d srcXAttrs.entrySet().iterator();\n        while (iter.hasNext()) {\n          Entry\u003cString, byte[]\u003e entry \u003d iter.next();\n          target.fs.setXAttr(target.path, entry.getKey(), entry.getValue());\n        }\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/CommandWithDestination.java"
    }
  }
}