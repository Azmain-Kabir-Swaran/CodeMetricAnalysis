{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "KeyAuthorizationKeyProvider.java",
  "functionName": "authorizeCreateKey",
  "functionId": "authorizeCreateKey___keyName-String__options-Options__ugi-UserGroupInformation",
  "sourceFilePath": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KeyAuthorizationKeyProvider.java",
  "functionStartLine": 113,
  "functionEndLine": 137,
  "numCommitsSeen": 10,
  "timeTaken": 653,
  "changeHistory": [
    "b02a4b40610e93eef6559db09a11d287e859446d"
  ],
  "changeHistoryShort": {
    "b02a4b40610e93eef6559db09a11d287e859446d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b02a4b40610e93eef6559db09a11d287e859446d": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10758. KMS: add ACLs on per key basis. (tucu)\n",
      "commitDate": "10/09/14 2:26 PM",
      "commitName": "b02a4b40610e93eef6559db09a11d287e859446d",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,25 @@\n+  private void authorizeCreateKey(String keyName, Options options,\n+      UserGroupInformation ugi) throws IOException{\n+    Preconditions.checkNotNull(ugi, \"UserGroupInformation cannot be null\");\n+    Map\u003cString, String\u003e attributes \u003d options.getAttributes();\n+    String aclName \u003d attributes.get(KEY_ACL_NAME);\n+    boolean success \u003d false;\n+    if (Strings.isNullOrEmpty(aclName)) {\n+      if (acls.isACLPresent(keyName, KeyOpType.MANAGEMENT)) {\n+        options.setAttributes(ImmutableMap.\u003cString, String\u003e builder()\n+            .putAll(attributes).put(KEY_ACL_NAME, keyName).build());\n+        success \u003d\n+            acls.hasAccessToKey(keyName, ugi, KeyOpType.MANAGEMENT)\n+                || acls.hasAccessToKey(keyName, ugi, KeyOpType.ALL);\n+      } else {\n+        success \u003d false;\n+      }\n+    } else {\n+      success \u003d acls.isACLPresent(aclName, KeyOpType.MANAGEMENT) \u0026\u0026\n+          (acls.hasAccessToKey(aclName, ugi, KeyOpType.MANAGEMENT)\n+          || acls.hasAccessToKey(aclName, ugi, KeyOpType.ALL));\n+    }\n+    if (!success)\n+      throw new AuthorizationException(String.format(\"User [%s] is not\"\n+          + \" authorized to create key !!\", ugi.getShortUserName()));\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void authorizeCreateKey(String keyName, Options options,\n      UserGroupInformation ugi) throws IOException{\n    Preconditions.checkNotNull(ugi, \"UserGroupInformation cannot be null\");\n    Map\u003cString, String\u003e attributes \u003d options.getAttributes();\n    String aclName \u003d attributes.get(KEY_ACL_NAME);\n    boolean success \u003d false;\n    if (Strings.isNullOrEmpty(aclName)) {\n      if (acls.isACLPresent(keyName, KeyOpType.MANAGEMENT)) {\n        options.setAttributes(ImmutableMap.\u003cString, String\u003e builder()\n            .putAll(attributes).put(KEY_ACL_NAME, keyName).build());\n        success \u003d\n            acls.hasAccessToKey(keyName, ugi, KeyOpType.MANAGEMENT)\n                || acls.hasAccessToKey(keyName, ugi, KeyOpType.ALL);\n      } else {\n        success \u003d false;\n      }\n    } else {\n      success \u003d acls.isACLPresent(aclName, KeyOpType.MANAGEMENT) \u0026\u0026\n          (acls.hasAccessToKey(aclName, ugi, KeyOpType.MANAGEMENT)\n          || acls.hasAccessToKey(aclName, ugi, KeyOpType.ALL));\n    }\n    if (!success)\n      throw new AuthorizationException(String.format(\"User [%s] is not\"\n          + \" authorized to create key !!\", ugi.getShortUserName()));\n  }",
      "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KeyAuthorizationKeyProvider.java"
    }
  }
}