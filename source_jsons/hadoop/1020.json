{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FileChecksumHelper.java",
  "functionName": "tryDatanode",
  "functionId": "tryDatanode___locatedBlock-LocatedBlock__datanode-DatanodeInfo",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/FileChecksumHelper.java",
  "functionStartLine": 569,
  "functionEndLine": 601,
  "numCommitsSeen": 9,
  "timeTaken": 1320,
  "changeHistory": [
    "7c9cdad6d04c98db5a83e2108219bf6e6c903daf",
    "307ec80acae3b4a41d21b2d4b3a55032e55fcdc6"
  ],
  "changeHistoryShort": {
    "7c9cdad6d04c98db5a83e2108219bf6e6c903daf": "Ybodychange",
    "307ec80acae3b4a41d21b2d4b3a55032e55fcdc6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7c9cdad6d04c98db5a83e2108219bf6e6c903daf": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13056. Expose file-level composite CRCs in HDFS which are comparable across different instances/layouts. Contributed by Dennis Huo.\n",
      "commitDate": "10/04/18 9:31 PM",
      "commitName": "7c9cdad6d04c98db5a83e2108219bf6e6c903daf",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "03/01/18 2:54 PM",
      "commitNameOld": "3ba985997d1dc37e5ba017dd0ab1d36083b5f77b",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 97.23,
      "commitsBetweenForRepo": 742,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,71 +1,33 @@\n     private void tryDatanode(LocatedBlock locatedBlock,\n                              DatanodeInfo datanode) throws IOException {\n \n       ExtendedBlock block \u003d locatedBlock.getBlock();\n \n       try (IOStreamPair pair \u003d getClient().connectToDN(datanode, getTimeout(),\n           locatedBlock.getBlockToken())) {\n \n         LOG.debug(\"write to {}: {}, block\u003d{}\", datanode,\n             Op.BLOCK_CHECKSUM, block);\n \n-        // get block MD5\n-        createSender(pair).blockChecksum(block,\n-            locatedBlock.getBlockToken());\n+        // get block checksum\n+        createSender(pair).blockChecksum(\n+            block,\n+            locatedBlock.getBlockToken(),\n+            new BlockChecksumOptions(getBlockChecksumType()));\n \n         final BlockOpResponseProto reply \u003d BlockOpResponseProto.parseFrom(\n             PBHelperClient.vintPrefixed(pair.in));\n \n         String logInfo \u003d \"for block \" + block + \" from datanode \" +\n             datanode;\n         DataTransferProtoUtil.checkBlockOpStatus(reply, logInfo);\n \n         OpBlockChecksumResponseProto checksumData \u003d\n             reply.getChecksumResponse();\n-\n-        //read byte-per-checksum\n-        final int bpc \u003d checksumData.getBytesPerCrc();\n-        if (blockIdx \u003d\u003d 0) { //first block\n-          setBytesPerCRC(bpc);\n-        } else if (bpc !\u003d getBytesPerCRC()) {\n-          throw new IOException(\"Byte-per-checksum not matched: bpc\u003d\" + bpc\n-              + \" but bytesPerCRC\u003d\" + getBytesPerCRC());\n-        }\n-\n-        //read crc-per-block\n-        final long cpb \u003d checksumData.getCrcPerBlock();\n-        if (getLocatedBlocks().size() \u003e 1 \u0026\u0026 blockIdx \u003d\u003d 0) {\n-          setCrcPerBlock(cpb);\n-        }\n-\n-        //read md5\n-        final MD5Hash md5 \u003d new MD5Hash(checksumData.getMd5().toByteArray());\n-        md5.write(getMd5out());\n-\n-        // read crc-type\n-        final DataChecksum.Type ct;\n-        if (checksumData.hasCrcType()) {\n-          ct \u003d PBHelperClient.convert(checksumData.getCrcType());\n-        } else {\n-          LOG.debug(\"Retrieving checksum from an earlier-version DataNode: \" +\n-              \"inferring checksum by reading first byte\");\n-          ct \u003d getClient().inferChecksumTypeByReading(locatedBlock, datanode);\n-        }\n-\n-        if (blockIdx \u003d\u003d 0) { // first block\n-          setCrcType(ct);\n-        } else if (getCrcType() !\u003d DataChecksum.Type.MIXED\n-            \u0026\u0026 getCrcType() !\u003d ct) {\n-          // if crc types are mixed in a file\n-          setCrcType(DataChecksum.Type.MIXED);\n-        }\n-\n-        if (LOG.isDebugEnabled()) {\n-          if (blockIdx \u003d\u003d 0) {\n-            LOG.debug(\"set bytesPerCRC\u003d\" + getBytesPerCRC()\n-                + \", crcPerBlock\u003d\" + getCrcPerBlock());\n-          }\n-          LOG.debug(\"got reply from \" + datanode + \": md5\u003d\" + md5);\n-        }\n+        extractChecksumProperties(\n+            checksumData, locatedBlock, datanode, blockIdx);\n+        String blockChecksumForDebug \u003d populateBlockChecksumBuf(checksumData);\n+        LOG.debug(\"got reply from {}: blockChecksum\u003d{}, blockChecksumType\u003d{}\",\n+            datanode, blockChecksumForDebug, getBlockChecksumType());\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void tryDatanode(LocatedBlock locatedBlock,\n                             DatanodeInfo datanode) throws IOException {\n\n      ExtendedBlock block \u003d locatedBlock.getBlock();\n\n      try (IOStreamPair pair \u003d getClient().connectToDN(datanode, getTimeout(),\n          locatedBlock.getBlockToken())) {\n\n        LOG.debug(\"write to {}: {}, block\u003d{}\", datanode,\n            Op.BLOCK_CHECKSUM, block);\n\n        // get block checksum\n        createSender(pair).blockChecksum(\n            block,\n            locatedBlock.getBlockToken(),\n            new BlockChecksumOptions(getBlockChecksumType()));\n\n        final BlockOpResponseProto reply \u003d BlockOpResponseProto.parseFrom(\n            PBHelperClient.vintPrefixed(pair.in));\n\n        String logInfo \u003d \"for block \" + block + \" from datanode \" +\n            datanode;\n        DataTransferProtoUtil.checkBlockOpStatus(reply, logInfo);\n\n        OpBlockChecksumResponseProto checksumData \u003d\n            reply.getChecksumResponse();\n        extractChecksumProperties(\n            checksumData, locatedBlock, datanode, blockIdx);\n        String blockChecksumForDebug \u003d populateBlockChecksumBuf(checksumData);\n        LOG.debug(\"got reply from {}: blockChecksum\u003d{}, blockChecksumType\u003d{}\",\n            datanode, blockChecksumForDebug, getBlockChecksumType());\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/FileChecksumHelper.java",
      "extendedDetails": {}
    },
    "307ec80acae3b4a41d21b2d4b3a55032e55fcdc6": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-9733. Refactor DFSClient#getFileChecksum and DataXceiver#blockChecksum. Contributed by Kai Zheng\n",
      "commitDate": "29/02/16 9:52 PM",
      "commitName": "307ec80acae3b4a41d21b2d4b3a55032e55fcdc6",
      "commitAuthor": "Uma Maheswara Rao G",
      "diff": "@@ -0,0 +1,73 @@\n+    private void tryDatanode(LocatedBlock locatedBlock,\n+                             DatanodeInfo datanode) throws IOException {\n+\n+      ExtendedBlock block \u003d locatedBlock.getBlock();\n+\n+      try (IOStreamPair pair \u003d getClient().connectToDN(datanode, getTimeout(),\n+          locatedBlock.getBlockToken())) {\n+\n+        LOG.debug(\"write to {}: {}, block\u003d{}\", datanode,\n+            Op.BLOCK_CHECKSUM, block);\n+\n+        // get block MD5\n+        createSender(pair).blockChecksum(block,\n+            locatedBlock.getBlockToken());\n+\n+        final BlockOpResponseProto reply \u003d BlockOpResponseProto.parseFrom(\n+            PBHelperClient.vintPrefixed(pair.in));\n+\n+        String logInfo \u003d \"for block \" + block + \" from datanode \" +\n+            datanode;\n+        DataTransferProtoUtil.checkBlockOpStatus(reply, logInfo);\n+\n+        OpBlockChecksumResponseProto checksumData \u003d\n+            reply.getChecksumResponse();\n+\n+        //read byte-per-checksum\n+        final int bpc \u003d checksumData.getBytesPerCrc();\n+        if (blockIdx \u003d\u003d 0) { //first block\n+          setBytesPerCRC(bpc);\n+        } else if (bpc !\u003d getBytesPerCRC()) {\n+          throw new IOException(\"Byte-per-checksum not matched: bpc\u003d\" + bpc\n+              + \" but bytesPerCRC\u003d\" + getBytesPerCRC());\n+        }\n+\n+        //read crc-per-block\n+        final long cpb \u003d checksumData.getCrcPerBlock();\n+        if (getLocatedBlocks().size() \u003e 1 \u0026\u0026 blockIdx \u003d\u003d 0) {\n+          setCrcPerBlock(cpb);\n+        }\n+\n+        //read md5\n+        final MD5Hash md5 \u003d new MD5Hash(\n+            checksumData.getMd5().toByteArray());\n+        md5.write(getMd5out());\n+\n+        // read crc-type\n+        final DataChecksum.Type ct;\n+        if (checksumData.hasCrcType()) {\n+          ct \u003d PBHelperClient.convert(checksumData\n+              .getCrcType());\n+        } else {\n+          LOG.debug(\"Retrieving checksum from an earlier-version DataNode: \" +\n+              \"inferring checksum by reading first byte\");\n+          ct \u003d getClient().inferChecksumTypeByReading(locatedBlock, datanode);\n+        }\n+\n+        if (blockIdx \u003d\u003d 0) { // first block\n+          setCrcType(ct);\n+        } else if (getCrcType() !\u003d DataChecksum.Type.MIXED\n+            \u0026\u0026 getCrcType() !\u003d ct) {\n+          // if crc types are mixed in a file\n+          setCrcType(DataChecksum.Type.MIXED);\n+        }\n+\n+        if (LOG.isDebugEnabled()) {\n+          if (blockIdx \u003d\u003d 0) {\n+            LOG.debug(\"set bytesPerCRC\u003d\" + getBytesPerCRC()\n+                + \", crcPerBlock\u003d\" + getCrcPerBlock());\n+          }\n+          LOG.debug(\"got reply from \" + datanode + \": md5\u003d\" + md5);\n+        }\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void tryDatanode(LocatedBlock locatedBlock,\n                             DatanodeInfo datanode) throws IOException {\n\n      ExtendedBlock block \u003d locatedBlock.getBlock();\n\n      try (IOStreamPair pair \u003d getClient().connectToDN(datanode, getTimeout(),\n          locatedBlock.getBlockToken())) {\n\n        LOG.debug(\"write to {}: {}, block\u003d{}\", datanode,\n            Op.BLOCK_CHECKSUM, block);\n\n        // get block MD5\n        createSender(pair).blockChecksum(block,\n            locatedBlock.getBlockToken());\n\n        final BlockOpResponseProto reply \u003d BlockOpResponseProto.parseFrom(\n            PBHelperClient.vintPrefixed(pair.in));\n\n        String logInfo \u003d \"for block \" + block + \" from datanode \" +\n            datanode;\n        DataTransferProtoUtil.checkBlockOpStatus(reply, logInfo);\n\n        OpBlockChecksumResponseProto checksumData \u003d\n            reply.getChecksumResponse();\n\n        //read byte-per-checksum\n        final int bpc \u003d checksumData.getBytesPerCrc();\n        if (blockIdx \u003d\u003d 0) { //first block\n          setBytesPerCRC(bpc);\n        } else if (bpc !\u003d getBytesPerCRC()) {\n          throw new IOException(\"Byte-per-checksum not matched: bpc\u003d\" + bpc\n              + \" but bytesPerCRC\u003d\" + getBytesPerCRC());\n        }\n\n        //read crc-per-block\n        final long cpb \u003d checksumData.getCrcPerBlock();\n        if (getLocatedBlocks().size() \u003e 1 \u0026\u0026 blockIdx \u003d\u003d 0) {\n          setCrcPerBlock(cpb);\n        }\n\n        //read md5\n        final MD5Hash md5 \u003d new MD5Hash(\n            checksumData.getMd5().toByteArray());\n        md5.write(getMd5out());\n\n        // read crc-type\n        final DataChecksum.Type ct;\n        if (checksumData.hasCrcType()) {\n          ct \u003d PBHelperClient.convert(checksumData\n              .getCrcType());\n        } else {\n          LOG.debug(\"Retrieving checksum from an earlier-version DataNode: \" +\n              \"inferring checksum by reading first byte\");\n          ct \u003d getClient().inferChecksumTypeByReading(locatedBlock, datanode);\n        }\n\n        if (blockIdx \u003d\u003d 0) { // first block\n          setCrcType(ct);\n        } else if (getCrcType() !\u003d DataChecksum.Type.MIXED\n            \u0026\u0026 getCrcType() !\u003d ct) {\n          // if crc types are mixed in a file\n          setCrcType(DataChecksum.Type.MIXED);\n        }\n\n        if (LOG.isDebugEnabled()) {\n          if (blockIdx \u003d\u003d 0) {\n            LOG.debug(\"set bytesPerCRC\u003d\" + getBytesPerCRC()\n                + \", crcPerBlock\u003d\" + getCrcPerBlock());\n          }\n          LOG.debug(\"got reply from \" + datanode + \": md5\u003d\" + md5);\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/FileChecksumHelper.java"
    }
  }
}