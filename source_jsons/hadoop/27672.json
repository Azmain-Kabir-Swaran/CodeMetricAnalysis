{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractConfigurableFederationPolicy.java",
  "functionName": "reinitialize",
  "functionId": "reinitialize___initializationContext-FederationPolicyInitializationContext",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/policies/AbstractConfigurableFederationPolicy.java",
  "functionStartLine": 44,
  "functionEndLine": 65,
  "numCommitsSeen": 3,
  "timeTaken": 1720,
  "changeHistory": [
    "1dadd0b45a6a605da72eb304808edb49fc66da45",
    "0662996b6af19deece21b95b961d9362accc5159"
  ],
  "changeHistoryShort": {
    "1dadd0b45a6a605da72eb304808edb49fc66da45": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
    "0662996b6af19deece21b95b961d9362accc5159": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1dadd0b45a6a605da72eb304808edb49fc66da45": {
      "type": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-5325. Stateless ARMRMProxy policies implementation. (Carlo Curino via Subru).\n\n(cherry picked from commit 11c5336522d3504598fb94eee288d54df73418c6)\n",
      "commitDate": "01/08/17 5:28 PM",
      "commitName": "1dadd0b45a6a605da72eb304808edb49fc66da45",
      "commitAuthor": "Subru Krishnan",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-5325. Stateless ARMRMProxy policies implementation. (Carlo Curino via Subru).\n\n(cherry picked from commit 11c5336522d3504598fb94eee288d54df73418c6)\n",
          "commitDate": "01/08/17 5:28 PM",
          "commitName": "1dadd0b45a6a605da72eb304808edb49fc66da45",
          "commitAuthor": "Subru Krishnan",
          "commitDateOld": "01/08/17 5:28 PM",
          "commitNameOld": "0662996b6af19deece21b95b961d9362accc5159",
          "commitAuthorOld": "Subru Krishnan",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,22 @@\n-  public void reinitialize(FederationPolicyInitializationContext\n-      federationPolicyContext)\n+  public void reinitialize(\n+      FederationPolicyInitializationContext initializationContext)\n       throws FederationPolicyInitializationException {\n+    isDirty \u003d true;\n     FederationPolicyInitializationContextValidator\n-        .validate(federationPolicyContext, this.getClass().getCanonicalName());\n+        .validate(initializationContext, this.getClass().getCanonicalName());\n \n     // perform consistency checks\n-    WeightedPolicyInfo newPolicyInfo \u003d WeightedPolicyInfo\n-        .fromByteBuffer(\n-            federationPolicyContext.getSubClusterPolicyConfiguration()\n-                .getParams());\n+    WeightedPolicyInfo newPolicyInfo \u003d WeightedPolicyInfo.fromByteBuffer(\n+        initializationContext.getSubClusterPolicyConfiguration().getParams());\n \n     // if nothing has changed skip the rest of initialization\n+    // and signal to childs that the reinit is free via isDirty var.\n     if (policyInfo !\u003d null \u0026\u0026 policyInfo.equals(newPolicyInfo)) {\n+      isDirty \u003d false;\n       return;\n     }\n \n     validate(newPolicyInfo);\n     setPolicyInfo(newPolicyInfo);\n-    this.policyContext \u003d federationPolicyContext;\n+    this.policyContext \u003d initializationContext;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void reinitialize(\n      FederationPolicyInitializationContext initializationContext)\n      throws FederationPolicyInitializationException {\n    isDirty \u003d true;\n    FederationPolicyInitializationContextValidator\n        .validate(initializationContext, this.getClass().getCanonicalName());\n\n    // perform consistency checks\n    WeightedPolicyInfo newPolicyInfo \u003d WeightedPolicyInfo.fromByteBuffer(\n        initializationContext.getSubClusterPolicyConfiguration().getParams());\n\n    // if nothing has changed skip the rest of initialization\n    // and signal to childs that the reinit is free via isDirty var.\n    if (policyInfo !\u003d null \u0026\u0026 policyInfo.equals(newPolicyInfo)) {\n      isDirty \u003d false;\n      return;\n    }\n\n    validate(newPolicyInfo);\n    setPolicyInfo(newPolicyInfo);\n    this.policyContext \u003d initializationContext;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/policies/AbstractConfigurableFederationPolicy.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/policies/router/BaseWeightedRouterPolicy.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/policies/AbstractConfigurableFederationPolicy.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5325. Stateless ARMRMProxy policies implementation. (Carlo Curino via Subru).\n\n(cherry picked from commit 11c5336522d3504598fb94eee288d54df73418c6)\n",
          "commitDate": "01/08/17 5:28 PM",
          "commitName": "1dadd0b45a6a605da72eb304808edb49fc66da45",
          "commitAuthor": "Subru Krishnan",
          "commitDateOld": "01/08/17 5:28 PM",
          "commitNameOld": "0662996b6af19deece21b95b961d9362accc5159",
          "commitAuthorOld": "Subru Krishnan",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,22 @@\n-  public void reinitialize(FederationPolicyInitializationContext\n-      federationPolicyContext)\n+  public void reinitialize(\n+      FederationPolicyInitializationContext initializationContext)\n       throws FederationPolicyInitializationException {\n+    isDirty \u003d true;\n     FederationPolicyInitializationContextValidator\n-        .validate(federationPolicyContext, this.getClass().getCanonicalName());\n+        .validate(initializationContext, this.getClass().getCanonicalName());\n \n     // perform consistency checks\n-    WeightedPolicyInfo newPolicyInfo \u003d WeightedPolicyInfo\n-        .fromByteBuffer(\n-            federationPolicyContext.getSubClusterPolicyConfiguration()\n-                .getParams());\n+    WeightedPolicyInfo newPolicyInfo \u003d WeightedPolicyInfo.fromByteBuffer(\n+        initializationContext.getSubClusterPolicyConfiguration().getParams());\n \n     // if nothing has changed skip the rest of initialization\n+    // and signal to childs that the reinit is free via isDirty var.\n     if (policyInfo !\u003d null \u0026\u0026 policyInfo.equals(newPolicyInfo)) {\n+      isDirty \u003d false;\n       return;\n     }\n \n     validate(newPolicyInfo);\n     setPolicyInfo(newPolicyInfo);\n-    this.policyContext \u003d federationPolicyContext;\n+    this.policyContext \u003d initializationContext;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void reinitialize(\n      FederationPolicyInitializationContext initializationContext)\n      throws FederationPolicyInitializationException {\n    isDirty \u003d true;\n    FederationPolicyInitializationContextValidator\n        .validate(initializationContext, this.getClass().getCanonicalName());\n\n    // perform consistency checks\n    WeightedPolicyInfo newPolicyInfo \u003d WeightedPolicyInfo.fromByteBuffer(\n        initializationContext.getSubClusterPolicyConfiguration().getParams());\n\n    // if nothing has changed skip the rest of initialization\n    // and signal to childs that the reinit is free via isDirty var.\n    if (policyInfo !\u003d null \u0026\u0026 policyInfo.equals(newPolicyInfo)) {\n      isDirty \u003d false;\n      return;\n    }\n\n    validate(newPolicyInfo);\n    setPolicyInfo(newPolicyInfo);\n    this.policyContext \u003d initializationContext;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/policies/AbstractConfigurableFederationPolicy.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5325. Stateless ARMRMProxy policies implementation. (Carlo Curino via Subru).\n\n(cherry picked from commit 11c5336522d3504598fb94eee288d54df73418c6)\n",
          "commitDate": "01/08/17 5:28 PM",
          "commitName": "1dadd0b45a6a605da72eb304808edb49fc66da45",
          "commitAuthor": "Subru Krishnan",
          "commitDateOld": "01/08/17 5:28 PM",
          "commitNameOld": "0662996b6af19deece21b95b961d9362accc5159",
          "commitAuthorOld": "Subru Krishnan",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,22 @@\n-  public void reinitialize(FederationPolicyInitializationContext\n-      federationPolicyContext)\n+  public void reinitialize(\n+      FederationPolicyInitializationContext initializationContext)\n       throws FederationPolicyInitializationException {\n+    isDirty \u003d true;\n     FederationPolicyInitializationContextValidator\n-        .validate(federationPolicyContext, this.getClass().getCanonicalName());\n+        .validate(initializationContext, this.getClass().getCanonicalName());\n \n     // perform consistency checks\n-    WeightedPolicyInfo newPolicyInfo \u003d WeightedPolicyInfo\n-        .fromByteBuffer(\n-            federationPolicyContext.getSubClusterPolicyConfiguration()\n-                .getParams());\n+    WeightedPolicyInfo newPolicyInfo \u003d WeightedPolicyInfo.fromByteBuffer(\n+        initializationContext.getSubClusterPolicyConfiguration().getParams());\n \n     // if nothing has changed skip the rest of initialization\n+    // and signal to childs that the reinit is free via isDirty var.\n     if (policyInfo !\u003d null \u0026\u0026 policyInfo.equals(newPolicyInfo)) {\n+      isDirty \u003d false;\n       return;\n     }\n \n     validate(newPolicyInfo);\n     setPolicyInfo(newPolicyInfo);\n-    this.policyContext \u003d federationPolicyContext;\n+    this.policyContext \u003d initializationContext;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void reinitialize(\n      FederationPolicyInitializationContext initializationContext)\n      throws FederationPolicyInitializationException {\n    isDirty \u003d true;\n    FederationPolicyInitializationContextValidator\n        .validate(initializationContext, this.getClass().getCanonicalName());\n\n    // perform consistency checks\n    WeightedPolicyInfo newPolicyInfo \u003d WeightedPolicyInfo.fromByteBuffer(\n        initializationContext.getSubClusterPolicyConfiguration().getParams());\n\n    // if nothing has changed skip the rest of initialization\n    // and signal to childs that the reinit is free via isDirty var.\n    if (policyInfo !\u003d null \u0026\u0026 policyInfo.equals(newPolicyInfo)) {\n      isDirty \u003d false;\n      return;\n    }\n\n    validate(newPolicyInfo);\n    setPolicyInfo(newPolicyInfo);\n    this.policyContext \u003d initializationContext;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/policies/AbstractConfigurableFederationPolicy.java",
          "extendedDetails": {
            "oldValue": "[federationPolicyContext-FederationPolicyInitializationContext]",
            "newValue": "[initializationContext-FederationPolicyInitializationContext]"
          }
        }
      ]
    },
    "0662996b6af19deece21b95b961d9362accc5159": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5324. Stateless Federation router policies implementation. (Carlo Curino via Subru).\n\n(cherry picked from commit 1298127bdad60a961441dc7e25cdc2553c119f33)\n",
      "commitDate": "01/08/17 5:28 PM",
      "commitName": "0662996b6af19deece21b95b961d9362accc5159",
      "commitAuthor": "Subru Krishnan",
      "diff": "@@ -0,0 +1,21 @@\n+  public void reinitialize(FederationPolicyInitializationContext\n+      federationPolicyContext)\n+      throws FederationPolicyInitializationException {\n+    FederationPolicyInitializationContextValidator\n+        .validate(federationPolicyContext, this.getClass().getCanonicalName());\n+\n+    // perform consistency checks\n+    WeightedPolicyInfo newPolicyInfo \u003d WeightedPolicyInfo\n+        .fromByteBuffer(\n+            federationPolicyContext.getSubClusterPolicyConfiguration()\n+                .getParams());\n+\n+    // if nothing has changed skip the rest of initialization\n+    if (policyInfo !\u003d null \u0026\u0026 policyInfo.equals(newPolicyInfo)) {\n+      return;\n+    }\n+\n+    validate(newPolicyInfo);\n+    setPolicyInfo(newPolicyInfo);\n+    this.policyContext \u003d federationPolicyContext;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void reinitialize(FederationPolicyInitializationContext\n      federationPolicyContext)\n      throws FederationPolicyInitializationException {\n    FederationPolicyInitializationContextValidator\n        .validate(federationPolicyContext, this.getClass().getCanonicalName());\n\n    // perform consistency checks\n    WeightedPolicyInfo newPolicyInfo \u003d WeightedPolicyInfo\n        .fromByteBuffer(\n            federationPolicyContext.getSubClusterPolicyConfiguration()\n                .getParams());\n\n    // if nothing has changed skip the rest of initialization\n    if (policyInfo !\u003d null \u0026\u0026 policyInfo.equals(newPolicyInfo)) {\n      return;\n    }\n\n    validate(newPolicyInfo);\n    setPolicyInfo(newPolicyInfo);\n    this.policyContext \u003d federationPolicyContext;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/policies/router/BaseWeightedRouterPolicy.java"
    }
  }
}