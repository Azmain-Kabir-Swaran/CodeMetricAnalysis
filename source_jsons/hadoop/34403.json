{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ResourceLocalizationService.java",
  "functionName": "handleInitApplicationResources",
  "functionId": "handleInitApplicationResources___app-Application",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
  "functionStartLine": 468,
  "functionEndLine": 483,
  "numCommitsSeen": 106,
  "timeTaken": 3388,
  "changeHistory": [
    "aea42930bbb9566ea6988f684dbd72a72a2bdadf",
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
    "66598697a6e777615334ebde5ba7738135da83ae",
    "b96d18bd23d104c4fbf5ff8ee38c72f09f30b39a",
    "e67e3ff05db26437b1d7c6d3dd958362fb8425db",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "11b9dd4e844c762f8c53e5fafa25f29eece1bc87"
  ],
  "changeHistoryShort": {
    "aea42930bbb9566ea6988f684dbd72a72a2bdadf": "Ybodychange",
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": "Ybodychange",
    "66598697a6e777615334ebde5ba7738135da83ae": "Ybodychange",
    "b96d18bd23d104c4fbf5ff8ee38c72f09f30b39a": "Ybodychange",
    "e67e3ff05db26437b1d7c6d3dd958362fb8425db": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "11b9dd4e844c762f8c53e5fafa25f29eece1bc87": "Yintroduced"
  },
  "changeHistoryDetails": {
    "aea42930bbb9566ea6988f684dbd72a72a2bdadf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6641. Non-public resource localization on a bad disk causes subsequent containers failure. Contributed by Kuhu Shukla\n",
      "commitDate": "26/05/17 7:37 AM",
      "commitName": "aea42930bbb9566ea6988f684dbd72a72a2bdadf",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "10/04/17 2:56 PM",
      "commitNameOld": "e9ac61cc0e55d1a0b132c795047e959c761dc3be",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 45.7,
      "commitsBetweenForRepo": 250,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,16 @@\n   private void handleInitApplicationResources(Application app) {\n     // 0) Create application tracking structs\n     String userName \u003d app.getUser();\n     privateRsrc.putIfAbsent(userName, new LocalResourcesTrackerImpl(userName,\n-        null, dispatcher, true, super.getConfig(), stateStore));\n+        null, dispatcher, true, super.getConfig(), stateStore, dirsHandler));\n     String appIdStr \u003d app.getAppId().toString();\n     appRsrc.putIfAbsent(appIdStr, new LocalResourcesTrackerImpl(app.getUser(),\n-        app.getAppId(), dispatcher, false, super.getConfig(), stateStore));\n+        app.getAppId(), dispatcher, false, super.getConfig(), stateStore,\n+        dirsHandler));\n     // 1) Signal container init\n     //\n     // This is handled by the ApplicationImpl state machine and allows\n     // containers to proceed with launching.\n     dispatcher.getEventHandler().handle(new ApplicationInitedEvent(\n           app.getAppId()));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleInitApplicationResources(Application app) {\n    // 0) Create application tracking structs\n    String userName \u003d app.getUser();\n    privateRsrc.putIfAbsent(userName, new LocalResourcesTrackerImpl(userName,\n        null, dispatcher, true, super.getConfig(), stateStore, dirsHandler));\n    String appIdStr \u003d app.getAppId().toString();\n    appRsrc.putIfAbsent(appIdStr, new LocalResourcesTrackerImpl(app.getUser(),\n        app.getAppId(), dispatcher, false, super.getConfig(), stateStore,\n        dirsHandler));\n    // 1) Signal container init\n    //\n    // This is handled by the ApplicationImpl state machine and allows\n    // containers to proceed with launching.\n    dispatcher.getEventHandler().handle(new ApplicationInitedEvent(\n          app.getAppId()));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {}
    },
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1942. Deprecate toString/fromString methods from ConverterUtils and move them to records classes like ContainerId/ApplicationId, etc. (wangda)\n",
      "commitDate": "14/06/16 3:06 PM",
      "commitName": "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "10/02/16 10:36 PM",
      "commitNameOld": "fa00d3e20560bee412b49e5792595749a247a8ab",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 124.65,
      "commitsBetweenForRepo": 784,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,15 @@\n   private void handleInitApplicationResources(Application app) {\n     // 0) Create application tracking structs\n     String userName \u003d app.getUser();\n     privateRsrc.putIfAbsent(userName, new LocalResourcesTrackerImpl(userName,\n         null, dispatcher, true, super.getConfig(), stateStore));\n-    String appIdStr \u003d ConverterUtils.toString(app.getAppId());\n+    String appIdStr \u003d app.getAppId().toString();\n     appRsrc.putIfAbsent(appIdStr, new LocalResourcesTrackerImpl(app.getUser(),\n         app.getAppId(), dispatcher, false, super.getConfig(), stateStore));\n     // 1) Signal container init\n     //\n     // This is handled by the ApplicationImpl state machine and allows\n     // containers to proceed with launching.\n     dispatcher.getEventHandler().handle(new ApplicationInitedEvent(\n           app.getAppId()));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleInitApplicationResources(Application app) {\n    // 0) Create application tracking structs\n    String userName \u003d app.getUser();\n    privateRsrc.putIfAbsent(userName, new LocalResourcesTrackerImpl(userName,\n        null, dispatcher, true, super.getConfig(), stateStore));\n    String appIdStr \u003d app.getAppId().toString();\n    appRsrc.putIfAbsent(appIdStr, new LocalResourcesTrackerImpl(app.getUser(),\n        app.getAppId(), dispatcher, false, super.getConfig(), stateStore));\n    // 1) Signal container init\n    //\n    // This is handled by the ApplicationImpl state machine and allows\n    // containers to proceed with launching.\n    dispatcher.getEventHandler().handle(new ApplicationInitedEvent(\n          app.getAppId()));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {}
    },
    "66598697a6e777615334ebde5ba7738135da83ae": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1338. Recover localized resource cache state upon nodemanager restart (Contributed by Jason Lowe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1598640 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/05/14 8:37 AM",
      "commitName": "66598697a6e777615334ebde5ba7738135da83ae",
      "commitAuthor": "Junping Du",
      "commitDateOld": "13/03/14 5:30 PM",
      "commitNameOld": "53790d33000cb5804779a56ac3891d0e0e5a904d",
      "commitAuthorOld": "Christopher Douglas",
      "daysBetweenCommits": 77.63,
      "commitsBetweenForRepo": 478,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,15 @@\n   private void handleInitApplicationResources(Application app) {\n     // 0) Create application tracking structs\n     String userName \u003d app.getUser();\n     privateRsrc.putIfAbsent(userName, new LocalResourcesTrackerImpl(userName,\n-      dispatcher, true, super.getConfig()));\n-    if (null !\u003d appRsrc.putIfAbsent(\n-      ConverterUtils.toString(app.getAppId()),\n-      new LocalResourcesTrackerImpl(app.getUser(), dispatcher, false, super\n-        .getConfig()))) {\n-      LOG.warn(\"Initializing application \" + app + \" already present\");\n-      assert false; // TODO: FIXME assert doesn\u0027t help\n-                    // ^ The condition is benign. Tests should fail and it\n-                    // should appear in logs, but it\u0027s an internal error\n-                    // that should have no effect on applications\n-    }\n+        null, dispatcher, true, super.getConfig(), stateStore));\n+    String appIdStr \u003d ConverterUtils.toString(app.getAppId());\n+    appRsrc.putIfAbsent(appIdStr, new LocalResourcesTrackerImpl(app.getUser(),\n+        app.getAppId(), dispatcher, false, super.getConfig(), stateStore));\n     // 1) Signal container init\n     //\n     // This is handled by the ApplicationImpl state machine and allows\n     // containers to proceed with launching.\n     dispatcher.getEventHandler().handle(new ApplicationInitedEvent(\n           app.getAppId()));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleInitApplicationResources(Application app) {\n    // 0) Create application tracking structs\n    String userName \u003d app.getUser();\n    privateRsrc.putIfAbsent(userName, new LocalResourcesTrackerImpl(userName,\n        null, dispatcher, true, super.getConfig(), stateStore));\n    String appIdStr \u003d ConverterUtils.toString(app.getAppId());\n    appRsrc.putIfAbsent(appIdStr, new LocalResourcesTrackerImpl(app.getUser(),\n        app.getAppId(), dispatcher, false, super.getConfig(), stateStore));\n    // 1) Signal container init\n    //\n    // This is handled by the ApplicationImpl state machine and allows\n    // containers to proceed with launching.\n    dispatcher.getEventHandler().handle(new ApplicationInitedEvent(\n          app.getAppId()));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {}
    },
    "b96d18bd23d104c4fbf5ff8ee38c72f09f30b39a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-99. Modify private distributed cache to localize files such that no local directory hits unix file count limits and thus prevent job failures. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1465853 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/04/13 6:33 PM",
      "commitName": "b96d18bd23d104c4fbf5ff8ee38c72f09f30b39a",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "02/04/13 10:00 PM",
      "commitNameOld": "e67e3ff05db26437b1d7c6d3dd958362fb8425db",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 5.86,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n   private void handleInitApplicationResources(Application app) {\n     // 0) Create application tracking structs\n     String userName \u003d app.getUser();\n     privateRsrc.putIfAbsent(userName, new LocalResourcesTrackerImpl(userName,\n-      dispatcher, false, super.getConfig()));\n+      dispatcher, true, super.getConfig()));\n     if (null !\u003d appRsrc.putIfAbsent(\n       ConverterUtils.toString(app.getAppId()),\n       new LocalResourcesTrackerImpl(app.getUser(), dispatcher, false, super\n         .getConfig()))) {\n       LOG.warn(\"Initializing application \" + app + \" already present\");\n       assert false; // TODO: FIXME assert doesn\u0027t help\n                     // ^ The condition is benign. Tests should fail and it\n                     // should appear in logs, but it\u0027s an internal error\n                     // that should have no effect on applications\n     }\n     // 1) Signal container init\n     //\n     // This is handled by the ApplicationImpl state machine and allows\n     // containers to proceed with launching.\n     dispatcher.getEventHandler().handle(new ApplicationInitedEvent(\n           app.getAppId()));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleInitApplicationResources(Application app) {\n    // 0) Create application tracking structs\n    String userName \u003d app.getUser();\n    privateRsrc.putIfAbsent(userName, new LocalResourcesTrackerImpl(userName,\n      dispatcher, true, super.getConfig()));\n    if (null !\u003d appRsrc.putIfAbsent(\n      ConverterUtils.toString(app.getAppId()),\n      new LocalResourcesTrackerImpl(app.getUser(), dispatcher, false, super\n        .getConfig()))) {\n      LOG.warn(\"Initializing application \" + app + \" already present\");\n      assert false; // TODO: FIXME assert doesn\u0027t help\n                    // ^ The condition is benign. Tests should fail and it\n                    // should appear in logs, but it\u0027s an internal error\n                    // that should have no effect on applications\n    }\n    // 1) Signal container init\n    //\n    // This is handled by the ApplicationImpl state machine and allows\n    // containers to proceed with launching.\n    dispatcher.getEventHandler().handle(new ApplicationInitedEvent(\n          app.getAppId()));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {}
    },
    "e67e3ff05db26437b1d7c6d3dd958362fb8425db": {
      "type": "Ybodychange",
      "commitMessage": "YARN-467. Modify public distributed cache to localize files such that no local directory hits unix file count limits and thus prevent job failures. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1463823 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/04/13 10:00 PM",
      "commitName": "e67e3ff05db26437b1d7c6d3dd958362fb8425db",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "25/03/13 11:23 AM",
      "commitNameOld": "6a482a88b8f56a4c5590e71ce6713d7f63830e92",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 8.44,
      "commitsBetweenForRepo": 47,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,22 @@\n   private void handleInitApplicationResources(Application app) {\n     // 0) Create application tracking structs\n     String userName \u003d app.getUser();\n-    privateRsrc.putIfAbsent(userName,\n-        new LocalResourcesTrackerImpl(userName, dispatcher));\n-    if (null !\u003d appRsrc.putIfAbsent(ConverterUtils.toString(app.getAppId()),\n-        new LocalResourcesTrackerImpl(app.getUser(), dispatcher))) {\n+    privateRsrc.putIfAbsent(userName, new LocalResourcesTrackerImpl(userName,\n+      dispatcher, false, super.getConfig()));\n+    if (null !\u003d appRsrc.putIfAbsent(\n+      ConverterUtils.toString(app.getAppId()),\n+      new LocalResourcesTrackerImpl(app.getUser(), dispatcher, false, super\n+        .getConfig()))) {\n       LOG.warn(\"Initializing application \" + app + \" already present\");\n       assert false; // TODO: FIXME assert doesn\u0027t help\n                     // ^ The condition is benign. Tests should fail and it\n-                    //   should appear in logs, but it\u0027s an internal error\n-                    //   that should have no effect on applications\n+                    // should appear in logs, but it\u0027s an internal error\n+                    // that should have no effect on applications\n     }\n     // 1) Signal container init\n     //\n     // This is handled by the ApplicationImpl state machine and allows\n     // containers to proceed with launching.\n     dispatcher.getEventHandler().handle(new ApplicationInitedEvent(\n           app.getAppId()));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleInitApplicationResources(Application app) {\n    // 0) Create application tracking structs\n    String userName \u003d app.getUser();\n    privateRsrc.putIfAbsent(userName, new LocalResourcesTrackerImpl(userName,\n      dispatcher, false, super.getConfig()));\n    if (null !\u003d appRsrc.putIfAbsent(\n      ConverterUtils.toString(app.getAppId()),\n      new LocalResourcesTrackerImpl(app.getUser(), dispatcher, false, super\n        .getConfig()))) {\n      LOG.warn(\"Initializing application \" + app + \" already present\");\n      assert false; // TODO: FIXME assert doesn\u0027t help\n                    // ^ The condition is benign. Tests should fail and it\n                    // should appear in logs, but it\u0027s an internal error\n                    // that should have no effect on applications\n    }\n    // 1) Signal container init\n    //\n    // This is handled by the ApplicationImpl state machine and allows\n    // containers to proceed with launching.\n    dispatcher.getEventHandler().handle(new ApplicationInitedEvent(\n          app.getAppId()));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void handleInitApplicationResources(Application app) {\n    // 0) Create application tracking structs\n    String userName \u003d app.getUser();\n    privateRsrc.putIfAbsent(userName,\n        new LocalResourcesTrackerImpl(userName, dispatcher));\n    if (null !\u003d appRsrc.putIfAbsent(ConverterUtils.toString(app.getAppId()),\n        new LocalResourcesTrackerImpl(app.getUser(), dispatcher))) {\n      LOG.warn(\"Initializing application \" + app + \" already present\");\n      assert false; // TODO: FIXME assert doesn\u0027t help\n                    // ^ The condition is benign. Tests should fail and it\n                    //   should appear in logs, but it\u0027s an internal error\n                    //   that should have no effect on applications\n    }\n    // 1) Signal container init\n    //\n    // This is handled by the ApplicationImpl state machine and allows\n    // containers to proceed with launching.\n    dispatcher.getEventHandler().handle(new ApplicationInitedEvent(\n          app.getAppId()));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java"
      }
    },
    "11b9dd4e844c762f8c53e5fafa25f29eece1bc87": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-3161. Improved some javadocs and fixed some typos in YARN. Contributed by Todd Lipcon.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1181622 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/10/11 9:45 PM",
      "commitName": "11b9dd4e844c762f8c53e5fafa25f29eece1bc87",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,20 @@\n+  private void handleInitApplicationResources(Application app) {\n+    // 0) Create application tracking structs\n+    String userName \u003d app.getUser();\n+    privateRsrc.putIfAbsent(userName,\n+        new LocalResourcesTrackerImpl(userName, dispatcher));\n+    if (null !\u003d appRsrc.putIfAbsent(ConverterUtils.toString(app.getAppId()),\n+        new LocalResourcesTrackerImpl(app.getUser(), dispatcher))) {\n+      LOG.warn(\"Initializing application \" + app + \" already present\");\n+      assert false; // TODO: FIXME assert doesn\u0027t help\n+                    // ^ The condition is benign. Tests should fail and it\n+                    //   should appear in logs, but it\u0027s an internal error\n+                    //   that should have no effect on applications\n+    }\n+    // 1) Signal container init\n+    //\n+    // This is handled by the ApplicationImpl state machine and allows\n+    // containers to proceed with launching.\n+    dispatcher.getEventHandler().handle(new ApplicationInitedEvent(\n+          app.getAppId()));\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleInitApplicationResources(Application app) {\n    // 0) Create application tracking structs\n    String userName \u003d app.getUser();\n    privateRsrc.putIfAbsent(userName,\n        new LocalResourcesTrackerImpl(userName, dispatcher));\n    if (null !\u003d appRsrc.putIfAbsent(ConverterUtils.toString(app.getAppId()),\n        new LocalResourcesTrackerImpl(app.getUser(), dispatcher))) {\n      LOG.warn(\"Initializing application \" + app + \" already present\");\n      assert false; // TODO: FIXME assert doesn\u0027t help\n                    // ^ The condition is benign. Tests should fail and it\n                    //   should appear in logs, but it\u0027s an internal error\n                    //   that should have no effect on applications\n    }\n    // 1) Signal container init\n    //\n    // This is handled by the ApplicationImpl state machine and allows\n    // containers to proceed with launching.\n    dispatcher.getEventHandler().handle(new ApplicationInitedEvent(\n          app.getAppId()));\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ResourceLocalizationService.java"
    }
  }
}