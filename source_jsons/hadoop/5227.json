{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSDirWriteFileOp.java",
  "functionName": "addFileForEditLog",
  "functionId": "addFileForEditLog___fsd-FSDirectory__id-long__existing-INodesInPath__localName-byte[]__permissions-PermissionStatus__aclEntries-List__AclEntry____xAttrs-List__XAttr____replication-short__modificationTime-long__atime-long__preferredBlockSize-long__underConstruction-boolean__clientName-String__clientMachine-String__storagePolicyId-byte__ecPolicyID-byte",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java",
  "functionStartLine": 422,
  "functionEndLine": 482,
  "numCommitsSeen": 1009,
  "timeTaken": 13060,
  "changeHistory": [
    "67662e2ac9e68f32b725c8118cf2be79a662fca5",
    "3085a604300ed76d06a0011bd5555e419897b6cd",
    "55c07bbed2f475f7b584a86112ee1b6fe0221e98",
    "a2a5d7b5bca715835d92816e7b267b59f7270708",
    "f0d5382ff3e31a47d13e4cb6c3a244cca82b17ce",
    "01721dd88ee532d20eda841254437da4dfd69db5",
    "7600e3c48ff2043654dbe9f415a186a336b5ea6c",
    "f62237bc2f02afe11ce185e13aa51a60b5960037",
    "7e091de1366f4b57b5433bc19d738199dc05313d",
    "98d340745be682fb251677bb4830aca76119868f",
    "1299357a05c52ad45513ed0ea854edc9c7ec3de8",
    "1af8c148626effe1b41fc536019fd3349f485d59",
    "1e1e93040748231dc913190aec1e031c379d8271",
    "2b6bcfdafa91223a4116e3e9304579f5f91dccac",
    "5caebbae8c2fc9ba2e32384657aee21641a1a6d0",
    "c78e3a7cdd10c40454e9acb06986ba6d8573cb19",
    "9e9e9cf71100fe7ceebd5a5ac27b164059b708c9",
    "bb84f1fccb18c6c7373851e05d2451d55e908242"
  ],
  "changeHistoryShort": {
    "67662e2ac9e68f32b725c8118cf2be79a662fca5": "Ymultichange(Yparameterchange,Ybodychange)",
    "3085a604300ed76d06a0011bd5555e419897b6cd": "Ybodychange",
    "55c07bbed2f475f7b584a86112ee1b6fe0221e98": "Ybodychange",
    "a2a5d7b5bca715835d92816e7b267b59f7270708": "Ybodychange",
    "f0d5382ff3e31a47d13e4cb6c3a244cca82b17ce": "Ybodychange",
    "01721dd88ee532d20eda841254437da4dfd69db5": "Ybodychange",
    "7600e3c48ff2043654dbe9f415a186a336b5ea6c": "Ybodychange",
    "f62237bc2f02afe11ce185e13aa51a60b5960037": "Ybodychange",
    "7e091de1366f4b57b5433bc19d738199dc05313d": "Ybodychange",
    "98d340745be682fb251677bb4830aca76119868f": "Ybodychange",
    "1299357a05c52ad45513ed0ea854edc9c7ec3de8": "Ybodychange",
    "1af8c148626effe1b41fc536019fd3349f485d59": "Ybodychange",
    "1e1e93040748231dc913190aec1e031c379d8271": "Ybodychange",
    "2b6bcfdafa91223a4116e3e9304579f5f91dccac": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
    "5caebbae8c2fc9ba2e32384657aee21641a1a6d0": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
    "c78e3a7cdd10c40454e9acb06986ba6d8573cb19": "Ymultichange(Yparameterchange,Ybodychange)",
    "9e9e9cf71100fe7ceebd5a5ac27b164059b708c9": "Ymultichange(Yparameterchange,Ybodychange)",
    "bb84f1fccb18c6c7373851e05d2451d55e908242": "Ymultichange(Yparameterchange,Ybodychange)"
  },
  "changeHistoryDetails": {
    "67662e2ac9e68f32b725c8118cf2be79a662fca5": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-12840. Creating a file with non-default EC policy in a EC zone is not correctly serialized in the editlog. Contributed by Lei (Eddy) Xu.\n",
      "commitDate": "07/12/17 11:15 AM",
      "commitName": "67662e2ac9e68f32b725c8118cf2be79a662fca5",
      "commitAuthor": "Lei Xu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-12840. Creating a file with non-default EC policy in a EC zone is not correctly serialized in the editlog. Contributed by Lei (Eddy) Xu.\n",
          "commitDate": "07/12/17 11:15 AM",
          "commitName": "67662e2ac9e68f32b725c8118cf2be79a662fca5",
          "commitAuthor": "Lei Xu",
          "commitDateOld": "15/09/17 12:12 PM",
          "commitNameOld": "fbe06b58805aac4861fb27dfa273914b69e8bdc6",
          "commitAuthorOld": "Lei Xu",
          "daysBetweenCommits": 83.0,
          "commitsBetweenForRepo": 628,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,55 +1,61 @@\n   static INodeFile addFileForEditLog(\n       FSDirectory fsd, long id, INodesInPath existing, byte[] localName,\n       PermissionStatus permissions, List\u003cAclEntry\u003e aclEntries,\n       List\u003cXAttr\u003e xAttrs, short replication, long modificationTime, long atime,\n       long preferredBlockSize, boolean underConstruction, String clientName,\n-      String clientMachine, byte storagePolicyId) {\n+      String clientMachine, byte storagePolicyId, byte ecPolicyID) {\n     final INodeFile newNode;\n     Preconditions.checkNotNull(existing);\n     assert fsd.hasWriteLock();\n     try {\n       // check if the file has an EC policy\n-      boolean isStriped \u003d false;\n-      ErasureCodingPolicy ecPolicy \u003d FSDirErasureCodingOp.\n-          unprotectedGetErasureCodingPolicy(fsd.getFSNamesystem(), existing);\n-      if (ecPolicy !\u003d null) {\n-        isStriped \u003d true;\n+      boolean isStriped \u003d\n+          ecPolicyID !\u003d ErasureCodeConstants.REPLICATION_POLICY_ID;\n+      ErasureCodingPolicy ecPolicy \u003d null;\n+      if (isStriped) {\n+        ecPolicy \u003d fsd.getFSNamesystem().getErasureCodingPolicyManager()\n+          .getByID(ecPolicyID);\n+        if (ecPolicy \u003d\u003d null) {\n+          throw new IOException(String.format(\n+              \"Cannot find erasure coding policy for new file %s/%s, \" +\n+                  \"ecPolicyID\u003d%d\",\n+              existing.getPath(), Arrays.toString(localName), ecPolicyID));\n+        }\n       }\n       final BlockType blockType \u003d isStriped ?\n           BlockType.STRIPED : BlockType.CONTIGUOUS;\n       final Short replicationFactor \u003d (!isStriped ? replication : null);\n-      final Byte ecPolicyID \u003d (isStriped ? ecPolicy.getId() : null);\n       if (underConstruction) {\n         newNode \u003d newINodeFile(id, permissions, modificationTime,\n             modificationTime, replicationFactor, ecPolicyID, preferredBlockSize,\n             storagePolicyId, blockType);\n         newNode.toUnderConstruction(clientName, clientMachine);\n       } else {\n         newNode \u003d newINodeFile(id, permissions, modificationTime, atime,\n             replicationFactor, ecPolicyID, preferredBlockSize,\n             storagePolicyId, blockType);\n       }\n       newNode.setLocalName(localName);\n       INodesInPath iip \u003d fsd.addINode(existing, newNode,\n           permissions.getPermission());\n       if (iip !\u003d null) {\n         if (aclEntries !\u003d null) {\n           AclStorage.updateINodeAcl(newNode, aclEntries, CURRENT_STATE_ID);\n         }\n         if (xAttrs !\u003d null) {\n           XAttrStorage.updateINodeXAttrs(newNode, xAttrs, CURRENT_STATE_ID);\n         }\n         return newNode;\n       }\n     } catch (IOException e) {\n       NameNode.stateChangeLog.warn(\n           \"DIR* FSDirectory.unprotectedAddFile: exception when add \" + existing\n               .getPath() + \" to the file system\", e);\n       if (e instanceof FSLimitException.MaxDirectoryItemsExceededException) {\n         NameNode.stateChangeLog.warn(\"Please increase \"\n             + \"dfs.namenode.fs-limits.max-directory-items and make it \"\n             + \"consistent across all NameNodes.\");\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static INodeFile addFileForEditLog(\n      FSDirectory fsd, long id, INodesInPath existing, byte[] localName,\n      PermissionStatus permissions, List\u003cAclEntry\u003e aclEntries,\n      List\u003cXAttr\u003e xAttrs, short replication, long modificationTime, long atime,\n      long preferredBlockSize, boolean underConstruction, String clientName,\n      String clientMachine, byte storagePolicyId, byte ecPolicyID) {\n    final INodeFile newNode;\n    Preconditions.checkNotNull(existing);\n    assert fsd.hasWriteLock();\n    try {\n      // check if the file has an EC policy\n      boolean isStriped \u003d\n          ecPolicyID !\u003d ErasureCodeConstants.REPLICATION_POLICY_ID;\n      ErasureCodingPolicy ecPolicy \u003d null;\n      if (isStriped) {\n        ecPolicy \u003d fsd.getFSNamesystem().getErasureCodingPolicyManager()\n          .getByID(ecPolicyID);\n        if (ecPolicy \u003d\u003d null) {\n          throw new IOException(String.format(\n              \"Cannot find erasure coding policy for new file %s/%s, \" +\n                  \"ecPolicyID\u003d%d\",\n              existing.getPath(), Arrays.toString(localName), ecPolicyID));\n        }\n      }\n      final BlockType blockType \u003d isStriped ?\n          BlockType.STRIPED : BlockType.CONTIGUOUS;\n      final Short replicationFactor \u003d (!isStriped ? replication : null);\n      if (underConstruction) {\n        newNode \u003d newINodeFile(id, permissions, modificationTime,\n            modificationTime, replicationFactor, ecPolicyID, preferredBlockSize,\n            storagePolicyId, blockType);\n        newNode.toUnderConstruction(clientName, clientMachine);\n      } else {\n        newNode \u003d newINodeFile(id, permissions, modificationTime, atime,\n            replicationFactor, ecPolicyID, preferredBlockSize,\n            storagePolicyId, blockType);\n      }\n      newNode.setLocalName(localName);\n      INodesInPath iip \u003d fsd.addINode(existing, newNode,\n          permissions.getPermission());\n      if (iip !\u003d null) {\n        if (aclEntries !\u003d null) {\n          AclStorage.updateINodeAcl(newNode, aclEntries, CURRENT_STATE_ID);\n        }\n        if (xAttrs !\u003d null) {\n          XAttrStorage.updateINodeXAttrs(newNode, xAttrs, CURRENT_STATE_ID);\n        }\n        return newNode;\n      }\n    } catch (IOException e) {\n      NameNode.stateChangeLog.warn(\n          \"DIR* FSDirectory.unprotectedAddFile: exception when add \" + existing\n              .getPath() + \" to the file system\", e);\n      if (e instanceof FSLimitException.MaxDirectoryItemsExceededException) {\n        NameNode.stateChangeLog.warn(\"Please increase \"\n            + \"dfs.namenode.fs-limits.max-directory-items and make it \"\n            + \"consistent across all NameNodes.\");\n      }\n    }\n    return null;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java",
          "extendedDetails": {
            "oldValue": "[fsd-FSDirectory, id-long, existing-INodesInPath, localName-byte[], permissions-PermissionStatus, aclEntries-List\u003cAclEntry\u003e, xAttrs-List\u003cXAttr\u003e, replication-short, modificationTime-long, atime-long, preferredBlockSize-long, underConstruction-boolean, clientName-String, clientMachine-String, storagePolicyId-byte]",
            "newValue": "[fsd-FSDirectory, id-long, existing-INodesInPath, localName-byte[], permissions-PermissionStatus, aclEntries-List\u003cAclEntry\u003e, xAttrs-List\u003cXAttr\u003e, replication-short, modificationTime-long, atime-long, preferredBlockSize-long, underConstruction-boolean, clientName-String, clientMachine-String, storagePolicyId-byte, ecPolicyID-byte]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-12840. Creating a file with non-default EC policy in a EC zone is not correctly serialized in the editlog. Contributed by Lei (Eddy) Xu.\n",
          "commitDate": "07/12/17 11:15 AM",
          "commitName": "67662e2ac9e68f32b725c8118cf2be79a662fca5",
          "commitAuthor": "Lei Xu",
          "commitDateOld": "15/09/17 12:12 PM",
          "commitNameOld": "fbe06b58805aac4861fb27dfa273914b69e8bdc6",
          "commitAuthorOld": "Lei Xu",
          "daysBetweenCommits": 83.0,
          "commitsBetweenForRepo": 628,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,55 +1,61 @@\n   static INodeFile addFileForEditLog(\n       FSDirectory fsd, long id, INodesInPath existing, byte[] localName,\n       PermissionStatus permissions, List\u003cAclEntry\u003e aclEntries,\n       List\u003cXAttr\u003e xAttrs, short replication, long modificationTime, long atime,\n       long preferredBlockSize, boolean underConstruction, String clientName,\n-      String clientMachine, byte storagePolicyId) {\n+      String clientMachine, byte storagePolicyId, byte ecPolicyID) {\n     final INodeFile newNode;\n     Preconditions.checkNotNull(existing);\n     assert fsd.hasWriteLock();\n     try {\n       // check if the file has an EC policy\n-      boolean isStriped \u003d false;\n-      ErasureCodingPolicy ecPolicy \u003d FSDirErasureCodingOp.\n-          unprotectedGetErasureCodingPolicy(fsd.getFSNamesystem(), existing);\n-      if (ecPolicy !\u003d null) {\n-        isStriped \u003d true;\n+      boolean isStriped \u003d\n+          ecPolicyID !\u003d ErasureCodeConstants.REPLICATION_POLICY_ID;\n+      ErasureCodingPolicy ecPolicy \u003d null;\n+      if (isStriped) {\n+        ecPolicy \u003d fsd.getFSNamesystem().getErasureCodingPolicyManager()\n+          .getByID(ecPolicyID);\n+        if (ecPolicy \u003d\u003d null) {\n+          throw new IOException(String.format(\n+              \"Cannot find erasure coding policy for new file %s/%s, \" +\n+                  \"ecPolicyID\u003d%d\",\n+              existing.getPath(), Arrays.toString(localName), ecPolicyID));\n+        }\n       }\n       final BlockType blockType \u003d isStriped ?\n           BlockType.STRIPED : BlockType.CONTIGUOUS;\n       final Short replicationFactor \u003d (!isStriped ? replication : null);\n-      final Byte ecPolicyID \u003d (isStriped ? ecPolicy.getId() : null);\n       if (underConstruction) {\n         newNode \u003d newINodeFile(id, permissions, modificationTime,\n             modificationTime, replicationFactor, ecPolicyID, preferredBlockSize,\n             storagePolicyId, blockType);\n         newNode.toUnderConstruction(clientName, clientMachine);\n       } else {\n         newNode \u003d newINodeFile(id, permissions, modificationTime, atime,\n             replicationFactor, ecPolicyID, preferredBlockSize,\n             storagePolicyId, blockType);\n       }\n       newNode.setLocalName(localName);\n       INodesInPath iip \u003d fsd.addINode(existing, newNode,\n           permissions.getPermission());\n       if (iip !\u003d null) {\n         if (aclEntries !\u003d null) {\n           AclStorage.updateINodeAcl(newNode, aclEntries, CURRENT_STATE_ID);\n         }\n         if (xAttrs !\u003d null) {\n           XAttrStorage.updateINodeXAttrs(newNode, xAttrs, CURRENT_STATE_ID);\n         }\n         return newNode;\n       }\n     } catch (IOException e) {\n       NameNode.stateChangeLog.warn(\n           \"DIR* FSDirectory.unprotectedAddFile: exception when add \" + existing\n               .getPath() + \" to the file system\", e);\n       if (e instanceof FSLimitException.MaxDirectoryItemsExceededException) {\n         NameNode.stateChangeLog.warn(\"Please increase \"\n             + \"dfs.namenode.fs-limits.max-directory-items and make it \"\n             + \"consistent across all NameNodes.\");\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static INodeFile addFileForEditLog(\n      FSDirectory fsd, long id, INodesInPath existing, byte[] localName,\n      PermissionStatus permissions, List\u003cAclEntry\u003e aclEntries,\n      List\u003cXAttr\u003e xAttrs, short replication, long modificationTime, long atime,\n      long preferredBlockSize, boolean underConstruction, String clientName,\n      String clientMachine, byte storagePolicyId, byte ecPolicyID) {\n    final INodeFile newNode;\n    Preconditions.checkNotNull(existing);\n    assert fsd.hasWriteLock();\n    try {\n      // check if the file has an EC policy\n      boolean isStriped \u003d\n          ecPolicyID !\u003d ErasureCodeConstants.REPLICATION_POLICY_ID;\n      ErasureCodingPolicy ecPolicy \u003d null;\n      if (isStriped) {\n        ecPolicy \u003d fsd.getFSNamesystem().getErasureCodingPolicyManager()\n          .getByID(ecPolicyID);\n        if (ecPolicy \u003d\u003d null) {\n          throw new IOException(String.format(\n              \"Cannot find erasure coding policy for new file %s/%s, \" +\n                  \"ecPolicyID\u003d%d\",\n              existing.getPath(), Arrays.toString(localName), ecPolicyID));\n        }\n      }\n      final BlockType blockType \u003d isStriped ?\n          BlockType.STRIPED : BlockType.CONTIGUOUS;\n      final Short replicationFactor \u003d (!isStriped ? replication : null);\n      if (underConstruction) {\n        newNode \u003d newINodeFile(id, permissions, modificationTime,\n            modificationTime, replicationFactor, ecPolicyID, preferredBlockSize,\n            storagePolicyId, blockType);\n        newNode.toUnderConstruction(clientName, clientMachine);\n      } else {\n        newNode \u003d newINodeFile(id, permissions, modificationTime, atime,\n            replicationFactor, ecPolicyID, preferredBlockSize,\n            storagePolicyId, blockType);\n      }\n      newNode.setLocalName(localName);\n      INodesInPath iip \u003d fsd.addINode(existing, newNode,\n          permissions.getPermission());\n      if (iip !\u003d null) {\n        if (aclEntries !\u003d null) {\n          AclStorage.updateINodeAcl(newNode, aclEntries, CURRENT_STATE_ID);\n        }\n        if (xAttrs !\u003d null) {\n          XAttrStorage.updateINodeXAttrs(newNode, xAttrs, CURRENT_STATE_ID);\n        }\n        return newNode;\n      }\n    } catch (IOException e) {\n      NameNode.stateChangeLog.warn(\n          \"DIR* FSDirectory.unprotectedAddFile: exception when add \" + existing\n              .getPath() + \" to the file system\", e);\n      if (e instanceof FSLimitException.MaxDirectoryItemsExceededException) {\n        NameNode.stateChangeLog.warn(\"Please increase \"\n            + \"dfs.namenode.fs-limits.max-directory-items and make it \"\n            + \"consistent across all NameNodes.\");\n      }\n    }\n    return null;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java",
          "extendedDetails": {}
        }
      ]
    },
    "3085a604300ed76d06a0011bd5555e419897b6cd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8112. Relax permission checking for EC related operations.\n",
      "commitDate": "03/03/17 1:00 PM",
      "commitName": "3085a604300ed76d06a0011bd5555e419897b6cd",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "27/02/17 5:07 PM",
      "commitNameOld": "55c07bbed2f475f7b584a86112ee1b6fe0221e98",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 3.83,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,55 @@\n   static INodeFile addFileForEditLog(\n       FSDirectory fsd, long id, INodesInPath existing, byte[] localName,\n       PermissionStatus permissions, List\u003cAclEntry\u003e aclEntries,\n       List\u003cXAttr\u003e xAttrs, short replication, long modificationTime, long atime,\n       long preferredBlockSize, boolean underConstruction, String clientName,\n       String clientMachine, byte storagePolicyId) {\n     final INodeFile newNode;\n     Preconditions.checkNotNull(existing);\n     assert fsd.hasWriteLock();\n     try {\n       // check if the file has an EC policy\n       boolean isStriped \u003d false;\n       ErasureCodingPolicy ecPolicy \u003d FSDirErasureCodingOp.\n-          getErasureCodingPolicy(fsd.getFSNamesystem(), existing);\n+          unprotectedGetErasureCodingPolicy(fsd.getFSNamesystem(), existing);\n       if (ecPolicy !\u003d null) {\n         isStriped \u003d true;\n       }\n       final BlockType blockType \u003d isStriped ?\n           BlockType.STRIPED : BlockType.CONTIGUOUS;\n       final Short replicationFactor \u003d (!isStriped ? replication : null);\n       final Byte ecPolicyID \u003d (isStriped ? ecPolicy.getId() : null);\n       if (underConstruction) {\n         newNode \u003d newINodeFile(id, permissions, modificationTime,\n             modificationTime, replicationFactor, ecPolicyID, preferredBlockSize,\n             storagePolicyId, blockType);\n         newNode.toUnderConstruction(clientName, clientMachine);\n       } else {\n         newNode \u003d newINodeFile(id, permissions, modificationTime, atime,\n             replicationFactor, ecPolicyID, preferredBlockSize,\n             storagePolicyId, blockType);\n       }\n       newNode.setLocalName(localName);\n       INodesInPath iip \u003d fsd.addINode(existing, newNode,\n           permissions.getPermission());\n       if (iip !\u003d null) {\n         if (aclEntries !\u003d null) {\n           AclStorage.updateINodeAcl(newNode, aclEntries, CURRENT_STATE_ID);\n         }\n         if (xAttrs !\u003d null) {\n           XAttrStorage.updateINodeXAttrs(newNode, xAttrs, CURRENT_STATE_ID);\n         }\n         return newNode;\n       }\n     } catch (IOException e) {\n       NameNode.stateChangeLog.warn(\n           \"DIR* FSDirectory.unprotectedAddFile: exception when add \" + existing\n               .getPath() + \" to the file system\", e);\n       if (e instanceof FSLimitException.MaxDirectoryItemsExceededException) {\n         NameNode.stateChangeLog.warn(\"Please increase \"\n             + \"dfs.namenode.fs-limits.max-directory-items and make it \"\n             + \"consistent across all NameNodes.\");\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static INodeFile addFileForEditLog(\n      FSDirectory fsd, long id, INodesInPath existing, byte[] localName,\n      PermissionStatus permissions, List\u003cAclEntry\u003e aclEntries,\n      List\u003cXAttr\u003e xAttrs, short replication, long modificationTime, long atime,\n      long preferredBlockSize, boolean underConstruction, String clientName,\n      String clientMachine, byte storagePolicyId) {\n    final INodeFile newNode;\n    Preconditions.checkNotNull(existing);\n    assert fsd.hasWriteLock();\n    try {\n      // check if the file has an EC policy\n      boolean isStriped \u003d false;\n      ErasureCodingPolicy ecPolicy \u003d FSDirErasureCodingOp.\n          unprotectedGetErasureCodingPolicy(fsd.getFSNamesystem(), existing);\n      if (ecPolicy !\u003d null) {\n        isStriped \u003d true;\n      }\n      final BlockType blockType \u003d isStriped ?\n          BlockType.STRIPED : BlockType.CONTIGUOUS;\n      final Short replicationFactor \u003d (!isStriped ? replication : null);\n      final Byte ecPolicyID \u003d (isStriped ? ecPolicy.getId() : null);\n      if (underConstruction) {\n        newNode \u003d newINodeFile(id, permissions, modificationTime,\n            modificationTime, replicationFactor, ecPolicyID, preferredBlockSize,\n            storagePolicyId, blockType);\n        newNode.toUnderConstruction(clientName, clientMachine);\n      } else {\n        newNode \u003d newINodeFile(id, permissions, modificationTime, atime,\n            replicationFactor, ecPolicyID, preferredBlockSize,\n            storagePolicyId, blockType);\n      }\n      newNode.setLocalName(localName);\n      INodesInPath iip \u003d fsd.addINode(existing, newNode,\n          permissions.getPermission());\n      if (iip !\u003d null) {\n        if (aclEntries !\u003d null) {\n          AclStorage.updateINodeAcl(newNode, aclEntries, CURRENT_STATE_ID);\n        }\n        if (xAttrs !\u003d null) {\n          XAttrStorage.updateINodeXAttrs(newNode, xAttrs, CURRENT_STATE_ID);\n        }\n        return newNode;\n      }\n    } catch (IOException e) {\n      NameNode.stateChangeLog.warn(\n          \"DIR* FSDirectory.unprotectedAddFile: exception when add \" + existing\n              .getPath() + \" to the file system\", e);\n      if (e instanceof FSLimitException.MaxDirectoryItemsExceededException) {\n        NameNode.stateChangeLog.warn(\"Please increase \"\n            + \"dfs.namenode.fs-limits.max-directory-items and make it \"\n            + \"consistent across all NameNodes.\");\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java",
      "extendedDetails": {}
    },
    "55c07bbed2f475f7b584a86112ee1b6fe0221e98": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11382. Persist Erasure Coding Policy ID in a new optional field in INodeFile in FSImage. Contributed by Manoj Govindassamy.\n",
      "commitDate": "27/02/17 5:07 PM",
      "commitName": "55c07bbed2f475f7b584a86112ee1b6fe0221e98",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "18/01/17 1:31 PM",
      "commitNameOld": "a2a5d7b5bca715835d92816e7b267b59f7270708",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 40.15,
      "commitsBetweenForRepo": 201,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,55 @@\n   static INodeFile addFileForEditLog(\n       FSDirectory fsd, long id, INodesInPath existing, byte[] localName,\n       PermissionStatus permissions, List\u003cAclEntry\u003e aclEntries,\n       List\u003cXAttr\u003e xAttrs, short replication, long modificationTime, long atime,\n       long preferredBlockSize, boolean underConstruction, String clientName,\n       String clientMachine, byte storagePolicyId) {\n     final INodeFile newNode;\n     Preconditions.checkNotNull(existing);\n     assert fsd.hasWriteLock();\n     try {\n       // check if the file has an EC policy\n+      boolean isStriped \u003d false;\n       ErasureCodingPolicy ecPolicy \u003d FSDirErasureCodingOp.\n           getErasureCodingPolicy(fsd.getFSNamesystem(), existing);\n       if (ecPolicy !\u003d null) {\n-        replication \u003d ecPolicy.getId();\n+        isStriped \u003d true;\n       }\n-      final BlockType blockType \u003d ecPolicy !\u003d null?\n+      final BlockType blockType \u003d isStriped ?\n           BlockType.STRIPED : BlockType.CONTIGUOUS;\n+      final Short replicationFactor \u003d (!isStriped ? replication : null);\n+      final Byte ecPolicyID \u003d (isStriped ? ecPolicy.getId() : null);\n       if (underConstruction) {\n         newNode \u003d newINodeFile(id, permissions, modificationTime,\n-            modificationTime, replication, preferredBlockSize, storagePolicyId,\n-            blockType);\n+            modificationTime, replicationFactor, ecPolicyID, preferredBlockSize,\n+            storagePolicyId, blockType);\n         newNode.toUnderConstruction(clientName, clientMachine);\n       } else {\n         newNode \u003d newINodeFile(id, permissions, modificationTime, atime,\n-            replication, preferredBlockSize, storagePolicyId, blockType);\n+            replicationFactor, ecPolicyID, preferredBlockSize,\n+            storagePolicyId, blockType);\n       }\n       newNode.setLocalName(localName);\n       INodesInPath iip \u003d fsd.addINode(existing, newNode,\n           permissions.getPermission());\n       if (iip !\u003d null) {\n         if (aclEntries !\u003d null) {\n           AclStorage.updateINodeAcl(newNode, aclEntries, CURRENT_STATE_ID);\n         }\n         if (xAttrs !\u003d null) {\n           XAttrStorage.updateINodeXAttrs(newNode, xAttrs, CURRENT_STATE_ID);\n         }\n         return newNode;\n       }\n     } catch (IOException e) {\n       NameNode.stateChangeLog.warn(\n           \"DIR* FSDirectory.unprotectedAddFile: exception when add \" + existing\n               .getPath() + \" to the file system\", e);\n       if (e instanceof FSLimitException.MaxDirectoryItemsExceededException) {\n         NameNode.stateChangeLog.warn(\"Please increase \"\n             + \"dfs.namenode.fs-limits.max-directory-items and make it \"\n             + \"consistent across all NameNodes.\");\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static INodeFile addFileForEditLog(\n      FSDirectory fsd, long id, INodesInPath existing, byte[] localName,\n      PermissionStatus permissions, List\u003cAclEntry\u003e aclEntries,\n      List\u003cXAttr\u003e xAttrs, short replication, long modificationTime, long atime,\n      long preferredBlockSize, boolean underConstruction, String clientName,\n      String clientMachine, byte storagePolicyId) {\n    final INodeFile newNode;\n    Preconditions.checkNotNull(existing);\n    assert fsd.hasWriteLock();\n    try {\n      // check if the file has an EC policy\n      boolean isStriped \u003d false;\n      ErasureCodingPolicy ecPolicy \u003d FSDirErasureCodingOp.\n          getErasureCodingPolicy(fsd.getFSNamesystem(), existing);\n      if (ecPolicy !\u003d null) {\n        isStriped \u003d true;\n      }\n      final BlockType blockType \u003d isStriped ?\n          BlockType.STRIPED : BlockType.CONTIGUOUS;\n      final Short replicationFactor \u003d (!isStriped ? replication : null);\n      final Byte ecPolicyID \u003d (isStriped ? ecPolicy.getId() : null);\n      if (underConstruction) {\n        newNode \u003d newINodeFile(id, permissions, modificationTime,\n            modificationTime, replicationFactor, ecPolicyID, preferredBlockSize,\n            storagePolicyId, blockType);\n        newNode.toUnderConstruction(clientName, clientMachine);\n      } else {\n        newNode \u003d newINodeFile(id, permissions, modificationTime, atime,\n            replicationFactor, ecPolicyID, preferredBlockSize,\n            storagePolicyId, blockType);\n      }\n      newNode.setLocalName(localName);\n      INodesInPath iip \u003d fsd.addINode(existing, newNode,\n          permissions.getPermission());\n      if (iip !\u003d null) {\n        if (aclEntries !\u003d null) {\n          AclStorage.updateINodeAcl(newNode, aclEntries, CURRENT_STATE_ID);\n        }\n        if (xAttrs !\u003d null) {\n          XAttrStorage.updateINodeXAttrs(newNode, xAttrs, CURRENT_STATE_ID);\n        }\n        return newNode;\n      }\n    } catch (IOException e) {\n      NameNode.stateChangeLog.warn(\n          \"DIR* FSDirectory.unprotectedAddFile: exception when add \" + existing\n              .getPath() + \" to the file system\", e);\n      if (e instanceof FSLimitException.MaxDirectoryItemsExceededException) {\n        NameNode.stateChangeLog.warn(\"Please increase \"\n            + \"dfs.namenode.fs-limits.max-directory-items and make it \"\n            + \"consistent across all NameNodes.\");\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java",
      "extendedDetails": {}
    },
    "a2a5d7b5bca715835d92816e7b267b59f7270708": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10759. Change fsimage bool isStriped from boolean to an enum. Contributed by Ewan Higgs.\n",
      "commitDate": "18/01/17 1:31 PM",
      "commitName": "a2a5d7b5bca715835d92816e7b267b59f7270708",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "24/10/16 3:14 PM",
      "commitNameOld": "9d175853b0170683ad5f21d9bcdeaac49fe89e04",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 85.97,
      "commitsBetweenForRepo": 568,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,51 @@\n   static INodeFile addFileForEditLog(\n       FSDirectory fsd, long id, INodesInPath existing, byte[] localName,\n       PermissionStatus permissions, List\u003cAclEntry\u003e aclEntries,\n       List\u003cXAttr\u003e xAttrs, short replication, long modificationTime, long atime,\n       long preferredBlockSize, boolean underConstruction, String clientName,\n       String clientMachine, byte storagePolicyId) {\n     final INodeFile newNode;\n     Preconditions.checkNotNull(existing);\n     assert fsd.hasWriteLock();\n     try {\n       // check if the file has an EC policy\n       ErasureCodingPolicy ecPolicy \u003d FSDirErasureCodingOp.\n           getErasureCodingPolicy(fsd.getFSNamesystem(), existing);\n       if (ecPolicy !\u003d null) {\n         replication \u003d ecPolicy.getId();\n       }\n+      final BlockType blockType \u003d ecPolicy !\u003d null?\n+          BlockType.STRIPED : BlockType.CONTIGUOUS;\n       if (underConstruction) {\n         newNode \u003d newINodeFile(id, permissions, modificationTime,\n             modificationTime, replication, preferredBlockSize, storagePolicyId,\n-            ecPolicy !\u003d null);\n+            blockType);\n         newNode.toUnderConstruction(clientName, clientMachine);\n       } else {\n         newNode \u003d newINodeFile(id, permissions, modificationTime, atime,\n-            replication, preferredBlockSize, storagePolicyId, ecPolicy !\u003d null);\n+            replication, preferredBlockSize, storagePolicyId, blockType);\n       }\n       newNode.setLocalName(localName);\n       INodesInPath iip \u003d fsd.addINode(existing, newNode,\n           permissions.getPermission());\n       if (iip !\u003d null) {\n         if (aclEntries !\u003d null) {\n           AclStorage.updateINodeAcl(newNode, aclEntries, CURRENT_STATE_ID);\n         }\n         if (xAttrs !\u003d null) {\n           XAttrStorage.updateINodeXAttrs(newNode, xAttrs, CURRENT_STATE_ID);\n         }\n         return newNode;\n       }\n     } catch (IOException e) {\n       NameNode.stateChangeLog.warn(\n           \"DIR* FSDirectory.unprotectedAddFile: exception when add \" + existing\n               .getPath() + \" to the file system\", e);\n       if (e instanceof FSLimitException.MaxDirectoryItemsExceededException) {\n         NameNode.stateChangeLog.warn(\"Please increase \"\n             + \"dfs.namenode.fs-limits.max-directory-items and make it \"\n             + \"consistent across all NameNodes.\");\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static INodeFile addFileForEditLog(\n      FSDirectory fsd, long id, INodesInPath existing, byte[] localName,\n      PermissionStatus permissions, List\u003cAclEntry\u003e aclEntries,\n      List\u003cXAttr\u003e xAttrs, short replication, long modificationTime, long atime,\n      long preferredBlockSize, boolean underConstruction, String clientName,\n      String clientMachine, byte storagePolicyId) {\n    final INodeFile newNode;\n    Preconditions.checkNotNull(existing);\n    assert fsd.hasWriteLock();\n    try {\n      // check if the file has an EC policy\n      ErasureCodingPolicy ecPolicy \u003d FSDirErasureCodingOp.\n          getErasureCodingPolicy(fsd.getFSNamesystem(), existing);\n      if (ecPolicy !\u003d null) {\n        replication \u003d ecPolicy.getId();\n      }\n      final BlockType blockType \u003d ecPolicy !\u003d null?\n          BlockType.STRIPED : BlockType.CONTIGUOUS;\n      if (underConstruction) {\n        newNode \u003d newINodeFile(id, permissions, modificationTime,\n            modificationTime, replication, preferredBlockSize, storagePolicyId,\n            blockType);\n        newNode.toUnderConstruction(clientName, clientMachine);\n      } else {\n        newNode \u003d newINodeFile(id, permissions, modificationTime, atime,\n            replication, preferredBlockSize, storagePolicyId, blockType);\n      }\n      newNode.setLocalName(localName);\n      INodesInPath iip \u003d fsd.addINode(existing, newNode,\n          permissions.getPermission());\n      if (iip !\u003d null) {\n        if (aclEntries !\u003d null) {\n          AclStorage.updateINodeAcl(newNode, aclEntries, CURRENT_STATE_ID);\n        }\n        if (xAttrs !\u003d null) {\n          XAttrStorage.updateINodeXAttrs(newNode, xAttrs, CURRENT_STATE_ID);\n        }\n        return newNode;\n      }\n    } catch (IOException e) {\n      NameNode.stateChangeLog.warn(\n          \"DIR* FSDirectory.unprotectedAddFile: exception when add \" + existing\n              .getPath() + \" to the file system\", e);\n      if (e instanceof FSLimitException.MaxDirectoryItemsExceededException) {\n        NameNode.stateChangeLog.warn(\"Please increase \"\n            + \"dfs.namenode.fs-limits.max-directory-items and make it \"\n            + \"consistent across all NameNodes.\");\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java",
      "extendedDetails": {}
    },
    "f0d5382ff3e31a47d13e4cb6c3a244cca82b17ce": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6962. ACL inheritance conflicts with umaskmode. Contributed by Chris Nauroth.\n",
      "commitDate": "06/09/16 11:02 AM",
      "commitName": "f0d5382ff3e31a47d13e4cb6c3a244cca82b17ce",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "31/08/16 12:02 PM",
      "commitNameOld": "01721dd88ee532d20eda841254437da4dfd69db5",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 5.96,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,49 @@\n   static INodeFile addFileForEditLog(\n       FSDirectory fsd, long id, INodesInPath existing, byte[] localName,\n       PermissionStatus permissions, List\u003cAclEntry\u003e aclEntries,\n       List\u003cXAttr\u003e xAttrs, short replication, long modificationTime, long atime,\n       long preferredBlockSize, boolean underConstruction, String clientName,\n       String clientMachine, byte storagePolicyId) {\n     final INodeFile newNode;\n     Preconditions.checkNotNull(existing);\n     assert fsd.hasWriteLock();\n     try {\n       // check if the file has an EC policy\n       ErasureCodingPolicy ecPolicy \u003d FSDirErasureCodingOp.\n           getErasureCodingPolicy(fsd.getFSNamesystem(), existing);\n       if (ecPolicy !\u003d null) {\n         replication \u003d ecPolicy.getId();\n       }\n       if (underConstruction) {\n         newNode \u003d newINodeFile(id, permissions, modificationTime,\n             modificationTime, replication, preferredBlockSize, storagePolicyId,\n             ecPolicy !\u003d null);\n         newNode.toUnderConstruction(clientName, clientMachine);\n       } else {\n         newNode \u003d newINodeFile(id, permissions, modificationTime, atime,\n             replication, preferredBlockSize, storagePolicyId, ecPolicy !\u003d null);\n       }\n       newNode.setLocalName(localName);\n-      INodesInPath iip \u003d fsd.addINode(existing, newNode);\n+      INodesInPath iip \u003d fsd.addINode(existing, newNode,\n+          permissions.getPermission());\n       if (iip !\u003d null) {\n         if (aclEntries !\u003d null) {\n           AclStorage.updateINodeAcl(newNode, aclEntries, CURRENT_STATE_ID);\n         }\n         if (xAttrs !\u003d null) {\n           XAttrStorage.updateINodeXAttrs(newNode, xAttrs, CURRENT_STATE_ID);\n         }\n         return newNode;\n       }\n     } catch (IOException e) {\n       NameNode.stateChangeLog.warn(\n           \"DIR* FSDirectory.unprotectedAddFile: exception when add \" + existing\n               .getPath() + \" to the file system\", e);\n       if (e instanceof FSLimitException.MaxDirectoryItemsExceededException) {\n         NameNode.stateChangeLog.warn(\"Please increase \"\n             + \"dfs.namenode.fs-limits.max-directory-items and make it \"\n             + \"consistent across all NameNodes.\");\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static INodeFile addFileForEditLog(\n      FSDirectory fsd, long id, INodesInPath existing, byte[] localName,\n      PermissionStatus permissions, List\u003cAclEntry\u003e aclEntries,\n      List\u003cXAttr\u003e xAttrs, short replication, long modificationTime, long atime,\n      long preferredBlockSize, boolean underConstruction, String clientName,\n      String clientMachine, byte storagePolicyId) {\n    final INodeFile newNode;\n    Preconditions.checkNotNull(existing);\n    assert fsd.hasWriteLock();\n    try {\n      // check if the file has an EC policy\n      ErasureCodingPolicy ecPolicy \u003d FSDirErasureCodingOp.\n          getErasureCodingPolicy(fsd.getFSNamesystem(), existing);\n      if (ecPolicy !\u003d null) {\n        replication \u003d ecPolicy.getId();\n      }\n      if (underConstruction) {\n        newNode \u003d newINodeFile(id, permissions, modificationTime,\n            modificationTime, replication, preferredBlockSize, storagePolicyId,\n            ecPolicy !\u003d null);\n        newNode.toUnderConstruction(clientName, clientMachine);\n      } else {\n        newNode \u003d newINodeFile(id, permissions, modificationTime, atime,\n            replication, preferredBlockSize, storagePolicyId, ecPolicy !\u003d null);\n      }\n      newNode.setLocalName(localName);\n      INodesInPath iip \u003d fsd.addINode(existing, newNode,\n          permissions.getPermission());\n      if (iip !\u003d null) {\n        if (aclEntries !\u003d null) {\n          AclStorage.updateINodeAcl(newNode, aclEntries, CURRENT_STATE_ID);\n        }\n        if (xAttrs !\u003d null) {\n          XAttrStorage.updateINodeXAttrs(newNode, xAttrs, CURRENT_STATE_ID);\n        }\n        return newNode;\n      }\n    } catch (IOException e) {\n      NameNode.stateChangeLog.warn(\n          \"DIR* FSDirectory.unprotectedAddFile: exception when add \" + existing\n              .getPath() + \" to the file system\", e);\n      if (e instanceof FSLimitException.MaxDirectoryItemsExceededException) {\n        NameNode.stateChangeLog.warn(\"Please increase \"\n            + \"dfs.namenode.fs-limits.max-directory-items and make it \"\n            + \"consistent across all NameNodes.\");\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java",
      "extendedDetails": {}
    },
    "01721dd88ee532d20eda841254437da4dfd69db5": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10729. Improve log message for edit loading failures caused by FS limit checks. Contributed by Wei-Chiu Chuang.\n",
      "commitDate": "31/08/16 12:02 PM",
      "commitName": "01721dd88ee532d20eda841254437da4dfd69db5",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "26/08/16 1:39 PM",
      "commitNameOld": "8b7adf4ddf420a93c586c4b2eac27dd0f649682e",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 4.93,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,48 @@\n   static INodeFile addFileForEditLog(\n       FSDirectory fsd, long id, INodesInPath existing, byte[] localName,\n       PermissionStatus permissions, List\u003cAclEntry\u003e aclEntries,\n       List\u003cXAttr\u003e xAttrs, short replication, long modificationTime, long atime,\n       long preferredBlockSize, boolean underConstruction, String clientName,\n       String clientMachine, byte storagePolicyId) {\n     final INodeFile newNode;\n     Preconditions.checkNotNull(existing);\n     assert fsd.hasWriteLock();\n     try {\n       // check if the file has an EC policy\n       ErasureCodingPolicy ecPolicy \u003d FSDirErasureCodingOp.\n           getErasureCodingPolicy(fsd.getFSNamesystem(), existing);\n       if (ecPolicy !\u003d null) {\n         replication \u003d ecPolicy.getId();\n       }\n       if (underConstruction) {\n         newNode \u003d newINodeFile(id, permissions, modificationTime,\n             modificationTime, replication, preferredBlockSize, storagePolicyId,\n             ecPolicy !\u003d null);\n         newNode.toUnderConstruction(clientName, clientMachine);\n       } else {\n         newNode \u003d newINodeFile(id, permissions, modificationTime, atime,\n             replication, preferredBlockSize, storagePolicyId, ecPolicy !\u003d null);\n       }\n       newNode.setLocalName(localName);\n       INodesInPath iip \u003d fsd.addINode(existing, newNode);\n       if (iip !\u003d null) {\n         if (aclEntries !\u003d null) {\n           AclStorage.updateINodeAcl(newNode, aclEntries, CURRENT_STATE_ID);\n         }\n         if (xAttrs !\u003d null) {\n           XAttrStorage.updateINodeXAttrs(newNode, xAttrs, CURRENT_STATE_ID);\n         }\n         return newNode;\n       }\n     } catch (IOException e) {\n-      if(NameNode.stateChangeLog.isDebugEnabled()) {\n-        NameNode.stateChangeLog.debug(\n-            \"DIR* FSDirectory.unprotectedAddFile: exception when add \"\n-                + existing.getPath() + \" to the file system\", e);\n+      NameNode.stateChangeLog.warn(\n+          \"DIR* FSDirectory.unprotectedAddFile: exception when add \" + existing\n+              .getPath() + \" to the file system\", e);\n+      if (e instanceof FSLimitException.MaxDirectoryItemsExceededException) {\n+        NameNode.stateChangeLog.warn(\"Please increase \"\n+            + \"dfs.namenode.fs-limits.max-directory-items and make it \"\n+            + \"consistent across all NameNodes.\");\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static INodeFile addFileForEditLog(\n      FSDirectory fsd, long id, INodesInPath existing, byte[] localName,\n      PermissionStatus permissions, List\u003cAclEntry\u003e aclEntries,\n      List\u003cXAttr\u003e xAttrs, short replication, long modificationTime, long atime,\n      long preferredBlockSize, boolean underConstruction, String clientName,\n      String clientMachine, byte storagePolicyId) {\n    final INodeFile newNode;\n    Preconditions.checkNotNull(existing);\n    assert fsd.hasWriteLock();\n    try {\n      // check if the file has an EC policy\n      ErasureCodingPolicy ecPolicy \u003d FSDirErasureCodingOp.\n          getErasureCodingPolicy(fsd.getFSNamesystem(), existing);\n      if (ecPolicy !\u003d null) {\n        replication \u003d ecPolicy.getId();\n      }\n      if (underConstruction) {\n        newNode \u003d newINodeFile(id, permissions, modificationTime,\n            modificationTime, replication, preferredBlockSize, storagePolicyId,\n            ecPolicy !\u003d null);\n        newNode.toUnderConstruction(clientName, clientMachine);\n      } else {\n        newNode \u003d newINodeFile(id, permissions, modificationTime, atime,\n            replication, preferredBlockSize, storagePolicyId, ecPolicy !\u003d null);\n      }\n      newNode.setLocalName(localName);\n      INodesInPath iip \u003d fsd.addINode(existing, newNode);\n      if (iip !\u003d null) {\n        if (aclEntries !\u003d null) {\n          AclStorage.updateINodeAcl(newNode, aclEntries, CURRENT_STATE_ID);\n        }\n        if (xAttrs !\u003d null) {\n          XAttrStorage.updateINodeXAttrs(newNode, xAttrs, CURRENT_STATE_ID);\n        }\n        return newNode;\n      }\n    } catch (IOException e) {\n      NameNode.stateChangeLog.warn(\n          \"DIR* FSDirectory.unprotectedAddFile: exception when add \" + existing\n              .getPath() + \" to the file system\", e);\n      if (e instanceof FSLimitException.MaxDirectoryItemsExceededException) {\n        NameNode.stateChangeLog.warn(\"Please increase \"\n            + \"dfs.namenode.fs-limits.max-directory-items and make it \"\n            + \"consistent across all NameNodes.\");\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java",
      "extendedDetails": {}
    },
    "7600e3c48ff2043654dbe9f415a186a336b5ea6c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7866. Erasure coding: NameNode manages multiple erasure coding policies. Contributed by Rui Li.\n",
      "commitDate": "08/03/16 10:30 PM",
      "commitName": "7600e3c48ff2043654dbe9f415a186a336b5ea6c",
      "commitAuthor": "Zhe Zhang",
      "commitDateOld": "25/01/16 7:20 PM",
      "commitNameOld": "45c763ad6171bc7808c2ddcb9099a4215113da2a",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 43.13,
      "commitsBetweenForRepo": 299,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,45 @@\n   static INodeFile addFileForEditLog(\n       FSDirectory fsd, long id, INodesInPath existing, byte[] localName,\n       PermissionStatus permissions, List\u003cAclEntry\u003e aclEntries,\n       List\u003cXAttr\u003e xAttrs, short replication, long modificationTime, long atime,\n       long preferredBlockSize, boolean underConstruction, String clientName,\n       String clientMachine, byte storagePolicyId) {\n     final INodeFile newNode;\n     Preconditions.checkNotNull(existing);\n     assert fsd.hasWriteLock();\n     try {\n       // check if the file has an EC policy\n-      final boolean isStriped \u003d FSDirErasureCodingOp.hasErasureCodingPolicy(\n-          fsd.getFSNamesystem(), existing);\n+      ErasureCodingPolicy ecPolicy \u003d FSDirErasureCodingOp.\n+          getErasureCodingPolicy(fsd.getFSNamesystem(), existing);\n+      if (ecPolicy !\u003d null) {\n+        replication \u003d ecPolicy.getId();\n+      }\n       if (underConstruction) {\n         newNode \u003d newINodeFile(id, permissions, modificationTime,\n             modificationTime, replication, preferredBlockSize, storagePolicyId,\n-            isStriped);\n+            ecPolicy !\u003d null);\n         newNode.toUnderConstruction(clientName, clientMachine);\n       } else {\n         newNode \u003d newINodeFile(id, permissions, modificationTime, atime,\n-            replication, preferredBlockSize, storagePolicyId, isStriped);\n+            replication, preferredBlockSize, storagePolicyId, ecPolicy !\u003d null);\n       }\n       newNode.setLocalName(localName);\n       INodesInPath iip \u003d fsd.addINode(existing, newNode);\n       if (iip !\u003d null) {\n         if (aclEntries !\u003d null) {\n           AclStorage.updateINodeAcl(newNode, aclEntries, CURRENT_STATE_ID);\n         }\n         if (xAttrs !\u003d null) {\n           XAttrStorage.updateINodeXAttrs(newNode, xAttrs, CURRENT_STATE_ID);\n         }\n         return newNode;\n       }\n     } catch (IOException e) {\n       if(NameNode.stateChangeLog.isDebugEnabled()) {\n         NameNode.stateChangeLog.debug(\n             \"DIR* FSDirectory.unprotectedAddFile: exception when add \"\n                 + existing.getPath() + \" to the file system\", e);\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static INodeFile addFileForEditLog(\n      FSDirectory fsd, long id, INodesInPath existing, byte[] localName,\n      PermissionStatus permissions, List\u003cAclEntry\u003e aclEntries,\n      List\u003cXAttr\u003e xAttrs, short replication, long modificationTime, long atime,\n      long preferredBlockSize, boolean underConstruction, String clientName,\n      String clientMachine, byte storagePolicyId) {\n    final INodeFile newNode;\n    Preconditions.checkNotNull(existing);\n    assert fsd.hasWriteLock();\n    try {\n      // check if the file has an EC policy\n      ErasureCodingPolicy ecPolicy \u003d FSDirErasureCodingOp.\n          getErasureCodingPolicy(fsd.getFSNamesystem(), existing);\n      if (ecPolicy !\u003d null) {\n        replication \u003d ecPolicy.getId();\n      }\n      if (underConstruction) {\n        newNode \u003d newINodeFile(id, permissions, modificationTime,\n            modificationTime, replication, preferredBlockSize, storagePolicyId,\n            ecPolicy !\u003d null);\n        newNode.toUnderConstruction(clientName, clientMachine);\n      } else {\n        newNode \u003d newINodeFile(id, permissions, modificationTime, atime,\n            replication, preferredBlockSize, storagePolicyId, ecPolicy !\u003d null);\n      }\n      newNode.setLocalName(localName);\n      INodesInPath iip \u003d fsd.addINode(existing, newNode);\n      if (iip !\u003d null) {\n        if (aclEntries !\u003d null) {\n          AclStorage.updateINodeAcl(newNode, aclEntries, CURRENT_STATE_ID);\n        }\n        if (xAttrs !\u003d null) {\n          XAttrStorage.updateINodeXAttrs(newNode, xAttrs, CURRENT_STATE_ID);\n        }\n        return newNode;\n      }\n    } catch (IOException e) {\n      if(NameNode.stateChangeLog.isDebugEnabled()) {\n        NameNode.stateChangeLog.debug(\n            \"DIR* FSDirectory.unprotectedAddFile: exception when add \"\n                + existing.getPath() + \" to the file system\", e);\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java",
      "extendedDetails": {}
    },
    "f62237bc2f02afe11ce185e13aa51a60b5960037": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8833. Erasure coding: store EC schema and cell size in INodeFile and eliminate notion of EC zones.\n",
      "commitDate": "09/09/15 11:07 PM",
      "commitName": "f62237bc2f02afe11ce185e13aa51a60b5960037",
      "commitAuthor": "Zhe Zhang",
      "commitDateOld": "01/09/15 2:30 PM",
      "commitNameOld": "ab56fcdb1219d03713b408dd3a95d7405635254d",
      "commitAuthorOld": "",
      "daysBetweenCommits": 8.36,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n   static INodeFile addFileForEditLog(\n       FSDirectory fsd, long id, INodesInPath existing, byte[] localName,\n       PermissionStatus permissions, List\u003cAclEntry\u003e aclEntries,\n       List\u003cXAttr\u003e xAttrs, short replication, long modificationTime, long atime,\n       long preferredBlockSize, boolean underConstruction, String clientName,\n       String clientMachine, byte storagePolicyId) {\n     final INodeFile newNode;\n     Preconditions.checkNotNull(existing);\n     assert fsd.hasWriteLock();\n     try {\n-      // check if the file is in an EC zone\n-      final boolean isStriped \u003d FSDirErasureCodingOp.isInErasureCodingZone(\n+      // check if the file has an EC policy\n+      final boolean isStriped \u003d FSDirErasureCodingOp.hasErasureCodingPolicy(\n           fsd.getFSNamesystem(), existing);\n       if (underConstruction) {\n         newNode \u003d newINodeFile(id, permissions, modificationTime,\n             modificationTime, replication, preferredBlockSize, storagePolicyId,\n             isStriped);\n         newNode.toUnderConstruction(clientName, clientMachine);\n       } else {\n         newNode \u003d newINodeFile(id, permissions, modificationTime, atime,\n             replication, preferredBlockSize, storagePolicyId, isStriped);\n       }\n       newNode.setLocalName(localName);\n       INodesInPath iip \u003d fsd.addINode(existing, newNode);\n       if (iip !\u003d null) {\n         if (aclEntries !\u003d null) {\n           AclStorage.updateINodeAcl(newNode, aclEntries, CURRENT_STATE_ID);\n         }\n         if (xAttrs !\u003d null) {\n           XAttrStorage.updateINodeXAttrs(newNode, xAttrs, CURRENT_STATE_ID);\n         }\n         return newNode;\n       }\n     } catch (IOException e) {\n       if(NameNode.stateChangeLog.isDebugEnabled()) {\n         NameNode.stateChangeLog.debug(\n             \"DIR* FSDirectory.unprotectedAddFile: exception when add \"\n                 + existing.getPath() + \" to the file system\", e);\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static INodeFile addFileForEditLog(\n      FSDirectory fsd, long id, INodesInPath existing, byte[] localName,\n      PermissionStatus permissions, List\u003cAclEntry\u003e aclEntries,\n      List\u003cXAttr\u003e xAttrs, short replication, long modificationTime, long atime,\n      long preferredBlockSize, boolean underConstruction, String clientName,\n      String clientMachine, byte storagePolicyId) {\n    final INodeFile newNode;\n    Preconditions.checkNotNull(existing);\n    assert fsd.hasWriteLock();\n    try {\n      // check if the file has an EC policy\n      final boolean isStriped \u003d FSDirErasureCodingOp.hasErasureCodingPolicy(\n          fsd.getFSNamesystem(), existing);\n      if (underConstruction) {\n        newNode \u003d newINodeFile(id, permissions, modificationTime,\n            modificationTime, replication, preferredBlockSize, storagePolicyId,\n            isStriped);\n        newNode.toUnderConstruction(clientName, clientMachine);\n      } else {\n        newNode \u003d newINodeFile(id, permissions, modificationTime, atime,\n            replication, preferredBlockSize, storagePolicyId, isStriped);\n      }\n      newNode.setLocalName(localName);\n      INodesInPath iip \u003d fsd.addINode(existing, newNode);\n      if (iip !\u003d null) {\n        if (aclEntries !\u003d null) {\n          AclStorage.updateINodeAcl(newNode, aclEntries, CURRENT_STATE_ID);\n        }\n        if (xAttrs !\u003d null) {\n          XAttrStorage.updateINodeXAttrs(newNode, xAttrs, CURRENT_STATE_ID);\n        }\n        return newNode;\n      }\n    } catch (IOException e) {\n      if(NameNode.stateChangeLog.isDebugEnabled()) {\n        NameNode.stateChangeLog.debug(\n            \"DIR* FSDirectory.unprotectedAddFile: exception when add \"\n                + existing.getPath() + \" to the file system\", e);\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java",
      "extendedDetails": {}
    },
    "7e091de1366f4b57b5433bc19d738199dc05313d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8058. Erasure coding: use BlockInfo[] for both striped and contiguous blocks in INodeFile. Contributed by Zhe Zhang and Yi Liu.\n",
      "commitDate": "15/07/15 9:49 AM",
      "commitName": "7e091de1366f4b57b5433bc19d738199dc05313d",
      "commitAuthor": "Zhe Zhang",
      "commitDateOld": "17/06/15 11:35 AM",
      "commitNameOld": "c12a974ccf5f52f63e4f825d8b4d2385953cd119",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 27.93,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,42 @@\n   static INodeFile addFileForEditLog(\n       FSDirectory fsd, long id, INodesInPath existing, byte[] localName,\n       PermissionStatus permissions, List\u003cAclEntry\u003e aclEntries,\n       List\u003cXAttr\u003e xAttrs, short replication, long modificationTime, long atime,\n       long preferredBlockSize, boolean underConstruction, String clientName,\n       String clientMachine, byte storagePolicyId) {\n     final INodeFile newNode;\n+    Preconditions.checkNotNull(existing);\n     assert fsd.hasWriteLock();\n-    if (underConstruction) {\n-      newNode \u003d newINodeFile(id, permissions, modificationTime,\n-          modificationTime, replication, preferredBlockSize, storagePolicyId);\n-      newNode.toUnderConstruction(clientName, clientMachine);\n-    } else {\n-      newNode \u003d newINodeFile(id, permissions, modificationTime, atime,\n-          replication, preferredBlockSize, storagePolicyId);\n-    }\n-\n-    newNode.setLocalName(localName);\n     try {\n+      // check if the file is in an EC zone\n+      final boolean isStriped \u003d FSDirErasureCodingOp.isInErasureCodingZone(\n+          fsd.getFSNamesystem(), existing);\n+      if (underConstruction) {\n+        newNode \u003d newINodeFile(id, permissions, modificationTime,\n+            modificationTime, replication, preferredBlockSize, storagePolicyId,\n+            isStriped);\n+        newNode.toUnderConstruction(clientName, clientMachine);\n+      } else {\n+        newNode \u003d newINodeFile(id, permissions, modificationTime, atime,\n+            replication, preferredBlockSize, storagePolicyId, isStriped);\n+      }\n+      newNode.setLocalName(localName);\n       INodesInPath iip \u003d fsd.addINode(existing, newNode);\n       if (iip !\u003d null) {\n-        // check if the file is in an EC zone\n-        if (FSDirErasureCodingOp.isInErasureCodingZone(fsd.getFSNamesystem(),\n-            iip)) {\n-          newNode.addStripedBlocksFeature();\n-        }\n         if (aclEntries !\u003d null) {\n           AclStorage.updateINodeAcl(newNode, aclEntries, CURRENT_STATE_ID);\n         }\n         if (xAttrs !\u003d null) {\n           XAttrStorage.updateINodeXAttrs(newNode, xAttrs, CURRENT_STATE_ID);\n         }\n         return newNode;\n       }\n     } catch (IOException e) {\n       if(NameNode.stateChangeLog.isDebugEnabled()) {\n         NameNode.stateChangeLog.debug(\n             \"DIR* FSDirectory.unprotectedAddFile: exception when add \"\n                 + existing.getPath() + \" to the file system\", e);\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static INodeFile addFileForEditLog(\n      FSDirectory fsd, long id, INodesInPath existing, byte[] localName,\n      PermissionStatus permissions, List\u003cAclEntry\u003e aclEntries,\n      List\u003cXAttr\u003e xAttrs, short replication, long modificationTime, long atime,\n      long preferredBlockSize, boolean underConstruction, String clientName,\n      String clientMachine, byte storagePolicyId) {\n    final INodeFile newNode;\n    Preconditions.checkNotNull(existing);\n    assert fsd.hasWriteLock();\n    try {\n      // check if the file is in an EC zone\n      final boolean isStriped \u003d FSDirErasureCodingOp.isInErasureCodingZone(\n          fsd.getFSNamesystem(), existing);\n      if (underConstruction) {\n        newNode \u003d newINodeFile(id, permissions, modificationTime,\n            modificationTime, replication, preferredBlockSize, storagePolicyId,\n            isStriped);\n        newNode.toUnderConstruction(clientName, clientMachine);\n      } else {\n        newNode \u003d newINodeFile(id, permissions, modificationTime, atime,\n            replication, preferredBlockSize, storagePolicyId, isStriped);\n      }\n      newNode.setLocalName(localName);\n      INodesInPath iip \u003d fsd.addINode(existing, newNode);\n      if (iip !\u003d null) {\n        if (aclEntries !\u003d null) {\n          AclStorage.updateINodeAcl(newNode, aclEntries, CURRENT_STATE_ID);\n        }\n        if (xAttrs !\u003d null) {\n          XAttrStorage.updateINodeXAttrs(newNode, xAttrs, CURRENT_STATE_ID);\n        }\n        return newNode;\n      }\n    } catch (IOException e) {\n      if(NameNode.stateChangeLog.isDebugEnabled()) {\n        NameNode.stateChangeLog.debug(\n            \"DIR* FSDirectory.unprotectedAddFile: exception when add \"\n                + existing.getPath() + \" to the file system\", e);\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java",
      "extendedDetails": {}
    },
    "98d340745be682fb251677bb4830aca76119868f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8450. Erasure Coding: Consolidate erasure coding zone related implementation into a single class (Contributed by Rakesh R)\n",
      "commitDate": "10/06/15 10:18 PM",
      "commitName": "98d340745be682fb251677bb4830aca76119868f",
      "commitAuthor": "Vinayakumar B",
      "commitDateOld": "26/05/15 4:06 PM",
      "commitNameOld": "1299357a05c52ad45513ed0ea854edc9c7ec3de8",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 15.26,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,43 @@\n   static INodeFile addFileForEditLog(\n       FSDirectory fsd, long id, INodesInPath existing, byte[] localName,\n       PermissionStatus permissions, List\u003cAclEntry\u003e aclEntries,\n       List\u003cXAttr\u003e xAttrs, short replication, long modificationTime, long atime,\n       long preferredBlockSize, boolean underConstruction, String clientName,\n       String clientMachine, byte storagePolicyId) {\n     final INodeFile newNode;\n     assert fsd.hasWriteLock();\n     if (underConstruction) {\n       newNode \u003d newINodeFile(id, permissions, modificationTime,\n           modificationTime, replication, preferredBlockSize, storagePolicyId);\n       newNode.toUnderConstruction(clientName, clientMachine);\n     } else {\n       newNode \u003d newINodeFile(id, permissions, modificationTime, atime,\n           replication, preferredBlockSize, storagePolicyId);\n     }\n \n     newNode.setLocalName(localName);\n     try {\n       INodesInPath iip \u003d fsd.addINode(existing, newNode);\n       if (iip !\u003d null) {\n         // check if the file is in an EC zone\n-        if (fsd.isInECZone(iip)) {\n+        if (FSDirErasureCodingOp.isInErasureCodingZone(fsd.getFSNamesystem(),\n+            iip)) {\n           newNode.addStripedBlocksFeature();\n         }\n         if (aclEntries !\u003d null) {\n           AclStorage.updateINodeAcl(newNode, aclEntries, CURRENT_STATE_ID);\n         }\n         if (xAttrs !\u003d null) {\n           XAttrStorage.updateINodeXAttrs(newNode, xAttrs, CURRENT_STATE_ID);\n         }\n         return newNode;\n       }\n     } catch (IOException e) {\n       if(NameNode.stateChangeLog.isDebugEnabled()) {\n         NameNode.stateChangeLog.debug(\n             \"DIR* FSDirectory.unprotectedAddFile: exception when add \"\n                 + existing.getPath() + \" to the file system\", e);\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static INodeFile addFileForEditLog(\n      FSDirectory fsd, long id, INodesInPath existing, byte[] localName,\n      PermissionStatus permissions, List\u003cAclEntry\u003e aclEntries,\n      List\u003cXAttr\u003e xAttrs, short replication, long modificationTime, long atime,\n      long preferredBlockSize, boolean underConstruction, String clientName,\n      String clientMachine, byte storagePolicyId) {\n    final INodeFile newNode;\n    assert fsd.hasWriteLock();\n    if (underConstruction) {\n      newNode \u003d newINodeFile(id, permissions, modificationTime,\n          modificationTime, replication, preferredBlockSize, storagePolicyId);\n      newNode.toUnderConstruction(clientName, clientMachine);\n    } else {\n      newNode \u003d newINodeFile(id, permissions, modificationTime, atime,\n          replication, preferredBlockSize, storagePolicyId);\n    }\n\n    newNode.setLocalName(localName);\n    try {\n      INodesInPath iip \u003d fsd.addINode(existing, newNode);\n      if (iip !\u003d null) {\n        // check if the file is in an EC zone\n        if (FSDirErasureCodingOp.isInErasureCodingZone(fsd.getFSNamesystem(),\n            iip)) {\n          newNode.addStripedBlocksFeature();\n        }\n        if (aclEntries !\u003d null) {\n          AclStorage.updateINodeAcl(newNode, aclEntries, CURRENT_STATE_ID);\n        }\n        if (xAttrs !\u003d null) {\n          XAttrStorage.updateINodeXAttrs(newNode, xAttrs, CURRENT_STATE_ID);\n        }\n        return newNode;\n      }\n    } catch (IOException e) {\n      if(NameNode.stateChangeLog.isDebugEnabled()) {\n        NameNode.stateChangeLog.debug(\n            \"DIR* FSDirectory.unprotectedAddFile: exception when add \"\n                + existing.getPath() + \" to the file system\", e);\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java",
      "extendedDetails": {}
    },
    "1299357a05c52ad45513ed0ea854edc9c7ec3de8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8479. Erasure coding: fix striping related logic in FSDirWriteFileOp to sync with HDFS-8421. Contributed by Zhe Zhang.\n",
      "commitDate": "26/05/15 4:06 PM",
      "commitName": "1299357a05c52ad45513ed0ea854edc9c7ec3de8",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "26/05/15 12:02 PM",
      "commitNameOld": "e53fa769c97416af69ea567aecd44f67e896688b",
      "commitAuthorOld": "Zhe Zhang",
      "daysBetweenCommits": 0.17,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,42 @@\n   static INodeFile addFileForEditLog(\n       FSDirectory fsd, long id, INodesInPath existing, byte[] localName,\n       PermissionStatus permissions, List\u003cAclEntry\u003e aclEntries,\n       List\u003cXAttr\u003e xAttrs, short replication, long modificationTime, long atime,\n       long preferredBlockSize, boolean underConstruction, String clientName,\n       String clientMachine, byte storagePolicyId) {\n     final INodeFile newNode;\n     assert fsd.hasWriteLock();\n     if (underConstruction) {\n       newNode \u003d newINodeFile(id, permissions, modificationTime,\n           modificationTime, replication, preferredBlockSize, storagePolicyId);\n       newNode.toUnderConstruction(clientName, clientMachine);\n     } else {\n       newNode \u003d newINodeFile(id, permissions, modificationTime, atime,\n           replication, preferredBlockSize, storagePolicyId);\n     }\n \n     newNode.setLocalName(localName);\n     try {\n       INodesInPath iip \u003d fsd.addINode(existing, newNode);\n       if (iip !\u003d null) {\n+        // check if the file is in an EC zone\n+        if (fsd.isInECZone(iip)) {\n+          newNode.addStripedBlocksFeature();\n+        }\n         if (aclEntries !\u003d null) {\n           AclStorage.updateINodeAcl(newNode, aclEntries, CURRENT_STATE_ID);\n         }\n         if (xAttrs !\u003d null) {\n           XAttrStorage.updateINodeXAttrs(newNode, xAttrs, CURRENT_STATE_ID);\n         }\n         return newNode;\n       }\n     } catch (IOException e) {\n       if(NameNode.stateChangeLog.isDebugEnabled()) {\n         NameNode.stateChangeLog.debug(\n             \"DIR* FSDirectory.unprotectedAddFile: exception when add \"\n                 + existing.getPath() + \" to the file system\", e);\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static INodeFile addFileForEditLog(\n      FSDirectory fsd, long id, INodesInPath existing, byte[] localName,\n      PermissionStatus permissions, List\u003cAclEntry\u003e aclEntries,\n      List\u003cXAttr\u003e xAttrs, short replication, long modificationTime, long atime,\n      long preferredBlockSize, boolean underConstruction, String clientName,\n      String clientMachine, byte storagePolicyId) {\n    final INodeFile newNode;\n    assert fsd.hasWriteLock();\n    if (underConstruction) {\n      newNode \u003d newINodeFile(id, permissions, modificationTime,\n          modificationTime, replication, preferredBlockSize, storagePolicyId);\n      newNode.toUnderConstruction(clientName, clientMachine);\n    } else {\n      newNode \u003d newINodeFile(id, permissions, modificationTime, atime,\n          replication, preferredBlockSize, storagePolicyId);\n    }\n\n    newNode.setLocalName(localName);\n    try {\n      INodesInPath iip \u003d fsd.addINode(existing, newNode);\n      if (iip !\u003d null) {\n        // check if the file is in an EC zone\n        if (fsd.isInECZone(iip)) {\n          newNode.addStripedBlocksFeature();\n        }\n        if (aclEntries !\u003d null) {\n          AclStorage.updateINodeAcl(newNode, aclEntries, CURRENT_STATE_ID);\n        }\n        if (xAttrs !\u003d null) {\n          XAttrStorage.updateINodeXAttrs(newNode, xAttrs, CURRENT_STATE_ID);\n        }\n        return newNode;\n      }\n    } catch (IOException e) {\n      if(NameNode.stateChangeLog.isDebugEnabled()) {\n        NameNode.stateChangeLog.debug(\n            \"DIR* FSDirectory.unprotectedAddFile: exception when add \"\n                + existing.getPath() + \" to the file system\", e);\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java",
      "extendedDetails": {}
    },
    "1af8c148626effe1b41fc536019fd3349f485d59": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7839. Erasure coding: implement facilities in NameNode to create and manage EC zones. Contributed by Zhe Zhang\n",
      "commitDate": "26/05/15 11:55 AM",
      "commitName": "1af8c148626effe1b41fc536019fd3349f485d59",
      "commitAuthor": "Zhe Zhang",
      "commitDateOld": "26/05/15 11:32 AM",
      "commitNameOld": "1e1e93040748231dc913190aec1e031c379d8271",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,38 @@\n   static INodeFile addFileForEditLog(\n       FSDirectory fsd, long id, INodesInPath existing, byte[] localName,\n       PermissionStatus permissions, List\u003cAclEntry\u003e aclEntries,\n       List\u003cXAttr\u003e xAttrs, short replication, long modificationTime, long atime,\n       long preferredBlockSize, boolean underConstruction, String clientName,\n       String clientMachine, byte storagePolicyId) {\n     final INodeFile newNode;\n     assert fsd.hasWriteLock();\n     if (underConstruction) {\n       newNode \u003d newINodeFile(id, permissions, modificationTime,\n           modificationTime, replication, preferredBlockSize, storagePolicyId);\n       newNode.toUnderConstruction(clientName, clientMachine);\n     } else {\n       newNode \u003d newINodeFile(id, permissions, modificationTime, atime,\n           replication, preferredBlockSize, storagePolicyId);\n     }\n \n     newNode.setLocalName(localName);\n     try {\n       INodesInPath iip \u003d fsd.addINode(existing, newNode);\n       if (iip !\u003d null) {\n-        if (newNode.isStriped()) {\n-          newNode.addStripedBlocksFeature();\n-        }\n         if (aclEntries !\u003d null) {\n           AclStorage.updateINodeAcl(newNode, aclEntries, CURRENT_STATE_ID);\n         }\n         if (xAttrs !\u003d null) {\n           XAttrStorage.updateINodeXAttrs(newNode, xAttrs, CURRENT_STATE_ID);\n         }\n         return newNode;\n       }\n     } catch (IOException e) {\n       if(NameNode.stateChangeLog.isDebugEnabled()) {\n         NameNode.stateChangeLog.debug(\n             \"DIR* FSDirectory.unprotectedAddFile: exception when add \"\n                 + existing.getPath() + \" to the file system\", e);\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static INodeFile addFileForEditLog(\n      FSDirectory fsd, long id, INodesInPath existing, byte[] localName,\n      PermissionStatus permissions, List\u003cAclEntry\u003e aclEntries,\n      List\u003cXAttr\u003e xAttrs, short replication, long modificationTime, long atime,\n      long preferredBlockSize, boolean underConstruction, String clientName,\n      String clientMachine, byte storagePolicyId) {\n    final INodeFile newNode;\n    assert fsd.hasWriteLock();\n    if (underConstruction) {\n      newNode \u003d newINodeFile(id, permissions, modificationTime,\n          modificationTime, replication, preferredBlockSize, storagePolicyId);\n      newNode.toUnderConstruction(clientName, clientMachine);\n    } else {\n      newNode \u003d newINodeFile(id, permissions, modificationTime, atime,\n          replication, preferredBlockSize, storagePolicyId);\n    }\n\n    newNode.setLocalName(localName);\n    try {\n      INodesInPath iip \u003d fsd.addINode(existing, newNode);\n      if (iip !\u003d null) {\n        if (aclEntries !\u003d null) {\n          AclStorage.updateINodeAcl(newNode, aclEntries, CURRENT_STATE_ID);\n        }\n        if (xAttrs !\u003d null) {\n          XAttrStorage.updateINodeXAttrs(newNode, xAttrs, CURRENT_STATE_ID);\n        }\n        return newNode;\n      }\n    } catch (IOException e) {\n      if(NameNode.stateChangeLog.isDebugEnabled()) {\n        NameNode.stateChangeLog.debug(\n            \"DIR* FSDirectory.unprotectedAddFile: exception when add \"\n                + existing.getPath() + \" to the file system\", e);\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java",
      "extendedDetails": {}
    },
    "1e1e93040748231dc913190aec1e031c379d8271": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7837. Erasure Coding: allocate and persist striped blocks in NameNode. Contributed by Jing Zhao.\n",
      "commitDate": "26/05/15 11:32 AM",
      "commitName": "1e1e93040748231dc913190aec1e031c379d8271",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "21/05/15 8:08 AM",
      "commitNameOld": "2b6bcfdafa91223a4116e3e9304579f5f91dccac",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 5.14,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,41 @@\n   static INodeFile addFileForEditLog(\n       FSDirectory fsd, long id, INodesInPath existing, byte[] localName,\n       PermissionStatus permissions, List\u003cAclEntry\u003e aclEntries,\n       List\u003cXAttr\u003e xAttrs, short replication, long modificationTime, long atime,\n       long preferredBlockSize, boolean underConstruction, String clientName,\n       String clientMachine, byte storagePolicyId) {\n     final INodeFile newNode;\n     assert fsd.hasWriteLock();\n     if (underConstruction) {\n       newNode \u003d newINodeFile(id, permissions, modificationTime,\n-                                              modificationTime, replication,\n-                                              preferredBlockSize,\n-                                              storagePolicyId);\n+          modificationTime, replication, preferredBlockSize, storagePolicyId);\n       newNode.toUnderConstruction(clientName, clientMachine);\n     } else {\n-      newNode \u003d newINodeFile(id, permissions, modificationTime,\n-                                              atime, replication,\n-                                              preferredBlockSize,\n-                                              storagePolicyId);\n+      newNode \u003d newINodeFile(id, permissions, modificationTime, atime,\n+          replication, preferredBlockSize, storagePolicyId);\n     }\n \n     newNode.setLocalName(localName);\n     try {\n       INodesInPath iip \u003d fsd.addINode(existing, newNode);\n       if (iip !\u003d null) {\n+        if (newNode.isStriped()) {\n+          newNode.addStripedBlocksFeature();\n+        }\n         if (aclEntries !\u003d null) {\n           AclStorage.updateINodeAcl(newNode, aclEntries, CURRENT_STATE_ID);\n         }\n         if (xAttrs !\u003d null) {\n           XAttrStorage.updateINodeXAttrs(newNode, xAttrs, CURRENT_STATE_ID);\n         }\n         return newNode;\n       }\n     } catch (IOException e) {\n       if(NameNode.stateChangeLog.isDebugEnabled()) {\n         NameNode.stateChangeLog.debug(\n             \"DIR* FSDirectory.unprotectedAddFile: exception when add \"\n                 + existing.getPath() + \" to the file system\", e);\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static INodeFile addFileForEditLog(\n      FSDirectory fsd, long id, INodesInPath existing, byte[] localName,\n      PermissionStatus permissions, List\u003cAclEntry\u003e aclEntries,\n      List\u003cXAttr\u003e xAttrs, short replication, long modificationTime, long atime,\n      long preferredBlockSize, boolean underConstruction, String clientName,\n      String clientMachine, byte storagePolicyId) {\n    final INodeFile newNode;\n    assert fsd.hasWriteLock();\n    if (underConstruction) {\n      newNode \u003d newINodeFile(id, permissions, modificationTime,\n          modificationTime, replication, preferredBlockSize, storagePolicyId);\n      newNode.toUnderConstruction(clientName, clientMachine);\n    } else {\n      newNode \u003d newINodeFile(id, permissions, modificationTime, atime,\n          replication, preferredBlockSize, storagePolicyId);\n    }\n\n    newNode.setLocalName(localName);\n    try {\n      INodesInPath iip \u003d fsd.addINode(existing, newNode);\n      if (iip !\u003d null) {\n        if (newNode.isStriped()) {\n          newNode.addStripedBlocksFeature();\n        }\n        if (aclEntries !\u003d null) {\n          AclStorage.updateINodeAcl(newNode, aclEntries, CURRENT_STATE_ID);\n        }\n        if (xAttrs !\u003d null) {\n          XAttrStorage.updateINodeXAttrs(newNode, xAttrs, CURRENT_STATE_ID);\n        }\n        return newNode;\n      }\n    } catch (IOException e) {\n      if(NameNode.stateChangeLog.isDebugEnabled()) {\n        NameNode.stateChangeLog.debug(\n            \"DIR* FSDirectory.unprotectedAddFile: exception when add \"\n                + existing.getPath() + \" to the file system\", e);\n      }\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java",
      "extendedDetails": {}
    },
    "2b6bcfdafa91223a4116e3e9304579f5f91dccac": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "HDFS-8421. Move startFile() and related functions into FSDirWriteFileOp. Contributed by Haohui Mai.\n",
      "commitDate": "21/05/15 8:08 AM",
      "commitName": "2b6bcfdafa91223a4116e3e9304579f5f91dccac",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-8421. Move startFile() and related functions into FSDirWriteFileOp. Contributed by Haohui Mai.\n",
          "commitDate": "21/05/15 8:08 AM",
          "commitName": "2b6bcfdafa91223a4116e3e9304579f5f91dccac",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "21/05/15 7:44 AM",
          "commitNameOld": "0305316d6932e6f1a05021354d77b6934e57e171",
          "commitAuthorOld": "Devaraj K",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,42 @@\n-  INodeFile addFileForEditLog(long id, INodesInPath existing, byte[] localName,\n+  static INodeFile addFileForEditLog(\n+      FSDirectory fsd, long id, INodesInPath existing, byte[] localName,\n       PermissionStatus permissions, List\u003cAclEntry\u003e aclEntries,\n       List\u003cXAttr\u003e xAttrs, short replication, long modificationTime, long atime,\n       long preferredBlockSize, boolean underConstruction, String clientName,\n       String clientMachine, byte storagePolicyId) {\n     final INodeFile newNode;\n-    assert hasWriteLock();\n+    assert fsd.hasWriteLock();\n     if (underConstruction) {\n       newNode \u003d newINodeFile(id, permissions, modificationTime,\n-          modificationTime, replication, preferredBlockSize, storagePolicyId);\n+                                              modificationTime, replication,\n+                                              preferredBlockSize,\n+                                              storagePolicyId);\n       newNode.toUnderConstruction(clientName, clientMachine);\n     } else {\n-      newNode \u003d newINodeFile(id, permissions, modificationTime, atime,\n-          replication, preferredBlockSize, storagePolicyId);\n+      newNode \u003d newINodeFile(id, permissions, modificationTime,\n+                                              atime, replication,\n+                                              preferredBlockSize,\n+                                              storagePolicyId);\n     }\n \n     newNode.setLocalName(localName);\n     try {\n-      INodesInPath iip \u003d addINode(existing, newNode);\n+      INodesInPath iip \u003d fsd.addINode(existing, newNode);\n       if (iip !\u003d null) {\n         if (aclEntries !\u003d null) {\n           AclStorage.updateINodeAcl(newNode, aclEntries, CURRENT_STATE_ID);\n         }\n         if (xAttrs !\u003d null) {\n           XAttrStorage.updateINodeXAttrs(newNode, xAttrs, CURRENT_STATE_ID);\n         }\n         return newNode;\n       }\n     } catch (IOException e) {\n       if(NameNode.stateChangeLog.isDebugEnabled()) {\n         NameNode.stateChangeLog.debug(\n             \"DIR* FSDirectory.unprotectedAddFile: exception when add \"\n                 + existing.getPath() + \" to the file system\", e);\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static INodeFile addFileForEditLog(\n      FSDirectory fsd, long id, INodesInPath existing, byte[] localName,\n      PermissionStatus permissions, List\u003cAclEntry\u003e aclEntries,\n      List\u003cXAttr\u003e xAttrs, short replication, long modificationTime, long atime,\n      long preferredBlockSize, boolean underConstruction, String clientName,\n      String clientMachine, byte storagePolicyId) {\n    final INodeFile newNode;\n    assert fsd.hasWriteLock();\n    if (underConstruction) {\n      newNode \u003d newINodeFile(id, permissions, modificationTime,\n                                              modificationTime, replication,\n                                              preferredBlockSize,\n                                              storagePolicyId);\n      newNode.toUnderConstruction(clientName, clientMachine);\n    } else {\n      newNode \u003d newINodeFile(id, permissions, modificationTime,\n                                              atime, replication,\n                                              preferredBlockSize,\n                                              storagePolicyId);\n    }\n\n    newNode.setLocalName(localName);\n    try {\n      INodesInPath iip \u003d fsd.addINode(existing, newNode);\n      if (iip !\u003d null) {\n        if (aclEntries !\u003d null) {\n          AclStorage.updateINodeAcl(newNode, aclEntries, CURRENT_STATE_ID);\n        }\n        if (xAttrs !\u003d null) {\n          XAttrStorage.updateINodeXAttrs(newNode, xAttrs, CURRENT_STATE_ID);\n        }\n        return newNode;\n      }\n    } catch (IOException e) {\n      if(NameNode.stateChangeLog.isDebugEnabled()) {\n        NameNode.stateChangeLog.debug(\n            \"DIR* FSDirectory.unprotectedAddFile: exception when add \"\n                + existing.getPath() + \" to the file system\", e);\n      }\n    }\n    return null;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java",
            "oldMethodName": "addFileForEditLog",
            "newMethodName": "addFileForEditLog"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-8421. Move startFile() and related functions into FSDirWriteFileOp. Contributed by Haohui Mai.\n",
          "commitDate": "21/05/15 8:08 AM",
          "commitName": "2b6bcfdafa91223a4116e3e9304579f5f91dccac",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "21/05/15 7:44 AM",
          "commitNameOld": "0305316d6932e6f1a05021354d77b6934e57e171",
          "commitAuthorOld": "Devaraj K",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,42 @@\n-  INodeFile addFileForEditLog(long id, INodesInPath existing, byte[] localName,\n+  static INodeFile addFileForEditLog(\n+      FSDirectory fsd, long id, INodesInPath existing, byte[] localName,\n       PermissionStatus permissions, List\u003cAclEntry\u003e aclEntries,\n       List\u003cXAttr\u003e xAttrs, short replication, long modificationTime, long atime,\n       long preferredBlockSize, boolean underConstruction, String clientName,\n       String clientMachine, byte storagePolicyId) {\n     final INodeFile newNode;\n-    assert hasWriteLock();\n+    assert fsd.hasWriteLock();\n     if (underConstruction) {\n       newNode \u003d newINodeFile(id, permissions, modificationTime,\n-          modificationTime, replication, preferredBlockSize, storagePolicyId);\n+                                              modificationTime, replication,\n+                                              preferredBlockSize,\n+                                              storagePolicyId);\n       newNode.toUnderConstruction(clientName, clientMachine);\n     } else {\n-      newNode \u003d newINodeFile(id, permissions, modificationTime, atime,\n-          replication, preferredBlockSize, storagePolicyId);\n+      newNode \u003d newINodeFile(id, permissions, modificationTime,\n+                                              atime, replication,\n+                                              preferredBlockSize,\n+                                              storagePolicyId);\n     }\n \n     newNode.setLocalName(localName);\n     try {\n-      INodesInPath iip \u003d addINode(existing, newNode);\n+      INodesInPath iip \u003d fsd.addINode(existing, newNode);\n       if (iip !\u003d null) {\n         if (aclEntries !\u003d null) {\n           AclStorage.updateINodeAcl(newNode, aclEntries, CURRENT_STATE_ID);\n         }\n         if (xAttrs !\u003d null) {\n           XAttrStorage.updateINodeXAttrs(newNode, xAttrs, CURRENT_STATE_ID);\n         }\n         return newNode;\n       }\n     } catch (IOException e) {\n       if(NameNode.stateChangeLog.isDebugEnabled()) {\n         NameNode.stateChangeLog.debug(\n             \"DIR* FSDirectory.unprotectedAddFile: exception when add \"\n                 + existing.getPath() + \" to the file system\", e);\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static INodeFile addFileForEditLog(\n      FSDirectory fsd, long id, INodesInPath existing, byte[] localName,\n      PermissionStatus permissions, List\u003cAclEntry\u003e aclEntries,\n      List\u003cXAttr\u003e xAttrs, short replication, long modificationTime, long atime,\n      long preferredBlockSize, boolean underConstruction, String clientName,\n      String clientMachine, byte storagePolicyId) {\n    final INodeFile newNode;\n    assert fsd.hasWriteLock();\n    if (underConstruction) {\n      newNode \u003d newINodeFile(id, permissions, modificationTime,\n                                              modificationTime, replication,\n                                              preferredBlockSize,\n                                              storagePolicyId);\n      newNode.toUnderConstruction(clientName, clientMachine);\n    } else {\n      newNode \u003d newINodeFile(id, permissions, modificationTime,\n                                              atime, replication,\n                                              preferredBlockSize,\n                                              storagePolicyId);\n    }\n\n    newNode.setLocalName(localName);\n    try {\n      INodesInPath iip \u003d fsd.addINode(existing, newNode);\n      if (iip !\u003d null) {\n        if (aclEntries !\u003d null) {\n          AclStorage.updateINodeAcl(newNode, aclEntries, CURRENT_STATE_ID);\n        }\n        if (xAttrs !\u003d null) {\n          XAttrStorage.updateINodeXAttrs(newNode, xAttrs, CURRENT_STATE_ID);\n        }\n        return newNode;\n      }\n    } catch (IOException e) {\n      if(NameNode.stateChangeLog.isDebugEnabled()) {\n        NameNode.stateChangeLog.debug(\n            \"DIR* FSDirectory.unprotectedAddFile: exception when add \"\n                + existing.getPath() + \" to the file system\", e);\n      }\n    }\n    return null;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8421. Move startFile() and related functions into FSDirWriteFileOp. Contributed by Haohui Mai.\n",
          "commitDate": "21/05/15 8:08 AM",
          "commitName": "2b6bcfdafa91223a4116e3e9304579f5f91dccac",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "21/05/15 7:44 AM",
          "commitNameOld": "0305316d6932e6f1a05021354d77b6934e57e171",
          "commitAuthorOld": "Devaraj K",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,42 @@\n-  INodeFile addFileForEditLog(long id, INodesInPath existing, byte[] localName,\n+  static INodeFile addFileForEditLog(\n+      FSDirectory fsd, long id, INodesInPath existing, byte[] localName,\n       PermissionStatus permissions, List\u003cAclEntry\u003e aclEntries,\n       List\u003cXAttr\u003e xAttrs, short replication, long modificationTime, long atime,\n       long preferredBlockSize, boolean underConstruction, String clientName,\n       String clientMachine, byte storagePolicyId) {\n     final INodeFile newNode;\n-    assert hasWriteLock();\n+    assert fsd.hasWriteLock();\n     if (underConstruction) {\n       newNode \u003d newINodeFile(id, permissions, modificationTime,\n-          modificationTime, replication, preferredBlockSize, storagePolicyId);\n+                                              modificationTime, replication,\n+                                              preferredBlockSize,\n+                                              storagePolicyId);\n       newNode.toUnderConstruction(clientName, clientMachine);\n     } else {\n-      newNode \u003d newINodeFile(id, permissions, modificationTime, atime,\n-          replication, preferredBlockSize, storagePolicyId);\n+      newNode \u003d newINodeFile(id, permissions, modificationTime,\n+                                              atime, replication,\n+                                              preferredBlockSize,\n+                                              storagePolicyId);\n     }\n \n     newNode.setLocalName(localName);\n     try {\n-      INodesInPath iip \u003d addINode(existing, newNode);\n+      INodesInPath iip \u003d fsd.addINode(existing, newNode);\n       if (iip !\u003d null) {\n         if (aclEntries !\u003d null) {\n           AclStorage.updateINodeAcl(newNode, aclEntries, CURRENT_STATE_ID);\n         }\n         if (xAttrs !\u003d null) {\n           XAttrStorage.updateINodeXAttrs(newNode, xAttrs, CURRENT_STATE_ID);\n         }\n         return newNode;\n       }\n     } catch (IOException e) {\n       if(NameNode.stateChangeLog.isDebugEnabled()) {\n         NameNode.stateChangeLog.debug(\n             \"DIR* FSDirectory.unprotectedAddFile: exception when add \"\n                 + existing.getPath() + \" to the file system\", e);\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static INodeFile addFileForEditLog(\n      FSDirectory fsd, long id, INodesInPath existing, byte[] localName,\n      PermissionStatus permissions, List\u003cAclEntry\u003e aclEntries,\n      List\u003cXAttr\u003e xAttrs, short replication, long modificationTime, long atime,\n      long preferredBlockSize, boolean underConstruction, String clientName,\n      String clientMachine, byte storagePolicyId) {\n    final INodeFile newNode;\n    assert fsd.hasWriteLock();\n    if (underConstruction) {\n      newNode \u003d newINodeFile(id, permissions, modificationTime,\n                                              modificationTime, replication,\n                                              preferredBlockSize,\n                                              storagePolicyId);\n      newNode.toUnderConstruction(clientName, clientMachine);\n    } else {\n      newNode \u003d newINodeFile(id, permissions, modificationTime,\n                                              atime, replication,\n                                              preferredBlockSize,\n                                              storagePolicyId);\n    }\n\n    newNode.setLocalName(localName);\n    try {\n      INodesInPath iip \u003d fsd.addINode(existing, newNode);\n      if (iip !\u003d null) {\n        if (aclEntries !\u003d null) {\n          AclStorage.updateINodeAcl(newNode, aclEntries, CURRENT_STATE_ID);\n        }\n        if (xAttrs !\u003d null) {\n          XAttrStorage.updateINodeXAttrs(newNode, xAttrs, CURRENT_STATE_ID);\n        }\n        return newNode;\n      }\n    } catch (IOException e) {\n      if(NameNode.stateChangeLog.isDebugEnabled()) {\n        NameNode.stateChangeLog.debug(\n            \"DIR* FSDirectory.unprotectedAddFile: exception when add \"\n                + existing.getPath() + \" to the file system\", e);\n      }\n    }\n    return null;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-8421. Move startFile() and related functions into FSDirWriteFileOp. Contributed by Haohui Mai.\n",
          "commitDate": "21/05/15 8:08 AM",
          "commitName": "2b6bcfdafa91223a4116e3e9304579f5f91dccac",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "21/05/15 7:44 AM",
          "commitNameOld": "0305316d6932e6f1a05021354d77b6934e57e171",
          "commitAuthorOld": "Devaraj K",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,42 @@\n-  INodeFile addFileForEditLog(long id, INodesInPath existing, byte[] localName,\n+  static INodeFile addFileForEditLog(\n+      FSDirectory fsd, long id, INodesInPath existing, byte[] localName,\n       PermissionStatus permissions, List\u003cAclEntry\u003e aclEntries,\n       List\u003cXAttr\u003e xAttrs, short replication, long modificationTime, long atime,\n       long preferredBlockSize, boolean underConstruction, String clientName,\n       String clientMachine, byte storagePolicyId) {\n     final INodeFile newNode;\n-    assert hasWriteLock();\n+    assert fsd.hasWriteLock();\n     if (underConstruction) {\n       newNode \u003d newINodeFile(id, permissions, modificationTime,\n-          modificationTime, replication, preferredBlockSize, storagePolicyId);\n+                                              modificationTime, replication,\n+                                              preferredBlockSize,\n+                                              storagePolicyId);\n       newNode.toUnderConstruction(clientName, clientMachine);\n     } else {\n-      newNode \u003d newINodeFile(id, permissions, modificationTime, atime,\n-          replication, preferredBlockSize, storagePolicyId);\n+      newNode \u003d newINodeFile(id, permissions, modificationTime,\n+                                              atime, replication,\n+                                              preferredBlockSize,\n+                                              storagePolicyId);\n     }\n \n     newNode.setLocalName(localName);\n     try {\n-      INodesInPath iip \u003d addINode(existing, newNode);\n+      INodesInPath iip \u003d fsd.addINode(existing, newNode);\n       if (iip !\u003d null) {\n         if (aclEntries !\u003d null) {\n           AclStorage.updateINodeAcl(newNode, aclEntries, CURRENT_STATE_ID);\n         }\n         if (xAttrs !\u003d null) {\n           XAttrStorage.updateINodeXAttrs(newNode, xAttrs, CURRENT_STATE_ID);\n         }\n         return newNode;\n       }\n     } catch (IOException e) {\n       if(NameNode.stateChangeLog.isDebugEnabled()) {\n         NameNode.stateChangeLog.debug(\n             \"DIR* FSDirectory.unprotectedAddFile: exception when add \"\n                 + existing.getPath() + \" to the file system\", e);\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static INodeFile addFileForEditLog(\n      FSDirectory fsd, long id, INodesInPath existing, byte[] localName,\n      PermissionStatus permissions, List\u003cAclEntry\u003e aclEntries,\n      List\u003cXAttr\u003e xAttrs, short replication, long modificationTime, long atime,\n      long preferredBlockSize, boolean underConstruction, String clientName,\n      String clientMachine, byte storagePolicyId) {\n    final INodeFile newNode;\n    assert fsd.hasWriteLock();\n    if (underConstruction) {\n      newNode \u003d newINodeFile(id, permissions, modificationTime,\n                                              modificationTime, replication,\n                                              preferredBlockSize,\n                                              storagePolicyId);\n      newNode.toUnderConstruction(clientName, clientMachine);\n    } else {\n      newNode \u003d newINodeFile(id, permissions, modificationTime,\n                                              atime, replication,\n                                              preferredBlockSize,\n                                              storagePolicyId);\n    }\n\n    newNode.setLocalName(localName);\n    try {\n      INodesInPath iip \u003d fsd.addINode(existing, newNode);\n      if (iip !\u003d null) {\n        if (aclEntries !\u003d null) {\n          AclStorage.updateINodeAcl(newNode, aclEntries, CURRENT_STATE_ID);\n        }\n        if (xAttrs !\u003d null) {\n          XAttrStorage.updateINodeXAttrs(newNode, xAttrs, CURRENT_STATE_ID);\n        }\n        return newNode;\n      }\n    } catch (IOException e) {\n      if(NameNode.stateChangeLog.isDebugEnabled()) {\n        NameNode.stateChangeLog.debug(\n            \"DIR* FSDirectory.unprotectedAddFile: exception when add \"\n                + existing.getPath() + \" to the file system\", e);\n      }\n    }\n    return null;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirWriteFileOp.java",
          "extendedDetails": {
            "oldValue": "[id-long, existing-INodesInPath, localName-byte[], permissions-PermissionStatus, aclEntries-List\u003cAclEntry\u003e, xAttrs-List\u003cXAttr\u003e, replication-short, modificationTime-long, atime-long, preferredBlockSize-long, underConstruction-boolean, clientName-String, clientMachine-String, storagePolicyId-byte]",
            "newValue": "[fsd-FSDirectory, id-long, existing-INodesInPath, localName-byte[], permissions-PermissionStatus, aclEntries-List\u003cAclEntry\u003e, xAttrs-List\u003cXAttr\u003e, replication-short, modificationTime-long, atime-long, preferredBlockSize-long, underConstruction-boolean, clientName-String, clientMachine-String, storagePolicyId-byte]"
          }
        }
      ]
    },
    "5caebbae8c2fc9ba2e32384657aee21641a1a6d0": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-7484. Make FSDirectory#addINode take existing INodes as its parameter. Contributed by Jing Zhao.\n",
      "commitDate": "22/12/14 11:19 PM",
      "commitName": "5caebbae8c2fc9ba2e32384657aee21641a1a6d0",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-7484. Make FSDirectory#addINode take existing INodes as its parameter. Contributed by Jing Zhao.\n",
          "commitDate": "22/12/14 11:19 PM",
          "commitName": "5caebbae8c2fc9ba2e32384657aee21641a1a6d0",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "18/12/14 11:25 AM",
          "commitNameOld": "65f2a4ee600dfffa5203450261da3c1989de25a9",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 4.5,
          "commitsBetweenForRepo": 32,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,37 @@\n-  INodeFile unprotectedAddFile(long id,\n-                            INodesInPath iip,\n-                            PermissionStatus permissions,\n-                            List\u003cAclEntry\u003e aclEntries,\n-                            List\u003cXAttr\u003e xAttrs,\n-                            short replication,\n-                            long modificationTime,\n-                            long atime,\n-                            long preferredBlockSize,\n-                            boolean underConstruction,\n-                            String clientName,\n-                            String clientMachine,\n-                            byte storagePolicyId) {\n+  INodeFile addFileForEditLog(long id, INodesInPath existing, byte[] localName,\n+      PermissionStatus permissions, List\u003cAclEntry\u003e aclEntries,\n+      List\u003cXAttr\u003e xAttrs, short replication, long modificationTime, long atime,\n+      long preferredBlockSize, boolean underConstruction, String clientName,\n+      String clientMachine, byte storagePolicyId) {\n     final INodeFile newNode;\n     assert hasWriteLock();\n     if (underConstruction) {\n       newNode \u003d newINodeFile(id, permissions, modificationTime,\n           modificationTime, replication, preferredBlockSize, storagePolicyId);\n       newNode.toUnderConstruction(clientName, clientMachine);\n     } else {\n       newNode \u003d newINodeFile(id, permissions, modificationTime, atime,\n           replication, preferredBlockSize, storagePolicyId);\n     }\n \n+    newNode.setLocalName(localName);\n     try {\n-      if (addINode(iip, newNode)) {\n+      INodesInPath iip \u003d addINode(existing, newNode);\n+      if (iip !\u003d null) {\n         if (aclEntries !\u003d null) {\n-          AclStorage.updateINodeAcl(newNode, aclEntries,\n-            Snapshot.CURRENT_STATE_ID);\n+          AclStorage.updateINodeAcl(newNode, aclEntries, CURRENT_STATE_ID);\n         }\n         if (xAttrs !\u003d null) {\n-          XAttrStorage.updateINodeXAttrs(newNode, xAttrs,\n-              Snapshot.CURRENT_STATE_ID);\n+          XAttrStorage.updateINodeXAttrs(newNode, xAttrs, CURRENT_STATE_ID);\n         }\n         return newNode;\n       }\n     } catch (IOException e) {\n       if(NameNode.stateChangeLog.isDebugEnabled()) {\n         NameNode.stateChangeLog.debug(\n             \"DIR* FSDirectory.unprotectedAddFile: exception when add \"\n-                + iip.getPath() + \" to the file system\", e);\n+                + existing.getPath() + \" to the file system\", e);\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  INodeFile addFileForEditLog(long id, INodesInPath existing, byte[] localName,\n      PermissionStatus permissions, List\u003cAclEntry\u003e aclEntries,\n      List\u003cXAttr\u003e xAttrs, short replication, long modificationTime, long atime,\n      long preferredBlockSize, boolean underConstruction, String clientName,\n      String clientMachine, byte storagePolicyId) {\n    final INodeFile newNode;\n    assert hasWriteLock();\n    if (underConstruction) {\n      newNode \u003d newINodeFile(id, permissions, modificationTime,\n          modificationTime, replication, preferredBlockSize, storagePolicyId);\n      newNode.toUnderConstruction(clientName, clientMachine);\n    } else {\n      newNode \u003d newINodeFile(id, permissions, modificationTime, atime,\n          replication, preferredBlockSize, storagePolicyId);\n    }\n\n    newNode.setLocalName(localName);\n    try {\n      INodesInPath iip \u003d addINode(existing, newNode);\n      if (iip !\u003d null) {\n        if (aclEntries !\u003d null) {\n          AclStorage.updateINodeAcl(newNode, aclEntries, CURRENT_STATE_ID);\n        }\n        if (xAttrs !\u003d null) {\n          XAttrStorage.updateINodeXAttrs(newNode, xAttrs, CURRENT_STATE_ID);\n        }\n        return newNode;\n      }\n    } catch (IOException e) {\n      if(NameNode.stateChangeLog.isDebugEnabled()) {\n        NameNode.stateChangeLog.debug(\n            \"DIR* FSDirectory.unprotectedAddFile: exception when add \"\n                + existing.getPath() + \" to the file system\", e);\n      }\n    }\n    return null;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
          "extendedDetails": {
            "oldValue": "unprotectedAddFile",
            "newValue": "addFileForEditLog"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7484. Make FSDirectory#addINode take existing INodes as its parameter. Contributed by Jing Zhao.\n",
          "commitDate": "22/12/14 11:19 PM",
          "commitName": "5caebbae8c2fc9ba2e32384657aee21641a1a6d0",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "18/12/14 11:25 AM",
          "commitNameOld": "65f2a4ee600dfffa5203450261da3c1989de25a9",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 4.5,
          "commitsBetweenForRepo": 32,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,37 @@\n-  INodeFile unprotectedAddFile(long id,\n-                            INodesInPath iip,\n-                            PermissionStatus permissions,\n-                            List\u003cAclEntry\u003e aclEntries,\n-                            List\u003cXAttr\u003e xAttrs,\n-                            short replication,\n-                            long modificationTime,\n-                            long atime,\n-                            long preferredBlockSize,\n-                            boolean underConstruction,\n-                            String clientName,\n-                            String clientMachine,\n-                            byte storagePolicyId) {\n+  INodeFile addFileForEditLog(long id, INodesInPath existing, byte[] localName,\n+      PermissionStatus permissions, List\u003cAclEntry\u003e aclEntries,\n+      List\u003cXAttr\u003e xAttrs, short replication, long modificationTime, long atime,\n+      long preferredBlockSize, boolean underConstruction, String clientName,\n+      String clientMachine, byte storagePolicyId) {\n     final INodeFile newNode;\n     assert hasWriteLock();\n     if (underConstruction) {\n       newNode \u003d newINodeFile(id, permissions, modificationTime,\n           modificationTime, replication, preferredBlockSize, storagePolicyId);\n       newNode.toUnderConstruction(clientName, clientMachine);\n     } else {\n       newNode \u003d newINodeFile(id, permissions, modificationTime, atime,\n           replication, preferredBlockSize, storagePolicyId);\n     }\n \n+    newNode.setLocalName(localName);\n     try {\n-      if (addINode(iip, newNode)) {\n+      INodesInPath iip \u003d addINode(existing, newNode);\n+      if (iip !\u003d null) {\n         if (aclEntries !\u003d null) {\n-          AclStorage.updateINodeAcl(newNode, aclEntries,\n-            Snapshot.CURRENT_STATE_ID);\n+          AclStorage.updateINodeAcl(newNode, aclEntries, CURRENT_STATE_ID);\n         }\n         if (xAttrs !\u003d null) {\n-          XAttrStorage.updateINodeXAttrs(newNode, xAttrs,\n-              Snapshot.CURRENT_STATE_ID);\n+          XAttrStorage.updateINodeXAttrs(newNode, xAttrs, CURRENT_STATE_ID);\n         }\n         return newNode;\n       }\n     } catch (IOException e) {\n       if(NameNode.stateChangeLog.isDebugEnabled()) {\n         NameNode.stateChangeLog.debug(\n             \"DIR* FSDirectory.unprotectedAddFile: exception when add \"\n-                + iip.getPath() + \" to the file system\", e);\n+                + existing.getPath() + \" to the file system\", e);\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  INodeFile addFileForEditLog(long id, INodesInPath existing, byte[] localName,\n      PermissionStatus permissions, List\u003cAclEntry\u003e aclEntries,\n      List\u003cXAttr\u003e xAttrs, short replication, long modificationTime, long atime,\n      long preferredBlockSize, boolean underConstruction, String clientName,\n      String clientMachine, byte storagePolicyId) {\n    final INodeFile newNode;\n    assert hasWriteLock();\n    if (underConstruction) {\n      newNode \u003d newINodeFile(id, permissions, modificationTime,\n          modificationTime, replication, preferredBlockSize, storagePolicyId);\n      newNode.toUnderConstruction(clientName, clientMachine);\n    } else {\n      newNode \u003d newINodeFile(id, permissions, modificationTime, atime,\n          replication, preferredBlockSize, storagePolicyId);\n    }\n\n    newNode.setLocalName(localName);\n    try {\n      INodesInPath iip \u003d addINode(existing, newNode);\n      if (iip !\u003d null) {\n        if (aclEntries !\u003d null) {\n          AclStorage.updateINodeAcl(newNode, aclEntries, CURRENT_STATE_ID);\n        }\n        if (xAttrs !\u003d null) {\n          XAttrStorage.updateINodeXAttrs(newNode, xAttrs, CURRENT_STATE_ID);\n        }\n        return newNode;\n      }\n    } catch (IOException e) {\n      if(NameNode.stateChangeLog.isDebugEnabled()) {\n        NameNode.stateChangeLog.debug(\n            \"DIR* FSDirectory.unprotectedAddFile: exception when add \"\n                + existing.getPath() + \" to the file system\", e);\n      }\n    }\n    return null;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
          "extendedDetails": {
            "oldValue": "[id-long, iip-INodesInPath, permissions-PermissionStatus, aclEntries-List\u003cAclEntry\u003e, xAttrs-List\u003cXAttr\u003e, replication-short, modificationTime-long, atime-long, preferredBlockSize-long, underConstruction-boolean, clientName-String, clientMachine-String, storagePolicyId-byte]",
            "newValue": "[id-long, existing-INodesInPath, localName-byte[], permissions-PermissionStatus, aclEntries-List\u003cAclEntry\u003e, xAttrs-List\u003cXAttr\u003e, replication-short, modificationTime-long, atime-long, preferredBlockSize-long, underConstruction-boolean, clientName-String, clientMachine-String, storagePolicyId-byte]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7484. Make FSDirectory#addINode take existing INodes as its parameter. Contributed by Jing Zhao.\n",
          "commitDate": "22/12/14 11:19 PM",
          "commitName": "5caebbae8c2fc9ba2e32384657aee21641a1a6d0",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "18/12/14 11:25 AM",
          "commitNameOld": "65f2a4ee600dfffa5203450261da3c1989de25a9",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 4.5,
          "commitsBetweenForRepo": 32,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,37 @@\n-  INodeFile unprotectedAddFile(long id,\n-                            INodesInPath iip,\n-                            PermissionStatus permissions,\n-                            List\u003cAclEntry\u003e aclEntries,\n-                            List\u003cXAttr\u003e xAttrs,\n-                            short replication,\n-                            long modificationTime,\n-                            long atime,\n-                            long preferredBlockSize,\n-                            boolean underConstruction,\n-                            String clientName,\n-                            String clientMachine,\n-                            byte storagePolicyId) {\n+  INodeFile addFileForEditLog(long id, INodesInPath existing, byte[] localName,\n+      PermissionStatus permissions, List\u003cAclEntry\u003e aclEntries,\n+      List\u003cXAttr\u003e xAttrs, short replication, long modificationTime, long atime,\n+      long preferredBlockSize, boolean underConstruction, String clientName,\n+      String clientMachine, byte storagePolicyId) {\n     final INodeFile newNode;\n     assert hasWriteLock();\n     if (underConstruction) {\n       newNode \u003d newINodeFile(id, permissions, modificationTime,\n           modificationTime, replication, preferredBlockSize, storagePolicyId);\n       newNode.toUnderConstruction(clientName, clientMachine);\n     } else {\n       newNode \u003d newINodeFile(id, permissions, modificationTime, atime,\n           replication, preferredBlockSize, storagePolicyId);\n     }\n \n+    newNode.setLocalName(localName);\n     try {\n-      if (addINode(iip, newNode)) {\n+      INodesInPath iip \u003d addINode(existing, newNode);\n+      if (iip !\u003d null) {\n         if (aclEntries !\u003d null) {\n-          AclStorage.updateINodeAcl(newNode, aclEntries,\n-            Snapshot.CURRENT_STATE_ID);\n+          AclStorage.updateINodeAcl(newNode, aclEntries, CURRENT_STATE_ID);\n         }\n         if (xAttrs !\u003d null) {\n-          XAttrStorage.updateINodeXAttrs(newNode, xAttrs,\n-              Snapshot.CURRENT_STATE_ID);\n+          XAttrStorage.updateINodeXAttrs(newNode, xAttrs, CURRENT_STATE_ID);\n         }\n         return newNode;\n       }\n     } catch (IOException e) {\n       if(NameNode.stateChangeLog.isDebugEnabled()) {\n         NameNode.stateChangeLog.debug(\n             \"DIR* FSDirectory.unprotectedAddFile: exception when add \"\n-                + iip.getPath() + \" to the file system\", e);\n+                + existing.getPath() + \" to the file system\", e);\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  INodeFile addFileForEditLog(long id, INodesInPath existing, byte[] localName,\n      PermissionStatus permissions, List\u003cAclEntry\u003e aclEntries,\n      List\u003cXAttr\u003e xAttrs, short replication, long modificationTime, long atime,\n      long preferredBlockSize, boolean underConstruction, String clientName,\n      String clientMachine, byte storagePolicyId) {\n    final INodeFile newNode;\n    assert hasWriteLock();\n    if (underConstruction) {\n      newNode \u003d newINodeFile(id, permissions, modificationTime,\n          modificationTime, replication, preferredBlockSize, storagePolicyId);\n      newNode.toUnderConstruction(clientName, clientMachine);\n    } else {\n      newNode \u003d newINodeFile(id, permissions, modificationTime, atime,\n          replication, preferredBlockSize, storagePolicyId);\n    }\n\n    newNode.setLocalName(localName);\n    try {\n      INodesInPath iip \u003d addINode(existing, newNode);\n      if (iip !\u003d null) {\n        if (aclEntries !\u003d null) {\n          AclStorage.updateINodeAcl(newNode, aclEntries, CURRENT_STATE_ID);\n        }\n        if (xAttrs !\u003d null) {\n          XAttrStorage.updateINodeXAttrs(newNode, xAttrs, CURRENT_STATE_ID);\n        }\n        return newNode;\n      }\n    } catch (IOException e) {\n      if(NameNode.stateChangeLog.isDebugEnabled()) {\n        NameNode.stateChangeLog.debug(\n            \"DIR* FSDirectory.unprotectedAddFile: exception when add \"\n                + existing.getPath() + \" to the file system\", e);\n      }\n    }\n    return null;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
          "extendedDetails": {}
        }
      ]
    },
    "c78e3a7cdd10c40454e9acb06986ba6d8573cb19": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-7059. Avoid resolving path multiple times. Contributed by Jing Zhao.\n",
      "commitDate": "12/12/14 3:13 PM",
      "commitName": "c78e3a7cdd10c40454e9acb06986ba6d8573cb19",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7059. Avoid resolving path multiple times. Contributed by Jing Zhao.\n",
          "commitDate": "12/12/14 3:13 PM",
          "commitName": "c78e3a7cdd10c40454e9acb06986ba6d8573cb19",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "09/12/14 11:37 AM",
          "commitNameOld": "5776a41da08af653206bb94d7c76c9c4dcce059a",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 3.15,
          "commitsBetweenForRepo": 33,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,45 @@\n-  INodeFile unprotectedAddFile( long id,\n-                            String path, \n+  INodeFile unprotectedAddFile(long id,\n+                            INodesInPath iip,\n                             PermissionStatus permissions,\n                             List\u003cAclEntry\u003e aclEntries,\n                             List\u003cXAttr\u003e xAttrs,\n                             short replication,\n                             long modificationTime,\n                             long atime,\n                             long preferredBlockSize,\n                             boolean underConstruction,\n                             String clientName,\n                             String clientMachine,\n                             byte storagePolicyId) {\n     final INodeFile newNode;\n     assert hasWriteLock();\n     if (underConstruction) {\n       newNode \u003d newINodeFile(id, permissions, modificationTime,\n           modificationTime, replication, preferredBlockSize, storagePolicyId);\n       newNode.toUnderConstruction(clientName, clientMachine);\n-\n     } else {\n       newNode \u003d newINodeFile(id, permissions, modificationTime, atime,\n           replication, preferredBlockSize, storagePolicyId);\n     }\n \n     try {\n-      if (addINode(path, newNode)) {\n+      if (addINode(iip, newNode)) {\n         if (aclEntries !\u003d null) {\n           AclStorage.updateINodeAcl(newNode, aclEntries,\n             Snapshot.CURRENT_STATE_ID);\n         }\n         if (xAttrs !\u003d null) {\n           XAttrStorage.updateINodeXAttrs(newNode, xAttrs,\n               Snapshot.CURRENT_STATE_ID);\n         }\n         return newNode;\n       }\n     } catch (IOException e) {\n       if(NameNode.stateChangeLog.isDebugEnabled()) {\n         NameNode.stateChangeLog.debug(\n-            \"DIR* FSDirectory.unprotectedAddFile: exception when add \" + path\n-                + \" to the file system\", e);\n+            \"DIR* FSDirectory.unprotectedAddFile: exception when add \"\n+                + iip.getPath() + \" to the file system\", e);\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  INodeFile unprotectedAddFile(long id,\n                            INodesInPath iip,\n                            PermissionStatus permissions,\n                            List\u003cAclEntry\u003e aclEntries,\n                            List\u003cXAttr\u003e xAttrs,\n                            short replication,\n                            long modificationTime,\n                            long atime,\n                            long preferredBlockSize,\n                            boolean underConstruction,\n                            String clientName,\n                            String clientMachine,\n                            byte storagePolicyId) {\n    final INodeFile newNode;\n    assert hasWriteLock();\n    if (underConstruction) {\n      newNode \u003d newINodeFile(id, permissions, modificationTime,\n          modificationTime, replication, preferredBlockSize, storagePolicyId);\n      newNode.toUnderConstruction(clientName, clientMachine);\n    } else {\n      newNode \u003d newINodeFile(id, permissions, modificationTime, atime,\n          replication, preferredBlockSize, storagePolicyId);\n    }\n\n    try {\n      if (addINode(iip, newNode)) {\n        if (aclEntries !\u003d null) {\n          AclStorage.updateINodeAcl(newNode, aclEntries,\n            Snapshot.CURRENT_STATE_ID);\n        }\n        if (xAttrs !\u003d null) {\n          XAttrStorage.updateINodeXAttrs(newNode, xAttrs,\n              Snapshot.CURRENT_STATE_ID);\n        }\n        return newNode;\n      }\n    } catch (IOException e) {\n      if(NameNode.stateChangeLog.isDebugEnabled()) {\n        NameNode.stateChangeLog.debug(\n            \"DIR* FSDirectory.unprotectedAddFile: exception when add \"\n                + iip.getPath() + \" to the file system\", e);\n      }\n    }\n    return null;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
          "extendedDetails": {
            "oldValue": "[id-long, path-String, permissions-PermissionStatus, aclEntries-List\u003cAclEntry\u003e, xAttrs-List\u003cXAttr\u003e, replication-short, modificationTime-long, atime-long, preferredBlockSize-long, underConstruction-boolean, clientName-String, clientMachine-String, storagePolicyId-byte]",
            "newValue": "[id-long, iip-INodesInPath, permissions-PermissionStatus, aclEntries-List\u003cAclEntry\u003e, xAttrs-List\u003cXAttr\u003e, replication-short, modificationTime-long, atime-long, preferredBlockSize-long, underConstruction-boolean, clientName-String, clientMachine-String, storagePolicyId-byte]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7059. Avoid resolving path multiple times. Contributed by Jing Zhao.\n",
          "commitDate": "12/12/14 3:13 PM",
          "commitName": "c78e3a7cdd10c40454e9acb06986ba6d8573cb19",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "09/12/14 11:37 AM",
          "commitNameOld": "5776a41da08af653206bb94d7c76c9c4dcce059a",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 3.15,
          "commitsBetweenForRepo": 33,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,45 @@\n-  INodeFile unprotectedAddFile( long id,\n-                            String path, \n+  INodeFile unprotectedAddFile(long id,\n+                            INodesInPath iip,\n                             PermissionStatus permissions,\n                             List\u003cAclEntry\u003e aclEntries,\n                             List\u003cXAttr\u003e xAttrs,\n                             short replication,\n                             long modificationTime,\n                             long atime,\n                             long preferredBlockSize,\n                             boolean underConstruction,\n                             String clientName,\n                             String clientMachine,\n                             byte storagePolicyId) {\n     final INodeFile newNode;\n     assert hasWriteLock();\n     if (underConstruction) {\n       newNode \u003d newINodeFile(id, permissions, modificationTime,\n           modificationTime, replication, preferredBlockSize, storagePolicyId);\n       newNode.toUnderConstruction(clientName, clientMachine);\n-\n     } else {\n       newNode \u003d newINodeFile(id, permissions, modificationTime, atime,\n           replication, preferredBlockSize, storagePolicyId);\n     }\n \n     try {\n-      if (addINode(path, newNode)) {\n+      if (addINode(iip, newNode)) {\n         if (aclEntries !\u003d null) {\n           AclStorage.updateINodeAcl(newNode, aclEntries,\n             Snapshot.CURRENT_STATE_ID);\n         }\n         if (xAttrs !\u003d null) {\n           XAttrStorage.updateINodeXAttrs(newNode, xAttrs,\n               Snapshot.CURRENT_STATE_ID);\n         }\n         return newNode;\n       }\n     } catch (IOException e) {\n       if(NameNode.stateChangeLog.isDebugEnabled()) {\n         NameNode.stateChangeLog.debug(\n-            \"DIR* FSDirectory.unprotectedAddFile: exception when add \" + path\n-                + \" to the file system\", e);\n+            \"DIR* FSDirectory.unprotectedAddFile: exception when add \"\n+                + iip.getPath() + \" to the file system\", e);\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  INodeFile unprotectedAddFile(long id,\n                            INodesInPath iip,\n                            PermissionStatus permissions,\n                            List\u003cAclEntry\u003e aclEntries,\n                            List\u003cXAttr\u003e xAttrs,\n                            short replication,\n                            long modificationTime,\n                            long atime,\n                            long preferredBlockSize,\n                            boolean underConstruction,\n                            String clientName,\n                            String clientMachine,\n                            byte storagePolicyId) {\n    final INodeFile newNode;\n    assert hasWriteLock();\n    if (underConstruction) {\n      newNode \u003d newINodeFile(id, permissions, modificationTime,\n          modificationTime, replication, preferredBlockSize, storagePolicyId);\n      newNode.toUnderConstruction(clientName, clientMachine);\n    } else {\n      newNode \u003d newINodeFile(id, permissions, modificationTime, atime,\n          replication, preferredBlockSize, storagePolicyId);\n    }\n\n    try {\n      if (addINode(iip, newNode)) {\n        if (aclEntries !\u003d null) {\n          AclStorage.updateINodeAcl(newNode, aclEntries,\n            Snapshot.CURRENT_STATE_ID);\n        }\n        if (xAttrs !\u003d null) {\n          XAttrStorage.updateINodeXAttrs(newNode, xAttrs,\n              Snapshot.CURRENT_STATE_ID);\n        }\n        return newNode;\n      }\n    } catch (IOException e) {\n      if(NameNode.stateChangeLog.isDebugEnabled()) {\n        NameNode.stateChangeLog.debug(\n            \"DIR* FSDirectory.unprotectedAddFile: exception when add \"\n                + iip.getPath() + \" to the file system\", e);\n      }\n    }\n    return null;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
          "extendedDetails": {}
        }
      ]
    },
    "9e9e9cf71100fe7ceebd5a5ac27b164059b708c9": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-7153. Add storagePolicy to NN edit log during file creation. (Arpit Agarwal)\n",
      "commitDate": "30/09/14 6:10 PM",
      "commitName": "9e9e9cf71100fe7ceebd5a5ac27b164059b708c9",
      "commitAuthor": "arp",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7153. Add storagePolicy to NN edit log during file creation. (Arpit Agarwal)\n",
          "commitDate": "30/09/14 6:10 PM",
          "commitName": "9e9e9cf71100fe7ceebd5a5ac27b164059b708c9",
          "commitAuthor": "arp",
          "commitDateOld": "29/09/14 2:14 PM",
          "commitNameOld": "7f0efe96f85704e39349f20ab6a11bfaa81c6a75",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 1.16,
          "commitsBetweenForRepo": 18,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,46 @@\n   INodeFile unprotectedAddFile( long id,\n                             String path, \n                             PermissionStatus permissions,\n                             List\u003cAclEntry\u003e aclEntries,\n                             List\u003cXAttr\u003e xAttrs,\n                             short replication,\n                             long modificationTime,\n                             long atime,\n                             long preferredBlockSize,\n                             boolean underConstruction,\n                             String clientName,\n-                            String clientMachine) {\n+                            String clientMachine,\n+                            byte storagePolicyId) {\n     final INodeFile newNode;\n     assert hasWriteLock();\n     if (underConstruction) {\n       newNode \u003d newINodeFile(id, permissions, modificationTime,\n-          modificationTime, replication, preferredBlockSize);\n+          modificationTime, replication, preferredBlockSize, storagePolicyId);\n       newNode.toUnderConstruction(clientName, clientMachine);\n \n     } else {\n       newNode \u003d newINodeFile(id, permissions, modificationTime, atime,\n-          replication, preferredBlockSize);\n+          replication, preferredBlockSize, storagePolicyId);\n     }\n \n     try {\n       if (addINode(path, newNode)) {\n         if (aclEntries !\u003d null) {\n           AclStorage.updateINodeAcl(newNode, aclEntries,\n             Snapshot.CURRENT_STATE_ID);\n         }\n         if (xAttrs !\u003d null) {\n           XAttrStorage.updateINodeXAttrs(newNode, xAttrs,\n               Snapshot.CURRENT_STATE_ID);\n         }\n         return newNode;\n       }\n     } catch (IOException e) {\n       if(NameNode.stateChangeLog.isDebugEnabled()) {\n         NameNode.stateChangeLog.debug(\n             \"DIR* FSDirectory.unprotectedAddFile: exception when add \" + path\n                 + \" to the file system\", e);\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  INodeFile unprotectedAddFile( long id,\n                            String path, \n                            PermissionStatus permissions,\n                            List\u003cAclEntry\u003e aclEntries,\n                            List\u003cXAttr\u003e xAttrs,\n                            short replication,\n                            long modificationTime,\n                            long atime,\n                            long preferredBlockSize,\n                            boolean underConstruction,\n                            String clientName,\n                            String clientMachine,\n                            byte storagePolicyId) {\n    final INodeFile newNode;\n    assert hasWriteLock();\n    if (underConstruction) {\n      newNode \u003d newINodeFile(id, permissions, modificationTime,\n          modificationTime, replication, preferredBlockSize, storagePolicyId);\n      newNode.toUnderConstruction(clientName, clientMachine);\n\n    } else {\n      newNode \u003d newINodeFile(id, permissions, modificationTime, atime,\n          replication, preferredBlockSize, storagePolicyId);\n    }\n\n    try {\n      if (addINode(path, newNode)) {\n        if (aclEntries !\u003d null) {\n          AclStorage.updateINodeAcl(newNode, aclEntries,\n            Snapshot.CURRENT_STATE_ID);\n        }\n        if (xAttrs !\u003d null) {\n          XAttrStorage.updateINodeXAttrs(newNode, xAttrs,\n              Snapshot.CURRENT_STATE_ID);\n        }\n        return newNode;\n      }\n    } catch (IOException e) {\n      if(NameNode.stateChangeLog.isDebugEnabled()) {\n        NameNode.stateChangeLog.debug(\n            \"DIR* FSDirectory.unprotectedAddFile: exception when add \" + path\n                + \" to the file system\", e);\n      }\n    }\n    return null;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
          "extendedDetails": {
            "oldValue": "[id-long, path-String, permissions-PermissionStatus, aclEntries-List\u003cAclEntry\u003e, xAttrs-List\u003cXAttr\u003e, replication-short, modificationTime-long, atime-long, preferredBlockSize-long, underConstruction-boolean, clientName-String, clientMachine-String]",
            "newValue": "[id-long, path-String, permissions-PermissionStatus, aclEntries-List\u003cAclEntry\u003e, xAttrs-List\u003cXAttr\u003e, replication-short, modificationTime-long, atime-long, preferredBlockSize-long, underConstruction-boolean, clientName-String, clientMachine-String, storagePolicyId-byte]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7153. Add storagePolicy to NN edit log during file creation. (Arpit Agarwal)\n",
          "commitDate": "30/09/14 6:10 PM",
          "commitName": "9e9e9cf71100fe7ceebd5a5ac27b164059b708c9",
          "commitAuthor": "arp",
          "commitDateOld": "29/09/14 2:14 PM",
          "commitNameOld": "7f0efe96f85704e39349f20ab6a11bfaa81c6a75",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 1.16,
          "commitsBetweenForRepo": 18,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,46 @@\n   INodeFile unprotectedAddFile( long id,\n                             String path, \n                             PermissionStatus permissions,\n                             List\u003cAclEntry\u003e aclEntries,\n                             List\u003cXAttr\u003e xAttrs,\n                             short replication,\n                             long modificationTime,\n                             long atime,\n                             long preferredBlockSize,\n                             boolean underConstruction,\n                             String clientName,\n-                            String clientMachine) {\n+                            String clientMachine,\n+                            byte storagePolicyId) {\n     final INodeFile newNode;\n     assert hasWriteLock();\n     if (underConstruction) {\n       newNode \u003d newINodeFile(id, permissions, modificationTime,\n-          modificationTime, replication, preferredBlockSize);\n+          modificationTime, replication, preferredBlockSize, storagePolicyId);\n       newNode.toUnderConstruction(clientName, clientMachine);\n \n     } else {\n       newNode \u003d newINodeFile(id, permissions, modificationTime, atime,\n-          replication, preferredBlockSize);\n+          replication, preferredBlockSize, storagePolicyId);\n     }\n \n     try {\n       if (addINode(path, newNode)) {\n         if (aclEntries !\u003d null) {\n           AclStorage.updateINodeAcl(newNode, aclEntries,\n             Snapshot.CURRENT_STATE_ID);\n         }\n         if (xAttrs !\u003d null) {\n           XAttrStorage.updateINodeXAttrs(newNode, xAttrs,\n               Snapshot.CURRENT_STATE_ID);\n         }\n         return newNode;\n       }\n     } catch (IOException e) {\n       if(NameNode.stateChangeLog.isDebugEnabled()) {\n         NameNode.stateChangeLog.debug(\n             \"DIR* FSDirectory.unprotectedAddFile: exception when add \" + path\n                 + \" to the file system\", e);\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  INodeFile unprotectedAddFile( long id,\n                            String path, \n                            PermissionStatus permissions,\n                            List\u003cAclEntry\u003e aclEntries,\n                            List\u003cXAttr\u003e xAttrs,\n                            short replication,\n                            long modificationTime,\n                            long atime,\n                            long preferredBlockSize,\n                            boolean underConstruction,\n                            String clientName,\n                            String clientMachine,\n                            byte storagePolicyId) {\n    final INodeFile newNode;\n    assert hasWriteLock();\n    if (underConstruction) {\n      newNode \u003d newINodeFile(id, permissions, modificationTime,\n          modificationTime, replication, preferredBlockSize, storagePolicyId);\n      newNode.toUnderConstruction(clientName, clientMachine);\n\n    } else {\n      newNode \u003d newINodeFile(id, permissions, modificationTime, atime,\n          replication, preferredBlockSize, storagePolicyId);\n    }\n\n    try {\n      if (addINode(path, newNode)) {\n        if (aclEntries !\u003d null) {\n          AclStorage.updateINodeAcl(newNode, aclEntries,\n            Snapshot.CURRENT_STATE_ID);\n        }\n        if (xAttrs !\u003d null) {\n          XAttrStorage.updateINodeXAttrs(newNode, xAttrs,\n              Snapshot.CURRENT_STATE_ID);\n        }\n        return newNode;\n      }\n    } catch (IOException e) {\n      if(NameNode.stateChangeLog.isDebugEnabled()) {\n        NameNode.stateChangeLog.debug(\n            \"DIR* FSDirectory.unprotectedAddFile: exception when add \" + path\n                + \" to the file system\", e);\n      }\n    }\n    return null;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
          "extendedDetails": {}
        }
      ]
    },
    "bb84f1fccb18c6c7373851e05d2451d55e908242": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-7159. Use block storage policy to set lazy persist preference. (Arpit Agarwal)\n",
      "commitDate": "29/09/14 10:27 PM",
      "commitName": "bb84f1fccb18c6c7373851e05d2451d55e908242",
      "commitAuthor": "arp",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7159. Use block storage policy to set lazy persist preference. (Arpit Agarwal)\n",
          "commitDate": "29/09/14 10:27 PM",
          "commitName": "bb84f1fccb18c6c7373851e05d2451d55e908242",
          "commitAuthor": "arp",
          "commitDateOld": "29/09/14 4:29 PM",
          "commitNameOld": "7f0422be763b7ab6a60a0e90670e12661683f835",
          "commitAuthorOld": "",
          "daysBetweenCommits": 0.25,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,46 @@\n   INodeFile unprotectedAddFile( long id,\n                             String path, \n                             PermissionStatus permissions,\n                             List\u003cAclEntry\u003e aclEntries,\n                             List\u003cXAttr\u003e xAttrs,\n                             short replication,\n                             long modificationTime,\n                             long atime,\n                             long preferredBlockSize,\n-                            boolean isLazyPersist,\n                             boolean underConstruction,\n                             String clientName,\n                             String clientMachine,\n                             byte storagePolicyId) {\n     final INodeFile newNode;\n     assert hasWriteLock();\n     if (underConstruction) {\n       newNode \u003d newINodeFile(id, permissions, modificationTime,\n-          modificationTime, replication, preferredBlockSize, isLazyPersist, storagePolicyId);\n+          modificationTime, replication, preferredBlockSize, storagePolicyId);\n       newNode.toUnderConstruction(clientName, clientMachine);\n \n     } else {\n       newNode \u003d newINodeFile(id, permissions, modificationTime, atime,\n-          replication, preferredBlockSize, isLazyPersist, storagePolicyId);\n+          replication, preferredBlockSize, storagePolicyId);\n     }\n \n     try {\n       if (addINode(path, newNode)) {\n         if (aclEntries !\u003d null) {\n           AclStorage.updateINodeAcl(newNode, aclEntries,\n             Snapshot.CURRENT_STATE_ID);\n         }\n         if (xAttrs !\u003d null) {\n           XAttrStorage.updateINodeXAttrs(newNode, xAttrs,\n               Snapshot.CURRENT_STATE_ID);\n         }\n         return newNode;\n       }\n     } catch (IOException e) {\n       if(NameNode.stateChangeLog.isDebugEnabled()) {\n         NameNode.stateChangeLog.debug(\n             \"DIR* FSDirectory.unprotectedAddFile: exception when add \" + path\n                 + \" to the file system\", e);\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  INodeFile unprotectedAddFile( long id,\n                            String path, \n                            PermissionStatus permissions,\n                            List\u003cAclEntry\u003e aclEntries,\n                            List\u003cXAttr\u003e xAttrs,\n                            short replication,\n                            long modificationTime,\n                            long atime,\n                            long preferredBlockSize,\n                            boolean underConstruction,\n                            String clientName,\n                            String clientMachine,\n                            byte storagePolicyId) {\n    final INodeFile newNode;\n    assert hasWriteLock();\n    if (underConstruction) {\n      newNode \u003d newINodeFile(id, permissions, modificationTime,\n          modificationTime, replication, preferredBlockSize, storagePolicyId);\n      newNode.toUnderConstruction(clientName, clientMachine);\n\n    } else {\n      newNode \u003d newINodeFile(id, permissions, modificationTime, atime,\n          replication, preferredBlockSize, storagePolicyId);\n    }\n\n    try {\n      if (addINode(path, newNode)) {\n        if (aclEntries !\u003d null) {\n          AclStorage.updateINodeAcl(newNode, aclEntries,\n            Snapshot.CURRENT_STATE_ID);\n        }\n        if (xAttrs !\u003d null) {\n          XAttrStorage.updateINodeXAttrs(newNode, xAttrs,\n              Snapshot.CURRENT_STATE_ID);\n        }\n        return newNode;\n      }\n    } catch (IOException e) {\n      if(NameNode.stateChangeLog.isDebugEnabled()) {\n        NameNode.stateChangeLog.debug(\n            \"DIR* FSDirectory.unprotectedAddFile: exception when add \" + path\n                + \" to the file system\", e);\n      }\n    }\n    return null;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
          "extendedDetails": {
            "oldValue": "[id-long, path-String, permissions-PermissionStatus, aclEntries-List\u003cAclEntry\u003e, xAttrs-List\u003cXAttr\u003e, replication-short, modificationTime-long, atime-long, preferredBlockSize-long, isLazyPersist-boolean, underConstruction-boolean, clientName-String, clientMachine-String, storagePolicyId-byte]",
            "newValue": "[id-long, path-String, permissions-PermissionStatus, aclEntries-List\u003cAclEntry\u003e, xAttrs-List\u003cXAttr\u003e, replication-short, modificationTime-long, atime-long, preferredBlockSize-long, underConstruction-boolean, clientName-String, clientMachine-String, storagePolicyId-byte]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7159. Use block storage policy to set lazy persist preference. (Arpit Agarwal)\n",
          "commitDate": "29/09/14 10:27 PM",
          "commitName": "bb84f1fccb18c6c7373851e05d2451d55e908242",
          "commitAuthor": "arp",
          "commitDateOld": "29/09/14 4:29 PM",
          "commitNameOld": "7f0422be763b7ab6a60a0e90670e12661683f835",
          "commitAuthorOld": "",
          "daysBetweenCommits": 0.25,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,46 @@\n   INodeFile unprotectedAddFile( long id,\n                             String path, \n                             PermissionStatus permissions,\n                             List\u003cAclEntry\u003e aclEntries,\n                             List\u003cXAttr\u003e xAttrs,\n                             short replication,\n                             long modificationTime,\n                             long atime,\n                             long preferredBlockSize,\n-                            boolean isLazyPersist,\n                             boolean underConstruction,\n                             String clientName,\n                             String clientMachine,\n                             byte storagePolicyId) {\n     final INodeFile newNode;\n     assert hasWriteLock();\n     if (underConstruction) {\n       newNode \u003d newINodeFile(id, permissions, modificationTime,\n-          modificationTime, replication, preferredBlockSize, isLazyPersist, storagePolicyId);\n+          modificationTime, replication, preferredBlockSize, storagePolicyId);\n       newNode.toUnderConstruction(clientName, clientMachine);\n \n     } else {\n       newNode \u003d newINodeFile(id, permissions, modificationTime, atime,\n-          replication, preferredBlockSize, isLazyPersist, storagePolicyId);\n+          replication, preferredBlockSize, storagePolicyId);\n     }\n \n     try {\n       if (addINode(path, newNode)) {\n         if (aclEntries !\u003d null) {\n           AclStorage.updateINodeAcl(newNode, aclEntries,\n             Snapshot.CURRENT_STATE_ID);\n         }\n         if (xAttrs !\u003d null) {\n           XAttrStorage.updateINodeXAttrs(newNode, xAttrs,\n               Snapshot.CURRENT_STATE_ID);\n         }\n         return newNode;\n       }\n     } catch (IOException e) {\n       if(NameNode.stateChangeLog.isDebugEnabled()) {\n         NameNode.stateChangeLog.debug(\n             \"DIR* FSDirectory.unprotectedAddFile: exception when add \" + path\n                 + \" to the file system\", e);\n       }\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  INodeFile unprotectedAddFile( long id,\n                            String path, \n                            PermissionStatus permissions,\n                            List\u003cAclEntry\u003e aclEntries,\n                            List\u003cXAttr\u003e xAttrs,\n                            short replication,\n                            long modificationTime,\n                            long atime,\n                            long preferredBlockSize,\n                            boolean underConstruction,\n                            String clientName,\n                            String clientMachine,\n                            byte storagePolicyId) {\n    final INodeFile newNode;\n    assert hasWriteLock();\n    if (underConstruction) {\n      newNode \u003d newINodeFile(id, permissions, modificationTime,\n          modificationTime, replication, preferredBlockSize, storagePolicyId);\n      newNode.toUnderConstruction(clientName, clientMachine);\n\n    } else {\n      newNode \u003d newINodeFile(id, permissions, modificationTime, atime,\n          replication, preferredBlockSize, storagePolicyId);\n    }\n\n    try {\n      if (addINode(path, newNode)) {\n        if (aclEntries !\u003d null) {\n          AclStorage.updateINodeAcl(newNode, aclEntries,\n            Snapshot.CURRENT_STATE_ID);\n        }\n        if (xAttrs !\u003d null) {\n          XAttrStorage.updateINodeXAttrs(newNode, xAttrs,\n              Snapshot.CURRENT_STATE_ID);\n        }\n        return newNode;\n      }\n    } catch (IOException e) {\n      if(NameNode.stateChangeLog.isDebugEnabled()) {\n        NameNode.stateChangeLog.debug(\n            \"DIR* FSDirectory.unprotectedAddFile: exception when add \" + path\n                + \" to the file system\", e);\n      }\n    }\n    return null;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
          "extendedDetails": {}
        }
      ]
    }
  }
}