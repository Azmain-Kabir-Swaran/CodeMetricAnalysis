{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NodesListManager.java",
  "functionName": "refreshNodesGracefully",
  "functionId": "refreshNodesGracefully___yarnConf-Configuration__timeout-Integer",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/NodesListManager.java",
  "functionStartLine": 625,
  "functionEndLine": 628,
  "numCommitsSeen": 58,
  "timeTaken": 4439,
  "changeHistory": [
    "0da69c324dee9baab0f0b9700db1cc5b623f8421",
    "d0da13229cf692579c8c9db47a93f6c6255392c8",
    "2a5da97f81d69b481e4d1324a47e64bb55b9407c",
    "1cbcd4a491e6a57d466c2897335614dc6770b475",
    "3fab88540f079591e5dae1c9184f8b26bb843427",
    "9bc913a35c46e65d373c3ae3f01a377e16e8d0ca",
    "fad9d7e85b1ba0934ab592daa9d3c9550b2bb501"
  ],
  "changeHistoryShort": {
    "0da69c324dee9baab0f0b9700db1cc5b623f8421": "Ymultichange(Yparameterchange,Ybodychange)",
    "d0da13229cf692579c8c9db47a93f6c6255392c8": "Ybodychange",
    "2a5da97f81d69b481e4d1324a47e64bb55b9407c": "Ybodychange",
    "1cbcd4a491e6a57d466c2897335614dc6770b475": "Ybodychange",
    "3fab88540f079591e5dae1c9184f8b26bb843427": "Ybodychange",
    "9bc913a35c46e65d373c3ae3f01a377e16e8d0ca": "Ybodychange",
    "fad9d7e85b1ba0934ab592daa9d3c9550b2bb501": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0da69c324dee9baab0f0b9700db1cc5b623f8421": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-4676. Automatic and Asynchronous Decommissioning Nodes Status Tracking. Contributed by Diniel Zhi.\n(cherry picked from commit d464483bf7f0b3e3be3ba32cd6c3eee546747ab5)\n\nConflicts:\n\n\thadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java\n\thadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmnode/RMNode.java\n\thadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmnode/RMNodeImpl.java\n",
      "commitDate": "18/08/16 7:27 AM",
      "commitName": "0da69c324dee9baab0f0b9700db1cc5b623f8421",
      "commitAuthor": "Junping Du",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4676. Automatic and Asynchronous Decommissioning Nodes Status Tracking. Contributed by Diniel Zhi.\n(cherry picked from commit d464483bf7f0b3e3be3ba32cd6c3eee546747ab5)\n\nConflicts:\n\n\thadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java\n\thadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmnode/RMNode.java\n\thadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmnode/RMNodeImpl.java\n",
          "commitDate": "18/08/16 7:27 AM",
          "commitName": "0da69c324dee9baab0f0b9700db1cc5b623f8421",
          "commitAuthor": "Junping Du",
          "commitDateOld": "19/05/16 1:01 PM",
          "commitNameOld": "feb90ffcca536e7deac50976b8a8774450fe089f",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 90.77,
          "commitsBetweenForRepo": 735,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,4 @@\n-  public void refreshNodesGracefully(Configuration conf) throws IOException,\n-      YarnException {\n-    refreshHostsReader(conf);\n-    for (Entry\u003cNodeId, RMNode\u003e entry : rmContext.getRMNodes().entrySet()) {\n-      NodeId nodeId \u003d entry.getKey();\n-      if (!isValidNode(nodeId.getHost())) {\n-        RMNodeEventType nodeEventType \u003d isUntrackedNode(nodeId.getHost()) ?\n-            RMNodeEventType.SHUTDOWN : RMNodeEventType.GRACEFUL_DECOMMISSION;\n-        this.rmContext.getDispatcher().getEventHandler().handle(\n-            new RMNodeEvent(nodeId, nodeEventType));\n-      } else {\n-        // Recommissioning the nodes\n-        if (entry.getValue().getState() \u003d\u003d NodeState.DECOMMISSIONING) {\n-          this.rmContext.getDispatcher().getEventHandler()\n-              .handle(new RMNodeEvent(nodeId, RMNodeEventType.RECOMMISSION));\n-        }\n-      }\n-    }\n-    updateInactiveNodes();\n+  public void refreshNodesGracefully(Configuration yarnConf, Integer timeout)\n+      throws IOException, YarnException {\n+    refreshHostsReader(yarnConf, true, timeout);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void refreshNodesGracefully(Configuration yarnConf, Integer timeout)\n      throws IOException, YarnException {\n    refreshHostsReader(yarnConf, true, timeout);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/NodesListManager.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration]",
            "newValue": "[yarnConf-Configuration, timeout-Integer]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4676. Automatic and Asynchronous Decommissioning Nodes Status Tracking. Contributed by Diniel Zhi.\n(cherry picked from commit d464483bf7f0b3e3be3ba32cd6c3eee546747ab5)\n\nConflicts:\n\n\thadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java\n\thadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmnode/RMNode.java\n\thadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmnode/RMNodeImpl.java\n",
          "commitDate": "18/08/16 7:27 AM",
          "commitName": "0da69c324dee9baab0f0b9700db1cc5b623f8421",
          "commitAuthor": "Junping Du",
          "commitDateOld": "19/05/16 1:01 PM",
          "commitNameOld": "feb90ffcca536e7deac50976b8a8774450fe089f",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 90.77,
          "commitsBetweenForRepo": 735,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,4 @@\n-  public void refreshNodesGracefully(Configuration conf) throws IOException,\n-      YarnException {\n-    refreshHostsReader(conf);\n-    for (Entry\u003cNodeId, RMNode\u003e entry : rmContext.getRMNodes().entrySet()) {\n-      NodeId nodeId \u003d entry.getKey();\n-      if (!isValidNode(nodeId.getHost())) {\n-        RMNodeEventType nodeEventType \u003d isUntrackedNode(nodeId.getHost()) ?\n-            RMNodeEventType.SHUTDOWN : RMNodeEventType.GRACEFUL_DECOMMISSION;\n-        this.rmContext.getDispatcher().getEventHandler().handle(\n-            new RMNodeEvent(nodeId, nodeEventType));\n-      } else {\n-        // Recommissioning the nodes\n-        if (entry.getValue().getState() \u003d\u003d NodeState.DECOMMISSIONING) {\n-          this.rmContext.getDispatcher().getEventHandler()\n-              .handle(new RMNodeEvent(nodeId, RMNodeEventType.RECOMMISSION));\n-        }\n-      }\n-    }\n-    updateInactiveNodes();\n+  public void refreshNodesGracefully(Configuration yarnConf, Integer timeout)\n+      throws IOException, YarnException {\n+    refreshHostsReader(yarnConf, true, timeout);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void refreshNodesGracefully(Configuration yarnConf, Integer timeout)\n      throws IOException, YarnException {\n    refreshHostsReader(yarnConf, true, timeout);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/NodesListManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "d0da13229cf692579c8c9db47a93f6c6255392c8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4311. Removing nodes from include and exclude lists will not remove them from decommissioned nodes list. Contributed by Kuhu Shukla\n",
      "commitDate": "05/05/16 7:07 AM",
      "commitName": "d0da13229cf692579c8c9db47a93f6c6255392c8",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "15/04/16 1:36 PM",
      "commitNameOld": "69f3d428d5c3ab0c79cacffc22b1f59408622ae7",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 19.73,
      "commitsBetweenForRepo": 110,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,20 @@\n   public void refreshNodesGracefully(Configuration conf) throws IOException,\n       YarnException {\n     refreshHostsReader(conf);\n-    for (Entry\u003cNodeId, RMNode\u003e entry:rmContext.getRMNodes().entrySet()) {\n+    for (Entry\u003cNodeId, RMNode\u003e entry : rmContext.getRMNodes().entrySet()) {\n       NodeId nodeId \u003d entry.getKey();\n       if (!isValidNode(nodeId.getHost())) {\n+        RMNodeEventType nodeEventType \u003d isUntrackedNode(nodeId.getHost()) ?\n+            RMNodeEventType.SHUTDOWN : RMNodeEventType.GRACEFUL_DECOMMISSION;\n         this.rmContext.getDispatcher().getEventHandler().handle(\n-            new RMNodeEvent(nodeId, RMNodeEventType.GRACEFUL_DECOMMISSION));\n+            new RMNodeEvent(nodeId, nodeEventType));\n       } else {\n         // Recommissioning the nodes\n         if (entry.getValue().getState() \u003d\u003d NodeState.DECOMMISSIONING) {\n           this.rmContext.getDispatcher().getEventHandler()\n               .handle(new RMNodeEvent(nodeId, RMNodeEventType.RECOMMISSION));\n         }\n       }\n     }\n+    updateInactiveNodes();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void refreshNodesGracefully(Configuration conf) throws IOException,\n      YarnException {\n    refreshHostsReader(conf);\n    for (Entry\u003cNodeId, RMNode\u003e entry : rmContext.getRMNodes().entrySet()) {\n      NodeId nodeId \u003d entry.getKey();\n      if (!isValidNode(nodeId.getHost())) {\n        RMNodeEventType nodeEventType \u003d isUntrackedNode(nodeId.getHost()) ?\n            RMNodeEventType.SHUTDOWN : RMNodeEventType.GRACEFUL_DECOMMISSION;\n        this.rmContext.getDispatcher().getEventHandler().handle(\n            new RMNodeEvent(nodeId, nodeEventType));\n      } else {\n        // Recommissioning the nodes\n        if (entry.getValue().getState() \u003d\u003d NodeState.DECOMMISSIONING) {\n          this.rmContext.getDispatcher().getEventHandler()\n              .handle(new RMNodeEvent(nodeId, RMNodeEventType.RECOMMISSION));\n        }\n      }\n    }\n    updateInactiveNodes();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/NodesListManager.java",
      "extendedDetails": {}
    },
    "2a5da97f81d69b481e4d1324a47e64bb55b9407c": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"YARN-4311. Removing nodes from include and exclude lists will not remove them from decommissioned nodes list. Contributed by Kuhu Shukla\"\n\nThis reverts commit 1cbcd4a491e6a57d466c2897335614dc6770b475.\n",
      "commitDate": "11/04/16 8:51 AM",
      "commitName": "2a5da97f81d69b481e4d1324a47e64bb55b9407c",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "05/04/16 6:40 AM",
      "commitNameOld": "1cbcd4a491e6a57d466c2897335614dc6770b475",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 6.09,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,17 @@\n   public void refreshNodesGracefully(Configuration conf) throws IOException,\n       YarnException {\n     refreshHostsReader(conf);\n-    for (Entry\u003cNodeId, RMNode\u003e entry : rmContext.getRMNodes().entrySet()) {\n+    for (Entry\u003cNodeId, RMNode\u003e entry:rmContext.getRMNodes().entrySet()) {\n       NodeId nodeId \u003d entry.getKey();\n       if (!isValidNode(nodeId.getHost())) {\n-        RMNodeEventType nodeEventType \u003d isUntrackedNode(nodeId.getHost()) ?\n-            RMNodeEventType.SHUTDOWN : RMNodeEventType.GRACEFUL_DECOMMISSION;\n         this.rmContext.getDispatcher().getEventHandler().handle(\n-            new RMNodeEvent(nodeId, nodeEventType));\n+            new RMNodeEvent(nodeId, RMNodeEventType.GRACEFUL_DECOMMISSION));\n       } else {\n         // Recommissioning the nodes\n         if (entry.getValue().getState() \u003d\u003d NodeState.DECOMMISSIONING) {\n           this.rmContext.getDispatcher().getEventHandler()\n               .handle(new RMNodeEvent(nodeId, RMNodeEventType.RECOMMISSION));\n         }\n       }\n     }\n-    updateInactiveNodes();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void refreshNodesGracefully(Configuration conf) throws IOException,\n      YarnException {\n    refreshHostsReader(conf);\n    for (Entry\u003cNodeId, RMNode\u003e entry:rmContext.getRMNodes().entrySet()) {\n      NodeId nodeId \u003d entry.getKey();\n      if (!isValidNode(nodeId.getHost())) {\n        this.rmContext.getDispatcher().getEventHandler().handle(\n            new RMNodeEvent(nodeId, RMNodeEventType.GRACEFUL_DECOMMISSION));\n      } else {\n        // Recommissioning the nodes\n        if (entry.getValue().getState() \u003d\u003d NodeState.DECOMMISSIONING) {\n          this.rmContext.getDispatcher().getEventHandler()\n              .handle(new RMNodeEvent(nodeId, RMNodeEventType.RECOMMISSION));\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/NodesListManager.java",
      "extendedDetails": {}
    },
    "1cbcd4a491e6a57d466c2897335614dc6770b475": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4311. Removing nodes from include and exclude lists will not remove them from decommissioned nodes list. Contributed by Kuhu Shukla\n",
      "commitDate": "05/04/16 6:40 AM",
      "commitName": "1cbcd4a491e6a57d466c2897335614dc6770b475",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "26/02/16 12:24 PM",
      "commitNameOld": "6b0f813e898cbd14b2ae52ecfed6d30bce8cb6b7",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 38.72,
      "commitsBetweenForRepo": 221,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,20 @@\n   public void refreshNodesGracefully(Configuration conf) throws IOException,\n       YarnException {\n     refreshHostsReader(conf);\n-    for (Entry\u003cNodeId, RMNode\u003e entry:rmContext.getRMNodes().entrySet()) {\n+    for (Entry\u003cNodeId, RMNode\u003e entry : rmContext.getRMNodes().entrySet()) {\n       NodeId nodeId \u003d entry.getKey();\n       if (!isValidNode(nodeId.getHost())) {\n+        RMNodeEventType nodeEventType \u003d isUntrackedNode(nodeId.getHost()) ?\n+            RMNodeEventType.SHUTDOWN : RMNodeEventType.GRACEFUL_DECOMMISSION;\n         this.rmContext.getDispatcher().getEventHandler().handle(\n-            new RMNodeEvent(nodeId, RMNodeEventType.GRACEFUL_DECOMMISSION));\n+            new RMNodeEvent(nodeId, nodeEventType));\n       } else {\n         // Recommissioning the nodes\n         if (entry.getValue().getState() \u003d\u003d NodeState.DECOMMISSIONING) {\n           this.rmContext.getDispatcher().getEventHandler()\n               .handle(new RMNodeEvent(nodeId, RMNodeEventType.RECOMMISSION));\n         }\n       }\n     }\n+    updateInactiveNodes();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void refreshNodesGracefully(Configuration conf) throws IOException,\n      YarnException {\n    refreshHostsReader(conf);\n    for (Entry\u003cNodeId, RMNode\u003e entry : rmContext.getRMNodes().entrySet()) {\n      NodeId nodeId \u003d entry.getKey();\n      if (!isValidNode(nodeId.getHost())) {\n        RMNodeEventType nodeEventType \u003d isUntrackedNode(nodeId.getHost()) ?\n            RMNodeEventType.SHUTDOWN : RMNodeEventType.GRACEFUL_DECOMMISSION;\n        this.rmContext.getDispatcher().getEventHandler().handle(\n            new RMNodeEvent(nodeId, nodeEventType));\n      } else {\n        // Recommissioning the nodes\n        if (entry.getValue().getState() \u003d\u003d NodeState.DECOMMISSIONING) {\n          this.rmContext.getDispatcher().getEventHandler()\n              .handle(new RMNodeEvent(nodeId, RMNodeEventType.RECOMMISSION));\n        }\n      }\n    }\n    updateInactiveNodes();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/NodesListManager.java",
      "extendedDetails": {}
    },
    "3fab88540f079591e5dae1c9184f8b26bb843427": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4386. refreshNodesGracefully() should send recommission event to active RMNodes only. Contributed by Kuhu Shukla.\n",
      "commitDate": "22/02/16 7:04 AM",
      "commitName": "3fab88540f079591e5dae1c9184f8b26bb843427",
      "commitAuthor": "Junping Du",
      "commitDateOld": "01/02/16 3:15 PM",
      "commitNameOld": "ed55950164a66e08fa34e30dba1030c5a986d1f1",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 20.66,
      "commitsBetweenForRepo": 142,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,17 @@\n   public void refreshNodesGracefully(Configuration conf) throws IOException,\n       YarnException {\n     refreshHostsReader(conf);\n     for (Entry\u003cNodeId, RMNode\u003e entry:rmContext.getRMNodes().entrySet()) {\n       NodeId nodeId \u003d entry.getKey();\n       if (!isValidNode(nodeId.getHost())) {\n         this.rmContext.getDispatcher().getEventHandler().handle(\n             new RMNodeEvent(nodeId, RMNodeEventType.GRACEFUL_DECOMMISSION));\n       } else {\n         // Recommissioning the nodes\n-        if (entry.getValue().getState() \u003d\u003d NodeState.DECOMMISSIONING\n-            || entry.getValue().getState() \u003d\u003d NodeState.DECOMMISSIONED) {\n+        if (entry.getValue().getState() \u003d\u003d NodeState.DECOMMISSIONING) {\n           this.rmContext.getDispatcher().getEventHandler()\n               .handle(new RMNodeEvent(nodeId, RMNodeEventType.RECOMMISSION));\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void refreshNodesGracefully(Configuration conf) throws IOException,\n      YarnException {\n    refreshHostsReader(conf);\n    for (Entry\u003cNodeId, RMNode\u003e entry:rmContext.getRMNodes().entrySet()) {\n      NodeId nodeId \u003d entry.getKey();\n      if (!isValidNode(nodeId.getHost())) {\n        this.rmContext.getDispatcher().getEventHandler().handle(\n            new RMNodeEvent(nodeId, RMNodeEventType.GRACEFUL_DECOMMISSION));\n      } else {\n        // Recommissioning the nodes\n        if (entry.getValue().getState() \u003d\u003d NodeState.DECOMMISSIONING) {\n          this.rmContext.getDispatcher().getEventHandler()\n              .handle(new RMNodeEvent(nodeId, RMNodeEventType.RECOMMISSION));\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/NodesListManager.java",
      "extendedDetails": {}
    },
    "9bc913a35c46e65d373c3ae3f01a377e16e8d0ca": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3212. RMNode State Transition Update with DECOMMISSIONING state. (Junping Du via wangda)\n",
      "commitDate": "18/09/15 10:04 AM",
      "commitName": "9bc913a35c46e65d373c3ae3f01a377e16e8d0ca",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "04/09/15 3:13 PM",
      "commitNameOld": "bcc85e3bab78bcacd430eac23141774465b96ef9",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 13.79,
      "commitsBetweenForRepo": 83,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n   public void refreshNodesGracefully(Configuration conf) throws IOException,\n       YarnException {\n     refreshHostsReader(conf);\n     for (Entry\u003cNodeId, RMNode\u003e entry:rmContext.getRMNodes().entrySet()) {\n       NodeId nodeId \u003d entry.getKey();\n       if (!isValidNode(nodeId.getHost())) {\n         this.rmContext.getDispatcher().getEventHandler().handle(\n-            new RMNodeEvent(nodeId, RMNodeEventType.DECOMMISSION_WITH_TIMEOUT));\n+            new RMNodeEvent(nodeId, RMNodeEventType.GRACEFUL_DECOMMISSION));\n       } else {\n         // Recommissioning the nodes\n         if (entry.getValue().getState() \u003d\u003d NodeState.DECOMMISSIONING\n             || entry.getValue().getState() \u003d\u003d NodeState.DECOMMISSIONED) {\n           this.rmContext.getDispatcher().getEventHandler()\n               .handle(new RMNodeEvent(nodeId, RMNodeEventType.RECOMMISSION));\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void refreshNodesGracefully(Configuration conf) throws IOException,\n      YarnException {\n    refreshHostsReader(conf);\n    for (Entry\u003cNodeId, RMNode\u003e entry:rmContext.getRMNodes().entrySet()) {\n      NodeId nodeId \u003d entry.getKey();\n      if (!isValidNode(nodeId.getHost())) {\n        this.rmContext.getDispatcher().getEventHandler().handle(\n            new RMNodeEvent(nodeId, RMNodeEventType.GRACEFUL_DECOMMISSION));\n      } else {\n        // Recommissioning the nodes\n        if (entry.getValue().getState() \u003d\u003d NodeState.DECOMMISSIONING\n            || entry.getValue().getState() \u003d\u003d NodeState.DECOMMISSIONED) {\n          this.rmContext.getDispatcher().getEventHandler()\n              .handle(new RMNodeEvent(nodeId, RMNodeEventType.RECOMMISSION));\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/NodesListManager.java",
      "extendedDetails": {}
    },
    "fad9d7e85b1ba0934ab592daa9d3c9550b2bb501": {
      "type": "Yintroduced",
      "commitMessage": "New parameter of CLI for decommissioning node gracefully in RMAdmin CLI. Contributed by Devaraj K\n",
      "commitDate": "22/04/15 10:07 AM",
      "commitName": "fad9d7e85b1ba0934ab592daa9d3c9550b2bb501",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,18 @@\n+  public void refreshNodesGracefully(Configuration conf) throws IOException,\n+      YarnException {\n+    refreshHostsReader(conf);\n+    for (Entry\u003cNodeId, RMNode\u003e entry:rmContext.getRMNodes().entrySet()) {\n+      NodeId nodeId \u003d entry.getKey();\n+      if (!isValidNode(nodeId.getHost())) {\n+        this.rmContext.getDispatcher().getEventHandler().handle(\n+            new RMNodeEvent(nodeId, RMNodeEventType.DECOMMISSION_WITH_TIMEOUT));\n+      } else {\n+        // Recommissioning the nodes\n+        if (entry.getValue().getState() \u003d\u003d NodeState.DECOMMISSIONING\n+            || entry.getValue().getState() \u003d\u003d NodeState.DECOMMISSIONED) {\n+          this.rmContext.getDispatcher().getEventHandler()\n+              .handle(new RMNodeEvent(nodeId, RMNodeEventType.RECOMMISSION));\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void refreshNodesGracefully(Configuration conf) throws IOException,\n      YarnException {\n    refreshHostsReader(conf);\n    for (Entry\u003cNodeId, RMNode\u003e entry:rmContext.getRMNodes().entrySet()) {\n      NodeId nodeId \u003d entry.getKey();\n      if (!isValidNode(nodeId.getHost())) {\n        this.rmContext.getDispatcher().getEventHandler().handle(\n            new RMNodeEvent(nodeId, RMNodeEventType.DECOMMISSION_WITH_TIMEOUT));\n      } else {\n        // Recommissioning the nodes\n        if (entry.getValue().getState() \u003d\u003d NodeState.DECOMMISSIONING\n            || entry.getValue().getState() \u003d\u003d NodeState.DECOMMISSIONED) {\n          this.rmContext.getDispatcher().getEventHandler()\n              .handle(new RMNodeEvent(nodeId, RMNodeEventType.RECOMMISSION));\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/NodesListManager.java"
    }
  }
}