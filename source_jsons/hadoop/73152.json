{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JMXJsonServlet.java",
  "functionName": "doGet",
  "functionId": "doGet___request-HttpServletRequest__response-HttpServletResponse",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/jmx/JMXJsonServlet.java",
  "functionStartLine": 170,
  "functionEndLine": 226,
  "numCommitsSeen": 21,
  "timeTaken": 2637,
  "changeHistory": [
    "252c2b4d52e0dd8984d6f2a8f292f40e1c347fab",
    "67d9f2808efb34b9a7b0b824cb4033b95ad33474",
    "dbb133ccfc00e20622a5dbf7a6e1126fb63d7487",
    "ef1fc51852cd2914accde4d80c2f496cd1ca042f",
    "b9984e59d832cd4673dd0edb260a1aa65bb8758d",
    "33a47743a5f4263bc21b345587370c5ecf43f5b4",
    "6a059dc40e0020acc64d8049bf7fe6c7c0aad358",
    "a70587f368a6519fceb0388c14befec4e97e8293",
    "029d86e1aaab2d1039b4cc94ba10c27bf28cd01f",
    "9b6671dc29fa304f5689a4104c0dbfdfddd610aa",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "9c83d16c81df608d8fa1075906a7a0b989faef80",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "babd19de331c875a1dffee908617c07c3e1eb31b"
  ],
  "changeHistoryShort": {
    "252c2b4d52e0dd8984d6f2a8f292f40e1c347fab": "Ybodychange",
    "67d9f2808efb34b9a7b0b824cb4033b95ad33474": "Ybodychange",
    "dbb133ccfc00e20622a5dbf7a6e1126fb63d7487": "Ybodychange",
    "ef1fc51852cd2914accde4d80c2f496cd1ca042f": "Ybodychange",
    "b9984e59d832cd4673dd0edb260a1aa65bb8758d": "Ybodychange",
    "33a47743a5f4263bc21b345587370c5ecf43f5b4": "Ybodychange",
    "6a059dc40e0020acc64d8049bf7fe6c7c0aad358": "Ybodychange",
    "a70587f368a6519fceb0388c14befec4e97e8293": "Ybodychange",
    "029d86e1aaab2d1039b4cc94ba10c27bf28cd01f": "Ybodychange",
    "9b6671dc29fa304f5689a4104c0dbfdfddd610aa": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "9c83d16c81df608d8fa1075906a7a0b989faef80": "Ybodychange",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "babd19de331c875a1dffee908617c07c3e1eb31b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "252c2b4d52e0dd8984d6f2a8f292f40e1c347fab": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-13707. If kerberos is enabled while HTTP SPNEGO is not configured, some links cannot be accessed. Contributed by Yuanbo Liu\"\n\nChange-Id: I946a466a43d56c73bb0135384e73cb8513595461\n(cherry picked from commit 80ee5248b2dda1cb8d122d4f362f2f8cf02b9467)\n",
      "commitDate": "14/03/18 1:36 PM",
      "commitName": "252c2b4d52e0dd8984d6f2a8f292f40e1c347fab",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "17/07/17 9:32 PM",
      "commitNameOld": "ccaf036662e22da14583942054898c99fa51dae5",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 239.67,
      "commitsBetweenForRepo": 1784,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,57 @@\n   public void doGet(HttpServletRequest request, HttpServletResponse response) {\n     try {\n-      // If user is a static user and auth Type is null, that means\n-      // there is a non-security environment and no need authorization,\n-      // otherwise, do the authorization.\n-      final ServletContext servletContext \u003d getServletContext();\n-      if (!HttpServer2.isStaticUserAndNoneAuthType(servletContext, request) \u0026\u0026\n-          !isInstrumentationAccessAllowed(request, response)) {\n+      if (!isInstrumentationAccessAllowed(request, response)) {\n         return;\n       }\n       JsonGenerator jg \u003d null;\n       PrintWriter writer \u003d null;\n       try {\n         writer \u003d response.getWriter();\n  \n         response.setContentType(\"application/json; charset\u003dutf8\");\n         response.setHeader(ACCESS_CONTROL_ALLOW_METHODS, \"GET\");\n         response.setHeader(ACCESS_CONTROL_ALLOW_ORIGIN, \"*\");\n \n         jg \u003d jsonFactory.createGenerator(writer);\n         jg.disable(JsonGenerator.Feature.AUTO_CLOSE_TARGET);\n         jg.useDefaultPrettyPrinter();\n         jg.writeStartObject();\n \n         // query per mbean attribute\n         String getmethod \u003d request.getParameter(\"get\");\n         if (getmethod !\u003d null) {\n           String[] splitStrings \u003d getmethod.split(\"\\\\:\\\\:\");\n           if (splitStrings.length !\u003d 2) {\n             jg.writeStringField(\"result\", \"ERROR\");\n             jg.writeStringField(\"message\", \"query format is not as expected.\");\n             jg.flush();\n             response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n             return;\n           }\n           listBeans(jg, new ObjectName(splitStrings[0]), splitStrings[1],\n               response);\n           return;\n         }\n \n         // query per mbean\n         String qry \u003d request.getParameter(\"qry\");\n         if (qry \u003d\u003d null) {\n           qry \u003d \"*:*\";\n         }\n         listBeans(jg, new ObjectName(qry), null, response);\n       } finally {\n         if (jg !\u003d null) {\n           jg.close();\n         }\n         if (writer !\u003d null) {\n           writer.close();\n         }\n       }\n     } catch (IOException e) {\n       LOG.error(\"Caught an exception while processing JMX request\", e);\n       response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n     } catch (MalformedObjectNameException e) {\n       LOG.error(\"Caught an exception while processing JMX request\", e);\n       response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void doGet(HttpServletRequest request, HttpServletResponse response) {\n    try {\n      if (!isInstrumentationAccessAllowed(request, response)) {\n        return;\n      }\n      JsonGenerator jg \u003d null;\n      PrintWriter writer \u003d null;\n      try {\n        writer \u003d response.getWriter();\n \n        response.setContentType(\"application/json; charset\u003dutf8\");\n        response.setHeader(ACCESS_CONTROL_ALLOW_METHODS, \"GET\");\n        response.setHeader(ACCESS_CONTROL_ALLOW_ORIGIN, \"*\");\n\n        jg \u003d jsonFactory.createGenerator(writer);\n        jg.disable(JsonGenerator.Feature.AUTO_CLOSE_TARGET);\n        jg.useDefaultPrettyPrinter();\n        jg.writeStartObject();\n\n        // query per mbean attribute\n        String getmethod \u003d request.getParameter(\"get\");\n        if (getmethod !\u003d null) {\n          String[] splitStrings \u003d getmethod.split(\"\\\\:\\\\:\");\n          if (splitStrings.length !\u003d 2) {\n            jg.writeStringField(\"result\", \"ERROR\");\n            jg.writeStringField(\"message\", \"query format is not as expected.\");\n            jg.flush();\n            response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n            return;\n          }\n          listBeans(jg, new ObjectName(splitStrings[0]), splitStrings[1],\n              response);\n          return;\n        }\n\n        // query per mbean\n        String qry \u003d request.getParameter(\"qry\");\n        if (qry \u003d\u003d null) {\n          qry \u003d \"*:*\";\n        }\n        listBeans(jg, new ObjectName(qry), null, response);\n      } finally {\n        if (jg !\u003d null) {\n          jg.close();\n        }\n        if (writer !\u003d null) {\n          writer.close();\n        }\n      }\n    } catch (IOException e) {\n      LOG.error(\"Caught an exception while processing JMX request\", e);\n      response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n    } catch (MalformedObjectNameException e) {\n      LOG.error(\"Caught an exception while processing JMX request\", e);\n      response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/jmx/JMXJsonServlet.java",
      "extendedDetails": {}
    },
    "67d9f2808efb34b9a7b0b824cb4033b95ad33474": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13706. Update jackson from 1.9.13 to 2.x in hadoop-common-project.\n",
      "commitDate": "28/11/16 9:07 PM",
      "commitName": "67d9f2808efb34b9a7b0b824cb4033b95ad33474",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "08/11/16 7:25 AM",
      "commitNameOld": "dbb133ccfc00e20622a5dbf7a6e1126fb63d7487",
      "commitAuthorOld": "Brahma Reddy Battula",
      "daysBetweenCommits": 20.57,
      "commitsBetweenForRepo": 126,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,62 @@\n   public void doGet(HttpServletRequest request, HttpServletResponse response) {\n     try {\n       // If user is a static user and auth Type is null, that means\n       // there is a non-security environment and no need authorization,\n       // otherwise, do the authorization.\n       final ServletContext servletContext \u003d getServletContext();\n       if (!HttpServer2.isStaticUserAndNoneAuthType(servletContext, request) \u0026\u0026\n           !isInstrumentationAccessAllowed(request, response)) {\n         return;\n       }\n       JsonGenerator jg \u003d null;\n       PrintWriter writer \u003d null;\n       try {\n         writer \u003d response.getWriter();\n  \n         response.setContentType(\"application/json; charset\u003dutf8\");\n         response.setHeader(ACCESS_CONTROL_ALLOW_METHODS, \"GET\");\n         response.setHeader(ACCESS_CONTROL_ALLOW_ORIGIN, \"*\");\n \n-        jg \u003d jsonFactory.createJsonGenerator(writer);\n+        jg \u003d jsonFactory.createGenerator(writer);\n         jg.disable(JsonGenerator.Feature.AUTO_CLOSE_TARGET);\n         jg.useDefaultPrettyPrinter();\n         jg.writeStartObject();\n \n         // query per mbean attribute\n         String getmethod \u003d request.getParameter(\"get\");\n         if (getmethod !\u003d null) {\n           String[] splitStrings \u003d getmethod.split(\"\\\\:\\\\:\");\n           if (splitStrings.length !\u003d 2) {\n             jg.writeStringField(\"result\", \"ERROR\");\n             jg.writeStringField(\"message\", \"query format is not as expected.\");\n             jg.flush();\n             response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n             return;\n           }\n           listBeans(jg, new ObjectName(splitStrings[0]), splitStrings[1],\n               response);\n           return;\n         }\n \n         // query per mbean\n         String qry \u003d request.getParameter(\"qry\");\n         if (qry \u003d\u003d null) {\n           qry \u003d \"*:*\";\n         }\n         listBeans(jg, new ObjectName(qry), null, response);\n       } finally {\n         if (jg !\u003d null) {\n           jg.close();\n         }\n         if (writer !\u003d null) {\n           writer.close();\n         }\n       }\n     } catch (IOException e) {\n       LOG.error(\"Caught an exception while processing JMX request\", e);\n       response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n     } catch (MalformedObjectNameException e) {\n       LOG.error(\"Caught an exception while processing JMX request\", e);\n       response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void doGet(HttpServletRequest request, HttpServletResponse response) {\n    try {\n      // If user is a static user and auth Type is null, that means\n      // there is a non-security environment and no need authorization,\n      // otherwise, do the authorization.\n      final ServletContext servletContext \u003d getServletContext();\n      if (!HttpServer2.isStaticUserAndNoneAuthType(servletContext, request) \u0026\u0026\n          !isInstrumentationAccessAllowed(request, response)) {\n        return;\n      }\n      JsonGenerator jg \u003d null;\n      PrintWriter writer \u003d null;\n      try {\n        writer \u003d response.getWriter();\n \n        response.setContentType(\"application/json; charset\u003dutf8\");\n        response.setHeader(ACCESS_CONTROL_ALLOW_METHODS, \"GET\");\n        response.setHeader(ACCESS_CONTROL_ALLOW_ORIGIN, \"*\");\n\n        jg \u003d jsonFactory.createGenerator(writer);\n        jg.disable(JsonGenerator.Feature.AUTO_CLOSE_TARGET);\n        jg.useDefaultPrettyPrinter();\n        jg.writeStartObject();\n\n        // query per mbean attribute\n        String getmethod \u003d request.getParameter(\"get\");\n        if (getmethod !\u003d null) {\n          String[] splitStrings \u003d getmethod.split(\"\\\\:\\\\:\");\n          if (splitStrings.length !\u003d 2) {\n            jg.writeStringField(\"result\", \"ERROR\");\n            jg.writeStringField(\"message\", \"query format is not as expected.\");\n            jg.flush();\n            response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n            return;\n          }\n          listBeans(jg, new ObjectName(splitStrings[0]), splitStrings[1],\n              response);\n          return;\n        }\n\n        // query per mbean\n        String qry \u003d request.getParameter(\"qry\");\n        if (qry \u003d\u003d null) {\n          qry \u003d \"*:*\";\n        }\n        listBeans(jg, new ObjectName(qry), null, response);\n      } finally {\n        if (jg !\u003d null) {\n          jg.close();\n        }\n        if (writer !\u003d null) {\n          writer.close();\n        }\n      }\n    } catch (IOException e) {\n      LOG.error(\"Caught an exception while processing JMX request\", e);\n      response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n    } catch (MalformedObjectNameException e) {\n      LOG.error(\"Caught an exception while processing JMX request\", e);\n      response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/jmx/JMXJsonServlet.java",
      "extendedDetails": {}
    },
    "dbb133ccfc00e20622a5dbf7a6e1126fb63d7487": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13707. If kerberos is enabled while HTTP SPNEGO is not configured, some links cannot be accessed. Contributed by Yuanbo Liu.\n",
      "commitDate": "08/11/16 7:25 AM",
      "commitName": "dbb133ccfc00e20622a5dbf7a6e1126fb63d7487",
      "commitAuthor": "Brahma Reddy Battula",
      "commitDateOld": "09/08/16 1:42 PM",
      "commitNameOld": "85422bb7c5d3e70a49f620ba1c8800e0ba4b64f2",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 90.78,
      "commitsBetweenForRepo": 680,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,62 @@\n   public void doGet(HttpServletRequest request, HttpServletResponse response) {\n     try {\n-      if (!isInstrumentationAccessAllowed(request, response)) {\n+      // If user is a static user and auth Type is null, that means\n+      // there is a non-security environment and no need authorization,\n+      // otherwise, do the authorization.\n+      final ServletContext servletContext \u003d getServletContext();\n+      if (!HttpServer2.isStaticUserAndNoneAuthType(servletContext, request) \u0026\u0026\n+          !isInstrumentationAccessAllowed(request, response)) {\n         return;\n       }\n       JsonGenerator jg \u003d null;\n       PrintWriter writer \u003d null;\n       try {\n         writer \u003d response.getWriter();\n  \n         response.setContentType(\"application/json; charset\u003dutf8\");\n         response.setHeader(ACCESS_CONTROL_ALLOW_METHODS, \"GET\");\n         response.setHeader(ACCESS_CONTROL_ALLOW_ORIGIN, \"*\");\n \n         jg \u003d jsonFactory.createJsonGenerator(writer);\n         jg.disable(JsonGenerator.Feature.AUTO_CLOSE_TARGET);\n         jg.useDefaultPrettyPrinter();\n         jg.writeStartObject();\n \n         // query per mbean attribute\n         String getmethod \u003d request.getParameter(\"get\");\n         if (getmethod !\u003d null) {\n           String[] splitStrings \u003d getmethod.split(\"\\\\:\\\\:\");\n           if (splitStrings.length !\u003d 2) {\n             jg.writeStringField(\"result\", \"ERROR\");\n             jg.writeStringField(\"message\", \"query format is not as expected.\");\n             jg.flush();\n             response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n             return;\n           }\n           listBeans(jg, new ObjectName(splitStrings[0]), splitStrings[1],\n               response);\n           return;\n         }\n \n         // query per mbean\n         String qry \u003d request.getParameter(\"qry\");\n         if (qry \u003d\u003d null) {\n           qry \u003d \"*:*\";\n         }\n         listBeans(jg, new ObjectName(qry), null, response);\n       } finally {\n         if (jg !\u003d null) {\n           jg.close();\n         }\n         if (writer !\u003d null) {\n           writer.close();\n         }\n       }\n     } catch (IOException e) {\n       LOG.error(\"Caught an exception while processing JMX request\", e);\n       response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n     } catch (MalformedObjectNameException e) {\n       LOG.error(\"Caught an exception while processing JMX request\", e);\n       response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void doGet(HttpServletRequest request, HttpServletResponse response) {\n    try {\n      // If user is a static user and auth Type is null, that means\n      // there is a non-security environment and no need authorization,\n      // otherwise, do the authorization.\n      final ServletContext servletContext \u003d getServletContext();\n      if (!HttpServer2.isStaticUserAndNoneAuthType(servletContext, request) \u0026\u0026\n          !isInstrumentationAccessAllowed(request, response)) {\n        return;\n      }\n      JsonGenerator jg \u003d null;\n      PrintWriter writer \u003d null;\n      try {\n        writer \u003d response.getWriter();\n \n        response.setContentType(\"application/json; charset\u003dutf8\");\n        response.setHeader(ACCESS_CONTROL_ALLOW_METHODS, \"GET\");\n        response.setHeader(ACCESS_CONTROL_ALLOW_ORIGIN, \"*\");\n\n        jg \u003d jsonFactory.createJsonGenerator(writer);\n        jg.disable(JsonGenerator.Feature.AUTO_CLOSE_TARGET);\n        jg.useDefaultPrettyPrinter();\n        jg.writeStartObject();\n\n        // query per mbean attribute\n        String getmethod \u003d request.getParameter(\"get\");\n        if (getmethod !\u003d null) {\n          String[] splitStrings \u003d getmethod.split(\"\\\\:\\\\:\");\n          if (splitStrings.length !\u003d 2) {\n            jg.writeStringField(\"result\", \"ERROR\");\n            jg.writeStringField(\"message\", \"query format is not as expected.\");\n            jg.flush();\n            response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n            return;\n          }\n          listBeans(jg, new ObjectName(splitStrings[0]), splitStrings[1],\n              response);\n          return;\n        }\n\n        // query per mbean\n        String qry \u003d request.getParameter(\"qry\");\n        if (qry \u003d\u003d null) {\n          qry \u003d \"*:*\";\n        }\n        listBeans(jg, new ObjectName(qry), null, response);\n      } finally {\n        if (jg !\u003d null) {\n          jg.close();\n        }\n        if (writer !\u003d null) {\n          writer.close();\n        }\n      }\n    } catch (IOException e) {\n      LOG.error(\"Caught an exception while processing JMX request\", e);\n      response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n    } catch (MalformedObjectNameException e) {\n      LOG.error(\"Caught an exception while processing JMX request\", e);\n      response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/jmx/JMXJsonServlet.java",
      "extendedDetails": {}
    },
    "ef1fc51852cd2914accde4d80c2f496cd1ca042f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11385. Prevent cross site scripting attack on JMXJSONServlet. Contributed by Haohui Mai.\n",
      "commitDate": "18/12/14 11:33 AM",
      "commitName": "ef1fc51852cd2914accde4d80c2f496cd1ca042f",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "05/08/14 1:58 PM",
      "commitNameOld": "b9984e59d832cd4673dd0edb260a1aa65bb8758d",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 134.94,
      "commitsBetweenForRepo": 1255,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,57 @@\n   public void doGet(HttpServletRequest request, HttpServletResponse response) {\n     try {\n       if (!isInstrumentationAccessAllowed(request, response)) {\n         return;\n       }\n       JsonGenerator jg \u003d null;\n-      String jsonpcb \u003d null;\n       PrintWriter writer \u003d null;\n       try {\n         writer \u003d response.getWriter();\n  \n-        // \"callback\" parameter implies JSONP outpout\n-        jsonpcb \u003d request.getParameter(CALLBACK_PARAM);\n-        if (jsonpcb !\u003d null) {\n-          response.setContentType(\"application/javascript; charset\u003dutf8\");\n-          writer.write(jsonpcb + \"(\");\n-        } else {\n-          response.setContentType(\"application/json; charset\u003dutf8\");\n-        }\n+        response.setContentType(\"application/json; charset\u003dutf8\");\n+        response.setHeader(ACCESS_CONTROL_ALLOW_METHODS, \"GET\");\n+        response.setHeader(ACCESS_CONTROL_ALLOW_ORIGIN, \"*\");\n \n         jg \u003d jsonFactory.createJsonGenerator(writer);\n         jg.disable(JsonGenerator.Feature.AUTO_CLOSE_TARGET);\n         jg.useDefaultPrettyPrinter();\n         jg.writeStartObject();\n \n         // query per mbean attribute\n         String getmethod \u003d request.getParameter(\"get\");\n         if (getmethod !\u003d null) {\n           String[] splitStrings \u003d getmethod.split(\"\\\\:\\\\:\");\n           if (splitStrings.length !\u003d 2) {\n             jg.writeStringField(\"result\", \"ERROR\");\n             jg.writeStringField(\"message\", \"query format is not as expected.\");\n             jg.flush();\n             response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n             return;\n           }\n           listBeans(jg, new ObjectName(splitStrings[0]), splitStrings[1],\n               response);\n           return;\n         }\n \n         // query per mbean\n         String qry \u003d request.getParameter(\"qry\");\n         if (qry \u003d\u003d null) {\n           qry \u003d \"*:*\";\n         }\n         listBeans(jg, new ObjectName(qry), null, response);\n       } finally {\n         if (jg !\u003d null) {\n           jg.close();\n         }\n-        if (jsonpcb !\u003d null) {\n-           writer.write(\");\");\n-        }\n         if (writer !\u003d null) {\n           writer.close();\n         }\n       }\n     } catch (IOException e) {\n       LOG.error(\"Caught an exception while processing JMX request\", e);\n       response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n     } catch (MalformedObjectNameException e) {\n       LOG.error(\"Caught an exception while processing JMX request\", e);\n       response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void doGet(HttpServletRequest request, HttpServletResponse response) {\n    try {\n      if (!isInstrumentationAccessAllowed(request, response)) {\n        return;\n      }\n      JsonGenerator jg \u003d null;\n      PrintWriter writer \u003d null;\n      try {\n        writer \u003d response.getWriter();\n \n        response.setContentType(\"application/json; charset\u003dutf8\");\n        response.setHeader(ACCESS_CONTROL_ALLOW_METHODS, \"GET\");\n        response.setHeader(ACCESS_CONTROL_ALLOW_ORIGIN, \"*\");\n\n        jg \u003d jsonFactory.createJsonGenerator(writer);\n        jg.disable(JsonGenerator.Feature.AUTO_CLOSE_TARGET);\n        jg.useDefaultPrettyPrinter();\n        jg.writeStartObject();\n\n        // query per mbean attribute\n        String getmethod \u003d request.getParameter(\"get\");\n        if (getmethod !\u003d null) {\n          String[] splitStrings \u003d getmethod.split(\"\\\\:\\\\:\");\n          if (splitStrings.length !\u003d 2) {\n            jg.writeStringField(\"result\", \"ERROR\");\n            jg.writeStringField(\"message\", \"query format is not as expected.\");\n            jg.flush();\n            response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n            return;\n          }\n          listBeans(jg, new ObjectName(splitStrings[0]), splitStrings[1],\n              response);\n          return;\n        }\n\n        // query per mbean\n        String qry \u003d request.getParameter(\"qry\");\n        if (qry \u003d\u003d null) {\n          qry \u003d \"*:*\";\n        }\n        listBeans(jg, new ObjectName(qry), null, response);\n      } finally {\n        if (jg !\u003d null) {\n          jg.close();\n        }\n        if (writer !\u003d null) {\n          writer.close();\n        }\n      }\n    } catch (IOException e) {\n      LOG.error(\"Caught an exception while processing JMX request\", e);\n      response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n    } catch (MalformedObjectNameException e) {\n      LOG.error(\"Caught an exception while processing JMX request\", e);\n      response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/jmx/JMXJsonServlet.java",
      "extendedDetails": {}
    },
    "b9984e59d832cd4673dd0edb260a1aa65bb8758d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10918. JMXJsonServlet fails when used within Tomcat. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1616002 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/08/14 1:58 PM",
      "commitName": "b9984e59d832cd4673dd0edb260a1aa65bb8758d",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "27/01/14 11:32 PM",
      "commitNameOld": "33a47743a5f4263bc21b345587370c5ecf43f5b4",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 189.56,
      "commitsBetweenForRepo": 1348,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,67 +1,66 @@\n   public void doGet(HttpServletRequest request, HttpServletResponse response) {\n     try {\n-      if (!HttpServer2.isInstrumentationAccessAllowed(getServletContext(),\n-                                                     request, response)) {\n+      if (!isInstrumentationAccessAllowed(request, response)) {\n         return;\n       }\n       JsonGenerator jg \u003d null;\n       String jsonpcb \u003d null;\n       PrintWriter writer \u003d null;\n       try {\n         writer \u003d response.getWriter();\n  \n         // \"callback\" parameter implies JSONP outpout\n         jsonpcb \u003d request.getParameter(CALLBACK_PARAM);\n         if (jsonpcb !\u003d null) {\n           response.setContentType(\"application/javascript; charset\u003dutf8\");\n           writer.write(jsonpcb + \"(\");\n         } else {\n           response.setContentType(\"application/json; charset\u003dutf8\");\n         }\n \n         jg \u003d jsonFactory.createJsonGenerator(writer);\n         jg.disable(JsonGenerator.Feature.AUTO_CLOSE_TARGET);\n         jg.useDefaultPrettyPrinter();\n         jg.writeStartObject();\n \n         // query per mbean attribute\n         String getmethod \u003d request.getParameter(\"get\");\n         if (getmethod !\u003d null) {\n           String[] splitStrings \u003d getmethod.split(\"\\\\:\\\\:\");\n           if (splitStrings.length !\u003d 2) {\n             jg.writeStringField(\"result\", \"ERROR\");\n             jg.writeStringField(\"message\", \"query format is not as expected.\");\n             jg.flush();\n             response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n             return;\n           }\n           listBeans(jg, new ObjectName(splitStrings[0]), splitStrings[1],\n               response);\n           return;\n         }\n \n         // query per mbean\n         String qry \u003d request.getParameter(\"qry\");\n         if (qry \u003d\u003d null) {\n           qry \u003d \"*:*\";\n         }\n         listBeans(jg, new ObjectName(qry), null, response);\n       } finally {\n         if (jg !\u003d null) {\n           jg.close();\n         }\n         if (jsonpcb !\u003d null) {\n            writer.write(\");\");\n         }\n         if (writer !\u003d null) {\n           writer.close();\n         }\n       }\n     } catch (IOException e) {\n       LOG.error(\"Caught an exception while processing JMX request\", e);\n       response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n     } catch (MalformedObjectNameException e) {\n       LOG.error(\"Caught an exception while processing JMX request\", e);\n       response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void doGet(HttpServletRequest request, HttpServletResponse response) {\n    try {\n      if (!isInstrumentationAccessAllowed(request, response)) {\n        return;\n      }\n      JsonGenerator jg \u003d null;\n      String jsonpcb \u003d null;\n      PrintWriter writer \u003d null;\n      try {\n        writer \u003d response.getWriter();\n \n        // \"callback\" parameter implies JSONP outpout\n        jsonpcb \u003d request.getParameter(CALLBACK_PARAM);\n        if (jsonpcb !\u003d null) {\n          response.setContentType(\"application/javascript; charset\u003dutf8\");\n          writer.write(jsonpcb + \"(\");\n        } else {\n          response.setContentType(\"application/json; charset\u003dutf8\");\n        }\n\n        jg \u003d jsonFactory.createJsonGenerator(writer);\n        jg.disable(JsonGenerator.Feature.AUTO_CLOSE_TARGET);\n        jg.useDefaultPrettyPrinter();\n        jg.writeStartObject();\n\n        // query per mbean attribute\n        String getmethod \u003d request.getParameter(\"get\");\n        if (getmethod !\u003d null) {\n          String[] splitStrings \u003d getmethod.split(\"\\\\:\\\\:\");\n          if (splitStrings.length !\u003d 2) {\n            jg.writeStringField(\"result\", \"ERROR\");\n            jg.writeStringField(\"message\", \"query format is not as expected.\");\n            jg.flush();\n            response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n            return;\n          }\n          listBeans(jg, new ObjectName(splitStrings[0]), splitStrings[1],\n              response);\n          return;\n        }\n\n        // query per mbean\n        String qry \u003d request.getParameter(\"qry\");\n        if (qry \u003d\u003d null) {\n          qry \u003d \"*:*\";\n        }\n        listBeans(jg, new ObjectName(qry), null, response);\n      } finally {\n        if (jg !\u003d null) {\n          jg.close();\n        }\n        if (jsonpcb !\u003d null) {\n           writer.write(\");\");\n        }\n        if (writer !\u003d null) {\n          writer.close();\n        }\n      }\n    } catch (IOException e) {\n      LOG.error(\"Caught an exception while processing JMX request\", e);\n      response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n    } catch (MalformedObjectNameException e) {\n      LOG.error(\"Caught an exception while processing JMX request\", e);\n      response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/jmx/JMXJsonServlet.java",
      "extendedDetails": {}
    },
    "33a47743a5f4263bc21b345587370c5ecf43f5b4": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10255. Rename HttpServer to HttpServer2 to retain older HttpServer in branch-2 for compatibility. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1561959 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/01/14 11:32 PM",
      "commitName": "33a47743a5f4263bc21b345587370c5ecf43f5b4",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "16/10/12 11:00 AM",
      "commitNameOld": "6a059dc40e0020acc64d8049bf7fe6c7c0aad358",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 468.56,
      "commitsBetweenForRepo": 2744,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,67 +1,67 @@\n   public void doGet(HttpServletRequest request, HttpServletResponse response) {\n     try {\n-      if (!HttpServer.isInstrumentationAccessAllowed(getServletContext(),\n+      if (!HttpServer2.isInstrumentationAccessAllowed(getServletContext(),\n                                                      request, response)) {\n         return;\n       }\n       JsonGenerator jg \u003d null;\n       String jsonpcb \u003d null;\n       PrintWriter writer \u003d null;\n       try {\n         writer \u003d response.getWriter();\n  \n         // \"callback\" parameter implies JSONP outpout\n         jsonpcb \u003d request.getParameter(CALLBACK_PARAM);\n         if (jsonpcb !\u003d null) {\n           response.setContentType(\"application/javascript; charset\u003dutf8\");\n           writer.write(jsonpcb + \"(\");\n         } else {\n           response.setContentType(\"application/json; charset\u003dutf8\");\n         }\n \n         jg \u003d jsonFactory.createJsonGenerator(writer);\n         jg.disable(JsonGenerator.Feature.AUTO_CLOSE_TARGET);\n         jg.useDefaultPrettyPrinter();\n         jg.writeStartObject();\n \n         // query per mbean attribute\n         String getmethod \u003d request.getParameter(\"get\");\n         if (getmethod !\u003d null) {\n           String[] splitStrings \u003d getmethod.split(\"\\\\:\\\\:\");\n           if (splitStrings.length !\u003d 2) {\n             jg.writeStringField(\"result\", \"ERROR\");\n             jg.writeStringField(\"message\", \"query format is not as expected.\");\n             jg.flush();\n             response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n             return;\n           }\n           listBeans(jg, new ObjectName(splitStrings[0]), splitStrings[1],\n               response);\n           return;\n         }\n \n         // query per mbean\n         String qry \u003d request.getParameter(\"qry\");\n         if (qry \u003d\u003d null) {\n           qry \u003d \"*:*\";\n         }\n         listBeans(jg, new ObjectName(qry), null, response);\n       } finally {\n         if (jg !\u003d null) {\n           jg.close();\n         }\n         if (jsonpcb !\u003d null) {\n            writer.write(\");\");\n         }\n         if (writer !\u003d null) {\n           writer.close();\n         }\n       }\n     } catch (IOException e) {\n       LOG.error(\"Caught an exception while processing JMX request\", e);\n       response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n     } catch (MalformedObjectNameException e) {\n       LOG.error(\"Caught an exception while processing JMX request\", e);\n       response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void doGet(HttpServletRequest request, HttpServletResponse response) {\n    try {\n      if (!HttpServer2.isInstrumentationAccessAllowed(getServletContext(),\n                                                     request, response)) {\n        return;\n      }\n      JsonGenerator jg \u003d null;\n      String jsonpcb \u003d null;\n      PrintWriter writer \u003d null;\n      try {\n        writer \u003d response.getWriter();\n \n        // \"callback\" parameter implies JSONP outpout\n        jsonpcb \u003d request.getParameter(CALLBACK_PARAM);\n        if (jsonpcb !\u003d null) {\n          response.setContentType(\"application/javascript; charset\u003dutf8\");\n          writer.write(jsonpcb + \"(\");\n        } else {\n          response.setContentType(\"application/json; charset\u003dutf8\");\n        }\n\n        jg \u003d jsonFactory.createJsonGenerator(writer);\n        jg.disable(JsonGenerator.Feature.AUTO_CLOSE_TARGET);\n        jg.useDefaultPrettyPrinter();\n        jg.writeStartObject();\n\n        // query per mbean attribute\n        String getmethod \u003d request.getParameter(\"get\");\n        if (getmethod !\u003d null) {\n          String[] splitStrings \u003d getmethod.split(\"\\\\:\\\\:\");\n          if (splitStrings.length !\u003d 2) {\n            jg.writeStringField(\"result\", \"ERROR\");\n            jg.writeStringField(\"message\", \"query format is not as expected.\");\n            jg.flush();\n            response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n            return;\n          }\n          listBeans(jg, new ObjectName(splitStrings[0]), splitStrings[1],\n              response);\n          return;\n        }\n\n        // query per mbean\n        String qry \u003d request.getParameter(\"qry\");\n        if (qry \u003d\u003d null) {\n          qry \u003d \"*:*\";\n        }\n        listBeans(jg, new ObjectName(qry), null, response);\n      } finally {\n        if (jg !\u003d null) {\n          jg.close();\n        }\n        if (jsonpcb !\u003d null) {\n           writer.write(\");\");\n        }\n        if (writer !\u003d null) {\n          writer.close();\n        }\n      }\n    } catch (IOException e) {\n      LOG.error(\"Caught an exception while processing JMX request\", e);\n      response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n    } catch (MalformedObjectNameException e) {\n      LOG.error(\"Caught an exception while processing JMX request\", e);\n      response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/jmx/JMXJsonServlet.java",
      "extendedDetails": {}
    },
    "6a059dc40e0020acc64d8049bf7fe6c7c0aad358": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8922. Provide alternate JSONP output for JMXJsonServlet to allow javascript in browser dashboard (Damien Hardy via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1398904 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/10/12 11:00 AM",
      "commitName": "6a059dc40e0020acc64d8049bf7fe6c7c0aad358",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "31/05/12 7:10 AM",
      "commitNameOld": "8d559d2d9a09f076689cf95621a5d087a9a7f4d8",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 138.16,
      "commitsBetweenForRepo": 783,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,67 @@\n   public void doGet(HttpServletRequest request, HttpServletResponse response) {\n     try {\n       if (!HttpServer.isInstrumentationAccessAllowed(getServletContext(),\n                                                      request, response)) {\n         return;\n       }\n       JsonGenerator jg \u003d null;\n+      String jsonpcb \u003d null;\n+      PrintWriter writer \u003d null;\n       try {\n-        response.setContentType(\"application/json; charset\u003dutf8\");\n+        writer \u003d response.getWriter();\n+ \n+        // \"callback\" parameter implies JSONP outpout\n+        jsonpcb \u003d request.getParameter(CALLBACK_PARAM);\n+        if (jsonpcb !\u003d null) {\n+          response.setContentType(\"application/javascript; charset\u003dutf8\");\n+          writer.write(jsonpcb + \"(\");\n+        } else {\n+          response.setContentType(\"application/json; charset\u003dutf8\");\n+        }\n \n-        PrintWriter writer \u003d response.getWriter();\n         jg \u003d jsonFactory.createJsonGenerator(writer);\n+        jg.disable(JsonGenerator.Feature.AUTO_CLOSE_TARGET);\n         jg.useDefaultPrettyPrinter();\n         jg.writeStartObject();\n \n         // query per mbean attribute\n         String getmethod \u003d request.getParameter(\"get\");\n         if (getmethod !\u003d null) {\n           String[] splitStrings \u003d getmethod.split(\"\\\\:\\\\:\");\n           if (splitStrings.length !\u003d 2) {\n             jg.writeStringField(\"result\", \"ERROR\");\n             jg.writeStringField(\"message\", \"query format is not as expected.\");\n             jg.flush();\n             response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n             return;\n           }\n           listBeans(jg, new ObjectName(splitStrings[0]), splitStrings[1],\n               response);\n           return;\n         }\n \n         // query per mbean\n         String qry \u003d request.getParameter(\"qry\");\n         if (qry \u003d\u003d null) {\n           qry \u003d \"*:*\";\n         }\n         listBeans(jg, new ObjectName(qry), null, response);\n       } finally {\n         if (jg !\u003d null) {\n           jg.close();\n         }\n+        if (jsonpcb !\u003d null) {\n+           writer.write(\");\");\n+        }\n+        if (writer !\u003d null) {\n+          writer.close();\n+        }\n       }\n     } catch (IOException e) {\n       LOG.error(\"Caught an exception while processing JMX request\", e);\n       response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n     } catch (MalformedObjectNameException e) {\n       LOG.error(\"Caught an exception while processing JMX request\", e);\n       response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void doGet(HttpServletRequest request, HttpServletResponse response) {\n    try {\n      if (!HttpServer.isInstrumentationAccessAllowed(getServletContext(),\n                                                     request, response)) {\n        return;\n      }\n      JsonGenerator jg \u003d null;\n      String jsonpcb \u003d null;\n      PrintWriter writer \u003d null;\n      try {\n        writer \u003d response.getWriter();\n \n        // \"callback\" parameter implies JSONP outpout\n        jsonpcb \u003d request.getParameter(CALLBACK_PARAM);\n        if (jsonpcb !\u003d null) {\n          response.setContentType(\"application/javascript; charset\u003dutf8\");\n          writer.write(jsonpcb + \"(\");\n        } else {\n          response.setContentType(\"application/json; charset\u003dutf8\");\n        }\n\n        jg \u003d jsonFactory.createJsonGenerator(writer);\n        jg.disable(JsonGenerator.Feature.AUTO_CLOSE_TARGET);\n        jg.useDefaultPrettyPrinter();\n        jg.writeStartObject();\n\n        // query per mbean attribute\n        String getmethod \u003d request.getParameter(\"get\");\n        if (getmethod !\u003d null) {\n          String[] splitStrings \u003d getmethod.split(\"\\\\:\\\\:\");\n          if (splitStrings.length !\u003d 2) {\n            jg.writeStringField(\"result\", \"ERROR\");\n            jg.writeStringField(\"message\", \"query format is not as expected.\");\n            jg.flush();\n            response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n            return;\n          }\n          listBeans(jg, new ObjectName(splitStrings[0]), splitStrings[1],\n              response);\n          return;\n        }\n\n        // query per mbean\n        String qry \u003d request.getParameter(\"qry\");\n        if (qry \u003d\u003d null) {\n          qry \u003d \"*:*\";\n        }\n        listBeans(jg, new ObjectName(qry), null, response);\n      } finally {\n        if (jg !\u003d null) {\n          jg.close();\n        }\n        if (jsonpcb !\u003d null) {\n           writer.write(\");\");\n        }\n        if (writer !\u003d null) {\n          writer.close();\n        }\n      }\n    } catch (IOException e) {\n      LOG.error(\"Caught an exception while processing JMX request\", e);\n      response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n    } catch (MalformedObjectNameException e) {\n      LOG.error(\"Caught an exception while processing JMX request\", e);\n      response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/jmx/JMXJsonServlet.java",
      "extendedDetails": {}
    },
    "a70587f368a6519fceb0388c14befec4e97e8293": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8343. Allow configuration of authorization for JmxJsonServlet and MetricsServlet (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1333750 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/05/12 8:31 PM",
      "commitName": "a70587f368a6519fceb0388c14befec4e97e8293",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "06/02/12 5:09 PM",
      "commitNameOld": "2d1406e9e7b75a833f79c0159031dae2ba3e6134",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 87.1,
      "commitsBetweenForRepo": 655,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,50 @@\n   public void doGet(HttpServletRequest request, HttpServletResponse response) {\n     try {\n-      // Do the authorization\n-      if (!HttpServer.hasAdministratorAccess(getServletContext(), request,\n-          response)) {\n+      if (!HttpServer.isInstrumentationAccessAllowed(getServletContext(),\n+                                                     request, response)) {\n         return;\n       }\n       JsonGenerator jg \u003d null;\n       try {\n         response.setContentType(\"application/json; charset\u003dutf8\");\n \n         PrintWriter writer \u003d response.getWriter();\n         jg \u003d jsonFactory.createJsonGenerator(writer);\n         jg.useDefaultPrettyPrinter();\n         jg.writeStartObject();\n \n         // query per mbean attribute\n         String getmethod \u003d request.getParameter(\"get\");\n         if (getmethod !\u003d null) {\n           String[] splitStrings \u003d getmethod.split(\"\\\\:\\\\:\");\n           if (splitStrings.length !\u003d 2) {\n             jg.writeStringField(\"result\", \"ERROR\");\n             jg.writeStringField(\"message\", \"query format is not as expected.\");\n             jg.flush();\n             response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n             return;\n           }\n           listBeans(jg, new ObjectName(splitStrings[0]), splitStrings[1],\n               response);\n           return;\n         }\n \n         // query per mbean\n         String qry \u003d request.getParameter(\"qry\");\n         if (qry \u003d\u003d null) {\n           qry \u003d \"*:*\";\n         }\n         listBeans(jg, new ObjectName(qry), null, response);\n       } finally {\n         if (jg !\u003d null) {\n           jg.close();\n         }\n       }\n     } catch (IOException e) {\n       LOG.error(\"Caught an exception while processing JMX request\", e);\n       response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n     } catch (MalformedObjectNameException e) {\n       LOG.error(\"Caught an exception while processing JMX request\", e);\n       response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void doGet(HttpServletRequest request, HttpServletResponse response) {\n    try {\n      if (!HttpServer.isInstrumentationAccessAllowed(getServletContext(),\n                                                     request, response)) {\n        return;\n      }\n      JsonGenerator jg \u003d null;\n      try {\n        response.setContentType(\"application/json; charset\u003dutf8\");\n\n        PrintWriter writer \u003d response.getWriter();\n        jg \u003d jsonFactory.createJsonGenerator(writer);\n        jg.useDefaultPrettyPrinter();\n        jg.writeStartObject();\n\n        // query per mbean attribute\n        String getmethod \u003d request.getParameter(\"get\");\n        if (getmethod !\u003d null) {\n          String[] splitStrings \u003d getmethod.split(\"\\\\:\\\\:\");\n          if (splitStrings.length !\u003d 2) {\n            jg.writeStringField(\"result\", \"ERROR\");\n            jg.writeStringField(\"message\", \"query format is not as expected.\");\n            jg.flush();\n            response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n            return;\n          }\n          listBeans(jg, new ObjectName(splitStrings[0]), splitStrings[1],\n              response);\n          return;\n        }\n\n        // query per mbean\n        String qry \u003d request.getParameter(\"qry\");\n        if (qry \u003d\u003d null) {\n          qry \u003d \"*:*\";\n        }\n        listBeans(jg, new ObjectName(qry), null, response);\n      } finally {\n        if (jg !\u003d null) {\n          jg.close();\n        }\n      }\n    } catch (IOException e) {\n      LOG.error(\"Caught an exception while processing JMX request\", e);\n      response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n    } catch (MalformedObjectNameException e) {\n      LOG.error(\"Caught an exception while processing JMX request\", e);\n      response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/jmx/JMXJsonServlet.java",
      "extendedDetails": {}
    },
    "029d86e1aaab2d1039b4cc94ba10c27bf28cd01f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7769. TestJMXJsonServlet is failing.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1188960 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/10/11 3:58 PM",
      "commitName": "029d86e1aaab2d1039b4cc94ba10c27bf28cd01f",
      "commitAuthor": "Thomas White",
      "commitDateOld": "05/10/11 9:09 AM",
      "commitNameOld": "9b6671dc29fa304f5689a4104c0dbfdfddd610aa",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 20.28,
      "commitsBetweenForRepo": 156,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,51 @@\n   public void doGet(HttpServletRequest request, HttpServletResponse response) {\n     try {\n       // Do the authorization\n       if (!HttpServer.hasAdministratorAccess(getServletContext(), request,\n           response)) {\n         return;\n       }\n       JsonGenerator jg \u003d null;\n       try {\n         response.setContentType(\"application/json; charset\u003dutf8\");\n \n         PrintWriter writer \u003d response.getWriter();\n         jg \u003d jsonFactory.createJsonGenerator(writer);\n         jg.useDefaultPrettyPrinter();\n         jg.writeStartObject();\n \n         // query per mbean attribute\n         String getmethod \u003d request.getParameter(\"get\");\n         if (getmethod !\u003d null) {\n           String[] splitStrings \u003d getmethod.split(\"\\\\:\\\\:\");\n           if (splitStrings.length !\u003d 2) {\n             jg.writeStringField(\"result\", \"ERROR\");\n             jg.writeStringField(\"message\", \"query format is not as expected.\");\n+            jg.flush();\n             response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n             return;\n           }\n           listBeans(jg, new ObjectName(splitStrings[0]), splitStrings[1],\n               response);\n           return;\n         }\n \n         // query per mbean\n         String qry \u003d request.getParameter(\"qry\");\n         if (qry \u003d\u003d null) {\n           qry \u003d \"*:*\";\n         }\n         listBeans(jg, new ObjectName(qry), null, response);\n       } finally {\n         if (jg !\u003d null) {\n           jg.close();\n         }\n       }\n     } catch (IOException e) {\n       LOG.error(\"Caught an exception while processing JMX request\", e);\n       response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n     } catch (MalformedObjectNameException e) {\n       LOG.error(\"Caught an exception while processing JMX request\", e);\n       response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void doGet(HttpServletRequest request, HttpServletResponse response) {\n    try {\n      // Do the authorization\n      if (!HttpServer.hasAdministratorAccess(getServletContext(), request,\n          response)) {\n        return;\n      }\n      JsonGenerator jg \u003d null;\n      try {\n        response.setContentType(\"application/json; charset\u003dutf8\");\n\n        PrintWriter writer \u003d response.getWriter();\n        jg \u003d jsonFactory.createJsonGenerator(writer);\n        jg.useDefaultPrettyPrinter();\n        jg.writeStartObject();\n\n        // query per mbean attribute\n        String getmethod \u003d request.getParameter(\"get\");\n        if (getmethod !\u003d null) {\n          String[] splitStrings \u003d getmethod.split(\"\\\\:\\\\:\");\n          if (splitStrings.length !\u003d 2) {\n            jg.writeStringField(\"result\", \"ERROR\");\n            jg.writeStringField(\"message\", \"query format is not as expected.\");\n            jg.flush();\n            response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n            return;\n          }\n          listBeans(jg, new ObjectName(splitStrings[0]), splitStrings[1],\n              response);\n          return;\n        }\n\n        // query per mbean\n        String qry \u003d request.getParameter(\"qry\");\n        if (qry \u003d\u003d null) {\n          qry \u003d \"*:*\";\n        }\n        listBeans(jg, new ObjectName(qry), null, response);\n      } finally {\n        if (jg !\u003d null) {\n          jg.close();\n        }\n      }\n    } catch (IOException e) {\n      LOG.error(\"Caught an exception while processing JMX request\", e);\n      response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n    } catch (MalformedObjectNameException e) {\n      LOG.error(\"Caught an exception while processing JMX request\", e);\n      response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/jmx/JMXJsonServlet.java",
      "extendedDetails": {}
    },
    "9b6671dc29fa304f5689a4104c0dbfdfddd610aa": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7704. Reduce number of object created by JMXJsonServlet.\n(Devaraj K via Eric Yang)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1179287 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/10/11 9:09 AM",
      "commitName": "9b6671dc29fa304f5689a4104c0dbfdfddd610aa",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 41.66,
      "commitsBetweenForRepo": 273,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,50 @@\n   public void doGet(HttpServletRequest request, HttpServletResponse response) {\n     try {\n       // Do the authorization\n       if (!HttpServer.hasAdministratorAccess(getServletContext(), request,\n           response)) {\n         return;\n       }\n+      JsonGenerator jg \u003d null;\n+      try {\n+        response.setContentType(\"application/json; charset\u003dutf8\");\n \n-      response.setContentType(\"application/json; charset\u003dutf8\");\n+        PrintWriter writer \u003d response.getWriter();\n+        jg \u003d jsonFactory.createJsonGenerator(writer);\n+        jg.useDefaultPrettyPrinter();\n+        jg.writeStartObject();\n \n-      PrintWriter writer \u003d response.getWriter();\n-\n-      JsonFactory jsonFactory \u003d new JsonFactory();\n-      JsonGenerator jg \u003d jsonFactory.createJsonGenerator(writer);\n-      jg.useDefaultPrettyPrinter();\n-      jg.writeStartObject();\n-      if (mBeanServer \u003d\u003d null) {\n-        jg.writeStringField(\"result\", \"ERROR\");\n-        jg.writeStringField(\"message\", \"No MBeanServer could be found\");\n-        jg.close();\n-        LOG.error(\"No MBeanServer could be found.\");\n-        response.setStatus(HttpServletResponse.SC_NOT_FOUND);\n-        return;\n-      }\n-      \n-      // query per mbean attribute\n-      String getmethod \u003d request.getParameter(\"get\");\n-      if (getmethod !\u003d null) {\n-        String[] splitStrings \u003d getmethod.split(\"\\\\:\\\\:\");\n-        if (splitStrings.length !\u003d 2) {\n-          jg.writeStringField(\"result\", \"ERROR\");\n-          jg.writeStringField(\"message\", \"query format is not as expected.\");\n-          jg.close();\n-          response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n+        // query per mbean attribute\n+        String getmethod \u003d request.getParameter(\"get\");\n+        if (getmethod !\u003d null) {\n+          String[] splitStrings \u003d getmethod.split(\"\\\\:\\\\:\");\n+          if (splitStrings.length !\u003d 2) {\n+            jg.writeStringField(\"result\", \"ERROR\");\n+            jg.writeStringField(\"message\", \"query format is not as expected.\");\n+            response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n+            return;\n+          }\n+          listBeans(jg, new ObjectName(splitStrings[0]), splitStrings[1],\n+              response);\n           return;\n         }\n-        listBeans(jg, new ObjectName(splitStrings[0]), splitStrings[1],\n-            response);\n-        jg.close();\n-        return;\n-      }\n \n-      // query per mbean\n-      String qry \u003d request.getParameter(\"qry\");\n-      if (qry \u003d\u003d null) {\n-        qry \u003d \"*:*\";\n+        // query per mbean\n+        String qry \u003d request.getParameter(\"qry\");\n+        if (qry \u003d\u003d null) {\n+          qry \u003d \"*:*\";\n+        }\n+        listBeans(jg, new ObjectName(qry), null, response);\n+      } finally {\n+        if (jg !\u003d null) {\n+          jg.close();\n+        }\n       }\n-      listBeans(jg, new ObjectName(qry), null, response);\n-      jg.close();\n-\n-    } catch ( IOException e ) {\n+    } catch (IOException e) {\n       LOG.error(\"Caught an exception while processing JMX request\", e);\n       response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n-    } catch ( MalformedObjectNameException e ) {\n+    } catch (MalformedObjectNameException e) {\n       LOG.error(\"Caught an exception while processing JMX request\", e);\n       response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void doGet(HttpServletRequest request, HttpServletResponse response) {\n    try {\n      // Do the authorization\n      if (!HttpServer.hasAdministratorAccess(getServletContext(), request,\n          response)) {\n        return;\n      }\n      JsonGenerator jg \u003d null;\n      try {\n        response.setContentType(\"application/json; charset\u003dutf8\");\n\n        PrintWriter writer \u003d response.getWriter();\n        jg \u003d jsonFactory.createJsonGenerator(writer);\n        jg.useDefaultPrettyPrinter();\n        jg.writeStartObject();\n\n        // query per mbean attribute\n        String getmethod \u003d request.getParameter(\"get\");\n        if (getmethod !\u003d null) {\n          String[] splitStrings \u003d getmethod.split(\"\\\\:\\\\:\");\n          if (splitStrings.length !\u003d 2) {\n            jg.writeStringField(\"result\", \"ERROR\");\n            jg.writeStringField(\"message\", \"query format is not as expected.\");\n            response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n            return;\n          }\n          listBeans(jg, new ObjectName(splitStrings[0]), splitStrings[1],\n              response);\n          return;\n        }\n\n        // query per mbean\n        String qry \u003d request.getParameter(\"qry\");\n        if (qry \u003d\u003d null) {\n          qry \u003d \"*:*\";\n        }\n        listBeans(jg, new ObjectName(qry), null, response);\n      } finally {\n        if (jg !\u003d null) {\n          jg.close();\n        }\n      }\n    } catch (IOException e) {\n      LOG.error(\"Caught an exception while processing JMX request\", e);\n      response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n    } catch (MalformedObjectNameException e) {\n      LOG.error(\"Caught an exception while processing JMX request\", e);\n      response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/jmx/JMXJsonServlet.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void doGet(HttpServletRequest request, HttpServletResponse response) {\n    try {\n      // Do the authorization\n      if (!HttpServer.hasAdministratorAccess(getServletContext(), request,\n          response)) {\n        return;\n      }\n\n      response.setContentType(\"application/json; charset\u003dutf8\");\n\n      PrintWriter writer \u003d response.getWriter();\n\n      JsonFactory jsonFactory \u003d new JsonFactory();\n      JsonGenerator jg \u003d jsonFactory.createJsonGenerator(writer);\n      jg.useDefaultPrettyPrinter();\n      jg.writeStartObject();\n      if (mBeanServer \u003d\u003d null) {\n        jg.writeStringField(\"result\", \"ERROR\");\n        jg.writeStringField(\"message\", \"No MBeanServer could be found\");\n        jg.close();\n        LOG.error(\"No MBeanServer could be found.\");\n        response.setStatus(HttpServletResponse.SC_NOT_FOUND);\n        return;\n      }\n      \n      // query per mbean attribute\n      String getmethod \u003d request.getParameter(\"get\");\n      if (getmethod !\u003d null) {\n        String[] splitStrings \u003d getmethod.split(\"\\\\:\\\\:\");\n        if (splitStrings.length !\u003d 2) {\n          jg.writeStringField(\"result\", \"ERROR\");\n          jg.writeStringField(\"message\", \"query format is not as expected.\");\n          jg.close();\n          response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n          return;\n        }\n        listBeans(jg, new ObjectName(splitStrings[0]), splitStrings[1],\n            response);\n        jg.close();\n        return;\n      }\n\n      // query per mbean\n      String qry \u003d request.getParameter(\"qry\");\n      if (qry \u003d\u003d null) {\n        qry \u003d \"*:*\";\n      }\n      listBeans(jg, new ObjectName(qry), null, response);\n      jg.close();\n\n    } catch ( IOException e ) {\n      LOG.error(\"Caught an exception while processing JMX request\", e);\n      response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n    } catch ( MalformedObjectNameException e ) {\n      LOG.error(\"Caught an exception while processing JMX request\", e);\n      response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/jmx/JMXJsonServlet.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/jmx/JMXJsonServlet.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/jmx/JMXJsonServlet.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void doGet(HttpServletRequest request, HttpServletResponse response) {\n    try {\n      // Do the authorization\n      if (!HttpServer.hasAdministratorAccess(getServletContext(), request,\n          response)) {\n        return;\n      }\n\n      response.setContentType(\"application/json; charset\u003dutf8\");\n\n      PrintWriter writer \u003d response.getWriter();\n\n      JsonFactory jsonFactory \u003d new JsonFactory();\n      JsonGenerator jg \u003d jsonFactory.createJsonGenerator(writer);\n      jg.useDefaultPrettyPrinter();\n      jg.writeStartObject();\n      if (mBeanServer \u003d\u003d null) {\n        jg.writeStringField(\"result\", \"ERROR\");\n        jg.writeStringField(\"message\", \"No MBeanServer could be found\");\n        jg.close();\n        LOG.error(\"No MBeanServer could be found.\");\n        response.setStatus(HttpServletResponse.SC_NOT_FOUND);\n        return;\n      }\n      \n      // query per mbean attribute\n      String getmethod \u003d request.getParameter(\"get\");\n      if (getmethod !\u003d null) {\n        String[] splitStrings \u003d getmethod.split(\"\\\\:\\\\:\");\n        if (splitStrings.length !\u003d 2) {\n          jg.writeStringField(\"result\", \"ERROR\");\n          jg.writeStringField(\"message\", \"query format is not as expected.\");\n          jg.close();\n          response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n          return;\n        }\n        listBeans(jg, new ObjectName(splitStrings[0]), splitStrings[1],\n            response);\n        jg.close();\n        return;\n      }\n\n      // query per mbean\n      String qry \u003d request.getParameter(\"qry\");\n      if (qry \u003d\u003d null) {\n        qry \u003d \"*:*\";\n      }\n      listBeans(jg, new ObjectName(qry), null, response);\n      jg.close();\n\n    } catch ( IOException e ) {\n      LOG.error(\"Caught an exception while processing JMX request\", e);\n      response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n    } catch ( MalformedObjectNameException e ) {\n      LOG.error(\"Caught an exception while processing JMX request\", e);\n      response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n    }\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/jmx/JMXJsonServlet.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/jmx/JMXJsonServlet.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/jmx/JMXJsonServlet.java"
      }
    },
    "9c83d16c81df608d8fa1075906a7a0b989faef80": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7329. Add the capability of getting invividual attribute of a mbean using JMXProxyServlet. (tanping)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1139947 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/06/11 2:52 PM",
      "commitName": "9c83d16c81df608d8fa1075906a7a0b989faef80",
      "commitAuthor": "Tanping Wang",
      "commitDateOld": "12/06/11 3:00 PM",
      "commitNameOld": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 13.99,
      "commitsBetweenForRepo": 46,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,58 @@\n   public void doGet(HttpServletRequest request, HttpServletResponse response) {\n     try {\n       // Do the authorization\n       if (!HttpServer.hasAdministratorAccess(getServletContext(), request,\n           response)) {\n         return;\n       }\n \n       response.setContentType(\"application/json; charset\u003dutf8\");\n \n       PrintWriter writer \u003d response.getWriter();\n \n       JsonFactory jsonFactory \u003d new JsonFactory();\n       JsonGenerator jg \u003d jsonFactory.createJsonGenerator(writer);\n       jg.useDefaultPrettyPrinter();\n       jg.writeStartObject();\n       if (mBeanServer \u003d\u003d null) {\n         jg.writeStringField(\"result\", \"ERROR\");\n         jg.writeStringField(\"message\", \"No MBeanServer could be found\");\n         jg.close();\n+        LOG.error(\"No MBeanServer could be found.\");\n+        response.setStatus(HttpServletResponse.SC_NOT_FOUND);\n         return;\n       }\n+      \n+      // query per mbean attribute\n+      String getmethod \u003d request.getParameter(\"get\");\n+      if (getmethod !\u003d null) {\n+        String[] splitStrings \u003d getmethod.split(\"\\\\:\\\\:\");\n+        if (splitStrings.length !\u003d 2) {\n+          jg.writeStringField(\"result\", \"ERROR\");\n+          jg.writeStringField(\"message\", \"query format is not as expected.\");\n+          jg.close();\n+          response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n+          return;\n+        }\n+        listBeans(jg, new ObjectName(splitStrings[0]), splitStrings[1],\n+            response);\n+        jg.close();\n+        return;\n+      }\n+\n+      // query per mbean\n       String qry \u003d request.getParameter(\"qry\");\n       if (qry \u003d\u003d null) {\n         qry \u003d \"*:*\";\n       }\n-      listBeans(jg, new ObjectName(qry));\n+      listBeans(jg, new ObjectName(qry), null, response);\n       jg.close();\n-    } catch (IOException e) {\n+\n+    } catch ( IOException e ) {\n       LOG.error(\"Caught an exception while processing JMX request\", e);\n       response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n-    } catch (MalformedObjectNameException e) {\n+    } catch ( MalformedObjectNameException e ) {\n       LOG.error(\"Caught an exception while processing JMX request\", e);\n       response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void doGet(HttpServletRequest request, HttpServletResponse response) {\n    try {\n      // Do the authorization\n      if (!HttpServer.hasAdministratorAccess(getServletContext(), request,\n          response)) {\n        return;\n      }\n\n      response.setContentType(\"application/json; charset\u003dutf8\");\n\n      PrintWriter writer \u003d response.getWriter();\n\n      JsonFactory jsonFactory \u003d new JsonFactory();\n      JsonGenerator jg \u003d jsonFactory.createJsonGenerator(writer);\n      jg.useDefaultPrettyPrinter();\n      jg.writeStartObject();\n      if (mBeanServer \u003d\u003d null) {\n        jg.writeStringField(\"result\", \"ERROR\");\n        jg.writeStringField(\"message\", \"No MBeanServer could be found\");\n        jg.close();\n        LOG.error(\"No MBeanServer could be found.\");\n        response.setStatus(HttpServletResponse.SC_NOT_FOUND);\n        return;\n      }\n      \n      // query per mbean attribute\n      String getmethod \u003d request.getParameter(\"get\");\n      if (getmethod !\u003d null) {\n        String[] splitStrings \u003d getmethod.split(\"\\\\:\\\\:\");\n        if (splitStrings.length !\u003d 2) {\n          jg.writeStringField(\"result\", \"ERROR\");\n          jg.writeStringField(\"message\", \"query format is not as expected.\");\n          jg.close();\n          response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n          return;\n        }\n        listBeans(jg, new ObjectName(splitStrings[0]), splitStrings[1],\n            response);\n        jg.close();\n        return;\n      }\n\n      // query per mbean\n      String qry \u003d request.getParameter(\"qry\");\n      if (qry \u003d\u003d null) {\n        qry \u003d \"*:*\";\n      }\n      listBeans(jg, new ObjectName(qry), null, response);\n      jg.close();\n\n    } catch ( IOException e ) {\n      LOG.error(\"Caught an exception while processing JMX request\", e);\n      response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n    } catch ( MalformedObjectNameException e ) {\n      LOG.error(\"Caught an exception while processing JMX request\", e);\n      response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n    }\n  }",
      "path": "common/src/java/org/apache/hadoop/jmx/JMXJsonServlet.java",
      "extendedDetails": {}
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void doGet(HttpServletRequest request, HttpServletResponse response) {\n    try {\n      // Do the authorization\n      if (!HttpServer.hasAdministratorAccess(getServletContext(), request,\n          response)) {\n        return;\n      }\n\n      response.setContentType(\"application/json; charset\u003dutf8\");\n\n      PrintWriter writer \u003d response.getWriter();\n\n      JsonFactory jsonFactory \u003d new JsonFactory();\n      JsonGenerator jg \u003d jsonFactory.createJsonGenerator(writer);\n      jg.useDefaultPrettyPrinter();\n      jg.writeStartObject();\n      if (mBeanServer \u003d\u003d null) {\n        jg.writeStringField(\"result\", \"ERROR\");\n        jg.writeStringField(\"message\", \"No MBeanServer could be found\");\n        jg.close();\n        return;\n      }\n      String qry \u003d request.getParameter(\"qry\");\n      if (qry \u003d\u003d null) {\n        qry \u003d \"*:*\";\n      }\n      listBeans(jg, new ObjectName(qry));\n      jg.close();\n    } catch (IOException e) {\n      LOG.error(\"Caught an exception while processing JMX request\", e);\n      response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n    } catch (MalformedObjectNameException e) {\n      LOG.error(\"Caught an exception while processing JMX request\", e);\n      response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n    }\n  }",
      "path": "common/src/java/org/apache/hadoop/jmx/JMXJsonServlet.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/jmx/JMXJsonServlet.java",
        "newPath": "common/src/java/org/apache/hadoop/jmx/JMXJsonServlet.java"
      }
    },
    "babd19de331c875a1dffee908617c07c3e1eb31b": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7144. Expose JMX metrics via JSON servlet.\nContributed by Robert Joseph Evans\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1131289 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/06/11 4:40 PM",
      "commitName": "babd19de331c875a1dffee908617c07c3e1eb31b",
      "commitAuthor": "Christopher Douglas",
      "diff": "@@ -0,0 +1,36 @@\n+  public void doGet(HttpServletRequest request, HttpServletResponse response) {\n+    try {\n+      // Do the authorization\n+      if (!HttpServer.hasAdministratorAccess(getServletContext(), request,\n+          response)) {\n+        return;\n+      }\n+\n+      response.setContentType(\"application/json; charset\u003dutf8\");\n+\n+      PrintWriter writer \u003d response.getWriter();\n+\n+      JsonFactory jsonFactory \u003d new JsonFactory();\n+      JsonGenerator jg \u003d jsonFactory.createJsonGenerator(writer);\n+      jg.useDefaultPrettyPrinter();\n+      jg.writeStartObject();\n+      if (mBeanServer \u003d\u003d null) {\n+        jg.writeStringField(\"result\", \"ERROR\");\n+        jg.writeStringField(\"message\", \"No MBeanServer could be found\");\n+        jg.close();\n+        return;\n+      }\n+      String qry \u003d request.getParameter(\"qry\");\n+      if (qry \u003d\u003d null) {\n+        qry \u003d \"*:*\";\n+      }\n+      listBeans(jg, new ObjectName(qry));\n+      jg.close();\n+    } catch (IOException e) {\n+      LOG.error(\"Caught an exception while processing JMX request\", e);\n+      response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n+    } catch (MalformedObjectNameException e) {\n+      LOG.error(\"Caught an exception while processing JMX request\", e);\n+      response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void doGet(HttpServletRequest request, HttpServletResponse response) {\n    try {\n      // Do the authorization\n      if (!HttpServer.hasAdministratorAccess(getServletContext(), request,\n          response)) {\n        return;\n      }\n\n      response.setContentType(\"application/json; charset\u003dutf8\");\n\n      PrintWriter writer \u003d response.getWriter();\n\n      JsonFactory jsonFactory \u003d new JsonFactory();\n      JsonGenerator jg \u003d jsonFactory.createJsonGenerator(writer);\n      jg.useDefaultPrettyPrinter();\n      jg.writeStartObject();\n      if (mBeanServer \u003d\u003d null) {\n        jg.writeStringField(\"result\", \"ERROR\");\n        jg.writeStringField(\"message\", \"No MBeanServer could be found\");\n        jg.close();\n        return;\n      }\n      String qry \u003d request.getParameter(\"qry\");\n      if (qry \u003d\u003d null) {\n        qry \u003d \"*:*\";\n      }\n      listBeans(jg, new ObjectName(qry));\n      jg.close();\n    } catch (IOException e) {\n      LOG.error(\"Caught an exception while processing JMX request\", e);\n      response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n    } catch (MalformedObjectNameException e) {\n      LOG.error(\"Caught an exception while processing JMX request\", e);\n      response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n    }\n  }",
      "path": "src/java/org/apache/hadoop/jmx/JMXJsonServlet.java"
    }
  }
}