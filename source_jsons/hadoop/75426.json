{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ActiveStandbyElector.java",
  "functionName": "processWatchEvent",
  "functionId": "processWatchEvent___zk-ZooKeeper__event-WatchedEvent",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java",
  "functionStartLine": 602,
  "functionEndLine": 680,
  "numCommitsSeen": 41,
  "timeTaken": 1800,
  "changeHistory": [
    "5582b0f1d469e7c98811a341c4b4c78eaa64ede5",
    "c7cd620fa4dfac1322a41c50d3d0965dabc6be44",
    "b74d7427855eb7e20be70155c11acac0e333bd6a",
    "66931670287bc859300014ad50531f5d9a648067",
    "31c2e3f29cbdc33a7333022d61130a25cee03684",
    "cbfe8fea0ee9753b1f79dd8bb9a2972d0539e9ec"
  ],
  "changeHistoryShort": {
    "5582b0f1d469e7c98811a341c4b4c78eaa64ede5": "Ybodychange",
    "c7cd620fa4dfac1322a41c50d3d0965dabc6be44": "Ybodychange",
    "b74d7427855eb7e20be70155c11acac0e333bd6a": "Ybodychange",
    "66931670287bc859300014ad50531f5d9a648067": "Ybodychange",
    "31c2e3f29cbdc33a7333022d61130a25cee03684": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange)",
    "cbfe8fea0ee9753b1f79dd8bb9a2972d0539e9ec": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5582b0f1d469e7c98811a341c4b4c78eaa64ede5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11741. Add LOG.isDebugEnabled() guard for some LOG.debug(). Contributed by Walter Su.\n",
      "commitDate": "25/03/15 12:36 AM",
      "commitName": "5582b0f1d469e7c98811a341c4b4c78eaa64ede5",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "05/01/15 7:45 PM",
      "commitNameOld": "9803ae374f69942aec82ec6eeeb9722523a1ade0",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 78.16,
      "commitsBetweenForRepo": 694,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,75 +1,79 @@\n   synchronized void processWatchEvent(ZooKeeper zk, WatchedEvent event) {\n     Event.EventType eventType \u003d event.getType();\n     if (isStaleClient(zk)) return;\n-    LOG.debug(\"Watcher event type: \" + eventType + \" with state:\"\n-        + event.getState() + \" for path:\" + event.getPath()\n-        + \" connectionState: \" + zkConnectionState\n-        + \" for \" + this);\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Watcher event type: \" + eventType + \" with state:\"\n+          + event.getState() + \" for path:\" + event.getPath()\n+          + \" connectionState: \" + zkConnectionState\n+          + \" for \" + this);\n+    }\n \n     if (eventType \u003d\u003d Event.EventType.None) {\n       // the connection state has changed\n       switch (event.getState()) {\n       case SyncConnected:\n         LOG.info(\"Session connected.\");\n         // if the listener was asked to move to safe state then it needs to\n         // be undone\n         ConnectionState prevConnectionState \u003d zkConnectionState;\n         zkConnectionState \u003d ConnectionState.CONNECTED;\n         if (prevConnectionState \u003d\u003d ConnectionState.DISCONNECTED \u0026\u0026\n             wantToBeInElection) {\n           monitorActiveStatus();\n         }\n         break;\n       case Disconnected:\n         LOG.info(\"Session disconnected. Entering neutral mode...\");\n \n         // ask the app to move to safe state because zookeeper connection\n         // is not active and we dont know our state\n         zkConnectionState \u003d ConnectionState.DISCONNECTED;\n         enterNeutralMode();\n         break;\n       case Expired:\n         // the connection got terminated because of session timeout\n         // call listener to reconnect\n         LOG.info(\"Session expired. Entering neutral mode and rejoining...\");\n         enterNeutralMode();\n         reJoinElection(0);\n         break;\n       case SaslAuthenticated:\n         LOG.info(\"Successfully authenticated to ZooKeeper using SASL.\");\n         break;\n       default:\n         fatalError(\"Unexpected Zookeeper watch event state: \"\n             + event.getState());\n         break;\n       }\n \n       return;\n     }\n \n     // a watch on lock path in zookeeper has fired. so something has changed on\n     // the lock. ideally we should check that the path is the same as the lock\n     // path but trusting zookeeper for now\n     String path \u003d event.getPath();\n     if (path !\u003d null) {\n       switch (eventType) {\n       case NodeDeleted:\n         if (state \u003d\u003d State.ACTIVE) {\n           enterNeutralMode();\n         }\n         joinElectionInternal();\n         break;\n       case NodeDataChanged:\n         monitorActiveStatus();\n         break;\n       default:\n-        LOG.debug(\"Unexpected node event: \" + eventType + \" for path: \" + path);\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Unexpected node event: \" + eventType + \" for path: \" + path);\n+        }\n         monitorActiveStatus();\n       }\n \n       return;\n     }\n \n     // some unexpected error has occurred\n     fatalError(\"Unexpected watch error from Zookeeper\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void processWatchEvent(ZooKeeper zk, WatchedEvent event) {\n    Event.EventType eventType \u003d event.getType();\n    if (isStaleClient(zk)) return;\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Watcher event type: \" + eventType + \" with state:\"\n          + event.getState() + \" for path:\" + event.getPath()\n          + \" connectionState: \" + zkConnectionState\n          + \" for \" + this);\n    }\n\n    if (eventType \u003d\u003d Event.EventType.None) {\n      // the connection state has changed\n      switch (event.getState()) {\n      case SyncConnected:\n        LOG.info(\"Session connected.\");\n        // if the listener was asked to move to safe state then it needs to\n        // be undone\n        ConnectionState prevConnectionState \u003d zkConnectionState;\n        zkConnectionState \u003d ConnectionState.CONNECTED;\n        if (prevConnectionState \u003d\u003d ConnectionState.DISCONNECTED \u0026\u0026\n            wantToBeInElection) {\n          monitorActiveStatus();\n        }\n        break;\n      case Disconnected:\n        LOG.info(\"Session disconnected. Entering neutral mode...\");\n\n        // ask the app to move to safe state because zookeeper connection\n        // is not active and we dont know our state\n        zkConnectionState \u003d ConnectionState.DISCONNECTED;\n        enterNeutralMode();\n        break;\n      case Expired:\n        // the connection got terminated because of session timeout\n        // call listener to reconnect\n        LOG.info(\"Session expired. Entering neutral mode and rejoining...\");\n        enterNeutralMode();\n        reJoinElection(0);\n        break;\n      case SaslAuthenticated:\n        LOG.info(\"Successfully authenticated to ZooKeeper using SASL.\");\n        break;\n      default:\n        fatalError(\"Unexpected Zookeeper watch event state: \"\n            + event.getState());\n        break;\n      }\n\n      return;\n    }\n\n    // a watch on lock path in zookeeper has fired. so something has changed on\n    // the lock. ideally we should check that the path is the same as the lock\n    // path but trusting zookeeper for now\n    String path \u003d event.getPath();\n    if (path !\u003d null) {\n      switch (eventType) {\n      case NodeDeleted:\n        if (state \u003d\u003d State.ACTIVE) {\n          enterNeutralMode();\n        }\n        joinElectionInternal();\n        break;\n      case NodeDataChanged:\n        monitorActiveStatus();\n        break;\n      default:\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Unexpected node event: \" + eventType + \" for path: \" + path);\n        }\n        monitorActiveStatus();\n      }\n\n      return;\n    }\n\n    // some unexpected error has occurred\n    fatalError(\"Unexpected watch error from Zookeeper\");\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java",
      "extendedDetails": {}
    },
    "c7cd620fa4dfac1322a41c50d3d0965dabc6be44": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8315. Support SASL-authenticated ZooKeeper in ActiveStandbyElector. Contributed by Todd Lipcon\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1528293 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/10/13 5:49 PM",
      "commitName": "c7cd620fa4dfac1322a41c50d3d0965dabc6be44",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "28/08/13 10:54 AM",
      "commitNameOld": "f3c0074030864a0f1da2e4c2376798585cf13db0",
      "commitAuthorOld": "Sanford Ryza",
      "daysBetweenCommits": 34.29,
      "commitsBetweenForRepo": 186,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,72 +1,75 @@\n   synchronized void processWatchEvent(ZooKeeper zk, WatchedEvent event) {\n     Event.EventType eventType \u003d event.getType();\n     if (isStaleClient(zk)) return;\n     LOG.debug(\"Watcher event type: \" + eventType + \" with state:\"\n         + event.getState() + \" for path:\" + event.getPath()\n         + \" connectionState: \" + zkConnectionState\n         + \" for \" + this);\n \n     if (eventType \u003d\u003d Event.EventType.None) {\n       // the connection state has changed\n       switch (event.getState()) {\n       case SyncConnected:\n         LOG.info(\"Session connected.\");\n         // if the listener was asked to move to safe state then it needs to\n         // be undone\n         ConnectionState prevConnectionState \u003d zkConnectionState;\n         zkConnectionState \u003d ConnectionState.CONNECTED;\n         if (prevConnectionState \u003d\u003d ConnectionState.DISCONNECTED \u0026\u0026\n             wantToBeInElection) {\n           monitorActiveStatus();\n         }\n         break;\n       case Disconnected:\n         LOG.info(\"Session disconnected. Entering neutral mode...\");\n \n         // ask the app to move to safe state because zookeeper connection\n         // is not active and we dont know our state\n         zkConnectionState \u003d ConnectionState.DISCONNECTED;\n         enterNeutralMode();\n         break;\n       case Expired:\n         // the connection got terminated because of session timeout\n         // call listener to reconnect\n         LOG.info(\"Session expired. Entering neutral mode and rejoining...\");\n         enterNeutralMode();\n         reJoinElection(0);\n         break;\n+      case SaslAuthenticated:\n+        LOG.info(\"Successfully authenticated to ZooKeeper using SASL.\");\n+        break;\n       default:\n         fatalError(\"Unexpected Zookeeper watch event state: \"\n             + event.getState());\n         break;\n       }\n \n       return;\n     }\n \n     // a watch on lock path in zookeeper has fired. so something has changed on\n     // the lock. ideally we should check that the path is the same as the lock\n     // path but trusting zookeeper for now\n     String path \u003d event.getPath();\n     if (path !\u003d null) {\n       switch (eventType) {\n       case NodeDeleted:\n         if (state \u003d\u003d State.ACTIVE) {\n           enterNeutralMode();\n         }\n         joinElectionInternal();\n         break;\n       case NodeDataChanged:\n         monitorActiveStatus();\n         break;\n       default:\n         LOG.debug(\"Unexpected node event: \" + eventType + \" for path: \" + path);\n         monitorActiveStatus();\n       }\n \n       return;\n     }\n \n     // some unexpected error has occurred\n     fatalError(\"Unexpected watch error from Zookeeper\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void processWatchEvent(ZooKeeper zk, WatchedEvent event) {\n    Event.EventType eventType \u003d event.getType();\n    if (isStaleClient(zk)) return;\n    LOG.debug(\"Watcher event type: \" + eventType + \" with state:\"\n        + event.getState() + \" for path:\" + event.getPath()\n        + \" connectionState: \" + zkConnectionState\n        + \" for \" + this);\n\n    if (eventType \u003d\u003d Event.EventType.None) {\n      // the connection state has changed\n      switch (event.getState()) {\n      case SyncConnected:\n        LOG.info(\"Session connected.\");\n        // if the listener was asked to move to safe state then it needs to\n        // be undone\n        ConnectionState prevConnectionState \u003d zkConnectionState;\n        zkConnectionState \u003d ConnectionState.CONNECTED;\n        if (prevConnectionState \u003d\u003d ConnectionState.DISCONNECTED \u0026\u0026\n            wantToBeInElection) {\n          monitorActiveStatus();\n        }\n        break;\n      case Disconnected:\n        LOG.info(\"Session disconnected. Entering neutral mode...\");\n\n        // ask the app to move to safe state because zookeeper connection\n        // is not active and we dont know our state\n        zkConnectionState \u003d ConnectionState.DISCONNECTED;\n        enterNeutralMode();\n        break;\n      case Expired:\n        // the connection got terminated because of session timeout\n        // call listener to reconnect\n        LOG.info(\"Session expired. Entering neutral mode and rejoining...\");\n        enterNeutralMode();\n        reJoinElection(0);\n        break;\n      case SaslAuthenticated:\n        LOG.info(\"Successfully authenticated to ZooKeeper using SASL.\");\n        break;\n      default:\n        fatalError(\"Unexpected Zookeeper watch event state: \"\n            + event.getState());\n        break;\n      }\n\n      return;\n    }\n\n    // a watch on lock path in zookeeper has fired. so something has changed on\n    // the lock. ideally we should check that the path is the same as the lock\n    // path but trusting zookeeper for now\n    String path \u003d event.getPath();\n    if (path !\u003d null) {\n      switch (eventType) {\n      case NodeDeleted:\n        if (state \u003d\u003d State.ACTIVE) {\n          enterNeutralMode();\n        }\n        joinElectionInternal();\n        break;\n      case NodeDataChanged:\n        monitorActiveStatus();\n        break;\n      default:\n        LOG.debug(\"Unexpected node event: \" + eventType + \" for path: \" + path);\n        monitorActiveStatus();\n      }\n\n      return;\n    }\n\n    // some unexpected error has occurred\n    fatalError(\"Unexpected watch error from Zookeeper\");\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java",
      "extendedDetails": {}
    },
    "b74d7427855eb7e20be70155c11acac0e333bd6a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8245. Fix flakiness in TestZKFailoverController. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3042@1309554 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/04/12 12:21 PM",
      "commitName": "b74d7427855eb7e20be70155c11acac0e333bd6a",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "03/04/12 4:37 PM",
      "commitNameOld": "30e1b3bba856b2379a0dc1e7450512427d39c5d7",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.82,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,70 +1,72 @@\n   synchronized void processWatchEvent(ZooKeeper zk, WatchedEvent event) {\n     Event.EventType eventType \u003d event.getType();\n     if (isStaleClient(zk)) return;\n     LOG.debug(\"Watcher event type: \" + eventType + \" with state:\"\n         + event.getState() + \" for path:\" + event.getPath()\n-        + \" connectionState: \" + zkConnectionState);\n+        + \" connectionState: \" + zkConnectionState\n+        + \" for \" + this);\n \n     if (eventType \u003d\u003d Event.EventType.None) {\n       // the connection state has changed\n       switch (event.getState()) {\n       case SyncConnected:\n         LOG.info(\"Session connected.\");\n         // if the listener was asked to move to safe state then it needs to\n         // be undone\n         ConnectionState prevConnectionState \u003d zkConnectionState;\n         zkConnectionState \u003d ConnectionState.CONNECTED;\n-        if (prevConnectionState \u003d\u003d ConnectionState.DISCONNECTED) {\n+        if (prevConnectionState \u003d\u003d ConnectionState.DISCONNECTED \u0026\u0026\n+            wantToBeInElection) {\n           monitorActiveStatus();\n         }\n         break;\n       case Disconnected:\n         LOG.info(\"Session disconnected. Entering neutral mode...\");\n \n         // ask the app to move to safe state because zookeeper connection\n         // is not active and we dont know our state\n         zkConnectionState \u003d ConnectionState.DISCONNECTED;\n         enterNeutralMode();\n         break;\n       case Expired:\n         // the connection got terminated because of session timeout\n         // call listener to reconnect\n         LOG.info(\"Session expired. Entering neutral mode and rejoining...\");\n         enterNeutralMode();\n         reJoinElection(0);\n         break;\n       default:\n         fatalError(\"Unexpected Zookeeper watch event state: \"\n             + event.getState());\n         break;\n       }\n \n       return;\n     }\n \n     // a watch on lock path in zookeeper has fired. so something has changed on\n     // the lock. ideally we should check that the path is the same as the lock\n     // path but trusting zookeeper for now\n     String path \u003d event.getPath();\n     if (path !\u003d null) {\n       switch (eventType) {\n       case NodeDeleted:\n         if (state \u003d\u003d State.ACTIVE) {\n           enterNeutralMode();\n         }\n         joinElectionInternal();\n         break;\n       case NodeDataChanged:\n         monitorActiveStatus();\n         break;\n       default:\n         LOG.debug(\"Unexpected node event: \" + eventType + \" for path: \" + path);\n         monitorActiveStatus();\n       }\n \n       return;\n     }\n \n     // some unexpected error has occurred\n     fatalError(\"Unexpected watch error from Zookeeper\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void processWatchEvent(ZooKeeper zk, WatchedEvent event) {\n    Event.EventType eventType \u003d event.getType();\n    if (isStaleClient(zk)) return;\n    LOG.debug(\"Watcher event type: \" + eventType + \" with state:\"\n        + event.getState() + \" for path:\" + event.getPath()\n        + \" connectionState: \" + zkConnectionState\n        + \" for \" + this);\n\n    if (eventType \u003d\u003d Event.EventType.None) {\n      // the connection state has changed\n      switch (event.getState()) {\n      case SyncConnected:\n        LOG.info(\"Session connected.\");\n        // if the listener was asked to move to safe state then it needs to\n        // be undone\n        ConnectionState prevConnectionState \u003d zkConnectionState;\n        zkConnectionState \u003d ConnectionState.CONNECTED;\n        if (prevConnectionState \u003d\u003d ConnectionState.DISCONNECTED \u0026\u0026\n            wantToBeInElection) {\n          monitorActiveStatus();\n        }\n        break;\n      case Disconnected:\n        LOG.info(\"Session disconnected. Entering neutral mode...\");\n\n        // ask the app to move to safe state because zookeeper connection\n        // is not active and we dont know our state\n        zkConnectionState \u003d ConnectionState.DISCONNECTED;\n        enterNeutralMode();\n        break;\n      case Expired:\n        // the connection got terminated because of session timeout\n        // call listener to reconnect\n        LOG.info(\"Session expired. Entering neutral mode and rejoining...\");\n        enterNeutralMode();\n        reJoinElection(0);\n        break;\n      default:\n        fatalError(\"Unexpected Zookeeper watch event state: \"\n            + event.getState());\n        break;\n      }\n\n      return;\n    }\n\n    // a watch on lock path in zookeeper has fired. so something has changed on\n    // the lock. ideally we should check that the path is the same as the lock\n    // path but trusting zookeeper for now\n    String path \u003d event.getPath();\n    if (path !\u003d null) {\n      switch (eventType) {\n      case NodeDeleted:\n        if (state \u003d\u003d State.ACTIVE) {\n          enterNeutralMode();\n        }\n        joinElectionInternal();\n        break;\n      case NodeDataChanged:\n        monitorActiveStatus();\n        break;\n      default:\n        LOG.debug(\"Unexpected node event: \" + eventType + \" for path: \" + path);\n        monitorActiveStatus();\n      }\n\n      return;\n    }\n\n    // some unexpected error has occurred\n    fatalError(\"Unexpected watch error from Zookeeper\");\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java",
      "extendedDetails": {}
    },
    "66931670287bc859300014ad50531f5d9a648067": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8220. ZKFailoverController doesn\u0027t handle failure to become active correctly. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3042@1307596 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/03/12 1:23 PM",
      "commitName": "66931670287bc859300014ad50531f5d9a648067",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "29/03/12 2:49 PM",
      "commitNameOld": "04416861eb068f5d0a4ba1361924714d89f2d73c",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.94,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,70 +1,70 @@\n   synchronized void processWatchEvent(ZooKeeper zk, WatchedEvent event) {\n     Event.EventType eventType \u003d event.getType();\n     if (isStaleClient(zk)) return;\n     LOG.debug(\"Watcher event type: \" + eventType + \" with state:\"\n         + event.getState() + \" for path:\" + event.getPath()\n         + \" connectionState: \" + zkConnectionState);\n \n     if (eventType \u003d\u003d Event.EventType.None) {\n       // the connection state has changed\n       switch (event.getState()) {\n       case SyncConnected:\n         LOG.info(\"Session connected.\");\n         // if the listener was asked to move to safe state then it needs to\n         // be undone\n         ConnectionState prevConnectionState \u003d zkConnectionState;\n         zkConnectionState \u003d ConnectionState.CONNECTED;\n         if (prevConnectionState \u003d\u003d ConnectionState.DISCONNECTED) {\n           monitorActiveStatus();\n         }\n         break;\n       case Disconnected:\n         LOG.info(\"Session disconnected. Entering neutral mode...\");\n \n         // ask the app to move to safe state because zookeeper connection\n         // is not active and we dont know our state\n         zkConnectionState \u003d ConnectionState.DISCONNECTED;\n         enterNeutralMode();\n         break;\n       case Expired:\n         // the connection got terminated because of session timeout\n         // call listener to reconnect\n         LOG.info(\"Session expired. Entering neutral mode and rejoining...\");\n         enterNeutralMode();\n-        reJoinElection();\n+        reJoinElection(0);\n         break;\n       default:\n         fatalError(\"Unexpected Zookeeper watch event state: \"\n             + event.getState());\n         break;\n       }\n \n       return;\n     }\n \n     // a watch on lock path in zookeeper has fired. so something has changed on\n     // the lock. ideally we should check that the path is the same as the lock\n     // path but trusting zookeeper for now\n     String path \u003d event.getPath();\n     if (path !\u003d null) {\n       switch (eventType) {\n       case NodeDeleted:\n         if (state \u003d\u003d State.ACTIVE) {\n           enterNeutralMode();\n         }\n         joinElectionInternal();\n         break;\n       case NodeDataChanged:\n         monitorActiveStatus();\n         break;\n       default:\n         LOG.debug(\"Unexpected node event: \" + eventType + \" for path: \" + path);\n         monitorActiveStatus();\n       }\n \n       return;\n     }\n \n     // some unexpected error has occurred\n     fatalError(\"Unexpected watch error from Zookeeper\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void processWatchEvent(ZooKeeper zk, WatchedEvent event) {\n    Event.EventType eventType \u003d event.getType();\n    if (isStaleClient(zk)) return;\n    LOG.debug(\"Watcher event type: \" + eventType + \" with state:\"\n        + event.getState() + \" for path:\" + event.getPath()\n        + \" connectionState: \" + zkConnectionState);\n\n    if (eventType \u003d\u003d Event.EventType.None) {\n      // the connection state has changed\n      switch (event.getState()) {\n      case SyncConnected:\n        LOG.info(\"Session connected.\");\n        // if the listener was asked to move to safe state then it needs to\n        // be undone\n        ConnectionState prevConnectionState \u003d zkConnectionState;\n        zkConnectionState \u003d ConnectionState.CONNECTED;\n        if (prevConnectionState \u003d\u003d ConnectionState.DISCONNECTED) {\n          monitorActiveStatus();\n        }\n        break;\n      case Disconnected:\n        LOG.info(\"Session disconnected. Entering neutral mode...\");\n\n        // ask the app to move to safe state because zookeeper connection\n        // is not active and we dont know our state\n        zkConnectionState \u003d ConnectionState.DISCONNECTED;\n        enterNeutralMode();\n        break;\n      case Expired:\n        // the connection got terminated because of session timeout\n        // call listener to reconnect\n        LOG.info(\"Session expired. Entering neutral mode and rejoining...\");\n        enterNeutralMode();\n        reJoinElection(0);\n        break;\n      default:\n        fatalError(\"Unexpected Zookeeper watch event state: \"\n            + event.getState());\n        break;\n      }\n\n      return;\n    }\n\n    // a watch on lock path in zookeeper has fired. so something has changed on\n    // the lock. ideally we should check that the path is the same as the lock\n    // path but trusting zookeeper for now\n    String path \u003d event.getPath();\n    if (path !\u003d null) {\n      switch (eventType) {\n      case NodeDeleted:\n        if (state \u003d\u003d State.ACTIVE) {\n          enterNeutralMode();\n        }\n        joinElectionInternal();\n        break;\n      case NodeDataChanged:\n        monitorActiveStatus();\n        break;\n      default:\n        LOG.debug(\"Unexpected node event: \" + eventType + \" for path: \" + path);\n        monitorActiveStatus();\n      }\n\n      return;\n    }\n\n    // some unexpected error has occurred\n    fatalError(\"Unexpected watch error from Zookeeper\");\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java",
      "extendedDetails": {}
    },
    "31c2e3f29cbdc33a7333022d61130a25cee03684": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "HADOOP-8212. Improve ActiveStandbyElector\u0027s behavior when session expires. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1305510 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/03/12 12:31 PM",
      "commitName": "31c2e3f29cbdc33a7333022d61130a25cee03684",
      "commitAuthor": "Todd Lipcon",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HADOOP-8212. Improve ActiveStandbyElector\u0027s behavior when session expires. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1305510 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "26/03/12 12:31 PM",
          "commitName": "31c2e3f29cbdc33a7333022d61130a25cee03684",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "23/03/12 5:05 PM",
          "commitNameOld": "805c1280ce2773bc61ea718723b42b09d795688f",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 2.81,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,70 +1,70 @@\n-  public synchronized void process(WatchedEvent event) {\n+  synchronized void processWatchEvent(ZooKeeper zk, WatchedEvent event) {\n     Event.EventType eventType \u003d event.getType();\n+    if (isStaleClient(zk)) return;\n     LOG.debug(\"Watcher event type: \" + eventType + \" with state:\"\n         + event.getState() + \" for path:\" + event.getPath()\n         + \" connectionState: \" + zkConnectionState);\n-    if (zkClient \u003d\u003d null) {\n-      // zkClient is nulled before closing the connection\n-      // this is the callback with session expired after we closed the session\n-      return;\n-    }\n \n     if (eventType \u003d\u003d Event.EventType.None) {\n       // the connection state has changed\n       switch (event.getState()) {\n       case SyncConnected:\n+        LOG.info(\"Session connected.\");\n         // if the listener was asked to move to safe state then it needs to\n         // be undone\n         ConnectionState prevConnectionState \u003d zkConnectionState;\n         zkConnectionState \u003d ConnectionState.CONNECTED;\n         if (prevConnectionState \u003d\u003d ConnectionState.DISCONNECTED) {\n           monitorActiveStatus();\n         }\n         break;\n       case Disconnected:\n+        LOG.info(\"Session disconnected. Entering neutral mode...\");\n+\n         // ask the app to move to safe state because zookeeper connection\n         // is not active and we dont know our state\n         zkConnectionState \u003d ConnectionState.DISCONNECTED;\n         enterNeutralMode();\n         break;\n       case Expired:\n         // the connection got terminated because of session timeout\n         // call listener to reconnect\n+        LOG.info(\"Session expired. Entering neutral mode and rejoining...\");\n         enterNeutralMode();\n         reJoinElection();\n         break;\n       default:\n         fatalError(\"Unexpected Zookeeper watch event state: \"\n             + event.getState());\n         break;\n       }\n \n       return;\n     }\n \n     // a watch on lock path in zookeeper has fired. so something has changed on\n     // the lock. ideally we should check that the path is the same as the lock\n     // path but trusting zookeeper for now\n     String path \u003d event.getPath();\n     if (path !\u003d null) {\n       switch (eventType) {\n       case NodeDeleted:\n         if (state \u003d\u003d State.ACTIVE) {\n           enterNeutralMode();\n         }\n         joinElectionInternal();\n         break;\n       case NodeDataChanged:\n         monitorActiveStatus();\n         break;\n       default:\n         LOG.debug(\"Unexpected node event: \" + eventType + \" for path: \" + path);\n         monitorActiveStatus();\n       }\n \n       return;\n     }\n \n     // some unexpected error has occurred\n     fatalError(\"Unexpected watch error from Zookeeper\");\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized void processWatchEvent(ZooKeeper zk, WatchedEvent event) {\n    Event.EventType eventType \u003d event.getType();\n    if (isStaleClient(zk)) return;\n    LOG.debug(\"Watcher event type: \" + eventType + \" with state:\"\n        + event.getState() + \" for path:\" + event.getPath()\n        + \" connectionState: \" + zkConnectionState);\n\n    if (eventType \u003d\u003d Event.EventType.None) {\n      // the connection state has changed\n      switch (event.getState()) {\n      case SyncConnected:\n        LOG.info(\"Session connected.\");\n        // if the listener was asked to move to safe state then it needs to\n        // be undone\n        ConnectionState prevConnectionState \u003d zkConnectionState;\n        zkConnectionState \u003d ConnectionState.CONNECTED;\n        if (prevConnectionState \u003d\u003d ConnectionState.DISCONNECTED) {\n          monitorActiveStatus();\n        }\n        break;\n      case Disconnected:\n        LOG.info(\"Session disconnected. Entering neutral mode...\");\n\n        // ask the app to move to safe state because zookeeper connection\n        // is not active and we dont know our state\n        zkConnectionState \u003d ConnectionState.DISCONNECTED;\n        enterNeutralMode();\n        break;\n      case Expired:\n        // the connection got terminated because of session timeout\n        // call listener to reconnect\n        LOG.info(\"Session expired. Entering neutral mode and rejoining...\");\n        enterNeutralMode();\n        reJoinElection();\n        break;\n      default:\n        fatalError(\"Unexpected Zookeeper watch event state: \"\n            + event.getState());\n        break;\n      }\n\n      return;\n    }\n\n    // a watch on lock path in zookeeper has fired. so something has changed on\n    // the lock. ideally we should check that the path is the same as the lock\n    // path but trusting zookeeper for now\n    String path \u003d event.getPath();\n    if (path !\u003d null) {\n      switch (eventType) {\n      case NodeDeleted:\n        if (state \u003d\u003d State.ACTIVE) {\n          enterNeutralMode();\n        }\n        joinElectionInternal();\n        break;\n      case NodeDataChanged:\n        monitorActiveStatus();\n        break;\n      default:\n        LOG.debug(\"Unexpected node event: \" + eventType + \" for path: \" + path);\n        monitorActiveStatus();\n      }\n\n      return;\n    }\n\n    // some unexpected error has occurred\n    fatalError(\"Unexpected watch error from Zookeeper\");\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java",
          "extendedDetails": {
            "oldValue": "process",
            "newValue": "processWatchEvent"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-8212. Improve ActiveStandbyElector\u0027s behavior when session expires. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1305510 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "26/03/12 12:31 PM",
          "commitName": "31c2e3f29cbdc33a7333022d61130a25cee03684",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "23/03/12 5:05 PM",
          "commitNameOld": "805c1280ce2773bc61ea718723b42b09d795688f",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 2.81,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,70 +1,70 @@\n-  public synchronized void process(WatchedEvent event) {\n+  synchronized void processWatchEvent(ZooKeeper zk, WatchedEvent event) {\n     Event.EventType eventType \u003d event.getType();\n+    if (isStaleClient(zk)) return;\n     LOG.debug(\"Watcher event type: \" + eventType + \" with state:\"\n         + event.getState() + \" for path:\" + event.getPath()\n         + \" connectionState: \" + zkConnectionState);\n-    if (zkClient \u003d\u003d null) {\n-      // zkClient is nulled before closing the connection\n-      // this is the callback with session expired after we closed the session\n-      return;\n-    }\n \n     if (eventType \u003d\u003d Event.EventType.None) {\n       // the connection state has changed\n       switch (event.getState()) {\n       case SyncConnected:\n+        LOG.info(\"Session connected.\");\n         // if the listener was asked to move to safe state then it needs to\n         // be undone\n         ConnectionState prevConnectionState \u003d zkConnectionState;\n         zkConnectionState \u003d ConnectionState.CONNECTED;\n         if (prevConnectionState \u003d\u003d ConnectionState.DISCONNECTED) {\n           monitorActiveStatus();\n         }\n         break;\n       case Disconnected:\n+        LOG.info(\"Session disconnected. Entering neutral mode...\");\n+\n         // ask the app to move to safe state because zookeeper connection\n         // is not active and we dont know our state\n         zkConnectionState \u003d ConnectionState.DISCONNECTED;\n         enterNeutralMode();\n         break;\n       case Expired:\n         // the connection got terminated because of session timeout\n         // call listener to reconnect\n+        LOG.info(\"Session expired. Entering neutral mode and rejoining...\");\n         enterNeutralMode();\n         reJoinElection();\n         break;\n       default:\n         fatalError(\"Unexpected Zookeeper watch event state: \"\n             + event.getState());\n         break;\n       }\n \n       return;\n     }\n \n     // a watch on lock path in zookeeper has fired. so something has changed on\n     // the lock. ideally we should check that the path is the same as the lock\n     // path but trusting zookeeper for now\n     String path \u003d event.getPath();\n     if (path !\u003d null) {\n       switch (eventType) {\n       case NodeDeleted:\n         if (state \u003d\u003d State.ACTIVE) {\n           enterNeutralMode();\n         }\n         joinElectionInternal();\n         break;\n       case NodeDataChanged:\n         monitorActiveStatus();\n         break;\n       default:\n         LOG.debug(\"Unexpected node event: \" + eventType + \" for path: \" + path);\n         monitorActiveStatus();\n       }\n \n       return;\n     }\n \n     // some unexpected error has occurred\n     fatalError(\"Unexpected watch error from Zookeeper\");\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized void processWatchEvent(ZooKeeper zk, WatchedEvent event) {\n    Event.EventType eventType \u003d event.getType();\n    if (isStaleClient(zk)) return;\n    LOG.debug(\"Watcher event type: \" + eventType + \" with state:\"\n        + event.getState() + \" for path:\" + event.getPath()\n        + \" connectionState: \" + zkConnectionState);\n\n    if (eventType \u003d\u003d Event.EventType.None) {\n      // the connection state has changed\n      switch (event.getState()) {\n      case SyncConnected:\n        LOG.info(\"Session connected.\");\n        // if the listener was asked to move to safe state then it needs to\n        // be undone\n        ConnectionState prevConnectionState \u003d zkConnectionState;\n        zkConnectionState \u003d ConnectionState.CONNECTED;\n        if (prevConnectionState \u003d\u003d ConnectionState.DISCONNECTED) {\n          monitorActiveStatus();\n        }\n        break;\n      case Disconnected:\n        LOG.info(\"Session disconnected. Entering neutral mode...\");\n\n        // ask the app to move to safe state because zookeeper connection\n        // is not active and we dont know our state\n        zkConnectionState \u003d ConnectionState.DISCONNECTED;\n        enterNeutralMode();\n        break;\n      case Expired:\n        // the connection got terminated because of session timeout\n        // call listener to reconnect\n        LOG.info(\"Session expired. Entering neutral mode and rejoining...\");\n        enterNeutralMode();\n        reJoinElection();\n        break;\n      default:\n        fatalError(\"Unexpected Zookeeper watch event state: \"\n            + event.getState());\n        break;\n      }\n\n      return;\n    }\n\n    // a watch on lock path in zookeeper has fired. so something has changed on\n    // the lock. ideally we should check that the path is the same as the lock\n    // path but trusting zookeeper for now\n    String path \u003d event.getPath();\n    if (path !\u003d null) {\n      switch (eventType) {\n      case NodeDeleted:\n        if (state \u003d\u003d State.ACTIVE) {\n          enterNeutralMode();\n        }\n        joinElectionInternal();\n        break;\n      case NodeDataChanged:\n        monitorActiveStatus();\n        break;\n      default:\n        LOG.debug(\"Unexpected node event: \" + eventType + \" for path: \" + path);\n        monitorActiveStatus();\n      }\n\n      return;\n    }\n\n    // some unexpected error has occurred\n    fatalError(\"Unexpected watch error from Zookeeper\");\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java",
          "extendedDetails": {
            "oldValue": "[event-WatchedEvent]",
            "newValue": "[zk-ZooKeeper, event-WatchedEvent]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-8212. Improve ActiveStandbyElector\u0027s behavior when session expires. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1305510 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "26/03/12 12:31 PM",
          "commitName": "31c2e3f29cbdc33a7333022d61130a25cee03684",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "23/03/12 5:05 PM",
          "commitNameOld": "805c1280ce2773bc61ea718723b42b09d795688f",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 2.81,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,70 +1,70 @@\n-  public synchronized void process(WatchedEvent event) {\n+  synchronized void processWatchEvent(ZooKeeper zk, WatchedEvent event) {\n     Event.EventType eventType \u003d event.getType();\n+    if (isStaleClient(zk)) return;\n     LOG.debug(\"Watcher event type: \" + eventType + \" with state:\"\n         + event.getState() + \" for path:\" + event.getPath()\n         + \" connectionState: \" + zkConnectionState);\n-    if (zkClient \u003d\u003d null) {\n-      // zkClient is nulled before closing the connection\n-      // this is the callback with session expired after we closed the session\n-      return;\n-    }\n \n     if (eventType \u003d\u003d Event.EventType.None) {\n       // the connection state has changed\n       switch (event.getState()) {\n       case SyncConnected:\n+        LOG.info(\"Session connected.\");\n         // if the listener was asked to move to safe state then it needs to\n         // be undone\n         ConnectionState prevConnectionState \u003d zkConnectionState;\n         zkConnectionState \u003d ConnectionState.CONNECTED;\n         if (prevConnectionState \u003d\u003d ConnectionState.DISCONNECTED) {\n           monitorActiveStatus();\n         }\n         break;\n       case Disconnected:\n+        LOG.info(\"Session disconnected. Entering neutral mode...\");\n+\n         // ask the app to move to safe state because zookeeper connection\n         // is not active and we dont know our state\n         zkConnectionState \u003d ConnectionState.DISCONNECTED;\n         enterNeutralMode();\n         break;\n       case Expired:\n         // the connection got terminated because of session timeout\n         // call listener to reconnect\n+        LOG.info(\"Session expired. Entering neutral mode and rejoining...\");\n         enterNeutralMode();\n         reJoinElection();\n         break;\n       default:\n         fatalError(\"Unexpected Zookeeper watch event state: \"\n             + event.getState());\n         break;\n       }\n \n       return;\n     }\n \n     // a watch on lock path in zookeeper has fired. so something has changed on\n     // the lock. ideally we should check that the path is the same as the lock\n     // path but trusting zookeeper for now\n     String path \u003d event.getPath();\n     if (path !\u003d null) {\n       switch (eventType) {\n       case NodeDeleted:\n         if (state \u003d\u003d State.ACTIVE) {\n           enterNeutralMode();\n         }\n         joinElectionInternal();\n         break;\n       case NodeDataChanged:\n         monitorActiveStatus();\n         break;\n       default:\n         LOG.debug(\"Unexpected node event: \" + eventType + \" for path: \" + path);\n         monitorActiveStatus();\n       }\n \n       return;\n     }\n \n     // some unexpected error has occurred\n     fatalError(\"Unexpected watch error from Zookeeper\");\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized void processWatchEvent(ZooKeeper zk, WatchedEvent event) {\n    Event.EventType eventType \u003d event.getType();\n    if (isStaleClient(zk)) return;\n    LOG.debug(\"Watcher event type: \" + eventType + \" with state:\"\n        + event.getState() + \" for path:\" + event.getPath()\n        + \" connectionState: \" + zkConnectionState);\n\n    if (eventType \u003d\u003d Event.EventType.None) {\n      // the connection state has changed\n      switch (event.getState()) {\n      case SyncConnected:\n        LOG.info(\"Session connected.\");\n        // if the listener was asked to move to safe state then it needs to\n        // be undone\n        ConnectionState prevConnectionState \u003d zkConnectionState;\n        zkConnectionState \u003d ConnectionState.CONNECTED;\n        if (prevConnectionState \u003d\u003d ConnectionState.DISCONNECTED) {\n          monitorActiveStatus();\n        }\n        break;\n      case Disconnected:\n        LOG.info(\"Session disconnected. Entering neutral mode...\");\n\n        // ask the app to move to safe state because zookeeper connection\n        // is not active and we dont know our state\n        zkConnectionState \u003d ConnectionState.DISCONNECTED;\n        enterNeutralMode();\n        break;\n      case Expired:\n        // the connection got terminated because of session timeout\n        // call listener to reconnect\n        LOG.info(\"Session expired. Entering neutral mode and rejoining...\");\n        enterNeutralMode();\n        reJoinElection();\n        break;\n      default:\n        fatalError(\"Unexpected Zookeeper watch event state: \"\n            + event.getState());\n        break;\n      }\n\n      return;\n    }\n\n    // a watch on lock path in zookeeper has fired. so something has changed on\n    // the lock. ideally we should check that the path is the same as the lock\n    // path but trusting zookeeper for now\n    String path \u003d event.getPath();\n    if (path !\u003d null) {\n      switch (eventType) {\n      case NodeDeleted:\n        if (state \u003d\u003d State.ACTIVE) {\n          enterNeutralMode();\n        }\n        joinElectionInternal();\n        break;\n      case NodeDataChanged:\n        monitorActiveStatus();\n        break;\n      default:\n        LOG.debug(\"Unexpected node event: \" + eventType + \" for path: \" + path);\n        monitorActiveStatus();\n      }\n\n      return;\n    }\n\n    // some unexpected error has occurred\n    fatalError(\"Unexpected watch error from Zookeeper\");\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[synchronized]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-8212. Improve ActiveStandbyElector\u0027s behavior when session expires. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1305510 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "26/03/12 12:31 PM",
          "commitName": "31c2e3f29cbdc33a7333022d61130a25cee03684",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "23/03/12 5:05 PM",
          "commitNameOld": "805c1280ce2773bc61ea718723b42b09d795688f",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 2.81,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,70 +1,70 @@\n-  public synchronized void process(WatchedEvent event) {\n+  synchronized void processWatchEvent(ZooKeeper zk, WatchedEvent event) {\n     Event.EventType eventType \u003d event.getType();\n+    if (isStaleClient(zk)) return;\n     LOG.debug(\"Watcher event type: \" + eventType + \" with state:\"\n         + event.getState() + \" for path:\" + event.getPath()\n         + \" connectionState: \" + zkConnectionState);\n-    if (zkClient \u003d\u003d null) {\n-      // zkClient is nulled before closing the connection\n-      // this is the callback with session expired after we closed the session\n-      return;\n-    }\n \n     if (eventType \u003d\u003d Event.EventType.None) {\n       // the connection state has changed\n       switch (event.getState()) {\n       case SyncConnected:\n+        LOG.info(\"Session connected.\");\n         // if the listener was asked to move to safe state then it needs to\n         // be undone\n         ConnectionState prevConnectionState \u003d zkConnectionState;\n         zkConnectionState \u003d ConnectionState.CONNECTED;\n         if (prevConnectionState \u003d\u003d ConnectionState.DISCONNECTED) {\n           monitorActiveStatus();\n         }\n         break;\n       case Disconnected:\n+        LOG.info(\"Session disconnected. Entering neutral mode...\");\n+\n         // ask the app to move to safe state because zookeeper connection\n         // is not active and we dont know our state\n         zkConnectionState \u003d ConnectionState.DISCONNECTED;\n         enterNeutralMode();\n         break;\n       case Expired:\n         // the connection got terminated because of session timeout\n         // call listener to reconnect\n+        LOG.info(\"Session expired. Entering neutral mode and rejoining...\");\n         enterNeutralMode();\n         reJoinElection();\n         break;\n       default:\n         fatalError(\"Unexpected Zookeeper watch event state: \"\n             + event.getState());\n         break;\n       }\n \n       return;\n     }\n \n     // a watch on lock path in zookeeper has fired. so something has changed on\n     // the lock. ideally we should check that the path is the same as the lock\n     // path but trusting zookeeper for now\n     String path \u003d event.getPath();\n     if (path !\u003d null) {\n       switch (eventType) {\n       case NodeDeleted:\n         if (state \u003d\u003d State.ACTIVE) {\n           enterNeutralMode();\n         }\n         joinElectionInternal();\n         break;\n       case NodeDataChanged:\n         monitorActiveStatus();\n         break;\n       default:\n         LOG.debug(\"Unexpected node event: \" + eventType + \" for path: \" + path);\n         monitorActiveStatus();\n       }\n \n       return;\n     }\n \n     // some unexpected error has occurred\n     fatalError(\"Unexpected watch error from Zookeeper\");\n   }\n\\ No newline at end of file\n",
          "actualSource": "  synchronized void processWatchEvent(ZooKeeper zk, WatchedEvent event) {\n    Event.EventType eventType \u003d event.getType();\n    if (isStaleClient(zk)) return;\n    LOG.debug(\"Watcher event type: \" + eventType + \" with state:\"\n        + event.getState() + \" for path:\" + event.getPath()\n        + \" connectionState: \" + zkConnectionState);\n\n    if (eventType \u003d\u003d Event.EventType.None) {\n      // the connection state has changed\n      switch (event.getState()) {\n      case SyncConnected:\n        LOG.info(\"Session connected.\");\n        // if the listener was asked to move to safe state then it needs to\n        // be undone\n        ConnectionState prevConnectionState \u003d zkConnectionState;\n        zkConnectionState \u003d ConnectionState.CONNECTED;\n        if (prevConnectionState \u003d\u003d ConnectionState.DISCONNECTED) {\n          monitorActiveStatus();\n        }\n        break;\n      case Disconnected:\n        LOG.info(\"Session disconnected. Entering neutral mode...\");\n\n        // ask the app to move to safe state because zookeeper connection\n        // is not active and we dont know our state\n        zkConnectionState \u003d ConnectionState.DISCONNECTED;\n        enterNeutralMode();\n        break;\n      case Expired:\n        // the connection got terminated because of session timeout\n        // call listener to reconnect\n        LOG.info(\"Session expired. Entering neutral mode and rejoining...\");\n        enterNeutralMode();\n        reJoinElection();\n        break;\n      default:\n        fatalError(\"Unexpected Zookeeper watch event state: \"\n            + event.getState());\n        break;\n      }\n\n      return;\n    }\n\n    // a watch on lock path in zookeeper has fired. so something has changed on\n    // the lock. ideally we should check that the path is the same as the lock\n    // path but trusting zookeeper for now\n    String path \u003d event.getPath();\n    if (path !\u003d null) {\n      switch (eventType) {\n      case NodeDeleted:\n        if (state \u003d\u003d State.ACTIVE) {\n          enterNeutralMode();\n        }\n        joinElectionInternal();\n        break;\n      case NodeDataChanged:\n        monitorActiveStatus();\n        break;\n      default:\n        LOG.debug(\"Unexpected node event: \" + eventType + \" for path: \" + path);\n        monitorActiveStatus();\n      }\n\n      return;\n    }\n\n    // some unexpected error has occurred\n    fatalError(\"Unexpected watch error from Zookeeper\");\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java",
          "extendedDetails": {}
        }
      ]
    },
    "cbfe8fea0ee9753b1f79dd8bb9a2972d0539e9ec": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7992. Add ZKClient library to facilitate leader election. Contributed by Bikas Saha.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1235841 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/01/12 9:26 AM",
      "commitName": "cbfe8fea0ee9753b1f79dd8bb9a2972d0539e9ec",
      "commitAuthor": "Suresh Srinivas",
      "diff": "@@ -0,0 +1,70 @@\n+  public synchronized void process(WatchedEvent event) {\n+    Event.EventType eventType \u003d event.getType();\n+    LOG.debug(\"Watcher event type: \" + eventType + \" with state:\"\n+        + event.getState() + \" for path:\" + event.getPath()\n+        + \" connectionState: \" + zkConnectionState);\n+    if (zkClient \u003d\u003d null) {\n+      // zkClient is nulled before closing the connection\n+      // this is the callback with session expired after we closed the session\n+      return;\n+    }\n+\n+    if (eventType \u003d\u003d Event.EventType.None) {\n+      // the connection state has changed\n+      switch (event.getState()) {\n+      case SyncConnected:\n+        // if the listener was asked to move to safe state then it needs to\n+        // be undone\n+        ConnectionState prevConnectionState \u003d zkConnectionState;\n+        zkConnectionState \u003d ConnectionState.CONNECTED;\n+        if (prevConnectionState \u003d\u003d ConnectionState.DISCONNECTED) {\n+          monitorActiveStatus();\n+        }\n+        break;\n+      case Disconnected:\n+        // ask the app to move to safe state because zookeeper connection\n+        // is not active and we dont know our state\n+        zkConnectionState \u003d ConnectionState.DISCONNECTED;\n+        enterNeutralMode();\n+        break;\n+      case Expired:\n+        // the connection got terminated because of session timeout\n+        // call listener to reconnect\n+        enterNeutralMode();\n+        reJoinElection();\n+        break;\n+      default:\n+        fatalError(\"Unexpected Zookeeper watch event state: \"\n+            + event.getState());\n+        break;\n+      }\n+\n+      return;\n+    }\n+\n+    // a watch on lock path in zookeeper has fired. so something has changed on\n+    // the lock. ideally we should check that the path is the same as the lock\n+    // path but trusting zookeeper for now\n+    String path \u003d event.getPath();\n+    if (path !\u003d null) {\n+      switch (eventType) {\n+      case NodeDeleted:\n+        if (state \u003d\u003d State.ACTIVE) {\n+          enterNeutralMode();\n+        }\n+        joinElectionInternal();\n+        break;\n+      case NodeDataChanged:\n+        monitorActiveStatus();\n+        break;\n+      default:\n+        LOG.debug(\"Unexpected node event: \" + eventType + \" for path: \" + path);\n+        monitorActiveStatus();\n+      }\n+\n+      return;\n+    }\n+\n+    // some unexpected error has occurred\n+    fatalError(\"Unexpected watch error from Zookeeper\");\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void process(WatchedEvent event) {\n    Event.EventType eventType \u003d event.getType();\n    LOG.debug(\"Watcher event type: \" + eventType + \" with state:\"\n        + event.getState() + \" for path:\" + event.getPath()\n        + \" connectionState: \" + zkConnectionState);\n    if (zkClient \u003d\u003d null) {\n      // zkClient is nulled before closing the connection\n      // this is the callback with session expired after we closed the session\n      return;\n    }\n\n    if (eventType \u003d\u003d Event.EventType.None) {\n      // the connection state has changed\n      switch (event.getState()) {\n      case SyncConnected:\n        // if the listener was asked to move to safe state then it needs to\n        // be undone\n        ConnectionState prevConnectionState \u003d zkConnectionState;\n        zkConnectionState \u003d ConnectionState.CONNECTED;\n        if (prevConnectionState \u003d\u003d ConnectionState.DISCONNECTED) {\n          monitorActiveStatus();\n        }\n        break;\n      case Disconnected:\n        // ask the app to move to safe state because zookeeper connection\n        // is not active and we dont know our state\n        zkConnectionState \u003d ConnectionState.DISCONNECTED;\n        enterNeutralMode();\n        break;\n      case Expired:\n        // the connection got terminated because of session timeout\n        // call listener to reconnect\n        enterNeutralMode();\n        reJoinElection();\n        break;\n      default:\n        fatalError(\"Unexpected Zookeeper watch event state: \"\n            + event.getState());\n        break;\n      }\n\n      return;\n    }\n\n    // a watch on lock path in zookeeper has fired. so something has changed on\n    // the lock. ideally we should check that the path is the same as the lock\n    // path but trusting zookeeper for now\n    String path \u003d event.getPath();\n    if (path !\u003d null) {\n      switch (eventType) {\n      case NodeDeleted:\n        if (state \u003d\u003d State.ACTIVE) {\n          enterNeutralMode();\n        }\n        joinElectionInternal();\n        break;\n      case NodeDataChanged:\n        monitorActiveStatus();\n        break;\n      default:\n        LOG.debug(\"Unexpected node event: \" + eventType + \" for path: \" + path);\n        monitorActiveStatus();\n      }\n\n      return;\n    }\n\n    // some unexpected error has occurred\n    fatalError(\"Unexpected watch error from Zookeeper\");\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java"
    }
  }
}