{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NativeAzureFileSystem.java",
  "functionName": "getFileStatusInternal",
  "functionId": "getFileStatusInternal___f-Path",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
  "functionStartLine": 2679,
  "functionEndLine": 2742,
  "numCommitsSeen": 66,
  "timeTaken": 2044,
  "changeHistory": [
    "45d9568aaaf532a6da11bd7c1844ff81bf66bab1",
    "9fcc3a1fc8cab873034f5c308ceb2d5671a954e8",
    "9288206cb3c1a39044a8e106436987185ef43ddf"
  ],
  "changeHistoryShort": {
    "45d9568aaaf532a6da11bd7c1844ff81bf66bab1": "Ybodychange",
    "9fcc3a1fc8cab873034f5c308ceb2d5671a954e8": "Ymodifierchange",
    "9288206cb3c1a39044a8e106436987185ef43ddf": "Yintroduced"
  },
  "changeHistoryDetails": {
    "45d9568aaaf532a6da11bd7c1844ff81bf66bab1": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15547/ WASB: improve listStatus performance.\nContributed by Thomas Marquardt.\n\n(cherry picked from commit 749fff577ed9afb4ef8a54b8948f74be083cc620)\n",
      "commitDate": "19/07/18 12:31 PM",
      "commitName": "45d9568aaaf532a6da11bd7c1844ff81bf66bab1",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "27/06/18 10:37 PM",
      "commitNameOld": "2b2399d623539ab68e71a38fa9fbfc9a405bddb8",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 21.58,
      "commitsBetweenForRepo": 124,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,64 @@\n   private FileStatus getFileStatusInternal(Path f) throws FileNotFoundException, IOException {\n \n     Path absolutePath \u003d makeAbsolute(f);\n     String key \u003d pathToKey(absolutePath);\n     if (key.length() \u003d\u003d 0) { // root always exists\n-      return newDirectory(null, absolutePath);\n+      return new FileStatus(\n+          0,\n+          true,\n+          1,\n+          store.getHadoopBlockSize(),\n+          0,\n+          0,\n+          FsPermission.getDefault(), \"\", \"\",\n+          absolutePath.makeQualified(getUri(), getWorkingDirectory()));\n     }\n \n     // The path is either a folder or a file. Retrieve metadata to\n     // determine if it is a directory or file.\n     FileMetadata meta \u003d null;\n     try {\n       meta \u003d store.retrieveMetadata(key);\n     } catch(Exception ex) {\n \n       Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n \n       if (innerException instanceof StorageException\n           \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n \n           throw new FileNotFoundException(String.format(\"%s is not found\", key));\n        }\n \n       throw ex;\n     }\n \n     if (meta !\u003d null) {\n-      if (meta.isDir()) {\n+      if (meta.isDirectory()) {\n         // The path is a folder with files in it.\n         //\n \n         LOG.debug(\"Path {} is a folder.\", f.toString());\n \n         // If a rename operation for the folder was pending, redo it.\n         // Then the file does not exist, so signal that.\n         if (conditionalRedoFolderRename(f)) {\n           throw new FileNotFoundException(\n               absolutePath + \": No such file or directory.\");\n         }\n \n         // Return reference to the directory object.\n-        return newDirectory(meta, absolutePath);\n+        return updateFileStatusPath(meta, absolutePath);\n       }\n \n       // The path is a file.\n       LOG.debug(\"Found the path: {} as a file.\", f.toString());\n \n       // Return with reference to a file object.\n-      return newFile(meta, absolutePath);\n+      return updateFileStatusPath(meta, absolutePath);\n     }\n \n     // File not found. Throw exception no such file or directory.\n     //\n     throw new FileNotFoundException(\n         absolutePath + \": No such file or directory.\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private FileStatus getFileStatusInternal(Path f) throws FileNotFoundException, IOException {\n\n    Path absolutePath \u003d makeAbsolute(f);\n    String key \u003d pathToKey(absolutePath);\n    if (key.length() \u003d\u003d 0) { // root always exists\n      return new FileStatus(\n          0,\n          true,\n          1,\n          store.getHadoopBlockSize(),\n          0,\n          0,\n          FsPermission.getDefault(), \"\", \"\",\n          absolutePath.makeQualified(getUri(), getWorkingDirectory()));\n    }\n\n    // The path is either a folder or a file. Retrieve metadata to\n    // determine if it is a directory or file.\n    FileMetadata meta \u003d null;\n    try {\n      meta \u003d store.retrieveMetadata(key);\n    } catch(Exception ex) {\n\n      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n\n          throw new FileNotFoundException(String.format(\"%s is not found\", key));\n       }\n\n      throw ex;\n    }\n\n    if (meta !\u003d null) {\n      if (meta.isDirectory()) {\n        // The path is a folder with files in it.\n        //\n\n        LOG.debug(\"Path {} is a folder.\", f.toString());\n\n        // If a rename operation for the folder was pending, redo it.\n        // Then the file does not exist, so signal that.\n        if (conditionalRedoFolderRename(f)) {\n          throw new FileNotFoundException(\n              absolutePath + \": No such file or directory.\");\n        }\n\n        // Return reference to the directory object.\n        return updateFileStatusPath(meta, absolutePath);\n      }\n\n      // The path is a file.\n      LOG.debug(\"Found the path: {} as a file.\", f.toString());\n\n      // Return with reference to a file object.\n      return updateFileStatusPath(meta, absolutePath);\n    }\n\n    // File not found. Throw exception no such file or directory.\n    //\n    throw new FileNotFoundException(\n        absolutePath + \": No such file or directory.\");\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "9fcc3a1fc8cab873034f5c308ceb2d5671a954e8": {
      "type": "Ymodifierchange",
      "commitMessage": "HADOOP-14935. Azure: POSIX permissions are taking effect in access() method even when authorization is enabled.\nContributed by Santhosh G Nayak\n",
      "commitDate": "16/10/17 8:01 AM",
      "commitName": "9fcc3a1fc8cab873034f5c308ceb2d5671a954e8",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "11/10/17 10:06 AM",
      "commitNameOld": "3de574413c4d5554213d02bd0ad343ba82cf82aa",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 4.91,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,56 @@\n-  protected FileStatus getFileStatusInternal(Path f) throws FileNotFoundException, IOException {\n+  private FileStatus getFileStatusInternal(Path f) throws FileNotFoundException, IOException {\n \n     Path absolutePath \u003d makeAbsolute(f);\n     String key \u003d pathToKey(absolutePath);\n     if (key.length() \u003d\u003d 0) { // root always exists\n       return newDirectory(null, absolutePath);\n     }\n \n     // The path is either a folder or a file. Retrieve metadata to\n     // determine if it is a directory or file.\n     FileMetadata meta \u003d null;\n     try {\n       meta \u003d store.retrieveMetadata(key);\n     } catch(Exception ex) {\n \n       Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n \n       if (innerException instanceof StorageException\n           \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n \n           throw new FileNotFoundException(String.format(\"%s is not found\", key));\n        }\n \n       throw ex;\n     }\n \n     if (meta !\u003d null) {\n       if (meta.isDir()) {\n         // The path is a folder with files in it.\n         //\n \n         LOG.debug(\"Path {} is a folder.\", f.toString());\n \n         // If a rename operation for the folder was pending, redo it.\n         // Then the file does not exist, so signal that.\n         if (conditionalRedoFolderRename(f)) {\n           throw new FileNotFoundException(\n               absolutePath + \": No such file or directory.\");\n         }\n \n         // Return reference to the directory object.\n         return newDirectory(meta, absolutePath);\n       }\n \n       // The path is a file.\n       LOG.debug(\"Found the path: {} as a file.\", f.toString());\n \n       // Return with reference to a file object.\n       return newFile(meta, absolutePath);\n     }\n \n     // File not found. Throw exception no such file or directory.\n     //\n     throw new FileNotFoundException(\n         absolutePath + \": No such file or directory.\");\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private FileStatus getFileStatusInternal(Path f) throws FileNotFoundException, IOException {\n\n    Path absolutePath \u003d makeAbsolute(f);\n    String key \u003d pathToKey(absolutePath);\n    if (key.length() \u003d\u003d 0) { // root always exists\n      return newDirectory(null, absolutePath);\n    }\n\n    // The path is either a folder or a file. Retrieve metadata to\n    // determine if it is a directory or file.\n    FileMetadata meta \u003d null;\n    try {\n      meta \u003d store.retrieveMetadata(key);\n    } catch(Exception ex) {\n\n      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n\n          throw new FileNotFoundException(String.format(\"%s is not found\", key));\n       }\n\n      throw ex;\n    }\n\n    if (meta !\u003d null) {\n      if (meta.isDir()) {\n        // The path is a folder with files in it.\n        //\n\n        LOG.debug(\"Path {} is a folder.\", f.toString());\n\n        // If a rename operation for the folder was pending, redo it.\n        // Then the file does not exist, so signal that.\n        if (conditionalRedoFolderRename(f)) {\n          throw new FileNotFoundException(\n              absolutePath + \": No such file or directory.\");\n        }\n\n        // Return reference to the directory object.\n        return newDirectory(meta, absolutePath);\n      }\n\n      // The path is a file.\n      LOG.debug(\"Found the path: {} as a file.\", f.toString());\n\n      // Return with reference to a file object.\n      return newFile(meta, absolutePath);\n    }\n\n    // File not found. Throw exception no such file or directory.\n    //\n    throw new FileNotFoundException(\n        absolutePath + \": No such file or directory.\");\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {
        "oldValue": "[protected]",
        "newValue": "[private]"
      }
    },
    "9288206cb3c1a39044a8e106436987185ef43ddf": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-14845. Azure wasb: getFileStatus not making any auth check.\nContributed by Sivaguru Sankaridurg\n",
      "commitDate": "05/10/17 7:05 AM",
      "commitName": "9288206cb3c1a39044a8e106436987185ef43ddf",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,56 @@\n+  protected FileStatus getFileStatusInternal(Path f) throws FileNotFoundException, IOException {\n+\n+    Path absolutePath \u003d makeAbsolute(f);\n+    String key \u003d pathToKey(absolutePath);\n+    if (key.length() \u003d\u003d 0) { // root always exists\n+      return newDirectory(null, absolutePath);\n+    }\n+\n+    // The path is either a folder or a file. Retrieve metadata to\n+    // determine if it is a directory or file.\n+    FileMetadata meta \u003d null;\n+    try {\n+      meta \u003d store.retrieveMetadata(key);\n+    } catch(Exception ex) {\n+\n+      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n+\n+      if (innerException instanceof StorageException\n+          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n+\n+          throw new FileNotFoundException(String.format(\"%s is not found\", key));\n+       }\n+\n+      throw ex;\n+    }\n+\n+    if (meta !\u003d null) {\n+      if (meta.isDir()) {\n+        // The path is a folder with files in it.\n+        //\n+\n+        LOG.debug(\"Path {} is a folder.\", f.toString());\n+\n+        // If a rename operation for the folder was pending, redo it.\n+        // Then the file does not exist, so signal that.\n+        if (conditionalRedoFolderRename(f)) {\n+          throw new FileNotFoundException(\n+              absolutePath + \": No such file or directory.\");\n+        }\n+\n+        // Return reference to the directory object.\n+        return newDirectory(meta, absolutePath);\n+      }\n+\n+      // The path is a file.\n+      LOG.debug(\"Found the path: {} as a file.\", f.toString());\n+\n+      // Return with reference to a file object.\n+      return newFile(meta, absolutePath);\n+    }\n+\n+    // File not found. Throw exception no such file or directory.\n+    //\n+    throw new FileNotFoundException(\n+        absolutePath + \": No such file or directory.\");\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected FileStatus getFileStatusInternal(Path f) throws FileNotFoundException, IOException {\n\n    Path absolutePath \u003d makeAbsolute(f);\n    String key \u003d pathToKey(absolutePath);\n    if (key.length() \u003d\u003d 0) { // root always exists\n      return newDirectory(null, absolutePath);\n    }\n\n    // The path is either a folder or a file. Retrieve metadata to\n    // determine if it is a directory or file.\n    FileMetadata meta \u003d null;\n    try {\n      meta \u003d store.retrieveMetadata(key);\n    } catch(Exception ex) {\n\n      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n\n          throw new FileNotFoundException(String.format(\"%s is not found\", key));\n       }\n\n      throw ex;\n    }\n\n    if (meta !\u003d null) {\n      if (meta.isDir()) {\n        // The path is a folder with files in it.\n        //\n\n        LOG.debug(\"Path {} is a folder.\", f.toString());\n\n        // If a rename operation for the folder was pending, redo it.\n        // Then the file does not exist, so signal that.\n        if (conditionalRedoFolderRename(f)) {\n          throw new FileNotFoundException(\n              absolutePath + \": No such file or directory.\");\n        }\n\n        // Return reference to the directory object.\n        return newDirectory(meta, absolutePath);\n      }\n\n      // The path is a file.\n      LOG.debug(\"Found the path: {} as a file.\", f.toString());\n\n      // Return with reference to a file object.\n      return newFile(meta, absolutePath);\n    }\n\n    // File not found. Throw exception no such file or directory.\n    //\n    throw new FileNotFoundException(\n        absolutePath + \": No such file or directory.\");\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java"
    }
  }
}