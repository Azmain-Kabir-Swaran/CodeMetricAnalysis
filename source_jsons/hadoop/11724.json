{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PmemVolumeManager.java",
  "functionName": "recoverCache",
  "functionId": "recoverCache___bpid-String__cacheLoader-MappableBlockLoader",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/PmemVolumeManager.java",
  "functionStartLine": 285,
  "functionEndLine": 311,
  "numCommitsSeen": 4,
  "timeTaken": 1520,
  "changeHistory": [
    "d79cce20abbbf321f6dcce03f4087544124a7cd2"
  ],
  "changeHistoryShort": {
    "d79cce20abbbf321f6dcce03f4087544124a7cd2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d79cce20abbbf321f6dcce03f4087544124a7cd2": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-14740. Recover data blocks from persistent memory read cache during datanode restarts. Contributed by Feilong He.\n",
      "commitDate": "01/01/20 10:14 PM",
      "commitName": "d79cce20abbbf321f6dcce03f4087544124a7cd2",
      "commitAuthor": "Rakesh Radhakrishnan",
      "diff": "@@ -0,0 +1,27 @@\n+  public Map\u003cExtendedBlockId, MappableBlock\u003e recoverCache(\n+      String bpid, MappableBlockLoader cacheLoader) throws IOException {\n+    final Map\u003cExtendedBlockId, MappableBlock\u003e keyToMappableBlock\n+        \u003d new ConcurrentHashMap\u003c\u003e();\n+    for (byte volumeIndex \u003d 0; volumeIndex \u003c pmemVolumes.size();\n+         volumeIndex++) {\n+      long maxBytes \u003d usedBytesCounts.get(volumeIndex).getMaxBytes();\n+      long usedBytes \u003d 0;\n+      File cacheDir \u003d new File(pmemVolumes.get(volumeIndex), bpid);\n+      Collection\u003cFile\u003e cachedFileList \u003d FileUtils.listFiles(cacheDir,\n+          TrueFileFilter.INSTANCE, TrueFileFilter.INSTANCE);\n+      // Scan the cached files in pmem volumes for cache recovery.\n+      for (File cachedFile : cachedFileList) {\n+        MappableBlock mappableBlock \u003d cacheLoader.\n+            getRecoveredMappableBlock(cachedFile, bpid, volumeIndex);\n+        ExtendedBlockId key \u003d mappableBlock.getKey();\n+        keyToMappableBlock.put(key, mappableBlock);\n+        usedBytes +\u003d cachedFile.length();\n+      }\n+      // Update maxBytes and cache capacity according to cache space\n+      // used by recovered cached files.\n+      usedBytesCounts.get(volumeIndex).setMaxBytes(maxBytes + usedBytes);\n+      cacheCapacity +\u003d usedBytes;\n+      usedBytesCounts.get(volumeIndex).reserve(usedBytes);\n+    }\n+    return keyToMappableBlock;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Map\u003cExtendedBlockId, MappableBlock\u003e recoverCache(\n      String bpid, MappableBlockLoader cacheLoader) throws IOException {\n    final Map\u003cExtendedBlockId, MappableBlock\u003e keyToMappableBlock\n        \u003d new ConcurrentHashMap\u003c\u003e();\n    for (byte volumeIndex \u003d 0; volumeIndex \u003c pmemVolumes.size();\n         volumeIndex++) {\n      long maxBytes \u003d usedBytesCounts.get(volumeIndex).getMaxBytes();\n      long usedBytes \u003d 0;\n      File cacheDir \u003d new File(pmemVolumes.get(volumeIndex), bpid);\n      Collection\u003cFile\u003e cachedFileList \u003d FileUtils.listFiles(cacheDir,\n          TrueFileFilter.INSTANCE, TrueFileFilter.INSTANCE);\n      // Scan the cached files in pmem volumes for cache recovery.\n      for (File cachedFile : cachedFileList) {\n        MappableBlock mappableBlock \u003d cacheLoader.\n            getRecoveredMappableBlock(cachedFile, bpid, volumeIndex);\n        ExtendedBlockId key \u003d mappableBlock.getKey();\n        keyToMappableBlock.put(key, mappableBlock);\n        usedBytes +\u003d cachedFile.length();\n      }\n      // Update maxBytes and cache capacity according to cache space\n      // used by recovered cached files.\n      usedBytesCounts.get(volumeIndex).setMaxBytes(maxBytes + usedBytes);\n      cacheCapacity +\u003d usedBytes;\n      usedBytesCounts.get(volumeIndex).reserve(usedBytes);\n    }\n    return keyToMappableBlock;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/PmemVolumeManager.java"
    }
  }
}