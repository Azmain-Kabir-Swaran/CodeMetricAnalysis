{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TrashPolicyDefault.java",
  "functionName": "run",
  "functionId": "run",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/TrashPolicyDefault.java",
  "functionStartLine": 271,
  "functionEndLine": 312,
  "numCommitsSeen": 45,
  "timeTaken": 3109,
  "changeHistory": [
    "f86de6f76a3079c2655df9b242fc968edfb17b9d",
    "686c0141eff0886c285b8e52fddade43c1ce4570",
    "0fb14aaced7afdbbb72e59316c186ebf6ec2d091",
    "cbc7b6bf97a80c39d4bbb3005e42dacae6726baf",
    "af78767870b8296886c03f8be24cf13a4e2bd4b0",
    "47dfcf45afb75dfcb45fe440a25e5a5c17a4fa1e",
    "4a5ba3b7bd2360fd9605863630b477d362874e1e",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "184ff33de5598b04bf968ea3b113b175a4225b82",
    "1191be630ff05c9f1a540b952a8e34665f7fc181",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "7578282edce0eba3f24c96355c944c02156ece79",
    "175a92850d8207ae5231632f915767033b035c5f",
    "76a77aea78301c6b632d06d20520abc8a21d4cb0",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "f86de6f76a3079c2655df9b242fc968edfb17b9d": "Ybodychange",
    "686c0141eff0886c285b8e52fddade43c1ce4570": "Ybodychange",
    "0fb14aaced7afdbbb72e59316c186ebf6ec2d091": "Ybodychange",
    "cbc7b6bf97a80c39d4bbb3005e42dacae6726baf": "Ybodychange",
    "af78767870b8296886c03f8be24cf13a4e2bd4b0": "Ybodychange",
    "47dfcf45afb75dfcb45fe440a25e5a5c17a4fa1e": "Ybodychange",
    "4a5ba3b7bd2360fd9605863630b477d362874e1e": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "184ff33de5598b04bf968ea3b113b175a4225b82": "Ymultichange(Ymovefromfile,Ybodychange)",
    "1191be630ff05c9f1a540b952a8e34665f7fc181": "Ybodychange",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "7578282edce0eba3f24c96355c944c02156ece79": "Ybodychange",
    "175a92850d8207ae5231632f915767033b035c5f": "Ybodychange",
    "76a77aea78301c6b632d06d20520abc8a21d4cb0": "Ybodychange",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f86de6f76a3079c2655df9b242fc968edfb17b9d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13529. Fix default trash policy emptier trigger time correctly. Contributed by He Xiaoqiao.\n\nSigned-off-by: Wei-Chiu Chuang \u003cweichiu@apache.org\u003e\n",
      "commitDate": "01/08/19 2:54 PM",
      "commitName": "f86de6f76a3079c2655df9b242fc968edfb17b9d",
      "commitAuthor": "He Xiaoqiao",
      "commitDateOld": "05/03/19 6:09 AM",
      "commitNameOld": "686c0141eff0886c285b8e52fddade43c1ce4570",
      "commitAuthorOld": "Stephen O\u0027Donnell",
      "daysBetweenCommits": 149.32,
      "commitsBetweenForRepo": 1068,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n     public void run() {\n       if (emptierInterval \u003d\u003d 0)\n         return;                                   // trash disabled\n-      long now \u003d Time.now();\n-      long end;\n+      long now, end;\n       while (true) {\n+        now \u003d Time.now();\n         end \u003d ceiling(now, emptierInterval);\n         try {                                     // sleep for interval\n           Thread.sleep(end - now);\n         } catch (InterruptedException e) {\n           break;                                  // exit on interrupt\n         }\n \n         try {\n           now \u003d Time.now();\n           if (now \u003e\u003d end) {\n             Collection\u003cFileStatus\u003e trashRoots;\n             trashRoots \u003d fs.getTrashRoots(true);      // list all trash dirs\n \n             for (FileStatus trashRoot : trashRoots) {   // dump each trash\n               if (!trashRoot.isDirectory())\n                 continue;\n               try {\n                 TrashPolicyDefault trash \u003d new TrashPolicyDefault(fs, conf);\n                 trash.deleteCheckpoint(trashRoot.getPath(), false);\n                 trash.createCheckpoint(trashRoot.getPath(), new Date(now));\n               } catch (IOException e) {\n                 LOG.warn(\"Trash caught: \"+e+\". Skipping \" +\n                     trashRoot.getPath() + \".\");\n               } \n             }\n           }\n         } catch (Exception e) {\n           LOG.warn(\"RuntimeException during Trash.Emptier.run(): \", e); \n         }\n       }\n       try {\n         fs.close();\n       } catch(IOException e) {\n         LOG.warn(\"Trash cannot close FileSystem: \", e);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      if (emptierInterval \u003d\u003d 0)\n        return;                                   // trash disabled\n      long now, end;\n      while (true) {\n        now \u003d Time.now();\n        end \u003d ceiling(now, emptierInterval);\n        try {                                     // sleep for interval\n          Thread.sleep(end - now);\n        } catch (InterruptedException e) {\n          break;                                  // exit on interrupt\n        }\n\n        try {\n          now \u003d Time.now();\n          if (now \u003e\u003d end) {\n            Collection\u003cFileStatus\u003e trashRoots;\n            trashRoots \u003d fs.getTrashRoots(true);      // list all trash dirs\n\n            for (FileStatus trashRoot : trashRoots) {   // dump each trash\n              if (!trashRoot.isDirectory())\n                continue;\n              try {\n                TrashPolicyDefault trash \u003d new TrashPolicyDefault(fs, conf);\n                trash.deleteCheckpoint(trashRoot.getPath(), false);\n                trash.createCheckpoint(trashRoot.getPath(), new Date(now));\n              } catch (IOException e) {\n                LOG.warn(\"Trash caught: \"+e+\". Skipping \" +\n                    trashRoot.getPath() + \".\");\n              } \n            }\n          }\n        } catch (Exception e) {\n          LOG.warn(\"RuntimeException during Trash.Emptier.run(): \", e); \n        }\n      }\n      try {\n        fs.close();\n      } catch(IOException e) {\n        LOG.warn(\"Trash cannot close FileSystem: \", e);\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/TrashPolicyDefault.java",
      "extendedDetails": {}
    },
    "686c0141eff0886c285b8e52fddade43c1ce4570": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16140. hadoop fs expunge to add -immediate option to purge trash immediately.\n\nContributed by Stephen O\u0027Donnell.\n\nSigned-off-by: Steve Loughran \u003cstevel@apache.org\u003e\n",
      "commitDate": "05/03/19 6:09 AM",
      "commitName": "686c0141eff0886c285b8e52fddade43c1ce4570",
      "commitAuthor": "Stephen O\u0027Donnell",
      "commitDateOld": "19/09/18 9:01 PM",
      "commitNameOld": "7ad27e97f05b13b33fdcef9cb63ace9c1728bfb5",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 166.42,
      "commitsBetweenForRepo": 1257,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n     public void run() {\n       if (emptierInterval \u003d\u003d 0)\n         return;                                   // trash disabled\n       long now \u003d Time.now();\n       long end;\n       while (true) {\n         end \u003d ceiling(now, emptierInterval);\n         try {                                     // sleep for interval\n           Thread.sleep(end - now);\n         } catch (InterruptedException e) {\n           break;                                  // exit on interrupt\n         }\n \n         try {\n           now \u003d Time.now();\n           if (now \u003e\u003d end) {\n             Collection\u003cFileStatus\u003e trashRoots;\n             trashRoots \u003d fs.getTrashRoots(true);      // list all trash dirs\n \n             for (FileStatus trashRoot : trashRoots) {   // dump each trash\n               if (!trashRoot.isDirectory())\n                 continue;\n               try {\n                 TrashPolicyDefault trash \u003d new TrashPolicyDefault(fs, conf);\n-                trash.deleteCheckpoint(trashRoot.getPath());\n+                trash.deleteCheckpoint(trashRoot.getPath(), false);\n                 trash.createCheckpoint(trashRoot.getPath(), new Date(now));\n               } catch (IOException e) {\n                 LOG.warn(\"Trash caught: \"+e+\". Skipping \" +\n                     trashRoot.getPath() + \".\");\n               } \n             }\n           }\n         } catch (Exception e) {\n           LOG.warn(\"RuntimeException during Trash.Emptier.run(): \", e); \n         }\n       }\n       try {\n         fs.close();\n       } catch(IOException e) {\n         LOG.warn(\"Trash cannot close FileSystem: \", e);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      if (emptierInterval \u003d\u003d 0)\n        return;                                   // trash disabled\n      long now \u003d Time.now();\n      long end;\n      while (true) {\n        end \u003d ceiling(now, emptierInterval);\n        try {                                     // sleep for interval\n          Thread.sleep(end - now);\n        } catch (InterruptedException e) {\n          break;                                  // exit on interrupt\n        }\n\n        try {\n          now \u003d Time.now();\n          if (now \u003e\u003d end) {\n            Collection\u003cFileStatus\u003e trashRoots;\n            trashRoots \u003d fs.getTrashRoots(true);      // list all trash dirs\n\n            for (FileStatus trashRoot : trashRoots) {   // dump each trash\n              if (!trashRoot.isDirectory())\n                continue;\n              try {\n                TrashPolicyDefault trash \u003d new TrashPolicyDefault(fs, conf);\n                trash.deleteCheckpoint(trashRoot.getPath(), false);\n                trash.createCheckpoint(trashRoot.getPath(), new Date(now));\n              } catch (IOException e) {\n                LOG.warn(\"Trash caught: \"+e+\". Skipping \" +\n                    trashRoot.getPath() + \".\");\n              } \n            }\n          }\n        } catch (Exception e) {\n          LOG.warn(\"RuntimeException during Trash.Emptier.run(): \", e); \n        }\n      }\n      try {\n        fs.close();\n      } catch(IOException e) {\n        LOG.warn(\"Trash cannot close FileSystem: \", e);\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/TrashPolicyDefault.java",
      "extendedDetails": {}
    },
    "0fb14aaced7afdbbb72e59316c186ebf6ec2d091": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9799. Reimplement getCurrentTrashDir to remove incompatibility. (zhz)\n\nChange-Id: I7834bcebffed38cb384db5395ddb8b6dd9e79a0b\n",
      "commitDate": "17/02/16 1:30 PM",
      "commitName": "0fb14aaced7afdbbb72e59316c186ebf6ec2d091",
      "commitAuthor": "Zhe Zhang",
      "commitDateOld": "04/12/15 10:39 AM",
      "commitNameOld": "cbc7b6bf97a80c39d4bbb3005e42dacae6726baf",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 75.12,
      "commitsBetweenForRepo": 464,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,42 @@\n     public void run() {\n       if (emptierInterval \u003d\u003d 0)\n         return;                                   // trash disabled\n       long now \u003d Time.now();\n       long end;\n       while (true) {\n         end \u003d ceiling(now, emptierInterval);\n         try {                                     // sleep for interval\n           Thread.sleep(end - now);\n         } catch (InterruptedException e) {\n           break;                                  // exit on interrupt\n         }\n \n         try {\n           now \u003d Time.now();\n           if (now \u003e\u003d end) {\n             Collection\u003cFileStatus\u003e trashRoots;\n-            try {\n-              trashRoots \u003d fs.getTrashRoots(true);      // list all home dirs\n-            } catch (IOException e) {\n-              LOG.warn(\"Trash can\u0027t list all trash roots: \"+e+\" Sleeping.\");\n-              continue;\n-            }\n+            trashRoots \u003d fs.getTrashRoots(true);      // list all trash dirs\n \n             for (FileStatus trashRoot : trashRoots) {   // dump each trash\n               if (!trashRoot.isDirectory())\n                 continue;\n               try {\n                 TrashPolicyDefault trash \u003d new TrashPolicyDefault(fs, conf);\n                 trash.deleteCheckpoint(trashRoot.getPath());\n                 trash.createCheckpoint(trashRoot.getPath(), new Date(now));\n               } catch (IOException e) {\n                 LOG.warn(\"Trash caught: \"+e+\". Skipping \" +\n                     trashRoot.getPath() + \".\");\n               } \n             }\n           }\n         } catch (Exception e) {\n           LOG.warn(\"RuntimeException during Trash.Emptier.run(): \", e); \n         }\n       }\n       try {\n         fs.close();\n       } catch(IOException e) {\n         LOG.warn(\"Trash cannot close FileSystem: \", e);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      if (emptierInterval \u003d\u003d 0)\n        return;                                   // trash disabled\n      long now \u003d Time.now();\n      long end;\n      while (true) {\n        end \u003d ceiling(now, emptierInterval);\n        try {                                     // sleep for interval\n          Thread.sleep(end - now);\n        } catch (InterruptedException e) {\n          break;                                  // exit on interrupt\n        }\n\n        try {\n          now \u003d Time.now();\n          if (now \u003e\u003d end) {\n            Collection\u003cFileStatus\u003e trashRoots;\n            trashRoots \u003d fs.getTrashRoots(true);      // list all trash dirs\n\n            for (FileStatus trashRoot : trashRoots) {   // dump each trash\n              if (!trashRoot.isDirectory())\n                continue;\n              try {\n                TrashPolicyDefault trash \u003d new TrashPolicyDefault(fs, conf);\n                trash.deleteCheckpoint(trashRoot.getPath());\n                trash.createCheckpoint(trashRoot.getPath(), new Date(now));\n              } catch (IOException e) {\n                LOG.warn(\"Trash caught: \"+e+\". Skipping \" +\n                    trashRoot.getPath() + \".\");\n              } \n            }\n          }\n        } catch (Exception e) {\n          LOG.warn(\"RuntimeException during Trash.Emptier.run(): \", e); \n        }\n      }\n      try {\n        fs.close();\n      } catch(IOException e) {\n        LOG.warn(\"Trash cannot close FileSystem: \", e);\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/TrashPolicyDefault.java",
      "extendedDetails": {}
    },
    "cbc7b6bf97a80c39d4bbb3005e42dacae6726baf": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8831. Trash Support for deletion in HDFS encryption zone. Contributed by Xiaoyu Yao.\n",
      "commitDate": "04/12/15 10:39 AM",
      "commitName": "cbc7b6bf97a80c39d4bbb3005e42dacae6726baf",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "24/08/15 10:51 PM",
      "commitNameOld": "af78767870b8296886c03f8be24cf13a4e2bd4b0",
      "commitAuthorOld": "Harsh J",
      "daysBetweenCommits": 101.53,
      "commitsBetweenForRepo": 748,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,47 @@\n     public void run() {\n       if (emptierInterval \u003d\u003d 0)\n         return;                                   // trash disabled\n       long now \u003d Time.now();\n       long end;\n       while (true) {\n         end \u003d ceiling(now, emptierInterval);\n         try {                                     // sleep for interval\n           Thread.sleep(end - now);\n         } catch (InterruptedException e) {\n           break;                                  // exit on interrupt\n         }\n \n         try {\n           now \u003d Time.now();\n           if (now \u003e\u003d end) {\n-\n-            FileStatus[] homes \u003d null;\n+            Collection\u003cFileStatus\u003e trashRoots;\n             try {\n-              homes \u003d fs.listStatus(homesParent);         // list all home dirs\n+              trashRoots \u003d fs.getTrashRoots(true);      // list all home dirs\n             } catch (IOException e) {\n-              LOG.warn(\"Trash can\u0027t list homes: \"+e+\" Sleeping.\");\n+              LOG.warn(\"Trash can\u0027t list all trash roots: \"+e+\" Sleeping.\");\n               continue;\n             }\n \n-            for (FileStatus home : homes) {         // dump each trash\n-              if (!home.isDirectory())\n+            for (FileStatus trashRoot : trashRoots) {   // dump each trash\n+              if (!trashRoot.isDirectory())\n                 continue;\n               try {\n-                TrashPolicyDefault trash \u003d new TrashPolicyDefault(\n-                    fs, home.getPath(), conf);\n-                trash.deleteCheckpoint();\n-                trash.createCheckpoint(new Date(now));\n+                TrashPolicyDefault trash \u003d new TrashPolicyDefault(fs, conf);\n+                trash.deleteCheckpoint(trashRoot.getPath());\n+                trash.createCheckpoint(trashRoot.getPath(), new Date(now));\n               } catch (IOException e) {\n-                LOG.warn(\"Trash caught: \"+e+\". Skipping \"+home.getPath()+\".\");\n+                LOG.warn(\"Trash caught: \"+e+\". Skipping \" +\n+                    trashRoot.getPath() + \".\");\n               } \n             }\n           }\n         } catch (Exception e) {\n           LOG.warn(\"RuntimeException during Trash.Emptier.run(): \", e); \n         }\n       }\n       try {\n         fs.close();\n       } catch(IOException e) {\n         LOG.warn(\"Trash cannot close FileSystem: \", e);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      if (emptierInterval \u003d\u003d 0)\n        return;                                   // trash disabled\n      long now \u003d Time.now();\n      long end;\n      while (true) {\n        end \u003d ceiling(now, emptierInterval);\n        try {                                     // sleep for interval\n          Thread.sleep(end - now);\n        } catch (InterruptedException e) {\n          break;                                  // exit on interrupt\n        }\n\n        try {\n          now \u003d Time.now();\n          if (now \u003e\u003d end) {\n            Collection\u003cFileStatus\u003e trashRoots;\n            try {\n              trashRoots \u003d fs.getTrashRoots(true);      // list all home dirs\n            } catch (IOException e) {\n              LOG.warn(\"Trash can\u0027t list all trash roots: \"+e+\" Sleeping.\");\n              continue;\n            }\n\n            for (FileStatus trashRoot : trashRoots) {   // dump each trash\n              if (!trashRoot.isDirectory())\n                continue;\n              try {\n                TrashPolicyDefault trash \u003d new TrashPolicyDefault(fs, conf);\n                trash.deleteCheckpoint(trashRoot.getPath());\n                trash.createCheckpoint(trashRoot.getPath(), new Date(now));\n              } catch (IOException e) {\n                LOG.warn(\"Trash caught: \"+e+\". Skipping \" +\n                    trashRoot.getPath() + \".\");\n              } \n            }\n          }\n        } catch (Exception e) {\n          LOG.warn(\"RuntimeException during Trash.Emptier.run(): \", e); \n        }\n      }\n      try {\n        fs.close();\n      } catch(IOException e) {\n        LOG.warn(\"Trash cannot close FileSystem: \", e);\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/TrashPolicyDefault.java",
      "extendedDetails": {}
    },
    "af78767870b8296886c03f8be24cf13a4e2bd4b0": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12352. Delay in checkpointing Trash can leave trash for 2 intervals before deleting. Contributed by Casey Brotherton.\n",
      "commitDate": "24/08/15 10:51 PM",
      "commitName": "af78767870b8296886c03f8be24cf13a4e2bd4b0",
      "commitAuthor": "Harsh J",
      "commitDateOld": "29/05/15 4:21 AM",
      "commitNameOld": "7366e4256395ed7550702275d0d9f2674bd43d6c",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 87.77,
      "commitsBetweenForRepo": 530,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n     public void run() {\n       if (emptierInterval \u003d\u003d 0)\n         return;                                   // trash disabled\n       long now \u003d Time.now();\n       long end;\n       while (true) {\n         end \u003d ceiling(now, emptierInterval);\n         try {                                     // sleep for interval\n           Thread.sleep(end - now);\n         } catch (InterruptedException e) {\n           break;                                  // exit on interrupt\n         }\n \n         try {\n           now \u003d Time.now();\n           if (now \u003e\u003d end) {\n \n             FileStatus[] homes \u003d null;\n             try {\n               homes \u003d fs.listStatus(homesParent);         // list all home dirs\n             } catch (IOException e) {\n               LOG.warn(\"Trash can\u0027t list homes: \"+e+\" Sleeping.\");\n               continue;\n             }\n \n             for (FileStatus home : homes) {         // dump each trash\n               if (!home.isDirectory())\n                 continue;\n               try {\n                 TrashPolicyDefault trash \u003d new TrashPolicyDefault(\n                     fs, home.getPath(), conf);\n                 trash.deleteCheckpoint();\n-                trash.createCheckpoint();\n+                trash.createCheckpoint(new Date(now));\n               } catch (IOException e) {\n                 LOG.warn(\"Trash caught: \"+e+\". Skipping \"+home.getPath()+\".\");\n               } \n             }\n           }\n         } catch (Exception e) {\n           LOG.warn(\"RuntimeException during Trash.Emptier.run(): \", e); \n         }\n       }\n       try {\n         fs.close();\n       } catch(IOException e) {\n         LOG.warn(\"Trash cannot close FileSystem: \", e);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      if (emptierInterval \u003d\u003d 0)\n        return;                                   // trash disabled\n      long now \u003d Time.now();\n      long end;\n      while (true) {\n        end \u003d ceiling(now, emptierInterval);\n        try {                                     // sleep for interval\n          Thread.sleep(end - now);\n        } catch (InterruptedException e) {\n          break;                                  // exit on interrupt\n        }\n\n        try {\n          now \u003d Time.now();\n          if (now \u003e\u003d end) {\n\n            FileStatus[] homes \u003d null;\n            try {\n              homes \u003d fs.listStatus(homesParent);         // list all home dirs\n            } catch (IOException e) {\n              LOG.warn(\"Trash can\u0027t list homes: \"+e+\" Sleeping.\");\n              continue;\n            }\n\n            for (FileStatus home : homes) {         // dump each trash\n              if (!home.isDirectory())\n                continue;\n              try {\n                TrashPolicyDefault trash \u003d new TrashPolicyDefault(\n                    fs, home.getPath(), conf);\n                trash.deleteCheckpoint();\n                trash.createCheckpoint(new Date(now));\n              } catch (IOException e) {\n                LOG.warn(\"Trash caught: \"+e+\". Skipping \"+home.getPath()+\".\");\n              } \n            }\n          }\n        } catch (Exception e) {\n          LOG.warn(\"RuntimeException during Trash.Emptier.run(): \", e); \n        }\n      }\n      try {\n        fs.close();\n      } catch(IOException e) {\n        LOG.warn(\"Trash cannot close FileSystem: \", e);\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/TrashPolicyDefault.java",
      "extendedDetails": {}
    },
    "47dfcf45afb75dfcb45fe440a25e5a5c17a4fa1e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3972. Trash emptier fails in secure HA cluster. Contributed by Todd Lipcon\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1390729 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/09/12 2:25 PM",
      "commitName": "47dfcf45afb75dfcb45fe440a25e5a5c17a4fa1e",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "26/09/12 10:14 AM",
      "commitNameOld": "6ddbb22567bf6bb07cd3d84c7c5a34deaa22e691",
      "commitAuthorOld": "Jason Darrell Lowe",
      "daysBetweenCommits": 0.17,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,48 @@\n     public void run() {\n       if (emptierInterval \u003d\u003d 0)\n         return;                                   // trash disabled\n       long now \u003d Time.now();\n       long end;\n       while (true) {\n         end \u003d ceiling(now, emptierInterval);\n         try {                                     // sleep for interval\n           Thread.sleep(end - now);\n         } catch (InterruptedException e) {\n           break;                                  // exit on interrupt\n         }\n \n         try {\n           now \u003d Time.now();\n           if (now \u003e\u003d end) {\n \n             FileStatus[] homes \u003d null;\n             try {\n               homes \u003d fs.listStatus(homesParent);         // list all home dirs\n             } catch (IOException e) {\n               LOG.warn(\"Trash can\u0027t list homes: \"+e+\" Sleeping.\");\n               continue;\n             }\n \n             for (FileStatus home : homes) {         // dump each trash\n               if (!home.isDirectory())\n                 continue;\n               try {\n-                TrashPolicyDefault trash \u003d new TrashPolicyDefault(home.getPath(), conf);\n+                TrashPolicyDefault trash \u003d new TrashPolicyDefault(\n+                    fs, home.getPath(), conf);\n                 trash.deleteCheckpoint();\n                 trash.createCheckpoint();\n               } catch (IOException e) {\n                 LOG.warn(\"Trash caught: \"+e+\". Skipping \"+home.getPath()+\".\");\n               } \n             }\n           }\n         } catch (Exception e) {\n           LOG.warn(\"RuntimeException during Trash.Emptier.run(): \", e); \n         }\n       }\n       try {\n         fs.close();\n       } catch(IOException e) {\n         LOG.warn(\"Trash cannot close FileSystem: \", e);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      if (emptierInterval \u003d\u003d 0)\n        return;                                   // trash disabled\n      long now \u003d Time.now();\n      long end;\n      while (true) {\n        end \u003d ceiling(now, emptierInterval);\n        try {                                     // sleep for interval\n          Thread.sleep(end - now);\n        } catch (InterruptedException e) {\n          break;                                  // exit on interrupt\n        }\n\n        try {\n          now \u003d Time.now();\n          if (now \u003e\u003d end) {\n\n            FileStatus[] homes \u003d null;\n            try {\n              homes \u003d fs.listStatus(homesParent);         // list all home dirs\n            } catch (IOException e) {\n              LOG.warn(\"Trash can\u0027t list homes: \"+e+\" Sleeping.\");\n              continue;\n            }\n\n            for (FileStatus home : homes) {         // dump each trash\n              if (!home.isDirectory())\n                continue;\n              try {\n                TrashPolicyDefault trash \u003d new TrashPolicyDefault(\n                    fs, home.getPath(), conf);\n                trash.deleteCheckpoint();\n                trash.createCheckpoint();\n              } catch (IOException e) {\n                LOG.warn(\"Trash caught: \"+e+\". Skipping \"+home.getPath()+\".\");\n              } \n            }\n          }\n        } catch (Exception e) {\n          LOG.warn(\"RuntimeException during Trash.Emptier.run(): \", e); \n        }\n      }\n      try {\n        fs.close();\n      } catch(IOException e) {\n        LOG.warn(\"Trash cannot close FileSystem: \", e);\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/TrashPolicyDefault.java",
      "extendedDetails": {}
    },
    "4a5ba3b7bd2360fd9605863630b477d362874e1e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3641. Move server Util time methods to common and use now instead of System#currentTimeMillis. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1360858 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/07/12 12:01 PM",
      "commitName": "4a5ba3b7bd2360fd9605863630b477d362874e1e",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "03/07/12 12:59 PM",
      "commitNameOld": "3c2101ae4a65af4b68a08651c27966490e8fbef0",
      "commitAuthorOld": "Daryn Sharp",
      "daysBetweenCommits": 8.96,
      "commitsBetweenForRepo": 59,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n     public void run() {\n       if (emptierInterval \u003d\u003d 0)\n         return;                                   // trash disabled\n-      long now \u003d System.currentTimeMillis();\n+      long now \u003d Time.now();\n       long end;\n       while (true) {\n         end \u003d ceiling(now, emptierInterval);\n         try {                                     // sleep for interval\n           Thread.sleep(end - now);\n         } catch (InterruptedException e) {\n           break;                                  // exit on interrupt\n         }\n \n         try {\n-          now \u003d System.currentTimeMillis();\n+          now \u003d Time.now();\n           if (now \u003e\u003d end) {\n \n             FileStatus[] homes \u003d null;\n             try {\n               homes \u003d fs.listStatus(homesParent);         // list all home dirs\n             } catch (IOException e) {\n               LOG.warn(\"Trash can\u0027t list homes: \"+e+\" Sleeping.\");\n               continue;\n             }\n \n             for (FileStatus home : homes) {         // dump each trash\n               if (!home.isDirectory())\n                 continue;\n               try {\n                 TrashPolicyDefault trash \u003d new TrashPolicyDefault(home.getPath(), conf);\n                 trash.deleteCheckpoint();\n                 trash.createCheckpoint();\n               } catch (IOException e) {\n                 LOG.warn(\"Trash caught: \"+e+\". Skipping \"+home.getPath()+\".\");\n               } \n             }\n           }\n         } catch (Exception e) {\n           LOG.warn(\"RuntimeException during Trash.Emptier.run(): \", e); \n         }\n       }\n       try {\n         fs.close();\n       } catch(IOException e) {\n         LOG.warn(\"Trash cannot close FileSystem: \", e);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      if (emptierInterval \u003d\u003d 0)\n        return;                                   // trash disabled\n      long now \u003d Time.now();\n      long end;\n      while (true) {\n        end \u003d ceiling(now, emptierInterval);\n        try {                                     // sleep for interval\n          Thread.sleep(end - now);\n        } catch (InterruptedException e) {\n          break;                                  // exit on interrupt\n        }\n\n        try {\n          now \u003d Time.now();\n          if (now \u003e\u003d end) {\n\n            FileStatus[] homes \u003d null;\n            try {\n              homes \u003d fs.listStatus(homesParent);         // list all home dirs\n            } catch (IOException e) {\n              LOG.warn(\"Trash can\u0027t list homes: \"+e+\" Sleeping.\");\n              continue;\n            }\n\n            for (FileStatus home : homes) {         // dump each trash\n              if (!home.isDirectory())\n                continue;\n              try {\n                TrashPolicyDefault trash \u003d new TrashPolicyDefault(home.getPath(), conf);\n                trash.deleteCheckpoint();\n                trash.createCheckpoint();\n              } catch (IOException e) {\n                LOG.warn(\"Trash caught: \"+e+\". Skipping \"+home.getPath()+\".\");\n              } \n            }\n          }\n        } catch (Exception e) {\n          LOG.warn(\"RuntimeException during Trash.Emptier.run(): \", e); \n        }\n      }\n      try {\n        fs.close();\n      } catch(IOException e) {\n        LOG.warn(\"Trash cannot close FileSystem: \", e);\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/TrashPolicyDefault.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void run() {\n      if (emptierInterval \u003d\u003d 0)\n        return;                                   // trash disabled\n      long now \u003d System.currentTimeMillis();\n      long end;\n      while (true) {\n        end \u003d ceiling(now, emptierInterval);\n        try {                                     // sleep for interval\n          Thread.sleep(end - now);\n        } catch (InterruptedException e) {\n          break;                                  // exit on interrupt\n        }\n\n        try {\n          now \u003d System.currentTimeMillis();\n          if (now \u003e\u003d end) {\n\n            FileStatus[] homes \u003d null;\n            try {\n              homes \u003d fs.listStatus(homesParent);         // list all home dirs\n            } catch (IOException e) {\n              LOG.warn(\"Trash can\u0027t list homes: \"+e+\" Sleeping.\");\n              continue;\n            }\n\n            for (FileStatus home : homes) {         // dump each trash\n              if (!home.isDirectory())\n                continue;\n              try {\n                TrashPolicyDefault trash \u003d new TrashPolicyDefault(home.getPath(), conf);\n                trash.deleteCheckpoint();\n                trash.createCheckpoint();\n              } catch (IOException e) {\n                LOG.warn(\"Trash caught: \"+e+\". Skipping \"+home.getPath()+\".\");\n              } \n            }\n          }\n        } catch (Exception e) {\n          LOG.warn(\"RuntimeException during Trash.Emptier.run(): \", e); \n        }\n      }\n      try {\n        fs.close();\n      } catch(IOException e) {\n        LOG.warn(\"Trash cannot close FileSystem: \", e);\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/TrashPolicyDefault.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/TrashPolicyDefault.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/TrashPolicyDefault.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void run() {\n      if (emptierInterval \u003d\u003d 0)\n        return;                                   // trash disabled\n      long now \u003d System.currentTimeMillis();\n      long end;\n      while (true) {\n        end \u003d ceiling(now, emptierInterval);\n        try {                                     // sleep for interval\n          Thread.sleep(end - now);\n        } catch (InterruptedException e) {\n          break;                                  // exit on interrupt\n        }\n\n        try {\n          now \u003d System.currentTimeMillis();\n          if (now \u003e\u003d end) {\n\n            FileStatus[] homes \u003d null;\n            try {\n              homes \u003d fs.listStatus(homesParent);         // list all home dirs\n            } catch (IOException e) {\n              LOG.warn(\"Trash can\u0027t list homes: \"+e+\" Sleeping.\");\n              continue;\n            }\n\n            for (FileStatus home : homes) {         // dump each trash\n              if (!home.isDirectory())\n                continue;\n              try {\n                TrashPolicyDefault trash \u003d new TrashPolicyDefault(home.getPath(), conf);\n                trash.deleteCheckpoint();\n                trash.createCheckpoint();\n              } catch (IOException e) {\n                LOG.warn(\"Trash caught: \"+e+\". Skipping \"+home.getPath()+\".\");\n              } \n            }\n          }\n        } catch (Exception e) {\n          LOG.warn(\"RuntimeException during Trash.Emptier.run(): \", e); \n        }\n      }\n      try {\n        fs.close();\n      } catch(IOException e) {\n        LOG.warn(\"Trash cannot close FileSystem: \", e);\n      }\n    }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/fs/TrashPolicyDefault.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/fs/TrashPolicyDefault.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/TrashPolicyDefault.java"
      }
    },
    "184ff33de5598b04bf968ea3b113b175a4225b82": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "HADOOP-7460. Support pluggable trash policies. Contributed by Usman Masoon.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1149760 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/07/11 4:23 PM",
      "commitName": "184ff33de5598b04bf968ea3b113b175a4225b82",
      "commitAuthor": "Suresh Srinivas",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HADOOP-7460. Support pluggable trash policies. Contributed by Usman Masoon.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1149760 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/07/11 4:23 PM",
          "commitName": "184ff33de5598b04bf968ea3b113b175a4225b82",
          "commitAuthor": "Suresh Srinivas",
          "commitDateOld": "21/07/11 9:20 PM",
          "commitNameOld": "233a7aa34f37350bf7bcdd9c84b97d613e7344c9",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.79,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,47 @@\n     public void run() {\n       if (emptierInterval \u003d\u003d 0)\n         return;                                   // trash disabled\n       long now \u003d System.currentTimeMillis();\n       long end;\n       while (true) {\n         end \u003d ceiling(now, emptierInterval);\n         try {                                     // sleep for interval\n           Thread.sleep(end - now);\n         } catch (InterruptedException e) {\n           break;                                  // exit on interrupt\n         }\n \n         try {\n           now \u003d System.currentTimeMillis();\n           if (now \u003e\u003d end) {\n \n             FileStatus[] homes \u003d null;\n             try {\n               homes \u003d fs.listStatus(homesParent);         // list all home dirs\n             } catch (IOException e) {\n               LOG.warn(\"Trash can\u0027t list homes: \"+e+\" Sleeping.\");\n               continue;\n             }\n \n             for (FileStatus home : homes) {         // dump each trash\n               if (!home.isDirectory())\n                 continue;\n               try {\n-                Trash trash \u003d new Trash(home.getPath(), conf);\n-                trash.expunge();\n-                trash.checkpoint();\n+                TrashPolicyDefault trash \u003d new TrashPolicyDefault(home.getPath(), conf);\n+                trash.deleteCheckpoint();\n+                trash.createCheckpoint();\n               } catch (IOException e) {\n                 LOG.warn(\"Trash caught: \"+e+\". Skipping \"+home.getPath()+\".\");\n               } \n             }\n           }\n         } catch (Exception e) {\n           LOG.warn(\"RuntimeException during Trash.Emptier.run(): \", e); \n         }\n       }\n       try {\n         fs.close();\n       } catch(IOException e) {\n         LOG.warn(\"Trash cannot close FileSystem: \", e);\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void run() {\n      if (emptierInterval \u003d\u003d 0)\n        return;                                   // trash disabled\n      long now \u003d System.currentTimeMillis();\n      long end;\n      while (true) {\n        end \u003d ceiling(now, emptierInterval);\n        try {                                     // sleep for interval\n          Thread.sleep(end - now);\n        } catch (InterruptedException e) {\n          break;                                  // exit on interrupt\n        }\n\n        try {\n          now \u003d System.currentTimeMillis();\n          if (now \u003e\u003d end) {\n\n            FileStatus[] homes \u003d null;\n            try {\n              homes \u003d fs.listStatus(homesParent);         // list all home dirs\n            } catch (IOException e) {\n              LOG.warn(\"Trash can\u0027t list homes: \"+e+\" Sleeping.\");\n              continue;\n            }\n\n            for (FileStatus home : homes) {         // dump each trash\n              if (!home.isDirectory())\n                continue;\n              try {\n                TrashPolicyDefault trash \u003d new TrashPolicyDefault(home.getPath(), conf);\n                trash.deleteCheckpoint();\n                trash.createCheckpoint();\n              } catch (IOException e) {\n                LOG.warn(\"Trash caught: \"+e+\". Skipping \"+home.getPath()+\".\");\n              } \n            }\n          }\n        } catch (Exception e) {\n          LOG.warn(\"RuntimeException during Trash.Emptier.run(): \", e); \n        }\n      }\n      try {\n        fs.close();\n      } catch(IOException e) {\n        LOG.warn(\"Trash cannot close FileSystem: \", e);\n      }\n    }",
          "path": "common/src/java/org/apache/hadoop/fs/TrashPolicyDefault.java",
          "extendedDetails": {
            "oldPath": "common/src/java/org/apache/hadoop/fs/Trash.java",
            "newPath": "common/src/java/org/apache/hadoop/fs/TrashPolicyDefault.java",
            "oldMethodName": "run",
            "newMethodName": "run"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-7460. Support pluggable trash policies. Contributed by Usman Masoon.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1149760 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/07/11 4:23 PM",
          "commitName": "184ff33de5598b04bf968ea3b113b175a4225b82",
          "commitAuthor": "Suresh Srinivas",
          "commitDateOld": "21/07/11 9:20 PM",
          "commitNameOld": "233a7aa34f37350bf7bcdd9c84b97d613e7344c9",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.79,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,47 @@\n     public void run() {\n       if (emptierInterval \u003d\u003d 0)\n         return;                                   // trash disabled\n       long now \u003d System.currentTimeMillis();\n       long end;\n       while (true) {\n         end \u003d ceiling(now, emptierInterval);\n         try {                                     // sleep for interval\n           Thread.sleep(end - now);\n         } catch (InterruptedException e) {\n           break;                                  // exit on interrupt\n         }\n \n         try {\n           now \u003d System.currentTimeMillis();\n           if (now \u003e\u003d end) {\n \n             FileStatus[] homes \u003d null;\n             try {\n               homes \u003d fs.listStatus(homesParent);         // list all home dirs\n             } catch (IOException e) {\n               LOG.warn(\"Trash can\u0027t list homes: \"+e+\" Sleeping.\");\n               continue;\n             }\n \n             for (FileStatus home : homes) {         // dump each trash\n               if (!home.isDirectory())\n                 continue;\n               try {\n-                Trash trash \u003d new Trash(home.getPath(), conf);\n-                trash.expunge();\n-                trash.checkpoint();\n+                TrashPolicyDefault trash \u003d new TrashPolicyDefault(home.getPath(), conf);\n+                trash.deleteCheckpoint();\n+                trash.createCheckpoint();\n               } catch (IOException e) {\n                 LOG.warn(\"Trash caught: \"+e+\". Skipping \"+home.getPath()+\".\");\n               } \n             }\n           }\n         } catch (Exception e) {\n           LOG.warn(\"RuntimeException during Trash.Emptier.run(): \", e); \n         }\n       }\n       try {\n         fs.close();\n       } catch(IOException e) {\n         LOG.warn(\"Trash cannot close FileSystem: \", e);\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void run() {\n      if (emptierInterval \u003d\u003d 0)\n        return;                                   // trash disabled\n      long now \u003d System.currentTimeMillis();\n      long end;\n      while (true) {\n        end \u003d ceiling(now, emptierInterval);\n        try {                                     // sleep for interval\n          Thread.sleep(end - now);\n        } catch (InterruptedException e) {\n          break;                                  // exit on interrupt\n        }\n\n        try {\n          now \u003d System.currentTimeMillis();\n          if (now \u003e\u003d end) {\n\n            FileStatus[] homes \u003d null;\n            try {\n              homes \u003d fs.listStatus(homesParent);         // list all home dirs\n            } catch (IOException e) {\n              LOG.warn(\"Trash can\u0027t list homes: \"+e+\" Sleeping.\");\n              continue;\n            }\n\n            for (FileStatus home : homes) {         // dump each trash\n              if (!home.isDirectory())\n                continue;\n              try {\n                TrashPolicyDefault trash \u003d new TrashPolicyDefault(home.getPath(), conf);\n                trash.deleteCheckpoint();\n                trash.createCheckpoint();\n              } catch (IOException e) {\n                LOG.warn(\"Trash caught: \"+e+\". Skipping \"+home.getPath()+\".\");\n              } \n            }\n          }\n        } catch (Exception e) {\n          LOG.warn(\"RuntimeException during Trash.Emptier.run(): \", e); \n        }\n      }\n      try {\n        fs.close();\n      } catch(IOException e) {\n        LOG.warn(\"Trash cannot close FileSystem: \", e);\n      }\n    }",
          "path": "common/src/java/org/apache/hadoop/fs/TrashPolicyDefault.java",
          "extendedDetails": {}
        }
      ]
    },
    "1191be630ff05c9f1a540b952a8e34665f7fc181": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7385 Remove StringUtils.stringifyException(ie) in logger functions.  Contributed by Bharath Mundlapudi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1139123 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/06/11 4:55 PM",
      "commitName": "1191be630ff05c9f1a540b952a8e34665f7fc181",
      "commitAuthor": "Tanping Wang",
      "commitDateOld": "12/06/11 3:00 PM",
      "commitNameOld": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 11.08,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,47 @@\n     public void run() {\n       if (emptierInterval \u003d\u003d 0)\n         return;                                   // trash disabled\n       long now \u003d System.currentTimeMillis();\n       long end;\n       while (true) {\n         end \u003d ceiling(now, emptierInterval);\n         try {                                     // sleep for interval\n           Thread.sleep(end - now);\n         } catch (InterruptedException e) {\n           break;                                  // exit on interrupt\n         }\n \n         try {\n           now \u003d System.currentTimeMillis();\n           if (now \u003e\u003d end) {\n \n             FileStatus[] homes \u003d null;\n             try {\n               homes \u003d fs.listStatus(homesParent);         // list all home dirs\n             } catch (IOException e) {\n               LOG.warn(\"Trash can\u0027t list homes: \"+e+\" Sleeping.\");\n               continue;\n             }\n \n             for (FileStatus home : homes) {         // dump each trash\n               if (!home.isDirectory())\n                 continue;\n               try {\n                 Trash trash \u003d new Trash(home.getPath(), conf);\n                 trash.expunge();\n                 trash.checkpoint();\n               } catch (IOException e) {\n                 LOG.warn(\"Trash caught: \"+e+\". Skipping \"+home.getPath()+\".\");\n               } \n             }\n           }\n         } catch (Exception e) {\n-          LOG.warn(\"RuntimeException during Trash.Emptier.run() \" + \n-                   StringUtils.stringifyException(e));\n+          LOG.warn(\"RuntimeException during Trash.Emptier.run(): \", e); \n         }\n       }\n       try {\n         fs.close();\n       } catch(IOException e) {\n-        LOG.warn(\"Trash cannot close FileSystem. \" +\n-            StringUtils.stringifyException(e));\n+        LOG.warn(\"Trash cannot close FileSystem: \", e);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      if (emptierInterval \u003d\u003d 0)\n        return;                                   // trash disabled\n      long now \u003d System.currentTimeMillis();\n      long end;\n      while (true) {\n        end \u003d ceiling(now, emptierInterval);\n        try {                                     // sleep for interval\n          Thread.sleep(end - now);\n        } catch (InterruptedException e) {\n          break;                                  // exit on interrupt\n        }\n\n        try {\n          now \u003d System.currentTimeMillis();\n          if (now \u003e\u003d end) {\n\n            FileStatus[] homes \u003d null;\n            try {\n              homes \u003d fs.listStatus(homesParent);         // list all home dirs\n            } catch (IOException e) {\n              LOG.warn(\"Trash can\u0027t list homes: \"+e+\" Sleeping.\");\n              continue;\n            }\n\n            for (FileStatus home : homes) {         // dump each trash\n              if (!home.isDirectory())\n                continue;\n              try {\n                Trash trash \u003d new Trash(home.getPath(), conf);\n                trash.expunge();\n                trash.checkpoint();\n              } catch (IOException e) {\n                LOG.warn(\"Trash caught: \"+e+\". Skipping \"+home.getPath()+\".\");\n              } \n            }\n          }\n        } catch (Exception e) {\n          LOG.warn(\"RuntimeException during Trash.Emptier.run(): \", e); \n        }\n      }\n      try {\n        fs.close();\n      } catch(IOException e) {\n        LOG.warn(\"Trash cannot close FileSystem: \", e);\n      }\n    }",
      "path": "common/src/java/org/apache/hadoop/fs/Trash.java",
      "extendedDetails": {}
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void run() {\n      if (emptierInterval \u003d\u003d 0)\n        return;                                   // trash disabled\n      long now \u003d System.currentTimeMillis();\n      long end;\n      while (true) {\n        end \u003d ceiling(now, emptierInterval);\n        try {                                     // sleep for interval\n          Thread.sleep(end - now);\n        } catch (InterruptedException e) {\n          break;                                  // exit on interrupt\n        }\n\n        try {\n          now \u003d System.currentTimeMillis();\n          if (now \u003e\u003d end) {\n\n            FileStatus[] homes \u003d null;\n            try {\n              homes \u003d fs.listStatus(homesParent);         // list all home dirs\n            } catch (IOException e) {\n              LOG.warn(\"Trash can\u0027t list homes: \"+e+\" Sleeping.\");\n              continue;\n            }\n\n            for (FileStatus home : homes) {         // dump each trash\n              if (!home.isDirectory())\n                continue;\n              try {\n                Trash trash \u003d new Trash(home.getPath(), conf);\n                trash.expunge();\n                trash.checkpoint();\n              } catch (IOException e) {\n                LOG.warn(\"Trash caught: \"+e+\". Skipping \"+home.getPath()+\".\");\n              } \n            }\n          }\n        } catch (Exception e) {\n          LOG.warn(\"RuntimeException during Trash.Emptier.run() \" + \n                   StringUtils.stringifyException(e));\n        }\n      }\n      try {\n        fs.close();\n      } catch(IOException e) {\n        LOG.warn(\"Trash cannot close FileSystem. \" +\n            StringUtils.stringifyException(e));\n      }\n    }",
      "path": "common/src/java/org/apache/hadoop/fs/Trash.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/fs/Trash.java",
        "newPath": "common/src/java/org/apache/hadoop/fs/Trash.java"
      }
    },
    "7578282edce0eba3f24c96355c944c02156ece79": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6585.  Add FileStatus#isDirectory and isFile.  Contributed by Eli Collins.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@949658 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/05/10 8:14 PM",
      "commitName": "7578282edce0eba3f24c96355c944c02156ece79",
      "commitAuthor": "Thomas White",
      "commitDateOld": "17/05/10 4:51 PM",
      "commitNameOld": "175a92850d8207ae5231632f915767033b035c5f",
      "commitAuthorOld": "Dhruba Borthakur",
      "daysBetweenCommits": 13.14,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n     public void run() {\n       if (emptierInterval \u003d\u003d 0)\n         return;                                   // trash disabled\n       long now \u003d System.currentTimeMillis();\n       long end;\n       while (true) {\n         end \u003d ceiling(now, emptierInterval);\n         try {                                     // sleep for interval\n           Thread.sleep(end - now);\n         } catch (InterruptedException e) {\n           break;                                  // exit on interrupt\n         }\n \n         try {\n           now \u003d System.currentTimeMillis();\n           if (now \u003e\u003d end) {\n \n             FileStatus[] homes \u003d null;\n             try {\n               homes \u003d fs.listStatus(homesParent);         // list all home dirs\n             } catch (IOException e) {\n               LOG.warn(\"Trash can\u0027t list homes: \"+e+\" Sleeping.\");\n               continue;\n             }\n \n             for (FileStatus home : homes) {         // dump each trash\n-              if (!home.isDir())\n+              if (!home.isDirectory())\n                 continue;\n               try {\n                 Trash trash \u003d new Trash(home.getPath(), conf);\n                 trash.expunge();\n                 trash.checkpoint();\n               } catch (IOException e) {\n                 LOG.warn(\"Trash caught: \"+e+\". Skipping \"+home.getPath()+\".\");\n               } \n             }\n           }\n         } catch (Exception e) {\n           LOG.warn(\"RuntimeException during Trash.Emptier.run() \" + \n                    StringUtils.stringifyException(e));\n         }\n       }\n       try {\n         fs.close();\n       } catch(IOException e) {\n         LOG.warn(\"Trash cannot close FileSystem. \" +\n             StringUtils.stringifyException(e));\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      if (emptierInterval \u003d\u003d 0)\n        return;                                   // trash disabled\n      long now \u003d System.currentTimeMillis();\n      long end;\n      while (true) {\n        end \u003d ceiling(now, emptierInterval);\n        try {                                     // sleep for interval\n          Thread.sleep(end - now);\n        } catch (InterruptedException e) {\n          break;                                  // exit on interrupt\n        }\n\n        try {\n          now \u003d System.currentTimeMillis();\n          if (now \u003e\u003d end) {\n\n            FileStatus[] homes \u003d null;\n            try {\n              homes \u003d fs.listStatus(homesParent);         // list all home dirs\n            } catch (IOException e) {\n              LOG.warn(\"Trash can\u0027t list homes: \"+e+\" Sleeping.\");\n              continue;\n            }\n\n            for (FileStatus home : homes) {         // dump each trash\n              if (!home.isDirectory())\n                continue;\n              try {\n                Trash trash \u003d new Trash(home.getPath(), conf);\n                trash.expunge();\n                trash.checkpoint();\n              } catch (IOException e) {\n                LOG.warn(\"Trash caught: \"+e+\". Skipping \"+home.getPath()+\".\");\n              } \n            }\n          }\n        } catch (Exception e) {\n          LOG.warn(\"RuntimeException during Trash.Emptier.run() \" + \n                   StringUtils.stringifyException(e));\n        }\n      }\n      try {\n        fs.close();\n      } catch(IOException e) {\n        LOG.warn(\"Trash cannot close FileSystem. \" +\n            StringUtils.stringifyException(e));\n      }\n    }",
      "path": "src/java/org/apache/hadoop/fs/Trash.java",
      "extendedDetails": {}
    },
    "175a92850d8207ae5231632f915767033b035c5f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6761. The Trash Emptier has the ability to run more frequently.\n(Dmytro Molkov via dhruba)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@945439 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/05/10 4:51 PM",
      "commitName": "175a92850d8207ae5231632f915767033b035c5f",
      "commitAuthor": "Dhruba Borthakur",
      "commitDateOld": "30/10/09 3:39 PM",
      "commitNameOld": "382af3f62737491afb380b2402ce2f58256c5974",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 199.05,
      "commitsBetweenForRepo": 179,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,49 @@\n     public void run() {\n-      if (interval \u003d\u003d 0)\n+      if (emptierInterval \u003d\u003d 0)\n         return;                                   // trash disabled\n-\n       long now \u003d System.currentTimeMillis();\n       long end;\n       while (true) {\n-        end \u003d ceiling(now, interval);\n+        end \u003d ceiling(now, emptierInterval);\n         try {                                     // sleep for interval\n           Thread.sleep(end - now);\n         } catch (InterruptedException e) {\n           break;                                  // exit on interrupt\n         }\n-          \n+\n         try {\n           now \u003d System.currentTimeMillis();\n           if (now \u003e\u003d end) {\n \n             FileStatus[] homes \u003d null;\n             try {\n-              homes \u003d fs.listStatus(HOMES);         // list all home dirs\n+              homes \u003d fs.listStatus(homesParent);         // list all home dirs\n             } catch (IOException e) {\n               LOG.warn(\"Trash can\u0027t list homes: \"+e+\" Sleeping.\");\n               continue;\n             }\n \n             for (FileStatus home : homes) {         // dump each trash\n               if (!home.isDir())\n                 continue;\n               try {\n                 Trash trash \u003d new Trash(home.getPath(), conf);\n                 trash.expunge();\n                 trash.checkpoint();\n               } catch (IOException e) {\n                 LOG.warn(\"Trash caught: \"+e+\". Skipping \"+home.getPath()+\".\");\n               } \n             }\n           }\n         } catch (Exception e) {\n           LOG.warn(\"RuntimeException during Trash.Emptier.run() \" + \n                    StringUtils.stringifyException(e));\n         }\n       }\n       try {\n         fs.close();\n       } catch(IOException e) {\n         LOG.warn(\"Trash cannot close FileSystem. \" +\n             StringUtils.stringifyException(e));\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      if (emptierInterval \u003d\u003d 0)\n        return;                                   // trash disabled\n      long now \u003d System.currentTimeMillis();\n      long end;\n      while (true) {\n        end \u003d ceiling(now, emptierInterval);\n        try {                                     // sleep for interval\n          Thread.sleep(end - now);\n        } catch (InterruptedException e) {\n          break;                                  // exit on interrupt\n        }\n\n        try {\n          now \u003d System.currentTimeMillis();\n          if (now \u003e\u003d end) {\n\n            FileStatus[] homes \u003d null;\n            try {\n              homes \u003d fs.listStatus(homesParent);         // list all home dirs\n            } catch (IOException e) {\n              LOG.warn(\"Trash can\u0027t list homes: \"+e+\" Sleeping.\");\n              continue;\n            }\n\n            for (FileStatus home : homes) {         // dump each trash\n              if (!home.isDir())\n                continue;\n              try {\n                Trash trash \u003d new Trash(home.getPath(), conf);\n                trash.expunge();\n                trash.checkpoint();\n              } catch (IOException e) {\n                LOG.warn(\"Trash caught: \"+e+\". Skipping \"+home.getPath()+\".\");\n              } \n            }\n          }\n        } catch (Exception e) {\n          LOG.warn(\"RuntimeException during Trash.Emptier.run() \" + \n                   StringUtils.stringifyException(e));\n        }\n      }\n      try {\n        fs.close();\n      } catch(IOException e) {\n        LOG.warn(\"Trash cannot close FileSystem. \" +\n            StringUtils.stringifyException(e));\n      }\n    }",
      "path": "src/java/org/apache/hadoop/fs/Trash.java",
      "extendedDetails": {}
    },
    "76a77aea78301c6b632d06d20520abc8a21d4cb0": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6201. Change FileSystem::listStatus contract to throw\nFileNotFoundException if the directory does not exist, rather than letting\nthis be implementation-specific. Contributed by Jakob Homan.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@806745 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/08/09 3:50 PM",
      "commitName": "76a77aea78301c6b632d06d20520abc8a21d4cb0",
      "commitAuthor": "Christopher Douglas",
      "commitDateOld": "07/08/09 10:59 AM",
      "commitNameOld": "09d826ebed0394d80dd24432a3bbf894efe46265",
      "commitAuthorOld": "Hairong Kuang",
      "daysBetweenCommits": 14.2,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,50 @@\n     public void run() {\n       if (interval \u003d\u003d 0)\n         return;                                   // trash disabled\n \n       long now \u003d System.currentTimeMillis();\n       long end;\n       while (true) {\n         end \u003d ceiling(now, interval);\n         try {                                     // sleep for interval\n           Thread.sleep(end - now);\n         } catch (InterruptedException e) {\n           break;                                  // exit on interrupt\n         }\n           \n         try {\n           now \u003d System.currentTimeMillis();\n           if (now \u003e\u003d end) {\n \n             FileStatus[] homes \u003d null;\n             try {\n               homes \u003d fs.listStatus(HOMES);         // list all home dirs\n             } catch (IOException e) {\n               LOG.warn(\"Trash can\u0027t list homes: \"+e+\" Sleeping.\");\n               continue;\n             }\n \n-            if (homes \u003d\u003d null)\n-              continue;\n-\n             for (FileStatus home : homes) {         // dump each trash\n               if (!home.isDir())\n                 continue;\n               try {\n                 Trash trash \u003d new Trash(home.getPath(), conf);\n                 trash.expunge();\n                 trash.checkpoint();\n               } catch (IOException e) {\n                 LOG.warn(\"Trash caught: \"+e+\". Skipping \"+home.getPath()+\".\");\n               } \n             }\n           }\n         } catch (Exception e) {\n           LOG.warn(\"RuntimeException during Trash.Emptier.run() \" + \n                    StringUtils.stringifyException(e));\n         }\n       }\n       try {\n         fs.close();\n       } catch(IOException e) {\n         LOG.warn(\"Trash cannot close FileSystem. \" +\n             StringUtils.stringifyException(e));\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      if (interval \u003d\u003d 0)\n        return;                                   // trash disabled\n\n      long now \u003d System.currentTimeMillis();\n      long end;\n      while (true) {\n        end \u003d ceiling(now, interval);\n        try {                                     // sleep for interval\n          Thread.sleep(end - now);\n        } catch (InterruptedException e) {\n          break;                                  // exit on interrupt\n        }\n          \n        try {\n          now \u003d System.currentTimeMillis();\n          if (now \u003e\u003d end) {\n\n            FileStatus[] homes \u003d null;\n            try {\n              homes \u003d fs.listStatus(HOMES);         // list all home dirs\n            } catch (IOException e) {\n              LOG.warn(\"Trash can\u0027t list homes: \"+e+\" Sleeping.\");\n              continue;\n            }\n\n            for (FileStatus home : homes) {         // dump each trash\n              if (!home.isDir())\n                continue;\n              try {\n                Trash trash \u003d new Trash(home.getPath(), conf);\n                trash.expunge();\n                trash.checkpoint();\n              } catch (IOException e) {\n                LOG.warn(\"Trash caught: \"+e+\". Skipping \"+home.getPath()+\".\");\n              } \n            }\n          }\n        } catch (Exception e) {\n          LOG.warn(\"RuntimeException during Trash.Emptier.run() \" + \n                   StringUtils.stringifyException(e));\n        }\n      }\n      try {\n        fs.close();\n      } catch(IOException e) {\n        LOG.warn(\"Trash cannot close FileSystem. \" +\n            StringUtils.stringifyException(e));\n      }\n    }",
      "path": "src/java/org/apache/hadoop/fs/Trash.java",
      "extendedDetails": {}
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,53 @@\n+    public void run() {\n+      if (interval \u003d\u003d 0)\n+        return;                                   // trash disabled\n+\n+      long now \u003d System.currentTimeMillis();\n+      long end;\n+      while (true) {\n+        end \u003d ceiling(now, interval);\n+        try {                                     // sleep for interval\n+          Thread.sleep(end - now);\n+        } catch (InterruptedException e) {\n+          break;                                  // exit on interrupt\n+        }\n+          \n+        try {\n+          now \u003d System.currentTimeMillis();\n+          if (now \u003e\u003d end) {\n+\n+            FileStatus[] homes \u003d null;\n+            try {\n+              homes \u003d fs.listStatus(HOMES);         // list all home dirs\n+            } catch (IOException e) {\n+              LOG.warn(\"Trash can\u0027t list homes: \"+e+\" Sleeping.\");\n+              continue;\n+            }\n+\n+            if (homes \u003d\u003d null)\n+              continue;\n+\n+            for (FileStatus home : homes) {         // dump each trash\n+              if (!home.isDir())\n+                continue;\n+              try {\n+                Trash trash \u003d new Trash(home.getPath(), conf);\n+                trash.expunge();\n+                trash.checkpoint();\n+              } catch (IOException e) {\n+                LOG.warn(\"Trash caught: \"+e+\". Skipping \"+home.getPath()+\".\");\n+              } \n+            }\n+          }\n+        } catch (Exception e) {\n+          LOG.warn(\"RuntimeException during Trash.Emptier.run() \" + \n+                   StringUtils.stringifyException(e));\n+        }\n+      }\n+      try {\n+        fs.close();\n+      } catch(IOException e) {\n+        LOG.warn(\"Trash cannot close FileSystem. \" +\n+            StringUtils.stringifyException(e));\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      if (interval \u003d\u003d 0)\n        return;                                   // trash disabled\n\n      long now \u003d System.currentTimeMillis();\n      long end;\n      while (true) {\n        end \u003d ceiling(now, interval);\n        try {                                     // sleep for interval\n          Thread.sleep(end - now);\n        } catch (InterruptedException e) {\n          break;                                  // exit on interrupt\n        }\n          \n        try {\n          now \u003d System.currentTimeMillis();\n          if (now \u003e\u003d end) {\n\n            FileStatus[] homes \u003d null;\n            try {\n              homes \u003d fs.listStatus(HOMES);         // list all home dirs\n            } catch (IOException e) {\n              LOG.warn(\"Trash can\u0027t list homes: \"+e+\" Sleeping.\");\n              continue;\n            }\n\n            if (homes \u003d\u003d null)\n              continue;\n\n            for (FileStatus home : homes) {         // dump each trash\n              if (!home.isDir())\n                continue;\n              try {\n                Trash trash \u003d new Trash(home.getPath(), conf);\n                trash.expunge();\n                trash.checkpoint();\n              } catch (IOException e) {\n                LOG.warn(\"Trash caught: \"+e+\". Skipping \"+home.getPath()+\".\");\n              } \n            }\n          }\n        } catch (Exception e) {\n          LOG.warn(\"RuntimeException during Trash.Emptier.run() \" + \n                   StringUtils.stringifyException(e));\n        }\n      }\n      try {\n        fs.close();\n      } catch(IOException e) {\n        LOG.warn(\"Trash cannot close FileSystem. \" +\n            StringUtils.stringifyException(e));\n      }\n    }",
      "path": "src/java/org/apache/hadoop/fs/Trash.java"
    }
  }
}