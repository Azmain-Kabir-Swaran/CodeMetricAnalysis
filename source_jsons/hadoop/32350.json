{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainerExecutor.java",
  "functionName": "getRunCommandForWindows",
  "functionId": "getRunCommandForWindows___command-String__groupId-String__userName-String__pidFile-Path__config-Configuration__resource-Resource",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ContainerExecutor.java",
  "functionStartLine": 638,
  "functionEndLine": 679,
  "numCommitsSeen": 87,
  "timeTaken": 2270,
  "changeHistory": [
    "a72cb3825a11830be9ad35ae7ddbf42a3d2892b0",
    "54bf14f80bcb2cafd1d30b77f2e02cd40b9515d9"
  ],
  "changeHistoryShort": {
    "a72cb3825a11830be9ad35ae7ddbf42a3d2892b0": "Ymultichange(Yparameterchange,Ybodychange)",
    "54bf14f80bcb2cafd1d30b77f2e02cd40b9515d9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a72cb3825a11830be9ad35ae7ddbf42a3d2892b0": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5383. Fix findbugs and checkstyle issues in ContainerExecutor. (Vrushali C via Varun Saxena)\n",
      "commitDate": "15/07/16 10:47 AM",
      "commitName": "a72cb3825a11830be9ad35ae7ddbf42a3d2892b0",
      "commitAuthor": "Varun Saxena",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5383. Fix findbugs and checkstyle issues in ContainerExecutor. (Vrushali C via Varun Saxena)\n",
          "commitDate": "15/07/16 10:47 AM",
          "commitName": "a72cb3825a11830be9ad35ae7ddbf42a3d2892b0",
          "commitAuthor": "Varun Saxena",
          "commitDateOld": "14/07/16 6:58 AM",
          "commitNameOld": "54bf14f80bcb2cafd1d30b77f2e02cd40b9515d9",
          "commitAuthorOld": "Varun Vasudev",
          "daysBetweenCommits": 1.16,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,42 @@\n   protected String[] getRunCommandForWindows(String command, String groupId,\n-      String userName, Path pidFile, Configuration conf, Resource resource) {\n+      String userName, Path pidFile, Configuration config, Resource resource) {\n     int cpuRate \u003d -1;\n     int memory \u003d -1;\n \n     if (resource !\u003d null) {\n-      if (conf.getBoolean(\n+      if (config.getBoolean(\n           YarnConfiguration.NM_WINDOWS_CONTAINER_MEMORY_LIMIT_ENABLED,\n-          YarnConfiguration.DEFAULT_NM_WINDOWS_CONTAINER_MEMORY_LIMIT_ENABLED)) {\n-        memory \u003d (int)resource.getMemorySize();\n+          YarnConfiguration.\n+            DEFAULT_NM_WINDOWS_CONTAINER_MEMORY_LIMIT_ENABLED)) {\n+        memory \u003d (int) resource.getMemorySize();\n       }\n \n-      if (conf.getBoolean(\n+      if (config.getBoolean(\n           YarnConfiguration.NM_WINDOWS_CONTAINER_CPU_LIMIT_ENABLED,\n           YarnConfiguration.DEFAULT_NM_WINDOWS_CONTAINER_CPU_LIMIT_ENABLED)) {\n         int containerVCores \u003d resource.getVirtualCores();\n-        int nodeVCores \u003d NodeManagerHardwareUtils.getVCores(conf);\n+        int nodeVCores \u003d NodeManagerHardwareUtils.getVCores(config);\n         int nodeCpuPercentage \u003d\n-            NodeManagerHardwareUtils.getNodeCpuPercentage(conf);\n+            NodeManagerHardwareUtils.getNodeCpuPercentage(config);\n \n         float containerCpuPercentage \u003d\n             (float)(nodeCpuPercentage * containerVCores) / nodeVCores;\n \n         // CPU should be set to a percentage * 100, e.g. 20% cpu rate limit\n         // should be set as 20 * 100.\n         cpuRate \u003d Math.min(10000, (int)(containerCpuPercentage * 100));\n       }\n     }\n \n     return new String[] {\n         Shell.getWinUtilsPath(),\n         \"task\",\n         \"create\",\n         \"-m\",\n         String.valueOf(memory),\n         \"-c\",\n         String.valueOf(cpuRate),\n         groupId,\n         \"cmd /c \" + command\n     };\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected String[] getRunCommandForWindows(String command, String groupId,\n      String userName, Path pidFile, Configuration config, Resource resource) {\n    int cpuRate \u003d -1;\n    int memory \u003d -1;\n\n    if (resource !\u003d null) {\n      if (config.getBoolean(\n          YarnConfiguration.NM_WINDOWS_CONTAINER_MEMORY_LIMIT_ENABLED,\n          YarnConfiguration.\n            DEFAULT_NM_WINDOWS_CONTAINER_MEMORY_LIMIT_ENABLED)) {\n        memory \u003d (int) resource.getMemorySize();\n      }\n\n      if (config.getBoolean(\n          YarnConfiguration.NM_WINDOWS_CONTAINER_CPU_LIMIT_ENABLED,\n          YarnConfiguration.DEFAULT_NM_WINDOWS_CONTAINER_CPU_LIMIT_ENABLED)) {\n        int containerVCores \u003d resource.getVirtualCores();\n        int nodeVCores \u003d NodeManagerHardwareUtils.getVCores(config);\n        int nodeCpuPercentage \u003d\n            NodeManagerHardwareUtils.getNodeCpuPercentage(config);\n\n        float containerCpuPercentage \u003d\n            (float)(nodeCpuPercentage * containerVCores) / nodeVCores;\n\n        // CPU should be set to a percentage * 100, e.g. 20% cpu rate limit\n        // should be set as 20 * 100.\n        cpuRate \u003d Math.min(10000, (int)(containerCpuPercentage * 100));\n      }\n    }\n\n    return new String[] {\n        Shell.getWinUtilsPath(),\n        \"task\",\n        \"create\",\n        \"-m\",\n        String.valueOf(memory),\n        \"-c\",\n        String.valueOf(cpuRate),\n        groupId,\n        \"cmd /c \" + command\n    };\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ContainerExecutor.java",
          "extendedDetails": {
            "oldValue": "[command-String, groupId-String, userName-String, pidFile-Path, conf-Configuration, resource-Resource]",
            "newValue": "[command-String, groupId-String, userName-String, pidFile-Path, config-Configuration, resource-Resource]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5383. Fix findbugs and checkstyle issues in ContainerExecutor. (Vrushali C via Varun Saxena)\n",
          "commitDate": "15/07/16 10:47 AM",
          "commitName": "a72cb3825a11830be9ad35ae7ddbf42a3d2892b0",
          "commitAuthor": "Varun Saxena",
          "commitDateOld": "14/07/16 6:58 AM",
          "commitNameOld": "54bf14f80bcb2cafd1d30b77f2e02cd40b9515d9",
          "commitAuthorOld": "Varun Vasudev",
          "daysBetweenCommits": 1.16,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,42 @@\n   protected String[] getRunCommandForWindows(String command, String groupId,\n-      String userName, Path pidFile, Configuration conf, Resource resource) {\n+      String userName, Path pidFile, Configuration config, Resource resource) {\n     int cpuRate \u003d -1;\n     int memory \u003d -1;\n \n     if (resource !\u003d null) {\n-      if (conf.getBoolean(\n+      if (config.getBoolean(\n           YarnConfiguration.NM_WINDOWS_CONTAINER_MEMORY_LIMIT_ENABLED,\n-          YarnConfiguration.DEFAULT_NM_WINDOWS_CONTAINER_MEMORY_LIMIT_ENABLED)) {\n-        memory \u003d (int)resource.getMemorySize();\n+          YarnConfiguration.\n+            DEFAULT_NM_WINDOWS_CONTAINER_MEMORY_LIMIT_ENABLED)) {\n+        memory \u003d (int) resource.getMemorySize();\n       }\n \n-      if (conf.getBoolean(\n+      if (config.getBoolean(\n           YarnConfiguration.NM_WINDOWS_CONTAINER_CPU_LIMIT_ENABLED,\n           YarnConfiguration.DEFAULT_NM_WINDOWS_CONTAINER_CPU_LIMIT_ENABLED)) {\n         int containerVCores \u003d resource.getVirtualCores();\n-        int nodeVCores \u003d NodeManagerHardwareUtils.getVCores(conf);\n+        int nodeVCores \u003d NodeManagerHardwareUtils.getVCores(config);\n         int nodeCpuPercentage \u003d\n-            NodeManagerHardwareUtils.getNodeCpuPercentage(conf);\n+            NodeManagerHardwareUtils.getNodeCpuPercentage(config);\n \n         float containerCpuPercentage \u003d\n             (float)(nodeCpuPercentage * containerVCores) / nodeVCores;\n \n         // CPU should be set to a percentage * 100, e.g. 20% cpu rate limit\n         // should be set as 20 * 100.\n         cpuRate \u003d Math.min(10000, (int)(containerCpuPercentage * 100));\n       }\n     }\n \n     return new String[] {\n         Shell.getWinUtilsPath(),\n         \"task\",\n         \"create\",\n         \"-m\",\n         String.valueOf(memory),\n         \"-c\",\n         String.valueOf(cpuRate),\n         groupId,\n         \"cmd /c \" + command\n     };\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected String[] getRunCommandForWindows(String command, String groupId,\n      String userName, Path pidFile, Configuration config, Resource resource) {\n    int cpuRate \u003d -1;\n    int memory \u003d -1;\n\n    if (resource !\u003d null) {\n      if (config.getBoolean(\n          YarnConfiguration.NM_WINDOWS_CONTAINER_MEMORY_LIMIT_ENABLED,\n          YarnConfiguration.\n            DEFAULT_NM_WINDOWS_CONTAINER_MEMORY_LIMIT_ENABLED)) {\n        memory \u003d (int) resource.getMemorySize();\n      }\n\n      if (config.getBoolean(\n          YarnConfiguration.NM_WINDOWS_CONTAINER_CPU_LIMIT_ENABLED,\n          YarnConfiguration.DEFAULT_NM_WINDOWS_CONTAINER_CPU_LIMIT_ENABLED)) {\n        int containerVCores \u003d resource.getVirtualCores();\n        int nodeVCores \u003d NodeManagerHardwareUtils.getVCores(config);\n        int nodeCpuPercentage \u003d\n            NodeManagerHardwareUtils.getNodeCpuPercentage(config);\n\n        float containerCpuPercentage \u003d\n            (float)(nodeCpuPercentage * containerVCores) / nodeVCores;\n\n        // CPU should be set to a percentage * 100, e.g. 20% cpu rate limit\n        // should be set as 20 * 100.\n        cpuRate \u003d Math.min(10000, (int)(containerCpuPercentage * 100));\n      }\n    }\n\n    return new String[] {\n        Shell.getWinUtilsPath(),\n        \"task\",\n        \"create\",\n        \"-m\",\n        String.valueOf(memory),\n        \"-c\",\n        String.valueOf(cpuRate),\n        groupId,\n        \"cmd /c \" + command\n    };\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ContainerExecutor.java",
          "extendedDetails": {}
        }
      ]
    },
    "54bf14f80bcb2cafd1d30b77f2e02cd40b9515d9": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5303. Clean up ContainerExecutor JavaDoc. Contributed by Daniel Templeton.\n",
      "commitDate": "14/07/16 6:58 AM",
      "commitName": "54bf14f80bcb2cafd1d30b77f2e02cd40b9515d9",
      "commitAuthor": "Varun Vasudev",
      "diff": "@@ -0,0 +1,41 @@\n+  protected String[] getRunCommandForWindows(String command, String groupId,\n+      String userName, Path pidFile, Configuration conf, Resource resource) {\n+    int cpuRate \u003d -1;\n+    int memory \u003d -1;\n+\n+    if (resource !\u003d null) {\n+      if (conf.getBoolean(\n+          YarnConfiguration.NM_WINDOWS_CONTAINER_MEMORY_LIMIT_ENABLED,\n+          YarnConfiguration.DEFAULT_NM_WINDOWS_CONTAINER_MEMORY_LIMIT_ENABLED)) {\n+        memory \u003d (int)resource.getMemorySize();\n+      }\n+\n+      if (conf.getBoolean(\n+          YarnConfiguration.NM_WINDOWS_CONTAINER_CPU_LIMIT_ENABLED,\n+          YarnConfiguration.DEFAULT_NM_WINDOWS_CONTAINER_CPU_LIMIT_ENABLED)) {\n+        int containerVCores \u003d resource.getVirtualCores();\n+        int nodeVCores \u003d NodeManagerHardwareUtils.getVCores(conf);\n+        int nodeCpuPercentage \u003d\n+            NodeManagerHardwareUtils.getNodeCpuPercentage(conf);\n+\n+        float containerCpuPercentage \u003d\n+            (float)(nodeCpuPercentage * containerVCores) / nodeVCores;\n+\n+        // CPU should be set to a percentage * 100, e.g. 20% cpu rate limit\n+        // should be set as 20 * 100.\n+        cpuRate \u003d Math.min(10000, (int)(containerCpuPercentage * 100));\n+      }\n+    }\n+\n+    return new String[] {\n+        Shell.getWinUtilsPath(),\n+        \"task\",\n+        \"create\",\n+        \"-m\",\n+        String.valueOf(memory),\n+        \"-c\",\n+        String.valueOf(cpuRate),\n+        groupId,\n+        \"cmd /c \" + command\n+    };\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected String[] getRunCommandForWindows(String command, String groupId,\n      String userName, Path pidFile, Configuration conf, Resource resource) {\n    int cpuRate \u003d -1;\n    int memory \u003d -1;\n\n    if (resource !\u003d null) {\n      if (conf.getBoolean(\n          YarnConfiguration.NM_WINDOWS_CONTAINER_MEMORY_LIMIT_ENABLED,\n          YarnConfiguration.DEFAULT_NM_WINDOWS_CONTAINER_MEMORY_LIMIT_ENABLED)) {\n        memory \u003d (int)resource.getMemorySize();\n      }\n\n      if (conf.getBoolean(\n          YarnConfiguration.NM_WINDOWS_CONTAINER_CPU_LIMIT_ENABLED,\n          YarnConfiguration.DEFAULT_NM_WINDOWS_CONTAINER_CPU_LIMIT_ENABLED)) {\n        int containerVCores \u003d resource.getVirtualCores();\n        int nodeVCores \u003d NodeManagerHardwareUtils.getVCores(conf);\n        int nodeCpuPercentage \u003d\n            NodeManagerHardwareUtils.getNodeCpuPercentage(conf);\n\n        float containerCpuPercentage \u003d\n            (float)(nodeCpuPercentage * containerVCores) / nodeVCores;\n\n        // CPU should be set to a percentage * 100, e.g. 20% cpu rate limit\n        // should be set as 20 * 100.\n        cpuRate \u003d Math.min(10000, (int)(containerCpuPercentage * 100));\n      }\n    }\n\n    return new String[] {\n        Shell.getWinUtilsPath(),\n        \"task\",\n        \"create\",\n        \"-m\",\n        String.valueOf(memory),\n        \"-c\",\n        String.valueOf(cpuRate),\n        groupId,\n        \"cmd /c \" + command\n    };\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ContainerExecutor.java"
    }
  }
}