{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMStateStore.java",
  "functionName": "handleStoreEvent",
  "functionId": "handleStoreEvent___event-RMStateStoreEvent",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStore.java",
  "functionStartLine": 1239,
  "functionEndLine": 1259,
  "numCommitsSeen": 81,
  "timeTaken": 4437,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "19295b36d90e26616accee73b1f7743aab5df692",
    "4f18018b7abb405f38d269da096ec9fd80c81d9a",
    "c94f2cec3a4d46718aa4cd144fb32e328406b9b3",
    "dc84800184a58a26d370d9cc3ef094c20e687211",
    "93907baa0b033c1431dc7055116746fc9db508cc",
    "305ae48136d6e201de4451e824cb7b84f94ba2e0",
    "797159bbd4f80c92d8bfe6979b4dd91ce51d0afc",
    "e28015ed1b40278028cfb70c4c87d9bc95a2b6a6",
    "9f4d4e27fb1760b352cc5b301cd65a50d2d43ff6",
    "8628c1704b7d8c1a0ac01cea679c03245d11d330",
    "ec010a29362c6c5572f8681f4e7d0469176345e1",
    "89fb4d8ffd32b06db42cc3e21d2a89e99deb7732",
    "259edf8dca44de54033e96f7eb65a83aaa6096f2",
    "74231f027607ff1a6fe7d72fad28108826963cf3",
    "ef9f251679d7e87698eecd6a119652900274a172",
    "6cd0736cc57849e4f7c5d38a3986432a9717fe39"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "19295b36d90e26616accee73b1f7743aab5df692": "Ybodychange",
    "4f18018b7abb405f38d269da096ec9fd80c81d9a": "Ybodychange",
    "c94f2cec3a4d46718aa4cd144fb32e328406b9b3": "Ybodychange",
    "dc84800184a58a26d370d9cc3ef094c20e687211": "Ybodychange",
    "93907baa0b033c1431dc7055116746fc9db508cc": "Ybodychange",
    "305ae48136d6e201de4451e824cb7b84f94ba2e0": "Ybodychange",
    "797159bbd4f80c92d8bfe6979b4dd91ce51d0afc": "Ybodychange",
    "e28015ed1b40278028cfb70c4c87d9bc95a2b6a6": "Ymodifierchange",
    "9f4d4e27fb1760b352cc5b301cd65a50d2d43ff6": "Ybodychange",
    "8628c1704b7d8c1a0ac01cea679c03245d11d330": "Ybodychange",
    "ec010a29362c6c5572f8681f4e7d0469176345e1": "Ybodychange",
    "89fb4d8ffd32b06db42cc3e21d2a89e99deb7732": "Ybodychange",
    "259edf8dca44de54033e96f7eb65a83aaa6096f2": "Ybodychange",
    "74231f027607ff1a6fe7d72fad28108826963cf3": "Ybodychange",
    "ef9f251679d7e87698eecd6a119652900274a172": "Ybodychange",
    "6cd0736cc57849e4f7c5d38a3986432a9717fe39": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 10.76,
      "commitsBetweenForRepo": 108,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,21 @@\n   protected void handleStoreEvent(RMStateStoreEvent event) {\n     this.writeLock.lock();\n     try {\n \n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Processing event of type \" + event.getType());\n-      }\n+      LOG.debug(\"Processing event of type {}\", event.getType());\n \n       final RMStateStoreState oldState \u003d getRMStateStoreState();\n \n       this.stateMachine.doTransition(event.getType(), event);\n \n       if (oldState !\u003d getRMStateStoreState()) {\n         LOG.info(\"RMStateStore state change from \" + oldState + \" to \"\n             + getRMStateStoreState());\n       }\n \n     } catch (InvalidStateTransitionException e) {\n       LOG.error(\"Can\u0027t handle this event at current state\", e);\n     } finally {\n       this.writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void handleStoreEvent(RMStateStoreEvent event) {\n    this.writeLock.lock();\n    try {\n\n      LOG.debug(\"Processing event of type {}\", event.getType());\n\n      final RMStateStoreState oldState \u003d getRMStateStoreState();\n\n      this.stateMachine.doTransition(event.getType(), event);\n\n      if (oldState !\u003d getRMStateStoreState()) {\n        LOG.info(\"RMStateStore state change from \" + oldState + \" to \"\n            + getRMStateStoreState());\n      }\n\n    } catch (InvalidStateTransitionException e) {\n      LOG.error(\"Can\u0027t handle this event at current state\", e);\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStore.java",
      "extendedDetails": {}
    },
    "19295b36d90e26616accee73b1f7743aab5df692": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3381. Fix typo InvalidStateTransitonException. Contributed by Brahma Reddy Battula.\n",
      "commitDate": "13/07/15 1:52 AM",
      "commitName": "19295b36d90e26616accee73b1f7743aab5df692",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "21/04/15 5:51 PM",
      "commitNameOld": "e71d0d87d9b388f211a8eb3d2cd9af347abf9bda",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 82.33,
      "commitsBetweenForRepo": 700,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   protected void handleStoreEvent(RMStateStoreEvent event) {\n     this.writeLock.lock();\n     try {\n \n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Processing event of type \" + event.getType());\n       }\n \n       final RMStateStoreState oldState \u003d getRMStateStoreState();\n \n       this.stateMachine.doTransition(event.getType(), event);\n \n       if (oldState !\u003d getRMStateStoreState()) {\n         LOG.info(\"RMStateStore state change from \" + oldState + \" to \"\n             + getRMStateStoreState());\n       }\n \n-    } catch (InvalidStateTransitonException e) {\n+    } catch (InvalidStateTransitionException e) {\n       LOG.error(\"Can\u0027t handle this event at current state\", e);\n     } finally {\n       this.writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void handleStoreEvent(RMStateStoreEvent event) {\n    this.writeLock.lock();\n    try {\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Processing event of type \" + event.getType());\n      }\n\n      final RMStateStoreState oldState \u003d getRMStateStoreState();\n\n      this.stateMachine.doTransition(event.getType(), event);\n\n      if (oldState !\u003d getRMStateStoreState()) {\n        LOG.info(\"RMStateStore state change from \" + oldState + \" to \"\n            + getRMStateStoreState());\n      }\n\n    } catch (InvalidStateTransitionException e) {\n      LOG.error(\"Can\u0027t handle this event at current state\", e);\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStore.java",
      "extendedDetails": {}
    },
    "4f18018b7abb405f38d269da096ec9fd80c81d9a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2946. Fixed potential deadlock in RMStateStore. Contributed by Rohith Sharmaks\n",
      "commitDate": "23/12/14 10:14 PM",
      "commitName": "4f18018b7abb405f38d269da096ec9fd80c81d9a",
      "commitAuthor": "Jian He",
      "commitDateOld": "19/12/14 4:56 PM",
      "commitNameOld": "808cba3821d5bc4267f69d14220757f01cd55715",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 4.22,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,7 +1,23 @@\n   protected void handleStoreEvent(RMStateStoreEvent event) {\n+    this.writeLock.lock();\n     try {\n+\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Processing event of type \" + event.getType());\n+      }\n+\n+      final RMStateStoreState oldState \u003d getRMStateStoreState();\n+\n       this.stateMachine.doTransition(event.getType(), event);\n+\n+      if (oldState !\u003d getRMStateStoreState()) {\n+        LOG.info(\"RMStateStore state change from \" + oldState + \" to \"\n+            + getRMStateStoreState());\n+      }\n+\n     } catch (InvalidStateTransitonException e) {\n       LOG.error(\"Can\u0027t handle this event at current state\", e);\n+    } finally {\n+      this.writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void handleStoreEvent(RMStateStoreEvent event) {\n    this.writeLock.lock();\n    try {\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Processing event of type \" + event.getType());\n      }\n\n      final RMStateStoreState oldState \u003d getRMStateStoreState();\n\n      this.stateMachine.doTransition(event.getType(), event);\n\n      if (oldState !\u003d getRMStateStoreState()) {\n        LOG.info(\"RMStateStore state change from \" + oldState + \" to \"\n            + getRMStateStoreState());\n      }\n\n    } catch (InvalidStateTransitonException e) {\n      LOG.error(\"Can\u0027t handle this event at current state\", e);\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStore.java",
      "extendedDetails": {}
    },
    "c94f2cec3a4d46718aa4cd144fb32e328406b9b3": {
      "type": "Ybodychange",
      "commitMessage": "Augmented RMStateStore with state machine. Contributed by Binglin Chang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1601491 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/06/14 12:44 PM",
      "commitName": "c94f2cec3a4d46718aa4cd144fb32e328406b9b3",
      "commitAuthor": "Jian He",
      "commitDateOld": "10/04/14 8:36 PM",
      "commitNameOld": "dc84800184a58a26d370d9cc3ef094c20e687211",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 59.67,
      "commitsBetweenForRepo": 320,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,102 +1,7 @@\n   protected void handleStoreEvent(RMStateStoreEvent event) {\n-    if (event.getType().equals(RMStateStoreEventType.STORE_APP)\n-        || event.getType().equals(RMStateStoreEventType.UPDATE_APP)) {\n-      ApplicationState appState \u003d null;\n-      if (event.getType().equals(RMStateStoreEventType.STORE_APP)) {\n-        appState \u003d ((RMStateStoreAppEvent) event).getAppState();\n-      } else {\n-        assert event.getType().equals(RMStateStoreEventType.UPDATE_APP);\n-        appState \u003d ((RMStateUpdateAppEvent) event).getAppState();\n-      }\n-\n-      Exception storedException \u003d null;\n-      ApplicationStateDataPBImpl appStateData \u003d\n-          (ApplicationStateDataPBImpl) ApplicationStateDataPBImpl\n-            .newApplicationStateData(appState.getSubmitTime(),\n-              appState.getStartTime(), appState.getUser(),\n-              appState.getApplicationSubmissionContext(), appState.getState(),\n-              appState.getDiagnostics(), appState.getFinishTime());\n-\n-      ApplicationId appId \u003d\n-          appState.getApplicationSubmissionContext().getApplicationId();\n-\n-      LOG.info(\"Storing info for app: \" + appId);\n-      try {\n-        if (event.getType().equals(RMStateStoreEventType.STORE_APP)) {\n-          storeApplicationStateInternal(appId, appStateData);\n-          notifyDoneStoringApplication(appId, storedException);\n-        } else {\n-          assert event.getType().equals(RMStateStoreEventType.UPDATE_APP);\n-          updateApplicationStateInternal(appId, appStateData);\n-          notifyDoneUpdatingApplication(appId, storedException);\n-        }\n-      } catch (Exception e) {\n-        LOG.error(\"Error storing/updating app: \" + appId, e);\n-        notifyStoreOperationFailed(e);\n-      }\n-    } else if (event.getType().equals(RMStateStoreEventType.STORE_APP_ATTEMPT)\n-        || event.getType().equals(RMStateStoreEventType.UPDATE_APP_ATTEMPT)) {\n-\n-      ApplicationAttemptState attemptState \u003d null;\n-      if (event.getType().equals(RMStateStoreEventType.STORE_APP_ATTEMPT)) {\n-        attemptState \u003d\n-            ((RMStateStoreAppAttemptEvent) event).getAppAttemptState();\n-      } else {\n-        assert event.getType().equals(RMStateStoreEventType.UPDATE_APP_ATTEMPT);\n-        attemptState \u003d\n-            ((RMStateUpdateAppAttemptEvent) event).getAppAttemptState();\n-      }\n-\n-      Exception storedException \u003d null;\n-      Credentials credentials \u003d attemptState.getAppAttemptCredentials();\n-      ByteBuffer appAttemptTokens \u003d null;\n-      try {\n-        if (credentials !\u003d null) {\n-          DataOutputBuffer dob \u003d new DataOutputBuffer();\n-          credentials.writeTokenStorageToStream(dob);\n-          appAttemptTokens \u003d ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\n-        }\n-        ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n-            (ApplicationAttemptStateDataPBImpl) ApplicationAttemptStateDataPBImpl\n-              .newApplicationAttemptStateData(attemptState.getAttemptId(),\n-                attemptState.getMasterContainer(), appAttemptTokens,\n-                attemptState.getStartTime(), attemptState.getState(),\n-                attemptState.getFinalTrackingUrl(),\n-                attemptState.getDiagnostics(),\n-                attemptState.getFinalApplicationStatus());\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Storing info for attempt: \" + attemptState.getAttemptId());\n-        }\n-        if (event.getType().equals(RMStateStoreEventType.STORE_APP_ATTEMPT)) {\n-          storeApplicationAttemptStateInternal(attemptState.getAttemptId(),\n-              attemptStateData);\n-          notifyDoneStoringApplicationAttempt(attemptState.getAttemptId(),\n-              storedException);\n-        } else {\n-          assert event.getType().equals(\n-            RMStateStoreEventType.UPDATE_APP_ATTEMPT);\n-          updateApplicationAttemptStateInternal(attemptState.getAttemptId(),\n-              attemptStateData);\n-          notifyDoneUpdatingApplicationAttempt(attemptState.getAttemptId(),\n-              storedException);\n-        }\n-      } catch (Exception e) {\n-        LOG.error(\n-            \"Error storing/updating appAttempt: \" + attemptState.getAttemptId(), e);\n-        notifyStoreOperationFailed(e);\n-      }\n-    } else if (event.getType().equals(RMStateStoreEventType.REMOVE_APP)) {\n-      ApplicationState appState \u003d\n-          ((RMStateStoreRemoveAppEvent) event).getAppState();\n-      ApplicationId appId \u003d appState.getAppId();\n-      LOG.info(\"Removing info for app: \" + appId);\n-      try {\n-        removeApplicationStateInternal(appState);\n-      } catch (Exception e) {\n-        LOG.error(\"Error removing app: \" + appId, e);\n-        notifyStoreOperationFailed(e);\n-      }\n-    } else {\n-      LOG.error(\"Unknown RMStateStoreEvent type: \" + event.getType());\n+    try {\n+      this.stateMachine.doTransition(event.getType(), event);\n+    } catch (InvalidStateTransitonException e) {\n+      LOG.error(\"Can\u0027t handle this event at current state\", e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void handleStoreEvent(RMStateStoreEvent event) {\n    try {\n      this.stateMachine.doTransition(event.getType(), event);\n    } catch (InvalidStateTransitonException e) {\n      LOG.error(\"Can\u0027t handle this event at current state\", e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStore.java",
      "extendedDetails": {}
    },
    "dc84800184a58a26d370d9cc3ef094c20e687211": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1924. Made ZKRMStateStore updateApplication(Attempt)StateInternal work when Application(Attempt) state hasn\u0027t been stored before. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1586547 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/04/14 8:36 PM",
      "commitName": "dc84800184a58a26d370d9cc3ef094c20e687211",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "21/03/14 9:12 PM",
      "commitNameOld": "ce56616037fc160ba875b496bdc369411bb873be",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 19.97,
      "commitsBetweenForRepo": 138,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,102 +1,102 @@\n   protected void handleStoreEvent(RMStateStoreEvent event) {\n     if (event.getType().equals(RMStateStoreEventType.STORE_APP)\n         || event.getType().equals(RMStateStoreEventType.UPDATE_APP)) {\n       ApplicationState appState \u003d null;\n       if (event.getType().equals(RMStateStoreEventType.STORE_APP)) {\n         appState \u003d ((RMStateStoreAppEvent) event).getAppState();\n       } else {\n         assert event.getType().equals(RMStateStoreEventType.UPDATE_APP);\n         appState \u003d ((RMStateUpdateAppEvent) event).getAppState();\n       }\n \n       Exception storedException \u003d null;\n       ApplicationStateDataPBImpl appStateData \u003d\n           (ApplicationStateDataPBImpl) ApplicationStateDataPBImpl\n             .newApplicationStateData(appState.getSubmitTime(),\n               appState.getStartTime(), appState.getUser(),\n               appState.getApplicationSubmissionContext(), appState.getState(),\n               appState.getDiagnostics(), appState.getFinishTime());\n \n       ApplicationId appId \u003d\n           appState.getApplicationSubmissionContext().getApplicationId();\n \n       LOG.info(\"Storing info for app: \" + appId);\n       try {\n         if (event.getType().equals(RMStateStoreEventType.STORE_APP)) {\n           storeApplicationStateInternal(appId, appStateData);\n           notifyDoneStoringApplication(appId, storedException);\n         } else {\n           assert event.getType().equals(RMStateStoreEventType.UPDATE_APP);\n           updateApplicationStateInternal(appId, appStateData);\n           notifyDoneUpdatingApplication(appId, storedException);\n         }\n       } catch (Exception e) {\n-        LOG.error(\"Error storing app: \" + appId, e);\n+        LOG.error(\"Error storing/updating app: \" + appId, e);\n         notifyStoreOperationFailed(e);\n       }\n     } else if (event.getType().equals(RMStateStoreEventType.STORE_APP_ATTEMPT)\n         || event.getType().equals(RMStateStoreEventType.UPDATE_APP_ATTEMPT)) {\n \n       ApplicationAttemptState attemptState \u003d null;\n       if (event.getType().equals(RMStateStoreEventType.STORE_APP_ATTEMPT)) {\n         attemptState \u003d\n             ((RMStateStoreAppAttemptEvent) event).getAppAttemptState();\n       } else {\n         assert event.getType().equals(RMStateStoreEventType.UPDATE_APP_ATTEMPT);\n         attemptState \u003d\n             ((RMStateUpdateAppAttemptEvent) event).getAppAttemptState();\n       }\n \n       Exception storedException \u003d null;\n       Credentials credentials \u003d attemptState.getAppAttemptCredentials();\n       ByteBuffer appAttemptTokens \u003d null;\n       try {\n         if (credentials !\u003d null) {\n           DataOutputBuffer dob \u003d new DataOutputBuffer();\n           credentials.writeTokenStorageToStream(dob);\n           appAttemptTokens \u003d ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\n         }\n         ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n             (ApplicationAttemptStateDataPBImpl) ApplicationAttemptStateDataPBImpl\n               .newApplicationAttemptStateData(attemptState.getAttemptId(),\n                 attemptState.getMasterContainer(), appAttemptTokens,\n                 attemptState.getStartTime(), attemptState.getState(),\n                 attemptState.getFinalTrackingUrl(),\n                 attemptState.getDiagnostics(),\n                 attemptState.getFinalApplicationStatus());\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Storing info for attempt: \" + attemptState.getAttemptId());\n         }\n         if (event.getType().equals(RMStateStoreEventType.STORE_APP_ATTEMPT)) {\n           storeApplicationAttemptStateInternal(attemptState.getAttemptId(),\n               attemptStateData);\n           notifyDoneStoringApplicationAttempt(attemptState.getAttemptId(),\n               storedException);\n         } else {\n           assert event.getType().equals(\n             RMStateStoreEventType.UPDATE_APP_ATTEMPT);\n           updateApplicationAttemptStateInternal(attemptState.getAttemptId(),\n               attemptStateData);\n           notifyDoneUpdatingApplicationAttempt(attemptState.getAttemptId(),\n               storedException);\n         }\n       } catch (Exception e) {\n         LOG.error(\n-            \"Error storing appAttempt: \" + attemptState.getAttemptId(), e);\n+            \"Error storing/updating appAttempt: \" + attemptState.getAttemptId(), e);\n         notifyStoreOperationFailed(e);\n       }\n     } else if (event.getType().equals(RMStateStoreEventType.REMOVE_APP)) {\n       ApplicationState appState \u003d\n           ((RMStateStoreRemoveAppEvent) event).getAppState();\n       ApplicationId appId \u003d appState.getAppId();\n       LOG.info(\"Removing info for app: \" + appId);\n       try {\n         removeApplicationStateInternal(appState);\n       } catch (Exception e) {\n         LOG.error(\"Error removing app: \" + appId, e);\n         notifyStoreOperationFailed(e);\n       }\n     } else {\n       LOG.error(\"Unknown RMStateStoreEvent type: \" + event.getType());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void handleStoreEvent(RMStateStoreEvent event) {\n    if (event.getType().equals(RMStateStoreEventType.STORE_APP)\n        || event.getType().equals(RMStateStoreEventType.UPDATE_APP)) {\n      ApplicationState appState \u003d null;\n      if (event.getType().equals(RMStateStoreEventType.STORE_APP)) {\n        appState \u003d ((RMStateStoreAppEvent) event).getAppState();\n      } else {\n        assert event.getType().equals(RMStateStoreEventType.UPDATE_APP);\n        appState \u003d ((RMStateUpdateAppEvent) event).getAppState();\n      }\n\n      Exception storedException \u003d null;\n      ApplicationStateDataPBImpl appStateData \u003d\n          (ApplicationStateDataPBImpl) ApplicationStateDataPBImpl\n            .newApplicationStateData(appState.getSubmitTime(),\n              appState.getStartTime(), appState.getUser(),\n              appState.getApplicationSubmissionContext(), appState.getState(),\n              appState.getDiagnostics(), appState.getFinishTime());\n\n      ApplicationId appId \u003d\n          appState.getApplicationSubmissionContext().getApplicationId();\n\n      LOG.info(\"Storing info for app: \" + appId);\n      try {\n        if (event.getType().equals(RMStateStoreEventType.STORE_APP)) {\n          storeApplicationStateInternal(appId, appStateData);\n          notifyDoneStoringApplication(appId, storedException);\n        } else {\n          assert event.getType().equals(RMStateStoreEventType.UPDATE_APP);\n          updateApplicationStateInternal(appId, appStateData);\n          notifyDoneUpdatingApplication(appId, storedException);\n        }\n      } catch (Exception e) {\n        LOG.error(\"Error storing/updating app: \" + appId, e);\n        notifyStoreOperationFailed(e);\n      }\n    } else if (event.getType().equals(RMStateStoreEventType.STORE_APP_ATTEMPT)\n        || event.getType().equals(RMStateStoreEventType.UPDATE_APP_ATTEMPT)) {\n\n      ApplicationAttemptState attemptState \u003d null;\n      if (event.getType().equals(RMStateStoreEventType.STORE_APP_ATTEMPT)) {\n        attemptState \u003d\n            ((RMStateStoreAppAttemptEvent) event).getAppAttemptState();\n      } else {\n        assert event.getType().equals(RMStateStoreEventType.UPDATE_APP_ATTEMPT);\n        attemptState \u003d\n            ((RMStateUpdateAppAttemptEvent) event).getAppAttemptState();\n      }\n\n      Exception storedException \u003d null;\n      Credentials credentials \u003d attemptState.getAppAttemptCredentials();\n      ByteBuffer appAttemptTokens \u003d null;\n      try {\n        if (credentials !\u003d null) {\n          DataOutputBuffer dob \u003d new DataOutputBuffer();\n          credentials.writeTokenStorageToStream(dob);\n          appAttemptTokens \u003d ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\n        }\n        ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n            (ApplicationAttemptStateDataPBImpl) ApplicationAttemptStateDataPBImpl\n              .newApplicationAttemptStateData(attemptState.getAttemptId(),\n                attemptState.getMasterContainer(), appAttemptTokens,\n                attemptState.getStartTime(), attemptState.getState(),\n                attemptState.getFinalTrackingUrl(),\n                attemptState.getDiagnostics(),\n                attemptState.getFinalApplicationStatus());\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Storing info for attempt: \" + attemptState.getAttemptId());\n        }\n        if (event.getType().equals(RMStateStoreEventType.STORE_APP_ATTEMPT)) {\n          storeApplicationAttemptStateInternal(attemptState.getAttemptId(),\n              attemptStateData);\n          notifyDoneStoringApplicationAttempt(attemptState.getAttemptId(),\n              storedException);\n        } else {\n          assert event.getType().equals(\n            RMStateStoreEventType.UPDATE_APP_ATTEMPT);\n          updateApplicationAttemptStateInternal(attemptState.getAttemptId(),\n              attemptStateData);\n          notifyDoneUpdatingApplicationAttempt(attemptState.getAttemptId(),\n              storedException);\n        }\n      } catch (Exception e) {\n        LOG.error(\n            \"Error storing/updating appAttempt: \" + attemptState.getAttemptId(), e);\n        notifyStoreOperationFailed(e);\n      }\n    } else if (event.getType().equals(RMStateStoreEventType.REMOVE_APP)) {\n      ApplicationState appState \u003d\n          ((RMStateStoreRemoveAppEvent) event).getAppState();\n      ApplicationId appId \u003d appState.getAppId();\n      LOG.info(\"Removing info for app: \" + appId);\n      try {\n        removeApplicationStateInternal(appState);\n      } catch (Exception e) {\n        LOG.error(\"Error removing app: \" + appId, e);\n        notifyStoreOperationFailed(e);\n      }\n    } else {\n      LOG.error(\"Unknown RMStateStoreEvent type: \" + event.getType());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStore.java",
      "extendedDetails": {}
    },
    "93907baa0b033c1431dc7055116746fc9db508cc": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1307. Redesign znode structure for Zookeeper based RM state-store for better organization and scalability. Contributed by Tsuyoshi OZAWA.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1552209 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/12/13 6:33 PM",
      "commitName": "93907baa0b033c1431dc7055116746fc9db508cc",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "07/12/13 8:17 PM",
      "commitNameOld": "305ae48136d6e201de4451e824cb7b84f94ba2e0",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 10.93,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,102 +1,102 @@\n   protected void handleStoreEvent(RMStateStoreEvent event) {\n     if (event.getType().equals(RMStateStoreEventType.STORE_APP)\n         || event.getType().equals(RMStateStoreEventType.UPDATE_APP)) {\n       ApplicationState appState \u003d null;\n       if (event.getType().equals(RMStateStoreEventType.STORE_APP)) {\n         appState \u003d ((RMStateStoreAppEvent) event).getAppState();\n       } else {\n         assert event.getType().equals(RMStateStoreEventType.UPDATE_APP);\n         appState \u003d ((RMStateUpdateAppEvent) event).getAppState();\n       }\n \n       Exception storedException \u003d null;\n       ApplicationStateDataPBImpl appStateData \u003d\n           (ApplicationStateDataPBImpl) ApplicationStateDataPBImpl\n             .newApplicationStateData(appState.getSubmitTime(),\n               appState.getStartTime(), appState.getUser(),\n               appState.getApplicationSubmissionContext(), appState.getState(),\n               appState.getDiagnostics(), appState.getFinishTime());\n \n       ApplicationId appId \u003d\n           appState.getApplicationSubmissionContext().getApplicationId();\n \n       LOG.info(\"Storing info for app: \" + appId);\n       try {\n         if (event.getType().equals(RMStateStoreEventType.STORE_APP)) {\n-          storeApplicationStateInternal(appId.toString(), appStateData);\n+          storeApplicationStateInternal(appId, appStateData);\n           notifyDoneStoringApplication(appId, storedException);\n         } else {\n           assert event.getType().equals(RMStateStoreEventType.UPDATE_APP);\n-          updateApplicationStateInternal(appId.toString(), appStateData);\n+          updateApplicationStateInternal(appId, appStateData);\n           notifyDoneUpdatingApplication(appId, storedException);\n         }\n       } catch (Exception e) {\n         LOG.error(\"Error storing app: \" + appId, e);\n         notifyStoreOperationFailed(e);\n       }\n     } else if (event.getType().equals(RMStateStoreEventType.STORE_APP_ATTEMPT)\n         || event.getType().equals(RMStateStoreEventType.UPDATE_APP_ATTEMPT)) {\n \n       ApplicationAttemptState attemptState \u003d null;\n       if (event.getType().equals(RMStateStoreEventType.STORE_APP_ATTEMPT)) {\n         attemptState \u003d\n             ((RMStateStoreAppAttemptEvent) event).getAppAttemptState();\n       } else {\n         assert event.getType().equals(RMStateStoreEventType.UPDATE_APP_ATTEMPT);\n         attemptState \u003d\n             ((RMStateUpdateAppAttemptEvent) event).getAppAttemptState();\n       }\n \n       Exception storedException \u003d null;\n       Credentials credentials \u003d attemptState.getAppAttemptCredentials();\n       ByteBuffer appAttemptTokens \u003d null;\n       try {\n         if (credentials !\u003d null) {\n           DataOutputBuffer dob \u003d new DataOutputBuffer();\n           credentials.writeTokenStorageToStream(dob);\n           appAttemptTokens \u003d ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\n         }\n         ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n             (ApplicationAttemptStateDataPBImpl) ApplicationAttemptStateDataPBImpl\n               .newApplicationAttemptStateData(attemptState.getAttemptId(),\n                 attemptState.getMasterContainer(), appAttemptTokens,\n                 attemptState.getStartTime(), attemptState.getState(),\n                 attemptState.getFinalTrackingUrl(),\n                 attemptState.getDiagnostics(),\n                 attemptState.getFinalApplicationStatus());\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Storing info for attempt: \" + attemptState.getAttemptId());\n         }\n         if (event.getType().equals(RMStateStoreEventType.STORE_APP_ATTEMPT)) {\n-          storeApplicationAttemptStateInternal(attemptState.getAttemptId()\n-            .toString(), attemptStateData);\n+          storeApplicationAttemptStateInternal(attemptState.getAttemptId(),\n+              attemptStateData);\n           notifyDoneStoringApplicationAttempt(attemptState.getAttemptId(),\n               storedException);\n         } else {\n           assert event.getType().equals(\n             RMStateStoreEventType.UPDATE_APP_ATTEMPT);\n-          updateApplicationAttemptStateInternal(attemptState.getAttemptId()\n-            .toString(), attemptStateData);\n+          updateApplicationAttemptStateInternal(attemptState.getAttemptId(),\n+              attemptStateData);\n           notifyDoneUpdatingApplicationAttempt(attemptState.getAttemptId(),\n               storedException);\n         }\n       } catch (Exception e) {\n         LOG.error(\n             \"Error storing appAttempt: \" + attemptState.getAttemptId(), e);\n         notifyStoreOperationFailed(e);\n       }\n     } else if (event.getType().equals(RMStateStoreEventType.REMOVE_APP)) {\n       ApplicationState appState \u003d\n           ((RMStateStoreRemoveAppEvent) event).getAppState();\n       ApplicationId appId \u003d appState.getAppId();\n       LOG.info(\"Removing info for app: \" + appId);\n       try {\n         removeApplicationStateInternal(appState);\n       } catch (Exception e) {\n         LOG.error(\"Error removing app: \" + appId, e);\n         notifyStoreOperationFailed(e);\n       }\n     } else {\n       LOG.error(\"Unknown RMStateStoreEvent type: \" + event.getType());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void handleStoreEvent(RMStateStoreEvent event) {\n    if (event.getType().equals(RMStateStoreEventType.STORE_APP)\n        || event.getType().equals(RMStateStoreEventType.UPDATE_APP)) {\n      ApplicationState appState \u003d null;\n      if (event.getType().equals(RMStateStoreEventType.STORE_APP)) {\n        appState \u003d ((RMStateStoreAppEvent) event).getAppState();\n      } else {\n        assert event.getType().equals(RMStateStoreEventType.UPDATE_APP);\n        appState \u003d ((RMStateUpdateAppEvent) event).getAppState();\n      }\n\n      Exception storedException \u003d null;\n      ApplicationStateDataPBImpl appStateData \u003d\n          (ApplicationStateDataPBImpl) ApplicationStateDataPBImpl\n            .newApplicationStateData(appState.getSubmitTime(),\n              appState.getStartTime(), appState.getUser(),\n              appState.getApplicationSubmissionContext(), appState.getState(),\n              appState.getDiagnostics(), appState.getFinishTime());\n\n      ApplicationId appId \u003d\n          appState.getApplicationSubmissionContext().getApplicationId();\n\n      LOG.info(\"Storing info for app: \" + appId);\n      try {\n        if (event.getType().equals(RMStateStoreEventType.STORE_APP)) {\n          storeApplicationStateInternal(appId, appStateData);\n          notifyDoneStoringApplication(appId, storedException);\n        } else {\n          assert event.getType().equals(RMStateStoreEventType.UPDATE_APP);\n          updateApplicationStateInternal(appId, appStateData);\n          notifyDoneUpdatingApplication(appId, storedException);\n        }\n      } catch (Exception e) {\n        LOG.error(\"Error storing app: \" + appId, e);\n        notifyStoreOperationFailed(e);\n      }\n    } else if (event.getType().equals(RMStateStoreEventType.STORE_APP_ATTEMPT)\n        || event.getType().equals(RMStateStoreEventType.UPDATE_APP_ATTEMPT)) {\n\n      ApplicationAttemptState attemptState \u003d null;\n      if (event.getType().equals(RMStateStoreEventType.STORE_APP_ATTEMPT)) {\n        attemptState \u003d\n            ((RMStateStoreAppAttemptEvent) event).getAppAttemptState();\n      } else {\n        assert event.getType().equals(RMStateStoreEventType.UPDATE_APP_ATTEMPT);\n        attemptState \u003d\n            ((RMStateUpdateAppAttemptEvent) event).getAppAttemptState();\n      }\n\n      Exception storedException \u003d null;\n      Credentials credentials \u003d attemptState.getAppAttemptCredentials();\n      ByteBuffer appAttemptTokens \u003d null;\n      try {\n        if (credentials !\u003d null) {\n          DataOutputBuffer dob \u003d new DataOutputBuffer();\n          credentials.writeTokenStorageToStream(dob);\n          appAttemptTokens \u003d ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\n        }\n        ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n            (ApplicationAttemptStateDataPBImpl) ApplicationAttemptStateDataPBImpl\n              .newApplicationAttemptStateData(attemptState.getAttemptId(),\n                attemptState.getMasterContainer(), appAttemptTokens,\n                attemptState.getStartTime(), attemptState.getState(),\n                attemptState.getFinalTrackingUrl(),\n                attemptState.getDiagnostics(),\n                attemptState.getFinalApplicationStatus());\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Storing info for attempt: \" + attemptState.getAttemptId());\n        }\n        if (event.getType().equals(RMStateStoreEventType.STORE_APP_ATTEMPT)) {\n          storeApplicationAttemptStateInternal(attemptState.getAttemptId(),\n              attemptStateData);\n          notifyDoneStoringApplicationAttempt(attemptState.getAttemptId(),\n              storedException);\n        } else {\n          assert event.getType().equals(\n            RMStateStoreEventType.UPDATE_APP_ATTEMPT);\n          updateApplicationAttemptStateInternal(attemptState.getAttemptId(),\n              attemptStateData);\n          notifyDoneUpdatingApplicationAttempt(attemptState.getAttemptId(),\n              storedException);\n        }\n      } catch (Exception e) {\n        LOG.error(\n            \"Error storing appAttempt: \" + attemptState.getAttemptId(), e);\n        notifyStoreOperationFailed(e);\n      }\n    } else if (event.getType().equals(RMStateStoreEventType.REMOVE_APP)) {\n      ApplicationState appState \u003d\n          ((RMStateStoreRemoveAppEvent) event).getAppState();\n      ApplicationId appId \u003d appState.getAppId();\n      LOG.info(\"Removing info for app: \" + appId);\n      try {\n        removeApplicationStateInternal(appState);\n      } catch (Exception e) {\n        LOG.error(\"Error removing app: \" + appId, e);\n        notifyStoreOperationFailed(e);\n      }\n    } else {\n      LOG.error(\"Unknown RMStateStoreEvent type: \" + event.getType());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStore.java",
      "extendedDetails": {}
    },
    "305ae48136d6e201de4451e824cb7b84f94ba2e0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1378. Implemented a cleaner of old finished applications from the RM state-store. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1548990 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/12/13 8:17 PM",
      "commitName": "305ae48136d6e201de4451e824cb7b84f94ba2e0",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "27/11/13 3:22 PM",
      "commitNameOld": "6369c8d81972a9a0b6ef41f4508fcb60d34e3d78",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 10.21,
      "commitsBetweenForRepo": 54,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,104 +1,102 @@\n   protected void handleStoreEvent(RMStateStoreEvent event) {\n     if (event.getType().equals(RMStateStoreEventType.STORE_APP)\n         || event.getType().equals(RMStateStoreEventType.UPDATE_APP)) {\n       ApplicationState appState \u003d null;\n       if (event.getType().equals(RMStateStoreEventType.STORE_APP)) {\n         appState \u003d ((RMStateStoreAppEvent) event).getAppState();\n       } else {\n         assert event.getType().equals(RMStateStoreEventType.UPDATE_APP);\n         appState \u003d ((RMStateUpdateAppEvent) event).getAppState();\n       }\n \n       Exception storedException \u003d null;\n       ApplicationStateDataPBImpl appStateData \u003d\n           (ApplicationStateDataPBImpl) ApplicationStateDataPBImpl\n             .newApplicationStateData(appState.getSubmitTime(),\n               appState.getStartTime(), appState.getUser(),\n               appState.getApplicationSubmissionContext(), appState.getState(),\n               appState.getDiagnostics(), appState.getFinishTime());\n \n       ApplicationId appId \u003d\n           appState.getApplicationSubmissionContext().getApplicationId();\n \n       LOG.info(\"Storing info for app: \" + appId);\n       try {\n         if (event.getType().equals(RMStateStoreEventType.STORE_APP)) {\n           storeApplicationStateInternal(appId.toString(), appStateData);\n           notifyDoneStoringApplication(appId, storedException);\n         } else {\n           assert event.getType().equals(RMStateStoreEventType.UPDATE_APP);\n           updateApplicationStateInternal(appId.toString(), appStateData);\n           notifyDoneUpdatingApplication(appId, storedException);\n         }\n       } catch (Exception e) {\n         LOG.error(\"Error storing app: \" + appId, e);\n         notifyStoreOperationFailed(e);\n       }\n     } else if (event.getType().equals(RMStateStoreEventType.STORE_APP_ATTEMPT)\n         || event.getType().equals(RMStateStoreEventType.UPDATE_APP_ATTEMPT)) {\n \n       ApplicationAttemptState attemptState \u003d null;\n       if (event.getType().equals(RMStateStoreEventType.STORE_APP_ATTEMPT)) {\n         attemptState \u003d\n             ((RMStateStoreAppAttemptEvent) event).getAppAttemptState();\n       } else {\n         assert event.getType().equals(RMStateStoreEventType.UPDATE_APP_ATTEMPT);\n         attemptState \u003d\n             ((RMStateUpdateAppAttemptEvent) event).getAppAttemptState();\n       }\n \n       Exception storedException \u003d null;\n       Credentials credentials \u003d attemptState.getAppAttemptCredentials();\n       ByteBuffer appAttemptTokens \u003d null;\n       try {\n         if (credentials !\u003d null) {\n           DataOutputBuffer dob \u003d new DataOutputBuffer();\n           credentials.writeTokenStorageToStream(dob);\n           appAttemptTokens \u003d ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\n         }\n         ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n             (ApplicationAttemptStateDataPBImpl) ApplicationAttemptStateDataPBImpl\n               .newApplicationAttemptStateData(attemptState.getAttemptId(),\n                 attemptState.getMasterContainer(), appAttemptTokens,\n                 attemptState.getStartTime(), attemptState.getState(),\n                 attemptState.getFinalTrackingUrl(),\n                 attemptState.getDiagnostics(),\n                 attemptState.getFinalApplicationStatus());\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Storing info for attempt: \" + attemptState.getAttemptId());\n         }\n         if (event.getType().equals(RMStateStoreEventType.STORE_APP_ATTEMPT)) {\n           storeApplicationAttemptStateInternal(attemptState.getAttemptId()\n             .toString(), attemptStateData);\n           notifyDoneStoringApplicationAttempt(attemptState.getAttemptId(),\n               storedException);\n         } else {\n           assert event.getType().equals(\n             RMStateStoreEventType.UPDATE_APP_ATTEMPT);\n           updateApplicationAttemptStateInternal(attemptState.getAttemptId()\n             .toString(), attemptStateData);\n           notifyDoneUpdatingApplicationAttempt(attemptState.getAttemptId(),\n               storedException);\n         }\n       } catch (Exception e) {\n         LOG.error(\n             \"Error storing appAttempt: \" + attemptState.getAttemptId(), e);\n         notifyStoreOperationFailed(e);\n       }\n     } else if (event.getType().equals(RMStateStoreEventType.REMOVE_APP)) {\n       ApplicationState appState \u003d\n           ((RMStateStoreRemoveAppEvent) event).getAppState();\n       ApplicationId appId \u003d appState.getAppId();\n-      Exception removedException \u003d null;\n       LOG.info(\"Removing info for app: \" + appId);\n       try {\n-        removeApplicationState(appState);\n-        notifyDoneRemovingApplcation(appId, removedException);\n+        removeApplicationStateInternal(appState);\n       } catch (Exception e) {\n         LOG.error(\"Error removing app: \" + appId, e);\n         notifyStoreOperationFailed(e);\n       }\n     } else {\n       LOG.error(\"Unknown RMStateStoreEvent type: \" + event.getType());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void handleStoreEvent(RMStateStoreEvent event) {\n    if (event.getType().equals(RMStateStoreEventType.STORE_APP)\n        || event.getType().equals(RMStateStoreEventType.UPDATE_APP)) {\n      ApplicationState appState \u003d null;\n      if (event.getType().equals(RMStateStoreEventType.STORE_APP)) {\n        appState \u003d ((RMStateStoreAppEvent) event).getAppState();\n      } else {\n        assert event.getType().equals(RMStateStoreEventType.UPDATE_APP);\n        appState \u003d ((RMStateUpdateAppEvent) event).getAppState();\n      }\n\n      Exception storedException \u003d null;\n      ApplicationStateDataPBImpl appStateData \u003d\n          (ApplicationStateDataPBImpl) ApplicationStateDataPBImpl\n            .newApplicationStateData(appState.getSubmitTime(),\n              appState.getStartTime(), appState.getUser(),\n              appState.getApplicationSubmissionContext(), appState.getState(),\n              appState.getDiagnostics(), appState.getFinishTime());\n\n      ApplicationId appId \u003d\n          appState.getApplicationSubmissionContext().getApplicationId();\n\n      LOG.info(\"Storing info for app: \" + appId);\n      try {\n        if (event.getType().equals(RMStateStoreEventType.STORE_APP)) {\n          storeApplicationStateInternal(appId.toString(), appStateData);\n          notifyDoneStoringApplication(appId, storedException);\n        } else {\n          assert event.getType().equals(RMStateStoreEventType.UPDATE_APP);\n          updateApplicationStateInternal(appId.toString(), appStateData);\n          notifyDoneUpdatingApplication(appId, storedException);\n        }\n      } catch (Exception e) {\n        LOG.error(\"Error storing app: \" + appId, e);\n        notifyStoreOperationFailed(e);\n      }\n    } else if (event.getType().equals(RMStateStoreEventType.STORE_APP_ATTEMPT)\n        || event.getType().equals(RMStateStoreEventType.UPDATE_APP_ATTEMPT)) {\n\n      ApplicationAttemptState attemptState \u003d null;\n      if (event.getType().equals(RMStateStoreEventType.STORE_APP_ATTEMPT)) {\n        attemptState \u003d\n            ((RMStateStoreAppAttemptEvent) event).getAppAttemptState();\n      } else {\n        assert event.getType().equals(RMStateStoreEventType.UPDATE_APP_ATTEMPT);\n        attemptState \u003d\n            ((RMStateUpdateAppAttemptEvent) event).getAppAttemptState();\n      }\n\n      Exception storedException \u003d null;\n      Credentials credentials \u003d attemptState.getAppAttemptCredentials();\n      ByteBuffer appAttemptTokens \u003d null;\n      try {\n        if (credentials !\u003d null) {\n          DataOutputBuffer dob \u003d new DataOutputBuffer();\n          credentials.writeTokenStorageToStream(dob);\n          appAttemptTokens \u003d ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\n        }\n        ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n            (ApplicationAttemptStateDataPBImpl) ApplicationAttemptStateDataPBImpl\n              .newApplicationAttemptStateData(attemptState.getAttemptId(),\n                attemptState.getMasterContainer(), appAttemptTokens,\n                attemptState.getStartTime(), attemptState.getState(),\n                attemptState.getFinalTrackingUrl(),\n                attemptState.getDiagnostics(),\n                attemptState.getFinalApplicationStatus());\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Storing info for attempt: \" + attemptState.getAttemptId());\n        }\n        if (event.getType().equals(RMStateStoreEventType.STORE_APP_ATTEMPT)) {\n          storeApplicationAttemptStateInternal(attemptState.getAttemptId()\n            .toString(), attemptStateData);\n          notifyDoneStoringApplicationAttempt(attemptState.getAttemptId(),\n              storedException);\n        } else {\n          assert event.getType().equals(\n            RMStateStoreEventType.UPDATE_APP_ATTEMPT);\n          updateApplicationAttemptStateInternal(attemptState.getAttemptId()\n            .toString(), attemptStateData);\n          notifyDoneUpdatingApplicationAttempt(attemptState.getAttemptId(),\n              storedException);\n        }\n      } catch (Exception e) {\n        LOG.error(\n            \"Error storing appAttempt: \" + attemptState.getAttemptId(), e);\n        notifyStoreOperationFailed(e);\n      }\n    } else if (event.getType().equals(RMStateStoreEventType.REMOVE_APP)) {\n      ApplicationState appState \u003d\n          ((RMStateStoreRemoveAppEvent) event).getAppState();\n      ApplicationId appId \u003d appState.getAppId();\n      LOG.info(\"Removing info for app: \" + appId);\n      try {\n        removeApplicationStateInternal(appState);\n      } catch (Exception e) {\n        LOG.error(\"Error removing app: \" + appId, e);\n        notifyStoreOperationFailed(e);\n      }\n    } else {\n      LOG.error(\"Unknown RMStateStoreEvent type: \" + event.getType());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStore.java",
      "extendedDetails": {}
    },
    "797159bbd4f80c92d8bfe6979b4dd91ce51d0afc": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1222. Make improvements in ZKRMStateStore for fencing (Karthik Kambatla via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1541995 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/11/13 9:53 AM",
      "commitName": "797159bbd4f80c92d8bfe6979b4dd91ce51d0afc",
      "commitAuthor": "Bikas Saha",
      "commitDateOld": "08/11/13 4:55 PM",
      "commitNameOld": "e28015ed1b40278028cfb70c4c87d9bc95a2b6a6",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 5.71,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,113 +1,104 @@\n   protected void handleStoreEvent(RMStateStoreEvent event) {\n     if (event.getType().equals(RMStateStoreEventType.STORE_APP)\n         || event.getType().equals(RMStateStoreEventType.UPDATE_APP)) {\n       ApplicationState appState \u003d null;\n       if (event.getType().equals(RMStateStoreEventType.STORE_APP)) {\n         appState \u003d ((RMStateStoreAppEvent) event).getAppState();\n       } else {\n         assert event.getType().equals(RMStateStoreEventType.UPDATE_APP);\n         appState \u003d ((RMStateUpdateAppEvent) event).getAppState();\n       }\n \n       Exception storedException \u003d null;\n       ApplicationStateDataPBImpl appStateData \u003d\n           (ApplicationStateDataPBImpl) ApplicationStateDataPBImpl\n             .newApplicationStateData(appState.getSubmitTime(),\n               appState.getStartTime(), appState.getUser(),\n               appState.getApplicationSubmissionContext(), appState.getState(),\n               appState.getDiagnostics(), appState.getFinishTime());\n \n       ApplicationId appId \u003d\n           appState.getApplicationSubmissionContext().getApplicationId();\n \n       LOG.info(\"Storing info for app: \" + appId);\n       try {\n         if (event.getType().equals(RMStateStoreEventType.STORE_APP)) {\n           storeApplicationStateInternal(appId.toString(), appStateData);\n+          notifyDoneStoringApplication(appId, storedException);\n         } else {\n           assert event.getType().equals(RMStateStoreEventType.UPDATE_APP);\n           updateApplicationStateInternal(appId.toString(), appStateData);\n+          notifyDoneUpdatingApplication(appId, storedException);\n         }\n       } catch (Exception e) {\n         LOG.error(\"Error storing app: \" + appId, e);\n-        storedException \u003d e;\n-      } finally {\n-        if (event.getType().equals(RMStateStoreEventType.STORE_APP)) {\n-          notifyDoneStoringApplication(appId, storedException);\n-        } else {\n-          notifyDoneUpdatingApplication(appId, storedException);\n-        }\n+        notifyStoreOperationFailed(e);\n       }\n     } else if (event.getType().equals(RMStateStoreEventType.STORE_APP_ATTEMPT)\n         || event.getType().equals(RMStateStoreEventType.UPDATE_APP_ATTEMPT)) {\n \n       ApplicationAttemptState attemptState \u003d null;\n       if (event.getType().equals(RMStateStoreEventType.STORE_APP_ATTEMPT)) {\n         attemptState \u003d\n             ((RMStateStoreAppAttemptEvent) event).getAppAttemptState();\n       } else {\n         assert event.getType().equals(RMStateStoreEventType.UPDATE_APP_ATTEMPT);\n         attemptState \u003d\n             ((RMStateUpdateAppAttemptEvent) event).getAppAttemptState();\n       }\n \n       Exception storedException \u003d null;\n       Credentials credentials \u003d attemptState.getAppAttemptCredentials();\n       ByteBuffer appAttemptTokens \u003d null;\n       try {\n         if (credentials !\u003d null) {\n           DataOutputBuffer dob \u003d new DataOutputBuffer();\n           credentials.writeTokenStorageToStream(dob);\n           appAttemptTokens \u003d ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\n         }\n         ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n             (ApplicationAttemptStateDataPBImpl) ApplicationAttemptStateDataPBImpl\n               .newApplicationAttemptStateData(attemptState.getAttemptId(),\n                 attemptState.getMasterContainer(), appAttemptTokens,\n                 attemptState.getStartTime(), attemptState.getState(),\n                 attemptState.getFinalTrackingUrl(),\n                 attemptState.getDiagnostics(),\n                 attemptState.getFinalApplicationStatus());\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Storing info for attempt: \" + attemptState.getAttemptId());\n         }\n         if (event.getType().equals(RMStateStoreEventType.STORE_APP_ATTEMPT)) {\n           storeApplicationAttemptStateInternal(attemptState.getAttemptId()\n             .toString(), attemptStateData);\n+          notifyDoneStoringApplicationAttempt(attemptState.getAttemptId(),\n+              storedException);\n         } else {\n           assert event.getType().equals(\n             RMStateStoreEventType.UPDATE_APP_ATTEMPT);\n           updateApplicationAttemptStateInternal(attemptState.getAttemptId()\n             .toString(), attemptStateData);\n+          notifyDoneUpdatingApplicationAttempt(attemptState.getAttemptId(),\n+              storedException);\n         }\n       } catch (Exception e) {\n-        LOG\n-          .error(\"Error storing appAttempt: \" + attemptState.getAttemptId(), e);\n-        storedException \u003d e;\n-      } finally {\n-        if (event.getType().equals(RMStateStoreEventType.STORE_APP_ATTEMPT)) {\n-          notifyDoneStoringApplicationAttempt(attemptState.getAttemptId(),\n-            storedException);\n-        } else {\n-          notifyDoneUpdatingApplicationAttempt(attemptState.getAttemptId(),\n-            storedException);\n-        }\n+        LOG.error(\n+            \"Error storing appAttempt: \" + attemptState.getAttemptId(), e);\n+        notifyStoreOperationFailed(e);\n       }\n     } else if (event.getType().equals(RMStateStoreEventType.REMOVE_APP)) {\n       ApplicationState appState \u003d\n           ((RMStateStoreRemoveAppEvent) event).getAppState();\n       ApplicationId appId \u003d appState.getAppId();\n       Exception removedException \u003d null;\n       LOG.info(\"Removing info for app: \" + appId);\n       try {\n         removeApplicationState(appState);\n+        notifyDoneRemovingApplcation(appId, removedException);\n       } catch (Exception e) {\n         LOG.error(\"Error removing app: \" + appId, e);\n-        removedException \u003d e;\n-      } finally {\n-        notifyDoneRemovingApplcation(appId, removedException);\n+        notifyStoreOperationFailed(e);\n       }\n     } else {\n       LOG.error(\"Unknown RMStateStoreEvent type: \" + event.getType());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void handleStoreEvent(RMStateStoreEvent event) {\n    if (event.getType().equals(RMStateStoreEventType.STORE_APP)\n        || event.getType().equals(RMStateStoreEventType.UPDATE_APP)) {\n      ApplicationState appState \u003d null;\n      if (event.getType().equals(RMStateStoreEventType.STORE_APP)) {\n        appState \u003d ((RMStateStoreAppEvent) event).getAppState();\n      } else {\n        assert event.getType().equals(RMStateStoreEventType.UPDATE_APP);\n        appState \u003d ((RMStateUpdateAppEvent) event).getAppState();\n      }\n\n      Exception storedException \u003d null;\n      ApplicationStateDataPBImpl appStateData \u003d\n          (ApplicationStateDataPBImpl) ApplicationStateDataPBImpl\n            .newApplicationStateData(appState.getSubmitTime(),\n              appState.getStartTime(), appState.getUser(),\n              appState.getApplicationSubmissionContext(), appState.getState(),\n              appState.getDiagnostics(), appState.getFinishTime());\n\n      ApplicationId appId \u003d\n          appState.getApplicationSubmissionContext().getApplicationId();\n\n      LOG.info(\"Storing info for app: \" + appId);\n      try {\n        if (event.getType().equals(RMStateStoreEventType.STORE_APP)) {\n          storeApplicationStateInternal(appId.toString(), appStateData);\n          notifyDoneStoringApplication(appId, storedException);\n        } else {\n          assert event.getType().equals(RMStateStoreEventType.UPDATE_APP);\n          updateApplicationStateInternal(appId.toString(), appStateData);\n          notifyDoneUpdatingApplication(appId, storedException);\n        }\n      } catch (Exception e) {\n        LOG.error(\"Error storing app: \" + appId, e);\n        notifyStoreOperationFailed(e);\n      }\n    } else if (event.getType().equals(RMStateStoreEventType.STORE_APP_ATTEMPT)\n        || event.getType().equals(RMStateStoreEventType.UPDATE_APP_ATTEMPT)) {\n\n      ApplicationAttemptState attemptState \u003d null;\n      if (event.getType().equals(RMStateStoreEventType.STORE_APP_ATTEMPT)) {\n        attemptState \u003d\n            ((RMStateStoreAppAttemptEvent) event).getAppAttemptState();\n      } else {\n        assert event.getType().equals(RMStateStoreEventType.UPDATE_APP_ATTEMPT);\n        attemptState \u003d\n            ((RMStateUpdateAppAttemptEvent) event).getAppAttemptState();\n      }\n\n      Exception storedException \u003d null;\n      Credentials credentials \u003d attemptState.getAppAttemptCredentials();\n      ByteBuffer appAttemptTokens \u003d null;\n      try {\n        if (credentials !\u003d null) {\n          DataOutputBuffer dob \u003d new DataOutputBuffer();\n          credentials.writeTokenStorageToStream(dob);\n          appAttemptTokens \u003d ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\n        }\n        ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n            (ApplicationAttemptStateDataPBImpl) ApplicationAttemptStateDataPBImpl\n              .newApplicationAttemptStateData(attemptState.getAttemptId(),\n                attemptState.getMasterContainer(), appAttemptTokens,\n                attemptState.getStartTime(), attemptState.getState(),\n                attemptState.getFinalTrackingUrl(),\n                attemptState.getDiagnostics(),\n                attemptState.getFinalApplicationStatus());\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Storing info for attempt: \" + attemptState.getAttemptId());\n        }\n        if (event.getType().equals(RMStateStoreEventType.STORE_APP_ATTEMPT)) {\n          storeApplicationAttemptStateInternal(attemptState.getAttemptId()\n            .toString(), attemptStateData);\n          notifyDoneStoringApplicationAttempt(attemptState.getAttemptId(),\n              storedException);\n        } else {\n          assert event.getType().equals(\n            RMStateStoreEventType.UPDATE_APP_ATTEMPT);\n          updateApplicationAttemptStateInternal(attemptState.getAttemptId()\n            .toString(), attemptStateData);\n          notifyDoneUpdatingApplicationAttempt(attemptState.getAttemptId(),\n              storedException);\n        }\n      } catch (Exception e) {\n        LOG.error(\n            \"Error storing appAttempt: \" + attemptState.getAttemptId(), e);\n        notifyStoreOperationFailed(e);\n      }\n    } else if (event.getType().equals(RMStateStoreEventType.REMOVE_APP)) {\n      ApplicationState appState \u003d\n          ((RMStateStoreRemoveAppEvent) event).getAppState();\n      ApplicationId appId \u003d appState.getAppId();\n      Exception removedException \u003d null;\n      LOG.info(\"Removing info for app: \" + appId);\n      try {\n        removeApplicationState(appState);\n        notifyDoneRemovingApplcation(appId, removedException);\n      } catch (Exception e) {\n        LOG.error(\"Error removing app: \" + appId, e);\n        notifyStoreOperationFailed(e);\n      }\n    } else {\n      LOG.error(\"Unknown RMStateStoreEvent type: \" + event.getType());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStore.java",
      "extendedDetails": {}
    },
    "e28015ed1b40278028cfb70c4c87d9bc95a2b6a6": {
      "type": "Ymodifierchange",
      "commitMessage": "YARN-1121. Changed ResourceManager\u0027s state-store to drain all events on shut-down. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1540232 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/11/13 4:55 PM",
      "commitName": "e28015ed1b40278028cfb70c4c87d9bc95a2b6a6",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "31/10/13 10:25 AM",
      "commitNameOld": "9f4d4e27fb1760b352cc5b301cd65a50d2d43ff6",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 8.31,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,113 +1,113 @@\n-  private synchronized void handleStoreEvent(RMStateStoreEvent event) {\n+  protected void handleStoreEvent(RMStateStoreEvent event) {\n     if (event.getType().equals(RMStateStoreEventType.STORE_APP)\n         || event.getType().equals(RMStateStoreEventType.UPDATE_APP)) {\n       ApplicationState appState \u003d null;\n       if (event.getType().equals(RMStateStoreEventType.STORE_APP)) {\n         appState \u003d ((RMStateStoreAppEvent) event).getAppState();\n       } else {\n         assert event.getType().equals(RMStateStoreEventType.UPDATE_APP);\n         appState \u003d ((RMStateUpdateAppEvent) event).getAppState();\n       }\n \n       Exception storedException \u003d null;\n       ApplicationStateDataPBImpl appStateData \u003d\n           (ApplicationStateDataPBImpl) ApplicationStateDataPBImpl\n             .newApplicationStateData(appState.getSubmitTime(),\n               appState.getStartTime(), appState.getUser(),\n               appState.getApplicationSubmissionContext(), appState.getState(),\n               appState.getDiagnostics(), appState.getFinishTime());\n \n       ApplicationId appId \u003d\n           appState.getApplicationSubmissionContext().getApplicationId();\n \n       LOG.info(\"Storing info for app: \" + appId);\n       try {\n         if (event.getType().equals(RMStateStoreEventType.STORE_APP)) {\n           storeApplicationStateInternal(appId.toString(), appStateData);\n         } else {\n           assert event.getType().equals(RMStateStoreEventType.UPDATE_APP);\n           updateApplicationStateInternal(appId.toString(), appStateData);\n         }\n       } catch (Exception e) {\n         LOG.error(\"Error storing app: \" + appId, e);\n         storedException \u003d e;\n       } finally {\n         if (event.getType().equals(RMStateStoreEventType.STORE_APP)) {\n           notifyDoneStoringApplication(appId, storedException);\n         } else {\n           notifyDoneUpdatingApplication(appId, storedException);\n         }\n       }\n     } else if (event.getType().equals(RMStateStoreEventType.STORE_APP_ATTEMPT)\n         || event.getType().equals(RMStateStoreEventType.UPDATE_APP_ATTEMPT)) {\n \n       ApplicationAttemptState attemptState \u003d null;\n       if (event.getType().equals(RMStateStoreEventType.STORE_APP_ATTEMPT)) {\n         attemptState \u003d\n             ((RMStateStoreAppAttemptEvent) event).getAppAttemptState();\n       } else {\n         assert event.getType().equals(RMStateStoreEventType.UPDATE_APP_ATTEMPT);\n         attemptState \u003d\n             ((RMStateUpdateAppAttemptEvent) event).getAppAttemptState();\n       }\n \n       Exception storedException \u003d null;\n       Credentials credentials \u003d attemptState.getAppAttemptCredentials();\n       ByteBuffer appAttemptTokens \u003d null;\n       try {\n         if (credentials !\u003d null) {\n           DataOutputBuffer dob \u003d new DataOutputBuffer();\n           credentials.writeTokenStorageToStream(dob);\n           appAttemptTokens \u003d ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\n         }\n         ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n             (ApplicationAttemptStateDataPBImpl) ApplicationAttemptStateDataPBImpl\n               .newApplicationAttemptStateData(attemptState.getAttemptId(),\n                 attemptState.getMasterContainer(), appAttemptTokens,\n                 attemptState.getStartTime(), attemptState.getState(),\n                 attemptState.getFinalTrackingUrl(),\n                 attemptState.getDiagnostics(),\n                 attemptState.getFinalApplicationStatus());\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Storing info for attempt: \" + attemptState.getAttemptId());\n         }\n         if (event.getType().equals(RMStateStoreEventType.STORE_APP_ATTEMPT)) {\n           storeApplicationAttemptStateInternal(attemptState.getAttemptId()\n             .toString(), attemptStateData);\n         } else {\n           assert event.getType().equals(\n             RMStateStoreEventType.UPDATE_APP_ATTEMPT);\n           updateApplicationAttemptStateInternal(attemptState.getAttemptId()\n             .toString(), attemptStateData);\n         }\n       } catch (Exception e) {\n         LOG\n           .error(\"Error storing appAttempt: \" + attemptState.getAttemptId(), e);\n         storedException \u003d e;\n       } finally {\n         if (event.getType().equals(RMStateStoreEventType.STORE_APP_ATTEMPT)) {\n           notifyDoneStoringApplicationAttempt(attemptState.getAttemptId(),\n             storedException);\n         } else {\n           notifyDoneUpdatingApplicationAttempt(attemptState.getAttemptId(),\n             storedException);\n         }\n       }\n     } else if (event.getType().equals(RMStateStoreEventType.REMOVE_APP)) {\n       ApplicationState appState \u003d\n           ((RMStateStoreRemoveAppEvent) event).getAppState();\n       ApplicationId appId \u003d appState.getAppId();\n       Exception removedException \u003d null;\n       LOG.info(\"Removing info for app: \" + appId);\n       try {\n         removeApplicationState(appState);\n       } catch (Exception e) {\n         LOG.error(\"Error removing app: \" + appId, e);\n         removedException \u003d e;\n       } finally {\n         notifyDoneRemovingApplcation(appId, removedException);\n       }\n     } else {\n       LOG.error(\"Unknown RMStateStoreEvent type: \" + event.getType());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void handleStoreEvent(RMStateStoreEvent event) {\n    if (event.getType().equals(RMStateStoreEventType.STORE_APP)\n        || event.getType().equals(RMStateStoreEventType.UPDATE_APP)) {\n      ApplicationState appState \u003d null;\n      if (event.getType().equals(RMStateStoreEventType.STORE_APP)) {\n        appState \u003d ((RMStateStoreAppEvent) event).getAppState();\n      } else {\n        assert event.getType().equals(RMStateStoreEventType.UPDATE_APP);\n        appState \u003d ((RMStateUpdateAppEvent) event).getAppState();\n      }\n\n      Exception storedException \u003d null;\n      ApplicationStateDataPBImpl appStateData \u003d\n          (ApplicationStateDataPBImpl) ApplicationStateDataPBImpl\n            .newApplicationStateData(appState.getSubmitTime(),\n              appState.getStartTime(), appState.getUser(),\n              appState.getApplicationSubmissionContext(), appState.getState(),\n              appState.getDiagnostics(), appState.getFinishTime());\n\n      ApplicationId appId \u003d\n          appState.getApplicationSubmissionContext().getApplicationId();\n\n      LOG.info(\"Storing info for app: \" + appId);\n      try {\n        if (event.getType().equals(RMStateStoreEventType.STORE_APP)) {\n          storeApplicationStateInternal(appId.toString(), appStateData);\n        } else {\n          assert event.getType().equals(RMStateStoreEventType.UPDATE_APP);\n          updateApplicationStateInternal(appId.toString(), appStateData);\n        }\n      } catch (Exception e) {\n        LOG.error(\"Error storing app: \" + appId, e);\n        storedException \u003d e;\n      } finally {\n        if (event.getType().equals(RMStateStoreEventType.STORE_APP)) {\n          notifyDoneStoringApplication(appId, storedException);\n        } else {\n          notifyDoneUpdatingApplication(appId, storedException);\n        }\n      }\n    } else if (event.getType().equals(RMStateStoreEventType.STORE_APP_ATTEMPT)\n        || event.getType().equals(RMStateStoreEventType.UPDATE_APP_ATTEMPT)) {\n\n      ApplicationAttemptState attemptState \u003d null;\n      if (event.getType().equals(RMStateStoreEventType.STORE_APP_ATTEMPT)) {\n        attemptState \u003d\n            ((RMStateStoreAppAttemptEvent) event).getAppAttemptState();\n      } else {\n        assert event.getType().equals(RMStateStoreEventType.UPDATE_APP_ATTEMPT);\n        attemptState \u003d\n            ((RMStateUpdateAppAttemptEvent) event).getAppAttemptState();\n      }\n\n      Exception storedException \u003d null;\n      Credentials credentials \u003d attemptState.getAppAttemptCredentials();\n      ByteBuffer appAttemptTokens \u003d null;\n      try {\n        if (credentials !\u003d null) {\n          DataOutputBuffer dob \u003d new DataOutputBuffer();\n          credentials.writeTokenStorageToStream(dob);\n          appAttemptTokens \u003d ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\n        }\n        ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n            (ApplicationAttemptStateDataPBImpl) ApplicationAttemptStateDataPBImpl\n              .newApplicationAttemptStateData(attemptState.getAttemptId(),\n                attemptState.getMasterContainer(), appAttemptTokens,\n                attemptState.getStartTime(), attemptState.getState(),\n                attemptState.getFinalTrackingUrl(),\n                attemptState.getDiagnostics(),\n                attemptState.getFinalApplicationStatus());\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Storing info for attempt: \" + attemptState.getAttemptId());\n        }\n        if (event.getType().equals(RMStateStoreEventType.STORE_APP_ATTEMPT)) {\n          storeApplicationAttemptStateInternal(attemptState.getAttemptId()\n            .toString(), attemptStateData);\n        } else {\n          assert event.getType().equals(\n            RMStateStoreEventType.UPDATE_APP_ATTEMPT);\n          updateApplicationAttemptStateInternal(attemptState.getAttemptId()\n            .toString(), attemptStateData);\n        }\n      } catch (Exception e) {\n        LOG\n          .error(\"Error storing appAttempt: \" + attemptState.getAttemptId(), e);\n        storedException \u003d e;\n      } finally {\n        if (event.getType().equals(RMStateStoreEventType.STORE_APP_ATTEMPT)) {\n          notifyDoneStoringApplicationAttempt(attemptState.getAttemptId(),\n            storedException);\n        } else {\n          notifyDoneUpdatingApplicationAttempt(attemptState.getAttemptId(),\n            storedException);\n        }\n      }\n    } else if (event.getType().equals(RMStateStoreEventType.REMOVE_APP)) {\n      ApplicationState appState \u003d\n          ((RMStateStoreRemoveAppEvent) event).getAppState();\n      ApplicationId appId \u003d appState.getAppId();\n      Exception removedException \u003d null;\n      LOG.info(\"Removing info for app: \" + appId);\n      try {\n        removeApplicationState(appState);\n      } catch (Exception e) {\n        LOG.error(\"Error removing app: \" + appId, e);\n        removedException \u003d e;\n      } finally {\n        notifyDoneRemovingApplcation(appId, removedException);\n      }\n    } else {\n      LOG.error(\"Unknown RMStateStoreEvent type: \" + event.getType());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStore.java",
      "extendedDetails": {
        "oldValue": "[private, synchronized]",
        "newValue": "[protected]"
      }
    },
    "9f4d4e27fb1760b352cc5b301cd65a50d2d43ff6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-891. Modified ResourceManager state-store to remember completed applications so that clients can get information about them post RM-restart. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1537560 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/10/13 10:25 AM",
      "commitName": "9f4d4e27fb1760b352cc5b301cd65a50d2d43ff6",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "19/09/13 1:39 PM",
      "commitNameOld": "8628c1704b7d8c1a0ac01cea679c03245d11d330",
      "commitAuthorOld": "Hitesh Shah",
      "daysBetweenCommits": 41.87,
      "commitsBetweenForRepo": 291,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,82 +1,113 @@\n   private synchronized void handleStoreEvent(RMStateStoreEvent event) {\n-    switch(event.getType()) {\n-      case STORE_APP:\n-        {\n-          ApplicationState apptState \u003d\n-              ((RMStateStoreAppEvent) event).getAppState();\n-          Exception storedException \u003d null;\n-          ApplicationStateDataPBImpl appStateData \u003d\n-              new ApplicationStateDataPBImpl();\n-          appStateData.setSubmitTime(apptState.getSubmitTime());\n-          appStateData.setApplicationSubmissionContext(\n-              apptState.getApplicationSubmissionContext());\n-          appStateData.setUser(apptState.getUser());\n-          ApplicationId appId \u003d\n-              apptState.getApplicationSubmissionContext().getApplicationId();\n+    if (event.getType().equals(RMStateStoreEventType.STORE_APP)\n+        || event.getType().equals(RMStateStoreEventType.UPDATE_APP)) {\n+      ApplicationState appState \u003d null;\n+      if (event.getType().equals(RMStateStoreEventType.STORE_APP)) {\n+        appState \u003d ((RMStateStoreAppEvent) event).getAppState();\n+      } else {\n+        assert event.getType().equals(RMStateStoreEventType.UPDATE_APP);\n+        appState \u003d ((RMStateUpdateAppEvent) event).getAppState();\n+      }\n \n-          LOG.info(\"Storing info for app: \" + appId);\n-          try {\n-            storeApplicationState(appId.toString(), appStateData);\n-          } catch (Exception e) {\n-            LOG.error(\"Error storing app: \" + appId, e);\n-            storedException \u003d e;\n-          } finally {\n-            notifyDoneStoringApplication(appId, storedException);\n-          }\n-        }\n-        break;\n-      case STORE_APP_ATTEMPT:\n-        {\n-          ApplicationAttemptState attemptState \u003d \n-                    ((RMStateStoreAppAttemptEvent) event).getAppAttemptState();\n-          Exception storedException \u003d null;\n+      Exception storedException \u003d null;\n+      ApplicationStateDataPBImpl appStateData \u003d\n+          (ApplicationStateDataPBImpl) ApplicationStateDataPBImpl\n+            .newApplicationStateData(appState.getSubmitTime(),\n+              appState.getStartTime(), appState.getUser(),\n+              appState.getApplicationSubmissionContext(), appState.getState(),\n+              appState.getDiagnostics(), appState.getFinishTime());\n \n-          Credentials credentials \u003d attemptState.getAppAttemptCredentials();\n-          ByteBuffer appAttemptTokens \u003d null;\n-          try {\n-            if(credentials !\u003d null){\n-              DataOutputBuffer dob \u003d new DataOutputBuffer();\n-                credentials.writeTokenStorageToStream(dob);\n-              appAttemptTokens \u003d\n-                  ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\n-            }\n-            ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n-              (ApplicationAttemptStateDataPBImpl) ApplicationAttemptStateDataPBImpl\n-                  .newApplicationAttemptStateData(attemptState.getAttemptId(),\n-                    attemptState.getMasterContainer(), appAttemptTokens);\n-            if (LOG.isDebugEnabled()) {\n-              LOG.debug(\"Storing info for attempt: \" + attemptState.getAttemptId());\n-            }\n-            storeApplicationAttemptState(attemptState.getAttemptId().toString(), \n-                                         attemptStateData);\n-          } catch (Exception e) {\n-            LOG.error(\"Error storing appAttempt: \" \n-                      + attemptState.getAttemptId(), e);\n-            storedException \u003d e;\n-          } finally {\n-            notifyDoneStoringApplicationAttempt(attemptState.getAttemptId(), \n-                                                storedException);            \n-          }\n+      ApplicationId appId \u003d\n+          appState.getApplicationSubmissionContext().getApplicationId();\n+\n+      LOG.info(\"Storing info for app: \" + appId);\n+      try {\n+        if (event.getType().equals(RMStateStoreEventType.STORE_APP)) {\n+          storeApplicationStateInternal(appId.toString(), appStateData);\n+        } else {\n+          assert event.getType().equals(RMStateStoreEventType.UPDATE_APP);\n+          updateApplicationStateInternal(appId.toString(), appStateData);\n         }\n-        break;\n-      case REMOVE_APP:\n-        {\n-          ApplicationState appState \u003d \n-                          ((RMStateStoreRemoveAppEvent) event).getAppState();\n-          ApplicationId appId \u003d appState.getAppId();\n-          Exception removedException \u003d null;\n-          LOG.info(\"Removing info for app: \" + appId);\n-          try {\n-            removeApplicationState(appState);\n-          } catch (Exception e) {\n-            LOG.error(\"Error removing app: \" + appId, e);\n-            removedException \u003d e;\n-          } finally {\n-            notifyDoneRemovingApplcation(appId, removedException);\n-          }\n+      } catch (Exception e) {\n+        LOG.error(\"Error storing app: \" + appId, e);\n+        storedException \u003d e;\n+      } finally {\n+        if (event.getType().equals(RMStateStoreEventType.STORE_APP)) {\n+          notifyDoneStoringApplication(appId, storedException);\n+        } else {\n+          notifyDoneUpdatingApplication(appId, storedException);\n         }\n-        break;\n-      default:\n-        LOG.error(\"Unknown RMStateStoreEvent type: \" + event.getType());\n+      }\n+    } else if (event.getType().equals(RMStateStoreEventType.STORE_APP_ATTEMPT)\n+        || event.getType().equals(RMStateStoreEventType.UPDATE_APP_ATTEMPT)) {\n+\n+      ApplicationAttemptState attemptState \u003d null;\n+      if (event.getType().equals(RMStateStoreEventType.STORE_APP_ATTEMPT)) {\n+        attemptState \u003d\n+            ((RMStateStoreAppAttemptEvent) event).getAppAttemptState();\n+      } else {\n+        assert event.getType().equals(RMStateStoreEventType.UPDATE_APP_ATTEMPT);\n+        attemptState \u003d\n+            ((RMStateUpdateAppAttemptEvent) event).getAppAttemptState();\n+      }\n+\n+      Exception storedException \u003d null;\n+      Credentials credentials \u003d attemptState.getAppAttemptCredentials();\n+      ByteBuffer appAttemptTokens \u003d null;\n+      try {\n+        if (credentials !\u003d null) {\n+          DataOutputBuffer dob \u003d new DataOutputBuffer();\n+          credentials.writeTokenStorageToStream(dob);\n+          appAttemptTokens \u003d ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\n+        }\n+        ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n+            (ApplicationAttemptStateDataPBImpl) ApplicationAttemptStateDataPBImpl\n+              .newApplicationAttemptStateData(attemptState.getAttemptId(),\n+                attemptState.getMasterContainer(), appAttemptTokens,\n+                attemptState.getStartTime(), attemptState.getState(),\n+                attemptState.getFinalTrackingUrl(),\n+                attemptState.getDiagnostics(),\n+                attemptState.getFinalApplicationStatus());\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Storing info for attempt: \" + attemptState.getAttemptId());\n+        }\n+        if (event.getType().equals(RMStateStoreEventType.STORE_APP_ATTEMPT)) {\n+          storeApplicationAttemptStateInternal(attemptState.getAttemptId()\n+            .toString(), attemptStateData);\n+        } else {\n+          assert event.getType().equals(\n+            RMStateStoreEventType.UPDATE_APP_ATTEMPT);\n+          updateApplicationAttemptStateInternal(attemptState.getAttemptId()\n+            .toString(), attemptStateData);\n+        }\n+      } catch (Exception e) {\n+        LOG\n+          .error(\"Error storing appAttempt: \" + attemptState.getAttemptId(), e);\n+        storedException \u003d e;\n+      } finally {\n+        if (event.getType().equals(RMStateStoreEventType.STORE_APP_ATTEMPT)) {\n+          notifyDoneStoringApplicationAttempt(attemptState.getAttemptId(),\n+            storedException);\n+        } else {\n+          notifyDoneUpdatingApplicationAttempt(attemptState.getAttemptId(),\n+            storedException);\n+        }\n+      }\n+    } else if (event.getType().equals(RMStateStoreEventType.REMOVE_APP)) {\n+      ApplicationState appState \u003d\n+          ((RMStateStoreRemoveAppEvent) event).getAppState();\n+      ApplicationId appId \u003d appState.getAppId();\n+      Exception removedException \u003d null;\n+      LOG.info(\"Removing info for app: \" + appId);\n+      try {\n+        removeApplicationState(appState);\n+      } catch (Exception e) {\n+        LOG.error(\"Error removing app: \" + appId, e);\n+        removedException \u003d e;\n+      } finally {\n+        notifyDoneRemovingApplcation(appId, removedException);\n+      }\n+    } else {\n+      LOG.error(\"Unknown RMStateStoreEvent type: \" + event.getType());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void handleStoreEvent(RMStateStoreEvent event) {\n    if (event.getType().equals(RMStateStoreEventType.STORE_APP)\n        || event.getType().equals(RMStateStoreEventType.UPDATE_APP)) {\n      ApplicationState appState \u003d null;\n      if (event.getType().equals(RMStateStoreEventType.STORE_APP)) {\n        appState \u003d ((RMStateStoreAppEvent) event).getAppState();\n      } else {\n        assert event.getType().equals(RMStateStoreEventType.UPDATE_APP);\n        appState \u003d ((RMStateUpdateAppEvent) event).getAppState();\n      }\n\n      Exception storedException \u003d null;\n      ApplicationStateDataPBImpl appStateData \u003d\n          (ApplicationStateDataPBImpl) ApplicationStateDataPBImpl\n            .newApplicationStateData(appState.getSubmitTime(),\n              appState.getStartTime(), appState.getUser(),\n              appState.getApplicationSubmissionContext(), appState.getState(),\n              appState.getDiagnostics(), appState.getFinishTime());\n\n      ApplicationId appId \u003d\n          appState.getApplicationSubmissionContext().getApplicationId();\n\n      LOG.info(\"Storing info for app: \" + appId);\n      try {\n        if (event.getType().equals(RMStateStoreEventType.STORE_APP)) {\n          storeApplicationStateInternal(appId.toString(), appStateData);\n        } else {\n          assert event.getType().equals(RMStateStoreEventType.UPDATE_APP);\n          updateApplicationStateInternal(appId.toString(), appStateData);\n        }\n      } catch (Exception e) {\n        LOG.error(\"Error storing app: \" + appId, e);\n        storedException \u003d e;\n      } finally {\n        if (event.getType().equals(RMStateStoreEventType.STORE_APP)) {\n          notifyDoneStoringApplication(appId, storedException);\n        } else {\n          notifyDoneUpdatingApplication(appId, storedException);\n        }\n      }\n    } else if (event.getType().equals(RMStateStoreEventType.STORE_APP_ATTEMPT)\n        || event.getType().equals(RMStateStoreEventType.UPDATE_APP_ATTEMPT)) {\n\n      ApplicationAttemptState attemptState \u003d null;\n      if (event.getType().equals(RMStateStoreEventType.STORE_APP_ATTEMPT)) {\n        attemptState \u003d\n            ((RMStateStoreAppAttemptEvent) event).getAppAttemptState();\n      } else {\n        assert event.getType().equals(RMStateStoreEventType.UPDATE_APP_ATTEMPT);\n        attemptState \u003d\n            ((RMStateUpdateAppAttemptEvent) event).getAppAttemptState();\n      }\n\n      Exception storedException \u003d null;\n      Credentials credentials \u003d attemptState.getAppAttemptCredentials();\n      ByteBuffer appAttemptTokens \u003d null;\n      try {\n        if (credentials !\u003d null) {\n          DataOutputBuffer dob \u003d new DataOutputBuffer();\n          credentials.writeTokenStorageToStream(dob);\n          appAttemptTokens \u003d ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\n        }\n        ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n            (ApplicationAttemptStateDataPBImpl) ApplicationAttemptStateDataPBImpl\n              .newApplicationAttemptStateData(attemptState.getAttemptId(),\n                attemptState.getMasterContainer(), appAttemptTokens,\n                attemptState.getStartTime(), attemptState.getState(),\n                attemptState.getFinalTrackingUrl(),\n                attemptState.getDiagnostics(),\n                attemptState.getFinalApplicationStatus());\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Storing info for attempt: \" + attemptState.getAttemptId());\n        }\n        if (event.getType().equals(RMStateStoreEventType.STORE_APP_ATTEMPT)) {\n          storeApplicationAttemptStateInternal(attemptState.getAttemptId()\n            .toString(), attemptStateData);\n        } else {\n          assert event.getType().equals(\n            RMStateStoreEventType.UPDATE_APP_ATTEMPT);\n          updateApplicationAttemptStateInternal(attemptState.getAttemptId()\n            .toString(), attemptStateData);\n        }\n      } catch (Exception e) {\n        LOG\n          .error(\"Error storing appAttempt: \" + attemptState.getAttemptId(), e);\n        storedException \u003d e;\n      } finally {\n        if (event.getType().equals(RMStateStoreEventType.STORE_APP_ATTEMPT)) {\n          notifyDoneStoringApplicationAttempt(attemptState.getAttemptId(),\n            storedException);\n        } else {\n          notifyDoneUpdatingApplicationAttempt(attemptState.getAttemptId(),\n            storedException);\n        }\n      }\n    } else if (event.getType().equals(RMStateStoreEventType.REMOVE_APP)) {\n      ApplicationState appState \u003d\n          ((RMStateStoreRemoveAppEvent) event).getAppState();\n      ApplicationId appId \u003d appState.getAppId();\n      Exception removedException \u003d null;\n      LOG.info(\"Removing info for app: \" + appId);\n      try {\n        removeApplicationState(appState);\n      } catch (Exception e) {\n        LOG.error(\"Error removing app: \" + appId, e);\n        removedException \u003d e;\n      } finally {\n        notifyDoneRemovingApplcation(appId, removedException);\n      }\n    } else {\n      LOG.error(\"Unknown RMStateStoreEvent type: \" + event.getType());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStore.java",
      "extendedDetails": {}
    },
    "8628c1704b7d8c1a0ac01cea679c03245d11d330": {
      "type": "Ybodychange",
      "commitMessage": "YARN-353. Add Zookeeper-based store implementation for RMStateStore. Contributed by Bikas Saha, Jian He and Karthik Kambatla.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1524829 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/09/13 1:39 PM",
      "commitName": "8628c1704b7d8c1a0ac01cea679c03245d11d330",
      "commitAuthor": "Hitesh Shah",
      "commitDateOld": "14/09/13 6:01 PM",
      "commitNameOld": "ec010a29362c6c5572f8681f4e7d0469176345e1",
      "commitAuthorOld": "Bikas Saha",
      "daysBetweenCommits": 4.82,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,81 +1,82 @@\n   private synchronized void handleStoreEvent(RMStateStoreEvent event) {\n     switch(event.getType()) {\n       case STORE_APP:\n         {\n           ApplicationState apptState \u003d\n               ((RMStateStoreAppEvent) event).getAppState();\n           Exception storedException \u003d null;\n           ApplicationStateDataPBImpl appStateData \u003d\n               new ApplicationStateDataPBImpl();\n           appStateData.setSubmitTime(apptState.getSubmitTime());\n           appStateData.setApplicationSubmissionContext(\n               apptState.getApplicationSubmissionContext());\n           appStateData.setUser(apptState.getUser());\n           ApplicationId appId \u003d\n               apptState.getApplicationSubmissionContext().getApplicationId();\n \n           LOG.info(\"Storing info for app: \" + appId);\n           try {\n             storeApplicationState(appId.toString(), appStateData);\n           } catch (Exception e) {\n             LOG.error(\"Error storing app: \" + appId, e);\n             storedException \u003d e;\n           } finally {\n             notifyDoneStoringApplication(appId, storedException);\n           }\n         }\n         break;\n       case STORE_APP_ATTEMPT:\n         {\n           ApplicationAttemptState attemptState \u003d \n                     ((RMStateStoreAppAttemptEvent) event).getAppAttemptState();\n           Exception storedException \u003d null;\n \n           Credentials credentials \u003d attemptState.getAppAttemptCredentials();\n           ByteBuffer appAttemptTokens \u003d null;\n           try {\n             if(credentials !\u003d null){\n               DataOutputBuffer dob \u003d new DataOutputBuffer();\n                 credentials.writeTokenStorageToStream(dob);\n               appAttemptTokens \u003d\n                   ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\n             }\n             ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n               (ApplicationAttemptStateDataPBImpl) ApplicationAttemptStateDataPBImpl\n                   .newApplicationAttemptStateData(attemptState.getAttemptId(),\n                     attemptState.getMasterContainer(), appAttemptTokens);\n-\n-            LOG.info(\"Storing info for attempt: \" + attemptState.getAttemptId());\n+            if (LOG.isDebugEnabled()) {\n+              LOG.debug(\"Storing info for attempt: \" + attemptState.getAttemptId());\n+            }\n             storeApplicationAttemptState(attemptState.getAttemptId().toString(), \n                                          attemptStateData);\n           } catch (Exception e) {\n             LOG.error(\"Error storing appAttempt: \" \n                       + attemptState.getAttemptId(), e);\n             storedException \u003d e;\n           } finally {\n             notifyDoneStoringApplicationAttempt(attemptState.getAttemptId(), \n                                                 storedException);            \n           }\n         }\n         break;\n       case REMOVE_APP:\n         {\n           ApplicationState appState \u003d \n                           ((RMStateStoreRemoveAppEvent) event).getAppState();\n           ApplicationId appId \u003d appState.getAppId();\n           Exception removedException \u003d null;\n           LOG.info(\"Removing info for app: \" + appId);\n           try {\n             removeApplicationState(appState);\n           } catch (Exception e) {\n             LOG.error(\"Error removing app: \" + appId, e);\n             removedException \u003d e;\n           } finally {\n             notifyDoneRemovingApplcation(appId, removedException);\n           }\n         }\n         break;\n       default:\n         LOG.error(\"Unknown RMStateStoreEvent type: \" + event.getType());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void handleStoreEvent(RMStateStoreEvent event) {\n    switch(event.getType()) {\n      case STORE_APP:\n        {\n          ApplicationState apptState \u003d\n              ((RMStateStoreAppEvent) event).getAppState();\n          Exception storedException \u003d null;\n          ApplicationStateDataPBImpl appStateData \u003d\n              new ApplicationStateDataPBImpl();\n          appStateData.setSubmitTime(apptState.getSubmitTime());\n          appStateData.setApplicationSubmissionContext(\n              apptState.getApplicationSubmissionContext());\n          appStateData.setUser(apptState.getUser());\n          ApplicationId appId \u003d\n              apptState.getApplicationSubmissionContext().getApplicationId();\n\n          LOG.info(\"Storing info for app: \" + appId);\n          try {\n            storeApplicationState(appId.toString(), appStateData);\n          } catch (Exception e) {\n            LOG.error(\"Error storing app: \" + appId, e);\n            storedException \u003d e;\n          } finally {\n            notifyDoneStoringApplication(appId, storedException);\n          }\n        }\n        break;\n      case STORE_APP_ATTEMPT:\n        {\n          ApplicationAttemptState attemptState \u003d \n                    ((RMStateStoreAppAttemptEvent) event).getAppAttemptState();\n          Exception storedException \u003d null;\n\n          Credentials credentials \u003d attemptState.getAppAttemptCredentials();\n          ByteBuffer appAttemptTokens \u003d null;\n          try {\n            if(credentials !\u003d null){\n              DataOutputBuffer dob \u003d new DataOutputBuffer();\n                credentials.writeTokenStorageToStream(dob);\n              appAttemptTokens \u003d\n                  ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\n            }\n            ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n              (ApplicationAttemptStateDataPBImpl) ApplicationAttemptStateDataPBImpl\n                  .newApplicationAttemptStateData(attemptState.getAttemptId(),\n                    attemptState.getMasterContainer(), appAttemptTokens);\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Storing info for attempt: \" + attemptState.getAttemptId());\n            }\n            storeApplicationAttemptState(attemptState.getAttemptId().toString(), \n                                         attemptStateData);\n          } catch (Exception e) {\n            LOG.error(\"Error storing appAttempt: \" \n                      + attemptState.getAttemptId(), e);\n            storedException \u003d e;\n          } finally {\n            notifyDoneStoringApplicationAttempt(attemptState.getAttemptId(), \n                                                storedException);            \n          }\n        }\n        break;\n      case REMOVE_APP:\n        {\n          ApplicationState appState \u003d \n                          ((RMStateStoreRemoveAppEvent) event).getAppState();\n          ApplicationId appId \u003d appState.getAppId();\n          Exception removedException \u003d null;\n          LOG.info(\"Removing info for app: \" + appId);\n          try {\n            removeApplicationState(appState);\n          } catch (Exception e) {\n            LOG.error(\"Error removing app: \" + appId, e);\n            removedException \u003d e;\n          } finally {\n            notifyDoneRemovingApplcation(appId, removedException);\n          }\n        }\n        break;\n      default:\n        LOG.error(\"Unknown RMStateStoreEvent type: \" + event.getType());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStore.java",
      "extendedDetails": {}
    },
    "ec010a29362c6c5572f8681f4e7d0469176345e1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-540. Race condition causing RM to potentially relaunch already unregistered AMs on RM restart (Jian He via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1523376 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/09/13 6:01 PM",
      "commitName": "ec010a29362c6c5572f8681f4e7d0469176345e1",
      "commitAuthor": "Bikas Saha",
      "commitDateOld": "29/08/13 6:12 PM",
      "commitNameOld": "89fb4d8ffd32b06db42cc3e21d2a89e99deb7732",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 15.99,
      "commitsBetweenForRepo": 68,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,78 +1,81 @@\n   private synchronized void handleStoreEvent(RMStateStoreEvent event) {\n     switch(event.getType()) {\n       case STORE_APP:\n         {\n           ApplicationState apptState \u003d\n               ((RMStateStoreAppEvent) event).getAppState();\n           Exception storedException \u003d null;\n           ApplicationStateDataPBImpl appStateData \u003d\n               new ApplicationStateDataPBImpl();\n           appStateData.setSubmitTime(apptState.getSubmitTime());\n           appStateData.setApplicationSubmissionContext(\n               apptState.getApplicationSubmissionContext());\n           appStateData.setUser(apptState.getUser());\n           ApplicationId appId \u003d\n               apptState.getApplicationSubmissionContext().getApplicationId();\n \n           LOG.info(\"Storing info for app: \" + appId);\n           try {\n             storeApplicationState(appId.toString(), appStateData);\n           } catch (Exception e) {\n             LOG.error(\"Error storing app: \" + appId, e);\n             storedException \u003d e;\n           } finally {\n             notifyDoneStoringApplication(appId, storedException);\n           }\n         }\n         break;\n       case STORE_APP_ATTEMPT:\n         {\n           ApplicationAttemptState attemptState \u003d \n                     ((RMStateStoreAppAttemptEvent) event).getAppAttemptState();\n           Exception storedException \u003d null;\n \n           Credentials credentials \u003d attemptState.getAppAttemptCredentials();\n           ByteBuffer appAttemptTokens \u003d null;\n           try {\n             if(credentials !\u003d null){\n               DataOutputBuffer dob \u003d new DataOutputBuffer();\n                 credentials.writeTokenStorageToStream(dob);\n               appAttemptTokens \u003d\n                   ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\n             }\n             ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n               (ApplicationAttemptStateDataPBImpl) ApplicationAttemptStateDataPBImpl\n                   .newApplicationAttemptStateData(attemptState.getAttemptId(),\n                     attemptState.getMasterContainer(), appAttemptTokens);\n \n             LOG.info(\"Storing info for attempt: \" + attemptState.getAttemptId());\n             storeApplicationAttemptState(attemptState.getAttemptId().toString(), \n                                          attemptStateData);\n           } catch (Exception e) {\n             LOG.error(\"Error storing appAttempt: \" \n                       + attemptState.getAttemptId(), e);\n             storedException \u003d e;\n           } finally {\n             notifyDoneStoringApplicationAttempt(attemptState.getAttemptId(), \n                                                 storedException);            \n           }\n         }\n         break;\n       case REMOVE_APP:\n         {\n           ApplicationState appState \u003d \n                           ((RMStateStoreRemoveAppEvent) event).getAppState();\n           ApplicationId appId \u003d appState.getAppId();\n-          \n+          Exception removedException \u003d null;\n           LOG.info(\"Removing info for app: \" + appId);\n           try {\n             removeApplicationState(appState);\n           } catch (Exception e) {\n             LOG.error(\"Error removing app: \" + appId, e);\n+            removedException \u003d e;\n+          } finally {\n+            notifyDoneRemovingApplcation(appId, removedException);\n           }\n         }\n         break;\n       default:\n         LOG.error(\"Unknown RMStateStoreEvent type: \" + event.getType());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void handleStoreEvent(RMStateStoreEvent event) {\n    switch(event.getType()) {\n      case STORE_APP:\n        {\n          ApplicationState apptState \u003d\n              ((RMStateStoreAppEvent) event).getAppState();\n          Exception storedException \u003d null;\n          ApplicationStateDataPBImpl appStateData \u003d\n              new ApplicationStateDataPBImpl();\n          appStateData.setSubmitTime(apptState.getSubmitTime());\n          appStateData.setApplicationSubmissionContext(\n              apptState.getApplicationSubmissionContext());\n          appStateData.setUser(apptState.getUser());\n          ApplicationId appId \u003d\n              apptState.getApplicationSubmissionContext().getApplicationId();\n\n          LOG.info(\"Storing info for app: \" + appId);\n          try {\n            storeApplicationState(appId.toString(), appStateData);\n          } catch (Exception e) {\n            LOG.error(\"Error storing app: \" + appId, e);\n            storedException \u003d e;\n          } finally {\n            notifyDoneStoringApplication(appId, storedException);\n          }\n        }\n        break;\n      case STORE_APP_ATTEMPT:\n        {\n          ApplicationAttemptState attemptState \u003d \n                    ((RMStateStoreAppAttemptEvent) event).getAppAttemptState();\n          Exception storedException \u003d null;\n\n          Credentials credentials \u003d attemptState.getAppAttemptCredentials();\n          ByteBuffer appAttemptTokens \u003d null;\n          try {\n            if(credentials !\u003d null){\n              DataOutputBuffer dob \u003d new DataOutputBuffer();\n                credentials.writeTokenStorageToStream(dob);\n              appAttemptTokens \u003d\n                  ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\n            }\n            ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n              (ApplicationAttemptStateDataPBImpl) ApplicationAttemptStateDataPBImpl\n                  .newApplicationAttemptStateData(attemptState.getAttemptId(),\n                    attemptState.getMasterContainer(), appAttemptTokens);\n\n            LOG.info(\"Storing info for attempt: \" + attemptState.getAttemptId());\n            storeApplicationAttemptState(attemptState.getAttemptId().toString(), \n                                         attemptStateData);\n          } catch (Exception e) {\n            LOG.error(\"Error storing appAttempt: \" \n                      + attemptState.getAttemptId(), e);\n            storedException \u003d e;\n          } finally {\n            notifyDoneStoringApplicationAttempt(attemptState.getAttemptId(), \n                                                storedException);            \n          }\n        }\n        break;\n      case REMOVE_APP:\n        {\n          ApplicationState appState \u003d \n                          ((RMStateStoreRemoveAppEvent) event).getAppState();\n          ApplicationId appId \u003d appState.getAppId();\n          Exception removedException \u003d null;\n          LOG.info(\"Removing info for app: \" + appId);\n          try {\n            removeApplicationState(appState);\n          } catch (Exception e) {\n            LOG.error(\"Error removing app: \" + appId, e);\n            removedException \u003d e;\n          } finally {\n            notifyDoneRemovingApplcation(appId, removedException);\n          }\n        }\n        break;\n      default:\n        LOG.error(\"Unknown RMStateStoreEvent type: \" + event.getType());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStore.java",
      "extendedDetails": {}
    },
    "89fb4d8ffd32b06db42cc3e21d2a89e99deb7732": {
      "type": "Ybodychange",
      "commitMessage": "YARN-707. Added user information also in the YARN ClientToken so that AMs can implement authorization based on incoming users. Contributed by Jason Lowe.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1518868 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/08/13 6:12 PM",
      "commitName": "89fb4d8ffd32b06db42cc3e21d2a89e99deb7732",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "21/08/13 4:55 PM",
      "commitNameOld": "ad0011a3405fee6c6e45996d39557e0f8d420633",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 8.05,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,78 +1,78 @@\n   private synchronized void handleStoreEvent(RMStateStoreEvent event) {\n     switch(event.getType()) {\n       case STORE_APP:\n         {\n           ApplicationState apptState \u003d\n               ((RMStateStoreAppEvent) event).getAppState();\n           Exception storedException \u003d null;\n           ApplicationStateDataPBImpl appStateData \u003d\n               new ApplicationStateDataPBImpl();\n           appStateData.setSubmitTime(apptState.getSubmitTime());\n           appStateData.setApplicationSubmissionContext(\n               apptState.getApplicationSubmissionContext());\n           appStateData.setUser(apptState.getUser());\n           ApplicationId appId \u003d\n               apptState.getApplicationSubmissionContext().getApplicationId();\n \n           LOG.info(\"Storing info for app: \" + appId);\n           try {\n             storeApplicationState(appId.toString(), appStateData);\n           } catch (Exception e) {\n             LOG.error(\"Error storing app: \" + appId, e);\n             storedException \u003d e;\n           } finally {\n             notifyDoneStoringApplication(appId, storedException);\n           }\n         }\n         break;\n       case STORE_APP_ATTEMPT:\n         {\n           ApplicationAttemptState attemptState \u003d \n                     ((RMStateStoreAppAttemptEvent) event).getAppAttemptState();\n           Exception storedException \u003d null;\n \n-          Credentials credentials \u003d attemptState.getAppAttemptTokens();\n+          Credentials credentials \u003d attemptState.getAppAttemptCredentials();\n           ByteBuffer appAttemptTokens \u003d null;\n           try {\n             if(credentials !\u003d null){\n               DataOutputBuffer dob \u003d new DataOutputBuffer();\n                 credentials.writeTokenStorageToStream(dob);\n               appAttemptTokens \u003d\n                   ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\n             }\n             ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n               (ApplicationAttemptStateDataPBImpl) ApplicationAttemptStateDataPBImpl\n                   .newApplicationAttemptStateData(attemptState.getAttemptId(),\n                     attemptState.getMasterContainer(), appAttemptTokens);\n \n             LOG.info(\"Storing info for attempt: \" + attemptState.getAttemptId());\n             storeApplicationAttemptState(attemptState.getAttemptId().toString(), \n                                          attemptStateData);\n           } catch (Exception e) {\n             LOG.error(\"Error storing appAttempt: \" \n                       + attemptState.getAttemptId(), e);\n             storedException \u003d e;\n           } finally {\n             notifyDoneStoringApplicationAttempt(attemptState.getAttemptId(), \n                                                 storedException);            \n           }\n         }\n         break;\n       case REMOVE_APP:\n         {\n           ApplicationState appState \u003d \n                           ((RMStateStoreRemoveAppEvent) event).getAppState();\n           ApplicationId appId \u003d appState.getAppId();\n           \n           LOG.info(\"Removing info for app: \" + appId);\n           try {\n             removeApplicationState(appState);\n           } catch (Exception e) {\n             LOG.error(\"Error removing app: \" + appId, e);\n           }\n         }\n         break;\n       default:\n         LOG.error(\"Unknown RMStateStoreEvent type: \" + event.getType());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void handleStoreEvent(RMStateStoreEvent event) {\n    switch(event.getType()) {\n      case STORE_APP:\n        {\n          ApplicationState apptState \u003d\n              ((RMStateStoreAppEvent) event).getAppState();\n          Exception storedException \u003d null;\n          ApplicationStateDataPBImpl appStateData \u003d\n              new ApplicationStateDataPBImpl();\n          appStateData.setSubmitTime(apptState.getSubmitTime());\n          appStateData.setApplicationSubmissionContext(\n              apptState.getApplicationSubmissionContext());\n          appStateData.setUser(apptState.getUser());\n          ApplicationId appId \u003d\n              apptState.getApplicationSubmissionContext().getApplicationId();\n\n          LOG.info(\"Storing info for app: \" + appId);\n          try {\n            storeApplicationState(appId.toString(), appStateData);\n          } catch (Exception e) {\n            LOG.error(\"Error storing app: \" + appId, e);\n            storedException \u003d e;\n          } finally {\n            notifyDoneStoringApplication(appId, storedException);\n          }\n        }\n        break;\n      case STORE_APP_ATTEMPT:\n        {\n          ApplicationAttemptState attemptState \u003d \n                    ((RMStateStoreAppAttemptEvent) event).getAppAttemptState();\n          Exception storedException \u003d null;\n\n          Credentials credentials \u003d attemptState.getAppAttemptCredentials();\n          ByteBuffer appAttemptTokens \u003d null;\n          try {\n            if(credentials !\u003d null){\n              DataOutputBuffer dob \u003d new DataOutputBuffer();\n                credentials.writeTokenStorageToStream(dob);\n              appAttemptTokens \u003d\n                  ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\n            }\n            ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n              (ApplicationAttemptStateDataPBImpl) ApplicationAttemptStateDataPBImpl\n                  .newApplicationAttemptStateData(attemptState.getAttemptId(),\n                    attemptState.getMasterContainer(), appAttemptTokens);\n\n            LOG.info(\"Storing info for attempt: \" + attemptState.getAttemptId());\n            storeApplicationAttemptState(attemptState.getAttemptId().toString(), \n                                         attemptStateData);\n          } catch (Exception e) {\n            LOG.error(\"Error storing appAttempt: \" \n                      + attemptState.getAttemptId(), e);\n            storedException \u003d e;\n          } finally {\n            notifyDoneStoringApplicationAttempt(attemptState.getAttemptId(), \n                                                storedException);            \n          }\n        }\n        break;\n      case REMOVE_APP:\n        {\n          ApplicationState appState \u003d \n                          ((RMStateStoreRemoveAppEvent) event).getAppState();\n          ApplicationId appId \u003d appState.getAppId();\n          \n          LOG.info(\"Removing info for app: \" + appId);\n          try {\n            removeApplicationState(appState);\n          } catch (Exception e) {\n            LOG.error(\"Error removing app: \" + appId, e);\n          }\n        }\n        break;\n      default:\n        LOG.error(\"Unknown RMStateStoreEvent type: \" + event.getType());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStore.java",
      "extendedDetails": {}
    },
    "259edf8dca44de54033e96f7eb65a83aaa6096f2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-571. Remove user from ContainerLaunchContext. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1485928 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/05/13 8:22 PM",
      "commitName": "259edf8dca44de54033e96f7eb65a83aaa6096f2",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "07/05/13 11:20 PM",
      "commitNameOld": "74231f027607ff1a6fe7d72fad28108826963cf3",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 15.88,
      "commitsBetweenForRepo": 84,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,77 +1,78 @@\n   private synchronized void handleStoreEvent(RMStateStoreEvent event) {\n     switch(event.getType()) {\n       case STORE_APP:\n         {\n           ApplicationState apptState \u003d\n               ((RMStateStoreAppEvent) event).getAppState();\n           Exception storedException \u003d null;\n           ApplicationStateDataPBImpl appStateData \u003d\n               new ApplicationStateDataPBImpl();\n           appStateData.setSubmitTime(apptState.getSubmitTime());\n           appStateData.setApplicationSubmissionContext(\n               apptState.getApplicationSubmissionContext());\n+          appStateData.setUser(apptState.getUser());\n           ApplicationId appId \u003d\n               apptState.getApplicationSubmissionContext().getApplicationId();\n \n           LOG.info(\"Storing info for app: \" + appId);\n           try {\n             storeApplicationState(appId.toString(), appStateData);\n           } catch (Exception e) {\n             LOG.error(\"Error storing app: \" + appId, e);\n             storedException \u003d e;\n           } finally {\n             notifyDoneStoringApplication(appId, storedException);\n           }\n         }\n         break;\n       case STORE_APP_ATTEMPT:\n         {\n           ApplicationAttemptState attemptState \u003d \n                     ((RMStateStoreAppAttemptEvent) event).getAppAttemptState();\n           Exception storedException \u003d null;\n \n           Credentials credentials \u003d attemptState.getAppAttemptTokens();\n           ByteBuffer appAttemptTokens \u003d null;\n           try {\n             if(credentials !\u003d null){\n               DataOutputBuffer dob \u003d new DataOutputBuffer();\n                 credentials.writeTokenStorageToStream(dob);\n               appAttemptTokens \u003d\n                   ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\n             }\n             ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n               (ApplicationAttemptStateDataPBImpl) ApplicationAttemptStateDataPBImpl\n                   .newApplicationAttemptStateData(attemptState.getAttemptId(),\n                     attemptState.getMasterContainer(), appAttemptTokens);\n \n             LOG.info(\"Storing info for attempt: \" + attemptState.getAttemptId());\n             storeApplicationAttemptState(attemptState.getAttemptId().toString(), \n                                          attemptStateData);\n           } catch (Exception e) {\n             LOG.error(\"Error storing appAttempt: \" \n                       + attemptState.getAttemptId(), e);\n             storedException \u003d e;\n           } finally {\n             notifyDoneStoringApplicationAttempt(attemptState.getAttemptId(), \n                                                 storedException);            \n           }\n         }\n         break;\n       case REMOVE_APP:\n         {\n           ApplicationState appState \u003d \n                           ((RMStateStoreRemoveAppEvent) event).getAppState();\n           ApplicationId appId \u003d appState.getAppId();\n           \n           LOG.info(\"Removing info for app: \" + appId);\n           try {\n             removeApplicationState(appState);\n           } catch (Exception e) {\n             LOG.error(\"Error removing app: \" + appId, e);\n           }\n         }\n         break;\n       default:\n         LOG.error(\"Unknown RMStateStoreEvent type: \" + event.getType());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void handleStoreEvent(RMStateStoreEvent event) {\n    switch(event.getType()) {\n      case STORE_APP:\n        {\n          ApplicationState apptState \u003d\n              ((RMStateStoreAppEvent) event).getAppState();\n          Exception storedException \u003d null;\n          ApplicationStateDataPBImpl appStateData \u003d\n              new ApplicationStateDataPBImpl();\n          appStateData.setSubmitTime(apptState.getSubmitTime());\n          appStateData.setApplicationSubmissionContext(\n              apptState.getApplicationSubmissionContext());\n          appStateData.setUser(apptState.getUser());\n          ApplicationId appId \u003d\n              apptState.getApplicationSubmissionContext().getApplicationId();\n\n          LOG.info(\"Storing info for app: \" + appId);\n          try {\n            storeApplicationState(appId.toString(), appStateData);\n          } catch (Exception e) {\n            LOG.error(\"Error storing app: \" + appId, e);\n            storedException \u003d e;\n          } finally {\n            notifyDoneStoringApplication(appId, storedException);\n          }\n        }\n        break;\n      case STORE_APP_ATTEMPT:\n        {\n          ApplicationAttemptState attemptState \u003d \n                    ((RMStateStoreAppAttemptEvent) event).getAppAttemptState();\n          Exception storedException \u003d null;\n\n          Credentials credentials \u003d attemptState.getAppAttemptTokens();\n          ByteBuffer appAttemptTokens \u003d null;\n          try {\n            if(credentials !\u003d null){\n              DataOutputBuffer dob \u003d new DataOutputBuffer();\n                credentials.writeTokenStorageToStream(dob);\n              appAttemptTokens \u003d\n                  ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\n            }\n            ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n              (ApplicationAttemptStateDataPBImpl) ApplicationAttemptStateDataPBImpl\n                  .newApplicationAttemptStateData(attemptState.getAttemptId(),\n                    attemptState.getMasterContainer(), appAttemptTokens);\n\n            LOG.info(\"Storing info for attempt: \" + attemptState.getAttemptId());\n            storeApplicationAttemptState(attemptState.getAttemptId().toString(), \n                                         attemptStateData);\n          } catch (Exception e) {\n            LOG.error(\"Error storing appAttempt: \" \n                      + attemptState.getAttemptId(), e);\n            storedException \u003d e;\n          } finally {\n            notifyDoneStoringApplicationAttempt(attemptState.getAttemptId(), \n                                                storedException);            \n          }\n        }\n        break;\n      case REMOVE_APP:\n        {\n          ApplicationState appState \u003d \n                          ((RMStateStoreRemoveAppEvent) event).getAppState();\n          ApplicationId appId \u003d appState.getAppId();\n          \n          LOG.info(\"Removing info for app: \" + appId);\n          try {\n            removeApplicationState(appState);\n          } catch (Exception e) {\n            LOG.error(\"Error removing app: \" + appId, e);\n          }\n        }\n        break;\n      default:\n        LOG.error(\"Unknown RMStateStoreEvent type: \" + event.getType());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStore.java",
      "extendedDetails": {}
    },
    "74231f027607ff1a6fe7d72fad28108826963cf3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-582. Changed ResourceManager to recover Application token and client tokens for app attempt so that RM can be restarted while preserving current applications. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1480168 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/05/13 11:20 PM",
      "commitName": "74231f027607ff1a6fe7d72fad28108826963cf3",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "26/04/13 11:02 AM",
      "commitNameOld": "f0ac5a849c24c20f891c2a43af412030e7af2b9b",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 11.51,
      "commitsBetweenForRepo": 64,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,77 @@\n   private synchronized void handleStoreEvent(RMStateStoreEvent event) {\n     switch(event.getType()) {\n       case STORE_APP:\n         {\n           ApplicationState apptState \u003d\n               ((RMStateStoreAppEvent) event).getAppState();\n           Exception storedException \u003d null;\n           ApplicationStateDataPBImpl appStateData \u003d\n               new ApplicationStateDataPBImpl();\n           appStateData.setSubmitTime(apptState.getSubmitTime());\n           appStateData.setApplicationSubmissionContext(\n               apptState.getApplicationSubmissionContext());\n           ApplicationId appId \u003d\n               apptState.getApplicationSubmissionContext().getApplicationId();\n \n           LOG.info(\"Storing info for app: \" + appId);\n           try {\n             storeApplicationState(appId.toString(), appStateData);\n           } catch (Exception e) {\n             LOG.error(\"Error storing app: \" + appId, e);\n             storedException \u003d e;\n           } finally {\n             notifyDoneStoringApplication(appId, storedException);\n           }\n         }\n         break;\n       case STORE_APP_ATTEMPT:\n         {\n           ApplicationAttemptState attemptState \u003d \n                     ((RMStateStoreAppAttemptEvent) event).getAppAttemptState();\n           Exception storedException \u003d null;\n-          ApplicationAttemptStateDataPBImpl attemptStateData \u003d \n-                                        new ApplicationAttemptStateDataPBImpl();\n-          attemptStateData.setAttemptId(attemptState.getAttemptId());\n-          attemptStateData.setMasterContainer(attemptState.getMasterContainer());\n \n-          LOG.info(\"Storing info for attempt: \" + attemptState.getAttemptId());\n+          Credentials credentials \u003d attemptState.getAppAttemptTokens();\n+          ByteBuffer appAttemptTokens \u003d null;\n           try {\n+            if(credentials !\u003d null){\n+              DataOutputBuffer dob \u003d new DataOutputBuffer();\n+                credentials.writeTokenStorageToStream(dob);\n+              appAttemptTokens \u003d\n+                  ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\n+            }\n+            ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n+              (ApplicationAttemptStateDataPBImpl) ApplicationAttemptStateDataPBImpl\n+                  .newApplicationAttemptStateData(attemptState.getAttemptId(),\n+                    attemptState.getMasterContainer(), appAttemptTokens);\n+\n+            LOG.info(\"Storing info for attempt: \" + attemptState.getAttemptId());\n             storeApplicationAttemptState(attemptState.getAttemptId().toString(), \n                                          attemptStateData);\n           } catch (Exception e) {\n             LOG.error(\"Error storing appAttempt: \" \n                       + attemptState.getAttemptId(), e);\n             storedException \u003d e;\n           } finally {\n             notifyDoneStoringApplicationAttempt(attemptState.getAttemptId(), \n                                                 storedException);            \n           }\n         }\n         break;\n       case REMOVE_APP:\n         {\n           ApplicationState appState \u003d \n                           ((RMStateStoreRemoveAppEvent) event).getAppState();\n           ApplicationId appId \u003d appState.getAppId();\n           \n           LOG.info(\"Removing info for app: \" + appId);\n           try {\n             removeApplicationState(appState);\n           } catch (Exception e) {\n             LOG.error(\"Error removing app: \" + appId, e);\n           }\n         }\n         break;\n       default:\n         LOG.error(\"Unknown RMStateStoreEvent type: \" + event.getType());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void handleStoreEvent(RMStateStoreEvent event) {\n    switch(event.getType()) {\n      case STORE_APP:\n        {\n          ApplicationState apptState \u003d\n              ((RMStateStoreAppEvent) event).getAppState();\n          Exception storedException \u003d null;\n          ApplicationStateDataPBImpl appStateData \u003d\n              new ApplicationStateDataPBImpl();\n          appStateData.setSubmitTime(apptState.getSubmitTime());\n          appStateData.setApplicationSubmissionContext(\n              apptState.getApplicationSubmissionContext());\n          ApplicationId appId \u003d\n              apptState.getApplicationSubmissionContext().getApplicationId();\n\n          LOG.info(\"Storing info for app: \" + appId);\n          try {\n            storeApplicationState(appId.toString(), appStateData);\n          } catch (Exception e) {\n            LOG.error(\"Error storing app: \" + appId, e);\n            storedException \u003d e;\n          } finally {\n            notifyDoneStoringApplication(appId, storedException);\n          }\n        }\n        break;\n      case STORE_APP_ATTEMPT:\n        {\n          ApplicationAttemptState attemptState \u003d \n                    ((RMStateStoreAppAttemptEvent) event).getAppAttemptState();\n          Exception storedException \u003d null;\n\n          Credentials credentials \u003d attemptState.getAppAttemptTokens();\n          ByteBuffer appAttemptTokens \u003d null;\n          try {\n            if(credentials !\u003d null){\n              DataOutputBuffer dob \u003d new DataOutputBuffer();\n                credentials.writeTokenStorageToStream(dob);\n              appAttemptTokens \u003d\n                  ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\n            }\n            ApplicationAttemptStateDataPBImpl attemptStateData \u003d\n              (ApplicationAttemptStateDataPBImpl) ApplicationAttemptStateDataPBImpl\n                  .newApplicationAttemptStateData(attemptState.getAttemptId(),\n                    attemptState.getMasterContainer(), appAttemptTokens);\n\n            LOG.info(\"Storing info for attempt: \" + attemptState.getAttemptId());\n            storeApplicationAttemptState(attemptState.getAttemptId().toString(), \n                                         attemptStateData);\n          } catch (Exception e) {\n            LOG.error(\"Error storing appAttempt: \" \n                      + attemptState.getAttemptId(), e);\n            storedException \u003d e;\n          } finally {\n            notifyDoneStoringApplicationAttempt(attemptState.getAttemptId(), \n                                                storedException);            \n          }\n        }\n        break;\n      case REMOVE_APP:\n        {\n          ApplicationState appState \u003d \n                          ((RMStateStoreRemoveAppEvent) event).getAppState();\n          ApplicationId appId \u003d appState.getAppId();\n          \n          LOG.info(\"Removing info for app: \" + appId);\n          try {\n            removeApplicationState(appState);\n          } catch (Exception e) {\n            LOG.error(\"Error removing app: \" + appId, e);\n          }\n        }\n        break;\n      default:\n        LOG.error(\"Unknown RMStateStoreEvent type: \" + event.getType());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStore.java",
      "extendedDetails": {}
    },
    "ef9f251679d7e87698eecd6a119652900274a172": {
      "type": "Ybodychange",
      "commitMessage": "YARN-514.Delayed store operations should not result in RM unavailability for app submission (Zhijie Shen via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1469059 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/04/13 1:19 PM",
      "commitName": "ef9f251679d7e87698eecd6a119652900274a172",
      "commitAuthor": "Bikas Saha",
      "commitDateOld": "18/12/12 8:21 PM",
      "commitNameOld": "6cd0736cc57849e4f7c5d38a3986432a9717fe39",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 119.67,
      "commitsBetweenForRepo": 581,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,68 @@\n   private synchronized void handleStoreEvent(RMStateStoreEvent event) {\n     switch(event.getType()) {\n+      case STORE_APP:\n+        {\n+          ApplicationState apptState \u003d\n+              ((RMStateStoreAppEvent) event).getAppState();\n+          Exception storedException \u003d null;\n+          ApplicationStateDataPBImpl appStateData \u003d\n+              new ApplicationStateDataPBImpl();\n+          appStateData.setSubmitTime(apptState.getSubmitTime());\n+          appStateData.setApplicationSubmissionContext(\n+              apptState.getApplicationSubmissionContext());\n+          ApplicationId appId \u003d\n+              apptState.getApplicationSubmissionContext().getApplicationId();\n+\n+          LOG.info(\"Storing info for app: \" + appId);\n+          try {\n+            storeApplicationState(appId.toString(), appStateData);\n+          } catch (Exception e) {\n+            LOG.error(\"Error storing app: \" + appId, e);\n+            storedException \u003d e;\n+          } finally {\n+            notifyDoneStoringApplication(appId, storedException);\n+          }\n+        }\n+        break;\n       case STORE_APP_ATTEMPT:\n         {\n           ApplicationAttemptState attemptState \u003d \n                     ((RMStateStoreAppAttemptEvent) event).getAppAttemptState();\n           Exception storedException \u003d null;\n           ApplicationAttemptStateDataPBImpl attemptStateData \u003d \n                                         new ApplicationAttemptStateDataPBImpl();\n           attemptStateData.setAttemptId(attemptState.getAttemptId());\n           attemptStateData.setMasterContainer(attemptState.getMasterContainer());\n \n           LOG.info(\"Storing info for attempt: \" + attemptState.getAttemptId());\n           try {\n             storeApplicationAttemptState(attemptState.getAttemptId().toString(), \n                                          attemptStateData);\n           } catch (Exception e) {\n             LOG.error(\"Error storing appAttempt: \" \n                       + attemptState.getAttemptId(), e);\n             storedException \u003d e;\n           } finally {\n             notifyDoneStoringApplicationAttempt(attemptState.getAttemptId(), \n                                                 storedException);            \n           }\n         }\n         break;\n       case REMOVE_APP:\n         {\n           ApplicationState appState \u003d \n                           ((RMStateStoreRemoveAppEvent) event).getAppState();\n           ApplicationId appId \u003d appState.getAppId();\n           \n           LOG.info(\"Removing info for app: \" + appId);\n           try {\n             removeApplicationState(appState);\n           } catch (Exception e) {\n             LOG.error(\"Error removing app: \" + appId, e);\n           }\n         }\n         break;\n       default:\n         LOG.error(\"Unknown RMStateStoreEvent type: \" + event.getType());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void handleStoreEvent(RMStateStoreEvent event) {\n    switch(event.getType()) {\n      case STORE_APP:\n        {\n          ApplicationState apptState \u003d\n              ((RMStateStoreAppEvent) event).getAppState();\n          Exception storedException \u003d null;\n          ApplicationStateDataPBImpl appStateData \u003d\n              new ApplicationStateDataPBImpl();\n          appStateData.setSubmitTime(apptState.getSubmitTime());\n          appStateData.setApplicationSubmissionContext(\n              apptState.getApplicationSubmissionContext());\n          ApplicationId appId \u003d\n              apptState.getApplicationSubmissionContext().getApplicationId();\n\n          LOG.info(\"Storing info for app: \" + appId);\n          try {\n            storeApplicationState(appId.toString(), appStateData);\n          } catch (Exception e) {\n            LOG.error(\"Error storing app: \" + appId, e);\n            storedException \u003d e;\n          } finally {\n            notifyDoneStoringApplication(appId, storedException);\n          }\n        }\n        break;\n      case STORE_APP_ATTEMPT:\n        {\n          ApplicationAttemptState attemptState \u003d \n                    ((RMStateStoreAppAttemptEvent) event).getAppAttemptState();\n          Exception storedException \u003d null;\n          ApplicationAttemptStateDataPBImpl attemptStateData \u003d \n                                        new ApplicationAttemptStateDataPBImpl();\n          attemptStateData.setAttemptId(attemptState.getAttemptId());\n          attemptStateData.setMasterContainer(attemptState.getMasterContainer());\n\n          LOG.info(\"Storing info for attempt: \" + attemptState.getAttemptId());\n          try {\n            storeApplicationAttemptState(attemptState.getAttemptId().toString(), \n                                         attemptStateData);\n          } catch (Exception e) {\n            LOG.error(\"Error storing appAttempt: \" \n                      + attemptState.getAttemptId(), e);\n            storedException \u003d e;\n          } finally {\n            notifyDoneStoringApplicationAttempt(attemptState.getAttemptId(), \n                                                storedException);            \n          }\n        }\n        break;\n      case REMOVE_APP:\n        {\n          ApplicationState appState \u003d \n                          ((RMStateStoreRemoveAppEvent) event).getAppState();\n          ApplicationId appId \u003d appState.getAppId();\n          \n          LOG.info(\"Removing info for app: \" + appId);\n          try {\n            removeApplicationState(appState);\n          } catch (Exception e) {\n            LOG.error(\"Error removing app: \" + appId, e);\n          }\n        }\n        break;\n      default:\n        LOG.error(\"Unknown RMStateStoreEvent type: \" + event.getType());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStore.java",
      "extendedDetails": {}
    },
    "6cd0736cc57849e4f7c5d38a3986432a9717fe39": {
      "type": "Yintroduced",
      "commitMessage": "YARN-230. RM Restart phase 1 - includes support for saving/restarting all applications on an RM bounce. Contributed by Bikas Saha.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1423758 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/12/12 8:21 PM",
      "commitName": "6cd0736cc57849e4f7c5d38a3986432a9717fe39",
      "commitAuthor": "Arun Murthy",
      "diff": "@@ -0,0 +1,44 @@\n+  private synchronized void handleStoreEvent(RMStateStoreEvent event) {\n+    switch(event.getType()) {\n+      case STORE_APP_ATTEMPT:\n+        {\n+          ApplicationAttemptState attemptState \u003d \n+                    ((RMStateStoreAppAttemptEvent) event).getAppAttemptState();\n+          Exception storedException \u003d null;\n+          ApplicationAttemptStateDataPBImpl attemptStateData \u003d \n+                                        new ApplicationAttemptStateDataPBImpl();\n+          attemptStateData.setAttemptId(attemptState.getAttemptId());\n+          attemptStateData.setMasterContainer(attemptState.getMasterContainer());\n+\n+          LOG.info(\"Storing info for attempt: \" + attemptState.getAttemptId());\n+          try {\n+            storeApplicationAttemptState(attemptState.getAttemptId().toString(), \n+                                         attemptStateData);\n+          } catch (Exception e) {\n+            LOG.error(\"Error storing appAttempt: \" \n+                      + attemptState.getAttemptId(), e);\n+            storedException \u003d e;\n+          } finally {\n+            notifyDoneStoringApplicationAttempt(attemptState.getAttemptId(), \n+                                                storedException);            \n+          }\n+        }\n+        break;\n+      case REMOVE_APP:\n+        {\n+          ApplicationState appState \u003d \n+                          ((RMStateStoreRemoveAppEvent) event).getAppState();\n+          ApplicationId appId \u003d appState.getAppId();\n+          \n+          LOG.info(\"Removing info for app: \" + appId);\n+          try {\n+            removeApplicationState(appState);\n+          } catch (Exception e) {\n+            LOG.error(\"Error removing app: \" + appId, e);\n+          }\n+        }\n+        break;\n+      default:\n+        LOG.error(\"Unknown RMStateStoreEvent type: \" + event.getType());\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void handleStoreEvent(RMStateStoreEvent event) {\n    switch(event.getType()) {\n      case STORE_APP_ATTEMPT:\n        {\n          ApplicationAttemptState attemptState \u003d \n                    ((RMStateStoreAppAttemptEvent) event).getAppAttemptState();\n          Exception storedException \u003d null;\n          ApplicationAttemptStateDataPBImpl attemptStateData \u003d \n                                        new ApplicationAttemptStateDataPBImpl();\n          attemptStateData.setAttemptId(attemptState.getAttemptId());\n          attemptStateData.setMasterContainer(attemptState.getMasterContainer());\n\n          LOG.info(\"Storing info for attempt: \" + attemptState.getAttemptId());\n          try {\n            storeApplicationAttemptState(attemptState.getAttemptId().toString(), \n                                         attemptStateData);\n          } catch (Exception e) {\n            LOG.error(\"Error storing appAttempt: \" \n                      + attemptState.getAttemptId(), e);\n            storedException \u003d e;\n          } finally {\n            notifyDoneStoringApplicationAttempt(attemptState.getAttemptId(), \n                                                storedException);            \n          }\n        }\n        break;\n      case REMOVE_APP:\n        {\n          ApplicationState appState \u003d \n                          ((RMStateStoreRemoveAppEvent) event).getAppState();\n          ApplicationId appId \u003d appState.getAppId();\n          \n          LOG.info(\"Removing info for app: \" + appId);\n          try {\n            removeApplicationState(appState);\n          } catch (Exception e) {\n            LOG.error(\"Error removing app: \" + appId, e);\n          }\n        }\n        break;\n      default:\n        LOG.error(\"Unknown RMStateStoreEvent type: \" + event.getType());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/RMStateStore.java"
    }
  }
}