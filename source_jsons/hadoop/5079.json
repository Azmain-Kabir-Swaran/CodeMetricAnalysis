{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSImageFormatPBSnapshot.java",
  "functionName": "loadDirectoryDiffList",
  "functionId": "loadDirectoryDiffList___in-InputStream__dir-INodeDirectory__size-int__refList-List__INodeReference__(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/FSImageFormatPBSnapshot.java",
  "functionStartLine": 333,
  "functionEndLine": 409,
  "numCommitsSeen": 36,
  "timeTaken": 3314,
  "changeHistory": [
    "5dae97a584d30cef3e34141edfaca49c4ec57913",
    "0653918dad855b394e8e3b8b3f512f474d872ee9",
    "ac23a55547716df29b3e25c98a113399e184d9d1",
    "2624b20291629b4565ea45590b66f2c38f96df67",
    "5c978a43c3052cc1466b23653c354399186b4e10",
    "a2edb11b68ae01a44092cb14ac2717a6aad93305"
  ],
  "changeHistoryShort": {
    "5dae97a584d30cef3e34141edfaca49c4ec57913": "Ybodychange",
    "0653918dad855b394e8e3b8b3f512f474d872ee9": "Ybodychange",
    "ac23a55547716df29b3e25c98a113399e184d9d1": "Ybodychange",
    "2624b20291629b4565ea45590b66f2c38f96df67": "Ymultichange(Yparameterchange,Ybodychange)",
    "5c978a43c3052cc1466b23653c354399186b4e10": "Ybodychange",
    "a2edb11b68ae01a44092cb14ac2717a6aad93305": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5dae97a584d30cef3e34141edfaca49c4ec57913": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7723. Quota By Storage Type namenode implemenation. (Contributed by Xiaoyu Yao)\n",
      "commitDate": "11/02/15 10:41 AM",
      "commitName": "5dae97a584d30cef3e34141edfaca49c4ec57913",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "08/02/15 11:51 AM",
      "commitNameOld": "1382ae525c67bf95d8f3a436b547dbc72cfbb177",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 2.95,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,77 @@\n     private void loadDirectoryDiffList(InputStream in, INodeDirectory dir,\n         int size, final List\u003cINodeReference\u003e refList) throws IOException {\n       if (!dir.isWithSnapshot()) {\n         dir.addSnapshotFeature(null);\n       }\n       DirectoryDiffList diffs \u003d dir.getDiffs();\n       final LoaderContext state \u003d parent.getLoaderContext();\n \n       for (int i \u003d 0; i \u003c size; i++) {\n         // load a directory diff\n         SnapshotDiffSection.DirectoryDiff diffInPb \u003d SnapshotDiffSection.\n             DirectoryDiff.parseDelimitedFrom(in);\n         final int snapshotId \u003d diffInPb.getSnapshotId();\n         final Snapshot snapshot \u003d snapshotMap.get(snapshotId);\n         int childrenSize \u003d diffInPb.getChildrenSize();\n         boolean useRoot \u003d diffInPb.getIsSnapshotRoot();\n         INodeDirectoryAttributes copy \u003d null;\n         if (useRoot) {\n           copy \u003d snapshot.getRoot();\n         } else if (diffInPb.hasSnapshotCopy()) {\n           INodeSection.INodeDirectory dirCopyInPb \u003d diffInPb.getSnapshotCopy();\n           final byte[] name \u003d diffInPb.getName().toByteArray();\n           PermissionStatus permission \u003d loadPermission(\n               dirCopyInPb.getPermission(), state.getStringTable());\n           AclFeature acl \u003d null;\n           if (dirCopyInPb.hasAcl()) {\n             int[] entries \u003d AclEntryStatusFormat\n                 .toInt(FSImageFormatPBINode.Loader.loadAclEntries(\n                     dirCopyInPb.getAcl(), state.getStringTable()));\n             acl \u003d new AclFeature(entries);\n           }\n           XAttrFeature xAttrs \u003d null;\n           if (dirCopyInPb.hasXAttrs()) {\n             xAttrs \u003d new XAttrFeature(FSImageFormatPBINode.Loader.loadXAttrs(\n                 dirCopyInPb.getXAttrs(), state.getStringTable()));\n           }\n \n           long modTime \u003d dirCopyInPb.getModificationTime();\n           boolean noQuota \u003d dirCopyInPb.getNsQuota() \u003d\u003d -1\n-              \u0026\u0026 dirCopyInPb.getDsQuota() \u003d\u003d -1;\n+              \u0026\u0026 dirCopyInPb.getDsQuota() \u003d\u003d -1\n+              \u0026\u0026 (!dirCopyInPb.hasTypeQuotas());\n \n-          copy \u003d noQuota ? new INodeDirectoryAttributes.SnapshotCopy(name,\n-              permission, acl, modTime, xAttrs)\n-              : new INodeDirectoryAttributes.CopyWithQuota(name, permission,\n-                  acl, modTime, dirCopyInPb.getNsQuota(),\n-                  dirCopyInPb.getDsQuota(), xAttrs);\n+          if (noQuota) {\n+            copy \u003d new INodeDirectoryAttributes.SnapshotCopy(name,\n+              permission, acl, modTime, xAttrs);\n+          } else {\n+            EnumCounters\u003cStorageType\u003e typeQuotas \u003d null;\n+            if (dirCopyInPb.hasTypeQuotas()) {\n+              ImmutableList\u003cQuotaByStorageTypeEntry\u003e qes \u003d\n+                  FSImageFormatPBINode.Loader.loadQuotaByStorageTypeEntries(\n+                      dirCopyInPb.getTypeQuotas());\n+              typeQuotas \u003d new EnumCounters\u003cStorageType\u003e(StorageType.class,\n+                  HdfsConstants.QUOTA_RESET);\n+              for (QuotaByStorageTypeEntry qe : qes) {\n+                if (qe.getQuota() \u003e\u003d 0 \u0026\u0026 qe.getStorageType() !\u003d null \u0026\u0026\n+                    qe.getStorageType().supportTypeQuota()) {\n+                  typeQuotas.set(qe.getStorageType(), qe.getQuota());\n+                }\n+              }\n+            }\n+            copy \u003d new INodeDirectoryAttributes.CopyWithQuota(name, permission,\n+                acl, modTime, dirCopyInPb.getNsQuota(),\n+                dirCopyInPb.getDsQuota(), typeQuotas, xAttrs);\n+          }\n         }\n         // load created list\n         List\u003cINode\u003e clist \u003d loadCreatedList(in, dir,\n             diffInPb.getCreatedListSize());\n         // load deleted list\n         List\u003cINode\u003e dlist \u003d loadDeletedList(refList, in, dir,\n             diffInPb.getDeletedINodeList(), diffInPb.getDeletedINodeRefList());\n         // create the directory diff\n         DirectoryDiff diff \u003d new DirectoryDiff(snapshotId, copy, null,\n             childrenSize, clist, dlist, useRoot);\n         diffs.addFirst(diff);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void loadDirectoryDiffList(InputStream in, INodeDirectory dir,\n        int size, final List\u003cINodeReference\u003e refList) throws IOException {\n      if (!dir.isWithSnapshot()) {\n        dir.addSnapshotFeature(null);\n      }\n      DirectoryDiffList diffs \u003d dir.getDiffs();\n      final LoaderContext state \u003d parent.getLoaderContext();\n\n      for (int i \u003d 0; i \u003c size; i++) {\n        // load a directory diff\n        SnapshotDiffSection.DirectoryDiff diffInPb \u003d SnapshotDiffSection.\n            DirectoryDiff.parseDelimitedFrom(in);\n        final int snapshotId \u003d diffInPb.getSnapshotId();\n        final Snapshot snapshot \u003d snapshotMap.get(snapshotId);\n        int childrenSize \u003d diffInPb.getChildrenSize();\n        boolean useRoot \u003d diffInPb.getIsSnapshotRoot();\n        INodeDirectoryAttributes copy \u003d null;\n        if (useRoot) {\n          copy \u003d snapshot.getRoot();\n        } else if (diffInPb.hasSnapshotCopy()) {\n          INodeSection.INodeDirectory dirCopyInPb \u003d diffInPb.getSnapshotCopy();\n          final byte[] name \u003d diffInPb.getName().toByteArray();\n          PermissionStatus permission \u003d loadPermission(\n              dirCopyInPb.getPermission(), state.getStringTable());\n          AclFeature acl \u003d null;\n          if (dirCopyInPb.hasAcl()) {\n            int[] entries \u003d AclEntryStatusFormat\n                .toInt(FSImageFormatPBINode.Loader.loadAclEntries(\n                    dirCopyInPb.getAcl(), state.getStringTable()));\n            acl \u003d new AclFeature(entries);\n          }\n          XAttrFeature xAttrs \u003d null;\n          if (dirCopyInPb.hasXAttrs()) {\n            xAttrs \u003d new XAttrFeature(FSImageFormatPBINode.Loader.loadXAttrs(\n                dirCopyInPb.getXAttrs(), state.getStringTable()));\n          }\n\n          long modTime \u003d dirCopyInPb.getModificationTime();\n          boolean noQuota \u003d dirCopyInPb.getNsQuota() \u003d\u003d -1\n              \u0026\u0026 dirCopyInPb.getDsQuota() \u003d\u003d -1\n              \u0026\u0026 (!dirCopyInPb.hasTypeQuotas());\n\n          if (noQuota) {\n            copy \u003d new INodeDirectoryAttributes.SnapshotCopy(name,\n              permission, acl, modTime, xAttrs);\n          } else {\n            EnumCounters\u003cStorageType\u003e typeQuotas \u003d null;\n            if (dirCopyInPb.hasTypeQuotas()) {\n              ImmutableList\u003cQuotaByStorageTypeEntry\u003e qes \u003d\n                  FSImageFormatPBINode.Loader.loadQuotaByStorageTypeEntries(\n                      dirCopyInPb.getTypeQuotas());\n              typeQuotas \u003d new EnumCounters\u003cStorageType\u003e(StorageType.class,\n                  HdfsConstants.QUOTA_RESET);\n              for (QuotaByStorageTypeEntry qe : qes) {\n                if (qe.getQuota() \u003e\u003d 0 \u0026\u0026 qe.getStorageType() !\u003d null \u0026\u0026\n                    qe.getStorageType().supportTypeQuota()) {\n                  typeQuotas.set(qe.getStorageType(), qe.getQuota());\n                }\n              }\n            }\n            copy \u003d new INodeDirectoryAttributes.CopyWithQuota(name, permission,\n                acl, modTime, dirCopyInPb.getNsQuota(),\n                dirCopyInPb.getDsQuota(), typeQuotas, xAttrs);\n          }\n        }\n        // load created list\n        List\u003cINode\u003e clist \u003d loadCreatedList(in, dir,\n            diffInPb.getCreatedListSize());\n        // load deleted list\n        List\u003cINode\u003e dlist \u003d loadDeletedList(refList, in, dir,\n            diffInPb.getDeletedINodeList(), diffInPb.getDeletedINodeRefList());\n        // create the directory diff\n        DirectoryDiff diff \u003d new DirectoryDiff(snapshotId, copy, null,\n            childrenSize, clist, dlist, useRoot);\n        diffs.addFirst(diff);\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/FSImageFormatPBSnapshot.java",
      "extendedDetails": {}
    },
    "0653918dad855b394e8e3b8b3f512f474d872ee9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7454. Reduce memory footprint for AclEntries in NameNode. Contributed by Vinayakumar B.\n",
      "commitDate": "04/12/14 8:49 PM",
      "commitName": "0653918dad855b394e8e3b8b3f512f474d872ee9",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "29/09/14 10:27 PM",
      "commitNameOld": "bb84f1fccb18c6c7373851e05d2451d55e908242",
      "commitAuthorOld": "arp",
      "daysBetweenCommits": 65.97,
      "commitsBetweenForRepo": 565,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,59 @@\n     private void loadDirectoryDiffList(InputStream in, INodeDirectory dir,\n         int size, final List\u003cINodeReference\u003e refList) throws IOException {\n       if (!dir.isWithSnapshot()) {\n         dir.addSnapshotFeature(null);\n       }\n       DirectoryDiffList diffs \u003d dir.getDiffs();\n       final LoaderContext state \u003d parent.getLoaderContext();\n \n       for (int i \u003d 0; i \u003c size; i++) {\n         // load a directory diff\n         SnapshotDiffSection.DirectoryDiff diffInPb \u003d SnapshotDiffSection.\n             DirectoryDiff.parseDelimitedFrom(in);\n         final int snapshotId \u003d diffInPb.getSnapshotId();\n         final Snapshot snapshot \u003d snapshotMap.get(snapshotId);\n         int childrenSize \u003d diffInPb.getChildrenSize();\n         boolean useRoot \u003d diffInPb.getIsSnapshotRoot();\n         INodeDirectoryAttributes copy \u003d null;\n         if (useRoot) {\n           copy \u003d snapshot.getRoot();\n         } else if (diffInPb.hasSnapshotCopy()) {\n           INodeSection.INodeDirectory dirCopyInPb \u003d diffInPb.getSnapshotCopy();\n           final byte[] name \u003d diffInPb.getName().toByteArray();\n           PermissionStatus permission \u003d loadPermission(\n               dirCopyInPb.getPermission(), state.getStringTable());\n           AclFeature acl \u003d null;\n           if (dirCopyInPb.hasAcl()) {\n-            acl \u003d new AclFeature(FSImageFormatPBINode.Loader.loadAclEntries(\n-                dirCopyInPb.getAcl(), state.getStringTable()));\n+            int[] entries \u003d AclEntryStatusFormat\n+                .toInt(FSImageFormatPBINode.Loader.loadAclEntries(\n+                    dirCopyInPb.getAcl(), state.getStringTable()));\n+            acl \u003d new AclFeature(entries);\n           }\n           XAttrFeature xAttrs \u003d null;\n           if (dirCopyInPb.hasXAttrs()) {\n             xAttrs \u003d new XAttrFeature(FSImageFormatPBINode.Loader.loadXAttrs(\n                 dirCopyInPb.getXAttrs(), state.getStringTable()));\n           }\n \n           long modTime \u003d dirCopyInPb.getModificationTime();\n           boolean noQuota \u003d dirCopyInPb.getNsQuota() \u003d\u003d -1\n               \u0026\u0026 dirCopyInPb.getDsQuota() \u003d\u003d -1;\n \n           copy \u003d noQuota ? new INodeDirectoryAttributes.SnapshotCopy(name,\n               permission, acl, modTime, xAttrs)\n               : new INodeDirectoryAttributes.CopyWithQuota(name, permission,\n                   acl, modTime, dirCopyInPb.getNsQuota(),\n                   dirCopyInPb.getDsQuota(), xAttrs);\n         }\n         // load created list\n         List\u003cINode\u003e clist \u003d loadCreatedList(in, dir,\n             diffInPb.getCreatedListSize());\n         // load deleted list\n         List\u003cINode\u003e dlist \u003d loadDeletedList(refList, in, dir,\n             diffInPb.getDeletedINodeList(), diffInPb.getDeletedINodeRefList());\n         // create the directory diff\n         DirectoryDiff diff \u003d new DirectoryDiff(snapshotId, copy, null,\n             childrenSize, clist, dlist, useRoot);\n         diffs.addFirst(diff);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void loadDirectoryDiffList(InputStream in, INodeDirectory dir,\n        int size, final List\u003cINodeReference\u003e refList) throws IOException {\n      if (!dir.isWithSnapshot()) {\n        dir.addSnapshotFeature(null);\n      }\n      DirectoryDiffList diffs \u003d dir.getDiffs();\n      final LoaderContext state \u003d parent.getLoaderContext();\n\n      for (int i \u003d 0; i \u003c size; i++) {\n        // load a directory diff\n        SnapshotDiffSection.DirectoryDiff diffInPb \u003d SnapshotDiffSection.\n            DirectoryDiff.parseDelimitedFrom(in);\n        final int snapshotId \u003d diffInPb.getSnapshotId();\n        final Snapshot snapshot \u003d snapshotMap.get(snapshotId);\n        int childrenSize \u003d diffInPb.getChildrenSize();\n        boolean useRoot \u003d diffInPb.getIsSnapshotRoot();\n        INodeDirectoryAttributes copy \u003d null;\n        if (useRoot) {\n          copy \u003d snapshot.getRoot();\n        } else if (diffInPb.hasSnapshotCopy()) {\n          INodeSection.INodeDirectory dirCopyInPb \u003d diffInPb.getSnapshotCopy();\n          final byte[] name \u003d diffInPb.getName().toByteArray();\n          PermissionStatus permission \u003d loadPermission(\n              dirCopyInPb.getPermission(), state.getStringTable());\n          AclFeature acl \u003d null;\n          if (dirCopyInPb.hasAcl()) {\n            int[] entries \u003d AclEntryStatusFormat\n                .toInt(FSImageFormatPBINode.Loader.loadAclEntries(\n                    dirCopyInPb.getAcl(), state.getStringTable()));\n            acl \u003d new AclFeature(entries);\n          }\n          XAttrFeature xAttrs \u003d null;\n          if (dirCopyInPb.hasXAttrs()) {\n            xAttrs \u003d new XAttrFeature(FSImageFormatPBINode.Loader.loadXAttrs(\n                dirCopyInPb.getXAttrs(), state.getStringTable()));\n          }\n\n          long modTime \u003d dirCopyInPb.getModificationTime();\n          boolean noQuota \u003d dirCopyInPb.getNsQuota() \u003d\u003d -1\n              \u0026\u0026 dirCopyInPb.getDsQuota() \u003d\u003d -1;\n\n          copy \u003d noQuota ? new INodeDirectoryAttributes.SnapshotCopy(name,\n              permission, acl, modTime, xAttrs)\n              : new INodeDirectoryAttributes.CopyWithQuota(name, permission,\n                  acl, modTime, dirCopyInPb.getNsQuota(),\n                  dirCopyInPb.getDsQuota(), xAttrs);\n        }\n        // load created list\n        List\u003cINode\u003e clist \u003d loadCreatedList(in, dir,\n            diffInPb.getCreatedListSize());\n        // load deleted list\n        List\u003cINode\u003e dlist \u003d loadDeletedList(refList, in, dir,\n            diffInPb.getDeletedINodeList(), diffInPb.getDeletedINodeRefList());\n        // create the directory diff\n        DirectoryDiff diff \u003d new DirectoryDiff(snapshotId, copy, null,\n            childrenSize, clist, dlist, useRoot);\n        diffs.addFirst(diff);\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/FSImageFormatPBSnapshot.java",
      "extendedDetails": {}
    },
    "ac23a55547716df29b3e25c98a113399e184d9d1": {
      "type": "Ybodychange",
      "commitMessage": "Merge HDFS-2006 HDFS XAttrs branch to Trunk\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1596575 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/05/14 6:57 AM",
      "commitName": "ac23a55547716df29b3e25c98a113399e184d9d1",
      "commitAuthor": "Uma Maheswara Rao G",
      "commitDateOld": "24/03/14 10:51 PM",
      "commitNameOld": "3a61d25457606b93f7e99a48fe8f66984f4084b0",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 57.34,
      "commitsBetweenForRepo": 342,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,57 @@\n     private void loadDirectoryDiffList(InputStream in, INodeDirectory dir,\n         int size, final List\u003cINodeReference\u003e refList) throws IOException {\n       if (!dir.isWithSnapshot()) {\n         dir.addSnapshotFeature(null);\n       }\n       DirectoryDiffList diffs \u003d dir.getDiffs();\n       final LoaderContext state \u003d parent.getLoaderContext();\n \n       for (int i \u003d 0; i \u003c size; i++) {\n         // load a directory diff\n         SnapshotDiffSection.DirectoryDiff diffInPb \u003d SnapshotDiffSection.\n             DirectoryDiff.parseDelimitedFrom(in);\n         final int snapshotId \u003d diffInPb.getSnapshotId();\n         final Snapshot snapshot \u003d snapshotMap.get(snapshotId);\n         int childrenSize \u003d diffInPb.getChildrenSize();\n         boolean useRoot \u003d diffInPb.getIsSnapshotRoot();\n         INodeDirectoryAttributes copy \u003d null;\n         if (useRoot) {\n           copy \u003d snapshot.getRoot();\n         } else if (diffInPb.hasSnapshotCopy()) {\n           INodeSection.INodeDirectory dirCopyInPb \u003d diffInPb.getSnapshotCopy();\n           final byte[] name \u003d diffInPb.getName().toByteArray();\n           PermissionStatus permission \u003d loadPermission(\n               dirCopyInPb.getPermission(), state.getStringTable());\n           AclFeature acl \u003d null;\n           if (dirCopyInPb.hasAcl()) {\n             acl \u003d new AclFeature(FSImageFormatPBINode.Loader.loadAclEntries(\n                 dirCopyInPb.getAcl(), state.getStringTable()));\n           }\n+          XAttrFeature xAttrs \u003d null;\n+          if (dirCopyInPb.hasXAttrs()) {\n+            xAttrs \u003d new XAttrFeature(FSImageFormatPBINode.Loader.loadXAttrs(\n+                dirCopyInPb.getXAttrs(), state.getStringTable()));\n+          }\n \n           long modTime \u003d dirCopyInPb.getModificationTime();\n           boolean noQuota \u003d dirCopyInPb.getNsQuota() \u003d\u003d -1\n               \u0026\u0026 dirCopyInPb.getDsQuota() \u003d\u003d -1;\n \n           copy \u003d noQuota ? new INodeDirectoryAttributes.SnapshotCopy(name,\n-              permission, acl, modTime)\n+              permission, acl, modTime, xAttrs)\n               : new INodeDirectoryAttributes.CopyWithQuota(name, permission,\n                   acl, modTime, dirCopyInPb.getNsQuota(),\n-                  dirCopyInPb.getDsQuota());\n+                  dirCopyInPb.getDsQuota(), xAttrs);\n         }\n         // load created list\n         List\u003cINode\u003e clist \u003d loadCreatedList(in, dir,\n             diffInPb.getCreatedListSize());\n         // load deleted list\n         List\u003cINode\u003e dlist \u003d loadDeletedList(refList, in, dir,\n             diffInPb.getDeletedINodeList(), diffInPb.getDeletedINodeRefList());\n         // create the directory diff\n         DirectoryDiff diff \u003d new DirectoryDiff(snapshotId, copy, null,\n             childrenSize, clist, dlist, useRoot);\n         diffs.addFirst(diff);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void loadDirectoryDiffList(InputStream in, INodeDirectory dir,\n        int size, final List\u003cINodeReference\u003e refList) throws IOException {\n      if (!dir.isWithSnapshot()) {\n        dir.addSnapshotFeature(null);\n      }\n      DirectoryDiffList diffs \u003d dir.getDiffs();\n      final LoaderContext state \u003d parent.getLoaderContext();\n\n      for (int i \u003d 0; i \u003c size; i++) {\n        // load a directory diff\n        SnapshotDiffSection.DirectoryDiff diffInPb \u003d SnapshotDiffSection.\n            DirectoryDiff.parseDelimitedFrom(in);\n        final int snapshotId \u003d diffInPb.getSnapshotId();\n        final Snapshot snapshot \u003d snapshotMap.get(snapshotId);\n        int childrenSize \u003d diffInPb.getChildrenSize();\n        boolean useRoot \u003d diffInPb.getIsSnapshotRoot();\n        INodeDirectoryAttributes copy \u003d null;\n        if (useRoot) {\n          copy \u003d snapshot.getRoot();\n        } else if (diffInPb.hasSnapshotCopy()) {\n          INodeSection.INodeDirectory dirCopyInPb \u003d diffInPb.getSnapshotCopy();\n          final byte[] name \u003d diffInPb.getName().toByteArray();\n          PermissionStatus permission \u003d loadPermission(\n              dirCopyInPb.getPermission(), state.getStringTable());\n          AclFeature acl \u003d null;\n          if (dirCopyInPb.hasAcl()) {\n            acl \u003d new AclFeature(FSImageFormatPBINode.Loader.loadAclEntries(\n                dirCopyInPb.getAcl(), state.getStringTable()));\n          }\n          XAttrFeature xAttrs \u003d null;\n          if (dirCopyInPb.hasXAttrs()) {\n            xAttrs \u003d new XAttrFeature(FSImageFormatPBINode.Loader.loadXAttrs(\n                dirCopyInPb.getXAttrs(), state.getStringTable()));\n          }\n\n          long modTime \u003d dirCopyInPb.getModificationTime();\n          boolean noQuota \u003d dirCopyInPb.getNsQuota() \u003d\u003d -1\n              \u0026\u0026 dirCopyInPb.getDsQuota() \u003d\u003d -1;\n\n          copy \u003d noQuota ? new INodeDirectoryAttributes.SnapshotCopy(name,\n              permission, acl, modTime, xAttrs)\n              : new INodeDirectoryAttributes.CopyWithQuota(name, permission,\n                  acl, modTime, dirCopyInPb.getNsQuota(),\n                  dirCopyInPb.getDsQuota(), xAttrs);\n        }\n        // load created list\n        List\u003cINode\u003e clist \u003d loadCreatedList(in, dir,\n            diffInPb.getCreatedListSize());\n        // load deleted list\n        List\u003cINode\u003e dlist \u003d loadDeletedList(refList, in, dir,\n            diffInPb.getDeletedINodeList(), diffInPb.getDeletedINodeRefList());\n        // create the directory diff\n        DirectoryDiff diff \u003d new DirectoryDiff(snapshotId, copy, null,\n            childrenSize, clist, dlist, useRoot);\n        diffs.addFirst(diff);\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/FSImageFormatPBSnapshot.java",
      "extendedDetails": {}
    },
    "2624b20291629b4565ea45590b66f2c38f96df67": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-5847. Consolidate INodeReference into a separate section. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1567812 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/02/14 4:00 PM",
      "commitName": "2624b20291629b4565ea45590b66f2c38f96df67",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-5847. Consolidate INodeReference into a separate section. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1567812 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/02/14 4:00 PM",
          "commitName": "2624b20291629b4565ea45590b66f2c38f96df67",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "10/02/14 3:13 PM",
          "commitNameOld": "5c978a43c3052cc1466b23653c354399186b4e10",
          "commitAuthorOld": "Chris Nauroth",
          "daysBetweenCommits": 2.03,
          "commitsBetweenForRepo": 23,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,43 @@\n     private void loadDirectoryDiffList(InputStream in, INodeDirectory dir,\n-        int size) throws IOException {\n+        int size, final List\u003cINodeReference\u003e refList) throws IOException {\n       if (!dir.isWithSnapshot()) {\n         dir.addSnapshotFeature(null);\n       }\n       DirectoryDiffList diffs \u003d dir.getDiffs();\n       for (int i \u003d 0; i \u003c size; i++) {\n         // load a directory diff\n         SnapshotDiffSection.DirectoryDiff diffInPb \u003d SnapshotDiffSection.\n             DirectoryDiff.parseDelimitedFrom(in);\n         final int snapshotId \u003d diffInPb.getSnapshotId();\n         final Snapshot snapshot \u003d snapshotMap.get(snapshotId);\n         int childrenSize \u003d diffInPb.getChildrenSize();\n         boolean useRoot \u003d diffInPb.getIsSnapshotRoot();\n         INodeDirectoryAttributes copy \u003d null;\n         if (useRoot) {\n           copy \u003d snapshot.getRoot();\n-        }else if (diffInPb.hasSnapshotCopy()) {\n+        } else if (diffInPb.hasSnapshotCopy()) {\n           INodeSection.INodeDirectory dirCopyInPb \u003d diffInPb.getSnapshotCopy();\n           final byte[] name \u003d diffInPb.getName().toByteArray();\n           PermissionStatus permission \u003d loadPermission(\n               dirCopyInPb.getPermission(), parent.getLoaderContext()\n                   .getStringTable());\n           long modTime \u003d dirCopyInPb.getModificationTime();\n           boolean noQuota \u003d dirCopyInPb.getNsQuota() \u003d\u003d -1\n               \u0026\u0026 dirCopyInPb.getDsQuota() \u003d\u003d -1;\n           copy \u003d noQuota ? new INodeDirectoryAttributes.SnapshotCopy(name,\n               permission, modTime)\n               : new INodeDirectoryAttributes.CopyWithQuota(name, permission,\n                   modTime, dirCopyInPb.getNsQuota(), dirCopyInPb.getDsQuota());\n         }\n         // load created list\n         List\u003cINode\u003e clist \u003d loadCreatedList(in, dir,\n             diffInPb.getCreatedListSize());\n         // load deleted list\n-        List\u003cINode\u003e dlist \u003d loadDeletedList(in, dir,\n-            diffInPb.getNumOfDeletedRef(), diffInPb.getDeletedINodeList());\n+        List\u003cINode\u003e dlist \u003d loadDeletedList(refList, in, dir,\n+            diffInPb.getDeletedINodeList(), diffInPb.getDeletedINodeRefList());\n         // create the directory diff\n         DirectoryDiff diff \u003d new DirectoryDiff(snapshotId, copy, null,\n             childrenSize, clist, dlist, useRoot);\n         diffs.addFirst(diff);\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void loadDirectoryDiffList(InputStream in, INodeDirectory dir,\n        int size, final List\u003cINodeReference\u003e refList) throws IOException {\n      if (!dir.isWithSnapshot()) {\n        dir.addSnapshotFeature(null);\n      }\n      DirectoryDiffList diffs \u003d dir.getDiffs();\n      for (int i \u003d 0; i \u003c size; i++) {\n        // load a directory diff\n        SnapshotDiffSection.DirectoryDiff diffInPb \u003d SnapshotDiffSection.\n            DirectoryDiff.parseDelimitedFrom(in);\n        final int snapshotId \u003d diffInPb.getSnapshotId();\n        final Snapshot snapshot \u003d snapshotMap.get(snapshotId);\n        int childrenSize \u003d diffInPb.getChildrenSize();\n        boolean useRoot \u003d diffInPb.getIsSnapshotRoot();\n        INodeDirectoryAttributes copy \u003d null;\n        if (useRoot) {\n          copy \u003d snapshot.getRoot();\n        } else if (diffInPb.hasSnapshotCopy()) {\n          INodeSection.INodeDirectory dirCopyInPb \u003d diffInPb.getSnapshotCopy();\n          final byte[] name \u003d diffInPb.getName().toByteArray();\n          PermissionStatus permission \u003d loadPermission(\n              dirCopyInPb.getPermission(), parent.getLoaderContext()\n                  .getStringTable());\n          long modTime \u003d dirCopyInPb.getModificationTime();\n          boolean noQuota \u003d dirCopyInPb.getNsQuota() \u003d\u003d -1\n              \u0026\u0026 dirCopyInPb.getDsQuota() \u003d\u003d -1;\n          copy \u003d noQuota ? new INodeDirectoryAttributes.SnapshotCopy(name,\n              permission, modTime)\n              : new INodeDirectoryAttributes.CopyWithQuota(name, permission,\n                  modTime, dirCopyInPb.getNsQuota(), dirCopyInPb.getDsQuota());\n        }\n        // load created list\n        List\u003cINode\u003e clist \u003d loadCreatedList(in, dir,\n            diffInPb.getCreatedListSize());\n        // load deleted list\n        List\u003cINode\u003e dlist \u003d loadDeletedList(refList, in, dir,\n            diffInPb.getDeletedINodeList(), diffInPb.getDeletedINodeRefList());\n        // create the directory diff\n        DirectoryDiff diff \u003d new DirectoryDiff(snapshotId, copy, null,\n            childrenSize, clist, dlist, useRoot);\n        diffs.addFirst(diff);\n      }\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/FSImageFormatPBSnapshot.java",
          "extendedDetails": {
            "oldValue": "[in-InputStream, dir-INodeDirectory, size-int]",
            "newValue": "[in-InputStream, dir-INodeDirectory, size-int, refList-List\u003cINodeReference\u003e(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5847. Consolidate INodeReference into a separate section. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1567812 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/02/14 4:00 PM",
          "commitName": "2624b20291629b4565ea45590b66f2c38f96df67",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "10/02/14 3:13 PM",
          "commitNameOld": "5c978a43c3052cc1466b23653c354399186b4e10",
          "commitAuthorOld": "Chris Nauroth",
          "daysBetweenCommits": 2.03,
          "commitsBetweenForRepo": 23,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,43 @@\n     private void loadDirectoryDiffList(InputStream in, INodeDirectory dir,\n-        int size) throws IOException {\n+        int size, final List\u003cINodeReference\u003e refList) throws IOException {\n       if (!dir.isWithSnapshot()) {\n         dir.addSnapshotFeature(null);\n       }\n       DirectoryDiffList diffs \u003d dir.getDiffs();\n       for (int i \u003d 0; i \u003c size; i++) {\n         // load a directory diff\n         SnapshotDiffSection.DirectoryDiff diffInPb \u003d SnapshotDiffSection.\n             DirectoryDiff.parseDelimitedFrom(in);\n         final int snapshotId \u003d diffInPb.getSnapshotId();\n         final Snapshot snapshot \u003d snapshotMap.get(snapshotId);\n         int childrenSize \u003d diffInPb.getChildrenSize();\n         boolean useRoot \u003d diffInPb.getIsSnapshotRoot();\n         INodeDirectoryAttributes copy \u003d null;\n         if (useRoot) {\n           copy \u003d snapshot.getRoot();\n-        }else if (diffInPb.hasSnapshotCopy()) {\n+        } else if (diffInPb.hasSnapshotCopy()) {\n           INodeSection.INodeDirectory dirCopyInPb \u003d diffInPb.getSnapshotCopy();\n           final byte[] name \u003d diffInPb.getName().toByteArray();\n           PermissionStatus permission \u003d loadPermission(\n               dirCopyInPb.getPermission(), parent.getLoaderContext()\n                   .getStringTable());\n           long modTime \u003d dirCopyInPb.getModificationTime();\n           boolean noQuota \u003d dirCopyInPb.getNsQuota() \u003d\u003d -1\n               \u0026\u0026 dirCopyInPb.getDsQuota() \u003d\u003d -1;\n           copy \u003d noQuota ? new INodeDirectoryAttributes.SnapshotCopy(name,\n               permission, modTime)\n               : new INodeDirectoryAttributes.CopyWithQuota(name, permission,\n                   modTime, dirCopyInPb.getNsQuota(), dirCopyInPb.getDsQuota());\n         }\n         // load created list\n         List\u003cINode\u003e clist \u003d loadCreatedList(in, dir,\n             diffInPb.getCreatedListSize());\n         // load deleted list\n-        List\u003cINode\u003e dlist \u003d loadDeletedList(in, dir,\n-            diffInPb.getNumOfDeletedRef(), diffInPb.getDeletedINodeList());\n+        List\u003cINode\u003e dlist \u003d loadDeletedList(refList, in, dir,\n+            diffInPb.getDeletedINodeList(), diffInPb.getDeletedINodeRefList());\n         // create the directory diff\n         DirectoryDiff diff \u003d new DirectoryDiff(snapshotId, copy, null,\n             childrenSize, clist, dlist, useRoot);\n         diffs.addFirst(diff);\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private void loadDirectoryDiffList(InputStream in, INodeDirectory dir,\n        int size, final List\u003cINodeReference\u003e refList) throws IOException {\n      if (!dir.isWithSnapshot()) {\n        dir.addSnapshotFeature(null);\n      }\n      DirectoryDiffList diffs \u003d dir.getDiffs();\n      for (int i \u003d 0; i \u003c size; i++) {\n        // load a directory diff\n        SnapshotDiffSection.DirectoryDiff diffInPb \u003d SnapshotDiffSection.\n            DirectoryDiff.parseDelimitedFrom(in);\n        final int snapshotId \u003d diffInPb.getSnapshotId();\n        final Snapshot snapshot \u003d snapshotMap.get(snapshotId);\n        int childrenSize \u003d diffInPb.getChildrenSize();\n        boolean useRoot \u003d diffInPb.getIsSnapshotRoot();\n        INodeDirectoryAttributes copy \u003d null;\n        if (useRoot) {\n          copy \u003d snapshot.getRoot();\n        } else if (diffInPb.hasSnapshotCopy()) {\n          INodeSection.INodeDirectory dirCopyInPb \u003d diffInPb.getSnapshotCopy();\n          final byte[] name \u003d diffInPb.getName().toByteArray();\n          PermissionStatus permission \u003d loadPermission(\n              dirCopyInPb.getPermission(), parent.getLoaderContext()\n                  .getStringTable());\n          long modTime \u003d dirCopyInPb.getModificationTime();\n          boolean noQuota \u003d dirCopyInPb.getNsQuota() \u003d\u003d -1\n              \u0026\u0026 dirCopyInPb.getDsQuota() \u003d\u003d -1;\n          copy \u003d noQuota ? new INodeDirectoryAttributes.SnapshotCopy(name,\n              permission, modTime)\n              : new INodeDirectoryAttributes.CopyWithQuota(name, permission,\n                  modTime, dirCopyInPb.getNsQuota(), dirCopyInPb.getDsQuota());\n        }\n        // load created list\n        List\u003cINode\u003e clist \u003d loadCreatedList(in, dir,\n            diffInPb.getCreatedListSize());\n        // load deleted list\n        List\u003cINode\u003e dlist \u003d loadDeletedList(refList, in, dir,\n            diffInPb.getDeletedINodeList(), diffInPb.getDeletedINodeRefList());\n        // create the directory diff\n        DirectoryDiff diff \u003d new DirectoryDiff(snapshotId, copy, null,\n            childrenSize, clist, dlist, useRoot);\n        diffs.addFirst(diff);\n      }\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/FSImageFormatPBSnapshot.java",
          "extendedDetails": {}
        }
      ]
    },
    "5c978a43c3052cc1466b23653c354399186b4e10": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5915. Refactor FSImageFormatProtobuf to simplify cross section reads. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1566824 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/02/14 3:13 PM",
      "commitName": "5c978a43c3052cc1466b23653c354399186b4e10",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "09/02/14 11:18 AM",
      "commitNameOld": "a2edb11b68ae01a44092cb14ac2717a6aad93305",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 1.16,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,43 @@\n     private void loadDirectoryDiffList(InputStream in, INodeDirectory dir,\n         int size) throws IOException {\n       if (!dir.isWithSnapshot()) {\n         dir.addSnapshotFeature(null);\n       }\n       DirectoryDiffList diffs \u003d dir.getDiffs();\n       for (int i \u003d 0; i \u003c size; i++) {\n         // load a directory diff\n         SnapshotDiffSection.DirectoryDiff diffInPb \u003d SnapshotDiffSection.\n             DirectoryDiff.parseDelimitedFrom(in);\n         final int snapshotId \u003d diffInPb.getSnapshotId();\n         final Snapshot snapshot \u003d snapshotMap.get(snapshotId);\n         int childrenSize \u003d diffInPb.getChildrenSize();\n         boolean useRoot \u003d diffInPb.getIsSnapshotRoot();\n         INodeDirectoryAttributes copy \u003d null;\n         if (useRoot) {\n           copy \u003d snapshot.getRoot();\n         }else if (diffInPb.hasSnapshotCopy()) {\n           INodeSection.INodeDirectory dirCopyInPb \u003d diffInPb.getSnapshotCopy();\n           final byte[] name \u003d diffInPb.getName().toByteArray();\n-          PermissionStatus permission \u003d loadPermission(dirCopyInPb\n-              .getPermission(), parent.getStringTable());\n+          PermissionStatus permission \u003d loadPermission(\n+              dirCopyInPb.getPermission(), parent.getLoaderContext()\n+                  .getStringTable());\n           long modTime \u003d dirCopyInPb.getModificationTime();\n           boolean noQuota \u003d dirCopyInPb.getNsQuota() \u003d\u003d -1\n               \u0026\u0026 dirCopyInPb.getDsQuota() \u003d\u003d -1;\n           copy \u003d noQuota ? new INodeDirectoryAttributes.SnapshotCopy(name,\n               permission, modTime)\n               : new INodeDirectoryAttributes.CopyWithQuota(name, permission,\n                   modTime, dirCopyInPb.getNsQuota(), dirCopyInPb.getDsQuota());\n         }\n         // load created list\n         List\u003cINode\u003e clist \u003d loadCreatedList(in, dir,\n             diffInPb.getCreatedListSize());\n         // load deleted list\n         List\u003cINode\u003e dlist \u003d loadDeletedList(in, dir,\n             diffInPb.getNumOfDeletedRef(), diffInPb.getDeletedINodeList());\n         // create the directory diff\n         DirectoryDiff diff \u003d new DirectoryDiff(snapshotId, copy, null,\n             childrenSize, clist, dlist, useRoot);\n         diffs.addFirst(diff);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void loadDirectoryDiffList(InputStream in, INodeDirectory dir,\n        int size) throws IOException {\n      if (!dir.isWithSnapshot()) {\n        dir.addSnapshotFeature(null);\n      }\n      DirectoryDiffList diffs \u003d dir.getDiffs();\n      for (int i \u003d 0; i \u003c size; i++) {\n        // load a directory diff\n        SnapshotDiffSection.DirectoryDiff diffInPb \u003d SnapshotDiffSection.\n            DirectoryDiff.parseDelimitedFrom(in);\n        final int snapshotId \u003d diffInPb.getSnapshotId();\n        final Snapshot snapshot \u003d snapshotMap.get(snapshotId);\n        int childrenSize \u003d diffInPb.getChildrenSize();\n        boolean useRoot \u003d diffInPb.getIsSnapshotRoot();\n        INodeDirectoryAttributes copy \u003d null;\n        if (useRoot) {\n          copy \u003d snapshot.getRoot();\n        }else if (diffInPb.hasSnapshotCopy()) {\n          INodeSection.INodeDirectory dirCopyInPb \u003d diffInPb.getSnapshotCopy();\n          final byte[] name \u003d diffInPb.getName().toByteArray();\n          PermissionStatus permission \u003d loadPermission(\n              dirCopyInPb.getPermission(), parent.getLoaderContext()\n                  .getStringTable());\n          long modTime \u003d dirCopyInPb.getModificationTime();\n          boolean noQuota \u003d dirCopyInPb.getNsQuota() \u003d\u003d -1\n              \u0026\u0026 dirCopyInPb.getDsQuota() \u003d\u003d -1;\n          copy \u003d noQuota ? new INodeDirectoryAttributes.SnapshotCopy(name,\n              permission, modTime)\n              : new INodeDirectoryAttributes.CopyWithQuota(name, permission,\n                  modTime, dirCopyInPb.getNsQuota(), dirCopyInPb.getDsQuota());\n        }\n        // load created list\n        List\u003cINode\u003e clist \u003d loadCreatedList(in, dir,\n            diffInPb.getCreatedListSize());\n        // load deleted list\n        List\u003cINode\u003e dlist \u003d loadDeletedList(in, dir,\n            diffInPb.getNumOfDeletedRef(), diffInPb.getDeletedINodeList());\n        // create the directory diff\n        DirectoryDiff diff \u003d new DirectoryDiff(snapshotId, copy, null,\n            childrenSize, clist, dlist, useRoot);\n        diffs.addFirst(diff);\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/FSImageFormatPBSnapshot.java",
      "extendedDetails": {}
    },
    "a2edb11b68ae01a44092cb14ac2717a6aad93305": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5698. Use protobuf to serialize / deserialize FSImage. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1566359 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/02/14 11:18 AM",
      "commitName": "a2edb11b68ae01a44092cb14ac2717a6aad93305",
      "commitAuthor": "Jing Zhao",
      "diff": "@@ -0,0 +1,42 @@\n+    private void loadDirectoryDiffList(InputStream in, INodeDirectory dir,\n+        int size) throws IOException {\n+      if (!dir.isWithSnapshot()) {\n+        dir.addSnapshotFeature(null);\n+      }\n+      DirectoryDiffList diffs \u003d dir.getDiffs();\n+      for (int i \u003d 0; i \u003c size; i++) {\n+        // load a directory diff\n+        SnapshotDiffSection.DirectoryDiff diffInPb \u003d SnapshotDiffSection.\n+            DirectoryDiff.parseDelimitedFrom(in);\n+        final int snapshotId \u003d diffInPb.getSnapshotId();\n+        final Snapshot snapshot \u003d snapshotMap.get(snapshotId);\n+        int childrenSize \u003d diffInPb.getChildrenSize();\n+        boolean useRoot \u003d diffInPb.getIsSnapshotRoot();\n+        INodeDirectoryAttributes copy \u003d null;\n+        if (useRoot) {\n+          copy \u003d snapshot.getRoot();\n+        }else if (diffInPb.hasSnapshotCopy()) {\n+          INodeSection.INodeDirectory dirCopyInPb \u003d diffInPb.getSnapshotCopy();\n+          final byte[] name \u003d diffInPb.getName().toByteArray();\n+          PermissionStatus permission \u003d loadPermission(dirCopyInPb\n+              .getPermission(), parent.getStringTable());\n+          long modTime \u003d dirCopyInPb.getModificationTime();\n+          boolean noQuota \u003d dirCopyInPb.getNsQuota() \u003d\u003d -1\n+              \u0026\u0026 dirCopyInPb.getDsQuota() \u003d\u003d -1;\n+          copy \u003d noQuota ? new INodeDirectoryAttributes.SnapshotCopy(name,\n+              permission, modTime)\n+              : new INodeDirectoryAttributes.CopyWithQuota(name, permission,\n+                  modTime, dirCopyInPb.getNsQuota(), dirCopyInPb.getDsQuota());\n+        }\n+        // load created list\n+        List\u003cINode\u003e clist \u003d loadCreatedList(in, dir,\n+            diffInPb.getCreatedListSize());\n+        // load deleted list\n+        List\u003cINode\u003e dlist \u003d loadDeletedList(in, dir,\n+            diffInPb.getNumOfDeletedRef(), diffInPb.getDeletedINodeList());\n+        // create the directory diff\n+        DirectoryDiff diff \u003d new DirectoryDiff(snapshotId, copy, null,\n+            childrenSize, clist, dlist, useRoot);\n+        diffs.addFirst(diff);\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void loadDirectoryDiffList(InputStream in, INodeDirectory dir,\n        int size) throws IOException {\n      if (!dir.isWithSnapshot()) {\n        dir.addSnapshotFeature(null);\n      }\n      DirectoryDiffList diffs \u003d dir.getDiffs();\n      for (int i \u003d 0; i \u003c size; i++) {\n        // load a directory diff\n        SnapshotDiffSection.DirectoryDiff diffInPb \u003d SnapshotDiffSection.\n            DirectoryDiff.parseDelimitedFrom(in);\n        final int snapshotId \u003d diffInPb.getSnapshotId();\n        final Snapshot snapshot \u003d snapshotMap.get(snapshotId);\n        int childrenSize \u003d diffInPb.getChildrenSize();\n        boolean useRoot \u003d diffInPb.getIsSnapshotRoot();\n        INodeDirectoryAttributes copy \u003d null;\n        if (useRoot) {\n          copy \u003d snapshot.getRoot();\n        }else if (diffInPb.hasSnapshotCopy()) {\n          INodeSection.INodeDirectory dirCopyInPb \u003d diffInPb.getSnapshotCopy();\n          final byte[] name \u003d diffInPb.getName().toByteArray();\n          PermissionStatus permission \u003d loadPermission(dirCopyInPb\n              .getPermission(), parent.getStringTable());\n          long modTime \u003d dirCopyInPb.getModificationTime();\n          boolean noQuota \u003d dirCopyInPb.getNsQuota() \u003d\u003d -1\n              \u0026\u0026 dirCopyInPb.getDsQuota() \u003d\u003d -1;\n          copy \u003d noQuota ? new INodeDirectoryAttributes.SnapshotCopy(name,\n              permission, modTime)\n              : new INodeDirectoryAttributes.CopyWithQuota(name, permission,\n                  modTime, dirCopyInPb.getNsQuota(), dirCopyInPb.getDsQuota());\n        }\n        // load created list\n        List\u003cINode\u003e clist \u003d loadCreatedList(in, dir,\n            diffInPb.getCreatedListSize());\n        // load deleted list\n        List\u003cINode\u003e dlist \u003d loadDeletedList(in, dir,\n            diffInPb.getNumOfDeletedRef(), diffInPb.getDeletedINodeList());\n        // create the directory diff\n        DirectoryDiff diff \u003d new DirectoryDiff(snapshotId, copy, null,\n            childrenSize, clist, dlist, useRoot);\n        diffs.addFirst(diff);\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/FSImageFormatPBSnapshot.java"
    }
  }
}