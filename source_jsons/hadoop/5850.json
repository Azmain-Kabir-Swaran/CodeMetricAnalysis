{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NameNodeRpcServer.java",
  "functionName": "verifySoftwareVersion",
  "functionId": "verifySoftwareVersion___dnReg-DatanodeRegistration",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeRpcServer.java",
  "functionStartLine": 1866,
  "functionEndLine": 1893,
  "numCommitsSeen": 296,
  "timeTaken": 5591,
  "changeHistory": [
    "3ae38ec7dfa1aaf451cf889cec6cf862379af32a",
    "7f427646dfe80f9a4dfac0a979709f367e74a7e7"
  ],
  "changeHistoryShort": {
    "3ae38ec7dfa1aaf451cf889cec6cf862379af32a": "Ybodychange",
    "7f427646dfe80f9a4dfac0a979709f367e74a7e7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3ae38ec7dfa1aaf451cf889cec6cf862379af32a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7712. Switch blockStateChangeLog to use slf4j.\n",
      "commitDate": "03/02/15 3:01 PM",
      "commitName": "3ae38ec7dfa1aaf451cf889cec6cf862379af32a",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "27/01/15 12:58 PM",
      "commitNameOld": "2848db814a98b83e7546f65a2751e56fb5b2dbe0",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 7.09,
      "commitsBetweenForRepo": 51,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   private void verifySoftwareVersion(DatanodeRegistration dnReg)\n       throws IncorrectVersionException {\n     String dnVersion \u003d dnReg.getSoftwareVersion();\n     if (VersionUtil.compareVersions(dnVersion, minimumDataNodeVersion) \u003c 0) {\n       IncorrectVersionException ive \u003d new IncorrectVersionException(\n           minimumDataNodeVersion, dnVersion, \"DataNode\", \"NameNode\");\n       LOG.warn(ive.getMessage() + \" DN: \" + dnReg);\n       throw ive;\n     }\n     String nnVersion \u003d VersionInfo.getVersion();\n     if (!dnVersion.equals(nnVersion)) {\n       String messagePrefix \u003d \"Reported DataNode version \u0027\" + dnVersion +\n           \"\u0027 of DN \" + dnReg + \" does not match NameNode version \u0027\" +\n           nnVersion + \"\u0027\";\n       long nnCTime \u003d nn.getFSImage().getStorage().getCTime();\n       long dnCTime \u003d dnReg.getStorageInfo().getCTime();\n       if (nnCTime !\u003d dnCTime) {\n         IncorrectVersionException ive \u003d new IncorrectVersionException(\n             messagePrefix + \" and CTime of DN (\u0027\" + dnCTime +\n             \"\u0027) does not match CTime of NN (\u0027\" + nnCTime + \"\u0027)\");\n-        LOG.warn(ive);\n+        LOG.warn(ive.toString(), ive);\n         throw ive;\n       } else {\n         LOG.info(messagePrefix +\n             \". Note: This is normal during a rolling upgrade.\");\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void verifySoftwareVersion(DatanodeRegistration dnReg)\n      throws IncorrectVersionException {\n    String dnVersion \u003d dnReg.getSoftwareVersion();\n    if (VersionUtil.compareVersions(dnVersion, minimumDataNodeVersion) \u003c 0) {\n      IncorrectVersionException ive \u003d new IncorrectVersionException(\n          minimumDataNodeVersion, dnVersion, \"DataNode\", \"NameNode\");\n      LOG.warn(ive.getMessage() + \" DN: \" + dnReg);\n      throw ive;\n    }\n    String nnVersion \u003d VersionInfo.getVersion();\n    if (!dnVersion.equals(nnVersion)) {\n      String messagePrefix \u003d \"Reported DataNode version \u0027\" + dnVersion +\n          \"\u0027 of DN \" + dnReg + \" does not match NameNode version \u0027\" +\n          nnVersion + \"\u0027\";\n      long nnCTime \u003d nn.getFSImage().getStorage().getCTime();\n      long dnCTime \u003d dnReg.getStorageInfo().getCTime();\n      if (nnCTime !\u003d dnCTime) {\n        IncorrectVersionException ive \u003d new IncorrectVersionException(\n            messagePrefix + \" and CTime of DN (\u0027\" + dnCTime +\n            \"\u0027) does not match CTime of NN (\u0027\" + nnCTime + \"\u0027)\");\n        LOG.warn(ive.toString(), ive);\n        throw ive;\n      } else {\n        LOG.info(messagePrefix +\n            \". Note: This is normal during a rolling upgrade.\");\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeRpcServer.java",
      "extendedDetails": {}
    },
    "7f427646dfe80f9a4dfac0a979709f367e74a7e7": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-2983. Relax the build version check to permit rolling upgrades within a release. Contributed by Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1325110 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/04/12 8:36 PM",
      "commitName": "7f427646dfe80f9a4dfac0a979709f367e74a7e7",
      "commitAuthor": "Aaron Myers",
      "diff": "@@ -0,0 +1,28 @@\n+  private void verifySoftwareVersion(DatanodeRegistration dnReg)\n+      throws IncorrectVersionException {\n+    String dnVersion \u003d dnReg.getSoftwareVersion();\n+    if (VersionUtil.compareVersions(dnVersion, minimumDataNodeVersion) \u003c 0) {\n+      IncorrectVersionException ive \u003d new IncorrectVersionException(\n+          minimumDataNodeVersion, dnVersion, \"DataNode\", \"NameNode\");\n+      LOG.warn(ive.getMessage() + \" DN: \" + dnReg);\n+      throw ive;\n+    }\n+    String nnVersion \u003d VersionInfo.getVersion();\n+    if (!dnVersion.equals(nnVersion)) {\n+      String messagePrefix \u003d \"Reported DataNode version \u0027\" + dnVersion +\n+          \"\u0027 of DN \" + dnReg + \" does not match NameNode version \u0027\" +\n+          nnVersion + \"\u0027\";\n+      long nnCTime \u003d nn.getFSImage().getStorage().getCTime();\n+      long dnCTime \u003d dnReg.getStorageInfo().getCTime();\n+      if (nnCTime !\u003d dnCTime) {\n+        IncorrectVersionException ive \u003d new IncorrectVersionException(\n+            messagePrefix + \" and CTime of DN (\u0027\" + dnCTime +\n+            \"\u0027) does not match CTime of NN (\u0027\" + nnCTime + \"\u0027)\");\n+        LOG.warn(ive);\n+        throw ive;\n+      } else {\n+        LOG.info(messagePrefix +\n+            \". Note: This is normal during a rolling upgrade.\");\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void verifySoftwareVersion(DatanodeRegistration dnReg)\n      throws IncorrectVersionException {\n    String dnVersion \u003d dnReg.getSoftwareVersion();\n    if (VersionUtil.compareVersions(dnVersion, minimumDataNodeVersion) \u003c 0) {\n      IncorrectVersionException ive \u003d new IncorrectVersionException(\n          minimumDataNodeVersion, dnVersion, \"DataNode\", \"NameNode\");\n      LOG.warn(ive.getMessage() + \" DN: \" + dnReg);\n      throw ive;\n    }\n    String nnVersion \u003d VersionInfo.getVersion();\n    if (!dnVersion.equals(nnVersion)) {\n      String messagePrefix \u003d \"Reported DataNode version \u0027\" + dnVersion +\n          \"\u0027 of DN \" + dnReg + \" does not match NameNode version \u0027\" +\n          nnVersion + \"\u0027\";\n      long nnCTime \u003d nn.getFSImage().getStorage().getCTime();\n      long dnCTime \u003d dnReg.getStorageInfo().getCTime();\n      if (nnCTime !\u003d dnCTime) {\n        IncorrectVersionException ive \u003d new IncorrectVersionException(\n            messagePrefix + \" and CTime of DN (\u0027\" + dnCTime +\n            \"\u0027) does not match CTime of NN (\u0027\" + nnCTime + \"\u0027)\");\n        LOG.warn(ive);\n        throw ive;\n      } else {\n        LOG.info(messagePrefix +\n            \". Note: This is normal during a rolling upgrade.\");\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeRpcServer.java"
    }
  }
}