{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HBaseTimelineWriterImpl.java",
  "functionName": "storeRelations",
  "functionId": "storeRelations___rowKey-byte[]__connectedEntities-Map__String,Set__String______columnPrefix-ColumnPrefix__T____table-TypedBufferedMutator__T__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
  "functionStartLine": 402,
  "functionEndLine": 416,
  "numCommitsSeen": 43,
  "timeTaken": 4529,
  "changeHistory": [
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
    "9f6540535d9148abbea836d54a9e94d25319c5d5",
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276",
    "892b193bd77c15932b4c084c1d525b7017def0d4",
    "7b8cfa5c2ff62005c8b78867fedd64b48e50383d",
    "00e85e7a2b9446dc37265feba07473b156d66367",
    "92d90c3a243134177f192d1d473dd606c79a91fc",
    "5a4278ccbd22b50ea1e80d28c3eea1777ffc2875"
  ],
  "changeHistoryShort": {
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2": "Ymultichange(Yfilerename,Ybodychange)",
    "9f6540535d9148abbea836d54a9e94d25319c5d5": "Ybodychange",
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276": "Yfilerename",
    "892b193bd77c15932b4c084c1d525b7017def0d4": "Ybodychange",
    "7b8cfa5c2ff62005c8b78867fedd64b48e50383d": "Ybodychange",
    "00e85e7a2b9446dc37265feba07473b156d66367": "Ymultichange(Yparameterchange,Ybodychange)",
    "92d90c3a243134177f192d1d473dd606c79a91fc": "Ymultichange(Yparameterchange,Ybodychange)",
    "5a4278ccbd22b50ea1e80d28c3eea1777ffc2875": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "YARN-7919. Refactor timelineservice-hbase module into submodules. Contributed by Haibo Chen.\n",
      "commitDate": "17/02/18 7:00 AM",
      "commitName": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
      "commitAuthor": "Rohith Sharma K S",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-7919. Refactor timelineservice-hbase module into submodules. Contributed by Haibo Chen.\n",
          "commitDate": "17/02/18 7:00 AM",
          "commitName": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
          "commitAuthor": "Rohith Sharma K S",
          "commitDateOld": "17/02/18 3:24 AM",
          "commitNameOld": "a1e56a62863d8d494af309ec5f476c4b7e4d5ef9",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.15,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,15 @@\n-  private \u003cT\u003e void storeRelations(byte[] rowKey,\n+  private \u003cT extends BaseTable\u003cT\u003e\u003e void storeRelations(byte[] rowKey,\n       Map\u003cString, Set\u003cString\u003e\u003e connectedEntities, ColumnPrefix\u003cT\u003e columnPrefix,\n       TypedBufferedMutator\u003cT\u003e table) throws IOException {\n     if (connectedEntities !\u003d null) {\n       for (Map.Entry\u003cString, Set\u003cString\u003e\u003e connectedEntity : connectedEntities\n           .entrySet()) {\n         // id3?id4?id5\n         String compoundValue \u003d\n             Separator.VALUES.joinEncoded(connectedEntity.getValue());\n-        columnPrefix.store(rowKey, table,\n-            stringKeyConverter.encode(connectedEntity.getKey()), null,\n-            compoundValue);\n+        ColumnRWHelper.store(rowKey, table, columnPrefix,\n+            stringKeyConverter.encode(connectedEntity.getKey()),\n+            null, compoundValue);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private \u003cT extends BaseTable\u003cT\u003e\u003e void storeRelations(byte[] rowKey,\n      Map\u003cString, Set\u003cString\u003e\u003e connectedEntities, ColumnPrefix\u003cT\u003e columnPrefix,\n      TypedBufferedMutator\u003cT\u003e table) throws IOException {\n    if (connectedEntities !\u003d null) {\n      for (Map.Entry\u003cString, Set\u003cString\u003e\u003e connectedEntity : connectedEntities\n          .entrySet()) {\n        // id3?id4?id5\n        String compoundValue \u003d\n            Separator.VALUES.joinEncoded(connectedEntity.getValue());\n        ColumnRWHelper.store(rowKey, table, columnPrefix,\n            stringKeyConverter.encode(connectedEntity.getKey()),\n            null, compoundValue);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7919. Refactor timelineservice-hbase module into submodules. Contributed by Haibo Chen.\n",
          "commitDate": "17/02/18 7:00 AM",
          "commitName": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
          "commitAuthor": "Rohith Sharma K S",
          "commitDateOld": "17/02/18 3:24 AM",
          "commitNameOld": "a1e56a62863d8d494af309ec5f476c4b7e4d5ef9",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.15,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,15 @@\n-  private \u003cT\u003e void storeRelations(byte[] rowKey,\n+  private \u003cT extends BaseTable\u003cT\u003e\u003e void storeRelations(byte[] rowKey,\n       Map\u003cString, Set\u003cString\u003e\u003e connectedEntities, ColumnPrefix\u003cT\u003e columnPrefix,\n       TypedBufferedMutator\u003cT\u003e table) throws IOException {\n     if (connectedEntities !\u003d null) {\n       for (Map.Entry\u003cString, Set\u003cString\u003e\u003e connectedEntity : connectedEntities\n           .entrySet()) {\n         // id3?id4?id5\n         String compoundValue \u003d\n             Separator.VALUES.joinEncoded(connectedEntity.getValue());\n-        columnPrefix.store(rowKey, table,\n-            stringKeyConverter.encode(connectedEntity.getKey()), null,\n-            compoundValue);\n+        ColumnRWHelper.store(rowKey, table, columnPrefix,\n+            stringKeyConverter.encode(connectedEntity.getKey()),\n+            null, compoundValue);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private \u003cT extends BaseTable\u003cT\u003e\u003e void storeRelations(byte[] rowKey,\n      Map\u003cString, Set\u003cString\u003e\u003e connectedEntities, ColumnPrefix\u003cT\u003e columnPrefix,\n      TypedBufferedMutator\u003cT\u003e table) throws IOException {\n    if (connectedEntities !\u003d null) {\n      for (Map.Entry\u003cString, Set\u003cString\u003e\u003e connectedEntity : connectedEntities\n          .entrySet()) {\n        // id3?id4?id5\n        String compoundValue \u003d\n            Separator.VALUES.joinEncoded(connectedEntity.getValue());\n        ColumnRWHelper.store(rowKey, table, columnPrefix,\n            stringKeyConverter.encode(connectedEntity.getKey()),\n            null, compoundValue);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "9f6540535d9148abbea836d54a9e94d25319c5d5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6734. Ensure sub-application user is extracted \u0026 sent to timeline service (Rohith Sharma K S via Varun Saxena)\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "9f6540535d9148abbea836d54a9e94d25319c5d5",
      "commitAuthor": "Varun Saxena",
      "commitDateOld": "29/08/17 10:59 PM",
      "commitNameOld": "71847ed44dc5a1ef702eaf234150a2ff69c15341",
      "commitAuthorOld": "Varun Saxena",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,15 @@\n   private \u003cT\u003e void storeRelations(byte[] rowKey,\n-      Map\u003cString, Set\u003cString\u003e\u003e connectedEntities,\n-      ColumnPrefix\u003cT\u003e columnPrefix, TypedBufferedMutator\u003cT\u003e table)\n-          throws IOException {\n-    for (Map.Entry\u003cString, Set\u003cString\u003e\u003e connectedEntity : connectedEntities\n-        .entrySet()) {\n-      // id3?id4?id5\n-      String compoundValue \u003d\n-          Separator.VALUES.joinEncoded(connectedEntity.getValue());\n-      columnPrefix.store(rowKey, table,\n-          stringKeyConverter.encode(connectedEntity.getKey()), null,\n-          compoundValue);\n+      Map\u003cString, Set\u003cString\u003e\u003e connectedEntities, ColumnPrefix\u003cT\u003e columnPrefix,\n+      TypedBufferedMutator\u003cT\u003e table) throws IOException {\n+    if (connectedEntities !\u003d null) {\n+      for (Map.Entry\u003cString, Set\u003cString\u003e\u003e connectedEntity : connectedEntities\n+          .entrySet()) {\n+        // id3?id4?id5\n+        String compoundValue \u003d\n+            Separator.VALUES.joinEncoded(connectedEntity.getValue());\n+        columnPrefix.store(rowKey, table,\n+            stringKeyConverter.encode(connectedEntity.getKey()), null,\n+            compoundValue);\n+      }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private \u003cT\u003e void storeRelations(byte[] rowKey,\n      Map\u003cString, Set\u003cString\u003e\u003e connectedEntities, ColumnPrefix\u003cT\u003e columnPrefix,\n      TypedBufferedMutator\u003cT\u003e table) throws IOException {\n    if (connectedEntities !\u003d null) {\n      for (Map.Entry\u003cString, Set\u003cString\u003e\u003e connectedEntity : connectedEntities\n          .entrySet()) {\n        // id3?id4?id5\n        String compoundValue \u003d\n            Separator.VALUES.joinEncoded(connectedEntity.getValue());\n        columnPrefix.store(rowKey, table,\n            stringKeyConverter.encode(connectedEntity.getKey()), null,\n            compoundValue);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
      "extendedDetails": {}
    },
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276": {
      "type": "Yfilerename",
      "commitMessage": "YARN-5928. Move ATSv2 HBase backend code into a new module that is only dependent at runtime by yarn servers. Contributed by Haibo Chen.\n",
      "commitDate": "19/01/17 8:52 PM",
      "commitName": "b01514f65bc6090a50a583f67d1ecb5d74b6d276",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "19/01/17 5:32 PM",
      "commitNameOld": "60865c8ea08053f3d6ac23f81c3376a3de3ca996",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 0.14,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private \u003cT\u003e void storeRelations(byte[] rowKey,\n      Map\u003cString, Set\u003cString\u003e\u003e connectedEntities,\n      ColumnPrefix\u003cT\u003e columnPrefix, TypedBufferedMutator\u003cT\u003e table)\n          throws IOException {\n    for (Map.Entry\u003cString, Set\u003cString\u003e\u003e connectedEntity : connectedEntities\n        .entrySet()) {\n      // id3?id4?id5\n      String compoundValue \u003d\n          Separator.VALUES.joinEncoded(connectedEntity.getValue());\n      columnPrefix.store(rowKey, table,\n          stringKeyConverter.encode(connectedEntity.getKey()), null,\n          compoundValue);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java"
      }
    },
    "892b193bd77c15932b4c084c1d525b7017def0d4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5170. Eliminate singleton converters and static method access. (Joep Rottinghuis via Varun Saxena)\n",
      "commitDate": "10/07/16 8:46 AM",
      "commitName": "892b193bd77c15932b4c084c1d525b7017def0d4",
      "commitAuthor": "Varun Saxena",
      "commitDateOld": "10/07/16 8:46 AM",
      "commitNameOld": "7b8cfa5c2ff62005c8b78867fedd64b48e50383d",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,14 @@\n   private \u003cT\u003e void storeRelations(byte[] rowKey,\n       Map\u003cString, Set\u003cString\u003e\u003e connectedEntities,\n       ColumnPrefix\u003cT\u003e columnPrefix, TypedBufferedMutator\u003cT\u003e table)\n           throws IOException {\n     for (Map.Entry\u003cString, Set\u003cString\u003e\u003e connectedEntity : connectedEntities\n         .entrySet()) {\n       // id3?id4?id5\n       String compoundValue \u003d\n           Separator.VALUES.joinEncoded(connectedEntity.getValue());\n       columnPrefix.store(rowKey, table,\n-          StringKeyConverter.getInstance().encode(connectedEntity.getKey()),\n-          null, compoundValue);\n+          stringKeyConverter.encode(connectedEntity.getKey()), null,\n+          compoundValue);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private \u003cT\u003e void storeRelations(byte[] rowKey,\n      Map\u003cString, Set\u003cString\u003e\u003e connectedEntities,\n      ColumnPrefix\u003cT\u003e columnPrefix, TypedBufferedMutator\u003cT\u003e table)\n          throws IOException {\n    for (Map.Entry\u003cString, Set\u003cString\u003e\u003e connectedEntity : connectedEntities\n        .entrySet()) {\n      // id3?id4?id5\n      String compoundValue \u003d\n          Separator.VALUES.joinEncoded(connectedEntity.getValue());\n      columnPrefix.store(rowKey, table,\n          stringKeyConverter.encode(connectedEntity.getKey()), null,\n          compoundValue);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
      "extendedDetails": {}
    },
    "7b8cfa5c2ff62005c8b78867fedd64b48e50383d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5109. timestamps are stored unencoded causing parse errors (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:46 AM",
      "commitName": "7b8cfa5c2ff62005c8b78867fedd64b48e50383d",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:46 AM",
      "commitNameOld": "831a3ffd6ef49214b08cb30329494418703be0f9",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,14 @@\n   private \u003cT\u003e void storeRelations(byte[] rowKey,\n       Map\u003cString, Set\u003cString\u003e\u003e connectedEntities,\n       ColumnPrefix\u003cT\u003e columnPrefix, TypedBufferedMutator\u003cT\u003e table)\n           throws IOException {\n     for (Map.Entry\u003cString, Set\u003cString\u003e\u003e connectedEntity : connectedEntities\n         .entrySet()) {\n       // id3?id4?id5\n       String compoundValue \u003d\n           Separator.VALUES.joinEncoded(connectedEntity.getValue());\n-      columnPrefix.store(rowKey, table, connectedEntity.getKey(), null,\n-          compoundValue);\n+      columnPrefix.store(rowKey, table,\n+          StringKeyConverter.getInstance().encode(connectedEntity.getKey()),\n+          null, compoundValue);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private \u003cT\u003e void storeRelations(byte[] rowKey,\n      Map\u003cString, Set\u003cString\u003e\u003e connectedEntities,\n      ColumnPrefix\u003cT\u003e columnPrefix, TypedBufferedMutator\u003cT\u003e table)\n          throws IOException {\n    for (Map.Entry\u003cString, Set\u003cString\u003e\u003e connectedEntity : connectedEntities\n        .entrySet()) {\n      // id3?id4?id5\n      String compoundValue \u003d\n          Separator.VALUES.joinEncoded(connectedEntity.getValue());\n      columnPrefix.store(rowKey, table,\n          StringKeyConverter.getInstance().encode(connectedEntity.getKey()),\n          null, compoundValue);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
      "extendedDetails": {}
    },
    "00e85e7a2b9446dc37265feba07473b156d66367": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-3906. Split the application table from the entity table. Contributed by Sangjin Lee.\n\n(cherry picked from commit bcd755eba9466ce277d3c14192c31da6462c4ab3)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "00e85e7a2b9446dc37265feba07473b156d66367",
      "commitAuthor": "Junping Du",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3906. Split the application table from the entity table. Contributed by Sangjin Lee.\n\n(cherry picked from commit bcd755eba9466ce277d3c14192c31da6462c4ab3)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "00e85e7a2b9446dc37265feba07473b156d66367",
          "commitAuthor": "Junping Du",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "9e5155be363c6610ccf41fe08b7f1394f353ea65",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,14 @@\n-  private void storeRelations(byte[] rowKey,\n+  private \u003cT\u003e void storeRelations(byte[] rowKey,\n       Map\u003cString, Set\u003cString\u003e\u003e connectedEntities,\n-      EntityColumnPrefix entityColumnPrefix) throws IOException {\n+      ColumnPrefix\u003cT\u003e columnPrefix, TypedBufferedMutator\u003cT\u003e table)\n+          throws IOException {\n     for (Map.Entry\u003cString, Set\u003cString\u003e\u003e connectedEntity : connectedEntities\n         .entrySet()) {\n       // id3?id4?id5\n       String compoundValue \u003d\n           Separator.VALUES.joinEncoded(connectedEntity.getValue());\n \n-      entityColumnPrefix.store(rowKey, entityTable, connectedEntity.getKey(),\n-          null, compoundValue);\n+      columnPrefix.store(rowKey, table, connectedEntity.getKey(), null,\n+          compoundValue);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private \u003cT\u003e void storeRelations(byte[] rowKey,\n      Map\u003cString, Set\u003cString\u003e\u003e connectedEntities,\n      ColumnPrefix\u003cT\u003e columnPrefix, TypedBufferedMutator\u003cT\u003e table)\n          throws IOException {\n    for (Map.Entry\u003cString, Set\u003cString\u003e\u003e connectedEntity : connectedEntities\n        .entrySet()) {\n      // id3?id4?id5\n      String compoundValue \u003d\n          Separator.VALUES.joinEncoded(connectedEntity.getValue());\n\n      columnPrefix.store(rowKey, table, connectedEntity.getKey(), null,\n          compoundValue);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
          "extendedDetails": {
            "oldValue": "[rowKey-byte[], connectedEntities-Map\u003cString,Set\u003cString\u003e\u003e, entityColumnPrefix-EntityColumnPrefix]",
            "newValue": "[rowKey-byte[], connectedEntities-Map\u003cString,Set\u003cString\u003e\u003e, columnPrefix-ColumnPrefix\u003cT\u003e, table-TypedBufferedMutator\u003cT\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3906. Split the application table from the entity table. Contributed by Sangjin Lee.\n\n(cherry picked from commit bcd755eba9466ce277d3c14192c31da6462c4ab3)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "00e85e7a2b9446dc37265feba07473b156d66367",
          "commitAuthor": "Junping Du",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "9e5155be363c6610ccf41fe08b7f1394f353ea65",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,14 @@\n-  private void storeRelations(byte[] rowKey,\n+  private \u003cT\u003e void storeRelations(byte[] rowKey,\n       Map\u003cString, Set\u003cString\u003e\u003e connectedEntities,\n-      EntityColumnPrefix entityColumnPrefix) throws IOException {\n+      ColumnPrefix\u003cT\u003e columnPrefix, TypedBufferedMutator\u003cT\u003e table)\n+          throws IOException {\n     for (Map.Entry\u003cString, Set\u003cString\u003e\u003e connectedEntity : connectedEntities\n         .entrySet()) {\n       // id3?id4?id5\n       String compoundValue \u003d\n           Separator.VALUES.joinEncoded(connectedEntity.getValue());\n \n-      entityColumnPrefix.store(rowKey, entityTable, connectedEntity.getKey(),\n-          null, compoundValue);\n+      columnPrefix.store(rowKey, table, connectedEntity.getKey(), null,\n+          compoundValue);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private \u003cT\u003e void storeRelations(byte[] rowKey,\n      Map\u003cString, Set\u003cString\u003e\u003e connectedEntities,\n      ColumnPrefix\u003cT\u003e columnPrefix, TypedBufferedMutator\u003cT\u003e table)\n          throws IOException {\n    for (Map.Entry\u003cString, Set\u003cString\u003e\u003e connectedEntity : connectedEntities\n        .entrySet()) {\n      // id3?id4?id5\n      String compoundValue \u003d\n          Separator.VALUES.joinEncoded(connectedEntity.getValue());\n\n      columnPrefix.store(rowKey, table, connectedEntity.getKey(), null,\n          compoundValue);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "92d90c3a243134177f192d1d473dd606c79a91fc": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-3706. Generalize native HBase writer for additional tables (Joep Rottinghuis via sjlee)\n\n(cherry picked from commit 9137aeae0dec83f9eff40d12cae712dfd508c0c5)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "92d90c3a243134177f192d1d473dd606c79a91fc",
      "commitAuthor": "Sangjin Lee",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3706. Generalize native HBase writer for additional tables (Joep Rottinghuis via sjlee)\n\n(cherry picked from commit 9137aeae0dec83f9eff40d12cae712dfd508c0c5)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "92d90c3a243134177f192d1d473dd606c79a91fc",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "5a4278ccbd22b50ea1e80d28c3eea1777ffc2875",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,8 +1,13 @@\n   private void storeRelations(byte[] rowKey,\n       Map\u003cString, Set\u003cString\u003e\u003e connectedEntities,\n-      EntityColumnDetails columnNamePrefix) throws IOException {\n-    for (Map.Entry\u003cString, Set\u003cString\u003e\u003e entry : connectedEntities.entrySet()) {\n-      columnNamePrefix.store(rowKey, entityTable, entry.getKey(),\n-          entry.getValue());\n+      EntityColumnPrefix entityColumnPrefix) throws IOException {\n+    for (Map.Entry\u003cString, Set\u003cString\u003e\u003e connectedEntity : connectedEntities\n+        .entrySet()) {\n+      // id3?id4?id5\n+      String compoundValue \u003d\n+          Separator.VALUES.joinEncoded(connectedEntity.getValue());\n+\n+      entityColumnPrefix.store(rowKey, entityTable, connectedEntity.getKey(),\n+          null, compoundValue);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void storeRelations(byte[] rowKey,\n      Map\u003cString, Set\u003cString\u003e\u003e connectedEntities,\n      EntityColumnPrefix entityColumnPrefix) throws IOException {\n    for (Map.Entry\u003cString, Set\u003cString\u003e\u003e connectedEntity : connectedEntities\n        .entrySet()) {\n      // id3?id4?id5\n      String compoundValue \u003d\n          Separator.VALUES.joinEncoded(connectedEntity.getValue());\n\n      entityColumnPrefix.store(rowKey, entityTable, connectedEntity.getKey(),\n          null, compoundValue);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
          "extendedDetails": {
            "oldValue": "[rowKey-byte[], connectedEntities-Map\u003cString,Set\u003cString\u003e\u003e, columnNamePrefix-EntityColumnDetails]",
            "newValue": "[rowKey-byte[], connectedEntities-Map\u003cString,Set\u003cString\u003e\u003e, entityColumnPrefix-EntityColumnPrefix]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3706. Generalize native HBase writer for additional tables (Joep Rottinghuis via sjlee)\n\n(cherry picked from commit 9137aeae0dec83f9eff40d12cae712dfd508c0c5)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "92d90c3a243134177f192d1d473dd606c79a91fc",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "5a4278ccbd22b50ea1e80d28c3eea1777ffc2875",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,8 +1,13 @@\n   private void storeRelations(byte[] rowKey,\n       Map\u003cString, Set\u003cString\u003e\u003e connectedEntities,\n-      EntityColumnDetails columnNamePrefix) throws IOException {\n-    for (Map.Entry\u003cString, Set\u003cString\u003e\u003e entry : connectedEntities.entrySet()) {\n-      columnNamePrefix.store(rowKey, entityTable, entry.getKey(),\n-          entry.getValue());\n+      EntityColumnPrefix entityColumnPrefix) throws IOException {\n+    for (Map.Entry\u003cString, Set\u003cString\u003e\u003e connectedEntity : connectedEntities\n+        .entrySet()) {\n+      // id3?id4?id5\n+      String compoundValue \u003d\n+          Separator.VALUES.joinEncoded(connectedEntity.getValue());\n+\n+      entityColumnPrefix.store(rowKey, entityTable, connectedEntity.getKey(),\n+          null, compoundValue);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void storeRelations(byte[] rowKey,\n      Map\u003cString, Set\u003cString\u003e\u003e connectedEntities,\n      EntityColumnPrefix entityColumnPrefix) throws IOException {\n    for (Map.Entry\u003cString, Set\u003cString\u003e\u003e connectedEntity : connectedEntities\n        .entrySet()) {\n      // id3?id4?id5\n      String compoundValue \u003d\n          Separator.VALUES.joinEncoded(connectedEntity.getValue());\n\n      entityColumnPrefix.store(rowKey, entityTable, connectedEntity.getKey(),\n          null, compoundValue);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "5a4278ccbd22b50ea1e80d28c3eea1777ffc2875": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3411. [Storage implementation] explore the native HBase write schema for storage (Vrushali C via sjlee)\n\n(cherry picked from commit 7a3068854d27eadae1c57545988f5b2029bf119a)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "5a4278ccbd22b50ea1e80d28c3eea1777ffc2875",
      "commitAuthor": "Sangjin Lee",
      "diff": "@@ -0,0 +1,8 @@\n+  private void storeRelations(byte[] rowKey,\n+      Map\u003cString, Set\u003cString\u003e\u003e connectedEntities,\n+      EntityColumnDetails columnNamePrefix) throws IOException {\n+    for (Map.Entry\u003cString, Set\u003cString\u003e\u003e entry : connectedEntities.entrySet()) {\n+      columnNamePrefix.store(rowKey, entityTable, entry.getKey(),\n+          entry.getValue());\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void storeRelations(byte[] rowKey,\n      Map\u003cString, Set\u003cString\u003e\u003e connectedEntities,\n      EntityColumnDetails columnNamePrefix) throws IOException {\n    for (Map.Entry\u003cString, Set\u003cString\u003e\u003e entry : connectedEntities.entrySet()) {\n      columnNamePrefix.store(rowKey, entityTable, entry.getKey(),\n          entry.getValue());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/HBaseTimelineWriterImpl.java"
    }
  }
}