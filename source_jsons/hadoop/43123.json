{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ApiServer.java",
  "functionName": "updateComponents",
  "functionId": "updateComponents___request-HttpServletRequest(annotations-@Context)__serviceName-String(annotations-@PathParam(SERVICE_NAME))__requestComponents-List__Component__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
  "functionStartLine": 316,
  "functionEndLine": 346,
  "numCommitsSeen": 30,
  "timeTaken": 1803,
  "changeHistory": [
    "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0",
    "8d3b39de89809f5eed06f85f00ab223e2f75e49c"
  ],
  "changeHistoryShort": {
    "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0": "Yfilerename",
    "8d3b39de89809f5eed06f85f00ab223e2f75e49c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0": {
      "type": "Yfilerename",
      "commitMessage": "YARN-7530.  Refactored YARN service API project location.\n            Contributed by Chandni Singh\n",
      "commitDate": "18/05/18 2:29 PM",
      "commitName": "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "18/05/18 11:29 AM",
      "commitNameOld": "89f59113927dd886f09d8fe2c05ff2cd5d1390c1",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 0.12,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public Response updateComponents(@Context HttpServletRequest request,\n      @PathParam(SERVICE_NAME) String serviceName,\n      List\u003cComponent\u003e requestComponents) {\n\n    try {\n      if (requestComponents \u003d\u003d null || requestComponents.isEmpty()) {\n        throw new YarnException(\"No components provided.\");\n      }\n      UserGroupInformation ugi \u003d getProxyUser(request);\n      Set\u003cString\u003e compNamesToUpgrade \u003d new HashSet\u003c\u003e();\n      requestComponents.forEach(reqComp -\u003e {\n        if (reqComp.getState() !\u003d null \u0026\u0026\n            reqComp.getState().equals(ComponentState.UPGRADING)) {\n          compNamesToUpgrade.add(reqComp.getName());\n        }\n      });\n      LOG.info(\"PUT: upgrade components {} for service {} \" +\n          \"user \u003d {}\", compNamesToUpgrade, serviceName, ugi);\n      return processComponentsUpgrade(ugi, serviceName, compNamesToUpgrade);\n    } catch (AccessControlException e) {\n      return formatResponse(Response.Status.FORBIDDEN, e.getMessage());\n    } catch (YarnException e) {\n      return formatResponse(Response.Status.BAD_REQUEST, e.getMessage());\n    } catch (IOException | InterruptedException e) {\n      return formatResponse(Response.Status.INTERNAL_SERVER_ERROR,\n          e.getMessage());\n    } catch (UndeclaredThrowableException e) {\n      return formatResponse(Response.Status.INTERNAL_SERVER_ERROR,\n          e.getCause().getMessage());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java"
      }
    },
    "8d3b39de89809f5eed06f85f00ab223e2f75e49c": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8081.  Add support to upgrade a component.\n            Contributed by Chandni Singh\n",
      "commitDate": "15/05/18 5:40 PM",
      "commitName": "8d3b39de89809f5eed06f85f00ab223e2f75e49c",
      "commitAuthor": "Eric Yang",
      "diff": "@@ -0,0 +1,31 @@\n+  public Response updateComponents(@Context HttpServletRequest request,\n+      @PathParam(SERVICE_NAME) String serviceName,\n+      List\u003cComponent\u003e requestComponents) {\n+\n+    try {\n+      if (requestComponents \u003d\u003d null || requestComponents.isEmpty()) {\n+        throw new YarnException(\"No components provided.\");\n+      }\n+      UserGroupInformation ugi \u003d getProxyUser(request);\n+      Set\u003cString\u003e compNamesToUpgrade \u003d new HashSet\u003c\u003e();\n+      requestComponents.forEach(reqComp -\u003e {\n+        if (reqComp.getState() !\u003d null \u0026\u0026\n+            reqComp.getState().equals(ComponentState.UPGRADING)) {\n+          compNamesToUpgrade.add(reqComp.getName());\n+        }\n+      });\n+      LOG.info(\"PUT: upgrade components {} for service {} \" +\n+          \"user \u003d {}\", compNamesToUpgrade, serviceName, ugi);\n+      return processComponentsUpgrade(ugi, serviceName, compNamesToUpgrade);\n+    } catch (AccessControlException e) {\n+      return formatResponse(Response.Status.FORBIDDEN, e.getMessage());\n+    } catch (YarnException e) {\n+      return formatResponse(Response.Status.BAD_REQUEST, e.getMessage());\n+    } catch (IOException | InterruptedException e) {\n+      return formatResponse(Response.Status.INTERNAL_SERVER_ERROR,\n+          e.getMessage());\n+    } catch (UndeclaredThrowableException e) {\n+      return formatResponse(Response.Status.INTERNAL_SERVER_ERROR,\n+          e.getCause().getMessage());\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Response updateComponents(@Context HttpServletRequest request,\n      @PathParam(SERVICE_NAME) String serviceName,\n      List\u003cComponent\u003e requestComponents) {\n\n    try {\n      if (requestComponents \u003d\u003d null || requestComponents.isEmpty()) {\n        throw new YarnException(\"No components provided.\");\n      }\n      UserGroupInformation ugi \u003d getProxyUser(request);\n      Set\u003cString\u003e compNamesToUpgrade \u003d new HashSet\u003c\u003e();\n      requestComponents.forEach(reqComp -\u003e {\n        if (reqComp.getState() !\u003d null \u0026\u0026\n            reqComp.getState().equals(ComponentState.UPGRADING)) {\n          compNamesToUpgrade.add(reqComp.getName());\n        }\n      });\n      LOG.info(\"PUT: upgrade components {} for service {} \" +\n          \"user \u003d {}\", compNamesToUpgrade, serviceName, ugi);\n      return processComponentsUpgrade(ugi, serviceName, compNamesToUpgrade);\n    } catch (AccessControlException e) {\n      return formatResponse(Response.Status.FORBIDDEN, e.getMessage());\n    } catch (YarnException e) {\n      return formatResponse(Response.Status.BAD_REQUEST, e.getMessage());\n    } catch (IOException | InterruptedException e) {\n      return formatResponse(Response.Status.INTERNAL_SERVER_ERROR,\n          e.getMessage());\n    } catch (UndeclaredThrowableException e) {\n      return formatResponse(Response.Status.INTERNAL_SERVER_ERROR,\n          e.getCause().getMessage());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java"
    }
  }
}