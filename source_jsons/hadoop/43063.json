{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ApiServiceClient.java",
  "functionName": "getRMWebAddress",
  "functionId": "getRMWebAddress",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/client/ApiServiceClient.java",
  "functionStartLine": 99,
  "functionEndLine": 156,
  "numCommitsSeen": 28,
  "timeTaken": 5542,
  "changeHistory": [
    "d81d45ff2fc9a1c424222e021f9306bf64c916b2",
    "95372657fc25c02399b01793833021ccf88dada2",
    "27ffec7ba77ba3d0b88b97b34aca5356e2e258f4",
    "fa94d370b6e3cba9c7560c09b517583e6652f103",
    "8990eaf5925afa533fbd9c3641859a146dc5a22c",
    "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0",
    "87429affcea2de61791c1b048b6db8c8275de051",
    "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d"
  ],
  "changeHistoryShort": {
    "d81d45ff2fc9a1c424222e021f9306bf64c916b2": "Ymultichange(Yexceptionschange,Ybodychange)",
    "95372657fc25c02399b01793833021ccf88dada2": "Ybodychange",
    "27ffec7ba77ba3d0b88b97b34aca5356e2e258f4": "Ybodychange",
    "fa94d370b6e3cba9c7560c09b517583e6652f103": "Ymultichange(Ymodifierchange,Ybodychange)",
    "8990eaf5925afa533fbd9c3641859a146dc5a22c": "Ybodychange",
    "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0": "Yfilerename",
    "87429affcea2de61791c1b048b6db8c8275de051": "Ybodychange",
    "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d81d45ff2fc9a1c424222e021f9306bf64c916b2": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-9956. Improved connection error message for YARN ApiServerClient.\n           Contributed by Prabhu Joseph\n",
      "commitDate": "06/01/20 10:24 AM",
      "commitName": "d81d45ff2fc9a1c424222e021f9306bf64c916b2",
      "commitAuthor": "Eric Yang",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-9956. Improved connection error message for YARN ApiServerClient.\n           Contributed by Prabhu Joseph\n",
          "commitDate": "06/01/20 10:24 AM",
          "commitName": "d81d45ff2fc9a1c424222e021f9306bf64c916b2",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "29/03/19 1:51 PM",
          "commitNameOld": "7ee32a2eb187d43f1c8d7c6416eebc13d461ee1e",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 282.9,
          "commitsBetweenForRepo": 1824,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,58 @@\n-  String getRMWebAddress() {\n+  String getRMWebAddress() throws IOException {\n     Configuration conf \u003d getConfig();\n     String scheme \u003d \"http://\";\n     String path \u003d \"/app/v1/services/version\";\n     String rmAddress \u003d conf\n         .get(\"yarn.resourcemanager.webapp.address\");\n     if (YarnConfiguration.useHttps(conf)) {\n       scheme \u003d \"https://\";\n       rmAddress \u003d conf\n           .get(\"yarn.resourcemanager.webapp.https.address\");\n     }\n-    boolean useKerberos \u003d UserGroupInformation.isSecurityEnabled();\n-    List\u003cString\u003e rmServers \u003d getRMHAWebAddresses(conf);\n-    for (String host : rmServers) {\n-      try {\n-        Client client \u003d Client.create();\n-        client.setFollowRedirects(false);\n-        StringBuilder sb \u003d new StringBuilder();\n-        sb.append(scheme)\n-            .append(host)\n-            .append(path);\n-        if (!useKerberos) {\n-          try {\n-            String username \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n-            sb.append(\"?user.name\u003d\")\n-                .append(username);\n-          } catch (IOException e) {\n-            LOG.debug(\"Fail to resolve username: {}\", e);\n+\n+    if (HAUtil.isHAEnabled(conf)) {\n+      boolean useKerberos \u003d UserGroupInformation.isSecurityEnabled();\n+      List\u003cString\u003e rmServers \u003d getRMHAWebAddresses(conf);\n+      StringBuilder diagnosticsMsg \u003d new StringBuilder();\n+      for (String host : rmServers) {\n+        try {\n+          Client client \u003d Client.create();\n+          client.setFollowRedirects(false);\n+          StringBuilder sb \u003d new StringBuilder();\n+          sb.append(scheme)\n+              .append(host)\n+              .append(path);\n+          if (!useKerberos) {\n+            try {\n+              String username \u003d UserGroupInformation.getCurrentUser()\n+                  .getShortUserName();\n+              sb.append(\"?user.name\u003d\")\n+                  .append(username);\n+            } catch (IOException e) {\n+              LOG.debug(\"Fail to resolve username: {}\", e);\n+            }\n           }\n+          Builder builder \u003d client\n+              .resource(sb.toString()).type(MediaType.APPLICATION_JSON);\n+          if (useKerberos) {\n+            String[] server \u003d host.split(\":\");\n+            String challenge \u003d YarnClientUtils.generateToken(server[0]);\n+            builder.header(HttpHeaders.AUTHORIZATION, \"Negotiate \" +\n+                challenge);\n+            LOG.debug(\"Authorization: Negotiate {}\", challenge);\n+          }\n+          ClientResponse test \u003d builder.get(ClientResponse.class);\n+          if (test.getStatus() \u003d\u003d 200) {\n+            return scheme + host;\n+          }\n+        } catch (Exception e) {\n+          LOG.info(\"Fail to connect to: \" + host);\n+          LOG.debug(\"Root cause: \", e);\n+          diagnosticsMsg.append(\"Error connecting to \" + host\n+              + \" due to \" + e.getMessage() + \"\\n\");\n         }\n-        Builder builder \u003d client\n-            .resource(sb.toString()).type(MediaType.APPLICATION_JSON);\n-        if (useKerberos) {\n-          String[] server \u003d host.split(\":\");\n-          String challenge \u003d YarnClientUtils.generateToken(server[0]);\n-          builder.header(HttpHeaders.AUTHORIZATION, \"Negotiate \" +\n-              challenge);\n-          LOG.debug(\"Authorization: Negotiate {}\", challenge);\n-        }\n-        ClientResponse test \u003d builder.get(ClientResponse.class);\n-        if (test.getStatus() \u003d\u003d 200) {\n-          rmAddress \u003d host;\n-          break;\n-        }\n-      } catch (Exception e) {\n-        LOG.info(\"Fail to connect to: \"+host);\n-        LOG.debug(\"Root cause: {}\", e);\n       }\n+      throw new IOException(diagnosticsMsg.toString());\n     }\n     return scheme+rmAddress;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  String getRMWebAddress() throws IOException {\n    Configuration conf \u003d getConfig();\n    String scheme \u003d \"http://\";\n    String path \u003d \"/app/v1/services/version\";\n    String rmAddress \u003d conf\n        .get(\"yarn.resourcemanager.webapp.address\");\n    if (YarnConfiguration.useHttps(conf)) {\n      scheme \u003d \"https://\";\n      rmAddress \u003d conf\n          .get(\"yarn.resourcemanager.webapp.https.address\");\n    }\n\n    if (HAUtil.isHAEnabled(conf)) {\n      boolean useKerberos \u003d UserGroupInformation.isSecurityEnabled();\n      List\u003cString\u003e rmServers \u003d getRMHAWebAddresses(conf);\n      StringBuilder diagnosticsMsg \u003d new StringBuilder();\n      for (String host : rmServers) {\n        try {\n          Client client \u003d Client.create();\n          client.setFollowRedirects(false);\n          StringBuilder sb \u003d new StringBuilder();\n          sb.append(scheme)\n              .append(host)\n              .append(path);\n          if (!useKerberos) {\n            try {\n              String username \u003d UserGroupInformation.getCurrentUser()\n                  .getShortUserName();\n              sb.append(\"?user.name\u003d\")\n                  .append(username);\n            } catch (IOException e) {\n              LOG.debug(\"Fail to resolve username: {}\", e);\n            }\n          }\n          Builder builder \u003d client\n              .resource(sb.toString()).type(MediaType.APPLICATION_JSON);\n          if (useKerberos) {\n            String[] server \u003d host.split(\":\");\n            String challenge \u003d YarnClientUtils.generateToken(server[0]);\n            builder.header(HttpHeaders.AUTHORIZATION, \"Negotiate \" +\n                challenge);\n            LOG.debug(\"Authorization: Negotiate {}\", challenge);\n          }\n          ClientResponse test \u003d builder.get(ClientResponse.class);\n          if (test.getStatus() \u003d\u003d 200) {\n            return scheme + host;\n          }\n        } catch (Exception e) {\n          LOG.info(\"Fail to connect to: \" + host);\n          LOG.debug(\"Root cause: \", e);\n          diagnosticsMsg.append(\"Error connecting to \" + host\n              + \" due to \" + e.getMessage() + \"\\n\");\n        }\n      }\n      throw new IOException(diagnosticsMsg.toString());\n    }\n    return scheme+rmAddress;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/client/ApiServiceClient.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-9956. Improved connection error message for YARN ApiServerClient.\n           Contributed by Prabhu Joseph\n",
          "commitDate": "06/01/20 10:24 AM",
          "commitName": "d81d45ff2fc9a1c424222e021f9306bf64c916b2",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "29/03/19 1:51 PM",
          "commitNameOld": "7ee32a2eb187d43f1c8d7c6416eebc13d461ee1e",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 282.9,
          "commitsBetweenForRepo": 1824,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,58 @@\n-  String getRMWebAddress() {\n+  String getRMWebAddress() throws IOException {\n     Configuration conf \u003d getConfig();\n     String scheme \u003d \"http://\";\n     String path \u003d \"/app/v1/services/version\";\n     String rmAddress \u003d conf\n         .get(\"yarn.resourcemanager.webapp.address\");\n     if (YarnConfiguration.useHttps(conf)) {\n       scheme \u003d \"https://\";\n       rmAddress \u003d conf\n           .get(\"yarn.resourcemanager.webapp.https.address\");\n     }\n-    boolean useKerberos \u003d UserGroupInformation.isSecurityEnabled();\n-    List\u003cString\u003e rmServers \u003d getRMHAWebAddresses(conf);\n-    for (String host : rmServers) {\n-      try {\n-        Client client \u003d Client.create();\n-        client.setFollowRedirects(false);\n-        StringBuilder sb \u003d new StringBuilder();\n-        sb.append(scheme)\n-            .append(host)\n-            .append(path);\n-        if (!useKerberos) {\n-          try {\n-            String username \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n-            sb.append(\"?user.name\u003d\")\n-                .append(username);\n-          } catch (IOException e) {\n-            LOG.debug(\"Fail to resolve username: {}\", e);\n+\n+    if (HAUtil.isHAEnabled(conf)) {\n+      boolean useKerberos \u003d UserGroupInformation.isSecurityEnabled();\n+      List\u003cString\u003e rmServers \u003d getRMHAWebAddresses(conf);\n+      StringBuilder diagnosticsMsg \u003d new StringBuilder();\n+      for (String host : rmServers) {\n+        try {\n+          Client client \u003d Client.create();\n+          client.setFollowRedirects(false);\n+          StringBuilder sb \u003d new StringBuilder();\n+          sb.append(scheme)\n+              .append(host)\n+              .append(path);\n+          if (!useKerberos) {\n+            try {\n+              String username \u003d UserGroupInformation.getCurrentUser()\n+                  .getShortUserName();\n+              sb.append(\"?user.name\u003d\")\n+                  .append(username);\n+            } catch (IOException e) {\n+              LOG.debug(\"Fail to resolve username: {}\", e);\n+            }\n           }\n+          Builder builder \u003d client\n+              .resource(sb.toString()).type(MediaType.APPLICATION_JSON);\n+          if (useKerberos) {\n+            String[] server \u003d host.split(\":\");\n+            String challenge \u003d YarnClientUtils.generateToken(server[0]);\n+            builder.header(HttpHeaders.AUTHORIZATION, \"Negotiate \" +\n+                challenge);\n+            LOG.debug(\"Authorization: Negotiate {}\", challenge);\n+          }\n+          ClientResponse test \u003d builder.get(ClientResponse.class);\n+          if (test.getStatus() \u003d\u003d 200) {\n+            return scheme + host;\n+          }\n+        } catch (Exception e) {\n+          LOG.info(\"Fail to connect to: \" + host);\n+          LOG.debug(\"Root cause: \", e);\n+          diagnosticsMsg.append(\"Error connecting to \" + host\n+              + \" due to \" + e.getMessage() + \"\\n\");\n         }\n-        Builder builder \u003d client\n-            .resource(sb.toString()).type(MediaType.APPLICATION_JSON);\n-        if (useKerberos) {\n-          String[] server \u003d host.split(\":\");\n-          String challenge \u003d YarnClientUtils.generateToken(server[0]);\n-          builder.header(HttpHeaders.AUTHORIZATION, \"Negotiate \" +\n-              challenge);\n-          LOG.debug(\"Authorization: Negotiate {}\", challenge);\n-        }\n-        ClientResponse test \u003d builder.get(ClientResponse.class);\n-        if (test.getStatus() \u003d\u003d 200) {\n-          rmAddress \u003d host;\n-          break;\n-        }\n-      } catch (Exception e) {\n-        LOG.info(\"Fail to connect to: \"+host);\n-        LOG.debug(\"Root cause: {}\", e);\n       }\n+      throw new IOException(diagnosticsMsg.toString());\n     }\n     return scheme+rmAddress;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  String getRMWebAddress() throws IOException {\n    Configuration conf \u003d getConfig();\n    String scheme \u003d \"http://\";\n    String path \u003d \"/app/v1/services/version\";\n    String rmAddress \u003d conf\n        .get(\"yarn.resourcemanager.webapp.address\");\n    if (YarnConfiguration.useHttps(conf)) {\n      scheme \u003d \"https://\";\n      rmAddress \u003d conf\n          .get(\"yarn.resourcemanager.webapp.https.address\");\n    }\n\n    if (HAUtil.isHAEnabled(conf)) {\n      boolean useKerberos \u003d UserGroupInformation.isSecurityEnabled();\n      List\u003cString\u003e rmServers \u003d getRMHAWebAddresses(conf);\n      StringBuilder diagnosticsMsg \u003d new StringBuilder();\n      for (String host : rmServers) {\n        try {\n          Client client \u003d Client.create();\n          client.setFollowRedirects(false);\n          StringBuilder sb \u003d new StringBuilder();\n          sb.append(scheme)\n              .append(host)\n              .append(path);\n          if (!useKerberos) {\n            try {\n              String username \u003d UserGroupInformation.getCurrentUser()\n                  .getShortUserName();\n              sb.append(\"?user.name\u003d\")\n                  .append(username);\n            } catch (IOException e) {\n              LOG.debug(\"Fail to resolve username: {}\", e);\n            }\n          }\n          Builder builder \u003d client\n              .resource(sb.toString()).type(MediaType.APPLICATION_JSON);\n          if (useKerberos) {\n            String[] server \u003d host.split(\":\");\n            String challenge \u003d YarnClientUtils.generateToken(server[0]);\n            builder.header(HttpHeaders.AUTHORIZATION, \"Negotiate \" +\n                challenge);\n            LOG.debug(\"Authorization: Negotiate {}\", challenge);\n          }\n          ClientResponse test \u003d builder.get(ClientResponse.class);\n          if (test.getStatus() \u003d\u003d 200) {\n            return scheme + host;\n          }\n        } catch (Exception e) {\n          LOG.info(\"Fail to connect to: \" + host);\n          LOG.debug(\"Root cause: \", e);\n          diagnosticsMsg.append(\"Error connecting to \" + host\n              + \" due to \" + e.getMessage() + \"\\n\");\n        }\n      }\n      throw new IOException(diagnosticsMsg.toString());\n    }\n    return scheme+rmAddress;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/client/ApiServiceClient.java",
          "extendedDetails": {}
        }
      ]
    },
    "95372657fc25c02399b01793833021ccf88dada2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9287. Consecutive StringBuilder append should be reuse. Contributed by Ayush Saxena.\n",
      "commitDate": "25/02/19 11:45 AM",
      "commitName": "95372657fc25c02399b01793833021ccf88dada2",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "19/11/18 5:59 PM",
      "commitNameOld": "27ffec7ba77ba3d0b88b97b34aca5356e2e258f4",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 97.74,
      "commitsBetweenForRepo": 675,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,51 @@\n   String getRMWebAddress() {\n     Configuration conf \u003d getConfig();\n     String scheme \u003d \"http://\";\n     String path \u003d \"/app/v1/services/version\";\n     String rmAddress \u003d conf\n         .get(\"yarn.resourcemanager.webapp.address\");\n     if (YarnConfiguration.useHttps(conf)) {\n       scheme \u003d \"https://\";\n       rmAddress \u003d conf\n           .get(\"yarn.resourcemanager.webapp.https.address\");\n     }\n     boolean useKerberos \u003d UserGroupInformation.isSecurityEnabled();\n     List\u003cString\u003e rmServers \u003d getRMHAWebAddresses(conf);\n     for (String host : rmServers) {\n       try {\n         Client client \u003d Client.create();\n         client.setFollowRedirects(false);\n         StringBuilder sb \u003d new StringBuilder();\n-        sb.append(scheme);\n-        sb.append(host);\n-        sb.append(path);\n+        sb.append(scheme)\n+            .append(host)\n+            .append(path);\n         if (!useKerberos) {\n           try {\n             String username \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n-            sb.append(\"?user.name\u003d\");\n-            sb.append(username);\n+            sb.append(\"?user.name\u003d\")\n+                .append(username);\n           } catch (IOException e) {\n             LOG.debug(\"Fail to resolve username: {}\", e);\n           }\n         }\n         Builder builder \u003d client\n             .resource(sb.toString()).type(MediaType.APPLICATION_JSON);\n         if (useKerberos) {\n           String[] server \u003d host.split(\":\");\n           String challenge \u003d YarnClientUtils.generateToken(server[0]);\n           builder.header(HttpHeaders.AUTHORIZATION, \"Negotiate \" +\n               challenge);\n           LOG.debug(\"Authorization: Negotiate {}\", challenge);\n         }\n         ClientResponse test \u003d builder.get(ClientResponse.class);\n         if (test.getStatus() \u003d\u003d 200) {\n           rmAddress \u003d host;\n           break;\n         }\n       } catch (Exception e) {\n         LOG.info(\"Fail to connect to: \"+host);\n         LOG.debug(\"Root cause: {}\", e);\n       }\n     }\n     return scheme+rmAddress;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  String getRMWebAddress() {\n    Configuration conf \u003d getConfig();\n    String scheme \u003d \"http://\";\n    String path \u003d \"/app/v1/services/version\";\n    String rmAddress \u003d conf\n        .get(\"yarn.resourcemanager.webapp.address\");\n    if (YarnConfiguration.useHttps(conf)) {\n      scheme \u003d \"https://\";\n      rmAddress \u003d conf\n          .get(\"yarn.resourcemanager.webapp.https.address\");\n    }\n    boolean useKerberos \u003d UserGroupInformation.isSecurityEnabled();\n    List\u003cString\u003e rmServers \u003d getRMHAWebAddresses(conf);\n    for (String host : rmServers) {\n      try {\n        Client client \u003d Client.create();\n        client.setFollowRedirects(false);\n        StringBuilder sb \u003d new StringBuilder();\n        sb.append(scheme)\n            .append(host)\n            .append(path);\n        if (!useKerberos) {\n          try {\n            String username \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n            sb.append(\"?user.name\u003d\")\n                .append(username);\n          } catch (IOException e) {\n            LOG.debug(\"Fail to resolve username: {}\", e);\n          }\n        }\n        Builder builder \u003d client\n            .resource(sb.toString()).type(MediaType.APPLICATION_JSON);\n        if (useKerberos) {\n          String[] server \u003d host.split(\":\");\n          String challenge \u003d YarnClientUtils.generateToken(server[0]);\n          builder.header(HttpHeaders.AUTHORIZATION, \"Negotiate \" +\n              challenge);\n          LOG.debug(\"Authorization: Negotiate {}\", challenge);\n        }\n        ClientResponse test \u003d builder.get(ClientResponse.class);\n        if (test.getStatus() \u003d\u003d 200) {\n          rmAddress \u003d host;\n          break;\n        }\n      } catch (Exception e) {\n        LOG.info(\"Fail to connect to: \"+host);\n        LOG.debug(\"Root cause: {}\", e);\n      }\n    }\n    return scheme+rmAddress;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/client/ApiServiceClient.java",
      "extendedDetails": {}
    },
    "27ffec7ba77ba3d0b88b97b34aca5356e2e258f4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8778. Add command line interface to invoke interactive docker shell. Contributed by Eric Yang\n",
      "commitDate": "19/11/18 5:59 PM",
      "commitName": "27ffec7ba77ba3d0b88b97b34aca5356e2e258f4",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "12/11/18 4:53 PM",
      "commitNameOld": "4c465f5535054dad2ef0b18128fb115129f6939e",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 7.05,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,51 @@\n   String getRMWebAddress() {\n     Configuration conf \u003d getConfig();\n     String scheme \u003d \"http://\";\n     String path \u003d \"/app/v1/services/version\";\n     String rmAddress \u003d conf\n         .get(\"yarn.resourcemanager.webapp.address\");\n     if (YarnConfiguration.useHttps(conf)) {\n       scheme \u003d \"https://\";\n       rmAddress \u003d conf\n           .get(\"yarn.resourcemanager.webapp.https.address\");\n     }\n     boolean useKerberos \u003d UserGroupInformation.isSecurityEnabled();\n     List\u003cString\u003e rmServers \u003d getRMHAWebAddresses(conf);\n     for (String host : rmServers) {\n       try {\n         Client client \u003d Client.create();\n         client.setFollowRedirects(false);\n         StringBuilder sb \u003d new StringBuilder();\n         sb.append(scheme);\n         sb.append(host);\n         sb.append(path);\n         if (!useKerberos) {\n           try {\n             String username \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n             sb.append(\"?user.name\u003d\");\n             sb.append(username);\n           } catch (IOException e) {\n             LOG.debug(\"Fail to resolve username: {}\", e);\n           }\n         }\n         Builder builder \u003d client\n             .resource(sb.toString()).type(MediaType.APPLICATION_JSON);\n         if (useKerberos) {\n           String[] server \u003d host.split(\":\");\n-          String challenge \u003d generateToken(server[0]);\n+          String challenge \u003d YarnClientUtils.generateToken(server[0]);\n           builder.header(HttpHeaders.AUTHORIZATION, \"Negotiate \" +\n               challenge);\n           LOG.debug(\"Authorization: Negotiate {}\", challenge);\n         }\n         ClientResponse test \u003d builder.get(ClientResponse.class);\n         if (test.getStatus() \u003d\u003d 200) {\n           rmAddress \u003d host;\n           break;\n         }\n       } catch (Exception e) {\n         LOG.info(\"Fail to connect to: \"+host);\n         LOG.debug(\"Root cause: {}\", e);\n       }\n     }\n     return scheme+rmAddress;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  String getRMWebAddress() {\n    Configuration conf \u003d getConfig();\n    String scheme \u003d \"http://\";\n    String path \u003d \"/app/v1/services/version\";\n    String rmAddress \u003d conf\n        .get(\"yarn.resourcemanager.webapp.address\");\n    if (YarnConfiguration.useHttps(conf)) {\n      scheme \u003d \"https://\";\n      rmAddress \u003d conf\n          .get(\"yarn.resourcemanager.webapp.https.address\");\n    }\n    boolean useKerberos \u003d UserGroupInformation.isSecurityEnabled();\n    List\u003cString\u003e rmServers \u003d getRMHAWebAddresses(conf);\n    for (String host : rmServers) {\n      try {\n        Client client \u003d Client.create();\n        client.setFollowRedirects(false);\n        StringBuilder sb \u003d new StringBuilder();\n        sb.append(scheme);\n        sb.append(host);\n        sb.append(path);\n        if (!useKerberos) {\n          try {\n            String username \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n            sb.append(\"?user.name\u003d\");\n            sb.append(username);\n          } catch (IOException e) {\n            LOG.debug(\"Fail to resolve username: {}\", e);\n          }\n        }\n        Builder builder \u003d client\n            .resource(sb.toString()).type(MediaType.APPLICATION_JSON);\n        if (useKerberos) {\n          String[] server \u003d host.split(\":\");\n          String challenge \u003d YarnClientUtils.generateToken(server[0]);\n          builder.header(HttpHeaders.AUTHORIZATION, \"Negotiate \" +\n              challenge);\n          LOG.debug(\"Authorization: Negotiate {}\", challenge);\n        }\n        ClientResponse test \u003d builder.get(ClientResponse.class);\n        if (test.getStatus() \u003d\u003d 200) {\n          rmAddress \u003d host;\n          break;\n        }\n      } catch (Exception e) {\n        LOG.info(\"Fail to connect to: \"+host);\n        LOG.debug(\"Root cause: {}\", e);\n      }\n    }\n    return scheme+rmAddress;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/client/ApiServiceClient.java",
      "extendedDetails": {}
    },
    "fa94d370b6e3cba9c7560c09b517583e6652f103": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-8869. YARN Service Client might not work correctly with RM REST API for Kerberos authentication. Contributed by Eric Yang.\n",
      "commitDate": "15/10/18 8:51 AM",
      "commitName": "fa94d370b6e3cba9c7560c09b517583e6652f103",
      "commitAuthor": "Sunil G",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-8869. YARN Service Client might not work correctly with RM REST API for Kerberos authentication. Contributed by Eric Yang.\n",
          "commitDate": "15/10/18 8:51 AM",
          "commitName": "fa94d370b6e3cba9c7560c09b517583e6652f103",
          "commitAuthor": "Sunil G",
          "commitDateOld": "26/09/18 11:51 AM",
          "commitNameOld": "913f87dada27776c539dfb352400ecf8d40e7943",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 18.88,
          "commitsBetweenForRepo": 178,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,52 +1,51 @@\n-  private String getRMWebAddress() {\n+  String getRMWebAddress() {\n     Configuration conf \u003d getConfig();\n     String scheme \u003d \"http://\";\n     String path \u003d \"/app/v1/services/version\";\n     String rmAddress \u003d conf\n         .get(\"yarn.resourcemanager.webapp.address\");\n     if (YarnConfiguration.useHttps(conf)) {\n       scheme \u003d \"https://\";\n       rmAddress \u003d conf\n           .get(\"yarn.resourcemanager.webapp.https.address\");\n     }\n     boolean useKerberos \u003d UserGroupInformation.isSecurityEnabled();\n-    List\u003cString\u003e rmServers \u003d RMHAUtils\n-        .getRMHAWebappAddresses(new YarnConfiguration(conf));\n+    List\u003cString\u003e rmServers \u003d getRMHAWebAddresses(conf);\n     for (String host : rmServers) {\n       try {\n         Client client \u003d Client.create();\n         client.setFollowRedirects(false);\n         StringBuilder sb \u003d new StringBuilder();\n         sb.append(scheme);\n         sb.append(host);\n         sb.append(path);\n         if (!useKerberos) {\n           try {\n             String username \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n             sb.append(\"?user.name\u003d\");\n             sb.append(username);\n           } catch (IOException e) {\n             LOG.debug(\"Fail to resolve username: {}\", e);\n           }\n         }\n-        WebResource webResource \u003d client\n-            .resource(sb.toString());\n+        Builder builder \u003d client\n+            .resource(sb.toString()).type(MediaType.APPLICATION_JSON);\n         if (useKerberos) {\n           String[] server \u003d host.split(\":\");\n           String challenge \u003d generateToken(server[0]);\n-          webResource.header(HttpHeaders.AUTHORIZATION, \"Negotiate \" +\n+          builder.header(HttpHeaders.AUTHORIZATION, \"Negotiate \" +\n               challenge);\n           LOG.debug(\"Authorization: Negotiate {}\", challenge);\n         }\n-        ClientResponse test \u003d webResource.get(ClientResponse.class);\n+        ClientResponse test \u003d builder.get(ClientResponse.class);\n         if (test.getStatus() \u003d\u003d 200) {\n           rmAddress \u003d host;\n           break;\n         }\n       } catch (Exception e) {\n         LOG.info(\"Fail to connect to: \"+host);\n         LOG.debug(\"Root cause: {}\", e);\n       }\n     }\n     return scheme+rmAddress;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  String getRMWebAddress() {\n    Configuration conf \u003d getConfig();\n    String scheme \u003d \"http://\";\n    String path \u003d \"/app/v1/services/version\";\n    String rmAddress \u003d conf\n        .get(\"yarn.resourcemanager.webapp.address\");\n    if (YarnConfiguration.useHttps(conf)) {\n      scheme \u003d \"https://\";\n      rmAddress \u003d conf\n          .get(\"yarn.resourcemanager.webapp.https.address\");\n    }\n    boolean useKerberos \u003d UserGroupInformation.isSecurityEnabled();\n    List\u003cString\u003e rmServers \u003d getRMHAWebAddresses(conf);\n    for (String host : rmServers) {\n      try {\n        Client client \u003d Client.create();\n        client.setFollowRedirects(false);\n        StringBuilder sb \u003d new StringBuilder();\n        sb.append(scheme);\n        sb.append(host);\n        sb.append(path);\n        if (!useKerberos) {\n          try {\n            String username \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n            sb.append(\"?user.name\u003d\");\n            sb.append(username);\n          } catch (IOException e) {\n            LOG.debug(\"Fail to resolve username: {}\", e);\n          }\n        }\n        Builder builder \u003d client\n            .resource(sb.toString()).type(MediaType.APPLICATION_JSON);\n        if (useKerberos) {\n          String[] server \u003d host.split(\":\");\n          String challenge \u003d generateToken(server[0]);\n          builder.header(HttpHeaders.AUTHORIZATION, \"Negotiate \" +\n              challenge);\n          LOG.debug(\"Authorization: Negotiate {}\", challenge);\n        }\n        ClientResponse test \u003d builder.get(ClientResponse.class);\n        if (test.getStatus() \u003d\u003d 200) {\n          rmAddress \u003d host;\n          break;\n        }\n      } catch (Exception e) {\n        LOG.info(\"Fail to connect to: \"+host);\n        LOG.debug(\"Root cause: {}\", e);\n      }\n    }\n    return scheme+rmAddress;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/client/ApiServiceClient.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8869. YARN Service Client might not work correctly with RM REST API for Kerberos authentication. Contributed by Eric Yang.\n",
          "commitDate": "15/10/18 8:51 AM",
          "commitName": "fa94d370b6e3cba9c7560c09b517583e6652f103",
          "commitAuthor": "Sunil G",
          "commitDateOld": "26/09/18 11:51 AM",
          "commitNameOld": "913f87dada27776c539dfb352400ecf8d40e7943",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 18.88,
          "commitsBetweenForRepo": 178,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,52 +1,51 @@\n-  private String getRMWebAddress() {\n+  String getRMWebAddress() {\n     Configuration conf \u003d getConfig();\n     String scheme \u003d \"http://\";\n     String path \u003d \"/app/v1/services/version\";\n     String rmAddress \u003d conf\n         .get(\"yarn.resourcemanager.webapp.address\");\n     if (YarnConfiguration.useHttps(conf)) {\n       scheme \u003d \"https://\";\n       rmAddress \u003d conf\n           .get(\"yarn.resourcemanager.webapp.https.address\");\n     }\n     boolean useKerberos \u003d UserGroupInformation.isSecurityEnabled();\n-    List\u003cString\u003e rmServers \u003d RMHAUtils\n-        .getRMHAWebappAddresses(new YarnConfiguration(conf));\n+    List\u003cString\u003e rmServers \u003d getRMHAWebAddresses(conf);\n     for (String host : rmServers) {\n       try {\n         Client client \u003d Client.create();\n         client.setFollowRedirects(false);\n         StringBuilder sb \u003d new StringBuilder();\n         sb.append(scheme);\n         sb.append(host);\n         sb.append(path);\n         if (!useKerberos) {\n           try {\n             String username \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n             sb.append(\"?user.name\u003d\");\n             sb.append(username);\n           } catch (IOException e) {\n             LOG.debug(\"Fail to resolve username: {}\", e);\n           }\n         }\n-        WebResource webResource \u003d client\n-            .resource(sb.toString());\n+        Builder builder \u003d client\n+            .resource(sb.toString()).type(MediaType.APPLICATION_JSON);\n         if (useKerberos) {\n           String[] server \u003d host.split(\":\");\n           String challenge \u003d generateToken(server[0]);\n-          webResource.header(HttpHeaders.AUTHORIZATION, \"Negotiate \" +\n+          builder.header(HttpHeaders.AUTHORIZATION, \"Negotiate \" +\n               challenge);\n           LOG.debug(\"Authorization: Negotiate {}\", challenge);\n         }\n-        ClientResponse test \u003d webResource.get(ClientResponse.class);\n+        ClientResponse test \u003d builder.get(ClientResponse.class);\n         if (test.getStatus() \u003d\u003d 200) {\n           rmAddress \u003d host;\n           break;\n         }\n       } catch (Exception e) {\n         LOG.info(\"Fail to connect to: \"+host);\n         LOG.debug(\"Root cause: {}\", e);\n       }\n     }\n     return scheme+rmAddress;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  String getRMWebAddress() {\n    Configuration conf \u003d getConfig();\n    String scheme \u003d \"http://\";\n    String path \u003d \"/app/v1/services/version\";\n    String rmAddress \u003d conf\n        .get(\"yarn.resourcemanager.webapp.address\");\n    if (YarnConfiguration.useHttps(conf)) {\n      scheme \u003d \"https://\";\n      rmAddress \u003d conf\n          .get(\"yarn.resourcemanager.webapp.https.address\");\n    }\n    boolean useKerberos \u003d UserGroupInformation.isSecurityEnabled();\n    List\u003cString\u003e rmServers \u003d getRMHAWebAddresses(conf);\n    for (String host : rmServers) {\n      try {\n        Client client \u003d Client.create();\n        client.setFollowRedirects(false);\n        StringBuilder sb \u003d new StringBuilder();\n        sb.append(scheme);\n        sb.append(host);\n        sb.append(path);\n        if (!useKerberos) {\n          try {\n            String username \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n            sb.append(\"?user.name\u003d\");\n            sb.append(username);\n          } catch (IOException e) {\n            LOG.debug(\"Fail to resolve username: {}\", e);\n          }\n        }\n        Builder builder \u003d client\n            .resource(sb.toString()).type(MediaType.APPLICATION_JSON);\n        if (useKerberos) {\n          String[] server \u003d host.split(\":\");\n          String challenge \u003d generateToken(server[0]);\n          builder.header(HttpHeaders.AUTHORIZATION, \"Negotiate \" +\n              challenge);\n          LOG.debug(\"Authorization: Negotiate {}\", challenge);\n        }\n        ClientResponse test \u003d builder.get(ClientResponse.class);\n        if (test.getStatus() \u003d\u003d 200) {\n          rmAddress \u003d host;\n          break;\n        }\n      } catch (Exception e) {\n        LOG.info(\"Fail to connect to: \"+host);\n        LOG.debug(\"Root cause: {}\", e);\n      }\n    }\n    return scheme+rmAddress;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/client/ApiServiceClient.java",
          "extendedDetails": {}
        }
      ]
    },
    "8990eaf5925afa533fbd9c3641859a146dc5a22c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8474. Fixed ApiServiceClient kerberos negotiation.\n           Contributed by Billie Rinaldi\n",
      "commitDate": "16/08/18 9:46 AM",
      "commitName": "8990eaf5925afa533fbd9c3641859a146dc5a22c",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "16/07/18 2:41 PM",
      "commitNameOld": "121865c3f96166e2190ed54b433ebcf8d053b91c",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 30.8,
      "commitsBetweenForRepo": 264,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,52 @@\n   private String getRMWebAddress() {\n     Configuration conf \u003d getConfig();\n     String scheme \u003d \"http://\";\n     String path \u003d \"/app/v1/services/version\";\n     String rmAddress \u003d conf\n         .get(\"yarn.resourcemanager.webapp.address\");\n     if (YarnConfiguration.useHttps(conf)) {\n       scheme \u003d \"https://\";\n       rmAddress \u003d conf\n           .get(\"yarn.resourcemanager.webapp.https.address\");\n     }\n     boolean useKerberos \u003d UserGroupInformation.isSecurityEnabled();\n     List\u003cString\u003e rmServers \u003d RMHAUtils\n         .getRMHAWebappAddresses(new YarnConfiguration(conf));\n     for (String host : rmServers) {\n       try {\n         Client client \u003d Client.create();\n+        client.setFollowRedirects(false);\n         StringBuilder sb \u003d new StringBuilder();\n         sb.append(scheme);\n         sb.append(host);\n         sb.append(path);\n         if (!useKerberos) {\n           try {\n             String username \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n             sb.append(\"?user.name\u003d\");\n             sb.append(username);\n           } catch (IOException e) {\n             LOG.debug(\"Fail to resolve username: {}\", e);\n           }\n         }\n         WebResource webResource \u003d client\n             .resource(sb.toString());\n         if (useKerberos) {\n-          AuthenticatedURL.Token token \u003d new AuthenticatedURL.Token();\n-          webResource.header(\"WWW-Authenticate\", token);\n+          String[] server \u003d host.split(\":\");\n+          String challenge \u003d generateToken(server[0]);\n+          webResource.header(HttpHeaders.AUTHORIZATION, \"Negotiate \" +\n+              challenge);\n+          LOG.debug(\"Authorization: Negotiate {}\", challenge);\n         }\n         ClientResponse test \u003d webResource.get(ClientResponse.class);\n         if (test.getStatus() \u003d\u003d 200) {\n           rmAddress \u003d host;\n           break;\n         }\n       } catch (Exception e) {\n-        LOG.debug(\"Fail to connect to: \"+host, e);\n+        LOG.info(\"Fail to connect to: \"+host);\n+        LOG.debug(\"Root cause: {}\", e);\n       }\n     }\n     return scheme+rmAddress;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private String getRMWebAddress() {\n    Configuration conf \u003d getConfig();\n    String scheme \u003d \"http://\";\n    String path \u003d \"/app/v1/services/version\";\n    String rmAddress \u003d conf\n        .get(\"yarn.resourcemanager.webapp.address\");\n    if (YarnConfiguration.useHttps(conf)) {\n      scheme \u003d \"https://\";\n      rmAddress \u003d conf\n          .get(\"yarn.resourcemanager.webapp.https.address\");\n    }\n    boolean useKerberos \u003d UserGroupInformation.isSecurityEnabled();\n    List\u003cString\u003e rmServers \u003d RMHAUtils\n        .getRMHAWebappAddresses(new YarnConfiguration(conf));\n    for (String host : rmServers) {\n      try {\n        Client client \u003d Client.create();\n        client.setFollowRedirects(false);\n        StringBuilder sb \u003d new StringBuilder();\n        sb.append(scheme);\n        sb.append(host);\n        sb.append(path);\n        if (!useKerberos) {\n          try {\n            String username \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n            sb.append(\"?user.name\u003d\");\n            sb.append(username);\n          } catch (IOException e) {\n            LOG.debug(\"Fail to resolve username: {}\", e);\n          }\n        }\n        WebResource webResource \u003d client\n            .resource(sb.toString());\n        if (useKerberos) {\n          String[] server \u003d host.split(\":\");\n          String challenge \u003d generateToken(server[0]);\n          webResource.header(HttpHeaders.AUTHORIZATION, \"Negotiate \" +\n              challenge);\n          LOG.debug(\"Authorization: Negotiate {}\", challenge);\n        }\n        ClientResponse test \u003d webResource.get(ClientResponse.class);\n        if (test.getStatus() \u003d\u003d 200) {\n          rmAddress \u003d host;\n          break;\n        }\n      } catch (Exception e) {\n        LOG.info(\"Fail to connect to: \"+host);\n        LOG.debug(\"Root cause: {}\", e);\n      }\n    }\n    return scheme+rmAddress;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/client/ApiServiceClient.java",
      "extendedDetails": {}
    },
    "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0": {
      "type": "Yfilerename",
      "commitMessage": "YARN-7530.  Refactored YARN service API project location.\n            Contributed by Chandni Singh\n",
      "commitDate": "18/05/18 2:29 PM",
      "commitName": "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "18/05/18 11:29 AM",
      "commitNameOld": "89f59113927dd886f09d8fe2c05ff2cd5d1390c1",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 0.12,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private String getRMWebAddress() {\n    Configuration conf \u003d getConfig();\n    String scheme \u003d \"http://\";\n    String path \u003d \"/app/v1/services/version\";\n    String rmAddress \u003d conf\n        .get(\"yarn.resourcemanager.webapp.address\");\n    if (YarnConfiguration.useHttps(conf)) {\n      scheme \u003d \"https://\";\n      rmAddress \u003d conf\n          .get(\"yarn.resourcemanager.webapp.https.address\");\n    }\n    boolean useKerberos \u003d UserGroupInformation.isSecurityEnabled();\n    List\u003cString\u003e rmServers \u003d RMHAUtils\n        .getRMHAWebappAddresses(new YarnConfiguration(conf));\n    for (String host : rmServers) {\n      try {\n        Client client \u003d Client.create();\n        StringBuilder sb \u003d new StringBuilder();\n        sb.append(scheme);\n        sb.append(host);\n        sb.append(path);\n        if (!useKerberos) {\n          try {\n            String username \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n            sb.append(\"?user.name\u003d\");\n            sb.append(username);\n          } catch (IOException e) {\n            LOG.debug(\"Fail to resolve username: {}\", e);\n          }\n        }\n        WebResource webResource \u003d client\n            .resource(sb.toString());\n        if (useKerberos) {\n          AuthenticatedURL.Token token \u003d new AuthenticatedURL.Token();\n          webResource.header(\"WWW-Authenticate\", token);\n        }\n        ClientResponse test \u003d webResource.get(ClientResponse.class);\n        if (test.getStatus() \u003d\u003d 200) {\n          rmAddress \u003d host;\n          break;\n        }\n      } catch (Exception e) {\n        LOG.debug(\"Fail to connect to: \"+host, e);\n      }\n    }\n    return scheme+rmAddress;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/client/ApiServiceClient.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/client/ApiServiceClient.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/client/ApiServiceClient.java"
      }
    },
    "87429affcea2de61791c1b048b6db8c8275de051": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7889. Missing kerberos token when check for RM REST API availability. Contributed by Eric Yang\n",
      "commitDate": "05/02/18 10:56 PM",
      "commitName": "87429affcea2de61791c1b048b6db8c8275de051",
      "commitAuthor": "Jian He",
      "commitDateOld": "02/02/18 2:38 PM",
      "commitNameOld": "b6e50fad53f26e2b718a85ec0678e3161decc691",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 3.35,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,47 @@\n   private String getRMWebAddress() {\n     Configuration conf \u003d getConfig();\n     String scheme \u003d \"http://\";\n     String path \u003d \"/app/v1/services/version\";\n     String rmAddress \u003d conf\n         .get(\"yarn.resourcemanager.webapp.address\");\n     if (YarnConfiguration.useHttps(conf)) {\n       scheme \u003d \"https://\";\n       rmAddress \u003d conf\n           .get(\"yarn.resourcemanager.webapp.https.address\");\n     }\n-\n+    boolean useKerberos \u003d UserGroupInformation.isSecurityEnabled();\n     List\u003cString\u003e rmServers \u003d RMHAUtils\n         .getRMHAWebappAddresses(new YarnConfiguration(conf));\n     for (String host : rmServers) {\n-      StringBuilder sb \u003d new StringBuilder();\n-      sb.append(scheme);\n-      sb.append(host);\n-      sb.append(path);\n-      Client client \u003d Client.create();\n-      WebResource webResource \u003d client\n-          .resource(sb.toString());\n-      String test \u003d webResource.get(String.class);\n-      if (test.contains(\"hadoop_version\")) {\n-        rmAddress \u003d host;\n-        break;\n+      try {\n+        Client client \u003d Client.create();\n+        StringBuilder sb \u003d new StringBuilder();\n+        sb.append(scheme);\n+        sb.append(host);\n+        sb.append(path);\n+        if (!useKerberos) {\n+          try {\n+            String username \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n+            sb.append(\"?user.name\u003d\");\n+            sb.append(username);\n+          } catch (IOException e) {\n+            LOG.debug(\"Fail to resolve username: {}\", e);\n+          }\n+        }\n+        WebResource webResource \u003d client\n+            .resource(sb.toString());\n+        if (useKerberos) {\n+          AuthenticatedURL.Token token \u003d new AuthenticatedURL.Token();\n+          webResource.header(\"WWW-Authenticate\", token);\n+        }\n+        ClientResponse test \u003d webResource.get(ClientResponse.class);\n+        if (test.getStatus() \u003d\u003d 200) {\n+          rmAddress \u003d host;\n+          break;\n+        }\n+      } catch (Exception e) {\n+        LOG.debug(\"Fail to connect to: \"+host, e);\n       }\n     }\n     return scheme+rmAddress;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private String getRMWebAddress() {\n    Configuration conf \u003d getConfig();\n    String scheme \u003d \"http://\";\n    String path \u003d \"/app/v1/services/version\";\n    String rmAddress \u003d conf\n        .get(\"yarn.resourcemanager.webapp.address\");\n    if (YarnConfiguration.useHttps(conf)) {\n      scheme \u003d \"https://\";\n      rmAddress \u003d conf\n          .get(\"yarn.resourcemanager.webapp.https.address\");\n    }\n    boolean useKerberos \u003d UserGroupInformation.isSecurityEnabled();\n    List\u003cString\u003e rmServers \u003d RMHAUtils\n        .getRMHAWebappAddresses(new YarnConfiguration(conf));\n    for (String host : rmServers) {\n      try {\n        Client client \u003d Client.create();\n        StringBuilder sb \u003d new StringBuilder();\n        sb.append(scheme);\n        sb.append(host);\n        sb.append(path);\n        if (!useKerberos) {\n          try {\n            String username \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n            sb.append(\"?user.name\u003d\");\n            sb.append(username);\n          } catch (IOException e) {\n            LOG.debug(\"Fail to resolve username: {}\", e);\n          }\n        }\n        WebResource webResource \u003d client\n            .resource(sb.toString());\n        if (useKerberos) {\n          AuthenticatedURL.Token token \u003d new AuthenticatedURL.Token();\n          webResource.header(\"WWW-Authenticate\", token);\n        }\n        ClientResponse test \u003d webResource.get(ClientResponse.class);\n        if (test.getStatus() \u003d\u003d 200) {\n          rmAddress \u003d host;\n          break;\n        }\n      } catch (Exception e) {\n        LOG.debug(\"Fail to connect to: \"+host, e);\n      }\n    }\n    return scheme+rmAddress;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/client/ApiServiceClient.java",
      "extendedDetails": {}
    },
    "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7540 and YARN-7605. Convert yarn app cli to call yarn api services and implement doAs for Api Service REST API. Contributed by Eric Yang and Jian He\n",
      "commitDate": "23/01/18 5:54 PM",
      "commitName": "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d",
      "commitAuthor": "Billie Rinaldi",
      "diff": "@@ -0,0 +1,30 @@\n+  private String getRMWebAddress() {\n+    Configuration conf \u003d getConfig();\n+    String scheme \u003d \"http://\";\n+    String path \u003d \"/app/v1/services/version\";\n+    String rmAddress \u003d conf\n+        .get(\"yarn.resourcemanager.webapp.address\");\n+    if (YarnConfiguration.useHttps(conf)) {\n+      scheme \u003d \"https://\";\n+      rmAddress \u003d conf\n+          .get(\"yarn.resourcemanager.webapp.https.address\");\n+    }\n+\n+    List\u003cString\u003e rmServers \u003d RMHAUtils\n+        .getRMHAWebappAddresses(new YarnConfiguration(conf));\n+    for (String host : rmServers) {\n+      StringBuilder sb \u003d new StringBuilder();\n+      sb.append(scheme);\n+      sb.append(host);\n+      sb.append(path);\n+      Client client \u003d Client.create();\n+      WebResource webResource \u003d client\n+          .resource(sb.toString());\n+      String test \u003d webResource.get(String.class);\n+      if (test.contains(\"hadoop_version\")) {\n+        rmAddress \u003d host;\n+        break;\n+      }\n+    }\n+    return scheme+rmAddress;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private String getRMWebAddress() {\n    Configuration conf \u003d getConfig();\n    String scheme \u003d \"http://\";\n    String path \u003d \"/app/v1/services/version\";\n    String rmAddress \u003d conf\n        .get(\"yarn.resourcemanager.webapp.address\");\n    if (YarnConfiguration.useHttps(conf)) {\n      scheme \u003d \"https://\";\n      rmAddress \u003d conf\n          .get(\"yarn.resourcemanager.webapp.https.address\");\n    }\n\n    List\u003cString\u003e rmServers \u003d RMHAUtils\n        .getRMHAWebappAddresses(new YarnConfiguration(conf));\n    for (String host : rmServers) {\n      StringBuilder sb \u003d new StringBuilder();\n      sb.append(scheme);\n      sb.append(host);\n      sb.append(path);\n      Client client \u003d Client.create();\n      WebResource webResource \u003d client\n          .resource(sb.toString());\n      String test \u003d webResource.get(String.class);\n      if (test.contains(\"hadoop_version\")) {\n        rmAddress \u003d host;\n        break;\n      }\n    }\n    return scheme+rmAddress;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/client/ApiServiceClient.java"
    }
  }
}