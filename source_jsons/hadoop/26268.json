{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SimpleExponentialTaskRuntimeEstimator.java",
  "functionName": "runtimeEstimateVariance",
  "functionId": "runtimeEstimateVariance___id-TaskAttemptId(modifiers-final)",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/speculate/SimpleExponentialTaskRuntimeEstimator.java",
  "functionStartLine": 168,
  "functionEndLine": 179,
  "numCommitsSeen": 3,
  "timeTaken": 1950,
  "changeHistory": [
    "cdd6efd3ab6917e30b4c5c7b261f61838901bb37",
    "ed302f1fed6d124d682486d24dae958946dba9be"
  ],
  "changeHistoryShort": {
    "cdd6efd3ab6917e30b4c5c7b261f61838901bb37": "Ymultichange(Ybodychange,Yparametermetachange)",
    "ed302f1fed6d124d682486d24dae958946dba9be": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cdd6efd3ab6917e30b4c5c7b261f61838901bb37": {
      "type": "Ymultichange(Ybodychange,Yparametermetachange)",
      "commitMessage": "MAPREDUCE-7252. Handling 0 progress in SimpleExponential task runtime estimator\n\nSigned-off-by: Jonathan Eagles \u003cjeagles@gmail.com\u003e\n",
      "commitDate": "08/01/20 9:08 AM",
      "commitName": "cdd6efd3ab6917e30b4c5c7b261f61838901bb37",
      "commitAuthor": "Ahmed Hussein",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-7252. Handling 0 progress in SimpleExponential task runtime estimator\n\nSigned-off-by: Jonathan Eagles \u003cjeagles@gmail.com\u003e\n",
          "commitDate": "08/01/20 9:08 AM",
          "commitName": "cdd6efd3ab6917e30b4c5c7b261f61838901bb37",
          "commitAuthor": "Ahmed Hussein",
          "commitDateOld": "05/11/19 12:55 PM",
          "commitNameOld": "ed302f1fed6d124d682486d24dae958946dba9be",
          "commitAuthorOld": "Ahmed Hussein",
          "daysBetweenCommits": 63.84,
          "commitsBetweenForRepo": 225,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,12 @@\n-  public long runtimeEstimateVariance(TaskAttemptId id) {\n+  public long runtimeEstimateVariance(final TaskAttemptId id) {\n     SimpleExponentialSmoothing forecastEntry \u003d getForecastEntry(id);\n     if (forecastEntry \u003d\u003d null) {\n       return DEFAULT_ESTIMATE_RUNTIME;\n     }\n     double forecast \u003d forecastEntry.getForecast();\n     if (forecastEntry.isDefaultForecast(forecast)) {\n       return DEFAULT_ESTIMATE_RUNTIME;\n     }\n-    //TODO: What is the best way to measure variance in runtime\n+    //TODO What is the best way to measure variance in runtime\n     return 0L;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public long runtimeEstimateVariance(final TaskAttemptId id) {\n    SimpleExponentialSmoothing forecastEntry \u003d getForecastEntry(id);\n    if (forecastEntry \u003d\u003d null) {\n      return DEFAULT_ESTIMATE_RUNTIME;\n    }\n    double forecast \u003d forecastEntry.getForecast();\n    if (forecastEntry.isDefaultForecast(forecast)) {\n      return DEFAULT_ESTIMATE_RUNTIME;\n    }\n    //TODO What is the best way to measure variance in runtime\n    return 0L;\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/speculate/SimpleExponentialTaskRuntimeEstimator.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "MAPREDUCE-7252. Handling 0 progress in SimpleExponential task runtime estimator\n\nSigned-off-by: Jonathan Eagles \u003cjeagles@gmail.com\u003e\n",
          "commitDate": "08/01/20 9:08 AM",
          "commitName": "cdd6efd3ab6917e30b4c5c7b261f61838901bb37",
          "commitAuthor": "Ahmed Hussein",
          "commitDateOld": "05/11/19 12:55 PM",
          "commitNameOld": "ed302f1fed6d124d682486d24dae958946dba9be",
          "commitAuthorOld": "Ahmed Hussein",
          "daysBetweenCommits": 63.84,
          "commitsBetweenForRepo": 225,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,12 @@\n-  public long runtimeEstimateVariance(TaskAttemptId id) {\n+  public long runtimeEstimateVariance(final TaskAttemptId id) {\n     SimpleExponentialSmoothing forecastEntry \u003d getForecastEntry(id);\n     if (forecastEntry \u003d\u003d null) {\n       return DEFAULT_ESTIMATE_RUNTIME;\n     }\n     double forecast \u003d forecastEntry.getForecast();\n     if (forecastEntry.isDefaultForecast(forecast)) {\n       return DEFAULT_ESTIMATE_RUNTIME;\n     }\n-    //TODO: What is the best way to measure variance in runtime\n+    //TODO What is the best way to measure variance in runtime\n     return 0L;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public long runtimeEstimateVariance(final TaskAttemptId id) {\n    SimpleExponentialSmoothing forecastEntry \u003d getForecastEntry(id);\n    if (forecastEntry \u003d\u003d null) {\n      return DEFAULT_ESTIMATE_RUNTIME;\n    }\n    double forecast \u003d forecastEntry.getForecast();\n    if (forecastEntry.isDefaultForecast(forecast)) {\n      return DEFAULT_ESTIMATE_RUNTIME;\n    }\n    //TODO What is the best way to measure variance in runtime\n    return 0L;\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/speculate/SimpleExponentialTaskRuntimeEstimator.java",
          "extendedDetails": {
            "oldValue": "[id-TaskAttemptId]",
            "newValue": "[id-TaskAttemptId(modifiers-final)]"
          }
        }
      ]
    },
    "ed302f1fed6d124d682486d24dae958946dba9be": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-7208. Tuning TaskRuntimeEstimator. (Ahmed Hussein via jeagles)\n\nSigned-off-by: Jonathan Eagles \u003cjeagles@gmail.com\u003e\n",
      "commitDate": "05/11/19 12:55 PM",
      "commitName": "ed302f1fed6d124d682486d24dae958946dba9be",
      "commitAuthor": "Ahmed Hussein",
      "diff": "@@ -0,0 +1,12 @@\n+  public long runtimeEstimateVariance(TaskAttemptId id) {\n+    SimpleExponentialSmoothing forecastEntry \u003d getForecastEntry(id);\n+    if (forecastEntry \u003d\u003d null) {\n+      return DEFAULT_ESTIMATE_RUNTIME;\n+    }\n+    double forecast \u003d forecastEntry.getForecast();\n+    if (forecastEntry.isDefaultForecast(forecast)) {\n+      return DEFAULT_ESTIMATE_RUNTIME;\n+    }\n+    //TODO: What is the best way to measure variance in runtime\n+    return 0L;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public long runtimeEstimateVariance(TaskAttemptId id) {\n    SimpleExponentialSmoothing forecastEntry \u003d getForecastEntry(id);\n    if (forecastEntry \u003d\u003d null) {\n      return DEFAULT_ESTIMATE_RUNTIME;\n    }\n    double forecast \u003d forecastEntry.getForecast();\n    if (forecastEntry.isDefaultForecast(forecast)) {\n      return DEFAULT_ESTIMATE_RUNTIME;\n    }\n    //TODO: What is the best way to measure variance in runtime\n    return 0L;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/speculate/SimpleExponentialTaskRuntimeEstimator.java"
    }
  }
}