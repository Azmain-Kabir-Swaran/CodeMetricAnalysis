{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SchedulerMetrics.java",
  "functionName": "registerSchedulerMetrics",
  "functionId": "registerSchedulerMetrics",
  "sourceFilePath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/SchedulerMetrics.java",
  "functionStartLine": 388,
  "functionEndLine": 464,
  "numCommitsSeen": 40,
  "timeTaken": 2348,
  "changeHistory": [
    "ba2db39c655600d00d2d3d3951e0c780f4d6f622",
    "6a5516c2381f107d96b8326939514de3c6e53d3d",
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b"
  ],
  "changeHistoryShort": {
    "ba2db39c655600d00d2d3d3951e0c780f4d6f622": "Ybodychange",
    "6a5516c2381f107d96b8326939514de3c6e53d3d": "Ymultichange(Ymovefromfile,Ybodychange)",
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ba2db39c655600d00d2d3d3951e0c780f4d6f622": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8152. Add chart in SLS to illustrate the throughput of the scheduler. Contributed by Tao Yang.\n",
      "commitDate": "27/04/18 12:36 AM",
      "commitName": "ba2db39c655600d00d2d3d3951e0c780f4d6f622",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "17/10/17 4:04 PM",
      "commitNameOld": "46eb1033a86ca53e7b94202567aef8af2417bdf8",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 191.36,
      "commitsBetweenForRepo": 1906,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,77 @@\n   private void registerSchedulerMetrics() {\n     samplerLock.lock();\n     try {\n       // counters for scheduler operations\n       schedulerAllocateCounter \u003d metrics.counter(\n           \"counter.scheduler.operation.allocate\");\n+      schedulerCommitSuccessCounter \u003d metrics.counter(\n+          \"counter.scheduler.operation.commit.success\");\n+      schedulerCommitFailureCounter \u003d metrics.counter(\n+          \"counter.scheduler.operation.commit.failure\");\n       schedulerHandleCounter \u003d metrics.counter(\n           \"counter.scheduler.operation.handle\");\n       schedulerHandleCounterMap \u003d new HashMap\u003c\u003e();\n       for (SchedulerEventType e : SchedulerEventType.values()) {\n         Counter counter \u003d metrics.counter(\n             \"counter.scheduler.operation.handle.\" + e);\n         schedulerHandleCounterMap.put(e, counter);\n       }\n       // timers for scheduler operations\n       int timeWindowSize \u003d conf.getInt(\n           SLSConfiguration.METRICS_TIMER_WINDOW_SIZE,\n           SLSConfiguration.METRICS_TIMER_WINDOW_SIZE_DEFAULT);\n       schedulerAllocateTimer \u003d new Timer(\n           new SlidingWindowReservoir(timeWindowSize));\n+      schedulerCommitSuccessTimer \u003d new Timer(\n+          new SlidingWindowReservoir(timeWindowSize));\n+      schedulerCommitFailureTimer \u003d new Timer(\n+          new SlidingWindowReservoir(timeWindowSize));\n       schedulerHandleTimer \u003d new Timer(\n           new SlidingWindowReservoir(timeWindowSize));\n       schedulerHandleTimerMap \u003d new HashMap\u003c\u003e();\n       for (SchedulerEventType e : SchedulerEventType.values()) {\n         Timer timer \u003d new Timer(new SlidingWindowReservoir(timeWindowSize));\n         schedulerHandleTimerMap.put(e, timer);\n       }\n       // histogram for scheduler operations (Samplers)\n       schedulerHistogramList \u003d new ArrayList\u003c\u003e();\n       histogramTimerMap \u003d new HashMap\u003c\u003e();\n       Histogram schedulerAllocateHistogram \u003d new Histogram(\n           new SlidingWindowReservoir(SAMPLING_SIZE));\n       metrics.register(\"sampler.scheduler.operation.allocate.timecost\",\n           schedulerAllocateHistogram);\n       schedulerHistogramList.add(schedulerAllocateHistogram);\n       histogramTimerMap.put(schedulerAllocateHistogram, schedulerAllocateTimer);\n+      Histogram schedulerCommitHistogram \u003d new Histogram(\n+          new SlidingWindowReservoir(SAMPLING_SIZE));\n+      metrics.register(\"sampler.scheduler.operation.commit.success.timecost\",\n+          schedulerCommitHistogram);\n+      schedulerHistogramList.add(schedulerCommitHistogram);\n+      histogramTimerMap\n+          .put(schedulerCommitHistogram, schedulerCommitSuccessTimer);\n+      Histogram schedulerCommitFailureHistogram \u003d\n+          new Histogram(new SlidingWindowReservoir(SAMPLING_SIZE));\n+      metrics.register(\"sampler.scheduler.operation.commit.failure.timecost\",\n+          schedulerCommitFailureHistogram);\n+      schedulerHistogramList.add(schedulerCommitFailureHistogram);\n+      histogramTimerMap\n+          .put(schedulerCommitFailureHistogram, schedulerCommitFailureTimer);\n       Histogram schedulerHandleHistogram \u003d new Histogram(\n           new SlidingWindowReservoir(SAMPLING_SIZE));\n       metrics.register(\"sampler.scheduler.operation.handle.timecost\",\n           schedulerHandleHistogram);\n       schedulerHistogramList.add(schedulerHandleHistogram);\n       histogramTimerMap.put(schedulerHandleHistogram, schedulerHandleTimer);\n       for (SchedulerEventType e : SchedulerEventType.values()) {\n         Histogram histogram \u003d new Histogram(\n             new SlidingWindowReservoir(SAMPLING_SIZE));\n         metrics.register(\n             \"sampler.scheduler.operation.handle.\" + e + \".timecost\",\n             histogram);\n         schedulerHistogramList.add(histogram);\n         histogramTimerMap.put(histogram, schedulerHandleTimerMap.get(e));\n       }\n     } finally {\n       samplerLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void registerSchedulerMetrics() {\n    samplerLock.lock();\n    try {\n      // counters for scheduler operations\n      schedulerAllocateCounter \u003d metrics.counter(\n          \"counter.scheduler.operation.allocate\");\n      schedulerCommitSuccessCounter \u003d metrics.counter(\n          \"counter.scheduler.operation.commit.success\");\n      schedulerCommitFailureCounter \u003d metrics.counter(\n          \"counter.scheduler.operation.commit.failure\");\n      schedulerHandleCounter \u003d metrics.counter(\n          \"counter.scheduler.operation.handle\");\n      schedulerHandleCounterMap \u003d new HashMap\u003c\u003e();\n      for (SchedulerEventType e : SchedulerEventType.values()) {\n        Counter counter \u003d metrics.counter(\n            \"counter.scheduler.operation.handle.\" + e);\n        schedulerHandleCounterMap.put(e, counter);\n      }\n      // timers for scheduler operations\n      int timeWindowSize \u003d conf.getInt(\n          SLSConfiguration.METRICS_TIMER_WINDOW_SIZE,\n          SLSConfiguration.METRICS_TIMER_WINDOW_SIZE_DEFAULT);\n      schedulerAllocateTimer \u003d new Timer(\n          new SlidingWindowReservoir(timeWindowSize));\n      schedulerCommitSuccessTimer \u003d new Timer(\n          new SlidingWindowReservoir(timeWindowSize));\n      schedulerCommitFailureTimer \u003d new Timer(\n          new SlidingWindowReservoir(timeWindowSize));\n      schedulerHandleTimer \u003d new Timer(\n          new SlidingWindowReservoir(timeWindowSize));\n      schedulerHandleTimerMap \u003d new HashMap\u003c\u003e();\n      for (SchedulerEventType e : SchedulerEventType.values()) {\n        Timer timer \u003d new Timer(new SlidingWindowReservoir(timeWindowSize));\n        schedulerHandleTimerMap.put(e, timer);\n      }\n      // histogram for scheduler operations (Samplers)\n      schedulerHistogramList \u003d new ArrayList\u003c\u003e();\n      histogramTimerMap \u003d new HashMap\u003c\u003e();\n      Histogram schedulerAllocateHistogram \u003d new Histogram(\n          new SlidingWindowReservoir(SAMPLING_SIZE));\n      metrics.register(\"sampler.scheduler.operation.allocate.timecost\",\n          schedulerAllocateHistogram);\n      schedulerHistogramList.add(schedulerAllocateHistogram);\n      histogramTimerMap.put(schedulerAllocateHistogram, schedulerAllocateTimer);\n      Histogram schedulerCommitHistogram \u003d new Histogram(\n          new SlidingWindowReservoir(SAMPLING_SIZE));\n      metrics.register(\"sampler.scheduler.operation.commit.success.timecost\",\n          schedulerCommitHistogram);\n      schedulerHistogramList.add(schedulerCommitHistogram);\n      histogramTimerMap\n          .put(schedulerCommitHistogram, schedulerCommitSuccessTimer);\n      Histogram schedulerCommitFailureHistogram \u003d\n          new Histogram(new SlidingWindowReservoir(SAMPLING_SIZE));\n      metrics.register(\"sampler.scheduler.operation.commit.failure.timecost\",\n          schedulerCommitFailureHistogram);\n      schedulerHistogramList.add(schedulerCommitFailureHistogram);\n      histogramTimerMap\n          .put(schedulerCommitFailureHistogram, schedulerCommitFailureTimer);\n      Histogram schedulerHandleHistogram \u003d new Histogram(\n          new SlidingWindowReservoir(SAMPLING_SIZE));\n      metrics.register(\"sampler.scheduler.operation.handle.timecost\",\n          schedulerHandleHistogram);\n      schedulerHistogramList.add(schedulerHandleHistogram);\n      histogramTimerMap.put(schedulerHandleHistogram, schedulerHandleTimer);\n      for (SchedulerEventType e : SchedulerEventType.values()) {\n        Histogram histogram \u003d new Histogram(\n            new SlidingWindowReservoir(SAMPLING_SIZE));\n        metrics.register(\n            \"sampler.scheduler.operation.handle.\" + e + \".timecost\",\n            histogram);\n        schedulerHistogramList.add(histogram);\n        histogramTimerMap.put(histogram, schedulerHandleTimerMap.get(e));\n      }\n    } finally {\n      samplerLock.unlock();\n    }\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/SchedulerMetrics.java",
      "extendedDetails": {}
    },
    "6a5516c2381f107d96b8326939514de3c6e53d3d": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "YARN-5654. Not be able to run SLS with FairScheduler (yufeigu via rkanter)\n",
      "commitDate": "29/03/17 4:18 PM",
      "commitName": "6a5516c2381f107d96b8326939514de3c6e53d3d",
      "commitAuthor": "Robert Kanter",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-5654. Not be able to run SLS with FairScheduler (yufeigu via rkanter)\n",
          "commitDate": "29/03/17 4:18 PM",
          "commitName": "6a5516c2381f107d96b8326939514de3c6e53d3d",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "29/03/17 2:37 PM",
          "commitNameOld": "4966a6e26e45d7dc36e0b270066ff7c87bcd00cc",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,55 +1,55 @@\n   private void registerSchedulerMetrics() {\n     samplerLock.lock();\n     try {\n       // counters for scheduler operations\n       schedulerAllocateCounter \u003d metrics.counter(\n-              \"counter.scheduler.operation.allocate\");\n+          \"counter.scheduler.operation.allocate\");\n       schedulerHandleCounter \u003d metrics.counter(\n-              \"counter.scheduler.operation.handle\");\n-      schedulerHandleCounterMap \u003d new HashMap\u003cSchedulerEventType, Counter\u003e();\n+          \"counter.scheduler.operation.handle\");\n+      schedulerHandleCounterMap \u003d new HashMap\u003c\u003e();\n       for (SchedulerEventType e : SchedulerEventType.values()) {\n         Counter counter \u003d metrics.counter(\n-                \"counter.scheduler.operation.handle.\" + e);\n+            \"counter.scheduler.operation.handle.\" + e);\n         schedulerHandleCounterMap.put(e, counter);\n       }\n       // timers for scheduler operations\n       int timeWindowSize \u003d conf.getInt(\n-              SLSConfiguration.METRICS_TIMER_WINDOW_SIZE,\n-              SLSConfiguration.METRICS_TIMER_WINDOW_SIZE_DEFAULT);\n+          SLSConfiguration.METRICS_TIMER_WINDOW_SIZE,\n+          SLSConfiguration.METRICS_TIMER_WINDOW_SIZE_DEFAULT);\n       schedulerAllocateTimer \u003d new Timer(\n-              new SlidingWindowReservoir(timeWindowSize));\n+          new SlidingWindowReservoir(timeWindowSize));\n       schedulerHandleTimer \u003d new Timer(\n-              new SlidingWindowReservoir(timeWindowSize));\n-      schedulerHandleTimerMap \u003d new HashMap\u003cSchedulerEventType, Timer\u003e();\n+          new SlidingWindowReservoir(timeWindowSize));\n+      schedulerHandleTimerMap \u003d new HashMap\u003c\u003e();\n       for (SchedulerEventType e : SchedulerEventType.values()) {\n         Timer timer \u003d new Timer(new SlidingWindowReservoir(timeWindowSize));\n         schedulerHandleTimerMap.put(e, timer);\n       }\n       // histogram for scheduler operations (Samplers)\n-      schedulerHistogramList \u003d new ArrayList\u003cHistogram\u003e();\n-      histogramTimerMap \u003d new HashMap\u003cHistogram, Timer\u003e();\n+      schedulerHistogramList \u003d new ArrayList\u003c\u003e();\n+      histogramTimerMap \u003d new HashMap\u003c\u003e();\n       Histogram schedulerAllocateHistogram \u003d new Histogram(\n-              new SlidingWindowReservoir(SAMPLING_SIZE));\n+          new SlidingWindowReservoir(SAMPLING_SIZE));\n       metrics.register(\"sampler.scheduler.operation.allocate.timecost\",\n-              schedulerAllocateHistogram);\n+          schedulerAllocateHistogram);\n       schedulerHistogramList.add(schedulerAllocateHistogram);\n       histogramTimerMap.put(schedulerAllocateHistogram, schedulerAllocateTimer);\n       Histogram schedulerHandleHistogram \u003d new Histogram(\n-              new SlidingWindowReservoir(SAMPLING_SIZE));\n+          new SlidingWindowReservoir(SAMPLING_SIZE));\n       metrics.register(\"sampler.scheduler.operation.handle.timecost\",\n-              schedulerHandleHistogram);\n+          schedulerHandleHistogram);\n       schedulerHistogramList.add(schedulerHandleHistogram);\n       histogramTimerMap.put(schedulerHandleHistogram, schedulerHandleTimer);\n       for (SchedulerEventType e : SchedulerEventType.values()) {\n         Histogram histogram \u003d new Histogram(\n-                new SlidingWindowReservoir(SAMPLING_SIZE));\n+            new SlidingWindowReservoir(SAMPLING_SIZE));\n         metrics.register(\n-                \"sampler.scheduler.operation.handle.\" + e + \".timecost\",\n-                histogram);\n+            \"sampler.scheduler.operation.handle.\" + e + \".timecost\",\n+            histogram);\n         schedulerHistogramList.add(histogram);\n         histogramTimerMap.put(histogram, schedulerHandleTimerMap.get(e));\n       }\n     } finally {\n       samplerLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void registerSchedulerMetrics() {\n    samplerLock.lock();\n    try {\n      // counters for scheduler operations\n      schedulerAllocateCounter \u003d metrics.counter(\n          \"counter.scheduler.operation.allocate\");\n      schedulerHandleCounter \u003d metrics.counter(\n          \"counter.scheduler.operation.handle\");\n      schedulerHandleCounterMap \u003d new HashMap\u003c\u003e();\n      for (SchedulerEventType e : SchedulerEventType.values()) {\n        Counter counter \u003d metrics.counter(\n            \"counter.scheduler.operation.handle.\" + e);\n        schedulerHandleCounterMap.put(e, counter);\n      }\n      // timers for scheduler operations\n      int timeWindowSize \u003d conf.getInt(\n          SLSConfiguration.METRICS_TIMER_WINDOW_SIZE,\n          SLSConfiguration.METRICS_TIMER_WINDOW_SIZE_DEFAULT);\n      schedulerAllocateTimer \u003d new Timer(\n          new SlidingWindowReservoir(timeWindowSize));\n      schedulerHandleTimer \u003d new Timer(\n          new SlidingWindowReservoir(timeWindowSize));\n      schedulerHandleTimerMap \u003d new HashMap\u003c\u003e();\n      for (SchedulerEventType e : SchedulerEventType.values()) {\n        Timer timer \u003d new Timer(new SlidingWindowReservoir(timeWindowSize));\n        schedulerHandleTimerMap.put(e, timer);\n      }\n      // histogram for scheduler operations (Samplers)\n      schedulerHistogramList \u003d new ArrayList\u003c\u003e();\n      histogramTimerMap \u003d new HashMap\u003c\u003e();\n      Histogram schedulerAllocateHistogram \u003d new Histogram(\n          new SlidingWindowReservoir(SAMPLING_SIZE));\n      metrics.register(\"sampler.scheduler.operation.allocate.timecost\",\n          schedulerAllocateHistogram);\n      schedulerHistogramList.add(schedulerAllocateHistogram);\n      histogramTimerMap.put(schedulerAllocateHistogram, schedulerAllocateTimer);\n      Histogram schedulerHandleHistogram \u003d new Histogram(\n          new SlidingWindowReservoir(SAMPLING_SIZE));\n      metrics.register(\"sampler.scheduler.operation.handle.timecost\",\n          schedulerHandleHistogram);\n      schedulerHistogramList.add(schedulerHandleHistogram);\n      histogramTimerMap.put(schedulerHandleHistogram, schedulerHandleTimer);\n      for (SchedulerEventType e : SchedulerEventType.values()) {\n        Histogram histogram \u003d new Histogram(\n            new SlidingWindowReservoir(SAMPLING_SIZE));\n        metrics.register(\n            \"sampler.scheduler.operation.handle.\" + e + \".timecost\",\n            histogram);\n        schedulerHistogramList.add(histogram);\n        histogramTimerMap.put(histogram, schedulerHandleTimerMap.get(e));\n      }\n    } finally {\n      samplerLock.unlock();\n    }\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/SchedulerMetrics.java",
          "extendedDetails": {
            "oldPath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/ResourceSchedulerWrapper.java",
            "newPath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/SchedulerMetrics.java",
            "oldMethodName": "registerSchedulerMetrics",
            "newMethodName": "registerSchedulerMetrics"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5654. Not be able to run SLS with FairScheduler (yufeigu via rkanter)\n",
          "commitDate": "29/03/17 4:18 PM",
          "commitName": "6a5516c2381f107d96b8326939514de3c6e53d3d",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "29/03/17 2:37 PM",
          "commitNameOld": "4966a6e26e45d7dc36e0b270066ff7c87bcd00cc",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,55 +1,55 @@\n   private void registerSchedulerMetrics() {\n     samplerLock.lock();\n     try {\n       // counters for scheduler operations\n       schedulerAllocateCounter \u003d metrics.counter(\n-              \"counter.scheduler.operation.allocate\");\n+          \"counter.scheduler.operation.allocate\");\n       schedulerHandleCounter \u003d metrics.counter(\n-              \"counter.scheduler.operation.handle\");\n-      schedulerHandleCounterMap \u003d new HashMap\u003cSchedulerEventType, Counter\u003e();\n+          \"counter.scheduler.operation.handle\");\n+      schedulerHandleCounterMap \u003d new HashMap\u003c\u003e();\n       for (SchedulerEventType e : SchedulerEventType.values()) {\n         Counter counter \u003d metrics.counter(\n-                \"counter.scheduler.operation.handle.\" + e);\n+            \"counter.scheduler.operation.handle.\" + e);\n         schedulerHandleCounterMap.put(e, counter);\n       }\n       // timers for scheduler operations\n       int timeWindowSize \u003d conf.getInt(\n-              SLSConfiguration.METRICS_TIMER_WINDOW_SIZE,\n-              SLSConfiguration.METRICS_TIMER_WINDOW_SIZE_DEFAULT);\n+          SLSConfiguration.METRICS_TIMER_WINDOW_SIZE,\n+          SLSConfiguration.METRICS_TIMER_WINDOW_SIZE_DEFAULT);\n       schedulerAllocateTimer \u003d new Timer(\n-              new SlidingWindowReservoir(timeWindowSize));\n+          new SlidingWindowReservoir(timeWindowSize));\n       schedulerHandleTimer \u003d new Timer(\n-              new SlidingWindowReservoir(timeWindowSize));\n-      schedulerHandleTimerMap \u003d new HashMap\u003cSchedulerEventType, Timer\u003e();\n+          new SlidingWindowReservoir(timeWindowSize));\n+      schedulerHandleTimerMap \u003d new HashMap\u003c\u003e();\n       for (SchedulerEventType e : SchedulerEventType.values()) {\n         Timer timer \u003d new Timer(new SlidingWindowReservoir(timeWindowSize));\n         schedulerHandleTimerMap.put(e, timer);\n       }\n       // histogram for scheduler operations (Samplers)\n-      schedulerHistogramList \u003d new ArrayList\u003cHistogram\u003e();\n-      histogramTimerMap \u003d new HashMap\u003cHistogram, Timer\u003e();\n+      schedulerHistogramList \u003d new ArrayList\u003c\u003e();\n+      histogramTimerMap \u003d new HashMap\u003c\u003e();\n       Histogram schedulerAllocateHistogram \u003d new Histogram(\n-              new SlidingWindowReservoir(SAMPLING_SIZE));\n+          new SlidingWindowReservoir(SAMPLING_SIZE));\n       metrics.register(\"sampler.scheduler.operation.allocate.timecost\",\n-              schedulerAllocateHistogram);\n+          schedulerAllocateHistogram);\n       schedulerHistogramList.add(schedulerAllocateHistogram);\n       histogramTimerMap.put(schedulerAllocateHistogram, schedulerAllocateTimer);\n       Histogram schedulerHandleHistogram \u003d new Histogram(\n-              new SlidingWindowReservoir(SAMPLING_SIZE));\n+          new SlidingWindowReservoir(SAMPLING_SIZE));\n       metrics.register(\"sampler.scheduler.operation.handle.timecost\",\n-              schedulerHandleHistogram);\n+          schedulerHandleHistogram);\n       schedulerHistogramList.add(schedulerHandleHistogram);\n       histogramTimerMap.put(schedulerHandleHistogram, schedulerHandleTimer);\n       for (SchedulerEventType e : SchedulerEventType.values()) {\n         Histogram histogram \u003d new Histogram(\n-                new SlidingWindowReservoir(SAMPLING_SIZE));\n+            new SlidingWindowReservoir(SAMPLING_SIZE));\n         metrics.register(\n-                \"sampler.scheduler.operation.handle.\" + e + \".timecost\",\n-                histogram);\n+            \"sampler.scheduler.operation.handle.\" + e + \".timecost\",\n+            histogram);\n         schedulerHistogramList.add(histogram);\n         histogramTimerMap.put(histogram, schedulerHandleTimerMap.get(e));\n       }\n     } finally {\n       samplerLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void registerSchedulerMetrics() {\n    samplerLock.lock();\n    try {\n      // counters for scheduler operations\n      schedulerAllocateCounter \u003d metrics.counter(\n          \"counter.scheduler.operation.allocate\");\n      schedulerHandleCounter \u003d metrics.counter(\n          \"counter.scheduler.operation.handle\");\n      schedulerHandleCounterMap \u003d new HashMap\u003c\u003e();\n      for (SchedulerEventType e : SchedulerEventType.values()) {\n        Counter counter \u003d metrics.counter(\n            \"counter.scheduler.operation.handle.\" + e);\n        schedulerHandleCounterMap.put(e, counter);\n      }\n      // timers for scheduler operations\n      int timeWindowSize \u003d conf.getInt(\n          SLSConfiguration.METRICS_TIMER_WINDOW_SIZE,\n          SLSConfiguration.METRICS_TIMER_WINDOW_SIZE_DEFAULT);\n      schedulerAllocateTimer \u003d new Timer(\n          new SlidingWindowReservoir(timeWindowSize));\n      schedulerHandleTimer \u003d new Timer(\n          new SlidingWindowReservoir(timeWindowSize));\n      schedulerHandleTimerMap \u003d new HashMap\u003c\u003e();\n      for (SchedulerEventType e : SchedulerEventType.values()) {\n        Timer timer \u003d new Timer(new SlidingWindowReservoir(timeWindowSize));\n        schedulerHandleTimerMap.put(e, timer);\n      }\n      // histogram for scheduler operations (Samplers)\n      schedulerHistogramList \u003d new ArrayList\u003c\u003e();\n      histogramTimerMap \u003d new HashMap\u003c\u003e();\n      Histogram schedulerAllocateHistogram \u003d new Histogram(\n          new SlidingWindowReservoir(SAMPLING_SIZE));\n      metrics.register(\"sampler.scheduler.operation.allocate.timecost\",\n          schedulerAllocateHistogram);\n      schedulerHistogramList.add(schedulerAllocateHistogram);\n      histogramTimerMap.put(schedulerAllocateHistogram, schedulerAllocateTimer);\n      Histogram schedulerHandleHistogram \u003d new Histogram(\n          new SlidingWindowReservoir(SAMPLING_SIZE));\n      metrics.register(\"sampler.scheduler.operation.handle.timecost\",\n          schedulerHandleHistogram);\n      schedulerHistogramList.add(schedulerHandleHistogram);\n      histogramTimerMap.put(schedulerHandleHistogram, schedulerHandleTimer);\n      for (SchedulerEventType e : SchedulerEventType.values()) {\n        Histogram histogram \u003d new Histogram(\n            new SlidingWindowReservoir(SAMPLING_SIZE));\n        metrics.register(\n            \"sampler.scheduler.operation.handle.\" + e + \".timecost\",\n            histogram);\n        schedulerHistogramList.add(histogram);\n        histogramTimerMap.put(histogram, schedulerHandleTimerMap.get(e));\n      }\n    } finally {\n      samplerLock.unlock();\n    }\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/SchedulerMetrics.java",
          "extendedDetails": {}
        }
      ]
    },
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1021. Yarn Scheduler Load Simulator. (ywskycn via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1527059 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/09/13 1:23 PM",
      "commitName": "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,55 @@\n+  private void registerSchedulerMetrics() {\n+    samplerLock.lock();\n+    try {\n+      // counters for scheduler operations\n+      schedulerAllocateCounter \u003d metrics.counter(\n+              \"counter.scheduler.operation.allocate\");\n+      schedulerHandleCounter \u003d metrics.counter(\n+              \"counter.scheduler.operation.handle\");\n+      schedulerHandleCounterMap \u003d new HashMap\u003cSchedulerEventType, Counter\u003e();\n+      for (SchedulerEventType e : SchedulerEventType.values()) {\n+        Counter counter \u003d metrics.counter(\n+                \"counter.scheduler.operation.handle.\" + e);\n+        schedulerHandleCounterMap.put(e, counter);\n+      }\n+      // timers for scheduler operations\n+      int timeWindowSize \u003d conf.getInt(\n+              SLSConfiguration.METRICS_TIMER_WINDOW_SIZE,\n+              SLSConfiguration.METRICS_TIMER_WINDOW_SIZE_DEFAULT);\n+      schedulerAllocateTimer \u003d new Timer(\n+              new SlidingWindowReservoir(timeWindowSize));\n+      schedulerHandleTimer \u003d new Timer(\n+              new SlidingWindowReservoir(timeWindowSize));\n+      schedulerHandleTimerMap \u003d new HashMap\u003cSchedulerEventType, Timer\u003e();\n+      for (SchedulerEventType e : SchedulerEventType.values()) {\n+        Timer timer \u003d new Timer(new SlidingWindowReservoir(timeWindowSize));\n+        schedulerHandleTimerMap.put(e, timer);\n+      }\n+      // histogram for scheduler operations (Samplers)\n+      schedulerHistogramList \u003d new ArrayList\u003cHistogram\u003e();\n+      histogramTimerMap \u003d new HashMap\u003cHistogram, Timer\u003e();\n+      Histogram schedulerAllocateHistogram \u003d new Histogram(\n+              new SlidingWindowReservoir(SAMPLING_SIZE));\n+      metrics.register(\"sampler.scheduler.operation.allocate.timecost\",\n+              schedulerAllocateHistogram);\n+      schedulerHistogramList.add(schedulerAllocateHistogram);\n+      histogramTimerMap.put(schedulerAllocateHistogram, schedulerAllocateTimer);\n+      Histogram schedulerHandleHistogram \u003d new Histogram(\n+              new SlidingWindowReservoir(SAMPLING_SIZE));\n+      metrics.register(\"sampler.scheduler.operation.handle.timecost\",\n+              schedulerHandleHistogram);\n+      schedulerHistogramList.add(schedulerHandleHistogram);\n+      histogramTimerMap.put(schedulerHandleHistogram, schedulerHandleTimer);\n+      for (SchedulerEventType e : SchedulerEventType.values()) {\n+        Histogram histogram \u003d new Histogram(\n+                new SlidingWindowReservoir(SAMPLING_SIZE));\n+        metrics.register(\n+                \"sampler.scheduler.operation.handle.\" + e + \".timecost\",\n+                histogram);\n+        schedulerHistogramList.add(histogram);\n+        histogramTimerMap.put(histogram, schedulerHandleTimerMap.get(e));\n+      }\n+    } finally {\n+      samplerLock.unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void registerSchedulerMetrics() {\n    samplerLock.lock();\n    try {\n      // counters for scheduler operations\n      schedulerAllocateCounter \u003d metrics.counter(\n              \"counter.scheduler.operation.allocate\");\n      schedulerHandleCounter \u003d metrics.counter(\n              \"counter.scheduler.operation.handle\");\n      schedulerHandleCounterMap \u003d new HashMap\u003cSchedulerEventType, Counter\u003e();\n      for (SchedulerEventType e : SchedulerEventType.values()) {\n        Counter counter \u003d metrics.counter(\n                \"counter.scheduler.operation.handle.\" + e);\n        schedulerHandleCounterMap.put(e, counter);\n      }\n      // timers for scheduler operations\n      int timeWindowSize \u003d conf.getInt(\n              SLSConfiguration.METRICS_TIMER_WINDOW_SIZE,\n              SLSConfiguration.METRICS_TIMER_WINDOW_SIZE_DEFAULT);\n      schedulerAllocateTimer \u003d new Timer(\n              new SlidingWindowReservoir(timeWindowSize));\n      schedulerHandleTimer \u003d new Timer(\n              new SlidingWindowReservoir(timeWindowSize));\n      schedulerHandleTimerMap \u003d new HashMap\u003cSchedulerEventType, Timer\u003e();\n      for (SchedulerEventType e : SchedulerEventType.values()) {\n        Timer timer \u003d new Timer(new SlidingWindowReservoir(timeWindowSize));\n        schedulerHandleTimerMap.put(e, timer);\n      }\n      // histogram for scheduler operations (Samplers)\n      schedulerHistogramList \u003d new ArrayList\u003cHistogram\u003e();\n      histogramTimerMap \u003d new HashMap\u003cHistogram, Timer\u003e();\n      Histogram schedulerAllocateHistogram \u003d new Histogram(\n              new SlidingWindowReservoir(SAMPLING_SIZE));\n      metrics.register(\"sampler.scheduler.operation.allocate.timecost\",\n              schedulerAllocateHistogram);\n      schedulerHistogramList.add(schedulerAllocateHistogram);\n      histogramTimerMap.put(schedulerAllocateHistogram, schedulerAllocateTimer);\n      Histogram schedulerHandleHistogram \u003d new Histogram(\n              new SlidingWindowReservoir(SAMPLING_SIZE));\n      metrics.register(\"sampler.scheduler.operation.handle.timecost\",\n              schedulerHandleHistogram);\n      schedulerHistogramList.add(schedulerHandleHistogram);\n      histogramTimerMap.put(schedulerHandleHistogram, schedulerHandleTimer);\n      for (SchedulerEventType e : SchedulerEventType.values()) {\n        Histogram histogram \u003d new Histogram(\n                new SlidingWindowReservoir(SAMPLING_SIZE));\n        metrics.register(\n                \"sampler.scheduler.operation.handle.\" + e + \".timecost\",\n                histogram);\n        schedulerHistogramList.add(histogram);\n        histogramTimerMap.put(histogram, schedulerHandleTimerMap.get(e));\n      }\n    } finally {\n      samplerLock.unlock();\n    }\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/ResourceSchedulerWrapper.java"
    }
  }
}