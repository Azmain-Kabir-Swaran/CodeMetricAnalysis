{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PathMetadataDynamoDBTranslation.java",
  "functionName": "pathMetadataToItem",
  "functionId": "pathMetadataToItem___meta-DDBPathMetadata",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/PathMetadataDynamoDBTranslation.java",
  "functionStartLine": 178,
  "functionEndLine": 205,
  "numCommitsSeen": 9,
  "timeTaken": 2341,
  "changeHistory": [
    "a36274d69947648dbe82721220cc5240ec5d396d",
    "046b8768af8a07a9e10ce43f538d6ac16e7fa5f3",
    "d7232857d8d1e10cdac171acdc931187e45fd6be"
  ],
  "changeHistoryShort": {
    "a36274d69947648dbe82721220cc5240ec5d396d": "Ybodychange",
    "046b8768af8a07a9e10ce43f538d6ac16e7fa5f3": "Ybodychange",
    "d7232857d8d1e10cdac171acdc931187e45fd6be": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a36274d69947648dbe82721220cc5240ec5d396d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16085. S3Guard: use object version or etags to protect against inconsistent read after replace/overwrite.\n\nContributed by Ben Roling.\n\nS3Guard will now track the etag of uploaded files and, if an S3\nbucket is versioned, the object version.\n\nYou can then control how to react to a mismatch between the data\nin the DynamoDB table and that in the store: warn, fail, or, when\nusing versions, return the original value.\n\nThis adds two new columns to the table: etag and version.\nThis is transparent to older S3A clients -but when such clients\nadd/update data to the S3Guard table, they will not add these values.\nAs a result, the etag/version checks will not work with files uploaded by older clients.\n\nFor a consistent experience, upgrade all clients to use the latest hadoop version.\n",
      "commitDate": "19/05/19 2:29 PM",
      "commitName": "a36274d69947648dbe82721220cc5240ec5d396d",
      "commitAuthor": "Ben Roling",
      "commitDateOld": "02/10/18 9:22 PM",
      "commitNameOld": "046b8768af8a07a9e10ce43f538d6ac16e7fa5f3",
      "commitAuthorOld": "Aaron Fabbri",
      "daysBetweenCommits": 228.71,
      "commitsBetweenForRepo": 1662,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,28 @@\n   static Item pathMetadataToItem(DDBPathMetadata meta) {\n     Preconditions.checkNotNull(meta);\n-    final FileStatus status \u003d meta.getFileStatus();\n+    final S3AFileStatus status \u003d meta.getFileStatus();\n     final Item item \u003d new Item().withPrimaryKey(pathToKey(status.getPath()));\n     if (status.isDirectory()) {\n       item.withBoolean(IS_DIR, true);\n       if (!IGNORED_FIELDS.contains(IS_AUTHORITATIVE)) {\n         item.withBoolean(IS_AUTHORITATIVE, meta.isAuthoritativeDir());\n       }\n     } else {\n       item.withLong(FILE_LENGTH, status.getLen())\n           .withLong(MOD_TIME, status.getModificationTime())\n           .withLong(BLOCK_SIZE, status.getBlockSize());\n+      if (status.getETag() !\u003d null) {\n+        item.withString(ETAG, status.getETag());\n+      }\n+      if (status.getVersionId() !\u003d null) {\n+        item.withString(VERSION_ID, status.getVersionId());\n+      }\n     }\n     item.withBoolean(IS_DELETED, meta.isDeleted());\n \n     if(!IGNORED_FIELDS.contains(LAST_UPDATED)) {\n       item.withLong(LAST_UPDATED, meta.getLastUpdated());\n     }\n \n     return item;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static Item pathMetadataToItem(DDBPathMetadata meta) {\n    Preconditions.checkNotNull(meta);\n    final S3AFileStatus status \u003d meta.getFileStatus();\n    final Item item \u003d new Item().withPrimaryKey(pathToKey(status.getPath()));\n    if (status.isDirectory()) {\n      item.withBoolean(IS_DIR, true);\n      if (!IGNORED_FIELDS.contains(IS_AUTHORITATIVE)) {\n        item.withBoolean(IS_AUTHORITATIVE, meta.isAuthoritativeDir());\n      }\n    } else {\n      item.withLong(FILE_LENGTH, status.getLen())\n          .withLong(MOD_TIME, status.getModificationTime())\n          .withLong(BLOCK_SIZE, status.getBlockSize());\n      if (status.getETag() !\u003d null) {\n        item.withString(ETAG, status.getETag());\n      }\n      if (status.getVersionId() !\u003d null) {\n        item.withString(VERSION_ID, status.getVersionId());\n      }\n    }\n    item.withBoolean(IS_DELETED, meta.isDeleted());\n\n    if(!IGNORED_FIELDS.contains(LAST_UPDATED)) {\n      item.withLong(LAST_UPDATED, meta.getLastUpdated());\n    }\n\n    return item;\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/PathMetadataDynamoDBTranslation.java",
      "extendedDetails": {}
    },
    "046b8768af8a07a9e10ce43f538d6ac16e7fa5f3": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15621 S3Guard: Implement time-based (TTL) expiry for Authoritative Directory Listing. Contributed by Gabor Bota\n",
      "commitDate": "02/10/18 9:22 PM",
      "commitName": "046b8768af8a07a9e10ce43f538d6ac16e7fa5f3",
      "commitAuthor": "Aaron Fabbri",
      "commitDateOld": "17/08/18 10:15 AM",
      "commitNameOld": "d7232857d8d1e10cdac171acdc931187e45fd6be",
      "commitAuthorOld": "Aaron Fabbri",
      "daysBetweenCommits": 46.46,
      "commitsBetweenForRepo": 388,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,3 +1,22 @@\n   static Item pathMetadataToItem(DDBPathMetadata meta) {\n-    return pathMetadataToItem(meta, false);\n+    Preconditions.checkNotNull(meta);\n+    final FileStatus status \u003d meta.getFileStatus();\n+    final Item item \u003d new Item().withPrimaryKey(pathToKey(status.getPath()));\n+    if (status.isDirectory()) {\n+      item.withBoolean(IS_DIR, true);\n+      if (!IGNORED_FIELDS.contains(IS_AUTHORITATIVE)) {\n+        item.withBoolean(IS_AUTHORITATIVE, meta.isAuthoritativeDir());\n+      }\n+    } else {\n+      item.withLong(FILE_LENGTH, status.getLen())\n+          .withLong(MOD_TIME, status.getModificationTime())\n+          .withLong(BLOCK_SIZE, status.getBlockSize());\n+    }\n+    item.withBoolean(IS_DELETED, meta.isDeleted());\n+\n+    if(!IGNORED_FIELDS.contains(LAST_UPDATED)) {\n+      item.withLong(LAST_UPDATED, meta.getLastUpdated());\n+    }\n+\n+    return item;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static Item pathMetadataToItem(DDBPathMetadata meta) {\n    Preconditions.checkNotNull(meta);\n    final FileStatus status \u003d meta.getFileStatus();\n    final Item item \u003d new Item().withPrimaryKey(pathToKey(status.getPath()));\n    if (status.isDirectory()) {\n      item.withBoolean(IS_DIR, true);\n      if (!IGNORED_FIELDS.contains(IS_AUTHORITATIVE)) {\n        item.withBoolean(IS_AUTHORITATIVE, meta.isAuthoritativeDir());\n      }\n    } else {\n      item.withLong(FILE_LENGTH, status.getLen())\n          .withLong(MOD_TIME, status.getModificationTime())\n          .withLong(BLOCK_SIZE, status.getBlockSize());\n    }\n    item.withBoolean(IS_DELETED, meta.isDeleted());\n\n    if(!IGNORED_FIELDS.contains(LAST_UPDATED)) {\n      item.withLong(LAST_UPDATED, meta.getLastUpdated());\n    }\n\n    return item;\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/PathMetadataDynamoDBTranslation.java",
      "extendedDetails": {}
    },
    "d7232857d8d1e10cdac171acdc931187e45fd6be": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-14154 Persist isAuthoritative bit in DynamoDBMetaStore (Contributed by Gabor Bota)\n",
      "commitDate": "17/08/18 10:15 AM",
      "commitName": "d7232857d8d1e10cdac171acdc931187e45fd6be",
      "commitAuthor": "Aaron Fabbri",
      "diff": "@@ -0,0 +1,3 @@\n+  static Item pathMetadataToItem(DDBPathMetadata meta) {\n+    return pathMetadataToItem(meta, false);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  static Item pathMetadataToItem(DDBPathMetadata meta) {\n    return pathMetadataToItem(meta, false);\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/PathMetadataDynamoDBTranslation.java"
    }
  }
}