{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "UserProvider.java",
  "functionName": "rollNewVersion",
  "functionId": "rollNewVersion___name-String__material-byte[]",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/UserProvider.java",
  "functionStartLine": 116,
  "functionEndLine": 131,
  "numCommitsSeen": 8,
  "timeTaken": 873,
  "changeHistory": [
    "7b5295513dce9768083ae53282013e31d74573c6",
    "98a98ea0c57d01b875b820f53d43dbf885d07711",
    "77306291643838ed7b57b99d6497553314a525f2"
  ],
  "changeHistoryShort": {
    "7b5295513dce9768083ae53282013e31d74573c6": "Ybodychange",
    "98a98ea0c57d01b875b820f53d43dbf885d07711": "Ymodifierchange",
    "77306291643838ed7b57b99d6497553314a525f2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7b5295513dce9768083ae53282013e31d74573c6": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10757. KeyProvider KeyVersion should provide the key name. (asuresh via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1607896 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/07/14 10:31 AM",
      "commitName": "7b5295513dce9768083ae53282013e31d74573c6",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "19/06/14 3:18 PM",
      "commitNameOld": "38e2322d84d54896eac23afec0a1434629b8c8b2",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 14.8,
      "commitsBetweenForRepo": 101,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,16 @@\n   public synchronized KeyVersion rollNewVersion(String name,\n                                     byte[] material) throws IOException {\n     Metadata meta \u003d getMetadata(name);\n     if (meta \u003d\u003d null) {\n       throw new IOException(\"Key \" + name + \" not found\");\n     }\n     if (meta.getBitLength() !\u003d 8 * material.length) {\n       throw new IOException(\"Wrong key length. Required \" +\n           meta.getBitLength() + \", but got \" + (8 * material.length));\n     }\n     int nextVersion \u003d meta.addVersion();\n     credentials.addSecretKey(new Text(name), meta.serialize());\n     String versionName \u003d buildVersionName(name, nextVersion);\n     credentials.addSecretKey(new Text(versionName), material);\n-    return new KeyVersion(versionName, material);\n+    return new KeyVersion(name, versionName, material);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized KeyVersion rollNewVersion(String name,\n                                    byte[] material) throws IOException {\n    Metadata meta \u003d getMetadata(name);\n    if (meta \u003d\u003d null) {\n      throw new IOException(\"Key \" + name + \" not found\");\n    }\n    if (meta.getBitLength() !\u003d 8 * material.length) {\n      throw new IOException(\"Wrong key length. Required \" +\n          meta.getBitLength() + \", but got \" + (8 * material.length));\n    }\n    int nextVersion \u003d meta.addVersion();\n    credentials.addSecretKey(new Text(name), meta.serialize());\n    String versionName \u003d buildVersionName(name, nextVersion);\n    credentials.addSecretKey(new Text(versionName), material);\n    return new KeyVersion(name, versionName, material);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/UserProvider.java",
      "extendedDetails": {}
    },
    "98a98ea0c57d01b875b820f53d43dbf885d07711": {
      "type": "Ymodifierchange",
      "commitMessage": "HADOOP-10427. KeyProvider implementations should be thread safe. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1586103 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/04/14 12:43 PM",
      "commitName": "98a98ea0c57d01b875b820f53d43dbf885d07711",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "16/01/14 9:48 AM",
      "commitNameOld": "e05ff82bd95dd802233e2424e8eafbd7ec6944c5",
      "commitAuthorOld": "Owen O\u0027Malley",
      "daysBetweenCommits": 83.08,
      "commitsBetweenForRepo": 684,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,16 @@\n-  public KeyVersion rollNewVersion(String name,\n+  public synchronized KeyVersion rollNewVersion(String name,\n                                     byte[] material) throws IOException {\n     Metadata meta \u003d getMetadata(name);\n     if (meta \u003d\u003d null) {\n       throw new IOException(\"Key \" + name + \" not found\");\n     }\n     if (meta.getBitLength() !\u003d 8 * material.length) {\n       throw new IOException(\"Wrong key length. Required \" +\n           meta.getBitLength() + \", but got \" + (8 * material.length));\n     }\n     int nextVersion \u003d meta.addVersion();\n     credentials.addSecretKey(new Text(name), meta.serialize());\n     String versionName \u003d buildVersionName(name, nextVersion);\n     credentials.addSecretKey(new Text(versionName), material);\n     return new KeyVersion(versionName, material);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized KeyVersion rollNewVersion(String name,\n                                    byte[] material) throws IOException {\n    Metadata meta \u003d getMetadata(name);\n    if (meta \u003d\u003d null) {\n      throw new IOException(\"Key \" + name + \" not found\");\n    }\n    if (meta.getBitLength() !\u003d 8 * material.length) {\n      throw new IOException(\"Wrong key length. Required \" +\n          meta.getBitLength() + \", but got \" + (8 * material.length));\n    }\n    int nextVersion \u003d meta.addVersion();\n    credentials.addSecretKey(new Text(name), meta.serialize());\n    String versionName \u003d buildVersionName(name, nextVersion);\n    credentials.addSecretKey(new Text(versionName), material);\n    return new KeyVersion(versionName, material);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/UserProvider.java",
      "extendedDetails": {
        "oldValue": "[public]",
        "newValue": "[public, synchronized]"
      }
    },
    "77306291643838ed7b57b99d6497553314a525f2": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10141. Create KeyProvider API to separate encryption key storage\nfrom the applications. (omalley)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1552462 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/12/13 4:25 PM",
      "commitName": "77306291643838ed7b57b99d6497553314a525f2",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,16 @@\n+  public KeyVersion rollNewVersion(String name,\n+                                    byte[] material) throws IOException {\n+    Metadata meta \u003d getMetadata(name);\n+    if (meta \u003d\u003d null) {\n+      throw new IOException(\"Key \" + name + \" not found\");\n+    }\n+    if (meta.getBitLength() !\u003d 8 * material.length) {\n+      throw new IOException(\"Wrong key length. Required \" +\n+          meta.getBitLength() + \", but got \" + (8 * material.length));\n+    }\n+    int nextVersion \u003d meta.addVersion();\n+    credentials.addSecretKey(new Text(name), meta.serialize());\n+    String versionName \u003d buildVersionName(name, nextVersion);\n+    credentials.addSecretKey(new Text(versionName), material);\n+    return new KeyVersion(versionName, material);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public KeyVersion rollNewVersion(String name,\n                                    byte[] material) throws IOException {\n    Metadata meta \u003d getMetadata(name);\n    if (meta \u003d\u003d null) {\n      throw new IOException(\"Key \" + name + \" not found\");\n    }\n    if (meta.getBitLength() !\u003d 8 * material.length) {\n      throw new IOException(\"Wrong key length. Required \" +\n          meta.getBitLength() + \", but got \" + (8 * material.length));\n    }\n    int nextVersion \u003d meta.addVersion();\n    credentials.addSecretKey(new Text(name), meta.serialize());\n    String versionName \u003d buildVersionName(name, nextVersion);\n    credentials.addSecretKey(new Text(versionName), material);\n    return new KeyVersion(versionName, material);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/UserProvider.java"
    }
  }
}