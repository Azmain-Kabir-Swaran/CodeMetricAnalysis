{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainerLauncherImpl.java",
  "functionName": "getCMProxy",
  "functionId": "getCMProxy___containerMgrBindAddr-String__containerId-ContainerId",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/launcher/ContainerLauncherImpl.java",
  "functionStartLine": 431,
  "functionEndLine": 434,
  "numCommitsSeen": 127,
  "timeTaken": 8572,
  "changeHistory": [
    "243bcd367ff3130d74676280233041f88aca62a5",
    "acc0d3eb521e3c1d1b2f4be9b46c685ee921504b",
    "77e134d13fb87cd098f2e9c23212affe0a7be1be",
    "a2c42330047bf955a6a585dcddf798920d4c8640",
    "ca8024673178fa1c80224b390dfba932921693d9",
    "aa60da6c2ec049cc70897afee6c368cb70493773",
    "239a5549eadeccb0ab433abb38079dbe19f862ff",
    "2df83e5b4d7a3516a9c7ec11309023e3c42a869b",
    "7f4dc277572df6ba25fa961073b99a5bdb086c00",
    "724f21734316343873386a14059a347067d65a10",
    "88ff272cfd2544a8436b2e7bdbf783ed425725d4",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "243bcd367ff3130d74676280233041f88aca62a5": "Ymultichange(Yparameterchange,Yreturntypechange,Ymodifierchange,Ybodychange)",
    "acc0d3eb521e3c1d1b2f4be9b46c685ee921504b": "Ybodychange",
    "77e134d13fb87cd098f2e9c23212affe0a7be1be": "Ymultichange(Yreturntypechange,Ybodychange)",
    "a2c42330047bf955a6a585dcddf798920d4c8640": "Yparameterchange",
    "ca8024673178fa1c80224b390dfba932921693d9": "Ybodychange",
    "aa60da6c2ec049cc70897afee6c368cb70493773": "Ybodychange",
    "239a5549eadeccb0ab433abb38079dbe19f862ff": "Ybodychange",
    "2df83e5b4d7a3516a9c7ec11309023e3c42a869b": "Ybodychange",
    "7f4dc277572df6ba25fa961073b99a5bdb086c00": "Ymultichange(Yparameterchange,Ybodychange)",
    "724f21734316343873386a14059a347067d65a10": "Yparameterchange",
    "88ff272cfd2544a8436b2e7bdbf783ed425725d4": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "243bcd367ff3130d74676280233041f88aca62a5": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-694. Starting to use NMTokens to authenticate all communication with NodeManagers. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1494369 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/06/13 4:19 PM",
      "commitName": "243bcd367ff3130d74676280233041f88aca62a5",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-694. Starting to use NMTokens to authenticate all communication with NodeManagers. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1494369 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/06/13 4:19 PM",
          "commitName": "243bcd367ff3130d74676280233041f88aca62a5",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/06/13 11:20 PM",
          "commitNameOld": "f4d80e91ae314d316100baa7770b9d73ea853d9c",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.71,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,4 @@\n-  protected ContainerManagementProtocol getCMProxy(ContainerId containerID,\n-      final String containerManagerBindAddr,\n-      org.apache.hadoop.yarn.api.records.Token containerToken)\n-      throws IOException {\n-\n-    final InetSocketAddress cmAddr \u003d\n-        NetUtils.createSocketAddr(containerManagerBindAddr);\n-\n-    // the user in createRemoteUser in this context has to be ContainerID\n-    UserGroupInformation user \u003d\n-        UserGroupInformation.createRemoteUser(containerID.toString());\n-\n-    Token\u003cContainerTokenIdentifier\u003e token \u003d\n-        ConverterUtils.convertFromYarn(containerToken, cmAddr);\n-    user.addToken(token);\n-\n-    ContainerManagementProtocol proxy \u003d user\n-        .doAs(new PrivilegedAction\u003cContainerManagementProtocol\u003e() {\n-          @Override\n-          public ContainerManagementProtocol run() {\n-            return (ContainerManagementProtocol) rpc.getProxy(ContainerManagementProtocol.class,\n-                cmAddr, getConfig());\n-          }\n-        });\n-    return proxy;\n+  public ContainerManagementProtocolProxy.ContainerManagementProtocolProxyData getCMProxy(\n+      String containerMgrBindAddr, ContainerId containerId) throws IOException {\n+    return cmProxy.getProxy(containerMgrBindAddr, containerId);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ContainerManagementProtocolProxy.ContainerManagementProtocolProxyData getCMProxy(\n      String containerMgrBindAddr, ContainerId containerId) throws IOException {\n    return cmProxy.getProxy(containerMgrBindAddr, containerId);\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/launcher/ContainerLauncherImpl.java",
          "extendedDetails": {
            "oldValue": "[containerID-ContainerId, containerManagerBindAddr-String(modifiers-final), containerToken-org.apache.hadoop.yarn.api.records.Token]",
            "newValue": "[containerMgrBindAddr-String, containerId-ContainerId]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-694. Starting to use NMTokens to authenticate all communication with NodeManagers. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1494369 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/06/13 4:19 PM",
          "commitName": "243bcd367ff3130d74676280233041f88aca62a5",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/06/13 11:20 PM",
          "commitNameOld": "f4d80e91ae314d316100baa7770b9d73ea853d9c",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.71,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,4 @@\n-  protected ContainerManagementProtocol getCMProxy(ContainerId containerID,\n-      final String containerManagerBindAddr,\n-      org.apache.hadoop.yarn.api.records.Token containerToken)\n-      throws IOException {\n-\n-    final InetSocketAddress cmAddr \u003d\n-        NetUtils.createSocketAddr(containerManagerBindAddr);\n-\n-    // the user in createRemoteUser in this context has to be ContainerID\n-    UserGroupInformation user \u003d\n-        UserGroupInformation.createRemoteUser(containerID.toString());\n-\n-    Token\u003cContainerTokenIdentifier\u003e token \u003d\n-        ConverterUtils.convertFromYarn(containerToken, cmAddr);\n-    user.addToken(token);\n-\n-    ContainerManagementProtocol proxy \u003d user\n-        .doAs(new PrivilegedAction\u003cContainerManagementProtocol\u003e() {\n-          @Override\n-          public ContainerManagementProtocol run() {\n-            return (ContainerManagementProtocol) rpc.getProxy(ContainerManagementProtocol.class,\n-                cmAddr, getConfig());\n-          }\n-        });\n-    return proxy;\n+  public ContainerManagementProtocolProxy.ContainerManagementProtocolProxyData getCMProxy(\n+      String containerMgrBindAddr, ContainerId containerId) throws IOException {\n+    return cmProxy.getProxy(containerMgrBindAddr, containerId);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ContainerManagementProtocolProxy.ContainerManagementProtocolProxyData getCMProxy(\n      String containerMgrBindAddr, ContainerId containerId) throws IOException {\n    return cmProxy.getProxy(containerMgrBindAddr, containerId);\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/launcher/ContainerLauncherImpl.java",
          "extendedDetails": {
            "oldValue": "ContainerManagementProtocol",
            "newValue": "ContainerManagementProtocolProxy.ContainerManagementProtocolProxyData"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-694. Starting to use NMTokens to authenticate all communication with NodeManagers. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1494369 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/06/13 4:19 PM",
          "commitName": "243bcd367ff3130d74676280233041f88aca62a5",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/06/13 11:20 PM",
          "commitNameOld": "f4d80e91ae314d316100baa7770b9d73ea853d9c",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.71,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,4 @@\n-  protected ContainerManagementProtocol getCMProxy(ContainerId containerID,\n-      final String containerManagerBindAddr,\n-      org.apache.hadoop.yarn.api.records.Token containerToken)\n-      throws IOException {\n-\n-    final InetSocketAddress cmAddr \u003d\n-        NetUtils.createSocketAddr(containerManagerBindAddr);\n-\n-    // the user in createRemoteUser in this context has to be ContainerID\n-    UserGroupInformation user \u003d\n-        UserGroupInformation.createRemoteUser(containerID.toString());\n-\n-    Token\u003cContainerTokenIdentifier\u003e token \u003d\n-        ConverterUtils.convertFromYarn(containerToken, cmAddr);\n-    user.addToken(token);\n-\n-    ContainerManagementProtocol proxy \u003d user\n-        .doAs(new PrivilegedAction\u003cContainerManagementProtocol\u003e() {\n-          @Override\n-          public ContainerManagementProtocol run() {\n-            return (ContainerManagementProtocol) rpc.getProxy(ContainerManagementProtocol.class,\n-                cmAddr, getConfig());\n-          }\n-        });\n-    return proxy;\n+  public ContainerManagementProtocolProxy.ContainerManagementProtocolProxyData getCMProxy(\n+      String containerMgrBindAddr, ContainerId containerId) throws IOException {\n+    return cmProxy.getProxy(containerMgrBindAddr, containerId);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ContainerManagementProtocolProxy.ContainerManagementProtocolProxyData getCMProxy(\n      String containerMgrBindAddr, ContainerId containerId) throws IOException {\n    return cmProxy.getProxy(containerMgrBindAddr, containerId);\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/launcher/ContainerLauncherImpl.java",
          "extendedDetails": {
            "oldValue": "[protected]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-694. Starting to use NMTokens to authenticate all communication with NodeManagers. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1494369 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/06/13 4:19 PM",
          "commitName": "243bcd367ff3130d74676280233041f88aca62a5",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/06/13 11:20 PM",
          "commitNameOld": "f4d80e91ae314d316100baa7770b9d73ea853d9c",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.71,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,4 @@\n-  protected ContainerManagementProtocol getCMProxy(ContainerId containerID,\n-      final String containerManagerBindAddr,\n-      org.apache.hadoop.yarn.api.records.Token containerToken)\n-      throws IOException {\n-\n-    final InetSocketAddress cmAddr \u003d\n-        NetUtils.createSocketAddr(containerManagerBindAddr);\n-\n-    // the user in createRemoteUser in this context has to be ContainerID\n-    UserGroupInformation user \u003d\n-        UserGroupInformation.createRemoteUser(containerID.toString());\n-\n-    Token\u003cContainerTokenIdentifier\u003e token \u003d\n-        ConverterUtils.convertFromYarn(containerToken, cmAddr);\n-    user.addToken(token);\n-\n-    ContainerManagementProtocol proxy \u003d user\n-        .doAs(new PrivilegedAction\u003cContainerManagementProtocol\u003e() {\n-          @Override\n-          public ContainerManagementProtocol run() {\n-            return (ContainerManagementProtocol) rpc.getProxy(ContainerManagementProtocol.class,\n-                cmAddr, getConfig());\n-          }\n-        });\n-    return proxy;\n+  public ContainerManagementProtocolProxy.ContainerManagementProtocolProxyData getCMProxy(\n+      String containerMgrBindAddr, ContainerId containerId) throws IOException {\n+    return cmProxy.getProxy(containerMgrBindAddr, containerId);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ContainerManagementProtocolProxy.ContainerManagementProtocolProxyData getCMProxy(\n      String containerMgrBindAddr, ContainerId containerId) throws IOException {\n    return cmProxy.getProxy(containerMgrBindAddr, containerId);\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/launcher/ContainerLauncherImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "acc0d3eb521e3c1d1b2f4be9b46c685ee921504b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-840. Moved ProtoUtils to yarn.api.records.pb.impl. Contributed by Jian He.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1494027 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/06/13 10:47 PM",
      "commitName": "acc0d3eb521e3c1d1b2f4be9b46c685ee921504b",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "16/06/13 11:39 PM",
      "commitNameOld": "b9efe6bd4a1277b4067ecde715a7713a85968886",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.96,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   protected ContainerManagementProtocol getCMProxy(ContainerId containerID,\n       final String containerManagerBindAddr,\n       org.apache.hadoop.yarn.api.records.Token containerToken)\n       throws IOException {\n \n     final InetSocketAddress cmAddr \u003d\n         NetUtils.createSocketAddr(containerManagerBindAddr);\n \n     // the user in createRemoteUser in this context has to be ContainerID\n     UserGroupInformation user \u003d\n         UserGroupInformation.createRemoteUser(containerID.toString());\n \n     Token\u003cContainerTokenIdentifier\u003e token \u003d\n-        ProtoUtils.convertFromProtoFormat(containerToken, cmAddr);\n+        ConverterUtils.convertFromYarn(containerToken, cmAddr);\n     user.addToken(token);\n \n     ContainerManagementProtocol proxy \u003d user\n         .doAs(new PrivilegedAction\u003cContainerManagementProtocol\u003e() {\n           @Override\n           public ContainerManagementProtocol run() {\n             return (ContainerManagementProtocol) rpc.getProxy(ContainerManagementProtocol.class,\n                 cmAddr, getConfig());\n           }\n         });\n     return proxy;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected ContainerManagementProtocol getCMProxy(ContainerId containerID,\n      final String containerManagerBindAddr,\n      org.apache.hadoop.yarn.api.records.Token containerToken)\n      throws IOException {\n\n    final InetSocketAddress cmAddr \u003d\n        NetUtils.createSocketAddr(containerManagerBindAddr);\n\n    // the user in createRemoteUser in this context has to be ContainerID\n    UserGroupInformation user \u003d\n        UserGroupInformation.createRemoteUser(containerID.toString());\n\n    Token\u003cContainerTokenIdentifier\u003e token \u003d\n        ConverterUtils.convertFromYarn(containerToken, cmAddr);\n    user.addToken(token);\n\n    ContainerManagementProtocol proxy \u003d user\n        .doAs(new PrivilegedAction\u003cContainerManagementProtocol\u003e() {\n          @Override\n          public ContainerManagementProtocol run() {\n            return (ContainerManagementProtocol) rpc.getProxy(ContainerManagementProtocol.class,\n                cmAddr, getConfig());\n          }\n        });\n    return proxy;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/launcher/ContainerLauncherImpl.java",
      "extendedDetails": {}
    },
    "77e134d13fb87cd098f2e9c23212affe0a7be1be": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-387. Renamed YARN protocols for consistency. Contributed by Vinod K V.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1493623 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/06/13 7:27 PM",
      "commitName": "77e134d13fb87cd098f2e9c23212affe0a7be1be",
      "commitAuthor": "Arun Murthy",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-387. Renamed YARN protocols for consistency. Contributed by Vinod K V.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1493623 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/06/13 7:27 PM",
          "commitName": "77e134d13fb87cd098f2e9c23212affe0a7be1be",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "13/06/13 4:25 PM",
          "commitNameOld": "c0cd68d8fbf5c8cafa6d563c7d0401e7a87a2d9e",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 3.13,
          "commitsBetweenForRepo": 30,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,26 @@\n-  protected ContainerManager getCMProxy(ContainerId containerID,\n+  protected ContainerManagementProtocol getCMProxy(ContainerId containerID,\n       final String containerManagerBindAddr,\n       org.apache.hadoop.yarn.api.records.Token containerToken)\n       throws IOException {\n \n     final InetSocketAddress cmAddr \u003d\n         NetUtils.createSocketAddr(containerManagerBindAddr);\n \n     // the user in createRemoteUser in this context has to be ContainerID\n     UserGroupInformation user \u003d\n         UserGroupInformation.createRemoteUser(containerID.toString());\n \n     Token\u003cContainerTokenIdentifier\u003e token \u003d\n         ProtoUtils.convertFromProtoFormat(containerToken, cmAddr);\n     user.addToken(token);\n \n-    ContainerManager proxy \u003d user\n-        .doAs(new PrivilegedAction\u003cContainerManager\u003e() {\n+    ContainerManagementProtocol proxy \u003d user\n+        .doAs(new PrivilegedAction\u003cContainerManagementProtocol\u003e() {\n           @Override\n-          public ContainerManager run() {\n-            return (ContainerManager) rpc.getProxy(ContainerManager.class,\n+          public ContainerManagementProtocol run() {\n+            return (ContainerManagementProtocol) rpc.getProxy(ContainerManagementProtocol.class,\n                 cmAddr, getConfig());\n           }\n         });\n     return proxy;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected ContainerManagementProtocol getCMProxy(ContainerId containerID,\n      final String containerManagerBindAddr,\n      org.apache.hadoop.yarn.api.records.Token containerToken)\n      throws IOException {\n\n    final InetSocketAddress cmAddr \u003d\n        NetUtils.createSocketAddr(containerManagerBindAddr);\n\n    // the user in createRemoteUser in this context has to be ContainerID\n    UserGroupInformation user \u003d\n        UserGroupInformation.createRemoteUser(containerID.toString());\n\n    Token\u003cContainerTokenIdentifier\u003e token \u003d\n        ProtoUtils.convertFromProtoFormat(containerToken, cmAddr);\n    user.addToken(token);\n\n    ContainerManagementProtocol proxy \u003d user\n        .doAs(new PrivilegedAction\u003cContainerManagementProtocol\u003e() {\n          @Override\n          public ContainerManagementProtocol run() {\n            return (ContainerManagementProtocol) rpc.getProxy(ContainerManagementProtocol.class,\n                cmAddr, getConfig());\n          }\n        });\n    return proxy;\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/launcher/ContainerLauncherImpl.java",
          "extendedDetails": {
            "oldValue": "ContainerManager",
            "newValue": "ContainerManagementProtocol"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-387. Renamed YARN protocols for consistency. Contributed by Vinod K V.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1493623 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/06/13 7:27 PM",
          "commitName": "77e134d13fb87cd098f2e9c23212affe0a7be1be",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "13/06/13 4:25 PM",
          "commitNameOld": "c0cd68d8fbf5c8cafa6d563c7d0401e7a87a2d9e",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 3.13,
          "commitsBetweenForRepo": 30,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,26 @@\n-  protected ContainerManager getCMProxy(ContainerId containerID,\n+  protected ContainerManagementProtocol getCMProxy(ContainerId containerID,\n       final String containerManagerBindAddr,\n       org.apache.hadoop.yarn.api.records.Token containerToken)\n       throws IOException {\n \n     final InetSocketAddress cmAddr \u003d\n         NetUtils.createSocketAddr(containerManagerBindAddr);\n \n     // the user in createRemoteUser in this context has to be ContainerID\n     UserGroupInformation user \u003d\n         UserGroupInformation.createRemoteUser(containerID.toString());\n \n     Token\u003cContainerTokenIdentifier\u003e token \u003d\n         ProtoUtils.convertFromProtoFormat(containerToken, cmAddr);\n     user.addToken(token);\n \n-    ContainerManager proxy \u003d user\n-        .doAs(new PrivilegedAction\u003cContainerManager\u003e() {\n+    ContainerManagementProtocol proxy \u003d user\n+        .doAs(new PrivilegedAction\u003cContainerManagementProtocol\u003e() {\n           @Override\n-          public ContainerManager run() {\n-            return (ContainerManager) rpc.getProxy(ContainerManager.class,\n+          public ContainerManagementProtocol run() {\n+            return (ContainerManagementProtocol) rpc.getProxy(ContainerManagementProtocol.class,\n                 cmAddr, getConfig());\n           }\n         });\n     return proxy;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected ContainerManagementProtocol getCMProxy(ContainerId containerID,\n      final String containerManagerBindAddr,\n      org.apache.hadoop.yarn.api.records.Token containerToken)\n      throws IOException {\n\n    final InetSocketAddress cmAddr \u003d\n        NetUtils.createSocketAddr(containerManagerBindAddr);\n\n    // the user in createRemoteUser in this context has to be ContainerID\n    UserGroupInformation user \u003d\n        UserGroupInformation.createRemoteUser(containerID.toString());\n\n    Token\u003cContainerTokenIdentifier\u003e token \u003d\n        ProtoUtils.convertFromProtoFormat(containerToken, cmAddr);\n    user.addToken(token);\n\n    ContainerManagementProtocol proxy \u003d user\n        .doAs(new PrivilegedAction\u003cContainerManagementProtocol\u003e() {\n          @Override\n          public ContainerManagementProtocol run() {\n            return (ContainerManagementProtocol) rpc.getProxy(ContainerManagementProtocol.class,\n                cmAddr, getConfig());\n          }\n        });\n    return proxy;\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/launcher/ContainerLauncherImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "a2c42330047bf955a6a585dcddf798920d4c8640": {
      "type": "Yparameterchange",
      "commitMessage": "YARN-717. Put object creation factories for Token in the class itself and remove useless derivations for specific tokens. Contributed by Jian He.\nMAPREDUCE-5289. Updated MR App to use Token directly after YARN-717. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1488616 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/06/13 2:43 PM",
      "commitName": "a2c42330047bf955a6a585dcddf798920d4c8640",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "30/05/13 9:17 PM",
      "commitNameOld": "f3f7a11336d225488576ecdf22f9a719a9745180",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 1.73,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,26 @@\n   protected ContainerManager getCMProxy(ContainerId containerID,\n-      final String containerManagerBindAddr, ContainerToken containerToken)\n+      final String containerManagerBindAddr,\n+      org.apache.hadoop.yarn.api.records.Token containerToken)\n       throws IOException {\n \n     final InetSocketAddress cmAddr \u003d\n         NetUtils.createSocketAddr(containerManagerBindAddr);\n \n     // the user in createRemoteUser in this context has to be ContainerID\n     UserGroupInformation user \u003d\n         UserGroupInformation.createRemoteUser(containerID.toString());\n \n     Token\u003cContainerTokenIdentifier\u003e token \u003d\n         ProtoUtils.convertFromProtoFormat(containerToken, cmAddr);\n     user.addToken(token);\n \n     ContainerManager proxy \u003d user\n         .doAs(new PrivilegedAction\u003cContainerManager\u003e() {\n           @Override\n           public ContainerManager run() {\n             return (ContainerManager) rpc.getProxy(ContainerManager.class,\n                 cmAddr, getConfig());\n           }\n         });\n     return proxy;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected ContainerManager getCMProxy(ContainerId containerID,\n      final String containerManagerBindAddr,\n      org.apache.hadoop.yarn.api.records.Token containerToken)\n      throws IOException {\n\n    final InetSocketAddress cmAddr \u003d\n        NetUtils.createSocketAddr(containerManagerBindAddr);\n\n    // the user in createRemoteUser in this context has to be ContainerID\n    UserGroupInformation user \u003d\n        UserGroupInformation.createRemoteUser(containerID.toString());\n\n    Token\u003cContainerTokenIdentifier\u003e token \u003d\n        ProtoUtils.convertFromProtoFormat(containerToken, cmAddr);\n    user.addToken(token);\n\n    ContainerManager proxy \u003d user\n        .doAs(new PrivilegedAction\u003cContainerManager\u003e() {\n          @Override\n          public ContainerManager run() {\n            return (ContainerManager) rpc.getProxy(ContainerManager.class,\n                cmAddr, getConfig());\n          }\n        });\n    return proxy;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/launcher/ContainerLauncherImpl.java",
      "extendedDetails": {
        "oldValue": "[containerID-ContainerId, containerManagerBindAddr-String(modifiers-final), containerToken-ContainerToken]",
        "newValue": "[containerID-ContainerId, containerManagerBindAddr-String(modifiers-final), containerToken-org.apache.hadoop.yarn.api.records.Token]"
      }
    },
    "ca8024673178fa1c80224b390dfba932921693d9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-617. Made ContainerTokens to be used for validation at NodeManager also in unsecure mode to prevent AMs from faking resource requirements in unsecure mode. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1483667 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/05/13 11:36 PM",
      "commitName": "ca8024673178fa1c80224b390dfba932921693d9",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "18/04/13 6:33 PM",
      "commitNameOld": "8e1c2823fc014a5a045c86760c61111d0bb59d2f",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 28.21,
      "commitsBetweenForRepo": 190,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,25 @@\n   protected ContainerManager getCMProxy(ContainerId containerID,\n       final String containerManagerBindAddr, ContainerToken containerToken)\n       throws IOException {\n \n     final InetSocketAddress cmAddr \u003d\n         NetUtils.createSocketAddr(containerManagerBindAddr);\n-    UserGroupInformation user \u003d UserGroupInformation.getCurrentUser();\n \n-    if (UserGroupInformation.isSecurityEnabled()) {\n-      Token\u003cContainerTokenIdentifier\u003e token \u003d\n-          ProtoUtils.convertFromProtoFormat(containerToken, cmAddr);\n-      // the user in createRemoteUser in this context has to be ContainerID\n-      user \u003d UserGroupInformation.createRemoteUser(containerID.toString());\n-      user.addToken(token);\n-    }\n+    // the user in createRemoteUser in this context has to be ContainerID\n+    UserGroupInformation user \u003d\n+        UserGroupInformation.createRemoteUser(containerID.toString());\n+\n+    Token\u003cContainerTokenIdentifier\u003e token \u003d\n+        ProtoUtils.convertFromProtoFormat(containerToken, cmAddr);\n+    user.addToken(token);\n \n     ContainerManager proxy \u003d user\n         .doAs(new PrivilegedAction\u003cContainerManager\u003e() {\n           @Override\n           public ContainerManager run() {\n             return (ContainerManager) rpc.getProxy(ContainerManager.class,\n                 cmAddr, getConfig());\n           }\n         });\n     return proxy;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected ContainerManager getCMProxy(ContainerId containerID,\n      final String containerManagerBindAddr, ContainerToken containerToken)\n      throws IOException {\n\n    final InetSocketAddress cmAddr \u003d\n        NetUtils.createSocketAddr(containerManagerBindAddr);\n\n    // the user in createRemoteUser in this context has to be ContainerID\n    UserGroupInformation user \u003d\n        UserGroupInformation.createRemoteUser(containerID.toString());\n\n    Token\u003cContainerTokenIdentifier\u003e token \u003d\n        ProtoUtils.convertFromProtoFormat(containerToken, cmAddr);\n    user.addToken(token);\n\n    ContainerManager proxy \u003d user\n        .doAs(new PrivilegedAction\u003cContainerManager\u003e() {\n          @Override\n          public ContainerManager run() {\n            return (ContainerManager) rpc.getProxy(ContainerManager.class,\n                cmAddr, getConfig());\n          }\n        });\n    return proxy;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/launcher/ContainerLauncherImpl.java",
      "extendedDetails": {}
    },
    "aa60da6c2ec049cc70897afee6c368cb70493773": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4162. Correctly set token service (Daryn Sharp via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1335567 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/05/12 8:07 AM",
      "commitName": "aa60da6c2ec049cc70897afee6c368cb70493773",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "03/04/12 9:59 AM",
      "commitNameOld": "2b5c36b6952e16232f352b47c62d9e28ee2b30c9",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 34.92,
      "commitsBetweenForRepo": 263,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,26 @@\n   protected ContainerManager getCMProxy(ContainerId containerID,\n       final String containerManagerBindAddr, ContainerToken containerToken)\n       throws IOException {\n \n+    final InetSocketAddress cmAddr \u003d\n+        NetUtils.createSocketAddr(containerManagerBindAddr);\n     UserGroupInformation user \u003d UserGroupInformation.getCurrentUser();\n \n     if (UserGroupInformation.isSecurityEnabled()) {\n-      Token\u003cContainerTokenIdentifier\u003e token \u003d new Token\u003cContainerTokenIdentifier\u003e(\n-          containerToken.getIdentifier().array(), containerToken\n-              .getPassword().array(), new Text(containerToken.getKind()),\n-          new Text(containerToken.getService()));\n+      Token\u003cContainerTokenIdentifier\u003e token \u003d\n+          ProtoUtils.convertFromProtoFormat(containerToken, cmAddr);\n       // the user in createRemoteUser in this context has to be ContainerID\n       user \u003d UserGroupInformation.createRemoteUser(containerID.toString());\n       user.addToken(token);\n     }\n \n     ContainerManager proxy \u003d user\n         .doAs(new PrivilegedAction\u003cContainerManager\u003e() {\n           @Override\n           public ContainerManager run() {\n             return (ContainerManager) rpc.getProxy(ContainerManager.class,\n-                NetUtils.createSocketAddr(containerManagerBindAddr),\n-                getConfig());\n+                cmAddr, getConfig());\n           }\n         });\n     return proxy;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected ContainerManager getCMProxy(ContainerId containerID,\n      final String containerManagerBindAddr, ContainerToken containerToken)\n      throws IOException {\n\n    final InetSocketAddress cmAddr \u003d\n        NetUtils.createSocketAddr(containerManagerBindAddr);\n    UserGroupInformation user \u003d UserGroupInformation.getCurrentUser();\n\n    if (UserGroupInformation.isSecurityEnabled()) {\n      Token\u003cContainerTokenIdentifier\u003e token \u003d\n          ProtoUtils.convertFromProtoFormat(containerToken, cmAddr);\n      // the user in createRemoteUser in this context has to be ContainerID\n      user \u003d UserGroupInformation.createRemoteUser(containerID.toString());\n      user.addToken(token);\n    }\n\n    ContainerManager proxy \u003d user\n        .doAs(new PrivilegedAction\u003cContainerManager\u003e() {\n          @Override\n          public ContainerManager run() {\n            return (ContainerManager) rpc.getProxy(ContainerManager.class,\n                cmAddr, getConfig());\n          }\n        });\n    return proxy;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/launcher/ContainerLauncherImpl.java",
      "extendedDetails": {}
    },
    "239a5549eadeccb0ab433abb38079dbe19f862ff": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3616. Thread pool for launching containers in MR AM not expanding as expected. (Contributed by Vinod Kumar Vavilapalli) \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1229394 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/01/12 2:20 PM",
      "commitName": "239a5549eadeccb0ab433abb38079dbe19f862ff",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "16/11/11 7:37 AM",
      "commitNameOld": "00b50a5c94df63668b07ca1623c40fe7252f1322",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 54.28,
      "commitsBetweenForRepo": 276,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,27 @@\n   protected ContainerManager getCMProxy(ContainerId containerID,\n       final String containerManagerBindAddr, ContainerToken containerToken)\n       throws IOException {\n \n     UserGroupInformation user \u003d UserGroupInformation.getCurrentUser();\n \n-    this.allNodes.add(containerManagerBindAddr);\n-\n     if (UserGroupInformation.isSecurityEnabled()) {\n       Token\u003cContainerTokenIdentifier\u003e token \u003d new Token\u003cContainerTokenIdentifier\u003e(\n           containerToken.getIdentifier().array(), containerToken\n               .getPassword().array(), new Text(containerToken.getKind()),\n           new Text(containerToken.getService()));\n       // the user in createRemoteUser in this context has to be ContainerID\n       user \u003d UserGroupInformation.createRemoteUser(containerID.toString());\n       user.addToken(token);\n     }\n \n     ContainerManager proxy \u003d user\n         .doAs(new PrivilegedAction\u003cContainerManager\u003e() {\n           @Override\n           public ContainerManager run() {\n             return (ContainerManager) rpc.getProxy(ContainerManager.class,\n                 NetUtils.createSocketAddr(containerManagerBindAddr),\n                 getConfig());\n           }\n         });\n     return proxy;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected ContainerManager getCMProxy(ContainerId containerID,\n      final String containerManagerBindAddr, ContainerToken containerToken)\n      throws IOException {\n\n    UserGroupInformation user \u003d UserGroupInformation.getCurrentUser();\n\n    if (UserGroupInformation.isSecurityEnabled()) {\n      Token\u003cContainerTokenIdentifier\u003e token \u003d new Token\u003cContainerTokenIdentifier\u003e(\n          containerToken.getIdentifier().array(), containerToken\n              .getPassword().array(), new Text(containerToken.getKind()),\n          new Text(containerToken.getService()));\n      // the user in createRemoteUser in this context has to be ContainerID\n      user \u003d UserGroupInformation.createRemoteUser(containerID.toString());\n      user.addToken(token);\n    }\n\n    ContainerManager proxy \u003d user\n        .doAs(new PrivilegedAction\u003cContainerManager\u003e() {\n          @Override\n          public ContainerManager run() {\n            return (ContainerManager) rpc.getProxy(ContainerManager.class,\n                NetUtils.createSocketAddr(containerManagerBindAddr),\n                getConfig());\n          }\n        });\n    return proxy;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/launcher/ContainerLauncherImpl.java",
      "extendedDetails": {}
    },
    "2df83e5b4d7a3516a9c7ec11309023e3c42a869b": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3333. Fixed bugs in ContainerLauncher of MR AppMaster due to which per-container connections to NodeManager were lingering long enough to hit the ulimits on number of processes. (vinodkv)  \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1199751 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/11/11 5:41 AM",
      "commitName": "2df83e5b4d7a3516a9c7ec11309023e3c42a869b",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "29/10/11 2:35 AM",
      "commitNameOld": "7f4dc277572df6ba25fa961073b99a5bdb086c00",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 11.17,
      "commitsBetweenForRepo": 76,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,29 @@\n   protected ContainerManager getCMProxy(ContainerId containerID,\n       final String containerManagerBindAddr, ContainerToken containerToken)\n       throws IOException {\n \n     UserGroupInformation user \u003d UserGroupInformation.getCurrentUser();\n \n-    synchronized (this.clientCache) {\n+    this.allNodes.add(containerManagerBindAddr);\n \n-      if (this.clientCache.containsKey(containerID)) {\n-        return this.clientCache.get(containerID);\n-      }\n-\n-      this.allNodes.add(containerManagerBindAddr);\n-\n-      if (UserGroupInformation.isSecurityEnabled()) {\n-        Token\u003cContainerTokenIdentifier\u003e token \u003d new Token\u003cContainerTokenIdentifier\u003e(\n-            containerToken.getIdentifier().array(), containerToken\n-                .getPassword().array(), new Text(containerToken.getKind()),\n-            new Text(containerToken.getService()));\n-        // the user in createRemoteUser in this context has to be ContainerID\n-        user \u003d UserGroupInformation.createRemoteUser(containerID.toString());\n-        user.addToken(token);\n-      }\n-\n-      ContainerManager proxy \u003d user\n-          .doAs(new PrivilegedAction\u003cContainerManager\u003e() {\n-            @Override\n-            public ContainerManager run() {\n-              YarnRPC rpc \u003d YarnRPC.create(getConfig());\n-              return (ContainerManager) rpc.getProxy(ContainerManager.class,\n-                  NetUtils.createSocketAddr(containerManagerBindAddr),\n-                  getConfig());\n-            }\n-          });\n-      this.clientCache.put(containerID, proxy);\n-      return proxy;\n+    if (UserGroupInformation.isSecurityEnabled()) {\n+      Token\u003cContainerTokenIdentifier\u003e token \u003d new Token\u003cContainerTokenIdentifier\u003e(\n+          containerToken.getIdentifier().array(), containerToken\n+              .getPassword().array(), new Text(containerToken.getKind()),\n+          new Text(containerToken.getService()));\n+      // the user in createRemoteUser in this context has to be ContainerID\n+      user \u003d UserGroupInformation.createRemoteUser(containerID.toString());\n+      user.addToken(token);\n     }\n+\n+    ContainerManager proxy \u003d user\n+        .doAs(new PrivilegedAction\u003cContainerManager\u003e() {\n+          @Override\n+          public ContainerManager run() {\n+            return (ContainerManager) rpc.getProxy(ContainerManager.class,\n+                NetUtils.createSocketAddr(containerManagerBindAddr),\n+                getConfig());\n+          }\n+        });\n+    return proxy;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected ContainerManager getCMProxy(ContainerId containerID,\n      final String containerManagerBindAddr, ContainerToken containerToken)\n      throws IOException {\n\n    UserGroupInformation user \u003d UserGroupInformation.getCurrentUser();\n\n    this.allNodes.add(containerManagerBindAddr);\n\n    if (UserGroupInformation.isSecurityEnabled()) {\n      Token\u003cContainerTokenIdentifier\u003e token \u003d new Token\u003cContainerTokenIdentifier\u003e(\n          containerToken.getIdentifier().array(), containerToken\n              .getPassword().array(), new Text(containerToken.getKind()),\n          new Text(containerToken.getService()));\n      // the user in createRemoteUser in this context has to be ContainerID\n      user \u003d UserGroupInformation.createRemoteUser(containerID.toString());\n      user.addToken(token);\n    }\n\n    ContainerManager proxy \u003d user\n        .doAs(new PrivilegedAction\u003cContainerManager\u003e() {\n          @Override\n          public ContainerManager run() {\n            return (ContainerManager) rpc.getProxy(ContainerManager.class,\n                NetUtils.createSocketAddr(containerManagerBindAddr),\n                getConfig());\n          }\n        });\n    return proxy;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/launcher/ContainerLauncherImpl.java",
      "extendedDetails": {}
    },
    "7f4dc277572df6ba25fa961073b99a5bdb086c00": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-3256. Added authorization checks for the protocol between NodeManager and ApplicationMaster. Contributed by Vinod K V.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1194850 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/10/11 2:35 AM",
      "commitName": "7f4dc277572df6ba25fa961073b99a5bdb086c00",
      "commitAuthor": "Arun Murthy",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-3256. Added authorization checks for the protocol between NodeManager and ApplicationMaster. Contributed by Vinod K V.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1194850 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "29/10/11 2:35 AM",
          "commitName": "7f4dc277572df6ba25fa961073b99a5bdb086c00",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "27/10/11 10:32 AM",
          "commitNameOld": "724f21734316343873386a14059a347067d65a10",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 1.67,
          "commitsBetweenForRepo": 42,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,38 @@\n-  protected ContainerManager getCMProxy(\n+  protected ContainerManager getCMProxy(ContainerId containerID,\n       final String containerManagerBindAddr, ContainerToken containerToken)\n       throws IOException {\n \n     UserGroupInformation user \u003d UserGroupInformation.getCurrentUser();\n \n-    if (UserGroupInformation.isSecurityEnabled()) {\n+    synchronized (this.clientCache) {\n \n-      Token\u003cContainerTokenIdentifier\u003e token \u003d new Token\u003cContainerTokenIdentifier\u003e(\n-          containerToken.getIdentifier().array(), containerToken\n-              .getPassword().array(), new Text(containerToken.getKind()),\n-          new Text(containerToken.getService()));\n-      // the user in createRemoteUser in this context is not important\n-      UserGroupInformation ugi \u003d UserGroupInformation\n-          .createRemoteUser(containerManagerBindAddr);\n-      ugi.addToken(token);\n-      ugiMap.putIfAbsent(containerManagerBindAddr, ugi);\n+      if (this.clientCache.containsKey(containerID)) {\n+        return this.clientCache.get(containerID);\n+      }\n \n-      user \u003d ugiMap.get(containerManagerBindAddr);    \n+      this.allNodes.add(containerManagerBindAddr);\n+\n+      if (UserGroupInformation.isSecurityEnabled()) {\n+        Token\u003cContainerTokenIdentifier\u003e token \u003d new Token\u003cContainerTokenIdentifier\u003e(\n+            containerToken.getIdentifier().array(), containerToken\n+                .getPassword().array(), new Text(containerToken.getKind()),\n+            new Text(containerToken.getService()));\n+        // the user in createRemoteUser in this context has to be ContainerID\n+        user \u003d UserGroupInformation.createRemoteUser(containerID.toString());\n+        user.addToken(token);\n+      }\n+\n+      ContainerManager proxy \u003d user\n+          .doAs(new PrivilegedAction\u003cContainerManager\u003e() {\n+            @Override\n+            public ContainerManager run() {\n+              YarnRPC rpc \u003d YarnRPC.create(getConfig());\n+              return (ContainerManager) rpc.getProxy(ContainerManager.class,\n+                  NetUtils.createSocketAddr(containerManagerBindAddr),\n+                  getConfig());\n+            }\n+          });\n+      this.clientCache.put(containerID, proxy);\n+      return proxy;\n     }\n-    ContainerManager proxy \u003d\n-        user.doAs(new PrivilegedAction\u003cContainerManager\u003e() {\n-          @Override\n-          public ContainerManager run() {\n-            YarnRPC rpc \u003d YarnRPC.create(getConfig());\n-            return (ContainerManager) rpc.getProxy(ContainerManager.class,\n-                NetUtils.createSocketAddr(containerManagerBindAddr),\n-                getConfig());\n-          }\n-        });\n-    return proxy;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected ContainerManager getCMProxy(ContainerId containerID,\n      final String containerManagerBindAddr, ContainerToken containerToken)\n      throws IOException {\n\n    UserGroupInformation user \u003d UserGroupInformation.getCurrentUser();\n\n    synchronized (this.clientCache) {\n\n      if (this.clientCache.containsKey(containerID)) {\n        return this.clientCache.get(containerID);\n      }\n\n      this.allNodes.add(containerManagerBindAddr);\n\n      if (UserGroupInformation.isSecurityEnabled()) {\n        Token\u003cContainerTokenIdentifier\u003e token \u003d new Token\u003cContainerTokenIdentifier\u003e(\n            containerToken.getIdentifier().array(), containerToken\n                .getPassword().array(), new Text(containerToken.getKind()),\n            new Text(containerToken.getService()));\n        // the user in createRemoteUser in this context has to be ContainerID\n        user \u003d UserGroupInformation.createRemoteUser(containerID.toString());\n        user.addToken(token);\n      }\n\n      ContainerManager proxy \u003d user\n          .doAs(new PrivilegedAction\u003cContainerManager\u003e() {\n            @Override\n            public ContainerManager run() {\n              YarnRPC rpc \u003d YarnRPC.create(getConfig());\n              return (ContainerManager) rpc.getProxy(ContainerManager.class,\n                  NetUtils.createSocketAddr(containerManagerBindAddr),\n                  getConfig());\n            }\n          });\n      this.clientCache.put(containerID, proxy);\n      return proxy;\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/launcher/ContainerLauncherImpl.java",
          "extendedDetails": {
            "oldValue": "[containerManagerBindAddr-String(modifiers-final), containerToken-ContainerToken]",
            "newValue": "[containerID-ContainerId, containerManagerBindAddr-String(modifiers-final), containerToken-ContainerToken]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-3256. Added authorization checks for the protocol between NodeManager and ApplicationMaster. Contributed by Vinod K V.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1194850 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "29/10/11 2:35 AM",
          "commitName": "7f4dc277572df6ba25fa961073b99a5bdb086c00",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "27/10/11 10:32 AM",
          "commitNameOld": "724f21734316343873386a14059a347067d65a10",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 1.67,
          "commitsBetweenForRepo": 42,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,38 @@\n-  protected ContainerManager getCMProxy(\n+  protected ContainerManager getCMProxy(ContainerId containerID,\n       final String containerManagerBindAddr, ContainerToken containerToken)\n       throws IOException {\n \n     UserGroupInformation user \u003d UserGroupInformation.getCurrentUser();\n \n-    if (UserGroupInformation.isSecurityEnabled()) {\n+    synchronized (this.clientCache) {\n \n-      Token\u003cContainerTokenIdentifier\u003e token \u003d new Token\u003cContainerTokenIdentifier\u003e(\n-          containerToken.getIdentifier().array(), containerToken\n-              .getPassword().array(), new Text(containerToken.getKind()),\n-          new Text(containerToken.getService()));\n-      // the user in createRemoteUser in this context is not important\n-      UserGroupInformation ugi \u003d UserGroupInformation\n-          .createRemoteUser(containerManagerBindAddr);\n-      ugi.addToken(token);\n-      ugiMap.putIfAbsent(containerManagerBindAddr, ugi);\n+      if (this.clientCache.containsKey(containerID)) {\n+        return this.clientCache.get(containerID);\n+      }\n \n-      user \u003d ugiMap.get(containerManagerBindAddr);    \n+      this.allNodes.add(containerManagerBindAddr);\n+\n+      if (UserGroupInformation.isSecurityEnabled()) {\n+        Token\u003cContainerTokenIdentifier\u003e token \u003d new Token\u003cContainerTokenIdentifier\u003e(\n+            containerToken.getIdentifier().array(), containerToken\n+                .getPassword().array(), new Text(containerToken.getKind()),\n+            new Text(containerToken.getService()));\n+        // the user in createRemoteUser in this context has to be ContainerID\n+        user \u003d UserGroupInformation.createRemoteUser(containerID.toString());\n+        user.addToken(token);\n+      }\n+\n+      ContainerManager proxy \u003d user\n+          .doAs(new PrivilegedAction\u003cContainerManager\u003e() {\n+            @Override\n+            public ContainerManager run() {\n+              YarnRPC rpc \u003d YarnRPC.create(getConfig());\n+              return (ContainerManager) rpc.getProxy(ContainerManager.class,\n+                  NetUtils.createSocketAddr(containerManagerBindAddr),\n+                  getConfig());\n+            }\n+          });\n+      this.clientCache.put(containerID, proxy);\n+      return proxy;\n     }\n-    ContainerManager proxy \u003d\n-        user.doAs(new PrivilegedAction\u003cContainerManager\u003e() {\n-          @Override\n-          public ContainerManager run() {\n-            YarnRPC rpc \u003d YarnRPC.create(getConfig());\n-            return (ContainerManager) rpc.getProxy(ContainerManager.class,\n-                NetUtils.createSocketAddr(containerManagerBindAddr),\n-                getConfig());\n-          }\n-        });\n-    return proxy;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected ContainerManager getCMProxy(ContainerId containerID,\n      final String containerManagerBindAddr, ContainerToken containerToken)\n      throws IOException {\n\n    UserGroupInformation user \u003d UserGroupInformation.getCurrentUser();\n\n    synchronized (this.clientCache) {\n\n      if (this.clientCache.containsKey(containerID)) {\n        return this.clientCache.get(containerID);\n      }\n\n      this.allNodes.add(containerManagerBindAddr);\n\n      if (UserGroupInformation.isSecurityEnabled()) {\n        Token\u003cContainerTokenIdentifier\u003e token \u003d new Token\u003cContainerTokenIdentifier\u003e(\n            containerToken.getIdentifier().array(), containerToken\n                .getPassword().array(), new Text(containerToken.getKind()),\n            new Text(containerToken.getService()));\n        // the user in createRemoteUser in this context has to be ContainerID\n        user \u003d UserGroupInformation.createRemoteUser(containerID.toString());\n        user.addToken(token);\n      }\n\n      ContainerManager proxy \u003d user\n          .doAs(new PrivilegedAction\u003cContainerManager\u003e() {\n            @Override\n            public ContainerManager run() {\n              YarnRPC rpc \u003d YarnRPC.create(getConfig());\n              return (ContainerManager) rpc.getProxy(ContainerManager.class,\n                  NetUtils.createSocketAddr(containerManagerBindAddr),\n                  getConfig());\n            }\n          });\n      this.clientCache.put(containerID, proxy);\n      return proxy;\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/launcher/ContainerLauncherImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "724f21734316343873386a14059a347067d65a10": {
      "type": "Yparameterchange",
      "commitMessage": "MAPREDUCE-3228. Fixed MR AM to timeout RPCs to bad NodeManagers. Contributed by Vinod K V.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1189879 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/10/11 10:32 AM",
      "commitName": "724f21734316343873386a14059a347067d65a10",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "26/10/11 11:24 PM",
      "commitNameOld": "db8ac0ec3cbec046f9cf32644c16fd2a51dd85a2",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.46,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n-  protected ContainerManager getCMProxy(ContainerId containerID,\n+  protected ContainerManager getCMProxy(\n       final String containerManagerBindAddr, ContainerToken containerToken)\n       throws IOException {\n \n     UserGroupInformation user \u003d UserGroupInformation.getCurrentUser();\n \n     if (UserGroupInformation.isSecurityEnabled()) {\n \n       Token\u003cContainerTokenIdentifier\u003e token \u003d new Token\u003cContainerTokenIdentifier\u003e(\n           containerToken.getIdentifier().array(), containerToken\n               .getPassword().array(), new Text(containerToken.getKind()),\n           new Text(containerToken.getService()));\n       // the user in createRemoteUser in this context is not important\n       UserGroupInformation ugi \u003d UserGroupInformation\n           .createRemoteUser(containerManagerBindAddr);\n       ugi.addToken(token);\n       ugiMap.putIfAbsent(containerManagerBindAddr, ugi);\n \n       user \u003d ugiMap.get(containerManagerBindAddr);    \n     }\n     ContainerManager proxy \u003d\n         user.doAs(new PrivilegedAction\u003cContainerManager\u003e() {\n           @Override\n           public ContainerManager run() {\n             YarnRPC rpc \u003d YarnRPC.create(getConfig());\n             return (ContainerManager) rpc.getProxy(ContainerManager.class,\n                 NetUtils.createSocketAddr(containerManagerBindAddr),\n                 getConfig());\n           }\n         });\n     return proxy;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected ContainerManager getCMProxy(\n      final String containerManagerBindAddr, ContainerToken containerToken)\n      throws IOException {\n\n    UserGroupInformation user \u003d UserGroupInformation.getCurrentUser();\n\n    if (UserGroupInformation.isSecurityEnabled()) {\n\n      Token\u003cContainerTokenIdentifier\u003e token \u003d new Token\u003cContainerTokenIdentifier\u003e(\n          containerToken.getIdentifier().array(), containerToken\n              .getPassword().array(), new Text(containerToken.getKind()),\n          new Text(containerToken.getService()));\n      // the user in createRemoteUser in this context is not important\n      UserGroupInformation ugi \u003d UserGroupInformation\n          .createRemoteUser(containerManagerBindAddr);\n      ugi.addToken(token);\n      ugiMap.putIfAbsent(containerManagerBindAddr, ugi);\n\n      user \u003d ugiMap.get(containerManagerBindAddr);    \n    }\n    ContainerManager proxy \u003d\n        user.doAs(new PrivilegedAction\u003cContainerManager\u003e() {\n          @Override\n          public ContainerManager run() {\n            YarnRPC rpc \u003d YarnRPC.create(getConfig());\n            return (ContainerManager) rpc.getProxy(ContainerManager.class,\n                NetUtils.createSocketAddr(containerManagerBindAddr),\n                getConfig());\n          }\n        });\n    return proxy;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/launcher/ContainerLauncherImpl.java",
      "extendedDetails": {
        "oldValue": "[containerID-ContainerId, containerManagerBindAddr-String(modifiers-final), containerToken-ContainerToken]",
        "newValue": "[containerManagerBindAddr-String(modifiers-final), containerToken-ContainerToken]"
      }
    },
    "88ff272cfd2544a8436b2e7bdbf783ed425725d4": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2995. Fixed race condition in ContainerLauncher. Contributed by Vinod K V.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1170281 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/09/11 11:15 AM",
      "commitName": "88ff272cfd2544a8436b2e7bdbf783ed425725d4",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "08/09/11 6:44 PM",
      "commitNameOld": "fafe8cd28e726566509c679e19d7da622f29f90d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 4.69,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,32 @@\n   protected ContainerManager getCMProxy(ContainerId containerID,\n       final String containerManagerBindAddr, ContainerToken containerToken)\n       throws IOException {\n \n     UserGroupInformation user \u003d UserGroupInformation.getCurrentUser();\n \n-    // TODO: Synchronization problems!!\n     if (UserGroupInformation.isSecurityEnabled()) {\n-      if(!ugiMap.containsKey(containerManagerBindAddr)) {\n-        Token\u003cContainerTokenIdentifier\u003e token \u003d\n-          new Token\u003cContainerTokenIdentifier\u003e(\n-              containerToken.getIdentifier().array(),\n-              containerToken.getPassword().array(), new Text(\n-                  containerToken.getKind()), new Text(\n-                      containerToken.getService()));\n-        //the user in createRemoteUser in this context is not important\n-        user \u003d UserGroupInformation.createRemoteUser(containerManagerBindAddr);\n-        user.addToken(token);\n-        ugiMap.put(containerManagerBindAddr, user);\n-      } else {\n-        user \u003d ugiMap.get(containerManagerBindAddr);    \n-      }\n+\n+      Token\u003cContainerTokenIdentifier\u003e token \u003d new Token\u003cContainerTokenIdentifier\u003e(\n+          containerToken.getIdentifier().array(), containerToken\n+              .getPassword().array(), new Text(containerToken.getKind()),\n+          new Text(containerToken.getService()));\n+      // the user in createRemoteUser in this context is not important\n+      UserGroupInformation ugi \u003d UserGroupInformation\n+          .createRemoteUser(containerManagerBindAddr);\n+      ugi.addToken(token);\n+      ugiMap.putIfAbsent(containerManagerBindAddr, ugi);\n+\n+      user \u003d ugiMap.get(containerManagerBindAddr);    \n     }\n     ContainerManager proxy \u003d\n         user.doAs(new PrivilegedAction\u003cContainerManager\u003e() {\n           @Override\n           public ContainerManager run() {\n             YarnRPC rpc \u003d YarnRPC.create(getConfig());\n             return (ContainerManager) rpc.getProxy(ContainerManager.class,\n                 NetUtils.createSocketAddr(containerManagerBindAddr),\n                 getConfig());\n           }\n         });\n     return proxy;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected ContainerManager getCMProxy(ContainerId containerID,\n      final String containerManagerBindAddr, ContainerToken containerToken)\n      throws IOException {\n\n    UserGroupInformation user \u003d UserGroupInformation.getCurrentUser();\n\n    if (UserGroupInformation.isSecurityEnabled()) {\n\n      Token\u003cContainerTokenIdentifier\u003e token \u003d new Token\u003cContainerTokenIdentifier\u003e(\n          containerToken.getIdentifier().array(), containerToken\n              .getPassword().array(), new Text(containerToken.getKind()),\n          new Text(containerToken.getService()));\n      // the user in createRemoteUser in this context is not important\n      UserGroupInformation ugi \u003d UserGroupInformation\n          .createRemoteUser(containerManagerBindAddr);\n      ugi.addToken(token);\n      ugiMap.putIfAbsent(containerManagerBindAddr, ugi);\n\n      user \u003d ugiMap.get(containerManagerBindAddr);    \n    }\n    ContainerManager proxy \u003d\n        user.doAs(new PrivilegedAction\u003cContainerManager\u003e() {\n          @Override\n          public ContainerManager run() {\n            YarnRPC rpc \u003d YarnRPC.create(getConfig());\n            return (ContainerManager) rpc.getProxy(ContainerManager.class,\n                NetUtils.createSocketAddr(containerManagerBindAddr),\n                getConfig());\n          }\n        });\n    return proxy;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/launcher/ContainerLauncherImpl.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected ContainerManager getCMProxy(ContainerId containerID,\n      final String containerManagerBindAddr, ContainerToken containerToken)\n      throws IOException {\n\n    UserGroupInformation user \u003d UserGroupInformation.getCurrentUser();\n\n    // TODO: Synchronization problems!!\n    if (UserGroupInformation.isSecurityEnabled()) {\n      if(!ugiMap.containsKey(containerManagerBindAddr)) {\n        Token\u003cContainerTokenIdentifier\u003e token \u003d\n          new Token\u003cContainerTokenIdentifier\u003e(\n              containerToken.getIdentifier().array(),\n              containerToken.getPassword().array(), new Text(\n                  containerToken.getKind()), new Text(\n                      containerToken.getService()));\n        //the user in createRemoteUser in this context is not important\n        user \u003d UserGroupInformation.createRemoteUser(containerManagerBindAddr);\n        user.addToken(token);\n        ugiMap.put(containerManagerBindAddr, user);\n      } else {\n        user \u003d ugiMap.get(containerManagerBindAddr);    \n      }\n    }\n    ContainerManager proxy \u003d\n        user.doAs(new PrivilegedAction\u003cContainerManager\u003e() {\n          @Override\n          public ContainerManager run() {\n            YarnRPC rpc \u003d YarnRPC.create(getConfig());\n            return (ContainerManager) rpc.getProxy(ContainerManager.class,\n                NetUtils.createSocketAddr(containerManagerBindAddr),\n                getConfig());\n          }\n        });\n    return proxy;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/launcher/ContainerLauncherImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/launcher/ContainerLauncherImpl.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/launcher/ContainerLauncherImpl.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,35 @@\n+  protected ContainerManager getCMProxy(ContainerId containerID,\n+      final String containerManagerBindAddr, ContainerToken containerToken)\n+      throws IOException {\n+\n+    UserGroupInformation user \u003d UserGroupInformation.getCurrentUser();\n+\n+    // TODO: Synchronization problems!!\n+    if (UserGroupInformation.isSecurityEnabled()) {\n+      if(!ugiMap.containsKey(containerManagerBindAddr)) {\n+        Token\u003cContainerTokenIdentifier\u003e token \u003d\n+          new Token\u003cContainerTokenIdentifier\u003e(\n+              containerToken.getIdentifier().array(),\n+              containerToken.getPassword().array(), new Text(\n+                  containerToken.getKind()), new Text(\n+                      containerToken.getService()));\n+        //the user in createRemoteUser in this context is not important\n+        user \u003d UserGroupInformation.createRemoteUser(containerManagerBindAddr);\n+        user.addToken(token);\n+        ugiMap.put(containerManagerBindAddr, user);\n+      } else {\n+        user \u003d ugiMap.get(containerManagerBindAddr);    \n+      }\n+    }\n+    ContainerManager proxy \u003d\n+        user.doAs(new PrivilegedAction\u003cContainerManager\u003e() {\n+          @Override\n+          public ContainerManager run() {\n+            YarnRPC rpc \u003d YarnRPC.create(getConfig());\n+            return (ContainerManager) rpc.getProxy(ContainerManager.class,\n+                NetUtils.createSocketAddr(containerManagerBindAddr),\n+                getConfig());\n+          }\n+        });\n+    return proxy;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected ContainerManager getCMProxy(ContainerId containerID,\n      final String containerManagerBindAddr, ContainerToken containerToken)\n      throws IOException {\n\n    UserGroupInformation user \u003d UserGroupInformation.getCurrentUser();\n\n    // TODO: Synchronization problems!!\n    if (UserGroupInformation.isSecurityEnabled()) {\n      if(!ugiMap.containsKey(containerManagerBindAddr)) {\n        Token\u003cContainerTokenIdentifier\u003e token \u003d\n          new Token\u003cContainerTokenIdentifier\u003e(\n              containerToken.getIdentifier().array(),\n              containerToken.getPassword().array(), new Text(\n                  containerToken.getKind()), new Text(\n                      containerToken.getService()));\n        //the user in createRemoteUser in this context is not important\n        user \u003d UserGroupInformation.createRemoteUser(containerManagerBindAddr);\n        user.addToken(token);\n        ugiMap.put(containerManagerBindAddr, user);\n      } else {\n        user \u003d ugiMap.get(containerManagerBindAddr);    \n      }\n    }\n    ContainerManager proxy \u003d\n        user.doAs(new PrivilegedAction\u003cContainerManager\u003e() {\n          @Override\n          public ContainerManager run() {\n            YarnRPC rpc \u003d YarnRPC.create(getConfig());\n            return (ContainerManager) rpc.getProxy(ContainerManager.class,\n                NetUtils.createSocketAddr(containerManagerBindAddr),\n                getConfig());\n          }\n        });\n    return proxy;\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/launcher/ContainerLauncherImpl.java"
    }
  }
}