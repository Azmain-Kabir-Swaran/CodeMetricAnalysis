{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NMCollectorService.java",
  "functionName": "reportNewCollectorInfo",
  "functionId": "reportNewCollectorInfo___request-ReportNewCollectorInfoRequest",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/collectormanager/NMCollectorService.java",
  "functionStartLine": 114,
  "functionEndLine": 144,
  "numCommitsSeen": 13,
  "timeTaken": 2739,
  "changeHistory": [
    "78b7e070d8009c78665a2baa64fe888788f53e69",
    "84c35ac6c4a76c31d9bf9c87b87ed29394564611",
    "89e5c44f9e891a3579384c3fa3766937cd4970f1",
    "5712b8f9fd1859fe046b482889239bd164ed7dab",
    "d67c9bdb4db2b075484a779802ecf3296bad5cd4",
    "2188a07e5bea1da26bf679ca0ece26ab596d3438"
  ],
  "changeHistoryShort": {
    "78b7e070d8009c78665a2baa64fe888788f53e69": "Ybodychange",
    "84c35ac6c4a76c31d9bf9c87b87ed29394564611": "Ybodychange",
    "89e5c44f9e891a3579384c3fa3766937cd4970f1": "Ybodychange",
    "5712b8f9fd1859fe046b482889239bd164ed7dab": "Ybodychange",
    "d67c9bdb4db2b075484a779802ecf3296bad5cd4": "Yexceptionschange",
    "2188a07e5bea1da26bf679ca0ece26ab596d3438": "Yintroduced"
  },
  "changeHistoryDetails": {
    "78b7e070d8009c78665a2baa64fe888788f53e69": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5638. Introduce a collector timestamp to uniquely identify collectors creation order in collector discovery. Contributed by Li Lu.\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "78b7e070d8009c78665a2baa64fe888788f53e69",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "22/08/17 1:14 AM",
      "commitNameOld": "d5ff57a08fac983f8b5d201064ce07945f0f216e",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 7.91,
      "commitsBetweenForRepo": 51,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,31 @@\n   public ReportNewCollectorInfoResponse reportNewCollectorInfo(\n       ReportNewCollectorInfoRequest request) throws YarnException, IOException {\n-    List\u003cAppCollectorsMap\u003e newCollectorsList \u003d request.getAppCollectorsList();\n+    List\u003cAppCollectorData\u003e newCollectorsList \u003d request.getAppCollectorsList();\n     if (newCollectorsList !\u003d null \u0026\u0026 !newCollectorsList.isEmpty()) {\n-      Map\u003cApplicationId, String\u003e newCollectorsMap \u003d\n-          new HashMap\u003cApplicationId, String\u003e();\n-      for (AppCollectorsMap collector : newCollectorsList) {\n+      Map\u003cApplicationId, AppCollectorData\u003e newCollectorsMap \u003d\n+          new HashMap\u003c\u003e();\n+      for (AppCollectorData collector : newCollectorsList) {\n         ApplicationId appId \u003d collector.getApplicationId();\n-        String collectorAddr \u003d collector.getCollectorAddr();\n-        newCollectorsMap.put(appId, collectorAddr);\n+        newCollectorsMap.put(appId, collector);\n         // set registered collector address to TimelineClient.\n+        // TODO: Do we need to do this after we received confirmation from\n+        // the RM?\n         NMTimelinePublisher nmTimelinePublisher \u003d\n             context.getNMTimelinePublisher();\n         if (nmTimelinePublisher !\u003d null) {\n-          nmTimelinePublisher.setTimelineServiceAddress(appId, collectorAddr);\n+          nmTimelinePublisher.setTimelineServiceAddress(appId,\n+              collector.getCollectorAddr());\n         }\n       }\n-      ((NodeManager.NMContext)context).addRegisteredCollectors(\n-          newCollectorsMap);\n+      Map\u003cApplicationId, AppCollectorData\u003e registeringCollectors\n+          \u003d context.getRegisteringCollectors();\n+      if (registeringCollectors !\u003d null) {\n+        registeringCollectors.putAll(newCollectorsMap);\n+      } else {\n+        LOG.warn(\"collectors are added when the registered collectors are \" +\n+            \"initialized\");\n+      }\n     }\n \n     return ReportNewCollectorInfoResponse.newInstance();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ReportNewCollectorInfoResponse reportNewCollectorInfo(\n      ReportNewCollectorInfoRequest request) throws YarnException, IOException {\n    List\u003cAppCollectorData\u003e newCollectorsList \u003d request.getAppCollectorsList();\n    if (newCollectorsList !\u003d null \u0026\u0026 !newCollectorsList.isEmpty()) {\n      Map\u003cApplicationId, AppCollectorData\u003e newCollectorsMap \u003d\n          new HashMap\u003c\u003e();\n      for (AppCollectorData collector : newCollectorsList) {\n        ApplicationId appId \u003d collector.getApplicationId();\n        newCollectorsMap.put(appId, collector);\n        // set registered collector address to TimelineClient.\n        // TODO: Do we need to do this after we received confirmation from\n        // the RM?\n        NMTimelinePublisher nmTimelinePublisher \u003d\n            context.getNMTimelinePublisher();\n        if (nmTimelinePublisher !\u003d null) {\n          nmTimelinePublisher.setTimelineServiceAddress(appId,\n              collector.getCollectorAddr());\n        }\n      }\n      Map\u003cApplicationId, AppCollectorData\u003e registeringCollectors\n          \u003d context.getRegisteringCollectors();\n      if (registeringCollectors !\u003d null) {\n        registeringCollectors.putAll(newCollectorsMap);\n      } else {\n        LOG.warn(\"collectors are added when the registered collectors are \" +\n            \"initialized\");\n      }\n    }\n\n    return ReportNewCollectorInfoResponse.newInstance();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/collectormanager/NMCollectorService.java",
      "extendedDetails": {}
    },
    "84c35ac6c4a76c31d9bf9c87b87ed29394564611": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4711. NM is going down with NPE\u0027s due to single thread processing of events by Timeline client (Naganarasimha G R via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "84c35ac6c4a76c31d9bf9c87b87ed29394564611",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "960af7d4717b8a8949d0b2e43949e7daab45aa88",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   public ReportNewCollectorInfoResponse reportNewCollectorInfo(\n       ReportNewCollectorInfoRequest request) throws YarnException, IOException {\n     List\u003cAppCollectorsMap\u003e newCollectorsList \u003d request.getAppCollectorsList();\n     if (newCollectorsList !\u003d null \u0026\u0026 !newCollectorsList.isEmpty()) {\n       Map\u003cApplicationId, String\u003e newCollectorsMap \u003d\n           new HashMap\u003cApplicationId, String\u003e();\n       for (AppCollectorsMap collector : newCollectorsList) {\n         ApplicationId appId \u003d collector.getApplicationId();\n         String collectorAddr \u003d collector.getCollectorAddr();\n         newCollectorsMap.put(appId, collectorAddr);\n         // set registered collector address to TimelineClient.\n-        TimelineClient client \u003d\n-            context.getApplications().get(appId).getTimelineClient();\n-        if (client !\u003d null) {\n-          client.setTimelineServiceAddress(collectorAddr);\n+        NMTimelinePublisher nmTimelinePublisher \u003d\n+            context.getNMTimelinePublisher();\n+        if (nmTimelinePublisher !\u003d null) {\n+          nmTimelinePublisher.setTimelineServiceAddress(appId, collectorAddr);\n         }\n       }\n       ((NodeManager.NMContext)context).addRegisteredCollectors(\n           newCollectorsMap);\n     }\n \n     return ReportNewCollectorInfoResponse.newInstance();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ReportNewCollectorInfoResponse reportNewCollectorInfo(\n      ReportNewCollectorInfoRequest request) throws YarnException, IOException {\n    List\u003cAppCollectorsMap\u003e newCollectorsList \u003d request.getAppCollectorsList();\n    if (newCollectorsList !\u003d null \u0026\u0026 !newCollectorsList.isEmpty()) {\n      Map\u003cApplicationId, String\u003e newCollectorsMap \u003d\n          new HashMap\u003cApplicationId, String\u003e();\n      for (AppCollectorsMap collector : newCollectorsList) {\n        ApplicationId appId \u003d collector.getApplicationId();\n        String collectorAddr \u003d collector.getCollectorAddr();\n        newCollectorsMap.put(appId, collectorAddr);\n        // set registered collector address to TimelineClient.\n        NMTimelinePublisher nmTimelinePublisher \u003d\n            context.getNMTimelinePublisher();\n        if (nmTimelinePublisher !\u003d null) {\n          nmTimelinePublisher.setTimelineServiceAddress(appId, collectorAddr);\n        }\n      }\n      ((NodeManager.NMContext)context).addRegisteredCollectors(\n          newCollectorsMap);\n    }\n\n    return ReportNewCollectorInfoResponse.newInstance();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/collectormanager/NMCollectorService.java",
      "extendedDetails": {}
    },
    "89e5c44f9e891a3579384c3fa3766937cd4970f1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4356. Ensure the timeline service v.2 is disabled cleanly and has no\nimpact when it\u0027s turned off. Contributed by Sangjin Lee.\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "89e5c44f9e891a3579384c3fa3766937cd4970f1",
      "commitAuthor": "Li Lu",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "d275677e240cca469a4cec3dc7238e3f18b3f7e9",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n   public ReportNewCollectorInfoResponse reportNewCollectorInfo(\n       ReportNewCollectorInfoRequest request) throws YarnException, IOException {\n     List\u003cAppCollectorsMap\u003e newCollectorsList \u003d request.getAppCollectorsList();\n     if (newCollectorsList !\u003d null \u0026\u0026 !newCollectorsList.isEmpty()) {\n       Map\u003cApplicationId, String\u003e newCollectorsMap \u003d\n           new HashMap\u003cApplicationId, String\u003e();\n       for (AppCollectorsMap collector : newCollectorsList) {\n         ApplicationId appId \u003d collector.getApplicationId();\n         String collectorAddr \u003d collector.getCollectorAddr();\n         newCollectorsMap.put(appId, collectorAddr);\n         // set registered collector address to TimelineClient.\n-        if (YarnConfiguration.systemMetricsPublisherEnabled(context.getConf())) {\n-          TimelineClient client \u003d \n-              context.getApplications().get(appId).getTimelineClient();\n+        TimelineClient client \u003d\n+            context.getApplications().get(appId).getTimelineClient();\n+        if (client !\u003d null) {\n           client.setTimelineServiceAddress(collectorAddr);\n         }\n       }\n       ((NodeManager.NMContext)context).addRegisteredCollectors(newCollectorsMap);\n     }\n \n     return ReportNewCollectorInfoResponse.newInstance();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ReportNewCollectorInfoResponse reportNewCollectorInfo(\n      ReportNewCollectorInfoRequest request) throws YarnException, IOException {\n    List\u003cAppCollectorsMap\u003e newCollectorsList \u003d request.getAppCollectorsList();\n    if (newCollectorsList !\u003d null \u0026\u0026 !newCollectorsList.isEmpty()) {\n      Map\u003cApplicationId, String\u003e newCollectorsMap \u003d\n          new HashMap\u003cApplicationId, String\u003e();\n      for (AppCollectorsMap collector : newCollectorsList) {\n        ApplicationId appId \u003d collector.getApplicationId();\n        String collectorAddr \u003d collector.getCollectorAddr();\n        newCollectorsMap.put(appId, collectorAddr);\n        // set registered collector address to TimelineClient.\n        TimelineClient client \u003d\n            context.getApplications().get(appId).getTimelineClient();\n        if (client !\u003d null) {\n          client.setTimelineServiceAddress(collectorAddr);\n        }\n      }\n      ((NodeManager.NMContext)context).addRegisteredCollectors(newCollectorsMap);\n    }\n\n    return ReportNewCollectorInfoResponse.newInstance();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/collectormanager/NMCollectorService.java",
      "extendedDetails": {}
    },
    "5712b8f9fd1859fe046b482889239bd164ed7dab": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3334. NM uses timeline client to publish container metrics to new timeline service. Contributed by Junping Du.\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "5712b8f9fd1859fe046b482889239bd164ed7dab",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "d67c9bdb4db2b075484a779802ecf3296bad5cd4",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,22 @@\n   public ReportNewCollectorInfoResponse reportNewCollectorInfo(\n       ReportNewCollectorInfoRequest request) throws YarnException, IOException {\n     List\u003cAppCollectorsMap\u003e newCollectorsList \u003d request.getAppCollectorsList();\n     if (newCollectorsList !\u003d null \u0026\u0026 !newCollectorsList.isEmpty()) {\n       Map\u003cApplicationId, String\u003e newCollectorsMap \u003d\n           new HashMap\u003cApplicationId, String\u003e();\n       for (AppCollectorsMap collector : newCollectorsList) {\n-        newCollectorsMap.put(collector.getApplicationId(), collector.getCollectorAddr());\n+        ApplicationId appId \u003d collector.getApplicationId();\n+        String collectorAddr \u003d collector.getCollectorAddr();\n+        newCollectorsMap.put(appId, collectorAddr);\n+        // set registered collector address to TimelineClient.\n+        if (YarnConfiguration.systemMetricsPublisherEnabled(context.getConf())) {\n+          TimelineClient client \u003d \n+              context.getApplications().get(appId).getTimelineClient();\n+          client.setTimelineServiceAddress(collectorAddr);\n+        }\n       }\n       ((NodeManager.NMContext)context).addRegisteredCollectors(newCollectorsMap);\n     }\n \n     return ReportNewCollectorInfoResponse.newInstance();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ReportNewCollectorInfoResponse reportNewCollectorInfo(\n      ReportNewCollectorInfoRequest request) throws YarnException, IOException {\n    List\u003cAppCollectorsMap\u003e newCollectorsList \u003d request.getAppCollectorsList();\n    if (newCollectorsList !\u003d null \u0026\u0026 !newCollectorsList.isEmpty()) {\n      Map\u003cApplicationId, String\u003e newCollectorsMap \u003d\n          new HashMap\u003cApplicationId, String\u003e();\n      for (AppCollectorsMap collector : newCollectorsList) {\n        ApplicationId appId \u003d collector.getApplicationId();\n        String collectorAddr \u003d collector.getCollectorAddr();\n        newCollectorsMap.put(appId, collectorAddr);\n        // set registered collector address to TimelineClient.\n        if (YarnConfiguration.systemMetricsPublisherEnabled(context.getConf())) {\n          TimelineClient client \u003d \n              context.getApplications().get(appId).getTimelineClient();\n          client.setTimelineServiceAddress(collectorAddr);\n        }\n      }\n      ((NodeManager.NMContext)context).addRegisteredCollectors(newCollectorsMap);\n    }\n\n    return ReportNewCollectorInfoResponse.newInstance();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/collectormanager/NMCollectorService.java",
      "extendedDetails": {}
    },
    "d67c9bdb4db2b075484a779802ecf3296bad5cd4": {
      "type": "Yexceptionschange",
      "commitMessage": "YARN-3040. Make putEntities operation be aware of the app\u0027s context. Contributed by Zhijie Shen\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "d67c9bdb4db2b075484a779802ecf3296bad5cd4",
      "commitAuthor": "Junping Du",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "2188a07e5bea1da26bf679ca0ece26ab596d3438",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,14 @@\n   public ReportNewCollectorInfoResponse reportNewCollectorInfo(\n-      ReportNewCollectorInfoRequest request) throws IOException {\n+      ReportNewCollectorInfoRequest request) throws YarnException, IOException {\n     List\u003cAppCollectorsMap\u003e newCollectorsList \u003d request.getAppCollectorsList();\n     if (newCollectorsList !\u003d null \u0026\u0026 !newCollectorsList.isEmpty()) {\n       Map\u003cApplicationId, String\u003e newCollectorsMap \u003d\n           new HashMap\u003cApplicationId, String\u003e();\n       for (AppCollectorsMap collector : newCollectorsList) {\n         newCollectorsMap.put(collector.getApplicationId(), collector.getCollectorAddr());\n       }\n       ((NodeManager.NMContext)context).addRegisteredCollectors(newCollectorsMap);\n     }\n \n     return ReportNewCollectorInfoResponse.newInstance();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ReportNewCollectorInfoResponse reportNewCollectorInfo(\n      ReportNewCollectorInfoRequest request) throws YarnException, IOException {\n    List\u003cAppCollectorsMap\u003e newCollectorsList \u003d request.getAppCollectorsList();\n    if (newCollectorsList !\u003d null \u0026\u0026 !newCollectorsList.isEmpty()) {\n      Map\u003cApplicationId, String\u003e newCollectorsMap \u003d\n          new HashMap\u003cApplicationId, String\u003e();\n      for (AppCollectorsMap collector : newCollectorsList) {\n        newCollectorsMap.put(collector.getApplicationId(), collector.getCollectorAddr());\n      }\n      ((NodeManager.NMContext)context).addRegisteredCollectors(newCollectorsMap);\n    }\n\n    return ReportNewCollectorInfoResponse.newInstance();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/collectormanager/NMCollectorService.java",
      "extendedDetails": {
        "oldValue": "[IOException]",
        "newValue": "[YarnException, IOException]"
      }
    },
    "2188a07e5bea1da26bf679ca0ece26ab596d3438": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3333. Rename TimelineAggregator etc. to TimelineCollector. Contributed by Sangjin Lee\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "2188a07e5bea1da26bf679ca0ece26ab596d3438",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,14 @@\n+  public ReportNewCollectorInfoResponse reportNewCollectorInfo(\n+      ReportNewCollectorInfoRequest request) throws IOException {\n+    List\u003cAppCollectorsMap\u003e newCollectorsList \u003d request.getAppCollectorsList();\n+    if (newCollectorsList !\u003d null \u0026\u0026 !newCollectorsList.isEmpty()) {\n+      Map\u003cApplicationId, String\u003e newCollectorsMap \u003d\n+          new HashMap\u003cApplicationId, String\u003e();\n+      for (AppCollectorsMap collector : newCollectorsList) {\n+        newCollectorsMap.put(collector.getApplicationId(), collector.getCollectorAddr());\n+      }\n+      ((NodeManager.NMContext)context).addRegisteredCollectors(newCollectorsMap);\n+    }\n+\n+    return ReportNewCollectorInfoResponse.newInstance();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public ReportNewCollectorInfoResponse reportNewCollectorInfo(\n      ReportNewCollectorInfoRequest request) throws IOException {\n    List\u003cAppCollectorsMap\u003e newCollectorsList \u003d request.getAppCollectorsList();\n    if (newCollectorsList !\u003d null \u0026\u0026 !newCollectorsList.isEmpty()) {\n      Map\u003cApplicationId, String\u003e newCollectorsMap \u003d\n          new HashMap\u003cApplicationId, String\u003e();\n      for (AppCollectorsMap collector : newCollectorsList) {\n        newCollectorsMap.put(collector.getApplicationId(), collector.getCollectorAddr());\n      }\n      ((NodeManager.NMContext)context).addRegisteredCollectors(newCollectorsMap);\n    }\n\n    return ReportNewCollectorInfoResponse.newInstance();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/collectormanager/NMCollectorService.java"
    }
  }
}