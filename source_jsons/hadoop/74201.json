{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SecurityUtil.java",
  "functionName": "getByName",
  "functionId": "getByName___host-String",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/SecurityUtil.java",
  "functionStartLine": 562,
  "functionEndLine": 564,
  "numCommitsSeen": 52,
  "timeTaken": 2420,
  "changeHistory": [
    "3da94a36e21a315c09ec7edb7702820fe2b524f9",
    "ed18527e38438113fdf2f48b08be5ec283a5f481",
    "2b252844e04eebd4f32815d4bd6f914c02994709",
    "8f83a2355bc6224a92fb7ba24890ddf3ab317ae6",
    "4bb572d3366c478924fa95e513858e8a8c793774"
  ],
  "changeHistoryShort": {
    "3da94a36e21a315c09ec7edb7702820fe2b524f9": "Ybodychange",
    "ed18527e38438113fdf2f48b08be5ec283a5f481": "Ybodychange",
    "2b252844e04eebd4f32815d4bd6f914c02994709": "Ybodychange",
    "8f83a2355bc6224a92fb7ba24890ddf3ab317ae6": "Ymovefromfile",
    "4bb572d3366c478924fa95e513858e8a8c793774": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3da94a36e21a315c09ec7edb7702820fe2b524f9": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15756. [JDK10] Migrate from sun.net.util.IPAddressUtil to the replacement. Contributed by Akira Ajisaka.\n",
      "commitDate": "20/09/18 5:53 AM",
      "commitName": "3da94a36e21a315c09ec7edb7702820fe2b524f9",
      "commitAuthor": "Ewan Higgs",
      "commitDateOld": "16/01/18 10:15 AM",
      "commitNameOld": "b2029353537fc8da9ab67834568cb2e24924cf5a",
      "commitAuthorOld": "Yufei Gu",
      "daysBetweenCommits": 246.78,
      "commitsBetweenForRepo": 2449,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,38 @@\n     public InetAddress getByName(String host) throws UnknownHostException {\n       InetAddress addr \u003d null;\n \n-      if (IPAddressUtil.isIPv4LiteralAddress(host)) {\n-        // use ipv4 address as-is\n-        byte[] ip \u003d IPAddressUtil.textToNumericFormatV4(host);\n-        addr \u003d InetAddress.getByAddress(host, ip);\n-      } else if (IPAddressUtil.isIPv6LiteralAddress(host)) {\n-        // use ipv6 address as-is\n-        byte[] ip \u003d IPAddressUtil.textToNumericFormatV6(host);\n-        addr \u003d InetAddress.getByAddress(host, ip);\n+      if (InetAddresses.isInetAddress(host)) {\n+        // valid ip address. use it as-is\n+        addr \u003d InetAddresses.forString(host);\n+        // set hostname\n+        addr \u003d InetAddress.getByAddress(host, addr.getAddress());\n       } else if (host.endsWith(\".\")) {\n         // a rooted host ends with a dot, ex. \"host.\"\n         // rooted hosts never use the search path, so only try an exact lookup\n         addr \u003d getByExactName(host);\n       } else if (host.contains(\".\")) {\n         // the host contains a dot (domain), ex. \"host.domain\"\n         // try an exact host lookup, then fallback to search list\n         addr \u003d getByExactName(host);\n         if (addr \u003d\u003d null) {\n           addr \u003d getByNameWithSearch(host);\n         }\n       } else {\n         // it\u0027s a simple host with no dots, ex. \"host\"\n         // try the search list, then fallback to exact host\n         InetAddress loopback \u003d InetAddress.getByName(null);\n         if (host.equalsIgnoreCase(loopback.getHostName())) {\n           addr \u003d InetAddress.getByAddress(host, loopback.getAddress());\n         } else {\n           addr \u003d getByNameWithSearch(host);\n           if (addr \u003d\u003d null) {\n             addr \u003d getByExactName(host);\n           }\n         }\n       }\n       // unresolvable!\n       if (addr \u003d\u003d null) {\n         throw new UnknownHostException(host);\n       }\n       return addr;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public InetAddress getByName(String host) throws UnknownHostException {\n      InetAddress addr \u003d null;\n\n      if (InetAddresses.isInetAddress(host)) {\n        // valid ip address. use it as-is\n        addr \u003d InetAddresses.forString(host);\n        // set hostname\n        addr \u003d InetAddress.getByAddress(host, addr.getAddress());\n      } else if (host.endsWith(\".\")) {\n        // a rooted host ends with a dot, ex. \"host.\"\n        // rooted hosts never use the search path, so only try an exact lookup\n        addr \u003d getByExactName(host);\n      } else if (host.contains(\".\")) {\n        // the host contains a dot (domain), ex. \"host.domain\"\n        // try an exact host lookup, then fallback to search list\n        addr \u003d getByExactName(host);\n        if (addr \u003d\u003d null) {\n          addr \u003d getByNameWithSearch(host);\n        }\n      } else {\n        // it\u0027s a simple host with no dots, ex. \"host\"\n        // try the search list, then fallback to exact host\n        InetAddress loopback \u003d InetAddress.getByName(null);\n        if (host.equalsIgnoreCase(loopback.getHostName())) {\n          addr \u003d InetAddress.getByAddress(host, loopback.getAddress());\n        } else {\n          addr \u003d getByNameWithSearch(host);\n          if (addr \u003d\u003d null) {\n            addr \u003d getByExactName(host);\n          }\n        }\n      }\n      // unresolvable!\n      if (addr \u003d\u003d null) {\n        throw new UnknownHostException(host);\n      }\n      return addr;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/SecurityUtil.java",
      "extendedDetails": {}
    },
    "ed18527e38438113fdf2f48b08be5ec283a5f481": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-12687. SecureUtil#QualifiedHostResolver#getByName should also try to resolve direct hostname (Sunil G via rohithsharmaks)\"\n\nThis reverts commit 2b252844e04eebd4f32815d4bd6f914c02994709.\n\nConflicts:\n\thadoop-common-project/hadoop-common/CHANGES.txt\n",
      "commitDate": "08/01/16 1:00 AM",
      "commitName": "ed18527e38438113fdf2f48b08be5ec283a5f481",
      "commitAuthor": "rohithsharmaks",
      "commitDateOld": "06/01/16 9:12 PM",
      "commitNameOld": "2b252844e04eebd4f32815d4bd6f914c02994709",
      "commitAuthorOld": "rohithsharmaks",
      "daysBetweenCommits": 1.16,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,41 @@\n     public InetAddress getByName(String host) throws UnknownHostException {\n       InetAddress addr \u003d null;\n \n       if (IPAddressUtil.isIPv4LiteralAddress(host)) {\n         // use ipv4 address as-is\n         byte[] ip \u003d IPAddressUtil.textToNumericFormatV4(host);\n         addr \u003d InetAddress.getByAddress(host, ip);\n       } else if (IPAddressUtil.isIPv6LiteralAddress(host)) {\n         // use ipv6 address as-is\n         byte[] ip \u003d IPAddressUtil.textToNumericFormatV6(host);\n         addr \u003d InetAddress.getByAddress(host, ip);\n       } else if (host.endsWith(\".\")) {\n         // a rooted host ends with a dot, ex. \"host.\"\n         // rooted hosts never use the search path, so only try an exact lookup\n         addr \u003d getByExactName(host);\n       } else if (host.contains(\".\")) {\n         // the host contains a dot (domain), ex. \"host.domain\"\n         // try an exact host lookup, then fallback to search list\n         addr \u003d getByExactName(host);\n         if (addr \u003d\u003d null) {\n           addr \u003d getByNameWithSearch(host);\n         }\n       } else {\n         // it\u0027s a simple host with no dots, ex. \"host\"\n         // try the search list, then fallback to exact host\n         InetAddress loopback \u003d InetAddress.getByName(null);\n         if (host.equalsIgnoreCase(loopback.getHostName())) {\n           addr \u003d InetAddress.getByAddress(host, loopback.getAddress());\n         } else {\n           addr \u003d getByNameWithSearch(host);\n           if (addr \u003d\u003d null) {\n             addr \u003d getByExactName(host);\n-            // If multiple loopback addresses are present, a direct lookup\n-            // will be helpful\n-            if (addr \u003d\u003d null) {\n-              addr \u003d InetAddress.getByName(host);\n-            }\n           }\n-\n         }\n       }\n       // unresolvable!\n       if (addr \u003d\u003d null) {\n         throw new UnknownHostException(host);\n       }\n       return addr;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public InetAddress getByName(String host) throws UnknownHostException {\n      InetAddress addr \u003d null;\n\n      if (IPAddressUtil.isIPv4LiteralAddress(host)) {\n        // use ipv4 address as-is\n        byte[] ip \u003d IPAddressUtil.textToNumericFormatV4(host);\n        addr \u003d InetAddress.getByAddress(host, ip);\n      } else if (IPAddressUtil.isIPv6LiteralAddress(host)) {\n        // use ipv6 address as-is\n        byte[] ip \u003d IPAddressUtil.textToNumericFormatV6(host);\n        addr \u003d InetAddress.getByAddress(host, ip);\n      } else if (host.endsWith(\".\")) {\n        // a rooted host ends with a dot, ex. \"host.\"\n        // rooted hosts never use the search path, so only try an exact lookup\n        addr \u003d getByExactName(host);\n      } else if (host.contains(\".\")) {\n        // the host contains a dot (domain), ex. \"host.domain\"\n        // try an exact host lookup, then fallback to search list\n        addr \u003d getByExactName(host);\n        if (addr \u003d\u003d null) {\n          addr \u003d getByNameWithSearch(host);\n        }\n      } else {\n        // it\u0027s a simple host with no dots, ex. \"host\"\n        // try the search list, then fallback to exact host\n        InetAddress loopback \u003d InetAddress.getByName(null);\n        if (host.equalsIgnoreCase(loopback.getHostName())) {\n          addr \u003d InetAddress.getByAddress(host, loopback.getAddress());\n        } else {\n          addr \u003d getByNameWithSearch(host);\n          if (addr \u003d\u003d null) {\n            addr \u003d getByExactName(host);\n          }\n        }\n      }\n      // unresolvable!\n      if (addr \u003d\u003d null) {\n        throw new UnknownHostException(host);\n      }\n      return addr;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/SecurityUtil.java",
      "extendedDetails": {}
    },
    "2b252844e04eebd4f32815d4bd6f914c02994709": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12687. SecureUtil#QualifiedHostResolver#getByName should also try to resolve direct hostname (Sunil G via rohithsharmaks)\n",
      "commitDate": "06/01/16 9:12 PM",
      "commitName": "2b252844e04eebd4f32815d4bd6f914c02994709",
      "commitAuthor": "rohithsharmaks",
      "commitDateOld": "24/09/15 11:41 AM",
      "commitNameOld": "df31c446bfa628bee9fab88addcfec5a13edda30",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 104.44,
      "commitsBetweenForRepo": 700,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,47 @@\n     public InetAddress getByName(String host) throws UnknownHostException {\n       InetAddress addr \u003d null;\n \n       if (IPAddressUtil.isIPv4LiteralAddress(host)) {\n         // use ipv4 address as-is\n         byte[] ip \u003d IPAddressUtil.textToNumericFormatV4(host);\n         addr \u003d InetAddress.getByAddress(host, ip);\n       } else if (IPAddressUtil.isIPv6LiteralAddress(host)) {\n         // use ipv6 address as-is\n         byte[] ip \u003d IPAddressUtil.textToNumericFormatV6(host);\n         addr \u003d InetAddress.getByAddress(host, ip);\n       } else if (host.endsWith(\".\")) {\n         // a rooted host ends with a dot, ex. \"host.\"\n         // rooted hosts never use the search path, so only try an exact lookup\n         addr \u003d getByExactName(host);\n       } else if (host.contains(\".\")) {\n         // the host contains a dot (domain), ex. \"host.domain\"\n         // try an exact host lookup, then fallback to search list\n         addr \u003d getByExactName(host);\n         if (addr \u003d\u003d null) {\n           addr \u003d getByNameWithSearch(host);\n         }\n       } else {\n         // it\u0027s a simple host with no dots, ex. \"host\"\n         // try the search list, then fallback to exact host\n         InetAddress loopback \u003d InetAddress.getByName(null);\n         if (host.equalsIgnoreCase(loopback.getHostName())) {\n           addr \u003d InetAddress.getByAddress(host, loopback.getAddress());\n         } else {\n           addr \u003d getByNameWithSearch(host);\n           if (addr \u003d\u003d null) {\n             addr \u003d getByExactName(host);\n+            // If multiple loopback addresses are present, a direct lookup\n+            // will be helpful\n+            if (addr \u003d\u003d null) {\n+              addr \u003d InetAddress.getByName(host);\n+            }\n           }\n+\n         }\n       }\n       // unresolvable!\n       if (addr \u003d\u003d null) {\n         throw new UnknownHostException(host);\n       }\n       return addr;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public InetAddress getByName(String host) throws UnknownHostException {\n      InetAddress addr \u003d null;\n\n      if (IPAddressUtil.isIPv4LiteralAddress(host)) {\n        // use ipv4 address as-is\n        byte[] ip \u003d IPAddressUtil.textToNumericFormatV4(host);\n        addr \u003d InetAddress.getByAddress(host, ip);\n      } else if (IPAddressUtil.isIPv6LiteralAddress(host)) {\n        // use ipv6 address as-is\n        byte[] ip \u003d IPAddressUtil.textToNumericFormatV6(host);\n        addr \u003d InetAddress.getByAddress(host, ip);\n      } else if (host.endsWith(\".\")) {\n        // a rooted host ends with a dot, ex. \"host.\"\n        // rooted hosts never use the search path, so only try an exact lookup\n        addr \u003d getByExactName(host);\n      } else if (host.contains(\".\")) {\n        // the host contains a dot (domain), ex. \"host.domain\"\n        // try an exact host lookup, then fallback to search list\n        addr \u003d getByExactName(host);\n        if (addr \u003d\u003d null) {\n          addr \u003d getByNameWithSearch(host);\n        }\n      } else {\n        // it\u0027s a simple host with no dots, ex. \"host\"\n        // try the search list, then fallback to exact host\n        InetAddress loopback \u003d InetAddress.getByName(null);\n        if (host.equalsIgnoreCase(loopback.getHostName())) {\n          addr \u003d InetAddress.getByAddress(host, loopback.getAddress());\n        } else {\n          addr \u003d getByNameWithSearch(host);\n          if (addr \u003d\u003d null) {\n            addr \u003d getByExactName(host);\n            // If multiple loopback addresses are present, a direct lookup\n            // will be helpful\n            if (addr \u003d\u003d null) {\n              addr \u003d InetAddress.getByName(host);\n            }\n          }\n\n        }\n      }\n      // unresolvable!\n      if (addr \u003d\u003d null) {\n        throw new UnknownHostException(host);\n      }\n      return addr;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/SecurityUtil.java",
      "extendedDetails": {}
    },
    "8f83a2355bc6224a92fb7ba24890ddf3ab317ae6": {
      "type": "Ymovefromfile",
      "commitMessage": "HADOOP-7964. Deadlock in NetUtils and SecurityUtil class initialization. Contributed by Daryn Sharp.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1230249 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/01/12 1:02 PM",
      "commitName": "8f83a2355bc6224a92fb7ba24890ddf3ab317ae6",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "11/01/12 11:37 AM",
      "commitNameOld": "c4c6d8ece316a1655dd3dbff242559535ad09707",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public InetAddress getByName(String host) throws UnknownHostException {\n      InetAddress addr \u003d null;\n\n      if (IPAddressUtil.isIPv4LiteralAddress(host)) {\n        // use ipv4 address as-is\n        byte[] ip \u003d IPAddressUtil.textToNumericFormatV4(host);\n        addr \u003d InetAddress.getByAddress(host, ip);\n      } else if (IPAddressUtil.isIPv6LiteralAddress(host)) {\n        // use ipv6 address as-is\n        byte[] ip \u003d IPAddressUtil.textToNumericFormatV6(host);\n        addr \u003d InetAddress.getByAddress(host, ip);\n      } else if (host.endsWith(\".\")) {\n        // a rooted host ends with a dot, ex. \"host.\"\n        // rooted hosts never use the search path, so only try an exact lookup\n        addr \u003d getByExactName(host);\n      } else if (host.contains(\".\")) {\n        // the host contains a dot (domain), ex. \"host.domain\"\n        // try an exact host lookup, then fallback to search list\n        addr \u003d getByExactName(host);\n        if (addr \u003d\u003d null) {\n          addr \u003d getByNameWithSearch(host);\n        }\n      } else {\n        // it\u0027s a simple host with no dots, ex. \"host\"\n        // try the search list, then fallback to exact host\n        InetAddress loopback \u003d InetAddress.getByName(null);\n        if (host.equalsIgnoreCase(loopback.getHostName())) {\n          addr \u003d InetAddress.getByAddress(host, loopback.getAddress());\n        } else {\n          addr \u003d getByNameWithSearch(host);\n          if (addr \u003d\u003d null) {\n            addr \u003d getByExactName(host);\n          }\n        }\n      }\n      // unresolvable!\n      if (addr \u003d\u003d null) {\n        throw new UnknownHostException(host);\n      }\n      return addr;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/SecurityUtil.java",
      "extendedDetails": {
        "oldPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetUtils.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/SecurityUtil.java",
        "oldMethodName": "getByName",
        "newMethodName": "getByName"
      }
    },
    "4bb572d3366c478924fa95e513858e8a8c793774": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7808. Port HADOOP-7510 - Add configurable option to use original hostname in token instead of IP to allow server IP change. Contributed by Daryn Sharp.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1227737 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/01/12 10:41 AM",
      "commitName": "4bb572d3366c478924fa95e513858e8a8c793774",
      "commitAuthor": "Suresh Srinivas",
      "diff": "@@ -0,0 +1,41 @@\n+    public InetAddress getByName(String host) throws UnknownHostException {\n+      InetAddress addr \u003d null;\n+\n+      if (IPAddressUtil.isIPv4LiteralAddress(host)) {\n+        // use ipv4 address as-is\n+        byte[] ip \u003d IPAddressUtil.textToNumericFormatV4(host);\n+        addr \u003d InetAddress.getByAddress(host, ip);\n+      } else if (IPAddressUtil.isIPv6LiteralAddress(host)) {\n+        // use ipv6 address as-is\n+        byte[] ip \u003d IPAddressUtil.textToNumericFormatV6(host);\n+        addr \u003d InetAddress.getByAddress(host, ip);\n+      } else if (host.endsWith(\".\")) {\n+        // a rooted host ends with a dot, ex. \"host.\"\n+        // rooted hosts never use the search path, so only try an exact lookup\n+        addr \u003d getByExactName(host);\n+      } else if (host.contains(\".\")) {\n+        // the host contains a dot (domain), ex. \"host.domain\"\n+        // try an exact host lookup, then fallback to search list\n+        addr \u003d getByExactName(host);\n+        if (addr \u003d\u003d null) {\n+          addr \u003d getByNameWithSearch(host);\n+        }\n+      } else {\n+        // it\u0027s a simple host with no dots, ex. \"host\"\n+        // try the search list, then fallback to exact host\n+        InetAddress loopback \u003d InetAddress.getByName(null);\n+        if (host.equalsIgnoreCase(loopback.getHostName())) {\n+          addr \u003d InetAddress.getByAddress(host, loopback.getAddress());\n+        } else {\n+          addr \u003d getByNameWithSearch(host);\n+          if (addr \u003d\u003d null) {\n+            addr \u003d getByExactName(host);\n+          }\n+        }\n+      }\n+      // unresolvable!\n+      if (addr \u003d\u003d null) {\n+        throw new UnknownHostException(host);\n+      }\n+      return addr;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public InetAddress getByName(String host) throws UnknownHostException {\n      InetAddress addr \u003d null;\n\n      if (IPAddressUtil.isIPv4LiteralAddress(host)) {\n        // use ipv4 address as-is\n        byte[] ip \u003d IPAddressUtil.textToNumericFormatV4(host);\n        addr \u003d InetAddress.getByAddress(host, ip);\n      } else if (IPAddressUtil.isIPv6LiteralAddress(host)) {\n        // use ipv6 address as-is\n        byte[] ip \u003d IPAddressUtil.textToNumericFormatV6(host);\n        addr \u003d InetAddress.getByAddress(host, ip);\n      } else if (host.endsWith(\".\")) {\n        // a rooted host ends with a dot, ex. \"host.\"\n        // rooted hosts never use the search path, so only try an exact lookup\n        addr \u003d getByExactName(host);\n      } else if (host.contains(\".\")) {\n        // the host contains a dot (domain), ex. \"host.domain\"\n        // try an exact host lookup, then fallback to search list\n        addr \u003d getByExactName(host);\n        if (addr \u003d\u003d null) {\n          addr \u003d getByNameWithSearch(host);\n        }\n      } else {\n        // it\u0027s a simple host with no dots, ex. \"host\"\n        // try the search list, then fallback to exact host\n        InetAddress loopback \u003d InetAddress.getByName(null);\n        if (host.equalsIgnoreCase(loopback.getHostName())) {\n          addr \u003d InetAddress.getByAddress(host, loopback.getAddress());\n        } else {\n          addr \u003d getByNameWithSearch(host);\n          if (addr \u003d\u003d null) {\n            addr \u003d getByExactName(host);\n          }\n        }\n      }\n      // unresolvable!\n      if (addr \u003d\u003d null) {\n        throw new UnknownHostException(host);\n      }\n      return addr;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetUtils.java"
    }
  }
}