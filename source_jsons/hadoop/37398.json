{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ClientRMService.java",
  "functionName": "forceKillApplication",
  "functionId": "forceKillApplication___request-KillApplicationRequest",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
  "functionStartLine": 784,
  "functionEndLine": 848,
  "numCommitsSeen": 161,
  "timeTaken": 12106,
  "changeHistory": [
    "95372657fc25c02399b01793833021ccf88dada2",
    "652bcbb3e4950758e61ce123ecc1798ae2b60a7f",
    "cffea251be4b73ca16e5e11f0be2d22651330f73",
    "d0372dc613136910160e9d42bd5eaa0d4bde2356",
    "5c95bb315ba605b3bed77966a99a63854234e2c5",
    "013000fbc2081c2b7e78b790fc6d847de92b9384",
    "8676a118a12165ae5a8b80a2a4596c133471ebc1",
    "cf23f2c2b5b4eb9e51de1a66b7aa57dee7ff30b5",
    "7da07461ffadb462567c81ad155d3d1473ad89d7",
    "b774d7b3de81cda4165a0e86bc2267fda8546cb5",
    "1c5b49eeafc2253d4fa92456e6ccf0f35290c889",
    "1ad3fe46332586cea73c47ba06342f91359db561",
    "a83fb61ac07c0468cbc7a38526e92683883dd932",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "df2991c0cbc3f35c2640b93680667507c4f810dd",
    "0d2bb0623696c2cc822cb44e431345b2c773dbff",
    "cdfabf5ae289836968b3d296668593b9500b6f26",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "95372657fc25c02399b01793833021ccf88dada2": "Ybodychange",
    "652bcbb3e4950758e61ce123ecc1798ae2b60a7f": "Ybodychange",
    "cffea251be4b73ca16e5e11f0be2d22651330f73": "Ybodychange",
    "d0372dc613136910160e9d42bd5eaa0d4bde2356": "Ybodychange",
    "5c95bb315ba605b3bed77966a99a63854234e2c5": "Ybodychange",
    "013000fbc2081c2b7e78b790fc6d847de92b9384": "Ybodychange",
    "8676a118a12165ae5a8b80a2a4596c133471ebc1": "Ybodychange",
    "cf23f2c2b5b4eb9e51de1a66b7aa57dee7ff30b5": "Ybodychange",
    "7da07461ffadb462567c81ad155d3d1473ad89d7": "Ybodychange",
    "b774d7b3de81cda4165a0e86bc2267fda8546cb5": "Ybodychange",
    "1c5b49eeafc2253d4fa92456e6ccf0f35290c889": "Ybodychange",
    "1ad3fe46332586cea73c47ba06342f91359db561": "Ybodychange",
    "a83fb61ac07c0468cbc7a38526e92683883dd932": "Yexceptionschange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "df2991c0cbc3f35c2640b93680667507c4f810dd": "Ybodychange",
    "0d2bb0623696c2cc822cb44e431345b2c773dbff": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange)",
    "cdfabf5ae289836968b3d296668593b9500b6f26": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "95372657fc25c02399b01793833021ccf88dada2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9287. Consecutive StringBuilder append should be reuse. Contributed by Ayush Saxena.\n",
      "commitDate": "25/02/19 11:45 AM",
      "commitName": "95372657fc25c02399b01793833021ccf88dada2",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "22/02/19 7:31 AM",
      "commitNameOld": "ed13cf84068ad50a78e66211132c1f08238fb65b",
      "commitAuthorOld": "bibinchundatt",
      "daysBetweenCommits": 3.18,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,65 @@\n   public KillApplicationResponse forceKillApplication(\n       KillApplicationRequest request) throws YarnException {\n \n     ApplicationId applicationId \u003d request.getApplicationId();\n     CallerContext callerContext \u003d CallerContext.getCurrent();\n \n     UserGroupInformation callerUGI;\n     try {\n       callerUGI \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException ie) {\n       LOG.info(\"Error getting UGI \", ie);\n       RMAuditLogger.logFailure(\"UNKNOWN\", AuditConstants.KILL_APP_REQUEST,\n               \"UNKNOWN\", \"ClientRMService\", \"Error getting UGI\",\n               applicationId, callerContext);\n       throw RPCUtil.getRemoteException(ie);\n     }\n     RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n     if (application \u003d\u003d null) {\n       RMAuditLogger.logFailure(callerUGI.getUserName(),\n           AuditConstants.KILL_APP_REQUEST, \"UNKNOWN\", \"ClientRMService\",\n           \"Trying to kill an absent application\", applicationId, callerContext);\n       throw new ApplicationNotFoundException(\"Trying to kill an absent\"\n           + \" application \" + applicationId);\n     }\n \n     if (!checkAccess(callerUGI, application.getUser(),\n         ApplicationAccessType.MODIFY_APP, application)) {\n       RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n           AuditConstants.KILL_APP_REQUEST,\n           \"User doesn\u0027t have permissions to \"\n               + ApplicationAccessType.MODIFY_APP.toString(), \"ClientRMService\",\n           AuditConstants.UNAUTHORIZED_USER, applicationId, callerContext);\n       throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n           + callerUGI.getShortUserName() + \" cannot perform operation \"\n           + ApplicationAccessType.MODIFY_APP.name() + \" on \" + applicationId));\n     }\n \n     if (application.isAppFinalStateStored()) {\n       return KillApplicationResponse.newInstance(true);\n     }\n \n     StringBuilder message \u003d new StringBuilder();\n     message.append(\"Application \").append(applicationId)\n         .append(\" was killed by user \").append(callerUGI.getShortUserName());\n \n     InetAddress remoteAddress \u003d Server.getRemoteIp();\n     if (null !\u003d remoteAddress) {\n       message.append(\" at \").append(remoteAddress.getHostAddress());\n     }\n \n     String diagnostics \u003d org.apache.commons.lang3.StringUtils\n         .trimToNull(request.getDiagnostics());\n     if (diagnostics !\u003d null) {\n-      message.append(\" with diagnostic message: \");\n-      message.append(diagnostics);\n+      message.append(\" with diagnostic message: \")\n+          .append(diagnostics);\n     }\n \n     this.rmContext.getDispatcher().getEventHandler()\n         .handle(new RMAppKillByClientEvent(applicationId, message.toString(),\n             callerUGI, remoteAddress));\n \n     // For Unmanaged AMs, return true so they don\u0027t retry\n     return KillApplicationResponse.newInstance(\n         application.getApplicationSubmissionContext().getUnmanagedAM());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public KillApplicationResponse forceKillApplication(\n      KillApplicationRequest request) throws YarnException {\n\n    ApplicationId applicationId \u003d request.getApplicationId();\n    CallerContext callerContext \u003d CallerContext.getCurrent();\n\n    UserGroupInformation callerUGI;\n    try {\n      callerUGI \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ie) {\n      LOG.info(\"Error getting UGI \", ie);\n      RMAuditLogger.logFailure(\"UNKNOWN\", AuditConstants.KILL_APP_REQUEST,\n              \"UNKNOWN\", \"ClientRMService\", \"Error getting UGI\",\n              applicationId, callerContext);\n      throw RPCUtil.getRemoteException(ie);\n    }\n    RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n    if (application \u003d\u003d null) {\n      RMAuditLogger.logFailure(callerUGI.getUserName(),\n          AuditConstants.KILL_APP_REQUEST, \"UNKNOWN\", \"ClientRMService\",\n          \"Trying to kill an absent application\", applicationId, callerContext);\n      throw new ApplicationNotFoundException(\"Trying to kill an absent\"\n          + \" application \" + applicationId);\n    }\n\n    if (!checkAccess(callerUGI, application.getUser(),\n        ApplicationAccessType.MODIFY_APP, application)) {\n      RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n          AuditConstants.KILL_APP_REQUEST,\n          \"User doesn\u0027t have permissions to \"\n              + ApplicationAccessType.MODIFY_APP.toString(), \"ClientRMService\",\n          AuditConstants.UNAUTHORIZED_USER, applicationId, callerContext);\n      throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n          + callerUGI.getShortUserName() + \" cannot perform operation \"\n          + ApplicationAccessType.MODIFY_APP.name() + \" on \" + applicationId));\n    }\n\n    if (application.isAppFinalStateStored()) {\n      return KillApplicationResponse.newInstance(true);\n    }\n\n    StringBuilder message \u003d new StringBuilder();\n    message.append(\"Application \").append(applicationId)\n        .append(\" was killed by user \").append(callerUGI.getShortUserName());\n\n    InetAddress remoteAddress \u003d Server.getRemoteIp();\n    if (null !\u003d remoteAddress) {\n      message.append(\" at \").append(remoteAddress.getHostAddress());\n    }\n\n    String diagnostics \u003d org.apache.commons.lang3.StringUtils\n        .trimToNull(request.getDiagnostics());\n    if (diagnostics !\u003d null) {\n      message.append(\" with diagnostic message: \")\n          .append(diagnostics);\n    }\n\n    this.rmContext.getDispatcher().getEventHandler()\n        .handle(new RMAppKillByClientEvent(applicationId, message.toString(),\n            callerUGI, remoteAddress));\n\n    // For Unmanaged AMs, return true so they don\u0027t retry\n    return KillApplicationResponse.newInstance(\n        application.getApplicationSubmissionContext().getUnmanagedAM());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "652bcbb3e4950758e61ce123ecc1798ae2b60a7f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8363. Upgrade commons-lang version to 3.7 in hadoop-yarn-project. Contributed by Takanobu Asanuma.\n",
      "commitDate": "12/06/18 8:35 AM",
      "commitName": "652bcbb3e4950758e61ce123ecc1798ae2b60a7f",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "24/05/18 1:49 AM",
      "commitNameOld": "c05b5d424b000bab766f57e88a07f2b4e9a56647",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 19.28,
      "commitsBetweenForRepo": 144,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,65 @@\n   public KillApplicationResponse forceKillApplication(\n       KillApplicationRequest request) throws YarnException {\n \n     ApplicationId applicationId \u003d request.getApplicationId();\n     CallerContext callerContext \u003d CallerContext.getCurrent();\n \n     UserGroupInformation callerUGI;\n     try {\n       callerUGI \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException ie) {\n       LOG.info(\"Error getting UGI \", ie);\n       RMAuditLogger.logFailure(\"UNKNOWN\", AuditConstants.KILL_APP_REQUEST,\n               \"UNKNOWN\", \"ClientRMService\", \"Error getting UGI\",\n               applicationId, callerContext);\n       throw RPCUtil.getRemoteException(ie);\n     }\n     RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n     if (application \u003d\u003d null) {\n       RMAuditLogger.logFailure(callerUGI.getUserName(),\n           AuditConstants.KILL_APP_REQUEST, \"UNKNOWN\", \"ClientRMService\",\n           \"Trying to kill an absent application\", applicationId, callerContext);\n       throw new ApplicationNotFoundException(\"Trying to kill an absent\"\n           + \" application \" + applicationId);\n     }\n \n     if (!checkAccess(callerUGI, application.getUser(),\n         ApplicationAccessType.MODIFY_APP, application)) {\n       RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n           AuditConstants.KILL_APP_REQUEST,\n           \"User doesn\u0027t have permissions to \"\n               + ApplicationAccessType.MODIFY_APP.toString(), \"ClientRMService\",\n           AuditConstants.UNAUTHORIZED_USER, applicationId, callerContext);\n       throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n           + callerUGI.getShortUserName() + \" cannot perform operation \"\n           + ApplicationAccessType.MODIFY_APP.name() + \" on \" + applicationId));\n     }\n \n     if (application.isAppFinalStateStored()) {\n       return KillApplicationResponse.newInstance(true);\n     }\n \n     StringBuilder message \u003d new StringBuilder();\n     message.append(\"Application \").append(applicationId)\n         .append(\" was killed by user \").append(callerUGI.getShortUserName());\n \n     InetAddress remoteAddress \u003d Server.getRemoteIp();\n     if (null !\u003d remoteAddress) {\n       message.append(\" at \").append(remoteAddress.getHostAddress());\n     }\n \n-    String diagnostics \u003d org.apache.commons.lang.StringUtils\n+    String diagnostics \u003d org.apache.commons.lang3.StringUtils\n         .trimToNull(request.getDiagnostics());\n     if (diagnostics !\u003d null) {\n       message.append(\" with diagnostic message: \");\n       message.append(diagnostics);\n     }\n \n     this.rmContext.getDispatcher().getEventHandler()\n         .handle(new RMAppKillByClientEvent(applicationId, message.toString(),\n             callerUGI, remoteAddress));\n \n     // For Unmanaged AMs, return true so they don\u0027t retry\n     return KillApplicationResponse.newInstance(\n         application.getApplicationSubmissionContext().getUnmanagedAM());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public KillApplicationResponse forceKillApplication(\n      KillApplicationRequest request) throws YarnException {\n\n    ApplicationId applicationId \u003d request.getApplicationId();\n    CallerContext callerContext \u003d CallerContext.getCurrent();\n\n    UserGroupInformation callerUGI;\n    try {\n      callerUGI \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ie) {\n      LOG.info(\"Error getting UGI \", ie);\n      RMAuditLogger.logFailure(\"UNKNOWN\", AuditConstants.KILL_APP_REQUEST,\n              \"UNKNOWN\", \"ClientRMService\", \"Error getting UGI\",\n              applicationId, callerContext);\n      throw RPCUtil.getRemoteException(ie);\n    }\n    RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n    if (application \u003d\u003d null) {\n      RMAuditLogger.logFailure(callerUGI.getUserName(),\n          AuditConstants.KILL_APP_REQUEST, \"UNKNOWN\", \"ClientRMService\",\n          \"Trying to kill an absent application\", applicationId, callerContext);\n      throw new ApplicationNotFoundException(\"Trying to kill an absent\"\n          + \" application \" + applicationId);\n    }\n\n    if (!checkAccess(callerUGI, application.getUser(),\n        ApplicationAccessType.MODIFY_APP, application)) {\n      RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n          AuditConstants.KILL_APP_REQUEST,\n          \"User doesn\u0027t have permissions to \"\n              + ApplicationAccessType.MODIFY_APP.toString(), \"ClientRMService\",\n          AuditConstants.UNAUTHORIZED_USER, applicationId, callerContext);\n      throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n          + callerUGI.getShortUserName() + \" cannot perform operation \"\n          + ApplicationAccessType.MODIFY_APP.name() + \" on \" + applicationId));\n    }\n\n    if (application.isAppFinalStateStored()) {\n      return KillApplicationResponse.newInstance(true);\n    }\n\n    StringBuilder message \u003d new StringBuilder();\n    message.append(\"Application \").append(applicationId)\n        .append(\" was killed by user \").append(callerUGI.getShortUserName());\n\n    InetAddress remoteAddress \u003d Server.getRemoteIp();\n    if (null !\u003d remoteAddress) {\n      message.append(\" at \").append(remoteAddress.getHostAddress());\n    }\n\n    String diagnostics \u003d org.apache.commons.lang3.StringUtils\n        .trimToNull(request.getDiagnostics());\n    if (diagnostics !\u003d null) {\n      message.append(\" with diagnostic message: \");\n      message.append(diagnostics);\n    }\n\n    this.rmContext.getDispatcher().getEventHandler()\n        .handle(new RMAppKillByClientEvent(applicationId, message.toString(),\n            callerUGI, remoteAddress));\n\n    // For Unmanaged AMs, return true so they don\u0027t retry\n    return KillApplicationResponse.newInstance(\n        application.getApplicationSubmissionContext().getUnmanagedAM());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "cffea251be4b73ca16e5e11f0be2d22651330f73": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5956. Refactor ClientRMService for unify error handling across apis. Contributed by Kai Sasaki.\n",
      "commitDate": "25/03/17 9:56 AM",
      "commitName": "cffea251be4b73ca16e5e11f0be2d22651330f73",
      "commitAuthor": "Sunil G",
      "commitDateOld": "28/02/17 11:04 AM",
      "commitNameOld": "e0bb867c3fa638c9f689ee0b044b400481cf02b5",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 24.91,
      "commitsBetweenForRepo": 150,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,65 @@\n   public KillApplicationResponse forceKillApplication(\n       KillApplicationRequest request) throws YarnException {\n \n     ApplicationId applicationId \u003d request.getApplicationId();\n     CallerContext callerContext \u003d CallerContext.getCurrent();\n \n     UserGroupInformation callerUGI;\n     try {\n       callerUGI \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException ie) {\n       LOG.info(\"Error getting UGI \", ie);\n       RMAuditLogger.logFailure(\"UNKNOWN\", AuditConstants.KILL_APP_REQUEST,\n-          \"UNKNOWN\", \"ClientRMService\" , \"Error getting UGI\",\n-          applicationId, callerContext);\n+              \"UNKNOWN\", \"ClientRMService\", \"Error getting UGI\",\n+              applicationId, callerContext);\n       throw RPCUtil.getRemoteException(ie);\n     }\n-\n     RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n     if (application \u003d\u003d null) {\n       RMAuditLogger.logFailure(callerUGI.getUserName(),\n           AuditConstants.KILL_APP_REQUEST, \"UNKNOWN\", \"ClientRMService\",\n           \"Trying to kill an absent application\", applicationId, callerContext);\n       throw new ApplicationNotFoundException(\"Trying to kill an absent\"\n           + \" application \" + applicationId);\n     }\n \n     if (!checkAccess(callerUGI, application.getUser(),\n         ApplicationAccessType.MODIFY_APP, application)) {\n       RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n           AuditConstants.KILL_APP_REQUEST,\n           \"User doesn\u0027t have permissions to \"\n               + ApplicationAccessType.MODIFY_APP.toString(), \"ClientRMService\",\n           AuditConstants.UNAUTHORIZED_USER, applicationId, callerContext);\n       throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n           + callerUGI.getShortUserName() + \" cannot perform operation \"\n           + ApplicationAccessType.MODIFY_APP.name() + \" on \" + applicationId));\n     }\n \n     if (application.isAppFinalStateStored()) {\n       return KillApplicationResponse.newInstance(true);\n     }\n \n     StringBuilder message \u003d new StringBuilder();\n     message.append(\"Application \").append(applicationId)\n         .append(\" was killed by user \").append(callerUGI.getShortUserName());\n \n     InetAddress remoteAddress \u003d Server.getRemoteIp();\n     if (null !\u003d remoteAddress) {\n       message.append(\" at \").append(remoteAddress.getHostAddress());\n     }\n \n     String diagnostics \u003d org.apache.commons.lang.StringUtils\n         .trimToNull(request.getDiagnostics());\n     if (diagnostics !\u003d null) {\n       message.append(\" with diagnostic message: \");\n       message.append(diagnostics);\n     }\n \n     this.rmContext.getDispatcher().getEventHandler()\n         .handle(new RMAppKillByClientEvent(applicationId, message.toString(),\n             callerUGI, remoteAddress));\n \n-    // For UnmanagedAMs, return true so they don\u0027t retry\n+    // For Unmanaged AMs, return true so they don\u0027t retry\n     return KillApplicationResponse.newInstance(\n         application.getApplicationSubmissionContext().getUnmanagedAM());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public KillApplicationResponse forceKillApplication(\n      KillApplicationRequest request) throws YarnException {\n\n    ApplicationId applicationId \u003d request.getApplicationId();\n    CallerContext callerContext \u003d CallerContext.getCurrent();\n\n    UserGroupInformation callerUGI;\n    try {\n      callerUGI \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ie) {\n      LOG.info(\"Error getting UGI \", ie);\n      RMAuditLogger.logFailure(\"UNKNOWN\", AuditConstants.KILL_APP_REQUEST,\n              \"UNKNOWN\", \"ClientRMService\", \"Error getting UGI\",\n              applicationId, callerContext);\n      throw RPCUtil.getRemoteException(ie);\n    }\n    RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n    if (application \u003d\u003d null) {\n      RMAuditLogger.logFailure(callerUGI.getUserName(),\n          AuditConstants.KILL_APP_REQUEST, \"UNKNOWN\", \"ClientRMService\",\n          \"Trying to kill an absent application\", applicationId, callerContext);\n      throw new ApplicationNotFoundException(\"Trying to kill an absent\"\n          + \" application \" + applicationId);\n    }\n\n    if (!checkAccess(callerUGI, application.getUser(),\n        ApplicationAccessType.MODIFY_APP, application)) {\n      RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n          AuditConstants.KILL_APP_REQUEST,\n          \"User doesn\u0027t have permissions to \"\n              + ApplicationAccessType.MODIFY_APP.toString(), \"ClientRMService\",\n          AuditConstants.UNAUTHORIZED_USER, applicationId, callerContext);\n      throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n          + callerUGI.getShortUserName() + \" cannot perform operation \"\n          + ApplicationAccessType.MODIFY_APP.name() + \" on \" + applicationId));\n    }\n\n    if (application.isAppFinalStateStored()) {\n      return KillApplicationResponse.newInstance(true);\n    }\n\n    StringBuilder message \u003d new StringBuilder();\n    message.append(\"Application \").append(applicationId)\n        .append(\" was killed by user \").append(callerUGI.getShortUserName());\n\n    InetAddress remoteAddress \u003d Server.getRemoteIp();\n    if (null !\u003d remoteAddress) {\n      message.append(\" at \").append(remoteAddress.getHostAddress());\n    }\n\n    String diagnostics \u003d org.apache.commons.lang.StringUtils\n        .trimToNull(request.getDiagnostics());\n    if (diagnostics !\u003d null) {\n      message.append(\" with diagnostic message: \");\n      message.append(diagnostics);\n    }\n\n    this.rmContext.getDispatcher().getEventHandler()\n        .handle(new RMAppKillByClientEvent(applicationId, message.toString(),\n            callerUGI, remoteAddress));\n\n    // For Unmanaged AMs, return true so they don\u0027t retry\n    return KillApplicationResponse.newInstance(\n        application.getApplicationSubmissionContext().getUnmanagedAM());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "d0372dc613136910160e9d42bd5eaa0d4bde2356": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3692. Allow REST API to set a user generated message when killing an application. Contributed by Rohith Sharma K S\n",
      "commitDate": "22/09/16 6:00 PM",
      "commitName": "d0372dc613136910160e9d42bd5eaa0d4bde2356",
      "commitAuthor": "Naganarasimha",
      "commitDateOld": "10/08/16 11:25 AM",
      "commitNameOld": "5c95bb315ba605b3bed77966a99a63854234e2c5",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 43.27,
      "commitsBetweenForRepo": 249,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,66 @@\n   public KillApplicationResponse forceKillApplication(\n       KillApplicationRequest request) throws YarnException {\n \n     ApplicationId applicationId \u003d request.getApplicationId();\n     CallerContext callerContext \u003d CallerContext.getCurrent();\n \n     UserGroupInformation callerUGI;\n     try {\n       callerUGI \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException ie) {\n       LOG.info(\"Error getting UGI \", ie);\n       RMAuditLogger.logFailure(\"UNKNOWN\", AuditConstants.KILL_APP_REQUEST,\n           \"UNKNOWN\", \"ClientRMService\" , \"Error getting UGI\",\n           applicationId, callerContext);\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n     RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n     if (application \u003d\u003d null) {\n       RMAuditLogger.logFailure(callerUGI.getUserName(),\n           AuditConstants.KILL_APP_REQUEST, \"UNKNOWN\", \"ClientRMService\",\n           \"Trying to kill an absent application\", applicationId, callerContext);\n       throw new ApplicationNotFoundException(\"Trying to kill an absent\"\n           + \" application \" + applicationId);\n     }\n \n     if (!checkAccess(callerUGI, application.getUser(),\n         ApplicationAccessType.MODIFY_APP, application)) {\n       RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n           AuditConstants.KILL_APP_REQUEST,\n           \"User doesn\u0027t have permissions to \"\n               + ApplicationAccessType.MODIFY_APP.toString(), \"ClientRMService\",\n           AuditConstants.UNAUTHORIZED_USER, applicationId, callerContext);\n       throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n           + callerUGI.getShortUserName() + \" cannot perform operation \"\n           + ApplicationAccessType.MODIFY_APP.name() + \" on \" + applicationId));\n     }\n \n     if (application.isAppFinalStateStored()) {\n       return KillApplicationResponse.newInstance(true);\n     }\n \n-    String message \u003d \"Kill application \" + applicationId + \" received from \"\n-        + callerUGI;\n+    StringBuilder message \u003d new StringBuilder();\n+    message.append(\"Application \").append(applicationId)\n+        .append(\" was killed by user \").append(callerUGI.getShortUserName());\n+\n     InetAddress remoteAddress \u003d Server.getRemoteIp();\n     if (null !\u003d remoteAddress) {\n-      message +\u003d \" at \" + remoteAddress.getHostAddress();\n+      message.append(\" at \").append(remoteAddress.getHostAddress());\n     }\n+\n+    String diagnostics \u003d org.apache.commons.lang.StringUtils\n+        .trimToNull(request.getDiagnostics());\n+    if (diagnostics !\u003d null) {\n+      message.append(\" with diagnostic message: \");\n+      message.append(diagnostics);\n+    }\n+\n     this.rmContext.getDispatcher().getEventHandler()\n-        .handle(new RMAppKillByClientEvent(applicationId, message, callerUGI,\n-            remoteAddress));\n+        .handle(new RMAppKillByClientEvent(applicationId, message.toString(),\n+            callerUGI, remoteAddress));\n \n     // For UnmanagedAMs, return true so they don\u0027t retry\n     return KillApplicationResponse.newInstance(\n         application.getApplicationSubmissionContext().getUnmanagedAM());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public KillApplicationResponse forceKillApplication(\n      KillApplicationRequest request) throws YarnException {\n\n    ApplicationId applicationId \u003d request.getApplicationId();\n    CallerContext callerContext \u003d CallerContext.getCurrent();\n\n    UserGroupInformation callerUGI;\n    try {\n      callerUGI \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ie) {\n      LOG.info(\"Error getting UGI \", ie);\n      RMAuditLogger.logFailure(\"UNKNOWN\", AuditConstants.KILL_APP_REQUEST,\n          \"UNKNOWN\", \"ClientRMService\" , \"Error getting UGI\",\n          applicationId, callerContext);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n    if (application \u003d\u003d null) {\n      RMAuditLogger.logFailure(callerUGI.getUserName(),\n          AuditConstants.KILL_APP_REQUEST, \"UNKNOWN\", \"ClientRMService\",\n          \"Trying to kill an absent application\", applicationId, callerContext);\n      throw new ApplicationNotFoundException(\"Trying to kill an absent\"\n          + \" application \" + applicationId);\n    }\n\n    if (!checkAccess(callerUGI, application.getUser(),\n        ApplicationAccessType.MODIFY_APP, application)) {\n      RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n          AuditConstants.KILL_APP_REQUEST,\n          \"User doesn\u0027t have permissions to \"\n              + ApplicationAccessType.MODIFY_APP.toString(), \"ClientRMService\",\n          AuditConstants.UNAUTHORIZED_USER, applicationId, callerContext);\n      throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n          + callerUGI.getShortUserName() + \" cannot perform operation \"\n          + ApplicationAccessType.MODIFY_APP.name() + \" on \" + applicationId));\n    }\n\n    if (application.isAppFinalStateStored()) {\n      return KillApplicationResponse.newInstance(true);\n    }\n\n    StringBuilder message \u003d new StringBuilder();\n    message.append(\"Application \").append(applicationId)\n        .append(\" was killed by user \").append(callerUGI.getShortUserName());\n\n    InetAddress remoteAddress \u003d Server.getRemoteIp();\n    if (null !\u003d remoteAddress) {\n      message.append(\" at \").append(remoteAddress.getHostAddress());\n    }\n\n    String diagnostics \u003d org.apache.commons.lang.StringUtils\n        .trimToNull(request.getDiagnostics());\n    if (diagnostics !\u003d null) {\n      message.append(\" with diagnostic message: \");\n      message.append(diagnostics);\n    }\n\n    this.rmContext.getDispatcher().getEventHandler()\n        .handle(new RMAppKillByClientEvent(applicationId, message.toString(),\n            callerUGI, remoteAddress));\n\n    // For UnmanagedAMs, return true so they don\u0027t retry\n    return KillApplicationResponse.newInstance(\n        application.getApplicationSubmissionContext().getUnmanagedAM());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "5c95bb315ba605b3bed77966a99a63854234e2c5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5382. RM does not audit log kill request for active applications. Contributed by Vrushali C\n",
      "commitDate": "10/08/16 11:25 AM",
      "commitName": "5c95bb315ba605b3bed77966a99a63854234e2c5",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "89e5c44f9e891a3579384c3fa3766937cd4970f1",
      "commitAuthorOld": "Li Lu",
      "daysBetweenCommits": 31.11,
      "commitsBetweenForRepo": 275,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,56 @@\n   public KillApplicationResponse forceKillApplication(\n       KillApplicationRequest request) throws YarnException {\n \n     ApplicationId applicationId \u003d request.getApplicationId();\n     CallerContext callerContext \u003d CallerContext.getCurrent();\n \n     UserGroupInformation callerUGI;\n     try {\n       callerUGI \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException ie) {\n       LOG.info(\"Error getting UGI \", ie);\n       RMAuditLogger.logFailure(\"UNKNOWN\", AuditConstants.KILL_APP_REQUEST,\n           \"UNKNOWN\", \"ClientRMService\" , \"Error getting UGI\",\n           applicationId, callerContext);\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n     RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n     if (application \u003d\u003d null) {\n       RMAuditLogger.logFailure(callerUGI.getUserName(),\n           AuditConstants.KILL_APP_REQUEST, \"UNKNOWN\", \"ClientRMService\",\n           \"Trying to kill an absent application\", applicationId, callerContext);\n       throw new ApplicationNotFoundException(\"Trying to kill an absent\"\n           + \" application \" + applicationId);\n     }\n \n     if (!checkAccess(callerUGI, application.getUser(),\n         ApplicationAccessType.MODIFY_APP, application)) {\n       RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n           AuditConstants.KILL_APP_REQUEST,\n           \"User doesn\u0027t have permissions to \"\n               + ApplicationAccessType.MODIFY_APP.toString(), \"ClientRMService\",\n           AuditConstants.UNAUTHORIZED_USER, applicationId, callerContext);\n       throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n           + callerUGI.getShortUserName() + \" cannot perform operation \"\n           + ApplicationAccessType.MODIFY_APP.name() + \" on \" + applicationId));\n     }\n \n     if (application.isAppFinalStateStored()) {\n-      RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n-          AuditConstants.KILL_APP_REQUEST, \"ClientRMService\", applicationId,\n-          callerContext);\n       return KillApplicationResponse.newInstance(true);\n     }\n \n-    String message \u003d \"Kill application \" + applicationId +\n-        \" received from \" + callerUGI;\n-    if(null !\u003d Server.getRemoteAddress()) {\n-      message +\u003d \" at \" + Server.getRemoteAddress();\n+    String message \u003d \"Kill application \" + applicationId + \" received from \"\n+        + callerUGI;\n+    InetAddress remoteAddress \u003d Server.getRemoteIp();\n+    if (null !\u003d remoteAddress) {\n+      message +\u003d \" at \" + remoteAddress.getHostAddress();\n     }\n-    this.rmContext.getDispatcher().getEventHandler().handle(\n-        new RMAppEvent(applicationId, RMAppEventType.KILL,\n-        message));\n+    this.rmContext.getDispatcher().getEventHandler()\n+        .handle(new RMAppKillByClientEvent(applicationId, message, callerUGI,\n+            remoteAddress));\n \n     // For UnmanagedAMs, return true so they don\u0027t retry\n     return KillApplicationResponse.newInstance(\n         application.getApplicationSubmissionContext().getUnmanagedAM());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public KillApplicationResponse forceKillApplication(\n      KillApplicationRequest request) throws YarnException {\n\n    ApplicationId applicationId \u003d request.getApplicationId();\n    CallerContext callerContext \u003d CallerContext.getCurrent();\n\n    UserGroupInformation callerUGI;\n    try {\n      callerUGI \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ie) {\n      LOG.info(\"Error getting UGI \", ie);\n      RMAuditLogger.logFailure(\"UNKNOWN\", AuditConstants.KILL_APP_REQUEST,\n          \"UNKNOWN\", \"ClientRMService\" , \"Error getting UGI\",\n          applicationId, callerContext);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n    if (application \u003d\u003d null) {\n      RMAuditLogger.logFailure(callerUGI.getUserName(),\n          AuditConstants.KILL_APP_REQUEST, \"UNKNOWN\", \"ClientRMService\",\n          \"Trying to kill an absent application\", applicationId, callerContext);\n      throw new ApplicationNotFoundException(\"Trying to kill an absent\"\n          + \" application \" + applicationId);\n    }\n\n    if (!checkAccess(callerUGI, application.getUser(),\n        ApplicationAccessType.MODIFY_APP, application)) {\n      RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n          AuditConstants.KILL_APP_REQUEST,\n          \"User doesn\u0027t have permissions to \"\n              + ApplicationAccessType.MODIFY_APP.toString(), \"ClientRMService\",\n          AuditConstants.UNAUTHORIZED_USER, applicationId, callerContext);\n      throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n          + callerUGI.getShortUserName() + \" cannot perform operation \"\n          + ApplicationAccessType.MODIFY_APP.name() + \" on \" + applicationId));\n    }\n\n    if (application.isAppFinalStateStored()) {\n      return KillApplicationResponse.newInstance(true);\n    }\n\n    String message \u003d \"Kill application \" + applicationId + \" received from \"\n        + callerUGI;\n    InetAddress remoteAddress \u003d Server.getRemoteIp();\n    if (null !\u003d remoteAddress) {\n      message +\u003d \" at \" + remoteAddress.getHostAddress();\n    }\n    this.rmContext.getDispatcher().getEventHandler()\n        .handle(new RMAppKillByClientEvent(applicationId, message, callerUGI,\n            remoteAddress));\n\n    // For UnmanagedAMs, return true so they don\u0027t retry\n    return KillApplicationResponse.newInstance(\n        application.getApplicationSubmissionContext().getUnmanagedAM());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "013000fbc2081c2b7e78b790fc6d847de92b9384": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5053. More informative diagnostics when applications killed by a user. Contributed by Eric Badger\n",
      "commitDate": "12/05/16 1:28 PM",
      "commitName": "013000fbc2081c2b7e78b790fc6d847de92b9384",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "06/05/16 3:30 PM",
      "commitNameOld": "23248f63aab74a19dba38d348f2b231c8360770a",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 5.92,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,58 @@\n   public KillApplicationResponse forceKillApplication(\n       KillApplicationRequest request) throws YarnException {\n \n     ApplicationId applicationId \u003d request.getApplicationId();\n     CallerContext callerContext \u003d CallerContext.getCurrent();\n \n     UserGroupInformation callerUGI;\n     try {\n       callerUGI \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException ie) {\n       LOG.info(\"Error getting UGI \", ie);\n       RMAuditLogger.logFailure(\"UNKNOWN\", AuditConstants.KILL_APP_REQUEST,\n           \"UNKNOWN\", \"ClientRMService\" , \"Error getting UGI\",\n           applicationId, callerContext);\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n     RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n     if (application \u003d\u003d null) {\n       RMAuditLogger.logFailure(callerUGI.getUserName(),\n           AuditConstants.KILL_APP_REQUEST, \"UNKNOWN\", \"ClientRMService\",\n           \"Trying to kill an absent application\", applicationId, callerContext);\n       throw new ApplicationNotFoundException(\"Trying to kill an absent\"\n           + \" application \" + applicationId);\n     }\n \n     if (!checkAccess(callerUGI, application.getUser(),\n         ApplicationAccessType.MODIFY_APP, application)) {\n       RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n           AuditConstants.KILL_APP_REQUEST,\n           \"User doesn\u0027t have permissions to \"\n               + ApplicationAccessType.MODIFY_APP.toString(), \"ClientRMService\",\n           AuditConstants.UNAUTHORIZED_USER, applicationId, callerContext);\n       throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n           + callerUGI.getShortUserName() + \" cannot perform operation \"\n           + ApplicationAccessType.MODIFY_APP.name() + \" on \" + applicationId));\n     }\n \n     if (application.isAppFinalStateStored()) {\n       RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n           AuditConstants.KILL_APP_REQUEST, \"ClientRMService\", applicationId,\n           callerContext);\n       return KillApplicationResponse.newInstance(true);\n     }\n \n+    String message \u003d \"Kill application \" + applicationId +\n+        \" received from \" + callerUGI;\n+    if(null !\u003d Server.getRemoteAddress()) {\n+      message +\u003d \" at \" + Server.getRemoteAddress();\n+    }\n     this.rmContext.getDispatcher().getEventHandler().handle(\n         new RMAppEvent(applicationId, RMAppEventType.KILL,\n-        \"Application killed by user.\"));\n+        message));\n \n     // For UnmanagedAMs, return true so they don\u0027t retry\n     return KillApplicationResponse.newInstance(\n         application.getApplicationSubmissionContext().getUnmanagedAM());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public KillApplicationResponse forceKillApplication(\n      KillApplicationRequest request) throws YarnException {\n\n    ApplicationId applicationId \u003d request.getApplicationId();\n    CallerContext callerContext \u003d CallerContext.getCurrent();\n\n    UserGroupInformation callerUGI;\n    try {\n      callerUGI \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ie) {\n      LOG.info(\"Error getting UGI \", ie);\n      RMAuditLogger.logFailure(\"UNKNOWN\", AuditConstants.KILL_APP_REQUEST,\n          \"UNKNOWN\", \"ClientRMService\" , \"Error getting UGI\",\n          applicationId, callerContext);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n    if (application \u003d\u003d null) {\n      RMAuditLogger.logFailure(callerUGI.getUserName(),\n          AuditConstants.KILL_APP_REQUEST, \"UNKNOWN\", \"ClientRMService\",\n          \"Trying to kill an absent application\", applicationId, callerContext);\n      throw new ApplicationNotFoundException(\"Trying to kill an absent\"\n          + \" application \" + applicationId);\n    }\n\n    if (!checkAccess(callerUGI, application.getUser(),\n        ApplicationAccessType.MODIFY_APP, application)) {\n      RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n          AuditConstants.KILL_APP_REQUEST,\n          \"User doesn\u0027t have permissions to \"\n              + ApplicationAccessType.MODIFY_APP.toString(), \"ClientRMService\",\n          AuditConstants.UNAUTHORIZED_USER, applicationId, callerContext);\n      throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n          + callerUGI.getShortUserName() + \" cannot perform operation \"\n          + ApplicationAccessType.MODIFY_APP.name() + \" on \" + applicationId));\n    }\n\n    if (application.isAppFinalStateStored()) {\n      RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n          AuditConstants.KILL_APP_REQUEST, \"ClientRMService\", applicationId,\n          callerContext);\n      return KillApplicationResponse.newInstance(true);\n    }\n\n    String message \u003d \"Kill application \" + applicationId +\n        \" received from \" + callerUGI;\n    if(null !\u003d Server.getRemoteAddress()) {\n      message +\u003d \" at \" + Server.getRemoteAddress();\n    }\n    this.rmContext.getDispatcher().getEventHandler().handle(\n        new RMAppEvent(applicationId, RMAppEventType.KILL,\n        message));\n\n    // For UnmanagedAMs, return true so they don\u0027t retry\n    return KillApplicationResponse.newInstance(\n        application.getApplicationSubmissionContext().getUnmanagedAM());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "8676a118a12165ae5a8b80a2a4596c133471ebc1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4349. Support CallerContext in YARN. Contributed by Wangda Tan\n",
      "commitDate": "23/11/15 5:19 PM",
      "commitName": "8676a118a12165ae5a8b80a2a4596c133471ebc1",
      "commitAuthor": "Jian He",
      "commitDateOld": "22/10/15 6:51 AM",
      "commitNameOld": "2798723a5443d04455b9d79c48d61f435ab52267",
      "commitAuthorOld": "Anubhav Dhoot",
      "daysBetweenCommits": 32.48,
      "commitsBetweenForRepo": 259,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,53 @@\n   public KillApplicationResponse forceKillApplication(\n       KillApplicationRequest request) throws YarnException {\n \n     ApplicationId applicationId \u003d request.getApplicationId();\n+    CallerContext callerContext \u003d CallerContext.getCurrent();\n \n     UserGroupInformation callerUGI;\n     try {\n       callerUGI \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException ie) {\n       LOG.info(\"Error getting UGI \", ie);\n       RMAuditLogger.logFailure(\"UNKNOWN\", AuditConstants.KILL_APP_REQUEST,\n           \"UNKNOWN\", \"ClientRMService\" , \"Error getting UGI\",\n-          applicationId);\n+          applicationId, callerContext);\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n     RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n     if (application \u003d\u003d null) {\n       RMAuditLogger.logFailure(callerUGI.getUserName(),\n           AuditConstants.KILL_APP_REQUEST, \"UNKNOWN\", \"ClientRMService\",\n-          \"Trying to kill an absent application\", applicationId);\n+          \"Trying to kill an absent application\", applicationId, callerContext);\n       throw new ApplicationNotFoundException(\"Trying to kill an absent\"\n           + \" application \" + applicationId);\n     }\n \n     if (!checkAccess(callerUGI, application.getUser(),\n         ApplicationAccessType.MODIFY_APP, application)) {\n       RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n           AuditConstants.KILL_APP_REQUEST,\n           \"User doesn\u0027t have permissions to \"\n               + ApplicationAccessType.MODIFY_APP.toString(), \"ClientRMService\",\n-          AuditConstants.UNAUTHORIZED_USER, applicationId);\n+          AuditConstants.UNAUTHORIZED_USER, applicationId, callerContext);\n       throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n           + callerUGI.getShortUserName() + \" cannot perform operation \"\n           + ApplicationAccessType.MODIFY_APP.name() + \" on \" + applicationId));\n     }\n \n     if (application.isAppFinalStateStored()) {\n       RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n-          AuditConstants.KILL_APP_REQUEST, \"ClientRMService\", applicationId);\n+          AuditConstants.KILL_APP_REQUEST, \"ClientRMService\", applicationId,\n+          callerContext);\n       return KillApplicationResponse.newInstance(true);\n     }\n \n     this.rmContext.getDispatcher().getEventHandler().handle(\n         new RMAppEvent(applicationId, RMAppEventType.KILL,\n         \"Application killed by user.\"));\n \n     // For UnmanagedAMs, return true so they don\u0027t retry\n     return KillApplicationResponse.newInstance(\n         application.getApplicationSubmissionContext().getUnmanagedAM());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public KillApplicationResponse forceKillApplication(\n      KillApplicationRequest request) throws YarnException {\n\n    ApplicationId applicationId \u003d request.getApplicationId();\n    CallerContext callerContext \u003d CallerContext.getCurrent();\n\n    UserGroupInformation callerUGI;\n    try {\n      callerUGI \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ie) {\n      LOG.info(\"Error getting UGI \", ie);\n      RMAuditLogger.logFailure(\"UNKNOWN\", AuditConstants.KILL_APP_REQUEST,\n          \"UNKNOWN\", \"ClientRMService\" , \"Error getting UGI\",\n          applicationId, callerContext);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n    if (application \u003d\u003d null) {\n      RMAuditLogger.logFailure(callerUGI.getUserName(),\n          AuditConstants.KILL_APP_REQUEST, \"UNKNOWN\", \"ClientRMService\",\n          \"Trying to kill an absent application\", applicationId, callerContext);\n      throw new ApplicationNotFoundException(\"Trying to kill an absent\"\n          + \" application \" + applicationId);\n    }\n\n    if (!checkAccess(callerUGI, application.getUser(),\n        ApplicationAccessType.MODIFY_APP, application)) {\n      RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n          AuditConstants.KILL_APP_REQUEST,\n          \"User doesn\u0027t have permissions to \"\n              + ApplicationAccessType.MODIFY_APP.toString(), \"ClientRMService\",\n          AuditConstants.UNAUTHORIZED_USER, applicationId, callerContext);\n      throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n          + callerUGI.getShortUserName() + \" cannot perform operation \"\n          + ApplicationAccessType.MODIFY_APP.name() + \" on \" + applicationId));\n    }\n\n    if (application.isAppFinalStateStored()) {\n      RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n          AuditConstants.KILL_APP_REQUEST, \"ClientRMService\", applicationId,\n          callerContext);\n      return KillApplicationResponse.newInstance(true);\n    }\n\n    this.rmContext.getDispatcher().getEventHandler().handle(\n        new RMAppEvent(applicationId, RMAppEventType.KILL,\n        \"Application killed by user.\"));\n\n    // For UnmanagedAMs, return true so they don\u0027t retry\n    return KillApplicationResponse.newInstance(\n        application.getApplicationSubmissionContext().getUnmanagedAM());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "cf23f2c2b5b4eb9e51de1a66b7aa57dee7ff30b5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4000. RM crashes with NPE if leaf queue becomes parent queue during restart. Contributed by Varun Saxena\n",
      "commitDate": "15/10/15 5:12 PM",
      "commitName": "cf23f2c2b5b4eb9e51de1a66b7aa57dee7ff30b5",
      "commitAuthor": "Jian He",
      "commitDateOld": "09/10/15 7:17 AM",
      "commitNameOld": "a0bca2b5ad2344fda5411d910a3730c85f12a0df",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 6.41,
      "commitsBetweenForRepo": 63,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,51 @@\n   public KillApplicationResponse forceKillApplication(\n       KillApplicationRequest request) throws YarnException {\n \n     ApplicationId applicationId \u003d request.getApplicationId();\n \n     UserGroupInformation callerUGI;\n     try {\n       callerUGI \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException ie) {\n       LOG.info(\"Error getting UGI \", ie);\n       RMAuditLogger.logFailure(\"UNKNOWN\", AuditConstants.KILL_APP_REQUEST,\n           \"UNKNOWN\", \"ClientRMService\" , \"Error getting UGI\",\n           applicationId);\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n     RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n     if (application \u003d\u003d null) {\n       RMAuditLogger.logFailure(callerUGI.getUserName(),\n           AuditConstants.KILL_APP_REQUEST, \"UNKNOWN\", \"ClientRMService\",\n           \"Trying to kill an absent application\", applicationId);\n       throw new ApplicationNotFoundException(\"Trying to kill an absent\"\n           + \" application \" + applicationId);\n     }\n \n     if (!checkAccess(callerUGI, application.getUser(),\n         ApplicationAccessType.MODIFY_APP, application)) {\n       RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n           AuditConstants.KILL_APP_REQUEST,\n           \"User doesn\u0027t have permissions to \"\n               + ApplicationAccessType.MODIFY_APP.toString(), \"ClientRMService\",\n           AuditConstants.UNAUTHORIZED_USER, applicationId);\n       throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n           + callerUGI.getShortUserName() + \" cannot perform operation \"\n           + ApplicationAccessType.MODIFY_APP.name() + \" on \" + applicationId));\n     }\n \n     if (application.isAppFinalStateStored()) {\n       RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n           AuditConstants.KILL_APP_REQUEST, \"ClientRMService\", applicationId);\n       return KillApplicationResponse.newInstance(true);\n     }\n \n-    this.rmContext.getDispatcher().getEventHandler()\n-        .handle(new RMAppEvent(applicationId, RMAppEventType.KILL));\n+    this.rmContext.getDispatcher().getEventHandler().handle(\n+        new RMAppEvent(applicationId, RMAppEventType.KILL,\n+        \"Application killed by user.\"));\n \n     // For UnmanagedAMs, return true so they don\u0027t retry\n     return KillApplicationResponse.newInstance(\n         application.getApplicationSubmissionContext().getUnmanagedAM());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public KillApplicationResponse forceKillApplication(\n      KillApplicationRequest request) throws YarnException {\n\n    ApplicationId applicationId \u003d request.getApplicationId();\n\n    UserGroupInformation callerUGI;\n    try {\n      callerUGI \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ie) {\n      LOG.info(\"Error getting UGI \", ie);\n      RMAuditLogger.logFailure(\"UNKNOWN\", AuditConstants.KILL_APP_REQUEST,\n          \"UNKNOWN\", \"ClientRMService\" , \"Error getting UGI\",\n          applicationId);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n    if (application \u003d\u003d null) {\n      RMAuditLogger.logFailure(callerUGI.getUserName(),\n          AuditConstants.KILL_APP_REQUEST, \"UNKNOWN\", \"ClientRMService\",\n          \"Trying to kill an absent application\", applicationId);\n      throw new ApplicationNotFoundException(\"Trying to kill an absent\"\n          + \" application \" + applicationId);\n    }\n\n    if (!checkAccess(callerUGI, application.getUser(),\n        ApplicationAccessType.MODIFY_APP, application)) {\n      RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n          AuditConstants.KILL_APP_REQUEST,\n          \"User doesn\u0027t have permissions to \"\n              + ApplicationAccessType.MODIFY_APP.toString(), \"ClientRMService\",\n          AuditConstants.UNAUTHORIZED_USER, applicationId);\n      throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n          + callerUGI.getShortUserName() + \" cannot perform operation \"\n          + ApplicationAccessType.MODIFY_APP.name() + \" on \" + applicationId));\n    }\n\n    if (application.isAppFinalStateStored()) {\n      RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n          AuditConstants.KILL_APP_REQUEST, \"ClientRMService\", applicationId);\n      return KillApplicationResponse.newInstance(true);\n    }\n\n    this.rmContext.getDispatcher().getEventHandler().handle(\n        new RMAppEvent(applicationId, RMAppEventType.KILL,\n        \"Application killed by user.\"));\n\n    // For UnmanagedAMs, return true so they don\u0027t retry\n    return KillApplicationResponse.newInstance(\n        application.getApplicationSubmissionContext().getUnmanagedAM());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "7da07461ffadb462567c81ad155d3d1473ad89d7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1793. Fixed ClientRMService#forceKillApplication not killing unmanaged application. Contributed by Karthik Kambatla\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1576023 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/03/14 10:58 AM",
      "commitName": "7da07461ffadb462567c81ad155d3d1473ad89d7",
      "commitAuthor": "Jian He",
      "commitDateOld": "03/03/14 11:41 AM",
      "commitNameOld": "a60434368cdf0fd119d024c2ed10942abdb2e7f1",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 6.93,
      "commitsBetweenForRepo": 65,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,50 @@\n   public KillApplicationResponse forceKillApplication(\n       KillApplicationRequest request) throws YarnException {\n \n     ApplicationId applicationId \u003d request.getApplicationId();\n \n     UserGroupInformation callerUGI;\n     try {\n       callerUGI \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException ie) {\n       LOG.info(\"Error getting UGI \", ie);\n       RMAuditLogger.logFailure(\"UNKNOWN\", AuditConstants.KILL_APP_REQUEST,\n           \"UNKNOWN\", \"ClientRMService\" , \"Error getting UGI\",\n           applicationId);\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n     RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n     if (application \u003d\u003d null) {\n       RMAuditLogger.logFailure(callerUGI.getUserName(),\n           AuditConstants.KILL_APP_REQUEST, \"UNKNOWN\", \"ClientRMService\",\n           \"Trying to kill an absent application\", applicationId);\n       throw new ApplicationNotFoundException(\"Trying to kill an absent\"\n           + \" application \" + applicationId);\n     }\n \n     if (!checkAccess(callerUGI, application.getUser(),\n         ApplicationAccessType.MODIFY_APP, application)) {\n       RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n           AuditConstants.KILL_APP_REQUEST,\n           \"User doesn\u0027t have permissions to \"\n               + ApplicationAccessType.MODIFY_APP.toString(), \"ClientRMService\",\n           AuditConstants.UNAUTHORIZED_USER, applicationId);\n       throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n           + callerUGI.getShortUserName() + \" cannot perform operation \"\n           + ApplicationAccessType.MODIFY_APP.name() + \" on \" + applicationId));\n     }\n \n-    if (application.isAppSafeToTerminate()) {\n+    if (application.isAppFinalStateStored()) {\n       RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n-        AuditConstants.KILL_APP_REQUEST, \"ClientRMService\", applicationId);\n+          AuditConstants.KILL_APP_REQUEST, \"ClientRMService\", applicationId);\n       return KillApplicationResponse.newInstance(true);\n-    } else {\n-      this.rmContext.getDispatcher().getEventHandler()\n-        .handle(new RMAppEvent(applicationId, RMAppEventType.KILL));\n-      return KillApplicationResponse.newInstance(false);\n     }\n+\n+    this.rmContext.getDispatcher().getEventHandler()\n+        .handle(new RMAppEvent(applicationId, RMAppEventType.KILL));\n+\n+    // For UnmanagedAMs, return true so they don\u0027t retry\n+    return KillApplicationResponse.newInstance(\n+        application.getApplicationSubmissionContext().getUnmanagedAM());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public KillApplicationResponse forceKillApplication(\n      KillApplicationRequest request) throws YarnException {\n\n    ApplicationId applicationId \u003d request.getApplicationId();\n\n    UserGroupInformation callerUGI;\n    try {\n      callerUGI \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ie) {\n      LOG.info(\"Error getting UGI \", ie);\n      RMAuditLogger.logFailure(\"UNKNOWN\", AuditConstants.KILL_APP_REQUEST,\n          \"UNKNOWN\", \"ClientRMService\" , \"Error getting UGI\",\n          applicationId);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n    if (application \u003d\u003d null) {\n      RMAuditLogger.logFailure(callerUGI.getUserName(),\n          AuditConstants.KILL_APP_REQUEST, \"UNKNOWN\", \"ClientRMService\",\n          \"Trying to kill an absent application\", applicationId);\n      throw new ApplicationNotFoundException(\"Trying to kill an absent\"\n          + \" application \" + applicationId);\n    }\n\n    if (!checkAccess(callerUGI, application.getUser(),\n        ApplicationAccessType.MODIFY_APP, application)) {\n      RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n          AuditConstants.KILL_APP_REQUEST,\n          \"User doesn\u0027t have permissions to \"\n              + ApplicationAccessType.MODIFY_APP.toString(), \"ClientRMService\",\n          AuditConstants.UNAUTHORIZED_USER, applicationId);\n      throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n          + callerUGI.getShortUserName() + \" cannot perform operation \"\n          + ApplicationAccessType.MODIFY_APP.name() + \" on \" + applicationId));\n    }\n\n    if (application.isAppFinalStateStored()) {\n      RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n          AuditConstants.KILL_APP_REQUEST, \"ClientRMService\", applicationId);\n      return KillApplicationResponse.newInstance(true);\n    }\n\n    this.rmContext.getDispatcher().getEventHandler()\n        .handle(new RMAppEvent(applicationId, RMAppEventType.KILL));\n\n    // For UnmanagedAMs, return true so they don\u0027t retry\n    return KillApplicationResponse.newInstance(\n        application.getApplicationSubmissionContext().getUnmanagedAM());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "b774d7b3de81cda4165a0e86bc2267fda8546cb5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1446. Changed client API to retry killing application till RM acknowledges so as to account for RM crashes/failover. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1551444 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/12/13 6:16 PM",
      "commitName": "b774d7b3de81cda4165a0e86bc2267fda8546cb5",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "07/12/13 7:09 PM",
      "commitNameOld": "e1d3670f4c233696dc673c37b578ce46b44a6876",
      "commitAuthorOld": "Sanford Ryza",
      "daysBetweenCommits": 8.96,
      "commitsBetweenForRepo": 51,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,47 @@\n   public KillApplicationResponse forceKillApplication(\n       KillApplicationRequest request) throws YarnException {\n \n     ApplicationId applicationId \u003d request.getApplicationId();\n \n     UserGroupInformation callerUGI;\n     try {\n       callerUGI \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException ie) {\n       LOG.info(\"Error getting UGI \", ie);\n       RMAuditLogger.logFailure(\"UNKNOWN\", AuditConstants.KILL_APP_REQUEST,\n           \"UNKNOWN\", \"ClientRMService\" , \"Error getting UGI\",\n           applicationId);\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n     RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n     if (application \u003d\u003d null) {\n       RMAuditLogger.logFailure(callerUGI.getUserName(),\n           AuditConstants.KILL_APP_REQUEST, \"UNKNOWN\", \"ClientRMService\",\n           \"Trying to kill an absent application\", applicationId);\n       throw new ApplicationNotFoundException(\"Trying to kill an absent\"\n           + \" application \" + applicationId);\n     }\n \n     if (!checkAccess(callerUGI, application.getUser(),\n         ApplicationAccessType.MODIFY_APP, application)) {\n       RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n           AuditConstants.KILL_APP_REQUEST,\n           \"User doesn\u0027t have permissions to \"\n               + ApplicationAccessType.MODIFY_APP.toString(), \"ClientRMService\",\n           AuditConstants.UNAUTHORIZED_USER, applicationId);\n       throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n           + callerUGI.getShortUserName() + \" cannot perform operation \"\n           + ApplicationAccessType.MODIFY_APP.name() + \" on \" + applicationId));\n     }\n \n-    this.rmContext.getDispatcher().getEventHandler().handle(\n-        new RMAppEvent(applicationId, RMAppEventType.KILL));\n-\n-    RMAuditLogger.logSuccess(callerUGI.getShortUserName(), \n-        AuditConstants.KILL_APP_REQUEST, \"ClientRMService\" , applicationId);\n-    KillApplicationResponse response \u003d recordFactory\n-        .newRecordInstance(KillApplicationResponse.class);\n-    return response;\n+    if (application.isAppSafeToTerminate()) {\n+      RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n+        AuditConstants.KILL_APP_REQUEST, \"ClientRMService\", applicationId);\n+      return KillApplicationResponse.newInstance(true);\n+    } else {\n+      this.rmContext.getDispatcher().getEventHandler()\n+        .handle(new RMAppEvent(applicationId, RMAppEventType.KILL));\n+      return KillApplicationResponse.newInstance(false);\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public KillApplicationResponse forceKillApplication(\n      KillApplicationRequest request) throws YarnException {\n\n    ApplicationId applicationId \u003d request.getApplicationId();\n\n    UserGroupInformation callerUGI;\n    try {\n      callerUGI \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ie) {\n      LOG.info(\"Error getting UGI \", ie);\n      RMAuditLogger.logFailure(\"UNKNOWN\", AuditConstants.KILL_APP_REQUEST,\n          \"UNKNOWN\", \"ClientRMService\" , \"Error getting UGI\",\n          applicationId);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n    if (application \u003d\u003d null) {\n      RMAuditLogger.logFailure(callerUGI.getUserName(),\n          AuditConstants.KILL_APP_REQUEST, \"UNKNOWN\", \"ClientRMService\",\n          \"Trying to kill an absent application\", applicationId);\n      throw new ApplicationNotFoundException(\"Trying to kill an absent\"\n          + \" application \" + applicationId);\n    }\n\n    if (!checkAccess(callerUGI, application.getUser(),\n        ApplicationAccessType.MODIFY_APP, application)) {\n      RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n          AuditConstants.KILL_APP_REQUEST,\n          \"User doesn\u0027t have permissions to \"\n              + ApplicationAccessType.MODIFY_APP.toString(), \"ClientRMService\",\n          AuditConstants.UNAUTHORIZED_USER, applicationId);\n      throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n          + callerUGI.getShortUserName() + \" cannot perform operation \"\n          + ApplicationAccessType.MODIFY_APP.name() + \" on \" + applicationId));\n    }\n\n    if (application.isAppSafeToTerminate()) {\n      RMAuditLogger.logSuccess(callerUGI.getShortUserName(),\n        AuditConstants.KILL_APP_REQUEST, \"ClientRMService\", applicationId);\n      return KillApplicationResponse.newInstance(true);\n    } else {\n      this.rmContext.getDispatcher().getEventHandler()\n        .handle(new RMAppEvent(applicationId, RMAppEventType.KILL));\n      return KillApplicationResponse.newInstance(false);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "1c5b49eeafc2253d4fa92456e6ccf0f35290c889": {
      "type": "Ybodychange",
      "commitMessage": "YARN-899. Added back queue level administrator-acls so that there is no regression w.r.t 1.x. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1527282 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/09/13 1:21 AM",
      "commitName": "1c5b49eeafc2253d4fa92456e6ccf0f35290c889",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "16/09/13 11:33 AM",
      "commitNameOld": "ead3dcc3dea0d5b6d3248c1e1a6300f0714a8456",
      "commitAuthorOld": "Bikas Saha",
      "daysBetweenCommits": 12.57,
      "commitsBetweenForRepo": 75,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   public KillApplicationResponse forceKillApplication(\n       KillApplicationRequest request) throws YarnException {\n \n     ApplicationId applicationId \u003d request.getApplicationId();\n \n     UserGroupInformation callerUGI;\n     try {\n       callerUGI \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException ie) {\n       LOG.info(\"Error getting UGI \", ie);\n       RMAuditLogger.logFailure(\"UNKNOWN\", AuditConstants.KILL_APP_REQUEST,\n           \"UNKNOWN\", \"ClientRMService\" , \"Error getting UGI\",\n           applicationId);\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n     RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n     if (application \u003d\u003d null) {\n       RMAuditLogger.logFailure(callerUGI.getUserName(),\n           AuditConstants.KILL_APP_REQUEST, \"UNKNOWN\", \"ClientRMService\",\n           \"Trying to kill an absent application\", applicationId);\n       throw new ApplicationNotFoundException(\"Trying to kill an absent\"\n           + \" application \" + applicationId);\n     }\n \n     if (!checkAccess(callerUGI, application.getUser(),\n-        ApplicationAccessType.MODIFY_APP, applicationId)) {\n+        ApplicationAccessType.MODIFY_APP, application)) {\n       RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n           AuditConstants.KILL_APP_REQUEST,\n           \"User doesn\u0027t have permissions to \"\n               + ApplicationAccessType.MODIFY_APP.toString(), \"ClientRMService\",\n           AuditConstants.UNAUTHORIZED_USER, applicationId);\n       throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n           + callerUGI.getShortUserName() + \" cannot perform operation \"\n           + ApplicationAccessType.MODIFY_APP.name() + \" on \" + applicationId));\n     }\n \n     this.rmContext.getDispatcher().getEventHandler().handle(\n         new RMAppEvent(applicationId, RMAppEventType.KILL));\n \n     RMAuditLogger.logSuccess(callerUGI.getShortUserName(), \n         AuditConstants.KILL_APP_REQUEST, \"ClientRMService\" , applicationId);\n     KillApplicationResponse response \u003d recordFactory\n         .newRecordInstance(KillApplicationResponse.class);\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public KillApplicationResponse forceKillApplication(\n      KillApplicationRequest request) throws YarnException {\n\n    ApplicationId applicationId \u003d request.getApplicationId();\n\n    UserGroupInformation callerUGI;\n    try {\n      callerUGI \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ie) {\n      LOG.info(\"Error getting UGI \", ie);\n      RMAuditLogger.logFailure(\"UNKNOWN\", AuditConstants.KILL_APP_REQUEST,\n          \"UNKNOWN\", \"ClientRMService\" , \"Error getting UGI\",\n          applicationId);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n    if (application \u003d\u003d null) {\n      RMAuditLogger.logFailure(callerUGI.getUserName(),\n          AuditConstants.KILL_APP_REQUEST, \"UNKNOWN\", \"ClientRMService\",\n          \"Trying to kill an absent application\", applicationId);\n      throw new ApplicationNotFoundException(\"Trying to kill an absent\"\n          + \" application \" + applicationId);\n    }\n\n    if (!checkAccess(callerUGI, application.getUser(),\n        ApplicationAccessType.MODIFY_APP, application)) {\n      RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n          AuditConstants.KILL_APP_REQUEST,\n          \"User doesn\u0027t have permissions to \"\n              + ApplicationAccessType.MODIFY_APP.toString(), \"ClientRMService\",\n          AuditConstants.UNAUTHORIZED_USER, applicationId);\n      throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n          + callerUGI.getShortUserName() + \" cannot perform operation \"\n          + ApplicationAccessType.MODIFY_APP.name() + \" on \" + applicationId));\n    }\n\n    this.rmContext.getDispatcher().getEventHandler().handle(\n        new RMAppEvent(applicationId, RMAppEventType.KILL));\n\n    RMAuditLogger.logSuccess(callerUGI.getShortUserName(), \n        AuditConstants.KILL_APP_REQUEST, \"ClientRMService\" , applicationId);\n    KillApplicationResponse response \u003d recordFactory\n        .newRecordInstance(KillApplicationResponse.class);\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "1ad3fe46332586cea73c47ba06342f91359db561": {
      "type": "Ybodychange",
      "commitMessage": "YARN-107. Fixed ResourceManager and clients to better handle forceKillApplication on non-running and finished applications. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1514918 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/08/13 4:00 PM",
      "commitName": "1ad3fe46332586cea73c47ba06342f91359db561",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "24/07/13 2:34 PM",
      "commitNameOld": "ed6598791e63f8086c5a04b93dad9b241b8514c8",
      "commitAuthorOld": "Bikas Saha",
      "daysBetweenCommits": 23.06,
      "commitsBetweenForRepo": 157,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,46 @@\n   public KillApplicationResponse forceKillApplication(\n       KillApplicationRequest request) throws YarnException {\n \n     ApplicationId applicationId \u003d request.getApplicationId();\n \n     UserGroupInformation callerUGI;\n     try {\n       callerUGI \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException ie) {\n       LOG.info(\"Error getting UGI \", ie);\n       RMAuditLogger.logFailure(\"UNKNOWN\", AuditConstants.KILL_APP_REQUEST,\n           \"UNKNOWN\", \"ClientRMService\" , \"Error getting UGI\",\n           applicationId);\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n     RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n     if (application \u003d\u003d null) {\n       RMAuditLogger.logFailure(callerUGI.getUserName(),\n           AuditConstants.KILL_APP_REQUEST, \"UNKNOWN\", \"ClientRMService\",\n           \"Trying to kill an absent application\", applicationId);\n-      throw RPCUtil\n-          .getRemoteException(\"Trying to kill an absent application \"\n-              + applicationId);\n+      throw new ApplicationNotFoundException(\"Trying to kill an absent\"\n+          + \" application \" + applicationId);\n     }\n \n     if (!checkAccess(callerUGI, application.getUser(),\n         ApplicationAccessType.MODIFY_APP, applicationId)) {\n       RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n           AuditConstants.KILL_APP_REQUEST,\n           \"User doesn\u0027t have permissions to \"\n               + ApplicationAccessType.MODIFY_APP.toString(), \"ClientRMService\",\n           AuditConstants.UNAUTHORIZED_USER, applicationId);\n       throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n           + callerUGI.getShortUserName() + \" cannot perform operation \"\n           + ApplicationAccessType.MODIFY_APP.name() + \" on \" + applicationId));\n     }\n \n     this.rmContext.getDispatcher().getEventHandler().handle(\n         new RMAppEvent(applicationId, RMAppEventType.KILL));\n \n     RMAuditLogger.logSuccess(callerUGI.getShortUserName(), \n         AuditConstants.KILL_APP_REQUEST, \"ClientRMService\" , applicationId);\n     KillApplicationResponse response \u003d recordFactory\n         .newRecordInstance(KillApplicationResponse.class);\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public KillApplicationResponse forceKillApplication(\n      KillApplicationRequest request) throws YarnException {\n\n    ApplicationId applicationId \u003d request.getApplicationId();\n\n    UserGroupInformation callerUGI;\n    try {\n      callerUGI \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ie) {\n      LOG.info(\"Error getting UGI \", ie);\n      RMAuditLogger.logFailure(\"UNKNOWN\", AuditConstants.KILL_APP_REQUEST,\n          \"UNKNOWN\", \"ClientRMService\" , \"Error getting UGI\",\n          applicationId);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n    if (application \u003d\u003d null) {\n      RMAuditLogger.logFailure(callerUGI.getUserName(),\n          AuditConstants.KILL_APP_REQUEST, \"UNKNOWN\", \"ClientRMService\",\n          \"Trying to kill an absent application\", applicationId);\n      throw new ApplicationNotFoundException(\"Trying to kill an absent\"\n          + \" application \" + applicationId);\n    }\n\n    if (!checkAccess(callerUGI, application.getUser(),\n        ApplicationAccessType.MODIFY_APP, applicationId)) {\n      RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n          AuditConstants.KILL_APP_REQUEST,\n          \"User doesn\u0027t have permissions to \"\n              + ApplicationAccessType.MODIFY_APP.toString(), \"ClientRMService\",\n          AuditConstants.UNAUTHORIZED_USER, applicationId);\n      throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n          + callerUGI.getShortUserName() + \" cannot perform operation \"\n          + ApplicationAccessType.MODIFY_APP.name() + \" on \" + applicationId));\n    }\n\n    this.rmContext.getDispatcher().getEventHandler().handle(\n        new RMAppEvent(applicationId, RMAppEventType.KILL));\n\n    RMAuditLogger.logSuccess(callerUGI.getShortUserName(), \n        AuditConstants.KILL_APP_REQUEST, \"ClientRMService\" , applicationId);\n    KillApplicationResponse response \u003d recordFactory\n        .newRecordInstance(KillApplicationResponse.class);\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "a83fb61ac07c0468cbc7a38526e92683883dd932": {
      "type": "Yexceptionschange",
      "commitMessage": "YARN-635. Renamed YarnRemoteException to YarnException. Contributed by Siddharth Seth.\nMAPREDUCE-5301. Updated MR code to work with YARN-635 changes of renaming YarnRemoteException to YarnException. Contributed by Siddharth Seth\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489283 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/06/13 9:05 PM",
      "commitName": "a83fb61ac07c0468cbc7a38526e92683883dd932",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "03/06/13 5:34 PM",
      "commitNameOld": "d33534c4fb35cb82ff8d56abeeb63a949e72a031",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.15,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n   public KillApplicationResponse forceKillApplication(\n-      KillApplicationRequest request) throws YarnRemoteException {\n+      KillApplicationRequest request) throws YarnException {\n \n     ApplicationId applicationId \u003d request.getApplicationId();\n \n     UserGroupInformation callerUGI;\n     try {\n       callerUGI \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException ie) {\n       LOG.info(\"Error getting UGI \", ie);\n       RMAuditLogger.logFailure(\"UNKNOWN\", AuditConstants.KILL_APP_REQUEST,\n           \"UNKNOWN\", \"ClientRMService\" , \"Error getting UGI\",\n           applicationId);\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n     RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n     if (application \u003d\u003d null) {\n       RMAuditLogger.logFailure(callerUGI.getUserName(),\n           AuditConstants.KILL_APP_REQUEST, \"UNKNOWN\", \"ClientRMService\",\n           \"Trying to kill an absent application\", applicationId);\n       throw RPCUtil\n           .getRemoteException(\"Trying to kill an absent application \"\n               + applicationId);\n     }\n \n     if (!checkAccess(callerUGI, application.getUser(),\n         ApplicationAccessType.MODIFY_APP, applicationId)) {\n       RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n           AuditConstants.KILL_APP_REQUEST,\n           \"User doesn\u0027t have permissions to \"\n               + ApplicationAccessType.MODIFY_APP.toString(), \"ClientRMService\",\n           AuditConstants.UNAUTHORIZED_USER, applicationId);\n       throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n           + callerUGI.getShortUserName() + \" cannot perform operation \"\n           + ApplicationAccessType.MODIFY_APP.name() + \" on \" + applicationId));\n     }\n \n     this.rmContext.getDispatcher().getEventHandler().handle(\n         new RMAppEvent(applicationId, RMAppEventType.KILL));\n \n     RMAuditLogger.logSuccess(callerUGI.getShortUserName(), \n         AuditConstants.KILL_APP_REQUEST, \"ClientRMService\" , applicationId);\n     KillApplicationResponse response \u003d recordFactory\n         .newRecordInstance(KillApplicationResponse.class);\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public KillApplicationResponse forceKillApplication(\n      KillApplicationRequest request) throws YarnException {\n\n    ApplicationId applicationId \u003d request.getApplicationId();\n\n    UserGroupInformation callerUGI;\n    try {\n      callerUGI \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ie) {\n      LOG.info(\"Error getting UGI \", ie);\n      RMAuditLogger.logFailure(\"UNKNOWN\", AuditConstants.KILL_APP_REQUEST,\n          \"UNKNOWN\", \"ClientRMService\" , \"Error getting UGI\",\n          applicationId);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n    if (application \u003d\u003d null) {\n      RMAuditLogger.logFailure(callerUGI.getUserName(),\n          AuditConstants.KILL_APP_REQUEST, \"UNKNOWN\", \"ClientRMService\",\n          \"Trying to kill an absent application\", applicationId);\n      throw RPCUtil\n          .getRemoteException(\"Trying to kill an absent application \"\n              + applicationId);\n    }\n\n    if (!checkAccess(callerUGI, application.getUser(),\n        ApplicationAccessType.MODIFY_APP, applicationId)) {\n      RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n          AuditConstants.KILL_APP_REQUEST,\n          \"User doesn\u0027t have permissions to \"\n              + ApplicationAccessType.MODIFY_APP.toString(), \"ClientRMService\",\n          AuditConstants.UNAUTHORIZED_USER, applicationId);\n      throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n          + callerUGI.getShortUserName() + \" cannot perform operation \"\n          + ApplicationAccessType.MODIFY_APP.name() + \" on \" + applicationId));\n    }\n\n    this.rmContext.getDispatcher().getEventHandler().handle(\n        new RMAppEvent(applicationId, RMAppEventType.KILL));\n\n    RMAuditLogger.logSuccess(callerUGI.getShortUserName(), \n        AuditConstants.KILL_APP_REQUEST, \"ClientRMService\" , applicationId);\n    KillApplicationResponse response \u003d recordFactory\n        .newRecordInstance(KillApplicationResponse.class);\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {
        "oldValue": "[YarnRemoteException]",
        "newValue": "[YarnException]"
      }
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public KillApplicationResponse forceKillApplication(\n      KillApplicationRequest request) throws YarnRemoteException {\n\n    ApplicationId applicationId \u003d request.getApplicationId();\n\n    UserGroupInformation callerUGI;\n    try {\n      callerUGI \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ie) {\n      LOG.info(\"Error getting UGI \", ie);\n      RMAuditLogger.logFailure(\"UNKNOWN\", AuditConstants.KILL_APP_REQUEST,\n          \"UNKNOWN\", \"ClientRMService\" , \"Error getting UGI\",\n          applicationId);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n    if (application \u003d\u003d null) {\n      RMAuditLogger.logFailure(callerUGI.getUserName(),\n          AuditConstants.KILL_APP_REQUEST, \"UNKNOWN\", \"ClientRMService\",\n          \"Trying to kill an absent application\", applicationId);\n      throw RPCUtil\n          .getRemoteException(\"Trying to kill an absent application \"\n              + applicationId);\n    }\n\n    if (!checkAccess(callerUGI, application.getUser(),\n        ApplicationAccessType.MODIFY_APP, applicationId)) {\n      RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n          AuditConstants.KILL_APP_REQUEST,\n          \"User doesn\u0027t have permissions to \"\n              + ApplicationAccessType.MODIFY_APP.toString(), \"ClientRMService\",\n          AuditConstants.UNAUTHORIZED_USER, applicationId);\n      throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n          + callerUGI.getShortUserName() + \" cannot perform operation \"\n          + ApplicationAccessType.MODIFY_APP.name() + \" on \" + applicationId));\n    }\n\n    this.rmContext.getDispatcher().getEventHandler().handle(\n        new RMAppEvent(applicationId, RMAppEventType.KILL));\n\n    RMAuditLogger.logSuccess(callerUGI.getShortUserName(), \n        AuditConstants.KILL_APP_REQUEST, \"ClientRMService\" , applicationId);\n    KillApplicationResponse response \u003d recordFactory\n        .newRecordInstance(KillApplicationResponse.class);\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java"
      }
    },
    "df2991c0cbc3f35c2640b93680667507c4f810dd": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3104. Implemented Application-acls. (vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1186748 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/10/11 4:45 AM",
      "commitName": "df2991c0cbc3f35c2640b93680667507c4f810dd",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "18/10/11 10:21 PM",
      "commitNameOld": "13e4562924a6cb3d16c262e0f595b2ffbf9e0546",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 1.27,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,47 @@\n   public KillApplicationResponse forceKillApplication(\n       KillApplicationRequest request) throws YarnRemoteException {\n \n     ApplicationId applicationId \u003d request.getApplicationId();\n \n     UserGroupInformation callerUGI;\n     try {\n       callerUGI \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException ie) {\n       LOG.info(\"Error getting UGI \", ie);\n       RMAuditLogger.logFailure(\"UNKNOWN\", AuditConstants.KILL_APP_REQUEST,\n           \"UNKNOWN\", \"ClientRMService\" , \"Error getting UGI\",\n           applicationId);\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n     RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n-    // TODO: What if null\n+    if (application \u003d\u003d null) {\n+      RMAuditLogger.logFailure(callerUGI.getUserName(),\n+          AuditConstants.KILL_APP_REQUEST, \"UNKNOWN\", \"ClientRMService\",\n+          \"Trying to kill an absent application\", applicationId);\n+      throw RPCUtil\n+          .getRemoteException(\"Trying to kill an absent application \"\n+              + applicationId);\n+    }\n+\n     if (!checkAccess(callerUGI, application.getUser(),\n-        ApplicationACL.MODIFY_APP)) {\n-      RMAuditLogger.logFailure(callerUGI.getShortUserName(), \n-          AuditConstants.KILL_APP_REQUEST, \n-          \"User doesn\u0027t have MODIFY_APP permissions\", \"ClientRMService\",\n+        ApplicationAccessType.MODIFY_APP, applicationId)) {\n+      RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n+          AuditConstants.KILL_APP_REQUEST,\n+          \"User doesn\u0027t have permissions to \"\n+              + ApplicationAccessType.MODIFY_APP.toString(), \"ClientRMService\",\n           AuditConstants.UNAUTHORIZED_USER, applicationId);\n       throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n           + callerUGI.getShortUserName() + \" cannot perform operation \"\n-          + ApplicationACL.MODIFY_APP.name() + \" on \" + applicationId));\n+          + ApplicationAccessType.MODIFY_APP.name() + \" on \" + applicationId));\n     }\n \n     this.rmContext.getDispatcher().getEventHandler().handle(\n         new RMAppEvent(applicationId, RMAppEventType.KILL));\n \n     RMAuditLogger.logSuccess(callerUGI.getShortUserName(), \n         AuditConstants.KILL_APP_REQUEST, \"ClientRMService\" , applicationId);\n     KillApplicationResponse response \u003d recordFactory\n         .newRecordInstance(KillApplicationResponse.class);\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public KillApplicationResponse forceKillApplication(\n      KillApplicationRequest request) throws YarnRemoteException {\n\n    ApplicationId applicationId \u003d request.getApplicationId();\n\n    UserGroupInformation callerUGI;\n    try {\n      callerUGI \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ie) {\n      LOG.info(\"Error getting UGI \", ie);\n      RMAuditLogger.logFailure(\"UNKNOWN\", AuditConstants.KILL_APP_REQUEST,\n          \"UNKNOWN\", \"ClientRMService\" , \"Error getting UGI\",\n          applicationId);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n    if (application \u003d\u003d null) {\n      RMAuditLogger.logFailure(callerUGI.getUserName(),\n          AuditConstants.KILL_APP_REQUEST, \"UNKNOWN\", \"ClientRMService\",\n          \"Trying to kill an absent application\", applicationId);\n      throw RPCUtil\n          .getRemoteException(\"Trying to kill an absent application \"\n              + applicationId);\n    }\n\n    if (!checkAccess(callerUGI, application.getUser(),\n        ApplicationAccessType.MODIFY_APP, applicationId)) {\n      RMAuditLogger.logFailure(callerUGI.getShortUserName(),\n          AuditConstants.KILL_APP_REQUEST,\n          \"User doesn\u0027t have permissions to \"\n              + ApplicationAccessType.MODIFY_APP.toString(), \"ClientRMService\",\n          AuditConstants.UNAUTHORIZED_USER, applicationId);\n      throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n          + callerUGI.getShortUserName() + \" cannot perform operation \"\n          + ApplicationAccessType.MODIFY_APP.name() + \" on \" + applicationId));\n    }\n\n    this.rmContext.getDispatcher().getEventHandler().handle(\n        new RMAppEvent(applicationId, RMAppEventType.KILL));\n\n    RMAuditLogger.logSuccess(callerUGI.getShortUserName(), \n        AuditConstants.KILL_APP_REQUEST, \"ClientRMService\" , applicationId);\n    KillApplicationResponse response \u003d recordFactory\n        .newRecordInstance(KillApplicationResponse.class);\n    return response;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "0d2bb0623696c2cc822cb44e431345b2c773dbff": {
      "type": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "MAPREDUCE-3054. Unable to kill submitted jobs. (mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1176600 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/09/11 1:30 PM",
      "commitName": "0d2bb0623696c2cc822cb44e431345b2c773dbff",
      "commitAuthor": "Mahadev Konar",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "MAPREDUCE-3054. Unable to kill submitted jobs. (mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1176600 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "27/09/11 1:30 PM",
          "commitName": "0d2bb0623696c2cc822cb44e431345b2c773dbff",
          "commitAuthor": "Mahadev Konar",
          "commitDateOld": "14/09/11 12:26 AM",
          "commitNameOld": "88b82a0f6687ce103817fbb460fd30d870f717a0",
          "commitAuthorOld": "Mahadev Konar",
          "daysBetweenCommits": 13.54,
          "commitsBetweenForRepo": 84,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,38 @@\n-  public FinishApplicationResponse finishApplication(\n-      FinishApplicationRequest request) throws YarnRemoteException {\n+  public KillApplicationResponse forceKillApplication(\n+      KillApplicationRequest request) throws YarnRemoteException {\n \n     ApplicationId applicationId \u003d request.getApplicationId();\n \n     UserGroupInformation callerUGI;\n     try {\n       callerUGI \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException ie) {\n       LOG.info(\"Error getting UGI \", ie);\n       RMAuditLogger.logFailure(\"UNKNOWN\", AuditConstants.KILL_APP_REQUEST,\n           \"UNKNOWN\", \"ClientRMService\" , \"Error getting UGI\",\n           applicationId);\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n     RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n     // TODO: What if null\n     if (!checkAccess(callerUGI, application.getUser(),\n         ApplicationACL.MODIFY_APP)) {\n       RMAuditLogger.logFailure(callerUGI.getShortUserName(), \n           AuditConstants.KILL_APP_REQUEST, \n           \"User doesn\u0027t have MODIFY_APP permissions\", \"ClientRMService\",\n           AuditConstants.UNAUTHORIZED_USER, applicationId);\n       throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n           + callerUGI.getShortUserName() + \" cannot perform operation \"\n           + ApplicationACL.MODIFY_APP.name() + \" on \" + applicationId));\n     }\n \n     this.rmContext.getDispatcher().getEventHandler().handle(\n         new RMAppEvent(applicationId, RMAppEventType.KILL));\n \n     RMAuditLogger.logSuccess(callerUGI.getShortUserName(), \n         AuditConstants.KILL_APP_REQUEST, \"ClientRMService\" , applicationId);\n-    FinishApplicationResponse response \u003d recordFactory\n-        .newRecordInstance(FinishApplicationResponse.class);\n+    KillApplicationResponse response \u003d recordFactory\n+        .newRecordInstance(KillApplicationResponse.class);\n     return response;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public KillApplicationResponse forceKillApplication(\n      KillApplicationRequest request) throws YarnRemoteException {\n\n    ApplicationId applicationId \u003d request.getApplicationId();\n\n    UserGroupInformation callerUGI;\n    try {\n      callerUGI \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ie) {\n      LOG.info(\"Error getting UGI \", ie);\n      RMAuditLogger.logFailure(\"UNKNOWN\", AuditConstants.KILL_APP_REQUEST,\n          \"UNKNOWN\", \"ClientRMService\" , \"Error getting UGI\",\n          applicationId);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n    // TODO: What if null\n    if (!checkAccess(callerUGI, application.getUser(),\n        ApplicationACL.MODIFY_APP)) {\n      RMAuditLogger.logFailure(callerUGI.getShortUserName(), \n          AuditConstants.KILL_APP_REQUEST, \n          \"User doesn\u0027t have MODIFY_APP permissions\", \"ClientRMService\",\n          AuditConstants.UNAUTHORIZED_USER, applicationId);\n      throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n          + callerUGI.getShortUserName() + \" cannot perform operation \"\n          + ApplicationACL.MODIFY_APP.name() + \" on \" + applicationId));\n    }\n\n    this.rmContext.getDispatcher().getEventHandler().handle(\n        new RMAppEvent(applicationId, RMAppEventType.KILL));\n\n    RMAuditLogger.logSuccess(callerUGI.getShortUserName(), \n        AuditConstants.KILL_APP_REQUEST, \"ClientRMService\" , applicationId);\n    KillApplicationResponse response \u003d recordFactory\n        .newRecordInstance(KillApplicationResponse.class);\n    return response;\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
          "extendedDetails": {
            "oldValue": "finishApplication",
            "newValue": "forceKillApplication"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-3054. Unable to kill submitted jobs. (mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1176600 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "27/09/11 1:30 PM",
          "commitName": "0d2bb0623696c2cc822cb44e431345b2c773dbff",
          "commitAuthor": "Mahadev Konar",
          "commitDateOld": "14/09/11 12:26 AM",
          "commitNameOld": "88b82a0f6687ce103817fbb460fd30d870f717a0",
          "commitAuthorOld": "Mahadev Konar",
          "daysBetweenCommits": 13.54,
          "commitsBetweenForRepo": 84,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,38 @@\n-  public FinishApplicationResponse finishApplication(\n-      FinishApplicationRequest request) throws YarnRemoteException {\n+  public KillApplicationResponse forceKillApplication(\n+      KillApplicationRequest request) throws YarnRemoteException {\n \n     ApplicationId applicationId \u003d request.getApplicationId();\n \n     UserGroupInformation callerUGI;\n     try {\n       callerUGI \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException ie) {\n       LOG.info(\"Error getting UGI \", ie);\n       RMAuditLogger.logFailure(\"UNKNOWN\", AuditConstants.KILL_APP_REQUEST,\n           \"UNKNOWN\", \"ClientRMService\" , \"Error getting UGI\",\n           applicationId);\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n     RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n     // TODO: What if null\n     if (!checkAccess(callerUGI, application.getUser(),\n         ApplicationACL.MODIFY_APP)) {\n       RMAuditLogger.logFailure(callerUGI.getShortUserName(), \n           AuditConstants.KILL_APP_REQUEST, \n           \"User doesn\u0027t have MODIFY_APP permissions\", \"ClientRMService\",\n           AuditConstants.UNAUTHORIZED_USER, applicationId);\n       throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n           + callerUGI.getShortUserName() + \" cannot perform operation \"\n           + ApplicationACL.MODIFY_APP.name() + \" on \" + applicationId));\n     }\n \n     this.rmContext.getDispatcher().getEventHandler().handle(\n         new RMAppEvent(applicationId, RMAppEventType.KILL));\n \n     RMAuditLogger.logSuccess(callerUGI.getShortUserName(), \n         AuditConstants.KILL_APP_REQUEST, \"ClientRMService\" , applicationId);\n-    FinishApplicationResponse response \u003d recordFactory\n-        .newRecordInstance(FinishApplicationResponse.class);\n+    KillApplicationResponse response \u003d recordFactory\n+        .newRecordInstance(KillApplicationResponse.class);\n     return response;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public KillApplicationResponse forceKillApplication(\n      KillApplicationRequest request) throws YarnRemoteException {\n\n    ApplicationId applicationId \u003d request.getApplicationId();\n\n    UserGroupInformation callerUGI;\n    try {\n      callerUGI \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ie) {\n      LOG.info(\"Error getting UGI \", ie);\n      RMAuditLogger.logFailure(\"UNKNOWN\", AuditConstants.KILL_APP_REQUEST,\n          \"UNKNOWN\", \"ClientRMService\" , \"Error getting UGI\",\n          applicationId);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n    // TODO: What if null\n    if (!checkAccess(callerUGI, application.getUser(),\n        ApplicationACL.MODIFY_APP)) {\n      RMAuditLogger.logFailure(callerUGI.getShortUserName(), \n          AuditConstants.KILL_APP_REQUEST, \n          \"User doesn\u0027t have MODIFY_APP permissions\", \"ClientRMService\",\n          AuditConstants.UNAUTHORIZED_USER, applicationId);\n      throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n          + callerUGI.getShortUserName() + \" cannot perform operation \"\n          + ApplicationACL.MODIFY_APP.name() + \" on \" + applicationId));\n    }\n\n    this.rmContext.getDispatcher().getEventHandler().handle(\n        new RMAppEvent(applicationId, RMAppEventType.KILL));\n\n    RMAuditLogger.logSuccess(callerUGI.getShortUserName(), \n        AuditConstants.KILL_APP_REQUEST, \"ClientRMService\" , applicationId);\n    KillApplicationResponse response \u003d recordFactory\n        .newRecordInstance(KillApplicationResponse.class);\n    return response;\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
          "extendedDetails": {
            "oldValue": "[request-FinishApplicationRequest]",
            "newValue": "[request-KillApplicationRequest]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "MAPREDUCE-3054. Unable to kill submitted jobs. (mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1176600 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "27/09/11 1:30 PM",
          "commitName": "0d2bb0623696c2cc822cb44e431345b2c773dbff",
          "commitAuthor": "Mahadev Konar",
          "commitDateOld": "14/09/11 12:26 AM",
          "commitNameOld": "88b82a0f6687ce103817fbb460fd30d870f717a0",
          "commitAuthorOld": "Mahadev Konar",
          "daysBetweenCommits": 13.54,
          "commitsBetweenForRepo": 84,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,38 @@\n-  public FinishApplicationResponse finishApplication(\n-      FinishApplicationRequest request) throws YarnRemoteException {\n+  public KillApplicationResponse forceKillApplication(\n+      KillApplicationRequest request) throws YarnRemoteException {\n \n     ApplicationId applicationId \u003d request.getApplicationId();\n \n     UserGroupInformation callerUGI;\n     try {\n       callerUGI \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException ie) {\n       LOG.info(\"Error getting UGI \", ie);\n       RMAuditLogger.logFailure(\"UNKNOWN\", AuditConstants.KILL_APP_REQUEST,\n           \"UNKNOWN\", \"ClientRMService\" , \"Error getting UGI\",\n           applicationId);\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n     RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n     // TODO: What if null\n     if (!checkAccess(callerUGI, application.getUser(),\n         ApplicationACL.MODIFY_APP)) {\n       RMAuditLogger.logFailure(callerUGI.getShortUserName(), \n           AuditConstants.KILL_APP_REQUEST, \n           \"User doesn\u0027t have MODIFY_APP permissions\", \"ClientRMService\",\n           AuditConstants.UNAUTHORIZED_USER, applicationId);\n       throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n           + callerUGI.getShortUserName() + \" cannot perform operation \"\n           + ApplicationACL.MODIFY_APP.name() + \" on \" + applicationId));\n     }\n \n     this.rmContext.getDispatcher().getEventHandler().handle(\n         new RMAppEvent(applicationId, RMAppEventType.KILL));\n \n     RMAuditLogger.logSuccess(callerUGI.getShortUserName(), \n         AuditConstants.KILL_APP_REQUEST, \"ClientRMService\" , applicationId);\n-    FinishApplicationResponse response \u003d recordFactory\n-        .newRecordInstance(FinishApplicationResponse.class);\n+    KillApplicationResponse response \u003d recordFactory\n+        .newRecordInstance(KillApplicationResponse.class);\n     return response;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public KillApplicationResponse forceKillApplication(\n      KillApplicationRequest request) throws YarnRemoteException {\n\n    ApplicationId applicationId \u003d request.getApplicationId();\n\n    UserGroupInformation callerUGI;\n    try {\n      callerUGI \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ie) {\n      LOG.info(\"Error getting UGI \", ie);\n      RMAuditLogger.logFailure(\"UNKNOWN\", AuditConstants.KILL_APP_REQUEST,\n          \"UNKNOWN\", \"ClientRMService\" , \"Error getting UGI\",\n          applicationId);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n    // TODO: What if null\n    if (!checkAccess(callerUGI, application.getUser(),\n        ApplicationACL.MODIFY_APP)) {\n      RMAuditLogger.logFailure(callerUGI.getShortUserName(), \n          AuditConstants.KILL_APP_REQUEST, \n          \"User doesn\u0027t have MODIFY_APP permissions\", \"ClientRMService\",\n          AuditConstants.UNAUTHORIZED_USER, applicationId);\n      throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n          + callerUGI.getShortUserName() + \" cannot perform operation \"\n          + ApplicationACL.MODIFY_APP.name() + \" on \" + applicationId));\n    }\n\n    this.rmContext.getDispatcher().getEventHandler().handle(\n        new RMAppEvent(applicationId, RMAppEventType.KILL));\n\n    RMAuditLogger.logSuccess(callerUGI.getShortUserName(), \n        AuditConstants.KILL_APP_REQUEST, \"ClientRMService\" , applicationId);\n    KillApplicationResponse response \u003d recordFactory\n        .newRecordInstance(KillApplicationResponse.class);\n    return response;\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
          "extendedDetails": {
            "oldValue": "FinishApplicationResponse",
            "newValue": "KillApplicationResponse"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-3054. Unable to kill submitted jobs. (mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1176600 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "27/09/11 1:30 PM",
          "commitName": "0d2bb0623696c2cc822cb44e431345b2c773dbff",
          "commitAuthor": "Mahadev Konar",
          "commitDateOld": "14/09/11 12:26 AM",
          "commitNameOld": "88b82a0f6687ce103817fbb460fd30d870f717a0",
          "commitAuthorOld": "Mahadev Konar",
          "daysBetweenCommits": 13.54,
          "commitsBetweenForRepo": 84,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,38 @@\n-  public FinishApplicationResponse finishApplication(\n-      FinishApplicationRequest request) throws YarnRemoteException {\n+  public KillApplicationResponse forceKillApplication(\n+      KillApplicationRequest request) throws YarnRemoteException {\n \n     ApplicationId applicationId \u003d request.getApplicationId();\n \n     UserGroupInformation callerUGI;\n     try {\n       callerUGI \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException ie) {\n       LOG.info(\"Error getting UGI \", ie);\n       RMAuditLogger.logFailure(\"UNKNOWN\", AuditConstants.KILL_APP_REQUEST,\n           \"UNKNOWN\", \"ClientRMService\" , \"Error getting UGI\",\n           applicationId);\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n     RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n     // TODO: What if null\n     if (!checkAccess(callerUGI, application.getUser(),\n         ApplicationACL.MODIFY_APP)) {\n       RMAuditLogger.logFailure(callerUGI.getShortUserName(), \n           AuditConstants.KILL_APP_REQUEST, \n           \"User doesn\u0027t have MODIFY_APP permissions\", \"ClientRMService\",\n           AuditConstants.UNAUTHORIZED_USER, applicationId);\n       throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n           + callerUGI.getShortUserName() + \" cannot perform operation \"\n           + ApplicationACL.MODIFY_APP.name() + \" on \" + applicationId));\n     }\n \n     this.rmContext.getDispatcher().getEventHandler().handle(\n         new RMAppEvent(applicationId, RMAppEventType.KILL));\n \n     RMAuditLogger.logSuccess(callerUGI.getShortUserName(), \n         AuditConstants.KILL_APP_REQUEST, \"ClientRMService\" , applicationId);\n-    FinishApplicationResponse response \u003d recordFactory\n-        .newRecordInstance(FinishApplicationResponse.class);\n+    KillApplicationResponse response \u003d recordFactory\n+        .newRecordInstance(KillApplicationResponse.class);\n     return response;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public KillApplicationResponse forceKillApplication(\n      KillApplicationRequest request) throws YarnRemoteException {\n\n    ApplicationId applicationId \u003d request.getApplicationId();\n\n    UserGroupInformation callerUGI;\n    try {\n      callerUGI \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ie) {\n      LOG.info(\"Error getting UGI \", ie);\n      RMAuditLogger.logFailure(\"UNKNOWN\", AuditConstants.KILL_APP_REQUEST,\n          \"UNKNOWN\", \"ClientRMService\" , \"Error getting UGI\",\n          applicationId);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n    // TODO: What if null\n    if (!checkAccess(callerUGI, application.getUser(),\n        ApplicationACL.MODIFY_APP)) {\n      RMAuditLogger.logFailure(callerUGI.getShortUserName(), \n          AuditConstants.KILL_APP_REQUEST, \n          \"User doesn\u0027t have MODIFY_APP permissions\", \"ClientRMService\",\n          AuditConstants.UNAUTHORIZED_USER, applicationId);\n      throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n          + callerUGI.getShortUserName() + \" cannot perform operation \"\n          + ApplicationACL.MODIFY_APP.name() + \" on \" + applicationId));\n    }\n\n    this.rmContext.getDispatcher().getEventHandler().handle(\n        new RMAppEvent(applicationId, RMAppEventType.KILL));\n\n    RMAuditLogger.logSuccess(callerUGI.getShortUserName(), \n        AuditConstants.KILL_APP_REQUEST, \"ClientRMService\" , applicationId);\n    KillApplicationResponse response \u003d recordFactory\n        .newRecordInstance(KillApplicationResponse.class);\n    return response;\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
          "extendedDetails": {}
        }
      ]
    },
    "cdfabf5ae289836968b3d296668593b9500b6f26": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2655. Add audit logs to ResourceManager and NodeManager. Contributed by Thomas Graves.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1165949 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/09/11 6:24 PM",
      "commitName": "cdfabf5ae289836968b3d296668593b9500b6f26",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 13.05,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,38 @@\n   public FinishApplicationResponse finishApplication(\n       FinishApplicationRequest request) throws YarnRemoteException {\n \n     ApplicationId applicationId \u003d request.getApplicationId();\n \n     UserGroupInformation callerUGI;\n     try {\n       callerUGI \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException ie) {\n       LOG.info(\"Error getting UGI \", ie);\n+      RMAuditLogger.logFailure(\"UNKNOWN\", AuditConstants.KILL_APP_REQUEST,\n+          \"UNKNOWN\", \"ClientRMService\" , \"Error getting UGI\",\n+          applicationId);\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n     RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n     // TODO: What if null\n     if (!checkAccess(callerUGI, application.getUser(),\n         ApplicationACL.MODIFY_APP)) {\n+      RMAuditLogger.logFailure(callerUGI.getShortUserName(), \n+          AuditConstants.KILL_APP_REQUEST, \n+          \"User doesn\u0027t have MODIFY_APP permissions\", \"ClientRMService\",\n+          AuditConstants.UNAUTHORIZED_USER, applicationId);\n       throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n           + callerUGI.getShortUserName() + \" cannot perform operation \"\n           + ApplicationACL.MODIFY_APP.name() + \" on \" + applicationId));\n     }\n \n     this.rmContext.getDispatcher().getEventHandler().handle(\n         new RMAppEvent(applicationId, RMAppEventType.KILL));\n \n+    RMAuditLogger.logSuccess(callerUGI.getShortUserName(), \n+        AuditConstants.KILL_APP_REQUEST, \"ClientRMService\" , applicationId);\n     FinishApplicationResponse response \u003d recordFactory\n         .newRecordInstance(FinishApplicationResponse.class);\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FinishApplicationResponse finishApplication(\n      FinishApplicationRequest request) throws YarnRemoteException {\n\n    ApplicationId applicationId \u003d request.getApplicationId();\n\n    UserGroupInformation callerUGI;\n    try {\n      callerUGI \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ie) {\n      LOG.info(\"Error getting UGI \", ie);\n      RMAuditLogger.logFailure(\"UNKNOWN\", AuditConstants.KILL_APP_REQUEST,\n          \"UNKNOWN\", \"ClientRMService\" , \"Error getting UGI\",\n          applicationId);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n    // TODO: What if null\n    if (!checkAccess(callerUGI, application.getUser(),\n        ApplicationACL.MODIFY_APP)) {\n      RMAuditLogger.logFailure(callerUGI.getShortUserName(), \n          AuditConstants.KILL_APP_REQUEST, \n          \"User doesn\u0027t have MODIFY_APP permissions\", \"ClientRMService\",\n          AuditConstants.UNAUTHORIZED_USER, applicationId);\n      throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n          + callerUGI.getShortUserName() + \" cannot perform operation \"\n          + ApplicationACL.MODIFY_APP.name() + \" on \" + applicationId));\n    }\n\n    this.rmContext.getDispatcher().getEventHandler().handle(\n        new RMAppEvent(applicationId, RMAppEventType.KILL));\n\n    RMAuditLogger.logSuccess(callerUGI.getShortUserName(), \n        AuditConstants.KILL_APP_REQUEST, \"ClientRMService\" , applicationId);\n    FinishApplicationResponse response \u003d recordFactory\n        .newRecordInstance(FinishApplicationResponse.class);\n    return response;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public FinishApplicationResponse finishApplication(\n      FinishApplicationRequest request) throws YarnRemoteException {\n\n    ApplicationId applicationId \u003d request.getApplicationId();\n\n    UserGroupInformation callerUGI;\n    try {\n      callerUGI \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ie) {\n      LOG.info(\"Error getting UGI \", ie);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n    // TODO: What if null\n    if (!checkAccess(callerUGI, application.getUser(),\n        ApplicationACL.MODIFY_APP)) {\n      throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n          + callerUGI.getShortUserName() + \" cannot perform operation \"\n          + ApplicationACL.MODIFY_APP.name() + \" on \" + applicationId));\n    }\n\n    this.rmContext.getDispatcher().getEventHandler().handle(\n        new RMAppEvent(applicationId, RMAppEventType.KILL));\n\n    FinishApplicationResponse response \u003d recordFactory\n        .newRecordInstance(FinishApplicationResponse.class);\n    return response;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,29 @@\n+  public FinishApplicationResponse finishApplication(\n+      FinishApplicationRequest request) throws YarnRemoteException {\n+\n+    ApplicationId applicationId \u003d request.getApplicationId();\n+\n+    UserGroupInformation callerUGI;\n+    try {\n+      callerUGI \u003d UserGroupInformation.getCurrentUser();\n+    } catch (IOException ie) {\n+      LOG.info(\"Error getting UGI \", ie);\n+      throw RPCUtil.getRemoteException(ie);\n+    }\n+\n+    RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n+    // TODO: What if null\n+    if (!checkAccess(callerUGI, application.getUser(),\n+        ApplicationACL.MODIFY_APP)) {\n+      throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n+          + callerUGI.getShortUserName() + \" cannot perform operation \"\n+          + ApplicationACL.MODIFY_APP.name() + \" on \" + applicationId));\n+    }\n+\n+    this.rmContext.getDispatcher().getEventHandler().handle(\n+        new RMAppEvent(applicationId, RMAppEventType.KILL));\n+\n+    FinishApplicationResponse response \u003d recordFactory\n+        .newRecordInstance(FinishApplicationResponse.class);\n+    return response;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public FinishApplicationResponse finishApplication(\n      FinishApplicationRequest request) throws YarnRemoteException {\n\n    ApplicationId applicationId \u003d request.getApplicationId();\n\n    UserGroupInformation callerUGI;\n    try {\n      callerUGI \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ie) {\n      LOG.info(\"Error getting UGI \", ie);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    RMApp application \u003d this.rmContext.getRMApps().get(applicationId);\n    // TODO: What if null\n    if (!checkAccess(callerUGI, application.getUser(),\n        ApplicationACL.MODIFY_APP)) {\n      throw RPCUtil.getRemoteException(new AccessControlException(\"User \"\n          + callerUGI.getShortUserName() + \" cannot perform operation \"\n          + ApplicationACL.MODIFY_APP.name() + \" on \" + applicationId));\n    }\n\n    this.rmContext.getDispatcher().getEventHandler().handle(\n        new RMAppEvent(applicationId, RMAppEventType.KILL));\n\n    FinishApplicationResponse response \u003d recordFactory\n        .newRecordInstance(FinishApplicationResponse.class);\n    return response;\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java"
    }
  }
}