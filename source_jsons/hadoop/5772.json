{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NameNodeRpcServer.java",
  "functionName": "getAdditionalDatanode",
  "functionId": "getAdditionalDatanode___src-String(modifiers-final)__fileId-long(modifiers-final)__blk-ExtendedBlock(modifiers-final)__existings-DatanodeInfo[](modifiers-final)__existingStorageIDs-String[](modifiers-final)__excludes-DatanodeInfo[](modifiers-final)__numAdditionalNodes-int(modifiers-final)__clientName-String(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeRpcServer.java",
  "functionStartLine": 917,
  "functionEndLine": 947,
  "numCommitsSeen": 425,
  "timeTaken": 6967,
  "changeHistory": [
    "8fb5ca3f405550828a17e689b9c60ddf7fb95ec1",
    "024c87291cb4cc67282fe5645fb827427cc581c6",
    "db334bb8625da97c7e518cbcf477530c7ba7001e",
    "f131dba8a3d603a5d15c4f035ed3da75b4daf0dc"
  ],
  "changeHistoryShort": {
    "8fb5ca3f405550828a17e689b9c60ddf7fb95ec1": "Ybodychange",
    "024c87291cb4cc67282fe5645fb827427cc581c6": "Ybodychange",
    "db334bb8625da97c7e518cbcf477530c7ba7001e": "Ybodychange",
    "f131dba8a3d603a5d15c4f035ed3da75b4daf0dc": "Ymultichange(Yparameterchange,Ybodychange)"
  },
  "changeHistoryDetails": {
    "8fb5ca3f405550828a17e689b9c60ddf7fb95ec1": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14611. Move handshake secret field from Token to BlockAccessToken. Contributed by Chen Liang.\n",
      "commitDate": "11/07/19 1:23 PM",
      "commitName": "8fb5ca3f405550828a17e689b9c60ddf7fb95ec1",
      "commitAuthor": "Chen Liang",
      "commitDateOld": "17/06/19 4:20 PM",
      "commitNameOld": "6822193ee6d6ac8b08822fa76c89e1dd61c5ddca",
      "commitAuthorOld": "Santosh Marella",
      "daysBetweenCommits": 23.88,
      "commitsBetweenForRepo": 218,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,31 @@\n   public LocatedBlock getAdditionalDatanode(final String src,\n       final long fileId, final ExtendedBlock blk,\n       final DatanodeInfo[] existings, final String[] existingStorageIDs,\n       final DatanodeInfo[] excludes,\n       final int numAdditionalNodes, final String clientName\n       ) throws IOException {\n     checkNNStartup();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"getAdditionalDatanode: src\u003d\" + src\n           + \", fileId\u003d\" + fileId\n           + \", blk\u003d\" + blk\n           + \", existings\u003d\" + Arrays.asList(existings)\n           + \", excludes\u003d\" + Arrays.asList(excludes)\n           + \", numAdditionalNodes\u003d\" + numAdditionalNodes\n           + \", clientName\u003d\" + clientName);\n     }\n \n     metrics.incrGetAdditionalDatanodeOps();\n \n     Set\u003cNode\u003e excludeSet \u003d null;\n     if (excludes !\u003d null) {\n       excludeSet \u003d new HashSet\u003cNode\u003e(excludes.length);\n       for (Node node : excludes) {\n         excludeSet.add(node);\n       }\n     }\n     LocatedBlock locatedBlock \u003d namesystem.getAdditionalDatanode(src, fileId,\n         blk, existings, existingStorageIDs, excludeSet, numAdditionalNodes,\n         clientName);\n-    if (shouldSendQOP) {\n-      wrapEstablishedQOP(locatedBlock, getEstablishedClientQOP());\n-    }\n     return locatedBlock;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public LocatedBlock getAdditionalDatanode(final String src,\n      final long fileId, final ExtendedBlock blk,\n      final DatanodeInfo[] existings, final String[] existingStorageIDs,\n      final DatanodeInfo[] excludes,\n      final int numAdditionalNodes, final String clientName\n      ) throws IOException {\n    checkNNStartup();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"getAdditionalDatanode: src\u003d\" + src\n          + \", fileId\u003d\" + fileId\n          + \", blk\u003d\" + blk\n          + \", existings\u003d\" + Arrays.asList(existings)\n          + \", excludes\u003d\" + Arrays.asList(excludes)\n          + \", numAdditionalNodes\u003d\" + numAdditionalNodes\n          + \", clientName\u003d\" + clientName);\n    }\n\n    metrics.incrGetAdditionalDatanodeOps();\n\n    Set\u003cNode\u003e excludeSet \u003d null;\n    if (excludes !\u003d null) {\n      excludeSet \u003d new HashSet\u003cNode\u003e(excludes.length);\n      for (Node node : excludes) {\n        excludeSet.add(node);\n      }\n    }\n    LocatedBlock locatedBlock \u003d namesystem.getAdditionalDatanode(src, fileId,\n        blk, existings, existingStorageIDs, excludeSet, numAdditionalNodes,\n        clientName);\n    return locatedBlock;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeRpcServer.java",
      "extendedDetails": {}
    },
    "024c87291cb4cc67282fe5645fb827427cc581c6": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13617. Allow wrapping NN QOP into token in encrypted message. Contributed by Chen Liang\n",
      "commitDate": "13/02/19 12:40 PM",
      "commitName": "024c87291cb4cc67282fe5645fb827427cc581c6",
      "commitAuthor": "Chen Liang",
      "commitDateOld": "24/12/18 9:34 AM",
      "commitNameOld": "652b257478f723a9e119e5e9181f3c7450ac92b5",
      "commitAuthorOld": "Chen Liang",
      "daysBetweenCommits": 51.13,
      "commitsBetweenForRepo": 326,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,34 @@\n   public LocatedBlock getAdditionalDatanode(final String src,\n       final long fileId, final ExtendedBlock blk,\n       final DatanodeInfo[] existings, final String[] existingStorageIDs,\n       final DatanodeInfo[] excludes,\n       final int numAdditionalNodes, final String clientName\n       ) throws IOException {\n     checkNNStartup();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"getAdditionalDatanode: src\u003d\" + src\n           + \", fileId\u003d\" + fileId\n           + \", blk\u003d\" + blk\n           + \", existings\u003d\" + Arrays.asList(existings)\n           + \", excludes\u003d\" + Arrays.asList(excludes)\n           + \", numAdditionalNodes\u003d\" + numAdditionalNodes\n           + \", clientName\u003d\" + clientName);\n     }\n \n     metrics.incrGetAdditionalDatanodeOps();\n \n     Set\u003cNode\u003e excludeSet \u003d null;\n     if (excludes !\u003d null) {\n       excludeSet \u003d new HashSet\u003cNode\u003e(excludes.length);\n       for (Node node : excludes) {\n         excludeSet.add(node);\n       }\n     }\n-    return namesystem.getAdditionalDatanode(src, fileId, blk, existings,\n-        existingStorageIDs, excludeSet, numAdditionalNodes, clientName);\n+    LocatedBlock locatedBlock \u003d namesystem.getAdditionalDatanode(src, fileId,\n+        blk, existings, existingStorageIDs, excludeSet, numAdditionalNodes,\n+        clientName);\n+    if (shouldSendQOP) {\n+      wrapEstablishedQOP(locatedBlock, getEstablishedClientQOP());\n+    }\n+    return locatedBlock;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public LocatedBlock getAdditionalDatanode(final String src,\n      final long fileId, final ExtendedBlock blk,\n      final DatanodeInfo[] existings, final String[] existingStorageIDs,\n      final DatanodeInfo[] excludes,\n      final int numAdditionalNodes, final String clientName\n      ) throws IOException {\n    checkNNStartup();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"getAdditionalDatanode: src\u003d\" + src\n          + \", fileId\u003d\" + fileId\n          + \", blk\u003d\" + blk\n          + \", existings\u003d\" + Arrays.asList(existings)\n          + \", excludes\u003d\" + Arrays.asList(excludes)\n          + \", numAdditionalNodes\u003d\" + numAdditionalNodes\n          + \", clientName\u003d\" + clientName);\n    }\n\n    metrics.incrGetAdditionalDatanodeOps();\n\n    Set\u003cNode\u003e excludeSet \u003d null;\n    if (excludes !\u003d null) {\n      excludeSet \u003d new HashSet\u003cNode\u003e(excludes.length);\n      for (Node node : excludes) {\n        excludeSet.add(node);\n      }\n    }\n    LocatedBlock locatedBlock \u003d namesystem.getAdditionalDatanode(src, fileId,\n        blk, existings, existingStorageIDs, excludeSet, numAdditionalNodes,\n        clientName);\n    if (shouldSendQOP) {\n      wrapEstablishedQOP(locatedBlock, getEstablishedClientQOP());\n    }\n    return locatedBlock;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeRpcServer.java",
      "extendedDetails": {}
    },
    "db334bb8625da97c7e518cbcf477530c7ba7001e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3443. Fix NPE when namenode transition to active during startup by adding checkNNStartup() in NameNodeRpcServer.  Contributed by Vinayakumar B\n",
      "commitDate": "21/01/15 11:33 AM",
      "commitName": "db334bb8625da97c7e518cbcf477530c7ba7001e",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "12/01/15 10:50 PM",
      "commitNameOld": "7e9358feb326d48b8c4f00249e7af5023cebd2e2",
      "commitAuthorOld": "Plamen Jeliazkov",
      "daysBetweenCommits": 8.53,
      "commitsBetweenForRepo": 59,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,29 @@\n   public LocatedBlock getAdditionalDatanode(final String src,\n       final long fileId, final ExtendedBlock blk,\n       final DatanodeInfo[] existings, final String[] existingStorageIDs,\n       final DatanodeInfo[] excludes,\n       final int numAdditionalNodes, final String clientName\n       ) throws IOException {\n+    checkNNStartup();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"getAdditionalDatanode: src\u003d\" + src\n           + \", fileId\u003d\" + fileId\n           + \", blk\u003d\" + blk\n           + \", existings\u003d\" + Arrays.asList(existings)\n           + \", excludes\u003d\" + Arrays.asList(excludes)\n           + \", numAdditionalNodes\u003d\" + numAdditionalNodes\n           + \", clientName\u003d\" + clientName);\n     }\n \n     metrics.incrGetAdditionalDatanodeOps();\n \n     Set\u003cNode\u003e excludeSet \u003d null;\n     if (excludes !\u003d null) {\n       excludeSet \u003d new HashSet\u003cNode\u003e(excludes.length);\n       for (Node node : excludes) {\n         excludeSet.add(node);\n       }\n     }\n     return namesystem.getAdditionalDatanode(src, fileId, blk, existings,\n         existingStorageIDs, excludeSet, numAdditionalNodes, clientName);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public LocatedBlock getAdditionalDatanode(final String src,\n      final long fileId, final ExtendedBlock blk,\n      final DatanodeInfo[] existings, final String[] existingStorageIDs,\n      final DatanodeInfo[] excludes,\n      final int numAdditionalNodes, final String clientName\n      ) throws IOException {\n    checkNNStartup();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"getAdditionalDatanode: src\u003d\" + src\n          + \", fileId\u003d\" + fileId\n          + \", blk\u003d\" + blk\n          + \", existings\u003d\" + Arrays.asList(existings)\n          + \", excludes\u003d\" + Arrays.asList(excludes)\n          + \", numAdditionalNodes\u003d\" + numAdditionalNodes\n          + \", clientName\u003d\" + clientName);\n    }\n\n    metrics.incrGetAdditionalDatanodeOps();\n\n    Set\u003cNode\u003e excludeSet \u003d null;\n    if (excludes !\u003d null) {\n      excludeSet \u003d new HashSet\u003cNode\u003e(excludes.length);\n      for (Node node : excludes) {\n        excludeSet.add(node);\n      }\n    }\n    return namesystem.getAdditionalDatanode(src, fileId, blk, existings,\n        existingStorageIDs, excludeSet, numAdditionalNodes, clientName);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeRpcServer.java",
      "extendedDetails": {}
    },
    "f131dba8a3d603a5d15c4f035ed3da75b4daf0dc": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-6294. Use INode IDs to avoid conflicts when a file open for write is renamed (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1593634 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/05/14 3:36 PM",
      "commitName": "f131dba8a3d603a5d15c4f035ed3da75b4daf0dc",
      "commitAuthor": "Colin McCabe",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6294. Use INode IDs to avoid conflicts when a file open for write is renamed (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1593634 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "09/05/14 3:36 PM",
          "commitName": "f131dba8a3d603a5d15c4f035ed3da75b4daf0dc",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "08/05/14 3:20 PM",
          "commitNameOld": "63fadf0abd9fd0ba1bcf9bfc108c46e34b88309e",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 1.01,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,28 @@\n-  public LocatedBlock getAdditionalDatanode(final String src, final ExtendedBlock blk,\n+  public LocatedBlock getAdditionalDatanode(final String src,\n+      final long fileId, final ExtendedBlock blk,\n       final DatanodeInfo[] existings, final String[] existingStorageIDs,\n       final DatanodeInfo[] excludes,\n       final int numAdditionalNodes, final String clientName\n       ) throws IOException {\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"getAdditionalDatanode: src\u003d\" + src\n+          + \", fileId\u003d\" + fileId\n           + \", blk\u003d\" + blk\n           + \", existings\u003d\" + Arrays.asList(existings)\n           + \", excludes\u003d\" + Arrays.asList(excludes)\n           + \", numAdditionalNodes\u003d\" + numAdditionalNodes\n           + \", clientName\u003d\" + clientName);\n     }\n \n     metrics.incrGetAdditionalDatanodeOps();\n \n     Set\u003cNode\u003e excludeSet \u003d null;\n     if (excludes !\u003d null) {\n       excludeSet \u003d new HashSet\u003cNode\u003e(excludes.length);\n       for (Node node : excludes) {\n         excludeSet.add(node);\n       }\n     }\n-    return namesystem.getAdditionalDatanode(src, blk, existings,\n+    return namesystem.getAdditionalDatanode(src, fileId, blk, existings,\n         existingStorageIDs, excludeSet, numAdditionalNodes, clientName);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public LocatedBlock getAdditionalDatanode(final String src,\n      final long fileId, final ExtendedBlock blk,\n      final DatanodeInfo[] existings, final String[] existingStorageIDs,\n      final DatanodeInfo[] excludes,\n      final int numAdditionalNodes, final String clientName\n      ) throws IOException {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"getAdditionalDatanode: src\u003d\" + src\n          + \", fileId\u003d\" + fileId\n          + \", blk\u003d\" + blk\n          + \", existings\u003d\" + Arrays.asList(existings)\n          + \", excludes\u003d\" + Arrays.asList(excludes)\n          + \", numAdditionalNodes\u003d\" + numAdditionalNodes\n          + \", clientName\u003d\" + clientName);\n    }\n\n    metrics.incrGetAdditionalDatanodeOps();\n\n    Set\u003cNode\u003e excludeSet \u003d null;\n    if (excludes !\u003d null) {\n      excludeSet \u003d new HashSet\u003cNode\u003e(excludes.length);\n      for (Node node : excludes) {\n        excludeSet.add(node);\n      }\n    }\n    return namesystem.getAdditionalDatanode(src, fileId, blk, existings,\n        existingStorageIDs, excludeSet, numAdditionalNodes, clientName);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeRpcServer.java",
          "extendedDetails": {
            "oldValue": "[src-String(modifiers-final), blk-ExtendedBlock(modifiers-final), existings-DatanodeInfo[](modifiers-final), existingStorageIDs-String[](modifiers-final), excludes-DatanodeInfo[](modifiers-final), numAdditionalNodes-int(modifiers-final), clientName-String(modifiers-final)]",
            "newValue": "[src-String(modifiers-final), fileId-long(modifiers-final), blk-ExtendedBlock(modifiers-final), existings-DatanodeInfo[](modifiers-final), existingStorageIDs-String[](modifiers-final), excludes-DatanodeInfo[](modifiers-final), numAdditionalNodes-int(modifiers-final), clientName-String(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6294. Use INode IDs to avoid conflicts when a file open for write is renamed (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1593634 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "09/05/14 3:36 PM",
          "commitName": "f131dba8a3d603a5d15c4f035ed3da75b4daf0dc",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "08/05/14 3:20 PM",
          "commitNameOld": "63fadf0abd9fd0ba1bcf9bfc108c46e34b88309e",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 1.01,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,28 @@\n-  public LocatedBlock getAdditionalDatanode(final String src, final ExtendedBlock blk,\n+  public LocatedBlock getAdditionalDatanode(final String src,\n+      final long fileId, final ExtendedBlock blk,\n       final DatanodeInfo[] existings, final String[] existingStorageIDs,\n       final DatanodeInfo[] excludes,\n       final int numAdditionalNodes, final String clientName\n       ) throws IOException {\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"getAdditionalDatanode: src\u003d\" + src\n+          + \", fileId\u003d\" + fileId\n           + \", blk\u003d\" + blk\n           + \", existings\u003d\" + Arrays.asList(existings)\n           + \", excludes\u003d\" + Arrays.asList(excludes)\n           + \", numAdditionalNodes\u003d\" + numAdditionalNodes\n           + \", clientName\u003d\" + clientName);\n     }\n \n     metrics.incrGetAdditionalDatanodeOps();\n \n     Set\u003cNode\u003e excludeSet \u003d null;\n     if (excludes !\u003d null) {\n       excludeSet \u003d new HashSet\u003cNode\u003e(excludes.length);\n       for (Node node : excludes) {\n         excludeSet.add(node);\n       }\n     }\n-    return namesystem.getAdditionalDatanode(src, blk, existings,\n+    return namesystem.getAdditionalDatanode(src, fileId, blk, existings,\n         existingStorageIDs, excludeSet, numAdditionalNodes, clientName);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public LocatedBlock getAdditionalDatanode(final String src,\n      final long fileId, final ExtendedBlock blk,\n      final DatanodeInfo[] existings, final String[] existingStorageIDs,\n      final DatanodeInfo[] excludes,\n      final int numAdditionalNodes, final String clientName\n      ) throws IOException {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"getAdditionalDatanode: src\u003d\" + src\n          + \", fileId\u003d\" + fileId\n          + \", blk\u003d\" + blk\n          + \", existings\u003d\" + Arrays.asList(existings)\n          + \", excludes\u003d\" + Arrays.asList(excludes)\n          + \", numAdditionalNodes\u003d\" + numAdditionalNodes\n          + \", clientName\u003d\" + clientName);\n    }\n\n    metrics.incrGetAdditionalDatanodeOps();\n\n    Set\u003cNode\u003e excludeSet \u003d null;\n    if (excludes !\u003d null) {\n      excludeSet \u003d new HashSet\u003cNode\u003e(excludes.length);\n      for (Node node : excludes) {\n        excludeSet.add(node);\n      }\n    }\n    return namesystem.getAdditionalDatanode(src, fileId, blk, existings,\n        existingStorageIDs, excludeSet, numAdditionalNodes, clientName);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/NameNodeRpcServer.java",
          "extendedDetails": {}
        }
      ]
    }
  }
}