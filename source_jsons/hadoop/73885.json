{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Server.java",
  "functionName": "createSaslServer",
  "functionId": "createSaslServer___authMethod-AuthMethod",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
  "functionStartLine": 2375,
  "functionEndLine": 2380,
  "numCommitsSeen": 162,
  "timeTaken": 5375,
  "changeHistory": [
    "635786a511344b53b1d3f25c2f29ab5298f6ac74",
    "f799618828b0ba09b694b07eaab0689d31f4954d",
    "5f9b4c14a175873b4f82654513e289c657c694eb",
    "3337588975fa24c0044408c6caf91abea4dca4d4",
    "4755ef989ac771ad3c2c40f9914455725c931447",
    "1594dd6965c412a08339a0079ee1416dd6f595f9"
  ],
  "changeHistoryShort": {
    "635786a511344b53b1d3f25c2f29ab5298f6ac74": "Ybodychange",
    "f799618828b0ba09b694b07eaab0689d31f4954d": "Ybodychange",
    "5f9b4c14a175873b4f82654513e289c657c694eb": "Ybodychange",
    "3337588975fa24c0044408c6caf91abea4dca4d4": "Ymultichange(Yexceptionschange,Ybodychange)",
    "4755ef989ac771ad3c2c40f9914455725c931447": "Ybodychange",
    "1594dd6965c412a08339a0079ee1416dd6f595f9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "635786a511344b53b1d3f25c2f29ab5298f6ac74": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13566. Add configurable additional RPC listener to NameNode. Contributed by Chen Liang.\n",
      "commitDate": "23/10/18 2:53 PM",
      "commitName": "635786a511344b53b1d3f25c2f29ab5298f6ac74",
      "commitAuthor": "Chen Liang",
      "commitDateOld": "10/10/18 9:51 PM",
      "commitNameOld": "7b57f2f71fbaa5af4897309597cca70a95b04edd",
      "commitAuthorOld": "Takanobu Asanuma",
      "daysBetweenCommits": 12.71,
      "commitsBetweenForRepo": 158,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,6 +1,6 @@\n     private SaslServer createSaslServer(AuthMethod authMethod)\n         throws IOException, InterruptedException {\n       final Map\u003cString,?\u003e saslProps \u003d\n-                  saslPropsResolver.getServerProperties(addr);\n+                  saslPropsResolver.getServerProperties(addr, ingressPort);\n       return new SaslRpcServer(authMethod).create(this, saslProps, secretManager);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private SaslServer createSaslServer(AuthMethod authMethod)\n        throws IOException, InterruptedException {\n      final Map\u003cString,?\u003e saslProps \u003d\n                  saslPropsResolver.getServerProperties(addr, ingressPort);\n      return new SaslRpcServer(authMethod).create(this, saslProps, secretManager);\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "f799618828b0ba09b694b07eaab0689d31f4954d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10221. Add a plugin to specify SaslProperties for RPC protocol based on connection properties. (Contributed by Benoy Antony and Daryn Sharp)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1579382 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/03/14 1:16 PM",
      "commitName": "f799618828b0ba09b694b07eaab0689d31f4954d",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "14/03/14 2:12 PM",
      "commitNameOld": "37cb314f79f515421cfc2c3605382bf1534dc266",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 4.96,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,4 +1,6 @@\n     private SaslServer createSaslServer(AuthMethod authMethod)\n         throws IOException, InterruptedException {\n-      return new SaslRpcServer(authMethod).create(this, secretManager);\n+      final Map\u003cString,?\u003e saslProps \u003d\n+                  saslPropsResolver.getServerProperties(addr);\n+      return new SaslRpcServer(authMethod).create(this ,saslProps, secretManager);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private SaslServer createSaslServer(AuthMethod authMethod)\n        throws IOException, InterruptedException {\n      final Map\u003cString,?\u003e saslProps \u003d\n                  saslPropsResolver.getServerProperties(addr);\n      return new SaslRpcServer(authMethod).create(this ,saslProps, secretManager);\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "5f9b4c14a175873b4f82654513e289c657c694eb": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9421. [RPC v9] Convert SASL to use ProtoBuf and provide negotiation capabilities (daryn)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1495577 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/06/13 1:09 PM",
      "commitName": "5f9b4c14a175873b4f82654513e289c657c694eb",
      "commitAuthor": "Daryn Sharp",
      "commitDateOld": "10/06/13 8:30 PM",
      "commitNameOld": "a841be808a780db0653b17bb702037f422c5b1ec",
      "commitAuthorOld": "Luke Lu",
      "daysBetweenCommits": 10.69,
      "commitsBetweenForRepo": 113,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,4 @@\n     private SaslServer createSaslServer(AuthMethod authMethod)\n         throws IOException, InterruptedException {\n-      String hostname \u003d null;\n-      String saslProtocol \u003d null;\n-      CallbackHandler saslCallback \u003d null;\n-      \n-      switch (authMethod) {\n-        case SIMPLE: {\n-          return null; // no sasl for simple\n-        }\n-        case DIGEST: {\n-          secretManager.checkAvailableForRead();\n-          hostname \u003d SaslRpcServer.SASL_DEFAULT_REALM;\n-          saslCallback \u003d new SaslDigestCallbackHandler(secretManager, this);\n-          break;\n-        }\n-        case KERBEROS: {\n-          String fullName \u003d UserGroupInformation.getCurrentUser().getUserName();\n-          if (LOG.isDebugEnabled())\n-            LOG.debug(\"Kerberos principal name is \" + fullName);\n-          KerberosName krbName \u003d new KerberosName(fullName);\n-          hostname \u003d krbName.getHostName();\n-          if (hostname \u003d\u003d null) {\n-            throw new AccessControlException(\n-                \"Kerberos principal name does NOT have the expected \"\n-                    + \"hostname part: \" + fullName);\n-          }\n-          saslProtocol \u003d krbName.getServiceName();\n-          saslCallback \u003d new SaslGssCallbackHandler();\n-          break;\n-        }\n-        default:\n-          // we should never be able to get here\n-          throw new AccessControlException(\n-              \"Server does not support SASL \" + authMethod);\n-      }\n-      \n-      return createSaslServer(authMethod.getMechanismName(), saslProtocol,\n-                              hostname, saslCallback);                                    \n+      return new SaslRpcServer(authMethod).create(this, secretManager);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private SaslServer createSaslServer(AuthMethod authMethod)\n        throws IOException, InterruptedException {\n      return new SaslRpcServer(authMethod).create(this, secretManager);\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "3337588975fa24c0044408c6caf91abea4dca4d4": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "HADOOP-9070. Kerberos SASL server cannot find kerberos key. Contributed by Daryn Sharp.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1417729 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/12/12 6:53 PM",
      "commitName": "3337588975fa24c0044408c6caf91abea4dca4d4",
      "commitAuthor": "Aaron Myers",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "HADOOP-9070. Kerberos SASL server cannot find kerberos key. Contributed by Daryn Sharp.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1417729 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "05/12/12 6:53 PM",
          "commitName": "3337588975fa24c0044408c6caf91abea4dca4d4",
          "commitAuthor": "Aaron Myers",
          "commitDateOld": "13/11/12 9:10 AM",
          "commitNameOld": "fe8f635b78d59e286771ec75ff73245b40d30907",
          "commitAuthorOld": "Daryn Sharp",
          "daysBetweenCommits": 22.41,
          "commitsBetweenForRepo": 88,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,40 @@\n     private SaslServer createSaslServer(AuthMethod authMethod)\n-        throws IOException {\n-      SaslServer saslServer \u003d null;\n+        throws IOException, InterruptedException {\n       String hostname \u003d null;\n       String saslProtocol \u003d null;\n       CallbackHandler saslCallback \u003d null;\n       \n       switch (authMethod) {\n         case SIMPLE: {\n           return null; // no sasl for simple\n         }\n         case DIGEST: {\n           secretManager.checkAvailableForRead();\n           hostname \u003d SaslRpcServer.SASL_DEFAULT_REALM;\n           saslCallback \u003d new SaslDigestCallbackHandler(secretManager, this);\n           break;\n         }\n         case KERBEROS: {\n           String fullName \u003d UserGroupInformation.getCurrentUser().getUserName();\n           if (LOG.isDebugEnabled())\n             LOG.debug(\"Kerberos principal name is \" + fullName);\n           KerberosName krbName \u003d new KerberosName(fullName);\n           hostname \u003d krbName.getHostName();\n           if (hostname \u003d\u003d null) {\n             throw new AccessControlException(\n                 \"Kerberos principal name does NOT have the expected \"\n                     + \"hostname part: \" + fullName);\n           }\n           saslProtocol \u003d krbName.getServiceName();\n           saslCallback \u003d new SaslGssCallbackHandler();\n           break;\n         }\n         default:\n           // we should never be able to get here\n           throw new AccessControlException(\n               \"Server does not support SASL \" + authMethod);\n       }\n       \n-      String mechanism \u003d authMethod.getMechanismName();\n-      saslServer \u003d Sasl.createSaslServer(\n-          mechanism, saslProtocol, hostname,\n-          SaslRpcServer.SASL_PROPS, saslCallback);\n-      if (saslServer \u003d\u003d null) {\n-        throw new AccessControlException(\n-            \"Unable to find SASL server implementation for \" + mechanism);\n-      }\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Created SASL server with mechanism \u003d \" + mechanism);\n-      }\n-      return saslServer;\n+      return createSaslServer(authMethod.getMechanismName(), saslProtocol,\n+                              hostname, saslCallback);                                    \n     }\n\\ No newline at end of file\n",
          "actualSource": "    private SaslServer createSaslServer(AuthMethod authMethod)\n        throws IOException, InterruptedException {\n      String hostname \u003d null;\n      String saslProtocol \u003d null;\n      CallbackHandler saslCallback \u003d null;\n      \n      switch (authMethod) {\n        case SIMPLE: {\n          return null; // no sasl for simple\n        }\n        case DIGEST: {\n          secretManager.checkAvailableForRead();\n          hostname \u003d SaslRpcServer.SASL_DEFAULT_REALM;\n          saslCallback \u003d new SaslDigestCallbackHandler(secretManager, this);\n          break;\n        }\n        case KERBEROS: {\n          String fullName \u003d UserGroupInformation.getCurrentUser().getUserName();\n          if (LOG.isDebugEnabled())\n            LOG.debug(\"Kerberos principal name is \" + fullName);\n          KerberosName krbName \u003d new KerberosName(fullName);\n          hostname \u003d krbName.getHostName();\n          if (hostname \u003d\u003d null) {\n            throw new AccessControlException(\n                \"Kerberos principal name does NOT have the expected \"\n                    + \"hostname part: \" + fullName);\n          }\n          saslProtocol \u003d krbName.getServiceName();\n          saslCallback \u003d new SaslGssCallbackHandler();\n          break;\n        }\n        default:\n          // we should never be able to get here\n          throw new AccessControlException(\n              \"Server does not support SASL \" + authMethod);\n      }\n      \n      return createSaslServer(authMethod.getMechanismName(), saslProtocol,\n                              hostname, saslCallback);                                    \n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {
            "oldValue": "[IOException]",
            "newValue": "[IOException, InterruptedException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-9070. Kerberos SASL server cannot find kerberos key. Contributed by Daryn Sharp.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1417729 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "05/12/12 6:53 PM",
          "commitName": "3337588975fa24c0044408c6caf91abea4dca4d4",
          "commitAuthor": "Aaron Myers",
          "commitDateOld": "13/11/12 9:10 AM",
          "commitNameOld": "fe8f635b78d59e286771ec75ff73245b40d30907",
          "commitAuthorOld": "Daryn Sharp",
          "daysBetweenCommits": 22.41,
          "commitsBetweenForRepo": 88,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,40 @@\n     private SaslServer createSaslServer(AuthMethod authMethod)\n-        throws IOException {\n-      SaslServer saslServer \u003d null;\n+        throws IOException, InterruptedException {\n       String hostname \u003d null;\n       String saslProtocol \u003d null;\n       CallbackHandler saslCallback \u003d null;\n       \n       switch (authMethod) {\n         case SIMPLE: {\n           return null; // no sasl for simple\n         }\n         case DIGEST: {\n           secretManager.checkAvailableForRead();\n           hostname \u003d SaslRpcServer.SASL_DEFAULT_REALM;\n           saslCallback \u003d new SaslDigestCallbackHandler(secretManager, this);\n           break;\n         }\n         case KERBEROS: {\n           String fullName \u003d UserGroupInformation.getCurrentUser().getUserName();\n           if (LOG.isDebugEnabled())\n             LOG.debug(\"Kerberos principal name is \" + fullName);\n           KerberosName krbName \u003d new KerberosName(fullName);\n           hostname \u003d krbName.getHostName();\n           if (hostname \u003d\u003d null) {\n             throw new AccessControlException(\n                 \"Kerberos principal name does NOT have the expected \"\n                     + \"hostname part: \" + fullName);\n           }\n           saslProtocol \u003d krbName.getServiceName();\n           saslCallback \u003d new SaslGssCallbackHandler();\n           break;\n         }\n         default:\n           // we should never be able to get here\n           throw new AccessControlException(\n               \"Server does not support SASL \" + authMethod);\n       }\n       \n-      String mechanism \u003d authMethod.getMechanismName();\n-      saslServer \u003d Sasl.createSaslServer(\n-          mechanism, saslProtocol, hostname,\n-          SaslRpcServer.SASL_PROPS, saslCallback);\n-      if (saslServer \u003d\u003d null) {\n-        throw new AccessControlException(\n-            \"Unable to find SASL server implementation for \" + mechanism);\n-      }\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Created SASL server with mechanism \u003d \" + mechanism);\n-      }\n-      return saslServer;\n+      return createSaslServer(authMethod.getMechanismName(), saslProtocol,\n+                              hostname, saslCallback);                                    \n     }\n\\ No newline at end of file\n",
          "actualSource": "    private SaslServer createSaslServer(AuthMethod authMethod)\n        throws IOException, InterruptedException {\n      String hostname \u003d null;\n      String saslProtocol \u003d null;\n      CallbackHandler saslCallback \u003d null;\n      \n      switch (authMethod) {\n        case SIMPLE: {\n          return null; // no sasl for simple\n        }\n        case DIGEST: {\n          secretManager.checkAvailableForRead();\n          hostname \u003d SaslRpcServer.SASL_DEFAULT_REALM;\n          saslCallback \u003d new SaslDigestCallbackHandler(secretManager, this);\n          break;\n        }\n        case KERBEROS: {\n          String fullName \u003d UserGroupInformation.getCurrentUser().getUserName();\n          if (LOG.isDebugEnabled())\n            LOG.debug(\"Kerberos principal name is \" + fullName);\n          KerberosName krbName \u003d new KerberosName(fullName);\n          hostname \u003d krbName.getHostName();\n          if (hostname \u003d\u003d null) {\n            throw new AccessControlException(\n                \"Kerberos principal name does NOT have the expected \"\n                    + \"hostname part: \" + fullName);\n          }\n          saslProtocol \u003d krbName.getServiceName();\n          saslCallback \u003d new SaslGssCallbackHandler();\n          break;\n        }\n        default:\n          // we should never be able to get here\n          throw new AccessControlException(\n              \"Server does not support SASL \" + authMethod);\n      }\n      \n      return createSaslServer(authMethod.getMechanismName(), saslProtocol,\n                              hostname, saslCallback);                                    \n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {}
        }
      ]
    },
    "4755ef989ac771ad3c2c40f9914455725c931447": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9021. Enforce configured SASL method on the server (daryn via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1408473 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/11/12 2:13 PM",
      "commitName": "4755ef989ac771ad3c2c40f9914455725c931447",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "07/11/12 2:50 PM",
      "commitNameOld": "1594dd6965c412a08339a0079ee1416dd6f595f9",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 4.97,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,51 @@\n     private SaslServer createSaslServer(AuthMethod authMethod)\n         throws IOException {\n-      try {\n-        return createSaslServerInternal(authMethod);\n-      } catch (IOException ioe) {\n-        final String ioeClass \u003d ioe.getClass().getName();\n-        final String ioeMessage  \u003d ioe.getLocalizedMessage();\n-        if (authMethod \u003d\u003d AuthMethod.SIMPLE) {\n-          setupResponse(authFailedResponse, authFailedCall,\n-              RpcStatusProto.FATAL, null, ioeClass, ioeMessage);\n-          responder.doRespond(authFailedCall);\n-        } else {\n-          doSaslReply(SaslStatus.ERROR, null, ioeClass, ioeMessage);\n+      SaslServer saslServer \u003d null;\n+      String hostname \u003d null;\n+      String saslProtocol \u003d null;\n+      CallbackHandler saslCallback \u003d null;\n+      \n+      switch (authMethod) {\n+        case SIMPLE: {\n+          return null; // no sasl for simple\n         }\n-        throw ioe;\n+        case DIGEST: {\n+          secretManager.checkAvailableForRead();\n+          hostname \u003d SaslRpcServer.SASL_DEFAULT_REALM;\n+          saslCallback \u003d new SaslDigestCallbackHandler(secretManager, this);\n+          break;\n+        }\n+        case KERBEROS: {\n+          String fullName \u003d UserGroupInformation.getCurrentUser().getUserName();\n+          if (LOG.isDebugEnabled())\n+            LOG.debug(\"Kerberos principal name is \" + fullName);\n+          KerberosName krbName \u003d new KerberosName(fullName);\n+          hostname \u003d krbName.getHostName();\n+          if (hostname \u003d\u003d null) {\n+            throw new AccessControlException(\n+                \"Kerberos principal name does NOT have the expected \"\n+                    + \"hostname part: \" + fullName);\n+          }\n+          saslProtocol \u003d krbName.getServiceName();\n+          saslCallback \u003d new SaslGssCallbackHandler();\n+          break;\n+        }\n+        default:\n+          // we should never be able to get here\n+          throw new AccessControlException(\n+              \"Server does not support SASL \" + authMethod);\n       }\n+      \n+      String mechanism \u003d authMethod.getMechanismName();\n+      saslServer \u003d Sasl.createSaslServer(\n+          mechanism, saslProtocol, hostname,\n+          SaslRpcServer.SASL_PROPS, saslCallback);\n+      if (saslServer \u003d\u003d null) {\n+        throw new AccessControlException(\n+            \"Unable to find SASL server implementation for \" + mechanism);\n+      }\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Created SASL server with mechanism \u003d \" + mechanism);\n+      }\n+      return saslServer;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private SaslServer createSaslServer(AuthMethod authMethod)\n        throws IOException {\n      SaslServer saslServer \u003d null;\n      String hostname \u003d null;\n      String saslProtocol \u003d null;\n      CallbackHandler saslCallback \u003d null;\n      \n      switch (authMethod) {\n        case SIMPLE: {\n          return null; // no sasl for simple\n        }\n        case DIGEST: {\n          secretManager.checkAvailableForRead();\n          hostname \u003d SaslRpcServer.SASL_DEFAULT_REALM;\n          saslCallback \u003d new SaslDigestCallbackHandler(secretManager, this);\n          break;\n        }\n        case KERBEROS: {\n          String fullName \u003d UserGroupInformation.getCurrentUser().getUserName();\n          if (LOG.isDebugEnabled())\n            LOG.debug(\"Kerberos principal name is \" + fullName);\n          KerberosName krbName \u003d new KerberosName(fullName);\n          hostname \u003d krbName.getHostName();\n          if (hostname \u003d\u003d null) {\n            throw new AccessControlException(\n                \"Kerberos principal name does NOT have the expected \"\n                    + \"hostname part: \" + fullName);\n          }\n          saslProtocol \u003d krbName.getServiceName();\n          saslCallback \u003d new SaslGssCallbackHandler();\n          break;\n        }\n        default:\n          // we should never be able to get here\n          throw new AccessControlException(\n              \"Server does not support SASL \" + authMethod);\n      }\n      \n      String mechanism \u003d authMethod.getMechanismName();\n      saslServer \u003d Sasl.createSaslServer(\n          mechanism, saslProtocol, hostname,\n          SaslRpcServer.SASL_PROPS, saslCallback);\n      if (saslServer \u003d\u003d null) {\n        throw new AccessControlException(\n            \"Unable to find SASL server implementation for \" + mechanism);\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Created SASL server with mechanism \u003d \" + mechanism);\n      }\n      return saslServer;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "1594dd6965c412a08339a0079ee1416dd6f595f9": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-9015. Standardize creation of SaslRpcServers (daryn via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1406851 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/11/12 2:50 PM",
      "commitName": "1594dd6965c412a08339a0079ee1416dd6f595f9",
      "commitAuthor": "Robert Joseph Evans",
      "diff": "@@ -0,0 +1,17 @@\n+    private SaslServer createSaslServer(AuthMethod authMethod)\n+        throws IOException {\n+      try {\n+        return createSaslServerInternal(authMethod);\n+      } catch (IOException ioe) {\n+        final String ioeClass \u003d ioe.getClass().getName();\n+        final String ioeMessage  \u003d ioe.getLocalizedMessage();\n+        if (authMethod \u003d\u003d AuthMethod.SIMPLE) {\n+          setupResponse(authFailedResponse, authFailedCall,\n+              RpcStatusProto.FATAL, null, ioeClass, ioeMessage);\n+          responder.doRespond(authFailedCall);\n+        } else {\n+          doSaslReply(SaslStatus.ERROR, null, ioeClass, ioeMessage);\n+        }\n+        throw ioe;\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private SaslServer createSaslServer(AuthMethod authMethod)\n        throws IOException {\n      try {\n        return createSaslServerInternal(authMethod);\n      } catch (IOException ioe) {\n        final String ioeClass \u003d ioe.getClass().getName();\n        final String ioeMessage  \u003d ioe.getLocalizedMessage();\n        if (authMethod \u003d\u003d AuthMethod.SIMPLE) {\n          setupResponse(authFailedResponse, authFailedCall,\n              RpcStatusProto.FATAL, null, ioeClass, ioeMessage);\n          responder.doRespond(authFailedCall);\n        } else {\n          doSaslReply(SaslStatus.ERROR, null, ioeClass, ioeMessage);\n        }\n        throw ioe;\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java"
    }
  }
}