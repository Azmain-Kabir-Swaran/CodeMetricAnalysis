{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Groups.java",
  "functionName": "getGroups",
  "functionId": "getGroups___user-String(modifiers-final)",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/Groups.java",
  "functionStartLine": 210,
  "functionEndLine": 232,
  "numCommitsSeen": 29,
  "timeTaken": 2601,
  "changeHistory": [
    "94225152399e6e89fa7b4cff6d17d33e544329a3",
    "53caeaa16b1450b54e994c77f5d0c8a767b88d57",
    "e5a692519956aefb3a540ed0137b63cf598ac10d",
    "d3bf8186aeeb7ecf8c0e121eae1107bd582dbbd7",
    "2a1ecd00dadb1577da9e02822469e8194f1d3cee",
    "7f059104d293614f3250bd1408874e97f659c92b",
    "b7aca6bd909eb3033e8b614de8275f9246ca44bc",
    "4a5ba3b7bd2360fd9605863630b477d362874e1e",
    "0ac5e8941986105fdb430ac9d08f8bbc2ac25f88",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "7efb9640be26aabe3878310e82248a1b6b767a9a",
    "5075d7dbde8be998e22cae1e895e61c52318658b",
    "ae93ba7501d95e9d26a29de25f4cc39e5225ca20"
  ],
  "changeHistoryShort": {
    "94225152399e6e89fa7b4cff6d17d33e544329a3": "Ybodychange",
    "53caeaa16b1450b54e994c77f5d0c8a767b88d57": "Ybodychange",
    "e5a692519956aefb3a540ed0137b63cf598ac10d": "Ymultichange(Ybodychange,Yparametermetachange)",
    "d3bf8186aeeb7ecf8c0e121eae1107bd582dbbd7": "Ybodychange",
    "2a1ecd00dadb1577da9e02822469e8194f1d3cee": "Ybodychange",
    "7f059104d293614f3250bd1408874e97f659c92b": "Ybodychange",
    "b7aca6bd909eb3033e8b614de8275f9246ca44bc": "Ybodychange",
    "4a5ba3b7bd2360fd9605863630b477d362874e1e": "Ybodychange",
    "0ac5e8941986105fdb430ac9d08f8bbc2ac25f88": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "7efb9640be26aabe3878310e82248a1b6b767a9a": "Ybodychange",
    "5075d7dbde8be998e22cae1e895e61c52318658b": "Ybodychange",
    "ae93ba7501d95e9d26a29de25f4cc39e5225ca20": "Yintroduced"
  },
  "changeHistoryDetails": {
    "94225152399e6e89fa7b4cff6d17d33e544329a3": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13442. Optimize UGI group lookups. Contributed by Daryn Sharp.\n",
      "commitDate": "04/08/16 8:45 AM",
      "commitName": "94225152399e6e89fa7b4cff6d17d33e544329a3",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "27/06/16 9:36 AM",
      "commitNameOld": "9683eab0e1ee42c159cf678254c464d97bc3ff57",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 37.97,
      "commitsBetweenForRepo": 353,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,23 @@\n   public List\u003cString\u003e getGroups(final String user) throws IOException {\n     // No need to lookup for groups of static users\n-    List\u003cString\u003e staticMapping \u003d staticUserToGroupsMap.get(user);\n-    if (staticMapping !\u003d null) {\n-      return staticMapping;\n+    Map\u003cString, List\u003cString\u003e\u003e staticUserToGroupsMap \u003d staticMapRef.get();\n+    if (staticUserToGroupsMap !\u003d null) {\n+      List\u003cString\u003e staticMapping \u003d staticUserToGroupsMap.get(user);\n+      if (staticMapping !\u003d null) {\n+        return staticMapping;\n+      }\n     }\n \n     // Check the negative cache first\n     if (isNegativeCacheEnabled()) {\n       if (negativeCache.contains(user)) {\n         throw noGroupsForUser(user);\n       }\n     }\n \n     try {\n       return cache.get(user);\n     } catch (ExecutionException e) {\n       throw (IOException)e.getCause();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cString\u003e getGroups(final String user) throws IOException {\n    // No need to lookup for groups of static users\n    Map\u003cString, List\u003cString\u003e\u003e staticUserToGroupsMap \u003d staticMapRef.get();\n    if (staticUserToGroupsMap !\u003d null) {\n      List\u003cString\u003e staticMapping \u003d staticUserToGroupsMap.get(user);\n      if (staticMapping !\u003d null) {\n        return staticMapping;\n      }\n    }\n\n    // Check the negative cache first\n    if (isNegativeCacheEnabled()) {\n      if (negativeCache.contains(user)) {\n        throw noGroupsForUser(user);\n      }\n    }\n\n    try {\n      return cache.get(user);\n    } catch (ExecutionException e) {\n      throw (IOException)e.getCause();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/Groups.java",
      "extendedDetails": {}
    },
    "53caeaa16b1450b54e994c77f5d0c8a767b88d57": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11402. Negative user-to-group cache entries are never cleared for never-again-accessed users. Contributed by Varun Saxena.\n",
      "commitDate": "05/01/15 3:06 PM",
      "commitName": "53caeaa16b1450b54e994c77f5d0c8a767b88d57",
      "commitAuthor": "Benoy Antony",
      "commitDateOld": "12/12/14 4:30 PM",
      "commitNameOld": "e5a692519956aefb3a540ed0137b63cf598ac10d",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 23.94,
      "commitsBetweenForRepo": 107,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,20 @@\n   public List\u003cString\u003e getGroups(final String user) throws IOException {\n     // No need to lookup for groups of static users\n     List\u003cString\u003e staticMapping \u003d staticUserToGroupsMap.get(user);\n     if (staticMapping !\u003d null) {\n       return staticMapping;\n     }\n \n     // Check the negative cache first\n     if (isNegativeCacheEnabled()) {\n-      Long expirationTime \u003d negativeCacheMask.get(user);\n-      if (expirationTime !\u003d null) {\n-        if (timer.monotonicNow() \u003c expirationTime) {\n-          throw noGroupsForUser(user);\n-        } else {\n-          negativeCacheMask.remove(user, expirationTime);\n-        }\n+      if (negativeCache.contains(user)) {\n+        throw noGroupsForUser(user);\n       }\n     }\n \n     try {\n       return cache.get(user);\n     } catch (ExecutionException e) {\n       throw (IOException)e.getCause();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cString\u003e getGroups(final String user) throws IOException {\n    // No need to lookup for groups of static users\n    List\u003cString\u003e staticMapping \u003d staticUserToGroupsMap.get(user);\n    if (staticMapping !\u003d null) {\n      return staticMapping;\n    }\n\n    // Check the negative cache first\n    if (isNegativeCacheEnabled()) {\n      if (negativeCache.contains(user)) {\n        throw noGroupsForUser(user);\n      }\n    }\n\n    try {\n      return cache.get(user);\n    } catch (ExecutionException e) {\n      throw (IOException)e.getCause();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/Groups.java",
      "extendedDetails": {}
    },
    "e5a692519956aefb3a540ed0137b63cf598ac10d": {
      "type": "Ymultichange(Ybodychange,Yparametermetachange)",
      "commitMessage": "HADOOP-11238. Update the NameNode\u0027s Group Cache in the background when possible (Chris Li via Colin P. McCabe)\n",
      "commitDate": "12/12/14 4:30 PM",
      "commitName": "e5a692519956aefb3a540ed0137b63cf598ac10d",
      "commitAuthor": "Colin Patrick Mccabe",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-11238. Update the NameNode\u0027s Group Cache in the background when possible (Chris Li via Colin P. McCabe)\n",
          "commitDate": "12/12/14 4:30 PM",
          "commitName": "e5a692519956aefb3a540ed0137b63cf598ac10d",
          "commitAuthor": "Colin Patrick Mccabe",
          "commitDateOld": "21/07/14 2:52 PM",
          "commitNameOld": "d3bf8186aeeb7ecf8c0e121eae1107bd582dbbd7",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 144.11,
          "commitsBetweenForRepo": 1350,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,25 @@\n-  public List\u003cString\u003e getGroups(String user) throws IOException {\n+  public List\u003cString\u003e getGroups(final String user) throws IOException {\n     // No need to lookup for groups of static users\n     List\u003cString\u003e staticMapping \u003d staticUserToGroupsMap.get(user);\n     if (staticMapping !\u003d null) {\n       return staticMapping;\n     }\n-    // Return cached value if available\n-    CachedGroups groups \u003d userToGroupsMap.get(user);\n-    long startMs \u003d timer.monotonicNow();\n-    if (!hasExpired(groups, startMs)) {\n-      if(LOG.isDebugEnabled()) {\n-        LOG.debug(\"Returning cached groups for \u0027\" + user + \"\u0027\");\n+\n+    // Check the negative cache first\n+    if (isNegativeCacheEnabled()) {\n+      Long expirationTime \u003d negativeCacheMask.get(user);\n+      if (expirationTime !\u003d null) {\n+        if (timer.monotonicNow() \u003c expirationTime) {\n+          throw noGroupsForUser(user);\n+        } else {\n+          negativeCacheMask.remove(user, expirationTime);\n+        }\n       }\n-      if (groups.getGroups().isEmpty()) {\n-        // Even with enabling negative cache, getGroups() has the same behavior\n-        // that throws IOException if the groups for the user is empty.\n-        throw new IOException(\"No groups found for user \" + user);\n-      }\n-      return groups.getGroups();\n     }\n \n-    // Create and cache user\u0027s groups\n-    List\u003cString\u003e groupList \u003d impl.getGroups(user);\n-    long endMs \u003d timer.monotonicNow();\n-    long deltaMs \u003d endMs - startMs ;\n-    UserGroupInformation.metrics.addGetGroups(deltaMs);\n-    if (deltaMs \u003e warningDeltaMs) {\n-      LOG.warn(\"Potential performance problem: getGroups(user\u003d\" + user +\") \" +\n-          \"took \" + deltaMs + \" milliseconds.\");\n+    try {\n+      return cache.get(user);\n+    } catch (ExecutionException e) {\n+      throw (IOException)e.getCause();\n     }\n-    groups \u003d new CachedGroups(groupList, endMs);\n-    if (groups.getGroups().isEmpty()) {\n-      if (isNegativeCacheEnabled()) {\n-        userToGroupsMap.put(user, groups);\n-      }\n-      throw new IOException(\"No groups found for user \" + user);\n-    }\n-    userToGroupsMap.put(user, groups);\n-    if(LOG.isDebugEnabled()) {\n-      LOG.debug(\"Returning fetched groups for \u0027\" + user + \"\u0027\");\n-    }\n-    return groups.getGroups();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public List\u003cString\u003e getGroups(final String user) throws IOException {\n    // No need to lookup for groups of static users\n    List\u003cString\u003e staticMapping \u003d staticUserToGroupsMap.get(user);\n    if (staticMapping !\u003d null) {\n      return staticMapping;\n    }\n\n    // Check the negative cache first\n    if (isNegativeCacheEnabled()) {\n      Long expirationTime \u003d negativeCacheMask.get(user);\n      if (expirationTime !\u003d null) {\n        if (timer.monotonicNow() \u003c expirationTime) {\n          throw noGroupsForUser(user);\n        } else {\n          negativeCacheMask.remove(user, expirationTime);\n        }\n      }\n    }\n\n    try {\n      return cache.get(user);\n    } catch (ExecutionException e) {\n      throw (IOException)e.getCause();\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/Groups.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "HADOOP-11238. Update the NameNode\u0027s Group Cache in the background when possible (Chris Li via Colin P. McCabe)\n",
          "commitDate": "12/12/14 4:30 PM",
          "commitName": "e5a692519956aefb3a540ed0137b63cf598ac10d",
          "commitAuthor": "Colin Patrick Mccabe",
          "commitDateOld": "21/07/14 2:52 PM",
          "commitNameOld": "d3bf8186aeeb7ecf8c0e121eae1107bd582dbbd7",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 144.11,
          "commitsBetweenForRepo": 1350,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,25 @@\n-  public List\u003cString\u003e getGroups(String user) throws IOException {\n+  public List\u003cString\u003e getGroups(final String user) throws IOException {\n     // No need to lookup for groups of static users\n     List\u003cString\u003e staticMapping \u003d staticUserToGroupsMap.get(user);\n     if (staticMapping !\u003d null) {\n       return staticMapping;\n     }\n-    // Return cached value if available\n-    CachedGroups groups \u003d userToGroupsMap.get(user);\n-    long startMs \u003d timer.monotonicNow();\n-    if (!hasExpired(groups, startMs)) {\n-      if(LOG.isDebugEnabled()) {\n-        LOG.debug(\"Returning cached groups for \u0027\" + user + \"\u0027\");\n+\n+    // Check the negative cache first\n+    if (isNegativeCacheEnabled()) {\n+      Long expirationTime \u003d negativeCacheMask.get(user);\n+      if (expirationTime !\u003d null) {\n+        if (timer.monotonicNow() \u003c expirationTime) {\n+          throw noGroupsForUser(user);\n+        } else {\n+          negativeCacheMask.remove(user, expirationTime);\n+        }\n       }\n-      if (groups.getGroups().isEmpty()) {\n-        // Even with enabling negative cache, getGroups() has the same behavior\n-        // that throws IOException if the groups for the user is empty.\n-        throw new IOException(\"No groups found for user \" + user);\n-      }\n-      return groups.getGroups();\n     }\n \n-    // Create and cache user\u0027s groups\n-    List\u003cString\u003e groupList \u003d impl.getGroups(user);\n-    long endMs \u003d timer.monotonicNow();\n-    long deltaMs \u003d endMs - startMs ;\n-    UserGroupInformation.metrics.addGetGroups(deltaMs);\n-    if (deltaMs \u003e warningDeltaMs) {\n-      LOG.warn(\"Potential performance problem: getGroups(user\u003d\" + user +\") \" +\n-          \"took \" + deltaMs + \" milliseconds.\");\n+    try {\n+      return cache.get(user);\n+    } catch (ExecutionException e) {\n+      throw (IOException)e.getCause();\n     }\n-    groups \u003d new CachedGroups(groupList, endMs);\n-    if (groups.getGroups().isEmpty()) {\n-      if (isNegativeCacheEnabled()) {\n-        userToGroupsMap.put(user, groups);\n-      }\n-      throw new IOException(\"No groups found for user \" + user);\n-    }\n-    userToGroupsMap.put(user, groups);\n-    if(LOG.isDebugEnabled()) {\n-      LOG.debug(\"Returning fetched groups for \u0027\" + user + \"\u0027\");\n-    }\n-    return groups.getGroups();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public List\u003cString\u003e getGroups(final String user) throws IOException {\n    // No need to lookup for groups of static users\n    List\u003cString\u003e staticMapping \u003d staticUserToGroupsMap.get(user);\n    if (staticMapping !\u003d null) {\n      return staticMapping;\n    }\n\n    // Check the negative cache first\n    if (isNegativeCacheEnabled()) {\n      Long expirationTime \u003d negativeCacheMask.get(user);\n      if (expirationTime !\u003d null) {\n        if (timer.monotonicNow() \u003c expirationTime) {\n          throw noGroupsForUser(user);\n        } else {\n          negativeCacheMask.remove(user, expirationTime);\n        }\n      }\n    }\n\n    try {\n      return cache.get(user);\n    } catch (ExecutionException e) {\n      throw (IOException)e.getCause();\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/Groups.java",
          "extendedDetails": {
            "oldValue": "[user-String]",
            "newValue": "[user-String(modifiers-final)]"
          }
        }
      ]
    },
    "d3bf8186aeeb7ecf8c0e121eae1107bd582dbbd7": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10755. Support negative caching of user-group mapping. Contributed by Lei Xu.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1612408 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/07/14 2:52 PM",
      "commitName": "d3bf8186aeeb7ecf8c0e121eae1107bd582dbbd7",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "13/02/14 1:23 PM",
      "commitNameOld": "2b916db60b94ceffbb17dc2778287c88b966bc04",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 158.02,
      "commitsBetweenForRepo": 1083,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,43 @@\n   public List\u003cString\u003e getGroups(String user) throws IOException {\n     // No need to lookup for groups of static users\n     List\u003cString\u003e staticMapping \u003d staticUserToGroupsMap.get(user);\n     if (staticMapping !\u003d null) {\n       return staticMapping;\n     }\n     // Return cached value if available\n     CachedGroups groups \u003d userToGroupsMap.get(user);\n-    long startMs \u003d Time.monotonicNow();\n-    // if cache has a value and it hasn\u0027t expired\n-    if (groups !\u003d null \u0026\u0026 (groups.getTimestamp() + cacheTimeout \u003e startMs)) {\n+    long startMs \u003d timer.monotonicNow();\n+    if (!hasExpired(groups, startMs)) {\n       if(LOG.isDebugEnabled()) {\n         LOG.debug(\"Returning cached groups for \u0027\" + user + \"\u0027\");\n       }\n+      if (groups.getGroups().isEmpty()) {\n+        // Even with enabling negative cache, getGroups() has the same behavior\n+        // that throws IOException if the groups for the user is empty.\n+        throw new IOException(\"No groups found for user \" + user);\n+      }\n       return groups.getGroups();\n     }\n \n     // Create and cache user\u0027s groups\n     List\u003cString\u003e groupList \u003d impl.getGroups(user);\n-    long endMs \u003d Time.monotonicNow();\n+    long endMs \u003d timer.monotonicNow();\n     long deltaMs \u003d endMs - startMs ;\n     UserGroupInformation.metrics.addGetGroups(deltaMs);\n     if (deltaMs \u003e warningDeltaMs) {\n       LOG.warn(\"Potential performance problem: getGroups(user\u003d\" + user +\") \" +\n           \"took \" + deltaMs + \" milliseconds.\");\n     }\n     groups \u003d new CachedGroups(groupList, endMs);\n     if (groups.getGroups().isEmpty()) {\n+      if (isNegativeCacheEnabled()) {\n+        userToGroupsMap.put(user, groups);\n+      }\n       throw new IOException(\"No groups found for user \" + user);\n     }\n     userToGroupsMap.put(user, groups);\n     if(LOG.isDebugEnabled()) {\n       LOG.debug(\"Returning fetched groups for \u0027\" + user + \"\u0027\");\n     }\n     return groups.getGroups();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cString\u003e getGroups(String user) throws IOException {\n    // No need to lookup for groups of static users\n    List\u003cString\u003e staticMapping \u003d staticUserToGroupsMap.get(user);\n    if (staticMapping !\u003d null) {\n      return staticMapping;\n    }\n    // Return cached value if available\n    CachedGroups groups \u003d userToGroupsMap.get(user);\n    long startMs \u003d timer.monotonicNow();\n    if (!hasExpired(groups, startMs)) {\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"Returning cached groups for \u0027\" + user + \"\u0027\");\n      }\n      if (groups.getGroups().isEmpty()) {\n        // Even with enabling negative cache, getGroups() has the same behavior\n        // that throws IOException if the groups for the user is empty.\n        throw new IOException(\"No groups found for user \" + user);\n      }\n      return groups.getGroups();\n    }\n\n    // Create and cache user\u0027s groups\n    List\u003cString\u003e groupList \u003d impl.getGroups(user);\n    long endMs \u003d timer.monotonicNow();\n    long deltaMs \u003d endMs - startMs ;\n    UserGroupInformation.metrics.addGetGroups(deltaMs);\n    if (deltaMs \u003e warningDeltaMs) {\n      LOG.warn(\"Potential performance problem: getGroups(user\u003d\" + user +\") \" +\n          \"took \" + deltaMs + \" milliseconds.\");\n    }\n    groups \u003d new CachedGroups(groupList, endMs);\n    if (groups.getGroups().isEmpty()) {\n      if (isNegativeCacheEnabled()) {\n        userToGroupsMap.put(user, groups);\n      }\n      throw new IOException(\"No groups found for user \" + user);\n    }\n    userToGroupsMap.put(user, groups);\n    if(LOG.isDebugEnabled()) {\n      LOG.debug(\"Returning fetched groups for \u0027\" + user + \"\u0027\");\n    }\n    return groups.getGroups();\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/Groups.java",
      "extendedDetails": {}
    },
    "2a1ecd00dadb1577da9e02822469e8194f1d3cee": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5220. Expose group resolution time as metric (jxiang via cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1555976 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/01/14 10:59 AM",
      "commitName": "2a1ecd00dadb1577da9e02822469e8194f1d3cee",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "06/12/13 4:11 PM",
      "commitNameOld": "7f059104d293614f3250bd1408874e97f659c92b",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 30.78,
      "commitsBetweenForRepo": 128,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,36 @@\n   public List\u003cString\u003e getGroups(String user) throws IOException {\n     // No need to lookup for groups of static users\n     List\u003cString\u003e staticMapping \u003d staticUserToGroupsMap.get(user);\n     if (staticMapping !\u003d null) {\n       return staticMapping;\n     }\n     // Return cached value if available\n     CachedGroups groups \u003d userToGroupsMap.get(user);\n     long startMs \u003d Time.monotonicNow();\n     // if cache has a value and it hasn\u0027t expired\n     if (groups !\u003d null \u0026\u0026 (groups.getTimestamp() + cacheTimeout \u003e startMs)) {\n       if(LOG.isDebugEnabled()) {\n         LOG.debug(\"Returning cached groups for \u0027\" + user + \"\u0027\");\n       }\n       return groups.getGroups();\n     }\n \n     // Create and cache user\u0027s groups\n     List\u003cString\u003e groupList \u003d impl.getGroups(user);\n     long endMs \u003d Time.monotonicNow();\n     long deltaMs \u003d endMs - startMs ;\n+    UserGroupInformation.metrics.addGetGroups(deltaMs);\n     if (deltaMs \u003e warningDeltaMs) {\n       LOG.warn(\"Potential performance problem: getGroups(user\u003d\" + user +\") \" +\n           \"took \" + deltaMs + \" milliseconds.\");\n     }\n     groups \u003d new CachedGroups(groupList, endMs);\n     if (groups.getGroups().isEmpty()) {\n       throw new IOException(\"No groups found for user \" + user);\n     }\n     userToGroupsMap.put(user, groups);\n     if(LOG.isDebugEnabled()) {\n       LOG.debug(\"Returning fetched groups for \u0027\" + user + \"\u0027\");\n     }\n     return groups.getGroups();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cString\u003e getGroups(String user) throws IOException {\n    // No need to lookup for groups of static users\n    List\u003cString\u003e staticMapping \u003d staticUserToGroupsMap.get(user);\n    if (staticMapping !\u003d null) {\n      return staticMapping;\n    }\n    // Return cached value if available\n    CachedGroups groups \u003d userToGroupsMap.get(user);\n    long startMs \u003d Time.monotonicNow();\n    // if cache has a value and it hasn\u0027t expired\n    if (groups !\u003d null \u0026\u0026 (groups.getTimestamp() + cacheTimeout \u003e startMs)) {\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"Returning cached groups for \u0027\" + user + \"\u0027\");\n      }\n      return groups.getGroups();\n    }\n\n    // Create and cache user\u0027s groups\n    List\u003cString\u003e groupList \u003d impl.getGroups(user);\n    long endMs \u003d Time.monotonicNow();\n    long deltaMs \u003d endMs - startMs ;\n    UserGroupInformation.metrics.addGetGroups(deltaMs);\n    if (deltaMs \u003e warningDeltaMs) {\n      LOG.warn(\"Potential performance problem: getGroups(user\u003d\" + user +\") \" +\n          \"took \" + deltaMs + \" milliseconds.\");\n    }\n    groups \u003d new CachedGroups(groupList, endMs);\n    if (groups.getGroups().isEmpty()) {\n      throw new IOException(\"No groups found for user \" + user);\n    }\n    userToGroupsMap.put(user, groups);\n    if(LOG.isDebugEnabled()) {\n      LOG.debug(\"Returning fetched groups for \u0027\" + user + \"\u0027\");\n    }\n    return groups.getGroups();\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/Groups.java",
      "extendedDetails": {}
    },
    "7f059104d293614f3250bd1408874e97f659c92b": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10142. Avoid groups lookup for unprivileged users such as dr.who (vinay via cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1548763 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/12/13 4:11 PM",
      "commitName": "7f059104d293614f3250bd1408874e97f659c92b",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "01/11/13 5:42 PM",
      "commitNameOld": "b7aca6bd909eb3033e8b614de8275f9246ca44bc",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 34.98,
      "commitsBetweenForRepo": 194,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,35 @@\n   public List\u003cString\u003e getGroups(String user) throws IOException {\n+    // No need to lookup for groups of static users\n+    List\u003cString\u003e staticMapping \u003d staticUserToGroupsMap.get(user);\n+    if (staticMapping !\u003d null) {\n+      return staticMapping;\n+    }\n     // Return cached value if available\n     CachedGroups groups \u003d userToGroupsMap.get(user);\n     long startMs \u003d Time.monotonicNow();\n     // if cache has a value and it hasn\u0027t expired\n     if (groups !\u003d null \u0026\u0026 (groups.getTimestamp() + cacheTimeout \u003e startMs)) {\n       if(LOG.isDebugEnabled()) {\n         LOG.debug(\"Returning cached groups for \u0027\" + user + \"\u0027\");\n       }\n       return groups.getGroups();\n     }\n \n     // Create and cache user\u0027s groups\n     List\u003cString\u003e groupList \u003d impl.getGroups(user);\n     long endMs \u003d Time.monotonicNow();\n     long deltaMs \u003d endMs - startMs ;\n     if (deltaMs \u003e warningDeltaMs) {\n       LOG.warn(\"Potential performance problem: getGroups(user\u003d\" + user +\") \" +\n           \"took \" + deltaMs + \" milliseconds.\");\n     }\n     groups \u003d new CachedGroups(groupList, endMs);\n     if (groups.getGroups().isEmpty()) {\n       throw new IOException(\"No groups found for user \" + user);\n     }\n     userToGroupsMap.put(user, groups);\n     if(LOG.isDebugEnabled()) {\n       LOG.debug(\"Returning fetched groups for \u0027\" + user + \"\u0027\");\n     }\n     return groups.getGroups();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cString\u003e getGroups(String user) throws IOException {\n    // No need to lookup for groups of static users\n    List\u003cString\u003e staticMapping \u003d staticUserToGroupsMap.get(user);\n    if (staticMapping !\u003d null) {\n      return staticMapping;\n    }\n    // Return cached value if available\n    CachedGroups groups \u003d userToGroupsMap.get(user);\n    long startMs \u003d Time.monotonicNow();\n    // if cache has a value and it hasn\u0027t expired\n    if (groups !\u003d null \u0026\u0026 (groups.getTimestamp() + cacheTimeout \u003e startMs)) {\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"Returning cached groups for \u0027\" + user + \"\u0027\");\n      }\n      return groups.getGroups();\n    }\n\n    // Create and cache user\u0027s groups\n    List\u003cString\u003e groupList \u003d impl.getGroups(user);\n    long endMs \u003d Time.monotonicNow();\n    long deltaMs \u003d endMs - startMs ;\n    if (deltaMs \u003e warningDeltaMs) {\n      LOG.warn(\"Potential performance problem: getGroups(user\u003d\" + user +\") \" +\n          \"took \" + deltaMs + \" milliseconds.\");\n    }\n    groups \u003d new CachedGroups(groupList, endMs);\n    if (groups.getGroups().isEmpty()) {\n      throw new IOException(\"No groups found for user \" + user);\n    }\n    userToGroupsMap.put(user, groups);\n    if(LOG.isDebugEnabled()) {\n      LOG.debug(\"Returning fetched groups for \u0027\" + user + \"\u0027\");\n    }\n    return groups.getGroups();\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/Groups.java",
      "extendedDetails": {}
    },
    "b7aca6bd909eb3033e8b614de8275f9246ca44bc": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10079. log a warning message if group resolution takes too long (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1538108 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/11/13 5:42 PM",
      "commitName": "b7aca6bd909eb3033e8b614de8275f9246ca44bc",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "12/07/12 12:01 PM",
      "commitNameOld": "4a5ba3b7bd2360fd9605863630b477d362874e1e",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 477.24,
      "commitsBetweenForRepo": 2830,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,30 @@\n   public List\u003cString\u003e getGroups(String user) throws IOException {\n     // Return cached value if available\n     CachedGroups groups \u003d userToGroupsMap.get(user);\n-    long now \u003d Time.now();\n+    long startMs \u003d Time.monotonicNow();\n     // if cache has a value and it hasn\u0027t expired\n-    if (groups !\u003d null \u0026\u0026 (groups.getTimestamp() + cacheTimeout \u003e now)) {\n+    if (groups !\u003d null \u0026\u0026 (groups.getTimestamp() + cacheTimeout \u003e startMs)) {\n       if(LOG.isDebugEnabled()) {\n         LOG.debug(\"Returning cached groups for \u0027\" + user + \"\u0027\");\n       }\n       return groups.getGroups();\n     }\n-    \n+\n     // Create and cache user\u0027s groups\n-    groups \u003d new CachedGroups(impl.getGroups(user));\n+    List\u003cString\u003e groupList \u003d impl.getGroups(user);\n+    long endMs \u003d Time.monotonicNow();\n+    long deltaMs \u003d endMs - startMs ;\n+    if (deltaMs \u003e warningDeltaMs) {\n+      LOG.warn(\"Potential performance problem: getGroups(user\u003d\" + user +\") \" +\n+          \"took \" + deltaMs + \" milliseconds.\");\n+    }\n+    groups \u003d new CachedGroups(groupList, endMs);\n     if (groups.getGroups().isEmpty()) {\n       throw new IOException(\"No groups found for user \" + user);\n     }\n     userToGroupsMap.put(user, groups);\n     if(LOG.isDebugEnabled()) {\n       LOG.debug(\"Returning fetched groups for \u0027\" + user + \"\u0027\");\n     }\n     return groups.getGroups();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cString\u003e getGroups(String user) throws IOException {\n    // Return cached value if available\n    CachedGroups groups \u003d userToGroupsMap.get(user);\n    long startMs \u003d Time.monotonicNow();\n    // if cache has a value and it hasn\u0027t expired\n    if (groups !\u003d null \u0026\u0026 (groups.getTimestamp() + cacheTimeout \u003e startMs)) {\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"Returning cached groups for \u0027\" + user + \"\u0027\");\n      }\n      return groups.getGroups();\n    }\n\n    // Create and cache user\u0027s groups\n    List\u003cString\u003e groupList \u003d impl.getGroups(user);\n    long endMs \u003d Time.monotonicNow();\n    long deltaMs \u003d endMs - startMs ;\n    if (deltaMs \u003e warningDeltaMs) {\n      LOG.warn(\"Potential performance problem: getGroups(user\u003d\" + user +\") \" +\n          \"took \" + deltaMs + \" milliseconds.\");\n    }\n    groups \u003d new CachedGroups(groupList, endMs);\n    if (groups.getGroups().isEmpty()) {\n      throw new IOException(\"No groups found for user \" + user);\n    }\n    userToGroupsMap.put(user, groups);\n    if(LOG.isDebugEnabled()) {\n      LOG.debug(\"Returning fetched groups for \u0027\" + user + \"\u0027\");\n    }\n    return groups.getGroups();\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/Groups.java",
      "extendedDetails": {}
    },
    "4a5ba3b7bd2360fd9605863630b477d362874e1e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3641. Move server Util time methods to common and use now instead of System#currentTimeMillis. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1360858 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/07/12 12:01 PM",
      "commitName": "4a5ba3b7bd2360fd9605863630b477d362874e1e",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "17/03/12 9:07 PM",
      "commitNameOld": "0ac5e8941986105fdb430ac9d08f8bbc2ac25f88",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 116.62,
      "commitsBetweenForRepo": 721,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   public List\u003cString\u003e getGroups(String user) throws IOException {\n     // Return cached value if available\n     CachedGroups groups \u003d userToGroupsMap.get(user);\n-    long now \u003d System.currentTimeMillis();\n+    long now \u003d Time.now();\n     // if cache has a value and it hasn\u0027t expired\n     if (groups !\u003d null \u0026\u0026 (groups.getTimestamp() + cacheTimeout \u003e now)) {\n       if(LOG.isDebugEnabled()) {\n         LOG.debug(\"Returning cached groups for \u0027\" + user + \"\u0027\");\n       }\n       return groups.getGroups();\n     }\n     \n     // Create and cache user\u0027s groups\n     groups \u003d new CachedGroups(impl.getGroups(user));\n     if (groups.getGroups().isEmpty()) {\n       throw new IOException(\"No groups found for user \" + user);\n     }\n     userToGroupsMap.put(user, groups);\n     if(LOG.isDebugEnabled()) {\n       LOG.debug(\"Returning fetched groups for \u0027\" + user + \"\u0027\");\n     }\n     return groups.getGroups();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cString\u003e getGroups(String user) throws IOException {\n    // Return cached value if available\n    CachedGroups groups \u003d userToGroupsMap.get(user);\n    long now \u003d Time.now();\n    // if cache has a value and it hasn\u0027t expired\n    if (groups !\u003d null \u0026\u0026 (groups.getTimestamp() + cacheTimeout \u003e now)) {\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"Returning cached groups for \u0027\" + user + \"\u0027\");\n      }\n      return groups.getGroups();\n    }\n    \n    // Create and cache user\u0027s groups\n    groups \u003d new CachedGroups(impl.getGroups(user));\n    if (groups.getGroups().isEmpty()) {\n      throw new IOException(\"No groups found for user \" + user);\n    }\n    userToGroupsMap.put(user, groups);\n    if(LOG.isDebugEnabled()) {\n      LOG.debug(\"Returning fetched groups for \u0027\" + user + \"\u0027\");\n    }\n    return groups.getGroups();\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/Groups.java",
      "extendedDetails": {}
    },
    "0ac5e8941986105fdb430ac9d08f8bbc2ac25f88": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8088. User-group mapping cache incorrectly does negative caching on transient failures (Khiwal Lee via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1302062 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/03/12 9:07 PM",
      "commitName": "0ac5e8941986105fdb430ac9d08f8bbc2ac25f88",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 206.16,
      "commitsBetweenForRepo": 1466,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,23 @@\n   public List\u003cString\u003e getGroups(String user) throws IOException {\n     // Return cached value if available\n     CachedGroups groups \u003d userToGroupsMap.get(user);\n     long now \u003d System.currentTimeMillis();\n     // if cache has a value and it hasn\u0027t expired\n     if (groups !\u003d null \u0026\u0026 (groups.getTimestamp() + cacheTimeout \u003e now)) {\n       if(LOG.isDebugEnabled()) {\n         LOG.debug(\"Returning cached groups for \u0027\" + user + \"\u0027\");\n       }\n       return groups.getGroups();\n     }\n     \n     // Create and cache user\u0027s groups\n     groups \u003d new CachedGroups(impl.getGroups(user));\n+    if (groups.getGroups().isEmpty()) {\n+      throw new IOException(\"No groups found for user \" + user);\n+    }\n     userToGroupsMap.put(user, groups);\n     if(LOG.isDebugEnabled()) {\n       LOG.debug(\"Returning fetched groups for \u0027\" + user + \"\u0027\");\n     }\n     return groups.getGroups();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cString\u003e getGroups(String user) throws IOException {\n    // Return cached value if available\n    CachedGroups groups \u003d userToGroupsMap.get(user);\n    long now \u003d System.currentTimeMillis();\n    // if cache has a value and it hasn\u0027t expired\n    if (groups !\u003d null \u0026\u0026 (groups.getTimestamp() + cacheTimeout \u003e now)) {\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"Returning cached groups for \u0027\" + user + \"\u0027\");\n      }\n      return groups.getGroups();\n    }\n    \n    // Create and cache user\u0027s groups\n    groups \u003d new CachedGroups(impl.getGroups(user));\n    if (groups.getGroups().isEmpty()) {\n      throw new IOException(\"No groups found for user \" + user);\n    }\n    userToGroupsMap.put(user, groups);\n    if(LOG.isDebugEnabled()) {\n      LOG.debug(\"Returning fetched groups for \u0027\" + user + \"\u0027\");\n    }\n    return groups.getGroups();\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/Groups.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public List\u003cString\u003e getGroups(String user) throws IOException {\n    // Return cached value if available\n    CachedGroups groups \u003d userToGroupsMap.get(user);\n    long now \u003d System.currentTimeMillis();\n    // if cache has a value and it hasn\u0027t expired\n    if (groups !\u003d null \u0026\u0026 (groups.getTimestamp() + cacheTimeout \u003e now)) {\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"Returning cached groups for \u0027\" + user + \"\u0027\");\n      }\n      return groups.getGroups();\n    }\n    \n    // Create and cache user\u0027s groups\n    groups \u003d new CachedGroups(impl.getGroups(user));\n    userToGroupsMap.put(user, groups);\n    if(LOG.isDebugEnabled()) {\n      LOG.debug(\"Returning fetched groups for \u0027\" + user + \"\u0027\");\n    }\n    return groups.getGroups();\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/Groups.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/security/Groups.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/Groups.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public List\u003cString\u003e getGroups(String user) throws IOException {\n    // Return cached value if available\n    CachedGroups groups \u003d userToGroupsMap.get(user);\n    long now \u003d System.currentTimeMillis();\n    // if cache has a value and it hasn\u0027t expired\n    if (groups !\u003d null \u0026\u0026 (groups.getTimestamp() + cacheTimeout \u003e now)) {\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"Returning cached groups for \u0027\" + user + \"\u0027\");\n      }\n      return groups.getGroups();\n    }\n    \n    // Create and cache user\u0027s groups\n    groups \u003d new CachedGroups(impl.getGroups(user));\n    userToGroupsMap.put(user, groups);\n    if(LOG.isDebugEnabled()) {\n      LOG.debug(\"Returning fetched groups for \u0027\" + user + \"\u0027\");\n    }\n    return groups.getGroups();\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/security/Groups.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/security/Groups.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/security/Groups.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public List\u003cString\u003e getGroups(String user) throws IOException {\n    // Return cached value if available\n    CachedGroups groups \u003d userToGroupsMap.get(user);\n    long now \u003d System.currentTimeMillis();\n    // if cache has a value and it hasn\u0027t expired\n    if (groups !\u003d null \u0026\u0026 (groups.getTimestamp() + cacheTimeout \u003e now)) {\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"Returning cached groups for \u0027\" + user + \"\u0027\");\n      }\n      return groups.getGroups();\n    }\n    \n    // Create and cache user\u0027s groups\n    groups \u003d new CachedGroups(impl.getGroups(user));\n    userToGroupsMap.put(user, groups);\n    if(LOG.isDebugEnabled()) {\n      LOG.debug(\"Returning fetched groups for \u0027\" + user + \"\u0027\");\n    }\n    return groups.getGroups();\n  }",
      "path": "common/src/java/org/apache/hadoop/security/Groups.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/security/Groups.java",
        "newPath": "common/src/java/org/apache/hadoop/security/Groups.java"
      }
    },
    "7efb9640be26aabe3878310e82248a1b6b767a9a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6884. Add LOG.isDebugEnabled() guard for each LOG.debug(..).  Contributed by Erik Steffl\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@990460 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/08/10 3:44 PM",
      "commitName": "7efb9640be26aabe3878310e82248a1b6b767a9a",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "18/08/10 2:50 PM",
      "commitNameOld": "76e22cc8bfca9a91145869b204158113db329ab9",
      "commitAuthorOld": "Jakob Homan",
      "daysBetweenCommits": 10.04,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,20 @@\n   public List\u003cString\u003e getGroups(String user) throws IOException {\n     // Return cached value if available\n     CachedGroups groups \u003d userToGroupsMap.get(user);\n     long now \u003d System.currentTimeMillis();\n     // if cache has a value and it hasn\u0027t expired\n     if (groups !\u003d null \u0026\u0026 (groups.getTimestamp() + cacheTimeout \u003e now)) {\n-      LOG.debug(\"Returning cached groups for \u0027\" + user + \"\u0027\");\n+      if(LOG.isDebugEnabled()) {\n+        LOG.debug(\"Returning cached groups for \u0027\" + user + \"\u0027\");\n+      }\n       return groups.getGroups();\n     }\n     \n     // Create and cache user\u0027s groups\n     groups \u003d new CachedGroups(impl.getGroups(user));\n     userToGroupsMap.put(user, groups);\n-    LOG.debug(\"Returning fetched groups for \u0027\" + user + \"\u0027\");\n+    if(LOG.isDebugEnabled()) {\n+      LOG.debug(\"Returning fetched groups for \u0027\" + user + \"\u0027\");\n+    }\n     return groups.getGroups();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cString\u003e getGroups(String user) throws IOException {\n    // Return cached value if available\n    CachedGroups groups \u003d userToGroupsMap.get(user);\n    long now \u003d System.currentTimeMillis();\n    // if cache has a value and it hasn\u0027t expired\n    if (groups !\u003d null \u0026\u0026 (groups.getTimestamp() + cacheTimeout \u003e now)) {\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"Returning cached groups for \u0027\" + user + \"\u0027\");\n      }\n      return groups.getGroups();\n    }\n    \n    // Create and cache user\u0027s groups\n    groups \u003d new CachedGroups(impl.getGroups(user));\n    userToGroupsMap.put(user, groups);\n    if(LOG.isDebugEnabled()) {\n      LOG.debug(\"Returning fetched groups for \u0027\" + user + \"\u0027\");\n    }\n    return groups.getGroups();\n  }",
      "path": "src/java/org/apache/hadoop/security/Groups.java",
      "extendedDetails": {}
    },
    "5075d7dbde8be998e22cae1e895e61c52318658b": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6717. Log levels in o.a.h.security.Groups too high. Todd Lipcon via jghoman.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@937881 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/04/10 2:23 PM",
      "commitName": "5075d7dbde8be998e22cae1e895e61c52318658b",
      "commitAuthor": "Jakob Homan",
      "commitDateOld": "27/01/10 12:08 AM",
      "commitNameOld": "0c5734e4aca873f405fbf994e5fe7061e31731c8",
      "commitAuthorOld": "Owen O\u0027Malley",
      "daysBetweenCommits": 88.55,
      "commitsBetweenForRepo": 78,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,16 @@\n   public List\u003cString\u003e getGroups(String user) throws IOException {\n     // Return cached value if available\n     CachedGroups groups \u003d userToGroupsMap.get(user);\n     long now \u003d System.currentTimeMillis();\n     // if cache has a value and it hasn\u0027t expired\n     if (groups !\u003d null \u0026\u0026 (groups.getTimestamp() + cacheTimeout \u003e now)) {\n-      LOG.info(\"Returning cached groups for \u0027\" + user + \"\u0027\");\n+      LOG.debug(\"Returning cached groups for \u0027\" + user + \"\u0027\");\n       return groups.getGroups();\n     }\n     \n     // Create and cache user\u0027s groups\n     groups \u003d new CachedGroups(impl.getGroups(user));\n     userToGroupsMap.put(user, groups);\n-    LOG.info(\"Returning fetched groups for \u0027\" + user + \"\u0027\");\n+    LOG.debug(\"Returning fetched groups for \u0027\" + user + \"\u0027\");\n     return groups.getGroups();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cString\u003e getGroups(String user) throws IOException {\n    // Return cached value if available\n    CachedGroups groups \u003d userToGroupsMap.get(user);\n    long now \u003d System.currentTimeMillis();\n    // if cache has a value and it hasn\u0027t expired\n    if (groups !\u003d null \u0026\u0026 (groups.getTimestamp() + cacheTimeout \u003e now)) {\n      LOG.debug(\"Returning cached groups for \u0027\" + user + \"\u0027\");\n      return groups.getGroups();\n    }\n    \n    // Create and cache user\u0027s groups\n    groups \u003d new CachedGroups(impl.getGroups(user));\n    userToGroupsMap.put(user, groups);\n    LOG.debug(\"Returning fetched groups for \u0027\" + user + \"\u0027\");\n    return groups.getGroups();\n  }",
      "path": "src/java/org/apache/hadoop/security/Groups.java",
      "extendedDetails": {}
    },
    "ae93ba7501d95e9d26a29de25f4cc39e5225ca20": {
      "type": "Yintroduced",
      "commitMessage": "   HADOOP-4656. Add a user to groups mapping service (boryas and acmurthy_)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@892066 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/12/09 5:29 PM",
      "commitName": "ae93ba7501d95e9d26a29de25f4cc39e5225ca20",
      "commitAuthor": "Boris Shkolnik",
      "diff": "@@ -0,0 +1,16 @@\n+  public List\u003cString\u003e getGroups(String user) throws IOException {\n+    // Return cached value if available\n+    CachedGroups groups \u003d userToGroupsMap.get(user);\n+    long now \u003d System.currentTimeMillis();\n+    // if cache has a value and it hasn\u0027t expired\n+    if (groups !\u003d null \u0026\u0026 (groups.getTimestamp() + cacheTimeout \u003e now)) {\n+      LOG.info(\"Returning cached groups for \u0027\" + user + \"\u0027\");\n+      return groups.getGroups();\n+    }\n+    \n+    // Create and cache user\u0027s groups\n+    groups \u003d new CachedGroups(impl.getGroups(user));\n+    userToGroupsMap.put(user, groups);\n+    LOG.info(\"Returning fetched groups for \u0027\" + user + \"\u0027\");\n+    return groups.getGroups();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cString\u003e getGroups(String user) throws IOException {\n    // Return cached value if available\n    CachedGroups groups \u003d userToGroupsMap.get(user);\n    long now \u003d System.currentTimeMillis();\n    // if cache has a value and it hasn\u0027t expired\n    if (groups !\u003d null \u0026\u0026 (groups.getTimestamp() + cacheTimeout \u003e now)) {\n      LOG.info(\"Returning cached groups for \u0027\" + user + \"\u0027\");\n      return groups.getGroups();\n    }\n    \n    // Create and cache user\u0027s groups\n    groups \u003d new CachedGroups(impl.getGroups(user));\n    userToGroupsMap.put(user, groups);\n    LOG.info(\"Returning fetched groups for \u0027\" + user + \"\u0027\");\n    return groups.getGroups();\n  }",
      "path": "src/java/org/apache/hadoop/security/Groups.java"
    }
  }
}