{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JspHelper.java",
  "functionName": "getTokenUGI",
  "functionId": "getTokenUGI___context-ServletContext__request-HttpServletRequest__tokenString-String__conf-Configuration",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/JspHelper.java",
  "functionStartLine": 154,
  "functionEndLine": 184,
  "numCommitsSeen": 54,
  "timeTaken": 1666,
  "changeHistory": [
    "00d5e631b596f8712600879366e5283829e7ee5d",
    "cbd59c1c50242a9ee799cfe9a33f3bdc4561c4ea"
  ],
  "changeHistoryShort": {
    "00d5e631b596f8712600879366e5283829e7ee5d": "Ybodychange",
    "cbd59c1c50242a9ee799cfe9a33f3bdc4561c4ea": "Yintroduced"
  },
  "changeHistoryDetails": {
    "00d5e631b596f8712600879366e5283829e7ee5d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14006. Refactor name node to allow different token verification implementations. Contributed by CR Hota.\n",
      "commitDate": "14/12/18 11:10 AM",
      "commitName": "00d5e631b596f8712600879366e5283829e7ee5d",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "06/09/18 2:48 PM",
      "commitNameOld": "eca1a4bfe952fc184fe90dde50bac9b0e5293568",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 98.89,
      "commitsBetweenForRepo": 867,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,31 @@\n   private static UserGroupInformation getTokenUGI(ServletContext context,\n                                                   HttpServletRequest request,\n                                                   String tokenString,\n                                                   Configuration conf)\n                                                       throws IOException {\n     final Token\u003cDelegationTokenIdentifier\u003e token \u003d\n         new Token\u003cDelegationTokenIdentifier\u003e();\n     token.decodeFromUrlString(tokenString);\n     InetSocketAddress serviceAddress \u003d getNNServiceAddress(context, request);\n     if (serviceAddress !\u003d null) {\n       SecurityUtil.setTokenService(token, serviceAddress);\n       token.setKind(DelegationTokenIdentifier.HDFS_DELEGATION_KIND);\n     }\n \n     ByteArrayInputStream buf \u003d\n         new ByteArrayInputStream(token.getIdentifier());\n     DataInputStream in \u003d new DataInputStream(buf);\n     DelegationTokenIdentifier id \u003d new DelegationTokenIdentifier();\n     id.readFields(in);\n     if (context !\u003d null) {\n-      final NameNode nn \u003d NameNodeHttpServer.getNameNodeFromContext(context);\n-      if (nn !\u003d null) {\n+      final TokenVerifier\u003cDelegationTokenIdentifier\u003e tokenVerifier \u003d\n+          NameNodeHttpServer.getTokenVerifierFromContext(context);\n+      if (tokenVerifier !\u003d null) {\n         // Verify the token.\n-        nn.getNamesystem().verifyToken(id, token.getPassword());\n+        tokenVerifier.verifyToken(id, token.getPassword());\n       }\n     }\n     UserGroupInformation ugi \u003d id.getUser();\n     ugi.addToken(token);\n     return ugi;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static UserGroupInformation getTokenUGI(ServletContext context,\n                                                  HttpServletRequest request,\n                                                  String tokenString,\n                                                  Configuration conf)\n                                                      throws IOException {\n    final Token\u003cDelegationTokenIdentifier\u003e token \u003d\n        new Token\u003cDelegationTokenIdentifier\u003e();\n    token.decodeFromUrlString(tokenString);\n    InetSocketAddress serviceAddress \u003d getNNServiceAddress(context, request);\n    if (serviceAddress !\u003d null) {\n      SecurityUtil.setTokenService(token, serviceAddress);\n      token.setKind(DelegationTokenIdentifier.HDFS_DELEGATION_KIND);\n    }\n\n    ByteArrayInputStream buf \u003d\n        new ByteArrayInputStream(token.getIdentifier());\n    DataInputStream in \u003d new DataInputStream(buf);\n    DelegationTokenIdentifier id \u003d new DelegationTokenIdentifier();\n    id.readFields(in);\n    if (context !\u003d null) {\n      final TokenVerifier\u003cDelegationTokenIdentifier\u003e tokenVerifier \u003d\n          NameNodeHttpServer.getTokenVerifierFromContext(context);\n      if (tokenVerifier !\u003d null) {\n        // Verify the token.\n        tokenVerifier.verifyToken(id, token.getPassword());\n      }\n    }\n    UserGroupInformation ugi \u003d id.getUser();\n    ugi.addToken(token);\n    return ugi;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/JspHelper.java",
      "extendedDetails": {}
    },
    "cbd59c1c50242a9ee799cfe9a33f3bdc4561c4ea": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-3553. Hftp proxy tokens are broken (daryn)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1366471 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/07/12 11:02 AM",
      "commitName": "cbd59c1c50242a9ee799cfe9a33f3bdc4561c4ea",
      "commitAuthor": "Daryn Sharp",
      "diff": "@@ -0,0 +1,30 @@\n+  private static UserGroupInformation getTokenUGI(ServletContext context,\n+                                                  HttpServletRequest request,\n+                                                  String tokenString,\n+                                                  Configuration conf)\n+                                                      throws IOException {\n+    final Token\u003cDelegationTokenIdentifier\u003e token \u003d\n+        new Token\u003cDelegationTokenIdentifier\u003e();\n+    token.decodeFromUrlString(tokenString);\n+    InetSocketAddress serviceAddress \u003d getNNServiceAddress(context, request);\n+    if (serviceAddress !\u003d null) {\n+      SecurityUtil.setTokenService(token, serviceAddress);\n+      token.setKind(DelegationTokenIdentifier.HDFS_DELEGATION_KIND);\n+    }\n+\n+    ByteArrayInputStream buf \u003d\n+        new ByteArrayInputStream(token.getIdentifier());\n+    DataInputStream in \u003d new DataInputStream(buf);\n+    DelegationTokenIdentifier id \u003d new DelegationTokenIdentifier();\n+    id.readFields(in);\n+    if (context !\u003d null) {\n+      final NameNode nn \u003d NameNodeHttpServer.getNameNodeFromContext(context);\n+      if (nn !\u003d null) {\n+        // Verify the token.\n+        nn.getNamesystem().verifyToken(id, token.getPassword());\n+      }\n+    }\n+    UserGroupInformation ugi \u003d id.getUser();\n+    ugi.addToken(token);\n+    return ugi;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static UserGroupInformation getTokenUGI(ServletContext context,\n                                                  HttpServletRequest request,\n                                                  String tokenString,\n                                                  Configuration conf)\n                                                      throws IOException {\n    final Token\u003cDelegationTokenIdentifier\u003e token \u003d\n        new Token\u003cDelegationTokenIdentifier\u003e();\n    token.decodeFromUrlString(tokenString);\n    InetSocketAddress serviceAddress \u003d getNNServiceAddress(context, request);\n    if (serviceAddress !\u003d null) {\n      SecurityUtil.setTokenService(token, serviceAddress);\n      token.setKind(DelegationTokenIdentifier.HDFS_DELEGATION_KIND);\n    }\n\n    ByteArrayInputStream buf \u003d\n        new ByteArrayInputStream(token.getIdentifier());\n    DataInputStream in \u003d new DataInputStream(buf);\n    DelegationTokenIdentifier id \u003d new DelegationTokenIdentifier();\n    id.readFields(in);\n    if (context !\u003d null) {\n      final NameNode nn \u003d NameNodeHttpServer.getNameNodeFromContext(context);\n      if (nn !\u003d null) {\n        // Verify the token.\n        nn.getNamesystem().verifyToken(id, token.getPassword());\n      }\n    }\n    UserGroupInformation ugi \u003d id.getUser();\n    ugi.addToken(token);\n    return ugi;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/JspHelper.java"
    }
  }
}