{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SwiftNativeFileSystemStore.java",
  "functionName": "delete",
  "functionId": "delete___absolutePath-Path__recursive-boolean",
  "sourceFilePath": "hadoop-tools/hadoop-openstack/src/main/java/org/apache/hadoop/fs/swift/snative/SwiftNativeFileSystemStore.java",
  "functionStartLine": 906,
  "functionEndLine": 985,
  "numCommitsSeen": 11,
  "timeTaken": 1348,
  "changeHistory": [
    "645a8f2a4d09acb5a21820f52ee78784d9e4cc8a",
    "ed0f4db0dd8769d188e28750e5b78aa0d6f50677",
    "3d077726d090cc811e21bb7f629fc2d8340d7b1d",
    "3caca924bc72fe4a0e5b1ea89adb098cc1eb7874"
  ],
  "changeHistoryShort": {
    "645a8f2a4d09acb5a21820f52ee78784d9e4cc8a": "Ybodychange",
    "ed0f4db0dd8769d188e28750e5b78aa0d6f50677": "Ybodychange",
    "3d077726d090cc811e21bb7f629fc2d8340d7b1d": "Ybodychange",
    "3caca924bc72fe4a0e5b1ea89adb098cc1eb7874": "Yintroduced"
  },
  "changeHistoryDetails": {
    "645a8f2a4d09acb5a21820f52ee78784d9e4cc8a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14726. Mark FileStatus::isDir as final\n",
      "commitDate": "14/08/17 9:57 PM",
      "commitName": "645a8f2a4d09acb5a21820f52ee78784d9e4cc8a",
      "commitAuthor": "Chris Douglas",
      "commitDateOld": "27/04/17 12:57 AM",
      "commitNameOld": "62579b69a0a294ba1ea14cf76c650b640f89f331",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 109.88,
      "commitsBetweenForRepo": 634,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,80 +1,80 @@\n   public boolean delete(Path absolutePath, boolean recursive) throws IOException {\n     Path swiftPath \u003d getCorrectSwiftPath(absolutePath);\n     SwiftUtils.debug(LOG, \"Deleting path \u0027%s\u0027 recursive\u003d%b\",\n                      absolutePath,\n                      recursive);\n     boolean askForNewest \u003d true;\n     SwiftFileStatus fileStatus \u003d getObjectMetadata(swiftPath, askForNewest);\n \n     //ask for the file/dir status, but don\u0027t demand the newest, as we\n     //don\u0027t mind if the directory has changed\n     //list all entries under this directory.\n     //this will throw FileNotFoundException if the file isn\u0027t there\n     FileStatus[] statuses \u003d listSubPaths(absolutePath, true, askForNewest);\n     if (statuses \u003d\u003d null) {\n       //the directory went away during the non-atomic stages of the operation.\n       // Return false as it was not this thread doing the deletion.\n       SwiftUtils.debug(LOG, \"Path \u0027%s\u0027 has no status -it has \u0027gone away\u0027\",\n                        absolutePath,\n                        recursive);\n       return false;\n     }\n     int filecount \u003d statuses.length;\n     SwiftUtils.debug(LOG, \"Path \u0027%s\u0027 %d status entries\u0027\",\n                      absolutePath,\n                      filecount);\n \n     if (filecount \u003d\u003d 0) {\n       //it\u0027s an empty directory or a path\n       rmdir(absolutePath);\n       return true;\n     }\n \n     if (LOG.isDebugEnabled()) {\n       SwiftUtils.debug(LOG, \"%s\", SwiftUtils.fileStatsToString(statuses, \"\\n\"));\n     }\n \n     if (filecount \u003d\u003d 1 \u0026\u0026 swiftPath.equals(statuses[0].getPath())) {\n       // 1 entry \u003d\u003e simple file and it is the target\n       //simple file: delete it\n       SwiftUtils.debug(LOG, \"Deleting simple file %s\", absolutePath);\n       deleteObject(absolutePath);\n       return true;\n     }\n \n     //\u003e1 entry implies directory with children. Run through them,\n     // but first check for the recursive flag and reject it *unless it looks\n     // like a partitioned file (len \u003e 0 \u0026\u0026 has children)\n-    if (!fileStatus.isDir()) {\n+    if (!fileStatus.isDirectory()) {\n       LOG.debug(\"Multiple child entries but entry has data: assume partitioned\");\n     } else if (!recursive) {\n       //if there are children, unless this is a recursive operation, fail immediately\n       throw new SwiftOperationFailedException(\"Directory \" + fileStatus\n                                               + \" is not empty: \"\n                                               + SwiftUtils.fileStatsToString(\n                                                         statuses, \"; \"));\n     }\n \n     //delete the entries. including ourselves.\n     for (FileStatus entryStatus : statuses) {\n       Path entryPath \u003d entryStatus.getPath();\n       try {\n         boolean deleted \u003d deleteObject(entryPath);\n         if (!deleted) {\n           SwiftUtils.debug(LOG, \"Failed to delete entry \u0027%s\u0027; continuing\",\n                            entryPath);\n         }\n       } catch (FileNotFoundException e) {\n         //the path went away -race conditions.\n         //do not fail, as the outcome is still OK.\n         SwiftUtils.debug(LOG, \"Path \u0027%s\u0027 is no longer present; continuing\",\n                          entryPath);\n       }\n       throttle();\n     }\n     //now delete self\n     SwiftUtils.debug(LOG, \"Deleting base entry %s\", absolutePath);\n     deleteObject(absolutePath);\n \n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean delete(Path absolutePath, boolean recursive) throws IOException {\n    Path swiftPath \u003d getCorrectSwiftPath(absolutePath);\n    SwiftUtils.debug(LOG, \"Deleting path \u0027%s\u0027 recursive\u003d%b\",\n                     absolutePath,\n                     recursive);\n    boolean askForNewest \u003d true;\n    SwiftFileStatus fileStatus \u003d getObjectMetadata(swiftPath, askForNewest);\n\n    //ask for the file/dir status, but don\u0027t demand the newest, as we\n    //don\u0027t mind if the directory has changed\n    //list all entries under this directory.\n    //this will throw FileNotFoundException if the file isn\u0027t there\n    FileStatus[] statuses \u003d listSubPaths(absolutePath, true, askForNewest);\n    if (statuses \u003d\u003d null) {\n      //the directory went away during the non-atomic stages of the operation.\n      // Return false as it was not this thread doing the deletion.\n      SwiftUtils.debug(LOG, \"Path \u0027%s\u0027 has no status -it has \u0027gone away\u0027\",\n                       absolutePath,\n                       recursive);\n      return false;\n    }\n    int filecount \u003d statuses.length;\n    SwiftUtils.debug(LOG, \"Path \u0027%s\u0027 %d status entries\u0027\",\n                     absolutePath,\n                     filecount);\n\n    if (filecount \u003d\u003d 0) {\n      //it\u0027s an empty directory or a path\n      rmdir(absolutePath);\n      return true;\n    }\n\n    if (LOG.isDebugEnabled()) {\n      SwiftUtils.debug(LOG, \"%s\", SwiftUtils.fileStatsToString(statuses, \"\\n\"));\n    }\n\n    if (filecount \u003d\u003d 1 \u0026\u0026 swiftPath.equals(statuses[0].getPath())) {\n      // 1 entry \u003d\u003e simple file and it is the target\n      //simple file: delete it\n      SwiftUtils.debug(LOG, \"Deleting simple file %s\", absolutePath);\n      deleteObject(absolutePath);\n      return true;\n    }\n\n    //\u003e1 entry implies directory with children. Run through them,\n    // but first check for the recursive flag and reject it *unless it looks\n    // like a partitioned file (len \u003e 0 \u0026\u0026 has children)\n    if (!fileStatus.isDirectory()) {\n      LOG.debug(\"Multiple child entries but entry has data: assume partitioned\");\n    } else if (!recursive) {\n      //if there are children, unless this is a recursive operation, fail immediately\n      throw new SwiftOperationFailedException(\"Directory \" + fileStatus\n                                              + \" is not empty: \"\n                                              + SwiftUtils.fileStatsToString(\n                                                        statuses, \"; \"));\n    }\n\n    //delete the entries. including ourselves.\n    for (FileStatus entryStatus : statuses) {\n      Path entryPath \u003d entryStatus.getPath();\n      try {\n        boolean deleted \u003d deleteObject(entryPath);\n        if (!deleted) {\n          SwiftUtils.debug(LOG, \"Failed to delete entry \u0027%s\u0027; continuing\",\n                           entryPath);\n        }\n      } catch (FileNotFoundException e) {\n        //the path went away -race conditions.\n        //do not fail, as the outcome is still OK.\n        SwiftUtils.debug(LOG, \"Path \u0027%s\u0027 is no longer present; continuing\",\n                         entryPath);\n      }\n      throttle();\n    }\n    //now delete self\n    SwiftUtils.debug(LOG, \"Deleting base entry %s\", absolutePath);\n    deleteObject(absolutePath);\n\n    return true;\n  }",
      "path": "hadoop-tools/hadoop-openstack/src/main/java/org/apache/hadoop/fs/swift/snative/SwiftNativeFileSystemStore.java",
      "extendedDetails": {}
    },
    "ed0f4db0dd8769d188e28750e5b78aa0d6f50677": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11775. Fix Javadoc typos in hadoop-openstack module (Yanjun Wang via aw)\n",
      "commitDate": "08/05/15 5:01 PM",
      "commitName": "ed0f4db0dd8769d188e28750e5b78aa0d6f50677",
      "commitAuthor": "Allen Wittenauer",
      "commitDateOld": "03/03/15 1:06 AM",
      "commitNameOld": "9ae7f9eb7baeb244e1b95aabc93ad8124870b9a9",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 66.62,
      "commitsBetweenForRepo": 656,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,80 +1,80 @@\n   public boolean delete(Path absolutePath, boolean recursive) throws IOException {\n     Path swiftPath \u003d getCorrectSwiftPath(absolutePath);\n     SwiftUtils.debug(LOG, \"Deleting path \u0027%s\u0027 recursive\u003d%b\",\n                      absolutePath,\n                      recursive);\n     boolean askForNewest \u003d true;\n     SwiftFileStatus fileStatus \u003d getObjectMetadata(swiftPath, askForNewest);\n \n     //ask for the file/dir status, but don\u0027t demand the newest, as we\n     //don\u0027t mind if the directory has changed\n     //list all entries under this directory.\n     //this will throw FileNotFoundException if the file isn\u0027t there\n     FileStatus[] statuses \u003d listSubPaths(absolutePath, true, askForNewest);\n     if (statuses \u003d\u003d null) {\n       //the directory went away during the non-atomic stages of the operation.\n       // Return false as it was not this thread doing the deletion.\n       SwiftUtils.debug(LOG, \"Path \u0027%s\u0027 has no status -it has \u0027gone away\u0027\",\n                        absolutePath,\n                        recursive);\n       return false;\n     }\n     int filecount \u003d statuses.length;\n     SwiftUtils.debug(LOG, \"Path \u0027%s\u0027 %d status entries\u0027\",\n                      absolutePath,\n                      filecount);\n \n     if (filecount \u003d\u003d 0) {\n       //it\u0027s an empty directory or a path\n       rmdir(absolutePath);\n       return true;\n     }\n \n     if (LOG.isDebugEnabled()) {\n       SwiftUtils.debug(LOG, \"%s\", SwiftUtils.fileStatsToString(statuses, \"\\n\"));\n     }\n \n     if (filecount \u003d\u003d 1 \u0026\u0026 swiftPath.equals(statuses[0].getPath())) {\n       // 1 entry \u003d\u003e simple file and it is the target\n       //simple file: delete it\n       SwiftUtils.debug(LOG, \"Deleting simple file %s\", absolutePath);\n       deleteObject(absolutePath);\n       return true;\n     }\n \n     //\u003e1 entry implies directory with children. Run through them,\n     // but first check for the recursive flag and reject it *unless it looks\n     // like a partitioned file (len \u003e 0 \u0026\u0026 has children)\n     if (!fileStatus.isDir()) {\n       LOG.debug(\"Multiple child entries but entry has data: assume partitioned\");\n     } else if (!recursive) {\n       //if there are children, unless this is a recursive operation, fail immediately\n       throw new SwiftOperationFailedException(\"Directory \" + fileStatus\n                                               + \" is not empty: \"\n                                               + SwiftUtils.fileStatsToString(\n                                                         statuses, \"; \"));\n     }\n \n-    //delete the entries. including ourself.\n+    //delete the entries. including ourselves.\n     for (FileStatus entryStatus : statuses) {\n       Path entryPath \u003d entryStatus.getPath();\n       try {\n         boolean deleted \u003d deleteObject(entryPath);\n         if (!deleted) {\n           SwiftUtils.debug(LOG, \"Failed to delete entry \u0027%s\u0027; continuing\",\n                            entryPath);\n         }\n       } catch (FileNotFoundException e) {\n         //the path went away -race conditions.\n         //do not fail, as the outcome is still OK.\n         SwiftUtils.debug(LOG, \"Path \u0027%s\u0027 is no longer present; continuing\",\n                          entryPath);\n       }\n       throttle();\n     }\n     //now delete self\n     SwiftUtils.debug(LOG, \"Deleting base entry %s\", absolutePath);\n     deleteObject(absolutePath);\n \n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean delete(Path absolutePath, boolean recursive) throws IOException {\n    Path swiftPath \u003d getCorrectSwiftPath(absolutePath);\n    SwiftUtils.debug(LOG, \"Deleting path \u0027%s\u0027 recursive\u003d%b\",\n                     absolutePath,\n                     recursive);\n    boolean askForNewest \u003d true;\n    SwiftFileStatus fileStatus \u003d getObjectMetadata(swiftPath, askForNewest);\n\n    //ask for the file/dir status, but don\u0027t demand the newest, as we\n    //don\u0027t mind if the directory has changed\n    //list all entries under this directory.\n    //this will throw FileNotFoundException if the file isn\u0027t there\n    FileStatus[] statuses \u003d listSubPaths(absolutePath, true, askForNewest);\n    if (statuses \u003d\u003d null) {\n      //the directory went away during the non-atomic stages of the operation.\n      // Return false as it was not this thread doing the deletion.\n      SwiftUtils.debug(LOG, \"Path \u0027%s\u0027 has no status -it has \u0027gone away\u0027\",\n                       absolutePath,\n                       recursive);\n      return false;\n    }\n    int filecount \u003d statuses.length;\n    SwiftUtils.debug(LOG, \"Path \u0027%s\u0027 %d status entries\u0027\",\n                     absolutePath,\n                     filecount);\n\n    if (filecount \u003d\u003d 0) {\n      //it\u0027s an empty directory or a path\n      rmdir(absolutePath);\n      return true;\n    }\n\n    if (LOG.isDebugEnabled()) {\n      SwiftUtils.debug(LOG, \"%s\", SwiftUtils.fileStatsToString(statuses, \"\\n\"));\n    }\n\n    if (filecount \u003d\u003d 1 \u0026\u0026 swiftPath.equals(statuses[0].getPath())) {\n      // 1 entry \u003d\u003e simple file and it is the target\n      //simple file: delete it\n      SwiftUtils.debug(LOG, \"Deleting simple file %s\", absolutePath);\n      deleteObject(absolutePath);\n      return true;\n    }\n\n    //\u003e1 entry implies directory with children. Run through them,\n    // but first check for the recursive flag and reject it *unless it looks\n    // like a partitioned file (len \u003e 0 \u0026\u0026 has children)\n    if (!fileStatus.isDir()) {\n      LOG.debug(\"Multiple child entries but entry has data: assume partitioned\");\n    } else if (!recursive) {\n      //if there are children, unless this is a recursive operation, fail immediately\n      throw new SwiftOperationFailedException(\"Directory \" + fileStatus\n                                              + \" is not empty: \"\n                                              + SwiftUtils.fileStatsToString(\n                                                        statuses, \"; \"));\n    }\n\n    //delete the entries. including ourselves.\n    for (FileStatus entryStatus : statuses) {\n      Path entryPath \u003d entryStatus.getPath();\n      try {\n        boolean deleted \u003d deleteObject(entryPath);\n        if (!deleted) {\n          SwiftUtils.debug(LOG, \"Failed to delete entry \u0027%s\u0027; continuing\",\n                           entryPath);\n        }\n      } catch (FileNotFoundException e) {\n        //the path went away -race conditions.\n        //do not fail, as the outcome is still OK.\n        SwiftUtils.debug(LOG, \"Path \u0027%s\u0027 is no longer present; continuing\",\n                         entryPath);\n      }\n      throttle();\n    }\n    //now delete self\n    SwiftUtils.debug(LOG, \"Deleting base entry %s\", absolutePath);\n    deleteObject(absolutePath);\n\n    return true;\n  }",
      "path": "hadoop-tools/hadoop-openstack/src/main/java/org/apache/hadoop/fs/swift/snative/SwiftNativeFileSystemStore.java",
      "extendedDetails": {}
    },
    "3d077726d090cc811e21bb7f629fc2d8340d7b1d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10647. String Format Exception in SwiftNativeFileSystemStore.java.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1600971 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/06/14 11:00 AM",
      "commitName": "3d077726d090cc811e21bb7f629fc2d8340d7b1d",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "27/09/13 4:32 AM",
      "commitNameOld": "3caca924bc72fe4a0e5b1ea89adb098cc1eb7874",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 252.27,
      "commitsBetweenForRepo": 1696,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,80 +1,80 @@\n   public boolean delete(Path absolutePath, boolean recursive) throws IOException {\n     Path swiftPath \u003d getCorrectSwiftPath(absolutePath);\n     SwiftUtils.debug(LOG, \"Deleting path \u0027%s\u0027 recursive\u003d%b\",\n                      absolutePath,\n                      recursive);\n     boolean askForNewest \u003d true;\n     SwiftFileStatus fileStatus \u003d getObjectMetadata(swiftPath, askForNewest);\n \n     //ask for the file/dir status, but don\u0027t demand the newest, as we\n     //don\u0027t mind if the directory has changed\n     //list all entries under this directory.\n     //this will throw FileNotFoundException if the file isn\u0027t there\n     FileStatus[] statuses \u003d listSubPaths(absolutePath, true, askForNewest);\n     if (statuses \u003d\u003d null) {\n       //the directory went away during the non-atomic stages of the operation.\n       // Return false as it was not this thread doing the deletion.\n       SwiftUtils.debug(LOG, \"Path \u0027%s\u0027 has no status -it has \u0027gone away\u0027\",\n                        absolutePath,\n                        recursive);\n       return false;\n     }\n     int filecount \u003d statuses.length;\n     SwiftUtils.debug(LOG, \"Path \u0027%s\u0027 %d status entries\u0027\",\n                      absolutePath,\n                      filecount);\n \n     if (filecount \u003d\u003d 0) {\n       //it\u0027s an empty directory or a path\n       rmdir(absolutePath);\n       return true;\n     }\n \n     if (LOG.isDebugEnabled()) {\n-      SwiftUtils.debug(LOG, SwiftUtils.fileStatsToString(statuses, \"\\n\"));\n+      SwiftUtils.debug(LOG, \"%s\", SwiftUtils.fileStatsToString(statuses, \"\\n\"));\n     }\n \n     if (filecount \u003d\u003d 1 \u0026\u0026 swiftPath.equals(statuses[0].getPath())) {\n       // 1 entry \u003d\u003e simple file and it is the target\n       //simple file: delete it\n       SwiftUtils.debug(LOG, \"Deleting simple file %s\", absolutePath);\n       deleteObject(absolutePath);\n       return true;\n     }\n \n     //\u003e1 entry implies directory with children. Run through them,\n     // but first check for the recursive flag and reject it *unless it looks\n     // like a partitioned file (len \u003e 0 \u0026\u0026 has children)\n     if (!fileStatus.isDir()) {\n       LOG.debug(\"Multiple child entries but entry has data: assume partitioned\");\n     } else if (!recursive) {\n       //if there are children, unless this is a recursive operation, fail immediately\n       throw new SwiftOperationFailedException(\"Directory \" + fileStatus\n                                               + \" is not empty: \"\n                                               + SwiftUtils.fileStatsToString(\n                                                         statuses, \"; \"));\n     }\n \n     //delete the entries. including ourself.\n     for (FileStatus entryStatus : statuses) {\n       Path entryPath \u003d entryStatus.getPath();\n       try {\n         boolean deleted \u003d deleteObject(entryPath);\n         if (!deleted) {\n           SwiftUtils.debug(LOG, \"Failed to delete entry \u0027%s\u0027; continuing\",\n                            entryPath);\n         }\n       } catch (FileNotFoundException e) {\n         //the path went away -race conditions.\n         //do not fail, as the outcome is still OK.\n         SwiftUtils.debug(LOG, \"Path \u0027%s\u0027 is no longer present; continuing\",\n                          entryPath);\n       }\n       throttle();\n     }\n     //now delete self\n     SwiftUtils.debug(LOG, \"Deleting base entry %s\", absolutePath);\n     deleteObject(absolutePath);\n \n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean delete(Path absolutePath, boolean recursive) throws IOException {\n    Path swiftPath \u003d getCorrectSwiftPath(absolutePath);\n    SwiftUtils.debug(LOG, \"Deleting path \u0027%s\u0027 recursive\u003d%b\",\n                     absolutePath,\n                     recursive);\n    boolean askForNewest \u003d true;\n    SwiftFileStatus fileStatus \u003d getObjectMetadata(swiftPath, askForNewest);\n\n    //ask for the file/dir status, but don\u0027t demand the newest, as we\n    //don\u0027t mind if the directory has changed\n    //list all entries under this directory.\n    //this will throw FileNotFoundException if the file isn\u0027t there\n    FileStatus[] statuses \u003d listSubPaths(absolutePath, true, askForNewest);\n    if (statuses \u003d\u003d null) {\n      //the directory went away during the non-atomic stages of the operation.\n      // Return false as it was not this thread doing the deletion.\n      SwiftUtils.debug(LOG, \"Path \u0027%s\u0027 has no status -it has \u0027gone away\u0027\",\n                       absolutePath,\n                       recursive);\n      return false;\n    }\n    int filecount \u003d statuses.length;\n    SwiftUtils.debug(LOG, \"Path \u0027%s\u0027 %d status entries\u0027\",\n                     absolutePath,\n                     filecount);\n\n    if (filecount \u003d\u003d 0) {\n      //it\u0027s an empty directory or a path\n      rmdir(absolutePath);\n      return true;\n    }\n\n    if (LOG.isDebugEnabled()) {\n      SwiftUtils.debug(LOG, \"%s\", SwiftUtils.fileStatsToString(statuses, \"\\n\"));\n    }\n\n    if (filecount \u003d\u003d 1 \u0026\u0026 swiftPath.equals(statuses[0].getPath())) {\n      // 1 entry \u003d\u003e simple file and it is the target\n      //simple file: delete it\n      SwiftUtils.debug(LOG, \"Deleting simple file %s\", absolutePath);\n      deleteObject(absolutePath);\n      return true;\n    }\n\n    //\u003e1 entry implies directory with children. Run through them,\n    // but first check for the recursive flag and reject it *unless it looks\n    // like a partitioned file (len \u003e 0 \u0026\u0026 has children)\n    if (!fileStatus.isDir()) {\n      LOG.debug(\"Multiple child entries but entry has data: assume partitioned\");\n    } else if (!recursive) {\n      //if there are children, unless this is a recursive operation, fail immediately\n      throw new SwiftOperationFailedException(\"Directory \" + fileStatus\n                                              + \" is not empty: \"\n                                              + SwiftUtils.fileStatsToString(\n                                                        statuses, \"; \"));\n    }\n\n    //delete the entries. including ourself.\n    for (FileStatus entryStatus : statuses) {\n      Path entryPath \u003d entryStatus.getPath();\n      try {\n        boolean deleted \u003d deleteObject(entryPath);\n        if (!deleted) {\n          SwiftUtils.debug(LOG, \"Failed to delete entry \u0027%s\u0027; continuing\",\n                           entryPath);\n        }\n      } catch (FileNotFoundException e) {\n        //the path went away -race conditions.\n        //do not fail, as the outcome is still OK.\n        SwiftUtils.debug(LOG, \"Path \u0027%s\u0027 is no longer present; continuing\",\n                         entryPath);\n      }\n      throttle();\n    }\n    //now delete self\n    SwiftUtils.debug(LOG, \"Deleting base entry %s\", absolutePath);\n    deleteObject(absolutePath);\n\n    return true;\n  }",
      "path": "hadoop-tools/hadoop-openstack/src/main/java/org/apache/hadoop/fs/swift/snative/SwiftNativeFileSystemStore.java",
      "extendedDetails": {}
    },
    "3caca924bc72fe4a0e5b1ea89adb098cc1eb7874": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-8545. Filesystem Implementation for OpenStack Swift\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1526854 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/09/13 4:32 AM",
      "commitName": "3caca924bc72fe4a0e5b1ea89adb098cc1eb7874",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,80 @@\n+  public boolean delete(Path absolutePath, boolean recursive) throws IOException {\n+    Path swiftPath \u003d getCorrectSwiftPath(absolutePath);\n+    SwiftUtils.debug(LOG, \"Deleting path \u0027%s\u0027 recursive\u003d%b\",\n+                     absolutePath,\n+                     recursive);\n+    boolean askForNewest \u003d true;\n+    SwiftFileStatus fileStatus \u003d getObjectMetadata(swiftPath, askForNewest);\n+\n+    //ask for the file/dir status, but don\u0027t demand the newest, as we\n+    //don\u0027t mind if the directory has changed\n+    //list all entries under this directory.\n+    //this will throw FileNotFoundException if the file isn\u0027t there\n+    FileStatus[] statuses \u003d listSubPaths(absolutePath, true, askForNewest);\n+    if (statuses \u003d\u003d null) {\n+      //the directory went away during the non-atomic stages of the operation.\n+      // Return false as it was not this thread doing the deletion.\n+      SwiftUtils.debug(LOG, \"Path \u0027%s\u0027 has no status -it has \u0027gone away\u0027\",\n+                       absolutePath,\n+                       recursive);\n+      return false;\n+    }\n+    int filecount \u003d statuses.length;\n+    SwiftUtils.debug(LOG, \"Path \u0027%s\u0027 %d status entries\u0027\",\n+                     absolutePath,\n+                     filecount);\n+\n+    if (filecount \u003d\u003d 0) {\n+      //it\u0027s an empty directory or a path\n+      rmdir(absolutePath);\n+      return true;\n+    }\n+\n+    if (LOG.isDebugEnabled()) {\n+      SwiftUtils.debug(LOG, SwiftUtils.fileStatsToString(statuses, \"\\n\"));\n+    }\n+\n+    if (filecount \u003d\u003d 1 \u0026\u0026 swiftPath.equals(statuses[0].getPath())) {\n+      // 1 entry \u003d\u003e simple file and it is the target\n+      //simple file: delete it\n+      SwiftUtils.debug(LOG, \"Deleting simple file %s\", absolutePath);\n+      deleteObject(absolutePath);\n+      return true;\n+    }\n+\n+    //\u003e1 entry implies directory with children. Run through them,\n+    // but first check for the recursive flag and reject it *unless it looks\n+    // like a partitioned file (len \u003e 0 \u0026\u0026 has children)\n+    if (!fileStatus.isDir()) {\n+      LOG.debug(\"Multiple child entries but entry has data: assume partitioned\");\n+    } else if (!recursive) {\n+      //if there are children, unless this is a recursive operation, fail immediately\n+      throw new SwiftOperationFailedException(\"Directory \" + fileStatus\n+                                              + \" is not empty: \"\n+                                              + SwiftUtils.fileStatsToString(\n+                                                        statuses, \"; \"));\n+    }\n+\n+    //delete the entries. including ourself.\n+    for (FileStatus entryStatus : statuses) {\n+      Path entryPath \u003d entryStatus.getPath();\n+      try {\n+        boolean deleted \u003d deleteObject(entryPath);\n+        if (!deleted) {\n+          SwiftUtils.debug(LOG, \"Failed to delete entry \u0027%s\u0027; continuing\",\n+                           entryPath);\n+        }\n+      } catch (FileNotFoundException e) {\n+        //the path went away -race conditions.\n+        //do not fail, as the outcome is still OK.\n+        SwiftUtils.debug(LOG, \"Path \u0027%s\u0027 is no longer present; continuing\",\n+                         entryPath);\n+      }\n+      throttle();\n+    }\n+    //now delete self\n+    SwiftUtils.debug(LOG, \"Deleting base entry %s\", absolutePath);\n+    deleteObject(absolutePath);\n+\n+    return true;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean delete(Path absolutePath, boolean recursive) throws IOException {\n    Path swiftPath \u003d getCorrectSwiftPath(absolutePath);\n    SwiftUtils.debug(LOG, \"Deleting path \u0027%s\u0027 recursive\u003d%b\",\n                     absolutePath,\n                     recursive);\n    boolean askForNewest \u003d true;\n    SwiftFileStatus fileStatus \u003d getObjectMetadata(swiftPath, askForNewest);\n\n    //ask for the file/dir status, but don\u0027t demand the newest, as we\n    //don\u0027t mind if the directory has changed\n    //list all entries under this directory.\n    //this will throw FileNotFoundException if the file isn\u0027t there\n    FileStatus[] statuses \u003d listSubPaths(absolutePath, true, askForNewest);\n    if (statuses \u003d\u003d null) {\n      //the directory went away during the non-atomic stages of the operation.\n      // Return false as it was not this thread doing the deletion.\n      SwiftUtils.debug(LOG, \"Path \u0027%s\u0027 has no status -it has \u0027gone away\u0027\",\n                       absolutePath,\n                       recursive);\n      return false;\n    }\n    int filecount \u003d statuses.length;\n    SwiftUtils.debug(LOG, \"Path \u0027%s\u0027 %d status entries\u0027\",\n                     absolutePath,\n                     filecount);\n\n    if (filecount \u003d\u003d 0) {\n      //it\u0027s an empty directory or a path\n      rmdir(absolutePath);\n      return true;\n    }\n\n    if (LOG.isDebugEnabled()) {\n      SwiftUtils.debug(LOG, SwiftUtils.fileStatsToString(statuses, \"\\n\"));\n    }\n\n    if (filecount \u003d\u003d 1 \u0026\u0026 swiftPath.equals(statuses[0].getPath())) {\n      // 1 entry \u003d\u003e simple file and it is the target\n      //simple file: delete it\n      SwiftUtils.debug(LOG, \"Deleting simple file %s\", absolutePath);\n      deleteObject(absolutePath);\n      return true;\n    }\n\n    //\u003e1 entry implies directory with children. Run through them,\n    // but first check for the recursive flag and reject it *unless it looks\n    // like a partitioned file (len \u003e 0 \u0026\u0026 has children)\n    if (!fileStatus.isDir()) {\n      LOG.debug(\"Multiple child entries but entry has data: assume partitioned\");\n    } else if (!recursive) {\n      //if there are children, unless this is a recursive operation, fail immediately\n      throw new SwiftOperationFailedException(\"Directory \" + fileStatus\n                                              + \" is not empty: \"\n                                              + SwiftUtils.fileStatsToString(\n                                                        statuses, \"; \"));\n    }\n\n    //delete the entries. including ourself.\n    for (FileStatus entryStatus : statuses) {\n      Path entryPath \u003d entryStatus.getPath();\n      try {\n        boolean deleted \u003d deleteObject(entryPath);\n        if (!deleted) {\n          SwiftUtils.debug(LOG, \"Failed to delete entry \u0027%s\u0027; continuing\",\n                           entryPath);\n        }\n      } catch (FileNotFoundException e) {\n        //the path went away -race conditions.\n        //do not fail, as the outcome is still OK.\n        SwiftUtils.debug(LOG, \"Path \u0027%s\u0027 is no longer present; continuing\",\n                         entryPath);\n      }\n      throttle();\n    }\n    //now delete self\n    SwiftUtils.debug(LOG, \"Deleting base entry %s\", absolutePath);\n    deleteObject(absolutePath);\n\n    return true;\n  }",
      "path": "hadoop-tools/hadoop-openstack/src/main/java/org/apache/hadoop/fs/swift/snative/SwiftNativeFileSystemStore.java"
    }
  }
}