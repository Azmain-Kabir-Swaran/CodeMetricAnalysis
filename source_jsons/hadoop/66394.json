{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SLSCapacityScheduler.java",
  "functionName": "allocate",
  "functionId": "allocate___attemptId-ApplicationAttemptId__resourceRequests-List__ResourceRequest____schedulingRequests-List__SchedulingRequest____containerIds-List__ContainerId____strings-List__String____strings2-List__String____updateRequests-ContainerUpdates",
  "sourceFilePath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/SLSCapacityScheduler.java",
  "functionStartLine": 103,
  "functionEndLine": 132,
  "numCommitsSeen": 61,
  "timeTaken": 4853,
  "changeHistory": [
    "38af23796971193fa529c3d08ffde8fcd6e607b6",
    "6a5516c2381f107d96b8326939514de3c6e53d3d",
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
    "d6d9cff21b7b6141ed88359652cf22e8973c0661",
    "89cab1ba5f0671f8ef30dbe7432079c18362b434",
    "e07f3c87cd3542760efcf713f909375b69eec00f"
  ],
  "changeHistoryShort": {
    "38af23796971193fa529c3d08ffde8fcd6e607b6": "Ymultichange(Yparameterchange,Ybodychange)",
    "6a5516c2381f107d96b8326939514de3c6e53d3d": "Ybodychange",
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4": "Ymultichange(Yparameterchange,Ybodychange)",
    "d6d9cff21b7b6141ed88359652cf22e8973c0661": "Yparameterchange",
    "89cab1ba5f0671f8ef30dbe7432079c18362b434": "Ymultichange(Yparameterchange,Ybodychange)",
    "e07f3c87cd3542760efcf713f909375b69eec00f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "38af23796971193fa529c3d08ffde8fcd6e607b6": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-6599. Support anti-affinity constraint via AppPlacementAllocator. (Wangda Tan via asuresh)\n",
      "commitDate": "31/01/18 1:30 AM",
      "commitName": "38af23796971193fa529c3d08ffde8fcd6e607b6",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6599. Support anti-affinity constraint via AppPlacementAllocator. (Wangda Tan via asuresh)\n",
          "commitDate": "31/01/18 1:30 AM",
          "commitName": "38af23796971193fa529c3d08ffde8fcd6e607b6",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "17/10/17 4:04 PM",
          "commitNameOld": "46eb1033a86ca53e7b94202567aef8af2417bdf8",
          "commitAuthorOld": "Haibo Chen",
          "daysBetweenCommits": 105.43,
          "commitsBetweenForRepo": 702,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,30 @@\n   public Allocation allocate(ApplicationAttemptId attemptId,\n-      List\u003cResourceRequest\u003e resourceRequests, List\u003cContainerId\u003e containerIds,\n-      List\u003cString\u003e strings, List\u003cString\u003e strings2,\n-      ContainerUpdates updateRequests) {\n+      List\u003cResourceRequest\u003e resourceRequests,\n+      List\u003cSchedulingRequest\u003e schedulingRequests, List\u003cContainerId\u003e containerIds,\n+      List\u003cString\u003e strings, List\u003cString\u003e strings2, ContainerUpdates updateRequests) {\n     if (metricsON) {\n       final Timer.Context context \u003d schedulerMetrics.getSchedulerAllocateTimer()\n           .time();\n       Allocation allocation \u003d null;\n       try {\n         allocation \u003d super\n-            .allocate(attemptId, resourceRequests, containerIds, strings,\n+            .allocate(attemptId, resourceRequests, schedulingRequests,\n+                containerIds, strings,\n                 strings2, updateRequests);\n         return allocation;\n       } finally {\n         context.stop();\n         schedulerMetrics.increaseSchedulerAllocationCounter();\n         try {\n           updateQueueWithAllocateRequest(allocation, attemptId,\n                   resourceRequests, containerIds);\n         } catch (IOException e) {\n           e.printStackTrace();\n         }\n       }\n     } else {\n-      return super.allocate(attemptId, resourceRequests, containerIds, strings,\n+      return super.allocate(attemptId, resourceRequests, schedulingRequests,\n+          containerIds, strings,\n           strings2, updateRequests);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Allocation allocate(ApplicationAttemptId attemptId,\n      List\u003cResourceRequest\u003e resourceRequests,\n      List\u003cSchedulingRequest\u003e schedulingRequests, List\u003cContainerId\u003e containerIds,\n      List\u003cString\u003e strings, List\u003cString\u003e strings2, ContainerUpdates updateRequests) {\n    if (metricsON) {\n      final Timer.Context context \u003d schedulerMetrics.getSchedulerAllocateTimer()\n          .time();\n      Allocation allocation \u003d null;\n      try {\n        allocation \u003d super\n            .allocate(attemptId, resourceRequests, schedulingRequests,\n                containerIds, strings,\n                strings2, updateRequests);\n        return allocation;\n      } finally {\n        context.stop();\n        schedulerMetrics.increaseSchedulerAllocationCounter();\n        try {\n          updateQueueWithAllocateRequest(allocation, attemptId,\n                  resourceRequests, containerIds);\n        } catch (IOException e) {\n          e.printStackTrace();\n        }\n      }\n    } else {\n      return super.allocate(attemptId, resourceRequests, schedulingRequests,\n          containerIds, strings,\n          strings2, updateRequests);\n    }\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/SLSCapacityScheduler.java",
          "extendedDetails": {
            "oldValue": "[attemptId-ApplicationAttemptId, resourceRequests-List\u003cResourceRequest\u003e, containerIds-List\u003cContainerId\u003e, strings-List\u003cString\u003e, strings2-List\u003cString\u003e, updateRequests-ContainerUpdates]",
            "newValue": "[attemptId-ApplicationAttemptId, resourceRequests-List\u003cResourceRequest\u003e, schedulingRequests-List\u003cSchedulingRequest\u003e, containerIds-List\u003cContainerId\u003e, strings-List\u003cString\u003e, strings2-List\u003cString\u003e, updateRequests-ContainerUpdates]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6599. Support anti-affinity constraint via AppPlacementAllocator. (Wangda Tan via asuresh)\n",
          "commitDate": "31/01/18 1:30 AM",
          "commitName": "38af23796971193fa529c3d08ffde8fcd6e607b6",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "17/10/17 4:04 PM",
          "commitNameOld": "46eb1033a86ca53e7b94202567aef8af2417bdf8",
          "commitAuthorOld": "Haibo Chen",
          "daysBetweenCommits": 105.43,
          "commitsBetweenForRepo": 702,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,30 @@\n   public Allocation allocate(ApplicationAttemptId attemptId,\n-      List\u003cResourceRequest\u003e resourceRequests, List\u003cContainerId\u003e containerIds,\n-      List\u003cString\u003e strings, List\u003cString\u003e strings2,\n-      ContainerUpdates updateRequests) {\n+      List\u003cResourceRequest\u003e resourceRequests,\n+      List\u003cSchedulingRequest\u003e schedulingRequests, List\u003cContainerId\u003e containerIds,\n+      List\u003cString\u003e strings, List\u003cString\u003e strings2, ContainerUpdates updateRequests) {\n     if (metricsON) {\n       final Timer.Context context \u003d schedulerMetrics.getSchedulerAllocateTimer()\n           .time();\n       Allocation allocation \u003d null;\n       try {\n         allocation \u003d super\n-            .allocate(attemptId, resourceRequests, containerIds, strings,\n+            .allocate(attemptId, resourceRequests, schedulingRequests,\n+                containerIds, strings,\n                 strings2, updateRequests);\n         return allocation;\n       } finally {\n         context.stop();\n         schedulerMetrics.increaseSchedulerAllocationCounter();\n         try {\n           updateQueueWithAllocateRequest(allocation, attemptId,\n                   resourceRequests, containerIds);\n         } catch (IOException e) {\n           e.printStackTrace();\n         }\n       }\n     } else {\n-      return super.allocate(attemptId, resourceRequests, containerIds, strings,\n+      return super.allocate(attemptId, resourceRequests, schedulingRequests,\n+          containerIds, strings,\n           strings2, updateRequests);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Allocation allocate(ApplicationAttemptId attemptId,\n      List\u003cResourceRequest\u003e resourceRequests,\n      List\u003cSchedulingRequest\u003e schedulingRequests, List\u003cContainerId\u003e containerIds,\n      List\u003cString\u003e strings, List\u003cString\u003e strings2, ContainerUpdates updateRequests) {\n    if (metricsON) {\n      final Timer.Context context \u003d schedulerMetrics.getSchedulerAllocateTimer()\n          .time();\n      Allocation allocation \u003d null;\n      try {\n        allocation \u003d super\n            .allocate(attemptId, resourceRequests, schedulingRequests,\n                containerIds, strings,\n                strings2, updateRequests);\n        return allocation;\n      } finally {\n        context.stop();\n        schedulerMetrics.increaseSchedulerAllocationCounter();\n        try {\n          updateQueueWithAllocateRequest(allocation, attemptId,\n                  resourceRequests, containerIds);\n        } catch (IOException e) {\n          e.printStackTrace();\n        }\n      }\n    } else {\n      return super.allocate(attemptId, resourceRequests, schedulingRequests,\n          containerIds, strings,\n          strings2, updateRequests);\n    }\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/SLSCapacityScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "6a5516c2381f107d96b8326939514de3c6e53d3d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5654. Not be able to run SLS with FairScheduler (yufeigu via rkanter)\n",
      "commitDate": "29/03/17 4:18 PM",
      "commitName": "6a5516c2381f107d96b8326939514de3c6e53d3d",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "21/03/17 3:21 PM",
      "commitNameOld": "cc938e99ec0904824c8072184eff75619fcaf040",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 8.04,
      "commitsBetweenForRepo": 51,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,28 @@\n   public Allocation allocate(ApplicationAttemptId attemptId,\n       List\u003cResourceRequest\u003e resourceRequests, List\u003cContainerId\u003e containerIds,\n       List\u003cString\u003e strings, List\u003cString\u003e strings2,\n       ContainerUpdates updateRequests) {\n     if (metricsON) {\n-      final Timer.Context context \u003d schedulerAllocateTimer.time();\n+      final Timer.Context context \u003d schedulerMetrics.getSchedulerAllocateTimer()\n+          .time();\n       Allocation allocation \u003d null;\n       try {\n         allocation \u003d super\n             .allocate(attemptId, resourceRequests, containerIds, strings,\n                 strings2, updateRequests);\n         return allocation;\n       } finally {\n         context.stop();\n-        schedulerAllocateCounter.inc();\n+        schedulerMetrics.increaseSchedulerAllocationCounter();\n         try {\n           updateQueueWithAllocateRequest(allocation, attemptId,\n                   resourceRequests, containerIds);\n         } catch (IOException e) {\n           e.printStackTrace();\n         }\n       }\n     } else {\n       return super.allocate(attemptId, resourceRequests, containerIds, strings,\n           strings2, updateRequests);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Allocation allocate(ApplicationAttemptId attemptId,\n      List\u003cResourceRequest\u003e resourceRequests, List\u003cContainerId\u003e containerIds,\n      List\u003cString\u003e strings, List\u003cString\u003e strings2,\n      ContainerUpdates updateRequests) {\n    if (metricsON) {\n      final Timer.Context context \u003d schedulerMetrics.getSchedulerAllocateTimer()\n          .time();\n      Allocation allocation \u003d null;\n      try {\n        allocation \u003d super\n            .allocate(attemptId, resourceRequests, containerIds, strings,\n                strings2, updateRequests);\n        return allocation;\n      } finally {\n        context.stop();\n        schedulerMetrics.increaseSchedulerAllocationCounter();\n        try {\n          updateQueueWithAllocateRequest(allocation, attemptId,\n                  resourceRequests, containerIds);\n        } catch (IOException e) {\n          e.printStackTrace();\n        }\n      }\n    } else {\n      return super.allocate(attemptId, resourceRequests, containerIds, strings,\n          strings2, updateRequests);\n    }\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/SLSCapacityScheduler.java",
      "extendedDetails": {}
    },
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5959. RM changes to support change of container ExecutionType. (Arun Suresh via wangda)\n",
      "commitDate": "05/01/17 10:31 AM",
      "commitName": "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5959. RM changes to support change of container ExecutionType. (Arun Suresh via wangda)\n",
          "commitDate": "05/01/17 10:31 AM",
          "commitName": "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "04/01/17 7:17 PM",
          "commitNameOld": "5ed63e3e9d9937cf7441b7ceb5feafbf486f3387",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.63,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,27 @@\n   public Allocation allocate(ApplicationAttemptId attemptId,\n       List\u003cResourceRequest\u003e resourceRequests, List\u003cContainerId\u003e containerIds,\n       List\u003cString\u003e strings, List\u003cString\u003e strings2,\n-      List\u003cUpdateContainerRequest\u003e increaseRequests,\n-      List\u003cUpdateContainerRequest\u003e decreaseRequests) {\n+      ContainerUpdates updateRequests) {\n     if (metricsON) {\n       final Timer.Context context \u003d schedulerAllocateTimer.time();\n       Allocation allocation \u003d null;\n       try {\n         allocation \u003d super\n             .allocate(attemptId, resourceRequests, containerIds, strings,\n-                strings2, increaseRequests, decreaseRequests);\n+                strings2, updateRequests);\n         return allocation;\n       } finally {\n         context.stop();\n         schedulerAllocateCounter.inc();\n         try {\n           updateQueueWithAllocateRequest(allocation, attemptId,\n                   resourceRequests, containerIds);\n         } catch (IOException e) {\n           e.printStackTrace();\n         }\n       }\n     } else {\n       return super.allocate(attemptId, resourceRequests, containerIds, strings,\n-          strings2, increaseRequests, decreaseRequests);\n+          strings2, updateRequests);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Allocation allocate(ApplicationAttemptId attemptId,\n      List\u003cResourceRequest\u003e resourceRequests, List\u003cContainerId\u003e containerIds,\n      List\u003cString\u003e strings, List\u003cString\u003e strings2,\n      ContainerUpdates updateRequests) {\n    if (metricsON) {\n      final Timer.Context context \u003d schedulerAllocateTimer.time();\n      Allocation allocation \u003d null;\n      try {\n        allocation \u003d super\n            .allocate(attemptId, resourceRequests, containerIds, strings,\n                strings2, updateRequests);\n        return allocation;\n      } finally {\n        context.stop();\n        schedulerAllocateCounter.inc();\n        try {\n          updateQueueWithAllocateRequest(allocation, attemptId,\n                  resourceRequests, containerIds);\n        } catch (IOException e) {\n          e.printStackTrace();\n        }\n      }\n    } else {\n      return super.allocate(attemptId, resourceRequests, containerIds, strings,\n          strings2, updateRequests);\n    }\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/SLSCapacityScheduler.java",
          "extendedDetails": {
            "oldValue": "[attemptId-ApplicationAttemptId, resourceRequests-List\u003cResourceRequest\u003e, containerIds-List\u003cContainerId\u003e, strings-List\u003cString\u003e, strings2-List\u003cString\u003e, increaseRequests-List\u003cUpdateContainerRequest\u003e, decreaseRequests-List\u003cUpdateContainerRequest\u003e]",
            "newValue": "[attemptId-ApplicationAttemptId, resourceRequests-List\u003cResourceRequest\u003e, containerIds-List\u003cContainerId\u003e, strings-List\u003cString\u003e, strings2-List\u003cString\u003e, updateRequests-ContainerUpdates]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5959. RM changes to support change of container ExecutionType. (Arun Suresh via wangda)\n",
          "commitDate": "05/01/17 10:31 AM",
          "commitName": "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "04/01/17 7:17 PM",
          "commitNameOld": "5ed63e3e9d9937cf7441b7ceb5feafbf486f3387",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.63,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,27 @@\n   public Allocation allocate(ApplicationAttemptId attemptId,\n       List\u003cResourceRequest\u003e resourceRequests, List\u003cContainerId\u003e containerIds,\n       List\u003cString\u003e strings, List\u003cString\u003e strings2,\n-      List\u003cUpdateContainerRequest\u003e increaseRequests,\n-      List\u003cUpdateContainerRequest\u003e decreaseRequests) {\n+      ContainerUpdates updateRequests) {\n     if (metricsON) {\n       final Timer.Context context \u003d schedulerAllocateTimer.time();\n       Allocation allocation \u003d null;\n       try {\n         allocation \u003d super\n             .allocate(attemptId, resourceRequests, containerIds, strings,\n-                strings2, increaseRequests, decreaseRequests);\n+                strings2, updateRequests);\n         return allocation;\n       } finally {\n         context.stop();\n         schedulerAllocateCounter.inc();\n         try {\n           updateQueueWithAllocateRequest(allocation, attemptId,\n                   resourceRequests, containerIds);\n         } catch (IOException e) {\n           e.printStackTrace();\n         }\n       }\n     } else {\n       return super.allocate(attemptId, resourceRequests, containerIds, strings,\n-          strings2, increaseRequests, decreaseRequests);\n+          strings2, updateRequests);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Allocation allocate(ApplicationAttemptId attemptId,\n      List\u003cResourceRequest\u003e resourceRequests, List\u003cContainerId\u003e containerIds,\n      List\u003cString\u003e strings, List\u003cString\u003e strings2,\n      ContainerUpdates updateRequests) {\n    if (metricsON) {\n      final Timer.Context context \u003d schedulerAllocateTimer.time();\n      Allocation allocation \u003d null;\n      try {\n        allocation \u003d super\n            .allocate(attemptId, resourceRequests, containerIds, strings,\n                strings2, updateRequests);\n        return allocation;\n      } finally {\n        context.stop();\n        schedulerAllocateCounter.inc();\n        try {\n          updateQueueWithAllocateRequest(allocation, attemptId,\n                  resourceRequests, containerIds);\n        } catch (IOException e) {\n          e.printStackTrace();\n        }\n      }\n    } else {\n      return super.allocate(attemptId, resourceRequests, containerIds, strings,\n          strings2, updateRequests);\n    }\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/SLSCapacityScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "d6d9cff21b7b6141ed88359652cf22e8973c0661": {
      "type": "Yparameterchange",
      "commitMessage": "YARN-5221. Expose UpdateResourceRequest API to allow AM to request for change in container properties. (asuresh)\n",
      "commitDate": "30/08/16 3:52 PM",
      "commitName": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "11/07/16 10:36 PM",
      "commitNameOld": "819224dcf9c683aa52f58633ac8e13663f1916d8",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 49.72,
      "commitsBetweenForRepo": 352,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   public Allocation allocate(ApplicationAttemptId attemptId,\n       List\u003cResourceRequest\u003e resourceRequests, List\u003cContainerId\u003e containerIds,\n       List\u003cString\u003e strings, List\u003cString\u003e strings2,\n-      List\u003cContainerResourceChangeRequest\u003e increaseRequests,\n-      List\u003cContainerResourceChangeRequest\u003e decreaseRequests) {\n+      List\u003cUpdateContainerRequest\u003e increaseRequests,\n+      List\u003cUpdateContainerRequest\u003e decreaseRequests) {\n     if (metricsON) {\n       final Timer.Context context \u003d schedulerAllocateTimer.time();\n       Allocation allocation \u003d null;\n       try {\n         allocation \u003d super\n             .allocate(attemptId, resourceRequests, containerIds, strings,\n                 strings2, increaseRequests, decreaseRequests);\n         return allocation;\n       } finally {\n         context.stop();\n         schedulerAllocateCounter.inc();\n         try {\n           updateQueueWithAllocateRequest(allocation, attemptId,\n                   resourceRequests, containerIds);\n         } catch (IOException e) {\n           e.printStackTrace();\n         }\n       }\n     } else {\n       return super.allocate(attemptId, resourceRequests, containerIds, strings,\n           strings2, increaseRequests, decreaseRequests);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Allocation allocate(ApplicationAttemptId attemptId,\n      List\u003cResourceRequest\u003e resourceRequests, List\u003cContainerId\u003e containerIds,\n      List\u003cString\u003e strings, List\u003cString\u003e strings2,\n      List\u003cUpdateContainerRequest\u003e increaseRequests,\n      List\u003cUpdateContainerRequest\u003e decreaseRequests) {\n    if (metricsON) {\n      final Timer.Context context \u003d schedulerAllocateTimer.time();\n      Allocation allocation \u003d null;\n      try {\n        allocation \u003d super\n            .allocate(attemptId, resourceRequests, containerIds, strings,\n                strings2, increaseRequests, decreaseRequests);\n        return allocation;\n      } finally {\n        context.stop();\n        schedulerAllocateCounter.inc();\n        try {\n          updateQueueWithAllocateRequest(allocation, attemptId,\n                  resourceRequests, containerIds);\n        } catch (IOException e) {\n          e.printStackTrace();\n        }\n      }\n    } else {\n      return super.allocate(attemptId, resourceRequests, containerIds, strings,\n          strings2, increaseRequests, decreaseRequests);\n    }\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/SLSCapacityScheduler.java",
      "extendedDetails": {
        "oldValue": "[attemptId-ApplicationAttemptId, resourceRequests-List\u003cResourceRequest\u003e, containerIds-List\u003cContainerId\u003e, strings-List\u003cString\u003e, strings2-List\u003cString\u003e, increaseRequests-List\u003cContainerResourceChangeRequest\u003e, decreaseRequests-List\u003cContainerResourceChangeRequest\u003e]",
        "newValue": "[attemptId-ApplicationAttemptId, resourceRequests-List\u003cResourceRequest\u003e, containerIds-List\u003cContainerId\u003e, strings-List\u003cString\u003e, strings2-List\u003cString\u003e, increaseRequests-List\u003cUpdateContainerRequest\u003e, decreaseRequests-List\u003cUpdateContainerRequest\u003e]"
      }
    },
    "89cab1ba5f0671f8ef30dbe7432079c18362b434": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-1651. CapacityScheduler side changes to support container resize. Contributed by Wangda Tan\n",
      "commitDate": "23/09/15 1:29 PM",
      "commitName": "89cab1ba5f0671f8ef30dbe7432079c18362b434",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-1651. CapacityScheduler side changes to support container resize. Contributed by Wangda Tan\n",
          "commitDate": "23/09/15 1:29 PM",
          "commitName": "89cab1ba5f0671f8ef30dbe7432079c18362b434",
          "commitAuthor": "Jian He",
          "commitDateOld": "30/04/15 3:34 AM",
          "commitNameOld": "f384a063a653b33d69f7d2c7d4fd45c24b5aa46a",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 146.41,
          "commitsBetweenForRepo": 1037,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,28 @@\n   public Allocation allocate(ApplicationAttemptId attemptId,\n-                             List\u003cResourceRequest\u003e resourceRequests,\n-                             List\u003cContainerId\u003e containerIds,\n-                             List\u003cString\u003e strings, List\u003cString\u003e strings2) {\n+      List\u003cResourceRequest\u003e resourceRequests, List\u003cContainerId\u003e containerIds,\n+      List\u003cString\u003e strings, List\u003cString\u003e strings2,\n+      List\u003cContainerResourceChangeRequest\u003e increaseRequests,\n+      List\u003cContainerResourceChangeRequest\u003e decreaseRequests) {\n     if (metricsON) {\n       final Timer.Context context \u003d schedulerAllocateTimer.time();\n       Allocation allocation \u003d null;\n       try {\n-        allocation \u003d super.allocate(attemptId, resourceRequests,\n-                containerIds, strings, strings2);\n+        allocation \u003d super\n+            .allocate(attemptId, resourceRequests, containerIds, strings,\n+                strings2, increaseRequests, decreaseRequests);\n         return allocation;\n       } finally {\n         context.stop();\n         schedulerAllocateCounter.inc();\n         try {\n           updateQueueWithAllocateRequest(allocation, attemptId,\n                   resourceRequests, containerIds);\n         } catch (IOException e) {\n           e.printStackTrace();\n         }\n       }\n     } else {\n-      return super.allocate(attemptId,\n-              resourceRequests, containerIds, strings, strings2);\n+      return super.allocate(attemptId, resourceRequests, containerIds, strings,\n+          strings2, increaseRequests, decreaseRequests);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Allocation allocate(ApplicationAttemptId attemptId,\n      List\u003cResourceRequest\u003e resourceRequests, List\u003cContainerId\u003e containerIds,\n      List\u003cString\u003e strings, List\u003cString\u003e strings2,\n      List\u003cContainerResourceChangeRequest\u003e increaseRequests,\n      List\u003cContainerResourceChangeRequest\u003e decreaseRequests) {\n    if (metricsON) {\n      final Timer.Context context \u003d schedulerAllocateTimer.time();\n      Allocation allocation \u003d null;\n      try {\n        allocation \u003d super\n            .allocate(attemptId, resourceRequests, containerIds, strings,\n                strings2, increaseRequests, decreaseRequests);\n        return allocation;\n      } finally {\n        context.stop();\n        schedulerAllocateCounter.inc();\n        try {\n          updateQueueWithAllocateRequest(allocation, attemptId,\n                  resourceRequests, containerIds);\n        } catch (IOException e) {\n          e.printStackTrace();\n        }\n      }\n    } else {\n      return super.allocate(attemptId, resourceRequests, containerIds, strings,\n          strings2, increaseRequests, decreaseRequests);\n    }\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/SLSCapacityScheduler.java",
          "extendedDetails": {
            "oldValue": "[attemptId-ApplicationAttemptId, resourceRequests-List\u003cResourceRequest\u003e, containerIds-List\u003cContainerId\u003e, strings-List\u003cString\u003e, strings2-List\u003cString\u003e]",
            "newValue": "[attemptId-ApplicationAttemptId, resourceRequests-List\u003cResourceRequest\u003e, containerIds-List\u003cContainerId\u003e, strings-List\u003cString\u003e, strings2-List\u003cString\u003e, increaseRequests-List\u003cContainerResourceChangeRequest\u003e, decreaseRequests-List\u003cContainerResourceChangeRequest\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1651. CapacityScheduler side changes to support container resize. Contributed by Wangda Tan\n",
          "commitDate": "23/09/15 1:29 PM",
          "commitName": "89cab1ba5f0671f8ef30dbe7432079c18362b434",
          "commitAuthor": "Jian He",
          "commitDateOld": "30/04/15 3:34 AM",
          "commitNameOld": "f384a063a653b33d69f7d2c7d4fd45c24b5aa46a",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 146.41,
          "commitsBetweenForRepo": 1037,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,28 @@\n   public Allocation allocate(ApplicationAttemptId attemptId,\n-                             List\u003cResourceRequest\u003e resourceRequests,\n-                             List\u003cContainerId\u003e containerIds,\n-                             List\u003cString\u003e strings, List\u003cString\u003e strings2) {\n+      List\u003cResourceRequest\u003e resourceRequests, List\u003cContainerId\u003e containerIds,\n+      List\u003cString\u003e strings, List\u003cString\u003e strings2,\n+      List\u003cContainerResourceChangeRequest\u003e increaseRequests,\n+      List\u003cContainerResourceChangeRequest\u003e decreaseRequests) {\n     if (metricsON) {\n       final Timer.Context context \u003d schedulerAllocateTimer.time();\n       Allocation allocation \u003d null;\n       try {\n-        allocation \u003d super.allocate(attemptId, resourceRequests,\n-                containerIds, strings, strings2);\n+        allocation \u003d super\n+            .allocate(attemptId, resourceRequests, containerIds, strings,\n+                strings2, increaseRequests, decreaseRequests);\n         return allocation;\n       } finally {\n         context.stop();\n         schedulerAllocateCounter.inc();\n         try {\n           updateQueueWithAllocateRequest(allocation, attemptId,\n                   resourceRequests, containerIds);\n         } catch (IOException e) {\n           e.printStackTrace();\n         }\n       }\n     } else {\n-      return super.allocate(attemptId,\n-              resourceRequests, containerIds, strings, strings2);\n+      return super.allocate(attemptId, resourceRequests, containerIds, strings,\n+          strings2, increaseRequests, decreaseRequests);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Allocation allocate(ApplicationAttemptId attemptId,\n      List\u003cResourceRequest\u003e resourceRequests, List\u003cContainerId\u003e containerIds,\n      List\u003cString\u003e strings, List\u003cString\u003e strings2,\n      List\u003cContainerResourceChangeRequest\u003e increaseRequests,\n      List\u003cContainerResourceChangeRequest\u003e decreaseRequests) {\n    if (metricsON) {\n      final Timer.Context context \u003d schedulerAllocateTimer.time();\n      Allocation allocation \u003d null;\n      try {\n        allocation \u003d super\n            .allocate(attemptId, resourceRequests, containerIds, strings,\n                strings2, increaseRequests, decreaseRequests);\n        return allocation;\n      } finally {\n        context.stop();\n        schedulerAllocateCounter.inc();\n        try {\n          updateQueueWithAllocateRequest(allocation, attemptId,\n                  resourceRequests, containerIds);\n        } catch (IOException e) {\n          e.printStackTrace();\n        }\n      }\n    } else {\n      return super.allocate(attemptId, resourceRequests, containerIds, strings,\n          strings2, increaseRequests, decreaseRequests);\n    }\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/SLSCapacityScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "e07f3c87cd3542760efcf713f909375b69eec00f": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1471. Preserve scheduler typeinfo in simulator to work with resource monitors.\nContributed by Carlo Curino.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1552173 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/12/13 4:07 PM",
      "commitName": "e07f3c87cd3542760efcf713f909375b69eec00f",
      "commitAuthor": "Christopher Douglas",
      "diff": "@@ -0,0 +1,26 @@\n+  public Allocation allocate(ApplicationAttemptId attemptId,\n+                             List\u003cResourceRequest\u003e resourceRequests,\n+                             List\u003cContainerId\u003e containerIds,\n+                             List\u003cString\u003e strings, List\u003cString\u003e strings2) {\n+    if (metricsON) {\n+      final Timer.Context context \u003d schedulerAllocateTimer.time();\n+      Allocation allocation \u003d null;\n+      try {\n+        allocation \u003d super.allocate(attemptId, resourceRequests,\n+                containerIds, strings, strings2);\n+        return allocation;\n+      } finally {\n+        context.stop();\n+        schedulerAllocateCounter.inc();\n+        try {\n+          updateQueueWithAllocateRequest(allocation, attemptId,\n+                  resourceRequests, containerIds);\n+        } catch (IOException e) {\n+          e.printStackTrace();\n+        }\n+      }\n+    } else {\n+      return super.allocate(attemptId,\n+              resourceRequests, containerIds, strings, strings2);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Allocation allocate(ApplicationAttemptId attemptId,\n                             List\u003cResourceRequest\u003e resourceRequests,\n                             List\u003cContainerId\u003e containerIds,\n                             List\u003cString\u003e strings, List\u003cString\u003e strings2) {\n    if (metricsON) {\n      final Timer.Context context \u003d schedulerAllocateTimer.time();\n      Allocation allocation \u003d null;\n      try {\n        allocation \u003d super.allocate(attemptId, resourceRequests,\n                containerIds, strings, strings2);\n        return allocation;\n      } finally {\n        context.stop();\n        schedulerAllocateCounter.inc();\n        try {\n          updateQueueWithAllocateRequest(allocation, attemptId,\n                  resourceRequests, containerIds);\n        } catch (IOException e) {\n          e.printStackTrace();\n        }\n      }\n    } else {\n      return super.allocate(attemptId,\n              resourceRequests, containerIds, strings, strings2);\n    }\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/SLSCapacityScheduler.java"
    }
  }
}