{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ServiceApiUtil.java",
  "functionName": "validateNameFormat",
  "functionId": "validateNameFormat___name-String__conf-org.apache.hadoop.conf.Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/utils/ServiceApiUtil.java",
  "functionStartLine": 317,
  "functionEndLine": 336,
  "numCommitsSeen": 41,
  "timeTaken": 6966,
  "changeHistory": [
    "40ab068eabe50875449d601471619a4e82fff86d",
    "1888318c89776f0bf354c1b13e3ee169e14ff638",
    "e86d828548c17ebadc0e6d22b50151eebd9696d5",
    "a0574e7f4f5a6e53677ada4381db5504f263d70f",
    "845764da146e98927e8ea5b2209f19f4fc3feda5"
  ],
  "changeHistoryShort": {
    "40ab068eabe50875449d601471619a4e82fff86d": "Ymultichange(Yfilerename,Ybodychange,Yrename,Yparameterchange)",
    "1888318c89776f0bf354c1b13e3ee169e14ff638": "Ymultichange(Yfilerename,Yexceptionschange,Ybodychange,Yrename,Yparameterchange)",
    "e86d828548c17ebadc0e6d22b50151eebd9696d5": "Ybodychange",
    "a0574e7f4f5a6e53677ada4381db5504f263d70f": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange)",
    "845764da146e98927e8ea5b2209f19f4fc3feda5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "40ab068eabe50875449d601471619a4e82fff86d": {
      "type": "Ymultichange(Yfilerename,Ybodychange,Yrename,Yparameterchange)",
      "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,20 @@\n-  public static void validateCompName(String compName) {\n-    if (StringUtils.isEmpty(compName)) {\n-      throw new IllegalArgumentException(\"Component name can not be empty\");\n+  public static void validateNameFormat(String name,\n+      org.apache.hadoop.conf.Configuration conf) {\n+    if (StringUtils.isEmpty(name)) {\n+      throw new IllegalArgumentException(\"Name can not be empty!\");\n     }\n     // validate component name\n-    if (compName.contains(\"_\")) {\n+    if (name.contains(\"_\")) {\n       throw new IllegalArgumentException(\n-          \"Invalid format for component name: \" + compName\n-              + \", can not use \u0027_\u0027 as DNS hostname does not allow underscore. Use \u0027-\u0027 Instead. \");\n+          \"Invalid format: \" + name\n+              + \", can not use \u0027_\u0027, as DNS hostname does not allow \u0027_\u0027. Use \u0027-\u0027 Instead. \");\n     }\n-    compNamePattern.validate(compName);\n+    boolean dnsEnabled \u003d conf.getBoolean(RegistryConstants.KEY_DNS_ENABLED,\n+        RegistryConstants.DEFAULT_DNS_ENABLED);\n+    if (dnsEnabled \u0026\u0026 name.length() \u003e RegistryConstants.MAX_FQDN_LABEL_LENGTH) {\n+      throw new IllegalArgumentException(String\n+          .format(\"Invalid format %s, must be no more than 63 characters \",\n+              name));\n+    }\n+    namePattern.validate(name);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void validateNameFormat(String name,\n      org.apache.hadoop.conf.Configuration conf) {\n    if (StringUtils.isEmpty(name)) {\n      throw new IllegalArgumentException(\"Name can not be empty!\");\n    }\n    // validate component name\n    if (name.contains(\"_\")) {\n      throw new IllegalArgumentException(\n          \"Invalid format: \" + name\n              + \", can not use \u0027_\u0027, as DNS hostname does not allow \u0027_\u0027. Use \u0027-\u0027 Instead. \");\n    }\n    boolean dnsEnabled \u003d conf.getBoolean(RegistryConstants.KEY_DNS_ENABLED,\n        RegistryConstants.DEFAULT_DNS_ENABLED);\n    if (dnsEnabled \u0026\u0026 name.length() \u003e RegistryConstants.MAX_FQDN_LABEL_LENGTH) {\n      throw new IllegalArgumentException(String\n          .format(\"Invalid format %s, must be no more than 63 characters \",\n              name));\n    }\n    namePattern.validate(name);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/utils/ServiceApiUtil.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/utils/ServiceApiUtil.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/utils/ServiceApiUtil.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,20 @@\n-  public static void validateCompName(String compName) {\n-    if (StringUtils.isEmpty(compName)) {\n-      throw new IllegalArgumentException(\"Component name can not be empty\");\n+  public static void validateNameFormat(String name,\n+      org.apache.hadoop.conf.Configuration conf) {\n+    if (StringUtils.isEmpty(name)) {\n+      throw new IllegalArgumentException(\"Name can not be empty!\");\n     }\n     // validate component name\n-    if (compName.contains(\"_\")) {\n+    if (name.contains(\"_\")) {\n       throw new IllegalArgumentException(\n-          \"Invalid format for component name: \" + compName\n-              + \", can not use \u0027_\u0027 as DNS hostname does not allow underscore. Use \u0027-\u0027 Instead. \");\n+          \"Invalid format: \" + name\n+              + \", can not use \u0027_\u0027, as DNS hostname does not allow \u0027_\u0027. Use \u0027-\u0027 Instead. \");\n     }\n-    compNamePattern.validate(compName);\n+    boolean dnsEnabled \u003d conf.getBoolean(RegistryConstants.KEY_DNS_ENABLED,\n+        RegistryConstants.DEFAULT_DNS_ENABLED);\n+    if (dnsEnabled \u0026\u0026 name.length() \u003e RegistryConstants.MAX_FQDN_LABEL_LENGTH) {\n+      throw new IllegalArgumentException(String\n+          .format(\"Invalid format %s, must be no more than 63 characters \",\n+              name));\n+    }\n+    namePattern.validate(name);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void validateNameFormat(String name,\n      org.apache.hadoop.conf.Configuration conf) {\n    if (StringUtils.isEmpty(name)) {\n      throw new IllegalArgumentException(\"Name can not be empty!\");\n    }\n    // validate component name\n    if (name.contains(\"_\")) {\n      throw new IllegalArgumentException(\n          \"Invalid format: \" + name\n              + \", can not use \u0027_\u0027, as DNS hostname does not allow \u0027_\u0027. Use \u0027-\u0027 Instead. \");\n    }\n    boolean dnsEnabled \u003d conf.getBoolean(RegistryConstants.KEY_DNS_ENABLED,\n        RegistryConstants.DEFAULT_DNS_ENABLED);\n    if (dnsEnabled \u0026\u0026 name.length() \u003e RegistryConstants.MAX_FQDN_LABEL_LENGTH) {\n      throw new IllegalArgumentException(String\n          .format(\"Invalid format %s, must be no more than 63 characters \",\n              name));\n    }\n    namePattern.validate(name);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/utils/ServiceApiUtil.java",
          "extendedDetails": {}
        },
        {
          "type": "Yrename",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,20 @@\n-  public static void validateCompName(String compName) {\n-    if (StringUtils.isEmpty(compName)) {\n-      throw new IllegalArgumentException(\"Component name can not be empty\");\n+  public static void validateNameFormat(String name,\n+      org.apache.hadoop.conf.Configuration conf) {\n+    if (StringUtils.isEmpty(name)) {\n+      throw new IllegalArgumentException(\"Name can not be empty!\");\n     }\n     // validate component name\n-    if (compName.contains(\"_\")) {\n+    if (name.contains(\"_\")) {\n       throw new IllegalArgumentException(\n-          \"Invalid format for component name: \" + compName\n-              + \", can not use \u0027_\u0027 as DNS hostname does not allow underscore. Use \u0027-\u0027 Instead. \");\n+          \"Invalid format: \" + name\n+              + \", can not use \u0027_\u0027, as DNS hostname does not allow \u0027_\u0027. Use \u0027-\u0027 Instead. \");\n     }\n-    compNamePattern.validate(compName);\n+    boolean dnsEnabled \u003d conf.getBoolean(RegistryConstants.KEY_DNS_ENABLED,\n+        RegistryConstants.DEFAULT_DNS_ENABLED);\n+    if (dnsEnabled \u0026\u0026 name.length() \u003e RegistryConstants.MAX_FQDN_LABEL_LENGTH) {\n+      throw new IllegalArgumentException(String\n+          .format(\"Invalid format %s, must be no more than 63 characters \",\n+              name));\n+    }\n+    namePattern.validate(name);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void validateNameFormat(String name,\n      org.apache.hadoop.conf.Configuration conf) {\n    if (StringUtils.isEmpty(name)) {\n      throw new IllegalArgumentException(\"Name can not be empty!\");\n    }\n    // validate component name\n    if (name.contains(\"_\")) {\n      throw new IllegalArgumentException(\n          \"Invalid format: \" + name\n              + \", can not use \u0027_\u0027, as DNS hostname does not allow \u0027_\u0027. Use \u0027-\u0027 Instead. \");\n    }\n    boolean dnsEnabled \u003d conf.getBoolean(RegistryConstants.KEY_DNS_ENABLED,\n        RegistryConstants.DEFAULT_DNS_ENABLED);\n    if (dnsEnabled \u0026\u0026 name.length() \u003e RegistryConstants.MAX_FQDN_LABEL_LENGTH) {\n      throw new IllegalArgumentException(String\n          .format(\"Invalid format %s, must be no more than 63 characters \",\n              name));\n    }\n    namePattern.validate(name);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/utils/ServiceApiUtil.java",
          "extendedDetails": {
            "oldValue": "validateCompName",
            "newValue": "validateNameFormat"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,20 @@\n-  public static void validateCompName(String compName) {\n-    if (StringUtils.isEmpty(compName)) {\n-      throw new IllegalArgumentException(\"Component name can not be empty\");\n+  public static void validateNameFormat(String name,\n+      org.apache.hadoop.conf.Configuration conf) {\n+    if (StringUtils.isEmpty(name)) {\n+      throw new IllegalArgumentException(\"Name can not be empty!\");\n     }\n     // validate component name\n-    if (compName.contains(\"_\")) {\n+    if (name.contains(\"_\")) {\n       throw new IllegalArgumentException(\n-          \"Invalid format for component name: \" + compName\n-              + \", can not use \u0027_\u0027 as DNS hostname does not allow underscore. Use \u0027-\u0027 Instead. \");\n+          \"Invalid format: \" + name\n+              + \", can not use \u0027_\u0027, as DNS hostname does not allow \u0027_\u0027. Use \u0027-\u0027 Instead. \");\n     }\n-    compNamePattern.validate(compName);\n+    boolean dnsEnabled \u003d conf.getBoolean(RegistryConstants.KEY_DNS_ENABLED,\n+        RegistryConstants.DEFAULT_DNS_ENABLED);\n+    if (dnsEnabled \u0026\u0026 name.length() \u003e RegistryConstants.MAX_FQDN_LABEL_LENGTH) {\n+      throw new IllegalArgumentException(String\n+          .format(\"Invalid format %s, must be no more than 63 characters \",\n+              name));\n+    }\n+    namePattern.validate(name);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void validateNameFormat(String name,\n      org.apache.hadoop.conf.Configuration conf) {\n    if (StringUtils.isEmpty(name)) {\n      throw new IllegalArgumentException(\"Name can not be empty!\");\n    }\n    // validate component name\n    if (name.contains(\"_\")) {\n      throw new IllegalArgumentException(\n          \"Invalid format: \" + name\n              + \", can not use \u0027_\u0027, as DNS hostname does not allow \u0027_\u0027. Use \u0027-\u0027 Instead. \");\n    }\n    boolean dnsEnabled \u003d conf.getBoolean(RegistryConstants.KEY_DNS_ENABLED,\n        RegistryConstants.DEFAULT_DNS_ENABLED);\n    if (dnsEnabled \u0026\u0026 name.length() \u003e RegistryConstants.MAX_FQDN_LABEL_LENGTH) {\n      throw new IllegalArgumentException(String\n          .format(\"Invalid format %s, must be no more than 63 characters \",\n              name));\n    }\n    namePattern.validate(name);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/utils/ServiceApiUtil.java",
          "extendedDetails": {
            "oldValue": "[compName-String]",
            "newValue": "[name-String, conf-org.apache.hadoop.conf.Configuration]"
          }
        }
      ]
    },
    "1888318c89776f0bf354c1b13e3ee169e14ff638": {
      "type": "Ymultichange(Yfilerename,Yexceptionschange,Ybodychange,Yrename,Yparameterchange)",
      "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "27dcc679596edaaeb18dc42d2a812957a9d34e89",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,12 @@\n-  public static void validateComponent(Component comp, FileSystem fs)\n-      throws IOException {\n-    AbstractClientProvider compClientProvider \u003d SliderProviderFactory\n-        .getClientProvider(comp.getArtifact());\n-    compClientProvider.validateArtifact(comp.getArtifact(), fs);\n-\n-    if (comp.getLaunchCommand() \u003d\u003d null \u0026\u0026 (comp.getArtifact() \u003d\u003d null || comp\n-        .getArtifact().getType() !\u003d Artifact.TypeEnum.DOCKER)) {\n-      throw new IllegalArgumentException(RestApiErrorMessages\n-          .ERROR_ABSENT_LAUNCH_COMMAND);\n+  public static void validateCompName(String compName) {\n+    if (StringUtils.isEmpty(compName)) {\n+      throw new IllegalArgumentException(\"Component name can not be empty\");\n     }\n-\n-    validateApplicationResource(comp.getResource(), comp);\n-\n-    if (comp.getNumberOfContainers() \u003d\u003d null\n-        || comp.getNumberOfContainers() \u003c 0) {\n-      throw new IllegalArgumentException(String.format(\n-          RestApiErrorMessages.ERROR_CONTAINERS_COUNT_FOR_COMP_INVALID\n-              + \": \" + comp.getNumberOfContainers(), comp.getName()));\n+    // validate component name\n+    if (compName.contains(\"_\")) {\n+      throw new IllegalArgumentException(\n+          \"Invalid format for component name: \" + compName\n+              + \", can not use \u0027_\u0027 as DNS hostname does not allow underscore. Use \u0027-\u0027 Instead. \");\n     }\n-    compClientProvider.validateConfigFiles(comp.getConfiguration()\n-        .getFiles(), fs);\n-\n-    MonitorUtils.getProbe(comp.getReadinessCheck());\n+    compNamePattern.validate(compName);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void validateCompName(String compName) {\n    if (StringUtils.isEmpty(compName)) {\n      throw new IllegalArgumentException(\"Component name can not be empty\");\n    }\n    // validate component name\n    if (compName.contains(\"_\")) {\n      throw new IllegalArgumentException(\n          \"Invalid format for component name: \" + compName\n              + \", can not use \u0027_\u0027 as DNS hostname does not allow underscore. Use \u0027-\u0027 Instead. \");\n    }\n    compNamePattern.validate(compName);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/utils/ServiceApiUtil.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/util/ServiceApiUtil.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/utils/ServiceApiUtil.java"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "27dcc679596edaaeb18dc42d2a812957a9d34e89",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,12 @@\n-  public static void validateComponent(Component comp, FileSystem fs)\n-      throws IOException {\n-    AbstractClientProvider compClientProvider \u003d SliderProviderFactory\n-        .getClientProvider(comp.getArtifact());\n-    compClientProvider.validateArtifact(comp.getArtifact(), fs);\n-\n-    if (comp.getLaunchCommand() \u003d\u003d null \u0026\u0026 (comp.getArtifact() \u003d\u003d null || comp\n-        .getArtifact().getType() !\u003d Artifact.TypeEnum.DOCKER)) {\n-      throw new IllegalArgumentException(RestApiErrorMessages\n-          .ERROR_ABSENT_LAUNCH_COMMAND);\n+  public static void validateCompName(String compName) {\n+    if (StringUtils.isEmpty(compName)) {\n+      throw new IllegalArgumentException(\"Component name can not be empty\");\n     }\n-\n-    validateApplicationResource(comp.getResource(), comp);\n-\n-    if (comp.getNumberOfContainers() \u003d\u003d null\n-        || comp.getNumberOfContainers() \u003c 0) {\n-      throw new IllegalArgumentException(String.format(\n-          RestApiErrorMessages.ERROR_CONTAINERS_COUNT_FOR_COMP_INVALID\n-              + \": \" + comp.getNumberOfContainers(), comp.getName()));\n+    // validate component name\n+    if (compName.contains(\"_\")) {\n+      throw new IllegalArgumentException(\n+          \"Invalid format for component name: \" + compName\n+              + \", can not use \u0027_\u0027 as DNS hostname does not allow underscore. Use \u0027-\u0027 Instead. \");\n     }\n-    compClientProvider.validateConfigFiles(comp.getConfiguration()\n-        .getFiles(), fs);\n-\n-    MonitorUtils.getProbe(comp.getReadinessCheck());\n+    compNamePattern.validate(compName);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void validateCompName(String compName) {\n    if (StringUtils.isEmpty(compName)) {\n      throw new IllegalArgumentException(\"Component name can not be empty\");\n    }\n    // validate component name\n    if (compName.contains(\"_\")) {\n      throw new IllegalArgumentException(\n          \"Invalid format for component name: \" + compName\n              + \", can not use \u0027_\u0027 as DNS hostname does not allow underscore. Use \u0027-\u0027 Instead. \");\n    }\n    compNamePattern.validate(compName);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/utils/ServiceApiUtil.java",
          "extendedDetails": {
            "oldValue": "[IOException]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "27dcc679596edaaeb18dc42d2a812957a9d34e89",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,12 @@\n-  public static void validateComponent(Component comp, FileSystem fs)\n-      throws IOException {\n-    AbstractClientProvider compClientProvider \u003d SliderProviderFactory\n-        .getClientProvider(comp.getArtifact());\n-    compClientProvider.validateArtifact(comp.getArtifact(), fs);\n-\n-    if (comp.getLaunchCommand() \u003d\u003d null \u0026\u0026 (comp.getArtifact() \u003d\u003d null || comp\n-        .getArtifact().getType() !\u003d Artifact.TypeEnum.DOCKER)) {\n-      throw new IllegalArgumentException(RestApiErrorMessages\n-          .ERROR_ABSENT_LAUNCH_COMMAND);\n+  public static void validateCompName(String compName) {\n+    if (StringUtils.isEmpty(compName)) {\n+      throw new IllegalArgumentException(\"Component name can not be empty\");\n     }\n-\n-    validateApplicationResource(comp.getResource(), comp);\n-\n-    if (comp.getNumberOfContainers() \u003d\u003d null\n-        || comp.getNumberOfContainers() \u003c 0) {\n-      throw new IllegalArgumentException(String.format(\n-          RestApiErrorMessages.ERROR_CONTAINERS_COUNT_FOR_COMP_INVALID\n-              + \": \" + comp.getNumberOfContainers(), comp.getName()));\n+    // validate component name\n+    if (compName.contains(\"_\")) {\n+      throw new IllegalArgumentException(\n+          \"Invalid format for component name: \" + compName\n+              + \", can not use \u0027_\u0027 as DNS hostname does not allow underscore. Use \u0027-\u0027 Instead. \");\n     }\n-    compClientProvider.validateConfigFiles(comp.getConfiguration()\n-        .getFiles(), fs);\n-\n-    MonitorUtils.getProbe(comp.getReadinessCheck());\n+    compNamePattern.validate(compName);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void validateCompName(String compName) {\n    if (StringUtils.isEmpty(compName)) {\n      throw new IllegalArgumentException(\"Component name can not be empty\");\n    }\n    // validate component name\n    if (compName.contains(\"_\")) {\n      throw new IllegalArgumentException(\n          \"Invalid format for component name: \" + compName\n              + \", can not use \u0027_\u0027 as DNS hostname does not allow underscore. Use \u0027-\u0027 Instead. \");\n    }\n    compNamePattern.validate(compName);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/utils/ServiceApiUtil.java",
          "extendedDetails": {}
        },
        {
          "type": "Yrename",
          "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "27dcc679596edaaeb18dc42d2a812957a9d34e89",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,12 @@\n-  public static void validateComponent(Component comp, FileSystem fs)\n-      throws IOException {\n-    AbstractClientProvider compClientProvider \u003d SliderProviderFactory\n-        .getClientProvider(comp.getArtifact());\n-    compClientProvider.validateArtifact(comp.getArtifact(), fs);\n-\n-    if (comp.getLaunchCommand() \u003d\u003d null \u0026\u0026 (comp.getArtifact() \u003d\u003d null || comp\n-        .getArtifact().getType() !\u003d Artifact.TypeEnum.DOCKER)) {\n-      throw new IllegalArgumentException(RestApiErrorMessages\n-          .ERROR_ABSENT_LAUNCH_COMMAND);\n+  public static void validateCompName(String compName) {\n+    if (StringUtils.isEmpty(compName)) {\n+      throw new IllegalArgumentException(\"Component name can not be empty\");\n     }\n-\n-    validateApplicationResource(comp.getResource(), comp);\n-\n-    if (comp.getNumberOfContainers() \u003d\u003d null\n-        || comp.getNumberOfContainers() \u003c 0) {\n-      throw new IllegalArgumentException(String.format(\n-          RestApiErrorMessages.ERROR_CONTAINERS_COUNT_FOR_COMP_INVALID\n-              + \": \" + comp.getNumberOfContainers(), comp.getName()));\n+    // validate component name\n+    if (compName.contains(\"_\")) {\n+      throw new IllegalArgumentException(\n+          \"Invalid format for component name: \" + compName\n+              + \", can not use \u0027_\u0027 as DNS hostname does not allow underscore. Use \u0027-\u0027 Instead. \");\n     }\n-    compClientProvider.validateConfigFiles(comp.getConfiguration()\n-        .getFiles(), fs);\n-\n-    MonitorUtils.getProbe(comp.getReadinessCheck());\n+    compNamePattern.validate(compName);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void validateCompName(String compName) {\n    if (StringUtils.isEmpty(compName)) {\n      throw new IllegalArgumentException(\"Component name can not be empty\");\n    }\n    // validate component name\n    if (compName.contains(\"_\")) {\n      throw new IllegalArgumentException(\n          \"Invalid format for component name: \" + compName\n              + \", can not use \u0027_\u0027 as DNS hostname does not allow underscore. Use \u0027-\u0027 Instead. \");\n    }\n    compNamePattern.validate(compName);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/utils/ServiceApiUtil.java",
          "extendedDetails": {
            "oldValue": "validateComponent",
            "newValue": "validateCompName"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "27dcc679596edaaeb18dc42d2a812957a9d34e89",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,12 @@\n-  public static void validateComponent(Component comp, FileSystem fs)\n-      throws IOException {\n-    AbstractClientProvider compClientProvider \u003d SliderProviderFactory\n-        .getClientProvider(comp.getArtifact());\n-    compClientProvider.validateArtifact(comp.getArtifact(), fs);\n-\n-    if (comp.getLaunchCommand() \u003d\u003d null \u0026\u0026 (comp.getArtifact() \u003d\u003d null || comp\n-        .getArtifact().getType() !\u003d Artifact.TypeEnum.DOCKER)) {\n-      throw new IllegalArgumentException(RestApiErrorMessages\n-          .ERROR_ABSENT_LAUNCH_COMMAND);\n+  public static void validateCompName(String compName) {\n+    if (StringUtils.isEmpty(compName)) {\n+      throw new IllegalArgumentException(\"Component name can not be empty\");\n     }\n-\n-    validateApplicationResource(comp.getResource(), comp);\n-\n-    if (comp.getNumberOfContainers() \u003d\u003d null\n-        || comp.getNumberOfContainers() \u003c 0) {\n-      throw new IllegalArgumentException(String.format(\n-          RestApiErrorMessages.ERROR_CONTAINERS_COUNT_FOR_COMP_INVALID\n-              + \": \" + comp.getNumberOfContainers(), comp.getName()));\n+    // validate component name\n+    if (compName.contains(\"_\")) {\n+      throw new IllegalArgumentException(\n+          \"Invalid format for component name: \" + compName\n+              + \", can not use \u0027_\u0027 as DNS hostname does not allow underscore. Use \u0027-\u0027 Instead. \");\n     }\n-    compClientProvider.validateConfigFiles(comp.getConfiguration()\n-        .getFiles(), fs);\n-\n-    MonitorUtils.getProbe(comp.getReadinessCheck());\n+    compNamePattern.validate(compName);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void validateCompName(String compName) {\n    if (StringUtils.isEmpty(compName)) {\n      throw new IllegalArgumentException(\"Component name can not be empty\");\n    }\n    // validate component name\n    if (compName.contains(\"_\")) {\n      throw new IllegalArgumentException(\n          \"Invalid format for component name: \" + compName\n              + \", can not use \u0027_\u0027 as DNS hostname does not allow underscore. Use \u0027-\u0027 Instead. \");\n    }\n    compNamePattern.validate(compName);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/utils/ServiceApiUtil.java",
          "extendedDetails": {
            "oldValue": "[comp-Component, fs-FileSystem]",
            "newValue": "[compName-String]"
          }
        }
      ]
    },
    "e86d828548c17ebadc0e6d22b50151eebd9696d5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6716. Native services support for specifying component start order. Contributed by Billie Rinaldi\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "e86d828548c17ebadc0e6d22b50151eebd9696d5",
      "commitAuthor": "Jian He",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "a0574e7f4f5a6e53677ada4381db5504f263d70f",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,25 @@\n   public static void validateComponent(Component comp, FileSystem fs)\n       throws IOException {\n     AbstractClientProvider compClientProvider \u003d SliderProviderFactory\n         .getClientProvider(comp.getArtifact());\n     compClientProvider.validateArtifact(comp.getArtifact(), fs);\n \n     if (comp.getLaunchCommand() \u003d\u003d null \u0026\u0026 (comp.getArtifact() \u003d\u003d null || comp\n         .getArtifact().getType() !\u003d Artifact.TypeEnum.DOCKER)) {\n       throw new IllegalArgumentException(RestApiErrorMessages\n           .ERROR_ABSENT_LAUNCH_COMMAND);\n     }\n \n     validateApplicationResource(comp.getResource(), comp);\n \n     if (comp.getNumberOfContainers() \u003d\u003d null\n         || comp.getNumberOfContainers() \u003c 0) {\n       throw new IllegalArgumentException(String.format(\n           RestApiErrorMessages.ERROR_CONTAINERS_COUNT_FOR_COMP_INVALID\n               + \": \" + comp.getNumberOfContainers(), comp.getName()));\n     }\n     compClientProvider.validateConfigFiles(comp.getConfiguration()\n         .getFiles(), fs);\n+\n+    MonitorUtils.getProbe(comp.getReadinessCheck());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void validateComponent(Component comp, FileSystem fs)\n      throws IOException {\n    AbstractClientProvider compClientProvider \u003d SliderProviderFactory\n        .getClientProvider(comp.getArtifact());\n    compClientProvider.validateArtifact(comp.getArtifact(), fs);\n\n    if (comp.getLaunchCommand() \u003d\u003d null \u0026\u0026 (comp.getArtifact() \u003d\u003d null || comp\n        .getArtifact().getType() !\u003d Artifact.TypeEnum.DOCKER)) {\n      throw new IllegalArgumentException(RestApiErrorMessages\n          .ERROR_ABSENT_LAUNCH_COMMAND);\n    }\n\n    validateApplicationResource(comp.getResource(), comp);\n\n    if (comp.getNumberOfContainers() \u003d\u003d null\n        || comp.getNumberOfContainers() \u003c 0) {\n      throw new IllegalArgumentException(String.format(\n          RestApiErrorMessages.ERROR_CONTAINERS_COUNT_FOR_COMP_INVALID\n              + \": \" + comp.getNumberOfContainers(), comp.getName()));\n    }\n    compClientProvider.validateConfigFiles(comp.getConfiguration()\n        .getFiles(), fs);\n\n    MonitorUtils.getProbe(comp.getReadinessCheck());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/util/ServiceApiUtil.java",
      "extendedDetails": {}
    },
    "a0574e7f4f5a6e53677ada4381db5504f263d70f": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-6613. Update json validation for new native services providers. Contributed by Billie Rinaldi\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "a0574e7f4f5a6e53677ada4381db5504f263d70f",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-6613. Update json validation for new native services providers. Contributed by Billie Rinaldi\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "a0574e7f4f5a6e53677ada4381db5504f263d70f",
          "commitAuthor": "Jian He",
          "commitDateOld": "06/11/17 1:28 PM",
          "commitNameOld": "845764da146e98927e8ea5b2209f19f4fc3feda5",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,23 @@\n-  private static void validateConfigFile(List\u003cConfigFile\u003e list, FileSystem fs)\n+  public static void validateComponent(Component comp, FileSystem fs)\n       throws IOException {\n-    Set\u003cString\u003e destFileSet \u003d new HashSet\u003c\u003e();\n+    AbstractClientProvider compClientProvider \u003d SliderProviderFactory\n+        .getClientProvider(comp.getArtifact());\n+    compClientProvider.validateArtifact(comp.getArtifact(), fs);\n \n-    for (ConfigFile file : list) {\n-      if (file.getType().equals(ConfigFile.TypeEnum.TEMPLATE) \u0026\u0026 StringUtils\n-          .isEmpty(file.getSrcFile())) {\n-        throw new IllegalArgumentException(\n-            \"Src_file is empty for \" + ConfigFile.TypeEnum.TEMPLATE);\n-\n-      }\n-      if (!StringUtils.isEmpty(file.getSrcFile())) {\n-        Path p \u003d new Path(file.getSrcFile());\n-        if (!fs.exists(p)) {\n-          throw new IllegalArgumentException(\n-              \"Src_file does not exist for config file: \" + file\n-                  .getSrcFile());\n-        }\n-      }\n-\n-      if (StringUtils.isEmpty(file.getDestFile())) {\n-        throw new IllegalArgumentException(\"Dest_file is empty.\");\n-      }\n-      // validate dest_file is absolute\n-      if (!Paths.get(file.getDestFile()).isAbsolute()) {\n-        throw new IllegalArgumentException(\n-            \"Dest_file must be absolute path: \" + file.getDestFile());\n-      }\n-\n-      if (destFileSet.contains(file.getDestFile())) {\n-        throw new IllegalArgumentException(\n-            \"Duplicated ConfigFile exists: \" + file.getDestFile());\n-      }\n-      destFileSet.add(file.getDestFile());\n+    if (comp.getLaunchCommand() \u003d\u003d null \u0026\u0026 (comp.getArtifact() \u003d\u003d null || comp\n+        .getArtifact().getType() !\u003d Artifact.TypeEnum.DOCKER)) {\n+      throw new IllegalArgumentException(RestApiErrorMessages\n+          .ERROR_ABSENT_LAUNCH_COMMAND);\n     }\n+\n+    validateApplicationResource(comp.getResource(), comp);\n+\n+    if (comp.getNumberOfContainers() \u003d\u003d null\n+        || comp.getNumberOfContainers() \u003c 0) {\n+      throw new IllegalArgumentException(String.format(\n+          RestApiErrorMessages.ERROR_CONTAINERS_COUNT_FOR_COMP_INVALID\n+              + \": \" + comp.getNumberOfContainers(), comp.getName()));\n+    }\n+    compClientProvider.validateConfigFiles(comp.getConfiguration()\n+        .getFiles(), fs);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void validateComponent(Component comp, FileSystem fs)\n      throws IOException {\n    AbstractClientProvider compClientProvider \u003d SliderProviderFactory\n        .getClientProvider(comp.getArtifact());\n    compClientProvider.validateArtifact(comp.getArtifact(), fs);\n\n    if (comp.getLaunchCommand() \u003d\u003d null \u0026\u0026 (comp.getArtifact() \u003d\u003d null || comp\n        .getArtifact().getType() !\u003d Artifact.TypeEnum.DOCKER)) {\n      throw new IllegalArgumentException(RestApiErrorMessages\n          .ERROR_ABSENT_LAUNCH_COMMAND);\n    }\n\n    validateApplicationResource(comp.getResource(), comp);\n\n    if (comp.getNumberOfContainers() \u003d\u003d null\n        || comp.getNumberOfContainers() \u003c 0) {\n      throw new IllegalArgumentException(String.format(\n          RestApiErrorMessages.ERROR_CONTAINERS_COUNT_FOR_COMP_INVALID\n              + \": \" + comp.getNumberOfContainers(), comp.getName()));\n    }\n    compClientProvider.validateConfigFiles(comp.getConfiguration()\n        .getFiles(), fs);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/util/ServiceApiUtil.java",
          "extendedDetails": {
            "oldValue": "validateConfigFile",
            "newValue": "validateComponent"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6613. Update json validation for new native services providers. Contributed by Billie Rinaldi\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "a0574e7f4f5a6e53677ada4381db5504f263d70f",
          "commitAuthor": "Jian He",
          "commitDateOld": "06/11/17 1:28 PM",
          "commitNameOld": "845764da146e98927e8ea5b2209f19f4fc3feda5",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,23 @@\n-  private static void validateConfigFile(List\u003cConfigFile\u003e list, FileSystem fs)\n+  public static void validateComponent(Component comp, FileSystem fs)\n       throws IOException {\n-    Set\u003cString\u003e destFileSet \u003d new HashSet\u003c\u003e();\n+    AbstractClientProvider compClientProvider \u003d SliderProviderFactory\n+        .getClientProvider(comp.getArtifact());\n+    compClientProvider.validateArtifact(comp.getArtifact(), fs);\n \n-    for (ConfigFile file : list) {\n-      if (file.getType().equals(ConfigFile.TypeEnum.TEMPLATE) \u0026\u0026 StringUtils\n-          .isEmpty(file.getSrcFile())) {\n-        throw new IllegalArgumentException(\n-            \"Src_file is empty for \" + ConfigFile.TypeEnum.TEMPLATE);\n-\n-      }\n-      if (!StringUtils.isEmpty(file.getSrcFile())) {\n-        Path p \u003d new Path(file.getSrcFile());\n-        if (!fs.exists(p)) {\n-          throw new IllegalArgumentException(\n-              \"Src_file does not exist for config file: \" + file\n-                  .getSrcFile());\n-        }\n-      }\n-\n-      if (StringUtils.isEmpty(file.getDestFile())) {\n-        throw new IllegalArgumentException(\"Dest_file is empty.\");\n-      }\n-      // validate dest_file is absolute\n-      if (!Paths.get(file.getDestFile()).isAbsolute()) {\n-        throw new IllegalArgumentException(\n-            \"Dest_file must be absolute path: \" + file.getDestFile());\n-      }\n-\n-      if (destFileSet.contains(file.getDestFile())) {\n-        throw new IllegalArgumentException(\n-            \"Duplicated ConfigFile exists: \" + file.getDestFile());\n-      }\n-      destFileSet.add(file.getDestFile());\n+    if (comp.getLaunchCommand() \u003d\u003d null \u0026\u0026 (comp.getArtifact() \u003d\u003d null || comp\n+        .getArtifact().getType() !\u003d Artifact.TypeEnum.DOCKER)) {\n+      throw new IllegalArgumentException(RestApiErrorMessages\n+          .ERROR_ABSENT_LAUNCH_COMMAND);\n     }\n+\n+    validateApplicationResource(comp.getResource(), comp);\n+\n+    if (comp.getNumberOfContainers() \u003d\u003d null\n+        || comp.getNumberOfContainers() \u003c 0) {\n+      throw new IllegalArgumentException(String.format(\n+          RestApiErrorMessages.ERROR_CONTAINERS_COUNT_FOR_COMP_INVALID\n+              + \": \" + comp.getNumberOfContainers(), comp.getName()));\n+    }\n+    compClientProvider.validateConfigFiles(comp.getConfiguration()\n+        .getFiles(), fs);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void validateComponent(Component comp, FileSystem fs)\n      throws IOException {\n    AbstractClientProvider compClientProvider \u003d SliderProviderFactory\n        .getClientProvider(comp.getArtifact());\n    compClientProvider.validateArtifact(comp.getArtifact(), fs);\n\n    if (comp.getLaunchCommand() \u003d\u003d null \u0026\u0026 (comp.getArtifact() \u003d\u003d null || comp\n        .getArtifact().getType() !\u003d Artifact.TypeEnum.DOCKER)) {\n      throw new IllegalArgumentException(RestApiErrorMessages\n          .ERROR_ABSENT_LAUNCH_COMMAND);\n    }\n\n    validateApplicationResource(comp.getResource(), comp);\n\n    if (comp.getNumberOfContainers() \u003d\u003d null\n        || comp.getNumberOfContainers() \u003c 0) {\n      throw new IllegalArgumentException(String.format(\n          RestApiErrorMessages.ERROR_CONTAINERS_COUNT_FOR_COMP_INVALID\n              + \": \" + comp.getNumberOfContainers(), comp.getName()));\n    }\n    compClientProvider.validateConfigFiles(comp.getConfiguration()\n        .getFiles(), fs);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/util/ServiceApiUtil.java",
          "extendedDetails": {
            "oldValue": "[list-List\u003cConfigFile\u003e, fs-FileSystem]",
            "newValue": "[comp-Component, fs-FileSystem]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-6613. Update json validation for new native services providers. Contributed by Billie Rinaldi\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "a0574e7f4f5a6e53677ada4381db5504f263d70f",
          "commitAuthor": "Jian He",
          "commitDateOld": "06/11/17 1:28 PM",
          "commitNameOld": "845764da146e98927e8ea5b2209f19f4fc3feda5",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,23 @@\n-  private static void validateConfigFile(List\u003cConfigFile\u003e list, FileSystem fs)\n+  public static void validateComponent(Component comp, FileSystem fs)\n       throws IOException {\n-    Set\u003cString\u003e destFileSet \u003d new HashSet\u003c\u003e();\n+    AbstractClientProvider compClientProvider \u003d SliderProviderFactory\n+        .getClientProvider(comp.getArtifact());\n+    compClientProvider.validateArtifact(comp.getArtifact(), fs);\n \n-    for (ConfigFile file : list) {\n-      if (file.getType().equals(ConfigFile.TypeEnum.TEMPLATE) \u0026\u0026 StringUtils\n-          .isEmpty(file.getSrcFile())) {\n-        throw new IllegalArgumentException(\n-            \"Src_file is empty for \" + ConfigFile.TypeEnum.TEMPLATE);\n-\n-      }\n-      if (!StringUtils.isEmpty(file.getSrcFile())) {\n-        Path p \u003d new Path(file.getSrcFile());\n-        if (!fs.exists(p)) {\n-          throw new IllegalArgumentException(\n-              \"Src_file does not exist for config file: \" + file\n-                  .getSrcFile());\n-        }\n-      }\n-\n-      if (StringUtils.isEmpty(file.getDestFile())) {\n-        throw new IllegalArgumentException(\"Dest_file is empty.\");\n-      }\n-      // validate dest_file is absolute\n-      if (!Paths.get(file.getDestFile()).isAbsolute()) {\n-        throw new IllegalArgumentException(\n-            \"Dest_file must be absolute path: \" + file.getDestFile());\n-      }\n-\n-      if (destFileSet.contains(file.getDestFile())) {\n-        throw new IllegalArgumentException(\n-            \"Duplicated ConfigFile exists: \" + file.getDestFile());\n-      }\n-      destFileSet.add(file.getDestFile());\n+    if (comp.getLaunchCommand() \u003d\u003d null \u0026\u0026 (comp.getArtifact() \u003d\u003d null || comp\n+        .getArtifact().getType() !\u003d Artifact.TypeEnum.DOCKER)) {\n+      throw new IllegalArgumentException(RestApiErrorMessages\n+          .ERROR_ABSENT_LAUNCH_COMMAND);\n     }\n+\n+    validateApplicationResource(comp.getResource(), comp);\n+\n+    if (comp.getNumberOfContainers() \u003d\u003d null\n+        || comp.getNumberOfContainers() \u003c 0) {\n+      throw new IllegalArgumentException(String.format(\n+          RestApiErrorMessages.ERROR_CONTAINERS_COUNT_FOR_COMP_INVALID\n+              + \": \" + comp.getNumberOfContainers(), comp.getName()));\n+    }\n+    compClientProvider.validateConfigFiles(comp.getConfiguration()\n+        .getFiles(), fs);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void validateComponent(Component comp, FileSystem fs)\n      throws IOException {\n    AbstractClientProvider compClientProvider \u003d SliderProviderFactory\n        .getClientProvider(comp.getArtifact());\n    compClientProvider.validateArtifact(comp.getArtifact(), fs);\n\n    if (comp.getLaunchCommand() \u003d\u003d null \u0026\u0026 (comp.getArtifact() \u003d\u003d null || comp\n        .getArtifact().getType() !\u003d Artifact.TypeEnum.DOCKER)) {\n      throw new IllegalArgumentException(RestApiErrorMessages\n          .ERROR_ABSENT_LAUNCH_COMMAND);\n    }\n\n    validateApplicationResource(comp.getResource(), comp);\n\n    if (comp.getNumberOfContainers() \u003d\u003d null\n        || comp.getNumberOfContainers() \u003c 0) {\n      throw new IllegalArgumentException(String.format(\n          RestApiErrorMessages.ERROR_CONTAINERS_COUNT_FOR_COMP_INVALID\n              + \": \" + comp.getNumberOfContainers(), comp.getName()));\n    }\n    compClientProvider.validateConfigFiles(comp.getConfiguration()\n        .getFiles(), fs);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/util/ServiceApiUtil.java",
          "extendedDetails": {
            "oldValue": "[private, static]",
            "newValue": "[public, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6613. Update json validation for new native services providers. Contributed by Billie Rinaldi\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "a0574e7f4f5a6e53677ada4381db5504f263d70f",
          "commitAuthor": "Jian He",
          "commitDateOld": "06/11/17 1:28 PM",
          "commitNameOld": "845764da146e98927e8ea5b2209f19f4fc3feda5",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,23 @@\n-  private static void validateConfigFile(List\u003cConfigFile\u003e list, FileSystem fs)\n+  public static void validateComponent(Component comp, FileSystem fs)\n       throws IOException {\n-    Set\u003cString\u003e destFileSet \u003d new HashSet\u003c\u003e();\n+    AbstractClientProvider compClientProvider \u003d SliderProviderFactory\n+        .getClientProvider(comp.getArtifact());\n+    compClientProvider.validateArtifact(comp.getArtifact(), fs);\n \n-    for (ConfigFile file : list) {\n-      if (file.getType().equals(ConfigFile.TypeEnum.TEMPLATE) \u0026\u0026 StringUtils\n-          .isEmpty(file.getSrcFile())) {\n-        throw new IllegalArgumentException(\n-            \"Src_file is empty for \" + ConfigFile.TypeEnum.TEMPLATE);\n-\n-      }\n-      if (!StringUtils.isEmpty(file.getSrcFile())) {\n-        Path p \u003d new Path(file.getSrcFile());\n-        if (!fs.exists(p)) {\n-          throw new IllegalArgumentException(\n-              \"Src_file does not exist for config file: \" + file\n-                  .getSrcFile());\n-        }\n-      }\n-\n-      if (StringUtils.isEmpty(file.getDestFile())) {\n-        throw new IllegalArgumentException(\"Dest_file is empty.\");\n-      }\n-      // validate dest_file is absolute\n-      if (!Paths.get(file.getDestFile()).isAbsolute()) {\n-        throw new IllegalArgumentException(\n-            \"Dest_file must be absolute path: \" + file.getDestFile());\n-      }\n-\n-      if (destFileSet.contains(file.getDestFile())) {\n-        throw new IllegalArgumentException(\n-            \"Duplicated ConfigFile exists: \" + file.getDestFile());\n-      }\n-      destFileSet.add(file.getDestFile());\n+    if (comp.getLaunchCommand() \u003d\u003d null \u0026\u0026 (comp.getArtifact() \u003d\u003d null || comp\n+        .getArtifact().getType() !\u003d Artifact.TypeEnum.DOCKER)) {\n+      throw new IllegalArgumentException(RestApiErrorMessages\n+          .ERROR_ABSENT_LAUNCH_COMMAND);\n     }\n+\n+    validateApplicationResource(comp.getResource(), comp);\n+\n+    if (comp.getNumberOfContainers() \u003d\u003d null\n+        || comp.getNumberOfContainers() \u003c 0) {\n+      throw new IllegalArgumentException(String.format(\n+          RestApiErrorMessages.ERROR_CONTAINERS_COUNT_FOR_COMP_INVALID\n+              + \": \" + comp.getNumberOfContainers(), comp.getName()));\n+    }\n+    compClientProvider.validateConfigFiles(comp.getConfiguration()\n+        .getFiles(), fs);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void validateComponent(Component comp, FileSystem fs)\n      throws IOException {\n    AbstractClientProvider compClientProvider \u003d SliderProviderFactory\n        .getClientProvider(comp.getArtifact());\n    compClientProvider.validateArtifact(comp.getArtifact(), fs);\n\n    if (comp.getLaunchCommand() \u003d\u003d null \u0026\u0026 (comp.getArtifact() \u003d\u003d null || comp\n        .getArtifact().getType() !\u003d Artifact.TypeEnum.DOCKER)) {\n      throw new IllegalArgumentException(RestApiErrorMessages\n          .ERROR_ABSENT_LAUNCH_COMMAND);\n    }\n\n    validateApplicationResource(comp.getResource(), comp);\n\n    if (comp.getNumberOfContainers() \u003d\u003d null\n        || comp.getNumberOfContainers() \u003c 0) {\n      throw new IllegalArgumentException(String.format(\n          RestApiErrorMessages.ERROR_CONTAINERS_COUNT_FOR_COMP_INVALID\n              + \": \" + comp.getNumberOfContainers(), comp.getName()));\n    }\n    compClientProvider.validateConfigFiles(comp.getConfiguration()\n        .getFiles(), fs);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/util/ServiceApiUtil.java",
          "extendedDetails": {}
        }
      ]
    },
    "845764da146e98927e8ea5b2209f19f4fc3feda5": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6405. Improve configuring services through REST API. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:28 PM",
      "commitName": "845764da146e98927e8ea5b2209f19f4fc3feda5",
      "commitAuthor": "Billie Rinaldi",
      "diff": "@@ -0,0 +1,36 @@\n+  private static void validateConfigFile(List\u003cConfigFile\u003e list, FileSystem fs)\n+      throws IOException {\n+    Set\u003cString\u003e destFileSet \u003d new HashSet\u003c\u003e();\n+\n+    for (ConfigFile file : list) {\n+      if (file.getType().equals(ConfigFile.TypeEnum.TEMPLATE) \u0026\u0026 StringUtils\n+          .isEmpty(file.getSrcFile())) {\n+        throw new IllegalArgumentException(\n+            \"Src_file is empty for \" + ConfigFile.TypeEnum.TEMPLATE);\n+\n+      }\n+      if (!StringUtils.isEmpty(file.getSrcFile())) {\n+        Path p \u003d new Path(file.getSrcFile());\n+        if (!fs.exists(p)) {\n+          throw new IllegalArgumentException(\n+              \"Src_file does not exist for config file: \" + file\n+                  .getSrcFile());\n+        }\n+      }\n+\n+      if (StringUtils.isEmpty(file.getDestFile())) {\n+        throw new IllegalArgumentException(\"Dest_file is empty.\");\n+      }\n+      // validate dest_file is absolute\n+      if (!Paths.get(file.getDestFile()).isAbsolute()) {\n+        throw new IllegalArgumentException(\n+            \"Dest_file must be absolute path: \" + file.getDestFile());\n+      }\n+\n+      if (destFileSet.contains(file.getDestFile())) {\n+        throw new IllegalArgumentException(\n+            \"Duplicated ConfigFile exists: \" + file.getDestFile());\n+      }\n+      destFileSet.add(file.getDestFile());\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static void validateConfigFile(List\u003cConfigFile\u003e list, FileSystem fs)\n      throws IOException {\n    Set\u003cString\u003e destFileSet \u003d new HashSet\u003c\u003e();\n\n    for (ConfigFile file : list) {\n      if (file.getType().equals(ConfigFile.TypeEnum.TEMPLATE) \u0026\u0026 StringUtils\n          .isEmpty(file.getSrcFile())) {\n        throw new IllegalArgumentException(\n            \"Src_file is empty for \" + ConfigFile.TypeEnum.TEMPLATE);\n\n      }\n      if (!StringUtils.isEmpty(file.getSrcFile())) {\n        Path p \u003d new Path(file.getSrcFile());\n        if (!fs.exists(p)) {\n          throw new IllegalArgumentException(\n              \"Src_file does not exist for config file: \" + file\n                  .getSrcFile());\n        }\n      }\n\n      if (StringUtils.isEmpty(file.getDestFile())) {\n        throw new IllegalArgumentException(\"Dest_file is empty.\");\n      }\n      // validate dest_file is absolute\n      if (!Paths.get(file.getDestFile()).isAbsolute()) {\n        throw new IllegalArgumentException(\n            \"Dest_file must be absolute path: \" + file.getDestFile());\n      }\n\n      if (destFileSet.contains(file.getDestFile())) {\n        throw new IllegalArgumentException(\n            \"Duplicated ConfigFile exists: \" + file.getDestFile());\n      }\n      destFileSet.add(file.getDestFile());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/util/ServiceApiUtil.java"
    }
  }
}