{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DAGAMSimulator.java",
  "functionName": "processResponseQueue",
  "functionId": "processResponseQueue",
  "sourceFilePath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/appmaster/DAGAMSimulator.java",
  "functionStartLine": 136,
  "functionEndLine": 196,
  "numCommitsSeen": 2,
  "timeTaken": 578,
  "changeHistory": [
    "16576fde8e3697025e1d37a4c21f8ad904208f8e"
  ],
  "changeHistoryShort": {
    "16576fde8e3697025e1d37a4c21f8ad904208f8e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "16576fde8e3697025e1d37a4c21f8ad904208f8e": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9754. Add support for arbitrary DAG AM Simulator. Contributed by Abhishek Modi.\n",
      "commitDate": "28/08/19 11:13 PM",
      "commitName": "16576fde8e3697025e1d37a4c21f8ad904208f8e",
      "commitAuthor": "Abhishek Modi",
      "diff": "@@ -0,0 +1,61 @@\n+  protected void processResponseQueue() throws Exception {\n+    while (!responseQueue.isEmpty()) {\n+      AllocateResponse response \u003d responseQueue.take();\n+\n+      // check completed containers\n+      if (!response.getCompletedContainersStatuses().isEmpty()) {\n+        for (ContainerStatus cs : response.getCompletedContainersStatuses()) {\n+          ContainerId containerId \u003d cs.getContainerId();\n+          if (cs.getExitStatus() \u003d\u003d ContainerExitStatus.SUCCESS) {\n+            if (assignedContainers.containsKey(containerId)) {\n+              LOG.debug(\"Application {} has one container finished ({}).\",\n+                  appId, containerId);\n+              ContainerSimulator containerSimulator \u003d\n+                  assignedContainers.remove(containerId);\n+              finishedContainers++;\n+              completedContainers.add(containerSimulator);\n+            } else if (amContainer.getId().equals(containerId)) {\n+              // am container released event\n+              isFinished \u003d true;\n+              LOG.info(\"Application {} goes to finish.\", appId);\n+            }\n+            if (finishedContainers \u003e\u003d totalContainers) {\n+              lastStep();\n+            }\n+          } else {\n+            // container to be killed\n+            if (assignedContainers.containsKey(containerId)) {\n+              LOG.error(\"Application {} has one container killed ({}).\", appId,\n+                  containerId);\n+              pendingContainers.add(assignedContainers.remove(containerId));\n+            } else if (amContainer.getId().equals(containerId)) {\n+              LOG.error(\"Application {}\u0027s AM is \"\n+                  + \"going to be killed. Waiting for rescheduling...\", appId);\n+            }\n+          }\n+        }\n+      }\n+\n+      // check finished\n+      if (isAMContainerRunning \u0026\u0026\n+          (finishedContainers \u003e\u003d totalContainers)) {\n+        isAMContainerRunning \u003d false;\n+        LOG.info(\"Application {} sends out event to clean up\"\n+            + \" its AM container.\", appId);\n+        isFinished \u003d true;\n+        break;\n+      }\n+\n+      // check allocated containers\n+      for (Container container : response.getAllocatedContainers()) {\n+        if (!scheduledContainers.isEmpty()) {\n+          ContainerSimulator cs \u003d scheduledContainers.remove(0);\n+          LOG.debug(\"Application {} starts to launch a container ({}).\",\n+              appId, container.getId());\n+          assignedContainers.put(container.getId(), cs);\n+          se.getNmMap().get(container.getNodeId())\n+              .addNewContainer(container, cs.getLifeTime());\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void processResponseQueue() throws Exception {\n    while (!responseQueue.isEmpty()) {\n      AllocateResponse response \u003d responseQueue.take();\n\n      // check completed containers\n      if (!response.getCompletedContainersStatuses().isEmpty()) {\n        for (ContainerStatus cs : response.getCompletedContainersStatuses()) {\n          ContainerId containerId \u003d cs.getContainerId();\n          if (cs.getExitStatus() \u003d\u003d ContainerExitStatus.SUCCESS) {\n            if (assignedContainers.containsKey(containerId)) {\n              LOG.debug(\"Application {} has one container finished ({}).\",\n                  appId, containerId);\n              ContainerSimulator containerSimulator \u003d\n                  assignedContainers.remove(containerId);\n              finishedContainers++;\n              completedContainers.add(containerSimulator);\n            } else if (amContainer.getId().equals(containerId)) {\n              // am container released event\n              isFinished \u003d true;\n              LOG.info(\"Application {} goes to finish.\", appId);\n            }\n            if (finishedContainers \u003e\u003d totalContainers) {\n              lastStep();\n            }\n          } else {\n            // container to be killed\n            if (assignedContainers.containsKey(containerId)) {\n              LOG.error(\"Application {} has one container killed ({}).\", appId,\n                  containerId);\n              pendingContainers.add(assignedContainers.remove(containerId));\n            } else if (amContainer.getId().equals(containerId)) {\n              LOG.error(\"Application {}\u0027s AM is \"\n                  + \"going to be killed. Waiting for rescheduling...\", appId);\n            }\n          }\n        }\n      }\n\n      // check finished\n      if (isAMContainerRunning \u0026\u0026\n          (finishedContainers \u003e\u003d totalContainers)) {\n        isAMContainerRunning \u003d false;\n        LOG.info(\"Application {} sends out event to clean up\"\n            + \" its AM container.\", appId);\n        isFinished \u003d true;\n        break;\n      }\n\n      // check allocated containers\n      for (Container container : response.getAllocatedContainers()) {\n        if (!scheduledContainers.isEmpty()) {\n          ContainerSimulator cs \u003d scheduledContainers.remove(0);\n          LOG.debug(\"Application {} starts to launch a container ({}).\",\n              appId, container.getId());\n          assignedContainers.put(container.getId(), cs);\n          se.getNmMap().get(container.getNodeId())\n              .addNewContainer(container, cs.getLifeTime());\n        }\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/appmaster/DAGAMSimulator.java"
    }
  }
}