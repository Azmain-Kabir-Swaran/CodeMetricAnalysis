{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMTimelineCollectorManager.java",
  "functionName": "doPostPut",
  "functionId": "doPostPut___appId-ApplicationId__collector-TimelineCollector",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/timelineservice/RMTimelineCollectorManager.java",
  "functionStartLine": 52,
  "functionEndLine": 97,
  "numCommitsSeen": 14,
  "timeTaken": 3372,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "e3153284288d6cfa7a28511dfefe1c8a7d6b4eda",
    "a1b6d7456fa37b7b418dd08178ea73ed5c1de124",
    "a3cf40e532d17b176663bb99248ed159aae6a9ed",
    "960af7d4717b8a8949d0b2e43949e7daab45aa88",
    "22e7ae57715cedb1dcba736e357e8daaf5133e5c",
    "dc1f306fdc83749f9675b89326e26c73b9ff8f86",
    "11e8905d8daf129afb6fe2e5a0eca11bcb1719c8"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "e3153284288d6cfa7a28511dfefe1c8a7d6b4eda": "Ybodychange",
    "a1b6d7456fa37b7b418dd08178ea73ed5c1de124": "Ymultichange(Yrename,Ymodifierchange)",
    "a3cf40e532d17b176663bb99248ed159aae6a9ed": "Ybodychange",
    "960af7d4717b8a8949d0b2e43949e7daab45aa88": "Ybodychange",
    "22e7ae57715cedb1dcba736e357e8daaf5133e5c": "Ybodychange",
    "dc1f306fdc83749f9675b89326e26c73b9ff8f86": "Ybodychange",
    "11e8905d8daf129afb6fe2e5a0eca11bcb1719c8": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 10.76,
      "commitsBetweenForRepo": 108,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,46 @@\n   protected void doPostPut(ApplicationId appId, TimelineCollector collector) {\n     RMApp app \u003d rm.getRMContext().getRMApps().get(appId);\n     if (app \u003d\u003d null) {\n       throw new YarnRuntimeException(\n           \"Unable to get the timeline collector context info for a \" +\n           \"non-existing app \" + appId);\n     }\n     String userId \u003d app.getUser();\n     TimelineCollectorContext context \u003d collector.getTimelineEntityContext();\n     if (userId !\u003d null \u0026\u0026 !userId.isEmpty()) {\n       context.setUserId(userId);\n     }\n \n     // initialize the flow in the environment with default values for those\n     // that do not specify the flow tags\n     // flow name: app name (or app id if app name is missing),\n     // flow version: \"1\", flow run id: start time\n     context.setFlowName(TimelineUtils.generateDefaultFlowName(\n         app.getName(), appId));\n     context.setFlowVersion(TimelineUtils.DEFAULT_FLOW_VERSION);\n     context.setFlowRunId(app.getStartTime());\n \n     // the flow context is received via the application tags\n     for (String tag : app.getApplicationTags()) {\n       String[] parts \u003d tag.split(\":\", 2);\n       if (parts.length !\u003d 2 || parts[1].isEmpty()) {\n         continue;\n       }\n       switch (parts[0].toUpperCase()) {\n       case TimelineUtils.FLOW_NAME_TAG_PREFIX:\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Setting the flow name: \" + parts[1]);\n-        }\n+        LOG.debug(\"Setting the flow name: {}\", parts[1]);\n         context.setFlowName(parts[1]);\n         break;\n       case TimelineUtils.FLOW_VERSION_TAG_PREFIX:\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Setting the flow version: \" + parts[1]);\n-        }\n+        LOG.debug(\"Setting the flow version: {}\", parts[1]);\n         context.setFlowVersion(parts[1]);\n         break;\n       case TimelineUtils.FLOW_RUN_ID_TAG_PREFIX:\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Setting the flow run id: \" + parts[1]);\n-        }\n+        LOG.debug(\"Setting the flow run id: {}\", parts[1]);\n         context.setFlowRunId(Long.parseLong(parts[1]));\n         break;\n       default:\n         break;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void doPostPut(ApplicationId appId, TimelineCollector collector) {\n    RMApp app \u003d rm.getRMContext().getRMApps().get(appId);\n    if (app \u003d\u003d null) {\n      throw new YarnRuntimeException(\n          \"Unable to get the timeline collector context info for a \" +\n          \"non-existing app \" + appId);\n    }\n    String userId \u003d app.getUser();\n    TimelineCollectorContext context \u003d collector.getTimelineEntityContext();\n    if (userId !\u003d null \u0026\u0026 !userId.isEmpty()) {\n      context.setUserId(userId);\n    }\n\n    // initialize the flow in the environment with default values for those\n    // that do not specify the flow tags\n    // flow name: app name (or app id if app name is missing),\n    // flow version: \"1\", flow run id: start time\n    context.setFlowName(TimelineUtils.generateDefaultFlowName(\n        app.getName(), appId));\n    context.setFlowVersion(TimelineUtils.DEFAULT_FLOW_VERSION);\n    context.setFlowRunId(app.getStartTime());\n\n    // the flow context is received via the application tags\n    for (String tag : app.getApplicationTags()) {\n      String[] parts \u003d tag.split(\":\", 2);\n      if (parts.length !\u003d 2 || parts[1].isEmpty()) {\n        continue;\n      }\n      switch (parts[0].toUpperCase()) {\n      case TimelineUtils.FLOW_NAME_TAG_PREFIX:\n        LOG.debug(\"Setting the flow name: {}\", parts[1]);\n        context.setFlowName(parts[1]);\n        break;\n      case TimelineUtils.FLOW_VERSION_TAG_PREFIX:\n        LOG.debug(\"Setting the flow version: {}\", parts[1]);\n        context.setFlowVersion(parts[1]);\n        break;\n      case TimelineUtils.FLOW_RUN_ID_TAG_PREFIX:\n        LOG.debug(\"Setting the flow run id: {}\", parts[1]);\n        context.setFlowRunId(Long.parseLong(parts[1]));\n        break;\n      default:\n        break;\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/timelineservice/RMTimelineCollectorManager.java",
      "extendedDetails": {}
    },
    "e3153284288d6cfa7a28511dfefe1c8a7d6b4eda": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6102. RMActiveService context to be updated with new RMContext on failover. Contributed by Rohith Sharma K S.\n",
      "commitDate": "23/07/17 11:09 PM",
      "commitName": "e3153284288d6cfa7a28511dfefe1c8a7d6b4eda",
      "commitAuthor": "Sunil G",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "a1b6d7456fa37b7b418dd08178ea73ed5c1de124",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 378.6,
      "commitsBetweenForRepo": 2269,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,52 @@\n   protected void doPostPut(ApplicationId appId, TimelineCollector collector) {\n-    RMApp app \u003d rmContext.getRMApps().get(appId);\n+    RMApp app \u003d rm.getRMContext().getRMApps().get(appId);\n     if (app \u003d\u003d null) {\n       throw new YarnRuntimeException(\n           \"Unable to get the timeline collector context info for a \" +\n           \"non-existing app \" + appId);\n     }\n     String userId \u003d app.getUser();\n     TimelineCollectorContext context \u003d collector.getTimelineEntityContext();\n     if (userId !\u003d null \u0026\u0026 !userId.isEmpty()) {\n       context.setUserId(userId);\n     }\n \n     // initialize the flow in the environment with default values for those\n     // that do not specify the flow tags\n     // flow name: app name (or app id if app name is missing),\n     // flow version: \"1\", flow run id: start time\n     context.setFlowName(TimelineUtils.generateDefaultFlowName(\n         app.getName(), appId));\n     context.setFlowVersion(TimelineUtils.DEFAULT_FLOW_VERSION);\n     context.setFlowRunId(app.getStartTime());\n \n     // the flow context is received via the application tags\n     for (String tag : app.getApplicationTags()) {\n       String[] parts \u003d tag.split(\":\", 2);\n       if (parts.length !\u003d 2 || parts[1].isEmpty()) {\n         continue;\n       }\n       switch (parts[0].toUpperCase()) {\n       case TimelineUtils.FLOW_NAME_TAG_PREFIX:\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Setting the flow name: \" + parts[1]);\n         }\n         context.setFlowName(parts[1]);\n         break;\n       case TimelineUtils.FLOW_VERSION_TAG_PREFIX:\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Setting the flow version: \" + parts[1]);\n         }\n         context.setFlowVersion(parts[1]);\n         break;\n       case TimelineUtils.FLOW_RUN_ID_TAG_PREFIX:\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Setting the flow run id: \" + parts[1]);\n         }\n         context.setFlowRunId(Long.parseLong(parts[1]));\n         break;\n       default:\n         break;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void doPostPut(ApplicationId appId, TimelineCollector collector) {\n    RMApp app \u003d rm.getRMContext().getRMApps().get(appId);\n    if (app \u003d\u003d null) {\n      throw new YarnRuntimeException(\n          \"Unable to get the timeline collector context info for a \" +\n          \"non-existing app \" + appId);\n    }\n    String userId \u003d app.getUser();\n    TimelineCollectorContext context \u003d collector.getTimelineEntityContext();\n    if (userId !\u003d null \u0026\u0026 !userId.isEmpty()) {\n      context.setUserId(userId);\n    }\n\n    // initialize the flow in the environment with default values for those\n    // that do not specify the flow tags\n    // flow name: app name (or app id if app name is missing),\n    // flow version: \"1\", flow run id: start time\n    context.setFlowName(TimelineUtils.generateDefaultFlowName(\n        app.getName(), appId));\n    context.setFlowVersion(TimelineUtils.DEFAULT_FLOW_VERSION);\n    context.setFlowRunId(app.getStartTime());\n\n    // the flow context is received via the application tags\n    for (String tag : app.getApplicationTags()) {\n      String[] parts \u003d tag.split(\":\", 2);\n      if (parts.length !\u003d 2 || parts[1].isEmpty()) {\n        continue;\n      }\n      switch (parts[0].toUpperCase()) {\n      case TimelineUtils.FLOW_NAME_TAG_PREFIX:\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Setting the flow name: \" + parts[1]);\n        }\n        context.setFlowName(parts[1]);\n        break;\n      case TimelineUtils.FLOW_VERSION_TAG_PREFIX:\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Setting the flow version: \" + parts[1]);\n        }\n        context.setFlowVersion(parts[1]);\n        break;\n      case TimelineUtils.FLOW_RUN_ID_TAG_PREFIX:\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Setting the flow run id: \" + parts[1]);\n        }\n        context.setFlowRunId(Long.parseLong(parts[1]));\n        break;\n      default:\n        break;\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/timelineservice/RMTimelineCollectorManager.java",
      "extendedDetails": {}
    },
    "a1b6d7456fa37b7b418dd08178ea73ed5c1de124": {
      "type": "Ymultichange(Yrename,Ymodifierchange)",
      "commitMessage": "YARN-5018. Online aggregation logic should not run immediately after collectors got started (Li Lu via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "a1b6d7456fa37b7b418dd08178ea73ed5c1de124",
      "commitAuthor": "Sangjin Lee",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-5018. Online aggregation logic should not run immediately after collectors got started (Li Lu via sjlee)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "a1b6d7456fa37b7b418dd08178ea73ed5c1de124",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "a3cf40e532d17b176663bb99248ed159aae6a9ed",
          "commitAuthorOld": "Varun Saxena",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 15,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,52 +1,52 @@\n-  public void postPut(ApplicationId appId, TimelineCollector collector) {\n+  protected void doPostPut(ApplicationId appId, TimelineCollector collector) {\n     RMApp app \u003d rmContext.getRMApps().get(appId);\n     if (app \u003d\u003d null) {\n       throw new YarnRuntimeException(\n           \"Unable to get the timeline collector context info for a \" +\n           \"non-existing app \" + appId);\n     }\n     String userId \u003d app.getUser();\n     TimelineCollectorContext context \u003d collector.getTimelineEntityContext();\n     if (userId !\u003d null \u0026\u0026 !userId.isEmpty()) {\n       context.setUserId(userId);\n     }\n \n     // initialize the flow in the environment with default values for those\n     // that do not specify the flow tags\n     // flow name: app name (or app id if app name is missing),\n     // flow version: \"1\", flow run id: start time\n     context.setFlowName(TimelineUtils.generateDefaultFlowName(\n         app.getName(), appId));\n     context.setFlowVersion(TimelineUtils.DEFAULT_FLOW_VERSION);\n     context.setFlowRunId(app.getStartTime());\n \n     // the flow context is received via the application tags\n     for (String tag : app.getApplicationTags()) {\n       String[] parts \u003d tag.split(\":\", 2);\n       if (parts.length !\u003d 2 || parts[1].isEmpty()) {\n         continue;\n       }\n       switch (parts[0].toUpperCase()) {\n       case TimelineUtils.FLOW_NAME_TAG_PREFIX:\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Setting the flow name: \" + parts[1]);\n         }\n         context.setFlowName(parts[1]);\n         break;\n       case TimelineUtils.FLOW_VERSION_TAG_PREFIX:\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Setting the flow version: \" + parts[1]);\n         }\n         context.setFlowVersion(parts[1]);\n         break;\n       case TimelineUtils.FLOW_RUN_ID_TAG_PREFIX:\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Setting the flow run id: \" + parts[1]);\n         }\n         context.setFlowRunId(Long.parseLong(parts[1]));\n         break;\n       default:\n         break;\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void doPostPut(ApplicationId appId, TimelineCollector collector) {\n    RMApp app \u003d rmContext.getRMApps().get(appId);\n    if (app \u003d\u003d null) {\n      throw new YarnRuntimeException(\n          \"Unable to get the timeline collector context info for a \" +\n          \"non-existing app \" + appId);\n    }\n    String userId \u003d app.getUser();\n    TimelineCollectorContext context \u003d collector.getTimelineEntityContext();\n    if (userId !\u003d null \u0026\u0026 !userId.isEmpty()) {\n      context.setUserId(userId);\n    }\n\n    // initialize the flow in the environment with default values for those\n    // that do not specify the flow tags\n    // flow name: app name (or app id if app name is missing),\n    // flow version: \"1\", flow run id: start time\n    context.setFlowName(TimelineUtils.generateDefaultFlowName(\n        app.getName(), appId));\n    context.setFlowVersion(TimelineUtils.DEFAULT_FLOW_VERSION);\n    context.setFlowRunId(app.getStartTime());\n\n    // the flow context is received via the application tags\n    for (String tag : app.getApplicationTags()) {\n      String[] parts \u003d tag.split(\":\", 2);\n      if (parts.length !\u003d 2 || parts[1].isEmpty()) {\n        continue;\n      }\n      switch (parts[0].toUpperCase()) {\n      case TimelineUtils.FLOW_NAME_TAG_PREFIX:\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Setting the flow name: \" + parts[1]);\n        }\n        context.setFlowName(parts[1]);\n        break;\n      case TimelineUtils.FLOW_VERSION_TAG_PREFIX:\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Setting the flow version: \" + parts[1]);\n        }\n        context.setFlowVersion(parts[1]);\n        break;\n      case TimelineUtils.FLOW_RUN_ID_TAG_PREFIX:\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Setting the flow run id: \" + parts[1]);\n        }\n        context.setFlowRunId(Long.parseLong(parts[1]));\n        break;\n      default:\n        break;\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/timelineservice/RMTimelineCollectorManager.java",
          "extendedDetails": {
            "oldValue": "postPut",
            "newValue": "doPostPut"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-5018. Online aggregation logic should not run immediately after collectors got started (Li Lu via sjlee)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "a1b6d7456fa37b7b418dd08178ea73ed5c1de124",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "a3cf40e532d17b176663bb99248ed159aae6a9ed",
          "commitAuthorOld": "Varun Saxena",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 15,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,52 +1,52 @@\n-  public void postPut(ApplicationId appId, TimelineCollector collector) {\n+  protected void doPostPut(ApplicationId appId, TimelineCollector collector) {\n     RMApp app \u003d rmContext.getRMApps().get(appId);\n     if (app \u003d\u003d null) {\n       throw new YarnRuntimeException(\n           \"Unable to get the timeline collector context info for a \" +\n           \"non-existing app \" + appId);\n     }\n     String userId \u003d app.getUser();\n     TimelineCollectorContext context \u003d collector.getTimelineEntityContext();\n     if (userId !\u003d null \u0026\u0026 !userId.isEmpty()) {\n       context.setUserId(userId);\n     }\n \n     // initialize the flow in the environment with default values for those\n     // that do not specify the flow tags\n     // flow name: app name (or app id if app name is missing),\n     // flow version: \"1\", flow run id: start time\n     context.setFlowName(TimelineUtils.generateDefaultFlowName(\n         app.getName(), appId));\n     context.setFlowVersion(TimelineUtils.DEFAULT_FLOW_VERSION);\n     context.setFlowRunId(app.getStartTime());\n \n     // the flow context is received via the application tags\n     for (String tag : app.getApplicationTags()) {\n       String[] parts \u003d tag.split(\":\", 2);\n       if (parts.length !\u003d 2 || parts[1].isEmpty()) {\n         continue;\n       }\n       switch (parts[0].toUpperCase()) {\n       case TimelineUtils.FLOW_NAME_TAG_PREFIX:\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Setting the flow name: \" + parts[1]);\n         }\n         context.setFlowName(parts[1]);\n         break;\n       case TimelineUtils.FLOW_VERSION_TAG_PREFIX:\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Setting the flow version: \" + parts[1]);\n         }\n         context.setFlowVersion(parts[1]);\n         break;\n       case TimelineUtils.FLOW_RUN_ID_TAG_PREFIX:\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Setting the flow run id: \" + parts[1]);\n         }\n         context.setFlowRunId(Long.parseLong(parts[1]));\n         break;\n       default:\n         break;\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void doPostPut(ApplicationId appId, TimelineCollector collector) {\n    RMApp app \u003d rmContext.getRMApps().get(appId);\n    if (app \u003d\u003d null) {\n      throw new YarnRuntimeException(\n          \"Unable to get the timeline collector context info for a \" +\n          \"non-existing app \" + appId);\n    }\n    String userId \u003d app.getUser();\n    TimelineCollectorContext context \u003d collector.getTimelineEntityContext();\n    if (userId !\u003d null \u0026\u0026 !userId.isEmpty()) {\n      context.setUserId(userId);\n    }\n\n    // initialize the flow in the environment with default values for those\n    // that do not specify the flow tags\n    // flow name: app name (or app id if app name is missing),\n    // flow version: \"1\", flow run id: start time\n    context.setFlowName(TimelineUtils.generateDefaultFlowName(\n        app.getName(), appId));\n    context.setFlowVersion(TimelineUtils.DEFAULT_FLOW_VERSION);\n    context.setFlowRunId(app.getStartTime());\n\n    // the flow context is received via the application tags\n    for (String tag : app.getApplicationTags()) {\n      String[] parts \u003d tag.split(\":\", 2);\n      if (parts.length !\u003d 2 || parts[1].isEmpty()) {\n        continue;\n      }\n      switch (parts[0].toUpperCase()) {\n      case TimelineUtils.FLOW_NAME_TAG_PREFIX:\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Setting the flow name: \" + parts[1]);\n        }\n        context.setFlowName(parts[1]);\n        break;\n      case TimelineUtils.FLOW_VERSION_TAG_PREFIX:\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Setting the flow version: \" + parts[1]);\n        }\n        context.setFlowVersion(parts[1]);\n        break;\n      case TimelineUtils.FLOW_RUN_ID_TAG_PREFIX:\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Setting the flow run id: \" + parts[1]);\n        }\n        context.setFlowRunId(Long.parseLong(parts[1]));\n        break;\n      default:\n        break;\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/timelineservice/RMTimelineCollectorManager.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[protected]"
          }
        }
      ]
    },
    "a3cf40e532d17b176663bb99248ed159aae6a9ed": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3461. Consolidate flow name/version/run defaults. (Sangjin Lee via Varun Saxena)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "a3cf40e532d17b176663bb99248ed159aae6a9ed",
      "commitAuthor": "Varun Saxena",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "960af7d4717b8a8949d0b2e43949e7daab45aa88",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,52 @@\n   public void postPut(ApplicationId appId, TimelineCollector collector) {\n     RMApp app \u003d rmContext.getRMApps().get(appId);\n     if (app \u003d\u003d null) {\n       throw new YarnRuntimeException(\n           \"Unable to get the timeline collector context info for a \" +\n           \"non-existing app \" + appId);\n     }\n     String userId \u003d app.getUser();\n+    TimelineCollectorContext context \u003d collector.getTimelineEntityContext();\n     if (userId !\u003d null \u0026\u0026 !userId.isEmpty()) {\n-      collector.getTimelineEntityContext().setUserId(userId);\n+      context.setUserId(userId);\n     }\n+\n+    // initialize the flow in the environment with default values for those\n+    // that do not specify the flow tags\n+    // flow name: app name (or app id if app name is missing),\n+    // flow version: \"1\", flow run id: start time\n+    context.setFlowName(TimelineUtils.generateDefaultFlowName(\n+        app.getName(), appId));\n+    context.setFlowVersion(TimelineUtils.DEFAULT_FLOW_VERSION);\n+    context.setFlowRunId(app.getStartTime());\n+\n+    // the flow context is received via the application tags\n     for (String tag : app.getApplicationTags()) {\n       String[] parts \u003d tag.split(\":\", 2);\n       if (parts.length !\u003d 2 || parts[1].isEmpty()) {\n         continue;\n       }\n       switch (parts[0].toUpperCase()) {\n       case TimelineUtils.FLOW_NAME_TAG_PREFIX:\n-        collector.getTimelineEntityContext().setFlowName(parts[1]);\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Setting the flow name: \" + parts[1]);\n+        }\n+        context.setFlowName(parts[1]);\n         break;\n       case TimelineUtils.FLOW_VERSION_TAG_PREFIX:\n-        collector.getTimelineEntityContext().setFlowVersion(parts[1]);\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Setting the flow version: \" + parts[1]);\n+        }\n+        context.setFlowVersion(parts[1]);\n         break;\n       case TimelineUtils.FLOW_RUN_ID_TAG_PREFIX:\n-        collector.getTimelineEntityContext().setFlowRunId(\n-            Long.parseLong(parts[1]));\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Setting the flow run id: \" + parts[1]);\n+        }\n+        context.setFlowRunId(Long.parseLong(parts[1]));\n         break;\n       default:\n         break;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void postPut(ApplicationId appId, TimelineCollector collector) {\n    RMApp app \u003d rmContext.getRMApps().get(appId);\n    if (app \u003d\u003d null) {\n      throw new YarnRuntimeException(\n          \"Unable to get the timeline collector context info for a \" +\n          \"non-existing app \" + appId);\n    }\n    String userId \u003d app.getUser();\n    TimelineCollectorContext context \u003d collector.getTimelineEntityContext();\n    if (userId !\u003d null \u0026\u0026 !userId.isEmpty()) {\n      context.setUserId(userId);\n    }\n\n    // initialize the flow in the environment with default values for those\n    // that do not specify the flow tags\n    // flow name: app name (or app id if app name is missing),\n    // flow version: \"1\", flow run id: start time\n    context.setFlowName(TimelineUtils.generateDefaultFlowName(\n        app.getName(), appId));\n    context.setFlowVersion(TimelineUtils.DEFAULT_FLOW_VERSION);\n    context.setFlowRunId(app.getStartTime());\n\n    // the flow context is received via the application tags\n    for (String tag : app.getApplicationTags()) {\n      String[] parts \u003d tag.split(\":\", 2);\n      if (parts.length !\u003d 2 || parts[1].isEmpty()) {\n        continue;\n      }\n      switch (parts[0].toUpperCase()) {\n      case TimelineUtils.FLOW_NAME_TAG_PREFIX:\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Setting the flow name: \" + parts[1]);\n        }\n        context.setFlowName(parts[1]);\n        break;\n      case TimelineUtils.FLOW_VERSION_TAG_PREFIX:\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Setting the flow version: \" + parts[1]);\n        }\n        context.setFlowVersion(parts[1]);\n        break;\n      case TimelineUtils.FLOW_RUN_ID_TAG_PREFIX:\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Setting the flow run id: \" + parts[1]);\n        }\n        context.setFlowRunId(Long.parseLong(parts[1]));\n        break;\n      default:\n        break;\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/timelineservice/RMTimelineCollectorManager.java",
      "extendedDetails": {}
    },
    "960af7d4717b8a8949d0b2e43949e7daab45aa88": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4409. Fix javadoc and checkstyle issues in timelineservice code (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "960af7d4717b8a8949d0b2e43949e7daab45aa88",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "22e7ae57715cedb1dcba736e357e8daaf5133e5c",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 49,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   public void postPut(ApplicationId appId, TimelineCollector collector) {\n     RMApp app \u003d rmContext.getRMApps().get(appId);\n     if (app \u003d\u003d null) {\n       throw new YarnRuntimeException(\n-          \"Unable to get the timeline collector context info for a non-existing app \" +\n-              appId);\n+          \"Unable to get the timeline collector context info for a \" +\n+          \"non-existing app \" + appId);\n     }\n     String userId \u003d app.getUser();\n     if (userId !\u003d null \u0026\u0026 !userId.isEmpty()) {\n       collector.getTimelineEntityContext().setUserId(userId);\n     }\n     for (String tag : app.getApplicationTags()) {\n       String[] parts \u003d tag.split(\":\", 2);\n       if (parts.length !\u003d 2 || parts[1].isEmpty()) {\n         continue;\n       }\n       switch (parts[0].toUpperCase()) {\n-        case TimelineUtils.FLOW_NAME_TAG_PREFIX:\n-          collector.getTimelineEntityContext().setFlowName(parts[1]);\n-          break;\n-        case TimelineUtils.FLOW_VERSION_TAG_PREFIX:\n-          collector.getTimelineEntityContext().setFlowVersion(parts[1]);\n-          break;\n-        case TimelineUtils.FLOW_RUN_ID_TAG_PREFIX:\n-          collector.getTimelineEntityContext().setFlowRunId(\n-              Long.parseLong(parts[1]));\n-          break;\n-        default:\n-          break;\n+      case TimelineUtils.FLOW_NAME_TAG_PREFIX:\n+        collector.getTimelineEntityContext().setFlowName(parts[1]);\n+        break;\n+      case TimelineUtils.FLOW_VERSION_TAG_PREFIX:\n+        collector.getTimelineEntityContext().setFlowVersion(parts[1]);\n+        break;\n+      case TimelineUtils.FLOW_RUN_ID_TAG_PREFIX:\n+        collector.getTimelineEntityContext().setFlowRunId(\n+            Long.parseLong(parts[1]));\n+        break;\n+      default:\n+        break;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void postPut(ApplicationId appId, TimelineCollector collector) {\n    RMApp app \u003d rmContext.getRMApps().get(appId);\n    if (app \u003d\u003d null) {\n      throw new YarnRuntimeException(\n          \"Unable to get the timeline collector context info for a \" +\n          \"non-existing app \" + appId);\n    }\n    String userId \u003d app.getUser();\n    if (userId !\u003d null \u0026\u0026 !userId.isEmpty()) {\n      collector.getTimelineEntityContext().setUserId(userId);\n    }\n    for (String tag : app.getApplicationTags()) {\n      String[] parts \u003d tag.split(\":\", 2);\n      if (parts.length !\u003d 2 || parts[1].isEmpty()) {\n        continue;\n      }\n      switch (parts[0].toUpperCase()) {\n      case TimelineUtils.FLOW_NAME_TAG_PREFIX:\n        collector.getTimelineEntityContext().setFlowName(parts[1]);\n        break;\n      case TimelineUtils.FLOW_VERSION_TAG_PREFIX:\n        collector.getTimelineEntityContext().setFlowVersion(parts[1]);\n        break;\n      case TimelineUtils.FLOW_RUN_ID_TAG_PREFIX:\n        collector.getTimelineEntityContext().setFlowRunId(\n            Long.parseLong(parts[1]));\n        break;\n      default:\n        break;\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/timelineservice/RMTimelineCollectorManager.java",
      "extendedDetails": {}
    },
    "22e7ae57715cedb1dcba736e357e8daaf5133e5c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3792. Test case failures in TestDistributedShell and some issue fixes related to ATSV2 (Naganarasimha G R via sjlee)\n\n(cherry picked from commit 84f37f1c7eefec6d139cbf091c50d6c06f734323)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "22e7ae57715cedb1dcba736e357e8daaf5133e5c",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "dc1f306fdc83749f9675b89326e26c73b9ff8f86",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   public void postPut(ApplicationId appId, TimelineCollector collector) {\n     RMApp app \u003d rmContext.getRMApps().get(appId);\n     if (app \u003d\u003d null) {\n       throw new YarnRuntimeException(\n           \"Unable to get the timeline collector context info for a non-existing app \" +\n               appId);\n     }\n     String userId \u003d app.getUser();\n     if (userId !\u003d null \u0026\u0026 !userId.isEmpty()) {\n       collector.getTimelineEntityContext().setUserId(userId);\n     }\n     for (String tag : app.getApplicationTags()) {\n       String[] parts \u003d tag.split(\":\", 2);\n       if (parts.length !\u003d 2 || parts[1].isEmpty()) {\n         continue;\n       }\n-      switch (parts[0]) {\n+      switch (parts[0].toUpperCase()) {\n         case TimelineUtils.FLOW_NAME_TAG_PREFIX:\n           collector.getTimelineEntityContext().setFlowName(parts[1]);\n           break;\n         case TimelineUtils.FLOW_VERSION_TAG_PREFIX:\n           collector.getTimelineEntityContext().setFlowVersion(parts[1]);\n           break;\n         case TimelineUtils.FLOW_RUN_ID_TAG_PREFIX:\n           collector.getTimelineEntityContext().setFlowRunId(\n               Long.parseLong(parts[1]));\n           break;\n         default:\n           break;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void postPut(ApplicationId appId, TimelineCollector collector) {\n    RMApp app \u003d rmContext.getRMApps().get(appId);\n    if (app \u003d\u003d null) {\n      throw new YarnRuntimeException(\n          \"Unable to get the timeline collector context info for a non-existing app \" +\n              appId);\n    }\n    String userId \u003d app.getUser();\n    if (userId !\u003d null \u0026\u0026 !userId.isEmpty()) {\n      collector.getTimelineEntityContext().setUserId(userId);\n    }\n    for (String tag : app.getApplicationTags()) {\n      String[] parts \u003d tag.split(\":\", 2);\n      if (parts.length !\u003d 2 || parts[1].isEmpty()) {\n        continue;\n      }\n      switch (parts[0].toUpperCase()) {\n        case TimelineUtils.FLOW_NAME_TAG_PREFIX:\n          collector.getTimelineEntityContext().setFlowName(parts[1]);\n          break;\n        case TimelineUtils.FLOW_VERSION_TAG_PREFIX:\n          collector.getTimelineEntityContext().setFlowVersion(parts[1]);\n          break;\n        case TimelineUtils.FLOW_RUN_ID_TAG_PREFIX:\n          collector.getTimelineEntityContext().setFlowRunId(\n              Long.parseLong(parts[1]));\n          break;\n        default:\n          break;\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/timelineservice/RMTimelineCollectorManager.java",
      "extendedDetails": {}
    },
    "dc1f306fdc83749f9675b89326e26c73b9ff8f86": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3562. unit tests failures and issues found from findbug from earlier ATS checkins (Naganarasimha G R via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "dc1f306fdc83749f9675b89326e26c73b9ff8f86",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "11e8905d8daf129afb6fe2e5a0eca11bcb1719c8",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   public void postPut(ApplicationId appId, TimelineCollector collector) {\n     RMApp app \u003d rmContext.getRMApps().get(appId);\n     if (app \u003d\u003d null) {\n       throw new YarnRuntimeException(\n           \"Unable to get the timeline collector context info for a non-existing app \" +\n               appId);\n     }\n     String userId \u003d app.getUser();\n     if (userId !\u003d null \u0026\u0026 !userId.isEmpty()) {\n       collector.getTimelineEntityContext().setUserId(userId);\n     }\n     for (String tag : app.getApplicationTags()) {\n       String[] parts \u003d tag.split(\":\", 2);\n       if (parts.length !\u003d 2 || parts[1].isEmpty()) {\n         continue;\n       }\n       switch (parts[0]) {\n         case TimelineUtils.FLOW_NAME_TAG_PREFIX:\n           collector.getTimelineEntityContext().setFlowName(parts[1]);\n           break;\n         case TimelineUtils.FLOW_VERSION_TAG_PREFIX:\n           collector.getTimelineEntityContext().setFlowVersion(parts[1]);\n           break;\n         case TimelineUtils.FLOW_RUN_ID_TAG_PREFIX:\n           collector.getTimelineEntityContext().setFlowRunId(\n-              Long.valueOf(parts[1]));\n+              Long.parseLong(parts[1]));\n           break;\n         default:\n           break;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void postPut(ApplicationId appId, TimelineCollector collector) {\n    RMApp app \u003d rmContext.getRMApps().get(appId);\n    if (app \u003d\u003d null) {\n      throw new YarnRuntimeException(\n          \"Unable to get the timeline collector context info for a non-existing app \" +\n              appId);\n    }\n    String userId \u003d app.getUser();\n    if (userId !\u003d null \u0026\u0026 !userId.isEmpty()) {\n      collector.getTimelineEntityContext().setUserId(userId);\n    }\n    for (String tag : app.getApplicationTags()) {\n      String[] parts \u003d tag.split(\":\", 2);\n      if (parts.length !\u003d 2 || parts[1].isEmpty()) {\n        continue;\n      }\n      switch (parts[0]) {\n        case TimelineUtils.FLOW_NAME_TAG_PREFIX:\n          collector.getTimelineEntityContext().setFlowName(parts[1]);\n          break;\n        case TimelineUtils.FLOW_VERSION_TAG_PREFIX:\n          collector.getTimelineEntityContext().setFlowVersion(parts[1]);\n          break;\n        case TimelineUtils.FLOW_RUN_ID_TAG_PREFIX:\n          collector.getTimelineEntityContext().setFlowRunId(\n              Long.parseLong(parts[1]));\n          break;\n        default:\n          break;\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/timelineservice/RMTimelineCollectorManager.java",
      "extendedDetails": {}
    },
    "11e8905d8daf129afb6fe2e5a0eca11bcb1719c8": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3390. Reuse TimelineCollectorManager for RM (Zhijie Shen via sjlee)\n\n(cherry picked from commit 58221188811e0f61d842dac89e1f4ad4fd8aa182)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "11e8905d8daf129afb6fe2e5a0eca11bcb1719c8",
      "commitAuthor": "Sangjin Lee",
      "diff": "@@ -0,0 +1,32 @@\n+  public void postPut(ApplicationId appId, TimelineCollector collector) {\n+    RMApp app \u003d rmContext.getRMApps().get(appId);\n+    if (app \u003d\u003d null) {\n+      throw new YarnRuntimeException(\n+          \"Unable to get the timeline collector context info for a non-existing app \" +\n+              appId);\n+    }\n+    String userId \u003d app.getUser();\n+    if (userId !\u003d null \u0026\u0026 !userId.isEmpty()) {\n+      collector.getTimelineEntityContext().setUserId(userId);\n+    }\n+    for (String tag : app.getApplicationTags()) {\n+      String[] parts \u003d tag.split(\":\", 2);\n+      if (parts.length !\u003d 2 || parts[1].isEmpty()) {\n+        continue;\n+      }\n+      switch (parts[0]) {\n+        case TimelineUtils.FLOW_NAME_TAG_PREFIX:\n+          collector.getTimelineEntityContext().setFlowName(parts[1]);\n+          break;\n+        case TimelineUtils.FLOW_VERSION_TAG_PREFIX:\n+          collector.getTimelineEntityContext().setFlowVersion(parts[1]);\n+          break;\n+        case TimelineUtils.FLOW_RUN_ID_TAG_PREFIX:\n+          collector.getTimelineEntityContext().setFlowRunId(\n+              Long.valueOf(parts[1]));\n+          break;\n+        default:\n+          break;\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void postPut(ApplicationId appId, TimelineCollector collector) {\n    RMApp app \u003d rmContext.getRMApps().get(appId);\n    if (app \u003d\u003d null) {\n      throw new YarnRuntimeException(\n          \"Unable to get the timeline collector context info for a non-existing app \" +\n              appId);\n    }\n    String userId \u003d app.getUser();\n    if (userId !\u003d null \u0026\u0026 !userId.isEmpty()) {\n      collector.getTimelineEntityContext().setUserId(userId);\n    }\n    for (String tag : app.getApplicationTags()) {\n      String[] parts \u003d tag.split(\":\", 2);\n      if (parts.length !\u003d 2 || parts[1].isEmpty()) {\n        continue;\n      }\n      switch (parts[0]) {\n        case TimelineUtils.FLOW_NAME_TAG_PREFIX:\n          collector.getTimelineEntityContext().setFlowName(parts[1]);\n          break;\n        case TimelineUtils.FLOW_VERSION_TAG_PREFIX:\n          collector.getTimelineEntityContext().setFlowVersion(parts[1]);\n          break;\n        case TimelineUtils.FLOW_RUN_ID_TAG_PREFIX:\n          collector.getTimelineEntityContext().setFlowRunId(\n              Long.valueOf(parts[1]));\n          break;\n        default:\n          break;\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/timelineservice/RMTimelineCollectorManager.java"
    }
  }
}