{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "StripedBlockWriter.java",
  "functionName": "transferData2Target",
  "functionId": "transferData2Target___packetBuf-byte[]",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/StripedBlockWriter.java",
  "functionStartLine": 164,
  "functionEndLine": 204,
  "numCommitsSeen": 36,
  "timeTaken": 5156,
  "changeHistory": [
    "1f14f6d038aecad55a5398c6fa4137c9d2f44729",
    "b5af9be72c72734d668f817c99d889031922a951",
    "3c18a53cbd2efabb2ad108d63a0b0b558424115f",
    "6616de24cb14f1c2d0d6568fd4382062618834bd"
  ],
  "changeHistoryShort": {
    "1f14f6d038aecad55a5398c6fa4137c9d2f44729": "Ybodychange",
    "b5af9be72c72734d668f817c99d889031922a951": "Ybodychange",
    "3c18a53cbd2efabb2ad108d63a0b0b558424115f": "Ymultichange(Ymovefromfile,Yreturntypechange,Ymodifierchange,Yexceptionschange,Ybodychange,Yrename,Yparameterchange)",
    "6616de24cb14f1c2d0d6568fd4382062618834bd": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1f14f6d038aecad55a5398c6fa4137c9d2f44729": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8411. Add bytes count metrics to datanode for ECWorker. Contributed by Sammi Chen and Andrew Wang\n",
      "commitDate": "13/12/16 10:50 PM",
      "commitName": "1f14f6d038aecad55a5398c6fa4137c9d2f44729",
      "commitAuthor": "Kai Zheng",
      "commitDateOld": "08/11/16 6:17 PM",
      "commitNameOld": "ed0bebabaaf27cd730f7f8eb002d92c9c7db327d",
      "commitAuthorOld": "Brahma Reddy Battula",
      "daysBetweenCommits": 35.19,
      "commitsBetweenForRepo": 220,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,41 @@\n   void transferData2Target(byte[] packetBuf) throws IOException {\n     if (targetBuffer.remaining() \u003d\u003d 0) {\n       return;\n     }\n \n     if (targetBuffer.isDirect()) {\n       ByteBuffer directCheckSumBuf \u003d\n           BUFFER_POOL.getBuffer(true, stripedWriter.getChecksumBuf().length);\n       stripedWriter.getChecksum().calculateChunkedSums(\n           targetBuffer, directCheckSumBuf);\n       directCheckSumBuf.get(stripedWriter.getChecksumBuf());\n       BUFFER_POOL.putBuffer(directCheckSumBuf);\n     } else {\n       stripedWriter.getChecksum().calculateChunkedSums(\n           targetBuffer.array(), 0, targetBuffer.remaining(),\n           stripedWriter.getChecksumBuf(), 0);\n     }\n \n     int ckOff \u003d 0;\n     while (targetBuffer.remaining() \u003e 0) {\n       DFSPacket packet \u003d new DFSPacket(packetBuf,\n           stripedWriter.getMaxChunksPerPacket(),\n           blockOffset4Target, seqNo4Target++,\n           stripedWriter.getChecksumSize(), false);\n       int maxBytesToPacket \u003d stripedWriter.getMaxChunksPerPacket()\n           * stripedWriter.getBytesPerChecksum();\n       int toWrite \u003d targetBuffer.remaining() \u003e maxBytesToPacket ?\n           maxBytesToPacket : targetBuffer.remaining();\n       int ckLen \u003d ((toWrite - 1) / stripedWriter.getBytesPerChecksum() + 1)\n           * stripedWriter.getChecksumSize();\n       packet.writeChecksum(stripedWriter.getChecksumBuf(), ckOff, ckLen);\n       ckOff +\u003d ckLen;\n       packet.writeData(targetBuffer, toWrite);\n \n       // Send packet\n       packet.writeTo(targetOutputStream);\n \n       blockOffset4Target +\u003d toWrite;\n+      stripedWriter.getReconstructor().incrBytesWritten(toWrite);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void transferData2Target(byte[] packetBuf) throws IOException {\n    if (targetBuffer.remaining() \u003d\u003d 0) {\n      return;\n    }\n\n    if (targetBuffer.isDirect()) {\n      ByteBuffer directCheckSumBuf \u003d\n          BUFFER_POOL.getBuffer(true, stripedWriter.getChecksumBuf().length);\n      stripedWriter.getChecksum().calculateChunkedSums(\n          targetBuffer, directCheckSumBuf);\n      directCheckSumBuf.get(stripedWriter.getChecksumBuf());\n      BUFFER_POOL.putBuffer(directCheckSumBuf);\n    } else {\n      stripedWriter.getChecksum().calculateChunkedSums(\n          targetBuffer.array(), 0, targetBuffer.remaining(),\n          stripedWriter.getChecksumBuf(), 0);\n    }\n\n    int ckOff \u003d 0;\n    while (targetBuffer.remaining() \u003e 0) {\n      DFSPacket packet \u003d new DFSPacket(packetBuf,\n          stripedWriter.getMaxChunksPerPacket(),\n          blockOffset4Target, seqNo4Target++,\n          stripedWriter.getChecksumSize(), false);\n      int maxBytesToPacket \u003d stripedWriter.getMaxChunksPerPacket()\n          * stripedWriter.getBytesPerChecksum();\n      int toWrite \u003d targetBuffer.remaining() \u003e maxBytesToPacket ?\n          maxBytesToPacket : targetBuffer.remaining();\n      int ckLen \u003d ((toWrite - 1) / stripedWriter.getBytesPerChecksum() + 1)\n          * stripedWriter.getChecksumSize();\n      packet.writeChecksum(stripedWriter.getChecksumBuf(), ckOff, ckLen);\n      ckOff +\u003d ckLen;\n      packet.writeData(targetBuffer, toWrite);\n\n      // Send packet\n      packet.writeTo(targetOutputStream);\n\n      blockOffset4Target +\u003d toWrite;\n      stripedWriter.getReconstructor().incrBytesWritten(toWrite);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/StripedBlockWriter.java",
      "extendedDetails": {}
    },
    "b5af9be72c72734d668f817c99d889031922a951": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8668. Erasure Coding: revisit buffer used for encoding and decoding. Contributed by Sammi Chen\n",
      "commitDate": "12/08/16 10:52 PM",
      "commitName": "b5af9be72c72734d668f817c99d889031922a951",
      "commitAuthor": "Kai Zheng",
      "commitDateOld": "29/06/16 12:41 PM",
      "commitNameOld": "e4a25456202feeee9880d822a8e6f9c19cbcf24a",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 44.42,
      "commitsBetweenForRepo": 396,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,40 @@\n   void transferData2Target(byte[] packetBuf) throws IOException {\n     if (targetBuffer.remaining() \u003d\u003d 0) {\n       return;\n     }\n \n-    stripedWriter.getChecksum().calculateChunkedSums(\n-        targetBuffer.array(), 0, targetBuffer.remaining(),\n-        stripedWriter.getChecksumBuf(), 0);\n+    if (targetBuffer.isDirect()) {\n+      ByteBuffer directCheckSumBuf \u003d\n+          BUFFER_POOL.getBuffer(true, stripedWriter.getChecksumBuf().length);\n+      stripedWriter.getChecksum().calculateChunkedSums(\n+          targetBuffer, directCheckSumBuf);\n+      directCheckSumBuf.get(stripedWriter.getChecksumBuf());\n+      BUFFER_POOL.putBuffer(directCheckSumBuf);\n+    } else {\n+      stripedWriter.getChecksum().calculateChunkedSums(\n+          targetBuffer.array(), 0, targetBuffer.remaining(),\n+          stripedWriter.getChecksumBuf(), 0);\n+    }\n \n     int ckOff \u003d 0;\n     while (targetBuffer.remaining() \u003e 0) {\n       DFSPacket packet \u003d new DFSPacket(packetBuf,\n           stripedWriter.getMaxChunksPerPacket(),\n           blockOffset4Target, seqNo4Target++,\n           stripedWriter.getChecksumSize(), false);\n       int maxBytesToPacket \u003d stripedWriter.getMaxChunksPerPacket()\n           * stripedWriter.getBytesPerChecksum();\n       int toWrite \u003d targetBuffer.remaining() \u003e maxBytesToPacket ?\n           maxBytesToPacket : targetBuffer.remaining();\n       int ckLen \u003d ((toWrite - 1) / stripedWriter.getBytesPerChecksum() + 1)\n           * stripedWriter.getChecksumSize();\n       packet.writeChecksum(stripedWriter.getChecksumBuf(), ckOff, ckLen);\n       ckOff +\u003d ckLen;\n       packet.writeData(targetBuffer, toWrite);\n \n       // Send packet\n       packet.writeTo(targetOutputStream);\n \n       blockOffset4Target +\u003d toWrite;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void transferData2Target(byte[] packetBuf) throws IOException {\n    if (targetBuffer.remaining() \u003d\u003d 0) {\n      return;\n    }\n\n    if (targetBuffer.isDirect()) {\n      ByteBuffer directCheckSumBuf \u003d\n          BUFFER_POOL.getBuffer(true, stripedWriter.getChecksumBuf().length);\n      stripedWriter.getChecksum().calculateChunkedSums(\n          targetBuffer, directCheckSumBuf);\n      directCheckSumBuf.get(stripedWriter.getChecksumBuf());\n      BUFFER_POOL.putBuffer(directCheckSumBuf);\n    } else {\n      stripedWriter.getChecksum().calculateChunkedSums(\n          targetBuffer.array(), 0, targetBuffer.remaining(),\n          stripedWriter.getChecksumBuf(), 0);\n    }\n\n    int ckOff \u003d 0;\n    while (targetBuffer.remaining() \u003e 0) {\n      DFSPacket packet \u003d new DFSPacket(packetBuf,\n          stripedWriter.getMaxChunksPerPacket(),\n          blockOffset4Target, seqNo4Target++,\n          stripedWriter.getChecksumSize(), false);\n      int maxBytesToPacket \u003d stripedWriter.getMaxChunksPerPacket()\n          * stripedWriter.getBytesPerChecksum();\n      int toWrite \u003d targetBuffer.remaining() \u003e maxBytesToPacket ?\n          maxBytesToPacket : targetBuffer.remaining();\n      int ckLen \u003d ((toWrite - 1) / stripedWriter.getBytesPerChecksum() + 1)\n          * stripedWriter.getChecksumSize();\n      packet.writeChecksum(stripedWriter.getChecksumBuf(), ckOff, ckLen);\n      ckOff +\u003d ckLen;\n      packet.writeData(targetBuffer, toWrite);\n\n      // Send packet\n      packet.writeTo(targetOutputStream);\n\n      blockOffset4Target +\u003d toWrite;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/StripedBlockWriter.java",
      "extendedDetails": {}
    },
    "3c18a53cbd2efabb2ad108d63a0b0b558424115f": {
      "type": "Ymultichange(Ymovefromfile,Yreturntypechange,Ymodifierchange,Yexceptionschange,Ybodychange,Yrename,Yparameterchange)",
      "commitMessage": "HDFS-9719. Refactoring ErasureCodingWorker into smaller reusable constructs. Contributed by Kai Zheng.\n",
      "commitDate": "06/04/16 10:50 PM",
      "commitName": "3c18a53cbd2efabb2ad108d63a0b0b558424115f",
      "commitAuthor": "Uma Maheswara Rao G",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-9719. Refactoring ErasureCodingWorker into smaller reusable constructs. Contributed by Kai Zheng.\n",
          "commitDate": "06/04/16 10:50 PM",
          "commitName": "3c18a53cbd2efabb2ad108d63a0b0b558424115f",
          "commitAuthor": "Uma Maheswara Rao G",
          "commitDateOld": "06/04/16 9:45 PM",
          "commitNameOld": "8d29e2451f5ca60f864c7ece16722c0abdd1c657",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,31 @@\n-    private int transferData2Targets(boolean[] targetsStatus) {\n-      int nsuccess \u003d 0;\n-      for (int i \u003d 0; i \u003c targets.length; i++) {\n-        if (targetsStatus[i]) {\n-          boolean success \u003d false;\n-          try {\n-            ByteBuffer buffer \u003d targetBuffers[i];\n-            \n-            if (buffer.remaining() \u003d\u003d 0) {\n-              continue;\n-            }\n+  void transferData2Target(byte[] packetBuf) throws IOException {\n+    if (targetBuffer.remaining() \u003d\u003d 0) {\n+      return;\n+    }\n \n-            checksum.calculateChunkedSums(\n-                buffer.array(), 0, buffer.remaining(), checksumBuf, 0);\n+    stripedWriter.getChecksum().calculateChunkedSums(\n+        targetBuffer.array(), 0, targetBuffer.remaining(),\n+        stripedWriter.getChecksumBuf(), 0);\n \n-            int ckOff \u003d 0;\n-            while (buffer.remaining() \u003e 0) {\n-              DFSPacket packet \u003d new DFSPacket(packetBuf, maxChunksPerPacket,\n-                  blockOffset4Targets[i], seqNo4Targets[i]++, checksumSize, false);\n-              int maxBytesToPacket \u003d maxChunksPerPacket * bytesPerChecksum;\n-              int toWrite \u003d buffer.remaining() \u003e maxBytesToPacket ?\n-                  maxBytesToPacket : buffer.remaining();\n-              int ckLen \u003d ((toWrite - 1) / bytesPerChecksum + 1) * checksumSize;\n-              packet.writeChecksum(checksumBuf, ckOff, ckLen);\n-              ckOff +\u003d ckLen;\n-              packet.writeData(buffer, toWrite);\n+    int ckOff \u003d 0;\n+    while (targetBuffer.remaining() \u003e 0) {\n+      DFSPacket packet \u003d new DFSPacket(packetBuf,\n+          stripedWriter.getMaxChunksPerPacket(),\n+          blockOffset4Target, seqNo4Target++,\n+          stripedWriter.getChecksumSize(), false);\n+      int maxBytesToPacket \u003d stripedWriter.getMaxChunksPerPacket()\n+          * stripedWriter.getBytesPerChecksum();\n+      int toWrite \u003d targetBuffer.remaining() \u003e maxBytesToPacket ?\n+          maxBytesToPacket : targetBuffer.remaining();\n+      int ckLen \u003d ((toWrite - 1) / stripedWriter.getBytesPerChecksum() + 1)\n+          * stripedWriter.getChecksumSize();\n+      packet.writeChecksum(stripedWriter.getChecksumBuf(), ckOff, ckLen);\n+      ckOff +\u003d ckLen;\n+      packet.writeData(targetBuffer, toWrite);\n \n-              // Send packet\n-              packet.writeTo(targetOutputStreams[i]);\n+      // Send packet\n+      packet.writeTo(targetOutputStream);\n \n-              blockOffset4Targets[i] +\u003d toWrite;\n-              nsuccess++;\n-              success \u003d true;\n-            }\n-          } catch (IOException e) {\n-            LOG.warn(e.getMessage());\n-          }\n-          targetsStatus[i] \u003d success;\n-        }\n-      }\n-      return nsuccess;\n-    }\n\\ No newline at end of file\n+      blockOffset4Target +\u003d toWrite;\n+    }\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  void transferData2Target(byte[] packetBuf) throws IOException {\n    if (targetBuffer.remaining() \u003d\u003d 0) {\n      return;\n    }\n\n    stripedWriter.getChecksum().calculateChunkedSums(\n        targetBuffer.array(), 0, targetBuffer.remaining(),\n        stripedWriter.getChecksumBuf(), 0);\n\n    int ckOff \u003d 0;\n    while (targetBuffer.remaining() \u003e 0) {\n      DFSPacket packet \u003d new DFSPacket(packetBuf,\n          stripedWriter.getMaxChunksPerPacket(),\n          blockOffset4Target, seqNo4Target++,\n          stripedWriter.getChecksumSize(), false);\n      int maxBytesToPacket \u003d stripedWriter.getMaxChunksPerPacket()\n          * stripedWriter.getBytesPerChecksum();\n      int toWrite \u003d targetBuffer.remaining() \u003e maxBytesToPacket ?\n          maxBytesToPacket : targetBuffer.remaining();\n      int ckLen \u003d ((toWrite - 1) / stripedWriter.getBytesPerChecksum() + 1)\n          * stripedWriter.getChecksumSize();\n      packet.writeChecksum(stripedWriter.getChecksumBuf(), ckOff, ckLen);\n      ckOff +\u003d ckLen;\n      packet.writeData(targetBuffer, toWrite);\n\n      // Send packet\n      packet.writeTo(targetOutputStream);\n\n      blockOffset4Target +\u003d toWrite;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/StripedBlockWriter.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/ErasureCodingWorker.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/StripedBlockWriter.java",
            "oldMethodName": "transferData2Targets",
            "newMethodName": "transferData2Target"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-9719. Refactoring ErasureCodingWorker into smaller reusable constructs. Contributed by Kai Zheng.\n",
          "commitDate": "06/04/16 10:50 PM",
          "commitName": "3c18a53cbd2efabb2ad108d63a0b0b558424115f",
          "commitAuthor": "Uma Maheswara Rao G",
          "commitDateOld": "06/04/16 9:45 PM",
          "commitNameOld": "8d29e2451f5ca60f864c7ece16722c0abdd1c657",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,31 @@\n-    private int transferData2Targets(boolean[] targetsStatus) {\n-      int nsuccess \u003d 0;\n-      for (int i \u003d 0; i \u003c targets.length; i++) {\n-        if (targetsStatus[i]) {\n-          boolean success \u003d false;\n-          try {\n-            ByteBuffer buffer \u003d targetBuffers[i];\n-            \n-            if (buffer.remaining() \u003d\u003d 0) {\n-              continue;\n-            }\n+  void transferData2Target(byte[] packetBuf) throws IOException {\n+    if (targetBuffer.remaining() \u003d\u003d 0) {\n+      return;\n+    }\n \n-            checksum.calculateChunkedSums(\n-                buffer.array(), 0, buffer.remaining(), checksumBuf, 0);\n+    stripedWriter.getChecksum().calculateChunkedSums(\n+        targetBuffer.array(), 0, targetBuffer.remaining(),\n+        stripedWriter.getChecksumBuf(), 0);\n \n-            int ckOff \u003d 0;\n-            while (buffer.remaining() \u003e 0) {\n-              DFSPacket packet \u003d new DFSPacket(packetBuf, maxChunksPerPacket,\n-                  blockOffset4Targets[i], seqNo4Targets[i]++, checksumSize, false);\n-              int maxBytesToPacket \u003d maxChunksPerPacket * bytesPerChecksum;\n-              int toWrite \u003d buffer.remaining() \u003e maxBytesToPacket ?\n-                  maxBytesToPacket : buffer.remaining();\n-              int ckLen \u003d ((toWrite - 1) / bytesPerChecksum + 1) * checksumSize;\n-              packet.writeChecksum(checksumBuf, ckOff, ckLen);\n-              ckOff +\u003d ckLen;\n-              packet.writeData(buffer, toWrite);\n+    int ckOff \u003d 0;\n+    while (targetBuffer.remaining() \u003e 0) {\n+      DFSPacket packet \u003d new DFSPacket(packetBuf,\n+          stripedWriter.getMaxChunksPerPacket(),\n+          blockOffset4Target, seqNo4Target++,\n+          stripedWriter.getChecksumSize(), false);\n+      int maxBytesToPacket \u003d stripedWriter.getMaxChunksPerPacket()\n+          * stripedWriter.getBytesPerChecksum();\n+      int toWrite \u003d targetBuffer.remaining() \u003e maxBytesToPacket ?\n+          maxBytesToPacket : targetBuffer.remaining();\n+      int ckLen \u003d ((toWrite - 1) / stripedWriter.getBytesPerChecksum() + 1)\n+          * stripedWriter.getChecksumSize();\n+      packet.writeChecksum(stripedWriter.getChecksumBuf(), ckOff, ckLen);\n+      ckOff +\u003d ckLen;\n+      packet.writeData(targetBuffer, toWrite);\n \n-              // Send packet\n-              packet.writeTo(targetOutputStreams[i]);\n+      // Send packet\n+      packet.writeTo(targetOutputStream);\n \n-              blockOffset4Targets[i] +\u003d toWrite;\n-              nsuccess++;\n-              success \u003d true;\n-            }\n-          } catch (IOException e) {\n-            LOG.warn(e.getMessage());\n-          }\n-          targetsStatus[i] \u003d success;\n-        }\n-      }\n-      return nsuccess;\n-    }\n\\ No newline at end of file\n+      blockOffset4Target +\u003d toWrite;\n+    }\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  void transferData2Target(byte[] packetBuf) throws IOException {\n    if (targetBuffer.remaining() \u003d\u003d 0) {\n      return;\n    }\n\n    stripedWriter.getChecksum().calculateChunkedSums(\n        targetBuffer.array(), 0, targetBuffer.remaining(),\n        stripedWriter.getChecksumBuf(), 0);\n\n    int ckOff \u003d 0;\n    while (targetBuffer.remaining() \u003e 0) {\n      DFSPacket packet \u003d new DFSPacket(packetBuf,\n          stripedWriter.getMaxChunksPerPacket(),\n          blockOffset4Target, seqNo4Target++,\n          stripedWriter.getChecksumSize(), false);\n      int maxBytesToPacket \u003d stripedWriter.getMaxChunksPerPacket()\n          * stripedWriter.getBytesPerChecksum();\n      int toWrite \u003d targetBuffer.remaining() \u003e maxBytesToPacket ?\n          maxBytesToPacket : targetBuffer.remaining();\n      int ckLen \u003d ((toWrite - 1) / stripedWriter.getBytesPerChecksum() + 1)\n          * stripedWriter.getChecksumSize();\n      packet.writeChecksum(stripedWriter.getChecksumBuf(), ckOff, ckLen);\n      ckOff +\u003d ckLen;\n      packet.writeData(targetBuffer, toWrite);\n\n      // Send packet\n      packet.writeTo(targetOutputStream);\n\n      blockOffset4Target +\u003d toWrite;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/StripedBlockWriter.java",
          "extendedDetails": {
            "oldValue": "int",
            "newValue": "void"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-9719. Refactoring ErasureCodingWorker into smaller reusable constructs. Contributed by Kai Zheng.\n",
          "commitDate": "06/04/16 10:50 PM",
          "commitName": "3c18a53cbd2efabb2ad108d63a0b0b558424115f",
          "commitAuthor": "Uma Maheswara Rao G",
          "commitDateOld": "06/04/16 9:45 PM",
          "commitNameOld": "8d29e2451f5ca60f864c7ece16722c0abdd1c657",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,31 @@\n-    private int transferData2Targets(boolean[] targetsStatus) {\n-      int nsuccess \u003d 0;\n-      for (int i \u003d 0; i \u003c targets.length; i++) {\n-        if (targetsStatus[i]) {\n-          boolean success \u003d false;\n-          try {\n-            ByteBuffer buffer \u003d targetBuffers[i];\n-            \n-            if (buffer.remaining() \u003d\u003d 0) {\n-              continue;\n-            }\n+  void transferData2Target(byte[] packetBuf) throws IOException {\n+    if (targetBuffer.remaining() \u003d\u003d 0) {\n+      return;\n+    }\n \n-            checksum.calculateChunkedSums(\n-                buffer.array(), 0, buffer.remaining(), checksumBuf, 0);\n+    stripedWriter.getChecksum().calculateChunkedSums(\n+        targetBuffer.array(), 0, targetBuffer.remaining(),\n+        stripedWriter.getChecksumBuf(), 0);\n \n-            int ckOff \u003d 0;\n-            while (buffer.remaining() \u003e 0) {\n-              DFSPacket packet \u003d new DFSPacket(packetBuf, maxChunksPerPacket,\n-                  blockOffset4Targets[i], seqNo4Targets[i]++, checksumSize, false);\n-              int maxBytesToPacket \u003d maxChunksPerPacket * bytesPerChecksum;\n-              int toWrite \u003d buffer.remaining() \u003e maxBytesToPacket ?\n-                  maxBytesToPacket : buffer.remaining();\n-              int ckLen \u003d ((toWrite - 1) / bytesPerChecksum + 1) * checksumSize;\n-              packet.writeChecksum(checksumBuf, ckOff, ckLen);\n-              ckOff +\u003d ckLen;\n-              packet.writeData(buffer, toWrite);\n+    int ckOff \u003d 0;\n+    while (targetBuffer.remaining() \u003e 0) {\n+      DFSPacket packet \u003d new DFSPacket(packetBuf,\n+          stripedWriter.getMaxChunksPerPacket(),\n+          blockOffset4Target, seqNo4Target++,\n+          stripedWriter.getChecksumSize(), false);\n+      int maxBytesToPacket \u003d stripedWriter.getMaxChunksPerPacket()\n+          * stripedWriter.getBytesPerChecksum();\n+      int toWrite \u003d targetBuffer.remaining() \u003e maxBytesToPacket ?\n+          maxBytesToPacket : targetBuffer.remaining();\n+      int ckLen \u003d ((toWrite - 1) / stripedWriter.getBytesPerChecksum() + 1)\n+          * stripedWriter.getChecksumSize();\n+      packet.writeChecksum(stripedWriter.getChecksumBuf(), ckOff, ckLen);\n+      ckOff +\u003d ckLen;\n+      packet.writeData(targetBuffer, toWrite);\n \n-              // Send packet\n-              packet.writeTo(targetOutputStreams[i]);\n+      // Send packet\n+      packet.writeTo(targetOutputStream);\n \n-              blockOffset4Targets[i] +\u003d toWrite;\n-              nsuccess++;\n-              success \u003d true;\n-            }\n-          } catch (IOException e) {\n-            LOG.warn(e.getMessage());\n-          }\n-          targetsStatus[i] \u003d success;\n-        }\n-      }\n-      return nsuccess;\n-    }\n\\ No newline at end of file\n+      blockOffset4Target +\u003d toWrite;\n+    }\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  void transferData2Target(byte[] packetBuf) throws IOException {\n    if (targetBuffer.remaining() \u003d\u003d 0) {\n      return;\n    }\n\n    stripedWriter.getChecksum().calculateChunkedSums(\n        targetBuffer.array(), 0, targetBuffer.remaining(),\n        stripedWriter.getChecksumBuf(), 0);\n\n    int ckOff \u003d 0;\n    while (targetBuffer.remaining() \u003e 0) {\n      DFSPacket packet \u003d new DFSPacket(packetBuf,\n          stripedWriter.getMaxChunksPerPacket(),\n          blockOffset4Target, seqNo4Target++,\n          stripedWriter.getChecksumSize(), false);\n      int maxBytesToPacket \u003d stripedWriter.getMaxChunksPerPacket()\n          * stripedWriter.getBytesPerChecksum();\n      int toWrite \u003d targetBuffer.remaining() \u003e maxBytesToPacket ?\n          maxBytesToPacket : targetBuffer.remaining();\n      int ckLen \u003d ((toWrite - 1) / stripedWriter.getBytesPerChecksum() + 1)\n          * stripedWriter.getChecksumSize();\n      packet.writeChecksum(stripedWriter.getChecksumBuf(), ckOff, ckLen);\n      ckOff +\u003d ckLen;\n      packet.writeData(targetBuffer, toWrite);\n\n      // Send packet\n      packet.writeTo(targetOutputStream);\n\n      blockOffset4Target +\u003d toWrite;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/StripedBlockWriter.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-9719. Refactoring ErasureCodingWorker into smaller reusable constructs. Contributed by Kai Zheng.\n",
          "commitDate": "06/04/16 10:50 PM",
          "commitName": "3c18a53cbd2efabb2ad108d63a0b0b558424115f",
          "commitAuthor": "Uma Maheswara Rao G",
          "commitDateOld": "06/04/16 9:45 PM",
          "commitNameOld": "8d29e2451f5ca60f864c7ece16722c0abdd1c657",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,31 @@\n-    private int transferData2Targets(boolean[] targetsStatus) {\n-      int nsuccess \u003d 0;\n-      for (int i \u003d 0; i \u003c targets.length; i++) {\n-        if (targetsStatus[i]) {\n-          boolean success \u003d false;\n-          try {\n-            ByteBuffer buffer \u003d targetBuffers[i];\n-            \n-            if (buffer.remaining() \u003d\u003d 0) {\n-              continue;\n-            }\n+  void transferData2Target(byte[] packetBuf) throws IOException {\n+    if (targetBuffer.remaining() \u003d\u003d 0) {\n+      return;\n+    }\n \n-            checksum.calculateChunkedSums(\n-                buffer.array(), 0, buffer.remaining(), checksumBuf, 0);\n+    stripedWriter.getChecksum().calculateChunkedSums(\n+        targetBuffer.array(), 0, targetBuffer.remaining(),\n+        stripedWriter.getChecksumBuf(), 0);\n \n-            int ckOff \u003d 0;\n-            while (buffer.remaining() \u003e 0) {\n-              DFSPacket packet \u003d new DFSPacket(packetBuf, maxChunksPerPacket,\n-                  blockOffset4Targets[i], seqNo4Targets[i]++, checksumSize, false);\n-              int maxBytesToPacket \u003d maxChunksPerPacket * bytesPerChecksum;\n-              int toWrite \u003d buffer.remaining() \u003e maxBytesToPacket ?\n-                  maxBytesToPacket : buffer.remaining();\n-              int ckLen \u003d ((toWrite - 1) / bytesPerChecksum + 1) * checksumSize;\n-              packet.writeChecksum(checksumBuf, ckOff, ckLen);\n-              ckOff +\u003d ckLen;\n-              packet.writeData(buffer, toWrite);\n+    int ckOff \u003d 0;\n+    while (targetBuffer.remaining() \u003e 0) {\n+      DFSPacket packet \u003d new DFSPacket(packetBuf,\n+          stripedWriter.getMaxChunksPerPacket(),\n+          blockOffset4Target, seqNo4Target++,\n+          stripedWriter.getChecksumSize(), false);\n+      int maxBytesToPacket \u003d stripedWriter.getMaxChunksPerPacket()\n+          * stripedWriter.getBytesPerChecksum();\n+      int toWrite \u003d targetBuffer.remaining() \u003e maxBytesToPacket ?\n+          maxBytesToPacket : targetBuffer.remaining();\n+      int ckLen \u003d ((toWrite - 1) / stripedWriter.getBytesPerChecksum() + 1)\n+          * stripedWriter.getChecksumSize();\n+      packet.writeChecksum(stripedWriter.getChecksumBuf(), ckOff, ckLen);\n+      ckOff +\u003d ckLen;\n+      packet.writeData(targetBuffer, toWrite);\n \n-              // Send packet\n-              packet.writeTo(targetOutputStreams[i]);\n+      // Send packet\n+      packet.writeTo(targetOutputStream);\n \n-              blockOffset4Targets[i] +\u003d toWrite;\n-              nsuccess++;\n-              success \u003d true;\n-            }\n-          } catch (IOException e) {\n-            LOG.warn(e.getMessage());\n-          }\n-          targetsStatus[i] \u003d success;\n-        }\n-      }\n-      return nsuccess;\n-    }\n\\ No newline at end of file\n+      blockOffset4Target +\u003d toWrite;\n+    }\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  void transferData2Target(byte[] packetBuf) throws IOException {\n    if (targetBuffer.remaining() \u003d\u003d 0) {\n      return;\n    }\n\n    stripedWriter.getChecksum().calculateChunkedSums(\n        targetBuffer.array(), 0, targetBuffer.remaining(),\n        stripedWriter.getChecksumBuf(), 0);\n\n    int ckOff \u003d 0;\n    while (targetBuffer.remaining() \u003e 0) {\n      DFSPacket packet \u003d new DFSPacket(packetBuf,\n          stripedWriter.getMaxChunksPerPacket(),\n          blockOffset4Target, seqNo4Target++,\n          stripedWriter.getChecksumSize(), false);\n      int maxBytesToPacket \u003d stripedWriter.getMaxChunksPerPacket()\n          * stripedWriter.getBytesPerChecksum();\n      int toWrite \u003d targetBuffer.remaining() \u003e maxBytesToPacket ?\n          maxBytesToPacket : targetBuffer.remaining();\n      int ckLen \u003d ((toWrite - 1) / stripedWriter.getBytesPerChecksum() + 1)\n          * stripedWriter.getChecksumSize();\n      packet.writeChecksum(stripedWriter.getChecksumBuf(), ckOff, ckLen);\n      ckOff +\u003d ckLen;\n      packet.writeData(targetBuffer, toWrite);\n\n      // Send packet\n      packet.writeTo(targetOutputStream);\n\n      blockOffset4Target +\u003d toWrite;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/StripedBlockWriter.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-9719. Refactoring ErasureCodingWorker into smaller reusable constructs. Contributed by Kai Zheng.\n",
          "commitDate": "06/04/16 10:50 PM",
          "commitName": "3c18a53cbd2efabb2ad108d63a0b0b558424115f",
          "commitAuthor": "Uma Maheswara Rao G",
          "commitDateOld": "06/04/16 9:45 PM",
          "commitNameOld": "8d29e2451f5ca60f864c7ece16722c0abdd1c657",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,31 @@\n-    private int transferData2Targets(boolean[] targetsStatus) {\n-      int nsuccess \u003d 0;\n-      for (int i \u003d 0; i \u003c targets.length; i++) {\n-        if (targetsStatus[i]) {\n-          boolean success \u003d false;\n-          try {\n-            ByteBuffer buffer \u003d targetBuffers[i];\n-            \n-            if (buffer.remaining() \u003d\u003d 0) {\n-              continue;\n-            }\n+  void transferData2Target(byte[] packetBuf) throws IOException {\n+    if (targetBuffer.remaining() \u003d\u003d 0) {\n+      return;\n+    }\n \n-            checksum.calculateChunkedSums(\n-                buffer.array(), 0, buffer.remaining(), checksumBuf, 0);\n+    stripedWriter.getChecksum().calculateChunkedSums(\n+        targetBuffer.array(), 0, targetBuffer.remaining(),\n+        stripedWriter.getChecksumBuf(), 0);\n \n-            int ckOff \u003d 0;\n-            while (buffer.remaining() \u003e 0) {\n-              DFSPacket packet \u003d new DFSPacket(packetBuf, maxChunksPerPacket,\n-                  blockOffset4Targets[i], seqNo4Targets[i]++, checksumSize, false);\n-              int maxBytesToPacket \u003d maxChunksPerPacket * bytesPerChecksum;\n-              int toWrite \u003d buffer.remaining() \u003e maxBytesToPacket ?\n-                  maxBytesToPacket : buffer.remaining();\n-              int ckLen \u003d ((toWrite - 1) / bytesPerChecksum + 1) * checksumSize;\n-              packet.writeChecksum(checksumBuf, ckOff, ckLen);\n-              ckOff +\u003d ckLen;\n-              packet.writeData(buffer, toWrite);\n+    int ckOff \u003d 0;\n+    while (targetBuffer.remaining() \u003e 0) {\n+      DFSPacket packet \u003d new DFSPacket(packetBuf,\n+          stripedWriter.getMaxChunksPerPacket(),\n+          blockOffset4Target, seqNo4Target++,\n+          stripedWriter.getChecksumSize(), false);\n+      int maxBytesToPacket \u003d stripedWriter.getMaxChunksPerPacket()\n+          * stripedWriter.getBytesPerChecksum();\n+      int toWrite \u003d targetBuffer.remaining() \u003e maxBytesToPacket ?\n+          maxBytesToPacket : targetBuffer.remaining();\n+      int ckLen \u003d ((toWrite - 1) / stripedWriter.getBytesPerChecksum() + 1)\n+          * stripedWriter.getChecksumSize();\n+      packet.writeChecksum(stripedWriter.getChecksumBuf(), ckOff, ckLen);\n+      ckOff +\u003d ckLen;\n+      packet.writeData(targetBuffer, toWrite);\n \n-              // Send packet\n-              packet.writeTo(targetOutputStreams[i]);\n+      // Send packet\n+      packet.writeTo(targetOutputStream);\n \n-              blockOffset4Targets[i] +\u003d toWrite;\n-              nsuccess++;\n-              success \u003d true;\n-            }\n-          } catch (IOException e) {\n-            LOG.warn(e.getMessage());\n-          }\n-          targetsStatus[i] \u003d success;\n-        }\n-      }\n-      return nsuccess;\n-    }\n\\ No newline at end of file\n+      blockOffset4Target +\u003d toWrite;\n+    }\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  void transferData2Target(byte[] packetBuf) throws IOException {\n    if (targetBuffer.remaining() \u003d\u003d 0) {\n      return;\n    }\n\n    stripedWriter.getChecksum().calculateChunkedSums(\n        targetBuffer.array(), 0, targetBuffer.remaining(),\n        stripedWriter.getChecksumBuf(), 0);\n\n    int ckOff \u003d 0;\n    while (targetBuffer.remaining() \u003e 0) {\n      DFSPacket packet \u003d new DFSPacket(packetBuf,\n          stripedWriter.getMaxChunksPerPacket(),\n          blockOffset4Target, seqNo4Target++,\n          stripedWriter.getChecksumSize(), false);\n      int maxBytesToPacket \u003d stripedWriter.getMaxChunksPerPacket()\n          * stripedWriter.getBytesPerChecksum();\n      int toWrite \u003d targetBuffer.remaining() \u003e maxBytesToPacket ?\n          maxBytesToPacket : targetBuffer.remaining();\n      int ckLen \u003d ((toWrite - 1) / stripedWriter.getBytesPerChecksum() + 1)\n          * stripedWriter.getChecksumSize();\n      packet.writeChecksum(stripedWriter.getChecksumBuf(), ckOff, ckLen);\n      ckOff +\u003d ckLen;\n      packet.writeData(targetBuffer, toWrite);\n\n      // Send packet\n      packet.writeTo(targetOutputStream);\n\n      blockOffset4Target +\u003d toWrite;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/StripedBlockWriter.java",
          "extendedDetails": {}
        },
        {
          "type": "Yrename",
          "commitMessage": "HDFS-9719. Refactoring ErasureCodingWorker into smaller reusable constructs. Contributed by Kai Zheng.\n",
          "commitDate": "06/04/16 10:50 PM",
          "commitName": "3c18a53cbd2efabb2ad108d63a0b0b558424115f",
          "commitAuthor": "Uma Maheswara Rao G",
          "commitDateOld": "06/04/16 9:45 PM",
          "commitNameOld": "8d29e2451f5ca60f864c7ece16722c0abdd1c657",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,31 @@\n-    private int transferData2Targets(boolean[] targetsStatus) {\n-      int nsuccess \u003d 0;\n-      for (int i \u003d 0; i \u003c targets.length; i++) {\n-        if (targetsStatus[i]) {\n-          boolean success \u003d false;\n-          try {\n-            ByteBuffer buffer \u003d targetBuffers[i];\n-            \n-            if (buffer.remaining() \u003d\u003d 0) {\n-              continue;\n-            }\n+  void transferData2Target(byte[] packetBuf) throws IOException {\n+    if (targetBuffer.remaining() \u003d\u003d 0) {\n+      return;\n+    }\n \n-            checksum.calculateChunkedSums(\n-                buffer.array(), 0, buffer.remaining(), checksumBuf, 0);\n+    stripedWriter.getChecksum().calculateChunkedSums(\n+        targetBuffer.array(), 0, targetBuffer.remaining(),\n+        stripedWriter.getChecksumBuf(), 0);\n \n-            int ckOff \u003d 0;\n-            while (buffer.remaining() \u003e 0) {\n-              DFSPacket packet \u003d new DFSPacket(packetBuf, maxChunksPerPacket,\n-                  blockOffset4Targets[i], seqNo4Targets[i]++, checksumSize, false);\n-              int maxBytesToPacket \u003d maxChunksPerPacket * bytesPerChecksum;\n-              int toWrite \u003d buffer.remaining() \u003e maxBytesToPacket ?\n-                  maxBytesToPacket : buffer.remaining();\n-              int ckLen \u003d ((toWrite - 1) / bytesPerChecksum + 1) * checksumSize;\n-              packet.writeChecksum(checksumBuf, ckOff, ckLen);\n-              ckOff +\u003d ckLen;\n-              packet.writeData(buffer, toWrite);\n+    int ckOff \u003d 0;\n+    while (targetBuffer.remaining() \u003e 0) {\n+      DFSPacket packet \u003d new DFSPacket(packetBuf,\n+          stripedWriter.getMaxChunksPerPacket(),\n+          blockOffset4Target, seqNo4Target++,\n+          stripedWriter.getChecksumSize(), false);\n+      int maxBytesToPacket \u003d stripedWriter.getMaxChunksPerPacket()\n+          * stripedWriter.getBytesPerChecksum();\n+      int toWrite \u003d targetBuffer.remaining() \u003e maxBytesToPacket ?\n+          maxBytesToPacket : targetBuffer.remaining();\n+      int ckLen \u003d ((toWrite - 1) / stripedWriter.getBytesPerChecksum() + 1)\n+          * stripedWriter.getChecksumSize();\n+      packet.writeChecksum(stripedWriter.getChecksumBuf(), ckOff, ckLen);\n+      ckOff +\u003d ckLen;\n+      packet.writeData(targetBuffer, toWrite);\n \n-              // Send packet\n-              packet.writeTo(targetOutputStreams[i]);\n+      // Send packet\n+      packet.writeTo(targetOutputStream);\n \n-              blockOffset4Targets[i] +\u003d toWrite;\n-              nsuccess++;\n-              success \u003d true;\n-            }\n-          } catch (IOException e) {\n-            LOG.warn(e.getMessage());\n-          }\n-          targetsStatus[i] \u003d success;\n-        }\n-      }\n-      return nsuccess;\n-    }\n\\ No newline at end of file\n+      blockOffset4Target +\u003d toWrite;\n+    }\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  void transferData2Target(byte[] packetBuf) throws IOException {\n    if (targetBuffer.remaining() \u003d\u003d 0) {\n      return;\n    }\n\n    stripedWriter.getChecksum().calculateChunkedSums(\n        targetBuffer.array(), 0, targetBuffer.remaining(),\n        stripedWriter.getChecksumBuf(), 0);\n\n    int ckOff \u003d 0;\n    while (targetBuffer.remaining() \u003e 0) {\n      DFSPacket packet \u003d new DFSPacket(packetBuf,\n          stripedWriter.getMaxChunksPerPacket(),\n          blockOffset4Target, seqNo4Target++,\n          stripedWriter.getChecksumSize(), false);\n      int maxBytesToPacket \u003d stripedWriter.getMaxChunksPerPacket()\n          * stripedWriter.getBytesPerChecksum();\n      int toWrite \u003d targetBuffer.remaining() \u003e maxBytesToPacket ?\n          maxBytesToPacket : targetBuffer.remaining();\n      int ckLen \u003d ((toWrite - 1) / stripedWriter.getBytesPerChecksum() + 1)\n          * stripedWriter.getChecksumSize();\n      packet.writeChecksum(stripedWriter.getChecksumBuf(), ckOff, ckLen);\n      ckOff +\u003d ckLen;\n      packet.writeData(targetBuffer, toWrite);\n\n      // Send packet\n      packet.writeTo(targetOutputStream);\n\n      blockOffset4Target +\u003d toWrite;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/StripedBlockWriter.java",
          "extendedDetails": {
            "oldValue": "transferData2Targets",
            "newValue": "transferData2Target"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-9719. Refactoring ErasureCodingWorker into smaller reusable constructs. Contributed by Kai Zheng.\n",
          "commitDate": "06/04/16 10:50 PM",
          "commitName": "3c18a53cbd2efabb2ad108d63a0b0b558424115f",
          "commitAuthor": "Uma Maheswara Rao G",
          "commitDateOld": "06/04/16 9:45 PM",
          "commitNameOld": "8d29e2451f5ca60f864c7ece16722c0abdd1c657",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,31 @@\n-    private int transferData2Targets(boolean[] targetsStatus) {\n-      int nsuccess \u003d 0;\n-      for (int i \u003d 0; i \u003c targets.length; i++) {\n-        if (targetsStatus[i]) {\n-          boolean success \u003d false;\n-          try {\n-            ByteBuffer buffer \u003d targetBuffers[i];\n-            \n-            if (buffer.remaining() \u003d\u003d 0) {\n-              continue;\n-            }\n+  void transferData2Target(byte[] packetBuf) throws IOException {\n+    if (targetBuffer.remaining() \u003d\u003d 0) {\n+      return;\n+    }\n \n-            checksum.calculateChunkedSums(\n-                buffer.array(), 0, buffer.remaining(), checksumBuf, 0);\n+    stripedWriter.getChecksum().calculateChunkedSums(\n+        targetBuffer.array(), 0, targetBuffer.remaining(),\n+        stripedWriter.getChecksumBuf(), 0);\n \n-            int ckOff \u003d 0;\n-            while (buffer.remaining() \u003e 0) {\n-              DFSPacket packet \u003d new DFSPacket(packetBuf, maxChunksPerPacket,\n-                  blockOffset4Targets[i], seqNo4Targets[i]++, checksumSize, false);\n-              int maxBytesToPacket \u003d maxChunksPerPacket * bytesPerChecksum;\n-              int toWrite \u003d buffer.remaining() \u003e maxBytesToPacket ?\n-                  maxBytesToPacket : buffer.remaining();\n-              int ckLen \u003d ((toWrite - 1) / bytesPerChecksum + 1) * checksumSize;\n-              packet.writeChecksum(checksumBuf, ckOff, ckLen);\n-              ckOff +\u003d ckLen;\n-              packet.writeData(buffer, toWrite);\n+    int ckOff \u003d 0;\n+    while (targetBuffer.remaining() \u003e 0) {\n+      DFSPacket packet \u003d new DFSPacket(packetBuf,\n+          stripedWriter.getMaxChunksPerPacket(),\n+          blockOffset4Target, seqNo4Target++,\n+          stripedWriter.getChecksumSize(), false);\n+      int maxBytesToPacket \u003d stripedWriter.getMaxChunksPerPacket()\n+          * stripedWriter.getBytesPerChecksum();\n+      int toWrite \u003d targetBuffer.remaining() \u003e maxBytesToPacket ?\n+          maxBytesToPacket : targetBuffer.remaining();\n+      int ckLen \u003d ((toWrite - 1) / stripedWriter.getBytesPerChecksum() + 1)\n+          * stripedWriter.getChecksumSize();\n+      packet.writeChecksum(stripedWriter.getChecksumBuf(), ckOff, ckLen);\n+      ckOff +\u003d ckLen;\n+      packet.writeData(targetBuffer, toWrite);\n \n-              // Send packet\n-              packet.writeTo(targetOutputStreams[i]);\n+      // Send packet\n+      packet.writeTo(targetOutputStream);\n \n-              blockOffset4Targets[i] +\u003d toWrite;\n-              nsuccess++;\n-              success \u003d true;\n-            }\n-          } catch (IOException e) {\n-            LOG.warn(e.getMessage());\n-          }\n-          targetsStatus[i] \u003d success;\n-        }\n-      }\n-      return nsuccess;\n-    }\n\\ No newline at end of file\n+      blockOffset4Target +\u003d toWrite;\n+    }\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  void transferData2Target(byte[] packetBuf) throws IOException {\n    if (targetBuffer.remaining() \u003d\u003d 0) {\n      return;\n    }\n\n    stripedWriter.getChecksum().calculateChunkedSums(\n        targetBuffer.array(), 0, targetBuffer.remaining(),\n        stripedWriter.getChecksumBuf(), 0);\n\n    int ckOff \u003d 0;\n    while (targetBuffer.remaining() \u003e 0) {\n      DFSPacket packet \u003d new DFSPacket(packetBuf,\n          stripedWriter.getMaxChunksPerPacket(),\n          blockOffset4Target, seqNo4Target++,\n          stripedWriter.getChecksumSize(), false);\n      int maxBytesToPacket \u003d stripedWriter.getMaxChunksPerPacket()\n          * stripedWriter.getBytesPerChecksum();\n      int toWrite \u003d targetBuffer.remaining() \u003e maxBytesToPacket ?\n          maxBytesToPacket : targetBuffer.remaining();\n      int ckLen \u003d ((toWrite - 1) / stripedWriter.getBytesPerChecksum() + 1)\n          * stripedWriter.getChecksumSize();\n      packet.writeChecksum(stripedWriter.getChecksumBuf(), ckOff, ckLen);\n      ckOff +\u003d ckLen;\n      packet.writeData(targetBuffer, toWrite);\n\n      // Send packet\n      packet.writeTo(targetOutputStream);\n\n      blockOffset4Target +\u003d toWrite;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/StripedBlockWriter.java",
          "extendedDetails": {
            "oldValue": "[targetsStatus-boolean[]]",
            "newValue": "[packetBuf-byte[]]"
          }
        }
      ]
    },
    "6616de24cb14f1c2d0d6568fd4382062618834bd": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-7348. Erasure Coding: DataNode reconstruct striped blocks. Contributed by Yi Liu.\n",
      "commitDate": "26/05/15 12:01 PM",
      "commitName": "6616de24cb14f1c2d0d6568fd4382062618834bd",
      "commitAuthor": "Zhe Zhang",
      "diff": "@@ -0,0 +1,42 @@\n+    private int transferData2Targets(boolean[] targetsStatus) {\n+      int nsuccess \u003d 0;\n+      for (int i \u003d 0; i \u003c targets.length; i++) {\n+        if (targetsStatus[i]) {\n+          boolean success \u003d false;\n+          try {\n+            ByteBuffer buffer \u003d targetBuffers[i];\n+            \n+            if (buffer.remaining() \u003d\u003d 0) {\n+              continue;\n+            }\n+\n+            checksum.calculateChunkedSums(\n+                buffer.array(), 0, buffer.remaining(), checksumBuf, 0);\n+\n+            int ckOff \u003d 0;\n+            while (buffer.remaining() \u003e 0) {\n+              DFSPacket packet \u003d new DFSPacket(packetBuf, maxChunksPerPacket,\n+                  blockOffset4Targets[i], seqNo4Targets[i]++, checksumSize, false);\n+              int maxBytesToPacket \u003d maxChunksPerPacket * bytesPerChecksum;\n+              int toWrite \u003d buffer.remaining() \u003e maxBytesToPacket ?\n+                  maxBytesToPacket : buffer.remaining();\n+              int ckLen \u003d ((toWrite - 1) / bytesPerChecksum + 1) * checksumSize;\n+              packet.writeChecksum(checksumBuf, ckOff, ckLen);\n+              ckOff +\u003d ckLen;\n+              packet.writeData(buffer, toWrite);\n+\n+              // Send packet\n+              packet.writeTo(targetOutputStreams[i]);\n+\n+              blockOffset4Targets[i] +\u003d toWrite;\n+              nsuccess++;\n+              success \u003d true;\n+            }\n+          } catch (IOException e) {\n+            LOG.warn(e.getMessage());\n+          }\n+          targetsStatus[i] \u003d success;\n+        }\n+      }\n+      return nsuccess;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private int transferData2Targets(boolean[] targetsStatus) {\n      int nsuccess \u003d 0;\n      for (int i \u003d 0; i \u003c targets.length; i++) {\n        if (targetsStatus[i]) {\n          boolean success \u003d false;\n          try {\n            ByteBuffer buffer \u003d targetBuffers[i];\n            \n            if (buffer.remaining() \u003d\u003d 0) {\n              continue;\n            }\n\n            checksum.calculateChunkedSums(\n                buffer.array(), 0, buffer.remaining(), checksumBuf, 0);\n\n            int ckOff \u003d 0;\n            while (buffer.remaining() \u003e 0) {\n              DFSPacket packet \u003d new DFSPacket(packetBuf, maxChunksPerPacket,\n                  blockOffset4Targets[i], seqNo4Targets[i]++, checksumSize, false);\n              int maxBytesToPacket \u003d maxChunksPerPacket * bytesPerChecksum;\n              int toWrite \u003d buffer.remaining() \u003e maxBytesToPacket ?\n                  maxBytesToPacket : buffer.remaining();\n              int ckLen \u003d ((toWrite - 1) / bytesPerChecksum + 1) * checksumSize;\n              packet.writeChecksum(checksumBuf, ckOff, ckLen);\n              ckOff +\u003d ckLen;\n              packet.writeData(buffer, toWrite);\n\n              // Send packet\n              packet.writeTo(targetOutputStreams[i]);\n\n              blockOffset4Targets[i] +\u003d toWrite;\n              nsuccess++;\n              success \u003d true;\n            }\n          } catch (IOException e) {\n            LOG.warn(e.getMessage());\n          }\n          targetsStatus[i] \u003d success;\n        }\n      }\n      return nsuccess;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/ErasureCodingWorker.java"
    }
  }
}