{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DefaultRequestInterceptor.java",
  "functionName": "getTokenService",
  "functionId": "getTokenService___conf-Configuration__address-String__defaultAddr-String__defaultPort-int",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/DefaultRequestInterceptor.java",
  "functionStartLine": 253,
  "functionEndLine": 272,
  "numCommitsSeen": 9,
  "timeTaken": 1603,
  "changeHistory": [
    "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b"
  ],
  "changeHistoryShort": {
    "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2885. Create AMRMProxy request interceptor and ContainerAllocator to distribute OPPORTUNISTIC containers to appropriate Nodes (asuresh)\n\n(cherry picked from commit 2bf025278a318b0452fdc9ece4427b4c42124e39)\n",
      "commitDate": "24/04/16 10:38 PM",
      "commitName": "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,20 @@\n+  public static Text getTokenService(Configuration conf, String address,\n+      String defaultAddr, int defaultPort) {\n+    if (HAUtil.isHAEnabled(conf)) {\n+      // Build a list of service addresses to form the service name\n+      ArrayList\u003cString\u003e services \u003d new ArrayList\u003cString\u003e();\n+      YarnConfiguration yarnConf \u003d new YarnConfiguration(conf);\n+      for (String rmId : HAUtil.getRMHAIds(conf)) {\n+        // Set RM_ID to get the corresponding RM_ADDRESS\n+        yarnConf.set(YarnConfiguration.RM_HA_ID, rmId);\n+        services.add(SecurityUtil.buildTokenService(\n+            yarnConf.getSocketAddr(address, defaultAddr, defaultPort))\n+            .toString());\n+      }\n+      return new Text(Joiner.on(\u0027,\u0027).join(services));\n+    }\n+\n+    // Non-HA case - no need to set RM_ID\n+    return SecurityUtil.buildTokenService(conf.getSocketAddr(address,\n+        defaultAddr, defaultPort));\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static Text getTokenService(Configuration conf, String address,\n      String defaultAddr, int defaultPort) {\n    if (HAUtil.isHAEnabled(conf)) {\n      // Build a list of service addresses to form the service name\n      ArrayList\u003cString\u003e services \u003d new ArrayList\u003cString\u003e();\n      YarnConfiguration yarnConf \u003d new YarnConfiguration(conf);\n      for (String rmId : HAUtil.getRMHAIds(conf)) {\n        // Set RM_ID to get the corresponding RM_ADDRESS\n        yarnConf.set(YarnConfiguration.RM_HA_ID, rmId);\n        services.add(SecurityUtil.buildTokenService(\n            yarnConf.getSocketAddr(address, defaultAddr, defaultPort))\n            .toString());\n      }\n      return new Text(Joiner.on(\u0027,\u0027).join(services));\n    }\n\n    // Non-HA case - no need to set RM_ID\n    return SecurityUtil.buildTokenService(conf.getSocketAddr(address,\n        defaultAddr, defaultPort));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/DefaultRequestInterceptor.java"
    }
  }
}