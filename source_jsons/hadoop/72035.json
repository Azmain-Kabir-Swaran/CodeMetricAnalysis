{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MultiSchemeAuthenticationHandler.java",
  "functionName": "authenticate",
  "functionId": "authenticate___request-HttpServletRequest__response-HttpServletResponse",
  "sourceFilePath": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/MultiSchemeAuthenticationHandler.java",
  "functionStartLine": 183,
  "functionEndLine": 209,
  "numCommitsSeen": 2,
  "timeTaken": 980,
  "changeHistory": [
    "092ebdf885468a2bf79cbfb168286b7cddc4a0db",
    "4bca385241c0fc8ff168c7b0f2984a7aed2c7492"
  ],
  "changeHistoryShort": {
    "092ebdf885468a2bf79cbfb168286b7cddc4a0db": "Ybodychange",
    "4bca385241c0fc8ff168c7b0f2984a7aed2c7492": "Yintroduced"
  },
  "changeHistoryDetails": {
    "092ebdf885468a2bf79cbfb168286b7cddc4a0db": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12940. Fix warnings from Spotbugs in hadoop-common.\n",
      "commitDate": "22/06/17 6:28 PM",
      "commitName": "092ebdf885468a2bf79cbfb168286b7cddc4a0db",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "18/10/16 6:32 PM",
      "commitNameOld": "4bca385241c0fc8ff168c7b0f2984a7aed2c7492",
      "commitAuthorOld": "Benoy Antony",
      "daysBetweenCommits": 247.0,
      "commitsBetweenForRepo": 1437,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,27 @@\n   public AuthenticationToken authenticate(HttpServletRequest request,\n       HttpServletResponse response)\n           throws IOException, AuthenticationException {\n     String authorization \u003d\n         request.getHeader(HttpConstants.AUTHORIZATION_HEADER);\n     if (authorization !\u003d null) {\n-      for (String scheme : schemeToAuthHandlerMapping.keySet()) {\n-        if (AuthenticationHandlerUtil.matchAuthScheme(scheme, authorization)) {\n-          AuthenticationHandler handler \u003d\n-              schemeToAuthHandlerMapping.get(scheme);\n-          AuthenticationToken token \u003d handler.authenticate(request, response);\n+      for (Map.Entry\u003cString, AuthenticationHandler\u003e entry :\n+          schemeToAuthHandlerMapping.entrySet()) {\n+        if (AuthenticationHandlerUtil.matchAuthScheme(\n+            entry.getKey(), authorization)) {\n+          AuthenticationToken token \u003d\n+              entry.getValue().authenticate(request, response);\n           logger.trace(\"Token generated with type {}\", token.getType());\n           return token;\n         }\n       }\n     }\n \n     // Handle the case when (authorization \u003d\u003d null) or an invalid authorization\n     // header (e.g. a header value without the scheme name).\n     response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n     for (String scheme : schemeToAuthHandlerMapping.keySet()) {\n       response.addHeader(HttpConstants.WWW_AUTHENTICATE_HEADER, scheme);\n     }\n \n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public AuthenticationToken authenticate(HttpServletRequest request,\n      HttpServletResponse response)\n          throws IOException, AuthenticationException {\n    String authorization \u003d\n        request.getHeader(HttpConstants.AUTHORIZATION_HEADER);\n    if (authorization !\u003d null) {\n      for (Map.Entry\u003cString, AuthenticationHandler\u003e entry :\n          schemeToAuthHandlerMapping.entrySet()) {\n        if (AuthenticationHandlerUtil.matchAuthScheme(\n            entry.getKey(), authorization)) {\n          AuthenticationToken token \u003d\n              entry.getValue().authenticate(request, response);\n          logger.trace(\"Token generated with type {}\", token.getType());\n          return token;\n        }\n      }\n    }\n\n    // Handle the case when (authorization \u003d\u003d null) or an invalid authorization\n    // header (e.g. a header value without the scheme name).\n    response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n    for (String scheme : schemeToAuthHandlerMapping.keySet()) {\n      response.addHeader(HttpConstants.WWW_AUTHENTICATE_HEADER, scheme);\n    }\n\n    return null;\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/MultiSchemeAuthenticationHandler.java",
      "extendedDetails": {}
    },
    "4bca385241c0fc8ff168c7b0f2984a7aed2c7492": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-12082 Support multiple authentication schemes via AuthenticationFilter\n",
      "commitDate": "18/10/16 6:32 PM",
      "commitName": "4bca385241c0fc8ff168c7b0f2984a7aed2c7492",
      "commitAuthor": "Benoy Antony",
      "diff": "@@ -0,0 +1,26 @@\n+  public AuthenticationToken authenticate(HttpServletRequest request,\n+      HttpServletResponse response)\n+          throws IOException, AuthenticationException {\n+    String authorization \u003d\n+        request.getHeader(HttpConstants.AUTHORIZATION_HEADER);\n+    if (authorization !\u003d null) {\n+      for (String scheme : schemeToAuthHandlerMapping.keySet()) {\n+        if (AuthenticationHandlerUtil.matchAuthScheme(scheme, authorization)) {\n+          AuthenticationHandler handler \u003d\n+              schemeToAuthHandlerMapping.get(scheme);\n+          AuthenticationToken token \u003d handler.authenticate(request, response);\n+          logger.trace(\"Token generated with type {}\", token.getType());\n+          return token;\n+        }\n+      }\n+    }\n+\n+    // Handle the case when (authorization \u003d\u003d null) or an invalid authorization\n+    // header (e.g. a header value without the scheme name).\n+    response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n+    for (String scheme : schemeToAuthHandlerMapping.keySet()) {\n+      response.addHeader(HttpConstants.WWW_AUTHENTICATE_HEADER, scheme);\n+    }\n+\n+    return null;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public AuthenticationToken authenticate(HttpServletRequest request,\n      HttpServletResponse response)\n          throws IOException, AuthenticationException {\n    String authorization \u003d\n        request.getHeader(HttpConstants.AUTHORIZATION_HEADER);\n    if (authorization !\u003d null) {\n      for (String scheme : schemeToAuthHandlerMapping.keySet()) {\n        if (AuthenticationHandlerUtil.matchAuthScheme(scheme, authorization)) {\n          AuthenticationHandler handler \u003d\n              schemeToAuthHandlerMapping.get(scheme);\n          AuthenticationToken token \u003d handler.authenticate(request, response);\n          logger.trace(\"Token generated with type {}\", token.getType());\n          return token;\n        }\n      }\n    }\n\n    // Handle the case when (authorization \u003d\u003d null) or an invalid authorization\n    // header (e.g. a header value without the scheme name).\n    response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n    for (String scheme : schemeToAuthHandlerMapping.keySet()) {\n      response.addHeader(HttpConstants.WWW_AUTHENTICATE_HEADER, scheme);\n    }\n\n    return null;\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/MultiSchemeAuthenticationHandler.java"
    }
  }
}