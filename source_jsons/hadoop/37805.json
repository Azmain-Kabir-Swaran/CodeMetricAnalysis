{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMServerUtils.java",
  "functionName": "validateAndSplitUpdateResourceRequests",
  "functionId": "validateAndSplitUpdateResourceRequests___rmContext-RMContext__request-AllocateRequest__maximumAllocation-Resource__updateErrors-List__UpdateContainerError__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMServerUtils.java",
  "functionStartLine": 156,
  "functionEndLine": 201,
  "numCommitsSeen": 79,
  "timeTaken": 4916,
  "changeHistory": [
    "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4",
    "aaf106fde35ec97e2e2ea4d7a67434038c4273ac",
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
    "d6d9cff21b7b6141ed88359652cf22e8973c0661"
  ],
  "changeHistoryShort": {
    "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4": "Ybodychange",
    "aaf106fde35ec97e2e2ea4d7a67434038c4273ac": "Ybodychange",
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
    "d6d9cff21b7b6141ed88359652cf22e8973c0661": "Yintroduced"
  },
  "changeHistoryDetails": {
    "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6216. Unify Container Resizing code paths with Container Updates making it scheduler agnostic. (Arun Suresh via wangda)\n",
      "commitDate": "28/02/17 10:35 AM",
      "commitName": "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "15/02/17 1:18 AM",
      "commitNameOld": "b7613e0f406fb2b9bd5b1b3c79658e801f63c587",
      "commitAuthorOld": "Varun Saxena",
      "daysBetweenCommits": 13.39,
      "commitsBetweenForRepo": 79,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,46 @@\n       validateAndSplitUpdateResourceRequests(RMContext rmContext,\n       AllocateRequest request, Resource maximumAllocation,\n       List\u003cUpdateContainerError\u003e updateErrors) {\n     ContainerUpdates updateRequests \u003d\n         new ContainerUpdates();\n     Set\u003cContainerId\u003e outstandingUpdate \u003d new HashSet\u003c\u003e();\n     for (UpdateContainerRequest updateReq : request.getUpdateRequests()) {\n       RMContainer rmContainer \u003d rmContext.getScheduler().getRMContainer(\n           updateReq.getContainerId());\n       String msg \u003d validateContainerIdAndVersion(outstandingUpdate,\n           updateReq, rmContainer);\n       ContainerUpdateType updateType \u003d updateReq.getContainerUpdateType();\n       if (msg \u003d\u003d null) {\n         if ((updateType !\u003d ContainerUpdateType.PROMOTE_EXECUTION_TYPE) \u0026\u0026\n             (updateType !\u003dContainerUpdateType.DEMOTE_EXECUTION_TYPE)) {\n-          Resource original \u003d rmContainer.getContainer().getResource();\n-          Resource target \u003d updateReq.getCapability();\n-          if (Resources.fitsIn(target, original)) {\n-            // This is a decrease request\n-            if (validateIncreaseDecreaseRequest(rmContext, updateReq,\n-                maximumAllocation, false)) {\n-              updateRequests.getDecreaseRequests().add(updateReq);\n-              outstandingUpdate.add(updateReq.getContainerId());\n-            } else {\n-              msg \u003d RESOURCE_OUTSIDE_ALLOWED_RANGE;\n-            }\n-          } else {\n-            // This is an increase request\n-            if (validateIncreaseDecreaseRequest(rmContext, updateReq,\n-                maximumAllocation, true)) {\n+          if (validateIncreaseDecreaseRequest(\n+              rmContext, updateReq, maximumAllocation)) {\n+            if (ContainerUpdateType.INCREASE_RESOURCE \u003d\u003d updateType) {\n               updateRequests.getIncreaseRequests().add(updateReq);\n-              outstandingUpdate.add(updateReq.getContainerId());\n             } else {\n-              msg \u003d RESOURCE_OUTSIDE_ALLOWED_RANGE;\n+              updateRequests.getDecreaseRequests().add(updateReq);\n             }\n+            outstandingUpdate.add(updateReq.getContainerId());\n+          } else {\n+            msg \u003d RESOURCE_OUTSIDE_ALLOWED_RANGE;\n           }\n         } else {\n           ExecutionType original \u003d rmContainer.getExecutionType();\n           ExecutionType target \u003d updateReq.getExecutionType();\n           if (target !\u003d original) {\n             if (target \u003d\u003d ExecutionType.GUARANTEED \u0026\u0026\n                 original \u003d\u003d ExecutionType.OPPORTUNISTIC) {\n               updateRequests.getPromotionRequests().add(updateReq);\n               outstandingUpdate.add(updateReq.getContainerId());\n             } else if (target \u003d\u003d ExecutionType.OPPORTUNISTIC \u0026\u0026\n                 original \u003d\u003d ExecutionType.GUARANTEED) {\n               updateRequests.getDemotionRequests().add(updateReq);\n               outstandingUpdate.add(updateReq.getContainerId());\n             }\n           }\n         }\n       }\n       checkAndcreateUpdateError(updateErrors, updateReq, rmContainer, msg);\n     }\n     return updateRequests;\n   }\n\\ No newline at end of file\n",
      "actualSource": "      validateAndSplitUpdateResourceRequests(RMContext rmContext,\n      AllocateRequest request, Resource maximumAllocation,\n      List\u003cUpdateContainerError\u003e updateErrors) {\n    ContainerUpdates updateRequests \u003d\n        new ContainerUpdates();\n    Set\u003cContainerId\u003e outstandingUpdate \u003d new HashSet\u003c\u003e();\n    for (UpdateContainerRequest updateReq : request.getUpdateRequests()) {\n      RMContainer rmContainer \u003d rmContext.getScheduler().getRMContainer(\n          updateReq.getContainerId());\n      String msg \u003d validateContainerIdAndVersion(outstandingUpdate,\n          updateReq, rmContainer);\n      ContainerUpdateType updateType \u003d updateReq.getContainerUpdateType();\n      if (msg \u003d\u003d null) {\n        if ((updateType !\u003d ContainerUpdateType.PROMOTE_EXECUTION_TYPE) \u0026\u0026\n            (updateType !\u003dContainerUpdateType.DEMOTE_EXECUTION_TYPE)) {\n          if (validateIncreaseDecreaseRequest(\n              rmContext, updateReq, maximumAllocation)) {\n            if (ContainerUpdateType.INCREASE_RESOURCE \u003d\u003d updateType) {\n              updateRequests.getIncreaseRequests().add(updateReq);\n            } else {\n              updateRequests.getDecreaseRequests().add(updateReq);\n            }\n            outstandingUpdate.add(updateReq.getContainerId());\n          } else {\n            msg \u003d RESOURCE_OUTSIDE_ALLOWED_RANGE;\n          }\n        } else {\n          ExecutionType original \u003d rmContainer.getExecutionType();\n          ExecutionType target \u003d updateReq.getExecutionType();\n          if (target !\u003d original) {\n            if (target \u003d\u003d ExecutionType.GUARANTEED \u0026\u0026\n                original \u003d\u003d ExecutionType.OPPORTUNISTIC) {\n              updateRequests.getPromotionRequests().add(updateReq);\n              outstandingUpdate.add(updateReq.getContainerId());\n            } else if (target \u003d\u003d ExecutionType.OPPORTUNISTIC \u0026\u0026\n                original \u003d\u003d ExecutionType.GUARANTEED) {\n              updateRequests.getDemotionRequests().add(updateReq);\n              outstandingUpdate.add(updateReq.getContainerId());\n            }\n          }\n        }\n      }\n      checkAndcreateUpdateError(updateErrors, updateReq, rmContainer, msg);\n    }\n    return updateRequests;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMServerUtils.java",
      "extendedDetails": {}
    },
    "aaf106fde35ec97e2e2ea4d7a67434038c4273ac": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5966. AMRMClient changes to support ExecutionType update. (asuresh)\n",
      "commitDate": "14/02/17 6:09 AM",
      "commitName": "aaf106fde35ec97e2e2ea4d7a67434038c4273ac",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "07/01/17 8:24 AM",
      "commitNameOld": "ac16400e1fb85a4186e5bf5bbc9cf204735ae74f",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 37.91,
      "commitsBetweenForRepo": 175,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,56 @@\n       validateAndSplitUpdateResourceRequests(RMContext rmContext,\n       AllocateRequest request, Resource maximumAllocation,\n       List\u003cUpdateContainerError\u003e updateErrors) {\n     ContainerUpdates updateRequests \u003d\n         new ContainerUpdates();\n     Set\u003cContainerId\u003e outstandingUpdate \u003d new HashSet\u003c\u003e();\n     for (UpdateContainerRequest updateReq : request.getUpdateRequests()) {\n       RMContainer rmContainer \u003d rmContext.getScheduler().getRMContainer(\n           updateReq.getContainerId());\n       String msg \u003d validateContainerIdAndVersion(outstandingUpdate,\n           updateReq, rmContainer);\n       ContainerUpdateType updateType \u003d updateReq.getContainerUpdateType();\n       if (msg \u003d\u003d null) {\n         if ((updateType !\u003d ContainerUpdateType.PROMOTE_EXECUTION_TYPE) \u0026\u0026\n             (updateType !\u003dContainerUpdateType.DEMOTE_EXECUTION_TYPE)) {\n           Resource original \u003d rmContainer.getContainer().getResource();\n           Resource target \u003d updateReq.getCapability();\n           if (Resources.fitsIn(target, original)) {\n             // This is a decrease request\n             if (validateIncreaseDecreaseRequest(rmContext, updateReq,\n                 maximumAllocation, false)) {\n               updateRequests.getDecreaseRequests().add(updateReq);\n               outstandingUpdate.add(updateReq.getContainerId());\n             } else {\n               msg \u003d RESOURCE_OUTSIDE_ALLOWED_RANGE;\n             }\n           } else {\n             // This is an increase request\n             if (validateIncreaseDecreaseRequest(rmContext, updateReq,\n                 maximumAllocation, true)) {\n               updateRequests.getIncreaseRequests().add(updateReq);\n               outstandingUpdate.add(updateReq.getContainerId());\n             } else {\n               msg \u003d RESOURCE_OUTSIDE_ALLOWED_RANGE;\n             }\n           }\n         } else {\n           ExecutionType original \u003d rmContainer.getExecutionType();\n           ExecutionType target \u003d updateReq.getExecutionType();\n           if (target !\u003d original) {\n             if (target \u003d\u003d ExecutionType.GUARANTEED \u0026\u0026\n                 original \u003d\u003d ExecutionType.OPPORTUNISTIC) {\n               updateRequests.getPromotionRequests().add(updateReq);\n               outstandingUpdate.add(updateReq.getContainerId());\n             } else if (target \u003d\u003d ExecutionType.OPPORTUNISTIC \u0026\u0026\n                 original \u003d\u003d ExecutionType.GUARANTEED) {\n               updateRequests.getDemotionRequests().add(updateReq);\n               outstandingUpdate.add(updateReq.getContainerId());\n             }\n           }\n         }\n       }\n-      checkAndcreateUpdateError(updateErrors, updateReq, msg);\n+      checkAndcreateUpdateError(updateErrors, updateReq, rmContainer, msg);\n     }\n     return updateRequests;\n   }\n\\ No newline at end of file\n",
      "actualSource": "      validateAndSplitUpdateResourceRequests(RMContext rmContext,\n      AllocateRequest request, Resource maximumAllocation,\n      List\u003cUpdateContainerError\u003e updateErrors) {\n    ContainerUpdates updateRequests \u003d\n        new ContainerUpdates();\n    Set\u003cContainerId\u003e outstandingUpdate \u003d new HashSet\u003c\u003e();\n    for (UpdateContainerRequest updateReq : request.getUpdateRequests()) {\n      RMContainer rmContainer \u003d rmContext.getScheduler().getRMContainer(\n          updateReq.getContainerId());\n      String msg \u003d validateContainerIdAndVersion(outstandingUpdate,\n          updateReq, rmContainer);\n      ContainerUpdateType updateType \u003d updateReq.getContainerUpdateType();\n      if (msg \u003d\u003d null) {\n        if ((updateType !\u003d ContainerUpdateType.PROMOTE_EXECUTION_TYPE) \u0026\u0026\n            (updateType !\u003dContainerUpdateType.DEMOTE_EXECUTION_TYPE)) {\n          Resource original \u003d rmContainer.getContainer().getResource();\n          Resource target \u003d updateReq.getCapability();\n          if (Resources.fitsIn(target, original)) {\n            // This is a decrease request\n            if (validateIncreaseDecreaseRequest(rmContext, updateReq,\n                maximumAllocation, false)) {\n              updateRequests.getDecreaseRequests().add(updateReq);\n              outstandingUpdate.add(updateReq.getContainerId());\n            } else {\n              msg \u003d RESOURCE_OUTSIDE_ALLOWED_RANGE;\n            }\n          } else {\n            // This is an increase request\n            if (validateIncreaseDecreaseRequest(rmContext, updateReq,\n                maximumAllocation, true)) {\n              updateRequests.getIncreaseRequests().add(updateReq);\n              outstandingUpdate.add(updateReq.getContainerId());\n            } else {\n              msg \u003d RESOURCE_OUTSIDE_ALLOWED_RANGE;\n            }\n          }\n        } else {\n          ExecutionType original \u003d rmContainer.getExecutionType();\n          ExecutionType target \u003d updateReq.getExecutionType();\n          if (target !\u003d original) {\n            if (target \u003d\u003d ExecutionType.GUARANTEED \u0026\u0026\n                original \u003d\u003d ExecutionType.OPPORTUNISTIC) {\n              updateRequests.getPromotionRequests().add(updateReq);\n              outstandingUpdate.add(updateReq.getContainerId());\n            } else if (target \u003d\u003d ExecutionType.OPPORTUNISTIC \u0026\u0026\n                original \u003d\u003d ExecutionType.GUARANTEED) {\n              updateRequests.getDemotionRequests().add(updateReq);\n              outstandingUpdate.add(updateReq.getContainerId());\n            }\n          }\n        }\n      }\n      checkAndcreateUpdateError(updateErrors, updateReq, rmContainer, msg);\n    }\n    return updateRequests;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMServerUtils.java",
      "extendedDetails": {}
    },
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-5959. RM changes to support change of container ExecutionType. (Arun Suresh via wangda)\n",
      "commitDate": "05/01/17 10:31 AM",
      "commitName": "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5959. RM changes to support change of container ExecutionType. (Arun Suresh via wangda)\n",
          "commitDate": "05/01/17 10:31 AM",
          "commitName": "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "08/12/16 2:23 AM",
          "commitNameOld": "74d0066d3392169bec872f438a0818e2f5323010",
          "commitAuthorOld": "Sunil G",
          "daysBetweenCommits": 28.34,
          "commitsBetweenForRepo": 117,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,59 +1,56 @@\n       validateAndSplitUpdateResourceRequests(RMContext rmContext,\n       AllocateRequest request, Resource maximumAllocation,\n-      List\u003cUpdateContainerRequest\u003e increaseResourceReqs,\n-      List\u003cUpdateContainerRequest\u003e decreaseResourceReqs) {\n-    List\u003cUpdateContainerError\u003e errors \u003d new ArrayList\u003c\u003e();\n+      List\u003cUpdateContainerError\u003e updateErrors) {\n+    ContainerUpdates updateRequests \u003d\n+        new ContainerUpdates();\n     Set\u003cContainerId\u003e outstandingUpdate \u003d new HashSet\u003c\u003e();\n     for (UpdateContainerRequest updateReq : request.getUpdateRequests()) {\n       RMContainer rmContainer \u003d rmContext.getScheduler().getRMContainer(\n           updateReq.getContainerId());\n-      String msg \u003d null;\n-      if (rmContainer \u003d\u003d null) {\n-        msg \u003d INVALID_CONTAINER_ID;\n-      }\n-      // Only allow updates if the requested version matches the current\n-      // version\n-      if (msg \u003d\u003d null \u0026\u0026 updateReq.getContainerVersion() !\u003d\n-          rmContainer.getContainer().getVersion()) {\n-        msg \u003d INCORRECT_CONTAINER_VERSION_ERROR + \"|\"\n-            + updateReq.getContainerVersion() + \"|\"\n-            + rmContainer.getContainer().getVersion();\n-      }\n-      // No more than 1 container update per request.\n-      if (msg \u003d\u003d null \u0026\u0026\n-          outstandingUpdate.contains(updateReq.getContainerId())) {\n-        msg \u003d UPDATE_OUTSTANDING_ERROR;\n-      }\n+      String msg \u003d validateContainerIdAndVersion(outstandingUpdate,\n+          updateReq, rmContainer);\n+      ContainerUpdateType updateType \u003d updateReq.getContainerUpdateType();\n       if (msg \u003d\u003d null) {\n-        Resource original \u003d rmContainer.getContainer().getResource();\n-        Resource target \u003d updateReq.getCapability();\n-        if (Resources.fitsIn(target, original)) {\n-          // This is a decrease request\n-          if (validateIncreaseDecreaseRequest(rmContext, updateReq,\n-              maximumAllocation, false)) {\n-            decreaseResourceReqs.add(updateReq);\n-            outstandingUpdate.add(updateReq.getContainerId());\n+        if ((updateType !\u003d ContainerUpdateType.PROMOTE_EXECUTION_TYPE) \u0026\u0026\n+            (updateType !\u003dContainerUpdateType.DEMOTE_EXECUTION_TYPE)) {\n+          Resource original \u003d rmContainer.getContainer().getResource();\n+          Resource target \u003d updateReq.getCapability();\n+          if (Resources.fitsIn(target, original)) {\n+            // This is a decrease request\n+            if (validateIncreaseDecreaseRequest(rmContext, updateReq,\n+                maximumAllocation, false)) {\n+              updateRequests.getDecreaseRequests().add(updateReq);\n+              outstandingUpdate.add(updateReq.getContainerId());\n+            } else {\n+              msg \u003d RESOURCE_OUTSIDE_ALLOWED_RANGE;\n+            }\n           } else {\n-            msg \u003d RESOURCE_OUTSIDE_ALLOWED_RANGE;\n+            // This is an increase request\n+            if (validateIncreaseDecreaseRequest(rmContext, updateReq,\n+                maximumAllocation, true)) {\n+              updateRequests.getIncreaseRequests().add(updateReq);\n+              outstandingUpdate.add(updateReq.getContainerId());\n+            } else {\n+              msg \u003d RESOURCE_OUTSIDE_ALLOWED_RANGE;\n+            }\n           }\n         } else {\n-          // This is an increase request\n-          if (validateIncreaseDecreaseRequest(rmContext, updateReq,\n-              maximumAllocation, true)) {\n-            increaseResourceReqs.add(updateReq);\n-            outstandingUpdate.add(updateReq.getContainerId());\n-          } else {\n-            msg \u003d RESOURCE_OUTSIDE_ALLOWED_RANGE;\n+          ExecutionType original \u003d rmContainer.getExecutionType();\n+          ExecutionType target \u003d updateReq.getExecutionType();\n+          if (target !\u003d original) {\n+            if (target \u003d\u003d ExecutionType.GUARANTEED \u0026\u0026\n+                original \u003d\u003d ExecutionType.OPPORTUNISTIC) {\n+              updateRequests.getPromotionRequests().add(updateReq);\n+              outstandingUpdate.add(updateReq.getContainerId());\n+            } else if (target \u003d\u003d ExecutionType.OPPORTUNISTIC \u0026\u0026\n+                original \u003d\u003d ExecutionType.GUARANTEED) {\n+              updateRequests.getDemotionRequests().add(updateReq);\n+              outstandingUpdate.add(updateReq.getContainerId());\n+            }\n           }\n         }\n       }\n-      if (msg !\u003d null) {\n-        UpdateContainerError updateError \u003d RECORD_FACTORY\n-            .newRecordInstance(UpdateContainerError.class);\n-        updateError.setReason(msg);\n-        updateError.setUpdateContainerRequest(updateReq);\n-        errors.add(updateError);\n-      }\n+      checkAndcreateUpdateError(updateErrors, updateReq, msg);\n     }\n-    return errors;\n+    return updateRequests;\n   }\n\\ No newline at end of file\n",
          "actualSource": "      validateAndSplitUpdateResourceRequests(RMContext rmContext,\n      AllocateRequest request, Resource maximumAllocation,\n      List\u003cUpdateContainerError\u003e updateErrors) {\n    ContainerUpdates updateRequests \u003d\n        new ContainerUpdates();\n    Set\u003cContainerId\u003e outstandingUpdate \u003d new HashSet\u003c\u003e();\n    for (UpdateContainerRequest updateReq : request.getUpdateRequests()) {\n      RMContainer rmContainer \u003d rmContext.getScheduler().getRMContainer(\n          updateReq.getContainerId());\n      String msg \u003d validateContainerIdAndVersion(outstandingUpdate,\n          updateReq, rmContainer);\n      ContainerUpdateType updateType \u003d updateReq.getContainerUpdateType();\n      if (msg \u003d\u003d null) {\n        if ((updateType !\u003d ContainerUpdateType.PROMOTE_EXECUTION_TYPE) \u0026\u0026\n            (updateType !\u003dContainerUpdateType.DEMOTE_EXECUTION_TYPE)) {\n          Resource original \u003d rmContainer.getContainer().getResource();\n          Resource target \u003d updateReq.getCapability();\n          if (Resources.fitsIn(target, original)) {\n            // This is a decrease request\n            if (validateIncreaseDecreaseRequest(rmContext, updateReq,\n                maximumAllocation, false)) {\n              updateRequests.getDecreaseRequests().add(updateReq);\n              outstandingUpdate.add(updateReq.getContainerId());\n            } else {\n              msg \u003d RESOURCE_OUTSIDE_ALLOWED_RANGE;\n            }\n          } else {\n            // This is an increase request\n            if (validateIncreaseDecreaseRequest(rmContext, updateReq,\n                maximumAllocation, true)) {\n              updateRequests.getIncreaseRequests().add(updateReq);\n              outstandingUpdate.add(updateReq.getContainerId());\n            } else {\n              msg \u003d RESOURCE_OUTSIDE_ALLOWED_RANGE;\n            }\n          }\n        } else {\n          ExecutionType original \u003d rmContainer.getExecutionType();\n          ExecutionType target \u003d updateReq.getExecutionType();\n          if (target !\u003d original) {\n            if (target \u003d\u003d ExecutionType.GUARANTEED \u0026\u0026\n                original \u003d\u003d ExecutionType.OPPORTUNISTIC) {\n              updateRequests.getPromotionRequests().add(updateReq);\n              outstandingUpdate.add(updateReq.getContainerId());\n            } else if (target \u003d\u003d ExecutionType.OPPORTUNISTIC \u0026\u0026\n                original \u003d\u003d ExecutionType.GUARANTEED) {\n              updateRequests.getDemotionRequests().add(updateReq);\n              outstandingUpdate.add(updateReq.getContainerId());\n            }\n          }\n        }\n      }\n      checkAndcreateUpdateError(updateErrors, updateReq, msg);\n    }\n    return updateRequests;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMServerUtils.java",
          "extendedDetails": {
            "oldValue": "[rmContext-RMContext, request-AllocateRequest, maximumAllocation-Resource, increaseResourceReqs-List\u003cUpdateContainerRequest\u003e, decreaseResourceReqs-List\u003cUpdateContainerRequest\u003e]",
            "newValue": "[rmContext-RMContext, request-AllocateRequest, maximumAllocation-Resource, updateErrors-List\u003cUpdateContainerError\u003e]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-5959. RM changes to support change of container ExecutionType. (Arun Suresh via wangda)\n",
          "commitDate": "05/01/17 10:31 AM",
          "commitName": "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "08/12/16 2:23 AM",
          "commitNameOld": "74d0066d3392169bec872f438a0818e2f5323010",
          "commitAuthorOld": "Sunil G",
          "daysBetweenCommits": 28.34,
          "commitsBetweenForRepo": 117,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,59 +1,56 @@\n       validateAndSplitUpdateResourceRequests(RMContext rmContext,\n       AllocateRequest request, Resource maximumAllocation,\n-      List\u003cUpdateContainerRequest\u003e increaseResourceReqs,\n-      List\u003cUpdateContainerRequest\u003e decreaseResourceReqs) {\n-    List\u003cUpdateContainerError\u003e errors \u003d new ArrayList\u003c\u003e();\n+      List\u003cUpdateContainerError\u003e updateErrors) {\n+    ContainerUpdates updateRequests \u003d\n+        new ContainerUpdates();\n     Set\u003cContainerId\u003e outstandingUpdate \u003d new HashSet\u003c\u003e();\n     for (UpdateContainerRequest updateReq : request.getUpdateRequests()) {\n       RMContainer rmContainer \u003d rmContext.getScheduler().getRMContainer(\n           updateReq.getContainerId());\n-      String msg \u003d null;\n-      if (rmContainer \u003d\u003d null) {\n-        msg \u003d INVALID_CONTAINER_ID;\n-      }\n-      // Only allow updates if the requested version matches the current\n-      // version\n-      if (msg \u003d\u003d null \u0026\u0026 updateReq.getContainerVersion() !\u003d\n-          rmContainer.getContainer().getVersion()) {\n-        msg \u003d INCORRECT_CONTAINER_VERSION_ERROR + \"|\"\n-            + updateReq.getContainerVersion() + \"|\"\n-            + rmContainer.getContainer().getVersion();\n-      }\n-      // No more than 1 container update per request.\n-      if (msg \u003d\u003d null \u0026\u0026\n-          outstandingUpdate.contains(updateReq.getContainerId())) {\n-        msg \u003d UPDATE_OUTSTANDING_ERROR;\n-      }\n+      String msg \u003d validateContainerIdAndVersion(outstandingUpdate,\n+          updateReq, rmContainer);\n+      ContainerUpdateType updateType \u003d updateReq.getContainerUpdateType();\n       if (msg \u003d\u003d null) {\n-        Resource original \u003d rmContainer.getContainer().getResource();\n-        Resource target \u003d updateReq.getCapability();\n-        if (Resources.fitsIn(target, original)) {\n-          // This is a decrease request\n-          if (validateIncreaseDecreaseRequest(rmContext, updateReq,\n-              maximumAllocation, false)) {\n-            decreaseResourceReqs.add(updateReq);\n-            outstandingUpdate.add(updateReq.getContainerId());\n+        if ((updateType !\u003d ContainerUpdateType.PROMOTE_EXECUTION_TYPE) \u0026\u0026\n+            (updateType !\u003dContainerUpdateType.DEMOTE_EXECUTION_TYPE)) {\n+          Resource original \u003d rmContainer.getContainer().getResource();\n+          Resource target \u003d updateReq.getCapability();\n+          if (Resources.fitsIn(target, original)) {\n+            // This is a decrease request\n+            if (validateIncreaseDecreaseRequest(rmContext, updateReq,\n+                maximumAllocation, false)) {\n+              updateRequests.getDecreaseRequests().add(updateReq);\n+              outstandingUpdate.add(updateReq.getContainerId());\n+            } else {\n+              msg \u003d RESOURCE_OUTSIDE_ALLOWED_RANGE;\n+            }\n           } else {\n-            msg \u003d RESOURCE_OUTSIDE_ALLOWED_RANGE;\n+            // This is an increase request\n+            if (validateIncreaseDecreaseRequest(rmContext, updateReq,\n+                maximumAllocation, true)) {\n+              updateRequests.getIncreaseRequests().add(updateReq);\n+              outstandingUpdate.add(updateReq.getContainerId());\n+            } else {\n+              msg \u003d RESOURCE_OUTSIDE_ALLOWED_RANGE;\n+            }\n           }\n         } else {\n-          // This is an increase request\n-          if (validateIncreaseDecreaseRequest(rmContext, updateReq,\n-              maximumAllocation, true)) {\n-            increaseResourceReqs.add(updateReq);\n-            outstandingUpdate.add(updateReq.getContainerId());\n-          } else {\n-            msg \u003d RESOURCE_OUTSIDE_ALLOWED_RANGE;\n+          ExecutionType original \u003d rmContainer.getExecutionType();\n+          ExecutionType target \u003d updateReq.getExecutionType();\n+          if (target !\u003d original) {\n+            if (target \u003d\u003d ExecutionType.GUARANTEED \u0026\u0026\n+                original \u003d\u003d ExecutionType.OPPORTUNISTIC) {\n+              updateRequests.getPromotionRequests().add(updateReq);\n+              outstandingUpdate.add(updateReq.getContainerId());\n+            } else if (target \u003d\u003d ExecutionType.OPPORTUNISTIC \u0026\u0026\n+                original \u003d\u003d ExecutionType.GUARANTEED) {\n+              updateRequests.getDemotionRequests().add(updateReq);\n+              outstandingUpdate.add(updateReq.getContainerId());\n+            }\n           }\n         }\n       }\n-      if (msg !\u003d null) {\n-        UpdateContainerError updateError \u003d RECORD_FACTORY\n-            .newRecordInstance(UpdateContainerError.class);\n-        updateError.setReason(msg);\n-        updateError.setUpdateContainerRequest(updateReq);\n-        errors.add(updateError);\n-      }\n+      checkAndcreateUpdateError(updateErrors, updateReq, msg);\n     }\n-    return errors;\n+    return updateRequests;\n   }\n\\ No newline at end of file\n",
          "actualSource": "      validateAndSplitUpdateResourceRequests(RMContext rmContext,\n      AllocateRequest request, Resource maximumAllocation,\n      List\u003cUpdateContainerError\u003e updateErrors) {\n    ContainerUpdates updateRequests \u003d\n        new ContainerUpdates();\n    Set\u003cContainerId\u003e outstandingUpdate \u003d new HashSet\u003c\u003e();\n    for (UpdateContainerRequest updateReq : request.getUpdateRequests()) {\n      RMContainer rmContainer \u003d rmContext.getScheduler().getRMContainer(\n          updateReq.getContainerId());\n      String msg \u003d validateContainerIdAndVersion(outstandingUpdate,\n          updateReq, rmContainer);\n      ContainerUpdateType updateType \u003d updateReq.getContainerUpdateType();\n      if (msg \u003d\u003d null) {\n        if ((updateType !\u003d ContainerUpdateType.PROMOTE_EXECUTION_TYPE) \u0026\u0026\n            (updateType !\u003dContainerUpdateType.DEMOTE_EXECUTION_TYPE)) {\n          Resource original \u003d rmContainer.getContainer().getResource();\n          Resource target \u003d updateReq.getCapability();\n          if (Resources.fitsIn(target, original)) {\n            // This is a decrease request\n            if (validateIncreaseDecreaseRequest(rmContext, updateReq,\n                maximumAllocation, false)) {\n              updateRequests.getDecreaseRequests().add(updateReq);\n              outstandingUpdate.add(updateReq.getContainerId());\n            } else {\n              msg \u003d RESOURCE_OUTSIDE_ALLOWED_RANGE;\n            }\n          } else {\n            // This is an increase request\n            if (validateIncreaseDecreaseRequest(rmContext, updateReq,\n                maximumAllocation, true)) {\n              updateRequests.getIncreaseRequests().add(updateReq);\n              outstandingUpdate.add(updateReq.getContainerId());\n            } else {\n              msg \u003d RESOURCE_OUTSIDE_ALLOWED_RANGE;\n            }\n          }\n        } else {\n          ExecutionType original \u003d rmContainer.getExecutionType();\n          ExecutionType target \u003d updateReq.getExecutionType();\n          if (target !\u003d original) {\n            if (target \u003d\u003d ExecutionType.GUARANTEED \u0026\u0026\n                original \u003d\u003d ExecutionType.OPPORTUNISTIC) {\n              updateRequests.getPromotionRequests().add(updateReq);\n              outstandingUpdate.add(updateReq.getContainerId());\n            } else if (target \u003d\u003d ExecutionType.OPPORTUNISTIC \u0026\u0026\n                original \u003d\u003d ExecutionType.GUARANTEED) {\n              updateRequests.getDemotionRequests().add(updateReq);\n              outstandingUpdate.add(updateReq.getContainerId());\n            }\n          }\n        }\n      }\n      checkAndcreateUpdateError(updateErrors, updateReq, msg);\n    }\n    return updateRequests;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMServerUtils.java",
          "extendedDetails": {
            "oldValue": "List\u003cUpdateContainerError\u003e",
            "newValue": "ContainerUpdates"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5959. RM changes to support change of container ExecutionType. (Arun Suresh via wangda)\n",
          "commitDate": "05/01/17 10:31 AM",
          "commitName": "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "08/12/16 2:23 AM",
          "commitNameOld": "74d0066d3392169bec872f438a0818e2f5323010",
          "commitAuthorOld": "Sunil G",
          "daysBetweenCommits": 28.34,
          "commitsBetweenForRepo": 117,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,59 +1,56 @@\n       validateAndSplitUpdateResourceRequests(RMContext rmContext,\n       AllocateRequest request, Resource maximumAllocation,\n-      List\u003cUpdateContainerRequest\u003e increaseResourceReqs,\n-      List\u003cUpdateContainerRequest\u003e decreaseResourceReqs) {\n-    List\u003cUpdateContainerError\u003e errors \u003d new ArrayList\u003c\u003e();\n+      List\u003cUpdateContainerError\u003e updateErrors) {\n+    ContainerUpdates updateRequests \u003d\n+        new ContainerUpdates();\n     Set\u003cContainerId\u003e outstandingUpdate \u003d new HashSet\u003c\u003e();\n     for (UpdateContainerRequest updateReq : request.getUpdateRequests()) {\n       RMContainer rmContainer \u003d rmContext.getScheduler().getRMContainer(\n           updateReq.getContainerId());\n-      String msg \u003d null;\n-      if (rmContainer \u003d\u003d null) {\n-        msg \u003d INVALID_CONTAINER_ID;\n-      }\n-      // Only allow updates if the requested version matches the current\n-      // version\n-      if (msg \u003d\u003d null \u0026\u0026 updateReq.getContainerVersion() !\u003d\n-          rmContainer.getContainer().getVersion()) {\n-        msg \u003d INCORRECT_CONTAINER_VERSION_ERROR + \"|\"\n-            + updateReq.getContainerVersion() + \"|\"\n-            + rmContainer.getContainer().getVersion();\n-      }\n-      // No more than 1 container update per request.\n-      if (msg \u003d\u003d null \u0026\u0026\n-          outstandingUpdate.contains(updateReq.getContainerId())) {\n-        msg \u003d UPDATE_OUTSTANDING_ERROR;\n-      }\n+      String msg \u003d validateContainerIdAndVersion(outstandingUpdate,\n+          updateReq, rmContainer);\n+      ContainerUpdateType updateType \u003d updateReq.getContainerUpdateType();\n       if (msg \u003d\u003d null) {\n-        Resource original \u003d rmContainer.getContainer().getResource();\n-        Resource target \u003d updateReq.getCapability();\n-        if (Resources.fitsIn(target, original)) {\n-          // This is a decrease request\n-          if (validateIncreaseDecreaseRequest(rmContext, updateReq,\n-              maximumAllocation, false)) {\n-            decreaseResourceReqs.add(updateReq);\n-            outstandingUpdate.add(updateReq.getContainerId());\n+        if ((updateType !\u003d ContainerUpdateType.PROMOTE_EXECUTION_TYPE) \u0026\u0026\n+            (updateType !\u003dContainerUpdateType.DEMOTE_EXECUTION_TYPE)) {\n+          Resource original \u003d rmContainer.getContainer().getResource();\n+          Resource target \u003d updateReq.getCapability();\n+          if (Resources.fitsIn(target, original)) {\n+            // This is a decrease request\n+            if (validateIncreaseDecreaseRequest(rmContext, updateReq,\n+                maximumAllocation, false)) {\n+              updateRequests.getDecreaseRequests().add(updateReq);\n+              outstandingUpdate.add(updateReq.getContainerId());\n+            } else {\n+              msg \u003d RESOURCE_OUTSIDE_ALLOWED_RANGE;\n+            }\n           } else {\n-            msg \u003d RESOURCE_OUTSIDE_ALLOWED_RANGE;\n+            // This is an increase request\n+            if (validateIncreaseDecreaseRequest(rmContext, updateReq,\n+                maximumAllocation, true)) {\n+              updateRequests.getIncreaseRequests().add(updateReq);\n+              outstandingUpdate.add(updateReq.getContainerId());\n+            } else {\n+              msg \u003d RESOURCE_OUTSIDE_ALLOWED_RANGE;\n+            }\n           }\n         } else {\n-          // This is an increase request\n-          if (validateIncreaseDecreaseRequest(rmContext, updateReq,\n-              maximumAllocation, true)) {\n-            increaseResourceReqs.add(updateReq);\n-            outstandingUpdate.add(updateReq.getContainerId());\n-          } else {\n-            msg \u003d RESOURCE_OUTSIDE_ALLOWED_RANGE;\n+          ExecutionType original \u003d rmContainer.getExecutionType();\n+          ExecutionType target \u003d updateReq.getExecutionType();\n+          if (target !\u003d original) {\n+            if (target \u003d\u003d ExecutionType.GUARANTEED \u0026\u0026\n+                original \u003d\u003d ExecutionType.OPPORTUNISTIC) {\n+              updateRequests.getPromotionRequests().add(updateReq);\n+              outstandingUpdate.add(updateReq.getContainerId());\n+            } else if (target \u003d\u003d ExecutionType.OPPORTUNISTIC \u0026\u0026\n+                original \u003d\u003d ExecutionType.GUARANTEED) {\n+              updateRequests.getDemotionRequests().add(updateReq);\n+              outstandingUpdate.add(updateReq.getContainerId());\n+            }\n           }\n         }\n       }\n-      if (msg !\u003d null) {\n-        UpdateContainerError updateError \u003d RECORD_FACTORY\n-            .newRecordInstance(UpdateContainerError.class);\n-        updateError.setReason(msg);\n-        updateError.setUpdateContainerRequest(updateReq);\n-        errors.add(updateError);\n-      }\n+      checkAndcreateUpdateError(updateErrors, updateReq, msg);\n     }\n-    return errors;\n+    return updateRequests;\n   }\n\\ No newline at end of file\n",
          "actualSource": "      validateAndSplitUpdateResourceRequests(RMContext rmContext,\n      AllocateRequest request, Resource maximumAllocation,\n      List\u003cUpdateContainerError\u003e updateErrors) {\n    ContainerUpdates updateRequests \u003d\n        new ContainerUpdates();\n    Set\u003cContainerId\u003e outstandingUpdate \u003d new HashSet\u003c\u003e();\n    for (UpdateContainerRequest updateReq : request.getUpdateRequests()) {\n      RMContainer rmContainer \u003d rmContext.getScheduler().getRMContainer(\n          updateReq.getContainerId());\n      String msg \u003d validateContainerIdAndVersion(outstandingUpdate,\n          updateReq, rmContainer);\n      ContainerUpdateType updateType \u003d updateReq.getContainerUpdateType();\n      if (msg \u003d\u003d null) {\n        if ((updateType !\u003d ContainerUpdateType.PROMOTE_EXECUTION_TYPE) \u0026\u0026\n            (updateType !\u003dContainerUpdateType.DEMOTE_EXECUTION_TYPE)) {\n          Resource original \u003d rmContainer.getContainer().getResource();\n          Resource target \u003d updateReq.getCapability();\n          if (Resources.fitsIn(target, original)) {\n            // This is a decrease request\n            if (validateIncreaseDecreaseRequest(rmContext, updateReq,\n                maximumAllocation, false)) {\n              updateRequests.getDecreaseRequests().add(updateReq);\n              outstandingUpdate.add(updateReq.getContainerId());\n            } else {\n              msg \u003d RESOURCE_OUTSIDE_ALLOWED_RANGE;\n            }\n          } else {\n            // This is an increase request\n            if (validateIncreaseDecreaseRequest(rmContext, updateReq,\n                maximumAllocation, true)) {\n              updateRequests.getIncreaseRequests().add(updateReq);\n              outstandingUpdate.add(updateReq.getContainerId());\n            } else {\n              msg \u003d RESOURCE_OUTSIDE_ALLOWED_RANGE;\n            }\n          }\n        } else {\n          ExecutionType original \u003d rmContainer.getExecutionType();\n          ExecutionType target \u003d updateReq.getExecutionType();\n          if (target !\u003d original) {\n            if (target \u003d\u003d ExecutionType.GUARANTEED \u0026\u0026\n                original \u003d\u003d ExecutionType.OPPORTUNISTIC) {\n              updateRequests.getPromotionRequests().add(updateReq);\n              outstandingUpdate.add(updateReq.getContainerId());\n            } else if (target \u003d\u003d ExecutionType.OPPORTUNISTIC \u0026\u0026\n                original \u003d\u003d ExecutionType.GUARANTEED) {\n              updateRequests.getDemotionRequests().add(updateReq);\n              outstandingUpdate.add(updateReq.getContainerId());\n            }\n          }\n        }\n      }\n      checkAndcreateUpdateError(updateErrors, updateReq, msg);\n    }\n    return updateRequests;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMServerUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "d6d9cff21b7b6141ed88359652cf22e8973c0661": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5221. Expose UpdateResourceRequest API to allow AM to request for change in container properties. (asuresh)\n",
      "commitDate": "30/08/16 3:52 PM",
      "commitName": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,59 @@\n+      validateAndSplitUpdateResourceRequests(RMContext rmContext,\n+      AllocateRequest request, Resource maximumAllocation,\n+      List\u003cUpdateContainerRequest\u003e increaseResourceReqs,\n+      List\u003cUpdateContainerRequest\u003e decreaseResourceReqs) {\n+    List\u003cUpdateContainerError\u003e errors \u003d new ArrayList\u003c\u003e();\n+    Set\u003cContainerId\u003e outstandingUpdate \u003d new HashSet\u003c\u003e();\n+    for (UpdateContainerRequest updateReq : request.getUpdateRequests()) {\n+      RMContainer rmContainer \u003d rmContext.getScheduler().getRMContainer(\n+          updateReq.getContainerId());\n+      String msg \u003d null;\n+      if (rmContainer \u003d\u003d null) {\n+        msg \u003d INVALID_CONTAINER_ID;\n+      }\n+      // Only allow updates if the requested version matches the current\n+      // version\n+      if (msg \u003d\u003d null \u0026\u0026 updateReq.getContainerVersion() !\u003d\n+          rmContainer.getContainer().getVersion()) {\n+        msg \u003d INCORRECT_CONTAINER_VERSION_ERROR + \"|\"\n+            + updateReq.getContainerVersion() + \"|\"\n+            + rmContainer.getContainer().getVersion();\n+      }\n+      // No more than 1 container update per request.\n+      if (msg \u003d\u003d null \u0026\u0026\n+          outstandingUpdate.contains(updateReq.getContainerId())) {\n+        msg \u003d UPDATE_OUTSTANDING_ERROR;\n+      }\n+      if (msg \u003d\u003d null) {\n+        Resource original \u003d rmContainer.getContainer().getResource();\n+        Resource target \u003d updateReq.getCapability();\n+        if (Resources.fitsIn(target, original)) {\n+          // This is a decrease request\n+          if (validateIncreaseDecreaseRequest(rmContext, updateReq,\n+              maximumAllocation, false)) {\n+            decreaseResourceReqs.add(updateReq);\n+            outstandingUpdate.add(updateReq.getContainerId());\n+          } else {\n+            msg \u003d RESOURCE_OUTSIDE_ALLOWED_RANGE;\n+          }\n+        } else {\n+          // This is an increase request\n+          if (validateIncreaseDecreaseRequest(rmContext, updateReq,\n+              maximumAllocation, true)) {\n+            increaseResourceReqs.add(updateReq);\n+            outstandingUpdate.add(updateReq.getContainerId());\n+          } else {\n+            msg \u003d RESOURCE_OUTSIDE_ALLOWED_RANGE;\n+          }\n+        }\n+      }\n+      if (msg !\u003d null) {\n+        UpdateContainerError updateError \u003d RECORD_FACTORY\n+            .newRecordInstance(UpdateContainerError.class);\n+        updateError.setReason(msg);\n+        updateError.setUpdateContainerRequest(updateReq);\n+        errors.add(updateError);\n+      }\n+    }\n+    return errors;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "      validateAndSplitUpdateResourceRequests(RMContext rmContext,\n      AllocateRequest request, Resource maximumAllocation,\n      List\u003cUpdateContainerRequest\u003e increaseResourceReqs,\n      List\u003cUpdateContainerRequest\u003e decreaseResourceReqs) {\n    List\u003cUpdateContainerError\u003e errors \u003d new ArrayList\u003c\u003e();\n    Set\u003cContainerId\u003e outstandingUpdate \u003d new HashSet\u003c\u003e();\n    for (UpdateContainerRequest updateReq : request.getUpdateRequests()) {\n      RMContainer rmContainer \u003d rmContext.getScheduler().getRMContainer(\n          updateReq.getContainerId());\n      String msg \u003d null;\n      if (rmContainer \u003d\u003d null) {\n        msg \u003d INVALID_CONTAINER_ID;\n      }\n      // Only allow updates if the requested version matches the current\n      // version\n      if (msg \u003d\u003d null \u0026\u0026 updateReq.getContainerVersion() !\u003d\n          rmContainer.getContainer().getVersion()) {\n        msg \u003d INCORRECT_CONTAINER_VERSION_ERROR + \"|\"\n            + updateReq.getContainerVersion() + \"|\"\n            + rmContainer.getContainer().getVersion();\n      }\n      // No more than 1 container update per request.\n      if (msg \u003d\u003d null \u0026\u0026\n          outstandingUpdate.contains(updateReq.getContainerId())) {\n        msg \u003d UPDATE_OUTSTANDING_ERROR;\n      }\n      if (msg \u003d\u003d null) {\n        Resource original \u003d rmContainer.getContainer().getResource();\n        Resource target \u003d updateReq.getCapability();\n        if (Resources.fitsIn(target, original)) {\n          // This is a decrease request\n          if (validateIncreaseDecreaseRequest(rmContext, updateReq,\n              maximumAllocation, false)) {\n            decreaseResourceReqs.add(updateReq);\n            outstandingUpdate.add(updateReq.getContainerId());\n          } else {\n            msg \u003d RESOURCE_OUTSIDE_ALLOWED_RANGE;\n          }\n        } else {\n          // This is an increase request\n          if (validateIncreaseDecreaseRequest(rmContext, updateReq,\n              maximumAllocation, true)) {\n            increaseResourceReqs.add(updateReq);\n            outstandingUpdate.add(updateReq.getContainerId());\n          } else {\n            msg \u003d RESOURCE_OUTSIDE_ALLOWED_RANGE;\n          }\n        }\n      }\n      if (msg !\u003d null) {\n        UpdateContainerError updateError \u003d RECORD_FACTORY\n            .newRecordInstance(UpdateContainerError.class);\n        updateError.setReason(msg);\n        updateError.setUpdateContainerRequest(updateReq);\n        errors.add(updateError);\n      }\n    }\n    return errors;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMServerUtils.java"
    }
  }
}