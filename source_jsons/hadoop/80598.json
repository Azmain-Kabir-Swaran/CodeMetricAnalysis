{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BufferedFSInputStream.java",
  "functionName": "seek",
  "functionId": "seek___pos-long",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/BufferedFSInputStream.java",
  "functionStartLine": 72,
  "functionEndLine": 97,
  "numCommitsSeen": 11,
  "timeTaken": 1015,
  "changeHistory": [
    "e09ea0c06ee1caa5a9ebae0a8f0273dfe04d05e5",
    "e29170e771e8dac28d0fd846e6459db4baf0fcd8",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "e09ea0c06ee1caa5a9ebae0a8f0273dfe04d05e5": "Ybodychange",
    "e29170e771e8dac28d0fd846e6459db4baf0fcd8": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e09ea0c06ee1caa5a9ebae0a8f0273dfe04d05e5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9361: Strictly define FileSystem APIs\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1607596 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/07/14 5:04 AM",
      "commitName": "e09ea0c06ee1caa5a9ebae0a8f0273dfe04d05e5",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "14/05/13 8:16 AM",
      "commitNameOld": "e29170e771e8dac28d0fd846e6459db4baf0fcd8",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 414.87,
      "commitsBetweenForRepo": 2715,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,26 @@\n   public void seek(long pos) throws IOException {\n-    if( pos\u003c0 ) {\n-      return;\n+    if (in \u003d\u003d null) {\n+      throw new IOException(FSExceptionMessages.STREAM_IS_CLOSED);\n+    }\n+    if (pos \u003c 0) {\n+      throw new EOFException(FSExceptionMessages.NEGATIVE_SEEK);\n     }\n     if (this.pos !\u003d this.count) {\n       // optimize: check if the pos is in the buffer\n       // This optimization only works if pos !\u003d count -- if they are\n       // equal, it\u0027s possible that the previous reads were just\n       // longer than the total buffer size, and hence skipped the buffer.\n       long end \u003d ((FSInputStream)in).getPos();\n       long start \u003d end - count;\n       if( pos\u003e\u003dstart \u0026\u0026 pos\u003cend) {\n         this.pos \u003d (int)(pos-start);\n         return;\n       }\n     }\n \n     // invalidate buffer\n     this.pos \u003d 0;\n     this.count \u003d 0;\n \n     ((FSInputStream)in).seek(pos);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void seek(long pos) throws IOException {\n    if (in \u003d\u003d null) {\n      throw new IOException(FSExceptionMessages.STREAM_IS_CLOSED);\n    }\n    if (pos \u003c 0) {\n      throw new EOFException(FSExceptionMessages.NEGATIVE_SEEK);\n    }\n    if (this.pos !\u003d this.count) {\n      // optimize: check if the pos is in the buffer\n      // This optimization only works if pos !\u003d count -- if they are\n      // equal, it\u0027s possible that the previous reads were just\n      // longer than the total buffer size, and hence skipped the buffer.\n      long end \u003d ((FSInputStream)in).getPos();\n      long start \u003d end - count;\n      if( pos\u003e\u003dstart \u0026\u0026 pos\u003cend) {\n        this.pos \u003d (int)(pos-start);\n        return;\n      }\n    }\n\n    // invalidate buffer\n    this.pos \u003d 0;\n    this.count \u003d 0;\n\n    ((FSInputStream)in).seek(pos);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/BufferedFSInputStream.java",
      "extendedDetails": {}
    },
    "e29170e771e8dac28d0fd846e6459db4baf0fcd8": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9307. BufferedFSInputStream.read returns wrong results after certain seeks. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1482377 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/05/13 8:16 AM",
      "commitName": "e29170e771e8dac28d0fd846e6459db4baf0fcd8",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "24/08/12 6:03 PM",
      "commitNameOld": "deead78e35b0cb81af875b5a8032cbd06c9a2dae",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 262.59,
      "commitsBetweenForRepo": 1488,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,23 @@\n   public void seek(long pos) throws IOException {\n     if( pos\u003c0 ) {\n       return;\n     }\n-    // optimize: check if the pos is in the buffer\n-    long end \u003d ((FSInputStream)in).getPos();\n-    long start \u003d end - count;\n-    if( pos\u003e\u003dstart \u0026\u0026 pos\u003cend) {\n-      this.pos \u003d (int)(pos-start);\n-      return;\n+    if (this.pos !\u003d this.count) {\n+      // optimize: check if the pos is in the buffer\n+      // This optimization only works if pos !\u003d count -- if they are\n+      // equal, it\u0027s possible that the previous reads were just\n+      // longer than the total buffer size, and hence skipped the buffer.\n+      long end \u003d ((FSInputStream)in).getPos();\n+      long start \u003d end - count;\n+      if( pos\u003e\u003dstart \u0026\u0026 pos\u003cend) {\n+        this.pos \u003d (int)(pos-start);\n+        return;\n+      }\n     }\n \n     // invalidate buffer\n     this.pos \u003d 0;\n     this.count \u003d 0;\n \n     ((FSInputStream)in).seek(pos);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void seek(long pos) throws IOException {\n    if( pos\u003c0 ) {\n      return;\n    }\n    if (this.pos !\u003d this.count) {\n      // optimize: check if the pos is in the buffer\n      // This optimization only works if pos !\u003d count -- if they are\n      // equal, it\u0027s possible that the previous reads were just\n      // longer than the total buffer size, and hence skipped the buffer.\n      long end \u003d ((FSInputStream)in).getPos();\n      long start \u003d end - count;\n      if( pos\u003e\u003dstart \u0026\u0026 pos\u003cend) {\n        this.pos \u003d (int)(pos-start);\n        return;\n      }\n    }\n\n    // invalidate buffer\n    this.pos \u003d 0;\n    this.count \u003d 0;\n\n    ((FSInputStream)in).seek(pos);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/BufferedFSInputStream.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void seek(long pos) throws IOException {\n    if( pos\u003c0 ) {\n      return;\n    }\n    // optimize: check if the pos is in the buffer\n    long end \u003d ((FSInputStream)in).getPos();\n    long start \u003d end - count;\n    if( pos\u003e\u003dstart \u0026\u0026 pos\u003cend) {\n      this.pos \u003d (int)(pos-start);\n      return;\n    }\n\n    // invalidate buffer\n    this.pos \u003d 0;\n    this.count \u003d 0;\n\n    ((FSInputStream)in).seek(pos);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/BufferedFSInputStream.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/BufferedFSInputStream.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/BufferedFSInputStream.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void seek(long pos) throws IOException {\n    if( pos\u003c0 ) {\n      return;\n    }\n    // optimize: check if the pos is in the buffer\n    long end \u003d ((FSInputStream)in).getPos();\n    long start \u003d end - count;\n    if( pos\u003e\u003dstart \u0026\u0026 pos\u003cend) {\n      this.pos \u003d (int)(pos-start);\n      return;\n    }\n\n    // invalidate buffer\n    this.pos \u003d 0;\n    this.count \u003d 0;\n\n    ((FSInputStream)in).seek(pos);\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/fs/BufferedFSInputStream.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/fs/BufferedFSInputStream.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/BufferedFSInputStream.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void seek(long pos) throws IOException {\n    if( pos\u003c0 ) {\n      return;\n    }\n    // optimize: check if the pos is in the buffer\n    long end \u003d ((FSInputStream)in).getPos();\n    long start \u003d end - count;\n    if( pos\u003e\u003dstart \u0026\u0026 pos\u003cend) {\n      this.pos \u003d (int)(pos-start);\n      return;\n    }\n\n    // invalidate buffer\n    this.pos \u003d 0;\n    this.count \u003d 0;\n\n    ((FSInputStream)in).seek(pos);\n  }",
      "path": "common/src/java/org/apache/hadoop/fs/BufferedFSInputStream.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/fs/BufferedFSInputStream.java",
        "newPath": "common/src/java/org/apache/hadoop/fs/BufferedFSInputStream.java"
      }
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,18 @@\n+  public void seek(long pos) throws IOException {\n+    if( pos\u003c0 ) {\n+      return;\n+    }\n+    // optimize: check if the pos is in the buffer\n+    long end \u003d ((FSInputStream)in).getPos();\n+    long start \u003d end - count;\n+    if( pos\u003e\u003dstart \u0026\u0026 pos\u003cend) {\n+      this.pos \u003d (int)(pos-start);\n+      return;\n+    }\n+\n+    // invalidate buffer\n+    this.pos \u003d 0;\n+    this.count \u003d 0;\n+\n+    ((FSInputStream)in).seek(pos);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void seek(long pos) throws IOException {\n    if( pos\u003c0 ) {\n      return;\n    }\n    // optimize: check if the pos is in the buffer\n    long end \u003d ((FSInputStream)in).getPos();\n    long start \u003d end - count;\n    if( pos\u003e\u003dstart \u0026\u0026 pos\u003cend) {\n      this.pos \u003d (int)(pos-start);\n      return;\n    }\n\n    // invalidate buffer\n    this.pos \u003d 0;\n    this.count \u003d 0;\n\n    ((FSInputStream)in).seek(pos);\n  }",
      "path": "src/java/org/apache/hadoop/fs/BufferedFSInputStream.java"
    }
  }
}