{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PipesMapRunner.java",
  "functionName": "run",
  "functionId": "run___input-RecordReader__K1,V1____output-OutputCollector__K2,V2____reporter-Reporter",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/pipes/PipesMapRunner.java",
  "functionStartLine": 61,
  "functionEndLine": 106,
  "numCommitsSeen": 3,
  "timeTaken": 4239,
  "changeHistory": [
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void run(RecordReader\u003cK1, V1\u003e input, OutputCollector\u003cK2, V2\u003e output,\n                  Reporter reporter) throws IOException {\n    Application\u003cK1, V1, K2, V2\u003e application \u003d null;\n    try {\n      RecordReader\u003cFloatWritable, NullWritable\u003e fakeInput \u003d \n        (!Submitter.getIsJavaRecordReader(job) \u0026\u0026 \n         !Submitter.getIsJavaMapper(job)) ? \n\t  (RecordReader\u003cFloatWritable, NullWritable\u003e) input : null;\n      application \u003d new Application\u003cK1, V1, K2, V2\u003e(job, fakeInput, output, \n                                                    reporter,\n          (Class\u003c? extends K2\u003e) job.getOutputKeyClass(), \n          (Class\u003c? extends V2\u003e) job.getOutputValueClass());\n    } catch (InterruptedException ie) {\n      throw new RuntimeException(\"interrupted\", ie);\n    }\n    DownwardProtocol\u003cK1, V1\u003e downlink \u003d application.getDownlink();\n    boolean isJavaInput \u003d Submitter.getIsJavaRecordReader(job);\n    downlink.runMap(reporter.getInputSplit(), \n                    job.getNumReduceTasks(), isJavaInput);\n    boolean skipping \u003d job.getBoolean(MRJobConfig.SKIP_RECORDS, false);\n    try {\n      if (isJavaInput) {\n        // allocate key \u0026 value instances that are re-used for all entries\n        K1 key \u003d input.createKey();\n        V1 value \u003d input.createValue();\n        downlink.setInputTypes(key.getClass().getName(),\n                               value.getClass().getName());\n        \n        while (input.next(key, value)) {\n          // map pair to output\n          downlink.mapItem(key, value);\n          if(skipping) {\n            //flush the streams on every record input if running in skip mode\n            //so that we don\u0027t buffer other records surrounding a bad record.\n            downlink.flush();\n          }\n        }\n        downlink.endOfInput();\n      }\n      application.waitForFinish();\n    } catch (Throwable t) {\n      application.abort(t);\n    } finally {\n      application.cleanup();\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/pipes/PipesMapRunner.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/pipes/PipesMapRunner.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/pipes/PipesMapRunner.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void run(RecordReader\u003cK1, V1\u003e input, OutputCollector\u003cK2, V2\u003e output,\n                  Reporter reporter) throws IOException {\n    Application\u003cK1, V1, K2, V2\u003e application \u003d null;\n    try {\n      RecordReader\u003cFloatWritable, NullWritable\u003e fakeInput \u003d \n        (!Submitter.getIsJavaRecordReader(job) \u0026\u0026 \n         !Submitter.getIsJavaMapper(job)) ? \n\t  (RecordReader\u003cFloatWritable, NullWritable\u003e) input : null;\n      application \u003d new Application\u003cK1, V1, K2, V2\u003e(job, fakeInput, output, \n                                                    reporter,\n          (Class\u003c? extends K2\u003e) job.getOutputKeyClass(), \n          (Class\u003c? extends V2\u003e) job.getOutputValueClass());\n    } catch (InterruptedException ie) {\n      throw new RuntimeException(\"interrupted\", ie);\n    }\n    DownwardProtocol\u003cK1, V1\u003e downlink \u003d application.getDownlink();\n    boolean isJavaInput \u003d Submitter.getIsJavaRecordReader(job);\n    downlink.runMap(reporter.getInputSplit(), \n                    job.getNumReduceTasks(), isJavaInput);\n    boolean skipping \u003d job.getBoolean(MRJobConfig.SKIP_RECORDS, false);\n    try {\n      if (isJavaInput) {\n        // allocate key \u0026 value instances that are re-used for all entries\n        K1 key \u003d input.createKey();\n        V1 value \u003d input.createValue();\n        downlink.setInputTypes(key.getClass().getName(),\n                               value.getClass().getName());\n        \n        while (input.next(key, value)) {\n          // map pair to output\n          downlink.mapItem(key, value);\n          if(skipping) {\n            //flush the streams on every record input if running in skip mode\n            //so that we don\u0027t buffer other records surrounding a bad record.\n            downlink.flush();\n          }\n        }\n        downlink.endOfInput();\n      }\n      application.waitForFinish();\n    } catch (Throwable t) {\n      application.abort(t);\n    } finally {\n      application.cleanup();\n    }\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/pipes/PipesMapRunner.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapred/pipes/PipesMapRunner.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/pipes/PipesMapRunner.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,46 @@\n+  public void run(RecordReader\u003cK1, V1\u003e input, OutputCollector\u003cK2, V2\u003e output,\n+                  Reporter reporter) throws IOException {\n+    Application\u003cK1, V1, K2, V2\u003e application \u003d null;\n+    try {\n+      RecordReader\u003cFloatWritable, NullWritable\u003e fakeInput \u003d \n+        (!Submitter.getIsJavaRecordReader(job) \u0026\u0026 \n+         !Submitter.getIsJavaMapper(job)) ? \n+\t  (RecordReader\u003cFloatWritable, NullWritable\u003e) input : null;\n+      application \u003d new Application\u003cK1, V1, K2, V2\u003e(job, fakeInput, output, \n+                                                    reporter,\n+          (Class\u003c? extends K2\u003e) job.getOutputKeyClass(), \n+          (Class\u003c? extends V2\u003e) job.getOutputValueClass());\n+    } catch (InterruptedException ie) {\n+      throw new RuntimeException(\"interrupted\", ie);\n+    }\n+    DownwardProtocol\u003cK1, V1\u003e downlink \u003d application.getDownlink();\n+    boolean isJavaInput \u003d Submitter.getIsJavaRecordReader(job);\n+    downlink.runMap(reporter.getInputSplit(), \n+                    job.getNumReduceTasks(), isJavaInput);\n+    boolean skipping \u003d job.getBoolean(MRJobConfig.SKIP_RECORDS, false);\n+    try {\n+      if (isJavaInput) {\n+        // allocate key \u0026 value instances that are re-used for all entries\n+        K1 key \u003d input.createKey();\n+        V1 value \u003d input.createValue();\n+        downlink.setInputTypes(key.getClass().getName(),\n+                               value.getClass().getName());\n+        \n+        while (input.next(key, value)) {\n+          // map pair to output\n+          downlink.mapItem(key, value);\n+          if(skipping) {\n+            //flush the streams on every record input if running in skip mode\n+            //so that we don\u0027t buffer other records surrounding a bad record.\n+            downlink.flush();\n+          }\n+        }\n+        downlink.endOfInput();\n+      }\n+      application.waitForFinish();\n+    } catch (Throwable t) {\n+      application.abort(t);\n+    } finally {\n+      application.cleanup();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void run(RecordReader\u003cK1, V1\u003e input, OutputCollector\u003cK2, V2\u003e output,\n                  Reporter reporter) throws IOException {\n    Application\u003cK1, V1, K2, V2\u003e application \u003d null;\n    try {\n      RecordReader\u003cFloatWritable, NullWritable\u003e fakeInput \u003d \n        (!Submitter.getIsJavaRecordReader(job) \u0026\u0026 \n         !Submitter.getIsJavaMapper(job)) ? \n\t  (RecordReader\u003cFloatWritable, NullWritable\u003e) input : null;\n      application \u003d new Application\u003cK1, V1, K2, V2\u003e(job, fakeInput, output, \n                                                    reporter,\n          (Class\u003c? extends K2\u003e) job.getOutputKeyClass(), \n          (Class\u003c? extends V2\u003e) job.getOutputValueClass());\n    } catch (InterruptedException ie) {\n      throw new RuntimeException(\"interrupted\", ie);\n    }\n    DownwardProtocol\u003cK1, V1\u003e downlink \u003d application.getDownlink();\n    boolean isJavaInput \u003d Submitter.getIsJavaRecordReader(job);\n    downlink.runMap(reporter.getInputSplit(), \n                    job.getNumReduceTasks(), isJavaInput);\n    boolean skipping \u003d job.getBoolean(MRJobConfig.SKIP_RECORDS, false);\n    try {\n      if (isJavaInput) {\n        // allocate key \u0026 value instances that are re-used for all entries\n        K1 key \u003d input.createKey();\n        V1 value \u003d input.createValue();\n        downlink.setInputTypes(key.getClass().getName(),\n                               value.getClass().getName());\n        \n        while (input.next(key, value)) {\n          // map pair to output\n          downlink.mapItem(key, value);\n          if(skipping) {\n            //flush the streams on every record input if running in skip mode\n            //so that we don\u0027t buffer other records surrounding a bad record.\n            downlink.flush();\n          }\n        }\n        downlink.endOfInput();\n      }\n      application.waitForFinish();\n    } catch (Throwable t) {\n      application.abort(t);\n    } finally {\n      application.cleanup();\n    }\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapred/pipes/PipesMapRunner.java"
    }
  }
}