{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BlockPlacementPolicyDefault.java",
  "functionName": "chooseRemoteRack",
  "functionId": "chooseRemoteRack___numOfReplicas-int__localMachine-DatanodeDescriptor__excludedNodes-Set__Node____blocksize-long__maxReplicasPerRack-int__results-List__DatanodeStorageInfo____avoidStaleNodes-boolean__storageTypes-EnumMap__StorageType,Integer__",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockPlacementPolicyDefault.java",
  "functionStartLine": 744,
  "functionEndLine": 768,
  "numCommitsSeen": 141,
  "timeTaken": 2657,
  "changeHistory": [
    "22a41dce4af4d5b533ba875b322551db1c152878",
    "e08701ec71f7c10d8f15122d90c35f9f22e40837"
  ],
  "changeHistoryShort": {
    "22a41dce4af4d5b533ba875b322551db1c152878": "Ybodychange",
    "e08701ec71f7c10d8f15122d90c35f9f22e40837": "Ymultichange(Yparameterchange,Ybodychange)"
  },
  "changeHistoryDetails": {
    "22a41dce4af4d5b533ba875b322551db1c152878": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6997: add more tests for data migration and replicaion.\n",
      "commitDate": "06/09/14 4:44 PM",
      "commitName": "22a41dce4af4d5b533ba875b322551db1c152878",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "04/09/14 2:19 PM",
      "commitNameOld": "e08701ec71f7c10d8f15122d90c35f9f22e40837",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 2.1,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,25 @@\n   protected void chooseRemoteRack(int numOfReplicas,\n                                 DatanodeDescriptor localMachine,\n                                 Set\u003cNode\u003e excludedNodes,\n                                 long blocksize,\n                                 int maxReplicasPerRack,\n                                 List\u003cDatanodeStorageInfo\u003e results,\n                                 boolean avoidStaleNodes,\n                                 EnumMap\u003cStorageType, Integer\u003e storageTypes)\n                                     throws NotEnoughReplicasException {\n     int oldNumOfReplicas \u003d results.size();\n     // randomly choose one node from remote racks\n     try {\n       chooseRandom(numOfReplicas, \"~\" + localMachine.getNetworkLocation(),\n           excludedNodes, blocksize, maxReplicasPerRack, results,\n           avoidStaleNodes, storageTypes);\n     } catch (NotEnoughReplicasException e) {\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Failed to choose remote rack (location \u003d ~\"\n+            + localMachine.getNetworkLocation() + \"), fallback to local rack\", e);\n+      }\n       chooseRandom(numOfReplicas-(results.size()-oldNumOfReplicas),\n                    localMachine.getNetworkLocation(), excludedNodes, blocksize, \n                    maxReplicasPerRack, results, avoidStaleNodes, storageTypes);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void chooseRemoteRack(int numOfReplicas,\n                                DatanodeDescriptor localMachine,\n                                Set\u003cNode\u003e excludedNodes,\n                                long blocksize,\n                                int maxReplicasPerRack,\n                                List\u003cDatanodeStorageInfo\u003e results,\n                                boolean avoidStaleNodes,\n                                EnumMap\u003cStorageType, Integer\u003e storageTypes)\n                                    throws NotEnoughReplicasException {\n    int oldNumOfReplicas \u003d results.size();\n    // randomly choose one node from remote racks\n    try {\n      chooseRandom(numOfReplicas, \"~\" + localMachine.getNetworkLocation(),\n          excludedNodes, blocksize, maxReplicasPerRack, results,\n          avoidStaleNodes, storageTypes);\n    } catch (NotEnoughReplicasException e) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Failed to choose remote rack (location \u003d ~\"\n            + localMachine.getNetworkLocation() + \"), fallback to local rack\", e);\n      }\n      chooseRandom(numOfReplicas-(results.size()-oldNumOfReplicas),\n                   localMachine.getNetworkLocation(), excludedNodes, blocksize, \n                   maxReplicasPerRack, results, avoidStaleNodes, storageTypes);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockPlacementPolicyDefault.java",
      "extendedDetails": {}
    },
    "e08701ec71f7c10d8f15122d90c35f9f22e40837": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-6961. Archival Storage: BlockPlacementPolicy#chooseTarget should check each valid storage type in each choosing round.\n",
      "commitDate": "04/09/14 2:19 PM",
      "commitName": "e08701ec71f7c10d8f15122d90c35f9f22e40837",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6961. Archival Storage: BlockPlacementPolicy#chooseTarget should check each valid storage type in each choosing round.\n",
          "commitDate": "04/09/14 2:19 PM",
          "commitName": "e08701ec71f7c10d8f15122d90c35f9f22e40837",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "27/08/14 2:08 PM",
          "commitNameOld": "b7ded466b00db0fe273058b844d56d810e0f8cc2",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 8.01,
          "commitsBetweenForRepo": 50,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,21 @@\n   protected void chooseRemoteRack(int numOfReplicas,\n                                 DatanodeDescriptor localMachine,\n                                 Set\u003cNode\u003e excludedNodes,\n                                 long blocksize,\n                                 int maxReplicasPerRack,\n                                 List\u003cDatanodeStorageInfo\u003e results,\n                                 boolean avoidStaleNodes,\n-                                StorageType storageType)\n+                                EnumMap\u003cStorageType, Integer\u003e storageTypes)\n                                     throws NotEnoughReplicasException {\n     int oldNumOfReplicas \u003d results.size();\n     // randomly choose one node from remote racks\n     try {\n       chooseRandom(numOfReplicas, \"~\" + localMachine.getNetworkLocation(),\n           excludedNodes, blocksize, maxReplicasPerRack, results,\n-          avoidStaleNodes, storageType);\n+          avoidStaleNodes, storageTypes);\n     } catch (NotEnoughReplicasException e) {\n       chooseRandom(numOfReplicas-(results.size()-oldNumOfReplicas),\n                    localMachine.getNetworkLocation(), excludedNodes, blocksize, \n-                   maxReplicasPerRack, results, avoidStaleNodes, storageType);\n+                   maxReplicasPerRack, results, avoidStaleNodes, storageTypes);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void chooseRemoteRack(int numOfReplicas,\n                                DatanodeDescriptor localMachine,\n                                Set\u003cNode\u003e excludedNodes,\n                                long blocksize,\n                                int maxReplicasPerRack,\n                                List\u003cDatanodeStorageInfo\u003e results,\n                                boolean avoidStaleNodes,\n                                EnumMap\u003cStorageType, Integer\u003e storageTypes)\n                                    throws NotEnoughReplicasException {\n    int oldNumOfReplicas \u003d results.size();\n    // randomly choose one node from remote racks\n    try {\n      chooseRandom(numOfReplicas, \"~\" + localMachine.getNetworkLocation(),\n          excludedNodes, blocksize, maxReplicasPerRack, results,\n          avoidStaleNodes, storageTypes);\n    } catch (NotEnoughReplicasException e) {\n      chooseRandom(numOfReplicas-(results.size()-oldNumOfReplicas),\n                   localMachine.getNetworkLocation(), excludedNodes, blocksize, \n                   maxReplicasPerRack, results, avoidStaleNodes, storageTypes);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockPlacementPolicyDefault.java",
          "extendedDetails": {
            "oldValue": "[numOfReplicas-int, localMachine-DatanodeDescriptor, excludedNodes-Set\u003cNode\u003e, blocksize-long, maxReplicasPerRack-int, results-List\u003cDatanodeStorageInfo\u003e, avoidStaleNodes-boolean, storageType-StorageType]",
            "newValue": "[numOfReplicas-int, localMachine-DatanodeDescriptor, excludedNodes-Set\u003cNode\u003e, blocksize-long, maxReplicasPerRack-int, results-List\u003cDatanodeStorageInfo\u003e, avoidStaleNodes-boolean, storageTypes-EnumMap\u003cStorageType,Integer\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6961. Archival Storage: BlockPlacementPolicy#chooseTarget should check each valid storage type in each choosing round.\n",
          "commitDate": "04/09/14 2:19 PM",
          "commitName": "e08701ec71f7c10d8f15122d90c35f9f22e40837",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "27/08/14 2:08 PM",
          "commitNameOld": "b7ded466b00db0fe273058b844d56d810e0f8cc2",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 8.01,
          "commitsBetweenForRepo": 50,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,21 @@\n   protected void chooseRemoteRack(int numOfReplicas,\n                                 DatanodeDescriptor localMachine,\n                                 Set\u003cNode\u003e excludedNodes,\n                                 long blocksize,\n                                 int maxReplicasPerRack,\n                                 List\u003cDatanodeStorageInfo\u003e results,\n                                 boolean avoidStaleNodes,\n-                                StorageType storageType)\n+                                EnumMap\u003cStorageType, Integer\u003e storageTypes)\n                                     throws NotEnoughReplicasException {\n     int oldNumOfReplicas \u003d results.size();\n     // randomly choose one node from remote racks\n     try {\n       chooseRandom(numOfReplicas, \"~\" + localMachine.getNetworkLocation(),\n           excludedNodes, blocksize, maxReplicasPerRack, results,\n-          avoidStaleNodes, storageType);\n+          avoidStaleNodes, storageTypes);\n     } catch (NotEnoughReplicasException e) {\n       chooseRandom(numOfReplicas-(results.size()-oldNumOfReplicas),\n                    localMachine.getNetworkLocation(), excludedNodes, blocksize, \n-                   maxReplicasPerRack, results, avoidStaleNodes, storageType);\n+                   maxReplicasPerRack, results, avoidStaleNodes, storageTypes);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void chooseRemoteRack(int numOfReplicas,\n                                DatanodeDescriptor localMachine,\n                                Set\u003cNode\u003e excludedNodes,\n                                long blocksize,\n                                int maxReplicasPerRack,\n                                List\u003cDatanodeStorageInfo\u003e results,\n                                boolean avoidStaleNodes,\n                                EnumMap\u003cStorageType, Integer\u003e storageTypes)\n                                    throws NotEnoughReplicasException {\n    int oldNumOfReplicas \u003d results.size();\n    // randomly choose one node from remote racks\n    try {\n      chooseRandom(numOfReplicas, \"~\" + localMachine.getNetworkLocation(),\n          excludedNodes, blocksize, maxReplicasPerRack, results,\n          avoidStaleNodes, storageTypes);\n    } catch (NotEnoughReplicasException e) {\n      chooseRandom(numOfReplicas-(results.size()-oldNumOfReplicas),\n                   localMachine.getNetworkLocation(), excludedNodes, blocksize, \n                   maxReplicasPerRack, results, avoidStaleNodes, storageTypes);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockPlacementPolicyDefault.java",
          "extendedDetails": {}
        }
      ]
    }
  }
}