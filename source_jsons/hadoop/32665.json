{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NodeStatusUpdaterImpl.java",
  "functionName": "getNodeStatus",
  "functionId": "getNodeStatus___responseId-int",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
  "functionStartLine": 512,
  "functionEndLine": 535,
  "numCommitsSeen": 218,
  "timeTaken": 12377,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "0aafc122d401a2f49d0f9ca556343f9ba871e979",
    "341888a0aa23f24458b4e6e34868794b9735c06a",
    "52948bb20bd1446164df1d3920c46c96dad750ae",
    "c3dc1af072574f5890a8d43e4d60526951b4b8bc",
    "13604bd5f119fc81b9942190dfa366afad61bc92",
    "527c40e4d664c721b8f32d7cd8df21b2666fea8a",
    "0a641496c706fc175e7bf66d69ebf71c7d078e84",
    "44b6261bfacddea88a3cf02d406f970bbbb98d04",
    "1c4047b0e46e95a92509de2e59a93433f5968538",
    "cfa783141fa69c2cf154d1d9e5393353d14ce5e1",
    "defa7af4d3ef327c7c05807f640974e29c6d045b",
    "5b7889f9a7dea81bbb3c8be6944419b59ca4bed1",
    "2e3b56f6e907f15f7c6caaad37d37b9e0ee89963",
    "16fedf5473cd715e3970da700b24ca10656e3576",
    "3e9200ddde4858be8ecdd8347b5fee63ed83df84",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "50fa9b89f42bd3fe6aad5086b0df14a00dadb24b",
    "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb",
    "12743d2169f5a24a9b3be07c9e9dcc3f2f1001f0",
    "817ead65b99f465fc2dfa18072cf23cadf5f05d0",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "0aafc122d401a2f49d0f9ca556343f9ba871e979": "Ybodychange",
    "341888a0aa23f24458b4e6e34868794b9735c06a": "Ybodychange",
    "52948bb20bd1446164df1d3920c46c96dad750ae": "Ymodifierchange",
    "c3dc1af072574f5890a8d43e4d60526951b4b8bc": "Ybodychange",
    "13604bd5f119fc81b9942190dfa366afad61bc92": "Ybodychange",
    "527c40e4d664c721b8f32d7cd8df21b2666fea8a": "Ybodychange",
    "0a641496c706fc175e7bf66d69ebf71c7d078e84": "Yexceptionschange",
    "44b6261bfacddea88a3cf02d406f970bbbb98d04": "Ybodychange",
    "1c4047b0e46e95a92509de2e59a93433f5968538": "Ymultichange(Yrename,Ymodifierchange,Ybodychange)",
    "cfa783141fa69c2cf154d1d9e5393353d14ce5e1": "Ymultichange(Yparameterchange,Ybodychange)",
    "defa7af4d3ef327c7c05807f640974e29c6d045b": "Ybodychange",
    "5b7889f9a7dea81bbb3c8be6944419b59ca4bed1": "Ybodychange",
    "2e3b56f6e907f15f7c6caaad37d37b9e0ee89963": "Ymultichange(Yrename,Ymodifierchange)",
    "16fedf5473cd715e3970da700b24ca10656e3576": "Ybodychange",
    "3e9200ddde4858be8ecdd8347b5fee63ed83df84": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "50fa9b89f42bd3fe6aad5086b0df14a00dadb24b": "Ybodychange",
    "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb": "Ybodychange",
    "12743d2169f5a24a9b3be07c9e9dcc3f2f1001f0": "Ybodychange",
    "817ead65b99f465fc2dfa18072cf23cadf5f05d0": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "22/02/19 7:31 AM",
      "commitNameOld": "ed13cf84068ad50a78e66211132c1f08238fb65b",
      "commitAuthorOld": "bibinchundatt",
      "daysBetweenCommits": 21.33,
      "commitsBetweenForRepo": 206,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,24 @@\n   protected NodeStatus getNodeStatus(int responseId) throws IOException {\n \n     NodeHealthStatus nodeHealthStatus \u003d this.context.getNodeHealthStatus();\n     nodeHealthStatus.setHealthReport(healthChecker.getHealthReport());\n     nodeHealthStatus.setIsNodeHealthy(healthChecker.isHealthy());\n     nodeHealthStatus.setLastHealthReportTime(healthChecker\n       .getLastHealthReportTime());\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Node\u0027s health-status : \" + nodeHealthStatus.getIsNodeHealthy()\n-          + \", \" + nodeHealthStatus.getHealthReport());\n-    }\n+    LOG.debug(\"Node\u0027s health-status : {}, {}\",\n+        nodeHealthStatus.getIsNodeHealthy(),\n+        nodeHealthStatus.getHealthReport());\n     List\u003cContainerStatus\u003e containersStatuses \u003d getContainerStatuses();\n     ResourceUtilization containersUtilization \u003d getContainersUtilization();\n     ResourceUtilization nodeUtilization \u003d getNodeUtilization();\n     List\u003corg.apache.hadoop.yarn.api.records.Container\u003e increasedContainers\n         \u003d getIncreasedContainers();\n     NodeStatus nodeStatus \u003d\n         NodeStatus.newInstance(nodeId, responseId, containersStatuses,\n           createKeepAliveApplicationList(), nodeHealthStatus,\n           containersUtilization, nodeUtilization, increasedContainers);\n \n     nodeStatus.setOpportunisticContainersStatus(\n         getOpportunisticContainersStatus());\n     return nodeStatus;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected NodeStatus getNodeStatus(int responseId) throws IOException {\n\n    NodeHealthStatus nodeHealthStatus \u003d this.context.getNodeHealthStatus();\n    nodeHealthStatus.setHealthReport(healthChecker.getHealthReport());\n    nodeHealthStatus.setIsNodeHealthy(healthChecker.isHealthy());\n    nodeHealthStatus.setLastHealthReportTime(healthChecker\n      .getLastHealthReportTime());\n    LOG.debug(\"Node\u0027s health-status : {}, {}\",\n        nodeHealthStatus.getIsNodeHealthy(),\n        nodeHealthStatus.getHealthReport());\n    List\u003cContainerStatus\u003e containersStatuses \u003d getContainerStatuses();\n    ResourceUtilization containersUtilization \u003d getContainersUtilization();\n    ResourceUtilization nodeUtilization \u003d getNodeUtilization();\n    List\u003corg.apache.hadoop.yarn.api.records.Container\u003e increasedContainers\n        \u003d getIncreasedContainers();\n    NodeStatus nodeStatus \u003d\n        NodeStatus.newInstance(nodeId, responseId, containersStatuses,\n          createKeepAliveApplicationList(), nodeHealthStatus,\n          containersUtilization, nodeUtilization, increasedContainers);\n\n    nodeStatus.setOpportunisticContainersStatus(\n        getOpportunisticContainersStatus());\n    return nodeStatus;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "0aafc122d401a2f49d0f9ca556343f9ba871e979": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2995. Enhance UI to show cluster resource utilization of various container Execution types. (Konstantinos Karanasos via asuresh)\n",
      "commitDate": "04/11/16 7:31 AM",
      "commitName": "0aafc122d401a2f49d0f9ca556343f9ba871e979",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "10/07/16 8:46 AM",
      "commitNameOld": "6cf6ab7b780de2b0c2c9ea730e1f366965a0d682",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 116.95,
      "commitsBetweenForRepo": 839,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,25 @@\n   protected NodeStatus getNodeStatus(int responseId) throws IOException {\n \n     NodeHealthStatus nodeHealthStatus \u003d this.context.getNodeHealthStatus();\n     nodeHealthStatus.setHealthReport(healthChecker.getHealthReport());\n     nodeHealthStatus.setIsNodeHealthy(healthChecker.isHealthy());\n     nodeHealthStatus.setLastHealthReportTime(healthChecker\n       .getLastHealthReportTime());\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Node\u0027s health-status : \" + nodeHealthStatus.getIsNodeHealthy()\n           + \", \" + nodeHealthStatus.getHealthReport());\n     }\n     List\u003cContainerStatus\u003e containersStatuses \u003d getContainerStatuses();\n     ResourceUtilization containersUtilization \u003d getContainersUtilization();\n     ResourceUtilization nodeUtilization \u003d getNodeUtilization();\n     List\u003corg.apache.hadoop.yarn.api.records.Container\u003e increasedContainers\n         \u003d getIncreasedContainers();\n     NodeStatus nodeStatus \u003d\n         NodeStatus.newInstance(nodeId, responseId, containersStatuses,\n           createKeepAliveApplicationList(), nodeHealthStatus,\n           containersUtilization, nodeUtilization, increasedContainers);\n \n-    nodeStatus.setQueuedContainersStatus(getQueuedContainerStatus());\n+    nodeStatus.setOpportunisticContainersStatus(\n+        getOpportunisticContainersStatus());\n     return nodeStatus;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected NodeStatus getNodeStatus(int responseId) throws IOException {\n\n    NodeHealthStatus nodeHealthStatus \u003d this.context.getNodeHealthStatus();\n    nodeHealthStatus.setHealthReport(healthChecker.getHealthReport());\n    nodeHealthStatus.setIsNodeHealthy(healthChecker.isHealthy());\n    nodeHealthStatus.setLastHealthReportTime(healthChecker\n      .getLastHealthReportTime());\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Node\u0027s health-status : \" + nodeHealthStatus.getIsNodeHealthy()\n          + \", \" + nodeHealthStatus.getHealthReport());\n    }\n    List\u003cContainerStatus\u003e containersStatuses \u003d getContainerStatuses();\n    ResourceUtilization containersUtilization \u003d getContainersUtilization();\n    ResourceUtilization nodeUtilization \u003d getNodeUtilization();\n    List\u003corg.apache.hadoop.yarn.api.records.Container\u003e increasedContainers\n        \u003d getIncreasedContainers();\n    NodeStatus nodeStatus \u003d\n        NodeStatus.newInstance(nodeId, responseId, containersStatuses,\n          createKeepAliveApplicationList(), nodeHealthStatus,\n          containersUtilization, nodeUtilization, increasedContainers);\n\n    nodeStatus.setOpportunisticContainersStatus(\n        getOpportunisticContainersStatus());\n    return nodeStatus;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "341888a0aa23f24458b4e6e34868794b9735c06a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4412. Create ClusterMonitor to compute ordered list of preferred NMs for OPPORTUNITIC containers. (asuresh)\n",
      "commitDate": "26/04/16 8:12 PM",
      "commitName": "341888a0aa23f24458b4e6e34868794b9735c06a",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "07/04/16 5:05 PM",
      "commitNameOld": "e82f961a3925aadf9e53a009820a48ba9e4f78b6",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 19.13,
      "commitsBetweenForRepo": 116,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,24 @@\n   protected NodeStatus getNodeStatus(int responseId) throws IOException {\n \n     NodeHealthStatus nodeHealthStatus \u003d this.context.getNodeHealthStatus();\n     nodeHealthStatus.setHealthReport(healthChecker.getHealthReport());\n     nodeHealthStatus.setIsNodeHealthy(healthChecker.isHealthy());\n     nodeHealthStatus.setLastHealthReportTime(healthChecker\n       .getLastHealthReportTime());\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Node\u0027s health-status : \" + nodeHealthStatus.getIsNodeHealthy()\n           + \", \" + nodeHealthStatus.getHealthReport());\n     }\n     List\u003cContainerStatus\u003e containersStatuses \u003d getContainerStatuses();\n     ResourceUtilization containersUtilization \u003d getContainersUtilization();\n     ResourceUtilization nodeUtilization \u003d getNodeUtilization();\n     List\u003corg.apache.hadoop.yarn.api.records.Container\u003e increasedContainers\n         \u003d getIncreasedContainers();\n     NodeStatus nodeStatus \u003d\n         NodeStatus.newInstance(nodeId, responseId, containersStatuses,\n           createKeepAliveApplicationList(), nodeHealthStatus,\n           containersUtilization, nodeUtilization, increasedContainers);\n \n+    nodeStatus.setQueuedContainersStatus(getQueuedContainerStatus());\n     return nodeStatus;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected NodeStatus getNodeStatus(int responseId) throws IOException {\n\n    NodeHealthStatus nodeHealthStatus \u003d this.context.getNodeHealthStatus();\n    nodeHealthStatus.setHealthReport(healthChecker.getHealthReport());\n    nodeHealthStatus.setIsNodeHealthy(healthChecker.isHealthy());\n    nodeHealthStatus.setLastHealthReportTime(healthChecker\n      .getLastHealthReportTime());\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Node\u0027s health-status : \" + nodeHealthStatus.getIsNodeHealthy()\n          + \", \" + nodeHealthStatus.getHealthReport());\n    }\n    List\u003cContainerStatus\u003e containersStatuses \u003d getContainerStatuses();\n    ResourceUtilization containersUtilization \u003d getContainersUtilization();\n    ResourceUtilization nodeUtilization \u003d getNodeUtilization();\n    List\u003corg.apache.hadoop.yarn.api.records.Container\u003e increasedContainers\n        \u003d getIncreasedContainers();\n    NodeStatus nodeStatus \u003d\n        NodeStatus.newInstance(nodeId, responseId, containersStatuses,\n          createKeepAliveApplicationList(), nodeHealthStatus,\n          containersUtilization, nodeUtilization, increasedContainers);\n\n    nodeStatus.setQueuedContainersStatus(getQueuedContainerStatus());\n    return nodeStatus;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "52948bb20bd1446164df1d3920c46c96dad750ae": {
      "type": "Ymodifierchange",
      "commitMessage": "YARN-3980. Plumb resource-utilization info in node heartbeat through to the scheduler. (Inigo Goiri via kasha)\n",
      "commitDate": "24/11/15 12:17 AM",
      "commitName": "52948bb20bd1446164df1d3920c46c96dad750ae",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "26/10/15 4:36 PM",
      "commitNameOld": "6f606214e734d9600bc0f25a63142714f0fea633",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 28.36,
      "commitsBetweenForRepo": 219,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n-  private NodeStatus getNodeStatus(int responseId) throws IOException {\n+  protected NodeStatus getNodeStatus(int responseId) throws IOException {\n \n     NodeHealthStatus nodeHealthStatus \u003d this.context.getNodeHealthStatus();\n     nodeHealthStatus.setHealthReport(healthChecker.getHealthReport());\n     nodeHealthStatus.setIsNodeHealthy(healthChecker.isHealthy());\n     nodeHealthStatus.setLastHealthReportTime(healthChecker\n       .getLastHealthReportTime());\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Node\u0027s health-status : \" + nodeHealthStatus.getIsNodeHealthy()\n           + \", \" + nodeHealthStatus.getHealthReport());\n     }\n     List\u003cContainerStatus\u003e containersStatuses \u003d getContainerStatuses();\n     ResourceUtilization containersUtilization \u003d getContainersUtilization();\n     ResourceUtilization nodeUtilization \u003d getNodeUtilization();\n     List\u003corg.apache.hadoop.yarn.api.records.Container\u003e increasedContainers\n         \u003d getIncreasedContainers();\n     NodeStatus nodeStatus \u003d\n         NodeStatus.newInstance(nodeId, responseId, containersStatuses,\n           createKeepAliveApplicationList(), nodeHealthStatus,\n           containersUtilization, nodeUtilization, increasedContainers);\n \n     return nodeStatus;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected NodeStatus getNodeStatus(int responseId) throws IOException {\n\n    NodeHealthStatus nodeHealthStatus \u003d this.context.getNodeHealthStatus();\n    nodeHealthStatus.setHealthReport(healthChecker.getHealthReport());\n    nodeHealthStatus.setIsNodeHealthy(healthChecker.isHealthy());\n    nodeHealthStatus.setLastHealthReportTime(healthChecker\n      .getLastHealthReportTime());\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Node\u0027s health-status : \" + nodeHealthStatus.getIsNodeHealthy()\n          + \", \" + nodeHealthStatus.getHealthReport());\n    }\n    List\u003cContainerStatus\u003e containersStatuses \u003d getContainerStatuses();\n    ResourceUtilization containersUtilization \u003d getContainersUtilization();\n    ResourceUtilization nodeUtilization \u003d getNodeUtilization();\n    List\u003corg.apache.hadoop.yarn.api.records.Container\u003e increasedContainers\n        \u003d getIncreasedContainers();\n    NodeStatus nodeStatus \u003d\n        NodeStatus.newInstance(nodeId, responseId, containersStatuses,\n          createKeepAliveApplicationList(), nodeHealthStatus,\n          containersUtilization, nodeUtilization, increasedContainers);\n\n    return nodeStatus;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[protected]"
      }
    },
    "c3dc1af072574f5890a8d43e4d60526951b4b8bc": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1644. RM-NM protocol changes and NodeStatusUpdater implementation to support container resizing. Contributed by Meng Ding\n",
      "commitDate": "23/09/15 1:29 PM",
      "commitName": "c3dc1af072574f5890a8d43e4d60526951b4b8bc",
      "commitAuthor": "Jian He",
      "commitDateOld": "10/09/15 9:30 AM",
      "commitNameOld": "77666105b4557d5706e5844a4ca286917d966c5f",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 13.17,
      "commitsBetweenForRepo": 89,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,23 @@\n   private NodeStatus getNodeStatus(int responseId) throws IOException {\n \n     NodeHealthStatus nodeHealthStatus \u003d this.context.getNodeHealthStatus();\n     nodeHealthStatus.setHealthReport(healthChecker.getHealthReport());\n     nodeHealthStatus.setIsNodeHealthy(healthChecker.isHealthy());\n     nodeHealthStatus.setLastHealthReportTime(healthChecker\n       .getLastHealthReportTime());\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Node\u0027s health-status : \" + nodeHealthStatus.getIsNodeHealthy()\n           + \", \" + nodeHealthStatus.getHealthReport());\n     }\n     List\u003cContainerStatus\u003e containersStatuses \u003d getContainerStatuses();\n     ResourceUtilization containersUtilization \u003d getContainersUtilization();\n     ResourceUtilization nodeUtilization \u003d getNodeUtilization();\n+    List\u003corg.apache.hadoop.yarn.api.records.Container\u003e increasedContainers\n+        \u003d getIncreasedContainers();\n     NodeStatus nodeStatus \u003d\n         NodeStatus.newInstance(nodeId, responseId, containersStatuses,\n           createKeepAliveApplicationList(), nodeHealthStatus,\n-          containersUtilization, nodeUtilization);\n+          containersUtilization, nodeUtilization, increasedContainers);\n \n     return nodeStatus;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private NodeStatus getNodeStatus(int responseId) throws IOException {\n\n    NodeHealthStatus nodeHealthStatus \u003d this.context.getNodeHealthStatus();\n    nodeHealthStatus.setHealthReport(healthChecker.getHealthReport());\n    nodeHealthStatus.setIsNodeHealthy(healthChecker.isHealthy());\n    nodeHealthStatus.setLastHealthReportTime(healthChecker\n      .getLastHealthReportTime());\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Node\u0027s health-status : \" + nodeHealthStatus.getIsNodeHealthy()\n          + \", \" + nodeHealthStatus.getHealthReport());\n    }\n    List\u003cContainerStatus\u003e containersStatuses \u003d getContainerStatuses();\n    ResourceUtilization containersUtilization \u003d getContainersUtilization();\n    ResourceUtilization nodeUtilization \u003d getNodeUtilization();\n    List\u003corg.apache.hadoop.yarn.api.records.Container\u003e increasedContainers\n        \u003d getIncreasedContainers();\n    NodeStatus nodeStatus \u003d\n        NodeStatus.newInstance(nodeId, responseId, containersStatuses,\n          createKeepAliveApplicationList(), nodeHealthStatus,\n          containersUtilization, nodeUtilization, increasedContainers);\n\n    return nodeStatus;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "13604bd5f119fc81b9942190dfa366afad61bc92": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4055. Report node resource utilization in heartbeat. (Inigo Goiri via kasha)\n",
      "commitDate": "16/08/15 3:08 PM",
      "commitName": "13604bd5f119fc81b9942190dfa366afad61bc92",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "13/08/15 2:46 PM",
      "commitNameOld": "38aed1a94ed7b6da62e2445b5610bc02b1cddeeb",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 3.02,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,21 @@\n   private NodeStatus getNodeStatus(int responseId) throws IOException {\n \n     NodeHealthStatus nodeHealthStatus \u003d this.context.getNodeHealthStatus();\n     nodeHealthStatus.setHealthReport(healthChecker.getHealthReport());\n     nodeHealthStatus.setIsNodeHealthy(healthChecker.isHealthy());\n     nodeHealthStatus.setLastHealthReportTime(healthChecker\n       .getLastHealthReportTime());\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Node\u0027s health-status : \" + nodeHealthStatus.getIsNodeHealthy()\n           + \", \" + nodeHealthStatus.getHealthReport());\n     }\n     List\u003cContainerStatus\u003e containersStatuses \u003d getContainerStatuses();\n     ResourceUtilization containersUtilization \u003d getContainersUtilization();\n+    ResourceUtilization nodeUtilization \u003d getNodeUtilization();\n     NodeStatus nodeStatus \u003d\n         NodeStatus.newInstance(nodeId, responseId, containersStatuses,\n           createKeepAliveApplicationList(), nodeHealthStatus,\n-          containersUtilization);\n+          containersUtilization, nodeUtilization);\n \n     return nodeStatus;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private NodeStatus getNodeStatus(int responseId) throws IOException {\n\n    NodeHealthStatus nodeHealthStatus \u003d this.context.getNodeHealthStatus();\n    nodeHealthStatus.setHealthReport(healthChecker.getHealthReport());\n    nodeHealthStatus.setIsNodeHealthy(healthChecker.isHealthy());\n    nodeHealthStatus.setLastHealthReportTime(healthChecker\n      .getLastHealthReportTime());\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Node\u0027s health-status : \" + nodeHealthStatus.getIsNodeHealthy()\n          + \", \" + nodeHealthStatus.getHealthReport());\n    }\n    List\u003cContainerStatus\u003e containersStatuses \u003d getContainerStatuses();\n    ResourceUtilization containersUtilization \u003d getContainersUtilization();\n    ResourceUtilization nodeUtilization \u003d getNodeUtilization();\n    NodeStatus nodeStatus \u003d\n        NodeStatus.newInstance(nodeId, responseId, containersStatuses,\n          createKeepAliveApplicationList(), nodeHealthStatus,\n          containersUtilization, nodeUtilization);\n\n    return nodeStatus;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "527c40e4d664c721b8f32d7cd8df21b2666fea8a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1012. Report NM aggregated container resource utilization in heartbeat. (Inigo Goiri via kasha)\n",
      "commitDate": "09/07/15 9:35 AM",
      "commitName": "527c40e4d664c721b8f32d7cd8df21b2666fea8a",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "04/06/15 4:59 AM",
      "commitNameOld": "d7e7f6aa03c67b6a6ccf664adcb06d90bc963e58",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 35.19,
      "commitsBetweenForRepo": 235,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,20 @@\n   private NodeStatus getNodeStatus(int responseId) throws IOException {\n \n     NodeHealthStatus nodeHealthStatus \u003d this.context.getNodeHealthStatus();\n     nodeHealthStatus.setHealthReport(healthChecker.getHealthReport());\n     nodeHealthStatus.setIsNodeHealthy(healthChecker.isHealthy());\n     nodeHealthStatus.setLastHealthReportTime(healthChecker\n       .getLastHealthReportTime());\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Node\u0027s health-status : \" + nodeHealthStatus.getIsNodeHealthy()\n           + \", \" + nodeHealthStatus.getHealthReport());\n     }\n     List\u003cContainerStatus\u003e containersStatuses \u003d getContainerStatuses();\n+    ResourceUtilization containersUtilization \u003d getContainersUtilization();\n     NodeStatus nodeStatus \u003d\n         NodeStatus.newInstance(nodeId, responseId, containersStatuses,\n-          createKeepAliveApplicationList(), nodeHealthStatus);\n+          createKeepAliveApplicationList(), nodeHealthStatus,\n+          containersUtilization);\n \n     return nodeStatus;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private NodeStatus getNodeStatus(int responseId) throws IOException {\n\n    NodeHealthStatus nodeHealthStatus \u003d this.context.getNodeHealthStatus();\n    nodeHealthStatus.setHealthReport(healthChecker.getHealthReport());\n    nodeHealthStatus.setIsNodeHealthy(healthChecker.isHealthy());\n    nodeHealthStatus.setLastHealthReportTime(healthChecker\n      .getLastHealthReportTime());\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Node\u0027s health-status : \" + nodeHealthStatus.getIsNodeHealthy()\n          + \", \" + nodeHealthStatus.getHealthReport());\n    }\n    List\u003cContainerStatus\u003e containersStatuses \u003d getContainerStatuses();\n    ResourceUtilization containersUtilization \u003d getContainersUtilization();\n    NodeStatus nodeStatus \u003d\n        NodeStatus.newInstance(nodeId, responseId, containersStatuses,\n          createKeepAliveApplicationList(), nodeHealthStatus,\n          containersUtilization);\n\n    return nodeStatus;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "0a641496c706fc175e7bf66d69ebf71c7d078e84": {
      "type": "Yexceptionschange",
      "commitMessage": "YARN-1372. Ensure all completed containers are reported to the AMs across RM restart. Contributed by Anubhav Dhoot\n",
      "commitDate": "22/09/14 10:30 AM",
      "commitName": "0a641496c706fc175e7bf66d69ebf71c7d078e84",
      "commitAuthor": "Jian He",
      "commitDateOld": "12/08/14 3:56 AM",
      "commitNameOld": "c2febdcbaa12078db42403fe8fd74180fb58a84b",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 41.27,
      "commitsBetweenForRepo": 399,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n-  private NodeStatus getNodeStatus(int responseId) {\n+  private NodeStatus getNodeStatus(int responseId) throws IOException {\n \n     NodeHealthStatus nodeHealthStatus \u003d this.context.getNodeHealthStatus();\n     nodeHealthStatus.setHealthReport(healthChecker.getHealthReport());\n     nodeHealthStatus.setIsNodeHealthy(healthChecker.isHealthy());\n     nodeHealthStatus.setLastHealthReportTime(healthChecker\n       .getLastHealthReportTime());\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Node\u0027s health-status : \" + nodeHealthStatus.getIsNodeHealthy()\n           + \", \" + nodeHealthStatus.getHealthReport());\n     }\n     List\u003cContainerStatus\u003e containersStatuses \u003d getContainerStatuses();\n     NodeStatus nodeStatus \u003d\n         NodeStatus.newInstance(nodeId, responseId, containersStatuses,\n           createKeepAliveApplicationList(), nodeHealthStatus);\n \n     return nodeStatus;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private NodeStatus getNodeStatus(int responseId) throws IOException {\n\n    NodeHealthStatus nodeHealthStatus \u003d this.context.getNodeHealthStatus();\n    nodeHealthStatus.setHealthReport(healthChecker.getHealthReport());\n    nodeHealthStatus.setIsNodeHealthy(healthChecker.isHealthy());\n    nodeHealthStatus.setLastHealthReportTime(healthChecker\n      .getLastHealthReportTime());\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Node\u0027s health-status : \" + nodeHealthStatus.getIsNodeHealthy()\n          + \", \" + nodeHealthStatus.getHealthReport());\n    }\n    List\u003cContainerStatus\u003e containersStatuses \u003d getContainerStatuses();\n    NodeStatus nodeStatus \u003d\n        NodeStatus.newInstance(nodeId, responseId, containersStatuses,\n          createKeepAliveApplicationList(), nodeHealthStatus);\n\n    return nodeStatus;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {
        "oldValue": "[]",
        "newValue": "[IOException]"
      }
    },
    "44b6261bfacddea88a3cf02d406f970bbbb98d04": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1892. Improved some logs in the scheduler. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1587717 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/04/14 1:37 PM",
      "commitName": "44b6261bfacddea88a3cf02d406f970bbbb98d04",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "07/03/14 2:36 PM",
      "commitNameOld": "1c4047b0e46e95a92509de2e59a93433f5968538",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 38.92,
      "commitsBetweenForRepo": 286,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,18 @@\n   private NodeStatus getNodeStatus(int responseId) {\n \n     NodeHealthStatus nodeHealthStatus \u003d this.context.getNodeHealthStatus();\n     nodeHealthStatus.setHealthReport(healthChecker.getHealthReport());\n     nodeHealthStatus.setIsNodeHealthy(healthChecker.isHealthy());\n     nodeHealthStatus.setLastHealthReportTime(healthChecker\n       .getLastHealthReportTime());\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Node\u0027s health-status : \" + nodeHealthStatus.getIsNodeHealthy()\n           + \", \" + nodeHealthStatus.getHealthReport());\n     }\n     List\u003cContainerStatus\u003e containersStatuses \u003d getContainerStatuses();\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(this.nodeId + \" sending out status for \"\n-          + containersStatuses.size() + \" containers\");\n-    }\n     NodeStatus nodeStatus \u003d\n         NodeStatus.newInstance(nodeId, responseId, containersStatuses,\n           createKeepAliveApplicationList(), nodeHealthStatus);\n \n     return nodeStatus;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private NodeStatus getNodeStatus(int responseId) {\n\n    NodeHealthStatus nodeHealthStatus \u003d this.context.getNodeHealthStatus();\n    nodeHealthStatus.setHealthReport(healthChecker.getHealthReport());\n    nodeHealthStatus.setIsNodeHealthy(healthChecker.isHealthy());\n    nodeHealthStatus.setLastHealthReportTime(healthChecker\n      .getLastHealthReportTime());\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Node\u0027s health-status : \" + nodeHealthStatus.getIsNodeHealthy()\n          + \", \" + nodeHealthStatus.getHealthReport());\n    }\n    List\u003cContainerStatus\u003e containersStatuses \u003d getContainerStatuses();\n    NodeStatus nodeStatus \u003d\n        NodeStatus.newInstance(nodeId, responseId, containersStatuses,\n          createKeepAliveApplicationList(), nodeHealthStatus);\n\n    return nodeStatus;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "1c4047b0e46e95a92509de2e59a93433f5968538": {
      "type": "Ymultichange(Yrename,Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-1783. Fixed a bug in NodeManager\u0027s status-updater that was losing completed container statuses when NodeManager is forced to resync by the ResourceManager. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1575437 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/03/14 2:36 PM",
      "commitName": "1c4047b0e46e95a92509de2e59a93433f5968538",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-1783. Fixed a bug in NodeManager\u0027s status-updater that was losing completed container statuses when NodeManager is forced to resync by the ResourceManager. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1575437 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/03/14 2:36 PM",
          "commitName": "1c4047b0e46e95a92509de2e59a93433f5968538",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "18/11/13 9:17 PM",
          "commitNameOld": "cfa783141fa69c2cf154d1d9e5393353d14ce5e1",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 108.72,
          "commitsBetweenForRepo": 763,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,22 @@\n-  public NodeStatus getNodeStatusAndUpdateContainersInContext(\n-      int responseId) {\n+  private NodeStatus getNodeStatus(int responseId) {\n \n     NodeHealthStatus nodeHealthStatus \u003d this.context.getNodeHealthStatus();\n     nodeHealthStatus.setHealthReport(healthChecker.getHealthReport());\n     nodeHealthStatus.setIsNodeHealthy(healthChecker.isHealthy());\n-    nodeHealthStatus.setLastHealthReportTime(\n-        healthChecker.getLastHealthReportTime());\n+    nodeHealthStatus.setLastHealthReportTime(healthChecker\n+      .getLastHealthReportTime());\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Node\u0027s health-status : \" + nodeHealthStatus.getIsNodeHealthy()\n-                + \", \" + nodeHealthStatus.getHealthReport());\n+          + \", \" + nodeHealthStatus.getHealthReport());\n     }\n-    List\u003cContainerStatus\u003e containersStatuses \u003d updateAndGetContainerStatuses();\n-    LOG.debug(this.nodeId + \" sending out status for \"\n-        + containersStatuses.size() + \" containers\");\n-    NodeStatus nodeStatus \u003d NodeStatus.newInstance(nodeId, responseId,\n-      containersStatuses, createKeepAliveApplicationList(), nodeHealthStatus);\n+    List\u003cContainerStatus\u003e containersStatuses \u003d getContainerStatuses();\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(this.nodeId + \" sending out status for \"\n+          + containersStatuses.size() + \" containers\");\n+    }\n+    NodeStatus nodeStatus \u003d\n+        NodeStatus.newInstance(nodeId, responseId, containersStatuses,\n+          createKeepAliveApplicationList(), nodeHealthStatus);\n \n     return nodeStatus;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private NodeStatus getNodeStatus(int responseId) {\n\n    NodeHealthStatus nodeHealthStatus \u003d this.context.getNodeHealthStatus();\n    nodeHealthStatus.setHealthReport(healthChecker.getHealthReport());\n    nodeHealthStatus.setIsNodeHealthy(healthChecker.isHealthy());\n    nodeHealthStatus.setLastHealthReportTime(healthChecker\n      .getLastHealthReportTime());\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Node\u0027s health-status : \" + nodeHealthStatus.getIsNodeHealthy()\n          + \", \" + nodeHealthStatus.getHealthReport());\n    }\n    List\u003cContainerStatus\u003e containersStatuses \u003d getContainerStatuses();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(this.nodeId + \" sending out status for \"\n          + containersStatuses.size() + \" containers\");\n    }\n    NodeStatus nodeStatus \u003d\n        NodeStatus.newInstance(nodeId, responseId, containersStatuses,\n          createKeepAliveApplicationList(), nodeHealthStatus);\n\n    return nodeStatus;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
          "extendedDetails": {
            "oldValue": "getNodeStatusAndUpdateContainersInContext",
            "newValue": "getNodeStatus"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-1783. Fixed a bug in NodeManager\u0027s status-updater that was losing completed container statuses when NodeManager is forced to resync by the ResourceManager. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1575437 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/03/14 2:36 PM",
          "commitName": "1c4047b0e46e95a92509de2e59a93433f5968538",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "18/11/13 9:17 PM",
          "commitNameOld": "cfa783141fa69c2cf154d1d9e5393353d14ce5e1",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 108.72,
          "commitsBetweenForRepo": 763,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,22 @@\n-  public NodeStatus getNodeStatusAndUpdateContainersInContext(\n-      int responseId) {\n+  private NodeStatus getNodeStatus(int responseId) {\n \n     NodeHealthStatus nodeHealthStatus \u003d this.context.getNodeHealthStatus();\n     nodeHealthStatus.setHealthReport(healthChecker.getHealthReport());\n     nodeHealthStatus.setIsNodeHealthy(healthChecker.isHealthy());\n-    nodeHealthStatus.setLastHealthReportTime(\n-        healthChecker.getLastHealthReportTime());\n+    nodeHealthStatus.setLastHealthReportTime(healthChecker\n+      .getLastHealthReportTime());\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Node\u0027s health-status : \" + nodeHealthStatus.getIsNodeHealthy()\n-                + \", \" + nodeHealthStatus.getHealthReport());\n+          + \", \" + nodeHealthStatus.getHealthReport());\n     }\n-    List\u003cContainerStatus\u003e containersStatuses \u003d updateAndGetContainerStatuses();\n-    LOG.debug(this.nodeId + \" sending out status for \"\n-        + containersStatuses.size() + \" containers\");\n-    NodeStatus nodeStatus \u003d NodeStatus.newInstance(nodeId, responseId,\n-      containersStatuses, createKeepAliveApplicationList(), nodeHealthStatus);\n+    List\u003cContainerStatus\u003e containersStatuses \u003d getContainerStatuses();\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(this.nodeId + \" sending out status for \"\n+          + containersStatuses.size() + \" containers\");\n+    }\n+    NodeStatus nodeStatus \u003d\n+        NodeStatus.newInstance(nodeId, responseId, containersStatuses,\n+          createKeepAliveApplicationList(), nodeHealthStatus);\n \n     return nodeStatus;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private NodeStatus getNodeStatus(int responseId) {\n\n    NodeHealthStatus nodeHealthStatus \u003d this.context.getNodeHealthStatus();\n    nodeHealthStatus.setHealthReport(healthChecker.getHealthReport());\n    nodeHealthStatus.setIsNodeHealthy(healthChecker.isHealthy());\n    nodeHealthStatus.setLastHealthReportTime(healthChecker\n      .getLastHealthReportTime());\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Node\u0027s health-status : \" + nodeHealthStatus.getIsNodeHealthy()\n          + \", \" + nodeHealthStatus.getHealthReport());\n    }\n    List\u003cContainerStatus\u003e containersStatuses \u003d getContainerStatuses();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(this.nodeId + \" sending out status for \"\n          + containersStatuses.size() + \" containers\");\n    }\n    NodeStatus nodeStatus \u003d\n        NodeStatus.newInstance(nodeId, responseId, containersStatuses,\n          createKeepAliveApplicationList(), nodeHealthStatus);\n\n    return nodeStatus;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1783. Fixed a bug in NodeManager\u0027s status-updater that was losing completed container statuses when NodeManager is forced to resync by the ResourceManager. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1575437 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/03/14 2:36 PM",
          "commitName": "1c4047b0e46e95a92509de2e59a93433f5968538",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "18/11/13 9:17 PM",
          "commitNameOld": "cfa783141fa69c2cf154d1d9e5393353d14ce5e1",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 108.72,
          "commitsBetweenForRepo": 763,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,22 @@\n-  public NodeStatus getNodeStatusAndUpdateContainersInContext(\n-      int responseId) {\n+  private NodeStatus getNodeStatus(int responseId) {\n \n     NodeHealthStatus nodeHealthStatus \u003d this.context.getNodeHealthStatus();\n     nodeHealthStatus.setHealthReport(healthChecker.getHealthReport());\n     nodeHealthStatus.setIsNodeHealthy(healthChecker.isHealthy());\n-    nodeHealthStatus.setLastHealthReportTime(\n-        healthChecker.getLastHealthReportTime());\n+    nodeHealthStatus.setLastHealthReportTime(healthChecker\n+      .getLastHealthReportTime());\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Node\u0027s health-status : \" + nodeHealthStatus.getIsNodeHealthy()\n-                + \", \" + nodeHealthStatus.getHealthReport());\n+          + \", \" + nodeHealthStatus.getHealthReport());\n     }\n-    List\u003cContainerStatus\u003e containersStatuses \u003d updateAndGetContainerStatuses();\n-    LOG.debug(this.nodeId + \" sending out status for \"\n-        + containersStatuses.size() + \" containers\");\n-    NodeStatus nodeStatus \u003d NodeStatus.newInstance(nodeId, responseId,\n-      containersStatuses, createKeepAliveApplicationList(), nodeHealthStatus);\n+    List\u003cContainerStatus\u003e containersStatuses \u003d getContainerStatuses();\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(this.nodeId + \" sending out status for \"\n+          + containersStatuses.size() + \" containers\");\n+    }\n+    NodeStatus nodeStatus \u003d\n+        NodeStatus.newInstance(nodeId, responseId, containersStatuses,\n+          createKeepAliveApplicationList(), nodeHealthStatus);\n \n     return nodeStatus;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private NodeStatus getNodeStatus(int responseId) {\n\n    NodeHealthStatus nodeHealthStatus \u003d this.context.getNodeHealthStatus();\n    nodeHealthStatus.setHealthReport(healthChecker.getHealthReport());\n    nodeHealthStatus.setIsNodeHealthy(healthChecker.isHealthy());\n    nodeHealthStatus.setLastHealthReportTime(healthChecker\n      .getLastHealthReportTime());\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Node\u0027s health-status : \" + nodeHealthStatus.getIsNodeHealthy()\n          + \", \" + nodeHealthStatus.getHealthReport());\n    }\n    List\u003cContainerStatus\u003e containersStatuses \u003d getContainerStatuses();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(this.nodeId + \" sending out status for \"\n          + containersStatuses.size() + \" containers\");\n    }\n    NodeStatus nodeStatus \u003d\n        NodeStatus.newInstance(nodeId, responseId, containersStatuses,\n          createKeepAliveApplicationList(), nodeHealthStatus);\n\n    return nodeStatus;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "cfa783141fa69c2cf154d1d9e5393353d14ce5e1": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-1210. Changed RM to start new app-attempts on RM restart only after ensuring that previous AM exited or after expiry time. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1543310 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/11/13 9:17 PM",
      "commitName": "cfa783141fa69c2cf154d1d9e5393353d14ce5e1",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-1210. Changed RM to start new app-attempts on RM restart only after ensuring that previous AM exited or after expiry time. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1543310 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/11/13 9:17 PM",
          "commitName": "cfa783141fa69c2cf154d1d9e5393353d14ce5e1",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "28/10/13 5:54 PM",
          "commitNameOld": "defa7af4d3ef327c7c05807f640974e29c6d045b",
          "commitAuthorOld": "Sanford Ryza",
          "daysBetweenCommits": 21.18,
          "commitsBetweenForRepo": 114,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,54 +1,20 @@\n-  public NodeStatus getNodeStatusAndUpdateContainersInContext() {\n-\n-    NodeStatus nodeStatus \u003d recordFactory.newRecordInstance(NodeStatus.class);\n-    nodeStatus.setNodeId(this.nodeId);\n-\n-    int numActiveContainers \u003d 0;\n-    List\u003cContainerStatus\u003e containersStatuses \u003d new ArrayList\u003cContainerStatus\u003e();\n-    for (Iterator\u003cEntry\u003cContainerId, Container\u003e\u003e i \u003d\n-        this.context.getContainers().entrySet().iterator(); i.hasNext();) {\n-      Entry\u003cContainerId, Container\u003e e \u003d i.next();\n-      ContainerId containerId \u003d e.getKey();\n-      Container container \u003d e.getValue();\n-\n-      // Clone the container to send it to the RM\n-      org.apache.hadoop.yarn.api.records.ContainerStatus containerStatus \u003d \n-          container.cloneAndGetContainerStatus();\n-      containersStatuses.add(containerStatus);\n-      ++numActiveContainers;\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Sending out status for container: \" + containerStatus);\n-      }\n-\n-      if (containerStatus.getState() \u003d\u003d ContainerState.COMPLETE) {\n-        // Remove\n-        i.remove();\n-        // Adding to finished containers cache. Cache will keep it around at\n-        // least for #durationToTrackStoppedContainers duration. In the\n-        // subsequent call to stop container it will get removed from cache.\n-        addStoppedContainersToCache(containerId);\n-        \n-        LOG.info(\"Removed completed container \" + containerId);\n-      }\n-    }\n-    nodeStatus.setContainersStatuses(containersStatuses);\n-\n-    LOG.debug(this.nodeId + \" sending out status for \"\n-        + numActiveContainers + \" containers\");\n+  public NodeStatus getNodeStatusAndUpdateContainersInContext(\n+      int responseId) {\n \n     NodeHealthStatus nodeHealthStatus \u003d this.context.getNodeHealthStatus();\n     nodeHealthStatus.setHealthReport(healthChecker.getHealthReport());\n     nodeHealthStatus.setIsNodeHealthy(healthChecker.isHealthy());\n     nodeHealthStatus.setLastHealthReportTime(\n         healthChecker.getLastHealthReportTime());\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Node\u0027s health-status : \" + nodeHealthStatus.getIsNodeHealthy()\n                 + \", \" + nodeHealthStatus.getHealthReport());\n     }\n-    nodeStatus.setNodeHealthStatus(nodeHealthStatus);\n+    List\u003cContainerStatus\u003e containersStatuses \u003d updateAndGetContainerStatuses();\n+    LOG.debug(this.nodeId + \" sending out status for \"\n+        + containersStatuses.size() + \" containers\");\n+    NodeStatus nodeStatus \u003d NodeStatus.newInstance(nodeId, responseId,\n+      containersStatuses, createKeepAliveApplicationList(), nodeHealthStatus);\n \n-    List\u003cApplicationId\u003e keepAliveAppIds \u003d createKeepAliveApplicationList();\n-    nodeStatus.setKeepAliveApplications(keepAliveAppIds);\n-    \n     return nodeStatus;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public NodeStatus getNodeStatusAndUpdateContainersInContext(\n      int responseId) {\n\n    NodeHealthStatus nodeHealthStatus \u003d this.context.getNodeHealthStatus();\n    nodeHealthStatus.setHealthReport(healthChecker.getHealthReport());\n    nodeHealthStatus.setIsNodeHealthy(healthChecker.isHealthy());\n    nodeHealthStatus.setLastHealthReportTime(\n        healthChecker.getLastHealthReportTime());\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Node\u0027s health-status : \" + nodeHealthStatus.getIsNodeHealthy()\n                + \", \" + nodeHealthStatus.getHealthReport());\n    }\n    List\u003cContainerStatus\u003e containersStatuses \u003d updateAndGetContainerStatuses();\n    LOG.debug(this.nodeId + \" sending out status for \"\n        + containersStatuses.size() + \" containers\");\n    NodeStatus nodeStatus \u003d NodeStatus.newInstance(nodeId, responseId,\n      containersStatuses, createKeepAliveApplicationList(), nodeHealthStatus);\n\n    return nodeStatus;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[responseId-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1210. Changed RM to start new app-attempts on RM restart only after ensuring that previous AM exited or after expiry time. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1543310 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/11/13 9:17 PM",
          "commitName": "cfa783141fa69c2cf154d1d9e5393353d14ce5e1",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "28/10/13 5:54 PM",
          "commitNameOld": "defa7af4d3ef327c7c05807f640974e29c6d045b",
          "commitAuthorOld": "Sanford Ryza",
          "daysBetweenCommits": 21.18,
          "commitsBetweenForRepo": 114,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,54 +1,20 @@\n-  public NodeStatus getNodeStatusAndUpdateContainersInContext() {\n-\n-    NodeStatus nodeStatus \u003d recordFactory.newRecordInstance(NodeStatus.class);\n-    nodeStatus.setNodeId(this.nodeId);\n-\n-    int numActiveContainers \u003d 0;\n-    List\u003cContainerStatus\u003e containersStatuses \u003d new ArrayList\u003cContainerStatus\u003e();\n-    for (Iterator\u003cEntry\u003cContainerId, Container\u003e\u003e i \u003d\n-        this.context.getContainers().entrySet().iterator(); i.hasNext();) {\n-      Entry\u003cContainerId, Container\u003e e \u003d i.next();\n-      ContainerId containerId \u003d e.getKey();\n-      Container container \u003d e.getValue();\n-\n-      // Clone the container to send it to the RM\n-      org.apache.hadoop.yarn.api.records.ContainerStatus containerStatus \u003d \n-          container.cloneAndGetContainerStatus();\n-      containersStatuses.add(containerStatus);\n-      ++numActiveContainers;\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Sending out status for container: \" + containerStatus);\n-      }\n-\n-      if (containerStatus.getState() \u003d\u003d ContainerState.COMPLETE) {\n-        // Remove\n-        i.remove();\n-        // Adding to finished containers cache. Cache will keep it around at\n-        // least for #durationToTrackStoppedContainers duration. In the\n-        // subsequent call to stop container it will get removed from cache.\n-        addStoppedContainersToCache(containerId);\n-        \n-        LOG.info(\"Removed completed container \" + containerId);\n-      }\n-    }\n-    nodeStatus.setContainersStatuses(containersStatuses);\n-\n-    LOG.debug(this.nodeId + \" sending out status for \"\n-        + numActiveContainers + \" containers\");\n+  public NodeStatus getNodeStatusAndUpdateContainersInContext(\n+      int responseId) {\n \n     NodeHealthStatus nodeHealthStatus \u003d this.context.getNodeHealthStatus();\n     nodeHealthStatus.setHealthReport(healthChecker.getHealthReport());\n     nodeHealthStatus.setIsNodeHealthy(healthChecker.isHealthy());\n     nodeHealthStatus.setLastHealthReportTime(\n         healthChecker.getLastHealthReportTime());\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Node\u0027s health-status : \" + nodeHealthStatus.getIsNodeHealthy()\n                 + \", \" + nodeHealthStatus.getHealthReport());\n     }\n-    nodeStatus.setNodeHealthStatus(nodeHealthStatus);\n+    List\u003cContainerStatus\u003e containersStatuses \u003d updateAndGetContainerStatuses();\n+    LOG.debug(this.nodeId + \" sending out status for \"\n+        + containersStatuses.size() + \" containers\");\n+    NodeStatus nodeStatus \u003d NodeStatus.newInstance(nodeId, responseId,\n+      containersStatuses, createKeepAliveApplicationList(), nodeHealthStatus);\n \n-    List\u003cApplicationId\u003e keepAliveAppIds \u003d createKeepAliveApplicationList();\n-    nodeStatus.setKeepAliveApplications(keepAliveAppIds);\n-    \n     return nodeStatus;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public NodeStatus getNodeStatusAndUpdateContainersInContext(\n      int responseId) {\n\n    NodeHealthStatus nodeHealthStatus \u003d this.context.getNodeHealthStatus();\n    nodeHealthStatus.setHealthReport(healthChecker.getHealthReport());\n    nodeHealthStatus.setIsNodeHealthy(healthChecker.isHealthy());\n    nodeHealthStatus.setLastHealthReportTime(\n        healthChecker.getLastHealthReportTime());\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Node\u0027s health-status : \" + nodeHealthStatus.getIsNodeHealthy()\n                + \", \" + nodeHealthStatus.getHealthReport());\n    }\n    List\u003cContainerStatus\u003e containersStatuses \u003d updateAndGetContainerStatuses();\n    LOG.debug(this.nodeId + \" sending out status for \"\n        + containersStatuses.size() + \" containers\");\n    NodeStatus nodeStatus \u003d NodeStatus.newInstance(nodeId, responseId,\n      containersStatuses, createKeepAliveApplicationList(), nodeHealthStatus);\n\n    return nodeStatus;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "defa7af4d3ef327c7c05807f640974e29c6d045b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1109. Demote NodeManager \"Sending out status for container\" logs to debug (haosdent via Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1536573 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/10/13 5:54 PM",
      "commitName": "defa7af4d3ef327c7c05807f640974e29c6d045b",
      "commitAuthor": "Sanford Ryza",
      "commitDateOld": "06/10/13 11:32 AM",
      "commitNameOld": "44f7ee7192d150b43a3012f06cec67be5b64edd0",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 22.27,
      "commitsBetweenForRepo": 145,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,54 @@\n   public NodeStatus getNodeStatusAndUpdateContainersInContext() {\n \n     NodeStatus nodeStatus \u003d recordFactory.newRecordInstance(NodeStatus.class);\n     nodeStatus.setNodeId(this.nodeId);\n \n     int numActiveContainers \u003d 0;\n     List\u003cContainerStatus\u003e containersStatuses \u003d new ArrayList\u003cContainerStatus\u003e();\n     for (Iterator\u003cEntry\u003cContainerId, Container\u003e\u003e i \u003d\n         this.context.getContainers().entrySet().iterator(); i.hasNext();) {\n       Entry\u003cContainerId, Container\u003e e \u003d i.next();\n       ContainerId containerId \u003d e.getKey();\n       Container container \u003d e.getValue();\n \n       // Clone the container to send it to the RM\n       org.apache.hadoop.yarn.api.records.ContainerStatus containerStatus \u003d \n           container.cloneAndGetContainerStatus();\n       containersStatuses.add(containerStatus);\n       ++numActiveContainers;\n-      LOG.info(\"Sending out status for container: \" + containerStatus);\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Sending out status for container: \" + containerStatus);\n+      }\n \n       if (containerStatus.getState() \u003d\u003d ContainerState.COMPLETE) {\n         // Remove\n         i.remove();\n         // Adding to finished containers cache. Cache will keep it around at\n         // least for #durationToTrackStoppedContainers duration. In the\n         // subsequent call to stop container it will get removed from cache.\n         addStoppedContainersToCache(containerId);\n         \n         LOG.info(\"Removed completed container \" + containerId);\n       }\n     }\n     nodeStatus.setContainersStatuses(containersStatuses);\n \n     LOG.debug(this.nodeId + \" sending out status for \"\n         + numActiveContainers + \" containers\");\n \n     NodeHealthStatus nodeHealthStatus \u003d this.context.getNodeHealthStatus();\n     nodeHealthStatus.setHealthReport(healthChecker.getHealthReport());\n     nodeHealthStatus.setIsNodeHealthy(healthChecker.isHealthy());\n     nodeHealthStatus.setLastHealthReportTime(\n         healthChecker.getLastHealthReportTime());\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Node\u0027s health-status : \" + nodeHealthStatus.getIsNodeHealthy()\n                 + \", \" + nodeHealthStatus.getHealthReport());\n     }\n     nodeStatus.setNodeHealthStatus(nodeHealthStatus);\n \n     List\u003cApplicationId\u003e keepAliveAppIds \u003d createKeepAliveApplicationList();\n     nodeStatus.setKeepAliveApplications(keepAliveAppIds);\n     \n     return nodeStatus;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public NodeStatus getNodeStatusAndUpdateContainersInContext() {\n\n    NodeStatus nodeStatus \u003d recordFactory.newRecordInstance(NodeStatus.class);\n    nodeStatus.setNodeId(this.nodeId);\n\n    int numActiveContainers \u003d 0;\n    List\u003cContainerStatus\u003e containersStatuses \u003d new ArrayList\u003cContainerStatus\u003e();\n    for (Iterator\u003cEntry\u003cContainerId, Container\u003e\u003e i \u003d\n        this.context.getContainers().entrySet().iterator(); i.hasNext();) {\n      Entry\u003cContainerId, Container\u003e e \u003d i.next();\n      ContainerId containerId \u003d e.getKey();\n      Container container \u003d e.getValue();\n\n      // Clone the container to send it to the RM\n      org.apache.hadoop.yarn.api.records.ContainerStatus containerStatus \u003d \n          container.cloneAndGetContainerStatus();\n      containersStatuses.add(containerStatus);\n      ++numActiveContainers;\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Sending out status for container: \" + containerStatus);\n      }\n\n      if (containerStatus.getState() \u003d\u003d ContainerState.COMPLETE) {\n        // Remove\n        i.remove();\n        // Adding to finished containers cache. Cache will keep it around at\n        // least for #durationToTrackStoppedContainers duration. In the\n        // subsequent call to stop container it will get removed from cache.\n        addStoppedContainersToCache(containerId);\n        \n        LOG.info(\"Removed completed container \" + containerId);\n      }\n    }\n    nodeStatus.setContainersStatuses(containersStatuses);\n\n    LOG.debug(this.nodeId + \" sending out status for \"\n        + numActiveContainers + \" containers\");\n\n    NodeHealthStatus nodeHealthStatus \u003d this.context.getNodeHealthStatus();\n    nodeHealthStatus.setHealthReport(healthChecker.getHealthReport());\n    nodeHealthStatus.setIsNodeHealthy(healthChecker.isHealthy());\n    nodeHealthStatus.setLastHealthReportTime(\n        healthChecker.getLastHealthReportTime());\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Node\u0027s health-status : \" + nodeHealthStatus.getIsNodeHealthy()\n                + \", \" + nodeHealthStatus.getHealthReport());\n    }\n    nodeStatus.setNodeHealthStatus(nodeHealthStatus);\n\n    List\u003cApplicationId\u003e keepAliveAppIds \u003d createKeepAliveApplicationList();\n    nodeStatus.setKeepAliveApplications(keepAliveAppIds);\n    \n    return nodeStatus;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "5b7889f9a7dea81bbb3c8be6944419b59ca4bed1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-903. Changed ContainerManager to suppress unnecessary warnings when stopping already stopped containers. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1509560 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/08/13 11:54 PM",
      "commitName": "5b7889f9a7dea81bbb3c8be6944419b59ca4bed1",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "29/07/13 8:06 PM",
      "commitNameOld": "3ca892dc0a24f95e9bbd00d3235ca6eb6b7fc329",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 3.16,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,52 @@\n   public NodeStatus getNodeStatusAndUpdateContainersInContext() {\n \n     NodeStatus nodeStatus \u003d recordFactory.newRecordInstance(NodeStatus.class);\n     nodeStatus.setNodeId(this.nodeId);\n \n     int numActiveContainers \u003d 0;\n     List\u003cContainerStatus\u003e containersStatuses \u003d new ArrayList\u003cContainerStatus\u003e();\n     for (Iterator\u003cEntry\u003cContainerId, Container\u003e\u003e i \u003d\n         this.context.getContainers().entrySet().iterator(); i.hasNext();) {\n       Entry\u003cContainerId, Container\u003e e \u003d i.next();\n       ContainerId containerId \u003d e.getKey();\n       Container container \u003d e.getValue();\n \n       // Clone the container to send it to the RM\n       org.apache.hadoop.yarn.api.records.ContainerStatus containerStatus \u003d \n           container.cloneAndGetContainerStatus();\n       containersStatuses.add(containerStatus);\n       ++numActiveContainers;\n       LOG.info(\"Sending out status for container: \" + containerStatus);\n \n       if (containerStatus.getState() \u003d\u003d ContainerState.COMPLETE) {\n         // Remove\n         i.remove();\n-\n+        // Adding to finished containers cache. Cache will keep it around at\n+        // least for #durationToTrackStoppedContainers duration. In the\n+        // subsequent call to stop container it will get removed from cache.\n+        addStoppedContainersToCache(containerId);\n+        \n         LOG.info(\"Removed completed container \" + containerId);\n       }\n     }\n     nodeStatus.setContainersStatuses(containersStatuses);\n \n     LOG.debug(this.nodeId + \" sending out status for \"\n         + numActiveContainers + \" containers\");\n \n     NodeHealthStatus nodeHealthStatus \u003d this.context.getNodeHealthStatus();\n     nodeHealthStatus.setHealthReport(healthChecker.getHealthReport());\n     nodeHealthStatus.setIsNodeHealthy(healthChecker.isHealthy());\n     nodeHealthStatus.setLastHealthReportTime(\n         healthChecker.getLastHealthReportTime());\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Node\u0027s health-status : \" + nodeHealthStatus.getIsNodeHealthy()\n                 + \", \" + nodeHealthStatus.getHealthReport());\n     }\n     nodeStatus.setNodeHealthStatus(nodeHealthStatus);\n \n     List\u003cApplicationId\u003e keepAliveAppIds \u003d createKeepAliveApplicationList();\n     nodeStatus.setKeepAliveApplications(keepAliveAppIds);\n     \n     return nodeStatus;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public NodeStatus getNodeStatusAndUpdateContainersInContext() {\n\n    NodeStatus nodeStatus \u003d recordFactory.newRecordInstance(NodeStatus.class);\n    nodeStatus.setNodeId(this.nodeId);\n\n    int numActiveContainers \u003d 0;\n    List\u003cContainerStatus\u003e containersStatuses \u003d new ArrayList\u003cContainerStatus\u003e();\n    for (Iterator\u003cEntry\u003cContainerId, Container\u003e\u003e i \u003d\n        this.context.getContainers().entrySet().iterator(); i.hasNext();) {\n      Entry\u003cContainerId, Container\u003e e \u003d i.next();\n      ContainerId containerId \u003d e.getKey();\n      Container container \u003d e.getValue();\n\n      // Clone the container to send it to the RM\n      org.apache.hadoop.yarn.api.records.ContainerStatus containerStatus \u003d \n          container.cloneAndGetContainerStatus();\n      containersStatuses.add(containerStatus);\n      ++numActiveContainers;\n      LOG.info(\"Sending out status for container: \" + containerStatus);\n\n      if (containerStatus.getState() \u003d\u003d ContainerState.COMPLETE) {\n        // Remove\n        i.remove();\n        // Adding to finished containers cache. Cache will keep it around at\n        // least for #durationToTrackStoppedContainers duration. In the\n        // subsequent call to stop container it will get removed from cache.\n        addStoppedContainersToCache(containerId);\n        \n        LOG.info(\"Removed completed container \" + containerId);\n      }\n    }\n    nodeStatus.setContainersStatuses(containersStatuses);\n\n    LOG.debug(this.nodeId + \" sending out status for \"\n        + numActiveContainers + \" containers\");\n\n    NodeHealthStatus nodeHealthStatus \u003d this.context.getNodeHealthStatus();\n    nodeHealthStatus.setHealthReport(healthChecker.getHealthReport());\n    nodeHealthStatus.setIsNodeHealthy(healthChecker.isHealthy());\n    nodeHealthStatus.setLastHealthReportTime(\n        healthChecker.getLastHealthReportTime());\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Node\u0027s health-status : \" + nodeHealthStatus.getIsNodeHealthy()\n                + \", \" + nodeHealthStatus.getHealthReport());\n    }\n    nodeStatus.setNodeHealthStatus(nodeHealthStatus);\n\n    List\u003cApplicationId\u003e keepAliveAppIds \u003d createKeepAliveApplicationList();\n    nodeStatus.setKeepAliveApplications(keepAliveAppIds);\n    \n    return nodeStatus;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "2e3b56f6e907f15f7c6caaad37d37b9e0ee89963": {
      "type": "Ymultichange(Yrename,Ymodifierchange)",
      "commitMessage": "YARN-495. Changed NM reboot behaviour to be a simple resync - kill all containers  and re-register with RM. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1466752 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/04/13 7:00 PM",
      "commitName": "2e3b56f6e907f15f7c6caaad37d37b9e0ee89963",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-495. Changed NM reboot behaviour to be a simple resync - kill all containers  and re-register with RM. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1466752 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/04/13 7:00 PM",
          "commitName": "2e3b56f6e907f15f7c6caaad37d37b9e0ee89963",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "08/04/13 12:17 PM",
          "commitNameOld": "16fedf5473cd715e3970da700b24ca10656e3576",
          "commitAuthorOld": "Bikas Saha",
          "daysBetweenCommits": 2.28,
          "commitsBetweenForRepo": 17,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,48 @@\n-  private NodeStatus getNodeStatus() {\n+  public NodeStatus getNodeStatusAndUpdateContainersInContext() {\n \n     NodeStatus nodeStatus \u003d recordFactory.newRecordInstance(NodeStatus.class);\n     nodeStatus.setNodeId(this.nodeId);\n \n     int numActiveContainers \u003d 0;\n     List\u003cContainerStatus\u003e containersStatuses \u003d new ArrayList\u003cContainerStatus\u003e();\n     for (Iterator\u003cEntry\u003cContainerId, Container\u003e\u003e i \u003d\n         this.context.getContainers().entrySet().iterator(); i.hasNext();) {\n       Entry\u003cContainerId, Container\u003e e \u003d i.next();\n       ContainerId containerId \u003d e.getKey();\n       Container container \u003d e.getValue();\n \n       // Clone the container to send it to the RM\n       org.apache.hadoop.yarn.api.records.ContainerStatus containerStatus \u003d \n           container.cloneAndGetContainerStatus();\n       containersStatuses.add(containerStatus);\n       ++numActiveContainers;\n       LOG.info(\"Sending out status for container: \" + containerStatus);\n \n       if (containerStatus.getState() \u003d\u003d ContainerState.COMPLETE) {\n         // Remove\n         i.remove();\n \n         LOG.info(\"Removed completed container \" + containerId);\n       }\n     }\n     nodeStatus.setContainersStatuses(containersStatuses);\n \n     LOG.debug(this.nodeId + \" sending out status for \"\n         + numActiveContainers + \" containers\");\n \n     NodeHealthStatus nodeHealthStatus \u003d this.context.getNodeHealthStatus();\n     nodeHealthStatus.setHealthReport(healthChecker.getHealthReport());\n     nodeHealthStatus.setIsNodeHealthy(healthChecker.isHealthy());\n     nodeHealthStatus.setLastHealthReportTime(\n         healthChecker.getLastHealthReportTime());\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Node\u0027s health-status : \" + nodeHealthStatus.getIsNodeHealthy()\n                 + \", \" + nodeHealthStatus.getHealthReport());\n     }\n     nodeStatus.setNodeHealthStatus(nodeHealthStatus);\n \n     List\u003cApplicationId\u003e keepAliveAppIds \u003d createKeepAliveApplicationList();\n     nodeStatus.setKeepAliveApplications(keepAliveAppIds);\n     \n     return nodeStatus;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public NodeStatus getNodeStatusAndUpdateContainersInContext() {\n\n    NodeStatus nodeStatus \u003d recordFactory.newRecordInstance(NodeStatus.class);\n    nodeStatus.setNodeId(this.nodeId);\n\n    int numActiveContainers \u003d 0;\n    List\u003cContainerStatus\u003e containersStatuses \u003d new ArrayList\u003cContainerStatus\u003e();\n    for (Iterator\u003cEntry\u003cContainerId, Container\u003e\u003e i \u003d\n        this.context.getContainers().entrySet().iterator(); i.hasNext();) {\n      Entry\u003cContainerId, Container\u003e e \u003d i.next();\n      ContainerId containerId \u003d e.getKey();\n      Container container \u003d e.getValue();\n\n      // Clone the container to send it to the RM\n      org.apache.hadoop.yarn.api.records.ContainerStatus containerStatus \u003d \n          container.cloneAndGetContainerStatus();\n      containersStatuses.add(containerStatus);\n      ++numActiveContainers;\n      LOG.info(\"Sending out status for container: \" + containerStatus);\n\n      if (containerStatus.getState() \u003d\u003d ContainerState.COMPLETE) {\n        // Remove\n        i.remove();\n\n        LOG.info(\"Removed completed container \" + containerId);\n      }\n    }\n    nodeStatus.setContainersStatuses(containersStatuses);\n\n    LOG.debug(this.nodeId + \" sending out status for \"\n        + numActiveContainers + \" containers\");\n\n    NodeHealthStatus nodeHealthStatus \u003d this.context.getNodeHealthStatus();\n    nodeHealthStatus.setHealthReport(healthChecker.getHealthReport());\n    nodeHealthStatus.setIsNodeHealthy(healthChecker.isHealthy());\n    nodeHealthStatus.setLastHealthReportTime(\n        healthChecker.getLastHealthReportTime());\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Node\u0027s health-status : \" + nodeHealthStatus.getIsNodeHealthy()\n                + \", \" + nodeHealthStatus.getHealthReport());\n    }\n    nodeStatus.setNodeHealthStatus(nodeHealthStatus);\n\n    List\u003cApplicationId\u003e keepAliveAppIds \u003d createKeepAliveApplicationList();\n    nodeStatus.setKeepAliveApplications(keepAliveAppIds);\n    \n    return nodeStatus;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
          "extendedDetails": {
            "oldValue": "getNodeStatus",
            "newValue": "getNodeStatusAndUpdateContainersInContext"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-495. Changed NM reboot behaviour to be a simple resync - kill all containers  and re-register with RM. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1466752 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/04/13 7:00 PM",
          "commitName": "2e3b56f6e907f15f7c6caaad37d37b9e0ee89963",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "08/04/13 12:17 PM",
          "commitNameOld": "16fedf5473cd715e3970da700b24ca10656e3576",
          "commitAuthorOld": "Bikas Saha",
          "daysBetweenCommits": 2.28,
          "commitsBetweenForRepo": 17,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,48 @@\n-  private NodeStatus getNodeStatus() {\n+  public NodeStatus getNodeStatusAndUpdateContainersInContext() {\n \n     NodeStatus nodeStatus \u003d recordFactory.newRecordInstance(NodeStatus.class);\n     nodeStatus.setNodeId(this.nodeId);\n \n     int numActiveContainers \u003d 0;\n     List\u003cContainerStatus\u003e containersStatuses \u003d new ArrayList\u003cContainerStatus\u003e();\n     for (Iterator\u003cEntry\u003cContainerId, Container\u003e\u003e i \u003d\n         this.context.getContainers().entrySet().iterator(); i.hasNext();) {\n       Entry\u003cContainerId, Container\u003e e \u003d i.next();\n       ContainerId containerId \u003d e.getKey();\n       Container container \u003d e.getValue();\n \n       // Clone the container to send it to the RM\n       org.apache.hadoop.yarn.api.records.ContainerStatus containerStatus \u003d \n           container.cloneAndGetContainerStatus();\n       containersStatuses.add(containerStatus);\n       ++numActiveContainers;\n       LOG.info(\"Sending out status for container: \" + containerStatus);\n \n       if (containerStatus.getState() \u003d\u003d ContainerState.COMPLETE) {\n         // Remove\n         i.remove();\n \n         LOG.info(\"Removed completed container \" + containerId);\n       }\n     }\n     nodeStatus.setContainersStatuses(containersStatuses);\n \n     LOG.debug(this.nodeId + \" sending out status for \"\n         + numActiveContainers + \" containers\");\n \n     NodeHealthStatus nodeHealthStatus \u003d this.context.getNodeHealthStatus();\n     nodeHealthStatus.setHealthReport(healthChecker.getHealthReport());\n     nodeHealthStatus.setIsNodeHealthy(healthChecker.isHealthy());\n     nodeHealthStatus.setLastHealthReportTime(\n         healthChecker.getLastHealthReportTime());\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Node\u0027s health-status : \" + nodeHealthStatus.getIsNodeHealthy()\n                 + \", \" + nodeHealthStatus.getHealthReport());\n     }\n     nodeStatus.setNodeHealthStatus(nodeHealthStatus);\n \n     List\u003cApplicationId\u003e keepAliveAppIds \u003d createKeepAliveApplicationList();\n     nodeStatus.setKeepAliveApplications(keepAliveAppIds);\n     \n     return nodeStatus;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public NodeStatus getNodeStatusAndUpdateContainersInContext() {\n\n    NodeStatus nodeStatus \u003d recordFactory.newRecordInstance(NodeStatus.class);\n    nodeStatus.setNodeId(this.nodeId);\n\n    int numActiveContainers \u003d 0;\n    List\u003cContainerStatus\u003e containersStatuses \u003d new ArrayList\u003cContainerStatus\u003e();\n    for (Iterator\u003cEntry\u003cContainerId, Container\u003e\u003e i \u003d\n        this.context.getContainers().entrySet().iterator(); i.hasNext();) {\n      Entry\u003cContainerId, Container\u003e e \u003d i.next();\n      ContainerId containerId \u003d e.getKey();\n      Container container \u003d e.getValue();\n\n      // Clone the container to send it to the RM\n      org.apache.hadoop.yarn.api.records.ContainerStatus containerStatus \u003d \n          container.cloneAndGetContainerStatus();\n      containersStatuses.add(containerStatus);\n      ++numActiveContainers;\n      LOG.info(\"Sending out status for container: \" + containerStatus);\n\n      if (containerStatus.getState() \u003d\u003d ContainerState.COMPLETE) {\n        // Remove\n        i.remove();\n\n        LOG.info(\"Removed completed container \" + containerId);\n      }\n    }\n    nodeStatus.setContainersStatuses(containersStatuses);\n\n    LOG.debug(this.nodeId + \" sending out status for \"\n        + numActiveContainers + \" containers\");\n\n    NodeHealthStatus nodeHealthStatus \u003d this.context.getNodeHealthStatus();\n    nodeHealthStatus.setHealthReport(healthChecker.getHealthReport());\n    nodeHealthStatus.setIsNodeHealthy(healthChecker.isHealthy());\n    nodeHealthStatus.setLastHealthReportTime(\n        healthChecker.getLastHealthReportTime());\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Node\u0027s health-status : \" + nodeHealthStatus.getIsNodeHealthy()\n                + \", \" + nodeHealthStatus.getHealthReport());\n    }\n    nodeStatus.setNodeHealthStatus(nodeHealthStatus);\n\n    List\u003cApplicationId\u003e keepAliveAppIds \u003d createKeepAliveApplicationList();\n    nodeStatus.setKeepAliveApplications(keepAliveAppIds);\n    \n    return nodeStatus;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[public]"
          }
        }
      ]
    },
    "16fedf5473cd715e3970da700b24ca10656e3576": {
      "type": "Ybodychange",
      "commitMessage": "YARN-479. NM retry behavior for connection to RM should be similar for lost heartbeats (Jian He via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1465731 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/04/13 12:17 PM",
      "commitName": "16fedf5473cd715e3970da700b24ca10656e3576",
      "commitAuthor": "Bikas Saha",
      "commitDateOld": "03/04/13 9:57 AM",
      "commitNameOld": "3e9200ddde4858be8ecdd8347b5fee63ed83df84",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 5.1,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,48 @@\n   private NodeStatus getNodeStatus() {\n \n     NodeStatus nodeStatus \u003d recordFactory.newRecordInstance(NodeStatus.class);\n     nodeStatus.setNodeId(this.nodeId);\n \n-    List\u003cContainerStatus\u003e containersStatuses \u003d new ArrayList\u003cContainerStatus\u003e();\n-    if(previousHeartBeatSucceeded) {\n-      previousContainersStatuses.clear();\n-    } else {\n-      containersStatuses.addAll(previousContainersStatuses);\n-    }\n-\n     int numActiveContainers \u003d 0;\n+    List\u003cContainerStatus\u003e containersStatuses \u003d new ArrayList\u003cContainerStatus\u003e();\n     for (Iterator\u003cEntry\u003cContainerId, Container\u003e\u003e i \u003d\n         this.context.getContainers().entrySet().iterator(); i.hasNext();) {\n       Entry\u003cContainerId, Container\u003e e \u003d i.next();\n       ContainerId containerId \u003d e.getKey();\n       Container container \u003d e.getValue();\n \n       // Clone the container to send it to the RM\n       org.apache.hadoop.yarn.api.records.ContainerStatus containerStatus \u003d \n           container.cloneAndGetContainerStatus();\n       containersStatuses.add(containerStatus);\n       ++numActiveContainers;\n       LOG.info(\"Sending out status for container: \" + containerStatus);\n \n       if (containerStatus.getState() \u003d\u003d ContainerState.COMPLETE) {\n-        previousContainersStatuses.add(containerStatus);\n         // Remove\n         i.remove();\n \n         LOG.info(\"Removed completed container \" + containerId);\n       }\n     }\n     nodeStatus.setContainersStatuses(containersStatuses);\n \n     LOG.debug(this.nodeId + \" sending out status for \"\n         + numActiveContainers + \" containers\");\n \n     NodeHealthStatus nodeHealthStatus \u003d this.context.getNodeHealthStatus();\n     nodeHealthStatus.setHealthReport(healthChecker.getHealthReport());\n     nodeHealthStatus.setIsNodeHealthy(healthChecker.isHealthy());\n     nodeHealthStatus.setLastHealthReportTime(\n         healthChecker.getLastHealthReportTime());\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Node\u0027s health-status : \" + nodeHealthStatus.getIsNodeHealthy()\n                 + \", \" + nodeHealthStatus.getHealthReport());\n     }\n     nodeStatus.setNodeHealthStatus(nodeHealthStatus);\n \n     List\u003cApplicationId\u003e keepAliveAppIds \u003d createKeepAliveApplicationList();\n     nodeStatus.setKeepAliveApplications(keepAliveAppIds);\n     \n     return nodeStatus;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private NodeStatus getNodeStatus() {\n\n    NodeStatus nodeStatus \u003d recordFactory.newRecordInstance(NodeStatus.class);\n    nodeStatus.setNodeId(this.nodeId);\n\n    int numActiveContainers \u003d 0;\n    List\u003cContainerStatus\u003e containersStatuses \u003d new ArrayList\u003cContainerStatus\u003e();\n    for (Iterator\u003cEntry\u003cContainerId, Container\u003e\u003e i \u003d\n        this.context.getContainers().entrySet().iterator(); i.hasNext();) {\n      Entry\u003cContainerId, Container\u003e e \u003d i.next();\n      ContainerId containerId \u003d e.getKey();\n      Container container \u003d e.getValue();\n\n      // Clone the container to send it to the RM\n      org.apache.hadoop.yarn.api.records.ContainerStatus containerStatus \u003d \n          container.cloneAndGetContainerStatus();\n      containersStatuses.add(containerStatus);\n      ++numActiveContainers;\n      LOG.info(\"Sending out status for container: \" + containerStatus);\n\n      if (containerStatus.getState() \u003d\u003d ContainerState.COMPLETE) {\n        // Remove\n        i.remove();\n\n        LOG.info(\"Removed completed container \" + containerId);\n      }\n    }\n    nodeStatus.setContainersStatuses(containersStatuses);\n\n    LOG.debug(this.nodeId + \" sending out status for \"\n        + numActiveContainers + \" containers\");\n\n    NodeHealthStatus nodeHealthStatus \u003d this.context.getNodeHealthStatus();\n    nodeHealthStatus.setHealthReport(healthChecker.getHealthReport());\n    nodeHealthStatus.setIsNodeHealthy(healthChecker.isHealthy());\n    nodeHealthStatus.setLastHealthReportTime(\n        healthChecker.getLastHealthReportTime());\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Node\u0027s health-status : \" + nodeHealthStatus.getIsNodeHealthy()\n                + \", \" + nodeHealthStatus.getHealthReport());\n    }\n    nodeStatus.setNodeHealthStatus(nodeHealthStatus);\n\n    List\u003cApplicationId\u003e keepAliveAppIds \u003d createKeepAliveApplicationList();\n    nodeStatus.setKeepAliveApplications(keepAliveAppIds);\n    \n    return nodeStatus;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "3e9200ddde4858be8ecdd8347b5fee63ed83df84": {
      "type": "Ybodychange",
      "commitMessage": "YARN-101. Fix NodeManager heartbeat processing to not lose track of completed containers in case of dropped heartbeats. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1464105 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/04/13 9:57 AM",
      "commitName": "3e9200ddde4858be8ecdd8347b5fee63ed83df84",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "01/04/13 6:04 PM",
      "commitNameOld": "7ca9fe73a0f5047ff0279f3e29a29c8447cbb81a",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 1.66,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,55 @@\n   private NodeStatus getNodeStatus() {\n \n     NodeStatus nodeStatus \u003d recordFactory.newRecordInstance(NodeStatus.class);\n     nodeStatus.setNodeId(this.nodeId);\n \n-    int numActiveContainers \u003d 0;\n     List\u003cContainerStatus\u003e containersStatuses \u003d new ArrayList\u003cContainerStatus\u003e();\n+    if(previousHeartBeatSucceeded) {\n+      previousContainersStatuses.clear();\n+    } else {\n+      containersStatuses.addAll(previousContainersStatuses);\n+    }\n+\n+    int numActiveContainers \u003d 0;\n     for (Iterator\u003cEntry\u003cContainerId, Container\u003e\u003e i \u003d\n         this.context.getContainers().entrySet().iterator(); i.hasNext();) {\n       Entry\u003cContainerId, Container\u003e e \u003d i.next();\n       ContainerId containerId \u003d e.getKey();\n       Container container \u003d e.getValue();\n \n       // Clone the container to send it to the RM\n       org.apache.hadoop.yarn.api.records.ContainerStatus containerStatus \u003d \n           container.cloneAndGetContainerStatus();\n       containersStatuses.add(containerStatus);\n       ++numActiveContainers;\n       LOG.info(\"Sending out status for container: \" + containerStatus);\n \n       if (containerStatus.getState() \u003d\u003d ContainerState.COMPLETE) {\n+        previousContainersStatuses.add(containerStatus);\n         // Remove\n         i.remove();\n \n         LOG.info(\"Removed completed container \" + containerId);\n       }\n     }\n     nodeStatus.setContainersStatuses(containersStatuses);\n \n     LOG.debug(this.nodeId + \" sending out status for \"\n         + numActiveContainers + \" containers\");\n \n     NodeHealthStatus nodeHealthStatus \u003d this.context.getNodeHealthStatus();\n     nodeHealthStatus.setHealthReport(healthChecker.getHealthReport());\n     nodeHealthStatus.setIsNodeHealthy(healthChecker.isHealthy());\n     nodeHealthStatus.setLastHealthReportTime(\n         healthChecker.getLastHealthReportTime());\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Node\u0027s health-status : \" + nodeHealthStatus.getIsNodeHealthy()\n                 + \", \" + nodeHealthStatus.getHealthReport());\n     }\n     nodeStatus.setNodeHealthStatus(nodeHealthStatus);\n \n     List\u003cApplicationId\u003e keepAliveAppIds \u003d createKeepAliveApplicationList();\n     nodeStatus.setKeepAliveApplications(keepAliveAppIds);\n     \n     return nodeStatus;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private NodeStatus getNodeStatus() {\n\n    NodeStatus nodeStatus \u003d recordFactory.newRecordInstance(NodeStatus.class);\n    nodeStatus.setNodeId(this.nodeId);\n\n    List\u003cContainerStatus\u003e containersStatuses \u003d new ArrayList\u003cContainerStatus\u003e();\n    if(previousHeartBeatSucceeded) {\n      previousContainersStatuses.clear();\n    } else {\n      containersStatuses.addAll(previousContainersStatuses);\n    }\n\n    int numActiveContainers \u003d 0;\n    for (Iterator\u003cEntry\u003cContainerId, Container\u003e\u003e i \u003d\n        this.context.getContainers().entrySet().iterator(); i.hasNext();) {\n      Entry\u003cContainerId, Container\u003e e \u003d i.next();\n      ContainerId containerId \u003d e.getKey();\n      Container container \u003d e.getValue();\n\n      // Clone the container to send it to the RM\n      org.apache.hadoop.yarn.api.records.ContainerStatus containerStatus \u003d \n          container.cloneAndGetContainerStatus();\n      containersStatuses.add(containerStatus);\n      ++numActiveContainers;\n      LOG.info(\"Sending out status for container: \" + containerStatus);\n\n      if (containerStatus.getState() \u003d\u003d ContainerState.COMPLETE) {\n        previousContainersStatuses.add(containerStatus);\n        // Remove\n        i.remove();\n\n        LOG.info(\"Removed completed container \" + containerId);\n      }\n    }\n    nodeStatus.setContainersStatuses(containersStatuses);\n\n    LOG.debug(this.nodeId + \" sending out status for \"\n        + numActiveContainers + \" containers\");\n\n    NodeHealthStatus nodeHealthStatus \u003d this.context.getNodeHealthStatus();\n    nodeHealthStatus.setHealthReport(healthChecker.getHealthReport());\n    nodeHealthStatus.setIsNodeHealthy(healthChecker.isHealthy());\n    nodeHealthStatus.setLastHealthReportTime(\n        healthChecker.getLastHealthReportTime());\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Node\u0027s health-status : \" + nodeHealthStatus.getIsNodeHealthy()\n                + \", \" + nodeHealthStatus.getHealthReport());\n    }\n    nodeStatus.setNodeHealthStatus(nodeHealthStatus);\n\n    List\u003cApplicationId\u003e keepAliveAppIds \u003d createKeepAliveApplicationList();\n    nodeStatus.setKeepAliveApplications(keepAliveAppIds);\n    \n    return nodeStatus;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private NodeStatus getNodeStatus() {\n\n    NodeStatus nodeStatus \u003d recordFactory.newRecordInstance(NodeStatus.class);\n    nodeStatus.setNodeId(this.nodeId);\n\n    int numActiveContainers \u003d 0;\n    List\u003cContainerStatus\u003e containersStatuses \u003d new ArrayList\u003cContainerStatus\u003e();\n    for (Iterator\u003cEntry\u003cContainerId, Container\u003e\u003e i \u003d\n        this.context.getContainers().entrySet().iterator(); i.hasNext();) {\n      Entry\u003cContainerId, Container\u003e e \u003d i.next();\n      ContainerId containerId \u003d e.getKey();\n      Container container \u003d e.getValue();\n\n      // Clone the container to send it to the RM\n      org.apache.hadoop.yarn.api.records.ContainerStatus containerStatus \u003d \n          container.cloneAndGetContainerStatus();\n      containersStatuses.add(containerStatus);\n      ++numActiveContainers;\n      LOG.info(\"Sending out status for container: \" + containerStatus);\n\n      if (containerStatus.getState() \u003d\u003d ContainerState.COMPLETE) {\n        // Remove\n        i.remove();\n\n        LOG.info(\"Removed completed container \" + containerId);\n      }\n    }\n    nodeStatus.setContainersStatuses(containersStatuses);\n\n    LOG.debug(this.nodeId + \" sending out status for \"\n        + numActiveContainers + \" containers\");\n\n    NodeHealthStatus nodeHealthStatus \u003d this.context.getNodeHealthStatus();\n    nodeHealthStatus.setHealthReport(healthChecker.getHealthReport());\n    nodeHealthStatus.setIsNodeHealthy(healthChecker.isHealthy());\n    nodeHealthStatus.setLastHealthReportTime(\n        healthChecker.getLastHealthReportTime());\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Node\u0027s health-status : \" + nodeHealthStatus.getIsNodeHealthy()\n                + \", \" + nodeHealthStatus.getHealthReport());\n    }\n    nodeStatus.setNodeHealthStatus(nodeHealthStatus);\n\n    List\u003cApplicationId\u003e keepAliveAppIds \u003d createKeepAliveApplicationList();\n    nodeStatus.setKeepAliveApplications(keepAliveAppIds);\n    \n    return nodeStatus;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java"
      }
    },
    "50fa9b89f42bd3fe6aad5086b0df14a00dadb24b": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3398. Fixed log aggregation to work correctly in secure mode. Contributed by Siddharth Seth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1214429 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/12/11 11:55 AM",
      "commitName": "50fa9b89f42bd3fe6aad5086b0df14a00dadb24b",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "29/11/11 3:17 PM",
      "commitNameOld": "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 14.86,
      "commitsBetweenForRepo": 108,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,48 @@\n   private NodeStatus getNodeStatus() {\n \n     NodeStatus nodeStatus \u003d recordFactory.newRecordInstance(NodeStatus.class);\n     nodeStatus.setNodeId(this.nodeId);\n \n     int numActiveContainers \u003d 0;\n     List\u003cContainerStatus\u003e containersStatuses \u003d new ArrayList\u003cContainerStatus\u003e();\n     for (Iterator\u003cEntry\u003cContainerId, Container\u003e\u003e i \u003d\n         this.context.getContainers().entrySet().iterator(); i.hasNext();) {\n       Entry\u003cContainerId, Container\u003e e \u003d i.next();\n       ContainerId containerId \u003d e.getKey();\n       Container container \u003d e.getValue();\n \n       // Clone the container to send it to the RM\n       org.apache.hadoop.yarn.api.records.ContainerStatus containerStatus \u003d \n           container.cloneAndGetContainerStatus();\n       containersStatuses.add(containerStatus);\n       ++numActiveContainers;\n       LOG.info(\"Sending out status for container: \" + containerStatus);\n \n       if (containerStatus.getState() \u003d\u003d ContainerState.COMPLETE) {\n         // Remove\n         i.remove();\n \n         LOG.info(\"Removed completed container \" + containerId);\n       }\n     }\n     nodeStatus.setContainersStatuses(containersStatuses);\n \n     LOG.debug(this.nodeId + \" sending out status for \"\n         + numActiveContainers + \" containers\");\n \n     NodeHealthStatus nodeHealthStatus \u003d this.context.getNodeHealthStatus();\n     nodeHealthStatus.setHealthReport(healthChecker.getHealthReport());\n     nodeHealthStatus.setIsNodeHealthy(healthChecker.isHealthy());\n     nodeHealthStatus.setLastHealthReportTime(\n         healthChecker.getLastHealthReportTime());\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Node\u0027s health-status : \" + nodeHealthStatus.getIsNodeHealthy()\n                 + \", \" + nodeHealthStatus.getHealthReport());\n     }\n     nodeStatus.setNodeHealthStatus(nodeHealthStatus);\n \n+    List\u003cApplicationId\u003e keepAliveAppIds \u003d createKeepAliveApplicationList();\n+    nodeStatus.setKeepAliveApplications(keepAliveAppIds);\n+    \n     return nodeStatus;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private NodeStatus getNodeStatus() {\n\n    NodeStatus nodeStatus \u003d recordFactory.newRecordInstance(NodeStatus.class);\n    nodeStatus.setNodeId(this.nodeId);\n\n    int numActiveContainers \u003d 0;\n    List\u003cContainerStatus\u003e containersStatuses \u003d new ArrayList\u003cContainerStatus\u003e();\n    for (Iterator\u003cEntry\u003cContainerId, Container\u003e\u003e i \u003d\n        this.context.getContainers().entrySet().iterator(); i.hasNext();) {\n      Entry\u003cContainerId, Container\u003e e \u003d i.next();\n      ContainerId containerId \u003d e.getKey();\n      Container container \u003d e.getValue();\n\n      // Clone the container to send it to the RM\n      org.apache.hadoop.yarn.api.records.ContainerStatus containerStatus \u003d \n          container.cloneAndGetContainerStatus();\n      containersStatuses.add(containerStatus);\n      ++numActiveContainers;\n      LOG.info(\"Sending out status for container: \" + containerStatus);\n\n      if (containerStatus.getState() \u003d\u003d ContainerState.COMPLETE) {\n        // Remove\n        i.remove();\n\n        LOG.info(\"Removed completed container \" + containerId);\n      }\n    }\n    nodeStatus.setContainersStatuses(containersStatuses);\n\n    LOG.debug(this.nodeId + \" sending out status for \"\n        + numActiveContainers + \" containers\");\n\n    NodeHealthStatus nodeHealthStatus \u003d this.context.getNodeHealthStatus();\n    nodeHealthStatus.setHealthReport(healthChecker.getHealthReport());\n    nodeHealthStatus.setIsNodeHealthy(healthChecker.isHealthy());\n    nodeHealthStatus.setLastHealthReportTime(\n        healthChecker.getLastHealthReportTime());\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Node\u0027s health-status : \" + nodeHealthStatus.getIsNodeHealthy()\n                + \", \" + nodeHealthStatus.getHealthReport());\n    }\n    nodeStatus.setNodeHealthStatus(nodeHealthStatus);\n\n    List\u003cApplicationId\u003e keepAliveAppIds \u003d createKeepAliveApplicationList();\n    nodeStatus.setKeepAliveApplications(keepAliveAppIds);\n    \n    return nodeStatus;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3121. NodeManager should handle disk-failures (Ravi Gummadi via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1208131 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/11/11 3:17 PM",
      "commitName": "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb",
      "commitAuthor": "Mahadev Konar",
      "commitDateOld": "28/10/11 10:31 AM",
      "commitNameOld": "cbdb07f4ca358b9507296868a913977ad82ed716",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 32.24,
      "commitsBetweenForRepo": 182,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,45 @@\n   private NodeStatus getNodeStatus() {\n \n     NodeStatus nodeStatus \u003d recordFactory.newRecordInstance(NodeStatus.class);\n     nodeStatus.setNodeId(this.nodeId);\n \n     int numActiveContainers \u003d 0;\n     List\u003cContainerStatus\u003e containersStatuses \u003d new ArrayList\u003cContainerStatus\u003e();\n     for (Iterator\u003cEntry\u003cContainerId, Container\u003e\u003e i \u003d\n         this.context.getContainers().entrySet().iterator(); i.hasNext();) {\n       Entry\u003cContainerId, Container\u003e e \u003d i.next();\n       ContainerId containerId \u003d e.getKey();\n       Container container \u003d e.getValue();\n \n       // Clone the container to send it to the RM\n       org.apache.hadoop.yarn.api.records.ContainerStatus containerStatus \u003d \n           container.cloneAndGetContainerStatus();\n       containersStatuses.add(containerStatus);\n       ++numActiveContainers;\n       LOG.info(\"Sending out status for container: \" + containerStatus);\n \n       if (containerStatus.getState() \u003d\u003d ContainerState.COMPLETE) {\n         // Remove\n         i.remove();\n \n         LOG.info(\"Removed completed container \" + containerId);\n       }\n     }\n     nodeStatus.setContainersStatuses(containersStatuses);\n \n     LOG.debug(this.nodeId + \" sending out status for \"\n         + numActiveContainers + \" containers\");\n \n     NodeHealthStatus nodeHealthStatus \u003d this.context.getNodeHealthStatus();\n-    if (this.healthChecker !\u003d null) {\n-      this.healthChecker.setHealthStatus(nodeHealthStatus);\n+    nodeHealthStatus.setHealthReport(healthChecker.getHealthReport());\n+    nodeHealthStatus.setIsNodeHealthy(healthChecker.isHealthy());\n+    nodeHealthStatus.setLastHealthReportTime(\n+        healthChecker.getLastHealthReportTime());\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Node\u0027s health-status : \" + nodeHealthStatus.getIsNodeHealthy()\n+                + \", \" + nodeHealthStatus.getHealthReport());\n     }\n-    LOG.debug(\"Node\u0027s health-status : \" + nodeHealthStatus.getIsNodeHealthy()\n-        + \", \" + nodeHealthStatus.getHealthReport());\n     nodeStatus.setNodeHealthStatus(nodeHealthStatus);\n \n     return nodeStatus;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private NodeStatus getNodeStatus() {\n\n    NodeStatus nodeStatus \u003d recordFactory.newRecordInstance(NodeStatus.class);\n    nodeStatus.setNodeId(this.nodeId);\n\n    int numActiveContainers \u003d 0;\n    List\u003cContainerStatus\u003e containersStatuses \u003d new ArrayList\u003cContainerStatus\u003e();\n    for (Iterator\u003cEntry\u003cContainerId, Container\u003e\u003e i \u003d\n        this.context.getContainers().entrySet().iterator(); i.hasNext();) {\n      Entry\u003cContainerId, Container\u003e e \u003d i.next();\n      ContainerId containerId \u003d e.getKey();\n      Container container \u003d e.getValue();\n\n      // Clone the container to send it to the RM\n      org.apache.hadoop.yarn.api.records.ContainerStatus containerStatus \u003d \n          container.cloneAndGetContainerStatus();\n      containersStatuses.add(containerStatus);\n      ++numActiveContainers;\n      LOG.info(\"Sending out status for container: \" + containerStatus);\n\n      if (containerStatus.getState() \u003d\u003d ContainerState.COMPLETE) {\n        // Remove\n        i.remove();\n\n        LOG.info(\"Removed completed container \" + containerId);\n      }\n    }\n    nodeStatus.setContainersStatuses(containersStatuses);\n\n    LOG.debug(this.nodeId + \" sending out status for \"\n        + numActiveContainers + \" containers\");\n\n    NodeHealthStatus nodeHealthStatus \u003d this.context.getNodeHealthStatus();\n    nodeHealthStatus.setHealthReport(healthChecker.getHealthReport());\n    nodeHealthStatus.setIsNodeHealthy(healthChecker.isHealthy());\n    nodeHealthStatus.setLastHealthReportTime(\n        healthChecker.getLastHealthReportTime());\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Node\u0027s health-status : \" + nodeHealthStatus.getIsNodeHealthy()\n                + \", \" + nodeHealthStatus.getHealthReport());\n    }\n    nodeStatus.setNodeHealthStatus(nodeHealthStatus);\n\n    return nodeStatus;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "12743d2169f5a24a9b3be07c9e9dcc3f2f1001f0": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2792. Replace usage of node ip-addresses with hostnames. Contributed by Vinod K V.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1178631 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/10/11 4:21 PM",
      "commitName": "12743d2169f5a24a9b3be07c9e9dcc3f2f1001f0",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "21/09/11 4:32 PM",
      "commitNameOld": "ed7eda00cb1f509ebe7f967cb65bdb1ece06334c",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 11.99,
      "commitsBetweenForRepo": 74,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n   private NodeStatus getNodeStatus() {\n \n     NodeStatus nodeStatus \u003d recordFactory.newRecordInstance(NodeStatus.class);\n     nodeStatus.setNodeId(this.nodeId);\n \n     int numActiveContainers \u003d 0;\n     List\u003cContainerStatus\u003e containersStatuses \u003d new ArrayList\u003cContainerStatus\u003e();\n     for (Iterator\u003cEntry\u003cContainerId, Container\u003e\u003e i \u003d\n         this.context.getContainers().entrySet().iterator(); i.hasNext();) {\n       Entry\u003cContainerId, Container\u003e e \u003d i.next();\n       ContainerId containerId \u003d e.getKey();\n       Container container \u003d e.getValue();\n \n       // Clone the container to send it to the RM\n       org.apache.hadoop.yarn.api.records.ContainerStatus containerStatus \u003d \n           container.cloneAndGetContainerStatus();\n       containersStatuses.add(containerStatus);\n       ++numActiveContainers;\n       LOG.info(\"Sending out status for container: \" + containerStatus);\n \n       if (containerStatus.getState() \u003d\u003d ContainerState.COMPLETE) {\n         // Remove\n         i.remove();\n \n         LOG.info(\"Removed completed container \" + containerId);\n       }\n     }\n     nodeStatus.setContainersStatuses(containersStatuses);\n \n-    LOG.debug(this.containerManagerBindAddress + \" sending out status for \" + numActiveContainers\n-        + \" containers\");\n+    LOG.debug(this.nodeId + \" sending out status for \"\n+        + numActiveContainers + \" containers\");\n \n     NodeHealthStatus nodeHealthStatus \u003d this.context.getNodeHealthStatus();\n     if (this.healthChecker !\u003d null) {\n       this.healthChecker.setHealthStatus(nodeHealthStatus);\n     }\n     LOG.debug(\"Node\u0027s health-status : \" + nodeHealthStatus.getIsNodeHealthy()\n         + \", \" + nodeHealthStatus.getHealthReport());\n     nodeStatus.setNodeHealthStatus(nodeHealthStatus);\n \n     return nodeStatus;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private NodeStatus getNodeStatus() {\n\n    NodeStatus nodeStatus \u003d recordFactory.newRecordInstance(NodeStatus.class);\n    nodeStatus.setNodeId(this.nodeId);\n\n    int numActiveContainers \u003d 0;\n    List\u003cContainerStatus\u003e containersStatuses \u003d new ArrayList\u003cContainerStatus\u003e();\n    for (Iterator\u003cEntry\u003cContainerId, Container\u003e\u003e i \u003d\n        this.context.getContainers().entrySet().iterator(); i.hasNext();) {\n      Entry\u003cContainerId, Container\u003e e \u003d i.next();\n      ContainerId containerId \u003d e.getKey();\n      Container container \u003d e.getValue();\n\n      // Clone the container to send it to the RM\n      org.apache.hadoop.yarn.api.records.ContainerStatus containerStatus \u003d \n          container.cloneAndGetContainerStatus();\n      containersStatuses.add(containerStatus);\n      ++numActiveContainers;\n      LOG.info(\"Sending out status for container: \" + containerStatus);\n\n      if (containerStatus.getState() \u003d\u003d ContainerState.COMPLETE) {\n        // Remove\n        i.remove();\n\n        LOG.info(\"Removed completed container \" + containerId);\n      }\n    }\n    nodeStatus.setContainersStatuses(containersStatuses);\n\n    LOG.debug(this.nodeId + \" sending out status for \"\n        + numActiveContainers + \" containers\");\n\n    NodeHealthStatus nodeHealthStatus \u003d this.context.getNodeHealthStatus();\n    if (this.healthChecker !\u003d null) {\n      this.healthChecker.setHealthStatus(nodeHealthStatus);\n    }\n    LOG.debug(\"Node\u0027s health-status : \" + nodeHealthStatus.getIsNodeHealthy()\n        + \", \" + nodeHealthStatus.getHealthReport());\n    nodeStatus.setNodeHealthStatus(nodeHealthStatus);\n\n    return nodeStatus;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "817ead65b99f465fc2dfa18072cf23cadf5f05d0": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2933. Change allocate call to return ContainerStatus for completed containers rather than Container.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1169484 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/09/11 10:26 AM",
      "commitName": "817ead65b99f465fc2dfa18072cf23cadf5f05d0",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "08/09/11 6:44 PM",
      "commitNameOld": "fafe8cd28e726566509c679e19d7da622f29f90d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 2.65,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,42 @@\n   private NodeStatus getNodeStatus() {\n \n     NodeStatus nodeStatus \u003d recordFactory.newRecordInstance(NodeStatus.class);\n     nodeStatus.setNodeId(this.nodeId);\n \n     int numActiveContainers \u003d 0;\n+    List\u003cContainerStatus\u003e containersStatuses \u003d new ArrayList\u003cContainerStatus\u003e();\n     for (Iterator\u003cEntry\u003cContainerId, Container\u003e\u003e i \u003d\n         this.context.getContainers().entrySet().iterator(); i.hasNext();) {\n       Entry\u003cContainerId, Container\u003e e \u003d i.next();\n       ContainerId containerId \u003d e.getKey();\n       Container container \u003d e.getValue();\n \n-      List\u003corg.apache.hadoop.yarn.api.records.Container\u003e applicationContainers \u003d nodeStatus\n-          .getContainers(container.getContainerID().getAppId());\n-      if (applicationContainers \u003d\u003d null) {\n-        applicationContainers \u003d new ArrayList\u003corg.apache.hadoop.yarn.api.records.Container\u003e();\n-        nodeStatus.setContainers(container.getContainerID().getAppId(),\n-            applicationContainers);\n-      }\n-\n       // Clone the container to send it to the RM\n-      org.apache.hadoop.yarn.api.records.Container c \u003d container.cloneAndGetContainer();\n-      c.setNodeId(this.nodeId);\n-      c.setNodeHttpAddress(this.nodeHttpAddress); // TODO: don\u0027t set everytime.\n-      applicationContainers.add(c);\n+      org.apache.hadoop.yarn.api.records.ContainerStatus containerStatus \u003d \n+          container.cloneAndGetContainerStatus();\n+      containersStatuses.add(containerStatus);\n       ++numActiveContainers;\n-      LOG.info(\"Sending out status for container: \" + c);\n+      LOG.info(\"Sending out status for container: \" + containerStatus);\n \n-      if (c.getState() \u003d\u003d ContainerState.COMPLETE) {\n+      if (containerStatus.getState() \u003d\u003d ContainerState.COMPLETE) {\n         // Remove\n         i.remove();\n \n         LOG.info(\"Removed completed container \" + containerId);\n       }\n     }\n+    nodeStatus.setContainersStatuses(containersStatuses);\n \n     LOG.debug(this.containerManagerBindAddress + \" sending out status for \" + numActiveContainers\n         + \" containers\");\n \n     NodeHealthStatus nodeHealthStatus \u003d this.context.getNodeHealthStatus();\n     if (this.healthChecker !\u003d null) {\n       this.healthChecker.setHealthStatus(nodeHealthStatus);\n     }\n     LOG.debug(\"Node\u0027s health-status : \" + nodeHealthStatus.getIsNodeHealthy()\n         + \", \" + nodeHealthStatus.getHealthReport());\n     nodeStatus.setNodeHealthStatus(nodeHealthStatus);\n \n     return nodeStatus;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private NodeStatus getNodeStatus() {\n\n    NodeStatus nodeStatus \u003d recordFactory.newRecordInstance(NodeStatus.class);\n    nodeStatus.setNodeId(this.nodeId);\n\n    int numActiveContainers \u003d 0;\n    List\u003cContainerStatus\u003e containersStatuses \u003d new ArrayList\u003cContainerStatus\u003e();\n    for (Iterator\u003cEntry\u003cContainerId, Container\u003e\u003e i \u003d\n        this.context.getContainers().entrySet().iterator(); i.hasNext();) {\n      Entry\u003cContainerId, Container\u003e e \u003d i.next();\n      ContainerId containerId \u003d e.getKey();\n      Container container \u003d e.getValue();\n\n      // Clone the container to send it to the RM\n      org.apache.hadoop.yarn.api.records.ContainerStatus containerStatus \u003d \n          container.cloneAndGetContainerStatus();\n      containersStatuses.add(containerStatus);\n      ++numActiveContainers;\n      LOG.info(\"Sending out status for container: \" + containerStatus);\n\n      if (containerStatus.getState() \u003d\u003d ContainerState.COMPLETE) {\n        // Remove\n        i.remove();\n\n        LOG.info(\"Removed completed container \" + containerId);\n      }\n    }\n    nodeStatus.setContainersStatuses(containersStatuses);\n\n    LOG.debug(this.containerManagerBindAddress + \" sending out status for \" + numActiveContainers\n        + \" containers\");\n\n    NodeHealthStatus nodeHealthStatus \u003d this.context.getNodeHealthStatus();\n    if (this.healthChecker !\u003d null) {\n      this.healthChecker.setHealthStatus(nodeHealthStatus);\n    }\n    LOG.debug(\"Node\u0027s health-status : \" + nodeHealthStatus.getIsNodeHealthy()\n        + \", \" + nodeHealthStatus.getHealthReport());\n    nodeStatus.setNodeHealthStatus(nodeHealthStatus);\n\n    return nodeStatus;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private NodeStatus getNodeStatus() {\n\n    NodeStatus nodeStatus \u003d recordFactory.newRecordInstance(NodeStatus.class);\n    nodeStatus.setNodeId(this.nodeId);\n\n    int numActiveContainers \u003d 0;\n    for (Iterator\u003cEntry\u003cContainerId, Container\u003e\u003e i \u003d\n        this.context.getContainers().entrySet().iterator(); i.hasNext();) {\n      Entry\u003cContainerId, Container\u003e e \u003d i.next();\n      ContainerId containerId \u003d e.getKey();\n      Container container \u003d e.getValue();\n\n      List\u003corg.apache.hadoop.yarn.api.records.Container\u003e applicationContainers \u003d nodeStatus\n          .getContainers(container.getContainerID().getAppId());\n      if (applicationContainers \u003d\u003d null) {\n        applicationContainers \u003d new ArrayList\u003corg.apache.hadoop.yarn.api.records.Container\u003e();\n        nodeStatus.setContainers(container.getContainerID().getAppId(),\n            applicationContainers);\n      }\n\n      // Clone the container to send it to the RM\n      org.apache.hadoop.yarn.api.records.Container c \u003d container.cloneAndGetContainer();\n      c.setNodeId(this.nodeId);\n      c.setNodeHttpAddress(this.nodeHttpAddress); // TODO: don\u0027t set everytime.\n      applicationContainers.add(c);\n      ++numActiveContainers;\n      LOG.info(\"Sending out status for container: \" + c);\n\n      if (c.getState() \u003d\u003d ContainerState.COMPLETE) {\n        // Remove\n        i.remove();\n\n        LOG.info(\"Removed completed container \" + containerId);\n      }\n    }\n\n    LOG.debug(this.containerManagerBindAddress + \" sending out status for \" + numActiveContainers\n        + \" containers\");\n\n    NodeHealthStatus nodeHealthStatus \u003d this.context.getNodeHealthStatus();\n    if (this.healthChecker !\u003d null) {\n      this.healthChecker.setHealthStatus(nodeHealthStatus);\n    }\n    LOG.debug(\"Node\u0027s health-status : \" + nodeHealthStatus.getIsNodeHealthy()\n        + \", \" + nodeHealthStatus.getHealthReport());\n    nodeStatus.setNodeHealthStatus(nodeHealthStatus);\n\n    return nodeStatus;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,49 @@\n+  private NodeStatus getNodeStatus() {\n+\n+    NodeStatus nodeStatus \u003d recordFactory.newRecordInstance(NodeStatus.class);\n+    nodeStatus.setNodeId(this.nodeId);\n+\n+    int numActiveContainers \u003d 0;\n+    for (Iterator\u003cEntry\u003cContainerId, Container\u003e\u003e i \u003d\n+        this.context.getContainers().entrySet().iterator(); i.hasNext();) {\n+      Entry\u003cContainerId, Container\u003e e \u003d i.next();\n+      ContainerId containerId \u003d e.getKey();\n+      Container container \u003d e.getValue();\n+\n+      List\u003corg.apache.hadoop.yarn.api.records.Container\u003e applicationContainers \u003d nodeStatus\n+          .getContainers(container.getContainerID().getAppId());\n+      if (applicationContainers \u003d\u003d null) {\n+        applicationContainers \u003d new ArrayList\u003corg.apache.hadoop.yarn.api.records.Container\u003e();\n+        nodeStatus.setContainers(container.getContainerID().getAppId(),\n+            applicationContainers);\n+      }\n+\n+      // Clone the container to send it to the RM\n+      org.apache.hadoop.yarn.api.records.Container c \u003d container.cloneAndGetContainer();\n+      c.setNodeId(this.nodeId);\n+      c.setNodeHttpAddress(this.nodeHttpAddress); // TODO: don\u0027t set everytime.\n+      applicationContainers.add(c);\n+      ++numActiveContainers;\n+      LOG.info(\"Sending out status for container: \" + c);\n+\n+      if (c.getState() \u003d\u003d ContainerState.COMPLETE) {\n+        // Remove\n+        i.remove();\n+\n+        LOG.info(\"Removed completed container \" + containerId);\n+      }\n+    }\n+\n+    LOG.debug(this.containerManagerBindAddress + \" sending out status for \" + numActiveContainers\n+        + \" containers\");\n+\n+    NodeHealthStatus nodeHealthStatus \u003d this.context.getNodeHealthStatus();\n+    if (this.healthChecker !\u003d null) {\n+      this.healthChecker.setHealthStatus(nodeHealthStatus);\n+    }\n+    LOG.debug(\"Node\u0027s health-status : \" + nodeHealthStatus.getIsNodeHealthy()\n+        + \", \" + nodeHealthStatus.getHealthReport());\n+    nodeStatus.setNodeHealthStatus(nodeHealthStatus);\n+\n+    return nodeStatus;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private NodeStatus getNodeStatus() {\n\n    NodeStatus nodeStatus \u003d recordFactory.newRecordInstance(NodeStatus.class);\n    nodeStatus.setNodeId(this.nodeId);\n\n    int numActiveContainers \u003d 0;\n    for (Iterator\u003cEntry\u003cContainerId, Container\u003e\u003e i \u003d\n        this.context.getContainers().entrySet().iterator(); i.hasNext();) {\n      Entry\u003cContainerId, Container\u003e e \u003d i.next();\n      ContainerId containerId \u003d e.getKey();\n      Container container \u003d e.getValue();\n\n      List\u003corg.apache.hadoop.yarn.api.records.Container\u003e applicationContainers \u003d nodeStatus\n          .getContainers(container.getContainerID().getAppId());\n      if (applicationContainers \u003d\u003d null) {\n        applicationContainers \u003d new ArrayList\u003corg.apache.hadoop.yarn.api.records.Container\u003e();\n        nodeStatus.setContainers(container.getContainerID().getAppId(),\n            applicationContainers);\n      }\n\n      // Clone the container to send it to the RM\n      org.apache.hadoop.yarn.api.records.Container c \u003d container.cloneAndGetContainer();\n      c.setNodeId(this.nodeId);\n      c.setNodeHttpAddress(this.nodeHttpAddress); // TODO: don\u0027t set everytime.\n      applicationContainers.add(c);\n      ++numActiveContainers;\n      LOG.info(\"Sending out status for container: \" + c);\n\n      if (c.getState() \u003d\u003d ContainerState.COMPLETE) {\n        // Remove\n        i.remove();\n\n        LOG.info(\"Removed completed container \" + containerId);\n      }\n    }\n\n    LOG.debug(this.containerManagerBindAddress + \" sending out status for \" + numActiveContainers\n        + \" containers\");\n\n    NodeHealthStatus nodeHealthStatus \u003d this.context.getNodeHealthStatus();\n    if (this.healthChecker !\u003d null) {\n      this.healthChecker.setHealthStatus(nodeHealthStatus);\n    }\n    LOG.debug(\"Node\u0027s health-status : \" + nodeHealthStatus.getIsNodeHealthy()\n        + \", \" + nodeHealthStatus.getHealthReport());\n    nodeStatus.setNodeHealthStatus(nodeHealthStatus);\n\n    return nodeStatus;\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java"
    }
  }
}