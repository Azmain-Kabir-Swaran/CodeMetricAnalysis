{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "WebHdfsFileSystem.java",
  "functionName": "shouldRetry",
  "functionId": "shouldRetry___ioe-IOException(modifiers-final)__retry-int(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
  "functionStartLine": 838,
  "functionEndLine": 868,
  "numCommitsSeen": 179,
  "timeTaken": 4389,
  "changeHistory": [
    "6436768baf1b2ac05f6786edcd76fd3a66c03eaa",
    "122cad6aec5839d8d515c5008425ecb34f2fa56b",
    "bcf89ddc7d52e04725caf104f5958e33d9f51b35",
    "7a2443e9f8b95816c7df61530cda29e8b040b12e",
    "cb787968c5deac3dd5d10291aae39c36656a1487"
  ],
  "changeHistoryShort": {
    "6436768baf1b2ac05f6786edcd76fd3a66c03eaa": "Ybodychange",
    "122cad6aec5839d8d515c5008425ecb34f2fa56b": "Ybodychange",
    "bcf89ddc7d52e04725caf104f5958e33d9f51b35": "Yfilerename",
    "7a2443e9f8b95816c7df61530cda29e8b040b12e": "Ybodychange",
    "cb787968c5deac3dd5d10291aae39c36656a1487": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6436768baf1b2ac05f6786edcd76fd3a66c03eaa": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12089. Fix ambiguous NN retry log message in WebHDFS. Contributed by Eric Badger\n",
      "commitDate": "05/07/17 11:10 AM",
      "commitName": "6436768baf1b2ac05f6786edcd76fd3a66c03eaa",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "24/02/17 4:49 PM",
      "commitNameOld": "e24ed47d9a19f34a4dd8d4bad9b5c78ca3dd1c2e",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 130.72,
      "commitsBetweenForRepo": 705,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n     private void shouldRetry(final IOException ioe, final int retry\n     ) throws IOException {\n       InetSocketAddress nnAddr \u003d getCurrentNNAddr();\n       if (checkRetry) {\n         try {\n           final RetryPolicy.RetryAction a \u003d retryPolicy.shouldRetry(\n               ioe, retry, 0, true);\n \n           boolean isRetry \u003d\n               a.action \u003d\u003d RetryPolicy.RetryAction.RetryDecision.RETRY;\n           boolean isFailoverAndRetry \u003d\n               a.action \u003d\u003d RetryPolicy.RetryAction.RetryDecision.FAILOVER_AND_RETRY;\n \n           if (isRetry || isFailoverAndRetry) {\n-            LOG.info(\"Retrying connect to namenode: {}. Already tried {}\"\n+            LOG.info(\"Retrying connect to namenode: {}. Already retried {}\"\n                     + \" time(s); retry policy is {}, delay {}ms.\",\n                 nnAddr, retry, retryPolicy, a.delayMillis);\n \n             if (isFailoverAndRetry) {\n               resetStateToFailOver();\n             }\n \n             Thread.sleep(a.delayMillis);\n             return;\n           }\n         } catch(Exception e) {\n           LOG.warn(\"Original exception is \", ioe);\n           throw toIOException(e);\n         }\n       }\n       throw toIOException(ioe);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void shouldRetry(final IOException ioe, final int retry\n    ) throws IOException {\n      InetSocketAddress nnAddr \u003d getCurrentNNAddr();\n      if (checkRetry) {\n        try {\n          final RetryPolicy.RetryAction a \u003d retryPolicy.shouldRetry(\n              ioe, retry, 0, true);\n\n          boolean isRetry \u003d\n              a.action \u003d\u003d RetryPolicy.RetryAction.RetryDecision.RETRY;\n          boolean isFailoverAndRetry \u003d\n              a.action \u003d\u003d RetryPolicy.RetryAction.RetryDecision.FAILOVER_AND_RETRY;\n\n          if (isRetry || isFailoverAndRetry) {\n            LOG.info(\"Retrying connect to namenode: {}. Already retried {}\"\n                    + \" time(s); retry policy is {}, delay {}ms.\",\n                nnAddr, retry, retryPolicy, a.delayMillis);\n\n            if (isFailoverAndRetry) {\n              resetStateToFailOver();\n            }\n\n            Thread.sleep(a.delayMillis);\n            return;\n          }\n        } catch(Exception e) {\n          LOG.warn(\"Original exception is \", ioe);\n          throw toIOException(e);\n        }\n      }\n      throw toIOException(ioe);\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
      "extendedDetails": {}
    },
    "122cad6aec5839d8d515c5008425ecb34f2fa56b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6564. Use slf4j instead of common-logging in hdfs-client. Contributed by Rakesh R.\n",
      "commitDate": "23/06/15 11:41 AM",
      "commitName": "122cad6aec5839d8d515c5008425ecb34f2fa56b",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "22/06/15 4:30 PM",
      "commitNameOld": "fac4e04dd359a7ff31f286d664fb06f019ec0b58",
      "commitAuthorOld": "Jakob Homan",
      "daysBetweenCommits": 0.8,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n     private void shouldRetry(final IOException ioe, final int retry\n         ) throws IOException {\n       InetSocketAddress nnAddr \u003d getCurrentNNAddr();\n       if (checkRetry) {\n         try {\n           final RetryPolicy.RetryAction a \u003d retryPolicy.shouldRetry(\n               ioe, retry, 0, true);\n \n           boolean isRetry \u003d a.action \u003d\u003d RetryPolicy.RetryAction.RetryDecision.RETRY;\n           boolean isFailoverAndRetry \u003d\n               a.action \u003d\u003d RetryPolicy.RetryAction.RetryDecision.FAILOVER_AND_RETRY;\n \n           if (isRetry || isFailoverAndRetry) {\n-            LOG.info(\"Retrying connect to namenode: \" + nnAddr\n-                + \". Already tried \" + retry + \" time(s); retry policy is \"\n-                + retryPolicy + \", delay \" + a.delayMillis + \"ms.\");\n+            LOG.info(\"Retrying connect to namenode: {}. Already tried {}\"\n+                + \" time(s); retry policy is {}, delay {}ms.\", nnAddr, retry,\n+                retryPolicy, a.delayMillis);\n \n             if (isFailoverAndRetry) {\n               resetStateToFailOver();\n             }\n \n             Thread.sleep(a.delayMillis);\n             return;\n           }\n         } catch(Exception e) {\n           LOG.warn(\"Original exception is \", ioe);\n           throw toIOException(e);\n         }\n       }\n       throw toIOException(ioe);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void shouldRetry(final IOException ioe, final int retry\n        ) throws IOException {\n      InetSocketAddress nnAddr \u003d getCurrentNNAddr();\n      if (checkRetry) {\n        try {\n          final RetryPolicy.RetryAction a \u003d retryPolicy.shouldRetry(\n              ioe, retry, 0, true);\n\n          boolean isRetry \u003d a.action \u003d\u003d RetryPolicy.RetryAction.RetryDecision.RETRY;\n          boolean isFailoverAndRetry \u003d\n              a.action \u003d\u003d RetryPolicy.RetryAction.RetryDecision.FAILOVER_AND_RETRY;\n\n          if (isRetry || isFailoverAndRetry) {\n            LOG.info(\"Retrying connect to namenode: {}. Already tried {}\"\n                + \" time(s); retry policy is {}, delay {}ms.\", nnAddr, retry,\n                retryPolicy, a.delayMillis);\n\n            if (isFailoverAndRetry) {\n              resetStateToFailOver();\n            }\n\n            Thread.sleep(a.delayMillis);\n            return;\n          }\n        } catch(Exception e) {\n          LOG.warn(\"Original exception is \", ioe);\n          throw toIOException(e);\n        }\n      }\n      throw toIOException(ioe);\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
      "extendedDetails": {}
    },
    "bcf89ddc7d52e04725caf104f5958e33d9f51b35": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8052. Move WebHdfsFileSystem into hadoop-hdfs-client. Contributed by Haohui Mai.\n",
      "commitDate": "23/04/15 5:33 PM",
      "commitName": "bcf89ddc7d52e04725caf104f5958e33d9f51b35",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "23/04/15 4:40 PM",
      "commitNameOld": "0b3f8957a87ada1a275c9904b211fdbdcefafb02",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private void shouldRetry(final IOException ioe, final int retry\n        ) throws IOException {\n      InetSocketAddress nnAddr \u003d getCurrentNNAddr();\n      if (checkRetry) {\n        try {\n          final RetryPolicy.RetryAction a \u003d retryPolicy.shouldRetry(\n              ioe, retry, 0, true);\n\n          boolean isRetry \u003d a.action \u003d\u003d RetryPolicy.RetryAction.RetryDecision.RETRY;\n          boolean isFailoverAndRetry \u003d\n              a.action \u003d\u003d RetryPolicy.RetryAction.RetryDecision.FAILOVER_AND_RETRY;\n\n          if (isRetry || isFailoverAndRetry) {\n            LOG.info(\"Retrying connect to namenode: \" + nnAddr\n                + \". Already tried \" + retry + \" time(s); retry policy is \"\n                + retryPolicy + \", delay \" + a.delayMillis + \"ms.\");\n\n            if (isFailoverAndRetry) {\n              resetStateToFailOver();\n            }\n\n            Thread.sleep(a.delayMillis);\n            return;\n          }\n        } catch(Exception e) {\n          LOG.warn(\"Original exception is \", ioe);\n          throw toIOException(e);\n        }\n      }\n      throw toIOException(ioe);\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java"
      }
    },
    "7a2443e9f8b95816c7df61530cda29e8b040b12e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5122. Support failover and retry in WebHdfsFileSystem for NN HA. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1524562 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/09/13 1:47 PM",
      "commitName": "7a2443e9f8b95816c7df61530cda29e8b040b12e",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "18/09/13 10:29 AM",
      "commitNameOld": "f278a491dcec249a2ec22e14b645d8f890278be5",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 0.14,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,31 @@\n     private void shouldRetry(final IOException ioe, final int retry\n         ) throws IOException {\n+      InetSocketAddress nnAddr \u003d getCurrentNNAddr();\n       if (checkRetry) {\n         try {\n           final RetryPolicy.RetryAction a \u003d retryPolicy.shouldRetry(\n               ioe, retry, 0, true);\n-          if (a.action \u003d\u003d RetryPolicy.RetryAction.RetryDecision.RETRY) {\n+\n+          boolean isRetry \u003d a.action \u003d\u003d RetryPolicy.RetryAction.RetryDecision.RETRY;\n+          boolean isFailoverAndRetry \u003d\n+              a.action \u003d\u003d RetryPolicy.RetryAction.RetryDecision.FAILOVER_AND_RETRY;\n+\n+          if (isRetry || isFailoverAndRetry) {\n             LOG.info(\"Retrying connect to namenode: \" + nnAddr\n                 + \". Already tried \" + retry + \" time(s); retry policy is \"\n-                + retryPolicy + \", delay \" + a.delayMillis + \"ms.\");      \n+                + retryPolicy + \", delay \" + a.delayMillis + \"ms.\");\n+\n+            if (isFailoverAndRetry) {\n+              resetStateToFailOver();\n+            }\n+\n             Thread.sleep(a.delayMillis);\n             return;\n           }\n         } catch(Exception e) {\n           LOG.warn(\"Original exception is \", ioe);\n           throw toIOException(e);\n         }\n       }\n       throw toIOException(ioe);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void shouldRetry(final IOException ioe, final int retry\n        ) throws IOException {\n      InetSocketAddress nnAddr \u003d getCurrentNNAddr();\n      if (checkRetry) {\n        try {\n          final RetryPolicy.RetryAction a \u003d retryPolicy.shouldRetry(\n              ioe, retry, 0, true);\n\n          boolean isRetry \u003d a.action \u003d\u003d RetryPolicy.RetryAction.RetryDecision.RETRY;\n          boolean isFailoverAndRetry \u003d\n              a.action \u003d\u003d RetryPolicy.RetryAction.RetryDecision.FAILOVER_AND_RETRY;\n\n          if (isRetry || isFailoverAndRetry) {\n            LOG.info(\"Retrying connect to namenode: \" + nnAddr\n                + \". Already tried \" + retry + \" time(s); retry policy is \"\n                + retryPolicy + \", delay \" + a.delayMillis + \"ms.\");\n\n            if (isFailoverAndRetry) {\n              resetStateToFailOver();\n            }\n\n            Thread.sleep(a.delayMillis);\n            return;\n          }\n        } catch(Exception e) {\n          LOG.warn(\"Original exception is \", ioe);\n          throw toIOException(e);\n        }\n      }\n      throw toIOException(ioe);\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
      "extendedDetails": {}
    },
    "cb787968c5deac3dd5d10291aae39c36656a1487": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-3667.  Add retry support to WebHdfsFileSystem.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1367841 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/07/12 6:41 PM",
      "commitName": "cb787968c5deac3dd5d10291aae39c36656a1487",
      "commitAuthor": "Tsz-wo Sze",
      "diff": "@@ -0,0 +1,20 @@\n+    private void shouldRetry(final IOException ioe, final int retry\n+        ) throws IOException {\n+      if (checkRetry) {\n+        try {\n+          final RetryPolicy.RetryAction a \u003d retryPolicy.shouldRetry(\n+              ioe, retry, 0, true);\n+          if (a.action \u003d\u003d RetryPolicy.RetryAction.RetryDecision.RETRY) {\n+            LOG.info(\"Retrying connect to namenode: \" + nnAddr\n+                + \". Already tried \" + retry + \" time(s); retry policy is \"\n+                + retryPolicy + \", delay \" + a.delayMillis + \"ms.\");      \n+            Thread.sleep(a.delayMillis);\n+            return;\n+          }\n+        } catch(Exception e) {\n+          LOG.warn(\"Original exception is \", ioe);\n+          throw toIOException(e);\n+        }\n+      }\n+      throw toIOException(ioe);\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void shouldRetry(final IOException ioe, final int retry\n        ) throws IOException {\n      if (checkRetry) {\n        try {\n          final RetryPolicy.RetryAction a \u003d retryPolicy.shouldRetry(\n              ioe, retry, 0, true);\n          if (a.action \u003d\u003d RetryPolicy.RetryAction.RetryDecision.RETRY) {\n            LOG.info(\"Retrying connect to namenode: \" + nnAddr\n                + \". Already tried \" + retry + \" time(s); retry policy is \"\n                + retryPolicy + \", delay \" + a.delayMillis + \"ms.\");      \n            Thread.sleep(a.delayMillis);\n            return;\n          }\n        } catch(Exception e) {\n          LOG.warn(\"Original exception is \", ioe);\n          throw toIOException(e);\n        }\n      }\n      throw toIOException(ioe);\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java"
    }
  }
}