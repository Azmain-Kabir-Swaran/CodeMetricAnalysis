{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SimpleUdpClient.java",
  "functionName": "run",
  "functionId": "run",
  "sourceFilePath": "hadoop-common-project/hadoop-nfs/src/main/java/org/apache/hadoop/oncrpc/SimpleUdpClient.java",
  "functionStartLine": 58,
  "functionEndLine": 89,
  "numCommitsSeen": 5,
  "timeTaken": 1040,
  "changeHistory": [
    "d1d0b3e1fd593d590aaf2e3db8f730a296b20aa1",
    "3d9bea277a07b6218c1e3576883ac0893f31cb75",
    "7bad941152417ebfafe1349cedfa2aafc906f8dc",
    "c16442c45958f6c6a106d2a3949d84b1404a256c",
    "8ef140d38b16a18050e9e7901e8aadd424aef20f"
  ],
  "changeHistoryShort": {
    "d1d0b3e1fd593d590aaf2e3db8f730a296b20aa1": "Ybodychange",
    "3d9bea277a07b6218c1e3576883ac0893f31cb75": "Ybodychange",
    "7bad941152417ebfafe1349cedfa2aafc906f8dc": "Ybodychange",
    "c16442c45958f6c6a106d2a3949d84b1404a256c": "Ybodychange",
    "8ef140d38b16a18050e9e7901e8aadd424aef20f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d1d0b3e1fd593d590aaf2e3db8f730a296b20aa1": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11307. The rpc to portmap service for NFS has hardcoded timeout. Contributed by Mukul Kumar Singh.\n",
      "commitDate": "16/01/17 2:53 PM",
      "commitName": "d1d0b3e1fd593d590aaf2e3db8f730a296b20aa1",
      "commitAuthor": "Jitendra Pandey",
      "commitDateOld": "14/07/14 2:48 PM",
      "commitNameOld": "3d9bea277a07b6218c1e3576883ac0893f31cb75",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 917.05,
      "commitsBetweenForRepo": 7091,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   public void run() throws IOException {\n     InetAddress IPAddress \u003d InetAddress.getByName(host);\n     byte[] sendData \u003d request.getBytes();\n     byte[] receiveData \u003d new byte[65535];\n     // Use the provided socket if there is one, else just make a new one.\n     DatagramSocket socket \u003d this.clientSocket \u003d\u003d null ?\n         new DatagramSocket() : this.clientSocket;\n \n     try {\n       DatagramPacket sendPacket \u003d new DatagramPacket(sendData, sendData.length,\n           IPAddress, port);\n       socket.send(sendPacket);\n-      socket.setSoTimeout(500);\n+      socket.setSoTimeout(udpTimeoutMillis);\n       DatagramPacket receivePacket \u003d new DatagramPacket(receiveData,\n           receiveData.length);\n       socket.receive(receivePacket);\n   \n       // Check reply status\n       XDR xdr \u003d new XDR(Arrays.copyOfRange(receiveData, 0,\n           receivePacket.getLength()));\n       RpcReply reply \u003d RpcReply.read(xdr);\n       if (reply.getState() !\u003d RpcReply.ReplyState.MSG_ACCEPTED) {\n         throw new IOException(\"Request failed: \" + reply.getState());\n       }\n     } finally {\n       // If the client socket was passed in to this UDP client, it\u0027s on the\n       // caller of this UDP client to close that socket.\n       if (this.clientSocket \u003d\u003d null) {\n         socket.close();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void run() throws IOException {\n    InetAddress IPAddress \u003d InetAddress.getByName(host);\n    byte[] sendData \u003d request.getBytes();\n    byte[] receiveData \u003d new byte[65535];\n    // Use the provided socket if there is one, else just make a new one.\n    DatagramSocket socket \u003d this.clientSocket \u003d\u003d null ?\n        new DatagramSocket() : this.clientSocket;\n\n    try {\n      DatagramPacket sendPacket \u003d new DatagramPacket(sendData, sendData.length,\n          IPAddress, port);\n      socket.send(sendPacket);\n      socket.setSoTimeout(udpTimeoutMillis);\n      DatagramPacket receivePacket \u003d new DatagramPacket(receiveData,\n          receiveData.length);\n      socket.receive(receivePacket);\n  \n      // Check reply status\n      XDR xdr \u003d new XDR(Arrays.copyOfRange(receiveData, 0,\n          receivePacket.getLength()));\n      RpcReply reply \u003d RpcReply.read(xdr);\n      if (reply.getState() !\u003d RpcReply.ReplyState.MSG_ACCEPTED) {\n        throw new IOException(\"Request failed: \" + reply.getState());\n      }\n    } finally {\n      // If the client socket was passed in to this UDP client, it\u0027s on the\n      // caller of this UDP client to close that socket.\n      if (this.clientSocket \u003d\u003d null) {\n        socket.close();\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-nfs/src/main/java/org/apache/hadoop/oncrpc/SimpleUdpClient.java",
      "extendedDetails": {}
    },
    "3d9bea277a07b6218c1e3576883ac0893f31cb75": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6378. NFS registration should timeout instead of hanging when portmap/rpcbind is not available. Contributed by Abhiraj Butala\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1610543 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/07/14 2:48 PM",
      "commitName": "3d9bea277a07b6218c1e3576883ac0893f31cb75",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "24/04/14 5:16 PM",
      "commitNameOld": "7bad941152417ebfafe1349cedfa2aafc906f8dc",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 80.9,
      "commitsBetweenForRepo": 464,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,32 @@\n   public void run() throws IOException {\n     InetAddress IPAddress \u003d InetAddress.getByName(host);\n     byte[] sendData \u003d request.getBytes();\n     byte[] receiveData \u003d new byte[65535];\n     // Use the provided socket if there is one, else just make a new one.\n     DatagramSocket socket \u003d this.clientSocket \u003d\u003d null ?\n         new DatagramSocket() : this.clientSocket;\n \n     try {\n       DatagramPacket sendPacket \u003d new DatagramPacket(sendData, sendData.length,\n           IPAddress, port);\n       socket.send(sendPacket);\n+      socket.setSoTimeout(500);\n       DatagramPacket receivePacket \u003d new DatagramPacket(receiveData,\n           receiveData.length);\n       socket.receive(receivePacket);\n   \n       // Check reply status\n       XDR xdr \u003d new XDR(Arrays.copyOfRange(receiveData, 0,\n           receivePacket.getLength()));\n       RpcReply reply \u003d RpcReply.read(xdr);\n       if (reply.getState() !\u003d RpcReply.ReplyState.MSG_ACCEPTED) {\n         throw new IOException(\"Request failed: \" + reply.getState());\n       }\n     } finally {\n       // If the client socket was passed in to this UDP client, it\u0027s on the\n       // caller of this UDP client to close that socket.\n       if (this.clientSocket \u003d\u003d null) {\n         socket.close();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void run() throws IOException {\n    InetAddress IPAddress \u003d InetAddress.getByName(host);\n    byte[] sendData \u003d request.getBytes();\n    byte[] receiveData \u003d new byte[65535];\n    // Use the provided socket if there is one, else just make a new one.\n    DatagramSocket socket \u003d this.clientSocket \u003d\u003d null ?\n        new DatagramSocket() : this.clientSocket;\n\n    try {\n      DatagramPacket sendPacket \u003d new DatagramPacket(sendData, sendData.length,\n          IPAddress, port);\n      socket.send(sendPacket);\n      socket.setSoTimeout(500);\n      DatagramPacket receivePacket \u003d new DatagramPacket(receiveData,\n          receiveData.length);\n      socket.receive(receivePacket);\n  \n      // Check reply status\n      XDR xdr \u003d new XDR(Arrays.copyOfRange(receiveData, 0,\n          receivePacket.getLength()));\n      RpcReply reply \u003d RpcReply.read(xdr);\n      if (reply.getState() !\u003d RpcReply.ReplyState.MSG_ACCEPTED) {\n        throw new IOException(\"Request failed: \" + reply.getState());\n      }\n    } finally {\n      // If the client socket was passed in to this UDP client, it\u0027s on the\n      // caller of this UDP client to close that socket.\n      if (this.clientSocket \u003d\u003d null) {\n        socket.close();\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-nfs/src/main/java/org/apache/hadoop/oncrpc/SimpleUdpClient.java",
      "extendedDetails": {}
    },
    "7bad941152417ebfafe1349cedfa2aafc906f8dc": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6281. Provide option to use the NFS Gateway without having to use the Hadoop portmapper. Contributed by Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1589914 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/04/14 5:16 PM",
      "commitName": "7bad941152417ebfafe1349cedfa2aafc906f8dc",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "17/09/13 5:06 PM",
      "commitNameOld": "c16442c45958f6c6a106d2a3949d84b1404a256c",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 219.01,
      "commitsBetweenForRepo": 1541,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,31 @@\n   public void run() throws IOException {\n-    DatagramSocket clientSocket \u003d new DatagramSocket();\n     InetAddress IPAddress \u003d InetAddress.getByName(host);\n     byte[] sendData \u003d request.getBytes();\n     byte[] receiveData \u003d new byte[65535];\n+    // Use the provided socket if there is one, else just make a new one.\n+    DatagramSocket socket \u003d this.clientSocket \u003d\u003d null ?\n+        new DatagramSocket() : this.clientSocket;\n \n-    DatagramPacket sendPacket \u003d new DatagramPacket(sendData, sendData.length,\n-        IPAddress, port);\n-    clientSocket.send(sendPacket);\n-    DatagramPacket receivePacket \u003d new DatagramPacket(receiveData,\n-        receiveData.length);\n-    clientSocket.receive(receivePacket);\n-\n-    // Check reply status\n-    XDR xdr \u003d new XDR(Arrays.copyOfRange(receiveData, 0,\n-        receivePacket.getLength()));\n-    RpcReply reply \u003d RpcReply.read(xdr);\n-    if (reply.getState() !\u003d RpcReply.ReplyState.MSG_ACCEPTED) {\n-      throw new IOException(\"Request failed: \" + reply.getState());\n+    try {\n+      DatagramPacket sendPacket \u003d new DatagramPacket(sendData, sendData.length,\n+          IPAddress, port);\n+      socket.send(sendPacket);\n+      DatagramPacket receivePacket \u003d new DatagramPacket(receiveData,\n+          receiveData.length);\n+      socket.receive(receivePacket);\n+  \n+      // Check reply status\n+      XDR xdr \u003d new XDR(Arrays.copyOfRange(receiveData, 0,\n+          receivePacket.getLength()));\n+      RpcReply reply \u003d RpcReply.read(xdr);\n+      if (reply.getState() !\u003d RpcReply.ReplyState.MSG_ACCEPTED) {\n+        throw new IOException(\"Request failed: \" + reply.getState());\n+      }\n+    } finally {\n+      // If the client socket was passed in to this UDP client, it\u0027s on the\n+      // caller of this UDP client to close that socket.\n+      if (this.clientSocket \u003d\u003d null) {\n+        socket.close();\n+      }\n     }\n-\n-    clientSocket.close();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void run() throws IOException {\n    InetAddress IPAddress \u003d InetAddress.getByName(host);\n    byte[] sendData \u003d request.getBytes();\n    byte[] receiveData \u003d new byte[65535];\n    // Use the provided socket if there is one, else just make a new one.\n    DatagramSocket socket \u003d this.clientSocket \u003d\u003d null ?\n        new DatagramSocket() : this.clientSocket;\n\n    try {\n      DatagramPacket sendPacket \u003d new DatagramPacket(sendData, sendData.length,\n          IPAddress, port);\n      socket.send(sendPacket);\n      DatagramPacket receivePacket \u003d new DatagramPacket(receiveData,\n          receiveData.length);\n      socket.receive(receivePacket);\n  \n      // Check reply status\n      XDR xdr \u003d new XDR(Arrays.copyOfRange(receiveData, 0,\n          receivePacket.getLength()));\n      RpcReply reply \u003d RpcReply.read(xdr);\n      if (reply.getState() !\u003d RpcReply.ReplyState.MSG_ACCEPTED) {\n        throw new IOException(\"Request failed: \" + reply.getState());\n      }\n    } finally {\n      // If the client socket was passed in to this UDP client, it\u0027s on the\n      // caller of this UDP client to close that socket.\n      if (this.clientSocket \u003d\u003d null) {\n        socket.close();\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-nfs/src/main/java/org/apache/hadoop/oncrpc/SimpleUdpClient.java",
      "extendedDetails": {}
    },
    "c16442c45958f6c6a106d2a3949d84b1404a256c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9669 Reduce the number of byte array creations and copies in XDR data manipulation. Contributed by Haohui Mai\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1524259 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/09/13 5:06 PM",
      "commitName": "c16442c45958f6c6a106d2a3949d84b1404a256c",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "07/06/13 2:45 PM",
      "commitNameOld": "8ef140d38b16a18050e9e7901e8aadd424aef20f",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 102.1,
      "commitsBetweenForRepo": 597,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,23 @@\n   public void run() throws IOException {\n     DatagramSocket clientSocket \u003d new DatagramSocket();\n     InetAddress IPAddress \u003d InetAddress.getByName(host);\n     byte[] sendData \u003d request.getBytes();\n     byte[] receiveData \u003d new byte[65535];\n \n     DatagramPacket sendPacket \u003d new DatagramPacket(sendData, sendData.length,\n         IPAddress, port);\n     clientSocket.send(sendPacket);\n     DatagramPacket receivePacket \u003d new DatagramPacket(receiveData,\n         receiveData.length);\n     clientSocket.receive(receivePacket);\n \n     // Check reply status\n-    XDR xdr \u003d new XDR();\n-    xdr.writeFixedOpaque(Arrays.copyOfRange(receiveData, 0,\n+    XDR xdr \u003d new XDR(Arrays.copyOfRange(receiveData, 0,\n         receivePacket.getLength()));\n     RpcReply reply \u003d RpcReply.read(xdr);\n     if (reply.getState() !\u003d RpcReply.ReplyState.MSG_ACCEPTED) {\n       throw new IOException(\"Request failed: \" + reply.getState());\n     }\n \n     clientSocket.close();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void run() throws IOException {\n    DatagramSocket clientSocket \u003d new DatagramSocket();\n    InetAddress IPAddress \u003d InetAddress.getByName(host);\n    byte[] sendData \u003d request.getBytes();\n    byte[] receiveData \u003d new byte[65535];\n\n    DatagramPacket sendPacket \u003d new DatagramPacket(sendData, sendData.length,\n        IPAddress, port);\n    clientSocket.send(sendPacket);\n    DatagramPacket receivePacket \u003d new DatagramPacket(receiveData,\n        receiveData.length);\n    clientSocket.receive(receivePacket);\n\n    // Check reply status\n    XDR xdr \u003d new XDR(Arrays.copyOfRange(receiveData, 0,\n        receivePacket.getLength()));\n    RpcReply reply \u003d RpcReply.read(xdr);\n    if (reply.getState() !\u003d RpcReply.ReplyState.MSG_ACCEPTED) {\n      throw new IOException(\"Request failed: \" + reply.getState());\n    }\n\n    clientSocket.close();\n  }",
      "path": "hadoop-common-project/hadoop-nfs/src/main/java/org/apache/hadoop/oncrpc/SimpleUdpClient.java",
      "extendedDetails": {}
    },
    "8ef140d38b16a18050e9e7901e8aadd424aef20f": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-9509. Implement ONCRPC and XDR. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1490845 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/06/13 2:45 PM",
      "commitName": "8ef140d38b16a18050e9e7901e8aadd424aef20f",
      "commitAuthor": "Brandon Li",
      "diff": "@@ -0,0 +1,24 @@\n+  public void run() throws IOException {\n+    DatagramSocket clientSocket \u003d new DatagramSocket();\n+    InetAddress IPAddress \u003d InetAddress.getByName(host);\n+    byte[] sendData \u003d request.getBytes();\n+    byte[] receiveData \u003d new byte[65535];\n+\n+    DatagramPacket sendPacket \u003d new DatagramPacket(sendData, sendData.length,\n+        IPAddress, port);\n+    clientSocket.send(sendPacket);\n+    DatagramPacket receivePacket \u003d new DatagramPacket(receiveData,\n+        receiveData.length);\n+    clientSocket.receive(receivePacket);\n+\n+    // Check reply status\n+    XDR xdr \u003d new XDR();\n+    xdr.writeFixedOpaque(Arrays.copyOfRange(receiveData, 0,\n+        receivePacket.getLength()));\n+    RpcReply reply \u003d RpcReply.read(xdr);\n+    if (reply.getState() !\u003d RpcReply.ReplyState.MSG_ACCEPTED) {\n+      throw new IOException(\"Request failed: \" + reply.getState());\n+    }\n+\n+    clientSocket.close();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void run() throws IOException {\n    DatagramSocket clientSocket \u003d new DatagramSocket();\n    InetAddress IPAddress \u003d InetAddress.getByName(host);\n    byte[] sendData \u003d request.getBytes();\n    byte[] receiveData \u003d new byte[65535];\n\n    DatagramPacket sendPacket \u003d new DatagramPacket(sendData, sendData.length,\n        IPAddress, port);\n    clientSocket.send(sendPacket);\n    DatagramPacket receivePacket \u003d new DatagramPacket(receiveData,\n        receiveData.length);\n    clientSocket.receive(receivePacket);\n\n    // Check reply status\n    XDR xdr \u003d new XDR();\n    xdr.writeFixedOpaque(Arrays.copyOfRange(receiveData, 0,\n        receivePacket.getLength()));\n    RpcReply reply \u003d RpcReply.read(xdr);\n    if (reply.getState() !\u003d RpcReply.ReplyState.MSG_ACCEPTED) {\n      throw new IOException(\"Request failed: \" + reply.getState());\n    }\n\n    clientSocket.close();\n  }",
      "path": "hadoop-common-project/hadoop-nfs/src/main/java/org/apache/hadoop/oncrpc/SimpleUdpClient.java"
    }
  }
}