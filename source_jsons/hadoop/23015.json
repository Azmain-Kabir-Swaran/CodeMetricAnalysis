{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JobControl.java",
  "functionName": "isCircular",
  "functionId": "isCircular___jobList-List__ControlledJob__(modifiers-final)",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/jobcontrol/JobControl.java",
  "functionStartLine": 300,
  "functionEndLine": 339,
  "numCommitsSeen": 11,
  "timeTaken": 618,
  "changeHistory": [
    "eff5abb4f7f9800d580df3599c4fd662a225649b"
  ],
  "changeHistoryShort": {
    "eff5abb4f7f9800d580df3599c4fd662a225649b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "eff5abb4f7f9800d580df3599c4fd662a225649b": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-4371. Check for cyclic dependencies in Jobcontrol job DAG (madhukara phatak via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1356414 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/07/12 12:02 PM",
      "commitName": "eff5abb4f7f9800d580df3599c4fd662a225649b",
      "commitAuthor": "Robert Joseph Evans",
      "diff": "@@ -0,0 +1,40 @@\n+  private boolean isCircular(final List\u003cControlledJob\u003e jobList) {\n+    boolean cyclePresent \u003d false;\n+    HashSet\u003cControlledJob\u003e SourceSet \u003d new HashSet\u003cControlledJob\u003e();\n+    HashMap\u003cControlledJob, List\u003cControlledJob\u003e\u003e processedMap \u003d\n+\tnew HashMap\u003cControlledJob, List\u003cControlledJob\u003e\u003e();\n+    for (ControlledJob n : jobList) {\n+      processedMap.put(n, new ArrayList\u003cControlledJob\u003e());\n+    }\n+    for (ControlledJob n : jobList) {\n+      if (!hasInComingEdge(n, jobList, processedMap)) {\n+\tSourceSet.add(n);\n+      }\n+    }\n+    while (!SourceSet.isEmpty()) {\n+      ControlledJob controlledJob \u003d SourceSet.iterator().next();\n+      SourceSet.remove(controlledJob);\n+      if (controlledJob.getDependentJobs() !\u003d null) {\n+\tfor (int i \u003d 0; i \u003c controlledJob.getDependentJobs().size(); i++) {\n+\t  ControlledJob depenControlledJob \u003d\n+\t      controlledJob.getDependentJobs().get(i);\n+\t  processedMap.get(controlledJob).add(depenControlledJob);\n+\t  if (!hasInComingEdge(controlledJob, jobList, processedMap)) {\n+\t    SourceSet.add(depenControlledJob);\n+\t  }\n+\t}\n+      }\n+    }\n+\n+    for (ControlledJob controlledJob : jobList) {\n+      if (controlledJob.getDependentJobs() !\u003d null\n+\t  \u0026\u0026 controlledJob.getDependentJobs().size() !\u003d processedMap.get(\n+\t      controlledJob).size()) {\n+\tcyclePresent \u003d true;\n+\tLOG.error(\"Job control has circular dependency for the  job \"\n+\t    + controlledJob.getJobName());\n+\tbreak;\n+      }\n+    }\n+    return cyclePresent;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean isCircular(final List\u003cControlledJob\u003e jobList) {\n    boolean cyclePresent \u003d false;\n    HashSet\u003cControlledJob\u003e SourceSet \u003d new HashSet\u003cControlledJob\u003e();\n    HashMap\u003cControlledJob, List\u003cControlledJob\u003e\u003e processedMap \u003d\n\tnew HashMap\u003cControlledJob, List\u003cControlledJob\u003e\u003e();\n    for (ControlledJob n : jobList) {\n      processedMap.put(n, new ArrayList\u003cControlledJob\u003e());\n    }\n    for (ControlledJob n : jobList) {\n      if (!hasInComingEdge(n, jobList, processedMap)) {\n\tSourceSet.add(n);\n      }\n    }\n    while (!SourceSet.isEmpty()) {\n      ControlledJob controlledJob \u003d SourceSet.iterator().next();\n      SourceSet.remove(controlledJob);\n      if (controlledJob.getDependentJobs() !\u003d null) {\n\tfor (int i \u003d 0; i \u003c controlledJob.getDependentJobs().size(); i++) {\n\t  ControlledJob depenControlledJob \u003d\n\t      controlledJob.getDependentJobs().get(i);\n\t  processedMap.get(controlledJob).add(depenControlledJob);\n\t  if (!hasInComingEdge(controlledJob, jobList, processedMap)) {\n\t    SourceSet.add(depenControlledJob);\n\t  }\n\t}\n      }\n    }\n\n    for (ControlledJob controlledJob : jobList) {\n      if (controlledJob.getDependentJobs() !\u003d null\n\t  \u0026\u0026 controlledJob.getDependentJobs().size() !\u003d processedMap.get(\n\t      controlledJob).size()) {\n\tcyclePresent \u003d true;\n\tLOG.error(\"Job control has circular dependency for the  job \"\n\t    + controlledJob.getJobName());\n\tbreak;\n      }\n    }\n    return cyclePresent;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/jobcontrol/JobControl.java"
    }
  }
}