{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AzureBlobFileSystemStore.java",
  "functionName": "parseCommaSeparatedXmsProperties",
  "functionId": "parseCommaSeparatedXmsProperties___xMsProperties-String",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystemStore.java",
  "functionStartLine": 1268,
  "functionEndLine": 1304,
  "numCommitsSeen": 49,
  "timeTaken": 2253,
  "changeHistory": [
    "b4c23043d38325aad8af4488caca115eae789f07",
    "a271fd0eca75cef8b8ba940cdac8ad4fd21b4462",
    "f044deedbbfee0812316d587139cb828f27172e9"
  ],
  "changeHistoryShort": {
    "b4c23043d38325aad8af4488caca115eae789f07": "Ybodychange",
    "a271fd0eca75cef8b8ba940cdac8ad4fd21b4462": "Yfilerename",
    "f044deedbbfee0812316d587139cb828f27172e9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b4c23043d38325aad8af4488caca115eae789f07": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15757. ABFS: remove dependency on common-codec Base64.\nContributed by Da Zhou.\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "b4c23043d38325aad8af4488caca115eae789f07",
      "commitAuthor": "Thomas Marquardt",
      "commitDateOld": "17/09/18 12:54 PM",
      "commitNameOld": "e5593cbd8323399359b3e8da46bd58e8364cbf22",
      "commitAuthorOld": "Thomas Marquardt",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   private Hashtable\u003cString, String\u003e parseCommaSeparatedXmsProperties(String xMsProperties) throws\n           InvalidFileSystemPropertyException, InvalidAbfsRestOperationException {\n     Hashtable\u003cString, String\u003e properties \u003d new Hashtable\u003c\u003e();\n \n     final CharsetDecoder decoder \u003d Charset.forName(XMS_PROPERTIES_ENCODING).newDecoder();\n \n     if (xMsProperties !\u003d null \u0026\u0026 !xMsProperties.isEmpty()) {\n       String[] userProperties \u003d xMsProperties.split(AbfsHttpConstants.COMMA);\n \n       if (userProperties.length \u003d\u003d 0) {\n         return properties;\n       }\n \n       for (String property : userProperties) {\n         if (property.isEmpty()) {\n           throw new InvalidFileSystemPropertyException(xMsProperties);\n         }\n \n         String[] nameValue \u003d property.split(AbfsHttpConstants.EQUAL, 2);\n         if (nameValue.length !\u003d 2) {\n           throw new InvalidFileSystemPropertyException(xMsProperties);\n         }\n \n-        byte[] decodedValue \u003d DatatypeConverter.parseBase64Binary(nameValue[1]);\n+        byte[] decodedValue \u003d Base64.decode(nameValue[1]);\n \n         final String value;\n         try {\n           value \u003d decoder.decode(ByteBuffer.wrap(decodedValue)).toString();\n         } catch (CharacterCodingException ex) {\n           throw new InvalidAbfsRestOperationException(ex);\n         }\n         properties.put(nameValue[0], value);\n       }\n     }\n \n     return properties;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Hashtable\u003cString, String\u003e parseCommaSeparatedXmsProperties(String xMsProperties) throws\n          InvalidFileSystemPropertyException, InvalidAbfsRestOperationException {\n    Hashtable\u003cString, String\u003e properties \u003d new Hashtable\u003c\u003e();\n\n    final CharsetDecoder decoder \u003d Charset.forName(XMS_PROPERTIES_ENCODING).newDecoder();\n\n    if (xMsProperties !\u003d null \u0026\u0026 !xMsProperties.isEmpty()) {\n      String[] userProperties \u003d xMsProperties.split(AbfsHttpConstants.COMMA);\n\n      if (userProperties.length \u003d\u003d 0) {\n        return properties;\n      }\n\n      for (String property : userProperties) {\n        if (property.isEmpty()) {\n          throw new InvalidFileSystemPropertyException(xMsProperties);\n        }\n\n        String[] nameValue \u003d property.split(AbfsHttpConstants.EQUAL, 2);\n        if (nameValue.length !\u003d 2) {\n          throw new InvalidFileSystemPropertyException(xMsProperties);\n        }\n\n        byte[] decodedValue \u003d Base64.decode(nameValue[1]);\n\n        final String value;\n        try {\n          value \u003d decoder.decode(ByteBuffer.wrap(decodedValue)).toString();\n        } catch (CharacterCodingException ex) {\n          throw new InvalidAbfsRestOperationException(ex);\n        }\n        properties.put(nameValue[0], value);\n      }\n    }\n\n    return properties;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystemStore.java",
      "extendedDetails": {}
    },
    "a271fd0eca75cef8b8ba940cdac8ad4fd21b4462": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-15560. ABFS: removed dependency injection and unnecessary dependencies.\nContributed by Da Zhou.\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "a271fd0eca75cef8b8ba940cdac8ad4fd21b4462",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "17/09/18 12:54 PM",
      "commitNameOld": "f044deedbbfee0812316d587139cb828f27172e9",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   private Hashtable\u003cString, String\u003e parseCommaSeparatedXmsProperties(String xMsProperties) throws\n-      InvalidFileSystemPropertyException, InvalidAbfsRestOperationException {\n+          InvalidFileSystemPropertyException, InvalidAbfsRestOperationException {\n     Hashtable\u003cString, String\u003e properties \u003d new Hashtable\u003c\u003e();\n \n     final CharsetDecoder decoder \u003d Charset.forName(XMS_PROPERTIES_ENCODING).newDecoder();\n \n     if (xMsProperties !\u003d null \u0026\u0026 !xMsProperties.isEmpty()) {\n       String[] userProperties \u003d xMsProperties.split(AbfsHttpConstants.COMMA);\n \n       if (userProperties.length \u003d\u003d 0) {\n         return properties;\n       }\n \n       for (String property : userProperties) {\n         if (property.isEmpty()) {\n           throw new InvalidFileSystemPropertyException(xMsProperties);\n         }\n \n         String[] nameValue \u003d property.split(AbfsHttpConstants.EQUAL, 2);\n         if (nameValue.length !\u003d 2) {\n           throw new InvalidFileSystemPropertyException(xMsProperties);\n         }\n \n         byte[] decodedValue \u003d DatatypeConverter.parseBase64Binary(nameValue[1]);\n \n         final String value;\n         try {\n           value \u003d decoder.decode(ByteBuffer.wrap(decodedValue)).toString();\n         } catch (CharacterCodingException ex) {\n           throw new InvalidAbfsRestOperationException(ex);\n         }\n         properties.put(nameValue[0], value);\n       }\n     }\n \n     return properties;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Hashtable\u003cString, String\u003e parseCommaSeparatedXmsProperties(String xMsProperties) throws\n          InvalidFileSystemPropertyException, InvalidAbfsRestOperationException {\n    Hashtable\u003cString, String\u003e properties \u003d new Hashtable\u003c\u003e();\n\n    final CharsetDecoder decoder \u003d Charset.forName(XMS_PROPERTIES_ENCODING).newDecoder();\n\n    if (xMsProperties !\u003d null \u0026\u0026 !xMsProperties.isEmpty()) {\n      String[] userProperties \u003d xMsProperties.split(AbfsHttpConstants.COMMA);\n\n      if (userProperties.length \u003d\u003d 0) {\n        return properties;\n      }\n\n      for (String property : userProperties) {\n        if (property.isEmpty()) {\n          throw new InvalidFileSystemPropertyException(xMsProperties);\n        }\n\n        String[] nameValue \u003d property.split(AbfsHttpConstants.EQUAL, 2);\n        if (nameValue.length !\u003d 2) {\n          throw new InvalidFileSystemPropertyException(xMsProperties);\n        }\n\n        byte[] decodedValue \u003d DatatypeConverter.parseBase64Binary(nameValue[1]);\n\n        final String value;\n        try {\n          value \u003d decoder.decode(ByteBuffer.wrap(decodedValue)).toString();\n        } catch (CharacterCodingException ex) {\n          throw new InvalidAbfsRestOperationException(ex);\n        }\n        properties.put(nameValue[0], value);\n      }\n    }\n\n    return properties;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystemStore.java",
      "extendedDetails": {
        "oldPath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsHttpServiceImpl.java",
        "newPath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystemStore.java"
      }
    },
    "f044deedbbfee0812316d587139cb828f27172e9": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15407. HADOOP-15540. Support Windows Azure Storage - Blob file system \"ABFS\" in Hadoop: Core Commit.\n\nContributed by Shane Mainali, Thomas Marquardt, Zichen Sun, Georgi Chalakov, Esfandiar Manii, Amit Singh, Dana Kaban, Da Zhou, Junhua Gu, Saher Ahwal, Saurabh Pant, James Baker, Shaoyu Zhang, Lawrence Chen, Kevin Chen and Steve Loughran\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "f044deedbbfee0812316d587139cb828f27172e9",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,37 @@\n+  private Hashtable\u003cString, String\u003e parseCommaSeparatedXmsProperties(String xMsProperties) throws\n+      InvalidFileSystemPropertyException, InvalidAbfsRestOperationException {\n+    Hashtable\u003cString, String\u003e properties \u003d new Hashtable\u003c\u003e();\n+\n+    final CharsetDecoder decoder \u003d Charset.forName(XMS_PROPERTIES_ENCODING).newDecoder();\n+\n+    if (xMsProperties !\u003d null \u0026\u0026 !xMsProperties.isEmpty()) {\n+      String[] userProperties \u003d xMsProperties.split(AbfsHttpConstants.COMMA);\n+\n+      if (userProperties.length \u003d\u003d 0) {\n+        return properties;\n+      }\n+\n+      for (String property : userProperties) {\n+        if (property.isEmpty()) {\n+          throw new InvalidFileSystemPropertyException(xMsProperties);\n+        }\n+\n+        String[] nameValue \u003d property.split(AbfsHttpConstants.EQUAL, 2);\n+        if (nameValue.length !\u003d 2) {\n+          throw new InvalidFileSystemPropertyException(xMsProperties);\n+        }\n+\n+        byte[] decodedValue \u003d DatatypeConverter.parseBase64Binary(nameValue[1]);\n+\n+        final String value;\n+        try {\n+          value \u003d decoder.decode(ByteBuffer.wrap(decodedValue)).toString();\n+        } catch (CharacterCodingException ex) {\n+          throw new InvalidAbfsRestOperationException(ex);\n+        }\n+        properties.put(nameValue[0], value);\n+      }\n+    }\n+\n+    return properties;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Hashtable\u003cString, String\u003e parseCommaSeparatedXmsProperties(String xMsProperties) throws\n      InvalidFileSystemPropertyException, InvalidAbfsRestOperationException {\n    Hashtable\u003cString, String\u003e properties \u003d new Hashtable\u003c\u003e();\n\n    final CharsetDecoder decoder \u003d Charset.forName(XMS_PROPERTIES_ENCODING).newDecoder();\n\n    if (xMsProperties !\u003d null \u0026\u0026 !xMsProperties.isEmpty()) {\n      String[] userProperties \u003d xMsProperties.split(AbfsHttpConstants.COMMA);\n\n      if (userProperties.length \u003d\u003d 0) {\n        return properties;\n      }\n\n      for (String property : userProperties) {\n        if (property.isEmpty()) {\n          throw new InvalidFileSystemPropertyException(xMsProperties);\n        }\n\n        String[] nameValue \u003d property.split(AbfsHttpConstants.EQUAL, 2);\n        if (nameValue.length !\u003d 2) {\n          throw new InvalidFileSystemPropertyException(xMsProperties);\n        }\n\n        byte[] decodedValue \u003d DatatypeConverter.parseBase64Binary(nameValue[1]);\n\n        final String value;\n        try {\n          value \u003d decoder.decode(ByteBuffer.wrap(decodedValue)).toString();\n        } catch (CharacterCodingException ex) {\n          throw new InvalidAbfsRestOperationException(ex);\n        }\n        properties.put(nameValue[0], value);\n      }\n    }\n\n    return properties;\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsHttpServiceImpl.java"
    }
  }
}