{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ImageLoaderCurrent.java",
  "functionName": "processDelegationTokens",
  "functionId": "processDelegationTokens___in-DataInputStream__v-ImageVisitor",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/ImageLoaderCurrent.java",
  "functionStartLine": 262,
  "functionEndLine": 304,
  "numCommitsSeen": 35,
  "timeTaken": 2061,
  "changeHistory": [
    "97f58955a6045b373ab73653bf26ab5922b00cf3"
  ],
  "changeHistoryShort": {
    "97f58955a6045b373ab73653bf26ab5922b00cf3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "97f58955a6045b373ab73653bf26ab5922b00cf3": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-6293. Issues with OIV processing PB-based fsimages. Contributed by Kihwal Lee.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1594439 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/05/14 6:15 PM",
      "commitName": "97f58955a6045b373ab73653bf26ab5922b00cf3",
      "commitAuthor": "Kihwal Lee",
      "diff": "@@ -0,0 +1,43 @@\n+  private void processDelegationTokens(DataInputStream in, ImageVisitor v)\n+      throws IOException {\n+    v.visit(ImageElement.CURRENT_DELEGATION_KEY_ID, in.readInt());\n+    int numDKeys \u003d in.readInt();\n+    v.visitEnclosingElement(ImageElement.DELEGATION_KEYS,\n+        ImageElement.NUM_DELEGATION_KEYS, numDKeys);\n+    for(int i \u003d0; i \u003c numDKeys; i++) {\n+      DelegationKey key \u003d new DelegationKey();\n+      key.readFields(in);\n+      v.visit(ImageElement.DELEGATION_KEY, key.toString());\n+    }\n+    v.leaveEnclosingElement();\n+    v.visit(ImageElement.DELEGATION_TOKEN_SEQUENCE_NUMBER, in.readInt());\n+    int numDTokens \u003d in.readInt();\n+    v.visitEnclosingElement(ImageElement.DELEGATION_TOKENS,\n+        ImageElement.NUM_DELEGATION_TOKENS, numDTokens);\n+    for(int i\u003d0; i\u003cnumDTokens; i++){\n+      DelegationTokenIdentifier id \u003d new  DelegationTokenIdentifier();\n+      id.readFields(in);\n+      long expiryTime \u003d in.readLong();\n+      v.visitEnclosingElement(ImageElement.DELEGATION_TOKEN_IDENTIFIER);\n+      v.visit(ImageElement.DELEGATION_TOKEN_IDENTIFIER_KIND,\n+          id.getKind().toString());\n+      v.visit(ImageElement.DELEGATION_TOKEN_IDENTIFIER_SEQNO,\n+          id.getSequenceNumber());\n+      v.visit(ImageElement.DELEGATION_TOKEN_IDENTIFIER_OWNER,\n+          id.getOwner().toString());\n+      v.visit(ImageElement.DELEGATION_TOKEN_IDENTIFIER_RENEWER,\n+          id.getRenewer().toString());\n+      v.visit(ImageElement.DELEGATION_TOKEN_IDENTIFIER_REALUSER,\n+          id.getRealUser().toString());\n+      v.visit(ImageElement.DELEGATION_TOKEN_IDENTIFIER_ISSUE_DATE,\n+          id.getIssueDate());\n+      v.visit(ImageElement.DELEGATION_TOKEN_IDENTIFIER_MAX_DATE,\n+          id.getMaxDate());\n+      v.visit(ImageElement.DELEGATION_TOKEN_IDENTIFIER_EXPIRY_TIME,\n+          expiryTime);\n+      v.visit(ImageElement.DELEGATION_TOKEN_IDENTIFIER_MASTER_KEY_ID,\n+          id.getMasterKeyId());\n+      v.leaveEnclosingElement(); // DELEGATION_TOKEN_IDENTIFIER\n+    }\n+    v.leaveEnclosingElement(); // DELEGATION_TOKENS\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void processDelegationTokens(DataInputStream in, ImageVisitor v)\n      throws IOException {\n    v.visit(ImageElement.CURRENT_DELEGATION_KEY_ID, in.readInt());\n    int numDKeys \u003d in.readInt();\n    v.visitEnclosingElement(ImageElement.DELEGATION_KEYS,\n        ImageElement.NUM_DELEGATION_KEYS, numDKeys);\n    for(int i \u003d0; i \u003c numDKeys; i++) {\n      DelegationKey key \u003d new DelegationKey();\n      key.readFields(in);\n      v.visit(ImageElement.DELEGATION_KEY, key.toString());\n    }\n    v.leaveEnclosingElement();\n    v.visit(ImageElement.DELEGATION_TOKEN_SEQUENCE_NUMBER, in.readInt());\n    int numDTokens \u003d in.readInt();\n    v.visitEnclosingElement(ImageElement.DELEGATION_TOKENS,\n        ImageElement.NUM_DELEGATION_TOKENS, numDTokens);\n    for(int i\u003d0; i\u003cnumDTokens; i++){\n      DelegationTokenIdentifier id \u003d new  DelegationTokenIdentifier();\n      id.readFields(in);\n      long expiryTime \u003d in.readLong();\n      v.visitEnclosingElement(ImageElement.DELEGATION_TOKEN_IDENTIFIER);\n      v.visit(ImageElement.DELEGATION_TOKEN_IDENTIFIER_KIND,\n          id.getKind().toString());\n      v.visit(ImageElement.DELEGATION_TOKEN_IDENTIFIER_SEQNO,\n          id.getSequenceNumber());\n      v.visit(ImageElement.DELEGATION_TOKEN_IDENTIFIER_OWNER,\n          id.getOwner().toString());\n      v.visit(ImageElement.DELEGATION_TOKEN_IDENTIFIER_RENEWER,\n          id.getRenewer().toString());\n      v.visit(ImageElement.DELEGATION_TOKEN_IDENTIFIER_REALUSER,\n          id.getRealUser().toString());\n      v.visit(ImageElement.DELEGATION_TOKEN_IDENTIFIER_ISSUE_DATE,\n          id.getIssueDate());\n      v.visit(ImageElement.DELEGATION_TOKEN_IDENTIFIER_MAX_DATE,\n          id.getMaxDate());\n      v.visit(ImageElement.DELEGATION_TOKEN_IDENTIFIER_EXPIRY_TIME,\n          expiryTime);\n      v.visit(ImageElement.DELEGATION_TOKEN_IDENTIFIER_MASTER_KEY_ID,\n          id.getMasterKeyId());\n      v.leaveEnclosingElement(); // DELEGATION_TOKEN_IDENTIFIER\n    }\n    v.leaveEnclosingElement(); // DELEGATION_TOKENS\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/ImageLoaderCurrent.java"
    }
  }
}