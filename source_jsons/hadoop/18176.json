{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MembershipStoreImpl.java",
  "functionName": "getRepresentativeQuorum",
  "functionId": "getRepresentativeQuorum___records-Collection__MembershipState__",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/store/impl/MembershipStoreImpl.java",
  "functionStartLine": 273,
  "functionEndLine": 309,
  "numCommitsSeen": 3,
  "timeTaken": 1391,
  "changeHistory": [
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
    "55da7fd7ebe2f3fa1c1c828dda727fddc75a1b81"
  ],
  "changeHistoryShort": {
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": "Yfilerename",
    "55da7fd7ebe2f3fa1c1c828dda727fddc75a1b81": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-13215. RBF: Move Router to its own module. Contributed by Wei Yan\n",
      "commitDate": "19/03/18 10:13 PM",
      "commitName": "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
      "commitAuthor": "weiy",
      "commitDateOld": "19/03/18 5:19 PM",
      "commitNameOld": "e65ff1c8be48ef4f04ed96f96ac4caef4974944d",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.2,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private MembershipState getRepresentativeQuorum(\n      Collection\u003cMembershipState\u003e records) {\n\n    // Collate objects by field value: field value -\u003e order set of records\n    Map\u003cFederationNamenodeServiceState, TreeSet\u003cMembershipState\u003e\u003e occurenceMap \u003d\n        new HashMap\u003c\u003e();\n    for (MembershipState record : records) {\n      FederationNamenodeServiceState state \u003d record.getState();\n      TreeSet\u003cMembershipState\u003e matchingSet \u003d occurenceMap.get(state);\n      if (matchingSet \u003d\u003d null) {\n        // TreeSet orders elements by descending date via comparators\n        matchingSet \u003d new TreeSet\u003c\u003e();\n        occurenceMap.put(state, matchingSet);\n      }\n      matchingSet.add(record);\n    }\n\n    // Select largest group\n    TreeSet\u003cMembershipState\u003e largestSet \u003d new TreeSet\u003c\u003e();\n    for (TreeSet\u003cMembershipState\u003e matchingSet : occurenceMap.values()) {\n      if (largestSet.size() \u003c matchingSet.size()) {\n        largestSet \u003d matchingSet;\n      }\n    }\n\n    // If quorum, use the newest element here\n    if (largestSet.size() \u003e records.size() / 2) {\n      return largestSet.first();\n      // Otherwise, return most recent by class comparator\n    } else if (records.size() \u003e 0) {\n      TreeSet\u003cMembershipState\u003e sortedList \u003d new TreeSet\u003c\u003e(records);\n      LOG.debug(\"Quorum failed, using most recent: {}\", sortedList.first());\n      return sortedList.first();\n    } else {\n      return null;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/store/impl/MembershipStoreImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/store/impl/MembershipStoreImpl.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/store/impl/MembershipStoreImpl.java"
      }
    },
    "55da7fd7ebe2f3fa1c1c828dda727fddc75a1b81": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-10687. Federation Membership State Store internal API. Contributed by Jason Kace and Inigo Goiri.\n\n(cherry picked from commit 95cae08849d23cf12c5d280c29f90908e6a90d40)\n",
      "commitDate": "06/10/17 6:50 PM",
      "commitName": "55da7fd7ebe2f3fa1c1c828dda727fddc75a1b81",
      "commitAuthor": "Inigo Goiri",
      "diff": "@@ -0,0 +1,37 @@\n+  private MembershipState getRepresentativeQuorum(\n+      Collection\u003cMembershipState\u003e records) {\n+\n+    // Collate objects by field value: field value -\u003e order set of records\n+    Map\u003cFederationNamenodeServiceState, TreeSet\u003cMembershipState\u003e\u003e occurenceMap \u003d\n+        new HashMap\u003c\u003e();\n+    for (MembershipState record : records) {\n+      FederationNamenodeServiceState state \u003d record.getState();\n+      TreeSet\u003cMembershipState\u003e matchingSet \u003d occurenceMap.get(state);\n+      if (matchingSet \u003d\u003d null) {\n+        // TreeSet orders elements by descending date via comparators\n+        matchingSet \u003d new TreeSet\u003c\u003e();\n+        occurenceMap.put(state, matchingSet);\n+      }\n+      matchingSet.add(record);\n+    }\n+\n+    // Select largest group\n+    TreeSet\u003cMembershipState\u003e largestSet \u003d new TreeSet\u003c\u003e();\n+    for (TreeSet\u003cMembershipState\u003e matchingSet : occurenceMap.values()) {\n+      if (largestSet.size() \u003c matchingSet.size()) {\n+        largestSet \u003d matchingSet;\n+      }\n+    }\n+\n+    // If quorum, use the newest element here\n+    if (largestSet.size() \u003e records.size() / 2) {\n+      return largestSet.first();\n+      // Otherwise, return most recent by class comparator\n+    } else if (records.size() \u003e 0) {\n+      TreeSet\u003cMembershipState\u003e sortedList \u003d new TreeSet\u003c\u003e(records);\n+      LOG.debug(\"Quorum failed, using most recent: {}\", sortedList.first());\n+      return sortedList.first();\n+    } else {\n+      return null;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private MembershipState getRepresentativeQuorum(\n      Collection\u003cMembershipState\u003e records) {\n\n    // Collate objects by field value: field value -\u003e order set of records\n    Map\u003cFederationNamenodeServiceState, TreeSet\u003cMembershipState\u003e\u003e occurenceMap \u003d\n        new HashMap\u003c\u003e();\n    for (MembershipState record : records) {\n      FederationNamenodeServiceState state \u003d record.getState();\n      TreeSet\u003cMembershipState\u003e matchingSet \u003d occurenceMap.get(state);\n      if (matchingSet \u003d\u003d null) {\n        // TreeSet orders elements by descending date via comparators\n        matchingSet \u003d new TreeSet\u003c\u003e();\n        occurenceMap.put(state, matchingSet);\n      }\n      matchingSet.add(record);\n    }\n\n    // Select largest group\n    TreeSet\u003cMembershipState\u003e largestSet \u003d new TreeSet\u003c\u003e();\n    for (TreeSet\u003cMembershipState\u003e matchingSet : occurenceMap.values()) {\n      if (largestSet.size() \u003c matchingSet.size()) {\n        largestSet \u003d matchingSet;\n      }\n    }\n\n    // If quorum, use the newest element here\n    if (largestSet.size() \u003e records.size() / 2) {\n      return largestSet.first();\n      // Otherwise, return most recent by class comparator\n    } else if (records.size() \u003e 0) {\n      TreeSet\u003cMembershipState\u003e sortedList \u003d new TreeSet\u003c\u003e(records);\n      LOG.debug(\"Quorum failed, using most recent: {}\", sortedList.first());\n      return sortedList.first();\n    } else {\n      return null;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/store/impl/MembershipStoreImpl.java"
    }
  }
}