{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RegistrationClient.java",
  "functionName": "messageReceived",
  "functionId": "messageReceived___ctx-ChannelHandlerContext__e-MessageEvent",
  "sourceFilePath": "hadoop-common-project/hadoop-nfs/src/main/java/org/apache/hadoop/oncrpc/RegistrationClient.java",
  "functionStartLine": 61,
  "functionEndLine": 87,
  "numCommitsSeen": 2,
  "timeTaken": 396,
  "changeHistory": [
    "8ef140d38b16a18050e9e7901e8aadd424aef20f"
  ],
  "changeHistoryShort": {
    "8ef140d38b16a18050e9e7901e8aadd424aef20f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8ef140d38b16a18050e9e7901e8aadd424aef20f": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-9509. Implement ONCRPC and XDR. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1490845 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/06/13 2:45 PM",
      "commitName": "8ef140d38b16a18050e9e7901e8aadd424aef20f",
      "commitAuthor": "Brandon Li",
      "diff": "@@ -0,0 +1,27 @@\n+    public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) {\n+      ChannelBuffer buf \u003d (ChannelBuffer) e.getMessage(); // Read reply\n+      if (!validMessageLength(buf.readableBytes())) {\n+        e.getChannel().close();\n+        return;\n+      }\n+\n+      // handling fragment header for TCP, 4 bytes.\n+      byte[] fragmentHeader \u003d Arrays.copyOfRange(buf.array(), 0, 4);\n+      int fragmentSize \u003d XDR.fragmentSize(fragmentHeader);\n+      boolean isLast \u003d XDR.isLastFragment(fragmentHeader);\n+      assert (fragmentSize \u003d\u003d 28 \u0026\u0026 isLast \u003d\u003d true);\n+\n+      XDR xdr \u003d new XDR();\n+      xdr.writeFixedOpaque(Arrays.copyOfRange(buf.array(), 4,\n+          buf.readableBytes()));\n+\n+      RpcReply reply \u003d RpcReply.read(xdr);\n+      if (reply.getState() \u003d\u003d RpcReply.ReplyState.MSG_ACCEPTED) {\n+        RpcAcceptedReply acceptedReply \u003d (RpcAcceptedReply) reply;\n+        handle(acceptedReply, xdr);\n+      } else {\n+        RpcDeniedReply deniedReply \u003d (RpcDeniedReply) reply;\n+        handle(deniedReply);\n+      }\n+      e.getChannel().close(); // shutdown now that request is complete\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) {\n      ChannelBuffer buf \u003d (ChannelBuffer) e.getMessage(); // Read reply\n      if (!validMessageLength(buf.readableBytes())) {\n        e.getChannel().close();\n        return;\n      }\n\n      // handling fragment header for TCP, 4 bytes.\n      byte[] fragmentHeader \u003d Arrays.copyOfRange(buf.array(), 0, 4);\n      int fragmentSize \u003d XDR.fragmentSize(fragmentHeader);\n      boolean isLast \u003d XDR.isLastFragment(fragmentHeader);\n      assert (fragmentSize \u003d\u003d 28 \u0026\u0026 isLast \u003d\u003d true);\n\n      XDR xdr \u003d new XDR();\n      xdr.writeFixedOpaque(Arrays.copyOfRange(buf.array(), 4,\n          buf.readableBytes()));\n\n      RpcReply reply \u003d RpcReply.read(xdr);\n      if (reply.getState() \u003d\u003d RpcReply.ReplyState.MSG_ACCEPTED) {\n        RpcAcceptedReply acceptedReply \u003d (RpcAcceptedReply) reply;\n        handle(acceptedReply, xdr);\n      } else {\n        RpcDeniedReply deniedReply \u003d (RpcDeniedReply) reply;\n        handle(deniedReply);\n      }\n      e.getChannel().close(); // shutdown now that request is complete\n    }",
      "path": "hadoop-common-project/hadoop-nfs/src/main/java/org/apache/hadoop/oncrpc/RegistrationClient.java"
    }
  }
}