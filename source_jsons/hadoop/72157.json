{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ZKSignerSecretProvider.java",
  "functionName": "createCuratorClient",
  "functionId": "createCuratorClient___config-Properties",
  "sourceFilePath": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/util/ZKSignerSecretProvider.java",
  "functionStartLine": 358,
  "functionEndLine": 386,
  "numCommitsSeen": 11,
  "timeTaken": 1344,
  "changeHistory": [
    "6d92aa7c30439d78deb68cc3186a67557544681f",
    "7e08c0f23f58aa143f0997f2472e8051175142e9",
    "932ae036acb96634c5dd435d57ba02ce4d5e8918"
  ],
  "changeHistoryShort": {
    "6d92aa7c30439d78deb68cc3186a67557544681f": "Ybodychange",
    "7e08c0f23f58aa143f0997f2472e8051175142e9": "Ybodychange",
    "932ae036acb96634c5dd435d57ba02ce4d5e8918": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6d92aa7c30439d78deb68cc3186a67557544681f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16579. Upgrade to Curator 4.2.0 and ZooKeeper 3.5.5 (#1656). Contributed by Norbert Kalmár, Mate Szalay-Beko\n\n* HADOOP-16579 - Upgrade to Apache Curator 4.2.0 and ZooKeeper 3.5.5\r\n\r\n- Add a static initializer for the unit tests using ZooKeeper to enable\r\nthe four-letter-words diagnostic telnet commands. (this is an interface\r\nthat become disabled by default, so to keep the ZooKeeper 3.4.x behavior\r\nwe enabled it for the tests)\r\n- Also fix ZKFailoverController to look for relevant fail-over ActiveAttempt\r\nrecords. The new ZooKeeper seems to respond quicker during the fail-over\r\ntests than the ZooKeeper, so we made sure to catch all the relevant records\r\nby adding a new parameter to ZKFailoverontroller.waitForActiveAttempt().\r\n\r\nCo-authored-by: Norbert Kalmár \u003cnkalmar@cloudera.com\u003e",
      "commitDate": "18/10/19 1:26 PM",
      "commitName": "6d92aa7c30439d78deb68cc3186a67557544681f",
      "commitAuthor": "Mate Szalay-Beko",
      "commitDateOld": "12/04/17 11:17 AM",
      "commitNameOld": "4dd6206547de8f694532579e37ba8103bafaeb12",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 919.09,
      "commitsBetweenForRepo": 7342,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n   protected CuratorFramework createCuratorClient(Properties config)\n           throws Exception {\n     String connectionString \u003d config.getProperty(\n             ZOOKEEPER_CONNECTION_STRING, \"localhost:2181\");\n \n     RetryPolicy retryPolicy \u003d new ExponentialBackoffRetry(1000, 3);\n     ACLProvider aclProvider;\n     String authType \u003d config.getProperty(ZOOKEEPER_AUTH_TYPE, \"none\");\n     if (authType.equals(\"sasl\")) {\n       LOG.info(\"Connecting to ZooKeeper with SASL/Kerberos\"\n               + \"and using \u0027sasl\u0027 ACLs\");\n       String principal \u003d setJaasConfiguration(config);\n-      System.setProperty(ZooKeeperSaslClient.LOGIN_CONTEXT_NAME_KEY,\n+      System.setProperty(ZKClientConfig.LOGIN_CONTEXT_NAME_KEY,\n               JAAS_LOGIN_ENTRY_NAME);\n       System.setProperty(\"zookeeper.authProvider.1\",\n               \"org.apache.zookeeper.server.auth.SASLAuthenticationProvider\");\n       aclProvider \u003d new SASLOwnerACLProvider(principal);\n     } else {  // \"none\"\n       LOG.info(\"Connecting to ZooKeeper without authentication\");\n       aclProvider \u003d new DefaultACLProvider();     // open to everyone\n     }\n     CuratorFramework cf \u003d CuratorFrameworkFactory.builder()\n             .connectString(connectionString)\n             .retryPolicy(retryPolicy)\n             .aclProvider(aclProvider)\n             .build();\n     cf.start();\n     return cf;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected CuratorFramework createCuratorClient(Properties config)\n          throws Exception {\n    String connectionString \u003d config.getProperty(\n            ZOOKEEPER_CONNECTION_STRING, \"localhost:2181\");\n\n    RetryPolicy retryPolicy \u003d new ExponentialBackoffRetry(1000, 3);\n    ACLProvider aclProvider;\n    String authType \u003d config.getProperty(ZOOKEEPER_AUTH_TYPE, \"none\");\n    if (authType.equals(\"sasl\")) {\n      LOG.info(\"Connecting to ZooKeeper with SASL/Kerberos\"\n              + \"and using \u0027sasl\u0027 ACLs\");\n      String principal \u003d setJaasConfiguration(config);\n      System.setProperty(ZKClientConfig.LOGIN_CONTEXT_NAME_KEY,\n              JAAS_LOGIN_ENTRY_NAME);\n      System.setProperty(\"zookeeper.authProvider.1\",\n              \"org.apache.zookeeper.server.auth.SASLAuthenticationProvider\");\n      aclProvider \u003d new SASLOwnerACLProvider(principal);\n    } else {  // \"none\"\n      LOG.info(\"Connecting to ZooKeeper without authentication\");\n      aclProvider \u003d new DefaultACLProvider();     // open to everyone\n    }\n    CuratorFramework cf \u003d CuratorFrameworkFactory.builder()\n            .connectString(connectionString)\n            .retryPolicy(retryPolicy)\n            .aclProvider(aclProvider)\n            .build();\n    cf.start();\n    return cf;\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/util/ZKSignerSecretProvider.java",
      "extendedDetails": {}
    },
    "7e08c0f23f58aa143f0997f2472e8051175142e9": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10868. Addendum\n",
      "commitDate": "15/09/14 7:39 PM",
      "commitName": "7e08c0f23f58aa143f0997f2472e8051175142e9",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "15/09/14 5:05 PM",
      "commitNameOld": "932ae036acb96634c5dd435d57ba02ce4d5e8918",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 0.11,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n   protected CuratorFramework createCuratorClient(Properties config)\n           throws Exception {\n     String connectionString \u003d config.getProperty(\n             ZOOKEEPER_CONNECTION_STRING, \"localhost:2181\");\n \n     RetryPolicy retryPolicy \u003d new ExponentialBackoffRetry(1000, 3);\n     ACLProvider aclProvider;\n     String authType \u003d config.getProperty(ZOOKEEPER_AUTH_TYPE, \"none\");\n     if (authType.equals(\"sasl\")) {\n       LOG.info(\"Connecting to ZooKeeper with SASL/Kerberos\"\n               + \"and using \u0027sasl\u0027 ACLs\");\n       String principal \u003d setJaasConfiguration(config);\n       System.setProperty(ZooKeeperSaslClient.LOGIN_CONTEXT_NAME_KEY,\n-              \"ZKSignerSecretProviderClient\");\n+              JAAS_LOGIN_ENTRY_NAME);\n       System.setProperty(\"zookeeper.authProvider.1\",\n               \"org.apache.zookeeper.server.auth.SASLAuthenticationProvider\");\n       aclProvider \u003d new SASLOwnerACLProvider(principal);\n     } else {  // \"none\"\n       LOG.info(\"Connecting to ZooKeeper without authentication\");\n       aclProvider \u003d new DefaultACLProvider();     // open to everyone\n     }\n     CuratorFramework cf \u003d CuratorFrameworkFactory.builder()\n             .connectString(connectionString)\n             .retryPolicy(retryPolicy)\n             .aclProvider(aclProvider)\n             .build();\n     cf.start();\n     return cf;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected CuratorFramework createCuratorClient(Properties config)\n          throws Exception {\n    String connectionString \u003d config.getProperty(\n            ZOOKEEPER_CONNECTION_STRING, \"localhost:2181\");\n\n    RetryPolicy retryPolicy \u003d new ExponentialBackoffRetry(1000, 3);\n    ACLProvider aclProvider;\n    String authType \u003d config.getProperty(ZOOKEEPER_AUTH_TYPE, \"none\");\n    if (authType.equals(\"sasl\")) {\n      LOG.info(\"Connecting to ZooKeeper with SASL/Kerberos\"\n              + \"and using \u0027sasl\u0027 ACLs\");\n      String principal \u003d setJaasConfiguration(config);\n      System.setProperty(ZooKeeperSaslClient.LOGIN_CONTEXT_NAME_KEY,\n              JAAS_LOGIN_ENTRY_NAME);\n      System.setProperty(\"zookeeper.authProvider.1\",\n              \"org.apache.zookeeper.server.auth.SASLAuthenticationProvider\");\n      aclProvider \u003d new SASLOwnerACLProvider(principal);\n    } else {  // \"none\"\n      LOG.info(\"Connecting to ZooKeeper without authentication\");\n      aclProvider \u003d new DefaultACLProvider();     // open to everyone\n    }\n    CuratorFramework cf \u003d CuratorFrameworkFactory.builder()\n            .connectString(connectionString)\n            .retryPolicy(retryPolicy)\n            .aclProvider(aclProvider)\n            .build();\n    cf.start();\n    return cf;\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/util/ZKSignerSecretProvider.java",
      "extendedDetails": {}
    },
    "932ae036acb96634c5dd435d57ba02ce4d5e8918": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10868. AuthenticationFilter should support externalizing the secret for signing and provide rotation support. (rkanter via tucu)\n",
      "commitDate": "15/09/14 5:05 PM",
      "commitName": "932ae036acb96634c5dd435d57ba02ce4d5e8918",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,29 @@\n+  protected CuratorFramework createCuratorClient(Properties config)\n+          throws Exception {\n+    String connectionString \u003d config.getProperty(\n+            ZOOKEEPER_CONNECTION_STRING, \"localhost:2181\");\n+\n+    RetryPolicy retryPolicy \u003d new ExponentialBackoffRetry(1000, 3);\n+    ACLProvider aclProvider;\n+    String authType \u003d config.getProperty(ZOOKEEPER_AUTH_TYPE, \"none\");\n+    if (authType.equals(\"sasl\")) {\n+      LOG.info(\"Connecting to ZooKeeper with SASL/Kerberos\"\n+              + \"and using \u0027sasl\u0027 ACLs\");\n+      String principal \u003d setJaasConfiguration(config);\n+      System.setProperty(ZooKeeperSaslClient.LOGIN_CONTEXT_NAME_KEY,\n+              \"ZKSignerSecretProviderClient\");\n+      System.setProperty(\"zookeeper.authProvider.1\",\n+              \"org.apache.zookeeper.server.auth.SASLAuthenticationProvider\");\n+      aclProvider \u003d new SASLOwnerACLProvider(principal);\n+    } else {  // \"none\"\n+      LOG.info(\"Connecting to ZooKeeper without authentication\");\n+      aclProvider \u003d new DefaultACLProvider();     // open to everyone\n+    }\n+    CuratorFramework cf \u003d CuratorFrameworkFactory.builder()\n+            .connectString(connectionString)\n+            .retryPolicy(retryPolicy)\n+            .aclProvider(aclProvider)\n+            .build();\n+    cf.start();\n+    return cf;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected CuratorFramework createCuratorClient(Properties config)\n          throws Exception {\n    String connectionString \u003d config.getProperty(\n            ZOOKEEPER_CONNECTION_STRING, \"localhost:2181\");\n\n    RetryPolicy retryPolicy \u003d new ExponentialBackoffRetry(1000, 3);\n    ACLProvider aclProvider;\n    String authType \u003d config.getProperty(ZOOKEEPER_AUTH_TYPE, \"none\");\n    if (authType.equals(\"sasl\")) {\n      LOG.info(\"Connecting to ZooKeeper with SASL/Kerberos\"\n              + \"and using \u0027sasl\u0027 ACLs\");\n      String principal \u003d setJaasConfiguration(config);\n      System.setProperty(ZooKeeperSaslClient.LOGIN_CONTEXT_NAME_KEY,\n              \"ZKSignerSecretProviderClient\");\n      System.setProperty(\"zookeeper.authProvider.1\",\n              \"org.apache.zookeeper.server.auth.SASLAuthenticationProvider\");\n      aclProvider \u003d new SASLOwnerACLProvider(principal);\n    } else {  // \"none\"\n      LOG.info(\"Connecting to ZooKeeper without authentication\");\n      aclProvider \u003d new DefaultACLProvider();     // open to everyone\n    }\n    CuratorFramework cf \u003d CuratorFrameworkFactory.builder()\n            .connectString(connectionString)\n            .retryPolicy(retryPolicy)\n            .aclProvider(aclProvider)\n            .build();\n    cf.start();\n    return cf;\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/util/ZKSignerSecretProvider.java"
    }
  }
}