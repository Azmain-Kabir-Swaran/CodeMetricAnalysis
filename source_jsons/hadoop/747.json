{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DataStreamer.java",
  "functionName": "getPinnings",
  "functionId": "getPinnings___nodes-DatanodeInfo[]",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DataStreamer.java",
  "functionStartLine": 1843,
  "functionEndLine": 1863,
  "numCommitsSeen": 242,
  "timeTaken": 6203,
  "changeHistory": [
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
    "39285e6a1978ea5e53bdc1b0aef62421382124a8",
    "6ee0539ede78b640f01c5eac18ded161182a7835",
    "d5a9a3daa0224249221ffa7b8bd5751ab2feca56",
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
    "7947e5b53b9ac9524b535b0384c1c355b74723ff",
    "a16bfff71bd7f00e06e1f59bfe5445a154bb8c66",
    "db6606223ca2e17aa7e1b2e2be13c1a19d8e7465",
    "085b1e293ff53f7a86aa21406cfd4bfa0f3bf33b"
  ],
  "changeHistoryShort": {
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": "Ymultichange(Yparameterchange,Ybodychange)",
    "39285e6a1978ea5e53bdc1b0aef62421382124a8": "Ybodychange",
    "6ee0539ede78b640f01c5eac18ded161182a7835": "Ybodychange",
    "d5a9a3daa0224249221ffa7b8bd5751ab2feca56": "Ybodychange",
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c": "Yfilerename",
    "7947e5b53b9ac9524b535b0384c1c355b74723ff": "Ybodychange",
    "a16bfff71bd7f00e06e1f59bfe5445a154bb8c66": "Ymovefromfile",
    "db6606223ca2e17aa7e1b2e2be13c1a19d8e7465": "Ymultichange(Yparameterchange,Ybodychange)",
    "085b1e293ff53f7a86aa21406cfd4bfa0f3bf33b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-8979. Clean up checkstyle warnings in hadoop-hdfs-client module. Contributed by Mingliang Liu.\n",
      "commitDate": "03/10/15 11:38 AM",
      "commitName": "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-8979. Clean up checkstyle warnings in hadoop-hdfs-client module. Contributed by Mingliang Liu.\n",
          "commitDate": "03/10/15 11:38 AM",
          "commitName": "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "30/09/15 8:39 AM",
          "commitNameOld": "6c17d315287020368689fa078a40a1eaedf89d5b",
          "commitAuthorOld": "",
          "daysBetweenCommits": 3.12,
          "commitsBetweenForRepo": 16,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,21 @@\n-  private boolean[] getPinnings(DatanodeInfo[] nodes, boolean shouldLog) {\n+  private boolean[] getPinnings(DatanodeInfo[] nodes) {\n     if (favoredNodes \u003d\u003d null) {\n       return null;\n     } else {\n       boolean[] pinnings \u003d new boolean[nodes.length];\n-      HashSet\u003cString\u003e favoredSet \u003d\n-          new HashSet\u003cString\u003e(Arrays.asList(favoredNodes));\n+      HashSet\u003cString\u003e favoredSet \u003d new HashSet\u003c\u003e(Arrays.asList(favoredNodes));\n       for (int i \u003d 0; i \u003c nodes.length; i++) {\n         pinnings[i] \u003d favoredSet.remove(nodes[i].getXferAddrWithHostname());\n         LOG.debug(\"{} was chosen by name node (favored\u003d{}).\",\n             nodes[i].getXferAddrWithHostname(), pinnings[i]);\n       }\n-      if (shouldLog \u0026\u0026 !favoredSet.isEmpty()) {\n+      if (!favoredSet.isEmpty()) {\n         // There is one or more favored nodes that were not allocated.\n         LOG.warn(\"These favored nodes were specified but not chosen: \"\n             + favoredSet + \" Specified favored nodes: \"\n             + Arrays.toString(favoredNodes));\n \n       }\n       return pinnings;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean[] getPinnings(DatanodeInfo[] nodes) {\n    if (favoredNodes \u003d\u003d null) {\n      return null;\n    } else {\n      boolean[] pinnings \u003d new boolean[nodes.length];\n      HashSet\u003cString\u003e favoredSet \u003d new HashSet\u003c\u003e(Arrays.asList(favoredNodes));\n      for (int i \u003d 0; i \u003c nodes.length; i++) {\n        pinnings[i] \u003d favoredSet.remove(nodes[i].getXferAddrWithHostname());\n        LOG.debug(\"{} was chosen by name node (favored\u003d{}).\",\n            nodes[i].getXferAddrWithHostname(), pinnings[i]);\n      }\n      if (!favoredSet.isEmpty()) {\n        // There is one or more favored nodes that were not allocated.\n        LOG.warn(\"These favored nodes were specified but not chosen: \"\n            + favoredSet + \" Specified favored nodes: \"\n            + Arrays.toString(favoredNodes));\n\n      }\n      return pinnings;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DataStreamer.java",
          "extendedDetails": {
            "oldValue": "[nodes-DatanodeInfo[], shouldLog-boolean]",
            "newValue": "[nodes-DatanodeInfo[]]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8979. Clean up checkstyle warnings in hadoop-hdfs-client module. Contributed by Mingliang Liu.\n",
          "commitDate": "03/10/15 11:38 AM",
          "commitName": "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "30/09/15 8:39 AM",
          "commitNameOld": "6c17d315287020368689fa078a40a1eaedf89d5b",
          "commitAuthorOld": "",
          "daysBetweenCommits": 3.12,
          "commitsBetweenForRepo": 16,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,21 @@\n-  private boolean[] getPinnings(DatanodeInfo[] nodes, boolean shouldLog) {\n+  private boolean[] getPinnings(DatanodeInfo[] nodes) {\n     if (favoredNodes \u003d\u003d null) {\n       return null;\n     } else {\n       boolean[] pinnings \u003d new boolean[nodes.length];\n-      HashSet\u003cString\u003e favoredSet \u003d\n-          new HashSet\u003cString\u003e(Arrays.asList(favoredNodes));\n+      HashSet\u003cString\u003e favoredSet \u003d new HashSet\u003c\u003e(Arrays.asList(favoredNodes));\n       for (int i \u003d 0; i \u003c nodes.length; i++) {\n         pinnings[i] \u003d favoredSet.remove(nodes[i].getXferAddrWithHostname());\n         LOG.debug(\"{} was chosen by name node (favored\u003d{}).\",\n             nodes[i].getXferAddrWithHostname(), pinnings[i]);\n       }\n-      if (shouldLog \u0026\u0026 !favoredSet.isEmpty()) {\n+      if (!favoredSet.isEmpty()) {\n         // There is one or more favored nodes that were not allocated.\n         LOG.warn(\"These favored nodes were specified but not chosen: \"\n             + favoredSet + \" Specified favored nodes: \"\n             + Arrays.toString(favoredNodes));\n \n       }\n       return pinnings;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean[] getPinnings(DatanodeInfo[] nodes) {\n    if (favoredNodes \u003d\u003d null) {\n      return null;\n    } else {\n      boolean[] pinnings \u003d new boolean[nodes.length];\n      HashSet\u003cString\u003e favoredSet \u003d new HashSet\u003c\u003e(Arrays.asList(favoredNodes));\n      for (int i \u003d 0; i \u003c nodes.length; i++) {\n        pinnings[i] \u003d favoredSet.remove(nodes[i].getXferAddrWithHostname());\n        LOG.debug(\"{} was chosen by name node (favored\u003d{}).\",\n            nodes[i].getXferAddrWithHostname(), pinnings[i]);\n      }\n      if (!favoredSet.isEmpty()) {\n        // There is one or more favored nodes that were not allocated.\n        LOG.warn(\"These favored nodes were specified but not chosen: \"\n            + favoredSet + \" Specified favored nodes: \"\n            + Arrays.toString(favoredNodes));\n\n      }\n      return pinnings;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DataStreamer.java",
          "extendedDetails": {}
        }
      ]
    },
    "39285e6a1978ea5e53bdc1b0aef62421382124a8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8971. Remove guards when calling LOG.debug() and LOG.trace() in client package. Contributed by Mingliang Liu.\n",
      "commitDate": "29/09/15 5:52 PM",
      "commitName": "39285e6a1978ea5e53bdc1b0aef62421382124a8",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "29/09/15 5:51 PM",
      "commitNameOld": "6ee0539ede78b640f01c5eac18ded161182a7835",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,22 @@\n   private boolean[] getPinnings(DatanodeInfo[] nodes, boolean shouldLog) {\n     if (favoredNodes \u003d\u003d null) {\n       return null;\n     } else {\n       boolean[] pinnings \u003d new boolean[nodes.length];\n       HashSet\u003cString\u003e favoredSet \u003d\n           new HashSet\u003cString\u003e(Arrays.asList(favoredNodes));\n       for (int i \u003d 0; i \u003c nodes.length; i++) {\n         pinnings[i] \u003d favoredSet.remove(nodes[i].getXferAddrWithHostname());\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(nodes[i].getXferAddrWithHostname() +\n-              \" was chosen by name node (favored\u003d\" + pinnings[i] + \").\");\n-        }\n+        LOG.debug(\"{} was chosen by name node (favored\u003d{}).\",\n+            nodes[i].getXferAddrWithHostname(), pinnings[i]);\n       }\n       if (shouldLog \u0026\u0026 !favoredSet.isEmpty()) {\n         // There is one or more favored nodes that were not allocated.\n         LOG.warn(\"These favored nodes were specified but not chosen: \"\n             + favoredSet + \" Specified favored nodes: \"\n             + Arrays.toString(favoredNodes));\n \n       }\n       return pinnings;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean[] getPinnings(DatanodeInfo[] nodes, boolean shouldLog) {\n    if (favoredNodes \u003d\u003d null) {\n      return null;\n    } else {\n      boolean[] pinnings \u003d new boolean[nodes.length];\n      HashSet\u003cString\u003e favoredSet \u003d\n          new HashSet\u003cString\u003e(Arrays.asList(favoredNodes));\n      for (int i \u003d 0; i \u003c nodes.length; i++) {\n        pinnings[i] \u003d favoredSet.remove(nodes[i].getXferAddrWithHostname());\n        LOG.debug(\"{} was chosen by name node (favored\u003d{}).\",\n            nodes[i].getXferAddrWithHostname(), pinnings[i]);\n      }\n      if (shouldLog \u0026\u0026 !favoredSet.isEmpty()) {\n        // There is one or more favored nodes that were not allocated.\n        LOG.warn(\"These favored nodes were specified but not chosen: \"\n            + favoredSet + \" Specified favored nodes: \"\n            + Arrays.toString(favoredNodes));\n\n      }\n      return pinnings;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DataStreamer.java",
      "extendedDetails": {}
    },
    "6ee0539ede78b640f01c5eac18ded161182a7835": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HDFS-9170. Move libhdfs / fuse-dfs / libwebhdfs to hdfs-client. Contributed by Haohui Mai.\"\n\nThis reverts commit d5a9a3daa0224249221ffa7b8bd5751ab2feca56.\n",
      "commitDate": "29/09/15 5:51 PM",
      "commitName": "6ee0539ede78b640f01c5eac18ded161182a7835",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "29/09/15 5:48 PM",
      "commitNameOld": "d5a9a3daa0224249221ffa7b8bd5751ab2feca56",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,24 @@\n   private boolean[] getPinnings(DatanodeInfo[] nodes, boolean shouldLog) {\n     if (favoredNodes \u003d\u003d null) {\n       return null;\n     } else {\n       boolean[] pinnings \u003d new boolean[nodes.length];\n       HashSet\u003cString\u003e favoredSet \u003d\n           new HashSet\u003cString\u003e(Arrays.asList(favoredNodes));\n       for (int i \u003d 0; i \u003c nodes.length; i++) {\n         pinnings[i] \u003d favoredSet.remove(nodes[i].getXferAddrWithHostname());\n-        LOG.debug(\"{} was chosen by name node (favored\u003d{}).\",\n-            nodes[i].getXferAddrWithHostname(), pinnings[i]);\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(nodes[i].getXferAddrWithHostname() +\n+              \" was chosen by name node (favored\u003d\" + pinnings[i] + \").\");\n+        }\n       }\n       if (shouldLog \u0026\u0026 !favoredSet.isEmpty()) {\n         // There is one or more favored nodes that were not allocated.\n         LOG.warn(\"These favored nodes were specified but not chosen: \"\n             + favoredSet + \" Specified favored nodes: \"\n             + Arrays.toString(favoredNodes));\n \n       }\n       return pinnings;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean[] getPinnings(DatanodeInfo[] nodes, boolean shouldLog) {\n    if (favoredNodes \u003d\u003d null) {\n      return null;\n    } else {\n      boolean[] pinnings \u003d new boolean[nodes.length];\n      HashSet\u003cString\u003e favoredSet \u003d\n          new HashSet\u003cString\u003e(Arrays.asList(favoredNodes));\n      for (int i \u003d 0; i \u003c nodes.length; i++) {\n        pinnings[i] \u003d favoredSet.remove(nodes[i].getXferAddrWithHostname());\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(nodes[i].getXferAddrWithHostname() +\n              \" was chosen by name node (favored\u003d\" + pinnings[i] + \").\");\n        }\n      }\n      if (shouldLog \u0026\u0026 !favoredSet.isEmpty()) {\n        // There is one or more favored nodes that were not allocated.\n        LOG.warn(\"These favored nodes were specified but not chosen: \"\n            + favoredSet + \" Specified favored nodes: \"\n            + Arrays.toString(favoredNodes));\n\n      }\n      return pinnings;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DataStreamer.java",
      "extendedDetails": {}
    },
    "d5a9a3daa0224249221ffa7b8bd5751ab2feca56": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9170. Move libhdfs / fuse-dfs / libwebhdfs to hdfs-client. Contributed by Haohui Mai.\n",
      "commitDate": "29/09/15 5:48 PM",
      "commitName": "d5a9a3daa0224249221ffa7b8bd5751ab2feca56",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "28/09/15 11:29 AM",
      "commitNameOld": "4c9497cbf02ecc82532a4e79e18912d8e0eb4731",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 1.26,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,22 @@\n   private boolean[] getPinnings(DatanodeInfo[] nodes, boolean shouldLog) {\n     if (favoredNodes \u003d\u003d null) {\n       return null;\n     } else {\n       boolean[] pinnings \u003d new boolean[nodes.length];\n       HashSet\u003cString\u003e favoredSet \u003d\n           new HashSet\u003cString\u003e(Arrays.asList(favoredNodes));\n       for (int i \u003d 0; i \u003c nodes.length; i++) {\n         pinnings[i] \u003d favoredSet.remove(nodes[i].getXferAddrWithHostname());\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(nodes[i].getXferAddrWithHostname() +\n-              \" was chosen by name node (favored\u003d\" + pinnings[i] + \").\");\n-        }\n+        LOG.debug(\"{} was chosen by name node (favored\u003d{}).\",\n+            nodes[i].getXferAddrWithHostname(), pinnings[i]);\n       }\n       if (shouldLog \u0026\u0026 !favoredSet.isEmpty()) {\n         // There is one or more favored nodes that were not allocated.\n         LOG.warn(\"These favored nodes were specified but not chosen: \"\n             + favoredSet + \" Specified favored nodes: \"\n             + Arrays.toString(favoredNodes));\n \n       }\n       return pinnings;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean[] getPinnings(DatanodeInfo[] nodes, boolean shouldLog) {\n    if (favoredNodes \u003d\u003d null) {\n      return null;\n    } else {\n      boolean[] pinnings \u003d new boolean[nodes.length];\n      HashSet\u003cString\u003e favoredSet \u003d\n          new HashSet\u003cString\u003e(Arrays.asList(favoredNodes));\n      for (int i \u003d 0; i \u003c nodes.length; i++) {\n        pinnings[i] \u003d favoredSet.remove(nodes[i].getXferAddrWithHostname());\n        LOG.debug(\"{} was chosen by name node (favored\u003d{}).\",\n            nodes[i].getXferAddrWithHostname(), pinnings[i]);\n      }\n      if (shouldLog \u0026\u0026 !favoredSet.isEmpty()) {\n        // There is one or more favored nodes that were not allocated.\n        LOG.warn(\"These favored nodes were specified but not chosen: \"\n            + favoredSet + \" Specified favored nodes: \"\n            + Arrays.toString(favoredNodes));\n\n      }\n      return pinnings;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DataStreamer.java",
      "extendedDetails": {}
    },
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8053. Move DFSIn/OutputStream and related classes to hadoop-hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "26/09/15 11:08 AM",
      "commitName": "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "26/09/15 9:06 AM",
      "commitNameOld": "861b52db242f238d7e36ad75c158025be959a696",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private boolean[] getPinnings(DatanodeInfo[] nodes, boolean shouldLog) {\n    if (favoredNodes \u003d\u003d null) {\n      return null;\n    } else {\n      boolean[] pinnings \u003d new boolean[nodes.length];\n      HashSet\u003cString\u003e favoredSet \u003d\n          new HashSet\u003cString\u003e(Arrays.asList(favoredNodes));\n      for (int i \u003d 0; i \u003c nodes.length; i++) {\n        pinnings[i] \u003d favoredSet.remove(nodes[i].getXferAddrWithHostname());\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(nodes[i].getXferAddrWithHostname() +\n              \" was chosen by name node (favored\u003d\" + pinnings[i] + \").\");\n        }\n      }\n      if (shouldLog \u0026\u0026 !favoredSet.isEmpty()) {\n        // There is one or more favored nodes that were not allocated.\n        LOG.warn(\"These favored nodes were specified but not chosen: \"\n            + favoredSet + \" Specified favored nodes: \"\n            + Arrays.toString(favoredNodes));\n\n      }\n      return pinnings;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DataStreamer.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DataStreamer.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DataStreamer.java"
      }
    },
    "7947e5b53b9ac9524b535b0384c1c355b74723ff": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8283. DataStreamer cleanup and some minor improvement. Contributed by Tsz Wo Nicholas Sze.\n",
      "commitDate": "29/04/15 10:41 AM",
      "commitName": "7947e5b53b9ac9524b535b0384c1c355b74723ff",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "24/04/15 12:21 AM",
      "commitNameOld": "c8d72907ff5a4cb9ce1effca8ad9b69689d11d1d",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 5.43,
      "commitsBetweenForRepo": 43,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,24 @@\n   private boolean[] getPinnings(DatanodeInfo[] nodes, boolean shouldLog) {\n     if (favoredNodes \u003d\u003d null) {\n       return null;\n     } else {\n       boolean[] pinnings \u003d new boolean[nodes.length];\n       HashSet\u003cString\u003e favoredSet \u003d\n           new HashSet\u003cString\u003e(Arrays.asList(favoredNodes));\n       for (int i \u003d 0; i \u003c nodes.length; i++) {\n         pinnings[i] \u003d favoredSet.remove(nodes[i].getXferAddrWithHostname());\n-        if (DFSClient.LOG.isDebugEnabled()) {\n-          DFSClient.LOG.debug(nodes[i].getXferAddrWithHostname() +\n-              \" was chosen by name node (favored\u003d\" + pinnings[i] +\n-              \").\");\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(nodes[i].getXferAddrWithHostname() +\n+              \" was chosen by name node (favored\u003d\" + pinnings[i] + \").\");\n         }\n       }\n       if (shouldLog \u0026\u0026 !favoredSet.isEmpty()) {\n         // There is one or more favored nodes that were not allocated.\n-        DFSClient.LOG.warn(\n-            \"These favored nodes were specified but not chosen: \" +\n-                favoredSet +\n-                \" Specified favored nodes: \" + Arrays.toString(favoredNodes));\n+        LOG.warn(\"These favored nodes were specified but not chosen: \"\n+            + favoredSet + \" Specified favored nodes: \"\n+            + Arrays.toString(favoredNodes));\n \n       }\n       return pinnings;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean[] getPinnings(DatanodeInfo[] nodes, boolean shouldLog) {\n    if (favoredNodes \u003d\u003d null) {\n      return null;\n    } else {\n      boolean[] pinnings \u003d new boolean[nodes.length];\n      HashSet\u003cString\u003e favoredSet \u003d\n          new HashSet\u003cString\u003e(Arrays.asList(favoredNodes));\n      for (int i \u003d 0; i \u003c nodes.length; i++) {\n        pinnings[i] \u003d favoredSet.remove(nodes[i].getXferAddrWithHostname());\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(nodes[i].getXferAddrWithHostname() +\n              \" was chosen by name node (favored\u003d\" + pinnings[i] + \").\");\n        }\n      }\n      if (shouldLog \u0026\u0026 !favoredSet.isEmpty()) {\n        // There is one or more favored nodes that were not allocated.\n        LOG.warn(\"These favored nodes were specified but not chosen: \"\n            + favoredSet + \" Specified favored nodes: \"\n            + Arrays.toString(favoredNodes));\n\n      }\n      return pinnings;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DataStreamer.java",
      "extendedDetails": {}
    },
    "a16bfff71bd7f00e06e1f59bfe5445a154bb8c66": {
      "type": "Ymovefromfile",
      "commitMessage": "HDFS-7854. Separate class DataStreamer out of DFSOutputStream. Contributed by Li Bo.\n",
      "commitDate": "24/03/15 11:06 AM",
      "commitName": "a16bfff71bd7f00e06e1f59bfe5445a154bb8c66",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "24/03/15 10:49 AM",
      "commitNameOld": "570a83ae80faf2076966acf30588733803327844",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n-    private boolean[] getPinnings(DatanodeInfo[] nodes, boolean shouldLog) {\n-      if (favoredNodes \u003d\u003d null) {\n-        return null;\n-      } else {\n-        boolean[] pinnings \u003d new boolean[nodes.length];\n-        HashSet\u003cString\u003e favoredSet \u003d\n-            new HashSet\u003cString\u003e(Arrays.asList(favoredNodes));\n-        for (int i \u003d 0; i \u003c nodes.length; i++) {\n-          pinnings[i] \u003d favoredSet.remove(nodes[i].getXferAddrWithHostname());\n-          if (DFSClient.LOG.isDebugEnabled()) {\n-            DFSClient.LOG.debug(nodes[i].getXferAddrWithHostname() +\n-                \" was chosen by name node (favored\u003d\" + pinnings[i] +\n-                \").\");\n-          }\n+  private boolean[] getPinnings(DatanodeInfo[] nodes, boolean shouldLog) {\n+    if (favoredNodes \u003d\u003d null) {\n+      return null;\n+    } else {\n+      boolean[] pinnings \u003d new boolean[nodes.length];\n+      HashSet\u003cString\u003e favoredSet \u003d\n+          new HashSet\u003cString\u003e(Arrays.asList(favoredNodes));\n+      for (int i \u003d 0; i \u003c nodes.length; i++) {\n+        pinnings[i] \u003d favoredSet.remove(nodes[i].getXferAddrWithHostname());\n+        if (DFSClient.LOG.isDebugEnabled()) {\n+          DFSClient.LOG.debug(nodes[i].getXferAddrWithHostname() +\n+              \" was chosen by name node (favored\u003d\" + pinnings[i] +\n+              \").\");\n         }\n-        if (shouldLog \u0026\u0026 !favoredSet.isEmpty()) {\n-          // There is one or more favored nodes that were not allocated.\n-          DFSClient.LOG.warn(\n-              \"These favored nodes were specified but not chosen: \" +\n-              favoredSet +\n-              \" Specified favored nodes: \" + Arrays.toString(favoredNodes));\n-\n-        }\n-        return pinnings;\n       }\n-    }\n\\ No newline at end of file\n+      if (shouldLog \u0026\u0026 !favoredSet.isEmpty()) {\n+        // There is one or more favored nodes that were not allocated.\n+        DFSClient.LOG.warn(\n+            \"These favored nodes were specified but not chosen: \" +\n+                favoredSet +\n+                \" Specified favored nodes: \" + Arrays.toString(favoredNodes));\n+\n+      }\n+      return pinnings;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean[] getPinnings(DatanodeInfo[] nodes, boolean shouldLog) {\n    if (favoredNodes \u003d\u003d null) {\n      return null;\n    } else {\n      boolean[] pinnings \u003d new boolean[nodes.length];\n      HashSet\u003cString\u003e favoredSet \u003d\n          new HashSet\u003cString\u003e(Arrays.asList(favoredNodes));\n      for (int i \u003d 0; i \u003c nodes.length; i++) {\n        pinnings[i] \u003d favoredSet.remove(nodes[i].getXferAddrWithHostname());\n        if (DFSClient.LOG.isDebugEnabled()) {\n          DFSClient.LOG.debug(nodes[i].getXferAddrWithHostname() +\n              \" was chosen by name node (favored\u003d\" + pinnings[i] +\n              \").\");\n        }\n      }\n      if (shouldLog \u0026\u0026 !favoredSet.isEmpty()) {\n        // There is one or more favored nodes that were not allocated.\n        DFSClient.LOG.warn(\n            \"These favored nodes were specified but not chosen: \" +\n                favoredSet +\n                \" Specified favored nodes: \" + Arrays.toString(favoredNodes));\n\n      }\n      return pinnings;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DataStreamer.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSOutputStream.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DataStreamer.java",
        "oldMethodName": "getPinnings",
        "newMethodName": "getPinnings"
      }
    },
    "db6606223ca2e17aa7e1b2e2be13c1a19d8e7465": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-7795. Show warning if not all favored nodes were chosen by namenode. Contributed by Kihwal Lee.\n",
      "commitDate": "17/02/15 11:05 AM",
      "commitName": "db6606223ca2e17aa7e1b2e2be13c1a19d8e7465",
      "commitAuthor": "Kihwal Lee",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7795. Show warning if not all favored nodes were chosen by namenode. Contributed by Kihwal Lee.\n",
          "commitDate": "17/02/15 11:05 AM",
          "commitName": "db6606223ca2e17aa7e1b2e2be13c1a19d8e7465",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "11/02/15 11:08 PM",
          "commitNameOld": "89a544928083501625bc69f96b530040228f0a5f",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 5.5,
          "commitsBetweenForRepo": 69,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,26 @@\n-    private boolean[] getPinnings(DatanodeInfo[] nodes) {\n+    private boolean[] getPinnings(DatanodeInfo[] nodes, boolean shouldLog) {\n       if (favoredNodes \u003d\u003d null) {\n         return null;\n       } else {\n         boolean[] pinnings \u003d new boolean[nodes.length];\n+        HashSet\u003cString\u003e favoredSet \u003d\n+            new HashSet\u003cString\u003e(Arrays.asList(favoredNodes));\n         for (int i \u003d 0; i \u003c nodes.length; i++) {\n-          pinnings[i] \u003d false;\n-          for (int j \u003d 0; j \u003c favoredNodes.length; j++) {\n-            if (nodes[i].getXferAddrWithHostname().equals(favoredNodes[j])) {\n-              pinnings[i] \u003d true;\n-              break;\n-            }\n+          pinnings[i] \u003d favoredSet.remove(nodes[i].getXferAddrWithHostname());\n+          if (DFSClient.LOG.isDebugEnabled()) {\n+            DFSClient.LOG.debug(nodes[i].getXferAddrWithHostname() +\n+                \" was chosen by name node (favored\u003d\" + pinnings[i] +\n+                \").\");\n           }\n         }\n+        if (shouldLog \u0026\u0026 !favoredSet.isEmpty()) {\n+          // There is one or more favored nodes that were not allocated.\n+          DFSClient.LOG.warn(\n+              \"These favored nodes were specified but not chosen: \" +\n+              favoredSet +\n+              \" Specified favored nodes: \" + Arrays.toString(favoredNodes));\n+\n+        }\n         return pinnings;\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private boolean[] getPinnings(DatanodeInfo[] nodes, boolean shouldLog) {\n      if (favoredNodes \u003d\u003d null) {\n        return null;\n      } else {\n        boolean[] pinnings \u003d new boolean[nodes.length];\n        HashSet\u003cString\u003e favoredSet \u003d\n            new HashSet\u003cString\u003e(Arrays.asList(favoredNodes));\n        for (int i \u003d 0; i \u003c nodes.length; i++) {\n          pinnings[i] \u003d favoredSet.remove(nodes[i].getXferAddrWithHostname());\n          if (DFSClient.LOG.isDebugEnabled()) {\n            DFSClient.LOG.debug(nodes[i].getXferAddrWithHostname() +\n                \" was chosen by name node (favored\u003d\" + pinnings[i] +\n                \").\");\n          }\n        }\n        if (shouldLog \u0026\u0026 !favoredSet.isEmpty()) {\n          // There is one or more favored nodes that were not allocated.\n          DFSClient.LOG.warn(\n              \"These favored nodes were specified but not chosen: \" +\n              favoredSet +\n              \" Specified favored nodes: \" + Arrays.toString(favoredNodes));\n\n        }\n        return pinnings;\n      }\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSOutputStream.java",
          "extendedDetails": {
            "oldValue": "[nodes-DatanodeInfo[]]",
            "newValue": "[nodes-DatanodeInfo[], shouldLog-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7795. Show warning if not all favored nodes were chosen by namenode. Contributed by Kihwal Lee.\n",
          "commitDate": "17/02/15 11:05 AM",
          "commitName": "db6606223ca2e17aa7e1b2e2be13c1a19d8e7465",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "11/02/15 11:08 PM",
          "commitNameOld": "89a544928083501625bc69f96b530040228f0a5f",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 5.5,
          "commitsBetweenForRepo": 69,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,26 @@\n-    private boolean[] getPinnings(DatanodeInfo[] nodes) {\n+    private boolean[] getPinnings(DatanodeInfo[] nodes, boolean shouldLog) {\n       if (favoredNodes \u003d\u003d null) {\n         return null;\n       } else {\n         boolean[] pinnings \u003d new boolean[nodes.length];\n+        HashSet\u003cString\u003e favoredSet \u003d\n+            new HashSet\u003cString\u003e(Arrays.asList(favoredNodes));\n         for (int i \u003d 0; i \u003c nodes.length; i++) {\n-          pinnings[i] \u003d false;\n-          for (int j \u003d 0; j \u003c favoredNodes.length; j++) {\n-            if (nodes[i].getXferAddrWithHostname().equals(favoredNodes[j])) {\n-              pinnings[i] \u003d true;\n-              break;\n-            }\n+          pinnings[i] \u003d favoredSet.remove(nodes[i].getXferAddrWithHostname());\n+          if (DFSClient.LOG.isDebugEnabled()) {\n+            DFSClient.LOG.debug(nodes[i].getXferAddrWithHostname() +\n+                \" was chosen by name node (favored\u003d\" + pinnings[i] +\n+                \").\");\n           }\n         }\n+        if (shouldLog \u0026\u0026 !favoredSet.isEmpty()) {\n+          // There is one or more favored nodes that were not allocated.\n+          DFSClient.LOG.warn(\n+              \"These favored nodes were specified but not chosen: \" +\n+              favoredSet +\n+              \" Specified favored nodes: \" + Arrays.toString(favoredNodes));\n+\n+        }\n         return pinnings;\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private boolean[] getPinnings(DatanodeInfo[] nodes, boolean shouldLog) {\n      if (favoredNodes \u003d\u003d null) {\n        return null;\n      } else {\n        boolean[] pinnings \u003d new boolean[nodes.length];\n        HashSet\u003cString\u003e favoredSet \u003d\n            new HashSet\u003cString\u003e(Arrays.asList(favoredNodes));\n        for (int i \u003d 0; i \u003c nodes.length; i++) {\n          pinnings[i] \u003d favoredSet.remove(nodes[i].getXferAddrWithHostname());\n          if (DFSClient.LOG.isDebugEnabled()) {\n            DFSClient.LOG.debug(nodes[i].getXferAddrWithHostname() +\n                \" was chosen by name node (favored\u003d\" + pinnings[i] +\n                \").\");\n          }\n        }\n        if (shouldLog \u0026\u0026 !favoredSet.isEmpty()) {\n          // There is one or more favored nodes that were not allocated.\n          DFSClient.LOG.warn(\n              \"These favored nodes were specified but not chosen: \" +\n              favoredSet +\n              \" Specified favored nodes: \" + Arrays.toString(favoredNodes));\n\n        }\n        return pinnings;\n      }\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSOutputStream.java",
          "extendedDetails": {}
        }
      ]
    },
    "085b1e293ff53f7a86aa21406cfd4bfa0f3bf33b": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-6133. Add a feature for replica pinning so that a pinned replica will not be moved by Balancer/Mover.  Contributed by zhaoyunjiong\n",
      "commitDate": "11/02/15 3:12 PM",
      "commitName": "085b1e293ff53f7a86aa21406cfd4bfa0f3bf33b",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "diff": "@@ -0,0 +1,17 @@\n+    private boolean[] getPinnings(DatanodeInfo[] nodes) {\n+      if (favoredNodes \u003d\u003d null) {\n+        return null;\n+      } else {\n+        boolean[] pinnings \u003d new boolean[nodes.length];\n+        for (int i \u003d 0; i \u003c nodes.length; i++) {\n+          pinnings[i] \u003d false;\n+          for (int j \u003d 0; j \u003c favoredNodes.length; j++) {\n+            if (nodes[i].getXferAddrWithHostname().equals(favoredNodes[j])) {\n+              pinnings[i] \u003d true;\n+              break;\n+            }\n+          }\n+        }\n+        return pinnings;\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean[] getPinnings(DatanodeInfo[] nodes) {\n      if (favoredNodes \u003d\u003d null) {\n        return null;\n      } else {\n        boolean[] pinnings \u003d new boolean[nodes.length];\n        for (int i \u003d 0; i \u003c nodes.length; i++) {\n          pinnings[i] \u003d false;\n          for (int j \u003d 0; j \u003c favoredNodes.length; j++) {\n            if (nodes[i].getXferAddrWithHostname().equals(favoredNodes[j])) {\n              pinnings[i] \u003d true;\n              break;\n            }\n          }\n        }\n        return pinnings;\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSOutputStream.java"
    }
  }
}