{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "YarnClientImpl.java",
  "functionName": "killApplication",
  "functionId": "killApplication___applicationId-ApplicationId__diagnostics-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/YarnClientImpl.java",
  "functionStartLine": 485,
  "functionEndLine": 527,
  "numCommitsSeen": 70,
  "timeTaken": 1853,
  "changeHistory": [
    "e4e72db5f9f305b493138ab36f073fe5d1750ad8",
    "d0372dc613136910160e9d42bd5eaa0d4bde2356"
  ],
  "changeHistoryShort": {
    "e4e72db5f9f305b493138ab36f073fe5d1750ad8": "Ybodychange",
    "d0372dc613136910160e9d42bd5eaa0d4bde2356": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e4e72db5f9f305b493138ab36f073fe5d1750ad8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3877. YarnClientImpl.submitApplication swallows exceptions. Contributed by Varun Saxena\n",
      "commitDate": "25/09/16 5:06 AM",
      "commitName": "e4e72db5f9f305b493138ab36f073fe5d1750ad8",
      "commitAuthor": "Naganarasimha",
      "commitDateOld": "22/09/16 6:00 PM",
      "commitNameOld": "d0372dc613136910160e9d42bd5eaa0d4bde2356",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 2.46,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,43 @@\n   public void killApplication(ApplicationId applicationId, String diagnostics)\n       throws YarnException, IOException {\n \n     KillApplicationRequest request \u003d\n         Records.newRecord(KillApplicationRequest.class);\n     request.setApplicationId(applicationId);\n \n     if (diagnostics !\u003d null) {\n       request.setDiagnostics(diagnostics);\n     }\n \n     try {\n       int pollCount \u003d 0;\n       long startTime \u003d System.currentTimeMillis();\n \n       while (true) {\n         KillApplicationResponse response \u003d\n             rmClient.forceKillApplication(request);\n         if (response.getIsKillCompleted()) {\n           LOG.info(\"Killed application \" + applicationId);\n           break;\n         }\n \n         long elapsedMillis \u003d System.currentTimeMillis() - startTime;\n         if (enforceAsyncAPITimeout()\n             \u0026\u0026 elapsedMillis \u003e\u003d this.asyncApiPollTimeoutMillis) {\n           throw new YarnException(\"Timed out while waiting for application \"\n               + applicationId + \" to be killed.\");\n         }\n \n         if (++pollCount % 10 \u003d\u003d 0) {\n           LOG.info(\n               \"Waiting for application \" + applicationId + \" to be killed.\");\n         }\n         Thread.sleep(asyncApiPollIntervalMillis);\n       }\n     } catch (InterruptedException e) {\n-      LOG.error(\"Interrupted while waiting for application \" + applicationId\n-          + \" to be killed.\");\n+      String msg \u003d \"Interrupted while waiting for application \"\n+          + applicationId + \" to be killed.\";\n+      LOG.error(msg);\n+      throw new YarnException(msg, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void killApplication(ApplicationId applicationId, String diagnostics)\n      throws YarnException, IOException {\n\n    KillApplicationRequest request \u003d\n        Records.newRecord(KillApplicationRequest.class);\n    request.setApplicationId(applicationId);\n\n    if (diagnostics !\u003d null) {\n      request.setDiagnostics(diagnostics);\n    }\n\n    try {\n      int pollCount \u003d 0;\n      long startTime \u003d System.currentTimeMillis();\n\n      while (true) {\n        KillApplicationResponse response \u003d\n            rmClient.forceKillApplication(request);\n        if (response.getIsKillCompleted()) {\n          LOG.info(\"Killed application \" + applicationId);\n          break;\n        }\n\n        long elapsedMillis \u003d System.currentTimeMillis() - startTime;\n        if (enforceAsyncAPITimeout()\n            \u0026\u0026 elapsedMillis \u003e\u003d this.asyncApiPollTimeoutMillis) {\n          throw new YarnException(\"Timed out while waiting for application \"\n              + applicationId + \" to be killed.\");\n        }\n\n        if (++pollCount % 10 \u003d\u003d 0) {\n          LOG.info(\n              \"Waiting for application \" + applicationId + \" to be killed.\");\n        }\n        Thread.sleep(asyncApiPollIntervalMillis);\n      }\n    } catch (InterruptedException e) {\n      String msg \u003d \"Interrupted while waiting for application \"\n          + applicationId + \" to be killed.\";\n      LOG.error(msg);\n      throw new YarnException(msg, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/YarnClientImpl.java",
      "extendedDetails": {}
    },
    "d0372dc613136910160e9d42bd5eaa0d4bde2356": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3692. Allow REST API to set a user generated message when killing an application. Contributed by Rohith Sharma K S\n",
      "commitDate": "22/09/16 6:00 PM",
      "commitName": "d0372dc613136910160e9d42bd5eaa0d4bde2356",
      "commitAuthor": "Naganarasimha",
      "diff": "@@ -0,0 +1,41 @@\n+  public void killApplication(ApplicationId applicationId, String diagnostics)\n+      throws YarnException, IOException {\n+\n+    KillApplicationRequest request \u003d\n+        Records.newRecord(KillApplicationRequest.class);\n+    request.setApplicationId(applicationId);\n+\n+    if (diagnostics !\u003d null) {\n+      request.setDiagnostics(diagnostics);\n+    }\n+\n+    try {\n+      int pollCount \u003d 0;\n+      long startTime \u003d System.currentTimeMillis();\n+\n+      while (true) {\n+        KillApplicationResponse response \u003d\n+            rmClient.forceKillApplication(request);\n+        if (response.getIsKillCompleted()) {\n+          LOG.info(\"Killed application \" + applicationId);\n+          break;\n+        }\n+\n+        long elapsedMillis \u003d System.currentTimeMillis() - startTime;\n+        if (enforceAsyncAPITimeout()\n+            \u0026\u0026 elapsedMillis \u003e\u003d this.asyncApiPollTimeoutMillis) {\n+          throw new YarnException(\"Timed out while waiting for application \"\n+              + applicationId + \" to be killed.\");\n+        }\n+\n+        if (++pollCount % 10 \u003d\u003d 0) {\n+          LOG.info(\n+              \"Waiting for application \" + applicationId + \" to be killed.\");\n+        }\n+        Thread.sleep(asyncApiPollIntervalMillis);\n+      }\n+    } catch (InterruptedException e) {\n+      LOG.error(\"Interrupted while waiting for application \" + applicationId\n+          + \" to be killed.\");\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void killApplication(ApplicationId applicationId, String diagnostics)\n      throws YarnException, IOException {\n\n    KillApplicationRequest request \u003d\n        Records.newRecord(KillApplicationRequest.class);\n    request.setApplicationId(applicationId);\n\n    if (diagnostics !\u003d null) {\n      request.setDiagnostics(diagnostics);\n    }\n\n    try {\n      int pollCount \u003d 0;\n      long startTime \u003d System.currentTimeMillis();\n\n      while (true) {\n        KillApplicationResponse response \u003d\n            rmClient.forceKillApplication(request);\n        if (response.getIsKillCompleted()) {\n          LOG.info(\"Killed application \" + applicationId);\n          break;\n        }\n\n        long elapsedMillis \u003d System.currentTimeMillis() - startTime;\n        if (enforceAsyncAPITimeout()\n            \u0026\u0026 elapsedMillis \u003e\u003d this.asyncApiPollTimeoutMillis) {\n          throw new YarnException(\"Timed out while waiting for application \"\n              + applicationId + \" to be killed.\");\n        }\n\n        if (++pollCount % 10 \u003d\u003d 0) {\n          LOG.info(\n              \"Waiting for application \" + applicationId + \" to be killed.\");\n        }\n        Thread.sleep(asyncApiPollIntervalMillis);\n      }\n    } catch (InterruptedException e) {\n      LOG.error(\"Interrupted while waiting for application \" + applicationId\n          + \" to be killed.\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/YarnClientImpl.java"
    }
  }
}