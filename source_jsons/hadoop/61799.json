{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ProcfsBasedProcessTree.java",
  "functionName": "getSmapBasedRssMemorySize",
  "functionId": "getSmapBasedRssMemorySize___olderThanAge-int",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/ProcfsBasedProcessTree.java",
  "functionStartLine": 382,
  "functionEndLine": 419,
  "numCommitsSeen": 41,
  "timeTaken": 4301,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "bd8d299ded742813cabd4b4e7ce1e33e0d1f9509",
    "626b5103d44692adf3882af61bdafa40114c44f7",
    "ecb51b857ac7faceff981b2b6f22ea1af0d42ab1",
    "7610925e90155dfe5edce05da31574e4fb81b948",
    "c358368f511963ad8e35f030b9babee541e1bd01",
    "06579878dfca0b634aaecfe63bb90c46113b3037"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "bd8d299ded742813cabd4b4e7ce1e33e0d1f9509": "Ybodychange",
    "626b5103d44692adf3882af61bdafa40114c44f7": "Ybodychange",
    "ecb51b857ac7faceff981b2b6f22ea1af0d42ab1": "Ybodychange",
    "7610925e90155dfe5edce05da31574e4fb81b948": "Ybodychange",
    "c358368f511963ad8e35f030b9babee541e1bd01": "Ymultichange(Yrename,Ybodychange)",
    "06579878dfca0b634aaecfe63bb90c46113b3037": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "03/03/19 11:59 PM",
      "commitNameOld": "bd8d299ded742813cabd4b4e7ce1e33e0d1f9509",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 11.64,
      "commitsBetweenForRepo": 118,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,38 @@\n   private long getSmapBasedRssMemorySize(int olderThanAge) {\n     long total \u003d UNAVAILABLE;\n     for (ProcessInfo p : processTree.values()) {\n       if (p !\u003d null) {\n         // set resource to 0 instead of UNAVAILABLE\n         if (total \u003d\u003d UNAVAILABLE){\n           total \u003d 0;\n         }\n         if (p.getAge() \u003e olderThanAge) {\n           ProcessTreeSmapMemInfo procMemInfo \u003d processSMAPTree.get(p.getPid());\n           if (procMemInfo !\u003d null) {\n             for (ProcessSmapMemoryInfo info : procMemInfo.getMemoryInfoList()) {\n               // Do not account for r--s or r-xs mappings\n               if (info.getPermission().trim()\n                 .equalsIgnoreCase(READ_ONLY_WITH_SHARED_PERMISSION)\n                   || info.getPermission().trim()\n                     .equalsIgnoreCase(READ_EXECUTE_WITH_SHARED_PERMISSION)) {\n                 continue;\n               }\n \n               // Account for anonymous to know the amount of\n               // memory reclaimable by killing the process\n               total +\u003d info.anonymous;\n \n-              if (LOG.isDebugEnabled()) {\n-                LOG.debug(\" total(\" + olderThanAge + \"): PID : \" + p.getPid()\n-                    + \", info : \" + info.toString()\n-                    + \", total : \" + (total * KB_TO_BYTES));\n-              }\n+              LOG.debug(\" total({}): PID : {}, info : {}, total : {}\",\n+                  olderThanAge, p.getPid(), info, (total * KB_TO_BYTES));\n             }\n-            LOG.debug(procMemInfo.toString());\n+            LOG.debug(\"{}\", procMemInfo);\n           }\n         }\n       }\n     }\n     if (total \u003e 0) {\n       total *\u003d KB_TO_BYTES; // convert to bytes\n     }\n     LOG.info(\"SmapBasedCumulativeRssmem (bytes) : \" + total);\n     return total; // size\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private long getSmapBasedRssMemorySize(int olderThanAge) {\n    long total \u003d UNAVAILABLE;\n    for (ProcessInfo p : processTree.values()) {\n      if (p !\u003d null) {\n        // set resource to 0 instead of UNAVAILABLE\n        if (total \u003d\u003d UNAVAILABLE){\n          total \u003d 0;\n        }\n        if (p.getAge() \u003e olderThanAge) {\n          ProcessTreeSmapMemInfo procMemInfo \u003d processSMAPTree.get(p.getPid());\n          if (procMemInfo !\u003d null) {\n            for (ProcessSmapMemoryInfo info : procMemInfo.getMemoryInfoList()) {\n              // Do not account for r--s or r-xs mappings\n              if (info.getPermission().trim()\n                .equalsIgnoreCase(READ_ONLY_WITH_SHARED_PERMISSION)\n                  || info.getPermission().trim()\n                    .equalsIgnoreCase(READ_EXECUTE_WITH_SHARED_PERMISSION)) {\n                continue;\n              }\n\n              // Account for anonymous to know the amount of\n              // memory reclaimable by killing the process\n              total +\u003d info.anonymous;\n\n              LOG.debug(\" total({}): PID : {}, info : {}, total : {}\",\n                  olderThanAge, p.getPid(), info, (total * KB_TO_BYTES));\n            }\n            LOG.debug(\"{}\", procMemInfo);\n          }\n        }\n      }\n    }\n    if (total \u003e 0) {\n      total *\u003d KB_TO_BYTES; // convert to bytes\n    }\n    LOG.info(\"SmapBasedCumulativeRssmem (bytes) : \" + total);\n    return total; // size\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/ProcfsBasedProcessTree.java",
      "extendedDetails": {}
    },
    "bd8d299ded742813cabd4b4e7ce1e33e0d1f9509": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7477. Moving logging APIs over to slf4j in hadoop-yarn-common. Contributed by Prabhu Joseph.\n",
      "commitDate": "03/03/19 11:59 PM",
      "commitName": "bd8d299ded742813cabd4b4e7ce1e33e0d1f9509",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "25/02/19 11:45 AM",
      "commitNameOld": "95372657fc25c02399b01793833021ccf88dada2",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 6.51,
      "commitsBetweenForRepo": 56,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n   private long getSmapBasedRssMemorySize(int olderThanAge) {\n     long total \u003d UNAVAILABLE;\n     for (ProcessInfo p : processTree.values()) {\n       if (p !\u003d null) {\n         // set resource to 0 instead of UNAVAILABLE\n         if (total \u003d\u003d UNAVAILABLE){\n           total \u003d 0;\n         }\n         if (p.getAge() \u003e olderThanAge) {\n           ProcessTreeSmapMemInfo procMemInfo \u003d processSMAPTree.get(p.getPid());\n           if (procMemInfo !\u003d null) {\n             for (ProcessSmapMemoryInfo info : procMemInfo.getMemoryInfoList()) {\n               // Do not account for r--s or r-xs mappings\n               if (info.getPermission().trim()\n                 .equalsIgnoreCase(READ_ONLY_WITH_SHARED_PERMISSION)\n                   || info.getPermission().trim()\n                     .equalsIgnoreCase(READ_EXECUTE_WITH_SHARED_PERMISSION)) {\n                 continue;\n               }\n \n               // Account for anonymous to know the amount of\n               // memory reclaimable by killing the process\n               total +\u003d info.anonymous;\n \n               if (LOG.isDebugEnabled()) {\n                 LOG.debug(\" total(\" + olderThanAge + \"): PID : \" + p.getPid()\n                     + \", info : \" + info.toString()\n                     + \", total : \" + (total * KB_TO_BYTES));\n               }\n             }\n+            LOG.debug(procMemInfo.toString());\n           }\n-          LOG.debug(procMemInfo);\n         }\n       }\n     }\n     if (total \u003e 0) {\n       total *\u003d KB_TO_BYTES; // convert to bytes\n     }\n     LOG.info(\"SmapBasedCumulativeRssmem (bytes) : \" + total);\n     return total; // size\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private long getSmapBasedRssMemorySize(int olderThanAge) {\n    long total \u003d UNAVAILABLE;\n    for (ProcessInfo p : processTree.values()) {\n      if (p !\u003d null) {\n        // set resource to 0 instead of UNAVAILABLE\n        if (total \u003d\u003d UNAVAILABLE){\n          total \u003d 0;\n        }\n        if (p.getAge() \u003e olderThanAge) {\n          ProcessTreeSmapMemInfo procMemInfo \u003d processSMAPTree.get(p.getPid());\n          if (procMemInfo !\u003d null) {\n            for (ProcessSmapMemoryInfo info : procMemInfo.getMemoryInfoList()) {\n              // Do not account for r--s or r-xs mappings\n              if (info.getPermission().trim()\n                .equalsIgnoreCase(READ_ONLY_WITH_SHARED_PERMISSION)\n                  || info.getPermission().trim()\n                    .equalsIgnoreCase(READ_EXECUTE_WITH_SHARED_PERMISSION)) {\n                continue;\n              }\n\n              // Account for anonymous to know the amount of\n              // memory reclaimable by killing the process\n              total +\u003d info.anonymous;\n\n              if (LOG.isDebugEnabled()) {\n                LOG.debug(\" total(\" + olderThanAge + \"): PID : \" + p.getPid()\n                    + \", info : \" + info.toString()\n                    + \", total : \" + (total * KB_TO_BYTES));\n              }\n            }\n            LOG.debug(procMemInfo.toString());\n          }\n        }\n      }\n    }\n    if (total \u003e 0) {\n      total *\u003d KB_TO_BYTES; // convert to bytes\n    }\n    LOG.info(\"SmapBasedCumulativeRssmem (bytes) : \" + total);\n    return total; // size\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/ProcfsBasedProcessTree.java",
      "extendedDetails": {}
    },
    "626b5103d44692adf3882af61bdafa40114c44f7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7688. Miscellaneous Improvements To ProcfsBasedProcessTree. Contributed by BELUGA BEHR.\n",
      "commitDate": "02/01/18 5:39 PM",
      "commitName": "626b5103d44692adf3882af61bdafa40114c44f7",
      "commitAuthor": "Miklos Szegedi",
      "commitDateOld": "01/05/17 4:01 AM",
      "commitNameOld": "4b5bd73ac53f7de4899b5b70078249ad20216048",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 246.61,
      "commitsBetweenForRepo": 1710,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,41 @@\n   private long getSmapBasedRssMemorySize(int olderThanAge) {\n     long total \u003d UNAVAILABLE;\n     for (ProcessInfo p : processTree.values()) {\n       if (p !\u003d null) {\n         // set resource to 0 instead of UNAVAILABLE\n         if (total \u003d\u003d UNAVAILABLE){\n           total \u003d 0;\n         }\n         if (p.getAge() \u003e olderThanAge) {\n           ProcessTreeSmapMemInfo procMemInfo \u003d processSMAPTree.get(p.getPid());\n           if (procMemInfo !\u003d null) {\n             for (ProcessSmapMemoryInfo info : procMemInfo.getMemoryInfoList()) {\n               // Do not account for r--s or r-xs mappings\n               if (info.getPermission().trim()\n                 .equalsIgnoreCase(READ_ONLY_WITH_SHARED_PERMISSION)\n                   || info.getPermission().trim()\n                     .equalsIgnoreCase(READ_EXECUTE_WITH_SHARED_PERMISSION)) {\n                 continue;\n               }\n \n               // Account for anonymous to know the amount of\n               // memory reclaimable by killing the process\n               total +\u003d info.anonymous;\n \n               if (LOG.isDebugEnabled()) {\n                 LOG.debug(\" total(\" + olderThanAge + \"): PID : \" + p.getPid()\n                     + \", info : \" + info.toString()\n                     + \", total : \" + (total * KB_TO_BYTES));\n               }\n             }\n           }\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(procMemInfo.toString());\n-          }\n+          LOG.debug(procMemInfo);\n         }\n       }\n     }\n     if (total \u003e 0) {\n       total *\u003d KB_TO_BYTES; // convert to bytes\n     }\n     LOG.info(\"SmapBasedCumulativeRssmem (bytes) : \" + total);\n     return total; // size\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private long getSmapBasedRssMemorySize(int olderThanAge) {\n    long total \u003d UNAVAILABLE;\n    for (ProcessInfo p : processTree.values()) {\n      if (p !\u003d null) {\n        // set resource to 0 instead of UNAVAILABLE\n        if (total \u003d\u003d UNAVAILABLE){\n          total \u003d 0;\n        }\n        if (p.getAge() \u003e olderThanAge) {\n          ProcessTreeSmapMemInfo procMemInfo \u003d processSMAPTree.get(p.getPid());\n          if (procMemInfo !\u003d null) {\n            for (ProcessSmapMemoryInfo info : procMemInfo.getMemoryInfoList()) {\n              // Do not account for r--s or r-xs mappings\n              if (info.getPermission().trim()\n                .equalsIgnoreCase(READ_ONLY_WITH_SHARED_PERMISSION)\n                  || info.getPermission().trim()\n                    .equalsIgnoreCase(READ_EXECUTE_WITH_SHARED_PERMISSION)) {\n                continue;\n              }\n\n              // Account for anonymous to know the amount of\n              // memory reclaimable by killing the process\n              total +\u003d info.anonymous;\n\n              if (LOG.isDebugEnabled()) {\n                LOG.debug(\" total(\" + olderThanAge + \"): PID : \" + p.getPid()\n                    + \", info : \" + info.toString()\n                    + \", total : \" + (total * KB_TO_BYTES));\n              }\n            }\n          }\n          LOG.debug(procMemInfo);\n        }\n      }\n    }\n    if (total \u003e 0) {\n      total *\u003d KB_TO_BYTES; // convert to bytes\n    }\n    LOG.info(\"SmapBasedCumulativeRssmem (bytes) : \" + total);\n    return total; // size\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/ProcfsBasedProcessTree.java",
      "extendedDetails": {}
    },
    "ecb51b857ac7faceff981b2b6f22ea1af0d42ab1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5551. Ignore file backed pages from memory computation when smaps is enabled. Contributed by Rajesh Balamohan\n",
      "commitDate": "11/10/16 8:12 AM",
      "commitName": "ecb51b857ac7faceff981b2b6f22ea1af0d42ab1",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "08/06/16 5:11 PM",
      "commitNameOld": "1500a0a3009e453c9f05a93df7a78b4e185eef30",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 124.63,
      "commitsBetweenForRepo": 938,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,43 @@\n   private long getSmapBasedRssMemorySize(int olderThanAge) {\n     long total \u003d UNAVAILABLE;\n     for (ProcessInfo p : processTree.values()) {\n       if (p !\u003d null) {\n         // set resource to 0 instead of UNAVAILABLE\n         if (total \u003d\u003d UNAVAILABLE){\n           total \u003d 0;\n         }\n         if (p.getAge() \u003e olderThanAge) {\n           ProcessTreeSmapMemInfo procMemInfo \u003d processSMAPTree.get(p.getPid());\n           if (procMemInfo !\u003d null) {\n             for (ProcessSmapMemoryInfo info : procMemInfo.getMemoryInfoList()) {\n               // Do not account for r--s or r-xs mappings\n               if (info.getPermission().trim()\n                 .equalsIgnoreCase(READ_ONLY_WITH_SHARED_PERMISSION)\n                   || info.getPermission().trim()\n                     .equalsIgnoreCase(READ_EXECUTE_WITH_SHARED_PERMISSION)) {\n                 continue;\n               }\n \n-              total +\u003d\n-                  Math.min(info.sharedDirty, info.pss) + info.privateDirty\n-                      + info.privateClean;\n+              // Account for anonymous to know the amount of\n+              // memory reclaimable by killing the process\n+              total +\u003d info.anonymous;\n+\n               if (LOG.isDebugEnabled()) {\n                 LOG.debug(\" total(\" + olderThanAge + \"): PID : \" + p.getPid()\n-                    + \", SharedDirty : \" + info.sharedDirty + \", PSS : \"\n-                    + info.pss + \", Private_Dirty : \" + info.privateDirty\n-                    + \", Private_Clean : \" + info.privateClean + \", total : \"\n-                    + (total * KB_TO_BYTES));\n+                    + \", info : \" + info.toString()\n+                    + \", total : \" + (total * KB_TO_BYTES));\n               }\n             }\n           }\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(procMemInfo.toString());\n           }\n         }\n       }\n     }\n     if (total \u003e 0) {\n       total *\u003d KB_TO_BYTES; // convert to bytes\n     }\n     LOG.info(\"SmapBasedCumulativeRssmem (bytes) : \" + total);\n     return total; // size\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private long getSmapBasedRssMemorySize(int olderThanAge) {\n    long total \u003d UNAVAILABLE;\n    for (ProcessInfo p : processTree.values()) {\n      if (p !\u003d null) {\n        // set resource to 0 instead of UNAVAILABLE\n        if (total \u003d\u003d UNAVAILABLE){\n          total \u003d 0;\n        }\n        if (p.getAge() \u003e olderThanAge) {\n          ProcessTreeSmapMemInfo procMemInfo \u003d processSMAPTree.get(p.getPid());\n          if (procMemInfo !\u003d null) {\n            for (ProcessSmapMemoryInfo info : procMemInfo.getMemoryInfoList()) {\n              // Do not account for r--s or r-xs mappings\n              if (info.getPermission().trim()\n                .equalsIgnoreCase(READ_ONLY_WITH_SHARED_PERMISSION)\n                  || info.getPermission().trim()\n                    .equalsIgnoreCase(READ_EXECUTE_WITH_SHARED_PERMISSION)) {\n                continue;\n              }\n\n              // Account for anonymous to know the amount of\n              // memory reclaimable by killing the process\n              total +\u003d info.anonymous;\n\n              if (LOG.isDebugEnabled()) {\n                LOG.debug(\" total(\" + olderThanAge + \"): PID : \" + p.getPid()\n                    + \", info : \" + info.toString()\n                    + \", total : \" + (total * KB_TO_BYTES));\n              }\n            }\n          }\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(procMemInfo.toString());\n          }\n        }\n      }\n    }\n    if (total \u003e 0) {\n      total *\u003d KB_TO_BYTES; // convert to bytes\n    }\n    LOG.info(\"SmapBasedCumulativeRssmem (bytes) : \" + total);\n    return total; // size\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/ProcfsBasedProcessTree.java",
      "extendedDetails": {}
    },
    "7610925e90155dfe5edce05da31574e4fb81b948": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3304. Addendum patch. Cleaning up ResourceCalculatorProcessTree APIs for public use and removing inconsistencies in the default values. (Junping Du and Karthik Kambatla via vinodkv)\n",
      "commitDate": "31/03/15 5:27 PM",
      "commitName": "7610925e90155dfe5edce05da31574e4fb81b948",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "30/03/15 10:09 AM",
      "commitNameOld": "c358368f511963ad8e35f030b9babee541e1bd01",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 1.3,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,46 @@\n   private long getSmapBasedRssMemorySize(int olderThanAge) {\n     long total \u003d UNAVAILABLE;\n     for (ProcessInfo p : processTree.values()) {\n-      if ((p !\u003d null) \u0026\u0026 (p.getAge() \u003e olderThanAge)) {\n-        ProcessTreeSmapMemInfo procMemInfo \u003d processSMAPTree.get(p.getPid());\n-        if (procMemInfo !\u003d null) {\n-          for (ProcessSmapMemoryInfo info : procMemInfo.getMemoryInfoList()) {\n-            // Do not account for r--s or r-xs mappings\n-            if (info.getPermission().trim()\n-              .equalsIgnoreCase(READ_ONLY_WITH_SHARED_PERMISSION)\n-                || info.getPermission().trim()\n-                  .equalsIgnoreCase(READ_EXECUTE_WITH_SHARED_PERMISSION)) {\n-              continue;\n-            }\n-            if (total \u003d\u003d UNAVAILABLE){\n-              total \u003d 0;\n-            }\n-            total +\u003d\n-                Math.min(info.sharedDirty, info.pss) + info.privateDirty\n-                    + info.privateClean;\n-            if (LOG.isDebugEnabled()) {\n-              LOG.debug(\" total(\" + olderThanAge + \"): PID : \" + p.getPid()\n-                  + \", SharedDirty : \" + info.sharedDirty + \", PSS : \"\n-                  + info.pss + \", Private_Dirty : \" + info.privateDirty\n-                  + \", Private_Clean : \" + info.privateClean + \", total : \"\n-                  + (total * KB_TO_BYTES));\n+      if (p !\u003d null) {\n+        // set resource to 0 instead of UNAVAILABLE\n+        if (total \u003d\u003d UNAVAILABLE){\n+          total \u003d 0;\n+        }\n+        if (p.getAge() \u003e olderThanAge) {\n+          ProcessTreeSmapMemInfo procMemInfo \u003d processSMAPTree.get(p.getPid());\n+          if (procMemInfo !\u003d null) {\n+            for (ProcessSmapMemoryInfo info : procMemInfo.getMemoryInfoList()) {\n+              // Do not account for r--s or r-xs mappings\n+              if (info.getPermission().trim()\n+                .equalsIgnoreCase(READ_ONLY_WITH_SHARED_PERMISSION)\n+                  || info.getPermission().trim()\n+                    .equalsIgnoreCase(READ_EXECUTE_WITH_SHARED_PERMISSION)) {\n+                continue;\n+              }\n+\n+              total +\u003d\n+                  Math.min(info.sharedDirty, info.pss) + info.privateDirty\n+                      + info.privateClean;\n+              if (LOG.isDebugEnabled()) {\n+                LOG.debug(\" total(\" + olderThanAge + \"): PID : \" + p.getPid()\n+                    + \", SharedDirty : \" + info.sharedDirty + \", PSS : \"\n+                    + info.pss + \", Private_Dirty : \" + info.privateDirty\n+                    + \", Private_Clean : \" + info.privateClean + \", total : \"\n+                    + (total * KB_TO_BYTES));\n+              }\n             }\n           }\n-        }\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(procMemInfo.toString());\n+        \n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(procMemInfo.toString());\n+          }\n         }\n       }\n+      \n     }\n     if (total \u003e 0) {\n       total *\u003d KB_TO_BYTES; // convert to bytes\n     }\n     LOG.info(\"SmapBasedCumulativeRssmem (bytes) : \" + total);\n     return total; // size\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private long getSmapBasedRssMemorySize(int olderThanAge) {\n    long total \u003d UNAVAILABLE;\n    for (ProcessInfo p : processTree.values()) {\n      if (p !\u003d null) {\n        // set resource to 0 instead of UNAVAILABLE\n        if (total \u003d\u003d UNAVAILABLE){\n          total \u003d 0;\n        }\n        if (p.getAge() \u003e olderThanAge) {\n          ProcessTreeSmapMemInfo procMemInfo \u003d processSMAPTree.get(p.getPid());\n          if (procMemInfo !\u003d null) {\n            for (ProcessSmapMemoryInfo info : procMemInfo.getMemoryInfoList()) {\n              // Do not account for r--s or r-xs mappings\n              if (info.getPermission().trim()\n                .equalsIgnoreCase(READ_ONLY_WITH_SHARED_PERMISSION)\n                  || info.getPermission().trim()\n                    .equalsIgnoreCase(READ_EXECUTE_WITH_SHARED_PERMISSION)) {\n                continue;\n              }\n\n              total +\u003d\n                  Math.min(info.sharedDirty, info.pss) + info.privateDirty\n                      + info.privateClean;\n              if (LOG.isDebugEnabled()) {\n                LOG.debug(\" total(\" + olderThanAge + \"): PID : \" + p.getPid()\n                    + \", SharedDirty : \" + info.sharedDirty + \", PSS : \"\n                    + info.pss + \", Private_Dirty : \" + info.privateDirty\n                    + \", Private_Clean : \" + info.privateClean + \", total : \"\n                    + (total * KB_TO_BYTES));\n              }\n            }\n          }\n        \n          if (LOG.isDebugEnabled()) {\n            LOG.debug(procMemInfo.toString());\n          }\n        }\n      }\n      \n    }\n    if (total \u003e 0) {\n      total *\u003d KB_TO_BYTES; // convert to bytes\n    }\n    LOG.info(\"SmapBasedCumulativeRssmem (bytes) : \" + total);\n    return total; // size\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/ProcfsBasedProcessTree.java",
      "extendedDetails": {}
    },
    "c358368f511963ad8e35f030b9babee541e1bd01": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "YARN-3304. Cleaning up ResourceCalculatorProcessTree APIs for public use and removing inconsistencies in the default values. Contributed by Junping Du and Karthik Kambatla.\n",
      "commitDate": "30/03/15 10:09 AM",
      "commitName": "c358368f511963ad8e35f030b9babee541e1bd01",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-3304. Cleaning up ResourceCalculatorProcessTree APIs for public use and removing inconsistencies in the default values. Contributed by Junping Du and Karthik Kambatla.\n",
          "commitDate": "30/03/15 10:09 AM",
          "commitName": "c358368f511963ad8e35f030b9babee541e1bd01",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "04/03/15 5:33 PM",
          "commitNameOld": "53947f37c7a84a84ef4ab1a3cab63ff27c078385",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 25.65,
          "commitsBetweenForRepo": 213,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,40 @@\n-  private long getSmapBasedCumulativeRssmem(int olderThanAge) {\n-    long total \u003d 0;\n+  private long getSmapBasedRssMemorySize(int olderThanAge) {\n+    long total \u003d UNAVAILABLE;\n     for (ProcessInfo p : processTree.values()) {\n       if ((p !\u003d null) \u0026\u0026 (p.getAge() \u003e olderThanAge)) {\n         ProcessTreeSmapMemInfo procMemInfo \u003d processSMAPTree.get(p.getPid());\n         if (procMemInfo !\u003d null) {\n           for (ProcessSmapMemoryInfo info : procMemInfo.getMemoryInfoList()) {\n             // Do not account for r--s or r-xs mappings\n             if (info.getPermission().trim()\n               .equalsIgnoreCase(READ_ONLY_WITH_SHARED_PERMISSION)\n                 || info.getPermission().trim()\n                   .equalsIgnoreCase(READ_EXECUTE_WITH_SHARED_PERMISSION)) {\n               continue;\n             }\n+            if (total \u003d\u003d UNAVAILABLE){\n+              total \u003d 0;\n+            }\n             total +\u003d\n                 Math.min(info.sharedDirty, info.pss) + info.privateDirty\n                     + info.privateClean;\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\" total(\" + olderThanAge + \"): PID : \" + p.getPid()\n                   + \", SharedDirty : \" + info.sharedDirty + \", PSS : \"\n                   + info.pss + \", Private_Dirty : \" + info.privateDirty\n                   + \", Private_Clean : \" + info.privateClean + \", total : \"\n                   + (total * KB_TO_BYTES));\n             }\n           }\n         }\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(procMemInfo.toString());\n         }\n       }\n     }\n-    total \u003d (total * KB_TO_BYTES); // convert to bytes\n+    if (total \u003e 0) {\n+      total *\u003d KB_TO_BYTES; // convert to bytes\n+    }\n     LOG.info(\"SmapBasedCumulativeRssmem (bytes) : \" + total);\n     return total; // size\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private long getSmapBasedRssMemorySize(int olderThanAge) {\n    long total \u003d UNAVAILABLE;\n    for (ProcessInfo p : processTree.values()) {\n      if ((p !\u003d null) \u0026\u0026 (p.getAge() \u003e olderThanAge)) {\n        ProcessTreeSmapMemInfo procMemInfo \u003d processSMAPTree.get(p.getPid());\n        if (procMemInfo !\u003d null) {\n          for (ProcessSmapMemoryInfo info : procMemInfo.getMemoryInfoList()) {\n            // Do not account for r--s or r-xs mappings\n            if (info.getPermission().trim()\n              .equalsIgnoreCase(READ_ONLY_WITH_SHARED_PERMISSION)\n                || info.getPermission().trim()\n                  .equalsIgnoreCase(READ_EXECUTE_WITH_SHARED_PERMISSION)) {\n              continue;\n            }\n            if (total \u003d\u003d UNAVAILABLE){\n              total \u003d 0;\n            }\n            total +\u003d\n                Math.min(info.sharedDirty, info.pss) + info.privateDirty\n                    + info.privateClean;\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\" total(\" + olderThanAge + \"): PID : \" + p.getPid()\n                  + \", SharedDirty : \" + info.sharedDirty + \", PSS : \"\n                  + info.pss + \", Private_Dirty : \" + info.privateDirty\n                  + \", Private_Clean : \" + info.privateClean + \", total : \"\n                  + (total * KB_TO_BYTES));\n            }\n          }\n        }\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(procMemInfo.toString());\n        }\n      }\n    }\n    if (total \u003e 0) {\n      total *\u003d KB_TO_BYTES; // convert to bytes\n    }\n    LOG.info(\"SmapBasedCumulativeRssmem (bytes) : \" + total);\n    return total; // size\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/ProcfsBasedProcessTree.java",
          "extendedDetails": {
            "oldValue": "getSmapBasedCumulativeRssmem",
            "newValue": "getSmapBasedRssMemorySize"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3304. Cleaning up ResourceCalculatorProcessTree APIs for public use and removing inconsistencies in the default values. Contributed by Junping Du and Karthik Kambatla.\n",
          "commitDate": "30/03/15 10:09 AM",
          "commitName": "c358368f511963ad8e35f030b9babee541e1bd01",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "04/03/15 5:33 PM",
          "commitNameOld": "53947f37c7a84a84ef4ab1a3cab63ff27c078385",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 25.65,
          "commitsBetweenForRepo": 213,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,40 @@\n-  private long getSmapBasedCumulativeRssmem(int olderThanAge) {\n-    long total \u003d 0;\n+  private long getSmapBasedRssMemorySize(int olderThanAge) {\n+    long total \u003d UNAVAILABLE;\n     for (ProcessInfo p : processTree.values()) {\n       if ((p !\u003d null) \u0026\u0026 (p.getAge() \u003e olderThanAge)) {\n         ProcessTreeSmapMemInfo procMemInfo \u003d processSMAPTree.get(p.getPid());\n         if (procMemInfo !\u003d null) {\n           for (ProcessSmapMemoryInfo info : procMemInfo.getMemoryInfoList()) {\n             // Do not account for r--s or r-xs mappings\n             if (info.getPermission().trim()\n               .equalsIgnoreCase(READ_ONLY_WITH_SHARED_PERMISSION)\n                 || info.getPermission().trim()\n                   .equalsIgnoreCase(READ_EXECUTE_WITH_SHARED_PERMISSION)) {\n               continue;\n             }\n+            if (total \u003d\u003d UNAVAILABLE){\n+              total \u003d 0;\n+            }\n             total +\u003d\n                 Math.min(info.sharedDirty, info.pss) + info.privateDirty\n                     + info.privateClean;\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\" total(\" + olderThanAge + \"): PID : \" + p.getPid()\n                   + \", SharedDirty : \" + info.sharedDirty + \", PSS : \"\n                   + info.pss + \", Private_Dirty : \" + info.privateDirty\n                   + \", Private_Clean : \" + info.privateClean + \", total : \"\n                   + (total * KB_TO_BYTES));\n             }\n           }\n         }\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(procMemInfo.toString());\n         }\n       }\n     }\n-    total \u003d (total * KB_TO_BYTES); // convert to bytes\n+    if (total \u003e 0) {\n+      total *\u003d KB_TO_BYTES; // convert to bytes\n+    }\n     LOG.info(\"SmapBasedCumulativeRssmem (bytes) : \" + total);\n     return total; // size\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private long getSmapBasedRssMemorySize(int olderThanAge) {\n    long total \u003d UNAVAILABLE;\n    for (ProcessInfo p : processTree.values()) {\n      if ((p !\u003d null) \u0026\u0026 (p.getAge() \u003e olderThanAge)) {\n        ProcessTreeSmapMemInfo procMemInfo \u003d processSMAPTree.get(p.getPid());\n        if (procMemInfo !\u003d null) {\n          for (ProcessSmapMemoryInfo info : procMemInfo.getMemoryInfoList()) {\n            // Do not account for r--s or r-xs mappings\n            if (info.getPermission().trim()\n              .equalsIgnoreCase(READ_ONLY_WITH_SHARED_PERMISSION)\n                || info.getPermission().trim()\n                  .equalsIgnoreCase(READ_EXECUTE_WITH_SHARED_PERMISSION)) {\n              continue;\n            }\n            if (total \u003d\u003d UNAVAILABLE){\n              total \u003d 0;\n            }\n            total +\u003d\n                Math.min(info.sharedDirty, info.pss) + info.privateDirty\n                    + info.privateClean;\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\" total(\" + olderThanAge + \"): PID : \" + p.getPid()\n                  + \", SharedDirty : \" + info.sharedDirty + \", PSS : \"\n                  + info.pss + \", Private_Dirty : \" + info.privateDirty\n                  + \", Private_Clean : \" + info.privateClean + \", total : \"\n                  + (total * KB_TO_BYTES));\n            }\n          }\n        }\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(procMemInfo.toString());\n        }\n      }\n    }\n    if (total \u003e 0) {\n      total *\u003d KB_TO_BYTES; // convert to bytes\n    }\n    LOG.info(\"SmapBasedCumulativeRssmem (bytes) : \" + total);\n    return total; // size\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/ProcfsBasedProcessTree.java",
          "extendedDetails": {}
        }
      ]
    },
    "06579878dfca0b634aaecfe63bb90c46113b3037": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1775. Enhanced ProcfsBasedProcessTree to optionally add the ability to use smaps for obtaining used memory information. Contributed by Rajesh Balamohan.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1580087 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/03/14 5:01 PM",
      "commitName": "06579878dfca0b634aaecfe63bb90c46113b3037",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,35 @@\n+  private long getSmapBasedCumulativeRssmem(int olderThanAge) {\n+    long total \u003d 0;\n+    for (ProcessInfo p : processTree.values()) {\n+      if ((p !\u003d null) \u0026\u0026 (p.getAge() \u003e olderThanAge)) {\n+        ProcessTreeSmapMemInfo procMemInfo \u003d processSMAPTree.get(p.getPid());\n+        if (procMemInfo !\u003d null) {\n+          for (ProcessSmapMemoryInfo info : procMemInfo.getMemoryInfoList()) {\n+            // Do not account for r--s or r-xs mappings\n+            if (info.getPermission().trim()\n+              .equalsIgnoreCase(READ_ONLY_WITH_SHARED_PERMISSION)\n+                || info.getPermission().trim()\n+                  .equalsIgnoreCase(READ_EXECUTE_WITH_SHARED_PERMISSION)) {\n+              continue;\n+            }\n+            total +\u003d\n+                Math.min(info.sharedDirty, info.pss) + info.privateDirty\n+                    + info.privateClean;\n+            if (LOG.isDebugEnabled()) {\n+              LOG.debug(\" total(\" + olderThanAge + \"): PID : \" + p.getPid()\n+                  + \", SharedDirty : \" + info.sharedDirty + \", PSS : \"\n+                  + info.pss + \", Private_Dirty : \" + info.privateDirty\n+                  + \", Private_Clean : \" + info.privateClean + \", total : \"\n+                  + (total * KB_TO_BYTES));\n+            }\n+          }\n+        }\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(procMemInfo.toString());\n+        }\n+      }\n+    }\n+    total \u003d (total * KB_TO_BYTES); // convert to bytes\n+    LOG.info(\"SmapBasedCumulativeRssmem (bytes) : \" + total);\n+    return total; // size\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private long getSmapBasedCumulativeRssmem(int olderThanAge) {\n    long total \u003d 0;\n    for (ProcessInfo p : processTree.values()) {\n      if ((p !\u003d null) \u0026\u0026 (p.getAge() \u003e olderThanAge)) {\n        ProcessTreeSmapMemInfo procMemInfo \u003d processSMAPTree.get(p.getPid());\n        if (procMemInfo !\u003d null) {\n          for (ProcessSmapMemoryInfo info : procMemInfo.getMemoryInfoList()) {\n            // Do not account for r--s or r-xs mappings\n            if (info.getPermission().trim()\n              .equalsIgnoreCase(READ_ONLY_WITH_SHARED_PERMISSION)\n                || info.getPermission().trim()\n                  .equalsIgnoreCase(READ_EXECUTE_WITH_SHARED_PERMISSION)) {\n              continue;\n            }\n            total +\u003d\n                Math.min(info.sharedDirty, info.pss) + info.privateDirty\n                    + info.privateClean;\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\" total(\" + olderThanAge + \"): PID : \" + p.getPid()\n                  + \", SharedDirty : \" + info.sharedDirty + \", PSS : \"\n                  + info.pss + \", Private_Dirty : \" + info.privateDirty\n                  + \", Private_Clean : \" + info.privateClean + \", total : \"\n                  + (total * KB_TO_BYTES));\n            }\n          }\n        }\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(procMemInfo.toString());\n        }\n      }\n    }\n    total \u003d (total * KB_TO_BYTES); // convert to bytes\n    LOG.info(\"SmapBasedCumulativeRssmem (bytes) : \" + total);\n    return total; // size\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/ProcfsBasedProcessTree.java"
    }
  }
}