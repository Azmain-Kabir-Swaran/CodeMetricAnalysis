{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ServiceMaster.java",
  "functionName": "checkAndUpdateServiceState",
  "functionId": "checkAndUpdateServiceState___scheduler-ServiceScheduler",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceMaster.java",
  "functionStartLine": 280,
  "functionEndLine": 307,
  "numCommitsSeen": 19,
  "timeTaken": 1637,
  "changeHistory": [
    "d07e873b7db6cb317eccb4768607c1afb505c99b",
    "ca612e353fc3e3766868ec0816de035e48b1f5b4",
    "41b581012a83a17db785343362c718363e13e8f5"
  ],
  "changeHistoryShort": {
    "d07e873b7db6cb317eccb4768607c1afb505c99b": "Ybodychange",
    "ca612e353fc3e3766868ec0816de035e48b1f5b4": "Ymultichange(Yparameterchange,Ybodychange)",
    "41b581012a83a17db785343362c718363e13e8f5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d07e873b7db6cb317eccb4768607c1afb505c99b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8569. Create an interface to provide cluster information to application. Contributed by Eric Yang\n",
      "commitDate": "26/10/18 5:57 PM",
      "commitName": "d07e873b7db6cb317eccb4768607c1afb505c99b",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "31/05/18 6:09 PM",
      "commitNameOld": "7dd26d5378483cdbce1dc594e8650a96c2976281",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 147.99,
      "commitsBetweenForRepo": 1236,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,28 @@\n   public static synchronized void checkAndUpdateServiceState(\n       ServiceScheduler scheduler) {\n     ServiceState curState \u003d scheduler.getApp().getState();\n     // Check the state of all components\n     boolean isStable \u003d true;\n     for (org.apache.hadoop.yarn.service.api.records.Component comp : scheduler\n         .getApp().getComponents()) {\n       if (comp.getState() !\u003d\n           org.apache.hadoop.yarn.service.api.records.ComponentState.STABLE) {\n         isStable \u003d false;\n         break;\n       }\n     }\n     if (isStable) {\n       scheduler.getApp().setState(ServiceState.STABLE);\n     } else {\n       // mark new state as started only if current state is stable, otherwise\n       // leave it as is\n       if (curState \u003d\u003d ServiceState.STABLE) {\n         scheduler.getApp().setState(ServiceState.STARTED);\n       }\n     }\n     if (curState !\u003d scheduler.getApp().getState()) {\n       LOG.info(\"Service state changed from {} -\u003e {}\", curState,\n           scheduler.getApp().getState());\n     }\n+    populateYarnSysFS(scheduler);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static synchronized void checkAndUpdateServiceState(\n      ServiceScheduler scheduler) {\n    ServiceState curState \u003d scheduler.getApp().getState();\n    // Check the state of all components\n    boolean isStable \u003d true;\n    for (org.apache.hadoop.yarn.service.api.records.Component comp : scheduler\n        .getApp().getComponents()) {\n      if (comp.getState() !\u003d\n          org.apache.hadoop.yarn.service.api.records.ComponentState.STABLE) {\n        isStable \u003d false;\n        break;\n      }\n    }\n    if (isStable) {\n      scheduler.getApp().setState(ServiceState.STABLE);\n    } else {\n      // mark new state as started only if current state is stable, otherwise\n      // leave it as is\n      if (curState \u003d\u003d ServiceState.STABLE) {\n        scheduler.getApp().setState(ServiceState.STARTED);\n      }\n    }\n    if (curState !\u003d scheduler.getApp().getState()) {\n      LOG.info(\"Service state changed from {} -\u003e {}\", curState,\n          scheduler.getApp().getState());\n    }\n    populateYarnSysFS(scheduler);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceMaster.java",
      "extendedDetails": {}
    },
    "ca612e353fc3e3766868ec0816de035e48b1f5b4": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-8243. Flex down should remove instance with largest component instance ID first. Contributed by Gour Saha\n",
      "commitDate": "11/05/18 12:49 PM",
      "commitName": "ca612e353fc3e3766868ec0816de035e48b1f5b4",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-8243. Flex down should remove instance with largest component instance ID first. Contributed by Gour Saha\n",
          "commitDate": "11/05/18 12:49 PM",
          "commitName": "ca612e353fc3e3766868ec0816de035e48b1f5b4",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "17/04/18 6:57 AM",
          "commitNameOld": "1d6e43da51aaaab522325bdbe4b51e58934e03f1",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 24.24,
          "commitsBetweenForRepo": 681,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,27 @@\n   public static synchronized void checkAndUpdateServiceState(\n-      ServiceScheduler scheduler, boolean isIncrement) {\n+      ServiceScheduler scheduler) {\n     ServiceState curState \u003d scheduler.getApp().getState();\n-    if (!isIncrement) {\n-      // set it to STARTED every time a component moves out of STABLE state\n-      scheduler.getApp().setState(ServiceState.STARTED);\n-    } else {\n-      // otherwise check the state of all components\n-      boolean isStable \u003d true;\n-      for (org.apache.hadoop.yarn.service.api.records.Component comp : scheduler\n-          .getApp().getComponents()) {\n-        if (comp.getState() !\u003d\n-            org.apache.hadoop.yarn.service.api.records.ComponentState.STABLE) {\n-          isStable \u003d false;\n-          break;\n-        }\n+    // Check the state of all components\n+    boolean isStable \u003d true;\n+    for (org.apache.hadoop.yarn.service.api.records.Component comp : scheduler\n+        .getApp().getComponents()) {\n+      if (comp.getState() !\u003d\n+          org.apache.hadoop.yarn.service.api.records.ComponentState.STABLE) {\n+        isStable \u003d false;\n+        break;\n       }\n-      if (isStable) {\n-        scheduler.getApp().setState(ServiceState.STABLE);\n-      } else {\n-        // mark new state as started only if current state is stable, otherwise\n-        // leave it as is\n-        if (curState \u003d\u003d ServiceState.STABLE) {\n-          scheduler.getApp().setState(ServiceState.STARTED);\n-        }\n+    }\n+    if (isStable) {\n+      scheduler.getApp().setState(ServiceState.STABLE);\n+    } else {\n+      // mark new state as started only if current state is stable, otherwise\n+      // leave it as is\n+      if (curState \u003d\u003d ServiceState.STABLE) {\n+        scheduler.getApp().setState(ServiceState.STARTED);\n       }\n     }\n     if (curState !\u003d scheduler.getApp().getState()) {\n       LOG.info(\"Service state changed from {} -\u003e {}\", curState,\n           scheduler.getApp().getState());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static synchronized void checkAndUpdateServiceState(\n      ServiceScheduler scheduler) {\n    ServiceState curState \u003d scheduler.getApp().getState();\n    // Check the state of all components\n    boolean isStable \u003d true;\n    for (org.apache.hadoop.yarn.service.api.records.Component comp : scheduler\n        .getApp().getComponents()) {\n      if (comp.getState() !\u003d\n          org.apache.hadoop.yarn.service.api.records.ComponentState.STABLE) {\n        isStable \u003d false;\n        break;\n      }\n    }\n    if (isStable) {\n      scheduler.getApp().setState(ServiceState.STABLE);\n    } else {\n      // mark new state as started only if current state is stable, otherwise\n      // leave it as is\n      if (curState \u003d\u003d ServiceState.STABLE) {\n        scheduler.getApp().setState(ServiceState.STARTED);\n      }\n    }\n    if (curState !\u003d scheduler.getApp().getState()) {\n      LOG.info(\"Service state changed from {} -\u003e {}\", curState,\n          scheduler.getApp().getState());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceMaster.java",
          "extendedDetails": {
            "oldValue": "[scheduler-ServiceScheduler, isIncrement-boolean]",
            "newValue": "[scheduler-ServiceScheduler]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8243. Flex down should remove instance with largest component instance ID first. Contributed by Gour Saha\n",
          "commitDate": "11/05/18 12:49 PM",
          "commitName": "ca612e353fc3e3766868ec0816de035e48b1f5b4",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "17/04/18 6:57 AM",
          "commitNameOld": "1d6e43da51aaaab522325bdbe4b51e58934e03f1",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 24.24,
          "commitsBetweenForRepo": 681,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,27 @@\n   public static synchronized void checkAndUpdateServiceState(\n-      ServiceScheduler scheduler, boolean isIncrement) {\n+      ServiceScheduler scheduler) {\n     ServiceState curState \u003d scheduler.getApp().getState();\n-    if (!isIncrement) {\n-      // set it to STARTED every time a component moves out of STABLE state\n-      scheduler.getApp().setState(ServiceState.STARTED);\n-    } else {\n-      // otherwise check the state of all components\n-      boolean isStable \u003d true;\n-      for (org.apache.hadoop.yarn.service.api.records.Component comp : scheduler\n-          .getApp().getComponents()) {\n-        if (comp.getState() !\u003d\n-            org.apache.hadoop.yarn.service.api.records.ComponentState.STABLE) {\n-          isStable \u003d false;\n-          break;\n-        }\n+    // Check the state of all components\n+    boolean isStable \u003d true;\n+    for (org.apache.hadoop.yarn.service.api.records.Component comp : scheduler\n+        .getApp().getComponents()) {\n+      if (comp.getState() !\u003d\n+          org.apache.hadoop.yarn.service.api.records.ComponentState.STABLE) {\n+        isStable \u003d false;\n+        break;\n       }\n-      if (isStable) {\n-        scheduler.getApp().setState(ServiceState.STABLE);\n-      } else {\n-        // mark new state as started only if current state is stable, otherwise\n-        // leave it as is\n-        if (curState \u003d\u003d ServiceState.STABLE) {\n-          scheduler.getApp().setState(ServiceState.STARTED);\n-        }\n+    }\n+    if (isStable) {\n+      scheduler.getApp().setState(ServiceState.STABLE);\n+    } else {\n+      // mark new state as started only if current state is stable, otherwise\n+      // leave it as is\n+      if (curState \u003d\u003d ServiceState.STABLE) {\n+        scheduler.getApp().setState(ServiceState.STARTED);\n       }\n     }\n     if (curState !\u003d scheduler.getApp().getState()) {\n       LOG.info(\"Service state changed from {} -\u003e {}\", curState,\n           scheduler.getApp().getState());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static synchronized void checkAndUpdateServiceState(\n      ServiceScheduler scheduler) {\n    ServiceState curState \u003d scheduler.getApp().getState();\n    // Check the state of all components\n    boolean isStable \u003d true;\n    for (org.apache.hadoop.yarn.service.api.records.Component comp : scheduler\n        .getApp().getComponents()) {\n      if (comp.getState() !\u003d\n          org.apache.hadoop.yarn.service.api.records.ComponentState.STABLE) {\n        isStable \u003d false;\n        break;\n      }\n    }\n    if (isStable) {\n      scheduler.getApp().setState(ServiceState.STABLE);\n    } else {\n      // mark new state as started only if current state is stable, otherwise\n      // leave it as is\n      if (curState \u003d\u003d ServiceState.STABLE) {\n        scheduler.getApp().setState(ServiceState.STARTED);\n      }\n    }\n    if (curState !\u003d scheduler.getApp().getState()) {\n      LOG.info(\"Service state changed from {} -\u003e {}\", curState,\n          scheduler.getApp().getState());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceMaster.java",
          "extendedDetails": {}
        }
      ]
    },
    "41b581012a83a17db785343362c718363e13e8f5": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7616. Map YARN application status to Service Status more accurately.  (Contributed by Gour Saha)\n",
      "commitDate": "19/12/17 4:14 PM",
      "commitName": "41b581012a83a17db785343362c718363e13e8f5",
      "commitAuthor": "Eric Yang",
      "diff": "@@ -0,0 +1,32 @@\n+  public static synchronized void checkAndUpdateServiceState(\n+      ServiceScheduler scheduler, boolean isIncrement) {\n+    ServiceState curState \u003d scheduler.getApp().getState();\n+    if (!isIncrement) {\n+      // set it to STARTED every time a component moves out of STABLE state\n+      scheduler.getApp().setState(ServiceState.STARTED);\n+    } else {\n+      // otherwise check the state of all components\n+      boolean isStable \u003d true;\n+      for (org.apache.hadoop.yarn.service.api.records.Component comp : scheduler\n+          .getApp().getComponents()) {\n+        if (comp.getState() !\u003d\n+            org.apache.hadoop.yarn.service.api.records.ComponentState.STABLE) {\n+          isStable \u003d false;\n+          break;\n+        }\n+      }\n+      if (isStable) {\n+        scheduler.getApp().setState(ServiceState.STABLE);\n+      } else {\n+        // mark new state as started only if current state is stable, otherwise\n+        // leave it as is\n+        if (curState \u003d\u003d ServiceState.STABLE) {\n+          scheduler.getApp().setState(ServiceState.STARTED);\n+        }\n+      }\n+    }\n+    if (curState !\u003d scheduler.getApp().getState()) {\n+      LOG.info(\"Service state changed from {} -\u003e {}\", curState,\n+          scheduler.getApp().getState());\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static synchronized void checkAndUpdateServiceState(\n      ServiceScheduler scheduler, boolean isIncrement) {\n    ServiceState curState \u003d scheduler.getApp().getState();\n    if (!isIncrement) {\n      // set it to STARTED every time a component moves out of STABLE state\n      scheduler.getApp().setState(ServiceState.STARTED);\n    } else {\n      // otherwise check the state of all components\n      boolean isStable \u003d true;\n      for (org.apache.hadoop.yarn.service.api.records.Component comp : scheduler\n          .getApp().getComponents()) {\n        if (comp.getState() !\u003d\n            org.apache.hadoop.yarn.service.api.records.ComponentState.STABLE) {\n          isStable \u003d false;\n          break;\n        }\n      }\n      if (isStable) {\n        scheduler.getApp().setState(ServiceState.STABLE);\n      } else {\n        // mark new state as started only if current state is stable, otherwise\n        // leave it as is\n        if (curState \u003d\u003d ServiceState.STABLE) {\n          scheduler.getApp().setState(ServiceState.STARTED);\n        }\n      }\n    }\n    if (curState !\u003d scheduler.getApp().getState()) {\n      LOG.info(\"Service state changed from {} -\u003e {}\", curState,\n          scheduler.getApp().getState());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceMaster.java"
    }
  }
}