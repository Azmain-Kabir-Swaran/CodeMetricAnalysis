{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AdminService.java",
  "functionName": "updateNodeResource",
  "functionId": "updateNodeResource___request-UpdateNodeResourceRequest",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/AdminService.java",
  "functionStartLine": 639,
  "functionEndLine": 691,
  "numCommitsSeen": 78,
  "timeTaken": 2648,
  "changeHistory": [
    "e3153284288d6cfa7a28511dfefe1c8a7d6b4eda",
    "c63afdbe14df7359841aa4b213252a8a275e8c4b",
    "40ee4bff65b2bfdabfd16ee7d9be3382a0476565",
    "5c14bc426b4be381383018ebc2236be83eef15cd",
    "49ad07af9782c2c2608799573e815a7cfc26851f"
  ],
  "changeHistoryShort": {
    "e3153284288d6cfa7a28511dfefe1c8a7d6b4eda": "Ybodychange",
    "c63afdbe14df7359841aa4b213252a8a275e8c4b": "Ybodychange",
    "40ee4bff65b2bfdabfd16ee7d9be3382a0476565": "Ybodychange",
    "5c14bc426b4be381383018ebc2236be83eef15cd": "Ybodychange",
    "49ad07af9782c2c2608799573e815a7cfc26851f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e3153284288d6cfa7a28511dfefe1c8a7d6b4eda": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6102. RMActiveService context to be updated with new RMContext on failover. Contributed by Rohith Sharma K S.\n",
      "commitDate": "23/07/17 11:09 PM",
      "commitName": "e3153284288d6cfa7a28511dfefe1c8a7d6b4eda",
      "commitAuthor": "Sunil G",
      "commitDateOld": "09/05/17 2:44 PM",
      "commitNameOld": "166be0ee95d5ef976f074342656b289b41a11ccd",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 75.35,
      "commitsBetweenForRepo": 358,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,53 @@\n   public UpdateNodeResourceResponse updateNodeResource(\n       UpdateNodeResourceRequest request) throws YarnException, IOException {\n     final String operation \u003d \"updateNodeResource\";\n     UserGroupInformation user \u003d checkAcls(operation);\n \n     checkRMStatus(user.getShortUserName(), operation, \"update node resource.\");\n \n     Map\u003cNodeId, ResourceOption\u003e nodeResourceMap \u003d request.getNodeResourceMap();\n     Set\u003cNodeId\u003e nodeIds \u003d nodeResourceMap.keySet();\n     // verify nodes are all valid first.\n     // if any invalid nodes, throw exception instead of partially updating\n     // valid nodes.\n     for (NodeId nodeId : nodeIds) {\n-      RMNode node \u003d this.rmContext.getRMNodes().get(nodeId);\n+      RMNode node \u003d this.rm.getRMContext().getRMNodes().get(nodeId);\n       if (node \u003d\u003d null) {\n         LOG.error(\"Resource update get failed on all nodes due to change \"\n             + \"resource on an unrecognized node: \" + nodeId);\n         throw RPCUtil.getRemoteException(\n             \"Resource update get failed on all nodes due to change resource \"\n                 + \"on an unrecognized node: \" + nodeId);\n       }\n     }\n \n     // do resource update on each node.\n     // Notice: it is still possible to have invalid NodeIDs as nodes decommission\n     // may happen just at the same time. This time, only log and skip absent\n     // nodes without throwing any exceptions.\n     boolean allSuccess \u003d true;\n     for (Map.Entry\u003cNodeId, ResourceOption\u003e entry : nodeResourceMap.entrySet()) {\n       ResourceOption newResourceOption \u003d entry.getValue();\n       NodeId nodeId \u003d entry.getKey();\n-      RMNode node \u003d this.rmContext.getRMNodes().get(nodeId);\n+      RMNode node \u003d this.rm.getRMContext().getRMNodes().get(nodeId);\n \n       if (node \u003d\u003d null) {\n         LOG.warn(\"Resource update get failed on an unrecognized node: \" + nodeId);\n         allSuccess \u003d false;\n       } else {\n         // update resource to RMNode\n-        this.rmContext.getDispatcher().getEventHandler()\n+        this.rm.getRMContext().getDispatcher().getEventHandler()\n           .handle(new RMNodeResourceUpdateEvent(nodeId, newResourceOption));\n         LOG.info(\"Update resource on node(\" + node.getNodeID()\n             + \") with resource(\" + newResourceOption.toString() + \")\");\n \n       }\n     }\n     if (allSuccess) {\n       RMAuditLogger.logSuccess(user.getShortUserName(), operation,\n           \"AdminService\");\n     }\n     UpdateNodeResourceResponse response \u003d\n         UpdateNodeResourceResponse.newInstance();\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public UpdateNodeResourceResponse updateNodeResource(\n      UpdateNodeResourceRequest request) throws YarnException, IOException {\n    final String operation \u003d \"updateNodeResource\";\n    UserGroupInformation user \u003d checkAcls(operation);\n\n    checkRMStatus(user.getShortUserName(), operation, \"update node resource.\");\n\n    Map\u003cNodeId, ResourceOption\u003e nodeResourceMap \u003d request.getNodeResourceMap();\n    Set\u003cNodeId\u003e nodeIds \u003d nodeResourceMap.keySet();\n    // verify nodes are all valid first.\n    // if any invalid nodes, throw exception instead of partially updating\n    // valid nodes.\n    for (NodeId nodeId : nodeIds) {\n      RMNode node \u003d this.rm.getRMContext().getRMNodes().get(nodeId);\n      if (node \u003d\u003d null) {\n        LOG.error(\"Resource update get failed on all nodes due to change \"\n            + \"resource on an unrecognized node: \" + nodeId);\n        throw RPCUtil.getRemoteException(\n            \"Resource update get failed on all nodes due to change resource \"\n                + \"on an unrecognized node: \" + nodeId);\n      }\n    }\n\n    // do resource update on each node.\n    // Notice: it is still possible to have invalid NodeIDs as nodes decommission\n    // may happen just at the same time. This time, only log and skip absent\n    // nodes without throwing any exceptions.\n    boolean allSuccess \u003d true;\n    for (Map.Entry\u003cNodeId, ResourceOption\u003e entry : nodeResourceMap.entrySet()) {\n      ResourceOption newResourceOption \u003d entry.getValue();\n      NodeId nodeId \u003d entry.getKey();\n      RMNode node \u003d this.rm.getRMContext().getRMNodes().get(nodeId);\n\n      if (node \u003d\u003d null) {\n        LOG.warn(\"Resource update get failed on an unrecognized node: \" + nodeId);\n        allSuccess \u003d false;\n      } else {\n        // update resource to RMNode\n        this.rm.getRMContext().getDispatcher().getEventHandler()\n          .handle(new RMNodeResourceUpdateEvent(nodeId, newResourceOption));\n        LOG.info(\"Update resource on node(\" + node.getNodeID()\n            + \") with resource(\" + newResourceOption.toString() + \")\");\n\n      }\n    }\n    if (allSuccess) {\n      RMAuditLogger.logSuccess(user.getShortUserName(), operation,\n          \"AdminService\");\n    }\n    UpdateNodeResourceResponse response \u003d\n        UpdateNodeResourceResponse.newInstance();\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/AdminService.java",
      "extendedDetails": {}
    },
    "c63afdbe14df7359841aa4b213252a8a275e8c4b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4883. Make consistent operation name in AdminService. Contributed by Kai Sasaki.\n",
      "commitDate": "20/07/16 4:51 PM",
      "commitName": "c63afdbe14df7359841aa4b213252a8a275e8c4b",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "09/04/16 10:31 AM",
      "commitNameOld": "ff95fd547b3030529983fa4e701ac728c54ab63a",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 102.26,
      "commitsBetweenForRepo": 794,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,53 @@\n   public UpdateNodeResourceResponse updateNodeResource(\n       UpdateNodeResourceRequest request) throws YarnException, IOException {\n-    String argName \u003d \"updateNodeResource\";\n-    UserGroupInformation user \u003d checkAcls(argName);\n-    \n-    checkRMStatus(user.getShortUserName(), argName, \"update node resource.\");\n-    \n+    final String operation \u003d \"updateNodeResource\";\n+    UserGroupInformation user \u003d checkAcls(operation);\n+\n+    checkRMStatus(user.getShortUserName(), operation, \"update node resource.\");\n+\n     Map\u003cNodeId, ResourceOption\u003e nodeResourceMap \u003d request.getNodeResourceMap();\n     Set\u003cNodeId\u003e nodeIds \u003d nodeResourceMap.keySet();\n-    // verify nodes are all valid first. \n+    // verify nodes are all valid first.\n     // if any invalid nodes, throw exception instead of partially updating\n     // valid nodes.\n     for (NodeId nodeId : nodeIds) {\n       RMNode node \u003d this.rmContext.getRMNodes().get(nodeId);\n       if (node \u003d\u003d null) {\n         LOG.error(\"Resource update get failed on all nodes due to change \"\n             + \"resource on an unrecognized node: \" + nodeId);\n         throw RPCUtil.getRemoteException(\n             \"Resource update get failed on all nodes due to change resource \"\n                 + \"on an unrecognized node: \" + nodeId);\n       }\n     }\n-    \n+\n     // do resource update on each node.\n     // Notice: it is still possible to have invalid NodeIDs as nodes decommission\n     // may happen just at the same time. This time, only log and skip absent\n     // nodes without throwing any exceptions.\n     boolean allSuccess \u003d true;\n     for (Map.Entry\u003cNodeId, ResourceOption\u003e entry : nodeResourceMap.entrySet()) {\n       ResourceOption newResourceOption \u003d entry.getValue();\n       NodeId nodeId \u003d entry.getKey();\n       RMNode node \u003d this.rmContext.getRMNodes().get(nodeId);\n-      \n+\n       if (node \u003d\u003d null) {\n         LOG.warn(\"Resource update get failed on an unrecognized node: \" + nodeId);\n         allSuccess \u003d false;\n       } else {\n         // update resource to RMNode\n         this.rmContext.getDispatcher().getEventHandler()\n           .handle(new RMNodeResourceUpdateEvent(nodeId, newResourceOption));\n         LOG.info(\"Update resource on node(\" + node.getNodeID()\n             + \") with resource(\" + newResourceOption.toString() + \")\");\n \n       }\n     }\n     if (allSuccess) {\n-      RMAuditLogger.logSuccess(user.getShortUserName(), argName,\n+      RMAuditLogger.logSuccess(user.getShortUserName(), operation,\n           \"AdminService\");\n     }\n-    UpdateNodeResourceResponse response \u003d \n+    UpdateNodeResourceResponse response \u003d\n         UpdateNodeResourceResponse.newInstance();\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public UpdateNodeResourceResponse updateNodeResource(\n      UpdateNodeResourceRequest request) throws YarnException, IOException {\n    final String operation \u003d \"updateNodeResource\";\n    UserGroupInformation user \u003d checkAcls(operation);\n\n    checkRMStatus(user.getShortUserName(), operation, \"update node resource.\");\n\n    Map\u003cNodeId, ResourceOption\u003e nodeResourceMap \u003d request.getNodeResourceMap();\n    Set\u003cNodeId\u003e nodeIds \u003d nodeResourceMap.keySet();\n    // verify nodes are all valid first.\n    // if any invalid nodes, throw exception instead of partially updating\n    // valid nodes.\n    for (NodeId nodeId : nodeIds) {\n      RMNode node \u003d this.rmContext.getRMNodes().get(nodeId);\n      if (node \u003d\u003d null) {\n        LOG.error(\"Resource update get failed on all nodes due to change \"\n            + \"resource on an unrecognized node: \" + nodeId);\n        throw RPCUtil.getRemoteException(\n            \"Resource update get failed on all nodes due to change resource \"\n                + \"on an unrecognized node: \" + nodeId);\n      }\n    }\n\n    // do resource update on each node.\n    // Notice: it is still possible to have invalid NodeIDs as nodes decommission\n    // may happen just at the same time. This time, only log and skip absent\n    // nodes without throwing any exceptions.\n    boolean allSuccess \u003d true;\n    for (Map.Entry\u003cNodeId, ResourceOption\u003e entry : nodeResourceMap.entrySet()) {\n      ResourceOption newResourceOption \u003d entry.getValue();\n      NodeId nodeId \u003d entry.getKey();\n      RMNode node \u003d this.rmContext.getRMNodes().get(nodeId);\n\n      if (node \u003d\u003d null) {\n        LOG.warn(\"Resource update get failed on an unrecognized node: \" + nodeId);\n        allSuccess \u003d false;\n      } else {\n        // update resource to RMNode\n        this.rmContext.getDispatcher().getEventHandler()\n          .handle(new RMNodeResourceUpdateEvent(nodeId, newResourceOption));\n        LOG.info(\"Update resource on node(\" + node.getNodeID()\n            + \") with resource(\" + newResourceOption.toString() + \")\");\n\n      }\n    }\n    if (allSuccess) {\n      RMAuditLogger.logSuccess(user.getShortUserName(), operation,\n          \"AdminService\");\n    }\n    UpdateNodeResourceResponse response \u003d\n        UpdateNodeResourceResponse.newInstance();\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/AdminService.java",
      "extendedDetails": {}
    },
    "40ee4bff65b2bfdabfd16ee7d9be3382a0476565": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2993. Several fixes (missing acl check, error log msg ...) and some refinement in AdminService. (Contributed by Yi Liu)\n",
      "commitDate": "26/12/14 6:59 AM",
      "commitName": "40ee4bff65b2bfdabfd16ee7d9be3382a0476565",
      "commitAuthor": "Junping Du",
      "commitDateOld": "30/10/14 10:59 PM",
      "commitNameOld": "e0233c16ebd06bb3aabeb523cd17259008e243ef",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 56.37,
      "commitsBetweenForRepo": 427,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,53 @@\n   public UpdateNodeResourceResponse updateNodeResource(\n       UpdateNodeResourceRequest request) throws YarnException, IOException {\n     String argName \u003d \"updateNodeResource\";\n     UserGroupInformation user \u003d checkAcls(argName);\n     \n-    if (!isRMActive()) {\n-      RMAuditLogger.logFailure(user.getShortUserName(), argName,\n-          adminAcl.toString(), \"AdminService\",\n-          \"ResourceManager is not active. Can not update node resource.\");\n-      throwStandbyException();\n-    }\n+    checkRMStatus(user.getShortUserName(), argName, \"update node resource.\");\n     \n     Map\u003cNodeId, ResourceOption\u003e nodeResourceMap \u003d request.getNodeResourceMap();\n     Set\u003cNodeId\u003e nodeIds \u003d nodeResourceMap.keySet();\n     // verify nodes are all valid first. \n     // if any invalid nodes, throw exception instead of partially updating\n     // valid nodes.\n     for (NodeId nodeId : nodeIds) {\n       RMNode node \u003d this.rmContext.getRMNodes().get(nodeId);\n       if (node \u003d\u003d null) {\n         LOG.error(\"Resource update get failed on all nodes due to change \"\n             + \"resource on an unrecognized node: \" + nodeId);\n         throw RPCUtil.getRemoteException(\n             \"Resource update get failed on all nodes due to change resource \"\n                 + \"on an unrecognized node: \" + nodeId);\n       }\n     }\n     \n     // do resource update on each node.\n     // Notice: it is still possible to have invalid NodeIDs as nodes decommission\n     // may happen just at the same time. This time, only log and skip absent\n     // nodes without throwing any exceptions.\n     boolean allSuccess \u003d true;\n     for (Map.Entry\u003cNodeId, ResourceOption\u003e entry : nodeResourceMap.entrySet()) {\n       ResourceOption newResourceOption \u003d entry.getValue();\n       NodeId nodeId \u003d entry.getKey();\n       RMNode node \u003d this.rmContext.getRMNodes().get(nodeId);\n       \n       if (node \u003d\u003d null) {\n         LOG.warn(\"Resource update get failed on an unrecognized node: \" + nodeId);\n         allSuccess \u003d false;\n       } else {\n         // update resource to RMNode\n         this.rmContext.getDispatcher().getEventHandler()\n           .handle(new RMNodeResourceUpdateEvent(nodeId, newResourceOption));\n         LOG.info(\"Update resource on node(\" + node.getNodeID()\n             + \") with resource(\" + newResourceOption.toString() + \")\");\n \n       }\n     }\n     if (allSuccess) {\n       RMAuditLogger.logSuccess(user.getShortUserName(), argName,\n           \"AdminService\");\n     }\n     UpdateNodeResourceResponse response \u003d \n         UpdateNodeResourceResponse.newInstance();\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public UpdateNodeResourceResponse updateNodeResource(\n      UpdateNodeResourceRequest request) throws YarnException, IOException {\n    String argName \u003d \"updateNodeResource\";\n    UserGroupInformation user \u003d checkAcls(argName);\n    \n    checkRMStatus(user.getShortUserName(), argName, \"update node resource.\");\n    \n    Map\u003cNodeId, ResourceOption\u003e nodeResourceMap \u003d request.getNodeResourceMap();\n    Set\u003cNodeId\u003e nodeIds \u003d nodeResourceMap.keySet();\n    // verify nodes are all valid first. \n    // if any invalid nodes, throw exception instead of partially updating\n    // valid nodes.\n    for (NodeId nodeId : nodeIds) {\n      RMNode node \u003d this.rmContext.getRMNodes().get(nodeId);\n      if (node \u003d\u003d null) {\n        LOG.error(\"Resource update get failed on all nodes due to change \"\n            + \"resource on an unrecognized node: \" + nodeId);\n        throw RPCUtil.getRemoteException(\n            \"Resource update get failed on all nodes due to change resource \"\n                + \"on an unrecognized node: \" + nodeId);\n      }\n    }\n    \n    // do resource update on each node.\n    // Notice: it is still possible to have invalid NodeIDs as nodes decommission\n    // may happen just at the same time. This time, only log and skip absent\n    // nodes without throwing any exceptions.\n    boolean allSuccess \u003d true;\n    for (Map.Entry\u003cNodeId, ResourceOption\u003e entry : nodeResourceMap.entrySet()) {\n      ResourceOption newResourceOption \u003d entry.getValue();\n      NodeId nodeId \u003d entry.getKey();\n      RMNode node \u003d this.rmContext.getRMNodes().get(nodeId);\n      \n      if (node \u003d\u003d null) {\n        LOG.warn(\"Resource update get failed on an unrecognized node: \" + nodeId);\n        allSuccess \u003d false;\n      } else {\n        // update resource to RMNode\n        this.rmContext.getDispatcher().getEventHandler()\n          .handle(new RMNodeResourceUpdateEvent(nodeId, newResourceOption));\n        LOG.info(\"Update resource on node(\" + node.getNodeID()\n            + \") with resource(\" + newResourceOption.toString() + \")\");\n\n      }\n    }\n    if (allSuccess) {\n      RMAuditLogger.logSuccess(user.getShortUserName(), argName,\n          \"AdminService\");\n    }\n    UpdateNodeResourceResponse response \u003d \n        UpdateNodeResourceResponse.newInstance();\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/AdminService.java",
      "extendedDetails": {}
    },
    "5c14bc426b4be381383018ebc2236be83eef15cd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1506. Changed RMNode/SchedulerNode to update resource with event notification. Contributed by Junping Du\n",
      "commitDate": "29/08/14 11:05 PM",
      "commitName": "5c14bc426b4be381383018ebc2236be83eef15cd",
      "commitAuthor": "Jian He",
      "commitDateOld": "31/07/14 1:06 PM",
      "commitNameOld": "e52f67e3897a67a0b6d29e557a31cfa881738821",
      "commitAuthorOld": "Xuan Gong",
      "daysBetweenCommits": 29.42,
      "commitsBetweenForRepo": 251,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,58 @@\n   public UpdateNodeResourceResponse updateNodeResource(\n       UpdateNodeResourceRequest request) throws YarnException, IOException {\n+    String argName \u003d \"updateNodeResource\";\n+    UserGroupInformation user \u003d checkAcls(argName);\n+    \n+    if (!isRMActive()) {\n+      RMAuditLogger.logFailure(user.getShortUserName(), argName,\n+          adminAcl.toString(), \"AdminService\",\n+          \"ResourceManager is not active. Can not update node resource.\");\n+      throwStandbyException();\n+    }\n+    \n     Map\u003cNodeId, ResourceOption\u003e nodeResourceMap \u003d request.getNodeResourceMap();\n     Set\u003cNodeId\u003e nodeIds \u003d nodeResourceMap.keySet();\n     // verify nodes are all valid first. \n     // if any invalid nodes, throw exception instead of partially updating\n     // valid nodes.\n     for (NodeId nodeId : nodeIds) {\n       RMNode node \u003d this.rmContext.getRMNodes().get(nodeId);\n       if (node \u003d\u003d null) {\n         LOG.error(\"Resource update get failed on all nodes due to change \"\n             + \"resource on an unrecognized node: \" + nodeId);\n         throw RPCUtil.getRemoteException(\n             \"Resource update get failed on all nodes due to change resource \"\n                 + \"on an unrecognized node: \" + nodeId);\n       }\n     }\n     \n     // do resource update on each node.\n     // Notice: it is still possible to have invalid NodeIDs as nodes decommission\n     // may happen just at the same time. This time, only log and skip absent\n     // nodes without throwing any exceptions.\n+    boolean allSuccess \u003d true;\n     for (Map.Entry\u003cNodeId, ResourceOption\u003e entry : nodeResourceMap.entrySet()) {\n       ResourceOption newResourceOption \u003d entry.getValue();\n       NodeId nodeId \u003d entry.getKey();\n       RMNode node \u003d this.rmContext.getRMNodes().get(nodeId);\n+      \n       if (node \u003d\u003d null) {\n         LOG.warn(\"Resource update get failed on an unrecognized node: \" + nodeId);\n+        allSuccess \u003d false;\n       } else {\n-        node.setResourceOption(newResourceOption);\n-        LOG.info(\"Update resource successfully on node(\" + node.getNodeID()\n-            +\") with resource(\" + newResourceOption.toString() + \")\");\n+        // update resource to RMNode\n+        this.rmContext.getDispatcher().getEventHandler()\n+          .handle(new RMNodeResourceUpdateEvent(nodeId, newResourceOption));\n+        LOG.info(\"Update resource on node(\" + node.getNodeID()\n+            + \") with resource(\" + newResourceOption.toString() + \")\");\n+\n       }\n     }\n-    UpdateNodeResourceResponse response \u003d recordFactory.newRecordInstance(\n-          UpdateNodeResourceResponse.class);\n-      return response;\n+    if (allSuccess) {\n+      RMAuditLogger.logSuccess(user.getShortUserName(), argName,\n+          \"AdminService\");\n+    }\n+    UpdateNodeResourceResponse response \u003d \n+        UpdateNodeResourceResponse.newInstance();\n+    return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public UpdateNodeResourceResponse updateNodeResource(\n      UpdateNodeResourceRequest request) throws YarnException, IOException {\n    String argName \u003d \"updateNodeResource\";\n    UserGroupInformation user \u003d checkAcls(argName);\n    \n    if (!isRMActive()) {\n      RMAuditLogger.logFailure(user.getShortUserName(), argName,\n          adminAcl.toString(), \"AdminService\",\n          \"ResourceManager is not active. Can not update node resource.\");\n      throwStandbyException();\n    }\n    \n    Map\u003cNodeId, ResourceOption\u003e nodeResourceMap \u003d request.getNodeResourceMap();\n    Set\u003cNodeId\u003e nodeIds \u003d nodeResourceMap.keySet();\n    // verify nodes are all valid first. \n    // if any invalid nodes, throw exception instead of partially updating\n    // valid nodes.\n    for (NodeId nodeId : nodeIds) {\n      RMNode node \u003d this.rmContext.getRMNodes().get(nodeId);\n      if (node \u003d\u003d null) {\n        LOG.error(\"Resource update get failed on all nodes due to change \"\n            + \"resource on an unrecognized node: \" + nodeId);\n        throw RPCUtil.getRemoteException(\n            \"Resource update get failed on all nodes due to change resource \"\n                + \"on an unrecognized node: \" + nodeId);\n      }\n    }\n    \n    // do resource update on each node.\n    // Notice: it is still possible to have invalid NodeIDs as nodes decommission\n    // may happen just at the same time. This time, only log and skip absent\n    // nodes without throwing any exceptions.\n    boolean allSuccess \u003d true;\n    for (Map.Entry\u003cNodeId, ResourceOption\u003e entry : nodeResourceMap.entrySet()) {\n      ResourceOption newResourceOption \u003d entry.getValue();\n      NodeId nodeId \u003d entry.getKey();\n      RMNode node \u003d this.rmContext.getRMNodes().get(nodeId);\n      \n      if (node \u003d\u003d null) {\n        LOG.warn(\"Resource update get failed on an unrecognized node: \" + nodeId);\n        allSuccess \u003d false;\n      } else {\n        // update resource to RMNode\n        this.rmContext.getDispatcher().getEventHandler()\n          .handle(new RMNodeResourceUpdateEvent(nodeId, newResourceOption));\n        LOG.info(\"Update resource on node(\" + node.getNodeID()\n            + \") with resource(\" + newResourceOption.toString() + \")\");\n\n      }\n    }\n    if (allSuccess) {\n      RMAuditLogger.logSuccess(user.getShortUserName(), argName,\n          \"AdminService\");\n    }\n    UpdateNodeResourceResponse response \u003d \n        UpdateNodeResourceResponse.newInstance();\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/AdminService.java",
      "extendedDetails": {}
    },
    "49ad07af9782c2c2608799573e815a7cfc26851f": {
      "type": "Yintroduced",
      "commitMessage": "YARN-312. Introduced ResourceManagerAdministrationProtocol changes to support changing resources on node. Contributed by Junping Du.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1551403 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/12/13 3:36 PM",
      "commitName": "49ad07af9782c2c2608799573e815a7cfc26851f",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,38 @@\n+  public UpdateNodeResourceResponse updateNodeResource(\n+      UpdateNodeResourceRequest request) throws YarnException, IOException {\n+    Map\u003cNodeId, ResourceOption\u003e nodeResourceMap \u003d request.getNodeResourceMap();\n+    Set\u003cNodeId\u003e nodeIds \u003d nodeResourceMap.keySet();\n+    // verify nodes are all valid first. \n+    // if any invalid nodes, throw exception instead of partially updating\n+    // valid nodes.\n+    for (NodeId nodeId : nodeIds) {\n+      RMNode node \u003d this.rmContext.getRMNodes().get(nodeId);\n+      if (node \u003d\u003d null) {\n+        LOG.error(\"Resource update get failed on all nodes due to change \"\n+            + \"resource on an unrecognized node: \" + nodeId);\n+        throw RPCUtil.getRemoteException(\n+            \"Resource update get failed on all nodes due to change resource \"\n+                + \"on an unrecognized node: \" + nodeId);\n+      }\n+    }\n+    \n+    // do resource update on each node.\n+    // Notice: it is still possible to have invalid NodeIDs as nodes decommission\n+    // may happen just at the same time. This time, only log and skip absent\n+    // nodes without throwing any exceptions.\n+    for (Map.Entry\u003cNodeId, ResourceOption\u003e entry : nodeResourceMap.entrySet()) {\n+      ResourceOption newResourceOption \u003d entry.getValue();\n+      NodeId nodeId \u003d entry.getKey();\n+      RMNode node \u003d this.rmContext.getRMNodes().get(nodeId);\n+      if (node \u003d\u003d null) {\n+        LOG.warn(\"Resource update get failed on an unrecognized node: \" + nodeId);\n+      } else {\n+        node.setResourceOption(newResourceOption);\n+        LOG.info(\"Update resource successfully on node(\" + node.getNodeID()\n+            +\") with resource(\" + newResourceOption.toString() + \")\");\n+      }\n+    }\n+    UpdateNodeResourceResponse response \u003d recordFactory.newRecordInstance(\n+          UpdateNodeResourceResponse.class);\n+      return response;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public UpdateNodeResourceResponse updateNodeResource(\n      UpdateNodeResourceRequest request) throws YarnException, IOException {\n    Map\u003cNodeId, ResourceOption\u003e nodeResourceMap \u003d request.getNodeResourceMap();\n    Set\u003cNodeId\u003e nodeIds \u003d nodeResourceMap.keySet();\n    // verify nodes are all valid first. \n    // if any invalid nodes, throw exception instead of partially updating\n    // valid nodes.\n    for (NodeId nodeId : nodeIds) {\n      RMNode node \u003d this.rmContext.getRMNodes().get(nodeId);\n      if (node \u003d\u003d null) {\n        LOG.error(\"Resource update get failed on all nodes due to change \"\n            + \"resource on an unrecognized node: \" + nodeId);\n        throw RPCUtil.getRemoteException(\n            \"Resource update get failed on all nodes due to change resource \"\n                + \"on an unrecognized node: \" + nodeId);\n      }\n    }\n    \n    // do resource update on each node.\n    // Notice: it is still possible to have invalid NodeIDs as nodes decommission\n    // may happen just at the same time. This time, only log and skip absent\n    // nodes without throwing any exceptions.\n    for (Map.Entry\u003cNodeId, ResourceOption\u003e entry : nodeResourceMap.entrySet()) {\n      ResourceOption newResourceOption \u003d entry.getValue();\n      NodeId nodeId \u003d entry.getKey();\n      RMNode node \u003d this.rmContext.getRMNodes().get(nodeId);\n      if (node \u003d\u003d null) {\n        LOG.warn(\"Resource update get failed on an unrecognized node: \" + nodeId);\n      } else {\n        node.setResourceOption(newResourceOption);\n        LOG.info(\"Update resource successfully on node(\" + node.getNodeID()\n            +\") with resource(\" + newResourceOption.toString() + \")\");\n      }\n    }\n    UpdateNodeResourceResponse response \u003d recordFactory.newRecordInstance(\n          UpdateNodeResourceResponse.class);\n      return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/AdminService.java"
    }
  }
}