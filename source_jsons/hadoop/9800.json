{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TextFileRegionAliasMap.java",
  "functionName": "nextInternal",
  "functionId": "nextInternal___i-Iterator__FileRegion__",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/blockaliasmap/impl/TextFileRegionAliasMap.java",
  "functionStartLine": 347,
  "functionEndLine": 368,
  "numCommitsSeen": 9,
  "timeTaken": 3599,
  "changeHistory": [
    "73746c5da76d5e39df131534a1ec35dfc5d2529b",
    "4531588a94dcd2b4141b12828cb60ca3b953a58c",
    "9c35be86e17021202823bfd3c2067ff3b312ce5c",
    "352f994b6484524cdcfcda021046c59905b62f31",
    "98f5ed5aa377ddd3f35b763b20c499d2ccac2ed5",
    "b668eb91556b8c85c2b4925808ccb1f769031c20"
  ],
  "changeHistoryShort": {
    "73746c5da76d5e39df131534a1ec35dfc5d2529b": "Ybodychange",
    "4531588a94dcd2b4141b12828cb60ca3b953a58c": "Ybodychange",
    "9c35be86e17021202823bfd3c2067ff3b312ce5c": "Ybodychange",
    "352f994b6484524cdcfcda021046c59905b62f31": "Ybodychange",
    "98f5ed5aa377ddd3f35b763b20c499d2ccac2ed5": "Yfilerename",
    "b668eb91556b8c85c2b4925808ccb1f769031c20": "Yintroduced"
  },
  "changeHistoryDetails": {
    "73746c5da76d5e39df131534a1ec35dfc5d2529b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13707. [PROVIDED Storage] Fix failing integration tests in ITestProvidedImplementation. Contributed by Virajith Jalaparti.\n",
      "commitDate": "29/06/18 9:56 AM",
      "commitName": "73746c5da76d5e39df131534a1ec35dfc5d2529b",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "15/12/17 5:51 PM",
      "commitNameOld": "8239e3afb31d3c4485817d4b8b8b195b554acbe7",
      "commitAuthorOld": "Virajith Jalaparti",
      "daysBetweenCommits": 195.63,
      "commitsBetweenForRepo": 1878,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n     private FileRegion nextInternal(Iterator\u003cFileRegion\u003e i) throws IOException {\n       BufferedReader r \u003d iterators.get(i);\n       if (null \u003d\u003d r) {\n         throw new IllegalStateException();\n       }\n       String line \u003d r.readLine();\n       if (null \u003d\u003d line) {\n         iterators.remove(i);\n         return null;\n       }\n       String[] f \u003d line.split(delim);\n       if (f.length !\u003d 5 \u0026\u0026 f.length !\u003d 6) {\n         throw new IOException(\"Invalid line: \" + line);\n       }\n       byte[] nonce \u003d new byte[0];\n       if (f.length \u003d\u003d 6) {\n-        nonce \u003d f[5].getBytes(Charset.forName(\"UTF-8\"));\n+        nonce \u003d Base64.getDecoder().decode(f[5]);\n       }\n       return new FileRegion(Long.parseLong(f[0]), new Path(f[1]),\n           Long.parseLong(f[2]), Long.parseLong(f[3]), Long.parseLong(f[4]),\n           nonce);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private FileRegion nextInternal(Iterator\u003cFileRegion\u003e i) throws IOException {\n      BufferedReader r \u003d iterators.get(i);\n      if (null \u003d\u003d r) {\n        throw new IllegalStateException();\n      }\n      String line \u003d r.readLine();\n      if (null \u003d\u003d line) {\n        iterators.remove(i);\n        return null;\n      }\n      String[] f \u003d line.split(delim);\n      if (f.length !\u003d 5 \u0026\u0026 f.length !\u003d 6) {\n        throw new IOException(\"Invalid line: \" + line);\n      }\n      byte[] nonce \u003d new byte[0];\n      if (f.length \u003d\u003d 6) {\n        nonce \u003d Base64.getDecoder().decode(f[5]);\n      }\n      return new FileRegion(Long.parseLong(f[0]), new Path(f[1]),\n          Long.parseLong(f[2]), Long.parseLong(f[3]), Long.parseLong(f[4]),\n          nonce);\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/blockaliasmap/impl/TextFileRegionAliasMap.java",
      "extendedDetails": {}
    },
    "4531588a94dcd2b4141b12828cb60ca3b953a58c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11640. [READ] Datanodes should use a unique identifier when reading from external stores\n",
      "commitDate": "15/12/17 5:51 PM",
      "commitName": "4531588a94dcd2b4141b12828cb60ca3b953a58c",
      "commitAuthor": "Virajith Jalaparti",
      "commitDateOld": "15/12/17 5:51 PM",
      "commitNameOld": "9c35be86e17021202823bfd3c2067ff3b312ce5c",
      "commitAuthorOld": "Virajith Jalaparti",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,22 @@\n     private FileRegion nextInternal(Iterator\u003cFileRegion\u003e i) throws IOException {\n       BufferedReader r \u003d iterators.get(i);\n       if (null \u003d\u003d r) {\n         throw new IllegalStateException();\n       }\n       String line \u003d r.readLine();\n       if (null \u003d\u003d line) {\n         iterators.remove(i);\n         return null;\n       }\n       String[] f \u003d line.split(delim);\n-      if (f.length !\u003d 5) {\n+      if (f.length !\u003d 5 \u0026\u0026 f.length !\u003d 6) {\n         throw new IOException(\"Invalid line: \" + line);\n       }\n+      byte[] nonce \u003d new byte[0];\n+      if (f.length \u003d\u003d 6) {\n+        nonce \u003d f[5].getBytes(Charset.forName(\"UTF-8\"));\n+      }\n       return new FileRegion(Long.parseLong(f[0]), new Path(f[1]),\n-          Long.parseLong(f[2]), Long.parseLong(f[3]), Long.parseLong(f[4]));\n+          Long.parseLong(f[2]), Long.parseLong(f[3]), Long.parseLong(f[4]),\n+          nonce);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private FileRegion nextInternal(Iterator\u003cFileRegion\u003e i) throws IOException {\n      BufferedReader r \u003d iterators.get(i);\n      if (null \u003d\u003d r) {\n        throw new IllegalStateException();\n      }\n      String line \u003d r.readLine();\n      if (null \u003d\u003d line) {\n        iterators.remove(i);\n        return null;\n      }\n      String[] f \u003d line.split(delim);\n      if (f.length !\u003d 5 \u0026\u0026 f.length !\u003d 6) {\n        throw new IOException(\"Invalid line: \" + line);\n      }\n      byte[] nonce \u003d new byte[0];\n      if (f.length \u003d\u003d 6) {\n        nonce \u003d f[5].getBytes(Charset.forName(\"UTF-8\"));\n      }\n      return new FileRegion(Long.parseLong(f[0]), new Path(f[1]),\n          Long.parseLong(f[2]), Long.parseLong(f[3]), Long.parseLong(f[4]),\n          nonce);\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/blockaliasmap/impl/TextFileRegionAliasMap.java",
      "extendedDetails": {}
    },
    "9c35be86e17021202823bfd3c2067ff3b312ce5c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12713. [READ] Refactor FileRegion and BlockAliasMap to separate out HDFS metadata and PROVIDED storage metadata. Contributed by Ewan Higgs\n",
      "commitDate": "15/12/17 5:51 PM",
      "commitName": "9c35be86e17021202823bfd3c2067ff3b312ce5c",
      "commitAuthor": "Virajith Jalaparti",
      "commitDateOld": "15/12/17 5:51 PM",
      "commitNameOld": "a027055dd2bf5009fe272e9ceb08305bd0a8cc31",
      "commitAuthorOld": "Virajith Jalaparti",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,17 @@\n     private FileRegion nextInternal(Iterator\u003cFileRegion\u003e i) throws IOException {\n       BufferedReader r \u003d iterators.get(i);\n       if (null \u003d\u003d r) {\n         throw new IllegalStateException();\n       }\n       String line \u003d r.readLine();\n       if (null \u003d\u003d line) {\n         iterators.remove(i);\n         return null;\n       }\n       String[] f \u003d line.split(delim);\n-      if (f.length !\u003d 6) {\n+      if (f.length !\u003d 5) {\n         throw new IOException(\"Invalid line: \" + line);\n       }\n       return new FileRegion(Long.parseLong(f[0]), new Path(f[1]),\n-          Long.parseLong(f[2]), Long.parseLong(f[3]), f[4],\n-          Long.parseLong(f[5]));\n+          Long.parseLong(f[2]), Long.parseLong(f[3]), Long.parseLong(f[4]));\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private FileRegion nextInternal(Iterator\u003cFileRegion\u003e i) throws IOException {\n      BufferedReader r \u003d iterators.get(i);\n      if (null \u003d\u003d r) {\n        throw new IllegalStateException();\n      }\n      String line \u003d r.readLine();\n      if (null \u003d\u003d line) {\n        iterators.remove(i);\n        return null;\n      }\n      String[] f \u003d line.split(delim);\n      if (f.length !\u003d 5) {\n        throw new IOException(\"Invalid line: \" + line);\n      }\n      return new FileRegion(Long.parseLong(f[0]), new Path(f[1]),\n          Long.parseLong(f[2]), Long.parseLong(f[3]), Long.parseLong(f[4]));\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/blockaliasmap/impl/TextFileRegionAliasMap.java",
      "extendedDetails": {}
    },
    "352f994b6484524cdcfcda021046c59905b62f31": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12665. [AliasMap] Create a version of the AliasMap that runs in memory in the Namenode (leveldb). Contributed by Ewan Higgs.\n",
      "commitDate": "15/12/17 5:51 PM",
      "commitName": "352f994b6484524cdcfcda021046c59905b62f31",
      "commitAuthor": "Virajith Jalaparti",
      "commitDateOld": "15/12/17 5:51 PM",
      "commitNameOld": "cc933cba77c147153e463415fc192cee2d53a1ef",
      "commitAuthorOld": "Virajith Jalaparti",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n     private FileRegion nextInternal(Iterator\u003cFileRegion\u003e i) throws IOException {\n       BufferedReader r \u003d iterators.get(i);\n       if (null \u003d\u003d r) {\n         throw new IllegalStateException();\n       }\n       String line \u003d r.readLine();\n       if (null \u003d\u003d line) {\n         iterators.remove(i);\n         return null;\n       }\n       String[] f \u003d line.split(delim);\n       if (f.length !\u003d 6) {\n         throw new IOException(\"Invalid line: \" + line);\n       }\n       return new FileRegion(Long.parseLong(f[0]), new Path(f[1]),\n-          Long.parseLong(f[2]), Long.parseLong(f[3]), f[5],\n-          Long.parseLong(f[4]));\n+          Long.parseLong(f[2]), Long.parseLong(f[3]), f[4],\n+          Long.parseLong(f[5]));\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private FileRegion nextInternal(Iterator\u003cFileRegion\u003e i) throws IOException {\n      BufferedReader r \u003d iterators.get(i);\n      if (null \u003d\u003d r) {\n        throw new IllegalStateException();\n      }\n      String line \u003d r.readLine();\n      if (null \u003d\u003d line) {\n        iterators.remove(i);\n        return null;\n      }\n      String[] f \u003d line.split(delim);\n      if (f.length !\u003d 6) {\n        throw new IOException(\"Invalid line: \" + line);\n      }\n      return new FileRegion(Long.parseLong(f[0]), new Path(f[1]),\n          Long.parseLong(f[2]), Long.parseLong(f[3]), f[4],\n          Long.parseLong(f[5]));\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/blockaliasmap/impl/TextFileRegionAliasMap.java",
      "extendedDetails": {}
    },
    "98f5ed5aa377ddd3f35b763b20c499d2ccac2ed5": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-11902. [READ] Merge BlockFormatProvider and FileRegionProvider.\n",
      "commitDate": "15/12/17 5:51 PM",
      "commitName": "98f5ed5aa377ddd3f35b763b20c499d2ccac2ed5",
      "commitAuthor": "Virajith Jalaparti",
      "commitDateOld": "15/12/17 5:51 PM",
      "commitNameOld": "d6a9a8997339939b59ce36246225f7cc45b21da5",
      "commitAuthorOld": "Virajith Jalaparti",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private FileRegion nextInternal(Iterator\u003cFileRegion\u003e i) throws IOException {\n      BufferedReader r \u003d iterators.get(i);\n      if (null \u003d\u003d r) {\n        throw new IllegalStateException();\n      }\n      String line \u003d r.readLine();\n      if (null \u003d\u003d line) {\n        iterators.remove(i);\n        return null;\n      }\n      String[] f \u003d line.split(delim);\n      if (f.length !\u003d 6) {\n        throw new IOException(\"Invalid line: \" + line);\n      }\n      return new FileRegion(Long.parseLong(f[0]), new Path(f[1]),\n          Long.parseLong(f[2]), Long.parseLong(f[3]), f[5],\n          Long.parseLong(f[4]));\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/blockaliasmap/impl/TextFileRegionAliasMap.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/TextFileRegionFormat.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/blockaliasmap/impl/TextFileRegionAliasMap.java"
      }
    },
    "b668eb91556b8c85c2b4925808ccb1f769031c20": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-10675. Datanode support to read from external stores.\n",
      "commitDate": "15/12/17 5:51 PM",
      "commitName": "b668eb91556b8c85c2b4925808ccb1f769031c20",
      "commitAuthor": "Virajith Jalaparti",
      "diff": "@@ -0,0 +1,18 @@\n+    private FileRegion nextInternal(Iterator\u003cFileRegion\u003e i) throws IOException {\n+      BufferedReader r \u003d iterators.get(i);\n+      if (null \u003d\u003d r) {\n+        throw new IllegalStateException();\n+      }\n+      String line \u003d r.readLine();\n+      if (null \u003d\u003d line) {\n+        iterators.remove(i);\n+        return null;\n+      }\n+      String[] f \u003d line.split(delim);\n+      if (f.length !\u003d 6) {\n+        throw new IOException(\"Invalid line: \" + line);\n+      }\n+      return new FileRegion(Long.parseLong(f[0]), new Path(f[1]),\n+          Long.parseLong(f[2]), Long.parseLong(f[3]), f[5],\n+          Long.parseLong(f[4]));\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private FileRegion nextInternal(Iterator\u003cFileRegion\u003e i) throws IOException {\n      BufferedReader r \u003d iterators.get(i);\n      if (null \u003d\u003d r) {\n        throw new IllegalStateException();\n      }\n      String line \u003d r.readLine();\n      if (null \u003d\u003d line) {\n        iterators.remove(i);\n        return null;\n      }\n      String[] f \u003d line.split(delim);\n      if (f.length !\u003d 6) {\n        throw new IOException(\"Invalid line: \" + line);\n      }\n      return new FileRegion(Long.parseLong(f[0]), new Path(f[1]),\n          Long.parseLong(f[2]), Long.parseLong(f[3]), f[5],\n          Long.parseLong(f[4]));\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/TextFileRegionFormat.java"
    }
  }
}