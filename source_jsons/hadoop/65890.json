{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DynamoDBMetadataStoreTableManager.java",
  "functionName": "initTable",
  "functionId": "initTable",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStoreTableManager.java",
  "functionStartLine": 166,
  "functionEndLine": 241,
  "numCommitsSeen": 38,
  "timeTaken": 5927,
  "changeHistory": [
    "4a700c20d553dc5336ee881719bcf189fc46bfbf",
    "4e38dafde4dce8cd8c368783a291e830f06e1def",
    "6d0bffe17eadedd60d4599427248b0db4a7c5502",
    "7f783970364930cc461d1a73833bc58cdd10553e",
    "d7152332b32a575c3a92e3f4c44b95e58462528d",
    "ee816f1fd78b029b9efa567e8b1b62391563de14",
    "de8b6ca5ef8614de6d6277b7617e27c788b0555c",
    "47011d7dd300b0c74bb6cfe25b918c479d718f4f",
    "621b43e254afaff708cd6fc4698b29628f6abc33"
  ],
  "changeHistoryShort": {
    "4a700c20d553dc5336ee881719bcf189fc46bfbf": "Ymultichange(Ymovefromfile,Yreturntypechange,Ybodychange)",
    "4e38dafde4dce8cd8c368783a291e830f06e1def": "Ybodychange",
    "6d0bffe17eadedd60d4599427248b0db4a7c5502": "Ybodychange",
    "7f783970364930cc461d1a73833bc58cdd10553e": "Ybodychange",
    "d7152332b32a575c3a92e3f4c44b95e58462528d": "Ybodychange",
    "ee816f1fd78b029b9efa567e8b1b62391563de14": "Ybodychange",
    "de8b6ca5ef8614de6d6277b7617e27c788b0555c": "Ybodychange",
    "47011d7dd300b0c74bb6cfe25b918c479d718f4f": "Ybodychange",
    "621b43e254afaff708cd6fc4698b29628f6abc33": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4a700c20d553dc5336ee881719bcf189fc46bfbf": {
      "type": "Ymultichange(Ymovefromfile,Yreturntypechange,Ybodychange)",
      "commitMessage": "HADOOP-16520. Race condition in DDB table init and waiting threads.  (#1576). Contributed by Gabor Bota.\n\nFixes HADOOP-16349. DynamoDBMetadataStore.getVersionMarkerItem() to log at info/warn on retry\r\n\r\nChange-Id: Ia83e92b9039ccb780090c99c41b4f71ef7539d35",
      "commitDate": "11/10/19 3:08 AM",
      "commitName": "4a700c20d553dc5336ee881719bcf189fc46bfbf",
      "commitAuthor": "Gabor Bota",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HADOOP-16520. Race condition in DDB table init and waiting threads.  (#1576). Contributed by Gabor Bota.\n\nFixes HADOOP-16349. DynamoDBMetadataStore.getVersionMarkerItem() to log at info/warn on retry\r\n\r\nChange-Id: Ia83e92b9039ccb780090c99c41b4f71ef7539d35",
          "commitDate": "11/10/19 3:08 AM",
          "commitName": "4a700c20d553dc5336ee881719bcf189fc46bfbf",
          "commitAuthor": "Gabor Bota",
          "commitDateOld": "10/10/19 10:33 PM",
          "commitNameOld": "f267917ce3cf282b32166e39af871a8d1231d090",
          "commitAuthorOld": "Xiaoyu Yao",
          "daysBetweenCommits": 0.19,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,73 +1,76 @@\n-  void initTable() throws IOException {\n+  Table initTable() throws IOException {\n     table \u003d dynamoDB.getTable(tableName);\n     try {\n       try {\n         LOG.debug(\"Binding to table {}\", tableName);\n         TableDescription description \u003d table.describe();\n         LOG.debug(\"Table state: {}\", description);\n         tableArn \u003d description.getTableArn();\n         final String status \u003d description.getTableStatus();\n         switch (status) {\n         case \"CREATING\":\n           LOG.debug(\"Table {} in region {} is being created/updated. This may\"\n                   + \" indicate that the table is being operated by another \"\n                   + \"concurrent thread or process. Waiting for active...\",\n               tableName, region);\n           waitForTableActive(table);\n           break;\n         case \"DELETING\":\n           throw new FileNotFoundException(\"DynamoDB table \"\n               + \"\u0027\" + tableName + \"\u0027 is being \"\n               + \"deleted in region \" + region);\n         case \"UPDATING\":\n           // table being updated; it can still be used.\n           LOG.debug(\"Table is being updated.\");\n           break;\n         case \"ACTIVE\":\n           break;\n         default:\n           throw new IOException(\"Unknown DynamoDB table status \" + status\n               + \": tableName\u003d\u0027\" + tableName + \"\u0027, region\u003d\" + region);\n         }\n \n+        verifyVersionCompatibility();\n         final Item versionMarker \u003d getVersionMarkerItem();\n-        verifyVersionCompatibility(tableName, versionMarker);\n         Long created \u003d extractCreationTimeFromMarker(versionMarker);\n         LOG.debug(\"Using existing DynamoDB table {} in region {} created {}\",\n             tableName, region, (created !\u003d null) ? new Date(created) : null);\n       } catch (ResourceNotFoundException rnfe) {\n         if (conf.getBoolean(S3GUARD_DDB_TABLE_CREATE_KEY, false)) {\n           long readCapacity \u003d conf.getLong(S3GUARD_DDB_TABLE_CAPACITY_READ_KEY,\n               S3GUARD_DDB_TABLE_CAPACITY_READ_DEFAULT);\n           long writeCapacity \u003d conf.getLong(\n               S3GUARD_DDB_TABLE_CAPACITY_WRITE_KEY,\n               S3GUARD_DDB_TABLE_CAPACITY_WRITE_DEFAULT);\n           ProvisionedThroughput capacity;\n           if (readCapacity \u003e 0 \u0026\u0026 writeCapacity \u003e 0) {\n             capacity \u003d new ProvisionedThroughput(\n                 readCapacity,\n                 writeCapacity);\n           } else {\n             // at least one capacity value is \u003c\u003d 0\n             // verify they are both exactly zero\n             Preconditions.checkArgument(\n                 readCapacity \u003d\u003d 0 \u0026\u0026 writeCapacity \u003d\u003d 0,\n                 \"S3Guard table read capacity %d and and write capacity %d\"\n                     + \" are inconsistent\", readCapacity, writeCapacity);\n             // and set the capacity to null for per-request billing.\n             capacity \u003d null;\n           }\n \n           createTable(capacity);\n         } else {\n-          throw (FileNotFoundException)new FileNotFoundException(\n+          throw (FileNotFoundException) new FileNotFoundException(\n               \"DynamoDB table \u0027\" + tableName + \"\u0027 does not \"\n-              + \"exist in region \" + region + \"; auto-creation is turned off\")\n+                  + \"exist in region \" + region +\n+                  \"; auto-creation is turned off\")\n               .initCause(rnfe);\n         }\n       }\n \n     } catch (AmazonClientException e) {\n       throw translateException(\"initTable\", tableName, e);\n     }\n+\n+    return table;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  Table initTable() throws IOException {\n    table \u003d dynamoDB.getTable(tableName);\n    try {\n      try {\n        LOG.debug(\"Binding to table {}\", tableName);\n        TableDescription description \u003d table.describe();\n        LOG.debug(\"Table state: {}\", description);\n        tableArn \u003d description.getTableArn();\n        final String status \u003d description.getTableStatus();\n        switch (status) {\n        case \"CREATING\":\n          LOG.debug(\"Table {} in region {} is being created/updated. This may\"\n                  + \" indicate that the table is being operated by another \"\n                  + \"concurrent thread or process. Waiting for active...\",\n              tableName, region);\n          waitForTableActive(table);\n          break;\n        case \"DELETING\":\n          throw new FileNotFoundException(\"DynamoDB table \"\n              + \"\u0027\" + tableName + \"\u0027 is being \"\n              + \"deleted in region \" + region);\n        case \"UPDATING\":\n          // table being updated; it can still be used.\n          LOG.debug(\"Table is being updated.\");\n          break;\n        case \"ACTIVE\":\n          break;\n        default:\n          throw new IOException(\"Unknown DynamoDB table status \" + status\n              + \": tableName\u003d\u0027\" + tableName + \"\u0027, region\u003d\" + region);\n        }\n\n        verifyVersionCompatibility();\n        final Item versionMarker \u003d getVersionMarkerItem();\n        Long created \u003d extractCreationTimeFromMarker(versionMarker);\n        LOG.debug(\"Using existing DynamoDB table {} in region {} created {}\",\n            tableName, region, (created !\u003d null) ? new Date(created) : null);\n      } catch (ResourceNotFoundException rnfe) {\n        if (conf.getBoolean(S3GUARD_DDB_TABLE_CREATE_KEY, false)) {\n          long readCapacity \u003d conf.getLong(S3GUARD_DDB_TABLE_CAPACITY_READ_KEY,\n              S3GUARD_DDB_TABLE_CAPACITY_READ_DEFAULT);\n          long writeCapacity \u003d conf.getLong(\n              S3GUARD_DDB_TABLE_CAPACITY_WRITE_KEY,\n              S3GUARD_DDB_TABLE_CAPACITY_WRITE_DEFAULT);\n          ProvisionedThroughput capacity;\n          if (readCapacity \u003e 0 \u0026\u0026 writeCapacity \u003e 0) {\n            capacity \u003d new ProvisionedThroughput(\n                readCapacity,\n                writeCapacity);\n          } else {\n            // at least one capacity value is \u003c\u003d 0\n            // verify they are both exactly zero\n            Preconditions.checkArgument(\n                readCapacity \u003d\u003d 0 \u0026\u0026 writeCapacity \u003d\u003d 0,\n                \"S3Guard table read capacity %d and and write capacity %d\"\n                    + \" are inconsistent\", readCapacity, writeCapacity);\n            // and set the capacity to null for per-request billing.\n            capacity \u003d null;\n          }\n\n          createTable(capacity);\n        } else {\n          throw (FileNotFoundException) new FileNotFoundException(\n              \"DynamoDB table \u0027\" + tableName + \"\u0027 does not \"\n                  + \"exist in region \" + region +\n                  \"; auto-creation is turned off\")\n              .initCause(rnfe);\n        }\n      }\n\n    } catch (AmazonClientException e) {\n      throw translateException(\"initTable\", tableName, e);\n    }\n\n    return table;\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStoreTableManager.java",
          "extendedDetails": {
            "oldPath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java",
            "newPath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStoreTableManager.java",
            "oldMethodName": "initTable",
            "newMethodName": "initTable"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HADOOP-16520. Race condition in DDB table init and waiting threads.  (#1576). Contributed by Gabor Bota.\n\nFixes HADOOP-16349. DynamoDBMetadataStore.getVersionMarkerItem() to log at info/warn on retry\r\n\r\nChange-Id: Ia83e92b9039ccb780090c99c41b4f71ef7539d35",
          "commitDate": "11/10/19 3:08 AM",
          "commitName": "4a700c20d553dc5336ee881719bcf189fc46bfbf",
          "commitAuthor": "Gabor Bota",
          "commitDateOld": "10/10/19 10:33 PM",
          "commitNameOld": "f267917ce3cf282b32166e39af871a8d1231d090",
          "commitAuthorOld": "Xiaoyu Yao",
          "daysBetweenCommits": 0.19,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,73 +1,76 @@\n-  void initTable() throws IOException {\n+  Table initTable() throws IOException {\n     table \u003d dynamoDB.getTable(tableName);\n     try {\n       try {\n         LOG.debug(\"Binding to table {}\", tableName);\n         TableDescription description \u003d table.describe();\n         LOG.debug(\"Table state: {}\", description);\n         tableArn \u003d description.getTableArn();\n         final String status \u003d description.getTableStatus();\n         switch (status) {\n         case \"CREATING\":\n           LOG.debug(\"Table {} in region {} is being created/updated. This may\"\n                   + \" indicate that the table is being operated by another \"\n                   + \"concurrent thread or process. Waiting for active...\",\n               tableName, region);\n           waitForTableActive(table);\n           break;\n         case \"DELETING\":\n           throw new FileNotFoundException(\"DynamoDB table \"\n               + \"\u0027\" + tableName + \"\u0027 is being \"\n               + \"deleted in region \" + region);\n         case \"UPDATING\":\n           // table being updated; it can still be used.\n           LOG.debug(\"Table is being updated.\");\n           break;\n         case \"ACTIVE\":\n           break;\n         default:\n           throw new IOException(\"Unknown DynamoDB table status \" + status\n               + \": tableName\u003d\u0027\" + tableName + \"\u0027, region\u003d\" + region);\n         }\n \n+        verifyVersionCompatibility();\n         final Item versionMarker \u003d getVersionMarkerItem();\n-        verifyVersionCompatibility(tableName, versionMarker);\n         Long created \u003d extractCreationTimeFromMarker(versionMarker);\n         LOG.debug(\"Using existing DynamoDB table {} in region {} created {}\",\n             tableName, region, (created !\u003d null) ? new Date(created) : null);\n       } catch (ResourceNotFoundException rnfe) {\n         if (conf.getBoolean(S3GUARD_DDB_TABLE_CREATE_KEY, false)) {\n           long readCapacity \u003d conf.getLong(S3GUARD_DDB_TABLE_CAPACITY_READ_KEY,\n               S3GUARD_DDB_TABLE_CAPACITY_READ_DEFAULT);\n           long writeCapacity \u003d conf.getLong(\n               S3GUARD_DDB_TABLE_CAPACITY_WRITE_KEY,\n               S3GUARD_DDB_TABLE_CAPACITY_WRITE_DEFAULT);\n           ProvisionedThroughput capacity;\n           if (readCapacity \u003e 0 \u0026\u0026 writeCapacity \u003e 0) {\n             capacity \u003d new ProvisionedThroughput(\n                 readCapacity,\n                 writeCapacity);\n           } else {\n             // at least one capacity value is \u003c\u003d 0\n             // verify they are both exactly zero\n             Preconditions.checkArgument(\n                 readCapacity \u003d\u003d 0 \u0026\u0026 writeCapacity \u003d\u003d 0,\n                 \"S3Guard table read capacity %d and and write capacity %d\"\n                     + \" are inconsistent\", readCapacity, writeCapacity);\n             // and set the capacity to null for per-request billing.\n             capacity \u003d null;\n           }\n \n           createTable(capacity);\n         } else {\n-          throw (FileNotFoundException)new FileNotFoundException(\n+          throw (FileNotFoundException) new FileNotFoundException(\n               \"DynamoDB table \u0027\" + tableName + \"\u0027 does not \"\n-              + \"exist in region \" + region + \"; auto-creation is turned off\")\n+                  + \"exist in region \" + region +\n+                  \"; auto-creation is turned off\")\n               .initCause(rnfe);\n         }\n       }\n \n     } catch (AmazonClientException e) {\n       throw translateException(\"initTable\", tableName, e);\n     }\n+\n+    return table;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  Table initTable() throws IOException {\n    table \u003d dynamoDB.getTable(tableName);\n    try {\n      try {\n        LOG.debug(\"Binding to table {}\", tableName);\n        TableDescription description \u003d table.describe();\n        LOG.debug(\"Table state: {}\", description);\n        tableArn \u003d description.getTableArn();\n        final String status \u003d description.getTableStatus();\n        switch (status) {\n        case \"CREATING\":\n          LOG.debug(\"Table {} in region {} is being created/updated. This may\"\n                  + \" indicate that the table is being operated by another \"\n                  + \"concurrent thread or process. Waiting for active...\",\n              tableName, region);\n          waitForTableActive(table);\n          break;\n        case \"DELETING\":\n          throw new FileNotFoundException(\"DynamoDB table \"\n              + \"\u0027\" + tableName + \"\u0027 is being \"\n              + \"deleted in region \" + region);\n        case \"UPDATING\":\n          // table being updated; it can still be used.\n          LOG.debug(\"Table is being updated.\");\n          break;\n        case \"ACTIVE\":\n          break;\n        default:\n          throw new IOException(\"Unknown DynamoDB table status \" + status\n              + \": tableName\u003d\u0027\" + tableName + \"\u0027, region\u003d\" + region);\n        }\n\n        verifyVersionCompatibility();\n        final Item versionMarker \u003d getVersionMarkerItem();\n        Long created \u003d extractCreationTimeFromMarker(versionMarker);\n        LOG.debug(\"Using existing DynamoDB table {} in region {} created {}\",\n            tableName, region, (created !\u003d null) ? new Date(created) : null);\n      } catch (ResourceNotFoundException rnfe) {\n        if (conf.getBoolean(S3GUARD_DDB_TABLE_CREATE_KEY, false)) {\n          long readCapacity \u003d conf.getLong(S3GUARD_DDB_TABLE_CAPACITY_READ_KEY,\n              S3GUARD_DDB_TABLE_CAPACITY_READ_DEFAULT);\n          long writeCapacity \u003d conf.getLong(\n              S3GUARD_DDB_TABLE_CAPACITY_WRITE_KEY,\n              S3GUARD_DDB_TABLE_CAPACITY_WRITE_DEFAULT);\n          ProvisionedThroughput capacity;\n          if (readCapacity \u003e 0 \u0026\u0026 writeCapacity \u003e 0) {\n            capacity \u003d new ProvisionedThroughput(\n                readCapacity,\n                writeCapacity);\n          } else {\n            // at least one capacity value is \u003c\u003d 0\n            // verify they are both exactly zero\n            Preconditions.checkArgument(\n                readCapacity \u003d\u003d 0 \u0026\u0026 writeCapacity \u003d\u003d 0,\n                \"S3Guard table read capacity %d and and write capacity %d\"\n                    + \" are inconsistent\", readCapacity, writeCapacity);\n            // and set the capacity to null for per-request billing.\n            capacity \u003d null;\n          }\n\n          createTable(capacity);\n        } else {\n          throw (FileNotFoundException) new FileNotFoundException(\n              \"DynamoDB table \u0027\" + tableName + \"\u0027 does not \"\n                  + \"exist in region \" + region +\n                  \"; auto-creation is turned off\")\n              .initCause(rnfe);\n        }\n      }\n\n    } catch (AmazonClientException e) {\n      throw translateException(\"initTable\", tableName, e);\n    }\n\n    return table;\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStoreTableManager.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "Table"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-16520. Race condition in DDB table init and waiting threads.  (#1576). Contributed by Gabor Bota.\n\nFixes HADOOP-16349. DynamoDBMetadataStore.getVersionMarkerItem() to log at info/warn on retry\r\n\r\nChange-Id: Ia83e92b9039ccb780090c99c41b4f71ef7539d35",
          "commitDate": "11/10/19 3:08 AM",
          "commitName": "4a700c20d553dc5336ee881719bcf189fc46bfbf",
          "commitAuthor": "Gabor Bota",
          "commitDateOld": "10/10/19 10:33 PM",
          "commitNameOld": "f267917ce3cf282b32166e39af871a8d1231d090",
          "commitAuthorOld": "Xiaoyu Yao",
          "daysBetweenCommits": 0.19,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,73 +1,76 @@\n-  void initTable() throws IOException {\n+  Table initTable() throws IOException {\n     table \u003d dynamoDB.getTable(tableName);\n     try {\n       try {\n         LOG.debug(\"Binding to table {}\", tableName);\n         TableDescription description \u003d table.describe();\n         LOG.debug(\"Table state: {}\", description);\n         tableArn \u003d description.getTableArn();\n         final String status \u003d description.getTableStatus();\n         switch (status) {\n         case \"CREATING\":\n           LOG.debug(\"Table {} in region {} is being created/updated. This may\"\n                   + \" indicate that the table is being operated by another \"\n                   + \"concurrent thread or process. Waiting for active...\",\n               tableName, region);\n           waitForTableActive(table);\n           break;\n         case \"DELETING\":\n           throw new FileNotFoundException(\"DynamoDB table \"\n               + \"\u0027\" + tableName + \"\u0027 is being \"\n               + \"deleted in region \" + region);\n         case \"UPDATING\":\n           // table being updated; it can still be used.\n           LOG.debug(\"Table is being updated.\");\n           break;\n         case \"ACTIVE\":\n           break;\n         default:\n           throw new IOException(\"Unknown DynamoDB table status \" + status\n               + \": tableName\u003d\u0027\" + tableName + \"\u0027, region\u003d\" + region);\n         }\n \n+        verifyVersionCompatibility();\n         final Item versionMarker \u003d getVersionMarkerItem();\n-        verifyVersionCompatibility(tableName, versionMarker);\n         Long created \u003d extractCreationTimeFromMarker(versionMarker);\n         LOG.debug(\"Using existing DynamoDB table {} in region {} created {}\",\n             tableName, region, (created !\u003d null) ? new Date(created) : null);\n       } catch (ResourceNotFoundException rnfe) {\n         if (conf.getBoolean(S3GUARD_DDB_TABLE_CREATE_KEY, false)) {\n           long readCapacity \u003d conf.getLong(S3GUARD_DDB_TABLE_CAPACITY_READ_KEY,\n               S3GUARD_DDB_TABLE_CAPACITY_READ_DEFAULT);\n           long writeCapacity \u003d conf.getLong(\n               S3GUARD_DDB_TABLE_CAPACITY_WRITE_KEY,\n               S3GUARD_DDB_TABLE_CAPACITY_WRITE_DEFAULT);\n           ProvisionedThroughput capacity;\n           if (readCapacity \u003e 0 \u0026\u0026 writeCapacity \u003e 0) {\n             capacity \u003d new ProvisionedThroughput(\n                 readCapacity,\n                 writeCapacity);\n           } else {\n             // at least one capacity value is \u003c\u003d 0\n             // verify they are both exactly zero\n             Preconditions.checkArgument(\n                 readCapacity \u003d\u003d 0 \u0026\u0026 writeCapacity \u003d\u003d 0,\n                 \"S3Guard table read capacity %d and and write capacity %d\"\n                     + \" are inconsistent\", readCapacity, writeCapacity);\n             // and set the capacity to null for per-request billing.\n             capacity \u003d null;\n           }\n \n           createTable(capacity);\n         } else {\n-          throw (FileNotFoundException)new FileNotFoundException(\n+          throw (FileNotFoundException) new FileNotFoundException(\n               \"DynamoDB table \u0027\" + tableName + \"\u0027 does not \"\n-              + \"exist in region \" + region + \"; auto-creation is turned off\")\n+                  + \"exist in region \" + region +\n+                  \"; auto-creation is turned off\")\n               .initCause(rnfe);\n         }\n       }\n \n     } catch (AmazonClientException e) {\n       throw translateException(\"initTable\", tableName, e);\n     }\n+\n+    return table;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  Table initTable() throws IOException {\n    table \u003d dynamoDB.getTable(tableName);\n    try {\n      try {\n        LOG.debug(\"Binding to table {}\", tableName);\n        TableDescription description \u003d table.describe();\n        LOG.debug(\"Table state: {}\", description);\n        tableArn \u003d description.getTableArn();\n        final String status \u003d description.getTableStatus();\n        switch (status) {\n        case \"CREATING\":\n          LOG.debug(\"Table {} in region {} is being created/updated. This may\"\n                  + \" indicate that the table is being operated by another \"\n                  + \"concurrent thread or process. Waiting for active...\",\n              tableName, region);\n          waitForTableActive(table);\n          break;\n        case \"DELETING\":\n          throw new FileNotFoundException(\"DynamoDB table \"\n              + \"\u0027\" + tableName + \"\u0027 is being \"\n              + \"deleted in region \" + region);\n        case \"UPDATING\":\n          // table being updated; it can still be used.\n          LOG.debug(\"Table is being updated.\");\n          break;\n        case \"ACTIVE\":\n          break;\n        default:\n          throw new IOException(\"Unknown DynamoDB table status \" + status\n              + \": tableName\u003d\u0027\" + tableName + \"\u0027, region\u003d\" + region);\n        }\n\n        verifyVersionCompatibility();\n        final Item versionMarker \u003d getVersionMarkerItem();\n        Long created \u003d extractCreationTimeFromMarker(versionMarker);\n        LOG.debug(\"Using existing DynamoDB table {} in region {} created {}\",\n            tableName, region, (created !\u003d null) ? new Date(created) : null);\n      } catch (ResourceNotFoundException rnfe) {\n        if (conf.getBoolean(S3GUARD_DDB_TABLE_CREATE_KEY, false)) {\n          long readCapacity \u003d conf.getLong(S3GUARD_DDB_TABLE_CAPACITY_READ_KEY,\n              S3GUARD_DDB_TABLE_CAPACITY_READ_DEFAULT);\n          long writeCapacity \u003d conf.getLong(\n              S3GUARD_DDB_TABLE_CAPACITY_WRITE_KEY,\n              S3GUARD_DDB_TABLE_CAPACITY_WRITE_DEFAULT);\n          ProvisionedThroughput capacity;\n          if (readCapacity \u003e 0 \u0026\u0026 writeCapacity \u003e 0) {\n            capacity \u003d new ProvisionedThroughput(\n                readCapacity,\n                writeCapacity);\n          } else {\n            // at least one capacity value is \u003c\u003d 0\n            // verify they are both exactly zero\n            Preconditions.checkArgument(\n                readCapacity \u003d\u003d 0 \u0026\u0026 writeCapacity \u003d\u003d 0,\n                \"S3Guard table read capacity %d and and write capacity %d\"\n                    + \" are inconsistent\", readCapacity, writeCapacity);\n            // and set the capacity to null for per-request billing.\n            capacity \u003d null;\n          }\n\n          createTable(capacity);\n        } else {\n          throw (FileNotFoundException) new FileNotFoundException(\n              \"DynamoDB table \u0027\" + tableName + \"\u0027 does not \"\n                  + \"exist in region \" + region +\n                  \"; auto-creation is turned off\")\n              .initCause(rnfe);\n        }\n      }\n\n    } catch (AmazonClientException e) {\n      throw translateException(\"initTable\", tableName, e);\n    }\n\n    return table;\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStoreTableManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "4e38dafde4dce8cd8c368783a291e830f06e1def": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15563. S3Guard to support creating on-demand DDB tables.\n\nContributed by Steve Loughran\n\nChange-Id: I2262b5b9f52e42ded8ed6f50fd39756f96e77087\n",
      "commitDate": "07/06/19 10:26 AM",
      "commitName": "4e38dafde4dce8cd8c368783a291e830f06e1def",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "19/05/19 2:29 PM",
      "commitNameOld": "a36274d69947648dbe82721220cc5240ec5d396d",
      "commitAuthorOld": "Ben Roling",
      "daysBetweenCommits": 18.83,
      "commitsBetweenForRepo": 148,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,73 @@\n   void initTable() throws IOException {\n     table \u003d dynamoDB.getTable(tableName);\n     try {\n       try {\n         LOG.debug(\"Binding to table {}\", tableName);\n         TableDescription description \u003d table.describe();\n         LOG.debug(\"Table state: {}\", description);\n         tableArn \u003d description.getTableArn();\n         final String status \u003d description.getTableStatus();\n         switch (status) {\n         case \"CREATING\":\n           LOG.debug(\"Table {} in region {} is being created/updated. This may\"\n                   + \" indicate that the table is being operated by another \"\n                   + \"concurrent thread or process. Waiting for active...\",\n               tableName, region);\n           waitForTableActive(table);\n           break;\n         case \"DELETING\":\n           throw new FileNotFoundException(\"DynamoDB table \"\n               + \"\u0027\" + tableName + \"\u0027 is being \"\n               + \"deleted in region \" + region);\n         case \"UPDATING\":\n           // table being updated; it can still be used.\n           LOG.debug(\"Table is being updated.\");\n           break;\n         case \"ACTIVE\":\n           break;\n         default:\n           throw new IOException(\"Unknown DynamoDB table status \" + status\n               + \": tableName\u003d\u0027\" + tableName + \"\u0027, region\u003d\" + region);\n         }\n \n         final Item versionMarker \u003d getVersionMarkerItem();\n         verifyVersionCompatibility(tableName, versionMarker);\n         Long created \u003d extractCreationTimeFromMarker(versionMarker);\n         LOG.debug(\"Using existing DynamoDB table {} in region {} created {}\",\n             tableName, region, (created !\u003d null) ? new Date(created) : null);\n       } catch (ResourceNotFoundException rnfe) {\n         if (conf.getBoolean(S3GUARD_DDB_TABLE_CREATE_KEY, false)) {\n-          final ProvisionedThroughput capacity \u003d new ProvisionedThroughput(\n-              conf.getLong(S3GUARD_DDB_TABLE_CAPACITY_READ_KEY,\n-                  S3GUARD_DDB_TABLE_CAPACITY_READ_DEFAULT),\n-              conf.getLong(S3GUARD_DDB_TABLE_CAPACITY_WRITE_KEY,\n-                  S3GUARD_DDB_TABLE_CAPACITY_WRITE_DEFAULT));\n+          long readCapacity \u003d conf.getLong(S3GUARD_DDB_TABLE_CAPACITY_READ_KEY,\n+              S3GUARD_DDB_TABLE_CAPACITY_READ_DEFAULT);\n+          long writeCapacity \u003d conf.getLong(\n+              S3GUARD_DDB_TABLE_CAPACITY_WRITE_KEY,\n+              S3GUARD_DDB_TABLE_CAPACITY_WRITE_DEFAULT);\n+          ProvisionedThroughput capacity;\n+          if (readCapacity \u003e 0 \u0026\u0026 writeCapacity \u003e 0) {\n+            capacity \u003d new ProvisionedThroughput(\n+                readCapacity,\n+                writeCapacity);\n+          } else {\n+            // at least one capacity value is \u003c\u003d 0\n+            // verify they are both exactly zero\n+            Preconditions.checkArgument(\n+                readCapacity \u003d\u003d 0 \u0026\u0026 writeCapacity \u003d\u003d 0,\n+                \"S3Guard table read capacity %d and and write capacity %d\"\n+                    + \" are inconsistent\", readCapacity, writeCapacity);\n+            // and set the capacity to null for per-request billing.\n+            capacity \u003d null;\n+          }\n \n           createTable(capacity);\n         } else {\n           throw (FileNotFoundException)new FileNotFoundException(\n               \"DynamoDB table \u0027\" + tableName + \"\u0027 does not \"\n               + \"exist in region \" + region + \"; auto-creation is turned off\")\n               .initCause(rnfe);\n         }\n       }\n \n     } catch (AmazonClientException e) {\n       throw translateException(\"initTable\", tableName, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void initTable() throws IOException {\n    table \u003d dynamoDB.getTable(tableName);\n    try {\n      try {\n        LOG.debug(\"Binding to table {}\", tableName);\n        TableDescription description \u003d table.describe();\n        LOG.debug(\"Table state: {}\", description);\n        tableArn \u003d description.getTableArn();\n        final String status \u003d description.getTableStatus();\n        switch (status) {\n        case \"CREATING\":\n          LOG.debug(\"Table {} in region {} is being created/updated. This may\"\n                  + \" indicate that the table is being operated by another \"\n                  + \"concurrent thread or process. Waiting for active...\",\n              tableName, region);\n          waitForTableActive(table);\n          break;\n        case \"DELETING\":\n          throw new FileNotFoundException(\"DynamoDB table \"\n              + \"\u0027\" + tableName + \"\u0027 is being \"\n              + \"deleted in region \" + region);\n        case \"UPDATING\":\n          // table being updated; it can still be used.\n          LOG.debug(\"Table is being updated.\");\n          break;\n        case \"ACTIVE\":\n          break;\n        default:\n          throw new IOException(\"Unknown DynamoDB table status \" + status\n              + \": tableName\u003d\u0027\" + tableName + \"\u0027, region\u003d\" + region);\n        }\n\n        final Item versionMarker \u003d getVersionMarkerItem();\n        verifyVersionCompatibility(tableName, versionMarker);\n        Long created \u003d extractCreationTimeFromMarker(versionMarker);\n        LOG.debug(\"Using existing DynamoDB table {} in region {} created {}\",\n            tableName, region, (created !\u003d null) ? new Date(created) : null);\n      } catch (ResourceNotFoundException rnfe) {\n        if (conf.getBoolean(S3GUARD_DDB_TABLE_CREATE_KEY, false)) {\n          long readCapacity \u003d conf.getLong(S3GUARD_DDB_TABLE_CAPACITY_READ_KEY,\n              S3GUARD_DDB_TABLE_CAPACITY_READ_DEFAULT);\n          long writeCapacity \u003d conf.getLong(\n              S3GUARD_DDB_TABLE_CAPACITY_WRITE_KEY,\n              S3GUARD_DDB_TABLE_CAPACITY_WRITE_DEFAULT);\n          ProvisionedThroughput capacity;\n          if (readCapacity \u003e 0 \u0026\u0026 writeCapacity \u003e 0) {\n            capacity \u003d new ProvisionedThroughput(\n                readCapacity,\n                writeCapacity);\n          } else {\n            // at least one capacity value is \u003c\u003d 0\n            // verify they are both exactly zero\n            Preconditions.checkArgument(\n                readCapacity \u003d\u003d 0 \u0026\u0026 writeCapacity \u003d\u003d 0,\n                \"S3Guard table read capacity %d and and write capacity %d\"\n                    + \" are inconsistent\", readCapacity, writeCapacity);\n            // and set the capacity to null for per-request billing.\n            capacity \u003d null;\n          }\n\n          createTable(capacity);\n        } else {\n          throw (FileNotFoundException)new FileNotFoundException(\n              \"DynamoDB table \u0027\" + tableName + \"\u0027 does not \"\n              + \"exist in region \" + region + \"; auto-creation is turned off\")\n              .initCause(rnfe);\n        }\n      }\n\n    } catch (AmazonClientException e) {\n      throw translateException(\"initTable\", tableName, e);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java",
      "extendedDetails": {}
    },
    "6d0bffe17eadedd60d4599427248b0db4a7c5502": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14556. S3A to support Delegation Tokens.\n\nContributed by Steve Loughran and Daryn Sharp.\n",
      "commitDate": "14/01/19 9:59 AM",
      "commitName": "6d0bffe17eadedd60d4599427248b0db4a7c5502",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "07/01/19 9:51 PM",
      "commitNameOld": "7f783970364930cc461d1a73833bc58cdd10553e",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 6.51,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,58 @@\n   void initTable() throws IOException {\n     table \u003d dynamoDB.getTable(tableName);\n     try {\n       try {\n         LOG.debug(\"Binding to table {}\", tableName);\n         TableDescription description \u003d table.describe();\n         LOG.debug(\"Table state: {}\", description);\n+        tableArn \u003d description.getTableArn();\n         final String status \u003d description.getTableStatus();\n         switch (status) {\n         case \"CREATING\":\n           LOG.debug(\"Table {} in region {} is being created/updated. This may\"\n                   + \" indicate that the table is being operated by another \"\n                   + \"concurrent thread or process. Waiting for active...\",\n               tableName, region);\n           waitForTableActive(table);\n           break;\n         case \"DELETING\":\n           throw new FileNotFoundException(\"DynamoDB table \"\n               + \"\u0027\" + tableName + \"\u0027 is being \"\n               + \"deleted in region \" + region);\n         case \"UPDATING\":\n           // table being updated; it can still be used.\n           LOG.debug(\"Table is being updated.\");\n           break;\n         case \"ACTIVE\":\n           break;\n         default:\n           throw new IOException(\"Unknown DynamoDB table status \" + status\n               + \": tableName\u003d\u0027\" + tableName + \"\u0027, region\u003d\" + region);\n         }\n \n         final Item versionMarker \u003d getVersionMarkerItem();\n         verifyVersionCompatibility(tableName, versionMarker);\n         Long created \u003d extractCreationTimeFromMarker(versionMarker);\n         LOG.debug(\"Using existing DynamoDB table {} in region {} created {}\",\n             tableName, region, (created !\u003d null) ? new Date(created) : null);\n       } catch (ResourceNotFoundException rnfe) {\n         if (conf.getBoolean(S3GUARD_DDB_TABLE_CREATE_KEY, false)) {\n           final ProvisionedThroughput capacity \u003d new ProvisionedThroughput(\n               conf.getLong(S3GUARD_DDB_TABLE_CAPACITY_READ_KEY,\n                   S3GUARD_DDB_TABLE_CAPACITY_READ_DEFAULT),\n               conf.getLong(S3GUARD_DDB_TABLE_CAPACITY_WRITE_KEY,\n                   S3GUARD_DDB_TABLE_CAPACITY_WRITE_DEFAULT));\n \n           createTable(capacity);\n         } else {\n           throw (FileNotFoundException)new FileNotFoundException(\n               \"DynamoDB table \u0027\" + tableName + \"\u0027 does not \"\n               + \"exist in region \" + region + \"; auto-creation is turned off\")\n               .initCause(rnfe);\n         }\n       }\n \n     } catch (AmazonClientException e) {\n       throw translateException(\"initTable\", tableName, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void initTable() throws IOException {\n    table \u003d dynamoDB.getTable(tableName);\n    try {\n      try {\n        LOG.debug(\"Binding to table {}\", tableName);\n        TableDescription description \u003d table.describe();\n        LOG.debug(\"Table state: {}\", description);\n        tableArn \u003d description.getTableArn();\n        final String status \u003d description.getTableStatus();\n        switch (status) {\n        case \"CREATING\":\n          LOG.debug(\"Table {} in region {} is being created/updated. This may\"\n                  + \" indicate that the table is being operated by another \"\n                  + \"concurrent thread or process. Waiting for active...\",\n              tableName, region);\n          waitForTableActive(table);\n          break;\n        case \"DELETING\":\n          throw new FileNotFoundException(\"DynamoDB table \"\n              + \"\u0027\" + tableName + \"\u0027 is being \"\n              + \"deleted in region \" + region);\n        case \"UPDATING\":\n          // table being updated; it can still be used.\n          LOG.debug(\"Table is being updated.\");\n          break;\n        case \"ACTIVE\":\n          break;\n        default:\n          throw new IOException(\"Unknown DynamoDB table status \" + status\n              + \": tableName\u003d\u0027\" + tableName + \"\u0027, region\u003d\" + region);\n        }\n\n        final Item versionMarker \u003d getVersionMarkerItem();\n        verifyVersionCompatibility(tableName, versionMarker);\n        Long created \u003d extractCreationTimeFromMarker(versionMarker);\n        LOG.debug(\"Using existing DynamoDB table {} in region {} created {}\",\n            tableName, region, (created !\u003d null) ? new Date(created) : null);\n      } catch (ResourceNotFoundException rnfe) {\n        if (conf.getBoolean(S3GUARD_DDB_TABLE_CREATE_KEY, false)) {\n          final ProvisionedThroughput capacity \u003d new ProvisionedThroughput(\n              conf.getLong(S3GUARD_DDB_TABLE_CAPACITY_READ_KEY,\n                  S3GUARD_DDB_TABLE_CAPACITY_READ_DEFAULT),\n              conf.getLong(S3GUARD_DDB_TABLE_CAPACITY_WRITE_KEY,\n                  S3GUARD_DDB_TABLE_CAPACITY_WRITE_DEFAULT));\n\n          createTable(capacity);\n        } else {\n          throw (FileNotFoundException)new FileNotFoundException(\n              \"DynamoDB table \u0027\" + tableName + \"\u0027 does not \"\n              + \"exist in region \" + region + \"; auto-creation is turned off\")\n              .initCause(rnfe);\n        }\n      }\n\n    } catch (AmazonClientException e) {\n      throw translateException(\"initTable\", tableName, e);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java",
      "extendedDetails": {}
    },
    "7f783970364930cc461d1a73833bc58cdd10553e": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-14556. S3A to support Delegation Tokens.\"\n\nThis reverts commit d7152332b32a575c3a92e3f4c44b95e58462528d.\n",
      "commitDate": "07/01/19 9:51 PM",
      "commitName": "7f783970364930cc461d1a73833bc58cdd10553e",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "07/01/19 5:18 AM",
      "commitNameOld": "d7152332b32a575c3a92e3f4c44b95e58462528d",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 0.69,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,57 @@\n   void initTable() throws IOException {\n     table \u003d dynamoDB.getTable(tableName);\n     try {\n       try {\n         LOG.debug(\"Binding to table {}\", tableName);\n         TableDescription description \u003d table.describe();\n         LOG.debug(\"Table state: {}\", description);\n-        tableArn \u003d description.getTableArn();\n         final String status \u003d description.getTableStatus();\n         switch (status) {\n         case \"CREATING\":\n           LOG.debug(\"Table {} in region {} is being created/updated. This may\"\n                   + \" indicate that the table is being operated by another \"\n                   + \"concurrent thread or process. Waiting for active...\",\n               tableName, region);\n           waitForTableActive(table);\n           break;\n         case \"DELETING\":\n           throw new FileNotFoundException(\"DynamoDB table \"\n               + \"\u0027\" + tableName + \"\u0027 is being \"\n               + \"deleted in region \" + region);\n         case \"UPDATING\":\n           // table being updated; it can still be used.\n           LOG.debug(\"Table is being updated.\");\n           break;\n         case \"ACTIVE\":\n           break;\n         default:\n           throw new IOException(\"Unknown DynamoDB table status \" + status\n               + \": tableName\u003d\u0027\" + tableName + \"\u0027, region\u003d\" + region);\n         }\n \n         final Item versionMarker \u003d getVersionMarkerItem();\n         verifyVersionCompatibility(tableName, versionMarker);\n         Long created \u003d extractCreationTimeFromMarker(versionMarker);\n         LOG.debug(\"Using existing DynamoDB table {} in region {} created {}\",\n             tableName, region, (created !\u003d null) ? new Date(created) : null);\n       } catch (ResourceNotFoundException rnfe) {\n         if (conf.getBoolean(S3GUARD_DDB_TABLE_CREATE_KEY, false)) {\n           final ProvisionedThroughput capacity \u003d new ProvisionedThroughput(\n               conf.getLong(S3GUARD_DDB_TABLE_CAPACITY_READ_KEY,\n                   S3GUARD_DDB_TABLE_CAPACITY_READ_DEFAULT),\n               conf.getLong(S3GUARD_DDB_TABLE_CAPACITY_WRITE_KEY,\n                   S3GUARD_DDB_TABLE_CAPACITY_WRITE_DEFAULT));\n \n           createTable(capacity);\n         } else {\n           throw (FileNotFoundException)new FileNotFoundException(\n               \"DynamoDB table \u0027\" + tableName + \"\u0027 does not \"\n               + \"exist in region \" + region + \"; auto-creation is turned off\")\n               .initCause(rnfe);\n         }\n       }\n \n     } catch (AmazonClientException e) {\n       throw translateException(\"initTable\", tableName, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void initTable() throws IOException {\n    table \u003d dynamoDB.getTable(tableName);\n    try {\n      try {\n        LOG.debug(\"Binding to table {}\", tableName);\n        TableDescription description \u003d table.describe();\n        LOG.debug(\"Table state: {}\", description);\n        final String status \u003d description.getTableStatus();\n        switch (status) {\n        case \"CREATING\":\n          LOG.debug(\"Table {} in region {} is being created/updated. This may\"\n                  + \" indicate that the table is being operated by another \"\n                  + \"concurrent thread or process. Waiting for active...\",\n              tableName, region);\n          waitForTableActive(table);\n          break;\n        case \"DELETING\":\n          throw new FileNotFoundException(\"DynamoDB table \"\n              + \"\u0027\" + tableName + \"\u0027 is being \"\n              + \"deleted in region \" + region);\n        case \"UPDATING\":\n          // table being updated; it can still be used.\n          LOG.debug(\"Table is being updated.\");\n          break;\n        case \"ACTIVE\":\n          break;\n        default:\n          throw new IOException(\"Unknown DynamoDB table status \" + status\n              + \": tableName\u003d\u0027\" + tableName + \"\u0027, region\u003d\" + region);\n        }\n\n        final Item versionMarker \u003d getVersionMarkerItem();\n        verifyVersionCompatibility(tableName, versionMarker);\n        Long created \u003d extractCreationTimeFromMarker(versionMarker);\n        LOG.debug(\"Using existing DynamoDB table {} in region {} created {}\",\n            tableName, region, (created !\u003d null) ? new Date(created) : null);\n      } catch (ResourceNotFoundException rnfe) {\n        if (conf.getBoolean(S3GUARD_DDB_TABLE_CREATE_KEY, false)) {\n          final ProvisionedThroughput capacity \u003d new ProvisionedThroughput(\n              conf.getLong(S3GUARD_DDB_TABLE_CAPACITY_READ_KEY,\n                  S3GUARD_DDB_TABLE_CAPACITY_READ_DEFAULT),\n              conf.getLong(S3GUARD_DDB_TABLE_CAPACITY_WRITE_KEY,\n                  S3GUARD_DDB_TABLE_CAPACITY_WRITE_DEFAULT));\n\n          createTable(capacity);\n        } else {\n          throw (FileNotFoundException)new FileNotFoundException(\n              \"DynamoDB table \u0027\" + tableName + \"\u0027 does not \"\n              + \"exist in region \" + region + \"; auto-creation is turned off\")\n              .initCause(rnfe);\n        }\n      }\n\n    } catch (AmazonClientException e) {\n      throw translateException(\"initTable\", tableName, e);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java",
      "extendedDetails": {}
    },
    "d7152332b32a575c3a92e3f4c44b95e58462528d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14556. S3A to support Delegation Tokens.\n\nContributed by Steve Loughran.\n",
      "commitDate": "07/01/19 5:18 AM",
      "commitName": "d7152332b32a575c3a92e3f4c44b95e58462528d",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "12/12/18 8:30 AM",
      "commitNameOld": "82b798581d12a5cbc9ae17fa290aa81e8ebf6a45",
      "commitAuthorOld": "Sean Mackrory",
      "daysBetweenCommits": 25.87,
      "commitsBetweenForRepo": 155,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,58 @@\n   void initTable() throws IOException {\n     table \u003d dynamoDB.getTable(tableName);\n     try {\n       try {\n         LOG.debug(\"Binding to table {}\", tableName);\n         TableDescription description \u003d table.describe();\n         LOG.debug(\"Table state: {}\", description);\n+        tableArn \u003d description.getTableArn();\n         final String status \u003d description.getTableStatus();\n         switch (status) {\n         case \"CREATING\":\n           LOG.debug(\"Table {} in region {} is being created/updated. This may\"\n                   + \" indicate that the table is being operated by another \"\n                   + \"concurrent thread or process. Waiting for active...\",\n               tableName, region);\n           waitForTableActive(table);\n           break;\n         case \"DELETING\":\n           throw new FileNotFoundException(\"DynamoDB table \"\n               + \"\u0027\" + tableName + \"\u0027 is being \"\n               + \"deleted in region \" + region);\n         case \"UPDATING\":\n           // table being updated; it can still be used.\n           LOG.debug(\"Table is being updated.\");\n           break;\n         case \"ACTIVE\":\n           break;\n         default:\n           throw new IOException(\"Unknown DynamoDB table status \" + status\n               + \": tableName\u003d\u0027\" + tableName + \"\u0027, region\u003d\" + region);\n         }\n \n         final Item versionMarker \u003d getVersionMarkerItem();\n         verifyVersionCompatibility(tableName, versionMarker);\n         Long created \u003d extractCreationTimeFromMarker(versionMarker);\n         LOG.debug(\"Using existing DynamoDB table {} in region {} created {}\",\n             tableName, region, (created !\u003d null) ? new Date(created) : null);\n       } catch (ResourceNotFoundException rnfe) {\n         if (conf.getBoolean(S3GUARD_DDB_TABLE_CREATE_KEY, false)) {\n           final ProvisionedThroughput capacity \u003d new ProvisionedThroughput(\n               conf.getLong(S3GUARD_DDB_TABLE_CAPACITY_READ_KEY,\n                   S3GUARD_DDB_TABLE_CAPACITY_READ_DEFAULT),\n               conf.getLong(S3GUARD_DDB_TABLE_CAPACITY_WRITE_KEY,\n                   S3GUARD_DDB_TABLE_CAPACITY_WRITE_DEFAULT));\n \n           createTable(capacity);\n         } else {\n           throw (FileNotFoundException)new FileNotFoundException(\n               \"DynamoDB table \u0027\" + tableName + \"\u0027 does not \"\n               + \"exist in region \" + region + \"; auto-creation is turned off\")\n               .initCause(rnfe);\n         }\n       }\n \n     } catch (AmazonClientException e) {\n       throw translateException(\"initTable\", tableName, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void initTable() throws IOException {\n    table \u003d dynamoDB.getTable(tableName);\n    try {\n      try {\n        LOG.debug(\"Binding to table {}\", tableName);\n        TableDescription description \u003d table.describe();\n        LOG.debug(\"Table state: {}\", description);\n        tableArn \u003d description.getTableArn();\n        final String status \u003d description.getTableStatus();\n        switch (status) {\n        case \"CREATING\":\n          LOG.debug(\"Table {} in region {} is being created/updated. This may\"\n                  + \" indicate that the table is being operated by another \"\n                  + \"concurrent thread or process. Waiting for active...\",\n              tableName, region);\n          waitForTableActive(table);\n          break;\n        case \"DELETING\":\n          throw new FileNotFoundException(\"DynamoDB table \"\n              + \"\u0027\" + tableName + \"\u0027 is being \"\n              + \"deleted in region \" + region);\n        case \"UPDATING\":\n          // table being updated; it can still be used.\n          LOG.debug(\"Table is being updated.\");\n          break;\n        case \"ACTIVE\":\n          break;\n        default:\n          throw new IOException(\"Unknown DynamoDB table status \" + status\n              + \": tableName\u003d\u0027\" + tableName + \"\u0027, region\u003d\" + region);\n        }\n\n        final Item versionMarker \u003d getVersionMarkerItem();\n        verifyVersionCompatibility(tableName, versionMarker);\n        Long created \u003d extractCreationTimeFromMarker(versionMarker);\n        LOG.debug(\"Using existing DynamoDB table {} in region {} created {}\",\n            tableName, region, (created !\u003d null) ? new Date(created) : null);\n      } catch (ResourceNotFoundException rnfe) {\n        if (conf.getBoolean(S3GUARD_DDB_TABLE_CREATE_KEY, false)) {\n          final ProvisionedThroughput capacity \u003d new ProvisionedThroughput(\n              conf.getLong(S3GUARD_DDB_TABLE_CAPACITY_READ_KEY,\n                  S3GUARD_DDB_TABLE_CAPACITY_READ_DEFAULT),\n              conf.getLong(S3GUARD_DDB_TABLE_CAPACITY_WRITE_KEY,\n                  S3GUARD_DDB_TABLE_CAPACITY_WRITE_DEFAULT));\n\n          createTable(capacity);\n        } else {\n          throw (FileNotFoundException)new FileNotFoundException(\n              \"DynamoDB table \u0027\" + tableName + \"\u0027 does not \"\n              + \"exist in region \" + region + \"; auto-creation is turned off\")\n              .initCause(rnfe);\n        }\n      }\n\n    } catch (AmazonClientException e) {\n      throw translateException(\"initTable\", tableName, e);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java",
      "extendedDetails": {}
    },
    "ee816f1fd78b029b9efa567e8b1b62391563de14": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15837. DynamoDB table Update can fail S3A FS init.\nContributed by Steve Loughran.\n",
      "commitDate": "11/10/18 6:57 AM",
      "commitName": "ee816f1fd78b029b9efa567e8b1b62391563de14",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "09/10/18 2:46 AM",
      "commitNameOld": "7ba1cfdea7f5daf799adc4f0ed2e45f55841a058",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 2.17,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,57 @@\n   void initTable() throws IOException {\n     table \u003d dynamoDB.getTable(tableName);\n     try {\n       try {\n         LOG.debug(\"Binding to table {}\", tableName);\n         TableDescription description \u003d table.describe();\n         LOG.debug(\"Table state: {}\", description);\n         final String status \u003d description.getTableStatus();\n         switch (status) {\n         case \"CREATING\":\n-        case \"UPDATING\":\n           LOG.debug(\"Table {} in region {} is being created/updated. This may\"\n                   + \" indicate that the table is being operated by another \"\n                   + \"concurrent thread or process. Waiting for active...\",\n               tableName, region);\n           waitForTableActive(table);\n           break;\n         case \"DELETING\":\n           throw new FileNotFoundException(\"DynamoDB table \"\n               + \"\u0027\" + tableName + \"\u0027 is being \"\n               + \"deleted in region \" + region);\n+        case \"UPDATING\":\n+          // table being updated; it can still be used.\n+          LOG.debug(\"Table is being updated.\");\n+          break;\n         case \"ACTIVE\":\n           break;\n         default:\n           throw new IOException(\"Unknown DynamoDB table status \" + status\n               + \": tableName\u003d\u0027\" + tableName + \"\u0027, region\u003d\" + region);\n         }\n \n         final Item versionMarker \u003d getVersionMarkerItem();\n         verifyVersionCompatibility(tableName, versionMarker);\n         Long created \u003d extractCreationTimeFromMarker(versionMarker);\n         LOG.debug(\"Using existing DynamoDB table {} in region {} created {}\",\n             tableName, region, (created !\u003d null) ? new Date(created) : null);\n       } catch (ResourceNotFoundException rnfe) {\n         if (conf.getBoolean(S3GUARD_DDB_TABLE_CREATE_KEY, false)) {\n           final ProvisionedThroughput capacity \u003d new ProvisionedThroughput(\n               conf.getLong(S3GUARD_DDB_TABLE_CAPACITY_READ_KEY,\n                   S3GUARD_DDB_TABLE_CAPACITY_READ_DEFAULT),\n               conf.getLong(S3GUARD_DDB_TABLE_CAPACITY_WRITE_KEY,\n                   S3GUARD_DDB_TABLE_CAPACITY_WRITE_DEFAULT));\n \n           createTable(capacity);\n         } else {\n           throw (FileNotFoundException)new FileNotFoundException(\n               \"DynamoDB table \u0027\" + tableName + \"\u0027 does not \"\n               + \"exist in region \" + region + \"; auto-creation is turned off\")\n               .initCause(rnfe);\n         }\n       }\n \n     } catch (AmazonClientException e) {\n       throw translateException(\"initTable\", tableName, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void initTable() throws IOException {\n    table \u003d dynamoDB.getTable(tableName);\n    try {\n      try {\n        LOG.debug(\"Binding to table {}\", tableName);\n        TableDescription description \u003d table.describe();\n        LOG.debug(\"Table state: {}\", description);\n        final String status \u003d description.getTableStatus();\n        switch (status) {\n        case \"CREATING\":\n          LOG.debug(\"Table {} in region {} is being created/updated. This may\"\n                  + \" indicate that the table is being operated by another \"\n                  + \"concurrent thread or process. Waiting for active...\",\n              tableName, region);\n          waitForTableActive(table);\n          break;\n        case \"DELETING\":\n          throw new FileNotFoundException(\"DynamoDB table \"\n              + \"\u0027\" + tableName + \"\u0027 is being \"\n              + \"deleted in region \" + region);\n        case \"UPDATING\":\n          // table being updated; it can still be used.\n          LOG.debug(\"Table is being updated.\");\n          break;\n        case \"ACTIVE\":\n          break;\n        default:\n          throw new IOException(\"Unknown DynamoDB table status \" + status\n              + \": tableName\u003d\u0027\" + tableName + \"\u0027, region\u003d\" + region);\n        }\n\n        final Item versionMarker \u003d getVersionMarkerItem();\n        verifyVersionCompatibility(tableName, versionMarker);\n        Long created \u003d extractCreationTimeFromMarker(versionMarker);\n        LOG.debug(\"Using existing DynamoDB table {} in region {} created {}\",\n            tableName, region, (created !\u003d null) ? new Date(created) : null);\n      } catch (ResourceNotFoundException rnfe) {\n        if (conf.getBoolean(S3GUARD_DDB_TABLE_CREATE_KEY, false)) {\n          final ProvisionedThroughput capacity \u003d new ProvisionedThroughput(\n              conf.getLong(S3GUARD_DDB_TABLE_CAPACITY_READ_KEY,\n                  S3GUARD_DDB_TABLE_CAPACITY_READ_DEFAULT),\n              conf.getLong(S3GUARD_DDB_TABLE_CAPACITY_WRITE_KEY,\n                  S3GUARD_DDB_TABLE_CAPACITY_WRITE_DEFAULT));\n\n          createTable(capacity);\n        } else {\n          throw (FileNotFoundException)new FileNotFoundException(\n              \"DynamoDB table \u0027\" + tableName + \"\u0027 does not \"\n              + \"exist in region \" + region + \"; auto-creation is turned off\")\n              .initCause(rnfe);\n        }\n      }\n\n    } catch (AmazonClientException e) {\n      throw translateException(\"initTable\", tableName, e);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java",
      "extendedDetails": {}
    },
    "de8b6ca5ef8614de6d6277b7617e27c788b0555c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13786 Add S3A committer for zero-rename commits to S3 endpoints.\nContributed by Steve Loughran and Ryan Blue.\n",
      "commitDate": "22/11/17 7:28 AM",
      "commitName": "de8b6ca5ef8614de6d6277b7617e27c788b0555c",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "25/09/17 3:59 PM",
      "commitNameOld": "47011d7dd300b0c74bb6cfe25b918c479d718f4f",
      "commitAuthorOld": "Aaron Fabbri",
      "daysBetweenCommits": 57.69,
      "commitsBetweenForRepo": 477,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,54 @@\n   void initTable() throws IOException {\n     table \u003d dynamoDB.getTable(tableName);\n     try {\n       try {\n         LOG.debug(\"Binding to table {}\", tableName);\n         TableDescription description \u003d table.describe();\n         LOG.debug(\"Table state: {}\", description);\n         final String status \u003d description.getTableStatus();\n         switch (status) {\n         case \"CREATING\":\n         case \"UPDATING\":\n           LOG.debug(\"Table {} in region {} is being created/updated. This may\"\n                   + \" indicate that the table is being operated by another \"\n                   + \"concurrent thread or process. Waiting for active...\",\n               tableName, region);\n           waitForTableActive(table);\n           break;\n         case \"DELETING\":\n           throw new FileNotFoundException(\"DynamoDB table \"\n               + \"\u0027\" + tableName + \"\u0027 is being \"\n               + \"deleted in region \" + region);\n         case \"ACTIVE\":\n           break;\n         default:\n           throw new IOException(\"Unknown DynamoDB table status \" + status\n               + \": tableName\u003d\u0027\" + tableName + \"\u0027, region\u003d\" + region);\n         }\n \n         final Item versionMarker \u003d getVersionMarkerItem();\n         verifyVersionCompatibility(tableName, versionMarker);\n         Long created \u003d extractCreationTimeFromMarker(versionMarker);\n         LOG.debug(\"Using existing DynamoDB table {} in region {} created {}\",\n             tableName, region, (created !\u003d null) ? new Date(created) : null);\n       } catch (ResourceNotFoundException rnfe) {\n         if (conf.getBoolean(S3GUARD_DDB_TABLE_CREATE_KEY, false)) {\n           final ProvisionedThroughput capacity \u003d new ProvisionedThroughput(\n               conf.getLong(S3GUARD_DDB_TABLE_CAPACITY_READ_KEY,\n                   S3GUARD_DDB_TABLE_CAPACITY_READ_DEFAULT),\n               conf.getLong(S3GUARD_DDB_TABLE_CAPACITY_WRITE_KEY,\n                   S3GUARD_DDB_TABLE_CAPACITY_WRITE_DEFAULT));\n \n           createTable(capacity);\n         } else {\n           throw (FileNotFoundException)new FileNotFoundException(\n               \"DynamoDB table \u0027\" + tableName + \"\u0027 does not \"\n               + \"exist in region \" + region + \"; auto-creation is turned off\")\n               .initCause(rnfe);\n         }\n       }\n \n     } catch (AmazonClientException e) {\n-      throw translateException(\"initTable\", (String) null, e);\n+      throw translateException(\"initTable\", tableName, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void initTable() throws IOException {\n    table \u003d dynamoDB.getTable(tableName);\n    try {\n      try {\n        LOG.debug(\"Binding to table {}\", tableName);\n        TableDescription description \u003d table.describe();\n        LOG.debug(\"Table state: {}\", description);\n        final String status \u003d description.getTableStatus();\n        switch (status) {\n        case \"CREATING\":\n        case \"UPDATING\":\n          LOG.debug(\"Table {} in region {} is being created/updated. This may\"\n                  + \" indicate that the table is being operated by another \"\n                  + \"concurrent thread or process. Waiting for active...\",\n              tableName, region);\n          waitForTableActive(table);\n          break;\n        case \"DELETING\":\n          throw new FileNotFoundException(\"DynamoDB table \"\n              + \"\u0027\" + tableName + \"\u0027 is being \"\n              + \"deleted in region \" + region);\n        case \"ACTIVE\":\n          break;\n        default:\n          throw new IOException(\"Unknown DynamoDB table status \" + status\n              + \": tableName\u003d\u0027\" + tableName + \"\u0027, region\u003d\" + region);\n        }\n\n        final Item versionMarker \u003d getVersionMarkerItem();\n        verifyVersionCompatibility(tableName, versionMarker);\n        Long created \u003d extractCreationTimeFromMarker(versionMarker);\n        LOG.debug(\"Using existing DynamoDB table {} in region {} created {}\",\n            tableName, region, (created !\u003d null) ? new Date(created) : null);\n      } catch (ResourceNotFoundException rnfe) {\n        if (conf.getBoolean(S3GUARD_DDB_TABLE_CREATE_KEY, false)) {\n          final ProvisionedThroughput capacity \u003d new ProvisionedThroughput(\n              conf.getLong(S3GUARD_DDB_TABLE_CAPACITY_READ_KEY,\n                  S3GUARD_DDB_TABLE_CAPACITY_READ_DEFAULT),\n              conf.getLong(S3GUARD_DDB_TABLE_CAPACITY_WRITE_KEY,\n                  S3GUARD_DDB_TABLE_CAPACITY_WRITE_DEFAULT));\n\n          createTable(capacity);\n        } else {\n          throw (FileNotFoundException)new FileNotFoundException(\n              \"DynamoDB table \u0027\" + tableName + \"\u0027 does not \"\n              + \"exist in region \" + region + \"; auto-creation is turned off\")\n              .initCause(rnfe);\n        }\n      }\n\n    } catch (AmazonClientException e) {\n      throw translateException(\"initTable\", tableName, e);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java",
      "extendedDetails": {}
    },
    "47011d7dd300b0c74bb6cfe25b918c479d718f4f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14220 Enhance S3GuardTool with bucket-info and set-capacity commands, tests. Contributed by Steve Loughran\n",
      "commitDate": "25/09/17 3:59 PM",
      "commitName": "47011d7dd300b0c74bb6cfe25b918c479d718f4f",
      "commitAuthor": "Aaron Fabbri",
      "commitDateOld": "01/09/17 6:13 AM",
      "commitNameOld": "621b43e254afaff708cd6fc4698b29628f6abc33",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 24.41,
      "commitsBetweenForRepo": 233,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,54 @@\n   void initTable() throws IOException {\n     table \u003d dynamoDB.getTable(tableName);\n     try {\n       try {\n         LOG.debug(\"Binding to table {}\", tableName);\n-        final String status \u003d table.describe().getTableStatus();\n+        TableDescription description \u003d table.describe();\n+        LOG.debug(\"Table state: {}\", description);\n+        final String status \u003d description.getTableStatus();\n         switch (status) {\n         case \"CREATING\":\n         case \"UPDATING\":\n           LOG.debug(\"Table {} in region {} is being created/updated. This may\"\n                   + \" indicate that the table is being operated by another \"\n                   + \"concurrent thread or process. Waiting for active...\",\n               tableName, region);\n           waitForTableActive(table);\n           break;\n         case \"DELETING\":\n           throw new FileNotFoundException(\"DynamoDB table \"\n               + \"\u0027\" + tableName + \"\u0027 is being \"\n               + \"deleted in region \" + region);\n         case \"ACTIVE\":\n           break;\n         default:\n           throw new IOException(\"Unknown DynamoDB table status \" + status\n               + \": tableName\u003d\u0027\" + tableName + \"\u0027, region\u003d\" + region);\n         }\n \n         final Item versionMarker \u003d getVersionMarkerItem();\n         verifyVersionCompatibility(tableName, versionMarker);\n         Long created \u003d extractCreationTimeFromMarker(versionMarker);\n         LOG.debug(\"Using existing DynamoDB table {} in region {} created {}\",\n             tableName, region, (created !\u003d null) ? new Date(created) : null);\n       } catch (ResourceNotFoundException rnfe) {\n         if (conf.getBoolean(S3GUARD_DDB_TABLE_CREATE_KEY, false)) {\n           final ProvisionedThroughput capacity \u003d new ProvisionedThroughput(\n               conf.getLong(S3GUARD_DDB_TABLE_CAPACITY_READ_KEY,\n                   S3GUARD_DDB_TABLE_CAPACITY_READ_DEFAULT),\n               conf.getLong(S3GUARD_DDB_TABLE_CAPACITY_WRITE_KEY,\n                   S3GUARD_DDB_TABLE_CAPACITY_WRITE_DEFAULT));\n \n           createTable(capacity);\n         } else {\n-          throw new FileNotFoundException(\"DynamoDB table \"\n-              + \"\u0027\" + tableName + \"\u0027 does not \"\n-              + \"exist in region \" + region + \"; auto-creation is turned off\");\n+          throw (FileNotFoundException)new FileNotFoundException(\n+              \"DynamoDB table \u0027\" + tableName + \"\u0027 does not \"\n+              + \"exist in region \" + region + \"; auto-creation is turned off\")\n+              .initCause(rnfe);\n         }\n       }\n \n     } catch (AmazonClientException e) {\n       throw translateException(\"initTable\", (String) null, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void initTable() throws IOException {\n    table \u003d dynamoDB.getTable(tableName);\n    try {\n      try {\n        LOG.debug(\"Binding to table {}\", tableName);\n        TableDescription description \u003d table.describe();\n        LOG.debug(\"Table state: {}\", description);\n        final String status \u003d description.getTableStatus();\n        switch (status) {\n        case \"CREATING\":\n        case \"UPDATING\":\n          LOG.debug(\"Table {} in region {} is being created/updated. This may\"\n                  + \" indicate that the table is being operated by another \"\n                  + \"concurrent thread or process. Waiting for active...\",\n              tableName, region);\n          waitForTableActive(table);\n          break;\n        case \"DELETING\":\n          throw new FileNotFoundException(\"DynamoDB table \"\n              + \"\u0027\" + tableName + \"\u0027 is being \"\n              + \"deleted in region \" + region);\n        case \"ACTIVE\":\n          break;\n        default:\n          throw new IOException(\"Unknown DynamoDB table status \" + status\n              + \": tableName\u003d\u0027\" + tableName + \"\u0027, region\u003d\" + region);\n        }\n\n        final Item versionMarker \u003d getVersionMarkerItem();\n        verifyVersionCompatibility(tableName, versionMarker);\n        Long created \u003d extractCreationTimeFromMarker(versionMarker);\n        LOG.debug(\"Using existing DynamoDB table {} in region {} created {}\",\n            tableName, region, (created !\u003d null) ? new Date(created) : null);\n      } catch (ResourceNotFoundException rnfe) {\n        if (conf.getBoolean(S3GUARD_DDB_TABLE_CREATE_KEY, false)) {\n          final ProvisionedThroughput capacity \u003d new ProvisionedThroughput(\n              conf.getLong(S3GUARD_DDB_TABLE_CAPACITY_READ_KEY,\n                  S3GUARD_DDB_TABLE_CAPACITY_READ_DEFAULT),\n              conf.getLong(S3GUARD_DDB_TABLE_CAPACITY_WRITE_KEY,\n                  S3GUARD_DDB_TABLE_CAPACITY_WRITE_DEFAULT));\n\n          createTable(capacity);\n        } else {\n          throw (FileNotFoundException)new FileNotFoundException(\n              \"DynamoDB table \u0027\" + tableName + \"\u0027 does not \"\n              + \"exist in region \" + region + \"; auto-creation is turned off\")\n              .initCause(rnfe);\n        }\n      }\n\n    } catch (AmazonClientException e) {\n      throw translateException(\"initTable\", (String) null, e);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java",
      "extendedDetails": {}
    },
    "621b43e254afaff708cd6fc4698b29628f6abc33": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-13345 HS3Guard: Improved Consistency for S3A.\nContributed by: Chris Nauroth, Aaron Fabbri, Mingliang Liu, Lei (Eddy) Xu,\nSean Mackrory, Steve Loughran and others.\n",
      "commitDate": "01/09/17 6:13 AM",
      "commitName": "621b43e254afaff708cd6fc4698b29628f6abc33",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,51 @@\n+  void initTable() throws IOException {\n+    table \u003d dynamoDB.getTable(tableName);\n+    try {\n+      try {\n+        LOG.debug(\"Binding to table {}\", tableName);\n+        final String status \u003d table.describe().getTableStatus();\n+        switch (status) {\n+        case \"CREATING\":\n+        case \"UPDATING\":\n+          LOG.debug(\"Table {} in region {} is being created/updated. This may\"\n+                  + \" indicate that the table is being operated by another \"\n+                  + \"concurrent thread or process. Waiting for active...\",\n+              tableName, region);\n+          waitForTableActive(table);\n+          break;\n+        case \"DELETING\":\n+          throw new FileNotFoundException(\"DynamoDB table \"\n+              + \"\u0027\" + tableName + \"\u0027 is being \"\n+              + \"deleted in region \" + region);\n+        case \"ACTIVE\":\n+          break;\n+        default:\n+          throw new IOException(\"Unknown DynamoDB table status \" + status\n+              + \": tableName\u003d\u0027\" + tableName + \"\u0027, region\u003d\" + region);\n+        }\n+\n+        final Item versionMarker \u003d getVersionMarkerItem();\n+        verifyVersionCompatibility(tableName, versionMarker);\n+        Long created \u003d extractCreationTimeFromMarker(versionMarker);\n+        LOG.debug(\"Using existing DynamoDB table {} in region {} created {}\",\n+            tableName, region, (created !\u003d null) ? new Date(created) : null);\n+      } catch (ResourceNotFoundException rnfe) {\n+        if (conf.getBoolean(S3GUARD_DDB_TABLE_CREATE_KEY, false)) {\n+          final ProvisionedThroughput capacity \u003d new ProvisionedThroughput(\n+              conf.getLong(S3GUARD_DDB_TABLE_CAPACITY_READ_KEY,\n+                  S3GUARD_DDB_TABLE_CAPACITY_READ_DEFAULT),\n+              conf.getLong(S3GUARD_DDB_TABLE_CAPACITY_WRITE_KEY,\n+                  S3GUARD_DDB_TABLE_CAPACITY_WRITE_DEFAULT));\n+\n+          createTable(capacity);\n+        } else {\n+          throw new FileNotFoundException(\"DynamoDB table \"\n+              + \"\u0027\" + tableName + \"\u0027 does not \"\n+              + \"exist in region \" + region + \"; auto-creation is turned off\");\n+        }\n+      }\n+\n+    } catch (AmazonClientException e) {\n+      throw translateException(\"initTable\", (String) null, e);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  void initTable() throws IOException {\n    table \u003d dynamoDB.getTable(tableName);\n    try {\n      try {\n        LOG.debug(\"Binding to table {}\", tableName);\n        final String status \u003d table.describe().getTableStatus();\n        switch (status) {\n        case \"CREATING\":\n        case \"UPDATING\":\n          LOG.debug(\"Table {} in region {} is being created/updated. This may\"\n                  + \" indicate that the table is being operated by another \"\n                  + \"concurrent thread or process. Waiting for active...\",\n              tableName, region);\n          waitForTableActive(table);\n          break;\n        case \"DELETING\":\n          throw new FileNotFoundException(\"DynamoDB table \"\n              + \"\u0027\" + tableName + \"\u0027 is being \"\n              + \"deleted in region \" + region);\n        case \"ACTIVE\":\n          break;\n        default:\n          throw new IOException(\"Unknown DynamoDB table status \" + status\n              + \": tableName\u003d\u0027\" + tableName + \"\u0027, region\u003d\" + region);\n        }\n\n        final Item versionMarker \u003d getVersionMarkerItem();\n        verifyVersionCompatibility(tableName, versionMarker);\n        Long created \u003d extractCreationTimeFromMarker(versionMarker);\n        LOG.debug(\"Using existing DynamoDB table {} in region {} created {}\",\n            tableName, region, (created !\u003d null) ? new Date(created) : null);\n      } catch (ResourceNotFoundException rnfe) {\n        if (conf.getBoolean(S3GUARD_DDB_TABLE_CREATE_KEY, false)) {\n          final ProvisionedThroughput capacity \u003d new ProvisionedThroughput(\n              conf.getLong(S3GUARD_DDB_TABLE_CAPACITY_READ_KEY,\n                  S3GUARD_DDB_TABLE_CAPACITY_READ_DEFAULT),\n              conf.getLong(S3GUARD_DDB_TABLE_CAPACITY_WRITE_KEY,\n                  S3GUARD_DDB_TABLE_CAPACITY_WRITE_DEFAULT));\n\n          createTable(capacity);\n        } else {\n          throw new FileNotFoundException(\"DynamoDB table \"\n              + \"\u0027\" + tableName + \"\u0027 does not \"\n              + \"exist in region \" + region + \"; auto-creation is turned off\");\n        }\n      }\n\n    } catch (AmazonClientException e) {\n      throw translateException(\"initTable\", (String) null, e);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DynamoDBMetadataStore.java"
    }
  }
}