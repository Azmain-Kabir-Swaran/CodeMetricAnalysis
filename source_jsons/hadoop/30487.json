{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TimelineDataManager.java",
  "functionName": "putDomain",
  "functionId": "putDomain___domain-TimelineDomain__callerUGI-UserGroupInformation",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/TimelineDataManager.java",
  "functionStartLine": 401,
  "functionEndLine": 410,
  "numCommitsSeen": 15,
  "timeTaken": 1760,
  "changeHistory": [
    "4c659ddbf7629aae92e66a5b54893e9c1c68dfb0",
    "9e40de6af7959ac7bb5f4e4d2833ca14ea457614",
    "d78b452a4f413c6931a494c33df0666ce9b44973"
  ],
  "changeHistoryShort": {
    "4c659ddbf7629aae92e66a5b54893e9c1c68dfb0": "Ybodychange",
    "9e40de6af7959ac7bb5f4e4d2833ca14ea457614": "Ybodychange",
    "d78b452a4f413c6931a494c33df0666ce9b44973": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4c659ddbf7629aae92e66a5b54893e9c1c68dfb0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3360. Add JMX metrics to TimelineDataManager (Jason Lowe via jeagles)\n",
      "commitDate": "24/06/15 2:16 PM",
      "commitName": "4c659ddbf7629aae92e66a5b54893e9c1c68dfb0",
      "commitAuthor": "Jonathan Eagles",
      "commitDateOld": "07/05/15 10:01 AM",
      "commitNameOld": "daf3e4ef8bf73cbe4a799d51b4765809cd81089f",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 48.18,
      "commitsBetweenForRepo": 425,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,10 @@\n   public void putDomain(TimelineDomain domain,\n       UserGroupInformation callerUGI) throws YarnException, IOException {\n-    TimelineDomain existingDomain \u003d\n-        store.getDomain(domain.getId());\n-    if (existingDomain !\u003d null) {\n-      if (!timelineACLsManager.checkAccess(callerUGI, existingDomain)) {\n-        throw new YarnException(callerUGI.getShortUserName() +\n-            \" is not allowed to override an existing domain \" +\n-            existingDomain.getId());\n-      }\n-      // Set it again in case ACLs are not enabled: The domain can be\n-      // modified by every body, but the owner is not changed.\n-      domain.setOwner(existingDomain.getOwner());\n-    }\n-    store.put(domain);\n-    // If the domain exists already, it is likely to be in the cache.\n-    // We need to invalidate it.\n-    if (existingDomain !\u003d null) {\n-      timelineACLsManager.replaceIfExist(domain);\n+    long startTime \u003d Time.monotonicNow();\n+    metrics.incrPutDomainOps();\n+    try {\n+      doPutDomain(domain, callerUGI);\n+    } finally {\n+      metrics.addPutDomainTime(Time.monotonicNow() - startTime);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void putDomain(TimelineDomain domain,\n      UserGroupInformation callerUGI) throws YarnException, IOException {\n    long startTime \u003d Time.monotonicNow();\n    metrics.incrPutDomainOps();\n    try {\n      doPutDomain(domain, callerUGI);\n    } finally {\n      metrics.addPutDomainTime(Time.monotonicNow() - startTime);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/TimelineDataManager.java",
      "extendedDetails": {}
    },
    "9e40de6af7959ac7bb5f4e4d2833ca14ea457614": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2446. Augmented Timeline service APIs to start taking in domains as a parameter while posting entities and events. Contributed by Zhijie Shen.\n",
      "commitDate": "01/10/14 5:52 PM",
      "commitName": "9e40de6af7959ac7bb5f4e4d2833ca14ea457614",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "24/09/14 11:27 AM",
      "commitNameOld": "d78b452a4f413c6931a494c33df0666ce9b44973",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 7.27,
      "commitsBetweenForRepo": 96,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,21 @@\n   public void putDomain(TimelineDomain domain,\n       UserGroupInformation callerUGI) throws YarnException, IOException {\n     TimelineDomain existingDomain \u003d\n         store.getDomain(domain.getId());\n     if (existingDomain !\u003d null) {\n       if (!timelineACLsManager.checkAccess(callerUGI, existingDomain)) {\n         throw new YarnException(callerUGI.getShortUserName() +\n             \" is not allowed to override an existing domain \" +\n             existingDomain.getId());\n       }\n       // Set it again in case ACLs are not enabled: The domain can be\n       // modified by every body, but the owner is not changed.\n       domain.setOwner(existingDomain.getOwner());\n     }\n     store.put(domain);\n+    // If the domain exists already, it is likely to be in the cache.\n+    // We need to invalidate it.\n+    if (existingDomain !\u003d null) {\n+      timelineACLsManager.replaceIfExist(domain);\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void putDomain(TimelineDomain domain,\n      UserGroupInformation callerUGI) throws YarnException, IOException {\n    TimelineDomain existingDomain \u003d\n        store.getDomain(domain.getId());\n    if (existingDomain !\u003d null) {\n      if (!timelineACLsManager.checkAccess(callerUGI, existingDomain)) {\n        throw new YarnException(callerUGI.getShortUserName() +\n            \" is not allowed to override an existing domain \" +\n            existingDomain.getId());\n      }\n      // Set it again in case ACLs are not enabled: The domain can be\n      // modified by every body, but the owner is not changed.\n      domain.setOwner(existingDomain.getOwner());\n    }\n    store.put(domain);\n    // If the domain exists already, it is likely to be in the cache.\n    // We need to invalidate it.\n    if (existingDomain !\u003d null) {\n      timelineACLsManager.replaceIfExist(domain);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/TimelineDataManager.java",
      "extendedDetails": {}
    },
    "d78b452a4f413c6931a494c33df0666ce9b44973": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2102. Added the concept of a Timeline Domain to handle read/write ACLs on Timeline service event data. Contributed by Zhijie Shen.\n",
      "commitDate": "24/09/14 11:27 AM",
      "commitName": "d78b452a4f413c6931a494c33df0666ce9b44973",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,16 @@\n+  public void putDomain(TimelineDomain domain,\n+      UserGroupInformation callerUGI) throws YarnException, IOException {\n+    TimelineDomain existingDomain \u003d\n+        store.getDomain(domain.getId());\n+    if (existingDomain !\u003d null) {\n+      if (!timelineACLsManager.checkAccess(callerUGI, existingDomain)) {\n+        throw new YarnException(callerUGI.getShortUserName() +\n+            \" is not allowed to override an existing domain \" +\n+            existingDomain.getId());\n+      }\n+      // Set it again in case ACLs are not enabled: The domain can be\n+      // modified by every body, but the owner is not changed.\n+      domain.setOwner(existingDomain.getOwner());\n+    }\n+    store.put(domain);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void putDomain(TimelineDomain domain,\n      UserGroupInformation callerUGI) throws YarnException, IOException {\n    TimelineDomain existingDomain \u003d\n        store.getDomain(domain.getId());\n    if (existingDomain !\u003d null) {\n      if (!timelineACLsManager.checkAccess(callerUGI, existingDomain)) {\n        throw new YarnException(callerUGI.getShortUserName() +\n            \" is not allowed to override an existing domain \" +\n            existingDomain.getId());\n      }\n      // Set it again in case ACLs are not enabled: The domain can be\n      // modified by every body, but the owner is not changed.\n      domain.setOwner(existingDomain.getOwner());\n    }\n    store.put(domain);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/TimelineDataManager.java"
    }
  }
}