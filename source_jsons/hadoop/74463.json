{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "KDiag.java",
  "functionName": "run",
  "functionId": "run___argv-String[]",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/KDiag.java",
  "functionStartLine": 197,
  "functionEndLine": 243,
  "numCommitsSeen": 11,
  "timeTaken": 2038,
  "changeHistory": [
    "d43af8b3db4743b4b240751b6f29de6c20cfd6e5",
    "d0edd37269bb40290b409d583bcf3b70897c13e0",
    "829a2e4d271f05afb209ddc834cd4a0e85492eda",
    "cfa8513890ec1cd7f71258ff3c3083f6d89a4fc4"
  ],
  "changeHistoryShort": {
    "d43af8b3db4743b4b240751b6f29de6c20cfd6e5": "Ybodychange",
    "d0edd37269bb40290b409d583bcf3b70897c13e0": "Ybodychange",
    "829a2e4d271f05afb209ddc834cd4a0e85492eda": "Ybodychange",
    "cfa8513890ec1cd7f71258ff3c3083f6d89a4fc4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d43af8b3db4743b4b240751b6f29de6c20cfd6e5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15996.  Improved Kerberos username mapping strategy in Hadoop.\n               Contributed by Bolke de Bruin\n",
      "commitDate": "04/01/19 2:54 PM",
      "commitName": "d43af8b3db4743b4b240751b6f29de6c20cfd6e5",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "29/11/18 9:52 AM",
      "commitNameOld": "d0edd37269bb40290b409d583bcf3b70897c13e0",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 36.21,
      "commitsBetweenForRepo": 207,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,47 @@\n   public int run(String[] argv) throws Exception {\n     List\u003cString\u003e args \u003d new LinkedList\u003c\u003e(Arrays.asList(argv));\n     String keytabName \u003d popOptionWithArgument(ARG_KEYTAB, args);\n     if (keytabName !\u003d null) {\n       keytab \u003d new File(keytabName);\n     }\n     principal \u003d popOptionWithArgument(ARG_PRINCIPAL, args);\n     String outf \u003d popOptionWithArgument(ARG_OUTPUT, args);\n     String mkl \u003d popOptionWithArgument(ARG_KEYLEN, args);\n     if (mkl !\u003d null) {\n       minKeyLength \u003d Integer.parseInt(mkl);\n     }\n     securityRequired \u003d popOption(ARG_SECURE, args);\n     nofail \u003d popOption(ARG_NOFAIL, args);\n     jaas \u003d popOption(ARG_JAAS, args);\n     nologin \u003d popOption(ARG_NOLOGIN, args);\n+    checkShortName \u003d popOption(ARG_VERIFYSHORTNAME, args);\n \n     // look for list of resources\n     String resource;\n     while (null !\u003d (resource \u003d popOptionWithArgument(ARG_RESOURCE, args))) {\n       // loading a resource\n       LOG.info(\"Loading resource {}\", resource);\n       try (InputStream in \u003d\n                getClass().getClassLoader().getResourceAsStream(resource)) {\n         if (verify(in !\u003d null, CAT_CONFIG, \"No resource %s\", resource)) {\n           Configuration.addDefaultResource(resource);\n         }\n       }\n     }\n     // look for any leftovers\n     if (!args.isEmpty()) {\n       println(\"Unknown arguments in command:\");\n       for (String s : args) {\n         println(\"  \\\"%s\\\"\", s);\n       }\n       println();\n       println(usage());\n       return -1;\n     }\n     if (outf !\u003d null) {\n       println(\"Printing output to %s\", outf);\n       out \u003d new PrintWriter(new File(outf), \"UTF-8\");\n     }\n     execute();\n     return probeHasFailed ? KDIAG_FAILURE : 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] argv) throws Exception {\n    List\u003cString\u003e args \u003d new LinkedList\u003c\u003e(Arrays.asList(argv));\n    String keytabName \u003d popOptionWithArgument(ARG_KEYTAB, args);\n    if (keytabName !\u003d null) {\n      keytab \u003d new File(keytabName);\n    }\n    principal \u003d popOptionWithArgument(ARG_PRINCIPAL, args);\n    String outf \u003d popOptionWithArgument(ARG_OUTPUT, args);\n    String mkl \u003d popOptionWithArgument(ARG_KEYLEN, args);\n    if (mkl !\u003d null) {\n      minKeyLength \u003d Integer.parseInt(mkl);\n    }\n    securityRequired \u003d popOption(ARG_SECURE, args);\n    nofail \u003d popOption(ARG_NOFAIL, args);\n    jaas \u003d popOption(ARG_JAAS, args);\n    nologin \u003d popOption(ARG_NOLOGIN, args);\n    checkShortName \u003d popOption(ARG_VERIFYSHORTNAME, args);\n\n    // look for list of resources\n    String resource;\n    while (null !\u003d (resource \u003d popOptionWithArgument(ARG_RESOURCE, args))) {\n      // loading a resource\n      LOG.info(\"Loading resource {}\", resource);\n      try (InputStream in \u003d\n               getClass().getClassLoader().getResourceAsStream(resource)) {\n        if (verify(in !\u003d null, CAT_CONFIG, \"No resource %s\", resource)) {\n          Configuration.addDefaultResource(resource);\n        }\n      }\n    }\n    // look for any leftovers\n    if (!args.isEmpty()) {\n      println(\"Unknown arguments in command:\");\n      for (String s : args) {\n        println(\"  \\\"%s\\\"\", s);\n      }\n      println();\n      println(usage());\n      return -1;\n    }\n    if (outf !\u003d null) {\n      println(\"Printing output to %s\", outf);\n      out \u003d new PrintWriter(new File(outf), \"UTF-8\");\n    }\n    execute();\n    return probeHasFailed ? KDIAG_FAILURE : 0;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/KDiag.java",
      "extendedDetails": {}
    },
    "d0edd37269bb40290b409d583bcf3b70897c13e0": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15959. Revert \"HADOOP-12751. While using kerberos Hadoop incorrectly assumes names with \u0027@\u0027 to be non-simple\"\n\nThis reverts commit 829a2e4d271f05afb209ddc834cd4a0e85492eda.\n",
      "commitDate": "29/11/18 9:52 AM",
      "commitName": "d0edd37269bb40290b409d583bcf3b70897c13e0",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "18/01/18 4:35 AM",
      "commitNameOld": "de630708d1912b3e4fa31e00f5d84a08a580e763",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 315.22,
      "commitsBetweenForRepo": 3045,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,46 @@\n   public int run(String[] argv) throws Exception {\n     List\u003cString\u003e args \u003d new LinkedList\u003c\u003e(Arrays.asList(argv));\n     String keytabName \u003d popOptionWithArgument(ARG_KEYTAB, args);\n     if (keytabName !\u003d null) {\n       keytab \u003d new File(keytabName);\n     }\n     principal \u003d popOptionWithArgument(ARG_PRINCIPAL, args);\n     String outf \u003d popOptionWithArgument(ARG_OUTPUT, args);\n     String mkl \u003d popOptionWithArgument(ARG_KEYLEN, args);\n     if (mkl !\u003d null) {\n       minKeyLength \u003d Integer.parseInt(mkl);\n     }\n     securityRequired \u003d popOption(ARG_SECURE, args);\n     nofail \u003d popOption(ARG_NOFAIL, args);\n     jaas \u003d popOption(ARG_JAAS, args);\n     nologin \u003d popOption(ARG_NOLOGIN, args);\n-    checkShortName \u003d popOption(ARG_VERIFYSHORTNAME, args);\n \n     // look for list of resources\n     String resource;\n     while (null !\u003d (resource \u003d popOptionWithArgument(ARG_RESOURCE, args))) {\n       // loading a resource\n       LOG.info(\"Loading resource {}\", resource);\n       try (InputStream in \u003d\n                getClass().getClassLoader().getResourceAsStream(resource)) {\n         if (verify(in !\u003d null, CAT_CONFIG, \"No resource %s\", resource)) {\n           Configuration.addDefaultResource(resource);\n         }\n       }\n     }\n     // look for any leftovers\n     if (!args.isEmpty()) {\n       println(\"Unknown arguments in command:\");\n       for (String s : args) {\n         println(\"  \\\"%s\\\"\", s);\n       }\n       println();\n       println(usage());\n       return -1;\n     }\n     if (outf !\u003d null) {\n       println(\"Printing output to %s\", outf);\n       out \u003d new PrintWriter(new File(outf), \"UTF-8\");\n     }\n     execute();\n     return probeHasFailed ? KDIAG_FAILURE : 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] argv) throws Exception {\n    List\u003cString\u003e args \u003d new LinkedList\u003c\u003e(Arrays.asList(argv));\n    String keytabName \u003d popOptionWithArgument(ARG_KEYTAB, args);\n    if (keytabName !\u003d null) {\n      keytab \u003d new File(keytabName);\n    }\n    principal \u003d popOptionWithArgument(ARG_PRINCIPAL, args);\n    String outf \u003d popOptionWithArgument(ARG_OUTPUT, args);\n    String mkl \u003d popOptionWithArgument(ARG_KEYLEN, args);\n    if (mkl !\u003d null) {\n      minKeyLength \u003d Integer.parseInt(mkl);\n    }\n    securityRequired \u003d popOption(ARG_SECURE, args);\n    nofail \u003d popOption(ARG_NOFAIL, args);\n    jaas \u003d popOption(ARG_JAAS, args);\n    nologin \u003d popOption(ARG_NOLOGIN, args);\n\n    // look for list of resources\n    String resource;\n    while (null !\u003d (resource \u003d popOptionWithArgument(ARG_RESOURCE, args))) {\n      // loading a resource\n      LOG.info(\"Loading resource {}\", resource);\n      try (InputStream in \u003d\n               getClass().getClassLoader().getResourceAsStream(resource)) {\n        if (verify(in !\u003d null, CAT_CONFIG, \"No resource %s\", resource)) {\n          Configuration.addDefaultResource(resource);\n        }\n      }\n    }\n    // look for any leftovers\n    if (!args.isEmpty()) {\n      println(\"Unknown arguments in command:\");\n      for (String s : args) {\n        println(\"  \\\"%s\\\"\", s);\n      }\n      println();\n      println(usage());\n      return -1;\n    }\n    if (outf !\u003d null) {\n      println(\"Printing output to %s\", outf);\n      out \u003d new PrintWriter(new File(outf), \"UTF-8\");\n    }\n    execute();\n    return probeHasFailed ? KDIAG_FAILURE : 0;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/KDiag.java",
      "extendedDetails": {}
    },
    "829a2e4d271f05afb209ddc834cd4a0e85492eda": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12751. While using kerberos Hadoop incorrectly assumes names with \u0027@\u0027 to be non-simple. (Bolke de Bruin via stevel).\n",
      "commitDate": "10/05/16 1:32 PM",
      "commitName": "829a2e4d271f05afb209ddc834cd4a0e85492eda",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "05/02/16 3:47 PM",
      "commitNameOld": "cfa8513890ec1cd7f71258ff3c3083f6d89a4fc4",
      "commitAuthorOld": "cnauroth",
      "daysBetweenCommits": 94.86,
      "commitsBetweenForRepo": 577,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,47 @@\n   public int run(String[] argv) throws Exception {\n     List\u003cString\u003e args \u003d new LinkedList\u003c\u003e(Arrays.asList(argv));\n     String keytabName \u003d popOptionWithArgument(ARG_KEYTAB, args);\n     if (keytabName !\u003d null) {\n       keytab \u003d new File(keytabName);\n     }\n     principal \u003d popOptionWithArgument(ARG_PRINCIPAL, args);\n     String outf \u003d popOptionWithArgument(ARG_OUTPUT, args);\n     String mkl \u003d popOptionWithArgument(ARG_KEYLEN, args);\n     if (mkl !\u003d null) {\n       minKeyLength \u003d Integer.parseInt(mkl);\n     }\n     securityRequired \u003d popOption(ARG_SECURE, args);\n     nofail \u003d popOption(ARG_NOFAIL, args);\n     jaas \u003d popOption(ARG_JAAS, args);\n     nologin \u003d popOption(ARG_NOLOGIN, args);\n+    checkShortName \u003d popOption(ARG_VERIFYSHORTNAME, args);\n \n     // look for list of resources\n     String resource;\n     while (null !\u003d (resource \u003d popOptionWithArgument(ARG_RESOURCE, args))) {\n       // loading a resource\n       LOG.info(\"Loading resource {}\", resource);\n       try (InputStream in \u003d\n                getClass().getClassLoader().getResourceAsStream(resource)) {\n         if (verify(in !\u003d null, CAT_CONFIG, \"No resource %s\", resource)) {\n           Configuration.addDefaultResource(resource);\n         }\n       }\n     }\n     // look for any leftovers\n     if (!args.isEmpty()) {\n       println(\"Unknown arguments in command:\");\n       for (String s : args) {\n         println(\"  \\\"%s\\\"\", s);\n       }\n       println();\n       println(usage());\n       return -1;\n     }\n     if (outf !\u003d null) {\n       println(\"Printing output to %s\", outf);\n       out \u003d new PrintWriter(new File(outf), \"UTF-8\");\n     }\n     execute();\n     return probeHasFailed ? KDIAG_FAILURE : 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] argv) throws Exception {\n    List\u003cString\u003e args \u003d new LinkedList\u003c\u003e(Arrays.asList(argv));\n    String keytabName \u003d popOptionWithArgument(ARG_KEYTAB, args);\n    if (keytabName !\u003d null) {\n      keytab \u003d new File(keytabName);\n    }\n    principal \u003d popOptionWithArgument(ARG_PRINCIPAL, args);\n    String outf \u003d popOptionWithArgument(ARG_OUTPUT, args);\n    String mkl \u003d popOptionWithArgument(ARG_KEYLEN, args);\n    if (mkl !\u003d null) {\n      minKeyLength \u003d Integer.parseInt(mkl);\n    }\n    securityRequired \u003d popOption(ARG_SECURE, args);\n    nofail \u003d popOption(ARG_NOFAIL, args);\n    jaas \u003d popOption(ARG_JAAS, args);\n    nologin \u003d popOption(ARG_NOLOGIN, args);\n    checkShortName \u003d popOption(ARG_VERIFYSHORTNAME, args);\n\n    // look for list of resources\n    String resource;\n    while (null !\u003d (resource \u003d popOptionWithArgument(ARG_RESOURCE, args))) {\n      // loading a resource\n      LOG.info(\"Loading resource {}\", resource);\n      try (InputStream in \u003d\n               getClass().getClassLoader().getResourceAsStream(resource)) {\n        if (verify(in !\u003d null, CAT_CONFIG, \"No resource %s\", resource)) {\n          Configuration.addDefaultResource(resource);\n        }\n      }\n    }\n    // look for any leftovers\n    if (!args.isEmpty()) {\n      println(\"Unknown arguments in command:\");\n      for (String s : args) {\n        println(\"  \\\"%s\\\"\", s);\n      }\n      println();\n      println(usage());\n      return -1;\n    }\n    if (outf !\u003d null) {\n      println(\"Printing output to %s\", outf);\n      out \u003d new PrintWriter(new File(outf), \"UTF-8\");\n    }\n    execute();\n    return probeHasFailed ? KDIAG_FAILURE : 0;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/KDiag.java",
      "extendedDetails": {}
    },
    "cfa8513890ec1cd7f71258ff3c3083f6d89a4fc4": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-12426. Add Entry point for Kerberos health check. Contributed by Steve Loughran.\n",
      "commitDate": "05/02/16 3:47 PM",
      "commitName": "cfa8513890ec1cd7f71258ff3c3083f6d89a4fc4",
      "commitAuthor": "cnauroth",
      "diff": "@@ -0,0 +1,46 @@\n+  public int run(String[] argv) throws Exception {\n+    List\u003cString\u003e args \u003d new LinkedList\u003c\u003e(Arrays.asList(argv));\n+    String keytabName \u003d popOptionWithArgument(ARG_KEYTAB, args);\n+    if (keytabName !\u003d null) {\n+      keytab \u003d new File(keytabName);\n+    }\n+    principal \u003d popOptionWithArgument(ARG_PRINCIPAL, args);\n+    String outf \u003d popOptionWithArgument(ARG_OUTPUT, args);\n+    String mkl \u003d popOptionWithArgument(ARG_KEYLEN, args);\n+    if (mkl !\u003d null) {\n+      minKeyLength \u003d Integer.parseInt(mkl);\n+    }\n+    securityRequired \u003d popOption(ARG_SECURE, args);\n+    nofail \u003d popOption(ARG_NOFAIL, args);\n+    jaas \u003d popOption(ARG_JAAS, args);\n+    nologin \u003d popOption(ARG_NOLOGIN, args);\n+\n+    // look for list of resources\n+    String resource;\n+    while (null !\u003d (resource \u003d popOptionWithArgument(ARG_RESOURCE, args))) {\n+      // loading a resource\n+      LOG.info(\"Loading resource {}\", resource);\n+      try (InputStream in \u003d\n+               getClass().getClassLoader().getResourceAsStream(resource)) {\n+        if (verify(in !\u003d null, CAT_CONFIG, \"No resource %s\", resource)) {\n+          Configuration.addDefaultResource(resource);\n+        }\n+      }\n+    }\n+    // look for any leftovers\n+    if (!args.isEmpty()) {\n+      println(\"Unknown arguments in command:\");\n+      for (String s : args) {\n+        println(\"  \\\"%s\\\"\", s);\n+      }\n+      println();\n+      println(usage());\n+      return -1;\n+    }\n+    if (outf !\u003d null) {\n+      println(\"Printing output to %s\", outf);\n+      out \u003d new PrintWriter(new File(outf), \"UTF-8\");\n+    }\n+    execute();\n+    return probeHasFailed ? KDIAG_FAILURE : 0;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] argv) throws Exception {\n    List\u003cString\u003e args \u003d new LinkedList\u003c\u003e(Arrays.asList(argv));\n    String keytabName \u003d popOptionWithArgument(ARG_KEYTAB, args);\n    if (keytabName !\u003d null) {\n      keytab \u003d new File(keytabName);\n    }\n    principal \u003d popOptionWithArgument(ARG_PRINCIPAL, args);\n    String outf \u003d popOptionWithArgument(ARG_OUTPUT, args);\n    String mkl \u003d popOptionWithArgument(ARG_KEYLEN, args);\n    if (mkl !\u003d null) {\n      minKeyLength \u003d Integer.parseInt(mkl);\n    }\n    securityRequired \u003d popOption(ARG_SECURE, args);\n    nofail \u003d popOption(ARG_NOFAIL, args);\n    jaas \u003d popOption(ARG_JAAS, args);\n    nologin \u003d popOption(ARG_NOLOGIN, args);\n\n    // look for list of resources\n    String resource;\n    while (null !\u003d (resource \u003d popOptionWithArgument(ARG_RESOURCE, args))) {\n      // loading a resource\n      LOG.info(\"Loading resource {}\", resource);\n      try (InputStream in \u003d\n               getClass().getClassLoader().getResourceAsStream(resource)) {\n        if (verify(in !\u003d null, CAT_CONFIG, \"No resource %s\", resource)) {\n          Configuration.addDefaultResource(resource);\n        }\n      }\n    }\n    // look for any leftovers\n    if (!args.isEmpty()) {\n      println(\"Unknown arguments in command:\");\n      for (String s : args) {\n        println(\"  \\\"%s\\\"\", s);\n      }\n      println();\n      println(usage());\n      return -1;\n    }\n    if (outf !\u003d null) {\n      println(\"Printing output to %s\", outf);\n      out \u003d new PrintWriter(new File(outf), \"UTF-8\");\n    }\n    execute();\n    return probeHasFailed ? KDIAG_FAILURE : 0;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/KDiag.java"
    }
  }
}