{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FairCallQueue.java",
  "functionName": "poll",
  "functionId": "poll___timeout-long__unit-TimeUnit",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/FairCallQueue.java",
  "functionStartLine": 285,
  "functionEndLine": 287,
  "numCommitsSeen": 14,
  "timeTaken": 1085,
  "changeHistory": [
    "0c01cf57987bcc7a17154a3538960b67f625a9e5",
    "4b3a6b87221076a6b5df2bf4243575018e5f1793"
  ],
  "changeHistoryShort": {
    "0c01cf57987bcc7a17154a3538960b67f625a9e5": "Ybodychange",
    "4b3a6b87221076a6b5df2bf4243575018e5f1793": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0c01cf57987bcc7a17154a3538960b67f625a9e5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14033. Reduce fair call queue lock contention. Contributed by Daryn Sharp.\n",
      "commitDate": "09/02/17 2:17 PM",
      "commitName": "0c01cf57987bcc7a17154a3538960b67f625a9e5",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "09/02/17 8:04 AM",
      "commitNameOld": "a0bfb4150464013a618f30c2e38d88fc6de11ad2",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 0.26,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,3 @@\n-  public E poll(long timeout, TimeUnit unit)\n-      throws InterruptedException {\n-\n-    int startIdx \u003d this.multiplexer.getAndAdvanceCurrentIndex();\n-\n-    long nanos \u003d unit.toNanos(timeout);\n-    takeLock.lockInterruptibly();\n-    try {\n-      for (;;) {\n-        BlockingQueue\u003cE\u003e q \u003d this.getFirstNonEmptyQueue(startIdx);\n-        if (q !\u003d null) {\n-          E e \u003d q.poll();\n-          if (e !\u003d null) {\n-            // Escape condition: there might be something available\n-            return e;\n-          }\n-        }\n-\n-        if (nanos \u003c\u003d 0) {\n-          // Wait has elapsed\n-          return null;\n-        }\n-\n-        try {\n-          // Now wait on the condition for a bit. If we get\n-          // spuriously awoken we\u0027ll re-loop\n-          nanos \u003d notEmpty.awaitNanos(nanos);\n-        } catch (InterruptedException ie) {\n-          notEmpty.signal(); // propagate to a non-interrupted thread\n-          throw ie;\n-        }\n-      }\n-    } finally {\n-      takeLock.unlock();\n-    }\n+  public E poll(long timeout, TimeUnit unit) throws InterruptedException {\n+    return semaphore.tryAcquire(timeout, unit) ? removeNextElement() : null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public E poll(long timeout, TimeUnit unit) throws InterruptedException {\n    return semaphore.tryAcquire(timeout, unit) ? removeNextElement() : null;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/FairCallQueue.java",
      "extendedDetails": {}
    },
    "4b3a6b87221076a6b5df2bf4243575018e5f1793": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10282. Create a FairCallQueue: a multi-level call queue which schedules incoming calls and multiplexes outgoing calls. (Contributed by Chris Li)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1619938 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/08/14 3:16 PM",
      "commitName": "4b3a6b87221076a6b5df2bf4243575018e5f1793",
      "commitAuthor": "Arpit Agarwal",
      "diff": "@@ -0,0 +1,36 @@\n+  public E poll(long timeout, TimeUnit unit)\n+      throws InterruptedException {\n+\n+    int startIdx \u003d this.multiplexer.getAndAdvanceCurrentIndex();\n+\n+    long nanos \u003d unit.toNanos(timeout);\n+    takeLock.lockInterruptibly();\n+    try {\n+      for (;;) {\n+        BlockingQueue\u003cE\u003e q \u003d this.getFirstNonEmptyQueue(startIdx);\n+        if (q !\u003d null) {\n+          E e \u003d q.poll();\n+          if (e !\u003d null) {\n+            // Escape condition: there might be something available\n+            return e;\n+          }\n+        }\n+\n+        if (nanos \u003c\u003d 0) {\n+          // Wait has elapsed\n+          return null;\n+        }\n+\n+        try {\n+          // Now wait on the condition for a bit. If we get\n+          // spuriously awoken we\u0027ll re-loop\n+          nanos \u003d notEmpty.awaitNanos(nanos);\n+        } catch (InterruptedException ie) {\n+          notEmpty.signal(); // propagate to a non-interrupted thread\n+          throw ie;\n+        }\n+      }\n+    } finally {\n+      takeLock.unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public E poll(long timeout, TimeUnit unit)\n      throws InterruptedException {\n\n    int startIdx \u003d this.multiplexer.getAndAdvanceCurrentIndex();\n\n    long nanos \u003d unit.toNanos(timeout);\n    takeLock.lockInterruptibly();\n    try {\n      for (;;) {\n        BlockingQueue\u003cE\u003e q \u003d this.getFirstNonEmptyQueue(startIdx);\n        if (q !\u003d null) {\n          E e \u003d q.poll();\n          if (e !\u003d null) {\n            // Escape condition: there might be something available\n            return e;\n          }\n        }\n\n        if (nanos \u003c\u003d 0) {\n          // Wait has elapsed\n          return null;\n        }\n\n        try {\n          // Now wait on the condition for a bit. If we get\n          // spuriously awoken we\u0027ll re-loop\n          nanos \u003d notEmpty.awaitNanos(nanos);\n        } catch (InterruptedException ie) {\n          notEmpty.signal(); // propagate to a non-interrupted thread\n          throw ie;\n        }\n      }\n    } finally {\n      takeLock.unlock();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/FairCallQueue.java"
    }
  }
}