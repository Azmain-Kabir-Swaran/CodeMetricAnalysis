{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DockerLinuxContainerRuntime.java",
  "functionName": "initialize",
  "functionId": "initialize___conf-Configuration__nmContext-Context",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
  "functionStartLine": 330,
  "functionEndLine": 405,
  "numCommitsSeen": 121,
  "timeTaken": 9536,
  "changeHistory": [
    "29465bf169a7e348a4f32265083450faf66d5631",
    "254efc93588beff6b93fd887ddd43a8e14ea4903",
    "3dc252326693170ac1b31bf2914bae72ca73d31a",
    "f4906ac01960c78ff0c91797eaa4b36d80f6826d",
    "b237a0dd44ab285941983648d7ef26b99b30d624",
    "bf8a1750e99cfbfa76021ce51b6514c74c06f498",
    "73625168c0f29aa646d7a715c9fb15e43d6c7e05",
    "7526815e3234ca352854ecfb142a13f1a188d5bd",
    "1388de18ad51434569589a8f5b0b05c38fe02ab3",
    "907919d28c1b7e4496d189b46ecbb86a10d41339",
    "3d65dbe032e202361d613344ccc6d9c5f99ba395",
    "d00b6f7c1ff2d7569ae9efdc6823ebcfb86ef2d4",
    "9114d7a5a0159bbe70e9c289dbe1fc5db9101db5",
    "bfd1a72ba8fbb06da73fede2a85e0b544d6ab43f",
    "f3eb4c3c738204e099cbaa03471497c46530efbf",
    "86fb58b7dc832c2df30469d128598a6a1bed8df5",
    "e39ae0e676f77fab216e2281ae946ab8c647733f",
    "3e6fce91a471b4a5099de109582e7c6417e8a822"
  ],
  "changeHistoryShort": {
    "29465bf169a7e348a4f32265083450faf66d5631": "Ybodychange",
    "254efc93588beff6b93fd887ddd43a8e14ea4903": "Ybodychange",
    "3dc252326693170ac1b31bf2914bae72ca73d31a": "Ybodychange",
    "f4906ac01960c78ff0c91797eaa4b36d80f6826d": "Ybodychange",
    "b237a0dd44ab285941983648d7ef26b99b30d624": "Ybodychange",
    "bf8a1750e99cfbfa76021ce51b6514c74c06f498": "Ybodychange",
    "73625168c0f29aa646d7a715c9fb15e43d6c7e05": "Ybodychange",
    "7526815e3234ca352854ecfb142a13f1a188d5bd": "Ybodychange",
    "1388de18ad51434569589a8f5b0b05c38fe02ab3": "Ybodychange",
    "907919d28c1b7e4496d189b46ecbb86a10d41339": "Ybodychange",
    "3d65dbe032e202361d613344ccc6d9c5f99ba395": "Ybodychange",
    "d00b6f7c1ff2d7569ae9efdc6823ebcfb86ef2d4": "Ybodychange",
    "9114d7a5a0159bbe70e9c289dbe1fc5db9101db5": "Ymultichange(Yparameterchange,Ybodychange)",
    "bfd1a72ba8fbb06da73fede2a85e0b544d6ab43f": "Ybodychange",
    "f3eb4c3c738204e099cbaa03471497c46530efbf": "Ybodychange",
    "86fb58b7dc832c2df30469d128598a6a1bed8df5": "Ybodychange",
    "e39ae0e676f77fab216e2281ae946ab8c647733f": "Ybodychange",
    "3e6fce91a471b4a5099de109582e7c6417e8a822": "Yintroduced"
  },
  "changeHistoryDetails": {
    "29465bf169a7e348a4f32265083450faf66d5631": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9560. Restructure DockerLinuxContainerRuntime to extend OCIContainerRuntime.\n           Contributed by Eric Badger, Jim Brennan, Craig Condit\n",
      "commitDate": "28/06/19 2:18 PM",
      "commitName": "29465bf169a7e348a4f32265083450faf66d5631",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "15/04/19 11:24 AM",
      "commitNameOld": "254efc93588beff6b93fd887ddd43a8e14ea4903",
      "commitAuthorOld": "Eric Badger",
      "daysBetweenCommits": 74.12,
      "commitsBetweenForRepo": 531,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,74 +1,76 @@\n   public void initialize(Configuration conf, Context nmContext)\n       throws ContainerExecutionException {\n+    super.initialize(conf, nmContext);\n     this.nmContext \u003d nmContext;\n     this.conf \u003d conf;\n+\n     dockerClient \u003d new DockerClient();\n     allowedNetworks.clear();\n     allowedRuntimes.clear();\n     defaultROMounts.clear();\n     defaultRWMounts.clear();\n     defaultTmpfsMounts.clear();\n     defaultImageName \u003d conf.getTrimmed(\n         YarnConfiguration.NM_DOCKER_IMAGE_NAME, \"\");\n     defaultImageUpdate \u003d conf.getBoolean(\n         YarnConfiguration.NM_DOCKER_IMAGE_UPDATE, false);\n     allowedNetworks.addAll(Arrays.asList(\n         conf.getTrimmedStrings(\n             YarnConfiguration.NM_DOCKER_ALLOWED_CONTAINER_NETWORKS,\n             YarnConfiguration.DEFAULT_NM_DOCKER_ALLOWED_CONTAINER_NETWORKS)));\n     defaultNetwork \u003d conf.getTrimmed(\n         YarnConfiguration.NM_DOCKER_DEFAULT_CONTAINER_NETWORK,\n         YarnConfiguration.DEFAULT_NM_DOCKER_DEFAULT_CONTAINER_NETWORK);\n     allowedRuntimes.addAll(Arrays.asList(\n         conf.getTrimmedStrings(\n             YarnConfiguration.NM_DOCKER_ALLOWED_CONTAINER_RUNTIMES,\n             YarnConfiguration.DEFAULT_NM_DOCKER_ALLOWED_CONTAINER_RUNTIMES)));\n \n     if(!allowedNetworks.contains(defaultNetwork)) {\n       String message \u003d \"Default network: \" + defaultNetwork\n           + \" is not in the set of allowed networks: \" + allowedNetworks;\n \n       if (LOG.isWarnEnabled()) {\n         LOG.warn(message + \". Please check configuration\");\n       }\n \n       throw new ContainerExecutionException(message);\n     }\n \n     // initialize csi adaptors if necessary\n     initiateCsiClients(conf);\n \n     privilegedContainersAcl \u003d new AccessControlList(conf.getTrimmed(\n         YarnConfiguration.NM_DOCKER_PRIVILEGED_CONTAINERS_ACL,\n         YarnConfiguration.DEFAULT_NM_DOCKER_PRIVILEGED_CONTAINERS_ACL));\n \n     enableUserReMapping \u003d conf.getBoolean(\n       YarnConfiguration.NM_DOCKER_ENABLE_USER_REMAPPING,\n       YarnConfiguration.DEFAULT_NM_DOCKER_ENABLE_USER_REMAPPING);\n \n     userRemappingUidThreshold \u003d conf.getInt(\n       YarnConfiguration.NM_DOCKER_USER_REMAPPING_UID_THRESHOLD,\n       YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_UID_THRESHOLD);\n \n     userRemappingGidThreshold \u003d conf.getInt(\n       YarnConfiguration.NM_DOCKER_USER_REMAPPING_GID_THRESHOLD,\n       YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_GID_THRESHOLD);\n \n     capabilities \u003d getDockerCapabilitiesFromConf();\n \n     delayedRemovalAllowed \u003d conf.getBoolean(\n         YarnConfiguration.NM_DOCKER_ALLOW_DELAYED_REMOVAL,\n         YarnConfiguration.DEFAULT_NM_DOCKER_ALLOW_DELAYED_REMOVAL);\n \n     defaultROMounts.addAll(Arrays.asList(\n         conf.getTrimmedStrings(\n         YarnConfiguration.NM_DOCKER_DEFAULT_RO_MOUNTS)));\n \n     defaultRWMounts.addAll(Arrays.asList(\n         conf.getTrimmedStrings(\n         YarnConfiguration.NM_DOCKER_DEFAULT_RW_MOUNTS)));\n \n     defaultTmpfsMounts.addAll(Arrays.asList(\n         conf.getTrimmedStrings(\n         YarnConfiguration.NM_DOCKER_DEFAULT_TMPFS_MOUNTS)));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(Configuration conf, Context nmContext)\n      throws ContainerExecutionException {\n    super.initialize(conf, nmContext);\n    this.nmContext \u003d nmContext;\n    this.conf \u003d conf;\n\n    dockerClient \u003d new DockerClient();\n    allowedNetworks.clear();\n    allowedRuntimes.clear();\n    defaultROMounts.clear();\n    defaultRWMounts.clear();\n    defaultTmpfsMounts.clear();\n    defaultImageName \u003d conf.getTrimmed(\n        YarnConfiguration.NM_DOCKER_IMAGE_NAME, \"\");\n    defaultImageUpdate \u003d conf.getBoolean(\n        YarnConfiguration.NM_DOCKER_IMAGE_UPDATE, false);\n    allowedNetworks.addAll(Arrays.asList(\n        conf.getTrimmedStrings(\n            YarnConfiguration.NM_DOCKER_ALLOWED_CONTAINER_NETWORKS,\n            YarnConfiguration.DEFAULT_NM_DOCKER_ALLOWED_CONTAINER_NETWORKS)));\n    defaultNetwork \u003d conf.getTrimmed(\n        YarnConfiguration.NM_DOCKER_DEFAULT_CONTAINER_NETWORK,\n        YarnConfiguration.DEFAULT_NM_DOCKER_DEFAULT_CONTAINER_NETWORK);\n    allowedRuntimes.addAll(Arrays.asList(\n        conf.getTrimmedStrings(\n            YarnConfiguration.NM_DOCKER_ALLOWED_CONTAINER_RUNTIMES,\n            YarnConfiguration.DEFAULT_NM_DOCKER_ALLOWED_CONTAINER_RUNTIMES)));\n\n    if(!allowedNetworks.contains(defaultNetwork)) {\n      String message \u003d \"Default network: \" + defaultNetwork\n          + \" is not in the set of allowed networks: \" + allowedNetworks;\n\n      if (LOG.isWarnEnabled()) {\n        LOG.warn(message + \". Please check configuration\");\n      }\n\n      throw new ContainerExecutionException(message);\n    }\n\n    // initialize csi adaptors if necessary\n    initiateCsiClients(conf);\n\n    privilegedContainersAcl \u003d new AccessControlList(conf.getTrimmed(\n        YarnConfiguration.NM_DOCKER_PRIVILEGED_CONTAINERS_ACL,\n        YarnConfiguration.DEFAULT_NM_DOCKER_PRIVILEGED_CONTAINERS_ACL));\n\n    enableUserReMapping \u003d conf.getBoolean(\n      YarnConfiguration.NM_DOCKER_ENABLE_USER_REMAPPING,\n      YarnConfiguration.DEFAULT_NM_DOCKER_ENABLE_USER_REMAPPING);\n\n    userRemappingUidThreshold \u003d conf.getInt(\n      YarnConfiguration.NM_DOCKER_USER_REMAPPING_UID_THRESHOLD,\n      YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_UID_THRESHOLD);\n\n    userRemappingGidThreshold \u003d conf.getInt(\n      YarnConfiguration.NM_DOCKER_USER_REMAPPING_GID_THRESHOLD,\n      YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_GID_THRESHOLD);\n\n    capabilities \u003d getDockerCapabilitiesFromConf();\n\n    delayedRemovalAllowed \u003d conf.getBoolean(\n        YarnConfiguration.NM_DOCKER_ALLOW_DELAYED_REMOVAL,\n        YarnConfiguration.DEFAULT_NM_DOCKER_ALLOW_DELAYED_REMOVAL);\n\n    defaultROMounts.addAll(Arrays.asList(\n        conf.getTrimmedStrings(\n        YarnConfiguration.NM_DOCKER_DEFAULT_RO_MOUNTS)));\n\n    defaultRWMounts.addAll(Arrays.asList(\n        conf.getTrimmedStrings(\n        YarnConfiguration.NM_DOCKER_DEFAULT_RW_MOUNTS)));\n\n    defaultTmpfsMounts.addAll(Arrays.asList(\n        conf.getTrimmedStrings(\n        YarnConfiguration.NM_DOCKER_DEFAULT_TMPFS_MOUNTS)));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "254efc93588beff6b93fd887ddd43a8e14ea4903": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9379. Can\u0027t specify docker runtime through environment. Contributed by caozhiqiang\n",
      "commitDate": "15/04/19 11:24 AM",
      "commitName": "254efc93588beff6b93fd887ddd43a8e14ea4903",
      "commitAuthor": "Eric Badger",
      "commitDateOld": "15/03/19 4:20 PM",
      "commitNameOld": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 30.79,
      "commitsBetweenForRepo": 212,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,69 +1,74 @@\n   public void initialize(Configuration conf, Context nmContext)\n       throws ContainerExecutionException {\n     this.nmContext \u003d nmContext;\n     this.conf \u003d conf;\n     dockerClient \u003d new DockerClient();\n     allowedNetworks.clear();\n+    allowedRuntimes.clear();\n     defaultROMounts.clear();\n     defaultRWMounts.clear();\n     defaultTmpfsMounts.clear();\n     defaultImageName \u003d conf.getTrimmed(\n         YarnConfiguration.NM_DOCKER_IMAGE_NAME, \"\");\n     defaultImageUpdate \u003d conf.getBoolean(\n         YarnConfiguration.NM_DOCKER_IMAGE_UPDATE, false);\n     allowedNetworks.addAll(Arrays.asList(\n         conf.getTrimmedStrings(\n             YarnConfiguration.NM_DOCKER_ALLOWED_CONTAINER_NETWORKS,\n             YarnConfiguration.DEFAULT_NM_DOCKER_ALLOWED_CONTAINER_NETWORKS)));\n     defaultNetwork \u003d conf.getTrimmed(\n         YarnConfiguration.NM_DOCKER_DEFAULT_CONTAINER_NETWORK,\n         YarnConfiguration.DEFAULT_NM_DOCKER_DEFAULT_CONTAINER_NETWORK);\n+    allowedRuntimes.addAll(Arrays.asList(\n+        conf.getTrimmedStrings(\n+            YarnConfiguration.NM_DOCKER_ALLOWED_CONTAINER_RUNTIMES,\n+            YarnConfiguration.DEFAULT_NM_DOCKER_ALLOWED_CONTAINER_RUNTIMES)));\n \n     if(!allowedNetworks.contains(defaultNetwork)) {\n       String message \u003d \"Default network: \" + defaultNetwork\n           + \" is not in the set of allowed networks: \" + allowedNetworks;\n \n       if (LOG.isWarnEnabled()) {\n         LOG.warn(message + \". Please check configuration\");\n       }\n \n       throw new ContainerExecutionException(message);\n     }\n \n     // initialize csi adaptors if necessary\n     initiateCsiClients(conf);\n \n     privilegedContainersAcl \u003d new AccessControlList(conf.getTrimmed(\n         YarnConfiguration.NM_DOCKER_PRIVILEGED_CONTAINERS_ACL,\n         YarnConfiguration.DEFAULT_NM_DOCKER_PRIVILEGED_CONTAINERS_ACL));\n \n     enableUserReMapping \u003d conf.getBoolean(\n       YarnConfiguration.NM_DOCKER_ENABLE_USER_REMAPPING,\n       YarnConfiguration.DEFAULT_NM_DOCKER_ENABLE_USER_REMAPPING);\n \n     userRemappingUidThreshold \u003d conf.getInt(\n       YarnConfiguration.NM_DOCKER_USER_REMAPPING_UID_THRESHOLD,\n       YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_UID_THRESHOLD);\n \n     userRemappingGidThreshold \u003d conf.getInt(\n       YarnConfiguration.NM_DOCKER_USER_REMAPPING_GID_THRESHOLD,\n       YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_GID_THRESHOLD);\n \n     capabilities \u003d getDockerCapabilitiesFromConf();\n \n     delayedRemovalAllowed \u003d conf.getBoolean(\n         YarnConfiguration.NM_DOCKER_ALLOW_DELAYED_REMOVAL,\n         YarnConfiguration.DEFAULT_NM_DOCKER_ALLOW_DELAYED_REMOVAL);\n \n     defaultROMounts.addAll(Arrays.asList(\n         conf.getTrimmedStrings(\n         YarnConfiguration.NM_DOCKER_DEFAULT_RO_MOUNTS)));\n \n     defaultRWMounts.addAll(Arrays.asList(\n         conf.getTrimmedStrings(\n         YarnConfiguration.NM_DOCKER_DEFAULT_RW_MOUNTS)));\n \n     defaultTmpfsMounts.addAll(Arrays.asList(\n         conf.getTrimmedStrings(\n         YarnConfiguration.NM_DOCKER_DEFAULT_TMPFS_MOUNTS)));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(Configuration conf, Context nmContext)\n      throws ContainerExecutionException {\n    this.nmContext \u003d nmContext;\n    this.conf \u003d conf;\n    dockerClient \u003d new DockerClient();\n    allowedNetworks.clear();\n    allowedRuntimes.clear();\n    defaultROMounts.clear();\n    defaultRWMounts.clear();\n    defaultTmpfsMounts.clear();\n    defaultImageName \u003d conf.getTrimmed(\n        YarnConfiguration.NM_DOCKER_IMAGE_NAME, \"\");\n    defaultImageUpdate \u003d conf.getBoolean(\n        YarnConfiguration.NM_DOCKER_IMAGE_UPDATE, false);\n    allowedNetworks.addAll(Arrays.asList(\n        conf.getTrimmedStrings(\n            YarnConfiguration.NM_DOCKER_ALLOWED_CONTAINER_NETWORKS,\n            YarnConfiguration.DEFAULT_NM_DOCKER_ALLOWED_CONTAINER_NETWORKS)));\n    defaultNetwork \u003d conf.getTrimmed(\n        YarnConfiguration.NM_DOCKER_DEFAULT_CONTAINER_NETWORK,\n        YarnConfiguration.DEFAULT_NM_DOCKER_DEFAULT_CONTAINER_NETWORK);\n    allowedRuntimes.addAll(Arrays.asList(\n        conf.getTrimmedStrings(\n            YarnConfiguration.NM_DOCKER_ALLOWED_CONTAINER_RUNTIMES,\n            YarnConfiguration.DEFAULT_NM_DOCKER_ALLOWED_CONTAINER_RUNTIMES)));\n\n    if(!allowedNetworks.contains(defaultNetwork)) {\n      String message \u003d \"Default network: \" + defaultNetwork\n          + \" is not in the set of allowed networks: \" + allowedNetworks;\n\n      if (LOG.isWarnEnabled()) {\n        LOG.warn(message + \". Please check configuration\");\n      }\n\n      throw new ContainerExecutionException(message);\n    }\n\n    // initialize csi adaptors if necessary\n    initiateCsiClients(conf);\n\n    privilegedContainersAcl \u003d new AccessControlList(conf.getTrimmed(\n        YarnConfiguration.NM_DOCKER_PRIVILEGED_CONTAINERS_ACL,\n        YarnConfiguration.DEFAULT_NM_DOCKER_PRIVILEGED_CONTAINERS_ACL));\n\n    enableUserReMapping \u003d conf.getBoolean(\n      YarnConfiguration.NM_DOCKER_ENABLE_USER_REMAPPING,\n      YarnConfiguration.DEFAULT_NM_DOCKER_ENABLE_USER_REMAPPING);\n\n    userRemappingUidThreshold \u003d conf.getInt(\n      YarnConfiguration.NM_DOCKER_USER_REMAPPING_UID_THRESHOLD,\n      YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_UID_THRESHOLD);\n\n    userRemappingGidThreshold \u003d conf.getInt(\n      YarnConfiguration.NM_DOCKER_USER_REMAPPING_GID_THRESHOLD,\n      YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_GID_THRESHOLD);\n\n    capabilities \u003d getDockerCapabilitiesFromConf();\n\n    delayedRemovalAllowed \u003d conf.getBoolean(\n        YarnConfiguration.NM_DOCKER_ALLOW_DELAYED_REMOVAL,\n        YarnConfiguration.DEFAULT_NM_DOCKER_ALLOW_DELAYED_REMOVAL);\n\n    defaultROMounts.addAll(Arrays.asList(\n        conf.getTrimmedStrings(\n        YarnConfiguration.NM_DOCKER_DEFAULT_RO_MOUNTS)));\n\n    defaultRWMounts.addAll(Arrays.asList(\n        conf.getTrimmedStrings(\n        YarnConfiguration.NM_DOCKER_DEFAULT_RW_MOUNTS)));\n\n    defaultTmpfsMounts.addAll(Arrays.asList(\n        conf.getTrimmedStrings(\n        YarnConfiguration.NM_DOCKER_DEFAULT_TMPFS_MOUNTS)));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "3dc252326693170ac1b31bf2914bae72ca73d31a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9184. Add a system flag to allow update to latest docker images.\n           Contributed by Zhaohui Xin\n",
      "commitDate": "12/02/19 1:16 PM",
      "commitName": "3dc252326693170ac1b31bf2914bae72ca73d31a",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "03/01/19 10:40 PM",
      "commitNameOld": "f4906ac01960c78ff0c91797eaa4b36d80f6826d",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 39.61,
      "commitsBetweenForRepo": 281,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,67 +1,69 @@\n   public void initialize(Configuration conf, Context nmContext)\n       throws ContainerExecutionException {\n     this.nmContext \u003d nmContext;\n     this.conf \u003d conf;\n     dockerClient \u003d new DockerClient();\n     allowedNetworks.clear();\n     defaultROMounts.clear();\n     defaultRWMounts.clear();\n     defaultTmpfsMounts.clear();\n     defaultImageName \u003d conf.getTrimmed(\n         YarnConfiguration.NM_DOCKER_IMAGE_NAME, \"\");\n+    defaultImageUpdate \u003d conf.getBoolean(\n+        YarnConfiguration.NM_DOCKER_IMAGE_UPDATE, false);\n     allowedNetworks.addAll(Arrays.asList(\n         conf.getTrimmedStrings(\n             YarnConfiguration.NM_DOCKER_ALLOWED_CONTAINER_NETWORKS,\n             YarnConfiguration.DEFAULT_NM_DOCKER_ALLOWED_CONTAINER_NETWORKS)));\n     defaultNetwork \u003d conf.getTrimmed(\n         YarnConfiguration.NM_DOCKER_DEFAULT_CONTAINER_NETWORK,\n         YarnConfiguration.DEFAULT_NM_DOCKER_DEFAULT_CONTAINER_NETWORK);\n \n     if(!allowedNetworks.contains(defaultNetwork)) {\n       String message \u003d \"Default network: \" + defaultNetwork\n           + \" is not in the set of allowed networks: \" + allowedNetworks;\n \n       if (LOG.isWarnEnabled()) {\n         LOG.warn(message + \". Please check configuration\");\n       }\n \n       throw new ContainerExecutionException(message);\n     }\n \n     // initialize csi adaptors if necessary\n     initiateCsiClients(conf);\n \n     privilegedContainersAcl \u003d new AccessControlList(conf.getTrimmed(\n         YarnConfiguration.NM_DOCKER_PRIVILEGED_CONTAINERS_ACL,\n         YarnConfiguration.DEFAULT_NM_DOCKER_PRIVILEGED_CONTAINERS_ACL));\n \n     enableUserReMapping \u003d conf.getBoolean(\n       YarnConfiguration.NM_DOCKER_ENABLE_USER_REMAPPING,\n       YarnConfiguration.DEFAULT_NM_DOCKER_ENABLE_USER_REMAPPING);\n \n     userRemappingUidThreshold \u003d conf.getInt(\n       YarnConfiguration.NM_DOCKER_USER_REMAPPING_UID_THRESHOLD,\n       YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_UID_THRESHOLD);\n \n     userRemappingGidThreshold \u003d conf.getInt(\n       YarnConfiguration.NM_DOCKER_USER_REMAPPING_GID_THRESHOLD,\n       YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_GID_THRESHOLD);\n \n     capabilities \u003d getDockerCapabilitiesFromConf();\n \n     delayedRemovalAllowed \u003d conf.getBoolean(\n         YarnConfiguration.NM_DOCKER_ALLOW_DELAYED_REMOVAL,\n         YarnConfiguration.DEFAULT_NM_DOCKER_ALLOW_DELAYED_REMOVAL);\n \n     defaultROMounts.addAll(Arrays.asList(\n         conf.getTrimmedStrings(\n         YarnConfiguration.NM_DOCKER_DEFAULT_RO_MOUNTS)));\n \n     defaultRWMounts.addAll(Arrays.asList(\n         conf.getTrimmedStrings(\n         YarnConfiguration.NM_DOCKER_DEFAULT_RW_MOUNTS)));\n \n     defaultTmpfsMounts.addAll(Arrays.asList(\n         conf.getTrimmedStrings(\n         YarnConfiguration.NM_DOCKER_DEFAULT_TMPFS_MOUNTS)));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(Configuration conf, Context nmContext)\n      throws ContainerExecutionException {\n    this.nmContext \u003d nmContext;\n    this.conf \u003d conf;\n    dockerClient \u003d new DockerClient();\n    allowedNetworks.clear();\n    defaultROMounts.clear();\n    defaultRWMounts.clear();\n    defaultTmpfsMounts.clear();\n    defaultImageName \u003d conf.getTrimmed(\n        YarnConfiguration.NM_DOCKER_IMAGE_NAME, \"\");\n    defaultImageUpdate \u003d conf.getBoolean(\n        YarnConfiguration.NM_DOCKER_IMAGE_UPDATE, false);\n    allowedNetworks.addAll(Arrays.asList(\n        conf.getTrimmedStrings(\n            YarnConfiguration.NM_DOCKER_ALLOWED_CONTAINER_NETWORKS,\n            YarnConfiguration.DEFAULT_NM_DOCKER_ALLOWED_CONTAINER_NETWORKS)));\n    defaultNetwork \u003d conf.getTrimmed(\n        YarnConfiguration.NM_DOCKER_DEFAULT_CONTAINER_NETWORK,\n        YarnConfiguration.DEFAULT_NM_DOCKER_DEFAULT_CONTAINER_NETWORK);\n\n    if(!allowedNetworks.contains(defaultNetwork)) {\n      String message \u003d \"Default network: \" + defaultNetwork\n          + \" is not in the set of allowed networks: \" + allowedNetworks;\n\n      if (LOG.isWarnEnabled()) {\n        LOG.warn(message + \". Please check configuration\");\n      }\n\n      throw new ContainerExecutionException(message);\n    }\n\n    // initialize csi adaptors if necessary\n    initiateCsiClients(conf);\n\n    privilegedContainersAcl \u003d new AccessControlList(conf.getTrimmed(\n        YarnConfiguration.NM_DOCKER_PRIVILEGED_CONTAINERS_ACL,\n        YarnConfiguration.DEFAULT_NM_DOCKER_PRIVILEGED_CONTAINERS_ACL));\n\n    enableUserReMapping \u003d conf.getBoolean(\n      YarnConfiguration.NM_DOCKER_ENABLE_USER_REMAPPING,\n      YarnConfiguration.DEFAULT_NM_DOCKER_ENABLE_USER_REMAPPING);\n\n    userRemappingUidThreshold \u003d conf.getInt(\n      YarnConfiguration.NM_DOCKER_USER_REMAPPING_UID_THRESHOLD,\n      YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_UID_THRESHOLD);\n\n    userRemappingGidThreshold \u003d conf.getInt(\n      YarnConfiguration.NM_DOCKER_USER_REMAPPING_GID_THRESHOLD,\n      YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_GID_THRESHOLD);\n\n    capabilities \u003d getDockerCapabilitiesFromConf();\n\n    delayedRemovalAllowed \u003d conf.getBoolean(\n        YarnConfiguration.NM_DOCKER_ALLOW_DELAYED_REMOVAL,\n        YarnConfiguration.DEFAULT_NM_DOCKER_ALLOW_DELAYED_REMOVAL);\n\n    defaultROMounts.addAll(Arrays.asList(\n        conf.getTrimmedStrings(\n        YarnConfiguration.NM_DOCKER_DEFAULT_RO_MOUNTS)));\n\n    defaultRWMounts.addAll(Arrays.asList(\n        conf.getTrimmedStrings(\n        YarnConfiguration.NM_DOCKER_DEFAULT_RW_MOUNTS)));\n\n    defaultTmpfsMounts.addAll(Arrays.asList(\n        conf.getTrimmedStrings(\n        YarnConfiguration.NM_DOCKER_DEFAULT_TMPFS_MOUNTS)));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "f4906ac01960c78ff0c91797eaa4b36d80f6826d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9038. [CSI] Add ability to publish/unpublish volumes on node managers. Contributed by Weiwei Yang.\n",
      "commitDate": "03/01/19 10:40 PM",
      "commitName": "f4906ac01960c78ff0c91797eaa4b36d80f6826d",
      "commitAuthor": "Sunil G",
      "commitDateOld": "21/12/18 4:44 PM",
      "commitNameOld": "f82922dcfae0b7e3e68ce970c441d8b7edc59acf",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 13.25,
      "commitsBetweenForRepo": 74,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,67 @@\n   public void initialize(Configuration conf, Context nmContext)\n       throws ContainerExecutionException {\n     this.nmContext \u003d nmContext;\n     this.conf \u003d conf;\n     dockerClient \u003d new DockerClient();\n     allowedNetworks.clear();\n     defaultROMounts.clear();\n     defaultRWMounts.clear();\n     defaultTmpfsMounts.clear();\n     defaultImageName \u003d conf.getTrimmed(\n         YarnConfiguration.NM_DOCKER_IMAGE_NAME, \"\");\n     allowedNetworks.addAll(Arrays.asList(\n         conf.getTrimmedStrings(\n             YarnConfiguration.NM_DOCKER_ALLOWED_CONTAINER_NETWORKS,\n             YarnConfiguration.DEFAULT_NM_DOCKER_ALLOWED_CONTAINER_NETWORKS)));\n     defaultNetwork \u003d conf.getTrimmed(\n         YarnConfiguration.NM_DOCKER_DEFAULT_CONTAINER_NETWORK,\n         YarnConfiguration.DEFAULT_NM_DOCKER_DEFAULT_CONTAINER_NETWORK);\n \n     if(!allowedNetworks.contains(defaultNetwork)) {\n       String message \u003d \"Default network: \" + defaultNetwork\n           + \" is not in the set of allowed networks: \" + allowedNetworks;\n \n       if (LOG.isWarnEnabled()) {\n         LOG.warn(message + \". Please check configuration\");\n       }\n \n       throw new ContainerExecutionException(message);\n     }\n \n+    // initialize csi adaptors if necessary\n+    initiateCsiClients(conf);\n+\n     privilegedContainersAcl \u003d new AccessControlList(conf.getTrimmed(\n         YarnConfiguration.NM_DOCKER_PRIVILEGED_CONTAINERS_ACL,\n         YarnConfiguration.DEFAULT_NM_DOCKER_PRIVILEGED_CONTAINERS_ACL));\n \n     enableUserReMapping \u003d conf.getBoolean(\n       YarnConfiguration.NM_DOCKER_ENABLE_USER_REMAPPING,\n       YarnConfiguration.DEFAULT_NM_DOCKER_ENABLE_USER_REMAPPING);\n \n     userRemappingUidThreshold \u003d conf.getInt(\n       YarnConfiguration.NM_DOCKER_USER_REMAPPING_UID_THRESHOLD,\n       YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_UID_THRESHOLD);\n \n     userRemappingGidThreshold \u003d conf.getInt(\n       YarnConfiguration.NM_DOCKER_USER_REMAPPING_GID_THRESHOLD,\n       YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_GID_THRESHOLD);\n \n     capabilities \u003d getDockerCapabilitiesFromConf();\n \n     delayedRemovalAllowed \u003d conf.getBoolean(\n         YarnConfiguration.NM_DOCKER_ALLOW_DELAYED_REMOVAL,\n         YarnConfiguration.DEFAULT_NM_DOCKER_ALLOW_DELAYED_REMOVAL);\n \n     defaultROMounts.addAll(Arrays.asList(\n         conf.getTrimmedStrings(\n         YarnConfiguration.NM_DOCKER_DEFAULT_RO_MOUNTS)));\n \n     defaultRWMounts.addAll(Arrays.asList(\n         conf.getTrimmedStrings(\n         YarnConfiguration.NM_DOCKER_DEFAULT_RW_MOUNTS)));\n \n     defaultTmpfsMounts.addAll(Arrays.asList(\n         conf.getTrimmedStrings(\n         YarnConfiguration.NM_DOCKER_DEFAULT_TMPFS_MOUNTS)));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(Configuration conf, Context nmContext)\n      throws ContainerExecutionException {\n    this.nmContext \u003d nmContext;\n    this.conf \u003d conf;\n    dockerClient \u003d new DockerClient();\n    allowedNetworks.clear();\n    defaultROMounts.clear();\n    defaultRWMounts.clear();\n    defaultTmpfsMounts.clear();\n    defaultImageName \u003d conf.getTrimmed(\n        YarnConfiguration.NM_DOCKER_IMAGE_NAME, \"\");\n    allowedNetworks.addAll(Arrays.asList(\n        conf.getTrimmedStrings(\n            YarnConfiguration.NM_DOCKER_ALLOWED_CONTAINER_NETWORKS,\n            YarnConfiguration.DEFAULT_NM_DOCKER_ALLOWED_CONTAINER_NETWORKS)));\n    defaultNetwork \u003d conf.getTrimmed(\n        YarnConfiguration.NM_DOCKER_DEFAULT_CONTAINER_NETWORK,\n        YarnConfiguration.DEFAULT_NM_DOCKER_DEFAULT_CONTAINER_NETWORK);\n\n    if(!allowedNetworks.contains(defaultNetwork)) {\n      String message \u003d \"Default network: \" + defaultNetwork\n          + \" is not in the set of allowed networks: \" + allowedNetworks;\n\n      if (LOG.isWarnEnabled()) {\n        LOG.warn(message + \". Please check configuration\");\n      }\n\n      throw new ContainerExecutionException(message);\n    }\n\n    // initialize csi adaptors if necessary\n    initiateCsiClients(conf);\n\n    privilegedContainersAcl \u003d new AccessControlList(conf.getTrimmed(\n        YarnConfiguration.NM_DOCKER_PRIVILEGED_CONTAINERS_ACL,\n        YarnConfiguration.DEFAULT_NM_DOCKER_PRIVILEGED_CONTAINERS_ACL));\n\n    enableUserReMapping \u003d conf.getBoolean(\n      YarnConfiguration.NM_DOCKER_ENABLE_USER_REMAPPING,\n      YarnConfiguration.DEFAULT_NM_DOCKER_ENABLE_USER_REMAPPING);\n\n    userRemappingUidThreshold \u003d conf.getInt(\n      YarnConfiguration.NM_DOCKER_USER_REMAPPING_UID_THRESHOLD,\n      YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_UID_THRESHOLD);\n\n    userRemappingGidThreshold \u003d conf.getInt(\n      YarnConfiguration.NM_DOCKER_USER_REMAPPING_GID_THRESHOLD,\n      YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_GID_THRESHOLD);\n\n    capabilities \u003d getDockerCapabilitiesFromConf();\n\n    delayedRemovalAllowed \u003d conf.getBoolean(\n        YarnConfiguration.NM_DOCKER_ALLOW_DELAYED_REMOVAL,\n        YarnConfiguration.DEFAULT_NM_DOCKER_ALLOW_DELAYED_REMOVAL);\n\n    defaultROMounts.addAll(Arrays.asList(\n        conf.getTrimmedStrings(\n        YarnConfiguration.NM_DOCKER_DEFAULT_RO_MOUNTS)));\n\n    defaultRWMounts.addAll(Arrays.asList(\n        conf.getTrimmedStrings(\n        YarnConfiguration.NM_DOCKER_DEFAULT_RW_MOUNTS)));\n\n    defaultTmpfsMounts.addAll(Arrays.asList(\n        conf.getTrimmedStrings(\n        YarnConfiguration.NM_DOCKER_DEFAULT_TMPFS_MOUNTS)));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "b237a0dd44ab285941983648d7ef26b99b30d624": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6456.  Added config to set default container runtimes.\n            Contributed by Craig Condit\n",
      "commitDate": "27/09/18 12:31 PM",
      "commitName": "b237a0dd44ab285941983648d7ef26b99b30d624",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "19/09/18 10:16 AM",
      "commitNameOld": "efdea85ad1cd4cc5a2a306898dbdb2c14b952d02",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 8.09,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,64 @@\n   public void initialize(Configuration conf, Context nmContext)\n       throws ContainerExecutionException {\n     this.nmContext \u003d nmContext;\n     this.conf \u003d conf;\n     dockerClient \u003d new DockerClient();\n     allowedNetworks.clear();\n     defaultROMounts.clear();\n     defaultRWMounts.clear();\n     defaultTmpfsMounts.clear();\n+    defaultImageName \u003d conf.getTrimmed(\n+        YarnConfiguration.NM_DOCKER_IMAGE_NAME, \"\");\n     allowedNetworks.addAll(Arrays.asList(\n         conf.getTrimmedStrings(\n             YarnConfiguration.NM_DOCKER_ALLOWED_CONTAINER_NETWORKS,\n             YarnConfiguration.DEFAULT_NM_DOCKER_ALLOWED_CONTAINER_NETWORKS)));\n     defaultNetwork \u003d conf.getTrimmed(\n         YarnConfiguration.NM_DOCKER_DEFAULT_CONTAINER_NETWORK,\n         YarnConfiguration.DEFAULT_NM_DOCKER_DEFAULT_CONTAINER_NETWORK);\n \n     if(!allowedNetworks.contains(defaultNetwork)) {\n       String message \u003d \"Default network: \" + defaultNetwork\n           + \" is not in the set of allowed networks: \" + allowedNetworks;\n \n       if (LOG.isWarnEnabled()) {\n-        LOG.warn(message + \". Please check \"\n-            + \"configuration\");\n+        LOG.warn(message + \". Please check configuration\");\n       }\n \n       throw new ContainerExecutionException(message);\n     }\n \n     privilegedContainersAcl \u003d new AccessControlList(conf.getTrimmed(\n         YarnConfiguration.NM_DOCKER_PRIVILEGED_CONTAINERS_ACL,\n         YarnConfiguration.DEFAULT_NM_DOCKER_PRIVILEGED_CONTAINERS_ACL));\n \n     enableUserReMapping \u003d conf.getBoolean(\n       YarnConfiguration.NM_DOCKER_ENABLE_USER_REMAPPING,\n       YarnConfiguration.DEFAULT_NM_DOCKER_ENABLE_USER_REMAPPING);\n \n     userRemappingUidThreshold \u003d conf.getInt(\n       YarnConfiguration.NM_DOCKER_USER_REMAPPING_UID_THRESHOLD,\n       YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_UID_THRESHOLD);\n \n     userRemappingGidThreshold \u003d conf.getInt(\n       YarnConfiguration.NM_DOCKER_USER_REMAPPING_GID_THRESHOLD,\n       YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_GID_THRESHOLD);\n \n     capabilities \u003d getDockerCapabilitiesFromConf();\n \n     delayedRemovalAllowed \u003d conf.getBoolean(\n         YarnConfiguration.NM_DOCKER_ALLOW_DELAYED_REMOVAL,\n         YarnConfiguration.DEFAULT_NM_DOCKER_ALLOW_DELAYED_REMOVAL);\n \n     defaultROMounts.addAll(Arrays.asList(\n         conf.getTrimmedStrings(\n         YarnConfiguration.NM_DOCKER_DEFAULT_RO_MOUNTS)));\n \n     defaultRWMounts.addAll(Arrays.asList(\n         conf.getTrimmedStrings(\n         YarnConfiguration.NM_DOCKER_DEFAULT_RW_MOUNTS)));\n \n     defaultTmpfsMounts.addAll(Arrays.asList(\n         conf.getTrimmedStrings(\n         YarnConfiguration.NM_DOCKER_DEFAULT_TMPFS_MOUNTS)));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(Configuration conf, Context nmContext)\n      throws ContainerExecutionException {\n    this.nmContext \u003d nmContext;\n    this.conf \u003d conf;\n    dockerClient \u003d new DockerClient();\n    allowedNetworks.clear();\n    defaultROMounts.clear();\n    defaultRWMounts.clear();\n    defaultTmpfsMounts.clear();\n    defaultImageName \u003d conf.getTrimmed(\n        YarnConfiguration.NM_DOCKER_IMAGE_NAME, \"\");\n    allowedNetworks.addAll(Arrays.asList(\n        conf.getTrimmedStrings(\n            YarnConfiguration.NM_DOCKER_ALLOWED_CONTAINER_NETWORKS,\n            YarnConfiguration.DEFAULT_NM_DOCKER_ALLOWED_CONTAINER_NETWORKS)));\n    defaultNetwork \u003d conf.getTrimmed(\n        YarnConfiguration.NM_DOCKER_DEFAULT_CONTAINER_NETWORK,\n        YarnConfiguration.DEFAULT_NM_DOCKER_DEFAULT_CONTAINER_NETWORK);\n\n    if(!allowedNetworks.contains(defaultNetwork)) {\n      String message \u003d \"Default network: \" + defaultNetwork\n          + \" is not in the set of allowed networks: \" + allowedNetworks;\n\n      if (LOG.isWarnEnabled()) {\n        LOG.warn(message + \". Please check configuration\");\n      }\n\n      throw new ContainerExecutionException(message);\n    }\n\n    privilegedContainersAcl \u003d new AccessControlList(conf.getTrimmed(\n        YarnConfiguration.NM_DOCKER_PRIVILEGED_CONTAINERS_ACL,\n        YarnConfiguration.DEFAULT_NM_DOCKER_PRIVILEGED_CONTAINERS_ACL));\n\n    enableUserReMapping \u003d conf.getBoolean(\n      YarnConfiguration.NM_DOCKER_ENABLE_USER_REMAPPING,\n      YarnConfiguration.DEFAULT_NM_DOCKER_ENABLE_USER_REMAPPING);\n\n    userRemappingUidThreshold \u003d conf.getInt(\n      YarnConfiguration.NM_DOCKER_USER_REMAPPING_UID_THRESHOLD,\n      YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_UID_THRESHOLD);\n\n    userRemappingGidThreshold \u003d conf.getInt(\n      YarnConfiguration.NM_DOCKER_USER_REMAPPING_GID_THRESHOLD,\n      YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_GID_THRESHOLD);\n\n    capabilities \u003d getDockerCapabilitiesFromConf();\n\n    delayedRemovalAllowed \u003d conf.getBoolean(\n        YarnConfiguration.NM_DOCKER_ALLOW_DELAYED_REMOVAL,\n        YarnConfiguration.DEFAULT_NM_DOCKER_ALLOW_DELAYED_REMOVAL);\n\n    defaultROMounts.addAll(Arrays.asList(\n        conf.getTrimmedStrings(\n        YarnConfiguration.NM_DOCKER_DEFAULT_RO_MOUNTS)));\n\n    defaultRWMounts.addAll(Arrays.asList(\n        conf.getTrimmedStrings(\n        YarnConfiguration.NM_DOCKER_DEFAULT_RW_MOUNTS)));\n\n    defaultTmpfsMounts.addAll(Arrays.asList(\n        conf.getTrimmedStrings(\n        YarnConfiguration.NM_DOCKER_DEFAULT_TMPFS_MOUNTS)));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "bf8a1750e99cfbfa76021ce51b6514c74c06f498": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8706. Updated docker container stop logic to avoid double kill.\n           Contributed by Chandni Singh\n",
      "commitDate": "07/09/18 5:18 PM",
      "commitName": "bf8a1750e99cfbfa76021ce51b6514c74c06f498",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "05/09/18 5:47 AM",
      "commitNameOld": "dffb7bfe6cd2292162f08ec0bded736bc5194c3f",
      "commitAuthorOld": "Shane Kumpf",
      "daysBetweenCommits": 2.48,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,67 +1,63 @@\n   public void initialize(Configuration conf, Context nmContext)\n       throws ContainerExecutionException {\n     this.nmContext \u003d nmContext;\n     this.conf \u003d conf;\n     dockerClient \u003d new DockerClient();\n     allowedNetworks.clear();\n     defaultROMounts.clear();\n     defaultRWMounts.clear();\n     defaultTmpfsMounts.clear();\n     allowedNetworks.addAll(Arrays.asList(\n         conf.getTrimmedStrings(\n             YarnConfiguration.NM_DOCKER_ALLOWED_CONTAINER_NETWORKS,\n             YarnConfiguration.DEFAULT_NM_DOCKER_ALLOWED_CONTAINER_NETWORKS)));\n     defaultNetwork \u003d conf.getTrimmed(\n         YarnConfiguration.NM_DOCKER_DEFAULT_CONTAINER_NETWORK,\n         YarnConfiguration.DEFAULT_NM_DOCKER_DEFAULT_CONTAINER_NETWORK);\n \n     if(!allowedNetworks.contains(defaultNetwork)) {\n       String message \u003d \"Default network: \" + defaultNetwork\n           + \" is not in the set of allowed networks: \" + allowedNetworks;\n \n       if (LOG.isWarnEnabled()) {\n         LOG.warn(message + \". Please check \"\n             + \"configuration\");\n       }\n \n       throw new ContainerExecutionException(message);\n     }\n \n     privilegedContainersAcl \u003d new AccessControlList(conf.getTrimmed(\n         YarnConfiguration.NM_DOCKER_PRIVILEGED_CONTAINERS_ACL,\n         YarnConfiguration.DEFAULT_NM_DOCKER_PRIVILEGED_CONTAINERS_ACL));\n \n     enableUserReMapping \u003d conf.getBoolean(\n       YarnConfiguration.NM_DOCKER_ENABLE_USER_REMAPPING,\n       YarnConfiguration.DEFAULT_NM_DOCKER_ENABLE_USER_REMAPPING);\n \n     userRemappingUidThreshold \u003d conf.getInt(\n       YarnConfiguration.NM_DOCKER_USER_REMAPPING_UID_THRESHOLD,\n       YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_UID_THRESHOLD);\n \n     userRemappingGidThreshold \u003d conf.getInt(\n       YarnConfiguration.NM_DOCKER_USER_REMAPPING_GID_THRESHOLD,\n       YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_GID_THRESHOLD);\n \n     capabilities \u003d getDockerCapabilitiesFromConf();\n \n     delayedRemovalAllowed \u003d conf.getBoolean(\n         YarnConfiguration.NM_DOCKER_ALLOW_DELAYED_REMOVAL,\n         YarnConfiguration.DEFAULT_NM_DOCKER_ALLOW_DELAYED_REMOVAL);\n \n-    dockerStopGracePeriod \u003d conf.getInt(\n-        YarnConfiguration.NM_DOCKER_STOP_GRACE_PERIOD,\n-        YarnConfiguration.DEFAULT_NM_DOCKER_STOP_GRACE_PERIOD);\n-\n     defaultROMounts.addAll(Arrays.asList(\n         conf.getTrimmedStrings(\n         YarnConfiguration.NM_DOCKER_DEFAULT_RO_MOUNTS)));\n \n     defaultRWMounts.addAll(Arrays.asList(\n         conf.getTrimmedStrings(\n         YarnConfiguration.NM_DOCKER_DEFAULT_RW_MOUNTS)));\n \n     defaultTmpfsMounts.addAll(Arrays.asList(\n         conf.getTrimmedStrings(\n         YarnConfiguration.NM_DOCKER_DEFAULT_TMPFS_MOUNTS)));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(Configuration conf, Context nmContext)\n      throws ContainerExecutionException {\n    this.nmContext \u003d nmContext;\n    this.conf \u003d conf;\n    dockerClient \u003d new DockerClient();\n    allowedNetworks.clear();\n    defaultROMounts.clear();\n    defaultRWMounts.clear();\n    defaultTmpfsMounts.clear();\n    allowedNetworks.addAll(Arrays.asList(\n        conf.getTrimmedStrings(\n            YarnConfiguration.NM_DOCKER_ALLOWED_CONTAINER_NETWORKS,\n            YarnConfiguration.DEFAULT_NM_DOCKER_ALLOWED_CONTAINER_NETWORKS)));\n    defaultNetwork \u003d conf.getTrimmed(\n        YarnConfiguration.NM_DOCKER_DEFAULT_CONTAINER_NETWORK,\n        YarnConfiguration.DEFAULT_NM_DOCKER_DEFAULT_CONTAINER_NETWORK);\n\n    if(!allowedNetworks.contains(defaultNetwork)) {\n      String message \u003d \"Default network: \" + defaultNetwork\n          + \" is not in the set of allowed networks: \" + allowedNetworks;\n\n      if (LOG.isWarnEnabled()) {\n        LOG.warn(message + \". Please check \"\n            + \"configuration\");\n      }\n\n      throw new ContainerExecutionException(message);\n    }\n\n    privilegedContainersAcl \u003d new AccessControlList(conf.getTrimmed(\n        YarnConfiguration.NM_DOCKER_PRIVILEGED_CONTAINERS_ACL,\n        YarnConfiguration.DEFAULT_NM_DOCKER_PRIVILEGED_CONTAINERS_ACL));\n\n    enableUserReMapping \u003d conf.getBoolean(\n      YarnConfiguration.NM_DOCKER_ENABLE_USER_REMAPPING,\n      YarnConfiguration.DEFAULT_NM_DOCKER_ENABLE_USER_REMAPPING);\n\n    userRemappingUidThreshold \u003d conf.getInt(\n      YarnConfiguration.NM_DOCKER_USER_REMAPPING_UID_THRESHOLD,\n      YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_UID_THRESHOLD);\n\n    userRemappingGidThreshold \u003d conf.getInt(\n      YarnConfiguration.NM_DOCKER_USER_REMAPPING_GID_THRESHOLD,\n      YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_GID_THRESHOLD);\n\n    capabilities \u003d getDockerCapabilitiesFromConf();\n\n    delayedRemovalAllowed \u003d conf.getBoolean(\n        YarnConfiguration.NM_DOCKER_ALLOW_DELAYED_REMOVAL,\n        YarnConfiguration.DEFAULT_NM_DOCKER_ALLOW_DELAYED_REMOVAL);\n\n    defaultROMounts.addAll(Arrays.asList(\n        conf.getTrimmedStrings(\n        YarnConfiguration.NM_DOCKER_DEFAULT_RO_MOUNTS)));\n\n    defaultRWMounts.addAll(Arrays.asList(\n        conf.getTrimmedStrings(\n        YarnConfiguration.NM_DOCKER_DEFAULT_RW_MOUNTS)));\n\n    defaultTmpfsMounts.addAll(Arrays.asList(\n        conf.getTrimmedStrings(\n        YarnConfiguration.NM_DOCKER_DEFAULT_TMPFS_MOUNTS)));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "73625168c0f29aa646d7a715c9fb15e43d6c7e05": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8642. Add support for tmpfs mounts with the Docker runtime. Contributed by Craig Condit\n",
      "commitDate": "29/08/18 6:08 AM",
      "commitName": "73625168c0f29aa646d7a715c9fb15e43d6c7e05",
      "commitAuthor": "Shane Kumpf",
      "commitDateOld": "27/08/18 11:34 AM",
      "commitNameOld": "05b2bbeb357d4fa03e71f2bfd5d8eeb0ea6c3f60",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 1.77,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,67 @@\n   public void initialize(Configuration conf, Context nmContext)\n       throws ContainerExecutionException {\n     this.nmContext \u003d nmContext;\n     this.conf \u003d conf;\n     dockerClient \u003d new DockerClient();\n     allowedNetworks.clear();\n     defaultROMounts.clear();\n     defaultRWMounts.clear();\n+    defaultTmpfsMounts.clear();\n     allowedNetworks.addAll(Arrays.asList(\n         conf.getTrimmedStrings(\n             YarnConfiguration.NM_DOCKER_ALLOWED_CONTAINER_NETWORKS,\n             YarnConfiguration.DEFAULT_NM_DOCKER_ALLOWED_CONTAINER_NETWORKS)));\n     defaultNetwork \u003d conf.getTrimmed(\n         YarnConfiguration.NM_DOCKER_DEFAULT_CONTAINER_NETWORK,\n         YarnConfiguration.DEFAULT_NM_DOCKER_DEFAULT_CONTAINER_NETWORK);\n \n     if(!allowedNetworks.contains(defaultNetwork)) {\n       String message \u003d \"Default network: \" + defaultNetwork\n           + \" is not in the set of allowed networks: \" + allowedNetworks;\n \n       if (LOG.isWarnEnabled()) {\n         LOG.warn(message + \". Please check \"\n             + \"configuration\");\n       }\n \n       throw new ContainerExecutionException(message);\n     }\n \n     privilegedContainersAcl \u003d new AccessControlList(conf.getTrimmed(\n         YarnConfiguration.NM_DOCKER_PRIVILEGED_CONTAINERS_ACL,\n         YarnConfiguration.DEFAULT_NM_DOCKER_PRIVILEGED_CONTAINERS_ACL));\n \n     enableUserReMapping \u003d conf.getBoolean(\n       YarnConfiguration.NM_DOCKER_ENABLE_USER_REMAPPING,\n       YarnConfiguration.DEFAULT_NM_DOCKER_ENABLE_USER_REMAPPING);\n \n     userRemappingUidThreshold \u003d conf.getInt(\n       YarnConfiguration.NM_DOCKER_USER_REMAPPING_UID_THRESHOLD,\n       YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_UID_THRESHOLD);\n \n     userRemappingGidThreshold \u003d conf.getInt(\n       YarnConfiguration.NM_DOCKER_USER_REMAPPING_GID_THRESHOLD,\n       YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_GID_THRESHOLD);\n \n     capabilities \u003d getDockerCapabilitiesFromConf();\n \n     delayedRemovalAllowed \u003d conf.getBoolean(\n         YarnConfiguration.NM_DOCKER_ALLOW_DELAYED_REMOVAL,\n         YarnConfiguration.DEFAULT_NM_DOCKER_ALLOW_DELAYED_REMOVAL);\n \n     dockerStopGracePeriod \u003d conf.getInt(\n         YarnConfiguration.NM_DOCKER_STOP_GRACE_PERIOD,\n         YarnConfiguration.DEFAULT_NM_DOCKER_STOP_GRACE_PERIOD);\n \n     defaultROMounts.addAll(Arrays.asList(\n         conf.getTrimmedStrings(\n         YarnConfiguration.NM_DOCKER_DEFAULT_RO_MOUNTS)));\n \n     defaultRWMounts.addAll(Arrays.asList(\n         conf.getTrimmedStrings(\n         YarnConfiguration.NM_DOCKER_DEFAULT_RW_MOUNTS)));\n+\n+    defaultTmpfsMounts.addAll(Arrays.asList(\n+        conf.getTrimmedStrings(\n+        YarnConfiguration.NM_DOCKER_DEFAULT_TMPFS_MOUNTS)));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(Configuration conf, Context nmContext)\n      throws ContainerExecutionException {\n    this.nmContext \u003d nmContext;\n    this.conf \u003d conf;\n    dockerClient \u003d new DockerClient();\n    allowedNetworks.clear();\n    defaultROMounts.clear();\n    defaultRWMounts.clear();\n    defaultTmpfsMounts.clear();\n    allowedNetworks.addAll(Arrays.asList(\n        conf.getTrimmedStrings(\n            YarnConfiguration.NM_DOCKER_ALLOWED_CONTAINER_NETWORKS,\n            YarnConfiguration.DEFAULT_NM_DOCKER_ALLOWED_CONTAINER_NETWORKS)));\n    defaultNetwork \u003d conf.getTrimmed(\n        YarnConfiguration.NM_DOCKER_DEFAULT_CONTAINER_NETWORK,\n        YarnConfiguration.DEFAULT_NM_DOCKER_DEFAULT_CONTAINER_NETWORK);\n\n    if(!allowedNetworks.contains(defaultNetwork)) {\n      String message \u003d \"Default network: \" + defaultNetwork\n          + \" is not in the set of allowed networks: \" + allowedNetworks;\n\n      if (LOG.isWarnEnabled()) {\n        LOG.warn(message + \". Please check \"\n            + \"configuration\");\n      }\n\n      throw new ContainerExecutionException(message);\n    }\n\n    privilegedContainersAcl \u003d new AccessControlList(conf.getTrimmed(\n        YarnConfiguration.NM_DOCKER_PRIVILEGED_CONTAINERS_ACL,\n        YarnConfiguration.DEFAULT_NM_DOCKER_PRIVILEGED_CONTAINERS_ACL));\n\n    enableUserReMapping \u003d conf.getBoolean(\n      YarnConfiguration.NM_DOCKER_ENABLE_USER_REMAPPING,\n      YarnConfiguration.DEFAULT_NM_DOCKER_ENABLE_USER_REMAPPING);\n\n    userRemappingUidThreshold \u003d conf.getInt(\n      YarnConfiguration.NM_DOCKER_USER_REMAPPING_UID_THRESHOLD,\n      YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_UID_THRESHOLD);\n\n    userRemappingGidThreshold \u003d conf.getInt(\n      YarnConfiguration.NM_DOCKER_USER_REMAPPING_GID_THRESHOLD,\n      YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_GID_THRESHOLD);\n\n    capabilities \u003d getDockerCapabilitiesFromConf();\n\n    delayedRemovalAllowed \u003d conf.getBoolean(\n        YarnConfiguration.NM_DOCKER_ALLOW_DELAYED_REMOVAL,\n        YarnConfiguration.DEFAULT_NM_DOCKER_ALLOW_DELAYED_REMOVAL);\n\n    dockerStopGracePeriod \u003d conf.getInt(\n        YarnConfiguration.NM_DOCKER_STOP_GRACE_PERIOD,\n        YarnConfiguration.DEFAULT_NM_DOCKER_STOP_GRACE_PERIOD);\n\n    defaultROMounts.addAll(Arrays.asList(\n        conf.getTrimmedStrings(\n        YarnConfiguration.NM_DOCKER_DEFAULT_RO_MOUNTS)));\n\n    defaultRWMounts.addAll(Arrays.asList(\n        conf.getTrimmedStrings(\n        YarnConfiguration.NM_DOCKER_DEFAULT_RW_MOUNTS)));\n\n    defaultTmpfsMounts.addAll(Arrays.asList(\n        conf.getTrimmedStrings(\n        YarnConfiguration.NM_DOCKER_DEFAULT_TMPFS_MOUNTS)));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "7526815e3234ca352854ecfb142a13f1a188d5bd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8263. DockerClient still touches hadoop.tmp.dir. Contributed by Craig Condit\n",
      "commitDate": "02/08/18 8:43 AM",
      "commitName": "7526815e3234ca352854ecfb142a13f1a188d5bd",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "23/07/18 5:12 PM",
      "commitNameOld": "8688a0c7f88f2adf1a7fce695e06f3dd1f745080",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 9.65,
      "commitsBetweenForRepo": 79,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,62 @@\n   public void initialize(Configuration conf, Context nmContext)\n       throws ContainerExecutionException {\n     this.nmContext \u003d nmContext;\n     this.conf \u003d conf;\n-    dockerClient \u003d new DockerClient(conf);\n+    dockerClient \u003d new DockerClient();\n     allowedNetworks.clear();\n     defaultROMounts.clear();\n     defaultRWMounts.clear();\n     allowedNetworks.addAll(Arrays.asList(\n         conf.getTrimmedStrings(\n             YarnConfiguration.NM_DOCKER_ALLOWED_CONTAINER_NETWORKS,\n             YarnConfiguration.DEFAULT_NM_DOCKER_ALLOWED_CONTAINER_NETWORKS)));\n     defaultNetwork \u003d conf.getTrimmed(\n         YarnConfiguration.NM_DOCKER_DEFAULT_CONTAINER_NETWORK,\n         YarnConfiguration.DEFAULT_NM_DOCKER_DEFAULT_CONTAINER_NETWORK);\n \n     if(!allowedNetworks.contains(defaultNetwork)) {\n       String message \u003d \"Default network: \" + defaultNetwork\n           + \" is not in the set of allowed networks: \" + allowedNetworks;\n \n       if (LOG.isWarnEnabled()) {\n         LOG.warn(message + \". Please check \"\n             + \"configuration\");\n       }\n \n       throw new ContainerExecutionException(message);\n     }\n \n     privilegedContainersAcl \u003d new AccessControlList(conf.getTrimmed(\n         YarnConfiguration.NM_DOCKER_PRIVILEGED_CONTAINERS_ACL,\n         YarnConfiguration.DEFAULT_NM_DOCKER_PRIVILEGED_CONTAINERS_ACL));\n \n     enableUserReMapping \u003d conf.getBoolean(\n       YarnConfiguration.NM_DOCKER_ENABLE_USER_REMAPPING,\n       YarnConfiguration.DEFAULT_NM_DOCKER_ENABLE_USER_REMAPPING);\n \n     userRemappingUidThreshold \u003d conf.getInt(\n       YarnConfiguration.NM_DOCKER_USER_REMAPPING_UID_THRESHOLD,\n       YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_UID_THRESHOLD);\n \n     userRemappingGidThreshold \u003d conf.getInt(\n       YarnConfiguration.NM_DOCKER_USER_REMAPPING_GID_THRESHOLD,\n       YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_GID_THRESHOLD);\n \n     capabilities \u003d getDockerCapabilitiesFromConf();\n \n     delayedRemovalAllowed \u003d conf.getBoolean(\n         YarnConfiguration.NM_DOCKER_ALLOW_DELAYED_REMOVAL,\n         YarnConfiguration.DEFAULT_NM_DOCKER_ALLOW_DELAYED_REMOVAL);\n \n     dockerStopGracePeriod \u003d conf.getInt(\n         YarnConfiguration.NM_DOCKER_STOP_GRACE_PERIOD,\n         YarnConfiguration.DEFAULT_NM_DOCKER_STOP_GRACE_PERIOD);\n \n     defaultROMounts.addAll(Arrays.asList(\n         conf.getTrimmedStrings(\n         YarnConfiguration.NM_DOCKER_DEFAULT_RO_MOUNTS)));\n \n     defaultRWMounts.addAll(Arrays.asList(\n         conf.getTrimmedStrings(\n         YarnConfiguration.NM_DOCKER_DEFAULT_RW_MOUNTS)));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(Configuration conf, Context nmContext)\n      throws ContainerExecutionException {\n    this.nmContext \u003d nmContext;\n    this.conf \u003d conf;\n    dockerClient \u003d new DockerClient();\n    allowedNetworks.clear();\n    defaultROMounts.clear();\n    defaultRWMounts.clear();\n    allowedNetworks.addAll(Arrays.asList(\n        conf.getTrimmedStrings(\n            YarnConfiguration.NM_DOCKER_ALLOWED_CONTAINER_NETWORKS,\n            YarnConfiguration.DEFAULT_NM_DOCKER_ALLOWED_CONTAINER_NETWORKS)));\n    defaultNetwork \u003d conf.getTrimmed(\n        YarnConfiguration.NM_DOCKER_DEFAULT_CONTAINER_NETWORK,\n        YarnConfiguration.DEFAULT_NM_DOCKER_DEFAULT_CONTAINER_NETWORK);\n\n    if(!allowedNetworks.contains(defaultNetwork)) {\n      String message \u003d \"Default network: \" + defaultNetwork\n          + \" is not in the set of allowed networks: \" + allowedNetworks;\n\n      if (LOG.isWarnEnabled()) {\n        LOG.warn(message + \". Please check \"\n            + \"configuration\");\n      }\n\n      throw new ContainerExecutionException(message);\n    }\n\n    privilegedContainersAcl \u003d new AccessControlList(conf.getTrimmed(\n        YarnConfiguration.NM_DOCKER_PRIVILEGED_CONTAINERS_ACL,\n        YarnConfiguration.DEFAULT_NM_DOCKER_PRIVILEGED_CONTAINERS_ACL));\n\n    enableUserReMapping \u003d conf.getBoolean(\n      YarnConfiguration.NM_DOCKER_ENABLE_USER_REMAPPING,\n      YarnConfiguration.DEFAULT_NM_DOCKER_ENABLE_USER_REMAPPING);\n\n    userRemappingUidThreshold \u003d conf.getInt(\n      YarnConfiguration.NM_DOCKER_USER_REMAPPING_UID_THRESHOLD,\n      YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_UID_THRESHOLD);\n\n    userRemappingGidThreshold \u003d conf.getInt(\n      YarnConfiguration.NM_DOCKER_USER_REMAPPING_GID_THRESHOLD,\n      YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_GID_THRESHOLD);\n\n    capabilities \u003d getDockerCapabilitiesFromConf();\n\n    delayedRemovalAllowed \u003d conf.getBoolean(\n        YarnConfiguration.NM_DOCKER_ALLOW_DELAYED_REMOVAL,\n        YarnConfiguration.DEFAULT_NM_DOCKER_ALLOW_DELAYED_REMOVAL);\n\n    dockerStopGracePeriod \u003d conf.getInt(\n        YarnConfiguration.NM_DOCKER_STOP_GRACE_PERIOD,\n        YarnConfiguration.DEFAULT_NM_DOCKER_STOP_GRACE_PERIOD);\n\n    defaultROMounts.addAll(Arrays.asList(\n        conf.getTrimmedStrings(\n        YarnConfiguration.NM_DOCKER_DEFAULT_RO_MOUNTS)));\n\n    defaultRWMounts.addAll(Arrays.asList(\n        conf.getTrimmedStrings(\n        YarnConfiguration.NM_DOCKER_DEFAULT_RW_MOUNTS)));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "1388de18ad51434569589a8f5b0b05c38fe02ab3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6919. Add default volume mount list. Contributed by Eric Badger\n",
      "commitDate": "24/05/18 8:30 AM",
      "commitName": "1388de18ad51434569589a8f5b0b05c38fe02ab3",
      "commitAuthor": "Shane Kumpf",
      "commitDateOld": "23/05/18 5:43 AM",
      "commitNameOld": "9837ca9cc746573571029f9fb996a1be10b588ab",
      "commitAuthorOld": "Shane Kumpf",
      "daysBetweenCommits": 1.12,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,62 @@\n   public void initialize(Configuration conf, Context nmContext)\n       throws ContainerExecutionException {\n     this.nmContext \u003d nmContext;\n     this.conf \u003d conf;\n     dockerClient \u003d new DockerClient(conf);\n     allowedNetworks.clear();\n+    defaultROMounts.clear();\n+    defaultRWMounts.clear();\n     allowedNetworks.addAll(Arrays.asList(\n         conf.getTrimmedStrings(\n             YarnConfiguration.NM_DOCKER_ALLOWED_CONTAINER_NETWORKS,\n             YarnConfiguration.DEFAULT_NM_DOCKER_ALLOWED_CONTAINER_NETWORKS)));\n     defaultNetwork \u003d conf.getTrimmed(\n         YarnConfiguration.NM_DOCKER_DEFAULT_CONTAINER_NETWORK,\n         YarnConfiguration.DEFAULT_NM_DOCKER_DEFAULT_CONTAINER_NETWORK);\n \n     if(!allowedNetworks.contains(defaultNetwork)) {\n       String message \u003d \"Default network: \" + defaultNetwork\n           + \" is not in the set of allowed networks: \" + allowedNetworks;\n \n       if (LOG.isWarnEnabled()) {\n         LOG.warn(message + \". Please check \"\n             + \"configuration\");\n       }\n \n       throw new ContainerExecutionException(message);\n     }\n \n     privilegedContainersAcl \u003d new AccessControlList(conf.getTrimmed(\n         YarnConfiguration.NM_DOCKER_PRIVILEGED_CONTAINERS_ACL,\n         YarnConfiguration.DEFAULT_NM_DOCKER_PRIVILEGED_CONTAINERS_ACL));\n \n     enableUserReMapping \u003d conf.getBoolean(\n       YarnConfiguration.NM_DOCKER_ENABLE_USER_REMAPPING,\n       YarnConfiguration.DEFAULT_NM_DOCKER_ENABLE_USER_REMAPPING);\n \n     userRemappingUidThreshold \u003d conf.getInt(\n       YarnConfiguration.NM_DOCKER_USER_REMAPPING_UID_THRESHOLD,\n       YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_UID_THRESHOLD);\n \n     userRemappingGidThreshold \u003d conf.getInt(\n       YarnConfiguration.NM_DOCKER_USER_REMAPPING_GID_THRESHOLD,\n       YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_GID_THRESHOLD);\n \n     capabilities \u003d getDockerCapabilitiesFromConf();\n \n     delayedRemovalAllowed \u003d conf.getBoolean(\n         YarnConfiguration.NM_DOCKER_ALLOW_DELAYED_REMOVAL,\n         YarnConfiguration.DEFAULT_NM_DOCKER_ALLOW_DELAYED_REMOVAL);\n \n     dockerStopGracePeriod \u003d conf.getInt(\n         YarnConfiguration.NM_DOCKER_STOP_GRACE_PERIOD,\n         YarnConfiguration.DEFAULT_NM_DOCKER_STOP_GRACE_PERIOD);\n+\n+    defaultROMounts.addAll(Arrays.asList(\n+        conf.getTrimmedStrings(\n+        YarnConfiguration.NM_DOCKER_DEFAULT_RO_MOUNTS)));\n+\n+    defaultRWMounts.addAll(Arrays.asList(\n+        conf.getTrimmedStrings(\n+        YarnConfiguration.NM_DOCKER_DEFAULT_RW_MOUNTS)));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(Configuration conf, Context nmContext)\n      throws ContainerExecutionException {\n    this.nmContext \u003d nmContext;\n    this.conf \u003d conf;\n    dockerClient \u003d new DockerClient(conf);\n    allowedNetworks.clear();\n    defaultROMounts.clear();\n    defaultRWMounts.clear();\n    allowedNetworks.addAll(Arrays.asList(\n        conf.getTrimmedStrings(\n            YarnConfiguration.NM_DOCKER_ALLOWED_CONTAINER_NETWORKS,\n            YarnConfiguration.DEFAULT_NM_DOCKER_ALLOWED_CONTAINER_NETWORKS)));\n    defaultNetwork \u003d conf.getTrimmed(\n        YarnConfiguration.NM_DOCKER_DEFAULT_CONTAINER_NETWORK,\n        YarnConfiguration.DEFAULT_NM_DOCKER_DEFAULT_CONTAINER_NETWORK);\n\n    if(!allowedNetworks.contains(defaultNetwork)) {\n      String message \u003d \"Default network: \" + defaultNetwork\n          + \" is not in the set of allowed networks: \" + allowedNetworks;\n\n      if (LOG.isWarnEnabled()) {\n        LOG.warn(message + \". Please check \"\n            + \"configuration\");\n      }\n\n      throw new ContainerExecutionException(message);\n    }\n\n    privilegedContainersAcl \u003d new AccessControlList(conf.getTrimmed(\n        YarnConfiguration.NM_DOCKER_PRIVILEGED_CONTAINERS_ACL,\n        YarnConfiguration.DEFAULT_NM_DOCKER_PRIVILEGED_CONTAINERS_ACL));\n\n    enableUserReMapping \u003d conf.getBoolean(\n      YarnConfiguration.NM_DOCKER_ENABLE_USER_REMAPPING,\n      YarnConfiguration.DEFAULT_NM_DOCKER_ENABLE_USER_REMAPPING);\n\n    userRemappingUidThreshold \u003d conf.getInt(\n      YarnConfiguration.NM_DOCKER_USER_REMAPPING_UID_THRESHOLD,\n      YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_UID_THRESHOLD);\n\n    userRemappingGidThreshold \u003d conf.getInt(\n      YarnConfiguration.NM_DOCKER_USER_REMAPPING_GID_THRESHOLD,\n      YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_GID_THRESHOLD);\n\n    capabilities \u003d getDockerCapabilitiesFromConf();\n\n    delayedRemovalAllowed \u003d conf.getBoolean(\n        YarnConfiguration.NM_DOCKER_ALLOW_DELAYED_REMOVAL,\n        YarnConfiguration.DEFAULT_NM_DOCKER_ALLOW_DELAYED_REMOVAL);\n\n    dockerStopGracePeriod \u003d conf.getInt(\n        YarnConfiguration.NM_DOCKER_STOP_GRACE_PERIOD,\n        YarnConfiguration.DEFAULT_NM_DOCKER_STOP_GRACE_PERIOD);\n\n    defaultROMounts.addAll(Arrays.asList(\n        conf.getTrimmedStrings(\n        YarnConfiguration.NM_DOCKER_DEFAULT_RO_MOUNTS)));\n\n    defaultRWMounts.addAll(Arrays.asList(\n        conf.getTrimmedStrings(\n        YarnConfiguration.NM_DOCKER_DEFAULT_RW_MOUNTS)));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "907919d28c1b7e4496d189b46ecbb86a10d41339": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7667. Docker Stop grace period should be configurable. Contributed by Eric Badger\n",
      "commitDate": "09/04/18 3:19 PM",
      "commitName": "907919d28c1b7e4496d189b46ecbb86a10d41339",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "19/03/18 2:59 PM",
      "commitNameOld": "f480367af68e06ed17b8018092c9987a13bb9f63",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 21.01,
      "commitsBetweenForRepo": 248,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,52 @@\n   public void initialize(Configuration conf, Context nmContext)\n       throws ContainerExecutionException {\n     this.nmContext \u003d nmContext;\n     this.conf \u003d conf;\n     dockerClient \u003d new DockerClient(conf);\n     allowedNetworks.clear();\n     allowedNetworks.addAll(Arrays.asList(\n         conf.getTrimmedStrings(\n             YarnConfiguration.NM_DOCKER_ALLOWED_CONTAINER_NETWORKS,\n             YarnConfiguration.DEFAULT_NM_DOCKER_ALLOWED_CONTAINER_NETWORKS)));\n     defaultNetwork \u003d conf.getTrimmed(\n         YarnConfiguration.NM_DOCKER_DEFAULT_CONTAINER_NETWORK,\n         YarnConfiguration.DEFAULT_NM_DOCKER_DEFAULT_CONTAINER_NETWORK);\n \n     if(!allowedNetworks.contains(defaultNetwork)) {\n       String message \u003d \"Default network: \" + defaultNetwork\n           + \" is not in the set of allowed networks: \" + allowedNetworks;\n \n       if (LOG.isWarnEnabled()) {\n         LOG.warn(message + \". Please check \"\n             + \"configuration\");\n       }\n \n       throw new ContainerExecutionException(message);\n     }\n \n     privilegedContainersAcl \u003d new AccessControlList(conf.getTrimmed(\n         YarnConfiguration.NM_DOCKER_PRIVILEGED_CONTAINERS_ACL,\n         YarnConfiguration.DEFAULT_NM_DOCKER_PRIVILEGED_CONTAINERS_ACL));\n \n     enableUserReMapping \u003d conf.getBoolean(\n       YarnConfiguration.NM_DOCKER_ENABLE_USER_REMAPPING,\n       YarnConfiguration.DEFAULT_NM_DOCKER_ENABLE_USER_REMAPPING);\n \n     userRemappingUidThreshold \u003d conf.getInt(\n       YarnConfiguration.NM_DOCKER_USER_REMAPPING_UID_THRESHOLD,\n       YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_UID_THRESHOLD);\n \n     userRemappingGidThreshold \u003d conf.getInt(\n       YarnConfiguration.NM_DOCKER_USER_REMAPPING_GID_THRESHOLD,\n       YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_GID_THRESHOLD);\n \n     capabilities \u003d getDockerCapabilitiesFromConf();\n \n     delayedRemovalAllowed \u003d conf.getBoolean(\n         YarnConfiguration.NM_DOCKER_ALLOW_DELAYED_REMOVAL,\n         YarnConfiguration.DEFAULT_NM_DOCKER_ALLOW_DELAYED_REMOVAL);\n+\n+    dockerStopGracePeriod \u003d conf.getInt(\n+        YarnConfiguration.NM_DOCKER_STOP_GRACE_PERIOD,\n+        YarnConfiguration.DEFAULT_NM_DOCKER_STOP_GRACE_PERIOD);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(Configuration conf, Context nmContext)\n      throws ContainerExecutionException {\n    this.nmContext \u003d nmContext;\n    this.conf \u003d conf;\n    dockerClient \u003d new DockerClient(conf);\n    allowedNetworks.clear();\n    allowedNetworks.addAll(Arrays.asList(\n        conf.getTrimmedStrings(\n            YarnConfiguration.NM_DOCKER_ALLOWED_CONTAINER_NETWORKS,\n            YarnConfiguration.DEFAULT_NM_DOCKER_ALLOWED_CONTAINER_NETWORKS)));\n    defaultNetwork \u003d conf.getTrimmed(\n        YarnConfiguration.NM_DOCKER_DEFAULT_CONTAINER_NETWORK,\n        YarnConfiguration.DEFAULT_NM_DOCKER_DEFAULT_CONTAINER_NETWORK);\n\n    if(!allowedNetworks.contains(defaultNetwork)) {\n      String message \u003d \"Default network: \" + defaultNetwork\n          + \" is not in the set of allowed networks: \" + allowedNetworks;\n\n      if (LOG.isWarnEnabled()) {\n        LOG.warn(message + \". Please check \"\n            + \"configuration\");\n      }\n\n      throw new ContainerExecutionException(message);\n    }\n\n    privilegedContainersAcl \u003d new AccessControlList(conf.getTrimmed(\n        YarnConfiguration.NM_DOCKER_PRIVILEGED_CONTAINERS_ACL,\n        YarnConfiguration.DEFAULT_NM_DOCKER_PRIVILEGED_CONTAINERS_ACL));\n\n    enableUserReMapping \u003d conf.getBoolean(\n      YarnConfiguration.NM_DOCKER_ENABLE_USER_REMAPPING,\n      YarnConfiguration.DEFAULT_NM_DOCKER_ENABLE_USER_REMAPPING);\n\n    userRemappingUidThreshold \u003d conf.getInt(\n      YarnConfiguration.NM_DOCKER_USER_REMAPPING_UID_THRESHOLD,\n      YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_UID_THRESHOLD);\n\n    userRemappingGidThreshold \u003d conf.getInt(\n      YarnConfiguration.NM_DOCKER_USER_REMAPPING_GID_THRESHOLD,\n      YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_GID_THRESHOLD);\n\n    capabilities \u003d getDockerCapabilitiesFromConf();\n\n    delayedRemovalAllowed \u003d conf.getBoolean(\n        YarnConfiguration.NM_DOCKER_ALLOW_DELAYED_REMOVAL,\n        YarnConfiguration.DEFAULT_NM_DOCKER_ALLOW_DELAYED_REMOVAL);\n\n    dockerStopGracePeriod \u003d conf.getInt(\n        YarnConfiguration.NM_DOCKER_STOP_GRACE_PERIOD,\n        YarnConfiguration.DEFAULT_NM_DOCKER_STOP_GRACE_PERIOD);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "3d65dbe032e202361d613344ccc6d9c5f99ba395": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5366. Improve signal handling and delete delay for Docker on Yarn.\n           (Contributed by Shane Kumpf)\n",
      "commitDate": "12/01/18 10:41 AM",
      "commitName": "3d65dbe032e202361d613344ccc6d9c5f99ba395",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "01/12/17 12:06 AM",
      "commitNameOld": "556aea3f367bdbd4e4db601bea0ca9bf2adde063",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 42.44,
      "commitsBetweenForRepo": 239,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,48 @@\n   public void initialize(Configuration conf, Context nmContext)\n       throws ContainerExecutionException {\n     this.nmContext \u003d nmContext;\n     this.conf \u003d conf;\n     dockerClient \u003d new DockerClient(conf);\n     allowedNetworks.clear();\n     allowedNetworks.addAll(Arrays.asList(\n         conf.getTrimmedStrings(\n             YarnConfiguration.NM_DOCKER_ALLOWED_CONTAINER_NETWORKS,\n             YarnConfiguration.DEFAULT_NM_DOCKER_ALLOWED_CONTAINER_NETWORKS)));\n     defaultNetwork \u003d conf.getTrimmed(\n         YarnConfiguration.NM_DOCKER_DEFAULT_CONTAINER_NETWORK,\n         YarnConfiguration.DEFAULT_NM_DOCKER_DEFAULT_CONTAINER_NETWORK);\n \n     if(!allowedNetworks.contains(defaultNetwork)) {\n       String message \u003d \"Default network: \" + defaultNetwork\n           + \" is not in the set of allowed networks: \" + allowedNetworks;\n \n       if (LOG.isWarnEnabled()) {\n         LOG.warn(message + \". Please check \"\n             + \"configuration\");\n       }\n \n       throw new ContainerExecutionException(message);\n     }\n \n     privilegedContainersAcl \u003d new AccessControlList(conf.getTrimmed(\n         YarnConfiguration.NM_DOCKER_PRIVILEGED_CONTAINERS_ACL,\n         YarnConfiguration.DEFAULT_NM_DOCKER_PRIVILEGED_CONTAINERS_ACL));\n \n     enableUserReMapping \u003d conf.getBoolean(\n       YarnConfiguration.NM_DOCKER_ENABLE_USER_REMAPPING,\n       YarnConfiguration.DEFAULT_NM_DOCKER_ENABLE_USER_REMAPPING);\n \n     userRemappingUidThreshold \u003d conf.getInt(\n       YarnConfiguration.NM_DOCKER_USER_REMAPPING_UID_THRESHOLD,\n       YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_UID_THRESHOLD);\n \n     userRemappingGidThreshold \u003d conf.getInt(\n       YarnConfiguration.NM_DOCKER_USER_REMAPPING_GID_THRESHOLD,\n       YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_GID_THRESHOLD);\n \n     capabilities \u003d getDockerCapabilitiesFromConf();\n+\n+    delayedRemovalAllowed \u003d conf.getBoolean(\n+        YarnConfiguration.NM_DOCKER_ALLOW_DELAYED_REMOVAL,\n+        YarnConfiguration.DEFAULT_NM_DOCKER_ALLOW_DELAYED_REMOVAL);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(Configuration conf, Context nmContext)\n      throws ContainerExecutionException {\n    this.nmContext \u003d nmContext;\n    this.conf \u003d conf;\n    dockerClient \u003d new DockerClient(conf);\n    allowedNetworks.clear();\n    allowedNetworks.addAll(Arrays.asList(\n        conf.getTrimmedStrings(\n            YarnConfiguration.NM_DOCKER_ALLOWED_CONTAINER_NETWORKS,\n            YarnConfiguration.DEFAULT_NM_DOCKER_ALLOWED_CONTAINER_NETWORKS)));\n    defaultNetwork \u003d conf.getTrimmed(\n        YarnConfiguration.NM_DOCKER_DEFAULT_CONTAINER_NETWORK,\n        YarnConfiguration.DEFAULT_NM_DOCKER_DEFAULT_CONTAINER_NETWORK);\n\n    if(!allowedNetworks.contains(defaultNetwork)) {\n      String message \u003d \"Default network: \" + defaultNetwork\n          + \" is not in the set of allowed networks: \" + allowedNetworks;\n\n      if (LOG.isWarnEnabled()) {\n        LOG.warn(message + \". Please check \"\n            + \"configuration\");\n      }\n\n      throw new ContainerExecutionException(message);\n    }\n\n    privilegedContainersAcl \u003d new AccessControlList(conf.getTrimmed(\n        YarnConfiguration.NM_DOCKER_PRIVILEGED_CONTAINERS_ACL,\n        YarnConfiguration.DEFAULT_NM_DOCKER_PRIVILEGED_CONTAINERS_ACL));\n\n    enableUserReMapping \u003d conf.getBoolean(\n      YarnConfiguration.NM_DOCKER_ENABLE_USER_REMAPPING,\n      YarnConfiguration.DEFAULT_NM_DOCKER_ENABLE_USER_REMAPPING);\n\n    userRemappingUidThreshold \u003d conf.getInt(\n      YarnConfiguration.NM_DOCKER_USER_REMAPPING_UID_THRESHOLD,\n      YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_UID_THRESHOLD);\n\n    userRemappingGidThreshold \u003d conf.getInt(\n      YarnConfiguration.NM_DOCKER_USER_REMAPPING_GID_THRESHOLD,\n      YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_GID_THRESHOLD);\n\n    capabilities \u003d getDockerCapabilitiesFromConf();\n\n    delayedRemovalAllowed \u003d conf.getBoolean(\n        YarnConfiguration.NM_DOCKER_ALLOW_DELAYED_REMOVAL,\n        YarnConfiguration.DEFAULT_NM_DOCKER_ALLOW_DELAYED_REMOVAL);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "d00b6f7c1ff2d7569ae9efdc6823ebcfb86ef2d4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7286. Add support for docker to have no capabilities. Contributed by Eric Badger\n",
      "commitDate": "02/11/17 7:37 AM",
      "commitName": "d00b6f7c1ff2d7569ae9efdc6823ebcfb86ef2d4",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "28/10/17 10:38 PM",
      "commitNameOld": "9114d7a5a0159bbe70e9c289dbe1fc5db9101db5",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 4.37,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,44 @@\n   public void initialize(Configuration conf, Context nmContext)\n       throws ContainerExecutionException {\n     this.nmContext \u003d nmContext;\n     this.conf \u003d conf;\n     dockerClient \u003d new DockerClient(conf);\n     allowedNetworks.clear();\n     allowedNetworks.addAll(Arrays.asList(\n         conf.getTrimmedStrings(\n             YarnConfiguration.NM_DOCKER_ALLOWED_CONTAINER_NETWORKS,\n             YarnConfiguration.DEFAULT_NM_DOCKER_ALLOWED_CONTAINER_NETWORKS)));\n     defaultNetwork \u003d conf.getTrimmed(\n         YarnConfiguration.NM_DOCKER_DEFAULT_CONTAINER_NETWORK,\n         YarnConfiguration.DEFAULT_NM_DOCKER_DEFAULT_CONTAINER_NETWORK);\n \n     if(!allowedNetworks.contains(defaultNetwork)) {\n       String message \u003d \"Default network: \" + defaultNetwork\n           + \" is not in the set of allowed networks: \" + allowedNetworks;\n \n       if (LOG.isWarnEnabled()) {\n         LOG.warn(message + \". Please check \"\n             + \"configuration\");\n       }\n \n       throw new ContainerExecutionException(message);\n     }\n \n     privilegedContainersAcl \u003d new AccessControlList(conf.getTrimmed(\n         YarnConfiguration.NM_DOCKER_PRIVILEGED_CONTAINERS_ACL,\n         YarnConfiguration.DEFAULT_NM_DOCKER_PRIVILEGED_CONTAINERS_ACL));\n \n     enableUserReMapping \u003d conf.getBoolean(\n       YarnConfiguration.NM_DOCKER_ENABLE_USER_REMAPPING,\n       YarnConfiguration.DEFAULT_NM_DOCKER_ENABLE_USER_REMAPPING);\n \n     userRemappingUidThreshold \u003d conf.getInt(\n       YarnConfiguration.NM_DOCKER_USER_REMAPPING_UID_THRESHOLD,\n       YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_UID_THRESHOLD);\n \n     userRemappingGidThreshold \u003d conf.getInt(\n       YarnConfiguration.NM_DOCKER_USER_REMAPPING_GID_THRESHOLD,\n       YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_GID_THRESHOLD);\n+\n+    capabilities \u003d getDockerCapabilitiesFromConf();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(Configuration conf, Context nmContext)\n      throws ContainerExecutionException {\n    this.nmContext \u003d nmContext;\n    this.conf \u003d conf;\n    dockerClient \u003d new DockerClient(conf);\n    allowedNetworks.clear();\n    allowedNetworks.addAll(Arrays.asList(\n        conf.getTrimmedStrings(\n            YarnConfiguration.NM_DOCKER_ALLOWED_CONTAINER_NETWORKS,\n            YarnConfiguration.DEFAULT_NM_DOCKER_ALLOWED_CONTAINER_NETWORKS)));\n    defaultNetwork \u003d conf.getTrimmed(\n        YarnConfiguration.NM_DOCKER_DEFAULT_CONTAINER_NETWORK,\n        YarnConfiguration.DEFAULT_NM_DOCKER_DEFAULT_CONTAINER_NETWORK);\n\n    if(!allowedNetworks.contains(defaultNetwork)) {\n      String message \u003d \"Default network: \" + defaultNetwork\n          + \" is not in the set of allowed networks: \" + allowedNetworks;\n\n      if (LOG.isWarnEnabled()) {\n        LOG.warn(message + \". Please check \"\n            + \"configuration\");\n      }\n\n      throw new ContainerExecutionException(message);\n    }\n\n    privilegedContainersAcl \u003d new AccessControlList(conf.getTrimmed(\n        YarnConfiguration.NM_DOCKER_PRIVILEGED_CONTAINERS_ACL,\n        YarnConfiguration.DEFAULT_NM_DOCKER_PRIVILEGED_CONTAINERS_ACL));\n\n    enableUserReMapping \u003d conf.getBoolean(\n      YarnConfiguration.NM_DOCKER_ENABLE_USER_REMAPPING,\n      YarnConfiguration.DEFAULT_NM_DOCKER_ENABLE_USER_REMAPPING);\n\n    userRemappingUidThreshold \u003d conf.getInt(\n      YarnConfiguration.NM_DOCKER_USER_REMAPPING_UID_THRESHOLD,\n      YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_UID_THRESHOLD);\n\n    userRemappingGidThreshold \u003d conf.getInt(\n      YarnConfiguration.NM_DOCKER_USER_REMAPPING_GID_THRESHOLD,\n      YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_GID_THRESHOLD);\n\n    capabilities \u003d getDockerCapabilitiesFromConf();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "9114d7a5a0159bbe70e9c289dbe1fc5db9101db5": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-7224. Support GPU isolation for docker container. Contributed by Wangda Tan.\n",
      "commitDate": "28/10/17 10:38 PM",
      "commitName": "9114d7a5a0159bbe70e9c289dbe1fc5db9101db5",
      "commitAuthor": "Sunil G",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7224. Support GPU isolation for docker container. Contributed by Wangda Tan.\n",
          "commitDate": "28/10/17 10:38 PM",
          "commitName": "9114d7a5a0159bbe70e9c289dbe1fc5db9101db5",
          "commitAuthor": "Sunil G",
          "commitDateOld": "02/10/17 7:04 PM",
          "commitNameOld": "7eb8499996869cdb63743f1c9eca2ba91d57ad08",
          "commitAuthorOld": "Sidharta S",
          "daysBetweenCommits": 26.15,
          "commitsBetweenForRepo": 199,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,42 @@\n-  public void initialize(Configuration conf)\n+  public void initialize(Configuration conf, Context nmContext)\n       throws ContainerExecutionException {\n+    this.nmContext \u003d nmContext;\n     this.conf \u003d conf;\n     dockerClient \u003d new DockerClient(conf);\n     allowedNetworks.clear();\n     allowedNetworks.addAll(Arrays.asList(\n         conf.getTrimmedStrings(\n             YarnConfiguration.NM_DOCKER_ALLOWED_CONTAINER_NETWORKS,\n             YarnConfiguration.DEFAULT_NM_DOCKER_ALLOWED_CONTAINER_NETWORKS)));\n     defaultNetwork \u003d conf.getTrimmed(\n         YarnConfiguration.NM_DOCKER_DEFAULT_CONTAINER_NETWORK,\n         YarnConfiguration.DEFAULT_NM_DOCKER_DEFAULT_CONTAINER_NETWORK);\n \n     if(!allowedNetworks.contains(defaultNetwork)) {\n       String message \u003d \"Default network: \" + defaultNetwork\n           + \" is not in the set of allowed networks: \" + allowedNetworks;\n \n       if (LOG.isWarnEnabled()) {\n         LOG.warn(message + \". Please check \"\n             + \"configuration\");\n       }\n \n       throw new ContainerExecutionException(message);\n     }\n \n     privilegedContainersAcl \u003d new AccessControlList(conf.getTrimmed(\n         YarnConfiguration.NM_DOCKER_PRIVILEGED_CONTAINERS_ACL,\n         YarnConfiguration.DEFAULT_NM_DOCKER_PRIVILEGED_CONTAINERS_ACL));\n \n     enableUserReMapping \u003d conf.getBoolean(\n       YarnConfiguration.NM_DOCKER_ENABLE_USER_REMAPPING,\n       YarnConfiguration.DEFAULT_NM_DOCKER_ENABLE_USER_REMAPPING);\n \n     userRemappingUidThreshold \u003d conf.getInt(\n       YarnConfiguration.NM_DOCKER_USER_REMAPPING_UID_THRESHOLD,\n       YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_UID_THRESHOLD);\n \n     userRemappingGidThreshold \u003d conf.getInt(\n       YarnConfiguration.NM_DOCKER_USER_REMAPPING_GID_THRESHOLD,\n       YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_GID_THRESHOLD);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void initialize(Configuration conf, Context nmContext)\n      throws ContainerExecutionException {\n    this.nmContext \u003d nmContext;\n    this.conf \u003d conf;\n    dockerClient \u003d new DockerClient(conf);\n    allowedNetworks.clear();\n    allowedNetworks.addAll(Arrays.asList(\n        conf.getTrimmedStrings(\n            YarnConfiguration.NM_DOCKER_ALLOWED_CONTAINER_NETWORKS,\n            YarnConfiguration.DEFAULT_NM_DOCKER_ALLOWED_CONTAINER_NETWORKS)));\n    defaultNetwork \u003d conf.getTrimmed(\n        YarnConfiguration.NM_DOCKER_DEFAULT_CONTAINER_NETWORK,\n        YarnConfiguration.DEFAULT_NM_DOCKER_DEFAULT_CONTAINER_NETWORK);\n\n    if(!allowedNetworks.contains(defaultNetwork)) {\n      String message \u003d \"Default network: \" + defaultNetwork\n          + \" is not in the set of allowed networks: \" + allowedNetworks;\n\n      if (LOG.isWarnEnabled()) {\n        LOG.warn(message + \". Please check \"\n            + \"configuration\");\n      }\n\n      throw new ContainerExecutionException(message);\n    }\n\n    privilegedContainersAcl \u003d new AccessControlList(conf.getTrimmed(\n        YarnConfiguration.NM_DOCKER_PRIVILEGED_CONTAINERS_ACL,\n        YarnConfiguration.DEFAULT_NM_DOCKER_PRIVILEGED_CONTAINERS_ACL));\n\n    enableUserReMapping \u003d conf.getBoolean(\n      YarnConfiguration.NM_DOCKER_ENABLE_USER_REMAPPING,\n      YarnConfiguration.DEFAULT_NM_DOCKER_ENABLE_USER_REMAPPING);\n\n    userRemappingUidThreshold \u003d conf.getInt(\n      YarnConfiguration.NM_DOCKER_USER_REMAPPING_UID_THRESHOLD,\n      YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_UID_THRESHOLD);\n\n    userRemappingGidThreshold \u003d conf.getInt(\n      YarnConfiguration.NM_DOCKER_USER_REMAPPING_GID_THRESHOLD,\n      YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_GID_THRESHOLD);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration]",
            "newValue": "[conf-Configuration, nmContext-Context]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7224. Support GPU isolation for docker container. Contributed by Wangda Tan.\n",
          "commitDate": "28/10/17 10:38 PM",
          "commitName": "9114d7a5a0159bbe70e9c289dbe1fc5db9101db5",
          "commitAuthor": "Sunil G",
          "commitDateOld": "02/10/17 7:04 PM",
          "commitNameOld": "7eb8499996869cdb63743f1c9eca2ba91d57ad08",
          "commitAuthorOld": "Sidharta S",
          "daysBetweenCommits": 26.15,
          "commitsBetweenForRepo": 199,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,42 @@\n-  public void initialize(Configuration conf)\n+  public void initialize(Configuration conf, Context nmContext)\n       throws ContainerExecutionException {\n+    this.nmContext \u003d nmContext;\n     this.conf \u003d conf;\n     dockerClient \u003d new DockerClient(conf);\n     allowedNetworks.clear();\n     allowedNetworks.addAll(Arrays.asList(\n         conf.getTrimmedStrings(\n             YarnConfiguration.NM_DOCKER_ALLOWED_CONTAINER_NETWORKS,\n             YarnConfiguration.DEFAULT_NM_DOCKER_ALLOWED_CONTAINER_NETWORKS)));\n     defaultNetwork \u003d conf.getTrimmed(\n         YarnConfiguration.NM_DOCKER_DEFAULT_CONTAINER_NETWORK,\n         YarnConfiguration.DEFAULT_NM_DOCKER_DEFAULT_CONTAINER_NETWORK);\n \n     if(!allowedNetworks.contains(defaultNetwork)) {\n       String message \u003d \"Default network: \" + defaultNetwork\n           + \" is not in the set of allowed networks: \" + allowedNetworks;\n \n       if (LOG.isWarnEnabled()) {\n         LOG.warn(message + \". Please check \"\n             + \"configuration\");\n       }\n \n       throw new ContainerExecutionException(message);\n     }\n \n     privilegedContainersAcl \u003d new AccessControlList(conf.getTrimmed(\n         YarnConfiguration.NM_DOCKER_PRIVILEGED_CONTAINERS_ACL,\n         YarnConfiguration.DEFAULT_NM_DOCKER_PRIVILEGED_CONTAINERS_ACL));\n \n     enableUserReMapping \u003d conf.getBoolean(\n       YarnConfiguration.NM_DOCKER_ENABLE_USER_REMAPPING,\n       YarnConfiguration.DEFAULT_NM_DOCKER_ENABLE_USER_REMAPPING);\n \n     userRemappingUidThreshold \u003d conf.getInt(\n       YarnConfiguration.NM_DOCKER_USER_REMAPPING_UID_THRESHOLD,\n       YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_UID_THRESHOLD);\n \n     userRemappingGidThreshold \u003d conf.getInt(\n       YarnConfiguration.NM_DOCKER_USER_REMAPPING_GID_THRESHOLD,\n       YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_GID_THRESHOLD);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void initialize(Configuration conf, Context nmContext)\n      throws ContainerExecutionException {\n    this.nmContext \u003d nmContext;\n    this.conf \u003d conf;\n    dockerClient \u003d new DockerClient(conf);\n    allowedNetworks.clear();\n    allowedNetworks.addAll(Arrays.asList(\n        conf.getTrimmedStrings(\n            YarnConfiguration.NM_DOCKER_ALLOWED_CONTAINER_NETWORKS,\n            YarnConfiguration.DEFAULT_NM_DOCKER_ALLOWED_CONTAINER_NETWORKS)));\n    defaultNetwork \u003d conf.getTrimmed(\n        YarnConfiguration.NM_DOCKER_DEFAULT_CONTAINER_NETWORK,\n        YarnConfiguration.DEFAULT_NM_DOCKER_DEFAULT_CONTAINER_NETWORK);\n\n    if(!allowedNetworks.contains(defaultNetwork)) {\n      String message \u003d \"Default network: \" + defaultNetwork\n          + \" is not in the set of allowed networks: \" + allowedNetworks;\n\n      if (LOG.isWarnEnabled()) {\n        LOG.warn(message + \". Please check \"\n            + \"configuration\");\n      }\n\n      throw new ContainerExecutionException(message);\n    }\n\n    privilegedContainersAcl \u003d new AccessControlList(conf.getTrimmed(\n        YarnConfiguration.NM_DOCKER_PRIVILEGED_CONTAINERS_ACL,\n        YarnConfiguration.DEFAULT_NM_DOCKER_PRIVILEGED_CONTAINERS_ACL));\n\n    enableUserReMapping \u003d conf.getBoolean(\n      YarnConfiguration.NM_DOCKER_ENABLE_USER_REMAPPING,\n      YarnConfiguration.DEFAULT_NM_DOCKER_ENABLE_USER_REMAPPING);\n\n    userRemappingUidThreshold \u003d conf.getInt(\n      YarnConfiguration.NM_DOCKER_USER_REMAPPING_UID_THRESHOLD,\n      YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_UID_THRESHOLD);\n\n    userRemappingGidThreshold \u003d conf.getInt(\n      YarnConfiguration.NM_DOCKER_USER_REMAPPING_GID_THRESHOLD,\n      YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_GID_THRESHOLD);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
          "extendedDetails": {}
        }
      ]
    },
    "bfd1a72ba8fbb06da73fede2a85e0b544d6ab43f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4266. Allow users to enter containers as UID:GID pair instead of by username. Contributed by luhuichun, Zhankun Tang, and Eric Badger.\n",
      "commitDate": "21/09/17 3:41 PM",
      "commitName": "bfd1a72ba8fbb06da73fede2a85e0b544d6ab43f",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "21/09/17 2:01 PM",
      "commitNameOld": "e5e1851d803bf8d8b96fec1b5c0058014e9329d0",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,41 @@\n   public void initialize(Configuration conf)\n       throws ContainerExecutionException {\n     this.conf \u003d conf;\n     dockerClient \u003d new DockerClient(conf);\n     allowedNetworks.clear();\n     allowedNetworks.addAll(Arrays.asList(\n         conf.getTrimmedStrings(\n             YarnConfiguration.NM_DOCKER_ALLOWED_CONTAINER_NETWORKS,\n             YarnConfiguration.DEFAULT_NM_DOCKER_ALLOWED_CONTAINER_NETWORKS)));\n     defaultNetwork \u003d conf.getTrimmed(\n         YarnConfiguration.NM_DOCKER_DEFAULT_CONTAINER_NETWORK,\n         YarnConfiguration.DEFAULT_NM_DOCKER_DEFAULT_CONTAINER_NETWORK);\n \n     if(!allowedNetworks.contains(defaultNetwork)) {\n       String message \u003d \"Default network: \" + defaultNetwork\n           + \" is not in the set of allowed networks: \" + allowedNetworks;\n \n       if (LOG.isWarnEnabled()) {\n         LOG.warn(message + \". Please check \"\n             + \"configuration\");\n       }\n \n       throw new ContainerExecutionException(message);\n     }\n \n     privilegedContainersAcl \u003d new AccessControlList(conf.getTrimmed(\n         YarnConfiguration.NM_DOCKER_PRIVILEGED_CONTAINERS_ACL,\n         YarnConfiguration.DEFAULT_NM_DOCKER_PRIVILEGED_CONTAINERS_ACL));\n+\n+    enableUserReMapping \u003d conf.getBoolean(\n+      YarnConfiguration.NM_DOCKER_ENABLE_USER_REMAPPING,\n+      YarnConfiguration.DEFAULT_NM_DOCKER_ENABLE_USER_REMAPPING);\n+\n+    userRemappingUidThreshold \u003d conf.getInt(\n+      YarnConfiguration.NM_DOCKER_USER_REMAPPING_UID_THRESHOLD,\n+      YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_UID_THRESHOLD);\n+\n+    userRemappingGidThreshold \u003d conf.getInt(\n+      YarnConfiguration.NM_DOCKER_USER_REMAPPING_GID_THRESHOLD,\n+      YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_GID_THRESHOLD);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(Configuration conf)\n      throws ContainerExecutionException {\n    this.conf \u003d conf;\n    dockerClient \u003d new DockerClient(conf);\n    allowedNetworks.clear();\n    allowedNetworks.addAll(Arrays.asList(\n        conf.getTrimmedStrings(\n            YarnConfiguration.NM_DOCKER_ALLOWED_CONTAINER_NETWORKS,\n            YarnConfiguration.DEFAULT_NM_DOCKER_ALLOWED_CONTAINER_NETWORKS)));\n    defaultNetwork \u003d conf.getTrimmed(\n        YarnConfiguration.NM_DOCKER_DEFAULT_CONTAINER_NETWORK,\n        YarnConfiguration.DEFAULT_NM_DOCKER_DEFAULT_CONTAINER_NETWORK);\n\n    if(!allowedNetworks.contains(defaultNetwork)) {\n      String message \u003d \"Default network: \" + defaultNetwork\n          + \" is not in the set of allowed networks: \" + allowedNetworks;\n\n      if (LOG.isWarnEnabled()) {\n        LOG.warn(message + \". Please check \"\n            + \"configuration\");\n      }\n\n      throw new ContainerExecutionException(message);\n    }\n\n    privilegedContainersAcl \u003d new AccessControlList(conf.getTrimmed(\n        YarnConfiguration.NM_DOCKER_PRIVILEGED_CONTAINERS_ACL,\n        YarnConfiguration.DEFAULT_NM_DOCKER_PRIVILEGED_CONTAINERS_ACL));\n\n    enableUserReMapping \u003d conf.getBoolean(\n      YarnConfiguration.NM_DOCKER_ENABLE_USER_REMAPPING,\n      YarnConfiguration.DEFAULT_NM_DOCKER_ENABLE_USER_REMAPPING);\n\n    userRemappingUidThreshold \u003d conf.getInt(\n      YarnConfiguration.NM_DOCKER_USER_REMAPPING_UID_THRESHOLD,\n      YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_UID_THRESHOLD);\n\n    userRemappingGidThreshold \u003d conf.getInt(\n      YarnConfiguration.NM_DOCKER_USER_REMAPPING_GID_THRESHOLD,\n      YarnConfiguration.DEFAULT_NM_DOCKER_USER_REMAPPING_GID_THRESHOLD);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "f3eb4c3c738204e099cbaa03471497c46530efbf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5793. Trim configuration values in DockerLinuxContainerRuntime (Contributed by Tianyin Xu via Daniel Templeton)\n",
      "commitDate": "31/10/16 1:51 PM",
      "commitName": "f3eb4c3c738204e099cbaa03471497c46530efbf",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "01/09/16 1:38 AM",
      "commitNameOld": "08f55ccbb075b90a6e534f4ac0f9840f2e6890d5",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 60.51,
      "commitsBetweenForRepo": 435,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,29 @@\n   public void initialize(Configuration conf)\n       throws ContainerExecutionException {\n     this.conf \u003d conf;\n     dockerClient \u003d new DockerClient(conf);\n     allowedNetworks.clear();\n     allowedNetworks.addAll(Arrays.asList(\n-        conf.getStrings(YarnConfiguration.NM_DOCKER_ALLOWED_CONTAINER_NETWORKS,\n+        conf.getTrimmedStrings(\n+            YarnConfiguration.NM_DOCKER_ALLOWED_CONTAINER_NETWORKS,\n             YarnConfiguration.DEFAULT_NM_DOCKER_ALLOWED_CONTAINER_NETWORKS)));\n-    defaultNetwork \u003d conf.get(\n+    defaultNetwork \u003d conf.getTrimmed(\n         YarnConfiguration.NM_DOCKER_DEFAULT_CONTAINER_NETWORK,\n         YarnConfiguration.DEFAULT_NM_DOCKER_DEFAULT_CONTAINER_NETWORK);\n \n     if(!allowedNetworks.contains(defaultNetwork)) {\n       String message \u003d \"Default network: \" + defaultNetwork\n           + \" is not in the set of allowed networks: \" + allowedNetworks;\n \n       if (LOG.isWarnEnabled()) {\n         LOG.warn(message + \". Please check \"\n             + \"configuration\");\n       }\n \n       throw new ContainerExecutionException(message);\n     }\n \n-    privilegedContainersAcl \u003d new AccessControlList(conf.get(\n+    privilegedContainersAcl \u003d new AccessControlList(conf.getTrimmed(\n         YarnConfiguration.NM_DOCKER_PRIVILEGED_CONTAINERS_ACL,\n         YarnConfiguration.DEFAULT_NM_DOCKER_PRIVILEGED_CONTAINERS_ACL));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(Configuration conf)\n      throws ContainerExecutionException {\n    this.conf \u003d conf;\n    dockerClient \u003d new DockerClient(conf);\n    allowedNetworks.clear();\n    allowedNetworks.addAll(Arrays.asList(\n        conf.getTrimmedStrings(\n            YarnConfiguration.NM_DOCKER_ALLOWED_CONTAINER_NETWORKS,\n            YarnConfiguration.DEFAULT_NM_DOCKER_ALLOWED_CONTAINER_NETWORKS)));\n    defaultNetwork \u003d conf.getTrimmed(\n        YarnConfiguration.NM_DOCKER_DEFAULT_CONTAINER_NETWORK,\n        YarnConfiguration.DEFAULT_NM_DOCKER_DEFAULT_CONTAINER_NETWORK);\n\n    if(!allowedNetworks.contains(defaultNetwork)) {\n      String message \u003d \"Default network: \" + defaultNetwork\n          + \" is not in the set of allowed networks: \" + allowedNetworks;\n\n      if (LOG.isWarnEnabled()) {\n        LOG.warn(message + \". Please check \"\n            + \"configuration\");\n      }\n\n      throw new ContainerExecutionException(message);\n    }\n\n    privilegedContainersAcl \u003d new AccessControlList(conf.getTrimmed(\n        YarnConfiguration.NM_DOCKER_PRIVILEGED_CONTAINERS_ACL,\n        YarnConfiguration.DEFAULT_NM_DOCKER_PRIVILEGED_CONTAINERS_ACL));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "86fb58b7dc832c2df30469d128598a6a1bed8df5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4007. Add support for different network setups when launching the docker container. Contributed by Sidharta Seethana.\n",
      "commitDate": "29/05/16 9:02 AM",
      "commitName": "86fb58b7dc832c2df30469d128598a6a1bed8df5",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "05/05/16 12:31 AM",
      "commitNameOld": "72b047715c1ae89dff3dfe76c1af91dfe255ed70",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 24.35,
      "commitsBetweenForRepo": 177,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,8 +1,28 @@\n   public void initialize(Configuration conf)\n       throws ContainerExecutionException {\n     this.conf \u003d conf;\n     dockerClient \u003d new DockerClient(conf);\n+    allowedNetworks.clear();\n+    allowedNetworks.addAll(Arrays.asList(\n+        conf.getStrings(YarnConfiguration.NM_DOCKER_ALLOWED_CONTAINER_NETWORKS,\n+            YarnConfiguration.DEFAULT_NM_DOCKER_ALLOWED_CONTAINER_NETWORKS)));\n+    defaultNetwork \u003d conf.get(\n+        YarnConfiguration.NM_DOCKER_DEFAULT_CONTAINER_NETWORK,\n+        YarnConfiguration.DEFAULT_NM_DOCKER_DEFAULT_CONTAINER_NETWORK);\n+\n+    if(!allowedNetworks.contains(defaultNetwork)) {\n+      String message \u003d \"Default network: \" + defaultNetwork\n+          + \" is not in the set of allowed networks: \" + allowedNetworks;\n+\n+      if (LOG.isWarnEnabled()) {\n+        LOG.warn(message + \". Please check \"\n+            + \"configuration\");\n+      }\n+\n+      throw new ContainerExecutionException(message);\n+    }\n+\n     privilegedContainersAcl \u003d new AccessControlList(conf.get(\n         YarnConfiguration.NM_DOCKER_PRIVILEGED_CONTAINERS_ACL,\n         YarnConfiguration.DEFAULT_NM_DOCKER_PRIVILEGED_CONTAINERS_ACL));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(Configuration conf)\n      throws ContainerExecutionException {\n    this.conf \u003d conf;\n    dockerClient \u003d new DockerClient(conf);\n    allowedNetworks.clear();\n    allowedNetworks.addAll(Arrays.asList(\n        conf.getStrings(YarnConfiguration.NM_DOCKER_ALLOWED_CONTAINER_NETWORKS,\n            YarnConfiguration.DEFAULT_NM_DOCKER_ALLOWED_CONTAINER_NETWORKS)));\n    defaultNetwork \u003d conf.get(\n        YarnConfiguration.NM_DOCKER_DEFAULT_CONTAINER_NETWORK,\n        YarnConfiguration.DEFAULT_NM_DOCKER_DEFAULT_CONTAINER_NETWORK);\n\n    if(!allowedNetworks.contains(defaultNetwork)) {\n      String message \u003d \"Default network: \" + defaultNetwork\n          + \" is not in the set of allowed networks: \" + allowedNetworks;\n\n      if (LOG.isWarnEnabled()) {\n        LOG.warn(message + \". Please check \"\n            + \"configuration\");\n      }\n\n      throw new ContainerExecutionException(message);\n    }\n\n    privilegedContainersAcl \u003d new AccessControlList(conf.get(\n        YarnConfiguration.NM_DOCKER_PRIVILEGED_CONTAINERS_ACL,\n        YarnConfiguration.DEFAULT_NM_DOCKER_PRIVILEGED_CONTAINERS_ACL));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "e39ae0e676f77fab216e2281ae946ab8c647733f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4262. Allow whitelisted users to run privileged docker containers. Contributed by Sidharta Seethana.\n",
      "commitDate": "19/10/15 7:49 AM",
      "commitName": "e39ae0e676f77fab216e2281ae946ab8c647733f",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "15/10/15 1:11 AM",
      "commitNameOld": "63020c54c12dffe03a1b3712759ec65c49df3e64",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 4.28,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,5 +1,8 @@\n   public void initialize(Configuration conf)\n       throws ContainerExecutionException {\n     this.conf \u003d conf;\n     dockerClient \u003d new DockerClient(conf);\n+    privilegedContainersAcl \u003d new AccessControlList(conf.get(\n+        YarnConfiguration.NM_DOCKER_PRIVILEGED_CONTAINERS_ACL,\n+        YarnConfiguration.DEFAULT_NM_DOCKER_PRIVILEGED_CONTAINERS_ACL));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(Configuration conf)\n      throws ContainerExecutionException {\n    this.conf \u003d conf;\n    dockerClient \u003d new DockerClient(conf);\n    privilegedContainersAcl \u003d new AccessControlList(conf.get(\n        YarnConfiguration.NM_DOCKER_PRIVILEGED_CONTAINERS_ACL,\n        YarnConfiguration.DEFAULT_NM_DOCKER_PRIVILEGED_CONTAINERS_ACL));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "3e6fce91a471b4a5099de109582e7c6417e8a822": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3853. Add docker container runtime support to LinuxContainterExecutor. Contributed by Sidharta Seethana.\n",
      "commitDate": "27/07/15 11:57 AM",
      "commitName": "3e6fce91a471b4a5099de109582e7c6417e8a822",
      "commitAuthor": "Varun Vasudev",
      "diff": "@@ -0,0 +1,5 @@\n+  public void initialize(Configuration conf)\n+      throws ContainerExecutionException {\n+    this.conf \u003d conf;\n+    dockerClient \u003d new DockerClient(conf);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(Configuration conf)\n      throws ContainerExecutionException {\n    this.conf \u003d conf;\n    dockerClient \u003d new DockerClient(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java"
    }
  }
}