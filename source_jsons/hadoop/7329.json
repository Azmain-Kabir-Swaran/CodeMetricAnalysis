{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RemoteNameNodeInfo.java",
  "functionName": "getRemoteNameNodes",
  "functionId": "getRemoteNameNodes___conf-Configuration__nsId-String",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ha/RemoteNameNodeInfo.java",
  "functionStartLine": 45,
  "functionEndLine": 67,
  "numCommitsSeen": 3,
  "timeTaken": 2545,
  "changeHistory": [
    "65a941008d4bbf906772399d3f035f2a0da5abfa",
    "aa4b6fbe754ab7e3cf8ee106598d550f6e14783e",
    "49dfad942970459297f72632ed8dfd353e0c86de"
  ],
  "changeHistoryShort": {
    "65a941008d4bbf906772399d3f035f2a0da5abfa": "Ybodychange",
    "aa4b6fbe754ab7e3cf8ee106598d550f6e14783e": "Ybodychange",
    "49dfad942970459297f72632ed8dfd353e0c86de": "Yintroduced"
  },
  "changeHistoryDetails": {
    "65a941008d4bbf906772399d3f035f2a0da5abfa": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HDFS-10391. Always enable NameNode service RPC port. Contributed by Gergely Novak.\"\n\nThis reverts commit aa4b6fbe754ab7e3cf8ee106598d550f6e14783e.\n",
      "commitDate": "14/09/17 11:17 AM",
      "commitName": "65a941008d4bbf906772399d3f035f2a0da5abfa",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "09/09/17 8:40 AM",
      "commitNameOld": "aa4b6fbe754ab7e3cf8ee106598d550f6e14783e",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 5.11,
      "commitsBetweenForRepo": 81,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   public static List\u003cRemoteNameNodeInfo\u003e getRemoteNameNodes(Configuration conf, String nsId)\n       throws IOException {\n     // there is only a single NN configured (and no federation) so we don\u0027t have any more NNs\n     if (nsId \u003d\u003d null) {\n       return Collections.emptyList();\n     }\n     List\u003cConfiguration\u003e otherNodes \u003d HAUtil.getConfForOtherNodes(conf);\n     List\u003cRemoteNameNodeInfo\u003e nns \u003d new ArrayList\u003cRemoteNameNodeInfo\u003e();\n \n     for (Configuration otherNode : otherNodes) {\n       String otherNNId \u003d HAUtil.getNameNodeId(otherNode, nsId);\n       // don\u0027t do any validation here as in some cases, it can be overwritten later\n-      InetSocketAddress otherIpcAddr \u003d NameNode.getServiceAddress(otherNode);\n+      InetSocketAddress otherIpcAddr \u003d NameNode.getServiceAddress(otherNode, true);\n \n \n       final String scheme \u003d DFSUtil.getHttpClientScheme(conf);\n       URL otherHttpAddr \u003d DFSUtil.getInfoServerWithDefaultHost(otherIpcAddr.getHostName(),\n           otherNode, scheme).toURL();\n \n       nns.add(new RemoteNameNodeInfo(otherNode, otherNNId, otherIpcAddr, otherHttpAddr));\n     }\n     return nns;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static List\u003cRemoteNameNodeInfo\u003e getRemoteNameNodes(Configuration conf, String nsId)\n      throws IOException {\n    // there is only a single NN configured (and no federation) so we don\u0027t have any more NNs\n    if (nsId \u003d\u003d null) {\n      return Collections.emptyList();\n    }\n    List\u003cConfiguration\u003e otherNodes \u003d HAUtil.getConfForOtherNodes(conf);\n    List\u003cRemoteNameNodeInfo\u003e nns \u003d new ArrayList\u003cRemoteNameNodeInfo\u003e();\n\n    for (Configuration otherNode : otherNodes) {\n      String otherNNId \u003d HAUtil.getNameNodeId(otherNode, nsId);\n      // don\u0027t do any validation here as in some cases, it can be overwritten later\n      InetSocketAddress otherIpcAddr \u003d NameNode.getServiceAddress(otherNode, true);\n\n\n      final String scheme \u003d DFSUtil.getHttpClientScheme(conf);\n      URL otherHttpAddr \u003d DFSUtil.getInfoServerWithDefaultHost(otherIpcAddr.getHostName(),\n          otherNode, scheme).toURL();\n\n      nns.add(new RemoteNameNodeInfo(otherNode, otherNNId, otherIpcAddr, otherHttpAddr));\n    }\n    return nns;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ha/RemoteNameNodeInfo.java",
      "extendedDetails": {}
    },
    "aa4b6fbe754ab7e3cf8ee106598d550f6e14783e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10391. Always enable NameNode service RPC port. Contributed by Gergely Novak.\n",
      "commitDate": "09/09/17 8:40 AM",
      "commitName": "aa4b6fbe754ab7e3cf8ee106598d550f6e14783e",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "23/06/15 5:26 PM",
      "commitNameOld": "49dfad942970459297f72632ed8dfd353e0c86de",
      "commitAuthorOld": "Aaron T. Myers",
      "daysBetweenCommits": 808.64,
      "commitsBetweenForRepo": 5325,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   public static List\u003cRemoteNameNodeInfo\u003e getRemoteNameNodes(Configuration conf, String nsId)\n       throws IOException {\n     // there is only a single NN configured (and no federation) so we don\u0027t have any more NNs\n     if (nsId \u003d\u003d null) {\n       return Collections.emptyList();\n     }\n     List\u003cConfiguration\u003e otherNodes \u003d HAUtil.getConfForOtherNodes(conf);\n     List\u003cRemoteNameNodeInfo\u003e nns \u003d new ArrayList\u003cRemoteNameNodeInfo\u003e();\n \n     for (Configuration otherNode : otherNodes) {\n       String otherNNId \u003d HAUtil.getNameNodeId(otherNode, nsId);\n       // don\u0027t do any validation here as in some cases, it can be overwritten later\n-      InetSocketAddress otherIpcAddr \u003d NameNode.getServiceAddress(otherNode, true);\n+      InetSocketAddress otherIpcAddr \u003d NameNode.getServiceAddress(otherNode);\n \n \n       final String scheme \u003d DFSUtil.getHttpClientScheme(conf);\n       URL otherHttpAddr \u003d DFSUtil.getInfoServerWithDefaultHost(otherIpcAddr.getHostName(),\n           otherNode, scheme).toURL();\n \n       nns.add(new RemoteNameNodeInfo(otherNode, otherNNId, otherIpcAddr, otherHttpAddr));\n     }\n     return nns;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static List\u003cRemoteNameNodeInfo\u003e getRemoteNameNodes(Configuration conf, String nsId)\n      throws IOException {\n    // there is only a single NN configured (and no federation) so we don\u0027t have any more NNs\n    if (nsId \u003d\u003d null) {\n      return Collections.emptyList();\n    }\n    List\u003cConfiguration\u003e otherNodes \u003d HAUtil.getConfForOtherNodes(conf);\n    List\u003cRemoteNameNodeInfo\u003e nns \u003d new ArrayList\u003cRemoteNameNodeInfo\u003e();\n\n    for (Configuration otherNode : otherNodes) {\n      String otherNNId \u003d HAUtil.getNameNodeId(otherNode, nsId);\n      // don\u0027t do any validation here as in some cases, it can be overwritten later\n      InetSocketAddress otherIpcAddr \u003d NameNode.getServiceAddress(otherNode);\n\n\n      final String scheme \u003d DFSUtil.getHttpClientScheme(conf);\n      URL otherHttpAddr \u003d DFSUtil.getInfoServerWithDefaultHost(otherIpcAddr.getHostName(),\n          otherNode, scheme).toURL();\n\n      nns.add(new RemoteNameNodeInfo(otherNode, otherNNId, otherIpcAddr, otherHttpAddr));\n    }\n    return nns;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ha/RemoteNameNodeInfo.java",
      "extendedDetails": {}
    },
    "49dfad942970459297f72632ed8dfd353e0c86de": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-6440. Support more than 2 NameNodes. Contributed by Jesse Yates.\n",
      "commitDate": "23/06/15 5:26 PM",
      "commitName": "49dfad942970459297f72632ed8dfd353e0c86de",
      "commitAuthor": "Aaron T. Myers",
      "diff": "@@ -0,0 +1,23 @@\n+  public static List\u003cRemoteNameNodeInfo\u003e getRemoteNameNodes(Configuration conf, String nsId)\n+      throws IOException {\n+    // there is only a single NN configured (and no federation) so we don\u0027t have any more NNs\n+    if (nsId \u003d\u003d null) {\n+      return Collections.emptyList();\n+    }\n+    List\u003cConfiguration\u003e otherNodes \u003d HAUtil.getConfForOtherNodes(conf);\n+    List\u003cRemoteNameNodeInfo\u003e nns \u003d new ArrayList\u003cRemoteNameNodeInfo\u003e();\n+\n+    for (Configuration otherNode : otherNodes) {\n+      String otherNNId \u003d HAUtil.getNameNodeId(otherNode, nsId);\n+      // don\u0027t do any validation here as in some cases, it can be overwritten later\n+      InetSocketAddress otherIpcAddr \u003d NameNode.getServiceAddress(otherNode, true);\n+\n+\n+      final String scheme \u003d DFSUtil.getHttpClientScheme(conf);\n+      URL otherHttpAddr \u003d DFSUtil.getInfoServerWithDefaultHost(otherIpcAddr.getHostName(),\n+          otherNode, scheme).toURL();\n+\n+      nns.add(new RemoteNameNodeInfo(otherNode, otherNNId, otherIpcAddr, otherHttpAddr));\n+    }\n+    return nns;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static List\u003cRemoteNameNodeInfo\u003e getRemoteNameNodes(Configuration conf, String nsId)\n      throws IOException {\n    // there is only a single NN configured (and no federation) so we don\u0027t have any more NNs\n    if (nsId \u003d\u003d null) {\n      return Collections.emptyList();\n    }\n    List\u003cConfiguration\u003e otherNodes \u003d HAUtil.getConfForOtherNodes(conf);\n    List\u003cRemoteNameNodeInfo\u003e nns \u003d new ArrayList\u003cRemoteNameNodeInfo\u003e();\n\n    for (Configuration otherNode : otherNodes) {\n      String otherNNId \u003d HAUtil.getNameNodeId(otherNode, nsId);\n      // don\u0027t do any validation here as in some cases, it can be overwritten later\n      InetSocketAddress otherIpcAddr \u003d NameNode.getServiceAddress(otherNode, true);\n\n\n      final String scheme \u003d DFSUtil.getHttpClientScheme(conf);\n      URL otherHttpAddr \u003d DFSUtil.getInfoServerWithDefaultHost(otherIpcAddr.getHostName(),\n          otherNode, scheme).toURL();\n\n      nns.add(new RemoteNameNodeInfo(otherNode, otherNNId, otherIpcAddr, otherHttpAddr));\n    }\n    return nns;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ha/RemoteNameNodeInfo.java"
    }
  }
}