{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DatanodeAdminManager.java",
  "functionName": "activate",
  "functionId": "activate___conf-Configuration",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeAdminManager.java",
  "functionStartLine": 103,
  "functionEndLine": 159,
  "numCommitsSeen": 41,
  "timeTaken": 5422,
  "changeHistory": [
    "8dace8ff3a921686c90934b76e5e9b24da34129b",
    "c93cb6790e0f1c64efd03d859f907a0522010894",
    "79df1e750ef558afed6d166ce225a23061b36aed",
    "d37dc5d1b8e022a7085118a2e7066623483c293f",
    "a3990ca41415515b986a41dacefceee1f05622f8",
    "6ee0d32b98bc3aa5ed42859f1325d5a14fd1722a"
  ],
  "changeHistoryShort": {
    "8dace8ff3a921686c90934b76e5e9b24da34129b": "Ybodychange",
    "c93cb6790e0f1c64efd03d859f907a0522010894": "Ybodychange",
    "79df1e750ef558afed6d166ce225a23061b36aed": "Ymultichange(Yfilerename,Ybodychange)",
    "d37dc5d1b8e022a7085118a2e7066623483c293f": "Ybodychange",
    "a3990ca41415515b986a41dacefceee1f05622f8": "Ybodychange",
    "6ee0d32b98bc3aa5ed42859f1325d5a14fd1722a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8dace8ff3a921686c90934b76e5e9b24da34129b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15328. Use DFSConfigKeys  MONITOR_CLASS_DEFAULT  constant. Contributed by bianqi.\n",
      "commitDate": "03/05/20 11:29 AM",
      "commitName": "8dace8ff3a921686c90934b76e5e9b24da34129b",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "10/12/19 5:16 PM",
      "commitNameOld": "c93cb6790e0f1c64efd03d859f907a0522010894",
      "commitAuthorOld": "Stephen O\u0027Donnell",
      "daysBetweenCommits": 144.72,
      "commitsBetweenForRepo": 469,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,57 @@\n   void activate(Configuration conf) {\n     final int intervalSecs \u003d (int) conf.getTimeDuration(\n         DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_INTERVAL_KEY,\n         DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_INTERVAL_DEFAULT,\n         TimeUnit.SECONDS);\n     checkArgument(intervalSecs \u003e\u003d 0, \"Cannot set a negative \" +\n         \"value for \" + DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_INTERVAL_KEY);\n \n     int blocksPerInterval \u003d conf.getInt(\n         DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_KEY,\n         DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_DEFAULT);\n \n     final String deprecatedKey \u003d\n         \"dfs.namenode.decommission.nodes.per.interval\";\n     final String strNodes \u003d conf.get(deprecatedKey);\n     if (strNodes !\u003d null) {\n       LOG.warn(\"Deprecated configuration key {} will be ignored.\",\n           deprecatedKey);\n       LOG.warn(\"Please update your configuration to use {} instead.\",\n           DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_KEY);\n     }\n \n     checkArgument(blocksPerInterval \u003e 0,\n         \"Must set a positive value for \"\n         + DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_KEY);\n \n     final int maxConcurrentTrackedNodes \u003d conf.getInt(\n         DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_MAX_CONCURRENT_TRACKED_NODES,\n         DFSConfigKeys\n             .DFS_NAMENODE_DECOMMISSION_MAX_CONCURRENT_TRACKED_NODES_DEFAULT);\n     checkArgument(maxConcurrentTrackedNodes \u003e\u003d 0, \"Cannot set a negative \" +\n         \"value for \"\n         + DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_MAX_CONCURRENT_TRACKED_NODES);\n \n     Class cls \u003d null;\n     try {\n       cls \u003d conf.getClass(\n           DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_MONITOR_CLASS,\n-          DatanodeAdminDefaultMonitor.class);\n+          Class.forName(DFSConfigKeys\n+                  .DFS_NAMENODE_DECOMMISSION_MONITOR_CLASS_DEFAULT));\n       monitor \u003d\n           (DatanodeAdminMonitorInterface)ReflectionUtils.newInstance(cls, conf);\n       monitor.setBlockManager(blockManager);\n       monitor.setNameSystem(namesystem);\n       monitor.setDatanodeAdminManager(this);\n     } catch (Exception e) {\n       throw new RuntimeException(\"Unable to create the Decommission monitor \" +\n           \"from \"+cls, e);\n     }\n     executor.scheduleAtFixedRate(monitor, intervalSecs, intervalSecs,\n         TimeUnit.SECONDS);\n \n     LOG.debug(\"Activating DatanodeAdminManager with interval {} seconds, \" +\n             \"{} max blocks per interval, \" +\n             \"{} max concurrently tracked nodes.\", intervalSecs,\n         blocksPerInterval, maxConcurrentTrackedNodes);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void activate(Configuration conf) {\n    final int intervalSecs \u003d (int) conf.getTimeDuration(\n        DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_INTERVAL_KEY,\n        DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_INTERVAL_DEFAULT,\n        TimeUnit.SECONDS);\n    checkArgument(intervalSecs \u003e\u003d 0, \"Cannot set a negative \" +\n        \"value for \" + DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_INTERVAL_KEY);\n\n    int blocksPerInterval \u003d conf.getInt(\n        DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_KEY,\n        DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_DEFAULT);\n\n    final String deprecatedKey \u003d\n        \"dfs.namenode.decommission.nodes.per.interval\";\n    final String strNodes \u003d conf.get(deprecatedKey);\n    if (strNodes !\u003d null) {\n      LOG.warn(\"Deprecated configuration key {} will be ignored.\",\n          deprecatedKey);\n      LOG.warn(\"Please update your configuration to use {} instead.\",\n          DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_KEY);\n    }\n\n    checkArgument(blocksPerInterval \u003e 0,\n        \"Must set a positive value for \"\n        + DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_KEY);\n\n    final int maxConcurrentTrackedNodes \u003d conf.getInt(\n        DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_MAX_CONCURRENT_TRACKED_NODES,\n        DFSConfigKeys\n            .DFS_NAMENODE_DECOMMISSION_MAX_CONCURRENT_TRACKED_NODES_DEFAULT);\n    checkArgument(maxConcurrentTrackedNodes \u003e\u003d 0, \"Cannot set a negative \" +\n        \"value for \"\n        + DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_MAX_CONCURRENT_TRACKED_NODES);\n\n    Class cls \u003d null;\n    try {\n      cls \u003d conf.getClass(\n          DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_MONITOR_CLASS,\n          Class.forName(DFSConfigKeys\n                  .DFS_NAMENODE_DECOMMISSION_MONITOR_CLASS_DEFAULT));\n      monitor \u003d\n          (DatanodeAdminMonitorInterface)ReflectionUtils.newInstance(cls, conf);\n      monitor.setBlockManager(blockManager);\n      monitor.setNameSystem(namesystem);\n      monitor.setDatanodeAdminManager(this);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Unable to create the Decommission monitor \" +\n          \"from \"+cls, e);\n    }\n    executor.scheduleAtFixedRate(monitor, intervalSecs, intervalSecs,\n        TimeUnit.SECONDS);\n\n    LOG.debug(\"Activating DatanodeAdminManager with interval {} seconds, \" +\n            \"{} max blocks per interval, \" +\n            \"{} max concurrently tracked nodes.\", intervalSecs,\n        blocksPerInterval, maxConcurrentTrackedNodes);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeAdminManager.java",
      "extendedDetails": {}
    },
    "c93cb6790e0f1c64efd03d859f907a0522010894": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14854. Create improved decommission monitor implementation. Contributed by Stephen O\u0027Donnell.\n\nReviewed-by: Inigo Goiri \u003cinigoiri@apache.org\u003e\nSigned-off-by: Wei-Chiu Chuang \u003cweichiu@apache.org\u003e\n",
      "commitDate": "10/12/19 5:16 PM",
      "commitName": "c93cb6790e0f1c64efd03d859f907a0522010894",
      "commitAuthor": "Stephen O\u0027Donnell",
      "commitDateOld": "19/10/19 5:40 PM",
      "commitNameOld": "447f46d9628db54e77f88e2d109587cc7dfd6154",
      "commitAuthorOld": "Ayush Saxena",
      "daysBetweenCommits": 52.02,
      "commitsBetweenForRepo": 198,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,56 @@\n   void activate(Configuration conf) {\n     final int intervalSecs \u003d (int) conf.getTimeDuration(\n         DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_INTERVAL_KEY,\n         DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_INTERVAL_DEFAULT,\n         TimeUnit.SECONDS);\n     checkArgument(intervalSecs \u003e\u003d 0, \"Cannot set a negative \" +\n         \"value for \" + DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_INTERVAL_KEY);\n \n     int blocksPerInterval \u003d conf.getInt(\n         DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_KEY,\n         DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_DEFAULT);\n \n     final String deprecatedKey \u003d\n         \"dfs.namenode.decommission.nodes.per.interval\";\n     final String strNodes \u003d conf.get(deprecatedKey);\n     if (strNodes !\u003d null) {\n       LOG.warn(\"Deprecated configuration key {} will be ignored.\",\n           deprecatedKey);\n       LOG.warn(\"Please update your configuration to use {} instead.\",\n           DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_KEY);\n     }\n \n     checkArgument(blocksPerInterval \u003e 0,\n         \"Must set a positive value for \"\n         + DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_KEY);\n \n     final int maxConcurrentTrackedNodes \u003d conf.getInt(\n         DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_MAX_CONCURRENT_TRACKED_NODES,\n         DFSConfigKeys\n             .DFS_NAMENODE_DECOMMISSION_MAX_CONCURRENT_TRACKED_NODES_DEFAULT);\n     checkArgument(maxConcurrentTrackedNodes \u003e\u003d 0, \"Cannot set a negative \" +\n         \"value for \"\n         + DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_MAX_CONCURRENT_TRACKED_NODES);\n \n-    monitor \u003d new Monitor(blocksPerInterval, maxConcurrentTrackedNodes);\n+    Class cls \u003d null;\n+    try {\n+      cls \u003d conf.getClass(\n+          DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_MONITOR_CLASS,\n+          DatanodeAdminDefaultMonitor.class);\n+      monitor \u003d\n+          (DatanodeAdminMonitorInterface)ReflectionUtils.newInstance(cls, conf);\n+      monitor.setBlockManager(blockManager);\n+      monitor.setNameSystem(namesystem);\n+      monitor.setDatanodeAdminManager(this);\n+    } catch (Exception e) {\n+      throw new RuntimeException(\"Unable to create the Decommission monitor \" +\n+          \"from \"+cls, e);\n+    }\n     executor.scheduleAtFixedRate(monitor, intervalSecs, intervalSecs,\n         TimeUnit.SECONDS);\n \n     LOG.debug(\"Activating DatanodeAdminManager with interval {} seconds, \" +\n             \"{} max blocks per interval, \" +\n             \"{} max concurrently tracked nodes.\", intervalSecs,\n         blocksPerInterval, maxConcurrentTrackedNodes);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void activate(Configuration conf) {\n    final int intervalSecs \u003d (int) conf.getTimeDuration(\n        DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_INTERVAL_KEY,\n        DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_INTERVAL_DEFAULT,\n        TimeUnit.SECONDS);\n    checkArgument(intervalSecs \u003e\u003d 0, \"Cannot set a negative \" +\n        \"value for \" + DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_INTERVAL_KEY);\n\n    int blocksPerInterval \u003d conf.getInt(\n        DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_KEY,\n        DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_DEFAULT);\n\n    final String deprecatedKey \u003d\n        \"dfs.namenode.decommission.nodes.per.interval\";\n    final String strNodes \u003d conf.get(deprecatedKey);\n    if (strNodes !\u003d null) {\n      LOG.warn(\"Deprecated configuration key {} will be ignored.\",\n          deprecatedKey);\n      LOG.warn(\"Please update your configuration to use {} instead.\",\n          DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_KEY);\n    }\n\n    checkArgument(blocksPerInterval \u003e 0,\n        \"Must set a positive value for \"\n        + DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_KEY);\n\n    final int maxConcurrentTrackedNodes \u003d conf.getInt(\n        DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_MAX_CONCURRENT_TRACKED_NODES,\n        DFSConfigKeys\n            .DFS_NAMENODE_DECOMMISSION_MAX_CONCURRENT_TRACKED_NODES_DEFAULT);\n    checkArgument(maxConcurrentTrackedNodes \u003e\u003d 0, \"Cannot set a negative \" +\n        \"value for \"\n        + DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_MAX_CONCURRENT_TRACKED_NODES);\n\n    Class cls \u003d null;\n    try {\n      cls \u003d conf.getClass(\n          DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_MONITOR_CLASS,\n          DatanodeAdminDefaultMonitor.class);\n      monitor \u003d\n          (DatanodeAdminMonitorInterface)ReflectionUtils.newInstance(cls, conf);\n      monitor.setBlockManager(blockManager);\n      monitor.setNameSystem(namesystem);\n      monitor.setDatanodeAdminManager(this);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Unable to create the Decommission monitor \" +\n          \"from \"+cls, e);\n    }\n    executor.scheduleAtFixedRate(monitor, intervalSecs, intervalSecs,\n        TimeUnit.SECONDS);\n\n    LOG.debug(\"Activating DatanodeAdminManager with interval {} seconds, \" +\n            \"{} max blocks per interval, \" +\n            \"{} max concurrently tracked nodes.\", intervalSecs,\n        blocksPerInterval, maxConcurrentTrackedNodes);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeAdminManager.java",
      "extendedDetails": {}
    },
    "79df1e750ef558afed6d166ce225a23061b36aed": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "HDFS-9388. Decommission related code to support Maintenance State for datanodes.\n",
      "commitDate": "02/08/17 2:22 PM",
      "commitName": "79df1e750ef558afed6d166ce225a23061b36aed",
      "commitAuthor": "Manoj Govindassamy",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "HDFS-9388. Decommission related code to support Maintenance State for datanodes.\n",
          "commitDate": "02/08/17 2:22 PM",
          "commitName": "79df1e750ef558afed6d166ce225a23061b36aed",
          "commitAuthor": "Manoj Govindassamy",
          "commitDateOld": "02/08/17 12:12 PM",
          "commitNameOld": "12e44e7bdaf53d3720a89d32f0cc2717241bd6b2",
          "commitAuthorOld": "Chris Douglas",
          "daysBetweenCommits": 0.09,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,43 @@\n   void activate(Configuration conf) {\n     final int intervalSecs \u003d (int) conf.getTimeDuration(\n         DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_INTERVAL_KEY,\n         DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_INTERVAL_DEFAULT,\n         TimeUnit.SECONDS);\n     checkArgument(intervalSecs \u003e\u003d 0, \"Cannot set a negative \" +\n         \"value for \" + DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_INTERVAL_KEY);\n \n     int blocksPerInterval \u003d conf.getInt(\n         DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_KEY,\n         DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_DEFAULT);\n \n     final String deprecatedKey \u003d\n         \"dfs.namenode.decommission.nodes.per.interval\";\n     final String strNodes \u003d conf.get(deprecatedKey);\n     if (strNodes !\u003d null) {\n       LOG.warn(\"Deprecated configuration key {} will be ignored.\",\n           deprecatedKey);\n-      LOG.warn(\"Please update your configuration to use {} instead.\", \n+      LOG.warn(\"Please update your configuration to use {} instead.\",\n           DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_KEY);\n     }\n \n     checkArgument(blocksPerInterval \u003e 0,\n         \"Must set a positive value for \"\n         + DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_KEY);\n \n     final int maxConcurrentTrackedNodes \u003d conf.getInt(\n         DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_MAX_CONCURRENT_TRACKED_NODES,\n-        DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_MAX_CONCURRENT_TRACKED_NODES_DEFAULT);\n+        DFSConfigKeys\n+            .DFS_NAMENODE_DECOMMISSION_MAX_CONCURRENT_TRACKED_NODES_DEFAULT);\n     checkArgument(maxConcurrentTrackedNodes \u003e\u003d 0, \"Cannot set a negative \" +\n         \"value for \"\n         + DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_MAX_CONCURRENT_TRACKED_NODES);\n \n     monitor \u003d new Monitor(blocksPerInterval, maxConcurrentTrackedNodes);\n     executor.scheduleAtFixedRate(monitor, intervalSecs, intervalSecs,\n         TimeUnit.SECONDS);\n \n-    LOG.debug(\"Activating DecommissionManager with interval {} seconds, \" +\n+    LOG.debug(\"Activating DatanodeAdminManager with interval {} seconds, \" +\n             \"{} max blocks per interval, \" +\n             \"{} max concurrently tracked nodes.\", intervalSecs,\n         blocksPerInterval, maxConcurrentTrackedNodes);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void activate(Configuration conf) {\n    final int intervalSecs \u003d (int) conf.getTimeDuration(\n        DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_INTERVAL_KEY,\n        DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_INTERVAL_DEFAULT,\n        TimeUnit.SECONDS);\n    checkArgument(intervalSecs \u003e\u003d 0, \"Cannot set a negative \" +\n        \"value for \" + DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_INTERVAL_KEY);\n\n    int blocksPerInterval \u003d conf.getInt(\n        DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_KEY,\n        DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_DEFAULT);\n\n    final String deprecatedKey \u003d\n        \"dfs.namenode.decommission.nodes.per.interval\";\n    final String strNodes \u003d conf.get(deprecatedKey);\n    if (strNodes !\u003d null) {\n      LOG.warn(\"Deprecated configuration key {} will be ignored.\",\n          deprecatedKey);\n      LOG.warn(\"Please update your configuration to use {} instead.\",\n          DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_KEY);\n    }\n\n    checkArgument(blocksPerInterval \u003e 0,\n        \"Must set a positive value for \"\n        + DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_KEY);\n\n    final int maxConcurrentTrackedNodes \u003d conf.getInt(\n        DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_MAX_CONCURRENT_TRACKED_NODES,\n        DFSConfigKeys\n            .DFS_NAMENODE_DECOMMISSION_MAX_CONCURRENT_TRACKED_NODES_DEFAULT);\n    checkArgument(maxConcurrentTrackedNodes \u003e\u003d 0, \"Cannot set a negative \" +\n        \"value for \"\n        + DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_MAX_CONCURRENT_TRACKED_NODES);\n\n    monitor \u003d new Monitor(blocksPerInterval, maxConcurrentTrackedNodes);\n    executor.scheduleAtFixedRate(monitor, intervalSecs, intervalSecs,\n        TimeUnit.SECONDS);\n\n    LOG.debug(\"Activating DatanodeAdminManager with interval {} seconds, \" +\n            \"{} max blocks per interval, \" +\n            \"{} max concurrently tracked nodes.\", intervalSecs,\n        blocksPerInterval, maxConcurrentTrackedNodes);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeAdminManager.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DecommissionManager.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeAdminManager.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-9388. Decommission related code to support Maintenance State for datanodes.\n",
          "commitDate": "02/08/17 2:22 PM",
          "commitName": "79df1e750ef558afed6d166ce225a23061b36aed",
          "commitAuthor": "Manoj Govindassamy",
          "commitDateOld": "02/08/17 12:12 PM",
          "commitNameOld": "12e44e7bdaf53d3720a89d32f0cc2717241bd6b2",
          "commitAuthorOld": "Chris Douglas",
          "daysBetweenCommits": 0.09,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,43 @@\n   void activate(Configuration conf) {\n     final int intervalSecs \u003d (int) conf.getTimeDuration(\n         DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_INTERVAL_KEY,\n         DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_INTERVAL_DEFAULT,\n         TimeUnit.SECONDS);\n     checkArgument(intervalSecs \u003e\u003d 0, \"Cannot set a negative \" +\n         \"value for \" + DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_INTERVAL_KEY);\n \n     int blocksPerInterval \u003d conf.getInt(\n         DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_KEY,\n         DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_DEFAULT);\n \n     final String deprecatedKey \u003d\n         \"dfs.namenode.decommission.nodes.per.interval\";\n     final String strNodes \u003d conf.get(deprecatedKey);\n     if (strNodes !\u003d null) {\n       LOG.warn(\"Deprecated configuration key {} will be ignored.\",\n           deprecatedKey);\n-      LOG.warn(\"Please update your configuration to use {} instead.\", \n+      LOG.warn(\"Please update your configuration to use {} instead.\",\n           DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_KEY);\n     }\n \n     checkArgument(blocksPerInterval \u003e 0,\n         \"Must set a positive value for \"\n         + DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_KEY);\n \n     final int maxConcurrentTrackedNodes \u003d conf.getInt(\n         DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_MAX_CONCURRENT_TRACKED_NODES,\n-        DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_MAX_CONCURRENT_TRACKED_NODES_DEFAULT);\n+        DFSConfigKeys\n+            .DFS_NAMENODE_DECOMMISSION_MAX_CONCURRENT_TRACKED_NODES_DEFAULT);\n     checkArgument(maxConcurrentTrackedNodes \u003e\u003d 0, \"Cannot set a negative \" +\n         \"value for \"\n         + DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_MAX_CONCURRENT_TRACKED_NODES);\n \n     monitor \u003d new Monitor(blocksPerInterval, maxConcurrentTrackedNodes);\n     executor.scheduleAtFixedRate(monitor, intervalSecs, intervalSecs,\n         TimeUnit.SECONDS);\n \n-    LOG.debug(\"Activating DecommissionManager with interval {} seconds, \" +\n+    LOG.debug(\"Activating DatanodeAdminManager with interval {} seconds, \" +\n             \"{} max blocks per interval, \" +\n             \"{} max concurrently tracked nodes.\", intervalSecs,\n         blocksPerInterval, maxConcurrentTrackedNodes);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void activate(Configuration conf) {\n    final int intervalSecs \u003d (int) conf.getTimeDuration(\n        DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_INTERVAL_KEY,\n        DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_INTERVAL_DEFAULT,\n        TimeUnit.SECONDS);\n    checkArgument(intervalSecs \u003e\u003d 0, \"Cannot set a negative \" +\n        \"value for \" + DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_INTERVAL_KEY);\n\n    int blocksPerInterval \u003d conf.getInt(\n        DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_KEY,\n        DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_DEFAULT);\n\n    final String deprecatedKey \u003d\n        \"dfs.namenode.decommission.nodes.per.interval\";\n    final String strNodes \u003d conf.get(deprecatedKey);\n    if (strNodes !\u003d null) {\n      LOG.warn(\"Deprecated configuration key {} will be ignored.\",\n          deprecatedKey);\n      LOG.warn(\"Please update your configuration to use {} instead.\",\n          DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_KEY);\n    }\n\n    checkArgument(blocksPerInterval \u003e 0,\n        \"Must set a positive value for \"\n        + DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_KEY);\n\n    final int maxConcurrentTrackedNodes \u003d conf.getInt(\n        DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_MAX_CONCURRENT_TRACKED_NODES,\n        DFSConfigKeys\n            .DFS_NAMENODE_DECOMMISSION_MAX_CONCURRENT_TRACKED_NODES_DEFAULT);\n    checkArgument(maxConcurrentTrackedNodes \u003e\u003d 0, \"Cannot set a negative \" +\n        \"value for \"\n        + DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_MAX_CONCURRENT_TRACKED_NODES);\n\n    monitor \u003d new Monitor(blocksPerInterval, maxConcurrentTrackedNodes);\n    executor.scheduleAtFixedRate(monitor, intervalSecs, intervalSecs,\n        TimeUnit.SECONDS);\n\n    LOG.debug(\"Activating DatanodeAdminManager with interval {} seconds, \" +\n            \"{} max blocks per interval, \" +\n            \"{} max concurrently tracked nodes.\", intervalSecs,\n        blocksPerInterval, maxConcurrentTrackedNodes);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeAdminManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "d37dc5d1b8e022a7085118a2e7066623483c293f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9847. HDFS configuration should accept time units. Contributed by Yiqun Lin\n",
      "commitDate": "06/09/16 10:38 AM",
      "commitName": "d37dc5d1b8e022a7085118a2e7066623483c293f",
      "commitAuthor": "Chris Douglas",
      "commitDateOld": "30/08/16 2:00 PM",
      "commitNameOld": "9dcbdbdb5a34d85910707f81ebc1bb1f81c99978",
      "commitAuthorOld": "Ming Ma",
      "daysBetweenCommits": 6.86,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,42 @@\n   void activate(Configuration conf) {\n-    final int intervalSecs \u003d\n-        conf.getInt(DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_INTERVAL_KEY,\n-            DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_INTERVAL_DEFAULT);\n+    final int intervalSecs \u003d (int) conf.getTimeDuration(\n+        DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_INTERVAL_KEY,\n+        DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_INTERVAL_DEFAULT,\n+        TimeUnit.SECONDS);\n     checkArgument(intervalSecs \u003e\u003d 0, \"Cannot set a negative \" +\n         \"value for \" + DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_INTERVAL_KEY);\n \n     int blocksPerInterval \u003d conf.getInt(\n         DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_KEY,\n         DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_DEFAULT);\n \n     final String deprecatedKey \u003d\n         \"dfs.namenode.decommission.nodes.per.interval\";\n     final String strNodes \u003d conf.get(deprecatedKey);\n     if (strNodes !\u003d null) {\n       LOG.warn(\"Deprecated configuration key {} will be ignored.\",\n           deprecatedKey);\n       LOG.warn(\"Please update your configuration to use {} instead.\", \n           DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_KEY);\n     }\n \n     checkArgument(blocksPerInterval \u003e 0,\n         \"Must set a positive value for \"\n         + DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_KEY);\n \n     final int maxConcurrentTrackedNodes \u003d conf.getInt(\n         DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_MAX_CONCURRENT_TRACKED_NODES,\n         DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_MAX_CONCURRENT_TRACKED_NODES_DEFAULT);\n     checkArgument(maxConcurrentTrackedNodes \u003e\u003d 0, \"Cannot set a negative \" +\n         \"value for \"\n         + DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_MAX_CONCURRENT_TRACKED_NODES);\n \n     monitor \u003d new Monitor(blocksPerInterval, maxConcurrentTrackedNodes);\n     executor.scheduleAtFixedRate(monitor, intervalSecs, intervalSecs,\n         TimeUnit.SECONDS);\n \n     LOG.debug(\"Activating DecommissionManager with interval {} seconds, \" +\n             \"{} max blocks per interval, \" +\n             \"{} max concurrently tracked nodes.\", intervalSecs,\n         blocksPerInterval, maxConcurrentTrackedNodes);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void activate(Configuration conf) {\n    final int intervalSecs \u003d (int) conf.getTimeDuration(\n        DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_INTERVAL_KEY,\n        DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_INTERVAL_DEFAULT,\n        TimeUnit.SECONDS);\n    checkArgument(intervalSecs \u003e\u003d 0, \"Cannot set a negative \" +\n        \"value for \" + DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_INTERVAL_KEY);\n\n    int blocksPerInterval \u003d conf.getInt(\n        DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_KEY,\n        DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_DEFAULT);\n\n    final String deprecatedKey \u003d\n        \"dfs.namenode.decommission.nodes.per.interval\";\n    final String strNodes \u003d conf.get(deprecatedKey);\n    if (strNodes !\u003d null) {\n      LOG.warn(\"Deprecated configuration key {} will be ignored.\",\n          deprecatedKey);\n      LOG.warn(\"Please update your configuration to use {} instead.\", \n          DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_KEY);\n    }\n\n    checkArgument(blocksPerInterval \u003e 0,\n        \"Must set a positive value for \"\n        + DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_KEY);\n\n    final int maxConcurrentTrackedNodes \u003d conf.getInt(\n        DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_MAX_CONCURRENT_TRACKED_NODES,\n        DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_MAX_CONCURRENT_TRACKED_NODES_DEFAULT);\n    checkArgument(maxConcurrentTrackedNodes \u003e\u003d 0, \"Cannot set a negative \" +\n        \"value for \"\n        + DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_MAX_CONCURRENT_TRACKED_NODES);\n\n    monitor \u003d new Monitor(blocksPerInterval, maxConcurrentTrackedNodes);\n    executor.scheduleAtFixedRate(monitor, intervalSecs, intervalSecs,\n        TimeUnit.SECONDS);\n\n    LOG.debug(\"Activating DecommissionManager with interval {} seconds, \" +\n            \"{} max blocks per interval, \" +\n            \"{} max concurrently tracked nodes.\", intervalSecs,\n        blocksPerInterval, maxConcurrentTrackedNodes);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DecommissionManager.java",
      "extendedDetails": {}
    },
    "a3990ca41415515b986a41dacefceee1f05622f8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8591. Remove support for deprecated configuration key dfs.namenode.decommission.nodes.per.interval.\n",
      "commitDate": "16/06/15 10:03 AM",
      "commitName": "a3990ca41415515b986a41dacefceee1f05622f8",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "27/05/15 3:42 PM",
      "commitNameOld": "4928f5473394981829e5ffd4b16ea0801baf5c45",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 19.76,
      "commitsBetweenForRepo": 139,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,41 @@\n   void activate(Configuration conf) {\n     final int intervalSecs \u003d\n         conf.getInt(DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_INTERVAL_KEY,\n             DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_INTERVAL_DEFAULT);\n     checkArgument(intervalSecs \u003e\u003d 0, \"Cannot set a negative \" +\n         \"value for \" + DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_INTERVAL_KEY);\n \n-    // By default, the new configuration key overrides the deprecated one.\n-    // No # node limit is set.\n     int blocksPerInterval \u003d conf.getInt(\n         DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_KEY,\n         DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_DEFAULT);\n-    int nodesPerInterval \u003d Integer.MAX_VALUE;\n \n-    // If the expected key isn\u0027t present and the deprecated one is, \n-    // use the deprecated one into the new one. This overrides the \n-    // default.\n-    //\n-    // Also print a deprecation warning.\n     final String deprecatedKey \u003d\n         \"dfs.namenode.decommission.nodes.per.interval\";\n     final String strNodes \u003d conf.get(deprecatedKey);\n     if (strNodes !\u003d null) {\n-      nodesPerInterval \u003d Integer.parseInt(strNodes);\n-      blocksPerInterval \u003d Integer.MAX_VALUE;\n-      LOG.warn(\"Using deprecated configuration key {} value of {}.\",\n-          deprecatedKey, nodesPerInterval); \n+      LOG.warn(\"Deprecated configuration key {} will be ignored.\",\n+          deprecatedKey);\n       LOG.warn(\"Please update your configuration to use {} instead.\", \n           DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_KEY);\n     }\n+\n     checkArgument(blocksPerInterval \u003e 0,\n         \"Must set a positive value for \"\n         + DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_KEY);\n \n     final int maxConcurrentTrackedNodes \u003d conf.getInt(\n         DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_MAX_CONCURRENT_TRACKED_NODES,\n         DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_MAX_CONCURRENT_TRACKED_NODES_DEFAULT);\n     checkArgument(maxConcurrentTrackedNodes \u003e\u003d 0, \"Cannot set a negative \" +\n         \"value for \"\n         + DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_MAX_CONCURRENT_TRACKED_NODES);\n \n-    monitor \u003d new Monitor(blocksPerInterval, \n-        nodesPerInterval, maxConcurrentTrackedNodes);\n+    monitor \u003d new Monitor(blocksPerInterval, maxConcurrentTrackedNodes);\n     executor.scheduleAtFixedRate(monitor, intervalSecs, intervalSecs,\n         TimeUnit.SECONDS);\n \n     LOG.debug(\"Activating DecommissionManager with interval {} seconds, \" +\n-            \"{} max blocks per interval, {} max nodes per interval, \" +\n+            \"{} max blocks per interval, \" +\n             \"{} max concurrently tracked nodes.\", intervalSecs,\n-        blocksPerInterval, nodesPerInterval, maxConcurrentTrackedNodes);\n+        blocksPerInterval, maxConcurrentTrackedNodes);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void activate(Configuration conf) {\n    final int intervalSecs \u003d\n        conf.getInt(DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_INTERVAL_KEY,\n            DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_INTERVAL_DEFAULT);\n    checkArgument(intervalSecs \u003e\u003d 0, \"Cannot set a negative \" +\n        \"value for \" + DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_INTERVAL_KEY);\n\n    int blocksPerInterval \u003d conf.getInt(\n        DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_KEY,\n        DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_DEFAULT);\n\n    final String deprecatedKey \u003d\n        \"dfs.namenode.decommission.nodes.per.interval\";\n    final String strNodes \u003d conf.get(deprecatedKey);\n    if (strNodes !\u003d null) {\n      LOG.warn(\"Deprecated configuration key {} will be ignored.\",\n          deprecatedKey);\n      LOG.warn(\"Please update your configuration to use {} instead.\", \n          DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_KEY);\n    }\n\n    checkArgument(blocksPerInterval \u003e 0,\n        \"Must set a positive value for \"\n        + DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_KEY);\n\n    final int maxConcurrentTrackedNodes \u003d conf.getInt(\n        DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_MAX_CONCURRENT_TRACKED_NODES,\n        DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_MAX_CONCURRENT_TRACKED_NODES_DEFAULT);\n    checkArgument(maxConcurrentTrackedNodes \u003e\u003d 0, \"Cannot set a negative \" +\n        \"value for \"\n        + DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_MAX_CONCURRENT_TRACKED_NODES);\n\n    monitor \u003d new Monitor(blocksPerInterval, maxConcurrentTrackedNodes);\n    executor.scheduleAtFixedRate(monitor, intervalSecs, intervalSecs,\n        TimeUnit.SECONDS);\n\n    LOG.debug(\"Activating DecommissionManager with interval {} seconds, \" +\n            \"{} max blocks per interval, \" +\n            \"{} max concurrently tracked nodes.\", intervalSecs,\n        blocksPerInterval, maxConcurrentTrackedNodes);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DecommissionManager.java",
      "extendedDetails": {}
    },
    "6ee0d32b98bc3aa5ed42859f1325d5a14fd1722a": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-7411. Change decommission logic to throttle by blocks rather\nthan nodes in each interval. Contributed by Andrew Wang\n",
      "commitDate": "08/03/15 6:31 PM",
      "commitName": "6ee0d32b98bc3aa5ed42859f1325d5a14fd1722a",
      "commitAuthor": "Chris Douglas",
      "diff": "@@ -0,0 +1,51 @@\n+  void activate(Configuration conf) {\n+    final int intervalSecs \u003d\n+        conf.getInt(DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_INTERVAL_KEY,\n+            DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_INTERVAL_DEFAULT);\n+    checkArgument(intervalSecs \u003e\u003d 0, \"Cannot set a negative \" +\n+        \"value for \" + DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_INTERVAL_KEY);\n+\n+    // By default, the new configuration key overrides the deprecated one.\n+    // No # node limit is set.\n+    int blocksPerInterval \u003d conf.getInt(\n+        DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_KEY,\n+        DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_DEFAULT);\n+    int nodesPerInterval \u003d Integer.MAX_VALUE;\n+\n+    // If the expected key isn\u0027t present and the deprecated one is, \n+    // use the deprecated one into the new one. This overrides the \n+    // default.\n+    //\n+    // Also print a deprecation warning.\n+    final String deprecatedKey \u003d\n+        \"dfs.namenode.decommission.nodes.per.interval\";\n+    final String strNodes \u003d conf.get(deprecatedKey);\n+    if (strNodes !\u003d null) {\n+      nodesPerInterval \u003d Integer.parseInt(strNodes);\n+      blocksPerInterval \u003d Integer.MAX_VALUE;\n+      LOG.warn(\"Using deprecated configuration key {} value of {}.\",\n+          deprecatedKey, nodesPerInterval); \n+      LOG.warn(\"Please update your configuration to use {} instead.\", \n+          DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_KEY);\n+    }\n+    checkArgument(blocksPerInterval \u003e 0,\n+        \"Must set a positive value for \"\n+        + DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_KEY);\n+\n+    final int maxConcurrentTrackedNodes \u003d conf.getInt(\n+        DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_MAX_CONCURRENT_TRACKED_NODES,\n+        DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_MAX_CONCURRENT_TRACKED_NODES_DEFAULT);\n+    checkArgument(maxConcurrentTrackedNodes \u003e\u003d 0, \"Cannot set a negative \" +\n+        \"value for \"\n+        + DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_MAX_CONCURRENT_TRACKED_NODES);\n+\n+    monitor \u003d new Monitor(blocksPerInterval, \n+        nodesPerInterval, maxConcurrentTrackedNodes);\n+    executor.scheduleAtFixedRate(monitor, intervalSecs, intervalSecs,\n+        TimeUnit.SECONDS);\n+\n+    LOG.debug(\"Activating DecommissionManager with interval {} seconds, \" +\n+            \"{} max blocks per interval, {} max nodes per interval, \" +\n+            \"{} max concurrently tracked nodes.\", intervalSecs,\n+        blocksPerInterval, nodesPerInterval, maxConcurrentTrackedNodes);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  void activate(Configuration conf) {\n    final int intervalSecs \u003d\n        conf.getInt(DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_INTERVAL_KEY,\n            DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_INTERVAL_DEFAULT);\n    checkArgument(intervalSecs \u003e\u003d 0, \"Cannot set a negative \" +\n        \"value for \" + DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_INTERVAL_KEY);\n\n    // By default, the new configuration key overrides the deprecated one.\n    // No # node limit is set.\n    int blocksPerInterval \u003d conf.getInt(\n        DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_KEY,\n        DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_DEFAULT);\n    int nodesPerInterval \u003d Integer.MAX_VALUE;\n\n    // If the expected key isn\u0027t present and the deprecated one is, \n    // use the deprecated one into the new one. This overrides the \n    // default.\n    //\n    // Also print a deprecation warning.\n    final String deprecatedKey \u003d\n        \"dfs.namenode.decommission.nodes.per.interval\";\n    final String strNodes \u003d conf.get(deprecatedKey);\n    if (strNodes !\u003d null) {\n      nodesPerInterval \u003d Integer.parseInt(strNodes);\n      blocksPerInterval \u003d Integer.MAX_VALUE;\n      LOG.warn(\"Using deprecated configuration key {} value of {}.\",\n          deprecatedKey, nodesPerInterval); \n      LOG.warn(\"Please update your configuration to use {} instead.\", \n          DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_KEY);\n    }\n    checkArgument(blocksPerInterval \u003e 0,\n        \"Must set a positive value for \"\n        + DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_BLOCKS_PER_INTERVAL_KEY);\n\n    final int maxConcurrentTrackedNodes \u003d conf.getInt(\n        DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_MAX_CONCURRENT_TRACKED_NODES,\n        DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_MAX_CONCURRENT_TRACKED_NODES_DEFAULT);\n    checkArgument(maxConcurrentTrackedNodes \u003e\u003d 0, \"Cannot set a negative \" +\n        \"value for \"\n        + DFSConfigKeys.DFS_NAMENODE_DECOMMISSION_MAX_CONCURRENT_TRACKED_NODES);\n\n    monitor \u003d new Monitor(blocksPerInterval, \n        nodesPerInterval, maxConcurrentTrackedNodes);\n    executor.scheduleAtFixedRate(monitor, intervalSecs, intervalSecs,\n        TimeUnit.SECONDS);\n\n    LOG.debug(\"Activating DecommissionManager with interval {} seconds, \" +\n            \"{} max blocks per interval, {} max nodes per interval, \" +\n            \"{} max concurrently tracked nodes.\", intervalSecs,\n        blocksPerInterval, nodesPerInterval, maxConcurrentTrackedNodes);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DecommissionManager.java"
    }
  }
}