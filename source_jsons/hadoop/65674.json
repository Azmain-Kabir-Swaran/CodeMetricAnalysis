{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DirListingMetadata.java",
  "functionName": "checkChildPath",
  "functionId": "checkChildPath___childPath-Path",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DirListingMetadata.java",
  "functionStartLine": 294,
  "functionEndLine": 315,
  "numCommitsSeen": 8,
  "timeTaken": 2346,
  "changeHistory": [
    "6d0bffe17eadedd60d4599427248b0db4a7c5502",
    "7f783970364930cc461d1a73833bc58cdd10553e",
    "d7152332b32a575c3a92e3f4c44b95e58462528d",
    "621b43e254afaff708cd6fc4698b29628f6abc33"
  ],
  "changeHistoryShort": {
    "6d0bffe17eadedd60d4599427248b0db4a7c5502": "Ybodychange",
    "7f783970364930cc461d1a73833bc58cdd10553e": "Ybodychange",
    "d7152332b32a575c3a92e3f4c44b95e58462528d": "Ybodychange",
    "621b43e254afaff708cd6fc4698b29628f6abc33": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6d0bffe17eadedd60d4599427248b0db4a7c5502": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14556. S3A to support Delegation Tokens.\n\nContributed by Steve Loughran and Daryn Sharp.\n",
      "commitDate": "14/01/19 9:59 AM",
      "commitName": "6d0bffe17eadedd60d4599427248b0db4a7c5502",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "07/01/19 9:51 PM",
      "commitNameOld": "7f783970364930cc461d1a73833bc58cdd10553e",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 6.51,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,22 @@\n   private void checkChildPath(Path childPath) {\n     checkPathAbsolute(childPath);\n \n     // If this dir\u0027s path has host (and thus scheme), so must its children\n     URI parentUri \u003d path.toUri();\n+    URI childUri \u003d childPath.toUri();\n     if (parentUri.getHost() !\u003d null) {\n-      URI childUri \u003d childPath.toUri();\n       Preconditions.checkNotNull(childUri.getHost(), \"Expected non-null URI \" +\n           \"host: %s\", childUri);\n       Preconditions.checkArgument(\n           childUri.getHost().equals(parentUri.getHost()),\n           \"childUri %s and parentUri %s must have the same host\",\n           childUri, parentUri);\n       Preconditions.checkNotNull(childUri.getScheme(), \"No scheme in path %s\",\n           childUri);\n     }\n     Preconditions.checkArgument(!childPath.isRoot(),\n         \"childPath cannot be the root path: %s\", childPath);\n-    Preconditions.checkArgument(childPath.getParent().equals(path),\n+    Preconditions.checkArgument(parentUri.getPath().equals(\n+        childPath.getParent().toUri().getPath()),\n         \"childPath %s must be a child of %s\", childPath, path);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void checkChildPath(Path childPath) {\n    checkPathAbsolute(childPath);\n\n    // If this dir\u0027s path has host (and thus scheme), so must its children\n    URI parentUri \u003d path.toUri();\n    URI childUri \u003d childPath.toUri();\n    if (parentUri.getHost() !\u003d null) {\n      Preconditions.checkNotNull(childUri.getHost(), \"Expected non-null URI \" +\n          \"host: %s\", childUri);\n      Preconditions.checkArgument(\n          childUri.getHost().equals(parentUri.getHost()),\n          \"childUri %s and parentUri %s must have the same host\",\n          childUri, parentUri);\n      Preconditions.checkNotNull(childUri.getScheme(), \"No scheme in path %s\",\n          childUri);\n    }\n    Preconditions.checkArgument(!childPath.isRoot(),\n        \"childPath cannot be the root path: %s\", childPath);\n    Preconditions.checkArgument(parentUri.getPath().equals(\n        childPath.getParent().toUri().getPath()),\n        \"childPath %s must be a child of %s\", childPath, path);\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DirListingMetadata.java",
      "extendedDetails": {}
    },
    "7f783970364930cc461d1a73833bc58cdd10553e": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-14556. S3A to support Delegation Tokens.\"\n\nThis reverts commit d7152332b32a575c3a92e3f4c44b95e58462528d.\n",
      "commitDate": "07/01/19 9:51 PM",
      "commitName": "7f783970364930cc461d1a73833bc58cdd10553e",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "07/01/19 5:18 AM",
      "commitNameOld": "d7152332b32a575c3a92e3f4c44b95e58462528d",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 0.69,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,21 @@\n   private void checkChildPath(Path childPath) {\n     checkPathAbsolute(childPath);\n \n     // If this dir\u0027s path has host (and thus scheme), so must its children\n     URI parentUri \u003d path.toUri();\n-    URI childUri \u003d childPath.toUri();\n     if (parentUri.getHost() !\u003d null) {\n+      URI childUri \u003d childPath.toUri();\n       Preconditions.checkNotNull(childUri.getHost(), \"Expected non-null URI \" +\n           \"host: %s\", childUri);\n       Preconditions.checkArgument(\n           childUri.getHost().equals(parentUri.getHost()),\n           \"childUri %s and parentUri %s must have the same host\",\n           childUri, parentUri);\n       Preconditions.checkNotNull(childUri.getScheme(), \"No scheme in path %s\",\n           childUri);\n     }\n     Preconditions.checkArgument(!childPath.isRoot(),\n         \"childPath cannot be the root path: %s\", childPath);\n-    Preconditions.checkArgument(parentUri.getPath().equals(\n-        childPath.getParent().toUri().getPath()),\n+    Preconditions.checkArgument(childPath.getParent().equals(path),\n         \"childPath %s must be a child of %s\", childPath, path);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void checkChildPath(Path childPath) {\n    checkPathAbsolute(childPath);\n\n    // If this dir\u0027s path has host (and thus scheme), so must its children\n    URI parentUri \u003d path.toUri();\n    if (parentUri.getHost() !\u003d null) {\n      URI childUri \u003d childPath.toUri();\n      Preconditions.checkNotNull(childUri.getHost(), \"Expected non-null URI \" +\n          \"host: %s\", childUri);\n      Preconditions.checkArgument(\n          childUri.getHost().equals(parentUri.getHost()),\n          \"childUri %s and parentUri %s must have the same host\",\n          childUri, parentUri);\n      Preconditions.checkNotNull(childUri.getScheme(), \"No scheme in path %s\",\n          childUri);\n    }\n    Preconditions.checkArgument(!childPath.isRoot(),\n        \"childPath cannot be the root path: %s\", childPath);\n    Preconditions.checkArgument(childPath.getParent().equals(path),\n        \"childPath %s must be a child of %s\", childPath, path);\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DirListingMetadata.java",
      "extendedDetails": {}
    },
    "d7152332b32a575c3a92e3f4c44b95e58462528d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14556. S3A to support Delegation Tokens.\n\nContributed by Steve Loughran.\n",
      "commitDate": "07/01/19 5:18 AM",
      "commitName": "d7152332b32a575c3a92e3f4c44b95e58462528d",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "02/10/18 9:22 PM",
      "commitNameOld": "046b8768af8a07a9e10ce43f538d6ac16e7fa5f3",
      "commitAuthorOld": "Aaron Fabbri",
      "daysBetweenCommits": 96.37,
      "commitsBetweenForRepo": 729,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,22 @@\n   private void checkChildPath(Path childPath) {\n     checkPathAbsolute(childPath);\n \n     // If this dir\u0027s path has host (and thus scheme), so must its children\n     URI parentUri \u003d path.toUri();\n+    URI childUri \u003d childPath.toUri();\n     if (parentUri.getHost() !\u003d null) {\n-      URI childUri \u003d childPath.toUri();\n       Preconditions.checkNotNull(childUri.getHost(), \"Expected non-null URI \" +\n           \"host: %s\", childUri);\n       Preconditions.checkArgument(\n           childUri.getHost().equals(parentUri.getHost()),\n           \"childUri %s and parentUri %s must have the same host\",\n           childUri, parentUri);\n       Preconditions.checkNotNull(childUri.getScheme(), \"No scheme in path %s\",\n           childUri);\n     }\n     Preconditions.checkArgument(!childPath.isRoot(),\n         \"childPath cannot be the root path: %s\", childPath);\n-    Preconditions.checkArgument(childPath.getParent().equals(path),\n+    Preconditions.checkArgument(parentUri.getPath().equals(\n+        childPath.getParent().toUri().getPath()),\n         \"childPath %s must be a child of %s\", childPath, path);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void checkChildPath(Path childPath) {\n    checkPathAbsolute(childPath);\n\n    // If this dir\u0027s path has host (and thus scheme), so must its children\n    URI parentUri \u003d path.toUri();\n    URI childUri \u003d childPath.toUri();\n    if (parentUri.getHost() !\u003d null) {\n      Preconditions.checkNotNull(childUri.getHost(), \"Expected non-null URI \" +\n          \"host: %s\", childUri);\n      Preconditions.checkArgument(\n          childUri.getHost().equals(parentUri.getHost()),\n          \"childUri %s and parentUri %s must have the same host\",\n          childUri, parentUri);\n      Preconditions.checkNotNull(childUri.getScheme(), \"No scheme in path %s\",\n          childUri);\n    }\n    Preconditions.checkArgument(!childPath.isRoot(),\n        \"childPath cannot be the root path: %s\", childPath);\n    Preconditions.checkArgument(parentUri.getPath().equals(\n        childPath.getParent().toUri().getPath()),\n        \"childPath %s must be a child of %s\", childPath, path);\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DirListingMetadata.java",
      "extendedDetails": {}
    },
    "621b43e254afaff708cd6fc4698b29628f6abc33": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-13345 HS3Guard: Improved Consistency for S3A.\nContributed by: Chris Nauroth, Aaron Fabbri, Mingliang Liu, Lei (Eddy) Xu,\nSean Mackrory, Steve Loughran and others.\n",
      "commitDate": "01/09/17 6:13 AM",
      "commitName": "621b43e254afaff708cd6fc4698b29628f6abc33",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,21 @@\n+  private void checkChildPath(Path childPath) {\n+    checkPathAbsolute(childPath);\n+\n+    // If this dir\u0027s path has host (and thus scheme), so must its children\n+    URI parentUri \u003d path.toUri();\n+    if (parentUri.getHost() !\u003d null) {\n+      URI childUri \u003d childPath.toUri();\n+      Preconditions.checkNotNull(childUri.getHost(), \"Expected non-null URI \" +\n+          \"host: %s\", childUri);\n+      Preconditions.checkArgument(\n+          childUri.getHost().equals(parentUri.getHost()),\n+          \"childUri %s and parentUri %s must have the same host\",\n+          childUri, parentUri);\n+      Preconditions.checkNotNull(childUri.getScheme(), \"No scheme in path %s\",\n+          childUri);\n+    }\n+    Preconditions.checkArgument(!childPath.isRoot(),\n+        \"childPath cannot be the root path: %s\", childPath);\n+    Preconditions.checkArgument(childPath.getParent().equals(path),\n+        \"childPath %s must be a child of %s\", childPath, path);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void checkChildPath(Path childPath) {\n    checkPathAbsolute(childPath);\n\n    // If this dir\u0027s path has host (and thus scheme), so must its children\n    URI parentUri \u003d path.toUri();\n    if (parentUri.getHost() !\u003d null) {\n      URI childUri \u003d childPath.toUri();\n      Preconditions.checkNotNull(childUri.getHost(), \"Expected non-null URI \" +\n          \"host: %s\", childUri);\n      Preconditions.checkArgument(\n          childUri.getHost().equals(parentUri.getHost()),\n          \"childUri %s and parentUri %s must have the same host\",\n          childUri, parentUri);\n      Preconditions.checkNotNull(childUri.getScheme(), \"No scheme in path %s\",\n          childUri);\n    }\n    Preconditions.checkArgument(!childPath.isRoot(),\n        \"childPath cannot be the root path: %s\", childPath);\n    Preconditions.checkArgument(childPath.getParent().equals(path),\n        \"childPath %s must be a child of %s\", childPath, path);\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DirListingMetadata.java"
    }
  }
}