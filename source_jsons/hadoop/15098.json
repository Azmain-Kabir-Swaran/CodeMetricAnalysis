{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "OfflineImageReconstructor.java",
  "functionName": "createINodeFileBuilder",
  "functionId": "createINodeFileBuilder___node-Node",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/OfflineImageReconstructor.java",
  "functionStartLine": 650,
  "functionEndLine": 736,
  "numCommitsSeen": 15,
  "timeTaken": 2093,
  "changeHistory": [
    "5ca6ef0c268b1acb3abf12505b9ead6fe7e38a23",
    "05391c1845639d4f01da8e5df966e2dc2682f2ca"
  ],
  "changeHistoryShort": {
    "5ca6ef0c268b1acb3abf12505b9ead6fe7e38a23": "Ybodychange",
    "05391c1845639d4f01da8e5df966e2dc2682f2ca": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5ca6ef0c268b1acb3abf12505b9ead6fe7e38a23": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10983. OIV tool should make an EC file explicit. Contributed by Manoj Govindassamy.\n",
      "commitDate": "08/03/17 3:36 PM",
      "commitName": "5ca6ef0c268b1acb3abf12505b9ead6fe7e38a23",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "25/02/17 2:38 PM",
      "commitNameOld": "05391c1845639d4f01da8e5df966e2dc2682f2ca",
      "commitAuthorOld": "Wei-Chiu Chuang",
      "daysBetweenCommits": 11.04,
      "commitsBetweenForRepo": 73,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,83 +1,87 @@\n   private INodeSection.INodeFile.Builder createINodeFileBuilder(Node node)\n       throws IOException {\n     INodeSection.INodeFile.Builder bld \u003d INodeSection.INodeFile.newBuilder();\n     Integer ival \u003d node.removeChildInt(SECTION_REPLICATION);\n     if (ival !\u003d null) {\n       bld.setReplication(ival);\n     }\n     Long lval \u003d node.removeChildLong(INODE_SECTION_MTIME);\n     if (lval !\u003d null) {\n       bld.setModificationTime(lval);\n     }\n     lval \u003d node.removeChildLong(INODE_SECTION_ATIME);\n     if (lval !\u003d null) {\n       bld.setAccessTime(lval);\n     }\n     lval \u003d node.removeChildLong(INODE_SECTION_PREFERRED_BLOCK_SIZE);\n     if (lval !\u003d null) {\n       bld.setPreferredBlockSize(lval);\n     }\n     String perm \u003d node.removeChildStr(INODE_SECTION_PERMISSION);\n     if (perm !\u003d null) {\n       bld.setPermission(permissionXmlToU64(perm));\n     }\n     Node blocks \u003d node.removeChild(INODE_SECTION_BLOCKS);\n     if (blocks !\u003d null) {\n       while (true) {\n         Node block \u003d blocks.removeChild(INODE_SECTION_BLOCK);\n         if (block \u003d\u003d null) {\n           break;\n         }\n         bld.addBlocks(createBlockBuilder(block));\n       }\n     }\n     Node fileUnderConstruction \u003d\n         node.removeChild(INODE_SECTION_FILE_UNDER_CONSTRUCTION);\n     if (fileUnderConstruction !\u003d null) {\n       INodeSection.FileUnderConstructionFeature.Builder fb \u003d\n           INodeSection.FileUnderConstructionFeature.newBuilder();\n       String clientName \u003d\n           fileUnderConstruction.removeChildStr(INODE_SECTION_CLIENT_NAME);\n       if (clientName \u003d\u003d null) {\n         throw new IOException(\"\u003cfile-under-construction\u003e found without \" +\n             \"\u003cclientName\u003e\");\n       }\n       fb.setClientName(clientName);\n       String clientMachine \u003d\n           fileUnderConstruction\n                   .removeChildStr(INODE_SECTION_CLIENT_MACHINE);\n       if (clientMachine \u003d\u003d null) {\n         throw new IOException(\"\u003cfile-under-construction\u003e found without \" +\n             \"\u003cclientMachine\u003e\");\n       }\n       fb.setClientMachine(clientMachine);\n       bld.setFileUC(fb);\n     }\n     Node acls \u003d node.removeChild(INODE_SECTION_ACLS);\n     if (acls !\u003d null) {\n       bld.setAcl(aclXmlToProto(acls));\n     }\n     Node xattrs \u003d node.removeChild(INODE_SECTION_XATTRS);\n     if (xattrs !\u003d null) {\n       bld.setXAttrs(xattrsXmlToProto(xattrs));\n     }\n     ival \u003d node.removeChildInt(INODE_SECTION_STORAGE_POLICY_ID);\n     if (ival !\u003d null) {\n       bld.setStoragePolicyID(ival);\n     }\n     String blockType \u003d node.removeChildStr(INODE_SECTION_BLOCK_TYPE);\n     if(blockType !\u003d null) {\n       switch (blockType) {\n       case \"CONTIGUOUS\":\n         bld.setBlockType(HdfsProtos.BlockTypeProto.CONTIGUOUS);\n         break;\n       case \"STRIPED\":\n         bld.setBlockType(HdfsProtos.BlockTypeProto.STRIPED);\n+        ival \u003d node.removeChildInt(INODE_SECTION_EC_POLICY_ID);\n+        if (ival !\u003d null) {\n+          bld.setErasureCodingPolicyID(ival);\n+        }\n         break;\n       default:\n         throw new IOException(\"INode XML found with unknown \u003cblocktype\u003e \" +\n             blockType);\n       }\n     }\n     return bld;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private INodeSection.INodeFile.Builder createINodeFileBuilder(Node node)\n      throws IOException {\n    INodeSection.INodeFile.Builder bld \u003d INodeSection.INodeFile.newBuilder();\n    Integer ival \u003d node.removeChildInt(SECTION_REPLICATION);\n    if (ival !\u003d null) {\n      bld.setReplication(ival);\n    }\n    Long lval \u003d node.removeChildLong(INODE_SECTION_MTIME);\n    if (lval !\u003d null) {\n      bld.setModificationTime(lval);\n    }\n    lval \u003d node.removeChildLong(INODE_SECTION_ATIME);\n    if (lval !\u003d null) {\n      bld.setAccessTime(lval);\n    }\n    lval \u003d node.removeChildLong(INODE_SECTION_PREFERRED_BLOCK_SIZE);\n    if (lval !\u003d null) {\n      bld.setPreferredBlockSize(lval);\n    }\n    String perm \u003d node.removeChildStr(INODE_SECTION_PERMISSION);\n    if (perm !\u003d null) {\n      bld.setPermission(permissionXmlToU64(perm));\n    }\n    Node blocks \u003d node.removeChild(INODE_SECTION_BLOCKS);\n    if (blocks !\u003d null) {\n      while (true) {\n        Node block \u003d blocks.removeChild(INODE_SECTION_BLOCK);\n        if (block \u003d\u003d null) {\n          break;\n        }\n        bld.addBlocks(createBlockBuilder(block));\n      }\n    }\n    Node fileUnderConstruction \u003d\n        node.removeChild(INODE_SECTION_FILE_UNDER_CONSTRUCTION);\n    if (fileUnderConstruction !\u003d null) {\n      INodeSection.FileUnderConstructionFeature.Builder fb \u003d\n          INodeSection.FileUnderConstructionFeature.newBuilder();\n      String clientName \u003d\n          fileUnderConstruction.removeChildStr(INODE_SECTION_CLIENT_NAME);\n      if (clientName \u003d\u003d null) {\n        throw new IOException(\"\u003cfile-under-construction\u003e found without \" +\n            \"\u003cclientName\u003e\");\n      }\n      fb.setClientName(clientName);\n      String clientMachine \u003d\n          fileUnderConstruction\n                  .removeChildStr(INODE_SECTION_CLIENT_MACHINE);\n      if (clientMachine \u003d\u003d null) {\n        throw new IOException(\"\u003cfile-under-construction\u003e found without \" +\n            \"\u003cclientMachine\u003e\");\n      }\n      fb.setClientMachine(clientMachine);\n      bld.setFileUC(fb);\n    }\n    Node acls \u003d node.removeChild(INODE_SECTION_ACLS);\n    if (acls !\u003d null) {\n      bld.setAcl(aclXmlToProto(acls));\n    }\n    Node xattrs \u003d node.removeChild(INODE_SECTION_XATTRS);\n    if (xattrs !\u003d null) {\n      bld.setXAttrs(xattrsXmlToProto(xattrs));\n    }\n    ival \u003d node.removeChildInt(INODE_SECTION_STORAGE_POLICY_ID);\n    if (ival !\u003d null) {\n      bld.setStoragePolicyID(ival);\n    }\n    String blockType \u003d node.removeChildStr(INODE_SECTION_BLOCK_TYPE);\n    if(blockType !\u003d null) {\n      switch (blockType) {\n      case \"CONTIGUOUS\":\n        bld.setBlockType(HdfsProtos.BlockTypeProto.CONTIGUOUS);\n        break;\n      case \"STRIPED\":\n        bld.setBlockType(HdfsProtos.BlockTypeProto.STRIPED);\n        ival \u003d node.removeChildInt(INODE_SECTION_EC_POLICY_ID);\n        if (ival !\u003d null) {\n          bld.setErasureCodingPolicyID(ival);\n        }\n        break;\n      default:\n        throw new IOException(\"INode XML found with unknown \u003cblocktype\u003e \" +\n            blockType);\n      }\n    }\n    return bld;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/OfflineImageReconstructor.java",
      "extendedDetails": {}
    },
    "05391c1845639d4f01da8e5df966e2dc2682f2ca": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-10506. OIV\u0027s ReverseXML processor cannot reconstruct some snapshot details. Contributed by Akira Ajisaka.\n",
      "commitDate": "25/02/17 2:38 PM",
      "commitName": "05391c1845639d4f01da8e5df966e2dc2682f2ca",
      "commitAuthor": "Wei-Chiu Chuang",
      "diff": "@@ -0,0 +1,83 @@\n+  private INodeSection.INodeFile.Builder createINodeFileBuilder(Node node)\n+      throws IOException {\n+    INodeSection.INodeFile.Builder bld \u003d INodeSection.INodeFile.newBuilder();\n+    Integer ival \u003d node.removeChildInt(SECTION_REPLICATION);\n+    if (ival !\u003d null) {\n+      bld.setReplication(ival);\n+    }\n+    Long lval \u003d node.removeChildLong(INODE_SECTION_MTIME);\n+    if (lval !\u003d null) {\n+      bld.setModificationTime(lval);\n+    }\n+    lval \u003d node.removeChildLong(INODE_SECTION_ATIME);\n+    if (lval !\u003d null) {\n+      bld.setAccessTime(lval);\n+    }\n+    lval \u003d node.removeChildLong(INODE_SECTION_PREFERRED_BLOCK_SIZE);\n+    if (lval !\u003d null) {\n+      bld.setPreferredBlockSize(lval);\n+    }\n+    String perm \u003d node.removeChildStr(INODE_SECTION_PERMISSION);\n+    if (perm !\u003d null) {\n+      bld.setPermission(permissionXmlToU64(perm));\n+    }\n+    Node blocks \u003d node.removeChild(INODE_SECTION_BLOCKS);\n+    if (blocks !\u003d null) {\n+      while (true) {\n+        Node block \u003d blocks.removeChild(INODE_SECTION_BLOCK);\n+        if (block \u003d\u003d null) {\n+          break;\n+        }\n+        bld.addBlocks(createBlockBuilder(block));\n+      }\n+    }\n+    Node fileUnderConstruction \u003d\n+        node.removeChild(INODE_SECTION_FILE_UNDER_CONSTRUCTION);\n+    if (fileUnderConstruction !\u003d null) {\n+      INodeSection.FileUnderConstructionFeature.Builder fb \u003d\n+          INodeSection.FileUnderConstructionFeature.newBuilder();\n+      String clientName \u003d\n+          fileUnderConstruction.removeChildStr(INODE_SECTION_CLIENT_NAME);\n+      if (clientName \u003d\u003d null) {\n+        throw new IOException(\"\u003cfile-under-construction\u003e found without \" +\n+            \"\u003cclientName\u003e\");\n+      }\n+      fb.setClientName(clientName);\n+      String clientMachine \u003d\n+          fileUnderConstruction\n+                  .removeChildStr(INODE_SECTION_CLIENT_MACHINE);\n+      if (clientMachine \u003d\u003d null) {\n+        throw new IOException(\"\u003cfile-under-construction\u003e found without \" +\n+            \"\u003cclientMachine\u003e\");\n+      }\n+      fb.setClientMachine(clientMachine);\n+      bld.setFileUC(fb);\n+    }\n+    Node acls \u003d node.removeChild(INODE_SECTION_ACLS);\n+    if (acls !\u003d null) {\n+      bld.setAcl(aclXmlToProto(acls));\n+    }\n+    Node xattrs \u003d node.removeChild(INODE_SECTION_XATTRS);\n+    if (xattrs !\u003d null) {\n+      bld.setXAttrs(xattrsXmlToProto(xattrs));\n+    }\n+    ival \u003d node.removeChildInt(INODE_SECTION_STORAGE_POLICY_ID);\n+    if (ival !\u003d null) {\n+      bld.setStoragePolicyID(ival);\n+    }\n+    String blockType \u003d node.removeChildStr(INODE_SECTION_BLOCK_TYPE);\n+    if(blockType !\u003d null) {\n+      switch (blockType) {\n+      case \"CONTIGUOUS\":\n+        bld.setBlockType(HdfsProtos.BlockTypeProto.CONTIGUOUS);\n+        break;\n+      case \"STRIPED\":\n+        bld.setBlockType(HdfsProtos.BlockTypeProto.STRIPED);\n+        break;\n+      default:\n+        throw new IOException(\"INode XML found with unknown \u003cblocktype\u003e \" +\n+            blockType);\n+      }\n+    }\n+    return bld;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private INodeSection.INodeFile.Builder createINodeFileBuilder(Node node)\n      throws IOException {\n    INodeSection.INodeFile.Builder bld \u003d INodeSection.INodeFile.newBuilder();\n    Integer ival \u003d node.removeChildInt(SECTION_REPLICATION);\n    if (ival !\u003d null) {\n      bld.setReplication(ival);\n    }\n    Long lval \u003d node.removeChildLong(INODE_SECTION_MTIME);\n    if (lval !\u003d null) {\n      bld.setModificationTime(lval);\n    }\n    lval \u003d node.removeChildLong(INODE_SECTION_ATIME);\n    if (lval !\u003d null) {\n      bld.setAccessTime(lval);\n    }\n    lval \u003d node.removeChildLong(INODE_SECTION_PREFERRED_BLOCK_SIZE);\n    if (lval !\u003d null) {\n      bld.setPreferredBlockSize(lval);\n    }\n    String perm \u003d node.removeChildStr(INODE_SECTION_PERMISSION);\n    if (perm !\u003d null) {\n      bld.setPermission(permissionXmlToU64(perm));\n    }\n    Node blocks \u003d node.removeChild(INODE_SECTION_BLOCKS);\n    if (blocks !\u003d null) {\n      while (true) {\n        Node block \u003d blocks.removeChild(INODE_SECTION_BLOCK);\n        if (block \u003d\u003d null) {\n          break;\n        }\n        bld.addBlocks(createBlockBuilder(block));\n      }\n    }\n    Node fileUnderConstruction \u003d\n        node.removeChild(INODE_SECTION_FILE_UNDER_CONSTRUCTION);\n    if (fileUnderConstruction !\u003d null) {\n      INodeSection.FileUnderConstructionFeature.Builder fb \u003d\n          INodeSection.FileUnderConstructionFeature.newBuilder();\n      String clientName \u003d\n          fileUnderConstruction.removeChildStr(INODE_SECTION_CLIENT_NAME);\n      if (clientName \u003d\u003d null) {\n        throw new IOException(\"\u003cfile-under-construction\u003e found without \" +\n            \"\u003cclientName\u003e\");\n      }\n      fb.setClientName(clientName);\n      String clientMachine \u003d\n          fileUnderConstruction\n                  .removeChildStr(INODE_SECTION_CLIENT_MACHINE);\n      if (clientMachine \u003d\u003d null) {\n        throw new IOException(\"\u003cfile-under-construction\u003e found without \" +\n            \"\u003cclientMachine\u003e\");\n      }\n      fb.setClientMachine(clientMachine);\n      bld.setFileUC(fb);\n    }\n    Node acls \u003d node.removeChild(INODE_SECTION_ACLS);\n    if (acls !\u003d null) {\n      bld.setAcl(aclXmlToProto(acls));\n    }\n    Node xattrs \u003d node.removeChild(INODE_SECTION_XATTRS);\n    if (xattrs !\u003d null) {\n      bld.setXAttrs(xattrsXmlToProto(xattrs));\n    }\n    ival \u003d node.removeChildInt(INODE_SECTION_STORAGE_POLICY_ID);\n    if (ival !\u003d null) {\n      bld.setStoragePolicyID(ival);\n    }\n    String blockType \u003d node.removeChildStr(INODE_SECTION_BLOCK_TYPE);\n    if(blockType !\u003d null) {\n      switch (blockType) {\n      case \"CONTIGUOUS\":\n        bld.setBlockType(HdfsProtos.BlockTypeProto.CONTIGUOUS);\n        break;\n      case \"STRIPED\":\n        bld.setBlockType(HdfsProtos.BlockTypeProto.STRIPED);\n        break;\n      default:\n        throw new IOException(\"INode XML found with unknown \u003cblocktype\u003e \" +\n            blockType);\n      }\n    }\n    return bld;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/OfflineImageReconstructor.java"
    }
  }
}