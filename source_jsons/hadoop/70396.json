{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NativeAzureFileSystem.java",
  "functionName": "setOwner",
  "functionId": "setOwner___p-Path__username-String__groupname-String",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
  "functionStartLine": 3513,
  "functionEndLine": 3565,
  "numCommitsSeen": 66,
  "timeTaken": 5053,
  "changeHistory": [
    "45d9568aaaf532a6da11bd7c1844ff81bf66bab1",
    "572cdb54632d8a29c4d9900f9e988ada8e3fe2ec",
    "7d272ea124615c493c60ad454fbd6f144dd3cc24",
    "0cab57223e3f54be17a5f27cefdb6d1da1b073e5",
    "686823529be09bea2a6cecb3503ef722017475bc",
    "52d7d5aa1a303cf70519a61487641211f4267c6f",
    "6b7cd62b8cf12616b13142f2eb2cfc2f25796f0f",
    "8bc93db2e7c64830b6a662f28c8917a9eef4e7c9",
    "0e76f1fceaaaeb66bdb4818f43b9a55fc092bf79",
    "81bc395deb3ba00567dc067d6ca71bacf9e3bc82"
  ],
  "changeHistoryShort": {
    "45d9568aaaf532a6da11bd7c1844ff81bf66bab1": "Ybodychange",
    "572cdb54632d8a29c4d9900f9e988ada8e3fe2ec": "Ybodychange",
    "7d272ea124615c493c60ad454fbd6f144dd3cc24": "Ybodychange",
    "0cab57223e3f54be17a5f27cefdb6d1da1b073e5": "Ybodychange",
    "686823529be09bea2a6cecb3503ef722017475bc": "Ybodychange",
    "52d7d5aa1a303cf70519a61487641211f4267c6f": "Ybodychange",
    "6b7cd62b8cf12616b13142f2eb2cfc2f25796f0f": "Ybodychange",
    "8bc93db2e7c64830b6a662f28c8917a9eef4e7c9": "Ybodychange",
    "0e76f1fceaaaeb66bdb4818f43b9a55fc092bf79": "Ybodychange",
    "81bc395deb3ba00567dc067d6ca71bacf9e3bc82": "Yintroduced"
  },
  "changeHistoryDetails": {
    "45d9568aaaf532a6da11bd7c1844ff81bf66bab1": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15547/ WASB: improve listStatus performance.\nContributed by Thomas Marquardt.\n\n(cherry picked from commit 749fff577ed9afb4ef8a54b8948f74be083cc620)\n",
      "commitDate": "19/07/18 12:31 PM",
      "commitName": "45d9568aaaf532a6da11bd7c1844ff81bf66bab1",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "27/06/18 10:37 PM",
      "commitNameOld": "2b2399d623539ab68e71a38fa9fbfc9a405bddb8",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 21.58,
      "commitsBetweenForRepo": 124,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,53 @@\n   public void setOwner(Path p, String username, String groupname)\n       throws IOException {\n     Path absolutePath \u003d makeAbsolute(p);\n \n     String key \u003d pathToKey(absolutePath);\n     FileMetadata metadata \u003d null;\n \n     try {\n       metadata \u003d store.retrieveMetadata(key);\n     } catch (IOException ex) {\n       Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n \n       if (innerException instanceof StorageException\n           \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n \n         throw new FileNotFoundException(String.format(\"File %s doesn\u0027t exists.\", p));\n       }\n \n       throw ex;\n     }\n \n     if (metadata \u003d\u003d null) {\n       throw new FileNotFoundException(\"File doesn\u0027t exist: \" + p);\n     }\n \n     /* If authorization is enabled, check if the user has privileges\n     *  to change the ownership of file/folder\n     */\n     if (this.azureAuthorization \u0026\u0026 username !\u003d null) {\n       UserGroupInformation currentUgi \u003d UserGroupInformation.getCurrentUser();\n \n       if (!isAllowedUser(currentUgi.getShortUserName(),\n           chownAllowedUsers)) {\n           throw new WasbAuthorizationException(\n             String.format(\"user \u0027%s\u0027 does not have the privilege to change \"\n                 + \"the ownership of files/folders.\",\n                     currentUgi.getShortUserName()));\n       }\n     }\n \n     PermissionStatus newPermissionStatus \u003d new PermissionStatus(\n         username \u003d\u003d null ?\n-            metadata.getPermissionStatus().getUserName() : username,\n+            metadata.getOwner() : username,\n         groupname \u003d\u003d null ?\n-            metadata.getPermissionStatus().getGroupName() : groupname,\n-        metadata.getPermissionStatus().getPermission());\n+            metadata.getGroup() : groupname,\n+        metadata.getPermission());\n     if (metadata.getBlobMaterialization() \u003d\u003d BlobMaterialization.Implicit) {\n       // It\u0027s an implicit folder, need to materialize it.\n       store.storeEmptyFolder(key, newPermissionStatus);\n     } else {\n       store.changePermissionStatus(key, newPermissionStatus);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void setOwner(Path p, String username, String groupname)\n      throws IOException {\n    Path absolutePath \u003d makeAbsolute(p);\n\n    String key \u003d pathToKey(absolutePath);\n    FileMetadata metadata \u003d null;\n\n    try {\n      metadata \u003d store.retrieveMetadata(key);\n    } catch (IOException ex) {\n      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n\n        throw new FileNotFoundException(String.format(\"File %s doesn\u0027t exists.\", p));\n      }\n\n      throw ex;\n    }\n\n    if (metadata \u003d\u003d null) {\n      throw new FileNotFoundException(\"File doesn\u0027t exist: \" + p);\n    }\n\n    /* If authorization is enabled, check if the user has privileges\n    *  to change the ownership of file/folder\n    */\n    if (this.azureAuthorization \u0026\u0026 username !\u003d null) {\n      UserGroupInformation currentUgi \u003d UserGroupInformation.getCurrentUser();\n\n      if (!isAllowedUser(currentUgi.getShortUserName(),\n          chownAllowedUsers)) {\n          throw new WasbAuthorizationException(\n            String.format(\"user \u0027%s\u0027 does not have the privilege to change \"\n                + \"the ownership of files/folders.\",\n                    currentUgi.getShortUserName()));\n      }\n    }\n\n    PermissionStatus newPermissionStatus \u003d new PermissionStatus(\n        username \u003d\u003d null ?\n            metadata.getOwner() : username,\n        groupname \u003d\u003d null ?\n            metadata.getGroup() : groupname,\n        metadata.getPermission());\n    if (metadata.getBlobMaterialization() \u003d\u003d BlobMaterialization.Implicit) {\n      // It\u0027s an implicit folder, need to materialize it.\n      store.storeEmptyFolder(key, newPermissionStatus);\n    } else {\n      store.changePermissionStatus(key, newPermissionStatus);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "572cdb54632d8a29c4d9900f9e988ada8e3fe2ec": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14899. Restrict Access to setPermission operation when authorization is enabled in WASB\nContributed by Kannapiran Srinivasan.\n",
      "commitDate": "06/10/17 9:43 AM",
      "commitName": "572cdb54632d8a29c4d9900f9e988ada8e3fe2ec",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "05/10/17 7:05 AM",
      "commitNameOld": "9288206cb3c1a39044a8e106436987185ef43ddf",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 1.11,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,53 @@\n   public void setOwner(Path p, String username, String groupname)\n       throws IOException {\n     Path absolutePath \u003d makeAbsolute(p);\n \n     String key \u003d pathToKey(absolutePath);\n     FileMetadata metadata \u003d null;\n \n     try {\n       metadata \u003d store.retrieveMetadata(key);\n     } catch (IOException ex) {\n       Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n \n       if (innerException instanceof StorageException\n           \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n \n         throw new FileNotFoundException(String.format(\"File %s doesn\u0027t exists.\", p));\n       }\n \n       throw ex;\n     }\n \n     if (metadata \u003d\u003d null) {\n       throw new FileNotFoundException(\"File doesn\u0027t exist: \" + p);\n     }\n \n     /* If authorization is enabled, check if the user has privileges\n     *  to change the ownership of file/folder\n     */\n     if (this.azureAuthorization \u0026\u0026 username !\u003d null) {\n-      String[] listOfUsers \u003d getConf().getTrimmedStrings(AZURE_CHOWN_USERLIST_PROPERTY_NAME,\n-        AZURE_CHOWN_USERLIST_PROPERTY_DEFAULT_VALUE);\n-      boolean shouldSkipUserCheck \u003d listOfUsers.length \u003d\u003d 1 \u0026\u0026 listOfUsers[0].equals(\"*\");\n-      // skip the check if the chown allowed users config value is set as \u0027*\u0027\n-      if (!shouldSkipUserCheck) {\n-        UserGroupInformation currentUgi \u003d UserGroupInformation.getCurrentUser();\n-        UserGroupInformation actualUgi \u003d currentUgi.getRealUser();\n+      UserGroupInformation currentUgi \u003d UserGroupInformation.getCurrentUser();\n \n-        if (actualUgi \u003d\u003d null) {\n-          actualUgi \u003d currentUgi;\n-        }\n-\n-        List\u003cString\u003e userList \u003d Arrays.asList(listOfUsers);\n-        if (userList.contains(\"*\")) {\n-          throw new IllegalArgumentException(\"User list must contain \"\n-          + \"either \u0027*\u0027 or list of user names, but not both.\");\n-        } else if (!userList.contains(actualUgi.getShortUserName())) {\n-          throw new WasbAuthorizationException(String.format(\"user \u0027%s\u0027 does not have the privilege to change the ownership of files/folders.\",\n-            actualUgi.getShortUserName()));\n-        }\n+      if (!isAllowedUser(currentUgi.getShortUserName(),\n+          chownAllowedUsers)) {\n+          throw new WasbAuthorizationException(\n+            String.format(\"user \u0027%s\u0027 does not have the privilege to change \"\n+                + \"the ownership of files/folders.\",\n+                    currentUgi.getShortUserName()));\n       }\n     }\n \n     PermissionStatus newPermissionStatus \u003d new PermissionStatus(\n         username \u003d\u003d null ?\n             metadata.getPermissionStatus().getUserName() : username,\n         groupname \u003d\u003d null ?\n             metadata.getPermissionStatus().getGroupName() : groupname,\n         metadata.getPermissionStatus().getPermission());\n     if (metadata.getBlobMaterialization() \u003d\u003d BlobMaterialization.Implicit) {\n       // It\u0027s an implicit folder, need to materialize it.\n       store.storeEmptyFolder(key, newPermissionStatus);\n     } else {\n       store.changePermissionStatus(key, newPermissionStatus);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void setOwner(Path p, String username, String groupname)\n      throws IOException {\n    Path absolutePath \u003d makeAbsolute(p);\n\n    String key \u003d pathToKey(absolutePath);\n    FileMetadata metadata \u003d null;\n\n    try {\n      metadata \u003d store.retrieveMetadata(key);\n    } catch (IOException ex) {\n      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n\n        throw new FileNotFoundException(String.format(\"File %s doesn\u0027t exists.\", p));\n      }\n\n      throw ex;\n    }\n\n    if (metadata \u003d\u003d null) {\n      throw new FileNotFoundException(\"File doesn\u0027t exist: \" + p);\n    }\n\n    /* If authorization is enabled, check if the user has privileges\n    *  to change the ownership of file/folder\n    */\n    if (this.azureAuthorization \u0026\u0026 username !\u003d null) {\n      UserGroupInformation currentUgi \u003d UserGroupInformation.getCurrentUser();\n\n      if (!isAllowedUser(currentUgi.getShortUserName(),\n          chownAllowedUsers)) {\n          throw new WasbAuthorizationException(\n            String.format(\"user \u0027%s\u0027 does not have the privilege to change \"\n                + \"the ownership of files/folders.\",\n                    currentUgi.getShortUserName()));\n      }\n    }\n\n    PermissionStatus newPermissionStatus \u003d new PermissionStatus(\n        username \u003d\u003d null ?\n            metadata.getPermissionStatus().getUserName() : username,\n        groupname \u003d\u003d null ?\n            metadata.getPermissionStatus().getGroupName() : groupname,\n        metadata.getPermissionStatus().getPermission());\n    if (metadata.getBlobMaterialization() \u003d\u003d BlobMaterialization.Implicit) {\n      // It\u0027s an implicit folder, need to materialize it.\n      store.storeEmptyFolder(key, newPermissionStatus);\n    } else {\n      store.changePermissionStatus(key, newPermissionStatus);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "7d272ea124615c493c60ad454fbd6f144dd3cc24": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14581. Restrict setOwner to list of user when security is enabled in wasb.\nContributed by Varada Hemeswari\n\n(cherry picked from commit 1e69e5260351effc8077d1bdc397cec57cf1ff1b)\n",
      "commitDate": "12/07/17 2:37 AM",
      "commitName": "7d272ea124615c493c60ad454fbd6f144dd3cc24",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "11/07/17 1:34 PM",
      "commitNameOld": "d670c3a4da7dd80dccf6c6308603bb3bb013b3b0",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 0.54,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,65 @@\n   public void setOwner(Path p, String username, String groupname)\n       throws IOException {\n     Path absolutePath \u003d makeAbsolute(p);\n \n     String key \u003d pathToKey(absolutePath);\n     FileMetadata metadata \u003d null;\n \n     try {\n       metadata \u003d store.retrieveMetadata(key);\n     } catch (IOException ex) {\n       Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n \n       if (innerException instanceof StorageException\n           \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n \n         throw new FileNotFoundException(String.format(\"File %s doesn\u0027t exists.\", p));\n       }\n \n       throw ex;\n     }\n \n     if (metadata \u003d\u003d null) {\n       throw new FileNotFoundException(\"File doesn\u0027t exist: \" + p);\n     }\n \n+    /* If authorization is enabled, check if the user has privileges\n+    *  to change the ownership of file/folder\n+    */\n+    if (this.azureAuthorization \u0026\u0026 username !\u003d null) {\n+      String[] listOfUsers \u003d getConf().getTrimmedStrings(AZURE_CHOWN_USERLIST_PROPERTY_NAME,\n+        AZURE_CHOWN_USERLIST_PROPERTY_DEFAULT_VALUE);\n+      boolean shouldSkipUserCheck \u003d listOfUsers.length \u003d\u003d 1 \u0026\u0026 listOfUsers[0].equals(\"*\");\n+      // skip the check if the chown allowed users config value is set as \u0027*\u0027\n+      if (!shouldSkipUserCheck) {\n+        UserGroupInformation currentUgi \u003d UserGroupInformation.getCurrentUser();\n+        UserGroupInformation actualUgi \u003d currentUgi.getRealUser();\n+\n+        if (actualUgi \u003d\u003d null) {\n+          actualUgi \u003d currentUgi;\n+        }\n+\n+        List\u003cString\u003e userList \u003d Arrays.asList(listOfUsers);\n+        if (userList.contains(\"*\")) {\n+          throw new IllegalArgumentException(\"User list must contain \"\n+          + \"either \u0027*\u0027 or list of user names, but not both.\");\n+        } else if (!userList.contains(actualUgi.getShortUserName())) {\n+          throw new WasbAuthorizationException(String.format(\"user \u0027%s\u0027 does not have the privilege to change the ownership of files/folders.\",\n+            actualUgi.getShortUserName()));\n+        }\n+      }\n+    }\n+\n     PermissionStatus newPermissionStatus \u003d new PermissionStatus(\n         username \u003d\u003d null ?\n             metadata.getPermissionStatus().getUserName() : username,\n         groupname \u003d\u003d null ?\n             metadata.getPermissionStatus().getGroupName() : groupname,\n         metadata.getPermissionStatus().getPermission());\n     if (metadata.getBlobMaterialization() \u003d\u003d BlobMaterialization.Implicit) {\n       // It\u0027s an implicit folder, need to materialize it.\n       store.storeEmptyFolder(key, newPermissionStatus);\n     } else {\n       store.changePermissionStatus(key, newPermissionStatus);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void setOwner(Path p, String username, String groupname)\n      throws IOException {\n    Path absolutePath \u003d makeAbsolute(p);\n\n    String key \u003d pathToKey(absolutePath);\n    FileMetadata metadata \u003d null;\n\n    try {\n      metadata \u003d store.retrieveMetadata(key);\n    } catch (IOException ex) {\n      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n\n        throw new FileNotFoundException(String.format(\"File %s doesn\u0027t exists.\", p));\n      }\n\n      throw ex;\n    }\n\n    if (metadata \u003d\u003d null) {\n      throw new FileNotFoundException(\"File doesn\u0027t exist: \" + p);\n    }\n\n    /* If authorization is enabled, check if the user has privileges\n    *  to change the ownership of file/folder\n    */\n    if (this.azureAuthorization \u0026\u0026 username !\u003d null) {\n      String[] listOfUsers \u003d getConf().getTrimmedStrings(AZURE_CHOWN_USERLIST_PROPERTY_NAME,\n        AZURE_CHOWN_USERLIST_PROPERTY_DEFAULT_VALUE);\n      boolean shouldSkipUserCheck \u003d listOfUsers.length \u003d\u003d 1 \u0026\u0026 listOfUsers[0].equals(\"*\");\n      // skip the check if the chown allowed users config value is set as \u0027*\u0027\n      if (!shouldSkipUserCheck) {\n        UserGroupInformation currentUgi \u003d UserGroupInformation.getCurrentUser();\n        UserGroupInformation actualUgi \u003d currentUgi.getRealUser();\n\n        if (actualUgi \u003d\u003d null) {\n          actualUgi \u003d currentUgi;\n        }\n\n        List\u003cString\u003e userList \u003d Arrays.asList(listOfUsers);\n        if (userList.contains(\"*\")) {\n          throw new IllegalArgumentException(\"User list must contain \"\n          + \"either \u0027*\u0027 or list of user names, but not both.\");\n        } else if (!userList.contains(actualUgi.getShortUserName())) {\n          throw new WasbAuthorizationException(String.format(\"user \u0027%s\u0027 does not have the privilege to change the ownership of files/folders.\",\n            actualUgi.getShortUserName()));\n        }\n      }\n    }\n\n    PermissionStatus newPermissionStatus \u003d new PermissionStatus(\n        username \u003d\u003d null ?\n            metadata.getPermissionStatus().getUserName() : username,\n        groupname \u003d\u003d null ?\n            metadata.getPermissionStatus().getGroupName() : groupname,\n        metadata.getPermissionStatus().getPermission());\n    if (metadata.getBlobMaterialization() \u003d\u003d BlobMaterialization.Implicit) {\n      // It\u0027s an implicit folder, need to materialize it.\n      store.storeEmptyFolder(key, newPermissionStatus);\n    } else {\n      store.changePermissionStatus(key, newPermissionStatus);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "0cab57223e3f54be17a5f27cefdb6d1da1b073e5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14274. Azure: Simplify Ranger-WASB policy model. Contributed by Sivaguru Sankaridurg\n",
      "commitDate": "12/04/17 4:07 PM",
      "commitName": "0cab57223e3f54be17a5f27cefdb6d1da1b073e5",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "04/04/17 11:10 AM",
      "commitNameOld": "56ab02eed9b61e1c80605104dfc4c87fc6abac96",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 8.21,
      "commitsBetweenForRepo": 67,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,38 @@\n   public void setOwner(Path p, String username, String groupname)\n       throws IOException {\n     Path absolutePath \u003d makeAbsolute(p);\n \n-    performAuthCheck(absolutePath.toString(),\n-        WasbAuthorizationOperations.EXECUTE.toString(), \"setOwner\");\n-\n     String key \u003d pathToKey(absolutePath);\n     FileMetadata metadata \u003d null;\n \n     try {\n       metadata \u003d store.retrieveMetadata(key);\n     } catch (IOException ex) {\n       Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n \n       if (innerException instanceof StorageException\n           \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n \n         throw new FileNotFoundException(String.format(\"File %s doesn\u0027t exists.\", p));\n       }\n \n       throw ex;\n     }\n \n     if (metadata \u003d\u003d null) {\n       throw new FileNotFoundException(\"File doesn\u0027t exist: \" + p);\n     }\n \n     PermissionStatus newPermissionStatus \u003d new PermissionStatus(\n         username \u003d\u003d null ?\n             metadata.getPermissionStatus().getUserName() : username,\n         groupname \u003d\u003d null ?\n             metadata.getPermissionStatus().getGroupName() : groupname,\n         metadata.getPermissionStatus().getPermission());\n     if (metadata.getBlobMaterialization() \u003d\u003d BlobMaterialization.Implicit) {\n       // It\u0027s an implicit folder, need to materialize it.\n       store.storeEmptyFolder(key, newPermissionStatus);\n     } else {\n       store.changePermissionStatus(key, newPermissionStatus);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void setOwner(Path p, String username, String groupname)\n      throws IOException {\n    Path absolutePath \u003d makeAbsolute(p);\n\n    String key \u003d pathToKey(absolutePath);\n    FileMetadata metadata \u003d null;\n\n    try {\n      metadata \u003d store.retrieveMetadata(key);\n    } catch (IOException ex) {\n      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n\n        throw new FileNotFoundException(String.format(\"File %s doesn\u0027t exists.\", p));\n      }\n\n      throw ex;\n    }\n\n    if (metadata \u003d\u003d null) {\n      throw new FileNotFoundException(\"File doesn\u0027t exist: \" + p);\n    }\n\n    PermissionStatus newPermissionStatus \u003d new PermissionStatus(\n        username \u003d\u003d null ?\n            metadata.getPermissionStatus().getUserName() : username,\n        groupname \u003d\u003d null ?\n            metadata.getPermissionStatus().getGroupName() : groupname,\n        metadata.getPermissionStatus().getPermission());\n    if (metadata.getBlobMaterialization() \u003d\u003d BlobMaterialization.Implicit) {\n      // It\u0027s an implicit folder, need to materialize it.\n      store.storeEmptyFolder(key, newPermissionStatus);\n    } else {\n      store.changePermissionStatus(key, newPermissionStatus);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "686823529be09bea2a6cecb3503ef722017475bc": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13930. Azure: Add Authorization support to WASB. Contributed by Sivaguru Sankaridurg and Dushyanth\n",
      "commitDate": "06/03/17 5:16 PM",
      "commitName": "686823529be09bea2a6cecb3503ef722017475bc",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "06/03/17 5:10 PM",
      "commitNameOld": "52d7d5aa1a303cf70519a61487641211f4267c6f",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,41 @@\n   public void setOwner(Path p, String username, String groupname)\n       throws IOException {\n     Path absolutePath \u003d makeAbsolute(p);\n+\n+    performAuthCheck(absolutePath.toString(),\n+        WasbAuthorizationOperations.EXECUTE.toString(), \"setOwner\");\n+\n     String key \u003d pathToKey(absolutePath);\n     FileMetadata metadata \u003d null;\n \n     try {\n       metadata \u003d store.retrieveMetadata(key);\n     } catch (IOException ex) {\n       Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n \n       if (innerException instanceof StorageException\n           \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n \n         throw new FileNotFoundException(String.format(\"File %s doesn\u0027t exists.\", p));\n       }\n \n       throw ex;\n     }\n \n     if (metadata \u003d\u003d null) {\n       throw new FileNotFoundException(\"File doesn\u0027t exist: \" + p);\n     }\n \n     PermissionStatus newPermissionStatus \u003d new PermissionStatus(\n         username \u003d\u003d null ?\n             metadata.getPermissionStatus().getUserName() : username,\n         groupname \u003d\u003d null ?\n             metadata.getPermissionStatus().getGroupName() : groupname,\n         metadata.getPermissionStatus().getPermission());\n     if (metadata.getBlobMaterialization() \u003d\u003d BlobMaterialization.Implicit) {\n       // It\u0027s an implicit folder, need to materialize it.\n       store.storeEmptyFolder(key, newPermissionStatus);\n     } else {\n       store.changePermissionStatus(key, newPermissionStatus);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void setOwner(Path p, String username, String groupname)\n      throws IOException {\n    Path absolutePath \u003d makeAbsolute(p);\n\n    performAuthCheck(absolutePath.toString(),\n        WasbAuthorizationOperations.EXECUTE.toString(), \"setOwner\");\n\n    String key \u003d pathToKey(absolutePath);\n    FileMetadata metadata \u003d null;\n\n    try {\n      metadata \u003d store.retrieveMetadata(key);\n    } catch (IOException ex) {\n      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n\n        throw new FileNotFoundException(String.format(\"File %s doesn\u0027t exists.\", p));\n      }\n\n      throw ex;\n    }\n\n    if (metadata \u003d\u003d null) {\n      throw new FileNotFoundException(\"File doesn\u0027t exist: \" + p);\n    }\n\n    PermissionStatus newPermissionStatus \u003d new PermissionStatus(\n        username \u003d\u003d null ?\n            metadata.getPermissionStatus().getUserName() : username,\n        groupname \u003d\u003d null ?\n            metadata.getPermissionStatus().getGroupName() : groupname,\n        metadata.getPermissionStatus().getPermission());\n    if (metadata.getBlobMaterialization() \u003d\u003d BlobMaterialization.Implicit) {\n      // It\u0027s an implicit folder, need to materialize it.\n      store.storeEmptyFolder(key, newPermissionStatus);\n    } else {\n      store.changePermissionStatus(key, newPermissionStatus);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "52d7d5aa1a303cf70519a61487641211f4267c6f": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-13930. Azure: Add Authorization support to WASB. Contributed by Sivaguru Sankaridurg and Dushyanth\"\n\nThis reverts commit 6b7cd62b8cf12616b13142f2eb2cfc2f25796f0f.\n",
      "commitDate": "06/03/17 5:10 PM",
      "commitName": "52d7d5aa1a303cf70519a61487641211f4267c6f",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "06/03/17 5:00 PM",
      "commitNameOld": "c571cda5c7d929477961dfff4176d7de4944d874",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,37 @@\n   public void setOwner(Path p, String username, String groupname)\n       throws IOException {\n     Path absolutePath \u003d makeAbsolute(p);\n-\n-    performAuthCheck(absolutePath.toString(),\n-        WasbAuthorizationOperations.EXECUTE.toString(), \"setOwner\");\n-\n     String key \u003d pathToKey(absolutePath);\n     FileMetadata metadata \u003d null;\n \n     try {\n       metadata \u003d store.retrieveMetadata(key);\n     } catch (IOException ex) {\n       Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n \n       if (innerException instanceof StorageException\n           \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n \n         throw new FileNotFoundException(String.format(\"File %s doesn\u0027t exists.\", p));\n       }\n \n       throw ex;\n     }\n \n     if (metadata \u003d\u003d null) {\n       throw new FileNotFoundException(\"File doesn\u0027t exist: \" + p);\n     }\n \n     PermissionStatus newPermissionStatus \u003d new PermissionStatus(\n         username \u003d\u003d null ?\n             metadata.getPermissionStatus().getUserName() : username,\n         groupname \u003d\u003d null ?\n             metadata.getPermissionStatus().getGroupName() : groupname,\n         metadata.getPermissionStatus().getPermission());\n     if (metadata.getBlobMaterialization() \u003d\u003d BlobMaterialization.Implicit) {\n       // It\u0027s an implicit folder, need to materialize it.\n       store.storeEmptyFolder(key, newPermissionStatus);\n     } else {\n       store.changePermissionStatus(key, newPermissionStatus);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void setOwner(Path p, String username, String groupname)\n      throws IOException {\n    Path absolutePath \u003d makeAbsolute(p);\n    String key \u003d pathToKey(absolutePath);\n    FileMetadata metadata \u003d null;\n\n    try {\n      metadata \u003d store.retrieveMetadata(key);\n    } catch (IOException ex) {\n      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n\n        throw new FileNotFoundException(String.format(\"File %s doesn\u0027t exists.\", p));\n      }\n\n      throw ex;\n    }\n\n    if (metadata \u003d\u003d null) {\n      throw new FileNotFoundException(\"File doesn\u0027t exist: \" + p);\n    }\n\n    PermissionStatus newPermissionStatus \u003d new PermissionStatus(\n        username \u003d\u003d null ?\n            metadata.getPermissionStatus().getUserName() : username,\n        groupname \u003d\u003d null ?\n            metadata.getPermissionStatus().getGroupName() : groupname,\n        metadata.getPermissionStatus().getPermission());\n    if (metadata.getBlobMaterialization() \u003d\u003d BlobMaterialization.Implicit) {\n      // It\u0027s an implicit folder, need to materialize it.\n      store.storeEmptyFolder(key, newPermissionStatus);\n    } else {\n      store.changePermissionStatus(key, newPermissionStatus);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "6b7cd62b8cf12616b13142f2eb2cfc2f25796f0f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13930. Azure: Add Authorization support to WASB. Contributed by Sivaguru Sankaridurg and Dushyanth\n",
      "commitDate": "03/03/17 5:09 PM",
      "commitName": "6b7cd62b8cf12616b13142f2eb2cfc2f25796f0f",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "29/12/16 4:24 PM",
      "commitNameOld": "c6a5b689db573046819f0e9193cb042e6c7298f4",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 64.03,
      "commitsBetweenForRepo": 324,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,41 @@\n   public void setOwner(Path p, String username, String groupname)\n       throws IOException {\n     Path absolutePath \u003d makeAbsolute(p);\n+\n+    performAuthCheck(absolutePath.toString(),\n+        WasbAuthorizationOperations.EXECUTE.toString(), \"setOwner\");\n+\n     String key \u003d pathToKey(absolutePath);\n     FileMetadata metadata \u003d null;\n \n     try {\n       metadata \u003d store.retrieveMetadata(key);\n     } catch (IOException ex) {\n       Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n \n       if (innerException instanceof StorageException\n           \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n \n         throw new FileNotFoundException(String.format(\"File %s doesn\u0027t exists.\", p));\n       }\n \n       throw ex;\n     }\n \n     if (metadata \u003d\u003d null) {\n       throw new FileNotFoundException(\"File doesn\u0027t exist: \" + p);\n     }\n \n     PermissionStatus newPermissionStatus \u003d new PermissionStatus(\n         username \u003d\u003d null ?\n             metadata.getPermissionStatus().getUserName() : username,\n         groupname \u003d\u003d null ?\n             metadata.getPermissionStatus().getGroupName() : groupname,\n         metadata.getPermissionStatus().getPermission());\n     if (metadata.getBlobMaterialization() \u003d\u003d BlobMaterialization.Implicit) {\n       // It\u0027s an implicit folder, need to materialize it.\n       store.storeEmptyFolder(key, newPermissionStatus);\n     } else {\n       store.changePermissionStatus(key, newPermissionStatus);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void setOwner(Path p, String username, String groupname)\n      throws IOException {\n    Path absolutePath \u003d makeAbsolute(p);\n\n    performAuthCheck(absolutePath.toString(),\n        WasbAuthorizationOperations.EXECUTE.toString(), \"setOwner\");\n\n    String key \u003d pathToKey(absolutePath);\n    FileMetadata metadata \u003d null;\n\n    try {\n      metadata \u003d store.retrieveMetadata(key);\n    } catch (IOException ex) {\n      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n\n        throw new FileNotFoundException(String.format(\"File %s doesn\u0027t exists.\", p));\n      }\n\n      throw ex;\n    }\n\n    if (metadata \u003d\u003d null) {\n      throw new FileNotFoundException(\"File doesn\u0027t exist: \" + p);\n    }\n\n    PermissionStatus newPermissionStatus \u003d new PermissionStatus(\n        username \u003d\u003d null ?\n            metadata.getPermissionStatus().getUserName() : username,\n        groupname \u003d\u003d null ?\n            metadata.getPermissionStatus().getGroupName() : groupname,\n        metadata.getPermissionStatus().getPermission());\n    if (metadata.getBlobMaterialization() \u003d\u003d BlobMaterialization.Implicit) {\n      // It\u0027s an implicit folder, need to materialize it.\n      store.storeEmptyFolder(key, newPermissionStatus);\n    } else {\n      store.changePermissionStatus(key, newPermissionStatus);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "8bc93db2e7c64830b6a662f28c8917a9eef4e7c9": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12635. Adding Append API support for WASB. Contributed by Dushyanth.\n",
      "commitDate": "18/01/16 9:08 AM",
      "commitName": "8bc93db2e7c64830b6a662f28c8917a9eef4e7c9",
      "commitAuthor": "cnauroth",
      "commitDateOld": "09/01/16 10:18 PM",
      "commitNameOld": "0e76f1fceaaaeb66bdb4818f43b9a55fc092bf79",
      "commitAuthorOld": "cnauroth",
      "daysBetweenCommits": 8.45,
      "commitsBetweenForRepo": 64,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   public void setOwner(Path p, String username, String groupname)\n       throws IOException {\n     Path absolutePath \u003d makeAbsolute(p);\n     String key \u003d pathToKey(absolutePath);\n     FileMetadata metadata \u003d null;\n \n     try {\n       metadata \u003d store.retrieveMetadata(key);\n     } catch (IOException ex) {\n-      Throwable innerException \u003d NativeAzureFileSystem.checkForAzureStorageException(ex);\n+      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n \n       if (innerException instanceof StorageException\n-          \u0026\u0026 NativeAzureFileSystem.isFileNotFoundException((StorageException) innerException)) {\n+          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n \n         throw new FileNotFoundException(String.format(\"File %s doesn\u0027t exists.\", p));\n       }\n \n       throw ex;\n     }\n \n     if (metadata \u003d\u003d null) {\n       throw new FileNotFoundException(\"File doesn\u0027t exist: \" + p);\n     }\n \n     PermissionStatus newPermissionStatus \u003d new PermissionStatus(\n         username \u003d\u003d null ?\n             metadata.getPermissionStatus().getUserName() : username,\n         groupname \u003d\u003d null ?\n             metadata.getPermissionStatus().getGroupName() : groupname,\n         metadata.getPermissionStatus().getPermission());\n     if (metadata.getBlobMaterialization() \u003d\u003d BlobMaterialization.Implicit) {\n       // It\u0027s an implicit folder, need to materialize it.\n       store.storeEmptyFolder(key, newPermissionStatus);\n     } else {\n       store.changePermissionStatus(key, newPermissionStatus);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void setOwner(Path p, String username, String groupname)\n      throws IOException {\n    Path absolutePath \u003d makeAbsolute(p);\n    String key \u003d pathToKey(absolutePath);\n    FileMetadata metadata \u003d null;\n\n    try {\n      metadata \u003d store.retrieveMetadata(key);\n    } catch (IOException ex) {\n      Throwable innerException \u003d NativeAzureFileSystemHelper.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystemHelper.isFileNotFoundException((StorageException) innerException)) {\n\n        throw new FileNotFoundException(String.format(\"File %s doesn\u0027t exists.\", p));\n      }\n\n      throw ex;\n    }\n\n    if (metadata \u003d\u003d null) {\n      throw new FileNotFoundException(\"File doesn\u0027t exist: \" + p);\n    }\n\n    PermissionStatus newPermissionStatus \u003d new PermissionStatus(\n        username \u003d\u003d null ?\n            metadata.getPermissionStatus().getUserName() : username,\n        groupname \u003d\u003d null ?\n            metadata.getPermissionStatus().getGroupName() : groupname,\n        metadata.getPermissionStatus().getPermission());\n    if (metadata.getBlobMaterialization() \u003d\u003d BlobMaterialization.Implicit) {\n      // It\u0027s an implicit folder, need to materialize it.\n      store.storeEmptyFolder(key, newPermissionStatus);\n    } else {\n      store.changePermissionStatus(key, newPermissionStatus);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "0e76f1fceaaaeb66bdb4818f43b9a55fc092bf79": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12551. Introduce FileNotFoundException for WASB FileSystem API. Contributed by Dushyanth.\n",
      "commitDate": "09/01/16 10:18 PM",
      "commitName": "0e76f1fceaaaeb66bdb4818f43b9a55fc092bf79",
      "commitAuthor": "cnauroth",
      "commitDateOld": "08/01/16 8:18 PM",
      "commitNameOld": "f0fa6d869b9abb5a900ea1c9eb4eb19ec9831dc4",
      "commitAuthorOld": "cnauroth",
      "daysBetweenCommits": 1.08,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,37 @@\n   public void setOwner(Path p, String username, String groupname)\n       throws IOException {\n     Path absolutePath \u003d makeAbsolute(p);\n     String key \u003d pathToKey(absolutePath);\n-    FileMetadata metadata \u003d store.retrieveMetadata(key);\n+    FileMetadata metadata \u003d null;\n+\n+    try {\n+      metadata \u003d store.retrieveMetadata(key);\n+    } catch (IOException ex) {\n+      Throwable innerException \u003d NativeAzureFileSystem.checkForAzureStorageException(ex);\n+\n+      if (innerException instanceof StorageException\n+          \u0026\u0026 NativeAzureFileSystem.isFileNotFoundException((StorageException) innerException)) {\n+\n+        throw new FileNotFoundException(String.format(\"File %s doesn\u0027t exists.\", p));\n+      }\n+\n+      throw ex;\n+    }\n+\n     if (metadata \u003d\u003d null) {\n       throw new FileNotFoundException(\"File doesn\u0027t exist: \" + p);\n     }\n+\n     PermissionStatus newPermissionStatus \u003d new PermissionStatus(\n         username \u003d\u003d null ?\n             metadata.getPermissionStatus().getUserName() : username,\n         groupname \u003d\u003d null ?\n             metadata.getPermissionStatus().getGroupName() : groupname,\n         metadata.getPermissionStatus().getPermission());\n     if (metadata.getBlobMaterialization() \u003d\u003d BlobMaterialization.Implicit) {\n       // It\u0027s an implicit folder, need to materialize it.\n       store.storeEmptyFolder(key, newPermissionStatus);\n     } else {\n       store.changePermissionStatus(key, newPermissionStatus);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void setOwner(Path p, String username, String groupname)\n      throws IOException {\n    Path absolutePath \u003d makeAbsolute(p);\n    String key \u003d pathToKey(absolutePath);\n    FileMetadata metadata \u003d null;\n\n    try {\n      metadata \u003d store.retrieveMetadata(key);\n    } catch (IOException ex) {\n      Throwable innerException \u003d NativeAzureFileSystem.checkForAzureStorageException(ex);\n\n      if (innerException instanceof StorageException\n          \u0026\u0026 NativeAzureFileSystem.isFileNotFoundException((StorageException) innerException)) {\n\n        throw new FileNotFoundException(String.format(\"File %s doesn\u0027t exists.\", p));\n      }\n\n      throw ex;\n    }\n\n    if (metadata \u003d\u003d null) {\n      throw new FileNotFoundException(\"File doesn\u0027t exist: \" + p);\n    }\n\n    PermissionStatus newPermissionStatus \u003d new PermissionStatus(\n        username \u003d\u003d null ?\n            metadata.getPermissionStatus().getUserName() : username,\n        groupname \u003d\u003d null ?\n            metadata.getPermissionStatus().getGroupName() : groupname,\n        metadata.getPermissionStatus().getPermission());\n    if (metadata.getBlobMaterialization() \u003d\u003d BlobMaterialization.Implicit) {\n      // It\u0027s an implicit folder, need to materialize it.\n      store.storeEmptyFolder(key, newPermissionStatus);\n    } else {\n      store.changePermissionStatus(key, newPermissionStatus);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "81bc395deb3ba00567dc067d6ca71bacf9e3bc82": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-9629. Support Windows Azure Storage - Blob as a file system in Hadoop. Contributed by Dexter Bradshaw, Mostafa Elhemali, Xi Fang, Johannes Klein, David Lao, Mike Liddell, Chuan Liu, Lengning Liu, Ivan Mitic, Michael Rys, Alexander Stojanovic, Brian Swan, and Min Wei.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1601781 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/06/14 3:26 PM",
      "commitName": "81bc395deb3ba00567dc067d6ca71bacf9e3bc82",
      "commitAuthor": "Chris Nauroth",
      "diff": "@@ -0,0 +1,20 @@\n+  public void setOwner(Path p, String username, String groupname)\n+      throws IOException {\n+    Path absolutePath \u003d makeAbsolute(p);\n+    String key \u003d pathToKey(absolutePath);\n+    FileMetadata metadata \u003d store.retrieveMetadata(key);\n+    if (metadata \u003d\u003d null) {\n+      throw new FileNotFoundException(\"File doesn\u0027t exist: \" + p);\n+    }\n+    PermissionStatus newPermissionStatus \u003d new PermissionStatus(\n+        username \u003d\u003d null ? metadata.getPermissionStatus().getUserName()\n+            : username, groupname \u003d\u003d null ? metadata.getPermissionStatus()\n+            .getGroupName() : groupname, metadata.getPermissionStatus()\n+            .getPermission());\n+    if (metadata.getBlobMaterialization() \u003d\u003d BlobMaterialization.Implicit) {\n+      // It\u0027s an implicit folder, need to materialize it.\n+      store.storeEmptyFolder(key, newPermissionStatus);\n+    } else {\n+      store.changePermissionStatus(key, newPermissionStatus);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void setOwner(Path p, String username, String groupname)\n      throws IOException {\n    Path absolutePath \u003d makeAbsolute(p);\n    String key \u003d pathToKey(absolutePath);\n    FileMetadata metadata \u003d store.retrieveMetadata(key);\n    if (metadata \u003d\u003d null) {\n      throw new FileNotFoundException(\"File doesn\u0027t exist: \" + p);\n    }\n    PermissionStatus newPermissionStatus \u003d new PermissionStatus(\n        username \u003d\u003d null ? metadata.getPermissionStatus().getUserName()\n            : username, groupname \u003d\u003d null ? metadata.getPermissionStatus()\n            .getGroupName() : groupname, metadata.getPermissionStatus()\n            .getPermission());\n    if (metadata.getBlobMaterialization() \u003d\u003d BlobMaterialization.Implicit) {\n      // It\u0027s an implicit folder, need to materialize it.\n      store.storeEmptyFolder(key, newPermissionStatus);\n    } else {\n      store.changePermissionStatus(key, newPermissionStatus);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java"
    }
  }
}