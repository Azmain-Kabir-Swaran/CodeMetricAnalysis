{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ErasureCoding.java",
  "functionName": "getECBlockGroupStats",
  "functionId": "getECBlockGroupStats",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/ErasureCoding.java",
  "functionStartLine": 203,
  "functionEndLine": 213,
  "numCommitsSeen": 8,
  "timeTaken": 2209,
  "changeHistory": [
    "50aee18a84fcbca38be4272cfa0d33aadafe076d",
    "9499df7b81b55b488a32fd59798a543dafef4ef8",
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
    "d5d6a0353bb85b882cc4ef60e3a12d63243d34ba"
  ],
  "changeHistoryShort": {
    "50aee18a84fcbca38be4272cfa0d33aadafe076d": "Ybodychange",
    "9499df7b81b55b488a32fd59798a543dafef4ef8": "Ybodychange",
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": "Yfilerename",
    "d5d6a0353bb85b882cc4ef60e3a12d63243d34ba": "Yintroduced"
  },
  "changeHistoryDetails": {
    "50aee18a84fcbca38be4272cfa0d33aadafe076d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14268. RBF: Fix the location of the DNs in getDatanodeReport(). Contributed by Inigo Goiri.\n",
      "commitDate": "24/06/19 9:33 AM",
      "commitName": "50aee18a84fcbca38be4272cfa0d33aadafe076d",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "24/06/19 9:33 AM",
      "commitNameOld": "e2a3c4494ba27a7b82117dac275b9d115aee7f95",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,11 @@\n   public ECBlockGroupStats getECBlockGroupStats() throws IOException {\n     rpcServer.checkOperation(OperationCategory.READ);\n \n     RemoteMethod method \u003d new RemoteMethod(\"getECBlockGroupStats\");\n     Set\u003cFederationNamespaceInfo\u003e nss \u003d namenodeResolver.getNamespaces();\n     Map\u003cFederationNamespaceInfo, ECBlockGroupStats\u003e allStats \u003d\n         rpcClient.invokeConcurrent(\n             nss, method, true, false, ECBlockGroupStats.class);\n \n-    // Merge the stats from all the namespaces\n-    long lowRedundancyBlockGroups \u003d 0;\n-    long corruptBlockGroups \u003d 0;\n-    long missingBlockGroups \u003d 0;\n-    long bytesInFutureBlockGroups \u003d 0;\n-    long pendingDeletionBlocks \u003d 0;\n-    long highestPriorityLowRedundancyBlocks \u003d 0;\n-    boolean hasHighestPriorityLowRedundancyBlocks \u003d false;\n-\n-    for (ECBlockGroupStats stats : allStats.values()) {\n-      lowRedundancyBlockGroups +\u003d stats.getLowRedundancyBlockGroups();\n-      corruptBlockGroups +\u003d stats.getCorruptBlockGroups();\n-      missingBlockGroups +\u003d stats.getMissingBlockGroups();\n-      bytesInFutureBlockGroups +\u003d stats.getBytesInFutureBlockGroups();\n-      pendingDeletionBlocks +\u003d stats.getPendingDeletionBlocks();\n-      if (stats.hasHighestPriorityLowRedundancyBlocks()) {\n-        hasHighestPriorityLowRedundancyBlocks \u003d true;\n-        highestPriorityLowRedundancyBlocks +\u003d\n-            stats.getHighestPriorityLowRedundancyBlocks();\n-      }\n-    }\n-    if (hasHighestPriorityLowRedundancyBlocks) {\n-      return new ECBlockGroupStats(lowRedundancyBlockGroups, corruptBlockGroups,\n-          missingBlockGroups, bytesInFutureBlockGroups, pendingDeletionBlocks,\n-          highestPriorityLowRedundancyBlocks);\n-    }\n-    return new ECBlockGroupStats(lowRedundancyBlockGroups, corruptBlockGroups,\n-        missingBlockGroups, bytesInFutureBlockGroups, pendingDeletionBlocks);\n+    return ECBlockGroupStats.merge(allStats.values());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ECBlockGroupStats getECBlockGroupStats() throws IOException {\n    rpcServer.checkOperation(OperationCategory.READ);\n\n    RemoteMethod method \u003d new RemoteMethod(\"getECBlockGroupStats\");\n    Set\u003cFederationNamespaceInfo\u003e nss \u003d namenodeResolver.getNamespaces();\n    Map\u003cFederationNamespaceInfo, ECBlockGroupStats\u003e allStats \u003d\n        rpcClient.invokeConcurrent(\n            nss, method, true, false, ECBlockGroupStats.class);\n\n    return ECBlockGroupStats.merge(allStats.values());\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/ErasureCoding.java",
      "extendedDetails": {}
    },
    "9499df7b81b55b488a32fd59798a543dafef4ef8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13658. Expose HighestPriorityLowRedundancy blocks statistics. Contributed by Kitti Nanasi.\n",
      "commitDate": "08/08/18 10:40 AM",
      "commitName": "9499df7b81b55b488a32fd59798a543dafef4ef8",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "19/03/18 10:13 PM",
      "commitNameOld": "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
      "commitAuthorOld": "weiy",
      "daysBetweenCommits": 141.52,
      "commitsBetweenForRepo": 1610,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,38 @@\n   public ECBlockGroupStats getECBlockGroupStats() throws IOException {\n     rpcServer.checkOperation(OperationCategory.READ);\n \n     RemoteMethod method \u003d new RemoteMethod(\"getECBlockGroupStats\");\n     Set\u003cFederationNamespaceInfo\u003e nss \u003d namenodeResolver.getNamespaces();\n     Map\u003cFederationNamespaceInfo, ECBlockGroupStats\u003e allStats \u003d\n         rpcClient.invokeConcurrent(\n             nss, method, true, false, ECBlockGroupStats.class);\n \n     // Merge the stats from all the namespaces\n     long lowRedundancyBlockGroups \u003d 0;\n     long corruptBlockGroups \u003d 0;\n     long missingBlockGroups \u003d 0;\n     long bytesInFutureBlockGroups \u003d 0;\n     long pendingDeletionBlocks \u003d 0;\n+    long highestPriorityLowRedundancyBlocks \u003d 0;\n+    boolean hasHighestPriorityLowRedundancyBlocks \u003d false;\n+\n     for (ECBlockGroupStats stats : allStats.values()) {\n       lowRedundancyBlockGroups +\u003d stats.getLowRedundancyBlockGroups();\n       corruptBlockGroups +\u003d stats.getCorruptBlockGroups();\n       missingBlockGroups +\u003d stats.getMissingBlockGroups();\n       bytesInFutureBlockGroups +\u003d stats.getBytesInFutureBlockGroups();\n       pendingDeletionBlocks +\u003d stats.getPendingDeletionBlocks();\n+      if (stats.hasHighestPriorityLowRedundancyBlocks()) {\n+        hasHighestPriorityLowRedundancyBlocks \u003d true;\n+        highestPriorityLowRedundancyBlocks +\u003d\n+            stats.getHighestPriorityLowRedundancyBlocks();\n+      }\n+    }\n+    if (hasHighestPriorityLowRedundancyBlocks) {\n+      return new ECBlockGroupStats(lowRedundancyBlockGroups, corruptBlockGroups,\n+          missingBlockGroups, bytesInFutureBlockGroups, pendingDeletionBlocks,\n+          highestPriorityLowRedundancyBlocks);\n     }\n     return new ECBlockGroupStats(lowRedundancyBlockGroups, corruptBlockGroups,\n         missingBlockGroups, bytesInFutureBlockGroups, pendingDeletionBlocks);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ECBlockGroupStats getECBlockGroupStats() throws IOException {\n    rpcServer.checkOperation(OperationCategory.READ);\n\n    RemoteMethod method \u003d new RemoteMethod(\"getECBlockGroupStats\");\n    Set\u003cFederationNamespaceInfo\u003e nss \u003d namenodeResolver.getNamespaces();\n    Map\u003cFederationNamespaceInfo, ECBlockGroupStats\u003e allStats \u003d\n        rpcClient.invokeConcurrent(\n            nss, method, true, false, ECBlockGroupStats.class);\n\n    // Merge the stats from all the namespaces\n    long lowRedundancyBlockGroups \u003d 0;\n    long corruptBlockGroups \u003d 0;\n    long missingBlockGroups \u003d 0;\n    long bytesInFutureBlockGroups \u003d 0;\n    long pendingDeletionBlocks \u003d 0;\n    long highestPriorityLowRedundancyBlocks \u003d 0;\n    boolean hasHighestPriorityLowRedundancyBlocks \u003d false;\n\n    for (ECBlockGroupStats stats : allStats.values()) {\n      lowRedundancyBlockGroups +\u003d stats.getLowRedundancyBlockGroups();\n      corruptBlockGroups +\u003d stats.getCorruptBlockGroups();\n      missingBlockGroups +\u003d stats.getMissingBlockGroups();\n      bytesInFutureBlockGroups +\u003d stats.getBytesInFutureBlockGroups();\n      pendingDeletionBlocks +\u003d stats.getPendingDeletionBlocks();\n      if (stats.hasHighestPriorityLowRedundancyBlocks()) {\n        hasHighestPriorityLowRedundancyBlocks \u003d true;\n        highestPriorityLowRedundancyBlocks +\u003d\n            stats.getHighestPriorityLowRedundancyBlocks();\n      }\n    }\n    if (hasHighestPriorityLowRedundancyBlocks) {\n      return new ECBlockGroupStats(lowRedundancyBlockGroups, corruptBlockGroups,\n          missingBlockGroups, bytesInFutureBlockGroups, pendingDeletionBlocks,\n          highestPriorityLowRedundancyBlocks);\n    }\n    return new ECBlockGroupStats(lowRedundancyBlockGroups, corruptBlockGroups,\n        missingBlockGroups, bytesInFutureBlockGroups, pendingDeletionBlocks);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/ErasureCoding.java",
      "extendedDetails": {}
    },
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-13215. RBF: Move Router to its own module. Contributed by Wei Yan\n",
      "commitDate": "19/03/18 10:13 PM",
      "commitName": "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
      "commitAuthor": "weiy",
      "commitDateOld": "19/03/18 5:19 PM",
      "commitNameOld": "e65ff1c8be48ef4f04ed96f96ac4caef4974944d",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.2,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public ECBlockGroupStats getECBlockGroupStats() throws IOException {\n    rpcServer.checkOperation(OperationCategory.READ);\n\n    RemoteMethod method \u003d new RemoteMethod(\"getECBlockGroupStats\");\n    Set\u003cFederationNamespaceInfo\u003e nss \u003d namenodeResolver.getNamespaces();\n    Map\u003cFederationNamespaceInfo, ECBlockGroupStats\u003e allStats \u003d\n        rpcClient.invokeConcurrent(\n            nss, method, true, false, ECBlockGroupStats.class);\n\n    // Merge the stats from all the namespaces\n    long lowRedundancyBlockGroups \u003d 0;\n    long corruptBlockGroups \u003d 0;\n    long missingBlockGroups \u003d 0;\n    long bytesInFutureBlockGroups \u003d 0;\n    long pendingDeletionBlocks \u003d 0;\n    for (ECBlockGroupStats stats : allStats.values()) {\n      lowRedundancyBlockGroups +\u003d stats.getLowRedundancyBlockGroups();\n      corruptBlockGroups +\u003d stats.getCorruptBlockGroups();\n      missingBlockGroups +\u003d stats.getMissingBlockGroups();\n      bytesInFutureBlockGroups +\u003d stats.getBytesInFutureBlockGroups();\n      pendingDeletionBlocks +\u003d stats.getPendingDeletionBlocks();\n    }\n    return new ECBlockGroupStats(lowRedundancyBlockGroups, corruptBlockGroups,\n        missingBlockGroups, bytesInFutureBlockGroups, pendingDeletionBlocks);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/ErasureCoding.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/router/ErasureCoding.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/ErasureCoding.java"
      }
    },
    "d5d6a0353bb85b882cc4ef60e3a12d63243d34ba": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-12919. RBF: Support erasure coding methods in RouterRpcServer. Contributed by Inigo Goiri.\n",
      "commitDate": "12/01/18 4:25 PM",
      "commitName": "d5d6a0353bb85b882cc4ef60e3a12d63243d34ba",
      "commitAuthor": "Inigo Goiri",
      "diff": "@@ -0,0 +1,25 @@\n+  public ECBlockGroupStats getECBlockGroupStats() throws IOException {\n+    rpcServer.checkOperation(OperationCategory.READ);\n+\n+    RemoteMethod method \u003d new RemoteMethod(\"getECBlockGroupStats\");\n+    Set\u003cFederationNamespaceInfo\u003e nss \u003d namenodeResolver.getNamespaces();\n+    Map\u003cFederationNamespaceInfo, ECBlockGroupStats\u003e allStats \u003d\n+        rpcClient.invokeConcurrent(\n+            nss, method, true, false, ECBlockGroupStats.class);\n+\n+    // Merge the stats from all the namespaces\n+    long lowRedundancyBlockGroups \u003d 0;\n+    long corruptBlockGroups \u003d 0;\n+    long missingBlockGroups \u003d 0;\n+    long bytesInFutureBlockGroups \u003d 0;\n+    long pendingDeletionBlocks \u003d 0;\n+    for (ECBlockGroupStats stats : allStats.values()) {\n+      lowRedundancyBlockGroups +\u003d stats.getLowRedundancyBlockGroups();\n+      corruptBlockGroups +\u003d stats.getCorruptBlockGroups();\n+      missingBlockGroups +\u003d stats.getMissingBlockGroups();\n+      bytesInFutureBlockGroups +\u003d stats.getBytesInFutureBlockGroups();\n+      pendingDeletionBlocks +\u003d stats.getPendingDeletionBlocks();\n+    }\n+    return new ECBlockGroupStats(lowRedundancyBlockGroups, corruptBlockGroups,\n+        missingBlockGroups, bytesInFutureBlockGroups, pendingDeletionBlocks);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public ECBlockGroupStats getECBlockGroupStats() throws IOException {\n    rpcServer.checkOperation(OperationCategory.READ);\n\n    RemoteMethod method \u003d new RemoteMethod(\"getECBlockGroupStats\");\n    Set\u003cFederationNamespaceInfo\u003e nss \u003d namenodeResolver.getNamespaces();\n    Map\u003cFederationNamespaceInfo, ECBlockGroupStats\u003e allStats \u003d\n        rpcClient.invokeConcurrent(\n            nss, method, true, false, ECBlockGroupStats.class);\n\n    // Merge the stats from all the namespaces\n    long lowRedundancyBlockGroups \u003d 0;\n    long corruptBlockGroups \u003d 0;\n    long missingBlockGroups \u003d 0;\n    long bytesInFutureBlockGroups \u003d 0;\n    long pendingDeletionBlocks \u003d 0;\n    for (ECBlockGroupStats stats : allStats.values()) {\n      lowRedundancyBlockGroups +\u003d stats.getLowRedundancyBlockGroups();\n      corruptBlockGroups +\u003d stats.getCorruptBlockGroups();\n      missingBlockGroups +\u003d stats.getMissingBlockGroups();\n      bytesInFutureBlockGroups +\u003d stats.getBytesInFutureBlockGroups();\n      pendingDeletionBlocks +\u003d stats.getPendingDeletionBlocks();\n    }\n    return new ECBlockGroupStats(lowRedundancyBlockGroups, corruptBlockGroups,\n        missingBlockGroups, bytesInFutureBlockGroups, pendingDeletionBlocks);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/router/ErasureCoding.java"
    }
  }
}