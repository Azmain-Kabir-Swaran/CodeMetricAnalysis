{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RouterAdmin.java",
  "functionName": "genericRefresh",
  "functionId": "genericRefresh___argv-String[]__i-int",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/tools/federation/RouterAdmin.java",
  "functionStartLine": 1206,
  "functionEndLine": 1259,
  "numCommitsSeen": 27,
  "timeTaken": 729,
  "changeHistory": [
    "f4e2bfce585d762eaf26096613d135203f080eb3"
  ],
  "changeHistoryShort": {
    "f4e2bfce585d762eaf26096613d135203f080eb3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f4e2bfce585d762eaf26096613d135203f080eb3": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-13856. RBF: RouterAdmin should support dfsrouteradmin -refreshRouterArgs command. Contributed by yanghuafeng.\n",
      "commitDate": "24/06/19 9:33 AM",
      "commitName": "f4e2bfce585d762eaf26096613d135203f080eb3",
      "commitAuthor": "Inigo Goiri",
      "diff": "@@ -0,0 +1,54 @@\n+  public int genericRefresh(String[] argv, int i) throws IOException {\n+    String hostport \u003d argv[i++];\n+    String identifier \u003d argv[i++];\n+    String[] args \u003d Arrays.copyOfRange(argv, i, argv.length);\n+\n+    // Get the current configuration\n+    Configuration conf \u003d getConf();\n+\n+    // for security authorization\n+    // server principal for this call\n+    // should be NN\u0027s one.\n+    conf.set(CommonConfigurationKeys.HADOOP_SECURITY_SERVICE_USER_NAME_KEY,\n+        conf.get(DFSConfigKeys.DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY, \"\"));\n+\n+    // Create the client\n+    Class\u003c?\u003e xface \u003d GenericRefreshProtocolPB.class;\n+    InetSocketAddress address \u003d NetUtils.createSocketAddr(hostport);\n+    UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n+\n+    RPC.setProtocolEngine(conf, xface, ProtobufRpcEngine.class);\n+    GenericRefreshProtocolPB proxy \u003d (GenericRefreshProtocolPB)RPC.getProxy(\n+        xface, RPC.getProtocolVersion(xface), address, ugi, conf,\n+        NetUtils.getDefaultSocketFactory(conf), 0);\n+\n+    Collection\u003cRefreshResponse\u003e responses \u003d null;\n+    try (GenericRefreshProtocolClientSideTranslatorPB xlator \u003d\n+        new GenericRefreshProtocolClientSideTranslatorPB(proxy)) {\n+      // Refresh\n+      responses \u003d xlator.refresh(identifier, args);\n+\n+      int returnCode \u003d 0;\n+\n+      // Print refresh responses\n+      System.out.println(\"Refresh Responses:\\n\");\n+      for (RefreshResponse response : responses) {\n+        System.out.println(response.toString());\n+\n+        if (returnCode \u003d\u003d 0 \u0026\u0026 response.getReturnCode() !\u003d 0) {\n+          // This is the first non-zero return code, so we should return this\n+          returnCode \u003d response.getReturnCode();\n+        } else if (returnCode !\u003d 0 \u0026\u0026 response.getReturnCode() !\u003d 0) {\n+          // Then now we have multiple non-zero return codes,\n+          // so we merge them into -1\n+          returnCode \u003d -1;\n+        }\n+      }\n+      return returnCode;\n+    } finally {\n+      if (responses \u003d\u003d null) {\n+        System.out.println(\"Failed to get response.\\n\");\n+        return -1;\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public int genericRefresh(String[] argv, int i) throws IOException {\n    String hostport \u003d argv[i++];\n    String identifier \u003d argv[i++];\n    String[] args \u003d Arrays.copyOfRange(argv, i, argv.length);\n\n    // Get the current configuration\n    Configuration conf \u003d getConf();\n\n    // for security authorization\n    // server principal for this call\n    // should be NN\u0027s one.\n    conf.set(CommonConfigurationKeys.HADOOP_SECURITY_SERVICE_USER_NAME_KEY,\n        conf.get(DFSConfigKeys.DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY, \"\"));\n\n    // Create the client\n    Class\u003c?\u003e xface \u003d GenericRefreshProtocolPB.class;\n    InetSocketAddress address \u003d NetUtils.createSocketAddr(hostport);\n    UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n\n    RPC.setProtocolEngine(conf, xface, ProtobufRpcEngine.class);\n    GenericRefreshProtocolPB proxy \u003d (GenericRefreshProtocolPB)RPC.getProxy(\n        xface, RPC.getProtocolVersion(xface), address, ugi, conf,\n        NetUtils.getDefaultSocketFactory(conf), 0);\n\n    Collection\u003cRefreshResponse\u003e responses \u003d null;\n    try (GenericRefreshProtocolClientSideTranslatorPB xlator \u003d\n        new GenericRefreshProtocolClientSideTranslatorPB(proxy)) {\n      // Refresh\n      responses \u003d xlator.refresh(identifier, args);\n\n      int returnCode \u003d 0;\n\n      // Print refresh responses\n      System.out.println(\"Refresh Responses:\\n\");\n      for (RefreshResponse response : responses) {\n        System.out.println(response.toString());\n\n        if (returnCode \u003d\u003d 0 \u0026\u0026 response.getReturnCode() !\u003d 0) {\n          // This is the first non-zero return code, so we should return this\n          returnCode \u003d response.getReturnCode();\n        } else if (returnCode !\u003d 0 \u0026\u0026 response.getReturnCode() !\u003d 0) {\n          // Then now we have multiple non-zero return codes,\n          // so we merge them into -1\n          returnCode \u003d -1;\n        }\n      }\n      return returnCode;\n    } finally {\n      if (responses \u003d\u003d null) {\n        System.out.println(\"Failed to get response.\\n\");\n        return -1;\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/tools/federation/RouterAdmin.java"
    }
  }
}