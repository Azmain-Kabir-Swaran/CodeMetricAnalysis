{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ResourcePluginManager.java",
  "functionName": "checkInterfaceCompatibility",
  "functionId": "checkInterfaceCompatibility___expectedClass-Class__?____actualClass-Class__?__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/ResourcePluginManager.java",
  "functionStartLine": 247,
  "functionEndLine": 278,
  "numCommitsSeen": 13,
  "timeTaken": 1354,
  "changeHistory": [
    "632d5e8a98bae629f20dd88d391f42dd5029a98d",
    "63578036450f660d49ae204327efcd629d9dd137"
  ],
  "changeHistoryShort": {
    "632d5e8a98bae629f20dd88d391f42dd5029a98d": "Ybodychange",
    "63578036450f660d49ae204327efcd629d9dd137": "Yintroduced"
  },
  "changeHistoryDetails": {
    "632d5e8a98bae629f20dd88d391f42dd5029a98d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9156. Improve debug message in device plugin method compatibility check of ResourcePluginManager. Contributed by Zhankun Tang.\n",
      "commitDate": "21/02/19 7:27 PM",
      "commitName": "632d5e8a98bae629f20dd88d391f42dd5029a98d",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "12/12/18 11:44 AM",
      "commitNameOld": "61bdcb7b2bc3057a8fe2b9dfb2b8154a585eab87",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 71.32,
      "commitsBetweenForRepo": 494,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,32 @@\n   public void checkInterfaceCompatibility(Class\u003c?\u003e expectedClass,\n       Class\u003c?\u003e actualClass) throws YarnRuntimeException{\n     LOG.debug(\"Checking implemented interface\u0027s compatibility: {}\",\n         expectedClass.getSimpleName());\n     Method[] expectedDevicePluginMethods \u003d expectedClass.getMethods();\n \n     // Check method compatibility\n     boolean found;\n     for (Method method: expectedDevicePluginMethods) {\n       found \u003d false;\n       LOG.debug(\"Try to find method: {}\",\n           method.getName());\n       for (Method m : actualClass.getDeclaredMethods()) {\n         if (m.getName().equals(method.getName())) {\n           LOG.debug(\"Method {} found in class {}\",\n-              actualClass.getSimpleName(),\n-              m.getName());\n+              m.getName(), actualClass.getSimpleName());\n           found \u003d true;\n           break;\n         }\n       }\n       if (!found) {\n         LOG.error(\"Method {} is not found in plugin\",\n             method.getName());\n         throw new YarnRuntimeException(\n             \"Method \" + method.getName()\n                 + \" is expected but not implemented in \"\n                 + actualClass.getCanonicalName());\n       }\n     }// end for\n     LOG.info(\"{} compatibility is ok.\",\n         expectedClass.getSimpleName());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void checkInterfaceCompatibility(Class\u003c?\u003e expectedClass,\n      Class\u003c?\u003e actualClass) throws YarnRuntimeException{\n    LOG.debug(\"Checking implemented interface\u0027s compatibility: {}\",\n        expectedClass.getSimpleName());\n    Method[] expectedDevicePluginMethods \u003d expectedClass.getMethods();\n\n    // Check method compatibility\n    boolean found;\n    for (Method method: expectedDevicePluginMethods) {\n      found \u003d false;\n      LOG.debug(\"Try to find method: {}\",\n          method.getName());\n      for (Method m : actualClass.getDeclaredMethods()) {\n        if (m.getName().equals(method.getName())) {\n          LOG.debug(\"Method {} found in class {}\",\n              m.getName(), actualClass.getSimpleName());\n          found \u003d true;\n          break;\n        }\n      }\n      if (!found) {\n        LOG.error(\"Method {} is not found in plugin\",\n            method.getName());\n        throw new YarnRuntimeException(\n            \"Method \" + method.getName()\n                + \" is expected but not implemented in \"\n                + actualClass.getCanonicalName());\n      }\n    }// end for\n    LOG.info(\"{} compatibility is ok.\",\n        expectedClass.getSimpleName());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/ResourcePluginManager.java",
      "extendedDetails": {}
    },
    "63578036450f660d49ae204327efcd629d9dd137": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8881. [YARN-8851] Add basic pluggable device plugin framework. (Zhankun Tang via wangda)\n\nChange-Id: If9a2f68cd4713b4ec932cdeda68106f17437c3d3\n",
      "commitDate": "19/11/18 8:54 AM",
      "commitName": "63578036450f660d49ae204327efcd629d9dd137",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,33 @@\n+  public void checkInterfaceCompatibility(Class\u003c?\u003e expectedClass,\n+      Class\u003c?\u003e actualClass) throws YarnRuntimeException{\n+    LOG.debug(\"Checking implemented interface\u0027s compatibility: {}\",\n+        expectedClass.getSimpleName());\n+    Method[] expectedDevicePluginMethods \u003d expectedClass.getMethods();\n+\n+    // Check method compatibility\n+    boolean found;\n+    for (Method method: expectedDevicePluginMethods) {\n+      found \u003d false;\n+      LOG.debug(\"Try to find method: {}\",\n+          method.getName());\n+      for (Method m : actualClass.getDeclaredMethods()) {\n+        if (m.getName().equals(method.getName())) {\n+          LOG.debug(\"Method {} found in class {}\",\n+              actualClass.getSimpleName(),\n+              m.getName());\n+          found \u003d true;\n+          break;\n+        }\n+      }\n+      if (!found) {\n+        LOG.error(\"Method {} is not found in plugin\",\n+            method.getName());\n+        throw new YarnRuntimeException(\n+            \"Method \" + method.getName()\n+                + \" is expected but not implemented in \"\n+                + actualClass.getCanonicalName());\n+      }\n+    }// end for\n+    LOG.info(\"{} compatibility is ok.\",\n+        expectedClass.getSimpleName());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void checkInterfaceCompatibility(Class\u003c?\u003e expectedClass,\n      Class\u003c?\u003e actualClass) throws YarnRuntimeException{\n    LOG.debug(\"Checking implemented interface\u0027s compatibility: {}\",\n        expectedClass.getSimpleName());\n    Method[] expectedDevicePluginMethods \u003d expectedClass.getMethods();\n\n    // Check method compatibility\n    boolean found;\n    for (Method method: expectedDevicePluginMethods) {\n      found \u003d false;\n      LOG.debug(\"Try to find method: {}\",\n          method.getName());\n      for (Method m : actualClass.getDeclaredMethods()) {\n        if (m.getName().equals(method.getName())) {\n          LOG.debug(\"Method {} found in class {}\",\n              actualClass.getSimpleName(),\n              m.getName());\n          found \u003d true;\n          break;\n        }\n      }\n      if (!found) {\n        LOG.error(\"Method {} is not found in plugin\",\n            method.getName());\n        throw new YarnRuntimeException(\n            \"Method \" + method.getName()\n                + \" is expected but not implemented in \"\n                + actualClass.getCanonicalName());\n      }\n    }// end for\n    LOG.info(\"{} compatibility is ok.\",\n        expectedClass.getSimpleName());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/ResourcePluginManager.java"
    }
  }
}