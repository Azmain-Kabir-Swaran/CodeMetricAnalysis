{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RunJar.java",
  "functionName": "unJar",
  "functionId": "unJar___jarFile-File__toDir-File__unpackRegex-Pattern",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java",
  "functionStartLine": 186,
  "functionEndLine": 217,
  "numCommitsSeen": 31,
  "timeTaken": 2706,
  "changeHistory": [
    "7a3188d054481b9bd563e337901e93476303ce7f",
    "e3236a9680709de7a95ffbc11b20e1bdc95a8605",
    "f343d91ecc0d1c6d9dc9810faf68ec04f7b07c2f",
    "3337ef2bfecb63f7f238ab72bbde62a0bbb4288d",
    "a126a01fa197beebe955837c8f2efbd3257f7aa5",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "a473f3773342695cdb47e3ae4fe432b81e7787fd",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "7a3188d054481b9bd563e337901e93476303ce7f": "Ybodychange",
    "e3236a9680709de7a95ffbc11b20e1bdc95a8605": "Ybodychange",
    "f343d91ecc0d1c6d9dc9810faf68ec04f7b07c2f": "Ybodychange",
    "3337ef2bfecb63f7f238ab72bbde62a0bbb4288d": "Ybodychange",
    "a126a01fa197beebe955837c8f2efbd3257f7aa5": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "a473f3773342695cdb47e3ae4fe432b81e7787fd": "Ymultichange(Yparameterchange,Ybodychange)",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7a3188d054481b9bd563e337901e93476303ce7f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16282. Avoid FileStream to improve performance. Contributed by Ayush Saxena.\n",
      "commitDate": "02/05/19 12:58 PM",
      "commitName": "7a3188d054481b9bd563e337901e93476303ce7f",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "29/05/18 12:15 PM",
      "commitNameOld": "e3236a9680709de7a95ffbc11b20e1bdc95a8605",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 338.03,
      "commitsBetweenForRepo": 2580,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   public static void unJar(File jarFile, File toDir, Pattern unpackRegex)\n       throws IOException {\n     try (JarFile jar \u003d new JarFile(jarFile)) {\n       int numOfFailedLastModifiedSet \u003d 0;\n       String targetDirPath \u003d toDir.getCanonicalPath() + File.separator;\n       Enumeration\u003cJarEntry\u003e entries \u003d jar.entries();\n       while (entries.hasMoreElements()) {\n         final JarEntry entry \u003d entries.nextElement();\n         if (!entry.isDirectory() \u0026\u0026\n             unpackRegex.matcher(entry.getName()).matches()) {\n           try (InputStream in \u003d jar.getInputStream(entry)) {\n             File file \u003d new File(toDir, entry.getName());\n             if (!file.getCanonicalPath().startsWith(targetDirPath)) {\n               throw new IOException(\"expanding \" + entry.getName()\n                   + \" would create file outside of \" + toDir);\n             }\n             ensureDirectory(file.getParentFile());\n-            try (OutputStream out \u003d new FileOutputStream(file)) {\n+            try (OutputStream out \u003d Files.newOutputStream(file.toPath())) {\n               IOUtils.copyBytes(in, out, BUFFER_SIZE);\n             }\n             if (!file.setLastModified(entry.getTime())) {\n               numOfFailedLastModifiedSet++;\n             }\n           }\n         }\n       }\n       if (numOfFailedLastModifiedSet \u003e 0) {\n         LOG.warn(\"Could not set last modfied time for {} file(s)\",\n             numOfFailedLastModifiedSet);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void unJar(File jarFile, File toDir, Pattern unpackRegex)\n      throws IOException {\n    try (JarFile jar \u003d new JarFile(jarFile)) {\n      int numOfFailedLastModifiedSet \u003d 0;\n      String targetDirPath \u003d toDir.getCanonicalPath() + File.separator;\n      Enumeration\u003cJarEntry\u003e entries \u003d jar.entries();\n      while (entries.hasMoreElements()) {\n        final JarEntry entry \u003d entries.nextElement();\n        if (!entry.isDirectory() \u0026\u0026\n            unpackRegex.matcher(entry.getName()).matches()) {\n          try (InputStream in \u003d jar.getInputStream(entry)) {\n            File file \u003d new File(toDir, entry.getName());\n            if (!file.getCanonicalPath().startsWith(targetDirPath)) {\n              throw new IOException(\"expanding \" + entry.getName()\n                  + \" would create file outside of \" + toDir);\n            }\n            ensureDirectory(file.getParentFile());\n            try (OutputStream out \u003d Files.newOutputStream(file.toPath())) {\n              IOUtils.copyBytes(in, out, BUFFER_SIZE);\n            }\n            if (!file.setLastModified(entry.getTime())) {\n              numOfFailedLastModifiedSet++;\n            }\n          }\n        }\n      }\n      if (numOfFailedLastModifiedSet \u003e 0) {\n        LOG.warn(\"Could not set last modfied time for {} file(s)\",\n            numOfFailedLastModifiedSet);\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java",
      "extendedDetails": {}
    },
    "e3236a9680709de7a95ffbc11b20e1bdc95a8605": {
      "type": "Ybodychange",
      "commitMessage": "Additional check when unpacking archives. Contributed by Wilfred Spiegelenburg.\n",
      "commitDate": "29/05/18 12:15 PM",
      "commitName": "e3236a9680709de7a95ffbc11b20e1bdc95a8605",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "28/05/18 1:29 AM",
      "commitNameOld": "d14e26b31fe46fb47a8e99a212c70016fd15a4d9",
      "commitAuthorOld": "Johan Gustavsson",
      "daysBetweenCommits": 1.45,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,32 @@\n   public static void unJar(File jarFile, File toDir, Pattern unpackRegex)\n       throws IOException {\n     try (JarFile jar \u003d new JarFile(jarFile)) {\n       int numOfFailedLastModifiedSet \u003d 0;\n+      String targetDirPath \u003d toDir.getCanonicalPath() + File.separator;\n       Enumeration\u003cJarEntry\u003e entries \u003d jar.entries();\n       while (entries.hasMoreElements()) {\n         final JarEntry entry \u003d entries.nextElement();\n         if (!entry.isDirectory() \u0026\u0026\n             unpackRegex.matcher(entry.getName()).matches()) {\n           try (InputStream in \u003d jar.getInputStream(entry)) {\n             File file \u003d new File(toDir, entry.getName());\n+            if (!file.getCanonicalPath().startsWith(targetDirPath)) {\n+              throw new IOException(\"expanding \" + entry.getName()\n+                  + \" would create file outside of \" + toDir);\n+            }\n             ensureDirectory(file.getParentFile());\n             try (OutputStream out \u003d new FileOutputStream(file)) {\n               IOUtils.copyBytes(in, out, BUFFER_SIZE);\n             }\n             if (!file.setLastModified(entry.getTime())) {\n               numOfFailedLastModifiedSet++;\n             }\n           }\n         }\n       }\n       if (numOfFailedLastModifiedSet \u003e 0) {\n         LOG.warn(\"Could not set last modfied time for {} file(s)\",\n             numOfFailedLastModifiedSet);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void unJar(File jarFile, File toDir, Pattern unpackRegex)\n      throws IOException {\n    try (JarFile jar \u003d new JarFile(jarFile)) {\n      int numOfFailedLastModifiedSet \u003d 0;\n      String targetDirPath \u003d toDir.getCanonicalPath() + File.separator;\n      Enumeration\u003cJarEntry\u003e entries \u003d jar.entries();\n      while (entries.hasMoreElements()) {\n        final JarEntry entry \u003d entries.nextElement();\n        if (!entry.isDirectory() \u0026\u0026\n            unpackRegex.matcher(entry.getName()).matches()) {\n          try (InputStream in \u003d jar.getInputStream(entry)) {\n            File file \u003d new File(toDir, entry.getName());\n            if (!file.getCanonicalPath().startsWith(targetDirPath)) {\n              throw new IOException(\"expanding \" + entry.getName()\n                  + \" would create file outside of \" + toDir);\n            }\n            ensureDirectory(file.getParentFile());\n            try (OutputStream out \u003d new FileOutputStream(file)) {\n              IOUtils.copyBytes(in, out, BUFFER_SIZE);\n            }\n            if (!file.setLastModified(entry.getTime())) {\n              numOfFailedLastModifiedSet++;\n            }\n          }\n        }\n      }\n      if (numOfFailedLastModifiedSet \u003e 0) {\n        LOG.warn(\"Could not set last modfied time for {} file(s)\",\n            numOfFailedLastModifiedSet);\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java",
      "extendedDetails": {}
    },
    "f343d91ecc0d1c6d9dc9810faf68ec04f7b07c2f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13068. Clean up RunJar and related test class. (Contributed by Andras Bokor)\n",
      "commitDate": "04/05/16 9:49 AM",
      "commitName": "f343d91ecc0d1c6d9dc9810faf68ec04f7b07c2f",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "27/04/16 10:06 AM",
      "commitNameOld": "3337ef2bfecb63f7f238ab72bbde62a0bbb4288d",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 6.99,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,27 @@\n   public static void unJar(File jarFile, File toDir, Pattern unpackRegex)\n-    throws IOException {\n-    JarFile jar \u003d new JarFile(jarFile);\n-    try {\n+      throws IOException {\n+    try (JarFile jar \u003d new JarFile(jarFile)) {\n       int numOfFailedLastModifiedSet \u003d 0;\n       Enumeration\u003cJarEntry\u003e entries \u003d jar.entries();\n       while (entries.hasMoreElements()) {\n         final JarEntry entry \u003d entries.nextElement();\n         if (!entry.isDirectory() \u0026\u0026\n             unpackRegex.matcher(entry.getName()).matches()) {\n-          InputStream in \u003d jar.getInputStream(entry);\n-          try {\n+          try (InputStream in \u003d jar.getInputStream(entry)) {\n             File file \u003d new File(toDir, entry.getName());\n             ensureDirectory(file.getParentFile());\n-            OutputStream out \u003d new FileOutputStream(file);\n-            try {\n-              IOUtils.copyBytes(in, out, 8192);\n-            } finally {\n-              out.close();\n+            try (OutputStream out \u003d new FileOutputStream(file)) {\n+              IOUtils.copyBytes(in, out, BUFFER_SIZE);\n             }\n             if (!file.setLastModified(entry.getTime())) {\n               numOfFailedLastModifiedSet++;\n             }\n-          } finally {\n-            in.close();\n           }\n         }\n       }\n       if (numOfFailedLastModifiedSet \u003e 0) {\n         LOG.warn(\"Could not set last modfied time for {} file(s)\",\n-                numOfFailedLastModifiedSet);\n+            numOfFailedLastModifiedSet);\n       }\n-    } finally {\n-      jar.close();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void unJar(File jarFile, File toDir, Pattern unpackRegex)\n      throws IOException {\n    try (JarFile jar \u003d new JarFile(jarFile)) {\n      int numOfFailedLastModifiedSet \u003d 0;\n      Enumeration\u003cJarEntry\u003e entries \u003d jar.entries();\n      while (entries.hasMoreElements()) {\n        final JarEntry entry \u003d entries.nextElement();\n        if (!entry.isDirectory() \u0026\u0026\n            unpackRegex.matcher(entry.getName()).matches()) {\n          try (InputStream in \u003d jar.getInputStream(entry)) {\n            File file \u003d new File(toDir, entry.getName());\n            ensureDirectory(file.getParentFile());\n            try (OutputStream out \u003d new FileOutputStream(file)) {\n              IOUtils.copyBytes(in, out, BUFFER_SIZE);\n            }\n            if (!file.setLastModified(entry.getTime())) {\n              numOfFailedLastModifiedSet++;\n            }\n          }\n        }\n      }\n      if (numOfFailedLastModifiedSet \u003e 0) {\n        LOG.warn(\"Could not set last modfied time for {} file(s)\",\n            numOfFailedLastModifiedSet);\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java",
      "extendedDetails": {}
    },
    "3337ef2bfecb63f7f238ab72bbde62a0bbb4288d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-5470. RunJar.unJar() should write the last modified time found in the jar entry to the uncompressed file. (Contributed by Andras Bakor)\n",
      "commitDate": "27/04/16 10:06 AM",
      "commitName": "3337ef2bfecb63f7f238ab72bbde62a0bbb4288d",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "30/07/15 9:42 PM",
      "commitNameOld": "2087eaf684d9fb14b5390e21bf17e93ac8fea7f8",
      "commitAuthorOld": "Harsh J",
      "daysBetweenCommits": 271.52,
      "commitsBetweenForRepo": 1780,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,36 @@\n   public static void unJar(File jarFile, File toDir, Pattern unpackRegex)\n     throws IOException {\n     JarFile jar \u003d new JarFile(jarFile);\n     try {\n+      int numOfFailedLastModifiedSet \u003d 0;\n       Enumeration\u003cJarEntry\u003e entries \u003d jar.entries();\n       while (entries.hasMoreElements()) {\n         final JarEntry entry \u003d entries.nextElement();\n         if (!entry.isDirectory() \u0026\u0026\n             unpackRegex.matcher(entry.getName()).matches()) {\n           InputStream in \u003d jar.getInputStream(entry);\n           try {\n             File file \u003d new File(toDir, entry.getName());\n             ensureDirectory(file.getParentFile());\n             OutputStream out \u003d new FileOutputStream(file);\n             try {\n               IOUtils.copyBytes(in, out, 8192);\n             } finally {\n               out.close();\n             }\n+            if (!file.setLastModified(entry.getTime())) {\n+              numOfFailedLastModifiedSet++;\n+            }\n           } finally {\n             in.close();\n           }\n         }\n       }\n+      if (numOfFailedLastModifiedSet \u003e 0) {\n+        LOG.warn(\"Could not set last modfied time for {} file(s)\",\n+                numOfFailedLastModifiedSet);\n+      }\n     } finally {\n       jar.close();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void unJar(File jarFile, File toDir, Pattern unpackRegex)\n    throws IOException {\n    JarFile jar \u003d new JarFile(jarFile);\n    try {\n      int numOfFailedLastModifiedSet \u003d 0;\n      Enumeration\u003cJarEntry\u003e entries \u003d jar.entries();\n      while (entries.hasMoreElements()) {\n        final JarEntry entry \u003d entries.nextElement();\n        if (!entry.isDirectory() \u0026\u0026\n            unpackRegex.matcher(entry.getName()).matches()) {\n          InputStream in \u003d jar.getInputStream(entry);\n          try {\n            File file \u003d new File(toDir, entry.getName());\n            ensureDirectory(file.getParentFile());\n            OutputStream out \u003d new FileOutputStream(file);\n            try {\n              IOUtils.copyBytes(in, out, 8192);\n            } finally {\n              out.close();\n            }\n            if (!file.setLastModified(entry.getTime())) {\n              numOfFailedLastModifiedSet++;\n            }\n          } finally {\n            in.close();\n          }\n        }\n      }\n      if (numOfFailedLastModifiedSet \u003e 0) {\n        LOG.warn(\"Could not set last modfied time for {} file(s)\",\n                numOfFailedLastModifiedSet);\n      }\n    } finally {\n      jar.close();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java",
      "extendedDetails": {}
    },
    "a126a01fa197beebe955837c8f2efbd3257f7aa5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10437. Fix the javac warnings in the conf and the util package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1582015 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/03/14 12:03 PM",
      "commitName": "a126a01fa197beebe955837c8f2efbd3257f7aa5",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "22/10/12 8:55 AM",
      "commitNameOld": "0dc26819001474272cc044dd1fdb495aeaba8cac",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 520.13,
      "commitsBetweenForRepo": 3257,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   public static void unJar(File jarFile, File toDir, Pattern unpackRegex)\n     throws IOException {\n     JarFile jar \u003d new JarFile(jarFile);\n     try {\n       Enumeration\u003cJarEntry\u003e entries \u003d jar.entries();\n       while (entries.hasMoreElements()) {\n-        JarEntry entry \u003d (JarEntry)entries.nextElement();\n+        final JarEntry entry \u003d entries.nextElement();\n         if (!entry.isDirectory() \u0026\u0026\n             unpackRegex.matcher(entry.getName()).matches()) {\n           InputStream in \u003d jar.getInputStream(entry);\n           try {\n             File file \u003d new File(toDir, entry.getName());\n             ensureDirectory(file.getParentFile());\n             OutputStream out \u003d new FileOutputStream(file);\n             try {\n               IOUtils.copyBytes(in, out, 8192);\n             } finally {\n               out.close();\n             }\n           } finally {\n             in.close();\n           }\n         }\n       }\n     } finally {\n       jar.close();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void unJar(File jarFile, File toDir, Pattern unpackRegex)\n    throws IOException {\n    JarFile jar \u003d new JarFile(jarFile);\n    try {\n      Enumeration\u003cJarEntry\u003e entries \u003d jar.entries();\n      while (entries.hasMoreElements()) {\n        final JarEntry entry \u003d entries.nextElement();\n        if (!entry.isDirectory() \u0026\u0026\n            unpackRegex.matcher(entry.getName()).matches()) {\n          InputStream in \u003d jar.getInputStream(entry);\n          try {\n            File file \u003d new File(toDir, entry.getName());\n            ensureDirectory(file.getParentFile());\n            OutputStream out \u003d new FileOutputStream(file);\n            try {\n              IOUtils.copyBytes(in, out, 8192);\n            } finally {\n              out.close();\n            }\n          } finally {\n            in.close();\n          }\n        }\n      }\n    } finally {\n      jar.close();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static void unJar(File jarFile, File toDir, Pattern unpackRegex)\n    throws IOException {\n    JarFile jar \u003d new JarFile(jarFile);\n    try {\n      Enumeration\u003cJarEntry\u003e entries \u003d jar.entries();\n      while (entries.hasMoreElements()) {\n        JarEntry entry \u003d (JarEntry)entries.nextElement();\n        if (!entry.isDirectory() \u0026\u0026\n            unpackRegex.matcher(entry.getName()).matches()) {\n          InputStream in \u003d jar.getInputStream(entry);\n          try {\n            File file \u003d new File(toDir, entry.getName());\n            ensureDirectory(file.getParentFile());\n            OutputStream out \u003d new FileOutputStream(file);\n            try {\n              IOUtils.copyBytes(in, out, 8192);\n            } finally {\n              out.close();\n            }\n          } finally {\n            in.close();\n          }\n        }\n      }\n    } finally {\n      jar.close();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static void unJar(File jarFile, File toDir, Pattern unpackRegex)\n    throws IOException {\n    JarFile jar \u003d new JarFile(jarFile);\n    try {\n      Enumeration\u003cJarEntry\u003e entries \u003d jar.entries();\n      while (entries.hasMoreElements()) {\n        JarEntry entry \u003d (JarEntry)entries.nextElement();\n        if (!entry.isDirectory() \u0026\u0026\n            unpackRegex.matcher(entry.getName()).matches()) {\n          InputStream in \u003d jar.getInputStream(entry);\n          try {\n            File file \u003d new File(toDir, entry.getName());\n            ensureDirectory(file.getParentFile());\n            OutputStream out \u003d new FileOutputStream(file);\n            try {\n              IOUtils.copyBytes(in, out, 8192);\n            } finally {\n              out.close();\n            }\n          } finally {\n            in.close();\n          }\n        }\n      }\n    } finally {\n      jar.close();\n    }\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/util/RunJar.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static void unJar(File jarFile, File toDir, Pattern unpackRegex)\n    throws IOException {\n    JarFile jar \u003d new JarFile(jarFile);\n    try {\n      Enumeration\u003cJarEntry\u003e entries \u003d jar.entries();\n      while (entries.hasMoreElements()) {\n        JarEntry entry \u003d (JarEntry)entries.nextElement();\n        if (!entry.isDirectory() \u0026\u0026\n            unpackRegex.matcher(entry.getName()).matches()) {\n          InputStream in \u003d jar.getInputStream(entry);\n          try {\n            File file \u003d new File(toDir, entry.getName());\n            ensureDirectory(file.getParentFile());\n            OutputStream out \u003d new FileOutputStream(file);\n            try {\n              IOUtils.copyBytes(in, out, 8192);\n            } finally {\n              out.close();\n            }\n          } finally {\n            in.close();\n          }\n        }\n      }\n    } finally {\n      jar.close();\n    }\n  }",
      "path": "common/src/java/org/apache/hadoop/util/RunJar.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/util/RunJar.java",
        "newPath": "common/src/java/org/apache/hadoop/util/RunJar.java"
      }
    },
    "a473f3773342695cdb47e3ae4fe432b81e7787fd": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-6346. Add support for specifying unpack pattern regex to RunJar.unJar. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@889018 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/12/09 3:25 PM",
      "commitName": "a473f3773342695cdb47e3ae4fe432b81e7787fd",
      "commitAuthor": "Thomas White",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-6346. Add support for specifying unpack pattern regex to RunJar.unJar. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@889018 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "09/12/09 3:25 PM",
          "commitName": "a473f3773342695cdb47e3ae4fe432b81e7787fd",
          "commitAuthor": "Thomas White",
          "commitDateOld": "15/06/09 1:28 PM",
          "commitNameOld": "bcd64325a11cb0dd5096ffc093d0ffa68c4fcc58",
          "commitAuthorOld": "Owen O\u0027Malley",
          "daysBetweenCommits": 177.12,
          "commitsBetweenForRepo": 159,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,28 @@\n-  public static void unJar(File jarFile, File toDir) throws IOException {\n+  public static void unJar(File jarFile, File toDir, Pattern unpackRegex)\n+    throws IOException {\n     JarFile jar \u003d new JarFile(jarFile);\n     try {\n-      Enumeration entries \u003d jar.entries();\n+      Enumeration\u003cJarEntry\u003e entries \u003d jar.entries();\n       while (entries.hasMoreElements()) {\n         JarEntry entry \u003d (JarEntry)entries.nextElement();\n-        if (!entry.isDirectory()) {\n+        if (!entry.isDirectory() \u0026\u0026\n+            unpackRegex.matcher(entry.getName()).matches()) {\n           InputStream in \u003d jar.getInputStream(entry);\n           try {\n             File file \u003d new File(toDir, entry.getName());\n-            if (!file.getParentFile().mkdirs()) {\n-              if (!file.getParentFile().isDirectory()) {\n-                throw new IOException(\"Mkdirs failed to create \" + \n-                                      file.getParentFile().toString());\n-              }\n-            }\n+            ensureDirectory(file.getParentFile());\n             OutputStream out \u003d new FileOutputStream(file);\n             try {\n-              byte[] buffer \u003d new byte[8192];\n-              int i;\n-              while ((i \u003d in.read(buffer)) !\u003d -1) {\n-                out.write(buffer, 0, i);\n-              }\n+              IOUtils.copyBytes(in, out, 8192);\n             } finally {\n               out.close();\n             }\n           } finally {\n             in.close();\n           }\n         }\n       }\n     } finally {\n       jar.close();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void unJar(File jarFile, File toDir, Pattern unpackRegex)\n    throws IOException {\n    JarFile jar \u003d new JarFile(jarFile);\n    try {\n      Enumeration\u003cJarEntry\u003e entries \u003d jar.entries();\n      while (entries.hasMoreElements()) {\n        JarEntry entry \u003d (JarEntry)entries.nextElement();\n        if (!entry.isDirectory() \u0026\u0026\n            unpackRegex.matcher(entry.getName()).matches()) {\n          InputStream in \u003d jar.getInputStream(entry);\n          try {\n            File file \u003d new File(toDir, entry.getName());\n            ensureDirectory(file.getParentFile());\n            OutputStream out \u003d new FileOutputStream(file);\n            try {\n              IOUtils.copyBytes(in, out, 8192);\n            } finally {\n              out.close();\n            }\n          } finally {\n            in.close();\n          }\n        }\n      }\n    } finally {\n      jar.close();\n    }\n  }",
          "path": "src/java/org/apache/hadoop/util/RunJar.java",
          "extendedDetails": {
            "oldValue": "[jarFile-File, toDir-File]",
            "newValue": "[jarFile-File, toDir-File, unpackRegex-Pattern]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-6346. Add support for specifying unpack pattern regex to RunJar.unJar. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@889018 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "09/12/09 3:25 PM",
          "commitName": "a473f3773342695cdb47e3ae4fe432b81e7787fd",
          "commitAuthor": "Thomas White",
          "commitDateOld": "15/06/09 1:28 PM",
          "commitNameOld": "bcd64325a11cb0dd5096ffc093d0ffa68c4fcc58",
          "commitAuthorOld": "Owen O\u0027Malley",
          "daysBetweenCommits": 177.12,
          "commitsBetweenForRepo": 159,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,28 @@\n-  public static void unJar(File jarFile, File toDir) throws IOException {\n+  public static void unJar(File jarFile, File toDir, Pattern unpackRegex)\n+    throws IOException {\n     JarFile jar \u003d new JarFile(jarFile);\n     try {\n-      Enumeration entries \u003d jar.entries();\n+      Enumeration\u003cJarEntry\u003e entries \u003d jar.entries();\n       while (entries.hasMoreElements()) {\n         JarEntry entry \u003d (JarEntry)entries.nextElement();\n-        if (!entry.isDirectory()) {\n+        if (!entry.isDirectory() \u0026\u0026\n+            unpackRegex.matcher(entry.getName()).matches()) {\n           InputStream in \u003d jar.getInputStream(entry);\n           try {\n             File file \u003d new File(toDir, entry.getName());\n-            if (!file.getParentFile().mkdirs()) {\n-              if (!file.getParentFile().isDirectory()) {\n-                throw new IOException(\"Mkdirs failed to create \" + \n-                                      file.getParentFile().toString());\n-              }\n-            }\n+            ensureDirectory(file.getParentFile());\n             OutputStream out \u003d new FileOutputStream(file);\n             try {\n-              byte[] buffer \u003d new byte[8192];\n-              int i;\n-              while ((i \u003d in.read(buffer)) !\u003d -1) {\n-                out.write(buffer, 0, i);\n-              }\n+              IOUtils.copyBytes(in, out, 8192);\n             } finally {\n               out.close();\n             }\n           } finally {\n             in.close();\n           }\n         }\n       }\n     } finally {\n       jar.close();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void unJar(File jarFile, File toDir, Pattern unpackRegex)\n    throws IOException {\n    JarFile jar \u003d new JarFile(jarFile);\n    try {\n      Enumeration\u003cJarEntry\u003e entries \u003d jar.entries();\n      while (entries.hasMoreElements()) {\n        JarEntry entry \u003d (JarEntry)entries.nextElement();\n        if (!entry.isDirectory() \u0026\u0026\n            unpackRegex.matcher(entry.getName()).matches()) {\n          InputStream in \u003d jar.getInputStream(entry);\n          try {\n            File file \u003d new File(toDir, entry.getName());\n            ensureDirectory(file.getParentFile());\n            OutputStream out \u003d new FileOutputStream(file);\n            try {\n              IOUtils.copyBytes(in, out, 8192);\n            } finally {\n              out.close();\n            }\n          } finally {\n            in.close();\n          }\n        }\n      }\n    } finally {\n      jar.close();\n    }\n  }",
          "path": "src/java/org/apache/hadoop/util/RunJar.java",
          "extendedDetails": {}
        }
      ]
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,35 @@\n+  public static void unJar(File jarFile, File toDir) throws IOException {\n+    JarFile jar \u003d new JarFile(jarFile);\n+    try {\n+      Enumeration entries \u003d jar.entries();\n+      while (entries.hasMoreElements()) {\n+        JarEntry entry \u003d (JarEntry)entries.nextElement();\n+        if (!entry.isDirectory()) {\n+          InputStream in \u003d jar.getInputStream(entry);\n+          try {\n+            File file \u003d new File(toDir, entry.getName());\n+            if (!file.getParentFile().mkdirs()) {\n+              if (!file.getParentFile().isDirectory()) {\n+                throw new IOException(\"Mkdirs failed to create \" + \n+                                      file.getParentFile().toString());\n+              }\n+            }\n+            OutputStream out \u003d new FileOutputStream(file);\n+            try {\n+              byte[] buffer \u003d new byte[8192];\n+              int i;\n+              while ((i \u003d in.read(buffer)) !\u003d -1) {\n+                out.write(buffer, 0, i);\n+              }\n+            } finally {\n+              out.close();\n+            }\n+          } finally {\n+            in.close();\n+          }\n+        }\n+      }\n+    } finally {\n+      jar.close();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static void unJar(File jarFile, File toDir) throws IOException {\n    JarFile jar \u003d new JarFile(jarFile);\n    try {\n      Enumeration entries \u003d jar.entries();\n      while (entries.hasMoreElements()) {\n        JarEntry entry \u003d (JarEntry)entries.nextElement();\n        if (!entry.isDirectory()) {\n          InputStream in \u003d jar.getInputStream(entry);\n          try {\n            File file \u003d new File(toDir, entry.getName());\n            if (!file.getParentFile().mkdirs()) {\n              if (!file.getParentFile().isDirectory()) {\n                throw new IOException(\"Mkdirs failed to create \" + \n                                      file.getParentFile().toString());\n              }\n            }\n            OutputStream out \u003d new FileOutputStream(file);\n            try {\n              byte[] buffer \u003d new byte[8192];\n              int i;\n              while ((i \u003d in.read(buffer)) !\u003d -1) {\n                out.write(buffer, 0, i);\n              }\n            } finally {\n              out.close();\n            }\n          } finally {\n            in.close();\n          }\n        }\n      }\n    } finally {\n      jar.close();\n    }\n  }",
      "path": "src/java/org/apache/hadoop/util/RunJar.java"
    }
  }
}