{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "INodeFile.java",
  "functionName": "storagespaceConsumedContiguous",
  "functionId": "storagespaceConsumedContiguous___bsp-BlockStoragePolicy",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeFile.java",
  "functionStartLine": 1023,
  "functionEndLine": 1058,
  "numCommitsSeen": 163,
  "timeTaken": 1855,
  "changeHistory": [
    "6ea7d78ccb0d1c4af9bcac02a4cff89bdffff252"
  ],
  "changeHistoryShort": {
    "6ea7d78ccb0d1c4af9bcac02a4cff89bdffff252": "Ybodychange"
  },
  "changeHistoryDetails": {
    "6ea7d78ccb0d1c4af9bcac02a4cff89bdffff252": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13142. Define and Implement a DiifList Interface to store and manage SnapshotDiffs.  Contributed by Shashikant Banerjee\n",
      "commitDate": "15/02/18 3:33 AM",
      "commitName": "6ea7d78ccb0d1c4af9bcac02a4cff89bdffff252",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "08/01/18 3:34 PM",
      "commitNameOld": "73ff09b79a5cf9932edc21c58f3a730f7379086b",
      "commitAuthorOld": "Manoj Govindassamy",
      "daysBetweenCommits": 37.5,
      "commitsBetweenForRepo": 234,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   public final QuotaCounts storagespaceConsumedContiguous(\n       BlockStoragePolicy bsp) {\n     QuotaCounts counts \u003d new QuotaCounts.Builder().build();\n     final Iterable\u003cBlockInfo\u003e blocks;\n     FileWithSnapshotFeature sf \u003d getFileWithSnapshotFeature();\n     if (sf \u003d\u003d null) {\n       blocks \u003d Arrays.asList(getBlocks());\n     } else {\n       // Collect all distinct blocks\n       Set\u003cBlockInfo\u003e allBlocks \u003d new HashSet\u003c\u003e(Arrays.asList(getBlocks()));\n-      List\u003cFileDiff\u003e diffs \u003d sf.getDiffs().asList();\n+      DiffList\u003cFileDiff\u003e diffs \u003d sf.getDiffs().asList();\n       for(FileDiff diff : diffs) {\n         BlockInfo[] diffBlocks \u003d diff.getBlocks();\n         if (diffBlocks !\u003d null) {\n           allBlocks.addAll(Arrays.asList(diffBlocks));\n         }\n       }\n       blocks \u003d allBlocks;\n     }\n \n     final short replication \u003d getPreferredBlockReplication();\n     for (BlockInfo b : blocks) {\n       long blockSize \u003d b.isComplete() ? b.getNumBytes() :\n           getPreferredBlockSize();\n       counts.addStorageSpace(blockSize * replication);\n       if (bsp !\u003d null) {\n         List\u003cStorageType\u003e types \u003d bsp.chooseStorageTypes(replication);\n         for (StorageType t : types) {\n           if (t.supportTypeQuota()) {\n             counts.addTypeSpace(t, blockSize);\n           }\n         }\n       }\n     }\n     return counts;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public final QuotaCounts storagespaceConsumedContiguous(\n      BlockStoragePolicy bsp) {\n    QuotaCounts counts \u003d new QuotaCounts.Builder().build();\n    final Iterable\u003cBlockInfo\u003e blocks;\n    FileWithSnapshotFeature sf \u003d getFileWithSnapshotFeature();\n    if (sf \u003d\u003d null) {\n      blocks \u003d Arrays.asList(getBlocks());\n    } else {\n      // Collect all distinct blocks\n      Set\u003cBlockInfo\u003e allBlocks \u003d new HashSet\u003c\u003e(Arrays.asList(getBlocks()));\n      DiffList\u003cFileDiff\u003e diffs \u003d sf.getDiffs().asList();\n      for(FileDiff diff : diffs) {\n        BlockInfo[] diffBlocks \u003d diff.getBlocks();\n        if (diffBlocks !\u003d null) {\n          allBlocks.addAll(Arrays.asList(diffBlocks));\n        }\n      }\n      blocks \u003d allBlocks;\n    }\n\n    final short replication \u003d getPreferredBlockReplication();\n    for (BlockInfo b : blocks) {\n      long blockSize \u003d b.isComplete() ? b.getNumBytes() :\n          getPreferredBlockSize();\n      counts.addStorageSpace(blockSize * replication);\n      if (bsp !\u003d null) {\n        List\u003cStorageType\u003e types \u003d bsp.chooseStorageTypes(replication);\n        for (StorageType t : types) {\n          if (t.supportTypeQuota()) {\n            counts.addTypeSpace(t, blockSize);\n          }\n        }\n      }\n    }\n    return counts;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/INodeFile.java",
      "extendedDetails": {}
    }
  }
}