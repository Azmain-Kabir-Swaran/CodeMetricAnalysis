{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JournalNodeSyncer.java",
  "functionName": "getMissingLogList",
  "functionId": "getMissingLogList___thisJournalEditLogs-List__RemoteEditLog____otherJournalEditLogs-List__RemoteEditLog__",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNodeSyncer.java",
  "functionStartLine": 376,
  "functionEndLine": 413,
  "numCommitsSeen": 14,
  "timeTaken": 1480,
  "changeHistory": [
    "11615631360ba49c1e9d256ed4f65119d99fd67d",
    "13d4bcfe3535a2df79c2a56e7578716d15497ff4"
  ],
  "changeHistoryShort": {
    "11615631360ba49c1e9d256ed4f65119d99fd67d": "Ybodychange",
    "13d4bcfe3535a2df79c2a56e7578716d15497ff4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "11615631360ba49c1e9d256ed4f65119d99fd67d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11879. Fix JN sync interval in case of exception. Contributed by Hanisha Koneru.\n",
      "commitDate": "25/05/17 2:01 PM",
      "commitName": "11615631360ba49c1e9d256ed4f65119d99fd67d",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "25/05/17 10:42 AM",
      "commitNameOld": "4fb41b31dbc109f11898ea6d8fc0bb3e6c20d89b",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 0.14,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   private List\u003cRemoteEditLog\u003e getMissingLogList(\n       List\u003cRemoteEditLog\u003e thisJournalEditLogs,\n       List\u003cRemoteEditLog\u003e otherJournalEditLogs) {\n     if (thisJournalEditLogs.isEmpty()) {\n       return otherJournalEditLogs;\n     }\n \n     List\u003cRemoteEditLog\u003e missingEditLogs \u003d Lists.newArrayList();\n \n-    int thisJnIndex \u003d 0, otherJnIndex \u003d 0;\n-    int thisJnNumLogs \u003d thisJournalEditLogs.size();\n-    int otherJnNumLogs \u003d otherJournalEditLogs.size();\n+    int localJnIndex \u003d 0, remoteJnIndex \u003d 0;\n+    int localJnNumLogs \u003d thisJournalEditLogs.size();\n+    int remoteJnNumLogs \u003d otherJournalEditLogs.size();\n \n-    while (thisJnIndex \u003c thisJnNumLogs \u0026\u0026 otherJnIndex \u003c otherJnNumLogs) {\n-      long localJNstartTxId \u003d thisJournalEditLogs.get(thisJnIndex)\n+    while (localJnIndex \u003c localJnNumLogs \u0026\u0026 remoteJnIndex \u003c remoteJnNumLogs) {\n+      long localJNstartTxId \u003d thisJournalEditLogs.get(localJnIndex)\n           .getStartTxId();\n-      long remoteJNstartTxId \u003d otherJournalEditLogs.get(otherJnIndex)\n+      long remoteJNstartTxId \u003d otherJournalEditLogs.get(remoteJnIndex)\n           .getStartTxId();\n \n       if (localJNstartTxId \u003d\u003d remoteJNstartTxId) {\n-        thisJnIndex++;\n-        otherJnIndex++;\n+        localJnIndex++;\n+        remoteJnIndex++;\n       } else if (localJNstartTxId \u003e remoteJNstartTxId) {\n-        missingEditLogs.add(otherJournalEditLogs.get(otherJnIndex));\n-        otherJnIndex++;\n+        missingEditLogs.add(otherJournalEditLogs.get(remoteJnIndex));\n+        remoteJnIndex++;\n       } else {\n-        thisJnIndex++;\n+        localJnIndex++;\n       }\n     }\n \n-    if (otherJnIndex \u003c otherJnNumLogs) {\n-      for (; otherJnIndex \u003c otherJnNumLogs; otherJnIndex++) {\n-        missingEditLogs.add(otherJournalEditLogs.get(otherJnIndex));\n+    if (remoteJnIndex \u003c remoteJnNumLogs) {\n+      for (; remoteJnIndex \u003c remoteJnNumLogs; remoteJnIndex++) {\n+        missingEditLogs.add(otherJournalEditLogs.get(remoteJnIndex));\n       }\n     }\n \n     return missingEditLogs;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cRemoteEditLog\u003e getMissingLogList(\n      List\u003cRemoteEditLog\u003e thisJournalEditLogs,\n      List\u003cRemoteEditLog\u003e otherJournalEditLogs) {\n    if (thisJournalEditLogs.isEmpty()) {\n      return otherJournalEditLogs;\n    }\n\n    List\u003cRemoteEditLog\u003e missingEditLogs \u003d Lists.newArrayList();\n\n    int localJnIndex \u003d 0, remoteJnIndex \u003d 0;\n    int localJnNumLogs \u003d thisJournalEditLogs.size();\n    int remoteJnNumLogs \u003d otherJournalEditLogs.size();\n\n    while (localJnIndex \u003c localJnNumLogs \u0026\u0026 remoteJnIndex \u003c remoteJnNumLogs) {\n      long localJNstartTxId \u003d thisJournalEditLogs.get(localJnIndex)\n          .getStartTxId();\n      long remoteJNstartTxId \u003d otherJournalEditLogs.get(remoteJnIndex)\n          .getStartTxId();\n\n      if (localJNstartTxId \u003d\u003d remoteJNstartTxId) {\n        localJnIndex++;\n        remoteJnIndex++;\n      } else if (localJNstartTxId \u003e remoteJNstartTxId) {\n        missingEditLogs.add(otherJournalEditLogs.get(remoteJnIndex));\n        remoteJnIndex++;\n      } else {\n        localJnIndex++;\n      }\n    }\n\n    if (remoteJnIndex \u003c remoteJnNumLogs) {\n      for (; remoteJnIndex \u003c remoteJnNumLogs; remoteJnIndex++) {\n        missingEditLogs.add(otherJournalEditLogs.get(remoteJnIndex));\n      }\n    }\n\n    return missingEditLogs;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNodeSyncer.java",
      "extendedDetails": {}
    },
    "13d4bcfe3535a2df79c2a56e7578716d15497ff4": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-4025. QJM: Sychronize past log segments to JNs that missed them. Contributed by Hanisha Koneru.\n",
      "commitDate": "22/02/17 4:33 PM",
      "commitName": "13d4bcfe3535a2df79c2a56e7578716d15497ff4",
      "commitAuthor": "Jing Zhao",
      "diff": "@@ -0,0 +1,38 @@\n+  private List\u003cRemoteEditLog\u003e getMissingLogList(\n+      List\u003cRemoteEditLog\u003e thisJournalEditLogs,\n+      List\u003cRemoteEditLog\u003e otherJournalEditLogs) {\n+    if (thisJournalEditLogs.isEmpty()) {\n+      return otherJournalEditLogs;\n+    }\n+\n+    List\u003cRemoteEditLog\u003e missingEditLogs \u003d Lists.newArrayList();\n+\n+    int thisJnIndex \u003d 0, otherJnIndex \u003d 0;\n+    int thisJnNumLogs \u003d thisJournalEditLogs.size();\n+    int otherJnNumLogs \u003d otherJournalEditLogs.size();\n+\n+    while (thisJnIndex \u003c thisJnNumLogs \u0026\u0026 otherJnIndex \u003c otherJnNumLogs) {\n+      long localJNstartTxId \u003d thisJournalEditLogs.get(thisJnIndex)\n+          .getStartTxId();\n+      long remoteJNstartTxId \u003d otherJournalEditLogs.get(otherJnIndex)\n+          .getStartTxId();\n+\n+      if (localJNstartTxId \u003d\u003d remoteJNstartTxId) {\n+        thisJnIndex++;\n+        otherJnIndex++;\n+      } else if (localJNstartTxId \u003e remoteJNstartTxId) {\n+        missingEditLogs.add(otherJournalEditLogs.get(otherJnIndex));\n+        otherJnIndex++;\n+      } else {\n+        thisJnIndex++;\n+      }\n+    }\n+\n+    if (otherJnIndex \u003c otherJnNumLogs) {\n+      for (; otherJnIndex \u003c otherJnNumLogs; otherJnIndex++) {\n+        missingEditLogs.add(otherJournalEditLogs.get(otherJnIndex));\n+      }\n+    }\n+\n+    return missingEditLogs;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cRemoteEditLog\u003e getMissingLogList(\n      List\u003cRemoteEditLog\u003e thisJournalEditLogs,\n      List\u003cRemoteEditLog\u003e otherJournalEditLogs) {\n    if (thisJournalEditLogs.isEmpty()) {\n      return otherJournalEditLogs;\n    }\n\n    List\u003cRemoteEditLog\u003e missingEditLogs \u003d Lists.newArrayList();\n\n    int thisJnIndex \u003d 0, otherJnIndex \u003d 0;\n    int thisJnNumLogs \u003d thisJournalEditLogs.size();\n    int otherJnNumLogs \u003d otherJournalEditLogs.size();\n\n    while (thisJnIndex \u003c thisJnNumLogs \u0026\u0026 otherJnIndex \u003c otherJnNumLogs) {\n      long localJNstartTxId \u003d thisJournalEditLogs.get(thisJnIndex)\n          .getStartTxId();\n      long remoteJNstartTxId \u003d otherJournalEditLogs.get(otherJnIndex)\n          .getStartTxId();\n\n      if (localJNstartTxId \u003d\u003d remoteJNstartTxId) {\n        thisJnIndex++;\n        otherJnIndex++;\n      } else if (localJNstartTxId \u003e remoteJNstartTxId) {\n        missingEditLogs.add(otherJournalEditLogs.get(otherJnIndex));\n        otherJnIndex++;\n      } else {\n        thisJnIndex++;\n      }\n    }\n\n    if (otherJnIndex \u003c otherJnNumLogs) {\n      for (; otherJnIndex \u003c otherJnNumLogs; otherJnIndex++) {\n        missingEditLogs.add(otherJournalEditLogs.get(otherJnIndex));\n      }\n    }\n\n    return missingEditLogs;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNodeSyncer.java"
    }
  }
}