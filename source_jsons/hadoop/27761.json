{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FederationRMFailoverProxyProvider.java",
  "functionName": "getProxyInternal",
  "functionId": "getProxyInternal___isFailover-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/failover/FederationRMFailoverProxyProvider.java",
  "functionStartLine": 117,
  "functionEndLine": 164,
  "numCommitsSeen": 7,
  "timeTaken": 2182,
  "changeHistory": [
    "09999d7e014fde717e8b122773b68664f4594106",
    "725b10e3aee383d049c97f8ed2b0b1ae873d5ae8",
    "2a2ef15caf791f30c471526c1b74e68803f0c405",
    "98b45b0ed34a060e0a529069cd15676d91600dff",
    "bdfad4523f1a5a776e20773c371ce99d0c538ac1"
  ],
  "changeHistoryShort": {
    "09999d7e014fde717e8b122773b68664f4594106": "Ybodychange",
    "725b10e3aee383d049c97f8ed2b0b1ae873d5ae8": "Ybodychange",
    "2a2ef15caf791f30c471526c1b74e68803f0c405": "Ybodychange",
    "98b45b0ed34a060e0a529069cd15676d91600dff": "Ybodychange",
    "bdfad4523f1a5a776e20773c371ce99d0c538ac1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "09999d7e014fde717e8b122773b68664f4594106": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8010. Add config in FederationRMFailoverProxy to not bypass facade cache when failing over. (Botong Huang via Subru).\n",
      "commitDate": "28/03/18 11:33 AM",
      "commitName": "09999d7e014fde717e8b122773b68664f4594106",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "28/03/18 11:26 AM",
      "commitNameOld": "725b10e3aee383d049c97f8ed2b0b1ae873d5ae8",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,48 @@\n   private T getProxyInternal(boolean isFailover) {\n     SubClusterInfo subClusterInfo;\n     // Use the existing proxy as a backup in case getting the new proxy fails.\n     // Note that if the first time it fails, the backup is also null. In that\n     // case we will hit NullPointerException and throw it back to AM.\n     T proxy \u003d this.current;\n     try {\n       LOG.info(\"Failing over to the ResourceManager for SubClusterId: {}\",\n           subClusterId);\n-      subClusterInfo \u003d facade.getSubCluster(subClusterId, isFailover);\n+      subClusterInfo \u003d facade.getSubCluster(subClusterId,\n+          this.flushFacadeCacheForYarnRMAddr \u0026\u0026 isFailover);\n       // updating the conf with the refreshed RM addresses as proxy\n       // creations are based out of conf\n       updateRMAddress(subClusterInfo);\n       if (this.originalUser \u003d\u003d null) {\n         InetSocketAddress rmAddress \u003d rmProxy.getRMAddress(conf, protocol);\n         LOG.info(\n             \"Connecting to {} subClusterId {} with protocol {}\"\n                 + \" without a proxy user\",\n             rmAddress, subClusterId, protocol.getSimpleName());\n         proxy \u003d createRMProxy(rmAddress);\n       } else {\n         // If the original ugi exists, always use that to create proxy because\n         // it contains up-to-date AMRMToken\n         proxy \u003d this.originalUser.doAs(new PrivilegedExceptionAction\u003cT\u003e() {\n           @Override\n           public T run() throws IOException {\n             InetSocketAddress rmAddress \u003d rmProxy.getRMAddress(conf, protocol);\n             LOG.info(\n                 \"Connecting to {} subClusterId {} with protocol {} as user {}\",\n                 rmAddress, subClusterId, protocol.getSimpleName(),\n                 originalUser);\n             return createRMProxy(rmAddress);\n           }\n         });\n       }\n     } catch (Exception e) {\n       LOG.error(\"Exception while trying to create proxy to the ResourceManager\"\n           + \" for SubClusterId: {}\", subClusterId, e);\n       if (proxy \u003d\u003d null) {\n         throw new YarnRuntimeException(\n             String.format(\"Create initial proxy to the ResourceManager for\"\n                 + \" SubClusterId %s failed\", subClusterId),\n             e);\n       }\n     }\n     return proxy;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private T getProxyInternal(boolean isFailover) {\n    SubClusterInfo subClusterInfo;\n    // Use the existing proxy as a backup in case getting the new proxy fails.\n    // Note that if the first time it fails, the backup is also null. In that\n    // case we will hit NullPointerException and throw it back to AM.\n    T proxy \u003d this.current;\n    try {\n      LOG.info(\"Failing over to the ResourceManager for SubClusterId: {}\",\n          subClusterId);\n      subClusterInfo \u003d facade.getSubCluster(subClusterId,\n          this.flushFacadeCacheForYarnRMAddr \u0026\u0026 isFailover);\n      // updating the conf with the refreshed RM addresses as proxy\n      // creations are based out of conf\n      updateRMAddress(subClusterInfo);\n      if (this.originalUser \u003d\u003d null) {\n        InetSocketAddress rmAddress \u003d rmProxy.getRMAddress(conf, protocol);\n        LOG.info(\n            \"Connecting to {} subClusterId {} with protocol {}\"\n                + \" without a proxy user\",\n            rmAddress, subClusterId, protocol.getSimpleName());\n        proxy \u003d createRMProxy(rmAddress);\n      } else {\n        // If the original ugi exists, always use that to create proxy because\n        // it contains up-to-date AMRMToken\n        proxy \u003d this.originalUser.doAs(new PrivilegedExceptionAction\u003cT\u003e() {\n          @Override\n          public T run() throws IOException {\n            InetSocketAddress rmAddress \u003d rmProxy.getRMAddress(conf, protocol);\n            LOG.info(\n                \"Connecting to {} subClusterId {} with protocol {} as user {}\",\n                rmAddress, subClusterId, protocol.getSimpleName(),\n                originalUser);\n            return createRMProxy(rmAddress);\n          }\n        });\n      }\n    } catch (Exception e) {\n      LOG.error(\"Exception while trying to create proxy to the ResourceManager\"\n          + \" for SubClusterId: {}\", subClusterId, e);\n      if (proxy \u003d\u003d null) {\n        throw new YarnRuntimeException(\n            String.format(\"Create initial proxy to the ResourceManager for\"\n                + \" SubClusterId %s failed\", subClusterId),\n            e);\n      }\n    }\n    return proxy;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/failover/FederationRMFailoverProxyProvider.java",
      "extendedDetails": {}
    },
    "725b10e3aee383d049c97f8ed2b0b1ae873d5ae8": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"YARN-8010. Add config in FederationRMFailoverProxy to not bypass facade cache when failing over. (Botong Huang via Subru).\"\n\nThis reverts commit 2a2ef15caf791f30c471526c1b74e68803f0c405 as smart-apply-patch script didn\u0027t pick the latest patch.\n",
      "commitDate": "28/03/18 11:26 AM",
      "commitName": "725b10e3aee383d049c97f8ed2b0b1ae873d5ae8",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "27/03/18 5:39 PM",
      "commitNameOld": "2a2ef15caf791f30c471526c1b74e68803f0c405",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,47 @@\n   private T getProxyInternal(boolean isFailover) {\n     SubClusterInfo subClusterInfo;\n     // Use the existing proxy as a backup in case getting the new proxy fails.\n     // Note that if the first time it fails, the backup is also null. In that\n     // case we will hit NullPointerException and throw it back to AM.\n     T proxy \u003d this.current;\n     try {\n       LOG.info(\"Failing over to the ResourceManager for SubClusterId: {}\",\n           subClusterId);\n-      subClusterInfo \u003d facade.getSubCluster(subClusterId,\n-          this.flushFacadeCacheForYarnRMAddr \u0026\u0026 isFailover);\n+      subClusterInfo \u003d facade.getSubCluster(subClusterId, isFailover);\n       // updating the conf with the refreshed RM addresses as proxy\n       // creations are based out of conf\n       updateRMAddress(subClusterInfo);\n       if (this.originalUser \u003d\u003d null) {\n         InetSocketAddress rmAddress \u003d rmProxy.getRMAddress(conf, protocol);\n         LOG.info(\n             \"Connecting to {} subClusterId {} with protocol {}\"\n                 + \" without a proxy user\",\n             rmAddress, subClusterId, protocol.getSimpleName());\n         proxy \u003d createRMProxy(rmAddress);\n       } else {\n         // If the original ugi exists, always use that to create proxy because\n         // it contains up-to-date AMRMToken\n         proxy \u003d this.originalUser.doAs(new PrivilegedExceptionAction\u003cT\u003e() {\n           @Override\n           public T run() throws IOException {\n             InetSocketAddress rmAddress \u003d rmProxy.getRMAddress(conf, protocol);\n             LOG.info(\n                 \"Connecting to {} subClusterId {} with protocol {} as user {}\",\n                 rmAddress, subClusterId, protocol.getSimpleName(),\n                 originalUser);\n             return createRMProxy(rmAddress);\n           }\n         });\n       }\n     } catch (Exception e) {\n       LOG.error(\"Exception while trying to create proxy to the ResourceManager\"\n           + \" for SubClusterId: {}\", subClusterId, e);\n       if (proxy \u003d\u003d null) {\n         throw new YarnRuntimeException(\n             String.format(\"Create initial proxy to the ResourceManager for\"\n                 + \" SubClusterId %s failed\", subClusterId),\n             e);\n       }\n     }\n     return proxy;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private T getProxyInternal(boolean isFailover) {\n    SubClusterInfo subClusterInfo;\n    // Use the existing proxy as a backup in case getting the new proxy fails.\n    // Note that if the first time it fails, the backup is also null. In that\n    // case we will hit NullPointerException and throw it back to AM.\n    T proxy \u003d this.current;\n    try {\n      LOG.info(\"Failing over to the ResourceManager for SubClusterId: {}\",\n          subClusterId);\n      subClusterInfo \u003d facade.getSubCluster(subClusterId, isFailover);\n      // updating the conf with the refreshed RM addresses as proxy\n      // creations are based out of conf\n      updateRMAddress(subClusterInfo);\n      if (this.originalUser \u003d\u003d null) {\n        InetSocketAddress rmAddress \u003d rmProxy.getRMAddress(conf, protocol);\n        LOG.info(\n            \"Connecting to {} subClusterId {} with protocol {}\"\n                + \" without a proxy user\",\n            rmAddress, subClusterId, protocol.getSimpleName());\n        proxy \u003d createRMProxy(rmAddress);\n      } else {\n        // If the original ugi exists, always use that to create proxy because\n        // it contains up-to-date AMRMToken\n        proxy \u003d this.originalUser.doAs(new PrivilegedExceptionAction\u003cT\u003e() {\n          @Override\n          public T run() throws IOException {\n            InetSocketAddress rmAddress \u003d rmProxy.getRMAddress(conf, protocol);\n            LOG.info(\n                \"Connecting to {} subClusterId {} with protocol {} as user {}\",\n                rmAddress, subClusterId, protocol.getSimpleName(),\n                originalUser);\n            return createRMProxy(rmAddress);\n          }\n        });\n      }\n    } catch (Exception e) {\n      LOG.error(\"Exception while trying to create proxy to the ResourceManager\"\n          + \" for SubClusterId: {}\", subClusterId, e);\n      if (proxy \u003d\u003d null) {\n        throw new YarnRuntimeException(\n            String.format(\"Create initial proxy to the ResourceManager for\"\n                + \" SubClusterId %s failed\", subClusterId),\n            e);\n      }\n    }\n    return proxy;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/failover/FederationRMFailoverProxyProvider.java",
      "extendedDetails": {}
    },
    "2a2ef15caf791f30c471526c1b74e68803f0c405": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8010. Add config in FederationRMFailoverProxy to not bypass facade cache when failing over. (Botong Huang via Subru).\n",
      "commitDate": "27/03/18 5:39 PM",
      "commitName": "2a2ef15caf791f30c471526c1b74e68803f0c405",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "03/08/17 2:18 PM",
      "commitNameOld": "0542e6f86e6734f8ceea00960bebe719827136db",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 236.14,
      "commitsBetweenForRepo": 1843,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,48 @@\n   private T getProxyInternal(boolean isFailover) {\n     SubClusterInfo subClusterInfo;\n     // Use the existing proxy as a backup in case getting the new proxy fails.\n     // Note that if the first time it fails, the backup is also null. In that\n     // case we will hit NullPointerException and throw it back to AM.\n     T proxy \u003d this.current;\n     try {\n       LOG.info(\"Failing over to the ResourceManager for SubClusterId: {}\",\n           subClusterId);\n-      subClusterInfo \u003d facade.getSubCluster(subClusterId, isFailover);\n+      subClusterInfo \u003d facade.getSubCluster(subClusterId,\n+          this.flushFacadeCacheForYarnRMAddr \u0026\u0026 isFailover);\n       // updating the conf with the refreshed RM addresses as proxy\n       // creations are based out of conf\n       updateRMAddress(subClusterInfo);\n       if (this.originalUser \u003d\u003d null) {\n         InetSocketAddress rmAddress \u003d rmProxy.getRMAddress(conf, protocol);\n         LOG.info(\n             \"Connecting to {} subClusterId {} with protocol {}\"\n                 + \" without a proxy user\",\n             rmAddress, subClusterId, protocol.getSimpleName());\n         proxy \u003d createRMProxy(rmAddress);\n       } else {\n         // If the original ugi exists, always use that to create proxy because\n         // it contains up-to-date AMRMToken\n         proxy \u003d this.originalUser.doAs(new PrivilegedExceptionAction\u003cT\u003e() {\n           @Override\n           public T run() throws IOException {\n             InetSocketAddress rmAddress \u003d rmProxy.getRMAddress(conf, protocol);\n             LOG.info(\n                 \"Connecting to {} subClusterId {} with protocol {} as user {}\",\n                 rmAddress, subClusterId, protocol.getSimpleName(),\n                 originalUser);\n             return createRMProxy(rmAddress);\n           }\n         });\n       }\n     } catch (Exception e) {\n       LOG.error(\"Exception while trying to create proxy to the ResourceManager\"\n           + \" for SubClusterId: {}\", subClusterId, e);\n       if (proxy \u003d\u003d null) {\n         throw new YarnRuntimeException(\n             String.format(\"Create initial proxy to the ResourceManager for\"\n                 + \" SubClusterId %s failed\", subClusterId),\n             e);\n       }\n     }\n     return proxy;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private T getProxyInternal(boolean isFailover) {\n    SubClusterInfo subClusterInfo;\n    // Use the existing proxy as a backup in case getting the new proxy fails.\n    // Note that if the first time it fails, the backup is also null. In that\n    // case we will hit NullPointerException and throw it back to AM.\n    T proxy \u003d this.current;\n    try {\n      LOG.info(\"Failing over to the ResourceManager for SubClusterId: {}\",\n          subClusterId);\n      subClusterInfo \u003d facade.getSubCluster(subClusterId,\n          this.flushFacadeCacheForYarnRMAddr \u0026\u0026 isFailover);\n      // updating the conf with the refreshed RM addresses as proxy\n      // creations are based out of conf\n      updateRMAddress(subClusterInfo);\n      if (this.originalUser \u003d\u003d null) {\n        InetSocketAddress rmAddress \u003d rmProxy.getRMAddress(conf, protocol);\n        LOG.info(\n            \"Connecting to {} subClusterId {} with protocol {}\"\n                + \" without a proxy user\",\n            rmAddress, subClusterId, protocol.getSimpleName());\n        proxy \u003d createRMProxy(rmAddress);\n      } else {\n        // If the original ugi exists, always use that to create proxy because\n        // it contains up-to-date AMRMToken\n        proxy \u003d this.originalUser.doAs(new PrivilegedExceptionAction\u003cT\u003e() {\n          @Override\n          public T run() throws IOException {\n            InetSocketAddress rmAddress \u003d rmProxy.getRMAddress(conf, protocol);\n            LOG.info(\n                \"Connecting to {} subClusterId {} with protocol {} as user {}\",\n                rmAddress, subClusterId, protocol.getSimpleName(),\n                originalUser);\n            return createRMProxy(rmAddress);\n          }\n        });\n      }\n    } catch (Exception e) {\n      LOG.error(\"Exception while trying to create proxy to the ResourceManager\"\n          + \" for SubClusterId: {}\", subClusterId, e);\n      if (proxy \u003d\u003d null) {\n        throw new YarnRuntimeException(\n            String.format(\"Create initial proxy to the ResourceManager for\"\n                + \" SubClusterId %s failed\", subClusterId),\n            e);\n      }\n    }\n    return proxy;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/failover/FederationRMFailoverProxyProvider.java",
      "extendedDetails": {}
    },
    "98b45b0ed34a060e0a529069cd15676d91600dff": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6093. Minor bugs with AMRMtoken renewal and state store availability when using FederationRMFailoverProxyProvider during RM failover. (Botong Huang via Subru).\n\n(cherry picked from commit 66500f4fa6155d29435d7c92fd6d68079c4cab86)\n",
      "commitDate": "01/08/17 5:28 PM",
      "commitName": "98b45b0ed34a060e0a529069cd15676d91600dff",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "01/08/17 5:28 PM",
      "commitNameOld": "94a24567d65469091c8b521987dc2003d0327159",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,47 @@\n   private T getProxyInternal(boolean isFailover) {\n     SubClusterInfo subClusterInfo;\n-    UserGroupInformation currentUser \u003d null;\n+    // Use the existing proxy as a backup in case getting the new proxy fails.\n+    // Note that if the first time it fails, the backup is also null. In that\n+    // case we will hit NullPointerException and throw it back to AM.\n+    T proxy \u003d this.current;\n     try {\n       LOG.info(\"Failing over to the ResourceManager for SubClusterId: {}\",\n           subClusterId);\n       subClusterInfo \u003d facade.getSubCluster(subClusterId, isFailover);\n       // updating the conf with the refreshed RM addresses as proxy\n-      // creations\n-      // are based out of conf\n+      // creations are based out of conf\n       updateRMAddress(subClusterInfo);\n-      currentUser \u003d UserGroupInformation.getCurrentUser();\n-      addOriginalTokens(currentUser);\n-    } catch (YarnException e) {\n+      if (this.originalUser \u003d\u003d null) {\n+        InetSocketAddress rmAddress \u003d rmProxy.getRMAddress(conf, protocol);\n+        LOG.info(\n+            \"Connecting to {} subClusterId {} with protocol {}\"\n+                + \" without a proxy user\",\n+            rmAddress, subClusterId, protocol.getSimpleName());\n+        proxy \u003d createRMProxy(rmAddress);\n+      } else {\n+        // If the original ugi exists, always use that to create proxy because\n+        // it contains up-to-date AMRMToken\n+        proxy \u003d this.originalUser.doAs(new PrivilegedExceptionAction\u003cT\u003e() {\n+          @Override\n+          public T run() throws IOException {\n+            InetSocketAddress rmAddress \u003d rmProxy.getRMAddress(conf, protocol);\n+            LOG.info(\n+                \"Connecting to {} subClusterId {} with protocol {} as user {}\",\n+                rmAddress, subClusterId, protocol.getSimpleName(),\n+                originalUser);\n+            return createRMProxy(rmAddress);\n+          }\n+        });\n+      }\n+    } catch (Exception e) {\n       LOG.error(\"Exception while trying to create proxy to the ResourceManager\"\n           + \" for SubClusterId: {}\", subClusterId, e);\n-      return null;\n-    } catch (IOException e) {\n-      LOG.warn(\"Could not get information of requester, ignoring for now.\");\n+      if (proxy \u003d\u003d null) {\n+        throw new YarnRuntimeException(\n+            String.format(\"Create initial proxy to the ResourceManager for\"\n+                + \" SubClusterId %s failed\", subClusterId),\n+            e);\n+      }\n     }\n-    try {\n-      final InetSocketAddress rmAddress \u003d rmProxy.getRMAddress(conf, protocol);\n-      LOG.info(\"Connecting to {} with protocol {} as user: {}\", rmAddress,\n-          protocol.getSimpleName(), currentUser);\n-      LOG.info(\"Failed over to the RM at {} for SubClusterId: {}\", rmAddress,\n-          subClusterId);\n-      return rmProxy.getProxy(conf, protocol, rmAddress);\n-    } catch (IOException ioe) {\n-      LOG.error(\n-          \"IOException while trying to create proxy to the ResourceManager\"\n-              + \" for SubClusterId: {}\",\n-          subClusterId, ioe);\n-      return null;\n-    }\n+    return proxy;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private T getProxyInternal(boolean isFailover) {\n    SubClusterInfo subClusterInfo;\n    // Use the existing proxy as a backup in case getting the new proxy fails.\n    // Note that if the first time it fails, the backup is also null. In that\n    // case we will hit NullPointerException and throw it back to AM.\n    T proxy \u003d this.current;\n    try {\n      LOG.info(\"Failing over to the ResourceManager for SubClusterId: {}\",\n          subClusterId);\n      subClusterInfo \u003d facade.getSubCluster(subClusterId, isFailover);\n      // updating the conf with the refreshed RM addresses as proxy\n      // creations are based out of conf\n      updateRMAddress(subClusterInfo);\n      if (this.originalUser \u003d\u003d null) {\n        InetSocketAddress rmAddress \u003d rmProxy.getRMAddress(conf, protocol);\n        LOG.info(\n            \"Connecting to {} subClusterId {} with protocol {}\"\n                + \" without a proxy user\",\n            rmAddress, subClusterId, protocol.getSimpleName());\n        proxy \u003d createRMProxy(rmAddress);\n      } else {\n        // If the original ugi exists, always use that to create proxy because\n        // it contains up-to-date AMRMToken\n        proxy \u003d this.originalUser.doAs(new PrivilegedExceptionAction\u003cT\u003e() {\n          @Override\n          public T run() throws IOException {\n            InetSocketAddress rmAddress \u003d rmProxy.getRMAddress(conf, protocol);\n            LOG.info(\n                \"Connecting to {} subClusterId {} with protocol {} as user {}\",\n                rmAddress, subClusterId, protocol.getSimpleName(),\n                originalUser);\n            return createRMProxy(rmAddress);\n          }\n        });\n      }\n    } catch (Exception e) {\n      LOG.error(\"Exception while trying to create proxy to the ResourceManager\"\n          + \" for SubClusterId: {}\", subClusterId, e);\n      if (proxy \u003d\u003d null) {\n        throw new YarnRuntimeException(\n            String.format(\"Create initial proxy to the ResourceManager for\"\n                + \" SubClusterId %s failed\", subClusterId),\n            e);\n      }\n    }\n    return proxy;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/failover/FederationRMFailoverProxyProvider.java",
      "extendedDetails": {}
    },
    "bdfad4523f1a5a776e20773c371ce99d0c538ac1": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3673. Create a FailoverProxy for Federation services. Contributed by Subru Krishnan\n\n(cherry picked from commit 3307564a5f8c8abc5fe84efcd05ee0f7dfdd921c)\n",
      "commitDate": "01/08/17 5:28 PM",
      "commitName": "bdfad4523f1a5a776e20773c371ce99d0c538ac1",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,35 @@\n+  private T getProxyInternal(boolean isFailover) {\n+    SubClusterInfo subClusterInfo;\n+    UserGroupInformation currentUser \u003d null;\n+    try {\n+      LOG.info(\"Failing over to the ResourceManager for SubClusterId: {}\",\n+          subClusterId);\n+      subClusterInfo \u003d facade.getSubCluster(subClusterId, isFailover);\n+      // updating the conf with the refreshed RM addresses as proxy\n+      // creations\n+      // are based out of conf\n+      updateRMAddress(subClusterInfo);\n+      currentUser \u003d UserGroupInformation.getCurrentUser();\n+      addOriginalTokens(currentUser);\n+    } catch (YarnException e) {\n+      LOG.error(\"Exception while trying to create proxy to the ResourceManager\"\n+          + \" for SubClusterId: {}\", subClusterId, e);\n+      return null;\n+    } catch (IOException e) {\n+      LOG.warn(\"Could not get information of requester, ignoring for now.\");\n+    }\n+    try {\n+      final InetSocketAddress rmAddress \u003d rmProxy.getRMAddress(conf, protocol);\n+      LOG.info(\"Connecting to {} with protocol {} as user: {}\", rmAddress,\n+          protocol.getSimpleName(), currentUser);\n+      LOG.info(\"Failed over to the RM at {} for SubClusterId: {}\", rmAddress,\n+          subClusterId);\n+      return rmProxy.getProxy(conf, protocol, rmAddress);\n+    } catch (IOException ioe) {\n+      LOG.error(\n+          \"IOException while trying to create proxy to the ResourceManager\"\n+              + \" for SubClusterId: {}\",\n+          subClusterId, ioe);\n+      return null;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private T getProxyInternal(boolean isFailover) {\n    SubClusterInfo subClusterInfo;\n    UserGroupInformation currentUser \u003d null;\n    try {\n      LOG.info(\"Failing over to the ResourceManager for SubClusterId: {}\",\n          subClusterId);\n      subClusterInfo \u003d facade.getSubCluster(subClusterId, isFailover);\n      // updating the conf with the refreshed RM addresses as proxy\n      // creations\n      // are based out of conf\n      updateRMAddress(subClusterInfo);\n      currentUser \u003d UserGroupInformation.getCurrentUser();\n      addOriginalTokens(currentUser);\n    } catch (YarnException e) {\n      LOG.error(\"Exception while trying to create proxy to the ResourceManager\"\n          + \" for SubClusterId: {}\", subClusterId, e);\n      return null;\n    } catch (IOException e) {\n      LOG.warn(\"Could not get information of requester, ignoring for now.\");\n    }\n    try {\n      final InetSocketAddress rmAddress \u003d rmProxy.getRMAddress(conf, protocol);\n      LOG.info(\"Connecting to {} with protocol {} as user: {}\", rmAddress,\n          protocol.getSimpleName(), currentUser);\n      LOG.info(\"Failed over to the RM at {} for SubClusterId: {}\", rmAddress,\n          subClusterId);\n      return rmProxy.getProxy(conf, protocol, rmAddress);\n    } catch (IOException ioe) {\n      LOG.error(\n          \"IOException while trying to create proxy to the ResourceManager\"\n              + \" for SubClusterId: {}\",\n          subClusterId, ioe);\n      return null;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/failover/FederationRMFailoverProxyProvider.java"
    }
  }
}