{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractYarnScheduler.java",
  "functionName": "updateNodeResource",
  "functionId": "updateNodeResource___nm-RMNode__resourceOption-ResourceOption",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
  "functionStartLine": 840,
  "functionEndLine": 873,
  "numCommitsSeen": 115,
  "timeTaken": 5205,
  "changeHistory": [
    "cfec455c452d85229ef2f9d83e6f7fc827946b59",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
    "bb62e0592566b2fcae7136b30972aad2d3ac55b0",
    "20d389ce61eaacb5ddfb329015f50e96ad894f8d",
    "d573f09fb93dbb711d504620af5d73840ea063a6",
    "7882bc0f1433ae73361cab4207eb0c15abee4586",
    "5c14bc426b4be381383018ebc2236be83eef15cd"
  ],
  "changeHistoryShort": {
    "cfec455c452d85229ef2f9d83e6f7fc827946b59": "Ybodychange",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f": "Ymultichange(Ymodifierchange,Ybodychange)",
    "bb62e0592566b2fcae7136b30972aad2d3ac55b0": "Ybodychange",
    "20d389ce61eaacb5ddfb329015f50e96ad894f8d": "Ybodychange",
    "d573f09fb93dbb711d504620af5d73840ea063a6": "Ybodychange",
    "7882bc0f1433ae73361cab4207eb0c15abee4586": "Ybodychange",
    "5c14bc426b4be381383018ebc2236be83eef15cd": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cfec455c452d85229ef2f9d83e6f7fc827946b59": {
      "type": "Ybodychange",
      "commitMessage": "YARN-999. In case of long running tasks, reduce node resource should balloon out resource quickly by calling preemption API and suspending running task. Contributed by Inigo Goiri.\n",
      "commitDate": "09/04/19 10:59 AM",
      "commitName": "cfec455c452d85229ef2f9d83e6f7fc827946b59",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "01/04/19 8:05 PM",
      "commitNameOld": "2f752830ba74c90ccce818d687572db9afded25b",
      "commitAuthorOld": "Yufei Gu",
      "daysBetweenCommits": 7.62,
      "commitsBetweenForRepo": 59,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,34 @@\n   public void updateNodeResource(RMNode nm,\n       ResourceOption resourceOption) {\n     writeLock.lock();\n     try {\n       SchedulerNode node \u003d getSchedulerNode(nm.getNodeID());\n       Resource newResource \u003d resourceOption.getResource();\n+      final int timeout \u003d resourceOption.getOverCommitTimeout();\n       Resource oldResource \u003d node.getTotalResource();\n       if (!oldResource.equals(newResource)) {\n         // Notify NodeLabelsManager about this change\n         rmContext.getNodeLabelManager().updateNodeResource(nm.getNodeID(),\n             newResource);\n \n         // Log resource change\n-        LOG.info(\"Update resource on node: \" + node.getNodeName() + \" from: \"\n-            + oldResource + \", to: \" + newResource);\n+        LOG.info(\"Update resource on node: {} from: {}, to: {} in {} ms\",\n+            node.getNodeName(), oldResource, newResource, timeout);\n \n         nodeTracker.removeNode(nm.getNodeID());\n \n         // update resource to node\n         node.updateTotalResource(newResource);\n+        node.setOvercommitTimeOut(timeout);\n+        signalContainersIfOvercommitted(node, timeout \u003d\u003d 0);\n \n         nodeTracker.addNode((N) node);\n       } else{\n         // Log resource change\n         LOG.warn(\"Update resource on node: \" + node.getNodeName()\n             + \" with the same resource: \" + newResource);\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateNodeResource(RMNode nm,\n      ResourceOption resourceOption) {\n    writeLock.lock();\n    try {\n      SchedulerNode node \u003d getSchedulerNode(nm.getNodeID());\n      Resource newResource \u003d resourceOption.getResource();\n      final int timeout \u003d resourceOption.getOverCommitTimeout();\n      Resource oldResource \u003d node.getTotalResource();\n      if (!oldResource.equals(newResource)) {\n        // Notify NodeLabelsManager about this change\n        rmContext.getNodeLabelManager().updateNodeResource(nm.getNodeID(),\n            newResource);\n\n        // Log resource change\n        LOG.info(\"Update resource on node: {} from: {}, to: {} in {} ms\",\n            node.getNodeName(), oldResource, newResource, timeout);\n\n        nodeTracker.removeNode(nm.getNodeID());\n\n        // update resource to node\n        node.updateTotalResource(newResource);\n        node.setOvercommitTimeOut(timeout);\n        signalContainersIfOvercommitted(node, timeout \u003d\u003d 0);\n\n        nodeTracker.addNode((N) node);\n      } else{\n        // Log resource change\n        LOG.warn(\"Update resource on node: \" + node.getNodeName()\n            + \" with the same resource: \" + newResource);\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
      "extendedDetails": {}
    },
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 2.69,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   public void updateNodeResource(RMNode nm,\n       ResourceOption resourceOption) {\n+    writeLock.lock();\n     try {\n-      writeLock.lock();\n       SchedulerNode node \u003d getSchedulerNode(nm.getNodeID());\n       Resource newResource \u003d resourceOption.getResource();\n       Resource oldResource \u003d node.getTotalResource();\n       if (!oldResource.equals(newResource)) {\n         // Notify NodeLabelsManager about this change\n         rmContext.getNodeLabelManager().updateNodeResource(nm.getNodeID(),\n             newResource);\n \n         // Log resource change\n         LOG.info(\"Update resource on node: \" + node.getNodeName() + \" from: \"\n             + oldResource + \", to: \" + newResource);\n \n         nodeTracker.removeNode(nm.getNodeID());\n \n         // update resource to node\n         node.updateTotalResource(newResource);\n \n         nodeTracker.addNode((N) node);\n       } else{\n         // Log resource change\n         LOG.warn(\"Update resource on node: \" + node.getNodeName()\n             + \" with the same resource: \" + newResource);\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateNodeResource(RMNode nm,\n      ResourceOption resourceOption) {\n    writeLock.lock();\n    try {\n      SchedulerNode node \u003d getSchedulerNode(nm.getNodeID());\n      Resource newResource \u003d resourceOption.getResource();\n      Resource oldResource \u003d node.getTotalResource();\n      if (!oldResource.equals(newResource)) {\n        // Notify NodeLabelsManager about this change\n        rmContext.getNodeLabelManager().updateNodeResource(nm.getNodeID(),\n            newResource);\n\n        // Log resource change\n        LOG.info(\"Update resource on node: \" + node.getNodeName() + \" from: \"\n            + oldResource + \", to: \" + newResource);\n\n        nodeTracker.removeNode(nm.getNodeID());\n\n        // update resource to node\n        node.updateTotalResource(newResource);\n\n        nodeTracker.addNode((N) node);\n      } else{\n        // Log resource change\n        LOG.warn(\"Update resource on node: \" + node.getNodeName()\n            + \" with the same resource: \" + newResource);\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
      "extendedDetails": {}
    },
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-3139. Improve locks in AbstractYarnScheduler/CapacityScheduler/FairScheduler. Contributed by Wangda Tan\n",
      "commitDate": "04/10/16 5:23 PM",
      "commitName": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-3139. Improve locks in AbstractYarnScheduler/CapacityScheduler/FairScheduler. Contributed by Wangda Tan\n",
          "commitDate": "04/10/16 5:23 PM",
          "commitName": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
          "commitAuthor": "Jian He",
          "commitDateOld": "30/08/16 3:52 PM",
          "commitNameOld": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 35.06,
          "commitsBetweenForRepo": 195,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,31 @@\n-  public synchronized void updateNodeResource(RMNode nm, \n+  public void updateNodeResource(RMNode nm,\n       ResourceOption resourceOption) {\n-    SchedulerNode node \u003d getSchedulerNode(nm.getNodeID());\n-    Resource newResource \u003d resourceOption.getResource();\n-    Resource oldResource \u003d node.getTotalResource();\n-    if(!oldResource.equals(newResource)) {\n-      // Notify NodeLabelsManager about this change\n-      rmContext.getNodeLabelManager().updateNodeResource(nm.getNodeID(),\n-          newResource);\n-      \n-      // Log resource change\n-      LOG.info(\"Update resource on node: \" + node.getNodeName()\n-          + \" from: \" + oldResource + \", to: \"\n-          + newResource);\n+    try {\n+      writeLock.lock();\n+      SchedulerNode node \u003d getSchedulerNode(nm.getNodeID());\n+      Resource newResource \u003d resourceOption.getResource();\n+      Resource oldResource \u003d node.getTotalResource();\n+      if (!oldResource.equals(newResource)) {\n+        // Notify NodeLabelsManager about this change\n+        rmContext.getNodeLabelManager().updateNodeResource(nm.getNodeID(),\n+            newResource);\n \n-      nodeTracker.removeNode(nm.getNodeID());\n+        // Log resource change\n+        LOG.info(\"Update resource on node: \" + node.getNodeName() + \" from: \"\n+            + oldResource + \", to: \" + newResource);\n \n-      // update resource to node\n-      node.updateTotalResource(newResource);\n+        nodeTracker.removeNode(nm.getNodeID());\n \n-      nodeTracker.addNode((N) node);\n-    } else {\n-      // Log resource change\n-      LOG.warn(\"Update resource on node: \" + node.getNodeName() \n-          + \" with the same resource: \" + newResource);\n+        // update resource to node\n+        node.updateTotalResource(newResource);\n+\n+        nodeTracker.addNode((N) node);\n+      } else{\n+        // Log resource change\n+        LOG.warn(\"Update resource on node: \" + node.getNodeName()\n+            + \" with the same resource: \" + newResource);\n+      }\n+    } finally {\n+      writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void updateNodeResource(RMNode nm,\n      ResourceOption resourceOption) {\n    try {\n      writeLock.lock();\n      SchedulerNode node \u003d getSchedulerNode(nm.getNodeID());\n      Resource newResource \u003d resourceOption.getResource();\n      Resource oldResource \u003d node.getTotalResource();\n      if (!oldResource.equals(newResource)) {\n        // Notify NodeLabelsManager about this change\n        rmContext.getNodeLabelManager().updateNodeResource(nm.getNodeID(),\n            newResource);\n\n        // Log resource change\n        LOG.info(\"Update resource on node: \" + node.getNodeName() + \" from: \"\n            + oldResource + \", to: \" + newResource);\n\n        nodeTracker.removeNode(nm.getNodeID());\n\n        // update resource to node\n        node.updateTotalResource(newResource);\n\n        nodeTracker.addNode((N) node);\n      } else{\n        // Log resource change\n        LOG.warn(\"Update resource on node: \" + node.getNodeName()\n            + \" with the same resource: \" + newResource);\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3139. Improve locks in AbstractYarnScheduler/CapacityScheduler/FairScheduler. Contributed by Wangda Tan\n",
          "commitDate": "04/10/16 5:23 PM",
          "commitName": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
          "commitAuthor": "Jian He",
          "commitDateOld": "30/08/16 3:52 PM",
          "commitNameOld": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 35.06,
          "commitsBetweenForRepo": 195,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,31 @@\n-  public synchronized void updateNodeResource(RMNode nm, \n+  public void updateNodeResource(RMNode nm,\n       ResourceOption resourceOption) {\n-    SchedulerNode node \u003d getSchedulerNode(nm.getNodeID());\n-    Resource newResource \u003d resourceOption.getResource();\n-    Resource oldResource \u003d node.getTotalResource();\n-    if(!oldResource.equals(newResource)) {\n-      // Notify NodeLabelsManager about this change\n-      rmContext.getNodeLabelManager().updateNodeResource(nm.getNodeID(),\n-          newResource);\n-      \n-      // Log resource change\n-      LOG.info(\"Update resource on node: \" + node.getNodeName()\n-          + \" from: \" + oldResource + \", to: \"\n-          + newResource);\n+    try {\n+      writeLock.lock();\n+      SchedulerNode node \u003d getSchedulerNode(nm.getNodeID());\n+      Resource newResource \u003d resourceOption.getResource();\n+      Resource oldResource \u003d node.getTotalResource();\n+      if (!oldResource.equals(newResource)) {\n+        // Notify NodeLabelsManager about this change\n+        rmContext.getNodeLabelManager().updateNodeResource(nm.getNodeID(),\n+            newResource);\n \n-      nodeTracker.removeNode(nm.getNodeID());\n+        // Log resource change\n+        LOG.info(\"Update resource on node: \" + node.getNodeName() + \" from: \"\n+            + oldResource + \", to: \" + newResource);\n \n-      // update resource to node\n-      node.updateTotalResource(newResource);\n+        nodeTracker.removeNode(nm.getNodeID());\n \n-      nodeTracker.addNode((N) node);\n-    } else {\n-      // Log resource change\n-      LOG.warn(\"Update resource on node: \" + node.getNodeName() \n-          + \" with the same resource: \" + newResource);\n+        // update resource to node\n+        node.updateTotalResource(newResource);\n+\n+        nodeTracker.addNode((N) node);\n+      } else{\n+        // Log resource change\n+        LOG.warn(\"Update resource on node: \" + node.getNodeName()\n+            + \" with the same resource: \" + newResource);\n+      }\n+    } finally {\n+      writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void updateNodeResource(RMNode nm,\n      ResourceOption resourceOption) {\n    try {\n      writeLock.lock();\n      SchedulerNode node \u003d getSchedulerNode(nm.getNodeID());\n      Resource newResource \u003d resourceOption.getResource();\n      Resource oldResource \u003d node.getTotalResource();\n      if (!oldResource.equals(newResource)) {\n        // Notify NodeLabelsManager about this change\n        rmContext.getNodeLabelManager().updateNodeResource(nm.getNodeID(),\n            newResource);\n\n        // Log resource change\n        LOG.info(\"Update resource on node: \" + node.getNodeName() + \" from: \"\n            + oldResource + \", to: \" + newResource);\n\n        nodeTracker.removeNode(nm.getNodeID());\n\n        // update resource to node\n        node.updateTotalResource(newResource);\n\n        nodeTracker.addNode((N) node);\n      } else{\n        // Log resource change\n        LOG.warn(\"Update resource on node: \" + node.getNodeName()\n            + \" with the same resource: \" + newResource);\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "bb62e0592566b2fcae7136b30972aad2d3ac55b0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4390. Do surgical preemption based on reserved container in CapacityScheduler. Contributed by Wangda Tan\n",
      "commitDate": "05/05/16 12:56 PM",
      "commitName": "bb62e0592566b2fcae7136b30972aad2d3ac55b0",
      "commitAuthor": "Jian He",
      "commitDateOld": "03/05/16 1:03 PM",
      "commitNameOld": "ed54f5f1ff7862f8216f77d5ea8f9ccea674ccd1",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 1.99,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   public synchronized void updateNodeResource(RMNode nm, \n       ResourceOption resourceOption) {\n     SchedulerNode node \u003d getSchedulerNode(nm.getNodeID());\n     Resource newResource \u003d resourceOption.getResource();\n     Resource oldResource \u003d node.getTotalResource();\n     if(!oldResource.equals(newResource)) {\n       // Notify NodeLabelsManager about this change\n       rmContext.getNodeLabelManager().updateNodeResource(nm.getNodeID(),\n           newResource);\n       \n       // Log resource change\n       LOG.info(\"Update resource on node: \" + node.getNodeName()\n           + \" from: \" + oldResource + \", to: \"\n           + newResource);\n \n       nodeTracker.removeNode(nm.getNodeID());\n \n       // update resource to node\n-      node.setTotalResource(newResource);\n+      node.updateTotalResource(newResource);\n \n       nodeTracker.addNode((N) node);\n     } else {\n       // Log resource change\n       LOG.warn(\"Update resource on node: \" + node.getNodeName() \n           + \" with the same resource: \" + newResource);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void updateNodeResource(RMNode nm, \n      ResourceOption resourceOption) {\n    SchedulerNode node \u003d getSchedulerNode(nm.getNodeID());\n    Resource newResource \u003d resourceOption.getResource();\n    Resource oldResource \u003d node.getTotalResource();\n    if(!oldResource.equals(newResource)) {\n      // Notify NodeLabelsManager about this change\n      rmContext.getNodeLabelManager().updateNodeResource(nm.getNodeID(),\n          newResource);\n      \n      // Log resource change\n      LOG.info(\"Update resource on node: \" + node.getNodeName()\n          + \" from: \" + oldResource + \", to: \"\n          + newResource);\n\n      nodeTracker.removeNode(nm.getNodeID());\n\n      // update resource to node\n      node.updateTotalResource(newResource);\n\n      nodeTracker.addNode((N) node);\n    } else {\n      // Log resource change\n      LOG.warn(\"Update resource on node: \" + node.getNodeName() \n          + \" with the same resource: \" + newResource);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
      "extendedDetails": {}
    },
    "20d389ce61eaacb5ddfb329015f50e96ad894f8d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4719. Add a helper library to maintain node state and allows common queries. (kasha)\n",
      "commitDate": "14/03/16 2:19 PM",
      "commitName": "20d389ce61eaacb5ddfb329015f50e96ad894f8d",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "10/02/16 6:06 PM",
      "commitNameOld": "d16b17b4d299b4d58f879a2a15708bacd0938685",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 32.8,
      "commitsBetweenForRepo": 206,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,27 @@\n   public synchronized void updateNodeResource(RMNode nm, \n       ResourceOption resourceOption) {\n     SchedulerNode node \u003d getSchedulerNode(nm.getNodeID());\n     Resource newResource \u003d resourceOption.getResource();\n     Resource oldResource \u003d node.getTotalResource();\n     if(!oldResource.equals(newResource)) {\n       // Notify NodeLabelsManager about this change\n       rmContext.getNodeLabelManager().updateNodeResource(nm.getNodeID(),\n           newResource);\n       \n       // Log resource change\n       LOG.info(\"Update resource on node: \" + node.getNodeName()\n           + \" from: \" + oldResource + \", to: \"\n           + newResource);\n \n-      nodes.remove(nm.getNodeID());\n-      updateMaximumAllocation(node, false);\n+      nodeTracker.removeNode(nm.getNodeID());\n \n       // update resource to node\n       node.setTotalResource(newResource);\n \n-      nodes.put(nm.getNodeID(), (N)node);\n-      updateMaximumAllocation(node, true);\n-\n-      // update resource to clusterResource\n-      Resources.subtractFrom(clusterResource, oldResource);\n-      Resources.addTo(clusterResource, newResource);\n+      nodeTracker.addNode((N) node);\n     } else {\n       // Log resource change\n       LOG.warn(\"Update resource on node: \" + node.getNodeName() \n           + \" with the same resource: \" + newResource);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void updateNodeResource(RMNode nm, \n      ResourceOption resourceOption) {\n    SchedulerNode node \u003d getSchedulerNode(nm.getNodeID());\n    Resource newResource \u003d resourceOption.getResource();\n    Resource oldResource \u003d node.getTotalResource();\n    if(!oldResource.equals(newResource)) {\n      // Notify NodeLabelsManager about this change\n      rmContext.getNodeLabelManager().updateNodeResource(nm.getNodeID(),\n          newResource);\n      \n      // Log resource change\n      LOG.info(\"Update resource on node: \" + node.getNodeName()\n          + \" from: \" + oldResource + \", to: \"\n          + newResource);\n\n      nodeTracker.removeNode(nm.getNodeID());\n\n      // update resource to node\n      node.setTotalResource(newResource);\n\n      nodeTracker.addNode((N) node);\n    } else {\n      // Log resource change\n      LOG.warn(\"Update resource on node: \" + node.getNodeName() \n          + \" with the same resource: \" + newResource);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
      "extendedDetails": {}
    },
    "d573f09fb93dbb711d504620af5d73840ea063a6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2696. Queue sorting in CapacityScheduler should consider node label. Contributed by Wangda Tan\n",
      "commitDate": "17/04/15 1:36 PM",
      "commitName": "d573f09fb93dbb711d504620af5d73840ea063a6",
      "commitAuthor": "Jian He",
      "commitDateOld": "15/04/15 1:57 PM",
      "commitNameOld": "1b89a3e173f8e905074ed6714a7be5c003c0e2c4",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 1.99,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,33 @@\n   public synchronized void updateNodeResource(RMNode nm, \n       ResourceOption resourceOption) {\n     SchedulerNode node \u003d getSchedulerNode(nm.getNodeID());\n     Resource newResource \u003d resourceOption.getResource();\n     Resource oldResource \u003d node.getTotalResource();\n     if(!oldResource.equals(newResource)) {\n+      // Notify NodeLabelsManager about this change\n+      rmContext.getNodeLabelManager().updateNodeResource(nm.getNodeID(),\n+          newResource);\n+      \n       // Log resource change\n       LOG.info(\"Update resource on node: \" + node.getNodeName()\n           + \" from: \" + oldResource + \", to: \"\n           + newResource);\n \n       nodes.remove(nm.getNodeID());\n       updateMaximumAllocation(node, false);\n \n       // update resource to node\n       node.setTotalResource(newResource);\n \n       nodes.put(nm.getNodeID(), (N)node);\n       updateMaximumAllocation(node, true);\n \n       // update resource to clusterResource\n       Resources.subtractFrom(clusterResource, oldResource);\n       Resources.addTo(clusterResource, newResource);\n     } else {\n       // Log resource change\n       LOG.warn(\"Update resource on node: \" + node.getNodeName() \n           + \" with the same resource: \" + newResource);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void updateNodeResource(RMNode nm, \n      ResourceOption resourceOption) {\n    SchedulerNode node \u003d getSchedulerNode(nm.getNodeID());\n    Resource newResource \u003d resourceOption.getResource();\n    Resource oldResource \u003d node.getTotalResource();\n    if(!oldResource.equals(newResource)) {\n      // Notify NodeLabelsManager about this change\n      rmContext.getNodeLabelManager().updateNodeResource(nm.getNodeID(),\n          newResource);\n      \n      // Log resource change\n      LOG.info(\"Update resource on node: \" + node.getNodeName()\n          + \" from: \" + oldResource + \", to: \"\n          + newResource);\n\n      nodes.remove(nm.getNodeID());\n      updateMaximumAllocation(node, false);\n\n      // update resource to node\n      node.setTotalResource(newResource);\n\n      nodes.put(nm.getNodeID(), (N)node);\n      updateMaximumAllocation(node, true);\n\n      // update resource to clusterResource\n      Resources.subtractFrom(clusterResource, oldResource);\n      Resources.addTo(clusterResource, newResource);\n    } else {\n      // Log resource change\n      LOG.warn(\"Update resource on node: \" + node.getNodeName() \n          + \" with the same resource: \" + newResource);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
      "extendedDetails": {}
    },
    "7882bc0f1433ae73361cab4207eb0c15abee4586": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3079. Scheduler should also update maximumAllocation when updateNodeResource. (Zhihai Xu via wangda)\n",
      "commitDate": "28/01/15 9:54 PM",
      "commitName": "7882bc0f1433ae73361cab4207eb0c15abee4586",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "12/01/15 10:47 AM",
      "commitNameOld": "ae7bf31fe1c63f323ba5271e50fd0e4425a7510f",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 16.46,
      "commitsBetweenForRepo": 130,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,29 @@\n   public synchronized void updateNodeResource(RMNode nm, \n       ResourceOption resourceOption) {\n-  \n     SchedulerNode node \u003d getSchedulerNode(nm.getNodeID());\n     Resource newResource \u003d resourceOption.getResource();\n     Resource oldResource \u003d node.getTotalResource();\n     if(!oldResource.equals(newResource)) {\n       // Log resource change\n-      LOG.info(\"Update resource on node: \" + node.getNodeName() \n+      LOG.info(\"Update resource on node: \" + node.getNodeName()\n           + \" from: \" + oldResource + \", to: \"\n           + newResource);\n \n+      nodes.remove(nm.getNodeID());\n+      updateMaximumAllocation(node, false);\n+\n       // update resource to node\n       node.setTotalResource(newResource);\n-    \n+\n+      nodes.put(nm.getNodeID(), (N)node);\n+      updateMaximumAllocation(node, true);\n+\n       // update resource to clusterResource\n       Resources.subtractFrom(clusterResource, oldResource);\n       Resources.addTo(clusterResource, newResource);\n     } else {\n       // Log resource change\n       LOG.warn(\"Update resource on node: \" + node.getNodeName() \n           + \" with the same resource: \" + newResource);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void updateNodeResource(RMNode nm, \n      ResourceOption resourceOption) {\n    SchedulerNode node \u003d getSchedulerNode(nm.getNodeID());\n    Resource newResource \u003d resourceOption.getResource();\n    Resource oldResource \u003d node.getTotalResource();\n    if(!oldResource.equals(newResource)) {\n      // Log resource change\n      LOG.info(\"Update resource on node: \" + node.getNodeName()\n          + \" from: \" + oldResource + \", to: \"\n          + newResource);\n\n      nodes.remove(nm.getNodeID());\n      updateMaximumAllocation(node, false);\n\n      // update resource to node\n      node.setTotalResource(newResource);\n\n      nodes.put(nm.getNodeID(), (N)node);\n      updateMaximumAllocation(node, true);\n\n      // update resource to clusterResource\n      Resources.subtractFrom(clusterResource, oldResource);\n      Resources.addTo(clusterResource, newResource);\n    } else {\n      // Log resource change\n      LOG.warn(\"Update resource on node: \" + node.getNodeName() \n          + \" with the same resource: \" + newResource);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
      "extendedDetails": {}
    },
    "5c14bc426b4be381383018ebc2236be83eef15cd": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1506. Changed RMNode/SchedulerNode to update resource with event notification. Contributed by Junping Du\n",
      "commitDate": "29/08/14 11:05 PM",
      "commitName": "5c14bc426b4be381383018ebc2236be83eef15cd",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,24 @@\n+  public synchronized void updateNodeResource(RMNode nm, \n+      ResourceOption resourceOption) {\n+  \n+    SchedulerNode node \u003d getSchedulerNode(nm.getNodeID());\n+    Resource newResource \u003d resourceOption.getResource();\n+    Resource oldResource \u003d node.getTotalResource();\n+    if(!oldResource.equals(newResource)) {\n+      // Log resource change\n+      LOG.info(\"Update resource on node: \" + node.getNodeName() \n+          + \" from: \" + oldResource + \", to: \"\n+          + newResource);\n+\n+      // update resource to node\n+      node.setTotalResource(newResource);\n+    \n+      // update resource to clusterResource\n+      Resources.subtractFrom(clusterResource, oldResource);\n+      Resources.addTo(clusterResource, newResource);\n+    } else {\n+      // Log resource change\n+      LOG.warn(\"Update resource on node: \" + node.getNodeName() \n+          + \" with the same resource: \" + newResource);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void updateNodeResource(RMNode nm, \n      ResourceOption resourceOption) {\n  \n    SchedulerNode node \u003d getSchedulerNode(nm.getNodeID());\n    Resource newResource \u003d resourceOption.getResource();\n    Resource oldResource \u003d node.getTotalResource();\n    if(!oldResource.equals(newResource)) {\n      // Log resource change\n      LOG.info(\"Update resource on node: \" + node.getNodeName() \n          + \" from: \" + oldResource + \", to: \"\n          + newResource);\n\n      // update resource to node\n      node.setTotalResource(newResource);\n    \n      // update resource to clusterResource\n      Resources.subtractFrom(clusterResource, oldResource);\n      Resources.addTo(clusterResource, newResource);\n    } else {\n      // Log resource change\n      LOG.warn(\"Update resource on node: \" + node.getNodeName() \n          + \" with the same resource: \" + newResource);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java"
    }
  }
}