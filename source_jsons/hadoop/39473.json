{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractCSQueue.java",
  "functionName": "initializeQueueState",
  "functionId": "initializeQueueState___previousState-QueueState__configuredState-QueueState__parentState-QueueState",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/AbstractCSQueue.java",
  "functionStartLine": 649,
  "functionEndLine": 697,
  "numCommitsSeen": 120,
  "timeTaken": 4209,
  "changeHistory": [
    "cdb2107066a2d8557270888c0a9a75f29a6853bf",
    "c7ef4fb74acacdb184d12bafadd8fb040b5c04b6",
    "0840b4329b2428b20b862f70d72cbdcd6d1618ed",
    "f885160f4ac56a0999e3b051eb7bccce928c1c33"
  ],
  "changeHistoryShort": {
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": "Ybodychange",
    "c7ef4fb74acacdb184d12bafadd8fb040b5c04b6": "Ybodychange",
    "0840b4329b2428b20b862f70d72cbdcd6d1618ed": "Ymultichange(Yparameterchange,Ybodychange)",
    "f885160f4ac56a0999e3b051eb7bccce928c1c33": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9879. Allow multiple leaf queues with the same name in CapacityScheduler. Contributed by Gergely Pollak.\n",
      "commitDate": "25/03/20 4:20 AM",
      "commitName": "cdb2107066a2d8557270888c0a9a75f29a6853bf",
      "commitAuthor": "Sunil G",
      "commitDateOld": "28/01/20 7:54 PM",
      "commitNameOld": "e578e52aae01248507e089b406fe038ab8e84207",
      "commitAuthorOld": "Eric Badger",
      "daysBetweenCommits": 56.31,
      "commitsBetweenForRepo": 177,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n   private void initializeQueueState(QueueState previousState,\n       QueueState configuredState, QueueState parentState) {\n     // verify that we can not any value for State other than RUNNING/STOPPED\n     if (configuredState !\u003d null \u0026\u0026 configuredState !\u003d QueueState.RUNNING\n         \u0026\u0026 configuredState !\u003d QueueState.STOPPED) {\n       throw new IllegalArgumentException(\"Invalid queue state configuration.\"\n           + \" We can only use RUNNING or STOPPED.\");\n     }\n     // If we did not set state in configuration, use Running as default state\n     QueueState defaultState \u003d QueueState.RUNNING;\n \n     if (previousState \u003d\u003d null) {\n       // If current state of the queue is null, we would inherit the state\n       // from its parent. If this queue does not has parent, such as root queue,\n       // we would use the configured state.\n       if (parentState \u003d\u003d null) {\n         updateQueueState((configuredState \u003d\u003d null) ? defaultState\n             : configuredState);\n       } else {\n         if (configuredState \u003d\u003d null) {\n           updateQueueState((parentState \u003d\u003d QueueState.DRAINING) ?\n               QueueState.STOPPED : parentState);\n         } else if (configuredState \u003d\u003d QueueState.RUNNING\n             \u0026\u0026 parentState !\u003d QueueState.RUNNING) {\n           throw new IllegalArgumentException(\n-              \"The parent queue:\" + parent.getQueueName()\n-              + \" cannot be STOPPED as the child queue:\" + queueName\n+              \"The parent queue:\" + parent.getQueuePath()\n+              + \" cannot be STOPPED as the child queue:\" + queuePath\n               + \" is in RUNNING state.\");\n         } else {\n           updateQueueState(configuredState);\n         }\n       }\n     } else {\n       // when we get a refreshQueue request from AdminService,\n       if (previousState \u003d\u003d QueueState.RUNNING) {\n         if (configuredState \u003d\u003d QueueState.STOPPED) {\n           stopQueue();\n         }\n       } else {\n         if (configuredState \u003d\u003d QueueState.RUNNING) {\n           try {\n             activeQueue();\n           } catch (YarnException ex) {\n             throw new IllegalArgumentException(ex.getMessage());\n           }\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initializeQueueState(QueueState previousState,\n      QueueState configuredState, QueueState parentState) {\n    // verify that we can not any value for State other than RUNNING/STOPPED\n    if (configuredState !\u003d null \u0026\u0026 configuredState !\u003d QueueState.RUNNING\n        \u0026\u0026 configuredState !\u003d QueueState.STOPPED) {\n      throw new IllegalArgumentException(\"Invalid queue state configuration.\"\n          + \" We can only use RUNNING or STOPPED.\");\n    }\n    // If we did not set state in configuration, use Running as default state\n    QueueState defaultState \u003d QueueState.RUNNING;\n\n    if (previousState \u003d\u003d null) {\n      // If current state of the queue is null, we would inherit the state\n      // from its parent. If this queue does not has parent, such as root queue,\n      // we would use the configured state.\n      if (parentState \u003d\u003d null) {\n        updateQueueState((configuredState \u003d\u003d null) ? defaultState\n            : configuredState);\n      } else {\n        if (configuredState \u003d\u003d null) {\n          updateQueueState((parentState \u003d\u003d QueueState.DRAINING) ?\n              QueueState.STOPPED : parentState);\n        } else if (configuredState \u003d\u003d QueueState.RUNNING\n            \u0026\u0026 parentState !\u003d QueueState.RUNNING) {\n          throw new IllegalArgumentException(\n              \"The parent queue:\" + parent.getQueuePath()\n              + \" cannot be STOPPED as the child queue:\" + queuePath\n              + \" is in RUNNING state.\");\n        } else {\n          updateQueueState(configuredState);\n        }\n      }\n    } else {\n      // when we get a refreshQueue request from AdminService,\n      if (previousState \u003d\u003d QueueState.RUNNING) {\n        if (configuredState \u003d\u003d QueueState.STOPPED) {\n          stopQueue();\n        }\n      } else {\n        if (configuredState \u003d\u003d QueueState.RUNNING) {\n          try {\n            activeQueue();\n          } catch (YarnException ex) {\n            throw new IllegalArgumentException(ex.getMessage());\n          }\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/AbstractCSQueue.java",
      "extendedDetails": {}
    },
    "c7ef4fb74acacdb184d12bafadd8fb040b5c04b6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8678. Queue Management API - rephrase error messages. Contributed by Prabhu Joseph.\n",
      "commitDate": "31/08/19 9:30 PM",
      "commitName": "c7ef4fb74acacdb184d12bafadd8fb040b5c04b6",
      "commitAuthor": "Abhishek Modi",
      "commitDateOld": "15/03/19 4:20 PM",
      "commitNameOld": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 169.21,
      "commitsBetweenForRepo": 1282,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n   private void initializeQueueState(QueueState previousState,\n       QueueState configuredState, QueueState parentState) {\n     // verify that we can not any value for State other than RUNNING/STOPPED\n     if (configuredState !\u003d null \u0026\u0026 configuredState !\u003d QueueState.RUNNING\n         \u0026\u0026 configuredState !\u003d QueueState.STOPPED) {\n       throw new IllegalArgumentException(\"Invalid queue state configuration.\"\n           + \" We can only use RUNNING or STOPPED.\");\n     }\n     // If we did not set state in configuration, use Running as default state\n     QueueState defaultState \u003d QueueState.RUNNING;\n \n     if (previousState \u003d\u003d null) {\n       // If current state of the queue is null, we would inherit the state\n       // from its parent. If this queue does not has parent, such as root queue,\n       // we would use the configured state.\n       if (parentState \u003d\u003d null) {\n         updateQueueState((configuredState \u003d\u003d null) ? defaultState\n             : configuredState);\n       } else {\n         if (configuredState \u003d\u003d null) {\n           updateQueueState((parentState \u003d\u003d QueueState.DRAINING) ?\n               QueueState.STOPPED : parentState);\n         } else if (configuredState \u003d\u003d QueueState.RUNNING\n             \u0026\u0026 parentState !\u003d QueueState.RUNNING) {\n           throw new IllegalArgumentException(\n               \"The parent queue:\" + parent.getQueueName()\n-              + \" state is STOPPED, child queue:\" + queueName\n-              + \" state cannot be RUNNING.\");\n+              + \" cannot be STOPPED as the child queue:\" + queueName\n+              + \" is in RUNNING state.\");\n         } else {\n           updateQueueState(configuredState);\n         }\n       }\n     } else {\n       // when we get a refreshQueue request from AdminService,\n       if (previousState \u003d\u003d QueueState.RUNNING) {\n         if (configuredState \u003d\u003d QueueState.STOPPED) {\n           stopQueue();\n         }\n       } else {\n         if (configuredState \u003d\u003d QueueState.RUNNING) {\n           try {\n             activeQueue();\n           } catch (YarnException ex) {\n             throw new IllegalArgumentException(ex.getMessage());\n           }\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initializeQueueState(QueueState previousState,\n      QueueState configuredState, QueueState parentState) {\n    // verify that we can not any value for State other than RUNNING/STOPPED\n    if (configuredState !\u003d null \u0026\u0026 configuredState !\u003d QueueState.RUNNING\n        \u0026\u0026 configuredState !\u003d QueueState.STOPPED) {\n      throw new IllegalArgumentException(\"Invalid queue state configuration.\"\n          + \" We can only use RUNNING or STOPPED.\");\n    }\n    // If we did not set state in configuration, use Running as default state\n    QueueState defaultState \u003d QueueState.RUNNING;\n\n    if (previousState \u003d\u003d null) {\n      // If current state of the queue is null, we would inherit the state\n      // from its parent. If this queue does not has parent, such as root queue,\n      // we would use the configured state.\n      if (parentState \u003d\u003d null) {\n        updateQueueState((configuredState \u003d\u003d null) ? defaultState\n            : configuredState);\n      } else {\n        if (configuredState \u003d\u003d null) {\n          updateQueueState((parentState \u003d\u003d QueueState.DRAINING) ?\n              QueueState.STOPPED : parentState);\n        } else if (configuredState \u003d\u003d QueueState.RUNNING\n            \u0026\u0026 parentState !\u003d QueueState.RUNNING) {\n          throw new IllegalArgumentException(\n              \"The parent queue:\" + parent.getQueueName()\n              + \" cannot be STOPPED as the child queue:\" + queueName\n              + \" is in RUNNING state.\");\n        } else {\n          updateQueueState(configuredState);\n        }\n      }\n    } else {\n      // when we get a refreshQueue request from AdminService,\n      if (previousState \u003d\u003d QueueState.RUNNING) {\n        if (configuredState \u003d\u003d QueueState.STOPPED) {\n          stopQueue();\n        }\n      } else {\n        if (configuredState \u003d\u003d QueueState.RUNNING) {\n          try {\n            activeQueue();\n          } catch (YarnException ex) {\n            throw new IllegalArgumentException(ex.getMessage());\n          }\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/AbstractCSQueue.java",
      "extendedDetails": {}
    },
    "0840b4329b2428b20b862f70d72cbdcd6d1618ed": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5756. Add state-machine implementation for scheduler queues. (Xuan Gong via wangda)\n",
      "commitDate": "27/12/16 9:18 PM",
      "commitName": "0840b4329b2428b20b862f70d72cbdcd6d1618ed",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5756. Add state-machine implementation for scheduler queues. (Xuan Gong via wangda)\n",
          "commitDate": "27/12/16 9:18 PM",
          "commitName": "0840b4329b2428b20b862f70d72cbdcd6d1618ed",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "06/12/16 9:09 PM",
          "commitNameOld": "563480dccd0136d82730f4228f1df44449ed5822",
          "commitAuthorOld": "Rohith Sharma K S",
          "daysBetweenCommits": 21.01,
          "commitsBetweenForRepo": 97,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,49 @@\n-  private void initializeQueueState() {\n-    // inherit from parent if state not set, only do this when we are not root\n-    if (parent !\u003d null) {\n-      QueueState configuredState \u003d csContext.getConfiguration()\n-          .getConfiguredState(getQueuePath());\n-      QueueState parentState \u003d parent.getState();\n-      if (configuredState \u003d\u003d null) {\n-        this.state \u003d parentState;\n-      } else if (configuredState \u003d\u003d QueueState.RUNNING\n-          \u0026\u0026 parentState \u003d\u003d QueueState.STOPPED) {\n-        throw new IllegalArgumentException(\n-            \"The parent queue:\" + parent.getQueueName() + \" state is STOPPED, \"\n-            + \"child queue:\" + queueName + \" state cannot be RUNNING.\");\n+  private void initializeQueueState(QueueState previousState,\n+      QueueState configuredState, QueueState parentState) {\n+    // verify that we can not any value for State other than RUNNING/STOPPED\n+    if (configuredState !\u003d null \u0026\u0026 configuredState !\u003d QueueState.RUNNING\n+        \u0026\u0026 configuredState !\u003d QueueState.STOPPED) {\n+      throw new IllegalArgumentException(\"Invalid queue state configuration.\"\n+          + \" We can only use RUNNING or STOPPED.\");\n+    }\n+    // If we did not set state in configuration, use Running as default state\n+    QueueState defaultState \u003d QueueState.RUNNING;\n+\n+    if (previousState \u003d\u003d null) {\n+      // If current state of the queue is null, we would inherit the state\n+      // from its parent. If this queue does not has parent, such as root queue,\n+      // we would use the configured state.\n+      if (parentState \u003d\u003d null) {\n+        updateQueueState((configuredState \u003d\u003d null) ? defaultState\n+            : configuredState);\n       } else {\n-        this.state \u003d configuredState;\n+        if (configuredState \u003d\u003d null) {\n+          updateQueueState((parentState \u003d\u003d QueueState.DRAINING) ?\n+              QueueState.STOPPED : parentState);\n+        } else if (configuredState \u003d\u003d QueueState.RUNNING\n+            \u0026\u0026 parentState !\u003d QueueState.RUNNING) {\n+          throw new IllegalArgumentException(\n+              \"The parent queue:\" + parent.getQueueName()\n+              + \" state is STOPPED, child queue:\" + queueName\n+              + \" state cannot be RUNNING.\");\n+        } else {\n+          updateQueueState(configuredState);\n+        }\n       }\n     } else {\n-      // if this is the root queue, get the state from the configuration.\n-      // if the state is not set, use RUNNING as default state.\n-      this.state \u003d csContext.getConfiguration().getState(getQueuePath());\n+      // when we get a refreshQueue request from AdminService,\n+      if (previousState \u003d\u003d QueueState.RUNNING) {\n+        if (configuredState \u003d\u003d QueueState.STOPPED) {\n+          stopQueue();\n+        }\n+      } else {\n+        if (configuredState \u003d\u003d QueueState.RUNNING) {\n+          try {\n+            activeQueue();\n+          } catch (YarnException ex) {\n+            throw new IllegalArgumentException(ex.getMessage());\n+          }\n+        }\n+      }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void initializeQueueState(QueueState previousState,\n      QueueState configuredState, QueueState parentState) {\n    // verify that we can not any value for State other than RUNNING/STOPPED\n    if (configuredState !\u003d null \u0026\u0026 configuredState !\u003d QueueState.RUNNING\n        \u0026\u0026 configuredState !\u003d QueueState.STOPPED) {\n      throw new IllegalArgumentException(\"Invalid queue state configuration.\"\n          + \" We can only use RUNNING or STOPPED.\");\n    }\n    // If we did not set state in configuration, use Running as default state\n    QueueState defaultState \u003d QueueState.RUNNING;\n\n    if (previousState \u003d\u003d null) {\n      // If current state of the queue is null, we would inherit the state\n      // from its parent. If this queue does not has parent, such as root queue,\n      // we would use the configured state.\n      if (parentState \u003d\u003d null) {\n        updateQueueState((configuredState \u003d\u003d null) ? defaultState\n            : configuredState);\n      } else {\n        if (configuredState \u003d\u003d null) {\n          updateQueueState((parentState \u003d\u003d QueueState.DRAINING) ?\n              QueueState.STOPPED : parentState);\n        } else if (configuredState \u003d\u003d QueueState.RUNNING\n            \u0026\u0026 parentState !\u003d QueueState.RUNNING) {\n          throw new IllegalArgumentException(\n              \"The parent queue:\" + parent.getQueueName()\n              + \" state is STOPPED, child queue:\" + queueName\n              + \" state cannot be RUNNING.\");\n        } else {\n          updateQueueState(configuredState);\n        }\n      }\n    } else {\n      // when we get a refreshQueue request from AdminService,\n      if (previousState \u003d\u003d QueueState.RUNNING) {\n        if (configuredState \u003d\u003d QueueState.STOPPED) {\n          stopQueue();\n        }\n      } else {\n        if (configuredState \u003d\u003d QueueState.RUNNING) {\n          try {\n            activeQueue();\n          } catch (YarnException ex) {\n            throw new IllegalArgumentException(ex.getMessage());\n          }\n        }\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/AbstractCSQueue.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[previousState-QueueState, configuredState-QueueState, parentState-QueueState]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5756. Add state-machine implementation for scheduler queues. (Xuan Gong via wangda)\n",
          "commitDate": "27/12/16 9:18 PM",
          "commitName": "0840b4329b2428b20b862f70d72cbdcd6d1618ed",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "06/12/16 9:09 PM",
          "commitNameOld": "563480dccd0136d82730f4228f1df44449ed5822",
          "commitAuthorOld": "Rohith Sharma K S",
          "daysBetweenCommits": 21.01,
          "commitsBetweenForRepo": 97,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,49 @@\n-  private void initializeQueueState() {\n-    // inherit from parent if state not set, only do this when we are not root\n-    if (parent !\u003d null) {\n-      QueueState configuredState \u003d csContext.getConfiguration()\n-          .getConfiguredState(getQueuePath());\n-      QueueState parentState \u003d parent.getState();\n-      if (configuredState \u003d\u003d null) {\n-        this.state \u003d parentState;\n-      } else if (configuredState \u003d\u003d QueueState.RUNNING\n-          \u0026\u0026 parentState \u003d\u003d QueueState.STOPPED) {\n-        throw new IllegalArgumentException(\n-            \"The parent queue:\" + parent.getQueueName() + \" state is STOPPED, \"\n-            + \"child queue:\" + queueName + \" state cannot be RUNNING.\");\n+  private void initializeQueueState(QueueState previousState,\n+      QueueState configuredState, QueueState parentState) {\n+    // verify that we can not any value for State other than RUNNING/STOPPED\n+    if (configuredState !\u003d null \u0026\u0026 configuredState !\u003d QueueState.RUNNING\n+        \u0026\u0026 configuredState !\u003d QueueState.STOPPED) {\n+      throw new IllegalArgumentException(\"Invalid queue state configuration.\"\n+          + \" We can only use RUNNING or STOPPED.\");\n+    }\n+    // If we did not set state in configuration, use Running as default state\n+    QueueState defaultState \u003d QueueState.RUNNING;\n+\n+    if (previousState \u003d\u003d null) {\n+      // If current state of the queue is null, we would inherit the state\n+      // from its parent. If this queue does not has parent, such as root queue,\n+      // we would use the configured state.\n+      if (parentState \u003d\u003d null) {\n+        updateQueueState((configuredState \u003d\u003d null) ? defaultState\n+            : configuredState);\n       } else {\n-        this.state \u003d configuredState;\n+        if (configuredState \u003d\u003d null) {\n+          updateQueueState((parentState \u003d\u003d QueueState.DRAINING) ?\n+              QueueState.STOPPED : parentState);\n+        } else if (configuredState \u003d\u003d QueueState.RUNNING\n+            \u0026\u0026 parentState !\u003d QueueState.RUNNING) {\n+          throw new IllegalArgumentException(\n+              \"The parent queue:\" + parent.getQueueName()\n+              + \" state is STOPPED, child queue:\" + queueName\n+              + \" state cannot be RUNNING.\");\n+        } else {\n+          updateQueueState(configuredState);\n+        }\n       }\n     } else {\n-      // if this is the root queue, get the state from the configuration.\n-      // if the state is not set, use RUNNING as default state.\n-      this.state \u003d csContext.getConfiguration().getState(getQueuePath());\n+      // when we get a refreshQueue request from AdminService,\n+      if (previousState \u003d\u003d QueueState.RUNNING) {\n+        if (configuredState \u003d\u003d QueueState.STOPPED) {\n+          stopQueue();\n+        }\n+      } else {\n+        if (configuredState \u003d\u003d QueueState.RUNNING) {\n+          try {\n+            activeQueue();\n+          } catch (YarnException ex) {\n+            throw new IllegalArgumentException(ex.getMessage());\n+          }\n+        }\n+      }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void initializeQueueState(QueueState previousState,\n      QueueState configuredState, QueueState parentState) {\n    // verify that we can not any value for State other than RUNNING/STOPPED\n    if (configuredState !\u003d null \u0026\u0026 configuredState !\u003d QueueState.RUNNING\n        \u0026\u0026 configuredState !\u003d QueueState.STOPPED) {\n      throw new IllegalArgumentException(\"Invalid queue state configuration.\"\n          + \" We can only use RUNNING or STOPPED.\");\n    }\n    // If we did not set state in configuration, use Running as default state\n    QueueState defaultState \u003d QueueState.RUNNING;\n\n    if (previousState \u003d\u003d null) {\n      // If current state of the queue is null, we would inherit the state\n      // from its parent. If this queue does not has parent, such as root queue,\n      // we would use the configured state.\n      if (parentState \u003d\u003d null) {\n        updateQueueState((configuredState \u003d\u003d null) ? defaultState\n            : configuredState);\n      } else {\n        if (configuredState \u003d\u003d null) {\n          updateQueueState((parentState \u003d\u003d QueueState.DRAINING) ?\n              QueueState.STOPPED : parentState);\n        } else if (configuredState \u003d\u003d QueueState.RUNNING\n            \u0026\u0026 parentState !\u003d QueueState.RUNNING) {\n          throw new IllegalArgumentException(\n              \"The parent queue:\" + parent.getQueueName()\n              + \" state is STOPPED, child queue:\" + queueName\n              + \" state cannot be RUNNING.\");\n        } else {\n          updateQueueState(configuredState);\n        }\n      }\n    } else {\n      // when we get a refreshQueue request from AdminService,\n      if (previousState \u003d\u003d QueueState.RUNNING) {\n        if (configuredState \u003d\u003d QueueState.STOPPED) {\n          stopQueue();\n        }\n      } else {\n        if (configuredState \u003d\u003d QueueState.RUNNING) {\n          try {\n            activeQueue();\n          } catch (YarnException ex) {\n            throw new IllegalArgumentException(ex.getMessage());\n          }\n        }\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/AbstractCSQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "f885160f4ac56a0999e3b051eb7bccce928c1c33": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5746. The state of the parentQueue and its childQueues should be synchronized. Contributed by Xuan Gong\n",
      "commitDate": "02/12/16 4:17 PM",
      "commitName": "f885160f4ac56a0999e3b051eb7bccce928c1c33",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,22 @@\n+  private void initializeQueueState() {\n+    // inherit from parent if state not set, only do this when we are not root\n+    if (parent !\u003d null) {\n+      QueueState configuredState \u003d csContext.getConfiguration()\n+          .getConfiguredState(getQueuePath());\n+      QueueState parentState \u003d parent.getState();\n+      if (configuredState \u003d\u003d null) {\n+        this.state \u003d parentState;\n+      } else if (configuredState \u003d\u003d QueueState.RUNNING\n+          \u0026\u0026 parentState \u003d\u003d QueueState.STOPPED) {\n+        throw new IllegalArgumentException(\n+            \"The parent queue:\" + parent.getQueueName() + \" state is STOPPED, \"\n+            + \"child queue:\" + queueName + \" state cannot be RUNNING.\");\n+      } else {\n+        this.state \u003d configuredState;\n+      }\n+    } else {\n+      // if this is the root queue, get the state from the configuration.\n+      // if the state is not set, use RUNNING as default state.\n+      this.state \u003d csContext.getConfiguration().getState(getQueuePath());\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void initializeQueueState() {\n    // inherit from parent if state not set, only do this when we are not root\n    if (parent !\u003d null) {\n      QueueState configuredState \u003d csContext.getConfiguration()\n          .getConfiguredState(getQueuePath());\n      QueueState parentState \u003d parent.getState();\n      if (configuredState \u003d\u003d null) {\n        this.state \u003d parentState;\n      } else if (configuredState \u003d\u003d QueueState.RUNNING\n          \u0026\u0026 parentState \u003d\u003d QueueState.STOPPED) {\n        throw new IllegalArgumentException(\n            \"The parent queue:\" + parent.getQueueName() + \" state is STOPPED, \"\n            + \"child queue:\" + queueName + \" state cannot be RUNNING.\");\n      } else {\n        this.state \u003d configuredState;\n      }\n    } else {\n      // if this is the root queue, get the state from the configuration.\n      // if the state is not set, use RUNNING as default state.\n      this.state \u003d csContext.getConfiguration().getState(getQueuePath());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/AbstractCSQueue.java"
    }
  }
}