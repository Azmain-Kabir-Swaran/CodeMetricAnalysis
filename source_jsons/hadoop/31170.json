{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RouterWebServiceUtil.java",
  "functionName": "mergeUAMWithUAM",
  "functionId": "mergeUAMWithUAM___uam1-AppInfo__uam2-AppInfo",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-router/src/main/java/org/apache/hadoop/yarn/server/router/webapp/RouterWebServiceUtil.java",
  "functionStartLine": 319,
  "functionEndLine": 329,
  "numCommitsSeen": 8,
  "timeTaken": 1128,
  "changeHistory": [
    "cc8893edc0b7960e958723c81062986c12f06ade"
  ],
  "changeHistoryShort": {
    "cc8893edc0b7960e958723c81062986c12f06ade": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cc8893edc0b7960e958723c81062986c12f06ade": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7010. Federation: routing REST invocations transparently to multiple RMs (part 2 - getApps). (Contributed by Giovanni Matteo Fumarola via curino)\n",
      "commitDate": "29/08/17 2:53 PM",
      "commitName": "cc8893edc0b7960e958723c81062986c12f06ade",
      "commitAuthor": "Carlo Curino",
      "diff": "@@ -0,0 +1,11 @@\n+  private static AppInfo mergeUAMWithUAM(AppInfo uam1, AppInfo uam2) {\n+    AppInfo partialReport \u003d new AppInfo();\n+    partialReport.setAppId(uam1.getAppId());\n+    partialReport.setName(PARTIAL_REPORT + uam1.getAppId());\n+    // We pick the status of the first uam\n+    partialReport.setState(uam1.getState());\n+    // Merge the newly partial AM with UAM1 and then with UAM2\n+    mergeAMWithUAM(partialReport, uam1);\n+    mergeAMWithUAM(partialReport, uam2);\n+    return partialReport;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static AppInfo mergeUAMWithUAM(AppInfo uam1, AppInfo uam2) {\n    AppInfo partialReport \u003d new AppInfo();\n    partialReport.setAppId(uam1.getAppId());\n    partialReport.setName(PARTIAL_REPORT + uam1.getAppId());\n    // We pick the status of the first uam\n    partialReport.setState(uam1.getState());\n    // Merge the newly partial AM with UAM1 and then with UAM2\n    mergeAMWithUAM(partialReport, uam1);\n    mergeAMWithUAM(partialReport, uam2);\n    return partialReport;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-router/src/main/java/org/apache/hadoop/yarn/server/router/webapp/RouterWebServiceUtil.java"
    }
  }
}