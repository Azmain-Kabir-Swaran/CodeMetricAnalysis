{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MetricsSourceBuilder.java",
  "functionName": "initRegistry",
  "functionId": "initRegistry___source-Object",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/lib/MetricsSourceBuilder.java",
  "functionStartLine": 98,
  "functionEndLine": 127,
  "numCommitsSeen": 8,
  "timeTaken": 870,
  "changeHistory": [
    "2c6a4e1a75fb6bd06bdde78d94387cd568c3af14",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "827401a9b1d85fe1f443d21ebe9d917ba23153de"
  ],
  "changeHistoryShort": {
    "2c6a4e1a75fb6bd06bdde78d94387cd568c3af14": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "827401a9b1d85fe1f443d21ebe9d917ba23153de": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2c6a4e1a75fb6bd06bdde78d94387cd568c3af14": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9661. Allow metrics sources to be extended. (sandyr via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1496227 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/06/13 2:41 PM",
      "commitName": "2c6a4e1a75fb6bd06bdde78d94387cd568c3af14",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "15/10/12 9:29 PM",
      "commitNameOld": "41eec8a32b7b4c43094f5e5d4b55725b1b3f1441",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 251.72,
      "commitsBetweenForRepo": 1460,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   private MetricsRegistry initRegistry(Object source) {\n     Class\u003c?\u003e cls \u003d source.getClass();\n     MetricsRegistry r \u003d null;\n     // Get the registry if it already exists.\n-    for (Field field : cls.getDeclaredFields()) {\n+    for (Field field : ReflectionUtils.getDeclaredFieldsIncludingInherited(cls)) {\n       if (field.getType() !\u003d MetricsRegistry.class) continue;\n       try {\n         field.setAccessible(true);\n         r \u003d (MetricsRegistry) field.get(source);\n         hasRegistry \u003d r !\u003d null;\n         break;\n       } catch (Exception e) {\n         LOG.warn(\"Error accessing field \"+ field, e);\n         continue;\n       }\n     }\n     // Create a new registry according to annotation\n     for (Annotation annotation : cls.getAnnotations()) {\n       if (annotation instanceof Metrics) {\n         Metrics ma \u003d (Metrics) annotation;\n         info \u003d factory.getInfo(cls, ma);\n         if (r \u003d\u003d null) {\n           r \u003d new MetricsRegistry(info);\n         }\n         r.setContext(ma.context());\n       }\n     }\n     if (r \u003d\u003d null) return new MetricsRegistry(cls.getSimpleName());\n     return r;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private MetricsRegistry initRegistry(Object source) {\n    Class\u003c?\u003e cls \u003d source.getClass();\n    MetricsRegistry r \u003d null;\n    // Get the registry if it already exists.\n    for (Field field : ReflectionUtils.getDeclaredFieldsIncludingInherited(cls)) {\n      if (field.getType() !\u003d MetricsRegistry.class) continue;\n      try {\n        field.setAccessible(true);\n        r \u003d (MetricsRegistry) field.get(source);\n        hasRegistry \u003d r !\u003d null;\n        break;\n      } catch (Exception e) {\n        LOG.warn(\"Error accessing field \"+ field, e);\n        continue;\n      }\n    }\n    // Create a new registry according to annotation\n    for (Annotation annotation : cls.getAnnotations()) {\n      if (annotation instanceof Metrics) {\n        Metrics ma \u003d (Metrics) annotation;\n        info \u003d factory.getInfo(cls, ma);\n        if (r \u003d\u003d null) {\n          r \u003d new MetricsRegistry(info);\n        }\n        r.setContext(ma.context());\n      }\n    }\n    if (r \u003d\u003d null) return new MetricsRegistry(cls.getSimpleName());\n    return r;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/lib/MetricsSourceBuilder.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private MetricsRegistry initRegistry(Object source) {\n    Class\u003c?\u003e cls \u003d source.getClass();\n    MetricsRegistry r \u003d null;\n    // Get the registry if it already exists.\n    for (Field field : cls.getDeclaredFields()) {\n      if (field.getType() !\u003d MetricsRegistry.class) continue;\n      try {\n        field.setAccessible(true);\n        r \u003d (MetricsRegistry) field.get(source);\n        hasRegistry \u003d r !\u003d null;\n        break;\n      }\n      catch (Exception e) {\n        LOG.warn(\"Error accessing field \"+ field, e);\n        continue;\n      }\n    }\n    // Create a new registry according to annotation\n    for (Annotation annotation : cls.getAnnotations()) {\n      if (annotation instanceof Metrics) {\n        Metrics ma \u003d (Metrics) annotation;\n        info \u003d factory.getInfo(cls, ma);\n        if (r \u003d\u003d null) {\n          r \u003d new MetricsRegistry(info);\n        }\n        r.setContext(ma.context());\n      }\n    }\n    if (r \u003d\u003d null) return new MetricsRegistry(cls.getSimpleName());\n    return r;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/lib/MetricsSourceBuilder.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/metrics2/lib/MetricsSourceBuilder.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/lib/MetricsSourceBuilder.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private MetricsRegistry initRegistry(Object source) {\n    Class\u003c?\u003e cls \u003d source.getClass();\n    MetricsRegistry r \u003d null;\n    // Get the registry if it already exists.\n    for (Field field : cls.getDeclaredFields()) {\n      if (field.getType() !\u003d MetricsRegistry.class) continue;\n      try {\n        field.setAccessible(true);\n        r \u003d (MetricsRegistry) field.get(source);\n        hasRegistry \u003d r !\u003d null;\n        break;\n      }\n      catch (Exception e) {\n        LOG.warn(\"Error accessing field \"+ field, e);\n        continue;\n      }\n    }\n    // Create a new registry according to annotation\n    for (Annotation annotation : cls.getAnnotations()) {\n      if (annotation instanceof Metrics) {\n        Metrics ma \u003d (Metrics) annotation;\n        info \u003d factory.getInfo(cls, ma);\n        if (r \u003d\u003d null) {\n          r \u003d new MetricsRegistry(info);\n        }\n        r.setContext(ma.context());\n      }\n    }\n    if (r \u003d\u003d null) return new MetricsRegistry(cls.getSimpleName());\n    return r;\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/metrics2/lib/MetricsSourceBuilder.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/metrics2/lib/MetricsSourceBuilder.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/metrics2/lib/MetricsSourceBuilder.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private MetricsRegistry initRegistry(Object source) {\n    Class\u003c?\u003e cls \u003d source.getClass();\n    MetricsRegistry r \u003d null;\n    // Get the registry if it already exists.\n    for (Field field : cls.getDeclaredFields()) {\n      if (field.getType() !\u003d MetricsRegistry.class) continue;\n      try {\n        field.setAccessible(true);\n        r \u003d (MetricsRegistry) field.get(source);\n        hasRegistry \u003d r !\u003d null;\n        break;\n      }\n      catch (Exception e) {\n        LOG.warn(\"Error accessing field \"+ field, e);\n        continue;\n      }\n    }\n    // Create a new registry according to annotation\n    for (Annotation annotation : cls.getAnnotations()) {\n      if (annotation instanceof Metrics) {\n        Metrics ma \u003d (Metrics) annotation;\n        info \u003d factory.getInfo(cls, ma);\n        if (r \u003d\u003d null) {\n          r \u003d new MetricsRegistry(info);\n        }\n        r.setContext(ma.context());\n      }\n    }\n    if (r \u003d\u003d null) return new MetricsRegistry(cls.getSimpleName());\n    return r;\n  }",
      "path": "common/src/java/org/apache/hadoop/metrics2/lib/MetricsSourceBuilder.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/metrics2/lib/MetricsSourceBuilder.java",
        "newPath": "common/src/java/org/apache/hadoop/metrics2/lib/MetricsSourceBuilder.java"
      }
    },
    "827401a9b1d85fe1f443d21ebe9d917ba23153de": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-6919. New metrics2 framework. Contributed by Luke Lu.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1100113 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/05/11 12:28 AM",
      "commitName": "827401a9b1d85fe1f443d21ebe9d917ba23153de",
      "commitAuthor": "Arun Murthy",
      "diff": "@@ -0,0 +1,31 @@\n+  private MetricsRegistry initRegistry(Object source) {\n+    Class\u003c?\u003e cls \u003d source.getClass();\n+    MetricsRegistry r \u003d null;\n+    // Get the registry if it already exists.\n+    for (Field field : cls.getDeclaredFields()) {\n+      if (field.getType() !\u003d MetricsRegistry.class) continue;\n+      try {\n+        field.setAccessible(true);\n+        r \u003d (MetricsRegistry) field.get(source);\n+        hasRegistry \u003d r !\u003d null;\n+        break;\n+      }\n+      catch (Exception e) {\n+        LOG.warn(\"Error accessing field \"+ field, e);\n+        continue;\n+      }\n+    }\n+    // Create a new registry according to annotation\n+    for (Annotation annotation : cls.getAnnotations()) {\n+      if (annotation instanceof Metrics) {\n+        Metrics ma \u003d (Metrics) annotation;\n+        info \u003d factory.getInfo(cls, ma);\n+        if (r \u003d\u003d null) {\n+          r \u003d new MetricsRegistry(info);\n+        }\n+        r.setContext(ma.context());\n+      }\n+    }\n+    if (r \u003d\u003d null) return new MetricsRegistry(cls.getSimpleName());\n+    return r;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private MetricsRegistry initRegistry(Object source) {\n    Class\u003c?\u003e cls \u003d source.getClass();\n    MetricsRegistry r \u003d null;\n    // Get the registry if it already exists.\n    for (Field field : cls.getDeclaredFields()) {\n      if (field.getType() !\u003d MetricsRegistry.class) continue;\n      try {\n        field.setAccessible(true);\n        r \u003d (MetricsRegistry) field.get(source);\n        hasRegistry \u003d r !\u003d null;\n        break;\n      }\n      catch (Exception e) {\n        LOG.warn(\"Error accessing field \"+ field, e);\n        continue;\n      }\n    }\n    // Create a new registry according to annotation\n    for (Annotation annotation : cls.getAnnotations()) {\n      if (annotation instanceof Metrics) {\n        Metrics ma \u003d (Metrics) annotation;\n        info \u003d factory.getInfo(cls, ma);\n        if (r \u003d\u003d null) {\n          r \u003d new MetricsRegistry(info);\n        }\n        r.setContext(ma.context());\n      }\n    }\n    if (r \u003d\u003d null) return new MetricsRegistry(cls.getSimpleName());\n    return r;\n  }",
      "path": "src/java/org/apache/hadoop/metrics2/lib/MetricsSourceBuilder.java"
    }
  }
}