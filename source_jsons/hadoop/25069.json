{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MRApps.java",
  "functionName": "setupDistributedCacheLocal",
  "functionId": "setupDistributedCacheLocal___conf-Configuration",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java",
  "functionStartLine": 514,
  "functionEndLine": 559,
  "numCommitsSeen": 82,
  "timeTaken": 8225,
  "changeHistory": [
    "7039b98e1c459e9e0d8caa28cdaa2868e2bde2eb",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "7039b98e1c459e9e0d8caa28cdaa2868e2bde2eb": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yrename,Yparameterchange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7039b98e1c459e9e0d8caa28cdaa2868e2bde2eb": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yrename,Yparameterchange)",
      "commitMessage": "MAPREDUCE-6095. Enable DistributedCache for uber-mode Jobs. Contributed by Gera Shegalov\n",
      "commitDate": "22/09/14 8:20 AM",
      "commitName": "7039b98e1c459e9e0d8caa28cdaa2868e2bde2eb",
      "commitAuthor": "Jason Lowe",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "MAPREDUCE-6095. Enable DistributedCache for uber-mode Jobs. Contributed by Gera Shegalov\n",
          "commitDate": "22/09/14 8:20 AM",
          "commitName": "7039b98e1c459e9e0d8caa28cdaa2868e2bde2eb",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "21/09/14 11:13 PM",
          "commitNameOld": "9721e2c1feb5aecea3a6dab5bda96af1cd0f8de3",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 0.38,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,46 @@\n-  private static void setupDistributedCacheConfig(final JobConf job)\n+  public static void setupDistributedCacheLocal(Configuration conf)\n       throws IOException {\n \n     String localWorkDir \u003d System.getenv(\"PWD\");\n     //        ^ ^ all symlinks are created in the current work-dir\n \n     // Update the configuration object with localized archives.\n-    URI[] cacheArchives \u003d DistributedCache.getCacheArchives(job);\n+    URI[] cacheArchives \u003d DistributedCache.getCacheArchives(conf);\n     if (cacheArchives !\u003d null) {\n       List\u003cString\u003e localArchives \u003d new ArrayList\u003cString\u003e();\n       for (int i \u003d 0; i \u003c cacheArchives.length; ++i) {\n         URI u \u003d cacheArchives[i];\n         Path p \u003d new Path(u);\n         Path name \u003d\n             new Path((null \u003d\u003d u.getFragment()) ? p.getName()\n                 : u.getFragment());\n         String linkName \u003d name.toUri().getPath();\n         localArchives.add(new Path(localWorkDir, linkName).toUri().getPath());\n       }\n       if (!localArchives.isEmpty()) {\n-        job.set(MRJobConfig.CACHE_LOCALARCHIVES, StringUtils\n+        conf.set(MRJobConfig.CACHE_LOCALARCHIVES, StringUtils\n             .arrayToString(localArchives.toArray(new String[localArchives\n                 .size()])));\n       }\n     }\n \n     // Update the configuration object with localized files.\n-    URI[] cacheFiles \u003d DistributedCache.getCacheFiles(job);\n+    URI[] cacheFiles \u003d DistributedCache.getCacheFiles(conf);\n     if (cacheFiles !\u003d null) {\n       List\u003cString\u003e localFiles \u003d new ArrayList\u003cString\u003e();\n       for (int i \u003d 0; i \u003c cacheFiles.length; ++i) {\n         URI u \u003d cacheFiles[i];\n         Path p \u003d new Path(u);\n         Path name \u003d\n             new Path((null \u003d\u003d u.getFragment()) ? p.getName()\n                 : u.getFragment());\n         String linkName \u003d name.toUri().getPath();\n         localFiles.add(new Path(localWorkDir, linkName).toUri().getPath());\n       }\n       if (!localFiles.isEmpty()) {\n-        job.set(MRJobConfig.CACHE_LOCALFILES,\n+        conf.set(MRJobConfig.CACHE_LOCALFILES,\n             StringUtils.arrayToString(localFiles\n                 .toArray(new String[localFiles.size()])));\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void setupDistributedCacheLocal(Configuration conf)\n      throws IOException {\n\n    String localWorkDir \u003d System.getenv(\"PWD\");\n    //        ^ ^ all symlinks are created in the current work-dir\n\n    // Update the configuration object with localized archives.\n    URI[] cacheArchives \u003d DistributedCache.getCacheArchives(conf);\n    if (cacheArchives !\u003d null) {\n      List\u003cString\u003e localArchives \u003d new ArrayList\u003cString\u003e();\n      for (int i \u003d 0; i \u003c cacheArchives.length; ++i) {\n        URI u \u003d cacheArchives[i];\n        Path p \u003d new Path(u);\n        Path name \u003d\n            new Path((null \u003d\u003d u.getFragment()) ? p.getName()\n                : u.getFragment());\n        String linkName \u003d name.toUri().getPath();\n        localArchives.add(new Path(localWorkDir, linkName).toUri().getPath());\n      }\n      if (!localArchives.isEmpty()) {\n        conf.set(MRJobConfig.CACHE_LOCALARCHIVES, StringUtils\n            .arrayToString(localArchives.toArray(new String[localArchives\n                .size()])));\n      }\n    }\n\n    // Update the configuration object with localized files.\n    URI[] cacheFiles \u003d DistributedCache.getCacheFiles(conf);\n    if (cacheFiles !\u003d null) {\n      List\u003cString\u003e localFiles \u003d new ArrayList\u003cString\u003e();\n      for (int i \u003d 0; i \u003c cacheFiles.length; ++i) {\n        URI u \u003d cacheFiles[i];\n        Path p \u003d new Path(u);\n        Path name \u003d\n            new Path((null \u003d\u003d u.getFragment()) ? p.getName()\n                : u.getFragment());\n        String linkName \u003d name.toUri().getPath();\n        localFiles.add(new Path(localWorkDir, linkName).toUri().getPath());\n      }\n      if (!localFiles.isEmpty()) {\n        conf.set(MRJobConfig.CACHE_LOCALFILES,\n            StringUtils.arrayToString(localFiles\n                .toArray(new String[localFiles.size()])));\n      }\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java",
          "extendedDetails": {
            "oldPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapred/YarnChild.java",
            "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java",
            "oldMethodName": "setupDistributedCacheConfig",
            "newMethodName": "setupDistributedCacheLocal"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "MAPREDUCE-6095. Enable DistributedCache for uber-mode Jobs. Contributed by Gera Shegalov\n",
          "commitDate": "22/09/14 8:20 AM",
          "commitName": "7039b98e1c459e9e0d8caa28cdaa2868e2bde2eb",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "21/09/14 11:13 PM",
          "commitNameOld": "9721e2c1feb5aecea3a6dab5bda96af1cd0f8de3",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 0.38,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,46 @@\n-  private static void setupDistributedCacheConfig(final JobConf job)\n+  public static void setupDistributedCacheLocal(Configuration conf)\n       throws IOException {\n \n     String localWorkDir \u003d System.getenv(\"PWD\");\n     //        ^ ^ all symlinks are created in the current work-dir\n \n     // Update the configuration object with localized archives.\n-    URI[] cacheArchives \u003d DistributedCache.getCacheArchives(job);\n+    URI[] cacheArchives \u003d DistributedCache.getCacheArchives(conf);\n     if (cacheArchives !\u003d null) {\n       List\u003cString\u003e localArchives \u003d new ArrayList\u003cString\u003e();\n       for (int i \u003d 0; i \u003c cacheArchives.length; ++i) {\n         URI u \u003d cacheArchives[i];\n         Path p \u003d new Path(u);\n         Path name \u003d\n             new Path((null \u003d\u003d u.getFragment()) ? p.getName()\n                 : u.getFragment());\n         String linkName \u003d name.toUri().getPath();\n         localArchives.add(new Path(localWorkDir, linkName).toUri().getPath());\n       }\n       if (!localArchives.isEmpty()) {\n-        job.set(MRJobConfig.CACHE_LOCALARCHIVES, StringUtils\n+        conf.set(MRJobConfig.CACHE_LOCALARCHIVES, StringUtils\n             .arrayToString(localArchives.toArray(new String[localArchives\n                 .size()])));\n       }\n     }\n \n     // Update the configuration object with localized files.\n-    URI[] cacheFiles \u003d DistributedCache.getCacheFiles(job);\n+    URI[] cacheFiles \u003d DistributedCache.getCacheFiles(conf);\n     if (cacheFiles !\u003d null) {\n       List\u003cString\u003e localFiles \u003d new ArrayList\u003cString\u003e();\n       for (int i \u003d 0; i \u003c cacheFiles.length; ++i) {\n         URI u \u003d cacheFiles[i];\n         Path p \u003d new Path(u);\n         Path name \u003d\n             new Path((null \u003d\u003d u.getFragment()) ? p.getName()\n                 : u.getFragment());\n         String linkName \u003d name.toUri().getPath();\n         localFiles.add(new Path(localWorkDir, linkName).toUri().getPath());\n       }\n       if (!localFiles.isEmpty()) {\n-        job.set(MRJobConfig.CACHE_LOCALFILES,\n+        conf.set(MRJobConfig.CACHE_LOCALFILES,\n             StringUtils.arrayToString(localFiles\n                 .toArray(new String[localFiles.size()])));\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void setupDistributedCacheLocal(Configuration conf)\n      throws IOException {\n\n    String localWorkDir \u003d System.getenv(\"PWD\");\n    //        ^ ^ all symlinks are created in the current work-dir\n\n    // Update the configuration object with localized archives.\n    URI[] cacheArchives \u003d DistributedCache.getCacheArchives(conf);\n    if (cacheArchives !\u003d null) {\n      List\u003cString\u003e localArchives \u003d new ArrayList\u003cString\u003e();\n      for (int i \u003d 0; i \u003c cacheArchives.length; ++i) {\n        URI u \u003d cacheArchives[i];\n        Path p \u003d new Path(u);\n        Path name \u003d\n            new Path((null \u003d\u003d u.getFragment()) ? p.getName()\n                : u.getFragment());\n        String linkName \u003d name.toUri().getPath();\n        localArchives.add(new Path(localWorkDir, linkName).toUri().getPath());\n      }\n      if (!localArchives.isEmpty()) {\n        conf.set(MRJobConfig.CACHE_LOCALARCHIVES, StringUtils\n            .arrayToString(localArchives.toArray(new String[localArchives\n                .size()])));\n      }\n    }\n\n    // Update the configuration object with localized files.\n    URI[] cacheFiles \u003d DistributedCache.getCacheFiles(conf);\n    if (cacheFiles !\u003d null) {\n      List\u003cString\u003e localFiles \u003d new ArrayList\u003cString\u003e();\n      for (int i \u003d 0; i \u003c cacheFiles.length; ++i) {\n        URI u \u003d cacheFiles[i];\n        Path p \u003d new Path(u);\n        Path name \u003d\n            new Path((null \u003d\u003d u.getFragment()) ? p.getName()\n                : u.getFragment());\n        String linkName \u003d name.toUri().getPath();\n        localFiles.add(new Path(localWorkDir, linkName).toUri().getPath());\n      }\n      if (!localFiles.isEmpty()) {\n        conf.set(MRJobConfig.CACHE_LOCALFILES,\n            StringUtils.arrayToString(localFiles\n                .toArray(new String[localFiles.size()])));\n      }\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java",
          "extendedDetails": {
            "oldValue": "[private, static]",
            "newValue": "[public, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-6095. Enable DistributedCache for uber-mode Jobs. Contributed by Gera Shegalov\n",
          "commitDate": "22/09/14 8:20 AM",
          "commitName": "7039b98e1c459e9e0d8caa28cdaa2868e2bde2eb",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "21/09/14 11:13 PM",
          "commitNameOld": "9721e2c1feb5aecea3a6dab5bda96af1cd0f8de3",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 0.38,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,46 @@\n-  private static void setupDistributedCacheConfig(final JobConf job)\n+  public static void setupDistributedCacheLocal(Configuration conf)\n       throws IOException {\n \n     String localWorkDir \u003d System.getenv(\"PWD\");\n     //        ^ ^ all symlinks are created in the current work-dir\n \n     // Update the configuration object with localized archives.\n-    URI[] cacheArchives \u003d DistributedCache.getCacheArchives(job);\n+    URI[] cacheArchives \u003d DistributedCache.getCacheArchives(conf);\n     if (cacheArchives !\u003d null) {\n       List\u003cString\u003e localArchives \u003d new ArrayList\u003cString\u003e();\n       for (int i \u003d 0; i \u003c cacheArchives.length; ++i) {\n         URI u \u003d cacheArchives[i];\n         Path p \u003d new Path(u);\n         Path name \u003d\n             new Path((null \u003d\u003d u.getFragment()) ? p.getName()\n                 : u.getFragment());\n         String linkName \u003d name.toUri().getPath();\n         localArchives.add(new Path(localWorkDir, linkName).toUri().getPath());\n       }\n       if (!localArchives.isEmpty()) {\n-        job.set(MRJobConfig.CACHE_LOCALARCHIVES, StringUtils\n+        conf.set(MRJobConfig.CACHE_LOCALARCHIVES, StringUtils\n             .arrayToString(localArchives.toArray(new String[localArchives\n                 .size()])));\n       }\n     }\n \n     // Update the configuration object with localized files.\n-    URI[] cacheFiles \u003d DistributedCache.getCacheFiles(job);\n+    URI[] cacheFiles \u003d DistributedCache.getCacheFiles(conf);\n     if (cacheFiles !\u003d null) {\n       List\u003cString\u003e localFiles \u003d new ArrayList\u003cString\u003e();\n       for (int i \u003d 0; i \u003c cacheFiles.length; ++i) {\n         URI u \u003d cacheFiles[i];\n         Path p \u003d new Path(u);\n         Path name \u003d\n             new Path((null \u003d\u003d u.getFragment()) ? p.getName()\n                 : u.getFragment());\n         String linkName \u003d name.toUri().getPath();\n         localFiles.add(new Path(localWorkDir, linkName).toUri().getPath());\n       }\n       if (!localFiles.isEmpty()) {\n-        job.set(MRJobConfig.CACHE_LOCALFILES,\n+        conf.set(MRJobConfig.CACHE_LOCALFILES,\n             StringUtils.arrayToString(localFiles\n                 .toArray(new String[localFiles.size()])));\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void setupDistributedCacheLocal(Configuration conf)\n      throws IOException {\n\n    String localWorkDir \u003d System.getenv(\"PWD\");\n    //        ^ ^ all symlinks are created in the current work-dir\n\n    // Update the configuration object with localized archives.\n    URI[] cacheArchives \u003d DistributedCache.getCacheArchives(conf);\n    if (cacheArchives !\u003d null) {\n      List\u003cString\u003e localArchives \u003d new ArrayList\u003cString\u003e();\n      for (int i \u003d 0; i \u003c cacheArchives.length; ++i) {\n        URI u \u003d cacheArchives[i];\n        Path p \u003d new Path(u);\n        Path name \u003d\n            new Path((null \u003d\u003d u.getFragment()) ? p.getName()\n                : u.getFragment());\n        String linkName \u003d name.toUri().getPath();\n        localArchives.add(new Path(localWorkDir, linkName).toUri().getPath());\n      }\n      if (!localArchives.isEmpty()) {\n        conf.set(MRJobConfig.CACHE_LOCALARCHIVES, StringUtils\n            .arrayToString(localArchives.toArray(new String[localArchives\n                .size()])));\n      }\n    }\n\n    // Update the configuration object with localized files.\n    URI[] cacheFiles \u003d DistributedCache.getCacheFiles(conf);\n    if (cacheFiles !\u003d null) {\n      List\u003cString\u003e localFiles \u003d new ArrayList\u003cString\u003e();\n      for (int i \u003d 0; i \u003c cacheFiles.length; ++i) {\n        URI u \u003d cacheFiles[i];\n        Path p \u003d new Path(u);\n        Path name \u003d\n            new Path((null \u003d\u003d u.getFragment()) ? p.getName()\n                : u.getFragment());\n        String linkName \u003d name.toUri().getPath();\n        localFiles.add(new Path(localWorkDir, linkName).toUri().getPath());\n      }\n      if (!localFiles.isEmpty()) {\n        conf.set(MRJobConfig.CACHE_LOCALFILES,\n            StringUtils.arrayToString(localFiles\n                .toArray(new String[localFiles.size()])));\n      }\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java",
          "extendedDetails": {}
        },
        {
          "type": "Yrename",
          "commitMessage": "MAPREDUCE-6095. Enable DistributedCache for uber-mode Jobs. Contributed by Gera Shegalov\n",
          "commitDate": "22/09/14 8:20 AM",
          "commitName": "7039b98e1c459e9e0d8caa28cdaa2868e2bde2eb",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "21/09/14 11:13 PM",
          "commitNameOld": "9721e2c1feb5aecea3a6dab5bda96af1cd0f8de3",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 0.38,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,46 @@\n-  private static void setupDistributedCacheConfig(final JobConf job)\n+  public static void setupDistributedCacheLocal(Configuration conf)\n       throws IOException {\n \n     String localWorkDir \u003d System.getenv(\"PWD\");\n     //        ^ ^ all symlinks are created in the current work-dir\n \n     // Update the configuration object with localized archives.\n-    URI[] cacheArchives \u003d DistributedCache.getCacheArchives(job);\n+    URI[] cacheArchives \u003d DistributedCache.getCacheArchives(conf);\n     if (cacheArchives !\u003d null) {\n       List\u003cString\u003e localArchives \u003d new ArrayList\u003cString\u003e();\n       for (int i \u003d 0; i \u003c cacheArchives.length; ++i) {\n         URI u \u003d cacheArchives[i];\n         Path p \u003d new Path(u);\n         Path name \u003d\n             new Path((null \u003d\u003d u.getFragment()) ? p.getName()\n                 : u.getFragment());\n         String linkName \u003d name.toUri().getPath();\n         localArchives.add(new Path(localWorkDir, linkName).toUri().getPath());\n       }\n       if (!localArchives.isEmpty()) {\n-        job.set(MRJobConfig.CACHE_LOCALARCHIVES, StringUtils\n+        conf.set(MRJobConfig.CACHE_LOCALARCHIVES, StringUtils\n             .arrayToString(localArchives.toArray(new String[localArchives\n                 .size()])));\n       }\n     }\n \n     // Update the configuration object with localized files.\n-    URI[] cacheFiles \u003d DistributedCache.getCacheFiles(job);\n+    URI[] cacheFiles \u003d DistributedCache.getCacheFiles(conf);\n     if (cacheFiles !\u003d null) {\n       List\u003cString\u003e localFiles \u003d new ArrayList\u003cString\u003e();\n       for (int i \u003d 0; i \u003c cacheFiles.length; ++i) {\n         URI u \u003d cacheFiles[i];\n         Path p \u003d new Path(u);\n         Path name \u003d\n             new Path((null \u003d\u003d u.getFragment()) ? p.getName()\n                 : u.getFragment());\n         String linkName \u003d name.toUri().getPath();\n         localFiles.add(new Path(localWorkDir, linkName).toUri().getPath());\n       }\n       if (!localFiles.isEmpty()) {\n-        job.set(MRJobConfig.CACHE_LOCALFILES,\n+        conf.set(MRJobConfig.CACHE_LOCALFILES,\n             StringUtils.arrayToString(localFiles\n                 .toArray(new String[localFiles.size()])));\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void setupDistributedCacheLocal(Configuration conf)\n      throws IOException {\n\n    String localWorkDir \u003d System.getenv(\"PWD\");\n    //        ^ ^ all symlinks are created in the current work-dir\n\n    // Update the configuration object with localized archives.\n    URI[] cacheArchives \u003d DistributedCache.getCacheArchives(conf);\n    if (cacheArchives !\u003d null) {\n      List\u003cString\u003e localArchives \u003d new ArrayList\u003cString\u003e();\n      for (int i \u003d 0; i \u003c cacheArchives.length; ++i) {\n        URI u \u003d cacheArchives[i];\n        Path p \u003d new Path(u);\n        Path name \u003d\n            new Path((null \u003d\u003d u.getFragment()) ? p.getName()\n                : u.getFragment());\n        String linkName \u003d name.toUri().getPath();\n        localArchives.add(new Path(localWorkDir, linkName).toUri().getPath());\n      }\n      if (!localArchives.isEmpty()) {\n        conf.set(MRJobConfig.CACHE_LOCALARCHIVES, StringUtils\n            .arrayToString(localArchives.toArray(new String[localArchives\n                .size()])));\n      }\n    }\n\n    // Update the configuration object with localized files.\n    URI[] cacheFiles \u003d DistributedCache.getCacheFiles(conf);\n    if (cacheFiles !\u003d null) {\n      List\u003cString\u003e localFiles \u003d new ArrayList\u003cString\u003e();\n      for (int i \u003d 0; i \u003c cacheFiles.length; ++i) {\n        URI u \u003d cacheFiles[i];\n        Path p \u003d new Path(u);\n        Path name \u003d\n            new Path((null \u003d\u003d u.getFragment()) ? p.getName()\n                : u.getFragment());\n        String linkName \u003d name.toUri().getPath();\n        localFiles.add(new Path(localWorkDir, linkName).toUri().getPath());\n      }\n      if (!localFiles.isEmpty()) {\n        conf.set(MRJobConfig.CACHE_LOCALFILES,\n            StringUtils.arrayToString(localFiles\n                .toArray(new String[localFiles.size()])));\n      }\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java",
          "extendedDetails": {
            "oldValue": "setupDistributedCacheConfig",
            "newValue": "setupDistributedCacheLocal"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-6095. Enable DistributedCache for uber-mode Jobs. Contributed by Gera Shegalov\n",
          "commitDate": "22/09/14 8:20 AM",
          "commitName": "7039b98e1c459e9e0d8caa28cdaa2868e2bde2eb",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "21/09/14 11:13 PM",
          "commitNameOld": "9721e2c1feb5aecea3a6dab5bda96af1cd0f8de3",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 0.38,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,46 @@\n-  private static void setupDistributedCacheConfig(final JobConf job)\n+  public static void setupDistributedCacheLocal(Configuration conf)\n       throws IOException {\n \n     String localWorkDir \u003d System.getenv(\"PWD\");\n     //        ^ ^ all symlinks are created in the current work-dir\n \n     // Update the configuration object with localized archives.\n-    URI[] cacheArchives \u003d DistributedCache.getCacheArchives(job);\n+    URI[] cacheArchives \u003d DistributedCache.getCacheArchives(conf);\n     if (cacheArchives !\u003d null) {\n       List\u003cString\u003e localArchives \u003d new ArrayList\u003cString\u003e();\n       for (int i \u003d 0; i \u003c cacheArchives.length; ++i) {\n         URI u \u003d cacheArchives[i];\n         Path p \u003d new Path(u);\n         Path name \u003d\n             new Path((null \u003d\u003d u.getFragment()) ? p.getName()\n                 : u.getFragment());\n         String linkName \u003d name.toUri().getPath();\n         localArchives.add(new Path(localWorkDir, linkName).toUri().getPath());\n       }\n       if (!localArchives.isEmpty()) {\n-        job.set(MRJobConfig.CACHE_LOCALARCHIVES, StringUtils\n+        conf.set(MRJobConfig.CACHE_LOCALARCHIVES, StringUtils\n             .arrayToString(localArchives.toArray(new String[localArchives\n                 .size()])));\n       }\n     }\n \n     // Update the configuration object with localized files.\n-    URI[] cacheFiles \u003d DistributedCache.getCacheFiles(job);\n+    URI[] cacheFiles \u003d DistributedCache.getCacheFiles(conf);\n     if (cacheFiles !\u003d null) {\n       List\u003cString\u003e localFiles \u003d new ArrayList\u003cString\u003e();\n       for (int i \u003d 0; i \u003c cacheFiles.length; ++i) {\n         URI u \u003d cacheFiles[i];\n         Path p \u003d new Path(u);\n         Path name \u003d\n             new Path((null \u003d\u003d u.getFragment()) ? p.getName()\n                 : u.getFragment());\n         String linkName \u003d name.toUri().getPath();\n         localFiles.add(new Path(localWorkDir, linkName).toUri().getPath());\n       }\n       if (!localFiles.isEmpty()) {\n-        job.set(MRJobConfig.CACHE_LOCALFILES,\n+        conf.set(MRJobConfig.CACHE_LOCALFILES,\n             StringUtils.arrayToString(localFiles\n                 .toArray(new String[localFiles.size()])));\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void setupDistributedCacheLocal(Configuration conf)\n      throws IOException {\n\n    String localWorkDir \u003d System.getenv(\"PWD\");\n    //        ^ ^ all symlinks are created in the current work-dir\n\n    // Update the configuration object with localized archives.\n    URI[] cacheArchives \u003d DistributedCache.getCacheArchives(conf);\n    if (cacheArchives !\u003d null) {\n      List\u003cString\u003e localArchives \u003d new ArrayList\u003cString\u003e();\n      for (int i \u003d 0; i \u003c cacheArchives.length; ++i) {\n        URI u \u003d cacheArchives[i];\n        Path p \u003d new Path(u);\n        Path name \u003d\n            new Path((null \u003d\u003d u.getFragment()) ? p.getName()\n                : u.getFragment());\n        String linkName \u003d name.toUri().getPath();\n        localArchives.add(new Path(localWorkDir, linkName).toUri().getPath());\n      }\n      if (!localArchives.isEmpty()) {\n        conf.set(MRJobConfig.CACHE_LOCALARCHIVES, StringUtils\n            .arrayToString(localArchives.toArray(new String[localArchives\n                .size()])));\n      }\n    }\n\n    // Update the configuration object with localized files.\n    URI[] cacheFiles \u003d DistributedCache.getCacheFiles(conf);\n    if (cacheFiles !\u003d null) {\n      List\u003cString\u003e localFiles \u003d new ArrayList\u003cString\u003e();\n      for (int i \u003d 0; i \u003c cacheFiles.length; ++i) {\n        URI u \u003d cacheFiles[i];\n        Path p \u003d new Path(u);\n        Path name \u003d\n            new Path((null \u003d\u003d u.getFragment()) ? p.getName()\n                : u.getFragment());\n        String linkName \u003d name.toUri().getPath();\n        localFiles.add(new Path(localWorkDir, linkName).toUri().getPath());\n      }\n      if (!localFiles.isEmpty()) {\n        conf.set(MRJobConfig.CACHE_LOCALFILES,\n            StringUtils.arrayToString(localFiles\n                .toArray(new String[localFiles.size()])));\n      }\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRApps.java",
          "extendedDetails": {
            "oldValue": "[job-JobConf(modifiers-final)]",
            "newValue": "[conf-Configuration]"
          }
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static void setupDistributedCacheConfig(final JobConf job)\n      throws IOException {\n\n    String localWorkDir \u003d System.getenv(\"PWD\");\n    //        ^ ^ all symlinks are created in the current work-dir\n\n    // Update the configuration object with localized archives.\n    URI[] cacheArchives \u003d DistributedCache.getCacheArchives(job);\n    if (cacheArchives !\u003d null) {\n      List\u003cString\u003e localArchives \u003d new ArrayList\u003cString\u003e();\n      for (int i \u003d 0; i \u003c cacheArchives.length; ++i) {\n        URI u \u003d cacheArchives[i];\n        Path p \u003d new Path(u);\n        Path name \u003d\n            new Path((null \u003d\u003d u.getFragment()) ? p.getName()\n                : u.getFragment());\n        String linkName \u003d name.toUri().getPath();\n        localArchives.add(new Path(localWorkDir, linkName).toUri().getPath());\n      }\n      if (!localArchives.isEmpty()) {\n        job.set(MRJobConfig.CACHE_LOCALARCHIVES, StringUtils\n            .arrayToString(localArchives.toArray(new String[localArchives\n                .size()])));\n      }\n    }\n\n    // Update the configuration object with localized files.\n    URI[] cacheFiles \u003d DistributedCache.getCacheFiles(job);\n    if (cacheFiles !\u003d null) {\n      List\u003cString\u003e localFiles \u003d new ArrayList\u003cString\u003e();\n      for (int i \u003d 0; i \u003c cacheFiles.length; ++i) {\n        URI u \u003d cacheFiles[i];\n        Path p \u003d new Path(u);\n        Path name \u003d\n            new Path((null \u003d\u003d u.getFragment()) ? p.getName()\n                : u.getFragment());\n        String linkName \u003d name.toUri().getPath();\n        localFiles.add(new Path(localWorkDir, linkName).toUri().getPath());\n      }\n      if (!localFiles.isEmpty()) {\n        job.set(MRJobConfig.CACHE_LOCALFILES,\n            StringUtils.arrayToString(localFiles\n                .toArray(new String[localFiles.size()])));\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapred/YarnChild.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapred/YarnChild.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapred/YarnChild.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,46 @@\n+  private static void setupDistributedCacheConfig(final JobConf job)\n+      throws IOException {\n+\n+    String localWorkDir \u003d System.getenv(\"PWD\");\n+    //        ^ ^ all symlinks are created in the current work-dir\n+\n+    // Update the configuration object with localized archives.\n+    URI[] cacheArchives \u003d DistributedCache.getCacheArchives(job);\n+    if (cacheArchives !\u003d null) {\n+      List\u003cString\u003e localArchives \u003d new ArrayList\u003cString\u003e();\n+      for (int i \u003d 0; i \u003c cacheArchives.length; ++i) {\n+        URI u \u003d cacheArchives[i];\n+        Path p \u003d new Path(u);\n+        Path name \u003d\n+            new Path((null \u003d\u003d u.getFragment()) ? p.getName()\n+                : u.getFragment());\n+        String linkName \u003d name.toUri().getPath();\n+        localArchives.add(new Path(localWorkDir, linkName).toUri().getPath());\n+      }\n+      if (!localArchives.isEmpty()) {\n+        job.set(MRJobConfig.CACHE_LOCALARCHIVES, StringUtils\n+            .arrayToString(localArchives.toArray(new String[localArchives\n+                .size()])));\n+      }\n+    }\n+\n+    // Update the configuration object with localized files.\n+    URI[] cacheFiles \u003d DistributedCache.getCacheFiles(job);\n+    if (cacheFiles !\u003d null) {\n+      List\u003cString\u003e localFiles \u003d new ArrayList\u003cString\u003e();\n+      for (int i \u003d 0; i \u003c cacheFiles.length; ++i) {\n+        URI u \u003d cacheFiles[i];\n+        Path p \u003d new Path(u);\n+        Path name \u003d\n+            new Path((null \u003d\u003d u.getFragment()) ? p.getName()\n+                : u.getFragment());\n+        String linkName \u003d name.toUri().getPath();\n+        localFiles.add(new Path(localWorkDir, linkName).toUri().getPath());\n+      }\n+      if (!localFiles.isEmpty()) {\n+        job.set(MRJobConfig.CACHE_LOCALFILES,\n+            StringUtils.arrayToString(localFiles\n+                .toArray(new String[localFiles.size()])));\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static void setupDistributedCacheConfig(final JobConf job)\n      throws IOException {\n\n    String localWorkDir \u003d System.getenv(\"PWD\");\n    //        ^ ^ all symlinks are created in the current work-dir\n\n    // Update the configuration object with localized archives.\n    URI[] cacheArchives \u003d DistributedCache.getCacheArchives(job);\n    if (cacheArchives !\u003d null) {\n      List\u003cString\u003e localArchives \u003d new ArrayList\u003cString\u003e();\n      for (int i \u003d 0; i \u003c cacheArchives.length; ++i) {\n        URI u \u003d cacheArchives[i];\n        Path p \u003d new Path(u);\n        Path name \u003d\n            new Path((null \u003d\u003d u.getFragment()) ? p.getName()\n                : u.getFragment());\n        String linkName \u003d name.toUri().getPath();\n        localArchives.add(new Path(localWorkDir, linkName).toUri().getPath());\n      }\n      if (!localArchives.isEmpty()) {\n        job.set(MRJobConfig.CACHE_LOCALARCHIVES, StringUtils\n            .arrayToString(localArchives.toArray(new String[localArchives\n                .size()])));\n      }\n    }\n\n    // Update the configuration object with localized files.\n    URI[] cacheFiles \u003d DistributedCache.getCacheFiles(job);\n    if (cacheFiles !\u003d null) {\n      List\u003cString\u003e localFiles \u003d new ArrayList\u003cString\u003e();\n      for (int i \u003d 0; i \u003c cacheFiles.length; ++i) {\n        URI u \u003d cacheFiles[i];\n        Path p \u003d new Path(u);\n        Path name \u003d\n            new Path((null \u003d\u003d u.getFragment()) ? p.getName()\n                : u.getFragment());\n        String linkName \u003d name.toUri().getPath();\n        localFiles.add(new Path(localWorkDir, linkName).toUri().getPath());\n      }\n      if (!localFiles.isEmpty()) {\n        job.set(MRJobConfig.CACHE_LOCALFILES,\n            StringUtils.arrayToString(localFiles\n                .toArray(new String[localFiles.size()])));\n      }\n    }\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapred/YarnChild.java"
    }
  }
}