{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CGroupsCpuResourceHandlerImpl.java",
  "functionName": "getOverallLimits",
  "functionId": "getOverallLimits___yarnProcessors-float",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupsCpuResourceHandlerImpl.java",
  "functionStartLine": 146,
  "functionEndLine": 183,
  "numCommitsSeen": 6,
  "timeTaken": 784,
  "changeHistory": [
    "2085e60a9655b59aa2ba8917acdc511ab71ff6e4"
  ],
  "changeHistoryShort": {
    "2085e60a9655b59aa2ba8917acdc511ab71ff6e4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2085e60a9655b59aa2ba8917acdc511ab71ff6e4": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3542. Refactored existing CPU cgroups support to use the newer and integrated ResourceHandler mechanism, and also deprecated the old LCEResourceHandler inteface hierarchy. Contributed by Varun Vasudev.\n",
      "commitDate": "25/01/16 4:19 PM",
      "commitName": "2085e60a9655b59aa2ba8917acdc511ab71ff6e4",
      "commitAuthor": "Vinod Kumar Vavilapalli (I am also known as @tshooter.)",
      "diff": "@@ -0,0 +1,38 @@\n+  public static int[] getOverallLimits(float yarnProcessors) {\n+\n+    int[] ret \u003d new int[2];\n+\n+    if (yarnProcessors \u003c 0.01f) {\n+      throw new IllegalArgumentException(\"Number of processors can\u0027t be \u003c\u003d 0.\");\n+    }\n+\n+    int quotaUS \u003d MAX_QUOTA_US;\n+    int periodUS \u003d (int) (MAX_QUOTA_US / yarnProcessors);\n+    if (yarnProcessors \u003c 1.0f) {\n+      periodUS \u003d MAX_QUOTA_US;\n+      quotaUS \u003d (int) (periodUS * yarnProcessors);\n+      if (quotaUS \u003c MIN_PERIOD_US) {\n+        LOG.warn(\"The quota calculated for the cgroup was too low.\"\n+            + \" The minimum value is \" + MIN_PERIOD_US\n+            + \", calculated value is \" + quotaUS\n+            + \". Setting quota to minimum value.\");\n+        quotaUS \u003d MIN_PERIOD_US;\n+      }\n+    }\n+\n+    // cfs_period_us can\u0027t be less than 1000 microseconds\n+    // if the value of periodUS is less than 1000, we can\u0027t really use cgroups\n+    // to limit cpu\n+    if (periodUS \u003c MIN_PERIOD_US) {\n+      LOG.warn(\"The period calculated for the cgroup was too low.\"\n+          + \" The minimum value is \" + MIN_PERIOD_US\n+          + \", calculated value is \" + periodUS\n+          + \". Using all available CPU.\");\n+      periodUS \u003d MAX_QUOTA_US;\n+      quotaUS \u003d -1;\n+    }\n+\n+    ret[0] \u003d periodUS;\n+    ret[1] \u003d quotaUS;\n+    return ret;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static int[] getOverallLimits(float yarnProcessors) {\n\n    int[] ret \u003d new int[2];\n\n    if (yarnProcessors \u003c 0.01f) {\n      throw new IllegalArgumentException(\"Number of processors can\u0027t be \u003c\u003d 0.\");\n    }\n\n    int quotaUS \u003d MAX_QUOTA_US;\n    int periodUS \u003d (int) (MAX_QUOTA_US / yarnProcessors);\n    if (yarnProcessors \u003c 1.0f) {\n      periodUS \u003d MAX_QUOTA_US;\n      quotaUS \u003d (int) (periodUS * yarnProcessors);\n      if (quotaUS \u003c MIN_PERIOD_US) {\n        LOG.warn(\"The quota calculated for the cgroup was too low.\"\n            + \" The minimum value is \" + MIN_PERIOD_US\n            + \", calculated value is \" + quotaUS\n            + \". Setting quota to minimum value.\");\n        quotaUS \u003d MIN_PERIOD_US;\n      }\n    }\n\n    // cfs_period_us can\u0027t be less than 1000 microseconds\n    // if the value of periodUS is less than 1000, we can\u0027t really use cgroups\n    // to limit cpu\n    if (periodUS \u003c MIN_PERIOD_US) {\n      LOG.warn(\"The period calculated for the cgroup was too low.\"\n          + \" The minimum value is \" + MIN_PERIOD_US\n          + \", calculated value is \" + periodUS\n          + \". Using all available CPU.\");\n      periodUS \u003d MAX_QUOTA_US;\n      quotaUS \u003d -1;\n    }\n\n    ret[0] \u003d periodUS;\n    ret[1] \u003d quotaUS;\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupsCpuResourceHandlerImpl.java"
    }
  }
}