{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TimelineServiceV2Publisher.java",
  "functionName": "putEntity",
  "functionId": "putEntity___entity-TimelineEntity__appId-ApplicationId",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/metrics/TimelineServiceV2Publisher.java",
  "functionStartLine": 468,
  "functionEndLine": 491,
  "numCommitsSeen": 52,
  "timeTaken": 5244,
  "changeHistory": [
    "da2b4fe204e502fc1a2d37e4cb0f7cc8485f6da6",
    "df76cdc8959c51b71704ab5c38335f745a6f35d8",
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "9119b3cf8f883aa2d5df534afc0c50249fed03c6",
    "f3c661e8dddc80726f1084ff27815d179540889c",
    "39f2bac38b111f90d3402229201cdb4315f5d4f5",
    "f385851141522633184ce394899c659af5ace92a",
    "d1828d94435eca21761b0ba8458f9de2f125d012",
    "6b8b1608e64e300e4e1d23c60476febaca29ca38"
  ],
  "changeHistoryShort": {
    "da2b4fe204e502fc1a2d37e4cb0f7cc8485f6da6": "Ybodychange",
    "df76cdc8959c51b71704ab5c38335f745a6f35d8": "Ybodychange",
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "9119b3cf8f883aa2d5df534afc0c50249fed03c6": "Ybodychange",
    "f3c661e8dddc80726f1084ff27815d179540889c": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
    "39f2bac38b111f90d3402229201cdb4315f5d4f5": "Ymodifierchange",
    "f385851141522633184ce394899c659af5ace92a": "Ybodychange",
    "d1828d94435eca21761b0ba8458f9de2f125d012": "Ybodychange",
    "6b8b1608e64e300e4e1d23c60476febaca29ca38": "Yintroduced"
  },
  "changeHistoryDetails": {
    "da2b4fe204e502fc1a2d37e4cb0f7cc8485f6da6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9794. RM crashes due to runtime errors in TimelineServiceV2Publisher. Contributed by Tarun Parimi.\n",
      "commitDate": "15/09/19 1:46 AM",
      "commitName": "da2b4fe204e502fc1a2d37e4cb0f7cc8485f6da6",
      "commitAuthor": "Abhishek Modi",
      "commitDateOld": "18/04/19 9:29 AM",
      "commitNameOld": "df76cdc8959c51b71704ab5c38335f745a6f35d8",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 149.68,
      "commitsBetweenForRepo": 1138,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,24 @@\n   private void putEntity(TimelineEntity entity, ApplicationId appId) {\n     try {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Publishing the entity \" + entity + \", JSON-style content: \"\n             + TimelineUtils.dumpTimelineRecordtoJSON(entity));\n       }\n       TimelineCollector timelineCollector \u003d\n           rmTimelineCollectorManager.get(appId);\n       if (timelineCollector !\u003d null) {\n         TimelineEntities entities \u003d new TimelineEntities();\n         entities.addEntity(entity);\n         timelineCollector.putEntities(entities,\n                 UserGroupInformation.getCurrentUser());\n       } else {\n         LOG.debug(\"Cannot find active collector while publishing entity \"\n             + entity);\n       }\n     } catch (IOException e) {\n       LOG.error(\"Error when publishing entity \" + entity);\n       LOG.debug(\"Error when publishing entity {}\", entity, e);\n+    } catch (Exception e) {\n+      LOG.error(\"Unexpected error when publishing entity {}\", entity, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void putEntity(TimelineEntity entity, ApplicationId appId) {\n    try {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Publishing the entity \" + entity + \", JSON-style content: \"\n            + TimelineUtils.dumpTimelineRecordtoJSON(entity));\n      }\n      TimelineCollector timelineCollector \u003d\n          rmTimelineCollectorManager.get(appId);\n      if (timelineCollector !\u003d null) {\n        TimelineEntities entities \u003d new TimelineEntities();\n        entities.addEntity(entity);\n        timelineCollector.putEntities(entities,\n                UserGroupInformation.getCurrentUser());\n      } else {\n        LOG.debug(\"Cannot find active collector while publishing entity \"\n            + entity);\n      }\n    } catch (IOException e) {\n      LOG.error(\"Error when publishing entity \" + entity);\n      LOG.debug(\"Error when publishing entity {}\", entity, e);\n    } catch (Exception e) {\n      LOG.error(\"Unexpected error when publishing entity {}\", entity, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/metrics/TimelineServiceV2Publisher.java",
      "extendedDetails": {}
    },
    "df76cdc8959c51b71704ab5c38335f745a6f35d8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6695. Fixed NPE in publishing appFinished events to ATSv2.\n           Contributed by Prabhu Joseph\n",
      "commitDate": "18/04/19 9:29 AM",
      "commitName": "df76cdc8959c51b71704ab5c38335f745a6f35d8",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "01/04/19 11:06 AM",
      "commitNameOld": "332cab5518ba9c70a5f191883db8c4d22e8e48b7",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 16.93,
      "commitsBetweenForRepo": 135,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,22 @@\n   private void putEntity(TimelineEntity entity, ApplicationId appId) {\n     try {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Publishing the entity \" + entity + \", JSON-style content: \"\n             + TimelineUtils.dumpTimelineRecordtoJSON(entity));\n       }\n       TimelineCollector timelineCollector \u003d\n           rmTimelineCollectorManager.get(appId);\n-      TimelineEntities entities \u003d new TimelineEntities();\n-      entities.addEntity(entity);\n-      timelineCollector.putEntities(entities,\n-          UserGroupInformation.getCurrentUser());\n+      if (timelineCollector !\u003d null) {\n+        TimelineEntities entities \u003d new TimelineEntities();\n+        entities.addEntity(entity);\n+        timelineCollector.putEntities(entities,\n+                UserGroupInformation.getCurrentUser());\n+      } else {\n+        LOG.debug(\"Cannot find active collector while publishing entity \"\n+            + entity);\n+      }\n     } catch (IOException e) {\n       LOG.error(\"Error when publishing entity \" + entity);\n       LOG.debug(\"Error when publishing entity {}\", entity, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void putEntity(TimelineEntity entity, ApplicationId appId) {\n    try {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Publishing the entity \" + entity + \", JSON-style content: \"\n            + TimelineUtils.dumpTimelineRecordtoJSON(entity));\n      }\n      TimelineCollector timelineCollector \u003d\n          rmTimelineCollectorManager.get(appId);\n      if (timelineCollector !\u003d null) {\n        TimelineEntities entities \u003d new TimelineEntities();\n        entities.addEntity(entity);\n        timelineCollector.putEntities(entities,\n                UserGroupInformation.getCurrentUser());\n      } else {\n        LOG.debug(\"Cannot find active collector while publishing entity \"\n            + entity);\n      }\n    } catch (IOException e) {\n      LOG.error(\"Error when publishing entity \" + entity);\n      LOG.debug(\"Error when publishing entity {}\", entity, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/metrics/TimelineServiceV2Publisher.java",
      "extendedDetails": {}
    },
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 10.76,
      "commitsBetweenForRepo": 108,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,17 @@\n   private void putEntity(TimelineEntity entity, ApplicationId appId) {\n     try {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Publishing the entity \" + entity + \", JSON-style content: \"\n             + TimelineUtils.dumpTimelineRecordtoJSON(entity));\n       }\n       TimelineCollector timelineCollector \u003d\n           rmTimelineCollectorManager.get(appId);\n       TimelineEntities entities \u003d new TimelineEntities();\n       entities.addEntity(entity);\n       timelineCollector.putEntities(entities,\n           UserGroupInformation.getCurrentUser());\n     } catch (IOException e) {\n       LOG.error(\"Error when publishing entity \" + entity);\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Error when publishing entity \" + entity, e);\n-      }\n+      LOG.debug(\"Error when publishing entity {}\", entity, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void putEntity(TimelineEntity entity, ApplicationId appId) {\n    try {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Publishing the entity \" + entity + \", JSON-style content: \"\n            + TimelineUtils.dumpTimelineRecordtoJSON(entity));\n      }\n      TimelineCollector timelineCollector \u003d\n          rmTimelineCollectorManager.get(appId);\n      TimelineEntities entities \u003d new TimelineEntities();\n      entities.addEntity(entity);\n      timelineCollector.putEntities(entities,\n          UserGroupInformation.getCurrentUser());\n    } catch (IOException e) {\n      LOG.error(\"Error when publishing entity \" + entity);\n      LOG.debug(\"Error when publishing entity {}\", entity, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/metrics/TimelineServiceV2Publisher.java",
      "extendedDetails": {}
    },
    "9119b3cf8f883aa2d5df534afc0c50249fed03c6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8155. Improve ATSv2 client logging in RM and NM publisher. Contributed by Abhishek Modi.\n",
      "commitDate": "14/06/18 12:08 AM",
      "commitName": "9119b3cf8f883aa2d5df534afc0c50249fed03c6",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "08/05/18 11:30 PM",
      "commitNameOld": "eb7b256cc2c74e1b461e45444179584668d34ac6",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 36.03,
      "commitsBetweenForRepo": 311,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,19 @@\n   private void putEntity(TimelineEntity entity, ApplicationId appId) {\n     try {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Publishing the entity \" + entity + \", JSON-style content: \"\n             + TimelineUtils.dumpTimelineRecordtoJSON(entity));\n       }\n       TimelineCollector timelineCollector \u003d\n           rmTimelineCollectorManager.get(appId);\n       TimelineEntities entities \u003d new TimelineEntities();\n       entities.addEntity(entity);\n       timelineCollector.putEntities(entities,\n           UserGroupInformation.getCurrentUser());\n-    } catch (Exception e) {\n-      LOG.error(\"Error when publishing entity \" + entity, e);\n+    } catch (IOException e) {\n+      LOG.error(\"Error when publishing entity \" + entity);\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Error when publishing entity \" + entity, e);\n+      }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void putEntity(TimelineEntity entity, ApplicationId appId) {\n    try {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Publishing the entity \" + entity + \", JSON-style content: \"\n            + TimelineUtils.dumpTimelineRecordtoJSON(entity));\n      }\n      TimelineCollector timelineCollector \u003d\n          rmTimelineCollectorManager.get(appId);\n      TimelineEntities entities \u003d new TimelineEntities();\n      entities.addEntity(entity);\n      timelineCollector.putEntities(entities,\n          UserGroupInformation.getCurrentUser());\n    } catch (IOException e) {\n      LOG.error(\"Error when publishing entity \" + entity);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Error when publishing entity \" + entity, e);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/metrics/TimelineServiceV2Publisher.java",
      "extendedDetails": {}
    },
    "f3c661e8dddc80726f1084ff27815d179540889c": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-3044. Made RM write app, attempt and optional container lifecycle events to timeline service v2. Contributed by Naganarasimha G R.\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "f3c661e8dddc80726f1084ff27815d179540889c",
      "commitAuthor": "Zhijie Shen",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-3044. Made RM write app, attempt and optional container lifecycle events to timeline service v2. Contributed by Naganarasimha G R.\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "f3c661e8dddc80726f1084ff27815d179540889c",
          "commitAuthor": "Zhijie Shen",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "42d7864b84e42fafb529f9920c6633ff59c55217",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,16 @@\n-  public void putEntity(TimelineEntity entity) {\n+  private void putEntity(TimelineEntity entity, ApplicationId appId) {\n     try {\n       if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Publishing the entity \" + entity.getEntityId() +\n-            \", JSON-style content: \" + TimelineUtils.dumpTimelineRecordtoJSON(entity));\n+        LOG.debug(\"Publishing the entity \" + entity + \", JSON-style content: \"\n+            + TimelineUtils.dumpTimelineRecordtoJSON(entity));\n       }\n-      TimelinePutResponse response \u003d client.putEntities(entity);\n-      List\u003cTimelinePutResponse.TimelinePutError\u003e errors \u003d response.getErrors();\n-      if (errors.size() \u003d\u003d 0) {\n-        LOG.debug(\"Timeline entities are successfully put\");\n-      } else {\n-        for (TimelinePutResponse.TimelinePutError error : errors) {\n-          LOG.error(\n-              \"Error when publishing entity [\" + error.getEntityType() + \",\"\n-                  + error.getEntityId() + \"], server side error code: \"\n-                  + error.getErrorCode());\n-        }\n-      }\n+      TimelineCollector timelineCollector \u003d\n+          rmTimelineCollectorManager.get(appId);\n+      TimelineEntities entities \u003d new TimelineEntities();\n+      entities.addEntity(entity);\n+      timelineCollector.putEntities(entities,\n+          UserGroupInformation.getCurrentUser());\n     } catch (Exception e) {\n-      LOG.error(\"Error when publishing entity [\" + entity.getEntityType() + \",\"\n-          + entity.getEntityId() + \"]\", e);\n+      LOG.error(\"Error when publishing entity \" + entity, e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void putEntity(TimelineEntity entity, ApplicationId appId) {\n    try {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Publishing the entity \" + entity + \", JSON-style content: \"\n            + TimelineUtils.dumpTimelineRecordtoJSON(entity));\n      }\n      TimelineCollector timelineCollector \u003d\n          rmTimelineCollectorManager.get(appId);\n      TimelineEntities entities \u003d new TimelineEntities();\n      entities.addEntity(entity);\n      timelineCollector.putEntities(entities,\n          UserGroupInformation.getCurrentUser());\n    } catch (Exception e) {\n      LOG.error(\"Error when publishing entity \" + entity, e);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/metrics/TimelineServiceV2Publisher.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/metrics/SystemMetricsPublisher.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/metrics/TimelineServiceV2Publisher.java",
            "oldMethodName": "putEntity",
            "newMethodName": "putEntity"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-3044. Made RM write app, attempt and optional container lifecycle events to timeline service v2. Contributed by Naganarasimha G R.\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "f3c661e8dddc80726f1084ff27815d179540889c",
          "commitAuthor": "Zhijie Shen",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "42d7864b84e42fafb529f9920c6633ff59c55217",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,16 @@\n-  public void putEntity(TimelineEntity entity) {\n+  private void putEntity(TimelineEntity entity, ApplicationId appId) {\n     try {\n       if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Publishing the entity \" + entity.getEntityId() +\n-            \", JSON-style content: \" + TimelineUtils.dumpTimelineRecordtoJSON(entity));\n+        LOG.debug(\"Publishing the entity \" + entity + \", JSON-style content: \"\n+            + TimelineUtils.dumpTimelineRecordtoJSON(entity));\n       }\n-      TimelinePutResponse response \u003d client.putEntities(entity);\n-      List\u003cTimelinePutResponse.TimelinePutError\u003e errors \u003d response.getErrors();\n-      if (errors.size() \u003d\u003d 0) {\n-        LOG.debug(\"Timeline entities are successfully put\");\n-      } else {\n-        for (TimelinePutResponse.TimelinePutError error : errors) {\n-          LOG.error(\n-              \"Error when publishing entity [\" + error.getEntityType() + \",\"\n-                  + error.getEntityId() + \"], server side error code: \"\n-                  + error.getErrorCode());\n-        }\n-      }\n+      TimelineCollector timelineCollector \u003d\n+          rmTimelineCollectorManager.get(appId);\n+      TimelineEntities entities \u003d new TimelineEntities();\n+      entities.addEntity(entity);\n+      timelineCollector.putEntities(entities,\n+          UserGroupInformation.getCurrentUser());\n     } catch (Exception e) {\n-      LOG.error(\"Error when publishing entity [\" + entity.getEntityType() + \",\"\n-          + entity.getEntityId() + \"]\", e);\n+      LOG.error(\"Error when publishing entity \" + entity, e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void putEntity(TimelineEntity entity, ApplicationId appId) {\n    try {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Publishing the entity \" + entity + \", JSON-style content: \"\n            + TimelineUtils.dumpTimelineRecordtoJSON(entity));\n      }\n      TimelineCollector timelineCollector \u003d\n          rmTimelineCollectorManager.get(appId);\n      TimelineEntities entities \u003d new TimelineEntities();\n      entities.addEntity(entity);\n      timelineCollector.putEntities(entities,\n          UserGroupInformation.getCurrentUser());\n    } catch (Exception e) {\n      LOG.error(\"Error when publishing entity \" + entity, e);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/metrics/TimelineServiceV2Publisher.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3044. Made RM write app, attempt and optional container lifecycle events to timeline service v2. Contributed by Naganarasimha G R.\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "f3c661e8dddc80726f1084ff27815d179540889c",
          "commitAuthor": "Zhijie Shen",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "42d7864b84e42fafb529f9920c6633ff59c55217",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,16 @@\n-  public void putEntity(TimelineEntity entity) {\n+  private void putEntity(TimelineEntity entity, ApplicationId appId) {\n     try {\n       if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Publishing the entity \" + entity.getEntityId() +\n-            \", JSON-style content: \" + TimelineUtils.dumpTimelineRecordtoJSON(entity));\n+        LOG.debug(\"Publishing the entity \" + entity + \", JSON-style content: \"\n+            + TimelineUtils.dumpTimelineRecordtoJSON(entity));\n       }\n-      TimelinePutResponse response \u003d client.putEntities(entity);\n-      List\u003cTimelinePutResponse.TimelinePutError\u003e errors \u003d response.getErrors();\n-      if (errors.size() \u003d\u003d 0) {\n-        LOG.debug(\"Timeline entities are successfully put\");\n-      } else {\n-        for (TimelinePutResponse.TimelinePutError error : errors) {\n-          LOG.error(\n-              \"Error when publishing entity [\" + error.getEntityType() + \",\"\n-                  + error.getEntityId() + \"], server side error code: \"\n-                  + error.getErrorCode());\n-        }\n-      }\n+      TimelineCollector timelineCollector \u003d\n+          rmTimelineCollectorManager.get(appId);\n+      TimelineEntities entities \u003d new TimelineEntities();\n+      entities.addEntity(entity);\n+      timelineCollector.putEntities(entities,\n+          UserGroupInformation.getCurrentUser());\n     } catch (Exception e) {\n-      LOG.error(\"Error when publishing entity [\" + entity.getEntityType() + \",\"\n-          + entity.getEntityId() + \"]\", e);\n+      LOG.error(\"Error when publishing entity \" + entity, e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void putEntity(TimelineEntity entity, ApplicationId appId) {\n    try {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Publishing the entity \" + entity + \", JSON-style content: \"\n            + TimelineUtils.dumpTimelineRecordtoJSON(entity));\n      }\n      TimelineCollector timelineCollector \u003d\n          rmTimelineCollectorManager.get(appId);\n      TimelineEntities entities \u003d new TimelineEntities();\n      entities.addEntity(entity);\n      timelineCollector.putEntities(entities,\n          UserGroupInformation.getCurrentUser());\n    } catch (Exception e) {\n      LOG.error(\"Error when publishing entity \" + entity, e);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/metrics/TimelineServiceV2Publisher.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3044. Made RM write app, attempt and optional container lifecycle events to timeline service v2. Contributed by Naganarasimha G R.\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "f3c661e8dddc80726f1084ff27815d179540889c",
          "commitAuthor": "Zhijie Shen",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "42d7864b84e42fafb529f9920c6633ff59c55217",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,16 @@\n-  public void putEntity(TimelineEntity entity) {\n+  private void putEntity(TimelineEntity entity, ApplicationId appId) {\n     try {\n       if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Publishing the entity \" + entity.getEntityId() +\n-            \", JSON-style content: \" + TimelineUtils.dumpTimelineRecordtoJSON(entity));\n+        LOG.debug(\"Publishing the entity \" + entity + \", JSON-style content: \"\n+            + TimelineUtils.dumpTimelineRecordtoJSON(entity));\n       }\n-      TimelinePutResponse response \u003d client.putEntities(entity);\n-      List\u003cTimelinePutResponse.TimelinePutError\u003e errors \u003d response.getErrors();\n-      if (errors.size() \u003d\u003d 0) {\n-        LOG.debug(\"Timeline entities are successfully put\");\n-      } else {\n-        for (TimelinePutResponse.TimelinePutError error : errors) {\n-          LOG.error(\n-              \"Error when publishing entity [\" + error.getEntityType() + \",\"\n-                  + error.getEntityId() + \"], server side error code: \"\n-                  + error.getErrorCode());\n-        }\n-      }\n+      TimelineCollector timelineCollector \u003d\n+          rmTimelineCollectorManager.get(appId);\n+      TimelineEntities entities \u003d new TimelineEntities();\n+      entities.addEntity(entity);\n+      timelineCollector.putEntities(entities,\n+          UserGroupInformation.getCurrentUser());\n     } catch (Exception e) {\n-      LOG.error(\"Error when publishing entity [\" + entity.getEntityType() + \",\"\n-          + entity.getEntityId() + \"]\", e);\n+      LOG.error(\"Error when publishing entity \" + entity, e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void putEntity(TimelineEntity entity, ApplicationId appId) {\n    try {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Publishing the entity \" + entity + \", JSON-style content: \"\n            + TimelineUtils.dumpTimelineRecordtoJSON(entity));\n      }\n      TimelineCollector timelineCollector \u003d\n          rmTimelineCollectorManager.get(appId);\n      TimelineEntities entities \u003d new TimelineEntities();\n      entities.addEntity(entity);\n      timelineCollector.putEntities(entities,\n          UserGroupInformation.getCurrentUser());\n    } catch (Exception e) {\n      LOG.error(\"Error when publishing entity \" + entity, e);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/metrics/TimelineServiceV2Publisher.java",
          "extendedDetails": {
            "oldValue": "[entity-TimelineEntity]",
            "newValue": "[entity-TimelineEntity, appId-ApplicationId]"
          }
        }
      ]
    },
    "39f2bac38b111f90d3402229201cdb4315f5d4f5": {
      "type": "Ymodifierchange",
      "commitMessage": "YARN-5029. RM needs to send update event with YarnApplicationState as Running to ATS/AHS. Contributed by Xuan Gong.\n",
      "commitDate": "11/05/16 9:28 AM",
      "commitName": "39f2bac38b111f90d3402229201cdb4315f5d4f5",
      "commitAuthor": "Junping Du",
      "commitDateOld": "06/05/16 3:59 PM",
      "commitNameOld": "b2ed6ae73197990a950ce71ece80c0f23221c384",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 4.73,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n-  private void putEntity(TimelineEntity entity) {\n+  public void putEntity(TimelineEntity entity) {\n     try {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Publishing the entity \" + entity.getEntityId() +\n             \", JSON-style content: \" + TimelineUtils.dumpTimelineRecordtoJSON(entity));\n       }\n       TimelinePutResponse response \u003d client.putEntities(entity);\n       List\u003cTimelinePutResponse.TimelinePutError\u003e errors \u003d response.getErrors();\n       if (errors.size() \u003d\u003d 0) {\n         LOG.debug(\"Timeline entities are successfully put\");\n       } else {\n         for (TimelinePutResponse.TimelinePutError error : errors) {\n           LOG.error(\n               \"Error when publishing entity [\" + error.getEntityType() + \",\"\n                   + error.getEntityId() + \"], server side error code: \"\n                   + error.getErrorCode());\n         }\n       }\n     } catch (Exception e) {\n       LOG.error(\"Error when publishing entity [\" + entity.getEntityType() + \",\"\n           + entity.getEntityId() + \"]\", e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void putEntity(TimelineEntity entity) {\n    try {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Publishing the entity \" + entity.getEntityId() +\n            \", JSON-style content: \" + TimelineUtils.dumpTimelineRecordtoJSON(entity));\n      }\n      TimelinePutResponse response \u003d client.putEntities(entity);\n      List\u003cTimelinePutResponse.TimelinePutError\u003e errors \u003d response.getErrors();\n      if (errors.size() \u003d\u003d 0) {\n        LOG.debug(\"Timeline entities are successfully put\");\n      } else {\n        for (TimelinePutResponse.TimelinePutError error : errors) {\n          LOG.error(\n              \"Error when publishing entity [\" + error.getEntityType() + \",\"\n                  + error.getEntityId() + \"], server side error code: \"\n                  + error.getErrorCode());\n        }\n      }\n    } catch (Exception e) {\n      LOG.error(\"Error when publishing entity [\" + entity.getEntityType() + \",\"\n          + entity.getEntityId() + \"]\", e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/metrics/SystemMetricsPublisher.java",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[public]"
      }
    },
    "f385851141522633184ce394899c659af5ace92a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4596. SystemMetricPublisher should not swallow error messages from TimelineClient#putEntities. Contributed by Li Lu\n",
      "commitDate": "18/01/16 4:58 PM",
      "commitName": "f385851141522633184ce394899c659af5ace92a",
      "commitAuthor": "Jian He",
      "commitDateOld": "16/12/15 10:57 AM",
      "commitNameOld": "50bd067e1d63d4c80dc1e7bf4024bfaf42cf4416",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 33.25,
      "commitsBetweenForRepo": 188,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,12 +1,23 @@\n   private void putEntity(TimelineEntity entity) {\n     try {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Publishing the entity \" + entity.getEntityId() +\n             \", JSON-style content: \" + TimelineUtils.dumpTimelineRecordtoJSON(entity));\n       }\n-      client.putEntities(entity);\n+      TimelinePutResponse response \u003d client.putEntities(entity);\n+      List\u003cTimelinePutResponse.TimelinePutError\u003e errors \u003d response.getErrors();\n+      if (errors.size() \u003d\u003d 0) {\n+        LOG.debug(\"Timeline entities are successfully put\");\n+      } else {\n+        for (TimelinePutResponse.TimelinePutError error : errors) {\n+          LOG.error(\n+              \"Error when publishing entity [\" + error.getEntityType() + \",\"\n+                  + error.getEntityId() + \"], server side error code: \"\n+                  + error.getErrorCode());\n+        }\n+      }\n     } catch (Exception e) {\n       LOG.error(\"Error when publishing entity [\" + entity.getEntityType() + \",\"\n           + entity.getEntityId() + \"]\", e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void putEntity(TimelineEntity entity) {\n    try {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Publishing the entity \" + entity.getEntityId() +\n            \", JSON-style content: \" + TimelineUtils.dumpTimelineRecordtoJSON(entity));\n      }\n      TimelinePutResponse response \u003d client.putEntities(entity);\n      List\u003cTimelinePutResponse.TimelinePutError\u003e errors \u003d response.getErrors();\n      if (errors.size() \u003d\u003d 0) {\n        LOG.debug(\"Timeline entities are successfully put\");\n      } else {\n        for (TimelinePutResponse.TimelinePutError error : errors) {\n          LOG.error(\n              \"Error when publishing entity [\" + error.getEntityType() + \",\"\n                  + error.getEntityId() + \"], server side error code: \"\n                  + error.getErrorCode());\n        }\n      }\n    } catch (Exception e) {\n      LOG.error(\"Error when publishing entity [\" + entity.getEntityType() + \",\"\n          + entity.getEntityId() + \"]\", e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/metrics/SystemMetricsPublisher.java",
      "extendedDetails": {}
    },
    "d1828d94435eca21761b0ba8458f9de2f125d012": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2779. Fixed ResourceManager to not require delegation tokens for communicating with Timeline Service. Contributed by Zhijie Shen.\n",
      "commitDate": "30/10/14 11:16 PM",
      "commitName": "d1828d94435eca21761b0ba8458f9de2f125d012",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "30/09/14 4:44 PM",
      "commitNameOld": "bbff96be48119774688981d04baf444639135977",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 30.27,
      "commitsBetweenForRepo": 281,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,12 @@\n   private void putEntity(TimelineEntity entity) {\n-    if (UserGroupInformation.isSecurityEnabled()) {\n-      if (!hasReceivedTimelineDelegtionToken\n-          \u0026\u0026 getTimelineDelegtionTokenAttempts \u003c MAX_GET_TIMELINE_DELEGATION_TOKEN_ATTEMPTS) {\n-        try {\n-          Token\u003cTimelineDelegationTokenIdentifier\u003e token \u003d\n-              client.getDelegationToken(\n-                  UserGroupInformation.getCurrentUser().getUserName());\n-          UserGroupInformation.getCurrentUser().addToken(token);\n-          hasReceivedTimelineDelegtionToken \u003d true;\n-        } catch (Exception e) {\n-          LOG.error(\"Error happens when getting timeline delegation token\", e);\n-        } finally {\n-          ++getTimelineDelegtionTokenAttempts;\n-          if (!hasReceivedTimelineDelegtionToken\n-              \u0026\u0026 getTimelineDelegtionTokenAttempts \u003d\u003d MAX_GET_TIMELINE_DELEGATION_TOKEN_ATTEMPTS) {\n-            LOG.error(\"Run out of the attempts to get timeline delegation token. \" +\n-              \"Use kerberos authentication only.\");\n-          }\n-        }\n-      }\n-    }\n     try {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Publishing the entity \" + entity.getEntityId() +\n             \", JSON-style content: \" + TimelineUtils.dumpTimelineRecordtoJSON(entity));\n       }\n       client.putEntities(entity);\n     } catch (Exception e) {\n       LOG.error(\"Error when publishing entity [\" + entity.getEntityType() + \",\"\n           + entity.getEntityId() + \"]\", e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void putEntity(TimelineEntity entity) {\n    try {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Publishing the entity \" + entity.getEntityId() +\n            \", JSON-style content: \" + TimelineUtils.dumpTimelineRecordtoJSON(entity));\n      }\n      client.putEntities(entity);\n    } catch (Exception e) {\n      LOG.error(\"Error when publishing entity [\" + entity.getEntityType() + \",\"\n          + entity.getEntityId() + \"]\", e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/metrics/SystemMetricsPublisher.java",
      "extendedDetails": {}
    },
    "6b8b1608e64e300e4e1d23c60476febaca29ca38": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2033. Merging generic-history into the Timeline Store (Contributed by Zhijie Shen)\n",
      "commitDate": "11/09/14 7:04 PM",
      "commitName": "6b8b1608e64e300e4e1d23c60476febaca29ca38",
      "commitAuthor": "junping_du",
      "diff": "@@ -0,0 +1,33 @@\n+  private void putEntity(TimelineEntity entity) {\n+    if (UserGroupInformation.isSecurityEnabled()) {\n+      if (!hasReceivedTimelineDelegtionToken\n+          \u0026\u0026 getTimelineDelegtionTokenAttempts \u003c MAX_GET_TIMELINE_DELEGATION_TOKEN_ATTEMPTS) {\n+        try {\n+          Token\u003cTimelineDelegationTokenIdentifier\u003e token \u003d\n+              client.getDelegationToken(\n+                  UserGroupInformation.getCurrentUser().getUserName());\n+          UserGroupInformation.getCurrentUser().addToken(token);\n+          hasReceivedTimelineDelegtionToken \u003d true;\n+        } catch (Exception e) {\n+          LOG.error(\"Error happens when getting timeline delegation token\", e);\n+        } finally {\n+          ++getTimelineDelegtionTokenAttempts;\n+          if (!hasReceivedTimelineDelegtionToken\n+              \u0026\u0026 getTimelineDelegtionTokenAttempts \u003d\u003d MAX_GET_TIMELINE_DELEGATION_TOKEN_ATTEMPTS) {\n+            LOG.error(\"Run out of the attempts to get timeline delegation token. \" +\n+              \"Use kerberos authentication only.\");\n+          }\n+        }\n+      }\n+    }\n+    try {\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Publishing the entity \" + entity.getEntityId() +\n+            \", JSON-style content: \" + TimelineUtils.dumpTimelineRecordtoJSON(entity));\n+      }\n+      client.putEntities(entity);\n+    } catch (Exception e) {\n+      LOG.error(\"Error when publishing entity [\" + entity.getEntityType() + \",\"\n+          + entity.getEntityId() + \"]\", e);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void putEntity(TimelineEntity entity) {\n    if (UserGroupInformation.isSecurityEnabled()) {\n      if (!hasReceivedTimelineDelegtionToken\n          \u0026\u0026 getTimelineDelegtionTokenAttempts \u003c MAX_GET_TIMELINE_DELEGATION_TOKEN_ATTEMPTS) {\n        try {\n          Token\u003cTimelineDelegationTokenIdentifier\u003e token \u003d\n              client.getDelegationToken(\n                  UserGroupInformation.getCurrentUser().getUserName());\n          UserGroupInformation.getCurrentUser().addToken(token);\n          hasReceivedTimelineDelegtionToken \u003d true;\n        } catch (Exception e) {\n          LOG.error(\"Error happens when getting timeline delegation token\", e);\n        } finally {\n          ++getTimelineDelegtionTokenAttempts;\n          if (!hasReceivedTimelineDelegtionToken\n              \u0026\u0026 getTimelineDelegtionTokenAttempts \u003d\u003d MAX_GET_TIMELINE_DELEGATION_TOKEN_ATTEMPTS) {\n            LOG.error(\"Run out of the attempts to get timeline delegation token. \" +\n              \"Use kerberos authentication only.\");\n          }\n        }\n      }\n    }\n    try {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Publishing the entity \" + entity.getEntityId() +\n            \", JSON-style content: \" + TimelineUtils.dumpTimelineRecordtoJSON(entity));\n      }\n      client.putEntities(entity);\n    } catch (Exception e) {\n      LOG.error(\"Error when publishing entity [\" + entity.getEntityType() + \",\"\n          + entity.getEntityId() + \"]\", e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/metrics/SystemMetricsPublisher.java"
    }
  }
}