{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HdfsKMSUtil.java",
  "functionName": "createKeyProvider",
  "functionId": "createKeyProvider___conf-Configuration(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/HdfsKMSUtil.java",
  "functionStartLine": 69,
  "functionEndLine": 72,
  "numCommitsSeen": 240,
  "timeTaken": 4935,
  "changeHistory": [
    "404eab4dc0582e0384b93664ea6ee77ccd5eeebc",
    "713cb71820ad94a5436f35824d07aa12fcba5cc6",
    "e2c9b288b223b9fd82dc12018936e13128413492",
    "05e04f34f27149537fdb89f46af26bee14531ca4",
    "d2d5a0ea03b0d461a4d376c7b9de8cd5c147effa",
    "10e8602f32b553a1424f1a9b5f9f74f7b68a49d1"
  ],
  "changeHistoryShort": {
    "404eab4dc0582e0384b93664ea6ee77ccd5eeebc": "Ymovefromfile",
    "713cb71820ad94a5436f35824d07aa12fcba5cc6": "Ybodychange",
    "e2c9b288b223b9fd82dc12018936e13128413492": "Ymultichange(Ymovefromfile,Ybodychange)",
    "05e04f34f27149537fdb89f46af26bee14531ca4": "Ybodychange",
    "d2d5a0ea03b0d461a4d376c7b9de8cd5c147effa": "Ymultichange(Yrename,Yreturntypechange,Ybodychange)",
    "10e8602f32b553a1424f1a9b5f9f74f7b68a49d1": "Ybodychange"
  },
  "changeHistoryDetails": {
    "404eab4dc0582e0384b93664ea6ee77ccd5eeebc": {
      "type": "Ymovefromfile",
      "commitMessage": "HDFS-12396. Webhdfs file system should get delegation token from kms provider. Contributed by Rushabh S Shah.\n",
      "commitDate": "04/12/17 10:40 AM",
      "commitName": "404eab4dc0582e0384b93664ea6ee77ccd5eeebc",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "03/12/17 10:22 PM",
      "commitNameOld": "37ca4169508c3003dbe9044fefd37eb8cd8c0503",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 0.51,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static KeyProvider createKeyProvider(\n      final Configuration conf) throws IOException {\n    return KMSUtil.createKeyProvider(conf, keyProviderUriKeyName);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/HdfsKMSUtil.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSUtilClient.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/HdfsKMSUtil.java",
        "oldMethodName": "createKeyProvider",
        "newMethodName": "createKeyProvider"
      }
    },
    "713cb71820ad94a5436f35824d07aa12fcba5cc6": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13155. Implement TokenRenewer to renew and cancel delegation tokens in KMS. Contributed by Xiao Chen.\n",
      "commitDate": "03/06/16 4:48 PM",
      "commitName": "713cb71820ad94a5436f35824d07aa12fcba5cc6",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "30/03/16 1:37 PM",
      "commitNameOld": "37e23ce45c592f3c9c48a08a52a5f46787f6c0e9",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 65.13,
      "commitsBetweenForRepo": 425,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,4 @@\n   public static KeyProvider createKeyProvider(\n       final Configuration conf) throws IOException {\n-    final String providerUriStr \u003d\n-        conf.getTrimmed(HdfsClientConfigKeys.DFS_ENCRYPTION_KEY_PROVIDER_URI, \"\");\n-    // No provider set in conf\n-    if (providerUriStr.isEmpty()) {\n-      return null;\n-    }\n-    final URI providerUri;\n-    try {\n-      providerUri \u003d new URI(providerUriStr);\n-    } catch (URISyntaxException e) {\n-      throw new IOException(e);\n-    }\n-    KeyProvider keyProvider \u003d KeyProviderFactory.get(providerUri, conf);\n-    if (keyProvider \u003d\u003d null) {\n-      throw new IOException(\"Could not instantiate KeyProvider from \" +\n-          HdfsClientConfigKeys.DFS_ENCRYPTION_KEY_PROVIDER_URI + \" setting of \u0027\"\n-          + providerUriStr + \"\u0027\");\n-    }\n-    if (keyProvider.isTransient()) {\n-      throw new IOException(\"KeyProvider \" + keyProvider.toString()\n-          + \" was found but it is a transient provider.\");\n-    }\n-    return keyProvider;\n+    return KMSUtil.createKeyProvider(conf, keyProviderUriKeyName);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static KeyProvider createKeyProvider(\n      final Configuration conf) throws IOException {\n    return KMSUtil.createKeyProvider(conf, keyProviderUriKeyName);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSUtilClient.java",
      "extendedDetails": {}
    },
    "e2c9b288b223b9fd82dc12018936e13128413492": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "HDFS-8925. Move BlockReaderLocal to hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "28/08/15 2:38 PM",
      "commitName": "e2c9b288b223b9fd82dc12018936e13128413492",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-8925. Move BlockReaderLocal to hdfs-client. Contributed by Mingliang Liu.\n",
          "commitDate": "28/08/15 2:38 PM",
          "commitName": "e2c9b288b223b9fd82dc12018936e13128413492",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "28/08/15 2:21 PM",
          "commitNameOld": "b94b56806d3d6e04984e229b479f7ac15b62bbfa",
          "commitAuthorOld": "Colin Patrick Mccabe",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,26 @@\n   public static KeyProvider createKeyProvider(\n       final Configuration conf) throws IOException {\n     final String providerUriStr \u003d\n-        conf.getTrimmed(DFSConfigKeys.DFS_ENCRYPTION_KEY_PROVIDER_URI, \"\");\n+        conf.getTrimmed(HdfsClientConfigKeys.DFS_ENCRYPTION_KEY_PROVIDER_URI, \"\");\n     // No provider set in conf\n     if (providerUriStr.isEmpty()) {\n       return null;\n     }\n     final URI providerUri;\n     try {\n       providerUri \u003d new URI(providerUriStr);\n     } catch (URISyntaxException e) {\n       throw new IOException(e);\n     }\n     KeyProvider keyProvider \u003d KeyProviderFactory.get(providerUri, conf);\n     if (keyProvider \u003d\u003d null) {\n-      throw new IOException(\"Could not instantiate KeyProvider from \" + \n-          DFSConfigKeys.DFS_ENCRYPTION_KEY_PROVIDER_URI + \" setting of \u0027\" + \n-          providerUriStr +\"\u0027\");\n+      throw new IOException(\"Could not instantiate KeyProvider from \" +\n+          HdfsClientConfigKeys.DFS_ENCRYPTION_KEY_PROVIDER_URI + \" setting of \u0027\"\n+          + providerUriStr + \"\u0027\");\n     }\n     if (keyProvider.isTransient()) {\n       throw new IOException(\"KeyProvider \" + keyProvider.toString()\n           + \" was found but it is a transient provider.\");\n     }\n     return keyProvider;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static KeyProvider createKeyProvider(\n      final Configuration conf) throws IOException {\n    final String providerUriStr \u003d\n        conf.getTrimmed(HdfsClientConfigKeys.DFS_ENCRYPTION_KEY_PROVIDER_URI, \"\");\n    // No provider set in conf\n    if (providerUriStr.isEmpty()) {\n      return null;\n    }\n    final URI providerUri;\n    try {\n      providerUri \u003d new URI(providerUriStr);\n    } catch (URISyntaxException e) {\n      throw new IOException(e);\n    }\n    KeyProvider keyProvider \u003d KeyProviderFactory.get(providerUri, conf);\n    if (keyProvider \u003d\u003d null) {\n      throw new IOException(\"Could not instantiate KeyProvider from \" +\n          HdfsClientConfigKeys.DFS_ENCRYPTION_KEY_PROVIDER_URI + \" setting of \u0027\"\n          + providerUriStr + \"\u0027\");\n    }\n    if (keyProvider.isTransient()) {\n      throw new IOException(\"KeyProvider \" + keyProvider.toString()\n          + \" was found but it is a transient provider.\");\n    }\n    return keyProvider;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSUtilClient.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSUtilClient.java",
            "oldMethodName": "createKeyProvider",
            "newMethodName": "createKeyProvider"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8925. Move BlockReaderLocal to hdfs-client. Contributed by Mingliang Liu.\n",
          "commitDate": "28/08/15 2:38 PM",
          "commitName": "e2c9b288b223b9fd82dc12018936e13128413492",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "28/08/15 2:21 PM",
          "commitNameOld": "b94b56806d3d6e04984e229b479f7ac15b62bbfa",
          "commitAuthorOld": "Colin Patrick Mccabe",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,26 @@\n   public static KeyProvider createKeyProvider(\n       final Configuration conf) throws IOException {\n     final String providerUriStr \u003d\n-        conf.getTrimmed(DFSConfigKeys.DFS_ENCRYPTION_KEY_PROVIDER_URI, \"\");\n+        conf.getTrimmed(HdfsClientConfigKeys.DFS_ENCRYPTION_KEY_PROVIDER_URI, \"\");\n     // No provider set in conf\n     if (providerUriStr.isEmpty()) {\n       return null;\n     }\n     final URI providerUri;\n     try {\n       providerUri \u003d new URI(providerUriStr);\n     } catch (URISyntaxException e) {\n       throw new IOException(e);\n     }\n     KeyProvider keyProvider \u003d KeyProviderFactory.get(providerUri, conf);\n     if (keyProvider \u003d\u003d null) {\n-      throw new IOException(\"Could not instantiate KeyProvider from \" + \n-          DFSConfigKeys.DFS_ENCRYPTION_KEY_PROVIDER_URI + \" setting of \u0027\" + \n-          providerUriStr +\"\u0027\");\n+      throw new IOException(\"Could not instantiate KeyProvider from \" +\n+          HdfsClientConfigKeys.DFS_ENCRYPTION_KEY_PROVIDER_URI + \" setting of \u0027\"\n+          + providerUriStr + \"\u0027\");\n     }\n     if (keyProvider.isTransient()) {\n       throw new IOException(\"KeyProvider \" + keyProvider.toString()\n           + \" was found but it is a transient provider.\");\n     }\n     return keyProvider;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static KeyProvider createKeyProvider(\n      final Configuration conf) throws IOException {\n    final String providerUriStr \u003d\n        conf.getTrimmed(HdfsClientConfigKeys.DFS_ENCRYPTION_KEY_PROVIDER_URI, \"\");\n    // No provider set in conf\n    if (providerUriStr.isEmpty()) {\n      return null;\n    }\n    final URI providerUri;\n    try {\n      providerUri \u003d new URI(providerUriStr);\n    } catch (URISyntaxException e) {\n      throw new IOException(e);\n    }\n    KeyProvider keyProvider \u003d KeyProviderFactory.get(providerUri, conf);\n    if (keyProvider \u003d\u003d null) {\n      throw new IOException(\"Could not instantiate KeyProvider from \" +\n          HdfsClientConfigKeys.DFS_ENCRYPTION_KEY_PROVIDER_URI + \" setting of \u0027\"\n          + providerUriStr + \"\u0027\");\n    }\n    if (keyProvider.isTransient()) {\n      throw new IOException(\"KeyProvider \" + keyProvider.toString()\n          + \" was found but it is a transient provider.\");\n    }\n    return keyProvider;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSUtilClient.java",
          "extendedDetails": {}
        }
      ]
    },
    "05e04f34f27149537fdb89f46af26bee14531ca4": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8451. DFSClient probe for encryption testing interprets empty URI property for enabled. Contributed by Steve Loughran.\n",
      "commitDate": "21/05/15 11:58 AM",
      "commitName": "05e04f34f27149537fdb89f46af26bee14531ca4",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "19/05/15 10:50 AM",
      "commitNameOld": "470c87dbc6c24dd3b370f1ad9e7ab1f6dabd2080",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 2.05,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   public static KeyProvider createKeyProvider(\n       final Configuration conf) throws IOException {\n     final String providerUriStr \u003d\n-        conf.get(DFSConfigKeys.DFS_ENCRYPTION_KEY_PROVIDER_URI, null);\n+        conf.getTrimmed(DFSConfigKeys.DFS_ENCRYPTION_KEY_PROVIDER_URI, \"\");\n     // No provider set in conf\n-    if (providerUriStr \u003d\u003d null) {\n+    if (providerUriStr.isEmpty()) {\n       return null;\n     }\n     final URI providerUri;\n     try {\n       providerUri \u003d new URI(providerUriStr);\n     } catch (URISyntaxException e) {\n       throw new IOException(e);\n     }\n     KeyProvider keyProvider \u003d KeyProviderFactory.get(providerUri, conf);\n     if (keyProvider \u003d\u003d null) {\n       throw new IOException(\"Could not instantiate KeyProvider from \" + \n           DFSConfigKeys.DFS_ENCRYPTION_KEY_PROVIDER_URI + \" setting of \u0027\" + \n           providerUriStr +\"\u0027\");\n     }\n     if (keyProvider.isTransient()) {\n       throw new IOException(\"KeyProvider \" + keyProvider.toString()\n           + \" was found but it is a transient provider.\");\n     }\n     return keyProvider;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static KeyProvider createKeyProvider(\n      final Configuration conf) throws IOException {\n    final String providerUriStr \u003d\n        conf.getTrimmed(DFSConfigKeys.DFS_ENCRYPTION_KEY_PROVIDER_URI, \"\");\n    // No provider set in conf\n    if (providerUriStr.isEmpty()) {\n      return null;\n    }\n    final URI providerUri;\n    try {\n      providerUri \u003d new URI(providerUriStr);\n    } catch (URISyntaxException e) {\n      throw new IOException(e);\n    }\n    KeyProvider keyProvider \u003d KeyProviderFactory.get(providerUri, conf);\n    if (keyProvider \u003d\u003d null) {\n      throw new IOException(\"Could not instantiate KeyProvider from \" + \n          DFSConfigKeys.DFS_ENCRYPTION_KEY_PROVIDER_URI + \" setting of \u0027\" + \n          providerUriStr +\"\u0027\");\n    }\n    if (keyProvider.isTransient()) {\n      throw new IOException(\"KeyProvider \" + keyProvider.toString()\n          + \" was found but it is a transient provider.\");\n    }\n    return keyProvider;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
      "extendedDetails": {}
    },
    "d2d5a0ea03b0d461a4d376c7b9de8cd5c147effa": {
      "type": "Ymultichange(Yrename,Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-7179. DFSClient should instantiate a KeyProvider, not a KeyProviderCryptoExtension. (wang)\n",
      "commitDate": "02/10/14 1:50 PM",
      "commitName": "d2d5a0ea03b0d461a4d376c7b9de8cd5c147effa",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-7179. DFSClient should instantiate a KeyProvider, not a KeyProviderCryptoExtension. (wang)\n",
          "commitDate": "02/10/14 1:50 PM",
          "commitName": "d2d5a0ea03b0d461a4d376c7b9de8cd5c147effa",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "17/09/14 8:14 PM",
          "commitNameOld": "10e8602f32b553a1424f1a9b5f9f74f7b68a49d1",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 14.73,
          "commitsBetweenForRepo": 181,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,26 @@\n-  public static KeyProviderCryptoExtension createKeyProviderCryptoExtension(\n+  public static KeyProvider createKeyProvider(\n       final Configuration conf) throws IOException {\n     final String providerUriStr \u003d\n         conf.get(DFSConfigKeys.DFS_ENCRYPTION_KEY_PROVIDER_URI, null);\n     // No provider set in conf\n     if (providerUriStr \u003d\u003d null) {\n       return null;\n     }\n     final URI providerUri;\n     try {\n       providerUri \u003d new URI(providerUriStr);\n     } catch (URISyntaxException e) {\n       throw new IOException(e);\n     }\n     KeyProvider keyProvider \u003d KeyProviderFactory.get(providerUri, conf);\n     if (keyProvider \u003d\u003d null) {\n       throw new IOException(\"Could not instantiate KeyProvider from \" + \n           DFSConfigKeys.DFS_ENCRYPTION_KEY_PROVIDER_URI + \" setting of \u0027\" + \n           providerUriStr +\"\u0027\");\n     }\n     if (keyProvider.isTransient()) {\n       throw new IOException(\"KeyProvider \" + keyProvider.toString()\n           + \" was found but it is a transient provider.\");\n     }\n-    KeyProviderCryptoExtension cryptoProvider \u003d KeyProviderCryptoExtension\n-        .createKeyProviderCryptoExtension(keyProvider);\n-    return cryptoProvider;\n+    return keyProvider;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static KeyProvider createKeyProvider(\n      final Configuration conf) throws IOException {\n    final String providerUriStr \u003d\n        conf.get(DFSConfigKeys.DFS_ENCRYPTION_KEY_PROVIDER_URI, null);\n    // No provider set in conf\n    if (providerUriStr \u003d\u003d null) {\n      return null;\n    }\n    final URI providerUri;\n    try {\n      providerUri \u003d new URI(providerUriStr);\n    } catch (URISyntaxException e) {\n      throw new IOException(e);\n    }\n    KeyProvider keyProvider \u003d KeyProviderFactory.get(providerUri, conf);\n    if (keyProvider \u003d\u003d null) {\n      throw new IOException(\"Could not instantiate KeyProvider from \" + \n          DFSConfigKeys.DFS_ENCRYPTION_KEY_PROVIDER_URI + \" setting of \u0027\" + \n          providerUriStr +\"\u0027\");\n    }\n    if (keyProvider.isTransient()) {\n      throw new IOException(\"KeyProvider \" + keyProvider.toString()\n          + \" was found but it is a transient provider.\");\n    }\n    return keyProvider;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
          "extendedDetails": {
            "oldValue": "createKeyProviderCryptoExtension",
            "newValue": "createKeyProvider"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-7179. DFSClient should instantiate a KeyProvider, not a KeyProviderCryptoExtension. (wang)\n",
          "commitDate": "02/10/14 1:50 PM",
          "commitName": "d2d5a0ea03b0d461a4d376c7b9de8cd5c147effa",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "17/09/14 8:14 PM",
          "commitNameOld": "10e8602f32b553a1424f1a9b5f9f74f7b68a49d1",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 14.73,
          "commitsBetweenForRepo": 181,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,26 @@\n-  public static KeyProviderCryptoExtension createKeyProviderCryptoExtension(\n+  public static KeyProvider createKeyProvider(\n       final Configuration conf) throws IOException {\n     final String providerUriStr \u003d\n         conf.get(DFSConfigKeys.DFS_ENCRYPTION_KEY_PROVIDER_URI, null);\n     // No provider set in conf\n     if (providerUriStr \u003d\u003d null) {\n       return null;\n     }\n     final URI providerUri;\n     try {\n       providerUri \u003d new URI(providerUriStr);\n     } catch (URISyntaxException e) {\n       throw new IOException(e);\n     }\n     KeyProvider keyProvider \u003d KeyProviderFactory.get(providerUri, conf);\n     if (keyProvider \u003d\u003d null) {\n       throw new IOException(\"Could not instantiate KeyProvider from \" + \n           DFSConfigKeys.DFS_ENCRYPTION_KEY_PROVIDER_URI + \" setting of \u0027\" + \n           providerUriStr +\"\u0027\");\n     }\n     if (keyProvider.isTransient()) {\n       throw new IOException(\"KeyProvider \" + keyProvider.toString()\n           + \" was found but it is a transient provider.\");\n     }\n-    KeyProviderCryptoExtension cryptoProvider \u003d KeyProviderCryptoExtension\n-        .createKeyProviderCryptoExtension(keyProvider);\n-    return cryptoProvider;\n+    return keyProvider;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static KeyProvider createKeyProvider(\n      final Configuration conf) throws IOException {\n    final String providerUriStr \u003d\n        conf.get(DFSConfigKeys.DFS_ENCRYPTION_KEY_PROVIDER_URI, null);\n    // No provider set in conf\n    if (providerUriStr \u003d\u003d null) {\n      return null;\n    }\n    final URI providerUri;\n    try {\n      providerUri \u003d new URI(providerUriStr);\n    } catch (URISyntaxException e) {\n      throw new IOException(e);\n    }\n    KeyProvider keyProvider \u003d KeyProviderFactory.get(providerUri, conf);\n    if (keyProvider \u003d\u003d null) {\n      throw new IOException(\"Could not instantiate KeyProvider from \" + \n          DFSConfigKeys.DFS_ENCRYPTION_KEY_PROVIDER_URI + \" setting of \u0027\" + \n          providerUriStr +\"\u0027\");\n    }\n    if (keyProvider.isTransient()) {\n      throw new IOException(\"KeyProvider \" + keyProvider.toString()\n          + \" was found but it is a transient provider.\");\n    }\n    return keyProvider;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
          "extendedDetails": {
            "oldValue": "KeyProviderCryptoExtension",
            "newValue": "KeyProvider"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7179. DFSClient should instantiate a KeyProvider, not a KeyProviderCryptoExtension. (wang)\n",
          "commitDate": "02/10/14 1:50 PM",
          "commitName": "d2d5a0ea03b0d461a4d376c7b9de8cd5c147effa",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "17/09/14 8:14 PM",
          "commitNameOld": "10e8602f32b553a1424f1a9b5f9f74f7b68a49d1",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 14.73,
          "commitsBetweenForRepo": 181,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,26 @@\n-  public static KeyProviderCryptoExtension createKeyProviderCryptoExtension(\n+  public static KeyProvider createKeyProvider(\n       final Configuration conf) throws IOException {\n     final String providerUriStr \u003d\n         conf.get(DFSConfigKeys.DFS_ENCRYPTION_KEY_PROVIDER_URI, null);\n     // No provider set in conf\n     if (providerUriStr \u003d\u003d null) {\n       return null;\n     }\n     final URI providerUri;\n     try {\n       providerUri \u003d new URI(providerUriStr);\n     } catch (URISyntaxException e) {\n       throw new IOException(e);\n     }\n     KeyProvider keyProvider \u003d KeyProviderFactory.get(providerUri, conf);\n     if (keyProvider \u003d\u003d null) {\n       throw new IOException(\"Could not instantiate KeyProvider from \" + \n           DFSConfigKeys.DFS_ENCRYPTION_KEY_PROVIDER_URI + \" setting of \u0027\" + \n           providerUriStr +\"\u0027\");\n     }\n     if (keyProvider.isTransient()) {\n       throw new IOException(\"KeyProvider \" + keyProvider.toString()\n           + \" was found but it is a transient provider.\");\n     }\n-    KeyProviderCryptoExtension cryptoProvider \u003d KeyProviderCryptoExtension\n-        .createKeyProviderCryptoExtension(keyProvider);\n-    return cryptoProvider;\n+    return keyProvider;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static KeyProvider createKeyProvider(\n      final Configuration conf) throws IOException {\n    final String providerUriStr \u003d\n        conf.get(DFSConfigKeys.DFS_ENCRYPTION_KEY_PROVIDER_URI, null);\n    // No provider set in conf\n    if (providerUriStr \u003d\u003d null) {\n      return null;\n    }\n    final URI providerUri;\n    try {\n      providerUri \u003d new URI(providerUriStr);\n    } catch (URISyntaxException e) {\n      throw new IOException(e);\n    }\n    KeyProvider keyProvider \u003d KeyProviderFactory.get(providerUri, conf);\n    if (keyProvider \u003d\u003d null) {\n      throw new IOException(\"Could not instantiate KeyProvider from \" + \n          DFSConfigKeys.DFS_ENCRYPTION_KEY_PROVIDER_URI + \" setting of \u0027\" + \n          providerUriStr +\"\u0027\");\n    }\n    if (keyProvider.isTransient()) {\n      throw new IOException(\"KeyProvider \" + keyProvider.toString()\n          + \" was found but it is a transient provider.\");\n    }\n    return keyProvider;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
          "extendedDetails": {}
        }
      ]
    },
    "10e8602f32b553a1424f1a9b5f9f74f7b68a49d1": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7004. Update KeyProvider instantiation to create by URI. (wang)\n",
      "commitDate": "17/09/14 8:14 PM",
      "commitName": "10e8602f32b553a1424f1a9b5f9f74f7b68a49d1",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "05/09/14 10:40 AM",
      "commitNameOld": "c6107f566ff01e9bfee9052f86f6e5b21d5e89f3",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 12.4,
      "commitsBetweenForRepo": 120,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,28 @@\n   public static KeyProviderCryptoExtension createKeyProviderCryptoExtension(\n       final Configuration conf) throws IOException {\n-    final List\u003cKeyProvider\u003e providers \u003d KeyProviderFactory.getProviders(conf);\n-    if (providers \u003d\u003d null || providers.size() \u003d\u003d 0) {\n+    final String providerUriStr \u003d\n+        conf.get(DFSConfigKeys.DFS_ENCRYPTION_KEY_PROVIDER_URI, null);\n+    // No provider set in conf\n+    if (providerUriStr \u003d\u003d null) {\n       return null;\n     }\n-    if (providers.size() \u003e 1) {\n-      StringBuilder builder \u003d new StringBuilder();\n-      builder.append(\"Found multiple KeyProviders but only one is permitted [\");\n-      String prefix \u003d \" \";\n-      for (KeyProvider kp: providers) {\n-        builder.append(prefix + kp.toString());\n-        prefix \u003d \", \";\n-      }\n-      builder.append(\"]\");\n-      throw new IOException(builder.toString());\n+    final URI providerUri;\n+    try {\n+      providerUri \u003d new URI(providerUriStr);\n+    } catch (URISyntaxException e) {\n+      throw new IOException(e);\n     }\n-    KeyProviderCryptoExtension provider \u003d KeyProviderCryptoExtension\n-        .createKeyProviderCryptoExtension(providers.get(0));\n-    if (provider.isTransient()) {\n-      throw new IOException(\"KeyProvider \" + provider.toString()\n+    KeyProvider keyProvider \u003d KeyProviderFactory.get(providerUri, conf);\n+    if (keyProvider \u003d\u003d null) {\n+      throw new IOException(\"Could not instantiate KeyProvider from \" + \n+          DFSConfigKeys.DFS_ENCRYPTION_KEY_PROVIDER_URI + \" setting of \u0027\" + \n+          providerUriStr +\"\u0027\");\n+    }\n+    if (keyProvider.isTransient()) {\n+      throw new IOException(\"KeyProvider \" + keyProvider.toString()\n           + \" was found but it is a transient provider.\");\n     }\n-    return provider;\n+    KeyProviderCryptoExtension cryptoProvider \u003d KeyProviderCryptoExtension\n+        .createKeyProviderCryptoExtension(keyProvider);\n+    return cryptoProvider;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static KeyProviderCryptoExtension createKeyProviderCryptoExtension(\n      final Configuration conf) throws IOException {\n    final String providerUriStr \u003d\n        conf.get(DFSConfigKeys.DFS_ENCRYPTION_KEY_PROVIDER_URI, null);\n    // No provider set in conf\n    if (providerUriStr \u003d\u003d null) {\n      return null;\n    }\n    final URI providerUri;\n    try {\n      providerUri \u003d new URI(providerUriStr);\n    } catch (URISyntaxException e) {\n      throw new IOException(e);\n    }\n    KeyProvider keyProvider \u003d KeyProviderFactory.get(providerUri, conf);\n    if (keyProvider \u003d\u003d null) {\n      throw new IOException(\"Could not instantiate KeyProvider from \" + \n          DFSConfigKeys.DFS_ENCRYPTION_KEY_PROVIDER_URI + \" setting of \u0027\" + \n          providerUriStr +\"\u0027\");\n    }\n    if (keyProvider.isTransient()) {\n      throw new IOException(\"KeyProvider \" + keyProvider.toString()\n          + \" was found but it is a transient provider.\");\n    }\n    KeyProviderCryptoExtension cryptoProvider \u003d KeyProviderCryptoExtension\n        .createKeyProviderCryptoExtension(keyProvider);\n    return cryptoProvider;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSUtil.java",
      "extendedDetails": {}
    }
  }
}