{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SolverPreprocessor.java",
  "functionName": "aggregateSkylines",
  "functionId": "aggregateSkylines___jobHistory-Map__RecurrenceId,List__ResourceSkyline____(modifiers-final)__minJobRuns-int(modifiers-final)",
  "sourceFilePath": "hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/preprocess/SolverPreprocessor.java",
  "functionStartLine": 192,
  "functionEndLine": 218,
  "numCommitsSeen": 1,
  "timeTaken": 374,
  "changeHistory": [
    "625039ef20e6011ab360131d70582a6e4bf2ec1d"
  ],
  "changeHistoryShort": {
    "625039ef20e6011ab360131d70582a6e4bf2ec1d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "625039ef20e6011ab360131d70582a6e4bf2ec1d": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-14840. Tool to estimate resource requirements of an application pipeline based on prior executions. (Rui Li via Subru).\n",
      "commitDate": "25/10/17 3:51 PM",
      "commitName": "625039ef20e6011ab360131d70582a6e4bf2ec1d",
      "commitAuthor": "Subru Krishnan",
      "diff": "@@ -0,0 +1,27 @@\n+  public final List\u003cResourceSkyline\u003e aggregateSkylines(\n+      final Map\u003cRecurrenceId, List\u003cResourceSkyline\u003e\u003e jobHistory,\n+      final int minJobRuns) throws InvalidInputException {\n+    List\u003cResourceSkyline\u003e resourceSkylines \u003d new ArrayList\u003cResourceSkyline\u003e();\n+    for (Map.Entry\u003cRecurrenceId, List\u003cResourceSkyline\u003e\u003e entry : jobHistory\n+        .entrySet()) {\n+      // TODO: identify different jobs within the same pipeline\n+      // right now, we do prediction at the granularity of pipeline, i.e., we\n+      // will merge the\n+      // resource skylines of jobs within the same pipeline into one aggregated\n+      // resource skyline\n+      ResourceSkyline skylineAgg \u003d null;\n+      skylineAgg \u003d mergeSkyline(entry.getValue());\n+      resourceSkylines.add(skylineAgg);\n+    }\n+    int numJobs \u003d resourceSkylines.size();\n+    if (numJobs \u003c minJobRuns) {\n+      LOGGER.error(\n+          \"Solver requires job resource skyline history for at least {} runs,\"\n+              + \" but it only receives history info for {}  runs.\",\n+          minJobRuns, numJobs);\n+      throw new InvalidInputException(\"Job ResourceSkyline history\",\n+          \"containing less job runs\" + \" than \" + minJobRuns);\n+    }\n+\n+    return resourceSkylines;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public final List\u003cResourceSkyline\u003e aggregateSkylines(\n      final Map\u003cRecurrenceId, List\u003cResourceSkyline\u003e\u003e jobHistory,\n      final int minJobRuns) throws InvalidInputException {\n    List\u003cResourceSkyline\u003e resourceSkylines \u003d new ArrayList\u003cResourceSkyline\u003e();\n    for (Map.Entry\u003cRecurrenceId, List\u003cResourceSkyline\u003e\u003e entry : jobHistory\n        .entrySet()) {\n      // TODO: identify different jobs within the same pipeline\n      // right now, we do prediction at the granularity of pipeline, i.e., we\n      // will merge the\n      // resource skylines of jobs within the same pipeline into one aggregated\n      // resource skyline\n      ResourceSkyline skylineAgg \u003d null;\n      skylineAgg \u003d mergeSkyline(entry.getValue());\n      resourceSkylines.add(skylineAgg);\n    }\n    int numJobs \u003d resourceSkylines.size();\n    if (numJobs \u003c minJobRuns) {\n      LOGGER.error(\n          \"Solver requires job resource skyline history for at least {} runs,\"\n              + \" but it only receives history info for {}  runs.\",\n          minJobRuns, numJobs);\n      throw new InvalidInputException(\"Job ResourceSkyline history\",\n          \"containing less job runs\" + \" than \" + minJobRuns);\n    }\n\n    return resourceSkylines;\n  }",
      "path": "hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/preprocess/SolverPreprocessor.java"
    }
  }
}