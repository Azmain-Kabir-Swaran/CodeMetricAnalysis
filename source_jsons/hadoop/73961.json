{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FairCallQueue.java",
  "functionName": "add",
  "functionId": "add___e-E",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/FairCallQueue.java",
  "functionStartLine": 181,
  "functionEndLine": 199,
  "numCommitsSeen": 14,
  "timeTaken": 1570,
  "changeHistory": [
    "337e9b794d3401748a86aa03a55ac61b0305d231",
    "855e0477b1706a2d5b0df6a2b0e461aeec8839c2"
  ],
  "changeHistoryShort": {
    "337e9b794d3401748a86aa03a55ac61b0305d231": "Ybodychange",
    "855e0477b1706a2d5b0df6a2b0e461aeec8839c2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "337e9b794d3401748a86aa03a55ac61b0305d231": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16268. Allow StandbyException to be thrown as CallQueueOverflowException when RPC call queue is filled. Contributed by CR Hota.\n",
      "commitDate": "04/09/19 8:22 AM",
      "commitName": "337e9b794d3401748a86aa03a55ac61b0305d231",
      "commitAuthor": "Erik Krogen",
      "commitDateOld": "07/06/19 2:20 PM",
      "commitNameOld": "76b94c274fe9775efcfd51c676d80c88a4f7fdb9",
      "commitAuthorOld": "Erik Krogen",
      "daysBetweenCommits": 88.75,
      "commitsBetweenForRepo": 777,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,19 @@\n   public boolean add(E e) {\n     final int priorityLevel \u003d e.getPriorityLevel();\n     // try offering to all queues.\n     if (!offerQueues(priorityLevel, e, true)) {\n-      // only disconnect the lowest priority users that overflow the queue.\n-      throw (priorityLevel \u003d\u003d queues.size() - 1)\n-          ? CallQueueOverflowException.DISCONNECT\n-          : CallQueueOverflowException.KEEPALIVE;\n+\n+      CallQueueOverflowException ex;\n+      if (serverFailOverEnabled) {\n+        // Signal clients to failover and try a separate server.\n+        ex \u003d CallQueueOverflowException.FAILOVER;\n+      } else if (priorityLevel \u003d\u003d queues.size() - 1){\n+        // only disconnect the lowest priority users that overflow the queue.\n+        ex \u003d CallQueueOverflowException.DISCONNECT;\n+      } else {\n+        ex \u003d CallQueueOverflowException.KEEPALIVE;\n+      }\n+      throw ex;\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean add(E e) {\n    final int priorityLevel \u003d e.getPriorityLevel();\n    // try offering to all queues.\n    if (!offerQueues(priorityLevel, e, true)) {\n\n      CallQueueOverflowException ex;\n      if (serverFailOverEnabled) {\n        // Signal clients to failover and try a separate server.\n        ex \u003d CallQueueOverflowException.FAILOVER;\n      } else if (priorityLevel \u003d\u003d queues.size() - 1){\n        // only disconnect the lowest priority users that overflow the queue.\n        ex \u003d CallQueueOverflowException.DISCONNECT;\n      } else {\n        ex \u003d CallQueueOverflowException.KEEPALIVE;\n      }\n      throw ex;\n    }\n    return true;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/FairCallQueue.java",
      "extendedDetails": {}
    },
    "855e0477b1706a2d5b0df6a2b0e461aeec8839c2": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-14035. Reduce fair call queue backoff\u0027s impact on clients. Contributed by Daryn Sharp.\n",
      "commitDate": "06/06/17 6:35 AM",
      "commitName": "855e0477b1706a2d5b0df6a2b0e461aeec8839c2",
      "commitAuthor": "Kihwal Lee",
      "diff": "@@ -0,0 +1,11 @@\n+  public boolean add(E e) {\n+    final int priorityLevel \u003d e.getPriorityLevel();\n+    // try offering to all queues.\n+    if (!offerQueues(priorityLevel, e, true)) {\n+      // only disconnect the lowest priority users that overflow the queue.\n+      throw (priorityLevel \u003d\u003d queues.size() - 1)\n+          ? CallQueueOverflowException.DISCONNECT\n+          : CallQueueOverflowException.KEEPALIVE;\n+    }\n+    return true;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean add(E e) {\n    final int priorityLevel \u003d e.getPriorityLevel();\n    // try offering to all queues.\n    if (!offerQueues(priorityLevel, e, true)) {\n      // only disconnect the lowest priority users that overflow the queue.\n      throw (priorityLevel \u003d\u003d queues.size() - 1)\n          ? CallQueueOverflowException.DISCONNECT\n          : CallQueueOverflowException.KEEPALIVE;\n    }\n    return true;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/FairCallQueue.java"
    }
  }
}