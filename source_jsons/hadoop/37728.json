{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DefaultAMSProcessor.java",
  "functionName": "finishApplicationMaster",
  "functionId": "finishApplicationMaster___applicationAttemptId-ApplicationAttemptId__request-FinishApplicationMasterRequest__response-FinishApplicationMasterResponse",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DefaultAMSProcessor.java",
  "functionStartLine": 426,
  "functionEndLine": 439,
  "numCommitsSeen": 22,
  "timeTaken": 2446,
  "changeHistory": [
    "077fcf6a96e420e7f36350931722b8603d010cf1",
    "5496a34c0cb2b1a83cfa6b0aba5a77b05ff2d8f0"
  ],
  "changeHistoryShort": {
    "077fcf6a96e420e7f36350931722b8603d010cf1": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
    "5496a34c0cb2b1a83cfa6b0aba5a77b05ff2d8f0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "077fcf6a96e420e7f36350931722b8603d010cf1": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-6777. Support for ApplicationMasterService processing chain of interceptors. (asuresh)\n",
      "commitDate": "19/07/17 12:26 PM",
      "commitName": "077fcf6a96e420e7f36350931722b8603d010cf1",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6777. Support for ApplicationMasterService processing chain of interceptors. (asuresh)\n",
          "commitDate": "19/07/17 12:26 PM",
          "commitName": "077fcf6a96e420e7f36350931722b8603d010cf1",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "10/07/17 2:34 PM",
          "commitNameOld": "5496a34c0cb2b1a83cfa6b0aba5a77b05ff2d8f0",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 8.91,
          "commitsBetweenForRepo": 53,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,14 @@\n-  public FinishApplicationMasterResponse finishApplicationMaster(\n+  public void finishApplicationMaster(\n       ApplicationAttemptId applicationAttemptId,\n-      FinishApplicationMasterRequest request) {\n+      FinishApplicationMasterRequest request,\n+      FinishApplicationMasterResponse response) {\n     RMApp app \u003d\n         getRmContext().getRMApps().get(applicationAttemptId.getApplicationId());\n     // For UnmanagedAMs, return true so they don\u0027t retry\n-    FinishApplicationMasterResponse response \u003d\n-        FinishApplicationMasterResponse.newInstance(\n+    response.setIsUnregistered(\n             app.getApplicationSubmissionContext().getUnmanagedAM());\n     getRmContext().getDispatcher().getEventHandler().handle(\n         new RMAppAttemptUnregistrationEvent(applicationAttemptId, request\n             .getTrackingUrl(), request.getFinalApplicationStatus(), request\n             .getDiagnostics()));\n-    return response;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void finishApplicationMaster(\n      ApplicationAttemptId applicationAttemptId,\n      FinishApplicationMasterRequest request,\n      FinishApplicationMasterResponse response) {\n    RMApp app \u003d\n        getRmContext().getRMApps().get(applicationAttemptId.getApplicationId());\n    // For UnmanagedAMs, return true so they don\u0027t retry\n    response.setIsUnregistered(\n            app.getApplicationSubmissionContext().getUnmanagedAM());\n    getRmContext().getDispatcher().getEventHandler().handle(\n        new RMAppAttemptUnregistrationEvent(applicationAttemptId, request\n            .getTrackingUrl(), request.getFinalApplicationStatus(), request\n            .getDiagnostics()));\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DefaultAMSProcessor.java",
          "extendedDetails": {
            "oldValue": "[applicationAttemptId-ApplicationAttemptId, request-FinishApplicationMasterRequest]",
            "newValue": "[applicationAttemptId-ApplicationAttemptId, request-FinishApplicationMasterRequest, response-FinishApplicationMasterResponse]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-6777. Support for ApplicationMasterService processing chain of interceptors. (asuresh)\n",
          "commitDate": "19/07/17 12:26 PM",
          "commitName": "077fcf6a96e420e7f36350931722b8603d010cf1",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "10/07/17 2:34 PM",
          "commitNameOld": "5496a34c0cb2b1a83cfa6b0aba5a77b05ff2d8f0",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 8.91,
          "commitsBetweenForRepo": 53,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,14 @@\n-  public FinishApplicationMasterResponse finishApplicationMaster(\n+  public void finishApplicationMaster(\n       ApplicationAttemptId applicationAttemptId,\n-      FinishApplicationMasterRequest request) {\n+      FinishApplicationMasterRequest request,\n+      FinishApplicationMasterResponse response) {\n     RMApp app \u003d\n         getRmContext().getRMApps().get(applicationAttemptId.getApplicationId());\n     // For UnmanagedAMs, return true so they don\u0027t retry\n-    FinishApplicationMasterResponse response \u003d\n-        FinishApplicationMasterResponse.newInstance(\n+    response.setIsUnregistered(\n             app.getApplicationSubmissionContext().getUnmanagedAM());\n     getRmContext().getDispatcher().getEventHandler().handle(\n         new RMAppAttemptUnregistrationEvent(applicationAttemptId, request\n             .getTrackingUrl(), request.getFinalApplicationStatus(), request\n             .getDiagnostics()));\n-    return response;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void finishApplicationMaster(\n      ApplicationAttemptId applicationAttemptId,\n      FinishApplicationMasterRequest request,\n      FinishApplicationMasterResponse response) {\n    RMApp app \u003d\n        getRmContext().getRMApps().get(applicationAttemptId.getApplicationId());\n    // For UnmanagedAMs, return true so they don\u0027t retry\n    response.setIsUnregistered(\n            app.getApplicationSubmissionContext().getUnmanagedAM());\n    getRmContext().getDispatcher().getEventHandler().handle(\n        new RMAppAttemptUnregistrationEvent(applicationAttemptId, request\n            .getTrackingUrl(), request.getFinalApplicationStatus(), request\n            .getDiagnostics()));\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DefaultAMSProcessor.java",
          "extendedDetails": {
            "oldValue": "FinishApplicationMasterResponse",
            "newValue": "void"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6777. Support for ApplicationMasterService processing chain of interceptors. (asuresh)\n",
          "commitDate": "19/07/17 12:26 PM",
          "commitName": "077fcf6a96e420e7f36350931722b8603d010cf1",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "10/07/17 2:34 PM",
          "commitNameOld": "5496a34c0cb2b1a83cfa6b0aba5a77b05ff2d8f0",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 8.91,
          "commitsBetweenForRepo": 53,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,14 @@\n-  public FinishApplicationMasterResponse finishApplicationMaster(\n+  public void finishApplicationMaster(\n       ApplicationAttemptId applicationAttemptId,\n-      FinishApplicationMasterRequest request) {\n+      FinishApplicationMasterRequest request,\n+      FinishApplicationMasterResponse response) {\n     RMApp app \u003d\n         getRmContext().getRMApps().get(applicationAttemptId.getApplicationId());\n     // For UnmanagedAMs, return true so they don\u0027t retry\n-    FinishApplicationMasterResponse response \u003d\n-        FinishApplicationMasterResponse.newInstance(\n+    response.setIsUnregistered(\n             app.getApplicationSubmissionContext().getUnmanagedAM());\n     getRmContext().getDispatcher().getEventHandler().handle(\n         new RMAppAttemptUnregistrationEvent(applicationAttemptId, request\n             .getTrackingUrl(), request.getFinalApplicationStatus(), request\n             .getDiagnostics()));\n-    return response;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void finishApplicationMaster(\n      ApplicationAttemptId applicationAttemptId,\n      FinishApplicationMasterRequest request,\n      FinishApplicationMasterResponse response) {\n    RMApp app \u003d\n        getRmContext().getRMApps().get(applicationAttemptId.getApplicationId());\n    // For UnmanagedAMs, return true so they don\u0027t retry\n    response.setIsUnregistered(\n            app.getApplicationSubmissionContext().getUnmanagedAM());\n    getRmContext().getDispatcher().getEventHandler().handle(\n        new RMAppAttemptUnregistrationEvent(applicationAttemptId, request\n            .getTrackingUrl(), request.getFinalApplicationStatus(), request\n            .getDiagnostics()));\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DefaultAMSProcessor.java",
          "extendedDetails": {}
        }
      ]
    },
    "5496a34c0cb2b1a83cfa6b0aba5a77b05ff2d8f0": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6776. Refactor ApplicaitonMasterService to move actual processing logic to a separate class. (asuresh)\n",
      "commitDate": "10/07/17 2:34 PM",
      "commitName": "5496a34c0cb2b1a83cfa6b0aba5a77b05ff2d8f0",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,15 @@\n+  public FinishApplicationMasterResponse finishApplicationMaster(\n+      ApplicationAttemptId applicationAttemptId,\n+      FinishApplicationMasterRequest request) {\n+    RMApp app \u003d\n+        getRmContext().getRMApps().get(applicationAttemptId.getApplicationId());\n+    // For UnmanagedAMs, return true so they don\u0027t retry\n+    FinishApplicationMasterResponse response \u003d\n+        FinishApplicationMasterResponse.newInstance(\n+            app.getApplicationSubmissionContext().getUnmanagedAM());\n+    getRmContext().getDispatcher().getEventHandler().handle(\n+        new RMAppAttemptUnregistrationEvent(applicationAttemptId, request\n+            .getTrackingUrl(), request.getFinalApplicationStatus(), request\n+            .getDiagnostics()));\n+    return response;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public FinishApplicationMasterResponse finishApplicationMaster(\n      ApplicationAttemptId applicationAttemptId,\n      FinishApplicationMasterRequest request) {\n    RMApp app \u003d\n        getRmContext().getRMApps().get(applicationAttemptId.getApplicationId());\n    // For UnmanagedAMs, return true so they don\u0027t retry\n    FinishApplicationMasterResponse response \u003d\n        FinishApplicationMasterResponse.newInstance(\n            app.getApplicationSubmissionContext().getUnmanagedAM());\n    getRmContext().getDispatcher().getEventHandler().handle(\n        new RMAppAttemptUnregistrationEvent(applicationAttemptId, request\n            .getTrackingUrl(), request.getFinalApplicationStatus(), request\n            .getDiagnostics()));\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DefaultAMSProcessor.java"
    }
  }
}