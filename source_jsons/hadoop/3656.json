{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ClientContext.java",
  "functionName": "getNetworkDistance",
  "functionId": "getNetworkDistance___datanodeInfo-DatanodeInfo",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/ClientContext.java",
  "functionStartLine": 276,
  "functionEndLine": 287,
  "numCommitsSeen": 11,
  "timeTaken": 1987,
  "changeHistory": [
    "b061215ecfebe476bf58f70788113d1af816f553",
    "61f46be071e42f9eb49a54b1bd2e54feac59f808",
    "cd8b6889a74a949e37f4b2eb664cdf3b59bfb93b"
  ],
  "changeHistoryShort": {
    "b061215ecfebe476bf58f70788113d1af816f553": "Yexceptionschange",
    "61f46be071e42f9eb49a54b1bd2e54feac59f808": "Ybodychange",
    "cd8b6889a74a949e37f4b2eb664cdf3b59bfb93b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b061215ecfebe476bf58f70788113d1af816f553": {
      "type": "Yexceptionschange",
      "commitMessage": "HDFS-11701. NPE from Unresolved Host causes permanent DFSInputStream failures. Contributed by Lokesh Jain.\n",
      "commitDate": "07/02/18 11:22 AM",
      "commitName": "b061215ecfebe476bf58f70788113d1af816f553",
      "commitAuthor": "Jitendra Pandey",
      "commitDateOld": "16/05/16 6:49 PM",
      "commitNameOld": "61f46be071e42f9eb49a54b1bd2e54feac59f808",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 631.73,
      "commitsBetweenForRepo": 4272,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,12 +1,12 @@\n-  public int getNetworkDistance(DatanodeInfo datanodeInfo) {\n+  public int getNetworkDistance(DatanodeInfo datanodeInfo) throws IOException {\n     // If applications disable the feature or the client machine can\u0027t\n     // resolve its network location, clientNode will be set to null.\n     if (clientNode \u003d\u003d null) {\n       return DFSUtilClient.isLocalAddress(NetUtils.\n           createSocketAddr(datanodeInfo.getXferAddr())) ? 0 :\n           Integer.MAX_VALUE;\n     }\n     NodeBase node \u003d new NodeBase(datanodeInfo.getHostName(),\n         datanodeInfo.getNetworkLocation());\n     return NetworkTopology.getDistanceByPath(clientNode, node);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int getNetworkDistance(DatanodeInfo datanodeInfo) throws IOException {\n    // If applications disable the feature or the client machine can\u0027t\n    // resolve its network location, clientNode will be set to null.\n    if (clientNode \u003d\u003d null) {\n      return DFSUtilClient.isLocalAddress(NetUtils.\n          createSocketAddr(datanodeInfo.getXferAddr())) ? 0 :\n          Integer.MAX_VALUE;\n    }\n    NodeBase node \u003d new NodeBase(datanodeInfo.getHostName(),\n        datanodeInfo.getNetworkLocation());\n    return NetworkTopology.getDistanceByPath(clientNode, node);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/ClientContext.java",
      "extendedDetails": {
        "oldValue": "[]",
        "newValue": "[IOException]"
      }
    },
    "61f46be071e42f9eb49a54b1bd2e54feac59f808": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10208. Addendum for HDFS-9579: to handle the case when client machine can\u0027t resolve network path (Ming Ma via sjlee)\n",
      "commitDate": "16/05/16 6:49 PM",
      "commitName": "61f46be071e42f9eb49a54b1bd2e54feac59f808",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "19/03/16 2:02 PM",
      "commitNameOld": "cd8b6889a74a949e37f4b2eb664cdf3b59bfb93b",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 58.2,
      "commitsBetweenForRepo": 353,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,12 @@\n   public int getNetworkDistance(DatanodeInfo datanodeInfo) {\n+    // If applications disable the feature or the client machine can\u0027t\n+    // resolve its network location, clientNode will be set to null.\n+    if (clientNode \u003d\u003d null) {\n+      return DFSUtilClient.isLocalAddress(NetUtils.\n+          createSocketAddr(datanodeInfo.getXferAddr())) ? 0 :\n+          Integer.MAX_VALUE;\n+    }\n     NodeBase node \u003d new NodeBase(datanodeInfo.getHostName(),\n         datanodeInfo.getNetworkLocation());\n-    Integer distance \u003d nodeToDistance.get(node);\n-    if (distance \u003d\u003d null) {\n-      topology.add(node);\n-      distance \u003d topology.getDistance(clientNode, node);\n-      nodeToDistance.put(node, distance);\n-    }\n-    return distance;\n+    return NetworkTopology.getDistanceByPath(clientNode, node);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int getNetworkDistance(DatanodeInfo datanodeInfo) {\n    // If applications disable the feature or the client machine can\u0027t\n    // resolve its network location, clientNode will be set to null.\n    if (clientNode \u003d\u003d null) {\n      return DFSUtilClient.isLocalAddress(NetUtils.\n          createSocketAddr(datanodeInfo.getXferAddr())) ? 0 :\n          Integer.MAX_VALUE;\n    }\n    NodeBase node \u003d new NodeBase(datanodeInfo.getHostName(),\n        datanodeInfo.getNetworkLocation());\n    return NetworkTopology.getDistanceByPath(clientNode, node);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/ClientContext.java",
      "extendedDetails": {}
    },
    "cd8b6889a74a949e37f4b2eb664cdf3b59bfb93b": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-9579. Provide bytes-read-by-network-distance metrics at FileSystem.Statistics level (Ming Ma via sjlee)\n",
      "commitDate": "19/03/16 2:02 PM",
      "commitName": "cd8b6889a74a949e37f4b2eb664cdf3b59bfb93b",
      "commitAuthor": "Sangjin Lee",
      "diff": "@@ -0,0 +1,11 @@\n+  public int getNetworkDistance(DatanodeInfo datanodeInfo) {\n+    NodeBase node \u003d new NodeBase(datanodeInfo.getHostName(),\n+        datanodeInfo.getNetworkLocation());\n+    Integer distance \u003d nodeToDistance.get(node);\n+    if (distance \u003d\u003d null) {\n+      topology.add(node);\n+      distance \u003d topology.getDistance(clientNode, node);\n+      nodeToDistance.put(node, distance);\n+    }\n+    return distance;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public int getNetworkDistance(DatanodeInfo datanodeInfo) {\n    NodeBase node \u003d new NodeBase(datanodeInfo.getHostName(),\n        datanodeInfo.getNetworkLocation());\n    Integer distance \u003d nodeToDistance.get(node);\n    if (distance \u003d\u003d null) {\n      topology.add(node);\n      distance \u003d topology.getDistance(clientNode, node);\n      nodeToDistance.put(node, distance);\n    }\n    return distance;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/ClientContext.java"
    }
  }
}