{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMContainerTokenSecretManager.java",
  "functionName": "createContainerToken",
  "functionId": "createContainerToken___containerId-ContainerId__containerVersion-int__nodeId-NodeId__appSubmitter-String__capability-Resource__priority-Priority__createTime-long",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/RMContainerTokenSecretManager.java",
  "functionStartLine": 172,
  "functionEndLine": 179,
  "numCommitsSeen": 45,
  "timeTaken": 9071,
  "changeHistory": [
    "a5c1fc881e21ebf43da7ead5f3852808fce25492",
    "a55d0738f1eba225c45578bbdabd0e5a6d6f5392",
    "d6d9cff21b7b6141ed88359652cf22e8973c0661",
    "1ea36299a47af302379ae0750b571ec021eb54ad",
    "1b89a3e173f8e905074ed6714a7be5c003c0e2c4",
    "c86674a3a4d99aa56bb8ed3f6df51e3fef215eba",
    "e285b98f0fe8637b574c52498035f7f11fb4e962",
    "ead3dcc3dea0d5b6d3248c1e1a6300f0714a8456",
    "a2c42330047bf955a6a585dcddf798920d4c8640",
    "b16c5638b5190c56f9d854d873589cb5c11c8b32",
    "6a2f2551fd13f6d3c932cc9b592e2a23b616a7f5",
    "40062e1aaa09628c6f45d20298fd66d799fd1f3f",
    "ffd2e01604be814fa3db1dded7cd7cff26a79b1e",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "3bfb26ad3b5ac46f992a632541c97ca2bc897638"
  ],
  "changeHistoryShort": {
    "a5c1fc881e21ebf43da7ead5f3852808fce25492": "Ybodychange",
    "a55d0738f1eba225c45578bbdabd0e5a6d6f5392": "Ybodychange",
    "d6d9cff21b7b6141ed88359652cf22e8973c0661": "Ymultichange(Yparameterchange,Ybodychange)",
    "1ea36299a47af302379ae0750b571ec021eb54ad": "Ybodychange",
    "1b89a3e173f8e905074ed6714a7be5c003c0e2c4": "Ybodychange",
    "c86674a3a4d99aa56bb8ed3f6df51e3fef215eba": "Ybodychange",
    "e285b98f0fe8637b574c52498035f7f11fb4e962": "Ymultichange(Yparameterchange,Ybodychange)",
    "ead3dcc3dea0d5b6d3248c1e1a6300f0714a8456": "Ybodychange",
    "a2c42330047bf955a6a585dcddf798920d4c8640": "Yreturntypechange",
    "b16c5638b5190c56f9d854d873589cb5c11c8b32": "Ymultichange(Ymovefromfile,Ybodychange)",
    "6a2f2551fd13f6d3c932cc9b592e2a23b616a7f5": "Ybodychange",
    "40062e1aaa09628c6f45d20298fd66d799fd1f3f": "Ymultichange(Yparameterchange,Ybodychange)",
    "ffd2e01604be814fa3db1dded7cd7cff26a79b1e": "Ymultichange(Ymovefromfile,Ybodychange)",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "3bfb26ad3b5ac46f992a632541c97ca2bc897638": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a5c1fc881e21ebf43da7ead5f3852808fce25492": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7696. Add container tags to ContainerTokenIdentifier, api.Container and NMContainerStatus to handle all recovery cases. (asuresh)\n",
      "commitDate": "31/01/18 1:30 AM",
      "commitName": "a5c1fc881e21ebf43da7ead5f3852808fce25492",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "a55d0738f1eba225c45578bbdabd0e5a6d6f5392",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 85.5,
      "commitsBetweenForRepo": 473,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,8 +1,8 @@\n   public Token createContainerToken(ContainerId containerId,\n       int containerVersion, NodeId nodeId, String appSubmitter,\n       Resource capability, Priority priority, long createTime) {\n     return createContainerToken(containerId, containerVersion, nodeId,\n         appSubmitter, capability, priority, createTime,\n         null, null, ContainerType.TASK,\n-        ExecutionType.GUARANTEED, -1);\n+        ExecutionType.GUARANTEED, -1, null);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Token createContainerToken(ContainerId containerId,\n      int containerVersion, NodeId nodeId, String appSubmitter,\n      Resource capability, Priority priority, long createTime) {\n    return createContainerToken(containerId, containerVersion, nodeId,\n        appSubmitter, capability, priority, createTime,\n        null, null, ContainerType.TASK,\n        ExecutionType.GUARANTEED, -1, null);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/RMContainerTokenSecretManager.java",
      "extendedDetails": {}
    },
    "a55d0738f1eba225c45578bbdabd0e5a6d6f5392": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7371. Added allocateRequestId in NMContainerStatus for recovery. Contributed by Chandni Singh\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "a55d0738f1eba225c45578bbdabd0e5a6d6f5392",
      "commitAuthor": "Jian He",
      "commitDateOld": "14/08/17 7:46 PM",
      "commitNameOld": "4d7be1d8575e9254c59d41460960708e3718503a",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 83.78,
      "commitsBetweenForRepo": 791,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,7 +1,8 @@\n   public Token createContainerToken(ContainerId containerId,\n       int containerVersion, NodeId nodeId, String appSubmitter,\n       Resource capability, Priority priority, long createTime) {\n     return createContainerToken(containerId, containerVersion, nodeId,\n         appSubmitter, capability, priority, createTime,\n-        null, null, ContainerType.TASK);\n+        null, null, ContainerType.TASK,\n+        ExecutionType.GUARANTEED, -1);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Token createContainerToken(ContainerId containerId,\n      int containerVersion, NodeId nodeId, String appSubmitter,\n      Resource capability, Priority priority, long createTime) {\n    return createContainerToken(containerId, containerVersion, nodeId,\n        appSubmitter, capability, priority, createTime,\n        null, null, ContainerType.TASK,\n        ExecutionType.GUARANTEED, -1);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/RMContainerTokenSecretManager.java",
      "extendedDetails": {}
    },
    "d6d9cff21b7b6141ed88359652cf22e8973c0661": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5221. Expose UpdateResourceRequest API to allow AM to request for change in container properties. (asuresh)\n",
      "commitDate": "30/08/16 3:52 PM",
      "commitName": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5221. Expose UpdateResourceRequest API to allow AM to request for change in container properties. (asuresh)\n",
          "commitDate": "30/08/16 3:52 PM",
          "commitName": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "10/07/15 6:58 PM",
          "commitNameOld": "1ea36299a47af302379ae0750b571ec021eb54ad",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 416.87,
          "commitsBetweenForRepo": 2881,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,6 +1,7 @@\n-  public Token createContainerToken(ContainerId containerId, NodeId nodeId,\n-      String appSubmitter, Resource capability, Priority priority,\n-      long createTime) {\n-    return createContainerToken(containerId, nodeId, appSubmitter, capability,\n-      priority, createTime, null, null, ContainerType.TASK);\n+  public Token createContainerToken(ContainerId containerId,\n+      int containerVersion, NodeId nodeId, String appSubmitter,\n+      Resource capability, Priority priority, long createTime) {\n+    return createContainerToken(containerId, containerVersion, nodeId,\n+        appSubmitter, capability, priority, createTime,\n+        null, null, ContainerType.TASK);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Token createContainerToken(ContainerId containerId,\n      int containerVersion, NodeId nodeId, String appSubmitter,\n      Resource capability, Priority priority, long createTime) {\n    return createContainerToken(containerId, containerVersion, nodeId,\n        appSubmitter, capability, priority, createTime,\n        null, null, ContainerType.TASK);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/RMContainerTokenSecretManager.java",
          "extendedDetails": {
            "oldValue": "[containerId-ContainerId, nodeId-NodeId, appSubmitter-String, capability-Resource, priority-Priority, createTime-long]",
            "newValue": "[containerId-ContainerId, containerVersion-int, nodeId-NodeId, appSubmitter-String, capability-Resource, priority-Priority, createTime-long]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5221. Expose UpdateResourceRequest API to allow AM to request for change in container properties. (asuresh)\n",
          "commitDate": "30/08/16 3:52 PM",
          "commitName": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "10/07/15 6:58 PM",
          "commitNameOld": "1ea36299a47af302379ae0750b571ec021eb54ad",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 416.87,
          "commitsBetweenForRepo": 2881,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,6 +1,7 @@\n-  public Token createContainerToken(ContainerId containerId, NodeId nodeId,\n-      String appSubmitter, Resource capability, Priority priority,\n-      long createTime) {\n-    return createContainerToken(containerId, nodeId, appSubmitter, capability,\n-      priority, createTime, null, null, ContainerType.TASK);\n+  public Token createContainerToken(ContainerId containerId,\n+      int containerVersion, NodeId nodeId, String appSubmitter,\n+      Resource capability, Priority priority, long createTime) {\n+    return createContainerToken(containerId, containerVersion, nodeId,\n+        appSubmitter, capability, priority, createTime,\n+        null, null, ContainerType.TASK);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Token createContainerToken(ContainerId containerId,\n      int containerVersion, NodeId nodeId, String appSubmitter,\n      Resource capability, Priority priority, long createTime) {\n    return createContainerToken(containerId, containerVersion, nodeId,\n        appSubmitter, capability, priority, createTime,\n        null, null, ContainerType.TASK);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/RMContainerTokenSecretManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "1ea36299a47af302379ae0750b571ec021eb54ad": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3116. RM notifies NM whether a container is an AM container or normal task container. Contributed by Giovanni Matteo Fumarola.\n",
      "commitDate": "10/07/15 6:58 PM",
      "commitName": "1ea36299a47af302379ae0750b571ec021eb54ad",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "15/04/15 1:57 PM",
      "commitNameOld": "1b89a3e173f8e905074ed6714a7be5c003c0e2c4",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 86.21,
      "commitsBetweenForRepo": 733,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,6 +1,6 @@\n   public Token createContainerToken(ContainerId containerId, NodeId nodeId,\n       String appSubmitter, Resource capability, Priority priority,\n       long createTime) {\n     return createContainerToken(containerId, nodeId, appSubmitter, capability,\n-      priority, createTime, null, null);\n+      priority, createTime, null, null, ContainerType.TASK);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Token createContainerToken(ContainerId containerId, NodeId nodeId,\n      String appSubmitter, Resource capability, Priority priority,\n      long createTime) {\n    return createContainerToken(containerId, nodeId, appSubmitter, capability,\n      priority, createTime, null, null, ContainerType.TASK);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/RMContainerTokenSecretManager.java",
      "extendedDetails": {}
    },
    "1b89a3e173f8e905074ed6714a7be5c003c0e2c4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3354. Add node label expression in ContainerTokenIdentifier to support RM recovery. Contributed by Wangda Tan\n",
      "commitDate": "15/04/15 1:57 PM",
      "commitName": "1b89a3e173f8e905074ed6714a7be5c003c0e2c4",
      "commitAuthor": "Jian He",
      "commitDateOld": "03/02/15 6:41 PM",
      "commitNameOld": "26dee1486b70237a2a47f910472e9aa81ffad349",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 70.76,
      "commitsBetweenForRepo": 674,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,6 +1,6 @@\n   public Token createContainerToken(ContainerId containerId, NodeId nodeId,\n       String appSubmitter, Resource capability, Priority priority,\n       long createTime) {\n     return createContainerToken(containerId, nodeId, appSubmitter, capability,\n-      priority, createTime, null);\n+      priority, createTime, null, null);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Token createContainerToken(ContainerId containerId, NodeId nodeId,\n      String appSubmitter, Resource capability, Priority priority,\n      long createTime) {\n    return createContainerToken(containerId, nodeId, appSubmitter, capability,\n      priority, createTime, null, null);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/RMContainerTokenSecretManager.java",
      "extendedDetails": {}
    },
    "c86674a3a4d99aa56bb8ed3f6df51e3fef215eba": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2581. Passed LogAggregationContext to NM via ContainerTokenIdentifier. Contributed by Xuan Gong.\n",
      "commitDate": "24/09/14 5:50 PM",
      "commitName": "c86674a3a4d99aa56bb8ed3f6df51e3fef215eba",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "24/06/14 2:43 PM",
      "commitNameOld": "e285b98f0fe8637b574c52498035f7f11fb4e962",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 92.13,
      "commitsBetweenForRepo": 825,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,6 @@\n   public Token createContainerToken(ContainerId containerId, NodeId nodeId,\n       String appSubmitter, Resource capability, Priority priority,\n       long createTime) {\n-    byte[] password;\n-    ContainerTokenIdentifier tokenIdentifier;\n-    long expiryTimeStamp \u003d\n-        System.currentTimeMillis() + containerTokenExpiryInterval;\n-\n-    // Lock so that we use the same MasterKey\u0027s keyId and its bytes\n-    this.readLock.lock();\n-    try {\n-      tokenIdentifier \u003d\n-          new ContainerTokenIdentifier(containerId, nodeId.toString(),\n-            appSubmitter, capability, expiryTimeStamp, this.currentMasterKey\n-              .getMasterKey().getKeyId(),\n-            ResourceManager.getClusterTimeStamp(), priority, createTime);\n-      password \u003d this.createPassword(tokenIdentifier);\n-\n-    } finally {\n-      this.readLock.unlock();\n-    }\n-\n-    return BuilderUtils.newContainerToken(nodeId, password, tokenIdentifier);\n+    return createContainerToken(containerId, nodeId, appSubmitter, capability,\n+      priority, createTime, null);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Token createContainerToken(ContainerId containerId, NodeId nodeId,\n      String appSubmitter, Resource capability, Priority priority,\n      long createTime) {\n    return createContainerToken(containerId, nodeId, appSubmitter, capability,\n      priority, createTime, null);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/RMContainerTokenSecretManager.java",
      "extendedDetails": {}
    },
    "e285b98f0fe8637b574c52498035f7f11fb4e962": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-2152. Added missing information into ContainerTokenIdentifier so that NodeManagers can report the same to RM when RM restarts. Contributed Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1605205 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/06/14 2:43 PM",
      "commitName": "e285b98f0fe8637b574c52498035f7f11fb4e962",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-2152. Added missing information into ContainerTokenIdentifier so that NodeManagers can report the same to RM when RM restarts. Contributed Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1605205 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "24/06/14 2:43 PM",
          "commitName": "e285b98f0fe8637b574c52498035f7f11fb4e962",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "16/09/13 11:33 AM",
          "commitNameOld": "ead3dcc3dea0d5b6d3248c1e1a6300f0714a8456",
          "commitAuthorOld": "Bikas Saha",
          "daysBetweenCommits": 281.13,
          "commitsBetweenForRepo": 1903,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,24 @@\n-      createContainerToken(ContainerId containerId, NodeId nodeId,\n-          String appSubmitter, Resource capability) {\n+  public Token createContainerToken(ContainerId containerId, NodeId nodeId,\n+      String appSubmitter, Resource capability, Priority priority,\n+      long createTime) {\n     byte[] password;\n     ContainerTokenIdentifier tokenIdentifier;\n     long expiryTimeStamp \u003d\n         System.currentTimeMillis() + containerTokenExpiryInterval;\n \n     // Lock so that we use the same MasterKey\u0027s keyId and its bytes\n     this.readLock.lock();\n     try {\n       tokenIdentifier \u003d\n           new ContainerTokenIdentifier(containerId, nodeId.toString(),\n             appSubmitter, capability, expiryTimeStamp, this.currentMasterKey\n-              .getMasterKey().getKeyId(), ResourceManager.getClusterTimeStamp());\n+              .getMasterKey().getKeyId(),\n+            ResourceManager.getClusterTimeStamp(), priority, createTime);\n       password \u003d this.createPassword(tokenIdentifier);\n \n     } finally {\n       this.readLock.unlock();\n     }\n \n     return BuilderUtils.newContainerToken(nodeId, password, tokenIdentifier);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Token createContainerToken(ContainerId containerId, NodeId nodeId,\n      String appSubmitter, Resource capability, Priority priority,\n      long createTime) {\n    byte[] password;\n    ContainerTokenIdentifier tokenIdentifier;\n    long expiryTimeStamp \u003d\n        System.currentTimeMillis() + containerTokenExpiryInterval;\n\n    // Lock so that we use the same MasterKey\u0027s keyId and its bytes\n    this.readLock.lock();\n    try {\n      tokenIdentifier \u003d\n          new ContainerTokenIdentifier(containerId, nodeId.toString(),\n            appSubmitter, capability, expiryTimeStamp, this.currentMasterKey\n              .getMasterKey().getKeyId(),\n            ResourceManager.getClusterTimeStamp(), priority, createTime);\n      password \u003d this.createPassword(tokenIdentifier);\n\n    } finally {\n      this.readLock.unlock();\n    }\n\n    return BuilderUtils.newContainerToken(nodeId, password, tokenIdentifier);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/RMContainerTokenSecretManager.java",
          "extendedDetails": {
            "oldValue": "[containerId-ContainerId, nodeId-NodeId, appSubmitter-String, capability-Resource]",
            "newValue": "[containerId-ContainerId, nodeId-NodeId, appSubmitter-String, capability-Resource, priority-Priority, createTime-long]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2152. Added missing information into ContainerTokenIdentifier so that NodeManagers can report the same to RM when RM restarts. Contributed Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1605205 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "24/06/14 2:43 PM",
          "commitName": "e285b98f0fe8637b574c52498035f7f11fb4e962",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "16/09/13 11:33 AM",
          "commitNameOld": "ead3dcc3dea0d5b6d3248c1e1a6300f0714a8456",
          "commitAuthorOld": "Bikas Saha",
          "daysBetweenCommits": 281.13,
          "commitsBetweenForRepo": 1903,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,24 @@\n-      createContainerToken(ContainerId containerId, NodeId nodeId,\n-          String appSubmitter, Resource capability) {\n+  public Token createContainerToken(ContainerId containerId, NodeId nodeId,\n+      String appSubmitter, Resource capability, Priority priority,\n+      long createTime) {\n     byte[] password;\n     ContainerTokenIdentifier tokenIdentifier;\n     long expiryTimeStamp \u003d\n         System.currentTimeMillis() + containerTokenExpiryInterval;\n \n     // Lock so that we use the same MasterKey\u0027s keyId and its bytes\n     this.readLock.lock();\n     try {\n       tokenIdentifier \u003d\n           new ContainerTokenIdentifier(containerId, nodeId.toString(),\n             appSubmitter, capability, expiryTimeStamp, this.currentMasterKey\n-              .getMasterKey().getKeyId(), ResourceManager.getClusterTimeStamp());\n+              .getMasterKey().getKeyId(),\n+            ResourceManager.getClusterTimeStamp(), priority, createTime);\n       password \u003d this.createPassword(tokenIdentifier);\n \n     } finally {\n       this.readLock.unlock();\n     }\n \n     return BuilderUtils.newContainerToken(nodeId, password, tokenIdentifier);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Token createContainerToken(ContainerId containerId, NodeId nodeId,\n      String appSubmitter, Resource capability, Priority priority,\n      long createTime) {\n    byte[] password;\n    ContainerTokenIdentifier tokenIdentifier;\n    long expiryTimeStamp \u003d\n        System.currentTimeMillis() + containerTokenExpiryInterval;\n\n    // Lock so that we use the same MasterKey\u0027s keyId and its bytes\n    this.readLock.lock();\n    try {\n      tokenIdentifier \u003d\n          new ContainerTokenIdentifier(containerId, nodeId.toString(),\n            appSubmitter, capability, expiryTimeStamp, this.currentMasterKey\n              .getMasterKey().getKeyId(),\n            ResourceManager.getClusterTimeStamp(), priority, createTime);\n      password \u003d this.createPassword(tokenIdentifier);\n\n    } finally {\n      this.readLock.unlock();\n    }\n\n    return BuilderUtils.newContainerToken(nodeId, password, tokenIdentifier);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/RMContainerTokenSecretManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "ead3dcc3dea0d5b6d3248c1e1a6300f0714a8456": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1027. Implement RMHAProtocolService (Karthik Kambatla via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1523750 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/09/13 11:33 AM",
      "commitName": "ead3dcc3dea0d5b6d3248c1e1a6300f0714a8456",
      "commitAuthor": "Bikas Saha",
      "commitDateOld": "13/06/13 5:06 PM",
      "commitNameOld": "f0eb4bc342370ec87d1f2665ffaf48ff4b3fbacb",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 94.77,
      "commitsBetweenForRepo": 551,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n       createContainerToken(ContainerId containerId, NodeId nodeId,\n           String appSubmitter, Resource capability) {\n     byte[] password;\n     ContainerTokenIdentifier tokenIdentifier;\n     long expiryTimeStamp \u003d\n         System.currentTimeMillis() + containerTokenExpiryInterval;\n \n     // Lock so that we use the same MasterKey\u0027s keyId and its bytes\n     this.readLock.lock();\n     try {\n       tokenIdentifier \u003d\n           new ContainerTokenIdentifier(containerId, nodeId.toString(),\n             appSubmitter, capability, expiryTimeStamp, this.currentMasterKey\n-              .getMasterKey().getKeyId(), ResourceManager.clusterTimeStamp);\n+              .getMasterKey().getKeyId(), ResourceManager.getClusterTimeStamp());\n       password \u003d this.createPassword(tokenIdentifier);\n \n     } finally {\n       this.readLock.unlock();\n     }\n \n     return BuilderUtils.newContainerToken(nodeId, password, tokenIdentifier);\n   }\n\\ No newline at end of file\n",
      "actualSource": "      createContainerToken(ContainerId containerId, NodeId nodeId,\n          String appSubmitter, Resource capability) {\n    byte[] password;\n    ContainerTokenIdentifier tokenIdentifier;\n    long expiryTimeStamp \u003d\n        System.currentTimeMillis() + containerTokenExpiryInterval;\n\n    // Lock so that we use the same MasterKey\u0027s keyId and its bytes\n    this.readLock.lock();\n    try {\n      tokenIdentifier \u003d\n          new ContainerTokenIdentifier(containerId, nodeId.toString(),\n            appSubmitter, capability, expiryTimeStamp, this.currentMasterKey\n              .getMasterKey().getKeyId(), ResourceManager.getClusterTimeStamp());\n      password \u003d this.createPassword(tokenIdentifier);\n\n    } finally {\n      this.readLock.unlock();\n    }\n\n    return BuilderUtils.newContainerToken(nodeId, password, tokenIdentifier);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/RMContainerTokenSecretManager.java",
      "extendedDetails": {}
    },
    "a2c42330047bf955a6a585dcddf798920d4c8640": {
      "type": "Yreturntypechange",
      "commitMessage": "YARN-717. Put object creation factories for Token in the class itself and remove useless derivations for specific tokens. Contributed by Jian He.\nMAPREDUCE-5289. Updated MR App to use Token directly after YARN-717. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1488616 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/06/13 2:43 PM",
      "commitName": "a2c42330047bf955a6a585dcddf798920d4c8640",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "29/05/13 9:59 PM",
      "commitNameOld": "b16c5638b5190c56f9d854d873589cb5c11c8b32",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 2.7,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "      createContainerToken(ContainerId containerId, NodeId nodeId,\n          String appSubmitter, Resource capability) {\n    byte[] password;\n    ContainerTokenIdentifier tokenIdentifier;\n    long expiryTimeStamp \u003d\n        System.currentTimeMillis() + containerTokenExpiryInterval;\n\n    // Lock so that we use the same MasterKey\u0027s keyId and its bytes\n    this.readLock.lock();\n    try {\n      tokenIdentifier \u003d\n          new ContainerTokenIdentifier(containerId, nodeId.toString(),\n            appSubmitter, capability, expiryTimeStamp, this.currentMasterKey\n              .getMasterKey().getKeyId(), ResourceManager.clusterTimeStamp);\n      password \u003d this.createPassword(tokenIdentifier);\n\n    } finally {\n      this.readLock.unlock();\n    }\n\n    return BuilderUtils.newContainerToken(nodeId, password, tokenIdentifier);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/RMContainerTokenSecretManager.java",
      "extendedDetails": {
        "oldValue": "ContainerToken",
        "newValue": "Token"
      }
    },
    "b16c5638b5190c56f9d854d873589cb5c11c8b32": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "YARN-719. Move RMIdentifier from Container to ContainerTokenIdentifier. Contributed by Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1487741 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/05/13 9:59 PM",
      "commitName": "b16c5638b5190c56f9d854d873589cb5c11c8b32",
      "commitAuthor": "Siddharth Seth",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-719. Move RMIdentifier from Container to ContainerTokenIdentifier. Contributed by Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1487741 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "29/05/13 9:59 PM",
          "commitName": "b16c5638b5190c56f9d854d873589cb5c11c8b32",
          "commitAuthor": "Siddharth Seth",
          "commitDateOld": "29/05/13 9:21 PM",
          "commitNameOld": "9ae713ef58d4defb746b5ba9dfbcaf5ee0656a8a",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,22 @@\n-  public ContainerToken createContainerToken(ContainerId containerId,\n-      NodeId nodeId, String appSubmitter, Resource capability) {\n+      createContainerToken(ContainerId containerId, NodeId nodeId,\n+          String appSubmitter, Resource capability) {\n     byte[] password;\n     ContainerTokenIdentifier tokenIdentifier;\n     long expiryTimeStamp \u003d\n         System.currentTimeMillis() + containerTokenExpiryInterval;\n \n     // Lock so that we use the same MasterKey\u0027s keyId and its bytes\n     this.readLock.lock();\n     try {\n       tokenIdentifier \u003d\n           new ContainerTokenIdentifier(containerId, nodeId.toString(),\n             appSubmitter, capability, expiryTimeStamp, this.currentMasterKey\n-              .getMasterKey().getKeyId());\n+              .getMasterKey().getKeyId(), ResourceManager.clusterTimeStamp);\n       password \u003d this.createPassword(tokenIdentifier);\n \n     } finally {\n       this.readLock.unlock();\n     }\n \n     return BuilderUtils.newContainerToken(nodeId, password, tokenIdentifier);\n   }\n\\ No newline at end of file\n",
          "actualSource": "      createContainerToken(ContainerId containerId, NodeId nodeId,\n          String appSubmitter, Resource capability) {\n    byte[] password;\n    ContainerTokenIdentifier tokenIdentifier;\n    long expiryTimeStamp \u003d\n        System.currentTimeMillis() + containerTokenExpiryInterval;\n\n    // Lock so that we use the same MasterKey\u0027s keyId and its bytes\n    this.readLock.lock();\n    try {\n      tokenIdentifier \u003d\n          new ContainerTokenIdentifier(containerId, nodeId.toString(),\n            appSubmitter, capability, expiryTimeStamp, this.currentMasterKey\n              .getMasterKey().getKeyId(), ResourceManager.clusterTimeStamp);\n      password \u003d this.createPassword(tokenIdentifier);\n\n    } finally {\n      this.readLock.unlock();\n    }\n\n    return BuilderUtils.newContainerToken(nodeId, password, tokenIdentifier);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/RMContainerTokenSecretManager.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/security/BaseContainerTokenSecretManager.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/RMContainerTokenSecretManager.java",
            "oldMethodName": "createContainerToken",
            "newMethodName": "createContainerToken"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-719. Move RMIdentifier from Container to ContainerTokenIdentifier. Contributed by Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1487741 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "29/05/13 9:59 PM",
          "commitName": "b16c5638b5190c56f9d854d873589cb5c11c8b32",
          "commitAuthor": "Siddharth Seth",
          "commitDateOld": "29/05/13 9:21 PM",
          "commitNameOld": "9ae713ef58d4defb746b5ba9dfbcaf5ee0656a8a",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,22 @@\n-  public ContainerToken createContainerToken(ContainerId containerId,\n-      NodeId nodeId, String appSubmitter, Resource capability) {\n+      createContainerToken(ContainerId containerId, NodeId nodeId,\n+          String appSubmitter, Resource capability) {\n     byte[] password;\n     ContainerTokenIdentifier tokenIdentifier;\n     long expiryTimeStamp \u003d\n         System.currentTimeMillis() + containerTokenExpiryInterval;\n \n     // Lock so that we use the same MasterKey\u0027s keyId and its bytes\n     this.readLock.lock();\n     try {\n       tokenIdentifier \u003d\n           new ContainerTokenIdentifier(containerId, nodeId.toString(),\n             appSubmitter, capability, expiryTimeStamp, this.currentMasterKey\n-              .getMasterKey().getKeyId());\n+              .getMasterKey().getKeyId(), ResourceManager.clusterTimeStamp);\n       password \u003d this.createPassword(tokenIdentifier);\n \n     } finally {\n       this.readLock.unlock();\n     }\n \n     return BuilderUtils.newContainerToken(nodeId, password, tokenIdentifier);\n   }\n\\ No newline at end of file\n",
          "actualSource": "      createContainerToken(ContainerId containerId, NodeId nodeId,\n          String appSubmitter, Resource capability) {\n    byte[] password;\n    ContainerTokenIdentifier tokenIdentifier;\n    long expiryTimeStamp \u003d\n        System.currentTimeMillis() + containerTokenExpiryInterval;\n\n    // Lock so that we use the same MasterKey\u0027s keyId and its bytes\n    this.readLock.lock();\n    try {\n      tokenIdentifier \u003d\n          new ContainerTokenIdentifier(containerId, nodeId.toString(),\n            appSubmitter, capability, expiryTimeStamp, this.currentMasterKey\n              .getMasterKey().getKeyId(), ResourceManager.clusterTimeStamp);\n      password \u003d this.createPassword(tokenIdentifier);\n\n    } finally {\n      this.readLock.unlock();\n    }\n\n    return BuilderUtils.newContainerToken(nodeId, password, tokenIdentifier);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/RMContainerTokenSecretManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "6a2f2551fd13f6d3c932cc9b592e2a23b616a7f5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-135. Client tokens should be per app-attempt, and should be unregistered on App-finish. Contributed by Vinod Kumar Vavilapalli\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1433570 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/01/13 10:33 AM",
      "commitName": "6a2f2551fd13f6d3c932cc9b592e2a23b616a7f5",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "26/09/12 8:43 PM",
      "commitNameOld": "40062e1aaa09628c6f45d20298fd66d799fd1f3f",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 110.62,
      "commitsBetweenForRepo": 542,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,22 @@\n   public ContainerToken createContainerToken(ContainerId containerId,\n       NodeId nodeId, String appSubmitter, Resource capability) {\n     byte[] password;\n     ContainerTokenIdentifier tokenIdentifier;\n     long expiryTimeStamp \u003d\n         System.currentTimeMillis() + containerTokenExpiryInterval;\n \n     // Lock so that we use the same MasterKey\u0027s keyId and its bytes\n     this.readLock.lock();\n     try {\n       tokenIdentifier \u003d\n           new ContainerTokenIdentifier(containerId, nodeId.toString(),\n             appSubmitter, capability, expiryTimeStamp, this.currentMasterKey\n               .getMasterKey().getKeyId());\n       password \u003d this.createPassword(tokenIdentifier);\n \n     } finally {\n       this.readLock.unlock();\n     }\n \n-    return BuilderUtils.newContainerToken(nodeId, ByteBuffer.wrap(password),\n-      tokenIdentifier);\n+    return BuilderUtils.newContainerToken(nodeId, password, tokenIdentifier);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ContainerToken createContainerToken(ContainerId containerId,\n      NodeId nodeId, String appSubmitter, Resource capability) {\n    byte[] password;\n    ContainerTokenIdentifier tokenIdentifier;\n    long expiryTimeStamp \u003d\n        System.currentTimeMillis() + containerTokenExpiryInterval;\n\n    // Lock so that we use the same MasterKey\u0027s keyId and its bytes\n    this.readLock.lock();\n    try {\n      tokenIdentifier \u003d\n          new ContainerTokenIdentifier(containerId, nodeId.toString(),\n            appSubmitter, capability, expiryTimeStamp, this.currentMasterKey\n              .getMasterKey().getKeyId());\n      password \u003d this.createPassword(tokenIdentifier);\n\n    } finally {\n      this.readLock.unlock();\n    }\n\n    return BuilderUtils.newContainerToken(nodeId, password, tokenIdentifier);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/security/BaseContainerTokenSecretManager.java",
      "extendedDetails": {}
    },
    "40062e1aaa09628c6f45d20298fd66d799fd1f3f": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Fix NodeManager to verify the application\u0027s user-name.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1390825 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/09/12 8:43 PM",
      "commitName": "40062e1aaa09628c6f45d20298fd66d799fd1f3f",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Fix NodeManager to verify the application\u0027s user-name.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1390825 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "26/09/12 8:43 PM",
          "commitName": "40062e1aaa09628c6f45d20298fd66d799fd1f3f",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "24/08/12 7:18 PM",
          "commitNameOld": "ffd2e01604be814fa3db1dded7cd7cff26a79b1e",
          "commitAuthorOld": "Siddharth Seth",
          "daysBetweenCommits": 33.06,
          "commitsBetweenForRepo": 173,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,23 @@\n   public ContainerToken createContainerToken(ContainerId containerId,\n-      NodeId nodeId, Resource capability) {\n+      NodeId nodeId, String appSubmitter, Resource capability) {\n     byte[] password;\n     ContainerTokenIdentifier tokenIdentifier;\n     long expiryTimeStamp \u003d\n         System.currentTimeMillis() + containerTokenExpiryInterval;\n \n     // Lock so that we use the same MasterKey\u0027s keyId and its bytes\n     this.readLock.lock();\n     try {\n       tokenIdentifier \u003d\n           new ContainerTokenIdentifier(containerId, nodeId.toString(),\n-            capability, expiryTimeStamp, this.currentMasterKey.getMasterKey()\n-              .getKeyId());\n+            appSubmitter, capability, expiryTimeStamp, this.currentMasterKey\n+              .getMasterKey().getKeyId());\n       password \u003d this.createPassword(tokenIdentifier);\n \n     } finally {\n       this.readLock.unlock();\n     }\n \n     return BuilderUtils.newContainerToken(nodeId, ByteBuffer.wrap(password),\n       tokenIdentifier);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ContainerToken createContainerToken(ContainerId containerId,\n      NodeId nodeId, String appSubmitter, Resource capability) {\n    byte[] password;\n    ContainerTokenIdentifier tokenIdentifier;\n    long expiryTimeStamp \u003d\n        System.currentTimeMillis() + containerTokenExpiryInterval;\n\n    // Lock so that we use the same MasterKey\u0027s keyId and its bytes\n    this.readLock.lock();\n    try {\n      tokenIdentifier \u003d\n          new ContainerTokenIdentifier(containerId, nodeId.toString(),\n            appSubmitter, capability, expiryTimeStamp, this.currentMasterKey\n              .getMasterKey().getKeyId());\n      password \u003d this.createPassword(tokenIdentifier);\n\n    } finally {\n      this.readLock.unlock();\n    }\n\n    return BuilderUtils.newContainerToken(nodeId, ByteBuffer.wrap(password),\n      tokenIdentifier);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/security/BaseContainerTokenSecretManager.java",
          "extendedDetails": {
            "oldValue": "[containerId-ContainerId, nodeId-NodeId, capability-Resource]",
            "newValue": "[containerId-ContainerId, nodeId-NodeId, appSubmitter-String, capability-Resource]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Fix NodeManager to verify the application\u0027s user-name.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1390825 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "26/09/12 8:43 PM",
          "commitName": "40062e1aaa09628c6f45d20298fd66d799fd1f3f",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "24/08/12 7:18 PM",
          "commitNameOld": "ffd2e01604be814fa3db1dded7cd7cff26a79b1e",
          "commitAuthorOld": "Siddharth Seth",
          "daysBetweenCommits": 33.06,
          "commitsBetweenForRepo": 173,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,23 @@\n   public ContainerToken createContainerToken(ContainerId containerId,\n-      NodeId nodeId, Resource capability) {\n+      NodeId nodeId, String appSubmitter, Resource capability) {\n     byte[] password;\n     ContainerTokenIdentifier tokenIdentifier;\n     long expiryTimeStamp \u003d\n         System.currentTimeMillis() + containerTokenExpiryInterval;\n \n     // Lock so that we use the same MasterKey\u0027s keyId and its bytes\n     this.readLock.lock();\n     try {\n       tokenIdentifier \u003d\n           new ContainerTokenIdentifier(containerId, nodeId.toString(),\n-            capability, expiryTimeStamp, this.currentMasterKey.getMasterKey()\n-              .getKeyId());\n+            appSubmitter, capability, expiryTimeStamp, this.currentMasterKey\n+              .getMasterKey().getKeyId());\n       password \u003d this.createPassword(tokenIdentifier);\n \n     } finally {\n       this.readLock.unlock();\n     }\n \n     return BuilderUtils.newContainerToken(nodeId, ByteBuffer.wrap(password),\n       tokenIdentifier);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ContainerToken createContainerToken(ContainerId containerId,\n      NodeId nodeId, String appSubmitter, Resource capability) {\n    byte[] password;\n    ContainerTokenIdentifier tokenIdentifier;\n    long expiryTimeStamp \u003d\n        System.currentTimeMillis() + containerTokenExpiryInterval;\n\n    // Lock so that we use the same MasterKey\u0027s keyId and its bytes\n    this.readLock.lock();\n    try {\n      tokenIdentifier \u003d\n          new ContainerTokenIdentifier(containerId, nodeId.toString(),\n            appSubmitter, capability, expiryTimeStamp, this.currentMasterKey\n              .getMasterKey().getKeyId());\n      password \u003d this.createPassword(tokenIdentifier);\n\n    } finally {\n      this.readLock.unlock();\n    }\n\n    return BuilderUtils.newContainerToken(nodeId, ByteBuffer.wrap(password),\n      tokenIdentifier);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/security/BaseContainerTokenSecretManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "ffd2e01604be814fa3db1dded7cd7cff26a79b1e": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "YARN-39. RM-NM secret-keys should be randomly generated and rolled every so often. (Contributed by Vinod Kumar Vavilapalli and Siddharth Seth)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1377180 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/12 7:18 PM",
      "commitName": "ffd2e01604be814fa3db1dded7cd7cff26a79b1e",
      "commitAuthor": "Siddharth Seth",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-39. RM-NM secret-keys should be randomly generated and rolled every so often. (Contributed by Vinod Kumar Vavilapalli and Siddharth Seth)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1377180 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "24/08/12 7:18 PM",
          "commitName": "ffd2e01604be814fa3db1dded7cd7cff26a79b1e",
          "commitAuthor": "Siddharth Seth",
          "commitDateOld": "24/08/12 6:03 PM",
          "commitNameOld": "deead78e35b0cb81af875b5a8032cbd06c9a2dae",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,23 @@\n   public ContainerToken createContainerToken(ContainerId containerId,\n       NodeId nodeId, Resource capability) {\n+    byte[] password;\n+    ContainerTokenIdentifier tokenIdentifier;\n+    long expiryTimeStamp \u003d\n+        System.currentTimeMillis() + containerTokenExpiryInterval;\n+\n+    // Lock so that we use the same MasterKey\u0027s keyId and its bytes\n+    this.readLock.lock();\n     try {\n-      long expiryTimeStamp \u003d\n-          System.currentTimeMillis() + containerTokenExpiryInterval;\n-      ContainerTokenIdentifier tokenIdentifier \u003d\n+      tokenIdentifier \u003d\n           new ContainerTokenIdentifier(containerId, nodeId.toString(),\n-            capability, expiryTimeStamp);\n-      return BuilderUtils.newContainerToken(nodeId,\n-        ByteBuffer.wrap(this.createPassword(tokenIdentifier)), tokenIdentifier);\n-    } catch (IllegalArgumentException e) {\n-      // this could be because DNS is down - in which case we just want\n-      // to retry and not bring RM down. Caller should note and act on the fact\n-      // that container is not creatable.\n-      LOG.error(\"Error trying to create new container\", e);\n-      return null;\n+            capability, expiryTimeStamp, this.currentMasterKey.getMasterKey()\n+              .getKeyId());\n+      password \u003d this.createPassword(tokenIdentifier);\n+\n+    } finally {\n+      this.readLock.unlock();\n     }\n+\n+    return BuilderUtils.newContainerToken(nodeId, ByteBuffer.wrap(password),\n+      tokenIdentifier);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ContainerToken createContainerToken(ContainerId containerId,\n      NodeId nodeId, Resource capability) {\n    byte[] password;\n    ContainerTokenIdentifier tokenIdentifier;\n    long expiryTimeStamp \u003d\n        System.currentTimeMillis() + containerTokenExpiryInterval;\n\n    // Lock so that we use the same MasterKey\u0027s keyId and its bytes\n    this.readLock.lock();\n    try {\n      tokenIdentifier \u003d\n          new ContainerTokenIdentifier(containerId, nodeId.toString(),\n            capability, expiryTimeStamp, this.currentMasterKey.getMasterKey()\n              .getKeyId());\n      password \u003d this.createPassword(tokenIdentifier);\n\n    } finally {\n      this.readLock.unlock();\n    }\n\n    return BuilderUtils.newContainerToken(nodeId, ByteBuffer.wrap(password),\n      tokenIdentifier);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/security/BaseContainerTokenSecretManager.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/security/ContainerTokenSecretManager.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/security/BaseContainerTokenSecretManager.java",
            "oldMethodName": "createContainerToken",
            "newMethodName": "createContainerToken"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-39. RM-NM secret-keys should be randomly generated and rolled every so often. (Contributed by Vinod Kumar Vavilapalli and Siddharth Seth)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1377180 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "24/08/12 7:18 PM",
          "commitName": "ffd2e01604be814fa3db1dded7cd7cff26a79b1e",
          "commitAuthor": "Siddharth Seth",
          "commitDateOld": "24/08/12 6:03 PM",
          "commitNameOld": "deead78e35b0cb81af875b5a8032cbd06c9a2dae",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,23 @@\n   public ContainerToken createContainerToken(ContainerId containerId,\n       NodeId nodeId, Resource capability) {\n+    byte[] password;\n+    ContainerTokenIdentifier tokenIdentifier;\n+    long expiryTimeStamp \u003d\n+        System.currentTimeMillis() + containerTokenExpiryInterval;\n+\n+    // Lock so that we use the same MasterKey\u0027s keyId and its bytes\n+    this.readLock.lock();\n     try {\n-      long expiryTimeStamp \u003d\n-          System.currentTimeMillis() + containerTokenExpiryInterval;\n-      ContainerTokenIdentifier tokenIdentifier \u003d\n+      tokenIdentifier \u003d\n           new ContainerTokenIdentifier(containerId, nodeId.toString(),\n-            capability, expiryTimeStamp);\n-      return BuilderUtils.newContainerToken(nodeId,\n-        ByteBuffer.wrap(this.createPassword(tokenIdentifier)), tokenIdentifier);\n-    } catch (IllegalArgumentException e) {\n-      // this could be because DNS is down - in which case we just want\n-      // to retry and not bring RM down. Caller should note and act on the fact\n-      // that container is not creatable.\n-      LOG.error(\"Error trying to create new container\", e);\n-      return null;\n+            capability, expiryTimeStamp, this.currentMasterKey.getMasterKey()\n+              .getKeyId());\n+      password \u003d this.createPassword(tokenIdentifier);\n+\n+    } finally {\n+      this.readLock.unlock();\n     }\n+\n+    return BuilderUtils.newContainerToken(nodeId, ByteBuffer.wrap(password),\n+      tokenIdentifier);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ContainerToken createContainerToken(ContainerId containerId,\n      NodeId nodeId, Resource capability) {\n    byte[] password;\n    ContainerTokenIdentifier tokenIdentifier;\n    long expiryTimeStamp \u003d\n        System.currentTimeMillis() + containerTokenExpiryInterval;\n\n    // Lock so that we use the same MasterKey\u0027s keyId and its bytes\n    this.readLock.lock();\n    try {\n      tokenIdentifier \u003d\n          new ContainerTokenIdentifier(containerId, nodeId.toString(),\n            capability, expiryTimeStamp, this.currentMasterKey.getMasterKey()\n              .getKeyId());\n      password \u003d this.createPassword(tokenIdentifier);\n\n    } finally {\n      this.readLock.unlock();\n    }\n\n    return BuilderUtils.newContainerToken(nodeId, ByteBuffer.wrap(password),\n      tokenIdentifier);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/security/BaseContainerTokenSecretManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public ContainerToken createContainerToken(ContainerId containerId,\n      NodeId nodeId, Resource capability) {\n    try {\n      long expiryTimeStamp \u003d\n          System.currentTimeMillis() + containerTokenExpiryInterval;\n      ContainerTokenIdentifier tokenIdentifier \u003d\n          new ContainerTokenIdentifier(containerId, nodeId.toString(),\n            capability, expiryTimeStamp);\n      return BuilderUtils.newContainerToken(nodeId,\n        ByteBuffer.wrap(this.createPassword(tokenIdentifier)), tokenIdentifier);\n    } catch (IllegalArgumentException e) {\n      // this could be because DNS is down - in which case we just want\n      // to retry and not bring RM down. Caller should note and act on the fact\n      // that container is not creatable.\n      LOG.error(\"Error trying to create new container\", e);\n      return null;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/security/ContainerTokenSecretManager.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/security/ContainerTokenSecretManager.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/security/ContainerTokenSecretManager.java"
      }
    },
    "3bfb26ad3b5ac46f992a632541c97ca2bc897638": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-3940. ContainerTokens should have an expiry interval. Contributed by Siddharth Seth and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1359910 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/07/12 2:26 PM",
      "commitName": "3bfb26ad3b5ac46f992a632541c97ca2bc897638",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,18 @@\n+  public ContainerToken createContainerToken(ContainerId containerId,\n+      NodeId nodeId, Resource capability) {\n+    try {\n+      long expiryTimeStamp \u003d\n+          System.currentTimeMillis() + containerTokenExpiryInterval;\n+      ContainerTokenIdentifier tokenIdentifier \u003d\n+          new ContainerTokenIdentifier(containerId, nodeId.toString(),\n+            capability, expiryTimeStamp);\n+      return BuilderUtils.newContainerToken(nodeId,\n+        ByteBuffer.wrap(this.createPassword(tokenIdentifier)), tokenIdentifier);\n+    } catch (IllegalArgumentException e) {\n+      // this could be because DNS is down - in which case we just want\n+      // to retry and not bring RM down. Caller should note and act on the fact\n+      // that container is not creatable.\n+      LOG.error(\"Error trying to create new container\", e);\n+      return null;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public ContainerToken createContainerToken(ContainerId containerId,\n      NodeId nodeId, Resource capability) {\n    try {\n      long expiryTimeStamp \u003d\n          System.currentTimeMillis() + containerTokenExpiryInterval;\n      ContainerTokenIdentifier tokenIdentifier \u003d\n          new ContainerTokenIdentifier(containerId, nodeId.toString(),\n            capability, expiryTimeStamp);\n      return BuilderUtils.newContainerToken(nodeId,\n        ByteBuffer.wrap(this.createPassword(tokenIdentifier)), tokenIdentifier);\n    } catch (IllegalArgumentException e) {\n      // this could be because DNS is down - in which case we just want\n      // to retry and not bring RM down. Caller should note and act on the fact\n      // that container is not creatable.\n      LOG.error(\"Error trying to create new container\", e);\n      return null;\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/security/ContainerTokenSecretManager.java"
    }
  }
}