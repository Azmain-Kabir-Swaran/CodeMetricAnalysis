{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMContainerAllocator.java",
  "functionName": "addMap",
  "functionId": "addMap___event-ContainerRequestEvent",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
  "functionStartLine": 1106,
  "functionEndLine": 1156,
  "numCommitsSeen": 83,
  "timeTaken": 8845,
  "changeHistory": [
    "85826f6ca5a6d06b711a6805f7a1a6788852db05",
    "ae353ea96993ec664090c5d84f6675c29d9f0f5f",
    "3164e7d83875aa6b7435d1dfe61ac280aa277f1c",
    "28a2eb9d722bb8cbbeee87a1c43b4dc4ef4467ce",
    "a3f37e15f75d01bb342480b0b1035ea16c5fd9aa",
    "74748ec62570f92d57dbad3ba4cca47402990db5",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "85826f6ca5a6d06b711a6805f7a1a6788852db05": "Ybodychange",
    "ae353ea96993ec664090c5d84f6675c29d9f0f5f": "Ybodychange",
    "3164e7d83875aa6b7435d1dfe61ac280aa277f1c": "Ybodychange",
    "28a2eb9d722bb8cbbeee87a1c43b4dc4ef4467ce": "Ybodychange",
    "a3f37e15f75d01bb342480b0b1035ea16c5fd9aa": "Ybodychange",
    "74748ec62570f92d57dbad3ba4cca47402990db5": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "85826f6ca5a6d06b711a6805f7a1a6788852db05": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6066. Opportunistic containers Minor fixes : API annotations, parameter name changes, checkstyles. (asuresh)\n\n(cherry picked from commit 4985217de453a04ddffd7b52644bdc8d153f753c)\n",
      "commitDate": "08/01/17 9:04 AM",
      "commitName": "85826f6ca5a6d06b711a6805f7a1a6788852db05",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "16/12/16 8:14 AM",
      "commitNameOld": "2273a74c1f3895163046cca09ff5e983df301d22",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 23.03,
      "commitsBetweenForRepo": 86,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,51 @@\n     void addMap(ContainerRequestEvent event) {\n       ContainerRequest request \u003d null;\n       \n       if (event.getEarlierAttemptFailed()) {\n         earlierFailedMaps.add(event.getAttemptID());\n         request \u003d\n             new ContainerRequest(event, PRIORITY_FAST_FAIL_MAP,\n                 mapNodeLabelExpression);\n         LOG.info(\"Added \"+event.getAttemptID()+\" to list of failed maps\");\n         // If its an earlier Failed attempt, do not retry as OPPORTUNISTIC\n         maps.put(event.getAttemptID(), request);\n         addContainerReq(request);\n       } else {\n-        if (mapsMod100 \u003c numOpportunisticMapsPer100) {\n+        if (mapsMod100 \u003c numOpportunisticMapsPercent) {\n           request \u003d\n               new ContainerRequest(event, PRIORITY_OPPORTUNISTIC_MAP,\n                   mapNodeLabelExpression);\n           maps.put(event.getAttemptID(), request);\n           addOpportunisticResourceRequest(request.priority, request.capability);\n         } else {\n           request \u003d\n               new ContainerRequest(event, PRIORITY_MAP, mapNodeLabelExpression);\n           for (String host : event.getHosts()) {\n             LinkedList\u003cTaskAttemptId\u003e list \u003d mapsHostMapping.get(host);\n             if (list \u003d\u003d null) {\n               list \u003d new LinkedList\u003cTaskAttemptId\u003e();\n               mapsHostMapping.put(host, list);\n             }\n             list.add(event.getAttemptID());\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Added attempt req to host \" + host);\n             }\n           }\n           for (String rack : event.getRacks()) {\n             LinkedList\u003cTaskAttemptId\u003e list \u003d mapsRackMapping.get(rack);\n             if (list \u003d\u003d null) {\n               list \u003d new LinkedList\u003cTaskAttemptId\u003e();\n               mapsRackMapping.put(rack, list);\n             }\n             list.add(event.getAttemptID());\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Added attempt req to rack \" + rack);\n             }\n           }\n           maps.put(event.getAttemptID(), request);\n           addContainerReq(request);\n         }\n         mapsMod100++;\n         mapsMod100 %\u003d 100;\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    void addMap(ContainerRequestEvent event) {\n      ContainerRequest request \u003d null;\n      \n      if (event.getEarlierAttemptFailed()) {\n        earlierFailedMaps.add(event.getAttemptID());\n        request \u003d\n            new ContainerRequest(event, PRIORITY_FAST_FAIL_MAP,\n                mapNodeLabelExpression);\n        LOG.info(\"Added \"+event.getAttemptID()+\" to list of failed maps\");\n        // If its an earlier Failed attempt, do not retry as OPPORTUNISTIC\n        maps.put(event.getAttemptID(), request);\n        addContainerReq(request);\n      } else {\n        if (mapsMod100 \u003c numOpportunisticMapsPercent) {\n          request \u003d\n              new ContainerRequest(event, PRIORITY_OPPORTUNISTIC_MAP,\n                  mapNodeLabelExpression);\n          maps.put(event.getAttemptID(), request);\n          addOpportunisticResourceRequest(request.priority, request.capability);\n        } else {\n          request \u003d\n              new ContainerRequest(event, PRIORITY_MAP, mapNodeLabelExpression);\n          for (String host : event.getHosts()) {\n            LinkedList\u003cTaskAttemptId\u003e list \u003d mapsHostMapping.get(host);\n            if (list \u003d\u003d null) {\n              list \u003d new LinkedList\u003cTaskAttemptId\u003e();\n              mapsHostMapping.put(host, list);\n            }\n            list.add(event.getAttemptID());\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Added attempt req to host \" + host);\n            }\n          }\n          for (String rack : event.getRacks()) {\n            LinkedList\u003cTaskAttemptId\u003e list \u003d mapsRackMapping.get(rack);\n            if (list \u003d\u003d null) {\n              list \u003d new LinkedList\u003cTaskAttemptId\u003e();\n              mapsRackMapping.put(rack, list);\n            }\n            list.add(event.getAttemptID());\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Added attempt req to rack \" + rack);\n            }\n          }\n          maps.put(event.getAttemptID(), request);\n          addContainerReq(request);\n        }\n        mapsMod100++;\n        mapsMod100 %\u003d 100;\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
      "extendedDetails": {}
    },
    "ae353ea96993ec664090c5d84f6675c29d9f0f5f": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6703. Add flag to allow MapReduce AM to request for OPPORTUNISTIC containers. Contributed by Arun Suresh\n",
      "commitDate": "24/05/16 7:47 PM",
      "commitName": "ae353ea96993ec664090c5d84f6675c29d9f0f5f",
      "commitAuthor": "Jian He",
      "commitDateOld": "06/05/16 3:25 PM",
      "commitNameOld": "c9bb96fa81fc925e33ccc0b02c98cc2d929df120",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 18.18,
      "commitsBetweenForRepo": 128,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,51 @@\n     void addMap(ContainerRequestEvent event) {\n       ContainerRequest request \u003d null;\n       \n       if (event.getEarlierAttemptFailed()) {\n         earlierFailedMaps.add(event.getAttemptID());\n         request \u003d\n             new ContainerRequest(event, PRIORITY_FAST_FAIL_MAP,\n                 mapNodeLabelExpression);\n         LOG.info(\"Added \"+event.getAttemptID()+\" to list of failed maps\");\n+        // If its an earlier Failed attempt, do not retry as OPPORTUNISTIC\n+        maps.put(event.getAttemptID(), request);\n+        addContainerReq(request);\n       } else {\n-        for (String host : event.getHosts()) {\n-          LinkedList\u003cTaskAttemptId\u003e list \u003d mapsHostMapping.get(host);\n-          if (list \u003d\u003d null) {\n-            list \u003d new LinkedList\u003cTaskAttemptId\u003e();\n-            mapsHostMapping.put(host, list);\n+        if (mapsMod100 \u003c numOpportunisticMapsPer100) {\n+          request \u003d\n+              new ContainerRequest(event, PRIORITY_OPPORTUNISTIC_MAP,\n+                  mapNodeLabelExpression);\n+          maps.put(event.getAttemptID(), request);\n+          addOpportunisticResourceRequest(request.priority, request.capability);\n+        } else {\n+          request \u003d\n+              new ContainerRequest(event, PRIORITY_MAP, mapNodeLabelExpression);\n+          for (String host : event.getHosts()) {\n+            LinkedList\u003cTaskAttemptId\u003e list \u003d mapsHostMapping.get(host);\n+            if (list \u003d\u003d null) {\n+              list \u003d new LinkedList\u003cTaskAttemptId\u003e();\n+              mapsHostMapping.put(host, list);\n+            }\n+            list.add(event.getAttemptID());\n+            if (LOG.isDebugEnabled()) {\n+              LOG.debug(\"Added attempt req to host \" + host);\n+            }\n           }\n-          list.add(event.getAttemptID());\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Added attempt req to host \" + host);\n+          for (String rack : event.getRacks()) {\n+            LinkedList\u003cTaskAttemptId\u003e list \u003d mapsRackMapping.get(rack);\n+            if (list \u003d\u003d null) {\n+              list \u003d new LinkedList\u003cTaskAttemptId\u003e();\n+              mapsRackMapping.put(rack, list);\n+            }\n+            list.add(event.getAttemptID());\n+            if (LOG.isDebugEnabled()) {\n+              LOG.debug(\"Added attempt req to rack \" + rack);\n+            }\n           }\n-       }\n-       for (String rack: event.getRacks()) {\n-         LinkedList\u003cTaskAttemptId\u003e list \u003d mapsRackMapping.get(rack);\n-         if (list \u003d\u003d null) {\n-           list \u003d new LinkedList\u003cTaskAttemptId\u003e();\n-           mapsRackMapping.put(rack, list);\n-         }\n-         list.add(event.getAttemptID());\n-         if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Added attempt req to rack \" + rack);\n-         }\n-       }\n-        request \u003d\n-            new ContainerRequest(event, PRIORITY_MAP, mapNodeLabelExpression);\n+          maps.put(event.getAttemptID(), request);\n+          addContainerReq(request);\n+        }\n+        mapsMod100++;\n+        mapsMod100 %\u003d 100;\n       }\n-      maps.put(event.getAttemptID(), request);\n-      addContainerReq(request);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    void addMap(ContainerRequestEvent event) {\n      ContainerRequest request \u003d null;\n      \n      if (event.getEarlierAttemptFailed()) {\n        earlierFailedMaps.add(event.getAttemptID());\n        request \u003d\n            new ContainerRequest(event, PRIORITY_FAST_FAIL_MAP,\n                mapNodeLabelExpression);\n        LOG.info(\"Added \"+event.getAttemptID()+\" to list of failed maps\");\n        // If its an earlier Failed attempt, do not retry as OPPORTUNISTIC\n        maps.put(event.getAttemptID(), request);\n        addContainerReq(request);\n      } else {\n        if (mapsMod100 \u003c numOpportunisticMapsPer100) {\n          request \u003d\n              new ContainerRequest(event, PRIORITY_OPPORTUNISTIC_MAP,\n                  mapNodeLabelExpression);\n          maps.put(event.getAttemptID(), request);\n          addOpportunisticResourceRequest(request.priority, request.capability);\n        } else {\n          request \u003d\n              new ContainerRequest(event, PRIORITY_MAP, mapNodeLabelExpression);\n          for (String host : event.getHosts()) {\n            LinkedList\u003cTaskAttemptId\u003e list \u003d mapsHostMapping.get(host);\n            if (list \u003d\u003d null) {\n              list \u003d new LinkedList\u003cTaskAttemptId\u003e();\n              mapsHostMapping.put(host, list);\n            }\n            list.add(event.getAttemptID());\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Added attempt req to host \" + host);\n            }\n          }\n          for (String rack : event.getRacks()) {\n            LinkedList\u003cTaskAttemptId\u003e list \u003d mapsRackMapping.get(rack);\n            if (list \u003d\u003d null) {\n              list \u003d new LinkedList\u003cTaskAttemptId\u003e();\n              mapsRackMapping.put(rack, list);\n            }\n            list.add(event.getAttemptID());\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Added attempt req to rack \" + rack);\n            }\n          }\n          maps.put(event.getAttemptID(), request);\n          addContainerReq(request);\n        }\n        mapsMod100++;\n        mapsMod100 %\u003d 100;\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
      "extendedDetails": {}
    },
    "3164e7d83875aa6b7435d1dfe61ac280aa277f1c": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6304. Specifying node labels when submitting MR jobs. (Naganarasimha G R via wangda)\n",
      "commitDate": "27/05/15 2:26 PM",
      "commitName": "3164e7d83875aa6b7435d1dfe61ac280aa277f1c",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "18/03/15 12:30 PM",
      "commitNameOld": "30da99cbaf36aeef38a858251ce8ffa5eb657b38",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 70.08,
      "commitsBetweenForRepo": 677,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,38 @@\n     void addMap(ContainerRequestEvent event) {\n       ContainerRequest request \u003d null;\n       \n       if (event.getEarlierAttemptFailed()) {\n         earlierFailedMaps.add(event.getAttemptID());\n-        request \u003d new ContainerRequest(event, PRIORITY_FAST_FAIL_MAP);\n+        request \u003d\n+            new ContainerRequest(event, PRIORITY_FAST_FAIL_MAP,\n+                mapNodeLabelExpression);\n         LOG.info(\"Added \"+event.getAttemptID()+\" to list of failed maps\");\n       } else {\n         for (String host : event.getHosts()) {\n           LinkedList\u003cTaskAttemptId\u003e list \u003d mapsHostMapping.get(host);\n           if (list \u003d\u003d null) {\n             list \u003d new LinkedList\u003cTaskAttemptId\u003e();\n             mapsHostMapping.put(host, list);\n           }\n           list.add(event.getAttemptID());\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Added attempt req to host \" + host);\n           }\n        }\n        for (String rack: event.getRacks()) {\n          LinkedList\u003cTaskAttemptId\u003e list \u003d mapsRackMapping.get(rack);\n          if (list \u003d\u003d null) {\n            list \u003d new LinkedList\u003cTaskAttemptId\u003e();\n            mapsRackMapping.put(rack, list);\n          }\n          list.add(event.getAttemptID());\n          if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Added attempt req to rack \" + rack);\n          }\n        }\n-       request \u003d new ContainerRequest(event, PRIORITY_MAP);\n+        request \u003d\n+            new ContainerRequest(event, PRIORITY_MAP, mapNodeLabelExpression);\n       }\n       maps.put(event.getAttemptID(), request);\n       addContainerReq(request);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    void addMap(ContainerRequestEvent event) {\n      ContainerRequest request \u003d null;\n      \n      if (event.getEarlierAttemptFailed()) {\n        earlierFailedMaps.add(event.getAttemptID());\n        request \u003d\n            new ContainerRequest(event, PRIORITY_FAST_FAIL_MAP,\n                mapNodeLabelExpression);\n        LOG.info(\"Added \"+event.getAttemptID()+\" to list of failed maps\");\n      } else {\n        for (String host : event.getHosts()) {\n          LinkedList\u003cTaskAttemptId\u003e list \u003d mapsHostMapping.get(host);\n          if (list \u003d\u003d null) {\n            list \u003d new LinkedList\u003cTaskAttemptId\u003e();\n            mapsHostMapping.put(host, list);\n          }\n          list.add(event.getAttemptID());\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Added attempt req to host \" + host);\n          }\n       }\n       for (String rack: event.getRacks()) {\n         LinkedList\u003cTaskAttemptId\u003e list \u003d mapsRackMapping.get(rack);\n         if (list \u003d\u003d null) {\n           list \u003d new LinkedList\u003cTaskAttemptId\u003e();\n           mapsRackMapping.put(rack, list);\n         }\n         list.add(event.getAttemptID());\n         if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Added attempt req to rack \" + rack);\n         }\n       }\n        request \u003d\n            new ContainerRequest(event, PRIORITY_MAP, mapNodeLabelExpression);\n      }\n      maps.put(event.getAttemptID(), request);\n      addContainerReq(request);\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
      "extendedDetails": {}
    },
    "28a2eb9d722bb8cbbeee87a1c43b4dc4ef4467ce": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3810. Performance tweaks - reduced logging in AM and defined hascode/equals for ResourceRequest \u0026 Priority. Contributed by Vinod K V. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1241205 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/02/12 2:01 PM",
      "commitName": "28a2eb9d722bb8cbbeee87a1c43b4dc4ef4467ce",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "03/02/12 4:04 PM",
      "commitNameOld": "94242c93857a06fb9c56ee571a47d6ca18f00f48",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 2.91,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,35 @@\n     void addMap(ContainerRequestEvent event) {\n       ContainerRequest request \u003d null;\n       \n       if (event.getEarlierAttemptFailed()) {\n         earlierFailedMaps.add(event.getAttemptID());\n         request \u003d new ContainerRequest(event, PRIORITY_FAST_FAIL_MAP);\n         LOG.info(\"Added \"+event.getAttemptID()+\" to list of failed maps\");\n       } else {\n         for (String host : event.getHosts()) {\n           LinkedList\u003cTaskAttemptId\u003e list \u003d mapsHostMapping.get(host);\n           if (list \u003d\u003d null) {\n             list \u003d new LinkedList\u003cTaskAttemptId\u003e();\n             mapsHostMapping.put(host, list);\n           }\n           list.add(event.getAttemptID());\n-          LOG.info(\"Added attempt req to host \" + host);\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Added attempt req to host \" + host);\n+          }\n        }\n        for (String rack: event.getRacks()) {\n          LinkedList\u003cTaskAttemptId\u003e list \u003d mapsRackMapping.get(rack);\n          if (list \u003d\u003d null) {\n            list \u003d new LinkedList\u003cTaskAttemptId\u003e();\n            mapsRackMapping.put(rack, list);\n          }\n          list.add(event.getAttemptID());\n-         LOG.info(\"Added attempt req to rack \" + rack);\n+         if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Added attempt req to rack \" + rack);\n+         }\n        }\n        request \u003d new ContainerRequest(event, PRIORITY_MAP);\n       }\n       maps.put(event.getAttemptID(), request);\n       addContainerReq(request);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    void addMap(ContainerRequestEvent event) {\n      ContainerRequest request \u003d null;\n      \n      if (event.getEarlierAttemptFailed()) {\n        earlierFailedMaps.add(event.getAttemptID());\n        request \u003d new ContainerRequest(event, PRIORITY_FAST_FAIL_MAP);\n        LOG.info(\"Added \"+event.getAttemptID()+\" to list of failed maps\");\n      } else {\n        for (String host : event.getHosts()) {\n          LinkedList\u003cTaskAttemptId\u003e list \u003d mapsHostMapping.get(host);\n          if (list \u003d\u003d null) {\n            list \u003d new LinkedList\u003cTaskAttemptId\u003e();\n            mapsHostMapping.put(host, list);\n          }\n          list.add(event.getAttemptID());\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Added attempt req to host \" + host);\n          }\n       }\n       for (String rack: event.getRacks()) {\n         LinkedList\u003cTaskAttemptId\u003e list \u003d mapsRackMapping.get(rack);\n         if (list \u003d\u003d null) {\n           list \u003d new LinkedList\u003cTaskAttemptId\u003e();\n           mapsRackMapping.put(rack, list);\n         }\n         list.add(event.getAttemptID());\n         if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Added attempt req to rack \" + rack);\n         }\n       }\n       request \u003d new ContainerRequest(event, PRIORITY_MAP);\n      }\n      maps.put(event.getAttemptID(), request);\n      addContainerReq(request);\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
      "extendedDetails": {}
    },
    "a3f37e15f75d01bb342480b0b1035ea16c5fd9aa": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3460. MR AM can hang if containers are allocated on a node blacklisted by the AM. (Contributed by Hitesh Shah and Robert Joseph Evans)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1209737 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/12/11 2:18 PM",
      "commitName": "a3f37e15f75d01bb342480b0b1035ea16c5fd9aa",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "27/10/11 6:40 PM",
      "commitNameOld": "b304062f1ffee078ea9575dcee5583d43e33508c",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 35.86,
      "commitsBetweenForRepo": 217,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,31 @@\n     void addMap(ContainerRequestEvent event) {\n       ContainerRequest request \u003d null;\n       \n       if (event.getEarlierAttemptFailed()) {\n         earlierFailedMaps.add(event.getAttemptID());\n         request \u003d new ContainerRequest(event, PRIORITY_FAST_FAIL_MAP);\n+        LOG.info(\"Added \"+event.getAttemptID()+\" to list of failed maps\");\n       } else {\n         for (String host : event.getHosts()) {\n           LinkedList\u003cTaskAttemptId\u003e list \u003d mapsHostMapping.get(host);\n           if (list \u003d\u003d null) {\n             list \u003d new LinkedList\u003cTaskAttemptId\u003e();\n             mapsHostMapping.put(host, list);\n           }\n           list.add(event.getAttemptID());\n           LOG.info(\"Added attempt req to host \" + host);\n        }\n        for (String rack: event.getRacks()) {\n          LinkedList\u003cTaskAttemptId\u003e list \u003d mapsRackMapping.get(rack);\n          if (list \u003d\u003d null) {\n            list \u003d new LinkedList\u003cTaskAttemptId\u003e();\n            mapsRackMapping.put(rack, list);\n          }\n          list.add(event.getAttemptID());\n          LOG.info(\"Added attempt req to rack \" + rack);\n        }\n        request \u003d new ContainerRequest(event, PRIORITY_MAP);\n       }\n       maps.put(event.getAttemptID(), request);\n       addContainerReq(request);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    void addMap(ContainerRequestEvent event) {\n      ContainerRequest request \u003d null;\n      \n      if (event.getEarlierAttemptFailed()) {\n        earlierFailedMaps.add(event.getAttemptID());\n        request \u003d new ContainerRequest(event, PRIORITY_FAST_FAIL_MAP);\n        LOG.info(\"Added \"+event.getAttemptID()+\" to list of failed maps\");\n      } else {\n        for (String host : event.getHosts()) {\n          LinkedList\u003cTaskAttemptId\u003e list \u003d mapsHostMapping.get(host);\n          if (list \u003d\u003d null) {\n            list \u003d new LinkedList\u003cTaskAttemptId\u003e();\n            mapsHostMapping.put(host, list);\n          }\n          list.add(event.getAttemptID());\n          LOG.info(\"Added attempt req to host \" + host);\n       }\n       for (String rack: event.getRacks()) {\n         LinkedList\u003cTaskAttemptId\u003e list \u003d mapsRackMapping.get(rack);\n         if (list \u003d\u003d null) {\n           list \u003d new LinkedList\u003cTaskAttemptId\u003e();\n           mapsRackMapping.put(rack, list);\n         }\n         list.add(event.getAttemptID());\n         LOG.info(\"Added attempt req to rack \" + rack);\n       }\n       request \u003d new ContainerRequest(event, PRIORITY_MAP);\n      }\n      maps.put(event.getAttemptID(), request);\n      addContainerReq(request);\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
      "extendedDetails": {}
    },
    "74748ec62570f92d57dbad3ba4cca47402990db5": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2693. Fix NPE in job-blacklisting. Contributed by Hitesh Shah.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1186529 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/10/11 3:02 PM",
      "commitName": "74748ec62570f92d57dbad3ba4cca47402990db5",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "26/09/11 6:25 AM",
      "commitNameOld": "1e6dfa7472ad78a252d05c8ebffe086d938b61fa",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 23.36,
      "commitsBetweenForRepo": 189,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,30 @@\n     void addMap(ContainerRequestEvent event) {\n       ContainerRequest request \u003d null;\n       \n       if (event.getEarlierAttemptFailed()) {\n         earlierFailedMaps.add(event.getAttemptID());\n         request \u003d new ContainerRequest(event, PRIORITY_FAST_FAIL_MAP);\n       } else {\n         for (String host : event.getHosts()) {\n-          //host comes from data splitLocations which are hostnames. Containers\n-          // use IP addresses.\n-          //TODO Temporary fix for locality. Use resolvers from h-common. \n-          // Cache to make this more efficient ?\n-          InetAddress addr \u003d null;\n-          try {\n-            addr \u003d InetAddress.getByName(host);\n-          } catch (UnknownHostException e) {\n-            LOG.warn(\"Unable to resolve host to IP for host [: \" + host + \"]\");\n-          }\n-          if (addr !\u003d null) //Fallback to host if resolve fails.\n-            host \u003d addr.getHostAddress();\n           LinkedList\u003cTaskAttemptId\u003e list \u003d mapsHostMapping.get(host);\n           if (list \u003d\u003d null) {\n             list \u003d new LinkedList\u003cTaskAttemptId\u003e();\n             mapsHostMapping.put(host, list);\n           }\n           list.add(event.getAttemptID());\n           LOG.info(\"Added attempt req to host \" + host);\n        }\n        for (String rack: event.getRacks()) {\n          LinkedList\u003cTaskAttemptId\u003e list \u003d mapsRackMapping.get(rack);\n          if (list \u003d\u003d null) {\n            list \u003d new LinkedList\u003cTaskAttemptId\u003e();\n            mapsRackMapping.put(rack, list);\n          }\n          list.add(event.getAttemptID());\n          LOG.info(\"Added attempt req to rack \" + rack);\n        }\n        request \u003d new ContainerRequest(event, PRIORITY_MAP);\n       }\n       maps.put(event.getAttemptID(), request);\n       addContainerReq(request);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    void addMap(ContainerRequestEvent event) {\n      ContainerRequest request \u003d null;\n      \n      if (event.getEarlierAttemptFailed()) {\n        earlierFailedMaps.add(event.getAttemptID());\n        request \u003d new ContainerRequest(event, PRIORITY_FAST_FAIL_MAP);\n      } else {\n        for (String host : event.getHosts()) {\n          LinkedList\u003cTaskAttemptId\u003e list \u003d mapsHostMapping.get(host);\n          if (list \u003d\u003d null) {\n            list \u003d new LinkedList\u003cTaskAttemptId\u003e();\n            mapsHostMapping.put(host, list);\n          }\n          list.add(event.getAttemptID());\n          LOG.info(\"Added attempt req to host \" + host);\n       }\n       for (String rack: event.getRacks()) {\n         LinkedList\u003cTaskAttemptId\u003e list \u003d mapsRackMapping.get(rack);\n         if (list \u003d\u003d null) {\n           list \u003d new LinkedList\u003cTaskAttemptId\u003e();\n           mapsRackMapping.put(rack, list);\n         }\n         list.add(event.getAttemptID());\n         LOG.info(\"Added attempt req to rack \" + rack);\n       }\n       request \u003d new ContainerRequest(event, PRIORITY_MAP);\n      }\n      maps.put(event.getAttemptID(), request);\n      addContainerReq(request);\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    void addMap(ContainerRequestEvent event) {\n      ContainerRequest request \u003d null;\n      \n      if (event.getEarlierAttemptFailed()) {\n        earlierFailedMaps.add(event.getAttemptID());\n        request \u003d new ContainerRequest(event, PRIORITY_FAST_FAIL_MAP);\n      } else {\n        for (String host : event.getHosts()) {\n          //host comes from data splitLocations which are hostnames. Containers\n          // use IP addresses.\n          //TODO Temporary fix for locality. Use resolvers from h-common. \n          // Cache to make this more efficient ?\n          InetAddress addr \u003d null;\n          try {\n            addr \u003d InetAddress.getByName(host);\n          } catch (UnknownHostException e) {\n            LOG.warn(\"Unable to resolve host to IP for host [: \" + host + \"]\");\n          }\n          if (addr !\u003d null) //Fallback to host if resolve fails.\n            host \u003d addr.getHostAddress();\n          LinkedList\u003cTaskAttemptId\u003e list \u003d mapsHostMapping.get(host);\n          if (list \u003d\u003d null) {\n            list \u003d new LinkedList\u003cTaskAttemptId\u003e();\n            mapsHostMapping.put(host, list);\n          }\n          list.add(event.getAttemptID());\n          LOG.info(\"Added attempt req to host \" + host);\n       }\n       for (String rack: event.getRacks()) {\n         LinkedList\u003cTaskAttemptId\u003e list \u003d mapsRackMapping.get(rack);\n         if (list \u003d\u003d null) {\n           list \u003d new LinkedList\u003cTaskAttemptId\u003e();\n           mapsRackMapping.put(rack, list);\n         }\n         list.add(event.getAttemptID());\n         LOG.info(\"Added attempt req to rack \" + rack);\n       }\n       request \u003d new ContainerRequest(event, PRIORITY_MAP);\n      }\n      maps.put(event.getAttemptID(), request);\n      addContainerReq(request);\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,42 @@\n+    void addMap(ContainerRequestEvent event) {\n+      ContainerRequest request \u003d null;\n+      \n+      if (event.getEarlierAttemptFailed()) {\n+        earlierFailedMaps.add(event.getAttemptID());\n+        request \u003d new ContainerRequest(event, PRIORITY_FAST_FAIL_MAP);\n+      } else {\n+        for (String host : event.getHosts()) {\n+          //host comes from data splitLocations which are hostnames. Containers\n+          // use IP addresses.\n+          //TODO Temporary fix for locality. Use resolvers from h-common. \n+          // Cache to make this more efficient ?\n+          InetAddress addr \u003d null;\n+          try {\n+            addr \u003d InetAddress.getByName(host);\n+          } catch (UnknownHostException e) {\n+            LOG.warn(\"Unable to resolve host to IP for host [: \" + host + \"]\");\n+          }\n+          if (addr !\u003d null) //Fallback to host if resolve fails.\n+            host \u003d addr.getHostAddress();\n+          LinkedList\u003cTaskAttemptId\u003e list \u003d mapsHostMapping.get(host);\n+          if (list \u003d\u003d null) {\n+            list \u003d new LinkedList\u003cTaskAttemptId\u003e();\n+            mapsHostMapping.put(host, list);\n+          }\n+          list.add(event.getAttemptID());\n+          LOG.info(\"Added attempt req to host \" + host);\n+       }\n+       for (String rack: event.getRacks()) {\n+         LinkedList\u003cTaskAttemptId\u003e list \u003d mapsRackMapping.get(rack);\n+         if (list \u003d\u003d null) {\n+           list \u003d new LinkedList\u003cTaskAttemptId\u003e();\n+           mapsRackMapping.put(rack, list);\n+         }\n+         list.add(event.getAttemptID());\n+         LOG.info(\"Added attempt req to rack \" + rack);\n+       }\n+       request \u003d new ContainerRequest(event, PRIORITY_MAP);\n+      }\n+      maps.put(event.getAttemptID(), request);\n+      addContainerReq(request);\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    void addMap(ContainerRequestEvent event) {\n      ContainerRequest request \u003d null;\n      \n      if (event.getEarlierAttemptFailed()) {\n        earlierFailedMaps.add(event.getAttemptID());\n        request \u003d new ContainerRequest(event, PRIORITY_FAST_FAIL_MAP);\n      } else {\n        for (String host : event.getHosts()) {\n          //host comes from data splitLocations which are hostnames. Containers\n          // use IP addresses.\n          //TODO Temporary fix for locality. Use resolvers from h-common. \n          // Cache to make this more efficient ?\n          InetAddress addr \u003d null;\n          try {\n            addr \u003d InetAddress.getByName(host);\n          } catch (UnknownHostException e) {\n            LOG.warn(\"Unable to resolve host to IP for host [: \" + host + \"]\");\n          }\n          if (addr !\u003d null) //Fallback to host if resolve fails.\n            host \u003d addr.getHostAddress();\n          LinkedList\u003cTaskAttemptId\u003e list \u003d mapsHostMapping.get(host);\n          if (list \u003d\u003d null) {\n            list \u003d new LinkedList\u003cTaskAttemptId\u003e();\n            mapsHostMapping.put(host, list);\n          }\n          list.add(event.getAttemptID());\n          LOG.info(\"Added attempt req to host \" + host);\n       }\n       for (String rack: event.getRacks()) {\n         LinkedList\u003cTaskAttemptId\u003e list \u003d mapsRackMapping.get(rack);\n         if (list \u003d\u003d null) {\n           list \u003d new LinkedList\u003cTaskAttemptId\u003e();\n           mapsRackMapping.put(rack, list);\n         }\n         list.add(event.getAttemptID());\n         LOG.info(\"Added attempt req to rack \" + rack);\n       }\n       request \u003d new ContainerRequest(event, PRIORITY_MAP);\n      }\n      maps.put(event.getAttemptID(), request);\n      addContainerReq(request);\n    }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java"
    }
  }
}