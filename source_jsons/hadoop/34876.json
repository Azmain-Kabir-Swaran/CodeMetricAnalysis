{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FederationInterceptor.java",
  "functionName": "mergeRegistrationResponses",
  "functionId": "mergeRegistrationResponses___homeResponse-AllocateResponse__registrations-Map__SubClusterId,RegisterApplicationMasterResponse__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java",
  "functionStartLine": 1372,
  "functionEndLine": 1404,
  "numCommitsSeen": 21,
  "timeTaken": 1889,
  "changeHistory": [
    "3090922805699b8374a359e92323884a4177dc4e",
    "70b1a757f13b01a9192ea5fb0820ba7babfd974e"
  ],
  "changeHistoryShort": {
    "3090922805699b8374a359e92323884a4177dc4e": "Ymultichange(Yreturntypechange,Ybodychange)",
    "70b1a757f13b01a9192ea5fb0820ba7babfd974e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3090922805699b8374a359e92323884a4177dc4e": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-8696. [AMRMProxy] FederationInterceptor upgrade: home sub-cluster heartbeat async. Contributed by Botong Huang.\n",
      "commitDate": "24/09/18 11:37 AM",
      "commitName": "3090922805699b8374a359e92323884a4177dc4e",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-8696. [AMRMProxy] FederationInterceptor upgrade: home sub-cluster heartbeat async. Contributed by Botong Huang.\n",
          "commitDate": "24/09/18 11:37 AM",
          "commitName": "3090922805699b8374a359e92323884a4177dc4e",
          "commitAuthor": "Giovanni Matteo Fumarola",
          "commitDateOld": "12/09/18 11:46 AM",
          "commitNameOld": "02b9bfdf9e4bd0b3c05ca5fd75399dedcb656e09",
          "commitAuthorOld": "Giovanni Matteo Fumarola",
          "daysBetweenCommits": 11.99,
          "commitsBetweenForRepo": 142,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,33 @@\n-  private AllocateResponse mergeRegistrationResponses(\n-      AllocateResponse homeResponse,\n+  private void mergeRegistrationResponses(AllocateResponse homeResponse,\n       Map\u003cSubClusterId, RegisterApplicationMasterResponse\u003e registrations) {\n \n     for (Entry\u003cSubClusterId, RegisterApplicationMasterResponse\u003e entry :\n         registrations.entrySet()) {\n       RegisterApplicationMasterResponse registration \u003d entry.getValue();\n \n       if (!isNullOrEmpty(registration.getContainersFromPreviousAttempts())) {\n         List\u003cContainer\u003e tempContainers \u003d homeResponse.getAllocatedContainers();\n         if (!isNullOrEmpty(tempContainers)) {\n           tempContainers\n               .addAll(registration.getContainersFromPreviousAttempts());\n           homeResponse.setAllocatedContainers(tempContainers);\n         } else {\n           homeResponse.setAllocatedContainers(\n               registration.getContainersFromPreviousAttempts());\n         }\n         cacheAllocatedContainers(\n             registration.getContainersFromPreviousAttempts(), entry.getKey());\n       }\n \n       if (!isNullOrEmpty(registration.getNMTokensFromPreviousAttempts())) {\n         List\u003cNMToken\u003e tempTokens \u003d homeResponse.getNMTokens();\n         if (!isNullOrEmpty(tempTokens)) {\n           tempTokens.addAll(registration.getNMTokensFromPreviousAttempts());\n           homeResponse.setNMTokens(tempTokens);\n         } else {\n           homeResponse\n               .setNMTokens(registration.getNMTokensFromPreviousAttempts());\n         }\n       }\n     }\n-\n-    return homeResponse;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void mergeRegistrationResponses(AllocateResponse homeResponse,\n      Map\u003cSubClusterId, RegisterApplicationMasterResponse\u003e registrations) {\n\n    for (Entry\u003cSubClusterId, RegisterApplicationMasterResponse\u003e entry :\n        registrations.entrySet()) {\n      RegisterApplicationMasterResponse registration \u003d entry.getValue();\n\n      if (!isNullOrEmpty(registration.getContainersFromPreviousAttempts())) {\n        List\u003cContainer\u003e tempContainers \u003d homeResponse.getAllocatedContainers();\n        if (!isNullOrEmpty(tempContainers)) {\n          tempContainers\n              .addAll(registration.getContainersFromPreviousAttempts());\n          homeResponse.setAllocatedContainers(tempContainers);\n        } else {\n          homeResponse.setAllocatedContainers(\n              registration.getContainersFromPreviousAttempts());\n        }\n        cacheAllocatedContainers(\n            registration.getContainersFromPreviousAttempts(), entry.getKey());\n      }\n\n      if (!isNullOrEmpty(registration.getNMTokensFromPreviousAttempts())) {\n        List\u003cNMToken\u003e tempTokens \u003d homeResponse.getNMTokens();\n        if (!isNullOrEmpty(tempTokens)) {\n          tempTokens.addAll(registration.getNMTokensFromPreviousAttempts());\n          homeResponse.setNMTokens(tempTokens);\n        } else {\n          homeResponse\n              .setNMTokens(registration.getNMTokensFromPreviousAttempts());\n        }\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java",
          "extendedDetails": {
            "oldValue": "AllocateResponse",
            "newValue": "void"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8696. [AMRMProxy] FederationInterceptor upgrade: home sub-cluster heartbeat async. Contributed by Botong Huang.\n",
          "commitDate": "24/09/18 11:37 AM",
          "commitName": "3090922805699b8374a359e92323884a4177dc4e",
          "commitAuthor": "Giovanni Matteo Fumarola",
          "commitDateOld": "12/09/18 11:46 AM",
          "commitNameOld": "02b9bfdf9e4bd0b3c05ca5fd75399dedcb656e09",
          "commitAuthorOld": "Giovanni Matteo Fumarola",
          "daysBetweenCommits": 11.99,
          "commitsBetweenForRepo": 142,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,33 @@\n-  private AllocateResponse mergeRegistrationResponses(\n-      AllocateResponse homeResponse,\n+  private void mergeRegistrationResponses(AllocateResponse homeResponse,\n       Map\u003cSubClusterId, RegisterApplicationMasterResponse\u003e registrations) {\n \n     for (Entry\u003cSubClusterId, RegisterApplicationMasterResponse\u003e entry :\n         registrations.entrySet()) {\n       RegisterApplicationMasterResponse registration \u003d entry.getValue();\n \n       if (!isNullOrEmpty(registration.getContainersFromPreviousAttempts())) {\n         List\u003cContainer\u003e tempContainers \u003d homeResponse.getAllocatedContainers();\n         if (!isNullOrEmpty(tempContainers)) {\n           tempContainers\n               .addAll(registration.getContainersFromPreviousAttempts());\n           homeResponse.setAllocatedContainers(tempContainers);\n         } else {\n           homeResponse.setAllocatedContainers(\n               registration.getContainersFromPreviousAttempts());\n         }\n         cacheAllocatedContainers(\n             registration.getContainersFromPreviousAttempts(), entry.getKey());\n       }\n \n       if (!isNullOrEmpty(registration.getNMTokensFromPreviousAttempts())) {\n         List\u003cNMToken\u003e tempTokens \u003d homeResponse.getNMTokens();\n         if (!isNullOrEmpty(tempTokens)) {\n           tempTokens.addAll(registration.getNMTokensFromPreviousAttempts());\n           homeResponse.setNMTokens(tempTokens);\n         } else {\n           homeResponse\n               .setNMTokens(registration.getNMTokensFromPreviousAttempts());\n         }\n       }\n     }\n-\n-    return homeResponse;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void mergeRegistrationResponses(AllocateResponse homeResponse,\n      Map\u003cSubClusterId, RegisterApplicationMasterResponse\u003e registrations) {\n\n    for (Entry\u003cSubClusterId, RegisterApplicationMasterResponse\u003e entry :\n        registrations.entrySet()) {\n      RegisterApplicationMasterResponse registration \u003d entry.getValue();\n\n      if (!isNullOrEmpty(registration.getContainersFromPreviousAttempts())) {\n        List\u003cContainer\u003e tempContainers \u003d homeResponse.getAllocatedContainers();\n        if (!isNullOrEmpty(tempContainers)) {\n          tempContainers\n              .addAll(registration.getContainersFromPreviousAttempts());\n          homeResponse.setAllocatedContainers(tempContainers);\n        } else {\n          homeResponse.setAllocatedContainers(\n              registration.getContainersFromPreviousAttempts());\n        }\n        cacheAllocatedContainers(\n            registration.getContainersFromPreviousAttempts(), entry.getKey());\n      }\n\n      if (!isNullOrEmpty(registration.getNMTokensFromPreviousAttempts())) {\n        List\u003cNMToken\u003e tempTokens \u003d homeResponse.getNMTokens();\n        if (!isNullOrEmpty(tempTokens)) {\n          tempTokens.addAll(registration.getNMTokensFromPreviousAttempts());\n          homeResponse.setNMTokens(tempTokens);\n        } else {\n          homeResponse\n              .setNMTokens(registration.getNMTokensFromPreviousAttempts());\n        }\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java",
          "extendedDetails": {}
        }
      ]
    },
    "70b1a757f13b01a9192ea5fb0820ba7babfd974e": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6511. Federation: transparently spanning application across multiple sub-clusters. (Botong Huang via Subru).\n\n(cherry picked from commit 8c988d235eaf0972783985b1ab24680d029aea79)\n",
      "commitDate": "01/08/17 5:28 PM",
      "commitName": "70b1a757f13b01a9192ea5fb0820ba7babfd974e",
      "commitAuthor": "Subru Krishnan",
      "diff": "@@ -0,0 +1,36 @@\n+  private AllocateResponse mergeRegistrationResponses(\n+      AllocateResponse homeResponse,\n+      Map\u003cSubClusterId, RegisterApplicationMasterResponse\u003e registrations) {\n+\n+    for (Entry\u003cSubClusterId, RegisterApplicationMasterResponse\u003e entry :\n+        registrations.entrySet()) {\n+      RegisterApplicationMasterResponse registration \u003d entry.getValue();\n+\n+      if (!isNullOrEmpty(registration.getContainersFromPreviousAttempts())) {\n+        List\u003cContainer\u003e tempContainers \u003d homeResponse.getAllocatedContainers();\n+        if (!isNullOrEmpty(tempContainers)) {\n+          tempContainers\n+              .addAll(registration.getContainersFromPreviousAttempts());\n+          homeResponse.setAllocatedContainers(tempContainers);\n+        } else {\n+          homeResponse.setAllocatedContainers(\n+              registration.getContainersFromPreviousAttempts());\n+        }\n+        cacheAllocatedContainers(\n+            registration.getContainersFromPreviousAttempts(), entry.getKey());\n+      }\n+\n+      if (!isNullOrEmpty(registration.getNMTokensFromPreviousAttempts())) {\n+        List\u003cNMToken\u003e tempTokens \u003d homeResponse.getNMTokens();\n+        if (!isNullOrEmpty(tempTokens)) {\n+          tempTokens.addAll(registration.getNMTokensFromPreviousAttempts());\n+          homeResponse.setNMTokens(tempTokens);\n+        } else {\n+          homeResponse\n+              .setNMTokens(registration.getNMTokensFromPreviousAttempts());\n+        }\n+      }\n+    }\n+\n+    return homeResponse;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private AllocateResponse mergeRegistrationResponses(\n      AllocateResponse homeResponse,\n      Map\u003cSubClusterId, RegisterApplicationMasterResponse\u003e registrations) {\n\n    for (Entry\u003cSubClusterId, RegisterApplicationMasterResponse\u003e entry :\n        registrations.entrySet()) {\n      RegisterApplicationMasterResponse registration \u003d entry.getValue();\n\n      if (!isNullOrEmpty(registration.getContainersFromPreviousAttempts())) {\n        List\u003cContainer\u003e tempContainers \u003d homeResponse.getAllocatedContainers();\n        if (!isNullOrEmpty(tempContainers)) {\n          tempContainers\n              .addAll(registration.getContainersFromPreviousAttempts());\n          homeResponse.setAllocatedContainers(tempContainers);\n        } else {\n          homeResponse.setAllocatedContainers(\n              registration.getContainersFromPreviousAttempts());\n        }\n        cacheAllocatedContainers(\n            registration.getContainersFromPreviousAttempts(), entry.getKey());\n      }\n\n      if (!isNullOrEmpty(registration.getNMTokensFromPreviousAttempts())) {\n        List\u003cNMToken\u003e tempTokens \u003d homeResponse.getNMTokens();\n        if (!isNullOrEmpty(tempTokens)) {\n          tempTokens.addAll(registration.getNMTokensFromPreviousAttempts());\n          homeResponse.setNMTokens(tempTokens);\n        } else {\n          homeResponse\n              .setNMTokens(registration.getNMTokensFromPreviousAttempts());\n        }\n      }\n    }\n\n    return homeResponse;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java"
    }
  }
}