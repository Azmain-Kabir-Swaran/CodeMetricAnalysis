{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LpSolver.java",
  "functionName": "generateUnderAllocationConstraints",
  "functionId": "generateUnderAllocationConstraints___lpModel-ExpressionsBasedModel(modifiers-final)__cJobITimeK-double(modifiers-final)__uaPredict-Variable[](modifiers-final)__ua-Variable[](modifiers-final)__x-Variable[](modifiers-final)__indexJobITimeK-int(modifiers-final)__timeK-int(modifiers-final)",
  "sourceFilePath": "hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/impl/LpSolver.java",
  "functionStartLine": 126,
  "functionEndLine": 154,
  "numCommitsSeen": 1,
  "timeTaken": 383,
  "changeHistory": [
    "625039ef20e6011ab360131d70582a6e4bf2ec1d"
  ],
  "changeHistoryShort": {
    "625039ef20e6011ab360131d70582a6e4bf2ec1d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "625039ef20e6011ab360131d70582a6e4bf2ec1d": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-14840. Tool to estimate resource requirements of an application pipeline based on prior executions. (Rui Li via Subru).\n",
      "commitDate": "25/10/17 3:51 PM",
      "commitName": "625039ef20e6011ab360131d70582a6e4bf2ec1d",
      "commitAuthor": "Subru Krishnan",
      "diff": "@@ -0,0 +1,29 @@\n+  private void generateUnderAllocationConstraints(\n+      final ExpressionsBasedModel lpModel, final double cJobITimeK,\n+      final Variable[] uaPredict, final Variable[] ua, final Variable[] x,\n+      final int indexJobITimeK, final int timeK) {\n+    // uaPredict_job_i_timeK + x_timeK \u003e\u003d cJobITimeK\n+    Expression underAllocPredictExpression \u003d\n+        lpModel.addExpression(\"under_alloc_predict_\" + indexJobITimeK);\n+    underAllocPredictExpression.set(uaPredict[indexJobITimeK], 1);\n+    underAllocPredictExpression.set(x[timeK], 1);\n+    underAllocPredictExpression.lower(cJobITimeK); // \u003e\u003d\n+    if (timeK \u003e\u003d 1) {\n+      /** Recursively calculate container under-allocation. */\n+      // ua_job_i_timeK \u003e\u003d ua_job_i_time_(k-1) + cJobITimeK - x_timeK\n+      Expression underAllocExpression \u003d\n+          lpModel.addExpression(\"under_alloc_\" + indexJobITimeK);\n+      underAllocExpression.set(ua[indexJobITimeK], 1);\n+      underAllocExpression.set(ua[indexJobITimeK - 1], -1);\n+      underAllocExpression.set(x[timeK], 1);\n+      underAllocExpression.lower(cJobITimeK); // \u003e\u003d\n+    } else {\n+      /** Initial value for container under-allocation. */\n+      // ua_job_i_time_0 \u003e\u003d cJobI_time_0 - x_time_0\n+      Expression underAllocExpression \u003d\n+          lpModel.addExpression(\"under_alloc_\" + indexJobITimeK);\n+      underAllocExpression.set(ua[indexJobITimeK], 1);\n+      underAllocExpression.set(x[timeK], 1);\n+      underAllocExpression.lower(cJobITimeK); // \u003e\u003d\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void generateUnderAllocationConstraints(\n      final ExpressionsBasedModel lpModel, final double cJobITimeK,\n      final Variable[] uaPredict, final Variable[] ua, final Variable[] x,\n      final int indexJobITimeK, final int timeK) {\n    // uaPredict_job_i_timeK + x_timeK \u003e\u003d cJobITimeK\n    Expression underAllocPredictExpression \u003d\n        lpModel.addExpression(\"under_alloc_predict_\" + indexJobITimeK);\n    underAllocPredictExpression.set(uaPredict[indexJobITimeK], 1);\n    underAllocPredictExpression.set(x[timeK], 1);\n    underAllocPredictExpression.lower(cJobITimeK); // \u003e\u003d\n    if (timeK \u003e\u003d 1) {\n      /** Recursively calculate container under-allocation. */\n      // ua_job_i_timeK \u003e\u003d ua_job_i_time_(k-1) + cJobITimeK - x_timeK\n      Expression underAllocExpression \u003d\n          lpModel.addExpression(\"under_alloc_\" + indexJobITimeK);\n      underAllocExpression.set(ua[indexJobITimeK], 1);\n      underAllocExpression.set(ua[indexJobITimeK - 1], -1);\n      underAllocExpression.set(x[timeK], 1);\n      underAllocExpression.lower(cJobITimeK); // \u003e\u003d\n    } else {\n      /** Initial value for container under-allocation. */\n      // ua_job_i_time_0 \u003e\u003d cJobI_time_0 - x_time_0\n      Expression underAllocExpression \u003d\n          lpModel.addExpression(\"under_alloc_\" + indexJobITimeK);\n      underAllocExpression.set(ua[indexJobITimeK], 1);\n      underAllocExpression.set(x[timeK], 1);\n      underAllocExpression.lower(cJobITimeK); // \u003e\u003d\n    }\n  }",
      "path": "hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/impl/LpSolver.java"
    }
  }
}