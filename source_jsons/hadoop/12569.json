{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Balancer.java",
  "functionName": "processHostList",
  "functionId": "processHostList___args-String[]__i-int__type-String__nodes-Set__String__",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java",
  "functionStartLine": 968,
  "functionEndLine": 990,
  "numCommitsSeen": 91,
  "timeTaken": 1270,
  "changeHistory": [
    "7ecbfd44aa57f5f54c214b7fdedda2500be76f51"
  ],
  "changeHistoryShort": {
    "7ecbfd44aa57f5f54c214b7fdedda2500be76f51": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7ecbfd44aa57f5f54c214b7fdedda2500be76f51": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-8826. In Balancer, add an option to specify the source node list so that balancer only selects blocks to move from those nodes.\n",
      "commitDate": "18/08/15 7:25 PM",
      "commitName": "7ecbfd44aa57f5f54c214b7fdedda2500be76f51",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "diff": "@@ -0,0 +1,23 @@\n+    private static int processHostList(String[] args, int i, String type,\n+        Set\u003cString\u003e nodes) {\n+      Preconditions.checkArgument(++i \u003c args.length,\n+          \"List of %s nodes | -f \u003cfilename\u003e is missing: args\u003d%s\",\n+          type, Arrays.toString(args));\n+      if (\"-f\".equalsIgnoreCase(args[i])) {\n+        Preconditions.checkArgument(++i \u003c args.length,\n+            \"File containing %s nodes is not specified: args\u003d%s\",\n+            type, Arrays.toString(args));\n+\n+        final String filename \u003d args[i];\n+        try {\n+          HostsFileReader.readFileToSet(type, filename, nodes);\n+        } catch (IOException e) {\n+          throw new IllegalArgumentException(\n+              \"Failed to read \" + type + \" node list from file: \" + filename);\n+        }\n+      } else {\n+        final String[] addresses \u003d StringUtils.getTrimmedStrings(args[i]);\n+        nodes.addAll(Arrays.asList(addresses));\n+      }\n+      return i;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private static int processHostList(String[] args, int i, String type,\n        Set\u003cString\u003e nodes) {\n      Preconditions.checkArgument(++i \u003c args.length,\n          \"List of %s nodes | -f \u003cfilename\u003e is missing: args\u003d%s\",\n          type, Arrays.toString(args));\n      if (\"-f\".equalsIgnoreCase(args[i])) {\n        Preconditions.checkArgument(++i \u003c args.length,\n            \"File containing %s nodes is not specified: args\u003d%s\",\n            type, Arrays.toString(args));\n\n        final String filename \u003d args[i];\n        try {\n          HostsFileReader.readFileToSet(type, filename, nodes);\n        } catch (IOException e) {\n          throw new IllegalArgumentException(\n              \"Failed to read \" + type + \" node list from file: \" + filename);\n        }\n      } else {\n        final String[] addresses \u003d StringUtils.getTrimmedStrings(args[i]);\n        nodes.addAll(Arrays.asList(addresses));\n      }\n      return i;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/balancer/Balancer.java"
    }
  }
}