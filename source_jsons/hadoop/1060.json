{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ShortCircuitCache.java",
  "functionName": "fetch",
  "functionId": "fetch___key-ExtendedBlockId__waitable-Waitable__ShortCircuitReplicaInfo__",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java",
  "functionStartLine": 737,
  "functionEndLine": 777,
  "numCommitsSeen": 33,
  "timeTaken": 4985,
  "changeHistory": [
    "e66e287efe2b43e710137a628f03c7df3ebdf498",
    "39285e6a1978ea5e53bdc1b0aef62421382124a8",
    "6ee0539ede78b640f01c5eac18ded161182a7835",
    "d5a9a3daa0224249221ffa7b8bd5751ab2feca56",
    "c992bcf9c136d3df686655a80e636bb7bb0664da",
    "26d3b7e6ae867596bbced0bfddde22d3c0d976bb",
    "f93d99990a9a02ce693cd74466c2e5f127c1f560",
    "f0d64a078da7e932b9509734f75170e3e525e68c",
    "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be",
    "eccdb9aa8bcdee750583d16a1253f1c5faabd036"
  ],
  "changeHistoryShort": {
    "e66e287efe2b43e710137a628f03c7df3ebdf498": "Ymodifierchange",
    "39285e6a1978ea5e53bdc1b0aef62421382124a8": "Ybodychange",
    "6ee0539ede78b640f01c5eac18ded161182a7835": "Ybodychange",
    "d5a9a3daa0224249221ffa7b8bd5751ab2feca56": "Ybodychange",
    "c992bcf9c136d3df686655a80e636bb7bb0664da": "Yfilerename",
    "26d3b7e6ae867596bbced0bfddde22d3c0d976bb": "Ybodychange",
    "f93d99990a9a02ce693cd74466c2e5f127c1f560": "Yfilerename",
    "f0d64a078da7e932b9509734f75170e3e525e68c": "Yparameterchange",
    "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be": "Ymultichange(Ymovefromfile,Yreturntypechange,Ymodifierchange,Yexceptionschange,Ybodychange,Yparameterchange)",
    "eccdb9aa8bcdee750583d16a1253f1c5faabd036": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e66e287efe2b43e710137a628f03c7df3ebdf498": {
      "type": "Ymodifierchange",
      "commitMessage": "HDFS-13330. ShortCircuitCache#fetchOrCreate never retries. Contributed by Gabor Bota.\n",
      "commitDate": "13/04/18 9:17 AM",
      "commitName": "e66e287efe2b43e710137a628f03c7df3ebdf498",
      "commitAuthor": "Wei-Chiu Chuang",
      "commitDateOld": "30/01/18 3:25 PM",
      "commitNameOld": "2e7331ca264dd366b975f3c8e610cf84eb8cc155",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 72.7,
      "commitsBetweenForRepo": 631,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n-  private ShortCircuitReplicaInfo fetch(ExtendedBlockId key,\n+  protected ShortCircuitReplicaInfo fetch(ExtendedBlockId key,\n       Waitable\u003cShortCircuitReplicaInfo\u003e waitable) throws RetriableException {\n     // Another thread is already in the process of loading this\n     // ShortCircuitReplica.  So we simply wait for it to complete.\n     ShortCircuitReplicaInfo info;\n     try {\n       LOG.trace(\"{}: found waitable for {}\", this, key);\n       info \u003d waitable.await();\n     } catch (InterruptedException e) {\n       LOG.info(this + \": interrupted while waiting for \" + key);\n       Thread.currentThread().interrupt();\n       throw new RetriableException(\"interrupted\");\n     }\n     if (info.getInvalidTokenException() !\u003d null) {\n       LOG.info(this + \": could not get \" + key + \" due to InvalidToken \" +\n           \"exception.\", info.getInvalidTokenException());\n       return info;\n     }\n     ShortCircuitReplica replica \u003d info.getReplica();\n     if (replica \u003d\u003d null) {\n       LOG.warn(this + \": failed to get \" + key);\n       return info;\n     }\n     if (replica.purged) {\n       // Ignore replicas that have already been purged from the cache.\n       throw new RetriableException(\"Ignoring purged replica \" +\n           replica + \".  Retrying.\");\n     }\n     // Check if the replica is stale before using it.\n     // If it is, purge it and retry.\n     if (replica.isStale()) {\n       LOG.info(this + \": got stale replica \" + replica + \".  Removing \" +\n           \"this replica from the replicaInfoMap and retrying.\");\n       // Remove the cache\u0027s reference to the replica.  This may or may not\n       // trigger a close.\n       purge(replica);\n       throw new RetriableException(\"ignoring stale replica \" + replica);\n     }\n     ref(replica);\n     return info;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected ShortCircuitReplicaInfo fetch(ExtendedBlockId key,\n      Waitable\u003cShortCircuitReplicaInfo\u003e waitable) throws RetriableException {\n    // Another thread is already in the process of loading this\n    // ShortCircuitReplica.  So we simply wait for it to complete.\n    ShortCircuitReplicaInfo info;\n    try {\n      LOG.trace(\"{}: found waitable for {}\", this, key);\n      info \u003d waitable.await();\n    } catch (InterruptedException e) {\n      LOG.info(this + \": interrupted while waiting for \" + key);\n      Thread.currentThread().interrupt();\n      throw new RetriableException(\"interrupted\");\n    }\n    if (info.getInvalidTokenException() !\u003d null) {\n      LOG.info(this + \": could not get \" + key + \" due to InvalidToken \" +\n          \"exception.\", info.getInvalidTokenException());\n      return info;\n    }\n    ShortCircuitReplica replica \u003d info.getReplica();\n    if (replica \u003d\u003d null) {\n      LOG.warn(this + \": failed to get \" + key);\n      return info;\n    }\n    if (replica.purged) {\n      // Ignore replicas that have already been purged from the cache.\n      throw new RetriableException(\"Ignoring purged replica \" +\n          replica + \".  Retrying.\");\n    }\n    // Check if the replica is stale before using it.\n    // If it is, purge it and retry.\n    if (replica.isStale()) {\n      LOG.info(this + \": got stale replica \" + replica + \".  Removing \" +\n          \"this replica from the replicaInfoMap and retrying.\");\n      // Remove the cache\u0027s reference to the replica.  This may or may not\n      // trigger a close.\n      purge(replica);\n      throw new RetriableException(\"ignoring stale replica \" + replica);\n    }\n    ref(replica);\n    return info;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[protected]"
      }
    },
    "39285e6a1978ea5e53bdc1b0aef62421382124a8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8971. Remove guards when calling LOG.debug() and LOG.trace() in client package. Contributed by Mingliang Liu.\n",
      "commitDate": "29/09/15 5:52 PM",
      "commitName": "39285e6a1978ea5e53bdc1b0aef62421382124a8",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "29/09/15 5:51 PM",
      "commitNameOld": "6ee0539ede78b640f01c5eac18ded161182a7835",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,41 @@\n   private ShortCircuitReplicaInfo fetch(ExtendedBlockId key,\n       Waitable\u003cShortCircuitReplicaInfo\u003e waitable) throws RetriableException {\n     // Another thread is already in the process of loading this\n     // ShortCircuitReplica.  So we simply wait for it to complete.\n     ShortCircuitReplicaInfo info;\n     try {\n-      if (LOG.isTraceEnabled()) {\n-        LOG.trace(this + \": found waitable for \" + key);\n-      }\n+      LOG.trace(\"{}: found waitable for {}\", this, key);\n       info \u003d waitable.await();\n     } catch (InterruptedException e) {\n       LOG.info(this + \": interrupted while waiting for \" + key);\n       Thread.currentThread().interrupt();\n       throw new RetriableException(\"interrupted\");\n     }\n     if (info.getInvalidTokenException() !\u003d null) {\n       LOG.info(this + \": could not get \" + key + \" due to InvalidToken \" +\n             \"exception.\", info.getInvalidTokenException());\n       return info;\n     }\n     ShortCircuitReplica replica \u003d info.getReplica();\n     if (replica \u003d\u003d null) {\n       LOG.warn(this + \": failed to get \" + key);\n       return info;\n     }\n     if (replica.purged) {\n       // Ignore replicas that have already been purged from the cache.\n       throw new RetriableException(\"Ignoring purged replica \" +\n           replica + \".  Retrying.\");\n     }\n     // Check if the replica is stale before using it.\n     // If it is, purge it and retry.\n     if (replica.isStale()) {\n       LOG.info(this + \": got stale replica \" + replica + \".  Removing \" +\n           \"this replica from the replicaInfoMap and retrying.\");\n       // Remove the cache\u0027s reference to the replica.  This may or may not\n       // trigger a close.\n       purge(replica);\n       throw new RetriableException(\"ignoring stale replica \" + replica);\n     }\n     ref(replica);\n     return info;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ShortCircuitReplicaInfo fetch(ExtendedBlockId key,\n      Waitable\u003cShortCircuitReplicaInfo\u003e waitable) throws RetriableException {\n    // Another thread is already in the process of loading this\n    // ShortCircuitReplica.  So we simply wait for it to complete.\n    ShortCircuitReplicaInfo info;\n    try {\n      LOG.trace(\"{}: found waitable for {}\", this, key);\n      info \u003d waitable.await();\n    } catch (InterruptedException e) {\n      LOG.info(this + \": interrupted while waiting for \" + key);\n      Thread.currentThread().interrupt();\n      throw new RetriableException(\"interrupted\");\n    }\n    if (info.getInvalidTokenException() !\u003d null) {\n      LOG.info(this + \": could not get \" + key + \" due to InvalidToken \" +\n            \"exception.\", info.getInvalidTokenException());\n      return info;\n    }\n    ShortCircuitReplica replica \u003d info.getReplica();\n    if (replica \u003d\u003d null) {\n      LOG.warn(this + \": failed to get \" + key);\n      return info;\n    }\n    if (replica.purged) {\n      // Ignore replicas that have already been purged from the cache.\n      throw new RetriableException(\"Ignoring purged replica \" +\n          replica + \".  Retrying.\");\n    }\n    // Check if the replica is stale before using it.\n    // If it is, purge it and retry.\n    if (replica.isStale()) {\n      LOG.info(this + \": got stale replica \" + replica + \".  Removing \" +\n          \"this replica from the replicaInfoMap and retrying.\");\n      // Remove the cache\u0027s reference to the replica.  This may or may not\n      // trigger a close.\n      purge(replica);\n      throw new RetriableException(\"ignoring stale replica \" + replica);\n    }\n    ref(replica);\n    return info;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java",
      "extendedDetails": {}
    },
    "6ee0539ede78b640f01c5eac18ded161182a7835": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HDFS-9170. Move libhdfs / fuse-dfs / libwebhdfs to hdfs-client. Contributed by Haohui Mai.\"\n\nThis reverts commit d5a9a3daa0224249221ffa7b8bd5751ab2feca56.\n",
      "commitDate": "29/09/15 5:51 PM",
      "commitName": "6ee0539ede78b640f01c5eac18ded161182a7835",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "29/09/15 5:48 PM",
      "commitNameOld": "d5a9a3daa0224249221ffa7b8bd5751ab2feca56",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,43 @@\n   private ShortCircuitReplicaInfo fetch(ExtendedBlockId key,\n       Waitable\u003cShortCircuitReplicaInfo\u003e waitable) throws RetriableException {\n     // Another thread is already in the process of loading this\n     // ShortCircuitReplica.  So we simply wait for it to complete.\n     ShortCircuitReplicaInfo info;\n     try {\n-      LOG.trace(\"{}: found waitable for {}\", this, key);\n+      if (LOG.isTraceEnabled()) {\n+        LOG.trace(this + \": found waitable for \" + key);\n+      }\n       info \u003d waitable.await();\n     } catch (InterruptedException e) {\n       LOG.info(this + \": interrupted while waiting for \" + key);\n       Thread.currentThread().interrupt();\n       throw new RetriableException(\"interrupted\");\n     }\n     if (info.getInvalidTokenException() !\u003d null) {\n       LOG.info(this + \": could not get \" + key + \" due to InvalidToken \" +\n             \"exception.\", info.getInvalidTokenException());\n       return info;\n     }\n     ShortCircuitReplica replica \u003d info.getReplica();\n     if (replica \u003d\u003d null) {\n       LOG.warn(this + \": failed to get \" + key);\n       return info;\n     }\n     if (replica.purged) {\n       // Ignore replicas that have already been purged from the cache.\n       throw new RetriableException(\"Ignoring purged replica \" +\n           replica + \".  Retrying.\");\n     }\n     // Check if the replica is stale before using it.\n     // If it is, purge it and retry.\n     if (replica.isStale()) {\n       LOG.info(this + \": got stale replica \" + replica + \".  Removing \" +\n           \"this replica from the replicaInfoMap and retrying.\");\n       // Remove the cache\u0027s reference to the replica.  This may or may not\n       // trigger a close.\n       purge(replica);\n       throw new RetriableException(\"ignoring stale replica \" + replica);\n     }\n     ref(replica);\n     return info;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ShortCircuitReplicaInfo fetch(ExtendedBlockId key,\n      Waitable\u003cShortCircuitReplicaInfo\u003e waitable) throws RetriableException {\n    // Another thread is already in the process of loading this\n    // ShortCircuitReplica.  So we simply wait for it to complete.\n    ShortCircuitReplicaInfo info;\n    try {\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(this + \": found waitable for \" + key);\n      }\n      info \u003d waitable.await();\n    } catch (InterruptedException e) {\n      LOG.info(this + \": interrupted while waiting for \" + key);\n      Thread.currentThread().interrupt();\n      throw new RetriableException(\"interrupted\");\n    }\n    if (info.getInvalidTokenException() !\u003d null) {\n      LOG.info(this + \": could not get \" + key + \" due to InvalidToken \" +\n            \"exception.\", info.getInvalidTokenException());\n      return info;\n    }\n    ShortCircuitReplica replica \u003d info.getReplica();\n    if (replica \u003d\u003d null) {\n      LOG.warn(this + \": failed to get \" + key);\n      return info;\n    }\n    if (replica.purged) {\n      // Ignore replicas that have already been purged from the cache.\n      throw new RetriableException(\"Ignoring purged replica \" +\n          replica + \".  Retrying.\");\n    }\n    // Check if the replica is stale before using it.\n    // If it is, purge it and retry.\n    if (replica.isStale()) {\n      LOG.info(this + \": got stale replica \" + replica + \".  Removing \" +\n          \"this replica from the replicaInfoMap and retrying.\");\n      // Remove the cache\u0027s reference to the replica.  This may or may not\n      // trigger a close.\n      purge(replica);\n      throw new RetriableException(\"ignoring stale replica \" + replica);\n    }\n    ref(replica);\n    return info;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java",
      "extendedDetails": {}
    },
    "d5a9a3daa0224249221ffa7b8bd5751ab2feca56": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9170. Move libhdfs / fuse-dfs / libwebhdfs to hdfs-client. Contributed by Haohui Mai.\n",
      "commitDate": "29/09/15 5:48 PM",
      "commitName": "d5a9a3daa0224249221ffa7b8bd5751ab2feca56",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "26/08/15 2:02 PM",
      "commitNameOld": "c992bcf9c136d3df686655a80e636bb7bb0664da",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 34.16,
      "commitsBetweenForRepo": 233,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,41 @@\n   private ShortCircuitReplicaInfo fetch(ExtendedBlockId key,\n       Waitable\u003cShortCircuitReplicaInfo\u003e waitable) throws RetriableException {\n     // Another thread is already in the process of loading this\n     // ShortCircuitReplica.  So we simply wait for it to complete.\n     ShortCircuitReplicaInfo info;\n     try {\n-      if (LOG.isTraceEnabled()) {\n-        LOG.trace(this + \": found waitable for \" + key);\n-      }\n+      LOG.trace(\"{}: found waitable for {}\", this, key);\n       info \u003d waitable.await();\n     } catch (InterruptedException e) {\n       LOG.info(this + \": interrupted while waiting for \" + key);\n       Thread.currentThread().interrupt();\n       throw new RetriableException(\"interrupted\");\n     }\n     if (info.getInvalidTokenException() !\u003d null) {\n       LOG.info(this + \": could not get \" + key + \" due to InvalidToken \" +\n             \"exception.\", info.getInvalidTokenException());\n       return info;\n     }\n     ShortCircuitReplica replica \u003d info.getReplica();\n     if (replica \u003d\u003d null) {\n       LOG.warn(this + \": failed to get \" + key);\n       return info;\n     }\n     if (replica.purged) {\n       // Ignore replicas that have already been purged from the cache.\n       throw new RetriableException(\"Ignoring purged replica \" +\n           replica + \".  Retrying.\");\n     }\n     // Check if the replica is stale before using it.\n     // If it is, purge it and retry.\n     if (replica.isStale()) {\n       LOG.info(this + \": got stale replica \" + replica + \".  Removing \" +\n           \"this replica from the replicaInfoMap and retrying.\");\n       // Remove the cache\u0027s reference to the replica.  This may or may not\n       // trigger a close.\n       purge(replica);\n       throw new RetriableException(\"ignoring stale replica \" + replica);\n     }\n     ref(replica);\n     return info;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ShortCircuitReplicaInfo fetch(ExtendedBlockId key,\n      Waitable\u003cShortCircuitReplicaInfo\u003e waitable) throws RetriableException {\n    // Another thread is already in the process of loading this\n    // ShortCircuitReplica.  So we simply wait for it to complete.\n    ShortCircuitReplicaInfo info;\n    try {\n      LOG.trace(\"{}: found waitable for {}\", this, key);\n      info \u003d waitable.await();\n    } catch (InterruptedException e) {\n      LOG.info(this + \": interrupted while waiting for \" + key);\n      Thread.currentThread().interrupt();\n      throw new RetriableException(\"interrupted\");\n    }\n    if (info.getInvalidTokenException() !\u003d null) {\n      LOG.info(this + \": could not get \" + key + \" due to InvalidToken \" +\n            \"exception.\", info.getInvalidTokenException());\n      return info;\n    }\n    ShortCircuitReplica replica \u003d info.getReplica();\n    if (replica \u003d\u003d null) {\n      LOG.warn(this + \": failed to get \" + key);\n      return info;\n    }\n    if (replica.purged) {\n      // Ignore replicas that have already been purged from the cache.\n      throw new RetriableException(\"Ignoring purged replica \" +\n          replica + \".  Retrying.\");\n    }\n    // Check if the replica is stale before using it.\n    // If it is, purge it and retry.\n    if (replica.isStale()) {\n      LOG.info(this + \": got stale replica \" + replica + \".  Removing \" +\n          \"this replica from the replicaInfoMap and retrying.\");\n      // Remove the cache\u0027s reference to the replica.  This may or may not\n      // trigger a close.\n      purge(replica);\n      throw new RetriableException(\"ignoring stale replica \" + replica);\n    }\n    ref(replica);\n    return info;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java",
      "extendedDetails": {}
    },
    "c992bcf9c136d3df686655a80e636bb7bb0664da": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8951. Move the shortcircuit package to hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "26/08/15 2:02 PM",
      "commitName": "c992bcf9c136d3df686655a80e636bb7bb0664da",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "25/08/15 2:29 PM",
      "commitNameOld": "a4d9acc51d1a977bc333da17780c00c72e8546f1",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 0.98,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private ShortCircuitReplicaInfo fetch(ExtendedBlockId key,\n      Waitable\u003cShortCircuitReplicaInfo\u003e waitable) throws RetriableException {\n    // Another thread is already in the process of loading this\n    // ShortCircuitReplica.  So we simply wait for it to complete.\n    ShortCircuitReplicaInfo info;\n    try {\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(this + \": found waitable for \" + key);\n      }\n      info \u003d waitable.await();\n    } catch (InterruptedException e) {\n      LOG.info(this + \": interrupted while waiting for \" + key);\n      Thread.currentThread().interrupt();\n      throw new RetriableException(\"interrupted\");\n    }\n    if (info.getInvalidTokenException() !\u003d null) {\n      LOG.info(this + \": could not get \" + key + \" due to InvalidToken \" +\n            \"exception.\", info.getInvalidTokenException());\n      return info;\n    }\n    ShortCircuitReplica replica \u003d info.getReplica();\n    if (replica \u003d\u003d null) {\n      LOG.warn(this + \": failed to get \" + key);\n      return info;\n    }\n    if (replica.purged) {\n      // Ignore replicas that have already been purged from the cache.\n      throw new RetriableException(\"Ignoring purged replica \" +\n          replica + \".  Retrying.\");\n    }\n    // Check if the replica is stale before using it.\n    // If it is, purge it and retry.\n    if (replica.isStale()) {\n      LOG.info(this + \": got stale replica \" + replica + \".  Removing \" +\n          \"this replica from the replicaInfoMap and retrying.\");\n      // Remove the cache\u0027s reference to the replica.  This may or may not\n      // trigger a close.\n      purge(replica);\n      throw new RetriableException(\"ignoring stale replica \" + replica);\n    }\n    ref(replica);\n    return info;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java"
      }
    },
    "26d3b7e6ae867596bbced0bfddde22d3c0d976bb": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7394. Log at INFO level, not WARN level, when InvalidToken is seen in ShortCircuitCache (Keith Pak via Colin P. McCabe)\n",
      "commitDate": "16/11/14 9:20 PM",
      "commitName": "26d3b7e6ae867596bbced0bfddde22d3c0d976bb",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "02/07/14 12:43 PM",
      "commitNameOld": "297e3c72fb7369d32b1d76482dbff43eb0316edd",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 137.4,
      "commitsBetweenForRepo": 1329,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n   private ShortCircuitReplicaInfo fetch(ExtendedBlockId key,\n       Waitable\u003cShortCircuitReplicaInfo\u003e waitable) throws RetriableException {\n     // Another thread is already in the process of loading this\n     // ShortCircuitReplica.  So we simply wait for it to complete.\n     ShortCircuitReplicaInfo info;\n     try {\n       if (LOG.isTraceEnabled()) {\n         LOG.trace(this + \": found waitable for \" + key);\n       }\n       info \u003d waitable.await();\n     } catch (InterruptedException e) {\n       LOG.info(this + \": interrupted while waiting for \" + key);\n       Thread.currentThread().interrupt();\n       throw new RetriableException(\"interrupted\");\n     }\n     if (info.getInvalidTokenException() !\u003d null) {\n-      LOG.warn(this + \": could not get \" + key + \" due to InvalidToken \" +\n+      LOG.info(this + \": could not get \" + key + \" due to InvalidToken \" +\n             \"exception.\", info.getInvalidTokenException());\n       return info;\n     }\n     ShortCircuitReplica replica \u003d info.getReplica();\n     if (replica \u003d\u003d null) {\n       LOG.warn(this + \": failed to get \" + key);\n       return info;\n     }\n     if (replica.purged) {\n       // Ignore replicas that have already been purged from the cache.\n       throw new RetriableException(\"Ignoring purged replica \" +\n           replica + \".  Retrying.\");\n     }\n     // Check if the replica is stale before using it.\n     // If it is, purge it and retry.\n     if (replica.isStale()) {\n       LOG.info(this + \": got stale replica \" + replica + \".  Removing \" +\n           \"this replica from the replicaInfoMap and retrying.\");\n       // Remove the cache\u0027s reference to the replica.  This may or may not\n       // trigger a close.\n       purge(replica);\n       throw new RetriableException(\"ignoring stale replica \" + replica);\n     }\n     ref(replica);\n     return info;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ShortCircuitReplicaInfo fetch(ExtendedBlockId key,\n      Waitable\u003cShortCircuitReplicaInfo\u003e waitable) throws RetriableException {\n    // Another thread is already in the process of loading this\n    // ShortCircuitReplica.  So we simply wait for it to complete.\n    ShortCircuitReplicaInfo info;\n    try {\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(this + \": found waitable for \" + key);\n      }\n      info \u003d waitable.await();\n    } catch (InterruptedException e) {\n      LOG.info(this + \": interrupted while waiting for \" + key);\n      Thread.currentThread().interrupt();\n      throw new RetriableException(\"interrupted\");\n    }\n    if (info.getInvalidTokenException() !\u003d null) {\n      LOG.info(this + \": could not get \" + key + \" due to InvalidToken \" +\n            \"exception.\", info.getInvalidTokenException());\n      return info;\n    }\n    ShortCircuitReplica replica \u003d info.getReplica();\n    if (replica \u003d\u003d null) {\n      LOG.warn(this + \": failed to get \" + key);\n      return info;\n    }\n    if (replica.purged) {\n      // Ignore replicas that have already been purged from the cache.\n      throw new RetriableException(\"Ignoring purged replica \" +\n          replica + \".  Retrying.\");\n    }\n    // Check if the replica is stale before using it.\n    // If it is, purge it and retry.\n    if (replica.isStale()) {\n      LOG.info(this + \": got stale replica \" + replica + \".  Removing \" +\n          \"this replica from the replicaInfoMap and retrying.\");\n      // Remove the cache\u0027s reference to the replica.  This may or may not\n      // trigger a close.\n      purge(replica);\n      throw new RetriableException(\"ignoring stale replica \" + replica);\n    }\n    ref(replica);\n    return info;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java",
      "extendedDetails": {}
    },
    "f93d99990a9a02ce693cd74466c2e5f127c1f560": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-6167. Relocate the non-public API classes in the hdfs.client package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1583878 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/04/14 10:09 PM",
      "commitName": "f93d99990a9a02ce693cd74466c2e5f127c1f560",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "01/04/14 6:00 PM",
      "commitNameOld": "5c7cb51775bd3d4a6e3e1bd501b3a8d747733fe3",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 0.17,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private ShortCircuitReplicaInfo fetch(ExtendedBlockId key,\n      Waitable\u003cShortCircuitReplicaInfo\u003e waitable) throws RetriableException {\n    // Another thread is already in the process of loading this\n    // ShortCircuitReplica.  So we simply wait for it to complete.\n    ShortCircuitReplicaInfo info;\n    try {\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(this + \": found waitable for \" + key);\n      }\n      info \u003d waitable.await();\n    } catch (InterruptedException e) {\n      LOG.info(this + \": interrupted while waiting for \" + key);\n      Thread.currentThread().interrupt();\n      throw new RetriableException(\"interrupted\");\n    }\n    if (info.getInvalidTokenException() !\u003d null) {\n      LOG.warn(this + \": could not get \" + key + \" due to InvalidToken \" +\n            \"exception.\", info.getInvalidTokenException());\n      return info;\n    }\n    ShortCircuitReplica replica \u003d info.getReplica();\n    if (replica \u003d\u003d null) {\n      LOG.warn(this + \": failed to get \" + key);\n      return info;\n    }\n    if (replica.purged) {\n      // Ignore replicas that have already been purged from the cache.\n      throw new RetriableException(\"Ignoring purged replica \" +\n          replica + \".  Retrying.\");\n    }\n    // Check if the replica is stale before using it.\n    // If it is, purge it and retry.\n    if (replica.isStale()) {\n      LOG.info(this + \": got stale replica \" + replica + \".  Removing \" +\n          \"this replica from the replicaInfoMap and retrying.\");\n      // Remove the cache\u0027s reference to the replica.  This may or may not\n      // trigger a close.\n      purge(replica);\n      throw new RetriableException(\"ignoring stale replica \" + replica);\n    }\n    ref(replica);\n    return info;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/ShortCircuitCache.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java"
      }
    },
    "f0d64a078da7e932b9509734f75170e3e525e68c": {
      "type": "Yparameterchange",
      "commitMessage": "HDFS-5940.  Minor cleanups to ShortCircuitReplica, FsDatasetCache, and DomainSocketWatcher (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1567835 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/02/14 7:10 PM",
      "commitName": "f0d64a078da7e932b9509734f75170e3e525e68c",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "12/02/14 11:08 AM",
      "commitNameOld": "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 0.33,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n-  private ShortCircuitReplicaInfo fetch(Key key,\n+  private ShortCircuitReplicaInfo fetch(ExtendedBlockId key,\n       Waitable\u003cShortCircuitReplicaInfo\u003e waitable) throws RetriableException {\n     // Another thread is already in the process of loading this\n     // ShortCircuitReplica.  So we simply wait for it to complete.\n     ShortCircuitReplicaInfo info;\n     try {\n       if (LOG.isTraceEnabled()) {\n         LOG.trace(this + \": found waitable for \" + key);\n       }\n       info \u003d waitable.await();\n     } catch (InterruptedException e) {\n       LOG.info(this + \": interrupted while waiting for \" + key);\n       Thread.currentThread().interrupt();\n       throw new RetriableException(\"interrupted\");\n     }\n     if (info.getInvalidTokenException() !\u003d null) {\n       LOG.warn(this + \": could not get \" + key + \" due to InvalidToken \" +\n             \"exception.\", info.getInvalidTokenException());\n       return info;\n     }\n     ShortCircuitReplica replica \u003d info.getReplica();\n     if (replica \u003d\u003d null) {\n       LOG.warn(this + \": failed to get \" + key);\n       return info;\n     }\n     if (replica.purged) {\n       // Ignore replicas that have already been purged from the cache.\n       throw new RetriableException(\"Ignoring purged replica \" +\n           replica + \".  Retrying.\");\n     }\n     // Check if the replica is stale before using it.\n     // If it is, purge it and retry.\n     if (replica.isStale()) {\n       LOG.info(this + \": got stale replica \" + replica + \".  Removing \" +\n           \"this replica from the replicaInfoMap and retrying.\");\n       // Remove the cache\u0027s reference to the replica.  This may or may not\n       // trigger a close.\n       purge(replica);\n       throw new RetriableException(\"ignoring stale replica \" + replica);\n     }\n     ref(replica);\n     return info;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ShortCircuitReplicaInfo fetch(ExtendedBlockId key,\n      Waitable\u003cShortCircuitReplicaInfo\u003e waitable) throws RetriableException {\n    // Another thread is already in the process of loading this\n    // ShortCircuitReplica.  So we simply wait for it to complete.\n    ShortCircuitReplicaInfo info;\n    try {\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(this + \": found waitable for \" + key);\n      }\n      info \u003d waitable.await();\n    } catch (InterruptedException e) {\n      LOG.info(this + \": interrupted while waiting for \" + key);\n      Thread.currentThread().interrupt();\n      throw new RetriableException(\"interrupted\");\n    }\n    if (info.getInvalidTokenException() !\u003d null) {\n      LOG.warn(this + \": could not get \" + key + \" due to InvalidToken \" +\n            \"exception.\", info.getInvalidTokenException());\n      return info;\n    }\n    ShortCircuitReplica replica \u003d info.getReplica();\n    if (replica \u003d\u003d null) {\n      LOG.warn(this + \": failed to get \" + key);\n      return info;\n    }\n    if (replica.purged) {\n      // Ignore replicas that have already been purged from the cache.\n      throw new RetriableException(\"Ignoring purged replica \" +\n          replica + \".  Retrying.\");\n    }\n    // Check if the replica is stale before using it.\n    // If it is, purge it and retry.\n    if (replica.isStale()) {\n      LOG.info(this + \": got stale replica \" + replica + \".  Removing \" +\n          \"this replica from the replicaInfoMap and retrying.\");\n      // Remove the cache\u0027s reference to the replica.  This may or may not\n      // trigger a close.\n      purge(replica);\n      throw new RetriableException(\"ignoring stale replica \" + replica);\n    }\n    ref(replica);\n    return info;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/ShortCircuitCache.java",
      "extendedDetails": {
        "oldValue": "[key-Key, waitable-Waitable\u003cShortCircuitReplicaInfo\u003e]",
        "newValue": "[key-ExtendedBlockId, waitable-Waitable\u003cShortCircuitReplicaInfo\u003e]"
      }
    },
    "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be": {
      "type": "Ymultichange(Ymovefromfile,Yreturntypechange,Ymodifierchange,Yexceptionschange,Ybodychange,Yparameterchange)",
      "commitMessage": "HDFS-5810. Unify mmap cache and short-circuit file descriptor cache (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1567720 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/02/14 11:08 AM",
      "commitName": "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be",
      "commitAuthor": "Colin McCabe",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-5810. Unify mmap cache and short-circuit file descriptor cache (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1567720 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/02/14 11:08 AM",
          "commitName": "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "12/02/14 10:02 AM",
          "commitNameOld": "5efc9978ddf35f8f4e194e34a102a729dae69992",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,43 @@\n-  public ClientMmap fetch(DatanodeID datanodeID, ExtendedBlock block,\n-      FileInputStream in) throws IOException, InterruptedException {\n-    LOG.debug(\"fetching mmap with datanodeID\u003d\" + datanodeID + \", \" +\n-        \"block\u003d\" + block);\n-    Key key \u003d new Key(block, datanodeID);\n-    ClientMmap mmap \u003d null;\n+  private ShortCircuitReplicaInfo fetch(Key key,\n+      Waitable\u003cShortCircuitReplicaInfo\u003e waitable) throws RetriableException {\n+    // Another thread is already in the process of loading this\n+    // ShortCircuitReplica.  So we simply wait for it to complete.\n+    ShortCircuitReplicaInfo info;\n     try {\n-      lock.lock();\n-      if (closed) {\n-        throw new IOException(\"ClientMmapManager is closed.\");\n+      if (LOG.isTraceEnabled()) {\n+        LOG.trace(this + \": found waitable for \" + key);\n       }\n-      while (mmap \u003d\u003d null) {\n-        Waitable\u003cClientMmap\u003e entry \u003d mmaps.get(key);\n-        if (entry \u003d\u003d null) {\n-          return create(key, in);\n-        }\n-        mmap \u003d entry.await();\n-      }\n-      if (mmap.ref() \u003d\u003d 1) {\n-        // When going from nobody using the mmap (ref \u003d 0) to somebody\n-        // using the mmap (ref \u003d 1), we must make the mmap un-evictable.\n-        evictable.remove(mmap.getLastEvictableTimeNs());\n-      }\n+      info \u003d waitable.await();\n+    } catch (InterruptedException e) {\n+      LOG.info(this + \": interrupted while waiting for \" + key);\n+      Thread.currentThread().interrupt();\n+      throw new RetriableException(\"interrupted\");\n     }\n-    finally {\n-      lock.unlock();\n+    if (info.getInvalidTokenException() !\u003d null) {\n+      LOG.warn(this + \": could not get \" + key + \" due to InvalidToken \" +\n+            \"exception.\", info.getInvalidTokenException());\n+      return info;\n     }\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"reusing existing mmap with datanodeID\u003d\" + datanodeID +\n-              \", \" + \"block\u003d\" + block);\n+    ShortCircuitReplica replica \u003d info.getReplica();\n+    if (replica \u003d\u003d null) {\n+      LOG.warn(this + \": failed to get \" + key);\n+      return info;\n     }\n-    return mmap;\n+    if (replica.purged) {\n+      // Ignore replicas that have already been purged from the cache.\n+      throw new RetriableException(\"Ignoring purged replica \" +\n+          replica + \".  Retrying.\");\n+    }\n+    // Check if the replica is stale before using it.\n+    // If it is, purge it and retry.\n+    if (replica.isStale()) {\n+      LOG.info(this + \": got stale replica \" + replica + \".  Removing \" +\n+          \"this replica from the replicaInfoMap and retrying.\");\n+      // Remove the cache\u0027s reference to the replica.  This may or may not\n+      // trigger a close.\n+      purge(replica);\n+      throw new RetriableException(\"ignoring stale replica \" + replica);\n+    }\n+    ref(replica);\n+    return info;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ShortCircuitReplicaInfo fetch(Key key,\n      Waitable\u003cShortCircuitReplicaInfo\u003e waitable) throws RetriableException {\n    // Another thread is already in the process of loading this\n    // ShortCircuitReplica.  So we simply wait for it to complete.\n    ShortCircuitReplicaInfo info;\n    try {\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(this + \": found waitable for \" + key);\n      }\n      info \u003d waitable.await();\n    } catch (InterruptedException e) {\n      LOG.info(this + \": interrupted while waiting for \" + key);\n      Thread.currentThread().interrupt();\n      throw new RetriableException(\"interrupted\");\n    }\n    if (info.getInvalidTokenException() !\u003d null) {\n      LOG.warn(this + \": could not get \" + key + \" due to InvalidToken \" +\n            \"exception.\", info.getInvalidTokenException());\n      return info;\n    }\n    ShortCircuitReplica replica \u003d info.getReplica();\n    if (replica \u003d\u003d null) {\n      LOG.warn(this + \": failed to get \" + key);\n      return info;\n    }\n    if (replica.purged) {\n      // Ignore replicas that have already been purged from the cache.\n      throw new RetriableException(\"Ignoring purged replica \" +\n          replica + \".  Retrying.\");\n    }\n    // Check if the replica is stale before using it.\n    // If it is, purge it and retry.\n    if (replica.isStale()) {\n      LOG.info(this + \": got stale replica \" + replica + \".  Removing \" +\n          \"this replica from the replicaInfoMap and retrying.\");\n      // Remove the cache\u0027s reference to the replica.  This may or may not\n      // trigger a close.\n      purge(replica);\n      throw new RetriableException(\"ignoring stale replica \" + replica);\n    }\n    ref(replica);\n    return info;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/ShortCircuitCache.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/ClientMmapManager.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/ShortCircuitCache.java",
            "oldMethodName": "fetch",
            "newMethodName": "fetch"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-5810. Unify mmap cache and short-circuit file descriptor cache (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1567720 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/02/14 11:08 AM",
          "commitName": "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "12/02/14 10:02 AM",
          "commitNameOld": "5efc9978ddf35f8f4e194e34a102a729dae69992",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,43 @@\n-  public ClientMmap fetch(DatanodeID datanodeID, ExtendedBlock block,\n-      FileInputStream in) throws IOException, InterruptedException {\n-    LOG.debug(\"fetching mmap with datanodeID\u003d\" + datanodeID + \", \" +\n-        \"block\u003d\" + block);\n-    Key key \u003d new Key(block, datanodeID);\n-    ClientMmap mmap \u003d null;\n+  private ShortCircuitReplicaInfo fetch(Key key,\n+      Waitable\u003cShortCircuitReplicaInfo\u003e waitable) throws RetriableException {\n+    // Another thread is already in the process of loading this\n+    // ShortCircuitReplica.  So we simply wait for it to complete.\n+    ShortCircuitReplicaInfo info;\n     try {\n-      lock.lock();\n-      if (closed) {\n-        throw new IOException(\"ClientMmapManager is closed.\");\n+      if (LOG.isTraceEnabled()) {\n+        LOG.trace(this + \": found waitable for \" + key);\n       }\n-      while (mmap \u003d\u003d null) {\n-        Waitable\u003cClientMmap\u003e entry \u003d mmaps.get(key);\n-        if (entry \u003d\u003d null) {\n-          return create(key, in);\n-        }\n-        mmap \u003d entry.await();\n-      }\n-      if (mmap.ref() \u003d\u003d 1) {\n-        // When going from nobody using the mmap (ref \u003d 0) to somebody\n-        // using the mmap (ref \u003d 1), we must make the mmap un-evictable.\n-        evictable.remove(mmap.getLastEvictableTimeNs());\n-      }\n+      info \u003d waitable.await();\n+    } catch (InterruptedException e) {\n+      LOG.info(this + \": interrupted while waiting for \" + key);\n+      Thread.currentThread().interrupt();\n+      throw new RetriableException(\"interrupted\");\n     }\n-    finally {\n-      lock.unlock();\n+    if (info.getInvalidTokenException() !\u003d null) {\n+      LOG.warn(this + \": could not get \" + key + \" due to InvalidToken \" +\n+            \"exception.\", info.getInvalidTokenException());\n+      return info;\n     }\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"reusing existing mmap with datanodeID\u003d\" + datanodeID +\n-              \", \" + \"block\u003d\" + block);\n+    ShortCircuitReplica replica \u003d info.getReplica();\n+    if (replica \u003d\u003d null) {\n+      LOG.warn(this + \": failed to get \" + key);\n+      return info;\n     }\n-    return mmap;\n+    if (replica.purged) {\n+      // Ignore replicas that have already been purged from the cache.\n+      throw new RetriableException(\"Ignoring purged replica \" +\n+          replica + \".  Retrying.\");\n+    }\n+    // Check if the replica is stale before using it.\n+    // If it is, purge it and retry.\n+    if (replica.isStale()) {\n+      LOG.info(this + \": got stale replica \" + replica + \".  Removing \" +\n+          \"this replica from the replicaInfoMap and retrying.\");\n+      // Remove the cache\u0027s reference to the replica.  This may or may not\n+      // trigger a close.\n+      purge(replica);\n+      throw new RetriableException(\"ignoring stale replica \" + replica);\n+    }\n+    ref(replica);\n+    return info;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ShortCircuitReplicaInfo fetch(Key key,\n      Waitable\u003cShortCircuitReplicaInfo\u003e waitable) throws RetriableException {\n    // Another thread is already in the process of loading this\n    // ShortCircuitReplica.  So we simply wait for it to complete.\n    ShortCircuitReplicaInfo info;\n    try {\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(this + \": found waitable for \" + key);\n      }\n      info \u003d waitable.await();\n    } catch (InterruptedException e) {\n      LOG.info(this + \": interrupted while waiting for \" + key);\n      Thread.currentThread().interrupt();\n      throw new RetriableException(\"interrupted\");\n    }\n    if (info.getInvalidTokenException() !\u003d null) {\n      LOG.warn(this + \": could not get \" + key + \" due to InvalidToken \" +\n            \"exception.\", info.getInvalidTokenException());\n      return info;\n    }\n    ShortCircuitReplica replica \u003d info.getReplica();\n    if (replica \u003d\u003d null) {\n      LOG.warn(this + \": failed to get \" + key);\n      return info;\n    }\n    if (replica.purged) {\n      // Ignore replicas that have already been purged from the cache.\n      throw new RetriableException(\"Ignoring purged replica \" +\n          replica + \".  Retrying.\");\n    }\n    // Check if the replica is stale before using it.\n    // If it is, purge it and retry.\n    if (replica.isStale()) {\n      LOG.info(this + \": got stale replica \" + replica + \".  Removing \" +\n          \"this replica from the replicaInfoMap and retrying.\");\n      // Remove the cache\u0027s reference to the replica.  This may or may not\n      // trigger a close.\n      purge(replica);\n      throw new RetriableException(\"ignoring stale replica \" + replica);\n    }\n    ref(replica);\n    return info;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/ShortCircuitCache.java",
          "extendedDetails": {
            "oldValue": "ClientMmap",
            "newValue": "ShortCircuitReplicaInfo"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-5810. Unify mmap cache and short-circuit file descriptor cache (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1567720 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/02/14 11:08 AM",
          "commitName": "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "12/02/14 10:02 AM",
          "commitNameOld": "5efc9978ddf35f8f4e194e34a102a729dae69992",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,43 @@\n-  public ClientMmap fetch(DatanodeID datanodeID, ExtendedBlock block,\n-      FileInputStream in) throws IOException, InterruptedException {\n-    LOG.debug(\"fetching mmap with datanodeID\u003d\" + datanodeID + \", \" +\n-        \"block\u003d\" + block);\n-    Key key \u003d new Key(block, datanodeID);\n-    ClientMmap mmap \u003d null;\n+  private ShortCircuitReplicaInfo fetch(Key key,\n+      Waitable\u003cShortCircuitReplicaInfo\u003e waitable) throws RetriableException {\n+    // Another thread is already in the process of loading this\n+    // ShortCircuitReplica.  So we simply wait for it to complete.\n+    ShortCircuitReplicaInfo info;\n     try {\n-      lock.lock();\n-      if (closed) {\n-        throw new IOException(\"ClientMmapManager is closed.\");\n+      if (LOG.isTraceEnabled()) {\n+        LOG.trace(this + \": found waitable for \" + key);\n       }\n-      while (mmap \u003d\u003d null) {\n-        Waitable\u003cClientMmap\u003e entry \u003d mmaps.get(key);\n-        if (entry \u003d\u003d null) {\n-          return create(key, in);\n-        }\n-        mmap \u003d entry.await();\n-      }\n-      if (mmap.ref() \u003d\u003d 1) {\n-        // When going from nobody using the mmap (ref \u003d 0) to somebody\n-        // using the mmap (ref \u003d 1), we must make the mmap un-evictable.\n-        evictable.remove(mmap.getLastEvictableTimeNs());\n-      }\n+      info \u003d waitable.await();\n+    } catch (InterruptedException e) {\n+      LOG.info(this + \": interrupted while waiting for \" + key);\n+      Thread.currentThread().interrupt();\n+      throw new RetriableException(\"interrupted\");\n     }\n-    finally {\n-      lock.unlock();\n+    if (info.getInvalidTokenException() !\u003d null) {\n+      LOG.warn(this + \": could not get \" + key + \" due to InvalidToken \" +\n+            \"exception.\", info.getInvalidTokenException());\n+      return info;\n     }\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"reusing existing mmap with datanodeID\u003d\" + datanodeID +\n-              \", \" + \"block\u003d\" + block);\n+    ShortCircuitReplica replica \u003d info.getReplica();\n+    if (replica \u003d\u003d null) {\n+      LOG.warn(this + \": failed to get \" + key);\n+      return info;\n     }\n-    return mmap;\n+    if (replica.purged) {\n+      // Ignore replicas that have already been purged from the cache.\n+      throw new RetriableException(\"Ignoring purged replica \" +\n+          replica + \".  Retrying.\");\n+    }\n+    // Check if the replica is stale before using it.\n+    // If it is, purge it and retry.\n+    if (replica.isStale()) {\n+      LOG.info(this + \": got stale replica \" + replica + \".  Removing \" +\n+          \"this replica from the replicaInfoMap and retrying.\");\n+      // Remove the cache\u0027s reference to the replica.  This may or may not\n+      // trigger a close.\n+      purge(replica);\n+      throw new RetriableException(\"ignoring stale replica \" + replica);\n+    }\n+    ref(replica);\n+    return info;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ShortCircuitReplicaInfo fetch(Key key,\n      Waitable\u003cShortCircuitReplicaInfo\u003e waitable) throws RetriableException {\n    // Another thread is already in the process of loading this\n    // ShortCircuitReplica.  So we simply wait for it to complete.\n    ShortCircuitReplicaInfo info;\n    try {\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(this + \": found waitable for \" + key);\n      }\n      info \u003d waitable.await();\n    } catch (InterruptedException e) {\n      LOG.info(this + \": interrupted while waiting for \" + key);\n      Thread.currentThread().interrupt();\n      throw new RetriableException(\"interrupted\");\n    }\n    if (info.getInvalidTokenException() !\u003d null) {\n      LOG.warn(this + \": could not get \" + key + \" due to InvalidToken \" +\n            \"exception.\", info.getInvalidTokenException());\n      return info;\n    }\n    ShortCircuitReplica replica \u003d info.getReplica();\n    if (replica \u003d\u003d null) {\n      LOG.warn(this + \": failed to get \" + key);\n      return info;\n    }\n    if (replica.purged) {\n      // Ignore replicas that have already been purged from the cache.\n      throw new RetriableException(\"Ignoring purged replica \" +\n          replica + \".  Retrying.\");\n    }\n    // Check if the replica is stale before using it.\n    // If it is, purge it and retry.\n    if (replica.isStale()) {\n      LOG.info(this + \": got stale replica \" + replica + \".  Removing \" +\n          \"this replica from the replicaInfoMap and retrying.\");\n      // Remove the cache\u0027s reference to the replica.  This may or may not\n      // trigger a close.\n      purge(replica);\n      throw new RetriableException(\"ignoring stale replica \" + replica);\n    }\n    ref(replica);\n    return info;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/ShortCircuitCache.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-5810. Unify mmap cache and short-circuit file descriptor cache (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1567720 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/02/14 11:08 AM",
          "commitName": "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "12/02/14 10:02 AM",
          "commitNameOld": "5efc9978ddf35f8f4e194e34a102a729dae69992",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,43 @@\n-  public ClientMmap fetch(DatanodeID datanodeID, ExtendedBlock block,\n-      FileInputStream in) throws IOException, InterruptedException {\n-    LOG.debug(\"fetching mmap with datanodeID\u003d\" + datanodeID + \", \" +\n-        \"block\u003d\" + block);\n-    Key key \u003d new Key(block, datanodeID);\n-    ClientMmap mmap \u003d null;\n+  private ShortCircuitReplicaInfo fetch(Key key,\n+      Waitable\u003cShortCircuitReplicaInfo\u003e waitable) throws RetriableException {\n+    // Another thread is already in the process of loading this\n+    // ShortCircuitReplica.  So we simply wait for it to complete.\n+    ShortCircuitReplicaInfo info;\n     try {\n-      lock.lock();\n-      if (closed) {\n-        throw new IOException(\"ClientMmapManager is closed.\");\n+      if (LOG.isTraceEnabled()) {\n+        LOG.trace(this + \": found waitable for \" + key);\n       }\n-      while (mmap \u003d\u003d null) {\n-        Waitable\u003cClientMmap\u003e entry \u003d mmaps.get(key);\n-        if (entry \u003d\u003d null) {\n-          return create(key, in);\n-        }\n-        mmap \u003d entry.await();\n-      }\n-      if (mmap.ref() \u003d\u003d 1) {\n-        // When going from nobody using the mmap (ref \u003d 0) to somebody\n-        // using the mmap (ref \u003d 1), we must make the mmap un-evictable.\n-        evictable.remove(mmap.getLastEvictableTimeNs());\n-      }\n+      info \u003d waitable.await();\n+    } catch (InterruptedException e) {\n+      LOG.info(this + \": interrupted while waiting for \" + key);\n+      Thread.currentThread().interrupt();\n+      throw new RetriableException(\"interrupted\");\n     }\n-    finally {\n-      lock.unlock();\n+    if (info.getInvalidTokenException() !\u003d null) {\n+      LOG.warn(this + \": could not get \" + key + \" due to InvalidToken \" +\n+            \"exception.\", info.getInvalidTokenException());\n+      return info;\n     }\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"reusing existing mmap with datanodeID\u003d\" + datanodeID +\n-              \", \" + \"block\u003d\" + block);\n+    ShortCircuitReplica replica \u003d info.getReplica();\n+    if (replica \u003d\u003d null) {\n+      LOG.warn(this + \": failed to get \" + key);\n+      return info;\n     }\n-    return mmap;\n+    if (replica.purged) {\n+      // Ignore replicas that have already been purged from the cache.\n+      throw new RetriableException(\"Ignoring purged replica \" +\n+          replica + \".  Retrying.\");\n+    }\n+    // Check if the replica is stale before using it.\n+    // If it is, purge it and retry.\n+    if (replica.isStale()) {\n+      LOG.info(this + \": got stale replica \" + replica + \".  Removing \" +\n+          \"this replica from the replicaInfoMap and retrying.\");\n+      // Remove the cache\u0027s reference to the replica.  This may or may not\n+      // trigger a close.\n+      purge(replica);\n+      throw new RetriableException(\"ignoring stale replica \" + replica);\n+    }\n+    ref(replica);\n+    return info;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ShortCircuitReplicaInfo fetch(Key key,\n      Waitable\u003cShortCircuitReplicaInfo\u003e waitable) throws RetriableException {\n    // Another thread is already in the process of loading this\n    // ShortCircuitReplica.  So we simply wait for it to complete.\n    ShortCircuitReplicaInfo info;\n    try {\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(this + \": found waitable for \" + key);\n      }\n      info \u003d waitable.await();\n    } catch (InterruptedException e) {\n      LOG.info(this + \": interrupted while waiting for \" + key);\n      Thread.currentThread().interrupt();\n      throw new RetriableException(\"interrupted\");\n    }\n    if (info.getInvalidTokenException() !\u003d null) {\n      LOG.warn(this + \": could not get \" + key + \" due to InvalidToken \" +\n            \"exception.\", info.getInvalidTokenException());\n      return info;\n    }\n    ShortCircuitReplica replica \u003d info.getReplica();\n    if (replica \u003d\u003d null) {\n      LOG.warn(this + \": failed to get \" + key);\n      return info;\n    }\n    if (replica.purged) {\n      // Ignore replicas that have already been purged from the cache.\n      throw new RetriableException(\"Ignoring purged replica \" +\n          replica + \".  Retrying.\");\n    }\n    // Check if the replica is stale before using it.\n    // If it is, purge it and retry.\n    if (replica.isStale()) {\n      LOG.info(this + \": got stale replica \" + replica + \".  Removing \" +\n          \"this replica from the replicaInfoMap and retrying.\");\n      // Remove the cache\u0027s reference to the replica.  This may or may not\n      // trigger a close.\n      purge(replica);\n      throw new RetriableException(\"ignoring stale replica \" + replica);\n    }\n    ref(replica);\n    return info;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/ShortCircuitCache.java",
          "extendedDetails": {
            "oldValue": "[IOException, InterruptedException]",
            "newValue": "[RetriableException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5810. Unify mmap cache and short-circuit file descriptor cache (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1567720 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/02/14 11:08 AM",
          "commitName": "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "12/02/14 10:02 AM",
          "commitNameOld": "5efc9978ddf35f8f4e194e34a102a729dae69992",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,43 @@\n-  public ClientMmap fetch(DatanodeID datanodeID, ExtendedBlock block,\n-      FileInputStream in) throws IOException, InterruptedException {\n-    LOG.debug(\"fetching mmap with datanodeID\u003d\" + datanodeID + \", \" +\n-        \"block\u003d\" + block);\n-    Key key \u003d new Key(block, datanodeID);\n-    ClientMmap mmap \u003d null;\n+  private ShortCircuitReplicaInfo fetch(Key key,\n+      Waitable\u003cShortCircuitReplicaInfo\u003e waitable) throws RetriableException {\n+    // Another thread is already in the process of loading this\n+    // ShortCircuitReplica.  So we simply wait for it to complete.\n+    ShortCircuitReplicaInfo info;\n     try {\n-      lock.lock();\n-      if (closed) {\n-        throw new IOException(\"ClientMmapManager is closed.\");\n+      if (LOG.isTraceEnabled()) {\n+        LOG.trace(this + \": found waitable for \" + key);\n       }\n-      while (mmap \u003d\u003d null) {\n-        Waitable\u003cClientMmap\u003e entry \u003d mmaps.get(key);\n-        if (entry \u003d\u003d null) {\n-          return create(key, in);\n-        }\n-        mmap \u003d entry.await();\n-      }\n-      if (mmap.ref() \u003d\u003d 1) {\n-        // When going from nobody using the mmap (ref \u003d 0) to somebody\n-        // using the mmap (ref \u003d 1), we must make the mmap un-evictable.\n-        evictable.remove(mmap.getLastEvictableTimeNs());\n-      }\n+      info \u003d waitable.await();\n+    } catch (InterruptedException e) {\n+      LOG.info(this + \": interrupted while waiting for \" + key);\n+      Thread.currentThread().interrupt();\n+      throw new RetriableException(\"interrupted\");\n     }\n-    finally {\n-      lock.unlock();\n+    if (info.getInvalidTokenException() !\u003d null) {\n+      LOG.warn(this + \": could not get \" + key + \" due to InvalidToken \" +\n+            \"exception.\", info.getInvalidTokenException());\n+      return info;\n     }\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"reusing existing mmap with datanodeID\u003d\" + datanodeID +\n-              \", \" + \"block\u003d\" + block);\n+    ShortCircuitReplica replica \u003d info.getReplica();\n+    if (replica \u003d\u003d null) {\n+      LOG.warn(this + \": failed to get \" + key);\n+      return info;\n     }\n-    return mmap;\n+    if (replica.purged) {\n+      // Ignore replicas that have already been purged from the cache.\n+      throw new RetriableException(\"Ignoring purged replica \" +\n+          replica + \".  Retrying.\");\n+    }\n+    // Check if the replica is stale before using it.\n+    // If it is, purge it and retry.\n+    if (replica.isStale()) {\n+      LOG.info(this + \": got stale replica \" + replica + \".  Removing \" +\n+          \"this replica from the replicaInfoMap and retrying.\");\n+      // Remove the cache\u0027s reference to the replica.  This may or may not\n+      // trigger a close.\n+      purge(replica);\n+      throw new RetriableException(\"ignoring stale replica \" + replica);\n+    }\n+    ref(replica);\n+    return info;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ShortCircuitReplicaInfo fetch(Key key,\n      Waitable\u003cShortCircuitReplicaInfo\u003e waitable) throws RetriableException {\n    // Another thread is already in the process of loading this\n    // ShortCircuitReplica.  So we simply wait for it to complete.\n    ShortCircuitReplicaInfo info;\n    try {\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(this + \": found waitable for \" + key);\n      }\n      info \u003d waitable.await();\n    } catch (InterruptedException e) {\n      LOG.info(this + \": interrupted while waiting for \" + key);\n      Thread.currentThread().interrupt();\n      throw new RetriableException(\"interrupted\");\n    }\n    if (info.getInvalidTokenException() !\u003d null) {\n      LOG.warn(this + \": could not get \" + key + \" due to InvalidToken \" +\n            \"exception.\", info.getInvalidTokenException());\n      return info;\n    }\n    ShortCircuitReplica replica \u003d info.getReplica();\n    if (replica \u003d\u003d null) {\n      LOG.warn(this + \": failed to get \" + key);\n      return info;\n    }\n    if (replica.purged) {\n      // Ignore replicas that have already been purged from the cache.\n      throw new RetriableException(\"Ignoring purged replica \" +\n          replica + \".  Retrying.\");\n    }\n    // Check if the replica is stale before using it.\n    // If it is, purge it and retry.\n    if (replica.isStale()) {\n      LOG.info(this + \": got stale replica \" + replica + \".  Removing \" +\n          \"this replica from the replicaInfoMap and retrying.\");\n      // Remove the cache\u0027s reference to the replica.  This may or may not\n      // trigger a close.\n      purge(replica);\n      throw new RetriableException(\"ignoring stale replica \" + replica);\n    }\n    ref(replica);\n    return info;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/ShortCircuitCache.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-5810. Unify mmap cache and short-circuit file descriptor cache (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1567720 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/02/14 11:08 AM",
          "commitName": "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "12/02/14 10:02 AM",
          "commitNameOld": "5efc9978ddf35f8f4e194e34a102a729dae69992",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 0.05,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,43 @@\n-  public ClientMmap fetch(DatanodeID datanodeID, ExtendedBlock block,\n-      FileInputStream in) throws IOException, InterruptedException {\n-    LOG.debug(\"fetching mmap with datanodeID\u003d\" + datanodeID + \", \" +\n-        \"block\u003d\" + block);\n-    Key key \u003d new Key(block, datanodeID);\n-    ClientMmap mmap \u003d null;\n+  private ShortCircuitReplicaInfo fetch(Key key,\n+      Waitable\u003cShortCircuitReplicaInfo\u003e waitable) throws RetriableException {\n+    // Another thread is already in the process of loading this\n+    // ShortCircuitReplica.  So we simply wait for it to complete.\n+    ShortCircuitReplicaInfo info;\n     try {\n-      lock.lock();\n-      if (closed) {\n-        throw new IOException(\"ClientMmapManager is closed.\");\n+      if (LOG.isTraceEnabled()) {\n+        LOG.trace(this + \": found waitable for \" + key);\n       }\n-      while (mmap \u003d\u003d null) {\n-        Waitable\u003cClientMmap\u003e entry \u003d mmaps.get(key);\n-        if (entry \u003d\u003d null) {\n-          return create(key, in);\n-        }\n-        mmap \u003d entry.await();\n-      }\n-      if (mmap.ref() \u003d\u003d 1) {\n-        // When going from nobody using the mmap (ref \u003d 0) to somebody\n-        // using the mmap (ref \u003d 1), we must make the mmap un-evictable.\n-        evictable.remove(mmap.getLastEvictableTimeNs());\n-      }\n+      info \u003d waitable.await();\n+    } catch (InterruptedException e) {\n+      LOG.info(this + \": interrupted while waiting for \" + key);\n+      Thread.currentThread().interrupt();\n+      throw new RetriableException(\"interrupted\");\n     }\n-    finally {\n-      lock.unlock();\n+    if (info.getInvalidTokenException() !\u003d null) {\n+      LOG.warn(this + \": could not get \" + key + \" due to InvalidToken \" +\n+            \"exception.\", info.getInvalidTokenException());\n+      return info;\n     }\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"reusing existing mmap with datanodeID\u003d\" + datanodeID +\n-              \", \" + \"block\u003d\" + block);\n+    ShortCircuitReplica replica \u003d info.getReplica();\n+    if (replica \u003d\u003d null) {\n+      LOG.warn(this + \": failed to get \" + key);\n+      return info;\n     }\n-    return mmap;\n+    if (replica.purged) {\n+      // Ignore replicas that have already been purged from the cache.\n+      throw new RetriableException(\"Ignoring purged replica \" +\n+          replica + \".  Retrying.\");\n+    }\n+    // Check if the replica is stale before using it.\n+    // If it is, purge it and retry.\n+    if (replica.isStale()) {\n+      LOG.info(this + \": got stale replica \" + replica + \".  Removing \" +\n+          \"this replica from the replicaInfoMap and retrying.\");\n+      // Remove the cache\u0027s reference to the replica.  This may or may not\n+      // trigger a close.\n+      purge(replica);\n+      throw new RetriableException(\"ignoring stale replica \" + replica);\n+    }\n+    ref(replica);\n+    return info;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ShortCircuitReplicaInfo fetch(Key key,\n      Waitable\u003cShortCircuitReplicaInfo\u003e waitable) throws RetriableException {\n    // Another thread is already in the process of loading this\n    // ShortCircuitReplica.  So we simply wait for it to complete.\n    ShortCircuitReplicaInfo info;\n    try {\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(this + \": found waitable for \" + key);\n      }\n      info \u003d waitable.await();\n    } catch (InterruptedException e) {\n      LOG.info(this + \": interrupted while waiting for \" + key);\n      Thread.currentThread().interrupt();\n      throw new RetriableException(\"interrupted\");\n    }\n    if (info.getInvalidTokenException() !\u003d null) {\n      LOG.warn(this + \": could not get \" + key + \" due to InvalidToken \" +\n            \"exception.\", info.getInvalidTokenException());\n      return info;\n    }\n    ShortCircuitReplica replica \u003d info.getReplica();\n    if (replica \u003d\u003d null) {\n      LOG.warn(this + \": failed to get \" + key);\n      return info;\n    }\n    if (replica.purged) {\n      // Ignore replicas that have already been purged from the cache.\n      throw new RetriableException(\"Ignoring purged replica \" +\n          replica + \".  Retrying.\");\n    }\n    // Check if the replica is stale before using it.\n    // If it is, purge it and retry.\n    if (replica.isStale()) {\n      LOG.info(this + \": got stale replica \" + replica + \".  Removing \" +\n          \"this replica from the replicaInfoMap and retrying.\");\n      // Remove the cache\u0027s reference to the replica.  This may or may not\n      // trigger a close.\n      purge(replica);\n      throw new RetriableException(\"ignoring stale replica \" + replica);\n    }\n    ref(replica);\n    return info;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/ShortCircuitCache.java",
          "extendedDetails": {
            "oldValue": "[datanodeID-DatanodeID, block-ExtendedBlock, in-FileInputStream]",
            "newValue": "[key-Key, waitable-Waitable\u003cShortCircuitReplicaInfo\u003e]"
          }
        }
      ]
    },
    "eccdb9aa8bcdee750583d16a1253f1c5faabd036": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5260. Merge zero-copy memory-mapped HDFS client reads to trunk and branch-2. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1527113 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/09/13 3:51 PM",
      "commitName": "eccdb9aa8bcdee750583d16a1253f1c5faabd036",
      "commitAuthor": "Chris Nauroth",
      "diff": "@@ -0,0 +1,33 @@\n+  public ClientMmap fetch(DatanodeID datanodeID, ExtendedBlock block,\n+      FileInputStream in) throws IOException, InterruptedException {\n+    LOG.debug(\"fetching mmap with datanodeID\u003d\" + datanodeID + \", \" +\n+        \"block\u003d\" + block);\n+    Key key \u003d new Key(block, datanodeID);\n+    ClientMmap mmap \u003d null;\n+    try {\n+      lock.lock();\n+      if (closed) {\n+        throw new IOException(\"ClientMmapManager is closed.\");\n+      }\n+      while (mmap \u003d\u003d null) {\n+        Waitable\u003cClientMmap\u003e entry \u003d mmaps.get(key);\n+        if (entry \u003d\u003d null) {\n+          return create(key, in);\n+        }\n+        mmap \u003d entry.await();\n+      }\n+      if (mmap.ref() \u003d\u003d 1) {\n+        // When going from nobody using the mmap (ref \u003d 0) to somebody\n+        // using the mmap (ref \u003d 1), we must make the mmap un-evictable.\n+        evictable.remove(mmap.getLastEvictableTimeNs());\n+      }\n+    }\n+    finally {\n+      lock.unlock();\n+    }\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"reusing existing mmap with datanodeID\u003d\" + datanodeID +\n+              \", \" + \"block\u003d\" + block);\n+    }\n+    return mmap;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public ClientMmap fetch(DatanodeID datanodeID, ExtendedBlock block,\n      FileInputStream in) throws IOException, InterruptedException {\n    LOG.debug(\"fetching mmap with datanodeID\u003d\" + datanodeID + \", \" +\n        \"block\u003d\" + block);\n    Key key \u003d new Key(block, datanodeID);\n    ClientMmap mmap \u003d null;\n    try {\n      lock.lock();\n      if (closed) {\n        throw new IOException(\"ClientMmapManager is closed.\");\n      }\n      while (mmap \u003d\u003d null) {\n        Waitable\u003cClientMmap\u003e entry \u003d mmaps.get(key);\n        if (entry \u003d\u003d null) {\n          return create(key, in);\n        }\n        mmap \u003d entry.await();\n      }\n      if (mmap.ref() \u003d\u003d 1) {\n        // When going from nobody using the mmap (ref \u003d 0) to somebody\n        // using the mmap (ref \u003d 1), we must make the mmap un-evictable.\n        evictable.remove(mmap.getLastEvictableTimeNs());\n      }\n    }\n    finally {\n      lock.unlock();\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"reusing existing mmap with datanodeID\u003d\" + datanodeID +\n              \", \" + \"block\u003d\" + block);\n    }\n    return mmap;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/ClientMmapManager.java"
    }
  }
}