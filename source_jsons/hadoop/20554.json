{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MultipleOutputFormat.java",
  "functionName": "getRecordWriter",
  "functionId": "getRecordWriter___fs-FileSystem__job-JobConf__name-String__arg3-Progressable",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/lib/MultipleOutputFormat.java",
  "functionStartLine": 74,
  "functionEndLine": 119,
  "numCommitsSeen": 4,
  "timeTaken": 4358,
  "changeHistory": [
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public RecordWriter\u003cK, V\u003e getRecordWriter(FileSystem fs, JobConf job,\n      String name, Progressable arg3) throws IOException {\n\n    final FileSystem myFS \u003d fs;\n    final String myName \u003d generateLeafFileName(name);\n    final JobConf myJob \u003d job;\n    final Progressable myProgressable \u003d arg3;\n\n    return new RecordWriter\u003cK, V\u003e() {\n\n      // a cache storing the record writers for different output files.\n      TreeMap\u003cString, RecordWriter\u003cK, V\u003e\u003e recordWriters \u003d new TreeMap\u003cString, RecordWriter\u003cK, V\u003e\u003e();\n\n      public void write(K key, V value) throws IOException {\n\n        // get the file name based on the key\n        String keyBasedPath \u003d generateFileNameForKeyValue(key, value, myName);\n\n        // get the file name based on the input file name\n        String finalPath \u003d getInputFileBasedOutputFileName(myJob, keyBasedPath);\n\n        // get the actual key\n        K actualKey \u003d generateActualKey(key, value);\n        V actualValue \u003d generateActualValue(key, value);\n\n        RecordWriter\u003cK, V\u003e rw \u003d this.recordWriters.get(finalPath);\n        if (rw \u003d\u003d null) {\n          // if we don\u0027t have the record writer yet for the final path, create\n          // one\n          // and add it to the cache\n          rw \u003d getBaseRecordWriter(myFS, myJob, finalPath, myProgressable);\n          this.recordWriters.put(finalPath, rw);\n        }\n        rw.write(actualKey, actualValue);\n      };\n\n      public void close(Reporter reporter) throws IOException {\n        Iterator\u003cString\u003e keys \u003d this.recordWriters.keySet().iterator();\n        while (keys.hasNext()) {\n          RecordWriter\u003cK, V\u003e rw \u003d this.recordWriters.get(keys.next());\n          rw.close(reporter);\n        }\n        this.recordWriters.clear();\n      };\n    };\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/lib/MultipleOutputFormat.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/lib/MultipleOutputFormat.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/lib/MultipleOutputFormat.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public RecordWriter\u003cK, V\u003e getRecordWriter(FileSystem fs, JobConf job,\n      String name, Progressable arg3) throws IOException {\n\n    final FileSystem myFS \u003d fs;\n    final String myName \u003d generateLeafFileName(name);\n    final JobConf myJob \u003d job;\n    final Progressable myProgressable \u003d arg3;\n\n    return new RecordWriter\u003cK, V\u003e() {\n\n      // a cache storing the record writers for different output files.\n      TreeMap\u003cString, RecordWriter\u003cK, V\u003e\u003e recordWriters \u003d new TreeMap\u003cString, RecordWriter\u003cK, V\u003e\u003e();\n\n      public void write(K key, V value) throws IOException {\n\n        // get the file name based on the key\n        String keyBasedPath \u003d generateFileNameForKeyValue(key, value, myName);\n\n        // get the file name based on the input file name\n        String finalPath \u003d getInputFileBasedOutputFileName(myJob, keyBasedPath);\n\n        // get the actual key\n        K actualKey \u003d generateActualKey(key, value);\n        V actualValue \u003d generateActualValue(key, value);\n\n        RecordWriter\u003cK, V\u003e rw \u003d this.recordWriters.get(finalPath);\n        if (rw \u003d\u003d null) {\n          // if we don\u0027t have the record writer yet for the final path, create\n          // one\n          // and add it to the cache\n          rw \u003d getBaseRecordWriter(myFS, myJob, finalPath, myProgressable);\n          this.recordWriters.put(finalPath, rw);\n        }\n        rw.write(actualKey, actualValue);\n      };\n\n      public void close(Reporter reporter) throws IOException {\n        Iterator\u003cString\u003e keys \u003d this.recordWriters.keySet().iterator();\n        while (keys.hasNext()) {\n          RecordWriter\u003cK, V\u003e rw \u003d this.recordWriters.get(keys.next());\n          rw.close(reporter);\n        }\n        this.recordWriters.clear();\n      };\n    };\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/lib/MultipleOutputFormat.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapred/lib/MultipleOutputFormat.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/lib/MultipleOutputFormat.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,46 @@\n+  public RecordWriter\u003cK, V\u003e getRecordWriter(FileSystem fs, JobConf job,\n+      String name, Progressable arg3) throws IOException {\n+\n+    final FileSystem myFS \u003d fs;\n+    final String myName \u003d generateLeafFileName(name);\n+    final JobConf myJob \u003d job;\n+    final Progressable myProgressable \u003d arg3;\n+\n+    return new RecordWriter\u003cK, V\u003e() {\n+\n+      // a cache storing the record writers for different output files.\n+      TreeMap\u003cString, RecordWriter\u003cK, V\u003e\u003e recordWriters \u003d new TreeMap\u003cString, RecordWriter\u003cK, V\u003e\u003e();\n+\n+      public void write(K key, V value) throws IOException {\n+\n+        // get the file name based on the key\n+        String keyBasedPath \u003d generateFileNameForKeyValue(key, value, myName);\n+\n+        // get the file name based on the input file name\n+        String finalPath \u003d getInputFileBasedOutputFileName(myJob, keyBasedPath);\n+\n+        // get the actual key\n+        K actualKey \u003d generateActualKey(key, value);\n+        V actualValue \u003d generateActualValue(key, value);\n+\n+        RecordWriter\u003cK, V\u003e rw \u003d this.recordWriters.get(finalPath);\n+        if (rw \u003d\u003d null) {\n+          // if we don\u0027t have the record writer yet for the final path, create\n+          // one\n+          // and add it to the cache\n+          rw \u003d getBaseRecordWriter(myFS, myJob, finalPath, myProgressable);\n+          this.recordWriters.put(finalPath, rw);\n+        }\n+        rw.write(actualKey, actualValue);\n+      };\n+\n+      public void close(Reporter reporter) throws IOException {\n+        Iterator\u003cString\u003e keys \u003d this.recordWriters.keySet().iterator();\n+        while (keys.hasNext()) {\n+          RecordWriter\u003cK, V\u003e rw \u003d this.recordWriters.get(keys.next());\n+          rw.close(reporter);\n+        }\n+        this.recordWriters.clear();\n+      };\n+    };\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public RecordWriter\u003cK, V\u003e getRecordWriter(FileSystem fs, JobConf job,\n      String name, Progressable arg3) throws IOException {\n\n    final FileSystem myFS \u003d fs;\n    final String myName \u003d generateLeafFileName(name);\n    final JobConf myJob \u003d job;\n    final Progressable myProgressable \u003d arg3;\n\n    return new RecordWriter\u003cK, V\u003e() {\n\n      // a cache storing the record writers for different output files.\n      TreeMap\u003cString, RecordWriter\u003cK, V\u003e\u003e recordWriters \u003d new TreeMap\u003cString, RecordWriter\u003cK, V\u003e\u003e();\n\n      public void write(K key, V value) throws IOException {\n\n        // get the file name based on the key\n        String keyBasedPath \u003d generateFileNameForKeyValue(key, value, myName);\n\n        // get the file name based on the input file name\n        String finalPath \u003d getInputFileBasedOutputFileName(myJob, keyBasedPath);\n\n        // get the actual key\n        K actualKey \u003d generateActualKey(key, value);\n        V actualValue \u003d generateActualValue(key, value);\n\n        RecordWriter\u003cK, V\u003e rw \u003d this.recordWriters.get(finalPath);\n        if (rw \u003d\u003d null) {\n          // if we don\u0027t have the record writer yet for the final path, create\n          // one\n          // and add it to the cache\n          rw \u003d getBaseRecordWriter(myFS, myJob, finalPath, myProgressable);\n          this.recordWriters.put(finalPath, rw);\n        }\n        rw.write(actualKey, actualValue);\n      };\n\n      public void close(Reporter reporter) throws IOException {\n        Iterator\u003cString\u003e keys \u003d this.recordWriters.keySet().iterator();\n        while (keys.hasNext()) {\n          RecordWriter\u003cK, V\u003e rw \u003d this.recordWriters.get(keys.next());\n          rw.close(reporter);\n        }\n        this.recordWriters.clear();\n      };\n    };\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapred/lib/MultipleOutputFormat.java"
    }
  }
}