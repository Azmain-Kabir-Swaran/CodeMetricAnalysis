{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractYarnScheduler.java",
  "functionName": "handleDecreaseRequests",
  "functionId": "handleDecreaseRequests___appAttempt-SchedulerApplicationAttempt__demotionRequests-List__UpdateContainerRequest__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
  "functionStartLine": 1374,
  "functionEndLine": 1411,
  "numCommitsSeen": 184,
  "timeTaken": 4534,
  "changeHistory": [
    "cfe89e6f963ba25b5fff1ce48cad36d74b3c789c",
    "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4",
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4"
  ],
  "changeHistoryShort": {
    "cfe89e6f963ba25b5fff1ce48cad36d74b3c789c": "Ybodychange",
    "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4": "Ymultichange(Yrename,Ybodychange)",
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cfe89e6f963ba25b5fff1ce48cad36d74b3c789c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9164. Shutdown NM may cause NPE when opportunistic container scheduling is enabled. Contributed by lujie.\n",
      "commitDate": "03/01/19 7:56 AM",
      "commitName": "cfe89e6f963ba25b5fff1ce48cad36d74b3c789c",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "21/12/18 4:44 PM",
      "commitNameOld": "f82922dcfae0b7e3e68ce970c441d8b7edc59acf",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 12.63,
      "commitsBetweenForRepo": 70,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,38 @@\n   private void handleDecreaseRequests(SchedulerApplicationAttempt appAttempt,\n       List\u003cUpdateContainerRequest\u003e demotionRequests) {\n     OpportunisticContainerContext oppCntxt \u003d\n         appAttempt.getOpportunisticContainerContext();\n     for (UpdateContainerRequest uReq : demotionRequests) {\n       RMContainer rmContainer \u003d\n           rmContext.getScheduler().getRMContainer(uReq.getContainerId());\n       if (rmContainer !\u003d null) {\n         SchedulerNode schedulerNode \u003d rmContext.getScheduler()\n             .getSchedulerNode(rmContainer.getContainer().getNodeId());\n         if (appAttempt.getUpdateContext()\n             .checkAndAddToOutstandingDecreases(uReq, schedulerNode,\n                 rmContainer.getContainer())) {\n           if (ContainerUpdateType.DEMOTE_EXECUTION_TYPE \u003d\u003d\n               uReq.getContainerUpdateType()) {\n             RMContainer demotedRMContainer \u003d\n                 createDemotedRMContainer(appAttempt, oppCntxt, rmContainer);\n-            appAttempt.addToNewlyDemotedContainers(\n-                uReq.getContainerId(), demotedRMContainer);\n+            if (demotedRMContainer !\u003d null) {\n+              appAttempt.addToNewlyDemotedContainers(\n+                      uReq.getContainerId(), demotedRMContainer);\n+            }\n           } else {\n             RMContainer demotedRMContainer \u003d createDecreasedRMContainer(\n                 appAttempt, uReq, rmContainer);\n             appAttempt.addToNewlyDecreasedContainers(\n                 uReq.getContainerId(), demotedRMContainer);\n           }\n         } else {\n           appAttempt.addToUpdateContainerErrors(\n               UpdateContainerError.newInstance(\n               RMServerUtils.UPDATE_OUTSTANDING_ERROR, uReq));\n         }\n       } else {\n         LOG.warn(\"Cannot demote/decrease non-existent (or completed) \" +\n             \"Container [\" + uReq.getContainerId() + \"]\");\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleDecreaseRequests(SchedulerApplicationAttempt appAttempt,\n      List\u003cUpdateContainerRequest\u003e demotionRequests) {\n    OpportunisticContainerContext oppCntxt \u003d\n        appAttempt.getOpportunisticContainerContext();\n    for (UpdateContainerRequest uReq : demotionRequests) {\n      RMContainer rmContainer \u003d\n          rmContext.getScheduler().getRMContainer(uReq.getContainerId());\n      if (rmContainer !\u003d null) {\n        SchedulerNode schedulerNode \u003d rmContext.getScheduler()\n            .getSchedulerNode(rmContainer.getContainer().getNodeId());\n        if (appAttempt.getUpdateContext()\n            .checkAndAddToOutstandingDecreases(uReq, schedulerNode,\n                rmContainer.getContainer())) {\n          if (ContainerUpdateType.DEMOTE_EXECUTION_TYPE \u003d\u003d\n              uReq.getContainerUpdateType()) {\n            RMContainer demotedRMContainer \u003d\n                createDemotedRMContainer(appAttempt, oppCntxt, rmContainer);\n            if (demotedRMContainer !\u003d null) {\n              appAttempt.addToNewlyDemotedContainers(\n                      uReq.getContainerId(), demotedRMContainer);\n            }\n          } else {\n            RMContainer demotedRMContainer \u003d createDecreasedRMContainer(\n                appAttempt, uReq, rmContainer);\n            appAttempt.addToNewlyDecreasedContainers(\n                uReq.getContainerId(), demotedRMContainer);\n          }\n        } else {\n          appAttempt.addToUpdateContainerErrors(\n              UpdateContainerError.newInstance(\n              RMServerUtils.UPDATE_OUTSTANDING_ERROR, uReq));\n        }\n      } else {\n        LOG.warn(\"Cannot demote/decrease non-existent (or completed) \" +\n            \"Container [\" + uReq.getContainerId() + \"]\");\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
      "extendedDetails": {}
    },
    "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "YARN-6216. Unify Container Resizing code paths with Container Updates making it scheduler agnostic. (Arun Suresh via wangda)\n",
      "commitDate": "28/02/17 10:35 AM",
      "commitName": "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-6216. Unify Container Resizing code paths with Container Updates making it scheduler agnostic. (Arun Suresh via wangda)\n",
          "commitDate": "28/02/17 10:35 AM",
          "commitName": "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "15/02/17 11:16 PM",
          "commitNameOld": "6c25dbcdc0517a825b92fb16444aa1d3761e160c",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 12.47,
          "commitsBetweenForRepo": 71,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,36 @@\n-  private void handleDemotionRequests(SchedulerApplicationAttempt appAttempt,\n+  private void handleDecreaseRequests(SchedulerApplicationAttempt appAttempt,\n       List\u003cUpdateContainerRequest\u003e demotionRequests) {\n     OpportunisticContainerContext oppCntxt \u003d\n         appAttempt.getOpportunisticContainerContext();\n     for (UpdateContainerRequest uReq : demotionRequests) {\n       RMContainer rmContainer \u003d\n           rmContext.getScheduler().getRMContainer(uReq.getContainerId());\n       if (rmContainer !\u003d null) {\n-        if (appAttempt.getUpdateContext().checkAndAddToOutstandingDecreases(\n-            rmContainer.getContainer())) {\n-          RMContainer demotedRMContainer \u003d\n-              createDemotedRMContainer(appAttempt, oppCntxt, rmContainer);\n-          appAttempt.addToNewlyDemotedContainers(\n-              uReq.getContainerId(), demotedRMContainer);\n+        SchedulerNode schedulerNode \u003d rmContext.getScheduler()\n+            .getSchedulerNode(rmContainer.getContainer().getNodeId());\n+        if (appAttempt.getUpdateContext()\n+            .checkAndAddToOutstandingDecreases(uReq, schedulerNode,\n+                rmContainer.getContainer())) {\n+          if (ContainerUpdateType.DEMOTE_EXECUTION_TYPE \u003d\u003d\n+              uReq.getContainerUpdateType()) {\n+            RMContainer demotedRMContainer \u003d\n+                createDemotedRMContainer(appAttempt, oppCntxt, rmContainer);\n+            appAttempt.addToNewlyDemotedContainers(\n+                uReq.getContainerId(), demotedRMContainer);\n+          } else {\n+            RMContainer demotedRMContainer \u003d createDecreasedRMContainer(\n+                appAttempt, uReq, rmContainer);\n+            appAttempt.addToNewlyDecreasedContainers(\n+                uReq.getContainerId(), demotedRMContainer);\n+          }\n         } else {\n           appAttempt.addToUpdateContainerErrors(\n               UpdateContainerError.newInstance(\n               RMServerUtils.UPDATE_OUTSTANDING_ERROR, uReq));\n         }\n       } else {\n-        LOG.warn(\"Cannot demote non-existent (or completed) Container [\"\n-            + uReq.getContainerId() + \"]\");\n+        LOG.warn(\"Cannot demote/decrease non-existent (or completed) \" +\n+            \"Container [\" + uReq.getContainerId() + \"]\");\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void handleDecreaseRequests(SchedulerApplicationAttempt appAttempt,\n      List\u003cUpdateContainerRequest\u003e demotionRequests) {\n    OpportunisticContainerContext oppCntxt \u003d\n        appAttempt.getOpportunisticContainerContext();\n    for (UpdateContainerRequest uReq : demotionRequests) {\n      RMContainer rmContainer \u003d\n          rmContext.getScheduler().getRMContainer(uReq.getContainerId());\n      if (rmContainer !\u003d null) {\n        SchedulerNode schedulerNode \u003d rmContext.getScheduler()\n            .getSchedulerNode(rmContainer.getContainer().getNodeId());\n        if (appAttempt.getUpdateContext()\n            .checkAndAddToOutstandingDecreases(uReq, schedulerNode,\n                rmContainer.getContainer())) {\n          if (ContainerUpdateType.DEMOTE_EXECUTION_TYPE \u003d\u003d\n              uReq.getContainerUpdateType()) {\n            RMContainer demotedRMContainer \u003d\n                createDemotedRMContainer(appAttempt, oppCntxt, rmContainer);\n            appAttempt.addToNewlyDemotedContainers(\n                uReq.getContainerId(), demotedRMContainer);\n          } else {\n            RMContainer demotedRMContainer \u003d createDecreasedRMContainer(\n                appAttempt, uReq, rmContainer);\n            appAttempt.addToNewlyDecreasedContainers(\n                uReq.getContainerId(), demotedRMContainer);\n          }\n        } else {\n          appAttempt.addToUpdateContainerErrors(\n              UpdateContainerError.newInstance(\n              RMServerUtils.UPDATE_OUTSTANDING_ERROR, uReq));\n        }\n      } else {\n        LOG.warn(\"Cannot demote/decrease non-existent (or completed) \" +\n            \"Container [\" + uReq.getContainerId() + \"]\");\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
          "extendedDetails": {
            "oldValue": "handleDemotionRequests",
            "newValue": "handleDecreaseRequests"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6216. Unify Container Resizing code paths with Container Updates making it scheduler agnostic. (Arun Suresh via wangda)\n",
          "commitDate": "28/02/17 10:35 AM",
          "commitName": "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "15/02/17 11:16 PM",
          "commitNameOld": "6c25dbcdc0517a825b92fb16444aa1d3761e160c",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 12.47,
          "commitsBetweenForRepo": 71,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,36 @@\n-  private void handleDemotionRequests(SchedulerApplicationAttempt appAttempt,\n+  private void handleDecreaseRequests(SchedulerApplicationAttempt appAttempt,\n       List\u003cUpdateContainerRequest\u003e demotionRequests) {\n     OpportunisticContainerContext oppCntxt \u003d\n         appAttempt.getOpportunisticContainerContext();\n     for (UpdateContainerRequest uReq : demotionRequests) {\n       RMContainer rmContainer \u003d\n           rmContext.getScheduler().getRMContainer(uReq.getContainerId());\n       if (rmContainer !\u003d null) {\n-        if (appAttempt.getUpdateContext().checkAndAddToOutstandingDecreases(\n-            rmContainer.getContainer())) {\n-          RMContainer demotedRMContainer \u003d\n-              createDemotedRMContainer(appAttempt, oppCntxt, rmContainer);\n-          appAttempt.addToNewlyDemotedContainers(\n-              uReq.getContainerId(), demotedRMContainer);\n+        SchedulerNode schedulerNode \u003d rmContext.getScheduler()\n+            .getSchedulerNode(rmContainer.getContainer().getNodeId());\n+        if (appAttempt.getUpdateContext()\n+            .checkAndAddToOutstandingDecreases(uReq, schedulerNode,\n+                rmContainer.getContainer())) {\n+          if (ContainerUpdateType.DEMOTE_EXECUTION_TYPE \u003d\u003d\n+              uReq.getContainerUpdateType()) {\n+            RMContainer demotedRMContainer \u003d\n+                createDemotedRMContainer(appAttempt, oppCntxt, rmContainer);\n+            appAttempt.addToNewlyDemotedContainers(\n+                uReq.getContainerId(), demotedRMContainer);\n+          } else {\n+            RMContainer demotedRMContainer \u003d createDecreasedRMContainer(\n+                appAttempt, uReq, rmContainer);\n+            appAttempt.addToNewlyDecreasedContainers(\n+                uReq.getContainerId(), demotedRMContainer);\n+          }\n         } else {\n           appAttempt.addToUpdateContainerErrors(\n               UpdateContainerError.newInstance(\n               RMServerUtils.UPDATE_OUTSTANDING_ERROR, uReq));\n         }\n       } else {\n-        LOG.warn(\"Cannot demote non-existent (or completed) Container [\"\n-            + uReq.getContainerId() + \"]\");\n+        LOG.warn(\"Cannot demote/decrease non-existent (or completed) \" +\n+            \"Container [\" + uReq.getContainerId() + \"]\");\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void handleDecreaseRequests(SchedulerApplicationAttempt appAttempt,\n      List\u003cUpdateContainerRequest\u003e demotionRequests) {\n    OpportunisticContainerContext oppCntxt \u003d\n        appAttempt.getOpportunisticContainerContext();\n    for (UpdateContainerRequest uReq : demotionRequests) {\n      RMContainer rmContainer \u003d\n          rmContext.getScheduler().getRMContainer(uReq.getContainerId());\n      if (rmContainer !\u003d null) {\n        SchedulerNode schedulerNode \u003d rmContext.getScheduler()\n            .getSchedulerNode(rmContainer.getContainer().getNodeId());\n        if (appAttempt.getUpdateContext()\n            .checkAndAddToOutstandingDecreases(uReq, schedulerNode,\n                rmContainer.getContainer())) {\n          if (ContainerUpdateType.DEMOTE_EXECUTION_TYPE \u003d\u003d\n              uReq.getContainerUpdateType()) {\n            RMContainer demotedRMContainer \u003d\n                createDemotedRMContainer(appAttempt, oppCntxt, rmContainer);\n            appAttempt.addToNewlyDemotedContainers(\n                uReq.getContainerId(), demotedRMContainer);\n          } else {\n            RMContainer demotedRMContainer \u003d createDecreasedRMContainer(\n                appAttempt, uReq, rmContainer);\n            appAttempt.addToNewlyDecreasedContainers(\n                uReq.getContainerId(), demotedRMContainer);\n          }\n        } else {\n          appAttempt.addToUpdateContainerErrors(\n              UpdateContainerError.newInstance(\n              RMServerUtils.UPDATE_OUTSTANDING_ERROR, uReq));\n        }\n      } else {\n        LOG.warn(\"Cannot demote/decrease non-existent (or completed) \" +\n            \"Container [\" + uReq.getContainerId() + \"]\");\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5959. RM changes to support change of container ExecutionType. (Arun Suresh via wangda)\n",
      "commitDate": "05/01/17 10:31 AM",
      "commitName": "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,25 @@\n+  private void handleDemotionRequests(SchedulerApplicationAttempt appAttempt,\n+      List\u003cUpdateContainerRequest\u003e demotionRequests) {\n+    OpportunisticContainerContext oppCntxt \u003d\n+        appAttempt.getOpportunisticContainerContext();\n+    for (UpdateContainerRequest uReq : demotionRequests) {\n+      RMContainer rmContainer \u003d\n+          rmContext.getScheduler().getRMContainer(uReq.getContainerId());\n+      if (rmContainer !\u003d null) {\n+        if (appAttempt.getUpdateContext().checkAndAddToOutstandingDecreases(\n+            rmContainer.getContainer())) {\n+          RMContainer demotedRMContainer \u003d\n+              createDemotedRMContainer(appAttempt, oppCntxt, rmContainer);\n+          appAttempt.addToNewlyDemotedContainers(\n+              uReq.getContainerId(), demotedRMContainer);\n+        } else {\n+          appAttempt.addToUpdateContainerErrors(\n+              UpdateContainerError.newInstance(\n+              RMServerUtils.UPDATE_OUTSTANDING_ERROR, uReq));\n+        }\n+      } else {\n+        LOG.warn(\"Cannot demote non-existent (or completed) Container [\"\n+            + uReq.getContainerId() + \"]\");\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleDemotionRequests(SchedulerApplicationAttempt appAttempt,\n      List\u003cUpdateContainerRequest\u003e demotionRequests) {\n    OpportunisticContainerContext oppCntxt \u003d\n        appAttempt.getOpportunisticContainerContext();\n    for (UpdateContainerRequest uReq : demotionRequests) {\n      RMContainer rmContainer \u003d\n          rmContext.getScheduler().getRMContainer(uReq.getContainerId());\n      if (rmContainer !\u003d null) {\n        if (appAttempt.getUpdateContext().checkAndAddToOutstandingDecreases(\n            rmContainer.getContainer())) {\n          RMContainer demotedRMContainer \u003d\n              createDemotedRMContainer(appAttempt, oppCntxt, rmContainer);\n          appAttempt.addToNewlyDemotedContainers(\n              uReq.getContainerId(), demotedRMContainer);\n        } else {\n          appAttempt.addToUpdateContainerErrors(\n              UpdateContainerError.newInstance(\n              RMServerUtils.UPDATE_OUTSTANDING_ERROR, uReq));\n        }\n      } else {\n        LOG.warn(\"Cannot demote non-existent (or completed) Container [\"\n            + uReq.getContainerId() + \"]\");\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java"
    }
  }
}