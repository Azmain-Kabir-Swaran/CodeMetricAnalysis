{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AclStorage.java",
  "functionName": "createAclFeature",
  "functionId": "createAclFeature___accessEntries-List__AclEntry____defaultEntries-List__AclEntry__",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/AclStorage.java",
  "functionStartLine": 319,
  "functionEndLine": 338,
  "numCommitsSeen": 15,
  "timeTaken": 1778,
  "changeHistory": [
    "0653918dad855b394e8e3b8b3f512f474d872ee9",
    "11be7334c4e04b1b3fe12d86f4646cc83c068b05",
    "7be2c002b350594e9bfbd256c8abc2cad42d49ea",
    "c89c516b95f45e04af55d9030043a42e2d07b02b"
  ],
  "changeHistoryShort": {
    "0653918dad855b394e8e3b8b3f512f474d872ee9": "Ybodychange",
    "11be7334c4e04b1b3fe12d86f4646cc83c068b05": "Ybodychange",
    "7be2c002b350594e9bfbd256c8abc2cad42d49ea": "Ybodychange",
    "c89c516b95f45e04af55d9030043a42e2d07b02b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0653918dad855b394e8e3b8b3f512f474d872ee9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7454. Reduce memory footprint for AclEntries in NameNode. Contributed by Vinayakumar B.\n",
      "commitDate": "04/12/14 8:49 PM",
      "commitName": "0653918dad855b394e8e3b8b3f512f474d872ee9",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "29/05/14 3:56 PM",
      "commitNameOld": "39f3d135d0dd5ab64d6fa3b7ee71396d12a801c6",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 189.24,
      "commitsBetweenForRepo": 1663,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n   private static AclFeature createAclFeature(List\u003cAclEntry\u003e accessEntries,\n       List\u003cAclEntry\u003e defaultEntries) {\n     // Pre-allocate list size for the explicit entries stored in the feature,\n     // which is all entries minus the 3 entries implicitly stored in the\n     // permission bits.\n     List\u003cAclEntry\u003e featureEntries \u003d Lists.newArrayListWithCapacity(\n       (accessEntries.size() - 3) + defaultEntries.size());\n \n     // For the access ACL, the feature only needs to hold the named user and\n     // group entries.  For a correctly sorted ACL, these will be in a\n     // predictable range.\n     if (!AclUtil.isMinimalAcl(accessEntries)) {\n       featureEntries.addAll(\n         accessEntries.subList(1, accessEntries.size() - 2));\n     }\n \n     // Add all default entries to the feature.\n     featureEntries.addAll(defaultEntries);\n-    return new AclFeature(ImmutableList.copyOf(featureEntries));\n+    return new AclFeature(AclEntryStatusFormat.toInt(featureEntries));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static AclFeature createAclFeature(List\u003cAclEntry\u003e accessEntries,\n      List\u003cAclEntry\u003e defaultEntries) {\n    // Pre-allocate list size for the explicit entries stored in the feature,\n    // which is all entries minus the 3 entries implicitly stored in the\n    // permission bits.\n    List\u003cAclEntry\u003e featureEntries \u003d Lists.newArrayListWithCapacity(\n      (accessEntries.size() - 3) + defaultEntries.size());\n\n    // For the access ACL, the feature only needs to hold the named user and\n    // group entries.  For a correctly sorted ACL, these will be in a\n    // predictable range.\n    if (!AclUtil.isMinimalAcl(accessEntries)) {\n      featureEntries.addAll(\n        accessEntries.subList(1, accessEntries.size() - 2));\n    }\n\n    // Add all default entries to the feature.\n    featureEntries.addAll(defaultEntries);\n    return new AclFeature(AclEntryStatusFormat.toInt(featureEntries));\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/AclStorage.java",
      "extendedDetails": {}
    },
    "11be7334c4e04b1b3fe12d86f4646cc83c068b05": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5809. Enhance distcp to support preserving HDFS ACLs. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1595283 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/05/14 11:25 AM",
      "commitName": "11be7334c4e04b1b3fe12d86f4646cc83c068b05",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "26/02/14 8:22 AM",
      "commitNameOld": "7be2c002b350594e9bfbd256c8abc2cad42d49ea",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 79.09,
      "commitsBetweenForRepo": 557,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n   private static AclFeature createAclFeature(List\u003cAclEntry\u003e accessEntries,\n       List\u003cAclEntry\u003e defaultEntries) {\n     // Pre-allocate list size for the explicit entries stored in the feature,\n     // which is all entries minus the 3 entries implicitly stored in the\n     // permission bits.\n     List\u003cAclEntry\u003e featureEntries \u003d Lists.newArrayListWithCapacity(\n       (accessEntries.size() - 3) + defaultEntries.size());\n \n     // For the access ACL, the feature only needs to hold the named user and\n     // group entries.  For a correctly sorted ACL, these will be in a\n     // predictable range.\n-    if (!isMinimalAcl(accessEntries)) {\n+    if (!AclUtil.isMinimalAcl(accessEntries)) {\n       featureEntries.addAll(\n         accessEntries.subList(1, accessEntries.size() - 2));\n     }\n \n     // Add all default entries to the feature.\n     featureEntries.addAll(defaultEntries);\n     return new AclFeature(ImmutableList.copyOf(featureEntries));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static AclFeature createAclFeature(List\u003cAclEntry\u003e accessEntries,\n      List\u003cAclEntry\u003e defaultEntries) {\n    // Pre-allocate list size for the explicit entries stored in the feature,\n    // which is all entries minus the 3 entries implicitly stored in the\n    // permission bits.\n    List\u003cAclEntry\u003e featureEntries \u003d Lists.newArrayListWithCapacity(\n      (accessEntries.size() - 3) + defaultEntries.size());\n\n    // For the access ACL, the feature only needs to hold the named user and\n    // group entries.  For a correctly sorted ACL, these will be in a\n    // predictable range.\n    if (!AclUtil.isMinimalAcl(accessEntries)) {\n      featureEntries.addAll(\n        accessEntries.subList(1, accessEntries.size() - 2));\n    }\n\n    // Add all default entries to the feature.\n    featureEntries.addAll(defaultEntries);\n    return new AclFeature(ImmutableList.copyOf(featureEntries));\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/AclStorage.java",
      "extendedDetails": {}
    },
    "7be2c002b350594e9bfbd256c8abc2cad42d49ea": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5908. Change AclFeature to capture list of ACL entries in an ImmutableList. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1572142 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/02/14 8:22 AM",
      "commitName": "7be2c002b350594e9bfbd256c8abc2cad42d49ea",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "12/02/14 2:54 PM",
      "commitNameOld": "fc14360b0340a33c0e1eb34967d4dcd772533418",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 13.73,
      "commitsBetweenForRepo": 106,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n   private static AclFeature createAclFeature(List\u003cAclEntry\u003e accessEntries,\n       List\u003cAclEntry\u003e defaultEntries) {\n     // Pre-allocate list size for the explicit entries stored in the feature,\n     // which is all entries minus the 3 entries implicitly stored in the\n     // permission bits.\n     List\u003cAclEntry\u003e featureEntries \u003d Lists.newArrayListWithCapacity(\n       (accessEntries.size() - 3) + defaultEntries.size());\n \n     // For the access ACL, the feature only needs to hold the named user and\n     // group entries.  For a correctly sorted ACL, these will be in a\n     // predictable range.\n     if (!isMinimalAcl(accessEntries)) {\n       featureEntries.addAll(\n         accessEntries.subList(1, accessEntries.size() - 2));\n     }\n \n     // Add all default entries to the feature.\n     featureEntries.addAll(defaultEntries);\n-    return new AclFeature(Collections.unmodifiableList(featureEntries));\n+    return new AclFeature(ImmutableList.copyOf(featureEntries));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static AclFeature createAclFeature(List\u003cAclEntry\u003e accessEntries,\n      List\u003cAclEntry\u003e defaultEntries) {\n    // Pre-allocate list size for the explicit entries stored in the feature,\n    // which is all entries minus the 3 entries implicitly stored in the\n    // permission bits.\n    List\u003cAclEntry\u003e featureEntries \u003d Lists.newArrayListWithCapacity(\n      (accessEntries.size() - 3) + defaultEntries.size());\n\n    // For the access ACL, the feature only needs to hold the named user and\n    // group entries.  For a correctly sorted ACL, these will be in a\n    // predictable range.\n    if (!isMinimalAcl(accessEntries)) {\n      featureEntries.addAll(\n        accessEntries.subList(1, accessEntries.size() - 2));\n    }\n\n    // Add all default entries to the feature.\n    featureEntries.addAll(defaultEntries);\n    return new AclFeature(ImmutableList.copyOf(featureEntries));\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/AclStorage.java",
      "extendedDetails": {}
    },
    "c89c516b95f45e04af55d9030043a42e2d07b02b": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5616. NameNode: implement default ACL handling. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4685@1565845 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/02/14 3:11 PM",
      "commitName": "c89c516b95f45e04af55d9030043a42e2d07b02b",
      "commitAuthor": "Chris Nauroth",
      "diff": "@@ -0,0 +1,20 @@\n+  private static AclFeature createAclFeature(List\u003cAclEntry\u003e accessEntries,\n+      List\u003cAclEntry\u003e defaultEntries) {\n+    // Pre-allocate list size for the explicit entries stored in the feature,\n+    // which is all entries minus the 3 entries implicitly stored in the\n+    // permission bits.\n+    List\u003cAclEntry\u003e featureEntries \u003d Lists.newArrayListWithCapacity(\n+      (accessEntries.size() - 3) + defaultEntries.size());\n+\n+    // For the access ACL, the feature only needs to hold the named user and\n+    // group entries.  For a correctly sorted ACL, these will be in a\n+    // predictable range.\n+    if (!isMinimalAcl(accessEntries)) {\n+      featureEntries.addAll(\n+        accessEntries.subList(1, accessEntries.size() - 2));\n+    }\n+\n+    // Add all default entries to the feature.\n+    featureEntries.addAll(defaultEntries);\n+    return new AclFeature(Collections.unmodifiableList(featureEntries));\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static AclFeature createAclFeature(List\u003cAclEntry\u003e accessEntries,\n      List\u003cAclEntry\u003e defaultEntries) {\n    // Pre-allocate list size for the explicit entries stored in the feature,\n    // which is all entries minus the 3 entries implicitly stored in the\n    // permission bits.\n    List\u003cAclEntry\u003e featureEntries \u003d Lists.newArrayListWithCapacity(\n      (accessEntries.size() - 3) + defaultEntries.size());\n\n    // For the access ACL, the feature only needs to hold the named user and\n    // group entries.  For a correctly sorted ACL, these will be in a\n    // predictable range.\n    if (!isMinimalAcl(accessEntries)) {\n      featureEntries.addAll(\n        accessEntries.subList(1, accessEntries.size() - 2));\n    }\n\n    // Add all default entries to the feature.\n    featureEntries.addAll(defaultEntries);\n    return new AclFeature(Collections.unmodifiableList(featureEntries));\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/AclStorage.java"
    }
  }
}