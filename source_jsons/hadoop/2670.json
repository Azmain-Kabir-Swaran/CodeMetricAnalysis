{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ClientNamenodeProtocolTranslatorPB.java",
  "functionName": "addErasureCodingPolicies",
  "functionId": "addErasureCodingPolicies___policies-ErasureCodingPolicy[]",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolTranslatorPB.java",
  "functionStartLine": 1869,
  "functionEndLine": 1888,
  "numCommitsSeen": 58,
  "timeTaken": 3475,
  "changeHistory": [
    "a12f09ba3c4a3aa4c4558090c5e1b7bcaebe3b94",
    "a62be38a5e5d3a61dfb59054b3f5fd5b1b7053b3",
    "cb672a45a0bbd8950b9b5e304c2e03f516945903"
  ],
  "changeHistoryShort": {
    "a12f09ba3c4a3aa4c4558090c5e1b7bcaebe3b94": "Ymultichange(Yreturntypechange,Ybodychange)",
    "a62be38a5e5d3a61dfb59054b3f5fd5b1b7053b3": "Ymultichange(Yreturntypechange,Ybodychange)",
    "cb672a45a0bbd8950b9b5e304c2e03f516945903": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a12f09ba3c4a3aa4c4558090c5e1b7bcaebe3b94": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-12447. Rename AddECPolicyResponse to AddErasureCodingPolicyResponse. Contributed by SammiChen.\n",
      "commitDate": "20/09/17 11:51 AM",
      "commitName": "a12f09ba3c4a3aa4c4558090c5e1b7bcaebe3b94",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-12447. Rename AddECPolicyResponse to AddErasureCodingPolicyResponse. Contributed by SammiChen.\n",
          "commitDate": "20/09/17 11:51 AM",
          "commitName": "a12f09ba3c4a3aa4c4558090c5e1b7bcaebe3b94",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "07/09/17 4:57 PM",
          "commitNameOld": "4e50dc976a92a9560630c87cfc4e4513916e5735",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 12.79,
          "commitsBetweenForRepo": 153,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,20 @@\n-  public AddECPolicyResponse[] addErasureCodingPolicies(\n+  public AddErasureCodingPolicyResponse[] addErasureCodingPolicies(\n       ErasureCodingPolicy[] policies) throws IOException {\n     List\u003cErasureCodingPolicyProto\u003e protos \u003d Arrays.stream(policies)\n         .map(PBHelperClient::convertErasureCodingPolicy)\n         .collect(Collectors.toList());\n     AddErasureCodingPoliciesRequestProto req \u003d\n         AddErasureCodingPoliciesRequestProto.newBuilder()\n         .addAllEcPolicies(protos).build();\n     try {\n       AddErasureCodingPoliciesResponseProto rep \u003d rpcProxy\n           .addErasureCodingPolicies(null, req);\n-      AddECPolicyResponse[] responses \u003d rep.getResponsesList().stream()\n-          .map(PBHelperClient::convertAddECPolicyResponse)\n-          .toArray(AddECPolicyResponse[]::new);\n+      AddErasureCodingPolicyResponse[] responses \u003d\n+          rep.getResponsesList().stream()\n+              .map(PBHelperClient::convertAddErasureCodingPolicyResponse)\n+              .toArray(AddErasureCodingPolicyResponse[]::new);\n       return responses;\n     }  catch (ServiceException e) {\n       throw ProtobufHelper.getRemoteException(e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public AddErasureCodingPolicyResponse[] addErasureCodingPolicies(\n      ErasureCodingPolicy[] policies) throws IOException {\n    List\u003cErasureCodingPolicyProto\u003e protos \u003d Arrays.stream(policies)\n        .map(PBHelperClient::convertErasureCodingPolicy)\n        .collect(Collectors.toList());\n    AddErasureCodingPoliciesRequestProto req \u003d\n        AddErasureCodingPoliciesRequestProto.newBuilder()\n        .addAllEcPolicies(protos).build();\n    try {\n      AddErasureCodingPoliciesResponseProto rep \u003d rpcProxy\n          .addErasureCodingPolicies(null, req);\n      AddErasureCodingPolicyResponse[] responses \u003d\n          rep.getResponsesList().stream()\n              .map(PBHelperClient::convertAddErasureCodingPolicyResponse)\n              .toArray(AddErasureCodingPolicyResponse[]::new);\n      return responses;\n    }  catch (ServiceException e) {\n      throw ProtobufHelper.getRemoteException(e);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolTranslatorPB.java",
          "extendedDetails": {
            "oldValue": "AddECPolicyResponse[]",
            "newValue": "AddErasureCodingPolicyResponse[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-12447. Rename AddECPolicyResponse to AddErasureCodingPolicyResponse. Contributed by SammiChen.\n",
          "commitDate": "20/09/17 11:51 AM",
          "commitName": "a12f09ba3c4a3aa4c4558090c5e1b7bcaebe3b94",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "07/09/17 4:57 PM",
          "commitNameOld": "4e50dc976a92a9560630c87cfc4e4513916e5735",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 12.79,
          "commitsBetweenForRepo": 153,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,20 @@\n-  public AddECPolicyResponse[] addErasureCodingPolicies(\n+  public AddErasureCodingPolicyResponse[] addErasureCodingPolicies(\n       ErasureCodingPolicy[] policies) throws IOException {\n     List\u003cErasureCodingPolicyProto\u003e protos \u003d Arrays.stream(policies)\n         .map(PBHelperClient::convertErasureCodingPolicy)\n         .collect(Collectors.toList());\n     AddErasureCodingPoliciesRequestProto req \u003d\n         AddErasureCodingPoliciesRequestProto.newBuilder()\n         .addAllEcPolicies(protos).build();\n     try {\n       AddErasureCodingPoliciesResponseProto rep \u003d rpcProxy\n           .addErasureCodingPolicies(null, req);\n-      AddECPolicyResponse[] responses \u003d rep.getResponsesList().stream()\n-          .map(PBHelperClient::convertAddECPolicyResponse)\n-          .toArray(AddECPolicyResponse[]::new);\n+      AddErasureCodingPolicyResponse[] responses \u003d\n+          rep.getResponsesList().stream()\n+              .map(PBHelperClient::convertAddErasureCodingPolicyResponse)\n+              .toArray(AddErasureCodingPolicyResponse[]::new);\n       return responses;\n     }  catch (ServiceException e) {\n       throw ProtobufHelper.getRemoteException(e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public AddErasureCodingPolicyResponse[] addErasureCodingPolicies(\n      ErasureCodingPolicy[] policies) throws IOException {\n    List\u003cErasureCodingPolicyProto\u003e protos \u003d Arrays.stream(policies)\n        .map(PBHelperClient::convertErasureCodingPolicy)\n        .collect(Collectors.toList());\n    AddErasureCodingPoliciesRequestProto req \u003d\n        AddErasureCodingPoliciesRequestProto.newBuilder()\n        .addAllEcPolicies(protos).build();\n    try {\n      AddErasureCodingPoliciesResponseProto rep \u003d rpcProxy\n          .addErasureCodingPolicies(null, req);\n      AddErasureCodingPolicyResponse[] responses \u003d\n          rep.getResponsesList().stream()\n              .map(PBHelperClient::convertAddErasureCodingPolicyResponse)\n              .toArray(AddErasureCodingPolicyResponse[]::new);\n      return responses;\n    }  catch (ServiceException e) {\n      throw ProtobufHelper.getRemoteException(e);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolTranslatorPB.java",
          "extendedDetails": {}
        }
      ]
    },
    "a62be38a5e5d3a61dfb59054b3f5fd5b1b7053b3": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-11793. Allow to enable user defined erasure coding policy. Contributed by Sammi Chen\n",
      "commitDate": "24/05/17 3:45 AM",
      "commitName": "a62be38a5e5d3a61dfb59054b3f5fd5b1b7053b3",
      "commitAuthor": "Kai Zheng",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-11793. Allow to enable user defined erasure coding policy. Contributed by Sammi Chen\n",
          "commitDate": "24/05/17 3:45 AM",
          "commitName": "a62be38a5e5d3a61dfb59054b3f5fd5b1b7053b3",
          "commitAuthor": "Kai Zheng",
          "commitDateOld": "23/05/17 4:33 AM",
          "commitNameOld": "1b5451bf054c335188e4cd66f7b4a1d80013e86d",
          "commitAuthorOld": "Rakesh Radhakrishnan",
          "daysBetweenCommits": 0.97,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,19 @@\n-  public AddingECPolicyResponse[] addErasureCodingPolicies(\n+  public AddECPolicyResponse[] addErasureCodingPolicies(\n       ErasureCodingPolicy[] policies) throws IOException {\n     List\u003cErasureCodingPolicyProto\u003e protos \u003d Arrays.stream(policies)\n         .map(PBHelperClient::convertErasureCodingPolicy)\n         .collect(Collectors.toList());\n     AddErasureCodingPoliciesRequestProto req \u003d\n         AddErasureCodingPoliciesRequestProto.newBuilder()\n         .addAllEcPolicies(protos).build();\n     try {\n       AddErasureCodingPoliciesResponseProto rep \u003d rpcProxy\n           .addErasureCodingPolicies(null, req);\n-      AddingECPolicyResponse[] responses \u003d rep.getResponsesList().stream()\n-          .map(PBHelperClient::convertAddingECPolicyResponse)\n-          .toArray(AddingECPolicyResponse[]::new);\n+      AddECPolicyResponse[] responses \u003d rep.getResponsesList().stream()\n+          .map(PBHelperClient::convertAddECPolicyResponse)\n+          .toArray(AddECPolicyResponse[]::new);\n       return responses;\n     }  catch (ServiceException e) {\n       throw ProtobufHelper.getRemoteException(e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public AddECPolicyResponse[] addErasureCodingPolicies(\n      ErasureCodingPolicy[] policies) throws IOException {\n    List\u003cErasureCodingPolicyProto\u003e protos \u003d Arrays.stream(policies)\n        .map(PBHelperClient::convertErasureCodingPolicy)\n        .collect(Collectors.toList());\n    AddErasureCodingPoliciesRequestProto req \u003d\n        AddErasureCodingPoliciesRequestProto.newBuilder()\n        .addAllEcPolicies(protos).build();\n    try {\n      AddErasureCodingPoliciesResponseProto rep \u003d rpcProxy\n          .addErasureCodingPolicies(null, req);\n      AddECPolicyResponse[] responses \u003d rep.getResponsesList().stream()\n          .map(PBHelperClient::convertAddECPolicyResponse)\n          .toArray(AddECPolicyResponse[]::new);\n      return responses;\n    }  catch (ServiceException e) {\n      throw ProtobufHelper.getRemoteException(e);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolTranslatorPB.java",
          "extendedDetails": {
            "oldValue": "AddingECPolicyResponse[]",
            "newValue": "AddECPolicyResponse[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-11793. Allow to enable user defined erasure coding policy. Contributed by Sammi Chen\n",
          "commitDate": "24/05/17 3:45 AM",
          "commitName": "a62be38a5e5d3a61dfb59054b3f5fd5b1b7053b3",
          "commitAuthor": "Kai Zheng",
          "commitDateOld": "23/05/17 4:33 AM",
          "commitNameOld": "1b5451bf054c335188e4cd66f7b4a1d80013e86d",
          "commitAuthorOld": "Rakesh Radhakrishnan",
          "daysBetweenCommits": 0.97,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,19 @@\n-  public AddingECPolicyResponse[] addErasureCodingPolicies(\n+  public AddECPolicyResponse[] addErasureCodingPolicies(\n       ErasureCodingPolicy[] policies) throws IOException {\n     List\u003cErasureCodingPolicyProto\u003e protos \u003d Arrays.stream(policies)\n         .map(PBHelperClient::convertErasureCodingPolicy)\n         .collect(Collectors.toList());\n     AddErasureCodingPoliciesRequestProto req \u003d\n         AddErasureCodingPoliciesRequestProto.newBuilder()\n         .addAllEcPolicies(protos).build();\n     try {\n       AddErasureCodingPoliciesResponseProto rep \u003d rpcProxy\n           .addErasureCodingPolicies(null, req);\n-      AddingECPolicyResponse[] responses \u003d rep.getResponsesList().stream()\n-          .map(PBHelperClient::convertAddingECPolicyResponse)\n-          .toArray(AddingECPolicyResponse[]::new);\n+      AddECPolicyResponse[] responses \u003d rep.getResponsesList().stream()\n+          .map(PBHelperClient::convertAddECPolicyResponse)\n+          .toArray(AddECPolicyResponse[]::new);\n       return responses;\n     }  catch (ServiceException e) {\n       throw ProtobufHelper.getRemoteException(e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public AddECPolicyResponse[] addErasureCodingPolicies(\n      ErasureCodingPolicy[] policies) throws IOException {\n    List\u003cErasureCodingPolicyProto\u003e protos \u003d Arrays.stream(policies)\n        .map(PBHelperClient::convertErasureCodingPolicy)\n        .collect(Collectors.toList());\n    AddErasureCodingPoliciesRequestProto req \u003d\n        AddErasureCodingPoliciesRequestProto.newBuilder()\n        .addAllEcPolicies(protos).build();\n    try {\n      AddErasureCodingPoliciesResponseProto rep \u003d rpcProxy\n          .addErasureCodingPolicies(null, req);\n      AddECPolicyResponse[] responses \u003d rep.getResponsesList().stream()\n          .map(PBHelperClient::convertAddECPolicyResponse)\n          .toArray(AddECPolicyResponse[]::new);\n      return responses;\n    }  catch (ServiceException e) {\n      throw ProtobufHelper.getRemoteException(e);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolTranslatorPB.java",
          "extendedDetails": {}
        }
      ]
    },
    "cb672a45a0bbd8950b9b5e304c2e03f516945903": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-11605. Allow user to customize new erasure code policies. Contributed by Huafeng Wang\n",
      "commitDate": "27/04/17 10:18 PM",
      "commitName": "cb672a45a0bbd8950b9b5e304c2e03f516945903",
      "commitAuthor": "Kai Zheng",
      "diff": "@@ -0,0 +1,19 @@\n+  public AddingECPolicyResponse[] addErasureCodingPolicies(\n+      ErasureCodingPolicy[] policies) throws IOException {\n+    List\u003cErasureCodingPolicyProto\u003e protos \u003d Arrays.stream(policies)\n+        .map(PBHelperClient::convertErasureCodingPolicy)\n+        .collect(Collectors.toList());\n+    AddErasureCodingPoliciesRequestProto req \u003d\n+        AddErasureCodingPoliciesRequestProto.newBuilder()\n+        .addAllEcPolicies(protos).build();\n+    try {\n+      AddErasureCodingPoliciesResponseProto rep \u003d rpcProxy\n+          .addErasureCodingPolicies(null, req);\n+      AddingECPolicyResponse[] responses \u003d rep.getResponsesList().stream()\n+          .map(PBHelperClient::convertAddingECPolicyResponse)\n+          .toArray(AddingECPolicyResponse[]::new);\n+      return responses;\n+    }  catch (ServiceException e) {\n+      throw ProtobufHelper.getRemoteException(e);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public AddingECPolicyResponse[] addErasureCodingPolicies(\n      ErasureCodingPolicy[] policies) throws IOException {\n    List\u003cErasureCodingPolicyProto\u003e protos \u003d Arrays.stream(policies)\n        .map(PBHelperClient::convertErasureCodingPolicy)\n        .collect(Collectors.toList());\n    AddErasureCodingPoliciesRequestProto req \u003d\n        AddErasureCodingPoliciesRequestProto.newBuilder()\n        .addAllEcPolicies(protos).build();\n    try {\n      AddErasureCodingPoliciesResponseProto rep \u003d rpcProxy\n          .addErasureCodingPolicies(null, req);\n      AddingECPolicyResponse[] responses \u003d rep.getResponsesList().stream()\n          .map(PBHelperClient::convertAddingECPolicyResponse)\n          .toArray(AddingECPolicyResponse[]::new);\n      return responses;\n    }  catch (ServiceException e) {\n      throw ProtobufHelper.getRemoteException(e);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocolPB/ClientNamenodeProtocolTranslatorPB.java"
    }
  }
}