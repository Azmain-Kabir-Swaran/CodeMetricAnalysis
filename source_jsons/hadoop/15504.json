{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Diff.java",
  "functionName": "modify",
  "functionId": "modify___oldElement-E(modifiers-final)__newElement-E(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/Diff.java",
  "functionStartLine": 325,
  "functionEndLine": 349,
  "numCommitsSeen": 52,
  "timeTaken": 3730,
  "changeHistory": [
    "ba0da2785d251745969f88a50d33ce61876d91aa",
    "65752c09ab4c070fbb7013c785d0db1dccd55d8f",
    "43bdc22e9207a74678665de5f109dd7e56fe979a",
    "9701555899315c94584b24d8717c1d7540a4a491",
    "43f8d0b9c9e209eb503451613c2f8d3fed07c203",
    "a3bf2083867db5d848ea14f145d120f02b820af2",
    "bb80f2fb29d6f58d9c35f4a1fd88c99517f43e16",
    "fe3584aadfc7839abcd03239e4d07afd12b8b90f",
    "00d318378e4b43d36be91b29ae3ef8a879a81e1e",
    "b9f965de120b5278ac84a7e98aecb32aafde4c16",
    "cbbaa93ae09bf5cf643263faf78f99315c4f3a8d",
    "e5a7b3d4307951f0574c2341178e3cd95e69f7b7"
  ],
  "changeHistoryShort": {
    "ba0da2785d251745969f88a50d33ce61876d91aa": "Ybodychange",
    "65752c09ab4c070fbb7013c785d0db1dccd55d8f": "Ybodychange",
    "43bdc22e9207a74678665de5f109dd7e56fe979a": "Ybodychange",
    "9701555899315c94584b24d8717c1d7540a4a491": "Ybodychange",
    "43f8d0b9c9e209eb503451613c2f8d3fed07c203": "Yfilerename",
    "a3bf2083867db5d848ea14f145d120f02b820af2": "Ymultichange(Ymovefromfile,Yreturntypechange,Ymodifierchange,Ybodychange,Yparameterchange)",
    "bb80f2fb29d6f58d9c35f4a1fd88c99517f43e16": "Ymultichange(Yparameterchange,Ybodychange)",
    "fe3584aadfc7839abcd03239e4d07afd12b8b90f": "Ymultichange(Yparameterchange,Ybodychange)",
    "00d318378e4b43d36be91b29ae3ef8a879a81e1e": "Ybodychange",
    "b9f965de120b5278ac84a7e98aecb32aafde4c16": "Ybodychange",
    "cbbaa93ae09bf5cf643263faf78f99315c4f3a8d": "Ymultichange(Yreturntypechange,Ybodychange)",
    "e5a7b3d4307951f0574c2341178e3cd95e69f7b7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ba0da2785d251745969f88a50d33ce61876d91aa": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13252. Code refactoring: Remove Diff.ListType.\n",
      "commitDate": "09/03/18 3:50 PM",
      "commitName": "ba0da2785d251745969f88a50d33ce61876d91aa",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "31/05/17 8:09 AM",
      "commitNameOld": "13de636b4079b077890ad10389ff350dcf8086a2",
      "commitAuthorOld": "Brahma Reddy Battula",
      "daysBetweenCommits": 282.36,
      "commitsBetweenForRepo": 1962,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   public UndoInfo\u003cE\u003e modify(final E oldElement, final E newElement) {\n     Preconditions.checkArgument(oldElement !\u003d newElement,\n         \"They are the same object: oldElement \u003d\u003d newElement \u003d %s\", newElement);\n     Preconditions.checkArgument(oldElement.compareTo(newElement.getKey()) \u003d\u003d 0,\n         \"The names do not match: oldElement\u003d%s, newElement\u003d%s\",\n         oldElement, newElement);\n     final int c \u003d search(created, newElement.getKey());\n     E previous \u003d null;\n     Integer d \u003d null;\n     if (c \u003e\u003d 0) {\n       // Case 1.1.3 and 2.3.3: element is already in c-list,\n       previous \u003d created.set(c, newElement);\n       \n       // For previous !\u003d oldElement, set it to oldElement\n       previous \u003d oldElement;\n     } else {\n       d \u003d search(deleted, oldElement.getKey());\n       if (d \u003c 0) {\n         // Case 2.3: neither in c-list nor d-list\n-        insert(ListType.CREATED, newElement, c);\n-        insert(ListType.DELETED, oldElement, d);\n+        addCreated(newElement, c);\n+        addDeleted(oldElement, d);\n       }\n     }\n     return new UndoInfo\u003cE\u003e(c, previous, d);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public UndoInfo\u003cE\u003e modify(final E oldElement, final E newElement) {\n    Preconditions.checkArgument(oldElement !\u003d newElement,\n        \"They are the same object: oldElement \u003d\u003d newElement \u003d %s\", newElement);\n    Preconditions.checkArgument(oldElement.compareTo(newElement.getKey()) \u003d\u003d 0,\n        \"The names do not match: oldElement\u003d%s, newElement\u003d%s\",\n        oldElement, newElement);\n    final int c \u003d search(created, newElement.getKey());\n    E previous \u003d null;\n    Integer d \u003d null;\n    if (c \u003e\u003d 0) {\n      // Case 1.1.3 and 2.3.3: element is already in c-list,\n      previous \u003d created.set(c, newElement);\n      \n      // For previous !\u003d oldElement, set it to oldElement\n      previous \u003d oldElement;\n    } else {\n      d \u003d search(deleted, oldElement.getKey());\n      if (d \u003c 0) {\n        // Case 2.3: neither in c-list nor d-list\n        addCreated(newElement, c);\n        addDeleted(oldElement, d);\n      }\n    }\n    return new UndoInfo\u003cE\u003e(c, previous, d);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/Diff.java",
      "extendedDetails": {}
    },
    "65752c09ab4c070fbb7013c785d0db1dccd55d8f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4735. DisallowSnapshot throws IllegalStateException for nested snapshottable directories.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1471214 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/04/13 5:28 PM",
      "commitName": "65752c09ab4c070fbb7013c785d0db1dccd55d8f",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "22/04/13 3:13 PM",
      "commitNameOld": "43bdc22e9207a74678665de5f109dd7e56fe979a",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 1.09,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   public UndoInfo\u003cE\u003e modify(final E oldElement, final E newElement) {\n     Preconditions.checkArgument(oldElement !\u003d newElement,\n         \"They are the same object: oldElement \u003d\u003d newElement \u003d %s\", newElement);\n     Preconditions.checkArgument(oldElement.compareTo(newElement.getKey()) \u003d\u003d 0,\n         \"The names do not match: oldElement\u003d%s, newElement\u003d%s\",\n         oldElement, newElement);\n     final int c \u003d search(created, newElement.getKey());\n     E previous \u003d null;\n     Integer d \u003d null;\n     if (c \u003e\u003d 0) {\n       // Case 1.1.3 and 2.3.3: element is already in c-list,\n       previous \u003d created.set(c, newElement);\n       \n-      //TODO: fix a bug that previous !\u003d oldElement.Set it to oldElement for now\n+      // For previous !\u003d oldElement, set it to oldElement\n       previous \u003d oldElement;\n     } else {\n       d \u003d search(deleted, oldElement.getKey());\n       if (d \u003c 0) {\n         // Case 2.3: neither in c-list nor d-list\n         insert(ListType.CREATED, newElement, c);\n         insert(ListType.DELETED, oldElement, d);\n       }\n     }\n     return new UndoInfo\u003cE\u003e(c, previous, d);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public UndoInfo\u003cE\u003e modify(final E oldElement, final E newElement) {\n    Preconditions.checkArgument(oldElement !\u003d newElement,\n        \"They are the same object: oldElement \u003d\u003d newElement \u003d %s\", newElement);\n    Preconditions.checkArgument(oldElement.compareTo(newElement.getKey()) \u003d\u003d 0,\n        \"The names do not match: oldElement\u003d%s, newElement\u003d%s\",\n        oldElement, newElement);\n    final int c \u003d search(created, newElement.getKey());\n    E previous \u003d null;\n    Integer d \u003d null;\n    if (c \u003e\u003d 0) {\n      // Case 1.1.3 and 2.3.3: element is already in c-list,\n      previous \u003d created.set(c, newElement);\n      \n      // For previous !\u003d oldElement, set it to oldElement\n      previous \u003d oldElement;\n    } else {\n      d \u003d search(deleted, oldElement.getKey());\n      if (d \u003c 0) {\n        // Case 2.3: neither in c-list nor d-list\n        insert(ListType.CREATED, newElement, c);\n        insert(ListType.DELETED, oldElement, d);\n      }\n    }\n    return new UndoInfo\u003cE\u003e(c, previous, d);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/Diff.java",
      "extendedDetails": {}
    },
    "43bdc22e9207a74678665de5f109dd7e56fe979a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4726. Fix test failures after merging the INodeId-INode mapping from trunk.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1470735 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/04/13 3:13 PM",
      "commitName": "43bdc22e9207a74678665de5f109dd7e56fe979a",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "18/03/13 11:27 PM",
      "commitNameOld": "9701555899315c94584b24d8717c1d7540a4a491",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 34.66,
      "commitsBetweenForRepo": 205,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   public UndoInfo\u003cE\u003e modify(final E oldElement, final E newElement) {\n     Preconditions.checkArgument(oldElement !\u003d newElement,\n         \"They are the same object: oldElement \u003d\u003d newElement \u003d %s\", newElement);\n-    Preconditions.checkArgument(oldElement.equals(newElement),\n+    Preconditions.checkArgument(oldElement.compareTo(newElement.getKey()) \u003d\u003d 0,\n         \"The names do not match: oldElement\u003d%s, newElement\u003d%s\",\n         oldElement, newElement);\n     final int c \u003d search(created, newElement.getKey());\n     E previous \u003d null;\n     Integer d \u003d null;\n     if (c \u003e\u003d 0) {\n       // Case 1.1.3 and 2.3.3: element is already in c-list,\n       previous \u003d created.set(c, newElement);\n       \n       //TODO: fix a bug that previous !\u003d oldElement.Set it to oldElement for now\n       previous \u003d oldElement;\n     } else {\n       d \u003d search(deleted, oldElement.getKey());\n       if (d \u003c 0) {\n         // Case 2.3: neither in c-list nor d-list\n         insert(ListType.CREATED, newElement, c);\n         insert(ListType.DELETED, oldElement, d);\n       }\n     }\n     return new UndoInfo\u003cE\u003e(c, previous, d);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public UndoInfo\u003cE\u003e modify(final E oldElement, final E newElement) {\n    Preconditions.checkArgument(oldElement !\u003d newElement,\n        \"They are the same object: oldElement \u003d\u003d newElement \u003d %s\", newElement);\n    Preconditions.checkArgument(oldElement.compareTo(newElement.getKey()) \u003d\u003d 0,\n        \"The names do not match: oldElement\u003d%s, newElement\u003d%s\",\n        oldElement, newElement);\n    final int c \u003d search(created, newElement.getKey());\n    E previous \u003d null;\n    Integer d \u003d null;\n    if (c \u003e\u003d 0) {\n      // Case 1.1.3 and 2.3.3: element is already in c-list,\n      previous \u003d created.set(c, newElement);\n      \n      //TODO: fix a bug that previous !\u003d oldElement.Set it to oldElement for now\n      previous \u003d oldElement;\n    } else {\n      d \u003d search(deleted, oldElement.getKey());\n      if (d \u003c 0) {\n        // Case 2.3: neither in c-list nor d-list\n        insert(ListType.CREATED, newElement, c);\n        insert(ListType.DELETED, oldElement, d);\n      }\n    }\n    return new UndoInfo\u003cE\u003e(c, previous, d);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/Diff.java",
      "extendedDetails": {}
    },
    "9701555899315c94584b24d8717c1d7540a4a491": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4534. Add INodeReference in order to support rename with snapshots.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1458164 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/03/13 11:27 PM",
      "commitName": "9701555899315c94584b24d8717c1d7540a4a491",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "11/03/13 7:41 PM",
      "commitNameOld": "3b3ea5c4220e674064c7603a449f63904c10bac1",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 7.16,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   public UndoInfo\u003cE\u003e modify(final E oldElement, final E newElement) {\n     Preconditions.checkArgument(oldElement !\u003d newElement,\n         \"They are the same object: oldElement \u003d\u003d newElement \u003d %s\", newElement);\n     Preconditions.checkArgument(oldElement.equals(newElement),\n         \"The names do not match: oldElement\u003d%s, newElement\u003d%s\",\n         oldElement, newElement);\n     final int c \u003d search(created, newElement.getKey());\n     E previous \u003d null;\n     Integer d \u003d null;\n     if (c \u003e\u003d 0) {\n       // Case 1.1.3 and 2.3.3: element is already in c-list,\n       previous \u003d created.set(c, newElement);\n       \n       //TODO: fix a bug that previous !\u003d oldElement.Set it to oldElement for now\n       previous \u003d oldElement;\n     } else {\n       d \u003d search(deleted, oldElement.getKey());\n       if (d \u003c 0) {\n         // Case 2.3: neither in c-list nor d-list\n-        insertCreated(newElement, c);\n-        insertDeleted(oldElement, d);\n+        insert(ListType.CREATED, newElement, c);\n+        insert(ListType.DELETED, oldElement, d);\n       }\n     }\n     return new UndoInfo\u003cE\u003e(c, previous, d);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public UndoInfo\u003cE\u003e modify(final E oldElement, final E newElement) {\n    Preconditions.checkArgument(oldElement !\u003d newElement,\n        \"They are the same object: oldElement \u003d\u003d newElement \u003d %s\", newElement);\n    Preconditions.checkArgument(oldElement.equals(newElement),\n        \"The names do not match: oldElement\u003d%s, newElement\u003d%s\",\n        oldElement, newElement);\n    final int c \u003d search(created, newElement.getKey());\n    E previous \u003d null;\n    Integer d \u003d null;\n    if (c \u003e\u003d 0) {\n      // Case 1.1.3 and 2.3.3: element is already in c-list,\n      previous \u003d created.set(c, newElement);\n      \n      //TODO: fix a bug that previous !\u003d oldElement.Set it to oldElement for now\n      previous \u003d oldElement;\n    } else {\n      d \u003d search(deleted, oldElement.getKey());\n      if (d \u003c 0) {\n        // Case 2.3: neither in c-list nor d-list\n        insert(ListType.CREATED, newElement, c);\n        insert(ListType.DELETED, oldElement, d);\n      }\n    }\n    return new UndoInfo\u003cE\u003e(c, previous, d);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/Diff.java",
      "extendedDetails": {}
    },
    "43f8d0b9c9e209eb503451613c2f8d3fed07c203": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-4574. Move Diff to the util package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1454988 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/03/13 8:45 PM",
      "commitName": "43f8d0b9c9e209eb503451613c2f8d3fed07c203",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "09/03/13 10:14 AM",
      "commitNameOld": "d32fb8a62b323a21228d864ce0e859464fb1f160",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 1.4,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public UndoInfo\u003cE\u003e modify(final E oldElement, final E newElement) {\n    Preconditions.checkArgument(oldElement !\u003d newElement,\n        \"They are the same object: oldElement \u003d\u003d newElement \u003d %s\", newElement);\n    Preconditions.checkArgument(oldElement.equals(newElement),\n        \"The names do not match: oldElement\u003d%s, newElement\u003d%s\",\n        oldElement, newElement);\n    final int c \u003d search(created, newElement.getKey());\n    E previous \u003d null;\n    Integer d \u003d null;\n    if (c \u003e\u003d 0) {\n      // Case 1.1.3 and 2.3.3: element is already in c-list,\n      previous \u003d created.set(c, newElement);\n      \n      //TODO: fix a bug that previous !\u003d oldElement.Set it to oldElement for now\n      previous \u003d oldElement;\n    } else {\n      d \u003d search(deleted, oldElement.getKey());\n      if (d \u003c 0) {\n        // Case 2.3: neither in c-list nor d-list\n        insertCreated(newElement, c);\n        insertDeleted(oldElement, d);\n      }\n    }\n    return new UndoInfo\u003cE\u003e(c, previous, d);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/Diff.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/diff/Diff.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/Diff.java"
      }
    },
    "a3bf2083867db5d848ea14f145d120f02b820af2": {
      "type": "Ymultichange(Ymovefromfile,Yreturntypechange,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "HDFS-4441. Move INodeDirectoryWithSnapshot.Diff and the related classes to a package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1438782 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/01/13 4:01 PM",
      "commitName": "a3bf2083867db5d848ea14f145d120f02b820af2",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-4441. Move INodeDirectoryWithSnapshot.Diff and the related classes to a package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1438782 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "25/01/13 4:01 PM",
          "commitName": "a3bf2083867db5d848ea14f145d120f02b820af2",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "24/01/13 7:13 PM",
          "commitNameOld": "569d63d36cfc1744288b9ad756c0ff7d762f1549",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.87,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n-    Triple\u003cInteger, INode, Integer\u003e modify(final INode oldinode,\n-        final INode newinode) {\n-      if (!oldinode.equals(newinode)) {\n-        throw new AssertionError(\"The names do not match: oldinode\u003d\"\n-            + oldinode + \", newinode\u003d\" + newinode);\n+  public UndoInfo\u003cE\u003e modify(final E oldElement, final E newElement) {\n+    Preconditions.checkArgument(oldElement !\u003d newElement,\n+        \"They are the same object: oldElement \u003d\u003d newElement \u003d %s\", newElement);\n+    Preconditions.checkArgument(oldElement.equals(newElement),\n+        \"The names do not match: oldElement\u003d%s, newElement\u003d%s\",\n+        oldElement, newElement);\n+    final int c \u003d search(created, newElement.getKey());\n+    E previous \u003d null;\n+    Integer d \u003d null;\n+    if (c \u003e\u003d 0) {\n+      // Case 1.1.3 and 2.3.3: element is already in c-list,\n+      previous \u003d created.set(c, newElement);\n+      \n+      //TODO: fix a bug that previous !\u003d oldElement.Set it to oldElement for now\n+      previous \u003d oldElement;\n+    } else {\n+      d \u003d search(deleted, oldElement.getKey());\n+      if (d \u003c 0) {\n+        // Case 2.3: neither in c-list nor d-list\n+        insertCreated(newElement, c);\n+        insertDeleted(oldElement, d);\n       }\n-      final int c \u003d search(created, newinode);\n-      INode previous \u003d null;\n-      Integer d \u003d null;\n-      if (c \u003e\u003d 0) {\n-        // Case 1.1.3 and 2.3.3: inode is already in c-list,\n-        previous \u003d created.set(c, newinode);\n-        \n-        //TODO: fix a bug that previous !\u003d oldinode.  Set it to oldinode for now\n-        previous \u003d oldinode;\n-      } else {\n-        d \u003d search(deleted, oldinode);\n-        if (d \u003c 0) {\n-          // Case 2.3: neither in c-list nor d-list\n-          insertCreated(newinode, c);\n-          insertDeleted(oldinode, d);\n-        }\n-      }\n-      return new Triple\u003cInteger, INode, Integer\u003e(c, previous, d);\n-    }\n\\ No newline at end of file\n+    }\n+    return new UndoInfo\u003cE\u003e(c, previous, d);\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  public UndoInfo\u003cE\u003e modify(final E oldElement, final E newElement) {\n    Preconditions.checkArgument(oldElement !\u003d newElement,\n        \"They are the same object: oldElement \u003d\u003d newElement \u003d %s\", newElement);\n    Preconditions.checkArgument(oldElement.equals(newElement),\n        \"The names do not match: oldElement\u003d%s, newElement\u003d%s\",\n        oldElement, newElement);\n    final int c \u003d search(created, newElement.getKey());\n    E previous \u003d null;\n    Integer d \u003d null;\n    if (c \u003e\u003d 0) {\n      // Case 1.1.3 and 2.3.3: element is already in c-list,\n      previous \u003d created.set(c, newElement);\n      \n      //TODO: fix a bug that previous !\u003d oldElement.Set it to oldElement for now\n      previous \u003d oldElement;\n    } else {\n      d \u003d search(deleted, oldElement.getKey());\n      if (d \u003c 0) {\n        // Case 2.3: neither in c-list nor d-list\n        insertCreated(newElement, c);\n        insertDeleted(oldElement, d);\n      }\n    }\n    return new UndoInfo\u003cE\u003e(c, previous, d);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/diff/Diff.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/diff/Diff.java",
            "oldMethodName": "modify",
            "newMethodName": "modify"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-4441. Move INodeDirectoryWithSnapshot.Diff and the related classes to a package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1438782 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "25/01/13 4:01 PM",
          "commitName": "a3bf2083867db5d848ea14f145d120f02b820af2",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "24/01/13 7:13 PM",
          "commitNameOld": "569d63d36cfc1744288b9ad756c0ff7d762f1549",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.87,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n-    Triple\u003cInteger, INode, Integer\u003e modify(final INode oldinode,\n-        final INode newinode) {\n-      if (!oldinode.equals(newinode)) {\n-        throw new AssertionError(\"The names do not match: oldinode\u003d\"\n-            + oldinode + \", newinode\u003d\" + newinode);\n+  public UndoInfo\u003cE\u003e modify(final E oldElement, final E newElement) {\n+    Preconditions.checkArgument(oldElement !\u003d newElement,\n+        \"They are the same object: oldElement \u003d\u003d newElement \u003d %s\", newElement);\n+    Preconditions.checkArgument(oldElement.equals(newElement),\n+        \"The names do not match: oldElement\u003d%s, newElement\u003d%s\",\n+        oldElement, newElement);\n+    final int c \u003d search(created, newElement.getKey());\n+    E previous \u003d null;\n+    Integer d \u003d null;\n+    if (c \u003e\u003d 0) {\n+      // Case 1.1.3 and 2.3.3: element is already in c-list,\n+      previous \u003d created.set(c, newElement);\n+      \n+      //TODO: fix a bug that previous !\u003d oldElement.Set it to oldElement for now\n+      previous \u003d oldElement;\n+    } else {\n+      d \u003d search(deleted, oldElement.getKey());\n+      if (d \u003c 0) {\n+        // Case 2.3: neither in c-list nor d-list\n+        insertCreated(newElement, c);\n+        insertDeleted(oldElement, d);\n       }\n-      final int c \u003d search(created, newinode);\n-      INode previous \u003d null;\n-      Integer d \u003d null;\n-      if (c \u003e\u003d 0) {\n-        // Case 1.1.3 and 2.3.3: inode is already in c-list,\n-        previous \u003d created.set(c, newinode);\n-        \n-        //TODO: fix a bug that previous !\u003d oldinode.  Set it to oldinode for now\n-        previous \u003d oldinode;\n-      } else {\n-        d \u003d search(deleted, oldinode);\n-        if (d \u003c 0) {\n-          // Case 2.3: neither in c-list nor d-list\n-          insertCreated(newinode, c);\n-          insertDeleted(oldinode, d);\n-        }\n-      }\n-      return new Triple\u003cInteger, INode, Integer\u003e(c, previous, d);\n-    }\n\\ No newline at end of file\n+    }\n+    return new UndoInfo\u003cE\u003e(c, previous, d);\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  public UndoInfo\u003cE\u003e modify(final E oldElement, final E newElement) {\n    Preconditions.checkArgument(oldElement !\u003d newElement,\n        \"They are the same object: oldElement \u003d\u003d newElement \u003d %s\", newElement);\n    Preconditions.checkArgument(oldElement.equals(newElement),\n        \"The names do not match: oldElement\u003d%s, newElement\u003d%s\",\n        oldElement, newElement);\n    final int c \u003d search(created, newElement.getKey());\n    E previous \u003d null;\n    Integer d \u003d null;\n    if (c \u003e\u003d 0) {\n      // Case 1.1.3 and 2.3.3: element is already in c-list,\n      previous \u003d created.set(c, newElement);\n      \n      //TODO: fix a bug that previous !\u003d oldElement.Set it to oldElement for now\n      previous \u003d oldElement;\n    } else {\n      d \u003d search(deleted, oldElement.getKey());\n      if (d \u003c 0) {\n        // Case 2.3: neither in c-list nor d-list\n        insertCreated(newElement, c);\n        insertDeleted(oldElement, d);\n      }\n    }\n    return new UndoInfo\u003cE\u003e(c, previous, d);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/diff/Diff.java",
          "extendedDetails": {
            "oldValue": "Triple\u003cInteger,INode,Integer\u003e",
            "newValue": "UndoInfo\u003cE\u003e"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-4441. Move INodeDirectoryWithSnapshot.Diff and the related classes to a package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1438782 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "25/01/13 4:01 PM",
          "commitName": "a3bf2083867db5d848ea14f145d120f02b820af2",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "24/01/13 7:13 PM",
          "commitNameOld": "569d63d36cfc1744288b9ad756c0ff7d762f1549",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.87,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n-    Triple\u003cInteger, INode, Integer\u003e modify(final INode oldinode,\n-        final INode newinode) {\n-      if (!oldinode.equals(newinode)) {\n-        throw new AssertionError(\"The names do not match: oldinode\u003d\"\n-            + oldinode + \", newinode\u003d\" + newinode);\n+  public UndoInfo\u003cE\u003e modify(final E oldElement, final E newElement) {\n+    Preconditions.checkArgument(oldElement !\u003d newElement,\n+        \"They are the same object: oldElement \u003d\u003d newElement \u003d %s\", newElement);\n+    Preconditions.checkArgument(oldElement.equals(newElement),\n+        \"The names do not match: oldElement\u003d%s, newElement\u003d%s\",\n+        oldElement, newElement);\n+    final int c \u003d search(created, newElement.getKey());\n+    E previous \u003d null;\n+    Integer d \u003d null;\n+    if (c \u003e\u003d 0) {\n+      // Case 1.1.3 and 2.3.3: element is already in c-list,\n+      previous \u003d created.set(c, newElement);\n+      \n+      //TODO: fix a bug that previous !\u003d oldElement.Set it to oldElement for now\n+      previous \u003d oldElement;\n+    } else {\n+      d \u003d search(deleted, oldElement.getKey());\n+      if (d \u003c 0) {\n+        // Case 2.3: neither in c-list nor d-list\n+        insertCreated(newElement, c);\n+        insertDeleted(oldElement, d);\n       }\n-      final int c \u003d search(created, newinode);\n-      INode previous \u003d null;\n-      Integer d \u003d null;\n-      if (c \u003e\u003d 0) {\n-        // Case 1.1.3 and 2.3.3: inode is already in c-list,\n-        previous \u003d created.set(c, newinode);\n-        \n-        //TODO: fix a bug that previous !\u003d oldinode.  Set it to oldinode for now\n-        previous \u003d oldinode;\n-      } else {\n-        d \u003d search(deleted, oldinode);\n-        if (d \u003c 0) {\n-          // Case 2.3: neither in c-list nor d-list\n-          insertCreated(newinode, c);\n-          insertDeleted(oldinode, d);\n-        }\n-      }\n-      return new Triple\u003cInteger, INode, Integer\u003e(c, previous, d);\n-    }\n\\ No newline at end of file\n+    }\n+    return new UndoInfo\u003cE\u003e(c, previous, d);\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  public UndoInfo\u003cE\u003e modify(final E oldElement, final E newElement) {\n    Preconditions.checkArgument(oldElement !\u003d newElement,\n        \"They are the same object: oldElement \u003d\u003d newElement \u003d %s\", newElement);\n    Preconditions.checkArgument(oldElement.equals(newElement),\n        \"The names do not match: oldElement\u003d%s, newElement\u003d%s\",\n        oldElement, newElement);\n    final int c \u003d search(created, newElement.getKey());\n    E previous \u003d null;\n    Integer d \u003d null;\n    if (c \u003e\u003d 0) {\n      // Case 1.1.3 and 2.3.3: element is already in c-list,\n      previous \u003d created.set(c, newElement);\n      \n      //TODO: fix a bug that previous !\u003d oldElement.Set it to oldElement for now\n      previous \u003d oldElement;\n    } else {\n      d \u003d search(deleted, oldElement.getKey());\n      if (d \u003c 0) {\n        // Case 2.3: neither in c-list nor d-list\n        insertCreated(newElement, c);\n        insertDeleted(oldElement, d);\n      }\n    }\n    return new UndoInfo\u003cE\u003e(c, previous, d);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/diff/Diff.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4441. Move INodeDirectoryWithSnapshot.Diff and the related classes to a package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1438782 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "25/01/13 4:01 PM",
          "commitName": "a3bf2083867db5d848ea14f145d120f02b820af2",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "24/01/13 7:13 PM",
          "commitNameOld": "569d63d36cfc1744288b9ad756c0ff7d762f1549",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.87,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n-    Triple\u003cInteger, INode, Integer\u003e modify(final INode oldinode,\n-        final INode newinode) {\n-      if (!oldinode.equals(newinode)) {\n-        throw new AssertionError(\"The names do not match: oldinode\u003d\"\n-            + oldinode + \", newinode\u003d\" + newinode);\n+  public UndoInfo\u003cE\u003e modify(final E oldElement, final E newElement) {\n+    Preconditions.checkArgument(oldElement !\u003d newElement,\n+        \"They are the same object: oldElement \u003d\u003d newElement \u003d %s\", newElement);\n+    Preconditions.checkArgument(oldElement.equals(newElement),\n+        \"The names do not match: oldElement\u003d%s, newElement\u003d%s\",\n+        oldElement, newElement);\n+    final int c \u003d search(created, newElement.getKey());\n+    E previous \u003d null;\n+    Integer d \u003d null;\n+    if (c \u003e\u003d 0) {\n+      // Case 1.1.3 and 2.3.3: element is already in c-list,\n+      previous \u003d created.set(c, newElement);\n+      \n+      //TODO: fix a bug that previous !\u003d oldElement.Set it to oldElement for now\n+      previous \u003d oldElement;\n+    } else {\n+      d \u003d search(deleted, oldElement.getKey());\n+      if (d \u003c 0) {\n+        // Case 2.3: neither in c-list nor d-list\n+        insertCreated(newElement, c);\n+        insertDeleted(oldElement, d);\n       }\n-      final int c \u003d search(created, newinode);\n-      INode previous \u003d null;\n-      Integer d \u003d null;\n-      if (c \u003e\u003d 0) {\n-        // Case 1.1.3 and 2.3.3: inode is already in c-list,\n-        previous \u003d created.set(c, newinode);\n-        \n-        //TODO: fix a bug that previous !\u003d oldinode.  Set it to oldinode for now\n-        previous \u003d oldinode;\n-      } else {\n-        d \u003d search(deleted, oldinode);\n-        if (d \u003c 0) {\n-          // Case 2.3: neither in c-list nor d-list\n-          insertCreated(newinode, c);\n-          insertDeleted(oldinode, d);\n-        }\n-      }\n-      return new Triple\u003cInteger, INode, Integer\u003e(c, previous, d);\n-    }\n\\ No newline at end of file\n+    }\n+    return new UndoInfo\u003cE\u003e(c, previous, d);\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  public UndoInfo\u003cE\u003e modify(final E oldElement, final E newElement) {\n    Preconditions.checkArgument(oldElement !\u003d newElement,\n        \"They are the same object: oldElement \u003d\u003d newElement \u003d %s\", newElement);\n    Preconditions.checkArgument(oldElement.equals(newElement),\n        \"The names do not match: oldElement\u003d%s, newElement\u003d%s\",\n        oldElement, newElement);\n    final int c \u003d search(created, newElement.getKey());\n    E previous \u003d null;\n    Integer d \u003d null;\n    if (c \u003e\u003d 0) {\n      // Case 1.1.3 and 2.3.3: element is already in c-list,\n      previous \u003d created.set(c, newElement);\n      \n      //TODO: fix a bug that previous !\u003d oldElement.Set it to oldElement for now\n      previous \u003d oldElement;\n    } else {\n      d \u003d search(deleted, oldElement.getKey());\n      if (d \u003c 0) {\n        // Case 2.3: neither in c-list nor d-list\n        insertCreated(newElement, c);\n        insertDeleted(oldElement, d);\n      }\n    }\n    return new UndoInfo\u003cE\u003e(c, previous, d);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/diff/Diff.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-4441. Move INodeDirectoryWithSnapshot.Diff and the related classes to a package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1438782 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "25/01/13 4:01 PM",
          "commitName": "a3bf2083867db5d848ea14f145d120f02b820af2",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "24/01/13 7:13 PM",
          "commitNameOld": "569d63d36cfc1744288b9ad756c0ff7d762f1549",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.87,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n-    Triple\u003cInteger, INode, Integer\u003e modify(final INode oldinode,\n-        final INode newinode) {\n-      if (!oldinode.equals(newinode)) {\n-        throw new AssertionError(\"The names do not match: oldinode\u003d\"\n-            + oldinode + \", newinode\u003d\" + newinode);\n+  public UndoInfo\u003cE\u003e modify(final E oldElement, final E newElement) {\n+    Preconditions.checkArgument(oldElement !\u003d newElement,\n+        \"They are the same object: oldElement \u003d\u003d newElement \u003d %s\", newElement);\n+    Preconditions.checkArgument(oldElement.equals(newElement),\n+        \"The names do not match: oldElement\u003d%s, newElement\u003d%s\",\n+        oldElement, newElement);\n+    final int c \u003d search(created, newElement.getKey());\n+    E previous \u003d null;\n+    Integer d \u003d null;\n+    if (c \u003e\u003d 0) {\n+      // Case 1.1.3 and 2.3.3: element is already in c-list,\n+      previous \u003d created.set(c, newElement);\n+      \n+      //TODO: fix a bug that previous !\u003d oldElement.Set it to oldElement for now\n+      previous \u003d oldElement;\n+    } else {\n+      d \u003d search(deleted, oldElement.getKey());\n+      if (d \u003c 0) {\n+        // Case 2.3: neither in c-list nor d-list\n+        insertCreated(newElement, c);\n+        insertDeleted(oldElement, d);\n       }\n-      final int c \u003d search(created, newinode);\n-      INode previous \u003d null;\n-      Integer d \u003d null;\n-      if (c \u003e\u003d 0) {\n-        // Case 1.1.3 and 2.3.3: inode is already in c-list,\n-        previous \u003d created.set(c, newinode);\n-        \n-        //TODO: fix a bug that previous !\u003d oldinode.  Set it to oldinode for now\n-        previous \u003d oldinode;\n-      } else {\n-        d \u003d search(deleted, oldinode);\n-        if (d \u003c 0) {\n-          // Case 2.3: neither in c-list nor d-list\n-          insertCreated(newinode, c);\n-          insertDeleted(oldinode, d);\n-        }\n-      }\n-      return new Triple\u003cInteger, INode, Integer\u003e(c, previous, d);\n-    }\n\\ No newline at end of file\n+    }\n+    return new UndoInfo\u003cE\u003e(c, previous, d);\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  public UndoInfo\u003cE\u003e modify(final E oldElement, final E newElement) {\n    Preconditions.checkArgument(oldElement !\u003d newElement,\n        \"They are the same object: oldElement \u003d\u003d newElement \u003d %s\", newElement);\n    Preconditions.checkArgument(oldElement.equals(newElement),\n        \"The names do not match: oldElement\u003d%s, newElement\u003d%s\",\n        oldElement, newElement);\n    final int c \u003d search(created, newElement.getKey());\n    E previous \u003d null;\n    Integer d \u003d null;\n    if (c \u003e\u003d 0) {\n      // Case 1.1.3 and 2.3.3: element is already in c-list,\n      previous \u003d created.set(c, newElement);\n      \n      //TODO: fix a bug that previous !\u003d oldElement.Set it to oldElement for now\n      previous \u003d oldElement;\n    } else {\n      d \u003d search(deleted, oldElement.getKey());\n      if (d \u003c 0) {\n        // Case 2.3: neither in c-list nor d-list\n        insertCreated(newElement, c);\n        insertDeleted(oldElement, d);\n      }\n    }\n    return new UndoInfo\u003cE\u003e(c, previous, d);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/diff/Diff.java",
          "extendedDetails": {
            "oldValue": "[oldinode-INode(modifiers-final), newinode-INode(modifiers-final)]",
            "newValue": "[oldElement-E(modifiers-final), newElement-E(modifiers-final)]"
          }
        }
      ]
    },
    "bb80f2fb29d6f58d9c35f4a1fd88c99517f43e16": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-4436. Change INode.recordModification(..) to return only the current inode and remove the updateCircularList parameter from some methods in INodeDirectoryWithSnapshot.Diff.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1438203 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/01/13 1:33 PM",
      "commitName": "bb80f2fb29d6f58d9c35f4a1fd88c99517f43e16",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-4436. Change INode.recordModification(..) to return only the current inode and remove the updateCircularList parameter from some methods in INodeDirectoryWithSnapshot.Diff.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1438203 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "24/01/13 1:33 PM",
          "commitName": "bb80f2fb29d6f58d9c35f4a1fd88c99517f43e16",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "22/01/13 6:48 PM",
          "commitNameOld": "fe3584aadfc7839abcd03239e4d07afd12b8b90f",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 1.78,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,25 @@\n     Triple\u003cInteger, INode, Integer\u003e modify(final INode oldinode,\n-        final INode newinode, boolean updateCircularList) {\n+        final INode newinode) {\n       if (!oldinode.equals(newinode)) {\n         throw new AssertionError(\"The names do not match: oldinode\u003d\"\n             + oldinode + \", newinode\u003d\" + newinode);\n       }\n       final int c \u003d search(created, newinode);\n       INode previous \u003d null;\n       Integer d \u003d null;\n       if (c \u003e\u003d 0) {\n         // Case 1.1.3 and 2.3.3: inode is already in c-list,\n         previous \u003d created.set(c, newinode);\n         \n-        if (updateCircularList \u0026\u0026 newinode instanceof FileWithSnapshot) {\n-          // also should remove oldinode from the circular list\n-          FileWithSnapshot newNodeWithLink \u003d (FileWithSnapshot) newinode;\n-          FileWithSnapshot oldNodeWithLink \u003d (FileWithSnapshot) oldinode;\n-          newNodeWithLink.setNext(oldNodeWithLink.getNext());\n-          oldNodeWithLink.setNext(null);\n-        }\n-        \n         //TODO: fix a bug that previous !\u003d oldinode.  Set it to oldinode for now\n         previous \u003d oldinode;\n       } else {\n         d \u003d search(deleted, oldinode);\n         if (d \u003c 0) {\n           // Case 2.3: neither in c-list nor d-list\n           insertCreated(newinode, c);\n           insertDeleted(oldinode, d);\n         }\n       }\n       return new Triple\u003cInteger, INode, Integer\u003e(c, previous, d);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    Triple\u003cInteger, INode, Integer\u003e modify(final INode oldinode,\n        final INode newinode) {\n      if (!oldinode.equals(newinode)) {\n        throw new AssertionError(\"The names do not match: oldinode\u003d\"\n            + oldinode + \", newinode\u003d\" + newinode);\n      }\n      final int c \u003d search(created, newinode);\n      INode previous \u003d null;\n      Integer d \u003d null;\n      if (c \u003e\u003d 0) {\n        // Case 1.1.3 and 2.3.3: inode is already in c-list,\n        previous \u003d created.set(c, newinode);\n        \n        //TODO: fix a bug that previous !\u003d oldinode.  Set it to oldinode for now\n        previous \u003d oldinode;\n      } else {\n        d \u003d search(deleted, oldinode);\n        if (d \u003c 0) {\n          // Case 2.3: neither in c-list nor d-list\n          insertCreated(newinode, c);\n          insertDeleted(oldinode, d);\n        }\n      }\n      return new Triple\u003cInteger, INode, Integer\u003e(c, previous, d);\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
          "extendedDetails": {
            "oldValue": "[oldinode-INode(modifiers-final), newinode-INode(modifiers-final), updateCircularList-boolean]",
            "newValue": "[oldinode-INode(modifiers-final), newinode-INode(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4436. Change INode.recordModification(..) to return only the current inode and remove the updateCircularList parameter from some methods in INodeDirectoryWithSnapshot.Diff.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1438203 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "24/01/13 1:33 PM",
          "commitName": "bb80f2fb29d6f58d9c35f4a1fd88c99517f43e16",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "22/01/13 6:48 PM",
          "commitNameOld": "fe3584aadfc7839abcd03239e4d07afd12b8b90f",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 1.78,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,25 @@\n     Triple\u003cInteger, INode, Integer\u003e modify(final INode oldinode,\n-        final INode newinode, boolean updateCircularList) {\n+        final INode newinode) {\n       if (!oldinode.equals(newinode)) {\n         throw new AssertionError(\"The names do not match: oldinode\u003d\"\n             + oldinode + \", newinode\u003d\" + newinode);\n       }\n       final int c \u003d search(created, newinode);\n       INode previous \u003d null;\n       Integer d \u003d null;\n       if (c \u003e\u003d 0) {\n         // Case 1.1.3 and 2.3.3: inode is already in c-list,\n         previous \u003d created.set(c, newinode);\n         \n-        if (updateCircularList \u0026\u0026 newinode instanceof FileWithSnapshot) {\n-          // also should remove oldinode from the circular list\n-          FileWithSnapshot newNodeWithLink \u003d (FileWithSnapshot) newinode;\n-          FileWithSnapshot oldNodeWithLink \u003d (FileWithSnapshot) oldinode;\n-          newNodeWithLink.setNext(oldNodeWithLink.getNext());\n-          oldNodeWithLink.setNext(null);\n-        }\n-        \n         //TODO: fix a bug that previous !\u003d oldinode.  Set it to oldinode for now\n         previous \u003d oldinode;\n       } else {\n         d \u003d search(deleted, oldinode);\n         if (d \u003c 0) {\n           // Case 2.3: neither in c-list nor d-list\n           insertCreated(newinode, c);\n           insertDeleted(oldinode, d);\n         }\n       }\n       return new Triple\u003cInteger, INode, Integer\u003e(c, previous, d);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    Triple\u003cInteger, INode, Integer\u003e modify(final INode oldinode,\n        final INode newinode) {\n      if (!oldinode.equals(newinode)) {\n        throw new AssertionError(\"The names do not match: oldinode\u003d\"\n            + oldinode + \", newinode\u003d\" + newinode);\n      }\n      final int c \u003d search(created, newinode);\n      INode previous \u003d null;\n      Integer d \u003d null;\n      if (c \u003e\u003d 0) {\n        // Case 1.1.3 and 2.3.3: inode is already in c-list,\n        previous \u003d created.set(c, newinode);\n        \n        //TODO: fix a bug that previous !\u003d oldinode.  Set it to oldinode for now\n        previous \u003d oldinode;\n      } else {\n        d \u003d search(deleted, oldinode);\n        if (d \u003c 0) {\n          // Case 2.3: neither in c-list nor d-list\n          insertCreated(newinode, c);\n          insertDeleted(oldinode, d);\n        }\n      }\n      return new Triple\u003cInteger, INode, Integer\u003e(c, previous, d);\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
          "extendedDetails": {}
        }
      ]
    },
    "fe3584aadfc7839abcd03239e4d07afd12b8b90f": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-4126. Add reading/writing snapshot information to FSImage. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1437256 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/01/13 6:48 PM",
      "commitName": "fe3584aadfc7839abcd03239e4d07afd12b8b90f",
      "commitAuthor": "Suresh Srinivas",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-4126. Add reading/writing snapshot information to FSImage. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1437256 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/01/13 6:48 PM",
          "commitName": "fe3584aadfc7839abcd03239e4d07afd12b8b90f",
          "commitAuthor": "Suresh Srinivas",
          "commitDateOld": "16/01/13 4:43 AM",
          "commitNameOld": "7856221d4a4701565bb21259d839c8c402e72f49",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 6.59,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,33 @@\n-    Triple\u003cInteger, INode, Integer\u003e modify(final INode oldinode, final INode newinode) {\n+    Triple\u003cInteger, INode, Integer\u003e modify(final INode oldinode,\n+        final INode newinode, boolean updateCircularList) {\n       if (!oldinode.equals(newinode)) {\n         throw new AssertionError(\"The names do not match: oldinode\u003d\"\n             + oldinode + \", newinode\u003d\" + newinode);\n       }\n       final int c \u003d search(created, newinode);\n       INode previous \u003d null;\n       Integer d \u003d null;\n       if (c \u003e\u003d 0) {\n         // Case 1.1.3 and 2.3.3: inode is already in c-list,\n         previous \u003d created.set(c, newinode);\n         \n+        if (updateCircularList \u0026\u0026 newinode instanceof FileWithSnapshot) {\n+          // also should remove oldinode from the circular list\n+          FileWithSnapshot newNodeWithLink \u003d (FileWithSnapshot) newinode;\n+          FileWithSnapshot oldNodeWithLink \u003d (FileWithSnapshot) oldinode;\n+          newNodeWithLink.setNext(oldNodeWithLink.getNext());\n+          oldNodeWithLink.setNext(null);\n+        }\n+        \n         //TODO: fix a bug that previous !\u003d oldinode.  Set it to oldinode for now\n         previous \u003d oldinode;\n       } else {\n         d \u003d search(deleted, oldinode);\n         if (d \u003c 0) {\n           // Case 2.3: neither in c-list nor d-list\n           insertCreated(newinode, c);\n           insertDeleted(oldinode, d);\n         }\n       }\n       return new Triple\u003cInteger, INode, Integer\u003e(c, previous, d);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    Triple\u003cInteger, INode, Integer\u003e modify(final INode oldinode,\n        final INode newinode, boolean updateCircularList) {\n      if (!oldinode.equals(newinode)) {\n        throw new AssertionError(\"The names do not match: oldinode\u003d\"\n            + oldinode + \", newinode\u003d\" + newinode);\n      }\n      final int c \u003d search(created, newinode);\n      INode previous \u003d null;\n      Integer d \u003d null;\n      if (c \u003e\u003d 0) {\n        // Case 1.1.3 and 2.3.3: inode is already in c-list,\n        previous \u003d created.set(c, newinode);\n        \n        if (updateCircularList \u0026\u0026 newinode instanceof FileWithSnapshot) {\n          // also should remove oldinode from the circular list\n          FileWithSnapshot newNodeWithLink \u003d (FileWithSnapshot) newinode;\n          FileWithSnapshot oldNodeWithLink \u003d (FileWithSnapshot) oldinode;\n          newNodeWithLink.setNext(oldNodeWithLink.getNext());\n          oldNodeWithLink.setNext(null);\n        }\n        \n        //TODO: fix a bug that previous !\u003d oldinode.  Set it to oldinode for now\n        previous \u003d oldinode;\n      } else {\n        d \u003d search(deleted, oldinode);\n        if (d \u003c 0) {\n          // Case 2.3: neither in c-list nor d-list\n          insertCreated(newinode, c);\n          insertDeleted(oldinode, d);\n        }\n      }\n      return new Triple\u003cInteger, INode, Integer\u003e(c, previous, d);\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
          "extendedDetails": {
            "oldValue": "[oldinode-INode(modifiers-final), newinode-INode(modifiers-final)]",
            "newValue": "[oldinode-INode(modifiers-final), newinode-INode(modifiers-final), updateCircularList-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4126. Add reading/writing snapshot information to FSImage. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1437256 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/01/13 6:48 PM",
          "commitName": "fe3584aadfc7839abcd03239e4d07afd12b8b90f",
          "commitAuthor": "Suresh Srinivas",
          "commitDateOld": "16/01/13 4:43 AM",
          "commitNameOld": "7856221d4a4701565bb21259d839c8c402e72f49",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 6.59,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,33 @@\n-    Triple\u003cInteger, INode, Integer\u003e modify(final INode oldinode, final INode newinode) {\n+    Triple\u003cInteger, INode, Integer\u003e modify(final INode oldinode,\n+        final INode newinode, boolean updateCircularList) {\n       if (!oldinode.equals(newinode)) {\n         throw new AssertionError(\"The names do not match: oldinode\u003d\"\n             + oldinode + \", newinode\u003d\" + newinode);\n       }\n       final int c \u003d search(created, newinode);\n       INode previous \u003d null;\n       Integer d \u003d null;\n       if (c \u003e\u003d 0) {\n         // Case 1.1.3 and 2.3.3: inode is already in c-list,\n         previous \u003d created.set(c, newinode);\n         \n+        if (updateCircularList \u0026\u0026 newinode instanceof FileWithSnapshot) {\n+          // also should remove oldinode from the circular list\n+          FileWithSnapshot newNodeWithLink \u003d (FileWithSnapshot) newinode;\n+          FileWithSnapshot oldNodeWithLink \u003d (FileWithSnapshot) oldinode;\n+          newNodeWithLink.setNext(oldNodeWithLink.getNext());\n+          oldNodeWithLink.setNext(null);\n+        }\n+        \n         //TODO: fix a bug that previous !\u003d oldinode.  Set it to oldinode for now\n         previous \u003d oldinode;\n       } else {\n         d \u003d search(deleted, oldinode);\n         if (d \u003c 0) {\n           // Case 2.3: neither in c-list nor d-list\n           insertCreated(newinode, c);\n           insertDeleted(oldinode, d);\n         }\n       }\n       return new Triple\u003cInteger, INode, Integer\u003e(c, previous, d);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    Triple\u003cInteger, INode, Integer\u003e modify(final INode oldinode,\n        final INode newinode, boolean updateCircularList) {\n      if (!oldinode.equals(newinode)) {\n        throw new AssertionError(\"The names do not match: oldinode\u003d\"\n            + oldinode + \", newinode\u003d\" + newinode);\n      }\n      final int c \u003d search(created, newinode);\n      INode previous \u003d null;\n      Integer d \u003d null;\n      if (c \u003e\u003d 0) {\n        // Case 1.1.3 and 2.3.3: inode is already in c-list,\n        previous \u003d created.set(c, newinode);\n        \n        if (updateCircularList \u0026\u0026 newinode instanceof FileWithSnapshot) {\n          // also should remove oldinode from the circular list\n          FileWithSnapshot newNodeWithLink \u003d (FileWithSnapshot) newinode;\n          FileWithSnapshot oldNodeWithLink \u003d (FileWithSnapshot) oldinode;\n          newNodeWithLink.setNext(oldNodeWithLink.getNext());\n          oldNodeWithLink.setNext(null);\n        }\n        \n        //TODO: fix a bug that previous !\u003d oldinode.  Set it to oldinode for now\n        previous \u003d oldinode;\n      } else {\n        d \u003d search(deleted, oldinode);\n        if (d \u003c 0) {\n          // Case 2.3: neither in c-list nor d-list\n          insertCreated(newinode, c);\n          insertDeleted(oldinode, d);\n        }\n      }\n      return new Triple\u003cInteger, INode, Integer\u003e(c, previous, d);\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
          "extendedDetails": {}
        }
      ]
    },
    "00d318378e4b43d36be91b29ae3ef8a879a81e1e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4397. Fix a bug in INodeDirectoryWithSnapshot.Diff.combinePostDiff(..) that it may put the wrong node into the deleted list.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1433293 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/01/13 10:20 PM",
      "commitName": "00d318378e4b43d36be91b29ae3ef8a879a81e1e",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "09/01/13 8:44 AM",
      "commitNameOld": "2d4097840c29116e9b000c158ce841d27863ad6e",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 5.57,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,24 @@\n     Triple\u003cInteger, INode, Integer\u003e modify(final INode oldinode, final INode newinode) {\n       if (!oldinode.equals(newinode)) {\n         throw new AssertionError(\"The names do not match: oldinode\u003d\"\n             + oldinode + \", newinode\u003d\" + newinode);\n       }\n       final int c \u003d search(created, newinode);\n       INode previous \u003d null;\n       Integer d \u003d null;\n       if (c \u003e\u003d 0) {\n-        // Case 1.1.3: inode is already in c-list,\n+        // Case 1.1.3 and 2.3.3: inode is already in c-list,\n         previous \u003d created.set(c, newinode);\n+        \n+        //TODO: fix a bug that previous !\u003d oldinode.  Set it to oldinode for now\n+        previous \u003d oldinode;\n       } else {\n         d \u003d search(deleted, oldinode);\n         if (d \u003c 0) {\n           // Case 2.3: neither in c-list nor d-list\n           insertCreated(newinode, c);\n           insertDeleted(oldinode, d);\n         }\n       }\n       return new Triple\u003cInteger, INode, Integer\u003e(c, previous, d);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    Triple\u003cInteger, INode, Integer\u003e modify(final INode oldinode, final INode newinode) {\n      if (!oldinode.equals(newinode)) {\n        throw new AssertionError(\"The names do not match: oldinode\u003d\"\n            + oldinode + \", newinode\u003d\" + newinode);\n      }\n      final int c \u003d search(created, newinode);\n      INode previous \u003d null;\n      Integer d \u003d null;\n      if (c \u003e\u003d 0) {\n        // Case 1.1.3 and 2.3.3: inode is already in c-list,\n        previous \u003d created.set(c, newinode);\n        \n        //TODO: fix a bug that previous !\u003d oldinode.  Set it to oldinode for now\n        previous \u003d oldinode;\n      } else {\n        d \u003d search(deleted, oldinode);\n        if (d \u003c 0) {\n          // Case 2.3: neither in c-list nor d-list\n          insertCreated(newinode, c);\n          insertDeleted(oldinode, d);\n        }\n      }\n      return new Triple\u003cInteger, INode, Integer\u003e(c, previous, d);\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
      "extendedDetails": {}
    },
    "b9f965de120b5278ac84a7e98aecb32aafde4c16": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4103. Support O(1) snapshot creation.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1424782 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/12/12 5:30 PM",
      "commitName": "b9f965de120b5278ac84a7e98aecb32aafde4c16",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "16/12/12 7:40 PM",
      "commitNameOld": "cbbaa93ae09bf5cf643263faf78f99315c4f3a8d",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 3.91,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n     Triple\u003cInteger, INode, Integer\u003e modify(final INode oldinode, final INode newinode) {\n       if (!oldinode.equals(newinode)) {\n         throw new AssertionError(\"The names do not match: oldinode\u003d\"\n             + oldinode + \", newinode\u003d\" + newinode);\n       }\n       final int c \u003d search(created, newinode);\n       INode previous \u003d null;\n       Integer d \u003d null;\n       if (c \u003e\u003d 0) {\n-        // inode is already in c-list,\n+        // Case 1.1.3: inode is already in c-list,\n         previous \u003d created.set(c, newinode);\n       } else {\n         d \u003d search(deleted, oldinode);\n         if (d \u003c 0) {\n-          // neither in c-list nor d-list\n+          // Case 2.3: neither in c-list nor d-list\n           insertCreated(newinode, c);\n           insertDeleted(oldinode, d);\n         }\n       }\n       return new Triple\u003cInteger, INode, Integer\u003e(c, previous, d);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    Triple\u003cInteger, INode, Integer\u003e modify(final INode oldinode, final INode newinode) {\n      if (!oldinode.equals(newinode)) {\n        throw new AssertionError(\"The names do not match: oldinode\u003d\"\n            + oldinode + \", newinode\u003d\" + newinode);\n      }\n      final int c \u003d search(created, newinode);\n      INode previous \u003d null;\n      Integer d \u003d null;\n      if (c \u003e\u003d 0) {\n        // Case 1.1.3: inode is already in c-list,\n        previous \u003d created.set(c, newinode);\n      } else {\n        d \u003d search(deleted, oldinode);\n        if (d \u003c 0) {\n          // Case 2.3: neither in c-list nor d-list\n          insertCreated(newinode, c);\n          insertDeleted(oldinode, d);\n        }\n      }\n      return new Triple\u003cInteger, INode, Integer\u003e(c, previous, d);\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
      "extendedDetails": {}
    },
    "cbbaa93ae09bf5cf643263faf78f99315c4f3a8d": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-4317. Change INode and its subclasses to support HDFS-4103.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1422748 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/12/12 7:40 PM",
      "commitName": "cbbaa93ae09bf5cf643263faf78f99315c4f3a8d",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-4317. Change INode and its subclasses to support HDFS-4103.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1422748 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/12/12 7:40 PM",
          "commitName": "cbbaa93ae09bf5cf643263faf78f99315c4f3a8d",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "03/12/12 2:43 PM",
          "commitNameOld": "9821af9ce8a56a2c583f1ed938902c20e897048f",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 13.21,
          "commitsBetweenForRepo": 19,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,21 @@\n-    void modify(final INode oldinode, final INode newinode) {\n+    Triple\u003cInteger, INode, Integer\u003e modify(final INode oldinode, final INode newinode) {\n       if (!oldinode.equals(newinode)) {\n         throw new AssertionError(\"The names do not match: oldinode\u003d\"\n             + oldinode + \", newinode\u003d\" + newinode);\n       }\n       final int c \u003d search(created, newinode);\n+      INode previous \u003d null;\n+      Integer d \u003d null;\n       if (c \u003e\u003d 0) {\n         // inode is already in c-list,\n-        created.set(c, newinode);\n+        previous \u003d created.set(c, newinode);\n       } else {\n-        final int d \u003d search(deleted, oldinode);\n+        d \u003d search(deleted, oldinode);\n         if (d \u003c 0) {\n           // neither in c-list nor d-list\n           insertCreated(newinode, c);\n           insertDeleted(oldinode, d);\n         }\n       }\n+      return new Triple\u003cInteger, INode, Integer\u003e(c, previous, d);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    Triple\u003cInteger, INode, Integer\u003e modify(final INode oldinode, final INode newinode) {\n      if (!oldinode.equals(newinode)) {\n        throw new AssertionError(\"The names do not match: oldinode\u003d\"\n            + oldinode + \", newinode\u003d\" + newinode);\n      }\n      final int c \u003d search(created, newinode);\n      INode previous \u003d null;\n      Integer d \u003d null;\n      if (c \u003e\u003d 0) {\n        // inode is already in c-list,\n        previous \u003d created.set(c, newinode);\n      } else {\n        d \u003d search(deleted, oldinode);\n        if (d \u003c 0) {\n          // neither in c-list nor d-list\n          insertCreated(newinode, c);\n          insertDeleted(oldinode, d);\n        }\n      }\n      return new Triple\u003cInteger, INode, Integer\u003e(c, previous, d);\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "Triple\u003cInteger,INode,Integer\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4317. Change INode and its subclasses to support HDFS-4103.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1422748 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/12/12 7:40 PM",
          "commitName": "cbbaa93ae09bf5cf643263faf78f99315c4f3a8d",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "03/12/12 2:43 PM",
          "commitNameOld": "9821af9ce8a56a2c583f1ed938902c20e897048f",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 13.21,
          "commitsBetweenForRepo": 19,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,21 @@\n-    void modify(final INode oldinode, final INode newinode) {\n+    Triple\u003cInteger, INode, Integer\u003e modify(final INode oldinode, final INode newinode) {\n       if (!oldinode.equals(newinode)) {\n         throw new AssertionError(\"The names do not match: oldinode\u003d\"\n             + oldinode + \", newinode\u003d\" + newinode);\n       }\n       final int c \u003d search(created, newinode);\n+      INode previous \u003d null;\n+      Integer d \u003d null;\n       if (c \u003e\u003d 0) {\n         // inode is already in c-list,\n-        created.set(c, newinode);\n+        previous \u003d created.set(c, newinode);\n       } else {\n-        final int d \u003d search(deleted, oldinode);\n+        d \u003d search(deleted, oldinode);\n         if (d \u003c 0) {\n           // neither in c-list nor d-list\n           insertCreated(newinode, c);\n           insertDeleted(oldinode, d);\n         }\n       }\n+      return new Triple\u003cInteger, INode, Integer\u003e(c, previous, d);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    Triple\u003cInteger, INode, Integer\u003e modify(final INode oldinode, final INode newinode) {\n      if (!oldinode.equals(newinode)) {\n        throw new AssertionError(\"The names do not match: oldinode\u003d\"\n            + oldinode + \", newinode\u003d\" + newinode);\n      }\n      final int c \u003d search(created, newinode);\n      INode previous \u003d null;\n      Integer d \u003d null;\n      if (c \u003e\u003d 0) {\n        // inode is already in c-list,\n        previous \u003d created.set(c, newinode);\n      } else {\n        d \u003d search(deleted, oldinode);\n        if (d \u003c 0) {\n          // neither in c-list nor d-list\n          insertCreated(newinode, c);\n          insertDeleted(oldinode, d);\n        }\n      }\n      return new Triple\u003cInteger, INode, Integer\u003e(c, previous, d);\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
          "extendedDetails": {}
        }
      ]
    },
    "e5a7b3d4307951f0574c2341178e3cd95e69f7b7": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-4141. Support directory diff - the difference between the current state and a previous snapshot of an INodeDirectory.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1405250 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/11/12 6:31 PM",
      "commitName": "e5a7b3d4307951f0574c2341178e3cd95e69f7b7",
      "commitAuthor": "Tsz-wo Sze",
      "diff": "@@ -0,0 +1,18 @@\n+    void modify(final INode oldinode, final INode newinode) {\n+      if (!oldinode.equals(newinode)) {\n+        throw new AssertionError(\"The names do not match: oldinode\u003d\"\n+            + oldinode + \", newinode\u003d\" + newinode);\n+      }\n+      final int c \u003d search(created, newinode);\n+      if (c \u003e\u003d 0) {\n+        // inode is already in c-list,\n+        created.set(c, newinode);\n+      } else {\n+        final int d \u003d search(deleted, oldinode);\n+        if (d \u003c 0) {\n+          // neither in c-list nor d-list\n+          insertCreated(newinode, c);\n+          insertDeleted(oldinode, d);\n+        }\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    void modify(final INode oldinode, final INode newinode) {\n      if (!oldinode.equals(newinode)) {\n        throw new AssertionError(\"The names do not match: oldinode\u003d\"\n            + oldinode + \", newinode\u003d\" + newinode);\n      }\n      final int c \u003d search(created, newinode);\n      if (c \u003e\u003d 0) {\n        // inode is already in c-list,\n        created.set(c, newinode);\n      } else {\n        final int d \u003d search(deleted, oldinode);\n        if (d \u003c 0) {\n          // neither in c-list nor d-list\n          insertCreated(newinode, c);\n          insertDeleted(oldinode, d);\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java"
    }
  }
}