{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DatanodeManager.java",
  "functionName": "startAdminOperationIfNecessary",
  "functionId": "startAdminOperationIfNecessary___nodeReg-DatanodeDescriptor",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java",
  "functionStartLine": 1026,
  "functionEndLine": 1035,
  "numCommitsSeen": 172,
  "timeTaken": 2955,
  "changeHistory": [
    "79df1e750ef558afed6d166ce225a23061b36aed",
    "9dcbdbdb5a34d85910707f81ebc1bb1f81c99978"
  ],
  "changeHistoryShort": {
    "79df1e750ef558afed6d166ce225a23061b36aed": "Ybodychange",
    "9dcbdbdb5a34d85910707f81ebc1bb1f81c99978": "Yintroduced"
  },
  "changeHistoryDetails": {
    "79df1e750ef558afed6d166ce225a23061b36aed": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9388. Decommission related code to support Maintenance State for datanodes.\n",
      "commitDate": "02/08/17 2:22 PM",
      "commitName": "79df1e750ef558afed6d166ce225a23061b36aed",
      "commitAuthor": "Manoj Govindassamy",
      "commitDateOld": "31/07/17 11:33 AM",
      "commitNameOld": "3e23415a92d43ce8818124f0b180227a52a33eaf",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 2.12,
      "commitsBetweenForRepo": 79,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,10 +1,10 @@\n   void startAdminOperationIfNecessary(DatanodeDescriptor nodeReg) {\n     long maintenanceExpireTimeInMS \u003d\n         hostConfigManager.getMaintenanceExpirationTimeInMS(nodeReg);\n     // If the registered node is in exclude list, then decommission it\n     if (getHostConfigManager().isExcluded(nodeReg)) {\n-      decomManager.startDecommission(nodeReg);\n+      datanodeAdminManager.startDecommission(nodeReg);\n     } else if (nodeReg.maintenanceNotExpired(maintenanceExpireTimeInMS)) {\n-      decomManager.startMaintenance(nodeReg, maintenanceExpireTimeInMS);\n+      datanodeAdminManager.startMaintenance(nodeReg, maintenanceExpireTimeInMS);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void startAdminOperationIfNecessary(DatanodeDescriptor nodeReg) {\n    long maintenanceExpireTimeInMS \u003d\n        hostConfigManager.getMaintenanceExpirationTimeInMS(nodeReg);\n    // If the registered node is in exclude list, then decommission it\n    if (getHostConfigManager().isExcluded(nodeReg)) {\n      datanodeAdminManager.startDecommission(nodeReg);\n    } else if (nodeReg.maintenanceNotExpired(maintenanceExpireTimeInMS)) {\n      datanodeAdminManager.startMaintenance(nodeReg, maintenanceExpireTimeInMS);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java",
      "extendedDetails": {}
    },
    "9dcbdbdb5a34d85910707f81ebc1bb1f81c99978": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-9392. Admins support for maintenance state. Contributed by Ming Ma.\n",
      "commitDate": "30/08/16 2:00 PM",
      "commitName": "9dcbdbdb5a34d85910707f81ebc1bb1f81c99978",
      "commitAuthor": "Ming Ma",
      "diff": "@@ -0,0 +1,10 @@\n+  void startAdminOperationIfNecessary(DatanodeDescriptor nodeReg) {\n+    long maintenanceExpireTimeInMS \u003d\n+        hostConfigManager.getMaintenanceExpirationTimeInMS(nodeReg);\n+    // If the registered node is in exclude list, then decommission it\n+    if (getHostConfigManager().isExcluded(nodeReg)) {\n+      decomManager.startDecommission(nodeReg);\n+    } else if (nodeReg.maintenanceNotExpired(maintenanceExpireTimeInMS)) {\n+      decomManager.startMaintenance(nodeReg, maintenanceExpireTimeInMS);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  void startAdminOperationIfNecessary(DatanodeDescriptor nodeReg) {\n    long maintenanceExpireTimeInMS \u003d\n        hostConfigManager.getMaintenanceExpirationTimeInMS(nodeReg);\n    // If the registered node is in exclude list, then decommission it\n    if (getHostConfigManager().isExcluded(nodeReg)) {\n      decomManager.startDecommission(nodeReg);\n    } else if (nodeReg.maintenanceNotExpired(maintenanceExpireTimeInMS)) {\n      decomManager.startMaintenance(nodeReg, maintenanceExpireTimeInMS);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java"
    }
  }
}