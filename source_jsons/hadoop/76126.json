{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CBZip2OutputStream.java",
  "functionName": "sendMTFValues1",
  "functionId": "sendMTFValues1___nGroups-int(modifiers-final)__alphaSize-int(modifiers-final)",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/bzip2/CBZip2OutputStream.java",
  "functionStartLine": 1027,
  "functionEndLine": 1143,
  "numCommitsSeen": 7,
  "timeTaken": 1084,
  "changeHistory": [
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private int sendMTFValues1(final int nGroups, final int alphaSize) {\n    final Data dataShadow \u003d this.data;\n    final int[][] rfreq \u003d dataShadow.sendMTFValues_rfreq;\n    final int[] fave \u003d dataShadow.sendMTFValues_fave;\n    final short[] cost \u003d dataShadow.sendMTFValues_cost;\n    final char[] sfmap \u003d dataShadow.sfmap;\n    final byte[] selector \u003d dataShadow.selector;\n    final byte[][] len \u003d dataShadow.sendMTFValues_len;\n    final byte[] len_0 \u003d len[0];\n    final byte[] len_1 \u003d len[1];\n    final byte[] len_2 \u003d len[2];\n    final byte[] len_3 \u003d len[3];\n    final byte[] len_4 \u003d len[4];\n    final byte[] len_5 \u003d len[5];\n    final int nMTFShadow \u003d this.nMTF;\n\n    int nSelectors \u003d 0;\n\n    for (int iter \u003d 0; iter \u003c N_ITERS; iter++) {\n      for (int t \u003d nGroups; --t \u003e\u003d 0;) {\n        fave[t] \u003d 0;\n        int[] rfreqt \u003d rfreq[t];\n        for (int i \u003d alphaSize; --i \u003e\u003d 0;) {\n          rfreqt[i] \u003d 0;\n        }\n      }\n\n      nSelectors \u003d 0;\n\n      for (int gs \u003d 0; gs \u003c this.nMTF;) {\n        /* Set group start \u0026 end marks. */\n\n        /*\n        * Calculate the cost of this group as coded by each of the\n        * coding tables.\n        */\n\n        final int ge \u003d Math.min(gs + G_SIZE - 1, nMTFShadow - 1);\n\n        if (nGroups \u003d\u003d N_GROUPS) {\n          // unrolled version of the else-block\n\n          short cost0 \u003d 0;\n          short cost1 \u003d 0;\n          short cost2 \u003d 0;\n          short cost3 \u003d 0;\n          short cost4 \u003d 0;\n          short cost5 \u003d 0;\n\n          for (int i \u003d gs; i \u003c\u003d ge; i++) {\n            final int icv \u003d sfmap[i];\n            cost0 +\u003d len_0[icv] \u0026 0xff;\n            cost1 +\u003d len_1[icv] \u0026 0xff;\n            cost2 +\u003d len_2[icv] \u0026 0xff;\n            cost3 +\u003d len_3[icv] \u0026 0xff;\n            cost4 +\u003d len_4[icv] \u0026 0xff;\n            cost5 +\u003d len_5[icv] \u0026 0xff;\n          }\n\n          cost[0] \u003d cost0;\n          cost[1] \u003d cost1;\n          cost[2] \u003d cost2;\n          cost[3] \u003d cost3;\n          cost[4] \u003d cost4;\n          cost[5] \u003d cost5;\n\n        } else {\n          for (int t \u003d nGroups; --t \u003e\u003d 0;) {\n            cost[t] \u003d 0;\n          }\n\n          for (int i \u003d gs; i \u003c\u003d ge; i++) {\n            final int icv \u003d sfmap[i];\n            for (int t \u003d nGroups; --t \u003e\u003d 0;) {\n              cost[t] +\u003d len[t][icv] \u0026 0xff;\n            }\n          }\n        }\n\n        /*\n        * Find the coding table which is best for this group, and\n        * record its identity in the selector table.\n        */\n        int bt \u003d -1;\n        for (int t \u003d nGroups, bc \u003d 999999999; --t \u003e\u003d 0;) {\n          final int cost_t \u003d cost[t];\n          if (cost_t \u003c bc) {\n            bc \u003d cost_t;\n            bt \u003d t;\n          }\n        }\n\n        fave[bt]++;\n        selector[nSelectors] \u003d (byte) bt;\n        nSelectors++;\n\n        /*\n        * Increment the symbol frequencies for the selected table.\n        */\n        final int[] rfreq_bt \u003d rfreq[bt];\n        for (int i \u003d gs; i \u003c\u003d ge; i++) {\n          rfreq_bt[sfmap[i]]++;\n        }\n\n        gs \u003d ge + 1;\n      }\n\n      /*\n      * Recompute the tables based on the accumulated frequencies.\n      */\n      for (int t \u003d 0; t \u003c nGroups; t++) {\n        hbMakeCodeLengths(len[t], rfreq[t], this.data, alphaSize, 20);\n      }\n    }\n\n    return nSelectors;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/bzip2/CBZip2OutputStream.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/io/compress/bzip2/CBZip2OutputStream.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/bzip2/CBZip2OutputStream.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private int sendMTFValues1(final int nGroups, final int alphaSize) {\n    final Data dataShadow \u003d this.data;\n    final int[][] rfreq \u003d dataShadow.sendMTFValues_rfreq;\n    final int[] fave \u003d dataShadow.sendMTFValues_fave;\n    final short[] cost \u003d dataShadow.sendMTFValues_cost;\n    final char[] sfmap \u003d dataShadow.sfmap;\n    final byte[] selector \u003d dataShadow.selector;\n    final byte[][] len \u003d dataShadow.sendMTFValues_len;\n    final byte[] len_0 \u003d len[0];\n    final byte[] len_1 \u003d len[1];\n    final byte[] len_2 \u003d len[2];\n    final byte[] len_3 \u003d len[3];\n    final byte[] len_4 \u003d len[4];\n    final byte[] len_5 \u003d len[5];\n    final int nMTFShadow \u003d this.nMTF;\n\n    int nSelectors \u003d 0;\n\n    for (int iter \u003d 0; iter \u003c N_ITERS; iter++) {\n      for (int t \u003d nGroups; --t \u003e\u003d 0;) {\n        fave[t] \u003d 0;\n        int[] rfreqt \u003d rfreq[t];\n        for (int i \u003d alphaSize; --i \u003e\u003d 0;) {\n          rfreqt[i] \u003d 0;\n        }\n      }\n\n      nSelectors \u003d 0;\n\n      for (int gs \u003d 0; gs \u003c this.nMTF;) {\n        /* Set group start \u0026 end marks. */\n\n        /*\n        * Calculate the cost of this group as coded by each of the\n        * coding tables.\n        */\n\n        final int ge \u003d Math.min(gs + G_SIZE - 1, nMTFShadow - 1);\n\n        if (nGroups \u003d\u003d N_GROUPS) {\n          // unrolled version of the else-block\n\n          short cost0 \u003d 0;\n          short cost1 \u003d 0;\n          short cost2 \u003d 0;\n          short cost3 \u003d 0;\n          short cost4 \u003d 0;\n          short cost5 \u003d 0;\n\n          for (int i \u003d gs; i \u003c\u003d ge; i++) {\n            final int icv \u003d sfmap[i];\n            cost0 +\u003d len_0[icv] \u0026 0xff;\n            cost1 +\u003d len_1[icv] \u0026 0xff;\n            cost2 +\u003d len_2[icv] \u0026 0xff;\n            cost3 +\u003d len_3[icv] \u0026 0xff;\n            cost4 +\u003d len_4[icv] \u0026 0xff;\n            cost5 +\u003d len_5[icv] \u0026 0xff;\n          }\n\n          cost[0] \u003d cost0;\n          cost[1] \u003d cost1;\n          cost[2] \u003d cost2;\n          cost[3] \u003d cost3;\n          cost[4] \u003d cost4;\n          cost[5] \u003d cost5;\n\n        } else {\n          for (int t \u003d nGroups; --t \u003e\u003d 0;) {\n            cost[t] \u003d 0;\n          }\n\n          for (int i \u003d gs; i \u003c\u003d ge; i++) {\n            final int icv \u003d sfmap[i];\n            for (int t \u003d nGroups; --t \u003e\u003d 0;) {\n              cost[t] +\u003d len[t][icv] \u0026 0xff;\n            }\n          }\n        }\n\n        /*\n        * Find the coding table which is best for this group, and\n        * record its identity in the selector table.\n        */\n        int bt \u003d -1;\n        for (int t \u003d nGroups, bc \u003d 999999999; --t \u003e\u003d 0;) {\n          final int cost_t \u003d cost[t];\n          if (cost_t \u003c bc) {\n            bc \u003d cost_t;\n            bt \u003d t;\n          }\n        }\n\n        fave[bt]++;\n        selector[nSelectors] \u003d (byte) bt;\n        nSelectors++;\n\n        /*\n        * Increment the symbol frequencies for the selected table.\n        */\n        final int[] rfreq_bt \u003d rfreq[bt];\n        for (int i \u003d gs; i \u003c\u003d ge; i++) {\n          rfreq_bt[sfmap[i]]++;\n        }\n\n        gs \u003d ge + 1;\n      }\n\n      /*\n      * Recompute the tables based on the accumulated frequencies.\n      */\n      for (int t \u003d 0; t \u003c nGroups; t++) {\n        hbMakeCodeLengths(len[t], rfreq[t], this.data, alphaSize, 20);\n      }\n    }\n\n    return nSelectors;\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/io/compress/bzip2/CBZip2OutputStream.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/io/compress/bzip2/CBZip2OutputStream.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/io/compress/bzip2/CBZip2OutputStream.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private int sendMTFValues1(final int nGroups, final int alphaSize) {\n    final Data dataShadow \u003d this.data;\n    final int[][] rfreq \u003d dataShadow.sendMTFValues_rfreq;\n    final int[] fave \u003d dataShadow.sendMTFValues_fave;\n    final short[] cost \u003d dataShadow.sendMTFValues_cost;\n    final char[] sfmap \u003d dataShadow.sfmap;\n    final byte[] selector \u003d dataShadow.selector;\n    final byte[][] len \u003d dataShadow.sendMTFValues_len;\n    final byte[] len_0 \u003d len[0];\n    final byte[] len_1 \u003d len[1];\n    final byte[] len_2 \u003d len[2];\n    final byte[] len_3 \u003d len[3];\n    final byte[] len_4 \u003d len[4];\n    final byte[] len_5 \u003d len[5];\n    final int nMTFShadow \u003d this.nMTF;\n\n    int nSelectors \u003d 0;\n\n    for (int iter \u003d 0; iter \u003c N_ITERS; iter++) {\n      for (int t \u003d nGroups; --t \u003e\u003d 0;) {\n        fave[t] \u003d 0;\n        int[] rfreqt \u003d rfreq[t];\n        for (int i \u003d alphaSize; --i \u003e\u003d 0;) {\n          rfreqt[i] \u003d 0;\n        }\n      }\n\n      nSelectors \u003d 0;\n\n      for (int gs \u003d 0; gs \u003c this.nMTF;) {\n        /* Set group start \u0026 end marks. */\n\n        /*\n        * Calculate the cost of this group as coded by each of the\n        * coding tables.\n        */\n\n        final int ge \u003d Math.min(gs + G_SIZE - 1, nMTFShadow - 1);\n\n        if (nGroups \u003d\u003d N_GROUPS) {\n          // unrolled version of the else-block\n\n          short cost0 \u003d 0;\n          short cost1 \u003d 0;\n          short cost2 \u003d 0;\n          short cost3 \u003d 0;\n          short cost4 \u003d 0;\n          short cost5 \u003d 0;\n\n          for (int i \u003d gs; i \u003c\u003d ge; i++) {\n            final int icv \u003d sfmap[i];\n            cost0 +\u003d len_0[icv] \u0026 0xff;\n            cost1 +\u003d len_1[icv] \u0026 0xff;\n            cost2 +\u003d len_2[icv] \u0026 0xff;\n            cost3 +\u003d len_3[icv] \u0026 0xff;\n            cost4 +\u003d len_4[icv] \u0026 0xff;\n            cost5 +\u003d len_5[icv] \u0026 0xff;\n          }\n\n          cost[0] \u003d cost0;\n          cost[1] \u003d cost1;\n          cost[2] \u003d cost2;\n          cost[3] \u003d cost3;\n          cost[4] \u003d cost4;\n          cost[5] \u003d cost5;\n\n        } else {\n          for (int t \u003d nGroups; --t \u003e\u003d 0;) {\n            cost[t] \u003d 0;\n          }\n\n          for (int i \u003d gs; i \u003c\u003d ge; i++) {\n            final int icv \u003d sfmap[i];\n            for (int t \u003d nGroups; --t \u003e\u003d 0;) {\n              cost[t] +\u003d len[t][icv] \u0026 0xff;\n            }\n          }\n        }\n\n        /*\n        * Find the coding table which is best for this group, and\n        * record its identity in the selector table.\n        */\n        int bt \u003d -1;\n        for (int t \u003d nGroups, bc \u003d 999999999; --t \u003e\u003d 0;) {\n          final int cost_t \u003d cost[t];\n          if (cost_t \u003c bc) {\n            bc \u003d cost_t;\n            bt \u003d t;\n          }\n        }\n\n        fave[bt]++;\n        selector[nSelectors] \u003d (byte) bt;\n        nSelectors++;\n\n        /*\n        * Increment the symbol frequencies for the selected table.\n        */\n        final int[] rfreq_bt \u003d rfreq[bt];\n        for (int i \u003d gs; i \u003c\u003d ge; i++) {\n          rfreq_bt[sfmap[i]]++;\n        }\n\n        gs \u003d ge + 1;\n      }\n\n      /*\n      * Recompute the tables based on the accumulated frequencies.\n      */\n      for (int t \u003d 0; t \u003c nGroups; t++) {\n        hbMakeCodeLengths(len[t], rfreq[t], this.data, alphaSize, 20);\n      }\n    }\n\n    return nSelectors;\n  }",
      "path": "common/src/java/org/apache/hadoop/io/compress/bzip2/CBZip2OutputStream.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/io/compress/bzip2/CBZip2OutputStream.java",
        "newPath": "common/src/java/org/apache/hadoop/io/compress/bzip2/CBZip2OutputStream.java"
      }
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,117 @@\n+  private int sendMTFValues1(final int nGroups, final int alphaSize) {\n+    final Data dataShadow \u003d this.data;\n+    final int[][] rfreq \u003d dataShadow.sendMTFValues_rfreq;\n+    final int[] fave \u003d dataShadow.sendMTFValues_fave;\n+    final short[] cost \u003d dataShadow.sendMTFValues_cost;\n+    final char[] sfmap \u003d dataShadow.sfmap;\n+    final byte[] selector \u003d dataShadow.selector;\n+    final byte[][] len \u003d dataShadow.sendMTFValues_len;\n+    final byte[] len_0 \u003d len[0];\n+    final byte[] len_1 \u003d len[1];\n+    final byte[] len_2 \u003d len[2];\n+    final byte[] len_3 \u003d len[3];\n+    final byte[] len_4 \u003d len[4];\n+    final byte[] len_5 \u003d len[5];\n+    final int nMTFShadow \u003d this.nMTF;\n+\n+    int nSelectors \u003d 0;\n+\n+    for (int iter \u003d 0; iter \u003c N_ITERS; iter++) {\n+      for (int t \u003d nGroups; --t \u003e\u003d 0;) {\n+        fave[t] \u003d 0;\n+        int[] rfreqt \u003d rfreq[t];\n+        for (int i \u003d alphaSize; --i \u003e\u003d 0;) {\n+          rfreqt[i] \u003d 0;\n+        }\n+      }\n+\n+      nSelectors \u003d 0;\n+\n+      for (int gs \u003d 0; gs \u003c this.nMTF;) {\n+        /* Set group start \u0026 end marks. */\n+\n+        /*\n+        * Calculate the cost of this group as coded by each of the\n+        * coding tables.\n+        */\n+\n+        final int ge \u003d Math.min(gs + G_SIZE - 1, nMTFShadow - 1);\n+\n+        if (nGroups \u003d\u003d N_GROUPS) {\n+          // unrolled version of the else-block\n+\n+          short cost0 \u003d 0;\n+          short cost1 \u003d 0;\n+          short cost2 \u003d 0;\n+          short cost3 \u003d 0;\n+          short cost4 \u003d 0;\n+          short cost5 \u003d 0;\n+\n+          for (int i \u003d gs; i \u003c\u003d ge; i++) {\n+            final int icv \u003d sfmap[i];\n+            cost0 +\u003d len_0[icv] \u0026 0xff;\n+            cost1 +\u003d len_1[icv] \u0026 0xff;\n+            cost2 +\u003d len_2[icv] \u0026 0xff;\n+            cost3 +\u003d len_3[icv] \u0026 0xff;\n+            cost4 +\u003d len_4[icv] \u0026 0xff;\n+            cost5 +\u003d len_5[icv] \u0026 0xff;\n+          }\n+\n+          cost[0] \u003d cost0;\n+          cost[1] \u003d cost1;\n+          cost[2] \u003d cost2;\n+          cost[3] \u003d cost3;\n+          cost[4] \u003d cost4;\n+          cost[5] \u003d cost5;\n+\n+        } else {\n+          for (int t \u003d nGroups; --t \u003e\u003d 0;) {\n+            cost[t] \u003d 0;\n+          }\n+\n+          for (int i \u003d gs; i \u003c\u003d ge; i++) {\n+            final int icv \u003d sfmap[i];\n+            for (int t \u003d nGroups; --t \u003e\u003d 0;) {\n+              cost[t] +\u003d len[t][icv] \u0026 0xff;\n+            }\n+          }\n+        }\n+\n+        /*\n+        * Find the coding table which is best for this group, and\n+        * record its identity in the selector table.\n+        */\n+        int bt \u003d -1;\n+        for (int t \u003d nGroups, bc \u003d 999999999; --t \u003e\u003d 0;) {\n+          final int cost_t \u003d cost[t];\n+          if (cost_t \u003c bc) {\n+            bc \u003d cost_t;\n+            bt \u003d t;\n+          }\n+        }\n+\n+        fave[bt]++;\n+        selector[nSelectors] \u003d (byte) bt;\n+        nSelectors++;\n+\n+        /*\n+        * Increment the symbol frequencies for the selected table.\n+        */\n+        final int[] rfreq_bt \u003d rfreq[bt];\n+        for (int i \u003d gs; i \u003c\u003d ge; i++) {\n+          rfreq_bt[sfmap[i]]++;\n+        }\n+\n+        gs \u003d ge + 1;\n+      }\n+\n+      /*\n+      * Recompute the tables based on the accumulated frequencies.\n+      */\n+      for (int t \u003d 0; t \u003c nGroups; t++) {\n+        hbMakeCodeLengths(len[t], rfreq[t], this.data, alphaSize, 20);\n+      }\n+    }\n+\n+    return nSelectors;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private int sendMTFValues1(final int nGroups, final int alphaSize) {\n    final Data dataShadow \u003d this.data;\n    final int[][] rfreq \u003d dataShadow.sendMTFValues_rfreq;\n    final int[] fave \u003d dataShadow.sendMTFValues_fave;\n    final short[] cost \u003d dataShadow.sendMTFValues_cost;\n    final char[] sfmap \u003d dataShadow.sfmap;\n    final byte[] selector \u003d dataShadow.selector;\n    final byte[][] len \u003d dataShadow.sendMTFValues_len;\n    final byte[] len_0 \u003d len[0];\n    final byte[] len_1 \u003d len[1];\n    final byte[] len_2 \u003d len[2];\n    final byte[] len_3 \u003d len[3];\n    final byte[] len_4 \u003d len[4];\n    final byte[] len_5 \u003d len[5];\n    final int nMTFShadow \u003d this.nMTF;\n\n    int nSelectors \u003d 0;\n\n    for (int iter \u003d 0; iter \u003c N_ITERS; iter++) {\n      for (int t \u003d nGroups; --t \u003e\u003d 0;) {\n        fave[t] \u003d 0;\n        int[] rfreqt \u003d rfreq[t];\n        for (int i \u003d alphaSize; --i \u003e\u003d 0;) {\n          rfreqt[i] \u003d 0;\n        }\n      }\n\n      nSelectors \u003d 0;\n\n      for (int gs \u003d 0; gs \u003c this.nMTF;) {\n        /* Set group start \u0026 end marks. */\n\n        /*\n        * Calculate the cost of this group as coded by each of the\n        * coding tables.\n        */\n\n        final int ge \u003d Math.min(gs + G_SIZE - 1, nMTFShadow - 1);\n\n        if (nGroups \u003d\u003d N_GROUPS) {\n          // unrolled version of the else-block\n\n          short cost0 \u003d 0;\n          short cost1 \u003d 0;\n          short cost2 \u003d 0;\n          short cost3 \u003d 0;\n          short cost4 \u003d 0;\n          short cost5 \u003d 0;\n\n          for (int i \u003d gs; i \u003c\u003d ge; i++) {\n            final int icv \u003d sfmap[i];\n            cost0 +\u003d len_0[icv] \u0026 0xff;\n            cost1 +\u003d len_1[icv] \u0026 0xff;\n            cost2 +\u003d len_2[icv] \u0026 0xff;\n            cost3 +\u003d len_3[icv] \u0026 0xff;\n            cost4 +\u003d len_4[icv] \u0026 0xff;\n            cost5 +\u003d len_5[icv] \u0026 0xff;\n          }\n\n          cost[0] \u003d cost0;\n          cost[1] \u003d cost1;\n          cost[2] \u003d cost2;\n          cost[3] \u003d cost3;\n          cost[4] \u003d cost4;\n          cost[5] \u003d cost5;\n\n        } else {\n          for (int t \u003d nGroups; --t \u003e\u003d 0;) {\n            cost[t] \u003d 0;\n          }\n\n          for (int i \u003d gs; i \u003c\u003d ge; i++) {\n            final int icv \u003d sfmap[i];\n            for (int t \u003d nGroups; --t \u003e\u003d 0;) {\n              cost[t] +\u003d len[t][icv] \u0026 0xff;\n            }\n          }\n        }\n\n        /*\n        * Find the coding table which is best for this group, and\n        * record its identity in the selector table.\n        */\n        int bt \u003d -1;\n        for (int t \u003d nGroups, bc \u003d 999999999; --t \u003e\u003d 0;) {\n          final int cost_t \u003d cost[t];\n          if (cost_t \u003c bc) {\n            bc \u003d cost_t;\n            bt \u003d t;\n          }\n        }\n\n        fave[bt]++;\n        selector[nSelectors] \u003d (byte) bt;\n        nSelectors++;\n\n        /*\n        * Increment the symbol frequencies for the selected table.\n        */\n        final int[] rfreq_bt \u003d rfreq[bt];\n        for (int i \u003d gs; i \u003c\u003d ge; i++) {\n          rfreq_bt[sfmap[i]]++;\n        }\n\n        gs \u003d ge + 1;\n      }\n\n      /*\n      * Recompute the tables based on the accumulated frequencies.\n      */\n      for (int t \u003d 0; t \u003c nGroups; t++) {\n        hbMakeCodeLengths(len[t], rfreq[t], this.data, alphaSize, 20);\n      }\n    }\n\n    return nSelectors;\n  }",
      "path": "src/java/org/apache/hadoop/io/compress/bzip2/CBZip2OutputStream.java"
    }
  }
}