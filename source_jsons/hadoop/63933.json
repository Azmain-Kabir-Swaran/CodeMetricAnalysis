{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PlacementConstraintParser.java",
  "functionName": "validate",
  "functionId": "validate",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/constraint/PlacementConstraintParser.java",
  "functionStartLine": 84,
  "functionEndLine": 86,
  "numCommitsSeen": 6,
  "timeTaken": 771,
  "changeHistory": [
    "a08c048832d68c203fbdfce8d9f0e7dcccb02a55"
  ],
  "changeHistoryShort": {
    "a08c048832d68c203fbdfce8d9f0e7dcccb02a55": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a08c048832d68c203fbdfce8d9f0e7dcccb02a55": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7838. Support AND/OR constraints in Distributed Shell. Contributed by Weiwei Yang.\n",
      "commitDate": "10/02/18 10:20 PM",
      "commitName": "a08c048832d68c203fbdfce8d9f0e7dcccb02a55",
      "commitAuthor": "Weiwei Yang",
      "diff": "@@ -0,0 +1,47 @@\n+    public void validate() throws PlacementConstraintParseException {\n+      ArrayList\u003cString\u003e parsedElements \u003d new ArrayList\u003c\u003e();\n+      char[] arr \u003d expr.toCharArray();\n+      // Memorize the location of each delimiter in a stack,\n+      // removes invalid delimiters that embraced in brackets.\n+      Stack\u003cInteger\u003e stack \u003d new Stack\u003c\u003e();\n+      for (int i\u003d0; i\u003carr.length; i++) {\n+        char current \u003d arr[i];\n+        switch (current) {\n+        case EXPRESSION_DELIM:\n+          stack.add(i);\n+          break;\n+        case BRACKET_START:\n+          stack.add(i);\n+          break;\n+        case BRACKET_END:\n+          while(!stack.isEmpty()) {\n+            if (arr[stack.pop()] \u003d\u003d BRACKET_START) {\n+              break;\n+            }\n+          }\n+          break;\n+        default:\n+          break;\n+        }\n+      }\n+\n+      if (stack.isEmpty()) {\n+        // Single element\n+        parsedElements.add(expr);\n+      } else {\n+        Iterator\u003cInteger\u003e it \u003d stack.iterator();\n+        int currentPos \u003d 0;\n+        while (it.hasNext()) {\n+          int pos \u003d it.next();\n+          String sub \u003d expr.substring(currentPos, pos);\n+          if (sub !\u003d null \u0026\u0026 !sub.isEmpty()) {\n+            parsedElements.add(sub);\n+          }\n+          currentPos \u003d pos+1;\n+        }\n+        if (currentPos \u003c expr.length()) {\n+          parsedElements.add(expr.substring(currentPos, expr.length()));\n+        }\n+      }\n+      iterator \u003d parsedElements.iterator();\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void validate() throws PlacementConstraintParseException {\n      ArrayList\u003cString\u003e parsedElements \u003d new ArrayList\u003c\u003e();\n      char[] arr \u003d expr.toCharArray();\n      // Memorize the location of each delimiter in a stack,\n      // removes invalid delimiters that embraced in brackets.\n      Stack\u003cInteger\u003e stack \u003d new Stack\u003c\u003e();\n      for (int i\u003d0; i\u003carr.length; i++) {\n        char current \u003d arr[i];\n        switch (current) {\n        case EXPRESSION_DELIM:\n          stack.add(i);\n          break;\n        case BRACKET_START:\n          stack.add(i);\n          break;\n        case BRACKET_END:\n          while(!stack.isEmpty()) {\n            if (arr[stack.pop()] \u003d\u003d BRACKET_START) {\n              break;\n            }\n          }\n          break;\n        default:\n          break;\n        }\n      }\n\n      if (stack.isEmpty()) {\n        // Single element\n        parsedElements.add(expr);\n      } else {\n        Iterator\u003cInteger\u003e it \u003d stack.iterator();\n        int currentPos \u003d 0;\n        while (it.hasNext()) {\n          int pos \u003d it.next();\n          String sub \u003d expr.substring(currentPos, pos);\n          if (sub !\u003d null \u0026\u0026 !sub.isEmpty()) {\n            parsedElements.add(sub);\n          }\n          currentPos \u003d pos+1;\n        }\n        if (currentPos \u003c expr.length()) {\n          parsedElements.add(expr.substring(currentPos, expr.length()));\n        }\n      }\n      iterator \u003d parsedElements.iterator();\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/constraint/PlacementConstraintParser.java"
    }
  }
}