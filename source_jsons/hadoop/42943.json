{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "OpportunisticContainerAllocatorAMService.java",
  "functionName": "allocate",
  "functionId": "allocate___appAttemptId-ApplicationAttemptId__request-AllocateRequest__response-AllocateResponse",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
  "functionStartLine": 162,
  "functionEndLine": 215,
  "numCommitsSeen": 64,
  "timeTaken": 12287,
  "changeHistory": [
    "61a8436004294db0224dd20aa3997fa2e3136114",
    "ed3747c1ccc303e206de50c2b74f3c318cb1c416",
    "9c88695bcda0ffe4c7f49d643c649dfa1dce9bde",
    "6a69239d867070ee85d79026542033ac661c4c1c",
    "077fcf6a96e420e7f36350931722b8603d010cf1",
    "5496a34c0cb2b1a83cfa6b0aba5a77b05ff2d8f0",
    "ac1e5d4f77e3b9df8dcacb0b1f72eecc27931eb8",
    "283fa33febe043bd7b4fa87546be26c9c5a8f8b5",
    "10be45986cdf86a89055065b752959bd6369d54f",
    "82c9e061017c32e633e0b0cbb7978749a6df4fb2",
    "e5766b1dbee02ae0ef89618e172f3fb227af19e8",
    "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b"
  ],
  "changeHistoryShort": {
    "61a8436004294db0224dd20aa3997fa2e3136114": "Ybodychange",
    "ed3747c1ccc303e206de50c2b74f3c318cb1c416": "Ybodychange",
    "9c88695bcda0ffe4c7f49d643c649dfa1dce9bde": "Ybodychange",
    "6a69239d867070ee85d79026542033ac661c4c1c": "Ybodychange",
    "077fcf6a96e420e7f36350931722b8603d010cf1": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
    "5496a34c0cb2b1a83cfa6b0aba5a77b05ff2d8f0": "Ymultichange(Ymovefromfile,Yreturntypechange,Ymodifierchange,Ybodychange,Yrename,Yparameterchange)",
    "ac1e5d4f77e3b9df8dcacb0b1f72eecc27931eb8": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ymodifierchange,Yexceptionschange,Ybodychange)",
    "283fa33febe043bd7b4fa87546be26c9c5a8f8b5": "Ybodychange",
    "10be45986cdf86a89055065b752959bd6369d54f": "Ybodychange",
    "82c9e061017c32e633e0b0cbb7978749a6df4fb2": "Yfilerename",
    "e5766b1dbee02ae0ef89618e172f3fb227af19e8": "Yfilerename",
    "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "61a8436004294db0224dd20aa3997fa2e3136114": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9870. Remove unused function from OpportunisticContainerAllocatorAMService. Contributed by Abhishek Modi.\n",
      "commitDate": "02/10/19 5:25 AM",
      "commitName": "61a8436004294db0224dd20aa3997fa2e3136114",
      "commitAuthor": "Abhishek Modi",
      "commitDateOld": "30/09/19 11:10 AM",
      "commitNameOld": "4d3c580b03475a6ec9323d11e6875c542f8e3f6d",
      "commitAuthorOld": "Abhishek Modi",
      "daysBetweenCommits": 1.76,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,54 @@\n     public void allocate(ApplicationAttemptId appAttemptId,\n         AllocateRequest request, AllocateResponse response)\n         throws YarnException {\n       // Partition requests to GUARANTEED and OPPORTUNISTIC.\n       OpportunisticContainerAllocator.PartitionedResourceRequests\n           partitionedAsks \u003d\n           oppContainerAllocator.partitionAskList(request.getAskList());\n \n       // Allocate OPPORTUNISTIC containers.\n       SchedulerApplicationAttempt appAttempt \u003d\n           ((AbstractYarnScheduler)rmContext.getScheduler())\n               .getApplicationAttempt(appAttemptId);\n \n       if (!appAttempt.getApplicationAttemptId().equals(appAttemptId)){\n         LOG.error(\"Calling allocate on previous or removed or non \"\n-            + \"existent application attempt \" + appAttemptId);\n+            + \"existent application attempt {}\", appAttemptId);\n         return;\n       }\n \n       OpportunisticContainerContext oppCtx \u003d\n           appAttempt.getOpportunisticContainerContext();\n       oppCtx.updateNodeList(getLeastLoadedNodes());\n \n       if (!partitionedAsks.getOpportunistic().isEmpty()) {\n         String appPartition \u003d appAttempt.getAppAMNodePartitionName();\n \n         for (ResourceRequest req : partitionedAsks.getOpportunistic()) {\n           if (null \u003d\u003d req.getNodeLabelExpression()) {\n             req.setNodeLabelExpression(appPartition);\n           }\n         }\n       }\n \n       List\u003cContainer\u003e oppContainers \u003d\n           oppContainerAllocator.allocateContainers(\n               request.getResourceBlacklistRequest(),\n               partitionedAsks.getOpportunistic(), appAttemptId, oppCtx,\n               ResourceManager.getClusterTimeStamp(), appAttempt.getUser());\n \n       // Create RMContainers and update the NMTokens.\n       if (!oppContainers.isEmpty()) {\n         OpportunisticSchedulerMetrics schedulerMetrics \u003d\n             OpportunisticSchedulerMetrics.getMetrics();\n         schedulerMetrics.incrAllocatedOppContainers(oppContainers.size());\n         handleNewContainers(oppContainers, false);\n         appAttempt.updateNMTokens(oppContainers);\n         ApplicationMasterServiceUtils.addToAllocatedContainers(\n             response, oppContainers);\n       }\n \n       // Allocate GUARANTEED containers.\n       request.setAskList(partitionedAsks.getGuaranteed());\n       nextProcessor.allocate(appAttemptId, request, response);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void allocate(ApplicationAttemptId appAttemptId,\n        AllocateRequest request, AllocateResponse response)\n        throws YarnException {\n      // Partition requests to GUARANTEED and OPPORTUNISTIC.\n      OpportunisticContainerAllocator.PartitionedResourceRequests\n          partitionedAsks \u003d\n          oppContainerAllocator.partitionAskList(request.getAskList());\n\n      // Allocate OPPORTUNISTIC containers.\n      SchedulerApplicationAttempt appAttempt \u003d\n          ((AbstractYarnScheduler)rmContext.getScheduler())\n              .getApplicationAttempt(appAttemptId);\n\n      if (!appAttempt.getApplicationAttemptId().equals(appAttemptId)){\n        LOG.error(\"Calling allocate on previous or removed or non \"\n            + \"existent application attempt {}\", appAttemptId);\n        return;\n      }\n\n      OpportunisticContainerContext oppCtx \u003d\n          appAttempt.getOpportunisticContainerContext();\n      oppCtx.updateNodeList(getLeastLoadedNodes());\n\n      if (!partitionedAsks.getOpportunistic().isEmpty()) {\n        String appPartition \u003d appAttempt.getAppAMNodePartitionName();\n\n        for (ResourceRequest req : partitionedAsks.getOpportunistic()) {\n          if (null \u003d\u003d req.getNodeLabelExpression()) {\n            req.setNodeLabelExpression(appPartition);\n          }\n        }\n      }\n\n      List\u003cContainer\u003e oppContainers \u003d\n          oppContainerAllocator.allocateContainers(\n              request.getResourceBlacklistRequest(),\n              partitionedAsks.getOpportunistic(), appAttemptId, oppCtx,\n              ResourceManager.getClusterTimeStamp(), appAttempt.getUser());\n\n      // Create RMContainers and update the NMTokens.\n      if (!oppContainers.isEmpty()) {\n        OpportunisticSchedulerMetrics schedulerMetrics \u003d\n            OpportunisticSchedulerMetrics.getMetrics();\n        schedulerMetrics.incrAllocatedOppContainers(oppContainers.size());\n        handleNewContainers(oppContainers, false);\n        appAttempt.updateNMTokens(oppContainers);\n        ApplicationMasterServiceUtils.addToAllocatedContainers(\n            response, oppContainers);\n      }\n\n      // Allocate GUARANTEED containers.\n      request.setAskList(partitionedAsks.getGuaranteed());\n      nextProcessor.allocate(appAttemptId, request, response);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
      "extendedDetails": {}
    },
    "ed3747c1ccc303e206de50c2b74f3c318cb1c416": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9435. Add Opportunistic Scheduler metrics in ResourceManager. Contributed by Abhishek Modi.\n",
      "commitDate": "11/04/19 11:49 AM",
      "commitName": "ed3747c1ccc303e206de50c2b74f3c318cb1c416",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "19/03/19 11:00 AM",
      "commitNameOld": "5d8bd0e5cbf1142dbdf6a5f8cf1a448da88b9e9a",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 23.03,
      "commitsBetweenForRepo": 167,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,54 @@\n     public void allocate(ApplicationAttemptId appAttemptId,\n         AllocateRequest request, AllocateResponse response)\n         throws YarnException {\n       // Partition requests to GUARANTEED and OPPORTUNISTIC.\n       OpportunisticContainerAllocator.PartitionedResourceRequests\n           partitionedAsks \u003d\n           oppContainerAllocator.partitionAskList(request.getAskList());\n \n       // Allocate OPPORTUNISTIC containers.\n       SchedulerApplicationAttempt appAttempt \u003d\n           ((AbstractYarnScheduler)rmContext.getScheduler())\n               .getApplicationAttempt(appAttemptId);\n \n       if (!appAttempt.getApplicationAttemptId().equals(appAttemptId)){\n         LOG.error(\"Calling allocate on previous or removed or non \"\n             + \"existent application attempt \" + appAttemptId);\n         return;\n       }\n \n       OpportunisticContainerContext oppCtx \u003d\n           appAttempt.getOpportunisticContainerContext();\n       oppCtx.updateNodeList(getLeastLoadedNodes());\n \n       if (!partitionedAsks.getOpportunistic().isEmpty()) {\n         String appPartition \u003d appAttempt.getAppAMNodePartitionName();\n \n         for (ResourceRequest req : partitionedAsks.getOpportunistic()) {\n           if (null \u003d\u003d req.getNodeLabelExpression()) {\n             req.setNodeLabelExpression(appPartition);\n           }\n         }\n       }\n \n       List\u003cContainer\u003e oppContainers \u003d\n           oppContainerAllocator.allocateContainers(\n               request.getResourceBlacklistRequest(),\n               partitionedAsks.getOpportunistic(), appAttemptId, oppCtx,\n               ResourceManager.getClusterTimeStamp(), appAttempt.getUser());\n \n       // Create RMContainers and update the NMTokens.\n       if (!oppContainers.isEmpty()) {\n+        OpportunisticSchedulerMetrics schedulerMetrics \u003d\n+            OpportunisticSchedulerMetrics.getMetrics();\n+        schedulerMetrics.incrAllocatedOppContainers(oppContainers.size());\n         handleNewContainers(oppContainers, false);\n         appAttempt.updateNMTokens(oppContainers);\n         ApplicationMasterServiceUtils.addToAllocatedContainers(\n             response, oppContainers);\n       }\n \n       // Allocate GUARANTEED containers.\n       request.setAskList(partitionedAsks.getGuaranteed());\n       nextProcessor.allocate(appAttemptId, request, response);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void allocate(ApplicationAttemptId appAttemptId,\n        AllocateRequest request, AllocateResponse response)\n        throws YarnException {\n      // Partition requests to GUARANTEED and OPPORTUNISTIC.\n      OpportunisticContainerAllocator.PartitionedResourceRequests\n          partitionedAsks \u003d\n          oppContainerAllocator.partitionAskList(request.getAskList());\n\n      // Allocate OPPORTUNISTIC containers.\n      SchedulerApplicationAttempt appAttempt \u003d\n          ((AbstractYarnScheduler)rmContext.getScheduler())\n              .getApplicationAttempt(appAttemptId);\n\n      if (!appAttempt.getApplicationAttemptId().equals(appAttemptId)){\n        LOG.error(\"Calling allocate on previous or removed or non \"\n            + \"existent application attempt \" + appAttemptId);\n        return;\n      }\n\n      OpportunisticContainerContext oppCtx \u003d\n          appAttempt.getOpportunisticContainerContext();\n      oppCtx.updateNodeList(getLeastLoadedNodes());\n\n      if (!partitionedAsks.getOpportunistic().isEmpty()) {\n        String appPartition \u003d appAttempt.getAppAMNodePartitionName();\n\n        for (ResourceRequest req : partitionedAsks.getOpportunistic()) {\n          if (null \u003d\u003d req.getNodeLabelExpression()) {\n            req.setNodeLabelExpression(appPartition);\n          }\n        }\n      }\n\n      List\u003cContainer\u003e oppContainers \u003d\n          oppContainerAllocator.allocateContainers(\n              request.getResourceBlacklistRequest(),\n              partitionedAsks.getOpportunistic(), appAttemptId, oppCtx,\n              ResourceManager.getClusterTimeStamp(), appAttempt.getUser());\n\n      // Create RMContainers and update the NMTokens.\n      if (!oppContainers.isEmpty()) {\n        OpportunisticSchedulerMetrics schedulerMetrics \u003d\n            OpportunisticSchedulerMetrics.getMetrics();\n        schedulerMetrics.incrAllocatedOppContainers(oppContainers.size());\n        handleNewContainers(oppContainers, false);\n        appAttempt.updateNMTokens(oppContainers);\n        ApplicationMasterServiceUtils.addToAllocatedContainers(\n            response, oppContainers);\n      }\n\n      // Allocate GUARANTEED containers.\n      request.setAskList(partitionedAsks.getGuaranteed());\n      nextProcessor.allocate(appAttemptId, request, response);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
      "extendedDetails": {}
    },
    "9c88695bcda0ffe4c7f49d643c649dfa1dce9bde": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9238. Avoid allocating opportunistic containers to previous/removed/non-exist application attempt. Contributed by lujie.\n",
      "commitDate": "22/02/19 4:58 AM",
      "commitName": "9c88695bcda0ffe4c7f49d643c649dfa1dce9bde",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "03/01/19 7:56 AM",
      "commitNameOld": "cfe89e6f963ba25b5fff1ce48cad36d74b3c789c",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 49.88,
      "commitsBetweenForRepo": 370,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,51 @@\n     public void allocate(ApplicationAttemptId appAttemptId,\n         AllocateRequest request, AllocateResponse response)\n         throws YarnException {\n       // Partition requests to GUARANTEED and OPPORTUNISTIC.\n       OpportunisticContainerAllocator.PartitionedResourceRequests\n           partitionedAsks \u003d\n           oppContainerAllocator.partitionAskList(request.getAskList());\n \n       // Allocate OPPORTUNISTIC containers.\n       SchedulerApplicationAttempt appAttempt \u003d\n           ((AbstractYarnScheduler)rmContext.getScheduler())\n               .getApplicationAttempt(appAttemptId);\n \n+      if (!appAttempt.getApplicationAttemptId().equals(appAttemptId)){\n+        LOG.error(\"Calling allocate on previous or removed or non \"\n+            + \"existent application attempt \" + appAttemptId);\n+        return;\n+      }\n+\n       OpportunisticContainerContext oppCtx \u003d\n           appAttempt.getOpportunisticContainerContext();\n       oppCtx.updateNodeList(getLeastLoadedNodes());\n \n       if (!partitionedAsks.getOpportunistic().isEmpty()) {\n         String appPartition \u003d appAttempt.getAppAMNodePartitionName();\n \n         for (ResourceRequest req : partitionedAsks.getOpportunistic()) {\n           if (null \u003d\u003d req.getNodeLabelExpression()) {\n             req.setNodeLabelExpression(appPartition);\n           }\n         }\n       }\n \n       List\u003cContainer\u003e oppContainers \u003d\n           oppContainerAllocator.allocateContainers(\n               request.getResourceBlacklistRequest(),\n               partitionedAsks.getOpportunistic(), appAttemptId, oppCtx,\n               ResourceManager.getClusterTimeStamp(), appAttempt.getUser());\n \n       // Create RMContainers and update the NMTokens.\n       if (!oppContainers.isEmpty()) {\n         handleNewContainers(oppContainers, false);\n         appAttempt.updateNMTokens(oppContainers);\n         ApplicationMasterServiceUtils.addToAllocatedContainers(\n             response, oppContainers);\n       }\n \n       // Allocate GUARANTEED containers.\n       request.setAskList(partitionedAsks.getGuaranteed());\n       nextProcessor.allocate(appAttemptId, request, response);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void allocate(ApplicationAttemptId appAttemptId,\n        AllocateRequest request, AllocateResponse response)\n        throws YarnException {\n      // Partition requests to GUARANTEED and OPPORTUNISTIC.\n      OpportunisticContainerAllocator.PartitionedResourceRequests\n          partitionedAsks \u003d\n          oppContainerAllocator.partitionAskList(request.getAskList());\n\n      // Allocate OPPORTUNISTIC containers.\n      SchedulerApplicationAttempt appAttempt \u003d\n          ((AbstractYarnScheduler)rmContext.getScheduler())\n              .getApplicationAttempt(appAttemptId);\n\n      if (!appAttempt.getApplicationAttemptId().equals(appAttemptId)){\n        LOG.error(\"Calling allocate on previous or removed or non \"\n            + \"existent application attempt \" + appAttemptId);\n        return;\n      }\n\n      OpportunisticContainerContext oppCtx \u003d\n          appAttempt.getOpportunisticContainerContext();\n      oppCtx.updateNodeList(getLeastLoadedNodes());\n\n      if (!partitionedAsks.getOpportunistic().isEmpty()) {\n        String appPartition \u003d appAttempt.getAppAMNodePartitionName();\n\n        for (ResourceRequest req : partitionedAsks.getOpportunistic()) {\n          if (null \u003d\u003d req.getNodeLabelExpression()) {\n            req.setNodeLabelExpression(appPartition);\n          }\n        }\n      }\n\n      List\u003cContainer\u003e oppContainers \u003d\n          oppContainerAllocator.allocateContainers(\n              request.getResourceBlacklistRequest(),\n              partitionedAsks.getOpportunistic(), appAttemptId, oppCtx,\n              ResourceManager.getClusterTimeStamp(), appAttempt.getUser());\n\n      // Create RMContainers and update the NMTokens.\n      if (!oppContainers.isEmpty()) {\n        handleNewContainers(oppContainers, false);\n        appAttempt.updateNMTokens(oppContainers);\n        ApplicationMasterServiceUtils.addToAllocatedContainers(\n            response, oppContainers);\n      }\n\n      // Allocate GUARANTEED containers.\n      request.setAskList(partitionedAsks.getGuaranteed());\n      nextProcessor.allocate(appAttemptId, request, response);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
      "extendedDetails": {}
    },
    "6a69239d867070ee85d79026542033ac661c4c1c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8163. Add support for Node Labels in opportunistic scheduling. Contributed by Abhishek Modi.\n",
      "commitDate": "04/05/18 2:59 PM",
      "commitName": "6a69239d867070ee85d79026542033ac661c4c1c",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "05/10/17 9:58 AM",
      "commitNameOld": "b733348dde18a242e6c9074c512116a8baf1d281",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 211.21,
      "commitsBetweenForRepo": 2065,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,45 @@\n     public void allocate(ApplicationAttemptId appAttemptId,\n         AllocateRequest request, AllocateResponse response)\n         throws YarnException {\n       // Partition requests to GUARANTEED and OPPORTUNISTIC.\n       OpportunisticContainerAllocator.PartitionedResourceRequests\n           partitionedAsks \u003d\n           oppContainerAllocator.partitionAskList(request.getAskList());\n \n       // Allocate OPPORTUNISTIC containers.\n       SchedulerApplicationAttempt appAttempt \u003d\n           ((AbstractYarnScheduler)rmContext.getScheduler())\n               .getApplicationAttempt(appAttemptId);\n \n       OpportunisticContainerContext oppCtx \u003d\n           appAttempt.getOpportunisticContainerContext();\n       oppCtx.updateNodeList(getLeastLoadedNodes());\n \n+      if (!partitionedAsks.getOpportunistic().isEmpty()) {\n+        String appPartition \u003d appAttempt.getAppAMNodePartitionName();\n+\n+        for (ResourceRequest req : partitionedAsks.getOpportunistic()) {\n+          if (null \u003d\u003d req.getNodeLabelExpression()) {\n+            req.setNodeLabelExpression(appPartition);\n+          }\n+        }\n+      }\n+\n       List\u003cContainer\u003e oppContainers \u003d\n           oppContainerAllocator.allocateContainers(\n               request.getResourceBlacklistRequest(),\n               partitionedAsks.getOpportunistic(), appAttemptId, oppCtx,\n               ResourceManager.getClusterTimeStamp(), appAttempt.getUser());\n \n       // Create RMContainers and update the NMTokens.\n       if (!oppContainers.isEmpty()) {\n         handleNewContainers(oppContainers, false);\n         appAttempt.updateNMTokens(oppContainers);\n         ApplicationMasterServiceUtils.addToAllocatedContainers(\n             response, oppContainers);\n       }\n \n       // Allocate GUARANTEED containers.\n       request.setAskList(partitionedAsks.getGuaranteed());\n       nextProcessor.allocate(appAttemptId, request, response);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void allocate(ApplicationAttemptId appAttemptId,\n        AllocateRequest request, AllocateResponse response)\n        throws YarnException {\n      // Partition requests to GUARANTEED and OPPORTUNISTIC.\n      OpportunisticContainerAllocator.PartitionedResourceRequests\n          partitionedAsks \u003d\n          oppContainerAllocator.partitionAskList(request.getAskList());\n\n      // Allocate OPPORTUNISTIC containers.\n      SchedulerApplicationAttempt appAttempt \u003d\n          ((AbstractYarnScheduler)rmContext.getScheduler())\n              .getApplicationAttempt(appAttemptId);\n\n      OpportunisticContainerContext oppCtx \u003d\n          appAttempt.getOpportunisticContainerContext();\n      oppCtx.updateNodeList(getLeastLoadedNodes());\n\n      if (!partitionedAsks.getOpportunistic().isEmpty()) {\n        String appPartition \u003d appAttempt.getAppAMNodePartitionName();\n\n        for (ResourceRequest req : partitionedAsks.getOpportunistic()) {\n          if (null \u003d\u003d req.getNodeLabelExpression()) {\n            req.setNodeLabelExpression(appPartition);\n          }\n        }\n      }\n\n      List\u003cContainer\u003e oppContainers \u003d\n          oppContainerAllocator.allocateContainers(\n              request.getResourceBlacklistRequest(),\n              partitionedAsks.getOpportunistic(), appAttemptId, oppCtx,\n              ResourceManager.getClusterTimeStamp(), appAttempt.getUser());\n\n      // Create RMContainers and update the NMTokens.\n      if (!oppContainers.isEmpty()) {\n        handleNewContainers(oppContainers, false);\n        appAttempt.updateNMTokens(oppContainers);\n        ApplicationMasterServiceUtils.addToAllocatedContainers(\n            response, oppContainers);\n      }\n\n      // Allocate GUARANTEED containers.\n      request.setAskList(partitionedAsks.getGuaranteed());\n      nextProcessor.allocate(appAttemptId, request, response);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
      "extendedDetails": {}
    },
    "077fcf6a96e420e7f36350931722b8603d010cf1": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-6777. Support for ApplicationMasterService processing chain of interceptors. (asuresh)\n",
      "commitDate": "19/07/17 12:26 PM",
      "commitName": "077fcf6a96e420e7f36350931722b8603d010cf1",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6777. Support for ApplicationMasterService processing chain of interceptors. (asuresh)\n",
          "commitDate": "19/07/17 12:26 PM",
          "commitName": "077fcf6a96e420e7f36350931722b8603d010cf1",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "10/07/17 2:34 PM",
          "commitNameOld": "5496a34c0cb2b1a83cfa6b0aba5a77b05ff2d8f0",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 8.91,
          "commitsBetweenForRepo": 53,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,35 @@\n-    public AllocateResponse allocate(ApplicationAttemptId appAttemptId,\n-        AllocateRequest request) throws YarnException {\n+    public void allocate(ApplicationAttemptId appAttemptId,\n+        AllocateRequest request, AllocateResponse response)\n+        throws YarnException {\n       // Partition requests to GUARANTEED and OPPORTUNISTIC.\n       OpportunisticContainerAllocator.PartitionedResourceRequests\n           partitionedAsks \u003d\n           oppContainerAllocator.partitionAskList(request.getAskList());\n \n       // Allocate OPPORTUNISTIC containers.\n       SchedulerApplicationAttempt appAttempt \u003d\n           ((AbstractYarnScheduler)rmContext.getScheduler())\n               .getApplicationAttempt(appAttemptId);\n \n       OpportunisticContainerContext oppCtx \u003d\n           appAttempt.getOpportunisticContainerContext();\n       oppCtx.updateNodeList(getLeastLoadedNodes());\n \n       List\u003cContainer\u003e oppContainers \u003d\n           oppContainerAllocator.allocateContainers(\n               request.getResourceBlacklistRequest(),\n               partitionedAsks.getOpportunistic(), appAttemptId, oppCtx,\n               ResourceManager.getClusterTimeStamp(), appAttempt.getUser());\n \n       // Create RMContainers and update the NMTokens.\n       if (!oppContainers.isEmpty()) {\n         handleNewContainers(oppContainers, false);\n         appAttempt.updateNMTokens(oppContainers);\n+        ApplicationMasterServiceUtils.addToAllocatedContainers(\n+            response, oppContainers);\n       }\n \n       // Allocate GUARANTEED containers.\n       request.setAskList(partitionedAsks.getGuaranteed());\n-\n-      AllocateResponse response \u003d super.allocate(appAttemptId, request);\n-      if (!oppContainers.isEmpty()) {\n-        ApplicationMasterServiceUtils.addToAllocatedContainers(\n-            response, oppContainers);\n-      }\n-      return response;\n+      nextProcessor.allocate(appAttemptId, request, response);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void allocate(ApplicationAttemptId appAttemptId,\n        AllocateRequest request, AllocateResponse response)\n        throws YarnException {\n      // Partition requests to GUARANTEED and OPPORTUNISTIC.\n      OpportunisticContainerAllocator.PartitionedResourceRequests\n          partitionedAsks \u003d\n          oppContainerAllocator.partitionAskList(request.getAskList());\n\n      // Allocate OPPORTUNISTIC containers.\n      SchedulerApplicationAttempt appAttempt \u003d\n          ((AbstractYarnScheduler)rmContext.getScheduler())\n              .getApplicationAttempt(appAttemptId);\n\n      OpportunisticContainerContext oppCtx \u003d\n          appAttempt.getOpportunisticContainerContext();\n      oppCtx.updateNodeList(getLeastLoadedNodes());\n\n      List\u003cContainer\u003e oppContainers \u003d\n          oppContainerAllocator.allocateContainers(\n              request.getResourceBlacklistRequest(),\n              partitionedAsks.getOpportunistic(), appAttemptId, oppCtx,\n              ResourceManager.getClusterTimeStamp(), appAttempt.getUser());\n\n      // Create RMContainers and update the NMTokens.\n      if (!oppContainers.isEmpty()) {\n        handleNewContainers(oppContainers, false);\n        appAttempt.updateNMTokens(oppContainers);\n        ApplicationMasterServiceUtils.addToAllocatedContainers(\n            response, oppContainers);\n      }\n\n      // Allocate GUARANTEED containers.\n      request.setAskList(partitionedAsks.getGuaranteed());\n      nextProcessor.allocate(appAttemptId, request, response);\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
          "extendedDetails": {
            "oldValue": "[appAttemptId-ApplicationAttemptId, request-AllocateRequest]",
            "newValue": "[appAttemptId-ApplicationAttemptId, request-AllocateRequest, response-AllocateResponse]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-6777. Support for ApplicationMasterService processing chain of interceptors. (asuresh)\n",
          "commitDate": "19/07/17 12:26 PM",
          "commitName": "077fcf6a96e420e7f36350931722b8603d010cf1",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "10/07/17 2:34 PM",
          "commitNameOld": "5496a34c0cb2b1a83cfa6b0aba5a77b05ff2d8f0",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 8.91,
          "commitsBetweenForRepo": 53,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,35 @@\n-    public AllocateResponse allocate(ApplicationAttemptId appAttemptId,\n-        AllocateRequest request) throws YarnException {\n+    public void allocate(ApplicationAttemptId appAttemptId,\n+        AllocateRequest request, AllocateResponse response)\n+        throws YarnException {\n       // Partition requests to GUARANTEED and OPPORTUNISTIC.\n       OpportunisticContainerAllocator.PartitionedResourceRequests\n           partitionedAsks \u003d\n           oppContainerAllocator.partitionAskList(request.getAskList());\n \n       // Allocate OPPORTUNISTIC containers.\n       SchedulerApplicationAttempt appAttempt \u003d\n           ((AbstractYarnScheduler)rmContext.getScheduler())\n               .getApplicationAttempt(appAttemptId);\n \n       OpportunisticContainerContext oppCtx \u003d\n           appAttempt.getOpportunisticContainerContext();\n       oppCtx.updateNodeList(getLeastLoadedNodes());\n \n       List\u003cContainer\u003e oppContainers \u003d\n           oppContainerAllocator.allocateContainers(\n               request.getResourceBlacklistRequest(),\n               partitionedAsks.getOpportunistic(), appAttemptId, oppCtx,\n               ResourceManager.getClusterTimeStamp(), appAttempt.getUser());\n \n       // Create RMContainers and update the NMTokens.\n       if (!oppContainers.isEmpty()) {\n         handleNewContainers(oppContainers, false);\n         appAttempt.updateNMTokens(oppContainers);\n+        ApplicationMasterServiceUtils.addToAllocatedContainers(\n+            response, oppContainers);\n       }\n \n       // Allocate GUARANTEED containers.\n       request.setAskList(partitionedAsks.getGuaranteed());\n-\n-      AllocateResponse response \u003d super.allocate(appAttemptId, request);\n-      if (!oppContainers.isEmpty()) {\n-        ApplicationMasterServiceUtils.addToAllocatedContainers(\n-            response, oppContainers);\n-      }\n-      return response;\n+      nextProcessor.allocate(appAttemptId, request, response);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void allocate(ApplicationAttemptId appAttemptId,\n        AllocateRequest request, AllocateResponse response)\n        throws YarnException {\n      // Partition requests to GUARANTEED and OPPORTUNISTIC.\n      OpportunisticContainerAllocator.PartitionedResourceRequests\n          partitionedAsks \u003d\n          oppContainerAllocator.partitionAskList(request.getAskList());\n\n      // Allocate OPPORTUNISTIC containers.\n      SchedulerApplicationAttempt appAttempt \u003d\n          ((AbstractYarnScheduler)rmContext.getScheduler())\n              .getApplicationAttempt(appAttemptId);\n\n      OpportunisticContainerContext oppCtx \u003d\n          appAttempt.getOpportunisticContainerContext();\n      oppCtx.updateNodeList(getLeastLoadedNodes());\n\n      List\u003cContainer\u003e oppContainers \u003d\n          oppContainerAllocator.allocateContainers(\n              request.getResourceBlacklistRequest(),\n              partitionedAsks.getOpportunistic(), appAttemptId, oppCtx,\n              ResourceManager.getClusterTimeStamp(), appAttempt.getUser());\n\n      // Create RMContainers and update the NMTokens.\n      if (!oppContainers.isEmpty()) {\n        handleNewContainers(oppContainers, false);\n        appAttempt.updateNMTokens(oppContainers);\n        ApplicationMasterServiceUtils.addToAllocatedContainers(\n            response, oppContainers);\n      }\n\n      // Allocate GUARANTEED containers.\n      request.setAskList(partitionedAsks.getGuaranteed());\n      nextProcessor.allocate(appAttemptId, request, response);\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
          "extendedDetails": {
            "oldValue": "AllocateResponse",
            "newValue": "void"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6777. Support for ApplicationMasterService processing chain of interceptors. (asuresh)\n",
          "commitDate": "19/07/17 12:26 PM",
          "commitName": "077fcf6a96e420e7f36350931722b8603d010cf1",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "10/07/17 2:34 PM",
          "commitNameOld": "5496a34c0cb2b1a83cfa6b0aba5a77b05ff2d8f0",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 8.91,
          "commitsBetweenForRepo": 53,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,35 @@\n-    public AllocateResponse allocate(ApplicationAttemptId appAttemptId,\n-        AllocateRequest request) throws YarnException {\n+    public void allocate(ApplicationAttemptId appAttemptId,\n+        AllocateRequest request, AllocateResponse response)\n+        throws YarnException {\n       // Partition requests to GUARANTEED and OPPORTUNISTIC.\n       OpportunisticContainerAllocator.PartitionedResourceRequests\n           partitionedAsks \u003d\n           oppContainerAllocator.partitionAskList(request.getAskList());\n \n       // Allocate OPPORTUNISTIC containers.\n       SchedulerApplicationAttempt appAttempt \u003d\n           ((AbstractYarnScheduler)rmContext.getScheduler())\n               .getApplicationAttempt(appAttemptId);\n \n       OpportunisticContainerContext oppCtx \u003d\n           appAttempt.getOpportunisticContainerContext();\n       oppCtx.updateNodeList(getLeastLoadedNodes());\n \n       List\u003cContainer\u003e oppContainers \u003d\n           oppContainerAllocator.allocateContainers(\n               request.getResourceBlacklistRequest(),\n               partitionedAsks.getOpportunistic(), appAttemptId, oppCtx,\n               ResourceManager.getClusterTimeStamp(), appAttempt.getUser());\n \n       // Create RMContainers and update the NMTokens.\n       if (!oppContainers.isEmpty()) {\n         handleNewContainers(oppContainers, false);\n         appAttempt.updateNMTokens(oppContainers);\n+        ApplicationMasterServiceUtils.addToAllocatedContainers(\n+            response, oppContainers);\n       }\n \n       // Allocate GUARANTEED containers.\n       request.setAskList(partitionedAsks.getGuaranteed());\n-\n-      AllocateResponse response \u003d super.allocate(appAttemptId, request);\n-      if (!oppContainers.isEmpty()) {\n-        ApplicationMasterServiceUtils.addToAllocatedContainers(\n-            response, oppContainers);\n-      }\n-      return response;\n+      nextProcessor.allocate(appAttemptId, request, response);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void allocate(ApplicationAttemptId appAttemptId,\n        AllocateRequest request, AllocateResponse response)\n        throws YarnException {\n      // Partition requests to GUARANTEED and OPPORTUNISTIC.\n      OpportunisticContainerAllocator.PartitionedResourceRequests\n          partitionedAsks \u003d\n          oppContainerAllocator.partitionAskList(request.getAskList());\n\n      // Allocate OPPORTUNISTIC containers.\n      SchedulerApplicationAttempt appAttempt \u003d\n          ((AbstractYarnScheduler)rmContext.getScheduler())\n              .getApplicationAttempt(appAttemptId);\n\n      OpportunisticContainerContext oppCtx \u003d\n          appAttempt.getOpportunisticContainerContext();\n      oppCtx.updateNodeList(getLeastLoadedNodes());\n\n      List\u003cContainer\u003e oppContainers \u003d\n          oppContainerAllocator.allocateContainers(\n              request.getResourceBlacklistRequest(),\n              partitionedAsks.getOpportunistic(), appAttemptId, oppCtx,\n              ResourceManager.getClusterTimeStamp(), appAttempt.getUser());\n\n      // Create RMContainers and update the NMTokens.\n      if (!oppContainers.isEmpty()) {\n        handleNewContainers(oppContainers, false);\n        appAttempt.updateNMTokens(oppContainers);\n        ApplicationMasterServiceUtils.addToAllocatedContainers(\n            response, oppContainers);\n      }\n\n      // Allocate GUARANTEED containers.\n      request.setAskList(partitionedAsks.getGuaranteed());\n      nextProcessor.allocate(appAttemptId, request, response);\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
          "extendedDetails": {}
        }
      ]
    },
    "5496a34c0cb2b1a83cfa6b0aba5a77b05ff2d8f0": {
      "type": "Ymultichange(Ymovefromfile,Yreturntypechange,Ymodifierchange,Ybodychange,Yrename,Yparameterchange)",
      "commitMessage": "YARN-6776. Refactor ApplicaitonMasterService to move actual processing logic to a separate class. (asuresh)\n",
      "commitDate": "10/07/17 2:34 PM",
      "commitName": "5496a34c0cb2b1a83cfa6b0aba5a77b05ff2d8f0",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-6776. Refactor ApplicaitonMasterService to move actual processing logic to a separate class. (asuresh)\n",
          "commitDate": "10/07/17 2:34 PM",
          "commitName": "5496a34c0cb2b1a83cfa6b0aba5a77b05ff2d8f0",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "10/07/17 3:53 AM",
          "commitNameOld": "09653ea098a17fddcf111b0da289085915c351d1",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 0.45,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,38 @@\n-  protected void allocateInternal(ApplicationAttemptId appAttemptId,\n-      AllocateRequest request, AllocateResponse allocateResponse)\n-      throws YarnException {\n+    public AllocateResponse allocate(ApplicationAttemptId appAttemptId,\n+        AllocateRequest request) throws YarnException {\n+      // Partition requests to GUARANTEED and OPPORTUNISTIC.\n+      OpportunisticContainerAllocator.PartitionedResourceRequests\n+          partitionedAsks \u003d\n+          oppContainerAllocator.partitionAskList(request.getAskList());\n \n-    // Partition requests to GUARANTEED and OPPORTUNISTIC.\n-    OpportunisticContainerAllocator.PartitionedResourceRequests\n-        partitionedAsks \u003d\n-        oppContainerAllocator.partitionAskList(request.getAskList());\n+      // Allocate OPPORTUNISTIC containers.\n+      SchedulerApplicationAttempt appAttempt \u003d\n+          ((AbstractYarnScheduler)rmContext.getScheduler())\n+              .getApplicationAttempt(appAttemptId);\n \n-    // Allocate OPPORTUNISTIC containers.\n-    SchedulerApplicationAttempt appAttempt \u003d\n-        ((AbstractYarnScheduler)rmContext.getScheduler())\n-            .getApplicationAttempt(appAttemptId);\n+      OpportunisticContainerContext oppCtx \u003d\n+          appAttempt.getOpportunisticContainerContext();\n+      oppCtx.updateNodeList(getLeastLoadedNodes());\n \n-    OpportunisticContainerContext oppCtx \u003d\n-        appAttempt.getOpportunisticContainerContext();\n-    oppCtx.updateNodeList(getLeastLoadedNodes());\n+      List\u003cContainer\u003e oppContainers \u003d\n+          oppContainerAllocator.allocateContainers(\n+              request.getResourceBlacklistRequest(),\n+              partitionedAsks.getOpportunistic(), appAttemptId, oppCtx,\n+              ResourceManager.getClusterTimeStamp(), appAttempt.getUser());\n \n-    List\u003cContainer\u003e oppContainers \u003d\n-        oppContainerAllocator.allocateContainers(\n-            request.getResourceBlacklistRequest(),\n-            partitionedAsks.getOpportunistic(), appAttemptId, oppCtx,\n-            ResourceManager.getClusterTimeStamp(), appAttempt.getUser());\n+      // Create RMContainers and update the NMTokens.\n+      if (!oppContainers.isEmpty()) {\n+        handleNewContainers(oppContainers, false);\n+        appAttempt.updateNMTokens(oppContainers);\n+      }\n \n-    // Create RMContainers and update the NMTokens.\n-    if (!oppContainers.isEmpty()) {\n-      handleNewContainers(oppContainers, false);\n-      appAttempt.updateNMTokens(oppContainers);\n-      addToAllocatedContainers(allocateResponse, oppContainers);\n-    }\n+      // Allocate GUARANTEED containers.\n+      request.setAskList(partitionedAsks.getGuaranteed());\n \n-    // Allocate GUARANTEED containers.\n-    request.setAskList(partitionedAsks.getGuaranteed());\n-\n-    super.allocateInternal(appAttemptId, request, allocateResponse);\n-  }\n\\ No newline at end of file\n+      AllocateResponse response \u003d super.allocate(appAttemptId, request);\n+      if (!oppContainers.isEmpty()) {\n+        ApplicationMasterServiceUtils.addToAllocatedContainers(\n+            response, oppContainers);\n+      }\n+      return response;\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    public AllocateResponse allocate(ApplicationAttemptId appAttemptId,\n        AllocateRequest request) throws YarnException {\n      // Partition requests to GUARANTEED and OPPORTUNISTIC.\n      OpportunisticContainerAllocator.PartitionedResourceRequests\n          partitionedAsks \u003d\n          oppContainerAllocator.partitionAskList(request.getAskList());\n\n      // Allocate OPPORTUNISTIC containers.\n      SchedulerApplicationAttempt appAttempt \u003d\n          ((AbstractYarnScheduler)rmContext.getScheduler())\n              .getApplicationAttempt(appAttemptId);\n\n      OpportunisticContainerContext oppCtx \u003d\n          appAttempt.getOpportunisticContainerContext();\n      oppCtx.updateNodeList(getLeastLoadedNodes());\n\n      List\u003cContainer\u003e oppContainers \u003d\n          oppContainerAllocator.allocateContainers(\n              request.getResourceBlacklistRequest(),\n              partitionedAsks.getOpportunistic(), appAttemptId, oppCtx,\n              ResourceManager.getClusterTimeStamp(), appAttempt.getUser());\n\n      // Create RMContainers and update the NMTokens.\n      if (!oppContainers.isEmpty()) {\n        handleNewContainers(oppContainers, false);\n        appAttempt.updateNMTokens(oppContainers);\n      }\n\n      // Allocate GUARANTEED containers.\n      request.setAskList(partitionedAsks.getGuaranteed());\n\n      AllocateResponse response \u003d super.allocate(appAttemptId, request);\n      if (!oppContainers.isEmpty()) {\n        ApplicationMasterServiceUtils.addToAllocatedContainers(\n            response, oppContainers);\n      }\n      return response;\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
            "oldMethodName": "allocateInternal",
            "newMethodName": "allocate"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-6776. Refactor ApplicaitonMasterService to move actual processing logic to a separate class. (asuresh)\n",
          "commitDate": "10/07/17 2:34 PM",
          "commitName": "5496a34c0cb2b1a83cfa6b0aba5a77b05ff2d8f0",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "10/07/17 3:53 AM",
          "commitNameOld": "09653ea098a17fddcf111b0da289085915c351d1",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 0.45,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,38 @@\n-  protected void allocateInternal(ApplicationAttemptId appAttemptId,\n-      AllocateRequest request, AllocateResponse allocateResponse)\n-      throws YarnException {\n+    public AllocateResponse allocate(ApplicationAttemptId appAttemptId,\n+        AllocateRequest request) throws YarnException {\n+      // Partition requests to GUARANTEED and OPPORTUNISTIC.\n+      OpportunisticContainerAllocator.PartitionedResourceRequests\n+          partitionedAsks \u003d\n+          oppContainerAllocator.partitionAskList(request.getAskList());\n \n-    // Partition requests to GUARANTEED and OPPORTUNISTIC.\n-    OpportunisticContainerAllocator.PartitionedResourceRequests\n-        partitionedAsks \u003d\n-        oppContainerAllocator.partitionAskList(request.getAskList());\n+      // Allocate OPPORTUNISTIC containers.\n+      SchedulerApplicationAttempt appAttempt \u003d\n+          ((AbstractYarnScheduler)rmContext.getScheduler())\n+              .getApplicationAttempt(appAttemptId);\n \n-    // Allocate OPPORTUNISTIC containers.\n-    SchedulerApplicationAttempt appAttempt \u003d\n-        ((AbstractYarnScheduler)rmContext.getScheduler())\n-            .getApplicationAttempt(appAttemptId);\n+      OpportunisticContainerContext oppCtx \u003d\n+          appAttempt.getOpportunisticContainerContext();\n+      oppCtx.updateNodeList(getLeastLoadedNodes());\n \n-    OpportunisticContainerContext oppCtx \u003d\n-        appAttempt.getOpportunisticContainerContext();\n-    oppCtx.updateNodeList(getLeastLoadedNodes());\n+      List\u003cContainer\u003e oppContainers \u003d\n+          oppContainerAllocator.allocateContainers(\n+              request.getResourceBlacklistRequest(),\n+              partitionedAsks.getOpportunistic(), appAttemptId, oppCtx,\n+              ResourceManager.getClusterTimeStamp(), appAttempt.getUser());\n \n-    List\u003cContainer\u003e oppContainers \u003d\n-        oppContainerAllocator.allocateContainers(\n-            request.getResourceBlacklistRequest(),\n-            partitionedAsks.getOpportunistic(), appAttemptId, oppCtx,\n-            ResourceManager.getClusterTimeStamp(), appAttempt.getUser());\n+      // Create RMContainers and update the NMTokens.\n+      if (!oppContainers.isEmpty()) {\n+        handleNewContainers(oppContainers, false);\n+        appAttempt.updateNMTokens(oppContainers);\n+      }\n \n-    // Create RMContainers and update the NMTokens.\n-    if (!oppContainers.isEmpty()) {\n-      handleNewContainers(oppContainers, false);\n-      appAttempt.updateNMTokens(oppContainers);\n-      addToAllocatedContainers(allocateResponse, oppContainers);\n-    }\n+      // Allocate GUARANTEED containers.\n+      request.setAskList(partitionedAsks.getGuaranteed());\n \n-    // Allocate GUARANTEED containers.\n-    request.setAskList(partitionedAsks.getGuaranteed());\n-\n-    super.allocateInternal(appAttemptId, request, allocateResponse);\n-  }\n\\ No newline at end of file\n+      AllocateResponse response \u003d super.allocate(appAttemptId, request);\n+      if (!oppContainers.isEmpty()) {\n+        ApplicationMasterServiceUtils.addToAllocatedContainers(\n+            response, oppContainers);\n+      }\n+      return response;\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    public AllocateResponse allocate(ApplicationAttemptId appAttemptId,\n        AllocateRequest request) throws YarnException {\n      // Partition requests to GUARANTEED and OPPORTUNISTIC.\n      OpportunisticContainerAllocator.PartitionedResourceRequests\n          partitionedAsks \u003d\n          oppContainerAllocator.partitionAskList(request.getAskList());\n\n      // Allocate OPPORTUNISTIC containers.\n      SchedulerApplicationAttempt appAttempt \u003d\n          ((AbstractYarnScheduler)rmContext.getScheduler())\n              .getApplicationAttempt(appAttemptId);\n\n      OpportunisticContainerContext oppCtx \u003d\n          appAttempt.getOpportunisticContainerContext();\n      oppCtx.updateNodeList(getLeastLoadedNodes());\n\n      List\u003cContainer\u003e oppContainers \u003d\n          oppContainerAllocator.allocateContainers(\n              request.getResourceBlacklistRequest(),\n              partitionedAsks.getOpportunistic(), appAttemptId, oppCtx,\n              ResourceManager.getClusterTimeStamp(), appAttempt.getUser());\n\n      // Create RMContainers and update the NMTokens.\n      if (!oppContainers.isEmpty()) {\n        handleNewContainers(oppContainers, false);\n        appAttempt.updateNMTokens(oppContainers);\n      }\n\n      // Allocate GUARANTEED containers.\n      request.setAskList(partitionedAsks.getGuaranteed());\n\n      AllocateResponse response \u003d super.allocate(appAttemptId, request);\n      if (!oppContainers.isEmpty()) {\n        ApplicationMasterServiceUtils.addToAllocatedContainers(\n            response, oppContainers);\n      }\n      return response;\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "AllocateResponse"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-6776. Refactor ApplicaitonMasterService to move actual processing logic to a separate class. (asuresh)\n",
          "commitDate": "10/07/17 2:34 PM",
          "commitName": "5496a34c0cb2b1a83cfa6b0aba5a77b05ff2d8f0",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "10/07/17 3:53 AM",
          "commitNameOld": "09653ea098a17fddcf111b0da289085915c351d1",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 0.45,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,38 @@\n-  protected void allocateInternal(ApplicationAttemptId appAttemptId,\n-      AllocateRequest request, AllocateResponse allocateResponse)\n-      throws YarnException {\n+    public AllocateResponse allocate(ApplicationAttemptId appAttemptId,\n+        AllocateRequest request) throws YarnException {\n+      // Partition requests to GUARANTEED and OPPORTUNISTIC.\n+      OpportunisticContainerAllocator.PartitionedResourceRequests\n+          partitionedAsks \u003d\n+          oppContainerAllocator.partitionAskList(request.getAskList());\n \n-    // Partition requests to GUARANTEED and OPPORTUNISTIC.\n-    OpportunisticContainerAllocator.PartitionedResourceRequests\n-        partitionedAsks \u003d\n-        oppContainerAllocator.partitionAskList(request.getAskList());\n+      // Allocate OPPORTUNISTIC containers.\n+      SchedulerApplicationAttempt appAttempt \u003d\n+          ((AbstractYarnScheduler)rmContext.getScheduler())\n+              .getApplicationAttempt(appAttemptId);\n \n-    // Allocate OPPORTUNISTIC containers.\n-    SchedulerApplicationAttempt appAttempt \u003d\n-        ((AbstractYarnScheduler)rmContext.getScheduler())\n-            .getApplicationAttempt(appAttemptId);\n+      OpportunisticContainerContext oppCtx \u003d\n+          appAttempt.getOpportunisticContainerContext();\n+      oppCtx.updateNodeList(getLeastLoadedNodes());\n \n-    OpportunisticContainerContext oppCtx \u003d\n-        appAttempt.getOpportunisticContainerContext();\n-    oppCtx.updateNodeList(getLeastLoadedNodes());\n+      List\u003cContainer\u003e oppContainers \u003d\n+          oppContainerAllocator.allocateContainers(\n+              request.getResourceBlacklistRequest(),\n+              partitionedAsks.getOpportunistic(), appAttemptId, oppCtx,\n+              ResourceManager.getClusterTimeStamp(), appAttempt.getUser());\n \n-    List\u003cContainer\u003e oppContainers \u003d\n-        oppContainerAllocator.allocateContainers(\n-            request.getResourceBlacklistRequest(),\n-            partitionedAsks.getOpportunistic(), appAttemptId, oppCtx,\n-            ResourceManager.getClusterTimeStamp(), appAttempt.getUser());\n+      // Create RMContainers and update the NMTokens.\n+      if (!oppContainers.isEmpty()) {\n+        handleNewContainers(oppContainers, false);\n+        appAttempt.updateNMTokens(oppContainers);\n+      }\n \n-    // Create RMContainers and update the NMTokens.\n-    if (!oppContainers.isEmpty()) {\n-      handleNewContainers(oppContainers, false);\n-      appAttempt.updateNMTokens(oppContainers);\n-      addToAllocatedContainers(allocateResponse, oppContainers);\n-    }\n+      // Allocate GUARANTEED containers.\n+      request.setAskList(partitionedAsks.getGuaranteed());\n \n-    // Allocate GUARANTEED containers.\n-    request.setAskList(partitionedAsks.getGuaranteed());\n-\n-    super.allocateInternal(appAttemptId, request, allocateResponse);\n-  }\n\\ No newline at end of file\n+      AllocateResponse response \u003d super.allocate(appAttemptId, request);\n+      if (!oppContainers.isEmpty()) {\n+        ApplicationMasterServiceUtils.addToAllocatedContainers(\n+            response, oppContainers);\n+      }\n+      return response;\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    public AllocateResponse allocate(ApplicationAttemptId appAttemptId,\n        AllocateRequest request) throws YarnException {\n      // Partition requests to GUARANTEED and OPPORTUNISTIC.\n      OpportunisticContainerAllocator.PartitionedResourceRequests\n          partitionedAsks \u003d\n          oppContainerAllocator.partitionAskList(request.getAskList());\n\n      // Allocate OPPORTUNISTIC containers.\n      SchedulerApplicationAttempt appAttempt \u003d\n          ((AbstractYarnScheduler)rmContext.getScheduler())\n              .getApplicationAttempt(appAttemptId);\n\n      OpportunisticContainerContext oppCtx \u003d\n          appAttempt.getOpportunisticContainerContext();\n      oppCtx.updateNodeList(getLeastLoadedNodes());\n\n      List\u003cContainer\u003e oppContainers \u003d\n          oppContainerAllocator.allocateContainers(\n              request.getResourceBlacklistRequest(),\n              partitionedAsks.getOpportunistic(), appAttemptId, oppCtx,\n              ResourceManager.getClusterTimeStamp(), appAttempt.getUser());\n\n      // Create RMContainers and update the NMTokens.\n      if (!oppContainers.isEmpty()) {\n        handleNewContainers(oppContainers, false);\n        appAttempt.updateNMTokens(oppContainers);\n      }\n\n      // Allocate GUARANTEED containers.\n      request.setAskList(partitionedAsks.getGuaranteed());\n\n      AllocateResponse response \u003d super.allocate(appAttemptId, request);\n      if (!oppContainers.isEmpty()) {\n        ApplicationMasterServiceUtils.addToAllocatedContainers(\n            response, oppContainers);\n      }\n      return response;\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
          "extendedDetails": {
            "oldValue": "[protected]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6776. Refactor ApplicaitonMasterService to move actual processing logic to a separate class. (asuresh)\n",
          "commitDate": "10/07/17 2:34 PM",
          "commitName": "5496a34c0cb2b1a83cfa6b0aba5a77b05ff2d8f0",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "10/07/17 3:53 AM",
          "commitNameOld": "09653ea098a17fddcf111b0da289085915c351d1",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 0.45,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,38 @@\n-  protected void allocateInternal(ApplicationAttemptId appAttemptId,\n-      AllocateRequest request, AllocateResponse allocateResponse)\n-      throws YarnException {\n+    public AllocateResponse allocate(ApplicationAttemptId appAttemptId,\n+        AllocateRequest request) throws YarnException {\n+      // Partition requests to GUARANTEED and OPPORTUNISTIC.\n+      OpportunisticContainerAllocator.PartitionedResourceRequests\n+          partitionedAsks \u003d\n+          oppContainerAllocator.partitionAskList(request.getAskList());\n \n-    // Partition requests to GUARANTEED and OPPORTUNISTIC.\n-    OpportunisticContainerAllocator.PartitionedResourceRequests\n-        partitionedAsks \u003d\n-        oppContainerAllocator.partitionAskList(request.getAskList());\n+      // Allocate OPPORTUNISTIC containers.\n+      SchedulerApplicationAttempt appAttempt \u003d\n+          ((AbstractYarnScheduler)rmContext.getScheduler())\n+              .getApplicationAttempt(appAttemptId);\n \n-    // Allocate OPPORTUNISTIC containers.\n-    SchedulerApplicationAttempt appAttempt \u003d\n-        ((AbstractYarnScheduler)rmContext.getScheduler())\n-            .getApplicationAttempt(appAttemptId);\n+      OpportunisticContainerContext oppCtx \u003d\n+          appAttempt.getOpportunisticContainerContext();\n+      oppCtx.updateNodeList(getLeastLoadedNodes());\n \n-    OpportunisticContainerContext oppCtx \u003d\n-        appAttempt.getOpportunisticContainerContext();\n-    oppCtx.updateNodeList(getLeastLoadedNodes());\n+      List\u003cContainer\u003e oppContainers \u003d\n+          oppContainerAllocator.allocateContainers(\n+              request.getResourceBlacklistRequest(),\n+              partitionedAsks.getOpportunistic(), appAttemptId, oppCtx,\n+              ResourceManager.getClusterTimeStamp(), appAttempt.getUser());\n \n-    List\u003cContainer\u003e oppContainers \u003d\n-        oppContainerAllocator.allocateContainers(\n-            request.getResourceBlacklistRequest(),\n-            partitionedAsks.getOpportunistic(), appAttemptId, oppCtx,\n-            ResourceManager.getClusterTimeStamp(), appAttempt.getUser());\n+      // Create RMContainers and update the NMTokens.\n+      if (!oppContainers.isEmpty()) {\n+        handleNewContainers(oppContainers, false);\n+        appAttempt.updateNMTokens(oppContainers);\n+      }\n \n-    // Create RMContainers and update the NMTokens.\n-    if (!oppContainers.isEmpty()) {\n-      handleNewContainers(oppContainers, false);\n-      appAttempt.updateNMTokens(oppContainers);\n-      addToAllocatedContainers(allocateResponse, oppContainers);\n-    }\n+      // Allocate GUARANTEED containers.\n+      request.setAskList(partitionedAsks.getGuaranteed());\n \n-    // Allocate GUARANTEED containers.\n-    request.setAskList(partitionedAsks.getGuaranteed());\n-\n-    super.allocateInternal(appAttemptId, request, allocateResponse);\n-  }\n\\ No newline at end of file\n+      AllocateResponse response \u003d super.allocate(appAttemptId, request);\n+      if (!oppContainers.isEmpty()) {\n+        ApplicationMasterServiceUtils.addToAllocatedContainers(\n+            response, oppContainers);\n+      }\n+      return response;\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    public AllocateResponse allocate(ApplicationAttemptId appAttemptId,\n        AllocateRequest request) throws YarnException {\n      // Partition requests to GUARANTEED and OPPORTUNISTIC.\n      OpportunisticContainerAllocator.PartitionedResourceRequests\n          partitionedAsks \u003d\n          oppContainerAllocator.partitionAskList(request.getAskList());\n\n      // Allocate OPPORTUNISTIC containers.\n      SchedulerApplicationAttempt appAttempt \u003d\n          ((AbstractYarnScheduler)rmContext.getScheduler())\n              .getApplicationAttempt(appAttemptId);\n\n      OpportunisticContainerContext oppCtx \u003d\n          appAttempt.getOpportunisticContainerContext();\n      oppCtx.updateNodeList(getLeastLoadedNodes());\n\n      List\u003cContainer\u003e oppContainers \u003d\n          oppContainerAllocator.allocateContainers(\n              request.getResourceBlacklistRequest(),\n              partitionedAsks.getOpportunistic(), appAttemptId, oppCtx,\n              ResourceManager.getClusterTimeStamp(), appAttempt.getUser());\n\n      // Create RMContainers and update the NMTokens.\n      if (!oppContainers.isEmpty()) {\n        handleNewContainers(oppContainers, false);\n        appAttempt.updateNMTokens(oppContainers);\n      }\n\n      // Allocate GUARANTEED containers.\n      request.setAskList(partitionedAsks.getGuaranteed());\n\n      AllocateResponse response \u003d super.allocate(appAttemptId, request);\n      if (!oppContainers.isEmpty()) {\n        ApplicationMasterServiceUtils.addToAllocatedContainers(\n            response, oppContainers);\n      }\n      return response;\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
          "extendedDetails": {}
        },
        {
          "type": "Yrename",
          "commitMessage": "YARN-6776. Refactor ApplicaitonMasterService to move actual processing logic to a separate class. (asuresh)\n",
          "commitDate": "10/07/17 2:34 PM",
          "commitName": "5496a34c0cb2b1a83cfa6b0aba5a77b05ff2d8f0",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "10/07/17 3:53 AM",
          "commitNameOld": "09653ea098a17fddcf111b0da289085915c351d1",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 0.45,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,38 @@\n-  protected void allocateInternal(ApplicationAttemptId appAttemptId,\n-      AllocateRequest request, AllocateResponse allocateResponse)\n-      throws YarnException {\n+    public AllocateResponse allocate(ApplicationAttemptId appAttemptId,\n+        AllocateRequest request) throws YarnException {\n+      // Partition requests to GUARANTEED and OPPORTUNISTIC.\n+      OpportunisticContainerAllocator.PartitionedResourceRequests\n+          partitionedAsks \u003d\n+          oppContainerAllocator.partitionAskList(request.getAskList());\n \n-    // Partition requests to GUARANTEED and OPPORTUNISTIC.\n-    OpportunisticContainerAllocator.PartitionedResourceRequests\n-        partitionedAsks \u003d\n-        oppContainerAllocator.partitionAskList(request.getAskList());\n+      // Allocate OPPORTUNISTIC containers.\n+      SchedulerApplicationAttempt appAttempt \u003d\n+          ((AbstractYarnScheduler)rmContext.getScheduler())\n+              .getApplicationAttempt(appAttemptId);\n \n-    // Allocate OPPORTUNISTIC containers.\n-    SchedulerApplicationAttempt appAttempt \u003d\n-        ((AbstractYarnScheduler)rmContext.getScheduler())\n-            .getApplicationAttempt(appAttemptId);\n+      OpportunisticContainerContext oppCtx \u003d\n+          appAttempt.getOpportunisticContainerContext();\n+      oppCtx.updateNodeList(getLeastLoadedNodes());\n \n-    OpportunisticContainerContext oppCtx \u003d\n-        appAttempt.getOpportunisticContainerContext();\n-    oppCtx.updateNodeList(getLeastLoadedNodes());\n+      List\u003cContainer\u003e oppContainers \u003d\n+          oppContainerAllocator.allocateContainers(\n+              request.getResourceBlacklistRequest(),\n+              partitionedAsks.getOpportunistic(), appAttemptId, oppCtx,\n+              ResourceManager.getClusterTimeStamp(), appAttempt.getUser());\n \n-    List\u003cContainer\u003e oppContainers \u003d\n-        oppContainerAllocator.allocateContainers(\n-            request.getResourceBlacklistRequest(),\n-            partitionedAsks.getOpportunistic(), appAttemptId, oppCtx,\n-            ResourceManager.getClusterTimeStamp(), appAttempt.getUser());\n+      // Create RMContainers and update the NMTokens.\n+      if (!oppContainers.isEmpty()) {\n+        handleNewContainers(oppContainers, false);\n+        appAttempt.updateNMTokens(oppContainers);\n+      }\n \n-    // Create RMContainers and update the NMTokens.\n-    if (!oppContainers.isEmpty()) {\n-      handleNewContainers(oppContainers, false);\n-      appAttempt.updateNMTokens(oppContainers);\n-      addToAllocatedContainers(allocateResponse, oppContainers);\n-    }\n+      // Allocate GUARANTEED containers.\n+      request.setAskList(partitionedAsks.getGuaranteed());\n \n-    // Allocate GUARANTEED containers.\n-    request.setAskList(partitionedAsks.getGuaranteed());\n-\n-    super.allocateInternal(appAttemptId, request, allocateResponse);\n-  }\n\\ No newline at end of file\n+      AllocateResponse response \u003d super.allocate(appAttemptId, request);\n+      if (!oppContainers.isEmpty()) {\n+        ApplicationMasterServiceUtils.addToAllocatedContainers(\n+            response, oppContainers);\n+      }\n+      return response;\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    public AllocateResponse allocate(ApplicationAttemptId appAttemptId,\n        AllocateRequest request) throws YarnException {\n      // Partition requests to GUARANTEED and OPPORTUNISTIC.\n      OpportunisticContainerAllocator.PartitionedResourceRequests\n          partitionedAsks \u003d\n          oppContainerAllocator.partitionAskList(request.getAskList());\n\n      // Allocate OPPORTUNISTIC containers.\n      SchedulerApplicationAttempt appAttempt \u003d\n          ((AbstractYarnScheduler)rmContext.getScheduler())\n              .getApplicationAttempt(appAttemptId);\n\n      OpportunisticContainerContext oppCtx \u003d\n          appAttempt.getOpportunisticContainerContext();\n      oppCtx.updateNodeList(getLeastLoadedNodes());\n\n      List\u003cContainer\u003e oppContainers \u003d\n          oppContainerAllocator.allocateContainers(\n              request.getResourceBlacklistRequest(),\n              partitionedAsks.getOpportunistic(), appAttemptId, oppCtx,\n              ResourceManager.getClusterTimeStamp(), appAttempt.getUser());\n\n      // Create RMContainers and update the NMTokens.\n      if (!oppContainers.isEmpty()) {\n        handleNewContainers(oppContainers, false);\n        appAttempt.updateNMTokens(oppContainers);\n      }\n\n      // Allocate GUARANTEED containers.\n      request.setAskList(partitionedAsks.getGuaranteed());\n\n      AllocateResponse response \u003d super.allocate(appAttemptId, request);\n      if (!oppContainers.isEmpty()) {\n        ApplicationMasterServiceUtils.addToAllocatedContainers(\n            response, oppContainers);\n      }\n      return response;\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
          "extendedDetails": {
            "oldValue": "allocateInternal",
            "newValue": "allocate"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6776. Refactor ApplicaitonMasterService to move actual processing logic to a separate class. (asuresh)\n",
          "commitDate": "10/07/17 2:34 PM",
          "commitName": "5496a34c0cb2b1a83cfa6b0aba5a77b05ff2d8f0",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "10/07/17 3:53 AM",
          "commitNameOld": "09653ea098a17fddcf111b0da289085915c351d1",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 0.45,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,38 @@\n-  protected void allocateInternal(ApplicationAttemptId appAttemptId,\n-      AllocateRequest request, AllocateResponse allocateResponse)\n-      throws YarnException {\n+    public AllocateResponse allocate(ApplicationAttemptId appAttemptId,\n+        AllocateRequest request) throws YarnException {\n+      // Partition requests to GUARANTEED and OPPORTUNISTIC.\n+      OpportunisticContainerAllocator.PartitionedResourceRequests\n+          partitionedAsks \u003d\n+          oppContainerAllocator.partitionAskList(request.getAskList());\n \n-    // Partition requests to GUARANTEED and OPPORTUNISTIC.\n-    OpportunisticContainerAllocator.PartitionedResourceRequests\n-        partitionedAsks \u003d\n-        oppContainerAllocator.partitionAskList(request.getAskList());\n+      // Allocate OPPORTUNISTIC containers.\n+      SchedulerApplicationAttempt appAttempt \u003d\n+          ((AbstractYarnScheduler)rmContext.getScheduler())\n+              .getApplicationAttempt(appAttemptId);\n \n-    // Allocate OPPORTUNISTIC containers.\n-    SchedulerApplicationAttempt appAttempt \u003d\n-        ((AbstractYarnScheduler)rmContext.getScheduler())\n-            .getApplicationAttempt(appAttemptId);\n+      OpportunisticContainerContext oppCtx \u003d\n+          appAttempt.getOpportunisticContainerContext();\n+      oppCtx.updateNodeList(getLeastLoadedNodes());\n \n-    OpportunisticContainerContext oppCtx \u003d\n-        appAttempt.getOpportunisticContainerContext();\n-    oppCtx.updateNodeList(getLeastLoadedNodes());\n+      List\u003cContainer\u003e oppContainers \u003d\n+          oppContainerAllocator.allocateContainers(\n+              request.getResourceBlacklistRequest(),\n+              partitionedAsks.getOpportunistic(), appAttemptId, oppCtx,\n+              ResourceManager.getClusterTimeStamp(), appAttempt.getUser());\n \n-    List\u003cContainer\u003e oppContainers \u003d\n-        oppContainerAllocator.allocateContainers(\n-            request.getResourceBlacklistRequest(),\n-            partitionedAsks.getOpportunistic(), appAttemptId, oppCtx,\n-            ResourceManager.getClusterTimeStamp(), appAttempt.getUser());\n+      // Create RMContainers and update the NMTokens.\n+      if (!oppContainers.isEmpty()) {\n+        handleNewContainers(oppContainers, false);\n+        appAttempt.updateNMTokens(oppContainers);\n+      }\n \n-    // Create RMContainers and update the NMTokens.\n-    if (!oppContainers.isEmpty()) {\n-      handleNewContainers(oppContainers, false);\n-      appAttempt.updateNMTokens(oppContainers);\n-      addToAllocatedContainers(allocateResponse, oppContainers);\n-    }\n+      // Allocate GUARANTEED containers.\n+      request.setAskList(partitionedAsks.getGuaranteed());\n \n-    // Allocate GUARANTEED containers.\n-    request.setAskList(partitionedAsks.getGuaranteed());\n-\n-    super.allocateInternal(appAttemptId, request, allocateResponse);\n-  }\n\\ No newline at end of file\n+      AllocateResponse response \u003d super.allocate(appAttemptId, request);\n+      if (!oppContainers.isEmpty()) {\n+        ApplicationMasterServiceUtils.addToAllocatedContainers(\n+            response, oppContainers);\n+      }\n+      return response;\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    public AllocateResponse allocate(ApplicationAttemptId appAttemptId,\n        AllocateRequest request) throws YarnException {\n      // Partition requests to GUARANTEED and OPPORTUNISTIC.\n      OpportunisticContainerAllocator.PartitionedResourceRequests\n          partitionedAsks \u003d\n          oppContainerAllocator.partitionAskList(request.getAskList());\n\n      // Allocate OPPORTUNISTIC containers.\n      SchedulerApplicationAttempt appAttempt \u003d\n          ((AbstractYarnScheduler)rmContext.getScheduler())\n              .getApplicationAttempt(appAttemptId);\n\n      OpportunisticContainerContext oppCtx \u003d\n          appAttempt.getOpportunisticContainerContext();\n      oppCtx.updateNodeList(getLeastLoadedNodes());\n\n      List\u003cContainer\u003e oppContainers \u003d\n          oppContainerAllocator.allocateContainers(\n              request.getResourceBlacklistRequest(),\n              partitionedAsks.getOpportunistic(), appAttemptId, oppCtx,\n              ResourceManager.getClusterTimeStamp(), appAttempt.getUser());\n\n      // Create RMContainers and update the NMTokens.\n      if (!oppContainers.isEmpty()) {\n        handleNewContainers(oppContainers, false);\n        appAttempt.updateNMTokens(oppContainers);\n      }\n\n      // Allocate GUARANTEED containers.\n      request.setAskList(partitionedAsks.getGuaranteed());\n\n      AllocateResponse response \u003d super.allocate(appAttemptId, request);\n      if (!oppContainers.isEmpty()) {\n        ApplicationMasterServiceUtils.addToAllocatedContainers(\n            response, oppContainers);\n      }\n      return response;\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
          "extendedDetails": {
            "oldValue": "[appAttemptId-ApplicationAttemptId, request-AllocateRequest, allocateResponse-AllocateResponse]",
            "newValue": "[appAttemptId-ApplicationAttemptId, request-AllocateRequest]"
          }
        }
      ]
    },
    "ac1e5d4f77e3b9df8dcacb0b1f72eecc27931eb8": {
      "type": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ymodifierchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-5938. Refactoring OpportunisticContainerAllocator to use SchedulerRequestKey instead of Priority and other misc fixes (asuresh)\n",
      "commitDate": "27/12/16 12:40 PM",
      "commitName": "ac1e5d4f77e3b9df8dcacb0b1f72eecc27931eb8",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-5938. Refactoring OpportunisticContainerAllocator to use SchedulerRequestKey instead of Priority and other misc fixes (asuresh)\n",
          "commitDate": "27/12/16 12:40 PM",
          "commitName": "ac1e5d4f77e3b9df8dcacb0b1f72eecc27931eb8",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "16/12/16 8:14 AM",
          "commitNameOld": "2273a74c1f3895163046cca09ff5e983df301d22",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 11.18,
          "commitsBetweenForRepo": 36,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,35 @@\n-  public AllocateResponse allocate(AllocateRequest request) throws\n-      YarnException, IOException {\n+  protected void allocateInternal(ApplicationAttemptId appAttemptId,\n+      AllocateRequest request, AllocateResponse allocateResponse)\n+      throws YarnException {\n \n     // Partition requests to GUARANTEED and OPPORTUNISTIC.\n     OpportunisticContainerAllocator.PartitionedResourceRequests\n         partitionedAsks \u003d\n         oppContainerAllocator.partitionAskList(request.getAskList());\n \n     // Allocate OPPORTUNISTIC containers.\n-    request.setAskList(partitionedAsks.getOpportunistic());\n-    final ApplicationAttemptId appAttemptId \u003d getAppAttemptId();\n-    SchedulerApplicationAttempt appAttempt \u003d ((AbstractYarnScheduler)\n-        rmContext.getScheduler()).getApplicationAttempt(appAttemptId);\n+    SchedulerApplicationAttempt appAttempt \u003d\n+        ((AbstractYarnScheduler)rmContext.getScheduler())\n+            .getApplicationAttempt(appAttemptId);\n \n     OpportunisticContainerContext oppCtx \u003d\n         appAttempt.getOpportunisticContainerContext();\n     oppCtx.updateNodeList(getLeastLoadedNodes());\n \n     List\u003cContainer\u003e oppContainers \u003d\n-        oppContainerAllocator.allocateContainers(request, appAttemptId, oppCtx,\n-        ResourceManager.getClusterTimeStamp(), appAttempt.getUser());\n+        oppContainerAllocator.allocateContainers(\n+            request.getResourceBlacklistRequest(),\n+            partitionedAsks.getOpportunistic(), appAttemptId, oppCtx,\n+            ResourceManager.getClusterTimeStamp(), appAttempt.getUser());\n \n     // Create RMContainers and update the NMTokens.\n     if (!oppContainers.isEmpty()) {\n       handleNewContainers(oppContainers, false);\n       appAttempt.updateNMTokens(oppContainers);\n+      addToAllocatedContainers(allocateResponse, oppContainers);\n     }\n \n     // Allocate GUARANTEED containers.\n     request.setAskList(partitionedAsks.getGuaranteed());\n-    AllocateResponse allocateResp \u003d super.allocate(request);\n-\n-    // Add allocated OPPORTUNISTIC containers to the AllocateResponse.\n-    if (!oppContainers.isEmpty()) {\n-      allocateResp.getAllocatedContainers().addAll(oppContainers);\n-    }\n-\n-    // Update opportunistic container context with the allocated GUARANTEED\n-    // containers.\n-    oppCtx.updateCompletedContainers(allocateResp);\n-\n-    // Add all opportunistic containers\n-    return allocateResp;\n+    super.allocateInternal(appAttemptId, request, allocateResponse);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void allocateInternal(ApplicationAttemptId appAttemptId,\n      AllocateRequest request, AllocateResponse allocateResponse)\n      throws YarnException {\n\n    // Partition requests to GUARANTEED and OPPORTUNISTIC.\n    OpportunisticContainerAllocator.PartitionedResourceRequests\n        partitionedAsks \u003d\n        oppContainerAllocator.partitionAskList(request.getAskList());\n\n    // Allocate OPPORTUNISTIC containers.\n    SchedulerApplicationAttempt appAttempt \u003d\n        ((AbstractYarnScheduler)rmContext.getScheduler())\n            .getApplicationAttempt(appAttemptId);\n\n    OpportunisticContainerContext oppCtx \u003d\n        appAttempt.getOpportunisticContainerContext();\n    oppCtx.updateNodeList(getLeastLoadedNodes());\n\n    List\u003cContainer\u003e oppContainers \u003d\n        oppContainerAllocator.allocateContainers(\n            request.getResourceBlacklistRequest(),\n            partitionedAsks.getOpportunistic(), appAttemptId, oppCtx,\n            ResourceManager.getClusterTimeStamp(), appAttempt.getUser());\n\n    // Create RMContainers and update the NMTokens.\n    if (!oppContainers.isEmpty()) {\n      handleNewContainers(oppContainers, false);\n      appAttempt.updateNMTokens(oppContainers);\n      addToAllocatedContainers(allocateResponse, oppContainers);\n    }\n\n    // Allocate GUARANTEED containers.\n    request.setAskList(partitionedAsks.getGuaranteed());\n    super.allocateInternal(appAttemptId, request, allocateResponse);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
          "extendedDetails": {
            "oldValue": "allocate",
            "newValue": "allocateInternal"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5938. Refactoring OpportunisticContainerAllocator to use SchedulerRequestKey instead of Priority and other misc fixes (asuresh)\n",
          "commitDate": "27/12/16 12:40 PM",
          "commitName": "ac1e5d4f77e3b9df8dcacb0b1f72eecc27931eb8",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "16/12/16 8:14 AM",
          "commitNameOld": "2273a74c1f3895163046cca09ff5e983df301d22",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 11.18,
          "commitsBetweenForRepo": 36,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,35 @@\n-  public AllocateResponse allocate(AllocateRequest request) throws\n-      YarnException, IOException {\n+  protected void allocateInternal(ApplicationAttemptId appAttemptId,\n+      AllocateRequest request, AllocateResponse allocateResponse)\n+      throws YarnException {\n \n     // Partition requests to GUARANTEED and OPPORTUNISTIC.\n     OpportunisticContainerAllocator.PartitionedResourceRequests\n         partitionedAsks \u003d\n         oppContainerAllocator.partitionAskList(request.getAskList());\n \n     // Allocate OPPORTUNISTIC containers.\n-    request.setAskList(partitionedAsks.getOpportunistic());\n-    final ApplicationAttemptId appAttemptId \u003d getAppAttemptId();\n-    SchedulerApplicationAttempt appAttempt \u003d ((AbstractYarnScheduler)\n-        rmContext.getScheduler()).getApplicationAttempt(appAttemptId);\n+    SchedulerApplicationAttempt appAttempt \u003d\n+        ((AbstractYarnScheduler)rmContext.getScheduler())\n+            .getApplicationAttempt(appAttemptId);\n \n     OpportunisticContainerContext oppCtx \u003d\n         appAttempt.getOpportunisticContainerContext();\n     oppCtx.updateNodeList(getLeastLoadedNodes());\n \n     List\u003cContainer\u003e oppContainers \u003d\n-        oppContainerAllocator.allocateContainers(request, appAttemptId, oppCtx,\n-        ResourceManager.getClusterTimeStamp(), appAttempt.getUser());\n+        oppContainerAllocator.allocateContainers(\n+            request.getResourceBlacklistRequest(),\n+            partitionedAsks.getOpportunistic(), appAttemptId, oppCtx,\n+            ResourceManager.getClusterTimeStamp(), appAttempt.getUser());\n \n     // Create RMContainers and update the NMTokens.\n     if (!oppContainers.isEmpty()) {\n       handleNewContainers(oppContainers, false);\n       appAttempt.updateNMTokens(oppContainers);\n+      addToAllocatedContainers(allocateResponse, oppContainers);\n     }\n \n     // Allocate GUARANTEED containers.\n     request.setAskList(partitionedAsks.getGuaranteed());\n-    AllocateResponse allocateResp \u003d super.allocate(request);\n-\n-    // Add allocated OPPORTUNISTIC containers to the AllocateResponse.\n-    if (!oppContainers.isEmpty()) {\n-      allocateResp.getAllocatedContainers().addAll(oppContainers);\n-    }\n-\n-    // Update opportunistic container context with the allocated GUARANTEED\n-    // containers.\n-    oppCtx.updateCompletedContainers(allocateResp);\n-\n-    // Add all opportunistic containers\n-    return allocateResp;\n+    super.allocateInternal(appAttemptId, request, allocateResponse);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void allocateInternal(ApplicationAttemptId appAttemptId,\n      AllocateRequest request, AllocateResponse allocateResponse)\n      throws YarnException {\n\n    // Partition requests to GUARANTEED and OPPORTUNISTIC.\n    OpportunisticContainerAllocator.PartitionedResourceRequests\n        partitionedAsks \u003d\n        oppContainerAllocator.partitionAskList(request.getAskList());\n\n    // Allocate OPPORTUNISTIC containers.\n    SchedulerApplicationAttempt appAttempt \u003d\n        ((AbstractYarnScheduler)rmContext.getScheduler())\n            .getApplicationAttempt(appAttemptId);\n\n    OpportunisticContainerContext oppCtx \u003d\n        appAttempt.getOpportunisticContainerContext();\n    oppCtx.updateNodeList(getLeastLoadedNodes());\n\n    List\u003cContainer\u003e oppContainers \u003d\n        oppContainerAllocator.allocateContainers(\n            request.getResourceBlacklistRequest(),\n            partitionedAsks.getOpportunistic(), appAttemptId, oppCtx,\n            ResourceManager.getClusterTimeStamp(), appAttempt.getUser());\n\n    // Create RMContainers and update the NMTokens.\n    if (!oppContainers.isEmpty()) {\n      handleNewContainers(oppContainers, false);\n      appAttempt.updateNMTokens(oppContainers);\n      addToAllocatedContainers(allocateResponse, oppContainers);\n    }\n\n    // Allocate GUARANTEED containers.\n    request.setAskList(partitionedAsks.getGuaranteed());\n    super.allocateInternal(appAttemptId, request, allocateResponse);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
          "extendedDetails": {
            "oldValue": "[request-AllocateRequest]",
            "newValue": "[appAttemptId-ApplicationAttemptId, request-AllocateRequest, allocateResponse-AllocateResponse]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-5938. Refactoring OpportunisticContainerAllocator to use SchedulerRequestKey instead of Priority and other misc fixes (asuresh)\n",
          "commitDate": "27/12/16 12:40 PM",
          "commitName": "ac1e5d4f77e3b9df8dcacb0b1f72eecc27931eb8",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "16/12/16 8:14 AM",
          "commitNameOld": "2273a74c1f3895163046cca09ff5e983df301d22",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 11.18,
          "commitsBetweenForRepo": 36,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,35 @@\n-  public AllocateResponse allocate(AllocateRequest request) throws\n-      YarnException, IOException {\n+  protected void allocateInternal(ApplicationAttemptId appAttemptId,\n+      AllocateRequest request, AllocateResponse allocateResponse)\n+      throws YarnException {\n \n     // Partition requests to GUARANTEED and OPPORTUNISTIC.\n     OpportunisticContainerAllocator.PartitionedResourceRequests\n         partitionedAsks \u003d\n         oppContainerAllocator.partitionAskList(request.getAskList());\n \n     // Allocate OPPORTUNISTIC containers.\n-    request.setAskList(partitionedAsks.getOpportunistic());\n-    final ApplicationAttemptId appAttemptId \u003d getAppAttemptId();\n-    SchedulerApplicationAttempt appAttempt \u003d ((AbstractYarnScheduler)\n-        rmContext.getScheduler()).getApplicationAttempt(appAttemptId);\n+    SchedulerApplicationAttempt appAttempt \u003d\n+        ((AbstractYarnScheduler)rmContext.getScheduler())\n+            .getApplicationAttempt(appAttemptId);\n \n     OpportunisticContainerContext oppCtx \u003d\n         appAttempt.getOpportunisticContainerContext();\n     oppCtx.updateNodeList(getLeastLoadedNodes());\n \n     List\u003cContainer\u003e oppContainers \u003d\n-        oppContainerAllocator.allocateContainers(request, appAttemptId, oppCtx,\n-        ResourceManager.getClusterTimeStamp(), appAttempt.getUser());\n+        oppContainerAllocator.allocateContainers(\n+            request.getResourceBlacklistRequest(),\n+            partitionedAsks.getOpportunistic(), appAttemptId, oppCtx,\n+            ResourceManager.getClusterTimeStamp(), appAttempt.getUser());\n \n     // Create RMContainers and update the NMTokens.\n     if (!oppContainers.isEmpty()) {\n       handleNewContainers(oppContainers, false);\n       appAttempt.updateNMTokens(oppContainers);\n+      addToAllocatedContainers(allocateResponse, oppContainers);\n     }\n \n     // Allocate GUARANTEED containers.\n     request.setAskList(partitionedAsks.getGuaranteed());\n-    AllocateResponse allocateResp \u003d super.allocate(request);\n-\n-    // Add allocated OPPORTUNISTIC containers to the AllocateResponse.\n-    if (!oppContainers.isEmpty()) {\n-      allocateResp.getAllocatedContainers().addAll(oppContainers);\n-    }\n-\n-    // Update opportunistic container context with the allocated GUARANTEED\n-    // containers.\n-    oppCtx.updateCompletedContainers(allocateResp);\n-\n-    // Add all opportunistic containers\n-    return allocateResp;\n+    super.allocateInternal(appAttemptId, request, allocateResponse);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void allocateInternal(ApplicationAttemptId appAttemptId,\n      AllocateRequest request, AllocateResponse allocateResponse)\n      throws YarnException {\n\n    // Partition requests to GUARANTEED and OPPORTUNISTIC.\n    OpportunisticContainerAllocator.PartitionedResourceRequests\n        partitionedAsks \u003d\n        oppContainerAllocator.partitionAskList(request.getAskList());\n\n    // Allocate OPPORTUNISTIC containers.\n    SchedulerApplicationAttempt appAttempt \u003d\n        ((AbstractYarnScheduler)rmContext.getScheduler())\n            .getApplicationAttempt(appAttemptId);\n\n    OpportunisticContainerContext oppCtx \u003d\n        appAttempt.getOpportunisticContainerContext();\n    oppCtx.updateNodeList(getLeastLoadedNodes());\n\n    List\u003cContainer\u003e oppContainers \u003d\n        oppContainerAllocator.allocateContainers(\n            request.getResourceBlacklistRequest(),\n            partitionedAsks.getOpportunistic(), appAttemptId, oppCtx,\n            ResourceManager.getClusterTimeStamp(), appAttempt.getUser());\n\n    // Create RMContainers and update the NMTokens.\n    if (!oppContainers.isEmpty()) {\n      handleNewContainers(oppContainers, false);\n      appAttempt.updateNMTokens(oppContainers);\n      addToAllocatedContainers(allocateResponse, oppContainers);\n    }\n\n    // Allocate GUARANTEED containers.\n    request.setAskList(partitionedAsks.getGuaranteed());\n    super.allocateInternal(appAttemptId, request, allocateResponse);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
          "extendedDetails": {
            "oldValue": "AllocateResponse",
            "newValue": "void"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-5938. Refactoring OpportunisticContainerAllocator to use SchedulerRequestKey instead of Priority and other misc fixes (asuresh)\n",
          "commitDate": "27/12/16 12:40 PM",
          "commitName": "ac1e5d4f77e3b9df8dcacb0b1f72eecc27931eb8",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "16/12/16 8:14 AM",
          "commitNameOld": "2273a74c1f3895163046cca09ff5e983df301d22",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 11.18,
          "commitsBetweenForRepo": 36,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,35 @@\n-  public AllocateResponse allocate(AllocateRequest request) throws\n-      YarnException, IOException {\n+  protected void allocateInternal(ApplicationAttemptId appAttemptId,\n+      AllocateRequest request, AllocateResponse allocateResponse)\n+      throws YarnException {\n \n     // Partition requests to GUARANTEED and OPPORTUNISTIC.\n     OpportunisticContainerAllocator.PartitionedResourceRequests\n         partitionedAsks \u003d\n         oppContainerAllocator.partitionAskList(request.getAskList());\n \n     // Allocate OPPORTUNISTIC containers.\n-    request.setAskList(partitionedAsks.getOpportunistic());\n-    final ApplicationAttemptId appAttemptId \u003d getAppAttemptId();\n-    SchedulerApplicationAttempt appAttempt \u003d ((AbstractYarnScheduler)\n-        rmContext.getScheduler()).getApplicationAttempt(appAttemptId);\n+    SchedulerApplicationAttempt appAttempt \u003d\n+        ((AbstractYarnScheduler)rmContext.getScheduler())\n+            .getApplicationAttempt(appAttemptId);\n \n     OpportunisticContainerContext oppCtx \u003d\n         appAttempt.getOpportunisticContainerContext();\n     oppCtx.updateNodeList(getLeastLoadedNodes());\n \n     List\u003cContainer\u003e oppContainers \u003d\n-        oppContainerAllocator.allocateContainers(request, appAttemptId, oppCtx,\n-        ResourceManager.getClusterTimeStamp(), appAttempt.getUser());\n+        oppContainerAllocator.allocateContainers(\n+            request.getResourceBlacklistRequest(),\n+            partitionedAsks.getOpportunistic(), appAttemptId, oppCtx,\n+            ResourceManager.getClusterTimeStamp(), appAttempt.getUser());\n \n     // Create RMContainers and update the NMTokens.\n     if (!oppContainers.isEmpty()) {\n       handleNewContainers(oppContainers, false);\n       appAttempt.updateNMTokens(oppContainers);\n+      addToAllocatedContainers(allocateResponse, oppContainers);\n     }\n \n     // Allocate GUARANTEED containers.\n     request.setAskList(partitionedAsks.getGuaranteed());\n-    AllocateResponse allocateResp \u003d super.allocate(request);\n-\n-    // Add allocated OPPORTUNISTIC containers to the AllocateResponse.\n-    if (!oppContainers.isEmpty()) {\n-      allocateResp.getAllocatedContainers().addAll(oppContainers);\n-    }\n-\n-    // Update opportunistic container context with the allocated GUARANTEED\n-    // containers.\n-    oppCtx.updateCompletedContainers(allocateResp);\n-\n-    // Add all opportunistic containers\n-    return allocateResp;\n+    super.allocateInternal(appAttemptId, request, allocateResponse);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void allocateInternal(ApplicationAttemptId appAttemptId,\n      AllocateRequest request, AllocateResponse allocateResponse)\n      throws YarnException {\n\n    // Partition requests to GUARANTEED and OPPORTUNISTIC.\n    OpportunisticContainerAllocator.PartitionedResourceRequests\n        partitionedAsks \u003d\n        oppContainerAllocator.partitionAskList(request.getAskList());\n\n    // Allocate OPPORTUNISTIC containers.\n    SchedulerApplicationAttempt appAttempt \u003d\n        ((AbstractYarnScheduler)rmContext.getScheduler())\n            .getApplicationAttempt(appAttemptId);\n\n    OpportunisticContainerContext oppCtx \u003d\n        appAttempt.getOpportunisticContainerContext();\n    oppCtx.updateNodeList(getLeastLoadedNodes());\n\n    List\u003cContainer\u003e oppContainers \u003d\n        oppContainerAllocator.allocateContainers(\n            request.getResourceBlacklistRequest(),\n            partitionedAsks.getOpportunistic(), appAttemptId, oppCtx,\n            ResourceManager.getClusterTimeStamp(), appAttempt.getUser());\n\n    // Create RMContainers and update the NMTokens.\n    if (!oppContainers.isEmpty()) {\n      handleNewContainers(oppContainers, false);\n      appAttempt.updateNMTokens(oppContainers);\n      addToAllocatedContainers(allocateResponse, oppContainers);\n    }\n\n    // Allocate GUARANTEED containers.\n    request.setAskList(partitionedAsks.getGuaranteed());\n    super.allocateInternal(appAttemptId, request, allocateResponse);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-5938. Refactoring OpportunisticContainerAllocator to use SchedulerRequestKey instead of Priority and other misc fixes (asuresh)\n",
          "commitDate": "27/12/16 12:40 PM",
          "commitName": "ac1e5d4f77e3b9df8dcacb0b1f72eecc27931eb8",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "16/12/16 8:14 AM",
          "commitNameOld": "2273a74c1f3895163046cca09ff5e983df301d22",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 11.18,
          "commitsBetweenForRepo": 36,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,35 @@\n-  public AllocateResponse allocate(AllocateRequest request) throws\n-      YarnException, IOException {\n+  protected void allocateInternal(ApplicationAttemptId appAttemptId,\n+      AllocateRequest request, AllocateResponse allocateResponse)\n+      throws YarnException {\n \n     // Partition requests to GUARANTEED and OPPORTUNISTIC.\n     OpportunisticContainerAllocator.PartitionedResourceRequests\n         partitionedAsks \u003d\n         oppContainerAllocator.partitionAskList(request.getAskList());\n \n     // Allocate OPPORTUNISTIC containers.\n-    request.setAskList(partitionedAsks.getOpportunistic());\n-    final ApplicationAttemptId appAttemptId \u003d getAppAttemptId();\n-    SchedulerApplicationAttempt appAttempt \u003d ((AbstractYarnScheduler)\n-        rmContext.getScheduler()).getApplicationAttempt(appAttemptId);\n+    SchedulerApplicationAttempt appAttempt \u003d\n+        ((AbstractYarnScheduler)rmContext.getScheduler())\n+            .getApplicationAttempt(appAttemptId);\n \n     OpportunisticContainerContext oppCtx \u003d\n         appAttempt.getOpportunisticContainerContext();\n     oppCtx.updateNodeList(getLeastLoadedNodes());\n \n     List\u003cContainer\u003e oppContainers \u003d\n-        oppContainerAllocator.allocateContainers(request, appAttemptId, oppCtx,\n-        ResourceManager.getClusterTimeStamp(), appAttempt.getUser());\n+        oppContainerAllocator.allocateContainers(\n+            request.getResourceBlacklistRequest(),\n+            partitionedAsks.getOpportunistic(), appAttemptId, oppCtx,\n+            ResourceManager.getClusterTimeStamp(), appAttempt.getUser());\n \n     // Create RMContainers and update the NMTokens.\n     if (!oppContainers.isEmpty()) {\n       handleNewContainers(oppContainers, false);\n       appAttempt.updateNMTokens(oppContainers);\n+      addToAllocatedContainers(allocateResponse, oppContainers);\n     }\n \n     // Allocate GUARANTEED containers.\n     request.setAskList(partitionedAsks.getGuaranteed());\n-    AllocateResponse allocateResp \u003d super.allocate(request);\n-\n-    // Add allocated OPPORTUNISTIC containers to the AllocateResponse.\n-    if (!oppContainers.isEmpty()) {\n-      allocateResp.getAllocatedContainers().addAll(oppContainers);\n-    }\n-\n-    // Update opportunistic container context with the allocated GUARANTEED\n-    // containers.\n-    oppCtx.updateCompletedContainers(allocateResp);\n-\n-    // Add all opportunistic containers\n-    return allocateResp;\n+    super.allocateInternal(appAttemptId, request, allocateResponse);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void allocateInternal(ApplicationAttemptId appAttemptId,\n      AllocateRequest request, AllocateResponse allocateResponse)\n      throws YarnException {\n\n    // Partition requests to GUARANTEED and OPPORTUNISTIC.\n    OpportunisticContainerAllocator.PartitionedResourceRequests\n        partitionedAsks \u003d\n        oppContainerAllocator.partitionAskList(request.getAskList());\n\n    // Allocate OPPORTUNISTIC containers.\n    SchedulerApplicationAttempt appAttempt \u003d\n        ((AbstractYarnScheduler)rmContext.getScheduler())\n            .getApplicationAttempt(appAttemptId);\n\n    OpportunisticContainerContext oppCtx \u003d\n        appAttempt.getOpportunisticContainerContext();\n    oppCtx.updateNodeList(getLeastLoadedNodes());\n\n    List\u003cContainer\u003e oppContainers \u003d\n        oppContainerAllocator.allocateContainers(\n            request.getResourceBlacklistRequest(),\n            partitionedAsks.getOpportunistic(), appAttemptId, oppCtx,\n            ResourceManager.getClusterTimeStamp(), appAttempt.getUser());\n\n    // Create RMContainers and update the NMTokens.\n    if (!oppContainers.isEmpty()) {\n      handleNewContainers(oppContainers, false);\n      appAttempt.updateNMTokens(oppContainers);\n      addToAllocatedContainers(allocateResponse, oppContainers);\n    }\n\n    // Allocate GUARANTEED containers.\n    request.setAskList(partitionedAsks.getGuaranteed());\n    super.allocateInternal(appAttemptId, request, allocateResponse);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
          "extendedDetails": {
            "oldValue": "[YarnException, IOException]",
            "newValue": "[YarnException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5938. Refactoring OpportunisticContainerAllocator to use SchedulerRequestKey instead of Priority and other misc fixes (asuresh)\n",
          "commitDate": "27/12/16 12:40 PM",
          "commitName": "ac1e5d4f77e3b9df8dcacb0b1f72eecc27931eb8",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "16/12/16 8:14 AM",
          "commitNameOld": "2273a74c1f3895163046cca09ff5e983df301d22",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 11.18,
          "commitsBetweenForRepo": 36,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,35 @@\n-  public AllocateResponse allocate(AllocateRequest request) throws\n-      YarnException, IOException {\n+  protected void allocateInternal(ApplicationAttemptId appAttemptId,\n+      AllocateRequest request, AllocateResponse allocateResponse)\n+      throws YarnException {\n \n     // Partition requests to GUARANTEED and OPPORTUNISTIC.\n     OpportunisticContainerAllocator.PartitionedResourceRequests\n         partitionedAsks \u003d\n         oppContainerAllocator.partitionAskList(request.getAskList());\n \n     // Allocate OPPORTUNISTIC containers.\n-    request.setAskList(partitionedAsks.getOpportunistic());\n-    final ApplicationAttemptId appAttemptId \u003d getAppAttemptId();\n-    SchedulerApplicationAttempt appAttempt \u003d ((AbstractYarnScheduler)\n-        rmContext.getScheduler()).getApplicationAttempt(appAttemptId);\n+    SchedulerApplicationAttempt appAttempt \u003d\n+        ((AbstractYarnScheduler)rmContext.getScheduler())\n+            .getApplicationAttempt(appAttemptId);\n \n     OpportunisticContainerContext oppCtx \u003d\n         appAttempt.getOpportunisticContainerContext();\n     oppCtx.updateNodeList(getLeastLoadedNodes());\n \n     List\u003cContainer\u003e oppContainers \u003d\n-        oppContainerAllocator.allocateContainers(request, appAttemptId, oppCtx,\n-        ResourceManager.getClusterTimeStamp(), appAttempt.getUser());\n+        oppContainerAllocator.allocateContainers(\n+            request.getResourceBlacklistRequest(),\n+            partitionedAsks.getOpportunistic(), appAttemptId, oppCtx,\n+            ResourceManager.getClusterTimeStamp(), appAttempt.getUser());\n \n     // Create RMContainers and update the NMTokens.\n     if (!oppContainers.isEmpty()) {\n       handleNewContainers(oppContainers, false);\n       appAttempt.updateNMTokens(oppContainers);\n+      addToAllocatedContainers(allocateResponse, oppContainers);\n     }\n \n     // Allocate GUARANTEED containers.\n     request.setAskList(partitionedAsks.getGuaranteed());\n-    AllocateResponse allocateResp \u003d super.allocate(request);\n-\n-    // Add allocated OPPORTUNISTIC containers to the AllocateResponse.\n-    if (!oppContainers.isEmpty()) {\n-      allocateResp.getAllocatedContainers().addAll(oppContainers);\n-    }\n-\n-    // Update opportunistic container context with the allocated GUARANTEED\n-    // containers.\n-    oppCtx.updateCompletedContainers(allocateResp);\n-\n-    // Add all opportunistic containers\n-    return allocateResp;\n+    super.allocateInternal(appAttemptId, request, allocateResponse);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void allocateInternal(ApplicationAttemptId appAttemptId,\n      AllocateRequest request, AllocateResponse allocateResponse)\n      throws YarnException {\n\n    // Partition requests to GUARANTEED and OPPORTUNISTIC.\n    OpportunisticContainerAllocator.PartitionedResourceRequests\n        partitionedAsks \u003d\n        oppContainerAllocator.partitionAskList(request.getAskList());\n\n    // Allocate OPPORTUNISTIC containers.\n    SchedulerApplicationAttempt appAttempt \u003d\n        ((AbstractYarnScheduler)rmContext.getScheduler())\n            .getApplicationAttempt(appAttemptId);\n\n    OpportunisticContainerContext oppCtx \u003d\n        appAttempt.getOpportunisticContainerContext();\n    oppCtx.updateNodeList(getLeastLoadedNodes());\n\n    List\u003cContainer\u003e oppContainers \u003d\n        oppContainerAllocator.allocateContainers(\n            request.getResourceBlacklistRequest(),\n            partitionedAsks.getOpportunistic(), appAttemptId, oppCtx,\n            ResourceManager.getClusterTimeStamp(), appAttempt.getUser());\n\n    // Create RMContainers and update the NMTokens.\n    if (!oppContainers.isEmpty()) {\n      handleNewContainers(oppContainers, false);\n      appAttempt.updateNMTokens(oppContainers);\n      addToAllocatedContainers(allocateResponse, oppContainers);\n    }\n\n    // Allocate GUARANTEED containers.\n    request.setAskList(partitionedAsks.getGuaranteed());\n    super.allocateInternal(appAttemptId, request, allocateResponse);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
          "extendedDetails": {}
        }
      ]
    },
    "283fa33febe043bd7b4fa87546be26c9c5a8f8b5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5823. Update NMTokens in case of requests with only opportunistic containers. (Konstantinos Karanasos via asuresh)\n",
      "commitDate": "09/11/16 12:11 AM",
      "commitName": "283fa33febe043bd7b4fa87546be26c9c5a8f8b5",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "04/11/16 7:31 AM",
      "commitNameOld": "0aafc122d401a2f49d0f9ca556343f9ba871e979",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 4.74,
      "commitsBetweenForRepo": 59,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,44 @@\n   public AllocateResponse allocate(AllocateRequest request) throws\n       YarnException, IOException {\n \n+    // Partition requests to GUARANTEED and OPPORTUNISTIC.\n+    OpportunisticContainerAllocator.PartitionedResourceRequests\n+        partitionedAsks \u003d\n+        oppContainerAllocator.partitionAskList(request.getAskList());\n+\n+    // Allocate OPPORTUNISTIC containers.\n+    request.setAskList(partitionedAsks.getOpportunistic());\n     final ApplicationAttemptId appAttemptId \u003d getAppAttemptId();\n     SchedulerApplicationAttempt appAttempt \u003d ((AbstractYarnScheduler)\n         rmContext.getScheduler()).getApplicationAttempt(appAttemptId);\n+\n     OpportunisticContainerContext oppCtx \u003d\n         appAttempt.getOpportunisticContainerContext();\n     oppCtx.updateNodeList(getLeastLoadedNodes());\n+\n     List\u003cContainer\u003e oppContainers \u003d\n         oppContainerAllocator.allocateContainers(request, appAttemptId, oppCtx,\n         ResourceManager.getClusterTimeStamp(), appAttempt.getUser());\n \n+    // Create RMContainers and update the NMTokens.\n     if (!oppContainers.isEmpty()) {\n       handleNewContainers(oppContainers, false);\n       appAttempt.updateNMTokens(oppContainers);\n     }\n \n-    // Allocate all guaranteed containers\n+    // Allocate GUARANTEED containers.\n+    request.setAskList(partitionedAsks.getGuaranteed());\n     AllocateResponse allocateResp \u003d super.allocate(request);\n \n+    // Add allocated OPPORTUNISTIC containers to the AllocateResponse.\n+    if (!oppContainers.isEmpty()) {\n+      allocateResp.getAllocatedContainers().addAll(oppContainers);\n+    }\n+\n+    // Update opportunistic container context with the allocated GUARANTEED\n+    // containers.\n     oppCtx.updateCompletedContainers(allocateResp);\n \n     // Add all opportunistic containers\n-    allocateResp.getAllocatedContainers().addAll(oppContainers);\n     return allocateResp;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public AllocateResponse allocate(AllocateRequest request) throws\n      YarnException, IOException {\n\n    // Partition requests to GUARANTEED and OPPORTUNISTIC.\n    OpportunisticContainerAllocator.PartitionedResourceRequests\n        partitionedAsks \u003d\n        oppContainerAllocator.partitionAskList(request.getAskList());\n\n    // Allocate OPPORTUNISTIC containers.\n    request.setAskList(partitionedAsks.getOpportunistic());\n    final ApplicationAttemptId appAttemptId \u003d getAppAttemptId();\n    SchedulerApplicationAttempt appAttempt \u003d ((AbstractYarnScheduler)\n        rmContext.getScheduler()).getApplicationAttempt(appAttemptId);\n\n    OpportunisticContainerContext oppCtx \u003d\n        appAttempt.getOpportunisticContainerContext();\n    oppCtx.updateNodeList(getLeastLoadedNodes());\n\n    List\u003cContainer\u003e oppContainers \u003d\n        oppContainerAllocator.allocateContainers(request, appAttemptId, oppCtx,\n        ResourceManager.getClusterTimeStamp(), appAttempt.getUser());\n\n    // Create RMContainers and update the NMTokens.\n    if (!oppContainers.isEmpty()) {\n      handleNewContainers(oppContainers, false);\n      appAttempt.updateNMTokens(oppContainers);\n    }\n\n    // Allocate GUARANTEED containers.\n    request.setAskList(partitionedAsks.getGuaranteed());\n    AllocateResponse allocateResp \u003d super.allocate(request);\n\n    // Add allocated OPPORTUNISTIC containers to the AllocateResponse.\n    if (!oppContainers.isEmpty()) {\n      allocateResp.getAllocatedContainers().addAll(oppContainers);\n    }\n\n    // Update opportunistic container context with the allocated GUARANTEED\n    // containers.\n    oppCtx.updateCompletedContainers(allocateResp);\n\n    // Add all opportunistic containers\n    return allocateResp;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
      "extendedDetails": {}
    },
    "10be45986cdf86a89055065b752959bd6369d54f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5486. Update OpportunisticContainerAllocatorAMService::allocate method to handle OPPORTUNISTIC container requests. (Konstantinos Karanasos via asuresh)\n",
      "commitDate": "29/09/16 3:11 PM",
      "commitName": "10be45986cdf86a89055065b752959bd6369d54f",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "09/08/16 12:42 AM",
      "commitNameOld": "82c9e061017c32e633e0b0cbb7978749a6df4fb2",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 51.6,
      "commitsBetweenForRepo": 319,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,4 +1,27 @@\n   public AllocateResponse allocate(AllocateRequest request) throws\n       YarnException, IOException {\n-    return super.allocate(request);\n+\n+    final ApplicationAttemptId appAttemptId \u003d getAppAttemptId();\n+    SchedulerApplicationAttempt appAttempt \u003d ((AbstractYarnScheduler)\n+        rmContext.getScheduler()).getApplicationAttempt(appAttemptId);\n+    OpportunisticContainerContext oppCtx \u003d\n+        appAttempt.getOpportunisticContainerContext();\n+    oppCtx.updateNodeList(getLeastLoadedNodes());\n+    List\u003cContainer\u003e oppContainers \u003d\n+        oppContainerAllocator.allocateContainers(request, appAttemptId, oppCtx,\n+        ResourceManager.getClusterTimeStamp(), appAttempt.getUser());\n+\n+    if (!oppContainers.isEmpty()) {\n+      handleNewContainers(oppContainers, false);\n+      appAttempt.updateNMTokens(oppContainers);\n+    }\n+\n+    // Allocate all guaranteed containers\n+    AllocateResponse allocateResp \u003d super.allocate(request);\n+\n+    oppCtx.updateCompletedContainers(allocateResp);\n+\n+    // Add all opportunistic containers\n+    allocateResp.getAllocatedContainers().addAll(oppContainers);\n+    return allocateResp;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public AllocateResponse allocate(AllocateRequest request) throws\n      YarnException, IOException {\n\n    final ApplicationAttemptId appAttemptId \u003d getAppAttemptId();\n    SchedulerApplicationAttempt appAttempt \u003d ((AbstractYarnScheduler)\n        rmContext.getScheduler()).getApplicationAttempt(appAttemptId);\n    OpportunisticContainerContext oppCtx \u003d\n        appAttempt.getOpportunisticContainerContext();\n    oppCtx.updateNodeList(getLeastLoadedNodes());\n    List\u003cContainer\u003e oppContainers \u003d\n        oppContainerAllocator.allocateContainers(request, appAttemptId, oppCtx,\n        ResourceManager.getClusterTimeStamp(), appAttempt.getUser());\n\n    if (!oppContainers.isEmpty()) {\n      handleNewContainers(oppContainers, false);\n      appAttempt.updateNMTokens(oppContainers);\n    }\n\n    // Allocate all guaranteed containers\n    AllocateResponse allocateResp \u003d super.allocate(request);\n\n    oppCtx.updateCompletedContainers(allocateResp);\n\n    // Add all opportunistic containers\n    allocateResp.getAllocatedContainers().addAll(oppContainers);\n    return allocateResp;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
      "extendedDetails": {}
    },
    "82c9e061017c32e633e0b0cbb7978749a6df4fb2": {
      "type": "Yfilerename",
      "commitMessage": "YARN-5457. Refactor DistributedScheduling framework to pull out common functionality. (asuresh)\n",
      "commitDate": "09/08/16 12:42 AM",
      "commitName": "82c9e061017c32e633e0b0cbb7978749a6df4fb2",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "08/08/16 5:54 PM",
      "commitNameOld": "8f9b61852bf6600b65e49875fec172bac9e0a85d",
      "commitAuthorOld": "Masatake Iwasaki",
      "daysBetweenCommits": 0.28,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public AllocateResponse allocate(AllocateRequest request) throws\n      YarnException, IOException {\n    return super.allocate(request);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DistributedSchedulingAMService.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java"
      }
    },
    "e5766b1dbee02ae0ef89618e172f3fb227af19e8": {
      "type": "Yfilerename",
      "commitMessage": "YARN-5113. Refactoring and other clean-up for distributed scheduling. (Konstantinos Karanasos via asuresh)\n",
      "commitDate": "31/07/16 11:48 AM",
      "commitName": "e5766b1dbee02ae0ef89618e172f3fb227af19e8",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "30/07/16 7:29 PM",
      "commitNameOld": "3d191cc15244e1e29f837b34a9bd1d029e003064",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 0.68,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public AllocateResponse allocate(AllocateRequest request) throws\n      YarnException, IOException {\n    return super.allocate(request);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DistributedSchedulingAMService.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DistributedSchedulingService.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DistributedSchedulingAMService.java"
      }
    },
    "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2885. Create AMRMProxy request interceptor and ContainerAllocator to distribute OPPORTUNISTIC containers to appropriate Nodes (asuresh)\n\n(cherry picked from commit 2bf025278a318b0452fdc9ece4427b4c42124e39)\n",
      "commitDate": "24/04/16 10:38 PM",
      "commitName": "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,4 @@\n+  public AllocateResponse allocate(AllocateRequest request) throws\n+      YarnException, IOException {\n+    return super.allocate(request);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public AllocateResponse allocate(AllocateRequest request) throws\n      YarnException, IOException {\n    return super.allocate(request);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DistributedSchedulingService.java"
    }
  }
}