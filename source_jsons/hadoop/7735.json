{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSImageFormatProtobuf.java",
  "functionName": "enableSubSectionsIfRequired",
  "functionId": "enableSubSectionsIfRequired",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormatProtobuf.java",
  "functionStartLine": 729,
  "functionEndLine": 768,
  "numCommitsSeen": 38,
  "timeTaken": 1326,
  "changeHistory": [
    "b67812ea2111fa11bdd76096b923c93e1bdf2923"
  ],
  "changeHistoryShort": {
    "b67812ea2111fa11bdd76096b923c93e1bdf2923": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b67812ea2111fa11bdd76096b923c93e1bdf2923": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-14617. Improve fsimage load time by writing sub-sections to the fsimage index (#1028). Contributed by  Stephen O\u0027Donnell.\n\nReviewed-by: He Xiaoqiao \u003chexiaoqiao@apache.org\u003e",
      "commitDate": "22/08/19 5:09 PM",
      "commitName": "b67812ea2111fa11bdd76096b923c93e1bdf2923",
      "commitAuthor": "Stephen O\u0027Donnell",
      "diff": "@@ -0,0 +1,40 @@\n+    private void enableSubSectionsIfRequired() {\n+      boolean parallelEnabled \u003d enableParallelSaveAndLoad(conf);\n+      int inodeThreshold \u003d conf.getInt(\n+          DFSConfigKeys.DFS_IMAGE_PARALLEL_INODE_THRESHOLD_KEY,\n+          DFSConfigKeys.DFS_IMAGE_PARALLEL_INODE_THRESHOLD_DEFAULT);\n+      int targetSections \u003d conf.getInt(\n+          DFSConfigKeys.DFS_IMAGE_PARALLEL_TARGET_SECTIONS_KEY,\n+          DFSConfigKeys.DFS_IMAGE_PARALLEL_TARGET_SECTIONS_DEFAULT);\n+\n+      if (parallelEnabled) {\n+        if (targetSections \u003c\u003d 0) {\n+          LOG.warn(\"{} is set to {}. It must be greater than zero. Setting to\" +\n+              \" default of {}\",\n+              DFSConfigKeys.DFS_IMAGE_PARALLEL_TARGET_SECTIONS_KEY,\n+              targetSections,\n+              DFSConfigKeys.DFS_IMAGE_PARALLEL_TARGET_SECTIONS_DEFAULT);\n+          targetSections \u003d\n+              DFSConfigKeys.DFS_IMAGE_PARALLEL_TARGET_SECTIONS_DEFAULT;\n+        }\n+        if (inodeThreshold \u003c\u003d 0) {\n+          LOG.warn(\"{} is set to {}. It must be greater than zero. Setting to\" +\n+                  \" default of {}\",\n+              DFSConfigKeys.DFS_IMAGE_PARALLEL_INODE_THRESHOLD_KEY,\n+              inodeThreshold,\n+              DFSConfigKeys.DFS_IMAGE_PARALLEL_INODE_THRESHOLD_DEFAULT);\n+          inodeThreshold \u003d\n+              DFSConfigKeys.DFS_IMAGE_PARALLEL_INODE_THRESHOLD_DEFAULT;\n+        }\n+        int inodeCount \u003d context.getSourceNamesystem().dir.getInodeMapSize();\n+        // Only enable parallel sections if there are enough inodes\n+        if (inodeCount \u003e\u003d inodeThreshold) {\n+          writeSubSections \u003d true;\n+          // Calculate the inodes per section rounded up to the nearest int\n+          inodesPerSubSection \u003d (inodeCount + targetSections - 1) /\n+              targetSections;\n+        }\n+      } else {\n+        writeSubSections \u003d false;\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void enableSubSectionsIfRequired() {\n      boolean parallelEnabled \u003d enableParallelSaveAndLoad(conf);\n      int inodeThreshold \u003d conf.getInt(\n          DFSConfigKeys.DFS_IMAGE_PARALLEL_INODE_THRESHOLD_KEY,\n          DFSConfigKeys.DFS_IMAGE_PARALLEL_INODE_THRESHOLD_DEFAULT);\n      int targetSections \u003d conf.getInt(\n          DFSConfigKeys.DFS_IMAGE_PARALLEL_TARGET_SECTIONS_KEY,\n          DFSConfigKeys.DFS_IMAGE_PARALLEL_TARGET_SECTIONS_DEFAULT);\n\n      if (parallelEnabled) {\n        if (targetSections \u003c\u003d 0) {\n          LOG.warn(\"{} is set to {}. It must be greater than zero. Setting to\" +\n              \" default of {}\",\n              DFSConfigKeys.DFS_IMAGE_PARALLEL_TARGET_SECTIONS_KEY,\n              targetSections,\n              DFSConfigKeys.DFS_IMAGE_PARALLEL_TARGET_SECTIONS_DEFAULT);\n          targetSections \u003d\n              DFSConfigKeys.DFS_IMAGE_PARALLEL_TARGET_SECTIONS_DEFAULT;\n        }\n        if (inodeThreshold \u003c\u003d 0) {\n          LOG.warn(\"{} is set to {}. It must be greater than zero. Setting to\" +\n                  \" default of {}\",\n              DFSConfigKeys.DFS_IMAGE_PARALLEL_INODE_THRESHOLD_KEY,\n              inodeThreshold,\n              DFSConfigKeys.DFS_IMAGE_PARALLEL_INODE_THRESHOLD_DEFAULT);\n          inodeThreshold \u003d\n              DFSConfigKeys.DFS_IMAGE_PARALLEL_INODE_THRESHOLD_DEFAULT;\n        }\n        int inodeCount \u003d context.getSourceNamesystem().dir.getInodeMapSize();\n        // Only enable parallel sections if there are enough inodes\n        if (inodeCount \u003e\u003d inodeThreshold) {\n          writeSubSections \u003d true;\n          // Calculate the inodes per section rounded up to the nearest int\n          inodesPerSubSection \u003d (inodeCount + targetSections - 1) /\n              targetSections;\n        }\n      } else {\n        writeSubSections \u003d false;\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormatProtobuf.java"
    }
  }
}