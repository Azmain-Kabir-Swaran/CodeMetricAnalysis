{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DiskBalancerCLI.java",
  "functionName": "addPlanCommands",
  "functionId": "addPlanCommands___opt-Options",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DiskBalancerCLI.java",
  "functionStartLine": 280,
  "functionEndLine": 335,
  "numCommitsSeen": 20,
  "timeTaken": 3166,
  "changeHistory": [
    "35c5943b8ba394191405555cdfc5e6127053ee97",
    "02abd131b857a89d9fc21507296603120bb50810",
    "66fa34c839c89733839cb67878fdfdc4b1f65ab8",
    "af11ab34d0cff3883885a25aa918be4f98566142",
    "47dcb0f95288a5e6f05480d274f1ebd8cc873ef8",
    "1b39b283c70854bf3b77f5ba9fbcce064bfea5c3",
    "75882ec0b096da862b8b373b70a091c19f281b2a"
  ],
  "changeHistoryShort": {
    "35c5943b8ba394191405555cdfc5e6127053ee97": "Yfilerename",
    "02abd131b857a89d9fc21507296603120bb50810": "Ybodychange",
    "66fa34c839c89733839cb67878fdfdc4b1f65ab8": "Ybodychange",
    "af11ab34d0cff3883885a25aa918be4f98566142": "Ybodychange",
    "47dcb0f95288a5e6f05480d274f1ebd8cc873ef8": "Ybodychange",
    "1b39b283c70854bf3b77f5ba9fbcce064bfea5c3": "Ymultichange(Yrename,Ybodychange)",
    "75882ec0b096da862b8b373b70a091c19f281b2a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "35c5943b8ba394191405555cdfc5e6127053ee97": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-10553. DiskBalancer: Rename Tools/DiskBalancer class to Tools/DiskBalancerCLI. Contributed by Manoj Govindassamy.\n",
      "commitDate": "08/09/16 7:26 PM",
      "commitName": "35c5943b8ba394191405555cdfc5e6127053ee97",
      "commitAuthor": "Anu Engineer",
      "commitDateOld": "08/09/16 6:30 PM",
      "commitNameOld": "b07c266dca7f303c793b432a0738d593728cf2b3",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void addPlanCommands(Options opt) {\n\n    Option plan \u003d OptionBuilder.withLongOpt(PLAN)\n        .withDescription(\"Hostname, IP address or UUID of datanode \" +\n            \"for which a plan is created.\")\n        .hasArg()\n        .create();\n    getPlanOptions().addOption(plan);\n    opt.addOption(plan);\n\n\n    Option outFile \u003d OptionBuilder.withLongOpt(OUTFILE).hasArg()\n        .withDescription(\n            \"Local path of file to write output to, if not specified \"\n                + \"defaults will be used.\")\n        .create();\n    getPlanOptions().addOption(outFile);\n    opt.addOption(outFile);\n\n    Option bandwidth \u003d OptionBuilder.withLongOpt(BANDWIDTH).hasArg()\n        .withDescription(\n            \"Maximum disk bandwidth (MB/s) in integer to be consumed by \"\n                + \"diskBalancer. e.g. 10 MB/s.\")\n        .create();\n    getPlanOptions().addOption(bandwidth);\n    opt.addOption(bandwidth);\n\n    Option threshold \u003d OptionBuilder.withLongOpt(THRESHOLD)\n        .hasArg()\n        .withDescription(\"Percentage of data skew that is tolerated before\"\n            + \" disk balancer starts working. For example, if\"\n            + \" total data on a 2 disk node is 100 GB then disk\"\n            + \" balancer calculates the expected value on each disk,\"\n            + \" which is 50 GB. If the tolerance is 10% then data\"\n            + \" on a single disk needs to be more than 60 GB\"\n            + \" (50 GB + 10% tolerance value) for Disk balancer to\"\n            + \" balance the disks.\")\n        .create();\n    getPlanOptions().addOption(threshold);\n    opt.addOption(threshold);\n\n\n    Option maxError \u003d OptionBuilder.withLongOpt(MAXERROR)\n        .hasArg()\n        .withDescription(\"Describes how many errors \" +\n            \"can be tolerated while copying between a pair of disks.\")\n        .create();\n    getPlanOptions().addOption(maxError);\n    opt.addOption(maxError);\n\n    Option verbose \u003d OptionBuilder.withLongOpt(VERBOSE)\n        .withDescription(\"Print out the summary of the plan on console\")\n        .create();\n    getPlanOptions().addOption(verbose);\n    opt.addOption(verbose);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DiskBalancerCLI.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DiskBalancer.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DiskBalancerCLI.java"
      }
    },
    "02abd131b857a89d9fc21507296603120bb50810": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10567. Improve plan command help message. Contributed by Xiaobing Zhou.\n",
      "commitDate": "15/08/16 7:58 PM",
      "commitName": "02abd131b857a89d9fc21507296603120bb50810",
      "commitAuthor": "Anu Engineer",
      "commitDateOld": "23/06/16 6:27 PM",
      "commitNameOld": "e8de28181a3ed0053d5cd5f196434739880ee978",
      "commitAuthorOld": "Anu Engineer",
      "daysBetweenCommits": 53.06,
      "commitsBetweenForRepo": 438,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,56 @@\n   private void addPlanCommands(Options opt) {\n \n     Option plan \u003d OptionBuilder.withLongOpt(PLAN)\n-        .withDescription(\"creates a plan for datanode.\")\n+        .withDescription(\"Hostname, IP address or UUID of datanode \" +\n+            \"for which a plan is created.\")\n         .hasArg()\n         .create();\n     getPlanOptions().addOption(plan);\n     opt.addOption(plan);\n \n \n-    Option outFile \u003d OptionBuilder.withLongOpt(OUTFILE)\n-        .hasArg()\n-        .withDescription(\"File to write output to, if not specified \" +\n-            \"defaults will be used.\")\n+    Option outFile \u003d OptionBuilder.withLongOpt(OUTFILE).hasArg()\n+        .withDescription(\n+            \"Local path of file to write output to, if not specified \"\n+                + \"defaults will be used.\")\n         .create();\n     getPlanOptions().addOption(outFile);\n     opt.addOption(outFile);\n \n-    Option bandwidth \u003d OptionBuilder.withLongOpt(BANDWIDTH)\n-        .hasArg()\n-        .withDescription(\"Maximum disk bandwidth to be consumed by \" +\n-            \"diskBalancer. e.g. 10\")\n+    Option bandwidth \u003d OptionBuilder.withLongOpt(BANDWIDTH).hasArg()\n+        .withDescription(\n+            \"Maximum disk bandwidth (MB/s) in integer to be consumed by \"\n+                + \"diskBalancer. e.g. 10 MB/s.\")\n         .create();\n     getPlanOptions().addOption(bandwidth);\n     opt.addOption(bandwidth);\n \n     Option threshold \u003d OptionBuilder.withLongOpt(THRESHOLD)\n         .hasArg()\n-        .withDescription(\"Percentage skew that we\" +\n-            \"tolerate before diskbalancer starts working e.g. 10\")\n+        .withDescription(\"Percentage of data skew that is tolerated before\"\n+            + \" disk balancer starts working. For example, if\"\n+            + \" total data on a 2 disk node is 100 GB then disk\"\n+            + \" balancer calculates the expected value on each disk,\"\n+            + \" which is 50 GB. If the tolerance is 10% then data\"\n+            + \" on a single disk needs to be more than 60 GB\"\n+            + \" (50 GB + 10% tolerance value) for Disk balancer to\"\n+            + \" balance the disks.\")\n         .create();\n     getPlanOptions().addOption(threshold);\n     opt.addOption(threshold);\n \n \n     Option maxError \u003d OptionBuilder.withLongOpt(MAXERROR)\n         .hasArg()\n         .withDescription(\"Describes how many errors \" +\n             \"can be tolerated while copying between a pair of disks.\")\n         .create();\n     getPlanOptions().addOption(maxError);\n     opt.addOption(maxError);\n \n     Option verbose \u003d OptionBuilder.withLongOpt(VERBOSE)\n         .withDescription(\"Print out the summary of the plan on console\")\n         .create();\n     getPlanOptions().addOption(verbose);\n     opt.addOption(verbose);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void addPlanCommands(Options opt) {\n\n    Option plan \u003d OptionBuilder.withLongOpt(PLAN)\n        .withDescription(\"Hostname, IP address or UUID of datanode \" +\n            \"for which a plan is created.\")\n        .hasArg()\n        .create();\n    getPlanOptions().addOption(plan);\n    opt.addOption(plan);\n\n\n    Option outFile \u003d OptionBuilder.withLongOpt(OUTFILE).hasArg()\n        .withDescription(\n            \"Local path of file to write output to, if not specified \"\n                + \"defaults will be used.\")\n        .create();\n    getPlanOptions().addOption(outFile);\n    opt.addOption(outFile);\n\n    Option bandwidth \u003d OptionBuilder.withLongOpt(BANDWIDTH).hasArg()\n        .withDescription(\n            \"Maximum disk bandwidth (MB/s) in integer to be consumed by \"\n                + \"diskBalancer. e.g. 10 MB/s.\")\n        .create();\n    getPlanOptions().addOption(bandwidth);\n    opt.addOption(bandwidth);\n\n    Option threshold \u003d OptionBuilder.withLongOpt(THRESHOLD)\n        .hasArg()\n        .withDescription(\"Percentage of data skew that is tolerated before\"\n            + \" disk balancer starts working. For example, if\"\n            + \" total data on a 2 disk node is 100 GB then disk\"\n            + \" balancer calculates the expected value on each disk,\"\n            + \" which is 50 GB. If the tolerance is 10% then data\"\n            + \" on a single disk needs to be more than 60 GB\"\n            + \" (50 GB + 10% tolerance value) for Disk balancer to\"\n            + \" balance the disks.\")\n        .create();\n    getPlanOptions().addOption(threshold);\n    opt.addOption(threshold);\n\n\n    Option maxError \u003d OptionBuilder.withLongOpt(MAXERROR)\n        .hasArg()\n        .withDescription(\"Describes how many errors \" +\n            \"can be tolerated while copying between a pair of disks.\")\n        .create();\n    getPlanOptions().addOption(maxError);\n    opt.addOption(maxError);\n\n    Option verbose \u003d OptionBuilder.withLongOpt(VERBOSE)\n        .withDescription(\"Print out the summary of the plan on console\")\n        .create();\n    getPlanOptions().addOption(verbose);\n    opt.addOption(verbose);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DiskBalancer.java",
      "extendedDetails": {}
    },
    "66fa34c839c89733839cb67878fdfdc4b1f65ab8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10557. Fix handling of the -fs Generic option. (Arpit Agarwal)\n",
      "commitDate": "23/06/16 6:27 PM",
      "commitName": "66fa34c839c89733839cb67878fdfdc4b1f65ab8",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "23/06/16 6:27 PM",
      "commitNameOld": "0774412e41856b4ed3eccfa9270165e216d10ab8",
      "commitAuthorOld": "Anu Engineer",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,49 @@\n   private void addPlanCommands(Options opt) {\n \n-    Option uri \u003d OptionBuilder.withLongOpt(NAMENODEURI)\n-        .withDescription(\"Address of the Namenode. e,g. hdfs://namenode\")\n-        .hasArg()\n-        .create();\n-    getPlanOptions().addOption(uri);\n-    opt.addOption(uri);\n-\n     Option plan \u003d OptionBuilder.withLongOpt(PLAN)\n         .withDescription(\"creates a plan for datanode.\")\n         .hasArg()\n         .create();\n     getPlanOptions().addOption(plan);\n     opt.addOption(plan);\n \n \n     Option outFile \u003d OptionBuilder.withLongOpt(OUTFILE)\n         .hasArg()\n         .withDescription(\"File to write output to, if not specified \" +\n             \"defaults will be used.\")\n         .create();\n     getPlanOptions().addOption(outFile);\n     opt.addOption(outFile);\n \n     Option bandwidth \u003d OptionBuilder.withLongOpt(BANDWIDTH)\n         .hasArg()\n         .withDescription(\"Maximum disk bandwidth to be consumed by \" +\n             \"diskBalancer. e.g. 10\")\n         .create();\n     getPlanOptions().addOption(bandwidth);\n     opt.addOption(bandwidth);\n \n     Option threshold \u003d OptionBuilder.withLongOpt(THRESHOLD)\n         .hasArg()\n         .withDescription(\"Percentage skew that we\" +\n             \"tolerate before diskbalancer starts working e.g. 10\")\n         .create();\n     getPlanOptions().addOption(threshold);\n     opt.addOption(threshold);\n \n \n     Option maxError \u003d OptionBuilder.withLongOpt(MAXERROR)\n         .hasArg()\n         .withDescription(\"Describes how many errors \" +\n             \"can be tolerated while copying between a pair of disks.\")\n         .create();\n     getPlanOptions().addOption(maxError);\n     opt.addOption(maxError);\n \n     Option verbose \u003d OptionBuilder.withLongOpt(VERBOSE)\n         .withDescription(\"Print out the summary of the plan on console\")\n         .create();\n     getPlanOptions().addOption(verbose);\n     opt.addOption(verbose);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void addPlanCommands(Options opt) {\n\n    Option plan \u003d OptionBuilder.withLongOpt(PLAN)\n        .withDescription(\"creates a plan for datanode.\")\n        .hasArg()\n        .create();\n    getPlanOptions().addOption(plan);\n    opt.addOption(plan);\n\n\n    Option outFile \u003d OptionBuilder.withLongOpt(OUTFILE)\n        .hasArg()\n        .withDescription(\"File to write output to, if not specified \" +\n            \"defaults will be used.\")\n        .create();\n    getPlanOptions().addOption(outFile);\n    opt.addOption(outFile);\n\n    Option bandwidth \u003d OptionBuilder.withLongOpt(BANDWIDTH)\n        .hasArg()\n        .withDescription(\"Maximum disk bandwidth to be consumed by \" +\n            \"diskBalancer. e.g. 10\")\n        .create();\n    getPlanOptions().addOption(bandwidth);\n    opt.addOption(bandwidth);\n\n    Option threshold \u003d OptionBuilder.withLongOpt(THRESHOLD)\n        .hasArg()\n        .withDescription(\"Percentage skew that we\" +\n            \"tolerate before diskbalancer starts working e.g. 10\")\n        .create();\n    getPlanOptions().addOption(threshold);\n    opt.addOption(threshold);\n\n\n    Option maxError \u003d OptionBuilder.withLongOpt(MAXERROR)\n        .hasArg()\n        .withDescription(\"Describes how many errors \" +\n            \"can be tolerated while copying between a pair of disks.\")\n        .create();\n    getPlanOptions().addOption(maxError);\n    opt.addOption(maxError);\n\n    Option verbose \u003d OptionBuilder.withLongOpt(VERBOSE)\n        .withDescription(\"Print out the summary of the plan on console\")\n        .create();\n    getPlanOptions().addOption(verbose);\n    opt.addOption(verbose);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DiskBalancer.java",
      "extendedDetails": {}
    },
    "af11ab34d0cff3883885a25aa918be4f98566142": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10517. DiskBalancer: Support help command. Contributed by Anu Engineer.\n",
      "commitDate": "23/06/16 6:21 PM",
      "commitName": "af11ab34d0cff3883885a25aa918be4f98566142",
      "commitAuthor": "Anu Engineer",
      "commitDateOld": "23/06/16 6:21 PM",
      "commitNameOld": "b502102bb1a1f416f43dd1227886c57ccad70fcc",
      "commitAuthorOld": "Anu Engineer",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,56 @@\n   private void addPlanCommands(Options opt) {\n \n-    Option nameNodeUri \u003d\n-        new Option(NAMENODEURI, true, \"NameNode URI. e.g http://namenode\" +\n-            \".mycluster.com or file:///myCluster\" +\n-            \".json\");\n-    opt.addOption(nameNodeUri);\n+    Option uri \u003d OptionBuilder.withLongOpt(NAMENODEURI)\n+        .withDescription(\"Address of the Namenode. e,g. hdfs://namenode\")\n+        .hasArg()\n+        .create();\n+    getPlanOptions().addOption(uri);\n+    opt.addOption(uri);\n \n-    Option outFile \u003d\n-        new Option(OUTFILE, true, \"File to write output to, if not specified \" +\n-            \"defaults will be used.\" +\n-            \"e.g -out outfile.txt\");\n-    opt.addOption(outFile);\n-\n-    Option plan \u003d new Option(PLAN, true , \"create a plan for the given node. \" +\n-        \"e.g -plan \u003cnodename\u003e | \u003cnodeIP\u003e | \u003cnodeUUID\u003e\");\n+    Option plan \u003d OptionBuilder.withLongOpt(PLAN)\n+        .withDescription(\"creates a plan for datanode.\")\n+        .hasArg()\n+        .create();\n+    getPlanOptions().addOption(plan);\n     opt.addOption(plan);\n \n-    Option bandwidth \u003d new Option(BANDWIDTH, true, \"Maximum disk bandwidth to\" +\n-        \" be consumed by diskBalancer. \" +\n-        \"Expressed as MBs per second.\");\n+\n+    Option outFile \u003d OptionBuilder.withLongOpt(OUTFILE)\n+        .hasArg()\n+        .withDescription(\"File to write output to, if not specified \" +\n+            \"defaults will be used.\")\n+        .create();\n+    getPlanOptions().addOption(outFile);\n+    opt.addOption(outFile);\n+\n+    Option bandwidth \u003d OptionBuilder.withLongOpt(BANDWIDTH)\n+        .hasArg()\n+        .withDescription(\"Maximum disk bandwidth to be consumed by \" +\n+            \"diskBalancer. e.g. 10\")\n+        .create();\n+    getPlanOptions().addOption(bandwidth);\n     opt.addOption(bandwidth);\n \n-    Option threshold \u003d new Option(THRESHOLD, true, \"Percentage skew that we \" +\n-        \"tolerate before diskbalancer starts working or stops when reaching \" +\n-        \"that range.\");\n+    Option threshold \u003d OptionBuilder.withLongOpt(THRESHOLD)\n+        .hasArg()\n+        .withDescription(\"Percentage skew that we\" +\n+            \"tolerate before diskbalancer starts working e.g. 10\")\n+        .create();\n+    getPlanOptions().addOption(threshold);\n     opt.addOption(threshold);\n \n-    Option maxErrors \u003d new Option(MAXERROR, true, \"Describes how many errors \" +\n-        \"can be tolerated while copying between a pair of disks.\");\n-    opt.addOption(maxErrors);\n \n-    Option help \u003d\n-        new Option(HELP, true, \"Help about a command or this message\");\n-    opt.addOption(help);\n+    Option maxError \u003d OptionBuilder.withLongOpt(MAXERROR)\n+        .hasArg()\n+        .withDescription(\"Describes how many errors \" +\n+            \"can be tolerated while copying between a pair of disks.\")\n+        .create();\n+    getPlanOptions().addOption(maxError);\n+    opt.addOption(maxError);\n \n-    Option verbose \u003d new Option(VERBOSE, \"Print out the summary of the plan\");\n+    Option verbose \u003d OptionBuilder.withLongOpt(VERBOSE)\n+        .withDescription(\"Print out the summary of the plan on console\")\n+        .create();\n+    getPlanOptions().addOption(verbose);\n     opt.addOption(verbose);\n-\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void addPlanCommands(Options opt) {\n\n    Option uri \u003d OptionBuilder.withLongOpt(NAMENODEURI)\n        .withDescription(\"Address of the Namenode. e,g. hdfs://namenode\")\n        .hasArg()\n        .create();\n    getPlanOptions().addOption(uri);\n    opt.addOption(uri);\n\n    Option plan \u003d OptionBuilder.withLongOpt(PLAN)\n        .withDescription(\"creates a plan for datanode.\")\n        .hasArg()\n        .create();\n    getPlanOptions().addOption(plan);\n    opt.addOption(plan);\n\n\n    Option outFile \u003d OptionBuilder.withLongOpt(OUTFILE)\n        .hasArg()\n        .withDescription(\"File to write output to, if not specified \" +\n            \"defaults will be used.\")\n        .create();\n    getPlanOptions().addOption(outFile);\n    opt.addOption(outFile);\n\n    Option bandwidth \u003d OptionBuilder.withLongOpt(BANDWIDTH)\n        .hasArg()\n        .withDescription(\"Maximum disk bandwidth to be consumed by \" +\n            \"diskBalancer. e.g. 10\")\n        .create();\n    getPlanOptions().addOption(bandwidth);\n    opt.addOption(bandwidth);\n\n    Option threshold \u003d OptionBuilder.withLongOpt(THRESHOLD)\n        .hasArg()\n        .withDescription(\"Percentage skew that we\" +\n            \"tolerate before diskbalancer starts working e.g. 10\")\n        .create();\n    getPlanOptions().addOption(threshold);\n    opt.addOption(threshold);\n\n\n    Option maxError \u003d OptionBuilder.withLongOpt(MAXERROR)\n        .hasArg()\n        .withDescription(\"Describes how many errors \" +\n            \"can be tolerated while copying between a pair of disks.\")\n        .create();\n    getPlanOptions().addOption(maxError);\n    opt.addOption(maxError);\n\n    Option verbose \u003d OptionBuilder.withLongOpt(VERBOSE)\n        .withDescription(\"Print out the summary of the plan on console\")\n        .create();\n    getPlanOptions().addOption(verbose);\n    opt.addOption(verbose);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DiskBalancer.java",
      "extendedDetails": {}
    },
    "47dcb0f95288a5e6f05480d274f1ebd8cc873ef8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10476. DiskBalancer: Plan command output directory should be a sub-directory. Contributed by Anu Engineer.\n",
      "commitDate": "23/06/16 6:21 PM",
      "commitName": "47dcb0f95288a5e6f05480d274f1ebd8cc873ef8",
      "commitAuthor": "Anu Engineer",
      "commitDateOld": "23/06/16 6:21 PM",
      "commitNameOld": "43eee50966191e9cfdb7ab19383edb3a44f93481",
      "commitAuthorOld": "Anu Engineer",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,40 @@\n   private void addPlanCommands(Options opt) {\n \n     Option nameNodeUri \u003d\n         new Option(NAMENODEURI, true, \"NameNode URI. e.g http://namenode\" +\n             \".mycluster.com or file:///myCluster\" +\n             \".json\");\n     opt.addOption(nameNodeUri);\n \n     Option outFile \u003d\n         new Option(OUTFILE, true, \"File to write output to, if not specified \" +\n             \"defaults will be used.\" +\n             \"e.g -out outfile.txt\");\n     opt.addOption(outFile);\n \n     Option plan \u003d new Option(PLAN, true , \"create a plan for the given node. \" +\n         \"e.g -plan \u003cnodename\u003e | \u003cnodeIP\u003e | \u003cnodeUUID\u003e\");\n     opt.addOption(plan);\n \n     Option bandwidth \u003d new Option(BANDWIDTH, true, \"Maximum disk bandwidth to\" +\n         \" be consumed by diskBalancer. \" +\n         \"Expressed as MBs per second.\");\n     opt.addOption(bandwidth);\n \n     Option threshold \u003d new Option(THRESHOLD, true, \"Percentage skew that we \" +\n         \"tolerate before diskbalancer starts working or stops when reaching \" +\n         \"that range.\");\n     opt.addOption(threshold);\n \n     Option maxErrors \u003d new Option(MAXERROR, true, \"Describes how many errors \" +\n         \"can be tolerated while copying between a pair of disks.\");\n     opt.addOption(maxErrors);\n \n     Option help \u003d\n         new Option(HELP, true, \"Help about a command or this message\");\n     opt.addOption(help);\n+\n+    Option verbose \u003d new Option(VERBOSE, \"Print out the summary of the plan\");\n+    opt.addOption(verbose);\n+\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void addPlanCommands(Options opt) {\n\n    Option nameNodeUri \u003d\n        new Option(NAMENODEURI, true, \"NameNode URI. e.g http://namenode\" +\n            \".mycluster.com or file:///myCluster\" +\n            \".json\");\n    opt.addOption(nameNodeUri);\n\n    Option outFile \u003d\n        new Option(OUTFILE, true, \"File to write output to, if not specified \" +\n            \"defaults will be used.\" +\n            \"e.g -out outfile.txt\");\n    opt.addOption(outFile);\n\n    Option plan \u003d new Option(PLAN, true , \"create a plan for the given node. \" +\n        \"e.g -plan \u003cnodename\u003e | \u003cnodeIP\u003e | \u003cnodeUUID\u003e\");\n    opt.addOption(plan);\n\n    Option bandwidth \u003d new Option(BANDWIDTH, true, \"Maximum disk bandwidth to\" +\n        \" be consumed by diskBalancer. \" +\n        \"Expressed as MBs per second.\");\n    opt.addOption(bandwidth);\n\n    Option threshold \u003d new Option(THRESHOLD, true, \"Percentage skew that we \" +\n        \"tolerate before diskbalancer starts working or stops when reaching \" +\n        \"that range.\");\n    opt.addOption(threshold);\n\n    Option maxErrors \u003d new Option(MAXERROR, true, \"Describes how many errors \" +\n        \"can be tolerated while copying between a pair of disks.\");\n    opt.addOption(maxErrors);\n\n    Option help \u003d\n        new Option(HELP, true, \"Help about a command or this message\");\n    opt.addOption(help);\n\n    Option verbose \u003d new Option(VERBOSE, \"Print out the summary of the plan\");\n    opt.addOption(verbose);\n\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DiskBalancer.java",
      "extendedDetails": {}
    },
    "1b39b283c70854bf3b77f5ba9fbcce064bfea5c3": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "HDFS-9546: DiskBalancer: Add Execute command. Contributed by Anu Engineer.\n",
      "commitDate": "23/06/16 6:21 PM",
      "commitName": "1b39b283c70854bf3b77f5ba9fbcce064bfea5c3",
      "commitAuthor": "Anu Engineer",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-9546: DiskBalancer: Add Execute command. Contributed by Anu Engineer.\n",
          "commitDate": "23/06/16 6:21 PM",
          "commitName": "1b39b283c70854bf3b77f5ba9fbcce064bfea5c3",
          "commitAuthor": "Anu Engineer",
          "commitDateOld": "23/06/16 6:21 PM",
          "commitNameOld": "75882ec0b096da862b8b373b70a091c19f281b2a",
          "commitAuthorOld": "Anu Engineer",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,36 @@\n-  private void addCommands(Options opt) {\n+  private void addPlanCommands(Options opt) {\n \n     Option nameNodeUri \u003d\n         new Option(NAMENODEURI, true, \"NameNode URI. e.g http://namenode\" +\n             \".mycluster.com or file:///myCluster\" +\n             \".json\");\n     opt.addOption(nameNodeUri);\n \n     Option outFile \u003d\n         new Option(OUTFILE, true, \"File to write output to, if not specified \" +\n             \"defaults will be used.\" +\n             \"e.g -out outfile.txt\");\n     opt.addOption(outFile);\n \n-    Option plan \u003d new Option(PLAN, false, \"write plan to the default file\");\n+    Option plan \u003d new Option(PLAN, true , \"create a plan for the given node. \" +\n+        \"e.g -plan \u003cnodename\u003e | \u003cnodeIP\u003e | \u003cnodeUUID\u003e\");\n     opt.addOption(plan);\n \n     Option bandwidth \u003d new Option(BANDWIDTH, true, \"Maximum disk bandwidth to\" +\n         \" be consumed by diskBalancer. \" +\n         \"Expressed as MBs per second.\");\n     opt.addOption(bandwidth);\n \n     Option threshold \u003d new Option(THRESHOLD, true, \"Percentage skew that we \" +\n         \"tolerate before diskbalancer starts working or stops when reaching \" +\n         \"that range.\");\n     opt.addOption(threshold);\n \n     Option maxErrors \u003d new Option(MAXERROR, true, \"Describes how many errors \" +\n         \"can be tolerated while copying between a pair of disks.\");\n     opt.addOption(maxErrors);\n \n-    Option node \u003d new Option(NODE, true, \"Node Name or IP\");\n-    opt.addOption(node);\n-\n     Option help \u003d\n         new Option(HELP, true, \"Help about a command or this message\");\n     opt.addOption(help);\n-\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void addPlanCommands(Options opt) {\n\n    Option nameNodeUri \u003d\n        new Option(NAMENODEURI, true, \"NameNode URI. e.g http://namenode\" +\n            \".mycluster.com or file:///myCluster\" +\n            \".json\");\n    opt.addOption(nameNodeUri);\n\n    Option outFile \u003d\n        new Option(OUTFILE, true, \"File to write output to, if not specified \" +\n            \"defaults will be used.\" +\n            \"e.g -out outfile.txt\");\n    opt.addOption(outFile);\n\n    Option plan \u003d new Option(PLAN, true , \"create a plan for the given node. \" +\n        \"e.g -plan \u003cnodename\u003e | \u003cnodeIP\u003e | \u003cnodeUUID\u003e\");\n    opt.addOption(plan);\n\n    Option bandwidth \u003d new Option(BANDWIDTH, true, \"Maximum disk bandwidth to\" +\n        \" be consumed by diskBalancer. \" +\n        \"Expressed as MBs per second.\");\n    opt.addOption(bandwidth);\n\n    Option threshold \u003d new Option(THRESHOLD, true, \"Percentage skew that we \" +\n        \"tolerate before diskbalancer starts working or stops when reaching \" +\n        \"that range.\");\n    opt.addOption(threshold);\n\n    Option maxErrors \u003d new Option(MAXERROR, true, \"Describes how many errors \" +\n        \"can be tolerated while copying between a pair of disks.\");\n    opt.addOption(maxErrors);\n\n    Option help \u003d\n        new Option(HELP, true, \"Help about a command or this message\");\n    opt.addOption(help);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DiskBalancer.java",
          "extendedDetails": {
            "oldValue": "addCommands",
            "newValue": "addPlanCommands"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-9546: DiskBalancer: Add Execute command. Contributed by Anu Engineer.\n",
          "commitDate": "23/06/16 6:21 PM",
          "commitName": "1b39b283c70854bf3b77f5ba9fbcce064bfea5c3",
          "commitAuthor": "Anu Engineer",
          "commitDateOld": "23/06/16 6:21 PM",
          "commitNameOld": "75882ec0b096da862b8b373b70a091c19f281b2a",
          "commitAuthorOld": "Anu Engineer",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,36 @@\n-  private void addCommands(Options opt) {\n+  private void addPlanCommands(Options opt) {\n \n     Option nameNodeUri \u003d\n         new Option(NAMENODEURI, true, \"NameNode URI. e.g http://namenode\" +\n             \".mycluster.com or file:///myCluster\" +\n             \".json\");\n     opt.addOption(nameNodeUri);\n \n     Option outFile \u003d\n         new Option(OUTFILE, true, \"File to write output to, if not specified \" +\n             \"defaults will be used.\" +\n             \"e.g -out outfile.txt\");\n     opt.addOption(outFile);\n \n-    Option plan \u003d new Option(PLAN, false, \"write plan to the default file\");\n+    Option plan \u003d new Option(PLAN, true , \"create a plan for the given node. \" +\n+        \"e.g -plan \u003cnodename\u003e | \u003cnodeIP\u003e | \u003cnodeUUID\u003e\");\n     opt.addOption(plan);\n \n     Option bandwidth \u003d new Option(BANDWIDTH, true, \"Maximum disk bandwidth to\" +\n         \" be consumed by diskBalancer. \" +\n         \"Expressed as MBs per second.\");\n     opt.addOption(bandwidth);\n \n     Option threshold \u003d new Option(THRESHOLD, true, \"Percentage skew that we \" +\n         \"tolerate before diskbalancer starts working or stops when reaching \" +\n         \"that range.\");\n     opt.addOption(threshold);\n \n     Option maxErrors \u003d new Option(MAXERROR, true, \"Describes how many errors \" +\n         \"can be tolerated while copying between a pair of disks.\");\n     opt.addOption(maxErrors);\n \n-    Option node \u003d new Option(NODE, true, \"Node Name or IP\");\n-    opt.addOption(node);\n-\n     Option help \u003d\n         new Option(HELP, true, \"Help about a command or this message\");\n     opt.addOption(help);\n-\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void addPlanCommands(Options opt) {\n\n    Option nameNodeUri \u003d\n        new Option(NAMENODEURI, true, \"NameNode URI. e.g http://namenode\" +\n            \".mycluster.com or file:///myCluster\" +\n            \".json\");\n    opt.addOption(nameNodeUri);\n\n    Option outFile \u003d\n        new Option(OUTFILE, true, \"File to write output to, if not specified \" +\n            \"defaults will be used.\" +\n            \"e.g -out outfile.txt\");\n    opt.addOption(outFile);\n\n    Option plan \u003d new Option(PLAN, true , \"create a plan for the given node. \" +\n        \"e.g -plan \u003cnodename\u003e | \u003cnodeIP\u003e | \u003cnodeUUID\u003e\");\n    opt.addOption(plan);\n\n    Option bandwidth \u003d new Option(BANDWIDTH, true, \"Maximum disk bandwidth to\" +\n        \" be consumed by diskBalancer. \" +\n        \"Expressed as MBs per second.\");\n    opt.addOption(bandwidth);\n\n    Option threshold \u003d new Option(THRESHOLD, true, \"Percentage skew that we \" +\n        \"tolerate before diskbalancer starts working or stops when reaching \" +\n        \"that range.\");\n    opt.addOption(threshold);\n\n    Option maxErrors \u003d new Option(MAXERROR, true, \"Describes how many errors \" +\n        \"can be tolerated while copying between a pair of disks.\");\n    opt.addOption(maxErrors);\n\n    Option help \u003d\n        new Option(HELP, true, \"Help about a command or this message\");\n    opt.addOption(help);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DiskBalancer.java",
          "extendedDetails": {}
        }
      ]
    },
    "75882ec0b096da862b8b373b70a091c19f281b2a": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-9545: DiskBalancer: Add Plan Command. Contributed by Anu Engineer.\n",
      "commitDate": "23/06/16 6:21 PM",
      "commitName": "75882ec0b096da862b8b373b70a091c19f281b2a",
      "commitAuthor": "Anu Engineer",
      "diff": "@@ -0,0 +1,39 @@\n+  private void addCommands(Options opt) {\n+\n+    Option nameNodeUri \u003d\n+        new Option(NAMENODEURI, true, \"NameNode URI. e.g http://namenode\" +\n+            \".mycluster.com or file:///myCluster\" +\n+            \".json\");\n+    opt.addOption(nameNodeUri);\n+\n+    Option outFile \u003d\n+        new Option(OUTFILE, true, \"File to write output to, if not specified \" +\n+            \"defaults will be used.\" +\n+            \"e.g -out outfile.txt\");\n+    opt.addOption(outFile);\n+\n+    Option plan \u003d new Option(PLAN, false, \"write plan to the default file\");\n+    opt.addOption(plan);\n+\n+    Option bandwidth \u003d new Option(BANDWIDTH, true, \"Maximum disk bandwidth to\" +\n+        \" be consumed by diskBalancer. \" +\n+        \"Expressed as MBs per second.\");\n+    opt.addOption(bandwidth);\n+\n+    Option threshold \u003d new Option(THRESHOLD, true, \"Percentage skew that we \" +\n+        \"tolerate before diskbalancer starts working or stops when reaching \" +\n+        \"that range.\");\n+    opt.addOption(threshold);\n+\n+    Option maxErrors \u003d new Option(MAXERROR, true, \"Describes how many errors \" +\n+        \"can be tolerated while copying between a pair of disks.\");\n+    opt.addOption(maxErrors);\n+\n+    Option node \u003d new Option(NODE, true, \"Node Name or IP\");\n+    opt.addOption(node);\n+\n+    Option help \u003d\n+        new Option(HELP, true, \"Help about a command or this message\");\n+    opt.addOption(help);\n+\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void addCommands(Options opt) {\n\n    Option nameNodeUri \u003d\n        new Option(NAMENODEURI, true, \"NameNode URI. e.g http://namenode\" +\n            \".mycluster.com or file:///myCluster\" +\n            \".json\");\n    opt.addOption(nameNodeUri);\n\n    Option outFile \u003d\n        new Option(OUTFILE, true, \"File to write output to, if not specified \" +\n            \"defaults will be used.\" +\n            \"e.g -out outfile.txt\");\n    opt.addOption(outFile);\n\n    Option plan \u003d new Option(PLAN, false, \"write plan to the default file\");\n    opt.addOption(plan);\n\n    Option bandwidth \u003d new Option(BANDWIDTH, true, \"Maximum disk bandwidth to\" +\n        \" be consumed by diskBalancer. \" +\n        \"Expressed as MBs per second.\");\n    opt.addOption(bandwidth);\n\n    Option threshold \u003d new Option(THRESHOLD, true, \"Percentage skew that we \" +\n        \"tolerate before diskbalancer starts working or stops when reaching \" +\n        \"that range.\");\n    opt.addOption(threshold);\n\n    Option maxErrors \u003d new Option(MAXERROR, true, \"Describes how many errors \" +\n        \"can be tolerated while copying between a pair of disks.\");\n    opt.addOption(maxErrors);\n\n    Option node \u003d new Option(NODE, true, \"Node Name or IP\");\n    opt.addOption(node);\n\n    Option help \u003d\n        new Option(HELP, true, \"Help about a command or this message\");\n    opt.addOption(help);\n\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DiskBalancer.java"
    }
  }
}