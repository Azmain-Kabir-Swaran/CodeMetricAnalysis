{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ResourceManager.java",
  "functionName": "startWepApp",
  "functionId": "startWepApp",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
  "functionStartLine": 1190,
  "functionEndLine": 1276,
  "numCommitsSeen": 227,
  "timeTaken": 15874,
  "changeHistory": [
    "34b82e6da0a471010cdae613ba39487889d79369",
    "e966edd025332394701fe0d2cfa0d76731183aaf",
    "c2288ac45b748b4119442c46147ccc324926c340",
    "9af96d4ed4b6f80d3ca53a2b003d2ef768650dd4",
    "b69ba0f3307a90500aeb0c5db9e582fcda60b501",
    "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d",
    "0940e4f692441f16e742666ac925f71a083eab27",
    "72d22b753abde4d07a727479d3f3d5d84d5dd6b2",
    "e135c0b20794705dabf86a296d934eb8df02a774",
    "6600abbb5c23a83e3a9ef48a945bc8fe19c8178a",
    "3de0da2a7659db268d630cb8c4ad1d1c4b8398a2",
    "22fcd819f0c445be661e644ed67221f867013af8",
    "e51a8c10560e5db5cf01fd530af48825cb51c9ea",
    "f8adeb712dc834c27cec15c04a986f2f635aba83",
    "e37a4ff0c1712a1cb80e0412ec53a5d10b8d30f9",
    "1220bb72d452521c6f09cebe1dd77341054ee9dd",
    "a9023c2736fb8a95dbba90d3f61c9eca33126af4",
    "d6532d3a77abe5a9b1760c1e26a899d49aa661dc",
    "4931545f76f6c76e80e65c3bf6773e1983248044",
    "78e995a37d44cfcf511dcaf7e149a6fd47ba3434",
    "5adba5597ce071c2e84d0c9834e1d9e5e76f9bdb",
    "e86036662c139cd7e67e69a0215471b1ec724a05",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "d09cf903abcc6af9f9bc77cc79467b859861430a",
    "d41cb76b56e19f6eb411b3dacaf28a490d079c68",
    "0ea8570be578be60e2f32849900a1c50506d78d3",
    "8aabd3d4e67cad8dc7e46f5339981135badc7421",
    "df2991c0cbc3f35c2640b93680667507c4f810dd",
    "5f6adcf396b78934d7da2bba0d052038ff962f26",
    "fafe8cd28e726566509c679e19d7da622f29f90d",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "34b82e6da0a471010cdae613ba39487889d79369": "Ybodychange",
    "e966edd025332394701fe0d2cfa0d76731183aaf": "Ybodychange",
    "c2288ac45b748b4119442c46147ccc324926c340": "Ybodychange",
    "9af96d4ed4b6f80d3ca53a2b003d2ef768650dd4": "Ybodychange",
    "b69ba0f3307a90500aeb0c5db9e582fcda60b501": "Ybodychange",
    "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d": "Ybodychange",
    "0940e4f692441f16e742666ac925f71a083eab27": "Ybodychange",
    "72d22b753abde4d07a727479d3f3d5d84d5dd6b2": "Ybodychange",
    "e135c0b20794705dabf86a296d934eb8df02a774": "Ybodychange",
    "6600abbb5c23a83e3a9ef48a945bc8fe19c8178a": "Ybodychange",
    "3de0da2a7659db268d630cb8c4ad1d1c4b8398a2": "Ybodychange",
    "22fcd819f0c445be661e644ed67221f867013af8": "Ybodychange",
    "e51a8c10560e5db5cf01fd530af48825cb51c9ea": "Ybodychange",
    "f8adeb712dc834c27cec15c04a986f2f635aba83": "Ybodychange",
    "e37a4ff0c1712a1cb80e0412ec53a5d10b8d30f9": "Ybodychange",
    "1220bb72d452521c6f09cebe1dd77341054ee9dd": "Ybodychange",
    "a9023c2736fb8a95dbba90d3f61c9eca33126af4": "Ybodychange",
    "d6532d3a77abe5a9b1760c1e26a899d49aa661dc": "Ybodychange",
    "4931545f76f6c76e80e65c3bf6773e1983248044": "Ybodychange",
    "78e995a37d44cfcf511dcaf7e149a6fd47ba3434": "Ybodychange",
    "5adba5597ce071c2e84d0c9834e1d9e5e76f9bdb": "Ybodychange",
    "e86036662c139cd7e67e69a0215471b1ec724a05": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "d09cf903abcc6af9f9bc77cc79467b859861430a": "Ybodychange",
    "d41cb76b56e19f6eb411b3dacaf28a490d079c68": "Ybodychange",
    "0ea8570be578be60e2f32849900a1c50506d78d3": "Ybodychange",
    "8aabd3d4e67cad8dc7e46f5339981135badc7421": "Ybodychange",
    "df2991c0cbc3f35c2640b93680667507c4f810dd": "Ybodychange",
    "5f6adcf396b78934d7da2bba0d052038ff962f26": "Ybodychange",
    "fafe8cd28e726566509c679e19d7da622f29f90d": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "34b82e6da0a471010cdae613ba39487889d79369": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9813. RM does not start on JDK11 when UIv2 is enabled. (Adam Antal/Eric Yang via wangda)\n\nChange-Id: I18b8edc930b2efa0652f59c246931ad0d46827f3\n",
      "commitDate": "06/09/19 7:18 PM",
      "commitName": "34b82e6da0a471010cdae613ba39487889d79369",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "27/08/19 10:14 AM",
      "commitNameOld": "717c853873dd3b9112f5c15059a24655b8654607",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 10.38,
      "commitsBetweenForRepo": 107,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,88 +1,87 @@\n   protected void startWepApp() {\n     Map\u003cString, String\u003e serviceConfig \u003d null;\n     Configuration conf \u003d getConfig();\n \n     RMWebAppUtil.setupSecurityAndFilters(conf,\n         getClientRMService().rmDTSecretManager);\n \n     Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n     if (getConfig().getBoolean(YarnConfiguration.YARN_API_SERVICES_ENABLE,\n         false)) {\n       String apiPackages \u003d \"org.apache.hadoop.yarn.service.webapp;\" +\n           \"org.apache.hadoop.yarn.webapp\";\n       params.put(\"com.sun.jersey.config.property.resourceConfigClass\",\n           \"com.sun.jersey.api.core.PackagesResourceConfig\");\n       params.put(\"com.sun.jersey.config.property.packages\", apiPackages);\n     }\n \n     Builder\u003cResourceManager\u003e builder \u003d\n         WebApps\n             .$for(\"cluster\", ResourceManager.class, this,\n                 \"ws\")\n             .with(conf)\n             .withServlet(\"API-Service\", \"/app/*\",\n                 ServletContainer.class, params, false)\n             .withHttpSpnegoPrincipalKey(\n                 YarnConfiguration.RM_WEBAPP_SPNEGO_USER_NAME_KEY)\n             .withHttpSpnegoKeytabKey(\n                 YarnConfiguration.RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n             .withCSRFProtection(YarnConfiguration.RM_CSRF_PREFIX)\n             .withXFSProtection(YarnConfiguration.RM_XFS_PREFIX)\n             .at(webAppAddress);\n     String proxyHostAndPort \u003d rmContext.getProxyHostAndPort(conf);\n     if(WebAppUtils.getResolvedRMWebAppURLWithoutScheme(conf).\n         equals(proxyHostAndPort)) {\n       if (HAUtil.isHAEnabled(conf)) {\n         fetcher \u003d new AppReportFetcher(conf);\n       } else {\n         fetcher \u003d new AppReportFetcher(conf, getClientRMService());\n       }\n       builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME,\n           ProxyUriUtils.PROXY_PATH_SPEC, WebAppProxyServlet.class);\n       builder.withAttribute(WebAppProxy.PROXY_CA,\n           rmContext.getProxyCAManager().getProxyCA());\n       builder.withAttribute(WebAppProxy.FETCHER_ATTRIBUTE, fetcher);\n       String[] proxyParts \u003d proxyHostAndPort.split(\":\");\n       builder.withAttribute(WebAppProxy.PROXY_HOST_ATTRIBUTE, proxyParts[0]);\n     }\n \n     WebAppContext uiWebAppContext \u003d null;\n     if (getConfig().getBoolean(YarnConfiguration.YARN_WEBAPP_UI2_ENABLE,\n         YarnConfiguration.DEFAULT_YARN_WEBAPP_UI2_ENABLE)) {\n       String onDiskPath \u003d getConfig()\n           .get(YarnConfiguration.YARN_WEBAPP_UI2_WARFILE_PATH);\n \n       uiWebAppContext \u003d new WebAppContext();\n       uiWebAppContext.setContextPath(UI2_WEBAPP_NAME);\n \n       if (null \u003d\u003d onDiskPath) {\n         String war \u003d \"hadoop-yarn-ui-\" + VersionInfo.getVersion() + \".war\";\n-        URLClassLoader cl \u003d (URLClassLoader) ClassLoader.getSystemClassLoader();\n-        URL url \u003d cl.findResource(war);\n+        URL url \u003d getClass().getClassLoader().getResource(war);\n \n         if (null \u003d\u003d url) {\n           onDiskPath \u003d getWebAppsPath(\"ui2\");\n         } else {\n           onDiskPath \u003d url.getFile();\n         }\n       }\n       if (onDiskPath \u003d\u003d null || onDiskPath.isEmpty()) {\n           LOG.error(\"No war file or webapps found for ui2 !\");\n       } else {\n         if (onDiskPath.endsWith(\".war\")) {\n           uiWebAppContext.setWar(onDiskPath);\n           LOG.info(\"Using war file at: \" + onDiskPath);\n         } else {\n           uiWebAppContext.setResourceBase(onDiskPath);\n           LOG.info(\"Using webapps at: \" + onDiskPath);\n         }\n       }\n     }\n \n     builder.withAttribute(IsResourceManagerActiveServlet.RM_ATTRIBUTE, this);\n     builder.withServlet(IsResourceManagerActiveServlet.SERVLET_NAME,\n         IsResourceManagerActiveServlet.PATH_SPEC,\n         IsResourceManagerActiveServlet.class);\n \n     webApp \u003d builder.start(new RMWebApp(this), uiWebAppContext);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startWepApp() {\n    Map\u003cString, String\u003e serviceConfig \u003d null;\n    Configuration conf \u003d getConfig();\n\n    RMWebAppUtil.setupSecurityAndFilters(conf,\n        getClientRMService().rmDTSecretManager);\n\n    Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n    if (getConfig().getBoolean(YarnConfiguration.YARN_API_SERVICES_ENABLE,\n        false)) {\n      String apiPackages \u003d \"org.apache.hadoop.yarn.service.webapp;\" +\n          \"org.apache.hadoop.yarn.webapp\";\n      params.put(\"com.sun.jersey.config.property.resourceConfigClass\",\n          \"com.sun.jersey.api.core.PackagesResourceConfig\");\n      params.put(\"com.sun.jersey.config.property.packages\", apiPackages);\n    }\n\n    Builder\u003cResourceManager\u003e builder \u003d\n        WebApps\n            .$for(\"cluster\", ResourceManager.class, this,\n                \"ws\")\n            .with(conf)\n            .withServlet(\"API-Service\", \"/app/*\",\n                ServletContainer.class, params, false)\n            .withHttpSpnegoPrincipalKey(\n                YarnConfiguration.RM_WEBAPP_SPNEGO_USER_NAME_KEY)\n            .withHttpSpnegoKeytabKey(\n                YarnConfiguration.RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n            .withCSRFProtection(YarnConfiguration.RM_CSRF_PREFIX)\n            .withXFSProtection(YarnConfiguration.RM_XFS_PREFIX)\n            .at(webAppAddress);\n    String proxyHostAndPort \u003d rmContext.getProxyHostAndPort(conf);\n    if(WebAppUtils.getResolvedRMWebAppURLWithoutScheme(conf).\n        equals(proxyHostAndPort)) {\n      if (HAUtil.isHAEnabled(conf)) {\n        fetcher \u003d new AppReportFetcher(conf);\n      } else {\n        fetcher \u003d new AppReportFetcher(conf, getClientRMService());\n      }\n      builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME,\n          ProxyUriUtils.PROXY_PATH_SPEC, WebAppProxyServlet.class);\n      builder.withAttribute(WebAppProxy.PROXY_CA,\n          rmContext.getProxyCAManager().getProxyCA());\n      builder.withAttribute(WebAppProxy.FETCHER_ATTRIBUTE, fetcher);\n      String[] proxyParts \u003d proxyHostAndPort.split(\":\");\n      builder.withAttribute(WebAppProxy.PROXY_HOST_ATTRIBUTE, proxyParts[0]);\n    }\n\n    WebAppContext uiWebAppContext \u003d null;\n    if (getConfig().getBoolean(YarnConfiguration.YARN_WEBAPP_UI2_ENABLE,\n        YarnConfiguration.DEFAULT_YARN_WEBAPP_UI2_ENABLE)) {\n      String onDiskPath \u003d getConfig()\n          .get(YarnConfiguration.YARN_WEBAPP_UI2_WARFILE_PATH);\n\n      uiWebAppContext \u003d new WebAppContext();\n      uiWebAppContext.setContextPath(UI2_WEBAPP_NAME);\n\n      if (null \u003d\u003d onDiskPath) {\n        String war \u003d \"hadoop-yarn-ui-\" + VersionInfo.getVersion() + \".war\";\n        URL url \u003d getClass().getClassLoader().getResource(war);\n\n        if (null \u003d\u003d url) {\n          onDiskPath \u003d getWebAppsPath(\"ui2\");\n        } else {\n          onDiskPath \u003d url.getFile();\n        }\n      }\n      if (onDiskPath \u003d\u003d null || onDiskPath.isEmpty()) {\n          LOG.error(\"No war file or webapps found for ui2 !\");\n      } else {\n        if (onDiskPath.endsWith(\".war\")) {\n          uiWebAppContext.setWar(onDiskPath);\n          LOG.info(\"Using war file at: \" + onDiskPath);\n        } else {\n          uiWebAppContext.setResourceBase(onDiskPath);\n          LOG.info(\"Using webapps at: \" + onDiskPath);\n        }\n      }\n    }\n\n    builder.withAttribute(IsResourceManagerActiveServlet.RM_ATTRIBUTE, this);\n    builder.withServlet(IsResourceManagerActiveServlet.SERVLET_NAME,\n        IsResourceManagerActiveServlet.PATH_SPEC,\n        IsResourceManagerActiveServlet.class);\n\n    webApp \u003d builder.start(new RMWebApp(this), uiWebAppContext);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "e966edd025332394701fe0d2cfa0d76731183aaf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9644. First RMContext object is always leaked during switch over. Contributed by Bibin A Chundatt.\n",
      "commitDate": "01/07/19 11:48 PM",
      "commitName": "e966edd025332394701fe0d2cfa0d76731183aaf",
      "commitAuthor": "Sunil G",
      "commitDateOld": "15/03/19 4:20 PM",
      "commitNameOld": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 108.31,
      "commitsBetweenForRepo": 757,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,88 +1,88 @@\n   protected void startWepApp() {\n     Map\u003cString, String\u003e serviceConfig \u003d null;\n     Configuration conf \u003d getConfig();\n \n     RMWebAppUtil.setupSecurityAndFilters(conf,\n         getClientRMService().rmDTSecretManager);\n \n     Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n     if (getConfig().getBoolean(YarnConfiguration.YARN_API_SERVICES_ENABLE,\n         false)) {\n       String apiPackages \u003d \"org.apache.hadoop.yarn.service.webapp;\" +\n           \"org.apache.hadoop.yarn.webapp\";\n       params.put(\"com.sun.jersey.config.property.resourceConfigClass\",\n           \"com.sun.jersey.api.core.PackagesResourceConfig\");\n       params.put(\"com.sun.jersey.config.property.packages\", apiPackages);\n     }\n \n-    Builder\u003cApplicationMasterService\u003e builder \u003d \n+    Builder\u003cResourceManager\u003e builder \u003d\n         WebApps\n-            .$for(\"cluster\", ApplicationMasterService.class, masterService,\n+            .$for(\"cluster\", ResourceManager.class, this,\n                 \"ws\")\n             .with(conf)\n             .withServlet(\"API-Service\", \"/app/*\",\n                 ServletContainer.class, params, false)\n             .withHttpSpnegoPrincipalKey(\n                 YarnConfiguration.RM_WEBAPP_SPNEGO_USER_NAME_KEY)\n             .withHttpSpnegoKeytabKey(\n                 YarnConfiguration.RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n             .withCSRFProtection(YarnConfiguration.RM_CSRF_PREFIX)\n             .withXFSProtection(YarnConfiguration.RM_XFS_PREFIX)\n             .at(webAppAddress);\n     String proxyHostAndPort \u003d rmContext.getProxyHostAndPort(conf);\n     if(WebAppUtils.getResolvedRMWebAppURLWithoutScheme(conf).\n         equals(proxyHostAndPort)) {\n       if (HAUtil.isHAEnabled(conf)) {\n         fetcher \u003d new AppReportFetcher(conf);\n       } else {\n         fetcher \u003d new AppReportFetcher(conf, getClientRMService());\n       }\n       builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME,\n           ProxyUriUtils.PROXY_PATH_SPEC, WebAppProxyServlet.class);\n       builder.withAttribute(WebAppProxy.PROXY_CA,\n           rmContext.getProxyCAManager().getProxyCA());\n       builder.withAttribute(WebAppProxy.FETCHER_ATTRIBUTE, fetcher);\n       String[] proxyParts \u003d proxyHostAndPort.split(\":\");\n       builder.withAttribute(WebAppProxy.PROXY_HOST_ATTRIBUTE, proxyParts[0]);\n     }\n \n     WebAppContext uiWebAppContext \u003d null;\n     if (getConfig().getBoolean(YarnConfiguration.YARN_WEBAPP_UI2_ENABLE,\n         YarnConfiguration.DEFAULT_YARN_WEBAPP_UI2_ENABLE)) {\n       String onDiskPath \u003d getConfig()\n           .get(YarnConfiguration.YARN_WEBAPP_UI2_WARFILE_PATH);\n \n       uiWebAppContext \u003d new WebAppContext();\n       uiWebAppContext.setContextPath(UI2_WEBAPP_NAME);\n \n       if (null \u003d\u003d onDiskPath) {\n         String war \u003d \"hadoop-yarn-ui-\" + VersionInfo.getVersion() + \".war\";\n         URLClassLoader cl \u003d (URLClassLoader) ClassLoader.getSystemClassLoader();\n         URL url \u003d cl.findResource(war);\n \n         if (null \u003d\u003d url) {\n           onDiskPath \u003d getWebAppsPath(\"ui2\");\n         } else {\n           onDiskPath \u003d url.getFile();\n         }\n       }\n       if (onDiskPath \u003d\u003d null || onDiskPath.isEmpty()) {\n           LOG.error(\"No war file or webapps found for ui2 !\");\n       } else {\n         if (onDiskPath.endsWith(\".war\")) {\n           uiWebAppContext.setWar(onDiskPath);\n           LOG.info(\"Using war file at: \" + onDiskPath);\n         } else {\n           uiWebAppContext.setResourceBase(onDiskPath);\n           LOG.info(\"Using webapps at: \" + onDiskPath);\n         }\n       }\n     }\n \n     builder.withAttribute(IsResourceManagerActiveServlet.RM_ATTRIBUTE, this);\n     builder.withServlet(IsResourceManagerActiveServlet.SERVLET_NAME,\n         IsResourceManagerActiveServlet.PATH_SPEC,\n         IsResourceManagerActiveServlet.class);\n \n     webApp \u003d builder.start(new RMWebApp(this), uiWebAppContext);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startWepApp() {\n    Map\u003cString, String\u003e serviceConfig \u003d null;\n    Configuration conf \u003d getConfig();\n\n    RMWebAppUtil.setupSecurityAndFilters(conf,\n        getClientRMService().rmDTSecretManager);\n\n    Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n    if (getConfig().getBoolean(YarnConfiguration.YARN_API_SERVICES_ENABLE,\n        false)) {\n      String apiPackages \u003d \"org.apache.hadoop.yarn.service.webapp;\" +\n          \"org.apache.hadoop.yarn.webapp\";\n      params.put(\"com.sun.jersey.config.property.resourceConfigClass\",\n          \"com.sun.jersey.api.core.PackagesResourceConfig\");\n      params.put(\"com.sun.jersey.config.property.packages\", apiPackages);\n    }\n\n    Builder\u003cResourceManager\u003e builder \u003d\n        WebApps\n            .$for(\"cluster\", ResourceManager.class, this,\n                \"ws\")\n            .with(conf)\n            .withServlet(\"API-Service\", \"/app/*\",\n                ServletContainer.class, params, false)\n            .withHttpSpnegoPrincipalKey(\n                YarnConfiguration.RM_WEBAPP_SPNEGO_USER_NAME_KEY)\n            .withHttpSpnegoKeytabKey(\n                YarnConfiguration.RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n            .withCSRFProtection(YarnConfiguration.RM_CSRF_PREFIX)\n            .withXFSProtection(YarnConfiguration.RM_XFS_PREFIX)\n            .at(webAppAddress);\n    String proxyHostAndPort \u003d rmContext.getProxyHostAndPort(conf);\n    if(WebAppUtils.getResolvedRMWebAppURLWithoutScheme(conf).\n        equals(proxyHostAndPort)) {\n      if (HAUtil.isHAEnabled(conf)) {\n        fetcher \u003d new AppReportFetcher(conf);\n      } else {\n        fetcher \u003d new AppReportFetcher(conf, getClientRMService());\n      }\n      builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME,\n          ProxyUriUtils.PROXY_PATH_SPEC, WebAppProxyServlet.class);\n      builder.withAttribute(WebAppProxy.PROXY_CA,\n          rmContext.getProxyCAManager().getProxyCA());\n      builder.withAttribute(WebAppProxy.FETCHER_ATTRIBUTE, fetcher);\n      String[] proxyParts \u003d proxyHostAndPort.split(\":\");\n      builder.withAttribute(WebAppProxy.PROXY_HOST_ATTRIBUTE, proxyParts[0]);\n    }\n\n    WebAppContext uiWebAppContext \u003d null;\n    if (getConfig().getBoolean(YarnConfiguration.YARN_WEBAPP_UI2_ENABLE,\n        YarnConfiguration.DEFAULT_YARN_WEBAPP_UI2_ENABLE)) {\n      String onDiskPath \u003d getConfig()\n          .get(YarnConfiguration.YARN_WEBAPP_UI2_WARFILE_PATH);\n\n      uiWebAppContext \u003d new WebAppContext();\n      uiWebAppContext.setContextPath(UI2_WEBAPP_NAME);\n\n      if (null \u003d\u003d onDiskPath) {\n        String war \u003d \"hadoop-yarn-ui-\" + VersionInfo.getVersion() + \".war\";\n        URLClassLoader cl \u003d (URLClassLoader) ClassLoader.getSystemClassLoader();\n        URL url \u003d cl.findResource(war);\n\n        if (null \u003d\u003d url) {\n          onDiskPath \u003d getWebAppsPath(\"ui2\");\n        } else {\n          onDiskPath \u003d url.getFile();\n        }\n      }\n      if (onDiskPath \u003d\u003d null || onDiskPath.isEmpty()) {\n          LOG.error(\"No war file or webapps found for ui2 !\");\n      } else {\n        if (onDiskPath.endsWith(\".war\")) {\n          uiWebAppContext.setWar(onDiskPath);\n          LOG.info(\"Using war file at: \" + onDiskPath);\n        } else {\n          uiWebAppContext.setResourceBase(onDiskPath);\n          LOG.info(\"Using webapps at: \" + onDiskPath);\n        }\n      }\n    }\n\n    builder.withAttribute(IsResourceManagerActiveServlet.RM_ATTRIBUTE, this);\n    builder.withServlet(IsResourceManagerActiveServlet.SERVLET_NAME,\n        IsResourceManagerActiveServlet.PATH_SPEC,\n        IsResourceManagerActiveServlet.class);\n\n    webApp \u003d builder.start(new RMWebApp(this), uiWebAppContext);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "c2288ac45b748b4119442c46147ccc324926c340": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8448. AM HTTPS Support for AM communication with RMWeb proxy. (Contributed by Robert Kanter)\n",
      "commitDate": "16/10/18 1:36 PM",
      "commitName": "c2288ac45b748b4119442c46147ccc324926c340",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "12/09/18 3:31 AM",
      "commitNameOld": "67ae81f0e0ac7f107261ee15f2eb4d189e3b1983",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 34.42,
      "commitsBetweenForRepo": 369,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,86 +1,88 @@\n   protected void startWepApp() {\n     Map\u003cString, String\u003e serviceConfig \u003d null;\n     Configuration conf \u003d getConfig();\n \n     RMWebAppUtil.setupSecurityAndFilters(conf,\n         getClientRMService().rmDTSecretManager);\n \n     Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n     if (getConfig().getBoolean(YarnConfiguration.YARN_API_SERVICES_ENABLE,\n         false)) {\n       String apiPackages \u003d \"org.apache.hadoop.yarn.service.webapp;\" +\n           \"org.apache.hadoop.yarn.webapp\";\n       params.put(\"com.sun.jersey.config.property.resourceConfigClass\",\n           \"com.sun.jersey.api.core.PackagesResourceConfig\");\n       params.put(\"com.sun.jersey.config.property.packages\", apiPackages);\n     }\n \n     Builder\u003cApplicationMasterService\u003e builder \u003d \n         WebApps\n             .$for(\"cluster\", ApplicationMasterService.class, masterService,\n                 \"ws\")\n             .with(conf)\n             .withServlet(\"API-Service\", \"/app/*\",\n                 ServletContainer.class, params, false)\n             .withHttpSpnegoPrincipalKey(\n                 YarnConfiguration.RM_WEBAPP_SPNEGO_USER_NAME_KEY)\n             .withHttpSpnegoKeytabKey(\n                 YarnConfiguration.RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n             .withCSRFProtection(YarnConfiguration.RM_CSRF_PREFIX)\n             .withXFSProtection(YarnConfiguration.RM_XFS_PREFIX)\n             .at(webAppAddress);\n     String proxyHostAndPort \u003d rmContext.getProxyHostAndPort(conf);\n     if(WebAppUtils.getResolvedRMWebAppURLWithoutScheme(conf).\n         equals(proxyHostAndPort)) {\n       if (HAUtil.isHAEnabled(conf)) {\n         fetcher \u003d new AppReportFetcher(conf);\n       } else {\n         fetcher \u003d new AppReportFetcher(conf, getClientRMService());\n       }\n       builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME,\n           ProxyUriUtils.PROXY_PATH_SPEC, WebAppProxyServlet.class);\n+      builder.withAttribute(WebAppProxy.PROXY_CA,\n+          rmContext.getProxyCAManager().getProxyCA());\n       builder.withAttribute(WebAppProxy.FETCHER_ATTRIBUTE, fetcher);\n       String[] proxyParts \u003d proxyHostAndPort.split(\":\");\n       builder.withAttribute(WebAppProxy.PROXY_HOST_ATTRIBUTE, proxyParts[0]);\n     }\n \n     WebAppContext uiWebAppContext \u003d null;\n     if (getConfig().getBoolean(YarnConfiguration.YARN_WEBAPP_UI2_ENABLE,\n         YarnConfiguration.DEFAULT_YARN_WEBAPP_UI2_ENABLE)) {\n       String onDiskPath \u003d getConfig()\n           .get(YarnConfiguration.YARN_WEBAPP_UI2_WARFILE_PATH);\n \n       uiWebAppContext \u003d new WebAppContext();\n       uiWebAppContext.setContextPath(UI2_WEBAPP_NAME);\n \n       if (null \u003d\u003d onDiskPath) {\n         String war \u003d \"hadoop-yarn-ui-\" + VersionInfo.getVersion() + \".war\";\n         URLClassLoader cl \u003d (URLClassLoader) ClassLoader.getSystemClassLoader();\n         URL url \u003d cl.findResource(war);\n \n         if (null \u003d\u003d url) {\n           onDiskPath \u003d getWebAppsPath(\"ui2\");\n         } else {\n           onDiskPath \u003d url.getFile();\n         }\n       }\n       if (onDiskPath \u003d\u003d null || onDiskPath.isEmpty()) {\n           LOG.error(\"No war file or webapps found for ui2 !\");\n       } else {\n         if (onDiskPath.endsWith(\".war\")) {\n           uiWebAppContext.setWar(onDiskPath);\n           LOG.info(\"Using war file at: \" + onDiskPath);\n         } else {\n           uiWebAppContext.setResourceBase(onDiskPath);\n           LOG.info(\"Using webapps at: \" + onDiskPath);\n         }\n       }\n     }\n \n     builder.withAttribute(IsResourceManagerActiveServlet.RM_ATTRIBUTE, this);\n     builder.withServlet(IsResourceManagerActiveServlet.SERVLET_NAME,\n         IsResourceManagerActiveServlet.PATH_SPEC,\n         IsResourceManagerActiveServlet.class);\n \n     webApp \u003d builder.start(new RMWebApp(this), uiWebAppContext);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startWepApp() {\n    Map\u003cString, String\u003e serviceConfig \u003d null;\n    Configuration conf \u003d getConfig();\n\n    RMWebAppUtil.setupSecurityAndFilters(conf,\n        getClientRMService().rmDTSecretManager);\n\n    Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n    if (getConfig().getBoolean(YarnConfiguration.YARN_API_SERVICES_ENABLE,\n        false)) {\n      String apiPackages \u003d \"org.apache.hadoop.yarn.service.webapp;\" +\n          \"org.apache.hadoop.yarn.webapp\";\n      params.put(\"com.sun.jersey.config.property.resourceConfigClass\",\n          \"com.sun.jersey.api.core.PackagesResourceConfig\");\n      params.put(\"com.sun.jersey.config.property.packages\", apiPackages);\n    }\n\n    Builder\u003cApplicationMasterService\u003e builder \u003d \n        WebApps\n            .$for(\"cluster\", ApplicationMasterService.class, masterService,\n                \"ws\")\n            .with(conf)\n            .withServlet(\"API-Service\", \"/app/*\",\n                ServletContainer.class, params, false)\n            .withHttpSpnegoPrincipalKey(\n                YarnConfiguration.RM_WEBAPP_SPNEGO_USER_NAME_KEY)\n            .withHttpSpnegoKeytabKey(\n                YarnConfiguration.RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n            .withCSRFProtection(YarnConfiguration.RM_CSRF_PREFIX)\n            .withXFSProtection(YarnConfiguration.RM_XFS_PREFIX)\n            .at(webAppAddress);\n    String proxyHostAndPort \u003d rmContext.getProxyHostAndPort(conf);\n    if(WebAppUtils.getResolvedRMWebAppURLWithoutScheme(conf).\n        equals(proxyHostAndPort)) {\n      if (HAUtil.isHAEnabled(conf)) {\n        fetcher \u003d new AppReportFetcher(conf);\n      } else {\n        fetcher \u003d new AppReportFetcher(conf, getClientRMService());\n      }\n      builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME,\n          ProxyUriUtils.PROXY_PATH_SPEC, WebAppProxyServlet.class);\n      builder.withAttribute(WebAppProxy.PROXY_CA,\n          rmContext.getProxyCAManager().getProxyCA());\n      builder.withAttribute(WebAppProxy.FETCHER_ATTRIBUTE, fetcher);\n      String[] proxyParts \u003d proxyHostAndPort.split(\":\");\n      builder.withAttribute(WebAppProxy.PROXY_HOST_ATTRIBUTE, proxyParts[0]);\n    }\n\n    WebAppContext uiWebAppContext \u003d null;\n    if (getConfig().getBoolean(YarnConfiguration.YARN_WEBAPP_UI2_ENABLE,\n        YarnConfiguration.DEFAULT_YARN_WEBAPP_UI2_ENABLE)) {\n      String onDiskPath \u003d getConfig()\n          .get(YarnConfiguration.YARN_WEBAPP_UI2_WARFILE_PATH);\n\n      uiWebAppContext \u003d new WebAppContext();\n      uiWebAppContext.setContextPath(UI2_WEBAPP_NAME);\n\n      if (null \u003d\u003d onDiskPath) {\n        String war \u003d \"hadoop-yarn-ui-\" + VersionInfo.getVersion() + \".war\";\n        URLClassLoader cl \u003d (URLClassLoader) ClassLoader.getSystemClassLoader();\n        URL url \u003d cl.findResource(war);\n\n        if (null \u003d\u003d url) {\n          onDiskPath \u003d getWebAppsPath(\"ui2\");\n        } else {\n          onDiskPath \u003d url.getFile();\n        }\n      }\n      if (onDiskPath \u003d\u003d null || onDiskPath.isEmpty()) {\n          LOG.error(\"No war file or webapps found for ui2 !\");\n      } else {\n        if (onDiskPath.endsWith(\".war\")) {\n          uiWebAppContext.setWar(onDiskPath);\n          LOG.info(\"Using war file at: \" + onDiskPath);\n        } else {\n          uiWebAppContext.setResourceBase(onDiskPath);\n          LOG.info(\"Using webapps at: \" + onDiskPath);\n        }\n      }\n    }\n\n    builder.withAttribute(IsResourceManagerActiveServlet.RM_ATTRIBUTE, this);\n    builder.withServlet(IsResourceManagerActiveServlet.SERVLET_NAME,\n        IsResourceManagerActiveServlet.PATH_SPEC,\n        IsResourceManagerActiveServlet.class);\n\n    webApp \u003d builder.start(new RMWebApp(this), uiWebAppContext);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "9af96d4ed4b6f80d3ca53a2b003d2ef768650dd4": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15707. Add IsActiveServlet to be used for Load Balancers. Contributed by Lukas Majercak.\n",
      "commitDate": "05/09/18 10:50 AM",
      "commitName": "9af96d4ed4b6f80d3ca53a2b003d2ef768650dd4",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "21/08/18 7:42 AM",
      "commitNameOld": "9c3fc3ef2865164aa5f121793ac914cfeb21a181",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 15.13,
      "commitsBetweenForRepo": 88,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,81 +1,86 @@\n   protected void startWepApp() {\n     Map\u003cString, String\u003e serviceConfig \u003d null;\n     Configuration conf \u003d getConfig();\n \n     RMWebAppUtil.setupSecurityAndFilters(conf,\n         getClientRMService().rmDTSecretManager);\n \n     Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n     if (getConfig().getBoolean(YarnConfiguration.YARN_API_SERVICES_ENABLE,\n         false)) {\n       String apiPackages \u003d \"org.apache.hadoop.yarn.service.webapp;\" +\n           \"org.apache.hadoop.yarn.webapp\";\n       params.put(\"com.sun.jersey.config.property.resourceConfigClass\",\n           \"com.sun.jersey.api.core.PackagesResourceConfig\");\n       params.put(\"com.sun.jersey.config.property.packages\", apiPackages);\n     }\n \n     Builder\u003cApplicationMasterService\u003e builder \u003d \n         WebApps\n             .$for(\"cluster\", ApplicationMasterService.class, masterService,\n                 \"ws\")\n             .with(conf)\n             .withServlet(\"API-Service\", \"/app/*\",\n                 ServletContainer.class, params, false)\n             .withHttpSpnegoPrincipalKey(\n                 YarnConfiguration.RM_WEBAPP_SPNEGO_USER_NAME_KEY)\n             .withHttpSpnegoKeytabKey(\n                 YarnConfiguration.RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n             .withCSRFProtection(YarnConfiguration.RM_CSRF_PREFIX)\n             .withXFSProtection(YarnConfiguration.RM_XFS_PREFIX)\n             .at(webAppAddress);\n     String proxyHostAndPort \u003d rmContext.getProxyHostAndPort(conf);\n     if(WebAppUtils.getResolvedRMWebAppURLWithoutScheme(conf).\n         equals(proxyHostAndPort)) {\n       if (HAUtil.isHAEnabled(conf)) {\n         fetcher \u003d new AppReportFetcher(conf);\n       } else {\n         fetcher \u003d new AppReportFetcher(conf, getClientRMService());\n       }\n       builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME,\n           ProxyUriUtils.PROXY_PATH_SPEC, WebAppProxyServlet.class);\n       builder.withAttribute(WebAppProxy.FETCHER_ATTRIBUTE, fetcher);\n       String[] proxyParts \u003d proxyHostAndPort.split(\":\");\n       builder.withAttribute(WebAppProxy.PROXY_HOST_ATTRIBUTE, proxyParts[0]);\n     }\n \n     WebAppContext uiWebAppContext \u003d null;\n     if (getConfig().getBoolean(YarnConfiguration.YARN_WEBAPP_UI2_ENABLE,\n         YarnConfiguration.DEFAULT_YARN_WEBAPP_UI2_ENABLE)) {\n       String onDiskPath \u003d getConfig()\n           .get(YarnConfiguration.YARN_WEBAPP_UI2_WARFILE_PATH);\n \n       uiWebAppContext \u003d new WebAppContext();\n       uiWebAppContext.setContextPath(UI2_WEBAPP_NAME);\n \n       if (null \u003d\u003d onDiskPath) {\n         String war \u003d \"hadoop-yarn-ui-\" + VersionInfo.getVersion() + \".war\";\n         URLClassLoader cl \u003d (URLClassLoader) ClassLoader.getSystemClassLoader();\n         URL url \u003d cl.findResource(war);\n \n         if (null \u003d\u003d url) {\n           onDiskPath \u003d getWebAppsPath(\"ui2\");\n         } else {\n           onDiskPath \u003d url.getFile();\n         }\n       }\n       if (onDiskPath \u003d\u003d null || onDiskPath.isEmpty()) {\n           LOG.error(\"No war file or webapps found for ui2 !\");\n       } else {\n         if (onDiskPath.endsWith(\".war\")) {\n           uiWebAppContext.setWar(onDiskPath);\n           LOG.info(\"Using war file at: \" + onDiskPath);\n         } else {\n           uiWebAppContext.setResourceBase(onDiskPath);\n           LOG.info(\"Using webapps at: \" + onDiskPath);\n         }\n       }\n     }\n \n+    builder.withAttribute(IsResourceManagerActiveServlet.RM_ATTRIBUTE, this);\n+    builder.withServlet(IsResourceManagerActiveServlet.SERVLET_NAME,\n+        IsResourceManagerActiveServlet.PATH_SPEC,\n+        IsResourceManagerActiveServlet.class);\n+\n     webApp \u003d builder.start(new RMWebApp(this), uiWebAppContext);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startWepApp() {\n    Map\u003cString, String\u003e serviceConfig \u003d null;\n    Configuration conf \u003d getConfig();\n\n    RMWebAppUtil.setupSecurityAndFilters(conf,\n        getClientRMService().rmDTSecretManager);\n\n    Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n    if (getConfig().getBoolean(YarnConfiguration.YARN_API_SERVICES_ENABLE,\n        false)) {\n      String apiPackages \u003d \"org.apache.hadoop.yarn.service.webapp;\" +\n          \"org.apache.hadoop.yarn.webapp\";\n      params.put(\"com.sun.jersey.config.property.resourceConfigClass\",\n          \"com.sun.jersey.api.core.PackagesResourceConfig\");\n      params.put(\"com.sun.jersey.config.property.packages\", apiPackages);\n    }\n\n    Builder\u003cApplicationMasterService\u003e builder \u003d \n        WebApps\n            .$for(\"cluster\", ApplicationMasterService.class, masterService,\n                \"ws\")\n            .with(conf)\n            .withServlet(\"API-Service\", \"/app/*\",\n                ServletContainer.class, params, false)\n            .withHttpSpnegoPrincipalKey(\n                YarnConfiguration.RM_WEBAPP_SPNEGO_USER_NAME_KEY)\n            .withHttpSpnegoKeytabKey(\n                YarnConfiguration.RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n            .withCSRFProtection(YarnConfiguration.RM_CSRF_PREFIX)\n            .withXFSProtection(YarnConfiguration.RM_XFS_PREFIX)\n            .at(webAppAddress);\n    String proxyHostAndPort \u003d rmContext.getProxyHostAndPort(conf);\n    if(WebAppUtils.getResolvedRMWebAppURLWithoutScheme(conf).\n        equals(proxyHostAndPort)) {\n      if (HAUtil.isHAEnabled(conf)) {\n        fetcher \u003d new AppReportFetcher(conf);\n      } else {\n        fetcher \u003d new AppReportFetcher(conf, getClientRMService());\n      }\n      builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME,\n          ProxyUriUtils.PROXY_PATH_SPEC, WebAppProxyServlet.class);\n      builder.withAttribute(WebAppProxy.FETCHER_ATTRIBUTE, fetcher);\n      String[] proxyParts \u003d proxyHostAndPort.split(\":\");\n      builder.withAttribute(WebAppProxy.PROXY_HOST_ATTRIBUTE, proxyParts[0]);\n    }\n\n    WebAppContext uiWebAppContext \u003d null;\n    if (getConfig().getBoolean(YarnConfiguration.YARN_WEBAPP_UI2_ENABLE,\n        YarnConfiguration.DEFAULT_YARN_WEBAPP_UI2_ENABLE)) {\n      String onDiskPath \u003d getConfig()\n          .get(YarnConfiguration.YARN_WEBAPP_UI2_WARFILE_PATH);\n\n      uiWebAppContext \u003d new WebAppContext();\n      uiWebAppContext.setContextPath(UI2_WEBAPP_NAME);\n\n      if (null \u003d\u003d onDiskPath) {\n        String war \u003d \"hadoop-yarn-ui-\" + VersionInfo.getVersion() + \".war\";\n        URLClassLoader cl \u003d (URLClassLoader) ClassLoader.getSystemClassLoader();\n        URL url \u003d cl.findResource(war);\n\n        if (null \u003d\u003d url) {\n          onDiskPath \u003d getWebAppsPath(\"ui2\");\n        } else {\n          onDiskPath \u003d url.getFile();\n        }\n      }\n      if (onDiskPath \u003d\u003d null || onDiskPath.isEmpty()) {\n          LOG.error(\"No war file or webapps found for ui2 !\");\n      } else {\n        if (onDiskPath.endsWith(\".war\")) {\n          uiWebAppContext.setWar(onDiskPath);\n          LOG.info(\"Using war file at: \" + onDiskPath);\n        } else {\n          uiWebAppContext.setResourceBase(onDiskPath);\n          LOG.info(\"Using webapps at: \" + onDiskPath);\n        }\n      }\n    }\n\n    builder.withAttribute(IsResourceManagerActiveServlet.RM_ATTRIBUTE, this);\n    builder.withServlet(IsResourceManagerActiveServlet.SERVLET_NAME,\n        IsResourceManagerActiveServlet.PATH_SPEC,\n        IsResourceManagerActiveServlet.class);\n\n    webApp \u003d builder.start(new RMWebApp(this), uiWebAppContext);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "b69ba0f3307a90500aeb0c5db9e582fcda60b501": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8108.  Added option to disable loading existing filters to prevent\n            security filter from initialize twice.\n            Contributed by Sunil Govindan\n",
      "commitDate": "26/06/18 2:34 PM",
      "commitName": "b69ba0f3307a90500aeb0c5db9e582fcda60b501",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "25/05/18 9:53 PM",
      "commitNameOld": "f24c842d52e166e8566337ef93c96438f1c870d8",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 31.7,
      "commitsBetweenForRepo": 204,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,81 +1,81 @@\n   protected void startWepApp() {\n     Map\u003cString, String\u003e serviceConfig \u003d null;\n     Configuration conf \u003d getConfig();\n \n     RMWebAppUtil.setupSecurityAndFilters(conf,\n         getClientRMService().rmDTSecretManager);\n \n     Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n     if (getConfig().getBoolean(YarnConfiguration.YARN_API_SERVICES_ENABLE,\n         false)) {\n       String apiPackages \u003d \"org.apache.hadoop.yarn.service.webapp;\" +\n           \"org.apache.hadoop.yarn.webapp\";\n       params.put(\"com.sun.jersey.config.property.resourceConfigClass\",\n           \"com.sun.jersey.api.core.PackagesResourceConfig\");\n       params.put(\"com.sun.jersey.config.property.packages\", apiPackages);\n     }\n \n     Builder\u003cApplicationMasterService\u003e builder \u003d \n         WebApps\n             .$for(\"cluster\", ApplicationMasterService.class, masterService,\n                 \"ws\")\n             .with(conf)\n             .withServlet(\"API-Service\", \"/app/*\",\n-                ServletContainer.class, params)\n+                ServletContainer.class, params, false)\n             .withHttpSpnegoPrincipalKey(\n                 YarnConfiguration.RM_WEBAPP_SPNEGO_USER_NAME_KEY)\n             .withHttpSpnegoKeytabKey(\n                 YarnConfiguration.RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n             .withCSRFProtection(YarnConfiguration.RM_CSRF_PREFIX)\n             .withXFSProtection(YarnConfiguration.RM_XFS_PREFIX)\n             .at(webAppAddress);\n     String proxyHostAndPort \u003d rmContext.getProxyHostAndPort(conf);\n     if(WebAppUtils.getResolvedRMWebAppURLWithoutScheme(conf).\n         equals(proxyHostAndPort)) {\n       if (HAUtil.isHAEnabled(conf)) {\n         fetcher \u003d new AppReportFetcher(conf);\n       } else {\n         fetcher \u003d new AppReportFetcher(conf, getClientRMService());\n       }\n       builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME,\n           ProxyUriUtils.PROXY_PATH_SPEC, WebAppProxyServlet.class);\n       builder.withAttribute(WebAppProxy.FETCHER_ATTRIBUTE, fetcher);\n       String[] proxyParts \u003d proxyHostAndPort.split(\":\");\n       builder.withAttribute(WebAppProxy.PROXY_HOST_ATTRIBUTE, proxyParts[0]);\n     }\n \n     WebAppContext uiWebAppContext \u003d null;\n     if (getConfig().getBoolean(YarnConfiguration.YARN_WEBAPP_UI2_ENABLE,\n         YarnConfiguration.DEFAULT_YARN_WEBAPP_UI2_ENABLE)) {\n       String onDiskPath \u003d getConfig()\n           .get(YarnConfiguration.YARN_WEBAPP_UI2_WARFILE_PATH);\n \n       uiWebAppContext \u003d new WebAppContext();\n       uiWebAppContext.setContextPath(UI2_WEBAPP_NAME);\n \n       if (null \u003d\u003d onDiskPath) {\n         String war \u003d \"hadoop-yarn-ui-\" + VersionInfo.getVersion() + \".war\";\n         URLClassLoader cl \u003d (URLClassLoader) ClassLoader.getSystemClassLoader();\n         URL url \u003d cl.findResource(war);\n \n         if (null \u003d\u003d url) {\n           onDiskPath \u003d getWebAppsPath(\"ui2\");\n         } else {\n           onDiskPath \u003d url.getFile();\n         }\n       }\n       if (onDiskPath \u003d\u003d null || onDiskPath.isEmpty()) {\n           LOG.error(\"No war file or webapps found for ui2 !\");\n       } else {\n         if (onDiskPath.endsWith(\".war\")) {\n           uiWebAppContext.setWar(onDiskPath);\n           LOG.info(\"Using war file at: \" + onDiskPath);\n         } else {\n           uiWebAppContext.setResourceBase(onDiskPath);\n           LOG.info(\"Using webapps at: \" + onDiskPath);\n         }\n       }\n     }\n \n     webApp \u003d builder.start(new RMWebApp(this), uiWebAppContext);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startWepApp() {\n    Map\u003cString, String\u003e serviceConfig \u003d null;\n    Configuration conf \u003d getConfig();\n\n    RMWebAppUtil.setupSecurityAndFilters(conf,\n        getClientRMService().rmDTSecretManager);\n\n    Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n    if (getConfig().getBoolean(YarnConfiguration.YARN_API_SERVICES_ENABLE,\n        false)) {\n      String apiPackages \u003d \"org.apache.hadoop.yarn.service.webapp;\" +\n          \"org.apache.hadoop.yarn.webapp\";\n      params.put(\"com.sun.jersey.config.property.resourceConfigClass\",\n          \"com.sun.jersey.api.core.PackagesResourceConfig\");\n      params.put(\"com.sun.jersey.config.property.packages\", apiPackages);\n    }\n\n    Builder\u003cApplicationMasterService\u003e builder \u003d \n        WebApps\n            .$for(\"cluster\", ApplicationMasterService.class, masterService,\n                \"ws\")\n            .with(conf)\n            .withServlet(\"API-Service\", \"/app/*\",\n                ServletContainer.class, params, false)\n            .withHttpSpnegoPrincipalKey(\n                YarnConfiguration.RM_WEBAPP_SPNEGO_USER_NAME_KEY)\n            .withHttpSpnegoKeytabKey(\n                YarnConfiguration.RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n            .withCSRFProtection(YarnConfiguration.RM_CSRF_PREFIX)\n            .withXFSProtection(YarnConfiguration.RM_XFS_PREFIX)\n            .at(webAppAddress);\n    String proxyHostAndPort \u003d rmContext.getProxyHostAndPort(conf);\n    if(WebAppUtils.getResolvedRMWebAppURLWithoutScheme(conf).\n        equals(proxyHostAndPort)) {\n      if (HAUtil.isHAEnabled(conf)) {\n        fetcher \u003d new AppReportFetcher(conf);\n      } else {\n        fetcher \u003d new AppReportFetcher(conf, getClientRMService());\n      }\n      builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME,\n          ProxyUriUtils.PROXY_PATH_SPEC, WebAppProxyServlet.class);\n      builder.withAttribute(WebAppProxy.FETCHER_ATTRIBUTE, fetcher);\n      String[] proxyParts \u003d proxyHostAndPort.split(\":\");\n      builder.withAttribute(WebAppProxy.PROXY_HOST_ATTRIBUTE, proxyParts[0]);\n    }\n\n    WebAppContext uiWebAppContext \u003d null;\n    if (getConfig().getBoolean(YarnConfiguration.YARN_WEBAPP_UI2_ENABLE,\n        YarnConfiguration.DEFAULT_YARN_WEBAPP_UI2_ENABLE)) {\n      String onDiskPath \u003d getConfig()\n          .get(YarnConfiguration.YARN_WEBAPP_UI2_WARFILE_PATH);\n\n      uiWebAppContext \u003d new WebAppContext();\n      uiWebAppContext.setContextPath(UI2_WEBAPP_NAME);\n\n      if (null \u003d\u003d onDiskPath) {\n        String war \u003d \"hadoop-yarn-ui-\" + VersionInfo.getVersion() + \".war\";\n        URLClassLoader cl \u003d (URLClassLoader) ClassLoader.getSystemClassLoader();\n        URL url \u003d cl.findResource(war);\n\n        if (null \u003d\u003d url) {\n          onDiskPath \u003d getWebAppsPath(\"ui2\");\n        } else {\n          onDiskPath \u003d url.getFile();\n        }\n      }\n      if (onDiskPath \u003d\u003d null || onDiskPath.isEmpty()) {\n          LOG.error(\"No war file or webapps found for ui2 !\");\n      } else {\n        if (onDiskPath.endsWith(\".war\")) {\n          uiWebAppContext.setWar(onDiskPath);\n          LOG.info(\"Using war file at: \" + onDiskPath);\n        } else {\n          uiWebAppContext.setResourceBase(onDiskPath);\n          LOG.info(\"Using webapps at: \" + onDiskPath);\n        }\n      }\n    }\n\n    webApp \u003d builder.start(new RMWebApp(this), uiWebAppContext);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7540 and YARN-7605. Convert yarn app cli to call yarn api services and implement doAs for Api Service REST API. Contributed by Eric Yang and Jian He\n",
      "commitDate": "23/01/18 5:54 PM",
      "commitName": "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "15/01/18 6:28 PM",
      "commitNameOld": "d09058b2fd18803d12f0835fdf78aef5e0b99c90",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 7.98,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,77 +1,81 @@\n   protected void startWepApp() {\n     Map\u003cString, String\u003e serviceConfig \u003d null;\n     Configuration conf \u003d getConfig();\n \n     RMWebAppUtil.setupSecurityAndFilters(conf,\n         getClientRMService().rmDTSecretManager);\n \n+    Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n+    if (getConfig().getBoolean(YarnConfiguration.YARN_API_SERVICES_ENABLE,\n+        false)) {\n+      String apiPackages \u003d \"org.apache.hadoop.yarn.service.webapp;\" +\n+          \"org.apache.hadoop.yarn.webapp\";\n+      params.put(\"com.sun.jersey.config.property.resourceConfigClass\",\n+          \"com.sun.jersey.api.core.PackagesResourceConfig\");\n+      params.put(\"com.sun.jersey.config.property.packages\", apiPackages);\n+    }\n+\n     Builder\u003cApplicationMasterService\u003e builder \u003d \n         WebApps\n             .$for(\"cluster\", ApplicationMasterService.class, masterService,\n                 \"ws\")\n             .with(conf)\n+            .withServlet(\"API-Service\", \"/app/*\",\n+                ServletContainer.class, params)\n             .withHttpSpnegoPrincipalKey(\n                 YarnConfiguration.RM_WEBAPP_SPNEGO_USER_NAME_KEY)\n             .withHttpSpnegoKeytabKey(\n                 YarnConfiguration.RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n             .withCSRFProtection(YarnConfiguration.RM_CSRF_PREFIX)\n             .withXFSProtection(YarnConfiguration.RM_XFS_PREFIX)\n             .at(webAppAddress);\n     String proxyHostAndPort \u003d rmContext.getProxyHostAndPort(conf);\n     if(WebAppUtils.getResolvedRMWebAppURLWithoutScheme(conf).\n         equals(proxyHostAndPort)) {\n       if (HAUtil.isHAEnabled(conf)) {\n         fetcher \u003d new AppReportFetcher(conf);\n       } else {\n         fetcher \u003d new AppReportFetcher(conf, getClientRMService());\n       }\n       builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME,\n           ProxyUriUtils.PROXY_PATH_SPEC, WebAppProxyServlet.class);\n       builder.withAttribute(WebAppProxy.FETCHER_ATTRIBUTE, fetcher);\n       String[] proxyParts \u003d proxyHostAndPort.split(\":\");\n       builder.withAttribute(WebAppProxy.PROXY_HOST_ATTRIBUTE, proxyParts[0]);\n     }\n \n     WebAppContext uiWebAppContext \u003d null;\n     if (getConfig().getBoolean(YarnConfiguration.YARN_WEBAPP_UI2_ENABLE,\n         YarnConfiguration.DEFAULT_YARN_WEBAPP_UI2_ENABLE)) {\n       String onDiskPath \u003d getConfig()\n           .get(YarnConfiguration.YARN_WEBAPP_UI2_WARFILE_PATH);\n \n       uiWebAppContext \u003d new WebAppContext();\n       uiWebAppContext.setContextPath(UI2_WEBAPP_NAME);\n \n       if (null \u003d\u003d onDiskPath) {\n         String war \u003d \"hadoop-yarn-ui-\" + VersionInfo.getVersion() + \".war\";\n         URLClassLoader cl \u003d (URLClassLoader) ClassLoader.getSystemClassLoader();\n         URL url \u003d cl.findResource(war);\n \n         if (null \u003d\u003d url) {\n           onDiskPath \u003d getWebAppsPath(\"ui2\");\n         } else {\n           onDiskPath \u003d url.getFile();\n         }\n       }\n       if (onDiskPath \u003d\u003d null || onDiskPath.isEmpty()) {\n           LOG.error(\"No war file or webapps found for ui2 !\");\n       } else {\n         if (onDiskPath.endsWith(\".war\")) {\n           uiWebAppContext.setWar(onDiskPath);\n           LOG.info(\"Using war file at: \" + onDiskPath);\n         } else {\n           uiWebAppContext.setResourceBase(onDiskPath);\n           LOG.info(\"Using webapps at: \" + onDiskPath);\n         }\n       }\n     }\n \n-    if (getConfig().getBoolean(YarnConfiguration.YARN_API_SERVICES_ENABLE,\n-        false)) {\n-      serviceConfig \u003d new HashMap\u003cString, String\u003e();\n-      String apiPackages \u003d \"org.apache.hadoop.yarn.service.webapp;\" +\n-          \"org.apache.hadoop.yarn.webapp\";\n-      serviceConfig.put(\"PackageName\", apiPackages);\n-      serviceConfig.put(\"PathSpec\", \"/app/*\");\n-    }\n-    webApp \u003d builder.start(new RMWebApp(this), uiWebAppContext, serviceConfig);\n+    webApp \u003d builder.start(new RMWebApp(this), uiWebAppContext);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startWepApp() {\n    Map\u003cString, String\u003e serviceConfig \u003d null;\n    Configuration conf \u003d getConfig();\n\n    RMWebAppUtil.setupSecurityAndFilters(conf,\n        getClientRMService().rmDTSecretManager);\n\n    Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n    if (getConfig().getBoolean(YarnConfiguration.YARN_API_SERVICES_ENABLE,\n        false)) {\n      String apiPackages \u003d \"org.apache.hadoop.yarn.service.webapp;\" +\n          \"org.apache.hadoop.yarn.webapp\";\n      params.put(\"com.sun.jersey.config.property.resourceConfigClass\",\n          \"com.sun.jersey.api.core.PackagesResourceConfig\");\n      params.put(\"com.sun.jersey.config.property.packages\", apiPackages);\n    }\n\n    Builder\u003cApplicationMasterService\u003e builder \u003d \n        WebApps\n            .$for(\"cluster\", ApplicationMasterService.class, masterService,\n                \"ws\")\n            .with(conf)\n            .withServlet(\"API-Service\", \"/app/*\",\n                ServletContainer.class, params)\n            .withHttpSpnegoPrincipalKey(\n                YarnConfiguration.RM_WEBAPP_SPNEGO_USER_NAME_KEY)\n            .withHttpSpnegoKeytabKey(\n                YarnConfiguration.RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n            .withCSRFProtection(YarnConfiguration.RM_CSRF_PREFIX)\n            .withXFSProtection(YarnConfiguration.RM_XFS_PREFIX)\n            .at(webAppAddress);\n    String proxyHostAndPort \u003d rmContext.getProxyHostAndPort(conf);\n    if(WebAppUtils.getResolvedRMWebAppURLWithoutScheme(conf).\n        equals(proxyHostAndPort)) {\n      if (HAUtil.isHAEnabled(conf)) {\n        fetcher \u003d new AppReportFetcher(conf);\n      } else {\n        fetcher \u003d new AppReportFetcher(conf, getClientRMService());\n      }\n      builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME,\n          ProxyUriUtils.PROXY_PATH_SPEC, WebAppProxyServlet.class);\n      builder.withAttribute(WebAppProxy.FETCHER_ATTRIBUTE, fetcher);\n      String[] proxyParts \u003d proxyHostAndPort.split(\":\");\n      builder.withAttribute(WebAppProxy.PROXY_HOST_ATTRIBUTE, proxyParts[0]);\n    }\n\n    WebAppContext uiWebAppContext \u003d null;\n    if (getConfig().getBoolean(YarnConfiguration.YARN_WEBAPP_UI2_ENABLE,\n        YarnConfiguration.DEFAULT_YARN_WEBAPP_UI2_ENABLE)) {\n      String onDiskPath \u003d getConfig()\n          .get(YarnConfiguration.YARN_WEBAPP_UI2_WARFILE_PATH);\n\n      uiWebAppContext \u003d new WebAppContext();\n      uiWebAppContext.setContextPath(UI2_WEBAPP_NAME);\n\n      if (null \u003d\u003d onDiskPath) {\n        String war \u003d \"hadoop-yarn-ui-\" + VersionInfo.getVersion() + \".war\";\n        URLClassLoader cl \u003d (URLClassLoader) ClassLoader.getSystemClassLoader();\n        URL url \u003d cl.findResource(war);\n\n        if (null \u003d\u003d url) {\n          onDiskPath \u003d getWebAppsPath(\"ui2\");\n        } else {\n          onDiskPath \u003d url.getFile();\n        }\n      }\n      if (onDiskPath \u003d\u003d null || onDiskPath.isEmpty()) {\n          LOG.error(\"No war file or webapps found for ui2 !\");\n      } else {\n        if (onDiskPath.endsWith(\".war\")) {\n          uiWebAppContext.setWar(onDiskPath);\n          LOG.info(\"Using war file at: \" + onDiskPath);\n        } else {\n          uiWebAppContext.setResourceBase(onDiskPath);\n          LOG.info(\"Using webapps at: \" + onDiskPath);\n        }\n      }\n    }\n\n    webApp \u003d builder.start(new RMWebApp(this), uiWebAppContext);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "0940e4f692441f16e742666ac925f71a083eab27": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7218.  Decouple YARN Services REST API namespace from RM.  (Contributed by Eric Yang)\n",
      "commitDate": "17/11/17 9:28 AM",
      "commitName": "0940e4f692441f16e742666ac925f71a083eab27",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "08/11/17 8:00 AM",
      "commitNameOld": "a9c70b0e84dab0c41e480a0dc0cb1a22efdc64ee",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 9.06,
      "commitsBetweenForRepo": 59,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,69 +1,77 @@\n   protected void startWepApp() {\n-\n+    Map\u003cString, String\u003e serviceConfig \u003d null;\n     Configuration conf \u003d getConfig();\n \n     RMWebAppUtil.setupSecurityAndFilters(conf,\n         getClientRMService().rmDTSecretManager);\n \n     Builder\u003cApplicationMasterService\u003e builder \u003d \n         WebApps\n             .$for(\"cluster\", ApplicationMasterService.class, masterService,\n                 \"ws\")\n             .with(conf)\n             .withHttpSpnegoPrincipalKey(\n                 YarnConfiguration.RM_WEBAPP_SPNEGO_USER_NAME_KEY)\n             .withHttpSpnegoKeytabKey(\n                 YarnConfiguration.RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n             .withCSRFProtection(YarnConfiguration.RM_CSRF_PREFIX)\n             .withXFSProtection(YarnConfiguration.RM_XFS_PREFIX)\n             .at(webAppAddress);\n     String proxyHostAndPort \u003d rmContext.getProxyHostAndPort(conf);\n     if(WebAppUtils.getResolvedRMWebAppURLWithoutScheme(conf).\n         equals(proxyHostAndPort)) {\n       if (HAUtil.isHAEnabled(conf)) {\n         fetcher \u003d new AppReportFetcher(conf);\n       } else {\n         fetcher \u003d new AppReportFetcher(conf, getClientRMService());\n       }\n       builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME,\n           ProxyUriUtils.PROXY_PATH_SPEC, WebAppProxyServlet.class);\n       builder.withAttribute(WebAppProxy.FETCHER_ATTRIBUTE, fetcher);\n       String[] proxyParts \u003d proxyHostAndPort.split(\":\");\n       builder.withAttribute(WebAppProxy.PROXY_HOST_ATTRIBUTE, proxyParts[0]);\n     }\n \n     WebAppContext uiWebAppContext \u003d null;\n     if (getConfig().getBoolean(YarnConfiguration.YARN_WEBAPP_UI2_ENABLE,\n         YarnConfiguration.DEFAULT_YARN_WEBAPP_UI2_ENABLE)) {\n       String onDiskPath \u003d getConfig()\n           .get(YarnConfiguration.YARN_WEBAPP_UI2_WARFILE_PATH);\n \n       uiWebAppContext \u003d new WebAppContext();\n       uiWebAppContext.setContextPath(UI2_WEBAPP_NAME);\n \n       if (null \u003d\u003d onDiskPath) {\n         String war \u003d \"hadoop-yarn-ui-\" + VersionInfo.getVersion() + \".war\";\n         URLClassLoader cl \u003d (URLClassLoader) ClassLoader.getSystemClassLoader();\n         URL url \u003d cl.findResource(war);\n \n         if (null \u003d\u003d url) {\n           onDiskPath \u003d getWebAppsPath(\"ui2\");\n         } else {\n           onDiskPath \u003d url.getFile();\n         }\n       }\n       if (onDiskPath \u003d\u003d null || onDiskPath.isEmpty()) {\n           LOG.error(\"No war file or webapps found for ui2 !\");\n       } else {\n         if (onDiskPath.endsWith(\".war\")) {\n           uiWebAppContext.setWar(onDiskPath);\n           LOG.info(\"Using war file at: \" + onDiskPath);\n         } else {\n           uiWebAppContext.setResourceBase(onDiskPath);\n           LOG.info(\"Using webapps at: \" + onDiskPath);\n         }\n       }\n     }\n \n-    webApp \u003d builder.start(new RMWebApp(this), uiWebAppContext);\n+    if (getConfig().getBoolean(YarnConfiguration.YARN_API_SERVICES_ENABLE,\n+        false)) {\n+      serviceConfig \u003d new HashMap\u003cString, String\u003e();\n+      String apiPackages \u003d \"org.apache.hadoop.yarn.service.webapp;\" +\n+          \"org.apache.hadoop.yarn.webapp\";\n+      serviceConfig.put(\"PackageName\", apiPackages);\n+      serviceConfig.put(\"PathSpec\", \"/app/*\");\n+    }\n+    webApp \u003d builder.start(new RMWebApp(this), uiWebAppContext, serviceConfig);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startWepApp() {\n    Map\u003cString, String\u003e serviceConfig \u003d null;\n    Configuration conf \u003d getConfig();\n\n    RMWebAppUtil.setupSecurityAndFilters(conf,\n        getClientRMService().rmDTSecretManager);\n\n    Builder\u003cApplicationMasterService\u003e builder \u003d \n        WebApps\n            .$for(\"cluster\", ApplicationMasterService.class, masterService,\n                \"ws\")\n            .with(conf)\n            .withHttpSpnegoPrincipalKey(\n                YarnConfiguration.RM_WEBAPP_SPNEGO_USER_NAME_KEY)\n            .withHttpSpnegoKeytabKey(\n                YarnConfiguration.RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n            .withCSRFProtection(YarnConfiguration.RM_CSRF_PREFIX)\n            .withXFSProtection(YarnConfiguration.RM_XFS_PREFIX)\n            .at(webAppAddress);\n    String proxyHostAndPort \u003d rmContext.getProxyHostAndPort(conf);\n    if(WebAppUtils.getResolvedRMWebAppURLWithoutScheme(conf).\n        equals(proxyHostAndPort)) {\n      if (HAUtil.isHAEnabled(conf)) {\n        fetcher \u003d new AppReportFetcher(conf);\n      } else {\n        fetcher \u003d new AppReportFetcher(conf, getClientRMService());\n      }\n      builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME,\n          ProxyUriUtils.PROXY_PATH_SPEC, WebAppProxyServlet.class);\n      builder.withAttribute(WebAppProxy.FETCHER_ATTRIBUTE, fetcher);\n      String[] proxyParts \u003d proxyHostAndPort.split(\":\");\n      builder.withAttribute(WebAppProxy.PROXY_HOST_ATTRIBUTE, proxyParts[0]);\n    }\n\n    WebAppContext uiWebAppContext \u003d null;\n    if (getConfig().getBoolean(YarnConfiguration.YARN_WEBAPP_UI2_ENABLE,\n        YarnConfiguration.DEFAULT_YARN_WEBAPP_UI2_ENABLE)) {\n      String onDiskPath \u003d getConfig()\n          .get(YarnConfiguration.YARN_WEBAPP_UI2_WARFILE_PATH);\n\n      uiWebAppContext \u003d new WebAppContext();\n      uiWebAppContext.setContextPath(UI2_WEBAPP_NAME);\n\n      if (null \u003d\u003d onDiskPath) {\n        String war \u003d \"hadoop-yarn-ui-\" + VersionInfo.getVersion() + \".war\";\n        URLClassLoader cl \u003d (URLClassLoader) ClassLoader.getSystemClassLoader();\n        URL url \u003d cl.findResource(war);\n\n        if (null \u003d\u003d url) {\n          onDiskPath \u003d getWebAppsPath(\"ui2\");\n        } else {\n          onDiskPath \u003d url.getFile();\n        }\n      }\n      if (onDiskPath \u003d\u003d null || onDiskPath.isEmpty()) {\n          LOG.error(\"No war file or webapps found for ui2 !\");\n      } else {\n        if (onDiskPath.endsWith(\".war\")) {\n          uiWebAppContext.setWar(onDiskPath);\n          LOG.info(\"Using war file at: \" + onDiskPath);\n        } else {\n          uiWebAppContext.setResourceBase(onDiskPath);\n          LOG.info(\"Using webapps at: \" + onDiskPath);\n        }\n      }\n    }\n\n    if (getConfig().getBoolean(YarnConfiguration.YARN_API_SERVICES_ENABLE,\n        false)) {\n      serviceConfig \u003d new HashMap\u003cString, String\u003e();\n      String apiPackages \u003d \"org.apache.hadoop.yarn.service.webapp;\" +\n          \"org.apache.hadoop.yarn.webapp\";\n      serviceConfig.put(\"PackageName\", apiPackages);\n      serviceConfig.put(\"PathSpec\", \"/app/*\");\n    }\n    webApp \u003d builder.start(new RMWebApp(this), uiWebAppContext, serviceConfig);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "72d22b753abde4d07a727479d3f3d5d84d5dd6b2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7207. Cache the RM proxy server address. (Yufei Gu)\n",
      "commitDate": "06/10/17 9:49 AM",
      "commitName": "72d22b753abde4d07a727479d3f3d5d84d5dd6b2",
      "commitAuthor": "Yufei Gu",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "e490602e9b306d5b8a543b93fb15a7395bb9a03d",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 24.02,
      "commitsBetweenForRepo": 204,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,69 +1,69 @@\n   protected void startWepApp() {\n \n     Configuration conf \u003d getConfig();\n \n     RMWebAppUtil.setupSecurityAndFilters(conf,\n         getClientRMService().rmDTSecretManager);\n \n     Builder\u003cApplicationMasterService\u003e builder \u003d \n         WebApps\n             .$for(\"cluster\", ApplicationMasterService.class, masterService,\n                 \"ws\")\n             .with(conf)\n             .withHttpSpnegoPrincipalKey(\n                 YarnConfiguration.RM_WEBAPP_SPNEGO_USER_NAME_KEY)\n             .withHttpSpnegoKeytabKey(\n                 YarnConfiguration.RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n             .withCSRFProtection(YarnConfiguration.RM_CSRF_PREFIX)\n             .withXFSProtection(YarnConfiguration.RM_XFS_PREFIX)\n             .at(webAppAddress);\n-    String proxyHostAndPort \u003d WebAppUtils.getProxyHostAndPort(conf);\n+    String proxyHostAndPort \u003d rmContext.getProxyHostAndPort(conf);\n     if(WebAppUtils.getResolvedRMWebAppURLWithoutScheme(conf).\n         equals(proxyHostAndPort)) {\n       if (HAUtil.isHAEnabled(conf)) {\n         fetcher \u003d new AppReportFetcher(conf);\n       } else {\n         fetcher \u003d new AppReportFetcher(conf, getClientRMService());\n       }\n       builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME,\n           ProxyUriUtils.PROXY_PATH_SPEC, WebAppProxyServlet.class);\n       builder.withAttribute(WebAppProxy.FETCHER_ATTRIBUTE, fetcher);\n       String[] proxyParts \u003d proxyHostAndPort.split(\":\");\n       builder.withAttribute(WebAppProxy.PROXY_HOST_ATTRIBUTE, proxyParts[0]);\n     }\n \n     WebAppContext uiWebAppContext \u003d null;\n     if (getConfig().getBoolean(YarnConfiguration.YARN_WEBAPP_UI2_ENABLE,\n         YarnConfiguration.DEFAULT_YARN_WEBAPP_UI2_ENABLE)) {\n       String onDiskPath \u003d getConfig()\n           .get(YarnConfiguration.YARN_WEBAPP_UI2_WARFILE_PATH);\n \n       uiWebAppContext \u003d new WebAppContext();\n       uiWebAppContext.setContextPath(UI2_WEBAPP_NAME);\n \n       if (null \u003d\u003d onDiskPath) {\n         String war \u003d \"hadoop-yarn-ui-\" + VersionInfo.getVersion() + \".war\";\n         URLClassLoader cl \u003d (URLClassLoader) ClassLoader.getSystemClassLoader();\n         URL url \u003d cl.findResource(war);\n \n         if (null \u003d\u003d url) {\n           onDiskPath \u003d getWebAppsPath(\"ui2\");\n         } else {\n           onDiskPath \u003d url.getFile();\n         }\n       }\n       if (onDiskPath \u003d\u003d null || onDiskPath.isEmpty()) {\n           LOG.error(\"No war file or webapps found for ui2 !\");\n       } else {\n         if (onDiskPath.endsWith(\".war\")) {\n           uiWebAppContext.setWar(onDiskPath);\n           LOG.info(\"Using war file at: \" + onDiskPath);\n         } else {\n           uiWebAppContext.setResourceBase(onDiskPath);\n           LOG.info(\"Using webapps at: \" + onDiskPath);\n         }\n       }\n     }\n \n     webApp \u003d builder.start(new RMWebApp(this), uiWebAppContext);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startWepApp() {\n\n    Configuration conf \u003d getConfig();\n\n    RMWebAppUtil.setupSecurityAndFilters(conf,\n        getClientRMService().rmDTSecretManager);\n\n    Builder\u003cApplicationMasterService\u003e builder \u003d \n        WebApps\n            .$for(\"cluster\", ApplicationMasterService.class, masterService,\n                \"ws\")\n            .with(conf)\n            .withHttpSpnegoPrincipalKey(\n                YarnConfiguration.RM_WEBAPP_SPNEGO_USER_NAME_KEY)\n            .withHttpSpnegoKeytabKey(\n                YarnConfiguration.RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n            .withCSRFProtection(YarnConfiguration.RM_CSRF_PREFIX)\n            .withXFSProtection(YarnConfiguration.RM_XFS_PREFIX)\n            .at(webAppAddress);\n    String proxyHostAndPort \u003d rmContext.getProxyHostAndPort(conf);\n    if(WebAppUtils.getResolvedRMWebAppURLWithoutScheme(conf).\n        equals(proxyHostAndPort)) {\n      if (HAUtil.isHAEnabled(conf)) {\n        fetcher \u003d new AppReportFetcher(conf);\n      } else {\n        fetcher \u003d new AppReportFetcher(conf, getClientRMService());\n      }\n      builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME,\n          ProxyUriUtils.PROXY_PATH_SPEC, WebAppProxyServlet.class);\n      builder.withAttribute(WebAppProxy.FETCHER_ATTRIBUTE, fetcher);\n      String[] proxyParts \u003d proxyHostAndPort.split(\":\");\n      builder.withAttribute(WebAppProxy.PROXY_HOST_ATTRIBUTE, proxyParts[0]);\n    }\n\n    WebAppContext uiWebAppContext \u003d null;\n    if (getConfig().getBoolean(YarnConfiguration.YARN_WEBAPP_UI2_ENABLE,\n        YarnConfiguration.DEFAULT_YARN_WEBAPP_UI2_ENABLE)) {\n      String onDiskPath \u003d getConfig()\n          .get(YarnConfiguration.YARN_WEBAPP_UI2_WARFILE_PATH);\n\n      uiWebAppContext \u003d new WebAppContext();\n      uiWebAppContext.setContextPath(UI2_WEBAPP_NAME);\n\n      if (null \u003d\u003d onDiskPath) {\n        String war \u003d \"hadoop-yarn-ui-\" + VersionInfo.getVersion() + \".war\";\n        URLClassLoader cl \u003d (URLClassLoader) ClassLoader.getSystemClassLoader();\n        URL url \u003d cl.findResource(war);\n\n        if (null \u003d\u003d url) {\n          onDiskPath \u003d getWebAppsPath(\"ui2\");\n        } else {\n          onDiskPath \u003d url.getFile();\n        }\n      }\n      if (onDiskPath \u003d\u003d null || onDiskPath.isEmpty()) {\n          LOG.error(\"No war file or webapps found for ui2 !\");\n      } else {\n        if (onDiskPath.endsWith(\".war\")) {\n          uiWebAppContext.setWar(onDiskPath);\n          LOG.info(\"Using war file at: \" + onDiskPath);\n        } else {\n          uiWebAppContext.setResourceBase(onDiskPath);\n          LOG.info(\"Using webapps at: \" + onDiskPath);\n        }\n      }\n    }\n\n    webApp \u003d builder.start(new RMWebApp(this), uiWebAppContext);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "e135c0b20794705dabf86a296d934eb8df02a774": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6627. Use deployed webapp folder to launch new YARN UI. Contributed by Sunil G\n",
      "commitDate": "19/05/17 8:14 PM",
      "commitName": "e135c0b20794705dabf86a296d934eb8df02a774",
      "commitAuthor": "Jian He",
      "commitDateOld": "12/05/17 5:48 PM",
      "commitNameOld": "6600abbb5c23a83e3a9ef48a945bc8fe19c8178a",
      "commitAuthorOld": "Carlo Curino",
      "daysBetweenCommits": 7.1,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,69 @@\n   protected void startWepApp() {\n \n     Configuration conf \u003d getConfig();\n \n     RMWebAppUtil.setupSecurityAndFilters(conf,\n         getClientRMService().rmDTSecretManager);\n \n     Builder\u003cApplicationMasterService\u003e builder \u003d \n         WebApps\n             .$for(\"cluster\", ApplicationMasterService.class, masterService,\n                 \"ws\")\n             .with(conf)\n             .withHttpSpnegoPrincipalKey(\n                 YarnConfiguration.RM_WEBAPP_SPNEGO_USER_NAME_KEY)\n             .withHttpSpnegoKeytabKey(\n                 YarnConfiguration.RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n             .withCSRFProtection(YarnConfiguration.RM_CSRF_PREFIX)\n             .withXFSProtection(YarnConfiguration.RM_XFS_PREFIX)\n             .at(webAppAddress);\n     String proxyHostAndPort \u003d WebAppUtils.getProxyHostAndPort(conf);\n     if(WebAppUtils.getResolvedRMWebAppURLWithoutScheme(conf).\n         equals(proxyHostAndPort)) {\n       if (HAUtil.isHAEnabled(conf)) {\n         fetcher \u003d new AppReportFetcher(conf);\n       } else {\n         fetcher \u003d new AppReportFetcher(conf, getClientRMService());\n       }\n       builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME,\n           ProxyUriUtils.PROXY_PATH_SPEC, WebAppProxyServlet.class);\n       builder.withAttribute(WebAppProxy.FETCHER_ATTRIBUTE, fetcher);\n       String[] proxyParts \u003d proxyHostAndPort.split(\":\");\n       builder.withAttribute(WebAppProxy.PROXY_HOST_ATTRIBUTE, proxyParts[0]);\n     }\n \n     WebAppContext uiWebAppContext \u003d null;\n     if (getConfig().getBoolean(YarnConfiguration.YARN_WEBAPP_UI2_ENABLE,\n         YarnConfiguration.DEFAULT_YARN_WEBAPP_UI2_ENABLE)) {\n-      String webPath \u003d UI2_WEBAPP_NAME;\n       String onDiskPath \u003d getConfig()\n           .get(YarnConfiguration.YARN_WEBAPP_UI2_WARFILE_PATH);\n \n+      uiWebAppContext \u003d new WebAppContext();\n+      uiWebAppContext.setContextPath(UI2_WEBAPP_NAME);\n+\n       if (null \u003d\u003d onDiskPath) {\n         String war \u003d \"hadoop-yarn-ui-\" + VersionInfo.getVersion() + \".war\";\n         URLClassLoader cl \u003d (URLClassLoader) ClassLoader.getSystemClassLoader();\n         URL url \u003d cl.findResource(war);\n \n         if (null \u003d\u003d url) {\n-          onDiskPath \u003d \"\";\n+          onDiskPath \u003d getWebAppsPath(\"ui2\");\n         } else {\n           onDiskPath \u003d url.getFile();\n         }\n-\n-        LOG.info(\n-            \"New web UI war file name:\" + war + \", and path:\" + onDiskPath);\n       }\n-\n-      uiWebAppContext \u003d new WebAppContext();\n-      uiWebAppContext.setContextPath(webPath);\n-      uiWebAppContext.setWar(onDiskPath);\n+      if (onDiskPath \u003d\u003d null || onDiskPath.isEmpty()) {\n+          LOG.error(\"No war file or webapps found for ui2 !\");\n+      } else {\n+        if (onDiskPath.endsWith(\".war\")) {\n+          uiWebAppContext.setWar(onDiskPath);\n+          LOG.info(\"Using war file at: \" + onDiskPath);\n+        } else {\n+          uiWebAppContext.setResourceBase(onDiskPath);\n+          LOG.info(\"Using webapps at: \" + onDiskPath);\n+        }\n+      }\n     }\n \n     webApp \u003d builder.start(new RMWebApp(this), uiWebAppContext);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startWepApp() {\n\n    Configuration conf \u003d getConfig();\n\n    RMWebAppUtil.setupSecurityAndFilters(conf,\n        getClientRMService().rmDTSecretManager);\n\n    Builder\u003cApplicationMasterService\u003e builder \u003d \n        WebApps\n            .$for(\"cluster\", ApplicationMasterService.class, masterService,\n                \"ws\")\n            .with(conf)\n            .withHttpSpnegoPrincipalKey(\n                YarnConfiguration.RM_WEBAPP_SPNEGO_USER_NAME_KEY)\n            .withHttpSpnegoKeytabKey(\n                YarnConfiguration.RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n            .withCSRFProtection(YarnConfiguration.RM_CSRF_PREFIX)\n            .withXFSProtection(YarnConfiguration.RM_XFS_PREFIX)\n            .at(webAppAddress);\n    String proxyHostAndPort \u003d WebAppUtils.getProxyHostAndPort(conf);\n    if(WebAppUtils.getResolvedRMWebAppURLWithoutScheme(conf).\n        equals(proxyHostAndPort)) {\n      if (HAUtil.isHAEnabled(conf)) {\n        fetcher \u003d new AppReportFetcher(conf);\n      } else {\n        fetcher \u003d new AppReportFetcher(conf, getClientRMService());\n      }\n      builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME,\n          ProxyUriUtils.PROXY_PATH_SPEC, WebAppProxyServlet.class);\n      builder.withAttribute(WebAppProxy.FETCHER_ATTRIBUTE, fetcher);\n      String[] proxyParts \u003d proxyHostAndPort.split(\":\");\n      builder.withAttribute(WebAppProxy.PROXY_HOST_ATTRIBUTE, proxyParts[0]);\n    }\n\n    WebAppContext uiWebAppContext \u003d null;\n    if (getConfig().getBoolean(YarnConfiguration.YARN_WEBAPP_UI2_ENABLE,\n        YarnConfiguration.DEFAULT_YARN_WEBAPP_UI2_ENABLE)) {\n      String onDiskPath \u003d getConfig()\n          .get(YarnConfiguration.YARN_WEBAPP_UI2_WARFILE_PATH);\n\n      uiWebAppContext \u003d new WebAppContext();\n      uiWebAppContext.setContextPath(UI2_WEBAPP_NAME);\n\n      if (null \u003d\u003d onDiskPath) {\n        String war \u003d \"hadoop-yarn-ui-\" + VersionInfo.getVersion() + \".war\";\n        URLClassLoader cl \u003d (URLClassLoader) ClassLoader.getSystemClassLoader();\n        URL url \u003d cl.findResource(war);\n\n        if (null \u003d\u003d url) {\n          onDiskPath \u003d getWebAppsPath(\"ui2\");\n        } else {\n          onDiskPath \u003d url.getFile();\n        }\n      }\n      if (onDiskPath \u003d\u003d null || onDiskPath.isEmpty()) {\n          LOG.error(\"No war file or webapps found for ui2 !\");\n      } else {\n        if (onDiskPath.endsWith(\".war\")) {\n          uiWebAppContext.setWar(onDiskPath);\n          LOG.info(\"Using war file at: \" + onDiskPath);\n        } else {\n          uiWebAppContext.setResourceBase(onDiskPath);\n          LOG.info(\"Using webapps at: \" + onDiskPath);\n        }\n      }\n    }\n\n    webApp \u003d builder.start(new RMWebApp(this), uiWebAppContext);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "6600abbb5c23a83e3a9ef48a945bc8fe19c8178a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6587. Refactor of ResourceManager#startWebApp in a Util class. (Giovanni Matteo Fumarola via curino).\n",
      "commitDate": "12/05/17 5:48 PM",
      "commitName": "6600abbb5c23a83e3a9ef48a945bc8fe19c8178a",
      "commitAuthor": "Carlo Curino",
      "commitDateOld": "09/05/17 2:44 PM",
      "commitNameOld": "166be0ee95d5ef976f074342656b289b41a11ccd",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 3.13,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,145 +1,63 @@\n   protected void startWepApp() {\n \n-    // Use the customized yarn filter instead of the standard kerberos filter to\n-    // allow users to authenticate using delegation tokens\n-    // 4 conditions need to be satisfied -\n-    // 1. security is enabled\n-    // 2. http auth type is set to kerberos\n-    // 3. \"yarn.resourcemanager.webapp.use-yarn-filter\" override is set to true\n-    // 4. hadoop.http.filter.initializers container AuthenticationFilterInitializer\n-\n     Configuration conf \u003d getConfig();\n-    boolean enableCorsFilter \u003d\n-        conf.getBoolean(YarnConfiguration.RM_WEBAPP_ENABLE_CORS_FILTER,\n-            YarnConfiguration.DEFAULT_RM_WEBAPP_ENABLE_CORS_FILTER);\n-    boolean useYarnAuthenticationFilter \u003d\n-        conf.getBoolean(\n-          YarnConfiguration.RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER,\n-          YarnConfiguration.DEFAULT_RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER);\n-    String authPrefix \u003d \"hadoop.http.authentication.\";\n-    String authTypeKey \u003d authPrefix + \"type\";\n-    String filterInitializerConfKey \u003d \"hadoop.http.filter.initializers\";\n-    String actualInitializers \u003d \"\";\n-    Class\u003c?\u003e[] initializersClasses \u003d\n-        conf.getClasses(filterInitializerConfKey);\n \n-    // setup CORS\n-    if (enableCorsFilter) {\n-      conf.setBoolean(HttpCrossOriginFilterInitializer.PREFIX\n-          + HttpCrossOriginFilterInitializer.ENABLED_SUFFIX, true);\n-    }\n-\n-    boolean hasHadoopAuthFilterInitializer \u003d false;\n-    boolean hasRMAuthFilterInitializer \u003d false;\n-    if (initializersClasses !\u003d null) {\n-      for (Class\u003c?\u003e initializer : initializersClasses) {\n-        if (initializer.getName().equals(\n-          AuthenticationFilterInitializer.class.getName())) {\n-          hasHadoopAuthFilterInitializer \u003d true;\n-        }\n-        if (initializer.getName().equals(\n-          RMAuthenticationFilterInitializer.class.getName())) {\n-          hasRMAuthFilterInitializer \u003d true;\n-        }\n-      }\n-      if (UserGroupInformation.isSecurityEnabled()\n-          \u0026\u0026 useYarnAuthenticationFilter\n-          \u0026\u0026 hasHadoopAuthFilterInitializer\n-          \u0026\u0026 conf.get(authTypeKey, \"\").equals(\n-            KerberosAuthenticationHandler.TYPE)) {\n-        ArrayList\u003cString\u003e target \u003d new ArrayList\u003cString\u003e();\n-        for (Class\u003c?\u003e filterInitializer : initializersClasses) {\n-          if (filterInitializer.getName().equals(\n-            AuthenticationFilterInitializer.class.getName())) {\n-            if (hasRMAuthFilterInitializer \u003d\u003d false) {\n-              target.add(RMAuthenticationFilterInitializer.class.getName());\n-            }\n-            continue;\n-          }\n-          target.add(filterInitializer.getName());\n-        }\n-        actualInitializers \u003d StringUtils.join(\",\", target);\n-\n-        LOG.info(\"Using RM authentication filter(kerberos/delegation-token)\"\n-            + \" for RM webapp authentication\");\n-        RMAuthenticationFilter\n-          .setDelegationTokenSecretManager(getClientRMService().rmDTSecretManager);\n-        conf.set(filterInitializerConfKey, actualInitializers);\n-      }\n-    }\n-\n-    // if security is not enabled and the default filter initializer has not \n-    // been set, set the initializer to include the\n-    // RMAuthenticationFilterInitializer which in turn will set up the simple\n-    // auth filter.\n-\n-    String initializers \u003d conf.get(filterInitializerConfKey);\n-    if (!UserGroupInformation.isSecurityEnabled()) {\n-      if (initializersClasses \u003d\u003d null || initializersClasses.length \u003d\u003d 0) {\n-        conf.set(filterInitializerConfKey,\n-          RMAuthenticationFilterInitializer.class.getName());\n-        conf.set(authTypeKey, \"simple\");\n-      } else if (initializers.equals(StaticUserWebFilter.class.getName())) {\n-        conf.set(filterInitializerConfKey,\n-          RMAuthenticationFilterInitializer.class.getName() + \",\"\n-              + initializers);\n-        conf.set(authTypeKey, \"simple\");\n-      }\n-    }\n+    RMWebAppUtil.setupSecurityAndFilters(conf,\n+        getClientRMService().rmDTSecretManager);\n \n     Builder\u003cApplicationMasterService\u003e builder \u003d \n         WebApps\n             .$for(\"cluster\", ApplicationMasterService.class, masterService,\n                 \"ws\")\n             .with(conf)\n             .withHttpSpnegoPrincipalKey(\n                 YarnConfiguration.RM_WEBAPP_SPNEGO_USER_NAME_KEY)\n             .withHttpSpnegoKeytabKey(\n                 YarnConfiguration.RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n             .withCSRFProtection(YarnConfiguration.RM_CSRF_PREFIX)\n             .withXFSProtection(YarnConfiguration.RM_XFS_PREFIX)\n             .at(webAppAddress);\n     String proxyHostAndPort \u003d WebAppUtils.getProxyHostAndPort(conf);\n     if(WebAppUtils.getResolvedRMWebAppURLWithoutScheme(conf).\n         equals(proxyHostAndPort)) {\n       if (HAUtil.isHAEnabled(conf)) {\n         fetcher \u003d new AppReportFetcher(conf);\n       } else {\n         fetcher \u003d new AppReportFetcher(conf, getClientRMService());\n       }\n       builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME,\n           ProxyUriUtils.PROXY_PATH_SPEC, WebAppProxyServlet.class);\n       builder.withAttribute(WebAppProxy.FETCHER_ATTRIBUTE, fetcher);\n       String[] proxyParts \u003d proxyHostAndPort.split(\":\");\n       builder.withAttribute(WebAppProxy.PROXY_HOST_ATTRIBUTE, proxyParts[0]);\n     }\n \n     WebAppContext uiWebAppContext \u003d null;\n     if (getConfig().getBoolean(YarnConfiguration.YARN_WEBAPP_UI2_ENABLE,\n         YarnConfiguration.DEFAULT_YARN_WEBAPP_UI2_ENABLE)) {\n       String webPath \u003d UI2_WEBAPP_NAME;\n       String onDiskPath \u003d getConfig()\n           .get(YarnConfiguration.YARN_WEBAPP_UI2_WARFILE_PATH);\n \n       if (null \u003d\u003d onDiskPath) {\n         String war \u003d \"hadoop-yarn-ui-\" + VersionInfo.getVersion() + \".war\";\n         URLClassLoader cl \u003d (URLClassLoader) ClassLoader.getSystemClassLoader();\n         URL url \u003d cl.findResource(war);\n \n         if (null \u003d\u003d url) {\n           onDiskPath \u003d \"\";\n         } else {\n           onDiskPath \u003d url.getFile();\n         }\n \n         LOG.info(\n             \"New web UI war file name:\" + war + \", and path:\" + onDiskPath);\n       }\n \n       uiWebAppContext \u003d new WebAppContext();\n       uiWebAppContext.setContextPath(webPath);\n       uiWebAppContext.setWar(onDiskPath);\n     }\n \n     webApp \u003d builder.start(new RMWebApp(this), uiWebAppContext);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startWepApp() {\n\n    Configuration conf \u003d getConfig();\n\n    RMWebAppUtil.setupSecurityAndFilters(conf,\n        getClientRMService().rmDTSecretManager);\n\n    Builder\u003cApplicationMasterService\u003e builder \u003d \n        WebApps\n            .$for(\"cluster\", ApplicationMasterService.class, masterService,\n                \"ws\")\n            .with(conf)\n            .withHttpSpnegoPrincipalKey(\n                YarnConfiguration.RM_WEBAPP_SPNEGO_USER_NAME_KEY)\n            .withHttpSpnegoKeytabKey(\n                YarnConfiguration.RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n            .withCSRFProtection(YarnConfiguration.RM_CSRF_PREFIX)\n            .withXFSProtection(YarnConfiguration.RM_XFS_PREFIX)\n            .at(webAppAddress);\n    String proxyHostAndPort \u003d WebAppUtils.getProxyHostAndPort(conf);\n    if(WebAppUtils.getResolvedRMWebAppURLWithoutScheme(conf).\n        equals(proxyHostAndPort)) {\n      if (HAUtil.isHAEnabled(conf)) {\n        fetcher \u003d new AppReportFetcher(conf);\n      } else {\n        fetcher \u003d new AppReportFetcher(conf, getClientRMService());\n      }\n      builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME,\n          ProxyUriUtils.PROXY_PATH_SPEC, WebAppProxyServlet.class);\n      builder.withAttribute(WebAppProxy.FETCHER_ATTRIBUTE, fetcher);\n      String[] proxyParts \u003d proxyHostAndPort.split(\":\");\n      builder.withAttribute(WebAppProxy.PROXY_HOST_ATTRIBUTE, proxyParts[0]);\n    }\n\n    WebAppContext uiWebAppContext \u003d null;\n    if (getConfig().getBoolean(YarnConfiguration.YARN_WEBAPP_UI2_ENABLE,\n        YarnConfiguration.DEFAULT_YARN_WEBAPP_UI2_ENABLE)) {\n      String webPath \u003d UI2_WEBAPP_NAME;\n      String onDiskPath \u003d getConfig()\n          .get(YarnConfiguration.YARN_WEBAPP_UI2_WARFILE_PATH);\n\n      if (null \u003d\u003d onDiskPath) {\n        String war \u003d \"hadoop-yarn-ui-\" + VersionInfo.getVersion() + \".war\";\n        URLClassLoader cl \u003d (URLClassLoader) ClassLoader.getSystemClassLoader();\n        URL url \u003d cl.findResource(war);\n\n        if (null \u003d\u003d url) {\n          onDiskPath \u003d \"\";\n        } else {\n          onDiskPath \u003d url.getFile();\n        }\n\n        LOG.info(\n            \"New web UI war file name:\" + war + \", and path:\" + onDiskPath);\n      }\n\n      uiWebAppContext \u003d new WebAppContext();\n      uiWebAppContext.setContextPath(webPath);\n      uiWebAppContext.setWar(onDiskPath);\n    }\n\n    webApp \u003d builder.start(new RMWebApp(this), uiWebAppContext);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "3de0da2a7659db268d630cb8c4ad1d1c4b8398a2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5698. [YARN-3368] Launch new YARN UI under hadoop web app port. (Sunil G via wangda)\n",
      "commitDate": "06/11/16 1:13 PM",
      "commitName": "3de0da2a7659db268d630cb8c4ad1d1c4b8398a2",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "06/11/16 1:13 PM",
      "commitNameOld": "817d5f4c9697a38383a34e00e3933b8a8513c9f3",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,118 +1,145 @@\n   protected void startWepApp() {\n \n     // Use the customized yarn filter instead of the standard kerberos filter to\n     // allow users to authenticate using delegation tokens\n     // 4 conditions need to be satisfied -\n     // 1. security is enabled\n     // 2. http auth type is set to kerberos\n     // 3. \"yarn.resourcemanager.webapp.use-yarn-filter\" override is set to true\n     // 4. hadoop.http.filter.initializers container AuthenticationFilterInitializer\n \n     Configuration conf \u003d getConfig();\n     boolean enableCorsFilter \u003d\n         conf.getBoolean(YarnConfiguration.RM_WEBAPP_ENABLE_CORS_FILTER,\n             YarnConfiguration.DEFAULT_RM_WEBAPP_ENABLE_CORS_FILTER);\n     boolean useYarnAuthenticationFilter \u003d\n         conf.getBoolean(\n           YarnConfiguration.RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER,\n           YarnConfiguration.DEFAULT_RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER);\n     String authPrefix \u003d \"hadoop.http.authentication.\";\n     String authTypeKey \u003d authPrefix + \"type\";\n     String filterInitializerConfKey \u003d \"hadoop.http.filter.initializers\";\n     String actualInitializers \u003d \"\";\n     Class\u003c?\u003e[] initializersClasses \u003d\n         conf.getClasses(filterInitializerConfKey);\n \n     // setup CORS\n     if (enableCorsFilter) {\n       conf.setBoolean(HttpCrossOriginFilterInitializer.PREFIX\n           + HttpCrossOriginFilterInitializer.ENABLED_SUFFIX, true);\n     }\n \n     boolean hasHadoopAuthFilterInitializer \u003d false;\n     boolean hasRMAuthFilterInitializer \u003d false;\n     if (initializersClasses !\u003d null) {\n       for (Class\u003c?\u003e initializer : initializersClasses) {\n         if (initializer.getName().equals(\n           AuthenticationFilterInitializer.class.getName())) {\n           hasHadoopAuthFilterInitializer \u003d true;\n         }\n         if (initializer.getName().equals(\n           RMAuthenticationFilterInitializer.class.getName())) {\n           hasRMAuthFilterInitializer \u003d true;\n         }\n       }\n       if (UserGroupInformation.isSecurityEnabled()\n           \u0026\u0026 useYarnAuthenticationFilter\n           \u0026\u0026 hasHadoopAuthFilterInitializer\n           \u0026\u0026 conf.get(authTypeKey, \"\").equals(\n             KerberosAuthenticationHandler.TYPE)) {\n         ArrayList\u003cString\u003e target \u003d new ArrayList\u003cString\u003e();\n         for (Class\u003c?\u003e filterInitializer : initializersClasses) {\n           if (filterInitializer.getName().equals(\n             AuthenticationFilterInitializer.class.getName())) {\n             if (hasRMAuthFilterInitializer \u003d\u003d false) {\n               target.add(RMAuthenticationFilterInitializer.class.getName());\n             }\n             continue;\n           }\n           target.add(filterInitializer.getName());\n         }\n         actualInitializers \u003d StringUtils.join(\",\", target);\n \n         LOG.info(\"Using RM authentication filter(kerberos/delegation-token)\"\n             + \" for RM webapp authentication\");\n         RMAuthenticationFilter\n           .setDelegationTokenSecretManager(getClientRMService().rmDTSecretManager);\n         conf.set(filterInitializerConfKey, actualInitializers);\n       }\n     }\n \n     // if security is not enabled and the default filter initializer has not \n     // been set, set the initializer to include the\n     // RMAuthenticationFilterInitializer which in turn will set up the simple\n     // auth filter.\n \n     String initializers \u003d conf.get(filterInitializerConfKey);\n     if (!UserGroupInformation.isSecurityEnabled()) {\n       if (initializersClasses \u003d\u003d null || initializersClasses.length \u003d\u003d 0) {\n         conf.set(filterInitializerConfKey,\n           RMAuthenticationFilterInitializer.class.getName());\n         conf.set(authTypeKey, \"simple\");\n       } else if (initializers.equals(StaticUserWebFilter.class.getName())) {\n         conf.set(filterInitializerConfKey,\n           RMAuthenticationFilterInitializer.class.getName() + \",\"\n               + initializers);\n         conf.set(authTypeKey, \"simple\");\n       }\n     }\n \n     Builder\u003cApplicationMasterService\u003e builder \u003d \n         WebApps\n             .$for(\"cluster\", ApplicationMasterService.class, masterService,\n                 \"ws\")\n             .with(conf)\n             .withHttpSpnegoPrincipalKey(\n                 YarnConfiguration.RM_WEBAPP_SPNEGO_USER_NAME_KEY)\n             .withHttpSpnegoKeytabKey(\n                 YarnConfiguration.RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n             .withCSRFProtection(YarnConfiguration.RM_CSRF_PREFIX)\n             .withXFSProtection(YarnConfiguration.RM_XFS_PREFIX)\n             .at(webAppAddress);\n     String proxyHostAndPort \u003d WebAppUtils.getProxyHostAndPort(conf);\n     if(WebAppUtils.getResolvedRMWebAppURLWithoutScheme(conf).\n         equals(proxyHostAndPort)) {\n       if (HAUtil.isHAEnabled(conf)) {\n         fetcher \u003d new AppReportFetcher(conf);\n       } else {\n         fetcher \u003d new AppReportFetcher(conf, getClientRMService());\n       }\n       builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME,\n           ProxyUriUtils.PROXY_PATH_SPEC, WebAppProxyServlet.class);\n       builder.withAttribute(WebAppProxy.FETCHER_ATTRIBUTE, fetcher);\n       String[] proxyParts \u003d proxyHostAndPort.split(\":\");\n       builder.withAttribute(WebAppProxy.PROXY_HOST_ATTRIBUTE, proxyParts[0]);\n-\n     }\n-    webApp \u003d builder.start(new RMWebApp(this));\n+\n+    WebAppContext uiWebAppContext \u003d null;\n+    if (getConfig().getBoolean(YarnConfiguration.YARN_WEBAPP_UI2_ENABLE,\n+        YarnConfiguration.DEFAULT_YARN_WEBAPP_UI2_ENABLE)) {\n+      String webPath \u003d UI2_WEBAPP_NAME;\n+      String onDiskPath \u003d getConfig()\n+          .get(YarnConfiguration.YARN_WEBAPP_UI2_WARFILE_PATH);\n+\n+      if (null \u003d\u003d onDiskPath) {\n+        String war \u003d \"hadoop-yarn-ui-\" + VersionInfo.getVersion() + \".war\";\n+        URLClassLoader cl \u003d (URLClassLoader) ClassLoader.getSystemClassLoader();\n+        URL url \u003d cl.findResource(war);\n+\n+        if (null \u003d\u003d url) {\n+          onDiskPath \u003d \"\";\n+        } else {\n+          onDiskPath \u003d url.getFile();\n+        }\n+\n+        LOG.info(\n+            \"New web UI war file name:\" + war + \", and path:\" + onDiskPath);\n+      }\n+\n+      uiWebAppContext \u003d new WebAppContext();\n+      uiWebAppContext.setContextPath(webPath);\n+      uiWebAppContext.setWar(onDiskPath);\n+    }\n+\n+    webApp \u003d builder.start(new RMWebApp(this), uiWebAppContext);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startWepApp() {\n\n    // Use the customized yarn filter instead of the standard kerberos filter to\n    // allow users to authenticate using delegation tokens\n    // 4 conditions need to be satisfied -\n    // 1. security is enabled\n    // 2. http auth type is set to kerberos\n    // 3. \"yarn.resourcemanager.webapp.use-yarn-filter\" override is set to true\n    // 4. hadoop.http.filter.initializers container AuthenticationFilterInitializer\n\n    Configuration conf \u003d getConfig();\n    boolean enableCorsFilter \u003d\n        conf.getBoolean(YarnConfiguration.RM_WEBAPP_ENABLE_CORS_FILTER,\n            YarnConfiguration.DEFAULT_RM_WEBAPP_ENABLE_CORS_FILTER);\n    boolean useYarnAuthenticationFilter \u003d\n        conf.getBoolean(\n          YarnConfiguration.RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER,\n          YarnConfiguration.DEFAULT_RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER);\n    String authPrefix \u003d \"hadoop.http.authentication.\";\n    String authTypeKey \u003d authPrefix + \"type\";\n    String filterInitializerConfKey \u003d \"hadoop.http.filter.initializers\";\n    String actualInitializers \u003d \"\";\n    Class\u003c?\u003e[] initializersClasses \u003d\n        conf.getClasses(filterInitializerConfKey);\n\n    // setup CORS\n    if (enableCorsFilter) {\n      conf.setBoolean(HttpCrossOriginFilterInitializer.PREFIX\n          + HttpCrossOriginFilterInitializer.ENABLED_SUFFIX, true);\n    }\n\n    boolean hasHadoopAuthFilterInitializer \u003d false;\n    boolean hasRMAuthFilterInitializer \u003d false;\n    if (initializersClasses !\u003d null) {\n      for (Class\u003c?\u003e initializer : initializersClasses) {\n        if (initializer.getName().equals(\n          AuthenticationFilterInitializer.class.getName())) {\n          hasHadoopAuthFilterInitializer \u003d true;\n        }\n        if (initializer.getName().equals(\n          RMAuthenticationFilterInitializer.class.getName())) {\n          hasRMAuthFilterInitializer \u003d true;\n        }\n      }\n      if (UserGroupInformation.isSecurityEnabled()\n          \u0026\u0026 useYarnAuthenticationFilter\n          \u0026\u0026 hasHadoopAuthFilterInitializer\n          \u0026\u0026 conf.get(authTypeKey, \"\").equals(\n            KerberosAuthenticationHandler.TYPE)) {\n        ArrayList\u003cString\u003e target \u003d new ArrayList\u003cString\u003e();\n        for (Class\u003c?\u003e filterInitializer : initializersClasses) {\n          if (filterInitializer.getName().equals(\n            AuthenticationFilterInitializer.class.getName())) {\n            if (hasRMAuthFilterInitializer \u003d\u003d false) {\n              target.add(RMAuthenticationFilterInitializer.class.getName());\n            }\n            continue;\n          }\n          target.add(filterInitializer.getName());\n        }\n        actualInitializers \u003d StringUtils.join(\",\", target);\n\n        LOG.info(\"Using RM authentication filter(kerberos/delegation-token)\"\n            + \" for RM webapp authentication\");\n        RMAuthenticationFilter\n          .setDelegationTokenSecretManager(getClientRMService().rmDTSecretManager);\n        conf.set(filterInitializerConfKey, actualInitializers);\n      }\n    }\n\n    // if security is not enabled and the default filter initializer has not \n    // been set, set the initializer to include the\n    // RMAuthenticationFilterInitializer which in turn will set up the simple\n    // auth filter.\n\n    String initializers \u003d conf.get(filterInitializerConfKey);\n    if (!UserGroupInformation.isSecurityEnabled()) {\n      if (initializersClasses \u003d\u003d null || initializersClasses.length \u003d\u003d 0) {\n        conf.set(filterInitializerConfKey,\n          RMAuthenticationFilterInitializer.class.getName());\n        conf.set(authTypeKey, \"simple\");\n      } else if (initializers.equals(StaticUserWebFilter.class.getName())) {\n        conf.set(filterInitializerConfKey,\n          RMAuthenticationFilterInitializer.class.getName() + \",\"\n              + initializers);\n        conf.set(authTypeKey, \"simple\");\n      }\n    }\n\n    Builder\u003cApplicationMasterService\u003e builder \u003d \n        WebApps\n            .$for(\"cluster\", ApplicationMasterService.class, masterService,\n                \"ws\")\n            .with(conf)\n            .withHttpSpnegoPrincipalKey(\n                YarnConfiguration.RM_WEBAPP_SPNEGO_USER_NAME_KEY)\n            .withHttpSpnegoKeytabKey(\n                YarnConfiguration.RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n            .withCSRFProtection(YarnConfiguration.RM_CSRF_PREFIX)\n            .withXFSProtection(YarnConfiguration.RM_XFS_PREFIX)\n            .at(webAppAddress);\n    String proxyHostAndPort \u003d WebAppUtils.getProxyHostAndPort(conf);\n    if(WebAppUtils.getResolvedRMWebAppURLWithoutScheme(conf).\n        equals(proxyHostAndPort)) {\n      if (HAUtil.isHAEnabled(conf)) {\n        fetcher \u003d new AppReportFetcher(conf);\n      } else {\n        fetcher \u003d new AppReportFetcher(conf, getClientRMService());\n      }\n      builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME,\n          ProxyUriUtils.PROXY_PATH_SPEC, WebAppProxyServlet.class);\n      builder.withAttribute(WebAppProxy.FETCHER_ATTRIBUTE, fetcher);\n      String[] proxyParts \u003d proxyHostAndPort.split(\":\");\n      builder.withAttribute(WebAppProxy.PROXY_HOST_ATTRIBUTE, proxyParts[0]);\n    }\n\n    WebAppContext uiWebAppContext \u003d null;\n    if (getConfig().getBoolean(YarnConfiguration.YARN_WEBAPP_UI2_ENABLE,\n        YarnConfiguration.DEFAULT_YARN_WEBAPP_UI2_ENABLE)) {\n      String webPath \u003d UI2_WEBAPP_NAME;\n      String onDiskPath \u003d getConfig()\n          .get(YarnConfiguration.YARN_WEBAPP_UI2_WARFILE_PATH);\n\n      if (null \u003d\u003d onDiskPath) {\n        String war \u003d \"hadoop-yarn-ui-\" + VersionInfo.getVersion() + \".war\";\n        URLClassLoader cl \u003d (URLClassLoader) ClassLoader.getSystemClassLoader();\n        URL url \u003d cl.findResource(war);\n\n        if (null \u003d\u003d url) {\n          onDiskPath \u003d \"\";\n        } else {\n          onDiskPath \u003d url.getFile();\n        }\n\n        LOG.info(\n            \"New web UI war file name:\" + war + \", and path:\" + onDiskPath);\n      }\n\n      uiWebAppContext \u003d new WebAppContext();\n      uiWebAppContext.setContextPath(webPath);\n      uiWebAppContext.setWar(onDiskPath);\n    }\n\n    webApp \u003d builder.start(new RMWebApp(this), uiWebAppContext);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "22fcd819f0c445be661e644ed67221f867013af8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5076. YARN web interfaces lack XFS protection. Contributed by Jonathan Maron.\n(cherry picked from commit 2703ec68712279494d67b0d76b7ac10e7a1628be)\n",
      "commitDate": "19/05/16 2:15 PM",
      "commitName": "22fcd819f0c445be661e644ed67221f867013af8",
      "commitAuthor": "Junping Du",
      "commitDateOld": "13/05/16 1:38 PM",
      "commitNameOld": "f0ac18d001d97914a9ee810b1fab56c5cebff830",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 6.03,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,117 +1,118 @@\n   protected void startWepApp() {\n \n     // Use the customized yarn filter instead of the standard kerberos filter to\n     // allow users to authenticate using delegation tokens\n     // 4 conditions need to be satisfied -\n     // 1. security is enabled\n     // 2. http auth type is set to kerberos\n     // 3. \"yarn.resourcemanager.webapp.use-yarn-filter\" override is set to true\n     // 4. hadoop.http.filter.initializers container AuthenticationFilterInitializer\n \n     Configuration conf \u003d getConfig();\n     boolean enableCorsFilter \u003d\n         conf.getBoolean(YarnConfiguration.RM_WEBAPP_ENABLE_CORS_FILTER,\n             YarnConfiguration.DEFAULT_RM_WEBAPP_ENABLE_CORS_FILTER);\n     boolean useYarnAuthenticationFilter \u003d\n         conf.getBoolean(\n           YarnConfiguration.RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER,\n           YarnConfiguration.DEFAULT_RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER);\n     String authPrefix \u003d \"hadoop.http.authentication.\";\n     String authTypeKey \u003d authPrefix + \"type\";\n     String filterInitializerConfKey \u003d \"hadoop.http.filter.initializers\";\n     String actualInitializers \u003d \"\";\n     Class\u003c?\u003e[] initializersClasses \u003d\n         conf.getClasses(filterInitializerConfKey);\n \n     // setup CORS\n     if (enableCorsFilter) {\n       conf.setBoolean(HttpCrossOriginFilterInitializer.PREFIX\n           + HttpCrossOriginFilterInitializer.ENABLED_SUFFIX, true);\n     }\n \n     boolean hasHadoopAuthFilterInitializer \u003d false;\n     boolean hasRMAuthFilterInitializer \u003d false;\n     if (initializersClasses !\u003d null) {\n       for (Class\u003c?\u003e initializer : initializersClasses) {\n         if (initializer.getName().equals(\n           AuthenticationFilterInitializer.class.getName())) {\n           hasHadoopAuthFilterInitializer \u003d true;\n         }\n         if (initializer.getName().equals(\n           RMAuthenticationFilterInitializer.class.getName())) {\n           hasRMAuthFilterInitializer \u003d true;\n         }\n       }\n       if (UserGroupInformation.isSecurityEnabled()\n           \u0026\u0026 useYarnAuthenticationFilter\n           \u0026\u0026 hasHadoopAuthFilterInitializer\n           \u0026\u0026 conf.get(authTypeKey, \"\").equals(\n             KerberosAuthenticationHandler.TYPE)) {\n         ArrayList\u003cString\u003e target \u003d new ArrayList\u003cString\u003e();\n         for (Class\u003c?\u003e filterInitializer : initializersClasses) {\n           if (filterInitializer.getName().equals(\n             AuthenticationFilterInitializer.class.getName())) {\n             if (hasRMAuthFilterInitializer \u003d\u003d false) {\n               target.add(RMAuthenticationFilterInitializer.class.getName());\n             }\n             continue;\n           }\n           target.add(filterInitializer.getName());\n         }\n         actualInitializers \u003d StringUtils.join(\",\", target);\n \n         LOG.info(\"Using RM authentication filter(kerberos/delegation-token)\"\n             + \" for RM webapp authentication\");\n         RMAuthenticationFilter\n           .setDelegationTokenSecretManager(getClientRMService().rmDTSecretManager);\n         conf.set(filterInitializerConfKey, actualInitializers);\n       }\n     }\n \n     // if security is not enabled and the default filter initializer has not \n     // been set, set the initializer to include the\n     // RMAuthenticationFilterInitializer which in turn will set up the simple\n     // auth filter.\n \n     String initializers \u003d conf.get(filterInitializerConfKey);\n     if (!UserGroupInformation.isSecurityEnabled()) {\n       if (initializersClasses \u003d\u003d null || initializersClasses.length \u003d\u003d 0) {\n         conf.set(filterInitializerConfKey,\n           RMAuthenticationFilterInitializer.class.getName());\n         conf.set(authTypeKey, \"simple\");\n       } else if (initializers.equals(StaticUserWebFilter.class.getName())) {\n         conf.set(filterInitializerConfKey,\n           RMAuthenticationFilterInitializer.class.getName() + \",\"\n               + initializers);\n         conf.set(authTypeKey, \"simple\");\n       }\n     }\n \n     Builder\u003cApplicationMasterService\u003e builder \u003d \n         WebApps\n             .$for(\"cluster\", ApplicationMasterService.class, masterService,\n                 \"ws\")\n             .with(conf)\n             .withHttpSpnegoPrincipalKey(\n                 YarnConfiguration.RM_WEBAPP_SPNEGO_USER_NAME_KEY)\n             .withHttpSpnegoKeytabKey(\n                 YarnConfiguration.RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n             .withCSRFProtection(YarnConfiguration.RM_CSRF_PREFIX)\n+            .withXFSProtection(YarnConfiguration.RM_XFS_PREFIX)\n             .at(webAppAddress);\n     String proxyHostAndPort \u003d WebAppUtils.getProxyHostAndPort(conf);\n     if(WebAppUtils.getResolvedRMWebAppURLWithoutScheme(conf).\n         equals(proxyHostAndPort)) {\n       if (HAUtil.isHAEnabled(conf)) {\n         fetcher \u003d new AppReportFetcher(conf);\n       } else {\n         fetcher \u003d new AppReportFetcher(conf, getClientRMService());\n       }\n       builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME,\n           ProxyUriUtils.PROXY_PATH_SPEC, WebAppProxyServlet.class);\n       builder.withAttribute(WebAppProxy.FETCHER_ATTRIBUTE, fetcher);\n       String[] proxyParts \u003d proxyHostAndPort.split(\":\");\n       builder.withAttribute(WebAppProxy.PROXY_HOST_ATTRIBUTE, proxyParts[0]);\n \n     }\n     webApp \u003d builder.start(new RMWebApp(this));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startWepApp() {\n\n    // Use the customized yarn filter instead of the standard kerberos filter to\n    // allow users to authenticate using delegation tokens\n    // 4 conditions need to be satisfied -\n    // 1. security is enabled\n    // 2. http auth type is set to kerberos\n    // 3. \"yarn.resourcemanager.webapp.use-yarn-filter\" override is set to true\n    // 4. hadoop.http.filter.initializers container AuthenticationFilterInitializer\n\n    Configuration conf \u003d getConfig();\n    boolean enableCorsFilter \u003d\n        conf.getBoolean(YarnConfiguration.RM_WEBAPP_ENABLE_CORS_FILTER,\n            YarnConfiguration.DEFAULT_RM_WEBAPP_ENABLE_CORS_FILTER);\n    boolean useYarnAuthenticationFilter \u003d\n        conf.getBoolean(\n          YarnConfiguration.RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER,\n          YarnConfiguration.DEFAULT_RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER);\n    String authPrefix \u003d \"hadoop.http.authentication.\";\n    String authTypeKey \u003d authPrefix + \"type\";\n    String filterInitializerConfKey \u003d \"hadoop.http.filter.initializers\";\n    String actualInitializers \u003d \"\";\n    Class\u003c?\u003e[] initializersClasses \u003d\n        conf.getClasses(filterInitializerConfKey);\n\n    // setup CORS\n    if (enableCorsFilter) {\n      conf.setBoolean(HttpCrossOriginFilterInitializer.PREFIX\n          + HttpCrossOriginFilterInitializer.ENABLED_SUFFIX, true);\n    }\n\n    boolean hasHadoopAuthFilterInitializer \u003d false;\n    boolean hasRMAuthFilterInitializer \u003d false;\n    if (initializersClasses !\u003d null) {\n      for (Class\u003c?\u003e initializer : initializersClasses) {\n        if (initializer.getName().equals(\n          AuthenticationFilterInitializer.class.getName())) {\n          hasHadoopAuthFilterInitializer \u003d true;\n        }\n        if (initializer.getName().equals(\n          RMAuthenticationFilterInitializer.class.getName())) {\n          hasRMAuthFilterInitializer \u003d true;\n        }\n      }\n      if (UserGroupInformation.isSecurityEnabled()\n          \u0026\u0026 useYarnAuthenticationFilter\n          \u0026\u0026 hasHadoopAuthFilterInitializer\n          \u0026\u0026 conf.get(authTypeKey, \"\").equals(\n            KerberosAuthenticationHandler.TYPE)) {\n        ArrayList\u003cString\u003e target \u003d new ArrayList\u003cString\u003e();\n        for (Class\u003c?\u003e filterInitializer : initializersClasses) {\n          if (filterInitializer.getName().equals(\n            AuthenticationFilterInitializer.class.getName())) {\n            if (hasRMAuthFilterInitializer \u003d\u003d false) {\n              target.add(RMAuthenticationFilterInitializer.class.getName());\n            }\n            continue;\n          }\n          target.add(filterInitializer.getName());\n        }\n        actualInitializers \u003d StringUtils.join(\",\", target);\n\n        LOG.info(\"Using RM authentication filter(kerberos/delegation-token)\"\n            + \" for RM webapp authentication\");\n        RMAuthenticationFilter\n          .setDelegationTokenSecretManager(getClientRMService().rmDTSecretManager);\n        conf.set(filterInitializerConfKey, actualInitializers);\n      }\n    }\n\n    // if security is not enabled and the default filter initializer has not \n    // been set, set the initializer to include the\n    // RMAuthenticationFilterInitializer which in turn will set up the simple\n    // auth filter.\n\n    String initializers \u003d conf.get(filterInitializerConfKey);\n    if (!UserGroupInformation.isSecurityEnabled()) {\n      if (initializersClasses \u003d\u003d null || initializersClasses.length \u003d\u003d 0) {\n        conf.set(filterInitializerConfKey,\n          RMAuthenticationFilterInitializer.class.getName());\n        conf.set(authTypeKey, \"simple\");\n      } else if (initializers.equals(StaticUserWebFilter.class.getName())) {\n        conf.set(filterInitializerConfKey,\n          RMAuthenticationFilterInitializer.class.getName() + \",\"\n              + initializers);\n        conf.set(authTypeKey, \"simple\");\n      }\n    }\n\n    Builder\u003cApplicationMasterService\u003e builder \u003d \n        WebApps\n            .$for(\"cluster\", ApplicationMasterService.class, masterService,\n                \"ws\")\n            .with(conf)\n            .withHttpSpnegoPrincipalKey(\n                YarnConfiguration.RM_WEBAPP_SPNEGO_USER_NAME_KEY)\n            .withHttpSpnegoKeytabKey(\n                YarnConfiguration.RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n            .withCSRFProtection(YarnConfiguration.RM_CSRF_PREFIX)\n            .withXFSProtection(YarnConfiguration.RM_XFS_PREFIX)\n            .at(webAppAddress);\n    String proxyHostAndPort \u003d WebAppUtils.getProxyHostAndPort(conf);\n    if(WebAppUtils.getResolvedRMWebAppURLWithoutScheme(conf).\n        equals(proxyHostAndPort)) {\n      if (HAUtil.isHAEnabled(conf)) {\n        fetcher \u003d new AppReportFetcher(conf);\n      } else {\n        fetcher \u003d new AppReportFetcher(conf, getClientRMService());\n      }\n      builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME,\n          ProxyUriUtils.PROXY_PATH_SPEC, WebAppProxyServlet.class);\n      builder.withAttribute(WebAppProxy.FETCHER_ATTRIBUTE, fetcher);\n      String[] proxyParts \u003d proxyHostAndPort.split(\":\");\n      builder.withAttribute(WebAppProxy.PROXY_HOST_ATTRIBUTE, proxyParts[0]);\n\n    }\n    webApp \u003d builder.start(new RMWebApp(this));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "e51a8c10560e5db5cf01fd530af48825cb51c9ea": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4737. Add CSRF filter support in YARN. Contributed by Jonathan Maron.\n",
      "commitDate": "07/03/16 1:56 AM",
      "commitName": "e51a8c10560e5db5cf01fd530af48825cb51c9ea",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "24/02/16 9:29 AM",
      "commitNameOld": "553b591ba06bbf0b18dca674d25a48218fed0a26",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 11.69,
      "commitsBetweenForRepo": 76,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,116 +1,117 @@\n   protected void startWepApp() {\n \n     // Use the customized yarn filter instead of the standard kerberos filter to\n     // allow users to authenticate using delegation tokens\n     // 4 conditions need to be satisfied -\n     // 1. security is enabled\n     // 2. http auth type is set to kerberos\n     // 3. \"yarn.resourcemanager.webapp.use-yarn-filter\" override is set to true\n     // 4. hadoop.http.filter.initializers container AuthenticationFilterInitializer\n \n     Configuration conf \u003d getConfig();\n     boolean enableCorsFilter \u003d\n         conf.getBoolean(YarnConfiguration.RM_WEBAPP_ENABLE_CORS_FILTER,\n             YarnConfiguration.DEFAULT_RM_WEBAPP_ENABLE_CORS_FILTER);\n     boolean useYarnAuthenticationFilter \u003d\n         conf.getBoolean(\n           YarnConfiguration.RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER,\n           YarnConfiguration.DEFAULT_RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER);\n     String authPrefix \u003d \"hadoop.http.authentication.\";\n     String authTypeKey \u003d authPrefix + \"type\";\n     String filterInitializerConfKey \u003d \"hadoop.http.filter.initializers\";\n     String actualInitializers \u003d \"\";\n     Class\u003c?\u003e[] initializersClasses \u003d\n         conf.getClasses(filterInitializerConfKey);\n \n     // setup CORS\n     if (enableCorsFilter) {\n       conf.setBoolean(HttpCrossOriginFilterInitializer.PREFIX\n           + HttpCrossOriginFilterInitializer.ENABLED_SUFFIX, true);\n     }\n \n     boolean hasHadoopAuthFilterInitializer \u003d false;\n     boolean hasRMAuthFilterInitializer \u003d false;\n     if (initializersClasses !\u003d null) {\n       for (Class\u003c?\u003e initializer : initializersClasses) {\n         if (initializer.getName().equals(\n           AuthenticationFilterInitializer.class.getName())) {\n           hasHadoopAuthFilterInitializer \u003d true;\n         }\n         if (initializer.getName().equals(\n           RMAuthenticationFilterInitializer.class.getName())) {\n           hasRMAuthFilterInitializer \u003d true;\n         }\n       }\n       if (UserGroupInformation.isSecurityEnabled()\n           \u0026\u0026 useYarnAuthenticationFilter\n           \u0026\u0026 hasHadoopAuthFilterInitializer\n           \u0026\u0026 conf.get(authTypeKey, \"\").equals(\n             KerberosAuthenticationHandler.TYPE)) {\n         ArrayList\u003cString\u003e target \u003d new ArrayList\u003cString\u003e();\n         for (Class\u003c?\u003e filterInitializer : initializersClasses) {\n           if (filterInitializer.getName().equals(\n             AuthenticationFilterInitializer.class.getName())) {\n             if (hasRMAuthFilterInitializer \u003d\u003d false) {\n               target.add(RMAuthenticationFilterInitializer.class.getName());\n             }\n             continue;\n           }\n           target.add(filterInitializer.getName());\n         }\n         actualInitializers \u003d StringUtils.join(\",\", target);\n \n         LOG.info(\"Using RM authentication filter(kerberos/delegation-token)\"\n             + \" for RM webapp authentication\");\n         RMAuthenticationFilter\n           .setDelegationTokenSecretManager(getClientRMService().rmDTSecretManager);\n         conf.set(filterInitializerConfKey, actualInitializers);\n       }\n     }\n \n     // if security is not enabled and the default filter initializer has not \n     // been set, set the initializer to include the\n     // RMAuthenticationFilterInitializer which in turn will set up the simple\n     // auth filter.\n \n     String initializers \u003d conf.get(filterInitializerConfKey);\n     if (!UserGroupInformation.isSecurityEnabled()) {\n       if (initializersClasses \u003d\u003d null || initializersClasses.length \u003d\u003d 0) {\n         conf.set(filterInitializerConfKey,\n           RMAuthenticationFilterInitializer.class.getName());\n         conf.set(authTypeKey, \"simple\");\n       } else if (initializers.equals(StaticUserWebFilter.class.getName())) {\n         conf.set(filterInitializerConfKey,\n           RMAuthenticationFilterInitializer.class.getName() + \",\"\n               + initializers);\n         conf.set(authTypeKey, \"simple\");\n       }\n     }\n \n     Builder\u003cApplicationMasterService\u003e builder \u003d \n         WebApps\n             .$for(\"cluster\", ApplicationMasterService.class, masterService,\n                 \"ws\")\n             .with(conf)\n             .withHttpSpnegoPrincipalKey(\n                 YarnConfiguration.RM_WEBAPP_SPNEGO_USER_NAME_KEY)\n             .withHttpSpnegoKeytabKey(\n                 YarnConfiguration.RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n+            .withCSRFProtection(YarnConfiguration.RM_CSRF_PREFIX)\n             .at(webAppAddress);\n     String proxyHostAndPort \u003d WebAppUtils.getProxyHostAndPort(conf);\n     if(WebAppUtils.getResolvedRMWebAppURLWithoutScheme(conf).\n         equals(proxyHostAndPort)) {\n       if (HAUtil.isHAEnabled(conf)) {\n         fetcher \u003d new AppReportFetcher(conf);\n       } else {\n         fetcher \u003d new AppReportFetcher(conf, getClientRMService());\n       }\n       builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME,\n           ProxyUriUtils.PROXY_PATH_SPEC, WebAppProxyServlet.class);\n       builder.withAttribute(WebAppProxy.FETCHER_ATTRIBUTE, fetcher);\n       String[] proxyParts \u003d proxyHostAndPort.split(\":\");\n       builder.withAttribute(WebAppProxy.PROXY_HOST_ATTRIBUTE, proxyParts[0]);\n \n     }\n     webApp \u003d builder.start(new RMWebApp(this));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startWepApp() {\n\n    // Use the customized yarn filter instead of the standard kerberos filter to\n    // allow users to authenticate using delegation tokens\n    // 4 conditions need to be satisfied -\n    // 1. security is enabled\n    // 2. http auth type is set to kerberos\n    // 3. \"yarn.resourcemanager.webapp.use-yarn-filter\" override is set to true\n    // 4. hadoop.http.filter.initializers container AuthenticationFilterInitializer\n\n    Configuration conf \u003d getConfig();\n    boolean enableCorsFilter \u003d\n        conf.getBoolean(YarnConfiguration.RM_WEBAPP_ENABLE_CORS_FILTER,\n            YarnConfiguration.DEFAULT_RM_WEBAPP_ENABLE_CORS_FILTER);\n    boolean useYarnAuthenticationFilter \u003d\n        conf.getBoolean(\n          YarnConfiguration.RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER,\n          YarnConfiguration.DEFAULT_RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER);\n    String authPrefix \u003d \"hadoop.http.authentication.\";\n    String authTypeKey \u003d authPrefix + \"type\";\n    String filterInitializerConfKey \u003d \"hadoop.http.filter.initializers\";\n    String actualInitializers \u003d \"\";\n    Class\u003c?\u003e[] initializersClasses \u003d\n        conf.getClasses(filterInitializerConfKey);\n\n    // setup CORS\n    if (enableCorsFilter) {\n      conf.setBoolean(HttpCrossOriginFilterInitializer.PREFIX\n          + HttpCrossOriginFilterInitializer.ENABLED_SUFFIX, true);\n    }\n\n    boolean hasHadoopAuthFilterInitializer \u003d false;\n    boolean hasRMAuthFilterInitializer \u003d false;\n    if (initializersClasses !\u003d null) {\n      for (Class\u003c?\u003e initializer : initializersClasses) {\n        if (initializer.getName().equals(\n          AuthenticationFilterInitializer.class.getName())) {\n          hasHadoopAuthFilterInitializer \u003d true;\n        }\n        if (initializer.getName().equals(\n          RMAuthenticationFilterInitializer.class.getName())) {\n          hasRMAuthFilterInitializer \u003d true;\n        }\n      }\n      if (UserGroupInformation.isSecurityEnabled()\n          \u0026\u0026 useYarnAuthenticationFilter\n          \u0026\u0026 hasHadoopAuthFilterInitializer\n          \u0026\u0026 conf.get(authTypeKey, \"\").equals(\n            KerberosAuthenticationHandler.TYPE)) {\n        ArrayList\u003cString\u003e target \u003d new ArrayList\u003cString\u003e();\n        for (Class\u003c?\u003e filterInitializer : initializersClasses) {\n          if (filterInitializer.getName().equals(\n            AuthenticationFilterInitializer.class.getName())) {\n            if (hasRMAuthFilterInitializer \u003d\u003d false) {\n              target.add(RMAuthenticationFilterInitializer.class.getName());\n            }\n            continue;\n          }\n          target.add(filterInitializer.getName());\n        }\n        actualInitializers \u003d StringUtils.join(\",\", target);\n\n        LOG.info(\"Using RM authentication filter(kerberos/delegation-token)\"\n            + \" for RM webapp authentication\");\n        RMAuthenticationFilter\n          .setDelegationTokenSecretManager(getClientRMService().rmDTSecretManager);\n        conf.set(filterInitializerConfKey, actualInitializers);\n      }\n    }\n\n    // if security is not enabled and the default filter initializer has not \n    // been set, set the initializer to include the\n    // RMAuthenticationFilterInitializer which in turn will set up the simple\n    // auth filter.\n\n    String initializers \u003d conf.get(filterInitializerConfKey);\n    if (!UserGroupInformation.isSecurityEnabled()) {\n      if (initializersClasses \u003d\u003d null || initializersClasses.length \u003d\u003d 0) {\n        conf.set(filterInitializerConfKey,\n          RMAuthenticationFilterInitializer.class.getName());\n        conf.set(authTypeKey, \"simple\");\n      } else if (initializers.equals(StaticUserWebFilter.class.getName())) {\n        conf.set(filterInitializerConfKey,\n          RMAuthenticationFilterInitializer.class.getName() + \",\"\n              + initializers);\n        conf.set(authTypeKey, \"simple\");\n      }\n    }\n\n    Builder\u003cApplicationMasterService\u003e builder \u003d \n        WebApps\n            .$for(\"cluster\", ApplicationMasterService.class, masterService,\n                \"ws\")\n            .with(conf)\n            .withHttpSpnegoPrincipalKey(\n                YarnConfiguration.RM_WEBAPP_SPNEGO_USER_NAME_KEY)\n            .withHttpSpnegoKeytabKey(\n                YarnConfiguration.RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n            .withCSRFProtection(YarnConfiguration.RM_CSRF_PREFIX)\n            .at(webAppAddress);\n    String proxyHostAndPort \u003d WebAppUtils.getProxyHostAndPort(conf);\n    if(WebAppUtils.getResolvedRMWebAppURLWithoutScheme(conf).\n        equals(proxyHostAndPort)) {\n      if (HAUtil.isHAEnabled(conf)) {\n        fetcher \u003d new AppReportFetcher(conf);\n      } else {\n        fetcher \u003d new AppReportFetcher(conf, getClientRMService());\n      }\n      builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME,\n          ProxyUriUtils.PROXY_PATH_SPEC, WebAppProxyServlet.class);\n      builder.withAttribute(WebAppProxy.FETCHER_ATTRIBUTE, fetcher);\n      String[] proxyParts \u003d proxyHostAndPort.split(\":\");\n      builder.withAttribute(WebAppProxy.PROXY_HOST_ATTRIBUTE, proxyParts[0]);\n\n    }\n    webApp \u003d builder.start(new RMWebApp(this));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "f8adeb712dc834c27cec15c04a986f2f635aba83": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4009. CORS support for ResourceManager REST API. ( Varun Vasudev via jeagles)\n",
      "commitDate": "23/10/15 8:34 AM",
      "commitName": "f8adeb712dc834c27cec15c04a986f2f635aba83",
      "commitAuthor": "Jonathan Eagles",
      "commitDateOld": "22/10/15 6:51 AM",
      "commitNameOld": "2798723a5443d04455b9d79c48d61f435ab52267",
      "commitAuthorOld": "Anubhav Dhoot",
      "daysBetweenCommits": 1.07,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,107 +1,116 @@\n   protected void startWepApp() {\n \n     // Use the customized yarn filter instead of the standard kerberos filter to\n     // allow users to authenticate using delegation tokens\n     // 4 conditions need to be satisfied -\n     // 1. security is enabled\n     // 2. http auth type is set to kerberos\n     // 3. \"yarn.resourcemanager.webapp.use-yarn-filter\" override is set to true\n     // 4. hadoop.http.filter.initializers container AuthenticationFilterInitializer\n \n     Configuration conf \u003d getConfig();\n+    boolean enableCorsFilter \u003d\n+        conf.getBoolean(YarnConfiguration.RM_WEBAPP_ENABLE_CORS_FILTER,\n+            YarnConfiguration.DEFAULT_RM_WEBAPP_ENABLE_CORS_FILTER);\n     boolean useYarnAuthenticationFilter \u003d\n         conf.getBoolean(\n           YarnConfiguration.RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER,\n           YarnConfiguration.DEFAULT_RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER);\n     String authPrefix \u003d \"hadoop.http.authentication.\";\n     String authTypeKey \u003d authPrefix + \"type\";\n     String filterInitializerConfKey \u003d \"hadoop.http.filter.initializers\";\n     String actualInitializers \u003d \"\";\n     Class\u003c?\u003e[] initializersClasses \u003d\n         conf.getClasses(filterInitializerConfKey);\n \n+    // setup CORS\n+    if (enableCorsFilter) {\n+      conf.setBoolean(HttpCrossOriginFilterInitializer.PREFIX\n+          + HttpCrossOriginFilterInitializer.ENABLED_SUFFIX, true);\n+    }\n+\n     boolean hasHadoopAuthFilterInitializer \u003d false;\n     boolean hasRMAuthFilterInitializer \u003d false;\n     if (initializersClasses !\u003d null) {\n       for (Class\u003c?\u003e initializer : initializersClasses) {\n         if (initializer.getName().equals(\n           AuthenticationFilterInitializer.class.getName())) {\n           hasHadoopAuthFilterInitializer \u003d true;\n         }\n         if (initializer.getName().equals(\n           RMAuthenticationFilterInitializer.class.getName())) {\n           hasRMAuthFilterInitializer \u003d true;\n         }\n       }\n       if (UserGroupInformation.isSecurityEnabled()\n           \u0026\u0026 useYarnAuthenticationFilter\n           \u0026\u0026 hasHadoopAuthFilterInitializer\n           \u0026\u0026 conf.get(authTypeKey, \"\").equals(\n             KerberosAuthenticationHandler.TYPE)) {\n         ArrayList\u003cString\u003e target \u003d new ArrayList\u003cString\u003e();\n         for (Class\u003c?\u003e filterInitializer : initializersClasses) {\n           if (filterInitializer.getName().equals(\n             AuthenticationFilterInitializer.class.getName())) {\n             if (hasRMAuthFilterInitializer \u003d\u003d false) {\n               target.add(RMAuthenticationFilterInitializer.class.getName());\n             }\n             continue;\n           }\n           target.add(filterInitializer.getName());\n         }\n         actualInitializers \u003d StringUtils.join(\",\", target);\n \n         LOG.info(\"Using RM authentication filter(kerberos/delegation-token)\"\n             + \" for RM webapp authentication\");\n         RMAuthenticationFilter\n           .setDelegationTokenSecretManager(getClientRMService().rmDTSecretManager);\n         conf.set(filterInitializerConfKey, actualInitializers);\n       }\n     }\n \n     // if security is not enabled and the default filter initializer has not \n     // been set, set the initializer to include the\n     // RMAuthenticationFilterInitializer which in turn will set up the simple\n     // auth filter.\n \n     String initializers \u003d conf.get(filterInitializerConfKey);\n     if (!UserGroupInformation.isSecurityEnabled()) {\n       if (initializersClasses \u003d\u003d null || initializersClasses.length \u003d\u003d 0) {\n         conf.set(filterInitializerConfKey,\n           RMAuthenticationFilterInitializer.class.getName());\n         conf.set(authTypeKey, \"simple\");\n       } else if (initializers.equals(StaticUserWebFilter.class.getName())) {\n         conf.set(filterInitializerConfKey,\n           RMAuthenticationFilterInitializer.class.getName() + \",\"\n               + initializers);\n         conf.set(authTypeKey, \"simple\");\n       }\n     }\n \n     Builder\u003cApplicationMasterService\u003e builder \u003d \n         WebApps\n             .$for(\"cluster\", ApplicationMasterService.class, masterService,\n                 \"ws\")\n             .with(conf)\n             .withHttpSpnegoPrincipalKey(\n                 YarnConfiguration.RM_WEBAPP_SPNEGO_USER_NAME_KEY)\n             .withHttpSpnegoKeytabKey(\n                 YarnConfiguration.RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n             .at(webAppAddress);\n     String proxyHostAndPort \u003d WebAppUtils.getProxyHostAndPort(conf);\n     if(WebAppUtils.getResolvedRMWebAppURLWithoutScheme(conf).\n         equals(proxyHostAndPort)) {\n       if (HAUtil.isHAEnabled(conf)) {\n         fetcher \u003d new AppReportFetcher(conf);\n       } else {\n         fetcher \u003d new AppReportFetcher(conf, getClientRMService());\n       }\n       builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME,\n           ProxyUriUtils.PROXY_PATH_SPEC, WebAppProxyServlet.class);\n       builder.withAttribute(WebAppProxy.FETCHER_ATTRIBUTE, fetcher);\n       String[] proxyParts \u003d proxyHostAndPort.split(\":\");\n       builder.withAttribute(WebAppProxy.PROXY_HOST_ATTRIBUTE, proxyParts[0]);\n \n     }\n     webApp \u003d builder.start(new RMWebApp(this));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startWepApp() {\n\n    // Use the customized yarn filter instead of the standard kerberos filter to\n    // allow users to authenticate using delegation tokens\n    // 4 conditions need to be satisfied -\n    // 1. security is enabled\n    // 2. http auth type is set to kerberos\n    // 3. \"yarn.resourcemanager.webapp.use-yarn-filter\" override is set to true\n    // 4. hadoop.http.filter.initializers container AuthenticationFilterInitializer\n\n    Configuration conf \u003d getConfig();\n    boolean enableCorsFilter \u003d\n        conf.getBoolean(YarnConfiguration.RM_WEBAPP_ENABLE_CORS_FILTER,\n            YarnConfiguration.DEFAULT_RM_WEBAPP_ENABLE_CORS_FILTER);\n    boolean useYarnAuthenticationFilter \u003d\n        conf.getBoolean(\n          YarnConfiguration.RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER,\n          YarnConfiguration.DEFAULT_RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER);\n    String authPrefix \u003d \"hadoop.http.authentication.\";\n    String authTypeKey \u003d authPrefix + \"type\";\n    String filterInitializerConfKey \u003d \"hadoop.http.filter.initializers\";\n    String actualInitializers \u003d \"\";\n    Class\u003c?\u003e[] initializersClasses \u003d\n        conf.getClasses(filterInitializerConfKey);\n\n    // setup CORS\n    if (enableCorsFilter) {\n      conf.setBoolean(HttpCrossOriginFilterInitializer.PREFIX\n          + HttpCrossOriginFilterInitializer.ENABLED_SUFFIX, true);\n    }\n\n    boolean hasHadoopAuthFilterInitializer \u003d false;\n    boolean hasRMAuthFilterInitializer \u003d false;\n    if (initializersClasses !\u003d null) {\n      for (Class\u003c?\u003e initializer : initializersClasses) {\n        if (initializer.getName().equals(\n          AuthenticationFilterInitializer.class.getName())) {\n          hasHadoopAuthFilterInitializer \u003d true;\n        }\n        if (initializer.getName().equals(\n          RMAuthenticationFilterInitializer.class.getName())) {\n          hasRMAuthFilterInitializer \u003d true;\n        }\n      }\n      if (UserGroupInformation.isSecurityEnabled()\n          \u0026\u0026 useYarnAuthenticationFilter\n          \u0026\u0026 hasHadoopAuthFilterInitializer\n          \u0026\u0026 conf.get(authTypeKey, \"\").equals(\n            KerberosAuthenticationHandler.TYPE)) {\n        ArrayList\u003cString\u003e target \u003d new ArrayList\u003cString\u003e();\n        for (Class\u003c?\u003e filterInitializer : initializersClasses) {\n          if (filterInitializer.getName().equals(\n            AuthenticationFilterInitializer.class.getName())) {\n            if (hasRMAuthFilterInitializer \u003d\u003d false) {\n              target.add(RMAuthenticationFilterInitializer.class.getName());\n            }\n            continue;\n          }\n          target.add(filterInitializer.getName());\n        }\n        actualInitializers \u003d StringUtils.join(\",\", target);\n\n        LOG.info(\"Using RM authentication filter(kerberos/delegation-token)\"\n            + \" for RM webapp authentication\");\n        RMAuthenticationFilter\n          .setDelegationTokenSecretManager(getClientRMService().rmDTSecretManager);\n        conf.set(filterInitializerConfKey, actualInitializers);\n      }\n    }\n\n    // if security is not enabled and the default filter initializer has not \n    // been set, set the initializer to include the\n    // RMAuthenticationFilterInitializer which in turn will set up the simple\n    // auth filter.\n\n    String initializers \u003d conf.get(filterInitializerConfKey);\n    if (!UserGroupInformation.isSecurityEnabled()) {\n      if (initializersClasses \u003d\u003d null || initializersClasses.length \u003d\u003d 0) {\n        conf.set(filterInitializerConfKey,\n          RMAuthenticationFilterInitializer.class.getName());\n        conf.set(authTypeKey, \"simple\");\n      } else if (initializers.equals(StaticUserWebFilter.class.getName())) {\n        conf.set(filterInitializerConfKey,\n          RMAuthenticationFilterInitializer.class.getName() + \",\"\n              + initializers);\n        conf.set(authTypeKey, \"simple\");\n      }\n    }\n\n    Builder\u003cApplicationMasterService\u003e builder \u003d \n        WebApps\n            .$for(\"cluster\", ApplicationMasterService.class, masterService,\n                \"ws\")\n            .with(conf)\n            .withHttpSpnegoPrincipalKey(\n                YarnConfiguration.RM_WEBAPP_SPNEGO_USER_NAME_KEY)\n            .withHttpSpnegoKeytabKey(\n                YarnConfiguration.RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n            .at(webAppAddress);\n    String proxyHostAndPort \u003d WebAppUtils.getProxyHostAndPort(conf);\n    if(WebAppUtils.getResolvedRMWebAppURLWithoutScheme(conf).\n        equals(proxyHostAndPort)) {\n      if (HAUtil.isHAEnabled(conf)) {\n        fetcher \u003d new AppReportFetcher(conf);\n      } else {\n        fetcher \u003d new AppReportFetcher(conf, getClientRMService());\n      }\n      builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME,\n          ProxyUriUtils.PROXY_PATH_SPEC, WebAppProxyServlet.class);\n      builder.withAttribute(WebAppProxy.FETCHER_ATTRIBUTE, fetcher);\n      String[] proxyParts \u003d proxyHostAndPort.split(\":\");\n      builder.withAttribute(WebAppProxy.PROXY_HOST_ATTRIBUTE, proxyParts[0]);\n\n    }\n    webApp \u003d builder.start(new RMWebApp(this));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "e37a4ff0c1712a1cb80e0412ec53a5d10b8d30f9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2697. Remove useless RMAuthenticationHandler. Contributed by Haosong Huang.\n",
      "commitDate": "24/11/14 2:58 PM",
      "commitName": "e37a4ff0c1712a1cb80e0412ec53a5d10b8d30f9",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "19/11/14 7:48 PM",
      "commitNameOld": "9cb8b75ba57f18639492bfa3b7e7c11c00bb3d3b",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 4.8,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,112 +1,107 @@\n   protected void startWepApp() {\n \n     // Use the customized yarn filter instead of the standard kerberos filter to\n     // allow users to authenticate using delegation tokens\n     // 4 conditions need to be satisfied -\n     // 1. security is enabled\n     // 2. http auth type is set to kerberos\n     // 3. \"yarn.resourcemanager.webapp.use-yarn-filter\" override is set to true\n     // 4. hadoop.http.filter.initializers container AuthenticationFilterInitializer\n \n     Configuration conf \u003d getConfig();\n     boolean useYarnAuthenticationFilter \u003d\n         conf.getBoolean(\n           YarnConfiguration.RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER,\n           YarnConfiguration.DEFAULT_RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER);\n     String authPrefix \u003d \"hadoop.http.authentication.\";\n     String authTypeKey \u003d authPrefix + \"type\";\n     String filterInitializerConfKey \u003d \"hadoop.http.filter.initializers\";\n     String actualInitializers \u003d \"\";\n     Class\u003c?\u003e[] initializersClasses \u003d\n         conf.getClasses(filterInitializerConfKey);\n \n     boolean hasHadoopAuthFilterInitializer \u003d false;\n     boolean hasRMAuthFilterInitializer \u003d false;\n     if (initializersClasses !\u003d null) {\n       for (Class\u003c?\u003e initializer : initializersClasses) {\n         if (initializer.getName().equals(\n           AuthenticationFilterInitializer.class.getName())) {\n           hasHadoopAuthFilterInitializer \u003d true;\n         }\n         if (initializer.getName().equals(\n           RMAuthenticationFilterInitializer.class.getName())) {\n           hasRMAuthFilterInitializer \u003d true;\n         }\n       }\n       if (UserGroupInformation.isSecurityEnabled()\n           \u0026\u0026 useYarnAuthenticationFilter\n           \u0026\u0026 hasHadoopAuthFilterInitializer\n           \u0026\u0026 conf.get(authTypeKey, \"\").equals(\n             KerberosAuthenticationHandler.TYPE)) {\n         ArrayList\u003cString\u003e target \u003d new ArrayList\u003cString\u003e();\n         for (Class\u003c?\u003e filterInitializer : initializersClasses) {\n           if (filterInitializer.getName().equals(\n             AuthenticationFilterInitializer.class.getName())) {\n             if (hasRMAuthFilterInitializer \u003d\u003d false) {\n               target.add(RMAuthenticationFilterInitializer.class.getName());\n             }\n             continue;\n           }\n           target.add(filterInitializer.getName());\n         }\n         actualInitializers \u003d StringUtils.join(\",\", target);\n \n         LOG.info(\"Using RM authentication filter(kerberos/delegation-token)\"\n             + \" for RM webapp authentication\");\n-        RMAuthenticationHandler\n-          .setSecretManager(getClientRMService().rmDTSecretManager);\n         RMAuthenticationFilter\n           .setDelegationTokenSecretManager(getClientRMService().rmDTSecretManager);\n-        String yarnAuthKey \u003d\n-            authPrefix + RMAuthenticationFilter.AUTH_HANDLER_PROPERTY;\n-        conf.setStrings(yarnAuthKey, RMAuthenticationHandler.class.getName());\n         conf.set(filterInitializerConfKey, actualInitializers);\n       }\n     }\n \n     // if security is not enabled and the default filter initializer has not \n     // been set, set the initializer to include the\n     // RMAuthenticationFilterInitializer which in turn will set up the simple\n     // auth filter.\n \n     String initializers \u003d conf.get(filterInitializerConfKey);\n     if (!UserGroupInformation.isSecurityEnabled()) {\n       if (initializersClasses \u003d\u003d null || initializersClasses.length \u003d\u003d 0) {\n         conf.set(filterInitializerConfKey,\n           RMAuthenticationFilterInitializer.class.getName());\n         conf.set(authTypeKey, \"simple\");\n       } else if (initializers.equals(StaticUserWebFilter.class.getName())) {\n         conf.set(filterInitializerConfKey,\n           RMAuthenticationFilterInitializer.class.getName() + \",\"\n               + initializers);\n         conf.set(authTypeKey, \"simple\");\n       }\n     }\n \n     Builder\u003cApplicationMasterService\u003e builder \u003d \n         WebApps\n             .$for(\"cluster\", ApplicationMasterService.class, masterService,\n                 \"ws\")\n             .with(conf)\n             .withHttpSpnegoPrincipalKey(\n                 YarnConfiguration.RM_WEBAPP_SPNEGO_USER_NAME_KEY)\n             .withHttpSpnegoKeytabKey(\n                 YarnConfiguration.RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n             .at(webAppAddress);\n     String proxyHostAndPort \u003d WebAppUtils.getProxyHostAndPort(conf);\n     if(WebAppUtils.getResolvedRMWebAppURLWithoutScheme(conf).\n         equals(proxyHostAndPort)) {\n       if (HAUtil.isHAEnabled(conf)) {\n         fetcher \u003d new AppReportFetcher(conf);\n       } else {\n         fetcher \u003d new AppReportFetcher(conf, getClientRMService());\n       }\n       builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME,\n           ProxyUriUtils.PROXY_PATH_SPEC, WebAppProxyServlet.class);\n       builder.withAttribute(WebAppProxy.FETCHER_ATTRIBUTE, fetcher);\n       String[] proxyParts \u003d proxyHostAndPort.split(\":\");\n       builder.withAttribute(WebAppProxy.PROXY_HOST_ATTRIBUTE, proxyParts[0]);\n \n     }\n     webApp \u003d builder.start(new RMWebApp(this));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startWepApp() {\n\n    // Use the customized yarn filter instead of the standard kerberos filter to\n    // allow users to authenticate using delegation tokens\n    // 4 conditions need to be satisfied -\n    // 1. security is enabled\n    // 2. http auth type is set to kerberos\n    // 3. \"yarn.resourcemanager.webapp.use-yarn-filter\" override is set to true\n    // 4. hadoop.http.filter.initializers container AuthenticationFilterInitializer\n\n    Configuration conf \u003d getConfig();\n    boolean useYarnAuthenticationFilter \u003d\n        conf.getBoolean(\n          YarnConfiguration.RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER,\n          YarnConfiguration.DEFAULT_RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER);\n    String authPrefix \u003d \"hadoop.http.authentication.\";\n    String authTypeKey \u003d authPrefix + \"type\";\n    String filterInitializerConfKey \u003d \"hadoop.http.filter.initializers\";\n    String actualInitializers \u003d \"\";\n    Class\u003c?\u003e[] initializersClasses \u003d\n        conf.getClasses(filterInitializerConfKey);\n\n    boolean hasHadoopAuthFilterInitializer \u003d false;\n    boolean hasRMAuthFilterInitializer \u003d false;\n    if (initializersClasses !\u003d null) {\n      for (Class\u003c?\u003e initializer : initializersClasses) {\n        if (initializer.getName().equals(\n          AuthenticationFilterInitializer.class.getName())) {\n          hasHadoopAuthFilterInitializer \u003d true;\n        }\n        if (initializer.getName().equals(\n          RMAuthenticationFilterInitializer.class.getName())) {\n          hasRMAuthFilterInitializer \u003d true;\n        }\n      }\n      if (UserGroupInformation.isSecurityEnabled()\n          \u0026\u0026 useYarnAuthenticationFilter\n          \u0026\u0026 hasHadoopAuthFilterInitializer\n          \u0026\u0026 conf.get(authTypeKey, \"\").equals(\n            KerberosAuthenticationHandler.TYPE)) {\n        ArrayList\u003cString\u003e target \u003d new ArrayList\u003cString\u003e();\n        for (Class\u003c?\u003e filterInitializer : initializersClasses) {\n          if (filterInitializer.getName().equals(\n            AuthenticationFilterInitializer.class.getName())) {\n            if (hasRMAuthFilterInitializer \u003d\u003d false) {\n              target.add(RMAuthenticationFilterInitializer.class.getName());\n            }\n            continue;\n          }\n          target.add(filterInitializer.getName());\n        }\n        actualInitializers \u003d StringUtils.join(\",\", target);\n\n        LOG.info(\"Using RM authentication filter(kerberos/delegation-token)\"\n            + \" for RM webapp authentication\");\n        RMAuthenticationFilter\n          .setDelegationTokenSecretManager(getClientRMService().rmDTSecretManager);\n        conf.set(filterInitializerConfKey, actualInitializers);\n      }\n    }\n\n    // if security is not enabled and the default filter initializer has not \n    // been set, set the initializer to include the\n    // RMAuthenticationFilterInitializer which in turn will set up the simple\n    // auth filter.\n\n    String initializers \u003d conf.get(filterInitializerConfKey);\n    if (!UserGroupInformation.isSecurityEnabled()) {\n      if (initializersClasses \u003d\u003d null || initializersClasses.length \u003d\u003d 0) {\n        conf.set(filterInitializerConfKey,\n          RMAuthenticationFilterInitializer.class.getName());\n        conf.set(authTypeKey, \"simple\");\n      } else if (initializers.equals(StaticUserWebFilter.class.getName())) {\n        conf.set(filterInitializerConfKey,\n          RMAuthenticationFilterInitializer.class.getName() + \",\"\n              + initializers);\n        conf.set(authTypeKey, \"simple\");\n      }\n    }\n\n    Builder\u003cApplicationMasterService\u003e builder \u003d \n        WebApps\n            .$for(\"cluster\", ApplicationMasterService.class, masterService,\n                \"ws\")\n            .with(conf)\n            .withHttpSpnegoPrincipalKey(\n                YarnConfiguration.RM_WEBAPP_SPNEGO_USER_NAME_KEY)\n            .withHttpSpnegoKeytabKey(\n                YarnConfiguration.RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n            .at(webAppAddress);\n    String proxyHostAndPort \u003d WebAppUtils.getProxyHostAndPort(conf);\n    if(WebAppUtils.getResolvedRMWebAppURLWithoutScheme(conf).\n        equals(proxyHostAndPort)) {\n      if (HAUtil.isHAEnabled(conf)) {\n        fetcher \u003d new AppReportFetcher(conf);\n      } else {\n        fetcher \u003d new AppReportFetcher(conf, getClientRMService());\n      }\n      builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME,\n          ProxyUriUtils.PROXY_PATH_SPEC, WebAppProxyServlet.class);\n      builder.withAttribute(WebAppProxy.FETCHER_ATTRIBUTE, fetcher);\n      String[] proxyParts \u003d proxyHostAndPort.split(\":\");\n      builder.withAttribute(WebAppProxy.PROXY_HOST_ATTRIBUTE, proxyParts[0]);\n\n    }\n    webApp \u003d builder.start(new RMWebApp(this));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "1220bb72d452521c6f09cebe1dd77341054ee9dd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2656. Made RM web services authentication filter support proxy user. Contributed by Varun Vasudev and Zhijie Shen.\n",
      "commitDate": "14/10/14 9:50 PM",
      "commitName": "1220bb72d452521c6f09cebe1dd77341054ee9dd",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "03/10/14 3:42 PM",
      "commitNameOld": "6261f7cc69a0eb3eebc9898c7599c7c20f432b4e",
      "commitAuthorOld": "subru",
      "daysBetweenCommits": 11.26,
      "commitsBetweenForRepo": 84,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,110 +1,112 @@\n   protected void startWepApp() {\n \n     // Use the customized yarn filter instead of the standard kerberos filter to\n     // allow users to authenticate using delegation tokens\n     // 4 conditions need to be satisfied -\n     // 1. security is enabled\n     // 2. http auth type is set to kerberos\n     // 3. \"yarn.resourcemanager.webapp.use-yarn-filter\" override is set to true\n     // 4. hadoop.http.filter.initializers container AuthenticationFilterInitializer\n \n     Configuration conf \u003d getConfig();\n     boolean useYarnAuthenticationFilter \u003d\n         conf.getBoolean(\n           YarnConfiguration.RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER,\n           YarnConfiguration.DEFAULT_RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER);\n     String authPrefix \u003d \"hadoop.http.authentication.\";\n     String authTypeKey \u003d authPrefix + \"type\";\n     String filterInitializerConfKey \u003d \"hadoop.http.filter.initializers\";\n     String actualInitializers \u003d \"\";\n     Class\u003c?\u003e[] initializersClasses \u003d\n         conf.getClasses(filterInitializerConfKey);\n \n     boolean hasHadoopAuthFilterInitializer \u003d false;\n     boolean hasRMAuthFilterInitializer \u003d false;\n     if (initializersClasses !\u003d null) {\n       for (Class\u003c?\u003e initializer : initializersClasses) {\n         if (initializer.getName().equals(\n           AuthenticationFilterInitializer.class.getName())) {\n           hasHadoopAuthFilterInitializer \u003d true;\n         }\n         if (initializer.getName().equals(\n           RMAuthenticationFilterInitializer.class.getName())) {\n           hasRMAuthFilterInitializer \u003d true;\n         }\n       }\n       if (UserGroupInformation.isSecurityEnabled()\n           \u0026\u0026 useYarnAuthenticationFilter\n           \u0026\u0026 hasHadoopAuthFilterInitializer\n           \u0026\u0026 conf.get(authTypeKey, \"\").equals(\n             KerberosAuthenticationHandler.TYPE)) {\n         ArrayList\u003cString\u003e target \u003d new ArrayList\u003cString\u003e();\n         for (Class\u003c?\u003e filterInitializer : initializersClasses) {\n           if (filterInitializer.getName().equals(\n             AuthenticationFilterInitializer.class.getName())) {\n             if (hasRMAuthFilterInitializer \u003d\u003d false) {\n               target.add(RMAuthenticationFilterInitializer.class.getName());\n             }\n             continue;\n           }\n           target.add(filterInitializer.getName());\n         }\n         actualInitializers \u003d StringUtils.join(\",\", target);\n \n         LOG.info(\"Using RM authentication filter(kerberos/delegation-token)\"\n             + \" for RM webapp authentication\");\n         RMAuthenticationHandler\n           .setSecretManager(getClientRMService().rmDTSecretManager);\n+        RMAuthenticationFilter\n+          .setDelegationTokenSecretManager(getClientRMService().rmDTSecretManager);\n         String yarnAuthKey \u003d\n             authPrefix + RMAuthenticationFilter.AUTH_HANDLER_PROPERTY;\n         conf.setStrings(yarnAuthKey, RMAuthenticationHandler.class.getName());\n         conf.set(filterInitializerConfKey, actualInitializers);\n       }\n     }\n \n     // if security is not enabled and the default filter initializer has not \n     // been set, set the initializer to include the\n     // RMAuthenticationFilterInitializer which in turn will set up the simple\n     // auth filter.\n \n     String initializers \u003d conf.get(filterInitializerConfKey);\n     if (!UserGroupInformation.isSecurityEnabled()) {\n       if (initializersClasses \u003d\u003d null || initializersClasses.length \u003d\u003d 0) {\n         conf.set(filterInitializerConfKey,\n           RMAuthenticationFilterInitializer.class.getName());\n         conf.set(authTypeKey, \"simple\");\n       } else if (initializers.equals(StaticUserWebFilter.class.getName())) {\n         conf.set(filterInitializerConfKey,\n           RMAuthenticationFilterInitializer.class.getName() + \",\"\n               + initializers);\n         conf.set(authTypeKey, \"simple\");\n       }\n     }\n \n     Builder\u003cApplicationMasterService\u003e builder \u003d \n         WebApps\n             .$for(\"cluster\", ApplicationMasterService.class, masterService,\n                 \"ws\")\n             .with(conf)\n             .withHttpSpnegoPrincipalKey(\n                 YarnConfiguration.RM_WEBAPP_SPNEGO_USER_NAME_KEY)\n             .withHttpSpnegoKeytabKey(\n                 YarnConfiguration.RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n             .at(webAppAddress);\n     String proxyHostAndPort \u003d WebAppUtils.getProxyHostAndPort(conf);\n     if(WebAppUtils.getResolvedRMWebAppURLWithoutScheme(conf).\n         equals(proxyHostAndPort)) {\n       if (HAUtil.isHAEnabled(conf)) {\n         fetcher \u003d new AppReportFetcher(conf);\n       } else {\n         fetcher \u003d new AppReportFetcher(conf, getClientRMService());\n       }\n       builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME,\n           ProxyUriUtils.PROXY_PATH_SPEC, WebAppProxyServlet.class);\n       builder.withAttribute(WebAppProxy.FETCHER_ATTRIBUTE, fetcher);\n       String[] proxyParts \u003d proxyHostAndPort.split(\":\");\n       builder.withAttribute(WebAppProxy.PROXY_HOST_ATTRIBUTE, proxyParts[0]);\n \n     }\n     webApp \u003d builder.start(new RMWebApp(this));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startWepApp() {\n\n    // Use the customized yarn filter instead of the standard kerberos filter to\n    // allow users to authenticate using delegation tokens\n    // 4 conditions need to be satisfied -\n    // 1. security is enabled\n    // 2. http auth type is set to kerberos\n    // 3. \"yarn.resourcemanager.webapp.use-yarn-filter\" override is set to true\n    // 4. hadoop.http.filter.initializers container AuthenticationFilterInitializer\n\n    Configuration conf \u003d getConfig();\n    boolean useYarnAuthenticationFilter \u003d\n        conf.getBoolean(\n          YarnConfiguration.RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER,\n          YarnConfiguration.DEFAULT_RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER);\n    String authPrefix \u003d \"hadoop.http.authentication.\";\n    String authTypeKey \u003d authPrefix + \"type\";\n    String filterInitializerConfKey \u003d \"hadoop.http.filter.initializers\";\n    String actualInitializers \u003d \"\";\n    Class\u003c?\u003e[] initializersClasses \u003d\n        conf.getClasses(filterInitializerConfKey);\n\n    boolean hasHadoopAuthFilterInitializer \u003d false;\n    boolean hasRMAuthFilterInitializer \u003d false;\n    if (initializersClasses !\u003d null) {\n      for (Class\u003c?\u003e initializer : initializersClasses) {\n        if (initializer.getName().equals(\n          AuthenticationFilterInitializer.class.getName())) {\n          hasHadoopAuthFilterInitializer \u003d true;\n        }\n        if (initializer.getName().equals(\n          RMAuthenticationFilterInitializer.class.getName())) {\n          hasRMAuthFilterInitializer \u003d true;\n        }\n      }\n      if (UserGroupInformation.isSecurityEnabled()\n          \u0026\u0026 useYarnAuthenticationFilter\n          \u0026\u0026 hasHadoopAuthFilterInitializer\n          \u0026\u0026 conf.get(authTypeKey, \"\").equals(\n            KerberosAuthenticationHandler.TYPE)) {\n        ArrayList\u003cString\u003e target \u003d new ArrayList\u003cString\u003e();\n        for (Class\u003c?\u003e filterInitializer : initializersClasses) {\n          if (filterInitializer.getName().equals(\n            AuthenticationFilterInitializer.class.getName())) {\n            if (hasRMAuthFilterInitializer \u003d\u003d false) {\n              target.add(RMAuthenticationFilterInitializer.class.getName());\n            }\n            continue;\n          }\n          target.add(filterInitializer.getName());\n        }\n        actualInitializers \u003d StringUtils.join(\",\", target);\n\n        LOG.info(\"Using RM authentication filter(kerberos/delegation-token)\"\n            + \" for RM webapp authentication\");\n        RMAuthenticationHandler\n          .setSecretManager(getClientRMService().rmDTSecretManager);\n        RMAuthenticationFilter\n          .setDelegationTokenSecretManager(getClientRMService().rmDTSecretManager);\n        String yarnAuthKey \u003d\n            authPrefix + RMAuthenticationFilter.AUTH_HANDLER_PROPERTY;\n        conf.setStrings(yarnAuthKey, RMAuthenticationHandler.class.getName());\n        conf.set(filterInitializerConfKey, actualInitializers);\n      }\n    }\n\n    // if security is not enabled and the default filter initializer has not \n    // been set, set the initializer to include the\n    // RMAuthenticationFilterInitializer which in turn will set up the simple\n    // auth filter.\n\n    String initializers \u003d conf.get(filterInitializerConfKey);\n    if (!UserGroupInformation.isSecurityEnabled()) {\n      if (initializersClasses \u003d\u003d null || initializersClasses.length \u003d\u003d 0) {\n        conf.set(filterInitializerConfKey,\n          RMAuthenticationFilterInitializer.class.getName());\n        conf.set(authTypeKey, \"simple\");\n      } else if (initializers.equals(StaticUserWebFilter.class.getName())) {\n        conf.set(filterInitializerConfKey,\n          RMAuthenticationFilterInitializer.class.getName() + \",\"\n              + initializers);\n        conf.set(authTypeKey, \"simple\");\n      }\n    }\n\n    Builder\u003cApplicationMasterService\u003e builder \u003d \n        WebApps\n            .$for(\"cluster\", ApplicationMasterService.class, masterService,\n                \"ws\")\n            .with(conf)\n            .withHttpSpnegoPrincipalKey(\n                YarnConfiguration.RM_WEBAPP_SPNEGO_USER_NAME_KEY)\n            .withHttpSpnegoKeytabKey(\n                YarnConfiguration.RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n            .at(webAppAddress);\n    String proxyHostAndPort \u003d WebAppUtils.getProxyHostAndPort(conf);\n    if(WebAppUtils.getResolvedRMWebAppURLWithoutScheme(conf).\n        equals(proxyHostAndPort)) {\n      if (HAUtil.isHAEnabled(conf)) {\n        fetcher \u003d new AppReportFetcher(conf);\n      } else {\n        fetcher \u003d new AppReportFetcher(conf, getClientRMService());\n      }\n      builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME,\n          ProxyUriUtils.PROXY_PATH_SPEC, WebAppProxyServlet.class);\n      builder.withAttribute(WebAppProxy.FETCHER_ATTRIBUTE, fetcher);\n      String[] proxyParts \u003d proxyHostAndPort.split(\":\");\n      builder.withAttribute(WebAppProxy.PROXY_HOST_ATTRIBUTE, proxyParts[0]);\n\n    }\n    webApp \u003d builder.start(new RMWebApp(this));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "a9023c2736fb8a95dbba90d3f61c9eca33126af4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2397. Avoided loading two authentication filters for RM and TS web interfaces. Contributed by Varun Vasudev.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1618054 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/08/14 2:17 PM",
      "commitName": "a9023c2736fb8a95dbba90d3f61c9eca33126af4",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "10/08/14 5:13 PM",
      "commitNameOld": "bdd3e2ce4975dda3fc33644dfb330ae7395003de",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 3.88,
      "commitsBetweenForRepo": 46,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,84 +1,110 @@\n   protected void startWepApp() {\n \n     // Use the customized yarn filter instead of the standard kerberos filter to\n     // allow users to authenticate using delegation tokens\n-    // 3 conditions need to be satisfied -\n+    // 4 conditions need to be satisfied -\n     // 1. security is enabled\n     // 2. http auth type is set to kerberos\n     // 3. \"yarn.resourcemanager.webapp.use-yarn-filter\" override is set to true\n+    // 4. hadoop.http.filter.initializers container AuthenticationFilterInitializer\n \n     Configuration conf \u003d getConfig();\n     boolean useYarnAuthenticationFilter \u003d\n         conf.getBoolean(\n           YarnConfiguration.RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER,\n           YarnConfiguration.DEFAULT_RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER);\n     String authPrefix \u003d \"hadoop.http.authentication.\";\n     String authTypeKey \u003d authPrefix + \"type\";\n-    String initializers \u003d conf.get(\"hadoop.http.filter.initializers\");\n-    if (UserGroupInformation.isSecurityEnabled()\n-        \u0026\u0026 useYarnAuthenticationFilter\n-        \u0026\u0026 conf.get(authTypeKey, \"\").equalsIgnoreCase(\n-          KerberosAuthenticationHandler.TYPE)) {\n-      LOG.info(\"Using RM authentication filter(kerberos/delegation-token)\"\n-          + \" for RM webapp authentication\");\n-      RMAuthenticationHandler\n-        .setSecretManager(getClientRMService().rmDTSecretManager);\n-      String yarnAuthKey \u003d\n-          authPrefix + RMAuthenticationFilter.AUTH_HANDLER_PROPERTY;\n-      conf.setStrings(yarnAuthKey, RMAuthenticationHandler.class.getName());\n+    String filterInitializerConfKey \u003d \"hadoop.http.filter.initializers\";\n+    String actualInitializers \u003d \"\";\n+    Class\u003c?\u003e[] initializersClasses \u003d\n+        conf.getClasses(filterInitializerConfKey);\n \n-      initializers \u003d\n-          initializers \u003d\u003d null || initializers.isEmpty() ? \"\" : \",\"\n-              + initializers;\n-      if (!initializers.contains(RMAuthenticationFilterInitializer.class\n-        .getName())) {\n-        conf.set(\"hadoop.http.filter.initializers\",\n-          RMAuthenticationFilterInitializer.class.getName() + initializers);\n+    boolean hasHadoopAuthFilterInitializer \u003d false;\n+    boolean hasRMAuthFilterInitializer \u003d false;\n+    if (initializersClasses !\u003d null) {\n+      for (Class\u003c?\u003e initializer : initializersClasses) {\n+        if (initializer.getName().equals(\n+          AuthenticationFilterInitializer.class.getName())) {\n+          hasHadoopAuthFilterInitializer \u003d true;\n+        }\n+        if (initializer.getName().equals(\n+          RMAuthenticationFilterInitializer.class.getName())) {\n+          hasRMAuthFilterInitializer \u003d true;\n+        }\n+      }\n+      if (UserGroupInformation.isSecurityEnabled()\n+          \u0026\u0026 useYarnAuthenticationFilter\n+          \u0026\u0026 hasHadoopAuthFilterInitializer\n+          \u0026\u0026 conf.get(authTypeKey, \"\").equals(\n+            KerberosAuthenticationHandler.TYPE)) {\n+        ArrayList\u003cString\u003e target \u003d new ArrayList\u003cString\u003e();\n+        for (Class\u003c?\u003e filterInitializer : initializersClasses) {\n+          if (filterInitializer.getName().equals(\n+            AuthenticationFilterInitializer.class.getName())) {\n+            if (hasRMAuthFilterInitializer \u003d\u003d false) {\n+              target.add(RMAuthenticationFilterInitializer.class.getName());\n+            }\n+            continue;\n+          }\n+          target.add(filterInitializer.getName());\n+        }\n+        actualInitializers \u003d StringUtils.join(\",\", target);\n+\n+        LOG.info(\"Using RM authentication filter(kerberos/delegation-token)\"\n+            + \" for RM webapp authentication\");\n+        RMAuthenticationHandler\n+          .setSecretManager(getClientRMService().rmDTSecretManager);\n+        String yarnAuthKey \u003d\n+            authPrefix + RMAuthenticationFilter.AUTH_HANDLER_PROPERTY;\n+        conf.setStrings(yarnAuthKey, RMAuthenticationHandler.class.getName());\n+        conf.set(filterInitializerConfKey, actualInitializers);\n       }\n     }\n \n-    // if security is not enabled and the default filter initializer has been\n-    // set, set the initializer to include the\n+    // if security is not enabled and the default filter initializer has not \n+    // been set, set the initializer to include the\n     // RMAuthenticationFilterInitializer which in turn will set up the simple\n     // auth filter.\n \n+    String initializers \u003d conf.get(filterInitializerConfKey);\n     if (!UserGroupInformation.isSecurityEnabled()) {\n-      if (initializers \u003d\u003d null || initializers.isEmpty()) {\n-        conf.set(\"hadoop.http.filter.initializers\",\n+      if (initializersClasses \u003d\u003d null || initializersClasses.length \u003d\u003d 0) {\n+        conf.set(filterInitializerConfKey,\n           RMAuthenticationFilterInitializer.class.getName());\n         conf.set(authTypeKey, \"simple\");\n       } else if (initializers.equals(StaticUserWebFilter.class.getName())) {\n-        conf.set(\"hadoop.http.filter.initializers\",\n+        conf.set(filterInitializerConfKey,\n           RMAuthenticationFilterInitializer.class.getName() + \",\"\n               + initializers);\n         conf.set(authTypeKey, \"simple\");\n       }\n     }\n \n     Builder\u003cApplicationMasterService\u003e builder \u003d \n         WebApps\n             .$for(\"cluster\", ApplicationMasterService.class, masterService,\n                 \"ws\")\n             .with(conf)\n             .withHttpSpnegoPrincipalKey(\n                 YarnConfiguration.RM_WEBAPP_SPNEGO_USER_NAME_KEY)\n             .withHttpSpnegoKeytabKey(\n                 YarnConfiguration.RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n             .at(webAppAddress);\n     String proxyHostAndPort \u003d WebAppUtils.getProxyHostAndPort(conf);\n     if(WebAppUtils.getResolvedRMWebAppURLWithoutScheme(conf).\n         equals(proxyHostAndPort)) {\n       if (HAUtil.isHAEnabled(conf)) {\n         fetcher \u003d new AppReportFetcher(conf);\n       } else {\n         fetcher \u003d new AppReportFetcher(conf, getClientRMService());\n       }\n       builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME,\n           ProxyUriUtils.PROXY_PATH_SPEC, WebAppProxyServlet.class);\n       builder.withAttribute(WebAppProxy.FETCHER_ATTRIBUTE, fetcher);\n       String[] proxyParts \u003d proxyHostAndPort.split(\":\");\n       builder.withAttribute(WebAppProxy.PROXY_HOST_ATTRIBUTE, proxyParts[0]);\n \n     }\n     webApp \u003d builder.start(new RMWebApp(this));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startWepApp() {\n\n    // Use the customized yarn filter instead of the standard kerberos filter to\n    // allow users to authenticate using delegation tokens\n    // 4 conditions need to be satisfied -\n    // 1. security is enabled\n    // 2. http auth type is set to kerberos\n    // 3. \"yarn.resourcemanager.webapp.use-yarn-filter\" override is set to true\n    // 4. hadoop.http.filter.initializers container AuthenticationFilterInitializer\n\n    Configuration conf \u003d getConfig();\n    boolean useYarnAuthenticationFilter \u003d\n        conf.getBoolean(\n          YarnConfiguration.RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER,\n          YarnConfiguration.DEFAULT_RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER);\n    String authPrefix \u003d \"hadoop.http.authentication.\";\n    String authTypeKey \u003d authPrefix + \"type\";\n    String filterInitializerConfKey \u003d \"hadoop.http.filter.initializers\";\n    String actualInitializers \u003d \"\";\n    Class\u003c?\u003e[] initializersClasses \u003d\n        conf.getClasses(filterInitializerConfKey);\n\n    boolean hasHadoopAuthFilterInitializer \u003d false;\n    boolean hasRMAuthFilterInitializer \u003d false;\n    if (initializersClasses !\u003d null) {\n      for (Class\u003c?\u003e initializer : initializersClasses) {\n        if (initializer.getName().equals(\n          AuthenticationFilterInitializer.class.getName())) {\n          hasHadoopAuthFilterInitializer \u003d true;\n        }\n        if (initializer.getName().equals(\n          RMAuthenticationFilterInitializer.class.getName())) {\n          hasRMAuthFilterInitializer \u003d true;\n        }\n      }\n      if (UserGroupInformation.isSecurityEnabled()\n          \u0026\u0026 useYarnAuthenticationFilter\n          \u0026\u0026 hasHadoopAuthFilterInitializer\n          \u0026\u0026 conf.get(authTypeKey, \"\").equals(\n            KerberosAuthenticationHandler.TYPE)) {\n        ArrayList\u003cString\u003e target \u003d new ArrayList\u003cString\u003e();\n        for (Class\u003c?\u003e filterInitializer : initializersClasses) {\n          if (filterInitializer.getName().equals(\n            AuthenticationFilterInitializer.class.getName())) {\n            if (hasRMAuthFilterInitializer \u003d\u003d false) {\n              target.add(RMAuthenticationFilterInitializer.class.getName());\n            }\n            continue;\n          }\n          target.add(filterInitializer.getName());\n        }\n        actualInitializers \u003d StringUtils.join(\",\", target);\n\n        LOG.info(\"Using RM authentication filter(kerberos/delegation-token)\"\n            + \" for RM webapp authentication\");\n        RMAuthenticationHandler\n          .setSecretManager(getClientRMService().rmDTSecretManager);\n        String yarnAuthKey \u003d\n            authPrefix + RMAuthenticationFilter.AUTH_HANDLER_PROPERTY;\n        conf.setStrings(yarnAuthKey, RMAuthenticationHandler.class.getName());\n        conf.set(filterInitializerConfKey, actualInitializers);\n      }\n    }\n\n    // if security is not enabled and the default filter initializer has not \n    // been set, set the initializer to include the\n    // RMAuthenticationFilterInitializer which in turn will set up the simple\n    // auth filter.\n\n    String initializers \u003d conf.get(filterInitializerConfKey);\n    if (!UserGroupInformation.isSecurityEnabled()) {\n      if (initializersClasses \u003d\u003d null || initializersClasses.length \u003d\u003d 0) {\n        conf.set(filterInitializerConfKey,\n          RMAuthenticationFilterInitializer.class.getName());\n        conf.set(authTypeKey, \"simple\");\n      } else if (initializers.equals(StaticUserWebFilter.class.getName())) {\n        conf.set(filterInitializerConfKey,\n          RMAuthenticationFilterInitializer.class.getName() + \",\"\n              + initializers);\n        conf.set(authTypeKey, \"simple\");\n      }\n    }\n\n    Builder\u003cApplicationMasterService\u003e builder \u003d \n        WebApps\n            .$for(\"cluster\", ApplicationMasterService.class, masterService,\n                \"ws\")\n            .with(conf)\n            .withHttpSpnegoPrincipalKey(\n                YarnConfiguration.RM_WEBAPP_SPNEGO_USER_NAME_KEY)\n            .withHttpSpnegoKeytabKey(\n                YarnConfiguration.RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n            .at(webAppAddress);\n    String proxyHostAndPort \u003d WebAppUtils.getProxyHostAndPort(conf);\n    if(WebAppUtils.getResolvedRMWebAppURLWithoutScheme(conf).\n        equals(proxyHostAndPort)) {\n      if (HAUtil.isHAEnabled(conf)) {\n        fetcher \u003d new AppReportFetcher(conf);\n      } else {\n        fetcher \u003d new AppReportFetcher(conf, getClientRMService());\n      }\n      builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME,\n          ProxyUriUtils.PROXY_PATH_SPEC, WebAppProxyServlet.class);\n      builder.withAttribute(WebAppProxy.FETCHER_ATTRIBUTE, fetcher);\n      String[] proxyParts \u003d proxyHostAndPort.split(\":\");\n      builder.withAttribute(WebAppProxy.PROXY_HOST_ATTRIBUTE, proxyParts[0]);\n\n    }\n    webApp \u003d builder.start(new RMWebApp(this));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "d6532d3a77abe5a9b1760c1e26a899d49aa661dc": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2247. Made RM web services authenticate users via kerberos and delegation token. Contributed by Varun Vasudev.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1613821 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/07/14 10:55 AM",
      "commitName": "d6532d3a77abe5a9b1760c1e26a899d49aa661dc",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "25/07/14 1:42 PM",
      "commitNameOld": "d4fec3493351c619a0278929ae2d5c8cd67cbfbe",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 1.88,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,84 @@\n   protected void startWepApp() {\n+\n+    // Use the customized yarn filter instead of the standard kerberos filter to\n+    // allow users to authenticate using delegation tokens\n+    // 3 conditions need to be satisfied -\n+    // 1. security is enabled\n+    // 2. http auth type is set to kerberos\n+    // 3. \"yarn.resourcemanager.webapp.use-yarn-filter\" override is set to true\n+\n+    Configuration conf \u003d getConfig();\n+    boolean useYarnAuthenticationFilter \u003d\n+        conf.getBoolean(\n+          YarnConfiguration.RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER,\n+          YarnConfiguration.DEFAULT_RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER);\n+    String authPrefix \u003d \"hadoop.http.authentication.\";\n+    String authTypeKey \u003d authPrefix + \"type\";\n+    String initializers \u003d conf.get(\"hadoop.http.filter.initializers\");\n+    if (UserGroupInformation.isSecurityEnabled()\n+        \u0026\u0026 useYarnAuthenticationFilter\n+        \u0026\u0026 conf.get(authTypeKey, \"\").equalsIgnoreCase(\n+          KerberosAuthenticationHandler.TYPE)) {\n+      LOG.info(\"Using RM authentication filter(kerberos/delegation-token)\"\n+          + \" for RM webapp authentication\");\n+      RMAuthenticationHandler\n+        .setSecretManager(getClientRMService().rmDTSecretManager);\n+      String yarnAuthKey \u003d\n+          authPrefix + RMAuthenticationFilter.AUTH_HANDLER_PROPERTY;\n+      conf.setStrings(yarnAuthKey, RMAuthenticationHandler.class.getName());\n+\n+      initializers \u003d\n+          initializers \u003d\u003d null || initializers.isEmpty() ? \"\" : \",\"\n+              + initializers;\n+      if (!initializers.contains(RMAuthenticationFilterInitializer.class\n+        .getName())) {\n+        conf.set(\"hadoop.http.filter.initializers\",\n+          RMAuthenticationFilterInitializer.class.getName() + initializers);\n+      }\n+    }\n+\n+    // if security is not enabled and the default filter initializer has been\n+    // set, set the initializer to include the\n+    // RMAuthenticationFilterInitializer which in turn will set up the simple\n+    // auth filter.\n+\n+    if (!UserGroupInformation.isSecurityEnabled()) {\n+      if (initializers \u003d\u003d null || initializers.isEmpty()) {\n+        conf.set(\"hadoop.http.filter.initializers\",\n+          RMAuthenticationFilterInitializer.class.getName());\n+        conf.set(authTypeKey, \"simple\");\n+      } else if (initializers.equals(StaticUserWebFilter.class.getName())) {\n+        conf.set(\"hadoop.http.filter.initializers\",\n+          RMAuthenticationFilterInitializer.class.getName() + \",\"\n+              + initializers);\n+        conf.set(authTypeKey, \"simple\");\n+      }\n+    }\n+\n     Builder\u003cApplicationMasterService\u003e builder \u003d \n         WebApps\n             .$for(\"cluster\", ApplicationMasterService.class, masterService,\n                 \"ws\")\n             .with(conf)\n             .withHttpSpnegoPrincipalKey(\n                 YarnConfiguration.RM_WEBAPP_SPNEGO_USER_NAME_KEY)\n             .withHttpSpnegoKeytabKey(\n                 YarnConfiguration.RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n             .at(webAppAddress);\n     String proxyHostAndPort \u003d WebAppUtils.getProxyHostAndPort(conf);\n     if(WebAppUtils.getResolvedRMWebAppURLWithoutScheme(conf).\n         equals(proxyHostAndPort)) {\n       if (HAUtil.isHAEnabled(conf)) {\n         fetcher \u003d new AppReportFetcher(conf);\n       } else {\n         fetcher \u003d new AppReportFetcher(conf, getClientRMService());\n       }\n       builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME,\n           ProxyUriUtils.PROXY_PATH_SPEC, WebAppProxyServlet.class);\n       builder.withAttribute(WebAppProxy.FETCHER_ATTRIBUTE, fetcher);\n       String[] proxyParts \u003d proxyHostAndPort.split(\":\");\n       builder.withAttribute(WebAppProxy.PROXY_HOST_ATTRIBUTE, proxyParts[0]);\n \n     }\n     webApp \u003d builder.start(new RMWebApp(this));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startWepApp() {\n\n    // Use the customized yarn filter instead of the standard kerberos filter to\n    // allow users to authenticate using delegation tokens\n    // 3 conditions need to be satisfied -\n    // 1. security is enabled\n    // 2. http auth type is set to kerberos\n    // 3. \"yarn.resourcemanager.webapp.use-yarn-filter\" override is set to true\n\n    Configuration conf \u003d getConfig();\n    boolean useYarnAuthenticationFilter \u003d\n        conf.getBoolean(\n          YarnConfiguration.RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER,\n          YarnConfiguration.DEFAULT_RM_WEBAPP_DELEGATION_TOKEN_AUTH_FILTER);\n    String authPrefix \u003d \"hadoop.http.authentication.\";\n    String authTypeKey \u003d authPrefix + \"type\";\n    String initializers \u003d conf.get(\"hadoop.http.filter.initializers\");\n    if (UserGroupInformation.isSecurityEnabled()\n        \u0026\u0026 useYarnAuthenticationFilter\n        \u0026\u0026 conf.get(authTypeKey, \"\").equalsIgnoreCase(\n          KerberosAuthenticationHandler.TYPE)) {\n      LOG.info(\"Using RM authentication filter(kerberos/delegation-token)\"\n          + \" for RM webapp authentication\");\n      RMAuthenticationHandler\n        .setSecretManager(getClientRMService().rmDTSecretManager);\n      String yarnAuthKey \u003d\n          authPrefix + RMAuthenticationFilter.AUTH_HANDLER_PROPERTY;\n      conf.setStrings(yarnAuthKey, RMAuthenticationHandler.class.getName());\n\n      initializers \u003d\n          initializers \u003d\u003d null || initializers.isEmpty() ? \"\" : \",\"\n              + initializers;\n      if (!initializers.contains(RMAuthenticationFilterInitializer.class\n        .getName())) {\n        conf.set(\"hadoop.http.filter.initializers\",\n          RMAuthenticationFilterInitializer.class.getName() + initializers);\n      }\n    }\n\n    // if security is not enabled and the default filter initializer has been\n    // set, set the initializer to include the\n    // RMAuthenticationFilterInitializer which in turn will set up the simple\n    // auth filter.\n\n    if (!UserGroupInformation.isSecurityEnabled()) {\n      if (initializers \u003d\u003d null || initializers.isEmpty()) {\n        conf.set(\"hadoop.http.filter.initializers\",\n          RMAuthenticationFilterInitializer.class.getName());\n        conf.set(authTypeKey, \"simple\");\n      } else if (initializers.equals(StaticUserWebFilter.class.getName())) {\n        conf.set(\"hadoop.http.filter.initializers\",\n          RMAuthenticationFilterInitializer.class.getName() + \",\"\n              + initializers);\n        conf.set(authTypeKey, \"simple\");\n      }\n    }\n\n    Builder\u003cApplicationMasterService\u003e builder \u003d \n        WebApps\n            .$for(\"cluster\", ApplicationMasterService.class, masterService,\n                \"ws\")\n            .with(conf)\n            .withHttpSpnegoPrincipalKey(\n                YarnConfiguration.RM_WEBAPP_SPNEGO_USER_NAME_KEY)\n            .withHttpSpnegoKeytabKey(\n                YarnConfiguration.RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n            .at(webAppAddress);\n    String proxyHostAndPort \u003d WebAppUtils.getProxyHostAndPort(conf);\n    if(WebAppUtils.getResolvedRMWebAppURLWithoutScheme(conf).\n        equals(proxyHostAndPort)) {\n      if (HAUtil.isHAEnabled(conf)) {\n        fetcher \u003d new AppReportFetcher(conf);\n      } else {\n        fetcher \u003d new AppReportFetcher(conf, getClientRMService());\n      }\n      builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME,\n          ProxyUriUtils.PROXY_PATH_SPEC, WebAppProxyServlet.class);\n      builder.withAttribute(WebAppProxy.FETCHER_ATTRIBUTE, fetcher);\n      String[] proxyParts \u003d proxyHostAndPort.split(\":\");\n      builder.withAttribute(WebAppProxy.PROXY_HOST_ATTRIBUTE, proxyParts[0]);\n\n    }\n    webApp \u003d builder.start(new RMWebApp(this));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "4931545f76f6c76e80e65c3bf6773e1983248044": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1482. Modified WebApplicationProxy to make it work across ResourceManager fail-over. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1556380 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/01/14 2:16 PM",
      "commitName": "4931545f76f6c76e80e65c3bf6773e1983248044",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "06/01/14 5:56 PM",
      "commitNameOld": "c3cc855d27470edca7ca0bdc0aa8907b544b636e",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.85,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,28 @@\n   protected void startWepApp() {\n     Builder\u003cApplicationMasterService\u003e builder \u003d \n         WebApps\n             .$for(\"cluster\", ApplicationMasterService.class, masterService,\n                 \"ws\")\n             .with(conf)\n             .withHttpSpnegoPrincipalKey(\n                 YarnConfiguration.RM_WEBAPP_SPNEGO_USER_NAME_KEY)\n             .withHttpSpnegoKeytabKey(\n                 YarnConfiguration.RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n-            .at(WebAppUtils.getRMWebAppURLWithoutScheme(conf)); \n+            .at(webAppAddress);\n     String proxyHostAndPort \u003d WebAppUtils.getProxyHostAndPort(conf);\n     if(WebAppUtils.getResolvedRMWebAppURLWithoutScheme(conf).\n         equals(proxyHostAndPort)) {\n-      AppReportFetcher fetcher \u003d new AppReportFetcher(conf, getClientRMService());\n-      builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME, \n+      if (HAUtil.isHAEnabled(conf)) {\n+        fetcher \u003d new AppReportFetcher(conf);\n+      } else {\n+        fetcher \u003d new AppReportFetcher(conf, getClientRMService());\n+      }\n+      builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME,\n           ProxyUriUtils.PROXY_PATH_SPEC, WebAppProxyServlet.class);\n       builder.withAttribute(WebAppProxy.FETCHER_ATTRIBUTE, fetcher);\n       String[] proxyParts \u003d proxyHostAndPort.split(\":\");\n       builder.withAttribute(WebAppProxy.PROXY_HOST_ATTRIBUTE, proxyParts[0]);\n \n     }\n     webApp \u003d builder.start(new RMWebApp(this));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startWepApp() {\n    Builder\u003cApplicationMasterService\u003e builder \u003d \n        WebApps\n            .$for(\"cluster\", ApplicationMasterService.class, masterService,\n                \"ws\")\n            .with(conf)\n            .withHttpSpnegoPrincipalKey(\n                YarnConfiguration.RM_WEBAPP_SPNEGO_USER_NAME_KEY)\n            .withHttpSpnegoKeytabKey(\n                YarnConfiguration.RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n            .at(webAppAddress);\n    String proxyHostAndPort \u003d WebAppUtils.getProxyHostAndPort(conf);\n    if(WebAppUtils.getResolvedRMWebAppURLWithoutScheme(conf).\n        equals(proxyHostAndPort)) {\n      if (HAUtil.isHAEnabled(conf)) {\n        fetcher \u003d new AppReportFetcher(conf);\n      } else {\n        fetcher \u003d new AppReportFetcher(conf, getClientRMService());\n      }\n      builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME,\n          ProxyUriUtils.PROXY_PATH_SPEC, WebAppProxyServlet.class);\n      builder.withAttribute(WebAppProxy.FETCHER_ATTRIBUTE, fetcher);\n      String[] proxyParts \u003d proxyHostAndPort.split(\":\");\n      builder.withAttribute(WebAppProxy.PROXY_HOST_ATTRIBUTE, proxyParts[0]);\n\n    }\n    webApp \u003d builder.start(new RMWebApp(this));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "78e995a37d44cfcf511dcaf7e149a6fd47ba3434": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1204. Added separate configuration properties for https for RM and NM without which servers enabled with https will also start on http ports. Contributed by Omkar Vinit Joshi.\nMAPREDUCE-5523. Added separate configuration properties for https for JHS without which even when https is enabled, it starts on http port itself. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1525947 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/09/13 10:20 AM",
      "commitName": "78e995a37d44cfcf511dcaf7e149a6fd47ba3434",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "16/09/13 11:33 AM",
      "commitNameOld": "ead3dcc3dea0d5b6d3248c1e1a6300f0714a8456",
      "commitAuthorOld": "Bikas Saha",
      "daysBetweenCommits": 7.95,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,24 @@\n   protected void startWepApp() {\n     Builder\u003cApplicationMasterService\u003e builder \u003d \n         WebApps\n             .$for(\"cluster\", ApplicationMasterService.class, masterService,\n                 \"ws\")\n             .with(conf)\n             .withHttpSpnegoPrincipalKey(\n                 YarnConfiguration.RM_WEBAPP_SPNEGO_USER_NAME_KEY)\n             .withHttpSpnegoKeytabKey(\n                 YarnConfiguration.RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n-            .at(this.conf.get(YarnConfiguration.RM_WEBAPP_ADDRESS,\n-        YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS)); \n-    String proxyHostAndPort \u003d YarnConfiguration.getProxyHostAndPort(conf);\n-    if(YarnConfiguration.getRMWebAppHostAndPort(conf).\n+            .at(WebAppUtils.getRMWebAppURLWithoutScheme(conf)); \n+    String proxyHostAndPort \u003d WebAppUtils.getProxyHostAndPort(conf);\n+    if(WebAppUtils.getResolvedRMWebAppURLWithoutScheme(conf).\n         equals(proxyHostAndPort)) {\n       AppReportFetcher fetcher \u003d new AppReportFetcher(conf, getClientRMService());\n       builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME, \n           ProxyUriUtils.PROXY_PATH_SPEC, WebAppProxyServlet.class);\n       builder.withAttribute(WebAppProxy.FETCHER_ATTRIBUTE, fetcher);\n       String[] proxyParts \u003d proxyHostAndPort.split(\":\");\n       builder.withAttribute(WebAppProxy.PROXY_HOST_ATTRIBUTE, proxyParts[0]);\n \n     }\n     webApp \u003d builder.start(new RMWebApp(this));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startWepApp() {\n    Builder\u003cApplicationMasterService\u003e builder \u003d \n        WebApps\n            .$for(\"cluster\", ApplicationMasterService.class, masterService,\n                \"ws\")\n            .with(conf)\n            .withHttpSpnegoPrincipalKey(\n                YarnConfiguration.RM_WEBAPP_SPNEGO_USER_NAME_KEY)\n            .withHttpSpnegoKeytabKey(\n                YarnConfiguration.RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n            .at(WebAppUtils.getRMWebAppURLWithoutScheme(conf)); \n    String proxyHostAndPort \u003d WebAppUtils.getProxyHostAndPort(conf);\n    if(WebAppUtils.getResolvedRMWebAppURLWithoutScheme(conf).\n        equals(proxyHostAndPort)) {\n      AppReportFetcher fetcher \u003d new AppReportFetcher(conf, getClientRMService());\n      builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME, \n          ProxyUriUtils.PROXY_PATH_SPEC, WebAppProxyServlet.class);\n      builder.withAttribute(WebAppProxy.FETCHER_ATTRIBUTE, fetcher);\n      String[] proxyParts \u003d proxyHostAndPort.split(\":\");\n      builder.withAttribute(WebAppProxy.PROXY_HOST_ATTRIBUTE, proxyParts[0]);\n\n    }\n    webApp \u003d builder.start(new RMWebApp(this));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "5adba5597ce071c2e84d0c9834e1d9e5e76f9bdb": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1085. Addendum patch to address issues with the earlier patch.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1517721 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/08/13 3:59 PM",
      "commitName": "5adba5597ce071c2e84d0c9834e1d9e5e76f9bdb",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "24/08/13 4:32 PM",
      "commitNameOld": "18e805677d00616997ad7e9c6991bbfb26d73ef4",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 1.98,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   protected void startWepApp() {\n     Builder\u003cApplicationMasterService\u003e builder \u003d \n         WebApps\n             .$for(\"cluster\", ApplicationMasterService.class, masterService,\n                 \"ws\")\n             .with(conf)\n             .withHttpSpnegoPrincipalKey(\n                 YarnConfiguration.RM_WEBAPP_SPNEGO_USER_NAME_KEY)\n             .withHttpSpnegoKeytabKey(\n-                YarnConfiguration.RM_WEBAPP_SPENGO_KEYTAB_FILE_KEY)\n+                YarnConfiguration.RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n             .at(this.conf.get(YarnConfiguration.RM_WEBAPP_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS)); \n     String proxyHostAndPort \u003d YarnConfiguration.getProxyHostAndPort(conf);\n     if(YarnConfiguration.getRMWebAppHostAndPort(conf).\n         equals(proxyHostAndPort)) {\n       AppReportFetcher fetcher \u003d new AppReportFetcher(conf, getClientRMService());\n       builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME, \n           ProxyUriUtils.PROXY_PATH_SPEC, WebAppProxyServlet.class);\n       builder.withAttribute(WebAppProxy.FETCHER_ATTRIBUTE, fetcher);\n       String[] proxyParts \u003d proxyHostAndPort.split(\":\");\n       builder.withAttribute(WebAppProxy.PROXY_HOST_ATTRIBUTE, proxyParts[0]);\n \n     }\n     webApp \u003d builder.start(new RMWebApp(this));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startWepApp() {\n    Builder\u003cApplicationMasterService\u003e builder \u003d \n        WebApps\n            .$for(\"cluster\", ApplicationMasterService.class, masterService,\n                \"ws\")\n            .with(conf)\n            .withHttpSpnegoPrincipalKey(\n                YarnConfiguration.RM_WEBAPP_SPNEGO_USER_NAME_KEY)\n            .withHttpSpnegoKeytabKey(\n                YarnConfiguration.RM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n            .at(this.conf.get(YarnConfiguration.RM_WEBAPP_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS)); \n    String proxyHostAndPort \u003d YarnConfiguration.getProxyHostAndPort(conf);\n    if(YarnConfiguration.getRMWebAppHostAndPort(conf).\n        equals(proxyHostAndPort)) {\n      AppReportFetcher fetcher \u003d new AppReportFetcher(conf, getClientRMService());\n      builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME, \n          ProxyUriUtils.PROXY_PATH_SPEC, WebAppProxyServlet.class);\n      builder.withAttribute(WebAppProxy.FETCHER_ATTRIBUTE, fetcher);\n      String[] proxyParts \u003d proxyHostAndPort.split(\":\");\n      builder.withAttribute(WebAppProxy.PROXY_HOST_ATTRIBUTE, proxyParts[0]);\n\n    }\n    webApp \u003d builder.start(new RMWebApp(this));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "e86036662c139cd7e67e69a0215471b1ec724a05": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1085. Modified YARN and MR2 web-apps to do HTTP authentication in secure setup with kerberos. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1517101 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/08/13 7:47 PM",
      "commitName": "e86036662c139cd7e67e69a0215471b1ec724a05",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "21/08/13 4:55 PM",
      "commitNameOld": "ad0011a3405fee6c6e45996d39557e0f8d420633",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 2.12,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,25 @@\n   protected void startWepApp() {\n     Builder\u003cApplicationMasterService\u003e builder \u003d \n-      WebApps.$for(\"cluster\", ApplicationMasterService.class, masterService, \"ws\").at(\n-          this.conf.get(YarnConfiguration.RM_WEBAPP_ADDRESS,\n-          YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS)); \n+        WebApps\n+            .$for(\"cluster\", ApplicationMasterService.class, masterService,\n+                \"ws\")\n+            .with(conf)\n+            .withHttpSpnegoPrincipalKey(\n+                YarnConfiguration.RM_WEBAPP_SPNEGO_USER_NAME_KEY)\n+            .withHttpSpnegoKeytabKey(\n+                YarnConfiguration.RM_WEBAPP_SPENGO_KEYTAB_FILE_KEY)\n+            .at(this.conf.get(YarnConfiguration.RM_WEBAPP_ADDRESS,\n+        YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS)); \n     String proxyHostAndPort \u003d YarnConfiguration.getProxyHostAndPort(conf);\n     if(YarnConfiguration.getRMWebAppHostAndPort(conf).\n         equals(proxyHostAndPort)) {\n       AppReportFetcher fetcher \u003d new AppReportFetcher(conf, getClientRMService());\n       builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME, \n           ProxyUriUtils.PROXY_PATH_SPEC, WebAppProxyServlet.class);\n       builder.withAttribute(WebAppProxy.FETCHER_ATTRIBUTE, fetcher);\n       String[] proxyParts \u003d proxyHostAndPort.split(\":\");\n       builder.withAttribute(WebAppProxy.PROXY_HOST_ATTRIBUTE, proxyParts[0]);\n \n     }\n     webApp \u003d builder.start(new RMWebApp(this));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startWepApp() {\n    Builder\u003cApplicationMasterService\u003e builder \u003d \n        WebApps\n            .$for(\"cluster\", ApplicationMasterService.class, masterService,\n                \"ws\")\n            .with(conf)\n            .withHttpSpnegoPrincipalKey(\n                YarnConfiguration.RM_WEBAPP_SPNEGO_USER_NAME_KEY)\n            .withHttpSpnegoKeytabKey(\n                YarnConfiguration.RM_WEBAPP_SPENGO_KEYTAB_FILE_KEY)\n            .at(this.conf.get(YarnConfiguration.RM_WEBAPP_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS)); \n    String proxyHostAndPort \u003d YarnConfiguration.getProxyHostAndPort(conf);\n    if(YarnConfiguration.getRMWebAppHostAndPort(conf).\n        equals(proxyHostAndPort)) {\n      AppReportFetcher fetcher \u003d new AppReportFetcher(conf, getClientRMService());\n      builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME, \n          ProxyUriUtils.PROXY_PATH_SPEC, WebAppProxyServlet.class);\n      builder.withAttribute(WebAppProxy.FETCHER_ATTRIBUTE, fetcher);\n      String[] proxyParts \u003d proxyHostAndPort.split(\":\");\n      builder.withAttribute(WebAppProxy.PROXY_HOST_ATTRIBUTE, proxyParts[0]);\n\n    }\n    webApp \u003d builder.start(new RMWebApp(this));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected void startWepApp() {\n    Builder\u003cApplicationMasterService\u003e builder \u003d \n      WebApps.$for(\"cluster\", ApplicationMasterService.class, masterService, \"ws\").at(\n          this.conf.get(YarnConfiguration.RM_WEBAPP_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS)); \n    String proxyHostAndPort \u003d YarnConfiguration.getProxyHostAndPort(conf);\n    if(YarnConfiguration.getRMWebAppHostAndPort(conf).\n        equals(proxyHostAndPort)) {\n      AppReportFetcher fetcher \u003d new AppReportFetcher(conf, getClientRMService());\n      builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME, \n          ProxyUriUtils.PROXY_PATH_SPEC, WebAppProxyServlet.class);\n      builder.withAttribute(WebAppProxy.FETCHER_ATTRIBUTE, fetcher);\n      String[] proxyParts \u003d proxyHostAndPort.split(\":\");\n      builder.withAttribute(WebAppProxy.PROXY_HOST_ATTRIBUTE, proxyParts[0]);\n\n    }\n    webApp \u003d builder.start(new RMWebApp(this));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java"
      }
    },
    "d09cf903abcc6af9f9bc77cc79467b859861430a": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4093. Improve RM WebApp start up when proxy address is not set (Devaraj K vai bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1328090 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/04/12 12:42 PM",
      "commitName": "d09cf903abcc6af9f9bc77cc79467b859861430a",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "17/04/12 11:48 AM",
      "commitNameOld": "fe7711df98b9dd16259f6534e8461a29f24caadc",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 2.04,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n   protected void startWepApp() {\n     Builder\u003cApplicationMasterService\u003e builder \u003d \n       WebApps.$for(\"cluster\", ApplicationMasterService.class, masterService, \"ws\").at(\n           this.conf.get(YarnConfiguration.RM_WEBAPP_ADDRESS,\n           YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS)); \n+    String proxyHostAndPort \u003d YarnConfiguration.getProxyHostAndPort(conf);\n     if(YarnConfiguration.getRMWebAppHostAndPort(conf).\n-        equals(YarnConfiguration.getProxyHostAndPort(conf))) {\n+        equals(proxyHostAndPort)) {\n       AppReportFetcher fetcher \u003d new AppReportFetcher(conf, getClientRMService());\n       builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME, \n           ProxyUriUtils.PROXY_PATH_SPEC, WebAppProxyServlet.class);\n       builder.withAttribute(WebAppProxy.FETCHER_ATTRIBUTE, fetcher);\n-      String proxy \u003d YarnConfiguration.getProxyHostAndPort(conf);\n-      String[] proxyParts \u003d proxy.split(\":\");\n+      String[] proxyParts \u003d proxyHostAndPort.split(\":\");\n       builder.withAttribute(WebAppProxy.PROXY_HOST_ATTRIBUTE, proxyParts[0]);\n \n     }\n     webApp \u003d builder.start(new RMWebApp(this));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startWepApp() {\n    Builder\u003cApplicationMasterService\u003e builder \u003d \n      WebApps.$for(\"cluster\", ApplicationMasterService.class, masterService, \"ws\").at(\n          this.conf.get(YarnConfiguration.RM_WEBAPP_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS)); \n    String proxyHostAndPort \u003d YarnConfiguration.getProxyHostAndPort(conf);\n    if(YarnConfiguration.getRMWebAppHostAndPort(conf).\n        equals(proxyHostAndPort)) {\n      AppReportFetcher fetcher \u003d new AppReportFetcher(conf, getClientRMService());\n      builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME, \n          ProxyUriUtils.PROXY_PATH_SPEC, WebAppProxyServlet.class);\n      builder.withAttribute(WebAppProxy.FETCHER_ATTRIBUTE, fetcher);\n      String[] proxyParts \u003d proxyHostAndPort.split(\":\");\n      builder.withAttribute(WebAppProxy.PROXY_HOST_ATTRIBUTE, proxyParts[0]);\n\n    }\n    webApp \u003d builder.start(new RMWebApp(this));\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "d41cb76b56e19f6eb411b3dacaf28a490d079c68": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3960. Fix web-proxy to forward request to AM with configured hostname or IP. Contributed by Thomas Graves. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1296878 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/03/12 1:14 PM",
      "commitName": "d41cb76b56e19f6eb411b3dacaf28a490d079c68",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "20/02/12 9:08 PM",
      "commitNameOld": "5ee495e6f34faff231ad87ec890188eb63617393",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 12.67,
      "commitsBetweenForRepo": 104,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,18 @@\n   protected void startWepApp() {\n     Builder\u003cApplicationMasterService\u003e builder \u003d \n       WebApps.$for(\"cluster\", ApplicationMasterService.class, masterService, \"ws\").at(\n           this.conf.get(YarnConfiguration.RM_WEBAPP_ADDRESS,\n           YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS)); \n     if(YarnConfiguration.getRMWebAppHostAndPort(conf).\n         equals(YarnConfiguration.getProxyHostAndPort(conf))) {\n       AppReportFetcher fetcher \u003d new AppReportFetcher(conf, getClientRMService());\n       builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME, \n           ProxyUriUtils.PROXY_PATH_SPEC, WebAppProxyServlet.class);\n       builder.withAttribute(WebAppProxy.FETCHER_ATTRIBUTE, fetcher);\n+      String proxy \u003d YarnConfiguration.getProxyHostAndPort(conf);\n+      String[] proxyParts \u003d proxy.split(\":\");\n+      builder.withAttribute(WebAppProxy.PROXY_HOST_ATTRIBUTE, proxyParts[0]);\n+\n     }\n     webApp \u003d builder.start(new RMWebApp(this));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startWepApp() {\n    Builder\u003cApplicationMasterService\u003e builder \u003d \n      WebApps.$for(\"cluster\", ApplicationMasterService.class, masterService, \"ws\").at(\n          this.conf.get(YarnConfiguration.RM_WEBAPP_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS)); \n    if(YarnConfiguration.getRMWebAppHostAndPort(conf).\n        equals(YarnConfiguration.getProxyHostAndPort(conf))) {\n      AppReportFetcher fetcher \u003d new AppReportFetcher(conf, getClientRMService());\n      builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME, \n          ProxyUriUtils.PROXY_PATH_SPEC, WebAppProxyServlet.class);\n      builder.withAttribute(WebAppProxy.FETCHER_ATTRIBUTE, fetcher);\n      String proxy \u003d YarnConfiguration.getProxyHostAndPort(conf);\n      String[] proxyParts \u003d proxy.split(\":\");\n      builder.withAttribute(WebAppProxy.PROXY_HOST_ATTRIBUTE, proxyParts[0]);\n\n    }\n    webApp \u003d builder.start(new RMWebApp(this));\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "0ea8570be578be60e2f32849900a1c50506d78d3": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2863. Support web services for YARN and MR components. (Thomas Graves via vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1213975 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/12/11 3:05 PM",
      "commitName": "0ea8570be578be60e2f32849900a1c50506d78d3",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "25/10/11 11:29 PM",
      "commitNameOld": "8aabd3d4e67cad8dc7e46f5339981135badc7421",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 48.69,
      "commitsBetweenForRepo": 319,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,14 @@\n   protected void startWepApp() {\n     Builder\u003cApplicationMasterService\u003e builder \u003d \n-      WebApps.$for(\"cluster\", masterService).at(\n+      WebApps.$for(\"cluster\", ApplicationMasterService.class, masterService, \"ws\").at(\n           this.conf.get(YarnConfiguration.RM_WEBAPP_ADDRESS,\n           YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS)); \n     if(YarnConfiguration.getRMWebAppHostAndPort(conf).\n         equals(YarnConfiguration.getProxyHostAndPort(conf))) {\n       AppReportFetcher fetcher \u003d new AppReportFetcher(conf, getClientRMService());\n       builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME, \n           ProxyUriUtils.PROXY_PATH_SPEC, WebAppProxyServlet.class);\n       builder.withAttribute(WebAppProxy.FETCHER_ATTRIBUTE, fetcher);\n     }\n     webApp \u003d builder.start(new RMWebApp(this));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startWepApp() {\n    Builder\u003cApplicationMasterService\u003e builder \u003d \n      WebApps.$for(\"cluster\", ApplicationMasterService.class, masterService, \"ws\").at(\n          this.conf.get(YarnConfiguration.RM_WEBAPP_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS)); \n    if(YarnConfiguration.getRMWebAppHostAndPort(conf).\n        equals(YarnConfiguration.getProxyHostAndPort(conf))) {\n      AppReportFetcher fetcher \u003d new AppReportFetcher(conf, getClientRMService());\n      builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME, \n          ProxyUriUtils.PROXY_PATH_SPEC, WebAppProxyServlet.class);\n      builder.withAttribute(WebAppProxy.FETCHER_ATTRIBUTE, fetcher);\n    }\n    webApp \u003d builder.start(new RMWebApp(this));\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "8aabd3d4e67cad8dc7e46f5339981135badc7421": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2858. Added a WebApp Proxy for applications. Contributed by Robert Evans.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1189036 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/10/11 11:29 PM",
      "commitName": "8aabd3d4e67cad8dc7e46f5339981135badc7421",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "25/10/11 7:53 PM",
      "commitNameOld": "29c6c3ed328965a73fe7b68eb29cb30794beef38",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.15,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,7 +1,14 @@\n   protected void startWepApp() {\n-    webApp \u003d WebApps.$for(\"cluster\", masterService).at(\n-        this.conf.get(YarnConfiguration.RM_WEBAPP_ADDRESS,\n-        YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS)).\n-      start(new RMWebApp(this));\n-\n+    Builder\u003cApplicationMasterService\u003e builder \u003d \n+      WebApps.$for(\"cluster\", masterService).at(\n+          this.conf.get(YarnConfiguration.RM_WEBAPP_ADDRESS,\n+          YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS)); \n+    if(YarnConfiguration.getRMWebAppHostAndPort(conf).\n+        equals(YarnConfiguration.getProxyHostAndPort(conf))) {\n+      AppReportFetcher fetcher \u003d new AppReportFetcher(conf, getClientRMService());\n+      builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME, \n+          ProxyUriUtils.PROXY_PATH_SPEC, WebAppProxyServlet.class);\n+      builder.withAttribute(WebAppProxy.FETCHER_ATTRIBUTE, fetcher);\n+    }\n+    webApp \u003d builder.start(new RMWebApp(this));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startWepApp() {\n    Builder\u003cApplicationMasterService\u003e builder \u003d \n      WebApps.$for(\"cluster\", masterService).at(\n          this.conf.get(YarnConfiguration.RM_WEBAPP_ADDRESS,\n          YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS)); \n    if(YarnConfiguration.getRMWebAppHostAndPort(conf).\n        equals(YarnConfiguration.getProxyHostAndPort(conf))) {\n      AppReportFetcher fetcher \u003d new AppReportFetcher(conf, getClientRMService());\n      builder.withServlet(ProxyUriUtils.PROXY_SERVLET_NAME, \n          ProxyUriUtils.PROXY_PATH_SPEC, WebAppProxyServlet.class);\n      builder.withAttribute(WebAppProxy.FETCHER_ATTRIBUTE, fetcher);\n    }\n    webApp \u003d builder.start(new RMWebApp(this));\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "df2991c0cbc3f35c2640b93680667507c4f810dd": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3104. Implemented Application-acls. (vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1186748 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/10/11 4:45 AM",
      "commitName": "df2991c0cbc3f35c2640b93680667507c4f810dd",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "16/10/11 12:27 PM",
      "commitNameOld": "68328ae92632afc9cdd6e75b7a8d832723ddbe3b",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 3.68,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,7 +1,7 @@\n   protected void startWepApp() {\n     webApp \u003d WebApps.$for(\"cluster\", masterService).at(\n-        conf.get(YarnConfiguration.RM_WEBAPP_ADDRESS,\n+        this.conf.get(YarnConfiguration.RM_WEBAPP_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS)).\n       start(new RMWebApp(this));\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startWepApp() {\n    webApp \u003d WebApps.$for(\"cluster\", masterService).at(\n        this.conf.get(YarnConfiguration.RM_WEBAPP_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS)).\n      start(new RMWebApp(this));\n\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "5f6adcf396b78934d7da2bba0d052038ff962f26": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3021. Change base urls for RM web-ui. Contributed by Thomas Graves.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1176681 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/09/11 6:23 PM",
      "commitName": "5f6adcf396b78934d7da2bba0d052038ff962f26",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "25/09/11 7:46 AM",
      "commitNameOld": "a5c9ede1433871fcf4e2e802ee2a65950ecd1e72",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 2.44,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,7 +1,7 @@\n   protected void startWepApp() {\n-    webApp \u003d WebApps.$for(\"yarn\", masterService).at(\n+    webApp \u003d WebApps.$for(\"cluster\", masterService).at(\n         conf.get(YarnConfiguration.RM_WEBAPP_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS)).\n       start(new RMWebApp(this));\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startWepApp() {\n    webApp \u003d WebApps.$for(\"cluster\", masterService).at(\n        conf.get(YarnConfiguration.RM_WEBAPP_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS)).\n      start(new RMWebApp(this));\n\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "fafe8cd28e726566509c679e19d7da622f29f90d": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2864. Normalize configuration variable names for YARN. Contributed by Robert Evans.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1166955 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/09/11 6:44 PM",
      "commitName": "fafe8cd28e726566509c679e19d7da622f29f90d",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "06/09/11 4:40 PM",
      "commitNameOld": "d51078eb7edf4d28069163bad30d28e35c5e166e",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 2.09,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,7 +1,7 @@\n   protected void startWepApp() {\n     webApp \u003d WebApps.$for(\"yarn\", masterService).at(\n-        conf.get(YarnConfiguration.RM_WEBAPP_BIND_ADDRESS,\n-        YarnConfiguration.DEFAULT_RM_WEBAPP_BIND_ADDRESS)).\n+        conf.get(YarnConfiguration.RM_WEBAPP_ADDRESS,\n+        YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS)).\n       start(new RMWebApp(this));\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startWepApp() {\n    webApp \u003d WebApps.$for(\"yarn\", masterService).at(\n        conf.get(YarnConfiguration.RM_WEBAPP_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS)).\n      start(new RMWebApp(this));\n\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected void startWepApp() {\n    webApp \u003d WebApps.$for(\"yarn\", masterService).at(\n        conf.get(YarnConfiguration.RM_WEBAPP_BIND_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_WEBAPP_BIND_ADDRESS)).\n      start(new RMWebApp(this));\n\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,7 @@\n+  protected void startWepApp() {\n+    webApp \u003d WebApps.$for(\"yarn\", masterService).at(\n+        conf.get(YarnConfiguration.RM_WEBAPP_BIND_ADDRESS,\n+        YarnConfiguration.DEFAULT_RM_WEBAPP_BIND_ADDRESS)).\n+      start(new RMWebApp(this));\n+\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startWepApp() {\n    webApp \u003d WebApps.$for(\"yarn\", masterService).at(\n        conf.get(YarnConfiguration.RM_WEBAPP_BIND_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_WEBAPP_BIND_ADDRESS)).\n      start(new RMWebApp(this));\n\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java"
    }
  }
}