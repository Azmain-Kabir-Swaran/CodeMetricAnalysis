{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FileSystemTimelineReaderImpl.java",
  "functionName": "fillFields",
  "functionId": "fillFields___finalEntity-TimelineEntity__real-TimelineEntity__fields-EnumSet__Field__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/FileSystemTimelineReaderImpl.java",
  "functionStartLine": 133,
  "functionEndLine": 162,
  "numCommitsSeen": 20,
  "timeTaken": 880,
  "changeHistory": [
    "9e5155be363c6610ccf41fe08b7f1394f353ea65",
    "2d59bc4458eaeba6e5b98709340db6f0f1204b59"
  ],
  "changeHistoryShort": {
    "9e5155be363c6610ccf41fe08b7f1394f353ea65": "Ybodychange",
    "2d59bc4458eaeba6e5b98709340db6f0f1204b59": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9e5155be363c6610ccf41fe08b7f1394f353ea65": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3049. [Storage Implementation] Implement storage reader interface to fetch raw data from HBase backend (Zhijie Shen via sjlee)\n\n(cherry picked from commit 07433c2ad52df9e844dbd90020c277d3df844dcd)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "9e5155be363c6610ccf41fe08b7f1394f353ea65",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "2d59bc4458eaeba6e5b98709340db6f0f1204b59",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,30 @@\n   private static void fillFields(TimelineEntity finalEntity,\n       TimelineEntity real, EnumSet\u003cField\u003e fields) {\n     if (fields.contains(Field.ALL)) {\n-      finalEntity.setConfigs(real.getConfigs());\n-      finalEntity.setMetrics(real.getMetrics());\n-      finalEntity.setInfo(real.getInfo());\n-      finalEntity.setIsRelatedToEntities(real.getIsRelatedToEntities());\n-      finalEntity.setIsRelatedToEntities(real.getIsRelatedToEntities());\n-      finalEntity.setEvents(real.getEvents());\n-      return;\n+      fields \u003d EnumSet.allOf(Field.class);\n     }\n     for (Field field : fields) {\n       switch(field) {\n-      case CONFIGS:\n-        finalEntity.setConfigs(real.getConfigs());\n-        break;\n-      case METRICS:\n-        finalEntity.setMetrics(real.getMetrics());\n-        break;\n-      case INFO:\n-        finalEntity.setInfo(real.getInfo());\n-        break;\n-      case IS_RELATED_TO:\n-        finalEntity.setIsRelatedToEntities(real.getIsRelatedToEntities());\n-        break;\n-      case RELATES_TO:\n-        finalEntity.setIsRelatedToEntities(real.getIsRelatedToEntities());\n-        break;\n-      case EVENTS:\n-        finalEntity.setEvents(real.getEvents());\n-        break;\n-      default:\n-        continue;\n+        case CONFIGS:\n+          finalEntity.setConfigs(real.getConfigs());\n+          break;\n+        case METRICS:\n+          finalEntity.setMetrics(real.getMetrics());\n+          break;\n+        case INFO:\n+          finalEntity.setInfo(real.getInfo());\n+          break;\n+        case IS_RELATED_TO:\n+          finalEntity.setIsRelatedToEntities(real.getIsRelatedToEntities());\n+          break;\n+        case RELATES_TO:\n+          finalEntity.setIsRelatedToEntities(real.getIsRelatedToEntities());\n+          break;\n+        case EVENTS:\n+          finalEntity.setEvents(real.getEvents());\n+          break;\n+        default:\n+          continue;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void fillFields(TimelineEntity finalEntity,\n      TimelineEntity real, EnumSet\u003cField\u003e fields) {\n    if (fields.contains(Field.ALL)) {\n      fields \u003d EnumSet.allOf(Field.class);\n    }\n    for (Field field : fields) {\n      switch(field) {\n        case CONFIGS:\n          finalEntity.setConfigs(real.getConfigs());\n          break;\n        case METRICS:\n          finalEntity.setMetrics(real.getMetrics());\n          break;\n        case INFO:\n          finalEntity.setInfo(real.getInfo());\n          break;\n        case IS_RELATED_TO:\n          finalEntity.setIsRelatedToEntities(real.getIsRelatedToEntities());\n          break;\n        case RELATES_TO:\n          finalEntity.setIsRelatedToEntities(real.getIsRelatedToEntities());\n          break;\n        case EVENTS:\n          finalEntity.setEvents(real.getEvents());\n          break;\n        default:\n          continue;\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/FileSystemTimelineReaderImpl.java",
      "extendedDetails": {}
    },
    "2d59bc4458eaeba6e5b98709340db6f0f1204b59": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3051. Created storage oriented reader interface for fetching raw entity data and made the filesystem based implementation. Contributed by Varun Saxena.\n\n(cherry picked from commit 499ce52c7b645ec0b1cc8ac62dc9a3127b987a20)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "2d59bc4458eaeba6e5b98709340db6f0f1204b59",
      "commitAuthor": "Zhijie Shen",
      "diff": "@@ -0,0 +1,36 @@\n+  private static void fillFields(TimelineEntity finalEntity,\n+      TimelineEntity real, EnumSet\u003cField\u003e fields) {\n+    if (fields.contains(Field.ALL)) {\n+      finalEntity.setConfigs(real.getConfigs());\n+      finalEntity.setMetrics(real.getMetrics());\n+      finalEntity.setInfo(real.getInfo());\n+      finalEntity.setIsRelatedToEntities(real.getIsRelatedToEntities());\n+      finalEntity.setIsRelatedToEntities(real.getIsRelatedToEntities());\n+      finalEntity.setEvents(real.getEvents());\n+      return;\n+    }\n+    for (Field field : fields) {\n+      switch(field) {\n+      case CONFIGS:\n+        finalEntity.setConfigs(real.getConfigs());\n+        break;\n+      case METRICS:\n+        finalEntity.setMetrics(real.getMetrics());\n+        break;\n+      case INFO:\n+        finalEntity.setInfo(real.getInfo());\n+        break;\n+      case IS_RELATED_TO:\n+        finalEntity.setIsRelatedToEntities(real.getIsRelatedToEntities());\n+        break;\n+      case RELATES_TO:\n+        finalEntity.setIsRelatedToEntities(real.getIsRelatedToEntities());\n+        break;\n+      case EVENTS:\n+        finalEntity.setEvents(real.getEvents());\n+        break;\n+      default:\n+        continue;\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static void fillFields(TimelineEntity finalEntity,\n      TimelineEntity real, EnumSet\u003cField\u003e fields) {\n    if (fields.contains(Field.ALL)) {\n      finalEntity.setConfigs(real.getConfigs());\n      finalEntity.setMetrics(real.getMetrics());\n      finalEntity.setInfo(real.getInfo());\n      finalEntity.setIsRelatedToEntities(real.getIsRelatedToEntities());\n      finalEntity.setIsRelatedToEntities(real.getIsRelatedToEntities());\n      finalEntity.setEvents(real.getEvents());\n      return;\n    }\n    for (Field field : fields) {\n      switch(field) {\n      case CONFIGS:\n        finalEntity.setConfigs(real.getConfigs());\n        break;\n      case METRICS:\n        finalEntity.setMetrics(real.getMetrics());\n        break;\n      case INFO:\n        finalEntity.setInfo(real.getInfo());\n        break;\n      case IS_RELATED_TO:\n        finalEntity.setIsRelatedToEntities(real.getIsRelatedToEntities());\n        break;\n      case RELATES_TO:\n        finalEntity.setIsRelatedToEntities(real.getIsRelatedToEntities());\n        break;\n      case EVENTS:\n        finalEntity.setEvents(real.getEvents());\n        break;\n      default:\n        continue;\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/FileSystemTimelineReaderImpl.java"
    }
  }
}