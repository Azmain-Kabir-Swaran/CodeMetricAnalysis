{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "S3GuardTool.java",
  "functionName": "processUploads",
  "functionId": "processUploads___out-PrintStream",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/S3GuardTool.java",
  "functionStartLine": 1496,
  "functionEndLine": 1526,
  "numCommitsSeen": 42,
  "timeTaken": 1517,
  "changeHistory": [
    "1093a73689912f78547e6d23023be2fd1c7ddc85"
  ],
  "changeHistoryShort": {
    "1093a73689912f78547e6d23023be2fd1c7ddc85": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1093a73689912f78547e6d23023be2fd1c7ddc85": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-13974. S3Guard CLI to support list/purge of pending multipart commits.\nContributed by Aaron Fabbri\n",
      "commitDate": "18/01/18 5:13 AM",
      "commitName": "1093a73689912f78547e6d23023be2fd1c7ddc85",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,31 @@\n+    private void processUploads(PrintStream out) throws IOException {\n+      MultipartUtils.UploadIterator uploads;\n+      uploads \u003d getFilesystem().listUploads(prefix);\n+\n+      int count \u003d 0;\n+      while (uploads.hasNext()) {\n+        MultipartUpload upload \u003d uploads.next();\n+        if (!olderThan(upload, ageMsec)) {\n+          continue;\n+        }\n+        count++;\n+        if (mode \u003d\u003d Mode.ABORT || mode \u003d\u003d Mode.LIST || verbose) {\n+          println(out, \"%s%s %s\", mode \u003d\u003d Mode.ABORT ? \"Deleting: \" : \"\",\n+              upload.getKey(), upload.getUploadId());\n+        }\n+        if (mode \u003d\u003d Mode.ABORT) {\n+          getFilesystem().getWriteOperationHelper()\n+              .abortMultipartUpload(upload.getKey(), upload.getUploadId(),\n+                  LOG_EVENT);\n+        }\n+      }\n+      if (mode !\u003d Mode.EXPECT || verbose) {\n+        println(out, \"%s %d uploads %s.\", TOTAL, count,\n+            mode \u003d\u003d Mode.ABORT ? \"deleted\" : \"found\");\n+      }\n+      if (mode \u003d\u003d Mode.EXPECT) {\n+        if (count !\u003d expectedCount) {\n+          throw badState(\"Expected %d uploads, found %d\", expectedCount, count);\n+        }\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void processUploads(PrintStream out) throws IOException {\n      MultipartUtils.UploadIterator uploads;\n      uploads \u003d getFilesystem().listUploads(prefix);\n\n      int count \u003d 0;\n      while (uploads.hasNext()) {\n        MultipartUpload upload \u003d uploads.next();\n        if (!olderThan(upload, ageMsec)) {\n          continue;\n        }\n        count++;\n        if (mode \u003d\u003d Mode.ABORT || mode \u003d\u003d Mode.LIST || verbose) {\n          println(out, \"%s%s %s\", mode \u003d\u003d Mode.ABORT ? \"Deleting: \" : \"\",\n              upload.getKey(), upload.getUploadId());\n        }\n        if (mode \u003d\u003d Mode.ABORT) {\n          getFilesystem().getWriteOperationHelper()\n              .abortMultipartUpload(upload.getKey(), upload.getUploadId(),\n                  LOG_EVENT);\n        }\n      }\n      if (mode !\u003d Mode.EXPECT || verbose) {\n        println(out, \"%s %d uploads %s.\", TOTAL, count,\n            mode \u003d\u003d Mode.ABORT ? \"deleted\" : \"found\");\n      }\n      if (mode \u003d\u003d Mode.EXPECT) {\n        if (count !\u003d expectedCount) {\n          throw badState(\"Expected %d uploads, found %d\", expectedCount, count);\n        }\n      }\n    }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/S3GuardTool.java"
    }
  }
}