{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PBImageDelimitedTextWriter.java",
  "functionName": "getEntry",
  "functionId": "getEntry___parent-String__inode-INode",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/PBImageDelimitedTextWriter.java",
  "functionStartLine": 154,
  "functionEndLine": 164,
  "numCommitsSeen": 8,
  "timeTaken": 2790,
  "changeHistory": [
    "8370a0ae1681f2836fa0c1c63e334a3fdafafd7b",
    "410dd3faa55660b60e1292e2816b135cb476751e",
    "c7fcec24b845fc7c74cc50f16931305bb526dba6",
    "9d494f0c0eaa05417f3a3e88487d878d1731da36",
    "1e72d98c69bef3526cf0eb617de69e0b6d2fc13c",
    "caf7298e49f646a40023af999f62d61846fde5e2"
  ],
  "changeHistoryShort": {
    "8370a0ae1681f2836fa0c1c63e334a3fdafafd7b": "Ybodychange",
    "410dd3faa55660b60e1292e2816b135cb476751e": "Ybodychange",
    "c7fcec24b845fc7c74cc50f16931305bb526dba6": "Ybodychange",
    "9d494f0c0eaa05417f3a3e88487d878d1731da36": "Ybodychange",
    "1e72d98c69bef3526cf0eb617de69e0b6d2fc13c": "Ybodychange",
    "caf7298e49f646a40023af999f62d61846fde5e2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8370a0ae1681f2836fa0c1c63e334a3fdafafd7b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14203. Refactor OIV Delimited output entry building mechanism. Contributed by Adam Antal.\n\nSigned-off-by: Wei-Chiu Chuang \u003cweichiu@apache.org\u003e\n",
      "commitDate": "15/06/19 6:47 AM",
      "commitName": "8370a0ae1681f2836fa0c1c63e334a3fdafafd7b",
      "commitAuthor": "Adam Antal",
      "commitDateOld": "03/12/18 10:34 AM",
      "commitNameOld": "fb10803dfa67394650072bdea327296f8ad2a744",
      "commitAuthorOld": "Adam Antal",
      "daysBetweenCommits": 193.8,
      "commitsBetweenForRepo": 1332,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,11 @@\n   public String getEntry(String parent, INode inode) {\n-    StringBuffer buffer \u003d new StringBuffer();\n+    OutputEntryBuilder entryBuilder \u003d\n+        new OutputEntryBuilder(this, inode);\n+\n     String inodeName \u003d inode.getName().toStringUtf8();\n     Path path \u003d new Path(parent.isEmpty() ? \"/\" : parent,\n       inodeName.isEmpty() ? \"/\" : inodeName);\n-    append(buffer, path.toString());\n-    PermissionStatus p \u003d null;\n-    boolean isDir \u003d false;\n-    boolean hasAcl \u003d false;\n+    entryBuilder.setPath(path);\n \n-    switch (inode.getType()) {\n-    case FILE:\n-      INodeFile file \u003d inode.getFile();\n-      p \u003d getPermission(file.getPermission());\n-      hasAcl \u003d file.hasAcl() \u0026\u0026 file.getAcl().getEntriesCount() \u003e 0;\n-      append(buffer, file.getReplication());\n-      append(buffer, formatDate(file.getModificationTime()));\n-      append(buffer, formatDate(file.getAccessTime()));\n-      append(buffer, file.getPreferredBlockSize());\n-      append(buffer, file.getBlocksCount());\n-      append(buffer, FSImageLoader.getFileSize(file));\n-      append(buffer, 0);  // NS_QUOTA\n-      append(buffer, 0);  // DS_QUOTA\n-      break;\n-    case DIRECTORY:\n-      INodeDirectory dir \u003d inode.getDirectory();\n-      p \u003d getPermission(dir.getPermission());\n-      hasAcl \u003d dir.hasAcl() \u0026\u0026 dir.getAcl().getEntriesCount() \u003e 0;\n-      append(buffer, 0);  // Replication\n-      append(buffer, formatDate(dir.getModificationTime()));\n-      append(buffer, formatDate(0));  // Access time.\n-      append(buffer, 0);  // Block size.\n-      append(buffer, 0);  // Num blocks.\n-      append(buffer, 0);  // Num bytes.\n-      append(buffer, dir.getNsQuota());\n-      append(buffer, dir.getDsQuota());\n-      isDir \u003d true;\n-      break;\n-    case SYMLINK:\n-      INodeSymlink s \u003d inode.getSymlink();\n-      p \u003d getPermission(s.getPermission());\n-      append(buffer, 0);  // Replication\n-      append(buffer, formatDate(s.getModificationTime()));\n-      append(buffer, formatDate(s.getAccessTime()));\n-      append(buffer, 0);  // Block size.\n-      append(buffer, 0);  // Num blocks.\n-      append(buffer, 0);  // Num bytes.\n-      append(buffer, 0);  // NS_QUOTA\n-      append(buffer, 0);  // DS_QUOTA\n-      break;\n-    default:\n-      break;\n-    }\n-    assert p !\u003d null;\n-    String dirString \u003d isDir ? \"d\" : \"-\";\n-    String aclString \u003d hasAcl ? \"+\" : \"\";\n-    append(buffer, dirString + p.getPermission().toString() + aclString);\n-    append(buffer, p.getUserName());\n-    append(buffer, p.getGroupName());\n-    return buffer.substring(1);\n+    return entryBuilder.build();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String getEntry(String parent, INode inode) {\n    OutputEntryBuilder entryBuilder \u003d\n        new OutputEntryBuilder(this, inode);\n\n    String inodeName \u003d inode.getName().toStringUtf8();\n    Path path \u003d new Path(parent.isEmpty() ? \"/\" : parent,\n      inodeName.isEmpty() ? \"/\" : inodeName);\n    entryBuilder.setPath(path);\n\n    return entryBuilder.build();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/PBImageDelimitedTextWriter.java",
      "extendedDetails": {}
    },
    "410dd3faa55660b60e1292e2816b135cb476751e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13744. OIV tool should better handle control characters present in file or directory names. Contributed by Zsolt Venczel.\n",
      "commitDate": "07/09/18 11:39 AM",
      "commitName": "410dd3faa55660b60e1292e2816b135cb476751e",
      "commitAuthor": "Sean Mackrory",
      "commitDateOld": "11/02/16 8:33 PM",
      "commitNameOld": "c7fcec24b845fc7c74cc50f16931305bb526dba6",
      "commitAuthorOld": "Lei Xu",
      "daysBetweenCommits": 938.59,
      "commitsBetweenForRepo": 6973,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,61 @@\n   public String getEntry(String parent, INode inode) {\n     StringBuffer buffer \u003d new StringBuffer();\n     String inodeName \u003d inode.getName().toStringUtf8();\n     Path path \u003d new Path(parent.isEmpty() ? \"/\" : parent,\n       inodeName.isEmpty() ? \"/\" : inodeName);\n-    buffer.append(path.toString());\n+    append(buffer, path.toString());\n     PermissionStatus p \u003d null;\n     boolean isDir \u003d false;\n     boolean hasAcl \u003d false;\n \n     switch (inode.getType()) {\n     case FILE:\n       INodeFile file \u003d inode.getFile();\n       p \u003d getPermission(file.getPermission());\n       hasAcl \u003d file.hasAcl() \u0026\u0026 file.getAcl().getEntriesCount() \u003e 0;\n       append(buffer, file.getReplication());\n       append(buffer, formatDate(file.getModificationTime()));\n       append(buffer, formatDate(file.getAccessTime()));\n       append(buffer, file.getPreferredBlockSize());\n       append(buffer, file.getBlocksCount());\n       append(buffer, FSImageLoader.getFileSize(file));\n       append(buffer, 0);  // NS_QUOTA\n       append(buffer, 0);  // DS_QUOTA\n       break;\n     case DIRECTORY:\n       INodeDirectory dir \u003d inode.getDirectory();\n       p \u003d getPermission(dir.getPermission());\n       hasAcl \u003d dir.hasAcl() \u0026\u0026 dir.getAcl().getEntriesCount() \u003e 0;\n       append(buffer, 0);  // Replication\n       append(buffer, formatDate(dir.getModificationTime()));\n       append(buffer, formatDate(0));  // Access time.\n       append(buffer, 0);  // Block size.\n       append(buffer, 0);  // Num blocks.\n       append(buffer, 0);  // Num bytes.\n       append(buffer, dir.getNsQuota());\n       append(buffer, dir.getDsQuota());\n       isDir \u003d true;\n       break;\n     case SYMLINK:\n       INodeSymlink s \u003d inode.getSymlink();\n       p \u003d getPermission(s.getPermission());\n       append(buffer, 0);  // Replication\n       append(buffer, formatDate(s.getModificationTime()));\n       append(buffer, formatDate(s.getAccessTime()));\n       append(buffer, 0);  // Block size.\n       append(buffer, 0);  // Num blocks.\n       append(buffer, 0);  // Num bytes.\n       append(buffer, 0);  // NS_QUOTA\n       append(buffer, 0);  // DS_QUOTA\n       break;\n     default:\n       break;\n     }\n     assert p !\u003d null;\n     String dirString \u003d isDir ? \"d\" : \"-\";\n     String aclString \u003d hasAcl ? \"+\" : \"\";\n     append(buffer, dirString + p.getPermission().toString() + aclString);\n     append(buffer, p.getUserName());\n     append(buffer, p.getGroupName());\n-    return buffer.toString();\n+    return buffer.substring(1);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String getEntry(String parent, INode inode) {\n    StringBuffer buffer \u003d new StringBuffer();\n    String inodeName \u003d inode.getName().toStringUtf8();\n    Path path \u003d new Path(parent.isEmpty() ? \"/\" : parent,\n      inodeName.isEmpty() ? \"/\" : inodeName);\n    append(buffer, path.toString());\n    PermissionStatus p \u003d null;\n    boolean isDir \u003d false;\n    boolean hasAcl \u003d false;\n\n    switch (inode.getType()) {\n    case FILE:\n      INodeFile file \u003d inode.getFile();\n      p \u003d getPermission(file.getPermission());\n      hasAcl \u003d file.hasAcl() \u0026\u0026 file.getAcl().getEntriesCount() \u003e 0;\n      append(buffer, file.getReplication());\n      append(buffer, formatDate(file.getModificationTime()));\n      append(buffer, formatDate(file.getAccessTime()));\n      append(buffer, file.getPreferredBlockSize());\n      append(buffer, file.getBlocksCount());\n      append(buffer, FSImageLoader.getFileSize(file));\n      append(buffer, 0);  // NS_QUOTA\n      append(buffer, 0);  // DS_QUOTA\n      break;\n    case DIRECTORY:\n      INodeDirectory dir \u003d inode.getDirectory();\n      p \u003d getPermission(dir.getPermission());\n      hasAcl \u003d dir.hasAcl() \u0026\u0026 dir.getAcl().getEntriesCount() \u003e 0;\n      append(buffer, 0);  // Replication\n      append(buffer, formatDate(dir.getModificationTime()));\n      append(buffer, formatDate(0));  // Access time.\n      append(buffer, 0);  // Block size.\n      append(buffer, 0);  // Num blocks.\n      append(buffer, 0);  // Num bytes.\n      append(buffer, dir.getNsQuota());\n      append(buffer, dir.getDsQuota());\n      isDir \u003d true;\n      break;\n    case SYMLINK:\n      INodeSymlink s \u003d inode.getSymlink();\n      p \u003d getPermission(s.getPermission());\n      append(buffer, 0);  // Replication\n      append(buffer, formatDate(s.getModificationTime()));\n      append(buffer, formatDate(s.getAccessTime()));\n      append(buffer, 0);  // Block size.\n      append(buffer, 0);  // Num blocks.\n      append(buffer, 0);  // Num bytes.\n      append(buffer, 0);  // NS_QUOTA\n      append(buffer, 0);  // DS_QUOTA\n      break;\n    default:\n      break;\n    }\n    assert p !\u003d null;\n    String dirString \u003d isDir ? \"d\" : \"-\";\n    String aclString \u003d hasAcl ? \"+\" : \"\";\n    append(buffer, dirString + p.getPermission().toString() + aclString);\n    append(buffer, p.getUserName());\n    append(buffer, p.getGroupName());\n    return buffer.substring(1);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/PBImageDelimitedTextWriter.java",
      "extendedDetails": {}
    },
    "c7fcec24b845fc7c74cc50f16931305bb526dba6": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9795. OIV Delimited should show which files are ACL-enabled (lei)\n",
      "commitDate": "11/02/16 8:33 PM",
      "commitName": "c7fcec24b845fc7c74cc50f16931305bb526dba6",
      "commitAuthor": "Lei Xu",
      "commitDateOld": "02/02/16 10:42 AM",
      "commitNameOld": "9d494f0c0eaa05417f3a3e88487d878d1731da36",
      "commitAuthorOld": "Lei Xu",
      "daysBetweenCommits": 9.41,
      "commitsBetweenForRepo": 76,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,61 @@\n   public String getEntry(String parent, INode inode) {\n     StringBuffer buffer \u003d new StringBuffer();\n     String inodeName \u003d inode.getName().toStringUtf8();\n     Path path \u003d new Path(parent.isEmpty() ? \"/\" : parent,\n       inodeName.isEmpty() ? \"/\" : inodeName);\n     buffer.append(path.toString());\n     PermissionStatus p \u003d null;\n     boolean isDir \u003d false;\n+    boolean hasAcl \u003d false;\n \n     switch (inode.getType()) {\n     case FILE:\n       INodeFile file \u003d inode.getFile();\n       p \u003d getPermission(file.getPermission());\n+      hasAcl \u003d file.hasAcl() \u0026\u0026 file.getAcl().getEntriesCount() \u003e 0;\n       append(buffer, file.getReplication());\n       append(buffer, formatDate(file.getModificationTime()));\n       append(buffer, formatDate(file.getAccessTime()));\n       append(buffer, file.getPreferredBlockSize());\n       append(buffer, file.getBlocksCount());\n       append(buffer, FSImageLoader.getFileSize(file));\n       append(buffer, 0);  // NS_QUOTA\n       append(buffer, 0);  // DS_QUOTA\n       break;\n     case DIRECTORY:\n       INodeDirectory dir \u003d inode.getDirectory();\n       p \u003d getPermission(dir.getPermission());\n+      hasAcl \u003d dir.hasAcl() \u0026\u0026 dir.getAcl().getEntriesCount() \u003e 0;\n       append(buffer, 0);  // Replication\n       append(buffer, formatDate(dir.getModificationTime()));\n       append(buffer, formatDate(0));  // Access time.\n       append(buffer, 0);  // Block size.\n       append(buffer, 0);  // Num blocks.\n       append(buffer, 0);  // Num bytes.\n       append(buffer, dir.getNsQuota());\n       append(buffer, dir.getDsQuota());\n       isDir \u003d true;\n       break;\n     case SYMLINK:\n       INodeSymlink s \u003d inode.getSymlink();\n       p \u003d getPermission(s.getPermission());\n       append(buffer, 0);  // Replication\n       append(buffer, formatDate(s.getModificationTime()));\n       append(buffer, formatDate(s.getAccessTime()));\n       append(buffer, 0);  // Block size.\n       append(buffer, 0);  // Num blocks.\n       append(buffer, 0);  // Num bytes.\n       append(buffer, 0);  // NS_QUOTA\n       append(buffer, 0);  // DS_QUOTA\n       break;\n     default:\n       break;\n     }\n     assert p !\u003d null;\n     String dirString \u003d isDir ? \"d\" : \"-\";\n-    append(buffer, dirString + p.getPermission().toString());\n+    String aclString \u003d hasAcl ? \"+\" : \"\";\n+    append(buffer, dirString + p.getPermission().toString() + aclString);\n     append(buffer, p.getUserName());\n     append(buffer, p.getGroupName());\n     return buffer.toString();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String getEntry(String parent, INode inode) {\n    StringBuffer buffer \u003d new StringBuffer();\n    String inodeName \u003d inode.getName().toStringUtf8();\n    Path path \u003d new Path(parent.isEmpty() ? \"/\" : parent,\n      inodeName.isEmpty() ? \"/\" : inodeName);\n    buffer.append(path.toString());\n    PermissionStatus p \u003d null;\n    boolean isDir \u003d false;\n    boolean hasAcl \u003d false;\n\n    switch (inode.getType()) {\n    case FILE:\n      INodeFile file \u003d inode.getFile();\n      p \u003d getPermission(file.getPermission());\n      hasAcl \u003d file.hasAcl() \u0026\u0026 file.getAcl().getEntriesCount() \u003e 0;\n      append(buffer, file.getReplication());\n      append(buffer, formatDate(file.getModificationTime()));\n      append(buffer, formatDate(file.getAccessTime()));\n      append(buffer, file.getPreferredBlockSize());\n      append(buffer, file.getBlocksCount());\n      append(buffer, FSImageLoader.getFileSize(file));\n      append(buffer, 0);  // NS_QUOTA\n      append(buffer, 0);  // DS_QUOTA\n      break;\n    case DIRECTORY:\n      INodeDirectory dir \u003d inode.getDirectory();\n      p \u003d getPermission(dir.getPermission());\n      hasAcl \u003d dir.hasAcl() \u0026\u0026 dir.getAcl().getEntriesCount() \u003e 0;\n      append(buffer, 0);  // Replication\n      append(buffer, formatDate(dir.getModificationTime()));\n      append(buffer, formatDate(0));  // Access time.\n      append(buffer, 0);  // Block size.\n      append(buffer, 0);  // Num blocks.\n      append(buffer, 0);  // Num bytes.\n      append(buffer, dir.getNsQuota());\n      append(buffer, dir.getDsQuota());\n      isDir \u003d true;\n      break;\n    case SYMLINK:\n      INodeSymlink s \u003d inode.getSymlink();\n      p \u003d getPermission(s.getPermission());\n      append(buffer, 0);  // Replication\n      append(buffer, formatDate(s.getModificationTime()));\n      append(buffer, formatDate(s.getAccessTime()));\n      append(buffer, 0);  // Block size.\n      append(buffer, 0);  // Num blocks.\n      append(buffer, 0);  // Num bytes.\n      append(buffer, 0);  // NS_QUOTA\n      append(buffer, 0);  // DS_QUOTA\n      break;\n    default:\n      break;\n    }\n    assert p !\u003d null;\n    String dirString \u003d isDir ? \"d\" : \"-\";\n    String aclString \u003d hasAcl ? \"+\" : \"\";\n    append(buffer, dirString + p.getPermission().toString() + aclString);\n    append(buffer, p.getUserName());\n    append(buffer, p.getGroupName());\n    return buffer.toString();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/PBImageDelimitedTextWriter.java",
      "extendedDetails": {}
    },
    "9d494f0c0eaa05417f3a3e88487d878d1731da36": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9721. Allow Delimited PB OIV tool to run upon fsimage that contains INodeReference. (Xiao Chen via lei)\n",
      "commitDate": "02/02/16 10:42 AM",
      "commitName": "9d494f0c0eaa05417f3a3e88487d878d1731da36",
      "commitAuthor": "Lei Xu",
      "commitDateOld": "07/04/15 2:23 PM",
      "commitNameOld": "1e72d98c69bef3526cf0eb617de69e0b6d2fc13c",
      "commitAuthorOld": "cnauroth",
      "daysBetweenCommits": 300.89,
      "commitsBetweenForRepo": 2355,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,57 @@\n   public String getEntry(String parent, INode inode) {\n     StringBuffer buffer \u003d new StringBuffer();\n     String inodeName \u003d inode.getName().toStringUtf8();\n     Path path \u003d new Path(parent.isEmpty() ? \"/\" : parent,\n       inodeName.isEmpty() ? \"/\" : inodeName);\n     buffer.append(path.toString());\n     PermissionStatus p \u003d null;\n+    boolean isDir \u003d false;\n \n     switch (inode.getType()) {\n     case FILE:\n       INodeFile file \u003d inode.getFile();\n       p \u003d getPermission(file.getPermission());\n       append(buffer, file.getReplication());\n       append(buffer, formatDate(file.getModificationTime()));\n       append(buffer, formatDate(file.getAccessTime()));\n       append(buffer, file.getPreferredBlockSize());\n       append(buffer, file.getBlocksCount());\n       append(buffer, FSImageLoader.getFileSize(file));\n       append(buffer, 0);  // NS_QUOTA\n       append(buffer, 0);  // DS_QUOTA\n       break;\n     case DIRECTORY:\n       INodeDirectory dir \u003d inode.getDirectory();\n       p \u003d getPermission(dir.getPermission());\n       append(buffer, 0);  // Replication\n       append(buffer, formatDate(dir.getModificationTime()));\n       append(buffer, formatDate(0));  // Access time.\n       append(buffer, 0);  // Block size.\n       append(buffer, 0);  // Num blocks.\n       append(buffer, 0);  // Num bytes.\n       append(buffer, dir.getNsQuota());\n       append(buffer, dir.getDsQuota());\n+      isDir \u003d true;\n       break;\n     case SYMLINK:\n       INodeSymlink s \u003d inode.getSymlink();\n       p \u003d getPermission(s.getPermission());\n       append(buffer, 0);  // Replication\n       append(buffer, formatDate(s.getModificationTime()));\n       append(buffer, formatDate(s.getAccessTime()));\n       append(buffer, 0);  // Block size.\n       append(buffer, 0);  // Num blocks.\n       append(buffer, 0);  // Num bytes.\n       append(buffer, 0);  // NS_QUOTA\n       append(buffer, 0);  // DS_QUOTA\n       break;\n     default:\n       break;\n     }\n     assert p !\u003d null;\n-    append(buffer, p.getPermission().toString());\n+    String dirString \u003d isDir ? \"d\" : \"-\";\n+    append(buffer, dirString + p.getPermission().toString());\n     append(buffer, p.getUserName());\n     append(buffer, p.getGroupName());\n     return buffer.toString();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String getEntry(String parent, INode inode) {\n    StringBuffer buffer \u003d new StringBuffer();\n    String inodeName \u003d inode.getName().toStringUtf8();\n    Path path \u003d new Path(parent.isEmpty() ? \"/\" : parent,\n      inodeName.isEmpty() ? \"/\" : inodeName);\n    buffer.append(path.toString());\n    PermissionStatus p \u003d null;\n    boolean isDir \u003d false;\n\n    switch (inode.getType()) {\n    case FILE:\n      INodeFile file \u003d inode.getFile();\n      p \u003d getPermission(file.getPermission());\n      append(buffer, file.getReplication());\n      append(buffer, formatDate(file.getModificationTime()));\n      append(buffer, formatDate(file.getAccessTime()));\n      append(buffer, file.getPreferredBlockSize());\n      append(buffer, file.getBlocksCount());\n      append(buffer, FSImageLoader.getFileSize(file));\n      append(buffer, 0);  // NS_QUOTA\n      append(buffer, 0);  // DS_QUOTA\n      break;\n    case DIRECTORY:\n      INodeDirectory dir \u003d inode.getDirectory();\n      p \u003d getPermission(dir.getPermission());\n      append(buffer, 0);  // Replication\n      append(buffer, formatDate(dir.getModificationTime()));\n      append(buffer, formatDate(0));  // Access time.\n      append(buffer, 0);  // Block size.\n      append(buffer, 0);  // Num blocks.\n      append(buffer, 0);  // Num bytes.\n      append(buffer, dir.getNsQuota());\n      append(buffer, dir.getDsQuota());\n      isDir \u003d true;\n      break;\n    case SYMLINK:\n      INodeSymlink s \u003d inode.getSymlink();\n      p \u003d getPermission(s.getPermission());\n      append(buffer, 0);  // Replication\n      append(buffer, formatDate(s.getModificationTime()));\n      append(buffer, formatDate(s.getAccessTime()));\n      append(buffer, 0);  // Block size.\n      append(buffer, 0);  // Num blocks.\n      append(buffer, 0);  // Num bytes.\n      append(buffer, 0);  // NS_QUOTA\n      append(buffer, 0);  // DS_QUOTA\n      break;\n    default:\n      break;\n    }\n    assert p !\u003d null;\n    String dirString \u003d isDir ? \"d\" : \"-\";\n    append(buffer, dirString + p.getPermission().toString());\n    append(buffer, p.getUserName());\n    append(buffer, p.getGroupName());\n    return buffer.toString();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/PBImageDelimitedTextWriter.java",
      "extendedDetails": {}
    },
    "1e72d98c69bef3526cf0eb617de69e0b6d2fc13c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8038. PBImageDelimitedTextWriter#getEntry output HDFS path in platform-specific format. Contributed by Xiaoyu Yao.\n",
      "commitDate": "07/04/15 2:23 PM",
      "commitName": "1e72d98c69bef3526cf0eb617de69e0b6d2fc13c",
      "commitAuthor": "cnauroth",
      "commitDateOld": "28/01/15 12:36 PM",
      "commitNameOld": "caf7298e49f646a40023af999f62d61846fde5e2",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 69.03,
      "commitsBetweenForRepo": 645,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,54 @@\n   public String getEntry(String parent, INode inode) {\n     StringBuffer buffer \u003d new StringBuffer();\n-    String path \u003d new File(parent, inode.getName().toStringUtf8()).toString();\n-    buffer.append(path);\n+    String inodeName \u003d inode.getName().toStringUtf8();\n+    Path path \u003d new Path(parent.isEmpty() ? \"/\" : parent,\n+      inodeName.isEmpty() ? \"/\" : inodeName);\n+    buffer.append(path.toString());\n     PermissionStatus p \u003d null;\n \n     switch (inode.getType()) {\n     case FILE:\n       INodeFile file \u003d inode.getFile();\n       p \u003d getPermission(file.getPermission());\n       append(buffer, file.getReplication());\n       append(buffer, formatDate(file.getModificationTime()));\n       append(buffer, formatDate(file.getAccessTime()));\n       append(buffer, file.getPreferredBlockSize());\n       append(buffer, file.getBlocksCount());\n       append(buffer, FSImageLoader.getFileSize(file));\n       append(buffer, 0);  // NS_QUOTA\n       append(buffer, 0);  // DS_QUOTA\n       break;\n     case DIRECTORY:\n       INodeDirectory dir \u003d inode.getDirectory();\n       p \u003d getPermission(dir.getPermission());\n       append(buffer, 0);  // Replication\n       append(buffer, formatDate(dir.getModificationTime()));\n       append(buffer, formatDate(0));  // Access time.\n       append(buffer, 0);  // Block size.\n       append(buffer, 0);  // Num blocks.\n       append(buffer, 0);  // Num bytes.\n       append(buffer, dir.getNsQuota());\n       append(buffer, dir.getDsQuota());\n       break;\n     case SYMLINK:\n       INodeSymlink s \u003d inode.getSymlink();\n       p \u003d getPermission(s.getPermission());\n       append(buffer, 0);  // Replication\n       append(buffer, formatDate(s.getModificationTime()));\n       append(buffer, formatDate(s.getAccessTime()));\n       append(buffer, 0);  // Block size.\n       append(buffer, 0);  // Num blocks.\n       append(buffer, 0);  // Num bytes.\n       append(buffer, 0);  // NS_QUOTA\n       append(buffer, 0);  // DS_QUOTA\n       break;\n     default:\n       break;\n     }\n     assert p !\u003d null;\n     append(buffer, p.getPermission().toString());\n     append(buffer, p.getUserName());\n     append(buffer, p.getGroupName());\n     return buffer.toString();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String getEntry(String parent, INode inode) {\n    StringBuffer buffer \u003d new StringBuffer();\n    String inodeName \u003d inode.getName().toStringUtf8();\n    Path path \u003d new Path(parent.isEmpty() ? \"/\" : parent,\n      inodeName.isEmpty() ? \"/\" : inodeName);\n    buffer.append(path.toString());\n    PermissionStatus p \u003d null;\n\n    switch (inode.getType()) {\n    case FILE:\n      INodeFile file \u003d inode.getFile();\n      p \u003d getPermission(file.getPermission());\n      append(buffer, file.getReplication());\n      append(buffer, formatDate(file.getModificationTime()));\n      append(buffer, formatDate(file.getAccessTime()));\n      append(buffer, file.getPreferredBlockSize());\n      append(buffer, file.getBlocksCount());\n      append(buffer, FSImageLoader.getFileSize(file));\n      append(buffer, 0);  // NS_QUOTA\n      append(buffer, 0);  // DS_QUOTA\n      break;\n    case DIRECTORY:\n      INodeDirectory dir \u003d inode.getDirectory();\n      p \u003d getPermission(dir.getPermission());\n      append(buffer, 0);  // Replication\n      append(buffer, formatDate(dir.getModificationTime()));\n      append(buffer, formatDate(0));  // Access time.\n      append(buffer, 0);  // Block size.\n      append(buffer, 0);  // Num blocks.\n      append(buffer, 0);  // Num bytes.\n      append(buffer, dir.getNsQuota());\n      append(buffer, dir.getDsQuota());\n      break;\n    case SYMLINK:\n      INodeSymlink s \u003d inode.getSymlink();\n      p \u003d getPermission(s.getPermission());\n      append(buffer, 0);  // Replication\n      append(buffer, formatDate(s.getModificationTime()));\n      append(buffer, formatDate(s.getAccessTime()));\n      append(buffer, 0);  // Block size.\n      append(buffer, 0);  // Num blocks.\n      append(buffer, 0);  // Num bytes.\n      append(buffer, 0);  // NS_QUOTA\n      append(buffer, 0);  // DS_QUOTA\n      break;\n    default:\n      break;\n    }\n    assert p !\u003d null;\n    append(buffer, p.getPermission().toString());\n    append(buffer, p.getUserName());\n    append(buffer, p.getGroupName());\n    return buffer.toString();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/PBImageDelimitedTextWriter.java",
      "extendedDetails": {}
    },
    "caf7298e49f646a40023af999f62d61846fde5e2": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-6673. Add delimited format support to PB OIV tool. Contributed by Eddy Xu.\n",
      "commitDate": "28/01/15 12:36 PM",
      "commitName": "caf7298e49f646a40023af999f62d61846fde5e2",
      "commitAuthor": "Andrew Wang",
      "diff": "@@ -0,0 +1,52 @@\n+  public String getEntry(String parent, INode inode) {\n+    StringBuffer buffer \u003d new StringBuffer();\n+    String path \u003d new File(parent, inode.getName().toStringUtf8()).toString();\n+    buffer.append(path);\n+    PermissionStatus p \u003d null;\n+\n+    switch (inode.getType()) {\n+    case FILE:\n+      INodeFile file \u003d inode.getFile();\n+      p \u003d getPermission(file.getPermission());\n+      append(buffer, file.getReplication());\n+      append(buffer, formatDate(file.getModificationTime()));\n+      append(buffer, formatDate(file.getAccessTime()));\n+      append(buffer, file.getPreferredBlockSize());\n+      append(buffer, file.getBlocksCount());\n+      append(buffer, FSImageLoader.getFileSize(file));\n+      append(buffer, 0);  // NS_QUOTA\n+      append(buffer, 0);  // DS_QUOTA\n+      break;\n+    case DIRECTORY:\n+      INodeDirectory dir \u003d inode.getDirectory();\n+      p \u003d getPermission(dir.getPermission());\n+      append(buffer, 0);  // Replication\n+      append(buffer, formatDate(dir.getModificationTime()));\n+      append(buffer, formatDate(0));  // Access time.\n+      append(buffer, 0);  // Block size.\n+      append(buffer, 0);  // Num blocks.\n+      append(buffer, 0);  // Num bytes.\n+      append(buffer, dir.getNsQuota());\n+      append(buffer, dir.getDsQuota());\n+      break;\n+    case SYMLINK:\n+      INodeSymlink s \u003d inode.getSymlink();\n+      p \u003d getPermission(s.getPermission());\n+      append(buffer, 0);  // Replication\n+      append(buffer, formatDate(s.getModificationTime()));\n+      append(buffer, formatDate(s.getAccessTime()));\n+      append(buffer, 0);  // Block size.\n+      append(buffer, 0);  // Num blocks.\n+      append(buffer, 0);  // Num bytes.\n+      append(buffer, 0);  // NS_QUOTA\n+      append(buffer, 0);  // DS_QUOTA\n+      break;\n+    default:\n+      break;\n+    }\n+    assert p !\u003d null;\n+    append(buffer, p.getPermission().toString());\n+    append(buffer, p.getUserName());\n+    append(buffer, p.getGroupName());\n+    return buffer.toString();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public String getEntry(String parent, INode inode) {\n    StringBuffer buffer \u003d new StringBuffer();\n    String path \u003d new File(parent, inode.getName().toStringUtf8()).toString();\n    buffer.append(path);\n    PermissionStatus p \u003d null;\n\n    switch (inode.getType()) {\n    case FILE:\n      INodeFile file \u003d inode.getFile();\n      p \u003d getPermission(file.getPermission());\n      append(buffer, file.getReplication());\n      append(buffer, formatDate(file.getModificationTime()));\n      append(buffer, formatDate(file.getAccessTime()));\n      append(buffer, file.getPreferredBlockSize());\n      append(buffer, file.getBlocksCount());\n      append(buffer, FSImageLoader.getFileSize(file));\n      append(buffer, 0);  // NS_QUOTA\n      append(buffer, 0);  // DS_QUOTA\n      break;\n    case DIRECTORY:\n      INodeDirectory dir \u003d inode.getDirectory();\n      p \u003d getPermission(dir.getPermission());\n      append(buffer, 0);  // Replication\n      append(buffer, formatDate(dir.getModificationTime()));\n      append(buffer, formatDate(0));  // Access time.\n      append(buffer, 0);  // Block size.\n      append(buffer, 0);  // Num blocks.\n      append(buffer, 0);  // Num bytes.\n      append(buffer, dir.getNsQuota());\n      append(buffer, dir.getDsQuota());\n      break;\n    case SYMLINK:\n      INodeSymlink s \u003d inode.getSymlink();\n      p \u003d getPermission(s.getPermission());\n      append(buffer, 0);  // Replication\n      append(buffer, formatDate(s.getModificationTime()));\n      append(buffer, formatDate(s.getAccessTime()));\n      append(buffer, 0);  // Block size.\n      append(buffer, 0);  // Num blocks.\n      append(buffer, 0);  // Num bytes.\n      append(buffer, 0);  // NS_QUOTA\n      append(buffer, 0);  // DS_QUOTA\n      break;\n    default:\n      break;\n    }\n    assert p !\u003d null;\n    append(buffer, p.getPermission().toString());\n    append(buffer, p.getUserName());\n    append(buffer, p.getGroupName());\n    return buffer.toString();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/PBImageDelimitedTextWriter.java"
    }
  }
}