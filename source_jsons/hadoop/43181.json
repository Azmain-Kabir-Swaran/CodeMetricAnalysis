{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ServiceClient.java",
  "functionName": "flexComponents",
  "functionId": "flexComponents___serviceName-String__componentCounts-Map__String,Long____persistedService-Service",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
  "functionStartLine": 638,
  "functionEndLine": 706,
  "numCommitsSeen": 56,
  "timeTaken": 4918,
  "changeHistory": [
    "4c465f5535054dad2ef0b18128fb115129f6939e",
    "4a7369b09547a78f532af66c763c6994a38b5d68",
    "d553799030a5a64df328319aceb35734d0b2de20",
    "d30d57828fddaa8667de49af879cde999907c7f6",
    "40ab068eabe50875449d601471619a4e82fff86d",
    "2191f5b533c6b4763f5d443d21127f1f8552ce64",
    "1888318c89776f0bf354c1b13e3ee169e14ff638"
  ],
  "changeHistoryShort": {
    "4c465f5535054dad2ef0b18128fb115129f6939e": "Ybodychange",
    "4a7369b09547a78f532af66c763c6994a38b5d68": "Ybodychange",
    "d553799030a5a64df328319aceb35734d0b2de20": "Ybodychange",
    "d30d57828fddaa8667de49af879cde999907c7f6": "Ybodychange",
    "40ab068eabe50875449d601471619a4e82fff86d": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
    "2191f5b533c6b4763f5d443d21127f1f8552ce64": "Ybodychange",
    "1888318c89776f0bf354c1b13e3ee169e14ff638": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4c465f5535054dad2ef0b18128fb115129f6939e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8761. Service AM support for decommissioning component instances.\n           Contributed by Billie Rinaldi\n",
      "commitDate": "12/11/18 4:53 PM",
      "commitName": "4c465f5535054dad2ef0b18128fb115129f6939e",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "09/11/18 10:52 PM",
      "commitNameOld": "2664248797365761089a86d5bd59aa9ac3ebcc28",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 2.75,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,71 +1,69 @@\n   private Map\u003cString, Long\u003e flexComponents(String serviceName,\n       Map\u003cString, Long\u003e componentCounts, Service persistedService)\n       throws YarnException, IOException {\n     ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n \n     Map\u003cString, Long\u003e original \u003d new HashMap\u003c\u003e(componentCounts.size());\n \n     ComponentCountProto.Builder countBuilder \u003d ComponentCountProto.newBuilder();\n     FlexComponentsRequestProto.Builder requestBuilder \u003d\n         FlexComponentsRequestProto.newBuilder();\n \n     for (Component persistedComp : persistedService.getComponents()) {\n       String name \u003d persistedComp.getName();\n       if (componentCounts.containsKey(persistedComp.getName())) {\n         original.put(name, persistedComp.getNumberOfContainers());\n         persistedComp.setNumberOfContainers(componentCounts.get(name));\n \n         // build the request\n         countBuilder.setName(persistedComp.getName())\n             .setNumberOfContainers(persistedComp.getNumberOfContainers());\n         requestBuilder.addComponents(countBuilder.build());\n       }\n     }\n     if (original.size() \u003c componentCounts.size()) {\n       componentCounts.keySet().removeAll(original.keySet());\n       throw new YarnException(\"Components \" + componentCounts.keySet()\n           + \" do not exist in app definition.\");\n     }\n-    jsonSerDeser\n-        .save(fs.getFileSystem(), ServiceApiUtil.getServiceJsonPath(fs, serviceName),\n-            persistedService, true);\n+    ServiceApiUtil.writeAppDefinition(fs, persistedService);\n \n     ApplicationId appId \u003d getAppId(serviceName);\n     if (appId \u003d\u003d null) {\n       String message \u003d \"Application ID doesn\u0027t exist for \" + serviceName;\n       LOG.error(message);\n       throw new YarnException(message);\n     }\n     ApplicationReport appReport \u003d\n         yarnClient.getApplicationReport(appId);\n     if (appReport.getYarnApplicationState() !\u003d RUNNING) {\n       String message \u003d\n           serviceName + \" is at \" + appReport.getYarnApplicationState()\n               + \" state, flex can only be invoked when service is running\";\n       LOG.error(message);\n       throw new YarnException(message);\n     }\n \n     Service liveService \u003d getStatus(serviceName);\n     if (liveService.getState().equals(ServiceState.UPGRADING) ||\n         liveService.getState().equals(ServiceState.UPGRADING_AUTO_FINALIZE)) {\n       String message \u003d serviceName + \" is at \" +\n           liveService.getState()\n           + \" state, flex can not be invoked when service is upgrading. \";\n       LOG.error(message);\n       throw new YarnException(message);\n     }\n \n     if (StringUtils.isEmpty(appReport.getHost())) {\n       throw new YarnException(serviceName + \" AM hostname is empty\");\n     }\n     ClientAMProtocol proxy \u003d\n         createAMProxy(serviceName, appReport);\n     proxy.flexComponents(requestBuilder.build());\n     for (Map.Entry\u003cString, Long\u003e entry : original.entrySet()) {\n       LOG.info(\"[COMPONENT {}]: number of containers changed from {} to {}\",\n           entry.getKey(), entry.getValue(),\n           componentCounts.get(entry.getKey()));\n     }\n     return original;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Map\u003cString, Long\u003e flexComponents(String serviceName,\n      Map\u003cString, Long\u003e componentCounts, Service persistedService)\n      throws YarnException, IOException {\n    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n\n    Map\u003cString, Long\u003e original \u003d new HashMap\u003c\u003e(componentCounts.size());\n\n    ComponentCountProto.Builder countBuilder \u003d ComponentCountProto.newBuilder();\n    FlexComponentsRequestProto.Builder requestBuilder \u003d\n        FlexComponentsRequestProto.newBuilder();\n\n    for (Component persistedComp : persistedService.getComponents()) {\n      String name \u003d persistedComp.getName();\n      if (componentCounts.containsKey(persistedComp.getName())) {\n        original.put(name, persistedComp.getNumberOfContainers());\n        persistedComp.setNumberOfContainers(componentCounts.get(name));\n\n        // build the request\n        countBuilder.setName(persistedComp.getName())\n            .setNumberOfContainers(persistedComp.getNumberOfContainers());\n        requestBuilder.addComponents(countBuilder.build());\n      }\n    }\n    if (original.size() \u003c componentCounts.size()) {\n      componentCounts.keySet().removeAll(original.keySet());\n      throw new YarnException(\"Components \" + componentCounts.keySet()\n          + \" do not exist in app definition.\");\n    }\n    ServiceApiUtil.writeAppDefinition(fs, persistedService);\n\n    ApplicationId appId \u003d getAppId(serviceName);\n    if (appId \u003d\u003d null) {\n      String message \u003d \"Application ID doesn\u0027t exist for \" + serviceName;\n      LOG.error(message);\n      throw new YarnException(message);\n    }\n    ApplicationReport appReport \u003d\n        yarnClient.getApplicationReport(appId);\n    if (appReport.getYarnApplicationState() !\u003d RUNNING) {\n      String message \u003d\n          serviceName + \" is at \" + appReport.getYarnApplicationState()\n              + \" state, flex can only be invoked when service is running\";\n      LOG.error(message);\n      throw new YarnException(message);\n    }\n\n    Service liveService \u003d getStatus(serviceName);\n    if (liveService.getState().equals(ServiceState.UPGRADING) ||\n        liveService.getState().equals(ServiceState.UPGRADING_AUTO_FINALIZE)) {\n      String message \u003d serviceName + \" is at \" +\n          liveService.getState()\n          + \" state, flex can not be invoked when service is upgrading. \";\n      LOG.error(message);\n      throw new YarnException(message);\n    }\n\n    if (StringUtils.isEmpty(appReport.getHost())) {\n      throw new YarnException(serviceName + \" AM hostname is empty\");\n    }\n    ClientAMProtocol proxy \u003d\n        createAMProxy(serviceName, appReport);\n    proxy.flexComponents(requestBuilder.build());\n    for (Map.Entry\u003cString, Long\u003e entry : original.entrySet()) {\n      LOG.info(\"[COMPONENT {}]: number of containers changed from {} to {}\",\n          entry.getKey(), entry.getValue(),\n          componentCounts.get(entry.getKey()));\n    }\n    return original;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "4a7369b09547a78f532af66c763c6994a38b5d68": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7939.  Added support to upgrade a component instance.\n            Contributed by Chandni Singh\n",
      "commitDate": "26/04/18 1:54 PM",
      "commitName": "4a7369b09547a78f532af66c763c6994a38b5d68",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "17/04/18 6:57 AM",
      "commitNameOld": "1d6e43da51aaaab522325bdbe4b51e58934e03f1",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 9.29,
      "commitsBetweenForRepo": 568,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,71 @@\n   private Map\u003cString, Long\u003e flexComponents(String serviceName,\n       Map\u003cString, Long\u003e componentCounts, Service persistedService)\n       throws YarnException, IOException {\n     ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n \n     Map\u003cString, Long\u003e original \u003d new HashMap\u003c\u003e(componentCounts.size());\n \n     ComponentCountProto.Builder countBuilder \u003d ComponentCountProto.newBuilder();\n     FlexComponentsRequestProto.Builder requestBuilder \u003d\n         FlexComponentsRequestProto.newBuilder();\n \n     for (Component persistedComp : persistedService.getComponents()) {\n       String name \u003d persistedComp.getName();\n       if (componentCounts.containsKey(persistedComp.getName())) {\n         original.put(name, persistedComp.getNumberOfContainers());\n         persistedComp.setNumberOfContainers(componentCounts.get(name));\n \n         // build the request\n         countBuilder.setName(persistedComp.getName())\n             .setNumberOfContainers(persistedComp.getNumberOfContainers());\n         requestBuilder.addComponents(countBuilder.build());\n       }\n     }\n     if (original.size() \u003c componentCounts.size()) {\n       componentCounts.keySet().removeAll(original.keySet());\n       throw new YarnException(\"Components \" + componentCounts.keySet()\n           + \" do not exist in app definition.\");\n     }\n     jsonSerDeser\n         .save(fs.getFileSystem(), ServiceApiUtil.getServiceJsonPath(fs, serviceName),\n             persistedService, true);\n \n     ApplicationId appId \u003d getAppId(serviceName);\n     if (appId \u003d\u003d null) {\n       String message \u003d \"Application ID doesn\u0027t exist for \" + serviceName;\n       LOG.error(message);\n       throw new YarnException(message);\n     }\n     ApplicationReport appReport \u003d\n         yarnClient.getApplicationReport(appId);\n     if (appReport.getYarnApplicationState() !\u003d RUNNING) {\n       String message \u003d\n           serviceName + \" is at \" + appReport.getYarnApplicationState()\n               + \" state, flex can only be invoked when service is running\";\n       LOG.error(message);\n       throw new YarnException(message);\n     }\n+\n+    Service liveService \u003d getStatus(serviceName);\n+    if (liveService.getState().equals(ServiceState.UPGRADING) ||\n+        liveService.getState().equals(ServiceState.UPGRADING_AUTO_FINALIZE)) {\n+      String message \u003d serviceName + \" is at \" +\n+          liveService.getState()\n+          + \" state, flex can not be invoked when service is upgrading. \";\n+      LOG.error(message);\n+      throw new YarnException(message);\n+    }\n+\n     if (StringUtils.isEmpty(appReport.getHost())) {\n       throw new YarnException(serviceName + \" AM hostname is empty\");\n     }\n     ClientAMProtocol proxy \u003d\n         createAMProxy(serviceName, appReport);\n     proxy.flexComponents(requestBuilder.build());\n     for (Map.Entry\u003cString, Long\u003e entry : original.entrySet()) {\n       LOG.info(\"[COMPONENT {}]: number of containers changed from {} to {}\",\n           entry.getKey(), entry.getValue(),\n           componentCounts.get(entry.getKey()));\n     }\n     return original;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Map\u003cString, Long\u003e flexComponents(String serviceName,\n      Map\u003cString, Long\u003e componentCounts, Service persistedService)\n      throws YarnException, IOException {\n    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n\n    Map\u003cString, Long\u003e original \u003d new HashMap\u003c\u003e(componentCounts.size());\n\n    ComponentCountProto.Builder countBuilder \u003d ComponentCountProto.newBuilder();\n    FlexComponentsRequestProto.Builder requestBuilder \u003d\n        FlexComponentsRequestProto.newBuilder();\n\n    for (Component persistedComp : persistedService.getComponents()) {\n      String name \u003d persistedComp.getName();\n      if (componentCounts.containsKey(persistedComp.getName())) {\n        original.put(name, persistedComp.getNumberOfContainers());\n        persistedComp.setNumberOfContainers(componentCounts.get(name));\n\n        // build the request\n        countBuilder.setName(persistedComp.getName())\n            .setNumberOfContainers(persistedComp.getNumberOfContainers());\n        requestBuilder.addComponents(countBuilder.build());\n      }\n    }\n    if (original.size() \u003c componentCounts.size()) {\n      componentCounts.keySet().removeAll(original.keySet());\n      throw new YarnException(\"Components \" + componentCounts.keySet()\n          + \" do not exist in app definition.\");\n    }\n    jsonSerDeser\n        .save(fs.getFileSystem(), ServiceApiUtil.getServiceJsonPath(fs, serviceName),\n            persistedService, true);\n\n    ApplicationId appId \u003d getAppId(serviceName);\n    if (appId \u003d\u003d null) {\n      String message \u003d \"Application ID doesn\u0027t exist for \" + serviceName;\n      LOG.error(message);\n      throw new YarnException(message);\n    }\n    ApplicationReport appReport \u003d\n        yarnClient.getApplicationReport(appId);\n    if (appReport.getYarnApplicationState() !\u003d RUNNING) {\n      String message \u003d\n          serviceName + \" is at \" + appReport.getYarnApplicationState()\n              + \" state, flex can only be invoked when service is running\";\n      LOG.error(message);\n      throw new YarnException(message);\n    }\n\n    Service liveService \u003d getStatus(serviceName);\n    if (liveService.getState().equals(ServiceState.UPGRADING) ||\n        liveService.getState().equals(ServiceState.UPGRADING_AUTO_FINALIZE)) {\n      String message \u003d serviceName + \" is at \" +\n          liveService.getState()\n          + \" state, flex can not be invoked when service is upgrading. \";\n      LOG.error(message);\n      throw new YarnException(message);\n    }\n\n    if (StringUtils.isEmpty(appReport.getHost())) {\n      throw new YarnException(serviceName + \" AM hostname is empty\");\n    }\n    ClientAMProtocol proxy \u003d\n        createAMProxy(serviceName, appReport);\n    proxy.flexComponents(requestBuilder.build());\n    for (Map.Entry\u003cString, Long\u003e entry : original.entrySet()) {\n      LOG.info(\"[COMPONENT {}]: number of containers changed from {} to {}\",\n          entry.getKey(), entry.getValue(),\n          componentCounts.get(entry.getKey()));\n    }\n    return original;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "d553799030a5a64df328319aceb35734d0b2de20": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7984. Improved YARN service stop/destroy and clean up.\n           Contributed by Billie Rinaldi\n",
      "commitDate": "10/04/18 2:40 PM",
      "commitName": "d553799030a5a64df328319aceb35734d0b2de20",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "26/03/18 3:46 PM",
      "commitNameOld": "27d60a16342fd39973d43b61008f54a8815a6237",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 14.95,
      "commitsBetweenForRepo": 77,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,60 @@\n   private Map\u003cString, Long\u003e flexComponents(String serviceName,\n       Map\u003cString, Long\u003e componentCounts, Service persistedService)\n       throws YarnException, IOException {\n     ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n \n     Map\u003cString, Long\u003e original \u003d new HashMap\u003c\u003e(componentCounts.size());\n \n     ComponentCountProto.Builder countBuilder \u003d ComponentCountProto.newBuilder();\n     FlexComponentsRequestProto.Builder requestBuilder \u003d\n         FlexComponentsRequestProto.newBuilder();\n \n     for (Component persistedComp : persistedService.getComponents()) {\n       String name \u003d persistedComp.getName();\n       if (componentCounts.containsKey(persistedComp.getName())) {\n         original.put(name, persistedComp.getNumberOfContainers());\n         persistedComp.setNumberOfContainers(componentCounts.get(name));\n \n         // build the request\n         countBuilder.setName(persistedComp.getName())\n             .setNumberOfContainers(persistedComp.getNumberOfContainers());\n         requestBuilder.addComponents(countBuilder.build());\n       }\n     }\n     if (original.size() \u003c componentCounts.size()) {\n       componentCounts.keySet().removeAll(original.keySet());\n       throw new YarnException(\"Components \" + componentCounts.keySet()\n           + \" do not exist in app definition.\");\n     }\n     jsonSerDeser\n         .save(fs.getFileSystem(), ServiceApiUtil.getServiceJsonPath(fs, serviceName),\n             persistedService, true);\n \n+    ApplicationId appId \u003d getAppId(serviceName);\n+    if (appId \u003d\u003d null) {\n+      String message \u003d \"Application ID doesn\u0027t exist for \" + serviceName;\n+      LOG.error(message);\n+      throw new YarnException(message);\n+    }\n     ApplicationReport appReport \u003d\n-        yarnClient.getApplicationReport(getAppId(serviceName));\n+        yarnClient.getApplicationReport(appId);\n     if (appReport.getYarnApplicationState() !\u003d RUNNING) {\n       String message \u003d\n           serviceName + \" is at \" + appReport.getYarnApplicationState()\n               + \" state, flex can only be invoked when service is running\";\n       LOG.error(message);\n       throw new YarnException(message);\n     }\n     if (StringUtils.isEmpty(appReport.getHost())) {\n       throw new YarnException(serviceName + \" AM hostname is empty\");\n     }\n     ClientAMProtocol proxy \u003d\n         createAMProxy(serviceName, appReport);\n     proxy.flexComponents(requestBuilder.build());\n     for (Map.Entry\u003cString, Long\u003e entry : original.entrySet()) {\n       LOG.info(\"[COMPONENT {}]: number of containers changed from {} to {}\",\n           entry.getKey(), entry.getValue(),\n           componentCounts.get(entry.getKey()));\n     }\n     return original;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Map\u003cString, Long\u003e flexComponents(String serviceName,\n      Map\u003cString, Long\u003e componentCounts, Service persistedService)\n      throws YarnException, IOException {\n    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n\n    Map\u003cString, Long\u003e original \u003d new HashMap\u003c\u003e(componentCounts.size());\n\n    ComponentCountProto.Builder countBuilder \u003d ComponentCountProto.newBuilder();\n    FlexComponentsRequestProto.Builder requestBuilder \u003d\n        FlexComponentsRequestProto.newBuilder();\n\n    for (Component persistedComp : persistedService.getComponents()) {\n      String name \u003d persistedComp.getName();\n      if (componentCounts.containsKey(persistedComp.getName())) {\n        original.put(name, persistedComp.getNumberOfContainers());\n        persistedComp.setNumberOfContainers(componentCounts.get(name));\n\n        // build the request\n        countBuilder.setName(persistedComp.getName())\n            .setNumberOfContainers(persistedComp.getNumberOfContainers());\n        requestBuilder.addComponents(countBuilder.build());\n      }\n    }\n    if (original.size() \u003c componentCounts.size()) {\n      componentCounts.keySet().removeAll(original.keySet());\n      throw new YarnException(\"Components \" + componentCounts.keySet()\n          + \" do not exist in app definition.\");\n    }\n    jsonSerDeser\n        .save(fs.getFileSystem(), ServiceApiUtil.getServiceJsonPath(fs, serviceName),\n            persistedService, true);\n\n    ApplicationId appId \u003d getAppId(serviceName);\n    if (appId \u003d\u003d null) {\n      String message \u003d \"Application ID doesn\u0027t exist for \" + serviceName;\n      LOG.error(message);\n      throw new YarnException(message);\n    }\n    ApplicationReport appReport \u003d\n        yarnClient.getApplicationReport(appId);\n    if (appReport.getYarnApplicationState() !\u003d RUNNING) {\n      String message \u003d\n          serviceName + \" is at \" + appReport.getYarnApplicationState()\n              + \" state, flex can only be invoked when service is running\";\n      LOG.error(message);\n      throw new YarnException(message);\n    }\n    if (StringUtils.isEmpty(appReport.getHost())) {\n      throw new YarnException(serviceName + \" AM hostname is empty\");\n    }\n    ClientAMProtocol proxy \u003d\n        createAMProxy(serviceName, appReport);\n    proxy.flexComponents(requestBuilder.build());\n    for (Map.Entry\u003cString, Long\u003e entry : original.entrySet()) {\n      LOG.info(\"[COMPONENT {}]: number of containers changed from {} to {}\",\n          entry.getKey(), entry.getValue(),\n          componentCounts.get(entry.getKey()));\n    }\n    return original;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "d30d57828fddaa8667de49af879cde999907c7f6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6669.  Implemented Kerberos security for YARN service framework.  (Contributed by Jian He)\n",
      "commitDate": "04/12/17 12:11 PM",
      "commitName": "d30d57828fddaa8667de49af879cde999907c7f6",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "16/11/17 10:53 AM",
      "commitNameOld": "6bf2c301924a3acae5a7510b8473f6292a5a471b",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 18.05,
      "commitsBetweenForRepo": 71,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,54 @@\n   private Map\u003cString, Long\u003e flexComponents(String serviceName,\n       Map\u003cString, Long\u003e componentCounts, Service persistedService)\n       throws YarnException, IOException {\n     ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n \n     Map\u003cString, Long\u003e original \u003d new HashMap\u003c\u003e(componentCounts.size());\n \n     ComponentCountProto.Builder countBuilder \u003d ComponentCountProto.newBuilder();\n     FlexComponentsRequestProto.Builder requestBuilder \u003d\n         FlexComponentsRequestProto.newBuilder();\n \n     for (Component persistedComp : persistedService.getComponents()) {\n       String name \u003d persistedComp.getName();\n       if (componentCounts.containsKey(persistedComp.getName())) {\n         original.put(name, persistedComp.getNumberOfContainers());\n         persistedComp.setNumberOfContainers(componentCounts.get(name));\n \n         // build the request\n         countBuilder.setName(persistedComp.getName())\n             .setNumberOfContainers(persistedComp.getNumberOfContainers());\n         requestBuilder.addComponents(countBuilder.build());\n       }\n     }\n     if (original.size() \u003c componentCounts.size()) {\n       componentCounts.keySet().removeAll(original.keySet());\n       throw new YarnException(\"Components \" + componentCounts.keySet()\n           + \" do not exist in app definition.\");\n     }\n     jsonSerDeser\n         .save(fs.getFileSystem(), ServiceApiUtil.getServiceJsonPath(fs, serviceName),\n             persistedService, true);\n \n     ApplicationReport appReport \u003d\n         yarnClient.getApplicationReport(getAppId(serviceName));\n     if (appReport.getYarnApplicationState() !\u003d RUNNING) {\n       String message \u003d\n           serviceName + \" is at \" + appReport.getYarnApplicationState()\n               + \" state, flex can only be invoked when service is running\";\n       LOG.error(message);\n       throw new YarnException(message);\n     }\n     if (StringUtils.isEmpty(appReport.getHost())) {\n       throw new YarnException(serviceName + \" AM hostname is empty\");\n     }\n     ClientAMProtocol proxy \u003d\n-        createAMProxy(appReport.getHost(), appReport.getRpcPort());\n+        createAMProxy(serviceName, appReport);\n     proxy.flexComponents(requestBuilder.build());\n     for (Map.Entry\u003cString, Long\u003e entry : original.entrySet()) {\n       LOG.info(\"[COMPONENT {}]: number of containers changed from {} to {}\",\n           entry.getKey(), entry.getValue(),\n           componentCounts.get(entry.getKey()));\n     }\n     return original;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Map\u003cString, Long\u003e flexComponents(String serviceName,\n      Map\u003cString, Long\u003e componentCounts, Service persistedService)\n      throws YarnException, IOException {\n    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n\n    Map\u003cString, Long\u003e original \u003d new HashMap\u003c\u003e(componentCounts.size());\n\n    ComponentCountProto.Builder countBuilder \u003d ComponentCountProto.newBuilder();\n    FlexComponentsRequestProto.Builder requestBuilder \u003d\n        FlexComponentsRequestProto.newBuilder();\n\n    for (Component persistedComp : persistedService.getComponents()) {\n      String name \u003d persistedComp.getName();\n      if (componentCounts.containsKey(persistedComp.getName())) {\n        original.put(name, persistedComp.getNumberOfContainers());\n        persistedComp.setNumberOfContainers(componentCounts.get(name));\n\n        // build the request\n        countBuilder.setName(persistedComp.getName())\n            .setNumberOfContainers(persistedComp.getNumberOfContainers());\n        requestBuilder.addComponents(countBuilder.build());\n      }\n    }\n    if (original.size() \u003c componentCounts.size()) {\n      componentCounts.keySet().removeAll(original.keySet());\n      throw new YarnException(\"Components \" + componentCounts.keySet()\n          + \" do not exist in app definition.\");\n    }\n    jsonSerDeser\n        .save(fs.getFileSystem(), ServiceApiUtil.getServiceJsonPath(fs, serviceName),\n            persistedService, true);\n\n    ApplicationReport appReport \u003d\n        yarnClient.getApplicationReport(getAppId(serviceName));\n    if (appReport.getYarnApplicationState() !\u003d RUNNING) {\n      String message \u003d\n          serviceName + \" is at \" + appReport.getYarnApplicationState()\n              + \" state, flex can only be invoked when service is running\";\n      LOG.error(message);\n      throw new YarnException(message);\n    }\n    if (StringUtils.isEmpty(appReport.getHost())) {\n      throw new YarnException(serviceName + \" AM hostname is empty\");\n    }\n    ClientAMProtocol proxy \u003d\n        createAMProxy(serviceName, appReport);\n    proxy.flexComponents(requestBuilder.build());\n    for (Map.Entry\u003cString, Long\u003e entry : original.entrySet()) {\n      LOG.info(\"[COMPONENT {}]: number of containers changed from {} to {}\",\n          entry.getKey(), entry.getValue(),\n          componentCounts.get(entry.getKey()));\n    }\n    return original;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "40ab068eabe50875449d601471619a4e82fff86d": {
      "type": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,54 @@\n-  private Map\u003cString, Long\u003e flexComponents(String appName,\n-      Map\u003cString, Long\u003e componentCounts, Application persistedApp)\n+  private Map\u003cString, Long\u003e flexComponents(String serviceName,\n+      Map\u003cString, Long\u003e componentCounts, Service persistedService)\n       throws YarnException, IOException {\n-    validateClusterName(appName);\n+    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n \n     Map\u003cString, Long\u003e original \u003d new HashMap\u003c\u003e(componentCounts.size());\n \n     ComponentCountProto.Builder countBuilder \u003d ComponentCountProto.newBuilder();\n     FlexComponentsRequestProto.Builder requestBuilder \u003d\n         FlexComponentsRequestProto.newBuilder();\n \n-    for (Component persistedComp : persistedApp.getComponents()) {\n+    for (Component persistedComp : persistedService.getComponents()) {\n       String name \u003d persistedComp.getName();\n       if (componentCounts.containsKey(persistedComp.getName())) {\n         original.put(name, persistedComp.getNumberOfContainers());\n         persistedComp.setNumberOfContainers(componentCounts.get(name));\n \n         // build the request\n         countBuilder.setName(persistedComp.getName())\n             .setNumberOfContainers(persistedComp.getNumberOfContainers());\n         requestBuilder.addComponents(countBuilder.build());\n       }\n     }\n     if (original.size() \u003c componentCounts.size()) {\n       componentCounts.keySet().removeAll(original.keySet());\n       throw new YarnException(\"Components \" + componentCounts.keySet()\n           + \" do not exist in app definition.\");\n     }\n-    ServiceApiUtil.jsonSerDeser\n-        .save(fs.getFileSystem(), ServiceApiUtil.getAppJsonPath(fs, appName),\n-            persistedApp, true);\n-    ClientAMProtocol proxy \u003d getAMProxy(appName);\n-    if (proxy \u003d\u003d null) {\n-      String message \u003d appName + \" is not running\";\n+    jsonSerDeser\n+        .save(fs.getFileSystem(), ServiceApiUtil.getServiceJsonPath(fs, serviceName),\n+            persistedService, true);\n+\n+    ApplicationReport appReport \u003d\n+        yarnClient.getApplicationReport(getAppId(serviceName));\n+    if (appReport.getYarnApplicationState() !\u003d RUNNING) {\n+      String message \u003d\n+          serviceName + \" is at \" + appReport.getYarnApplicationState()\n+              + \" state, flex can only be invoked when service is running\";\n       LOG.error(message);\n       throw new YarnException(message);\n     }\n+    if (StringUtils.isEmpty(appReport.getHost())) {\n+      throw new YarnException(serviceName + \" AM hostname is empty\");\n+    }\n+    ClientAMProtocol proxy \u003d\n+        createAMProxy(appReport.getHost(), appReport.getRpcPort());\n     proxy.flexComponents(requestBuilder.build());\n     for (Map.Entry\u003cString, Long\u003e entry : original.entrySet()) {\n       LOG.info(\"[COMPONENT {}]: number of containers changed from {} to {}\",\n           entry.getKey(), entry.getValue(),\n           componentCounts.get(entry.getKey()));\n     }\n     return original;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Map\u003cString, Long\u003e flexComponents(String serviceName,\n      Map\u003cString, Long\u003e componentCounts, Service persistedService)\n      throws YarnException, IOException {\n    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n\n    Map\u003cString, Long\u003e original \u003d new HashMap\u003c\u003e(componentCounts.size());\n\n    ComponentCountProto.Builder countBuilder \u003d ComponentCountProto.newBuilder();\n    FlexComponentsRequestProto.Builder requestBuilder \u003d\n        FlexComponentsRequestProto.newBuilder();\n\n    for (Component persistedComp : persistedService.getComponents()) {\n      String name \u003d persistedComp.getName();\n      if (componentCounts.containsKey(persistedComp.getName())) {\n        original.put(name, persistedComp.getNumberOfContainers());\n        persistedComp.setNumberOfContainers(componentCounts.get(name));\n\n        // build the request\n        countBuilder.setName(persistedComp.getName())\n            .setNumberOfContainers(persistedComp.getNumberOfContainers());\n        requestBuilder.addComponents(countBuilder.build());\n      }\n    }\n    if (original.size() \u003c componentCounts.size()) {\n      componentCounts.keySet().removeAll(original.keySet());\n      throw new YarnException(\"Components \" + componentCounts.keySet()\n          + \" do not exist in app definition.\");\n    }\n    jsonSerDeser\n        .save(fs.getFileSystem(), ServiceApiUtil.getServiceJsonPath(fs, serviceName),\n            persistedService, true);\n\n    ApplicationReport appReport \u003d\n        yarnClient.getApplicationReport(getAppId(serviceName));\n    if (appReport.getYarnApplicationState() !\u003d RUNNING) {\n      String message \u003d\n          serviceName + \" is at \" + appReport.getYarnApplicationState()\n              + \" state, flex can only be invoked when service is running\";\n      LOG.error(message);\n      throw new YarnException(message);\n    }\n    if (StringUtils.isEmpty(appReport.getHost())) {\n      throw new YarnException(serviceName + \" AM hostname is empty\");\n    }\n    ClientAMProtocol proxy \u003d\n        createAMProxy(appReport.getHost(), appReport.getRpcPort());\n    proxy.flexComponents(requestBuilder.build());\n    for (Map.Entry\u003cString, Long\u003e entry : original.entrySet()) {\n      LOG.info(\"[COMPONENT {}]: number of containers changed from {} to {}\",\n          entry.getKey(), entry.getValue(),\n          componentCounts.get(entry.getKey()));\n    }\n    return original;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,54 @@\n-  private Map\u003cString, Long\u003e flexComponents(String appName,\n-      Map\u003cString, Long\u003e componentCounts, Application persistedApp)\n+  private Map\u003cString, Long\u003e flexComponents(String serviceName,\n+      Map\u003cString, Long\u003e componentCounts, Service persistedService)\n       throws YarnException, IOException {\n-    validateClusterName(appName);\n+    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n \n     Map\u003cString, Long\u003e original \u003d new HashMap\u003c\u003e(componentCounts.size());\n \n     ComponentCountProto.Builder countBuilder \u003d ComponentCountProto.newBuilder();\n     FlexComponentsRequestProto.Builder requestBuilder \u003d\n         FlexComponentsRequestProto.newBuilder();\n \n-    for (Component persistedComp : persistedApp.getComponents()) {\n+    for (Component persistedComp : persistedService.getComponents()) {\n       String name \u003d persistedComp.getName();\n       if (componentCounts.containsKey(persistedComp.getName())) {\n         original.put(name, persistedComp.getNumberOfContainers());\n         persistedComp.setNumberOfContainers(componentCounts.get(name));\n \n         // build the request\n         countBuilder.setName(persistedComp.getName())\n             .setNumberOfContainers(persistedComp.getNumberOfContainers());\n         requestBuilder.addComponents(countBuilder.build());\n       }\n     }\n     if (original.size() \u003c componentCounts.size()) {\n       componentCounts.keySet().removeAll(original.keySet());\n       throw new YarnException(\"Components \" + componentCounts.keySet()\n           + \" do not exist in app definition.\");\n     }\n-    ServiceApiUtil.jsonSerDeser\n-        .save(fs.getFileSystem(), ServiceApiUtil.getAppJsonPath(fs, appName),\n-            persistedApp, true);\n-    ClientAMProtocol proxy \u003d getAMProxy(appName);\n-    if (proxy \u003d\u003d null) {\n-      String message \u003d appName + \" is not running\";\n+    jsonSerDeser\n+        .save(fs.getFileSystem(), ServiceApiUtil.getServiceJsonPath(fs, serviceName),\n+            persistedService, true);\n+\n+    ApplicationReport appReport \u003d\n+        yarnClient.getApplicationReport(getAppId(serviceName));\n+    if (appReport.getYarnApplicationState() !\u003d RUNNING) {\n+      String message \u003d\n+          serviceName + \" is at \" + appReport.getYarnApplicationState()\n+              + \" state, flex can only be invoked when service is running\";\n       LOG.error(message);\n       throw new YarnException(message);\n     }\n+    if (StringUtils.isEmpty(appReport.getHost())) {\n+      throw new YarnException(serviceName + \" AM hostname is empty\");\n+    }\n+    ClientAMProtocol proxy \u003d\n+        createAMProxy(appReport.getHost(), appReport.getRpcPort());\n     proxy.flexComponents(requestBuilder.build());\n     for (Map.Entry\u003cString, Long\u003e entry : original.entrySet()) {\n       LOG.info(\"[COMPONENT {}]: number of containers changed from {} to {}\",\n           entry.getKey(), entry.getValue(),\n           componentCounts.get(entry.getKey()));\n     }\n     return original;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Map\u003cString, Long\u003e flexComponents(String serviceName,\n      Map\u003cString, Long\u003e componentCounts, Service persistedService)\n      throws YarnException, IOException {\n    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n\n    Map\u003cString, Long\u003e original \u003d new HashMap\u003c\u003e(componentCounts.size());\n\n    ComponentCountProto.Builder countBuilder \u003d ComponentCountProto.newBuilder();\n    FlexComponentsRequestProto.Builder requestBuilder \u003d\n        FlexComponentsRequestProto.newBuilder();\n\n    for (Component persistedComp : persistedService.getComponents()) {\n      String name \u003d persistedComp.getName();\n      if (componentCounts.containsKey(persistedComp.getName())) {\n        original.put(name, persistedComp.getNumberOfContainers());\n        persistedComp.setNumberOfContainers(componentCounts.get(name));\n\n        // build the request\n        countBuilder.setName(persistedComp.getName())\n            .setNumberOfContainers(persistedComp.getNumberOfContainers());\n        requestBuilder.addComponents(countBuilder.build());\n      }\n    }\n    if (original.size() \u003c componentCounts.size()) {\n      componentCounts.keySet().removeAll(original.keySet());\n      throw new YarnException(\"Components \" + componentCounts.keySet()\n          + \" do not exist in app definition.\");\n    }\n    jsonSerDeser\n        .save(fs.getFileSystem(), ServiceApiUtil.getServiceJsonPath(fs, serviceName),\n            persistedService, true);\n\n    ApplicationReport appReport \u003d\n        yarnClient.getApplicationReport(getAppId(serviceName));\n    if (appReport.getYarnApplicationState() !\u003d RUNNING) {\n      String message \u003d\n          serviceName + \" is at \" + appReport.getYarnApplicationState()\n              + \" state, flex can only be invoked when service is running\";\n      LOG.error(message);\n      throw new YarnException(message);\n    }\n    if (StringUtils.isEmpty(appReport.getHost())) {\n      throw new YarnException(serviceName + \" AM hostname is empty\");\n    }\n    ClientAMProtocol proxy \u003d\n        createAMProxy(appReport.getHost(), appReport.getRpcPort());\n    proxy.flexComponents(requestBuilder.build());\n    for (Map.Entry\u003cString, Long\u003e entry : original.entrySet()) {\n      LOG.info(\"[COMPONENT {}]: number of containers changed from {} to {}\",\n          entry.getKey(), entry.getValue(),\n          componentCounts.get(entry.getKey()));\n    }\n    return original;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,54 @@\n-  private Map\u003cString, Long\u003e flexComponents(String appName,\n-      Map\u003cString, Long\u003e componentCounts, Application persistedApp)\n+  private Map\u003cString, Long\u003e flexComponents(String serviceName,\n+      Map\u003cString, Long\u003e componentCounts, Service persistedService)\n       throws YarnException, IOException {\n-    validateClusterName(appName);\n+    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n \n     Map\u003cString, Long\u003e original \u003d new HashMap\u003c\u003e(componentCounts.size());\n \n     ComponentCountProto.Builder countBuilder \u003d ComponentCountProto.newBuilder();\n     FlexComponentsRequestProto.Builder requestBuilder \u003d\n         FlexComponentsRequestProto.newBuilder();\n \n-    for (Component persistedComp : persistedApp.getComponents()) {\n+    for (Component persistedComp : persistedService.getComponents()) {\n       String name \u003d persistedComp.getName();\n       if (componentCounts.containsKey(persistedComp.getName())) {\n         original.put(name, persistedComp.getNumberOfContainers());\n         persistedComp.setNumberOfContainers(componentCounts.get(name));\n \n         // build the request\n         countBuilder.setName(persistedComp.getName())\n             .setNumberOfContainers(persistedComp.getNumberOfContainers());\n         requestBuilder.addComponents(countBuilder.build());\n       }\n     }\n     if (original.size() \u003c componentCounts.size()) {\n       componentCounts.keySet().removeAll(original.keySet());\n       throw new YarnException(\"Components \" + componentCounts.keySet()\n           + \" do not exist in app definition.\");\n     }\n-    ServiceApiUtil.jsonSerDeser\n-        .save(fs.getFileSystem(), ServiceApiUtil.getAppJsonPath(fs, appName),\n-            persistedApp, true);\n-    ClientAMProtocol proxy \u003d getAMProxy(appName);\n-    if (proxy \u003d\u003d null) {\n-      String message \u003d appName + \" is not running\";\n+    jsonSerDeser\n+        .save(fs.getFileSystem(), ServiceApiUtil.getServiceJsonPath(fs, serviceName),\n+            persistedService, true);\n+\n+    ApplicationReport appReport \u003d\n+        yarnClient.getApplicationReport(getAppId(serviceName));\n+    if (appReport.getYarnApplicationState() !\u003d RUNNING) {\n+      String message \u003d\n+          serviceName + \" is at \" + appReport.getYarnApplicationState()\n+              + \" state, flex can only be invoked when service is running\";\n       LOG.error(message);\n       throw new YarnException(message);\n     }\n+    if (StringUtils.isEmpty(appReport.getHost())) {\n+      throw new YarnException(serviceName + \" AM hostname is empty\");\n+    }\n+    ClientAMProtocol proxy \u003d\n+        createAMProxy(appReport.getHost(), appReport.getRpcPort());\n     proxy.flexComponents(requestBuilder.build());\n     for (Map.Entry\u003cString, Long\u003e entry : original.entrySet()) {\n       LOG.info(\"[COMPONENT {}]: number of containers changed from {} to {}\",\n           entry.getKey(), entry.getValue(),\n           componentCounts.get(entry.getKey()));\n     }\n     return original;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Map\u003cString, Long\u003e flexComponents(String serviceName,\n      Map\u003cString, Long\u003e componentCounts, Service persistedService)\n      throws YarnException, IOException {\n    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n\n    Map\u003cString, Long\u003e original \u003d new HashMap\u003c\u003e(componentCounts.size());\n\n    ComponentCountProto.Builder countBuilder \u003d ComponentCountProto.newBuilder();\n    FlexComponentsRequestProto.Builder requestBuilder \u003d\n        FlexComponentsRequestProto.newBuilder();\n\n    for (Component persistedComp : persistedService.getComponents()) {\n      String name \u003d persistedComp.getName();\n      if (componentCounts.containsKey(persistedComp.getName())) {\n        original.put(name, persistedComp.getNumberOfContainers());\n        persistedComp.setNumberOfContainers(componentCounts.get(name));\n\n        // build the request\n        countBuilder.setName(persistedComp.getName())\n            .setNumberOfContainers(persistedComp.getNumberOfContainers());\n        requestBuilder.addComponents(countBuilder.build());\n      }\n    }\n    if (original.size() \u003c componentCounts.size()) {\n      componentCounts.keySet().removeAll(original.keySet());\n      throw new YarnException(\"Components \" + componentCounts.keySet()\n          + \" do not exist in app definition.\");\n    }\n    jsonSerDeser\n        .save(fs.getFileSystem(), ServiceApiUtil.getServiceJsonPath(fs, serviceName),\n            persistedService, true);\n\n    ApplicationReport appReport \u003d\n        yarnClient.getApplicationReport(getAppId(serviceName));\n    if (appReport.getYarnApplicationState() !\u003d RUNNING) {\n      String message \u003d\n          serviceName + \" is at \" + appReport.getYarnApplicationState()\n              + \" state, flex can only be invoked when service is running\";\n      LOG.error(message);\n      throw new YarnException(message);\n    }\n    if (StringUtils.isEmpty(appReport.getHost())) {\n      throw new YarnException(serviceName + \" AM hostname is empty\");\n    }\n    ClientAMProtocol proxy \u003d\n        createAMProxy(appReport.getHost(), appReport.getRpcPort());\n    proxy.flexComponents(requestBuilder.build());\n    for (Map.Entry\u003cString, Long\u003e entry : original.entrySet()) {\n      LOG.info(\"[COMPONENT {}]: number of containers changed from {} to {}\",\n          entry.getKey(), entry.getValue(),\n          componentCounts.get(entry.getKey()));\n    }\n    return original;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {
            "oldValue": "[appName-String, componentCounts-Map\u003cString,Long\u003e, persistedApp-Application]",
            "newValue": "[serviceName-String, componentCounts-Map\u003cString,Long\u003e, persistedService-Service]"
          }
        }
      ]
    },
    "2191f5b533c6b4763f5d443d21127f1f8552ce64": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7050. Post cleanup after YARN-6903, removal of org.apache.slider package. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "2191f5b533c6b4763f5d443d21127f1f8552ce64",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "79bf5c084d4a063f1a933cae498af23edfd46792",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,45 @@\n   private Map\u003cString, Long\u003e flexComponents(String appName,\n       Map\u003cString, Long\u003e componentCounts, Application persistedApp)\n       throws YarnException, IOException {\n     validateClusterName(appName);\n \n     Map\u003cString, Long\u003e original \u003d new HashMap\u003c\u003e(componentCounts.size());\n \n     ComponentCountProto.Builder countBuilder \u003d ComponentCountProto.newBuilder();\n     FlexComponentsRequestProto.Builder requestBuilder \u003d\n         FlexComponentsRequestProto.newBuilder();\n \n     for (Component persistedComp : persistedApp.getComponents()) {\n       String name \u003d persistedComp.getName();\n       if (componentCounts.containsKey(persistedComp.getName())) {\n         original.put(name, persistedComp.getNumberOfContainers());\n         persistedComp.setNumberOfContainers(componentCounts.get(name));\n \n         // build the request\n         countBuilder.setName(persistedComp.getName())\n             .setNumberOfContainers(persistedComp.getNumberOfContainers());\n         requestBuilder.addComponents(countBuilder.build());\n       }\n     }\n     if (original.size() \u003c componentCounts.size()) {\n       componentCounts.keySet().removeAll(original.keySet());\n       throw new YarnException(\"Components \" + componentCounts.keySet()\n           + \" do not exist in app definition.\");\n     }\n     ServiceApiUtil.jsonSerDeser\n         .save(fs.getFileSystem(), ServiceApiUtil.getAppJsonPath(fs, appName),\n             persistedApp, true);\n-    ClientAMProtocol proxy \u003d connectToAM(appName);\n+    ClientAMProtocol proxy \u003d getAMProxy(appName);\n+    if (proxy \u003d\u003d null) {\n+      String message \u003d appName + \" is not running\";\n+      LOG.error(message);\n+      throw new YarnException(message);\n+    }\n     proxy.flexComponents(requestBuilder.build());\n     for (Map.Entry\u003cString, Long\u003e entry : original.entrySet()) {\n       LOG.info(\"[COMPONENT {}]: number of containers changed from {} to {}\",\n           entry.getKey(), entry.getValue(),\n           componentCounts.get(entry.getKey()));\n     }\n     return original;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Map\u003cString, Long\u003e flexComponents(String appName,\n      Map\u003cString, Long\u003e componentCounts, Application persistedApp)\n      throws YarnException, IOException {\n    validateClusterName(appName);\n\n    Map\u003cString, Long\u003e original \u003d new HashMap\u003c\u003e(componentCounts.size());\n\n    ComponentCountProto.Builder countBuilder \u003d ComponentCountProto.newBuilder();\n    FlexComponentsRequestProto.Builder requestBuilder \u003d\n        FlexComponentsRequestProto.newBuilder();\n\n    for (Component persistedComp : persistedApp.getComponents()) {\n      String name \u003d persistedComp.getName();\n      if (componentCounts.containsKey(persistedComp.getName())) {\n        original.put(name, persistedComp.getNumberOfContainers());\n        persistedComp.setNumberOfContainers(componentCounts.get(name));\n\n        // build the request\n        countBuilder.setName(persistedComp.getName())\n            .setNumberOfContainers(persistedComp.getNumberOfContainers());\n        requestBuilder.addComponents(countBuilder.build());\n      }\n    }\n    if (original.size() \u003c componentCounts.size()) {\n      componentCounts.keySet().removeAll(original.keySet());\n      throw new YarnException(\"Components \" + componentCounts.keySet()\n          + \" do not exist in app definition.\");\n    }\n    ServiceApiUtil.jsonSerDeser\n        .save(fs.getFileSystem(), ServiceApiUtil.getAppJsonPath(fs, appName),\n            persistedApp, true);\n    ClientAMProtocol proxy \u003d getAMProxy(appName);\n    if (proxy \u003d\u003d null) {\n      String message \u003d appName + \" is not running\";\n      LOG.error(message);\n      throw new YarnException(message);\n    }\n    proxy.flexComponents(requestBuilder.build());\n    for (Map.Entry\u003cString, Long\u003e entry : original.entrySet()) {\n      LOG.info(\"[COMPONENT {}]: number of containers changed from {} to {}\",\n          entry.getKey(), entry.getValue(),\n          componentCounts.get(entry.getKey()));\n    }\n    return original;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "1888318c89776f0bf354c1b13e3ee169e14ff638": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
      "commitAuthor": "Billie Rinaldi",
      "diff": "@@ -0,0 +1,40 @@\n+  private Map\u003cString, Long\u003e flexComponents(String appName,\n+      Map\u003cString, Long\u003e componentCounts, Application persistedApp)\n+      throws YarnException, IOException {\n+    validateClusterName(appName);\n+\n+    Map\u003cString, Long\u003e original \u003d new HashMap\u003c\u003e(componentCounts.size());\n+\n+    ComponentCountProto.Builder countBuilder \u003d ComponentCountProto.newBuilder();\n+    FlexComponentsRequestProto.Builder requestBuilder \u003d\n+        FlexComponentsRequestProto.newBuilder();\n+\n+    for (Component persistedComp : persistedApp.getComponents()) {\n+      String name \u003d persistedComp.getName();\n+      if (componentCounts.containsKey(persistedComp.getName())) {\n+        original.put(name, persistedComp.getNumberOfContainers());\n+        persistedComp.setNumberOfContainers(componentCounts.get(name));\n+\n+        // build the request\n+        countBuilder.setName(persistedComp.getName())\n+            .setNumberOfContainers(persistedComp.getNumberOfContainers());\n+        requestBuilder.addComponents(countBuilder.build());\n+      }\n+    }\n+    if (original.size() \u003c componentCounts.size()) {\n+      componentCounts.keySet().removeAll(original.keySet());\n+      throw new YarnException(\"Components \" + componentCounts.keySet()\n+          + \" do not exist in app definition.\");\n+    }\n+    ServiceApiUtil.jsonSerDeser\n+        .save(fs.getFileSystem(), ServiceApiUtil.getAppJsonPath(fs, appName),\n+            persistedApp, true);\n+    ClientAMProtocol proxy \u003d connectToAM(appName);\n+    proxy.flexComponents(requestBuilder.build());\n+    for (Map.Entry\u003cString, Long\u003e entry : original.entrySet()) {\n+      LOG.info(\"[COMPONENT {}]: number of containers changed from {} to {}\",\n+          entry.getKey(), entry.getValue(),\n+          componentCounts.get(entry.getKey()));\n+    }\n+    return original;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Map\u003cString, Long\u003e flexComponents(String appName,\n      Map\u003cString, Long\u003e componentCounts, Application persistedApp)\n      throws YarnException, IOException {\n    validateClusterName(appName);\n\n    Map\u003cString, Long\u003e original \u003d new HashMap\u003c\u003e(componentCounts.size());\n\n    ComponentCountProto.Builder countBuilder \u003d ComponentCountProto.newBuilder();\n    FlexComponentsRequestProto.Builder requestBuilder \u003d\n        FlexComponentsRequestProto.newBuilder();\n\n    for (Component persistedComp : persistedApp.getComponents()) {\n      String name \u003d persistedComp.getName();\n      if (componentCounts.containsKey(persistedComp.getName())) {\n        original.put(name, persistedComp.getNumberOfContainers());\n        persistedComp.setNumberOfContainers(componentCounts.get(name));\n\n        // build the request\n        countBuilder.setName(persistedComp.getName())\n            .setNumberOfContainers(persistedComp.getNumberOfContainers());\n        requestBuilder.addComponents(countBuilder.build());\n      }\n    }\n    if (original.size() \u003c componentCounts.size()) {\n      componentCounts.keySet().removeAll(original.keySet());\n      throw new YarnException(\"Components \" + componentCounts.keySet()\n          + \" do not exist in app definition.\");\n    }\n    ServiceApiUtil.jsonSerDeser\n        .save(fs.getFileSystem(), ServiceApiUtil.getAppJsonPath(fs, appName),\n            persistedApp, true);\n    ClientAMProtocol proxy \u003d connectToAM(appName);\n    proxy.flexComponents(requestBuilder.build());\n    for (Map.Entry\u003cString, Long\u003e entry : original.entrySet()) {\n      LOG.info(\"[COMPONENT {}]: number of containers changed from {} to {}\",\n          entry.getKey(), entry.getValue(),\n          componentCounts.get(entry.getKey()));\n    }\n    return original;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java"
    }
  }
}