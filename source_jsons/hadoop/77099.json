{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MapFile.java",
  "functionName": "open",
  "functionId": "open___inMapFiles-Path[]__outMapFile-Path",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/MapFile.java",
  "functionStartLine": 900,
  "functionEndLine": 930,
  "numCommitsSeen": 11,
  "timeTaken": 867,
  "changeHistory": [
    "48c7ee7553af94a57952bca03b49c04b9bbfab45"
  ],
  "changeHistoryShort": {
    "48c7ee7553af94a57952bca03b49c04b9bbfab45": "Yintroduced"
  },
  "changeHistoryDetails": {
    "48c7ee7553af94a57952bca03b49c04b9bbfab45": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-11569. Provide Merge API for MapFile to merge multiple similar MapFiles to one MapFile. Contributed by Vinayakumar B.\n",
      "commitDate": "27/02/15 12:46 AM",
      "commitName": "48c7ee7553af94a57952bca03b49c04b9bbfab45",
      "commitAuthor": "Tsuyoshi Ozawa",
      "diff": "@@ -0,0 +1,31 @@\n+    private void open(Path[] inMapFiles, Path outMapFile) throws IOException {\n+      inReaders \u003d new Reader[inMapFiles.length];\n+      for (int i \u003d 0; i \u003c inMapFiles.length; i++) {\n+        Reader reader \u003d new Reader(inMapFiles[i], conf);\n+        if (keyClass \u003d\u003d null || valueClass \u003d\u003d null) {\n+          keyClass \u003d (Class\u003cWritableComparable\u003e) reader.getKeyClass();\n+          valueClass \u003d (Class\u003cWritable\u003e) reader.getValueClass();\n+        } else if (keyClass !\u003d reader.getKeyClass()\n+            || valueClass !\u003d reader.getValueClass()) {\n+          throw new HadoopIllegalArgumentException(\n+              \"Input files cannot be merged as they\"\n+                  + \" have different Key and Value classes\");\n+        }\n+        inReaders[i] \u003d reader;\n+      }\n+\n+      if (comparator \u003d\u003d null) {\n+        Class\u003c? extends WritableComparable\u003e cls;\n+        cls \u003d keyClass.asSubclass(WritableComparable.class);\n+        this.comparator \u003d WritableComparator.get(cls, conf);\n+      } else if (comparator.getKeyClass() !\u003d keyClass) {\n+        throw new HadoopIllegalArgumentException(\n+            \"Input files cannot be merged as they\"\n+                + \" have different Key class compared to\"\n+                + \" specified comparator\");\n+      }\n+\n+      outWriter \u003d new MapFile.Writer(conf, outMapFile,\n+          MapFile.Writer.keyClass(keyClass),\n+          MapFile.Writer.valueClass(valueClass));\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void open(Path[] inMapFiles, Path outMapFile) throws IOException {\n      inReaders \u003d new Reader[inMapFiles.length];\n      for (int i \u003d 0; i \u003c inMapFiles.length; i++) {\n        Reader reader \u003d new Reader(inMapFiles[i], conf);\n        if (keyClass \u003d\u003d null || valueClass \u003d\u003d null) {\n          keyClass \u003d (Class\u003cWritableComparable\u003e) reader.getKeyClass();\n          valueClass \u003d (Class\u003cWritable\u003e) reader.getValueClass();\n        } else if (keyClass !\u003d reader.getKeyClass()\n            || valueClass !\u003d reader.getValueClass()) {\n          throw new HadoopIllegalArgumentException(\n              \"Input files cannot be merged as they\"\n                  + \" have different Key and Value classes\");\n        }\n        inReaders[i] \u003d reader;\n      }\n\n      if (comparator \u003d\u003d null) {\n        Class\u003c? extends WritableComparable\u003e cls;\n        cls \u003d keyClass.asSubclass(WritableComparable.class);\n        this.comparator \u003d WritableComparator.get(cls, conf);\n      } else if (comparator.getKeyClass() !\u003d keyClass) {\n        throw new HadoopIllegalArgumentException(\n            \"Input files cannot be merged as they\"\n                + \" have different Key class compared to\"\n                + \" specified comparator\");\n      }\n\n      outWriter \u003d new MapFile.Writer(conf, outMapFile,\n          MapFile.Writer.keyClass(keyClass),\n          MapFile.Writer.valueClass(valueClass));\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/MapFile.java"
    }
  }
}