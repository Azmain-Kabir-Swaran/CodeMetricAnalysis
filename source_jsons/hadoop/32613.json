{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DefaultContainerExecutor.java",
  "functionName": "startLocalizer",
  "functionId": "startLocalizer___ctx-LocalizerStartContext",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DefaultContainerExecutor.java",
  "functionStartLine": 147,
  "functionEndLine": 185,
  "numCommitsSeen": 110,
  "timeTaken": 11505,
  "changeHistory": [
    "f7df55f4a89ed2d75d874b32209647ef4f448875",
    "21ec4bdaef4b68adbbf4f33a6f74494c074f803c",
    "c380a22031a62e2d2fe533079e3780f06b069943",
    "53fafcf061616516c24e2e2007a66a93d23d3e25",
    "6157ace5475fff8d2513fd3cd99134b532b0b406",
    "3b12fd6cfbf4cc91ef8e8616c7aafa9de006cde5",
    "cc93e7e683fa74eb1a7aa2b357a36667bd21086a",
    "ba7f31c2ee8d23ecb183f88920ef06053c0b9769",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "f611e1d1b116613a8fce0abc400e54e155d295e9",
    "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb",
    "f114dad5ef9b72875e245803cee150ad12ff59de",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "f7df55f4a89ed2d75d874b32209647ef4f448875": "Ybodychange",
    "21ec4bdaef4b68adbbf4f33a6f74494c074f803c": "Ybodychange",
    "c380a22031a62e2d2fe533079e3780f06b069943": "Ybodychange",
    "53fafcf061616516c24e2e2007a66a93d23d3e25": "Ymultichange(Yparameterchange,Ybodychange)",
    "6157ace5475fff8d2513fd3cd99134b532b0b406": "Ymultichange(Ymodifierchange,Ybodychange)",
    "3b12fd6cfbf4cc91ef8e8616c7aafa9de006cde5": "Ymultichange(Yparameterchange,Ybodychange)",
    "cc93e7e683fa74eb1a7aa2b357a36667bd21086a": "Ybodychange",
    "ba7f31c2ee8d23ecb183f88920ef06053c0b9769": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "f611e1d1b116613a8fce0abc400e54e155d295e9": "Ymodifierchange",
    "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb": "Ymultichange(Yparameterchange,Ybodychange)",
    "f114dad5ef9b72875e245803cee150ad12ff59de": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f7df55f4a89ed2d75d874b32209647ef4f448875": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9602. Use logger format in Container Executor. Contributed by Abhishek Modi.\n",
      "commitDate": "11/06/19 9:59 AM",
      "commitName": "f7df55f4a89ed2d75d874b32209647ef4f448875",
      "commitAuthor": "bibinchundatt",
      "commitDateOld": "15/03/19 4:20 PM",
      "commitNameOld": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 87.73,
      "commitsBetweenForRepo": 542,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,39 @@\n   public void startLocalizer(LocalizerStartContext ctx)\n       throws IOException, InterruptedException {\n     Path nmPrivateContainerTokensPath \u003d ctx.getNmPrivateContainerTokens();\n     InetSocketAddress nmAddr \u003d ctx.getNmAddr();\n     String user \u003d ctx.getUser();\n     String appId \u003d ctx.getAppId();\n     String locId \u003d ctx.getLocId();\n     LocalDirsHandlerService dirsHandler \u003d ctx.getDirsHandler();\n \n     List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n     List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n     \n     createUserLocalDirs(localDirs, user);\n     createUserCacheDirs(localDirs, user);\n     createAppDirs(localDirs, user, appId);\n     createAppLogDirs(appId, logDirs, user);\n \n     // randomly choose the local directory\n     Path appStorageDir \u003d getWorkingDir(localDirs, user, appId);\n \n     String tokenFn \u003d String.format(TOKEN_FILE_NAME_FMT, locId);\n     Path tokenDst \u003d new Path(appStorageDir, tokenFn);\n     copyFile(nmPrivateContainerTokensPath, tokenDst, user);\n-    LOG.info(\"Copying from \" + nmPrivateContainerTokensPath\n-        + \" to \" + tokenDst);\n+    LOG.info(\"Copying from {} to {}\", nmPrivateContainerTokensPath, tokenDst);\n \n \n     FileContext localizerFc \u003d\n         FileContext.getFileContext(lfs.getDefaultFileSystem(), getConf());\n     localizerFc.setUMask(lfs.getUMask());\n     localizerFc.setWorkingDirectory(appStorageDir);\n-    LOG.info(\"Localizer CWD set to \" + appStorageDir + \" \u003d \" \n-        + localizerFc.getWorkingDirectory());\n+    LOG.info(\"Localizer CWD set to {} \u003d {}\", appStorageDir,\n+        localizerFc.getWorkingDirectory());\n \n     ContainerLocalizer localizer \u003d\n         createContainerLocalizer(user, appId, locId, tokenFn, localDirs,\n             localizerFc);\n     // TODO: DO it over RPC for maintaining similarity?\n     localizer.runLocalization(nmAddr);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void startLocalizer(LocalizerStartContext ctx)\n      throws IOException, InterruptedException {\n    Path nmPrivateContainerTokensPath \u003d ctx.getNmPrivateContainerTokens();\n    InetSocketAddress nmAddr \u003d ctx.getNmAddr();\n    String user \u003d ctx.getUser();\n    String appId \u003d ctx.getAppId();\n    String locId \u003d ctx.getLocId();\n    LocalDirsHandlerService dirsHandler \u003d ctx.getDirsHandler();\n\n    List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n    List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n    \n    createUserLocalDirs(localDirs, user);\n    createUserCacheDirs(localDirs, user);\n    createAppDirs(localDirs, user, appId);\n    createAppLogDirs(appId, logDirs, user);\n\n    // randomly choose the local directory\n    Path appStorageDir \u003d getWorkingDir(localDirs, user, appId);\n\n    String tokenFn \u003d String.format(TOKEN_FILE_NAME_FMT, locId);\n    Path tokenDst \u003d new Path(appStorageDir, tokenFn);\n    copyFile(nmPrivateContainerTokensPath, tokenDst, user);\n    LOG.info(\"Copying from {} to {}\", nmPrivateContainerTokensPath, tokenDst);\n\n\n    FileContext localizerFc \u003d\n        FileContext.getFileContext(lfs.getDefaultFileSystem(), getConf());\n    localizerFc.setUMask(lfs.getUMask());\n    localizerFc.setWorkingDirectory(appStorageDir);\n    LOG.info(\"Localizer CWD set to {} \u003d {}\", appStorageDir,\n        localizerFc.getWorkingDirectory());\n\n    ContainerLocalizer localizer \u003d\n        createContainerLocalizer(user, appId, locId, tokenFn, localDirs,\n            localizerFc);\n    // TODO: DO it over RPC for maintaining similarity?\n    localizer.runLocalization(nmAddr);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DefaultContainerExecutor.java",
      "extendedDetails": {}
    },
    "21ec4bdaef4b68adbbf4f33a6f74494c074f803c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8672.  Improve token filename management for localization.\n            Contributed by Chandni Singh\n",
      "commitDate": "14/11/18 12:22 PM",
      "commitName": "21ec4bdaef4b68adbbf4f33a6f74494c074f803c",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "26/10/18 5:57 PM",
      "commitNameOld": "d07e873b7db6cb317eccb4768607c1afb505c99b",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 18.81,
      "commitsBetweenForRepo": 120,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   public void startLocalizer(LocalizerStartContext ctx)\n       throws IOException, InterruptedException {\n     Path nmPrivateContainerTokensPath \u003d ctx.getNmPrivateContainerTokens();\n     InetSocketAddress nmAddr \u003d ctx.getNmAddr();\n     String user \u003d ctx.getUser();\n     String appId \u003d ctx.getAppId();\n     String locId \u003d ctx.getLocId();\n     LocalDirsHandlerService dirsHandler \u003d ctx.getDirsHandler();\n \n     List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n     List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n     \n     createUserLocalDirs(localDirs, user);\n     createUserCacheDirs(localDirs, user);\n     createAppDirs(localDirs, user, appId);\n     createAppLogDirs(appId, logDirs, user);\n \n     // randomly choose the local directory\n     Path appStorageDir \u003d getWorkingDir(localDirs, user, appId);\n \n-    String tokenFn \u003d\n-        String.format(ContainerLocalizer.TOKEN_FILE_NAME_FMT, locId);\n+    String tokenFn \u003d String.format(TOKEN_FILE_NAME_FMT, locId);\n     Path tokenDst \u003d new Path(appStorageDir, tokenFn);\n     copyFile(nmPrivateContainerTokensPath, tokenDst, user);\n     LOG.info(\"Copying from \" + nmPrivateContainerTokensPath\n         + \" to \" + tokenDst);\n \n \n     FileContext localizerFc \u003d\n         FileContext.getFileContext(lfs.getDefaultFileSystem(), getConf());\n     localizerFc.setUMask(lfs.getUMask());\n     localizerFc.setWorkingDirectory(appStorageDir);\n     LOG.info(\"Localizer CWD set to \" + appStorageDir + \" \u003d \" \n         + localizerFc.getWorkingDirectory());\n \n     ContainerLocalizer localizer \u003d\n-        createContainerLocalizer(user, appId, locId, localDirs, localizerFc);\n+        createContainerLocalizer(user, appId, locId, tokenFn, localDirs,\n+            localizerFc);\n     // TODO: DO it over RPC for maintaining similarity?\n     localizer.runLocalization(nmAddr);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void startLocalizer(LocalizerStartContext ctx)\n      throws IOException, InterruptedException {\n    Path nmPrivateContainerTokensPath \u003d ctx.getNmPrivateContainerTokens();\n    InetSocketAddress nmAddr \u003d ctx.getNmAddr();\n    String user \u003d ctx.getUser();\n    String appId \u003d ctx.getAppId();\n    String locId \u003d ctx.getLocId();\n    LocalDirsHandlerService dirsHandler \u003d ctx.getDirsHandler();\n\n    List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n    List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n    \n    createUserLocalDirs(localDirs, user);\n    createUserCacheDirs(localDirs, user);\n    createAppDirs(localDirs, user, appId);\n    createAppLogDirs(appId, logDirs, user);\n\n    // randomly choose the local directory\n    Path appStorageDir \u003d getWorkingDir(localDirs, user, appId);\n\n    String tokenFn \u003d String.format(TOKEN_FILE_NAME_FMT, locId);\n    Path tokenDst \u003d new Path(appStorageDir, tokenFn);\n    copyFile(nmPrivateContainerTokensPath, tokenDst, user);\n    LOG.info(\"Copying from \" + nmPrivateContainerTokensPath\n        + \" to \" + tokenDst);\n\n\n    FileContext localizerFc \u003d\n        FileContext.getFileContext(lfs.getDefaultFileSystem(), getConf());\n    localizerFc.setUMask(lfs.getUMask());\n    localizerFc.setWorkingDirectory(appStorageDir);\n    LOG.info(\"Localizer CWD set to \" + appStorageDir + \" \u003d \" \n        + localizerFc.getWorkingDirectory());\n\n    ContainerLocalizer localizer \u003d\n        createContainerLocalizer(user, appId, locId, tokenFn, localDirs,\n            localizerFc);\n    // TODO: DO it over RPC for maintaining similarity?\n    localizer.runLocalization(nmAddr);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DefaultContainerExecutor.java",
      "extendedDetails": {}
    },
    "c380a22031a62e2d2fe533079e3780f06b069943": {
      "type": "Ybodychange",
      "commitMessage": "YARN-857. Localization failures should be available in container diagnostics. Contributed by  Vinod Kumar Vavilapalli.\n",
      "commitDate": "25/05/16 6:31 AM",
      "commitName": "c380a22031a62e2d2fe533079e3780f06b069943",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "29/04/16 9:25 AM",
      "commitNameOld": "9d4d30243b0fc9630da51a2c17b543ef671d035c",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 25.88,
      "commitsBetweenForRepo": 173,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   public void startLocalizer(LocalizerStartContext ctx)\n       throws IOException, InterruptedException {\n     Path nmPrivateContainerTokensPath \u003d ctx.getNmPrivateContainerTokens();\n     InetSocketAddress nmAddr \u003d ctx.getNmAddr();\n     String user \u003d ctx.getUser();\n     String appId \u003d ctx.getAppId();\n     String locId \u003d ctx.getLocId();\n     LocalDirsHandlerService dirsHandler \u003d ctx.getDirsHandler();\n \n     List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n     List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n     \n     createUserLocalDirs(localDirs, user);\n     createUserCacheDirs(localDirs, user);\n     createAppDirs(localDirs, user, appId);\n     createAppLogDirs(appId, logDirs, user);\n \n     // randomly choose the local directory\n     Path appStorageDir \u003d getWorkingDir(localDirs, user, appId);\n \n     String tokenFn \u003d String.format(ContainerLocalizer.TOKEN_FILE_NAME_FMT, locId);\n     Path tokenDst \u003d new Path(appStorageDir, tokenFn);\n     copyFile(nmPrivateContainerTokensPath, tokenDst, user);\n     LOG.info(\"Copying from \" + nmPrivateContainerTokensPath + \" to \" + tokenDst);\n \n \n     FileContext localizerFc \u003d FileContext.getFileContext(\n         lfs.getDefaultFileSystem(), getConf());\n     localizerFc.setUMask(lfs.getUMask());\n     localizerFc.setWorkingDirectory(appStorageDir);\n     LOG.info(\"Localizer CWD set to \" + appStorageDir + \" \u003d \" \n         + localizerFc.getWorkingDirectory());\n+\n     ContainerLocalizer localizer \u003d\n-        new ContainerLocalizer(localizerFc, user, appId, locId, \n-            getPaths(localDirs), RecordFactoryProvider.getRecordFactory(getConf()));\n+        createContainerLocalizer(user, appId, locId, localDirs, localizerFc);\n     // TODO: DO it over RPC for maintaining similarity?\n     localizer.runLocalization(nmAddr);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void startLocalizer(LocalizerStartContext ctx)\n      throws IOException, InterruptedException {\n    Path nmPrivateContainerTokensPath \u003d ctx.getNmPrivateContainerTokens();\n    InetSocketAddress nmAddr \u003d ctx.getNmAddr();\n    String user \u003d ctx.getUser();\n    String appId \u003d ctx.getAppId();\n    String locId \u003d ctx.getLocId();\n    LocalDirsHandlerService dirsHandler \u003d ctx.getDirsHandler();\n\n    List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n    List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n    \n    createUserLocalDirs(localDirs, user);\n    createUserCacheDirs(localDirs, user);\n    createAppDirs(localDirs, user, appId);\n    createAppLogDirs(appId, logDirs, user);\n\n    // randomly choose the local directory\n    Path appStorageDir \u003d getWorkingDir(localDirs, user, appId);\n\n    String tokenFn \u003d String.format(ContainerLocalizer.TOKEN_FILE_NAME_FMT, locId);\n    Path tokenDst \u003d new Path(appStorageDir, tokenFn);\n    copyFile(nmPrivateContainerTokensPath, tokenDst, user);\n    LOG.info(\"Copying from \" + nmPrivateContainerTokensPath + \" to \" + tokenDst);\n\n\n    FileContext localizerFc \u003d FileContext.getFileContext(\n        lfs.getDefaultFileSystem(), getConf());\n    localizerFc.setUMask(lfs.getUMask());\n    localizerFc.setWorkingDirectory(appStorageDir);\n    LOG.info(\"Localizer CWD set to \" + appStorageDir + \" \u003d \" \n        + localizerFc.getWorkingDirectory());\n\n    ContainerLocalizer localizer \u003d\n        createContainerLocalizer(user, appId, locId, localDirs, localizerFc);\n    // TODO: DO it over RPC for maintaining similarity?\n    localizer.runLocalization(nmAddr);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DefaultContainerExecutor.java",
      "extendedDetails": {}
    },
    "53fafcf061616516c24e2e2007a66a93d23d3e25": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-3684. Changed ContainerExecutor\u0027s primary lifecycle methods to use a more extensible mechanism of context objects. Contributed by Sidharta Seethana.\n",
      "commitDate": "21/05/15 3:50 PM",
      "commitName": "53fafcf061616516c24e2e2007a66a93d23d3e25",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3684. Changed ContainerExecutor\u0027s primary lifecycle methods to use a more extensible mechanism of context objects. Contributed by Sidharta Seethana.\n",
          "commitDate": "21/05/15 3:50 PM",
          "commitName": "53fafcf061616516c24e2e2007a66a93d23d3e25",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "06/03/15 2:18 PM",
          "commitNameOld": "21101c01f242439ec8ec40fb3a9ab1991ae0adc7",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 76.02,
          "commitsBetweenForRepo": 745,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,38 @@\n-  public void startLocalizer(Path nmPrivateContainerTokensPath,\n-      InetSocketAddress nmAddr, String user, String appId, String locId,\n-      LocalDirsHandlerService dirsHandler)\n+  public void startLocalizer(LocalizerStartContext ctx)\n       throws IOException, InterruptedException {\n+    Path nmPrivateContainerTokensPath \u003d ctx.getNmPrivateContainerTokens();\n+    InetSocketAddress nmAddr \u003d ctx.getNmAddr();\n+    String user \u003d ctx.getUser();\n+    String appId \u003d ctx.getAppId();\n+    String locId \u003d ctx.getLocId();\n+    LocalDirsHandlerService dirsHandler \u003d ctx.getDirsHandler();\n \n     List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n     List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n     \n     createUserLocalDirs(localDirs, user);\n     createUserCacheDirs(localDirs, user);\n     createAppDirs(localDirs, user, appId);\n     createAppLogDirs(appId, logDirs, user);\n \n     // randomly choose the local directory\n     Path appStorageDir \u003d getWorkingDir(localDirs, user, appId);\n \n     String tokenFn \u003d String.format(ContainerLocalizer.TOKEN_FILE_NAME_FMT, locId);\n     Path tokenDst \u003d new Path(appStorageDir, tokenFn);\n     copyFile(nmPrivateContainerTokensPath, tokenDst, user);\n     LOG.info(\"Copying from \" + nmPrivateContainerTokensPath + \" to \" + tokenDst);\n \n \n     FileContext localizerFc \u003d FileContext.getFileContext(\n         lfs.getDefaultFileSystem(), getConf());\n     localizerFc.setUMask(lfs.getUMask());\n     localizerFc.setWorkingDirectory(appStorageDir);\n     LOG.info(\"Localizer CWD set to \" + appStorageDir + \" \u003d \" \n         + localizerFc.getWorkingDirectory());\n     ContainerLocalizer localizer \u003d\n         new ContainerLocalizer(localizerFc, user, appId, locId, \n             getPaths(localDirs), RecordFactoryProvider.getRecordFactory(getConf()));\n     // TODO: DO it over RPC for maintaining similarity?\n     localizer.runLocalization(nmAddr);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void startLocalizer(LocalizerStartContext ctx)\n      throws IOException, InterruptedException {\n    Path nmPrivateContainerTokensPath \u003d ctx.getNmPrivateContainerTokens();\n    InetSocketAddress nmAddr \u003d ctx.getNmAddr();\n    String user \u003d ctx.getUser();\n    String appId \u003d ctx.getAppId();\n    String locId \u003d ctx.getLocId();\n    LocalDirsHandlerService dirsHandler \u003d ctx.getDirsHandler();\n\n    List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n    List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n    \n    createUserLocalDirs(localDirs, user);\n    createUserCacheDirs(localDirs, user);\n    createAppDirs(localDirs, user, appId);\n    createAppLogDirs(appId, logDirs, user);\n\n    // randomly choose the local directory\n    Path appStorageDir \u003d getWorkingDir(localDirs, user, appId);\n\n    String tokenFn \u003d String.format(ContainerLocalizer.TOKEN_FILE_NAME_FMT, locId);\n    Path tokenDst \u003d new Path(appStorageDir, tokenFn);\n    copyFile(nmPrivateContainerTokensPath, tokenDst, user);\n    LOG.info(\"Copying from \" + nmPrivateContainerTokensPath + \" to \" + tokenDst);\n\n\n    FileContext localizerFc \u003d FileContext.getFileContext(\n        lfs.getDefaultFileSystem(), getConf());\n    localizerFc.setUMask(lfs.getUMask());\n    localizerFc.setWorkingDirectory(appStorageDir);\n    LOG.info(\"Localizer CWD set to \" + appStorageDir + \" \u003d \" \n        + localizerFc.getWorkingDirectory());\n    ContainerLocalizer localizer \u003d\n        new ContainerLocalizer(localizerFc, user, appId, locId, \n            getPaths(localDirs), RecordFactoryProvider.getRecordFactory(getConf()));\n    // TODO: DO it over RPC for maintaining similarity?\n    localizer.runLocalization(nmAddr);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DefaultContainerExecutor.java",
          "extendedDetails": {
            "oldValue": "[nmPrivateContainerTokensPath-Path, nmAddr-InetSocketAddress, user-String, appId-String, locId-String, dirsHandler-LocalDirsHandlerService]",
            "newValue": "[ctx-LocalizerStartContext]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3684. Changed ContainerExecutor\u0027s primary lifecycle methods to use a more extensible mechanism of context objects. Contributed by Sidharta Seethana.\n",
          "commitDate": "21/05/15 3:50 PM",
          "commitName": "53fafcf061616516c24e2e2007a66a93d23d3e25",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "06/03/15 2:18 PM",
          "commitNameOld": "21101c01f242439ec8ec40fb3a9ab1991ae0adc7",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 76.02,
          "commitsBetweenForRepo": 745,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,38 @@\n-  public void startLocalizer(Path nmPrivateContainerTokensPath,\n-      InetSocketAddress nmAddr, String user, String appId, String locId,\n-      LocalDirsHandlerService dirsHandler)\n+  public void startLocalizer(LocalizerStartContext ctx)\n       throws IOException, InterruptedException {\n+    Path nmPrivateContainerTokensPath \u003d ctx.getNmPrivateContainerTokens();\n+    InetSocketAddress nmAddr \u003d ctx.getNmAddr();\n+    String user \u003d ctx.getUser();\n+    String appId \u003d ctx.getAppId();\n+    String locId \u003d ctx.getLocId();\n+    LocalDirsHandlerService dirsHandler \u003d ctx.getDirsHandler();\n \n     List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n     List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n     \n     createUserLocalDirs(localDirs, user);\n     createUserCacheDirs(localDirs, user);\n     createAppDirs(localDirs, user, appId);\n     createAppLogDirs(appId, logDirs, user);\n \n     // randomly choose the local directory\n     Path appStorageDir \u003d getWorkingDir(localDirs, user, appId);\n \n     String tokenFn \u003d String.format(ContainerLocalizer.TOKEN_FILE_NAME_FMT, locId);\n     Path tokenDst \u003d new Path(appStorageDir, tokenFn);\n     copyFile(nmPrivateContainerTokensPath, tokenDst, user);\n     LOG.info(\"Copying from \" + nmPrivateContainerTokensPath + \" to \" + tokenDst);\n \n \n     FileContext localizerFc \u003d FileContext.getFileContext(\n         lfs.getDefaultFileSystem(), getConf());\n     localizerFc.setUMask(lfs.getUMask());\n     localizerFc.setWorkingDirectory(appStorageDir);\n     LOG.info(\"Localizer CWD set to \" + appStorageDir + \" \u003d \" \n         + localizerFc.getWorkingDirectory());\n     ContainerLocalizer localizer \u003d\n         new ContainerLocalizer(localizerFc, user, appId, locId, \n             getPaths(localDirs), RecordFactoryProvider.getRecordFactory(getConf()));\n     // TODO: DO it over RPC for maintaining similarity?\n     localizer.runLocalization(nmAddr);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void startLocalizer(LocalizerStartContext ctx)\n      throws IOException, InterruptedException {\n    Path nmPrivateContainerTokensPath \u003d ctx.getNmPrivateContainerTokens();\n    InetSocketAddress nmAddr \u003d ctx.getNmAddr();\n    String user \u003d ctx.getUser();\n    String appId \u003d ctx.getAppId();\n    String locId \u003d ctx.getLocId();\n    LocalDirsHandlerService dirsHandler \u003d ctx.getDirsHandler();\n\n    List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n    List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n    \n    createUserLocalDirs(localDirs, user);\n    createUserCacheDirs(localDirs, user);\n    createAppDirs(localDirs, user, appId);\n    createAppLogDirs(appId, logDirs, user);\n\n    // randomly choose the local directory\n    Path appStorageDir \u003d getWorkingDir(localDirs, user, appId);\n\n    String tokenFn \u003d String.format(ContainerLocalizer.TOKEN_FILE_NAME_FMT, locId);\n    Path tokenDst \u003d new Path(appStorageDir, tokenFn);\n    copyFile(nmPrivateContainerTokensPath, tokenDst, user);\n    LOG.info(\"Copying from \" + nmPrivateContainerTokensPath + \" to \" + tokenDst);\n\n\n    FileContext localizerFc \u003d FileContext.getFileContext(\n        lfs.getDefaultFileSystem(), getConf());\n    localizerFc.setUMask(lfs.getUMask());\n    localizerFc.setWorkingDirectory(appStorageDir);\n    LOG.info(\"Localizer CWD set to \" + appStorageDir + \" \u003d \" \n        + localizerFc.getWorkingDirectory());\n    ContainerLocalizer localizer \u003d\n        new ContainerLocalizer(localizerFc, user, appId, locId, \n            getPaths(localDirs), RecordFactoryProvider.getRecordFactory(getConf()));\n    // TODO: DO it over RPC for maintaining similarity?\n    localizer.runLocalization(nmAddr);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DefaultContainerExecutor.java",
          "extendedDetails": {}
        }
      ]
    },
    "6157ace5475fff8d2513fd3cd99134b532b0b406": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-2730. DefaultContainerExecutor runs only one localizer at a time. Contributed by Siqi Li\n",
      "commitDate": "03/11/14 12:37 PM",
      "commitName": "6157ace5475fff8d2513fd3cd99134b532b0b406",
      "commitAuthor": "Jason Lowe",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-2730. DefaultContainerExecutor runs only one localizer at a time. Contributed by Siqi Li\n",
          "commitDate": "03/11/14 12:37 PM",
          "commitName": "6157ace5475fff8d2513fd3cd99134b532b0b406",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "22/10/14 3:57 PM",
          "commitNameOld": "3b12fd6cfbf4cc91ef8e8616c7aafa9de006cde5",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 11.9,
          "commitsBetweenForRepo": 115,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,34 @@\n-  public synchronized void startLocalizer(Path nmPrivateContainerTokensPath,\n+  public void startLocalizer(Path nmPrivateContainerTokensPath,\n       InetSocketAddress nmAddr, String user, String appId, String locId,\n       LocalDirsHandlerService dirsHandler)\n       throws IOException, InterruptedException {\n \n     List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n     List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n     \n-    ContainerLocalizer localizer \u003d\n-        new ContainerLocalizer(lfs, user, appId, locId, getPaths(localDirs),\n-            RecordFactoryProvider.getRecordFactory(getConf()));\n-    \n     createUserLocalDirs(localDirs, user);\n     createUserCacheDirs(localDirs, user);\n     createAppDirs(localDirs, user, appId);\n     createAppLogDirs(appId, logDirs, user);\n \n     // randomly choose the local directory\n     Path appStorageDir \u003d getWorkingDir(localDirs, user, appId);\n \n     String tokenFn \u003d String.format(ContainerLocalizer.TOKEN_FILE_NAME_FMT, locId);\n     Path tokenDst \u003d new Path(appStorageDir, tokenFn);\n     copyFile(nmPrivateContainerTokensPath, tokenDst, user);\n     LOG.info(\"Copying from \" + nmPrivateContainerTokensPath + \" to \" + tokenDst);\n-    lfs.setWorkingDirectory(appStorageDir);\n-    LOG.info(\"CWD set to \" + appStorageDir + \" \u003d \" + lfs.getWorkingDirectory());\n+\n+\n+    FileContext localizerFc \u003d FileContext.getFileContext(\n+        lfs.getDefaultFileSystem(), getConf());\n+    localizerFc.setUMask(lfs.getUMask());\n+    localizerFc.setWorkingDirectory(appStorageDir);\n+    LOG.info(\"Localizer CWD set to \" + appStorageDir + \" \u003d \" \n+        + localizerFc.getWorkingDirectory());\n+    ContainerLocalizer localizer \u003d\n+        new ContainerLocalizer(localizerFc, user, appId, locId, \n+            getPaths(localDirs), RecordFactoryProvider.getRecordFactory(getConf()));\n     // TODO: DO it over RPC for maintaining similarity?\n     localizer.runLocalization(nmAddr);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void startLocalizer(Path nmPrivateContainerTokensPath,\n      InetSocketAddress nmAddr, String user, String appId, String locId,\n      LocalDirsHandlerService dirsHandler)\n      throws IOException, InterruptedException {\n\n    List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n    List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n    \n    createUserLocalDirs(localDirs, user);\n    createUserCacheDirs(localDirs, user);\n    createAppDirs(localDirs, user, appId);\n    createAppLogDirs(appId, logDirs, user);\n\n    // randomly choose the local directory\n    Path appStorageDir \u003d getWorkingDir(localDirs, user, appId);\n\n    String tokenFn \u003d String.format(ContainerLocalizer.TOKEN_FILE_NAME_FMT, locId);\n    Path tokenDst \u003d new Path(appStorageDir, tokenFn);\n    copyFile(nmPrivateContainerTokensPath, tokenDst, user);\n    LOG.info(\"Copying from \" + nmPrivateContainerTokensPath + \" to \" + tokenDst);\n\n\n    FileContext localizerFc \u003d FileContext.getFileContext(\n        lfs.getDefaultFileSystem(), getConf());\n    localizerFc.setUMask(lfs.getUMask());\n    localizerFc.setWorkingDirectory(appStorageDir);\n    LOG.info(\"Localizer CWD set to \" + appStorageDir + \" \u003d \" \n        + localizerFc.getWorkingDirectory());\n    ContainerLocalizer localizer \u003d\n        new ContainerLocalizer(localizerFc, user, appId, locId, \n            getPaths(localDirs), RecordFactoryProvider.getRecordFactory(getConf()));\n    // TODO: DO it over RPC for maintaining similarity?\n    localizer.runLocalization(nmAddr);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DefaultContainerExecutor.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2730. DefaultContainerExecutor runs only one localizer at a time. Contributed by Siqi Li\n",
          "commitDate": "03/11/14 12:37 PM",
          "commitName": "6157ace5475fff8d2513fd3cd99134b532b0b406",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "22/10/14 3:57 PM",
          "commitNameOld": "3b12fd6cfbf4cc91ef8e8616c7aafa9de006cde5",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 11.9,
          "commitsBetweenForRepo": 115,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,34 @@\n-  public synchronized void startLocalizer(Path nmPrivateContainerTokensPath,\n+  public void startLocalizer(Path nmPrivateContainerTokensPath,\n       InetSocketAddress nmAddr, String user, String appId, String locId,\n       LocalDirsHandlerService dirsHandler)\n       throws IOException, InterruptedException {\n \n     List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n     List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n     \n-    ContainerLocalizer localizer \u003d\n-        new ContainerLocalizer(lfs, user, appId, locId, getPaths(localDirs),\n-            RecordFactoryProvider.getRecordFactory(getConf()));\n-    \n     createUserLocalDirs(localDirs, user);\n     createUserCacheDirs(localDirs, user);\n     createAppDirs(localDirs, user, appId);\n     createAppLogDirs(appId, logDirs, user);\n \n     // randomly choose the local directory\n     Path appStorageDir \u003d getWorkingDir(localDirs, user, appId);\n \n     String tokenFn \u003d String.format(ContainerLocalizer.TOKEN_FILE_NAME_FMT, locId);\n     Path tokenDst \u003d new Path(appStorageDir, tokenFn);\n     copyFile(nmPrivateContainerTokensPath, tokenDst, user);\n     LOG.info(\"Copying from \" + nmPrivateContainerTokensPath + \" to \" + tokenDst);\n-    lfs.setWorkingDirectory(appStorageDir);\n-    LOG.info(\"CWD set to \" + appStorageDir + \" \u003d \" + lfs.getWorkingDirectory());\n+\n+\n+    FileContext localizerFc \u003d FileContext.getFileContext(\n+        lfs.getDefaultFileSystem(), getConf());\n+    localizerFc.setUMask(lfs.getUMask());\n+    localizerFc.setWorkingDirectory(appStorageDir);\n+    LOG.info(\"Localizer CWD set to \" + appStorageDir + \" \u003d \" \n+        + localizerFc.getWorkingDirectory());\n+    ContainerLocalizer localizer \u003d\n+        new ContainerLocalizer(localizerFc, user, appId, locId, \n+            getPaths(localDirs), RecordFactoryProvider.getRecordFactory(getConf()));\n     // TODO: DO it over RPC for maintaining similarity?\n     localizer.runLocalization(nmAddr);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void startLocalizer(Path nmPrivateContainerTokensPath,\n      InetSocketAddress nmAddr, String user, String appId, String locId,\n      LocalDirsHandlerService dirsHandler)\n      throws IOException, InterruptedException {\n\n    List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n    List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n    \n    createUserLocalDirs(localDirs, user);\n    createUserCacheDirs(localDirs, user);\n    createAppDirs(localDirs, user, appId);\n    createAppLogDirs(appId, logDirs, user);\n\n    // randomly choose the local directory\n    Path appStorageDir \u003d getWorkingDir(localDirs, user, appId);\n\n    String tokenFn \u003d String.format(ContainerLocalizer.TOKEN_FILE_NAME_FMT, locId);\n    Path tokenDst \u003d new Path(appStorageDir, tokenFn);\n    copyFile(nmPrivateContainerTokensPath, tokenDst, user);\n    LOG.info(\"Copying from \" + nmPrivateContainerTokensPath + \" to \" + tokenDst);\n\n\n    FileContext localizerFc \u003d FileContext.getFileContext(\n        lfs.getDefaultFileSystem(), getConf());\n    localizerFc.setUMask(lfs.getUMask());\n    localizerFc.setWorkingDirectory(appStorageDir);\n    LOG.info(\"Localizer CWD set to \" + appStorageDir + \" \u003d \" \n        + localizerFc.getWorkingDirectory());\n    ContainerLocalizer localizer \u003d\n        new ContainerLocalizer(localizerFc, user, appId, locId, \n            getPaths(localDirs), RecordFactoryProvider.getRecordFactory(getConf()));\n    // TODO: DO it over RPC for maintaining similarity?\n    localizer.runLocalization(nmAddr);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DefaultContainerExecutor.java",
          "extendedDetails": {}
        }
      ]
    },
    "3b12fd6cfbf4cc91ef8e8616c7aafa9de006cde5": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-2198. Remove the need to run NodeManager as privileged account for Windows Secure Container Executor. Contributed by Remus Rusanu\n",
      "commitDate": "22/10/14 3:57 PM",
      "commitName": "3b12fd6cfbf4cc91ef8e8616c7aafa9de006cde5",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-2198. Remove the need to run NodeManager as privileged account for Windows Secure Container Executor. Contributed by Remus Rusanu\n",
          "commitDate": "22/10/14 3:57 PM",
          "commitName": "3b12fd6cfbf4cc91ef8e8616c7aafa9de006cde5",
          "commitAuthor": "Jian He",
          "commitDateOld": "16/10/14 6:14 PM",
          "commitNameOld": "0fd0ebae645e671699f6a6a56a012ebe6dfb5b2a",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 5.91,
          "commitsBetweenForRepo": 46,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,29 @@\n   public synchronized void startLocalizer(Path nmPrivateContainerTokensPath,\n       InetSocketAddress nmAddr, String user, String appId, String locId,\n-      List\u003cString\u003e localDirs, List\u003cString\u003e logDirs)\n+      LocalDirsHandlerService dirsHandler)\n       throws IOException, InterruptedException {\n \n+    List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n+    List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n+    \n     ContainerLocalizer localizer \u003d\n         new ContainerLocalizer(lfs, user, appId, locId, getPaths(localDirs),\n             RecordFactoryProvider.getRecordFactory(getConf()));\n-\n+    \n     createUserLocalDirs(localDirs, user);\n     createUserCacheDirs(localDirs, user);\n     createAppDirs(localDirs, user, appId);\n     createAppLogDirs(appId, logDirs, user);\n \n     // randomly choose the local directory\n     Path appStorageDir \u003d getWorkingDir(localDirs, user, appId);\n \n     String tokenFn \u003d String.format(ContainerLocalizer.TOKEN_FILE_NAME_FMT, locId);\n     Path tokenDst \u003d new Path(appStorageDir, tokenFn);\n     copyFile(nmPrivateContainerTokensPath, tokenDst, user);\n     LOG.info(\"Copying from \" + nmPrivateContainerTokensPath + \" to \" + tokenDst);\n     lfs.setWorkingDirectory(appStorageDir);\n     LOG.info(\"CWD set to \" + appStorageDir + \" \u003d \" + lfs.getWorkingDirectory());\n     // TODO: DO it over RPC for maintaining similarity?\n     localizer.runLocalization(nmAddr);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void startLocalizer(Path nmPrivateContainerTokensPath,\n      InetSocketAddress nmAddr, String user, String appId, String locId,\n      LocalDirsHandlerService dirsHandler)\n      throws IOException, InterruptedException {\n\n    List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n    List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n    \n    ContainerLocalizer localizer \u003d\n        new ContainerLocalizer(lfs, user, appId, locId, getPaths(localDirs),\n            RecordFactoryProvider.getRecordFactory(getConf()));\n    \n    createUserLocalDirs(localDirs, user);\n    createUserCacheDirs(localDirs, user);\n    createAppDirs(localDirs, user, appId);\n    createAppLogDirs(appId, logDirs, user);\n\n    // randomly choose the local directory\n    Path appStorageDir \u003d getWorkingDir(localDirs, user, appId);\n\n    String tokenFn \u003d String.format(ContainerLocalizer.TOKEN_FILE_NAME_FMT, locId);\n    Path tokenDst \u003d new Path(appStorageDir, tokenFn);\n    copyFile(nmPrivateContainerTokensPath, tokenDst, user);\n    LOG.info(\"Copying from \" + nmPrivateContainerTokensPath + \" to \" + tokenDst);\n    lfs.setWorkingDirectory(appStorageDir);\n    LOG.info(\"CWD set to \" + appStorageDir + \" \u003d \" + lfs.getWorkingDirectory());\n    // TODO: DO it over RPC for maintaining similarity?\n    localizer.runLocalization(nmAddr);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DefaultContainerExecutor.java",
          "extendedDetails": {
            "oldValue": "[nmPrivateContainerTokensPath-Path, nmAddr-InetSocketAddress, user-String, appId-String, locId-String, localDirs-List\u003cString\u003e, logDirs-List\u003cString\u003e]",
            "newValue": "[nmPrivateContainerTokensPath-Path, nmAddr-InetSocketAddress, user-String, appId-String, locId-String, dirsHandler-LocalDirsHandlerService]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2198. Remove the need to run NodeManager as privileged account for Windows Secure Container Executor. Contributed by Remus Rusanu\n",
          "commitDate": "22/10/14 3:57 PM",
          "commitName": "3b12fd6cfbf4cc91ef8e8616c7aafa9de006cde5",
          "commitAuthor": "Jian He",
          "commitDateOld": "16/10/14 6:14 PM",
          "commitNameOld": "0fd0ebae645e671699f6a6a56a012ebe6dfb5b2a",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 5.91,
          "commitsBetweenForRepo": 46,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,29 @@\n   public synchronized void startLocalizer(Path nmPrivateContainerTokensPath,\n       InetSocketAddress nmAddr, String user, String appId, String locId,\n-      List\u003cString\u003e localDirs, List\u003cString\u003e logDirs)\n+      LocalDirsHandlerService dirsHandler)\n       throws IOException, InterruptedException {\n \n+    List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n+    List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n+    \n     ContainerLocalizer localizer \u003d\n         new ContainerLocalizer(lfs, user, appId, locId, getPaths(localDirs),\n             RecordFactoryProvider.getRecordFactory(getConf()));\n-\n+    \n     createUserLocalDirs(localDirs, user);\n     createUserCacheDirs(localDirs, user);\n     createAppDirs(localDirs, user, appId);\n     createAppLogDirs(appId, logDirs, user);\n \n     // randomly choose the local directory\n     Path appStorageDir \u003d getWorkingDir(localDirs, user, appId);\n \n     String tokenFn \u003d String.format(ContainerLocalizer.TOKEN_FILE_NAME_FMT, locId);\n     Path tokenDst \u003d new Path(appStorageDir, tokenFn);\n     copyFile(nmPrivateContainerTokensPath, tokenDst, user);\n     LOG.info(\"Copying from \" + nmPrivateContainerTokensPath + \" to \" + tokenDst);\n     lfs.setWorkingDirectory(appStorageDir);\n     LOG.info(\"CWD set to \" + appStorageDir + \" \u003d \" + lfs.getWorkingDirectory());\n     // TODO: DO it over RPC for maintaining similarity?\n     localizer.runLocalization(nmAddr);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void startLocalizer(Path nmPrivateContainerTokensPath,\n      InetSocketAddress nmAddr, String user, String appId, String locId,\n      LocalDirsHandlerService dirsHandler)\n      throws IOException, InterruptedException {\n\n    List\u003cString\u003e localDirs \u003d dirsHandler.getLocalDirs();\n    List\u003cString\u003e logDirs \u003d dirsHandler.getLogDirs();\n    \n    ContainerLocalizer localizer \u003d\n        new ContainerLocalizer(lfs, user, appId, locId, getPaths(localDirs),\n            RecordFactoryProvider.getRecordFactory(getConf()));\n    \n    createUserLocalDirs(localDirs, user);\n    createUserCacheDirs(localDirs, user);\n    createAppDirs(localDirs, user, appId);\n    createAppLogDirs(appId, logDirs, user);\n\n    // randomly choose the local directory\n    Path appStorageDir \u003d getWorkingDir(localDirs, user, appId);\n\n    String tokenFn \u003d String.format(ContainerLocalizer.TOKEN_FILE_NAME_FMT, locId);\n    Path tokenDst \u003d new Path(appStorageDir, tokenFn);\n    copyFile(nmPrivateContainerTokensPath, tokenDst, user);\n    LOG.info(\"Copying from \" + nmPrivateContainerTokensPath + \" to \" + tokenDst);\n    lfs.setWorkingDirectory(appStorageDir);\n    LOG.info(\"CWD set to \" + appStorageDir + \" \u003d \" + lfs.getWorkingDirectory());\n    // TODO: DO it over RPC for maintaining similarity?\n    localizer.runLocalization(nmAddr);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DefaultContainerExecutor.java",
          "extendedDetails": {}
        }
      ]
    },
    "cc93e7e683fa74eb1a7aa2b357a36667bd21086a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2566. DefaultContainerExecutor should pick a working directory randomly. (Zhihai Xu via kasha)\n",
      "commitDate": "13/10/14 4:32 PM",
      "commitName": "cc93e7e683fa74eb1a7aa2b357a36667bd21086a",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "01/10/14 10:14 AM",
      "commitNameOld": "ba7f31c2ee8d23ecb183f88920ef06053c0b9769",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 12.26,
      "commitsBetweenForRepo": 110,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   public synchronized void startLocalizer(Path nmPrivateContainerTokensPath,\n       InetSocketAddress nmAddr, String user, String appId, String locId,\n       List\u003cString\u003e localDirs, List\u003cString\u003e logDirs)\n       throws IOException, InterruptedException {\n \n     ContainerLocalizer localizer \u003d\n         new ContainerLocalizer(lfs, user, appId, locId, getPaths(localDirs),\n             RecordFactoryProvider.getRecordFactory(getConf()));\n \n     createUserLocalDirs(localDirs, user);\n     createUserCacheDirs(localDirs, user);\n     createAppDirs(localDirs, user, appId);\n     createAppLogDirs(appId, logDirs, user);\n \n-    // TODO: Why pick first app dir. The same in LCE why not random?\n-    Path appStorageDir \u003d getFirstApplicationDir(localDirs, user, appId);\n+    // randomly choose the local directory\n+    Path appStorageDir \u003d getWorkingDir(localDirs, user, appId);\n \n     String tokenFn \u003d String.format(ContainerLocalizer.TOKEN_FILE_NAME_FMT, locId);\n     Path tokenDst \u003d new Path(appStorageDir, tokenFn);\n     copyFile(nmPrivateContainerTokensPath, tokenDst, user);\n     LOG.info(\"Copying from \" + nmPrivateContainerTokensPath + \" to \" + tokenDst);\n     lfs.setWorkingDirectory(appStorageDir);\n     LOG.info(\"CWD set to \" + appStorageDir + \" \u003d \" + lfs.getWorkingDirectory());\n     // TODO: DO it over RPC for maintaining similarity?\n     localizer.runLocalization(nmAddr);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void startLocalizer(Path nmPrivateContainerTokensPath,\n      InetSocketAddress nmAddr, String user, String appId, String locId,\n      List\u003cString\u003e localDirs, List\u003cString\u003e logDirs)\n      throws IOException, InterruptedException {\n\n    ContainerLocalizer localizer \u003d\n        new ContainerLocalizer(lfs, user, appId, locId, getPaths(localDirs),\n            RecordFactoryProvider.getRecordFactory(getConf()));\n\n    createUserLocalDirs(localDirs, user);\n    createUserCacheDirs(localDirs, user);\n    createAppDirs(localDirs, user, appId);\n    createAppLogDirs(appId, logDirs, user);\n\n    // randomly choose the local directory\n    Path appStorageDir \u003d getWorkingDir(localDirs, user, appId);\n\n    String tokenFn \u003d String.format(ContainerLocalizer.TOKEN_FILE_NAME_FMT, locId);\n    Path tokenDst \u003d new Path(appStorageDir, tokenFn);\n    copyFile(nmPrivateContainerTokensPath, tokenDst, user);\n    LOG.info(\"Copying from \" + nmPrivateContainerTokensPath + \" to \" + tokenDst);\n    lfs.setWorkingDirectory(appStorageDir);\n    LOG.info(\"CWD set to \" + appStorageDir + \" \u003d \" + lfs.getWorkingDirectory());\n    // TODO: DO it over RPC for maintaining similarity?\n    localizer.runLocalization(nmAddr);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DefaultContainerExecutor.java",
      "extendedDetails": {}
    },
    "ba7f31c2ee8d23ecb183f88920ef06053c0b9769": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1972. Added a secure container-executor for Windows. Contributed by Remus Rusanu.\n",
      "commitDate": "01/10/14 10:14 AM",
      "commitName": "ba7f31c2ee8d23ecb183f88920ef06053c0b9769",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "12/08/14 3:56 AM",
      "commitNameOld": "c2febdcbaa12078db42403fe8fd74180fb58a84b",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 50.26,
      "commitsBetweenForRepo": 539,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   public synchronized void startLocalizer(Path nmPrivateContainerTokensPath,\n       InetSocketAddress nmAddr, String user, String appId, String locId,\n       List\u003cString\u003e localDirs, List\u003cString\u003e logDirs)\n       throws IOException, InterruptedException {\n \n     ContainerLocalizer localizer \u003d\n         new ContainerLocalizer(lfs, user, appId, locId, getPaths(localDirs),\n             RecordFactoryProvider.getRecordFactory(getConf()));\n \n     createUserLocalDirs(localDirs, user);\n     createUserCacheDirs(localDirs, user);\n     createAppDirs(localDirs, user, appId);\n-    createAppLogDirs(appId, logDirs);\n+    createAppLogDirs(appId, logDirs, user);\n \n     // TODO: Why pick first app dir. The same in LCE why not random?\n     Path appStorageDir \u003d getFirstApplicationDir(localDirs, user, appId);\n \n     String tokenFn \u003d String.format(ContainerLocalizer.TOKEN_FILE_NAME_FMT, locId);\n     Path tokenDst \u003d new Path(appStorageDir, tokenFn);\n-    lfs.util().copy(nmPrivateContainerTokensPath, tokenDst);\n+    copyFile(nmPrivateContainerTokensPath, tokenDst, user);\n     LOG.info(\"Copying from \" + nmPrivateContainerTokensPath + \" to \" + tokenDst);\n     lfs.setWorkingDirectory(appStorageDir);\n     LOG.info(\"CWD set to \" + appStorageDir + \" \u003d \" + lfs.getWorkingDirectory());\n     // TODO: DO it over RPC for maintaining similarity?\n     localizer.runLocalization(nmAddr);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void startLocalizer(Path nmPrivateContainerTokensPath,\n      InetSocketAddress nmAddr, String user, String appId, String locId,\n      List\u003cString\u003e localDirs, List\u003cString\u003e logDirs)\n      throws IOException, InterruptedException {\n\n    ContainerLocalizer localizer \u003d\n        new ContainerLocalizer(lfs, user, appId, locId, getPaths(localDirs),\n            RecordFactoryProvider.getRecordFactory(getConf()));\n\n    createUserLocalDirs(localDirs, user);\n    createUserCacheDirs(localDirs, user);\n    createAppDirs(localDirs, user, appId);\n    createAppLogDirs(appId, logDirs, user);\n\n    // TODO: Why pick first app dir. The same in LCE why not random?\n    Path appStorageDir \u003d getFirstApplicationDir(localDirs, user, appId);\n\n    String tokenFn \u003d String.format(ContainerLocalizer.TOKEN_FILE_NAME_FMT, locId);\n    Path tokenDst \u003d new Path(appStorageDir, tokenFn);\n    copyFile(nmPrivateContainerTokensPath, tokenDst, user);\n    LOG.info(\"Copying from \" + nmPrivateContainerTokensPath + \" to \" + tokenDst);\n    lfs.setWorkingDirectory(appStorageDir);\n    LOG.info(\"CWD set to \" + appStorageDir + \" \u003d \" + lfs.getWorkingDirectory());\n    // TODO: DO it over RPC for maintaining similarity?\n    localizer.runLocalization(nmAddr);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DefaultContainerExecutor.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized void startLocalizer(Path nmPrivateContainerTokensPath,\n      InetSocketAddress nmAddr, String user, String appId, String locId,\n      List\u003cString\u003e localDirs, List\u003cString\u003e logDirs)\n      throws IOException, InterruptedException {\n\n    ContainerLocalizer localizer \u003d\n        new ContainerLocalizer(lfs, user, appId, locId, getPaths(localDirs),\n            RecordFactoryProvider.getRecordFactory(getConf()));\n\n    createUserLocalDirs(localDirs, user);\n    createUserCacheDirs(localDirs, user);\n    createAppDirs(localDirs, user, appId);\n    createAppLogDirs(appId, logDirs);\n\n    // TODO: Why pick first app dir. The same in LCE why not random?\n    Path appStorageDir \u003d getFirstApplicationDir(localDirs, user, appId);\n\n    String tokenFn \u003d String.format(ContainerLocalizer.TOKEN_FILE_NAME_FMT, locId);\n    Path tokenDst \u003d new Path(appStorageDir, tokenFn);\n    lfs.util().copy(nmPrivateContainerTokensPath, tokenDst);\n    LOG.info(\"Copying from \" + nmPrivateContainerTokensPath + \" to \" + tokenDst);\n    lfs.setWorkingDirectory(appStorageDir);\n    LOG.info(\"CWD set to \" + appStorageDir + \" \u003d \" + lfs.getWorkingDirectory());\n    // TODO: DO it over RPC for maintaining similarity?\n    localizer.runLocalization(nmAddr);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DefaultContainerExecutor.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DefaultContainerExecutor.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DefaultContainerExecutor.java"
      }
    },
    "f611e1d1b116613a8fce0abc400e54e155d295e9": {
      "type": "Ymodifierchange",
      "commitMessage": "MAPREDUCE-3537. Fix race condition in DefaultContainerExecutor which led to container localization occuring in wrong directories.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1213575 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/12/11 10:33 PM",
      "commitName": "f611e1d1b116613a8fce0abc400e54e155d295e9",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "29/11/11 3:17 PM",
      "commitNameOld": "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 13.3,
      "commitsBetweenForRepo": 75,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n-  public void startLocalizer(Path nmPrivateContainerTokensPath,\n+  public synchronized void startLocalizer(Path nmPrivateContainerTokensPath,\n       InetSocketAddress nmAddr, String user, String appId, String locId,\n       List\u003cString\u003e localDirs, List\u003cString\u003e logDirs)\n       throws IOException, InterruptedException {\n \n     ContainerLocalizer localizer \u003d\n         new ContainerLocalizer(lfs, user, appId, locId, getPaths(localDirs),\n             RecordFactoryProvider.getRecordFactory(getConf()));\n \n     createUserLocalDirs(localDirs, user);\n     createUserCacheDirs(localDirs, user);\n     createAppDirs(localDirs, user, appId);\n     createAppLogDirs(appId, logDirs);\n \n     // TODO: Why pick first app dir. The same in LCE why not random?\n     Path appStorageDir \u003d getFirstApplicationDir(localDirs, user, appId);\n \n     String tokenFn \u003d String.format(ContainerLocalizer.TOKEN_FILE_NAME_FMT, locId);\n     Path tokenDst \u003d new Path(appStorageDir, tokenFn);\n     lfs.util().copy(nmPrivateContainerTokensPath, tokenDst);\n     LOG.info(\"Copying from \" + nmPrivateContainerTokensPath + \" to \" + tokenDst);\n     lfs.setWorkingDirectory(appStorageDir);\n     LOG.info(\"CWD set to \" + appStorageDir + \" \u003d \" + lfs.getWorkingDirectory());\n     // TODO: DO it over RPC for maintaining similarity?\n     localizer.runLocalization(nmAddr);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void startLocalizer(Path nmPrivateContainerTokensPath,\n      InetSocketAddress nmAddr, String user, String appId, String locId,\n      List\u003cString\u003e localDirs, List\u003cString\u003e logDirs)\n      throws IOException, InterruptedException {\n\n    ContainerLocalizer localizer \u003d\n        new ContainerLocalizer(lfs, user, appId, locId, getPaths(localDirs),\n            RecordFactoryProvider.getRecordFactory(getConf()));\n\n    createUserLocalDirs(localDirs, user);\n    createUserCacheDirs(localDirs, user);\n    createAppDirs(localDirs, user, appId);\n    createAppLogDirs(appId, logDirs);\n\n    // TODO: Why pick first app dir. The same in LCE why not random?\n    Path appStorageDir \u003d getFirstApplicationDir(localDirs, user, appId);\n\n    String tokenFn \u003d String.format(ContainerLocalizer.TOKEN_FILE_NAME_FMT, locId);\n    Path tokenDst \u003d new Path(appStorageDir, tokenFn);\n    lfs.util().copy(nmPrivateContainerTokensPath, tokenDst);\n    LOG.info(\"Copying from \" + nmPrivateContainerTokensPath + \" to \" + tokenDst);\n    lfs.setWorkingDirectory(appStorageDir);\n    LOG.info(\"CWD set to \" + appStorageDir + \" \u003d \" + lfs.getWorkingDirectory());\n    // TODO: DO it over RPC for maintaining similarity?\n    localizer.runLocalization(nmAddr);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DefaultContainerExecutor.java",
      "extendedDetails": {
        "oldValue": "[public]",
        "newValue": "[public, synchronized]"
      }
    },
    "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-3121. NodeManager should handle disk-failures (Ravi Gummadi via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1208131 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/11/11 3:17 PM",
      "commitName": "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb",
      "commitAuthor": "Mahadev Konar",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-3121. NodeManager should handle disk-failures (Ravi Gummadi via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1208131 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "29/11/11 3:17 PM",
          "commitName": "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb",
          "commitAuthor": "Mahadev Konar",
          "commitDateOld": "15/11/11 2:30 AM",
          "commitNameOld": "c56e05196190f172e9c8cdcd9d59d09950f1419b",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 14.53,
          "commitsBetweenForRepo": 77,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,26 @@\n   public void startLocalizer(Path nmPrivateContainerTokensPath,\n       InetSocketAddress nmAddr, String user, String appId, String locId,\n-      List\u003cPath\u003e localDirs) throws IOException, InterruptedException {\n+      List\u003cString\u003e localDirs, List\u003cString\u003e logDirs)\n+      throws IOException, InterruptedException {\n \n     ContainerLocalizer localizer \u003d\n-        new ContainerLocalizer(this.lfs, user, appId, locId,\n-            localDirs, RecordFactoryProvider.getRecordFactory(getConf()));\n+        new ContainerLocalizer(lfs, user, appId, locId, getPaths(localDirs),\n+            RecordFactoryProvider.getRecordFactory(getConf()));\n \n     createUserLocalDirs(localDirs, user);\n     createUserCacheDirs(localDirs, user);\n     createAppDirs(localDirs, user, appId);\n-    createAppLogDirs(appId);\n+    createAppLogDirs(appId, logDirs);\n \n     // TODO: Why pick first app dir. The same in LCE why not random?\n     Path appStorageDir \u003d getFirstApplicationDir(localDirs, user, appId);\n \n     String tokenFn \u003d String.format(ContainerLocalizer.TOKEN_FILE_NAME_FMT, locId);\n     Path tokenDst \u003d new Path(appStorageDir, tokenFn);\n     lfs.util().copy(nmPrivateContainerTokensPath, tokenDst);\n     LOG.info(\"Copying from \" + nmPrivateContainerTokensPath + \" to \" + tokenDst);\n     lfs.setWorkingDirectory(appStorageDir);\n     LOG.info(\"CWD set to \" + appStorageDir + \" \u003d \" + lfs.getWorkingDirectory());\n     // TODO: DO it over RPC for maintaining similarity?\n     localizer.runLocalization(nmAddr);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void startLocalizer(Path nmPrivateContainerTokensPath,\n      InetSocketAddress nmAddr, String user, String appId, String locId,\n      List\u003cString\u003e localDirs, List\u003cString\u003e logDirs)\n      throws IOException, InterruptedException {\n\n    ContainerLocalizer localizer \u003d\n        new ContainerLocalizer(lfs, user, appId, locId, getPaths(localDirs),\n            RecordFactoryProvider.getRecordFactory(getConf()));\n\n    createUserLocalDirs(localDirs, user);\n    createUserCacheDirs(localDirs, user);\n    createAppDirs(localDirs, user, appId);\n    createAppLogDirs(appId, logDirs);\n\n    // TODO: Why pick first app dir. The same in LCE why not random?\n    Path appStorageDir \u003d getFirstApplicationDir(localDirs, user, appId);\n\n    String tokenFn \u003d String.format(ContainerLocalizer.TOKEN_FILE_NAME_FMT, locId);\n    Path tokenDst \u003d new Path(appStorageDir, tokenFn);\n    lfs.util().copy(nmPrivateContainerTokensPath, tokenDst);\n    LOG.info(\"Copying from \" + nmPrivateContainerTokensPath + \" to \" + tokenDst);\n    lfs.setWorkingDirectory(appStorageDir);\n    LOG.info(\"CWD set to \" + appStorageDir + \" \u003d \" + lfs.getWorkingDirectory());\n    // TODO: DO it over RPC for maintaining similarity?\n    localizer.runLocalization(nmAddr);\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DefaultContainerExecutor.java",
          "extendedDetails": {
            "oldValue": "[nmPrivateContainerTokensPath-Path, nmAddr-InetSocketAddress, user-String, appId-String, locId-String, localDirs-List\u003cPath\u003e]",
            "newValue": "[nmPrivateContainerTokensPath-Path, nmAddr-InetSocketAddress, user-String, appId-String, locId-String, localDirs-List\u003cString\u003e, logDirs-List\u003cString\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-3121. NodeManager should handle disk-failures (Ravi Gummadi via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1208131 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "29/11/11 3:17 PM",
          "commitName": "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb",
          "commitAuthor": "Mahadev Konar",
          "commitDateOld": "15/11/11 2:30 AM",
          "commitNameOld": "c56e05196190f172e9c8cdcd9d59d09950f1419b",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 14.53,
          "commitsBetweenForRepo": 77,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,26 @@\n   public void startLocalizer(Path nmPrivateContainerTokensPath,\n       InetSocketAddress nmAddr, String user, String appId, String locId,\n-      List\u003cPath\u003e localDirs) throws IOException, InterruptedException {\n+      List\u003cString\u003e localDirs, List\u003cString\u003e logDirs)\n+      throws IOException, InterruptedException {\n \n     ContainerLocalizer localizer \u003d\n-        new ContainerLocalizer(this.lfs, user, appId, locId,\n-            localDirs, RecordFactoryProvider.getRecordFactory(getConf()));\n+        new ContainerLocalizer(lfs, user, appId, locId, getPaths(localDirs),\n+            RecordFactoryProvider.getRecordFactory(getConf()));\n \n     createUserLocalDirs(localDirs, user);\n     createUserCacheDirs(localDirs, user);\n     createAppDirs(localDirs, user, appId);\n-    createAppLogDirs(appId);\n+    createAppLogDirs(appId, logDirs);\n \n     // TODO: Why pick first app dir. The same in LCE why not random?\n     Path appStorageDir \u003d getFirstApplicationDir(localDirs, user, appId);\n \n     String tokenFn \u003d String.format(ContainerLocalizer.TOKEN_FILE_NAME_FMT, locId);\n     Path tokenDst \u003d new Path(appStorageDir, tokenFn);\n     lfs.util().copy(nmPrivateContainerTokensPath, tokenDst);\n     LOG.info(\"Copying from \" + nmPrivateContainerTokensPath + \" to \" + tokenDst);\n     lfs.setWorkingDirectory(appStorageDir);\n     LOG.info(\"CWD set to \" + appStorageDir + \" \u003d \" + lfs.getWorkingDirectory());\n     // TODO: DO it over RPC for maintaining similarity?\n     localizer.runLocalization(nmAddr);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void startLocalizer(Path nmPrivateContainerTokensPath,\n      InetSocketAddress nmAddr, String user, String appId, String locId,\n      List\u003cString\u003e localDirs, List\u003cString\u003e logDirs)\n      throws IOException, InterruptedException {\n\n    ContainerLocalizer localizer \u003d\n        new ContainerLocalizer(lfs, user, appId, locId, getPaths(localDirs),\n            RecordFactoryProvider.getRecordFactory(getConf()));\n\n    createUserLocalDirs(localDirs, user);\n    createUserCacheDirs(localDirs, user);\n    createAppDirs(localDirs, user, appId);\n    createAppLogDirs(appId, logDirs);\n\n    // TODO: Why pick first app dir. The same in LCE why not random?\n    Path appStorageDir \u003d getFirstApplicationDir(localDirs, user, appId);\n\n    String tokenFn \u003d String.format(ContainerLocalizer.TOKEN_FILE_NAME_FMT, locId);\n    Path tokenDst \u003d new Path(appStorageDir, tokenFn);\n    lfs.util().copy(nmPrivateContainerTokensPath, tokenDst);\n    LOG.info(\"Copying from \" + nmPrivateContainerTokensPath + \" to \" + tokenDst);\n    lfs.setWorkingDirectory(appStorageDir);\n    LOG.info(\"CWD set to \" + appStorageDir + \" \u003d \" + lfs.getWorkingDirectory());\n    // TODO: DO it over RPC for maintaining similarity?\n    localizer.runLocalization(nmAddr);\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DefaultContainerExecutor.java",
          "extendedDetails": {}
        }
      ]
    },
    "f114dad5ef9b72875e245803cee150ad12ff59de": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2986. Fixed MiniYARNCluster to support multiple NodeManagers. Contributed by Anupam Seth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1189721 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/10/11 5:42 AM",
      "commitName": "f114dad5ef9b72875e245803cee150ad12ff59de",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "27/10/11 5:03 AM",
      "commitNameOld": "2fe343f96348e894e6ed16c447c8c77ba1611d11",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,25 @@\n   public void startLocalizer(Path nmPrivateContainerTokensPath,\n       InetSocketAddress nmAddr, String user, String appId, String locId,\n       List\u003cPath\u003e localDirs) throws IOException, InterruptedException {\n \n     ContainerLocalizer localizer \u003d\n         new ContainerLocalizer(this.lfs, user, appId, locId,\n             localDirs, RecordFactoryProvider.getRecordFactory(getConf()));\n \n     createUserLocalDirs(localDirs, user);\n     createUserCacheDirs(localDirs, user);\n     createAppDirs(localDirs, user, appId);\n     createAppLogDirs(appId);\n \n     // TODO: Why pick first app dir. The same in LCE why not random?\n     Path appStorageDir \u003d getFirstApplicationDir(localDirs, user, appId);\n \n     String tokenFn \u003d String.format(ContainerLocalizer.TOKEN_FILE_NAME_FMT, locId);\n     Path tokenDst \u003d new Path(appStorageDir, tokenFn);\n     lfs.util().copy(nmPrivateContainerTokensPath, tokenDst);\n+    LOG.info(\"Copying from \" + nmPrivateContainerTokensPath + \" to \" + tokenDst);\n     lfs.setWorkingDirectory(appStorageDir);\n-\n+    LOG.info(\"CWD set to \" + appStorageDir + \" \u003d \" + lfs.getWorkingDirectory());\n     // TODO: DO it over RPC for maintaining similarity?\n     localizer.runLocalization(nmAddr);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void startLocalizer(Path nmPrivateContainerTokensPath,\n      InetSocketAddress nmAddr, String user, String appId, String locId,\n      List\u003cPath\u003e localDirs) throws IOException, InterruptedException {\n\n    ContainerLocalizer localizer \u003d\n        new ContainerLocalizer(this.lfs, user, appId, locId,\n            localDirs, RecordFactoryProvider.getRecordFactory(getConf()));\n\n    createUserLocalDirs(localDirs, user);\n    createUserCacheDirs(localDirs, user);\n    createAppDirs(localDirs, user, appId);\n    createAppLogDirs(appId);\n\n    // TODO: Why pick first app dir. The same in LCE why not random?\n    Path appStorageDir \u003d getFirstApplicationDir(localDirs, user, appId);\n\n    String tokenFn \u003d String.format(ContainerLocalizer.TOKEN_FILE_NAME_FMT, locId);\n    Path tokenDst \u003d new Path(appStorageDir, tokenFn);\n    lfs.util().copy(nmPrivateContainerTokensPath, tokenDst);\n    LOG.info(\"Copying from \" + nmPrivateContainerTokensPath + \" to \" + tokenDst);\n    lfs.setWorkingDirectory(appStorageDir);\n    LOG.info(\"CWD set to \" + appStorageDir + \" \u003d \" + lfs.getWorkingDirectory());\n    // TODO: DO it over RPC for maintaining similarity?\n    localizer.runLocalization(nmAddr);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DefaultContainerExecutor.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void startLocalizer(Path nmPrivateContainerTokensPath,\n      InetSocketAddress nmAddr, String user, String appId, String locId,\n      List\u003cPath\u003e localDirs) throws IOException, InterruptedException {\n\n    ContainerLocalizer localizer \u003d\n        new ContainerLocalizer(this.lfs, user, appId, locId,\n            localDirs, RecordFactoryProvider.getRecordFactory(getConf()));\n\n    createUserLocalDirs(localDirs, user);\n    createUserCacheDirs(localDirs, user);\n    createAppDirs(localDirs, user, appId);\n    createAppLogDirs(appId);\n\n    // TODO: Why pick first app dir. The same in LCE why not random?\n    Path appStorageDir \u003d getFirstApplicationDir(localDirs, user, appId);\n\n    String tokenFn \u003d String.format(ContainerLocalizer.TOKEN_FILE_NAME_FMT, locId);\n    Path tokenDst \u003d new Path(appStorageDir, tokenFn);\n    lfs.util().copy(nmPrivateContainerTokensPath, tokenDst);\n    lfs.setWorkingDirectory(appStorageDir);\n\n    // TODO: DO it over RPC for maintaining similarity?\n    localizer.runLocalization(nmAddr);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DefaultContainerExecutor.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DefaultContainerExecutor.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DefaultContainerExecutor.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,24 @@\n+  public void startLocalizer(Path nmPrivateContainerTokensPath,\n+      InetSocketAddress nmAddr, String user, String appId, String locId,\n+      List\u003cPath\u003e localDirs) throws IOException, InterruptedException {\n+\n+    ContainerLocalizer localizer \u003d\n+        new ContainerLocalizer(this.lfs, user, appId, locId,\n+            localDirs, RecordFactoryProvider.getRecordFactory(getConf()));\n+\n+    createUserLocalDirs(localDirs, user);\n+    createUserCacheDirs(localDirs, user);\n+    createAppDirs(localDirs, user, appId);\n+    createAppLogDirs(appId);\n+\n+    // TODO: Why pick first app dir. The same in LCE why not random?\n+    Path appStorageDir \u003d getFirstApplicationDir(localDirs, user, appId);\n+\n+    String tokenFn \u003d String.format(ContainerLocalizer.TOKEN_FILE_NAME_FMT, locId);\n+    Path tokenDst \u003d new Path(appStorageDir, tokenFn);\n+    lfs.util().copy(nmPrivateContainerTokensPath, tokenDst);\n+    lfs.setWorkingDirectory(appStorageDir);\n+\n+    // TODO: DO it over RPC for maintaining similarity?\n+    localizer.runLocalization(nmAddr);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void startLocalizer(Path nmPrivateContainerTokensPath,\n      InetSocketAddress nmAddr, String user, String appId, String locId,\n      List\u003cPath\u003e localDirs) throws IOException, InterruptedException {\n\n    ContainerLocalizer localizer \u003d\n        new ContainerLocalizer(this.lfs, user, appId, locId,\n            localDirs, RecordFactoryProvider.getRecordFactory(getConf()));\n\n    createUserLocalDirs(localDirs, user);\n    createUserCacheDirs(localDirs, user);\n    createAppDirs(localDirs, user, appId);\n    createAppLogDirs(appId);\n\n    // TODO: Why pick first app dir. The same in LCE why not random?\n    Path appStorageDir \u003d getFirstApplicationDir(localDirs, user, appId);\n\n    String tokenFn \u003d String.format(ContainerLocalizer.TOKEN_FILE_NAME_FMT, locId);\n    Path tokenDst \u003d new Path(appStorageDir, tokenFn);\n    lfs.util().copy(nmPrivateContainerTokensPath, tokenDst);\n    lfs.setWorkingDirectory(appStorageDir);\n\n    // TODO: DO it over RPC for maintaining similarity?\n    localizer.runLocalization(nmAddr);\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/DefaultContainerExecutor.java"
    }
  }
}