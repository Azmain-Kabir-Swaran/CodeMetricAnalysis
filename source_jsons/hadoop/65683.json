{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DumpS3GuardDynamoTable.java",
  "functionName": "treewalkFilesystem",
  "functionId": "treewalkFilesystem___csv-CsvFile(modifiers-final)__base-Path(modifiers-final)",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DumpS3GuardDynamoTable.java",
  "functionStartLine": 282,
  "functionEndLine": 320,
  "numCommitsSeen": 2,
  "timeTaken": 1177,
  "changeHistory": [
    "b15ef7dc3d91c6d50fa515158104fba29f43e6b0"
  ],
  "changeHistoryShort": {
    "b15ef7dc3d91c6d50fa515158104fba29f43e6b0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b15ef7dc3d91c6d50fa515158104fba29f43e6b0": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-16384: S3A: Avoid inconsistencies between DDB and S3.\n\nContributed by Steve Loughran\n\nContains\n\n- HADOOP-16397. Hadoop S3Guard Prune command to support a -tombstone option.\n- HADOOP-16406. ITestDynamoDBMetadataStore.testProvisionTable times out intermittently\n\nThis patch doesn\u0027t fix the underlying problem but it\n\n* changes some tests to clean up better\n* does a lot more in logging operations in against DDB, if enabled\n* adds an entry point to dump the state of the metastore and s3 tables (precursor to fsck)\n* adds a purge entry point to help clean up after a test run has got a store into a mess\n* s3guard prune command adds -tombstone option to only clear tombstones\n\nThe outcome is that tests should pass consistently and if problems occur we have better diagnostics.\n\nChange-Id: I3eca3f5529d7f6fec398c0ff0472919f08f054eb\n",
      "commitDate": "12/07/19 5:02 AM",
      "commitName": "b15ef7dc3d91c6d50fa515158104fba29f43e6b0",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,39 @@\n+  protected long treewalkFilesystem(\n+      final CsvFile csv,\n+      final Path base) throws IOException {\n+    ArrayDeque\u003cPath\u003e queue \u003d new ArrayDeque\u003c\u003e();\n+    queue.add(base);\n+    long count \u003d 0;\n+    while (!queue.isEmpty()) {\n+      Path path \u003d queue.pop();\n+      count++;\n+      FileStatus[] fileStatuses;\n+      try {\n+        fileStatuses \u003d getFilesystem().listStatus(path);\n+      } catch (FileNotFoundException e) {\n+        LOG.warn(\"File {} was not found\", path);\n+        continue;\n+      }\n+      // entries\n+      for (FileStatus fileStatus : fileStatuses) {\n+        csv.entry((S3AFileStatus) fileStatus);\n+      }\n+      // scan through the list, building up a reverse list of all directories\n+      // found.\n+      List\u003cPath\u003e dirs \u003d new ArrayList\u003c\u003e(fileStatuses.length);\n+      for (FileStatus fileStatus : fileStatuses) {\n+        if (fileStatus.isDirectory()\n+            \u0026\u0026 !(fileStatus.getPath().equals(path))) {\n+          // directory: add to the end of the queue.\n+          dirs.add(fileStatus.getPath());\n+        } else {\n+          // file: just increment the count\n+          count++;\n+        }\n+        // now push the dirs list in reverse\n+        // so that they have been added in the sort order as returned.\n+        pushAll(queue, dirs);\n+      }\n+    }\n+    return count;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected long treewalkFilesystem(\n      final CsvFile csv,\n      final Path base) throws IOException {\n    ArrayDeque\u003cPath\u003e queue \u003d new ArrayDeque\u003c\u003e();\n    queue.add(base);\n    long count \u003d 0;\n    while (!queue.isEmpty()) {\n      Path path \u003d queue.pop();\n      count++;\n      FileStatus[] fileStatuses;\n      try {\n        fileStatuses \u003d getFilesystem().listStatus(path);\n      } catch (FileNotFoundException e) {\n        LOG.warn(\"File {} was not found\", path);\n        continue;\n      }\n      // entries\n      for (FileStatus fileStatus : fileStatuses) {\n        csv.entry((S3AFileStatus) fileStatus);\n      }\n      // scan through the list, building up a reverse list of all directories\n      // found.\n      List\u003cPath\u003e dirs \u003d new ArrayList\u003c\u003e(fileStatuses.length);\n      for (FileStatus fileStatus : fileStatuses) {\n        if (fileStatus.isDirectory()\n            \u0026\u0026 !(fileStatus.getPath().equals(path))) {\n          // directory: add to the end of the queue.\n          dirs.add(fileStatus.getPath());\n        } else {\n          // file: just increment the count\n          count++;\n        }\n        // now push the dirs list in reverse\n        // so that they have been added in the sort order as returned.\n        pushAll(queue, dirs);\n      }\n    }\n    return count;\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/DumpS3GuardDynamoTable.java"
    }
  }
}