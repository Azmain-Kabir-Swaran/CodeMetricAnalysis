{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FifoIntraQueuePreemptionPlugin.java",
  "functionName": "createTempAppForResCalculation",
  "functionId": "createTempAppForResCalculation___tq-TempQueuePerPartition__apps-Collection__FiCaSchedulerApp____clusterResource-Resource__perUserAMUsed-Map__String,Resource__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/FifoIntraQueuePreemptionPlugin.java",
  "functionStartLine": 364,
  "functionEndLine": 456,
  "numCommitsSeen": 13,
  "timeTaken": 4178,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "7c343669baf660df3b70d58987d6e68aec54d6fa",
    "bdd2a184d78379d99c802a43ebec7d2cef0bbaf7",
    "02599bda04e0ef46f4628b006f2430ad63cac97e",
    "c583ab02c730be0a63d974039a78f2dc67dc2db6",
    "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "7c343669baf660df3b70d58987d6e68aec54d6fa": "Ybodychange",
    "bdd2a184d78379d99c802a43ebec7d2cef0bbaf7": "Ybodychange",
    "02599bda04e0ef46f4628b006f2430ad63cac97e": "Ybodychange",
    "c583ab02c730be0a63d974039a78f2dc67dc2db6": "Ymultichange(Yparameterchange,Ybodychange)",
    "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 10.76,
      "commitsBetweenForRepo": 108,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,95 +1,93 @@\n   private PriorityQueue\u003cTempAppPerPartition\u003e createTempAppForResCalculation(\n       TempQueuePerPartition tq, Collection\u003cFiCaSchedulerApp\u003e apps,\n       Resource clusterResource,\n       Map\u003cString, Resource\u003e perUserAMUsed) {\n     Comparator\u003cTempAppPerPartition\u003e taComparator;\n     OrderingPolicy\u003cFiCaSchedulerApp\u003e orderingPolicy \u003d\n         tq.leafQueue.getOrderingPolicy();\n     if (orderingPolicy instanceof FairOrderingPolicy\n         \u0026\u0026 (context.getIntraQueuePreemptionOrderPolicy()\n             \u003d\u003d IntraQueuePreemptionOrderPolicy.USERLIMIT_FIRST)) {\n       taComparator \u003d new TAFairOrderingComparator(this.rc, clusterResource);\n     } else {\n        taComparator \u003d new TAPriorityComparator();\n     }\n     PriorityQueue\u003cTempAppPerPartition\u003e orderedByPriority \u003d new PriorityQueue\u003c\u003e(\n         100, taComparator);\n \n     String partition \u003d tq.partition;\n     Map\u003cString, TempUserPerPartition\u003e usersPerPartition \u003d tq\n         .getUsersPerPartition();\n \n     // have an internal temp app structure to store intermediate data(priority)\n     for (FiCaSchedulerApp app : apps) {\n \n       Resource used \u003d app.getAppAttemptResourceUsage().getUsed(partition);\n       Resource amUsed \u003d null;\n       if (!app.isWaitingForAMContainer()) {\n         amUsed \u003d app.getAMResource(partition);\n       }\n       Resource pending \u003d app.getTotalPendingRequestsPerPartition()\n           .get(partition);\n       Resource reserved \u003d app.getAppAttemptResourceUsage()\n           .getReserved(partition);\n \n       used \u003d (used \u003d\u003d null) ? Resources.createResource(0, 0) : used;\n       amUsed \u003d (amUsed \u003d\u003d null) ? Resources.createResource(0, 0) : amUsed;\n       pending \u003d (pending \u003d\u003d null) ? Resources.createResource(0, 0) : pending;\n       reserved \u003d (reserved \u003d\u003d null) ? Resources.createResource(0, 0) : reserved;\n \n       HashSet\u003cString\u003e partitions \u003d new HashSet\u003cString\u003e(\n           app.getAppAttemptResourceUsage().getNodePartitionsSet());\n       partitions.addAll(app.getTotalPendingRequestsPerPartition().keySet());\n \n       // Create TempAppPerQueue for further calculation.\n       TempAppPerPartition tmpApp \u003d new TempAppPerPartition(app,\n           Resources.clone(used), Resources.clone(amUsed),\n           Resources.clone(reserved), Resources.clone(pending));\n \n       // Set ideal allocation of app as 0.\n       tmpApp.idealAssigned \u003d Resources.createResource(0, 0);\n \n       // Create a TempUserPerPartition structure to hold more information\n       // regarding each user\u0027s entities such as UserLimit etc. This could\n       // be kept in a user to TempUserPerPartition map for further reference.\n       String userName \u003d app.getUser();\n       TempUserPerPartition tmpUser \u003d usersPerPartition.get(userName);\n       if (tmpUser \u003d\u003d null) {\n         ResourceUsage userResourceUsage \u003d tq.leafQueue.getUser(userName)\n             .getResourceUsage();\n \n         // perUserAMUsed was populated with running apps, now we are looping\n         // through both running and pending apps.\n         Resource userSpecificAmUsed \u003d perUserAMUsed.get(userName);\n         amUsed \u003d (userSpecificAmUsed \u003d\u003d null)\n             ? Resources.none() : userSpecificAmUsed;\n \n         tmpUser \u003d new TempUserPerPartition(\n             tq.leafQueue.getUser(userName), tq.queueName,\n             Resources.clone(userResourceUsage.getUsed(partition)),\n             Resources.clone(amUsed),\n             Resources.clone(userResourceUsage.getReserved(partition)),\n             Resources.none());\n \n         Resource userLimitResource \u003d Resources.clone(\n             tq.leafQueue.getResourceLimitForAllUsers(userName, clusterResource,\n                 partition, SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY));\n \n         // Real AM used need not have to be considered for user-limit as well.\n         userLimitResource \u003d Resources.subtract(userLimitResource,\n             tmpUser.amUsed);\n         tmpUser.setUserLimit(userLimitResource);\n \n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"TempUser:\" + tmpUser);\n-        }\n+        LOG.debug(\"TempUser:{}\", tmpUser);\n \n         tmpUser.idealAssigned \u003d Resources.createResource(0, 0);\n         tq.addUserPerPartition(userName, tmpUser);\n       }\n       tmpApp.setTempUserPerPartition(tmpUser);\n       orderedByPriority.add(tmpApp);\n     }\n \n     return orderedByPriority;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private PriorityQueue\u003cTempAppPerPartition\u003e createTempAppForResCalculation(\n      TempQueuePerPartition tq, Collection\u003cFiCaSchedulerApp\u003e apps,\n      Resource clusterResource,\n      Map\u003cString, Resource\u003e perUserAMUsed) {\n    Comparator\u003cTempAppPerPartition\u003e taComparator;\n    OrderingPolicy\u003cFiCaSchedulerApp\u003e orderingPolicy \u003d\n        tq.leafQueue.getOrderingPolicy();\n    if (orderingPolicy instanceof FairOrderingPolicy\n        \u0026\u0026 (context.getIntraQueuePreemptionOrderPolicy()\n            \u003d\u003d IntraQueuePreemptionOrderPolicy.USERLIMIT_FIRST)) {\n      taComparator \u003d new TAFairOrderingComparator(this.rc, clusterResource);\n    } else {\n       taComparator \u003d new TAPriorityComparator();\n    }\n    PriorityQueue\u003cTempAppPerPartition\u003e orderedByPriority \u003d new PriorityQueue\u003c\u003e(\n        100, taComparator);\n\n    String partition \u003d tq.partition;\n    Map\u003cString, TempUserPerPartition\u003e usersPerPartition \u003d tq\n        .getUsersPerPartition();\n\n    // have an internal temp app structure to store intermediate data(priority)\n    for (FiCaSchedulerApp app : apps) {\n\n      Resource used \u003d app.getAppAttemptResourceUsage().getUsed(partition);\n      Resource amUsed \u003d null;\n      if (!app.isWaitingForAMContainer()) {\n        amUsed \u003d app.getAMResource(partition);\n      }\n      Resource pending \u003d app.getTotalPendingRequestsPerPartition()\n          .get(partition);\n      Resource reserved \u003d app.getAppAttemptResourceUsage()\n          .getReserved(partition);\n\n      used \u003d (used \u003d\u003d null) ? Resources.createResource(0, 0) : used;\n      amUsed \u003d (amUsed \u003d\u003d null) ? Resources.createResource(0, 0) : amUsed;\n      pending \u003d (pending \u003d\u003d null) ? Resources.createResource(0, 0) : pending;\n      reserved \u003d (reserved \u003d\u003d null) ? Resources.createResource(0, 0) : reserved;\n\n      HashSet\u003cString\u003e partitions \u003d new HashSet\u003cString\u003e(\n          app.getAppAttemptResourceUsage().getNodePartitionsSet());\n      partitions.addAll(app.getTotalPendingRequestsPerPartition().keySet());\n\n      // Create TempAppPerQueue for further calculation.\n      TempAppPerPartition tmpApp \u003d new TempAppPerPartition(app,\n          Resources.clone(used), Resources.clone(amUsed),\n          Resources.clone(reserved), Resources.clone(pending));\n\n      // Set ideal allocation of app as 0.\n      tmpApp.idealAssigned \u003d Resources.createResource(0, 0);\n\n      // Create a TempUserPerPartition structure to hold more information\n      // regarding each user\u0027s entities such as UserLimit etc. This could\n      // be kept in a user to TempUserPerPartition map for further reference.\n      String userName \u003d app.getUser();\n      TempUserPerPartition tmpUser \u003d usersPerPartition.get(userName);\n      if (tmpUser \u003d\u003d null) {\n        ResourceUsage userResourceUsage \u003d tq.leafQueue.getUser(userName)\n            .getResourceUsage();\n\n        // perUserAMUsed was populated with running apps, now we are looping\n        // through both running and pending apps.\n        Resource userSpecificAmUsed \u003d perUserAMUsed.get(userName);\n        amUsed \u003d (userSpecificAmUsed \u003d\u003d null)\n            ? Resources.none() : userSpecificAmUsed;\n\n        tmpUser \u003d new TempUserPerPartition(\n            tq.leafQueue.getUser(userName), tq.queueName,\n            Resources.clone(userResourceUsage.getUsed(partition)),\n            Resources.clone(amUsed),\n            Resources.clone(userResourceUsage.getReserved(partition)),\n            Resources.none());\n\n        Resource userLimitResource \u003d Resources.clone(\n            tq.leafQueue.getResourceLimitForAllUsers(userName, clusterResource,\n                partition, SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY));\n\n        // Real AM used need not have to be considered for user-limit as well.\n        userLimitResource \u003d Resources.subtract(userLimitResource,\n            tmpUser.amUsed);\n        tmpUser.setUserLimit(userLimitResource);\n\n        LOG.debug(\"TempUser:{}\", tmpUser);\n\n        tmpUser.idealAssigned \u003d Resources.createResource(0, 0);\n        tq.addUserPerPartition(userName, tmpUser);\n      }\n      tmpApp.setTempUserPerPartition(tmpUser);\n      orderedByPriority.add(tmpApp);\n    }\n\n    return orderedByPriority;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/FifoIntraQueuePreemptionPlugin.java",
      "extendedDetails": {}
    },
    "7c343669baf660df3b70d58987d6e68aec54d6fa": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4781. Support intra-queue preemption for fairness ordering policy. Contributed by Eric Payne.\n",
      "commitDate": "28/05/18 4:02 AM",
      "commitName": "7c343669baf660df3b70d58987d6e68aec54d6fa",
      "commitAuthor": "Sunil G",
      "commitDateOld": "25/05/18 9:06 AM",
      "commitNameOld": "8d5509c68156faaa6641f4e747fc9ff80adccf88",
      "commitAuthorOld": "Eric E Payne",
      "daysBetweenCommits": 2.79,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,84 +1,95 @@\n   private PriorityQueue\u003cTempAppPerPartition\u003e createTempAppForResCalculation(\n       TempQueuePerPartition tq, Collection\u003cFiCaSchedulerApp\u003e apps,\n       Resource clusterResource,\n       Map\u003cString, Resource\u003e perUserAMUsed) {\n-    TAPriorityComparator taComparator \u003d new TAPriorityComparator();\n+    Comparator\u003cTempAppPerPartition\u003e taComparator;\n+    OrderingPolicy\u003cFiCaSchedulerApp\u003e orderingPolicy \u003d\n+        tq.leafQueue.getOrderingPolicy();\n+    if (orderingPolicy instanceof FairOrderingPolicy\n+        \u0026\u0026 (context.getIntraQueuePreemptionOrderPolicy()\n+            \u003d\u003d IntraQueuePreemptionOrderPolicy.USERLIMIT_FIRST)) {\n+      taComparator \u003d new TAFairOrderingComparator(this.rc, clusterResource);\n+    } else {\n+       taComparator \u003d new TAPriorityComparator();\n+    }\n     PriorityQueue\u003cTempAppPerPartition\u003e orderedByPriority \u003d new PriorityQueue\u003c\u003e(\n         100, taComparator);\n \n     String partition \u003d tq.partition;\n     Map\u003cString, TempUserPerPartition\u003e usersPerPartition \u003d tq\n         .getUsersPerPartition();\n \n     // have an internal temp app structure to store intermediate data(priority)\n     for (FiCaSchedulerApp app : apps) {\n \n       Resource used \u003d app.getAppAttemptResourceUsage().getUsed(partition);\n       Resource amUsed \u003d null;\n       if (!app.isWaitingForAMContainer()) {\n         amUsed \u003d app.getAMResource(partition);\n       }\n       Resource pending \u003d app.getTotalPendingRequestsPerPartition()\n           .get(partition);\n       Resource reserved \u003d app.getAppAttemptResourceUsage()\n           .getReserved(partition);\n \n       used \u003d (used \u003d\u003d null) ? Resources.createResource(0, 0) : used;\n       amUsed \u003d (amUsed \u003d\u003d null) ? Resources.createResource(0, 0) : amUsed;\n       pending \u003d (pending \u003d\u003d null) ? Resources.createResource(0, 0) : pending;\n       reserved \u003d (reserved \u003d\u003d null) ? Resources.createResource(0, 0) : reserved;\n \n       HashSet\u003cString\u003e partitions \u003d new HashSet\u003cString\u003e(\n           app.getAppAttemptResourceUsage().getNodePartitionsSet());\n       partitions.addAll(app.getTotalPendingRequestsPerPartition().keySet());\n \n       // Create TempAppPerQueue for further calculation.\n       TempAppPerPartition tmpApp \u003d new TempAppPerPartition(app,\n           Resources.clone(used), Resources.clone(amUsed),\n           Resources.clone(reserved), Resources.clone(pending));\n \n       // Set ideal allocation of app as 0.\n       tmpApp.idealAssigned \u003d Resources.createResource(0, 0);\n \n-      orderedByPriority.add(tmpApp);\n-\n       // Create a TempUserPerPartition structure to hold more information\n       // regarding each user\u0027s entities such as UserLimit etc. This could\n       // be kept in a user to TempUserPerPartition map for further reference.\n       String userName \u003d app.getUser();\n-      if (!usersPerPartition.containsKey(userName)) {\n+      TempUserPerPartition tmpUser \u003d usersPerPartition.get(userName);\n+      if (tmpUser \u003d\u003d null) {\n         ResourceUsage userResourceUsage \u003d tq.leafQueue.getUser(userName)\n             .getResourceUsage();\n \n         // perUserAMUsed was populated with running apps, now we are looping\n         // through both running and pending apps.\n         Resource userSpecificAmUsed \u003d perUserAMUsed.get(userName);\n         amUsed \u003d (userSpecificAmUsed \u003d\u003d null)\n             ? Resources.none() : userSpecificAmUsed;\n \n-        TempUserPerPartition tmpUser \u003d new TempUserPerPartition(\n+        tmpUser \u003d new TempUserPerPartition(\n             tq.leafQueue.getUser(userName), tq.queueName,\n             Resources.clone(userResourceUsage.getUsed(partition)),\n             Resources.clone(amUsed),\n             Resources.clone(userResourceUsage.getReserved(partition)),\n             Resources.none());\n \n         Resource userLimitResource \u003d Resources.clone(\n             tq.leafQueue.getResourceLimitForAllUsers(userName, clusterResource,\n                 partition, SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY));\n \n         // Real AM used need not have to be considered for user-limit as well.\n         userLimitResource \u003d Resources.subtract(userLimitResource,\n             tmpUser.amUsed);\n         tmpUser.setUserLimit(userLimitResource);\n \n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"TempUser:\" + tmpUser);\n         }\n \n         tmpUser.idealAssigned \u003d Resources.createResource(0, 0);\n         tq.addUserPerPartition(userName, tmpUser);\n       }\n+      tmpApp.setTempUserPerPartition(tmpUser);\n+      orderedByPriority.add(tmpApp);\n     }\n+\n     return orderedByPriority;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private PriorityQueue\u003cTempAppPerPartition\u003e createTempAppForResCalculation(\n      TempQueuePerPartition tq, Collection\u003cFiCaSchedulerApp\u003e apps,\n      Resource clusterResource,\n      Map\u003cString, Resource\u003e perUserAMUsed) {\n    Comparator\u003cTempAppPerPartition\u003e taComparator;\n    OrderingPolicy\u003cFiCaSchedulerApp\u003e orderingPolicy \u003d\n        tq.leafQueue.getOrderingPolicy();\n    if (orderingPolicy instanceof FairOrderingPolicy\n        \u0026\u0026 (context.getIntraQueuePreemptionOrderPolicy()\n            \u003d\u003d IntraQueuePreemptionOrderPolicy.USERLIMIT_FIRST)) {\n      taComparator \u003d new TAFairOrderingComparator(this.rc, clusterResource);\n    } else {\n       taComparator \u003d new TAPriorityComparator();\n    }\n    PriorityQueue\u003cTempAppPerPartition\u003e orderedByPriority \u003d new PriorityQueue\u003c\u003e(\n        100, taComparator);\n\n    String partition \u003d tq.partition;\n    Map\u003cString, TempUserPerPartition\u003e usersPerPartition \u003d tq\n        .getUsersPerPartition();\n\n    // have an internal temp app structure to store intermediate data(priority)\n    for (FiCaSchedulerApp app : apps) {\n\n      Resource used \u003d app.getAppAttemptResourceUsage().getUsed(partition);\n      Resource amUsed \u003d null;\n      if (!app.isWaitingForAMContainer()) {\n        amUsed \u003d app.getAMResource(partition);\n      }\n      Resource pending \u003d app.getTotalPendingRequestsPerPartition()\n          .get(partition);\n      Resource reserved \u003d app.getAppAttemptResourceUsage()\n          .getReserved(partition);\n\n      used \u003d (used \u003d\u003d null) ? Resources.createResource(0, 0) : used;\n      amUsed \u003d (amUsed \u003d\u003d null) ? Resources.createResource(0, 0) : amUsed;\n      pending \u003d (pending \u003d\u003d null) ? Resources.createResource(0, 0) : pending;\n      reserved \u003d (reserved \u003d\u003d null) ? Resources.createResource(0, 0) : reserved;\n\n      HashSet\u003cString\u003e partitions \u003d new HashSet\u003cString\u003e(\n          app.getAppAttemptResourceUsage().getNodePartitionsSet());\n      partitions.addAll(app.getTotalPendingRequestsPerPartition().keySet());\n\n      // Create TempAppPerQueue for further calculation.\n      TempAppPerPartition tmpApp \u003d new TempAppPerPartition(app,\n          Resources.clone(used), Resources.clone(amUsed),\n          Resources.clone(reserved), Resources.clone(pending));\n\n      // Set ideal allocation of app as 0.\n      tmpApp.idealAssigned \u003d Resources.createResource(0, 0);\n\n      // Create a TempUserPerPartition structure to hold more information\n      // regarding each user\u0027s entities such as UserLimit etc. This could\n      // be kept in a user to TempUserPerPartition map for further reference.\n      String userName \u003d app.getUser();\n      TempUserPerPartition tmpUser \u003d usersPerPartition.get(userName);\n      if (tmpUser \u003d\u003d null) {\n        ResourceUsage userResourceUsage \u003d tq.leafQueue.getUser(userName)\n            .getResourceUsage();\n\n        // perUserAMUsed was populated with running apps, now we are looping\n        // through both running and pending apps.\n        Resource userSpecificAmUsed \u003d perUserAMUsed.get(userName);\n        amUsed \u003d (userSpecificAmUsed \u003d\u003d null)\n            ? Resources.none() : userSpecificAmUsed;\n\n        tmpUser \u003d new TempUserPerPartition(\n            tq.leafQueue.getUser(userName), tq.queueName,\n            Resources.clone(userResourceUsage.getUsed(partition)),\n            Resources.clone(amUsed),\n            Resources.clone(userResourceUsage.getReserved(partition)),\n            Resources.none());\n\n        Resource userLimitResource \u003d Resources.clone(\n            tq.leafQueue.getResourceLimitForAllUsers(userName, clusterResource,\n                partition, SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY));\n\n        // Real AM used need not have to be considered for user-limit as well.\n        userLimitResource \u003d Resources.subtract(userLimitResource,\n            tmpUser.amUsed);\n        tmpUser.setUserLimit(userLimitResource);\n\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"TempUser:\" + tmpUser);\n        }\n\n        tmpUser.idealAssigned \u003d Resources.createResource(0, 0);\n        tq.addUserPerPartition(userName, tmpUser);\n      }\n      tmpApp.setTempUserPerPartition(tmpUser);\n      orderedByPriority.add(tmpApp);\n    }\n\n    return orderedByPriority;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/FifoIntraQueuePreemptionPlugin.java",
      "extendedDetails": {}
    },
    "bdd2a184d78379d99c802a43ebec7d2cef0bbaf7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7947. Capacity Scheduler intra-queue preemption can NPE for non-schedulable apps. Contributed by Eric Payne.\n",
      "commitDate": "21/02/18 1:05 AM",
      "commitName": "bdd2a184d78379d99c802a43ebec7d2cef0bbaf7",
      "commitAuthor": "Sunil G",
      "commitDateOld": "16/11/17 9:04 AM",
      "commitNameOld": "61ace174cdcbca9d22abce7aa0aa71148f37ad55",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 96.67,
      "commitsBetweenForRepo": 544,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,84 +1,84 @@\n   private PriorityQueue\u003cTempAppPerPartition\u003e createTempAppForResCalculation(\n       TempQueuePerPartition tq, Collection\u003cFiCaSchedulerApp\u003e apps,\n       Resource clusterResource,\n       Map\u003cString, Resource\u003e perUserAMUsed) {\n     TAPriorityComparator taComparator \u003d new TAPriorityComparator();\n     PriorityQueue\u003cTempAppPerPartition\u003e orderedByPriority \u003d new PriorityQueue\u003c\u003e(\n         100, taComparator);\n \n     String partition \u003d tq.partition;\n     Map\u003cString, TempUserPerPartition\u003e usersPerPartition \u003d tq\n         .getUsersPerPartition();\n \n     // have an internal temp app structure to store intermediate data(priority)\n     for (FiCaSchedulerApp app : apps) {\n \n       Resource used \u003d app.getAppAttemptResourceUsage().getUsed(partition);\n       Resource amUsed \u003d null;\n       if (!app.isWaitingForAMContainer()) {\n         amUsed \u003d app.getAMResource(partition);\n       }\n       Resource pending \u003d app.getTotalPendingRequestsPerPartition()\n           .get(partition);\n       Resource reserved \u003d app.getAppAttemptResourceUsage()\n           .getReserved(partition);\n \n       used \u003d (used \u003d\u003d null) ? Resources.createResource(0, 0) : used;\n       amUsed \u003d (amUsed \u003d\u003d null) ? Resources.createResource(0, 0) : amUsed;\n       pending \u003d (pending \u003d\u003d null) ? Resources.createResource(0, 0) : pending;\n       reserved \u003d (reserved \u003d\u003d null) ? Resources.createResource(0, 0) : reserved;\n \n       HashSet\u003cString\u003e partitions \u003d new HashSet\u003cString\u003e(\n           app.getAppAttemptResourceUsage().getNodePartitionsSet());\n       partitions.addAll(app.getTotalPendingRequestsPerPartition().keySet());\n \n       // Create TempAppPerQueue for further calculation.\n       TempAppPerPartition tmpApp \u003d new TempAppPerPartition(app,\n           Resources.clone(used), Resources.clone(amUsed),\n           Resources.clone(reserved), Resources.clone(pending));\n \n       // Set ideal allocation of app as 0.\n       tmpApp.idealAssigned \u003d Resources.createResource(0, 0);\n \n       orderedByPriority.add(tmpApp);\n \n       // Create a TempUserPerPartition structure to hold more information\n       // regarding each user\u0027s entities such as UserLimit etc. This could\n       // be kept in a user to TempUserPerPartition map for further reference.\n       String userName \u003d app.getUser();\n       if (!usersPerPartition.containsKey(userName)) {\n         ResourceUsage userResourceUsage \u003d tq.leafQueue.getUser(userName)\n             .getResourceUsage();\n \n         // perUserAMUsed was populated with running apps, now we are looping\n         // through both running and pending apps.\n         Resource userSpecificAmUsed \u003d perUserAMUsed.get(userName);\n         amUsed \u003d (userSpecificAmUsed \u003d\u003d null)\n             ? Resources.none() : userSpecificAmUsed;\n \n         TempUserPerPartition tmpUser \u003d new TempUserPerPartition(\n             tq.leafQueue.getUser(userName), tq.queueName,\n             Resources.clone(userResourceUsage.getUsed(partition)),\n-            Resources.clone(userSpecificAmUsed),\n+            Resources.clone(amUsed),\n             Resources.clone(userResourceUsage.getReserved(partition)),\n             Resources.none());\n \n         Resource userLimitResource \u003d Resources.clone(\n             tq.leafQueue.getResourceLimitForAllUsers(userName, clusterResource,\n                 partition, SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY));\n \n         // Real AM used need not have to be considered for user-limit as well.\n         userLimitResource \u003d Resources.subtract(userLimitResource,\n             tmpUser.amUsed);\n         tmpUser.setUserLimit(userLimitResource);\n \n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"TempUser:\" + tmpUser);\n         }\n \n         tmpUser.idealAssigned \u003d Resources.createResource(0, 0);\n         tq.addUserPerPartition(userName, tmpUser);\n       }\n     }\n     return orderedByPriority;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private PriorityQueue\u003cTempAppPerPartition\u003e createTempAppForResCalculation(\n      TempQueuePerPartition tq, Collection\u003cFiCaSchedulerApp\u003e apps,\n      Resource clusterResource,\n      Map\u003cString, Resource\u003e perUserAMUsed) {\n    TAPriorityComparator taComparator \u003d new TAPriorityComparator();\n    PriorityQueue\u003cTempAppPerPartition\u003e orderedByPriority \u003d new PriorityQueue\u003c\u003e(\n        100, taComparator);\n\n    String partition \u003d tq.partition;\n    Map\u003cString, TempUserPerPartition\u003e usersPerPartition \u003d tq\n        .getUsersPerPartition();\n\n    // have an internal temp app structure to store intermediate data(priority)\n    for (FiCaSchedulerApp app : apps) {\n\n      Resource used \u003d app.getAppAttemptResourceUsage().getUsed(partition);\n      Resource amUsed \u003d null;\n      if (!app.isWaitingForAMContainer()) {\n        amUsed \u003d app.getAMResource(partition);\n      }\n      Resource pending \u003d app.getTotalPendingRequestsPerPartition()\n          .get(partition);\n      Resource reserved \u003d app.getAppAttemptResourceUsage()\n          .getReserved(partition);\n\n      used \u003d (used \u003d\u003d null) ? Resources.createResource(0, 0) : used;\n      amUsed \u003d (amUsed \u003d\u003d null) ? Resources.createResource(0, 0) : amUsed;\n      pending \u003d (pending \u003d\u003d null) ? Resources.createResource(0, 0) : pending;\n      reserved \u003d (reserved \u003d\u003d null) ? Resources.createResource(0, 0) : reserved;\n\n      HashSet\u003cString\u003e partitions \u003d new HashSet\u003cString\u003e(\n          app.getAppAttemptResourceUsage().getNodePartitionsSet());\n      partitions.addAll(app.getTotalPendingRequestsPerPartition().keySet());\n\n      // Create TempAppPerQueue for further calculation.\n      TempAppPerPartition tmpApp \u003d new TempAppPerPartition(app,\n          Resources.clone(used), Resources.clone(amUsed),\n          Resources.clone(reserved), Resources.clone(pending));\n\n      // Set ideal allocation of app as 0.\n      tmpApp.idealAssigned \u003d Resources.createResource(0, 0);\n\n      orderedByPriority.add(tmpApp);\n\n      // Create a TempUserPerPartition structure to hold more information\n      // regarding each user\u0027s entities such as UserLimit etc. This could\n      // be kept in a user to TempUserPerPartition map for further reference.\n      String userName \u003d app.getUser();\n      if (!usersPerPartition.containsKey(userName)) {\n        ResourceUsage userResourceUsage \u003d tq.leafQueue.getUser(userName)\n            .getResourceUsage();\n\n        // perUserAMUsed was populated with running apps, now we are looping\n        // through both running and pending apps.\n        Resource userSpecificAmUsed \u003d perUserAMUsed.get(userName);\n        amUsed \u003d (userSpecificAmUsed \u003d\u003d null)\n            ? Resources.none() : userSpecificAmUsed;\n\n        TempUserPerPartition tmpUser \u003d new TempUserPerPartition(\n            tq.leafQueue.getUser(userName), tq.queueName,\n            Resources.clone(userResourceUsage.getUsed(partition)),\n            Resources.clone(amUsed),\n            Resources.clone(userResourceUsage.getReserved(partition)),\n            Resources.none());\n\n        Resource userLimitResource \u003d Resources.clone(\n            tq.leafQueue.getResourceLimitForAllUsers(userName, clusterResource,\n                partition, SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY));\n\n        // Real AM used need not have to be considered for user-limit as well.\n        userLimitResource \u003d Resources.subtract(userLimitResource,\n            tmpUser.amUsed);\n        tmpUser.setUserLimit(userLimitResource);\n\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"TempUser:\" + tmpUser);\n        }\n\n        tmpUser.idealAssigned \u003d Resources.createResource(0, 0);\n        tq.addUserPerPartition(userName, tmpUser);\n      }\n    }\n    return orderedByPriority;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/FifoIntraQueuePreemptionPlugin.java",
      "extendedDetails": {}
    },
    "02599bda04e0ef46f4628b006f2430ad63cac97e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7051. Avoid concurrent modification exception in FifoIntraQueuePreemptionPlugin. Contributed by Eric Payne.\n",
      "commitDate": "27/08/17 11:52 PM",
      "commitName": "02599bda04e0ef46f4628b006f2430ad63cac97e",
      "commitAuthor": "Sunil G",
      "commitDateOld": "22/05/17 2:26 PM",
      "commitNameOld": "c583ab02c730be0a63d974039a78f2dc67dc2db6",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 97.39,
      "commitsBetweenForRepo": 559,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,78 +1,84 @@\n   private PriorityQueue\u003cTempAppPerPartition\u003e createTempAppForResCalculation(\n       TempQueuePerPartition tq, Collection\u003cFiCaSchedulerApp\u003e apps,\n       Resource clusterResource,\n       Map\u003cString, Resource\u003e perUserAMUsed) {\n     TAPriorityComparator taComparator \u003d new TAPriorityComparator();\n     PriorityQueue\u003cTempAppPerPartition\u003e orderedByPriority \u003d new PriorityQueue\u003c\u003e(\n         100, taComparator);\n \n     String partition \u003d tq.partition;\n     Map\u003cString, TempUserPerPartition\u003e usersPerPartition \u003d tq\n         .getUsersPerPartition();\n \n     // have an internal temp app structure to store intermediate data(priority)\n     for (FiCaSchedulerApp app : apps) {\n \n       Resource used \u003d app.getAppAttemptResourceUsage().getUsed(partition);\n       Resource amUsed \u003d null;\n       if (!app.isWaitingForAMContainer()) {\n         amUsed \u003d app.getAMResource(partition);\n       }\n       Resource pending \u003d app.getTotalPendingRequestsPerPartition()\n           .get(partition);\n       Resource reserved \u003d app.getAppAttemptResourceUsage()\n           .getReserved(partition);\n \n       used \u003d (used \u003d\u003d null) ? Resources.createResource(0, 0) : used;\n       amUsed \u003d (amUsed \u003d\u003d null) ? Resources.createResource(0, 0) : amUsed;\n       pending \u003d (pending \u003d\u003d null) ? Resources.createResource(0, 0) : pending;\n       reserved \u003d (reserved \u003d\u003d null) ? Resources.createResource(0, 0) : reserved;\n \n       HashSet\u003cString\u003e partitions \u003d new HashSet\u003cString\u003e(\n           app.getAppAttemptResourceUsage().getNodePartitionsSet());\n       partitions.addAll(app.getTotalPendingRequestsPerPartition().keySet());\n \n       // Create TempAppPerQueue for further calculation.\n       TempAppPerPartition tmpApp \u003d new TempAppPerPartition(app,\n           Resources.clone(used), Resources.clone(amUsed),\n           Resources.clone(reserved), Resources.clone(pending));\n \n       // Set ideal allocation of app as 0.\n       tmpApp.idealAssigned \u003d Resources.createResource(0, 0);\n \n       orderedByPriority.add(tmpApp);\n \n       // Create a TempUserPerPartition structure to hold more information\n       // regarding each user\u0027s entities such as UserLimit etc. This could\n       // be kept in a user to TempUserPerPartition map for further reference.\n       String userName \u003d app.getUser();\n       if (!usersPerPartition.containsKey(userName)) {\n         ResourceUsage userResourceUsage \u003d tq.leafQueue.getUser(userName)\n             .getResourceUsage();\n \n+        // perUserAMUsed was populated with running apps, now we are looping\n+        // through both running and pending apps.\n+        Resource userSpecificAmUsed \u003d perUserAMUsed.get(userName);\n+        amUsed \u003d (userSpecificAmUsed \u003d\u003d null)\n+            ? Resources.none() : userSpecificAmUsed;\n+\n         TempUserPerPartition tmpUser \u003d new TempUserPerPartition(\n             tq.leafQueue.getUser(userName), tq.queueName,\n             Resources.clone(userResourceUsage.getUsed(partition)),\n-            Resources.clone(perUserAMUsed.get(userName)),\n+            Resources.clone(userSpecificAmUsed),\n             Resources.clone(userResourceUsage.getReserved(partition)),\n             Resources.none());\n \n         Resource userLimitResource \u003d Resources.clone(\n             tq.leafQueue.getResourceLimitForAllUsers(userName, clusterResource,\n                 partition, SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY));\n \n         // Real AM used need not have to be considered for user-limit as well.\n         userLimitResource \u003d Resources.subtract(userLimitResource,\n             tmpUser.amUsed);\n         tmpUser.setUserLimit(userLimitResource);\n \n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"TempUser:\" + tmpUser);\n         }\n \n         tmpUser.idealAssigned \u003d Resources.createResource(0, 0);\n         tq.addUserPerPartition(userName, tmpUser);\n       }\n     }\n     return orderedByPriority;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private PriorityQueue\u003cTempAppPerPartition\u003e createTempAppForResCalculation(\n      TempQueuePerPartition tq, Collection\u003cFiCaSchedulerApp\u003e apps,\n      Resource clusterResource,\n      Map\u003cString, Resource\u003e perUserAMUsed) {\n    TAPriorityComparator taComparator \u003d new TAPriorityComparator();\n    PriorityQueue\u003cTempAppPerPartition\u003e orderedByPriority \u003d new PriorityQueue\u003c\u003e(\n        100, taComparator);\n\n    String partition \u003d tq.partition;\n    Map\u003cString, TempUserPerPartition\u003e usersPerPartition \u003d tq\n        .getUsersPerPartition();\n\n    // have an internal temp app structure to store intermediate data(priority)\n    for (FiCaSchedulerApp app : apps) {\n\n      Resource used \u003d app.getAppAttemptResourceUsage().getUsed(partition);\n      Resource amUsed \u003d null;\n      if (!app.isWaitingForAMContainer()) {\n        amUsed \u003d app.getAMResource(partition);\n      }\n      Resource pending \u003d app.getTotalPendingRequestsPerPartition()\n          .get(partition);\n      Resource reserved \u003d app.getAppAttemptResourceUsage()\n          .getReserved(partition);\n\n      used \u003d (used \u003d\u003d null) ? Resources.createResource(0, 0) : used;\n      amUsed \u003d (amUsed \u003d\u003d null) ? Resources.createResource(0, 0) : amUsed;\n      pending \u003d (pending \u003d\u003d null) ? Resources.createResource(0, 0) : pending;\n      reserved \u003d (reserved \u003d\u003d null) ? Resources.createResource(0, 0) : reserved;\n\n      HashSet\u003cString\u003e partitions \u003d new HashSet\u003cString\u003e(\n          app.getAppAttemptResourceUsage().getNodePartitionsSet());\n      partitions.addAll(app.getTotalPendingRequestsPerPartition().keySet());\n\n      // Create TempAppPerQueue for further calculation.\n      TempAppPerPartition tmpApp \u003d new TempAppPerPartition(app,\n          Resources.clone(used), Resources.clone(amUsed),\n          Resources.clone(reserved), Resources.clone(pending));\n\n      // Set ideal allocation of app as 0.\n      tmpApp.idealAssigned \u003d Resources.createResource(0, 0);\n\n      orderedByPriority.add(tmpApp);\n\n      // Create a TempUserPerPartition structure to hold more information\n      // regarding each user\u0027s entities such as UserLimit etc. This could\n      // be kept in a user to TempUserPerPartition map for further reference.\n      String userName \u003d app.getUser();\n      if (!usersPerPartition.containsKey(userName)) {\n        ResourceUsage userResourceUsage \u003d tq.leafQueue.getUser(userName)\n            .getResourceUsage();\n\n        // perUserAMUsed was populated with running apps, now we are looping\n        // through both running and pending apps.\n        Resource userSpecificAmUsed \u003d perUserAMUsed.get(userName);\n        amUsed \u003d (userSpecificAmUsed \u003d\u003d null)\n            ? Resources.none() : userSpecificAmUsed;\n\n        TempUserPerPartition tmpUser \u003d new TempUserPerPartition(\n            tq.leafQueue.getUser(userName), tq.queueName,\n            Resources.clone(userResourceUsage.getUsed(partition)),\n            Resources.clone(userSpecificAmUsed),\n            Resources.clone(userResourceUsage.getReserved(partition)),\n            Resources.none());\n\n        Resource userLimitResource \u003d Resources.clone(\n            tq.leafQueue.getResourceLimitForAllUsers(userName, clusterResource,\n                partition, SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY));\n\n        // Real AM used need not have to be considered for user-limit as well.\n        userLimitResource \u003d Resources.subtract(userLimitResource,\n            tmpUser.amUsed);\n        tmpUser.setUserLimit(userLimitResource);\n\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"TempUser:\" + tmpUser);\n        }\n\n        tmpUser.idealAssigned \u003d Resources.createResource(0, 0);\n        tq.addUserPerPartition(userName, tmpUser);\n      }\n    }\n    return orderedByPriority;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/FifoIntraQueuePreemptionPlugin.java",
      "extendedDetails": {}
    },
    "c583ab02c730be0a63d974039a78f2dc67dc2db6": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-2113. Add cross-user preemption within CapacityScheduler\u0027s leaf-queue. (Sunil G via wangda)\n\nChange-Id: I9b19f69788068be05b3295247cdd7b972f8a573c\n",
      "commitDate": "22/05/17 2:26 PM",
      "commitName": "c583ab02c730be0a63d974039a78f2dc67dc2db6",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-2113. Add cross-user preemption within CapacityScheduler\u0027s leaf-queue. (Sunil G via wangda)\n\nChange-Id: I9b19f69788068be05b3295247cdd7b972f8a573c\n",
          "commitDate": "22/05/17 2:26 PM",
          "commitName": "c583ab02c730be0a63d974039a78f2dc67dc2db6",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "09/02/17 10:23 AM",
          "commitNameOld": "5fb723bb77722d41df6959eee23e1b0cfeb5584e",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 102.13,
          "commitsBetweenForRepo": 587,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,78 @@\n   private PriorityQueue\u003cTempAppPerPartition\u003e createTempAppForResCalculation(\n-      String partition, Collection\u003cFiCaSchedulerApp\u003e apps,\n-      TAPriorityComparator taComparator) {\n+      TempQueuePerPartition tq, Collection\u003cFiCaSchedulerApp\u003e apps,\n+      Resource clusterResource,\n+      Map\u003cString, Resource\u003e perUserAMUsed) {\n+    TAPriorityComparator taComparator \u003d new TAPriorityComparator();\n     PriorityQueue\u003cTempAppPerPartition\u003e orderedByPriority \u003d new PriorityQueue\u003c\u003e(\n         100, taComparator);\n \n+    String partition \u003d tq.partition;\n+    Map\u003cString, TempUserPerPartition\u003e usersPerPartition \u003d tq\n+        .getUsersPerPartition();\n+\n     // have an internal temp app structure to store intermediate data(priority)\n     for (FiCaSchedulerApp app : apps) {\n \n       Resource used \u003d app.getAppAttemptResourceUsage().getUsed(partition);\n       Resource amUsed \u003d null;\n       if (!app.isWaitingForAMContainer()) {\n         amUsed \u003d app.getAMResource(partition);\n       }\n       Resource pending \u003d app.getTotalPendingRequestsPerPartition()\n           .get(partition);\n       Resource reserved \u003d app.getAppAttemptResourceUsage()\n           .getReserved(partition);\n \n       used \u003d (used \u003d\u003d null) ? Resources.createResource(0, 0) : used;\n       amUsed \u003d (amUsed \u003d\u003d null) ? Resources.createResource(0, 0) : amUsed;\n       pending \u003d (pending \u003d\u003d null) ? Resources.createResource(0, 0) : pending;\n       reserved \u003d (reserved \u003d\u003d null) ? Resources.createResource(0, 0) : reserved;\n \n       HashSet\u003cString\u003e partitions \u003d new HashSet\u003cString\u003e(\n           app.getAppAttemptResourceUsage().getNodePartitionsSet());\n       partitions.addAll(app.getTotalPendingRequestsPerPartition().keySet());\n \n       // Create TempAppPerQueue for further calculation.\n       TempAppPerPartition tmpApp \u003d new TempAppPerPartition(app,\n           Resources.clone(used), Resources.clone(amUsed),\n           Resources.clone(reserved), Resources.clone(pending));\n \n       // Set ideal allocation of app as 0.\n       tmpApp.idealAssigned \u003d Resources.createResource(0, 0);\n \n       orderedByPriority.add(tmpApp);\n+\n+      // Create a TempUserPerPartition structure to hold more information\n+      // regarding each user\u0027s entities such as UserLimit etc. This could\n+      // be kept in a user to TempUserPerPartition map for further reference.\n+      String userName \u003d app.getUser();\n+      if (!usersPerPartition.containsKey(userName)) {\n+        ResourceUsage userResourceUsage \u003d tq.leafQueue.getUser(userName)\n+            .getResourceUsage();\n+\n+        TempUserPerPartition tmpUser \u003d new TempUserPerPartition(\n+            tq.leafQueue.getUser(userName), tq.queueName,\n+            Resources.clone(userResourceUsage.getUsed(partition)),\n+            Resources.clone(perUserAMUsed.get(userName)),\n+            Resources.clone(userResourceUsage.getReserved(partition)),\n+            Resources.none());\n+\n+        Resource userLimitResource \u003d Resources.clone(\n+            tq.leafQueue.getResourceLimitForAllUsers(userName, clusterResource,\n+                partition, SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY));\n+\n+        // Real AM used need not have to be considered for user-limit as well.\n+        userLimitResource \u003d Resources.subtract(userLimitResource,\n+            tmpUser.amUsed);\n+        tmpUser.setUserLimit(userLimitResource);\n+\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"TempUser:\" + tmpUser);\n+        }\n+\n+        tmpUser.idealAssigned \u003d Resources.createResource(0, 0);\n+        tq.addUserPerPartition(userName, tmpUser);\n+      }\n     }\n     return orderedByPriority;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private PriorityQueue\u003cTempAppPerPartition\u003e createTempAppForResCalculation(\n      TempQueuePerPartition tq, Collection\u003cFiCaSchedulerApp\u003e apps,\n      Resource clusterResource,\n      Map\u003cString, Resource\u003e perUserAMUsed) {\n    TAPriorityComparator taComparator \u003d new TAPriorityComparator();\n    PriorityQueue\u003cTempAppPerPartition\u003e orderedByPriority \u003d new PriorityQueue\u003c\u003e(\n        100, taComparator);\n\n    String partition \u003d tq.partition;\n    Map\u003cString, TempUserPerPartition\u003e usersPerPartition \u003d tq\n        .getUsersPerPartition();\n\n    // have an internal temp app structure to store intermediate data(priority)\n    for (FiCaSchedulerApp app : apps) {\n\n      Resource used \u003d app.getAppAttemptResourceUsage().getUsed(partition);\n      Resource amUsed \u003d null;\n      if (!app.isWaitingForAMContainer()) {\n        amUsed \u003d app.getAMResource(partition);\n      }\n      Resource pending \u003d app.getTotalPendingRequestsPerPartition()\n          .get(partition);\n      Resource reserved \u003d app.getAppAttemptResourceUsage()\n          .getReserved(partition);\n\n      used \u003d (used \u003d\u003d null) ? Resources.createResource(0, 0) : used;\n      amUsed \u003d (amUsed \u003d\u003d null) ? Resources.createResource(0, 0) : amUsed;\n      pending \u003d (pending \u003d\u003d null) ? Resources.createResource(0, 0) : pending;\n      reserved \u003d (reserved \u003d\u003d null) ? Resources.createResource(0, 0) : reserved;\n\n      HashSet\u003cString\u003e partitions \u003d new HashSet\u003cString\u003e(\n          app.getAppAttemptResourceUsage().getNodePartitionsSet());\n      partitions.addAll(app.getTotalPendingRequestsPerPartition().keySet());\n\n      // Create TempAppPerQueue for further calculation.\n      TempAppPerPartition tmpApp \u003d new TempAppPerPartition(app,\n          Resources.clone(used), Resources.clone(amUsed),\n          Resources.clone(reserved), Resources.clone(pending));\n\n      // Set ideal allocation of app as 0.\n      tmpApp.idealAssigned \u003d Resources.createResource(0, 0);\n\n      orderedByPriority.add(tmpApp);\n\n      // Create a TempUserPerPartition structure to hold more information\n      // regarding each user\u0027s entities such as UserLimit etc. This could\n      // be kept in a user to TempUserPerPartition map for further reference.\n      String userName \u003d app.getUser();\n      if (!usersPerPartition.containsKey(userName)) {\n        ResourceUsage userResourceUsage \u003d tq.leafQueue.getUser(userName)\n            .getResourceUsage();\n\n        TempUserPerPartition tmpUser \u003d new TempUserPerPartition(\n            tq.leafQueue.getUser(userName), tq.queueName,\n            Resources.clone(userResourceUsage.getUsed(partition)),\n            Resources.clone(perUserAMUsed.get(userName)),\n            Resources.clone(userResourceUsage.getReserved(partition)),\n            Resources.none());\n\n        Resource userLimitResource \u003d Resources.clone(\n            tq.leafQueue.getResourceLimitForAllUsers(userName, clusterResource,\n                partition, SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY));\n\n        // Real AM used need not have to be considered for user-limit as well.\n        userLimitResource \u003d Resources.subtract(userLimitResource,\n            tmpUser.amUsed);\n        tmpUser.setUserLimit(userLimitResource);\n\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"TempUser:\" + tmpUser);\n        }\n\n        tmpUser.idealAssigned \u003d Resources.createResource(0, 0);\n        tq.addUserPerPartition(userName, tmpUser);\n      }\n    }\n    return orderedByPriority;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/FifoIntraQueuePreemptionPlugin.java",
          "extendedDetails": {
            "oldValue": "[partition-String, apps-Collection\u003cFiCaSchedulerApp\u003e, taComparator-TAPriorityComparator]",
            "newValue": "[tq-TempQueuePerPartition, apps-Collection\u003cFiCaSchedulerApp\u003e, clusterResource-Resource, perUserAMUsed-Map\u003cString,Resource\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2113. Add cross-user preemption within CapacityScheduler\u0027s leaf-queue. (Sunil G via wangda)\n\nChange-Id: I9b19f69788068be05b3295247cdd7b972f8a573c\n",
          "commitDate": "22/05/17 2:26 PM",
          "commitName": "c583ab02c730be0a63d974039a78f2dc67dc2db6",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "09/02/17 10:23 AM",
          "commitNameOld": "5fb723bb77722d41df6959eee23e1b0cfeb5584e",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 102.13,
          "commitsBetweenForRepo": 587,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,78 @@\n   private PriorityQueue\u003cTempAppPerPartition\u003e createTempAppForResCalculation(\n-      String partition, Collection\u003cFiCaSchedulerApp\u003e apps,\n-      TAPriorityComparator taComparator) {\n+      TempQueuePerPartition tq, Collection\u003cFiCaSchedulerApp\u003e apps,\n+      Resource clusterResource,\n+      Map\u003cString, Resource\u003e perUserAMUsed) {\n+    TAPriorityComparator taComparator \u003d new TAPriorityComparator();\n     PriorityQueue\u003cTempAppPerPartition\u003e orderedByPriority \u003d new PriorityQueue\u003c\u003e(\n         100, taComparator);\n \n+    String partition \u003d tq.partition;\n+    Map\u003cString, TempUserPerPartition\u003e usersPerPartition \u003d tq\n+        .getUsersPerPartition();\n+\n     // have an internal temp app structure to store intermediate data(priority)\n     for (FiCaSchedulerApp app : apps) {\n \n       Resource used \u003d app.getAppAttemptResourceUsage().getUsed(partition);\n       Resource amUsed \u003d null;\n       if (!app.isWaitingForAMContainer()) {\n         amUsed \u003d app.getAMResource(partition);\n       }\n       Resource pending \u003d app.getTotalPendingRequestsPerPartition()\n           .get(partition);\n       Resource reserved \u003d app.getAppAttemptResourceUsage()\n           .getReserved(partition);\n \n       used \u003d (used \u003d\u003d null) ? Resources.createResource(0, 0) : used;\n       amUsed \u003d (amUsed \u003d\u003d null) ? Resources.createResource(0, 0) : amUsed;\n       pending \u003d (pending \u003d\u003d null) ? Resources.createResource(0, 0) : pending;\n       reserved \u003d (reserved \u003d\u003d null) ? Resources.createResource(0, 0) : reserved;\n \n       HashSet\u003cString\u003e partitions \u003d new HashSet\u003cString\u003e(\n           app.getAppAttemptResourceUsage().getNodePartitionsSet());\n       partitions.addAll(app.getTotalPendingRequestsPerPartition().keySet());\n \n       // Create TempAppPerQueue for further calculation.\n       TempAppPerPartition tmpApp \u003d new TempAppPerPartition(app,\n           Resources.clone(used), Resources.clone(amUsed),\n           Resources.clone(reserved), Resources.clone(pending));\n \n       // Set ideal allocation of app as 0.\n       tmpApp.idealAssigned \u003d Resources.createResource(0, 0);\n \n       orderedByPriority.add(tmpApp);\n+\n+      // Create a TempUserPerPartition structure to hold more information\n+      // regarding each user\u0027s entities such as UserLimit etc. This could\n+      // be kept in a user to TempUserPerPartition map for further reference.\n+      String userName \u003d app.getUser();\n+      if (!usersPerPartition.containsKey(userName)) {\n+        ResourceUsage userResourceUsage \u003d tq.leafQueue.getUser(userName)\n+            .getResourceUsage();\n+\n+        TempUserPerPartition tmpUser \u003d new TempUserPerPartition(\n+            tq.leafQueue.getUser(userName), tq.queueName,\n+            Resources.clone(userResourceUsage.getUsed(partition)),\n+            Resources.clone(perUserAMUsed.get(userName)),\n+            Resources.clone(userResourceUsage.getReserved(partition)),\n+            Resources.none());\n+\n+        Resource userLimitResource \u003d Resources.clone(\n+            tq.leafQueue.getResourceLimitForAllUsers(userName, clusterResource,\n+                partition, SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY));\n+\n+        // Real AM used need not have to be considered for user-limit as well.\n+        userLimitResource \u003d Resources.subtract(userLimitResource,\n+            tmpUser.amUsed);\n+        tmpUser.setUserLimit(userLimitResource);\n+\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"TempUser:\" + tmpUser);\n+        }\n+\n+        tmpUser.idealAssigned \u003d Resources.createResource(0, 0);\n+        tq.addUserPerPartition(userName, tmpUser);\n+      }\n     }\n     return orderedByPriority;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private PriorityQueue\u003cTempAppPerPartition\u003e createTempAppForResCalculation(\n      TempQueuePerPartition tq, Collection\u003cFiCaSchedulerApp\u003e apps,\n      Resource clusterResource,\n      Map\u003cString, Resource\u003e perUserAMUsed) {\n    TAPriorityComparator taComparator \u003d new TAPriorityComparator();\n    PriorityQueue\u003cTempAppPerPartition\u003e orderedByPriority \u003d new PriorityQueue\u003c\u003e(\n        100, taComparator);\n\n    String partition \u003d tq.partition;\n    Map\u003cString, TempUserPerPartition\u003e usersPerPartition \u003d tq\n        .getUsersPerPartition();\n\n    // have an internal temp app structure to store intermediate data(priority)\n    for (FiCaSchedulerApp app : apps) {\n\n      Resource used \u003d app.getAppAttemptResourceUsage().getUsed(partition);\n      Resource amUsed \u003d null;\n      if (!app.isWaitingForAMContainer()) {\n        amUsed \u003d app.getAMResource(partition);\n      }\n      Resource pending \u003d app.getTotalPendingRequestsPerPartition()\n          .get(partition);\n      Resource reserved \u003d app.getAppAttemptResourceUsage()\n          .getReserved(partition);\n\n      used \u003d (used \u003d\u003d null) ? Resources.createResource(0, 0) : used;\n      amUsed \u003d (amUsed \u003d\u003d null) ? Resources.createResource(0, 0) : amUsed;\n      pending \u003d (pending \u003d\u003d null) ? Resources.createResource(0, 0) : pending;\n      reserved \u003d (reserved \u003d\u003d null) ? Resources.createResource(0, 0) : reserved;\n\n      HashSet\u003cString\u003e partitions \u003d new HashSet\u003cString\u003e(\n          app.getAppAttemptResourceUsage().getNodePartitionsSet());\n      partitions.addAll(app.getTotalPendingRequestsPerPartition().keySet());\n\n      // Create TempAppPerQueue for further calculation.\n      TempAppPerPartition tmpApp \u003d new TempAppPerPartition(app,\n          Resources.clone(used), Resources.clone(amUsed),\n          Resources.clone(reserved), Resources.clone(pending));\n\n      // Set ideal allocation of app as 0.\n      tmpApp.idealAssigned \u003d Resources.createResource(0, 0);\n\n      orderedByPriority.add(tmpApp);\n\n      // Create a TempUserPerPartition structure to hold more information\n      // regarding each user\u0027s entities such as UserLimit etc. This could\n      // be kept in a user to TempUserPerPartition map for further reference.\n      String userName \u003d app.getUser();\n      if (!usersPerPartition.containsKey(userName)) {\n        ResourceUsage userResourceUsage \u003d tq.leafQueue.getUser(userName)\n            .getResourceUsage();\n\n        TempUserPerPartition tmpUser \u003d new TempUserPerPartition(\n            tq.leafQueue.getUser(userName), tq.queueName,\n            Resources.clone(userResourceUsage.getUsed(partition)),\n            Resources.clone(perUserAMUsed.get(userName)),\n            Resources.clone(userResourceUsage.getReserved(partition)),\n            Resources.none());\n\n        Resource userLimitResource \u003d Resources.clone(\n            tq.leafQueue.getResourceLimitForAllUsers(userName, clusterResource,\n                partition, SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY));\n\n        // Real AM used need not have to be considered for user-limit as well.\n        userLimitResource \u003d Resources.subtract(userLimitResource,\n            tmpUser.amUsed);\n        tmpUser.setUserLimit(userLimitResource);\n\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"TempUser:\" + tmpUser);\n        }\n\n        tmpUser.idealAssigned \u003d Resources.createResource(0, 0);\n        tq.addUserPerPartition(userName, tmpUser);\n      }\n    }\n    return orderedByPriority;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/FifoIntraQueuePreemptionPlugin.java",
          "extendedDetails": {}
        }
      ]
    },
    "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2009. CapacityScheduler: Add intra-queue preemption for app priority support. (Sunil G via wangda)\n",
      "commitDate": "31/10/16 3:18 PM",
      "commitName": "90dd3a8148468ac37a3f2173ad8d45e38bfcb0c9",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,40 @@\n+  private PriorityQueue\u003cTempAppPerPartition\u003e createTempAppForResCalculation(\n+      String partition, Collection\u003cFiCaSchedulerApp\u003e apps,\n+      TAPriorityComparator taComparator) {\n+    PriorityQueue\u003cTempAppPerPartition\u003e orderedByPriority \u003d new PriorityQueue\u003c\u003e(\n+        100, taComparator);\n+\n+    // have an internal temp app structure to store intermediate data(priority)\n+    for (FiCaSchedulerApp app : apps) {\n+\n+      Resource used \u003d app.getAppAttemptResourceUsage().getUsed(partition);\n+      Resource amUsed \u003d null;\n+      if (!app.isWaitingForAMContainer()) {\n+        amUsed \u003d app.getAMResource(partition);\n+      }\n+      Resource pending \u003d app.getTotalPendingRequestsPerPartition()\n+          .get(partition);\n+      Resource reserved \u003d app.getAppAttemptResourceUsage()\n+          .getReserved(partition);\n+\n+      used \u003d (used \u003d\u003d null) ? Resources.createResource(0, 0) : used;\n+      amUsed \u003d (amUsed \u003d\u003d null) ? Resources.createResource(0, 0) : amUsed;\n+      pending \u003d (pending \u003d\u003d null) ? Resources.createResource(0, 0) : pending;\n+      reserved \u003d (reserved \u003d\u003d null) ? Resources.createResource(0, 0) : reserved;\n+\n+      HashSet\u003cString\u003e partitions \u003d new HashSet\u003cString\u003e(\n+          app.getAppAttemptResourceUsage().getNodePartitionsSet());\n+      partitions.addAll(app.getTotalPendingRequestsPerPartition().keySet());\n+\n+      // Create TempAppPerQueue for further calculation.\n+      TempAppPerPartition tmpApp \u003d new TempAppPerPartition(app,\n+          Resources.clone(used), Resources.clone(amUsed),\n+          Resources.clone(reserved), Resources.clone(pending));\n+\n+      // Set ideal allocation of app as 0.\n+      tmpApp.idealAssigned \u003d Resources.createResource(0, 0);\n+\n+      orderedByPriority.add(tmpApp);\n+    }\n+    return orderedByPriority;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private PriorityQueue\u003cTempAppPerPartition\u003e createTempAppForResCalculation(\n      String partition, Collection\u003cFiCaSchedulerApp\u003e apps,\n      TAPriorityComparator taComparator) {\n    PriorityQueue\u003cTempAppPerPartition\u003e orderedByPriority \u003d new PriorityQueue\u003c\u003e(\n        100, taComparator);\n\n    // have an internal temp app structure to store intermediate data(priority)\n    for (FiCaSchedulerApp app : apps) {\n\n      Resource used \u003d app.getAppAttemptResourceUsage().getUsed(partition);\n      Resource amUsed \u003d null;\n      if (!app.isWaitingForAMContainer()) {\n        amUsed \u003d app.getAMResource(partition);\n      }\n      Resource pending \u003d app.getTotalPendingRequestsPerPartition()\n          .get(partition);\n      Resource reserved \u003d app.getAppAttemptResourceUsage()\n          .getReserved(partition);\n\n      used \u003d (used \u003d\u003d null) ? Resources.createResource(0, 0) : used;\n      amUsed \u003d (amUsed \u003d\u003d null) ? Resources.createResource(0, 0) : amUsed;\n      pending \u003d (pending \u003d\u003d null) ? Resources.createResource(0, 0) : pending;\n      reserved \u003d (reserved \u003d\u003d null) ? Resources.createResource(0, 0) : reserved;\n\n      HashSet\u003cString\u003e partitions \u003d new HashSet\u003cString\u003e(\n          app.getAppAttemptResourceUsage().getNodePartitionsSet());\n      partitions.addAll(app.getTotalPendingRequestsPerPartition().keySet());\n\n      // Create TempAppPerQueue for further calculation.\n      TempAppPerPartition tmpApp \u003d new TempAppPerPartition(app,\n          Resources.clone(used), Resources.clone(amUsed),\n          Resources.clone(reserved), Resources.clone(pending));\n\n      // Set ideal allocation of app as 0.\n      tmpApp.idealAssigned \u003d Resources.createResource(0, 0);\n\n      orderedByPriority.add(tmpApp);\n    }\n    return orderedByPriority;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/FifoIntraQueuePreemptionPlugin.java"
    }
  }
}