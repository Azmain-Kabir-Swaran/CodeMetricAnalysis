{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TimelineFilterUtils.java",
  "functionName": "createHBaseFilterList",
  "functionId": "createHBaseFilterList___colPrefix-ColumnPrefix__T____filterList-TimelineFilterList",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/filter/TimelineFilterUtils.java",
  "functionStartLine": 270,
  "functionEndLine": 312,
  "numCommitsSeen": 9,
  "timeTaken": 2377,
  "changeHistory": [
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276",
    "c2efdc415a13496da43a9a8d13c73d88ca8565a1",
    "1f710484e5b8ab4d5c67379c012004e8a4242d15"
  ],
  "changeHistoryShort": {
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2": "Yfilerename",
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276": "Yfilerename",
    "c2efdc415a13496da43a9a8d13c73d88ca8565a1": "Ymultichange(Yexceptionschange,Ybodychange)",
    "1f710484e5b8ab4d5c67379c012004e8a4242d15": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2": {
      "type": "Yfilerename",
      "commitMessage": "YARN-7919. Refactor timelineservice-hbase module into submodules. Contributed by Haibo Chen.\n",
      "commitDate": "17/02/18 7:00 AM",
      "commitName": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "17/02/18 3:24 AM",
      "commitNameOld": "a1e56a62863d8d494af309ec5f476c4b7e4d5ef9",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 0.15,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,43 @@\n-  public static \u003cT\u003e FilterList createHBaseFilterList(ColumnPrefix\u003cT\u003e colPrefix,\n+  public static \u003cT extends BaseTable\u003cT\u003e\u003e FilterList createHBaseFilterList(\n+      ColumnPrefix\u003cT\u003e colPrefix,\n       TimelineFilterList filterList) throws IOException {\n     FilterList list \u003d\n         new FilterList(getHBaseOperator(filterList.getOperator()));\n     for (TimelineFilter filter : filterList.getFilterList()) {\n       switch(filter.getFilterType()) {\n       case LIST:\n         list.addFilter(createHBaseFilterList(colPrefix,\n             (TimelineFilterList)filter));\n         break;\n       case PREFIX:\n         list.addFilter(createHBaseColQualPrefixFilter(colPrefix,\n             (TimelinePrefixFilter)filter));\n         break;\n       case COMPARE:\n         TimelineCompareFilter compareFilter \u003d (TimelineCompareFilter)filter;\n         list.addFilter(\n             createHBaseSingleColValueFilter(\n                 colPrefix.getColumnFamilyBytes(),\n                 colPrefix.getColumnPrefixBytes(compareFilter.getKey()),\n                 colPrefix.getValueConverter().\n                     encodeValue(compareFilter.getValue()),\n                 getHBaseCompareOp(compareFilter.getCompareOp()),\n                 compareFilter.getKeyMustExist()));\n         break;\n       case KEY_VALUE:\n         TimelineKeyValueFilter kvFilter \u003d (TimelineKeyValueFilter)filter;\n         list.addFilter(\n             createHBaseSingleColValueFilter(\n                 colPrefix.getColumnFamilyBytes(),\n                 colPrefix.getColumnPrefixBytes(kvFilter.getKey()),\n                 colPrefix.getValueConverter().encodeValue(kvFilter.getValue()),\n                 getHBaseCompareOp(kvFilter.getCompareOp()),\n                 kvFilter.getKeyMustExist()));\n         break;\n       default:\n         LOG.info(\"Unexpected filter type \" + filter.getFilterType());\n         break;\n       }\n     }\n     return list;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static \u003cT extends BaseTable\u003cT\u003e\u003e FilterList createHBaseFilterList(\n      ColumnPrefix\u003cT\u003e colPrefix,\n      TimelineFilterList filterList) throws IOException {\n    FilterList list \u003d\n        new FilterList(getHBaseOperator(filterList.getOperator()));\n    for (TimelineFilter filter : filterList.getFilterList()) {\n      switch(filter.getFilterType()) {\n      case LIST:\n        list.addFilter(createHBaseFilterList(colPrefix,\n            (TimelineFilterList)filter));\n        break;\n      case PREFIX:\n        list.addFilter(createHBaseColQualPrefixFilter(colPrefix,\n            (TimelinePrefixFilter)filter));\n        break;\n      case COMPARE:\n        TimelineCompareFilter compareFilter \u003d (TimelineCompareFilter)filter;\n        list.addFilter(\n            createHBaseSingleColValueFilter(\n                colPrefix.getColumnFamilyBytes(),\n                colPrefix.getColumnPrefixBytes(compareFilter.getKey()),\n                colPrefix.getValueConverter().\n                    encodeValue(compareFilter.getValue()),\n                getHBaseCompareOp(compareFilter.getCompareOp()),\n                compareFilter.getKeyMustExist()));\n        break;\n      case KEY_VALUE:\n        TimelineKeyValueFilter kvFilter \u003d (TimelineKeyValueFilter)filter;\n        list.addFilter(\n            createHBaseSingleColValueFilter(\n                colPrefix.getColumnFamilyBytes(),\n                colPrefix.getColumnPrefixBytes(kvFilter.getKey()),\n                colPrefix.getValueConverter().encodeValue(kvFilter.getValue()),\n                getHBaseCompareOp(kvFilter.getCompareOp()),\n                kvFilter.getKeyMustExist()));\n        break;\n      default:\n        LOG.info(\"Unexpected filter type \" + filter.getFilterType());\n        break;\n      }\n    }\n    return list;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/filter/TimelineFilterUtils.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/filter/TimelineFilterUtils.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/filter/TimelineFilterUtils.java"
      }
    },
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276": {
      "type": "Yfilerename",
      "commitMessage": "YARN-5928. Move ATSv2 HBase backend code into a new module that is only dependent at runtime by yarn servers. Contributed by Haibo Chen.\n",
      "commitDate": "19/01/17 8:52 PM",
      "commitName": "b01514f65bc6090a50a583f67d1ecb5d74b6d276",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "19/01/17 5:32 PM",
      "commitNameOld": "60865c8ea08053f3d6ac23f81c3376a3de3ca996",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 0.14,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static \u003cT\u003e FilterList createHBaseFilterList(ColumnPrefix\u003cT\u003e colPrefix,\n      TimelineFilterList filterList) throws IOException {\n    FilterList list \u003d\n        new FilterList(getHBaseOperator(filterList.getOperator()));\n    for (TimelineFilter filter : filterList.getFilterList()) {\n      switch(filter.getFilterType()) {\n      case LIST:\n        list.addFilter(createHBaseFilterList(colPrefix,\n            (TimelineFilterList)filter));\n        break;\n      case PREFIX:\n        list.addFilter(createHBaseColQualPrefixFilter(colPrefix,\n            (TimelinePrefixFilter)filter));\n        break;\n      case COMPARE:\n        TimelineCompareFilter compareFilter \u003d (TimelineCompareFilter)filter;\n        list.addFilter(\n            createHBaseSingleColValueFilter(\n                colPrefix.getColumnFamilyBytes(),\n                colPrefix.getColumnPrefixBytes(compareFilter.getKey()),\n                colPrefix.getValueConverter().\n                    encodeValue(compareFilter.getValue()),\n                getHBaseCompareOp(compareFilter.getCompareOp()),\n                compareFilter.getKeyMustExist()));\n        break;\n      case KEY_VALUE:\n        TimelineKeyValueFilter kvFilter \u003d (TimelineKeyValueFilter)filter;\n        list.addFilter(\n            createHBaseSingleColValueFilter(\n                colPrefix.getColumnFamilyBytes(),\n                colPrefix.getColumnPrefixBytes(kvFilter.getKey()),\n                colPrefix.getValueConverter().encodeValue(kvFilter.getValue()),\n                getHBaseCompareOp(kvFilter.getCompareOp()),\n                kvFilter.getKeyMustExist()));\n        break;\n      default:\n        LOG.info(\"Unexpected filter type \" + filter.getFilterType());\n        break;\n      }\n    }\n    return list;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/filter/TimelineFilterUtils.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/filter/TimelineFilterUtils.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/filter/TimelineFilterUtils.java"
      }
    },
    "c2efdc415a13496da43a9a8d13c73d88ca8565a1": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-3863. Support complex filters in TimelineReader (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "c2efdc415a13496da43a9a8d13c73d88ca8565a1",
      "commitAuthor": "Sangjin Lee",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-3863. Support complex filters in TimelineReader (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "c2efdc415a13496da43a9a8d13c73d88ca8565a1",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "960af7d4717b8a8949d0b2e43949e7daab45aa88",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,42 @@\n   public static \u003cT\u003e FilterList createHBaseFilterList(ColumnPrefix\u003cT\u003e colPrefix,\n-      TimelineFilterList filterList) {\n+      TimelineFilterList filterList) throws IOException {\n     FilterList list \u003d\n         new FilterList(getHBaseOperator(filterList.getOperator()));\n     for (TimelineFilter filter : filterList.getFilterList()) {\n       switch(filter.getFilterType()) {\n       case LIST:\n-        list.addFilter(\n-            createHBaseFilterList(colPrefix, (TimelineFilterList)filter));\n+        list.addFilter(createHBaseFilterList(colPrefix,\n+            (TimelineFilterList)filter));\n         break;\n       case PREFIX:\n-        list.addFilter(createHBaseColQualPrefixFilter(\n-            colPrefix, (TimelinePrefixFilter)filter));\n+        list.addFilter(createHBaseColQualPrefixFilter(colPrefix,\n+            (TimelinePrefixFilter)filter));\n+        break;\n+      case COMPARE:\n+        TimelineCompareFilter compareFilter \u003d (TimelineCompareFilter)filter;\n+        list.addFilter(\n+            createHBaseSingleColValueFilter(\n+                colPrefix.getColumnFamilyBytes(),\n+                colPrefix.getColumnPrefixBytes(compareFilter.getKey()),\n+                colPrefix.getValueConverter().\n+                    encodeValue(compareFilter.getValue()),\n+                getHBaseCompareOp(compareFilter.getCompareOp()),\n+                compareFilter.getKeyMustExist()));\n+        break;\n+      case KEY_VALUE:\n+        TimelineKeyValueFilter kvFilter \u003d (TimelineKeyValueFilter)filter;\n+        list.addFilter(\n+            createHBaseSingleColValueFilter(\n+                colPrefix.getColumnFamilyBytes(),\n+                colPrefix.getColumnPrefixBytes(kvFilter.getKey()),\n+                colPrefix.getValueConverter().encodeValue(kvFilter.getValue()),\n+                getHBaseCompareOp(kvFilter.getCompareOp()),\n+                kvFilter.getKeyMustExist()));\n         break;\n       default:\n+        LOG.info(\"Unexpected filter type \" + filter.getFilterType());\n         break;\n       }\n     }\n     return list;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static \u003cT\u003e FilterList createHBaseFilterList(ColumnPrefix\u003cT\u003e colPrefix,\n      TimelineFilterList filterList) throws IOException {\n    FilterList list \u003d\n        new FilterList(getHBaseOperator(filterList.getOperator()));\n    for (TimelineFilter filter : filterList.getFilterList()) {\n      switch(filter.getFilterType()) {\n      case LIST:\n        list.addFilter(createHBaseFilterList(colPrefix,\n            (TimelineFilterList)filter));\n        break;\n      case PREFIX:\n        list.addFilter(createHBaseColQualPrefixFilter(colPrefix,\n            (TimelinePrefixFilter)filter));\n        break;\n      case COMPARE:\n        TimelineCompareFilter compareFilter \u003d (TimelineCompareFilter)filter;\n        list.addFilter(\n            createHBaseSingleColValueFilter(\n                colPrefix.getColumnFamilyBytes(),\n                colPrefix.getColumnPrefixBytes(compareFilter.getKey()),\n                colPrefix.getValueConverter().\n                    encodeValue(compareFilter.getValue()),\n                getHBaseCompareOp(compareFilter.getCompareOp()),\n                compareFilter.getKeyMustExist()));\n        break;\n      case KEY_VALUE:\n        TimelineKeyValueFilter kvFilter \u003d (TimelineKeyValueFilter)filter;\n        list.addFilter(\n            createHBaseSingleColValueFilter(\n                colPrefix.getColumnFamilyBytes(),\n                colPrefix.getColumnPrefixBytes(kvFilter.getKey()),\n                colPrefix.getValueConverter().encodeValue(kvFilter.getValue()),\n                getHBaseCompareOp(kvFilter.getCompareOp()),\n                kvFilter.getKeyMustExist()));\n        break;\n      default:\n        LOG.info(\"Unexpected filter type \" + filter.getFilterType());\n        break;\n      }\n    }\n    return list;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/filter/TimelineFilterUtils.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3863. Support complex filters in TimelineReader (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "c2efdc415a13496da43a9a8d13c73d88ca8565a1",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "960af7d4717b8a8949d0b2e43949e7daab45aa88",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,42 @@\n   public static \u003cT\u003e FilterList createHBaseFilterList(ColumnPrefix\u003cT\u003e colPrefix,\n-      TimelineFilterList filterList) {\n+      TimelineFilterList filterList) throws IOException {\n     FilterList list \u003d\n         new FilterList(getHBaseOperator(filterList.getOperator()));\n     for (TimelineFilter filter : filterList.getFilterList()) {\n       switch(filter.getFilterType()) {\n       case LIST:\n-        list.addFilter(\n-            createHBaseFilterList(colPrefix, (TimelineFilterList)filter));\n+        list.addFilter(createHBaseFilterList(colPrefix,\n+            (TimelineFilterList)filter));\n         break;\n       case PREFIX:\n-        list.addFilter(createHBaseColQualPrefixFilter(\n-            colPrefix, (TimelinePrefixFilter)filter));\n+        list.addFilter(createHBaseColQualPrefixFilter(colPrefix,\n+            (TimelinePrefixFilter)filter));\n+        break;\n+      case COMPARE:\n+        TimelineCompareFilter compareFilter \u003d (TimelineCompareFilter)filter;\n+        list.addFilter(\n+            createHBaseSingleColValueFilter(\n+                colPrefix.getColumnFamilyBytes(),\n+                colPrefix.getColumnPrefixBytes(compareFilter.getKey()),\n+                colPrefix.getValueConverter().\n+                    encodeValue(compareFilter.getValue()),\n+                getHBaseCompareOp(compareFilter.getCompareOp()),\n+                compareFilter.getKeyMustExist()));\n+        break;\n+      case KEY_VALUE:\n+        TimelineKeyValueFilter kvFilter \u003d (TimelineKeyValueFilter)filter;\n+        list.addFilter(\n+            createHBaseSingleColValueFilter(\n+                colPrefix.getColumnFamilyBytes(),\n+                colPrefix.getColumnPrefixBytes(kvFilter.getKey()),\n+                colPrefix.getValueConverter().encodeValue(kvFilter.getValue()),\n+                getHBaseCompareOp(kvFilter.getCompareOp()),\n+                kvFilter.getKeyMustExist()));\n         break;\n       default:\n+        LOG.info(\"Unexpected filter type \" + filter.getFilterType());\n         break;\n       }\n     }\n     return list;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static \u003cT\u003e FilterList createHBaseFilterList(ColumnPrefix\u003cT\u003e colPrefix,\n      TimelineFilterList filterList) throws IOException {\n    FilterList list \u003d\n        new FilterList(getHBaseOperator(filterList.getOperator()));\n    for (TimelineFilter filter : filterList.getFilterList()) {\n      switch(filter.getFilterType()) {\n      case LIST:\n        list.addFilter(createHBaseFilterList(colPrefix,\n            (TimelineFilterList)filter));\n        break;\n      case PREFIX:\n        list.addFilter(createHBaseColQualPrefixFilter(colPrefix,\n            (TimelinePrefixFilter)filter));\n        break;\n      case COMPARE:\n        TimelineCompareFilter compareFilter \u003d (TimelineCompareFilter)filter;\n        list.addFilter(\n            createHBaseSingleColValueFilter(\n                colPrefix.getColumnFamilyBytes(),\n                colPrefix.getColumnPrefixBytes(compareFilter.getKey()),\n                colPrefix.getValueConverter().\n                    encodeValue(compareFilter.getValue()),\n                getHBaseCompareOp(compareFilter.getCompareOp()),\n                compareFilter.getKeyMustExist()));\n        break;\n      case KEY_VALUE:\n        TimelineKeyValueFilter kvFilter \u003d (TimelineKeyValueFilter)filter;\n        list.addFilter(\n            createHBaseSingleColValueFilter(\n                colPrefix.getColumnFamilyBytes(),\n                colPrefix.getColumnPrefixBytes(kvFilter.getKey()),\n                colPrefix.getValueConverter().encodeValue(kvFilter.getValue()),\n                getHBaseCompareOp(kvFilter.getCompareOp()),\n                kvFilter.getKeyMustExist()));\n        break;\n      default:\n        LOG.info(\"Unexpected filter type \" + filter.getFilterType());\n        break;\n      }\n    }\n    return list;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/filter/TimelineFilterUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "1f710484e5b8ab4d5c67379c012004e8a4242d15": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3862. Support for fetching specific configs and metrics based on prefixes (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "1f710484e5b8ab4d5c67379c012004e8a4242d15",
      "commitAuthor": "Sangjin Lee",
      "diff": "@@ -0,0 +1,20 @@\n+  public static \u003cT\u003e FilterList createHBaseFilterList(ColumnPrefix\u003cT\u003e colPrefix,\n+      TimelineFilterList filterList) {\n+    FilterList list \u003d\n+        new FilterList(getHBaseOperator(filterList.getOperator()));\n+    for (TimelineFilter filter : filterList.getFilterList()) {\n+      switch(filter.getFilterType()) {\n+      case LIST:\n+        list.addFilter(\n+            createHBaseFilterList(colPrefix, (TimelineFilterList)filter));\n+        break;\n+      case PREFIX:\n+        list.addFilter(createHBaseColQualPrefixFilter(\n+            colPrefix, (TimelinePrefixFilter)filter));\n+        break;\n+      default:\n+        break;\n+      }\n+    }\n+    return list;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static \u003cT\u003e FilterList createHBaseFilterList(ColumnPrefix\u003cT\u003e colPrefix,\n      TimelineFilterList filterList) {\n    FilterList list \u003d\n        new FilterList(getHBaseOperator(filterList.getOperator()));\n    for (TimelineFilter filter : filterList.getFilterList()) {\n      switch(filter.getFilterType()) {\n      case LIST:\n        list.addFilter(\n            createHBaseFilterList(colPrefix, (TimelineFilterList)filter));\n        break;\n      case PREFIX:\n        list.addFilter(createHBaseColQualPrefixFilter(\n            colPrefix, (TimelinePrefixFilter)filter));\n        break;\n      default:\n        break;\n      }\n    }\n    return list;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/filter/TimelineFilterUtils.java"
    }
  }
}