{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "StripedBlockUtil.java",
  "functionName": "getStripingCellsOfByteRange",
  "functionId": "getStripingCellsOfByteRange___ecPolicy-ErasureCodingPolicy__cellSize-int__blockGroup-LocatedStripedBlock__rangeStartInBlockGroup-long__rangeEndInBlockGroup-long",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/util/StripedBlockUtil.java",
  "functionStartLine": 439,
  "functionEndLine": 470,
  "numCommitsSeen": 17,
  "timeTaken": 903,
  "changeHistory": [
    "dc735b286bb656903df49aee776d22ee0c61f860"
  ],
  "changeHistoryShort": {
    "dc735b286bb656903df49aee776d22ee0c61f860": "Ybodychange"
  },
  "changeHistoryDetails": {
    "dc735b286bb656903df49aee776d22ee0c61f860": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12860. StripedBlockUtil#getRangesInternalBlocks throws exception for the block group size larger than 2GB. (Contributed by Lei (Eddy) Xu)\n",
      "commitDate": "04/01/18 10:54 AM",
      "commitName": "dc735b286bb656903df49aee776d22ee0c61f860",
      "commitAuthor": "Lei Xu",
      "commitDateOld": "21/09/17 7:37 PM",
      "commitNameOld": "3baae4322e3f2035c0a99eb9e4306567883581d1",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 104.68,
      "commitsBetweenForRepo": 743,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,32 @@\n   private static StripingCell[] getStripingCellsOfByteRange(\n       ErasureCodingPolicy ecPolicy,\n       int cellSize, LocatedStripedBlock blockGroup,\n       long rangeStartInBlockGroup, long rangeEndInBlockGroup) {\n     Preconditions.checkArgument(\n         rangeStartInBlockGroup \u003c\u003d rangeEndInBlockGroup \u0026\u0026\n-            rangeEndInBlockGroup \u003c blockGroup.getBlockSize());\n+            rangeEndInBlockGroup \u003c blockGroup.getBlockSize(),\n+        \"start\u003d%s end\u003d%s blockSize\u003d%s\", rangeStartInBlockGroup,\n+        rangeEndInBlockGroup, blockGroup.getBlockSize());\n     long len \u003d rangeEndInBlockGroup - rangeStartInBlockGroup + 1;\n     int firstCellIdxInBG \u003d (int) (rangeStartInBlockGroup / cellSize);\n     int lastCellIdxInBG \u003d (int) (rangeEndInBlockGroup / cellSize);\n     int numCells \u003d lastCellIdxInBG - firstCellIdxInBG + 1;\n     StripingCell[] cells \u003d new StripingCell[numCells];\n \n     final int firstCellOffset \u003d (int) (rangeStartInBlockGroup % cellSize);\n     final int firstCellSize \u003d\n         (int) Math.min(cellSize - (rangeStartInBlockGroup % cellSize), len);\n     cells[0] \u003d new StripingCell(ecPolicy, firstCellSize, firstCellIdxInBG,\n         firstCellOffset);\n     if (lastCellIdxInBG !\u003d firstCellIdxInBG) {\n       final int lastCellSize \u003d (int) (rangeEndInBlockGroup % cellSize) + 1;\n       cells[numCells - 1] \u003d new StripingCell(ecPolicy, lastCellSize,\n           lastCellIdxInBG, 0);\n     }\n \n     for (int i \u003d 1; i \u003c numCells - 1; i++) {\n       cells[i] \u003d new StripingCell(ecPolicy, cellSize, i + firstCellIdxInBG, 0);\n     }\n \n     return cells;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static StripingCell[] getStripingCellsOfByteRange(\n      ErasureCodingPolicy ecPolicy,\n      int cellSize, LocatedStripedBlock blockGroup,\n      long rangeStartInBlockGroup, long rangeEndInBlockGroup) {\n    Preconditions.checkArgument(\n        rangeStartInBlockGroup \u003c\u003d rangeEndInBlockGroup \u0026\u0026\n            rangeEndInBlockGroup \u003c blockGroup.getBlockSize(),\n        \"start\u003d%s end\u003d%s blockSize\u003d%s\", rangeStartInBlockGroup,\n        rangeEndInBlockGroup, blockGroup.getBlockSize());\n    long len \u003d rangeEndInBlockGroup - rangeStartInBlockGroup + 1;\n    int firstCellIdxInBG \u003d (int) (rangeStartInBlockGroup / cellSize);\n    int lastCellIdxInBG \u003d (int) (rangeEndInBlockGroup / cellSize);\n    int numCells \u003d lastCellIdxInBG - firstCellIdxInBG + 1;\n    StripingCell[] cells \u003d new StripingCell[numCells];\n\n    final int firstCellOffset \u003d (int) (rangeStartInBlockGroup % cellSize);\n    final int firstCellSize \u003d\n        (int) Math.min(cellSize - (rangeStartInBlockGroup % cellSize), len);\n    cells[0] \u003d new StripingCell(ecPolicy, firstCellSize, firstCellIdxInBG,\n        firstCellOffset);\n    if (lastCellIdxInBG !\u003d firstCellIdxInBG) {\n      final int lastCellSize \u003d (int) (rangeEndInBlockGroup % cellSize) + 1;\n      cells[numCells - 1] \u003d new StripingCell(ecPolicy, lastCellSize,\n          lastCellIdxInBG, 0);\n    }\n\n    for (int i \u003d 1; i \u003c numCells - 1; i++) {\n      cells[i] \u003d new StripingCell(ecPolicy, cellSize, i + firstCellIdxInBG, 0);\n    }\n\n    return cells;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/util/StripedBlockUtil.java",
      "extendedDetails": {}
    }
  }
}