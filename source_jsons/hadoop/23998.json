{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ShuffleHandler.java",
  "functionName": "channelOpen",
  "functionId": "channelOpen___ctx-ChannelHandlerContext__evt-ChannelStateEvent",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java",
  "functionStartLine": 907,
  "functionEndLine": 926,
  "numCommitsSeen": 59,
  "timeTaken": 2302,
  "changeHistory": [
    "ba1f9d66d94ed0b85084d7c40c09a87478b3a05a",
    "d4725bfcb2d300219d65395a78f957afbf37b201",
    "e1062b8b787b871e6f01546de9f2e4a4c05039b0"
  ],
  "changeHistoryShort": {
    "ba1f9d66d94ed0b85084d7c40c09a87478b3a05a": "Ybodychange",
    "d4725bfcb2d300219d65395a78f957afbf37b201": "Ybodychange",
    "e1062b8b787b871e6f01546de9f2e4a4c05039b0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ba1f9d66d94ed0b85084d7c40c09a87478b3a05a": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-7156. NullPointerException when reaching max shuffle connections. Contributed by Peter Bacsko\n",
      "commitDate": "06/11/18 3:55 PM",
      "commitName": "ba1f9d66d94ed0b85084d7c40c09a87478b3a05a",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "12/04/18 9:04 AM",
      "commitNameOld": "6bb128dfb893cf0e4aa2d3ecc65440668a1fc8d7",
      "commitAuthorOld": "Eric E Payne",
      "daysBetweenCommits": 208.33,
      "commitsBetweenForRepo": 2194,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n     public void channelOpen(ChannelHandlerContext ctx, ChannelStateEvent evt) \n         throws Exception {\n+      super.channelOpen(ctx, evt);\n+\n       if ((maxShuffleConnections \u003e 0) \u0026\u0026 (accepted.size() \u003e\u003d maxShuffleConnections)) {\n         LOG.info(String.format(\"Current number of shuffle connections (%d) is \" + \n             \"greater than or equal to the max allowed shuffle connections (%d)\", \n             accepted.size(), maxShuffleConnections));\n \n         Map\u003cString, String\u003e headers \u003d new HashMap\u003cString, String\u003e(1);\n         // notify fetchers to backoff for a while before closing the connection\n         // if the shuffle connection limit is hit. Fetchers are expected to\n         // handle this notification gracefully, that is, not treating this as a\n         // fetch failure.\n         headers.put(RETRY_AFTER_HEADER, String.valueOf(FETCH_RETRY_DELAY));\n         sendError(ctx, \"\", TOO_MANY_REQ_STATUS, headers);\n         return;\n       }\n       accepted.add(evt.getChannel());\n-      super.channelOpen(ctx, evt);\n-     \n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void channelOpen(ChannelHandlerContext ctx, ChannelStateEvent evt) \n        throws Exception {\n      super.channelOpen(ctx, evt);\n\n      if ((maxShuffleConnections \u003e 0) \u0026\u0026 (accepted.size() \u003e\u003d maxShuffleConnections)) {\n        LOG.info(String.format(\"Current number of shuffle connections (%d) is \" + \n            \"greater than or equal to the max allowed shuffle connections (%d)\", \n            accepted.size(), maxShuffleConnections));\n\n        Map\u003cString, String\u003e headers \u003d new HashMap\u003cString, String\u003e(1);\n        // notify fetchers to backoff for a while before closing the connection\n        // if the shuffle connection limit is hit. Fetchers are expected to\n        // handle this notification gracefully, that is, not treating this as a\n        // fetch failure.\n        headers.put(RETRY_AFTER_HEADER, String.valueOf(FETCH_RETRY_DELAY));\n        sendError(ctx, \"\", TOO_MANY_REQ_STATUS, headers);\n        return;\n      }\n      accepted.add(evt.getChannel());\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java",
      "extendedDetails": {}
    },
    "d4725bfcb2d300219d65395a78f957afbf37b201": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6728. Give fetchers hint when ShuffleHandler rejects a shuffling connection (haibochen via rkanter)\n",
      "commitDate": "21/10/16 5:46 PM",
      "commitName": "d4725bfcb2d300219d65395a78f957afbf37b201",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "16/09/16 9:49 PM",
      "commitNameOld": "7d21c280a82b2f02675bf0048f0e965d99a05ae7",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 34.83,
      "commitsBetweenForRepo": 253,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,20 @@\n     public void channelOpen(ChannelHandlerContext ctx, ChannelStateEvent evt) \n         throws Exception {\n       if ((maxShuffleConnections \u003e 0) \u0026\u0026 (accepted.size() \u003e\u003d maxShuffleConnections)) {\n         LOG.info(String.format(\"Current number of shuffle connections (%d) is \" + \n             \"greater than or equal to the max allowed shuffle connections (%d)\", \n             accepted.size(), maxShuffleConnections));\n-        evt.getChannel().close();\n+\n+        Map\u003cString, String\u003e headers \u003d new HashMap\u003cString, String\u003e(1);\n+        // notify fetchers to backoff for a while before closing the connection\n+        // if the shuffle connection limit is hit. Fetchers are expected to\n+        // handle this notification gracefully, that is, not treating this as a\n+        // fetch failure.\n+        headers.put(RETRY_AFTER_HEADER, String.valueOf(FETCH_RETRY_DELAY));\n+        sendError(ctx, \"\", TOO_MANY_REQ_STATUS, headers);\n         return;\n       }\n       accepted.add(evt.getChannel());\n       super.channelOpen(ctx, evt);\n      \n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void channelOpen(ChannelHandlerContext ctx, ChannelStateEvent evt) \n        throws Exception {\n      if ((maxShuffleConnections \u003e 0) \u0026\u0026 (accepted.size() \u003e\u003d maxShuffleConnections)) {\n        LOG.info(String.format(\"Current number of shuffle connections (%d) is \" + \n            \"greater than or equal to the max allowed shuffle connections (%d)\", \n            accepted.size(), maxShuffleConnections));\n\n        Map\u003cString, String\u003e headers \u003d new HashMap\u003cString, String\u003e(1);\n        // notify fetchers to backoff for a while before closing the connection\n        // if the shuffle connection limit is hit. Fetchers are expected to\n        // handle this notification gracefully, that is, not treating this as a\n        // fetch failure.\n        headers.put(RETRY_AFTER_HEADER, String.valueOf(FETCH_RETRY_DELAY));\n        sendError(ctx, \"\", TOO_MANY_REQ_STATUS, headers);\n        return;\n      }\n      accepted.add(evt.getChannel());\n      super.channelOpen(ctx, evt);\n     \n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java",
      "extendedDetails": {}
    },
    "e1062b8b787b871e6f01546de9f2e4a4c05039b0": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-5027. Shuffle does not limit number of outstanding connections (Robert Parker via jeagles)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1453098 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/03/13 4:03 PM",
      "commitName": "e1062b8b787b871e6f01546de9f2e4a4c05039b0",
      "commitAuthor": "Jonathan Turner Eagles",
      "diff": "@@ -0,0 +1,13 @@\n+    public void channelOpen(ChannelHandlerContext ctx, ChannelStateEvent evt) \n+        throws Exception {\n+      if ((maxShuffleConnections \u003e 0) \u0026\u0026 (accepted.size() \u003e\u003d maxShuffleConnections)) {\n+        LOG.info(String.format(\"Current number of shuffle connections (%d) is \" + \n+            \"greater than or equal to the max allowed shuffle connections (%d)\", \n+            accepted.size(), maxShuffleConnections));\n+        evt.getChannel().close();\n+        return;\n+      }\n+      accepted.add(evt.getChannel());\n+      super.channelOpen(ctx, evt);\n+     \n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void channelOpen(ChannelHandlerContext ctx, ChannelStateEvent evt) \n        throws Exception {\n      if ((maxShuffleConnections \u003e 0) \u0026\u0026 (accepted.size() \u003e\u003d maxShuffleConnections)) {\n        LOG.info(String.format(\"Current number of shuffle connections (%d) is \" + \n            \"greater than or equal to the max allowed shuffle connections (%d)\", \n            accepted.size(), maxShuffleConnections));\n        evt.getChannel().close();\n        return;\n      }\n      accepted.add(evt.getChannel());\n      super.channelOpen(ctx, evt);\n     \n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-shuffle/src/main/java/org/apache/hadoop/mapred/ShuffleHandler.java"
    }
  }
}