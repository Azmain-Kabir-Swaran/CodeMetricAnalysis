{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BPServiceActor.java",
  "functionName": "scheduleNextBlockReport",
  "functionId": "scheduleNextBlockReport",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java",
  "functionStartLine": 1247,
  "functionEndLine": 1275,
  "numCommitsSeen": 197,
  "timeTaken": 4706,
  "changeHistory": [
    "2059f255d39510cddbb954b21ed4871a737bd2dc",
    "f0876b8b60c19aa25e0417ac0f419a3a82bf210b",
    "470c87dbc6c24dd3b370f1ad9e7ab1f6dabd2080",
    "dfc1c4c303cf15afc6c3361ed9d3238562f73cbd",
    "75ead273bea8a7dad61c4f99c3a16cab2697c498",
    "5beeb3016954a3ee0c1fb10a2083ffd540cd2c14"
  ],
  "changeHistoryShort": {
    "2059f255d39510cddbb954b21ed4871a737bd2dc": "Ybodychange",
    "f0876b8b60c19aa25e0417ac0f419a3a82bf210b": "Ybodychange",
    "470c87dbc6c24dd3b370f1ad9e7ab1f6dabd2080": "Ybodychange",
    "dfc1c4c303cf15afc6c3361ed9d3238562f73cbd": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
    "75ead273bea8a7dad61c4f99c3a16cab2697c498": "Ybodychange",
    "5beeb3016954a3ee0c1fb10a2083ffd540cd2c14": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2059f255d39510cddbb954b21ed4871a737bd2dc": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15167. Block Report Interval shouldn\u0027t be reset apart from first Block Report. Contributed by Ayush Saxena.\n",
      "commitDate": "27/02/20 12:38 AM",
      "commitName": "2059f255d39510cddbb954b21ed4871a737bd2dc",
      "commitAuthor": "Surendra Singh Lilhore",
      "commitDateOld": "26/12/19 7:42 PM",
      "commitNameOld": "80f91d14ab0fb385252d4eeb19141bd059303d59",
      "commitAuthorOld": "Ayush Saxena",
      "daysBetweenCommits": 62.21,
      "commitsBetweenForRepo": 210,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,29 @@\n     void scheduleNextBlockReport() {\n       // If we have sent the first set of block reports, then wait a random\n       // time before we start the periodic block reports.\n       if (resetBlockReportTime) {\n         nextBlockReportTime \u003d monotonicNow() +\n             ThreadLocalRandom.current().nextInt((int)(blockReportIntervalMs));\n         resetBlockReportTime \u003d false;\n       } else {\n         /* say the last block report was at 8:20:14. The current report\n          * should have started around 14:20:14 (default 6 hour interval).\n          * If current time is :\n          *   1) normal like 14:20:18, next report should be at 20:20:14.\n          *   2) unexpected like 21:35:43, next report should be at 2:20:14\n          *      on the next day.\n          */\n-        nextBlockReportTime +\u003d\n-              (((monotonicNow() - nextBlockReportTime + blockReportIntervalMs) /\n-                  blockReportIntervalMs)) * blockReportIntervalMs;\n+        long factor \u003d\n+            (monotonicNow() - nextBlockReportTime + blockReportIntervalMs)\n+                / blockReportIntervalMs;\n+        if (factor !\u003d 0) {\n+          nextBlockReportTime +\u003d factor * blockReportIntervalMs;\n+        } else {\n+          // If the difference between the present time and the scheduled\n+          // time is very less, the factor can be 0, so in that case, we can\n+          // ignore that negligible time, spent while sending the BRss and\n+          // schedule the next BR after the blockReportInterval.\n+          nextBlockReportTime +\u003d blockReportIntervalMs;\n+        }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    void scheduleNextBlockReport() {\n      // If we have sent the first set of block reports, then wait a random\n      // time before we start the periodic block reports.\n      if (resetBlockReportTime) {\n        nextBlockReportTime \u003d monotonicNow() +\n            ThreadLocalRandom.current().nextInt((int)(blockReportIntervalMs));\n        resetBlockReportTime \u003d false;\n      } else {\n        /* say the last block report was at 8:20:14. The current report\n         * should have started around 14:20:14 (default 6 hour interval).\n         * If current time is :\n         *   1) normal like 14:20:18, next report should be at 20:20:14.\n         *   2) unexpected like 21:35:43, next report should be at 2:20:14\n         *      on the next day.\n         */\n        long factor \u003d\n            (monotonicNow() - nextBlockReportTime + blockReportIntervalMs)\n                / blockReportIntervalMs;\n        if (factor !\u003d 0) {\n          nextBlockReportTime +\u003d factor * blockReportIntervalMs;\n        } else {\n          // If the difference between the present time and the scheduled\n          // time is very less, the factor can be 0, so in that case, we can\n          // ignore that negligible time, spent while sending the BRss and\n          // schedule the next BR after the blockReportInterval.\n          nextBlockReportTime +\u003d blockReportIntervalMs;\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java",
      "extendedDetails": {}
    },
    "f0876b8b60c19aa25e0417ac0f419a3a82bf210b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10856. Update the comment of BPServiceActor$Scheduler#scheduleNextBlockReport. Contributed by Yiqun Lin.\n",
      "commitDate": "12/09/16 10:50 PM",
      "commitName": "f0876b8b60c19aa25e0417ac0f419a3a82bf210b",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "19/08/16 12:15 AM",
      "commitNameOld": "8179f9a493c1b26deb6b1bffacd6a829586b7f98",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 24.94,
      "commitsBetweenForRepo": 138,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,20 @@\n     void scheduleNextBlockReport() {\n       // If we have sent the first set of block reports, then wait a random\n       // time before we start the periodic block reports.\n       if (resetBlockReportTime) {\n         nextBlockReportTime \u003d monotonicNow() +\n             ThreadLocalRandom.current().nextInt((int)(blockReportIntervalMs));\n         resetBlockReportTime \u003d false;\n       } else {\n         /* say the last block report was at 8:20:14. The current report\n-         * should have started around 9:20:14 (default 1 hour interval).\n+         * should have started around 14:20:14 (default 6 hour interval).\n          * If current time is :\n-         *   1) normal like 9:20:18, next report should be at 10:20:14\n-         *   2) unexpected like 11:35:43, next report should be at 12:20:14\n+         *   1) normal like 14:20:18, next report should be at 20:20:14.\n+         *   2) unexpected like 21:35:43, next report should be at 2:20:14\n+         *      on the next day.\n          */\n         nextBlockReportTime +\u003d\n               (((monotonicNow() - nextBlockReportTime + blockReportIntervalMs) /\n                   blockReportIntervalMs)) * blockReportIntervalMs;\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    void scheduleNextBlockReport() {\n      // If we have sent the first set of block reports, then wait a random\n      // time before we start the periodic block reports.\n      if (resetBlockReportTime) {\n        nextBlockReportTime \u003d monotonicNow() +\n            ThreadLocalRandom.current().nextInt((int)(blockReportIntervalMs));\n        resetBlockReportTime \u003d false;\n      } else {\n        /* say the last block report was at 8:20:14. The current report\n         * should have started around 14:20:14 (default 6 hour interval).\n         * If current time is :\n         *   1) normal like 14:20:18, next report should be at 20:20:14.\n         *   2) unexpected like 21:35:43, next report should be at 2:20:14\n         *      on the next day.\n         */\n        nextBlockReportTime +\u003d\n              (((monotonicNow() - nextBlockReportTime + blockReportIntervalMs) /\n                  blockReportIntervalMs)) * blockReportIntervalMs;\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java",
      "extendedDetails": {}
    },
    "470c87dbc6c24dd3b370f1ad9e7ab1f6dabd2080": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11970. Replace uses of ThreadLocal\u003cRandom\u003e with JDK7 ThreadLocalRandom (Sean Busbey via Colin P. McCabe)\n",
      "commitDate": "19/05/15 10:50 AM",
      "commitName": "470c87dbc6c24dd3b370f1ad9e7ab1f6dabd2080",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "21/04/15 10:58 AM",
      "commitNameOld": "dfc1c4c303cf15afc6c3361ed9d3238562f73cbd",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 27.99,
      "commitsBetweenForRepo": 339,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n     void scheduleNextBlockReport() {\n       // If we have sent the first set of block reports, then wait a random\n       // time before we start the periodic block reports.\n       if (resetBlockReportTime) {\n         nextBlockReportTime \u003d monotonicNow() +\n-            DFSUtil.getRandom().nextInt((int)(blockReportIntervalMs));\n+            ThreadLocalRandom.current().nextInt((int)(blockReportIntervalMs));\n         resetBlockReportTime \u003d false;\n       } else {\n         /* say the last block report was at 8:20:14. The current report\n          * should have started around 9:20:14 (default 1 hour interval).\n          * If current time is :\n          *   1) normal like 9:20:18, next report should be at 10:20:14\n          *   2) unexpected like 11:35:43, next report should be at 12:20:14\n          */\n         nextBlockReportTime +\u003d\n               (((monotonicNow() - nextBlockReportTime + blockReportIntervalMs) /\n                   blockReportIntervalMs)) * blockReportIntervalMs;\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    void scheduleNextBlockReport() {\n      // If we have sent the first set of block reports, then wait a random\n      // time before we start the periodic block reports.\n      if (resetBlockReportTime) {\n        nextBlockReportTime \u003d monotonicNow() +\n            ThreadLocalRandom.current().nextInt((int)(blockReportIntervalMs));\n        resetBlockReportTime \u003d false;\n      } else {\n        /* say the last block report was at 8:20:14. The current report\n         * should have started around 9:20:14 (default 1 hour interval).\n         * If current time is :\n         *   1) normal like 9:20:18, next report should be at 10:20:14\n         *   2) unexpected like 11:35:43, next report should be at 12:20:14\n         */\n        nextBlockReportTime +\u003d\n              (((monotonicNow() - nextBlockReportTime + blockReportIntervalMs) /\n                  blockReportIntervalMs)) * blockReportIntervalMs;\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java",
      "extendedDetails": {}
    },
    "dfc1c4c303cf15afc6c3361ed9d3238562f73cbd": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "HDFS-8163. Using monotonicNow for block report scheduling causes test failures on recently restarted systems. (Arpit Agarwal)\n",
      "commitDate": "21/04/15 10:58 AM",
      "commitName": "dfc1c4c303cf15afc6c3361ed9d3238562f73cbd",
      "commitAuthor": "Arpit Agarwal",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-8163. Using monotonicNow for block report scheduling causes test failures on recently restarted systems. (Arpit Agarwal)\n",
          "commitDate": "21/04/15 10:58 AM",
          "commitName": "dfc1c4c303cf15afc6c3361ed9d3238562f73cbd",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "08/04/15 9:43 PM",
          "commitNameOld": "b1e059089d6a5b2b7006d7d384c6df81ed268bd9",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 12.55,
          "commitsBetweenForRepo": 85,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,19 @@\n-  private void scheduleNextBlockReport(long previousReportStartTime) {\n-    // If we have sent the first set of block reports, then wait a random\n-    // time before we start the periodic block reports.\n-    if (resetBlockReportTime) {\n-      lastBlockReport \u003d previousReportStartTime -\n-          DFSUtil.getRandom().nextInt((int)(dnConf.blockReportInterval));\n-      resetBlockReportTime \u003d false;\n-    } else {\n-      /* say the last block report was at 8:20:14. The current report\n-       * should have started around 9:20:14 (default 1 hour interval).\n-       * If current time is :\n-       *   1) normal like 9:20:18, next report should be at 10:20:14\n-       *   2) unexpected like 11:35:43, next report should be at 12:20:14\n-       */\n-      lastBlockReport +\u003d (monotonicNow() - lastBlockReport) /\n-          dnConf.blockReportInterval * dnConf.blockReportInterval;\n-    }\n-  }\n\\ No newline at end of file\n+    void scheduleNextBlockReport() {\n+      // If we have sent the first set of block reports, then wait a random\n+      // time before we start the periodic block reports.\n+      if (resetBlockReportTime) {\n+        nextBlockReportTime \u003d monotonicNow() +\n+            DFSUtil.getRandom().nextInt((int)(blockReportIntervalMs));\n+        resetBlockReportTime \u003d false;\n+      } else {\n+        /* say the last block report was at 8:20:14. The current report\n+         * should have started around 9:20:14 (default 1 hour interval).\n+         * If current time is :\n+         *   1) normal like 9:20:18, next report should be at 10:20:14\n+         *   2) unexpected like 11:35:43, next report should be at 12:20:14\n+         */\n+        nextBlockReportTime +\u003d\n+              (((monotonicNow() - nextBlockReportTime + blockReportIntervalMs) /\n+                  blockReportIntervalMs)) * blockReportIntervalMs;\n+      }\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    void scheduleNextBlockReport() {\n      // If we have sent the first set of block reports, then wait a random\n      // time before we start the periodic block reports.\n      if (resetBlockReportTime) {\n        nextBlockReportTime \u003d monotonicNow() +\n            DFSUtil.getRandom().nextInt((int)(blockReportIntervalMs));\n        resetBlockReportTime \u003d false;\n      } else {\n        /* say the last block report was at 8:20:14. The current report\n         * should have started around 9:20:14 (default 1 hour interval).\n         * If current time is :\n         *   1) normal like 9:20:18, next report should be at 10:20:14\n         *   2) unexpected like 11:35:43, next report should be at 12:20:14\n         */\n        nextBlockReportTime +\u003d\n              (((monotonicNow() - nextBlockReportTime + blockReportIntervalMs) /\n                  blockReportIntervalMs)) * blockReportIntervalMs;\n      }\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java",
          "extendedDetails": {
            "oldValue": "[previousReportStartTime-long]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-8163. Using monotonicNow for block report scheduling causes test failures on recently restarted systems. (Arpit Agarwal)\n",
          "commitDate": "21/04/15 10:58 AM",
          "commitName": "dfc1c4c303cf15afc6c3361ed9d3238562f73cbd",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "08/04/15 9:43 PM",
          "commitNameOld": "b1e059089d6a5b2b7006d7d384c6df81ed268bd9",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 12.55,
          "commitsBetweenForRepo": 85,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,19 @@\n-  private void scheduleNextBlockReport(long previousReportStartTime) {\n-    // If we have sent the first set of block reports, then wait a random\n-    // time before we start the periodic block reports.\n-    if (resetBlockReportTime) {\n-      lastBlockReport \u003d previousReportStartTime -\n-          DFSUtil.getRandom().nextInt((int)(dnConf.blockReportInterval));\n-      resetBlockReportTime \u003d false;\n-    } else {\n-      /* say the last block report was at 8:20:14. The current report\n-       * should have started around 9:20:14 (default 1 hour interval).\n-       * If current time is :\n-       *   1) normal like 9:20:18, next report should be at 10:20:14\n-       *   2) unexpected like 11:35:43, next report should be at 12:20:14\n-       */\n-      lastBlockReport +\u003d (monotonicNow() - lastBlockReport) /\n-          dnConf.blockReportInterval * dnConf.blockReportInterval;\n-    }\n-  }\n\\ No newline at end of file\n+    void scheduleNextBlockReport() {\n+      // If we have sent the first set of block reports, then wait a random\n+      // time before we start the periodic block reports.\n+      if (resetBlockReportTime) {\n+        nextBlockReportTime \u003d monotonicNow() +\n+            DFSUtil.getRandom().nextInt((int)(blockReportIntervalMs));\n+        resetBlockReportTime \u003d false;\n+      } else {\n+        /* say the last block report was at 8:20:14. The current report\n+         * should have started around 9:20:14 (default 1 hour interval).\n+         * If current time is :\n+         *   1) normal like 9:20:18, next report should be at 10:20:14\n+         *   2) unexpected like 11:35:43, next report should be at 12:20:14\n+         */\n+        nextBlockReportTime +\u003d\n+              (((monotonicNow() - nextBlockReportTime + blockReportIntervalMs) /\n+                  blockReportIntervalMs)) * blockReportIntervalMs;\n+      }\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    void scheduleNextBlockReport() {\n      // If we have sent the first set of block reports, then wait a random\n      // time before we start the periodic block reports.\n      if (resetBlockReportTime) {\n        nextBlockReportTime \u003d monotonicNow() +\n            DFSUtil.getRandom().nextInt((int)(blockReportIntervalMs));\n        resetBlockReportTime \u003d false;\n      } else {\n        /* say the last block report was at 8:20:14. The current report\n         * should have started around 9:20:14 (default 1 hour interval).\n         * If current time is :\n         *   1) normal like 9:20:18, next report should be at 10:20:14\n         *   2) unexpected like 11:35:43, next report should be at 12:20:14\n         */\n        nextBlockReportTime +\u003d\n              (((monotonicNow() - nextBlockReportTime + blockReportIntervalMs) /\n                  blockReportIntervalMs)) * blockReportIntervalMs;\n      }\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8163. Using monotonicNow for block report scheduling causes test failures on recently restarted systems. (Arpit Agarwal)\n",
          "commitDate": "21/04/15 10:58 AM",
          "commitName": "dfc1c4c303cf15afc6c3361ed9d3238562f73cbd",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "08/04/15 9:43 PM",
          "commitNameOld": "b1e059089d6a5b2b7006d7d384c6df81ed268bd9",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 12.55,
          "commitsBetweenForRepo": 85,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,19 @@\n-  private void scheduleNextBlockReport(long previousReportStartTime) {\n-    // If we have sent the first set of block reports, then wait a random\n-    // time before we start the periodic block reports.\n-    if (resetBlockReportTime) {\n-      lastBlockReport \u003d previousReportStartTime -\n-          DFSUtil.getRandom().nextInt((int)(dnConf.blockReportInterval));\n-      resetBlockReportTime \u003d false;\n-    } else {\n-      /* say the last block report was at 8:20:14. The current report\n-       * should have started around 9:20:14 (default 1 hour interval).\n-       * If current time is :\n-       *   1) normal like 9:20:18, next report should be at 10:20:14\n-       *   2) unexpected like 11:35:43, next report should be at 12:20:14\n-       */\n-      lastBlockReport +\u003d (monotonicNow() - lastBlockReport) /\n-          dnConf.blockReportInterval * dnConf.blockReportInterval;\n-    }\n-  }\n\\ No newline at end of file\n+    void scheduleNextBlockReport() {\n+      // If we have sent the first set of block reports, then wait a random\n+      // time before we start the periodic block reports.\n+      if (resetBlockReportTime) {\n+        nextBlockReportTime \u003d monotonicNow() +\n+            DFSUtil.getRandom().nextInt((int)(blockReportIntervalMs));\n+        resetBlockReportTime \u003d false;\n+      } else {\n+        /* say the last block report was at 8:20:14. The current report\n+         * should have started around 9:20:14 (default 1 hour interval).\n+         * If current time is :\n+         *   1) normal like 9:20:18, next report should be at 10:20:14\n+         *   2) unexpected like 11:35:43, next report should be at 12:20:14\n+         */\n+        nextBlockReportTime +\u003d\n+              (((monotonicNow() - nextBlockReportTime + blockReportIntervalMs) /\n+                  blockReportIntervalMs)) * blockReportIntervalMs;\n+      }\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    void scheduleNextBlockReport() {\n      // If we have sent the first set of block reports, then wait a random\n      // time before we start the periodic block reports.\n      if (resetBlockReportTime) {\n        nextBlockReportTime \u003d monotonicNow() +\n            DFSUtil.getRandom().nextInt((int)(blockReportIntervalMs));\n        resetBlockReportTime \u003d false;\n      } else {\n        /* say the last block report was at 8:20:14. The current report\n         * should have started around 9:20:14 (default 1 hour interval).\n         * If current time is :\n         *   1) normal like 9:20:18, next report should be at 10:20:14\n         *   2) unexpected like 11:35:43, next report should be at 12:20:14\n         */\n        nextBlockReportTime +\u003d\n              (((monotonicNow() - nextBlockReportTime + blockReportIntervalMs) /\n                  blockReportIntervalMs)) * blockReportIntervalMs;\n      }\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java",
          "extendedDetails": {}
        }
      ]
    },
    "75ead273bea8a7dad61c4f99c3a16cab2697c498": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6841. Use Time.monotonicNow() wherever applicable instead of Time.now(). Contributed by Vinayakumar B\n",
      "commitDate": "20/03/15 12:02 PM",
      "commitName": "75ead273bea8a7dad61c4f99c3a16cab2697c498",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "13/03/15 12:23 PM",
      "commitNameOld": "d324164a51a43d72c02567248bd9f0f12b244a40",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 6.99,
      "commitsBetweenForRepo": 79,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n   private void scheduleNextBlockReport(long previousReportStartTime) {\n     // If we have sent the first set of block reports, then wait a random\n     // time before we start the periodic block reports.\n     if (resetBlockReportTime) {\n       lastBlockReport \u003d previousReportStartTime -\n           DFSUtil.getRandom().nextInt((int)(dnConf.blockReportInterval));\n       resetBlockReportTime \u003d false;\n     } else {\n       /* say the last block report was at 8:20:14. The current report\n        * should have started around 9:20:14 (default 1 hour interval).\n        * If current time is :\n        *   1) normal like 9:20:18, next report should be at 10:20:14\n        *   2) unexpected like 11:35:43, next report should be at 12:20:14\n        */\n-      lastBlockReport +\u003d (now() - lastBlockReport) /\n+      lastBlockReport +\u003d (monotonicNow() - lastBlockReport) /\n           dnConf.blockReportInterval * dnConf.blockReportInterval;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void scheduleNextBlockReport(long previousReportStartTime) {\n    // If we have sent the first set of block reports, then wait a random\n    // time before we start the periodic block reports.\n    if (resetBlockReportTime) {\n      lastBlockReport \u003d previousReportStartTime -\n          DFSUtil.getRandom().nextInt((int)(dnConf.blockReportInterval));\n      resetBlockReportTime \u003d false;\n    } else {\n      /* say the last block report was at 8:20:14. The current report\n       * should have started around 9:20:14 (default 1 hour interval).\n       * If current time is :\n       *   1) normal like 9:20:18, next report should be at 10:20:14\n       *   2) unexpected like 11:35:43, next report should be at 12:20:14\n       */\n      lastBlockReport +\u003d (monotonicNow() - lastBlockReport) /\n          dnConf.blockReportInterval * dnConf.blockReportInterval;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java",
      "extendedDetails": {}
    },
    "5beeb3016954a3ee0c1fb10a2083ffd540cd2c14": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5153. Datanode should send block reports for each storage in a separate message. (Arpit Agarwal)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1563254 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/01/14 1:00 PM",
      "commitName": "5beeb3016954a3ee0c1fb10a2083ffd540cd2c14",
      "commitAuthor": "Arpit Agarwal",
      "diff": "@@ -0,0 +1,18 @@\n+  private void scheduleNextBlockReport(long previousReportStartTime) {\n+    // If we have sent the first set of block reports, then wait a random\n+    // time before we start the periodic block reports.\n+    if (resetBlockReportTime) {\n+      lastBlockReport \u003d previousReportStartTime -\n+          DFSUtil.getRandom().nextInt((int)(dnConf.blockReportInterval));\n+      resetBlockReportTime \u003d false;\n+    } else {\n+      /* say the last block report was at 8:20:14. The current report\n+       * should have started around 9:20:14 (default 1 hour interval).\n+       * If current time is :\n+       *   1) normal like 9:20:18, next report should be at 10:20:14\n+       *   2) unexpected like 11:35:43, next report should be at 12:20:14\n+       */\n+      lastBlockReport +\u003d (now() - lastBlockReport) /\n+          dnConf.blockReportInterval * dnConf.blockReportInterval;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void scheduleNextBlockReport(long previousReportStartTime) {\n    // If we have sent the first set of block reports, then wait a random\n    // time before we start the periodic block reports.\n    if (resetBlockReportTime) {\n      lastBlockReport \u003d previousReportStartTime -\n          DFSUtil.getRandom().nextInt((int)(dnConf.blockReportInterval));\n      resetBlockReportTime \u003d false;\n    } else {\n      /* say the last block report was at 8:20:14. The current report\n       * should have started around 9:20:14 (default 1 hour interval).\n       * If current time is :\n       *   1) normal like 9:20:18, next report should be at 10:20:14\n       *   2) unexpected like 11:35:43, next report should be at 12:20:14\n       */\n      lastBlockReport +\u003d (now() - lastBlockReport) /\n          dnConf.blockReportInterval * dnConf.blockReportInterval;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java"
    }
  }
}