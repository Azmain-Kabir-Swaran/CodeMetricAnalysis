{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DatanodeManager.java",
  "functionName": "parseDNFromHostsEntry",
  "functionId": "parseDNFromHostsEntry___hostLine-String",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java",
  "functionStartLine": 1446,
  "functionEndLine": 1479,
  "numCommitsSeen": 172,
  "timeTaken": 4503,
  "changeHistory": [
    "14556cc5d8fee8f8a846e4f65572828553be386c",
    "34f08944b7c8d58f531a3f3bf3d4ee4cd3fa643a",
    "8e0804666189ce9a66b7b41b744776bad29770dd",
    "ef8dd606aba790a097f499dcd3bd129d385a961f",
    "e9a7648f62c72164decb69390ecff4da65bbca5e",
    "e505b7e704ff83893a40190695977ce1393f6248"
  ],
  "changeHistoryShort": {
    "14556cc5d8fee8f8a846e4f65572828553be386c": "Ybodychange",
    "34f08944b7c8d58f531a3f3bf3d4ee4cd3fa643a": "Ybodychange",
    "8e0804666189ce9a66b7b41b744776bad29770dd": "Ybodychange",
    "ef8dd606aba790a097f499dcd3bd129d385a961f": "Ybodychange",
    "e9a7648f62c72164decb69390ecff4da65bbca5e": "Ybodychange",
    "e505b7e704ff83893a40190695977ce1393f6248": "Yintroduced"
  },
  "changeHistoryDetails": {
    "14556cc5d8fee8f8a846e4f65572828553be386c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6155. Fix Boxing/unboxing to parse a primitive findbugs warnings. Contributed by Suresh Srinivas.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1582068 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/03/14 2:27 PM",
      "commitName": "14556cc5d8fee8f8a846e4f65572828553be386c",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "24/03/14 3:16 PM",
      "commitNameOld": "328fc86bdbf84fcc80a0920b2cacfc2e74ac5c9f",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 1.97,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n   private DatanodeID parseDNFromHostsEntry(String hostLine) {\n     DatanodeID dnId;\n     String hostStr;\n     int port;\n     int idx \u003d hostLine.indexOf(\u0027:\u0027);\n \n     if (-1 \u003d\u003d idx) {\n       hostStr \u003d hostLine;\n       port \u003d DFSConfigKeys.DFS_DATANODE_DEFAULT_PORT;\n     } else {\n       hostStr \u003d hostLine.substring(0, idx);\n-      port \u003d Integer.valueOf(hostLine.substring(idx+1));\n+      port \u003d Integer.parseInt(hostLine.substring(idx+1));\n     }\n \n     if (InetAddresses.isInetAddress(hostStr)) {\n       // The IP:port is sufficient for listing in a report\n       dnId \u003d new DatanodeID(hostStr, \"\", \"\", port,\n           DFSConfigKeys.DFS_DATANODE_HTTP_DEFAULT_PORT,\n           DFSConfigKeys.DFS_DATANODE_HTTPS_DEFAULT_PORT,\n           DFSConfigKeys.DFS_DATANODE_IPC_DEFAULT_PORT);\n     } else {\n       String ipAddr \u003d \"\";\n       try {\n         ipAddr \u003d InetAddress.getByName(hostStr).getHostAddress();\n       } catch (UnknownHostException e) {\n         LOG.warn(\"Invalid hostname \" + hostStr + \" in hosts file\");\n       }\n       dnId \u003d new DatanodeID(ipAddr, hostStr, \"\", port,\n           DFSConfigKeys.DFS_DATANODE_HTTP_DEFAULT_PORT,\n           DFSConfigKeys.DFS_DATANODE_HTTPS_DEFAULT_PORT,\n           DFSConfigKeys.DFS_DATANODE_IPC_DEFAULT_PORT);\n     }\n     return dnId;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private DatanodeID parseDNFromHostsEntry(String hostLine) {\n    DatanodeID dnId;\n    String hostStr;\n    int port;\n    int idx \u003d hostLine.indexOf(\u0027:\u0027);\n\n    if (-1 \u003d\u003d idx) {\n      hostStr \u003d hostLine;\n      port \u003d DFSConfigKeys.DFS_DATANODE_DEFAULT_PORT;\n    } else {\n      hostStr \u003d hostLine.substring(0, idx);\n      port \u003d Integer.parseInt(hostLine.substring(idx+1));\n    }\n\n    if (InetAddresses.isInetAddress(hostStr)) {\n      // The IP:port is sufficient for listing in a report\n      dnId \u003d new DatanodeID(hostStr, \"\", \"\", port,\n          DFSConfigKeys.DFS_DATANODE_HTTP_DEFAULT_PORT,\n          DFSConfigKeys.DFS_DATANODE_HTTPS_DEFAULT_PORT,\n          DFSConfigKeys.DFS_DATANODE_IPC_DEFAULT_PORT);\n    } else {\n      String ipAddr \u003d \"\";\n      try {\n        ipAddr \u003d InetAddress.getByName(hostStr).getHostAddress();\n      } catch (UnknownHostException e) {\n        LOG.warn(\"Invalid hostname \" + hostStr + \" in hosts file\");\n      }\n      dnId \u003d new DatanodeID(ipAddr, hostStr, \"\", port,\n          DFSConfigKeys.DFS_DATANODE_HTTP_DEFAULT_PORT,\n          DFSConfigKeys.DFS_DATANODE_HTTPS_DEFAULT_PORT,\n          DFSConfigKeys.DFS_DATANODE_IPC_DEFAULT_PORT);\n    }\n    return dnId;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java",
      "extendedDetails": {}
    },
    "34f08944b7c8d58f531a3f3bf3d4ee4cd3fa643a": {
      "type": "Ybodychange",
      "commitMessage": "merge trunk to branch HDFS-4949\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1532952 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/10/13 7:14 PM",
      "commitName": "34f08944b7c8d58f531a3f3bf3d4ee4cd3fa643a",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "16/10/13 3:15 PM",
      "commitNameOld": "3cc7a38a53c8ae27ef6b2397cddc5d14a378203a",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 0.17,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,34 @@\n   private DatanodeID parseDNFromHostsEntry(String hostLine) {\n     DatanodeID dnId;\n     String hostStr;\n     int port;\n     int idx \u003d hostLine.indexOf(\u0027:\u0027);\n \n     if (-1 \u003d\u003d idx) {\n       hostStr \u003d hostLine;\n       port \u003d DFSConfigKeys.DFS_DATANODE_DEFAULT_PORT;\n     } else {\n       hostStr \u003d hostLine.substring(0, idx);\n       port \u003d Integer.valueOf(hostLine.substring(idx+1));\n     }\n \n     if (InetAddresses.isInetAddress(hostStr)) {\n       // The IP:port is sufficient for listing in a report\n       dnId \u003d new DatanodeID(hostStr, \"\", \"\", port,\n           DFSConfigKeys.DFS_DATANODE_HTTP_DEFAULT_PORT,\n+          DFSConfigKeys.DFS_DATANODE_HTTPS_DEFAULT_PORT,\n           DFSConfigKeys.DFS_DATANODE_IPC_DEFAULT_PORT);\n     } else {\n       String ipAddr \u003d \"\";\n       try {\n         ipAddr \u003d InetAddress.getByName(hostStr).getHostAddress();\n       } catch (UnknownHostException e) {\n         LOG.warn(\"Invalid hostname \" + hostStr + \" in hosts file\");\n       }\n       dnId \u003d new DatanodeID(ipAddr, hostStr, \"\", port,\n           DFSConfigKeys.DFS_DATANODE_HTTP_DEFAULT_PORT,\n+          DFSConfigKeys.DFS_DATANODE_HTTPS_DEFAULT_PORT,\n           DFSConfigKeys.DFS_DATANODE_IPC_DEFAULT_PORT);\n     }\n     return dnId;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private DatanodeID parseDNFromHostsEntry(String hostLine) {\n    DatanodeID dnId;\n    String hostStr;\n    int port;\n    int idx \u003d hostLine.indexOf(\u0027:\u0027);\n\n    if (-1 \u003d\u003d idx) {\n      hostStr \u003d hostLine;\n      port \u003d DFSConfigKeys.DFS_DATANODE_DEFAULT_PORT;\n    } else {\n      hostStr \u003d hostLine.substring(0, idx);\n      port \u003d Integer.valueOf(hostLine.substring(idx+1));\n    }\n\n    if (InetAddresses.isInetAddress(hostStr)) {\n      // The IP:port is sufficient for listing in a report\n      dnId \u003d new DatanodeID(hostStr, \"\", \"\", port,\n          DFSConfigKeys.DFS_DATANODE_HTTP_DEFAULT_PORT,\n          DFSConfigKeys.DFS_DATANODE_HTTPS_DEFAULT_PORT,\n          DFSConfigKeys.DFS_DATANODE_IPC_DEFAULT_PORT);\n    } else {\n      String ipAddr \u003d \"\";\n      try {\n        ipAddr \u003d InetAddress.getByName(hostStr).getHostAddress();\n      } catch (UnknownHostException e) {\n        LOG.warn(\"Invalid hostname \" + hostStr + \" in hosts file\");\n      }\n      dnId \u003d new DatanodeID(ipAddr, hostStr, \"\", port,\n          DFSConfigKeys.DFS_DATANODE_HTTP_DEFAULT_PORT,\n          DFSConfigKeys.DFS_DATANODE_HTTPS_DEFAULT_PORT,\n          DFSConfigKeys.DFS_DATANODE_IPC_DEFAULT_PORT);\n    }\n    return dnId;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java",
      "extendedDetails": {}
    },
    "8e0804666189ce9a66b7b41b744776bad29770dd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5306. Datanode https port is not available at the namenode. Contributed by Suresh Srinivas.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1529562 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/10/13 8:22 PM",
      "commitName": "8e0804666189ce9a66b7b41b744776bad29770dd",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "26/09/13 8:24 AM",
      "commitNameOld": "8a66e493ba03f710b353638647013401d18f413c",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 9.5,
      "commitsBetweenForRepo": 87,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,34 @@\n   private DatanodeID parseDNFromHostsEntry(String hostLine) {\n     DatanodeID dnId;\n     String hostStr;\n     int port;\n     int idx \u003d hostLine.indexOf(\u0027:\u0027);\n \n     if (-1 \u003d\u003d idx) {\n       hostStr \u003d hostLine;\n       port \u003d DFSConfigKeys.DFS_DATANODE_DEFAULT_PORT;\n     } else {\n       hostStr \u003d hostLine.substring(0, idx);\n       port \u003d Integer.valueOf(hostLine.substring(idx+1));\n     }\n \n     if (InetAddresses.isInetAddress(hostStr)) {\n       // The IP:port is sufficient for listing in a report\n       dnId \u003d new DatanodeID(hostStr, \"\", \"\", port,\n           DFSConfigKeys.DFS_DATANODE_HTTP_DEFAULT_PORT,\n+          DFSConfigKeys.DFS_DATANODE_HTTPS_DEFAULT_PORT,\n           DFSConfigKeys.DFS_DATANODE_IPC_DEFAULT_PORT);\n     } else {\n       String ipAddr \u003d \"\";\n       try {\n         ipAddr \u003d InetAddress.getByName(hostStr).getHostAddress();\n       } catch (UnknownHostException e) {\n         LOG.warn(\"Invalid hostname \" + hostStr + \" in hosts file\");\n       }\n       dnId \u003d new DatanodeID(ipAddr, hostStr, \"\", port,\n           DFSConfigKeys.DFS_DATANODE_HTTP_DEFAULT_PORT,\n+          DFSConfigKeys.DFS_DATANODE_HTTPS_DEFAULT_PORT,\n           DFSConfigKeys.DFS_DATANODE_IPC_DEFAULT_PORT);\n     }\n     return dnId;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private DatanodeID parseDNFromHostsEntry(String hostLine) {\n    DatanodeID dnId;\n    String hostStr;\n    int port;\n    int idx \u003d hostLine.indexOf(\u0027:\u0027);\n\n    if (-1 \u003d\u003d idx) {\n      hostStr \u003d hostLine;\n      port \u003d DFSConfigKeys.DFS_DATANODE_DEFAULT_PORT;\n    } else {\n      hostStr \u003d hostLine.substring(0, idx);\n      port \u003d Integer.valueOf(hostLine.substring(idx+1));\n    }\n\n    if (InetAddresses.isInetAddress(hostStr)) {\n      // The IP:port is sufficient for listing in a report\n      dnId \u003d new DatanodeID(hostStr, \"\", \"\", port,\n          DFSConfigKeys.DFS_DATANODE_HTTP_DEFAULT_PORT,\n          DFSConfigKeys.DFS_DATANODE_HTTPS_DEFAULT_PORT,\n          DFSConfigKeys.DFS_DATANODE_IPC_DEFAULT_PORT);\n    } else {\n      String ipAddr \u003d \"\";\n      try {\n        ipAddr \u003d InetAddress.getByName(hostStr).getHostAddress();\n      } catch (UnknownHostException e) {\n        LOG.warn(\"Invalid hostname \" + hostStr + \" in hosts file\");\n      }\n      dnId \u003d new DatanodeID(ipAddr, hostStr, \"\", port,\n          DFSConfigKeys.DFS_DATANODE_HTTP_DEFAULT_PORT,\n          DFSConfigKeys.DFS_DATANODE_HTTPS_DEFAULT_PORT,\n          DFSConfigKeys.DFS_DATANODE_IPC_DEFAULT_PORT);\n    }\n    return dnId;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java",
      "extendedDetails": {}
    },
    "ef8dd606aba790a097f499dcd3bd129d385a961f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4344. dfshealth.jsp throws NumberFormatException when dfs.hosts/dfs.hosts.exclude includes port number. Contributed by Andy Isaacson.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1442465 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/02/13 8:07 PM",
      "commitName": "ef8dd606aba790a097f499dcd3bd129d385a961f",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "02/02/13 2:18 PM",
      "commitNameOld": "8590564dc56195cb2caa245e3ee1c06eca3938d3",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 2.24,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   private DatanodeID parseDNFromHostsEntry(String hostLine) {\n     DatanodeID dnId;\n     String hostStr;\n     int port;\n     int idx \u003d hostLine.indexOf(\u0027:\u0027);\n \n     if (-1 \u003d\u003d idx) {\n       hostStr \u003d hostLine;\n       port \u003d DFSConfigKeys.DFS_DATANODE_DEFAULT_PORT;\n     } else {\n       hostStr \u003d hostLine.substring(0, idx);\n-      port \u003d Integer.valueOf(hostLine.substring(idx));\n+      port \u003d Integer.valueOf(hostLine.substring(idx+1));\n     }\n \n     if (InetAddresses.isInetAddress(hostStr)) {\n       // The IP:port is sufficient for listing in a report\n       dnId \u003d new DatanodeID(hostStr, \"\", \"\", port,\n           DFSConfigKeys.DFS_DATANODE_HTTP_DEFAULT_PORT,\n           DFSConfigKeys.DFS_DATANODE_IPC_DEFAULT_PORT);\n     } else {\n       String ipAddr \u003d \"\";\n       try {\n         ipAddr \u003d InetAddress.getByName(hostStr).getHostAddress();\n       } catch (UnknownHostException e) {\n         LOG.warn(\"Invalid hostname \" + hostStr + \" in hosts file\");\n       }\n       dnId \u003d new DatanodeID(ipAddr, hostStr, \"\", port,\n           DFSConfigKeys.DFS_DATANODE_HTTP_DEFAULT_PORT,\n           DFSConfigKeys.DFS_DATANODE_IPC_DEFAULT_PORT);\n     }\n     return dnId;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private DatanodeID parseDNFromHostsEntry(String hostLine) {\n    DatanodeID dnId;\n    String hostStr;\n    int port;\n    int idx \u003d hostLine.indexOf(\u0027:\u0027);\n\n    if (-1 \u003d\u003d idx) {\n      hostStr \u003d hostLine;\n      port \u003d DFSConfigKeys.DFS_DATANODE_DEFAULT_PORT;\n    } else {\n      hostStr \u003d hostLine.substring(0, idx);\n      port \u003d Integer.valueOf(hostLine.substring(idx+1));\n    }\n\n    if (InetAddresses.isInetAddress(hostStr)) {\n      // The IP:port is sufficient for listing in a report\n      dnId \u003d new DatanodeID(hostStr, \"\", \"\", port,\n          DFSConfigKeys.DFS_DATANODE_HTTP_DEFAULT_PORT,\n          DFSConfigKeys.DFS_DATANODE_IPC_DEFAULT_PORT);\n    } else {\n      String ipAddr \u003d \"\";\n      try {\n        ipAddr \u003d InetAddress.getByName(hostStr).getHostAddress();\n      } catch (UnknownHostException e) {\n        LOG.warn(\"Invalid hostname \" + hostStr + \" in hosts file\");\n      }\n      dnId \u003d new DatanodeID(ipAddr, hostStr, \"\", port,\n          DFSConfigKeys.DFS_DATANODE_HTTP_DEFAULT_PORT,\n          DFSConfigKeys.DFS_DATANODE_IPC_DEFAULT_PORT);\n    }\n    return dnId;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java",
      "extendedDetails": {}
    },
    "e9a7648f62c72164decb69390ecff4da65bbca5e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3416. Cleanup DatanodeID and DatanodeRegistration constructors used by testing. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1338784 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/05/12 9:23 AM",
      "commitName": "e9a7648f62c72164decb69390ecff4da65bbca5e",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "27/04/12 2:17 PM",
      "commitNameOld": "cd271773ac45d36875862d771b05476ce1f23c1f",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 17.8,
      "commitsBetweenForRepo": 112,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,32 @@\n   private DatanodeID parseDNFromHostsEntry(String hostLine) {\n     DatanodeID dnId;\n     String hostStr;\n     int port;\n     int idx \u003d hostLine.indexOf(\u0027:\u0027);\n \n     if (-1 \u003d\u003d idx) {\n       hostStr \u003d hostLine;\n       port \u003d DFSConfigKeys.DFS_DATANODE_DEFAULT_PORT;\n     } else {\n       hostStr \u003d hostLine.substring(0, idx);\n       port \u003d Integer.valueOf(hostLine.substring(idx));\n     }\n \n     if (InetAddresses.isInetAddress(hostStr)) {\n       // The IP:port is sufficient for listing in a report\n-      dnId \u003d new DatanodeID(hostStr, \"\", port);\n+      dnId \u003d new DatanodeID(hostStr, \"\", \"\", port,\n+          DFSConfigKeys.DFS_DATANODE_HTTP_DEFAULT_PORT,\n+          DFSConfigKeys.DFS_DATANODE_IPC_DEFAULT_PORT);\n     } else {\n       String ipAddr \u003d \"\";\n       try {\n         ipAddr \u003d InetAddress.getByName(hostStr).getHostAddress();\n       } catch (UnknownHostException e) {\n         LOG.warn(\"Invalid hostname \" + hostStr + \" in hosts file\");\n       }\n-      dnId \u003d new DatanodeID(ipAddr, hostStr, port);\n+      dnId \u003d new DatanodeID(ipAddr, hostStr, \"\", port,\n+          DFSConfigKeys.DFS_DATANODE_HTTP_DEFAULT_PORT,\n+          DFSConfigKeys.DFS_DATANODE_IPC_DEFAULT_PORT);\n     }\n     return dnId;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private DatanodeID parseDNFromHostsEntry(String hostLine) {\n    DatanodeID dnId;\n    String hostStr;\n    int port;\n    int idx \u003d hostLine.indexOf(\u0027:\u0027);\n\n    if (-1 \u003d\u003d idx) {\n      hostStr \u003d hostLine;\n      port \u003d DFSConfigKeys.DFS_DATANODE_DEFAULT_PORT;\n    } else {\n      hostStr \u003d hostLine.substring(0, idx);\n      port \u003d Integer.valueOf(hostLine.substring(idx));\n    }\n\n    if (InetAddresses.isInetAddress(hostStr)) {\n      // The IP:port is sufficient for listing in a report\n      dnId \u003d new DatanodeID(hostStr, \"\", \"\", port,\n          DFSConfigKeys.DFS_DATANODE_HTTP_DEFAULT_PORT,\n          DFSConfigKeys.DFS_DATANODE_IPC_DEFAULT_PORT);\n    } else {\n      String ipAddr \u003d \"\";\n      try {\n        ipAddr \u003d InetAddress.getByName(hostStr).getHostAddress();\n      } catch (UnknownHostException e) {\n        LOG.warn(\"Invalid hostname \" + hostStr + \" in hosts file\");\n      }\n      dnId \u003d new DatanodeID(ipAddr, hostStr, \"\", port,\n          DFSConfigKeys.DFS_DATANODE_HTTP_DEFAULT_PORT,\n          DFSConfigKeys.DFS_DATANODE_IPC_DEFAULT_PORT);\n    }\n    return dnId;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java",
      "extendedDetails": {}
    },
    "e505b7e704ff83893a40190695977ce1393f6248": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-3208. Bogus entries in hosts files are incorrectly displayed in the report. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1310138 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/04/12 5:20 PM",
      "commitName": "e505b7e704ff83893a40190695977ce1393f6248",
      "commitAuthor": "Eli Collins",
      "diff": "@@ -0,0 +1,28 @@\n+  private DatanodeID parseDNFromHostsEntry(String hostLine) {\n+    DatanodeID dnId;\n+    String hostStr;\n+    int port;\n+    int idx \u003d hostLine.indexOf(\u0027:\u0027);\n+\n+    if (-1 \u003d\u003d idx) {\n+      hostStr \u003d hostLine;\n+      port \u003d DFSConfigKeys.DFS_DATANODE_DEFAULT_PORT;\n+    } else {\n+      hostStr \u003d hostLine.substring(0, idx);\n+      port \u003d Integer.valueOf(hostLine.substring(idx));\n+    }\n+\n+    if (InetAddresses.isInetAddress(hostStr)) {\n+      // The IP:port is sufficient for listing in a report\n+      dnId \u003d new DatanodeID(hostStr, \"\", port);\n+    } else {\n+      String ipAddr \u003d \"\";\n+      try {\n+        ipAddr \u003d InetAddress.getByName(hostStr).getHostAddress();\n+      } catch (UnknownHostException e) {\n+        LOG.warn(\"Invalid hostname \" + hostStr + \" in hosts file\");\n+      }\n+      dnId \u003d new DatanodeID(ipAddr, hostStr, port);\n+    }\n+    return dnId;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private DatanodeID parseDNFromHostsEntry(String hostLine) {\n    DatanodeID dnId;\n    String hostStr;\n    int port;\n    int idx \u003d hostLine.indexOf(\u0027:\u0027);\n\n    if (-1 \u003d\u003d idx) {\n      hostStr \u003d hostLine;\n      port \u003d DFSConfigKeys.DFS_DATANODE_DEFAULT_PORT;\n    } else {\n      hostStr \u003d hostLine.substring(0, idx);\n      port \u003d Integer.valueOf(hostLine.substring(idx));\n    }\n\n    if (InetAddresses.isInetAddress(hostStr)) {\n      // The IP:port is sufficient for listing in a report\n      dnId \u003d new DatanodeID(hostStr, \"\", port);\n    } else {\n      String ipAddr \u003d \"\";\n      try {\n        ipAddr \u003d InetAddress.getByName(hostStr).getHostAddress();\n      } catch (UnknownHostException e) {\n        LOG.warn(\"Invalid hostname \" + hostStr + \" in hosts file\");\n      }\n      dnId \u003d new DatanodeID(ipAddr, hostStr, port);\n    }\n    return dnId;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java"
    }
  }
}