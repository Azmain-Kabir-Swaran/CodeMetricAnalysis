{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ResourceManager.java",
  "functionName": "resetRMContext",
  "functionId": "resetRMContext",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
  "functionStartLine": 1603,
  "functionEndLine": 1621,
  "numCommitsSeen": 192,
  "timeTaken": 2172,
  "changeHistory": [
    "e3153284288d6cfa7a28511dfefe1c8a7d6b4eda"
  ],
  "changeHistoryShort": {
    "e3153284288d6cfa7a28511dfefe1c8a7d6b4eda": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e3153284288d6cfa7a28511dfefe1c8a7d6b4eda": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6102. RMActiveService context to be updated with new RMContext on failover. Contributed by Rohith Sharma K S.\n",
      "commitDate": "23/07/17 11:09 PM",
      "commitName": "e3153284288d6cfa7a28511dfefe1c8a7d6b4eda",
      "commitAuthor": "Sunil G",
      "diff": "@@ -0,0 +1,19 @@\n+  private void resetRMContext() {\n+    RMContextImpl rmContextImpl \u003d new RMContextImpl();\n+    // transfer service context to new RM service Context\n+    rmContextImpl.setServiceContext(rmContext.getServiceContext());\n+\n+    // reset dispatcher\n+    Dispatcher dispatcher \u003d setupDispatcher();\n+    ((Service) dispatcher).init(this.conf);\n+    ((Service) dispatcher).start();\n+    removeService((Service) rmDispatcher);\n+    // Need to stop previous rmDispatcher before assigning new dispatcher\n+    // otherwise causes \"AsyncDispatcher event handler\" thread leak\n+    ((Service) rmDispatcher).stop();\n+    rmDispatcher \u003d dispatcher;\n+    addIfService(rmDispatcher);\n+    rmContextImpl.setDispatcher(dispatcher);\n+\n+    rmContext \u003d rmContextImpl;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void resetRMContext() {\n    RMContextImpl rmContextImpl \u003d new RMContextImpl();\n    // transfer service context to new RM service Context\n    rmContextImpl.setServiceContext(rmContext.getServiceContext());\n\n    // reset dispatcher\n    Dispatcher dispatcher \u003d setupDispatcher();\n    ((Service) dispatcher).init(this.conf);\n    ((Service) dispatcher).start();\n    removeService((Service) rmDispatcher);\n    // Need to stop previous rmDispatcher before assigning new dispatcher\n    // otherwise causes \"AsyncDispatcher event handler\" thread leak\n    ((Service) rmDispatcher).stop();\n    rmDispatcher \u003d dispatcher;\n    addIfService(rmDispatcher);\n    rmContextImpl.setDispatcher(dispatcher);\n\n    rmContext \u003d rmContextImpl;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java"
    }
  }
}