{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AdminService.java",
  "functionName": "startServer",
  "functionId": "startServer",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/AdminService.java",
  "functionStartLine": 183,
  "functionEndLine": 220,
  "numCommitsSeen": 83,
  "timeTaken": 3774,
  "changeHistory": [
    "e3153284288d6cfa7a28511dfefe1c8a7d6b4eda",
    "e52f67e3897a67a0b6d29e557a31cfa881738821",
    "1fa6ab249b0fa63cab550e1b7703339c4d888c5d",
    "94e2e78ab751d1da775d0acf6e5ee6c0694ed746",
    "c58ae266e9fa336ef5b515f540c8ce8bb2f76df8",
    "03510d00f48137fe4273c3e694e87fc0e660a706"
  ],
  "changeHistoryShort": {
    "e3153284288d6cfa7a28511dfefe1c8a7d6b4eda": "Ybodychange",
    "e52f67e3897a67a0b6d29e557a31cfa881738821": "Ybodychange",
    "1fa6ab249b0fa63cab550e1b7703339c4d888c5d": "Ybodychange",
    "94e2e78ab751d1da775d0acf6e5ee6c0694ed746": "Ybodychange",
    "c58ae266e9fa336ef5b515f540c8ce8bb2f76df8": "Ymultichange(Ymovefromfile,Ybodychange,Yrename)",
    "03510d00f48137fe4273c3e694e87fc0e660a706": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e3153284288d6cfa7a28511dfefe1c8a7d6b4eda": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6102. RMActiveService context to be updated with new RMContext on failover. Contributed by Rohith Sharma K S.\n",
      "commitDate": "23/07/17 11:09 PM",
      "commitName": "e3153284288d6cfa7a28511dfefe1c8a7d6b4eda",
      "commitAuthor": "Sunil G",
      "commitDateOld": "09/05/17 2:44 PM",
      "commitNameOld": "166be0ee95d5ef976f074342656b289b41a11ccd",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 75.35,
      "commitsBetweenForRepo": 358,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   protected void startServer() throws Exception {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     this.server \u003d (Server) rpc.getServer(\n         ResourceManagerAdministrationProtocol.class, this, masterServiceBindAddress,\n         conf, null,\n         conf.getInt(YarnConfiguration.RM_ADMIN_CLIENT_THREAD_COUNT,\n             YarnConfiguration.DEFAULT_RM_ADMIN_CLIENT_THREAD_COUNT));\n \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,\n         false)) {\n       refreshServiceAcls(\n           getConfiguration(conf,\n               YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE),\n           RMPolicyProvider.getInstance());\n     }\n \n-    if (rmContext.isHAEnabled()) {\n+    if (rm.getRMContext().isHAEnabled()) {\n       RPC.setProtocolEngine(conf, HAServiceProtocolPB.class,\n           ProtobufRpcEngine.class);\n \n       HAServiceProtocolServerSideTranslatorPB haServiceProtocolXlator \u003d\n           new HAServiceProtocolServerSideTranslatorPB(this);\n       BlockingService haPbService \u003d\n           HAServiceProtocolProtos.HAServiceProtocolService\n               .newReflectiveBlockingService(haServiceProtocolXlator);\n       server.addProtocol(RPC.RpcKind.RPC_PROTOCOL_BUFFER,\n           HAServiceProtocol.class, haPbService);\n     }\n \n     this.server.start();\n     conf.updateConnectAddr(YarnConfiguration.RM_BIND_HOST,\n                            YarnConfiguration.RM_ADMIN_ADDRESS,\n                            YarnConfiguration.DEFAULT_RM_ADMIN_ADDRESS,\n                            server.getListenerAddress());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startServer() throws Exception {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    this.server \u003d (Server) rpc.getServer(\n        ResourceManagerAdministrationProtocol.class, this, masterServiceBindAddress,\n        conf, null,\n        conf.getInt(YarnConfiguration.RM_ADMIN_CLIENT_THREAD_COUNT,\n            YarnConfiguration.DEFAULT_RM_ADMIN_CLIENT_THREAD_COUNT));\n\n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,\n        false)) {\n      refreshServiceAcls(\n          getConfiguration(conf,\n              YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE),\n          RMPolicyProvider.getInstance());\n    }\n\n    if (rm.getRMContext().isHAEnabled()) {\n      RPC.setProtocolEngine(conf, HAServiceProtocolPB.class,\n          ProtobufRpcEngine.class);\n\n      HAServiceProtocolServerSideTranslatorPB haServiceProtocolXlator \u003d\n          new HAServiceProtocolServerSideTranslatorPB(this);\n      BlockingService haPbService \u003d\n          HAServiceProtocolProtos.HAServiceProtocolService\n              .newReflectiveBlockingService(haServiceProtocolXlator);\n      server.addProtocol(RPC.RpcKind.RPC_PROTOCOL_BUFFER,\n          HAServiceProtocol.class, haPbService);\n    }\n\n    this.server.start();\n    conf.updateConnectAddr(YarnConfiguration.RM_BIND_HOST,\n                           YarnConfiguration.RM_ADMIN_ADDRESS,\n                           YarnConfiguration.DEFAULT_RM_ADMIN_ADDRESS,\n                           server.getListenerAddress());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/AdminService.java",
      "extendedDetails": {}
    },
    "e52f67e3897a67a0b6d29e557a31cfa881738821": {
      "type": "Ybodychange",
      "commitMessage": "    YARN-1994. Expose YARN/MR endpoints on multiple interfaces. Contributed by Craig Welch, Milan Potocnik,and Arpit Agarwal\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1614981 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/07/14 1:06 PM",
      "commitName": "e52f67e3897a67a0b6d29e557a31cfa881738821",
      "commitAuthor": "Xuan Gong",
      "commitDateOld": "13/05/14 1:00 PM",
      "commitNameOld": "2f87e77cb7f6cd7155b8b95922f5e1aaf88335b4",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 79.0,
      "commitsBetweenForRepo": 505,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,38 @@\n   protected void startServer() throws Exception {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     this.server \u003d (Server) rpc.getServer(\n-        ResourceManagerAdministrationProtocol.class, this, masterServiceAddress,\n+        ResourceManagerAdministrationProtocol.class, this, masterServiceBindAddress,\n         conf, null,\n         conf.getInt(YarnConfiguration.RM_ADMIN_CLIENT_THREAD_COUNT,\n             YarnConfiguration.DEFAULT_RM_ADMIN_CLIENT_THREAD_COUNT));\n \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,\n         false)) {\n       refreshServiceAcls(\n           getConfiguration(conf,\n               YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE),\n           RMPolicyProvider.getInstance());\n     }\n \n     if (rmContext.isHAEnabled()) {\n       RPC.setProtocolEngine(conf, HAServiceProtocolPB.class,\n           ProtobufRpcEngine.class);\n \n       HAServiceProtocolServerSideTranslatorPB haServiceProtocolXlator \u003d\n           new HAServiceProtocolServerSideTranslatorPB(this);\n       BlockingService haPbService \u003d\n           HAServiceProtocolProtos.HAServiceProtocolService\n               .newReflectiveBlockingService(haServiceProtocolXlator);\n       server.addProtocol(RPC.RpcKind.RPC_PROTOCOL_BUFFER,\n           HAServiceProtocol.class, haPbService);\n     }\n \n     this.server.start();\n-    conf.updateConnectAddr(YarnConfiguration.RM_ADMIN_ADDRESS,\n-        server.getListenerAddress());\n+    conf.updateConnectAddr(YarnConfiguration.RM_BIND_HOST,\n+                           YarnConfiguration.RM_ADMIN_ADDRESS,\n+                           YarnConfiguration.DEFAULT_RM_ADMIN_ADDRESS,\n+                           server.getListenerAddress());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startServer() throws Exception {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    this.server \u003d (Server) rpc.getServer(\n        ResourceManagerAdministrationProtocol.class, this, masterServiceBindAddress,\n        conf, null,\n        conf.getInt(YarnConfiguration.RM_ADMIN_CLIENT_THREAD_COUNT,\n            YarnConfiguration.DEFAULT_RM_ADMIN_CLIENT_THREAD_COUNT));\n\n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,\n        false)) {\n      refreshServiceAcls(\n          getConfiguration(conf,\n              YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE),\n          RMPolicyProvider.getInstance());\n    }\n\n    if (rmContext.isHAEnabled()) {\n      RPC.setProtocolEngine(conf, HAServiceProtocolPB.class,\n          ProtobufRpcEngine.class);\n\n      HAServiceProtocolServerSideTranslatorPB haServiceProtocolXlator \u003d\n          new HAServiceProtocolServerSideTranslatorPB(this);\n      BlockingService haPbService \u003d\n          HAServiceProtocolProtos.HAServiceProtocolService\n              .newReflectiveBlockingService(haServiceProtocolXlator);\n      server.addProtocol(RPC.RpcKind.RPC_PROTOCOL_BUFFER,\n          HAServiceProtocol.class, haPbService);\n    }\n\n    this.server.start();\n    conf.updateConnectAddr(YarnConfiguration.RM_BIND_HOST,\n                           YarnConfiguration.RM_ADMIN_ADDRESS,\n                           YarnConfiguration.DEFAULT_RM_ADMIN_ADDRESS,\n                           server.getListenerAddress());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/AdminService.java",
      "extendedDetails": {}
    },
    "1fa6ab249b0fa63cab550e1b7703339c4d888c5d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1459. Changed ResourceManager to depend its service initialization on the configuration-provider mechanism during startup too. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1566791 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/02/14 2:50 PM",
      "commitName": "1fa6ab249b0fa63cab550e1b7703339c4d888c5d",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "04/02/14 2:46 PM",
      "commitNameOld": "b812af964d100c50d065cdd9007cef31ea2642a8",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 6.0,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,36 @@\n   protected void startServer() throws Exception {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     this.server \u003d (Server) rpc.getServer(\n         ResourceManagerAdministrationProtocol.class, this, masterServiceAddress,\n         conf, null,\n         conf.getInt(YarnConfiguration.RM_ADMIN_CLIENT_THREAD_COUNT,\n             YarnConfiguration.DEFAULT_RM_ADMIN_CLIENT_THREAD_COUNT));\n \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,\n         false)) {\n-      refreshServiceAcls(conf, new RMPolicyProvider());\n+      refreshServiceAcls(\n+          getConfiguration(conf,\n+              YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE),\n+          RMPolicyProvider.getInstance());\n     }\n \n     if (rmContext.isHAEnabled()) {\n       RPC.setProtocolEngine(conf, HAServiceProtocolPB.class,\n           ProtobufRpcEngine.class);\n \n       HAServiceProtocolServerSideTranslatorPB haServiceProtocolXlator \u003d\n           new HAServiceProtocolServerSideTranslatorPB(this);\n       BlockingService haPbService \u003d\n           HAServiceProtocolProtos.HAServiceProtocolService\n               .newReflectiveBlockingService(haServiceProtocolXlator);\n       server.addProtocol(RPC.RpcKind.RPC_PROTOCOL_BUFFER,\n           HAServiceProtocol.class, haPbService);\n     }\n \n     this.server.start();\n     conf.updateConnectAddr(YarnConfiguration.RM_ADMIN_ADDRESS,\n         server.getListenerAddress());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startServer() throws Exception {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    this.server \u003d (Server) rpc.getServer(\n        ResourceManagerAdministrationProtocol.class, this, masterServiceAddress,\n        conf, null,\n        conf.getInt(YarnConfiguration.RM_ADMIN_CLIENT_THREAD_COUNT,\n            YarnConfiguration.DEFAULT_RM_ADMIN_CLIENT_THREAD_COUNT));\n\n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,\n        false)) {\n      refreshServiceAcls(\n          getConfiguration(conf,\n              YarnConfiguration.HADOOP_POLICY_CONFIGURATION_FILE),\n          RMPolicyProvider.getInstance());\n    }\n\n    if (rmContext.isHAEnabled()) {\n      RPC.setProtocolEngine(conf, HAServiceProtocolPB.class,\n          ProtobufRpcEngine.class);\n\n      HAServiceProtocolServerSideTranslatorPB haServiceProtocolXlator \u003d\n          new HAServiceProtocolServerSideTranslatorPB(this);\n      BlockingService haPbService \u003d\n          HAServiceProtocolProtos.HAServiceProtocolService\n              .newReflectiveBlockingService(haServiceProtocolXlator);\n      server.addProtocol(RPC.RpcKind.RPC_PROTOCOL_BUFFER,\n          HAServiceProtocol.class, haPbService);\n    }\n\n    this.server.start();\n    conf.updateConnectAddr(YarnConfiguration.RM_ADMIN_ADDRESS,\n        server.getListenerAddress());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/AdminService.java",
      "extendedDetails": {}
    },
    "94e2e78ab751d1da775d0acf6e5ee6c0694ed746": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1481. Move internal services logic from AdminService to ResourceManager. (vinodkv via kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550167 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/12/13 7:13 AM",
      "commitName": "94e2e78ab751d1da775d0acf6e5ee6c0694ed746",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "02/12/13 2:18 PM",
      "commitNameOld": "c58ae266e9fa336ef5b515f540c8ce8bb2f76df8",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 8.7,
      "commitsBetweenForRepo": 52,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n   protected void startServer() throws Exception {\n     Configuration conf \u003d getConfig();\n     YarnRPC rpc \u003d YarnRPC.create(conf);\n     this.server \u003d (Server) rpc.getServer(\n         ResourceManagerAdministrationProtocol.class, this, masterServiceAddress,\n         conf, null,\n         conf.getInt(YarnConfiguration.RM_ADMIN_CLIENT_THREAD_COUNT,\n             YarnConfiguration.DEFAULT_RM_ADMIN_CLIENT_THREAD_COUNT));\n \n     // Enable service authorization?\n     if (conf.getBoolean(\n         CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,\n         false)) {\n       refreshServiceAcls(conf, new RMPolicyProvider());\n     }\n \n-    if (haEnabled) {\n+    if (rmContext.isHAEnabled()) {\n       RPC.setProtocolEngine(conf, HAServiceProtocolPB.class,\n           ProtobufRpcEngine.class);\n \n       HAServiceProtocolServerSideTranslatorPB haServiceProtocolXlator \u003d\n           new HAServiceProtocolServerSideTranslatorPB(this);\n       BlockingService haPbService \u003d\n           HAServiceProtocolProtos.HAServiceProtocolService\n               .newReflectiveBlockingService(haServiceProtocolXlator);\n       server.addProtocol(RPC.RpcKind.RPC_PROTOCOL_BUFFER,\n           HAServiceProtocol.class, haPbService);\n     }\n \n     this.server.start();\n     conf.updateConnectAddr(YarnConfiguration.RM_ADMIN_ADDRESS,\n         server.getListenerAddress());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startServer() throws Exception {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    this.server \u003d (Server) rpc.getServer(\n        ResourceManagerAdministrationProtocol.class, this, masterServiceAddress,\n        conf, null,\n        conf.getInt(YarnConfiguration.RM_ADMIN_CLIENT_THREAD_COUNT,\n            YarnConfiguration.DEFAULT_RM_ADMIN_CLIENT_THREAD_COUNT));\n\n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,\n        false)) {\n      refreshServiceAcls(conf, new RMPolicyProvider());\n    }\n\n    if (rmContext.isHAEnabled()) {\n      RPC.setProtocolEngine(conf, HAServiceProtocolPB.class,\n          ProtobufRpcEngine.class);\n\n      HAServiceProtocolServerSideTranslatorPB haServiceProtocolXlator \u003d\n          new HAServiceProtocolServerSideTranslatorPB(this);\n      BlockingService haPbService \u003d\n          HAServiceProtocolProtos.HAServiceProtocolService\n              .newReflectiveBlockingService(haServiceProtocolXlator);\n      server.addProtocol(RPC.RpcKind.RPC_PROTOCOL_BUFFER,\n          HAServiceProtocol.class, haPbService);\n    }\n\n    this.server.start();\n    conf.updateConnectAddr(YarnConfiguration.RM_ADMIN_ADDRESS,\n        server.getListenerAddress());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/AdminService.java",
      "extendedDetails": {}
    },
    "c58ae266e9fa336ef5b515f540c8ce8bb2f76df8": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange,Yrename)",
      "commitMessage": "YARN-1318. Promoted AdminService to an Always-On service and merged it into RMHAProtocolService. Contributed by Karthik Kambatla.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1547212 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/12/13 2:18 PM",
      "commitName": "c58ae266e9fa336ef5b515f540c8ce8bb2f76df8",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-1318. Promoted AdminService to an Always-On service and merged it into RMHAProtocolService. Contributed by Karthik Kambatla.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1547212 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "02/12/13 2:18 PM",
          "commitName": "c58ae266e9fa336ef5b515f540c8ce8bb2f76df8",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "02/12/13 12:18 PM",
          "commitNameOld": "38a04a3042c5af455605bd3477358893700e2a9d",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 0.08,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,33 @@\n-  protected void startHAAdminServer() throws Exception {\n-    InetSocketAddress haAdminServiceAddress \u003d conf.getSocketAddr(\n-        YarnConfiguration.RM_HA_ADMIN_ADDRESS,\n-        YarnConfiguration.DEFAULT_RM_HA_ADMIN_ADDRESS,\n-        YarnConfiguration.DEFAULT_RM_HA_ADMIN_PORT);\n-\n-    RPC.setProtocolEngine(conf, HAServiceProtocolPB.class,\n-        ProtobufRpcEngine.class);\n-\n-    HAServiceProtocolServerSideTranslatorPB haServiceProtocolXlator \u003d\n-        new HAServiceProtocolServerSideTranslatorPB(this);\n-    BlockingService haPbService \u003d\n-        HAServiceProtocolProtos.HAServiceProtocolService\n-            .newReflectiveBlockingService(haServiceProtocolXlator);\n-\n-    WritableRpcEngine.ensureInitialized();\n-\n-    String bindHost \u003d haAdminServiceAddress.getHostName();\n-\n-    int serviceHandlerCount \u003d conf.getInt(\n-        YarnConfiguration.RM_HA_ADMIN_CLIENT_THREAD_COUNT,\n-        YarnConfiguration.DEFAULT_RM_HA_ADMIN_CLIENT_THREAD_COUNT);\n-\n-    haAdminServer \u003d new RPC.Builder(conf)\n-        .setProtocol(HAServiceProtocolPB.class)\n-        .setInstance(haPbService)\n-        .setBindAddress(bindHost)\n-        .setPort(haAdminServiceAddress.getPort())\n-        .setNumHandlers(serviceHandlerCount)\n-        .setVerbose(false)\n-        .build();\n+  protected void startServer() throws Exception {\n+    Configuration conf \u003d getConfig();\n+    YarnRPC rpc \u003d YarnRPC.create(conf);\n+    this.server \u003d (Server) rpc.getServer(\n+        ResourceManagerAdministrationProtocol.class, this, masterServiceAddress,\n+        conf, null,\n+        conf.getInt(YarnConfiguration.RM_ADMIN_CLIENT_THREAD_COUNT,\n+            YarnConfiguration.DEFAULT_RM_ADMIN_CLIENT_THREAD_COUNT));\n \n     // Enable service authorization?\n     if (conf.getBoolean(\n-        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, false)) {\n-      haAdminServer.refreshServiceAcl(conf, new RMPolicyProvider());\n+        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,\n+        false)) {\n+      refreshServiceAcls(conf, new RMPolicyProvider());\n     }\n \n-    haAdminServer.start();\n-    conf.updateConnectAddr(YarnConfiguration.RM_HA_ADMIN_ADDRESS,\n-        haAdminServer.getListenerAddress());\n+    if (haEnabled) {\n+      RPC.setProtocolEngine(conf, HAServiceProtocolPB.class,\n+          ProtobufRpcEngine.class);\n+\n+      HAServiceProtocolServerSideTranslatorPB haServiceProtocolXlator \u003d\n+          new HAServiceProtocolServerSideTranslatorPB(this);\n+      BlockingService haPbService \u003d\n+          HAServiceProtocolProtos.HAServiceProtocolService\n+              .newReflectiveBlockingService(haServiceProtocolXlator);\n+      server.addProtocol(RPC.RpcKind.RPC_PROTOCOL_BUFFER,\n+          HAServiceProtocol.class, haPbService);\n+    }\n+\n+    this.server.start();\n+    conf.updateConnectAddr(YarnConfiguration.RM_ADMIN_ADDRESS,\n+        server.getListenerAddress());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void startServer() throws Exception {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    this.server \u003d (Server) rpc.getServer(\n        ResourceManagerAdministrationProtocol.class, this, masterServiceAddress,\n        conf, null,\n        conf.getInt(YarnConfiguration.RM_ADMIN_CLIENT_THREAD_COUNT,\n            YarnConfiguration.DEFAULT_RM_ADMIN_CLIENT_THREAD_COUNT));\n\n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,\n        false)) {\n      refreshServiceAcls(conf, new RMPolicyProvider());\n    }\n\n    if (haEnabled) {\n      RPC.setProtocolEngine(conf, HAServiceProtocolPB.class,\n          ProtobufRpcEngine.class);\n\n      HAServiceProtocolServerSideTranslatorPB haServiceProtocolXlator \u003d\n          new HAServiceProtocolServerSideTranslatorPB(this);\n      BlockingService haPbService \u003d\n          HAServiceProtocolProtos.HAServiceProtocolService\n              .newReflectiveBlockingService(haServiceProtocolXlator);\n      server.addProtocol(RPC.RpcKind.RPC_PROTOCOL_BUFFER,\n          HAServiceProtocol.class, haPbService);\n    }\n\n    this.server.start();\n    conf.updateConnectAddr(YarnConfiguration.RM_ADMIN_ADDRESS,\n        server.getListenerAddress());\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/AdminService.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMHAProtocolService.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/AdminService.java",
            "oldMethodName": "startHAAdminServer",
            "newMethodName": "startServer"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1318. Promoted AdminService to an Always-On service and merged it into RMHAProtocolService. Contributed by Karthik Kambatla.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1547212 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "02/12/13 2:18 PM",
          "commitName": "c58ae266e9fa336ef5b515f540c8ce8bb2f76df8",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "02/12/13 12:18 PM",
          "commitNameOld": "38a04a3042c5af455605bd3477358893700e2a9d",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 0.08,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,33 @@\n-  protected void startHAAdminServer() throws Exception {\n-    InetSocketAddress haAdminServiceAddress \u003d conf.getSocketAddr(\n-        YarnConfiguration.RM_HA_ADMIN_ADDRESS,\n-        YarnConfiguration.DEFAULT_RM_HA_ADMIN_ADDRESS,\n-        YarnConfiguration.DEFAULT_RM_HA_ADMIN_PORT);\n-\n-    RPC.setProtocolEngine(conf, HAServiceProtocolPB.class,\n-        ProtobufRpcEngine.class);\n-\n-    HAServiceProtocolServerSideTranslatorPB haServiceProtocolXlator \u003d\n-        new HAServiceProtocolServerSideTranslatorPB(this);\n-    BlockingService haPbService \u003d\n-        HAServiceProtocolProtos.HAServiceProtocolService\n-            .newReflectiveBlockingService(haServiceProtocolXlator);\n-\n-    WritableRpcEngine.ensureInitialized();\n-\n-    String bindHost \u003d haAdminServiceAddress.getHostName();\n-\n-    int serviceHandlerCount \u003d conf.getInt(\n-        YarnConfiguration.RM_HA_ADMIN_CLIENT_THREAD_COUNT,\n-        YarnConfiguration.DEFAULT_RM_HA_ADMIN_CLIENT_THREAD_COUNT);\n-\n-    haAdminServer \u003d new RPC.Builder(conf)\n-        .setProtocol(HAServiceProtocolPB.class)\n-        .setInstance(haPbService)\n-        .setBindAddress(bindHost)\n-        .setPort(haAdminServiceAddress.getPort())\n-        .setNumHandlers(serviceHandlerCount)\n-        .setVerbose(false)\n-        .build();\n+  protected void startServer() throws Exception {\n+    Configuration conf \u003d getConfig();\n+    YarnRPC rpc \u003d YarnRPC.create(conf);\n+    this.server \u003d (Server) rpc.getServer(\n+        ResourceManagerAdministrationProtocol.class, this, masterServiceAddress,\n+        conf, null,\n+        conf.getInt(YarnConfiguration.RM_ADMIN_CLIENT_THREAD_COUNT,\n+            YarnConfiguration.DEFAULT_RM_ADMIN_CLIENT_THREAD_COUNT));\n \n     // Enable service authorization?\n     if (conf.getBoolean(\n-        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, false)) {\n-      haAdminServer.refreshServiceAcl(conf, new RMPolicyProvider());\n+        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,\n+        false)) {\n+      refreshServiceAcls(conf, new RMPolicyProvider());\n     }\n \n-    haAdminServer.start();\n-    conf.updateConnectAddr(YarnConfiguration.RM_HA_ADMIN_ADDRESS,\n-        haAdminServer.getListenerAddress());\n+    if (haEnabled) {\n+      RPC.setProtocolEngine(conf, HAServiceProtocolPB.class,\n+          ProtobufRpcEngine.class);\n+\n+      HAServiceProtocolServerSideTranslatorPB haServiceProtocolXlator \u003d\n+          new HAServiceProtocolServerSideTranslatorPB(this);\n+      BlockingService haPbService \u003d\n+          HAServiceProtocolProtos.HAServiceProtocolService\n+              .newReflectiveBlockingService(haServiceProtocolXlator);\n+      server.addProtocol(RPC.RpcKind.RPC_PROTOCOL_BUFFER,\n+          HAServiceProtocol.class, haPbService);\n+    }\n+\n+    this.server.start();\n+    conf.updateConnectAddr(YarnConfiguration.RM_ADMIN_ADDRESS,\n+        server.getListenerAddress());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void startServer() throws Exception {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    this.server \u003d (Server) rpc.getServer(\n        ResourceManagerAdministrationProtocol.class, this, masterServiceAddress,\n        conf, null,\n        conf.getInt(YarnConfiguration.RM_ADMIN_CLIENT_THREAD_COUNT,\n            YarnConfiguration.DEFAULT_RM_ADMIN_CLIENT_THREAD_COUNT));\n\n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,\n        false)) {\n      refreshServiceAcls(conf, new RMPolicyProvider());\n    }\n\n    if (haEnabled) {\n      RPC.setProtocolEngine(conf, HAServiceProtocolPB.class,\n          ProtobufRpcEngine.class);\n\n      HAServiceProtocolServerSideTranslatorPB haServiceProtocolXlator \u003d\n          new HAServiceProtocolServerSideTranslatorPB(this);\n      BlockingService haPbService \u003d\n          HAServiceProtocolProtos.HAServiceProtocolService\n              .newReflectiveBlockingService(haServiceProtocolXlator);\n      server.addProtocol(RPC.RpcKind.RPC_PROTOCOL_BUFFER,\n          HAServiceProtocol.class, haPbService);\n    }\n\n    this.server.start();\n    conf.updateConnectAddr(YarnConfiguration.RM_ADMIN_ADDRESS,\n        server.getListenerAddress());\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/AdminService.java",
          "extendedDetails": {}
        },
        {
          "type": "Yrename",
          "commitMessage": "YARN-1318. Promoted AdminService to an Always-On service and merged it into RMHAProtocolService. Contributed by Karthik Kambatla.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1547212 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "02/12/13 2:18 PM",
          "commitName": "c58ae266e9fa336ef5b515f540c8ce8bb2f76df8",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "02/12/13 12:18 PM",
          "commitNameOld": "38a04a3042c5af455605bd3477358893700e2a9d",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 0.08,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,33 @@\n-  protected void startHAAdminServer() throws Exception {\n-    InetSocketAddress haAdminServiceAddress \u003d conf.getSocketAddr(\n-        YarnConfiguration.RM_HA_ADMIN_ADDRESS,\n-        YarnConfiguration.DEFAULT_RM_HA_ADMIN_ADDRESS,\n-        YarnConfiguration.DEFAULT_RM_HA_ADMIN_PORT);\n-\n-    RPC.setProtocolEngine(conf, HAServiceProtocolPB.class,\n-        ProtobufRpcEngine.class);\n-\n-    HAServiceProtocolServerSideTranslatorPB haServiceProtocolXlator \u003d\n-        new HAServiceProtocolServerSideTranslatorPB(this);\n-    BlockingService haPbService \u003d\n-        HAServiceProtocolProtos.HAServiceProtocolService\n-            .newReflectiveBlockingService(haServiceProtocolXlator);\n-\n-    WritableRpcEngine.ensureInitialized();\n-\n-    String bindHost \u003d haAdminServiceAddress.getHostName();\n-\n-    int serviceHandlerCount \u003d conf.getInt(\n-        YarnConfiguration.RM_HA_ADMIN_CLIENT_THREAD_COUNT,\n-        YarnConfiguration.DEFAULT_RM_HA_ADMIN_CLIENT_THREAD_COUNT);\n-\n-    haAdminServer \u003d new RPC.Builder(conf)\n-        .setProtocol(HAServiceProtocolPB.class)\n-        .setInstance(haPbService)\n-        .setBindAddress(bindHost)\n-        .setPort(haAdminServiceAddress.getPort())\n-        .setNumHandlers(serviceHandlerCount)\n-        .setVerbose(false)\n-        .build();\n+  protected void startServer() throws Exception {\n+    Configuration conf \u003d getConfig();\n+    YarnRPC rpc \u003d YarnRPC.create(conf);\n+    this.server \u003d (Server) rpc.getServer(\n+        ResourceManagerAdministrationProtocol.class, this, masterServiceAddress,\n+        conf, null,\n+        conf.getInt(YarnConfiguration.RM_ADMIN_CLIENT_THREAD_COUNT,\n+            YarnConfiguration.DEFAULT_RM_ADMIN_CLIENT_THREAD_COUNT));\n \n     // Enable service authorization?\n     if (conf.getBoolean(\n-        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, false)) {\n-      haAdminServer.refreshServiceAcl(conf, new RMPolicyProvider());\n+        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,\n+        false)) {\n+      refreshServiceAcls(conf, new RMPolicyProvider());\n     }\n \n-    haAdminServer.start();\n-    conf.updateConnectAddr(YarnConfiguration.RM_HA_ADMIN_ADDRESS,\n-        haAdminServer.getListenerAddress());\n+    if (haEnabled) {\n+      RPC.setProtocolEngine(conf, HAServiceProtocolPB.class,\n+          ProtobufRpcEngine.class);\n+\n+      HAServiceProtocolServerSideTranslatorPB haServiceProtocolXlator \u003d\n+          new HAServiceProtocolServerSideTranslatorPB(this);\n+      BlockingService haPbService \u003d\n+          HAServiceProtocolProtos.HAServiceProtocolService\n+              .newReflectiveBlockingService(haServiceProtocolXlator);\n+      server.addProtocol(RPC.RpcKind.RPC_PROTOCOL_BUFFER,\n+          HAServiceProtocol.class, haPbService);\n+    }\n+\n+    this.server.start();\n+    conf.updateConnectAddr(YarnConfiguration.RM_ADMIN_ADDRESS,\n+        server.getListenerAddress());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void startServer() throws Exception {\n    Configuration conf \u003d getConfig();\n    YarnRPC rpc \u003d YarnRPC.create(conf);\n    this.server \u003d (Server) rpc.getServer(\n        ResourceManagerAdministrationProtocol.class, this, masterServiceAddress,\n        conf, null,\n        conf.getInt(YarnConfiguration.RM_ADMIN_CLIENT_THREAD_COUNT,\n            YarnConfiguration.DEFAULT_RM_ADMIN_CLIENT_THREAD_COUNT));\n\n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION,\n        false)) {\n      refreshServiceAcls(conf, new RMPolicyProvider());\n    }\n\n    if (haEnabled) {\n      RPC.setProtocolEngine(conf, HAServiceProtocolPB.class,\n          ProtobufRpcEngine.class);\n\n      HAServiceProtocolServerSideTranslatorPB haServiceProtocolXlator \u003d\n          new HAServiceProtocolServerSideTranslatorPB(this);\n      BlockingService haPbService \u003d\n          HAServiceProtocolProtos.HAServiceProtocolService\n              .newReflectiveBlockingService(haServiceProtocolXlator);\n      server.addProtocol(RPC.RpcKind.RPC_PROTOCOL_BUFFER,\n          HAServiceProtocol.class, haPbService);\n    }\n\n    this.server.start();\n    conf.updateConnectAddr(YarnConfiguration.RM_ADMIN_ADDRESS,\n        server.getListenerAddress());\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/AdminService.java",
          "extendedDetails": {
            "oldValue": "startHAAdminServer",
            "newValue": "startServer"
          }
        }
      ]
    },
    "03510d00f48137fe4273c3e694e87fc0e660a706": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1068. Add admin support for HA operations (Karthik Kambatla via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1536888 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/10/13 2:03 PM",
      "commitName": "03510d00f48137fe4273c3e694e87fc0e660a706",
      "commitAuthor": "Bikas Saha",
      "diff": "@@ -0,0 +1,42 @@\n+  protected void startHAAdminServer() throws Exception {\n+    InetSocketAddress haAdminServiceAddress \u003d conf.getSocketAddr(\n+        YarnConfiguration.RM_HA_ADMIN_ADDRESS,\n+        YarnConfiguration.DEFAULT_RM_HA_ADMIN_ADDRESS,\n+        YarnConfiguration.DEFAULT_RM_HA_ADMIN_PORT);\n+\n+    RPC.setProtocolEngine(conf, HAServiceProtocolPB.class,\n+        ProtobufRpcEngine.class);\n+\n+    HAServiceProtocolServerSideTranslatorPB haServiceProtocolXlator \u003d\n+        new HAServiceProtocolServerSideTranslatorPB(this);\n+    BlockingService haPbService \u003d\n+        HAServiceProtocolProtos.HAServiceProtocolService\n+            .newReflectiveBlockingService(haServiceProtocolXlator);\n+\n+    WritableRpcEngine.ensureInitialized();\n+\n+    String bindHost \u003d haAdminServiceAddress.getHostName();\n+\n+    int serviceHandlerCount \u003d conf.getInt(\n+        YarnConfiguration.RM_HA_ADMIN_CLIENT_THREAD_COUNT,\n+        YarnConfiguration.DEFAULT_RM_HA_ADMIN_CLIENT_THREAD_COUNT);\n+\n+    haAdminServer \u003d new RPC.Builder(conf)\n+        .setProtocol(HAServiceProtocolPB.class)\n+        .setInstance(haPbService)\n+        .setBindAddress(bindHost)\n+        .setPort(haAdminServiceAddress.getPort())\n+        .setNumHandlers(serviceHandlerCount)\n+        .setVerbose(false)\n+        .build();\n+\n+    // Enable service authorization?\n+    if (conf.getBoolean(\n+        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, false)) {\n+      haAdminServer.refreshServiceAcl(conf, new RMPolicyProvider());\n+    }\n+\n+    haAdminServer.start();\n+    conf.updateConnectAddr(YarnConfiguration.RM_HA_ADMIN_ADDRESS,\n+        haAdminServer.getListenerAddress());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startHAAdminServer() throws Exception {\n    InetSocketAddress haAdminServiceAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.RM_HA_ADMIN_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_HA_ADMIN_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_HA_ADMIN_PORT);\n\n    RPC.setProtocolEngine(conf, HAServiceProtocolPB.class,\n        ProtobufRpcEngine.class);\n\n    HAServiceProtocolServerSideTranslatorPB haServiceProtocolXlator \u003d\n        new HAServiceProtocolServerSideTranslatorPB(this);\n    BlockingService haPbService \u003d\n        HAServiceProtocolProtos.HAServiceProtocolService\n            .newReflectiveBlockingService(haServiceProtocolXlator);\n\n    WritableRpcEngine.ensureInitialized();\n\n    String bindHost \u003d haAdminServiceAddress.getHostName();\n\n    int serviceHandlerCount \u003d conf.getInt(\n        YarnConfiguration.RM_HA_ADMIN_CLIENT_THREAD_COUNT,\n        YarnConfiguration.DEFAULT_RM_HA_ADMIN_CLIENT_THREAD_COUNT);\n\n    haAdminServer \u003d new RPC.Builder(conf)\n        .setProtocol(HAServiceProtocolPB.class)\n        .setInstance(haPbService)\n        .setBindAddress(bindHost)\n        .setPort(haAdminServiceAddress.getPort())\n        .setNumHandlers(serviceHandlerCount)\n        .setVerbose(false)\n        .build();\n\n    // Enable service authorization?\n    if (conf.getBoolean(\n        CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, false)) {\n      haAdminServer.refreshServiceAcl(conf, new RMPolicyProvider());\n    }\n\n    haAdminServer.start();\n    conf.updateConnectAddr(YarnConfiguration.RM_HA_ADMIN_ADDRESS,\n        haAdminServer.getListenerAddress());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMHAProtocolService.java"
    }
  }
}