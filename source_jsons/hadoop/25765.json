{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMContainerRequestor.java",
  "functionName": "computeIgnoreBlacklisting",
  "functionId": "computeIgnoreBlacklisting",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerRequestor.java",
  "functionStartLine": 294,
  "functionEndLine": 325,
  "numCommitsSeen": 38,
  "timeTaken": 1401,
  "changeHistory": [
    "fb3f338c652be737436accd076d2aacfd70c276c",
    "28a2eb9d722bb8cbbeee87a1c43b4dc4ef4467ce",
    "e7543b944c2b35d0a1ca0a92efeca47ad414ac7a"
  ],
  "changeHistoryShort": {
    "fb3f338c652be737436accd076d2aacfd70c276c": "Ybodychange",
    "28a2eb9d722bb8cbbeee87a1c43b4dc4ef4467ce": "Ybodychange",
    "e7543b944c2b35d0a1ca0a92efeca47ad414ac7a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "fb3f338c652be737436accd076d2aacfd70c276c": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5489. MR jobs hangs as it does not use the node-blacklisting feature in RM requests (Zhijie Shen via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1529005 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/10/13 2:14 PM",
      "commitName": "fb3f338c652be737436accd076d2aacfd70c276c",
      "commitAuthor": "Bikas Saha",
      "commitDateOld": "18/07/13 5:57 PM",
      "commitNameOld": "ac914f79bc80b152e71e7de5497b73f22824f4a7",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 76.85,
      "commitsBetweenForRepo": 451,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,32 @@\n   protected void computeIgnoreBlacklisting() {\n     if (!nodeBlacklistingEnabled) {\n       return;\n     }\n     if (blacklistDisablePercent !\u003d -1\n         \u0026\u0026 (blacklistedNodeCount !\u003d blacklistedNodes.size() ||\n             clusterNmCount !\u003d lastClusterNmCount)) {\n       blacklistedNodeCount \u003d blacklistedNodes.size();\n       if (clusterNmCount \u003d\u003d 0) {\n         LOG.info(\"KnownNode Count at 0. Not computing ignoreBlacklisting\");\n         return;\n       }\n       int val \u003d (int) ((float) blacklistedNodes.size() / clusterNmCount * 100);\n       if (val \u003e\u003d blacklistDisablePercent) {\n         if (ignoreBlacklisting.compareAndSet(false, true)) {\n           LOG.info(\"Ignore blacklisting set to true. Known: \" + clusterNmCount\n               + \", Blacklisted: \" + blacklistedNodeCount + \", \" + val + \"%\");\n+          // notify RM to ignore all the blacklisted nodes\n+          blacklistAdditions.clear();\n+          blacklistRemovals.addAll(blacklistedNodes);\n         }\n       } else {\n         if (ignoreBlacklisting.compareAndSet(true, false)) {\n           LOG.info(\"Ignore blacklisting set to false. Known: \" + clusterNmCount\n               + \", Blacklisted: \" + blacklistedNodeCount + \", \" + val + \"%\");\n+          // notify RM of all the blacklisted nodes\n+          blacklistAdditions.addAll(blacklistedNodes);\n+          blacklistRemovals.clear();\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void computeIgnoreBlacklisting() {\n    if (!nodeBlacklistingEnabled) {\n      return;\n    }\n    if (blacklistDisablePercent !\u003d -1\n        \u0026\u0026 (blacklistedNodeCount !\u003d blacklistedNodes.size() ||\n            clusterNmCount !\u003d lastClusterNmCount)) {\n      blacklistedNodeCount \u003d blacklistedNodes.size();\n      if (clusterNmCount \u003d\u003d 0) {\n        LOG.info(\"KnownNode Count at 0. Not computing ignoreBlacklisting\");\n        return;\n      }\n      int val \u003d (int) ((float) blacklistedNodes.size() / clusterNmCount * 100);\n      if (val \u003e\u003d blacklistDisablePercent) {\n        if (ignoreBlacklisting.compareAndSet(false, true)) {\n          LOG.info(\"Ignore blacklisting set to true. Known: \" + clusterNmCount\n              + \", Blacklisted: \" + blacklistedNodeCount + \", \" + val + \"%\");\n          // notify RM to ignore all the blacklisted nodes\n          blacklistAdditions.clear();\n          blacklistRemovals.addAll(blacklistedNodes);\n        }\n      } else {\n        if (ignoreBlacklisting.compareAndSet(true, false)) {\n          LOG.info(\"Ignore blacklisting set to false. Known: \" + clusterNmCount\n              + \", Blacklisted: \" + blacklistedNodeCount + \", \" + val + \"%\");\n          // notify RM of all the blacklisted nodes\n          blacklistAdditions.addAll(blacklistedNodes);\n          blacklistRemovals.clear();\n        }\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerRequestor.java",
      "extendedDetails": {}
    },
    "28a2eb9d722bb8cbbeee87a1c43b4dc4ef4467ce": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3810. Performance tweaks - reduced logging in AM and defined hascode/equals for ResourceRequest \u0026 Priority. Contributed by Vinod K V. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1241205 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/02/12 2:01 PM",
      "commitName": "28a2eb9d722bb8cbbeee87a1c43b4dc4ef4467ce",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "27/12/11 11:54 AM",
      "commitNameOld": "fcbad14a3da7fadbb601bf245552ecca2fbc5026",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 41.09,
      "commitsBetweenForRepo": 218,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,26 @@\n   protected void computeIgnoreBlacklisting() {\n+    if (!nodeBlacklistingEnabled) {\n+      return;\n+    }\n     if (blacklistDisablePercent !\u003d -1\n         \u0026\u0026 (blacklistedNodeCount !\u003d blacklistedNodes.size() ||\n             clusterNmCount !\u003d lastClusterNmCount)) {\n       blacklistedNodeCount \u003d blacklistedNodes.size();\n       if (clusterNmCount \u003d\u003d 0) {\n         LOG.info(\"KnownNode Count at 0. Not computing ignoreBlacklisting\");\n         return;\n       }\n       int val \u003d (int) ((float) blacklistedNodes.size() / clusterNmCount * 100);\n       if (val \u003e\u003d blacklistDisablePercent) {\n         if (ignoreBlacklisting.compareAndSet(false, true)) {\n           LOG.info(\"Ignore blacklisting set to true. Known: \" + clusterNmCount\n               + \", Blacklisted: \" + blacklistedNodeCount + \", \" + val + \"%\");\n         }\n       } else {\n         if (ignoreBlacklisting.compareAndSet(true, false)) {\n           LOG.info(\"Ignore blacklisting set to false. Known: \" + clusterNmCount\n               + \", Blacklisted: \" + blacklistedNodeCount + \", \" + val + \"%\");\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void computeIgnoreBlacklisting() {\n    if (!nodeBlacklistingEnabled) {\n      return;\n    }\n    if (blacklistDisablePercent !\u003d -1\n        \u0026\u0026 (blacklistedNodeCount !\u003d blacklistedNodes.size() ||\n            clusterNmCount !\u003d lastClusterNmCount)) {\n      blacklistedNodeCount \u003d blacklistedNodes.size();\n      if (clusterNmCount \u003d\u003d 0) {\n        LOG.info(\"KnownNode Count at 0. Not computing ignoreBlacklisting\");\n        return;\n      }\n      int val \u003d (int) ((float) blacklistedNodes.size() / clusterNmCount * 100);\n      if (val \u003e\u003d blacklistDisablePercent) {\n        if (ignoreBlacklisting.compareAndSet(false, true)) {\n          LOG.info(\"Ignore blacklisting set to true. Known: \" + clusterNmCount\n              + \", Blacklisted: \" + blacklistedNodeCount + \", \" + val + \"%\");\n        }\n      } else {\n        if (ignoreBlacklisting.compareAndSet(true, false)) {\n          LOG.info(\"Ignore blacklisting set to false. Known: \" + clusterNmCount\n              + \", Blacklisted: \" + blacklistedNodeCount + \", \" + val + \"%\");\n        }\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerRequestor.java",
      "extendedDetails": {}
    },
    "e7543b944c2b35d0a1ca0a92efeca47ad414ac7a": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-3339. Fixed MR AM to stop considering node blacklisting after the number of nodes blacklisted crosses a threshold. Contributed by Siddharth Seth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1221523 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/12/11 3:27 PM",
      "commitName": "e7543b944c2b35d0a1ca0a92efeca47ad414ac7a",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,23 @@\n+  protected void computeIgnoreBlacklisting() {\n+    if (blacklistDisablePercent !\u003d -1\n+        \u0026\u0026 (blacklistedNodeCount !\u003d blacklistedNodes.size() ||\n+            clusterNmCount !\u003d lastClusterNmCount)) {\n+      blacklistedNodeCount \u003d blacklistedNodes.size();\n+      if (clusterNmCount \u003d\u003d 0) {\n+        LOG.info(\"KnownNode Count at 0. Not computing ignoreBlacklisting\");\n+        return;\n+      }\n+      int val \u003d (int) ((float) blacklistedNodes.size() / clusterNmCount * 100);\n+      if (val \u003e\u003d blacklistDisablePercent) {\n+        if (ignoreBlacklisting.compareAndSet(false, true)) {\n+          LOG.info(\"Ignore blacklisting set to true. Known: \" + clusterNmCount\n+              + \", Blacklisted: \" + blacklistedNodeCount + \", \" + val + \"%\");\n+        }\n+      } else {\n+        if (ignoreBlacklisting.compareAndSet(true, false)) {\n+          LOG.info(\"Ignore blacklisting set to false. Known: \" + clusterNmCount\n+              + \", Blacklisted: \" + blacklistedNodeCount + \", \" + val + \"%\");\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void computeIgnoreBlacklisting() {\n    if (blacklistDisablePercent !\u003d -1\n        \u0026\u0026 (blacklistedNodeCount !\u003d blacklistedNodes.size() ||\n            clusterNmCount !\u003d lastClusterNmCount)) {\n      blacklistedNodeCount \u003d blacklistedNodes.size();\n      if (clusterNmCount \u003d\u003d 0) {\n        LOG.info(\"KnownNode Count at 0. Not computing ignoreBlacklisting\");\n        return;\n      }\n      int val \u003d (int) ((float) blacklistedNodes.size() / clusterNmCount * 100);\n      if (val \u003e\u003d blacklistDisablePercent) {\n        if (ignoreBlacklisting.compareAndSet(false, true)) {\n          LOG.info(\"Ignore blacklisting set to true. Known: \" + clusterNmCount\n              + \", Blacklisted: \" + blacklistedNodeCount + \", \" + val + \"%\");\n        }\n      } else {\n        if (ignoreBlacklisting.compareAndSet(true, false)) {\n          LOG.info(\"Ignore blacklisting set to false. Known: \" + clusterNmCount\n              + \", Blacklisted: \" + blacklistedNodeCount + \", \" + val + \"%\");\n        }\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerRequestor.java"
    }
  }
}