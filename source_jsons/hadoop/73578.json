{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ClientCache.java",
  "functionName": "getClient",
  "functionId": "getClient___conf-Configuration__factory-SocketFactory__valueClass-Class__? extends Writable__",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/ClientCache.java",
  "functionStartLine": 48,
  "functionEndLine": 66,
  "numCommitsSeen": 26,
  "timeTaken": 1347,
  "changeHistory": [
    "e69614d6508c279f34a32160e1fab4aee9f49b2a",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "817df4d5d3687a1fa51b5272b7ace57a51fe6643",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "6c842ad4b5cbb730bb02c6a586b604ea85665cf9",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "e69614d6508c279f34a32160e1fab4aee9f49b2a": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "817df4d5d3687a1fa51b5272b7ace57a51fe6643": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "6c842ad4b5cbb730bb02c6a586b604ea85665cf9": "Ymovefromfile",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e69614d6508c279f34a32160e1fab4aee9f49b2a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10070. RPC client doesn\u0027t use per-connection conf to determine server\u0027s expected Kerberos principal name. Contributed by Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1570776 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/02/14 5:09 PM",
      "commitName": "e69614d6508c279f34a32160e1fab4aee9f49b2a",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 912.04,
      "commitsBetweenForRepo": 5756,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,19 @@\n   public synchronized Client getClient(Configuration conf,\n       SocketFactory factory, Class\u003c? extends Writable\u003e valueClass) {\n     // Construct \u0026 cache client.  The configuration is only used for timeout,\n     // and Clients have connection pools.  So we can either (a) lose some\n     // connection pooling and leak sockets, or (b) use the same timeout for all\n     // configurations.  Since the IPC is usually intended globally, not\n     // per-job, we choose (a).\n     Client client \u003d clients.get(factory);\n     if (client \u003d\u003d null) {\n       client \u003d new Client(valueClass, conf, factory);\n       clients.put(factory, client);\n     } else {\n       client.incCount();\n     }\n+    if (Client.LOG.isDebugEnabled()) {\n+      Client.LOG.debug(\"getting client out of cache: \" + client);\n+    }\n     return client;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized Client getClient(Configuration conf,\n      SocketFactory factory, Class\u003c? extends Writable\u003e valueClass) {\n    // Construct \u0026 cache client.  The configuration is only used for timeout,\n    // and Clients have connection pools.  So we can either (a) lose some\n    // connection pooling and leak sockets, or (b) use the same timeout for all\n    // configurations.  Since the IPC is usually intended globally, not\n    // per-job, we choose (a).\n    Client client \u003d clients.get(factory);\n    if (client \u003d\u003d null) {\n      client \u003d new Client(valueClass, conf, factory);\n      clients.put(factory, client);\n    } else {\n      client.incCount();\n    }\n    if (Client.LOG.isDebugEnabled()) {\n      Client.LOG.debug(\"getting client out of cache: \" + client);\n    }\n    return client;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/ClientCache.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized Client getClient(Configuration conf,\n      SocketFactory factory, Class\u003c? extends Writable\u003e valueClass) {\n    // Construct \u0026 cache client.  The configuration is only used for timeout,\n    // and Clients have connection pools.  So we can either (a) lose some\n    // connection pooling and leak sockets, or (b) use the same timeout for all\n    // configurations.  Since the IPC is usually intended globally, not\n    // per-job, we choose (a).\n    Client client \u003d clients.get(factory);\n    if (client \u003d\u003d null) {\n      client \u003d new Client(valueClass, conf, factory);\n      clients.put(factory, client);\n    } else {\n      client.incCount();\n    }\n    return client;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/ClientCache.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/ipc/ClientCache.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/ClientCache.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized Client getClient(Configuration conf,\n      SocketFactory factory, Class\u003c? extends Writable\u003e valueClass) {\n    // Construct \u0026 cache client.  The configuration is only used for timeout,\n    // and Clients have connection pools.  So we can either (a) lose some\n    // connection pooling and leak sockets, or (b) use the same timeout for all\n    // configurations.  Since the IPC is usually intended globally, not\n    // per-job, we choose (a).\n    Client client \u003d clients.get(factory);\n    if (client \u003d\u003d null) {\n      client \u003d new Client(valueClass, conf, factory);\n      clients.put(factory, client);\n    } else {\n      client.incCount();\n    }\n    return client;\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/ipc/ClientCache.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/ipc/ClientCache.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/ipc/ClientCache.java"
      }
    },
    "817df4d5d3687a1fa51b5272b7ace57a51fe6643": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "HADOOP-7474. Refactor ClientCache out of WritableRpcEngine. Contributed by jitendra.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1151978 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/07/11 12:28 PM",
      "commitName": "817df4d5d3687a1fa51b5272b7ace57a51fe6643",
      "commitAuthor": "Jitendra Nath Pandey",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HADOOP-7474. Refactor ClientCache out of WritableRpcEngine. Contributed by jitendra.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1151978 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/07/11 12:28 PM",
          "commitName": "817df4d5d3687a1fa51b5272b7ace57a51fe6643",
          "commitAuthor": "Jitendra Nath Pandey",
          "commitDateOld": "27/07/11 10:46 PM",
          "commitNameOld": "44320eed1732ea59bd9ec83009eb10e0e6f13023",
          "commitAuthorOld": "Eli Collins",
          "daysBetweenCommits": 0.57,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,16 @@\n-    private synchronized Client getClient(Configuration conf,\n-        SocketFactory factory) {\n-      // Construct \u0026 cache client.  The configuration is only used for timeout,\n-      // and Clients have connection pools.  So we can either (a) lose some\n-      // connection pooling and leak sockets, or (b) use the same timeout for all\n-      // configurations.  Since the IPC is usually intended globally, not\n-      // per-job, we choose (a).\n-      Client client \u003d clients.get(factory);\n-      if (client \u003d\u003d null) {\n-        client \u003d new Client(ObjectWritable.class, conf, factory);\n-        clients.put(factory, client);\n-      } else {\n-        client.incCount();\n-      }\n-      return client;\n-    }\n\\ No newline at end of file\n+  public synchronized Client getClient(Configuration conf,\n+      SocketFactory factory, Class\u003c? extends Writable\u003e valueClass) {\n+    // Construct \u0026 cache client.  The configuration is only used for timeout,\n+    // and Clients have connection pools.  So we can either (a) lose some\n+    // connection pooling and leak sockets, or (b) use the same timeout for all\n+    // configurations.  Since the IPC is usually intended globally, not\n+    // per-job, we choose (a).\n+    Client client \u003d clients.get(factory);\n+    if (client \u003d\u003d null) {\n+      client \u003d new Client(valueClass, conf, factory);\n+      clients.put(factory, client);\n+    } else {\n+      client.incCount();\n+    }\n+    return client;\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized Client getClient(Configuration conf,\n      SocketFactory factory, Class\u003c? extends Writable\u003e valueClass) {\n    // Construct \u0026 cache client.  The configuration is only used for timeout,\n    // and Clients have connection pools.  So we can either (a) lose some\n    // connection pooling and leak sockets, or (b) use the same timeout for all\n    // configurations.  Since the IPC is usually intended globally, not\n    // per-job, we choose (a).\n    Client client \u003d clients.get(factory);\n    if (client \u003d\u003d null) {\n      client \u003d new Client(valueClass, conf, factory);\n      clients.put(factory, client);\n    } else {\n      client.incCount();\n    }\n    return client;\n  }",
          "path": "common/src/java/org/apache/hadoop/ipc/ClientCache.java",
          "extendedDetails": {
            "oldPath": "common/src/java/org/apache/hadoop/ipc/WritableRpcEngine.java",
            "newPath": "common/src/java/org/apache/hadoop/ipc/ClientCache.java",
            "oldMethodName": "getClient",
            "newMethodName": "getClient"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-7474. Refactor ClientCache out of WritableRpcEngine. Contributed by jitendra.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1151978 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/07/11 12:28 PM",
          "commitName": "817df4d5d3687a1fa51b5272b7ace57a51fe6643",
          "commitAuthor": "Jitendra Nath Pandey",
          "commitDateOld": "27/07/11 10:46 PM",
          "commitNameOld": "44320eed1732ea59bd9ec83009eb10e0e6f13023",
          "commitAuthorOld": "Eli Collins",
          "daysBetweenCommits": 0.57,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,16 @@\n-    private synchronized Client getClient(Configuration conf,\n-        SocketFactory factory) {\n-      // Construct \u0026 cache client.  The configuration is only used for timeout,\n-      // and Clients have connection pools.  So we can either (a) lose some\n-      // connection pooling and leak sockets, or (b) use the same timeout for all\n-      // configurations.  Since the IPC is usually intended globally, not\n-      // per-job, we choose (a).\n-      Client client \u003d clients.get(factory);\n-      if (client \u003d\u003d null) {\n-        client \u003d new Client(ObjectWritable.class, conf, factory);\n-        clients.put(factory, client);\n-      } else {\n-        client.incCount();\n-      }\n-      return client;\n-    }\n\\ No newline at end of file\n+  public synchronized Client getClient(Configuration conf,\n+      SocketFactory factory, Class\u003c? extends Writable\u003e valueClass) {\n+    // Construct \u0026 cache client.  The configuration is only used for timeout,\n+    // and Clients have connection pools.  So we can either (a) lose some\n+    // connection pooling and leak sockets, or (b) use the same timeout for all\n+    // configurations.  Since the IPC is usually intended globally, not\n+    // per-job, we choose (a).\n+    Client client \u003d clients.get(factory);\n+    if (client \u003d\u003d null) {\n+      client \u003d new Client(valueClass, conf, factory);\n+      clients.put(factory, client);\n+    } else {\n+      client.incCount();\n+    }\n+    return client;\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized Client getClient(Configuration conf,\n      SocketFactory factory, Class\u003c? extends Writable\u003e valueClass) {\n    // Construct \u0026 cache client.  The configuration is only used for timeout,\n    // and Clients have connection pools.  So we can either (a) lose some\n    // connection pooling and leak sockets, or (b) use the same timeout for all\n    // configurations.  Since the IPC is usually intended globally, not\n    // per-job, we choose (a).\n    Client client \u003d clients.get(factory);\n    if (client \u003d\u003d null) {\n      client \u003d new Client(valueClass, conf, factory);\n      clients.put(factory, client);\n    } else {\n      client.incCount();\n    }\n    return client;\n  }",
          "path": "common/src/java/org/apache/hadoop/ipc/ClientCache.java",
          "extendedDetails": {
            "oldValue": "[private, synchronized]",
            "newValue": "[public, synchronized]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-7474. Refactor ClientCache out of WritableRpcEngine. Contributed by jitendra.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1151978 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/07/11 12:28 PM",
          "commitName": "817df4d5d3687a1fa51b5272b7ace57a51fe6643",
          "commitAuthor": "Jitendra Nath Pandey",
          "commitDateOld": "27/07/11 10:46 PM",
          "commitNameOld": "44320eed1732ea59bd9ec83009eb10e0e6f13023",
          "commitAuthorOld": "Eli Collins",
          "daysBetweenCommits": 0.57,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,16 @@\n-    private synchronized Client getClient(Configuration conf,\n-        SocketFactory factory) {\n-      // Construct \u0026 cache client.  The configuration is only used for timeout,\n-      // and Clients have connection pools.  So we can either (a) lose some\n-      // connection pooling and leak sockets, or (b) use the same timeout for all\n-      // configurations.  Since the IPC is usually intended globally, not\n-      // per-job, we choose (a).\n-      Client client \u003d clients.get(factory);\n-      if (client \u003d\u003d null) {\n-        client \u003d new Client(ObjectWritable.class, conf, factory);\n-        clients.put(factory, client);\n-      } else {\n-        client.incCount();\n-      }\n-      return client;\n-    }\n\\ No newline at end of file\n+  public synchronized Client getClient(Configuration conf,\n+      SocketFactory factory, Class\u003c? extends Writable\u003e valueClass) {\n+    // Construct \u0026 cache client.  The configuration is only used for timeout,\n+    // and Clients have connection pools.  So we can either (a) lose some\n+    // connection pooling and leak sockets, or (b) use the same timeout for all\n+    // configurations.  Since the IPC is usually intended globally, not\n+    // per-job, we choose (a).\n+    Client client \u003d clients.get(factory);\n+    if (client \u003d\u003d null) {\n+      client \u003d new Client(valueClass, conf, factory);\n+      clients.put(factory, client);\n+    } else {\n+      client.incCount();\n+    }\n+    return client;\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized Client getClient(Configuration conf,\n      SocketFactory factory, Class\u003c? extends Writable\u003e valueClass) {\n    // Construct \u0026 cache client.  The configuration is only used for timeout,\n    // and Clients have connection pools.  So we can either (a) lose some\n    // connection pooling and leak sockets, or (b) use the same timeout for all\n    // configurations.  Since the IPC is usually intended globally, not\n    // per-job, we choose (a).\n    Client client \u003d clients.get(factory);\n    if (client \u003d\u003d null) {\n      client \u003d new Client(valueClass, conf, factory);\n      clients.put(factory, client);\n    } else {\n      client.incCount();\n    }\n    return client;\n  }",
          "path": "common/src/java/org/apache/hadoop/ipc/ClientCache.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-7474. Refactor ClientCache out of WritableRpcEngine. Contributed by jitendra.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1151978 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/07/11 12:28 PM",
          "commitName": "817df4d5d3687a1fa51b5272b7ace57a51fe6643",
          "commitAuthor": "Jitendra Nath Pandey",
          "commitDateOld": "27/07/11 10:46 PM",
          "commitNameOld": "44320eed1732ea59bd9ec83009eb10e0e6f13023",
          "commitAuthorOld": "Eli Collins",
          "daysBetweenCommits": 0.57,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,16 @@\n-    private synchronized Client getClient(Configuration conf,\n-        SocketFactory factory) {\n-      // Construct \u0026 cache client.  The configuration is only used for timeout,\n-      // and Clients have connection pools.  So we can either (a) lose some\n-      // connection pooling and leak sockets, or (b) use the same timeout for all\n-      // configurations.  Since the IPC is usually intended globally, not\n-      // per-job, we choose (a).\n-      Client client \u003d clients.get(factory);\n-      if (client \u003d\u003d null) {\n-        client \u003d new Client(ObjectWritable.class, conf, factory);\n-        clients.put(factory, client);\n-      } else {\n-        client.incCount();\n-      }\n-      return client;\n-    }\n\\ No newline at end of file\n+  public synchronized Client getClient(Configuration conf,\n+      SocketFactory factory, Class\u003c? extends Writable\u003e valueClass) {\n+    // Construct \u0026 cache client.  The configuration is only used for timeout,\n+    // and Clients have connection pools.  So we can either (a) lose some\n+    // connection pooling and leak sockets, or (b) use the same timeout for all\n+    // configurations.  Since the IPC is usually intended globally, not\n+    // per-job, we choose (a).\n+    Client client \u003d clients.get(factory);\n+    if (client \u003d\u003d null) {\n+      client \u003d new Client(valueClass, conf, factory);\n+      clients.put(factory, client);\n+    } else {\n+      client.incCount();\n+    }\n+    return client;\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized Client getClient(Configuration conf,\n      SocketFactory factory, Class\u003c? extends Writable\u003e valueClass) {\n    // Construct \u0026 cache client.  The configuration is only used for timeout,\n    // and Clients have connection pools.  So we can either (a) lose some\n    // connection pooling and leak sockets, or (b) use the same timeout for all\n    // configurations.  Since the IPC is usually intended globally, not\n    // per-job, we choose (a).\n    Client client \u003d clients.get(factory);\n    if (client \u003d\u003d null) {\n      client \u003d new Client(valueClass, conf, factory);\n      clients.put(factory, client);\n    } else {\n      client.incCount();\n    }\n    return client;\n  }",
          "path": "common/src/java/org/apache/hadoop/ipc/ClientCache.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration, factory-SocketFactory]",
            "newValue": "[conf-Configuration, factory-SocketFactory, valueClass-Class\u003c? extends Writable\u003e]"
          }
        }
      ]
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private synchronized Client getClient(Configuration conf,\n        SocketFactory factory) {\n      // Construct \u0026 cache client.  The configuration is only used for timeout,\n      // and Clients have connection pools.  So we can either (a) lose some\n      // connection pooling and leak sockets, or (b) use the same timeout for all\n      // configurations.  Since the IPC is usually intended globally, not\n      // per-job, we choose (a).\n      Client client \u003d clients.get(factory);\n      if (client \u003d\u003d null) {\n        client \u003d new Client(ObjectWritable.class, conf, factory);\n        clients.put(factory, client);\n      } else {\n        client.incCount();\n      }\n      return client;\n    }",
      "path": "common/src/java/org/apache/hadoop/ipc/WritableRpcEngine.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/ipc/WritableRpcEngine.java",
        "newPath": "common/src/java/org/apache/hadoop/ipc/WritableRpcEngine.java"
      }
    },
    "6c842ad4b5cbb730bb02c6a586b604ea85665cf9": {
      "type": "Ymovefromfile",
      "commitMessage": "AVRO-6422. Make RPC backend plugable.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@889889 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/12/09 8:37 PM",
      "commitName": "6c842ad4b5cbb730bb02c6a586b604ea85665cf9",
      "commitAuthor": "Doug Cutting",
      "commitDateOld": "11/12/09 5:26 PM",
      "commitNameOld": "843ac12f7a9b4971e2e00e3f8f58dfafe25b5c41",
      "commitAuthorOld": "Doug Cutting",
      "daysBetweenCommits": 0.13,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private synchronized Client getClient(Configuration conf,\n        SocketFactory factory) {\n      // Construct \u0026 cache client.  The configuration is only used for timeout,\n      // and Clients have connection pools.  So we can either (a) lose some\n      // connection pooling and leak sockets, or (b) use the same timeout for all\n      // configurations.  Since the IPC is usually intended globally, not\n      // per-job, we choose (a).\n      Client client \u003d clients.get(factory);\n      if (client \u003d\u003d null) {\n        client \u003d new Client(ObjectWritable.class, conf, factory);\n        clients.put(factory, client);\n      } else {\n        client.incCount();\n      }\n      return client;\n    }",
      "path": "src/java/org/apache/hadoop/ipc/WritableRpcEngine.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/ipc/RPC.java",
        "newPath": "src/java/org/apache/hadoop/ipc/WritableRpcEngine.java",
        "oldMethodName": "getClient",
        "newMethodName": "getClient"
      }
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,16 @@\n+    private synchronized Client getClient(Configuration conf,\n+        SocketFactory factory) {\n+      // Construct \u0026 cache client.  The configuration is only used for timeout,\n+      // and Clients have connection pools.  So we can either (a) lose some\n+      // connection pooling and leak sockets, or (b) use the same timeout for all\n+      // configurations.  Since the IPC is usually intended globally, not\n+      // per-job, we choose (a).\n+      Client client \u003d clients.get(factory);\n+      if (client \u003d\u003d null) {\n+        client \u003d new Client(ObjectWritable.class, conf, factory);\n+        clients.put(factory, client);\n+      } else {\n+        client.incCount();\n+      }\n+      return client;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private synchronized Client getClient(Configuration conf,\n        SocketFactory factory) {\n      // Construct \u0026 cache client.  The configuration is only used for timeout,\n      // and Clients have connection pools.  So we can either (a) lose some\n      // connection pooling and leak sockets, or (b) use the same timeout for all\n      // configurations.  Since the IPC is usually intended globally, not\n      // per-job, we choose (a).\n      Client client \u003d clients.get(factory);\n      if (client \u003d\u003d null) {\n        client \u003d new Client(ObjectWritable.class, conf, factory);\n        clients.put(factory, client);\n      } else {\n        client.incCount();\n      }\n      return client;\n    }",
      "path": "src/java/org/apache/hadoop/ipc/RPC.java"
    }
  }
}