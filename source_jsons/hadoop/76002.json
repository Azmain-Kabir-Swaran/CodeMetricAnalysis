{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BuiltInGzipDecompressor.java",
  "functionName": "executeHeaderState",
  "functionId": "executeHeaderState",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/zlib/BuiltInGzipDecompressor.java",
  "functionStartLine": 244,
  "functionEndLine": 345,
  "numCommitsSeen": 10,
  "timeTaken": 982,
  "changeHistory": [
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "2a248dfc32e5061c1f80295f448ca525ade764c6"
  ],
  "changeHistoryShort": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "2a248dfc32e5061c1f80295f448ca525ade764c6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void executeHeaderState() throws IOException {\n\n    // this can happen because DecompressorStream\u0027s decompress() is written\n    // to call decompress() first, setInput() second:\n    if (userBufLen \u003c\u003d 0) {\n      return;\n    }\n\n    // \"basic\"/required header:  somewhere in first 10 bytes\n    if (state \u003d\u003d GzipStateLabel.HEADER_BASIC) {\n      int n \u003d Math.min(userBufLen, 10-localBufOff);  // (or 10-headerBytesRead)\n      checkAndCopyBytesToLocal(n);  // modifies userBufLen, etc.\n      if (localBufOff \u003e\u003d 10) {      // should be strictly \u003d\u003d\n        processBasicHeader();       // sig, compression method, flagbits\n        localBufOff \u003d 0;            // no further need for basic header\n        state \u003d GzipStateLabel.HEADER_EXTRA_FIELD;\n      }\n    }\n\n    if (userBufLen \u003c\u003d 0) {\n      return;\n    }\n\n    // optional header stuff (extra field, filename, comment, header CRC)\n\n    if (state \u003d\u003d GzipStateLabel.HEADER_EXTRA_FIELD) {\n      if (hasExtraField) {\n        // 2 substates:  waiting for 2 bytes \u003d\u003e get numExtraFieldBytesRemaining,\n        // or already have 2 bytes \u0026 waiting to finish skipping specified length\n        if (numExtraFieldBytesRemaining \u003c 0) {\n          int n \u003d Math.min(userBufLen, 2-localBufOff);\n          checkAndCopyBytesToLocal(n);\n          if (localBufOff \u003e\u003d 2) {\n            numExtraFieldBytesRemaining \u003d readUShortLE(localBuf, 0);\n            localBufOff \u003d 0;\n          }\n        }\n        if (numExtraFieldBytesRemaining \u003e 0 \u0026\u0026 userBufLen \u003e 0) {\n          int n \u003d Math.min(userBufLen, numExtraFieldBytesRemaining);\n          checkAndSkipBytes(n);     // modifies userBufLen, etc.\n          numExtraFieldBytesRemaining -\u003d n;\n        }\n        if (numExtraFieldBytesRemaining \u003d\u003d 0) {\n          state \u003d GzipStateLabel.HEADER_FILENAME;\n        }\n      } else {\n        state \u003d GzipStateLabel.HEADER_FILENAME;\n      }\n    }\n\n    if (userBufLen \u003c\u003d 0) {\n      return;\n    }\n\n    if (state \u003d\u003d GzipStateLabel.HEADER_FILENAME) {\n      if (hasFilename) {\n        boolean doneWithFilename \u003d checkAndSkipBytesUntilNull();\n        if (!doneWithFilename) {\n          return;  // exit early:  used up entire buffer without hitting NULL\n        }\n      }\n      state \u003d GzipStateLabel.HEADER_COMMENT;\n    }\n\n    if (userBufLen \u003c\u003d 0) {\n      return;\n    }\n\n    if (state \u003d\u003d GzipStateLabel.HEADER_COMMENT) {\n      if (hasComment) {\n        boolean doneWithComment \u003d checkAndSkipBytesUntilNull();\n        if (!doneWithComment) {\n          return;  // exit early:  used up entire buffer\n        }\n      }\n      state \u003d GzipStateLabel.HEADER_CRC;\n    }\n\n    if (userBufLen \u003c\u003d 0) {\n      return;\n    }\n\n    if (state \u003d\u003d GzipStateLabel.HEADER_CRC) {\n      if (hasHeaderCRC) {\n        assert (localBufOff \u003c 2);\n        int n \u003d Math.min(userBufLen, 2-localBufOff);\n        copyBytesToLocal(n);\n        if (localBufOff \u003e\u003d 2) {\n          long headerCRC \u003d readUShortLE(localBuf, 0);\n          if (headerCRC !\u003d (crc.getValue() \u0026 0xffff)) {\n            throw new IOException(\"gzip header CRC failure\");\n          }\n          localBufOff \u003d 0;\n          crc.reset();\n          state \u003d GzipStateLabel.DEFLATE_STREAM;\n        }\n      } else {\n        crc.reset();   // will reuse for CRC-32 of uncompressed data\n        state \u003d GzipStateLabel.DEFLATE_STREAM;  // switching to Inflater now\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/zlib/BuiltInGzipDecompressor.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/io/compress/zlib/BuiltInGzipDecompressor.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/zlib/BuiltInGzipDecompressor.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void executeHeaderState() throws IOException {\n\n    // this can happen because DecompressorStream\u0027s decompress() is written\n    // to call decompress() first, setInput() second:\n    if (userBufLen \u003c\u003d 0) {\n      return;\n    }\n\n    // \"basic\"/required header:  somewhere in first 10 bytes\n    if (state \u003d\u003d GzipStateLabel.HEADER_BASIC) {\n      int n \u003d Math.min(userBufLen, 10-localBufOff);  // (or 10-headerBytesRead)\n      checkAndCopyBytesToLocal(n);  // modifies userBufLen, etc.\n      if (localBufOff \u003e\u003d 10) {      // should be strictly \u003d\u003d\n        processBasicHeader();       // sig, compression method, flagbits\n        localBufOff \u003d 0;            // no further need for basic header\n        state \u003d GzipStateLabel.HEADER_EXTRA_FIELD;\n      }\n    }\n\n    if (userBufLen \u003c\u003d 0) {\n      return;\n    }\n\n    // optional header stuff (extra field, filename, comment, header CRC)\n\n    if (state \u003d\u003d GzipStateLabel.HEADER_EXTRA_FIELD) {\n      if (hasExtraField) {\n        // 2 substates:  waiting for 2 bytes \u003d\u003e get numExtraFieldBytesRemaining,\n        // or already have 2 bytes \u0026 waiting to finish skipping specified length\n        if (numExtraFieldBytesRemaining \u003c 0) {\n          int n \u003d Math.min(userBufLen, 2-localBufOff);\n          checkAndCopyBytesToLocal(n);\n          if (localBufOff \u003e\u003d 2) {\n            numExtraFieldBytesRemaining \u003d readUShortLE(localBuf, 0);\n            localBufOff \u003d 0;\n          }\n        }\n        if (numExtraFieldBytesRemaining \u003e 0 \u0026\u0026 userBufLen \u003e 0) {\n          int n \u003d Math.min(userBufLen, numExtraFieldBytesRemaining);\n          checkAndSkipBytes(n);     // modifies userBufLen, etc.\n          numExtraFieldBytesRemaining -\u003d n;\n        }\n        if (numExtraFieldBytesRemaining \u003d\u003d 0) {\n          state \u003d GzipStateLabel.HEADER_FILENAME;\n        }\n      } else {\n        state \u003d GzipStateLabel.HEADER_FILENAME;\n      }\n    }\n\n    if (userBufLen \u003c\u003d 0) {\n      return;\n    }\n\n    if (state \u003d\u003d GzipStateLabel.HEADER_FILENAME) {\n      if (hasFilename) {\n        boolean doneWithFilename \u003d checkAndSkipBytesUntilNull();\n        if (!doneWithFilename) {\n          return;  // exit early:  used up entire buffer without hitting NULL\n        }\n      }\n      state \u003d GzipStateLabel.HEADER_COMMENT;\n    }\n\n    if (userBufLen \u003c\u003d 0) {\n      return;\n    }\n\n    if (state \u003d\u003d GzipStateLabel.HEADER_COMMENT) {\n      if (hasComment) {\n        boolean doneWithComment \u003d checkAndSkipBytesUntilNull();\n        if (!doneWithComment) {\n          return;  // exit early:  used up entire buffer\n        }\n      }\n      state \u003d GzipStateLabel.HEADER_CRC;\n    }\n\n    if (userBufLen \u003c\u003d 0) {\n      return;\n    }\n\n    if (state \u003d\u003d GzipStateLabel.HEADER_CRC) {\n      if (hasHeaderCRC) {\n        assert (localBufOff \u003c 2);\n        int n \u003d Math.min(userBufLen, 2-localBufOff);\n        copyBytesToLocal(n);\n        if (localBufOff \u003e\u003d 2) {\n          long headerCRC \u003d readUShortLE(localBuf, 0);\n          if (headerCRC !\u003d (crc.getValue() \u0026 0xffff)) {\n            throw new IOException(\"gzip header CRC failure\");\n          }\n          localBufOff \u003d 0;\n          crc.reset();\n          state \u003d GzipStateLabel.DEFLATE_STREAM;\n        }\n      } else {\n        crc.reset();   // will reuse for CRC-32 of uncompressed data\n        state \u003d GzipStateLabel.DEFLATE_STREAM;  // switching to Inflater now\n      }\n    }\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/io/compress/zlib/BuiltInGzipDecompressor.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/io/compress/zlib/BuiltInGzipDecompressor.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/io/compress/zlib/BuiltInGzipDecompressor.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void executeHeaderState() throws IOException {\n\n    // this can happen because DecompressorStream\u0027s decompress() is written\n    // to call decompress() first, setInput() second:\n    if (userBufLen \u003c\u003d 0) {\n      return;\n    }\n\n    // \"basic\"/required header:  somewhere in first 10 bytes\n    if (state \u003d\u003d GzipStateLabel.HEADER_BASIC) {\n      int n \u003d Math.min(userBufLen, 10-localBufOff);  // (or 10-headerBytesRead)\n      checkAndCopyBytesToLocal(n);  // modifies userBufLen, etc.\n      if (localBufOff \u003e\u003d 10) {      // should be strictly \u003d\u003d\n        processBasicHeader();       // sig, compression method, flagbits\n        localBufOff \u003d 0;            // no further need for basic header\n        state \u003d GzipStateLabel.HEADER_EXTRA_FIELD;\n      }\n    }\n\n    if (userBufLen \u003c\u003d 0) {\n      return;\n    }\n\n    // optional header stuff (extra field, filename, comment, header CRC)\n\n    if (state \u003d\u003d GzipStateLabel.HEADER_EXTRA_FIELD) {\n      if (hasExtraField) {\n        // 2 substates:  waiting for 2 bytes \u003d\u003e get numExtraFieldBytesRemaining,\n        // or already have 2 bytes \u0026 waiting to finish skipping specified length\n        if (numExtraFieldBytesRemaining \u003c 0) {\n          int n \u003d Math.min(userBufLen, 2-localBufOff);\n          checkAndCopyBytesToLocal(n);\n          if (localBufOff \u003e\u003d 2) {\n            numExtraFieldBytesRemaining \u003d readUShortLE(localBuf, 0);\n            localBufOff \u003d 0;\n          }\n        }\n        if (numExtraFieldBytesRemaining \u003e 0 \u0026\u0026 userBufLen \u003e 0) {\n          int n \u003d Math.min(userBufLen, numExtraFieldBytesRemaining);\n          checkAndSkipBytes(n);     // modifies userBufLen, etc.\n          numExtraFieldBytesRemaining -\u003d n;\n        }\n        if (numExtraFieldBytesRemaining \u003d\u003d 0) {\n          state \u003d GzipStateLabel.HEADER_FILENAME;\n        }\n      } else {\n        state \u003d GzipStateLabel.HEADER_FILENAME;\n      }\n    }\n\n    if (userBufLen \u003c\u003d 0) {\n      return;\n    }\n\n    if (state \u003d\u003d GzipStateLabel.HEADER_FILENAME) {\n      if (hasFilename) {\n        boolean doneWithFilename \u003d checkAndSkipBytesUntilNull();\n        if (!doneWithFilename) {\n          return;  // exit early:  used up entire buffer without hitting NULL\n        }\n      }\n      state \u003d GzipStateLabel.HEADER_COMMENT;\n    }\n\n    if (userBufLen \u003c\u003d 0) {\n      return;\n    }\n\n    if (state \u003d\u003d GzipStateLabel.HEADER_COMMENT) {\n      if (hasComment) {\n        boolean doneWithComment \u003d checkAndSkipBytesUntilNull();\n        if (!doneWithComment) {\n          return;  // exit early:  used up entire buffer\n        }\n      }\n      state \u003d GzipStateLabel.HEADER_CRC;\n    }\n\n    if (userBufLen \u003c\u003d 0) {\n      return;\n    }\n\n    if (state \u003d\u003d GzipStateLabel.HEADER_CRC) {\n      if (hasHeaderCRC) {\n        assert (localBufOff \u003c 2);\n        int n \u003d Math.min(userBufLen, 2-localBufOff);\n        copyBytesToLocal(n);\n        if (localBufOff \u003e\u003d 2) {\n          long headerCRC \u003d readUShortLE(localBuf, 0);\n          if (headerCRC !\u003d (crc.getValue() \u0026 0xffff)) {\n            throw new IOException(\"gzip header CRC failure\");\n          }\n          localBufOff \u003d 0;\n          crc.reset();\n          state \u003d GzipStateLabel.DEFLATE_STREAM;\n        }\n      } else {\n        crc.reset();   // will reuse for CRC-32 of uncompressed data\n        state \u003d GzipStateLabel.DEFLATE_STREAM;  // switching to Inflater now\n      }\n    }\n  }",
      "path": "common/src/java/org/apache/hadoop/io/compress/zlib/BuiltInGzipDecompressor.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/io/compress/zlib/BuiltInGzipDecompressor.java",
        "newPath": "common/src/java/org/apache/hadoop/io/compress/zlib/BuiltInGzipDecompressor.java"
      }
    },
    "2a248dfc32e5061c1f80295f448ca525ade764c6": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-6835. Add support for concatenated gzip input. Contributed by Greg Roelofs\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@961532 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/07/10 4:22 PM",
      "commitName": "2a248dfc32e5061c1f80295f448ca525ade764c6",
      "commitAuthor": "Christopher Douglas",
      "diff": "@@ -0,0 +1,102 @@\n+  private void executeHeaderState() throws IOException {\n+\n+    // this can happen because DecompressorStream\u0027s decompress() is written\n+    // to call decompress() first, setInput() second:\n+    if (userBufLen \u003c\u003d 0) {\n+      return;\n+    }\n+\n+    // \"basic\"/required header:  somewhere in first 10 bytes\n+    if (state \u003d\u003d GzipStateLabel.HEADER_BASIC) {\n+      int n \u003d Math.min(userBufLen, 10-localBufOff);  // (or 10-headerBytesRead)\n+      checkAndCopyBytesToLocal(n);  // modifies userBufLen, etc.\n+      if (localBufOff \u003e\u003d 10) {      // should be strictly \u003d\u003d\n+        processBasicHeader();       // sig, compression method, flagbits\n+        localBufOff \u003d 0;            // no further need for basic header\n+        state \u003d GzipStateLabel.HEADER_EXTRA_FIELD;\n+      }\n+    }\n+\n+    if (userBufLen \u003c\u003d 0) {\n+      return;\n+    }\n+\n+    // optional header stuff (extra field, filename, comment, header CRC)\n+\n+    if (state \u003d\u003d GzipStateLabel.HEADER_EXTRA_FIELD) {\n+      if (hasExtraField) {\n+        // 2 substates:  waiting for 2 bytes \u003d\u003e get numExtraFieldBytesRemaining,\n+        // or already have 2 bytes \u0026 waiting to finish skipping specified length\n+        if (numExtraFieldBytesRemaining \u003c 0) {\n+          int n \u003d Math.min(userBufLen, 2-localBufOff);\n+          checkAndCopyBytesToLocal(n);\n+          if (localBufOff \u003e\u003d 2) {\n+            numExtraFieldBytesRemaining \u003d readUShortLE(localBuf, 0);\n+            localBufOff \u003d 0;\n+          }\n+        }\n+        if (numExtraFieldBytesRemaining \u003e 0 \u0026\u0026 userBufLen \u003e 0) {\n+          int n \u003d Math.min(userBufLen, numExtraFieldBytesRemaining);\n+          checkAndSkipBytes(n);     // modifies userBufLen, etc.\n+          numExtraFieldBytesRemaining -\u003d n;\n+        }\n+        if (numExtraFieldBytesRemaining \u003d\u003d 0) {\n+          state \u003d GzipStateLabel.HEADER_FILENAME;\n+        }\n+      } else {\n+        state \u003d GzipStateLabel.HEADER_FILENAME;\n+      }\n+    }\n+\n+    if (userBufLen \u003c\u003d 0) {\n+      return;\n+    }\n+\n+    if (state \u003d\u003d GzipStateLabel.HEADER_FILENAME) {\n+      if (hasFilename) {\n+        boolean doneWithFilename \u003d checkAndSkipBytesUntilNull();\n+        if (!doneWithFilename) {\n+          return;  // exit early:  used up entire buffer without hitting NULL\n+        }\n+      }\n+      state \u003d GzipStateLabel.HEADER_COMMENT;\n+    }\n+\n+    if (userBufLen \u003c\u003d 0) {\n+      return;\n+    }\n+\n+    if (state \u003d\u003d GzipStateLabel.HEADER_COMMENT) {\n+      if (hasComment) {\n+        boolean doneWithComment \u003d checkAndSkipBytesUntilNull();\n+        if (!doneWithComment) {\n+          return;  // exit early:  used up entire buffer\n+        }\n+      }\n+      state \u003d GzipStateLabel.HEADER_CRC;\n+    }\n+\n+    if (userBufLen \u003c\u003d 0) {\n+      return;\n+    }\n+\n+    if (state \u003d\u003d GzipStateLabel.HEADER_CRC) {\n+      if (hasHeaderCRC) {\n+        assert (localBufOff \u003c 2);\n+        int n \u003d Math.min(userBufLen, 2-localBufOff);\n+        copyBytesToLocal(n);\n+        if (localBufOff \u003e\u003d 2) {\n+          long headerCRC \u003d readUShortLE(localBuf, 0);\n+          if (headerCRC !\u003d (crc.getValue() \u0026 0xffff)) {\n+            throw new IOException(\"gzip header CRC failure\");\n+          }\n+          localBufOff \u003d 0;\n+          crc.reset();\n+          state \u003d GzipStateLabel.DEFLATE_STREAM;\n+        }\n+      } else {\n+        crc.reset();   // will reuse for CRC-32 of uncompressed data\n+        state \u003d GzipStateLabel.DEFLATE_STREAM;  // switching to Inflater now\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void executeHeaderState() throws IOException {\n\n    // this can happen because DecompressorStream\u0027s decompress() is written\n    // to call decompress() first, setInput() second:\n    if (userBufLen \u003c\u003d 0) {\n      return;\n    }\n\n    // \"basic\"/required header:  somewhere in first 10 bytes\n    if (state \u003d\u003d GzipStateLabel.HEADER_BASIC) {\n      int n \u003d Math.min(userBufLen, 10-localBufOff);  // (or 10-headerBytesRead)\n      checkAndCopyBytesToLocal(n);  // modifies userBufLen, etc.\n      if (localBufOff \u003e\u003d 10) {      // should be strictly \u003d\u003d\n        processBasicHeader();       // sig, compression method, flagbits\n        localBufOff \u003d 0;            // no further need for basic header\n        state \u003d GzipStateLabel.HEADER_EXTRA_FIELD;\n      }\n    }\n\n    if (userBufLen \u003c\u003d 0) {\n      return;\n    }\n\n    // optional header stuff (extra field, filename, comment, header CRC)\n\n    if (state \u003d\u003d GzipStateLabel.HEADER_EXTRA_FIELD) {\n      if (hasExtraField) {\n        // 2 substates:  waiting for 2 bytes \u003d\u003e get numExtraFieldBytesRemaining,\n        // or already have 2 bytes \u0026 waiting to finish skipping specified length\n        if (numExtraFieldBytesRemaining \u003c 0) {\n          int n \u003d Math.min(userBufLen, 2-localBufOff);\n          checkAndCopyBytesToLocal(n);\n          if (localBufOff \u003e\u003d 2) {\n            numExtraFieldBytesRemaining \u003d readUShortLE(localBuf, 0);\n            localBufOff \u003d 0;\n          }\n        }\n        if (numExtraFieldBytesRemaining \u003e 0 \u0026\u0026 userBufLen \u003e 0) {\n          int n \u003d Math.min(userBufLen, numExtraFieldBytesRemaining);\n          checkAndSkipBytes(n);     // modifies userBufLen, etc.\n          numExtraFieldBytesRemaining -\u003d n;\n        }\n        if (numExtraFieldBytesRemaining \u003d\u003d 0) {\n          state \u003d GzipStateLabel.HEADER_FILENAME;\n        }\n      } else {\n        state \u003d GzipStateLabel.HEADER_FILENAME;\n      }\n    }\n\n    if (userBufLen \u003c\u003d 0) {\n      return;\n    }\n\n    if (state \u003d\u003d GzipStateLabel.HEADER_FILENAME) {\n      if (hasFilename) {\n        boolean doneWithFilename \u003d checkAndSkipBytesUntilNull();\n        if (!doneWithFilename) {\n          return;  // exit early:  used up entire buffer without hitting NULL\n        }\n      }\n      state \u003d GzipStateLabel.HEADER_COMMENT;\n    }\n\n    if (userBufLen \u003c\u003d 0) {\n      return;\n    }\n\n    if (state \u003d\u003d GzipStateLabel.HEADER_COMMENT) {\n      if (hasComment) {\n        boolean doneWithComment \u003d checkAndSkipBytesUntilNull();\n        if (!doneWithComment) {\n          return;  // exit early:  used up entire buffer\n        }\n      }\n      state \u003d GzipStateLabel.HEADER_CRC;\n    }\n\n    if (userBufLen \u003c\u003d 0) {\n      return;\n    }\n\n    if (state \u003d\u003d GzipStateLabel.HEADER_CRC) {\n      if (hasHeaderCRC) {\n        assert (localBufOff \u003c 2);\n        int n \u003d Math.min(userBufLen, 2-localBufOff);\n        copyBytesToLocal(n);\n        if (localBufOff \u003e\u003d 2) {\n          long headerCRC \u003d readUShortLE(localBuf, 0);\n          if (headerCRC !\u003d (crc.getValue() \u0026 0xffff)) {\n            throw new IOException(\"gzip header CRC failure\");\n          }\n          localBufOff \u003d 0;\n          crc.reset();\n          state \u003d GzipStateLabel.DEFLATE_STREAM;\n        }\n      } else {\n        crc.reset();   // will reuse for CRC-32 of uncompressed data\n        state \u003d GzipStateLabel.DEFLATE_STREAM;  // switching to Inflater now\n      }\n    }\n  }",
      "path": "src/java/org/apache/hadoop/io/compress/zlib/BuiltInGzipDecompressor.java"
    }
  }
}