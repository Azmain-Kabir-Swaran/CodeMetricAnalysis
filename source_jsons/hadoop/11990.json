{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FsDatasetImpl.java",
  "functionName": "recoverRbw",
  "functionId": "recoverRbw___b-ExtendedBlock__newGS-long__minBytesRcvd-long__maxBytesRcvd-long",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
  "functionStartLine": 1501,
  "functionEndLine": 1535,
  "numCommitsSeen": 230,
  "timeTaken": 12764,
  "changeHistory": [
    "d3b595157256e198c4340d555e14ad6144f2eaa1",
    "d7c136b9ed6d99e1b03f5b89723b3a20df359ba8",
    "86c9862bec0248d671e657aa56094a2919b8ac14",
    "c25817159af17753b398956cfe6ff14984801b01",
    "8c0638471f8f1dd47667b2d6727d4d2d54e4b48c",
    "f6b1a818124cc42688c4c5acaf537d96cf00e43b",
    "b7f4a3156c0f5c600816c469637237ba6c9b330c",
    "7723b139d55fc2c3954939559cb4914046a0f81c",
    "98a692fd6361365db4afb9523a5d83ee32774112",
    "cea7bbc630deede93dbe6a1bbda56ad49de4f3de",
    "bc13dfb1426944ce45293cb8f444239a7406762c",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "d3b595157256e198c4340d555e14ad6144f2eaa1": "Ybodychange",
    "d7c136b9ed6d99e1b03f5b89723b3a20df359ba8": "Ybodychange",
    "86c9862bec0248d671e657aa56094a2919b8ac14": "Ybodychange",
    "c25817159af17753b398956cfe6ff14984801b01": "Ybodychange",
    "8c0638471f8f1dd47667b2d6727d4d2d54e4b48c": "Ybodychange",
    "f6b1a818124cc42688c4c5acaf537d96cf00e43b": "Ymultichange(Ymodifierchange,Ybodychange)",
    "b7f4a3156c0f5c600816c469637237ba6c9b330c": "Ymultichange(Yreturntypechange,Ybodychange)",
    "7723b139d55fc2c3954939559cb4914046a0f81c": "Ybodychange",
    "98a692fd6361365db4afb9523a5d83ee32774112": "Ybodychange",
    "cea7bbc630deede93dbe6a1bbda56ad49de4f3de": "Ybodychange",
    "bc13dfb1426944ce45293cb8f444239a7406762c": "Ymultichange(Ymovefromfile,Yreturntypechange,Ybodychange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d3b595157256e198c4340d555e14ad6144f2eaa1": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15242. Add metrics for operations hold lock times of FsDatasetImpl. Contributed by Xiaoqiao He.\n\nSigned-off-by: Wei-Chiu Chuang \u003cweichiu@apache.org\u003e\nReviewed-by: Inigo Goiri \u003cinigoiri@apache.org\u003e\n",
      "commitDate": "01/04/20 4:36 PM",
      "commitName": "d3b595157256e198c4340d555e14ad6144f2eaa1",
      "commitAuthor": "He Xiaoqiao",
      "commitDateOld": "11/02/20 8:00 AM",
      "commitNameOld": "d7c136b9ed6d99e1b03f5b89723b3a20df359ba8",
      "commitAuthorOld": "Stephen O\u0027Donnell",
      "daysBetweenCommits": 50.32,
      "commitsBetweenForRepo": 174,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,35 @@\n   public ReplicaHandler recoverRbw(\n       ExtendedBlock b, long newGS, long minBytesRcvd, long maxBytesRcvd)\n       throws IOException {\n     LOG.info(\"Recover RBW replica \" + b);\n-\n-    while (true) {\n-      try {\n-        try (AutoCloseableLock lock \u003d datasetWriteLock.acquire()) {\n-          ReplicaInfo replicaInfo \u003d\n-              getReplicaInfo(b.getBlockPoolId(), b.getBlockId());\n-          // check the replica\u0027s state\n-          if (replicaInfo.getState() !\u003d ReplicaState.RBW) {\n-            throw new ReplicaNotFoundException(\n-                ReplicaNotFoundException.NON_RBW_REPLICA + replicaInfo);\n+    long startTimeMs \u003d Time.monotonicNow();\n+    try {\n+      while (true) {\n+        try {\n+          try (AutoCloseableLock lock \u003d datasetWriteLock.acquire()) {\n+            ReplicaInfo replicaInfo \u003d\n+                getReplicaInfo(b.getBlockPoolId(), b.getBlockId());\n+            // check the replica\u0027s state\n+            if (replicaInfo.getState() !\u003d ReplicaState.RBW) {\n+              throw new ReplicaNotFoundException(\n+                  ReplicaNotFoundException.NON_RBW_REPLICA + replicaInfo);\n+            }\n+            ReplicaInPipeline rbw \u003d (ReplicaInPipeline) replicaInfo;\n+            if (!rbw.attemptToSetWriter(null, Thread.currentThread())) {\n+              throw new MustStopExistingWriter(rbw);\n+            }\n+            LOG.info(\"At \" + datanode.getDisplayName() + \", Recovering \" + rbw);\n+            return recoverRbwImpl(rbw, b, newGS, minBytesRcvd, maxBytesRcvd);\n           }\n-          ReplicaInPipeline rbw \u003d (ReplicaInPipeline)replicaInfo;\n-          if (!rbw.attemptToSetWriter(null, Thread.currentThread())) {\n-            throw new MustStopExistingWriter(rbw);\n-          }\n-          LOG.info(\"At \" + datanode.getDisplayName() + \", Recovering \" + rbw);\n-          return recoverRbwImpl(rbw, b, newGS, minBytesRcvd, maxBytesRcvd);\n+        } catch (MustStopExistingWriter e) {\n+          e.getReplicaInPipeline().stopWriter(\n+              datanode.getDnConf().getXceiverStopTimeout());\n         }\n-      } catch (MustStopExistingWriter e) {\n-        e.getReplicaInPipeline().stopWriter(\n-            datanode.getDnConf().getXceiverStopTimeout());\n+      }\n+    } finally {\n+      if (dataNodeMetrics !\u003d null) {\n+        long recoverRbwMs \u003d Time.monotonicNow() - startTimeMs;\n+        dataNodeMetrics.addRecoverRbwOp(recoverRbwMs);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ReplicaHandler recoverRbw(\n      ExtendedBlock b, long newGS, long minBytesRcvd, long maxBytesRcvd)\n      throws IOException {\n    LOG.info(\"Recover RBW replica \" + b);\n    long startTimeMs \u003d Time.monotonicNow();\n    try {\n      while (true) {\n        try {\n          try (AutoCloseableLock lock \u003d datasetWriteLock.acquire()) {\n            ReplicaInfo replicaInfo \u003d\n                getReplicaInfo(b.getBlockPoolId(), b.getBlockId());\n            // check the replica\u0027s state\n            if (replicaInfo.getState() !\u003d ReplicaState.RBW) {\n              throw new ReplicaNotFoundException(\n                  ReplicaNotFoundException.NON_RBW_REPLICA + replicaInfo);\n            }\n            ReplicaInPipeline rbw \u003d (ReplicaInPipeline) replicaInfo;\n            if (!rbw.attemptToSetWriter(null, Thread.currentThread())) {\n              throw new MustStopExistingWriter(rbw);\n            }\n            LOG.info(\"At \" + datanode.getDisplayName() + \", Recovering \" + rbw);\n            return recoverRbwImpl(rbw, b, newGS, minBytesRcvd, maxBytesRcvd);\n          }\n        } catch (MustStopExistingWriter e) {\n          e.getReplicaInPipeline().stopWriter(\n              datanode.getDnConf().getXceiverStopTimeout());\n        }\n      }\n    } finally {\n      if (dataNodeMetrics !\u003d null) {\n        long recoverRbwMs \u003d Time.monotonicNow() - startTimeMs;\n        dataNodeMetrics.addRecoverRbwOp(recoverRbwMs);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
      "extendedDetails": {}
    },
    "d7c136b9ed6d99e1b03f5b89723b3a20df359ba8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15150. Introduce read write lock to Datanode. Contributed Stephen O\u0027Donnell.\n\nSigned-off-by: Wei-Chiu Chuang \u003cweichiu@apache.org\u003e\n",
      "commitDate": "11/02/20 8:00 AM",
      "commitName": "d7c136b9ed6d99e1b03f5b89723b3a20df359ba8",
      "commitAuthor": "Stephen O\u0027Donnell",
      "commitDateOld": "28/01/20 10:10 AM",
      "commitNameOld": "1839c467f60cbb8592d446694ec3d7710cda5142",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 13.91,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   public ReplicaHandler recoverRbw(\n       ExtendedBlock b, long newGS, long minBytesRcvd, long maxBytesRcvd)\n       throws IOException {\n     LOG.info(\"Recover RBW replica \" + b);\n \n     while (true) {\n       try {\n-        try (AutoCloseableLock lock \u003d datasetLock.acquire()) {\n+        try (AutoCloseableLock lock \u003d datasetWriteLock.acquire()) {\n           ReplicaInfo replicaInfo \u003d\n               getReplicaInfo(b.getBlockPoolId(), b.getBlockId());\n           // check the replica\u0027s state\n           if (replicaInfo.getState() !\u003d ReplicaState.RBW) {\n             throw new ReplicaNotFoundException(\n                 ReplicaNotFoundException.NON_RBW_REPLICA + replicaInfo);\n           }\n           ReplicaInPipeline rbw \u003d (ReplicaInPipeline)replicaInfo;\n           if (!rbw.attemptToSetWriter(null, Thread.currentThread())) {\n             throw new MustStopExistingWriter(rbw);\n           }\n           LOG.info(\"At \" + datanode.getDisplayName() + \", Recovering \" + rbw);\n           return recoverRbwImpl(rbw, b, newGS, minBytesRcvd, maxBytesRcvd);\n         }\n       } catch (MustStopExistingWriter e) {\n         e.getReplicaInPipeline().stopWriter(\n             datanode.getDnConf().getXceiverStopTimeout());\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ReplicaHandler recoverRbw(\n      ExtendedBlock b, long newGS, long minBytesRcvd, long maxBytesRcvd)\n      throws IOException {\n    LOG.info(\"Recover RBW replica \" + b);\n\n    while (true) {\n      try {\n        try (AutoCloseableLock lock \u003d datasetWriteLock.acquire()) {\n          ReplicaInfo replicaInfo \u003d\n              getReplicaInfo(b.getBlockPoolId(), b.getBlockId());\n          // check the replica\u0027s state\n          if (replicaInfo.getState() !\u003d ReplicaState.RBW) {\n            throw new ReplicaNotFoundException(\n                ReplicaNotFoundException.NON_RBW_REPLICA + replicaInfo);\n          }\n          ReplicaInPipeline rbw \u003d (ReplicaInPipeline)replicaInfo;\n          if (!rbw.attemptToSetWriter(null, Thread.currentThread())) {\n            throw new MustStopExistingWriter(rbw);\n          }\n          LOG.info(\"At \" + datanode.getDisplayName() + \", Recovering \" + rbw);\n          return recoverRbwImpl(rbw, b, newGS, minBytesRcvd, maxBytesRcvd);\n        }\n      } catch (MustStopExistingWriter e) {\n        e.getReplicaInPipeline().stopWriter(\n            datanode.getDnConf().getXceiverStopTimeout());\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
      "extendedDetails": {}
    },
    "86c9862bec0248d671e657aa56094a2919b8ac14": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10636. Modify ReplicaInfo to remove the assumption that replica metadata and data are stored in java.io.File. (Virajith Jalaparti via lei)\n",
      "commitDate": "13/09/16 12:54 PM",
      "commitName": "86c9862bec0248d671e657aa56094a2919b8ac14",
      "commitAuthor": "Lei Xu",
      "commitDateOld": "10/09/16 6:22 PM",
      "commitNameOld": "a99bf26a0899bcc4307c3a242c8414eaef555aa7",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 2.77,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,28 @@\n   public ReplicaHandler recoverRbw(\n       ExtendedBlock b, long newGS, long minBytesRcvd, long maxBytesRcvd)\n       throws IOException {\n     LOG.info(\"Recover RBW replica \" + b);\n \n     while (true) {\n       try {\n         try (AutoCloseableLock lock \u003d datasetLock.acquire()) {\n-          ReplicaInfo replicaInfo \u003d getReplicaInfo(b.getBlockPoolId(), b.getBlockId());\n-          \n+          ReplicaInfo replicaInfo \u003d\n+              getReplicaInfo(b.getBlockPoolId(), b.getBlockId());\n           // check the replica\u0027s state\n           if (replicaInfo.getState() !\u003d ReplicaState.RBW) {\n             throw new ReplicaNotFoundException(\n                 ReplicaNotFoundException.NON_RBW_REPLICA + replicaInfo);\n           }\n-          ReplicaBeingWritten rbw \u003d (ReplicaBeingWritten)replicaInfo;\n+          ReplicaInPipeline rbw \u003d (ReplicaInPipeline)replicaInfo;\n           if (!rbw.attemptToSetWriter(null, Thread.currentThread())) {\n             throw new MustStopExistingWriter(rbw);\n           }\n           LOG.info(\"At \" + datanode.getDisplayName() + \", Recovering \" + rbw);\n           return recoverRbwImpl(rbw, b, newGS, minBytesRcvd, maxBytesRcvd);\n         }\n       } catch (MustStopExistingWriter e) {\n-        e.getReplica().stopWriter(datanode.getDnConf().getXceiverStopTimeout());\n+        e.getReplicaInPipeline().stopWriter(\n+            datanode.getDnConf().getXceiverStopTimeout());\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ReplicaHandler recoverRbw(\n      ExtendedBlock b, long newGS, long minBytesRcvd, long maxBytesRcvd)\n      throws IOException {\n    LOG.info(\"Recover RBW replica \" + b);\n\n    while (true) {\n      try {\n        try (AutoCloseableLock lock \u003d datasetLock.acquire()) {\n          ReplicaInfo replicaInfo \u003d\n              getReplicaInfo(b.getBlockPoolId(), b.getBlockId());\n          // check the replica\u0027s state\n          if (replicaInfo.getState() !\u003d ReplicaState.RBW) {\n            throw new ReplicaNotFoundException(\n                ReplicaNotFoundException.NON_RBW_REPLICA + replicaInfo);\n          }\n          ReplicaInPipeline rbw \u003d (ReplicaInPipeline)replicaInfo;\n          if (!rbw.attemptToSetWriter(null, Thread.currentThread())) {\n            throw new MustStopExistingWriter(rbw);\n          }\n          LOG.info(\"At \" + datanode.getDisplayName() + \", Recovering \" + rbw);\n          return recoverRbwImpl(rbw, b, newGS, minBytesRcvd, maxBytesRcvd);\n        }\n      } catch (MustStopExistingWriter e) {\n        e.getReplicaInPipeline().stopWriter(\n            datanode.getDnConf().getXceiverStopTimeout());\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
      "extendedDetails": {}
    },
    "c25817159af17753b398956cfe6ff14984801b01": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10652. Add a unit test for HDFS-4660. Contributed by Vinayakumar B., Wei-Chiu Chuang, Yongjun Zhang.\n",
      "commitDate": "27/08/16 10:51 PM",
      "commitName": "c25817159af17753b398956cfe6ff14984801b01",
      "commitAuthor": "Yongjun Zhang",
      "commitDateOld": "08/08/16 12:02 PM",
      "commitNameOld": "8c0638471f8f1dd47667b2d6727d4d2d54e4b48c",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 19.45,
      "commitsBetweenForRepo": 147,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   public ReplicaHandler recoverRbw(\n       ExtendedBlock b, long newGS, long minBytesRcvd, long maxBytesRcvd)\n       throws IOException {\n     LOG.info(\"Recover RBW replica \" + b);\n \n     while (true) {\n       try {\n         try (AutoCloseableLock lock \u003d datasetLock.acquire()) {\n           ReplicaInfo replicaInfo \u003d getReplicaInfo(b.getBlockPoolId(), b.getBlockId());\n           \n           // check the replica\u0027s state\n           if (replicaInfo.getState() !\u003d ReplicaState.RBW) {\n             throw new ReplicaNotFoundException(\n                 ReplicaNotFoundException.NON_RBW_REPLICA + replicaInfo);\n           }\n           ReplicaBeingWritten rbw \u003d (ReplicaBeingWritten)replicaInfo;\n           if (!rbw.attemptToSetWriter(null, Thread.currentThread())) {\n             throw new MustStopExistingWriter(rbw);\n           }\n-          LOG.info(\"Recovering \" + rbw);\n+          LOG.info(\"At \" + datanode.getDisplayName() + \", Recovering \" + rbw);\n           return recoverRbwImpl(rbw, b, newGS, minBytesRcvd, maxBytesRcvd);\n         }\n       } catch (MustStopExistingWriter e) {\n         e.getReplica().stopWriter(datanode.getDnConf().getXceiverStopTimeout());\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ReplicaHandler recoverRbw(\n      ExtendedBlock b, long newGS, long minBytesRcvd, long maxBytesRcvd)\n      throws IOException {\n    LOG.info(\"Recover RBW replica \" + b);\n\n    while (true) {\n      try {\n        try (AutoCloseableLock lock \u003d datasetLock.acquire()) {\n          ReplicaInfo replicaInfo \u003d getReplicaInfo(b.getBlockPoolId(), b.getBlockId());\n          \n          // check the replica\u0027s state\n          if (replicaInfo.getState() !\u003d ReplicaState.RBW) {\n            throw new ReplicaNotFoundException(\n                ReplicaNotFoundException.NON_RBW_REPLICA + replicaInfo);\n          }\n          ReplicaBeingWritten rbw \u003d (ReplicaBeingWritten)replicaInfo;\n          if (!rbw.attemptToSetWriter(null, Thread.currentThread())) {\n            throw new MustStopExistingWriter(rbw);\n          }\n          LOG.info(\"At \" + datanode.getDisplayName() + \", Recovering \" + rbw);\n          return recoverRbwImpl(rbw, b, newGS, minBytesRcvd, maxBytesRcvd);\n        }\n      } catch (MustStopExistingWriter e) {\n        e.getReplica().stopWriter(datanode.getDnConf().getXceiverStopTimeout());\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
      "extendedDetails": {}
    },
    "8c0638471f8f1dd47667b2d6727d4d2d54e4b48c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10682. Replace FsDatasetImpl object lock with a separate lock object. (Chen Liang)\n",
      "commitDate": "08/08/16 12:02 PM",
      "commitName": "8c0638471f8f1dd47667b2d6727d4d2d54e4b48c",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "08/07/16 7:40 PM",
      "commitNameOld": "da6f1b88dd47e22b24d44f6fc8bbee73e85746f7",
      "commitAuthorOld": "Yongjun Zhang",
      "daysBetweenCommits": 30.68,
      "commitsBetweenForRepo": 320,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   public ReplicaHandler recoverRbw(\n       ExtendedBlock b, long newGS, long minBytesRcvd, long maxBytesRcvd)\n       throws IOException {\n     LOG.info(\"Recover RBW replica \" + b);\n \n     while (true) {\n       try {\n-        synchronized (this) {\n+        try (AutoCloseableLock lock \u003d datasetLock.acquire()) {\n           ReplicaInfo replicaInfo \u003d getReplicaInfo(b.getBlockPoolId(), b.getBlockId());\n           \n           // check the replica\u0027s state\n           if (replicaInfo.getState() !\u003d ReplicaState.RBW) {\n             throw new ReplicaNotFoundException(\n                 ReplicaNotFoundException.NON_RBW_REPLICA + replicaInfo);\n           }\n           ReplicaBeingWritten rbw \u003d (ReplicaBeingWritten)replicaInfo;\n           if (!rbw.attemptToSetWriter(null, Thread.currentThread())) {\n             throw new MustStopExistingWriter(rbw);\n           }\n           LOG.info(\"Recovering \" + rbw);\n           return recoverRbwImpl(rbw, b, newGS, minBytesRcvd, maxBytesRcvd);\n         }\n       } catch (MustStopExistingWriter e) {\n         e.getReplica().stopWriter(datanode.getDnConf().getXceiverStopTimeout());\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ReplicaHandler recoverRbw(\n      ExtendedBlock b, long newGS, long minBytesRcvd, long maxBytesRcvd)\n      throws IOException {\n    LOG.info(\"Recover RBW replica \" + b);\n\n    while (true) {\n      try {\n        try (AutoCloseableLock lock \u003d datasetLock.acquire()) {\n          ReplicaInfo replicaInfo \u003d getReplicaInfo(b.getBlockPoolId(), b.getBlockId());\n          \n          // check the replica\u0027s state\n          if (replicaInfo.getState() !\u003d ReplicaState.RBW) {\n            throw new ReplicaNotFoundException(\n                ReplicaNotFoundException.NON_RBW_REPLICA + replicaInfo);\n          }\n          ReplicaBeingWritten rbw \u003d (ReplicaBeingWritten)replicaInfo;\n          if (!rbw.attemptToSetWriter(null, Thread.currentThread())) {\n            throw new MustStopExistingWriter(rbw);\n          }\n          LOG.info(\"Recovering \" + rbw);\n          return recoverRbwImpl(rbw, b, newGS, minBytesRcvd, maxBytesRcvd);\n        }\n      } catch (MustStopExistingWriter e) {\n        e.getReplica().stopWriter(datanode.getDnConf().getXceiverStopTimeout());\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
      "extendedDetails": {}
    },
    "f6b1a818124cc42688c4c5acaf537d96cf00e43b": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "HDFS-8496. Calling stopWriter() with FSDatasetImpl lock held may block other threads (cmccabe)\n",
      "commitDate": "04/04/16 6:02 PM",
      "commitName": "f6b1a818124cc42688c4c5acaf537d96cf00e43b",
      "commitAuthor": "Colin Patrick Mccabe",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-8496. Calling stopWriter() with FSDatasetImpl lock held may block other threads (cmccabe)\n",
          "commitDate": "04/04/16 6:02 PM",
          "commitName": "f6b1a818124cc42688c4c5acaf537d96cf00e43b",
          "commitAuthor": "Colin Patrick Mccabe",
          "commitDateOld": "18/03/16 8:24 AM",
          "commitNameOld": "63c966a3fbeb675959fc4101e65de9f57aecd17d",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 17.4,
          "commitsBetweenForRepo": 95,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,60 +1,27 @@\n-  public synchronized ReplicaHandler recoverRbw(\n+  public ReplicaHandler recoverRbw(\n       ExtendedBlock b, long newGS, long minBytesRcvd, long maxBytesRcvd)\n       throws IOException {\n     LOG.info(\"Recover RBW replica \" + b);\n \n-    ReplicaInfo replicaInfo \u003d getReplicaInfo(b.getBlockPoolId(), b.getBlockId());\n-    \n-    // check the replica\u0027s state\n-    if (replicaInfo.getState() !\u003d ReplicaState.RBW) {\n-      throw new ReplicaNotFoundException(\n-          ReplicaNotFoundException.NON_RBW_REPLICA + replicaInfo);\n-    }\n-    ReplicaBeingWritten rbw \u003d (ReplicaBeingWritten)replicaInfo;\n-    \n-    LOG.info(\"Recovering \" + rbw);\n-\n-    // Stop the previous writer\n-    rbw.stopWriter(datanode.getDnConf().getXceiverStopTimeout());\n-    rbw.setWriter(Thread.currentThread());\n-\n-    // check generation stamp\n-    long replicaGenerationStamp \u003d rbw.getGenerationStamp();\n-    if (replicaGenerationStamp \u003c b.getGenerationStamp() ||\n-        replicaGenerationStamp \u003e newGS) {\n-      throw new ReplicaNotFoundException(\n-          ReplicaNotFoundException.UNEXPECTED_GS_REPLICA + b +\n-          \". Expected GS range is [\" + b.getGenerationStamp() + \", \" + \n-          newGS + \"].\");\n-    }\n-    \n-    // check replica length\n-    long bytesAcked \u003d rbw.getBytesAcked();\n-    long numBytes \u003d rbw.getNumBytes();\n-    if (bytesAcked \u003c minBytesRcvd || numBytes \u003e maxBytesRcvd){\n-      throw new ReplicaNotFoundException(\"Unmatched length replica \" + \n-          replicaInfo + \": BytesAcked \u003d \" + bytesAcked + \n-          \" BytesRcvd \u003d \" + numBytes + \" are not in the range of [\" + \n-          minBytesRcvd + \", \" + maxBytesRcvd + \"].\");\n-    }\n-\n-    FsVolumeReference ref \u003d rbw.getVolume().obtainReference();\n-    try {\n-      // Truncate the potentially corrupt portion.\n-      // If the source was client and the last node in the pipeline was lost,\n-      // any corrupt data written after the acked length can go unnoticed.\n-      if (numBytes \u003e bytesAcked) {\n-        final File replicafile \u003d rbw.getBlockFile();\n-        truncateBlock(replicafile, rbw.getMetaFile(), numBytes, bytesAcked);\n-        rbw.setNumBytes(bytesAcked);\n-        rbw.setLastChecksumAndDataLen(bytesAcked, null);\n+    while (true) {\n+      try {\n+        synchronized (this) {\n+          ReplicaInfo replicaInfo \u003d getReplicaInfo(b.getBlockPoolId(), b.getBlockId());\n+          \n+          // check the replica\u0027s state\n+          if (replicaInfo.getState() !\u003d ReplicaState.RBW) {\n+            throw new ReplicaNotFoundException(\n+                ReplicaNotFoundException.NON_RBW_REPLICA + replicaInfo);\n+          }\n+          ReplicaBeingWritten rbw \u003d (ReplicaBeingWritten)replicaInfo;\n+          if (!rbw.attemptToSetWriter(null, Thread.currentThread())) {\n+            throw new MustStopExistingWriter(rbw);\n+          }\n+          LOG.info(\"Recovering \" + rbw);\n+          return recoverRbwImpl(rbw, b, newGS, minBytesRcvd, maxBytesRcvd);\n+        }\n+      } catch (MustStopExistingWriter e) {\n+        e.getReplica().stopWriter(datanode.getDnConf().getXceiverStopTimeout());\n       }\n-\n-      // bump the replica\u0027s generation stamp to newGS\n-      bumpReplicaGS(rbw, newGS);\n-    } catch (IOException e) {\n-      IOUtils.cleanup(null, ref);\n-      throw e;\n     }\n-    return new ReplicaHandler(rbw, ref);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ReplicaHandler recoverRbw(\n      ExtendedBlock b, long newGS, long minBytesRcvd, long maxBytesRcvd)\n      throws IOException {\n    LOG.info(\"Recover RBW replica \" + b);\n\n    while (true) {\n      try {\n        synchronized (this) {\n          ReplicaInfo replicaInfo \u003d getReplicaInfo(b.getBlockPoolId(), b.getBlockId());\n          \n          // check the replica\u0027s state\n          if (replicaInfo.getState() !\u003d ReplicaState.RBW) {\n            throw new ReplicaNotFoundException(\n                ReplicaNotFoundException.NON_RBW_REPLICA + replicaInfo);\n          }\n          ReplicaBeingWritten rbw \u003d (ReplicaBeingWritten)replicaInfo;\n          if (!rbw.attemptToSetWriter(null, Thread.currentThread())) {\n            throw new MustStopExistingWriter(rbw);\n          }\n          LOG.info(\"Recovering \" + rbw);\n          return recoverRbwImpl(rbw, b, newGS, minBytesRcvd, maxBytesRcvd);\n        }\n      } catch (MustStopExistingWriter e) {\n        e.getReplica().stopWriter(datanode.getDnConf().getXceiverStopTimeout());\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8496. Calling stopWriter() with FSDatasetImpl lock held may block other threads (cmccabe)\n",
          "commitDate": "04/04/16 6:02 PM",
          "commitName": "f6b1a818124cc42688c4c5acaf537d96cf00e43b",
          "commitAuthor": "Colin Patrick Mccabe",
          "commitDateOld": "18/03/16 8:24 AM",
          "commitNameOld": "63c966a3fbeb675959fc4101e65de9f57aecd17d",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 17.4,
          "commitsBetweenForRepo": 95,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,60 +1,27 @@\n-  public synchronized ReplicaHandler recoverRbw(\n+  public ReplicaHandler recoverRbw(\n       ExtendedBlock b, long newGS, long minBytesRcvd, long maxBytesRcvd)\n       throws IOException {\n     LOG.info(\"Recover RBW replica \" + b);\n \n-    ReplicaInfo replicaInfo \u003d getReplicaInfo(b.getBlockPoolId(), b.getBlockId());\n-    \n-    // check the replica\u0027s state\n-    if (replicaInfo.getState() !\u003d ReplicaState.RBW) {\n-      throw new ReplicaNotFoundException(\n-          ReplicaNotFoundException.NON_RBW_REPLICA + replicaInfo);\n-    }\n-    ReplicaBeingWritten rbw \u003d (ReplicaBeingWritten)replicaInfo;\n-    \n-    LOG.info(\"Recovering \" + rbw);\n-\n-    // Stop the previous writer\n-    rbw.stopWriter(datanode.getDnConf().getXceiverStopTimeout());\n-    rbw.setWriter(Thread.currentThread());\n-\n-    // check generation stamp\n-    long replicaGenerationStamp \u003d rbw.getGenerationStamp();\n-    if (replicaGenerationStamp \u003c b.getGenerationStamp() ||\n-        replicaGenerationStamp \u003e newGS) {\n-      throw new ReplicaNotFoundException(\n-          ReplicaNotFoundException.UNEXPECTED_GS_REPLICA + b +\n-          \". Expected GS range is [\" + b.getGenerationStamp() + \", \" + \n-          newGS + \"].\");\n-    }\n-    \n-    // check replica length\n-    long bytesAcked \u003d rbw.getBytesAcked();\n-    long numBytes \u003d rbw.getNumBytes();\n-    if (bytesAcked \u003c minBytesRcvd || numBytes \u003e maxBytesRcvd){\n-      throw new ReplicaNotFoundException(\"Unmatched length replica \" + \n-          replicaInfo + \": BytesAcked \u003d \" + bytesAcked + \n-          \" BytesRcvd \u003d \" + numBytes + \" are not in the range of [\" + \n-          minBytesRcvd + \", \" + maxBytesRcvd + \"].\");\n-    }\n-\n-    FsVolumeReference ref \u003d rbw.getVolume().obtainReference();\n-    try {\n-      // Truncate the potentially corrupt portion.\n-      // If the source was client and the last node in the pipeline was lost,\n-      // any corrupt data written after the acked length can go unnoticed.\n-      if (numBytes \u003e bytesAcked) {\n-        final File replicafile \u003d rbw.getBlockFile();\n-        truncateBlock(replicafile, rbw.getMetaFile(), numBytes, bytesAcked);\n-        rbw.setNumBytes(bytesAcked);\n-        rbw.setLastChecksumAndDataLen(bytesAcked, null);\n+    while (true) {\n+      try {\n+        synchronized (this) {\n+          ReplicaInfo replicaInfo \u003d getReplicaInfo(b.getBlockPoolId(), b.getBlockId());\n+          \n+          // check the replica\u0027s state\n+          if (replicaInfo.getState() !\u003d ReplicaState.RBW) {\n+            throw new ReplicaNotFoundException(\n+                ReplicaNotFoundException.NON_RBW_REPLICA + replicaInfo);\n+          }\n+          ReplicaBeingWritten rbw \u003d (ReplicaBeingWritten)replicaInfo;\n+          if (!rbw.attemptToSetWriter(null, Thread.currentThread())) {\n+            throw new MustStopExistingWriter(rbw);\n+          }\n+          LOG.info(\"Recovering \" + rbw);\n+          return recoverRbwImpl(rbw, b, newGS, minBytesRcvd, maxBytesRcvd);\n+        }\n+      } catch (MustStopExistingWriter e) {\n+        e.getReplica().stopWriter(datanode.getDnConf().getXceiverStopTimeout());\n       }\n-\n-      // bump the replica\u0027s generation stamp to newGS\n-      bumpReplicaGS(rbw, newGS);\n-    } catch (IOException e) {\n-      IOUtils.cleanup(null, ref);\n-      throw e;\n     }\n-    return new ReplicaHandler(rbw, ref);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ReplicaHandler recoverRbw(\n      ExtendedBlock b, long newGS, long minBytesRcvd, long maxBytesRcvd)\n      throws IOException {\n    LOG.info(\"Recover RBW replica \" + b);\n\n    while (true) {\n      try {\n        synchronized (this) {\n          ReplicaInfo replicaInfo \u003d getReplicaInfo(b.getBlockPoolId(), b.getBlockId());\n          \n          // check the replica\u0027s state\n          if (replicaInfo.getState() !\u003d ReplicaState.RBW) {\n            throw new ReplicaNotFoundException(\n                ReplicaNotFoundException.NON_RBW_REPLICA + replicaInfo);\n          }\n          ReplicaBeingWritten rbw \u003d (ReplicaBeingWritten)replicaInfo;\n          if (!rbw.attemptToSetWriter(null, Thread.currentThread())) {\n            throw new MustStopExistingWriter(rbw);\n          }\n          LOG.info(\"Recovering \" + rbw);\n          return recoverRbwImpl(rbw, b, newGS, minBytesRcvd, maxBytesRcvd);\n        }\n      } catch (MustStopExistingWriter e) {\n        e.getReplica().stopWriter(datanode.getDnConf().getXceiverStopTimeout());\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "b7f4a3156c0f5c600816c469637237ba6c9b330c": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-7496. Fix FsVolume removal race conditions on the DataNode by reference-counting the volume instances (lei via cmccabe)\n",
      "commitDate": "20/01/15 7:05 PM",
      "commitName": "b7f4a3156c0f5c600816c469637237ba6c9b330c",
      "commitAuthor": "Colin Patrick Mccabe",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-7496. Fix FsVolume removal race conditions on the DataNode by reference-counting the volume instances (lei via cmccabe)\n",
          "commitDate": "20/01/15 7:05 PM",
          "commitName": "b7f4a3156c0f5c600816c469637237ba6c9b330c",
          "commitAuthor": "Colin Patrick Mccabe",
          "commitDateOld": "13/01/15 12:24 AM",
          "commitNameOld": "08ac06283a3e9bf0d49d873823aabd419b08e41f",
          "commitAuthorOld": "Konstantin V Shvachko",
          "daysBetweenCommits": 7.78,
          "commitsBetweenForRepo": 49,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,55 +1,60 @@\n-  public synchronized ReplicaInPipeline recoverRbw(ExtendedBlock b,\n-      long newGS, long minBytesRcvd, long maxBytesRcvd)\n+  public synchronized ReplicaHandler recoverRbw(\n+      ExtendedBlock b, long newGS, long minBytesRcvd, long maxBytesRcvd)\n       throws IOException {\n     LOG.info(\"Recover RBW replica \" + b);\n \n     ReplicaInfo replicaInfo \u003d getReplicaInfo(b.getBlockPoolId(), b.getBlockId());\n     \n     // check the replica\u0027s state\n     if (replicaInfo.getState() !\u003d ReplicaState.RBW) {\n       throw new ReplicaNotFoundException(\n           ReplicaNotFoundException.NON_RBW_REPLICA + replicaInfo);\n     }\n     ReplicaBeingWritten rbw \u003d (ReplicaBeingWritten)replicaInfo;\n     \n     LOG.info(\"Recovering \" + rbw);\n \n     // Stop the previous writer\n     rbw.stopWriter(datanode.getDnConf().getXceiverStopTimeout());\n     rbw.setWriter(Thread.currentThread());\n \n     // check generation stamp\n     long replicaGenerationStamp \u003d rbw.getGenerationStamp();\n     if (replicaGenerationStamp \u003c b.getGenerationStamp() ||\n         replicaGenerationStamp \u003e newGS) {\n       throw new ReplicaNotFoundException(\n           ReplicaNotFoundException.UNEXPECTED_GS_REPLICA + b +\n           \". Expected GS range is [\" + b.getGenerationStamp() + \", \" + \n           newGS + \"].\");\n     }\n     \n     // check replica length\n     long bytesAcked \u003d rbw.getBytesAcked();\n     long numBytes \u003d rbw.getNumBytes();\n     if (bytesAcked \u003c minBytesRcvd || numBytes \u003e maxBytesRcvd){\n       throw new ReplicaNotFoundException(\"Unmatched length replica \" + \n           replicaInfo + \": BytesAcked \u003d \" + bytesAcked + \n           \" BytesRcvd \u003d \" + numBytes + \" are not in the range of [\" + \n           minBytesRcvd + \", \" + maxBytesRcvd + \"].\");\n     }\n \n-    // Truncate the potentially corrupt portion.\n-    // If the source was client and the last node in the pipeline was lost,\n-    // any corrupt data written after the acked length can go unnoticed. \n-    if (numBytes \u003e bytesAcked) {\n-      final File replicafile \u003d rbw.getBlockFile();\n-      truncateBlock(replicafile, rbw.getMetaFile(), numBytes, bytesAcked);\n-      rbw.setNumBytes(bytesAcked);\n-      rbw.setLastChecksumAndDataLen(bytesAcked, null);\n-    }\n+    FsVolumeReference ref \u003d rbw.getVolume().obtainReference();\n+    try {\n+      // Truncate the potentially corrupt portion.\n+      // If the source was client and the last node in the pipeline was lost,\n+      // any corrupt data written after the acked length can go unnoticed.\n+      if (numBytes \u003e bytesAcked) {\n+        final File replicafile \u003d rbw.getBlockFile();\n+        truncateBlock(replicafile, rbw.getMetaFile(), numBytes, bytesAcked);\n+        rbw.setNumBytes(bytesAcked);\n+        rbw.setLastChecksumAndDataLen(bytesAcked, null);\n+      }\n \n-    // bump the replica\u0027s generation stamp to newGS\n-    bumpReplicaGS(rbw, newGS);\n-    \n-    return rbw;\n+      // bump the replica\u0027s generation stamp to newGS\n+      bumpReplicaGS(rbw, newGS);\n+    } catch (IOException e) {\n+      IOUtils.cleanup(null, ref);\n+      throw e;\n+    }\n+    return new ReplicaHandler(rbw, ref);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized ReplicaHandler recoverRbw(\n      ExtendedBlock b, long newGS, long minBytesRcvd, long maxBytesRcvd)\n      throws IOException {\n    LOG.info(\"Recover RBW replica \" + b);\n\n    ReplicaInfo replicaInfo \u003d getReplicaInfo(b.getBlockPoolId(), b.getBlockId());\n    \n    // check the replica\u0027s state\n    if (replicaInfo.getState() !\u003d ReplicaState.RBW) {\n      throw new ReplicaNotFoundException(\n          ReplicaNotFoundException.NON_RBW_REPLICA + replicaInfo);\n    }\n    ReplicaBeingWritten rbw \u003d (ReplicaBeingWritten)replicaInfo;\n    \n    LOG.info(\"Recovering \" + rbw);\n\n    // Stop the previous writer\n    rbw.stopWriter(datanode.getDnConf().getXceiverStopTimeout());\n    rbw.setWriter(Thread.currentThread());\n\n    // check generation stamp\n    long replicaGenerationStamp \u003d rbw.getGenerationStamp();\n    if (replicaGenerationStamp \u003c b.getGenerationStamp() ||\n        replicaGenerationStamp \u003e newGS) {\n      throw new ReplicaNotFoundException(\n          ReplicaNotFoundException.UNEXPECTED_GS_REPLICA + b +\n          \". Expected GS range is [\" + b.getGenerationStamp() + \", \" + \n          newGS + \"].\");\n    }\n    \n    // check replica length\n    long bytesAcked \u003d rbw.getBytesAcked();\n    long numBytes \u003d rbw.getNumBytes();\n    if (bytesAcked \u003c minBytesRcvd || numBytes \u003e maxBytesRcvd){\n      throw new ReplicaNotFoundException(\"Unmatched length replica \" + \n          replicaInfo + \": BytesAcked \u003d \" + bytesAcked + \n          \" BytesRcvd \u003d \" + numBytes + \" are not in the range of [\" + \n          minBytesRcvd + \", \" + maxBytesRcvd + \"].\");\n    }\n\n    FsVolumeReference ref \u003d rbw.getVolume().obtainReference();\n    try {\n      // Truncate the potentially corrupt portion.\n      // If the source was client and the last node in the pipeline was lost,\n      // any corrupt data written after the acked length can go unnoticed.\n      if (numBytes \u003e bytesAcked) {\n        final File replicafile \u003d rbw.getBlockFile();\n        truncateBlock(replicafile, rbw.getMetaFile(), numBytes, bytesAcked);\n        rbw.setNumBytes(bytesAcked);\n        rbw.setLastChecksumAndDataLen(bytesAcked, null);\n      }\n\n      // bump the replica\u0027s generation stamp to newGS\n      bumpReplicaGS(rbw, newGS);\n    } catch (IOException e) {\n      IOUtils.cleanup(null, ref);\n      throw e;\n    }\n    return new ReplicaHandler(rbw, ref);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
          "extendedDetails": {
            "oldValue": "ReplicaInPipeline",
            "newValue": "ReplicaHandler"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7496. Fix FsVolume removal race conditions on the DataNode by reference-counting the volume instances (lei via cmccabe)\n",
          "commitDate": "20/01/15 7:05 PM",
          "commitName": "b7f4a3156c0f5c600816c469637237ba6c9b330c",
          "commitAuthor": "Colin Patrick Mccabe",
          "commitDateOld": "13/01/15 12:24 AM",
          "commitNameOld": "08ac06283a3e9bf0d49d873823aabd419b08e41f",
          "commitAuthorOld": "Konstantin V Shvachko",
          "daysBetweenCommits": 7.78,
          "commitsBetweenForRepo": 49,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,55 +1,60 @@\n-  public synchronized ReplicaInPipeline recoverRbw(ExtendedBlock b,\n-      long newGS, long minBytesRcvd, long maxBytesRcvd)\n+  public synchronized ReplicaHandler recoverRbw(\n+      ExtendedBlock b, long newGS, long minBytesRcvd, long maxBytesRcvd)\n       throws IOException {\n     LOG.info(\"Recover RBW replica \" + b);\n \n     ReplicaInfo replicaInfo \u003d getReplicaInfo(b.getBlockPoolId(), b.getBlockId());\n     \n     // check the replica\u0027s state\n     if (replicaInfo.getState() !\u003d ReplicaState.RBW) {\n       throw new ReplicaNotFoundException(\n           ReplicaNotFoundException.NON_RBW_REPLICA + replicaInfo);\n     }\n     ReplicaBeingWritten rbw \u003d (ReplicaBeingWritten)replicaInfo;\n     \n     LOG.info(\"Recovering \" + rbw);\n \n     // Stop the previous writer\n     rbw.stopWriter(datanode.getDnConf().getXceiverStopTimeout());\n     rbw.setWriter(Thread.currentThread());\n \n     // check generation stamp\n     long replicaGenerationStamp \u003d rbw.getGenerationStamp();\n     if (replicaGenerationStamp \u003c b.getGenerationStamp() ||\n         replicaGenerationStamp \u003e newGS) {\n       throw new ReplicaNotFoundException(\n           ReplicaNotFoundException.UNEXPECTED_GS_REPLICA + b +\n           \". Expected GS range is [\" + b.getGenerationStamp() + \", \" + \n           newGS + \"].\");\n     }\n     \n     // check replica length\n     long bytesAcked \u003d rbw.getBytesAcked();\n     long numBytes \u003d rbw.getNumBytes();\n     if (bytesAcked \u003c minBytesRcvd || numBytes \u003e maxBytesRcvd){\n       throw new ReplicaNotFoundException(\"Unmatched length replica \" + \n           replicaInfo + \": BytesAcked \u003d \" + bytesAcked + \n           \" BytesRcvd \u003d \" + numBytes + \" are not in the range of [\" + \n           minBytesRcvd + \", \" + maxBytesRcvd + \"].\");\n     }\n \n-    // Truncate the potentially corrupt portion.\n-    // If the source was client and the last node in the pipeline was lost,\n-    // any corrupt data written after the acked length can go unnoticed. \n-    if (numBytes \u003e bytesAcked) {\n-      final File replicafile \u003d rbw.getBlockFile();\n-      truncateBlock(replicafile, rbw.getMetaFile(), numBytes, bytesAcked);\n-      rbw.setNumBytes(bytesAcked);\n-      rbw.setLastChecksumAndDataLen(bytesAcked, null);\n-    }\n+    FsVolumeReference ref \u003d rbw.getVolume().obtainReference();\n+    try {\n+      // Truncate the potentially corrupt portion.\n+      // If the source was client and the last node in the pipeline was lost,\n+      // any corrupt data written after the acked length can go unnoticed.\n+      if (numBytes \u003e bytesAcked) {\n+        final File replicafile \u003d rbw.getBlockFile();\n+        truncateBlock(replicafile, rbw.getMetaFile(), numBytes, bytesAcked);\n+        rbw.setNumBytes(bytesAcked);\n+        rbw.setLastChecksumAndDataLen(bytesAcked, null);\n+      }\n \n-    // bump the replica\u0027s generation stamp to newGS\n-    bumpReplicaGS(rbw, newGS);\n-    \n-    return rbw;\n+      // bump the replica\u0027s generation stamp to newGS\n+      bumpReplicaGS(rbw, newGS);\n+    } catch (IOException e) {\n+      IOUtils.cleanup(null, ref);\n+      throw e;\n+    }\n+    return new ReplicaHandler(rbw, ref);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized ReplicaHandler recoverRbw(\n      ExtendedBlock b, long newGS, long minBytesRcvd, long maxBytesRcvd)\n      throws IOException {\n    LOG.info(\"Recover RBW replica \" + b);\n\n    ReplicaInfo replicaInfo \u003d getReplicaInfo(b.getBlockPoolId(), b.getBlockId());\n    \n    // check the replica\u0027s state\n    if (replicaInfo.getState() !\u003d ReplicaState.RBW) {\n      throw new ReplicaNotFoundException(\n          ReplicaNotFoundException.NON_RBW_REPLICA + replicaInfo);\n    }\n    ReplicaBeingWritten rbw \u003d (ReplicaBeingWritten)replicaInfo;\n    \n    LOG.info(\"Recovering \" + rbw);\n\n    // Stop the previous writer\n    rbw.stopWriter(datanode.getDnConf().getXceiverStopTimeout());\n    rbw.setWriter(Thread.currentThread());\n\n    // check generation stamp\n    long replicaGenerationStamp \u003d rbw.getGenerationStamp();\n    if (replicaGenerationStamp \u003c b.getGenerationStamp() ||\n        replicaGenerationStamp \u003e newGS) {\n      throw new ReplicaNotFoundException(\n          ReplicaNotFoundException.UNEXPECTED_GS_REPLICA + b +\n          \". Expected GS range is [\" + b.getGenerationStamp() + \", \" + \n          newGS + \"].\");\n    }\n    \n    // check replica length\n    long bytesAcked \u003d rbw.getBytesAcked();\n    long numBytes \u003d rbw.getNumBytes();\n    if (bytesAcked \u003c minBytesRcvd || numBytes \u003e maxBytesRcvd){\n      throw new ReplicaNotFoundException(\"Unmatched length replica \" + \n          replicaInfo + \": BytesAcked \u003d \" + bytesAcked + \n          \" BytesRcvd \u003d \" + numBytes + \" are not in the range of [\" + \n          minBytesRcvd + \", \" + maxBytesRcvd + \"].\");\n    }\n\n    FsVolumeReference ref \u003d rbw.getVolume().obtainReference();\n    try {\n      // Truncate the potentially corrupt portion.\n      // If the source was client and the last node in the pipeline was lost,\n      // any corrupt data written after the acked length can go unnoticed.\n      if (numBytes \u003e bytesAcked) {\n        final File replicafile \u003d rbw.getBlockFile();\n        truncateBlock(replicafile, rbw.getMetaFile(), numBytes, bytesAcked);\n        rbw.setNumBytes(bytesAcked);\n        rbw.setLastChecksumAndDataLen(bytesAcked, null);\n      }\n\n      // bump the replica\u0027s generation stamp to newGS\n      bumpReplicaGS(rbw, newGS);\n    } catch (IOException e) {\n      IOUtils.cleanup(null, ref);\n      throw e;\n    }\n    return new ReplicaHandler(rbw, ref);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "7723b139d55fc2c3954939559cb4914046a0f81c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5016. Deadlock in pipeline recovery causes Datanode to be marked dead. Contributed by Suresh Srinivas.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1507189 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/07/13 9:42 PM",
      "commitName": "7723b139d55fc2c3954939559cb4914046a0f81c",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "21/05/13 6:42 AM",
      "commitNameOld": "98a692fd6361365db4afb9523a5d83ee32774112",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 65.63,
      "commitsBetweenForRepo": 415,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,55 @@\n   public synchronized ReplicaInPipeline recoverRbw(ExtendedBlock b,\n       long newGS, long minBytesRcvd, long maxBytesRcvd)\n       throws IOException {\n     LOG.info(\"Recover RBW replica \" + b);\n \n     ReplicaInfo replicaInfo \u003d getReplicaInfo(b.getBlockPoolId(), b.getBlockId());\n     \n     // check the replica\u0027s state\n     if (replicaInfo.getState() !\u003d ReplicaState.RBW) {\n       throw new ReplicaNotFoundException(\n           ReplicaNotFoundException.NON_RBW_REPLICA + replicaInfo);\n     }\n     ReplicaBeingWritten rbw \u003d (ReplicaBeingWritten)replicaInfo;\n     \n     LOG.info(\"Recovering \" + rbw);\n \n     // Stop the previous writer\n-    rbw.stopWriter();\n+    rbw.stopWriter(datanode.getDnConf().getXceiverStopTimeout());\n     rbw.setWriter(Thread.currentThread());\n \n     // check generation stamp\n     long replicaGenerationStamp \u003d rbw.getGenerationStamp();\n     if (replicaGenerationStamp \u003c b.getGenerationStamp() ||\n         replicaGenerationStamp \u003e newGS) {\n       throw new ReplicaNotFoundException(\n           ReplicaNotFoundException.UNEXPECTED_GS_REPLICA + b +\n           \". Expected GS range is [\" + b.getGenerationStamp() + \", \" + \n           newGS + \"].\");\n     }\n     \n     // check replica length\n     long bytesAcked \u003d rbw.getBytesAcked();\n     long numBytes \u003d rbw.getNumBytes();\n     if (bytesAcked \u003c minBytesRcvd || numBytes \u003e maxBytesRcvd){\n       throw new ReplicaNotFoundException(\"Unmatched length replica \" + \n           replicaInfo + \": BytesAcked \u003d \" + bytesAcked + \n           \" BytesRcvd \u003d \" + numBytes + \" are not in the range of [\" + \n           minBytesRcvd + \", \" + maxBytesRcvd + \"].\");\n     }\n \n     // Truncate the potentially corrupt portion.\n     // If the source was client and the last node in the pipeline was lost,\n     // any corrupt data written after the acked length can go unnoticed. \n     if (numBytes \u003e bytesAcked) {\n       final File replicafile \u003d rbw.getBlockFile();\n       truncateBlock(replicafile, rbw.getMetaFile(), numBytes, bytesAcked);\n       rbw.setNumBytes(bytesAcked);\n       rbw.setLastChecksumAndDataLen(bytesAcked, null);\n     }\n \n     // bump the replica\u0027s generation stamp to newGS\n     bumpReplicaGS(rbw, newGS);\n     \n     return rbw;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized ReplicaInPipeline recoverRbw(ExtendedBlock b,\n      long newGS, long minBytesRcvd, long maxBytesRcvd)\n      throws IOException {\n    LOG.info(\"Recover RBW replica \" + b);\n\n    ReplicaInfo replicaInfo \u003d getReplicaInfo(b.getBlockPoolId(), b.getBlockId());\n    \n    // check the replica\u0027s state\n    if (replicaInfo.getState() !\u003d ReplicaState.RBW) {\n      throw new ReplicaNotFoundException(\n          ReplicaNotFoundException.NON_RBW_REPLICA + replicaInfo);\n    }\n    ReplicaBeingWritten rbw \u003d (ReplicaBeingWritten)replicaInfo;\n    \n    LOG.info(\"Recovering \" + rbw);\n\n    // Stop the previous writer\n    rbw.stopWriter(datanode.getDnConf().getXceiverStopTimeout());\n    rbw.setWriter(Thread.currentThread());\n\n    // check generation stamp\n    long replicaGenerationStamp \u003d rbw.getGenerationStamp();\n    if (replicaGenerationStamp \u003c b.getGenerationStamp() ||\n        replicaGenerationStamp \u003e newGS) {\n      throw new ReplicaNotFoundException(\n          ReplicaNotFoundException.UNEXPECTED_GS_REPLICA + b +\n          \". Expected GS range is [\" + b.getGenerationStamp() + \", \" + \n          newGS + \"].\");\n    }\n    \n    // check replica length\n    long bytesAcked \u003d rbw.getBytesAcked();\n    long numBytes \u003d rbw.getNumBytes();\n    if (bytesAcked \u003c minBytesRcvd || numBytes \u003e maxBytesRcvd){\n      throw new ReplicaNotFoundException(\"Unmatched length replica \" + \n          replicaInfo + \": BytesAcked \u003d \" + bytesAcked + \n          \" BytesRcvd \u003d \" + numBytes + \" are not in the range of [\" + \n          minBytesRcvd + \", \" + maxBytesRcvd + \"].\");\n    }\n\n    // Truncate the potentially corrupt portion.\n    // If the source was client and the last node in the pipeline was lost,\n    // any corrupt data written after the acked length can go unnoticed. \n    if (numBytes \u003e bytesAcked) {\n      final File replicafile \u003d rbw.getBlockFile();\n      truncateBlock(replicafile, rbw.getMetaFile(), numBytes, bytesAcked);\n      rbw.setNumBytes(bytesAcked);\n      rbw.setLastChecksumAndDataLen(bytesAcked, null);\n    }\n\n    // bump the replica\u0027s generation stamp to newGS\n    bumpReplicaGS(rbw, newGS);\n    \n    return rbw;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
      "extendedDetails": {}
    },
    "98a692fd6361365db4afb9523a5d83ee32774112": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3875. Issue handling checksum errors in write pipeline. Contributed by Kihwal Lee.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1484808 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/05/13 6:42 AM",
      "commitName": "98a692fd6361365db4afb9523a5d83ee32774112",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "09/05/13 5:03 PM",
      "commitNameOld": "a18fd620d070cf8e84aaf80d93807ac9ee207a0f",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 11.57,
      "commitsBetweenForRepo": 49,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,55 @@\n   public synchronized ReplicaInPipeline recoverRbw(ExtendedBlock b,\n       long newGS, long minBytesRcvd, long maxBytesRcvd)\n       throws IOException {\n     LOG.info(\"Recover RBW replica \" + b);\n \n     ReplicaInfo replicaInfo \u003d getReplicaInfo(b.getBlockPoolId(), b.getBlockId());\n     \n     // check the replica\u0027s state\n     if (replicaInfo.getState() !\u003d ReplicaState.RBW) {\n       throw new ReplicaNotFoundException(\n           ReplicaNotFoundException.NON_RBW_REPLICA + replicaInfo);\n     }\n     ReplicaBeingWritten rbw \u003d (ReplicaBeingWritten)replicaInfo;\n     \n     LOG.info(\"Recovering \" + rbw);\n \n     // Stop the previous writer\n     rbw.stopWriter();\n     rbw.setWriter(Thread.currentThread());\n \n     // check generation stamp\n     long replicaGenerationStamp \u003d rbw.getGenerationStamp();\n     if (replicaGenerationStamp \u003c b.getGenerationStamp() ||\n         replicaGenerationStamp \u003e newGS) {\n       throw new ReplicaNotFoundException(\n           ReplicaNotFoundException.UNEXPECTED_GS_REPLICA + b +\n           \". Expected GS range is [\" + b.getGenerationStamp() + \", \" + \n           newGS + \"].\");\n     }\n     \n     // check replica length\n-    if (rbw.getBytesAcked() \u003c minBytesRcvd || rbw.getNumBytes() \u003e maxBytesRcvd){\n+    long bytesAcked \u003d rbw.getBytesAcked();\n+    long numBytes \u003d rbw.getNumBytes();\n+    if (bytesAcked \u003c minBytesRcvd || numBytes \u003e maxBytesRcvd){\n       throw new ReplicaNotFoundException(\"Unmatched length replica \" + \n-          replicaInfo + \": BytesAcked \u003d \" + rbw.getBytesAcked() + \n-          \" BytesRcvd \u003d \" + rbw.getNumBytes() + \" are not in the range of [\" + \n+          replicaInfo + \": BytesAcked \u003d \" + bytesAcked + \n+          \" BytesRcvd \u003d \" + numBytes + \" are not in the range of [\" + \n           minBytesRcvd + \", \" + maxBytesRcvd + \"].\");\n     }\n \n+    // Truncate the potentially corrupt portion.\n+    // If the source was client and the last node in the pipeline was lost,\n+    // any corrupt data written after the acked length can go unnoticed. \n+    if (numBytes \u003e bytesAcked) {\n+      final File replicafile \u003d rbw.getBlockFile();\n+      truncateBlock(replicafile, rbw.getMetaFile(), numBytes, bytesAcked);\n+      rbw.setNumBytes(bytesAcked);\n+      rbw.setLastChecksumAndDataLen(bytesAcked, null);\n+    }\n+\n     // bump the replica\u0027s generation stamp to newGS\n     bumpReplicaGS(rbw, newGS);\n     \n     return rbw;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized ReplicaInPipeline recoverRbw(ExtendedBlock b,\n      long newGS, long minBytesRcvd, long maxBytesRcvd)\n      throws IOException {\n    LOG.info(\"Recover RBW replica \" + b);\n\n    ReplicaInfo replicaInfo \u003d getReplicaInfo(b.getBlockPoolId(), b.getBlockId());\n    \n    // check the replica\u0027s state\n    if (replicaInfo.getState() !\u003d ReplicaState.RBW) {\n      throw new ReplicaNotFoundException(\n          ReplicaNotFoundException.NON_RBW_REPLICA + replicaInfo);\n    }\n    ReplicaBeingWritten rbw \u003d (ReplicaBeingWritten)replicaInfo;\n    \n    LOG.info(\"Recovering \" + rbw);\n\n    // Stop the previous writer\n    rbw.stopWriter();\n    rbw.setWriter(Thread.currentThread());\n\n    // check generation stamp\n    long replicaGenerationStamp \u003d rbw.getGenerationStamp();\n    if (replicaGenerationStamp \u003c b.getGenerationStamp() ||\n        replicaGenerationStamp \u003e newGS) {\n      throw new ReplicaNotFoundException(\n          ReplicaNotFoundException.UNEXPECTED_GS_REPLICA + b +\n          \". Expected GS range is [\" + b.getGenerationStamp() + \", \" + \n          newGS + \"].\");\n    }\n    \n    // check replica length\n    long bytesAcked \u003d rbw.getBytesAcked();\n    long numBytes \u003d rbw.getNumBytes();\n    if (bytesAcked \u003c minBytesRcvd || numBytes \u003e maxBytesRcvd){\n      throw new ReplicaNotFoundException(\"Unmatched length replica \" + \n          replicaInfo + \": BytesAcked \u003d \" + bytesAcked + \n          \" BytesRcvd \u003d \" + numBytes + \" are not in the range of [\" + \n          minBytesRcvd + \", \" + maxBytesRcvd + \"].\");\n    }\n\n    // Truncate the potentially corrupt portion.\n    // If the source was client and the last node in the pipeline was lost,\n    // any corrupt data written after the acked length can go unnoticed. \n    if (numBytes \u003e bytesAcked) {\n      final File replicafile \u003d rbw.getBlockFile();\n      truncateBlock(replicafile, rbw.getMetaFile(), numBytes, bytesAcked);\n      rbw.setNumBytes(bytesAcked);\n      rbw.setLastChecksumAndDataLen(bytesAcked, null);\n    }\n\n    // bump the replica\u0027s generation stamp to newGS\n    bumpReplicaGS(rbw, newGS);\n    \n    return rbw;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
      "extendedDetails": {}
    },
    "cea7bbc630deede93dbe6a1bbda56ad49de4f3de": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4122. Cleanup HDFS logs and reduce the size of logged messages. Contributed by Suresh Srinivas.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1403120 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/10/12 4:10 PM",
      "commitName": "cea7bbc630deede93dbe6a1bbda56ad49de4f3de",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "13/09/12 4:48 PM",
      "commitNameOld": "86635168feaaf9a8f20d01b5fd6c1b6fbe98c1ea",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 44.97,
      "commitsBetweenForRepo": 247,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n   public synchronized ReplicaInPipeline recoverRbw(ExtendedBlock b,\n       long newGS, long minBytesRcvd, long maxBytesRcvd)\n       throws IOException {\n-    LOG.info(\"Recover the RBW replica \" + b);\n+    LOG.info(\"Recover RBW replica \" + b);\n \n     ReplicaInfo replicaInfo \u003d getReplicaInfo(b.getBlockPoolId(), b.getBlockId());\n     \n     // check the replica\u0027s state\n     if (replicaInfo.getState() !\u003d ReplicaState.RBW) {\n       throw new ReplicaNotFoundException(\n           ReplicaNotFoundException.NON_RBW_REPLICA + replicaInfo);\n     }\n     ReplicaBeingWritten rbw \u003d (ReplicaBeingWritten)replicaInfo;\n     \n-    LOG.info(\"Recovering replica \" + rbw);\n+    LOG.info(\"Recovering \" + rbw);\n \n     // Stop the previous writer\n     rbw.stopWriter();\n     rbw.setWriter(Thread.currentThread());\n \n     // check generation stamp\n     long replicaGenerationStamp \u003d rbw.getGenerationStamp();\n     if (replicaGenerationStamp \u003c b.getGenerationStamp() ||\n         replicaGenerationStamp \u003e newGS) {\n       throw new ReplicaNotFoundException(\n           ReplicaNotFoundException.UNEXPECTED_GS_REPLICA + b +\n           \". Expected GS range is [\" + b.getGenerationStamp() + \", \" + \n           newGS + \"].\");\n     }\n     \n     // check replica length\n     if (rbw.getBytesAcked() \u003c minBytesRcvd || rbw.getNumBytes() \u003e maxBytesRcvd){\n       throw new ReplicaNotFoundException(\"Unmatched length replica \" + \n           replicaInfo + \": BytesAcked \u003d \" + rbw.getBytesAcked() + \n           \" BytesRcvd \u003d \" + rbw.getNumBytes() + \" are not in the range of [\" + \n           minBytesRcvd + \", \" + maxBytesRcvd + \"].\");\n     }\n \n     // bump the replica\u0027s generation stamp to newGS\n     bumpReplicaGS(rbw, newGS);\n     \n     return rbw;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized ReplicaInPipeline recoverRbw(ExtendedBlock b,\n      long newGS, long minBytesRcvd, long maxBytesRcvd)\n      throws IOException {\n    LOG.info(\"Recover RBW replica \" + b);\n\n    ReplicaInfo replicaInfo \u003d getReplicaInfo(b.getBlockPoolId(), b.getBlockId());\n    \n    // check the replica\u0027s state\n    if (replicaInfo.getState() !\u003d ReplicaState.RBW) {\n      throw new ReplicaNotFoundException(\n          ReplicaNotFoundException.NON_RBW_REPLICA + replicaInfo);\n    }\n    ReplicaBeingWritten rbw \u003d (ReplicaBeingWritten)replicaInfo;\n    \n    LOG.info(\"Recovering \" + rbw);\n\n    // Stop the previous writer\n    rbw.stopWriter();\n    rbw.setWriter(Thread.currentThread());\n\n    // check generation stamp\n    long replicaGenerationStamp \u003d rbw.getGenerationStamp();\n    if (replicaGenerationStamp \u003c b.getGenerationStamp() ||\n        replicaGenerationStamp \u003e newGS) {\n      throw new ReplicaNotFoundException(\n          ReplicaNotFoundException.UNEXPECTED_GS_REPLICA + b +\n          \". Expected GS range is [\" + b.getGenerationStamp() + \", \" + \n          newGS + \"].\");\n    }\n    \n    // check replica length\n    if (rbw.getBytesAcked() \u003c minBytesRcvd || rbw.getNumBytes() \u003e maxBytesRcvd){\n      throw new ReplicaNotFoundException(\"Unmatched length replica \" + \n          replicaInfo + \": BytesAcked \u003d \" + rbw.getBytesAcked() + \n          \" BytesRcvd \u003d \" + rbw.getNumBytes() + \" are not in the range of [\" + \n          minBytesRcvd + \", \" + maxBytesRcvd + \"].\");\n    }\n\n    // bump the replica\u0027s generation stamp to newGS\n    bumpReplicaGS(rbw, newGS);\n    \n    return rbw;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
      "extendedDetails": {}
    },
    "bc13dfb1426944ce45293cb8f444239a7406762c": {
      "type": "Ymultichange(Ymovefromfile,Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-3130. Move fsdataset implementation to a package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1308437 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/04/12 10:38 AM",
      "commitName": "bc13dfb1426944ce45293cb8f444239a7406762c",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-3130. Move fsdataset implementation to a package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1308437 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "02/04/12 10:38 AM",
          "commitName": "bc13dfb1426944ce45293cb8f444239a7406762c",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "01/04/12 8:48 PM",
          "commitNameOld": "a4ccb8f504e79802f1b3c69acbcbb00b2343c529",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.58,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,43 @@\n-  public synchronized ReplicaInPipelineInterface recoverRbw(ExtendedBlock b,\n+  public synchronized ReplicaInPipeline recoverRbw(ExtendedBlock b,\n       long newGS, long minBytesRcvd, long maxBytesRcvd)\n       throws IOException {\n-    DataNode.LOG.info(\"Recover the RBW replica \" + b);\n+    LOG.info(\"Recover the RBW replica \" + b);\n \n     ReplicaInfo replicaInfo \u003d getReplicaInfo(b.getBlockPoolId(), b.getBlockId());\n     \n     // check the replica\u0027s state\n     if (replicaInfo.getState() !\u003d ReplicaState.RBW) {\n       throw new ReplicaNotFoundException(\n           ReplicaNotFoundException.NON_RBW_REPLICA + replicaInfo);\n     }\n     ReplicaBeingWritten rbw \u003d (ReplicaBeingWritten)replicaInfo;\n     \n-    DataNode.LOG.info(\"Recovering replica \" + rbw);\n+    LOG.info(\"Recovering replica \" + rbw);\n \n     // Stop the previous writer\n     rbw.stopWriter();\n     rbw.setWriter(Thread.currentThread());\n \n     // check generation stamp\n     long replicaGenerationStamp \u003d rbw.getGenerationStamp();\n     if (replicaGenerationStamp \u003c b.getGenerationStamp() ||\n         replicaGenerationStamp \u003e newGS) {\n       throw new ReplicaNotFoundException(\n           ReplicaNotFoundException.UNEXPECTED_GS_REPLICA + b +\n           \". Expected GS range is [\" + b.getGenerationStamp() + \", \" + \n           newGS + \"].\");\n     }\n     \n     // check replica length\n     if (rbw.getBytesAcked() \u003c minBytesRcvd || rbw.getNumBytes() \u003e maxBytesRcvd){\n       throw new ReplicaNotFoundException(\"Unmatched length replica \" + \n           replicaInfo + \": BytesAcked \u003d \" + rbw.getBytesAcked() + \n           \" BytesRcvd \u003d \" + rbw.getNumBytes() + \" are not in the range of [\" + \n           minBytesRcvd + \", \" + maxBytesRcvd + \"].\");\n     }\n \n     // bump the replica\u0027s generation stamp to newGS\n     bumpReplicaGS(rbw, newGS);\n     \n     return rbw;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized ReplicaInPipeline recoverRbw(ExtendedBlock b,\n      long newGS, long minBytesRcvd, long maxBytesRcvd)\n      throws IOException {\n    LOG.info(\"Recover the RBW replica \" + b);\n\n    ReplicaInfo replicaInfo \u003d getReplicaInfo(b.getBlockPoolId(), b.getBlockId());\n    \n    // check the replica\u0027s state\n    if (replicaInfo.getState() !\u003d ReplicaState.RBW) {\n      throw new ReplicaNotFoundException(\n          ReplicaNotFoundException.NON_RBW_REPLICA + replicaInfo);\n    }\n    ReplicaBeingWritten rbw \u003d (ReplicaBeingWritten)replicaInfo;\n    \n    LOG.info(\"Recovering replica \" + rbw);\n\n    // Stop the previous writer\n    rbw.stopWriter();\n    rbw.setWriter(Thread.currentThread());\n\n    // check generation stamp\n    long replicaGenerationStamp \u003d rbw.getGenerationStamp();\n    if (replicaGenerationStamp \u003c b.getGenerationStamp() ||\n        replicaGenerationStamp \u003e newGS) {\n      throw new ReplicaNotFoundException(\n          ReplicaNotFoundException.UNEXPECTED_GS_REPLICA + b +\n          \". Expected GS range is [\" + b.getGenerationStamp() + \", \" + \n          newGS + \"].\");\n    }\n    \n    // check replica length\n    if (rbw.getBytesAcked() \u003c minBytesRcvd || rbw.getNumBytes() \u003e maxBytesRcvd){\n      throw new ReplicaNotFoundException(\"Unmatched length replica \" + \n          replicaInfo + \": BytesAcked \u003d \" + rbw.getBytesAcked() + \n          \" BytesRcvd \u003d \" + rbw.getNumBytes() + \" are not in the range of [\" + \n          minBytesRcvd + \", \" + maxBytesRcvd + \"].\");\n    }\n\n    // bump the replica\u0027s generation stamp to newGS\n    bumpReplicaGS(rbw, newGS);\n    \n    return rbw;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
            "oldMethodName": "recoverRbw",
            "newMethodName": "recoverRbw"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-3130. Move fsdataset implementation to a package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1308437 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "02/04/12 10:38 AM",
          "commitName": "bc13dfb1426944ce45293cb8f444239a7406762c",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "01/04/12 8:48 PM",
          "commitNameOld": "a4ccb8f504e79802f1b3c69acbcbb00b2343c529",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.58,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,43 @@\n-  public synchronized ReplicaInPipelineInterface recoverRbw(ExtendedBlock b,\n+  public synchronized ReplicaInPipeline recoverRbw(ExtendedBlock b,\n       long newGS, long minBytesRcvd, long maxBytesRcvd)\n       throws IOException {\n-    DataNode.LOG.info(\"Recover the RBW replica \" + b);\n+    LOG.info(\"Recover the RBW replica \" + b);\n \n     ReplicaInfo replicaInfo \u003d getReplicaInfo(b.getBlockPoolId(), b.getBlockId());\n     \n     // check the replica\u0027s state\n     if (replicaInfo.getState() !\u003d ReplicaState.RBW) {\n       throw new ReplicaNotFoundException(\n           ReplicaNotFoundException.NON_RBW_REPLICA + replicaInfo);\n     }\n     ReplicaBeingWritten rbw \u003d (ReplicaBeingWritten)replicaInfo;\n     \n-    DataNode.LOG.info(\"Recovering replica \" + rbw);\n+    LOG.info(\"Recovering replica \" + rbw);\n \n     // Stop the previous writer\n     rbw.stopWriter();\n     rbw.setWriter(Thread.currentThread());\n \n     // check generation stamp\n     long replicaGenerationStamp \u003d rbw.getGenerationStamp();\n     if (replicaGenerationStamp \u003c b.getGenerationStamp() ||\n         replicaGenerationStamp \u003e newGS) {\n       throw new ReplicaNotFoundException(\n           ReplicaNotFoundException.UNEXPECTED_GS_REPLICA + b +\n           \". Expected GS range is [\" + b.getGenerationStamp() + \", \" + \n           newGS + \"].\");\n     }\n     \n     // check replica length\n     if (rbw.getBytesAcked() \u003c minBytesRcvd || rbw.getNumBytes() \u003e maxBytesRcvd){\n       throw new ReplicaNotFoundException(\"Unmatched length replica \" + \n           replicaInfo + \": BytesAcked \u003d \" + rbw.getBytesAcked() + \n           \" BytesRcvd \u003d \" + rbw.getNumBytes() + \" are not in the range of [\" + \n           minBytesRcvd + \", \" + maxBytesRcvd + \"].\");\n     }\n \n     // bump the replica\u0027s generation stamp to newGS\n     bumpReplicaGS(rbw, newGS);\n     \n     return rbw;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized ReplicaInPipeline recoverRbw(ExtendedBlock b,\n      long newGS, long minBytesRcvd, long maxBytesRcvd)\n      throws IOException {\n    LOG.info(\"Recover the RBW replica \" + b);\n\n    ReplicaInfo replicaInfo \u003d getReplicaInfo(b.getBlockPoolId(), b.getBlockId());\n    \n    // check the replica\u0027s state\n    if (replicaInfo.getState() !\u003d ReplicaState.RBW) {\n      throw new ReplicaNotFoundException(\n          ReplicaNotFoundException.NON_RBW_REPLICA + replicaInfo);\n    }\n    ReplicaBeingWritten rbw \u003d (ReplicaBeingWritten)replicaInfo;\n    \n    LOG.info(\"Recovering replica \" + rbw);\n\n    // Stop the previous writer\n    rbw.stopWriter();\n    rbw.setWriter(Thread.currentThread());\n\n    // check generation stamp\n    long replicaGenerationStamp \u003d rbw.getGenerationStamp();\n    if (replicaGenerationStamp \u003c b.getGenerationStamp() ||\n        replicaGenerationStamp \u003e newGS) {\n      throw new ReplicaNotFoundException(\n          ReplicaNotFoundException.UNEXPECTED_GS_REPLICA + b +\n          \". Expected GS range is [\" + b.getGenerationStamp() + \", \" + \n          newGS + \"].\");\n    }\n    \n    // check replica length\n    if (rbw.getBytesAcked() \u003c minBytesRcvd || rbw.getNumBytes() \u003e maxBytesRcvd){\n      throw new ReplicaNotFoundException(\"Unmatched length replica \" + \n          replicaInfo + \": BytesAcked \u003d \" + rbw.getBytesAcked() + \n          \" BytesRcvd \u003d \" + rbw.getNumBytes() + \" are not in the range of [\" + \n          minBytesRcvd + \", \" + maxBytesRcvd + \"].\");\n    }\n\n    // bump the replica\u0027s generation stamp to newGS\n    bumpReplicaGS(rbw, newGS);\n    \n    return rbw;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
          "extendedDetails": {
            "oldValue": "ReplicaInPipelineInterface",
            "newValue": "ReplicaInPipeline"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-3130. Move fsdataset implementation to a package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1308437 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "02/04/12 10:38 AM",
          "commitName": "bc13dfb1426944ce45293cb8f444239a7406762c",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "01/04/12 8:48 PM",
          "commitNameOld": "a4ccb8f504e79802f1b3c69acbcbb00b2343c529",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.58,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,43 @@\n-  public synchronized ReplicaInPipelineInterface recoverRbw(ExtendedBlock b,\n+  public synchronized ReplicaInPipeline recoverRbw(ExtendedBlock b,\n       long newGS, long minBytesRcvd, long maxBytesRcvd)\n       throws IOException {\n-    DataNode.LOG.info(\"Recover the RBW replica \" + b);\n+    LOG.info(\"Recover the RBW replica \" + b);\n \n     ReplicaInfo replicaInfo \u003d getReplicaInfo(b.getBlockPoolId(), b.getBlockId());\n     \n     // check the replica\u0027s state\n     if (replicaInfo.getState() !\u003d ReplicaState.RBW) {\n       throw new ReplicaNotFoundException(\n           ReplicaNotFoundException.NON_RBW_REPLICA + replicaInfo);\n     }\n     ReplicaBeingWritten rbw \u003d (ReplicaBeingWritten)replicaInfo;\n     \n-    DataNode.LOG.info(\"Recovering replica \" + rbw);\n+    LOG.info(\"Recovering replica \" + rbw);\n \n     // Stop the previous writer\n     rbw.stopWriter();\n     rbw.setWriter(Thread.currentThread());\n \n     // check generation stamp\n     long replicaGenerationStamp \u003d rbw.getGenerationStamp();\n     if (replicaGenerationStamp \u003c b.getGenerationStamp() ||\n         replicaGenerationStamp \u003e newGS) {\n       throw new ReplicaNotFoundException(\n           ReplicaNotFoundException.UNEXPECTED_GS_REPLICA + b +\n           \". Expected GS range is [\" + b.getGenerationStamp() + \", \" + \n           newGS + \"].\");\n     }\n     \n     // check replica length\n     if (rbw.getBytesAcked() \u003c minBytesRcvd || rbw.getNumBytes() \u003e maxBytesRcvd){\n       throw new ReplicaNotFoundException(\"Unmatched length replica \" + \n           replicaInfo + \": BytesAcked \u003d \" + rbw.getBytesAcked() + \n           \" BytesRcvd \u003d \" + rbw.getNumBytes() + \" are not in the range of [\" + \n           minBytesRcvd + \", \" + maxBytesRcvd + \"].\");\n     }\n \n     // bump the replica\u0027s generation stamp to newGS\n     bumpReplicaGS(rbw, newGS);\n     \n     return rbw;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized ReplicaInPipeline recoverRbw(ExtendedBlock b,\n      long newGS, long minBytesRcvd, long maxBytesRcvd)\n      throws IOException {\n    LOG.info(\"Recover the RBW replica \" + b);\n\n    ReplicaInfo replicaInfo \u003d getReplicaInfo(b.getBlockPoolId(), b.getBlockId());\n    \n    // check the replica\u0027s state\n    if (replicaInfo.getState() !\u003d ReplicaState.RBW) {\n      throw new ReplicaNotFoundException(\n          ReplicaNotFoundException.NON_RBW_REPLICA + replicaInfo);\n    }\n    ReplicaBeingWritten rbw \u003d (ReplicaBeingWritten)replicaInfo;\n    \n    LOG.info(\"Recovering replica \" + rbw);\n\n    // Stop the previous writer\n    rbw.stopWriter();\n    rbw.setWriter(Thread.currentThread());\n\n    // check generation stamp\n    long replicaGenerationStamp \u003d rbw.getGenerationStamp();\n    if (replicaGenerationStamp \u003c b.getGenerationStamp() ||\n        replicaGenerationStamp \u003e newGS) {\n      throw new ReplicaNotFoundException(\n          ReplicaNotFoundException.UNEXPECTED_GS_REPLICA + b +\n          \". Expected GS range is [\" + b.getGenerationStamp() + \", \" + \n          newGS + \"].\");\n    }\n    \n    // check replica length\n    if (rbw.getBytesAcked() \u003c minBytesRcvd || rbw.getNumBytes() \u003e maxBytesRcvd){\n      throw new ReplicaNotFoundException(\"Unmatched length replica \" + \n          replicaInfo + \": BytesAcked \u003d \" + rbw.getBytesAcked() + \n          \" BytesRcvd \u003d \" + rbw.getNumBytes() + \" are not in the range of [\" + \n          minBytesRcvd + \", \" + maxBytesRcvd + \"].\");\n    }\n\n    // bump the replica\u0027s generation stamp to newGS\n    bumpReplicaGS(rbw, newGS);\n    \n    return rbw;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized ReplicaInPipelineInterface recoverRbw(ExtendedBlock b,\n      long newGS, long minBytesRcvd, long maxBytesRcvd)\n      throws IOException {\n    DataNode.LOG.info(\"Recover the RBW replica \" + b);\n\n    ReplicaInfo replicaInfo \u003d getReplicaInfo(b.getBlockPoolId(), b.getBlockId());\n    \n    // check the replica\u0027s state\n    if (replicaInfo.getState() !\u003d ReplicaState.RBW) {\n      throw new ReplicaNotFoundException(\n          ReplicaNotFoundException.NON_RBW_REPLICA + replicaInfo);\n    }\n    ReplicaBeingWritten rbw \u003d (ReplicaBeingWritten)replicaInfo;\n    \n    DataNode.LOG.info(\"Recovering replica \" + rbw);\n\n    // Stop the previous writer\n    rbw.stopWriter();\n    rbw.setWriter(Thread.currentThread());\n\n    // check generation stamp\n    long replicaGenerationStamp \u003d rbw.getGenerationStamp();\n    if (replicaGenerationStamp \u003c b.getGenerationStamp() ||\n        replicaGenerationStamp \u003e newGS) {\n      throw new ReplicaNotFoundException(\n          ReplicaNotFoundException.UNEXPECTED_GS_REPLICA + b +\n          \". Expected GS range is [\" + b.getGenerationStamp() + \", \" + \n          newGS + \"].\");\n    }\n    \n    // check replica length\n    if (rbw.getBytesAcked() \u003c minBytesRcvd || rbw.getNumBytes() \u003e maxBytesRcvd){\n      throw new ReplicaNotFoundException(\"Unmatched length replica \" + \n          replicaInfo + \": BytesAcked \u003d \" + rbw.getBytesAcked() + \n          \" BytesRcvd \u003d \" + rbw.getNumBytes() + \" are not in the range of [\" + \n          minBytesRcvd + \", \" + maxBytesRcvd + \"].\");\n    }\n\n    // bump the replica\u0027s generation stamp to newGS\n    bumpReplicaGS(rbw, newGS);\n    \n    return rbw;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized ReplicaInPipelineInterface recoverRbw(ExtendedBlock b,\n      long newGS, long minBytesRcvd, long maxBytesRcvd)\n      throws IOException {\n    DataNode.LOG.info(\"Recover the RBW replica \" + b);\n\n    ReplicaInfo replicaInfo \u003d getReplicaInfo(b.getBlockPoolId(), b.getBlockId());\n    \n    // check the replica\u0027s state\n    if (replicaInfo.getState() !\u003d ReplicaState.RBW) {\n      throw new ReplicaNotFoundException(\n          ReplicaNotFoundException.NON_RBW_REPLICA + replicaInfo);\n    }\n    ReplicaBeingWritten rbw \u003d (ReplicaBeingWritten)replicaInfo;\n    \n    DataNode.LOG.info(\"Recovering replica \" + rbw);\n\n    // Stop the previous writer\n    rbw.stopWriter();\n    rbw.setWriter(Thread.currentThread());\n\n    // check generation stamp\n    long replicaGenerationStamp \u003d rbw.getGenerationStamp();\n    if (replicaGenerationStamp \u003c b.getGenerationStamp() ||\n        replicaGenerationStamp \u003e newGS) {\n      throw new ReplicaNotFoundException(\n          ReplicaNotFoundException.UNEXPECTED_GS_REPLICA + b +\n          \". Expected GS range is [\" + b.getGenerationStamp() + \", \" + \n          newGS + \"].\");\n    }\n    \n    // check replica length\n    if (rbw.getBytesAcked() \u003c minBytesRcvd || rbw.getNumBytes() \u003e maxBytesRcvd){\n      throw new ReplicaNotFoundException(\"Unmatched length replica \" + \n          replicaInfo + \": BytesAcked \u003d \" + rbw.getBytesAcked() + \n          \" BytesRcvd \u003d \" + rbw.getNumBytes() + \" are not in the range of [\" + \n          minBytesRcvd + \", \" + maxBytesRcvd + \"].\");\n    }\n\n    // bump the replica\u0027s generation stamp to newGS\n    bumpReplicaGS(rbw, newGS);\n    \n    return rbw;\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,43 @@\n+  public synchronized ReplicaInPipelineInterface recoverRbw(ExtendedBlock b,\n+      long newGS, long minBytesRcvd, long maxBytesRcvd)\n+      throws IOException {\n+    DataNode.LOG.info(\"Recover the RBW replica \" + b);\n+\n+    ReplicaInfo replicaInfo \u003d getReplicaInfo(b.getBlockPoolId(), b.getBlockId());\n+    \n+    // check the replica\u0027s state\n+    if (replicaInfo.getState() !\u003d ReplicaState.RBW) {\n+      throw new ReplicaNotFoundException(\n+          ReplicaNotFoundException.NON_RBW_REPLICA + replicaInfo);\n+    }\n+    ReplicaBeingWritten rbw \u003d (ReplicaBeingWritten)replicaInfo;\n+    \n+    DataNode.LOG.info(\"Recovering replica \" + rbw);\n+\n+    // Stop the previous writer\n+    rbw.stopWriter();\n+    rbw.setWriter(Thread.currentThread());\n+\n+    // check generation stamp\n+    long replicaGenerationStamp \u003d rbw.getGenerationStamp();\n+    if (replicaGenerationStamp \u003c b.getGenerationStamp() ||\n+        replicaGenerationStamp \u003e newGS) {\n+      throw new ReplicaNotFoundException(\n+          ReplicaNotFoundException.UNEXPECTED_GS_REPLICA + b +\n+          \". Expected GS range is [\" + b.getGenerationStamp() + \", \" + \n+          newGS + \"].\");\n+    }\n+    \n+    // check replica length\n+    if (rbw.getBytesAcked() \u003c minBytesRcvd || rbw.getNumBytes() \u003e maxBytesRcvd){\n+      throw new ReplicaNotFoundException(\"Unmatched length replica \" + \n+          replicaInfo + \": BytesAcked \u003d \" + rbw.getBytesAcked() + \n+          \" BytesRcvd \u003d \" + rbw.getNumBytes() + \" are not in the range of [\" + \n+          minBytesRcvd + \", \" + maxBytesRcvd + \"].\");\n+    }\n+\n+    // bump the replica\u0027s generation stamp to newGS\n+    bumpReplicaGS(rbw, newGS);\n+    \n+    return rbw;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized ReplicaInPipelineInterface recoverRbw(ExtendedBlock b,\n      long newGS, long minBytesRcvd, long maxBytesRcvd)\n      throws IOException {\n    DataNode.LOG.info(\"Recover the RBW replica \" + b);\n\n    ReplicaInfo replicaInfo \u003d getReplicaInfo(b.getBlockPoolId(), b.getBlockId());\n    \n    // check the replica\u0027s state\n    if (replicaInfo.getState() !\u003d ReplicaState.RBW) {\n      throw new ReplicaNotFoundException(\n          ReplicaNotFoundException.NON_RBW_REPLICA + replicaInfo);\n    }\n    ReplicaBeingWritten rbw \u003d (ReplicaBeingWritten)replicaInfo;\n    \n    DataNode.LOG.info(\"Recovering replica \" + rbw);\n\n    // Stop the previous writer\n    rbw.stopWriter();\n    rbw.setWriter(Thread.currentThread());\n\n    // check generation stamp\n    long replicaGenerationStamp \u003d rbw.getGenerationStamp();\n    if (replicaGenerationStamp \u003c b.getGenerationStamp() ||\n        replicaGenerationStamp \u003e newGS) {\n      throw new ReplicaNotFoundException(\n          ReplicaNotFoundException.UNEXPECTED_GS_REPLICA + b +\n          \". Expected GS range is [\" + b.getGenerationStamp() + \", \" + \n          newGS + \"].\");\n    }\n    \n    // check replica length\n    if (rbw.getBytesAcked() \u003c minBytesRcvd || rbw.getNumBytes() \u003e maxBytesRcvd){\n      throw new ReplicaNotFoundException(\"Unmatched length replica \" + \n          replicaInfo + \": BytesAcked \u003d \" + rbw.getBytesAcked() + \n          \" BytesRcvd \u003d \" + rbw.getNumBytes() + \" are not in the range of [\" + \n          minBytesRcvd + \", \" + maxBytesRcvd + \"].\");\n    }\n\n    // bump the replica\u0027s generation stamp to newGS\n    bumpReplicaGS(rbw, newGS);\n    \n    return rbw;\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java"
    }
  }
}