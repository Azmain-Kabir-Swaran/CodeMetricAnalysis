{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LineReader.java",
  "functionName": "readLine",
  "functionId": "readLine___str-Text__maxLineLength-int__maxBytesToConsume-int",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/LineReader.java",
  "functionStartLine": 168,
  "functionEndLine": 175,
  "numCommitsSeen": 17,
  "timeTaken": 889,
  "changeHistory": [
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "223f6511189caa11b08d68e85401668a2c00602a",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "223f6511189caa11b08d68e85401668a2c00602a": "Ybodychange",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public int readLine(Text str, int maxLineLength,\n                      int maxBytesToConsume) throws IOException {\n    if (this.recordDelimiterBytes !\u003d null) {\n      return readCustomLine(str, maxLineLength, maxBytesToConsume);\n    } else {\n      return readDefaultLine(str, maxLineLength, maxBytesToConsume);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/LineReader.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/util/LineReader.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/LineReader.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public int readLine(Text str, int maxLineLength,\n                      int maxBytesToConsume) throws IOException {\n    if (this.recordDelimiterBytes !\u003d null) {\n      return readCustomLine(str, maxLineLength, maxBytesToConsume);\n    } else {\n      return readDefaultLine(str, maxLineLength, maxBytesToConsume);\n    }\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/util/LineReader.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/util/LineReader.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/util/LineReader.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public int readLine(Text str, int maxLineLength,\n                      int maxBytesToConsume) throws IOException {\n    if (this.recordDelimiterBytes !\u003d null) {\n      return readCustomLine(str, maxLineLength, maxBytesToConsume);\n    } else {\n      return readDefaultLine(str, maxLineLength, maxBytesToConsume);\n    }\n  }",
      "path": "common/src/java/org/apache/hadoop/util/LineReader.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/util/LineReader.java",
        "newPath": "common/src/java/org/apache/hadoop/util/LineReader.java"
      }
    },
    "223f6511189caa11b08d68e85401668a2c00602a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7096. Allow setting of end-of-record delimiter for TextInputFormat. Contributed by Ahmed Radwan.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1068729 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/02/11 5:41 PM",
      "commitName": "223f6511189caa11b08d68e85401668a2c00602a",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/10 2:34 PM",
      "commitNameOld": "6378822a67c0baa502d22201f5c2b478cbe1261c",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 242.17,
      "commitsBetweenForRepo": 190,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,8 @@\n   public int readLine(Text str, int maxLineLength,\n                       int maxBytesToConsume) throws IOException {\n-    /* We\u0027re reading data from in, but the head of the stream may be\n-     * already buffered in buffer, so we have several cases:\n-     * 1. No newline characters are in the buffer, so we need to copy\n-     *    everything and read another buffer from the stream.\n-     * 2. An unambiguously terminated line is in buffer, so we just\n-     *    copy to str.\n-     * 3. Ambiguously terminated line is in buffer, i.e. buffer ends\n-     *    in CR.  In this case we copy everything up to CR to str, but\n-     *    we also need to see what follows CR: if it\u0027s LF, then we\n-     *    need consume LF as well, so next call to readLine will read\n-     *    from after that.\n-     * We use a flag prevCharCR to signal if previous character was CR\n-     * and, if it happens to be at the end of the buffer, delay\n-     * consuming it until we have a chance to look at the char that\n-     * follows.\n-     */\n-    str.clear();\n-    int txtLength \u003d 0; //tracks str.getLength(), as an optimization\n-    int newlineLength \u003d 0; //length of terminating newline\n-    boolean prevCharCR \u003d false; //true of prev char was CR\n-    long bytesConsumed \u003d 0;\n-    do {\n-      int startPosn \u003d bufferPosn; //starting from where we left off the last time\n-      if (bufferPosn \u003e\u003d bufferLength) {\n-        startPosn \u003d bufferPosn \u003d 0;\n-        if (prevCharCR)\n-          ++bytesConsumed; //account for CR from previous read\n-        bufferLength \u003d in.read(buffer);\n-        if (bufferLength \u003c\u003d 0)\n-          break; // EOF\n-      }\n-      for (; bufferPosn \u003c bufferLength; ++bufferPosn) { //search for newline\n-        if (buffer[bufferPosn] \u003d\u003d LF) {\n-          newlineLength \u003d (prevCharCR) ? 2 : 1;\n-          ++bufferPosn; // at next invocation proceed from following byte\n-          break;\n-        }\n-        if (prevCharCR) { //CR + notLF, we are at notLF\n-          newlineLength \u003d 1;\n-          break;\n-        }\n-        prevCharCR \u003d (buffer[bufferPosn] \u003d\u003d CR);\n-      }\n-      int readLength \u003d bufferPosn - startPosn;\n-      if (prevCharCR \u0026\u0026 newlineLength \u003d\u003d 0)\n-        --readLength; //CR at the end of the buffer\n-      bytesConsumed +\u003d readLength;\n-      int appendLength \u003d readLength - newlineLength;\n-      if (appendLength \u003e maxLineLength - txtLength) {\n-        appendLength \u003d maxLineLength - txtLength;\n-      }\n-      if (appendLength \u003e 0) {\n-        str.append(buffer, startPosn, appendLength);\n-        txtLength +\u003d appendLength;\n-      }\n-    } while (newlineLength \u003d\u003d 0 \u0026\u0026 bytesConsumed \u003c maxBytesToConsume);\n-\n-    if (bytesConsumed \u003e (long)Integer.MAX_VALUE)\n-      throw new IOException(\"Too many bytes before newline: \" + bytesConsumed);    \n-    return (int)bytesConsumed;\n+    if (this.recordDelimiterBytes !\u003d null) {\n+      return readCustomLine(str, maxLineLength, maxBytesToConsume);\n+    } else {\n+      return readDefaultLine(str, maxLineLength, maxBytesToConsume);\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int readLine(Text str, int maxLineLength,\n                      int maxBytesToConsume) throws IOException {\n    if (this.recordDelimiterBytes !\u003d null) {\n      return readCustomLine(str, maxLineLength, maxBytesToConsume);\n    } else {\n      return readDefaultLine(str, maxLineLength, maxBytesToConsume);\n    }\n  }",
      "path": "src/java/org/apache/hadoop/util/LineReader.java",
      "extendedDetails": {}
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,63 @@\n+  public int readLine(Text str, int maxLineLength,\n+                      int maxBytesToConsume) throws IOException {\n+    /* We\u0027re reading data from in, but the head of the stream may be\n+     * already buffered in buffer, so we have several cases:\n+     * 1. No newline characters are in the buffer, so we need to copy\n+     *    everything and read another buffer from the stream.\n+     * 2. An unambiguously terminated line is in buffer, so we just\n+     *    copy to str.\n+     * 3. Ambiguously terminated line is in buffer, i.e. buffer ends\n+     *    in CR.  In this case we copy everything up to CR to str, but\n+     *    we also need to see what follows CR: if it\u0027s LF, then we\n+     *    need consume LF as well, so next call to readLine will read\n+     *    from after that.\n+     * We use a flag prevCharCR to signal if previous character was CR\n+     * and, if it happens to be at the end of the buffer, delay\n+     * consuming it until we have a chance to look at the char that\n+     * follows.\n+     */\n+    str.clear();\n+    int txtLength \u003d 0; //tracks str.getLength(), as an optimization\n+    int newlineLength \u003d 0; //length of terminating newline\n+    boolean prevCharCR \u003d false; //true of prev char was CR\n+    long bytesConsumed \u003d 0;\n+    do {\n+      int startPosn \u003d bufferPosn; //starting from where we left off the last time\n+      if (bufferPosn \u003e\u003d bufferLength) {\n+        startPosn \u003d bufferPosn \u003d 0;\n+        if (prevCharCR)\n+          ++bytesConsumed; //account for CR from previous read\n+        bufferLength \u003d in.read(buffer);\n+        if (bufferLength \u003c\u003d 0)\n+          break; // EOF\n+      }\n+      for (; bufferPosn \u003c bufferLength; ++bufferPosn) { //search for newline\n+        if (buffer[bufferPosn] \u003d\u003d LF) {\n+          newlineLength \u003d (prevCharCR) ? 2 : 1;\n+          ++bufferPosn; // at next invocation proceed from following byte\n+          break;\n+        }\n+        if (prevCharCR) { //CR + notLF, we are at notLF\n+          newlineLength \u003d 1;\n+          break;\n+        }\n+        prevCharCR \u003d (buffer[bufferPosn] \u003d\u003d CR);\n+      }\n+      int readLength \u003d bufferPosn - startPosn;\n+      if (prevCharCR \u0026\u0026 newlineLength \u003d\u003d 0)\n+        --readLength; //CR at the end of the buffer\n+      bytesConsumed +\u003d readLength;\n+      int appendLength \u003d readLength - newlineLength;\n+      if (appendLength \u003e maxLineLength - txtLength) {\n+        appendLength \u003d maxLineLength - txtLength;\n+      }\n+      if (appendLength \u003e 0) {\n+        str.append(buffer, startPosn, appendLength);\n+        txtLength +\u003d appendLength;\n+      }\n+    } while (newlineLength \u003d\u003d 0 \u0026\u0026 bytesConsumed \u003c maxBytesToConsume);\n+\n+    if (bytesConsumed \u003e (long)Integer.MAX_VALUE)\n+      throw new IOException(\"Too many bytes before newline: \" + bytesConsumed);    \n+    return (int)bytesConsumed;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public int readLine(Text str, int maxLineLength,\n                      int maxBytesToConsume) throws IOException {\n    /* We\u0027re reading data from in, but the head of the stream may be\n     * already buffered in buffer, so we have several cases:\n     * 1. No newline characters are in the buffer, so we need to copy\n     *    everything and read another buffer from the stream.\n     * 2. An unambiguously terminated line is in buffer, so we just\n     *    copy to str.\n     * 3. Ambiguously terminated line is in buffer, i.e. buffer ends\n     *    in CR.  In this case we copy everything up to CR to str, but\n     *    we also need to see what follows CR: if it\u0027s LF, then we\n     *    need consume LF as well, so next call to readLine will read\n     *    from after that.\n     * We use a flag prevCharCR to signal if previous character was CR\n     * and, if it happens to be at the end of the buffer, delay\n     * consuming it until we have a chance to look at the char that\n     * follows.\n     */\n    str.clear();\n    int txtLength \u003d 0; //tracks str.getLength(), as an optimization\n    int newlineLength \u003d 0; //length of terminating newline\n    boolean prevCharCR \u003d false; //true of prev char was CR\n    long bytesConsumed \u003d 0;\n    do {\n      int startPosn \u003d bufferPosn; //starting from where we left off the last time\n      if (bufferPosn \u003e\u003d bufferLength) {\n        startPosn \u003d bufferPosn \u003d 0;\n        if (prevCharCR)\n          ++bytesConsumed; //account for CR from previous read\n        bufferLength \u003d in.read(buffer);\n        if (bufferLength \u003c\u003d 0)\n          break; // EOF\n      }\n      for (; bufferPosn \u003c bufferLength; ++bufferPosn) { //search for newline\n        if (buffer[bufferPosn] \u003d\u003d LF) {\n          newlineLength \u003d (prevCharCR) ? 2 : 1;\n          ++bufferPosn; // at next invocation proceed from following byte\n          break;\n        }\n        if (prevCharCR) { //CR + notLF, we are at notLF\n          newlineLength \u003d 1;\n          break;\n        }\n        prevCharCR \u003d (buffer[bufferPosn] \u003d\u003d CR);\n      }\n      int readLength \u003d bufferPosn - startPosn;\n      if (prevCharCR \u0026\u0026 newlineLength \u003d\u003d 0)\n        --readLength; //CR at the end of the buffer\n      bytesConsumed +\u003d readLength;\n      int appendLength \u003d readLength - newlineLength;\n      if (appendLength \u003e maxLineLength - txtLength) {\n        appendLength \u003d maxLineLength - txtLength;\n      }\n      if (appendLength \u003e 0) {\n        str.append(buffer, startPosn, appendLength);\n        txtLength +\u003d appendLength;\n      }\n    } while (newlineLength \u003d\u003d 0 \u0026\u0026 bytesConsumed \u003c maxBytesToConsume);\n\n    if (bytesConsumed \u003e (long)Integer.MAX_VALUE)\n      throw new IOException(\"Too many bytes before newline: \" + bytesConsumed);    \n    return (int)bytesConsumed;\n  }",
      "path": "src/java/org/apache/hadoop/util/LineReader.java"
    }
  }
}