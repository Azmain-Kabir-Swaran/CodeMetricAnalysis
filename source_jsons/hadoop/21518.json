{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TokenCache.java",
  "functionName": "obtainTokensForNamenodesInternal",
  "functionId": "obtainTokensForNamenodesInternal___fs-FileSystem__credentials-Credentials__conf-Configuration__renewer-String",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/security/TokenCache.java",
  "functionStartLine": 127,
  "functionEndLine": 150,
  "numCommitsSeen": 40,
  "timeTaken": 10463,
  "changeHistory": [
    "1a95a4524a8c6c7be601ce8b92640a6a76164a2c",
    "bb6dde68f19be1885a9e7f7949316a03825b6f3e",
    "8fa10b184e607a33f59e67bd4b1fbe5a2e683941",
    "cfc4ad76a325381119351092ac9e40544141b74a",
    "bc4b1f48d3aba7f7a324ae76ab65a0920b1e609e",
    "f445eb31f19c4e022155a414265694db42fbf243",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a464402cb806da4b12c34d5f83d3e43f2c2b5429",
    "ded6f225a55517deedc2bd502f2b68f1ca2ddee8",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "1a95a4524a8c6c7be601ce8b92640a6a76164a2c": "Ymultichange(Yparameterchange,Ybodychange)",
    "bb6dde68f19be1885a9e7f7949316a03825b6f3e": "Ybodychange",
    "8fa10b184e607a33f59e67bd4b1fbe5a2e683941": "Ybodychange",
    "cfc4ad76a325381119351092ac9e40544141b74a": "Ybodychange",
    "bc4b1f48d3aba7f7a324ae76ab65a0920b1e609e": "Ybodychange",
    "f445eb31f19c4e022155a414265694db42fbf243": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Ymultichange(Ymovefromfile,Ybodychange)",
    "a464402cb806da4b12c34d5f83d3e43f2c2b5429": "Ybodychange",
    "ded6f225a55517deedc2bd502f2b68f1ca2ddee8": "Ybodychange",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1a95a4524a8c6c7be601ce8b92640a6a76164a2c": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-7073. Optimize TokenCache#obtainTokensForNamenodesInternal\n\nSigned-off-by: Akira Ajisaka \u003caajisaka@apache.org\u003e\n",
      "commitDate": "02/05/18 12:14 AM",
      "commitName": "1a95a4524a8c6c7be601ce8b92640a6a76164a2c",
      "commitAuthor": "Bibin A Chundatt",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-7073. Optimize TokenCache#obtainTokensForNamenodesInternal\n\nSigned-off-by: Akira Ajisaka \u003caajisaka@apache.org\u003e\n",
          "commitDate": "02/05/18 12:14 AM",
          "commitName": "1a95a4524a8c6c7be601ce8b92640a6a76164a2c",
          "commitAuthor": "Bibin A Chundatt",
          "commitDateOld": "02/11/17 1:43 AM",
          "commitNameOld": "178751ed8c9d47038acf8616c226f1f52e884feb",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 180.94,
          "commitsBetweenForRepo": 1835,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,24 @@\n-  static void obtainTokensForNamenodesInternal(FileSystem fs, \n-      Credentials credentials, Configuration conf) throws IOException {\n+  static void obtainTokensForNamenodesInternal(FileSystem fs,\n+      Credentials credentials, Configuration conf, String renewer)\n+      throws IOException {\n     // RM skips renewing token with empty renewer\n     String delegTokenRenewer \u003d \"\";\n     if (!isTokenRenewalExcluded(fs, conf)) {\n-      delegTokenRenewer \u003d Master.getMasterPrincipal(conf);\n-      if (delegTokenRenewer \u003d\u003d null || delegTokenRenewer.length() \u003d\u003d 0) {\n+      if (StringUtils.isEmpty(renewer)) {\n         throw new IOException(\n             \"Can\u0027t get Master Kerberos principal for use as renewer\");\n+      } else {\n+        delegTokenRenewer \u003d renewer;\n       }\n     }\n \n     mergeBinaryTokens(credentials, conf);\n \n     final Token\u003c?\u003e tokens[] \u003d fs.addDelegationTokens(delegTokenRenewer,\n                                                      credentials);\n     if (tokens !\u003d null) {\n       for (Token\u003c?\u003e token : tokens) {\n         LOG.info(\"Got dt for \" + fs.getUri() + \"; \"+token);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static void obtainTokensForNamenodesInternal(FileSystem fs,\n      Credentials credentials, Configuration conf, String renewer)\n      throws IOException {\n    // RM skips renewing token with empty renewer\n    String delegTokenRenewer \u003d \"\";\n    if (!isTokenRenewalExcluded(fs, conf)) {\n      if (StringUtils.isEmpty(renewer)) {\n        throw new IOException(\n            \"Can\u0027t get Master Kerberos principal for use as renewer\");\n      } else {\n        delegTokenRenewer \u003d renewer;\n      }\n    }\n\n    mergeBinaryTokens(credentials, conf);\n\n    final Token\u003c?\u003e tokens[] \u003d fs.addDelegationTokens(delegTokenRenewer,\n                                                     credentials);\n    if (tokens !\u003d null) {\n      for (Token\u003c?\u003e token : tokens) {\n        LOG.info(\"Got dt for \" + fs.getUri() + \"; \"+token);\n      }\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/security/TokenCache.java",
          "extendedDetails": {
            "oldValue": "[fs-FileSystem, credentials-Credentials, conf-Configuration]",
            "newValue": "[fs-FileSystem, credentials-Credentials, conf-Configuration, renewer-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-7073. Optimize TokenCache#obtainTokensForNamenodesInternal\n\nSigned-off-by: Akira Ajisaka \u003caajisaka@apache.org\u003e\n",
          "commitDate": "02/05/18 12:14 AM",
          "commitName": "1a95a4524a8c6c7be601ce8b92640a6a76164a2c",
          "commitAuthor": "Bibin A Chundatt",
          "commitDateOld": "02/11/17 1:43 AM",
          "commitNameOld": "178751ed8c9d47038acf8616c226f1f52e884feb",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 180.94,
          "commitsBetweenForRepo": 1835,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,24 @@\n-  static void obtainTokensForNamenodesInternal(FileSystem fs, \n-      Credentials credentials, Configuration conf) throws IOException {\n+  static void obtainTokensForNamenodesInternal(FileSystem fs,\n+      Credentials credentials, Configuration conf, String renewer)\n+      throws IOException {\n     // RM skips renewing token with empty renewer\n     String delegTokenRenewer \u003d \"\";\n     if (!isTokenRenewalExcluded(fs, conf)) {\n-      delegTokenRenewer \u003d Master.getMasterPrincipal(conf);\n-      if (delegTokenRenewer \u003d\u003d null || delegTokenRenewer.length() \u003d\u003d 0) {\n+      if (StringUtils.isEmpty(renewer)) {\n         throw new IOException(\n             \"Can\u0027t get Master Kerberos principal for use as renewer\");\n+      } else {\n+        delegTokenRenewer \u003d renewer;\n       }\n     }\n \n     mergeBinaryTokens(credentials, conf);\n \n     final Token\u003c?\u003e tokens[] \u003d fs.addDelegationTokens(delegTokenRenewer,\n                                                      credentials);\n     if (tokens !\u003d null) {\n       for (Token\u003c?\u003e token : tokens) {\n         LOG.info(\"Got dt for \" + fs.getUri() + \"; \"+token);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static void obtainTokensForNamenodesInternal(FileSystem fs,\n      Credentials credentials, Configuration conf, String renewer)\n      throws IOException {\n    // RM skips renewing token with empty renewer\n    String delegTokenRenewer \u003d \"\";\n    if (!isTokenRenewalExcluded(fs, conf)) {\n      if (StringUtils.isEmpty(renewer)) {\n        throw new IOException(\n            \"Can\u0027t get Master Kerberos principal for use as renewer\");\n      } else {\n        delegTokenRenewer \u003d renewer;\n      }\n    }\n\n    mergeBinaryTokens(credentials, conf);\n\n    final Token\u003c?\u003e tokens[] \u003d fs.addDelegationTokens(delegTokenRenewer,\n                                                     credentials);\n    if (tokens !\u003d null) {\n      for (Token\u003c?\u003e token : tokens) {\n        LOG.info(\"Got dt for \" + fs.getUri() + \"; \"+token);\n      }\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/security/TokenCache.java",
          "extendedDetails": {}
        }
      ]
    },
    "bb6dde68f19be1885a9e7f7949316a03825b6f3e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3021. YARN\u0027s delegation-token handling disallows certain trust setups to operate properly over DistCp. Contributed by Yongjun Zhang\n",
      "commitDate": "16/04/15 7:43 PM",
      "commitName": "bb6dde68f19be1885a9e7f7949316a03825b6f3e",
      "commitAuthor": "Jian He",
      "commitDateOld": "27/03/15 8:08 AM",
      "commitNameOld": "05499b1093ea6ba6a39a1354d67b0a46a2982824",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 20.48,
      "commitsBetweenForRepo": 168,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,22 @@\n   static void obtainTokensForNamenodesInternal(FileSystem fs, \n       Credentials credentials, Configuration conf) throws IOException {\n-    String delegTokenRenewer \u003d Master.getMasterPrincipal(conf);\n-    if (delegTokenRenewer \u003d\u003d null || delegTokenRenewer.length() \u003d\u003d 0) {\n-      throw new IOException(\n-          \"Can\u0027t get Master Kerberos principal for use as renewer\");\n+    // RM skips renewing token with empty renewer\n+    String delegTokenRenewer \u003d \"\";\n+    if (!isTokenRenewalExcluded(fs, conf)) {\n+      delegTokenRenewer \u003d Master.getMasterPrincipal(conf);\n+      if (delegTokenRenewer \u003d\u003d null || delegTokenRenewer.length() \u003d\u003d 0) {\n+        throw new IOException(\n+            \"Can\u0027t get Master Kerberos principal for use as renewer\");\n+      }\n     }\n+\n     mergeBinaryTokens(credentials, conf);\n \n     final Token\u003c?\u003e tokens[] \u003d fs.addDelegationTokens(delegTokenRenewer,\n                                                      credentials);\n     if (tokens !\u003d null) {\n       for (Token\u003c?\u003e token : tokens) {\n         LOG.info(\"Got dt for \" + fs.getUri() + \"; \"+token);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static void obtainTokensForNamenodesInternal(FileSystem fs, \n      Credentials credentials, Configuration conf) throws IOException {\n    // RM skips renewing token with empty renewer\n    String delegTokenRenewer \u003d \"\";\n    if (!isTokenRenewalExcluded(fs, conf)) {\n      delegTokenRenewer \u003d Master.getMasterPrincipal(conf);\n      if (delegTokenRenewer \u003d\u003d null || delegTokenRenewer.length() \u003d\u003d 0) {\n        throw new IOException(\n            \"Can\u0027t get Master Kerberos principal for use as renewer\");\n      }\n    }\n\n    mergeBinaryTokens(credentials, conf);\n\n    final Token\u003c?\u003e tokens[] \u003d fs.addDelegationTokens(delegTokenRenewer,\n                                                     credentials);\n    if (tokens !\u003d null) {\n      for (Token\u003c?\u003e token : tokens) {\n        LOG.info(\"Got dt for \" + fs.getUri() + \"; \"+token);\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/security/TokenCache.java",
      "extendedDetails": {}
    },
    "8fa10b184e607a33f59e67bd4b1fbe5a2e683941": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7967. Need generalized multi-token filesystem support (daryn)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1374271 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/08/12 7:05 AM",
      "commitName": "8fa10b184e607a33f59e67bd4b1fbe5a2e683941",
      "commitAuthor": "Daryn Sharp",
      "commitDateOld": "11/05/12 8:00 AM",
      "commitNameOld": "aea890f7d215d97feec873228158daefa2e63217",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 97.96,
      "commitsBetweenForRepo": 496,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,17 @@\n   static void obtainTokensForNamenodesInternal(FileSystem fs, \n       Credentials credentials, Configuration conf) throws IOException {\n     String delegTokenRenewer \u003d Master.getMasterPrincipal(conf);\n     if (delegTokenRenewer \u003d\u003d null || delegTokenRenewer.length() \u003d\u003d 0) {\n       throw new IOException(\n           \"Can\u0027t get Master Kerberos principal for use as renewer\");\n     }\n     mergeBinaryTokens(credentials, conf);\n \n-    String fsName \u003d fs.getCanonicalServiceName();\n-    if (TokenCache.getDelegationToken(credentials, fsName) \u003d\u003d null) {\n-      List\u003cToken\u003c?\u003e\u003e tokens \u003d\n-          fs.getDelegationTokens(delegTokenRenewer, credentials);\n-      if (tokens !\u003d null) {\n-        for (Token\u003c?\u003e token : tokens) {\n-          credentials.addToken(token.getService(), token);\n-          LOG.info(\"Got dt for \" + fs.getUri() + \";uri\u003d\"+ fsName + \n-              \";t.service\u003d\"+token.getService());\n-        }\n-      }\n-      //Call getDelegationToken as well for now - for FS implementations\n-      // which may not have implmented getDelegationTokens (hftp)\n-      if (tokens \u003d\u003d null || tokens.size() \u003d\u003d 0) {\n-        Token\u003c?\u003e token \u003d fs.getDelegationToken(delegTokenRenewer);\n-        if (token !\u003d null) {\n-          credentials.addToken(token.getService(), token);\n-          LOG.info(\"Got dt for \" + fs.getUri() + \";uri\u003d\" + fsName\n-              + \";t.service\u003d\" + token.getService());\n-        }\n+    final Token\u003c?\u003e tokens[] \u003d fs.addDelegationTokens(delegTokenRenewer,\n+                                                     credentials);\n+    if (tokens !\u003d null) {\n+      for (Token\u003c?\u003e token : tokens) {\n+        LOG.info(\"Got dt for \" + fs.getUri() + \"; \"+token);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static void obtainTokensForNamenodesInternal(FileSystem fs, \n      Credentials credentials, Configuration conf) throws IOException {\n    String delegTokenRenewer \u003d Master.getMasterPrincipal(conf);\n    if (delegTokenRenewer \u003d\u003d null || delegTokenRenewer.length() \u003d\u003d 0) {\n      throw new IOException(\n          \"Can\u0027t get Master Kerberos principal for use as renewer\");\n    }\n    mergeBinaryTokens(credentials, conf);\n\n    final Token\u003c?\u003e tokens[] \u003d fs.addDelegationTokens(delegTokenRenewer,\n                                                     credentials);\n    if (tokens !\u003d null) {\n      for (Token\u003c?\u003e token : tokens) {\n        LOG.info(\"Got dt for \" + fs.getUri() + \"; \"+token);\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/security/TokenCache.java",
      "extendedDetails": {}
    },
    "cfc4ad76a325381119351092ac9e40544141b74a": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3849. Change TokenCache\u0027s reading of the binary token file  (Daryn Sharp via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1245099 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/02/12 9:49 AM",
      "commitName": "cfc4ad76a325381119351092ac9e40544141b74a",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "03/02/12 3:48 PM",
      "commitNameOld": "b03023110805a3479ef6b42f7c095de3f1a883e2",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 12.75,
      "commitsBetweenForRepo": 97,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,32 @@\n   static void obtainTokensForNamenodesInternal(FileSystem fs, \n       Credentials credentials, Configuration conf) throws IOException {\n     String delegTokenRenewer \u003d Master.getMasterPrincipal(conf);\n     if (delegTokenRenewer \u003d\u003d null || delegTokenRenewer.length() \u003d\u003d 0) {\n       throw new IOException(\n           \"Can\u0027t get Master Kerberos principal for use as renewer\");\n     }\n-    boolean readFile \u003d true;\n+    mergeBinaryTokens(credentials, conf);\n \n     String fsName \u003d fs.getCanonicalServiceName();\n     if (TokenCache.getDelegationToken(credentials, fsName) \u003d\u003d null) {\n-      //TODO: Need to come up with a better place to put\n-      //this block of code to do with reading the file\n-      if (readFile) {\n-        readFile \u003d false;\n-        String binaryTokenFilename \u003d\n-          conf.get(MRJobConfig.MAPREDUCE_JOB_CREDENTIALS_BINARY);\n-        if (binaryTokenFilename !\u003d null) {\n-          Credentials binary;\n-          try {\n-            binary \u003d Credentials.readTokenStorageFile(\n-                new Path(\"file:///\" +  binaryTokenFilename), conf);\n-          } catch (IOException e) {\n-            throw new RuntimeException(e);\n-          }\n-          credentials.addAll(binary);\n-        }\n-        if (TokenCache.getDelegationToken(credentials, fsName) !\u003d null) {\n-          LOG.debug(\"DT for \" + fsName  + \" is already present\");\n-          return;\n-        }\n-      }\n       List\u003cToken\u003c?\u003e\u003e tokens \u003d\n           fs.getDelegationTokens(delegTokenRenewer, credentials);\n       if (tokens !\u003d null) {\n         for (Token\u003c?\u003e token : tokens) {\n           credentials.addToken(token.getService(), token);\n           LOG.info(\"Got dt for \" + fs.getUri() + \";uri\u003d\"+ fsName + \n               \";t.service\u003d\"+token.getService());\n         }\n       }\n       //Call getDelegationToken as well for now - for FS implementations\n       // which may not have implmented getDelegationTokens (hftp)\n       if (tokens \u003d\u003d null || tokens.size() \u003d\u003d 0) {\n         Token\u003c?\u003e token \u003d fs.getDelegationToken(delegTokenRenewer);\n         if (token !\u003d null) {\n           credentials.addToken(token.getService(), token);\n           LOG.info(\"Got dt for \" + fs.getUri() + \";uri\u003d\" + fsName\n               + \";t.service\u003d\" + token.getService());\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static void obtainTokensForNamenodesInternal(FileSystem fs, \n      Credentials credentials, Configuration conf) throws IOException {\n    String delegTokenRenewer \u003d Master.getMasterPrincipal(conf);\n    if (delegTokenRenewer \u003d\u003d null || delegTokenRenewer.length() \u003d\u003d 0) {\n      throw new IOException(\n          \"Can\u0027t get Master Kerberos principal for use as renewer\");\n    }\n    mergeBinaryTokens(credentials, conf);\n\n    String fsName \u003d fs.getCanonicalServiceName();\n    if (TokenCache.getDelegationToken(credentials, fsName) \u003d\u003d null) {\n      List\u003cToken\u003c?\u003e\u003e tokens \u003d\n          fs.getDelegationTokens(delegTokenRenewer, credentials);\n      if (tokens !\u003d null) {\n        for (Token\u003c?\u003e token : tokens) {\n          credentials.addToken(token.getService(), token);\n          LOG.info(\"Got dt for \" + fs.getUri() + \";uri\u003d\"+ fsName + \n              \";t.service\u003d\"+token.getService());\n        }\n      }\n      //Call getDelegationToken as well for now - for FS implementations\n      // which may not have implmented getDelegationTokens (hftp)\n      if (tokens \u003d\u003d null || tokens.size() \u003d\u003d 0) {\n        Token\u003c?\u003e token \u003d fs.getDelegationToken(delegTokenRenewer);\n        if (token !\u003d null) {\n          credentials.addToken(token.getService(), token);\n          LOG.info(\"Got dt for \" + fs.getUri() + \";uri\u003d\" + fsName\n              + \";t.service\u003d\" + token.getService());\n        }\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/security/TokenCache.java",
      "extendedDetails": {}
    },
    "bc4b1f48d3aba7f7a324ae76ab65a0920b1e609e": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3380. Token infrastructure for running clients which are not kerberos authenticated. (mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1229855 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/01/12 5:50 PM",
      "commitName": "bc4b1f48d3aba7f7a324ae76ab65a0920b1e609e",
      "commitAuthor": "Mahadev Konar",
      "commitDateOld": "09/01/12 5:38 PM",
      "commitNameOld": "48150cddaf9a559a7ba0b004be249a30d9289615",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 1.01,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,53 @@\n   static void obtainTokensForNamenodesInternal(FileSystem fs, \n       Credentials credentials, Configuration conf) throws IOException {\n     String delegTokenRenewer \u003d Master.getMasterPrincipal(conf);\n     if (delegTokenRenewer \u003d\u003d null || delegTokenRenewer.length() \u003d\u003d 0) {\n       throw new IOException(\n-          \"Can\u0027t get JobTracker Kerberos principal for use as renewer\");\n+          \"Can\u0027t get Master Kerberos principal for use as renewer\");\n     }\n     boolean readFile \u003d true;\n \n     String fsName \u003d fs.getCanonicalServiceName();\n     if (TokenCache.getDelegationToken(credentials, fsName) \u003d\u003d null) {\n       //TODO: Need to come up with a better place to put\n       //this block of code to do with reading the file\n       if (readFile) {\n         readFile \u003d false;\n         String binaryTokenFilename \u003d\n-          conf.get(\"mapreduce.job.credentials.binary\");\n+          conf.get(MRJobConfig.MAPREDUCE_JOB_CREDENTIALS_BINARY);\n         if (binaryTokenFilename !\u003d null) {\n           Credentials binary;\n           try {\n             binary \u003d Credentials.readTokenStorageFile(\n                 new Path(\"file:///\" +  binaryTokenFilename), conf);\n           } catch (IOException e) {\n             throw new RuntimeException(e);\n           }\n           credentials.addAll(binary);\n         }\n         if (TokenCache.getDelegationToken(credentials, fsName) !\u003d null) {\n           LOG.debug(\"DT for \" + fsName  + \" is already present\");\n           return;\n         }\n       }\n       List\u003cToken\u003c?\u003e\u003e tokens \u003d\n           fs.getDelegationTokens(delegTokenRenewer, credentials);\n       if (tokens !\u003d null) {\n         for (Token\u003c?\u003e token : tokens) {\n           credentials.addToken(token.getService(), token);\n           LOG.info(\"Got dt for \" + fs.getUri() + \";uri\u003d\"+ fsName + \n               \";t.service\u003d\"+token.getService());\n         }\n       }\n       //Call getDelegationToken as well for now - for FS implementations\n       // which may not have implmented getDelegationTokens (hftp)\n       if (tokens \u003d\u003d null || tokens.size() \u003d\u003d 0) {\n         Token\u003c?\u003e token \u003d fs.getDelegationToken(delegTokenRenewer);\n         if (token !\u003d null) {\n           credentials.addToken(token.getService(), token);\n           LOG.info(\"Got dt for \" + fs.getUri() + \";uri\u003d\" + fsName\n               + \";t.service\u003d\" + token.getService());\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static void obtainTokensForNamenodesInternal(FileSystem fs, \n      Credentials credentials, Configuration conf) throws IOException {\n    String delegTokenRenewer \u003d Master.getMasterPrincipal(conf);\n    if (delegTokenRenewer \u003d\u003d null || delegTokenRenewer.length() \u003d\u003d 0) {\n      throw new IOException(\n          \"Can\u0027t get Master Kerberos principal for use as renewer\");\n    }\n    boolean readFile \u003d true;\n\n    String fsName \u003d fs.getCanonicalServiceName();\n    if (TokenCache.getDelegationToken(credentials, fsName) \u003d\u003d null) {\n      //TODO: Need to come up with a better place to put\n      //this block of code to do with reading the file\n      if (readFile) {\n        readFile \u003d false;\n        String binaryTokenFilename \u003d\n          conf.get(MRJobConfig.MAPREDUCE_JOB_CREDENTIALS_BINARY);\n        if (binaryTokenFilename !\u003d null) {\n          Credentials binary;\n          try {\n            binary \u003d Credentials.readTokenStorageFile(\n                new Path(\"file:///\" +  binaryTokenFilename), conf);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n          credentials.addAll(binary);\n        }\n        if (TokenCache.getDelegationToken(credentials, fsName) !\u003d null) {\n          LOG.debug(\"DT for \" + fsName  + \" is already present\");\n          return;\n        }\n      }\n      List\u003cToken\u003c?\u003e\u003e tokens \u003d\n          fs.getDelegationTokens(delegTokenRenewer, credentials);\n      if (tokens !\u003d null) {\n        for (Token\u003c?\u003e token : tokens) {\n          credentials.addToken(token.getService(), token);\n          LOG.info(\"Got dt for \" + fs.getUri() + \";uri\u003d\"+ fsName + \n              \";t.service\u003d\"+token.getService());\n        }\n      }\n      //Call getDelegationToken as well for now - for FS implementations\n      // which may not have implmented getDelegationTokens (hftp)\n      if (tokens \u003d\u003d null || tokens.size() \u003d\u003d 0) {\n        Token\u003c?\u003e token \u003d fs.getDelegationToken(delegTokenRenewer);\n        if (token !\u003d null) {\n          credentials.addToken(token.getService(), token);\n          LOG.info(\"Got dt for \" + fs.getUri() + \";uri\u003d\" + fsName\n              + \";t.service\u003d\" + token.getService());\n        }\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/security/TokenCache.java",
      "extendedDetails": {}
    },
    "f445eb31f19c4e022155a414265694db42fbf243": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3529. TokenCache does not cache viewfs credentials correctly. (sseth)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1227374 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/01/12 3:07 PM",
      "commitName": "f445eb31f19c4e022155a414265694db42fbf243",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 132.95,
      "commitsBetweenForRepo": 841,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,53 @@\n   static void obtainTokensForNamenodesInternal(FileSystem fs, \n       Credentials credentials, Configuration conf) throws IOException {\n     String delegTokenRenewer \u003d Master.getMasterPrincipal(conf);\n     if (delegTokenRenewer \u003d\u003d null || delegTokenRenewer.length() \u003d\u003d 0) {\n       throw new IOException(\n           \"Can\u0027t get JobTracker Kerberos principal for use as renewer\");\n     }\n     boolean readFile \u003d true;\n \n     String fsName \u003d fs.getCanonicalServiceName();\n     if (TokenCache.getDelegationToken(credentials, fsName) \u003d\u003d null) {\n       //TODO: Need to come up with a better place to put\n       //this block of code to do with reading the file\n       if (readFile) {\n         readFile \u003d false;\n         String binaryTokenFilename \u003d\n           conf.get(\"mapreduce.job.credentials.binary\");\n         if (binaryTokenFilename !\u003d null) {\n           Credentials binary;\n           try {\n             binary \u003d Credentials.readTokenStorageFile(\n                 new Path(\"file:///\" +  binaryTokenFilename), conf);\n           } catch (IOException e) {\n             throw new RuntimeException(e);\n           }\n           credentials.addAll(binary);\n         }\n         if (TokenCache.getDelegationToken(credentials, fsName) !\u003d null) {\n           LOG.debug(\"DT for \" + fsName  + \" is already present\");\n           return;\n         }\n       }\n-      List\u003cToken\u003c?\u003e\u003e tokens \u003d fs.getDelegationTokens(delegTokenRenewer);\n+      List\u003cToken\u003c?\u003e\u003e tokens \u003d\n+          fs.getDelegationTokens(delegTokenRenewer, credentials);\n       if (tokens !\u003d null) {\n         for (Token\u003c?\u003e token : tokens) {\n           credentials.addToken(token.getService(), token);\n           LOG.info(\"Got dt for \" + fs.getUri() + \";uri\u003d\"+ fsName + \n               \";t.service\u003d\"+token.getService());\n         }\n       }\n       //Call getDelegationToken as well for now - for FS implementations\n       // which may not have implmented getDelegationTokens (hftp)\n-      Token\u003c?\u003e token \u003d fs.getDelegationToken(delegTokenRenewer);\n-      if (token !\u003d null) {\n-        Text fsNameText \u003d new Text(fsName);\n-        token.setService(fsNameText);\n-        credentials.addToken(fsNameText, token);\n-        LOG.info(\"Got dt for \" + fs.getUri() + \";uri\u003d\"+ fsName + \n-            \";t.service\u003d\"+token.getService());\n+      if (tokens \u003d\u003d null || tokens.size() \u003d\u003d 0) {\n+        Token\u003c?\u003e token \u003d fs.getDelegationToken(delegTokenRenewer);\n+        if (token !\u003d null) {\n+          credentials.addToken(token.getService(), token);\n+          LOG.info(\"Got dt for \" + fs.getUri() + \";uri\u003d\" + fsName\n+              + \";t.service\u003d\" + token.getService());\n+        }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static void obtainTokensForNamenodesInternal(FileSystem fs, \n      Credentials credentials, Configuration conf) throws IOException {\n    String delegTokenRenewer \u003d Master.getMasterPrincipal(conf);\n    if (delegTokenRenewer \u003d\u003d null || delegTokenRenewer.length() \u003d\u003d 0) {\n      throw new IOException(\n          \"Can\u0027t get JobTracker Kerberos principal for use as renewer\");\n    }\n    boolean readFile \u003d true;\n\n    String fsName \u003d fs.getCanonicalServiceName();\n    if (TokenCache.getDelegationToken(credentials, fsName) \u003d\u003d null) {\n      //TODO: Need to come up with a better place to put\n      //this block of code to do with reading the file\n      if (readFile) {\n        readFile \u003d false;\n        String binaryTokenFilename \u003d\n          conf.get(\"mapreduce.job.credentials.binary\");\n        if (binaryTokenFilename !\u003d null) {\n          Credentials binary;\n          try {\n            binary \u003d Credentials.readTokenStorageFile(\n                new Path(\"file:///\" +  binaryTokenFilename), conf);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n          credentials.addAll(binary);\n        }\n        if (TokenCache.getDelegationToken(credentials, fsName) !\u003d null) {\n          LOG.debug(\"DT for \" + fsName  + \" is already present\");\n          return;\n        }\n      }\n      List\u003cToken\u003c?\u003e\u003e tokens \u003d\n          fs.getDelegationTokens(delegTokenRenewer, credentials);\n      if (tokens !\u003d null) {\n        for (Token\u003c?\u003e token : tokens) {\n          credentials.addToken(token.getService(), token);\n          LOG.info(\"Got dt for \" + fs.getUri() + \";uri\u003d\"+ fsName + \n              \";t.service\u003d\"+token.getService());\n        }\n      }\n      //Call getDelegationToken as well for now - for FS implementations\n      // which may not have implmented getDelegationTokens (hftp)\n      if (tokens \u003d\u003d null || tokens.size() \u003d\u003d 0) {\n        Token\u003c?\u003e token \u003d fs.getDelegationToken(delegTokenRenewer);\n        if (token !\u003d null) {\n          credentials.addToken(token.getService(), token);\n          LOG.info(\"Got dt for \" + fs.getUri() + \";uri\u003d\" + fsName\n              + \";t.service\u003d\" + token.getService());\n        }\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/security/TokenCache.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  static void obtainTokensForNamenodesInternal(FileSystem fs, \n      Credentials credentials, Configuration conf) throws IOException {\n    String delegTokenRenewer \u003d Master.getMasterPrincipal(conf);\n    if (delegTokenRenewer \u003d\u003d null || delegTokenRenewer.length() \u003d\u003d 0) {\n      throw new IOException(\n          \"Can\u0027t get JobTracker Kerberos principal for use as renewer\");\n    }\n    boolean readFile \u003d true;\n\n    String fsName \u003d fs.getCanonicalServiceName();\n    if (TokenCache.getDelegationToken(credentials, fsName) \u003d\u003d null) {\n      //TODO: Need to come up with a better place to put\n      //this block of code to do with reading the file\n      if (readFile) {\n        readFile \u003d false;\n        String binaryTokenFilename \u003d\n          conf.get(\"mapreduce.job.credentials.binary\");\n        if (binaryTokenFilename !\u003d null) {\n          Credentials binary;\n          try {\n            binary \u003d Credentials.readTokenStorageFile(\n                new Path(\"file:///\" +  binaryTokenFilename), conf);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n          credentials.addAll(binary);\n        }\n        if (TokenCache.getDelegationToken(credentials, fsName) !\u003d null) {\n          LOG.debug(\"DT for \" + fsName  + \" is already present\");\n          return;\n        }\n      }\n      List\u003cToken\u003c?\u003e\u003e tokens \u003d fs.getDelegationTokens(delegTokenRenewer);\n      if (tokens !\u003d null) {\n        for (Token\u003c?\u003e token : tokens) {\n          credentials.addToken(token.getService(), token);\n          LOG.info(\"Got dt for \" + fs.getUri() + \";uri\u003d\"+ fsName + \n              \";t.service\u003d\"+token.getService());\n        }\n      }\n      //Call getDelegationToken as well for now - for FS implementations\n      // which may not have implmented getDelegationTokens (hftp)\n      Token\u003c?\u003e token \u003d fs.getDelegationToken(delegTokenRenewer);\n      if (token !\u003d null) {\n        Text fsNameText \u003d new Text(fsName);\n        token.setService(fsNameText);\n        credentials.addToken(fsNameText, token);\n        LOG.info(\"Got dt for \" + fs.getUri() + \";uri\u003d\"+ fsName + \n            \";t.service\u003d\"+token.getService());\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/security/TokenCache.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/security/TokenCache.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/security/TokenCache.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/08/11 4:07 AM",
          "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/08/11 8:02 PM",
          "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,52 +1,52 @@\n   static void obtainTokensForNamenodesInternal(FileSystem fs, \n       Credentials credentials, Configuration conf) throws IOException {\n-    String delegTokenRenewer \u003d getJTPrincipal(conf);\n+    String delegTokenRenewer \u003d Master.getMasterPrincipal(conf);\n     if (delegTokenRenewer \u003d\u003d null || delegTokenRenewer.length() \u003d\u003d 0) {\n       throw new IOException(\n           \"Can\u0027t get JobTracker Kerberos principal for use as renewer\");\n     }\n     boolean readFile \u003d true;\n \n     String fsName \u003d fs.getCanonicalServiceName();\n     if (TokenCache.getDelegationToken(credentials, fsName) \u003d\u003d null) {\n       //TODO: Need to come up with a better place to put\n       //this block of code to do with reading the file\n       if (readFile) {\n         readFile \u003d false;\n         String binaryTokenFilename \u003d\n           conf.get(\"mapreduce.job.credentials.binary\");\n         if (binaryTokenFilename !\u003d null) {\n           Credentials binary;\n           try {\n             binary \u003d Credentials.readTokenStorageFile(\n                 new Path(\"file:///\" +  binaryTokenFilename), conf);\n           } catch (IOException e) {\n             throw new RuntimeException(e);\n           }\n           credentials.addAll(binary);\n         }\n         if (TokenCache.getDelegationToken(credentials, fsName) !\u003d null) {\n           LOG.debug(\"DT for \" + fsName  + \" is already present\");\n           return;\n         }\n       }\n       List\u003cToken\u003c?\u003e\u003e tokens \u003d fs.getDelegationTokens(delegTokenRenewer);\n       if (tokens !\u003d null) {\n         for (Token\u003c?\u003e token : tokens) {\n           credentials.addToken(token.getService(), token);\n           LOG.info(\"Got dt for \" + fs.getUri() + \";uri\u003d\"+ fsName + \n               \";t.service\u003d\"+token.getService());\n         }\n       }\n       //Call getDelegationToken as well for now - for FS implementations\n       // which may not have implmented getDelegationTokens (hftp)\n       Token\u003c?\u003e token \u003d fs.getDelegationToken(delegTokenRenewer);\n       if (token !\u003d null) {\n         Text fsNameText \u003d new Text(fsName);\n         token.setService(fsNameText);\n         credentials.addToken(fsNameText, token);\n         LOG.info(\"Got dt for \" + fs.getUri() + \";uri\u003d\"+ fsName + \n             \";t.service\u003d\"+token.getService());\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static void obtainTokensForNamenodesInternal(FileSystem fs, \n      Credentials credentials, Configuration conf) throws IOException {\n    String delegTokenRenewer \u003d Master.getMasterPrincipal(conf);\n    if (delegTokenRenewer \u003d\u003d null || delegTokenRenewer.length() \u003d\u003d 0) {\n      throw new IOException(\n          \"Can\u0027t get JobTracker Kerberos principal for use as renewer\");\n    }\n    boolean readFile \u003d true;\n\n    String fsName \u003d fs.getCanonicalServiceName();\n    if (TokenCache.getDelegationToken(credentials, fsName) \u003d\u003d null) {\n      //TODO: Need to come up with a better place to put\n      //this block of code to do with reading the file\n      if (readFile) {\n        readFile \u003d false;\n        String binaryTokenFilename \u003d\n          conf.get(\"mapreduce.job.credentials.binary\");\n        if (binaryTokenFilename !\u003d null) {\n          Credentials binary;\n          try {\n            binary \u003d Credentials.readTokenStorageFile(\n                new Path(\"file:///\" +  binaryTokenFilename), conf);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n          credentials.addAll(binary);\n        }\n        if (TokenCache.getDelegationToken(credentials, fsName) !\u003d null) {\n          LOG.debug(\"DT for \" + fsName  + \" is already present\");\n          return;\n        }\n      }\n      List\u003cToken\u003c?\u003e\u003e tokens \u003d fs.getDelegationTokens(delegTokenRenewer);\n      if (tokens !\u003d null) {\n        for (Token\u003c?\u003e token : tokens) {\n          credentials.addToken(token.getService(), token);\n          LOG.info(\"Got dt for \" + fs.getUri() + \";uri\u003d\"+ fsName + \n              \";t.service\u003d\"+token.getService());\n        }\n      }\n      //Call getDelegationToken as well for now - for FS implementations\n      // which may not have implmented getDelegationTokens (hftp)\n      Token\u003c?\u003e token \u003d fs.getDelegationToken(delegTokenRenewer);\n      if (token !\u003d null) {\n        Text fsNameText \u003d new Text(fsName);\n        token.setService(fsNameText);\n        credentials.addToken(fsNameText, token);\n        LOG.info(\"Got dt for \" + fs.getUri() + \";uri\u003d\"+ fsName + \n            \";t.service\u003d\"+token.getService());\n      }\n    }\n  }",
          "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/security/TokenCache.java",
          "extendedDetails": {
            "oldPath": "mapreduce/src/java/org/apache/hadoop/mapreduce/security/TokenCache.java",
            "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/security/TokenCache.java",
            "oldMethodName": "obtainTokensForNamenodesInternal",
            "newMethodName": "obtainTokensForNamenodesInternal"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/08/11 4:07 AM",
          "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/08/11 8:02 PM",
          "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,52 +1,52 @@\n   static void obtainTokensForNamenodesInternal(FileSystem fs, \n       Credentials credentials, Configuration conf) throws IOException {\n-    String delegTokenRenewer \u003d getJTPrincipal(conf);\n+    String delegTokenRenewer \u003d Master.getMasterPrincipal(conf);\n     if (delegTokenRenewer \u003d\u003d null || delegTokenRenewer.length() \u003d\u003d 0) {\n       throw new IOException(\n           \"Can\u0027t get JobTracker Kerberos principal for use as renewer\");\n     }\n     boolean readFile \u003d true;\n \n     String fsName \u003d fs.getCanonicalServiceName();\n     if (TokenCache.getDelegationToken(credentials, fsName) \u003d\u003d null) {\n       //TODO: Need to come up with a better place to put\n       //this block of code to do with reading the file\n       if (readFile) {\n         readFile \u003d false;\n         String binaryTokenFilename \u003d\n           conf.get(\"mapreduce.job.credentials.binary\");\n         if (binaryTokenFilename !\u003d null) {\n           Credentials binary;\n           try {\n             binary \u003d Credentials.readTokenStorageFile(\n                 new Path(\"file:///\" +  binaryTokenFilename), conf);\n           } catch (IOException e) {\n             throw new RuntimeException(e);\n           }\n           credentials.addAll(binary);\n         }\n         if (TokenCache.getDelegationToken(credentials, fsName) !\u003d null) {\n           LOG.debug(\"DT for \" + fsName  + \" is already present\");\n           return;\n         }\n       }\n       List\u003cToken\u003c?\u003e\u003e tokens \u003d fs.getDelegationTokens(delegTokenRenewer);\n       if (tokens !\u003d null) {\n         for (Token\u003c?\u003e token : tokens) {\n           credentials.addToken(token.getService(), token);\n           LOG.info(\"Got dt for \" + fs.getUri() + \";uri\u003d\"+ fsName + \n               \";t.service\u003d\"+token.getService());\n         }\n       }\n       //Call getDelegationToken as well for now - for FS implementations\n       // which may not have implmented getDelegationTokens (hftp)\n       Token\u003c?\u003e token \u003d fs.getDelegationToken(delegTokenRenewer);\n       if (token !\u003d null) {\n         Text fsNameText \u003d new Text(fsName);\n         token.setService(fsNameText);\n         credentials.addToken(fsNameText, token);\n         LOG.info(\"Got dt for \" + fs.getUri() + \";uri\u003d\"+ fsName + \n             \";t.service\u003d\"+token.getService());\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static void obtainTokensForNamenodesInternal(FileSystem fs, \n      Credentials credentials, Configuration conf) throws IOException {\n    String delegTokenRenewer \u003d Master.getMasterPrincipal(conf);\n    if (delegTokenRenewer \u003d\u003d null || delegTokenRenewer.length() \u003d\u003d 0) {\n      throw new IOException(\n          \"Can\u0027t get JobTracker Kerberos principal for use as renewer\");\n    }\n    boolean readFile \u003d true;\n\n    String fsName \u003d fs.getCanonicalServiceName();\n    if (TokenCache.getDelegationToken(credentials, fsName) \u003d\u003d null) {\n      //TODO: Need to come up with a better place to put\n      //this block of code to do with reading the file\n      if (readFile) {\n        readFile \u003d false;\n        String binaryTokenFilename \u003d\n          conf.get(\"mapreduce.job.credentials.binary\");\n        if (binaryTokenFilename !\u003d null) {\n          Credentials binary;\n          try {\n            binary \u003d Credentials.readTokenStorageFile(\n                new Path(\"file:///\" +  binaryTokenFilename), conf);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n          credentials.addAll(binary);\n        }\n        if (TokenCache.getDelegationToken(credentials, fsName) !\u003d null) {\n          LOG.debug(\"DT for \" + fsName  + \" is already present\");\n          return;\n        }\n      }\n      List\u003cToken\u003c?\u003e\u003e tokens \u003d fs.getDelegationTokens(delegTokenRenewer);\n      if (tokens !\u003d null) {\n        for (Token\u003c?\u003e token : tokens) {\n          credentials.addToken(token.getService(), token);\n          LOG.info(\"Got dt for \" + fs.getUri() + \";uri\u003d\"+ fsName + \n              \";t.service\u003d\"+token.getService());\n        }\n      }\n      //Call getDelegationToken as well for now - for FS implementations\n      // which may not have implmented getDelegationTokens (hftp)\n      Token\u003c?\u003e token \u003d fs.getDelegationToken(delegTokenRenewer);\n      if (token !\u003d null) {\n        Text fsNameText \u003d new Text(fsName);\n        token.setService(fsNameText);\n        credentials.addToken(fsNameText, token);\n        LOG.info(\"Got dt for \" + fs.getUri() + \";uri\u003d\"+ fsName + \n            \";t.service\u003d\"+token.getService());\n      }\n    }\n  }",
          "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/security/TokenCache.java",
          "extendedDetails": {}
        }
      ]
    },
    "a464402cb806da4b12c34d5f83d3e43f2c2b5429": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2839. Fixed TokenCache to get delegation tokens using both new and old apis. Contributed by Siddharth Seth. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1157420 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/08/11 1:20 PM",
      "commitName": "a464402cb806da4b12c34d5f83d3e43f2c2b5429",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "12/08/11 2:00 PM",
      "commitNameOld": "ded6f225a55517deedc2bd502f2b68f1ca2ddee8",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.97,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,52 @@\n   static void obtainTokensForNamenodesInternal(FileSystem fs, \n       Credentials credentials, Configuration conf) throws IOException {\n     String delegTokenRenewer \u003d getJTPrincipal(conf);\n     if (delegTokenRenewer \u003d\u003d null || delegTokenRenewer.length() \u003d\u003d 0) {\n       throw new IOException(\n           \"Can\u0027t get JobTracker Kerberos principal for use as renewer\");\n     }\n     boolean readFile \u003d true;\n \n     String fsName \u003d fs.getCanonicalServiceName();\n     if (TokenCache.getDelegationToken(credentials, fsName) \u003d\u003d null) {\n       //TODO: Need to come up with a better place to put\n       //this block of code to do with reading the file\n       if (readFile) {\n         readFile \u003d false;\n         String binaryTokenFilename \u003d\n           conf.get(\"mapreduce.job.credentials.binary\");\n         if (binaryTokenFilename !\u003d null) {\n           Credentials binary;\n           try {\n             binary \u003d Credentials.readTokenStorageFile(\n                 new Path(\"file:///\" +  binaryTokenFilename), conf);\n           } catch (IOException e) {\n             throw new RuntimeException(e);\n           }\n           credentials.addAll(binary);\n         }\n         if (TokenCache.getDelegationToken(credentials, fsName) !\u003d null) {\n           LOG.debug(\"DT for \" + fsName  + \" is already present\");\n           return;\n         }\n       }\n+      List\u003cToken\u003c?\u003e\u003e tokens \u003d fs.getDelegationTokens(delegTokenRenewer);\n+      if (tokens !\u003d null) {\n+        for (Token\u003c?\u003e token : tokens) {\n+          credentials.addToken(token.getService(), token);\n+          LOG.info(\"Got dt for \" + fs.getUri() + \";uri\u003d\"+ fsName + \n+              \";t.service\u003d\"+token.getService());\n+        }\n+      }\n+      //Call getDelegationToken as well for now - for FS implementations\n+      // which may not have implmented getDelegationTokens (hftp)\n       Token\u003c?\u003e token \u003d fs.getDelegationToken(delegTokenRenewer);\n       if (token !\u003d null) {\n         Text fsNameText \u003d new Text(fsName);\n         token.setService(fsNameText);\n         credentials.addToken(fsNameText, token);\n         LOG.info(\"Got dt for \" + fs.getUri() + \";uri\u003d\"+ fsName + \n             \";t.service\u003d\"+token.getService());\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static void obtainTokensForNamenodesInternal(FileSystem fs, \n      Credentials credentials, Configuration conf) throws IOException {\n    String delegTokenRenewer \u003d getJTPrincipal(conf);\n    if (delegTokenRenewer \u003d\u003d null || delegTokenRenewer.length() \u003d\u003d 0) {\n      throw new IOException(\n          \"Can\u0027t get JobTracker Kerberos principal for use as renewer\");\n    }\n    boolean readFile \u003d true;\n\n    String fsName \u003d fs.getCanonicalServiceName();\n    if (TokenCache.getDelegationToken(credentials, fsName) \u003d\u003d null) {\n      //TODO: Need to come up with a better place to put\n      //this block of code to do with reading the file\n      if (readFile) {\n        readFile \u003d false;\n        String binaryTokenFilename \u003d\n          conf.get(\"mapreduce.job.credentials.binary\");\n        if (binaryTokenFilename !\u003d null) {\n          Credentials binary;\n          try {\n            binary \u003d Credentials.readTokenStorageFile(\n                new Path(\"file:///\" +  binaryTokenFilename), conf);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n          credentials.addAll(binary);\n        }\n        if (TokenCache.getDelegationToken(credentials, fsName) !\u003d null) {\n          LOG.debug(\"DT for \" + fsName  + \" is already present\");\n          return;\n        }\n      }\n      List\u003cToken\u003c?\u003e\u003e tokens \u003d fs.getDelegationTokens(delegTokenRenewer);\n      if (tokens !\u003d null) {\n        for (Token\u003c?\u003e token : tokens) {\n          credentials.addToken(token.getService(), token);\n          LOG.info(\"Got dt for \" + fs.getUri() + \";uri\u003d\"+ fsName + \n              \";t.service\u003d\"+token.getService());\n        }\n      }\n      //Call getDelegationToken as well for now - for FS implementations\n      // which may not have implmented getDelegationTokens (hftp)\n      Token\u003c?\u003e token \u003d fs.getDelegationToken(delegTokenRenewer);\n      if (token !\u003d null) {\n        Text fsNameText \u003d new Text(fsName);\n        token.setService(fsNameText);\n        credentials.addToken(fsNameText, token);\n        LOG.info(\"Got dt for \" + fs.getUri() + \";uri\u003d\"+ fsName + \n            \";t.service\u003d\"+token.getService());\n      }\n    }\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapreduce/security/TokenCache.java",
      "extendedDetails": {}
    },
    "ded6f225a55517deedc2bd502f2b68f1ca2ddee8": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2837. Ported bug fixes from y-merge to prepare for MAPREDUCE-279 merge. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1157249 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/08/11 2:00 PM",
      "commitName": "ded6f225a55517deedc2bd502f2b68f1ca2ddee8",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "12/06/11 3:00 PM",
      "commitNameOld": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 60.96,
      "commitsBetweenForRepo": 224,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,42 @@\n   static void obtainTokensForNamenodesInternal(FileSystem fs, \n       Credentials credentials, Configuration conf) throws IOException {\n-\n-    // get jobtracker principal id (for the renewer)\n-    KerberosName jtKrbName \u003d \n-      new KerberosName(conf.get(JTConfig.JT_USER_NAME,\"\"));\n-    \n-    String delegTokenRenewer \u003d jtKrbName.getShortName();\n+    String delegTokenRenewer \u003d getJTPrincipal(conf);\n+    if (delegTokenRenewer \u003d\u003d null || delegTokenRenewer.length() \u003d\u003d 0) {\n+      throw new IOException(\n+          \"Can\u0027t get JobTracker Kerberos principal for use as renewer\");\n+    }\n     boolean readFile \u003d true;\n \n     String fsName \u003d fs.getCanonicalServiceName();\n     if (TokenCache.getDelegationToken(credentials, fsName) \u003d\u003d null) {\n       //TODO: Need to come up with a better place to put\n       //this block of code to do with reading the file\n       if (readFile) {\n         readFile \u003d false;\n         String binaryTokenFilename \u003d\n           conf.get(\"mapreduce.job.credentials.binary\");\n         if (binaryTokenFilename !\u003d null) {\n           Credentials binary;\n           try {\n             binary \u003d Credentials.readTokenStorageFile(\n                 new Path(\"file:///\" +  binaryTokenFilename), conf);\n           } catch (IOException e) {\n             throw new RuntimeException(e);\n           }\n           credentials.addAll(binary);\n         }\n         if (TokenCache.getDelegationToken(credentials, fsName) !\u003d null) {\n           LOG.debug(\"DT for \" + fsName  + \" is already present\");\n           return;\n         }\n       }\n       Token\u003c?\u003e token \u003d fs.getDelegationToken(delegTokenRenewer);\n       if (token !\u003d null) {\n         Text fsNameText \u003d new Text(fsName);\n         token.setService(fsNameText);\n         credentials.addToken(fsNameText, token);\n         LOG.info(\"Got dt for \" + fs.getUri() + \";uri\u003d\"+ fsName + \n             \";t.service\u003d\"+token.getService());\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static void obtainTokensForNamenodesInternal(FileSystem fs, \n      Credentials credentials, Configuration conf) throws IOException {\n    String delegTokenRenewer \u003d getJTPrincipal(conf);\n    if (delegTokenRenewer \u003d\u003d null || delegTokenRenewer.length() \u003d\u003d 0) {\n      throw new IOException(\n          \"Can\u0027t get JobTracker Kerberos principal for use as renewer\");\n    }\n    boolean readFile \u003d true;\n\n    String fsName \u003d fs.getCanonicalServiceName();\n    if (TokenCache.getDelegationToken(credentials, fsName) \u003d\u003d null) {\n      //TODO: Need to come up with a better place to put\n      //this block of code to do with reading the file\n      if (readFile) {\n        readFile \u003d false;\n        String binaryTokenFilename \u003d\n          conf.get(\"mapreduce.job.credentials.binary\");\n        if (binaryTokenFilename !\u003d null) {\n          Credentials binary;\n          try {\n            binary \u003d Credentials.readTokenStorageFile(\n                new Path(\"file:///\" +  binaryTokenFilename), conf);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n          credentials.addAll(binary);\n        }\n        if (TokenCache.getDelegationToken(credentials, fsName) !\u003d null) {\n          LOG.debug(\"DT for \" + fsName  + \" is already present\");\n          return;\n        }\n      }\n      Token\u003c?\u003e token \u003d fs.getDelegationToken(delegTokenRenewer);\n      if (token !\u003d null) {\n        Text fsNameText \u003d new Text(fsName);\n        token.setService(fsNameText);\n        credentials.addToken(fsNameText, token);\n        LOG.info(\"Got dt for \" + fs.getUri() + \";uri\u003d\"+ fsName + \n            \";t.service\u003d\"+token.getService());\n      }\n    }\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapreduce/security/TokenCache.java",
      "extendedDetails": {}
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,43 @@\n+  static void obtainTokensForNamenodesInternal(FileSystem fs, \n+      Credentials credentials, Configuration conf) throws IOException {\n+\n+    // get jobtracker principal id (for the renewer)\n+    KerberosName jtKrbName \u003d \n+      new KerberosName(conf.get(JTConfig.JT_USER_NAME,\"\"));\n+    \n+    String delegTokenRenewer \u003d jtKrbName.getShortName();\n+    boolean readFile \u003d true;\n+\n+    String fsName \u003d fs.getCanonicalServiceName();\n+    if (TokenCache.getDelegationToken(credentials, fsName) \u003d\u003d null) {\n+      //TODO: Need to come up with a better place to put\n+      //this block of code to do with reading the file\n+      if (readFile) {\n+        readFile \u003d false;\n+        String binaryTokenFilename \u003d\n+          conf.get(\"mapreduce.job.credentials.binary\");\n+        if (binaryTokenFilename !\u003d null) {\n+          Credentials binary;\n+          try {\n+            binary \u003d Credentials.readTokenStorageFile(\n+                new Path(\"file:///\" +  binaryTokenFilename), conf);\n+          } catch (IOException e) {\n+            throw new RuntimeException(e);\n+          }\n+          credentials.addAll(binary);\n+        }\n+        if (TokenCache.getDelegationToken(credentials, fsName) !\u003d null) {\n+          LOG.debug(\"DT for \" + fsName  + \" is already present\");\n+          return;\n+        }\n+      }\n+      Token\u003c?\u003e token \u003d fs.getDelegationToken(delegTokenRenewer);\n+      if (token !\u003d null) {\n+        Text fsNameText \u003d new Text(fsName);\n+        token.setService(fsNameText);\n+        credentials.addToken(fsNameText, token);\n+        LOG.info(\"Got dt for \" + fs.getUri() + \";uri\u003d\"+ fsName + \n+            \";t.service\u003d\"+token.getService());\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  static void obtainTokensForNamenodesInternal(FileSystem fs, \n      Credentials credentials, Configuration conf) throws IOException {\n\n    // get jobtracker principal id (for the renewer)\n    KerberosName jtKrbName \u003d \n      new KerberosName(conf.get(JTConfig.JT_USER_NAME,\"\"));\n    \n    String delegTokenRenewer \u003d jtKrbName.getShortName();\n    boolean readFile \u003d true;\n\n    String fsName \u003d fs.getCanonicalServiceName();\n    if (TokenCache.getDelegationToken(credentials, fsName) \u003d\u003d null) {\n      //TODO: Need to come up with a better place to put\n      //this block of code to do with reading the file\n      if (readFile) {\n        readFile \u003d false;\n        String binaryTokenFilename \u003d\n          conf.get(\"mapreduce.job.credentials.binary\");\n        if (binaryTokenFilename !\u003d null) {\n          Credentials binary;\n          try {\n            binary \u003d Credentials.readTokenStorageFile(\n                new Path(\"file:///\" +  binaryTokenFilename), conf);\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n          credentials.addAll(binary);\n        }\n        if (TokenCache.getDelegationToken(credentials, fsName) !\u003d null) {\n          LOG.debug(\"DT for \" + fsName  + \" is already present\");\n          return;\n        }\n      }\n      Token\u003c?\u003e token \u003d fs.getDelegationToken(delegTokenRenewer);\n      if (token !\u003d null) {\n        Text fsNameText \u003d new Text(fsName);\n        token.setService(fsNameText);\n        credentials.addToken(fsNameText, token);\n        LOG.info(\"Got dt for \" + fs.getUri() + \";uri\u003d\"+ fsName + \n            \";t.service\u003d\"+token.getService());\n      }\n    }\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapreduce/security/TokenCache.java"
    }
  }
}