{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "KMS.java",
  "functionName": "invalidateCache",
  "functionId": "invalidateCache___name-String(annotations-@PathParam(\"name\")__modifiers-final)",
  "sourceFilePath": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMS.java",
  "functionStartLine": 266,
  "functionEndLine": 292,
  "numCommitsSeen": 18,
  "timeTaken": 1418,
  "changeHistory": [
    "4ec5acc70418a3f2327cf83ecae1789a057fdd99",
    "2007e0cf2ad371e2dbf533c367f09c1f5acd1c0b"
  ],
  "changeHistoryShort": {
    "4ec5acc70418a3f2327cf83ecae1789a057fdd99": "Ybodychange",
    "2007e0cf2ad371e2dbf533c367f09c1f5acd1c0b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4ec5acc70418a3f2327cf83ecae1789a057fdd99": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14705. Add batched interface reencryptEncryptedKeys to KMS.\n",
      "commitDate": "22/08/17 7:47 AM",
      "commitName": "4ec5acc70418a3f2327cf83ecae1789a057fdd99",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "08/06/17 10:35 PM",
      "commitNameOld": "c4b5c32669423b9a792f33f9f8333d95528f2515",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 74.38,
      "commitsBetweenForRepo": 438,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   public Response invalidateCache(@PathParam(\"name\") final String name)\n       throws Exception {\n     try {\n       LOG.trace(\"Entering invalidateCache Method.\");\n       KMSWebApp.getAdminCallsMeter().mark();\n-      KMSClientProvider.checkNotEmpty(name, \"name\");\n+      checkNotEmpty(name, \"name\");\n       UserGroupInformation user \u003d HttpUserGroupInformation.get();\n       assertAccess(KMSACLs.Type.ROLLOVER, user, KMSOp.INVALIDATE_CACHE, name);\n       LOG.debug(\"Invalidating cache with key name {}.\", name);\n \n       user.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n         @Override\n         public Void run() throws Exception {\n           provider.invalidateCache(name);\n           provider.flush();\n           return null;\n         }\n       });\n \n       kmsAudit.ok(user, KMSOp.INVALIDATE_CACHE, name, \"\");\n       LOG.trace(\"Exiting invalidateCache for key name {}.\", name);\n       return Response.ok().build();\n     } catch (Exception e) {\n       LOG.debug(\"Exception in invalidateCache for key name {}.\", name, e);\n       throw e;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response invalidateCache(@PathParam(\"name\") final String name)\n      throws Exception {\n    try {\n      LOG.trace(\"Entering invalidateCache Method.\");\n      KMSWebApp.getAdminCallsMeter().mark();\n      checkNotEmpty(name, \"name\");\n      UserGroupInformation user \u003d HttpUserGroupInformation.get();\n      assertAccess(KMSACLs.Type.ROLLOVER, user, KMSOp.INVALIDATE_CACHE, name);\n      LOG.debug(\"Invalidating cache with key name {}.\", name);\n\n      user.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n        @Override\n        public Void run() throws Exception {\n          provider.invalidateCache(name);\n          provider.flush();\n          return null;\n        }\n      });\n\n      kmsAudit.ok(user, KMSOp.INVALIDATE_CACHE, name, \"\");\n      LOG.trace(\"Exiting invalidateCache for key name {}.\", name);\n      return Response.ok().build();\n    } catch (Exception e) {\n      LOG.debug(\"Exception in invalidateCache for key name {}.\", name, e);\n      throw e;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMS.java",
      "extendedDetails": {}
    },
    "2007e0cf2ad371e2dbf533c367f09c1f5acd1c0b": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-11210. Enhance key rolling to guarantee new KeyVersion is returned from generateEncryptedKeys after a key is rolled.\n",
      "commitDate": "07/02/17 8:36 PM",
      "commitName": "2007e0cf2ad371e2dbf533c367f09c1f5acd1c0b",
      "commitAuthor": "Xiao Chen",
      "diff": "@@ -0,0 +1,27 @@\n+  public Response invalidateCache(@PathParam(\"name\") final String name)\n+      throws Exception {\n+    try {\n+      LOG.trace(\"Entering invalidateCache Method.\");\n+      KMSWebApp.getAdminCallsMeter().mark();\n+      KMSClientProvider.checkNotEmpty(name, \"name\");\n+      UserGroupInformation user \u003d HttpUserGroupInformation.get();\n+      assertAccess(KMSACLs.Type.ROLLOVER, user, KMSOp.INVALIDATE_CACHE, name);\n+      LOG.debug(\"Invalidating cache with key name {}.\", name);\n+\n+      user.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n+        @Override\n+        public Void run() throws Exception {\n+          provider.invalidateCache(name);\n+          provider.flush();\n+          return null;\n+        }\n+      });\n+\n+      kmsAudit.ok(user, KMSOp.INVALIDATE_CACHE, name, \"\");\n+      LOG.trace(\"Exiting invalidateCache for key name {}.\", name);\n+      return Response.ok().build();\n+    } catch (Exception e) {\n+      LOG.debug(\"Exception in invalidateCache for key name {}.\", name, e);\n+      throw e;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Response invalidateCache(@PathParam(\"name\") final String name)\n      throws Exception {\n    try {\n      LOG.trace(\"Entering invalidateCache Method.\");\n      KMSWebApp.getAdminCallsMeter().mark();\n      KMSClientProvider.checkNotEmpty(name, \"name\");\n      UserGroupInformation user \u003d HttpUserGroupInformation.get();\n      assertAccess(KMSACLs.Type.ROLLOVER, user, KMSOp.INVALIDATE_CACHE, name);\n      LOG.debug(\"Invalidating cache with key name {}.\", name);\n\n      user.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n        @Override\n        public Void run() throws Exception {\n          provider.invalidateCache(name);\n          provider.flush();\n          return null;\n        }\n      });\n\n      kmsAudit.ok(user, KMSOp.INVALIDATE_CACHE, name, \"\");\n      LOG.trace(\"Exiting invalidateCache for key name {}.\", name);\n      return Response.ok().build();\n    } catch (Exception e) {\n      LOG.debug(\"Exception in invalidateCache for key name {}.\", name, e);\n      throw e;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KMS.java"
    }
  }
}