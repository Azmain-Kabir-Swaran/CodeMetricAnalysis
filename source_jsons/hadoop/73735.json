{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RpcClientUtil.java",
  "functionName": "isMethodSupported",
  "functionId": "isMethodSupported___rpcProxy-Object__protocol-Class__?____rpcKind-RPC.RpcKind__version-long__methodName-String",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/RpcClientUtil.java",
  "functionStartLine": 108,
  "functionEndLine": 151,
  "numCommitsSeen": 6,
  "timeTaken": 916,
  "changeHistory": [
    "589c68ae09effd6c4f26505d61636f779c22e99f",
    "12289efa2bc0f286ededc4c979cee0d304fadb0b"
  ],
  "changeHistoryShort": {
    "589c68ae09effd6c4f26505d61636f779c22e99f": "Yparameterchange",
    "12289efa2bc0f286ededc4c979cee0d304fadb0b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "589c68ae09effd6c4f26505d61636f779c22e99f": {
      "type": "Yparameterchange",
      "commitMessage": "    HADOOP-8285 Use ProtoBuf for RpcPayLoadHeader (sanjay radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1329319 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/04/12 9:34 AM",
      "commitName": "589c68ae09effd6c4f26505d61636f779c22e99f",
      "commitAuthor": "Sanjay Radia",
      "commitDateOld": "26/01/12 3:23 PM",
      "commitNameOld": "12289efa2bc0f286ededc4c979cee0d304fadb0b",
      "commitAuthorOld": "Jitendra Nath Pandey",
      "daysBetweenCommits": 87.72,
      "commitsBetweenForRepo": 693,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,44 @@\n   public static boolean isMethodSupported(Object rpcProxy, Class\u003c?\u003e protocol,\n-      RpcKind rpcKind, long version, String methodName) throws IOException {\n+      RPC.RpcKind rpcKind, long version, String methodName) throws IOException {\n     InetSocketAddress serverAddress \u003d RPC.getServerAddress(rpcProxy);\n     Map\u003cLong, ProtocolSignature\u003e versionMap \u003d getVersionSignatureMap(\n         serverAddress, protocol.getName(), rpcKind.toString());\n \n     if (versionMap \u003d\u003d null) {\n       Configuration conf \u003d new Configuration();\n       RPC.setProtocolEngine(conf, ProtocolMetaInfoPB.class,\n           ProtobufRpcEngine.class);\n       ProtocolMetaInfoPB protocolInfoProxy \u003d getProtocolMetaInfoProxy(rpcProxy,\n           conf);\n       GetProtocolSignatureRequestProto.Builder builder \u003d \n           GetProtocolSignatureRequestProto.newBuilder();\n       builder.setProtocol(protocol.getName());\n       builder.setRpcKind(rpcKind.toString());\n       GetProtocolSignatureResponseProto resp;\n       try {\n         resp \u003d protocolInfoProxy.getProtocolSignature(NULL_CONTROLLER,\n             builder.build());\n       } catch (ServiceException se) {\n         throw ProtobufHelper.getRemoteException(se);\n       }\n       versionMap \u003d convertProtocolSignatureProtos(resp\n           .getProtocolSignatureList());\n       putVersionSignatureMap(serverAddress, protocol.getName(),\n           rpcKind.toString(), versionMap);\n     }\n     // Assuming unique method names.\n     Method desiredMethod;\n     Method[] allMethods \u003d protocol.getMethods();\n     desiredMethod \u003d null;\n     for (Method m : allMethods) {\n       if (m.getName().equals(methodName)) {\n         desiredMethod \u003d m;\n         break;\n       }\n     }\n     if (desiredMethod \u003d\u003d null) {\n       return false;\n     }\n     int methodHash \u003d ProtocolSignature.getFingerprint(desiredMethod);\n     return methodExists(methodHash, version, versionMap);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static boolean isMethodSupported(Object rpcProxy, Class\u003c?\u003e protocol,\n      RPC.RpcKind rpcKind, long version, String methodName) throws IOException {\n    InetSocketAddress serverAddress \u003d RPC.getServerAddress(rpcProxy);\n    Map\u003cLong, ProtocolSignature\u003e versionMap \u003d getVersionSignatureMap(\n        serverAddress, protocol.getName(), rpcKind.toString());\n\n    if (versionMap \u003d\u003d null) {\n      Configuration conf \u003d new Configuration();\n      RPC.setProtocolEngine(conf, ProtocolMetaInfoPB.class,\n          ProtobufRpcEngine.class);\n      ProtocolMetaInfoPB protocolInfoProxy \u003d getProtocolMetaInfoProxy(rpcProxy,\n          conf);\n      GetProtocolSignatureRequestProto.Builder builder \u003d \n          GetProtocolSignatureRequestProto.newBuilder();\n      builder.setProtocol(protocol.getName());\n      builder.setRpcKind(rpcKind.toString());\n      GetProtocolSignatureResponseProto resp;\n      try {\n        resp \u003d protocolInfoProxy.getProtocolSignature(NULL_CONTROLLER,\n            builder.build());\n      } catch (ServiceException se) {\n        throw ProtobufHelper.getRemoteException(se);\n      }\n      versionMap \u003d convertProtocolSignatureProtos(resp\n          .getProtocolSignatureList());\n      putVersionSignatureMap(serverAddress, protocol.getName(),\n          rpcKind.toString(), versionMap);\n    }\n    // Assuming unique method names.\n    Method desiredMethod;\n    Method[] allMethods \u003d protocol.getMethods();\n    desiredMethod \u003d null;\n    for (Method m : allMethods) {\n      if (m.getName().equals(methodName)) {\n        desiredMethod \u003d m;\n        break;\n      }\n    }\n    if (desiredMethod \u003d\u003d null) {\n      return false;\n    }\n    int methodHash \u003d ProtocolSignature.getFingerprint(desiredMethod);\n    return methodExists(methodHash, version, versionMap);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/RpcClientUtil.java",
      "extendedDetails": {
        "oldValue": "[rpcProxy-Object, protocol-Class\u003c?\u003e, rpcKind-RpcKind, version-long, methodName-String]",
        "newValue": "[rpcProxy-Object, protocol-Class\u003c?\u003e, rpcKind-RPC.RpcKind, version-long, methodName-String]"
      }
    },
    "12289efa2bc0f286ededc4c979cee0d304fadb0b": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7965. Support for protocol version and signature in PB.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1236444 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/01/12 3:23 PM",
      "commitName": "12289efa2bc0f286ededc4c979cee0d304fadb0b",
      "commitAuthor": "Jitendra Nath Pandey",
      "diff": "@@ -0,0 +1,44 @@\n+  public static boolean isMethodSupported(Object rpcProxy, Class\u003c?\u003e protocol,\n+      RpcKind rpcKind, long version, String methodName) throws IOException {\n+    InetSocketAddress serverAddress \u003d RPC.getServerAddress(rpcProxy);\n+    Map\u003cLong, ProtocolSignature\u003e versionMap \u003d getVersionSignatureMap(\n+        serverAddress, protocol.getName(), rpcKind.toString());\n+\n+    if (versionMap \u003d\u003d null) {\n+      Configuration conf \u003d new Configuration();\n+      RPC.setProtocolEngine(conf, ProtocolMetaInfoPB.class,\n+          ProtobufRpcEngine.class);\n+      ProtocolMetaInfoPB protocolInfoProxy \u003d getProtocolMetaInfoProxy(rpcProxy,\n+          conf);\n+      GetProtocolSignatureRequestProto.Builder builder \u003d \n+          GetProtocolSignatureRequestProto.newBuilder();\n+      builder.setProtocol(protocol.getName());\n+      builder.setRpcKind(rpcKind.toString());\n+      GetProtocolSignatureResponseProto resp;\n+      try {\n+        resp \u003d protocolInfoProxy.getProtocolSignature(NULL_CONTROLLER,\n+            builder.build());\n+      } catch (ServiceException se) {\n+        throw ProtobufHelper.getRemoteException(se);\n+      }\n+      versionMap \u003d convertProtocolSignatureProtos(resp\n+          .getProtocolSignatureList());\n+      putVersionSignatureMap(serverAddress, protocol.getName(),\n+          rpcKind.toString(), versionMap);\n+    }\n+    // Assuming unique method names.\n+    Method desiredMethod;\n+    Method[] allMethods \u003d protocol.getMethods();\n+    desiredMethod \u003d null;\n+    for (Method m : allMethods) {\n+      if (m.getName().equals(methodName)) {\n+        desiredMethod \u003d m;\n+        break;\n+      }\n+    }\n+    if (desiredMethod \u003d\u003d null) {\n+      return false;\n+    }\n+    int methodHash \u003d ProtocolSignature.getFingerprint(desiredMethod);\n+    return methodExists(methodHash, version, versionMap);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static boolean isMethodSupported(Object rpcProxy, Class\u003c?\u003e protocol,\n      RpcKind rpcKind, long version, String methodName) throws IOException {\n    InetSocketAddress serverAddress \u003d RPC.getServerAddress(rpcProxy);\n    Map\u003cLong, ProtocolSignature\u003e versionMap \u003d getVersionSignatureMap(\n        serverAddress, protocol.getName(), rpcKind.toString());\n\n    if (versionMap \u003d\u003d null) {\n      Configuration conf \u003d new Configuration();\n      RPC.setProtocolEngine(conf, ProtocolMetaInfoPB.class,\n          ProtobufRpcEngine.class);\n      ProtocolMetaInfoPB protocolInfoProxy \u003d getProtocolMetaInfoProxy(rpcProxy,\n          conf);\n      GetProtocolSignatureRequestProto.Builder builder \u003d \n          GetProtocolSignatureRequestProto.newBuilder();\n      builder.setProtocol(protocol.getName());\n      builder.setRpcKind(rpcKind.toString());\n      GetProtocolSignatureResponseProto resp;\n      try {\n        resp \u003d protocolInfoProxy.getProtocolSignature(NULL_CONTROLLER,\n            builder.build());\n      } catch (ServiceException se) {\n        throw ProtobufHelper.getRemoteException(se);\n      }\n      versionMap \u003d convertProtocolSignatureProtos(resp\n          .getProtocolSignatureList());\n      putVersionSignatureMap(serverAddress, protocol.getName(),\n          rpcKind.toString(), versionMap);\n    }\n    // Assuming unique method names.\n    Method desiredMethod;\n    Method[] allMethods \u003d protocol.getMethods();\n    desiredMethod \u003d null;\n    for (Method m : allMethods) {\n      if (m.getName().equals(methodName)) {\n        desiredMethod \u003d m;\n        break;\n      }\n    }\n    if (desiredMethod \u003d\u003d null) {\n      return false;\n    }\n    int methodHash \u003d ProtocolSignature.getFingerprint(desiredMethod);\n    return methodExists(methodHash, version, versionMap);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/RpcClientUtil.java"
    }
  }
}