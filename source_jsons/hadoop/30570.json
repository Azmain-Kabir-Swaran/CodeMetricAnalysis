{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "KeyValueBasedTimelineStore.java",
  "functionName": "getEntities",
  "functionId": "getEntities___entityType-String__limit-Long__windowStart-Long__windowEnd-Long__fromId-String__fromTs-Long__primaryFilter-NameValuePair__secondaryFilters-Collection__NameValuePair____fields-EnumSet__Field____checkAcl-CheckAcl",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/KeyValueBasedTimelineStore.java",
  "functionStartLine": 96,
  "functionEndLine": 187,
  "numCommitsSeen": 27,
  "timeTaken": 4662,
  "changeHistory": [
    "71e0b0d8005ea1952dc7e582db15c2ac09df7c91",
    "9fab22b36673e7f1a0bb629d2c07966ac2482e99",
    "8180e676abb2bb500a48b3a0c0809d2a807ab235",
    "6b8b1608e64e300e4e1d23c60476febaca29ca38",
    "001078e0677e39b962ca1da81fc34d7ac9a7e65c",
    "0f1eda6bbf895a1239b25cdf8b17fabd3759e806",
    "33714d9ad66622f545a030a7d3df94f4b0e73794",
    "84425fb435cb603fd8adcc2f76631c0244175310",
    "e06226126cd89d0cf8b4ef80a88659b248579231",
    "96578f0e01ba751175d4bcbad48d6f679e662382"
  ],
  "changeHistoryShort": {
    "71e0b0d8005ea1952dc7e582db15c2ac09df7c91": "Ybodychange",
    "9fab22b36673e7f1a0bb629d2c07966ac2482e99": "Ymultichange(Ymovefromfile,Ybodychange)",
    "8180e676abb2bb500a48b3a0c0809d2a807ab235": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
    "6b8b1608e64e300e4e1d23c60476febaca29ca38": "Ymodifierchange",
    "001078e0677e39b962ca1da81fc34d7ac9a7e65c": "Yfilerename",
    "0f1eda6bbf895a1239b25cdf8b17fabd3759e806": "Ymultichange(Yparameterchange,Ybodychange)",
    "33714d9ad66622f545a030a7d3df94f4b0e73794": "Ybodychange",
    "84425fb435cb603fd8adcc2f76631c0244175310": "Ymultichange(Yfilerename,Yreturntypechange,Ybodychange)",
    "e06226126cd89d0cf8b4ef80a88659b248579231": "Ybodychange",
    "96578f0e01ba751175d4bcbad48d6f679e662382": "Yintroduced"
  },
  "changeHistoryDetails": {
    "71e0b0d8005ea1952dc7e582db15c2ac09df7c91": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9040.  Fixed memory leak in LevelDBCacheTimelineStore and DBIterator.\n            Contributed by Tarun Parimi\n",
      "commitDate": "17/12/18 9:04 AM",
      "commitName": "71e0b0d8005ea1952dc7e582db15c2ac09df7c91",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "07/08/17 2:56 AM",
      "commitNameOld": "839e077faf4019d6efdcd89d95930023cd0b0a08",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 497.3,
      "commitsBetweenForRepo": 4377,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,91 +1,92 @@\n   public synchronized TimelineEntities getEntities(String entityType, Long limit,\n       Long windowStart, Long windowEnd, String fromId, Long fromTs,\n       NameValuePair primaryFilter, Collection\u003cNameValuePair\u003e secondaryFilters,\n       EnumSet\u003cField\u003e fields, CheckAcl checkAcl) throws IOException {\n     if (getServiceStopped()) {\n       LOG.info(\"Service stopped, return null for the storage\");\n       return null;\n     }\n     if (limit \u003d\u003d null) {\n       limit \u003d DEFAULT_LIMIT;\n     }\n     if (windowStart \u003d\u003d null) {\n       windowStart \u003d Long.MIN_VALUE;\n     }\n     if (windowEnd \u003d\u003d null) {\n       windowEnd \u003d Long.MAX_VALUE;\n     }\n     if (fields \u003d\u003d null) {\n       fields \u003d EnumSet.allOf(Field.class);\n     }\n \n-    Iterator\u003cTimelineEntity\u003e entityIterator \u003d null;\n+    TimelineEntity firstEntity \u003d null;\n     if (fromId !\u003d null) {\n-      TimelineEntity firstEntity \u003d entities.get(new EntityIdentifier(fromId,\n+      firstEntity \u003d entities.get(new EntityIdentifier(fromId,\n           entityType));\n       if (firstEntity \u003d\u003d null) {\n         return new TimelineEntities();\n-      } else {\n-        entityIterator \u003d entities.valueSetIterator(firstEntity);\n       }\n     }\n-    if (entityIterator \u003d\u003d null) {\n-      entityIterator \u003d entities.valueSetIterator();\n-    }\n \n     List\u003cTimelineEntity\u003e entitiesSelected \u003d new ArrayList\u003cTimelineEntity\u003e();\n-    while (entityIterator.hasNext()) {\n-      TimelineEntity entity \u003d entityIterator.next();\n-      if (entitiesSelected.size() \u003e\u003d limit) {\n-        break;\n-      }\n-      if (!entity.getEntityType().equals(entityType)) {\n-        continue;\n-      }\n-      if (entity.getStartTime() \u003c\u003d windowStart) {\n-        continue;\n-      }\n-      if (entity.getStartTime() \u003e windowEnd) {\n-        continue;\n-      }\n-      if (fromTs !\u003d null \u0026\u0026 entityInsertTimes.get(new EntityIdentifier(\n-          entity.getEntityId(), entity.getEntityType())) \u003e fromTs) {\n-        continue;\n-      }\n-      if (primaryFilter !\u003d null \u0026\u0026\n-          !KeyValueBasedTimelineStoreUtils.matchPrimaryFilter(\n-              entity.getPrimaryFilters(), primaryFilter)) {\n-        continue;\n-      }\n-      if (secondaryFilters !\u003d null) { // AND logic\n-        boolean flag \u003d true;\n-        for (NameValuePair secondaryFilter : secondaryFilters) {\n-          if (secondaryFilter !\u003d null \u0026\u0026 !KeyValueBasedTimelineStoreUtils\n-              .matchPrimaryFilter(entity.getPrimaryFilters(), secondaryFilter)\n-              \u0026\u0026 !KeyValueBasedTimelineStoreUtils.matchFilter(\n-              entity.getOtherInfo(), secondaryFilter)) {\n-            flag \u003d false;\n-            break;\n-          }\n+\n+    try(CloseableIterator\u003cTimelineEntity\u003e entityIterator \u003d\n+        firstEntity \u003d\u003d null ? entities.valueSetIterator() :\n+            entities.valueSetIterator(firstEntity)) {\n+      while (entityIterator.hasNext()) {\n+        TimelineEntity entity \u003d entityIterator.next();\n+        if (entitiesSelected.size() \u003e\u003d limit) {\n+          break;\n         }\n-        if (!flag) {\n+        if (!entity.getEntityType().equals(entityType)) {\n           continue;\n         }\n-      }\n-      if (entity.getDomainId() \u003d\u003d null) {\n-        entity.setDomainId(DEFAULT_DOMAIN_ID);\n-      }\n-      if (checkAcl \u003d\u003d null || checkAcl.check(entity)) {\n-        entitiesSelected.add(entity);\n+        if (entity.getStartTime() \u003c\u003d windowStart) {\n+          continue;\n+        }\n+        if (entity.getStartTime() \u003e windowEnd) {\n+          continue;\n+        }\n+        if (fromTs !\u003d null \u0026\u0026 entityInsertTimes.get(\n+            new EntityIdentifier(entity.getEntityId(), entity.getEntityType()))\n+            \u003e fromTs) {\n+          continue;\n+        }\n+        if (primaryFilter !\u003d null \u0026\u0026 !KeyValueBasedTimelineStoreUtils\n+            .matchPrimaryFilter(entity.getPrimaryFilters(), primaryFilter)) {\n+          continue;\n+        }\n+        if (secondaryFilters !\u003d null) { // AND logic\n+          boolean flag \u003d true;\n+          for (NameValuePair secondaryFilter : secondaryFilters) {\n+            if (secondaryFilter !\u003d null \u0026\u0026 !KeyValueBasedTimelineStoreUtils\n+                .matchPrimaryFilter(entity.getPrimaryFilters(), secondaryFilter)\n+                \u0026\u0026 !KeyValueBasedTimelineStoreUtils\n+                .matchFilter(entity.getOtherInfo(), secondaryFilter)) {\n+              flag \u003d false;\n+              break;\n+            }\n+          }\n+          if (!flag) {\n+            continue;\n+          }\n+        }\n+        if (entity.getDomainId() \u003d\u003d null) {\n+          entity.setDomainId(DEFAULT_DOMAIN_ID);\n+        }\n+        if (checkAcl \u003d\u003d null || checkAcl.check(entity)) {\n+          entitiesSelected.add(entity);\n+        }\n       }\n     }\n+\n     List\u003cTimelineEntity\u003e entitiesToReturn \u003d new ArrayList\u003cTimelineEntity\u003e();\n     for (TimelineEntity entitySelected : entitiesSelected) {\n       entitiesToReturn.add(KeyValueBasedTimelineStoreUtils.maskFields(\n           entitySelected, fields));\n     }\n     Collections.sort(entitiesToReturn);\n     TimelineEntities entitiesWrapper \u003d new TimelineEntities();\n     entitiesWrapper.setEntities(entitiesToReturn);\n     return entitiesWrapper;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized TimelineEntities getEntities(String entityType, Long limit,\n      Long windowStart, Long windowEnd, String fromId, Long fromTs,\n      NameValuePair primaryFilter, Collection\u003cNameValuePair\u003e secondaryFilters,\n      EnumSet\u003cField\u003e fields, CheckAcl checkAcl) throws IOException {\n    if (getServiceStopped()) {\n      LOG.info(\"Service stopped, return null for the storage\");\n      return null;\n    }\n    if (limit \u003d\u003d null) {\n      limit \u003d DEFAULT_LIMIT;\n    }\n    if (windowStart \u003d\u003d null) {\n      windowStart \u003d Long.MIN_VALUE;\n    }\n    if (windowEnd \u003d\u003d null) {\n      windowEnd \u003d Long.MAX_VALUE;\n    }\n    if (fields \u003d\u003d null) {\n      fields \u003d EnumSet.allOf(Field.class);\n    }\n\n    TimelineEntity firstEntity \u003d null;\n    if (fromId !\u003d null) {\n      firstEntity \u003d entities.get(new EntityIdentifier(fromId,\n          entityType));\n      if (firstEntity \u003d\u003d null) {\n        return new TimelineEntities();\n      }\n    }\n\n    List\u003cTimelineEntity\u003e entitiesSelected \u003d new ArrayList\u003cTimelineEntity\u003e();\n\n    try(CloseableIterator\u003cTimelineEntity\u003e entityIterator \u003d\n        firstEntity \u003d\u003d null ? entities.valueSetIterator() :\n            entities.valueSetIterator(firstEntity)) {\n      while (entityIterator.hasNext()) {\n        TimelineEntity entity \u003d entityIterator.next();\n        if (entitiesSelected.size() \u003e\u003d limit) {\n          break;\n        }\n        if (!entity.getEntityType().equals(entityType)) {\n          continue;\n        }\n        if (entity.getStartTime() \u003c\u003d windowStart) {\n          continue;\n        }\n        if (entity.getStartTime() \u003e windowEnd) {\n          continue;\n        }\n        if (fromTs !\u003d null \u0026\u0026 entityInsertTimes.get(\n            new EntityIdentifier(entity.getEntityId(), entity.getEntityType()))\n            \u003e fromTs) {\n          continue;\n        }\n        if (primaryFilter !\u003d null \u0026\u0026 !KeyValueBasedTimelineStoreUtils\n            .matchPrimaryFilter(entity.getPrimaryFilters(), primaryFilter)) {\n          continue;\n        }\n        if (secondaryFilters !\u003d null) { // AND logic\n          boolean flag \u003d true;\n          for (NameValuePair secondaryFilter : secondaryFilters) {\n            if (secondaryFilter !\u003d null \u0026\u0026 !KeyValueBasedTimelineStoreUtils\n                .matchPrimaryFilter(entity.getPrimaryFilters(), secondaryFilter)\n                \u0026\u0026 !KeyValueBasedTimelineStoreUtils\n                .matchFilter(entity.getOtherInfo(), secondaryFilter)) {\n              flag \u003d false;\n              break;\n            }\n          }\n          if (!flag) {\n            continue;\n          }\n        }\n        if (entity.getDomainId() \u003d\u003d null) {\n          entity.setDomainId(DEFAULT_DOMAIN_ID);\n        }\n        if (checkAcl \u003d\u003d null || checkAcl.check(entity)) {\n          entitiesSelected.add(entity);\n        }\n      }\n    }\n\n    List\u003cTimelineEntity\u003e entitiesToReturn \u003d new ArrayList\u003cTimelineEntity\u003e();\n    for (TimelineEntity entitySelected : entitiesSelected) {\n      entitiesToReturn.add(KeyValueBasedTimelineStoreUtils.maskFields(\n          entitySelected, fields));\n    }\n    Collections.sort(entitiesToReturn);\n    TimelineEntities entitiesWrapper \u003d new TimelineEntities();\n    entitiesWrapper.setEntities(entitiesToReturn);\n    return entitiesWrapper;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/KeyValueBasedTimelineStore.java",
      "extendedDetails": {}
    },
    "9fab22b36673e7f1a0bb629d2c07966ac2482e99": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "YARN-4219. New levelDB cache storage for timeline v1.5. Contributed by\nLi Lu\n",
      "commitDate": "28/01/16 2:24 PM",
      "commitName": "9fab22b36673e7f1a0bb629d2c07966ac2482e99",
      "commitAuthor": "Xuan",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-4219. New levelDB cache storage for timeline v1.5. Contributed by\nLi Lu\n",
          "commitDate": "28/01/16 2:24 PM",
          "commitName": "9fab22b36673e7f1a0bb629d2c07966ac2482e99",
          "commitAuthor": "Xuan",
          "commitDateOld": "28/01/16 10:59 AM",
          "commitNameOld": "61382ff8fabc76b3a51f227646573cdf367fea1a",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 0.14,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,86 +1,91 @@\n   public synchronized TimelineEntities getEntities(String entityType, Long limit,\n       Long windowStart, Long windowEnd, String fromId, Long fromTs,\n       NameValuePair primaryFilter, Collection\u003cNameValuePair\u003e secondaryFilters,\n       EnumSet\u003cField\u003e fields, CheckAcl checkAcl) throws IOException {\n+    if (getServiceStopped()) {\n+      LOG.info(\"Service stopped, return null for the storage\");\n+      return null;\n+    }\n     if (limit \u003d\u003d null) {\n       limit \u003d DEFAULT_LIMIT;\n     }\n     if (windowStart \u003d\u003d null) {\n       windowStart \u003d Long.MIN_VALUE;\n     }\n     if (windowEnd \u003d\u003d null) {\n       windowEnd \u003d Long.MAX_VALUE;\n     }\n     if (fields \u003d\u003d null) {\n       fields \u003d EnumSet.allOf(Field.class);\n     }\n \n     Iterator\u003cTimelineEntity\u003e entityIterator \u003d null;\n     if (fromId !\u003d null) {\n       TimelineEntity firstEntity \u003d entities.get(new EntityIdentifier(fromId,\n           entityType));\n       if (firstEntity \u003d\u003d null) {\n         return new TimelineEntities();\n       } else {\n-        entityIterator \u003d new TreeSet\u003cTimelineEntity\u003e(entities.values())\n-            .tailSet(firstEntity, true).iterator();\n+        entityIterator \u003d entities.valueSetIterator(firstEntity);\n       }\n     }\n     if (entityIterator \u003d\u003d null) {\n-      entityIterator \u003d new PriorityQueue\u003cTimelineEntity\u003e(entities.values())\n-          .iterator();\n+      entityIterator \u003d entities.valueSetIterator();\n     }\n \n     List\u003cTimelineEntity\u003e entitiesSelected \u003d new ArrayList\u003cTimelineEntity\u003e();\n     while (entityIterator.hasNext()) {\n       TimelineEntity entity \u003d entityIterator.next();\n       if (entitiesSelected.size() \u003e\u003d limit) {\n         break;\n       }\n       if (!entity.getEntityType().equals(entityType)) {\n         continue;\n       }\n       if (entity.getStartTime() \u003c\u003d windowStart) {\n         continue;\n       }\n       if (entity.getStartTime() \u003e windowEnd) {\n         continue;\n       }\n       if (fromTs !\u003d null \u0026\u0026 entityInsertTimes.get(new EntityIdentifier(\n           entity.getEntityId(), entity.getEntityType())) \u003e fromTs) {\n         continue;\n       }\n       if (primaryFilter !\u003d null \u0026\u0026\n-          !matchPrimaryFilter(entity.getPrimaryFilters(), primaryFilter)) {\n+          !KeyValueBasedTimelineStoreUtils.matchPrimaryFilter(\n+              entity.getPrimaryFilters(), primaryFilter)) {\n         continue;\n       }\n       if (secondaryFilters !\u003d null) { // AND logic\n         boolean flag \u003d true;\n         for (NameValuePair secondaryFilter : secondaryFilters) {\n-          if (secondaryFilter !\u003d null \u0026\u0026 !matchPrimaryFilter(\n-              entity.getPrimaryFilters(), secondaryFilter) \u0026\u0026\n-              !matchFilter(entity.getOtherInfo(), secondaryFilter)) {\n+          if (secondaryFilter !\u003d null \u0026\u0026 !KeyValueBasedTimelineStoreUtils\n+              .matchPrimaryFilter(entity.getPrimaryFilters(), secondaryFilter)\n+              \u0026\u0026 !KeyValueBasedTimelineStoreUtils.matchFilter(\n+              entity.getOtherInfo(), secondaryFilter)) {\n             flag \u003d false;\n             break;\n           }\n         }\n         if (!flag) {\n           continue;\n         }\n       }\n       if (entity.getDomainId() \u003d\u003d null) {\n         entity.setDomainId(DEFAULT_DOMAIN_ID);\n       }\n       if (checkAcl \u003d\u003d null || checkAcl.check(entity)) {\n         entitiesSelected.add(entity);\n       }\n     }\n     List\u003cTimelineEntity\u003e entitiesToReturn \u003d new ArrayList\u003cTimelineEntity\u003e();\n     for (TimelineEntity entitySelected : entitiesSelected) {\n-      entitiesToReturn.add(maskFields(entitySelected, fields));\n+      entitiesToReturn.add(KeyValueBasedTimelineStoreUtils.maskFields(\n+          entitySelected, fields));\n     }\n     Collections.sort(entitiesToReturn);\n     TimelineEntities entitiesWrapper \u003d new TimelineEntities();\n     entitiesWrapper.setEntities(entitiesToReturn);\n     return entitiesWrapper;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized TimelineEntities getEntities(String entityType, Long limit,\n      Long windowStart, Long windowEnd, String fromId, Long fromTs,\n      NameValuePair primaryFilter, Collection\u003cNameValuePair\u003e secondaryFilters,\n      EnumSet\u003cField\u003e fields, CheckAcl checkAcl) throws IOException {\n    if (getServiceStopped()) {\n      LOG.info(\"Service stopped, return null for the storage\");\n      return null;\n    }\n    if (limit \u003d\u003d null) {\n      limit \u003d DEFAULT_LIMIT;\n    }\n    if (windowStart \u003d\u003d null) {\n      windowStart \u003d Long.MIN_VALUE;\n    }\n    if (windowEnd \u003d\u003d null) {\n      windowEnd \u003d Long.MAX_VALUE;\n    }\n    if (fields \u003d\u003d null) {\n      fields \u003d EnumSet.allOf(Field.class);\n    }\n\n    Iterator\u003cTimelineEntity\u003e entityIterator \u003d null;\n    if (fromId !\u003d null) {\n      TimelineEntity firstEntity \u003d entities.get(new EntityIdentifier(fromId,\n          entityType));\n      if (firstEntity \u003d\u003d null) {\n        return new TimelineEntities();\n      } else {\n        entityIterator \u003d entities.valueSetIterator(firstEntity);\n      }\n    }\n    if (entityIterator \u003d\u003d null) {\n      entityIterator \u003d entities.valueSetIterator();\n    }\n\n    List\u003cTimelineEntity\u003e entitiesSelected \u003d new ArrayList\u003cTimelineEntity\u003e();\n    while (entityIterator.hasNext()) {\n      TimelineEntity entity \u003d entityIterator.next();\n      if (entitiesSelected.size() \u003e\u003d limit) {\n        break;\n      }\n      if (!entity.getEntityType().equals(entityType)) {\n        continue;\n      }\n      if (entity.getStartTime() \u003c\u003d windowStart) {\n        continue;\n      }\n      if (entity.getStartTime() \u003e windowEnd) {\n        continue;\n      }\n      if (fromTs !\u003d null \u0026\u0026 entityInsertTimes.get(new EntityIdentifier(\n          entity.getEntityId(), entity.getEntityType())) \u003e fromTs) {\n        continue;\n      }\n      if (primaryFilter !\u003d null \u0026\u0026\n          !KeyValueBasedTimelineStoreUtils.matchPrimaryFilter(\n              entity.getPrimaryFilters(), primaryFilter)) {\n        continue;\n      }\n      if (secondaryFilters !\u003d null) { // AND logic\n        boolean flag \u003d true;\n        for (NameValuePair secondaryFilter : secondaryFilters) {\n          if (secondaryFilter !\u003d null \u0026\u0026 !KeyValueBasedTimelineStoreUtils\n              .matchPrimaryFilter(entity.getPrimaryFilters(), secondaryFilter)\n              \u0026\u0026 !KeyValueBasedTimelineStoreUtils.matchFilter(\n              entity.getOtherInfo(), secondaryFilter)) {\n            flag \u003d false;\n            break;\n          }\n        }\n        if (!flag) {\n          continue;\n        }\n      }\n      if (entity.getDomainId() \u003d\u003d null) {\n        entity.setDomainId(DEFAULT_DOMAIN_ID);\n      }\n      if (checkAcl \u003d\u003d null || checkAcl.check(entity)) {\n        entitiesSelected.add(entity);\n      }\n    }\n    List\u003cTimelineEntity\u003e entitiesToReturn \u003d new ArrayList\u003cTimelineEntity\u003e();\n    for (TimelineEntity entitySelected : entitiesSelected) {\n      entitiesToReturn.add(KeyValueBasedTimelineStoreUtils.maskFields(\n          entitySelected, fields));\n    }\n    Collections.sort(entitiesToReturn);\n    TimelineEntities entitiesWrapper \u003d new TimelineEntities();\n    entitiesWrapper.setEntities(entitiesToReturn);\n    return entitiesWrapper;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/KeyValueBasedTimelineStore.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/MemoryTimelineStore.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/KeyValueBasedTimelineStore.java",
            "oldMethodName": "getEntities",
            "newMethodName": "getEntities"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4219. New levelDB cache storage for timeline v1.5. Contributed by\nLi Lu\n",
          "commitDate": "28/01/16 2:24 PM",
          "commitName": "9fab22b36673e7f1a0bb629d2c07966ac2482e99",
          "commitAuthor": "Xuan",
          "commitDateOld": "28/01/16 10:59 AM",
          "commitNameOld": "61382ff8fabc76b3a51f227646573cdf367fea1a",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 0.14,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,86 +1,91 @@\n   public synchronized TimelineEntities getEntities(String entityType, Long limit,\n       Long windowStart, Long windowEnd, String fromId, Long fromTs,\n       NameValuePair primaryFilter, Collection\u003cNameValuePair\u003e secondaryFilters,\n       EnumSet\u003cField\u003e fields, CheckAcl checkAcl) throws IOException {\n+    if (getServiceStopped()) {\n+      LOG.info(\"Service stopped, return null for the storage\");\n+      return null;\n+    }\n     if (limit \u003d\u003d null) {\n       limit \u003d DEFAULT_LIMIT;\n     }\n     if (windowStart \u003d\u003d null) {\n       windowStart \u003d Long.MIN_VALUE;\n     }\n     if (windowEnd \u003d\u003d null) {\n       windowEnd \u003d Long.MAX_VALUE;\n     }\n     if (fields \u003d\u003d null) {\n       fields \u003d EnumSet.allOf(Field.class);\n     }\n \n     Iterator\u003cTimelineEntity\u003e entityIterator \u003d null;\n     if (fromId !\u003d null) {\n       TimelineEntity firstEntity \u003d entities.get(new EntityIdentifier(fromId,\n           entityType));\n       if (firstEntity \u003d\u003d null) {\n         return new TimelineEntities();\n       } else {\n-        entityIterator \u003d new TreeSet\u003cTimelineEntity\u003e(entities.values())\n-            .tailSet(firstEntity, true).iterator();\n+        entityIterator \u003d entities.valueSetIterator(firstEntity);\n       }\n     }\n     if (entityIterator \u003d\u003d null) {\n-      entityIterator \u003d new PriorityQueue\u003cTimelineEntity\u003e(entities.values())\n-          .iterator();\n+      entityIterator \u003d entities.valueSetIterator();\n     }\n \n     List\u003cTimelineEntity\u003e entitiesSelected \u003d new ArrayList\u003cTimelineEntity\u003e();\n     while (entityIterator.hasNext()) {\n       TimelineEntity entity \u003d entityIterator.next();\n       if (entitiesSelected.size() \u003e\u003d limit) {\n         break;\n       }\n       if (!entity.getEntityType().equals(entityType)) {\n         continue;\n       }\n       if (entity.getStartTime() \u003c\u003d windowStart) {\n         continue;\n       }\n       if (entity.getStartTime() \u003e windowEnd) {\n         continue;\n       }\n       if (fromTs !\u003d null \u0026\u0026 entityInsertTimes.get(new EntityIdentifier(\n           entity.getEntityId(), entity.getEntityType())) \u003e fromTs) {\n         continue;\n       }\n       if (primaryFilter !\u003d null \u0026\u0026\n-          !matchPrimaryFilter(entity.getPrimaryFilters(), primaryFilter)) {\n+          !KeyValueBasedTimelineStoreUtils.matchPrimaryFilter(\n+              entity.getPrimaryFilters(), primaryFilter)) {\n         continue;\n       }\n       if (secondaryFilters !\u003d null) { // AND logic\n         boolean flag \u003d true;\n         for (NameValuePair secondaryFilter : secondaryFilters) {\n-          if (secondaryFilter !\u003d null \u0026\u0026 !matchPrimaryFilter(\n-              entity.getPrimaryFilters(), secondaryFilter) \u0026\u0026\n-              !matchFilter(entity.getOtherInfo(), secondaryFilter)) {\n+          if (secondaryFilter !\u003d null \u0026\u0026 !KeyValueBasedTimelineStoreUtils\n+              .matchPrimaryFilter(entity.getPrimaryFilters(), secondaryFilter)\n+              \u0026\u0026 !KeyValueBasedTimelineStoreUtils.matchFilter(\n+              entity.getOtherInfo(), secondaryFilter)) {\n             flag \u003d false;\n             break;\n           }\n         }\n         if (!flag) {\n           continue;\n         }\n       }\n       if (entity.getDomainId() \u003d\u003d null) {\n         entity.setDomainId(DEFAULT_DOMAIN_ID);\n       }\n       if (checkAcl \u003d\u003d null || checkAcl.check(entity)) {\n         entitiesSelected.add(entity);\n       }\n     }\n     List\u003cTimelineEntity\u003e entitiesToReturn \u003d new ArrayList\u003cTimelineEntity\u003e();\n     for (TimelineEntity entitySelected : entitiesSelected) {\n-      entitiesToReturn.add(maskFields(entitySelected, fields));\n+      entitiesToReturn.add(KeyValueBasedTimelineStoreUtils.maskFields(\n+          entitySelected, fields));\n     }\n     Collections.sort(entitiesToReturn);\n     TimelineEntities entitiesWrapper \u003d new TimelineEntities();\n     entitiesWrapper.setEntities(entitiesToReturn);\n     return entitiesWrapper;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized TimelineEntities getEntities(String entityType, Long limit,\n      Long windowStart, Long windowEnd, String fromId, Long fromTs,\n      NameValuePair primaryFilter, Collection\u003cNameValuePair\u003e secondaryFilters,\n      EnumSet\u003cField\u003e fields, CheckAcl checkAcl) throws IOException {\n    if (getServiceStopped()) {\n      LOG.info(\"Service stopped, return null for the storage\");\n      return null;\n    }\n    if (limit \u003d\u003d null) {\n      limit \u003d DEFAULT_LIMIT;\n    }\n    if (windowStart \u003d\u003d null) {\n      windowStart \u003d Long.MIN_VALUE;\n    }\n    if (windowEnd \u003d\u003d null) {\n      windowEnd \u003d Long.MAX_VALUE;\n    }\n    if (fields \u003d\u003d null) {\n      fields \u003d EnumSet.allOf(Field.class);\n    }\n\n    Iterator\u003cTimelineEntity\u003e entityIterator \u003d null;\n    if (fromId !\u003d null) {\n      TimelineEntity firstEntity \u003d entities.get(new EntityIdentifier(fromId,\n          entityType));\n      if (firstEntity \u003d\u003d null) {\n        return new TimelineEntities();\n      } else {\n        entityIterator \u003d entities.valueSetIterator(firstEntity);\n      }\n    }\n    if (entityIterator \u003d\u003d null) {\n      entityIterator \u003d entities.valueSetIterator();\n    }\n\n    List\u003cTimelineEntity\u003e entitiesSelected \u003d new ArrayList\u003cTimelineEntity\u003e();\n    while (entityIterator.hasNext()) {\n      TimelineEntity entity \u003d entityIterator.next();\n      if (entitiesSelected.size() \u003e\u003d limit) {\n        break;\n      }\n      if (!entity.getEntityType().equals(entityType)) {\n        continue;\n      }\n      if (entity.getStartTime() \u003c\u003d windowStart) {\n        continue;\n      }\n      if (entity.getStartTime() \u003e windowEnd) {\n        continue;\n      }\n      if (fromTs !\u003d null \u0026\u0026 entityInsertTimes.get(new EntityIdentifier(\n          entity.getEntityId(), entity.getEntityType())) \u003e fromTs) {\n        continue;\n      }\n      if (primaryFilter !\u003d null \u0026\u0026\n          !KeyValueBasedTimelineStoreUtils.matchPrimaryFilter(\n              entity.getPrimaryFilters(), primaryFilter)) {\n        continue;\n      }\n      if (secondaryFilters !\u003d null) { // AND logic\n        boolean flag \u003d true;\n        for (NameValuePair secondaryFilter : secondaryFilters) {\n          if (secondaryFilter !\u003d null \u0026\u0026 !KeyValueBasedTimelineStoreUtils\n              .matchPrimaryFilter(entity.getPrimaryFilters(), secondaryFilter)\n              \u0026\u0026 !KeyValueBasedTimelineStoreUtils.matchFilter(\n              entity.getOtherInfo(), secondaryFilter)) {\n            flag \u003d false;\n            break;\n          }\n        }\n        if (!flag) {\n          continue;\n        }\n      }\n      if (entity.getDomainId() \u003d\u003d null) {\n        entity.setDomainId(DEFAULT_DOMAIN_ID);\n      }\n      if (checkAcl \u003d\u003d null || checkAcl.check(entity)) {\n        entitiesSelected.add(entity);\n      }\n    }\n    List\u003cTimelineEntity\u003e entitiesToReturn \u003d new ArrayList\u003cTimelineEntity\u003e();\n    for (TimelineEntity entitySelected : entitiesSelected) {\n      entitiesToReturn.add(KeyValueBasedTimelineStoreUtils.maskFields(\n          entitySelected, fields));\n    }\n    Collections.sort(entitiesToReturn);\n    TimelineEntities entitiesWrapper \u003d new TimelineEntities();\n    entitiesWrapper.setEntities(entitiesToReturn);\n    return entitiesWrapper;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/KeyValueBasedTimelineStore.java",
          "extendedDetails": {}
        }
      ]
    },
    "8180e676abb2bb500a48b3a0c0809d2a807ab235": {
      "type": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-3267. Timelineserver applies the ACL rules after applying the limit on the number of records (Chang Li via jeagles)\n",
      "commitDate": "13/03/15 10:04 AM",
      "commitName": "8180e676abb2bb500a48b3a0c0809d2a807ab235",
      "commitAuthor": "Jonathan Eagles",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3267. Timelineserver applies the ACL rules after applying the limit on the number of records (Chang Li via jeagles)\n",
          "commitDate": "13/03/15 10:04 AM",
          "commitName": "8180e676abb2bb500a48b3a0c0809d2a807ab235",
          "commitAuthor": "Jonathan Eagles",
          "commitDateOld": "29/12/14 9:59 AM",
          "commitNameOld": "241d3b3a50c6af92f023d8b2c24598f4813f4674",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 73.96,
          "commitsBetweenForRepo": 593,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,81 +1,86 @@\n   public synchronized TimelineEntities getEntities(String entityType, Long limit,\n       Long windowStart, Long windowEnd, String fromId, Long fromTs,\n       NameValuePair primaryFilter, Collection\u003cNameValuePair\u003e secondaryFilters,\n-      EnumSet\u003cField\u003e fields) {\n+      EnumSet\u003cField\u003e fields, CheckAcl checkAcl) throws IOException {\n     if (limit \u003d\u003d null) {\n       limit \u003d DEFAULT_LIMIT;\n     }\n     if (windowStart \u003d\u003d null) {\n       windowStart \u003d Long.MIN_VALUE;\n     }\n     if (windowEnd \u003d\u003d null) {\n       windowEnd \u003d Long.MAX_VALUE;\n     }\n     if (fields \u003d\u003d null) {\n       fields \u003d EnumSet.allOf(Field.class);\n     }\n \n     Iterator\u003cTimelineEntity\u003e entityIterator \u003d null;\n     if (fromId !\u003d null) {\n       TimelineEntity firstEntity \u003d entities.get(new EntityIdentifier(fromId,\n           entityType));\n       if (firstEntity \u003d\u003d null) {\n         return new TimelineEntities();\n       } else {\n         entityIterator \u003d new TreeSet\u003cTimelineEntity\u003e(entities.values())\n             .tailSet(firstEntity, true).iterator();\n       }\n     }\n     if (entityIterator \u003d\u003d null) {\n       entityIterator \u003d new PriorityQueue\u003cTimelineEntity\u003e(entities.values())\n           .iterator();\n     }\n \n     List\u003cTimelineEntity\u003e entitiesSelected \u003d new ArrayList\u003cTimelineEntity\u003e();\n     while (entityIterator.hasNext()) {\n       TimelineEntity entity \u003d entityIterator.next();\n       if (entitiesSelected.size() \u003e\u003d limit) {\n         break;\n       }\n       if (!entity.getEntityType().equals(entityType)) {\n         continue;\n       }\n       if (entity.getStartTime() \u003c\u003d windowStart) {\n         continue;\n       }\n       if (entity.getStartTime() \u003e windowEnd) {\n         continue;\n       }\n       if (fromTs !\u003d null \u0026\u0026 entityInsertTimes.get(new EntityIdentifier(\n           entity.getEntityId(), entity.getEntityType())) \u003e fromTs) {\n         continue;\n       }\n       if (primaryFilter !\u003d null \u0026\u0026\n           !matchPrimaryFilter(entity.getPrimaryFilters(), primaryFilter)) {\n         continue;\n       }\n       if (secondaryFilters !\u003d null) { // AND logic\n         boolean flag \u003d true;\n         for (NameValuePair secondaryFilter : secondaryFilters) {\n           if (secondaryFilter !\u003d null \u0026\u0026 !matchPrimaryFilter(\n               entity.getPrimaryFilters(), secondaryFilter) \u0026\u0026\n               !matchFilter(entity.getOtherInfo(), secondaryFilter)) {\n             flag \u003d false;\n             break;\n           }\n         }\n         if (!flag) {\n           continue;\n         }\n       }\n-      entitiesSelected.add(entity);\n+      if (entity.getDomainId() \u003d\u003d null) {\n+        entity.setDomainId(DEFAULT_DOMAIN_ID);\n+      }\n+      if (checkAcl \u003d\u003d null || checkAcl.check(entity)) {\n+        entitiesSelected.add(entity);\n+      }\n     }\n     List\u003cTimelineEntity\u003e entitiesToReturn \u003d new ArrayList\u003cTimelineEntity\u003e();\n     for (TimelineEntity entitySelected : entitiesSelected) {\n       entitiesToReturn.add(maskFields(entitySelected, fields));\n     }\n     Collections.sort(entitiesToReturn);\n     TimelineEntities entitiesWrapper \u003d new TimelineEntities();\n     entitiesWrapper.setEntities(entitiesToReturn);\n     return entitiesWrapper;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized TimelineEntities getEntities(String entityType, Long limit,\n      Long windowStart, Long windowEnd, String fromId, Long fromTs,\n      NameValuePair primaryFilter, Collection\u003cNameValuePair\u003e secondaryFilters,\n      EnumSet\u003cField\u003e fields, CheckAcl checkAcl) throws IOException {\n    if (limit \u003d\u003d null) {\n      limit \u003d DEFAULT_LIMIT;\n    }\n    if (windowStart \u003d\u003d null) {\n      windowStart \u003d Long.MIN_VALUE;\n    }\n    if (windowEnd \u003d\u003d null) {\n      windowEnd \u003d Long.MAX_VALUE;\n    }\n    if (fields \u003d\u003d null) {\n      fields \u003d EnumSet.allOf(Field.class);\n    }\n\n    Iterator\u003cTimelineEntity\u003e entityIterator \u003d null;\n    if (fromId !\u003d null) {\n      TimelineEntity firstEntity \u003d entities.get(new EntityIdentifier(fromId,\n          entityType));\n      if (firstEntity \u003d\u003d null) {\n        return new TimelineEntities();\n      } else {\n        entityIterator \u003d new TreeSet\u003cTimelineEntity\u003e(entities.values())\n            .tailSet(firstEntity, true).iterator();\n      }\n    }\n    if (entityIterator \u003d\u003d null) {\n      entityIterator \u003d new PriorityQueue\u003cTimelineEntity\u003e(entities.values())\n          .iterator();\n    }\n\n    List\u003cTimelineEntity\u003e entitiesSelected \u003d new ArrayList\u003cTimelineEntity\u003e();\n    while (entityIterator.hasNext()) {\n      TimelineEntity entity \u003d entityIterator.next();\n      if (entitiesSelected.size() \u003e\u003d limit) {\n        break;\n      }\n      if (!entity.getEntityType().equals(entityType)) {\n        continue;\n      }\n      if (entity.getStartTime() \u003c\u003d windowStart) {\n        continue;\n      }\n      if (entity.getStartTime() \u003e windowEnd) {\n        continue;\n      }\n      if (fromTs !\u003d null \u0026\u0026 entityInsertTimes.get(new EntityIdentifier(\n          entity.getEntityId(), entity.getEntityType())) \u003e fromTs) {\n        continue;\n      }\n      if (primaryFilter !\u003d null \u0026\u0026\n          !matchPrimaryFilter(entity.getPrimaryFilters(), primaryFilter)) {\n        continue;\n      }\n      if (secondaryFilters !\u003d null) { // AND logic\n        boolean flag \u003d true;\n        for (NameValuePair secondaryFilter : secondaryFilters) {\n          if (secondaryFilter !\u003d null \u0026\u0026 !matchPrimaryFilter(\n              entity.getPrimaryFilters(), secondaryFilter) \u0026\u0026\n              !matchFilter(entity.getOtherInfo(), secondaryFilter)) {\n            flag \u003d false;\n            break;\n          }\n        }\n        if (!flag) {\n          continue;\n        }\n      }\n      if (entity.getDomainId() \u003d\u003d null) {\n        entity.setDomainId(DEFAULT_DOMAIN_ID);\n      }\n      if (checkAcl \u003d\u003d null || checkAcl.check(entity)) {\n        entitiesSelected.add(entity);\n      }\n    }\n    List\u003cTimelineEntity\u003e entitiesToReturn \u003d new ArrayList\u003cTimelineEntity\u003e();\n    for (TimelineEntity entitySelected : entitiesSelected) {\n      entitiesToReturn.add(maskFields(entitySelected, fields));\n    }\n    Collections.sort(entitiesToReturn);\n    TimelineEntities entitiesWrapper \u003d new TimelineEntities();\n    entitiesWrapper.setEntities(entitiesToReturn);\n    return entitiesWrapper;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/MemoryTimelineStore.java",
          "extendedDetails": {
            "oldValue": "[entityType-String, limit-Long, windowStart-Long, windowEnd-Long, fromId-String, fromTs-Long, primaryFilter-NameValuePair, secondaryFilters-Collection\u003cNameValuePair\u003e, fields-EnumSet\u003cField\u003e]",
            "newValue": "[entityType-String, limit-Long, windowStart-Long, windowEnd-Long, fromId-String, fromTs-Long, primaryFilter-NameValuePair, secondaryFilters-Collection\u003cNameValuePair\u003e, fields-EnumSet\u003cField\u003e, checkAcl-CheckAcl]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-3267. Timelineserver applies the ACL rules after applying the limit on the number of records (Chang Li via jeagles)\n",
          "commitDate": "13/03/15 10:04 AM",
          "commitName": "8180e676abb2bb500a48b3a0c0809d2a807ab235",
          "commitAuthor": "Jonathan Eagles",
          "commitDateOld": "29/12/14 9:59 AM",
          "commitNameOld": "241d3b3a50c6af92f023d8b2c24598f4813f4674",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 73.96,
          "commitsBetweenForRepo": 593,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,81 +1,86 @@\n   public synchronized TimelineEntities getEntities(String entityType, Long limit,\n       Long windowStart, Long windowEnd, String fromId, Long fromTs,\n       NameValuePair primaryFilter, Collection\u003cNameValuePair\u003e secondaryFilters,\n-      EnumSet\u003cField\u003e fields) {\n+      EnumSet\u003cField\u003e fields, CheckAcl checkAcl) throws IOException {\n     if (limit \u003d\u003d null) {\n       limit \u003d DEFAULT_LIMIT;\n     }\n     if (windowStart \u003d\u003d null) {\n       windowStart \u003d Long.MIN_VALUE;\n     }\n     if (windowEnd \u003d\u003d null) {\n       windowEnd \u003d Long.MAX_VALUE;\n     }\n     if (fields \u003d\u003d null) {\n       fields \u003d EnumSet.allOf(Field.class);\n     }\n \n     Iterator\u003cTimelineEntity\u003e entityIterator \u003d null;\n     if (fromId !\u003d null) {\n       TimelineEntity firstEntity \u003d entities.get(new EntityIdentifier(fromId,\n           entityType));\n       if (firstEntity \u003d\u003d null) {\n         return new TimelineEntities();\n       } else {\n         entityIterator \u003d new TreeSet\u003cTimelineEntity\u003e(entities.values())\n             .tailSet(firstEntity, true).iterator();\n       }\n     }\n     if (entityIterator \u003d\u003d null) {\n       entityIterator \u003d new PriorityQueue\u003cTimelineEntity\u003e(entities.values())\n           .iterator();\n     }\n \n     List\u003cTimelineEntity\u003e entitiesSelected \u003d new ArrayList\u003cTimelineEntity\u003e();\n     while (entityIterator.hasNext()) {\n       TimelineEntity entity \u003d entityIterator.next();\n       if (entitiesSelected.size() \u003e\u003d limit) {\n         break;\n       }\n       if (!entity.getEntityType().equals(entityType)) {\n         continue;\n       }\n       if (entity.getStartTime() \u003c\u003d windowStart) {\n         continue;\n       }\n       if (entity.getStartTime() \u003e windowEnd) {\n         continue;\n       }\n       if (fromTs !\u003d null \u0026\u0026 entityInsertTimes.get(new EntityIdentifier(\n           entity.getEntityId(), entity.getEntityType())) \u003e fromTs) {\n         continue;\n       }\n       if (primaryFilter !\u003d null \u0026\u0026\n           !matchPrimaryFilter(entity.getPrimaryFilters(), primaryFilter)) {\n         continue;\n       }\n       if (secondaryFilters !\u003d null) { // AND logic\n         boolean flag \u003d true;\n         for (NameValuePair secondaryFilter : secondaryFilters) {\n           if (secondaryFilter !\u003d null \u0026\u0026 !matchPrimaryFilter(\n               entity.getPrimaryFilters(), secondaryFilter) \u0026\u0026\n               !matchFilter(entity.getOtherInfo(), secondaryFilter)) {\n             flag \u003d false;\n             break;\n           }\n         }\n         if (!flag) {\n           continue;\n         }\n       }\n-      entitiesSelected.add(entity);\n+      if (entity.getDomainId() \u003d\u003d null) {\n+        entity.setDomainId(DEFAULT_DOMAIN_ID);\n+      }\n+      if (checkAcl \u003d\u003d null || checkAcl.check(entity)) {\n+        entitiesSelected.add(entity);\n+      }\n     }\n     List\u003cTimelineEntity\u003e entitiesToReturn \u003d new ArrayList\u003cTimelineEntity\u003e();\n     for (TimelineEntity entitySelected : entitiesSelected) {\n       entitiesToReturn.add(maskFields(entitySelected, fields));\n     }\n     Collections.sort(entitiesToReturn);\n     TimelineEntities entitiesWrapper \u003d new TimelineEntities();\n     entitiesWrapper.setEntities(entitiesToReturn);\n     return entitiesWrapper;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized TimelineEntities getEntities(String entityType, Long limit,\n      Long windowStart, Long windowEnd, String fromId, Long fromTs,\n      NameValuePair primaryFilter, Collection\u003cNameValuePair\u003e secondaryFilters,\n      EnumSet\u003cField\u003e fields, CheckAcl checkAcl) throws IOException {\n    if (limit \u003d\u003d null) {\n      limit \u003d DEFAULT_LIMIT;\n    }\n    if (windowStart \u003d\u003d null) {\n      windowStart \u003d Long.MIN_VALUE;\n    }\n    if (windowEnd \u003d\u003d null) {\n      windowEnd \u003d Long.MAX_VALUE;\n    }\n    if (fields \u003d\u003d null) {\n      fields \u003d EnumSet.allOf(Field.class);\n    }\n\n    Iterator\u003cTimelineEntity\u003e entityIterator \u003d null;\n    if (fromId !\u003d null) {\n      TimelineEntity firstEntity \u003d entities.get(new EntityIdentifier(fromId,\n          entityType));\n      if (firstEntity \u003d\u003d null) {\n        return new TimelineEntities();\n      } else {\n        entityIterator \u003d new TreeSet\u003cTimelineEntity\u003e(entities.values())\n            .tailSet(firstEntity, true).iterator();\n      }\n    }\n    if (entityIterator \u003d\u003d null) {\n      entityIterator \u003d new PriorityQueue\u003cTimelineEntity\u003e(entities.values())\n          .iterator();\n    }\n\n    List\u003cTimelineEntity\u003e entitiesSelected \u003d new ArrayList\u003cTimelineEntity\u003e();\n    while (entityIterator.hasNext()) {\n      TimelineEntity entity \u003d entityIterator.next();\n      if (entitiesSelected.size() \u003e\u003d limit) {\n        break;\n      }\n      if (!entity.getEntityType().equals(entityType)) {\n        continue;\n      }\n      if (entity.getStartTime() \u003c\u003d windowStart) {\n        continue;\n      }\n      if (entity.getStartTime() \u003e windowEnd) {\n        continue;\n      }\n      if (fromTs !\u003d null \u0026\u0026 entityInsertTimes.get(new EntityIdentifier(\n          entity.getEntityId(), entity.getEntityType())) \u003e fromTs) {\n        continue;\n      }\n      if (primaryFilter !\u003d null \u0026\u0026\n          !matchPrimaryFilter(entity.getPrimaryFilters(), primaryFilter)) {\n        continue;\n      }\n      if (secondaryFilters !\u003d null) { // AND logic\n        boolean flag \u003d true;\n        for (NameValuePair secondaryFilter : secondaryFilters) {\n          if (secondaryFilter !\u003d null \u0026\u0026 !matchPrimaryFilter(\n              entity.getPrimaryFilters(), secondaryFilter) \u0026\u0026\n              !matchFilter(entity.getOtherInfo(), secondaryFilter)) {\n            flag \u003d false;\n            break;\n          }\n        }\n        if (!flag) {\n          continue;\n        }\n      }\n      if (entity.getDomainId() \u003d\u003d null) {\n        entity.setDomainId(DEFAULT_DOMAIN_ID);\n      }\n      if (checkAcl \u003d\u003d null || checkAcl.check(entity)) {\n        entitiesSelected.add(entity);\n      }\n    }\n    List\u003cTimelineEntity\u003e entitiesToReturn \u003d new ArrayList\u003cTimelineEntity\u003e();\n    for (TimelineEntity entitySelected : entitiesSelected) {\n      entitiesToReturn.add(maskFields(entitySelected, fields));\n    }\n    Collections.sort(entitiesToReturn);\n    TimelineEntities entitiesWrapper \u003d new TimelineEntities();\n    entitiesWrapper.setEntities(entitiesToReturn);\n    return entitiesWrapper;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/MemoryTimelineStore.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3267. Timelineserver applies the ACL rules after applying the limit on the number of records (Chang Li via jeagles)\n",
          "commitDate": "13/03/15 10:04 AM",
          "commitName": "8180e676abb2bb500a48b3a0c0809d2a807ab235",
          "commitAuthor": "Jonathan Eagles",
          "commitDateOld": "29/12/14 9:59 AM",
          "commitNameOld": "241d3b3a50c6af92f023d8b2c24598f4813f4674",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 73.96,
          "commitsBetweenForRepo": 593,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,81 +1,86 @@\n   public synchronized TimelineEntities getEntities(String entityType, Long limit,\n       Long windowStart, Long windowEnd, String fromId, Long fromTs,\n       NameValuePair primaryFilter, Collection\u003cNameValuePair\u003e secondaryFilters,\n-      EnumSet\u003cField\u003e fields) {\n+      EnumSet\u003cField\u003e fields, CheckAcl checkAcl) throws IOException {\n     if (limit \u003d\u003d null) {\n       limit \u003d DEFAULT_LIMIT;\n     }\n     if (windowStart \u003d\u003d null) {\n       windowStart \u003d Long.MIN_VALUE;\n     }\n     if (windowEnd \u003d\u003d null) {\n       windowEnd \u003d Long.MAX_VALUE;\n     }\n     if (fields \u003d\u003d null) {\n       fields \u003d EnumSet.allOf(Field.class);\n     }\n \n     Iterator\u003cTimelineEntity\u003e entityIterator \u003d null;\n     if (fromId !\u003d null) {\n       TimelineEntity firstEntity \u003d entities.get(new EntityIdentifier(fromId,\n           entityType));\n       if (firstEntity \u003d\u003d null) {\n         return new TimelineEntities();\n       } else {\n         entityIterator \u003d new TreeSet\u003cTimelineEntity\u003e(entities.values())\n             .tailSet(firstEntity, true).iterator();\n       }\n     }\n     if (entityIterator \u003d\u003d null) {\n       entityIterator \u003d new PriorityQueue\u003cTimelineEntity\u003e(entities.values())\n           .iterator();\n     }\n \n     List\u003cTimelineEntity\u003e entitiesSelected \u003d new ArrayList\u003cTimelineEntity\u003e();\n     while (entityIterator.hasNext()) {\n       TimelineEntity entity \u003d entityIterator.next();\n       if (entitiesSelected.size() \u003e\u003d limit) {\n         break;\n       }\n       if (!entity.getEntityType().equals(entityType)) {\n         continue;\n       }\n       if (entity.getStartTime() \u003c\u003d windowStart) {\n         continue;\n       }\n       if (entity.getStartTime() \u003e windowEnd) {\n         continue;\n       }\n       if (fromTs !\u003d null \u0026\u0026 entityInsertTimes.get(new EntityIdentifier(\n           entity.getEntityId(), entity.getEntityType())) \u003e fromTs) {\n         continue;\n       }\n       if (primaryFilter !\u003d null \u0026\u0026\n           !matchPrimaryFilter(entity.getPrimaryFilters(), primaryFilter)) {\n         continue;\n       }\n       if (secondaryFilters !\u003d null) { // AND logic\n         boolean flag \u003d true;\n         for (NameValuePair secondaryFilter : secondaryFilters) {\n           if (secondaryFilter !\u003d null \u0026\u0026 !matchPrimaryFilter(\n               entity.getPrimaryFilters(), secondaryFilter) \u0026\u0026\n               !matchFilter(entity.getOtherInfo(), secondaryFilter)) {\n             flag \u003d false;\n             break;\n           }\n         }\n         if (!flag) {\n           continue;\n         }\n       }\n-      entitiesSelected.add(entity);\n+      if (entity.getDomainId() \u003d\u003d null) {\n+        entity.setDomainId(DEFAULT_DOMAIN_ID);\n+      }\n+      if (checkAcl \u003d\u003d null || checkAcl.check(entity)) {\n+        entitiesSelected.add(entity);\n+      }\n     }\n     List\u003cTimelineEntity\u003e entitiesToReturn \u003d new ArrayList\u003cTimelineEntity\u003e();\n     for (TimelineEntity entitySelected : entitiesSelected) {\n       entitiesToReturn.add(maskFields(entitySelected, fields));\n     }\n     Collections.sort(entitiesToReturn);\n     TimelineEntities entitiesWrapper \u003d new TimelineEntities();\n     entitiesWrapper.setEntities(entitiesToReturn);\n     return entitiesWrapper;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized TimelineEntities getEntities(String entityType, Long limit,\n      Long windowStart, Long windowEnd, String fromId, Long fromTs,\n      NameValuePair primaryFilter, Collection\u003cNameValuePair\u003e secondaryFilters,\n      EnumSet\u003cField\u003e fields, CheckAcl checkAcl) throws IOException {\n    if (limit \u003d\u003d null) {\n      limit \u003d DEFAULT_LIMIT;\n    }\n    if (windowStart \u003d\u003d null) {\n      windowStart \u003d Long.MIN_VALUE;\n    }\n    if (windowEnd \u003d\u003d null) {\n      windowEnd \u003d Long.MAX_VALUE;\n    }\n    if (fields \u003d\u003d null) {\n      fields \u003d EnumSet.allOf(Field.class);\n    }\n\n    Iterator\u003cTimelineEntity\u003e entityIterator \u003d null;\n    if (fromId !\u003d null) {\n      TimelineEntity firstEntity \u003d entities.get(new EntityIdentifier(fromId,\n          entityType));\n      if (firstEntity \u003d\u003d null) {\n        return new TimelineEntities();\n      } else {\n        entityIterator \u003d new TreeSet\u003cTimelineEntity\u003e(entities.values())\n            .tailSet(firstEntity, true).iterator();\n      }\n    }\n    if (entityIterator \u003d\u003d null) {\n      entityIterator \u003d new PriorityQueue\u003cTimelineEntity\u003e(entities.values())\n          .iterator();\n    }\n\n    List\u003cTimelineEntity\u003e entitiesSelected \u003d new ArrayList\u003cTimelineEntity\u003e();\n    while (entityIterator.hasNext()) {\n      TimelineEntity entity \u003d entityIterator.next();\n      if (entitiesSelected.size() \u003e\u003d limit) {\n        break;\n      }\n      if (!entity.getEntityType().equals(entityType)) {\n        continue;\n      }\n      if (entity.getStartTime() \u003c\u003d windowStart) {\n        continue;\n      }\n      if (entity.getStartTime() \u003e windowEnd) {\n        continue;\n      }\n      if (fromTs !\u003d null \u0026\u0026 entityInsertTimes.get(new EntityIdentifier(\n          entity.getEntityId(), entity.getEntityType())) \u003e fromTs) {\n        continue;\n      }\n      if (primaryFilter !\u003d null \u0026\u0026\n          !matchPrimaryFilter(entity.getPrimaryFilters(), primaryFilter)) {\n        continue;\n      }\n      if (secondaryFilters !\u003d null) { // AND logic\n        boolean flag \u003d true;\n        for (NameValuePair secondaryFilter : secondaryFilters) {\n          if (secondaryFilter !\u003d null \u0026\u0026 !matchPrimaryFilter(\n              entity.getPrimaryFilters(), secondaryFilter) \u0026\u0026\n              !matchFilter(entity.getOtherInfo(), secondaryFilter)) {\n            flag \u003d false;\n            break;\n          }\n        }\n        if (!flag) {\n          continue;\n        }\n      }\n      if (entity.getDomainId() \u003d\u003d null) {\n        entity.setDomainId(DEFAULT_DOMAIN_ID);\n      }\n      if (checkAcl \u003d\u003d null || checkAcl.check(entity)) {\n        entitiesSelected.add(entity);\n      }\n    }\n    List\u003cTimelineEntity\u003e entitiesToReturn \u003d new ArrayList\u003cTimelineEntity\u003e();\n    for (TimelineEntity entitySelected : entitiesSelected) {\n      entitiesToReturn.add(maskFields(entitySelected, fields));\n    }\n    Collections.sort(entitiesToReturn);\n    TimelineEntities entitiesWrapper \u003d new TimelineEntities();\n    entitiesWrapper.setEntities(entitiesToReturn);\n    return entitiesWrapper;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/MemoryTimelineStore.java",
          "extendedDetails": {}
        }
      ]
    },
    "6b8b1608e64e300e4e1d23c60476febaca29ca38": {
      "type": "Ymodifierchange",
      "commitMessage": "YARN-2033. Merging generic-history into the Timeline Store (Contributed by Zhijie Shen)\n",
      "commitDate": "11/09/14 7:04 PM",
      "commitName": "6b8b1608e64e300e4e1d23c60476febaca29ca38",
      "commitAuthor": "junping_du",
      "commitDateOld": "28/05/14 11:09 AM",
      "commitNameOld": "001078e0677e39b962ca1da81fc34d7ac9a7e65c",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 106.33,
      "commitsBetweenForRepo": 825,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,81 +1,81 @@\n-  public TimelineEntities getEntities(String entityType, Long limit,\n+  public synchronized TimelineEntities getEntities(String entityType, Long limit,\n       Long windowStart, Long windowEnd, String fromId, Long fromTs,\n       NameValuePair primaryFilter, Collection\u003cNameValuePair\u003e secondaryFilters,\n       EnumSet\u003cField\u003e fields) {\n     if (limit \u003d\u003d null) {\n       limit \u003d DEFAULT_LIMIT;\n     }\n     if (windowStart \u003d\u003d null) {\n       windowStart \u003d Long.MIN_VALUE;\n     }\n     if (windowEnd \u003d\u003d null) {\n       windowEnd \u003d Long.MAX_VALUE;\n     }\n     if (fields \u003d\u003d null) {\n       fields \u003d EnumSet.allOf(Field.class);\n     }\n \n     Iterator\u003cTimelineEntity\u003e entityIterator \u003d null;\n     if (fromId !\u003d null) {\n       TimelineEntity firstEntity \u003d entities.get(new EntityIdentifier(fromId,\n           entityType));\n       if (firstEntity \u003d\u003d null) {\n         return new TimelineEntities();\n       } else {\n         entityIterator \u003d new TreeSet\u003cTimelineEntity\u003e(entities.values())\n             .tailSet(firstEntity, true).iterator();\n       }\n     }\n     if (entityIterator \u003d\u003d null) {\n       entityIterator \u003d new PriorityQueue\u003cTimelineEntity\u003e(entities.values())\n           .iterator();\n     }\n \n     List\u003cTimelineEntity\u003e entitiesSelected \u003d new ArrayList\u003cTimelineEntity\u003e();\n     while (entityIterator.hasNext()) {\n       TimelineEntity entity \u003d entityIterator.next();\n       if (entitiesSelected.size() \u003e\u003d limit) {\n         break;\n       }\n       if (!entity.getEntityType().equals(entityType)) {\n         continue;\n       }\n       if (entity.getStartTime() \u003c\u003d windowStart) {\n         continue;\n       }\n       if (entity.getStartTime() \u003e windowEnd) {\n         continue;\n       }\n       if (fromTs !\u003d null \u0026\u0026 entityInsertTimes.get(new EntityIdentifier(\n           entity.getEntityId(), entity.getEntityType())) \u003e fromTs) {\n         continue;\n       }\n       if (primaryFilter !\u003d null \u0026\u0026\n           !matchPrimaryFilter(entity.getPrimaryFilters(), primaryFilter)) {\n         continue;\n       }\n       if (secondaryFilters !\u003d null) { // AND logic\n         boolean flag \u003d true;\n         for (NameValuePair secondaryFilter : secondaryFilters) {\n           if (secondaryFilter !\u003d null \u0026\u0026 !matchPrimaryFilter(\n               entity.getPrimaryFilters(), secondaryFilter) \u0026\u0026\n               !matchFilter(entity.getOtherInfo(), secondaryFilter)) {\n             flag \u003d false;\n             break;\n           }\n         }\n         if (!flag) {\n           continue;\n         }\n       }\n       entitiesSelected.add(entity);\n     }\n     List\u003cTimelineEntity\u003e entitiesToReturn \u003d new ArrayList\u003cTimelineEntity\u003e();\n     for (TimelineEntity entitySelected : entitiesSelected) {\n       entitiesToReturn.add(maskFields(entitySelected, fields));\n     }\n     Collections.sort(entitiesToReturn);\n     TimelineEntities entitiesWrapper \u003d new TimelineEntities();\n     entitiesWrapper.setEntities(entitiesToReturn);\n     return entitiesWrapper;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized TimelineEntities getEntities(String entityType, Long limit,\n      Long windowStart, Long windowEnd, String fromId, Long fromTs,\n      NameValuePair primaryFilter, Collection\u003cNameValuePair\u003e secondaryFilters,\n      EnumSet\u003cField\u003e fields) {\n    if (limit \u003d\u003d null) {\n      limit \u003d DEFAULT_LIMIT;\n    }\n    if (windowStart \u003d\u003d null) {\n      windowStart \u003d Long.MIN_VALUE;\n    }\n    if (windowEnd \u003d\u003d null) {\n      windowEnd \u003d Long.MAX_VALUE;\n    }\n    if (fields \u003d\u003d null) {\n      fields \u003d EnumSet.allOf(Field.class);\n    }\n\n    Iterator\u003cTimelineEntity\u003e entityIterator \u003d null;\n    if (fromId !\u003d null) {\n      TimelineEntity firstEntity \u003d entities.get(new EntityIdentifier(fromId,\n          entityType));\n      if (firstEntity \u003d\u003d null) {\n        return new TimelineEntities();\n      } else {\n        entityIterator \u003d new TreeSet\u003cTimelineEntity\u003e(entities.values())\n            .tailSet(firstEntity, true).iterator();\n      }\n    }\n    if (entityIterator \u003d\u003d null) {\n      entityIterator \u003d new PriorityQueue\u003cTimelineEntity\u003e(entities.values())\n          .iterator();\n    }\n\n    List\u003cTimelineEntity\u003e entitiesSelected \u003d new ArrayList\u003cTimelineEntity\u003e();\n    while (entityIterator.hasNext()) {\n      TimelineEntity entity \u003d entityIterator.next();\n      if (entitiesSelected.size() \u003e\u003d limit) {\n        break;\n      }\n      if (!entity.getEntityType().equals(entityType)) {\n        continue;\n      }\n      if (entity.getStartTime() \u003c\u003d windowStart) {\n        continue;\n      }\n      if (entity.getStartTime() \u003e windowEnd) {\n        continue;\n      }\n      if (fromTs !\u003d null \u0026\u0026 entityInsertTimes.get(new EntityIdentifier(\n          entity.getEntityId(), entity.getEntityType())) \u003e fromTs) {\n        continue;\n      }\n      if (primaryFilter !\u003d null \u0026\u0026\n          !matchPrimaryFilter(entity.getPrimaryFilters(), primaryFilter)) {\n        continue;\n      }\n      if (secondaryFilters !\u003d null) { // AND logic\n        boolean flag \u003d true;\n        for (NameValuePair secondaryFilter : secondaryFilters) {\n          if (secondaryFilter !\u003d null \u0026\u0026 !matchPrimaryFilter(\n              entity.getPrimaryFilters(), secondaryFilter) \u0026\u0026\n              !matchFilter(entity.getOtherInfo(), secondaryFilter)) {\n            flag \u003d false;\n            break;\n          }\n        }\n        if (!flag) {\n          continue;\n        }\n      }\n      entitiesSelected.add(entity);\n    }\n    List\u003cTimelineEntity\u003e entitiesToReturn \u003d new ArrayList\u003cTimelineEntity\u003e();\n    for (TimelineEntity entitySelected : entitiesSelected) {\n      entitiesToReturn.add(maskFields(entitySelected, fields));\n    }\n    Collections.sort(entitiesToReturn);\n    TimelineEntities entitiesWrapper \u003d new TimelineEntities();\n    entitiesWrapper.setEntities(entitiesToReturn);\n    return entitiesWrapper;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/MemoryTimelineStore.java",
      "extendedDetails": {
        "oldValue": "[public]",
        "newValue": "[public, synchronized]"
      }
    },
    "001078e0677e39b962ca1da81fc34d7ac9a7e65c": {
      "type": "Yfilerename",
      "commitMessage": "YARN-2107. Refactored timeline classes into o.a.h.y.s.timeline package. Contributed by Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1598094 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/05/14 11:09 AM",
      "commitName": "001078e0677e39b962ca1da81fc34d7ac9a7e65c",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "28/05/14 10:44 AM",
      "commitNameOld": "cfd8647d0f20c08761f908be1f5b718c1c372498",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public TimelineEntities getEntities(String entityType, Long limit,\n      Long windowStart, Long windowEnd, String fromId, Long fromTs,\n      NameValuePair primaryFilter, Collection\u003cNameValuePair\u003e secondaryFilters,\n      EnumSet\u003cField\u003e fields) {\n    if (limit \u003d\u003d null) {\n      limit \u003d DEFAULT_LIMIT;\n    }\n    if (windowStart \u003d\u003d null) {\n      windowStart \u003d Long.MIN_VALUE;\n    }\n    if (windowEnd \u003d\u003d null) {\n      windowEnd \u003d Long.MAX_VALUE;\n    }\n    if (fields \u003d\u003d null) {\n      fields \u003d EnumSet.allOf(Field.class);\n    }\n\n    Iterator\u003cTimelineEntity\u003e entityIterator \u003d null;\n    if (fromId !\u003d null) {\n      TimelineEntity firstEntity \u003d entities.get(new EntityIdentifier(fromId,\n          entityType));\n      if (firstEntity \u003d\u003d null) {\n        return new TimelineEntities();\n      } else {\n        entityIterator \u003d new TreeSet\u003cTimelineEntity\u003e(entities.values())\n            .tailSet(firstEntity, true).iterator();\n      }\n    }\n    if (entityIterator \u003d\u003d null) {\n      entityIterator \u003d new PriorityQueue\u003cTimelineEntity\u003e(entities.values())\n          .iterator();\n    }\n\n    List\u003cTimelineEntity\u003e entitiesSelected \u003d new ArrayList\u003cTimelineEntity\u003e();\n    while (entityIterator.hasNext()) {\n      TimelineEntity entity \u003d entityIterator.next();\n      if (entitiesSelected.size() \u003e\u003d limit) {\n        break;\n      }\n      if (!entity.getEntityType().equals(entityType)) {\n        continue;\n      }\n      if (entity.getStartTime() \u003c\u003d windowStart) {\n        continue;\n      }\n      if (entity.getStartTime() \u003e windowEnd) {\n        continue;\n      }\n      if (fromTs !\u003d null \u0026\u0026 entityInsertTimes.get(new EntityIdentifier(\n          entity.getEntityId(), entity.getEntityType())) \u003e fromTs) {\n        continue;\n      }\n      if (primaryFilter !\u003d null \u0026\u0026\n          !matchPrimaryFilter(entity.getPrimaryFilters(), primaryFilter)) {\n        continue;\n      }\n      if (secondaryFilters !\u003d null) { // AND logic\n        boolean flag \u003d true;\n        for (NameValuePair secondaryFilter : secondaryFilters) {\n          if (secondaryFilter !\u003d null \u0026\u0026 !matchPrimaryFilter(\n              entity.getPrimaryFilters(), secondaryFilter) \u0026\u0026\n              !matchFilter(entity.getOtherInfo(), secondaryFilter)) {\n            flag \u003d false;\n            break;\n          }\n        }\n        if (!flag) {\n          continue;\n        }\n      }\n      entitiesSelected.add(entity);\n    }\n    List\u003cTimelineEntity\u003e entitiesToReturn \u003d new ArrayList\u003cTimelineEntity\u003e();\n    for (TimelineEntity entitySelected : entitiesSelected) {\n      entitiesToReturn.add(maskFields(entitySelected, fields));\n    }\n    Collections.sort(entitiesToReturn);\n    TimelineEntities entitiesWrapper \u003d new TimelineEntities();\n    entitiesWrapper.setEntities(entitiesToReturn);\n    return entitiesWrapper;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/MemoryTimelineStore.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/timeline/MemoryTimelineStore.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/MemoryTimelineStore.java"
      }
    },
    "0f1eda6bbf895a1239b25cdf8b17fabd3759e806": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-1838. Enhanced timeline service getEntities API to get entities from a given entity ID or insertion timestamp. Contributed by Billie Rinaldi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1580960 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/03/14 11:14 AM",
      "commitName": "0f1eda6bbf895a1239b25cdf8b17fabd3759e806",
      "commitAuthor": "Zhijie Shen",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-1838. Enhanced timeline service getEntities API to get entities from a given entity ID or insertion timestamp. Contributed by Billie Rinaldi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1580960 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "24/03/14 11:14 AM",
          "commitName": "0f1eda6bbf895a1239b25cdf8b17fabd3759e806",
          "commitAuthor": "Zhijie Shen",
          "commitDateOld": "03/03/14 4:20 PM",
          "commitNameOld": "33714d9ad66622f545a030a7d3df94f4b0e73794",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 20.75,
          "commitsBetweenForRepo": 168,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,58 +1,81 @@\n   public TimelineEntities getEntities(String entityType, Long limit,\n-      Long windowStart, Long windowEnd, NameValuePair primaryFilter,\n-      Collection\u003cNameValuePair\u003e secondaryFilters, EnumSet\u003cField\u003e fields) {\n+      Long windowStart, Long windowEnd, String fromId, Long fromTs,\n+      NameValuePair primaryFilter, Collection\u003cNameValuePair\u003e secondaryFilters,\n+      EnumSet\u003cField\u003e fields) {\n     if (limit \u003d\u003d null) {\n       limit \u003d DEFAULT_LIMIT;\n     }\n     if (windowStart \u003d\u003d null) {\n       windowStart \u003d Long.MIN_VALUE;\n     }\n     if (windowEnd \u003d\u003d null) {\n       windowEnd \u003d Long.MAX_VALUE;\n     }\n     if (fields \u003d\u003d null) {\n       fields \u003d EnumSet.allOf(Field.class);\n     }\n+\n+    Iterator\u003cTimelineEntity\u003e entityIterator \u003d null;\n+    if (fromId !\u003d null) {\n+      TimelineEntity firstEntity \u003d entities.get(new EntityIdentifier(fromId,\n+          entityType));\n+      if (firstEntity \u003d\u003d null) {\n+        return new TimelineEntities();\n+      } else {\n+        entityIterator \u003d new TreeSet\u003cTimelineEntity\u003e(entities.values())\n+            .tailSet(firstEntity, true).iterator();\n+      }\n+    }\n+    if (entityIterator \u003d\u003d null) {\n+      entityIterator \u003d new PriorityQueue\u003cTimelineEntity\u003e(entities.values())\n+          .iterator();\n+    }\n+\n     List\u003cTimelineEntity\u003e entitiesSelected \u003d new ArrayList\u003cTimelineEntity\u003e();\n-    for (TimelineEntity entity : new PriorityQueue\u003cTimelineEntity\u003e(entities.values())) {\n+    while (entityIterator.hasNext()) {\n+      TimelineEntity entity \u003d entityIterator.next();\n       if (entitiesSelected.size() \u003e\u003d limit) {\n         break;\n       }\n       if (!entity.getEntityType().equals(entityType)) {\n         continue;\n       }\n       if (entity.getStartTime() \u003c\u003d windowStart) {\n         continue;\n       }\n       if (entity.getStartTime() \u003e windowEnd) {\n         continue;\n       }\n+      if (fromTs !\u003d null \u0026\u0026 entityInsertTimes.get(new EntityIdentifier(\n+          entity.getEntityId(), entity.getEntityType())) \u003e fromTs) {\n+        continue;\n+      }\n       if (primaryFilter !\u003d null \u0026\u0026\n           !matchPrimaryFilter(entity.getPrimaryFilters(), primaryFilter)) {\n         continue;\n       }\n       if (secondaryFilters !\u003d null) { // AND logic\n         boolean flag \u003d true;\n         for (NameValuePair secondaryFilter : secondaryFilters) {\n           if (secondaryFilter !\u003d null \u0026\u0026 !matchPrimaryFilter(\n               entity.getPrimaryFilters(), secondaryFilter) \u0026\u0026\n               !matchFilter(entity.getOtherInfo(), secondaryFilter)) {\n             flag \u003d false;\n             break;\n           }\n         }\n         if (!flag) {\n           continue;\n         }\n       }\n       entitiesSelected.add(entity);\n     }\n     List\u003cTimelineEntity\u003e entitiesToReturn \u003d new ArrayList\u003cTimelineEntity\u003e();\n     for (TimelineEntity entitySelected : entitiesSelected) {\n       entitiesToReturn.add(maskFields(entitySelected, fields));\n     }\n     Collections.sort(entitiesToReturn);\n     TimelineEntities entitiesWrapper \u003d new TimelineEntities();\n     entitiesWrapper.setEntities(entitiesToReturn);\n     return entitiesWrapper;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public TimelineEntities getEntities(String entityType, Long limit,\n      Long windowStart, Long windowEnd, String fromId, Long fromTs,\n      NameValuePair primaryFilter, Collection\u003cNameValuePair\u003e secondaryFilters,\n      EnumSet\u003cField\u003e fields) {\n    if (limit \u003d\u003d null) {\n      limit \u003d DEFAULT_LIMIT;\n    }\n    if (windowStart \u003d\u003d null) {\n      windowStart \u003d Long.MIN_VALUE;\n    }\n    if (windowEnd \u003d\u003d null) {\n      windowEnd \u003d Long.MAX_VALUE;\n    }\n    if (fields \u003d\u003d null) {\n      fields \u003d EnumSet.allOf(Field.class);\n    }\n\n    Iterator\u003cTimelineEntity\u003e entityIterator \u003d null;\n    if (fromId !\u003d null) {\n      TimelineEntity firstEntity \u003d entities.get(new EntityIdentifier(fromId,\n          entityType));\n      if (firstEntity \u003d\u003d null) {\n        return new TimelineEntities();\n      } else {\n        entityIterator \u003d new TreeSet\u003cTimelineEntity\u003e(entities.values())\n            .tailSet(firstEntity, true).iterator();\n      }\n    }\n    if (entityIterator \u003d\u003d null) {\n      entityIterator \u003d new PriorityQueue\u003cTimelineEntity\u003e(entities.values())\n          .iterator();\n    }\n\n    List\u003cTimelineEntity\u003e entitiesSelected \u003d new ArrayList\u003cTimelineEntity\u003e();\n    while (entityIterator.hasNext()) {\n      TimelineEntity entity \u003d entityIterator.next();\n      if (entitiesSelected.size() \u003e\u003d limit) {\n        break;\n      }\n      if (!entity.getEntityType().equals(entityType)) {\n        continue;\n      }\n      if (entity.getStartTime() \u003c\u003d windowStart) {\n        continue;\n      }\n      if (entity.getStartTime() \u003e windowEnd) {\n        continue;\n      }\n      if (fromTs !\u003d null \u0026\u0026 entityInsertTimes.get(new EntityIdentifier(\n          entity.getEntityId(), entity.getEntityType())) \u003e fromTs) {\n        continue;\n      }\n      if (primaryFilter !\u003d null \u0026\u0026\n          !matchPrimaryFilter(entity.getPrimaryFilters(), primaryFilter)) {\n        continue;\n      }\n      if (secondaryFilters !\u003d null) { // AND logic\n        boolean flag \u003d true;\n        for (NameValuePair secondaryFilter : secondaryFilters) {\n          if (secondaryFilter !\u003d null \u0026\u0026 !matchPrimaryFilter(\n              entity.getPrimaryFilters(), secondaryFilter) \u0026\u0026\n              !matchFilter(entity.getOtherInfo(), secondaryFilter)) {\n            flag \u003d false;\n            break;\n          }\n        }\n        if (!flag) {\n          continue;\n        }\n      }\n      entitiesSelected.add(entity);\n    }\n    List\u003cTimelineEntity\u003e entitiesToReturn \u003d new ArrayList\u003cTimelineEntity\u003e();\n    for (TimelineEntity entitySelected : entitiesSelected) {\n      entitiesToReturn.add(maskFields(entitySelected, fields));\n    }\n    Collections.sort(entitiesToReturn);\n    TimelineEntities entitiesWrapper \u003d new TimelineEntities();\n    entitiesWrapper.setEntities(entitiesToReturn);\n    return entitiesWrapper;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/timeline/MemoryTimelineStore.java",
          "extendedDetails": {
            "oldValue": "[entityType-String, limit-Long, windowStart-Long, windowEnd-Long, primaryFilter-NameValuePair, secondaryFilters-Collection\u003cNameValuePair\u003e, fields-EnumSet\u003cField\u003e]",
            "newValue": "[entityType-String, limit-Long, windowStart-Long, windowEnd-Long, fromId-String, fromTs-Long, primaryFilter-NameValuePair, secondaryFilters-Collection\u003cNameValuePair\u003e, fields-EnumSet\u003cField\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1838. Enhanced timeline service getEntities API to get entities from a given entity ID or insertion timestamp. Contributed by Billie Rinaldi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1580960 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "24/03/14 11:14 AM",
          "commitName": "0f1eda6bbf895a1239b25cdf8b17fabd3759e806",
          "commitAuthor": "Zhijie Shen",
          "commitDateOld": "03/03/14 4:20 PM",
          "commitNameOld": "33714d9ad66622f545a030a7d3df94f4b0e73794",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 20.75,
          "commitsBetweenForRepo": 168,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,58 +1,81 @@\n   public TimelineEntities getEntities(String entityType, Long limit,\n-      Long windowStart, Long windowEnd, NameValuePair primaryFilter,\n-      Collection\u003cNameValuePair\u003e secondaryFilters, EnumSet\u003cField\u003e fields) {\n+      Long windowStart, Long windowEnd, String fromId, Long fromTs,\n+      NameValuePair primaryFilter, Collection\u003cNameValuePair\u003e secondaryFilters,\n+      EnumSet\u003cField\u003e fields) {\n     if (limit \u003d\u003d null) {\n       limit \u003d DEFAULT_LIMIT;\n     }\n     if (windowStart \u003d\u003d null) {\n       windowStart \u003d Long.MIN_VALUE;\n     }\n     if (windowEnd \u003d\u003d null) {\n       windowEnd \u003d Long.MAX_VALUE;\n     }\n     if (fields \u003d\u003d null) {\n       fields \u003d EnumSet.allOf(Field.class);\n     }\n+\n+    Iterator\u003cTimelineEntity\u003e entityIterator \u003d null;\n+    if (fromId !\u003d null) {\n+      TimelineEntity firstEntity \u003d entities.get(new EntityIdentifier(fromId,\n+          entityType));\n+      if (firstEntity \u003d\u003d null) {\n+        return new TimelineEntities();\n+      } else {\n+        entityIterator \u003d new TreeSet\u003cTimelineEntity\u003e(entities.values())\n+            .tailSet(firstEntity, true).iterator();\n+      }\n+    }\n+    if (entityIterator \u003d\u003d null) {\n+      entityIterator \u003d new PriorityQueue\u003cTimelineEntity\u003e(entities.values())\n+          .iterator();\n+    }\n+\n     List\u003cTimelineEntity\u003e entitiesSelected \u003d new ArrayList\u003cTimelineEntity\u003e();\n-    for (TimelineEntity entity : new PriorityQueue\u003cTimelineEntity\u003e(entities.values())) {\n+    while (entityIterator.hasNext()) {\n+      TimelineEntity entity \u003d entityIterator.next();\n       if (entitiesSelected.size() \u003e\u003d limit) {\n         break;\n       }\n       if (!entity.getEntityType().equals(entityType)) {\n         continue;\n       }\n       if (entity.getStartTime() \u003c\u003d windowStart) {\n         continue;\n       }\n       if (entity.getStartTime() \u003e windowEnd) {\n         continue;\n       }\n+      if (fromTs !\u003d null \u0026\u0026 entityInsertTimes.get(new EntityIdentifier(\n+          entity.getEntityId(), entity.getEntityType())) \u003e fromTs) {\n+        continue;\n+      }\n       if (primaryFilter !\u003d null \u0026\u0026\n           !matchPrimaryFilter(entity.getPrimaryFilters(), primaryFilter)) {\n         continue;\n       }\n       if (secondaryFilters !\u003d null) { // AND logic\n         boolean flag \u003d true;\n         for (NameValuePair secondaryFilter : secondaryFilters) {\n           if (secondaryFilter !\u003d null \u0026\u0026 !matchPrimaryFilter(\n               entity.getPrimaryFilters(), secondaryFilter) \u0026\u0026\n               !matchFilter(entity.getOtherInfo(), secondaryFilter)) {\n             flag \u003d false;\n             break;\n           }\n         }\n         if (!flag) {\n           continue;\n         }\n       }\n       entitiesSelected.add(entity);\n     }\n     List\u003cTimelineEntity\u003e entitiesToReturn \u003d new ArrayList\u003cTimelineEntity\u003e();\n     for (TimelineEntity entitySelected : entitiesSelected) {\n       entitiesToReturn.add(maskFields(entitySelected, fields));\n     }\n     Collections.sort(entitiesToReturn);\n     TimelineEntities entitiesWrapper \u003d new TimelineEntities();\n     entitiesWrapper.setEntities(entitiesToReturn);\n     return entitiesWrapper;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public TimelineEntities getEntities(String entityType, Long limit,\n      Long windowStart, Long windowEnd, String fromId, Long fromTs,\n      NameValuePair primaryFilter, Collection\u003cNameValuePair\u003e secondaryFilters,\n      EnumSet\u003cField\u003e fields) {\n    if (limit \u003d\u003d null) {\n      limit \u003d DEFAULT_LIMIT;\n    }\n    if (windowStart \u003d\u003d null) {\n      windowStart \u003d Long.MIN_VALUE;\n    }\n    if (windowEnd \u003d\u003d null) {\n      windowEnd \u003d Long.MAX_VALUE;\n    }\n    if (fields \u003d\u003d null) {\n      fields \u003d EnumSet.allOf(Field.class);\n    }\n\n    Iterator\u003cTimelineEntity\u003e entityIterator \u003d null;\n    if (fromId !\u003d null) {\n      TimelineEntity firstEntity \u003d entities.get(new EntityIdentifier(fromId,\n          entityType));\n      if (firstEntity \u003d\u003d null) {\n        return new TimelineEntities();\n      } else {\n        entityIterator \u003d new TreeSet\u003cTimelineEntity\u003e(entities.values())\n            .tailSet(firstEntity, true).iterator();\n      }\n    }\n    if (entityIterator \u003d\u003d null) {\n      entityIterator \u003d new PriorityQueue\u003cTimelineEntity\u003e(entities.values())\n          .iterator();\n    }\n\n    List\u003cTimelineEntity\u003e entitiesSelected \u003d new ArrayList\u003cTimelineEntity\u003e();\n    while (entityIterator.hasNext()) {\n      TimelineEntity entity \u003d entityIterator.next();\n      if (entitiesSelected.size() \u003e\u003d limit) {\n        break;\n      }\n      if (!entity.getEntityType().equals(entityType)) {\n        continue;\n      }\n      if (entity.getStartTime() \u003c\u003d windowStart) {\n        continue;\n      }\n      if (entity.getStartTime() \u003e windowEnd) {\n        continue;\n      }\n      if (fromTs !\u003d null \u0026\u0026 entityInsertTimes.get(new EntityIdentifier(\n          entity.getEntityId(), entity.getEntityType())) \u003e fromTs) {\n        continue;\n      }\n      if (primaryFilter !\u003d null \u0026\u0026\n          !matchPrimaryFilter(entity.getPrimaryFilters(), primaryFilter)) {\n        continue;\n      }\n      if (secondaryFilters !\u003d null) { // AND logic\n        boolean flag \u003d true;\n        for (NameValuePair secondaryFilter : secondaryFilters) {\n          if (secondaryFilter !\u003d null \u0026\u0026 !matchPrimaryFilter(\n              entity.getPrimaryFilters(), secondaryFilter) \u0026\u0026\n              !matchFilter(entity.getOtherInfo(), secondaryFilter)) {\n            flag \u003d false;\n            break;\n          }\n        }\n        if (!flag) {\n          continue;\n        }\n      }\n      entitiesSelected.add(entity);\n    }\n    List\u003cTimelineEntity\u003e entitiesToReturn \u003d new ArrayList\u003cTimelineEntity\u003e();\n    for (TimelineEntity entitySelected : entitiesSelected) {\n      entitiesToReturn.add(maskFields(entitySelected, fields));\n    }\n    Collections.sort(entitiesToReturn);\n    TimelineEntities entitiesWrapper \u003d new TimelineEntities();\n    entitiesWrapper.setEntities(entitiesToReturn);\n    return entitiesWrapper;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/timeline/MemoryTimelineStore.java",
          "extendedDetails": {}
        }
      ]
    },
    "33714d9ad66622f545a030a7d3df94f4b0e73794": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1729. Made TimelineWebServices deserialize the string primary- and secondary-filters param into the JSON-compatible object. Contributed by Billie Rinaldi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1573825 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/03/14 4:20 PM",
      "commitName": "33714d9ad66622f545a030a7d3df94f4b0e73794",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "22/02/14 12:55 PM",
      "commitNameOld": "84425fb435cb603fd8adcc2f76631c0244175310",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 9.14,
      "commitsBetweenForRepo": 60,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,58 @@\n   public TimelineEntities getEntities(String entityType, Long limit,\n       Long windowStart, Long windowEnd, NameValuePair primaryFilter,\n       Collection\u003cNameValuePair\u003e secondaryFilters, EnumSet\u003cField\u003e fields) {\n     if (limit \u003d\u003d null) {\n       limit \u003d DEFAULT_LIMIT;\n     }\n     if (windowStart \u003d\u003d null) {\n       windowStart \u003d Long.MIN_VALUE;\n     }\n     if (windowEnd \u003d\u003d null) {\n       windowEnd \u003d Long.MAX_VALUE;\n     }\n     if (fields \u003d\u003d null) {\n       fields \u003d EnumSet.allOf(Field.class);\n     }\n     List\u003cTimelineEntity\u003e entitiesSelected \u003d new ArrayList\u003cTimelineEntity\u003e();\n     for (TimelineEntity entity : new PriorityQueue\u003cTimelineEntity\u003e(entities.values())) {\n       if (entitiesSelected.size() \u003e\u003d limit) {\n         break;\n       }\n       if (!entity.getEntityType().equals(entityType)) {\n         continue;\n       }\n       if (entity.getStartTime() \u003c\u003d windowStart) {\n         continue;\n       }\n       if (entity.getStartTime() \u003e windowEnd) {\n         continue;\n       }\n       if (primaryFilter !\u003d null \u0026\u0026\n           !matchPrimaryFilter(entity.getPrimaryFilters(), primaryFilter)) {\n         continue;\n       }\n-      if (secondaryFilters !\u003d null) { // OR logic\n-        boolean flag \u003d false;\n+      if (secondaryFilters !\u003d null) { // AND logic\n+        boolean flag \u003d true;\n         for (NameValuePair secondaryFilter : secondaryFilters) {\n-          if (secondaryFilter !\u003d null \u0026\u0026\n-              matchFilter(entity.getOtherInfo(), secondaryFilter)) {\n-            flag \u003d true;\n+          if (secondaryFilter !\u003d null \u0026\u0026 !matchPrimaryFilter(\n+              entity.getPrimaryFilters(), secondaryFilter) \u0026\u0026\n+              !matchFilter(entity.getOtherInfo(), secondaryFilter)) {\n+            flag \u003d false;\n             break;\n           }\n         }\n         if (!flag) {\n           continue;\n         }\n       }\n       entitiesSelected.add(entity);\n     }\n     List\u003cTimelineEntity\u003e entitiesToReturn \u003d new ArrayList\u003cTimelineEntity\u003e();\n     for (TimelineEntity entitySelected : entitiesSelected) {\n       entitiesToReturn.add(maskFields(entitySelected, fields));\n     }\n     Collections.sort(entitiesToReturn);\n     TimelineEntities entitiesWrapper \u003d new TimelineEntities();\n     entitiesWrapper.setEntities(entitiesToReturn);\n     return entitiesWrapper;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineEntities getEntities(String entityType, Long limit,\n      Long windowStart, Long windowEnd, NameValuePair primaryFilter,\n      Collection\u003cNameValuePair\u003e secondaryFilters, EnumSet\u003cField\u003e fields) {\n    if (limit \u003d\u003d null) {\n      limit \u003d DEFAULT_LIMIT;\n    }\n    if (windowStart \u003d\u003d null) {\n      windowStart \u003d Long.MIN_VALUE;\n    }\n    if (windowEnd \u003d\u003d null) {\n      windowEnd \u003d Long.MAX_VALUE;\n    }\n    if (fields \u003d\u003d null) {\n      fields \u003d EnumSet.allOf(Field.class);\n    }\n    List\u003cTimelineEntity\u003e entitiesSelected \u003d new ArrayList\u003cTimelineEntity\u003e();\n    for (TimelineEntity entity : new PriorityQueue\u003cTimelineEntity\u003e(entities.values())) {\n      if (entitiesSelected.size() \u003e\u003d limit) {\n        break;\n      }\n      if (!entity.getEntityType().equals(entityType)) {\n        continue;\n      }\n      if (entity.getStartTime() \u003c\u003d windowStart) {\n        continue;\n      }\n      if (entity.getStartTime() \u003e windowEnd) {\n        continue;\n      }\n      if (primaryFilter !\u003d null \u0026\u0026\n          !matchPrimaryFilter(entity.getPrimaryFilters(), primaryFilter)) {\n        continue;\n      }\n      if (secondaryFilters !\u003d null) { // AND logic\n        boolean flag \u003d true;\n        for (NameValuePair secondaryFilter : secondaryFilters) {\n          if (secondaryFilter !\u003d null \u0026\u0026 !matchPrimaryFilter(\n              entity.getPrimaryFilters(), secondaryFilter) \u0026\u0026\n              !matchFilter(entity.getOtherInfo(), secondaryFilter)) {\n            flag \u003d false;\n            break;\n          }\n        }\n        if (!flag) {\n          continue;\n        }\n      }\n      entitiesSelected.add(entity);\n    }\n    List\u003cTimelineEntity\u003e entitiesToReturn \u003d new ArrayList\u003cTimelineEntity\u003e();\n    for (TimelineEntity entitySelected : entitiesSelected) {\n      entitiesToReturn.add(maskFields(entitySelected, fields));\n    }\n    Collections.sort(entitiesToReturn);\n    TimelineEntities entitiesWrapper \u003d new TimelineEntities();\n    entitiesWrapper.setEntities(entitiesToReturn);\n    return entitiesWrapper;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/timeline/MemoryTimelineStore.java",
      "extendedDetails": {}
    },
    "84425fb435cb603fd8adcc2f76631c0244175310": {
      "type": "Ymultichange(Yfilerename,Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-1687. Renamed user-facing records for the timeline-service to be simply named after \u0027timeline\u0027 instead of \u0027apptimeline\u0027. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1570922 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/02/14 12:55 PM",
      "commitName": "84425fb435cb603fd8adcc2f76631c0244175310",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-1687. Renamed user-facing records for the timeline-service to be simply named after \u0027timeline\u0027 instead of \u0027apptimeline\u0027. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1570922 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/02/14 12:55 PM",
          "commitName": "84425fb435cb603fd8adcc2f76631c0244175310",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "22/02/14 12:46 PM",
          "commitNameOld": "e06226126cd89d0cf8b4ef80a88659b248579231",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,57 +1,57 @@\n-  public ATSEntities getEntities(String entityType, Long limit,\n+  public TimelineEntities getEntities(String entityType, Long limit,\n       Long windowStart, Long windowEnd, NameValuePair primaryFilter,\n       Collection\u003cNameValuePair\u003e secondaryFilters, EnumSet\u003cField\u003e fields) {\n     if (limit \u003d\u003d null) {\n       limit \u003d DEFAULT_LIMIT;\n     }\n     if (windowStart \u003d\u003d null) {\n       windowStart \u003d Long.MIN_VALUE;\n     }\n     if (windowEnd \u003d\u003d null) {\n       windowEnd \u003d Long.MAX_VALUE;\n     }\n     if (fields \u003d\u003d null) {\n       fields \u003d EnumSet.allOf(Field.class);\n     }\n-    List\u003cATSEntity\u003e entitiesSelected \u003d new ArrayList\u003cATSEntity\u003e();\n-    for (ATSEntity entity : new PriorityQueue\u003cATSEntity\u003e(entities.values())) {\n+    List\u003cTimelineEntity\u003e entitiesSelected \u003d new ArrayList\u003cTimelineEntity\u003e();\n+    for (TimelineEntity entity : new PriorityQueue\u003cTimelineEntity\u003e(entities.values())) {\n       if (entitiesSelected.size() \u003e\u003d limit) {\n         break;\n       }\n       if (!entity.getEntityType().equals(entityType)) {\n         continue;\n       }\n       if (entity.getStartTime() \u003c\u003d windowStart) {\n         continue;\n       }\n       if (entity.getStartTime() \u003e windowEnd) {\n         continue;\n       }\n       if (primaryFilter !\u003d null \u0026\u0026\n           !matchPrimaryFilter(entity.getPrimaryFilters(), primaryFilter)) {\n         continue;\n       }\n       if (secondaryFilters !\u003d null) { // OR logic\n         boolean flag \u003d false;\n         for (NameValuePair secondaryFilter : secondaryFilters) {\n           if (secondaryFilter !\u003d null \u0026\u0026\n               matchFilter(entity.getOtherInfo(), secondaryFilter)) {\n             flag \u003d true;\n             break;\n           }\n         }\n         if (!flag) {\n           continue;\n         }\n       }\n       entitiesSelected.add(entity);\n     }\n-    List\u003cATSEntity\u003e entitiesToReturn \u003d new ArrayList\u003cATSEntity\u003e();\n-    for (ATSEntity entitySelected : entitiesSelected) {\n+    List\u003cTimelineEntity\u003e entitiesToReturn \u003d new ArrayList\u003cTimelineEntity\u003e();\n+    for (TimelineEntity entitySelected : entitiesSelected) {\n       entitiesToReturn.add(maskFields(entitySelected, fields));\n     }\n     Collections.sort(entitiesToReturn);\n-    ATSEntities entitiesWrapper \u003d new ATSEntities();\n+    TimelineEntities entitiesWrapper \u003d new TimelineEntities();\n     entitiesWrapper.setEntities(entitiesToReturn);\n     return entitiesWrapper;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public TimelineEntities getEntities(String entityType, Long limit,\n      Long windowStart, Long windowEnd, NameValuePair primaryFilter,\n      Collection\u003cNameValuePair\u003e secondaryFilters, EnumSet\u003cField\u003e fields) {\n    if (limit \u003d\u003d null) {\n      limit \u003d DEFAULT_LIMIT;\n    }\n    if (windowStart \u003d\u003d null) {\n      windowStart \u003d Long.MIN_VALUE;\n    }\n    if (windowEnd \u003d\u003d null) {\n      windowEnd \u003d Long.MAX_VALUE;\n    }\n    if (fields \u003d\u003d null) {\n      fields \u003d EnumSet.allOf(Field.class);\n    }\n    List\u003cTimelineEntity\u003e entitiesSelected \u003d new ArrayList\u003cTimelineEntity\u003e();\n    for (TimelineEntity entity : new PriorityQueue\u003cTimelineEntity\u003e(entities.values())) {\n      if (entitiesSelected.size() \u003e\u003d limit) {\n        break;\n      }\n      if (!entity.getEntityType().equals(entityType)) {\n        continue;\n      }\n      if (entity.getStartTime() \u003c\u003d windowStart) {\n        continue;\n      }\n      if (entity.getStartTime() \u003e windowEnd) {\n        continue;\n      }\n      if (primaryFilter !\u003d null \u0026\u0026\n          !matchPrimaryFilter(entity.getPrimaryFilters(), primaryFilter)) {\n        continue;\n      }\n      if (secondaryFilters !\u003d null) { // OR logic\n        boolean flag \u003d false;\n        for (NameValuePair secondaryFilter : secondaryFilters) {\n          if (secondaryFilter !\u003d null \u0026\u0026\n              matchFilter(entity.getOtherInfo(), secondaryFilter)) {\n            flag \u003d true;\n            break;\n          }\n        }\n        if (!flag) {\n          continue;\n        }\n      }\n      entitiesSelected.add(entity);\n    }\n    List\u003cTimelineEntity\u003e entitiesToReturn \u003d new ArrayList\u003cTimelineEntity\u003e();\n    for (TimelineEntity entitySelected : entitiesSelected) {\n      entitiesToReturn.add(maskFields(entitySelected, fields));\n    }\n    Collections.sort(entitiesToReturn);\n    TimelineEntities entitiesWrapper \u003d new TimelineEntities();\n    entitiesWrapper.setEntities(entitiesToReturn);\n    return entitiesWrapper;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/timeline/MemoryTimelineStore.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/apptimeline/MemoryApplicationTimelineStore.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/timeline/MemoryTimelineStore.java"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-1687. Renamed user-facing records for the timeline-service to be simply named after \u0027timeline\u0027 instead of \u0027apptimeline\u0027. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1570922 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/02/14 12:55 PM",
          "commitName": "84425fb435cb603fd8adcc2f76631c0244175310",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "22/02/14 12:46 PM",
          "commitNameOld": "e06226126cd89d0cf8b4ef80a88659b248579231",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,57 +1,57 @@\n-  public ATSEntities getEntities(String entityType, Long limit,\n+  public TimelineEntities getEntities(String entityType, Long limit,\n       Long windowStart, Long windowEnd, NameValuePair primaryFilter,\n       Collection\u003cNameValuePair\u003e secondaryFilters, EnumSet\u003cField\u003e fields) {\n     if (limit \u003d\u003d null) {\n       limit \u003d DEFAULT_LIMIT;\n     }\n     if (windowStart \u003d\u003d null) {\n       windowStart \u003d Long.MIN_VALUE;\n     }\n     if (windowEnd \u003d\u003d null) {\n       windowEnd \u003d Long.MAX_VALUE;\n     }\n     if (fields \u003d\u003d null) {\n       fields \u003d EnumSet.allOf(Field.class);\n     }\n-    List\u003cATSEntity\u003e entitiesSelected \u003d new ArrayList\u003cATSEntity\u003e();\n-    for (ATSEntity entity : new PriorityQueue\u003cATSEntity\u003e(entities.values())) {\n+    List\u003cTimelineEntity\u003e entitiesSelected \u003d new ArrayList\u003cTimelineEntity\u003e();\n+    for (TimelineEntity entity : new PriorityQueue\u003cTimelineEntity\u003e(entities.values())) {\n       if (entitiesSelected.size() \u003e\u003d limit) {\n         break;\n       }\n       if (!entity.getEntityType().equals(entityType)) {\n         continue;\n       }\n       if (entity.getStartTime() \u003c\u003d windowStart) {\n         continue;\n       }\n       if (entity.getStartTime() \u003e windowEnd) {\n         continue;\n       }\n       if (primaryFilter !\u003d null \u0026\u0026\n           !matchPrimaryFilter(entity.getPrimaryFilters(), primaryFilter)) {\n         continue;\n       }\n       if (secondaryFilters !\u003d null) { // OR logic\n         boolean flag \u003d false;\n         for (NameValuePair secondaryFilter : secondaryFilters) {\n           if (secondaryFilter !\u003d null \u0026\u0026\n               matchFilter(entity.getOtherInfo(), secondaryFilter)) {\n             flag \u003d true;\n             break;\n           }\n         }\n         if (!flag) {\n           continue;\n         }\n       }\n       entitiesSelected.add(entity);\n     }\n-    List\u003cATSEntity\u003e entitiesToReturn \u003d new ArrayList\u003cATSEntity\u003e();\n-    for (ATSEntity entitySelected : entitiesSelected) {\n+    List\u003cTimelineEntity\u003e entitiesToReturn \u003d new ArrayList\u003cTimelineEntity\u003e();\n+    for (TimelineEntity entitySelected : entitiesSelected) {\n       entitiesToReturn.add(maskFields(entitySelected, fields));\n     }\n     Collections.sort(entitiesToReturn);\n-    ATSEntities entitiesWrapper \u003d new ATSEntities();\n+    TimelineEntities entitiesWrapper \u003d new TimelineEntities();\n     entitiesWrapper.setEntities(entitiesToReturn);\n     return entitiesWrapper;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public TimelineEntities getEntities(String entityType, Long limit,\n      Long windowStart, Long windowEnd, NameValuePair primaryFilter,\n      Collection\u003cNameValuePair\u003e secondaryFilters, EnumSet\u003cField\u003e fields) {\n    if (limit \u003d\u003d null) {\n      limit \u003d DEFAULT_LIMIT;\n    }\n    if (windowStart \u003d\u003d null) {\n      windowStart \u003d Long.MIN_VALUE;\n    }\n    if (windowEnd \u003d\u003d null) {\n      windowEnd \u003d Long.MAX_VALUE;\n    }\n    if (fields \u003d\u003d null) {\n      fields \u003d EnumSet.allOf(Field.class);\n    }\n    List\u003cTimelineEntity\u003e entitiesSelected \u003d new ArrayList\u003cTimelineEntity\u003e();\n    for (TimelineEntity entity : new PriorityQueue\u003cTimelineEntity\u003e(entities.values())) {\n      if (entitiesSelected.size() \u003e\u003d limit) {\n        break;\n      }\n      if (!entity.getEntityType().equals(entityType)) {\n        continue;\n      }\n      if (entity.getStartTime() \u003c\u003d windowStart) {\n        continue;\n      }\n      if (entity.getStartTime() \u003e windowEnd) {\n        continue;\n      }\n      if (primaryFilter !\u003d null \u0026\u0026\n          !matchPrimaryFilter(entity.getPrimaryFilters(), primaryFilter)) {\n        continue;\n      }\n      if (secondaryFilters !\u003d null) { // OR logic\n        boolean flag \u003d false;\n        for (NameValuePair secondaryFilter : secondaryFilters) {\n          if (secondaryFilter !\u003d null \u0026\u0026\n              matchFilter(entity.getOtherInfo(), secondaryFilter)) {\n            flag \u003d true;\n            break;\n          }\n        }\n        if (!flag) {\n          continue;\n        }\n      }\n      entitiesSelected.add(entity);\n    }\n    List\u003cTimelineEntity\u003e entitiesToReturn \u003d new ArrayList\u003cTimelineEntity\u003e();\n    for (TimelineEntity entitySelected : entitiesSelected) {\n      entitiesToReturn.add(maskFields(entitySelected, fields));\n    }\n    Collections.sort(entitiesToReturn);\n    TimelineEntities entitiesWrapper \u003d new TimelineEntities();\n    entitiesWrapper.setEntities(entitiesToReturn);\n    return entitiesWrapper;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/timeline/MemoryTimelineStore.java",
          "extendedDetails": {
            "oldValue": "ATSEntities",
            "newValue": "TimelineEntities"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1687. Renamed user-facing records for the timeline-service to be simply named after \u0027timeline\u0027 instead of \u0027apptimeline\u0027. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1570922 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/02/14 12:55 PM",
          "commitName": "84425fb435cb603fd8adcc2f76631c0244175310",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "22/02/14 12:46 PM",
          "commitNameOld": "e06226126cd89d0cf8b4ef80a88659b248579231",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,57 +1,57 @@\n-  public ATSEntities getEntities(String entityType, Long limit,\n+  public TimelineEntities getEntities(String entityType, Long limit,\n       Long windowStart, Long windowEnd, NameValuePair primaryFilter,\n       Collection\u003cNameValuePair\u003e secondaryFilters, EnumSet\u003cField\u003e fields) {\n     if (limit \u003d\u003d null) {\n       limit \u003d DEFAULT_LIMIT;\n     }\n     if (windowStart \u003d\u003d null) {\n       windowStart \u003d Long.MIN_VALUE;\n     }\n     if (windowEnd \u003d\u003d null) {\n       windowEnd \u003d Long.MAX_VALUE;\n     }\n     if (fields \u003d\u003d null) {\n       fields \u003d EnumSet.allOf(Field.class);\n     }\n-    List\u003cATSEntity\u003e entitiesSelected \u003d new ArrayList\u003cATSEntity\u003e();\n-    for (ATSEntity entity : new PriorityQueue\u003cATSEntity\u003e(entities.values())) {\n+    List\u003cTimelineEntity\u003e entitiesSelected \u003d new ArrayList\u003cTimelineEntity\u003e();\n+    for (TimelineEntity entity : new PriorityQueue\u003cTimelineEntity\u003e(entities.values())) {\n       if (entitiesSelected.size() \u003e\u003d limit) {\n         break;\n       }\n       if (!entity.getEntityType().equals(entityType)) {\n         continue;\n       }\n       if (entity.getStartTime() \u003c\u003d windowStart) {\n         continue;\n       }\n       if (entity.getStartTime() \u003e windowEnd) {\n         continue;\n       }\n       if (primaryFilter !\u003d null \u0026\u0026\n           !matchPrimaryFilter(entity.getPrimaryFilters(), primaryFilter)) {\n         continue;\n       }\n       if (secondaryFilters !\u003d null) { // OR logic\n         boolean flag \u003d false;\n         for (NameValuePair secondaryFilter : secondaryFilters) {\n           if (secondaryFilter !\u003d null \u0026\u0026\n               matchFilter(entity.getOtherInfo(), secondaryFilter)) {\n             flag \u003d true;\n             break;\n           }\n         }\n         if (!flag) {\n           continue;\n         }\n       }\n       entitiesSelected.add(entity);\n     }\n-    List\u003cATSEntity\u003e entitiesToReturn \u003d new ArrayList\u003cATSEntity\u003e();\n-    for (ATSEntity entitySelected : entitiesSelected) {\n+    List\u003cTimelineEntity\u003e entitiesToReturn \u003d new ArrayList\u003cTimelineEntity\u003e();\n+    for (TimelineEntity entitySelected : entitiesSelected) {\n       entitiesToReturn.add(maskFields(entitySelected, fields));\n     }\n     Collections.sort(entitiesToReturn);\n-    ATSEntities entitiesWrapper \u003d new ATSEntities();\n+    TimelineEntities entitiesWrapper \u003d new TimelineEntities();\n     entitiesWrapper.setEntities(entitiesToReturn);\n     return entitiesWrapper;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public TimelineEntities getEntities(String entityType, Long limit,\n      Long windowStart, Long windowEnd, NameValuePair primaryFilter,\n      Collection\u003cNameValuePair\u003e secondaryFilters, EnumSet\u003cField\u003e fields) {\n    if (limit \u003d\u003d null) {\n      limit \u003d DEFAULT_LIMIT;\n    }\n    if (windowStart \u003d\u003d null) {\n      windowStart \u003d Long.MIN_VALUE;\n    }\n    if (windowEnd \u003d\u003d null) {\n      windowEnd \u003d Long.MAX_VALUE;\n    }\n    if (fields \u003d\u003d null) {\n      fields \u003d EnumSet.allOf(Field.class);\n    }\n    List\u003cTimelineEntity\u003e entitiesSelected \u003d new ArrayList\u003cTimelineEntity\u003e();\n    for (TimelineEntity entity : new PriorityQueue\u003cTimelineEntity\u003e(entities.values())) {\n      if (entitiesSelected.size() \u003e\u003d limit) {\n        break;\n      }\n      if (!entity.getEntityType().equals(entityType)) {\n        continue;\n      }\n      if (entity.getStartTime() \u003c\u003d windowStart) {\n        continue;\n      }\n      if (entity.getStartTime() \u003e windowEnd) {\n        continue;\n      }\n      if (primaryFilter !\u003d null \u0026\u0026\n          !matchPrimaryFilter(entity.getPrimaryFilters(), primaryFilter)) {\n        continue;\n      }\n      if (secondaryFilters !\u003d null) { // OR logic\n        boolean flag \u003d false;\n        for (NameValuePair secondaryFilter : secondaryFilters) {\n          if (secondaryFilter !\u003d null \u0026\u0026\n              matchFilter(entity.getOtherInfo(), secondaryFilter)) {\n            flag \u003d true;\n            break;\n          }\n        }\n        if (!flag) {\n          continue;\n        }\n      }\n      entitiesSelected.add(entity);\n    }\n    List\u003cTimelineEntity\u003e entitiesToReturn \u003d new ArrayList\u003cTimelineEntity\u003e();\n    for (TimelineEntity entitySelected : entitiesSelected) {\n      entitiesToReturn.add(maskFields(entitySelected, fields));\n    }\n    Collections.sort(entitiesToReturn);\n    TimelineEntities entitiesWrapper \u003d new TimelineEntities();\n    entitiesWrapper.setEntities(entitiesToReturn);\n    return entitiesWrapper;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/timeline/MemoryTimelineStore.java",
          "extendedDetails": {}
        }
      ]
    },
    "e06226126cd89d0cf8b4ef80a88659b248579231": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1732. Changed types of related-entities and primary-filters in the timeline-service to be sets instead of maps. Contributed by Billie Rinaldi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1570914 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/02/14 12:46 PM",
      "commitName": "e06226126cd89d0cf8b4ef80a88659b248579231",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "07/02/14 6:15 PM",
      "commitNameOld": "23b2e43f5d678517e33590d15dec73225b9c5682",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 14.77,
      "commitsBetweenForRepo": 121,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,57 @@\n   public ATSEntities getEntities(String entityType, Long limit,\n       Long windowStart, Long windowEnd, NameValuePair primaryFilter,\n       Collection\u003cNameValuePair\u003e secondaryFilters, EnumSet\u003cField\u003e fields) {\n     if (limit \u003d\u003d null) {\n       limit \u003d DEFAULT_LIMIT;\n     }\n     if (windowStart \u003d\u003d null) {\n       windowStart \u003d Long.MIN_VALUE;\n     }\n     if (windowEnd \u003d\u003d null) {\n       windowEnd \u003d Long.MAX_VALUE;\n     }\n     if (fields \u003d\u003d null) {\n       fields \u003d EnumSet.allOf(Field.class);\n     }\n     List\u003cATSEntity\u003e entitiesSelected \u003d new ArrayList\u003cATSEntity\u003e();\n     for (ATSEntity entity : new PriorityQueue\u003cATSEntity\u003e(entities.values())) {\n       if (entitiesSelected.size() \u003e\u003d limit) {\n         break;\n       }\n       if (!entity.getEntityType().equals(entityType)) {\n         continue;\n       }\n       if (entity.getStartTime() \u003c\u003d windowStart) {\n         continue;\n       }\n       if (entity.getStartTime() \u003e windowEnd) {\n         continue;\n       }\n       if (primaryFilter !\u003d null \u0026\u0026\n-          !matchFilter(entity.getPrimaryFilters(), primaryFilter)) {\n+          !matchPrimaryFilter(entity.getPrimaryFilters(), primaryFilter)) {\n         continue;\n       }\n       if (secondaryFilters !\u003d null) { // OR logic\n         boolean flag \u003d false;\n         for (NameValuePair secondaryFilter : secondaryFilters) {\n           if (secondaryFilter !\u003d null \u0026\u0026\n               matchFilter(entity.getOtherInfo(), secondaryFilter)) {\n             flag \u003d true;\n             break;\n           }\n         }\n         if (!flag) {\n           continue;\n         }\n       }\n       entitiesSelected.add(entity);\n     }\n     List\u003cATSEntity\u003e entitiesToReturn \u003d new ArrayList\u003cATSEntity\u003e();\n     for (ATSEntity entitySelected : entitiesSelected) {\n       entitiesToReturn.add(maskFields(entitySelected, fields));\n     }\n     Collections.sort(entitiesToReturn);\n     ATSEntities entitiesWrapper \u003d new ATSEntities();\n     entitiesWrapper.setEntities(entitiesToReturn);\n     return entitiesWrapper;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ATSEntities getEntities(String entityType, Long limit,\n      Long windowStart, Long windowEnd, NameValuePair primaryFilter,\n      Collection\u003cNameValuePair\u003e secondaryFilters, EnumSet\u003cField\u003e fields) {\n    if (limit \u003d\u003d null) {\n      limit \u003d DEFAULT_LIMIT;\n    }\n    if (windowStart \u003d\u003d null) {\n      windowStart \u003d Long.MIN_VALUE;\n    }\n    if (windowEnd \u003d\u003d null) {\n      windowEnd \u003d Long.MAX_VALUE;\n    }\n    if (fields \u003d\u003d null) {\n      fields \u003d EnumSet.allOf(Field.class);\n    }\n    List\u003cATSEntity\u003e entitiesSelected \u003d new ArrayList\u003cATSEntity\u003e();\n    for (ATSEntity entity : new PriorityQueue\u003cATSEntity\u003e(entities.values())) {\n      if (entitiesSelected.size() \u003e\u003d limit) {\n        break;\n      }\n      if (!entity.getEntityType().equals(entityType)) {\n        continue;\n      }\n      if (entity.getStartTime() \u003c\u003d windowStart) {\n        continue;\n      }\n      if (entity.getStartTime() \u003e windowEnd) {\n        continue;\n      }\n      if (primaryFilter !\u003d null \u0026\u0026\n          !matchPrimaryFilter(entity.getPrimaryFilters(), primaryFilter)) {\n        continue;\n      }\n      if (secondaryFilters !\u003d null) { // OR logic\n        boolean flag \u003d false;\n        for (NameValuePair secondaryFilter : secondaryFilters) {\n          if (secondaryFilter !\u003d null \u0026\u0026\n              matchFilter(entity.getOtherInfo(), secondaryFilter)) {\n            flag \u003d true;\n            break;\n          }\n        }\n        if (!flag) {\n          continue;\n        }\n      }\n      entitiesSelected.add(entity);\n    }\n    List\u003cATSEntity\u003e entitiesToReturn \u003d new ArrayList\u003cATSEntity\u003e();\n    for (ATSEntity entitySelected : entitiesSelected) {\n      entitiesToReturn.add(maskFields(entitySelected, fields));\n    }\n    Collections.sort(entitiesToReturn);\n    ATSEntities entitiesWrapper \u003d new ATSEntities();\n    entitiesWrapper.setEntities(entitiesToReturn);\n    return entitiesWrapper;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/apptimeline/MemoryApplicationTimelineStore.java",
      "extendedDetails": {}
    },
    "96578f0e01ba751175d4bcbad48d6f679e662382": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1634. Added a testable in-memory implementation of ApplicationTimelineStore. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1564583 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/02/14 4:32 PM",
      "commitName": "96578f0e01ba751175d4bcbad48d6f679e662382",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,57 @@\n+  public ATSEntities getEntities(String entityType, Long limit,\n+      Long windowStart, Long windowEnd, NameValuePair primaryFilter,\n+      Collection\u003cNameValuePair\u003e secondaryFilters, EnumSet\u003cField\u003e fields) {\n+    if (limit \u003d\u003d null) {\n+      limit \u003d DEFAULT_LIMIT;\n+    }\n+    if (windowStart \u003d\u003d null) {\n+      windowStart \u003d Long.MIN_VALUE;\n+    }\n+    if (windowEnd \u003d\u003d null) {\n+      windowEnd \u003d Long.MAX_VALUE;\n+    }\n+    if (fields \u003d\u003d null) {\n+      fields \u003d EnumSet.allOf(Field.class);\n+    }\n+    List\u003cATSEntity\u003e entitiesSelected \u003d new ArrayList\u003cATSEntity\u003e();\n+    for (ATSEntity entity : new PriorityQueue\u003cATSEntity\u003e(entities.values())) {\n+      if (entitiesSelected.size() \u003e\u003d limit) {\n+        break;\n+      }\n+      if (!entity.getEntityType().equals(entityType)) {\n+        continue;\n+      }\n+      if (entity.getStartTime() \u003c\u003d windowStart) {\n+        continue;\n+      }\n+      if (entity.getStartTime() \u003e windowEnd) {\n+        continue;\n+      }\n+      if (primaryFilter !\u003d null \u0026\u0026\n+          !matchFilter(entity.getPrimaryFilters(), primaryFilter)) {\n+        continue;\n+      }\n+      if (secondaryFilters !\u003d null) { // OR logic\n+        boolean flag \u003d false;\n+        for (NameValuePair secondaryFilter : secondaryFilters) {\n+          if (secondaryFilter !\u003d null \u0026\u0026\n+              matchFilter(entity.getOtherInfo(), secondaryFilter)) {\n+            flag \u003d true;\n+            break;\n+          }\n+        }\n+        if (!flag) {\n+          continue;\n+        }\n+      }\n+      entitiesSelected.add(entity);\n+    }\n+    List\u003cATSEntity\u003e entitiesToReturn \u003d new ArrayList\u003cATSEntity\u003e();\n+    for (ATSEntity entitySelected : entitiesSelected) {\n+      entitiesToReturn.add(maskFields(entitySelected, fields));\n+    }\n+    Collections.sort(entitiesToReturn);\n+    ATSEntities entitiesWrapper \u003d new ATSEntities();\n+    entitiesWrapper.setEntities(entitiesToReturn);\n+    return entitiesWrapper;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public ATSEntities getEntities(String entityType, Long limit,\n      Long windowStart, Long windowEnd, NameValuePair primaryFilter,\n      Collection\u003cNameValuePair\u003e secondaryFilters, EnumSet\u003cField\u003e fields) {\n    if (limit \u003d\u003d null) {\n      limit \u003d DEFAULT_LIMIT;\n    }\n    if (windowStart \u003d\u003d null) {\n      windowStart \u003d Long.MIN_VALUE;\n    }\n    if (windowEnd \u003d\u003d null) {\n      windowEnd \u003d Long.MAX_VALUE;\n    }\n    if (fields \u003d\u003d null) {\n      fields \u003d EnumSet.allOf(Field.class);\n    }\n    List\u003cATSEntity\u003e entitiesSelected \u003d new ArrayList\u003cATSEntity\u003e();\n    for (ATSEntity entity : new PriorityQueue\u003cATSEntity\u003e(entities.values())) {\n      if (entitiesSelected.size() \u003e\u003d limit) {\n        break;\n      }\n      if (!entity.getEntityType().equals(entityType)) {\n        continue;\n      }\n      if (entity.getStartTime() \u003c\u003d windowStart) {\n        continue;\n      }\n      if (entity.getStartTime() \u003e windowEnd) {\n        continue;\n      }\n      if (primaryFilter !\u003d null \u0026\u0026\n          !matchFilter(entity.getPrimaryFilters(), primaryFilter)) {\n        continue;\n      }\n      if (secondaryFilters !\u003d null) { // OR logic\n        boolean flag \u003d false;\n        for (NameValuePair secondaryFilter : secondaryFilters) {\n          if (secondaryFilter !\u003d null \u0026\u0026\n              matchFilter(entity.getOtherInfo(), secondaryFilter)) {\n            flag \u003d true;\n            break;\n          }\n        }\n        if (!flag) {\n          continue;\n        }\n      }\n      entitiesSelected.add(entity);\n    }\n    List\u003cATSEntity\u003e entitiesToReturn \u003d new ArrayList\u003cATSEntity\u003e();\n    for (ATSEntity entitySelected : entitiesSelected) {\n      entitiesToReturn.add(maskFields(entitySelected, fields));\n    }\n    Collections.sort(entitiesToReturn);\n    ATSEntities entitiesWrapper \u003d new ATSEntities();\n    entitiesWrapper.setEntities(entitiesToReturn);\n    return entitiesWrapper;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/apptimeline/MemoryApplicationTimelineStore.java"
    }
  }
}