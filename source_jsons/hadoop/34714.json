{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NMTokenSecretManagerInNM.java",
  "functionName": "recover",
  "functionId": "recover",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/security/NMTokenSecretManagerInNM.java",
  "functionStartLine": 72,
  "functionEndLine": 113,
  "numCommitsSeen": 12,
  "timeTaken": 3202,
  "changeHistory": [
    "65e7469712be6cf393e29ef73cc94727eec81227",
    "2050e0dad661bade3e140d7a5692cfe1999badc3",
    "403ec8ea80d59f209823a7370dc8185fa2c1c368"
  ],
  "changeHistoryShort": {
    "65e7469712be6cf393e29ef73cc94727eec81227": "Ybodychange",
    "2050e0dad661bade3e140d7a5692cfe1999badc3": "Ymultichange(Yparameterchange,Ybodychange)",
    "403ec8ea80d59f209823a7370dc8185fa2c1c368": "Yintroduced"
  },
  "changeHistoryDetails": {
    "65e7469712be6cf393e29ef73cc94727eec81227": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8242. YARN NM: OOM error while reading back the state store on recovery. Contributed by Pradeep Ambati and Kanwaljeet Sachdev\n",
      "commitDate": "20/08/18 8:14 AM",
      "commitName": "65e7469712be6cf393e29ef73cc94727eec81227",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "22/08/17 1:14 AM",
      "commitNameOld": "d5ff57a08fac983f8b5d201064ce07945f0f216e",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 363.29,
      "commitsBetweenForRepo": 3298,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,42 @@\n   public synchronized void recover()\n       throws IOException {\n     RecoveredNMTokensState state \u003d stateStore.loadNMTokensState();\n     MasterKey key \u003d state.getCurrentMasterKey();\n     if (key !\u003d null) {\n       super.currentMasterKey \u003d\n           new MasterKeyData(key, createSecretKey(key.getBytes().array()));\n     }\n \n     key \u003d state.getPreviousMasterKey();\n     if (key !\u003d null) {\n       previousMasterKey \u003d\n           new MasterKeyData(key, createSecretKey(key.getBytes().array()));\n     }\n \n     // restore the serial number from the current master key\n     if (super.currentMasterKey !\u003d null) {\n       super.serialNo \u003d super.currentMasterKey.getMasterKey().getKeyId() + 1;\n     }\n \n-    for (Map.Entry\u003cApplicationAttemptId, MasterKey\u003e entry :\n-         state.getApplicationMasterKeys().entrySet()) {\n-      key \u003d entry.getValue();\n-      oldMasterKeys.put(entry.getKey(),\n-          new MasterKeyData(key, createSecretKey(key.getBytes().array())));\n+    try (RecoveryIterator\u003cMap.Entry\u003cApplicationAttemptId, MasterKey\u003e\u003e it \u003d\n+             state.getIterator()) {\n+      while (it.hasNext()) {\n+        Map.Entry\u003cApplicationAttemptId, MasterKey\u003e entry \u003d it.next();\n+        key \u003d entry.getValue();\n+        oldMasterKeys.put(entry.getKey(),\n+            new MasterKeyData(key, createSecretKey(key.getBytes().array())));\n+      }\n     }\n \n     // reconstruct app to app attempts map\n     appToAppAttemptMap.clear();\n     for (ApplicationAttemptId attempt : oldMasterKeys.keySet()) {\n       ApplicationId app \u003d attempt.getApplicationId();\n       List\u003cApplicationAttemptId\u003e attempts \u003d appToAppAttemptMap.get(app);\n       if (attempts \u003d\u003d null) {\n         attempts \u003d new ArrayList\u003cApplicationAttemptId\u003e();\n         appToAppAttemptMap.put(app, attempts);\n       }\n       attempts.add(attempt);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void recover()\n      throws IOException {\n    RecoveredNMTokensState state \u003d stateStore.loadNMTokensState();\n    MasterKey key \u003d state.getCurrentMasterKey();\n    if (key !\u003d null) {\n      super.currentMasterKey \u003d\n          new MasterKeyData(key, createSecretKey(key.getBytes().array()));\n    }\n\n    key \u003d state.getPreviousMasterKey();\n    if (key !\u003d null) {\n      previousMasterKey \u003d\n          new MasterKeyData(key, createSecretKey(key.getBytes().array()));\n    }\n\n    // restore the serial number from the current master key\n    if (super.currentMasterKey !\u003d null) {\n      super.serialNo \u003d super.currentMasterKey.getMasterKey().getKeyId() + 1;\n    }\n\n    try (RecoveryIterator\u003cMap.Entry\u003cApplicationAttemptId, MasterKey\u003e\u003e it \u003d\n             state.getIterator()) {\n      while (it.hasNext()) {\n        Map.Entry\u003cApplicationAttemptId, MasterKey\u003e entry \u003d it.next();\n        key \u003d entry.getValue();\n        oldMasterKeys.put(entry.getKey(),\n            new MasterKeyData(key, createSecretKey(key.getBytes().array())));\n      }\n    }\n\n    // reconstruct app to app attempts map\n    appToAppAttemptMap.clear();\n    for (ApplicationAttemptId attempt : oldMasterKeys.keySet()) {\n      ApplicationId app \u003d attempt.getApplicationId();\n      List\u003cApplicationAttemptId\u003e attempts \u003d appToAppAttemptMap.get(app);\n      if (attempts \u003d\u003d null) {\n        attempts \u003d new ArrayList\u003cApplicationAttemptId\u003e();\n        appToAppAttemptMap.put(app, attempts);\n      }\n      attempts.add(attempt);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/security/NMTokenSecretManagerInNM.java",
      "extendedDetails": {}
    },
    "2050e0dad661bade3e140d7a5692cfe1999badc3": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-1342. Recover container tokens upon nodemanager restart. Contributed by Jason Lowe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1612995 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/07/14 10:02 PM",
      "commitName": "2050e0dad661bade3e140d7a5692cfe1999badc3",
      "commitAuthor": "Devarajulu K",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-1342. Recover container tokens upon nodemanager restart. Contributed by Jason Lowe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1612995 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "23/07/14 10:02 PM",
          "commitName": "2050e0dad661bade3e140d7a5692cfe1999badc3",
          "commitAuthor": "Devarajulu K",
          "commitDateOld": "17/07/14 4:33 PM",
          "commitNameOld": "403ec8ea80d59f209823a7370dc8185fa2c1c368",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 6.23,
          "commitsBetweenForRepo": 56,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,39 @@\n-  public synchronized void recover(RecoveredNMTokenState state)\n+  public synchronized void recover()\n       throws IOException {\n+    RecoveredNMTokensState state \u003d stateStore.loadNMTokensState();\n     MasterKey key \u003d state.getCurrentMasterKey();\n     if (key !\u003d null) {\n       super.currentMasterKey \u003d\n           new MasterKeyData(key, createSecretKey(key.getBytes().array()));\n     }\n \n     key \u003d state.getPreviousMasterKey();\n     if (key !\u003d null) {\n       previousMasterKey \u003d\n           new MasterKeyData(key, createSecretKey(key.getBytes().array()));\n     }\n \n     // restore the serial number from the current master key\n     if (super.currentMasterKey !\u003d null) {\n       super.serialNo \u003d super.currentMasterKey.getMasterKey().getKeyId() + 1;\n     }\n \n     for (Map.Entry\u003cApplicationAttemptId, MasterKey\u003e entry :\n          state.getApplicationMasterKeys().entrySet()) {\n       key \u003d entry.getValue();\n       oldMasterKeys.put(entry.getKey(),\n           new MasterKeyData(key, createSecretKey(key.getBytes().array())));\n     }\n \n     // reconstruct app to app attempts map\n     appToAppAttemptMap.clear();\n     for (ApplicationAttemptId attempt : oldMasterKeys.keySet()) {\n       ApplicationId app \u003d attempt.getApplicationId();\n       List\u003cApplicationAttemptId\u003e attempts \u003d appToAppAttemptMap.get(app);\n       if (attempts \u003d\u003d null) {\n         attempts \u003d new ArrayList\u003cApplicationAttemptId\u003e();\n         appToAppAttemptMap.put(app, attempts);\n       }\n       attempts.add(attempt);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void recover()\n      throws IOException {\n    RecoveredNMTokensState state \u003d stateStore.loadNMTokensState();\n    MasterKey key \u003d state.getCurrentMasterKey();\n    if (key !\u003d null) {\n      super.currentMasterKey \u003d\n          new MasterKeyData(key, createSecretKey(key.getBytes().array()));\n    }\n\n    key \u003d state.getPreviousMasterKey();\n    if (key !\u003d null) {\n      previousMasterKey \u003d\n          new MasterKeyData(key, createSecretKey(key.getBytes().array()));\n    }\n\n    // restore the serial number from the current master key\n    if (super.currentMasterKey !\u003d null) {\n      super.serialNo \u003d super.currentMasterKey.getMasterKey().getKeyId() + 1;\n    }\n\n    for (Map.Entry\u003cApplicationAttemptId, MasterKey\u003e entry :\n         state.getApplicationMasterKeys().entrySet()) {\n      key \u003d entry.getValue();\n      oldMasterKeys.put(entry.getKey(),\n          new MasterKeyData(key, createSecretKey(key.getBytes().array())));\n    }\n\n    // reconstruct app to app attempts map\n    appToAppAttemptMap.clear();\n    for (ApplicationAttemptId attempt : oldMasterKeys.keySet()) {\n      ApplicationId app \u003d attempt.getApplicationId();\n      List\u003cApplicationAttemptId\u003e attempts \u003d appToAppAttemptMap.get(app);\n      if (attempts \u003d\u003d null) {\n        attempts \u003d new ArrayList\u003cApplicationAttemptId\u003e();\n        appToAppAttemptMap.put(app, attempts);\n      }\n      attempts.add(attempt);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/security/NMTokenSecretManagerInNM.java",
          "extendedDetails": {
            "oldValue": "[state-RecoveredNMTokenState]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1342. Recover container tokens upon nodemanager restart. Contributed by Jason Lowe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1612995 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "23/07/14 10:02 PM",
          "commitName": "2050e0dad661bade3e140d7a5692cfe1999badc3",
          "commitAuthor": "Devarajulu K",
          "commitDateOld": "17/07/14 4:33 PM",
          "commitNameOld": "403ec8ea80d59f209823a7370dc8185fa2c1c368",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 6.23,
          "commitsBetweenForRepo": 56,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,39 @@\n-  public synchronized void recover(RecoveredNMTokenState state)\n+  public synchronized void recover()\n       throws IOException {\n+    RecoveredNMTokensState state \u003d stateStore.loadNMTokensState();\n     MasterKey key \u003d state.getCurrentMasterKey();\n     if (key !\u003d null) {\n       super.currentMasterKey \u003d\n           new MasterKeyData(key, createSecretKey(key.getBytes().array()));\n     }\n \n     key \u003d state.getPreviousMasterKey();\n     if (key !\u003d null) {\n       previousMasterKey \u003d\n           new MasterKeyData(key, createSecretKey(key.getBytes().array()));\n     }\n \n     // restore the serial number from the current master key\n     if (super.currentMasterKey !\u003d null) {\n       super.serialNo \u003d super.currentMasterKey.getMasterKey().getKeyId() + 1;\n     }\n \n     for (Map.Entry\u003cApplicationAttemptId, MasterKey\u003e entry :\n          state.getApplicationMasterKeys().entrySet()) {\n       key \u003d entry.getValue();\n       oldMasterKeys.put(entry.getKey(),\n           new MasterKeyData(key, createSecretKey(key.getBytes().array())));\n     }\n \n     // reconstruct app to app attempts map\n     appToAppAttemptMap.clear();\n     for (ApplicationAttemptId attempt : oldMasterKeys.keySet()) {\n       ApplicationId app \u003d attempt.getApplicationId();\n       List\u003cApplicationAttemptId\u003e attempts \u003d appToAppAttemptMap.get(app);\n       if (attempts \u003d\u003d null) {\n         attempts \u003d new ArrayList\u003cApplicationAttemptId\u003e();\n         appToAppAttemptMap.put(app, attempts);\n       }\n       attempts.add(attempt);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void recover()\n      throws IOException {\n    RecoveredNMTokensState state \u003d stateStore.loadNMTokensState();\n    MasterKey key \u003d state.getCurrentMasterKey();\n    if (key !\u003d null) {\n      super.currentMasterKey \u003d\n          new MasterKeyData(key, createSecretKey(key.getBytes().array()));\n    }\n\n    key \u003d state.getPreviousMasterKey();\n    if (key !\u003d null) {\n      previousMasterKey \u003d\n          new MasterKeyData(key, createSecretKey(key.getBytes().array()));\n    }\n\n    // restore the serial number from the current master key\n    if (super.currentMasterKey !\u003d null) {\n      super.serialNo \u003d super.currentMasterKey.getMasterKey().getKeyId() + 1;\n    }\n\n    for (Map.Entry\u003cApplicationAttemptId, MasterKey\u003e entry :\n         state.getApplicationMasterKeys().entrySet()) {\n      key \u003d entry.getValue();\n      oldMasterKeys.put(entry.getKey(),\n          new MasterKeyData(key, createSecretKey(key.getBytes().array())));\n    }\n\n    // reconstruct app to app attempts map\n    appToAppAttemptMap.clear();\n    for (ApplicationAttemptId attempt : oldMasterKeys.keySet()) {\n      ApplicationId app \u003d attempt.getApplicationId();\n      List\u003cApplicationAttemptId\u003e attempts \u003d appToAppAttemptMap.get(app);\n      if (attempts \u003d\u003d null) {\n        attempts \u003d new ArrayList\u003cApplicationAttemptId\u003e();\n        appToAppAttemptMap.put(app, attempts);\n      }\n      attempts.add(attempt);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/security/NMTokenSecretManagerInNM.java",
          "extendedDetails": {}
        }
      ]
    },
    "403ec8ea80d59f209823a7370dc8185fa2c1c368": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1341. Recover NMTokens upon nodemanager restart. (Contributed by Jason Lowe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1611512 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/07/14 4:33 PM",
      "commitName": "403ec8ea80d59f209823a7370dc8185fa2c1c368",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,38 @@\n+  public synchronized void recover(RecoveredNMTokenState state)\n+      throws IOException {\n+    MasterKey key \u003d state.getCurrentMasterKey();\n+    if (key !\u003d null) {\n+      super.currentMasterKey \u003d\n+          new MasterKeyData(key, createSecretKey(key.getBytes().array()));\n+    }\n+\n+    key \u003d state.getPreviousMasterKey();\n+    if (key !\u003d null) {\n+      previousMasterKey \u003d\n+          new MasterKeyData(key, createSecretKey(key.getBytes().array()));\n+    }\n+\n+    // restore the serial number from the current master key\n+    if (super.currentMasterKey !\u003d null) {\n+      super.serialNo \u003d super.currentMasterKey.getMasterKey().getKeyId() + 1;\n+    }\n+\n+    for (Map.Entry\u003cApplicationAttemptId, MasterKey\u003e entry :\n+         state.getApplicationMasterKeys().entrySet()) {\n+      key \u003d entry.getValue();\n+      oldMasterKeys.put(entry.getKey(),\n+          new MasterKeyData(key, createSecretKey(key.getBytes().array())));\n+    }\n+\n+    // reconstruct app to app attempts map\n+    appToAppAttemptMap.clear();\n+    for (ApplicationAttemptId attempt : oldMasterKeys.keySet()) {\n+      ApplicationId app \u003d attempt.getApplicationId();\n+      List\u003cApplicationAttemptId\u003e attempts \u003d appToAppAttemptMap.get(app);\n+      if (attempts \u003d\u003d null) {\n+        attempts \u003d new ArrayList\u003cApplicationAttemptId\u003e();\n+        appToAppAttemptMap.put(app, attempts);\n+      }\n+      attempts.add(attempt);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void recover(RecoveredNMTokenState state)\n      throws IOException {\n    MasterKey key \u003d state.getCurrentMasterKey();\n    if (key !\u003d null) {\n      super.currentMasterKey \u003d\n          new MasterKeyData(key, createSecretKey(key.getBytes().array()));\n    }\n\n    key \u003d state.getPreviousMasterKey();\n    if (key !\u003d null) {\n      previousMasterKey \u003d\n          new MasterKeyData(key, createSecretKey(key.getBytes().array()));\n    }\n\n    // restore the serial number from the current master key\n    if (super.currentMasterKey !\u003d null) {\n      super.serialNo \u003d super.currentMasterKey.getMasterKey().getKeyId() + 1;\n    }\n\n    for (Map.Entry\u003cApplicationAttemptId, MasterKey\u003e entry :\n         state.getApplicationMasterKeys().entrySet()) {\n      key \u003d entry.getValue();\n      oldMasterKeys.put(entry.getKey(),\n          new MasterKeyData(key, createSecretKey(key.getBytes().array())));\n    }\n\n    // reconstruct app to app attempts map\n    appToAppAttemptMap.clear();\n    for (ApplicationAttemptId attempt : oldMasterKeys.keySet()) {\n      ApplicationId app \u003d attempt.getApplicationId();\n      List\u003cApplicationAttemptId\u003e attempts \u003d appToAppAttemptMap.get(app);\n      if (attempts \u003d\u003d null) {\n        attempts \u003d new ArrayList\u003cApplicationAttemptId\u003e();\n        appToAppAttemptMap.put(app, attempts);\n      }\n      attempts.add(attempt);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/security/NMTokenSecretManagerInNM.java"
    }
  }
}