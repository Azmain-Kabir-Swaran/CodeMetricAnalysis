{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "GpuResourceAllocator.java",
  "functionName": "internalAssignGpus",
  "functionId": "internalAssignGpus___container-Container",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/gpu/GpuResourceAllocator.java",
  "functionStartLine": 220,
  "functionEndLine": 277,
  "numCommitsSeen": 12,
  "timeTaken": 4771,
  "changeHistory": [
    "2216ec54e58e24ff09620fc2efa2f1733391d0c3",
    "ada8f63d0b3739d245300461387b0516dc92ccf9",
    "9114d7a5a0159bbe70e9c289dbe1fc5db9101db5",
    "fa5cfc68f37c78b6cf26ce13247b9ff34da806cd"
  ],
  "changeHistoryShort": {
    "2216ec54e58e24ff09620fc2efa2f1733391d0c3": "Ybodychange",
    "ada8f63d0b3739d245300461387b0516dc92ccf9": "Ymultichange(Yrename,Ymodifierchange,Ybodychange)",
    "9114d7a5a0159bbe70e9c289dbe1fc5db9101db5": "Ybodychange",
    "fa5cfc68f37c78b6cf26ce13247b9ff34da806cd": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2216ec54e58e24ff09620fc2efa2f1733391d0c3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9100. Add tests for GpuResourceAllocator and do minor code cleanup. Contributed by Peter Bacsko\n",
      "commitDate": "16/08/19 12:13 AM",
      "commitName": "2216ec54e58e24ff09620fc2efa2f1733391d0c3",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "20/03/19 4:12 PM",
      "commitNameOld": "506502bb8301f3b4a68e5f692a2af0624980468e",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 148.33,
      "commitsBetweenForRepo": 1098,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,58 @@\n   private synchronized GpuAllocation internalAssignGpus(Container container)\n       throws ResourceHandlerException {\n     Resource requestedResource \u003d container.getResource();\n     ContainerId containerId \u003d container.getContainerId();\n     int numRequestedGpuDevices \u003d getRequestedGpus(requestedResource);\n-    // Assign Gpus to container if requested some.\n+\n+    // Assign GPUs to container if requested some.\n     if (numRequestedGpuDevices \u003e 0) {\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(String.format(\"Trying to assign %d GPUs to container: %s\" +\n+            \", #AvailableGPUs\u003d%d, #ReleasingGPUs\u003d%d\",\n+            numRequestedGpuDevices, containerId,\n+            getAvailableGpus(), getReleasingGpus()));\n+      }\n       if (numRequestedGpuDevices \u003e getAvailableGpus()) {\n         // If there are some devices which are getting released, wait for few\n         // seconds to get it.\n         if (numRequestedGpuDevices \u003c\u003d getReleasingGpus() + getAvailableGpus()) {\n           return null;\n         }\n       }\n \n       if (numRequestedGpuDevices \u003e getAvailableGpus()) {\n         throw new ResourceHandlerException(\n-            getResourceHandlerExceptionMessage(numRequestedGpuDevices,\n-                containerId));\n+            \"Failed to find enough GPUs, requestor\u003d\" + containerId +\n+                \", #RequestedGPUs\u003d\" + numRequestedGpuDevices +\n+                \", #AvailableGPUs\u003d\" + getAvailableGpus());\n       }\n \n       Set\u003cGpuDevice\u003e assignedGpus \u003d new TreeSet\u003c\u003e();\n \n       for (GpuDevice gpu : allowedGpuDevices) {\n         if (!usedDevices.containsKey(gpu)) {\n           usedDevices.put(gpu, containerId);\n           assignedGpus.add(gpu);\n           if (assignedGpus.size() \u003d\u003d numRequestedGpuDevices) {\n             break;\n           }\n         }\n       }\n \n       // Record in state store if we allocated anything\n       if (!assignedGpus.isEmpty()) {\n         try {\n           // Update state store.\n           nmContext.getNMStateStore().storeAssignedResources(container, GPU_URI,\n               new ArrayList\u003c\u003e(assignedGpus));\n         } catch (IOException e) {\n-          cleanupAssignGpus(containerId);\n+          unassignGpus(containerId);\n           throw new ResourceHandlerException(e);\n         }\n       }\n \n       return new GpuAllocation(assignedGpus,\n           Sets.difference(allowedGpuDevices, assignedGpus));\n     }\n     return new GpuAllocation(null, allowedGpuDevices);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized GpuAllocation internalAssignGpus(Container container)\n      throws ResourceHandlerException {\n    Resource requestedResource \u003d container.getResource();\n    ContainerId containerId \u003d container.getContainerId();\n    int numRequestedGpuDevices \u003d getRequestedGpus(requestedResource);\n\n    // Assign GPUs to container if requested some.\n    if (numRequestedGpuDevices \u003e 0) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(String.format(\"Trying to assign %d GPUs to container: %s\" +\n            \", #AvailableGPUs\u003d%d, #ReleasingGPUs\u003d%d\",\n            numRequestedGpuDevices, containerId,\n            getAvailableGpus(), getReleasingGpus()));\n      }\n      if (numRequestedGpuDevices \u003e getAvailableGpus()) {\n        // If there are some devices which are getting released, wait for few\n        // seconds to get it.\n        if (numRequestedGpuDevices \u003c\u003d getReleasingGpus() + getAvailableGpus()) {\n          return null;\n        }\n      }\n\n      if (numRequestedGpuDevices \u003e getAvailableGpus()) {\n        throw new ResourceHandlerException(\n            \"Failed to find enough GPUs, requestor\u003d\" + containerId +\n                \", #RequestedGPUs\u003d\" + numRequestedGpuDevices +\n                \", #AvailableGPUs\u003d\" + getAvailableGpus());\n      }\n\n      Set\u003cGpuDevice\u003e assignedGpus \u003d new TreeSet\u003c\u003e();\n\n      for (GpuDevice gpu : allowedGpuDevices) {\n        if (!usedDevices.containsKey(gpu)) {\n          usedDevices.put(gpu, containerId);\n          assignedGpus.add(gpu);\n          if (assignedGpus.size() \u003d\u003d numRequestedGpuDevices) {\n            break;\n          }\n        }\n      }\n\n      // Record in state store if we allocated anything\n      if (!assignedGpus.isEmpty()) {\n        try {\n          // Update state store.\n          nmContext.getNMStateStore().storeAssignedResources(container, GPU_URI,\n              new ArrayList\u003c\u003e(assignedGpus));\n        } catch (IOException e) {\n          unassignGpus(containerId);\n          throw new ResourceHandlerException(e);\n        }\n      }\n\n      return new GpuAllocation(assignedGpus,\n          Sets.difference(allowedGpuDevices, assignedGpus));\n    }\n    return new GpuAllocation(null, allowedGpuDevices);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/gpu/GpuResourceAllocator.java",
      "extendedDetails": {}
    },
    "ada8f63d0b3739d245300461387b0516dc92ccf9": {
      "type": "Ymultichange(Yrename,Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-8423. GPU does not get released even though the application gets killed. (Sunil G via wangda)\n\nChange-Id: I570db7d60f8c6c21762dd618a9207d1107c486a0\n",
      "commitDate": "26/06/18 7:25 PM",
      "commitName": "ada8f63d0b3739d245300461387b0516dc92ccf9",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-8423. GPU does not get released even though the application gets killed. (Sunil G via wangda)\n\nChange-Id: I570db7d60f8c6c21762dd618a9207d1107c486a0\n",
          "commitDate": "26/06/18 7:25 PM",
          "commitName": "ada8f63d0b3739d245300461387b0516dc92ccf9",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "22/11/17 6:24 PM",
          "commitNameOld": "aab439593b5d3459140b6e104722d4583dfcfddb",
          "commitAuthorOld": "Sunil G",
          "daysBetweenCommits": 216.0,
          "commitsBetweenForRepo": 2031,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,50 @@\n-  public synchronized GpuAllocation assignGpus(Container container)\n+  private synchronized GpuAllocation internalAssignGpus(Container container)\n       throws ResourceHandlerException {\n     Resource requestedResource \u003d container.getResource();\n     ContainerId containerId \u003d container.getContainerId();\n     int numRequestedGpuDevices \u003d getRequestedGpus(requestedResource);\n     // Assign Gpus to container if requested some.\n     if (numRequestedGpuDevices \u003e 0) {\n       if (numRequestedGpuDevices \u003e getAvailableGpus()) {\n+        // If there are some devices which are getting released, wait for few\n+        // seconds to get it.\n+        if (numRequestedGpuDevices \u003c\u003d getReleasingGpus() + getAvailableGpus()) {\n+          return null;\n+        }\n+      }\n+\n+      if (numRequestedGpuDevices \u003e getAvailableGpus()) {\n         throw new ResourceHandlerException(\n             getResourceHandlerExceptionMessage(numRequestedGpuDevices,\n                 containerId));\n       }\n \n       Set\u003cGpuDevice\u003e assignedGpus \u003d new TreeSet\u003c\u003e();\n \n       for (GpuDevice gpu : allowedGpuDevices) {\n         if (!usedDevices.containsKey(gpu)) {\n           usedDevices.put(gpu, containerId);\n           assignedGpus.add(gpu);\n           if (assignedGpus.size() \u003d\u003d numRequestedGpuDevices) {\n             break;\n           }\n         }\n       }\n \n       // Record in state store if we allocated anything\n       if (!assignedGpus.isEmpty()) {\n         try {\n           // Update state store.\n           nmContext.getNMStateStore().storeAssignedResources(container, GPU_URI,\n               new ArrayList\u003c\u003e(assignedGpus));\n         } catch (IOException e) {\n           cleanupAssignGpus(containerId);\n           throw new ResourceHandlerException(e);\n         }\n       }\n \n       return new GpuAllocation(assignedGpus,\n           Sets.difference(allowedGpuDevices, assignedGpus));\n     }\n     return new GpuAllocation(null, allowedGpuDevices);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized GpuAllocation internalAssignGpus(Container container)\n      throws ResourceHandlerException {\n    Resource requestedResource \u003d container.getResource();\n    ContainerId containerId \u003d container.getContainerId();\n    int numRequestedGpuDevices \u003d getRequestedGpus(requestedResource);\n    // Assign Gpus to container if requested some.\n    if (numRequestedGpuDevices \u003e 0) {\n      if (numRequestedGpuDevices \u003e getAvailableGpus()) {\n        // If there are some devices which are getting released, wait for few\n        // seconds to get it.\n        if (numRequestedGpuDevices \u003c\u003d getReleasingGpus() + getAvailableGpus()) {\n          return null;\n        }\n      }\n\n      if (numRequestedGpuDevices \u003e getAvailableGpus()) {\n        throw new ResourceHandlerException(\n            getResourceHandlerExceptionMessage(numRequestedGpuDevices,\n                containerId));\n      }\n\n      Set\u003cGpuDevice\u003e assignedGpus \u003d new TreeSet\u003c\u003e();\n\n      for (GpuDevice gpu : allowedGpuDevices) {\n        if (!usedDevices.containsKey(gpu)) {\n          usedDevices.put(gpu, containerId);\n          assignedGpus.add(gpu);\n          if (assignedGpus.size() \u003d\u003d numRequestedGpuDevices) {\n            break;\n          }\n        }\n      }\n\n      // Record in state store if we allocated anything\n      if (!assignedGpus.isEmpty()) {\n        try {\n          // Update state store.\n          nmContext.getNMStateStore().storeAssignedResources(container, GPU_URI,\n              new ArrayList\u003c\u003e(assignedGpus));\n        } catch (IOException e) {\n          cleanupAssignGpus(containerId);\n          throw new ResourceHandlerException(e);\n        }\n      }\n\n      return new GpuAllocation(assignedGpus,\n          Sets.difference(allowedGpuDevices, assignedGpus));\n    }\n    return new GpuAllocation(null, allowedGpuDevices);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/gpu/GpuResourceAllocator.java",
          "extendedDetails": {
            "oldValue": "assignGpus",
            "newValue": "internalAssignGpus"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-8423. GPU does not get released even though the application gets killed. (Sunil G via wangda)\n\nChange-Id: I570db7d60f8c6c21762dd618a9207d1107c486a0\n",
          "commitDate": "26/06/18 7:25 PM",
          "commitName": "ada8f63d0b3739d245300461387b0516dc92ccf9",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "22/11/17 6:24 PM",
          "commitNameOld": "aab439593b5d3459140b6e104722d4583dfcfddb",
          "commitAuthorOld": "Sunil G",
          "daysBetweenCommits": 216.0,
          "commitsBetweenForRepo": 2031,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,50 @@\n-  public synchronized GpuAllocation assignGpus(Container container)\n+  private synchronized GpuAllocation internalAssignGpus(Container container)\n       throws ResourceHandlerException {\n     Resource requestedResource \u003d container.getResource();\n     ContainerId containerId \u003d container.getContainerId();\n     int numRequestedGpuDevices \u003d getRequestedGpus(requestedResource);\n     // Assign Gpus to container if requested some.\n     if (numRequestedGpuDevices \u003e 0) {\n       if (numRequestedGpuDevices \u003e getAvailableGpus()) {\n+        // If there are some devices which are getting released, wait for few\n+        // seconds to get it.\n+        if (numRequestedGpuDevices \u003c\u003d getReleasingGpus() + getAvailableGpus()) {\n+          return null;\n+        }\n+      }\n+\n+      if (numRequestedGpuDevices \u003e getAvailableGpus()) {\n         throw new ResourceHandlerException(\n             getResourceHandlerExceptionMessage(numRequestedGpuDevices,\n                 containerId));\n       }\n \n       Set\u003cGpuDevice\u003e assignedGpus \u003d new TreeSet\u003c\u003e();\n \n       for (GpuDevice gpu : allowedGpuDevices) {\n         if (!usedDevices.containsKey(gpu)) {\n           usedDevices.put(gpu, containerId);\n           assignedGpus.add(gpu);\n           if (assignedGpus.size() \u003d\u003d numRequestedGpuDevices) {\n             break;\n           }\n         }\n       }\n \n       // Record in state store if we allocated anything\n       if (!assignedGpus.isEmpty()) {\n         try {\n           // Update state store.\n           nmContext.getNMStateStore().storeAssignedResources(container, GPU_URI,\n               new ArrayList\u003c\u003e(assignedGpus));\n         } catch (IOException e) {\n           cleanupAssignGpus(containerId);\n           throw new ResourceHandlerException(e);\n         }\n       }\n \n       return new GpuAllocation(assignedGpus,\n           Sets.difference(allowedGpuDevices, assignedGpus));\n     }\n     return new GpuAllocation(null, allowedGpuDevices);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized GpuAllocation internalAssignGpus(Container container)\n      throws ResourceHandlerException {\n    Resource requestedResource \u003d container.getResource();\n    ContainerId containerId \u003d container.getContainerId();\n    int numRequestedGpuDevices \u003d getRequestedGpus(requestedResource);\n    // Assign Gpus to container if requested some.\n    if (numRequestedGpuDevices \u003e 0) {\n      if (numRequestedGpuDevices \u003e getAvailableGpus()) {\n        // If there are some devices which are getting released, wait for few\n        // seconds to get it.\n        if (numRequestedGpuDevices \u003c\u003d getReleasingGpus() + getAvailableGpus()) {\n          return null;\n        }\n      }\n\n      if (numRequestedGpuDevices \u003e getAvailableGpus()) {\n        throw new ResourceHandlerException(\n            getResourceHandlerExceptionMessage(numRequestedGpuDevices,\n                containerId));\n      }\n\n      Set\u003cGpuDevice\u003e assignedGpus \u003d new TreeSet\u003c\u003e();\n\n      for (GpuDevice gpu : allowedGpuDevices) {\n        if (!usedDevices.containsKey(gpu)) {\n          usedDevices.put(gpu, containerId);\n          assignedGpus.add(gpu);\n          if (assignedGpus.size() \u003d\u003d numRequestedGpuDevices) {\n            break;\n          }\n        }\n      }\n\n      // Record in state store if we allocated anything\n      if (!assignedGpus.isEmpty()) {\n        try {\n          // Update state store.\n          nmContext.getNMStateStore().storeAssignedResources(container, GPU_URI,\n              new ArrayList\u003c\u003e(assignedGpus));\n        } catch (IOException e) {\n          cleanupAssignGpus(containerId);\n          throw new ResourceHandlerException(e);\n        }\n      }\n\n      return new GpuAllocation(assignedGpus,\n          Sets.difference(allowedGpuDevices, assignedGpus));\n    }\n    return new GpuAllocation(null, allowedGpuDevices);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/gpu/GpuResourceAllocator.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[private, synchronized]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8423. GPU does not get released even though the application gets killed. (Sunil G via wangda)\n\nChange-Id: I570db7d60f8c6c21762dd618a9207d1107c486a0\n",
          "commitDate": "26/06/18 7:25 PM",
          "commitName": "ada8f63d0b3739d245300461387b0516dc92ccf9",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "22/11/17 6:24 PM",
          "commitNameOld": "aab439593b5d3459140b6e104722d4583dfcfddb",
          "commitAuthorOld": "Sunil G",
          "daysBetweenCommits": 216.0,
          "commitsBetweenForRepo": 2031,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,50 @@\n-  public synchronized GpuAllocation assignGpus(Container container)\n+  private synchronized GpuAllocation internalAssignGpus(Container container)\n       throws ResourceHandlerException {\n     Resource requestedResource \u003d container.getResource();\n     ContainerId containerId \u003d container.getContainerId();\n     int numRequestedGpuDevices \u003d getRequestedGpus(requestedResource);\n     // Assign Gpus to container if requested some.\n     if (numRequestedGpuDevices \u003e 0) {\n       if (numRequestedGpuDevices \u003e getAvailableGpus()) {\n+        // If there are some devices which are getting released, wait for few\n+        // seconds to get it.\n+        if (numRequestedGpuDevices \u003c\u003d getReleasingGpus() + getAvailableGpus()) {\n+          return null;\n+        }\n+      }\n+\n+      if (numRequestedGpuDevices \u003e getAvailableGpus()) {\n         throw new ResourceHandlerException(\n             getResourceHandlerExceptionMessage(numRequestedGpuDevices,\n                 containerId));\n       }\n \n       Set\u003cGpuDevice\u003e assignedGpus \u003d new TreeSet\u003c\u003e();\n \n       for (GpuDevice gpu : allowedGpuDevices) {\n         if (!usedDevices.containsKey(gpu)) {\n           usedDevices.put(gpu, containerId);\n           assignedGpus.add(gpu);\n           if (assignedGpus.size() \u003d\u003d numRequestedGpuDevices) {\n             break;\n           }\n         }\n       }\n \n       // Record in state store if we allocated anything\n       if (!assignedGpus.isEmpty()) {\n         try {\n           // Update state store.\n           nmContext.getNMStateStore().storeAssignedResources(container, GPU_URI,\n               new ArrayList\u003c\u003e(assignedGpus));\n         } catch (IOException e) {\n           cleanupAssignGpus(containerId);\n           throw new ResourceHandlerException(e);\n         }\n       }\n \n       return new GpuAllocation(assignedGpus,\n           Sets.difference(allowedGpuDevices, assignedGpus));\n     }\n     return new GpuAllocation(null, allowedGpuDevices);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized GpuAllocation internalAssignGpus(Container container)\n      throws ResourceHandlerException {\n    Resource requestedResource \u003d container.getResource();\n    ContainerId containerId \u003d container.getContainerId();\n    int numRequestedGpuDevices \u003d getRequestedGpus(requestedResource);\n    // Assign Gpus to container if requested some.\n    if (numRequestedGpuDevices \u003e 0) {\n      if (numRequestedGpuDevices \u003e getAvailableGpus()) {\n        // If there are some devices which are getting released, wait for few\n        // seconds to get it.\n        if (numRequestedGpuDevices \u003c\u003d getReleasingGpus() + getAvailableGpus()) {\n          return null;\n        }\n      }\n\n      if (numRequestedGpuDevices \u003e getAvailableGpus()) {\n        throw new ResourceHandlerException(\n            getResourceHandlerExceptionMessage(numRequestedGpuDevices,\n                containerId));\n      }\n\n      Set\u003cGpuDevice\u003e assignedGpus \u003d new TreeSet\u003c\u003e();\n\n      for (GpuDevice gpu : allowedGpuDevices) {\n        if (!usedDevices.containsKey(gpu)) {\n          usedDevices.put(gpu, containerId);\n          assignedGpus.add(gpu);\n          if (assignedGpus.size() \u003d\u003d numRequestedGpuDevices) {\n            break;\n          }\n        }\n      }\n\n      // Record in state store if we allocated anything\n      if (!assignedGpus.isEmpty()) {\n        try {\n          // Update state store.\n          nmContext.getNMStateStore().storeAssignedResources(container, GPU_URI,\n              new ArrayList\u003c\u003e(assignedGpus));\n        } catch (IOException e) {\n          cleanupAssignGpus(containerId);\n          throw new ResourceHandlerException(e);\n        }\n      }\n\n      return new GpuAllocation(assignedGpus,\n          Sets.difference(allowedGpuDevices, assignedGpus));\n    }\n    return new GpuAllocation(null, allowedGpuDevices);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/gpu/GpuResourceAllocator.java",
          "extendedDetails": {}
        }
      ]
    },
    "9114d7a5a0159bbe70e9c289dbe1fc5db9101db5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7224. Support GPU isolation for docker container. Contributed by Wangda Tan.\n",
      "commitDate": "28/10/17 10:38 PM",
      "commitName": "9114d7a5a0159bbe70e9c289dbe1fc5db9101db5",
      "commitAuthor": "Sunil G",
      "commitDateOld": "11/10/17 11:14 AM",
      "commitNameOld": "fa5cfc68f37c78b6cf26ce13247b9ff34da806cd",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 17.48,
      "commitsBetweenForRepo": 104,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,42 @@\n   public synchronized GpuAllocation assignGpus(Container container)\n       throws ResourceHandlerException {\n     Resource requestedResource \u003d container.getResource();\n     ContainerId containerId \u003d container.getContainerId();\n     int numRequestedGpuDevices \u003d getRequestedGpus(requestedResource);\n     // Assign Gpus to container if requested some.\n     if (numRequestedGpuDevices \u003e 0) {\n       if (numRequestedGpuDevices \u003e getAvailableGpus()) {\n         throw new ResourceHandlerException(\n             getResourceHandlerExceptionMessage(numRequestedGpuDevices,\n                 containerId));\n       }\n \n-      Set\u003cInteger\u003e assignedGpus \u003d new HashSet\u003c\u003e();\n+      Set\u003cGpuDevice\u003e assignedGpus \u003d new TreeSet\u003c\u003e();\n \n-      for (int deviceNum : allowedGpuDevices) {\n-        if (!usedDevices.containsKey(deviceNum)) {\n-          usedDevices.put(deviceNum, containerId);\n-          assignedGpus.add(deviceNum);\n+      for (GpuDevice gpu : allowedGpuDevices) {\n+        if (!usedDevices.containsKey(gpu)) {\n+          usedDevices.put(gpu, containerId);\n+          assignedGpus.add(gpu);\n           if (assignedGpus.size() \u003d\u003d numRequestedGpuDevices) {\n             break;\n           }\n         }\n       }\n \n       // Record in state store if we allocated anything\n       if (!assignedGpus.isEmpty()) {\n-        List\u003cSerializable\u003e allocatedDevices \u003d new ArrayList\u003c\u003e();\n-        for (int gpu : assignedGpus) {\n-          allocatedDevices.add(String.valueOf(gpu));\n-        }\n         try {\n-          // Update Container#getResourceMapping.\n-          ResourceMappings.AssignedResources assignedResources \u003d\n-              new ResourceMappings.AssignedResources();\n-          assignedResources.updateAssignedResources(allocatedDevices);\n-          container.getResourceMappings().addAssignedResources(GPU_URI,\n-              assignedResources);\n-\n           // Update state store.\n-          nmContext.getNMStateStore().storeAssignedResources(containerId,\n-              GPU_URI, allocatedDevices);\n+          nmContext.getNMStateStore().storeAssignedResources(container, GPU_URI,\n+              new ArrayList\u003c\u003e(assignedGpus));\n         } catch (IOException e) {\n           cleanupAssignGpus(containerId);\n           throw new ResourceHandlerException(e);\n         }\n       }\n \n       return new GpuAllocation(assignedGpus,\n           Sets.difference(allowedGpuDevices, assignedGpus));\n     }\n     return new GpuAllocation(null, allowedGpuDevices);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized GpuAllocation assignGpus(Container container)\n      throws ResourceHandlerException {\n    Resource requestedResource \u003d container.getResource();\n    ContainerId containerId \u003d container.getContainerId();\n    int numRequestedGpuDevices \u003d getRequestedGpus(requestedResource);\n    // Assign Gpus to container if requested some.\n    if (numRequestedGpuDevices \u003e 0) {\n      if (numRequestedGpuDevices \u003e getAvailableGpus()) {\n        throw new ResourceHandlerException(\n            getResourceHandlerExceptionMessage(numRequestedGpuDevices,\n                containerId));\n      }\n\n      Set\u003cGpuDevice\u003e assignedGpus \u003d new TreeSet\u003c\u003e();\n\n      for (GpuDevice gpu : allowedGpuDevices) {\n        if (!usedDevices.containsKey(gpu)) {\n          usedDevices.put(gpu, containerId);\n          assignedGpus.add(gpu);\n          if (assignedGpus.size() \u003d\u003d numRequestedGpuDevices) {\n            break;\n          }\n        }\n      }\n\n      // Record in state store if we allocated anything\n      if (!assignedGpus.isEmpty()) {\n        try {\n          // Update state store.\n          nmContext.getNMStateStore().storeAssignedResources(container, GPU_URI,\n              new ArrayList\u003c\u003e(assignedGpus));\n        } catch (IOException e) {\n          cleanupAssignGpus(containerId);\n          throw new ResourceHandlerException(e);\n        }\n      }\n\n      return new GpuAllocation(assignedGpus,\n          Sets.difference(allowedGpuDevices, assignedGpus));\n    }\n    return new GpuAllocation(null, allowedGpuDevices);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/gpu/GpuResourceAllocator.java",
      "extendedDetails": {}
    },
    "fa5cfc68f37c78b6cf26ce13247b9ff34da806cd": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6620. Add support in NodeManager to isolate GPU devices by using CGroups. Contributed by Wangda Tan.\n",
      "commitDate": "11/10/17 11:14 AM",
      "commitName": "fa5cfc68f37c78b6cf26ce13247b9ff34da806cd",
      "commitAuthor": "Sunil G",
      "diff": "@@ -0,0 +1,53 @@\n+  public synchronized GpuAllocation assignGpus(Container container)\n+      throws ResourceHandlerException {\n+    Resource requestedResource \u003d container.getResource();\n+    ContainerId containerId \u003d container.getContainerId();\n+    int numRequestedGpuDevices \u003d getRequestedGpus(requestedResource);\n+    // Assign Gpus to container if requested some.\n+    if (numRequestedGpuDevices \u003e 0) {\n+      if (numRequestedGpuDevices \u003e getAvailableGpus()) {\n+        throw new ResourceHandlerException(\n+            getResourceHandlerExceptionMessage(numRequestedGpuDevices,\n+                containerId));\n+      }\n+\n+      Set\u003cInteger\u003e assignedGpus \u003d new HashSet\u003c\u003e();\n+\n+      for (int deviceNum : allowedGpuDevices) {\n+        if (!usedDevices.containsKey(deviceNum)) {\n+          usedDevices.put(deviceNum, containerId);\n+          assignedGpus.add(deviceNum);\n+          if (assignedGpus.size() \u003d\u003d numRequestedGpuDevices) {\n+            break;\n+          }\n+        }\n+      }\n+\n+      // Record in state store if we allocated anything\n+      if (!assignedGpus.isEmpty()) {\n+        List\u003cSerializable\u003e allocatedDevices \u003d new ArrayList\u003c\u003e();\n+        for (int gpu : assignedGpus) {\n+          allocatedDevices.add(String.valueOf(gpu));\n+        }\n+        try {\n+          // Update Container#getResourceMapping.\n+          ResourceMappings.AssignedResources assignedResources \u003d\n+              new ResourceMappings.AssignedResources();\n+          assignedResources.updateAssignedResources(allocatedDevices);\n+          container.getResourceMappings().addAssignedResources(GPU_URI,\n+              assignedResources);\n+\n+          // Update state store.\n+          nmContext.getNMStateStore().storeAssignedResources(containerId,\n+              GPU_URI, allocatedDevices);\n+        } catch (IOException e) {\n+          cleanupAssignGpus(containerId);\n+          throw new ResourceHandlerException(e);\n+        }\n+      }\n+\n+      return new GpuAllocation(assignedGpus,\n+          Sets.difference(allowedGpuDevices, assignedGpus));\n+    }\n+    return new GpuAllocation(null, allowedGpuDevices);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized GpuAllocation assignGpus(Container container)\n      throws ResourceHandlerException {\n    Resource requestedResource \u003d container.getResource();\n    ContainerId containerId \u003d container.getContainerId();\n    int numRequestedGpuDevices \u003d getRequestedGpus(requestedResource);\n    // Assign Gpus to container if requested some.\n    if (numRequestedGpuDevices \u003e 0) {\n      if (numRequestedGpuDevices \u003e getAvailableGpus()) {\n        throw new ResourceHandlerException(\n            getResourceHandlerExceptionMessage(numRequestedGpuDevices,\n                containerId));\n      }\n\n      Set\u003cInteger\u003e assignedGpus \u003d new HashSet\u003c\u003e();\n\n      for (int deviceNum : allowedGpuDevices) {\n        if (!usedDevices.containsKey(deviceNum)) {\n          usedDevices.put(deviceNum, containerId);\n          assignedGpus.add(deviceNum);\n          if (assignedGpus.size() \u003d\u003d numRequestedGpuDevices) {\n            break;\n          }\n        }\n      }\n\n      // Record in state store if we allocated anything\n      if (!assignedGpus.isEmpty()) {\n        List\u003cSerializable\u003e allocatedDevices \u003d new ArrayList\u003c\u003e();\n        for (int gpu : assignedGpus) {\n          allocatedDevices.add(String.valueOf(gpu));\n        }\n        try {\n          // Update Container#getResourceMapping.\n          ResourceMappings.AssignedResources assignedResources \u003d\n              new ResourceMappings.AssignedResources();\n          assignedResources.updateAssignedResources(allocatedDevices);\n          container.getResourceMappings().addAssignedResources(GPU_URI,\n              assignedResources);\n\n          // Update state store.\n          nmContext.getNMStateStore().storeAssignedResources(containerId,\n              GPU_URI, allocatedDevices);\n        } catch (IOException e) {\n          cleanupAssignGpus(containerId);\n          throw new ResourceHandlerException(e);\n        }\n      }\n\n      return new GpuAllocation(assignedGpus,\n          Sets.difference(allowedGpuDevices, assignedGpus));\n    }\n    return new GpuAllocation(null, allowedGpuDevices);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/gpu/GpuResourceAllocator.java"
    }
  }
}