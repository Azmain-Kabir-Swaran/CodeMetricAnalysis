{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SequenceFile.java",
  "functionName": "run",
  "functionId": "run___deleteInput-boolean",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/SequenceFile.java",
  "functionStartLine": 2960,
  "functionEndLine": 3039,
  "numCommitsSeen": 46,
  "timeTaken": 3025,
  "changeHistory": [
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "6333b3e485dc76a7505bf74e041e274e0a8e6faf",
    "7efb9640be26aabe3878310e82248a1b6b767a9a",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "6333b3e485dc76a7505bf74e041e274e0a8e6faf": "Ybodychange",
    "7efb9640be26aabe3878310e82248a1b6b767a9a": "Ybodychange",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "      public int run(boolean deleteInput) throws IOException {\n        int segments \u003d 0;\n        int currentFile \u003d 0;\n        boolean atEof \u003d (currentFile \u003e\u003d inFiles.length);\n        CompressionType compressionType;\n        CompressionCodec codec \u003d null;\n        segmentLengths.clear();\n        if (atEof) {\n          return 0;\n        }\n        \n        // Initialize\n        in \u003d new Reader(fs, inFiles[currentFile], conf);\n        compressionType \u003d in.getCompressionType();\n        codec \u003d in.getCompressionCodec();\n        \n        for (int i\u003d0; i \u003c rawValues.length; ++i) {\n          rawValues[i] \u003d null;\n        }\n        \n        while (!atEof) {\n          int count \u003d 0;\n          int bytesProcessed \u003d 0;\n          rawKeys.reset();\n          while (!atEof \u0026\u0026 \n                 bytesProcessed \u003c memoryLimit \u0026\u0026 count \u003c recordLimit) {\n\n            // Read a record into buffer\n            // Note: Attempt to re-use \u0027rawValue\u0027 as far as possible\n            int keyOffset \u003d rawKeys.getLength();       \n            ValueBytes rawValue \u003d \n              (count \u003d\u003d keyOffsets.length || rawValues[count] \u003d\u003d null) ? \n              in.createValueBytes() : \n              rawValues[count];\n            int recordLength \u003d in.nextRaw(rawKeys, rawValue);\n            if (recordLength \u003d\u003d -1) {\n              in.close();\n              if (deleteInput) {\n                fs.delete(inFiles[currentFile], true);\n              }\n              currentFile +\u003d 1;\n              atEof \u003d currentFile \u003e\u003d inFiles.length;\n              if (!atEof) {\n                in \u003d new Reader(fs, inFiles[currentFile], conf);\n              } else {\n                in \u003d null;\n              }\n              continue;\n            }\n\n            int keyLength \u003d rawKeys.getLength() - keyOffset;\n\n            if (count \u003d\u003d keyOffsets.length)\n              grow();\n\n            keyOffsets[count] \u003d keyOffset;                // update pointers\n            pointers[count] \u003d count;\n            keyLengths[count] \u003d keyLength;\n            rawValues[count] \u003d rawValue;\n\n            bytesProcessed +\u003d recordLength; \n            count++;\n          }\n\n          // buffer is full -- sort \u0026 flush it\n          if(LOG.isDebugEnabled()) {\n            LOG.debug(\"flushing segment \" + segments);\n          }\n          rawBuffer \u003d rawKeys.getData();\n          sort(count);\n          // indicate we\u0027re making progress\n          if (progressable !\u003d null) {\n            progressable.progress();\n          }\n          flush(count, bytesProcessed, compressionType, codec, \n                segments\u003d\u003d0 \u0026\u0026 atEof);\n          segments++;\n        }\n        return segments;\n      }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/SequenceFile.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/io/SequenceFile.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/SequenceFile.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "      public int run(boolean deleteInput) throws IOException {\n        int segments \u003d 0;\n        int currentFile \u003d 0;\n        boolean atEof \u003d (currentFile \u003e\u003d inFiles.length);\n        CompressionType compressionType;\n        CompressionCodec codec \u003d null;\n        segmentLengths.clear();\n        if (atEof) {\n          return 0;\n        }\n        \n        // Initialize\n        in \u003d new Reader(fs, inFiles[currentFile], conf);\n        compressionType \u003d in.getCompressionType();\n        codec \u003d in.getCompressionCodec();\n        \n        for (int i\u003d0; i \u003c rawValues.length; ++i) {\n          rawValues[i] \u003d null;\n        }\n        \n        while (!atEof) {\n          int count \u003d 0;\n          int bytesProcessed \u003d 0;\n          rawKeys.reset();\n          while (!atEof \u0026\u0026 \n                 bytesProcessed \u003c memoryLimit \u0026\u0026 count \u003c recordLimit) {\n\n            // Read a record into buffer\n            // Note: Attempt to re-use \u0027rawValue\u0027 as far as possible\n            int keyOffset \u003d rawKeys.getLength();       \n            ValueBytes rawValue \u003d \n              (count \u003d\u003d keyOffsets.length || rawValues[count] \u003d\u003d null) ? \n              in.createValueBytes() : \n              rawValues[count];\n            int recordLength \u003d in.nextRaw(rawKeys, rawValue);\n            if (recordLength \u003d\u003d -1) {\n              in.close();\n              if (deleteInput) {\n                fs.delete(inFiles[currentFile], true);\n              }\n              currentFile +\u003d 1;\n              atEof \u003d currentFile \u003e\u003d inFiles.length;\n              if (!atEof) {\n                in \u003d new Reader(fs, inFiles[currentFile], conf);\n              } else {\n                in \u003d null;\n              }\n              continue;\n            }\n\n            int keyLength \u003d rawKeys.getLength() - keyOffset;\n\n            if (count \u003d\u003d keyOffsets.length)\n              grow();\n\n            keyOffsets[count] \u003d keyOffset;                // update pointers\n            pointers[count] \u003d count;\n            keyLengths[count] \u003d keyLength;\n            rawValues[count] \u003d rawValue;\n\n            bytesProcessed +\u003d recordLength; \n            count++;\n          }\n\n          // buffer is full -- sort \u0026 flush it\n          if(LOG.isDebugEnabled()) {\n            LOG.debug(\"flushing segment \" + segments);\n          }\n          rawBuffer \u003d rawKeys.getData();\n          sort(count);\n          // indicate we\u0027re making progress\n          if (progressable !\u003d null) {\n            progressable.progress();\n          }\n          flush(count, bytesProcessed, compressionType, codec, \n                segments\u003d\u003d0 \u0026\u0026 atEof);\n          segments++;\n        }\n        return segments;\n      }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/io/SequenceFile.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/io/SequenceFile.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/io/SequenceFile.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "      public int run(boolean deleteInput) throws IOException {\n        int segments \u003d 0;\n        int currentFile \u003d 0;\n        boolean atEof \u003d (currentFile \u003e\u003d inFiles.length);\n        CompressionType compressionType;\n        CompressionCodec codec \u003d null;\n        segmentLengths.clear();\n        if (atEof) {\n          return 0;\n        }\n        \n        // Initialize\n        in \u003d new Reader(fs, inFiles[currentFile], conf);\n        compressionType \u003d in.getCompressionType();\n        codec \u003d in.getCompressionCodec();\n        \n        for (int i\u003d0; i \u003c rawValues.length; ++i) {\n          rawValues[i] \u003d null;\n        }\n        \n        while (!atEof) {\n          int count \u003d 0;\n          int bytesProcessed \u003d 0;\n          rawKeys.reset();\n          while (!atEof \u0026\u0026 \n                 bytesProcessed \u003c memoryLimit \u0026\u0026 count \u003c recordLimit) {\n\n            // Read a record into buffer\n            // Note: Attempt to re-use \u0027rawValue\u0027 as far as possible\n            int keyOffset \u003d rawKeys.getLength();       \n            ValueBytes rawValue \u003d \n              (count \u003d\u003d keyOffsets.length || rawValues[count] \u003d\u003d null) ? \n              in.createValueBytes() : \n              rawValues[count];\n            int recordLength \u003d in.nextRaw(rawKeys, rawValue);\n            if (recordLength \u003d\u003d -1) {\n              in.close();\n              if (deleteInput) {\n                fs.delete(inFiles[currentFile], true);\n              }\n              currentFile +\u003d 1;\n              atEof \u003d currentFile \u003e\u003d inFiles.length;\n              if (!atEof) {\n                in \u003d new Reader(fs, inFiles[currentFile], conf);\n              } else {\n                in \u003d null;\n              }\n              continue;\n            }\n\n            int keyLength \u003d rawKeys.getLength() - keyOffset;\n\n            if (count \u003d\u003d keyOffsets.length)\n              grow();\n\n            keyOffsets[count] \u003d keyOffset;                // update pointers\n            pointers[count] \u003d count;\n            keyLengths[count] \u003d keyLength;\n            rawValues[count] \u003d rawValue;\n\n            bytesProcessed +\u003d recordLength; \n            count++;\n          }\n\n          // buffer is full -- sort \u0026 flush it\n          if(LOG.isDebugEnabled()) {\n            LOG.debug(\"flushing segment \" + segments);\n          }\n          rawBuffer \u003d rawKeys.getData();\n          sort(count);\n          // indicate we\u0027re making progress\n          if (progressable !\u003d null) {\n            progressable.progress();\n          }\n          flush(count, bytesProcessed, compressionType, codec, \n                segments\u003d\u003d0 \u0026\u0026 atEof);\n          segments++;\n        }\n        return segments;\n      }",
      "path": "common/src/java/org/apache/hadoop/io/SequenceFile.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/io/SequenceFile.java",
        "newPath": "common/src/java/org/apache/hadoop/io/SequenceFile.java"
      }
    },
    "6333b3e485dc76a7505bf74e041e274e0a8e6faf": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6856. Simplify constructors for SequenceFile, and MapFile. (omalley)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1002937 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/09/10 7:59 PM",
      "commitName": "6333b3e485dc76a7505bf74e041e274e0a8e6faf",
      "commitAuthor": "Owen O\u0027Malley",
      "commitDateOld": "28/08/10 3:44 PM",
      "commitNameOld": "7efb9640be26aabe3878310e82248a1b6b767a9a",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 32.18,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,82 +1,80 @@\n       public int run(boolean deleteInput) throws IOException {\n         int segments \u003d 0;\n         int currentFile \u003d 0;\n         boolean atEof \u003d (currentFile \u003e\u003d inFiles.length);\n-        boolean isCompressed \u003d false;\n-        boolean isBlockCompressed \u003d false;\n+        CompressionType compressionType;\n         CompressionCodec codec \u003d null;\n         segmentLengths.clear();\n         if (atEof) {\n           return 0;\n         }\n         \n         // Initialize\n         in \u003d new Reader(fs, inFiles[currentFile], conf);\n-        isCompressed \u003d in.isCompressed();\n-        isBlockCompressed \u003d in.isBlockCompressed();\n+        compressionType \u003d in.getCompressionType();\n         codec \u003d in.getCompressionCodec();\n         \n         for (int i\u003d0; i \u003c rawValues.length; ++i) {\n           rawValues[i] \u003d null;\n         }\n         \n         while (!atEof) {\n           int count \u003d 0;\n           int bytesProcessed \u003d 0;\n           rawKeys.reset();\n           while (!atEof \u0026\u0026 \n                  bytesProcessed \u003c memoryLimit \u0026\u0026 count \u003c recordLimit) {\n \n             // Read a record into buffer\n             // Note: Attempt to re-use \u0027rawValue\u0027 as far as possible\n             int keyOffset \u003d rawKeys.getLength();       \n             ValueBytes rawValue \u003d \n               (count \u003d\u003d keyOffsets.length || rawValues[count] \u003d\u003d null) ? \n               in.createValueBytes() : \n               rawValues[count];\n             int recordLength \u003d in.nextRaw(rawKeys, rawValue);\n             if (recordLength \u003d\u003d -1) {\n               in.close();\n               if (deleteInput) {\n                 fs.delete(inFiles[currentFile], true);\n               }\n               currentFile +\u003d 1;\n               atEof \u003d currentFile \u003e\u003d inFiles.length;\n               if (!atEof) {\n                 in \u003d new Reader(fs, inFiles[currentFile], conf);\n               } else {\n                 in \u003d null;\n               }\n               continue;\n             }\n \n             int keyLength \u003d rawKeys.getLength() - keyOffset;\n \n             if (count \u003d\u003d keyOffsets.length)\n               grow();\n \n             keyOffsets[count] \u003d keyOffset;                // update pointers\n             pointers[count] \u003d count;\n             keyLengths[count] \u003d keyLength;\n             rawValues[count] \u003d rawValue;\n \n             bytesProcessed +\u003d recordLength; \n             count++;\n           }\n \n           // buffer is full -- sort \u0026 flush it\n           if(LOG.isDebugEnabled()) {\n             LOG.debug(\"flushing segment \" + segments);\n           }\n           rawBuffer \u003d rawKeys.getData();\n           sort(count);\n           // indicate we\u0027re making progress\n           if (progressable !\u003d null) {\n             progressable.progress();\n           }\n-          flush(count, bytesProcessed, isCompressed, isBlockCompressed, codec, \n+          flush(count, bytesProcessed, compressionType, codec, \n                 segments\u003d\u003d0 \u0026\u0026 atEof);\n           segments++;\n         }\n         return segments;\n       }\n\\ No newline at end of file\n",
      "actualSource": "      public int run(boolean deleteInput) throws IOException {\n        int segments \u003d 0;\n        int currentFile \u003d 0;\n        boolean atEof \u003d (currentFile \u003e\u003d inFiles.length);\n        CompressionType compressionType;\n        CompressionCodec codec \u003d null;\n        segmentLengths.clear();\n        if (atEof) {\n          return 0;\n        }\n        \n        // Initialize\n        in \u003d new Reader(fs, inFiles[currentFile], conf);\n        compressionType \u003d in.getCompressionType();\n        codec \u003d in.getCompressionCodec();\n        \n        for (int i\u003d0; i \u003c rawValues.length; ++i) {\n          rawValues[i] \u003d null;\n        }\n        \n        while (!atEof) {\n          int count \u003d 0;\n          int bytesProcessed \u003d 0;\n          rawKeys.reset();\n          while (!atEof \u0026\u0026 \n                 bytesProcessed \u003c memoryLimit \u0026\u0026 count \u003c recordLimit) {\n\n            // Read a record into buffer\n            // Note: Attempt to re-use \u0027rawValue\u0027 as far as possible\n            int keyOffset \u003d rawKeys.getLength();       \n            ValueBytes rawValue \u003d \n              (count \u003d\u003d keyOffsets.length || rawValues[count] \u003d\u003d null) ? \n              in.createValueBytes() : \n              rawValues[count];\n            int recordLength \u003d in.nextRaw(rawKeys, rawValue);\n            if (recordLength \u003d\u003d -1) {\n              in.close();\n              if (deleteInput) {\n                fs.delete(inFiles[currentFile], true);\n              }\n              currentFile +\u003d 1;\n              atEof \u003d currentFile \u003e\u003d inFiles.length;\n              if (!atEof) {\n                in \u003d new Reader(fs, inFiles[currentFile], conf);\n              } else {\n                in \u003d null;\n              }\n              continue;\n            }\n\n            int keyLength \u003d rawKeys.getLength() - keyOffset;\n\n            if (count \u003d\u003d keyOffsets.length)\n              grow();\n\n            keyOffsets[count] \u003d keyOffset;                // update pointers\n            pointers[count] \u003d count;\n            keyLengths[count] \u003d keyLength;\n            rawValues[count] \u003d rawValue;\n\n            bytesProcessed +\u003d recordLength; \n            count++;\n          }\n\n          // buffer is full -- sort \u0026 flush it\n          if(LOG.isDebugEnabled()) {\n            LOG.debug(\"flushing segment \" + segments);\n          }\n          rawBuffer \u003d rawKeys.getData();\n          sort(count);\n          // indicate we\u0027re making progress\n          if (progressable !\u003d null) {\n            progressable.progress();\n          }\n          flush(count, bytesProcessed, compressionType, codec, \n                segments\u003d\u003d0 \u0026\u0026 atEof);\n          segments++;\n        }\n        return segments;\n      }",
      "path": "src/java/org/apache/hadoop/io/SequenceFile.java",
      "extendedDetails": {}
    },
    "7efb9640be26aabe3878310e82248a1b6b767a9a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6884. Add LOG.isDebugEnabled() guard for each LOG.debug(..).  Contributed by Erik Steffl\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@990460 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/08/10 3:44 PM",
      "commitName": "7efb9640be26aabe3878310e82248a1b6b767a9a",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "11/06/10 2:34 PM",
      "commitNameOld": "6378822a67c0baa502d22201f5c2b478cbe1261c",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 78.05,
      "commitsBetweenForRepo": 66,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,80 +1,82 @@\n       public int run(boolean deleteInput) throws IOException {\n         int segments \u003d 0;\n         int currentFile \u003d 0;\n         boolean atEof \u003d (currentFile \u003e\u003d inFiles.length);\n         boolean isCompressed \u003d false;\n         boolean isBlockCompressed \u003d false;\n         CompressionCodec codec \u003d null;\n         segmentLengths.clear();\n         if (atEof) {\n           return 0;\n         }\n         \n         // Initialize\n         in \u003d new Reader(fs, inFiles[currentFile], conf);\n         isCompressed \u003d in.isCompressed();\n         isBlockCompressed \u003d in.isBlockCompressed();\n         codec \u003d in.getCompressionCodec();\n         \n         for (int i\u003d0; i \u003c rawValues.length; ++i) {\n           rawValues[i] \u003d null;\n         }\n         \n         while (!atEof) {\n           int count \u003d 0;\n           int bytesProcessed \u003d 0;\n           rawKeys.reset();\n           while (!atEof \u0026\u0026 \n                  bytesProcessed \u003c memoryLimit \u0026\u0026 count \u003c recordLimit) {\n \n             // Read a record into buffer\n             // Note: Attempt to re-use \u0027rawValue\u0027 as far as possible\n             int keyOffset \u003d rawKeys.getLength();       \n             ValueBytes rawValue \u003d \n               (count \u003d\u003d keyOffsets.length || rawValues[count] \u003d\u003d null) ? \n               in.createValueBytes() : \n               rawValues[count];\n             int recordLength \u003d in.nextRaw(rawKeys, rawValue);\n             if (recordLength \u003d\u003d -1) {\n               in.close();\n               if (deleteInput) {\n                 fs.delete(inFiles[currentFile], true);\n               }\n               currentFile +\u003d 1;\n               atEof \u003d currentFile \u003e\u003d inFiles.length;\n               if (!atEof) {\n                 in \u003d new Reader(fs, inFiles[currentFile], conf);\n               } else {\n                 in \u003d null;\n               }\n               continue;\n             }\n \n             int keyLength \u003d rawKeys.getLength() - keyOffset;\n \n             if (count \u003d\u003d keyOffsets.length)\n               grow();\n \n             keyOffsets[count] \u003d keyOffset;                // update pointers\n             pointers[count] \u003d count;\n             keyLengths[count] \u003d keyLength;\n             rawValues[count] \u003d rawValue;\n \n             bytesProcessed +\u003d recordLength; \n             count++;\n           }\n \n           // buffer is full -- sort \u0026 flush it\n-          LOG.debug(\"flushing segment \" + segments);\n+          if(LOG.isDebugEnabled()) {\n+            LOG.debug(\"flushing segment \" + segments);\n+          }\n           rawBuffer \u003d rawKeys.getData();\n           sort(count);\n           // indicate we\u0027re making progress\n           if (progressable !\u003d null) {\n             progressable.progress();\n           }\n           flush(count, bytesProcessed, isCompressed, isBlockCompressed, codec, \n                 segments\u003d\u003d0 \u0026\u0026 atEof);\n           segments++;\n         }\n         return segments;\n       }\n\\ No newline at end of file\n",
      "actualSource": "      public int run(boolean deleteInput) throws IOException {\n        int segments \u003d 0;\n        int currentFile \u003d 0;\n        boolean atEof \u003d (currentFile \u003e\u003d inFiles.length);\n        boolean isCompressed \u003d false;\n        boolean isBlockCompressed \u003d false;\n        CompressionCodec codec \u003d null;\n        segmentLengths.clear();\n        if (atEof) {\n          return 0;\n        }\n        \n        // Initialize\n        in \u003d new Reader(fs, inFiles[currentFile], conf);\n        isCompressed \u003d in.isCompressed();\n        isBlockCompressed \u003d in.isBlockCompressed();\n        codec \u003d in.getCompressionCodec();\n        \n        for (int i\u003d0; i \u003c rawValues.length; ++i) {\n          rawValues[i] \u003d null;\n        }\n        \n        while (!atEof) {\n          int count \u003d 0;\n          int bytesProcessed \u003d 0;\n          rawKeys.reset();\n          while (!atEof \u0026\u0026 \n                 bytesProcessed \u003c memoryLimit \u0026\u0026 count \u003c recordLimit) {\n\n            // Read a record into buffer\n            // Note: Attempt to re-use \u0027rawValue\u0027 as far as possible\n            int keyOffset \u003d rawKeys.getLength();       \n            ValueBytes rawValue \u003d \n              (count \u003d\u003d keyOffsets.length || rawValues[count] \u003d\u003d null) ? \n              in.createValueBytes() : \n              rawValues[count];\n            int recordLength \u003d in.nextRaw(rawKeys, rawValue);\n            if (recordLength \u003d\u003d -1) {\n              in.close();\n              if (deleteInput) {\n                fs.delete(inFiles[currentFile], true);\n              }\n              currentFile +\u003d 1;\n              atEof \u003d currentFile \u003e\u003d inFiles.length;\n              if (!atEof) {\n                in \u003d new Reader(fs, inFiles[currentFile], conf);\n              } else {\n                in \u003d null;\n              }\n              continue;\n            }\n\n            int keyLength \u003d rawKeys.getLength() - keyOffset;\n\n            if (count \u003d\u003d keyOffsets.length)\n              grow();\n\n            keyOffsets[count] \u003d keyOffset;                // update pointers\n            pointers[count] \u003d count;\n            keyLengths[count] \u003d keyLength;\n            rawValues[count] \u003d rawValue;\n\n            bytesProcessed +\u003d recordLength; \n            count++;\n          }\n\n          // buffer is full -- sort \u0026 flush it\n          if(LOG.isDebugEnabled()) {\n            LOG.debug(\"flushing segment \" + segments);\n          }\n          rawBuffer \u003d rawKeys.getData();\n          sort(count);\n          // indicate we\u0027re making progress\n          if (progressable !\u003d null) {\n            progressable.progress();\n          }\n          flush(count, bytesProcessed, isCompressed, isBlockCompressed, codec, \n                segments\u003d\u003d0 \u0026\u0026 atEof);\n          segments++;\n        }\n        return segments;\n      }",
      "path": "src/java/org/apache/hadoop/io/SequenceFile.java",
      "extendedDetails": {}
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,80 @@\n+      public int run(boolean deleteInput) throws IOException {\n+        int segments \u003d 0;\n+        int currentFile \u003d 0;\n+        boolean atEof \u003d (currentFile \u003e\u003d inFiles.length);\n+        boolean isCompressed \u003d false;\n+        boolean isBlockCompressed \u003d false;\n+        CompressionCodec codec \u003d null;\n+        segmentLengths.clear();\n+        if (atEof) {\n+          return 0;\n+        }\n+        \n+        // Initialize\n+        in \u003d new Reader(fs, inFiles[currentFile], conf);\n+        isCompressed \u003d in.isCompressed();\n+        isBlockCompressed \u003d in.isBlockCompressed();\n+        codec \u003d in.getCompressionCodec();\n+        \n+        for (int i\u003d0; i \u003c rawValues.length; ++i) {\n+          rawValues[i] \u003d null;\n+        }\n+        \n+        while (!atEof) {\n+          int count \u003d 0;\n+          int bytesProcessed \u003d 0;\n+          rawKeys.reset();\n+          while (!atEof \u0026\u0026 \n+                 bytesProcessed \u003c memoryLimit \u0026\u0026 count \u003c recordLimit) {\n+\n+            // Read a record into buffer\n+            // Note: Attempt to re-use \u0027rawValue\u0027 as far as possible\n+            int keyOffset \u003d rawKeys.getLength();       \n+            ValueBytes rawValue \u003d \n+              (count \u003d\u003d keyOffsets.length || rawValues[count] \u003d\u003d null) ? \n+              in.createValueBytes() : \n+              rawValues[count];\n+            int recordLength \u003d in.nextRaw(rawKeys, rawValue);\n+            if (recordLength \u003d\u003d -1) {\n+              in.close();\n+              if (deleteInput) {\n+                fs.delete(inFiles[currentFile], true);\n+              }\n+              currentFile +\u003d 1;\n+              atEof \u003d currentFile \u003e\u003d inFiles.length;\n+              if (!atEof) {\n+                in \u003d new Reader(fs, inFiles[currentFile], conf);\n+              } else {\n+                in \u003d null;\n+              }\n+              continue;\n+            }\n+\n+            int keyLength \u003d rawKeys.getLength() - keyOffset;\n+\n+            if (count \u003d\u003d keyOffsets.length)\n+              grow();\n+\n+            keyOffsets[count] \u003d keyOffset;                // update pointers\n+            pointers[count] \u003d count;\n+            keyLengths[count] \u003d keyLength;\n+            rawValues[count] \u003d rawValue;\n+\n+            bytesProcessed +\u003d recordLength; \n+            count++;\n+          }\n+\n+          // buffer is full -- sort \u0026 flush it\n+          LOG.debug(\"flushing segment \" + segments);\n+          rawBuffer \u003d rawKeys.getData();\n+          sort(count);\n+          // indicate we\u0027re making progress\n+          if (progressable !\u003d null) {\n+            progressable.progress();\n+          }\n+          flush(count, bytesProcessed, isCompressed, isBlockCompressed, codec, \n+                segments\u003d\u003d0 \u0026\u0026 atEof);\n+          segments++;\n+        }\n+        return segments;\n+      }\n\\ No newline at end of file\n",
      "actualSource": "      public int run(boolean deleteInput) throws IOException {\n        int segments \u003d 0;\n        int currentFile \u003d 0;\n        boolean atEof \u003d (currentFile \u003e\u003d inFiles.length);\n        boolean isCompressed \u003d false;\n        boolean isBlockCompressed \u003d false;\n        CompressionCodec codec \u003d null;\n        segmentLengths.clear();\n        if (atEof) {\n          return 0;\n        }\n        \n        // Initialize\n        in \u003d new Reader(fs, inFiles[currentFile], conf);\n        isCompressed \u003d in.isCompressed();\n        isBlockCompressed \u003d in.isBlockCompressed();\n        codec \u003d in.getCompressionCodec();\n        \n        for (int i\u003d0; i \u003c rawValues.length; ++i) {\n          rawValues[i] \u003d null;\n        }\n        \n        while (!atEof) {\n          int count \u003d 0;\n          int bytesProcessed \u003d 0;\n          rawKeys.reset();\n          while (!atEof \u0026\u0026 \n                 bytesProcessed \u003c memoryLimit \u0026\u0026 count \u003c recordLimit) {\n\n            // Read a record into buffer\n            // Note: Attempt to re-use \u0027rawValue\u0027 as far as possible\n            int keyOffset \u003d rawKeys.getLength();       \n            ValueBytes rawValue \u003d \n              (count \u003d\u003d keyOffsets.length || rawValues[count] \u003d\u003d null) ? \n              in.createValueBytes() : \n              rawValues[count];\n            int recordLength \u003d in.nextRaw(rawKeys, rawValue);\n            if (recordLength \u003d\u003d -1) {\n              in.close();\n              if (deleteInput) {\n                fs.delete(inFiles[currentFile], true);\n              }\n              currentFile +\u003d 1;\n              atEof \u003d currentFile \u003e\u003d inFiles.length;\n              if (!atEof) {\n                in \u003d new Reader(fs, inFiles[currentFile], conf);\n              } else {\n                in \u003d null;\n              }\n              continue;\n            }\n\n            int keyLength \u003d rawKeys.getLength() - keyOffset;\n\n            if (count \u003d\u003d keyOffsets.length)\n              grow();\n\n            keyOffsets[count] \u003d keyOffset;                // update pointers\n            pointers[count] \u003d count;\n            keyLengths[count] \u003d keyLength;\n            rawValues[count] \u003d rawValue;\n\n            bytesProcessed +\u003d recordLength; \n            count++;\n          }\n\n          // buffer is full -- sort \u0026 flush it\n          LOG.debug(\"flushing segment \" + segments);\n          rawBuffer \u003d rawKeys.getData();\n          sort(count);\n          // indicate we\u0027re making progress\n          if (progressable !\u003d null) {\n            progressable.progress();\n          }\n          flush(count, bytesProcessed, isCompressed, isBlockCompressed, codec, \n                segments\u003d\u003d0 \u0026\u0026 atEof);\n          segments++;\n        }\n        return segments;\n      }",
      "path": "src/java/org/apache/hadoop/io/SequenceFile.java"
    }
  }
}