{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AvailableSpaceRackFaultTolerantBlockPlacementPolicy.java",
  "functionName": "select",
  "functionId": "select___a-DatanodeDescriptor__b-DatanodeDescriptor",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/AvailableSpaceRackFaultTolerantBlockPlacementPolicy.java",
  "functionStartLine": 99,
  "functionEndLine": 113,
  "numCommitsSeen": 1,
  "timeTaken": 713,
  "changeHistory": [
    "f99fcb26ab9153ac281fa95b97696387a9f3995c"
  ],
  "changeHistoryShort": {
    "f99fcb26ab9153ac281fa95b97696387a9f3995c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f99fcb26ab9153ac281fa95b97696387a9f3995c": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-15288. Add Available Space Rack Fault Tolerant BPP. Contributed by Ayush Saxena.\n",
      "commitDate": "23/05/20 5:59 AM",
      "commitName": "f99fcb26ab9153ac281fa95b97696387a9f3995c",
      "commitAuthor": "Ayush Saxena",
      "diff": "@@ -0,0 +1,15 @@\n+  private DatanodeDescriptor select(DatanodeDescriptor a,\n+      DatanodeDescriptor b) {\n+    if (a !\u003d null \u0026\u0026 b !\u003d null) {\n+      int ret \u003d compareDataNode(a, b);\n+      if (ret \u003d\u003d 0) {\n+        return a;\n+      } else if (ret \u003c 0) {\n+        return (RAND.nextInt(100) \u003c balancedPreference) ? a : b;\n+      } else {\n+        return (RAND.nextInt(100) \u003c balancedPreference) ? b : a;\n+      }\n+    } else {\n+      return a \u003d\u003d null ? b : a;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private DatanodeDescriptor select(DatanodeDescriptor a,\n      DatanodeDescriptor b) {\n    if (a !\u003d null \u0026\u0026 b !\u003d null) {\n      int ret \u003d compareDataNode(a, b);\n      if (ret \u003d\u003d 0) {\n        return a;\n      } else if (ret \u003c 0) {\n        return (RAND.nextInt(100) \u003c balancedPreference) ? a : b;\n      } else {\n        return (RAND.nextInt(100) \u003c balancedPreference) ? b : a;\n      }\n    } else {\n      return a \u003d\u003d null ? b : a;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/AvailableSpaceRackFaultTolerantBlockPlacementPolicy.java"
    }
  }
}