{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "EncryptionZoneManager.java",
  "functionName": "listEncryptionZones",
  "functionId": "listEncryptionZones___prevId-long",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EncryptionZoneManager.java",
  "functionStartLine": 576,
  "functionEndLine": 613,
  "numCommitsSeen": 49,
  "timeTaken": 4842,
  "changeHistory": [
    "1000a2af04b24c123a3b08168f36b4e90420cab7",
    "401c7318723d8d62c7fc29728f7f4e8d336b4d2f",
    "9d175853b0170683ad5f21d9bcdeaac49fe89e04",
    "6de9213df111a9a4ed875db995d67af72d08a798",
    "e96ce6f3e3e549202ce3c48d4733ba34098870ad",
    "1737950d0fc83c68f386881b843c41b0b1e342de",
    "0ecefe60179968984b1892a14411566b7a0c8df3",
    "33ce887c20ec806ace02063e42599c3db76b536a",
    "70c99278a9ffb8a22059c20357b435c7b576b3db",
    "b57ec165674143daf4fa50378446a9f831d3b9d3",
    "7b466b3b7087a7b8c6e4e466600f6e13284e0dee",
    "d79f27b429410daa6770a51867d7ecea728dff89",
    "ceed0f6c46736323bd1b077125ff4e217c649208"
  ],
  "changeHistoryShort": {
    "1000a2af04b24c123a3b08168f36b4e90420cab7": "Ybodychange",
    "401c7318723d8d62c7fc29728f7f4e8d336b4d2f": "Ybodychange",
    "9d175853b0170683ad5f21d9bcdeaac49fe89e04": "Ybodychange",
    "6de9213df111a9a4ed875db995d67af72d08a798": "Ybodychange",
    "e96ce6f3e3e549202ce3c48d4733ba34098870ad": "Ybodychange",
    "1737950d0fc83c68f386881b843c41b0b1e342de": "Ybodychange",
    "0ecefe60179968984b1892a14411566b7a0c8df3": "Ybodychange",
    "33ce887c20ec806ace02063e42599c3db76b536a": "Ymultichange(Yreturntypechange,Ybodychange)",
    "70c99278a9ffb8a22059c20357b435c7b576b3db": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
    "b57ec165674143daf4fa50378446a9f831d3b9d3": "Ybodychange",
    "7b466b3b7087a7b8c6e4e466600f6e13284e0dee": "Ybodychange",
    "d79f27b429410daa6770a51867d7ecea728dff89": "Ybodychange",
    "ceed0f6c46736323bd1b077125ff4e217c649208": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1000a2af04b24c123a3b08168f36b4e90420cab7": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10899. Add functionality to re-encrypt EDEKs.\n",
      "commitDate": "23/08/17 5:06 PM",
      "commitName": "1000a2af04b24c123a3b08168f36b4e90420cab7",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "25/07/17 9:03 AM",
      "commitNameOld": "a68b5b31cf846c0fc94c430bafd07a9bca369234",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 29.34,
      "commitsBetweenForRepo": 233,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,38 @@\n   BatchedListEntries\u003cEncryptionZone\u003e listEncryptionZones(long prevId)\n       throws IOException {\n     assert dir.hasReadLock();\n     if (!hasCreatedEncryptionZone()) {\n       return new BatchedListEntries\u003cEncryptionZone\u003e(Lists.newArrayList(), false);\n     }\n     NavigableMap\u003cLong, EncryptionZoneInt\u003e tailMap \u003d encryptionZones.tailMap\n         (prevId, false);\n     final int numResponses \u003d Math.min(maxListEncryptionZonesResponses,\n         tailMap.size());\n     final List\u003cEncryptionZone\u003e zones \u003d\n         Lists.newArrayListWithExpectedSize(numResponses);\n \n     int count \u003d 0;\n     for (EncryptionZoneInt ezi : tailMap.values()) {\n       /*\n        Skip EZs that are only present in snapshots. Re-resolve the path to \n        see if the path\u0027s current inode ID matches EZ map\u0027s INode ID.\n-       \n+\n        INode#getFullPathName simply calls getParent recursively, so will return\n-       the INode\u0027s parents at the time it was snapshotted. It will not \n+       the INode\u0027s parents at the time it was snapshotted. It will not\n        contain a reference INode.\n       */\n-      final String pathName \u003d getFullPathName(ezi);\n-      INode inode \u003d dir.getInode(ezi.getINodeId());\n-      INode lastINode \u003d null;\n-      if (inode.getParent() !\u003d null || inode.isRoot()) {\n-        INodesInPath iip \u003d dir.getINodesInPath(pathName, DirOp.READ_LINK);\n-        lastINode \u003d iip.getLastINode();\n-      }\n-      if (lastINode \u003d\u003d null || lastINode.getId() !\u003d ezi.getINodeId()) {\n+      final String pathName \u003d getFullPathName(ezi.getINodeId());\n+      if (!pathResolvesToId(ezi.getINodeId(), pathName)) {\n         continue;\n       }\n       // Add the EZ to the result list\n       zones.add(new EncryptionZone(ezi.getINodeId(), pathName,\n           ezi.getSuite(), ezi.getVersion(), ezi.getKeyName()));\n       count++;\n       if (count \u003e\u003d numResponses) {\n         break;\n       }\n     }\n     final boolean hasMore \u003d (numResponses \u003c tailMap.size());\n     return new BatchedListEntries\u003cEncryptionZone\u003e(zones, hasMore);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  BatchedListEntries\u003cEncryptionZone\u003e listEncryptionZones(long prevId)\n      throws IOException {\n    assert dir.hasReadLock();\n    if (!hasCreatedEncryptionZone()) {\n      return new BatchedListEntries\u003cEncryptionZone\u003e(Lists.newArrayList(), false);\n    }\n    NavigableMap\u003cLong, EncryptionZoneInt\u003e tailMap \u003d encryptionZones.tailMap\n        (prevId, false);\n    final int numResponses \u003d Math.min(maxListEncryptionZonesResponses,\n        tailMap.size());\n    final List\u003cEncryptionZone\u003e zones \u003d\n        Lists.newArrayListWithExpectedSize(numResponses);\n\n    int count \u003d 0;\n    for (EncryptionZoneInt ezi : tailMap.values()) {\n      /*\n       Skip EZs that are only present in snapshots. Re-resolve the path to \n       see if the path\u0027s current inode ID matches EZ map\u0027s INode ID.\n\n       INode#getFullPathName simply calls getParent recursively, so will return\n       the INode\u0027s parents at the time it was snapshotted. It will not\n       contain a reference INode.\n      */\n      final String pathName \u003d getFullPathName(ezi.getINodeId());\n      if (!pathResolvesToId(ezi.getINodeId(), pathName)) {\n        continue;\n      }\n      // Add the EZ to the result list\n      zones.add(new EncryptionZone(ezi.getINodeId(), pathName,\n          ezi.getSuite(), ezi.getVersion(), ezi.getKeyName()));\n      count++;\n      if (count \u003e\u003d numResponses) {\n        break;\n      }\n    }\n    final boolean hasMore \u003d (numResponses \u003c tailMap.size());\n    return new BatchedListEntries\u003cEncryptionZone\u003e(zones, hasMore);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EncryptionZoneManager.java",
      "extendedDetails": {}
    },
    "401c7318723d8d62c7fc29728f7f4e8d336b4d2f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11197. Listing encryption zones fails when deleting a EZ that is on a snapshotted directory. Contributed by Wellington Chevreuil.\n",
      "commitDate": "08/12/16 12:40 PM",
      "commitName": "401c7318723d8d62c7fc29728f7f4e8d336b4d2f",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "24/10/16 3:14 PM",
      "commitNameOld": "9d175853b0170683ad5f21d9bcdeaac49fe89e04",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 44.93,
      "commitsBetweenForRepo": 388,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,44 @@\n   BatchedListEntries\u003cEncryptionZone\u003e listEncryptionZones(long prevId)\n       throws IOException {\n     assert dir.hasReadLock();\n     if (!hasCreatedEncryptionZone()) {\n       return new BatchedListEntries\u003cEncryptionZone\u003e(Lists.newArrayList(), false);\n     }\n     NavigableMap\u003cLong, EncryptionZoneInt\u003e tailMap \u003d encryptionZones.tailMap\n         (prevId, false);\n     final int numResponses \u003d Math.min(maxListEncryptionZonesResponses,\n         tailMap.size());\n     final List\u003cEncryptionZone\u003e zones \u003d\n         Lists.newArrayListWithExpectedSize(numResponses);\n \n     int count \u003d 0;\n     for (EncryptionZoneInt ezi : tailMap.values()) {\n       /*\n        Skip EZs that are only present in snapshots. Re-resolve the path to \n        see if the path\u0027s current inode ID matches EZ map\u0027s INode ID.\n        \n        INode#getFullPathName simply calls getParent recursively, so will return\n        the INode\u0027s parents at the time it was snapshotted. It will not \n        contain a reference INode.\n       */\n       final String pathName \u003d getFullPathName(ezi);\n-      INodesInPath iip \u003d dir.getINodesInPath(pathName, DirOp.READ_LINK);\n-      INode lastINode \u003d iip.getLastINode();\n+      INode inode \u003d dir.getInode(ezi.getINodeId());\n+      INode lastINode \u003d null;\n+      if (inode.getParent() !\u003d null || inode.isRoot()) {\n+        INodesInPath iip \u003d dir.getINodesInPath(pathName, DirOp.READ_LINK);\n+        lastINode \u003d iip.getLastINode();\n+      }\n       if (lastINode \u003d\u003d null || lastINode.getId() !\u003d ezi.getINodeId()) {\n         continue;\n       }\n       // Add the EZ to the result list\n       zones.add(new EncryptionZone(ezi.getINodeId(), pathName,\n           ezi.getSuite(), ezi.getVersion(), ezi.getKeyName()));\n       count++;\n       if (count \u003e\u003d numResponses) {\n         break;\n       }\n     }\n     final boolean hasMore \u003d (numResponses \u003c tailMap.size());\n     return new BatchedListEntries\u003cEncryptionZone\u003e(zones, hasMore);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  BatchedListEntries\u003cEncryptionZone\u003e listEncryptionZones(long prevId)\n      throws IOException {\n    assert dir.hasReadLock();\n    if (!hasCreatedEncryptionZone()) {\n      return new BatchedListEntries\u003cEncryptionZone\u003e(Lists.newArrayList(), false);\n    }\n    NavigableMap\u003cLong, EncryptionZoneInt\u003e tailMap \u003d encryptionZones.tailMap\n        (prevId, false);\n    final int numResponses \u003d Math.min(maxListEncryptionZonesResponses,\n        tailMap.size());\n    final List\u003cEncryptionZone\u003e zones \u003d\n        Lists.newArrayListWithExpectedSize(numResponses);\n\n    int count \u003d 0;\n    for (EncryptionZoneInt ezi : tailMap.values()) {\n      /*\n       Skip EZs that are only present in snapshots. Re-resolve the path to \n       see if the path\u0027s current inode ID matches EZ map\u0027s INode ID.\n       \n       INode#getFullPathName simply calls getParent recursively, so will return\n       the INode\u0027s parents at the time it was snapshotted. It will not \n       contain a reference INode.\n      */\n      final String pathName \u003d getFullPathName(ezi);\n      INode inode \u003d dir.getInode(ezi.getINodeId());\n      INode lastINode \u003d null;\n      if (inode.getParent() !\u003d null || inode.isRoot()) {\n        INodesInPath iip \u003d dir.getINodesInPath(pathName, DirOp.READ_LINK);\n        lastINode \u003d iip.getLastINode();\n      }\n      if (lastINode \u003d\u003d null || lastINode.getId() !\u003d ezi.getINodeId()) {\n        continue;\n      }\n      // Add the EZ to the result list\n      zones.add(new EncryptionZone(ezi.getINodeId(), pathName,\n          ezi.getSuite(), ezi.getVersion(), ezi.getKeyName()));\n      count++;\n      if (count \u003e\u003d numResponses) {\n        break;\n      }\n    }\n    final boolean hasMore \u003d (numResponses \u003c tailMap.size());\n    return new BatchedListEntries\u003cEncryptionZone\u003e(zones, hasMore);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EncryptionZoneManager.java",
      "extendedDetails": {}
    },
    "9d175853b0170683ad5f21d9bcdeaac49fe89e04": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10997. Reduce number of path resolving methods. Contributed by Daryn Sharp.\n",
      "commitDate": "24/10/16 3:14 PM",
      "commitName": "9d175853b0170683ad5f21d9bcdeaac49fe89e04",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "06/10/16 1:11 PM",
      "commitNameOld": "f32e9fc8f7150f0e889c0774b3ad712af26fbd65",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 18.09,
      "commitsBetweenForRepo": 121,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   BatchedListEntries\u003cEncryptionZone\u003e listEncryptionZones(long prevId)\n       throws IOException {\n     assert dir.hasReadLock();\n     if (!hasCreatedEncryptionZone()) {\n       return new BatchedListEntries\u003cEncryptionZone\u003e(Lists.newArrayList(), false);\n     }\n     NavigableMap\u003cLong, EncryptionZoneInt\u003e tailMap \u003d encryptionZones.tailMap\n         (prevId, false);\n     final int numResponses \u003d Math.min(maxListEncryptionZonesResponses,\n         tailMap.size());\n     final List\u003cEncryptionZone\u003e zones \u003d\n         Lists.newArrayListWithExpectedSize(numResponses);\n \n     int count \u003d 0;\n     for (EncryptionZoneInt ezi : tailMap.values()) {\n       /*\n        Skip EZs that are only present in snapshots. Re-resolve the path to \n        see if the path\u0027s current inode ID matches EZ map\u0027s INode ID.\n        \n        INode#getFullPathName simply calls getParent recursively, so will return\n        the INode\u0027s parents at the time it was snapshotted. It will not \n        contain a reference INode.\n       */\n       final String pathName \u003d getFullPathName(ezi);\n-      INodesInPath iip \u003d dir.getINodesInPath(pathName, false);\n+      INodesInPath iip \u003d dir.getINodesInPath(pathName, DirOp.READ_LINK);\n       INode lastINode \u003d iip.getLastINode();\n       if (lastINode \u003d\u003d null || lastINode.getId() !\u003d ezi.getINodeId()) {\n         continue;\n       }\n       // Add the EZ to the result list\n       zones.add(new EncryptionZone(ezi.getINodeId(), pathName,\n           ezi.getSuite(), ezi.getVersion(), ezi.getKeyName()));\n       count++;\n       if (count \u003e\u003d numResponses) {\n         break;\n       }\n     }\n     final boolean hasMore \u003d (numResponses \u003c tailMap.size());\n     return new BatchedListEntries\u003cEncryptionZone\u003e(zones, hasMore);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  BatchedListEntries\u003cEncryptionZone\u003e listEncryptionZones(long prevId)\n      throws IOException {\n    assert dir.hasReadLock();\n    if (!hasCreatedEncryptionZone()) {\n      return new BatchedListEntries\u003cEncryptionZone\u003e(Lists.newArrayList(), false);\n    }\n    NavigableMap\u003cLong, EncryptionZoneInt\u003e tailMap \u003d encryptionZones.tailMap\n        (prevId, false);\n    final int numResponses \u003d Math.min(maxListEncryptionZonesResponses,\n        tailMap.size());\n    final List\u003cEncryptionZone\u003e zones \u003d\n        Lists.newArrayListWithExpectedSize(numResponses);\n\n    int count \u003d 0;\n    for (EncryptionZoneInt ezi : tailMap.values()) {\n      /*\n       Skip EZs that are only present in snapshots. Re-resolve the path to \n       see if the path\u0027s current inode ID matches EZ map\u0027s INode ID.\n       \n       INode#getFullPathName simply calls getParent recursively, so will return\n       the INode\u0027s parents at the time it was snapshotted. It will not \n       contain a reference INode.\n      */\n      final String pathName \u003d getFullPathName(ezi);\n      INodesInPath iip \u003d dir.getINodesInPath(pathName, DirOp.READ_LINK);\n      INode lastINode \u003d iip.getLastINode();\n      if (lastINode \u003d\u003d null || lastINode.getId() !\u003d ezi.getINodeId()) {\n        continue;\n      }\n      // Add the EZ to the result list\n      zones.add(new EncryptionZone(ezi.getINodeId(), pathName,\n          ezi.getSuite(), ezi.getVersion(), ezi.getKeyName()));\n      count++;\n      if (count \u003e\u003d numResponses) {\n        break;\n      }\n    }\n    final boolean hasMore \u003d (numResponses \u003c tailMap.size());\n    return new BatchedListEntries\u003cEncryptionZone\u003e(zones, hasMore);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EncryptionZoneManager.java",
      "extendedDetails": {}
    },
    "6de9213df111a9a4ed875db995d67af72d08a798": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10458. getFileEncryptionInfo should return quickly for non-encrypted cluster.\n",
      "commitDate": "06/06/16 3:52 PM",
      "commitName": "6de9213df111a9a4ed875db995d67af72d08a798",
      "commitAuthor": "Zhe Zhang",
      "commitDateOld": "21/03/16 11:39 AM",
      "commitNameOld": "e3bb38d62567eafe57d16b78deeba1b71c58e41c",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 77.18,
      "commitsBetweenForRepo": 502,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,40 @@\n   BatchedListEntries\u003cEncryptionZone\u003e listEncryptionZones(long prevId)\n       throws IOException {\n     assert dir.hasReadLock();\n+    if (!hasCreatedEncryptionZone()) {\n+      return new BatchedListEntries\u003cEncryptionZone\u003e(Lists.newArrayList(), false);\n+    }\n     NavigableMap\u003cLong, EncryptionZoneInt\u003e tailMap \u003d encryptionZones.tailMap\n         (prevId, false);\n     final int numResponses \u003d Math.min(maxListEncryptionZonesResponses,\n         tailMap.size());\n     final List\u003cEncryptionZone\u003e zones \u003d\n         Lists.newArrayListWithExpectedSize(numResponses);\n \n     int count \u003d 0;\n     for (EncryptionZoneInt ezi : tailMap.values()) {\n       /*\n        Skip EZs that are only present in snapshots. Re-resolve the path to \n        see if the path\u0027s current inode ID matches EZ map\u0027s INode ID.\n        \n        INode#getFullPathName simply calls getParent recursively, so will return\n        the INode\u0027s parents at the time it was snapshotted. It will not \n        contain a reference INode.\n       */\n       final String pathName \u003d getFullPathName(ezi);\n       INodesInPath iip \u003d dir.getINodesInPath(pathName, false);\n       INode lastINode \u003d iip.getLastINode();\n       if (lastINode \u003d\u003d null || lastINode.getId() !\u003d ezi.getINodeId()) {\n         continue;\n       }\n       // Add the EZ to the result list\n       zones.add(new EncryptionZone(ezi.getINodeId(), pathName,\n           ezi.getSuite(), ezi.getVersion(), ezi.getKeyName()));\n       count++;\n       if (count \u003e\u003d numResponses) {\n         break;\n       }\n     }\n     final boolean hasMore \u003d (numResponses \u003c tailMap.size());\n     return new BatchedListEntries\u003cEncryptionZone\u003e(zones, hasMore);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  BatchedListEntries\u003cEncryptionZone\u003e listEncryptionZones(long prevId)\n      throws IOException {\n    assert dir.hasReadLock();\n    if (!hasCreatedEncryptionZone()) {\n      return new BatchedListEntries\u003cEncryptionZone\u003e(Lists.newArrayList(), false);\n    }\n    NavigableMap\u003cLong, EncryptionZoneInt\u003e tailMap \u003d encryptionZones.tailMap\n        (prevId, false);\n    final int numResponses \u003d Math.min(maxListEncryptionZonesResponses,\n        tailMap.size());\n    final List\u003cEncryptionZone\u003e zones \u003d\n        Lists.newArrayListWithExpectedSize(numResponses);\n\n    int count \u003d 0;\n    for (EncryptionZoneInt ezi : tailMap.values()) {\n      /*\n       Skip EZs that are only present in snapshots. Re-resolve the path to \n       see if the path\u0027s current inode ID matches EZ map\u0027s INode ID.\n       \n       INode#getFullPathName simply calls getParent recursively, so will return\n       the INode\u0027s parents at the time it was snapshotted. It will not \n       contain a reference INode.\n      */\n      final String pathName \u003d getFullPathName(ezi);\n      INodesInPath iip \u003d dir.getINodesInPath(pathName, false);\n      INode lastINode \u003d iip.getLastINode();\n      if (lastINode \u003d\u003d null || lastINode.getId() !\u003d ezi.getINodeId()) {\n        continue;\n      }\n      // Add the EZ to the result list\n      zones.add(new EncryptionZone(ezi.getINodeId(), pathName,\n          ezi.getSuite(), ezi.getVersion(), ezi.getKeyName()));\n      count++;\n      if (count \u003e\u003d numResponses) {\n        break;\n      }\n    }\n    final boolean hasMore \u003d (numResponses \u003c tailMap.size());\n    return new BatchedListEntries\u003cEncryptionZone\u003e(zones, hasMore);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EncryptionZoneManager.java",
      "extendedDetails": {}
    },
    "e96ce6f3e3e549202ce3c48d4733ba34098870ad": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7077. Separate CipherSuite from crypto protocol version. (wang)\n",
      "commitDate": "25/09/14 6:40 PM",
      "commitName": "e96ce6f3e3e549202ce3c48d4733ba34098870ad",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "21/09/14 9:29 PM",
      "commitNameOld": "1737950d0fc83c68f386881b843c41b0b1e342de",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 3.88,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   BatchedListEntries\u003cEncryptionZone\u003e listEncryptionZones(long prevId)\n       throws IOException {\n     assert dir.hasReadLock();\n     NavigableMap\u003cLong, EncryptionZoneInt\u003e tailMap \u003d encryptionZones.tailMap\n         (prevId, false);\n     final int numResponses \u003d Math.min(maxListEncryptionZonesResponses,\n         tailMap.size());\n     final List\u003cEncryptionZone\u003e zones \u003d\n         Lists.newArrayListWithExpectedSize(numResponses);\n \n     int count \u003d 0;\n     for (EncryptionZoneInt ezi : tailMap.values()) {\n       /*\n        Skip EZs that are only present in snapshots. Re-resolve the path to \n        see if the path\u0027s current inode ID matches EZ map\u0027s INode ID.\n        \n        INode#getFullPathName simply calls getParent recursively, so will return\n        the INode\u0027s parents at the time it was snapshotted. It will not \n        contain a reference INode.\n       */\n       final String pathName \u003d getFullPathName(ezi);\n       INodesInPath iip \u003d dir.getINodesInPath(pathName, false);\n       INode lastINode \u003d iip.getLastINode();\n       if (lastINode \u003d\u003d null || lastINode.getId() !\u003d ezi.getINodeId()) {\n         continue;\n       }\n       // Add the EZ to the result list\n       zones.add(new EncryptionZone(ezi.getINodeId(), pathName,\n-          ezi.getSuite(), ezi.getKeyName()));\n+          ezi.getSuite(), ezi.getVersion(), ezi.getKeyName()));\n       count++;\n       if (count \u003e\u003d numResponses) {\n         break;\n       }\n     }\n     final boolean hasMore \u003d (numResponses \u003c tailMap.size());\n     return new BatchedListEntries\u003cEncryptionZone\u003e(zones, hasMore);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  BatchedListEntries\u003cEncryptionZone\u003e listEncryptionZones(long prevId)\n      throws IOException {\n    assert dir.hasReadLock();\n    NavigableMap\u003cLong, EncryptionZoneInt\u003e tailMap \u003d encryptionZones.tailMap\n        (prevId, false);\n    final int numResponses \u003d Math.min(maxListEncryptionZonesResponses,\n        tailMap.size());\n    final List\u003cEncryptionZone\u003e zones \u003d\n        Lists.newArrayListWithExpectedSize(numResponses);\n\n    int count \u003d 0;\n    for (EncryptionZoneInt ezi : tailMap.values()) {\n      /*\n       Skip EZs that are only present in snapshots. Re-resolve the path to \n       see if the path\u0027s current inode ID matches EZ map\u0027s INode ID.\n       \n       INode#getFullPathName simply calls getParent recursively, so will return\n       the INode\u0027s parents at the time it was snapshotted. It will not \n       contain a reference INode.\n      */\n      final String pathName \u003d getFullPathName(ezi);\n      INodesInPath iip \u003d dir.getINodesInPath(pathName, false);\n      INode lastINode \u003d iip.getLastINode();\n      if (lastINode \u003d\u003d null || lastINode.getId() !\u003d ezi.getINodeId()) {\n        continue;\n      }\n      // Add the EZ to the result list\n      zones.add(new EncryptionZone(ezi.getINodeId(), pathName,\n          ezi.getSuite(), ezi.getVersion(), ezi.getKeyName()));\n      count++;\n      if (count \u003e\u003d numResponses) {\n        break;\n      }\n    }\n    final boolean hasMore \u003d (numResponses \u003c tailMap.size());\n    return new BatchedListEntries\u003cEncryptionZone\u003e(zones, hasMore);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EncryptionZoneManager.java",
      "extendedDetails": {}
    },
    "1737950d0fc83c68f386881b843c41b0b1e342de": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6987. Move CipherSuite xattr information up to the encryption zone root. Contributed by Zhe Zhang.\n",
      "commitDate": "21/09/14 9:29 PM",
      "commitName": "1737950d0fc83c68f386881b843c41b0b1e342de",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "17/09/14 9:28 PM",
      "commitNameOld": "0ecefe60179968984b1892a14411566b7a0c8df3",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 4.0,
      "commitsBetweenForRepo": 43,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   BatchedListEntries\u003cEncryptionZone\u003e listEncryptionZones(long prevId)\n       throws IOException {\n     assert dir.hasReadLock();\n     NavigableMap\u003cLong, EncryptionZoneInt\u003e tailMap \u003d encryptionZones.tailMap\n         (prevId, false);\n     final int numResponses \u003d Math.min(maxListEncryptionZonesResponses,\n         tailMap.size());\n     final List\u003cEncryptionZone\u003e zones \u003d\n         Lists.newArrayListWithExpectedSize(numResponses);\n \n     int count \u003d 0;\n     for (EncryptionZoneInt ezi : tailMap.values()) {\n       /*\n        Skip EZs that are only present in snapshots. Re-resolve the path to \n        see if the path\u0027s current inode ID matches EZ map\u0027s INode ID.\n        \n        INode#getFullPathName simply calls getParent recursively, so will return\n        the INode\u0027s parents at the time it was snapshotted. It will not \n        contain a reference INode.\n       */\n       final String pathName \u003d getFullPathName(ezi);\n       INodesInPath iip \u003d dir.getINodesInPath(pathName, false);\n       INode lastINode \u003d iip.getLastINode();\n       if (lastINode \u003d\u003d null || lastINode.getId() !\u003d ezi.getINodeId()) {\n         continue;\n       }\n       // Add the EZ to the result list\n-      zones.add(new EncryptionZone(pathName,\n-          ezi.getKeyName(), ezi.getINodeId()));\n+      zones.add(new EncryptionZone(ezi.getINodeId(), pathName,\n+          ezi.getSuite(), ezi.getKeyName()));\n       count++;\n       if (count \u003e\u003d numResponses) {\n         break;\n       }\n     }\n     final boolean hasMore \u003d (numResponses \u003c tailMap.size());\n     return new BatchedListEntries\u003cEncryptionZone\u003e(zones, hasMore);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  BatchedListEntries\u003cEncryptionZone\u003e listEncryptionZones(long prevId)\n      throws IOException {\n    assert dir.hasReadLock();\n    NavigableMap\u003cLong, EncryptionZoneInt\u003e tailMap \u003d encryptionZones.tailMap\n        (prevId, false);\n    final int numResponses \u003d Math.min(maxListEncryptionZonesResponses,\n        tailMap.size());\n    final List\u003cEncryptionZone\u003e zones \u003d\n        Lists.newArrayListWithExpectedSize(numResponses);\n\n    int count \u003d 0;\n    for (EncryptionZoneInt ezi : tailMap.values()) {\n      /*\n       Skip EZs that are only present in snapshots. Re-resolve the path to \n       see if the path\u0027s current inode ID matches EZ map\u0027s INode ID.\n       \n       INode#getFullPathName simply calls getParent recursively, so will return\n       the INode\u0027s parents at the time it was snapshotted. It will not \n       contain a reference INode.\n      */\n      final String pathName \u003d getFullPathName(ezi);\n      INodesInPath iip \u003d dir.getINodesInPath(pathName, false);\n      INode lastINode \u003d iip.getLastINode();\n      if (lastINode \u003d\u003d null || lastINode.getId() !\u003d ezi.getINodeId()) {\n        continue;\n      }\n      // Add the EZ to the result list\n      zones.add(new EncryptionZone(ezi.getINodeId(), pathName,\n          ezi.getSuite(), ezi.getKeyName()));\n      count++;\n      if (count \u003e\u003d numResponses) {\n        break;\n      }\n    }\n    final boolean hasMore \u003d (numResponses \u003c tailMap.size());\n    return new BatchedListEntries\u003cEncryptionZone\u003e(zones, hasMore);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EncryptionZoneManager.java",
      "extendedDetails": {}
    },
    "0ecefe60179968984b1892a14411566b7a0c8df3": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7078. Fix listEZs to work correctly with snapshots. (wang)\n",
      "commitDate": "17/09/14 9:28 PM",
      "commitName": "0ecefe60179968984b1892a14411566b7a0c8df3",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "16/09/14 4:41 PM",
      "commitNameOld": "33ce887c20ec806ace02063e42599c3db76b536a",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 1.2,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,37 @@\n   BatchedListEntries\u003cEncryptionZone\u003e listEncryptionZones(long prevId)\n       throws IOException {\n     assert dir.hasReadLock();\n     NavigableMap\u003cLong, EncryptionZoneInt\u003e tailMap \u003d encryptionZones.tailMap\n         (prevId, false);\n     final int numResponses \u003d Math.min(maxListEncryptionZonesResponses,\n         tailMap.size());\n     final List\u003cEncryptionZone\u003e zones \u003d\n         Lists.newArrayListWithExpectedSize(numResponses);\n \n     int count \u003d 0;\n     for (EncryptionZoneInt ezi : tailMap.values()) {\n-      zones.add(new EncryptionZone(getFullPathName(ezi),\n+      /*\n+       Skip EZs that are only present in snapshots. Re-resolve the path to \n+       see if the path\u0027s current inode ID matches EZ map\u0027s INode ID.\n+       \n+       INode#getFullPathName simply calls getParent recursively, so will return\n+       the INode\u0027s parents at the time it was snapshotted. It will not \n+       contain a reference INode.\n+      */\n+      final String pathName \u003d getFullPathName(ezi);\n+      INodesInPath iip \u003d dir.getINodesInPath(pathName, false);\n+      INode lastINode \u003d iip.getLastINode();\n+      if (lastINode \u003d\u003d null || lastINode.getId() !\u003d ezi.getINodeId()) {\n+        continue;\n+      }\n+      // Add the EZ to the result list\n+      zones.add(new EncryptionZone(pathName,\n           ezi.getKeyName(), ezi.getINodeId()));\n       count++;\n       if (count \u003e\u003d numResponses) {\n         break;\n       }\n     }\n     final boolean hasMore \u003d (numResponses \u003c tailMap.size());\n     return new BatchedListEntries\u003cEncryptionZone\u003e(zones, hasMore);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  BatchedListEntries\u003cEncryptionZone\u003e listEncryptionZones(long prevId)\n      throws IOException {\n    assert dir.hasReadLock();\n    NavigableMap\u003cLong, EncryptionZoneInt\u003e tailMap \u003d encryptionZones.tailMap\n        (prevId, false);\n    final int numResponses \u003d Math.min(maxListEncryptionZonesResponses,\n        tailMap.size());\n    final List\u003cEncryptionZone\u003e zones \u003d\n        Lists.newArrayListWithExpectedSize(numResponses);\n\n    int count \u003d 0;\n    for (EncryptionZoneInt ezi : tailMap.values()) {\n      /*\n       Skip EZs that are only present in snapshots. Re-resolve the path to \n       see if the path\u0027s current inode ID matches EZ map\u0027s INode ID.\n       \n       INode#getFullPathName simply calls getParent recursively, so will return\n       the INode\u0027s parents at the time it was snapshotted. It will not \n       contain a reference INode.\n      */\n      final String pathName \u003d getFullPathName(ezi);\n      INodesInPath iip \u003d dir.getINodesInPath(pathName, false);\n      INode lastINode \u003d iip.getLastINode();\n      if (lastINode \u003d\u003d null || lastINode.getId() !\u003d ezi.getINodeId()) {\n        continue;\n      }\n      // Add the EZ to the result list\n      zones.add(new EncryptionZone(pathName,\n          ezi.getKeyName(), ezi.getINodeId()));\n      count++;\n      if (count \u003e\u003d numResponses) {\n        break;\n      }\n    }\n    final boolean hasMore \u003d (numResponses \u003c tailMap.size());\n    return new BatchedListEntries\u003cEncryptionZone\u003e(zones, hasMore);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EncryptionZoneManager.java",
      "extendedDetails": {}
    },
    "33ce887c20ec806ace02063e42599c3db76b536a": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-6851. Refactor EncryptionZoneWithId and EncryptionZone. (clamb via wang)\n",
      "commitDate": "16/09/14 4:41 PM",
      "commitName": "33ce887c20ec806ace02063e42599c3db76b536a",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-6851. Refactor EncryptionZoneWithId and EncryptionZone. (clamb via wang)\n",
          "commitDate": "16/09/14 4:41 PM",
          "commitName": "33ce887c20ec806ace02063e42599c3db76b536a",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "08/09/14 4:59 PM",
          "commitNameOld": "04915a08141bbe71bdef26e3f539aa8b76f89ac7",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 7.99,
          "commitsBetweenForRepo": 69,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,22 @@\n-  BatchedListEntries\u003cEncryptionZoneWithId\u003e listEncryptionZones(long prevId)\n+  BatchedListEntries\u003cEncryptionZone\u003e listEncryptionZones(long prevId)\n       throws IOException {\n     assert dir.hasReadLock();\n     NavigableMap\u003cLong, EncryptionZoneInt\u003e tailMap \u003d encryptionZones.tailMap\n         (prevId, false);\n     final int numResponses \u003d Math.min(maxListEncryptionZonesResponses,\n         tailMap.size());\n-    final List\u003cEncryptionZoneWithId\u003e zones \u003d\n+    final List\u003cEncryptionZone\u003e zones \u003d\n         Lists.newArrayListWithExpectedSize(numResponses);\n \n     int count \u003d 0;\n     for (EncryptionZoneInt ezi : tailMap.values()) {\n-      zones.add(new EncryptionZoneWithId(getFullPathName(ezi),\n+      zones.add(new EncryptionZone(getFullPathName(ezi),\n           ezi.getKeyName(), ezi.getINodeId()));\n       count++;\n       if (count \u003e\u003d numResponses) {\n         break;\n       }\n     }\n     final boolean hasMore \u003d (numResponses \u003c tailMap.size());\n-    return new BatchedListEntries\u003cEncryptionZoneWithId\u003e(zones, hasMore);\n+    return new BatchedListEntries\u003cEncryptionZone\u003e(zones, hasMore);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  BatchedListEntries\u003cEncryptionZone\u003e listEncryptionZones(long prevId)\n      throws IOException {\n    assert dir.hasReadLock();\n    NavigableMap\u003cLong, EncryptionZoneInt\u003e tailMap \u003d encryptionZones.tailMap\n        (prevId, false);\n    final int numResponses \u003d Math.min(maxListEncryptionZonesResponses,\n        tailMap.size());\n    final List\u003cEncryptionZone\u003e zones \u003d\n        Lists.newArrayListWithExpectedSize(numResponses);\n\n    int count \u003d 0;\n    for (EncryptionZoneInt ezi : tailMap.values()) {\n      zones.add(new EncryptionZone(getFullPathName(ezi),\n          ezi.getKeyName(), ezi.getINodeId()));\n      count++;\n      if (count \u003e\u003d numResponses) {\n        break;\n      }\n    }\n    final boolean hasMore \u003d (numResponses \u003c tailMap.size());\n    return new BatchedListEntries\u003cEncryptionZone\u003e(zones, hasMore);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EncryptionZoneManager.java",
          "extendedDetails": {
            "oldValue": "BatchedListEntries\u003cEncryptionZoneWithId\u003e",
            "newValue": "BatchedListEntries\u003cEncryptionZone\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6851. Refactor EncryptionZoneWithId and EncryptionZone. (clamb via wang)\n",
          "commitDate": "16/09/14 4:41 PM",
          "commitName": "33ce887c20ec806ace02063e42599c3db76b536a",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "08/09/14 4:59 PM",
          "commitNameOld": "04915a08141bbe71bdef26e3f539aa8b76f89ac7",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 7.99,
          "commitsBetweenForRepo": 69,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,22 @@\n-  BatchedListEntries\u003cEncryptionZoneWithId\u003e listEncryptionZones(long prevId)\n+  BatchedListEntries\u003cEncryptionZone\u003e listEncryptionZones(long prevId)\n       throws IOException {\n     assert dir.hasReadLock();\n     NavigableMap\u003cLong, EncryptionZoneInt\u003e tailMap \u003d encryptionZones.tailMap\n         (prevId, false);\n     final int numResponses \u003d Math.min(maxListEncryptionZonesResponses,\n         tailMap.size());\n-    final List\u003cEncryptionZoneWithId\u003e zones \u003d\n+    final List\u003cEncryptionZone\u003e zones \u003d\n         Lists.newArrayListWithExpectedSize(numResponses);\n \n     int count \u003d 0;\n     for (EncryptionZoneInt ezi : tailMap.values()) {\n-      zones.add(new EncryptionZoneWithId(getFullPathName(ezi),\n+      zones.add(new EncryptionZone(getFullPathName(ezi),\n           ezi.getKeyName(), ezi.getINodeId()));\n       count++;\n       if (count \u003e\u003d numResponses) {\n         break;\n       }\n     }\n     final boolean hasMore \u003d (numResponses \u003c tailMap.size());\n-    return new BatchedListEntries\u003cEncryptionZoneWithId\u003e(zones, hasMore);\n+    return new BatchedListEntries\u003cEncryptionZone\u003e(zones, hasMore);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  BatchedListEntries\u003cEncryptionZone\u003e listEncryptionZones(long prevId)\n      throws IOException {\n    assert dir.hasReadLock();\n    NavigableMap\u003cLong, EncryptionZoneInt\u003e tailMap \u003d encryptionZones.tailMap\n        (prevId, false);\n    final int numResponses \u003d Math.min(maxListEncryptionZonesResponses,\n        tailMap.size());\n    final List\u003cEncryptionZone\u003e zones \u003d\n        Lists.newArrayListWithExpectedSize(numResponses);\n\n    int count \u003d 0;\n    for (EncryptionZoneInt ezi : tailMap.values()) {\n      zones.add(new EncryptionZone(getFullPathName(ezi),\n          ezi.getKeyName(), ezi.getINodeId()));\n      count++;\n      if (count \u003e\u003d numResponses) {\n        break;\n      }\n    }\n    final boolean hasMore \u003d (numResponses \u003c tailMap.size());\n    return new BatchedListEntries\u003cEncryptionZone\u003e(zones, hasMore);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EncryptionZoneManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "70c99278a9ffb8a22059c20357b435c7b576b3db": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-6780. Batch the encryption zones listing API. (wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1615189 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/08/14 11:47 AM",
      "commitName": "70c99278a9ffb8a22059c20357b435c7b576b3db",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6780. Batch the encryption zones listing API. (wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1615189 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/08/14 11:47 AM",
          "commitName": "70c99278a9ffb8a22059c20357b435c7b576b3db",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "30/07/14 1:00 PM",
          "commitNameOld": "ab47b666d0b6580230afda951eec60c555c4c3d4",
          "commitAuthorOld": "Charles Lamb",
          "daysBetweenCommits": 1.95,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,9 +1,22 @@\n-  List\u003cEncryptionZone\u003e listEncryptionZones() throws IOException {\n+  BatchedListEntries\u003cEncryptionZoneWithId\u003e listEncryptionZones(long prevId)\n+      throws IOException {\n     assert dir.hasReadLock();\n-    final List\u003cEncryptionZone\u003e ret \u003d\n-        Lists.newArrayListWithExpectedSize(encryptionZones.size());\n-    for (EncryptionZoneInt ezi : encryptionZones.values()) {\n-      ret.add(new EncryptionZone(getFullPathName(ezi), ezi.getKeyName()));\n+    NavigableMap\u003cLong, EncryptionZoneInt\u003e tailMap \u003d encryptionZones.tailMap\n+        (prevId, false);\n+    final int numResponses \u003d Math.min(maxListEncryptionZonesResponses,\n+        tailMap.size());\n+    final List\u003cEncryptionZoneWithId\u003e zones \u003d\n+        Lists.newArrayListWithExpectedSize(numResponses);\n+\n+    int count \u003d 0;\n+    for (EncryptionZoneInt ezi : tailMap.values()) {\n+      zones.add(new EncryptionZoneWithId(getFullPathName(ezi),\n+          ezi.getKeyName(), ezi.getINodeId()));\n+      count++;\n+      if (count \u003e\u003d numResponses) {\n+        break;\n+      }\n     }\n-    return ret;\n+    final boolean hasMore \u003d (numResponses \u003c tailMap.size());\n+    return new BatchedListEntries\u003cEncryptionZoneWithId\u003e(zones, hasMore);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  BatchedListEntries\u003cEncryptionZoneWithId\u003e listEncryptionZones(long prevId)\n      throws IOException {\n    assert dir.hasReadLock();\n    NavigableMap\u003cLong, EncryptionZoneInt\u003e tailMap \u003d encryptionZones.tailMap\n        (prevId, false);\n    final int numResponses \u003d Math.min(maxListEncryptionZonesResponses,\n        tailMap.size());\n    final List\u003cEncryptionZoneWithId\u003e zones \u003d\n        Lists.newArrayListWithExpectedSize(numResponses);\n\n    int count \u003d 0;\n    for (EncryptionZoneInt ezi : tailMap.values()) {\n      zones.add(new EncryptionZoneWithId(getFullPathName(ezi),\n          ezi.getKeyName(), ezi.getINodeId()));\n      count++;\n      if (count \u003e\u003d numResponses) {\n        break;\n      }\n    }\n    final boolean hasMore \u003d (numResponses \u003c tailMap.size());\n    return new BatchedListEntries\u003cEncryptionZoneWithId\u003e(zones, hasMore);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EncryptionZoneManager.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[prevId-long]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-6780. Batch the encryption zones listing API. (wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1615189 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/08/14 11:47 AM",
          "commitName": "70c99278a9ffb8a22059c20357b435c7b576b3db",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "30/07/14 1:00 PM",
          "commitNameOld": "ab47b666d0b6580230afda951eec60c555c4c3d4",
          "commitAuthorOld": "Charles Lamb",
          "daysBetweenCommits": 1.95,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,9 +1,22 @@\n-  List\u003cEncryptionZone\u003e listEncryptionZones() throws IOException {\n+  BatchedListEntries\u003cEncryptionZoneWithId\u003e listEncryptionZones(long prevId)\n+      throws IOException {\n     assert dir.hasReadLock();\n-    final List\u003cEncryptionZone\u003e ret \u003d\n-        Lists.newArrayListWithExpectedSize(encryptionZones.size());\n-    for (EncryptionZoneInt ezi : encryptionZones.values()) {\n-      ret.add(new EncryptionZone(getFullPathName(ezi), ezi.getKeyName()));\n+    NavigableMap\u003cLong, EncryptionZoneInt\u003e tailMap \u003d encryptionZones.tailMap\n+        (prevId, false);\n+    final int numResponses \u003d Math.min(maxListEncryptionZonesResponses,\n+        tailMap.size());\n+    final List\u003cEncryptionZoneWithId\u003e zones \u003d\n+        Lists.newArrayListWithExpectedSize(numResponses);\n+\n+    int count \u003d 0;\n+    for (EncryptionZoneInt ezi : tailMap.values()) {\n+      zones.add(new EncryptionZoneWithId(getFullPathName(ezi),\n+          ezi.getKeyName(), ezi.getINodeId()));\n+      count++;\n+      if (count \u003e\u003d numResponses) {\n+        break;\n+      }\n     }\n-    return ret;\n+    final boolean hasMore \u003d (numResponses \u003c tailMap.size());\n+    return new BatchedListEntries\u003cEncryptionZoneWithId\u003e(zones, hasMore);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  BatchedListEntries\u003cEncryptionZoneWithId\u003e listEncryptionZones(long prevId)\n      throws IOException {\n    assert dir.hasReadLock();\n    NavigableMap\u003cLong, EncryptionZoneInt\u003e tailMap \u003d encryptionZones.tailMap\n        (prevId, false);\n    final int numResponses \u003d Math.min(maxListEncryptionZonesResponses,\n        tailMap.size());\n    final List\u003cEncryptionZoneWithId\u003e zones \u003d\n        Lists.newArrayListWithExpectedSize(numResponses);\n\n    int count \u003d 0;\n    for (EncryptionZoneInt ezi : tailMap.values()) {\n      zones.add(new EncryptionZoneWithId(getFullPathName(ezi),\n          ezi.getKeyName(), ezi.getINodeId()));\n      count++;\n      if (count \u003e\u003d numResponses) {\n        break;\n      }\n    }\n    final boolean hasMore \u003d (numResponses \u003c tailMap.size());\n    return new BatchedListEntries\u003cEncryptionZoneWithId\u003e(zones, hasMore);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EncryptionZoneManager.java",
          "extendedDetails": {
            "oldValue": "List\u003cEncryptionZone\u003e",
            "newValue": "BatchedListEntries\u003cEncryptionZoneWithId\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6780. Batch the encryption zones listing API. (wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1615189 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/08/14 11:47 AM",
          "commitName": "70c99278a9ffb8a22059c20357b435c7b576b3db",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "30/07/14 1:00 PM",
          "commitNameOld": "ab47b666d0b6580230afda951eec60c555c4c3d4",
          "commitAuthorOld": "Charles Lamb",
          "daysBetweenCommits": 1.95,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,9 +1,22 @@\n-  List\u003cEncryptionZone\u003e listEncryptionZones() throws IOException {\n+  BatchedListEntries\u003cEncryptionZoneWithId\u003e listEncryptionZones(long prevId)\n+      throws IOException {\n     assert dir.hasReadLock();\n-    final List\u003cEncryptionZone\u003e ret \u003d\n-        Lists.newArrayListWithExpectedSize(encryptionZones.size());\n-    for (EncryptionZoneInt ezi : encryptionZones.values()) {\n-      ret.add(new EncryptionZone(getFullPathName(ezi), ezi.getKeyName()));\n+    NavigableMap\u003cLong, EncryptionZoneInt\u003e tailMap \u003d encryptionZones.tailMap\n+        (prevId, false);\n+    final int numResponses \u003d Math.min(maxListEncryptionZonesResponses,\n+        tailMap.size());\n+    final List\u003cEncryptionZoneWithId\u003e zones \u003d\n+        Lists.newArrayListWithExpectedSize(numResponses);\n+\n+    int count \u003d 0;\n+    for (EncryptionZoneInt ezi : tailMap.values()) {\n+      zones.add(new EncryptionZoneWithId(getFullPathName(ezi),\n+          ezi.getKeyName(), ezi.getINodeId()));\n+      count++;\n+      if (count \u003e\u003d numResponses) {\n+        break;\n+      }\n     }\n-    return ret;\n+    final boolean hasMore \u003d (numResponses \u003c tailMap.size());\n+    return new BatchedListEntries\u003cEncryptionZoneWithId\u003e(zones, hasMore);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  BatchedListEntries\u003cEncryptionZoneWithId\u003e listEncryptionZones(long prevId)\n      throws IOException {\n    assert dir.hasReadLock();\n    NavigableMap\u003cLong, EncryptionZoneInt\u003e tailMap \u003d encryptionZones.tailMap\n        (prevId, false);\n    final int numResponses \u003d Math.min(maxListEncryptionZonesResponses,\n        tailMap.size());\n    final List\u003cEncryptionZoneWithId\u003e zones \u003d\n        Lists.newArrayListWithExpectedSize(numResponses);\n\n    int count \u003d 0;\n    for (EncryptionZoneInt ezi : tailMap.values()) {\n      zones.add(new EncryptionZoneWithId(getFullPathName(ezi),\n          ezi.getKeyName(), ezi.getINodeId()));\n      count++;\n      if (count \u003e\u003d numResponses) {\n        break;\n      }\n    }\n    final boolean hasMore \u003d (numResponses \u003c tailMap.size());\n    return new BatchedListEntries\u003cEncryptionZoneWithId\u003e(zones, hasMore);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EncryptionZoneManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "b57ec165674143daf4fa50378446a9f831d3b9d3": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6718. Remove EncryptionZoneManager lock. (wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1612439 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/07/14 5:55 PM",
      "commitName": "b57ec165674143daf4fa50378446a9f831d3b9d3",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "21/07/14 5:27 PM",
      "commitNameOld": "7b466b3b7087a7b8c6e4e466600f6e13284e0dee",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,9 @@\n   List\u003cEncryptionZone\u003e listEncryptionZones() throws IOException {\n     assert dir.hasReadLock();\n-    readLock();\n-    try {\n-      final List\u003cEncryptionZone\u003e ret \u003d\n-          Lists.newArrayListWithExpectedSize(encryptionZones.size());\n-      for (EncryptionZoneInt ezi : encryptionZones.values()) {\n-        ret.add(new EncryptionZone(getFullPathName(ezi), ezi.getKeyName()));\n-      }\n-      return ret;\n-    } finally {\n-      readUnlock();\n+    final List\u003cEncryptionZone\u003e ret \u003d\n+        Lists.newArrayListWithExpectedSize(encryptionZones.size());\n+    for (EncryptionZoneInt ezi : encryptionZones.values()) {\n+      ret.add(new EncryptionZone(getFullPathName(ezi), ezi.getKeyName()));\n     }\n+    return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  List\u003cEncryptionZone\u003e listEncryptionZones() throws IOException {\n    assert dir.hasReadLock();\n    final List\u003cEncryptionZone\u003e ret \u003d\n        Lists.newArrayListWithExpectedSize(encryptionZones.size());\n    for (EncryptionZoneInt ezi : encryptionZones.values()) {\n      ret.add(new EncryptionZone(getFullPathName(ezi), ezi.getKeyName()));\n    }\n    return ret;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EncryptionZoneManager.java",
      "extendedDetails": {}
    },
    "7b466b3b7087a7b8c6e4e466600f6e13284e0dee": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6716. Update usage of KeyProviderCryptoExtension APIs on NameNode. (wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1612438 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/07/14 5:27 PM",
      "commitName": "7b466b3b7087a7b8c6e4e466600f6e13284e0dee",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "11/07/14 1:54 PM",
      "commitNameOld": "d79f27b429410daa6770a51867d7ecea728dff89",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 10.15,
      "commitsBetweenForRepo": 74,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,14 @@\n   List\u003cEncryptionZone\u003e listEncryptionZones() throws IOException {\n     assert dir.hasReadLock();\n     readLock();\n     try {\n       final List\u003cEncryptionZone\u003e ret \u003d\n           Lists.newArrayListWithExpectedSize(encryptionZones.size());\n       for (EncryptionZoneInt ezi : encryptionZones.values()) {\n-        ret.add(new EncryptionZone(getFullPathName(ezi), ezi.getKeyId()));\n+        ret.add(new EncryptionZone(getFullPathName(ezi), ezi.getKeyName()));\n       }\n       return ret;\n     } finally {\n       readUnlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  List\u003cEncryptionZone\u003e listEncryptionZones() throws IOException {\n    assert dir.hasReadLock();\n    readLock();\n    try {\n      final List\u003cEncryptionZone\u003e ret \u003d\n          Lists.newArrayListWithExpectedSize(encryptionZones.size());\n      for (EncryptionZoneInt ezi : encryptionZones.values()) {\n        ret.add(new EncryptionZone(getFullPathName(ezi), ezi.getKeyName()));\n      }\n      return ret;\n    } finally {\n      readUnlock();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EncryptionZoneManager.java",
      "extendedDetails": {}
    },
    "d79f27b429410daa6770a51867d7ecea728dff89": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6474. Namenode needs to get the actual keys and iv from the KeyProvider. (wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1609833 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/07/14 1:54 PM",
      "commitName": "d79f27b429410daa6770a51867d7ecea728dff89",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "07/07/14 9:34 PM",
      "commitNameOld": "ceed0f6c46736323bd1b077125ff4e217c649208",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 3.68,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,8 +1,14 @@\n   List\u003cEncryptionZone\u003e listEncryptionZones() throws IOException {\n-    final List\u003cEncryptionZone\u003e ret \u003d\n-        Lists.newArrayListWithExpectedSize(encryptionZones.size());\n-    for (EncryptionZoneInt ezi : encryptionZones.values()) {\n-      ret.add(new EncryptionZone(ezi.getFullPathName(), ezi.getKeyId()));\n+    assert dir.hasReadLock();\n+    readLock();\n+    try {\n+      final List\u003cEncryptionZone\u003e ret \u003d\n+          Lists.newArrayListWithExpectedSize(encryptionZones.size());\n+      for (EncryptionZoneInt ezi : encryptionZones.values()) {\n+        ret.add(new EncryptionZone(getFullPathName(ezi), ezi.getKeyId()));\n+      }\n+      return ret;\n+    } finally {\n+      readUnlock();\n     }\n-    return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  List\u003cEncryptionZone\u003e listEncryptionZones() throws IOException {\n    assert dir.hasReadLock();\n    readLock();\n    try {\n      final List\u003cEncryptionZone\u003e ret \u003d\n          Lists.newArrayListWithExpectedSize(encryptionZones.size());\n      for (EncryptionZoneInt ezi : encryptionZones.values()) {\n        ret.add(new EncryptionZone(getFullPathName(ezi), ezi.getKeyId()));\n      }\n      return ret;\n    } finally {\n      readUnlock();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EncryptionZoneManager.java",
      "extendedDetails": {}
    },
    "ceed0f6c46736323bd1b077125ff4e217c649208": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-6635. Refactor encryption zone functionality into new EncryptionZoneManager class. (wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1608657 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/07/14 9:34 PM",
      "commitName": "ceed0f6c46736323bd1b077125ff4e217c649208",
      "commitAuthor": "Andrew Wang",
      "diff": "@@ -0,0 +1,8 @@\n+  List\u003cEncryptionZone\u003e listEncryptionZones() throws IOException {\n+    final List\u003cEncryptionZone\u003e ret \u003d\n+        Lists.newArrayListWithExpectedSize(encryptionZones.size());\n+    for (EncryptionZoneInt ezi : encryptionZones.values()) {\n+      ret.add(new EncryptionZone(ezi.getFullPathName(), ezi.getKeyId()));\n+    }\n+    return ret;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  List\u003cEncryptionZone\u003e listEncryptionZones() throws IOException {\n    final List\u003cEncryptionZone\u003e ret \u003d\n        Lists.newArrayListWithExpectedSize(encryptionZones.size());\n    for (EncryptionZoneInt ezi : encryptionZones.values()) {\n      ret.add(new EncryptionZone(ezi.getFullPathName(), ezi.getKeyId()));\n    }\n    return ret;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/EncryptionZoneManager.java"
    }
  }
}