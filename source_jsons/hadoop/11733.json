{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PmemVolumeManager.java",
  "functionName": "idToCacheFilePath",
  "functionId": "idToCacheFilePath___volumeIndex-Byte__key-ExtendedBlockId",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/PmemVolumeManager.java",
  "functionStartLine": 447,
  "functionEndLine": 461,
  "numCommitsSeen": 4,
  "timeTaken": 1549,
  "changeHistory": [
    "d79cce20abbbf321f6dcce03f4087544124a7cd2"
  ],
  "changeHistoryShort": {
    "d79cce20abbbf321f6dcce03f4087544124a7cd2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d79cce20abbbf321f6dcce03f4087544124a7cd2": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-14740. Recover data blocks from persistent memory read cache during datanode restarts. Contributed by Feilong He.\n",
      "commitDate": "01/01/20 10:14 PM",
      "commitName": "d79cce20abbbf321f6dcce03f4087544124a7cd2",
      "commitAuthor": "Rakesh Radhakrishnan",
      "diff": "@@ -0,0 +1,15 @@\n+  public String idToCacheFilePath(Byte volumeIndex, ExtendedBlockId key)\n+      throws IOException {\n+    final String cacheSubdirPrefix \u003d \"subdir\";\n+    long blockId \u003d key.getBlockId();\n+    String bpid \u003d key.getBlockPoolId();\n+    int d1 \u003d (int) ((blockId \u003e\u003e 16) \u0026 0x1F);\n+    int d2 \u003d (int) ((blockId \u003e\u003e 8) \u0026 0x1F);\n+    String parentDir \u003d pmemVolumes.get(volumeIndex) + \"/\" + bpid;\n+    String subDir \u003d cacheSubdirPrefix + d1 + \"/\" + cacheSubdirPrefix + d2;\n+    File filePath \u003d new File(parentDir, subDir);\n+    if (!filePath.exists() \u0026\u0026 !filePath.mkdirs()) {\n+      throw new IOException(\"Failed to create \" + filePath.getPath());\n+    }\n+    return filePath.getAbsolutePath() + \"/\" + idToCacheFileName(key);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public String idToCacheFilePath(Byte volumeIndex, ExtendedBlockId key)\n      throws IOException {\n    final String cacheSubdirPrefix \u003d \"subdir\";\n    long blockId \u003d key.getBlockId();\n    String bpid \u003d key.getBlockPoolId();\n    int d1 \u003d (int) ((blockId \u003e\u003e 16) \u0026 0x1F);\n    int d2 \u003d (int) ((blockId \u003e\u003e 8) \u0026 0x1F);\n    String parentDir \u003d pmemVolumes.get(volumeIndex) + \"/\" + bpid;\n    String subDir \u003d cacheSubdirPrefix + d1 + \"/\" + cacheSubdirPrefix + d2;\n    File filePath \u003d new File(parentDir, subDir);\n    if (!filePath.exists() \u0026\u0026 !filePath.mkdirs()) {\n      throw new IOException(\"Failed to create \" + filePath.getPath());\n    }\n    return filePath.getAbsolutePath() + \"/\" + idToCacheFileName(key);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/PmemVolumeManager.java"
    }
  }
}