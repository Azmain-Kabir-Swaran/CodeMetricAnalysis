{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AzureNativeFileSystemStore.java",
  "functionName": "createAzureStorageSession",
  "functionId": "createAzureStorageSession",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java",
  "functionStartLine": 1006,
  "functionEndLine": 1100,
  "numCommitsSeen": 53,
  "timeTaken": 3040,
  "changeHistory": [
    "48f4a229a93b65df9e99df2505719dd3538f1188",
    "e92a77099b91620cee84513cc879089907468075",
    "2217e2f8ff418b88eac6ad36cafe3a9795a11f40",
    "0d91576ec31f63402f2db6107a04155368e2632d",
    "81bc395deb3ba00567dc067d6ca71bacf9e3bc82"
  ],
  "changeHistoryShort": {
    "48f4a229a93b65df9e99df2505719dd3538f1188": "Ybodychange",
    "e92a77099b91620cee84513cc879089907468075": "Ybodychange",
    "2217e2f8ff418b88eac6ad36cafe3a9795a11f40": "Yexceptionschange",
    "0d91576ec31f63402f2db6107a04155368e2632d": "Ybodychange",
    "81bc395deb3ba00567dc067d6ca71bacf9e3bc82": "Yintroduced"
  },
  "changeHistoryDetails": {
    "48f4a229a93b65df9e99df2505719dd3538f1188": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14461 Azure: handle failure gracefully in case of missing account access key.\nContributed by Mingliang Liu.\n",
      "commitDate": "26/06/17 5:39 AM",
      "commitName": "48f4a229a93b65df9e99df2505719dd3538f1188",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "23/06/17 1:38 PM",
      "commitNameOld": "c6bd73c6c5760c3a52203e6a51628587ceec6896",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 2.67,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,100 +1,95 @@\n   private void createAzureStorageSession ()\n       throws AzureException, IOException {\n \n     // Make sure this object was properly initialized with references to\n     // the sessionUri and sessionConfiguration.\n     if (null \u003d\u003d sessionUri || null \u003d\u003d sessionConfiguration) {\n       throw new AzureException(\"Filesystem object not initialized properly.\"\n           + \"Unable to start session with Azure Storage server.\");\n     }\n \n     // File system object initialized, attempt to establish a session\n     // with the Azure storage service for the target URI string.\n     try {\n       // Inspect the URI authority to determine the account and use the account\n       // to start an Azure blob client session using an account key for the\n       // the account or anonymously.\n       // For all URI\u0027s do the following checks in order:\n       // 1. Validate that \u003caccount\u003e can be used with the current Hadoop\n       // cluster by checking it exists in the list of configured accounts\n       // for the cluster.\n       // 2. Look up the AccountKey in the list of configured accounts for the\n       // cluster.\n       // 3. If there is no AccountKey, assume anonymous public blob access\n       // when accessing the blob.\n       //\n       // If the URI does not specify a container use the default root container\n       // under the account name.\n \n       // Assertion: Container name on the session Uri should be non-null.\n       if (getContainerFromAuthority(sessionUri) \u003d\u003d null) {\n         throw new AssertionError(String.format(\n             \"Non-null container expected from session URI: %s.\",\n             sessionUri.toString()));\n       }\n \n       // Get the account name.\n       String accountName \u003d getAccountFromAuthority(sessionUri);\n       if (null \u003d\u003d accountName) {\n         // Account name is not specified as part of the URI. Throw indicating\n         // an invalid account name.\n         final String errMsg \u003d String.format(\n             \"Cannot load WASB file system account name not\"\n                 + \" specified in URI: %s.\", sessionUri.toString());\n         throw new AzureException(errMsg);\n       }\n \n       instrumentation.setAccountName(accountName);\n       String containerName \u003d getContainerFromAuthority(sessionUri);\n       instrumentation.setContainerName(containerName);\n       \n       // Check whether this is a storage emulator account.\n       if (isStorageEmulatorAccount(accountName)) {\n         // It is an emulator account, connect to it with no credentials.\n         connectUsingCredentials(accountName, null, containerName);\n         return;\n       }\n \n       // If the securemode flag is set, WASB uses SecureStorageInterfaceImpl instance\n       // to communicate with Azure storage. In SecureStorageInterfaceImpl SAS keys\n       // are used to communicate with Azure storage, so connectToAzureStorageInSecureMode\n       // instantiates the default container using a SAS Key.\n       if (useSecureMode) {\n         connectToAzureStorageInSecureMode(accountName, containerName, sessionUri);\n         return;\n       }\n \n       // Check whether we have a shared access signature for that container.\n       String propertyValue \u003d sessionConfiguration.get(KEY_ACCOUNT_SAS_PREFIX\n           + containerName + \".\" + accountName);\n       if (propertyValue !\u003d null) {\n         // SAS was found. Connect using that.\n         connectUsingSASCredentials(accountName, containerName, propertyValue);\n         return;\n       }\n \n       // Check whether the account is configured with an account key.\n       propertyValue \u003d getAccountKeyFromConfiguration(accountName,\n           sessionConfiguration);\n-      if (propertyValue !\u003d null) {\n-\n+      if (StringUtils.isNotEmpty(propertyValue)) {\n         // Account key was found.\n         // Create the Azure storage session using the account key and container.\n         connectUsingConnectionStringCredentials(\n             getAccountFromAuthority(sessionUri),\n             getContainerFromAuthority(sessionUri), propertyValue);\n-\n-        // Return to caller\n-        return;\n+      } else {\n+        LOG.debug(\"The account access key is not configured for {}. \"\n+            + \"Now try anonymous access.\", sessionUri);\n+        connectUsingAnonymousCredentials(sessionUri);\n       }\n-\n-      // The account access is not configured for this cluster. Try anonymous\n-      // access.\n-      connectUsingAnonymousCredentials(sessionUri);\n-\n     } catch (Exception e) {\n       // Caught exception while attempting to initialize the Azure File\n       // System store, re-throw the exception.\n       throw new AzureException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void createAzureStorageSession ()\n      throws AzureException, IOException {\n\n    // Make sure this object was properly initialized with references to\n    // the sessionUri and sessionConfiguration.\n    if (null \u003d\u003d sessionUri || null \u003d\u003d sessionConfiguration) {\n      throw new AzureException(\"Filesystem object not initialized properly.\"\n          + \"Unable to start session with Azure Storage server.\");\n    }\n\n    // File system object initialized, attempt to establish a session\n    // with the Azure storage service for the target URI string.\n    try {\n      // Inspect the URI authority to determine the account and use the account\n      // to start an Azure blob client session using an account key for the\n      // the account or anonymously.\n      // For all URI\u0027s do the following checks in order:\n      // 1. Validate that \u003caccount\u003e can be used with the current Hadoop\n      // cluster by checking it exists in the list of configured accounts\n      // for the cluster.\n      // 2. Look up the AccountKey in the list of configured accounts for the\n      // cluster.\n      // 3. If there is no AccountKey, assume anonymous public blob access\n      // when accessing the blob.\n      //\n      // If the URI does not specify a container use the default root container\n      // under the account name.\n\n      // Assertion: Container name on the session Uri should be non-null.\n      if (getContainerFromAuthority(sessionUri) \u003d\u003d null) {\n        throw new AssertionError(String.format(\n            \"Non-null container expected from session URI: %s.\",\n            sessionUri.toString()));\n      }\n\n      // Get the account name.\n      String accountName \u003d getAccountFromAuthority(sessionUri);\n      if (null \u003d\u003d accountName) {\n        // Account name is not specified as part of the URI. Throw indicating\n        // an invalid account name.\n        final String errMsg \u003d String.format(\n            \"Cannot load WASB file system account name not\"\n                + \" specified in URI: %s.\", sessionUri.toString());\n        throw new AzureException(errMsg);\n      }\n\n      instrumentation.setAccountName(accountName);\n      String containerName \u003d getContainerFromAuthority(sessionUri);\n      instrumentation.setContainerName(containerName);\n      \n      // Check whether this is a storage emulator account.\n      if (isStorageEmulatorAccount(accountName)) {\n        // It is an emulator account, connect to it with no credentials.\n        connectUsingCredentials(accountName, null, containerName);\n        return;\n      }\n\n      // If the securemode flag is set, WASB uses SecureStorageInterfaceImpl instance\n      // to communicate with Azure storage. In SecureStorageInterfaceImpl SAS keys\n      // are used to communicate with Azure storage, so connectToAzureStorageInSecureMode\n      // instantiates the default container using a SAS Key.\n      if (useSecureMode) {\n        connectToAzureStorageInSecureMode(accountName, containerName, sessionUri);\n        return;\n      }\n\n      // Check whether we have a shared access signature for that container.\n      String propertyValue \u003d sessionConfiguration.get(KEY_ACCOUNT_SAS_PREFIX\n          + containerName + \".\" + accountName);\n      if (propertyValue !\u003d null) {\n        // SAS was found. Connect using that.\n        connectUsingSASCredentials(accountName, containerName, propertyValue);\n        return;\n      }\n\n      // Check whether the account is configured with an account key.\n      propertyValue \u003d getAccountKeyFromConfiguration(accountName,\n          sessionConfiguration);\n      if (StringUtils.isNotEmpty(propertyValue)) {\n        // Account key was found.\n        // Create the Azure storage session using the account key and container.\n        connectUsingConnectionStringCredentials(\n            getAccountFromAuthority(sessionUri),\n            getContainerFromAuthority(sessionUri), propertyValue);\n      } else {\n        LOG.debug(\"The account access key is not configured for {}. \"\n            + \"Now try anonymous access.\", sessionUri);\n        connectUsingAnonymousCredentials(sessionUri);\n      }\n    } catch (Exception e) {\n      // Caught exception while attempting to initialize the Azure File\n      // System store, re-throw the exception.\n      throw new AzureException(e);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java",
      "extendedDetails": {}
    },
    "e92a77099b91620cee84513cc879089907468075": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13863. Azure: Add a new SAS key mode for WASB. Contributed by Dushyanth\n",
      "commitDate": "22/12/16 8:15 PM",
      "commitName": "e92a77099b91620cee84513cc879089907468075",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "15/12/16 12:35 PM",
      "commitNameOld": "f92913c35bfda0d565606f9fb9a301ddd4105fd8",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 7.32,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,91 +1,100 @@\n   private void createAzureStorageSession ()\n       throws AzureException, IOException {\n \n     // Make sure this object was properly initialized with references to\n     // the sessionUri and sessionConfiguration.\n     if (null \u003d\u003d sessionUri || null \u003d\u003d sessionConfiguration) {\n       throw new AzureException(\"Filesystem object not initialized properly.\"\n           + \"Unable to start session with Azure Storage server.\");\n     }\n \n     // File system object initialized, attempt to establish a session\n     // with the Azure storage service for the target URI string.\n     try {\n       // Inspect the URI authority to determine the account and use the account\n       // to start an Azure blob client session using an account key for the\n       // the account or anonymously.\n       // For all URI\u0027s do the following checks in order:\n       // 1. Validate that \u003caccount\u003e can be used with the current Hadoop\n       // cluster by checking it exists in the list of configured accounts\n       // for the cluster.\n       // 2. Look up the AccountKey in the list of configured accounts for the\n       // cluster.\n       // 3. If there is no AccountKey, assume anonymous public blob access\n       // when accessing the blob.\n       //\n       // If the URI does not specify a container use the default root container\n       // under the account name.\n \n       // Assertion: Container name on the session Uri should be non-null.\n       if (getContainerFromAuthority(sessionUri) \u003d\u003d null) {\n         throw new AssertionError(String.format(\n             \"Non-null container expected from session URI: %s.\",\n             sessionUri.toString()));\n       }\n \n       // Get the account name.\n       String accountName \u003d getAccountFromAuthority(sessionUri);\n       if (null \u003d\u003d accountName) {\n         // Account name is not specified as part of the URI. Throw indicating\n         // an invalid account name.\n         final String errMsg \u003d String.format(\n             \"Cannot load WASB file system account name not\"\n                 + \" specified in URI: %s.\", sessionUri.toString());\n         throw new AzureException(errMsg);\n       }\n \n       instrumentation.setAccountName(accountName);\n       String containerName \u003d getContainerFromAuthority(sessionUri);\n       instrumentation.setContainerName(containerName);\n       \n       // Check whether this is a storage emulator account.\n       if (isStorageEmulatorAccount(accountName)) {\n         // It is an emulator account, connect to it with no credentials.\n         connectUsingCredentials(accountName, null, containerName);\n         return;\n       }\n \n+      // If the securemode flag is set, WASB uses SecureStorageInterfaceImpl instance\n+      // to communicate with Azure storage. In SecureStorageInterfaceImpl SAS keys\n+      // are used to communicate with Azure storage, so connectToAzureStorageInSecureMode\n+      // instantiates the default container using a SAS Key.\n+      if (useSecureMode) {\n+        connectToAzureStorageInSecureMode(accountName, containerName, sessionUri);\n+        return;\n+      }\n+\n       // Check whether we have a shared access signature for that container.\n       String propertyValue \u003d sessionConfiguration.get(KEY_ACCOUNT_SAS_PREFIX\n           + containerName + \".\" + accountName);\n       if (propertyValue !\u003d null) {\n         // SAS was found. Connect using that.\n         connectUsingSASCredentials(accountName, containerName, propertyValue);\n         return;\n       }\n \n       // Check whether the account is configured with an account key.\n       propertyValue \u003d getAccountKeyFromConfiguration(accountName,\n           sessionConfiguration);\n       if (propertyValue !\u003d null) {\n \n         // Account key was found.\n         // Create the Azure storage session using the account key and container.\n         connectUsingConnectionStringCredentials(\n             getAccountFromAuthority(sessionUri),\n             getContainerFromAuthority(sessionUri), propertyValue);\n \n         // Return to caller\n         return;\n       }\n \n       // The account access is not configured for this cluster. Try anonymous\n       // access.\n       connectUsingAnonymousCredentials(sessionUri);\n \n     } catch (Exception e) {\n       // Caught exception while attempting to initialize the Azure File\n       // System store, re-throw the exception.\n       throw new AzureException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void createAzureStorageSession ()\n      throws AzureException, IOException {\n\n    // Make sure this object was properly initialized with references to\n    // the sessionUri and sessionConfiguration.\n    if (null \u003d\u003d sessionUri || null \u003d\u003d sessionConfiguration) {\n      throw new AzureException(\"Filesystem object not initialized properly.\"\n          + \"Unable to start session with Azure Storage server.\");\n    }\n\n    // File system object initialized, attempt to establish a session\n    // with the Azure storage service for the target URI string.\n    try {\n      // Inspect the URI authority to determine the account and use the account\n      // to start an Azure blob client session using an account key for the\n      // the account or anonymously.\n      // For all URI\u0027s do the following checks in order:\n      // 1. Validate that \u003caccount\u003e can be used with the current Hadoop\n      // cluster by checking it exists in the list of configured accounts\n      // for the cluster.\n      // 2. Look up the AccountKey in the list of configured accounts for the\n      // cluster.\n      // 3. If there is no AccountKey, assume anonymous public blob access\n      // when accessing the blob.\n      //\n      // If the URI does not specify a container use the default root container\n      // under the account name.\n\n      // Assertion: Container name on the session Uri should be non-null.\n      if (getContainerFromAuthority(sessionUri) \u003d\u003d null) {\n        throw new AssertionError(String.format(\n            \"Non-null container expected from session URI: %s.\",\n            sessionUri.toString()));\n      }\n\n      // Get the account name.\n      String accountName \u003d getAccountFromAuthority(sessionUri);\n      if (null \u003d\u003d accountName) {\n        // Account name is not specified as part of the URI. Throw indicating\n        // an invalid account name.\n        final String errMsg \u003d String.format(\n            \"Cannot load WASB file system account name not\"\n                + \" specified in URI: %s.\", sessionUri.toString());\n        throw new AzureException(errMsg);\n      }\n\n      instrumentation.setAccountName(accountName);\n      String containerName \u003d getContainerFromAuthority(sessionUri);\n      instrumentation.setContainerName(containerName);\n      \n      // Check whether this is a storage emulator account.\n      if (isStorageEmulatorAccount(accountName)) {\n        // It is an emulator account, connect to it with no credentials.\n        connectUsingCredentials(accountName, null, containerName);\n        return;\n      }\n\n      // If the securemode flag is set, WASB uses SecureStorageInterfaceImpl instance\n      // to communicate with Azure storage. In SecureStorageInterfaceImpl SAS keys\n      // are used to communicate with Azure storage, so connectToAzureStorageInSecureMode\n      // instantiates the default container using a SAS Key.\n      if (useSecureMode) {\n        connectToAzureStorageInSecureMode(accountName, containerName, sessionUri);\n        return;\n      }\n\n      // Check whether we have a shared access signature for that container.\n      String propertyValue \u003d sessionConfiguration.get(KEY_ACCOUNT_SAS_PREFIX\n          + containerName + \".\" + accountName);\n      if (propertyValue !\u003d null) {\n        // SAS was found. Connect using that.\n        connectUsingSASCredentials(accountName, containerName, propertyValue);\n        return;\n      }\n\n      // Check whether the account is configured with an account key.\n      propertyValue \u003d getAccountKeyFromConfiguration(accountName,\n          sessionConfiguration);\n      if (propertyValue !\u003d null) {\n\n        // Account key was found.\n        // Create the Azure storage session using the account key and container.\n        connectUsingConnectionStringCredentials(\n            getAccountFromAuthority(sessionUri),\n            getContainerFromAuthority(sessionUri), propertyValue);\n\n        // Return to caller\n        return;\n      }\n\n      // The account access is not configured for this cluster. Try anonymous\n      // access.\n      connectUsingAnonymousCredentials(sessionUri);\n\n    } catch (Exception e) {\n      // Caught exception while attempting to initialize the Azure File\n      // System store, re-throw the exception.\n      throw new AzureException(e);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java",
      "extendedDetails": {}
    },
    "2217e2f8ff418b88eac6ad36cafe3a9795a11f40": {
      "type": "Yexceptionschange",
      "commitMessage": "HADOOP-10809. hadoop-azure: page blob support. Contributed by Dexter Bradshaw, Mostafa Elhemali, Eric Hanson, and Mike Liddell.\n",
      "commitDate": "08/10/14 2:20 PM",
      "commitName": "2217e2f8ff418b88eac6ad36cafe3a9795a11f40",
      "commitAuthor": "cnauroth",
      "commitDateOld": "24/06/14 1:52 PM",
      "commitNameOld": "0d91576ec31f63402f2db6107a04155368e2632d",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 106.02,
      "commitsBetweenForRepo": 1005,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,90 +1,91 @@\n-  private void createAzureStorageSession() throws AzureException {\n+  private void createAzureStorageSession ()\n+      throws AzureException, IOException {\n \n     // Make sure this object was properly initialized with references to\n     // the sessionUri and sessionConfiguration.\n     if (null \u003d\u003d sessionUri || null \u003d\u003d sessionConfiguration) {\n       throw new AzureException(\"Filesystem object not initialized properly.\"\n           + \"Unable to start session with Azure Storage server.\");\n     }\n \n     // File system object initialized, attempt to establish a session\n     // with the Azure storage service for the target URI string.\n     try {\n       // Inspect the URI authority to determine the account and use the account\n       // to start an Azure blob client session using an account key for the\n       // the account or anonymously.\n       // For all URI\u0027s do the following checks in order:\n       // 1. Validate that \u003caccount\u003e can be used with the current Hadoop\n       // cluster by checking it exists in the list of configured accounts\n       // for the cluster.\n       // 2. Look up the AccountKey in the list of configured accounts for the\n       // cluster.\n       // 3. If there is no AccountKey, assume anonymous public blob access\n       // when accessing the blob.\n       //\n       // If the URI does not specify a container use the default root container\n       // under the account name.\n \n       // Assertion: Container name on the session Uri should be non-null.\n       if (getContainerFromAuthority(sessionUri) \u003d\u003d null) {\n         throw new AssertionError(String.format(\n             \"Non-null container expected from session URI: %s.\",\n             sessionUri.toString()));\n       }\n \n       // Get the account name.\n       String accountName \u003d getAccountFromAuthority(sessionUri);\n       if (null \u003d\u003d accountName) {\n         // Account name is not specified as part of the URI. Throw indicating\n         // an invalid account name.\n         final String errMsg \u003d String.format(\n             \"Cannot load WASB file system account name not\"\n                 + \" specified in URI: %s.\", sessionUri.toString());\n         throw new AzureException(errMsg);\n       }\n \n       instrumentation.setAccountName(accountName);\n       String containerName \u003d getContainerFromAuthority(sessionUri);\n       instrumentation.setContainerName(containerName);\n       \n       // Check whether this is a storage emulator account.\n       if (isStorageEmulatorAccount(accountName)) {\n         // It is an emulator account, connect to it with no credentials.\n         connectUsingCredentials(accountName, null, containerName);\n         return;\n       }\n \n       // Check whether we have a shared access signature for that container.\n       String propertyValue \u003d sessionConfiguration.get(KEY_ACCOUNT_SAS_PREFIX\n           + containerName + \".\" + accountName);\n       if (propertyValue !\u003d null) {\n         // SAS was found. Connect using that.\n         connectUsingSASCredentials(accountName, containerName, propertyValue);\n         return;\n       }\n \n       // Check whether the account is configured with an account key.\n       propertyValue \u003d getAccountKeyFromConfiguration(accountName,\n           sessionConfiguration);\n       if (propertyValue !\u003d null) {\n \n         // Account key was found.\n         // Create the Azure storage session using the account key and container.\n         connectUsingConnectionStringCredentials(\n             getAccountFromAuthority(sessionUri),\n             getContainerFromAuthority(sessionUri), propertyValue);\n \n         // Return to caller\n         return;\n       }\n \n       // The account access is not configured for this cluster. Try anonymous\n       // access.\n       connectUsingAnonymousCredentials(sessionUri);\n \n     } catch (Exception e) {\n       // Caught exception while attempting to initialize the Azure File\n       // System store, re-throw the exception.\n       throw new AzureException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void createAzureStorageSession ()\n      throws AzureException, IOException {\n\n    // Make sure this object was properly initialized with references to\n    // the sessionUri and sessionConfiguration.\n    if (null \u003d\u003d sessionUri || null \u003d\u003d sessionConfiguration) {\n      throw new AzureException(\"Filesystem object not initialized properly.\"\n          + \"Unable to start session with Azure Storage server.\");\n    }\n\n    // File system object initialized, attempt to establish a session\n    // with the Azure storage service for the target URI string.\n    try {\n      // Inspect the URI authority to determine the account and use the account\n      // to start an Azure blob client session using an account key for the\n      // the account or anonymously.\n      // For all URI\u0027s do the following checks in order:\n      // 1. Validate that \u003caccount\u003e can be used with the current Hadoop\n      // cluster by checking it exists in the list of configured accounts\n      // for the cluster.\n      // 2. Look up the AccountKey in the list of configured accounts for the\n      // cluster.\n      // 3. If there is no AccountKey, assume anonymous public blob access\n      // when accessing the blob.\n      //\n      // If the URI does not specify a container use the default root container\n      // under the account name.\n\n      // Assertion: Container name on the session Uri should be non-null.\n      if (getContainerFromAuthority(sessionUri) \u003d\u003d null) {\n        throw new AssertionError(String.format(\n            \"Non-null container expected from session URI: %s.\",\n            sessionUri.toString()));\n      }\n\n      // Get the account name.\n      String accountName \u003d getAccountFromAuthority(sessionUri);\n      if (null \u003d\u003d accountName) {\n        // Account name is not specified as part of the URI. Throw indicating\n        // an invalid account name.\n        final String errMsg \u003d String.format(\n            \"Cannot load WASB file system account name not\"\n                + \" specified in URI: %s.\", sessionUri.toString());\n        throw new AzureException(errMsg);\n      }\n\n      instrumentation.setAccountName(accountName);\n      String containerName \u003d getContainerFromAuthority(sessionUri);\n      instrumentation.setContainerName(containerName);\n      \n      // Check whether this is a storage emulator account.\n      if (isStorageEmulatorAccount(accountName)) {\n        // It is an emulator account, connect to it with no credentials.\n        connectUsingCredentials(accountName, null, containerName);\n        return;\n      }\n\n      // Check whether we have a shared access signature for that container.\n      String propertyValue \u003d sessionConfiguration.get(KEY_ACCOUNT_SAS_PREFIX\n          + containerName + \".\" + accountName);\n      if (propertyValue !\u003d null) {\n        // SAS was found. Connect using that.\n        connectUsingSASCredentials(accountName, containerName, propertyValue);\n        return;\n      }\n\n      // Check whether the account is configured with an account key.\n      propertyValue \u003d getAccountKeyFromConfiguration(accountName,\n          sessionConfiguration);\n      if (propertyValue !\u003d null) {\n\n        // Account key was found.\n        // Create the Azure storage session using the account key and container.\n        connectUsingConnectionStringCredentials(\n            getAccountFromAuthority(sessionUri),\n            getContainerFromAuthority(sessionUri), propertyValue);\n\n        // Return to caller\n        return;\n      }\n\n      // The account access is not configured for this cluster. Try anonymous\n      // access.\n      connectUsingAnonymousCredentials(sessionUri);\n\n    } catch (Exception e) {\n      // Caught exception while attempting to initialize the Azure File\n      // System store, re-throw the exception.\n      throw new AzureException(e);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java",
      "extendedDetails": {
        "oldValue": "[AzureException]",
        "newValue": "[AzureException, IOException]"
      }
    },
    "0d91576ec31f63402f2db6107a04155368e2632d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10728. Metrics system for Windows Azure Storage Filesystem. Contributed by Dexter Bradshaw, Mostafa Elhemali, Xi Fang, Johannes Klein, David Lao, Mike Liddell, Chuan Liu, Lengning Liu, Ivan Mitic, Michael Rys, Alexander Stojanovic, Brian Swan, and Min Wei.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1605187 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/06/14 1:52 PM",
      "commitName": "0d91576ec31f63402f2db6107a04155368e2632d",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "20/06/14 11:30 AM",
      "commitNameOld": "8300b9fb385b47672d98ea62ab291991424f3cce",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 4.1,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,88 +1,90 @@\n   private void createAzureStorageSession() throws AzureException {\n \n     // Make sure this object was properly initialized with references to\n     // the sessionUri and sessionConfiguration.\n     if (null \u003d\u003d sessionUri || null \u003d\u003d sessionConfiguration) {\n       throw new AzureException(\"Filesystem object not initialized properly.\"\n           + \"Unable to start session with Azure Storage server.\");\n     }\n \n     // File system object initialized, attempt to establish a session\n     // with the Azure storage service for the target URI string.\n     try {\n       // Inspect the URI authority to determine the account and use the account\n       // to start an Azure blob client session using an account key for the\n       // the account or anonymously.\n       // For all URI\u0027s do the following checks in order:\n       // 1. Validate that \u003caccount\u003e can be used with the current Hadoop\n       // cluster by checking it exists in the list of configured accounts\n       // for the cluster.\n       // 2. Look up the AccountKey in the list of configured accounts for the\n       // cluster.\n       // 3. If there is no AccountKey, assume anonymous public blob access\n       // when accessing the blob.\n       //\n       // If the URI does not specify a container use the default root container\n       // under the account name.\n \n       // Assertion: Container name on the session Uri should be non-null.\n       if (getContainerFromAuthority(sessionUri) \u003d\u003d null) {\n         throw new AssertionError(String.format(\n             \"Non-null container expected from session URI: %s.\",\n             sessionUri.toString()));\n       }\n \n       // Get the account name.\n       String accountName \u003d getAccountFromAuthority(sessionUri);\n       if (null \u003d\u003d accountName) {\n         // Account name is not specified as part of the URI. Throw indicating\n         // an invalid account name.\n         final String errMsg \u003d String.format(\n             \"Cannot load WASB file system account name not\"\n                 + \" specified in URI: %s.\", sessionUri.toString());\n         throw new AzureException(errMsg);\n       }\n \n+      instrumentation.setAccountName(accountName);\n       String containerName \u003d getContainerFromAuthority(sessionUri);\n-\n+      instrumentation.setContainerName(containerName);\n+      \n       // Check whether this is a storage emulator account.\n       if (isStorageEmulatorAccount(accountName)) {\n         // It is an emulator account, connect to it with no credentials.\n         connectUsingCredentials(accountName, null, containerName);\n         return;\n       }\n \n       // Check whether we have a shared access signature for that container.\n       String propertyValue \u003d sessionConfiguration.get(KEY_ACCOUNT_SAS_PREFIX\n           + containerName + \".\" + accountName);\n       if (propertyValue !\u003d null) {\n         // SAS was found. Connect using that.\n         connectUsingSASCredentials(accountName, containerName, propertyValue);\n         return;\n       }\n \n       // Check whether the account is configured with an account key.\n       propertyValue \u003d getAccountKeyFromConfiguration(accountName,\n           sessionConfiguration);\n       if (propertyValue !\u003d null) {\n \n         // Account key was found.\n         // Create the Azure storage session using the account key and container.\n         connectUsingConnectionStringCredentials(\n             getAccountFromAuthority(sessionUri),\n             getContainerFromAuthority(sessionUri), propertyValue);\n \n         // Return to caller\n         return;\n       }\n \n       // The account access is not configured for this cluster. Try anonymous\n       // access.\n       connectUsingAnonymousCredentials(sessionUri);\n \n     } catch (Exception e) {\n       // Caught exception while attempting to initialize the Azure File\n       // System store, re-throw the exception.\n       throw new AzureException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void createAzureStorageSession() throws AzureException {\n\n    // Make sure this object was properly initialized with references to\n    // the sessionUri and sessionConfiguration.\n    if (null \u003d\u003d sessionUri || null \u003d\u003d sessionConfiguration) {\n      throw new AzureException(\"Filesystem object not initialized properly.\"\n          + \"Unable to start session with Azure Storage server.\");\n    }\n\n    // File system object initialized, attempt to establish a session\n    // with the Azure storage service for the target URI string.\n    try {\n      // Inspect the URI authority to determine the account and use the account\n      // to start an Azure blob client session using an account key for the\n      // the account or anonymously.\n      // For all URI\u0027s do the following checks in order:\n      // 1. Validate that \u003caccount\u003e can be used with the current Hadoop\n      // cluster by checking it exists in the list of configured accounts\n      // for the cluster.\n      // 2. Look up the AccountKey in the list of configured accounts for the\n      // cluster.\n      // 3. If there is no AccountKey, assume anonymous public blob access\n      // when accessing the blob.\n      //\n      // If the URI does not specify a container use the default root container\n      // under the account name.\n\n      // Assertion: Container name on the session Uri should be non-null.\n      if (getContainerFromAuthority(sessionUri) \u003d\u003d null) {\n        throw new AssertionError(String.format(\n            \"Non-null container expected from session URI: %s.\",\n            sessionUri.toString()));\n      }\n\n      // Get the account name.\n      String accountName \u003d getAccountFromAuthority(sessionUri);\n      if (null \u003d\u003d accountName) {\n        // Account name is not specified as part of the URI. Throw indicating\n        // an invalid account name.\n        final String errMsg \u003d String.format(\n            \"Cannot load WASB file system account name not\"\n                + \" specified in URI: %s.\", sessionUri.toString());\n        throw new AzureException(errMsg);\n      }\n\n      instrumentation.setAccountName(accountName);\n      String containerName \u003d getContainerFromAuthority(sessionUri);\n      instrumentation.setContainerName(containerName);\n      \n      // Check whether this is a storage emulator account.\n      if (isStorageEmulatorAccount(accountName)) {\n        // It is an emulator account, connect to it with no credentials.\n        connectUsingCredentials(accountName, null, containerName);\n        return;\n      }\n\n      // Check whether we have a shared access signature for that container.\n      String propertyValue \u003d sessionConfiguration.get(KEY_ACCOUNT_SAS_PREFIX\n          + containerName + \".\" + accountName);\n      if (propertyValue !\u003d null) {\n        // SAS was found. Connect using that.\n        connectUsingSASCredentials(accountName, containerName, propertyValue);\n        return;\n      }\n\n      // Check whether the account is configured with an account key.\n      propertyValue \u003d getAccountKeyFromConfiguration(accountName,\n          sessionConfiguration);\n      if (propertyValue !\u003d null) {\n\n        // Account key was found.\n        // Create the Azure storage session using the account key and container.\n        connectUsingConnectionStringCredentials(\n            getAccountFromAuthority(sessionUri),\n            getContainerFromAuthority(sessionUri), propertyValue);\n\n        // Return to caller\n        return;\n      }\n\n      // The account access is not configured for this cluster. Try anonymous\n      // access.\n      connectUsingAnonymousCredentials(sessionUri);\n\n    } catch (Exception e) {\n      // Caught exception while attempting to initialize the Azure File\n      // System store, re-throw the exception.\n      throw new AzureException(e);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java",
      "extendedDetails": {}
    },
    "81bc395deb3ba00567dc067d6ca71bacf9e3bc82": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-9629. Support Windows Azure Storage - Blob as a file system in Hadoop. Contributed by Dexter Bradshaw, Mostafa Elhemali, Xi Fang, Johannes Klein, David Lao, Mike Liddell, Chuan Liu, Lengning Liu, Ivan Mitic, Michael Rys, Alexander Stojanovic, Brian Swan, and Min Wei.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1601781 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/06/14 3:26 PM",
      "commitName": "81bc395deb3ba00567dc067d6ca71bacf9e3bc82",
      "commitAuthor": "Chris Nauroth",
      "diff": "@@ -0,0 +1,88 @@\n+  private void createAzureStorageSession() throws AzureException {\n+\n+    // Make sure this object was properly initialized with references to\n+    // the sessionUri and sessionConfiguration.\n+    if (null \u003d\u003d sessionUri || null \u003d\u003d sessionConfiguration) {\n+      throw new AzureException(\"Filesystem object not initialized properly.\"\n+          + \"Unable to start session with Azure Storage server.\");\n+    }\n+\n+    // File system object initialized, attempt to establish a session\n+    // with the Azure storage service for the target URI string.\n+    try {\n+      // Inspect the URI authority to determine the account and use the account\n+      // to start an Azure blob client session using an account key for the\n+      // the account or anonymously.\n+      // For all URI\u0027s do the following checks in order:\n+      // 1. Validate that \u003caccount\u003e can be used with the current Hadoop\n+      // cluster by checking it exists in the list of configured accounts\n+      // for the cluster.\n+      // 2. Look up the AccountKey in the list of configured accounts for the\n+      // cluster.\n+      // 3. If there is no AccountKey, assume anonymous public blob access\n+      // when accessing the blob.\n+      //\n+      // If the URI does not specify a container use the default root container\n+      // under the account name.\n+\n+      // Assertion: Container name on the session Uri should be non-null.\n+      if (getContainerFromAuthority(sessionUri) \u003d\u003d null) {\n+        throw new AssertionError(String.format(\n+            \"Non-null container expected from session URI: %s.\",\n+            sessionUri.toString()));\n+      }\n+\n+      // Get the account name.\n+      String accountName \u003d getAccountFromAuthority(sessionUri);\n+      if (null \u003d\u003d accountName) {\n+        // Account name is not specified as part of the URI. Throw indicating\n+        // an invalid account name.\n+        final String errMsg \u003d String.format(\n+            \"Cannot load WASB file system account name not\"\n+                + \" specified in URI: %s.\", sessionUri.toString());\n+        throw new AzureException(errMsg);\n+      }\n+\n+      String containerName \u003d getContainerFromAuthority(sessionUri);\n+\n+      // Check whether this is a storage emulator account.\n+      if (isStorageEmulatorAccount(accountName)) {\n+        // It is an emulator account, connect to it with no credentials.\n+        connectUsingCredentials(accountName, null, containerName);\n+        return;\n+      }\n+\n+      // Check whether we have a shared access signature for that container.\n+      String propertyValue \u003d sessionConfiguration.get(KEY_ACCOUNT_SAS_PREFIX\n+          + containerName + \".\" + accountName);\n+      if (propertyValue !\u003d null) {\n+        // SAS was found. Connect using that.\n+        connectUsingSASCredentials(accountName, containerName, propertyValue);\n+        return;\n+      }\n+\n+      // Check whether the account is configured with an account key.\n+      propertyValue \u003d getAccountKeyFromConfiguration(accountName,\n+          sessionConfiguration);\n+      if (propertyValue !\u003d null) {\n+\n+        // Account key was found.\n+        // Create the Azure storage session using the account key and container.\n+        connectUsingConnectionStringCredentials(\n+            getAccountFromAuthority(sessionUri),\n+            getContainerFromAuthority(sessionUri), propertyValue);\n+\n+        // Return to caller\n+        return;\n+      }\n+\n+      // The account access is not configured for this cluster. Try anonymous\n+      // access.\n+      connectUsingAnonymousCredentials(sessionUri);\n+\n+    } catch (Exception e) {\n+      // Caught exception while attempting to initialize the Azure File\n+      // System store, re-throw the exception.\n+      throw new AzureException(e);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void createAzureStorageSession() throws AzureException {\n\n    // Make sure this object was properly initialized with references to\n    // the sessionUri and sessionConfiguration.\n    if (null \u003d\u003d sessionUri || null \u003d\u003d sessionConfiguration) {\n      throw new AzureException(\"Filesystem object not initialized properly.\"\n          + \"Unable to start session with Azure Storage server.\");\n    }\n\n    // File system object initialized, attempt to establish a session\n    // with the Azure storage service for the target URI string.\n    try {\n      // Inspect the URI authority to determine the account and use the account\n      // to start an Azure blob client session using an account key for the\n      // the account or anonymously.\n      // For all URI\u0027s do the following checks in order:\n      // 1. Validate that \u003caccount\u003e can be used with the current Hadoop\n      // cluster by checking it exists in the list of configured accounts\n      // for the cluster.\n      // 2. Look up the AccountKey in the list of configured accounts for the\n      // cluster.\n      // 3. If there is no AccountKey, assume anonymous public blob access\n      // when accessing the blob.\n      //\n      // If the URI does not specify a container use the default root container\n      // under the account name.\n\n      // Assertion: Container name on the session Uri should be non-null.\n      if (getContainerFromAuthority(sessionUri) \u003d\u003d null) {\n        throw new AssertionError(String.format(\n            \"Non-null container expected from session URI: %s.\",\n            sessionUri.toString()));\n      }\n\n      // Get the account name.\n      String accountName \u003d getAccountFromAuthority(sessionUri);\n      if (null \u003d\u003d accountName) {\n        // Account name is not specified as part of the URI. Throw indicating\n        // an invalid account name.\n        final String errMsg \u003d String.format(\n            \"Cannot load WASB file system account name not\"\n                + \" specified in URI: %s.\", sessionUri.toString());\n        throw new AzureException(errMsg);\n      }\n\n      String containerName \u003d getContainerFromAuthority(sessionUri);\n\n      // Check whether this is a storage emulator account.\n      if (isStorageEmulatorAccount(accountName)) {\n        // It is an emulator account, connect to it with no credentials.\n        connectUsingCredentials(accountName, null, containerName);\n        return;\n      }\n\n      // Check whether we have a shared access signature for that container.\n      String propertyValue \u003d sessionConfiguration.get(KEY_ACCOUNT_SAS_PREFIX\n          + containerName + \".\" + accountName);\n      if (propertyValue !\u003d null) {\n        // SAS was found. Connect using that.\n        connectUsingSASCredentials(accountName, containerName, propertyValue);\n        return;\n      }\n\n      // Check whether the account is configured with an account key.\n      propertyValue \u003d getAccountKeyFromConfiguration(accountName,\n          sessionConfiguration);\n      if (propertyValue !\u003d null) {\n\n        // Account key was found.\n        // Create the Azure storage session using the account key and container.\n        connectUsingConnectionStringCredentials(\n            getAccountFromAuthority(sessionUri),\n            getContainerFromAuthority(sessionUri), propertyValue);\n\n        // Return to caller\n        return;\n      }\n\n      // The account access is not configured for this cluster. Try anonymous\n      // access.\n      connectUsingAnonymousCredentials(sessionUri);\n\n    } catch (Exception e) {\n      // Caught exception while attempting to initialize the Azure File\n      // System store, re-throw the exception.\n      throw new AzureException(e);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java"
    }
  }
}