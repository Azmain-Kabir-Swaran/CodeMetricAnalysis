{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "StripedWriter.java",
  "functionName": "init",
  "functionId": "init",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/StripedWriter.java",
  "functionStartLine": 103,
  "functionEndLine": 122,
  "numCommitsSeen": 5,
  "timeTaken": 815,
  "changeHistory": [
    "3c18a53cbd2efabb2ad108d63a0b0b558424115f"
  ],
  "changeHistoryShort": {
    "3c18a53cbd2efabb2ad108d63a0b0b558424115f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3c18a53cbd2efabb2ad108d63a0b0b558424115f": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-9719. Refactoring ErasureCodingWorker into smaller reusable constructs. Contributed by Kai Zheng.\n",
      "commitDate": "06/04/16 10:50 PM",
      "commitName": "3c18a53cbd2efabb2ad108d63a0b0b558424115f",
      "commitAuthor": "Uma Maheswara Rao G",
      "diff": "@@ -0,0 +1,20 @@\n+  void init() throws IOException {\n+    DataChecksum checksum \u003d reconstructor.getChecksum();\n+    checksumSize \u003d checksum.getChecksumSize();\n+    bytesPerChecksum \u003d checksum.getBytesPerChecksum();\n+    int chunkSize \u003d bytesPerChecksum + checksumSize;\n+    maxChunksPerPacket \u003d Math.max(\n+        (WRITE_PACKET_SIZE - PacketHeader.PKT_MAX_HEADER_LEN) / chunkSize, 1);\n+    int maxPacketSize \u003d chunkSize * maxChunksPerPacket\n+        + PacketHeader.PKT_MAX_HEADER_LEN;\n+\n+    packetBuf \u003d new byte[maxPacketSize];\n+    int tmpLen \u003d checksumSize *\n+        (reconstructor.getBufferSize() / bytesPerChecksum);\n+    checksumBuf \u003d new byte[tmpLen];\n+\n+    if (initTargetStreams() \u003d\u003d 0) {\n+      String error \u003d \"All targets are failed.\";\n+      throw new IOException(error);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  void init() throws IOException {\n    DataChecksum checksum \u003d reconstructor.getChecksum();\n    checksumSize \u003d checksum.getChecksumSize();\n    bytesPerChecksum \u003d checksum.getBytesPerChecksum();\n    int chunkSize \u003d bytesPerChecksum + checksumSize;\n    maxChunksPerPacket \u003d Math.max(\n        (WRITE_PACKET_SIZE - PacketHeader.PKT_MAX_HEADER_LEN) / chunkSize, 1);\n    int maxPacketSize \u003d chunkSize * maxChunksPerPacket\n        + PacketHeader.PKT_MAX_HEADER_LEN;\n\n    packetBuf \u003d new byte[maxPacketSize];\n    int tmpLen \u003d checksumSize *\n        (reconstructor.getBufferSize() / bytesPerChecksum);\n    checksumBuf \u003d new byte[tmpLen];\n\n    if (initTargetStreams() \u003d\u003d 0) {\n      String error \u003d \"All targets are failed.\";\n      throw new IOException(error);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/StripedWriter.java"
    }
  }
}