{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSImage.java",
  "functionName": "loadEdits",
  "functionId": "loadEdits___editStreams-Iterable__EditLogInputStream____target-FSNamesystem__maxTxnsToRead-long__startOpt-StartupOption__recovery-MetaRecoveryContext",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImage.java",
  "functionStartLine": 890,
  "functionEndLine": 934,
  "numCommitsSeen": 237,
  "timeTaken": 7262,
  "changeHistory": [
    "336abbd8737f3dff38f7bdad9721511c711c522b",
    "ebef99dcf41a7538d44db6c8d14d5376c7a065f8",
    "a65bb97f5d8bf2eb817923a69bbb966359f736d7",
    "ebe5853a458150b7e42fe7434851bfcbe25e354d",
    "a40342b0dab1f9137ae4b3679a5aca7f2a57d23d",
    "b6ceee9bf42eec15891f60a014bbfa47e03f563c",
    "6ae2a0d048e133b43249c248a75a4d77d9abb80d",
    "5dae97a584d30cef3e34141edfaca49c4ec57913",
    "2088584864d829d59d8352b88dead8eafa6922e4"
  ],
  "changeHistoryShort": {
    "336abbd8737f3dff38f7bdad9721511c711c522b": "Ybodychange",
    "ebef99dcf41a7538d44db6c8d14d5376c7a065f8": "Ybodychange",
    "a65bb97f5d8bf2eb817923a69bbb966359f736d7": "Ybodychange",
    "ebe5853a458150b7e42fe7434851bfcbe25e354d": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
    "a40342b0dab1f9137ae4b3679a5aca7f2a57d23d": "Ybodychange",
    "b6ceee9bf42eec15891f60a014bbfa47e03f563c": "Ybodychange",
    "6ae2a0d048e133b43249c248a75a4d77d9abb80d": "Ybodychange",
    "5dae97a584d30cef3e34141edfaca49c4ec57913": "Ybodychange",
    "2088584864d829d59d8352b88dead8eafa6922e4": "Ybodychange"
  },
  "changeHistoryDetails": {
    "336abbd8737f3dff38f7bdad9721511c711c522b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14886. In NameNode Web UI\u0027s Startup Progress page, Loading edits always shows 0 sec. Contributed by hemanthboyina.\n",
      "commitDate": "14/10/19 11:01 AM",
      "commitName": "336abbd8737f3dff38f7bdad9721511c711c522b",
      "commitAuthor": "Surendra Singh Lilhore",
      "commitDateOld": "26/08/19 3:57 PM",
      "commitNameOld": "07e3cf952eac9e47e7bd5e195b0f9fc28c468313",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 48.79,
      "commitsBetweenForRepo": 411,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,45 @@\n   public long loadEdits(Iterable\u003cEditLogInputStream\u003e editStreams,\n       FSNamesystem target, long maxTxnsToRead,\n       StartupOption startOpt, MetaRecoveryContext recovery)\n       throws IOException {\n     LOG.debug(\"About to load edits:\\n  \" + Joiner.on(\"\\n  \").join(editStreams));\n-    StartupProgress prog \u003d NameNode.getStartupProgress();\n-    prog.beginPhase(Phase.LOADING_EDITS);\n     \n     long prevLastAppliedTxId \u003d lastAppliedTxId;\n     long remainingReadTxns \u003d maxTxnsToRead;\n     try {    \n       FSEditLogLoader loader \u003d new FSEditLogLoader(target, lastAppliedTxId);\n       \n       // Load latest edits\n       for (EditLogInputStream editIn : editStreams) {\n         LogAction logAction \u003d loadEditLogHelper.record();\n         if (logAction.shouldLog()) {\n           String logSuppressed \u003d \"\";\n           if (logAction.getCount() \u003e 1) {\n             logSuppressed \u003d \"; suppressed logging for \" +\n                 (logAction.getCount() - 1) + \" edit reads\";\n           }\n           LOG.info(\"Reading \" + editIn + \" expecting start txid #\" +\n               (lastAppliedTxId + 1) + logSuppressed);\n         }\n         try {\n           remainingReadTxns -\u003d loader.loadFSEdits(editIn, lastAppliedTxId + 1,\n                   remainingReadTxns, startOpt, recovery);\n         } finally {\n           // Update lastAppliedTxId even in case of error, since some ops may\n           // have been successfully applied before the error.\n           lastAppliedTxId \u003d loader.getLastAppliedTxId();\n         }\n         // If we are in recovery mode, we may have skipped over some txids.\n         if (editIn.getLastTxId() !\u003d HdfsServerConstants.INVALID_TXID\n             \u0026\u0026 recovery !\u003d null) {\n           lastAppliedTxId \u003d editIn.getLastTxId();\n         }\n         if (remainingReadTxns \u003c\u003d 0) {\n           break;\n         }\n       }\n     } finally {\n       FSEditLog.closeAllStreams(editStreams);\n     }\n-    prog.endPhase(Phase.LOADING_EDITS);\n     return lastAppliedTxId - prevLastAppliedTxId;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public long loadEdits(Iterable\u003cEditLogInputStream\u003e editStreams,\n      FSNamesystem target, long maxTxnsToRead,\n      StartupOption startOpt, MetaRecoveryContext recovery)\n      throws IOException {\n    LOG.debug(\"About to load edits:\\n  \" + Joiner.on(\"\\n  \").join(editStreams));\n    \n    long prevLastAppliedTxId \u003d lastAppliedTxId;\n    long remainingReadTxns \u003d maxTxnsToRead;\n    try {    \n      FSEditLogLoader loader \u003d new FSEditLogLoader(target, lastAppliedTxId);\n      \n      // Load latest edits\n      for (EditLogInputStream editIn : editStreams) {\n        LogAction logAction \u003d loadEditLogHelper.record();\n        if (logAction.shouldLog()) {\n          String logSuppressed \u003d \"\";\n          if (logAction.getCount() \u003e 1) {\n            logSuppressed \u003d \"; suppressed logging for \" +\n                (logAction.getCount() - 1) + \" edit reads\";\n          }\n          LOG.info(\"Reading \" + editIn + \" expecting start txid #\" +\n              (lastAppliedTxId + 1) + logSuppressed);\n        }\n        try {\n          remainingReadTxns -\u003d loader.loadFSEdits(editIn, lastAppliedTxId + 1,\n                  remainingReadTxns, startOpt, recovery);\n        } finally {\n          // Update lastAppliedTxId even in case of error, since some ops may\n          // have been successfully applied before the error.\n          lastAppliedTxId \u003d loader.getLastAppliedTxId();\n        }\n        // If we are in recovery mode, we may have skipped over some txids.\n        if (editIn.getLastTxId() !\u003d HdfsServerConstants.INVALID_TXID\n            \u0026\u0026 recovery !\u003d null) {\n          lastAppliedTxId \u003d editIn.getLastTxId();\n        }\n        if (remainingReadTxns \u003c\u003d 0) {\n          break;\n        }\n      }\n    } finally {\n      FSEditLog.closeAllStreams(editStreams);\n    }\n    return lastAppliedTxId - prevLastAppliedTxId;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImage.java",
      "extendedDetails": {}
    },
    "ebef99dcf41a7538d44db6c8d14d5376c7a065f8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14674. [SBN read] Got an unexpected txid when tail editlog. Contributed by wangzhaohui.\n",
      "commitDate": "23/08/19 12:18 PM",
      "commitName": "ebef99dcf41a7538d44db6c8d14d5376c7a065f8",
      "commitAuthor": "Chen Liang",
      "commitDateOld": "22/08/19 5:09 PM",
      "commitNameOld": "b67812ea2111fa11bdd76096b923c93e1bdf2923",
      "commitAuthorOld": "Stephen O\u0027Donnell",
      "daysBetweenCommits": 0.8,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,48 @@\n   public long loadEdits(Iterable\u003cEditLogInputStream\u003e editStreams,\n       FSNamesystem target, long maxTxnsToRead,\n       StartupOption startOpt, MetaRecoveryContext recovery)\n       throws IOException {\n     LOG.debug(\"About to load edits:\\n  \" + Joiner.on(\"\\n  \").join(editStreams));\n     StartupProgress prog \u003d NameNode.getStartupProgress();\n     prog.beginPhase(Phase.LOADING_EDITS);\n     \n-    long prevLastAppliedTxId \u003d lastAppliedTxId;  \n+    long prevLastAppliedTxId \u003d lastAppliedTxId;\n+    long remainingReadTxns \u003d maxTxnsToRead;\n     try {    \n       FSEditLogLoader loader \u003d new FSEditLogLoader(target, lastAppliedTxId);\n       \n       // Load latest edits\n       for (EditLogInputStream editIn : editStreams) {\n         LogAction logAction \u003d loadEditLogHelper.record();\n         if (logAction.shouldLog()) {\n           String logSuppressed \u003d \"\";\n           if (logAction.getCount() \u003e 1) {\n             logSuppressed \u003d \"; suppressed logging for \" +\n                 (logAction.getCount() - 1) + \" edit reads\";\n           }\n           LOG.info(\"Reading \" + editIn + \" expecting start txid #\" +\n               (lastAppliedTxId + 1) + logSuppressed);\n         }\n         try {\n-          loader.loadFSEdits(editIn, lastAppliedTxId + 1, maxTxnsToRead,\n-              startOpt, recovery);\n+          remainingReadTxns -\u003d loader.loadFSEdits(editIn, lastAppliedTxId + 1,\n+                  remainingReadTxns, startOpt, recovery);\n         } finally {\n           // Update lastAppliedTxId even in case of error, since some ops may\n           // have been successfully applied before the error.\n           lastAppliedTxId \u003d loader.getLastAppliedTxId();\n         }\n         // If we are in recovery mode, we may have skipped over some txids.\n         if (editIn.getLastTxId() !\u003d HdfsServerConstants.INVALID_TXID\n             \u0026\u0026 recovery !\u003d null) {\n           lastAppliedTxId \u003d editIn.getLastTxId();\n         }\n+        if (remainingReadTxns \u003c\u003d 0) {\n+          break;\n+        }\n       }\n     } finally {\n       FSEditLog.closeAllStreams(editStreams);\n     }\n     prog.endPhase(Phase.LOADING_EDITS);\n     return lastAppliedTxId - prevLastAppliedTxId;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public long loadEdits(Iterable\u003cEditLogInputStream\u003e editStreams,\n      FSNamesystem target, long maxTxnsToRead,\n      StartupOption startOpt, MetaRecoveryContext recovery)\n      throws IOException {\n    LOG.debug(\"About to load edits:\\n  \" + Joiner.on(\"\\n  \").join(editStreams));\n    StartupProgress prog \u003d NameNode.getStartupProgress();\n    prog.beginPhase(Phase.LOADING_EDITS);\n    \n    long prevLastAppliedTxId \u003d lastAppliedTxId;\n    long remainingReadTxns \u003d maxTxnsToRead;\n    try {    \n      FSEditLogLoader loader \u003d new FSEditLogLoader(target, lastAppliedTxId);\n      \n      // Load latest edits\n      for (EditLogInputStream editIn : editStreams) {\n        LogAction logAction \u003d loadEditLogHelper.record();\n        if (logAction.shouldLog()) {\n          String logSuppressed \u003d \"\";\n          if (logAction.getCount() \u003e 1) {\n            logSuppressed \u003d \"; suppressed logging for \" +\n                (logAction.getCount() - 1) + \" edit reads\";\n          }\n          LOG.info(\"Reading \" + editIn + \" expecting start txid #\" +\n              (lastAppliedTxId + 1) + logSuppressed);\n        }\n        try {\n          remainingReadTxns -\u003d loader.loadFSEdits(editIn, lastAppliedTxId + 1,\n                  remainingReadTxns, startOpt, recovery);\n        } finally {\n          // Update lastAppliedTxId even in case of error, since some ops may\n          // have been successfully applied before the error.\n          lastAppliedTxId \u003d loader.getLastAppliedTxId();\n        }\n        // If we are in recovery mode, we may have skipped over some txids.\n        if (editIn.getLastTxId() !\u003d HdfsServerConstants.INVALID_TXID\n            \u0026\u0026 recovery !\u003d null) {\n          lastAppliedTxId \u003d editIn.getLastTxId();\n        }\n        if (remainingReadTxns \u003c\u003d 0) {\n          break;\n        }\n      }\n    } finally {\n      FSEditLog.closeAllStreams(editStreams);\n    }\n    prog.endPhase(Phase.LOADING_EDITS);\n    return lastAppliedTxId - prevLastAppliedTxId;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImage.java",
      "extendedDetails": {}
    },
    "a65bb97f5d8bf2eb817923a69bbb966359f736d7": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13791. Limit logging frequency of edit tail related statements. Contributed by Erik Krogen.\n",
      "commitDate": "24/12/18 9:34 AM",
      "commitName": "a65bb97f5d8bf2eb817923a69bbb966359f736d7",
      "commitAuthor": "Chen Liang",
      "commitDateOld": "06/09/18 2:48 PM",
      "commitNameOld": "eca1a4bfe952fc184fe90dde50bac9b0e5293568",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 108.82,
      "commitsBetweenForRepo": 942,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,44 @@\n   public long loadEdits(Iterable\u003cEditLogInputStream\u003e editStreams,\n       FSNamesystem target, long maxTxnsToRead,\n       StartupOption startOpt, MetaRecoveryContext recovery)\n       throws IOException {\n     LOG.debug(\"About to load edits:\\n  \" + Joiner.on(\"\\n  \").join(editStreams));\n     StartupProgress prog \u003d NameNode.getStartupProgress();\n     prog.beginPhase(Phase.LOADING_EDITS);\n     \n     long prevLastAppliedTxId \u003d lastAppliedTxId;  \n     try {    \n       FSEditLogLoader loader \u003d new FSEditLogLoader(target, lastAppliedTxId);\n       \n       // Load latest edits\n       for (EditLogInputStream editIn : editStreams) {\n-        LOG.info(\"Reading \" + editIn + \" expecting start txid #\" +\n-              (lastAppliedTxId + 1));\n+        LogAction logAction \u003d loadEditLogHelper.record();\n+        if (logAction.shouldLog()) {\n+          String logSuppressed \u003d \"\";\n+          if (logAction.getCount() \u003e 1) {\n+            logSuppressed \u003d \"; suppressed logging for \" +\n+                (logAction.getCount() - 1) + \" edit reads\";\n+          }\n+          LOG.info(\"Reading \" + editIn + \" expecting start txid #\" +\n+              (lastAppliedTxId + 1) + logSuppressed);\n+        }\n         try {\n           loader.loadFSEdits(editIn, lastAppliedTxId + 1, maxTxnsToRead,\n               startOpt, recovery);\n         } finally {\n           // Update lastAppliedTxId even in case of error, since some ops may\n           // have been successfully applied before the error.\n           lastAppliedTxId \u003d loader.getLastAppliedTxId();\n         }\n         // If we are in recovery mode, we may have skipped over some txids.\n         if (editIn.getLastTxId() !\u003d HdfsServerConstants.INVALID_TXID\n             \u0026\u0026 recovery !\u003d null) {\n           lastAppliedTxId \u003d editIn.getLastTxId();\n         }\n       }\n     } finally {\n       FSEditLog.closeAllStreams(editStreams);\n     }\n     prog.endPhase(Phase.LOADING_EDITS);\n     return lastAppliedTxId - prevLastAppliedTxId;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public long loadEdits(Iterable\u003cEditLogInputStream\u003e editStreams,\n      FSNamesystem target, long maxTxnsToRead,\n      StartupOption startOpt, MetaRecoveryContext recovery)\n      throws IOException {\n    LOG.debug(\"About to load edits:\\n  \" + Joiner.on(\"\\n  \").join(editStreams));\n    StartupProgress prog \u003d NameNode.getStartupProgress();\n    prog.beginPhase(Phase.LOADING_EDITS);\n    \n    long prevLastAppliedTxId \u003d lastAppliedTxId;  \n    try {    \n      FSEditLogLoader loader \u003d new FSEditLogLoader(target, lastAppliedTxId);\n      \n      // Load latest edits\n      for (EditLogInputStream editIn : editStreams) {\n        LogAction logAction \u003d loadEditLogHelper.record();\n        if (logAction.shouldLog()) {\n          String logSuppressed \u003d \"\";\n          if (logAction.getCount() \u003e 1) {\n            logSuppressed \u003d \"; suppressed logging for \" +\n                (logAction.getCount() - 1) + \" edit reads\";\n          }\n          LOG.info(\"Reading \" + editIn + \" expecting start txid #\" +\n              (lastAppliedTxId + 1) + logSuppressed);\n        }\n        try {\n          loader.loadFSEdits(editIn, lastAppliedTxId + 1, maxTxnsToRead,\n              startOpt, recovery);\n        } finally {\n          // Update lastAppliedTxId even in case of error, since some ops may\n          // have been successfully applied before the error.\n          lastAppliedTxId \u003d loader.getLastAppliedTxId();\n        }\n        // If we are in recovery mode, we may have skipped over some txids.\n        if (editIn.getLastTxId() !\u003d HdfsServerConstants.INVALID_TXID\n            \u0026\u0026 recovery !\u003d null) {\n          lastAppliedTxId \u003d editIn.getLastTxId();\n        }\n      }\n    } finally {\n      FSEditLog.closeAllStreams(editStreams);\n    }\n    prog.endPhase(Phase.LOADING_EDITS);\n    return lastAppliedTxId - prevLastAppliedTxId;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImage.java",
      "extendedDetails": {}
    },
    "ebe5853a458150b7e42fe7434851bfcbe25e354d": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "HDFS-12978. Fine-grained locking while consuming journal stream. Contributed by Konstantin Shvachko.",
      "commitDate": "31/05/18 2:56 PM",
      "commitName": "ebe5853a458150b7e42fe7434851bfcbe25e354d",
      "commitAuthor": "Konstantin V Shvachko",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-12978. Fine-grained locking while consuming journal stream. Contributed by Konstantin Shvachko.",
          "commitDate": "31/05/18 2:56 PM",
          "commitName": "ebe5853a458150b7e42fe7434851bfcbe25e354d",
          "commitAuthor": "Konstantin V Shvachko",
          "commitDateOld": "28/03/18 12:49 PM",
          "commitNameOld": "a991e899fb9f98d2089f37ac9ac7c485d3bbb959",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 64.09,
          "commitsBetweenForRepo": 964,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,36 @@\n-  private long loadEdits(Iterable\u003cEditLogInputStream\u003e editStreams,\n-      FSNamesystem target, StartupOption startOpt, MetaRecoveryContext recovery)\n+  public long loadEdits(Iterable\u003cEditLogInputStream\u003e editStreams,\n+      FSNamesystem target, long maxTxnsToRead,\n+      StartupOption startOpt, MetaRecoveryContext recovery)\n       throws IOException {\n     LOG.debug(\"About to load edits:\\n  \" + Joiner.on(\"\\n  \").join(editStreams));\n     StartupProgress prog \u003d NameNode.getStartupProgress();\n     prog.beginPhase(Phase.LOADING_EDITS);\n     \n     long prevLastAppliedTxId \u003d lastAppliedTxId;  \n     try {    \n       FSEditLogLoader loader \u003d new FSEditLogLoader(target, lastAppliedTxId);\n       \n       // Load latest edits\n       for (EditLogInputStream editIn : editStreams) {\n         LOG.info(\"Reading \" + editIn + \" expecting start txid #\" +\n               (lastAppliedTxId + 1));\n         try {\n-          loader.loadFSEdits(editIn, lastAppliedTxId + 1, startOpt, recovery);\n+          loader.loadFSEdits(editIn, lastAppliedTxId + 1, maxTxnsToRead,\n+              startOpt, recovery);\n         } finally {\n           // Update lastAppliedTxId even in case of error, since some ops may\n           // have been successfully applied before the error.\n           lastAppliedTxId \u003d loader.getLastAppliedTxId();\n         }\n         // If we are in recovery mode, we may have skipped over some txids.\n-        if (editIn.getLastTxId() !\u003d HdfsServerConstants.INVALID_TXID) {\n+        if (editIn.getLastTxId() !\u003d HdfsServerConstants.INVALID_TXID\n+            \u0026\u0026 recovery !\u003d null) {\n           lastAppliedTxId \u003d editIn.getLastTxId();\n         }\n       }\n     } finally {\n       FSEditLog.closeAllStreams(editStreams);\n     }\n     prog.endPhase(Phase.LOADING_EDITS);\n     return lastAppliedTxId - prevLastAppliedTxId;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public long loadEdits(Iterable\u003cEditLogInputStream\u003e editStreams,\n      FSNamesystem target, long maxTxnsToRead,\n      StartupOption startOpt, MetaRecoveryContext recovery)\n      throws IOException {\n    LOG.debug(\"About to load edits:\\n  \" + Joiner.on(\"\\n  \").join(editStreams));\n    StartupProgress prog \u003d NameNode.getStartupProgress();\n    prog.beginPhase(Phase.LOADING_EDITS);\n    \n    long prevLastAppliedTxId \u003d lastAppliedTxId;  \n    try {    \n      FSEditLogLoader loader \u003d new FSEditLogLoader(target, lastAppliedTxId);\n      \n      // Load latest edits\n      for (EditLogInputStream editIn : editStreams) {\n        LOG.info(\"Reading \" + editIn + \" expecting start txid #\" +\n              (lastAppliedTxId + 1));\n        try {\n          loader.loadFSEdits(editIn, lastAppliedTxId + 1, maxTxnsToRead,\n              startOpt, recovery);\n        } finally {\n          // Update lastAppliedTxId even in case of error, since some ops may\n          // have been successfully applied before the error.\n          lastAppliedTxId \u003d loader.getLastAppliedTxId();\n        }\n        // If we are in recovery mode, we may have skipped over some txids.\n        if (editIn.getLastTxId() !\u003d HdfsServerConstants.INVALID_TXID\n            \u0026\u0026 recovery !\u003d null) {\n          lastAppliedTxId \u003d editIn.getLastTxId();\n        }\n      }\n    } finally {\n      FSEditLog.closeAllStreams(editStreams);\n    }\n    prog.endPhase(Phase.LOADING_EDITS);\n    return lastAppliedTxId - prevLastAppliedTxId;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImage.java",
          "extendedDetails": {
            "oldValue": "[editStreams-Iterable\u003cEditLogInputStream\u003e, target-FSNamesystem, startOpt-StartupOption, recovery-MetaRecoveryContext]",
            "newValue": "[editStreams-Iterable\u003cEditLogInputStream\u003e, target-FSNamesystem, maxTxnsToRead-long, startOpt-StartupOption, recovery-MetaRecoveryContext]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-12978. Fine-grained locking while consuming journal stream. Contributed by Konstantin Shvachko.",
          "commitDate": "31/05/18 2:56 PM",
          "commitName": "ebe5853a458150b7e42fe7434851bfcbe25e354d",
          "commitAuthor": "Konstantin V Shvachko",
          "commitDateOld": "28/03/18 12:49 PM",
          "commitNameOld": "a991e899fb9f98d2089f37ac9ac7c485d3bbb959",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 64.09,
          "commitsBetweenForRepo": 964,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,36 @@\n-  private long loadEdits(Iterable\u003cEditLogInputStream\u003e editStreams,\n-      FSNamesystem target, StartupOption startOpt, MetaRecoveryContext recovery)\n+  public long loadEdits(Iterable\u003cEditLogInputStream\u003e editStreams,\n+      FSNamesystem target, long maxTxnsToRead,\n+      StartupOption startOpt, MetaRecoveryContext recovery)\n       throws IOException {\n     LOG.debug(\"About to load edits:\\n  \" + Joiner.on(\"\\n  \").join(editStreams));\n     StartupProgress prog \u003d NameNode.getStartupProgress();\n     prog.beginPhase(Phase.LOADING_EDITS);\n     \n     long prevLastAppliedTxId \u003d lastAppliedTxId;  \n     try {    \n       FSEditLogLoader loader \u003d new FSEditLogLoader(target, lastAppliedTxId);\n       \n       // Load latest edits\n       for (EditLogInputStream editIn : editStreams) {\n         LOG.info(\"Reading \" + editIn + \" expecting start txid #\" +\n               (lastAppliedTxId + 1));\n         try {\n-          loader.loadFSEdits(editIn, lastAppliedTxId + 1, startOpt, recovery);\n+          loader.loadFSEdits(editIn, lastAppliedTxId + 1, maxTxnsToRead,\n+              startOpt, recovery);\n         } finally {\n           // Update lastAppliedTxId even in case of error, since some ops may\n           // have been successfully applied before the error.\n           lastAppliedTxId \u003d loader.getLastAppliedTxId();\n         }\n         // If we are in recovery mode, we may have skipped over some txids.\n-        if (editIn.getLastTxId() !\u003d HdfsServerConstants.INVALID_TXID) {\n+        if (editIn.getLastTxId() !\u003d HdfsServerConstants.INVALID_TXID\n+            \u0026\u0026 recovery !\u003d null) {\n           lastAppliedTxId \u003d editIn.getLastTxId();\n         }\n       }\n     } finally {\n       FSEditLog.closeAllStreams(editStreams);\n     }\n     prog.endPhase(Phase.LOADING_EDITS);\n     return lastAppliedTxId - prevLastAppliedTxId;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public long loadEdits(Iterable\u003cEditLogInputStream\u003e editStreams,\n      FSNamesystem target, long maxTxnsToRead,\n      StartupOption startOpt, MetaRecoveryContext recovery)\n      throws IOException {\n    LOG.debug(\"About to load edits:\\n  \" + Joiner.on(\"\\n  \").join(editStreams));\n    StartupProgress prog \u003d NameNode.getStartupProgress();\n    prog.beginPhase(Phase.LOADING_EDITS);\n    \n    long prevLastAppliedTxId \u003d lastAppliedTxId;  \n    try {    \n      FSEditLogLoader loader \u003d new FSEditLogLoader(target, lastAppliedTxId);\n      \n      // Load latest edits\n      for (EditLogInputStream editIn : editStreams) {\n        LOG.info(\"Reading \" + editIn + \" expecting start txid #\" +\n              (lastAppliedTxId + 1));\n        try {\n          loader.loadFSEdits(editIn, lastAppliedTxId + 1, maxTxnsToRead,\n              startOpt, recovery);\n        } finally {\n          // Update lastAppliedTxId even in case of error, since some ops may\n          // have been successfully applied before the error.\n          lastAppliedTxId \u003d loader.getLastAppliedTxId();\n        }\n        // If we are in recovery mode, we may have skipped over some txids.\n        if (editIn.getLastTxId() !\u003d HdfsServerConstants.INVALID_TXID\n            \u0026\u0026 recovery !\u003d null) {\n          lastAppliedTxId \u003d editIn.getLastTxId();\n        }\n      }\n    } finally {\n      FSEditLog.closeAllStreams(editStreams);\n    }\n    prog.endPhase(Phase.LOADING_EDITS);\n    return lastAppliedTxId - prevLastAppliedTxId;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImage.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-12978. Fine-grained locking while consuming journal stream. Contributed by Konstantin Shvachko.",
          "commitDate": "31/05/18 2:56 PM",
          "commitName": "ebe5853a458150b7e42fe7434851bfcbe25e354d",
          "commitAuthor": "Konstantin V Shvachko",
          "commitDateOld": "28/03/18 12:49 PM",
          "commitNameOld": "a991e899fb9f98d2089f37ac9ac7c485d3bbb959",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 64.09,
          "commitsBetweenForRepo": 964,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,36 @@\n-  private long loadEdits(Iterable\u003cEditLogInputStream\u003e editStreams,\n-      FSNamesystem target, StartupOption startOpt, MetaRecoveryContext recovery)\n+  public long loadEdits(Iterable\u003cEditLogInputStream\u003e editStreams,\n+      FSNamesystem target, long maxTxnsToRead,\n+      StartupOption startOpt, MetaRecoveryContext recovery)\n       throws IOException {\n     LOG.debug(\"About to load edits:\\n  \" + Joiner.on(\"\\n  \").join(editStreams));\n     StartupProgress prog \u003d NameNode.getStartupProgress();\n     prog.beginPhase(Phase.LOADING_EDITS);\n     \n     long prevLastAppliedTxId \u003d lastAppliedTxId;  \n     try {    \n       FSEditLogLoader loader \u003d new FSEditLogLoader(target, lastAppliedTxId);\n       \n       // Load latest edits\n       for (EditLogInputStream editIn : editStreams) {\n         LOG.info(\"Reading \" + editIn + \" expecting start txid #\" +\n               (lastAppliedTxId + 1));\n         try {\n-          loader.loadFSEdits(editIn, lastAppliedTxId + 1, startOpt, recovery);\n+          loader.loadFSEdits(editIn, lastAppliedTxId + 1, maxTxnsToRead,\n+              startOpt, recovery);\n         } finally {\n           // Update lastAppliedTxId even in case of error, since some ops may\n           // have been successfully applied before the error.\n           lastAppliedTxId \u003d loader.getLastAppliedTxId();\n         }\n         // If we are in recovery mode, we may have skipped over some txids.\n-        if (editIn.getLastTxId() !\u003d HdfsServerConstants.INVALID_TXID) {\n+        if (editIn.getLastTxId() !\u003d HdfsServerConstants.INVALID_TXID\n+            \u0026\u0026 recovery !\u003d null) {\n           lastAppliedTxId \u003d editIn.getLastTxId();\n         }\n       }\n     } finally {\n       FSEditLog.closeAllStreams(editStreams);\n     }\n     prog.endPhase(Phase.LOADING_EDITS);\n     return lastAppliedTxId - prevLastAppliedTxId;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public long loadEdits(Iterable\u003cEditLogInputStream\u003e editStreams,\n      FSNamesystem target, long maxTxnsToRead,\n      StartupOption startOpt, MetaRecoveryContext recovery)\n      throws IOException {\n    LOG.debug(\"About to load edits:\\n  \" + Joiner.on(\"\\n  \").join(editStreams));\n    StartupProgress prog \u003d NameNode.getStartupProgress();\n    prog.beginPhase(Phase.LOADING_EDITS);\n    \n    long prevLastAppliedTxId \u003d lastAppliedTxId;  \n    try {    \n      FSEditLogLoader loader \u003d new FSEditLogLoader(target, lastAppliedTxId);\n      \n      // Load latest edits\n      for (EditLogInputStream editIn : editStreams) {\n        LOG.info(\"Reading \" + editIn + \" expecting start txid #\" +\n              (lastAppliedTxId + 1));\n        try {\n          loader.loadFSEdits(editIn, lastAppliedTxId + 1, maxTxnsToRead,\n              startOpt, recovery);\n        } finally {\n          // Update lastAppliedTxId even in case of error, since some ops may\n          // have been successfully applied before the error.\n          lastAppliedTxId \u003d loader.getLastAppliedTxId();\n        }\n        // If we are in recovery mode, we may have skipped over some txids.\n        if (editIn.getLastTxId() !\u003d HdfsServerConstants.INVALID_TXID\n            \u0026\u0026 recovery !\u003d null) {\n          lastAppliedTxId \u003d editIn.getLastTxId();\n        }\n      }\n    } finally {\n      FSEditLog.closeAllStreams(editStreams);\n    }\n    prog.endPhase(Phase.LOADING_EDITS);\n    return lastAppliedTxId - prevLastAppliedTxId;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImage.java",
          "extendedDetails": {}
        }
      ]
    },
    "a40342b0dab1f9137ae4b3679a5aca7f2a57d23d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6763. Initialize file system-wide quota once on transitioning to active. Contributed by Kihwal Lee\n",
      "commitDate": "10/09/15 7:16 AM",
      "commitName": "a40342b0dab1f9137ae4b3679a5aca7f2a57d23d",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "02/09/15 3:19 PM",
      "commitNameOld": "de928d566a119f0b7fa5f171719642cd86be0af7",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 7.66,
      "commitsBetweenForRepo": 41,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,33 @@\n   private long loadEdits(Iterable\u003cEditLogInputStream\u003e editStreams,\n       FSNamesystem target, StartupOption startOpt, MetaRecoveryContext recovery)\n       throws IOException {\n     LOG.debug(\"About to load edits:\\n  \" + Joiner.on(\"\\n  \").join(editStreams));\n     StartupProgress prog \u003d NameNode.getStartupProgress();\n     prog.beginPhase(Phase.LOADING_EDITS);\n     \n     long prevLastAppliedTxId \u003d lastAppliedTxId;  \n     try {    \n       FSEditLogLoader loader \u003d new FSEditLogLoader(target, lastAppliedTxId);\n       \n       // Load latest edits\n       for (EditLogInputStream editIn : editStreams) {\n         LOG.info(\"Reading \" + editIn + \" expecting start txid #\" +\n               (lastAppliedTxId + 1));\n         try {\n           loader.loadFSEdits(editIn, lastAppliedTxId + 1, startOpt, recovery);\n         } finally {\n           // Update lastAppliedTxId even in case of error, since some ops may\n           // have been successfully applied before the error.\n           lastAppliedTxId \u003d loader.getLastAppliedTxId();\n         }\n         // If we are in recovery mode, we may have skipped over some txids.\n         if (editIn.getLastTxId() !\u003d HdfsServerConstants.INVALID_TXID) {\n           lastAppliedTxId \u003d editIn.getLastTxId();\n         }\n       }\n     } finally {\n       FSEditLog.closeAllStreams(editStreams);\n-      // update the counts\n-      updateCountForQuota(target.getBlockManager().getStoragePolicySuite(),\n-          target.dir.rootDir, quotaInitThreads);\n     }\n     prog.endPhase(Phase.LOADING_EDITS);\n     return lastAppliedTxId - prevLastAppliedTxId;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private long loadEdits(Iterable\u003cEditLogInputStream\u003e editStreams,\n      FSNamesystem target, StartupOption startOpt, MetaRecoveryContext recovery)\n      throws IOException {\n    LOG.debug(\"About to load edits:\\n  \" + Joiner.on(\"\\n  \").join(editStreams));\n    StartupProgress prog \u003d NameNode.getStartupProgress();\n    prog.beginPhase(Phase.LOADING_EDITS);\n    \n    long prevLastAppliedTxId \u003d lastAppliedTxId;  \n    try {    \n      FSEditLogLoader loader \u003d new FSEditLogLoader(target, lastAppliedTxId);\n      \n      // Load latest edits\n      for (EditLogInputStream editIn : editStreams) {\n        LOG.info(\"Reading \" + editIn + \" expecting start txid #\" +\n              (lastAppliedTxId + 1));\n        try {\n          loader.loadFSEdits(editIn, lastAppliedTxId + 1, startOpt, recovery);\n        } finally {\n          // Update lastAppliedTxId even in case of error, since some ops may\n          // have been successfully applied before the error.\n          lastAppliedTxId \u003d loader.getLastAppliedTxId();\n        }\n        // If we are in recovery mode, we may have skipped over some txids.\n        if (editIn.getLastTxId() !\u003d HdfsServerConstants.INVALID_TXID) {\n          lastAppliedTxId \u003d editIn.getLastTxId();\n        }\n      }\n    } finally {\n      FSEditLog.closeAllStreams(editStreams);\n    }\n    prog.endPhase(Phase.LOADING_EDITS);\n    return lastAppliedTxId - prevLastAppliedTxId;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImage.java",
      "extendedDetails": {}
    },
    "b6ceee9bf42eec15891f60a014bbfa47e03f563c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8865. Improve quota initialization performance. Contributed by Kihwal Lee.\n",
      "commitDate": "28/08/15 11:14 AM",
      "commitName": "b6ceee9bf42eec15891f60a014bbfa47e03f563c",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "12/08/15 3:20 PM",
      "commitNameOld": "3e715a4f4c46bcd8b3054cb0566e526c46bd5d66",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 15.83,
      "commitsBetweenForRepo": 95,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   private long loadEdits(Iterable\u003cEditLogInputStream\u003e editStreams,\n       FSNamesystem target, StartupOption startOpt, MetaRecoveryContext recovery)\n       throws IOException {\n     LOG.debug(\"About to load edits:\\n  \" + Joiner.on(\"\\n  \").join(editStreams));\n     StartupProgress prog \u003d NameNode.getStartupProgress();\n     prog.beginPhase(Phase.LOADING_EDITS);\n     \n     long prevLastAppliedTxId \u003d lastAppliedTxId;  \n     try {    \n       FSEditLogLoader loader \u003d new FSEditLogLoader(target, lastAppliedTxId);\n       \n       // Load latest edits\n       for (EditLogInputStream editIn : editStreams) {\n         LOG.info(\"Reading \" + editIn + \" expecting start txid #\" +\n               (lastAppliedTxId + 1));\n         try {\n           loader.loadFSEdits(editIn, lastAppliedTxId + 1, startOpt, recovery);\n         } finally {\n           // Update lastAppliedTxId even in case of error, since some ops may\n           // have been successfully applied before the error.\n           lastAppliedTxId \u003d loader.getLastAppliedTxId();\n         }\n         // If we are in recovery mode, we may have skipped over some txids.\n         if (editIn.getLastTxId() !\u003d HdfsServerConstants.INVALID_TXID) {\n           lastAppliedTxId \u003d editIn.getLastTxId();\n         }\n       }\n     } finally {\n       FSEditLog.closeAllStreams(editStreams);\n       // update the counts\n       updateCountForQuota(target.getBlockManager().getStoragePolicySuite(),\n-          target.dir.rootDir);\n+          target.dir.rootDir, quotaInitThreads);\n     }\n     prog.endPhase(Phase.LOADING_EDITS);\n     return lastAppliedTxId - prevLastAppliedTxId;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private long loadEdits(Iterable\u003cEditLogInputStream\u003e editStreams,\n      FSNamesystem target, StartupOption startOpt, MetaRecoveryContext recovery)\n      throws IOException {\n    LOG.debug(\"About to load edits:\\n  \" + Joiner.on(\"\\n  \").join(editStreams));\n    StartupProgress prog \u003d NameNode.getStartupProgress();\n    prog.beginPhase(Phase.LOADING_EDITS);\n    \n    long prevLastAppliedTxId \u003d lastAppliedTxId;  \n    try {    \n      FSEditLogLoader loader \u003d new FSEditLogLoader(target, lastAppliedTxId);\n      \n      // Load latest edits\n      for (EditLogInputStream editIn : editStreams) {\n        LOG.info(\"Reading \" + editIn + \" expecting start txid #\" +\n              (lastAppliedTxId + 1));\n        try {\n          loader.loadFSEdits(editIn, lastAppliedTxId + 1, startOpt, recovery);\n        } finally {\n          // Update lastAppliedTxId even in case of error, since some ops may\n          // have been successfully applied before the error.\n          lastAppliedTxId \u003d loader.getLastAppliedTxId();\n        }\n        // If we are in recovery mode, we may have skipped over some txids.\n        if (editIn.getLastTxId() !\u003d HdfsServerConstants.INVALID_TXID) {\n          lastAppliedTxId \u003d editIn.getLastTxId();\n        }\n      }\n    } finally {\n      FSEditLog.closeAllStreams(editStreams);\n      // update the counts\n      updateCountForQuota(target.getBlockManager().getStoragePolicySuite(),\n          target.dir.rootDir, quotaInitThreads);\n    }\n    prog.endPhase(Phase.LOADING_EDITS);\n    return lastAppliedTxId - prevLastAppliedTxId;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImage.java",
      "extendedDetails": {}
    },
    "6ae2a0d048e133b43249c248a75a4d77d9abb80d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8249. Separate HdfsConstants into the client and the server side class. Contributed by Haohui Mai.\n",
      "commitDate": "02/05/15 10:03 AM",
      "commitName": "6ae2a0d048e133b43249c248a75a4d77d9abb80d",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "14/04/15 3:05 PM",
      "commitNameOld": "fddd55279d0bdd08b3b40aba6fe2ded1d2e0d846",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 17.79,
      "commitsBetweenForRepo": 154,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   private long loadEdits(Iterable\u003cEditLogInputStream\u003e editStreams,\n       FSNamesystem target, StartupOption startOpt, MetaRecoveryContext recovery)\n       throws IOException {\n     LOG.debug(\"About to load edits:\\n  \" + Joiner.on(\"\\n  \").join(editStreams));\n     StartupProgress prog \u003d NameNode.getStartupProgress();\n     prog.beginPhase(Phase.LOADING_EDITS);\n     \n     long prevLastAppliedTxId \u003d lastAppliedTxId;  \n     try {    \n       FSEditLogLoader loader \u003d new FSEditLogLoader(target, lastAppliedTxId);\n       \n       // Load latest edits\n       for (EditLogInputStream editIn : editStreams) {\n         LOG.info(\"Reading \" + editIn + \" expecting start txid #\" +\n               (lastAppliedTxId + 1));\n         try {\n           loader.loadFSEdits(editIn, lastAppliedTxId + 1, startOpt, recovery);\n         } finally {\n           // Update lastAppliedTxId even in case of error, since some ops may\n           // have been successfully applied before the error.\n           lastAppliedTxId \u003d loader.getLastAppliedTxId();\n         }\n         // If we are in recovery mode, we may have skipped over some txids.\n-        if (editIn.getLastTxId() !\u003d HdfsConstants.INVALID_TXID) {\n+        if (editIn.getLastTxId() !\u003d HdfsServerConstants.INVALID_TXID) {\n           lastAppliedTxId \u003d editIn.getLastTxId();\n         }\n       }\n     } finally {\n       FSEditLog.closeAllStreams(editStreams);\n       // update the counts\n       updateCountForQuota(target.getBlockManager().getStoragePolicySuite(),\n           target.dir.rootDir);\n     }\n     prog.endPhase(Phase.LOADING_EDITS);\n     return lastAppliedTxId - prevLastAppliedTxId;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private long loadEdits(Iterable\u003cEditLogInputStream\u003e editStreams,\n      FSNamesystem target, StartupOption startOpt, MetaRecoveryContext recovery)\n      throws IOException {\n    LOG.debug(\"About to load edits:\\n  \" + Joiner.on(\"\\n  \").join(editStreams));\n    StartupProgress prog \u003d NameNode.getStartupProgress();\n    prog.beginPhase(Phase.LOADING_EDITS);\n    \n    long prevLastAppliedTxId \u003d lastAppliedTxId;  \n    try {    \n      FSEditLogLoader loader \u003d new FSEditLogLoader(target, lastAppliedTxId);\n      \n      // Load latest edits\n      for (EditLogInputStream editIn : editStreams) {\n        LOG.info(\"Reading \" + editIn + \" expecting start txid #\" +\n              (lastAppliedTxId + 1));\n        try {\n          loader.loadFSEdits(editIn, lastAppliedTxId + 1, startOpt, recovery);\n        } finally {\n          // Update lastAppliedTxId even in case of error, since some ops may\n          // have been successfully applied before the error.\n          lastAppliedTxId \u003d loader.getLastAppliedTxId();\n        }\n        // If we are in recovery mode, we may have skipped over some txids.\n        if (editIn.getLastTxId() !\u003d HdfsServerConstants.INVALID_TXID) {\n          lastAppliedTxId \u003d editIn.getLastTxId();\n        }\n      }\n    } finally {\n      FSEditLog.closeAllStreams(editStreams);\n      // update the counts\n      updateCountForQuota(target.getBlockManager().getStoragePolicySuite(),\n          target.dir.rootDir);\n    }\n    prog.endPhase(Phase.LOADING_EDITS);\n    return lastAppliedTxId - prevLastAppliedTxId;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImage.java",
      "extendedDetails": {}
    },
    "5dae97a584d30cef3e34141edfaca49c4ec57913": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7723. Quota By Storage Type namenode implemenation. (Contributed by Xiaoyu Yao)\n",
      "commitDate": "11/02/15 10:41 AM",
      "commitName": "5dae97a584d30cef3e34141edfaca49c4ec57913",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "22/01/15 4:26 PM",
      "commitNameOld": "d3268c4b10a0f728b554ddb6d69b666a9ca13f12",
      "commitAuthorOld": "cnauroth",
      "daysBetweenCommits": 19.76,
      "commitsBetweenForRepo": 184,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,36 @@\n   private long loadEdits(Iterable\u003cEditLogInputStream\u003e editStreams,\n       FSNamesystem target, StartupOption startOpt, MetaRecoveryContext recovery)\n       throws IOException {\n     LOG.debug(\"About to load edits:\\n  \" + Joiner.on(\"\\n  \").join(editStreams));\n     StartupProgress prog \u003d NameNode.getStartupProgress();\n     prog.beginPhase(Phase.LOADING_EDITS);\n     \n     long prevLastAppliedTxId \u003d lastAppliedTxId;  \n     try {    \n       FSEditLogLoader loader \u003d new FSEditLogLoader(target, lastAppliedTxId);\n       \n       // Load latest edits\n       for (EditLogInputStream editIn : editStreams) {\n         LOG.info(\"Reading \" + editIn + \" expecting start txid #\" +\n               (lastAppliedTxId + 1));\n         try {\n           loader.loadFSEdits(editIn, lastAppliedTxId + 1, startOpt, recovery);\n         } finally {\n           // Update lastAppliedTxId even in case of error, since some ops may\n           // have been successfully applied before the error.\n           lastAppliedTxId \u003d loader.getLastAppliedTxId();\n         }\n         // If we are in recovery mode, we may have skipped over some txids.\n         if (editIn.getLastTxId() !\u003d HdfsConstants.INVALID_TXID) {\n           lastAppliedTxId \u003d editIn.getLastTxId();\n         }\n       }\n     } finally {\n       FSEditLog.closeAllStreams(editStreams);\n       // update the counts\n-      updateCountForQuota(target.dir.rootDir);\n+      updateCountForQuota(target.getBlockManager().getStoragePolicySuite(),\n+          target.dir.rootDir);\n     }\n     prog.endPhase(Phase.LOADING_EDITS);\n     return lastAppliedTxId - prevLastAppliedTxId;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private long loadEdits(Iterable\u003cEditLogInputStream\u003e editStreams,\n      FSNamesystem target, StartupOption startOpt, MetaRecoveryContext recovery)\n      throws IOException {\n    LOG.debug(\"About to load edits:\\n  \" + Joiner.on(\"\\n  \").join(editStreams));\n    StartupProgress prog \u003d NameNode.getStartupProgress();\n    prog.beginPhase(Phase.LOADING_EDITS);\n    \n    long prevLastAppliedTxId \u003d lastAppliedTxId;  \n    try {    \n      FSEditLogLoader loader \u003d new FSEditLogLoader(target, lastAppliedTxId);\n      \n      // Load latest edits\n      for (EditLogInputStream editIn : editStreams) {\n        LOG.info(\"Reading \" + editIn + \" expecting start txid #\" +\n              (lastAppliedTxId + 1));\n        try {\n          loader.loadFSEdits(editIn, lastAppliedTxId + 1, startOpt, recovery);\n        } finally {\n          // Update lastAppliedTxId even in case of error, since some ops may\n          // have been successfully applied before the error.\n          lastAppliedTxId \u003d loader.getLastAppliedTxId();\n        }\n        // If we are in recovery mode, we may have skipped over some txids.\n        if (editIn.getLastTxId() !\u003d HdfsConstants.INVALID_TXID) {\n          lastAppliedTxId \u003d editIn.getLastTxId();\n        }\n      }\n    } finally {\n      FSEditLog.closeAllStreams(editStreams);\n      // update the counts\n      updateCountForQuota(target.getBlockManager().getStoragePolicySuite(),\n          target.dir.rootDir);\n    }\n    prog.endPhase(Phase.LOADING_EDITS);\n    return lastAppliedTxId - prevLastAppliedTxId;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImage.java",
      "extendedDetails": {}
    },
    "2088584864d829d59d8352b88dead8eafa6922e4": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5980. Rollback does not need to load edits.  Contributed by jing9\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1570078 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/02/14 7:57 PM",
      "commitName": "2088584864d829d59d8352b88dead8eafa6922e4",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "19/02/14 11:41 AM",
      "commitNameOld": "377424e36a25ab34bba9aaed5feaae9d293eb57f",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,35 @@\n   private long loadEdits(Iterable\u003cEditLogInputStream\u003e editStreams,\n       FSNamesystem target, StartupOption startOpt, MetaRecoveryContext recovery)\n       throws IOException {\n     LOG.debug(\"About to load edits:\\n  \" + Joiner.on(\"\\n  \").join(editStreams));\n     StartupProgress prog \u003d NameNode.getStartupProgress();\n     prog.beginPhase(Phase.LOADING_EDITS);\n     \n     long prevLastAppliedTxId \u003d lastAppliedTxId;  \n     try {    \n       FSEditLogLoader loader \u003d new FSEditLogLoader(target, lastAppliedTxId);\n       \n       // Load latest edits\n       for (EditLogInputStream editIn : editStreams) {\n         LOG.info(\"Reading \" + editIn + \" expecting start txid #\" +\n               (lastAppliedTxId + 1));\n         try {\n           loader.loadFSEdits(editIn, lastAppliedTxId + 1, startOpt, recovery);\n         } finally {\n           // Update lastAppliedTxId even in case of error, since some ops may\n           // have been successfully applied before the error.\n           lastAppliedTxId \u003d loader.getLastAppliedTxId();\n         }\n-        boolean rollingRollback \u003d StartupOption\n-            .isRollingUpgradeRollback(startOpt);\n         // If we are in recovery mode, we may have skipped over some txids.\n-        if (editIn.getLastTxId() !\u003d HdfsConstants.INVALID_TXID\n-            \u0026\u0026 !rollingRollback) {\n+        if (editIn.getLastTxId() !\u003d HdfsConstants.INVALID_TXID) {\n           lastAppliedTxId \u003d editIn.getLastTxId();\n         }\n       }\n     } finally {\n       FSEditLog.closeAllStreams(editStreams);\n       // update the counts\n       updateCountForQuota(target.dir.rootDir);\n     }\n     prog.endPhase(Phase.LOADING_EDITS);\n     return lastAppliedTxId - prevLastAppliedTxId;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private long loadEdits(Iterable\u003cEditLogInputStream\u003e editStreams,\n      FSNamesystem target, StartupOption startOpt, MetaRecoveryContext recovery)\n      throws IOException {\n    LOG.debug(\"About to load edits:\\n  \" + Joiner.on(\"\\n  \").join(editStreams));\n    StartupProgress prog \u003d NameNode.getStartupProgress();\n    prog.beginPhase(Phase.LOADING_EDITS);\n    \n    long prevLastAppliedTxId \u003d lastAppliedTxId;  \n    try {    \n      FSEditLogLoader loader \u003d new FSEditLogLoader(target, lastAppliedTxId);\n      \n      // Load latest edits\n      for (EditLogInputStream editIn : editStreams) {\n        LOG.info(\"Reading \" + editIn + \" expecting start txid #\" +\n              (lastAppliedTxId + 1));\n        try {\n          loader.loadFSEdits(editIn, lastAppliedTxId + 1, startOpt, recovery);\n        } finally {\n          // Update lastAppliedTxId even in case of error, since some ops may\n          // have been successfully applied before the error.\n          lastAppliedTxId \u003d loader.getLastAppliedTxId();\n        }\n        // If we are in recovery mode, we may have skipped over some txids.\n        if (editIn.getLastTxId() !\u003d HdfsConstants.INVALID_TXID) {\n          lastAppliedTxId \u003d editIn.getLastTxId();\n        }\n      }\n    } finally {\n      FSEditLog.closeAllStreams(editStreams);\n      // update the counts\n      updateCountForQuota(target.dir.rootDir);\n    }\n    prog.endPhase(Phase.LOADING_EDITS);\n    return lastAppliedTxId - prevLastAppliedTxId;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImage.java",
      "extendedDetails": {}
    }
  }
}