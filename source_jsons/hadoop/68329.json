{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SwiftRestClient.java",
  "functionName": "exec",
  "functionId": "exec___client-HttpClient__req-M",
  "sourceFilePath": "hadoop-tools/hadoop-openstack/src/main/java/org/apache/hadoop/fs/swift/http/SwiftRestClient.java",
  "functionStartLine": 1669,
  "functionEndLine": 1711,
  "numCommitsSeen": 10,
  "timeTaken": 2978,
  "changeHistory": [
    "62579b69a0a294ba1ea14cf76c650b640f89f331",
    "3caca924bc72fe4a0e5b1ea89adb098cc1eb7874"
  ],
  "changeHistoryShort": {
    "62579b69a0a294ba1ea14cf76c650b640f89f331": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
    "3caca924bc72fe4a0e5b1ea89adb098cc1eb7874": "Yintroduced"
  },
  "changeHistoryDetails": {
    "62579b69a0a294ba1ea14cf76c650b640f89f331": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "HADOOP-11614. Remove httpclient dependency from hadoop-openstack. Contributed by Akira Ajisaka, Brahma Reddy Battula, and Steve Loughran.\n",
      "commitDate": "27/04/17 12:57 AM",
      "commitName": "62579b69a0a294ba1ea14cf76c650b640f89f331",
      "commitAuthor": "Akira Ajisaka",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-11614. Remove httpclient dependency from hadoop-openstack. Contributed by Akira Ajisaka, Brahma Reddy Battula, and Steve Loughran.\n",
          "commitDate": "27/04/17 12:57 AM",
          "commitName": "62579b69a0a294ba1ea14cf76c650b640f89f331",
          "commitAuthor": "Akira Ajisaka",
          "commitDateOld": "01/10/15 9:25 AM",
          "commitNameOld": "ecbfd68974691cc9103ae477d10c15c7f21b6dea",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 573.65,
          "commitsBetweenForRepo": 3812,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,43 @@\n-  private \u003cM extends HttpMethod\u003e int exec(M method) throws IOException {\n-    final HttpClient client \u003d new HttpClient();\n-    if (proxyHost !\u003d null) {\n-      client.getParams().setParameter(ConnRoutePNames.DEFAULT_PROXY,\n-              new HttpHost(proxyHost, proxyPort));\n-    }\n-\n-    int statusCode \u003d execWithDebugOutput(method, client);\n-\n+  private \u003cM extends HttpUriRequest\u003e HttpResponse exec(HttpClient client, M req)\n+      throws IOException {\n+    HttpResponse resp \u003d execWithDebugOutput(req, client);\n+    int statusCode \u003d resp.getStatusLine().getStatusCode();\n     if ((statusCode \u003d\u003d HttpStatus.SC_UNAUTHORIZED\n             || statusCode \u003d\u003d HttpStatus.SC_BAD_REQUEST)\n-            \u0026\u0026 method instanceof AuthPostMethod\n+        \u0026\u0026 req instanceof AuthPostRequest\n             \u0026\u0026 !useKeystoneAuthentication) {\n       if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Operation failed with status \" + method.getStatusCode() +\n-                 \" attempting keystone auth\");\n+        LOG.debug(\"Operation failed with status \" + statusCode\n+            + \" attempting keystone auth\");\n       }\n       //if rackspace key authentication failed - try custom Keystone authentication\n       useKeystoneAuthentication \u003d true;\n-      final AuthPostMethod authentication \u003d (AuthPostMethod) method;\n+      final AuthPostRequest authentication \u003d (AuthPostRequest) req;\n       //replace rackspace auth with keystone one\n-      authentication.setRequestEntity(getAuthenticationRequst(keystoneAuthRequest));\n-      statusCode \u003d execWithDebugOutput(method, client);\n+      authentication.setEntity(getAuthenticationRequst(keystoneAuthRequest));\n+      resp \u003d execWithDebugOutput(req, client);\n     }\n \n     if (statusCode \u003d\u003d HttpStatus.SC_UNAUTHORIZED ) {\n       //unauthed -or the auth uri rejected it.\n \n-      if (method instanceof AuthPostMethod) {\n+      if (req instanceof AuthPostRequest) {\n           //unauth response from the AUTH URI itself.\n           throw new SwiftAuthenticationFailedException(authRequest.toString(),\n                                                        \"auth\",\n                                                        authUri,\n-                                                       method);\n+                                                       resp);\n       }\n       //any other URL: try again\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Reauthenticating\");\n       }\n       //re-auth, this may recurse into the same dir\n       authenticate();\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Retrying original request\");\n       }\n-      statusCode \u003d execWithDebugOutput(method, client);\n+      resp \u003d execWithDebugOutput(req, client);\n     }\n-    return statusCode;\n+    return resp;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private \u003cM extends HttpUriRequest\u003e HttpResponse exec(HttpClient client, M req)\n      throws IOException {\n    HttpResponse resp \u003d execWithDebugOutput(req, client);\n    int statusCode \u003d resp.getStatusLine().getStatusCode();\n    if ((statusCode \u003d\u003d HttpStatus.SC_UNAUTHORIZED\n            || statusCode \u003d\u003d HttpStatus.SC_BAD_REQUEST)\n        \u0026\u0026 req instanceof AuthPostRequest\n            \u0026\u0026 !useKeystoneAuthentication) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Operation failed with status \" + statusCode\n            + \" attempting keystone auth\");\n      }\n      //if rackspace key authentication failed - try custom Keystone authentication\n      useKeystoneAuthentication \u003d true;\n      final AuthPostRequest authentication \u003d (AuthPostRequest) req;\n      //replace rackspace auth with keystone one\n      authentication.setEntity(getAuthenticationRequst(keystoneAuthRequest));\n      resp \u003d execWithDebugOutput(req, client);\n    }\n\n    if (statusCode \u003d\u003d HttpStatus.SC_UNAUTHORIZED ) {\n      //unauthed -or the auth uri rejected it.\n\n      if (req instanceof AuthPostRequest) {\n          //unauth response from the AUTH URI itself.\n          throw new SwiftAuthenticationFailedException(authRequest.toString(),\n                                                       \"auth\",\n                                                       authUri,\n                                                       resp);\n      }\n      //any other URL: try again\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Reauthenticating\");\n      }\n      //re-auth, this may recurse into the same dir\n      authenticate();\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Retrying original request\");\n      }\n      resp \u003d execWithDebugOutput(req, client);\n    }\n    return resp;\n  }",
          "path": "hadoop-tools/hadoop-openstack/src/main/java/org/apache/hadoop/fs/swift/http/SwiftRestClient.java",
          "extendedDetails": {
            "oldValue": "[method-M]",
            "newValue": "[client-HttpClient, req-M]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HADOOP-11614. Remove httpclient dependency from hadoop-openstack. Contributed by Akira Ajisaka, Brahma Reddy Battula, and Steve Loughran.\n",
          "commitDate": "27/04/17 12:57 AM",
          "commitName": "62579b69a0a294ba1ea14cf76c650b640f89f331",
          "commitAuthor": "Akira Ajisaka",
          "commitDateOld": "01/10/15 9:25 AM",
          "commitNameOld": "ecbfd68974691cc9103ae477d10c15c7f21b6dea",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 573.65,
          "commitsBetweenForRepo": 3812,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,43 @@\n-  private \u003cM extends HttpMethod\u003e int exec(M method) throws IOException {\n-    final HttpClient client \u003d new HttpClient();\n-    if (proxyHost !\u003d null) {\n-      client.getParams().setParameter(ConnRoutePNames.DEFAULT_PROXY,\n-              new HttpHost(proxyHost, proxyPort));\n-    }\n-\n-    int statusCode \u003d execWithDebugOutput(method, client);\n-\n+  private \u003cM extends HttpUriRequest\u003e HttpResponse exec(HttpClient client, M req)\n+      throws IOException {\n+    HttpResponse resp \u003d execWithDebugOutput(req, client);\n+    int statusCode \u003d resp.getStatusLine().getStatusCode();\n     if ((statusCode \u003d\u003d HttpStatus.SC_UNAUTHORIZED\n             || statusCode \u003d\u003d HttpStatus.SC_BAD_REQUEST)\n-            \u0026\u0026 method instanceof AuthPostMethod\n+        \u0026\u0026 req instanceof AuthPostRequest\n             \u0026\u0026 !useKeystoneAuthentication) {\n       if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Operation failed with status \" + method.getStatusCode() +\n-                 \" attempting keystone auth\");\n+        LOG.debug(\"Operation failed with status \" + statusCode\n+            + \" attempting keystone auth\");\n       }\n       //if rackspace key authentication failed - try custom Keystone authentication\n       useKeystoneAuthentication \u003d true;\n-      final AuthPostMethod authentication \u003d (AuthPostMethod) method;\n+      final AuthPostRequest authentication \u003d (AuthPostRequest) req;\n       //replace rackspace auth with keystone one\n-      authentication.setRequestEntity(getAuthenticationRequst(keystoneAuthRequest));\n-      statusCode \u003d execWithDebugOutput(method, client);\n+      authentication.setEntity(getAuthenticationRequst(keystoneAuthRequest));\n+      resp \u003d execWithDebugOutput(req, client);\n     }\n \n     if (statusCode \u003d\u003d HttpStatus.SC_UNAUTHORIZED ) {\n       //unauthed -or the auth uri rejected it.\n \n-      if (method instanceof AuthPostMethod) {\n+      if (req instanceof AuthPostRequest) {\n           //unauth response from the AUTH URI itself.\n           throw new SwiftAuthenticationFailedException(authRequest.toString(),\n                                                        \"auth\",\n                                                        authUri,\n-                                                       method);\n+                                                       resp);\n       }\n       //any other URL: try again\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Reauthenticating\");\n       }\n       //re-auth, this may recurse into the same dir\n       authenticate();\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Retrying original request\");\n       }\n-      statusCode \u003d execWithDebugOutput(method, client);\n+      resp \u003d execWithDebugOutput(req, client);\n     }\n-    return statusCode;\n+    return resp;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private \u003cM extends HttpUriRequest\u003e HttpResponse exec(HttpClient client, M req)\n      throws IOException {\n    HttpResponse resp \u003d execWithDebugOutput(req, client);\n    int statusCode \u003d resp.getStatusLine().getStatusCode();\n    if ((statusCode \u003d\u003d HttpStatus.SC_UNAUTHORIZED\n            || statusCode \u003d\u003d HttpStatus.SC_BAD_REQUEST)\n        \u0026\u0026 req instanceof AuthPostRequest\n            \u0026\u0026 !useKeystoneAuthentication) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Operation failed with status \" + statusCode\n            + \" attempting keystone auth\");\n      }\n      //if rackspace key authentication failed - try custom Keystone authentication\n      useKeystoneAuthentication \u003d true;\n      final AuthPostRequest authentication \u003d (AuthPostRequest) req;\n      //replace rackspace auth with keystone one\n      authentication.setEntity(getAuthenticationRequst(keystoneAuthRequest));\n      resp \u003d execWithDebugOutput(req, client);\n    }\n\n    if (statusCode \u003d\u003d HttpStatus.SC_UNAUTHORIZED ) {\n      //unauthed -or the auth uri rejected it.\n\n      if (req instanceof AuthPostRequest) {\n          //unauth response from the AUTH URI itself.\n          throw new SwiftAuthenticationFailedException(authRequest.toString(),\n                                                       \"auth\",\n                                                       authUri,\n                                                       resp);\n      }\n      //any other URL: try again\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Reauthenticating\");\n      }\n      //re-auth, this may recurse into the same dir\n      authenticate();\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Retrying original request\");\n      }\n      resp \u003d execWithDebugOutput(req, client);\n    }\n    return resp;\n  }",
          "path": "hadoop-tools/hadoop-openstack/src/main/java/org/apache/hadoop/fs/swift/http/SwiftRestClient.java",
          "extendedDetails": {
            "oldValue": "int",
            "newValue": "HttpResponse"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-11614. Remove httpclient dependency from hadoop-openstack. Contributed by Akira Ajisaka, Brahma Reddy Battula, and Steve Loughran.\n",
          "commitDate": "27/04/17 12:57 AM",
          "commitName": "62579b69a0a294ba1ea14cf76c650b640f89f331",
          "commitAuthor": "Akira Ajisaka",
          "commitDateOld": "01/10/15 9:25 AM",
          "commitNameOld": "ecbfd68974691cc9103ae477d10c15c7f21b6dea",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 573.65,
          "commitsBetweenForRepo": 3812,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,43 @@\n-  private \u003cM extends HttpMethod\u003e int exec(M method) throws IOException {\n-    final HttpClient client \u003d new HttpClient();\n-    if (proxyHost !\u003d null) {\n-      client.getParams().setParameter(ConnRoutePNames.DEFAULT_PROXY,\n-              new HttpHost(proxyHost, proxyPort));\n-    }\n-\n-    int statusCode \u003d execWithDebugOutput(method, client);\n-\n+  private \u003cM extends HttpUriRequest\u003e HttpResponse exec(HttpClient client, M req)\n+      throws IOException {\n+    HttpResponse resp \u003d execWithDebugOutput(req, client);\n+    int statusCode \u003d resp.getStatusLine().getStatusCode();\n     if ((statusCode \u003d\u003d HttpStatus.SC_UNAUTHORIZED\n             || statusCode \u003d\u003d HttpStatus.SC_BAD_REQUEST)\n-            \u0026\u0026 method instanceof AuthPostMethod\n+        \u0026\u0026 req instanceof AuthPostRequest\n             \u0026\u0026 !useKeystoneAuthentication) {\n       if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Operation failed with status \" + method.getStatusCode() +\n-                 \" attempting keystone auth\");\n+        LOG.debug(\"Operation failed with status \" + statusCode\n+            + \" attempting keystone auth\");\n       }\n       //if rackspace key authentication failed - try custom Keystone authentication\n       useKeystoneAuthentication \u003d true;\n-      final AuthPostMethod authentication \u003d (AuthPostMethod) method;\n+      final AuthPostRequest authentication \u003d (AuthPostRequest) req;\n       //replace rackspace auth with keystone one\n-      authentication.setRequestEntity(getAuthenticationRequst(keystoneAuthRequest));\n-      statusCode \u003d execWithDebugOutput(method, client);\n+      authentication.setEntity(getAuthenticationRequst(keystoneAuthRequest));\n+      resp \u003d execWithDebugOutput(req, client);\n     }\n \n     if (statusCode \u003d\u003d HttpStatus.SC_UNAUTHORIZED ) {\n       //unauthed -or the auth uri rejected it.\n \n-      if (method instanceof AuthPostMethod) {\n+      if (req instanceof AuthPostRequest) {\n           //unauth response from the AUTH URI itself.\n           throw new SwiftAuthenticationFailedException(authRequest.toString(),\n                                                        \"auth\",\n                                                        authUri,\n-                                                       method);\n+                                                       resp);\n       }\n       //any other URL: try again\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Reauthenticating\");\n       }\n       //re-auth, this may recurse into the same dir\n       authenticate();\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Retrying original request\");\n       }\n-      statusCode \u003d execWithDebugOutput(method, client);\n+      resp \u003d execWithDebugOutput(req, client);\n     }\n-    return statusCode;\n+    return resp;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private \u003cM extends HttpUriRequest\u003e HttpResponse exec(HttpClient client, M req)\n      throws IOException {\n    HttpResponse resp \u003d execWithDebugOutput(req, client);\n    int statusCode \u003d resp.getStatusLine().getStatusCode();\n    if ((statusCode \u003d\u003d HttpStatus.SC_UNAUTHORIZED\n            || statusCode \u003d\u003d HttpStatus.SC_BAD_REQUEST)\n        \u0026\u0026 req instanceof AuthPostRequest\n            \u0026\u0026 !useKeystoneAuthentication) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Operation failed with status \" + statusCode\n            + \" attempting keystone auth\");\n      }\n      //if rackspace key authentication failed - try custom Keystone authentication\n      useKeystoneAuthentication \u003d true;\n      final AuthPostRequest authentication \u003d (AuthPostRequest) req;\n      //replace rackspace auth with keystone one\n      authentication.setEntity(getAuthenticationRequst(keystoneAuthRequest));\n      resp \u003d execWithDebugOutput(req, client);\n    }\n\n    if (statusCode \u003d\u003d HttpStatus.SC_UNAUTHORIZED ) {\n      //unauthed -or the auth uri rejected it.\n\n      if (req instanceof AuthPostRequest) {\n          //unauth response from the AUTH URI itself.\n          throw new SwiftAuthenticationFailedException(authRequest.toString(),\n                                                       \"auth\",\n                                                       authUri,\n                                                       resp);\n      }\n      //any other URL: try again\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Reauthenticating\");\n      }\n      //re-auth, this may recurse into the same dir\n      authenticate();\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Retrying original request\");\n      }\n      resp \u003d execWithDebugOutput(req, client);\n    }\n    return resp;\n  }",
          "path": "hadoop-tools/hadoop-openstack/src/main/java/org/apache/hadoop/fs/swift/http/SwiftRestClient.java",
          "extendedDetails": {}
        }
      ]
    },
    "3caca924bc72fe4a0e5b1ea89adb098cc1eb7874": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-8545. Filesystem Implementation for OpenStack Swift\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1526854 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/09/13 4:32 AM",
      "commitName": "3caca924bc72fe4a0e5b1ea89adb098cc1eb7874",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,48 @@\n+  private \u003cM extends HttpMethod\u003e int exec(M method) throws IOException {\n+    final HttpClient client \u003d new HttpClient();\n+    if (proxyHost !\u003d null) {\n+      client.getParams().setParameter(ConnRoutePNames.DEFAULT_PROXY,\n+              new HttpHost(proxyHost, proxyPort));\n+    }\n+\n+    int statusCode \u003d execWithDebugOutput(method, client);\n+\n+    if ((statusCode \u003d\u003d HttpStatus.SC_UNAUTHORIZED\n+            || statusCode \u003d\u003d HttpStatus.SC_BAD_REQUEST)\n+            \u0026\u0026 method instanceof AuthPostMethod\n+            \u0026\u0026 !useKeystoneAuthentication) {\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Operation failed with status \" + method.getStatusCode() +\n+                 \" attempting keystone auth\");\n+      }\n+      //if rackspace key authentication failed - try custom Keystone authentication\n+      useKeystoneAuthentication \u003d true;\n+      final AuthPostMethod authentication \u003d (AuthPostMethod) method;\n+      //replace rackspace auth with keystone one\n+      authentication.setRequestEntity(getAuthenticationRequst(keystoneAuthRequest));\n+      statusCode \u003d execWithDebugOutput(method, client);\n+    }\n+\n+    if (statusCode \u003d\u003d HttpStatus.SC_UNAUTHORIZED ) {\n+      //unauthed -or the auth uri rejected it.\n+\n+      if (method instanceof AuthPostMethod) {\n+          //unauth response from the AUTH URI itself.\n+          throw new SwiftAuthenticationFailedException(authRequest.toString(),\n+                                                       \"auth\",\n+                                                       authUri,\n+                                                       method);\n+      }\n+      //any other URL: try again\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Reauthenticating\");\n+      }\n+      //re-auth, this may recurse into the same dir\n+      authenticate();\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Retrying original request\");\n+      }\n+      statusCode \u003d execWithDebugOutput(method, client);\n+    }\n+    return statusCode;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private \u003cM extends HttpMethod\u003e int exec(M method) throws IOException {\n    final HttpClient client \u003d new HttpClient();\n    if (proxyHost !\u003d null) {\n      client.getParams().setParameter(ConnRoutePNames.DEFAULT_PROXY,\n              new HttpHost(proxyHost, proxyPort));\n    }\n\n    int statusCode \u003d execWithDebugOutput(method, client);\n\n    if ((statusCode \u003d\u003d HttpStatus.SC_UNAUTHORIZED\n            || statusCode \u003d\u003d HttpStatus.SC_BAD_REQUEST)\n            \u0026\u0026 method instanceof AuthPostMethod\n            \u0026\u0026 !useKeystoneAuthentication) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Operation failed with status \" + method.getStatusCode() +\n                 \" attempting keystone auth\");\n      }\n      //if rackspace key authentication failed - try custom Keystone authentication\n      useKeystoneAuthentication \u003d true;\n      final AuthPostMethod authentication \u003d (AuthPostMethod) method;\n      //replace rackspace auth with keystone one\n      authentication.setRequestEntity(getAuthenticationRequst(keystoneAuthRequest));\n      statusCode \u003d execWithDebugOutput(method, client);\n    }\n\n    if (statusCode \u003d\u003d HttpStatus.SC_UNAUTHORIZED ) {\n      //unauthed -or the auth uri rejected it.\n\n      if (method instanceof AuthPostMethod) {\n          //unauth response from the AUTH URI itself.\n          throw new SwiftAuthenticationFailedException(authRequest.toString(),\n                                                       \"auth\",\n                                                       authUri,\n                                                       method);\n      }\n      //any other URL: try again\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Reauthenticating\");\n      }\n      //re-auth, this may recurse into the same dir\n      authenticate();\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Retrying original request\");\n      }\n      statusCode \u003d execWithDebugOutput(method, client);\n    }\n    return statusCode;\n  }",
      "path": "hadoop-tools/hadoop-openstack/src/main/java/org/apache/hadoop/fs/swift/http/SwiftRestClient.java"
    }
  }
}