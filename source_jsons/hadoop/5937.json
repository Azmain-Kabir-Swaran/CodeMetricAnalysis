{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSDirEncryptionZoneOp.java",
  "functionName": "generateEncryptedDataEncryptionKey",
  "functionId": "generateEncryptedDataEncryptionKey___fsd-FSDirectory(modifiers-final)__ezKeyName-String(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirEncryptionZoneOp.java",
  "functionStartLine": 83,
  "functionEndLine": 111,
  "numCommitsSeen": 619,
  "timeTaken": 16201,
  "changeHistory": [
    "f32e9fc8f7150f0e889c0774b3ad712af26fbd65",
    "ec289bbeceff064ad24e189db20a3e0a296822c1",
    "fdafd0cb4f1626ee41539f4b80711c4e78e3e16c",
    "9f816d7ca74c6e6c43ecfc8770228c518620c9cb",
    "ce3d68e9c3512b6f370e7597c411560d8a61052d",
    "71a81b6257c0000475ad62eb69292a20d45d269c"
  ],
  "changeHistoryShort": {
    "f32e9fc8f7150f0e889c0774b3ad712af26fbd65": "Ymultichange(Ymodifierchange,Ybodychange)",
    "ec289bbeceff064ad24e189db20a3e0a296822c1": "Ybodychange",
    "fdafd0cb4f1626ee41539f4b80711c4e78e3e16c": "Ybodychange",
    "9f816d7ca74c6e6c43ecfc8770228c518620c9cb": "Ybodychange",
    "ce3d68e9c3512b6f370e7597c411560d8a61052d": "Ybodychange",
    "71a81b6257c0000475ad62eb69292a20d45d269c": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparametermetachange,Yparameterchange)"
  },
  "changeHistoryDetails": {
    "f32e9fc8f7150f0e889c0774b3ad712af26fbd65": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "HDFS-10939. Reduce performance penalty of encryption zones. Contributed by Daryn sharp.\n",
      "commitDate": "06/10/16 1:11 PM",
      "commitName": "f32e9fc8f7150f0e889c0774b3ad712af26fbd65",
      "commitAuthor": "Kihwal Lee",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-10939. Reduce performance penalty of encryption zones. Contributed by Daryn sharp.\n",
          "commitDate": "06/10/16 1:11 PM",
          "commitName": "f32e9fc8f7150f0e889c0774b3ad712af26fbd65",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "30/09/16 6:44 AM",
          "commitNameOld": "0670149c88852cd7c4d6774bff06c7c588558739",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 6.27,
          "commitsBetweenForRepo": 48,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,29 @@\n-  static EncryptedKeyVersion generateEncryptedDataEncryptionKey(\n+  private static EncryptedKeyVersion generateEncryptedDataEncryptionKey(\n       final FSDirectory fsd, final String ezKeyName) throws IOException {\n+    // must not be holding lock during this operation\n+    assert !fsd.getFSNamesystem().hasReadLock();\n+    assert !fsd.getFSNamesystem().hasWriteLock();\n     if (ezKeyName \u003d\u003d null) {\n       return null;\n     }\n     long generateEDEKStartTime \u003d monotonicNow();\n     // Generate EDEK with login user (hdfs) so that KMS does not need\n     // an extra proxy configuration allowing hdfs to proxy its clients and\n     // KMS does not need configuration to allow non-hdfs user GENERATE_EEK\n     // operation.\n     EncryptedKeyVersion edek \u003d SecurityUtil.doAsLoginUser(\n         new PrivilegedExceptionAction\u003cEncryptedKeyVersion\u003e() {\n           @Override\n           public EncryptedKeyVersion run() throws IOException {\n             try {\n               return fsd.getProvider().generateEncryptedKey(ezKeyName);\n             } catch (GeneralSecurityException e) {\n               throw new IOException(e);\n             }\n           }\n         });\n     long generateEDEKTime \u003d monotonicNow() - generateEDEKStartTime;\n     NameNode.getNameNodeMetrics().addGenerateEDEKTime(generateEDEKTime);\n     Preconditions.checkNotNull(edek);\n     return edek;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static EncryptedKeyVersion generateEncryptedDataEncryptionKey(\n      final FSDirectory fsd, final String ezKeyName) throws IOException {\n    // must not be holding lock during this operation\n    assert !fsd.getFSNamesystem().hasReadLock();\n    assert !fsd.getFSNamesystem().hasWriteLock();\n    if (ezKeyName \u003d\u003d null) {\n      return null;\n    }\n    long generateEDEKStartTime \u003d monotonicNow();\n    // Generate EDEK with login user (hdfs) so that KMS does not need\n    // an extra proxy configuration allowing hdfs to proxy its clients and\n    // KMS does not need configuration to allow non-hdfs user GENERATE_EEK\n    // operation.\n    EncryptedKeyVersion edek \u003d SecurityUtil.doAsLoginUser(\n        new PrivilegedExceptionAction\u003cEncryptedKeyVersion\u003e() {\n          @Override\n          public EncryptedKeyVersion run() throws IOException {\n            try {\n              return fsd.getProvider().generateEncryptedKey(ezKeyName);\n            } catch (GeneralSecurityException e) {\n              throw new IOException(e);\n            }\n          }\n        });\n    long generateEDEKTime \u003d monotonicNow() - generateEDEKStartTime;\n    NameNode.getNameNodeMetrics().addGenerateEDEKTime(generateEDEKTime);\n    Preconditions.checkNotNull(edek);\n    return edek;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirEncryptionZoneOp.java",
          "extendedDetails": {
            "oldValue": "[static]",
            "newValue": "[private, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-10939. Reduce performance penalty of encryption zones. Contributed by Daryn sharp.\n",
          "commitDate": "06/10/16 1:11 PM",
          "commitName": "f32e9fc8f7150f0e889c0774b3ad712af26fbd65",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "30/09/16 6:44 AM",
          "commitNameOld": "0670149c88852cd7c4d6774bff06c7c588558739",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 6.27,
          "commitsBetweenForRepo": 48,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,29 @@\n-  static EncryptedKeyVersion generateEncryptedDataEncryptionKey(\n+  private static EncryptedKeyVersion generateEncryptedDataEncryptionKey(\n       final FSDirectory fsd, final String ezKeyName) throws IOException {\n+    // must not be holding lock during this operation\n+    assert !fsd.getFSNamesystem().hasReadLock();\n+    assert !fsd.getFSNamesystem().hasWriteLock();\n     if (ezKeyName \u003d\u003d null) {\n       return null;\n     }\n     long generateEDEKStartTime \u003d monotonicNow();\n     // Generate EDEK with login user (hdfs) so that KMS does not need\n     // an extra proxy configuration allowing hdfs to proxy its clients and\n     // KMS does not need configuration to allow non-hdfs user GENERATE_EEK\n     // operation.\n     EncryptedKeyVersion edek \u003d SecurityUtil.doAsLoginUser(\n         new PrivilegedExceptionAction\u003cEncryptedKeyVersion\u003e() {\n           @Override\n           public EncryptedKeyVersion run() throws IOException {\n             try {\n               return fsd.getProvider().generateEncryptedKey(ezKeyName);\n             } catch (GeneralSecurityException e) {\n               throw new IOException(e);\n             }\n           }\n         });\n     long generateEDEKTime \u003d monotonicNow() - generateEDEKStartTime;\n     NameNode.getNameNodeMetrics().addGenerateEDEKTime(generateEDEKTime);\n     Preconditions.checkNotNull(edek);\n     return edek;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static EncryptedKeyVersion generateEncryptedDataEncryptionKey(\n      final FSDirectory fsd, final String ezKeyName) throws IOException {\n    // must not be holding lock during this operation\n    assert !fsd.getFSNamesystem().hasReadLock();\n    assert !fsd.getFSNamesystem().hasWriteLock();\n    if (ezKeyName \u003d\u003d null) {\n      return null;\n    }\n    long generateEDEKStartTime \u003d monotonicNow();\n    // Generate EDEK with login user (hdfs) so that KMS does not need\n    // an extra proxy configuration allowing hdfs to proxy its clients and\n    // KMS does not need configuration to allow non-hdfs user GENERATE_EEK\n    // operation.\n    EncryptedKeyVersion edek \u003d SecurityUtil.doAsLoginUser(\n        new PrivilegedExceptionAction\u003cEncryptedKeyVersion\u003e() {\n          @Override\n          public EncryptedKeyVersion run() throws IOException {\n            try {\n              return fsd.getProvider().generateEncryptedKey(ezKeyName);\n            } catch (GeneralSecurityException e) {\n              throw new IOException(e);\n            }\n          }\n        });\n    long generateEDEKTime \u003d monotonicNow() - generateEDEKStartTime;\n    NameNode.getNameNodeMetrics().addGenerateEDEKTime(generateEDEKTime);\n    Preconditions.checkNotNull(edek);\n    return edek;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirEncryptionZoneOp.java",
          "extendedDetails": {}
        }
      ]
    },
    "ec289bbeceff064ad24e189db20a3e0a296822c1": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10643. Namenode should use loginUser(hdfs) to generateEncryptedKey. Contributed by Xiaoyu Yao.\n",
      "commitDate": "10/08/16 3:49 PM",
      "commitName": "ec289bbeceff064ad24e189db20a3e0a296822c1",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "10/08/16 3:47 PM",
      "commitNameOld": "fdafd0cb4f1626ee41539f4b80711c4e78e3e16c",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,26 @@\n   static EncryptedKeyVersion generateEncryptedDataEncryptionKey(\n       final FSDirectory fsd, final String ezKeyName) throws IOException {\n     if (ezKeyName \u003d\u003d null) {\n       return null;\n     }\n-    EncryptedKeyVersion edek \u003d null;\n     long generateEDEKStartTime \u003d monotonicNow();\n-    try {\n-      edek \u003d fsd.getProvider().generateEncryptedKey(ezKeyName);\n-    } catch (GeneralSecurityException e) {\n-      throw new IOException(e);\n-    }\n+    // Generate EDEK with login user (hdfs) so that KMS does not need\n+    // an extra proxy configuration allowing hdfs to proxy its clients and\n+    // KMS does not need configuration to allow non-hdfs user GENERATE_EEK\n+    // operation.\n+    EncryptedKeyVersion edek \u003d SecurityUtil.doAsLoginUser(\n+        new PrivilegedExceptionAction\u003cEncryptedKeyVersion\u003e() {\n+          @Override\n+          public EncryptedKeyVersion run() throws IOException {\n+            try {\n+              return fsd.getProvider().generateEncryptedKey(ezKeyName);\n+            } catch (GeneralSecurityException e) {\n+              throw new IOException(e);\n+            }\n+          }\n+        });\n     long generateEDEKTime \u003d monotonicNow() - generateEDEKStartTime;\n     NameNode.getNameNodeMetrics().addGenerateEDEKTime(generateEDEKTime);\n     Preconditions.checkNotNull(edek);\n     return edek;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static EncryptedKeyVersion generateEncryptedDataEncryptionKey(\n      final FSDirectory fsd, final String ezKeyName) throws IOException {\n    if (ezKeyName \u003d\u003d null) {\n      return null;\n    }\n    long generateEDEKStartTime \u003d monotonicNow();\n    // Generate EDEK with login user (hdfs) so that KMS does not need\n    // an extra proxy configuration allowing hdfs to proxy its clients and\n    // KMS does not need configuration to allow non-hdfs user GENERATE_EEK\n    // operation.\n    EncryptedKeyVersion edek \u003d SecurityUtil.doAsLoginUser(\n        new PrivilegedExceptionAction\u003cEncryptedKeyVersion\u003e() {\n          @Override\n          public EncryptedKeyVersion run() throws IOException {\n            try {\n              return fsd.getProvider().generateEncryptedKey(ezKeyName);\n            } catch (GeneralSecurityException e) {\n              throw new IOException(e);\n            }\n          }\n        });\n    long generateEDEKTime \u003d monotonicNow() - generateEDEKStartTime;\n    NameNode.getNameNodeMetrics().addGenerateEDEKTime(generateEDEKTime);\n    Preconditions.checkNotNull(edek);\n    return edek;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirEncryptionZoneOp.java",
      "extendedDetails": {}
    },
    "fdafd0cb4f1626ee41539f4b80711c4e78e3e16c": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"Namenode should use loginUser(hdfs) to generateEncryptedKey. Contributed by Xiaoyu Yao.\"\n\nThis reverts commit 9f816d7ca74c6e6c43ecfc8770228c518620c9cb.\n",
      "commitDate": "10/08/16 3:47 PM",
      "commitName": "fdafd0cb4f1626ee41539f4b80711c4e78e3e16c",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "10/08/16 3:14 PM",
      "commitNameOld": "9f816d7ca74c6e6c43ecfc8770228c518620c9cb",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,17 @@\n   static EncryptedKeyVersion generateEncryptedDataEncryptionKey(\n       final FSDirectory fsd, final String ezKeyName) throws IOException {\n     if (ezKeyName \u003d\u003d null) {\n       return null;\n     }\n+    EncryptedKeyVersion edek \u003d null;\n     long generateEDEKStartTime \u003d monotonicNow();\n-    // Generate EDEK with login user (hdfs) so that KMS does not need\n-    // an extra proxy configuration allowing hdfs to proxy its clients and\n-    // KMS does not need configuration to allow non-hdfs user GENERATE_EEK\n-    // operation.\n-    EncryptedKeyVersion edek \u003d SecurityUtil.doAsLoginUser(\n-        new PrivilegedExceptionAction\u003cEncryptedKeyVersion\u003e() {\n-          @Override\n-          public EncryptedKeyVersion run() throws IOException {\n-            try {\n-              return fsd.getProvider().generateEncryptedKey(ezKeyName);\n-            } catch (GeneralSecurityException e) {\n-              throw new IOException(e);\n-            }\n-          }\n-        });\n+    try {\n+      edek \u003d fsd.getProvider().generateEncryptedKey(ezKeyName);\n+    } catch (GeneralSecurityException e) {\n+      throw new IOException(e);\n+    }\n     long generateEDEKTime \u003d monotonicNow() - generateEDEKStartTime;\n     NameNode.getNameNodeMetrics().addGenerateEDEKTime(generateEDEKTime);\n     Preconditions.checkNotNull(edek);\n     return edek;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static EncryptedKeyVersion generateEncryptedDataEncryptionKey(\n      final FSDirectory fsd, final String ezKeyName) throws IOException {\n    if (ezKeyName \u003d\u003d null) {\n      return null;\n    }\n    EncryptedKeyVersion edek \u003d null;\n    long generateEDEKStartTime \u003d monotonicNow();\n    try {\n      edek \u003d fsd.getProvider().generateEncryptedKey(ezKeyName);\n    } catch (GeneralSecurityException e) {\n      throw new IOException(e);\n    }\n    long generateEDEKTime \u003d monotonicNow() - generateEDEKStartTime;\n    NameNode.getNameNodeMetrics().addGenerateEDEKTime(generateEDEKTime);\n    Preconditions.checkNotNull(edek);\n    return edek;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirEncryptionZoneOp.java",
      "extendedDetails": {}
    },
    "9f816d7ca74c6e6c43ecfc8770228c518620c9cb": {
      "type": "Ybodychange",
      "commitMessage": "Namenode should use loginUser(hdfs) to generateEncryptedKey. Contributed by Xiaoyu Yao.\n",
      "commitDate": "10/08/16 3:14 PM",
      "commitName": "9f816d7ca74c6e6c43ecfc8770228c518620c9cb",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "28/07/16 4:07 PM",
      "commitNameOld": "ce3d68e9c3512b6f370e7597c411560d8a61052d",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 12.96,
      "commitsBetweenForRepo": 96,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,26 @@\n   static EncryptedKeyVersion generateEncryptedDataEncryptionKey(\n       final FSDirectory fsd, final String ezKeyName) throws IOException {\n     if (ezKeyName \u003d\u003d null) {\n       return null;\n     }\n-    EncryptedKeyVersion edek \u003d null;\n     long generateEDEKStartTime \u003d monotonicNow();\n-    try {\n-      edek \u003d fsd.getProvider().generateEncryptedKey(ezKeyName);\n-    } catch (GeneralSecurityException e) {\n-      throw new IOException(e);\n-    }\n+    // Generate EDEK with login user (hdfs) so that KMS does not need\n+    // an extra proxy configuration allowing hdfs to proxy its clients and\n+    // KMS does not need configuration to allow non-hdfs user GENERATE_EEK\n+    // operation.\n+    EncryptedKeyVersion edek \u003d SecurityUtil.doAsLoginUser(\n+        new PrivilegedExceptionAction\u003cEncryptedKeyVersion\u003e() {\n+          @Override\n+          public EncryptedKeyVersion run() throws IOException {\n+            try {\n+              return fsd.getProvider().generateEncryptedKey(ezKeyName);\n+            } catch (GeneralSecurityException e) {\n+              throw new IOException(e);\n+            }\n+          }\n+        });\n     long generateEDEKTime \u003d monotonicNow() - generateEDEKStartTime;\n     NameNode.getNameNodeMetrics().addGenerateEDEKTime(generateEDEKTime);\n     Preconditions.checkNotNull(edek);\n     return edek;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static EncryptedKeyVersion generateEncryptedDataEncryptionKey(\n      final FSDirectory fsd, final String ezKeyName) throws IOException {\n    if (ezKeyName \u003d\u003d null) {\n      return null;\n    }\n    long generateEDEKStartTime \u003d monotonicNow();\n    // Generate EDEK with login user (hdfs) so that KMS does not need\n    // an extra proxy configuration allowing hdfs to proxy its clients and\n    // KMS does not need configuration to allow non-hdfs user GENERATE_EEK\n    // operation.\n    EncryptedKeyVersion edek \u003d SecurityUtil.doAsLoginUser(\n        new PrivilegedExceptionAction\u003cEncryptedKeyVersion\u003e() {\n          @Override\n          public EncryptedKeyVersion run() throws IOException {\n            try {\n              return fsd.getProvider().generateEncryptedKey(ezKeyName);\n            } catch (GeneralSecurityException e) {\n              throw new IOException(e);\n            }\n          }\n        });\n    long generateEDEKTime \u003d monotonicNow() - generateEDEKStartTime;\n    NameNode.getNameNodeMetrics().addGenerateEDEKTime(generateEDEKTime);\n    Preconditions.checkNotNull(edek);\n    return edek;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirEncryptionZoneOp.java",
      "extendedDetails": {}
    },
    "ce3d68e9c3512b6f370e7597c411560d8a61052d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10676. Add namenode metric to measure time spent in generating EDEKs. Contributed by Hanisha Koneru.\n",
      "commitDate": "28/07/16 4:07 PM",
      "commitName": "ce3d68e9c3512b6f370e7597c411560d8a61052d",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "13/06/16 11:50 AM",
      "commitNameOld": "709a814fe0153e86a37806796ea27c8252d9c6d1",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 45.18,
      "commitsBetweenForRepo": 429,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,17 @@\n   static EncryptedKeyVersion generateEncryptedDataEncryptionKey(\n       final FSDirectory fsd, final String ezKeyName) throws IOException {\n     if (ezKeyName \u003d\u003d null) {\n       return null;\n     }\n     EncryptedKeyVersion edek \u003d null;\n+    long generateEDEKStartTime \u003d monotonicNow();\n     try {\n       edek \u003d fsd.getProvider().generateEncryptedKey(ezKeyName);\n     } catch (GeneralSecurityException e) {\n       throw new IOException(e);\n     }\n+    long generateEDEKTime \u003d monotonicNow() - generateEDEKStartTime;\n+    NameNode.getNameNodeMetrics().addGenerateEDEKTime(generateEDEKTime);\n     Preconditions.checkNotNull(edek);\n     return edek;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static EncryptedKeyVersion generateEncryptedDataEncryptionKey(\n      final FSDirectory fsd, final String ezKeyName) throws IOException {\n    if (ezKeyName \u003d\u003d null) {\n      return null;\n    }\n    EncryptedKeyVersion edek \u003d null;\n    long generateEDEKStartTime \u003d monotonicNow();\n    try {\n      edek \u003d fsd.getProvider().generateEncryptedKey(ezKeyName);\n    } catch (GeneralSecurityException e) {\n      throw new IOException(e);\n    }\n    long generateEDEKTime \u003d monotonicNow() - generateEDEKStartTime;\n    NameNode.getNameNodeMetrics().addGenerateEDEKTime(generateEDEKTime);\n    Preconditions.checkNotNull(edek);\n    return edek;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirEncryptionZoneOp.java",
      "extendedDetails": {}
    },
    "71a81b6257c0000475ad62eb69292a20d45d269c": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparametermetachange,Yparameterchange)",
      "commitMessage": "HDFS-7529. Consolidate encryption zone related implementation into a single class. Contributed by Rakesh R.\n",
      "commitDate": "24/09/15 8:34 AM",
      "commitName": "71a81b6257c0000475ad62eb69292a20d45d269c",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-7529. Consolidate encryption zone related implementation into a single class. Contributed by Rakesh R.\n",
          "commitDate": "24/09/15 8:34 AM",
          "commitName": "71a81b6257c0000475ad62eb69292a20d45d269c",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "24/09/15 8:12 AM",
          "commitNameOld": "97a08807ec328a6f455d941fe3d9a469d885caa6",
          "commitAuthorOld": "Zhihai Xu",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,14 @@\n-  private EncryptedKeyVersion generateEncryptedDataEncryptionKey(String\n-      ezKeyName) throws IOException {\n+  static EncryptedKeyVersion generateEncryptedDataEncryptionKey(\n+      final FSDirectory fsd, final String ezKeyName) throws IOException {\n     if (ezKeyName \u003d\u003d null) {\n       return null;\n     }\n     EncryptedKeyVersion edek \u003d null;\n     try {\n-      edek \u003d provider.generateEncryptedKey(ezKeyName);\n+      edek \u003d fsd.getProvider().generateEncryptedKey(ezKeyName);\n     } catch (GeneralSecurityException e) {\n       throw new IOException(e);\n     }\n     Preconditions.checkNotNull(edek);\n     return edek;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static EncryptedKeyVersion generateEncryptedDataEncryptionKey(\n      final FSDirectory fsd, final String ezKeyName) throws IOException {\n    if (ezKeyName \u003d\u003d null) {\n      return null;\n    }\n    EncryptedKeyVersion edek \u003d null;\n    try {\n      edek \u003d fsd.getProvider().generateEncryptedKey(ezKeyName);\n    } catch (GeneralSecurityException e) {\n      throw new IOException(e);\n    }\n    Preconditions.checkNotNull(edek);\n    return edek;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirEncryptionZoneOp.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirEncryptionZoneOp.java",
            "oldMethodName": "generateEncryptedDataEncryptionKey",
            "newMethodName": "generateEncryptedDataEncryptionKey"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-7529. Consolidate encryption zone related implementation into a single class. Contributed by Rakesh R.\n",
          "commitDate": "24/09/15 8:34 AM",
          "commitName": "71a81b6257c0000475ad62eb69292a20d45d269c",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "24/09/15 8:12 AM",
          "commitNameOld": "97a08807ec328a6f455d941fe3d9a469d885caa6",
          "commitAuthorOld": "Zhihai Xu",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,14 @@\n-  private EncryptedKeyVersion generateEncryptedDataEncryptionKey(String\n-      ezKeyName) throws IOException {\n+  static EncryptedKeyVersion generateEncryptedDataEncryptionKey(\n+      final FSDirectory fsd, final String ezKeyName) throws IOException {\n     if (ezKeyName \u003d\u003d null) {\n       return null;\n     }\n     EncryptedKeyVersion edek \u003d null;\n     try {\n-      edek \u003d provider.generateEncryptedKey(ezKeyName);\n+      edek \u003d fsd.getProvider().generateEncryptedKey(ezKeyName);\n     } catch (GeneralSecurityException e) {\n       throw new IOException(e);\n     }\n     Preconditions.checkNotNull(edek);\n     return edek;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static EncryptedKeyVersion generateEncryptedDataEncryptionKey(\n      final FSDirectory fsd, final String ezKeyName) throws IOException {\n    if (ezKeyName \u003d\u003d null) {\n      return null;\n    }\n    EncryptedKeyVersion edek \u003d null;\n    try {\n      edek \u003d fsd.getProvider().generateEncryptedKey(ezKeyName);\n    } catch (GeneralSecurityException e) {\n      throw new IOException(e);\n    }\n    Preconditions.checkNotNull(edek);\n    return edek;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirEncryptionZoneOp.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7529. Consolidate encryption zone related implementation into a single class. Contributed by Rakesh R.\n",
          "commitDate": "24/09/15 8:34 AM",
          "commitName": "71a81b6257c0000475ad62eb69292a20d45d269c",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "24/09/15 8:12 AM",
          "commitNameOld": "97a08807ec328a6f455d941fe3d9a469d885caa6",
          "commitAuthorOld": "Zhihai Xu",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,14 @@\n-  private EncryptedKeyVersion generateEncryptedDataEncryptionKey(String\n-      ezKeyName) throws IOException {\n+  static EncryptedKeyVersion generateEncryptedDataEncryptionKey(\n+      final FSDirectory fsd, final String ezKeyName) throws IOException {\n     if (ezKeyName \u003d\u003d null) {\n       return null;\n     }\n     EncryptedKeyVersion edek \u003d null;\n     try {\n-      edek \u003d provider.generateEncryptedKey(ezKeyName);\n+      edek \u003d fsd.getProvider().generateEncryptedKey(ezKeyName);\n     } catch (GeneralSecurityException e) {\n       throw new IOException(e);\n     }\n     Preconditions.checkNotNull(edek);\n     return edek;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static EncryptedKeyVersion generateEncryptedDataEncryptionKey(\n      final FSDirectory fsd, final String ezKeyName) throws IOException {\n    if (ezKeyName \u003d\u003d null) {\n      return null;\n    }\n    EncryptedKeyVersion edek \u003d null;\n    try {\n      edek \u003d fsd.getProvider().generateEncryptedKey(ezKeyName);\n    } catch (GeneralSecurityException e) {\n      throw new IOException(e);\n    }\n    Preconditions.checkNotNull(edek);\n    return edek;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirEncryptionZoneOp.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "HDFS-7529. Consolidate encryption zone related implementation into a single class. Contributed by Rakesh R.\n",
          "commitDate": "24/09/15 8:34 AM",
          "commitName": "71a81b6257c0000475ad62eb69292a20d45d269c",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "24/09/15 8:12 AM",
          "commitNameOld": "97a08807ec328a6f455d941fe3d9a469d885caa6",
          "commitAuthorOld": "Zhihai Xu",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,14 @@\n-  private EncryptedKeyVersion generateEncryptedDataEncryptionKey(String\n-      ezKeyName) throws IOException {\n+  static EncryptedKeyVersion generateEncryptedDataEncryptionKey(\n+      final FSDirectory fsd, final String ezKeyName) throws IOException {\n     if (ezKeyName \u003d\u003d null) {\n       return null;\n     }\n     EncryptedKeyVersion edek \u003d null;\n     try {\n-      edek \u003d provider.generateEncryptedKey(ezKeyName);\n+      edek \u003d fsd.getProvider().generateEncryptedKey(ezKeyName);\n     } catch (GeneralSecurityException e) {\n       throw new IOException(e);\n     }\n     Preconditions.checkNotNull(edek);\n     return edek;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static EncryptedKeyVersion generateEncryptedDataEncryptionKey(\n      final FSDirectory fsd, final String ezKeyName) throws IOException {\n    if (ezKeyName \u003d\u003d null) {\n      return null;\n    }\n    EncryptedKeyVersion edek \u003d null;\n    try {\n      edek \u003d fsd.getProvider().generateEncryptedKey(ezKeyName);\n    } catch (GeneralSecurityException e) {\n      throw new IOException(e);\n    }\n    Preconditions.checkNotNull(edek);\n    return edek;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirEncryptionZoneOp.java",
          "extendedDetails": {
            "oldValue": "[ezKeyName-String]",
            "newValue": "[fsd-FSDirectory(modifiers-final), ezKeyName-String(modifiers-final)]"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7529. Consolidate encryption zone related implementation into a single class. Contributed by Rakesh R.\n",
          "commitDate": "24/09/15 8:34 AM",
          "commitName": "71a81b6257c0000475ad62eb69292a20d45d269c",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "24/09/15 8:12 AM",
          "commitNameOld": "97a08807ec328a6f455d941fe3d9a469d885caa6",
          "commitAuthorOld": "Zhihai Xu",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,14 @@\n-  private EncryptedKeyVersion generateEncryptedDataEncryptionKey(String\n-      ezKeyName) throws IOException {\n+  static EncryptedKeyVersion generateEncryptedDataEncryptionKey(\n+      final FSDirectory fsd, final String ezKeyName) throws IOException {\n     if (ezKeyName \u003d\u003d null) {\n       return null;\n     }\n     EncryptedKeyVersion edek \u003d null;\n     try {\n-      edek \u003d provider.generateEncryptedKey(ezKeyName);\n+      edek \u003d fsd.getProvider().generateEncryptedKey(ezKeyName);\n     } catch (GeneralSecurityException e) {\n       throw new IOException(e);\n     }\n     Preconditions.checkNotNull(edek);\n     return edek;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static EncryptedKeyVersion generateEncryptedDataEncryptionKey(\n      final FSDirectory fsd, final String ezKeyName) throws IOException {\n    if (ezKeyName \u003d\u003d null) {\n      return null;\n    }\n    EncryptedKeyVersion edek \u003d null;\n    try {\n      edek \u003d fsd.getProvider().generateEncryptedKey(ezKeyName);\n    } catch (GeneralSecurityException e) {\n      throw new IOException(e);\n    }\n    Preconditions.checkNotNull(edek);\n    return edek;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirEncryptionZoneOp.java",
          "extendedDetails": {
            "oldValue": "[ezKeyName-String]",
            "newValue": "[fsd-FSDirectory(modifiers-final), ezKeyName-String(modifiers-final)]"
          }
        }
      ]
    }
  }
}