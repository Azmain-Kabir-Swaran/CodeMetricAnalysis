{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NMLeveldbStateStoreService.java",
  "functionName": "loadUserLocalizedResources",
  "functionId": "loadUserLocalizedResources___iter-LeveldbIterator__keyPrefix-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/recovery/NMLeveldbStateStoreService.java",
  "functionStartLine": 951,
  "functionEndLine": 994,
  "numCommitsSeen": 43,
  "timeTaken": 2502,
  "changeHistory": [
    "250b50018e8c94d8ca83ff981b01f26bb68c0842",
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
    "66598697a6e777615334ebde5ba7738135da83ae"
  ],
  "changeHistoryShort": {
    "250b50018e8c94d8ca83ff981b01f26bb68c0842": "Ybodychange",
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": "Ybodychange",
    "66598697a6e777615334ebde5ba7738135da83ae": "Yintroduced"
  },
  "changeHistoryDetails": {
    "250b50018e8c94d8ca83ff981b01f26bb68c0842": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8680. YARN NM: Implement Iterable Abstraction for LocalResourceTracker state. Contributed by Pradeep Ambati\n",
      "commitDate": "13/09/18 11:28 AM",
      "commitName": "250b50018e8c94d8ca83ff981b01f26bb68c0842",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "20/08/18 8:14 AM",
      "commitNameOld": "65e7469712be6cf393e29ef73cc94727eec81227",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 24.13,
      "commitsBetweenForRepo": 188,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,44 @@\n   private RecoveredUserResources loadUserLocalizedResources(\n       LeveldbIterator iter, String keyPrefix) throws IOException {\n     RecoveredUserResources userResources \u003d new RecoveredUserResources();\n+\n+    // seek through App cache\n+    String appCachePrefix \u003d keyPrefix + LOCALIZATION_APPCACHE_SUFFIX;\n+    iter.seek(bytes(appCachePrefix));\n     while (iter.hasNext()) {\n-      Entry\u003cbyte[],byte[]\u003e entry \u003d iter.peekNext();\n+      Entry\u003cbyte[], byte[]\u003e entry \u003d iter.peekNext();\n       String key \u003d asString(entry.getKey());\n-      if (!key.startsWith(keyPrefix)) {\n+\n+      if (!key.startsWith(appCachePrefix)) {\n         break;\n       }\n \n-      if (key.startsWith(LOCALIZATION_FILECACHE_SUFFIX, keyPrefix.length())) {\n-        userResources.privateTrackerState \u003d loadResourceTrackerState(iter,\n-            keyPrefix + LOCALIZATION_FILECACHE_SUFFIX);\n-      } else if (key.startsWith(LOCALIZATION_APPCACHE_SUFFIX,\n-          keyPrefix.length())) {\n-        int appIdStartPos \u003d keyPrefix.length() +\n-            LOCALIZATION_APPCACHE_SUFFIX.length();\n-        int appIdEndPos \u003d key.indexOf(\u0027/\u0027, appIdStartPos);\n-        if (appIdEndPos \u003c 0) {\n-          throw new IOException(\"Unable to determine appID in resource key: \"\n-              + key);\n-        }\n-        ApplicationId appId \u003d ApplicationId.fromString(\n-            key.substring(appIdStartPos, appIdEndPos));\n-        userResources.appTrackerStates.put(appId,\n-            loadResourceTrackerState(iter, key.substring(0, appIdEndPos+1)));\n-      } else {\n-        throw new IOException(\"Unexpected user resource key \" + key);\n+      int appIdStartPos \u003d appCachePrefix.length();\n+      int appIdEndPos \u003d key.indexOf(\u0027/\u0027, appIdStartPos);\n+      if (appIdEndPos \u003c 0) {\n+        throw new IOException(\"Unable to determine appID in resource key: \"\n+            + key);\n       }\n+      ApplicationId appId \u003d ApplicationId.fromString(\n+          key.substring(appIdStartPos, appIdEndPos));\n+      String trackerStateKey \u003d key.substring(0, appIdEndPos+1);\n+      userResources.appTrackerStates.put(appId,\n+          loadResourceTrackerState(trackerStateKey));\n+      // Seek to next application\n+      seekPastPrefix(iter, trackerStateKey);\n     }\n+\n+    // File Cache\n+    String fileCachePrefix \u003d keyPrefix + LOCALIZATION_FILECACHE_SUFFIX;\n+    iter.seek(bytes(fileCachePrefix));\n+    Entry\u003cbyte[], byte[]\u003e entry \u003d iter.peekNext();\n+    String key \u003d asString(entry.getKey());\n+    if (key.startsWith(fileCachePrefix)) {\n+      userResources.privateTrackerState \u003d\n+          loadResourceTrackerState(fileCachePrefix);\n+    }\n+\n+    // seek to Next User.\n+    seekPastPrefix(iter, keyPrefix);\n     return userResources;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private RecoveredUserResources loadUserLocalizedResources(\n      LeveldbIterator iter, String keyPrefix) throws IOException {\n    RecoveredUserResources userResources \u003d new RecoveredUserResources();\n\n    // seek through App cache\n    String appCachePrefix \u003d keyPrefix + LOCALIZATION_APPCACHE_SUFFIX;\n    iter.seek(bytes(appCachePrefix));\n    while (iter.hasNext()) {\n      Entry\u003cbyte[], byte[]\u003e entry \u003d iter.peekNext();\n      String key \u003d asString(entry.getKey());\n\n      if (!key.startsWith(appCachePrefix)) {\n        break;\n      }\n\n      int appIdStartPos \u003d appCachePrefix.length();\n      int appIdEndPos \u003d key.indexOf(\u0027/\u0027, appIdStartPos);\n      if (appIdEndPos \u003c 0) {\n        throw new IOException(\"Unable to determine appID in resource key: \"\n            + key);\n      }\n      ApplicationId appId \u003d ApplicationId.fromString(\n          key.substring(appIdStartPos, appIdEndPos));\n      String trackerStateKey \u003d key.substring(0, appIdEndPos+1);\n      userResources.appTrackerStates.put(appId,\n          loadResourceTrackerState(trackerStateKey));\n      // Seek to next application\n      seekPastPrefix(iter, trackerStateKey);\n    }\n\n    // File Cache\n    String fileCachePrefix \u003d keyPrefix + LOCALIZATION_FILECACHE_SUFFIX;\n    iter.seek(bytes(fileCachePrefix));\n    Entry\u003cbyte[], byte[]\u003e entry \u003d iter.peekNext();\n    String key \u003d asString(entry.getKey());\n    if (key.startsWith(fileCachePrefix)) {\n      userResources.privateTrackerState \u003d\n          loadResourceTrackerState(fileCachePrefix);\n    }\n\n    // seek to Next User.\n    seekPastPrefix(iter, keyPrefix);\n    return userResources;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/recovery/NMLeveldbStateStoreService.java",
      "extendedDetails": {}
    },
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1942. Deprecate toString/fromString methods from ConverterUtils and move them to records classes like ContainerId/ApplicationId, etc. (wangda)\n",
      "commitDate": "14/06/16 3:06 PM",
      "commitName": "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "11/05/16 7:10 PM",
      "commitNameOld": "d464f4d1c4dec483852fc8c0496787cba0af8f57",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 33.83,
      "commitsBetweenForRepo": 231,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   private RecoveredUserResources loadUserLocalizedResources(\n       LeveldbIterator iter, String keyPrefix) throws IOException {\n     RecoveredUserResources userResources \u003d new RecoveredUserResources();\n     while (iter.hasNext()) {\n       Entry\u003cbyte[],byte[]\u003e entry \u003d iter.peekNext();\n       String key \u003d asString(entry.getKey());\n       if (!key.startsWith(keyPrefix)) {\n         break;\n       }\n \n       if (key.startsWith(LOCALIZATION_FILECACHE_SUFFIX, keyPrefix.length())) {\n         userResources.privateTrackerState \u003d loadResourceTrackerState(iter,\n             keyPrefix + LOCALIZATION_FILECACHE_SUFFIX);\n       } else if (key.startsWith(LOCALIZATION_APPCACHE_SUFFIX,\n           keyPrefix.length())) {\n         int appIdStartPos \u003d keyPrefix.length() +\n             LOCALIZATION_APPCACHE_SUFFIX.length();\n         int appIdEndPos \u003d key.indexOf(\u0027/\u0027, appIdStartPos);\n         if (appIdEndPos \u003c 0) {\n           throw new IOException(\"Unable to determine appID in resource key: \"\n               + key);\n         }\n-        ApplicationId appId \u003d ConverterUtils.toApplicationId(\n+        ApplicationId appId \u003d ApplicationId.fromString(\n             key.substring(appIdStartPos, appIdEndPos));\n         userResources.appTrackerStates.put(appId,\n             loadResourceTrackerState(iter, key.substring(0, appIdEndPos+1)));\n       } else {\n         throw new IOException(\"Unexpected user resource key \" + key);\n       }\n     }\n     return userResources;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private RecoveredUserResources loadUserLocalizedResources(\n      LeveldbIterator iter, String keyPrefix) throws IOException {\n    RecoveredUserResources userResources \u003d new RecoveredUserResources();\n    while (iter.hasNext()) {\n      Entry\u003cbyte[],byte[]\u003e entry \u003d iter.peekNext();\n      String key \u003d asString(entry.getKey());\n      if (!key.startsWith(keyPrefix)) {\n        break;\n      }\n\n      if (key.startsWith(LOCALIZATION_FILECACHE_SUFFIX, keyPrefix.length())) {\n        userResources.privateTrackerState \u003d loadResourceTrackerState(iter,\n            keyPrefix + LOCALIZATION_FILECACHE_SUFFIX);\n      } else if (key.startsWith(LOCALIZATION_APPCACHE_SUFFIX,\n          keyPrefix.length())) {\n        int appIdStartPos \u003d keyPrefix.length() +\n            LOCALIZATION_APPCACHE_SUFFIX.length();\n        int appIdEndPos \u003d key.indexOf(\u0027/\u0027, appIdStartPos);\n        if (appIdEndPos \u003c 0) {\n          throw new IOException(\"Unable to determine appID in resource key: \"\n              + key);\n        }\n        ApplicationId appId \u003d ApplicationId.fromString(\n            key.substring(appIdStartPos, appIdEndPos));\n        userResources.appTrackerStates.put(appId,\n            loadResourceTrackerState(iter, key.substring(0, appIdEndPos+1)));\n      } else {\n        throw new IOException(\"Unexpected user resource key \" + key);\n      }\n    }\n    return userResources;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/recovery/NMLeveldbStateStoreService.java",
      "extendedDetails": {}
    },
    "66598697a6e777615334ebde5ba7738135da83ae": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1338. Recover localized resource cache state upon nodemanager restart (Contributed by Jason Lowe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1598640 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/05/14 8:37 AM",
      "commitName": "66598697a6e777615334ebde5ba7738135da83ae",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,32 @@\n+  private RecoveredUserResources loadUserLocalizedResources(\n+      LeveldbIterator iter, String keyPrefix) throws IOException {\n+    RecoveredUserResources userResources \u003d new RecoveredUserResources();\n+    while (iter.hasNext()) {\n+      Entry\u003cbyte[],byte[]\u003e entry \u003d iter.peekNext();\n+      String key \u003d asString(entry.getKey());\n+      if (!key.startsWith(keyPrefix)) {\n+        break;\n+      }\n+\n+      if (key.startsWith(LOCALIZATION_FILECACHE_SUFFIX, keyPrefix.length())) {\n+        userResources.privateTrackerState \u003d loadResourceTrackerState(iter,\n+            keyPrefix + LOCALIZATION_FILECACHE_SUFFIX);\n+      } else if (key.startsWith(LOCALIZATION_APPCACHE_SUFFIX,\n+          keyPrefix.length())) {\n+        int appIdStartPos \u003d keyPrefix.length() +\n+            LOCALIZATION_APPCACHE_SUFFIX.length();\n+        int appIdEndPos \u003d key.indexOf(\u0027/\u0027, appIdStartPos);\n+        if (appIdEndPos \u003c 0) {\n+          throw new IOException(\"Unable to determine appID in resource key: \"\n+              + key);\n+        }\n+        ApplicationId appId \u003d ConverterUtils.toApplicationId(\n+            key.substring(appIdStartPos, appIdEndPos));\n+        userResources.appTrackerStates.put(appId,\n+            loadResourceTrackerState(iter, key.substring(0, appIdEndPos+1)));\n+      } else {\n+        throw new IOException(\"Unexpected user resource key \" + key);\n+      }\n+    }\n+    return userResources;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private RecoveredUserResources loadUserLocalizedResources(\n      LeveldbIterator iter, String keyPrefix) throws IOException {\n    RecoveredUserResources userResources \u003d new RecoveredUserResources();\n    while (iter.hasNext()) {\n      Entry\u003cbyte[],byte[]\u003e entry \u003d iter.peekNext();\n      String key \u003d asString(entry.getKey());\n      if (!key.startsWith(keyPrefix)) {\n        break;\n      }\n\n      if (key.startsWith(LOCALIZATION_FILECACHE_SUFFIX, keyPrefix.length())) {\n        userResources.privateTrackerState \u003d loadResourceTrackerState(iter,\n            keyPrefix + LOCALIZATION_FILECACHE_SUFFIX);\n      } else if (key.startsWith(LOCALIZATION_APPCACHE_SUFFIX,\n          keyPrefix.length())) {\n        int appIdStartPos \u003d keyPrefix.length() +\n            LOCALIZATION_APPCACHE_SUFFIX.length();\n        int appIdEndPos \u003d key.indexOf(\u0027/\u0027, appIdStartPos);\n        if (appIdEndPos \u003c 0) {\n          throw new IOException(\"Unable to determine appID in resource key: \"\n              + key);\n        }\n        ApplicationId appId \u003d ConverterUtils.toApplicationId(\n            key.substring(appIdStartPos, appIdEndPos));\n        userResources.appTrackerStates.put(appId,\n            loadResourceTrackerState(iter, key.substring(0, appIdEndPos+1)));\n      } else {\n        throw new IOException(\"Unexpected user resource key \" + key);\n      }\n    }\n    return userResources;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/recovery/NMLeveldbStateStoreService.java"
    }
  }
}