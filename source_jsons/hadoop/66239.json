{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SLSRunner.java",
  "functionName": "startAM",
  "functionId": "startAM",
  "sourceFilePath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java",
  "functionStartLine": 429,
  "functionEndLine": 452,
  "numCommitsSeen": 40,
  "timeTaken": 1704,
  "changeHistory": [
    "475f933b41276b1bdeeec09e30369120f7eccdb8",
    "de69d6e81128470dd5d2fd865d4b3a79188f740b",
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b"
  ],
  "changeHistoryShort": {
    "475f933b41276b1bdeeec09e30369120f7eccdb8": "Ybodychange",
    "de69d6e81128470dd5d2fd865d4b3a79188f740b": "Ybodychange",
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "475f933b41276b1bdeeec09e30369120f7eccdb8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6423. Queue metrics doesn\u0027t work for Fair Scheduler in SLS (yufeigu via rkanter)\n",
      "commitDate": "25/04/17 4:26 PM",
      "commitName": "475f933b41276b1bdeeec09e30369120f7eccdb8",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "20/04/17 9:54 PM",
      "commitNameOld": "de69d6e81128470dd5d2fd865d4b3a79188f740b",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 4.77,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,24 @@\n   private void startAM() throws YarnException, IOException {\n-    // application/container configuration\n-    int heartbeatInterval \u003d\n-        getConf().getInt(SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS,\n-            SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS_DEFAULT);\n-    int containerMemoryMB \u003d\n-        getConf().getInt(SLSConfiguration.CONTAINER_MEMORY_MB,\n-            SLSConfiguration.CONTAINER_MEMORY_MB_DEFAULT);\n-    int containerVCores \u003d getConf().getInt(SLSConfiguration.CONTAINER_VCORES,\n-        SLSConfiguration.CONTAINER_VCORES_DEFAULT);\n-    Resource containerResource \u003d\n-        BuilderUtils.newResource(containerMemoryMB, containerVCores);\n-\n-    // application workload\n     switch (inputType) {\n     case SLS:\n-      startAMFromSLSTraces(containerResource, heartbeatInterval);\n+      for (String inputTrace : inputTraces) {\n+        startAMFromSLSTrace(inputTrace);\n+      }\n       break;\n     case RUMEN:\n-      startAMFromRumenTraces(containerResource, heartbeatInterval);\n+      long baselineTimeMS \u003d 0;\n+      for (String inputTrace : inputTraces) {\n+        startAMFromRumenTrace(inputTrace, baselineTimeMS);\n+      }\n       break;\n     case SYNTH:\n-      startAMFromSynthGenerator(heartbeatInterval);\n+      startAMFromSynthGenerator();\n       break;\n     default:\n       throw new YarnException(\"Input configuration not recognized, \"\n           + \"trace type should be SLS, RUMEN, or SYNTH\");\n     }\n+\n     numAMs \u003d amMap.size();\n     remainingApps \u003d numAMs;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void startAM() throws YarnException, IOException {\n    switch (inputType) {\n    case SLS:\n      for (String inputTrace : inputTraces) {\n        startAMFromSLSTrace(inputTrace);\n      }\n      break;\n    case RUMEN:\n      long baselineTimeMS \u003d 0;\n      for (String inputTrace : inputTraces) {\n        startAMFromRumenTrace(inputTrace, baselineTimeMS);\n      }\n      break;\n    case SYNTH:\n      startAMFromSynthGenerator();\n      break;\n    default:\n      throw new YarnException(\"Input configuration not recognized, \"\n          + \"trace type should be SLS, RUMEN, or SYNTH\");\n    }\n\n    numAMs \u003d amMap.size();\n    remainingApps \u003d numAMs;\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java",
      "extendedDetails": {}
    },
    "de69d6e81128470dd5d2fd865d4b3a79188f740b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6363. Extending SLS: Synthetic Load Generator. (Carlo Curino via wangda)\n",
      "commitDate": "20/04/17 9:54 PM",
      "commitName": "de69d6e81128470dd5d2fd865d4b3a79188f740b",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "29/03/17 4:18 PM",
      "commitNameOld": "6a5516c2381f107d96b8326939514de3c6e53d3d",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 22.23,
      "commitsBetweenForRepo": 128,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,31 @@\n   private void startAM() throws YarnException, IOException {\n     // application/container configuration\n-    int heartbeatInterval \u003d conf.getInt(\n-            SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS,\n+    int heartbeatInterval \u003d\n+        getConf().getInt(SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS,\n             SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS_DEFAULT);\n-    int containerMemoryMB \u003d conf.getInt(SLSConfiguration.CONTAINER_MEMORY_MB,\n+    int containerMemoryMB \u003d\n+        getConf().getInt(SLSConfiguration.CONTAINER_MEMORY_MB,\n             SLSConfiguration.CONTAINER_MEMORY_MB_DEFAULT);\n-    int containerVCores \u003d conf.getInt(SLSConfiguration.CONTAINER_VCORES,\n-            SLSConfiguration.CONTAINER_VCORES_DEFAULT);\n+    int containerVCores \u003d getConf().getInt(SLSConfiguration.CONTAINER_VCORES,\n+        SLSConfiguration.CONTAINER_VCORES_DEFAULT);\n     Resource containerResource \u003d\n-            BuilderUtils.newResource(containerMemoryMB, containerVCores);\n+        BuilderUtils.newResource(containerMemoryMB, containerVCores);\n \n     // application workload\n-    if (isSLS) {\n+    switch (inputType) {\n+    case SLS:\n       startAMFromSLSTraces(containerResource, heartbeatInterval);\n-    } else {\n+      break;\n+    case RUMEN:\n       startAMFromRumenTraces(containerResource, heartbeatInterval);\n+      break;\n+    case SYNTH:\n+      startAMFromSynthGenerator(heartbeatInterval);\n+      break;\n+    default:\n+      throw new YarnException(\"Input configuration not recognized, \"\n+          + \"trace type should be SLS, RUMEN, or SYNTH\");\n     }\n     numAMs \u003d amMap.size();\n     remainingApps \u003d numAMs;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void startAM() throws YarnException, IOException {\n    // application/container configuration\n    int heartbeatInterval \u003d\n        getConf().getInt(SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS,\n            SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS_DEFAULT);\n    int containerMemoryMB \u003d\n        getConf().getInt(SLSConfiguration.CONTAINER_MEMORY_MB,\n            SLSConfiguration.CONTAINER_MEMORY_MB_DEFAULT);\n    int containerVCores \u003d getConf().getInt(SLSConfiguration.CONTAINER_VCORES,\n        SLSConfiguration.CONTAINER_VCORES_DEFAULT);\n    Resource containerResource \u003d\n        BuilderUtils.newResource(containerMemoryMB, containerVCores);\n\n    // application workload\n    switch (inputType) {\n    case SLS:\n      startAMFromSLSTraces(containerResource, heartbeatInterval);\n      break;\n    case RUMEN:\n      startAMFromRumenTraces(containerResource, heartbeatInterval);\n      break;\n    case SYNTH:\n      startAMFromSynthGenerator(heartbeatInterval);\n      break;\n    default:\n      throw new YarnException(\"Input configuration not recognized, \"\n          + \"trace type should be SLS, RUMEN, or SYNTH\");\n    }\n    numAMs \u003d amMap.size();\n    remainingApps \u003d numAMs;\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java",
      "extendedDetails": {}
    },
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1021. Yarn Scheduler Load Simulator. (ywskycn via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1527059 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/09/13 1:23 PM",
      "commitName": "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,21 @@\n+  private void startAM() throws YarnException, IOException {\n+    // application/container configuration\n+    int heartbeatInterval \u003d conf.getInt(\n+            SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS,\n+            SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS_DEFAULT);\n+    int containerMemoryMB \u003d conf.getInt(SLSConfiguration.CONTAINER_MEMORY_MB,\n+            SLSConfiguration.CONTAINER_MEMORY_MB_DEFAULT);\n+    int containerVCores \u003d conf.getInt(SLSConfiguration.CONTAINER_VCORES,\n+            SLSConfiguration.CONTAINER_VCORES_DEFAULT);\n+    Resource containerResource \u003d\n+            BuilderUtils.newResource(containerMemoryMB, containerVCores);\n+\n+    // application workload\n+    if (isSLS) {\n+      startAMFromSLSTraces(containerResource, heartbeatInterval);\n+    } else {\n+      startAMFromRumenTraces(containerResource, heartbeatInterval);\n+    }\n+    numAMs \u003d amMap.size();\n+    remainingApps \u003d numAMs;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void startAM() throws YarnException, IOException {\n    // application/container configuration\n    int heartbeatInterval \u003d conf.getInt(\n            SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS,\n            SLSConfiguration.AM_HEARTBEAT_INTERVAL_MS_DEFAULT);\n    int containerMemoryMB \u003d conf.getInt(SLSConfiguration.CONTAINER_MEMORY_MB,\n            SLSConfiguration.CONTAINER_MEMORY_MB_DEFAULT);\n    int containerVCores \u003d conf.getInt(SLSConfiguration.CONTAINER_VCORES,\n            SLSConfiguration.CONTAINER_VCORES_DEFAULT);\n    Resource containerResource \u003d\n            BuilderUtils.newResource(containerMemoryMB, containerVCores);\n\n    // application workload\n    if (isSLS) {\n      startAMFromSLSTraces(containerResource, heartbeatInterval);\n    } else {\n      startAMFromRumenTraces(containerResource, heartbeatInterval);\n    }\n    numAMs \u003d amMap.size();\n    remainingApps \u003d numAMs;\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java"
    }
  }
}