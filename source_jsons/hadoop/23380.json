{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DataDrivenDBInputFormat.java",
  "functionName": "createDBRecordReader",
  "functionId": "createDBRecordReader___split-DBInputSplit__conf-Configuration",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/db/DataDrivenDBInputFormat.java",
  "functionStartLine": 277,
  "functionEndLine": 304,
  "numCommitsSeen": 5,
  "timeTaken": 4457,
  "changeHistory": [
    "241336ca2b7cf97d7e0bd84dbe0542b72f304dc9",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "241336ca2b7cf97d7e0bd84dbe0542b72f304dc9": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "241336ca2b7cf97d7e0bd84dbe0542b72f304dc9": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6237. Multiple mappers with DBInputFormat don\u0027t work because of reusing conections. Contributed by Kannan Rajah.\n",
      "commitDate": "09/02/15 10:52 AM",
      "commitName": "241336ca2b7cf97d7e0bd84dbe0542b72f304dc9",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 1264.78,
      "commitsBetweenForRepo": 8548,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   protected RecordReader\u003cLongWritable, T\u003e createDBRecordReader(DBInputSplit split,\n       Configuration conf) throws IOException {\n \n     DBConfiguration dbConf \u003d getDBConf();\n     @SuppressWarnings(\"unchecked\")\n     Class\u003cT\u003e inputClass \u003d (Class\u003cT\u003e) (dbConf.getInputClass());\n     String dbProductName \u003d getDBProductName();\n \n     LOG.debug(\"Creating db record reader for db product: \" + dbProductName);\n \n     try {\n       // use database product name to determine appropriate record reader.\n       if (dbProductName.startsWith(\"MYSQL\")) {\n         // use MySQL-specific db reader.\n         return new MySQLDataDrivenDBRecordReader\u003cT\u003e(split, inputClass,\n-            conf, getConnection(), dbConf, dbConf.getInputConditions(),\n+            conf, createConnection(), dbConf, dbConf.getInputConditions(),\n             dbConf.getInputFieldNames(), dbConf.getInputTableName());\n       } else {\n         // Generic reader.\n         return new DataDrivenDBRecordReader\u003cT\u003e(split, inputClass,\n-            conf, getConnection(), dbConf, dbConf.getInputConditions(),\n+            conf, createConnection(), dbConf, dbConf.getInputConditions(),\n             dbConf.getInputFieldNames(), dbConf.getInputTableName(),\n             dbProductName);\n       }\n     } catch (SQLException ex) {\n       throw new IOException(ex.getMessage());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected RecordReader\u003cLongWritable, T\u003e createDBRecordReader(DBInputSplit split,\n      Configuration conf) throws IOException {\n\n    DBConfiguration dbConf \u003d getDBConf();\n    @SuppressWarnings(\"unchecked\")\n    Class\u003cT\u003e inputClass \u003d (Class\u003cT\u003e) (dbConf.getInputClass());\n    String dbProductName \u003d getDBProductName();\n\n    LOG.debug(\"Creating db record reader for db product: \" + dbProductName);\n\n    try {\n      // use database product name to determine appropriate record reader.\n      if (dbProductName.startsWith(\"MYSQL\")) {\n        // use MySQL-specific db reader.\n        return new MySQLDataDrivenDBRecordReader\u003cT\u003e(split, inputClass,\n            conf, createConnection(), dbConf, dbConf.getInputConditions(),\n            dbConf.getInputFieldNames(), dbConf.getInputTableName());\n      } else {\n        // Generic reader.\n        return new DataDrivenDBRecordReader\u003cT\u003e(split, inputClass,\n            conf, createConnection(), dbConf, dbConf.getInputConditions(),\n            dbConf.getInputFieldNames(), dbConf.getInputTableName(),\n            dbProductName);\n      }\n    } catch (SQLException ex) {\n      throw new IOException(ex.getMessage());\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/db/DataDrivenDBInputFormat.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected RecordReader\u003cLongWritable, T\u003e createDBRecordReader(DBInputSplit split,\n      Configuration conf) throws IOException {\n\n    DBConfiguration dbConf \u003d getDBConf();\n    @SuppressWarnings(\"unchecked\")\n    Class\u003cT\u003e inputClass \u003d (Class\u003cT\u003e) (dbConf.getInputClass());\n    String dbProductName \u003d getDBProductName();\n\n    LOG.debug(\"Creating db record reader for db product: \" + dbProductName);\n\n    try {\n      // use database product name to determine appropriate record reader.\n      if (dbProductName.startsWith(\"MYSQL\")) {\n        // use MySQL-specific db reader.\n        return new MySQLDataDrivenDBRecordReader\u003cT\u003e(split, inputClass,\n            conf, getConnection(), dbConf, dbConf.getInputConditions(),\n            dbConf.getInputFieldNames(), dbConf.getInputTableName());\n      } else {\n        // Generic reader.\n        return new DataDrivenDBRecordReader\u003cT\u003e(split, inputClass,\n            conf, getConnection(), dbConf, dbConf.getInputConditions(),\n            dbConf.getInputFieldNames(), dbConf.getInputTableName(),\n            dbProductName);\n      }\n    } catch (SQLException ex) {\n      throw new IOException(ex.getMessage());\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/db/DataDrivenDBInputFormat.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/db/DataDrivenDBInputFormat.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/db/DataDrivenDBInputFormat.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected RecordReader\u003cLongWritable, T\u003e createDBRecordReader(DBInputSplit split,\n      Configuration conf) throws IOException {\n\n    DBConfiguration dbConf \u003d getDBConf();\n    @SuppressWarnings(\"unchecked\")\n    Class\u003cT\u003e inputClass \u003d (Class\u003cT\u003e) (dbConf.getInputClass());\n    String dbProductName \u003d getDBProductName();\n\n    LOG.debug(\"Creating db record reader for db product: \" + dbProductName);\n\n    try {\n      // use database product name to determine appropriate record reader.\n      if (dbProductName.startsWith(\"MYSQL\")) {\n        // use MySQL-specific db reader.\n        return new MySQLDataDrivenDBRecordReader\u003cT\u003e(split, inputClass,\n            conf, getConnection(), dbConf, dbConf.getInputConditions(),\n            dbConf.getInputFieldNames(), dbConf.getInputTableName());\n      } else {\n        // Generic reader.\n        return new DataDrivenDBRecordReader\u003cT\u003e(split, inputClass,\n            conf, getConnection(), dbConf, dbConf.getInputConditions(),\n            dbConf.getInputFieldNames(), dbConf.getInputTableName(),\n            dbProductName);\n      }\n    } catch (SQLException ex) {\n      throw new IOException(ex.getMessage());\n    }\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/db/DataDrivenDBInputFormat.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapreduce/lib/db/DataDrivenDBInputFormat.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/db/DataDrivenDBInputFormat.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,28 @@\n+  protected RecordReader\u003cLongWritable, T\u003e createDBRecordReader(DBInputSplit split,\n+      Configuration conf) throws IOException {\n+\n+    DBConfiguration dbConf \u003d getDBConf();\n+    @SuppressWarnings(\"unchecked\")\n+    Class\u003cT\u003e inputClass \u003d (Class\u003cT\u003e) (dbConf.getInputClass());\n+    String dbProductName \u003d getDBProductName();\n+\n+    LOG.debug(\"Creating db record reader for db product: \" + dbProductName);\n+\n+    try {\n+      // use database product name to determine appropriate record reader.\n+      if (dbProductName.startsWith(\"MYSQL\")) {\n+        // use MySQL-specific db reader.\n+        return new MySQLDataDrivenDBRecordReader\u003cT\u003e(split, inputClass,\n+            conf, getConnection(), dbConf, dbConf.getInputConditions(),\n+            dbConf.getInputFieldNames(), dbConf.getInputTableName());\n+      } else {\n+        // Generic reader.\n+        return new DataDrivenDBRecordReader\u003cT\u003e(split, inputClass,\n+            conf, getConnection(), dbConf, dbConf.getInputConditions(),\n+            dbConf.getInputFieldNames(), dbConf.getInputTableName(),\n+            dbProductName);\n+      }\n+    } catch (SQLException ex) {\n+      throw new IOException(ex.getMessage());\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected RecordReader\u003cLongWritable, T\u003e createDBRecordReader(DBInputSplit split,\n      Configuration conf) throws IOException {\n\n    DBConfiguration dbConf \u003d getDBConf();\n    @SuppressWarnings(\"unchecked\")\n    Class\u003cT\u003e inputClass \u003d (Class\u003cT\u003e) (dbConf.getInputClass());\n    String dbProductName \u003d getDBProductName();\n\n    LOG.debug(\"Creating db record reader for db product: \" + dbProductName);\n\n    try {\n      // use database product name to determine appropriate record reader.\n      if (dbProductName.startsWith(\"MYSQL\")) {\n        // use MySQL-specific db reader.\n        return new MySQLDataDrivenDBRecordReader\u003cT\u003e(split, inputClass,\n            conf, getConnection(), dbConf, dbConf.getInputConditions(),\n            dbConf.getInputFieldNames(), dbConf.getInputTableName());\n      } else {\n        // Generic reader.\n        return new DataDrivenDBRecordReader\u003cT\u003e(split, inputClass,\n            conf, getConnection(), dbConf, dbConf.getInputConditions(),\n            dbConf.getInputFieldNames(), dbConf.getInputTableName(),\n            dbProductName);\n      }\n    } catch (SQLException ex) {\n      throw new IOException(ex.getMessage());\n    }\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapreduce/lib/db/DataDrivenDBInputFormat.java"
    }
  }
}