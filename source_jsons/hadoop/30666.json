{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LeveldbTimelineStateStore.java",
  "functionName": "startStorage",
  "functionId": "startStorage",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/recovery/LeveldbTimelineStateStore.java",
  "functionStartLine": 88,
  "functionEndLine": 130,
  "numCommitsSeen": 4,
  "timeTaken": 1820,
  "changeHistory": [
    "839e077faf4019d6efdcd89d95930023cd0b0a08",
    "a4aa1cb40504299d3401008fdabc795eafb28713",
    "1a78c0ff016097930edf68e8278f826b637e918c",
    "149512a83743715bb100feb6747b7e88301018ab"
  ],
  "changeHistoryShort": {
    "839e077faf4019d6efdcd89d95930023cd0b0a08": "Ybodychange",
    "a4aa1cb40504299d3401008fdabc795eafb28713": "Ybodychange",
    "1a78c0ff016097930edf68e8278f826b637e918c": "Ybodychange",
    "149512a83743715bb100feb6747b7e88301018ab": "Yintroduced"
  },
  "changeHistoryDetails": {
    "839e077faf4019d6efdcd89d95930023cd0b0a08": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6873. Moving logging APIs over to slf4j in hadoop-yarn-server-applicationhistoryservice. Contributed by Yeliang Cang.\n",
      "commitDate": "07/08/17 2:56 AM",
      "commitName": "839e077faf4019d6efdcd89d95930023cd0b0a08",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "31/07/17 8:15 PM",
      "commitNameOld": "a4aa1cb40504299d3401008fdabc795eafb28713",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 6.28,
      "commitsBetweenForRepo": 91,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n   protected void startStorage() throws IOException {\n     Options options \u003d new Options();\n     Path dbPath \u003d\n         new Path(\n             getConfig().get(\n                 YarnConfiguration.TIMELINE_SERVICE_LEVELDB_STATE_STORE_PATH),\n             DB_NAME);\n     FileSystem localFS \u003d null;\n     try {\n       localFS \u003d FileSystem.getLocal(getConfig());\n       if (!localFS.exists(dbPath)) {\n         if (!localFS.mkdirs(dbPath)) {\n           throw new IOException(\"Couldn\u0027t create directory for leveldb \" +\n               \"timeline store \" + dbPath);\n         }\n         localFS.setPermission(dbPath, LEVELDB_DIR_UMASK);\n       }\n     } finally {\n-      IOUtils.cleanup(LOG, localFS);\n+      IOUtils.cleanupWithLogger(LOG, localFS);\n     }\n     JniDBFactory factory \u003d new JniDBFactory();\n     try {\n       options.createIfMissing(false);\n       db \u003d factory.open(new File(dbPath.toString()), options);\n       LOG.info(\"Loading the existing database at th path: \" + dbPath.toString());\n       checkVersion();\n     } catch (NativeDB.DBException e) {\n       if (e.isNotFound() || e.getMessage().contains(\" does not exist \")) {\n         try {\n           options.createIfMissing(true);\n           db \u003d factory.open(new File(dbPath.toString()), options);\n           LOG.info(\"Creating a new database at th path: \" + dbPath.toString());\n           storeVersion(CURRENT_VERSION_INFO);\n         } catch (DBException ex) {\n           throw new IOException(ex);\n         }\n       } else {\n         throw new IOException(e);\n       }\n     } catch (DBException e) {\n       throw new IOException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startStorage() throws IOException {\n    Options options \u003d new Options();\n    Path dbPath \u003d\n        new Path(\n            getConfig().get(\n                YarnConfiguration.TIMELINE_SERVICE_LEVELDB_STATE_STORE_PATH),\n            DB_NAME);\n    FileSystem localFS \u003d null;\n    try {\n      localFS \u003d FileSystem.getLocal(getConfig());\n      if (!localFS.exists(dbPath)) {\n        if (!localFS.mkdirs(dbPath)) {\n          throw new IOException(\"Couldn\u0027t create directory for leveldb \" +\n              \"timeline store \" + dbPath);\n        }\n        localFS.setPermission(dbPath, LEVELDB_DIR_UMASK);\n      }\n    } finally {\n      IOUtils.cleanupWithLogger(LOG, localFS);\n    }\n    JniDBFactory factory \u003d new JniDBFactory();\n    try {\n      options.createIfMissing(false);\n      db \u003d factory.open(new File(dbPath.toString()), options);\n      LOG.info(\"Loading the existing database at th path: \" + dbPath.toString());\n      checkVersion();\n    } catch (NativeDB.DBException e) {\n      if (e.isNotFound() || e.getMessage().contains(\" does not exist \")) {\n        try {\n          options.createIfMissing(true);\n          db \u003d factory.open(new File(dbPath.toString()), options);\n          LOG.info(\"Creating a new database at th path: \" + dbPath.toString());\n          storeVersion(CURRENT_VERSION_INFO);\n        } catch (DBException ex) {\n          throw new IOException(ex);\n        }\n      } else {\n        throw new IOException(e);\n      }\n    } catch (DBException e) {\n      throw new IOException(e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/recovery/LeveldbTimelineStateStore.java",
      "extendedDetails": {}
    },
    "a4aa1cb40504299d3401008fdabc795eafb28713": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"YARN-6873. Moving logging APIs over to slf4j in hadoop-yarn-server-applicationhistoryservice. Contributed by Yeliang Cang.\"\n\nThis reverts commit 1a78c0ff016097930edf68e8278f826b637e918c.\n",
      "commitDate": "31/07/17 8:15 PM",
      "commitName": "a4aa1cb40504299d3401008fdabc795eafb28713",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "31/07/17 6:53 PM",
      "commitNameOld": "1a78c0ff016097930edf68e8278f826b637e918c",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n   protected void startStorage() throws IOException {\n     Options options \u003d new Options();\n     Path dbPath \u003d\n         new Path(\n             getConfig().get(\n                 YarnConfiguration.TIMELINE_SERVICE_LEVELDB_STATE_STORE_PATH),\n             DB_NAME);\n     FileSystem localFS \u003d null;\n     try {\n       localFS \u003d FileSystem.getLocal(getConfig());\n       if (!localFS.exists(dbPath)) {\n         if (!localFS.mkdirs(dbPath)) {\n           throw new IOException(\"Couldn\u0027t create directory for leveldb \" +\n               \"timeline store \" + dbPath);\n         }\n         localFS.setPermission(dbPath, LEVELDB_DIR_UMASK);\n       }\n     } finally {\n-      IOUtils.cleanupWithLogger(LOG, localFS);\n+      IOUtils.cleanup(LOG, localFS);\n     }\n     JniDBFactory factory \u003d new JniDBFactory();\n     try {\n       options.createIfMissing(false);\n       db \u003d factory.open(new File(dbPath.toString()), options);\n       LOG.info(\"Loading the existing database at th path: \" + dbPath.toString());\n       checkVersion();\n     } catch (NativeDB.DBException e) {\n       if (e.isNotFound() || e.getMessage().contains(\" does not exist \")) {\n         try {\n           options.createIfMissing(true);\n           db \u003d factory.open(new File(dbPath.toString()), options);\n           LOG.info(\"Creating a new database at th path: \" + dbPath.toString());\n           storeVersion(CURRENT_VERSION_INFO);\n         } catch (DBException ex) {\n           throw new IOException(ex);\n         }\n       } else {\n         throw new IOException(e);\n       }\n     } catch (DBException e) {\n       throw new IOException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startStorage() throws IOException {\n    Options options \u003d new Options();\n    Path dbPath \u003d\n        new Path(\n            getConfig().get(\n                YarnConfiguration.TIMELINE_SERVICE_LEVELDB_STATE_STORE_PATH),\n            DB_NAME);\n    FileSystem localFS \u003d null;\n    try {\n      localFS \u003d FileSystem.getLocal(getConfig());\n      if (!localFS.exists(dbPath)) {\n        if (!localFS.mkdirs(dbPath)) {\n          throw new IOException(\"Couldn\u0027t create directory for leveldb \" +\n              \"timeline store \" + dbPath);\n        }\n        localFS.setPermission(dbPath, LEVELDB_DIR_UMASK);\n      }\n    } finally {\n      IOUtils.cleanup(LOG, localFS);\n    }\n    JniDBFactory factory \u003d new JniDBFactory();\n    try {\n      options.createIfMissing(false);\n      db \u003d factory.open(new File(dbPath.toString()), options);\n      LOG.info(\"Loading the existing database at th path: \" + dbPath.toString());\n      checkVersion();\n    } catch (NativeDB.DBException e) {\n      if (e.isNotFound() || e.getMessage().contains(\" does not exist \")) {\n        try {\n          options.createIfMissing(true);\n          db \u003d factory.open(new File(dbPath.toString()), options);\n          LOG.info(\"Creating a new database at th path: \" + dbPath.toString());\n          storeVersion(CURRENT_VERSION_INFO);\n        } catch (DBException ex) {\n          throw new IOException(ex);\n        }\n      } else {\n        throw new IOException(e);\n      }\n    } catch (DBException e) {\n      throw new IOException(e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/recovery/LeveldbTimelineStateStore.java",
      "extendedDetails": {}
    },
    "1a78c0ff016097930edf68e8278f826b637e918c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6873. Moving logging APIs over to slf4j in hadoop-yarn-server-applicationhistoryservice. Contributed by Yeliang Cang.\n",
      "commitDate": "31/07/17 6:53 PM",
      "commitName": "1a78c0ff016097930edf68e8278f826b637e918c",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "23/12/14 6:25 PM",
      "commitNameOld": "149512a83743715bb100feb6747b7e88301018ab",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 950.98,
      "commitsBetweenForRepo": 6637,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n   protected void startStorage() throws IOException {\n     Options options \u003d new Options();\n     Path dbPath \u003d\n         new Path(\n             getConfig().get(\n                 YarnConfiguration.TIMELINE_SERVICE_LEVELDB_STATE_STORE_PATH),\n             DB_NAME);\n     FileSystem localFS \u003d null;\n     try {\n       localFS \u003d FileSystem.getLocal(getConfig());\n       if (!localFS.exists(dbPath)) {\n         if (!localFS.mkdirs(dbPath)) {\n           throw new IOException(\"Couldn\u0027t create directory for leveldb \" +\n               \"timeline store \" + dbPath);\n         }\n         localFS.setPermission(dbPath, LEVELDB_DIR_UMASK);\n       }\n     } finally {\n-      IOUtils.cleanup(LOG, localFS);\n+      IOUtils.cleanupWithLogger(LOG, localFS);\n     }\n     JniDBFactory factory \u003d new JniDBFactory();\n     try {\n       options.createIfMissing(false);\n       db \u003d factory.open(new File(dbPath.toString()), options);\n       LOG.info(\"Loading the existing database at th path: \" + dbPath.toString());\n       checkVersion();\n     } catch (NativeDB.DBException e) {\n       if (e.isNotFound() || e.getMessage().contains(\" does not exist \")) {\n         try {\n           options.createIfMissing(true);\n           db \u003d factory.open(new File(dbPath.toString()), options);\n           LOG.info(\"Creating a new database at th path: \" + dbPath.toString());\n           storeVersion(CURRENT_VERSION_INFO);\n         } catch (DBException ex) {\n           throw new IOException(ex);\n         }\n       } else {\n         throw new IOException(e);\n       }\n     } catch (DBException e) {\n       throw new IOException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startStorage() throws IOException {\n    Options options \u003d new Options();\n    Path dbPath \u003d\n        new Path(\n            getConfig().get(\n                YarnConfiguration.TIMELINE_SERVICE_LEVELDB_STATE_STORE_PATH),\n            DB_NAME);\n    FileSystem localFS \u003d null;\n    try {\n      localFS \u003d FileSystem.getLocal(getConfig());\n      if (!localFS.exists(dbPath)) {\n        if (!localFS.mkdirs(dbPath)) {\n          throw new IOException(\"Couldn\u0027t create directory for leveldb \" +\n              \"timeline store \" + dbPath);\n        }\n        localFS.setPermission(dbPath, LEVELDB_DIR_UMASK);\n      }\n    } finally {\n      IOUtils.cleanupWithLogger(LOG, localFS);\n    }\n    JniDBFactory factory \u003d new JniDBFactory();\n    try {\n      options.createIfMissing(false);\n      db \u003d factory.open(new File(dbPath.toString()), options);\n      LOG.info(\"Loading the existing database at th path: \" + dbPath.toString());\n      checkVersion();\n    } catch (NativeDB.DBException e) {\n      if (e.isNotFound() || e.getMessage().contains(\" does not exist \")) {\n        try {\n          options.createIfMissing(true);\n          db \u003d factory.open(new File(dbPath.toString()), options);\n          LOG.info(\"Creating a new database at th path: \" + dbPath.toString());\n          storeVersion(CURRENT_VERSION_INFO);\n        } catch (DBException ex) {\n          throw new IOException(ex);\n        }\n      } else {\n        throw new IOException(e);\n      }\n    } catch (DBException e) {\n      throw new IOException(e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/recovery/LeveldbTimelineStateStore.java",
      "extendedDetails": {}
    },
    "149512a83743715bb100feb6747b7e88301018ab": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2837. Support TimeLine server to recover delegation token when restarting. Contributed by Zhijie Shen\n",
      "commitDate": "23/12/14 6:25 PM",
      "commitName": "149512a83743715bb100feb6747b7e88301018ab",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,43 @@\n+  protected void startStorage() throws IOException {\n+    Options options \u003d new Options();\n+    Path dbPath \u003d\n+        new Path(\n+            getConfig().get(\n+                YarnConfiguration.TIMELINE_SERVICE_LEVELDB_STATE_STORE_PATH),\n+            DB_NAME);\n+    FileSystem localFS \u003d null;\n+    try {\n+      localFS \u003d FileSystem.getLocal(getConfig());\n+      if (!localFS.exists(dbPath)) {\n+        if (!localFS.mkdirs(dbPath)) {\n+          throw new IOException(\"Couldn\u0027t create directory for leveldb \" +\n+              \"timeline store \" + dbPath);\n+        }\n+        localFS.setPermission(dbPath, LEVELDB_DIR_UMASK);\n+      }\n+    } finally {\n+      IOUtils.cleanup(LOG, localFS);\n+    }\n+    JniDBFactory factory \u003d new JniDBFactory();\n+    try {\n+      options.createIfMissing(false);\n+      db \u003d factory.open(new File(dbPath.toString()), options);\n+      LOG.info(\"Loading the existing database at th path: \" + dbPath.toString());\n+      checkVersion();\n+    } catch (NativeDB.DBException e) {\n+      if (e.isNotFound() || e.getMessage().contains(\" does not exist \")) {\n+        try {\n+          options.createIfMissing(true);\n+          db \u003d factory.open(new File(dbPath.toString()), options);\n+          LOG.info(\"Creating a new database at th path: \" + dbPath.toString());\n+          storeVersion(CURRENT_VERSION_INFO);\n+        } catch (DBException ex) {\n+          throw new IOException(ex);\n+        }\n+      } else {\n+        throw new IOException(e);\n+      }\n+    } catch (DBException e) {\n+      throw new IOException(e);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startStorage() throws IOException {\n    Options options \u003d new Options();\n    Path dbPath \u003d\n        new Path(\n            getConfig().get(\n                YarnConfiguration.TIMELINE_SERVICE_LEVELDB_STATE_STORE_PATH),\n            DB_NAME);\n    FileSystem localFS \u003d null;\n    try {\n      localFS \u003d FileSystem.getLocal(getConfig());\n      if (!localFS.exists(dbPath)) {\n        if (!localFS.mkdirs(dbPath)) {\n          throw new IOException(\"Couldn\u0027t create directory for leveldb \" +\n              \"timeline store \" + dbPath);\n        }\n        localFS.setPermission(dbPath, LEVELDB_DIR_UMASK);\n      }\n    } finally {\n      IOUtils.cleanup(LOG, localFS);\n    }\n    JniDBFactory factory \u003d new JniDBFactory();\n    try {\n      options.createIfMissing(false);\n      db \u003d factory.open(new File(dbPath.toString()), options);\n      LOG.info(\"Loading the existing database at th path: \" + dbPath.toString());\n      checkVersion();\n    } catch (NativeDB.DBException e) {\n      if (e.isNotFound() || e.getMessage().contains(\" does not exist \")) {\n        try {\n          options.createIfMissing(true);\n          db \u003d factory.open(new File(dbPath.toString()), options);\n          LOG.info(\"Creating a new database at th path: \" + dbPath.toString());\n          storeVersion(CURRENT_VERSION_INFO);\n        } catch (DBException ex) {\n          throw new IOException(ex);\n        }\n      } else {\n        throw new IOException(e);\n      }\n    } catch (DBException e) {\n      throw new IOException(e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/recovery/LeveldbTimelineStateStore.java"
    }
  }
}