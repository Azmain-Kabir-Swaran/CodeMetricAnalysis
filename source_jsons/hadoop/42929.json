{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMAppLogAggregation.java",
  "functionName": "updateLogAggregationStatus",
  "functionId": "updateLogAggregationStatus___nodeId-NodeId",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppLogAggregation.java",
  "functionStartLine": 297,
  "functionEndLine": 329,
  "numCommitsSeen": 164,
  "timeTaken": 4702,
  "changeHistory": [
    "4456ea67b949553b85e101e866b4b3f4b335f1f0",
    "15ccd967ee3e7046a50522089f67ba01f36ec76a"
  ],
  "changeHistoryShort": {
    "4456ea67b949553b85e101e866b4b3f4b335f1f0": "Ymultichange(Ymovefromfile,Ybodychange)",
    "15ccd967ee3e7046a50522089f67ba01f36ec76a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4456ea67b949553b85e101e866b4b3f4b335f1f0": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "YARN-8586. Extract log aggregation related fields and methods from RMAppImpl. Contributed by Peter Bacsko\n",
      "commitDate": "16/08/19 2:36 AM",
      "commitName": "4456ea67b949553b85e101e866b4b3f4b335f1f0",
      "commitAuthor": "Szilard Nemeth",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-8586. Extract log aggregation related fields and methods from RMAppImpl. Contributed by Peter Bacsko\n",
          "commitDate": "16/08/19 2:36 AM",
          "commitName": "4456ea67b949553b85e101e866b4b3f4b335f1f0",
          "commitAuthor": "Szilard Nemeth",
          "commitDateOld": "16/08/19 12:13 AM",
          "commitNameOld": "2216ec54e58e24ff09620fc2efa2f1733391d0c3",
          "commitAuthorOld": "Szilard Nemeth",
          "daysBetweenCommits": 0.1,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,33 @@\n   private void updateLogAggregationStatus(NodeId nodeId) {\n     LogAggregationStatus status \u003d\n         this.logAggregationStatus.get(nodeId).getLogAggregationStatus();\n     if (status.equals(LogAggregationStatus.SUCCEEDED)) {\n       this.logAggregationSucceed++;\n     } else if (status.equals(LogAggregationStatus.FAILED)) {\n       this.logAggregationFailed++;\n     }\n     if (this.logAggregationSucceed \u003d\u003d this.logAggregationStatus.size()) {\n       this.logAggregationStatusForAppReport \u003d\n           LogAggregationStatus.SUCCEEDED;\n       // Since the log aggregation status for this application for all NMs\n       // is SUCCEEDED, it means all logs are aggregated successfully.\n       // We could remove all the cached log aggregation reports\n       this.logAggregationStatus.clear();\n       this.logAggregationDiagnosticsForNMs.clear();\n       this.logAggregationFailureMessagesForNMs.clear();\n     } else if (this.logAggregationSucceed + this.logAggregationFailed\n         \u003d\u003d this.logAggregationStatus.size()) {\n       this.logAggregationStatusForAppReport \u003d LogAggregationStatus.FAILED;\n       // We have collected the log aggregation status for all NMs.\n       // The log aggregation status is FAILED which means the log\n       // aggregation fails in some NMs. We are only interested in the\n       // nodes where the log aggregation is failed. So we could remove\n       // the log aggregation details for those succeeded NMs\n-      for (Iterator\u003cMap.Entry\u003cNodeId, LogAggregationReport\u003e\u003e it \u003d\n-          this.logAggregationStatus.entrySet().iterator(); it.hasNext();) {\n-        Map.Entry\u003cNodeId, LogAggregationReport\u003e entry \u003d it.next();\n-        if (entry.getValue().getLogAggregationStatus()\n-          .equals(LogAggregationStatus.SUCCEEDED)) {\n-          it.remove();\n-        }\n-      }\n+      this.logAggregationStatus.entrySet().removeIf(entry -\u003e\n+          entry.getValue().getLogAggregationStatus()\n+          .equals(LogAggregationStatus.SUCCEEDED));\n       // the log aggregation has finished/failed.\n       // and the status will not be updated anymore.\n       this.logAggregationDiagnosticsForNMs.clear();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void updateLogAggregationStatus(NodeId nodeId) {\n    LogAggregationStatus status \u003d\n        this.logAggregationStatus.get(nodeId).getLogAggregationStatus();\n    if (status.equals(LogAggregationStatus.SUCCEEDED)) {\n      this.logAggregationSucceed++;\n    } else if (status.equals(LogAggregationStatus.FAILED)) {\n      this.logAggregationFailed++;\n    }\n    if (this.logAggregationSucceed \u003d\u003d this.logAggregationStatus.size()) {\n      this.logAggregationStatusForAppReport \u003d\n          LogAggregationStatus.SUCCEEDED;\n      // Since the log aggregation status for this application for all NMs\n      // is SUCCEEDED, it means all logs are aggregated successfully.\n      // We could remove all the cached log aggregation reports\n      this.logAggregationStatus.clear();\n      this.logAggregationDiagnosticsForNMs.clear();\n      this.logAggregationFailureMessagesForNMs.clear();\n    } else if (this.logAggregationSucceed + this.logAggregationFailed\n        \u003d\u003d this.logAggregationStatus.size()) {\n      this.logAggregationStatusForAppReport \u003d LogAggregationStatus.FAILED;\n      // We have collected the log aggregation status for all NMs.\n      // The log aggregation status is FAILED which means the log\n      // aggregation fails in some NMs. We are only interested in the\n      // nodes where the log aggregation is failed. So we could remove\n      // the log aggregation details for those succeeded NMs\n      this.logAggregationStatus.entrySet().removeIf(entry -\u003e\n          entry.getValue().getLogAggregationStatus()\n          .equals(LogAggregationStatus.SUCCEEDED));\n      // the log aggregation has finished/failed.\n      // and the status will not be updated anymore.\n      this.logAggregationDiagnosticsForNMs.clear();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppLogAggregation.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppLogAggregation.java",
            "oldMethodName": "updateLogAggregationStatus",
            "newMethodName": "updateLogAggregationStatus"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8586. Extract log aggregation related fields and methods from RMAppImpl. Contributed by Peter Bacsko\n",
          "commitDate": "16/08/19 2:36 AM",
          "commitName": "4456ea67b949553b85e101e866b4b3f4b335f1f0",
          "commitAuthor": "Szilard Nemeth",
          "commitDateOld": "16/08/19 12:13 AM",
          "commitNameOld": "2216ec54e58e24ff09620fc2efa2f1733391d0c3",
          "commitAuthorOld": "Szilard Nemeth",
          "daysBetweenCommits": 0.1,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,33 @@\n   private void updateLogAggregationStatus(NodeId nodeId) {\n     LogAggregationStatus status \u003d\n         this.logAggregationStatus.get(nodeId).getLogAggregationStatus();\n     if (status.equals(LogAggregationStatus.SUCCEEDED)) {\n       this.logAggregationSucceed++;\n     } else if (status.equals(LogAggregationStatus.FAILED)) {\n       this.logAggregationFailed++;\n     }\n     if (this.logAggregationSucceed \u003d\u003d this.logAggregationStatus.size()) {\n       this.logAggregationStatusForAppReport \u003d\n           LogAggregationStatus.SUCCEEDED;\n       // Since the log aggregation status for this application for all NMs\n       // is SUCCEEDED, it means all logs are aggregated successfully.\n       // We could remove all the cached log aggregation reports\n       this.logAggregationStatus.clear();\n       this.logAggregationDiagnosticsForNMs.clear();\n       this.logAggregationFailureMessagesForNMs.clear();\n     } else if (this.logAggregationSucceed + this.logAggregationFailed\n         \u003d\u003d this.logAggregationStatus.size()) {\n       this.logAggregationStatusForAppReport \u003d LogAggregationStatus.FAILED;\n       // We have collected the log aggregation status for all NMs.\n       // The log aggregation status is FAILED which means the log\n       // aggregation fails in some NMs. We are only interested in the\n       // nodes where the log aggregation is failed. So we could remove\n       // the log aggregation details for those succeeded NMs\n-      for (Iterator\u003cMap.Entry\u003cNodeId, LogAggregationReport\u003e\u003e it \u003d\n-          this.logAggregationStatus.entrySet().iterator(); it.hasNext();) {\n-        Map.Entry\u003cNodeId, LogAggregationReport\u003e entry \u003d it.next();\n-        if (entry.getValue().getLogAggregationStatus()\n-          .equals(LogAggregationStatus.SUCCEEDED)) {\n-          it.remove();\n-        }\n-      }\n+      this.logAggregationStatus.entrySet().removeIf(entry -\u003e\n+          entry.getValue().getLogAggregationStatus()\n+          .equals(LogAggregationStatus.SUCCEEDED));\n       // the log aggregation has finished/failed.\n       // and the status will not be updated anymore.\n       this.logAggregationDiagnosticsForNMs.clear();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void updateLogAggregationStatus(NodeId nodeId) {\n    LogAggregationStatus status \u003d\n        this.logAggregationStatus.get(nodeId).getLogAggregationStatus();\n    if (status.equals(LogAggregationStatus.SUCCEEDED)) {\n      this.logAggregationSucceed++;\n    } else if (status.equals(LogAggregationStatus.FAILED)) {\n      this.logAggregationFailed++;\n    }\n    if (this.logAggregationSucceed \u003d\u003d this.logAggregationStatus.size()) {\n      this.logAggregationStatusForAppReport \u003d\n          LogAggregationStatus.SUCCEEDED;\n      // Since the log aggregation status for this application for all NMs\n      // is SUCCEEDED, it means all logs are aggregated successfully.\n      // We could remove all the cached log aggregation reports\n      this.logAggregationStatus.clear();\n      this.logAggregationDiagnosticsForNMs.clear();\n      this.logAggregationFailureMessagesForNMs.clear();\n    } else if (this.logAggregationSucceed + this.logAggregationFailed\n        \u003d\u003d this.logAggregationStatus.size()) {\n      this.logAggregationStatusForAppReport \u003d LogAggregationStatus.FAILED;\n      // We have collected the log aggregation status for all NMs.\n      // The log aggregation status is FAILED which means the log\n      // aggregation fails in some NMs. We are only interested in the\n      // nodes where the log aggregation is failed. So we could remove\n      // the log aggregation details for those succeeded NMs\n      this.logAggregationStatus.entrySet().removeIf(entry -\u003e\n          entry.getValue().getLogAggregationStatus()\n          .equals(LogAggregationStatus.SUCCEEDED));\n      // the log aggregation has finished/failed.\n      // and the status will not be updated anymore.\n      this.logAggregationDiagnosticsForNMs.clear();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppLogAggregation.java",
          "extendedDetails": {}
        }
      ]
    },
    "15ccd967ee3e7046a50522089f67ba01f36ec76a": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3505. Node\u0027s Log Aggregation Report with SUCCEED should not cached in RMApps. Contributed by Xuan Gong.\n",
      "commitDate": "14/05/15 10:58 AM",
      "commitName": "15ccd967ee3e7046a50522089f67ba01f36ec76a",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,38 @@\n+  private void updateLogAggregationStatus(NodeId nodeId) {\n+    LogAggregationStatus status \u003d\n+        this.logAggregationStatus.get(nodeId).getLogAggregationStatus();\n+    if (status.equals(LogAggregationStatus.SUCCEEDED)) {\n+      this.logAggregationSucceed++;\n+    } else if (status.equals(LogAggregationStatus.FAILED)) {\n+      this.logAggregationFailed++;\n+    }\n+    if (this.logAggregationSucceed \u003d\u003d this.logAggregationStatus.size()) {\n+      this.logAggregationStatusForAppReport \u003d\n+          LogAggregationStatus.SUCCEEDED;\n+      // Since the log aggregation status for this application for all NMs\n+      // is SUCCEEDED, it means all logs are aggregated successfully.\n+      // We could remove all the cached log aggregation reports\n+      this.logAggregationStatus.clear();\n+      this.logAggregationDiagnosticsForNMs.clear();\n+      this.logAggregationFailureMessagesForNMs.clear();\n+    } else if (this.logAggregationSucceed + this.logAggregationFailed\n+        \u003d\u003d this.logAggregationStatus.size()) {\n+      this.logAggregationStatusForAppReport \u003d LogAggregationStatus.FAILED;\n+      // We have collected the log aggregation status for all NMs.\n+      // The log aggregation status is FAILED which means the log\n+      // aggregation fails in some NMs. We are only interested in the\n+      // nodes where the log aggregation is failed. So we could remove\n+      // the log aggregation details for those succeeded NMs\n+      for (Iterator\u003cMap.Entry\u003cNodeId, LogAggregationReport\u003e\u003e it \u003d\n+          this.logAggregationStatus.entrySet().iterator(); it.hasNext();) {\n+        Map.Entry\u003cNodeId, LogAggregationReport\u003e entry \u003d it.next();\n+        if (entry.getValue().getLogAggregationStatus()\n+          .equals(LogAggregationStatus.SUCCEEDED)) {\n+          it.remove();\n+        }\n+      }\n+      // the log aggregation has finished/failed.\n+      // and the status will not be updated anymore.\n+      this.logAggregationDiagnosticsForNMs.clear();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void updateLogAggregationStatus(NodeId nodeId) {\n    LogAggregationStatus status \u003d\n        this.logAggregationStatus.get(nodeId).getLogAggregationStatus();\n    if (status.equals(LogAggregationStatus.SUCCEEDED)) {\n      this.logAggregationSucceed++;\n    } else if (status.equals(LogAggregationStatus.FAILED)) {\n      this.logAggregationFailed++;\n    }\n    if (this.logAggregationSucceed \u003d\u003d this.logAggregationStatus.size()) {\n      this.logAggregationStatusForAppReport \u003d\n          LogAggregationStatus.SUCCEEDED;\n      // Since the log aggregation status for this application for all NMs\n      // is SUCCEEDED, it means all logs are aggregated successfully.\n      // We could remove all the cached log aggregation reports\n      this.logAggregationStatus.clear();\n      this.logAggregationDiagnosticsForNMs.clear();\n      this.logAggregationFailureMessagesForNMs.clear();\n    } else if (this.logAggregationSucceed + this.logAggregationFailed\n        \u003d\u003d this.logAggregationStatus.size()) {\n      this.logAggregationStatusForAppReport \u003d LogAggregationStatus.FAILED;\n      // We have collected the log aggregation status for all NMs.\n      // The log aggregation status is FAILED which means the log\n      // aggregation fails in some NMs. We are only interested in the\n      // nodes where the log aggregation is failed. So we could remove\n      // the log aggregation details for those succeeded NMs\n      for (Iterator\u003cMap.Entry\u003cNodeId, LogAggregationReport\u003e\u003e it \u003d\n          this.logAggregationStatus.entrySet().iterator(); it.hasNext();) {\n        Map.Entry\u003cNodeId, LogAggregationReport\u003e entry \u003d it.next();\n        if (entry.getValue().getLogAggregationStatus()\n          .equals(LogAggregationStatus.SUCCEEDED)) {\n          it.remove();\n        }\n      }\n      // the log aggregation has finished/failed.\n      // and the status will not be updated anymore.\n      this.logAggregationDiagnosticsForNMs.clear();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java"
    }
  }
}