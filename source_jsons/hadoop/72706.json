{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "KMSClientProvider.java",
  "functionName": "decryptEncryptedKey",
  "functionId": "decryptEncryptedKey___encryptedKeyVersion-EncryptedKeyVersion",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
  "functionStartLine": 800,
  "functionEndLine": 831,
  "numCommitsSeen": 71,
  "timeTaken": 2026,
  "changeHistory": [
    "513dc29ce833f574895a6c40036758ba16823942",
    "e0f00e12ce99ebd521f2055118fac9636ab6e51f",
    "0c1469ece38556cf02a0c7bd23761d6bf79d9a64"
  ],
  "changeHistoryShort": {
    "513dc29ce833f574895a6c40036758ba16823942": "Ybodychange",
    "e0f00e12ce99ebd521f2055118fac9636ab6e51f": "Ybodychange",
    "0c1469ece38556cf02a0c7bd23761d6bf79d9a64": "Yintroduced"
  },
  "changeHistoryDetails": {
    "513dc29ce833f574895a6c40036758ba16823942": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10937. Need to set version name correctly before decrypting EEK. Contributed by Arun Suresh.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615841 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/08/14 7:21 PM",
      "commitName": "513dc29ce833f574895a6c40036758ba16823942",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "22/07/14 6:24 PM",
      "commitNameOld": "e0f00e12ce99ebd521f2055118fac9636ab6e51f",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 13.04,
      "commitsBetweenForRepo": 82,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   public KeyVersion decryptEncryptedKey(\n       EncryptedKeyVersion encryptedKeyVersion) throws IOException,\n                                                       GeneralSecurityException {\n     checkNotNull(encryptedKeyVersion.getEncryptionKeyVersionName(),\n         \"versionName\");\n     checkNotNull(encryptedKeyVersion.getEncryptedKeyIv(), \"iv\");\n     Preconditions.checkArgument(\n         encryptedKeyVersion.getEncryptedKeyVersion().getVersionName()\n             .equals(KeyProviderCryptoExtension.EEK),\n         \"encryptedKey version name must be \u0027%s\u0027, is \u0027%s\u0027\",\n-        KeyProviderCryptoExtension.EK,\n+        KeyProviderCryptoExtension.EEK,\n         encryptedKeyVersion.getEncryptedKeyVersion().getVersionName()\n     );\n     checkNotNull(encryptedKeyVersion.getEncryptedKeyVersion(), \"encryptedKey\");\n     Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n     params.put(KMSRESTConstants.EEK_OP, KMSRESTConstants.EEK_DECRYPT);\n     Map\u003cString, Object\u003e jsonPayload \u003d new HashMap\u003cString, Object\u003e();\n     jsonPayload.put(KMSRESTConstants.NAME_FIELD,\n         encryptedKeyVersion.getEncryptionKeyName());\n     jsonPayload.put(KMSRESTConstants.IV_FIELD, Base64.encodeBase64String(\n         encryptedKeyVersion.getEncryptedKeyIv()));\n     jsonPayload.put(KMSRESTConstants.MATERIAL_FIELD, Base64.encodeBase64String(\n             encryptedKeyVersion.getEncryptedKeyVersion().getMaterial()));\n     URL url \u003d createURL(KMSRESTConstants.KEY_VERSION_RESOURCE,\n         encryptedKeyVersion.getEncryptionKeyVersionName(),\n         KMSRESTConstants.EEK_SUB_RESOURCE, params);\n     HttpURLConnection conn \u003d createConnection(url, HTTP_POST);\n     conn.setRequestProperty(CONTENT_TYPE, APPLICATION_JSON_MIME);\n     Map response \u003d\n         call(conn, jsonPayload, HttpURLConnection.HTTP_OK, Map.class);\n     return parseJSONKeyVersion(response);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public KeyVersion decryptEncryptedKey(\n      EncryptedKeyVersion encryptedKeyVersion) throws IOException,\n                                                      GeneralSecurityException {\n    checkNotNull(encryptedKeyVersion.getEncryptionKeyVersionName(),\n        \"versionName\");\n    checkNotNull(encryptedKeyVersion.getEncryptedKeyIv(), \"iv\");\n    Preconditions.checkArgument(\n        encryptedKeyVersion.getEncryptedKeyVersion().getVersionName()\n            .equals(KeyProviderCryptoExtension.EEK),\n        \"encryptedKey version name must be \u0027%s\u0027, is \u0027%s\u0027\",\n        KeyProviderCryptoExtension.EEK,\n        encryptedKeyVersion.getEncryptedKeyVersion().getVersionName()\n    );\n    checkNotNull(encryptedKeyVersion.getEncryptedKeyVersion(), \"encryptedKey\");\n    Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n    params.put(KMSRESTConstants.EEK_OP, KMSRESTConstants.EEK_DECRYPT);\n    Map\u003cString, Object\u003e jsonPayload \u003d new HashMap\u003cString, Object\u003e();\n    jsonPayload.put(KMSRESTConstants.NAME_FIELD,\n        encryptedKeyVersion.getEncryptionKeyName());\n    jsonPayload.put(KMSRESTConstants.IV_FIELD, Base64.encodeBase64String(\n        encryptedKeyVersion.getEncryptedKeyIv()));\n    jsonPayload.put(KMSRESTConstants.MATERIAL_FIELD, Base64.encodeBase64String(\n            encryptedKeyVersion.getEncryptedKeyVersion().getMaterial()));\n    URL url \u003d createURL(KMSRESTConstants.KEY_VERSION_RESOURCE,\n        encryptedKeyVersion.getEncryptionKeyVersionName(),\n        KMSRESTConstants.EEK_SUB_RESOURCE, params);\n    HttpURLConnection conn \u003d createConnection(url, HTTP_POST);\n    conn.setRequestProperty(CONTENT_TYPE, APPLICATION_JSON_MIME);\n    Map response \u003d\n        call(conn, jsonPayload, HttpURLConnection.HTTP_OK, Map.class);\n    return parseJSONKeyVersion(response);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
      "extendedDetails": {}
    },
    "e0f00e12ce99ebd521f2055118fac9636ab6e51f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10881. Clarify usage of encryption and encrypted encryption key in KeyProviderCryptoExtension. (wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1612737 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/07/14 6:24 PM",
      "commitName": "e0f00e12ce99ebd521f2055118fac9636ab6e51f",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "21/07/14 1:55 PM",
      "commitNameOld": "0c1469ece38556cf02a0c7bd23761d6bf79d9a64",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 1.19,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,32 @@\n   public KeyVersion decryptEncryptedKey(\n       EncryptedKeyVersion encryptedKeyVersion) throws IOException,\n                                                       GeneralSecurityException {\n-    checkNotNull(encryptedKeyVersion.getKeyVersionName(), \"versionName\");\n-    checkNotNull(encryptedKeyVersion.getIv(), \"iv\");\n-    Preconditions.checkArgument(encryptedKeyVersion.getEncryptedKey()\n-        .getVersionName().equals(KeyProviderCryptoExtension.EEK),\n+    checkNotNull(encryptedKeyVersion.getEncryptionKeyVersionName(),\n+        \"versionName\");\n+    checkNotNull(encryptedKeyVersion.getEncryptedKeyIv(), \"iv\");\n+    Preconditions.checkArgument(\n+        encryptedKeyVersion.getEncryptedKeyVersion().getVersionName()\n+            .equals(KeyProviderCryptoExtension.EEK),\n         \"encryptedKey version name must be \u0027%s\u0027, is \u0027%s\u0027\",\n-        KeyProviderCryptoExtension.EK, encryptedKeyVersion.getEncryptedKey()\n-            .getVersionName());\n-    checkNotNull(encryptedKeyVersion.getEncryptedKey(), \"encryptedKey\");\n+        KeyProviderCryptoExtension.EK,\n+        encryptedKeyVersion.getEncryptedKeyVersion().getVersionName()\n+    );\n+    checkNotNull(encryptedKeyVersion.getEncryptedKeyVersion(), \"encryptedKey\");\n     Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n     params.put(KMSRESTConstants.EEK_OP, KMSRESTConstants.EEK_DECRYPT);\n     Map\u003cString, Object\u003e jsonPayload \u003d new HashMap\u003cString, Object\u003e();\n     jsonPayload.put(KMSRESTConstants.NAME_FIELD,\n-        encryptedKeyVersion.getKeyName());\n+        encryptedKeyVersion.getEncryptionKeyName());\n     jsonPayload.put(KMSRESTConstants.IV_FIELD, Base64.encodeBase64String(\n-        encryptedKeyVersion.getIv()));\n+        encryptedKeyVersion.getEncryptedKeyIv()));\n     jsonPayload.put(KMSRESTConstants.MATERIAL_FIELD, Base64.encodeBase64String(\n-            encryptedKeyVersion.getEncryptedKey().getMaterial()));\n+            encryptedKeyVersion.getEncryptedKeyVersion().getMaterial()));\n     URL url \u003d createURL(KMSRESTConstants.KEY_VERSION_RESOURCE,\n-        encryptedKeyVersion.getKeyVersionName(),\n+        encryptedKeyVersion.getEncryptionKeyVersionName(),\n         KMSRESTConstants.EEK_SUB_RESOURCE, params);\n     HttpURLConnection conn \u003d createConnection(url, HTTP_POST);\n     conn.setRequestProperty(CONTENT_TYPE, APPLICATION_JSON_MIME);\n     Map response \u003d\n         call(conn, jsonPayload, HttpURLConnection.HTTP_OK, Map.class);\n     return parseJSONKeyVersion(response);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public KeyVersion decryptEncryptedKey(\n      EncryptedKeyVersion encryptedKeyVersion) throws IOException,\n                                                      GeneralSecurityException {\n    checkNotNull(encryptedKeyVersion.getEncryptionKeyVersionName(),\n        \"versionName\");\n    checkNotNull(encryptedKeyVersion.getEncryptedKeyIv(), \"iv\");\n    Preconditions.checkArgument(\n        encryptedKeyVersion.getEncryptedKeyVersion().getVersionName()\n            .equals(KeyProviderCryptoExtension.EEK),\n        \"encryptedKey version name must be \u0027%s\u0027, is \u0027%s\u0027\",\n        KeyProviderCryptoExtension.EK,\n        encryptedKeyVersion.getEncryptedKeyVersion().getVersionName()\n    );\n    checkNotNull(encryptedKeyVersion.getEncryptedKeyVersion(), \"encryptedKey\");\n    Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n    params.put(KMSRESTConstants.EEK_OP, KMSRESTConstants.EEK_DECRYPT);\n    Map\u003cString, Object\u003e jsonPayload \u003d new HashMap\u003cString, Object\u003e();\n    jsonPayload.put(KMSRESTConstants.NAME_FIELD,\n        encryptedKeyVersion.getEncryptionKeyName());\n    jsonPayload.put(KMSRESTConstants.IV_FIELD, Base64.encodeBase64String(\n        encryptedKeyVersion.getEncryptedKeyIv()));\n    jsonPayload.put(KMSRESTConstants.MATERIAL_FIELD, Base64.encodeBase64String(\n            encryptedKeyVersion.getEncryptedKeyVersion().getMaterial()));\n    URL url \u003d createURL(KMSRESTConstants.KEY_VERSION_RESOURCE,\n        encryptedKeyVersion.getEncryptionKeyVersionName(),\n        KMSRESTConstants.EEK_SUB_RESOURCE, params);\n    HttpURLConnection conn \u003d createConnection(url, HTTP_POST);\n    conn.setRequestProperty(CONTENT_TYPE, APPLICATION_JSON_MIME);\n    Map response \u003d\n        call(conn, jsonPayload, HttpURLConnection.HTTP_OK, Map.class);\n    return parseJSONKeyVersion(response);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java",
      "extendedDetails": {}
    },
    "0c1469ece38556cf02a0c7bd23761d6bf79d9a64": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10720. KMS: Implement generateEncryptedKey and decryptEncryptedKey in the REST API. (asuresh via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1612399 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/07/14 1:55 PM",
      "commitName": "0c1469ece38556cf02a0c7bd23761d6bf79d9a64",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,29 @@\n+  public KeyVersion decryptEncryptedKey(\n+      EncryptedKeyVersion encryptedKeyVersion) throws IOException,\n+                                                      GeneralSecurityException {\n+    checkNotNull(encryptedKeyVersion.getKeyVersionName(), \"versionName\");\n+    checkNotNull(encryptedKeyVersion.getIv(), \"iv\");\n+    Preconditions.checkArgument(encryptedKeyVersion.getEncryptedKey()\n+        .getVersionName().equals(KeyProviderCryptoExtension.EEK),\n+        \"encryptedKey version name must be \u0027%s\u0027, is \u0027%s\u0027\",\n+        KeyProviderCryptoExtension.EK, encryptedKeyVersion.getEncryptedKey()\n+            .getVersionName());\n+    checkNotNull(encryptedKeyVersion.getEncryptedKey(), \"encryptedKey\");\n+    Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n+    params.put(KMSRESTConstants.EEK_OP, KMSRESTConstants.EEK_DECRYPT);\n+    Map\u003cString, Object\u003e jsonPayload \u003d new HashMap\u003cString, Object\u003e();\n+    jsonPayload.put(KMSRESTConstants.NAME_FIELD,\n+        encryptedKeyVersion.getKeyName());\n+    jsonPayload.put(KMSRESTConstants.IV_FIELD, Base64.encodeBase64String(\n+        encryptedKeyVersion.getIv()));\n+    jsonPayload.put(KMSRESTConstants.MATERIAL_FIELD, Base64.encodeBase64String(\n+            encryptedKeyVersion.getEncryptedKey().getMaterial()));\n+    URL url \u003d createURL(KMSRESTConstants.KEY_VERSION_RESOURCE,\n+        encryptedKeyVersion.getKeyVersionName(),\n+        KMSRESTConstants.EEK_SUB_RESOURCE, params);\n+    HttpURLConnection conn \u003d createConnection(url, HTTP_POST);\n+    conn.setRequestProperty(CONTENT_TYPE, APPLICATION_JSON_MIME);\n+    Map response \u003d\n+        call(conn, jsonPayload, HttpURLConnection.HTTP_OK, Map.class);\n+    return parseJSONKeyVersion(response);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public KeyVersion decryptEncryptedKey(\n      EncryptedKeyVersion encryptedKeyVersion) throws IOException,\n                                                      GeneralSecurityException {\n    checkNotNull(encryptedKeyVersion.getKeyVersionName(), \"versionName\");\n    checkNotNull(encryptedKeyVersion.getIv(), \"iv\");\n    Preconditions.checkArgument(encryptedKeyVersion.getEncryptedKey()\n        .getVersionName().equals(KeyProviderCryptoExtension.EEK),\n        \"encryptedKey version name must be \u0027%s\u0027, is \u0027%s\u0027\",\n        KeyProviderCryptoExtension.EK, encryptedKeyVersion.getEncryptedKey()\n            .getVersionName());\n    checkNotNull(encryptedKeyVersion.getEncryptedKey(), \"encryptedKey\");\n    Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n    params.put(KMSRESTConstants.EEK_OP, KMSRESTConstants.EEK_DECRYPT);\n    Map\u003cString, Object\u003e jsonPayload \u003d new HashMap\u003cString, Object\u003e();\n    jsonPayload.put(KMSRESTConstants.NAME_FIELD,\n        encryptedKeyVersion.getKeyName());\n    jsonPayload.put(KMSRESTConstants.IV_FIELD, Base64.encodeBase64String(\n        encryptedKeyVersion.getIv()));\n    jsonPayload.put(KMSRESTConstants.MATERIAL_FIELD, Base64.encodeBase64String(\n            encryptedKeyVersion.getEncryptedKey().getMaterial()));\n    URL url \u003d createURL(KMSRESTConstants.KEY_VERSION_RESOURCE,\n        encryptedKeyVersion.getKeyVersionName(),\n        KMSRESTConstants.EEK_SUB_RESOURCE, params);\n    HttpURLConnection conn \u003d createConnection(url, HTTP_POST);\n    conn.setRequestProperty(CONTENT_TYPE, APPLICATION_JSON_MIME);\n    Map response \u003d\n        call(conn, jsonPayload, HttpURLConnection.HTTP_OK, Map.class);\n    return parseJSONKeyVersion(response);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/kms/KMSClientProvider.java"
    }
  }
}