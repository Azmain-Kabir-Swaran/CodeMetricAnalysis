{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Queue.java",
  "functionName": "isHierarchySameAs",
  "functionId": "isHierarchySameAs___newState-Queue",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/Queue.java",
  "functionStartLine": 332,
  "functionEndLine": 378,
  "numCommitsSeen": 4,
  "timeTaken": 4685,
  "changeHistory": [
    "178751ed8c9d47038acf8616c226f1f52e884feb",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "178751ed8c9d47038acf8616c226f1f52e884feb": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "178751ed8c9d47038acf8616c226f1f52e884feb": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6983. Moving logging APIs over to slf4j in hadoop-mapreduce-client-core. Contributed by Jinjiang Ling.\n",
      "commitDate": "02/11/17 1:43 AM",
      "commitName": "178751ed8c9d47038acf8616c226f1f52e884feb",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 2261.35,
      "commitsBetweenForRepo": 15708,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n   boolean isHierarchySameAs(Queue newState) {\n     if(newState \u003d\u003d null) {\n       return false;\n     }\n     //First check if names are equal\n     if(!(name.equals(newState.getName())) ) {\n       LOG.info(\" current name \" + name + \" not equal to \" + newState.getName());\n       return false;\n     }\n \n     if (children \u003d\u003d null || children.size() \u003d\u003d 0) {\n       if(newState.getChildren() !\u003d null \u0026\u0026 newState.getChildren().size() \u003e 0) {\n         LOG.info( newState + \" has added children in refresh \");\n         return false;\n       }\n     } else if(children.size() \u003e 0) {\n       //check for the individual children and then see if all of them\n       //are updated.\n       if (newState.getChildren() \u003d\u003d null) {\n-        LOG.fatal(\"In the current state, queue \" + getName() + \" has \"\n+        LOG.error(\"In the current state, queue \" + getName() + \" has \"\n             + children.size() + \" but the new state has none!\");\n         return false;\n       }\n       int childrenSize \u003d children.size();\n       int newChildrenSize \u003d newState.getChildren().size();\n       if (childrenSize !\u003d newChildrenSize) {\n-        LOG.fatal(\"Number of children for queue \" + newState.getName()\n+        LOG.error(\"Number of children for queue \" + newState.getName()\n             + \" in newState is \" + newChildrenSize + \" which is not equal to \"\n             + childrenSize + \" in the current state.\");\n         return false;\n       }\n       //children are pre sorted as they are stored in treeset.\n       //hence order shold be the same.\n       Iterator\u003cQueue\u003e itr1 \u003d children.iterator();\n       Iterator\u003cQueue\u003e itr2 \u003d newState.getChildren().iterator();\n \n       while(itr1.hasNext()) {\n         Queue q \u003d itr1.next();\n         Queue newq \u003d itr2.next();\n         if(! (q.isHierarchySameAs(newq)) ) {\n           LOG.info(\" Queue \" + q.getName() + \" not equal to \" + newq.getName());\n           return false;\n         }\n       }\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean isHierarchySameAs(Queue newState) {\n    if(newState \u003d\u003d null) {\n      return false;\n    }\n    //First check if names are equal\n    if(!(name.equals(newState.getName())) ) {\n      LOG.info(\" current name \" + name + \" not equal to \" + newState.getName());\n      return false;\n    }\n\n    if (children \u003d\u003d null || children.size() \u003d\u003d 0) {\n      if(newState.getChildren() !\u003d null \u0026\u0026 newState.getChildren().size() \u003e 0) {\n        LOG.info( newState + \" has added children in refresh \");\n        return false;\n      }\n    } else if(children.size() \u003e 0) {\n      //check for the individual children and then see if all of them\n      //are updated.\n      if (newState.getChildren() \u003d\u003d null) {\n        LOG.error(\"In the current state, queue \" + getName() + \" has \"\n            + children.size() + \" but the new state has none!\");\n        return false;\n      }\n      int childrenSize \u003d children.size();\n      int newChildrenSize \u003d newState.getChildren().size();\n      if (childrenSize !\u003d newChildrenSize) {\n        LOG.error(\"Number of children for queue \" + newState.getName()\n            + \" in newState is \" + newChildrenSize + \" which is not equal to \"\n            + childrenSize + \" in the current state.\");\n        return false;\n      }\n      //children are pre sorted as they are stored in treeset.\n      //hence order shold be the same.\n      Iterator\u003cQueue\u003e itr1 \u003d children.iterator();\n      Iterator\u003cQueue\u003e itr2 \u003d newState.getChildren().iterator();\n\n      while(itr1.hasNext()) {\n        Queue q \u003d itr1.next();\n        Queue newq \u003d itr2.next();\n        if(! (q.isHierarchySameAs(newq)) ) {\n          LOG.info(\" Queue \" + q.getName() + \" not equal to \" + newq.getName());\n          return false;\n        }\n      }\n    }\n    return true;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/Queue.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  boolean isHierarchySameAs(Queue newState) {\n    if(newState \u003d\u003d null) {\n      return false;\n    }\n    //First check if names are equal\n    if(!(name.equals(newState.getName())) ) {\n      LOG.info(\" current name \" + name + \" not equal to \" + newState.getName());\n      return false;\n    }\n\n    if (children \u003d\u003d null || children.size() \u003d\u003d 0) {\n      if(newState.getChildren() !\u003d null \u0026\u0026 newState.getChildren().size() \u003e 0) {\n        LOG.info( newState + \" has added children in refresh \");\n        return false;\n      }\n    } else if(children.size() \u003e 0) {\n      //check for the individual children and then see if all of them\n      //are updated.\n      if (newState.getChildren() \u003d\u003d null) {\n        LOG.fatal(\"In the current state, queue \" + getName() + \" has \"\n            + children.size() + \" but the new state has none!\");\n        return false;\n      }\n      int childrenSize \u003d children.size();\n      int newChildrenSize \u003d newState.getChildren().size();\n      if (childrenSize !\u003d newChildrenSize) {\n        LOG.fatal(\"Number of children for queue \" + newState.getName()\n            + \" in newState is \" + newChildrenSize + \" which is not equal to \"\n            + childrenSize + \" in the current state.\");\n        return false;\n      }\n      //children are pre sorted as they are stored in treeset.\n      //hence order shold be the same.\n      Iterator\u003cQueue\u003e itr1 \u003d children.iterator();\n      Iterator\u003cQueue\u003e itr2 \u003d newState.getChildren().iterator();\n\n      while(itr1.hasNext()) {\n        Queue q \u003d itr1.next();\n        Queue newq \u003d itr2.next();\n        if(! (q.isHierarchySameAs(newq)) ) {\n          LOG.info(\" Queue \" + q.getName() + \" not equal to \" + newq.getName());\n          return false;\n        }\n      }\n    }\n    return true;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/Queue.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/Queue.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/Queue.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  boolean isHierarchySameAs(Queue newState) {\n    if(newState \u003d\u003d null) {\n      return false;\n    }\n    //First check if names are equal\n    if(!(name.equals(newState.getName())) ) {\n      LOG.info(\" current name \" + name + \" not equal to \" + newState.getName());\n      return false;\n    }\n\n    if (children \u003d\u003d null || children.size() \u003d\u003d 0) {\n      if(newState.getChildren() !\u003d null \u0026\u0026 newState.getChildren().size() \u003e 0) {\n        LOG.info( newState + \" has added children in refresh \");\n        return false;\n      }\n    } else if(children.size() \u003e 0) {\n      //check for the individual children and then see if all of them\n      //are updated.\n      if (newState.getChildren() \u003d\u003d null) {\n        LOG.fatal(\"In the current state, queue \" + getName() + \" has \"\n            + children.size() + \" but the new state has none!\");\n        return false;\n      }\n      int childrenSize \u003d children.size();\n      int newChildrenSize \u003d newState.getChildren().size();\n      if (childrenSize !\u003d newChildrenSize) {\n        LOG.fatal(\"Number of children for queue \" + newState.getName()\n            + \" in newState is \" + newChildrenSize + \" which is not equal to \"\n            + childrenSize + \" in the current state.\");\n        return false;\n      }\n      //children are pre sorted as they are stored in treeset.\n      //hence order shold be the same.\n      Iterator\u003cQueue\u003e itr1 \u003d children.iterator();\n      Iterator\u003cQueue\u003e itr2 \u003d newState.getChildren().iterator();\n\n      while(itr1.hasNext()) {\n        Queue q \u003d itr1.next();\n        Queue newq \u003d itr2.next();\n        if(! (q.isHierarchySameAs(newq)) ) {\n          LOG.info(\" Queue \" + q.getName() + \" not equal to \" + newq.getName());\n          return false;\n        }\n      }\n    }\n    return true;\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/Queue.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapred/Queue.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/Queue.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,47 @@\n+  boolean isHierarchySameAs(Queue newState) {\n+    if(newState \u003d\u003d null) {\n+      return false;\n+    }\n+    //First check if names are equal\n+    if(!(name.equals(newState.getName())) ) {\n+      LOG.info(\" current name \" + name + \" not equal to \" + newState.getName());\n+      return false;\n+    }\n+\n+    if (children \u003d\u003d null || children.size() \u003d\u003d 0) {\n+      if(newState.getChildren() !\u003d null \u0026\u0026 newState.getChildren().size() \u003e 0) {\n+        LOG.info( newState + \" has added children in refresh \");\n+        return false;\n+      }\n+    } else if(children.size() \u003e 0) {\n+      //check for the individual children and then see if all of them\n+      //are updated.\n+      if (newState.getChildren() \u003d\u003d null) {\n+        LOG.fatal(\"In the current state, queue \" + getName() + \" has \"\n+            + children.size() + \" but the new state has none!\");\n+        return false;\n+      }\n+      int childrenSize \u003d children.size();\n+      int newChildrenSize \u003d newState.getChildren().size();\n+      if (childrenSize !\u003d newChildrenSize) {\n+        LOG.fatal(\"Number of children for queue \" + newState.getName()\n+            + \" in newState is \" + newChildrenSize + \" which is not equal to \"\n+            + childrenSize + \" in the current state.\");\n+        return false;\n+      }\n+      //children are pre sorted as they are stored in treeset.\n+      //hence order shold be the same.\n+      Iterator\u003cQueue\u003e itr1 \u003d children.iterator();\n+      Iterator\u003cQueue\u003e itr2 \u003d newState.getChildren().iterator();\n+\n+      while(itr1.hasNext()) {\n+        Queue q \u003d itr1.next();\n+        Queue newq \u003d itr2.next();\n+        if(! (q.isHierarchySameAs(newq)) ) {\n+          LOG.info(\" Queue \" + q.getName() + \" not equal to \" + newq.getName());\n+          return false;\n+        }\n+      }\n+    }\n+    return true;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  boolean isHierarchySameAs(Queue newState) {\n    if(newState \u003d\u003d null) {\n      return false;\n    }\n    //First check if names are equal\n    if(!(name.equals(newState.getName())) ) {\n      LOG.info(\" current name \" + name + \" not equal to \" + newState.getName());\n      return false;\n    }\n\n    if (children \u003d\u003d null || children.size() \u003d\u003d 0) {\n      if(newState.getChildren() !\u003d null \u0026\u0026 newState.getChildren().size() \u003e 0) {\n        LOG.info( newState + \" has added children in refresh \");\n        return false;\n      }\n    } else if(children.size() \u003e 0) {\n      //check for the individual children and then see if all of them\n      //are updated.\n      if (newState.getChildren() \u003d\u003d null) {\n        LOG.fatal(\"In the current state, queue \" + getName() + \" has \"\n            + children.size() + \" but the new state has none!\");\n        return false;\n      }\n      int childrenSize \u003d children.size();\n      int newChildrenSize \u003d newState.getChildren().size();\n      if (childrenSize !\u003d newChildrenSize) {\n        LOG.fatal(\"Number of children for queue \" + newState.getName()\n            + \" in newState is \" + newChildrenSize + \" which is not equal to \"\n            + childrenSize + \" in the current state.\");\n        return false;\n      }\n      //children are pre sorted as they are stored in treeset.\n      //hence order shold be the same.\n      Iterator\u003cQueue\u003e itr1 \u003d children.iterator();\n      Iterator\u003cQueue\u003e itr2 \u003d newState.getChildren().iterator();\n\n      while(itr1.hasNext()) {\n        Queue q \u003d itr1.next();\n        Queue newq \u003d itr2.next();\n        if(! (q.isHierarchySameAs(newq)) ) {\n          LOG.info(\" Queue \" + q.getName() + \" not equal to \" + newq.getName());\n          return false;\n        }\n      }\n    }\n    return true;\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapred/Queue.java"
    }
  }
}