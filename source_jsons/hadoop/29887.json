{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "EntityGroupFSTimelineStore.java",
  "functionName": "serviceStart",
  "functionId": "serviceStart",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java",
  "functionStartLine": 269,
  "functionEndLine": 324,
  "numCommitsSeen": 17,
  "timeTaken": 1507,
  "changeHistory": [
    "6f8074298d8f33effe08f6be49ecfc89f69feda7",
    "d49cfb350454c2dfa2f3eb70f79b6d5030ce7bec",
    "02f597c5db36ded385413958bdee793ad7eda40e"
  ],
  "changeHistoryShort": {
    "6f8074298d8f33effe08f6be49ecfc89f69feda7": "Ybodychange",
    "d49cfb350454c2dfa2f3eb70f79b6d5030ce7bec": "Ybodychange",
    "02f597c5db36ded385413958bdee793ad7eda40e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6f8074298d8f33effe08f6be49ecfc89f69feda7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5713. Update jackson from 1.9.13 to 2.x in hadoop-yarn.\n",
      "commitDate": "21/11/16 5:20 PM",
      "commitName": "6f8074298d8f33effe08f6be49ecfc89f69feda7",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "28/07/16 6:35 AM",
      "commitNameOld": "7f3c306e2ed9e865171324898decb9b587d90e73",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 116.49,
      "commitsBetweenForRepo": 858,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,56 @@\n   protected void serviceStart() throws Exception {\n \n     super.serviceStart();\n     LOG.info(\"Starting {}\", getName());\n     summaryStore.start();\n \n     Configuration conf \u003d getConfig();\n     aclManager \u003d new TimelineACLsManager(conf);\n     aclManager.setTimelineStore(summaryStore);\n     summaryTdm \u003d new TimelineDataManager(summaryStore, aclManager);\n     summaryTdm.init(conf);\n     addService(summaryTdm);\n     // start child services that aren\u0027t already started\n     super.serviceStart();\n \n     if (!fs.exists(activeRootPath)) {\n       fs.mkdirs(activeRootPath);\n       fs.setPermission(activeRootPath, ACTIVE_DIR_PERMISSION);\n     }\n     if (!fs.exists(doneRootPath)) {\n       fs.mkdirs(doneRootPath);\n       fs.setPermission(doneRootPath, DONE_DIR_PERMISSION);\n     }\n \n     objMapper \u003d new ObjectMapper();\n-    objMapper.setAnnotationIntrospector(new JaxbAnnotationIntrospector());\n+    objMapper.setAnnotationIntrospector(\n+        new JaxbAnnotationIntrospector(TypeFactory.defaultInstance()));\n     jsonFactory \u003d new MappingJsonFactory(objMapper);\n     final long scanIntervalSecs \u003d conf.getLong(\n         YarnConfiguration\n             .TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_SCAN_INTERVAL_SECONDS,\n         YarnConfiguration\n             .TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_SCAN_INTERVAL_SECONDS_DEFAULT\n     );\n     final long cleanerIntervalSecs \u003d conf.getLong(\n         YarnConfiguration\n           .TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_CLEANER_INTERVAL_SECONDS,\n         YarnConfiguration\n           .TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_CLEANER_INTERVAL_SECONDS_DEFAULT\n     );\n     final int numThreads \u003d conf.getInt(\n         YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_THREADS,\n         YarnConfiguration\n             .TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_THREADS_DEFAULT);\n     LOG.info(\"Scanning active directory {} every {} seconds\", activeRootPath,\n         scanIntervalSecs);\n     LOG.info(\"Cleaning logs every {} seconds\", cleanerIntervalSecs);\n \n     executor \u003d new ScheduledThreadPoolExecutor(numThreads,\n         new ThreadFactoryBuilder().setNameFormat(\"EntityLogPluginWorker #%d\")\n             .build());\n     executor.scheduleAtFixedRate(new EntityLogScanner(), 0, scanIntervalSecs,\n         TimeUnit.SECONDS);\n     executor.scheduleAtFixedRate(new EntityLogCleaner(), cleanerIntervalSecs,\n         cleanerIntervalSecs, TimeUnit.SECONDS);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n\n    super.serviceStart();\n    LOG.info(\"Starting {}\", getName());\n    summaryStore.start();\n\n    Configuration conf \u003d getConfig();\n    aclManager \u003d new TimelineACLsManager(conf);\n    aclManager.setTimelineStore(summaryStore);\n    summaryTdm \u003d new TimelineDataManager(summaryStore, aclManager);\n    summaryTdm.init(conf);\n    addService(summaryTdm);\n    // start child services that aren\u0027t already started\n    super.serviceStart();\n\n    if (!fs.exists(activeRootPath)) {\n      fs.mkdirs(activeRootPath);\n      fs.setPermission(activeRootPath, ACTIVE_DIR_PERMISSION);\n    }\n    if (!fs.exists(doneRootPath)) {\n      fs.mkdirs(doneRootPath);\n      fs.setPermission(doneRootPath, DONE_DIR_PERMISSION);\n    }\n\n    objMapper \u003d new ObjectMapper();\n    objMapper.setAnnotationIntrospector(\n        new JaxbAnnotationIntrospector(TypeFactory.defaultInstance()));\n    jsonFactory \u003d new MappingJsonFactory(objMapper);\n    final long scanIntervalSecs \u003d conf.getLong(\n        YarnConfiguration\n            .TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_SCAN_INTERVAL_SECONDS,\n        YarnConfiguration\n            .TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_SCAN_INTERVAL_SECONDS_DEFAULT\n    );\n    final long cleanerIntervalSecs \u003d conf.getLong(\n        YarnConfiguration\n          .TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_CLEANER_INTERVAL_SECONDS,\n        YarnConfiguration\n          .TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_CLEANER_INTERVAL_SECONDS_DEFAULT\n    );\n    final int numThreads \u003d conf.getInt(\n        YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_THREADS,\n        YarnConfiguration\n            .TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_THREADS_DEFAULT);\n    LOG.info(\"Scanning active directory {} every {} seconds\", activeRootPath,\n        scanIntervalSecs);\n    LOG.info(\"Cleaning logs every {} seconds\", cleanerIntervalSecs);\n\n    executor \u003d new ScheduledThreadPoolExecutor(numThreads,\n        new ThreadFactoryBuilder().setNameFormat(\"EntityLogPluginWorker #%d\")\n            .build());\n    executor.scheduleAtFixedRate(new EntityLogScanner(), 0, scanIntervalSecs,\n        TimeUnit.SECONDS);\n    executor.scheduleAtFixedRate(new EntityLogCleaner(), cleanerIntervalSecs,\n        cleanerIntervalSecs, TimeUnit.SECONDS);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java",
      "extendedDetails": {}
    },
    "d49cfb350454c2dfa2f3eb70f79b6d5030ce7bec": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4696. Improving EntityGroupFSTimelineStore on exception handling, test setup, and concurrency. (Steve Loughran via gtcarrera9)\n",
      "commitDate": "10/03/16 10:51 AM",
      "commitName": "d49cfb350454c2dfa2f3eb70f79b6d5030ce7bec",
      "commitAuthor": "Li Lu",
      "commitDateOld": "17/01/16 5:37 PM",
      "commitNameOld": "02f597c5db36ded385413958bdee793ad7eda40e",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 52.72,
      "commitsBetweenForRepo": 371,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,55 @@\n   protected void serviceStart() throws Exception {\n+\n+    super.serviceStart();\n     LOG.info(\"Starting {}\", getName());\n-    yarnClient.start();\n     summaryStore.start();\n \n     Configuration conf \u003d getConfig();\n     aclManager \u003d new TimelineACLsManager(conf);\n     aclManager.setTimelineStore(summaryStore);\n     summaryTdm \u003d new TimelineDataManager(summaryStore, aclManager);\n     summaryTdm.init(conf);\n-    summaryTdm.start();\n-    activeRootPath \u003d new Path(conf.get(\n-        YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_ACTIVE_DIR,\n-        YarnConfiguration\n-            .TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_ACTIVE_DIR_DEFAULT));\n-    doneRootPath \u003d new Path(conf.get(\n-        YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_DONE_DIR,\n-        YarnConfiguration\n-            .TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_DONE_DIR_DEFAULT));\n-    fs \u003d activeRootPath.getFileSystem(conf);\n+    addService(summaryTdm);\n+    // start child services that aren\u0027t already started\n+    super.serviceStart();\n+\n     if (!fs.exists(activeRootPath)) {\n       fs.mkdirs(activeRootPath);\n       fs.setPermission(activeRootPath, ACTIVE_DIR_PERMISSION);\n     }\n     if (!fs.exists(doneRootPath)) {\n       fs.mkdirs(doneRootPath);\n       fs.setPermission(doneRootPath, DONE_DIR_PERMISSION);\n     }\n \n     objMapper \u003d new ObjectMapper();\n     objMapper.setAnnotationIntrospector(new JaxbAnnotationIntrospector());\n     jsonFactory \u003d new MappingJsonFactory(objMapper);\n     final long scanIntervalSecs \u003d conf.getLong(\n         YarnConfiguration\n             .TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_SCAN_INTERVAL_SECONDS,\n         YarnConfiguration\n             .TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_SCAN_INTERVAL_SECONDS_DEFAULT\n     );\n     final long cleanerIntervalSecs \u003d conf.getLong(\n         YarnConfiguration\n           .TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_CLEANER_INTERVAL_SECONDS,\n         YarnConfiguration\n           .TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_CLEANER_INTERVAL_SECONDS_DEFAULT\n     );\n     final int numThreads \u003d conf.getInt(\n         YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_THREADS,\n         YarnConfiguration\n             .TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_THREADS_DEFAULT);\n-    LOG.info(\"Scanning active directory every {} seconds\", scanIntervalSecs);\n+    LOG.info(\"Scanning active directory {} every {} seconds\", activeRootPath,\n+        scanIntervalSecs);\n     LOG.info(\"Cleaning logs every {} seconds\", cleanerIntervalSecs);\n \n     executor \u003d new ScheduledThreadPoolExecutor(numThreads,\n         new ThreadFactoryBuilder().setNameFormat(\"EntityLogPluginWorker #%d\")\n             .build());\n     executor.scheduleAtFixedRate(new EntityLogScanner(), 0, scanIntervalSecs,\n         TimeUnit.SECONDS);\n     executor.scheduleAtFixedRate(new EntityLogCleaner(), cleanerIntervalSecs,\n         cleanerIntervalSecs, TimeUnit.SECONDS);\n-    super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n\n    super.serviceStart();\n    LOG.info(\"Starting {}\", getName());\n    summaryStore.start();\n\n    Configuration conf \u003d getConfig();\n    aclManager \u003d new TimelineACLsManager(conf);\n    aclManager.setTimelineStore(summaryStore);\n    summaryTdm \u003d new TimelineDataManager(summaryStore, aclManager);\n    summaryTdm.init(conf);\n    addService(summaryTdm);\n    // start child services that aren\u0027t already started\n    super.serviceStart();\n\n    if (!fs.exists(activeRootPath)) {\n      fs.mkdirs(activeRootPath);\n      fs.setPermission(activeRootPath, ACTIVE_DIR_PERMISSION);\n    }\n    if (!fs.exists(doneRootPath)) {\n      fs.mkdirs(doneRootPath);\n      fs.setPermission(doneRootPath, DONE_DIR_PERMISSION);\n    }\n\n    objMapper \u003d new ObjectMapper();\n    objMapper.setAnnotationIntrospector(new JaxbAnnotationIntrospector());\n    jsonFactory \u003d new MappingJsonFactory(objMapper);\n    final long scanIntervalSecs \u003d conf.getLong(\n        YarnConfiguration\n            .TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_SCAN_INTERVAL_SECONDS,\n        YarnConfiguration\n            .TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_SCAN_INTERVAL_SECONDS_DEFAULT\n    );\n    final long cleanerIntervalSecs \u003d conf.getLong(\n        YarnConfiguration\n          .TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_CLEANER_INTERVAL_SECONDS,\n        YarnConfiguration\n          .TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_CLEANER_INTERVAL_SECONDS_DEFAULT\n    );\n    final int numThreads \u003d conf.getInt(\n        YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_THREADS,\n        YarnConfiguration\n            .TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_THREADS_DEFAULT);\n    LOG.info(\"Scanning active directory {} every {} seconds\", activeRootPath,\n        scanIntervalSecs);\n    LOG.info(\"Cleaning logs every {} seconds\", cleanerIntervalSecs);\n\n    executor \u003d new ScheduledThreadPoolExecutor(numThreads,\n        new ThreadFactoryBuilder().setNameFormat(\"EntityLogPluginWorker #%d\")\n            .build());\n    executor.scheduleAtFixedRate(new EntityLogScanner(), 0, scanIntervalSecs,\n        TimeUnit.SECONDS);\n    executor.scheduleAtFixedRate(new EntityLogCleaner(), cleanerIntervalSecs,\n        cleanerIntervalSecs, TimeUnit.SECONDS);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java",
      "extendedDetails": {}
    },
    "02f597c5db36ded385413958bdee793ad7eda40e": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4265. Provide new timeline plugin storage to support fine-grained entity caching. Contributed by Li Lu and Jason Lowe\n",
      "commitDate": "17/01/16 5:37 PM",
      "commitName": "02f597c5db36ded385413958bdee793ad7eda40e",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,60 @@\n+  protected void serviceStart() throws Exception {\n+    LOG.info(\"Starting {}\", getName());\n+    yarnClient.start();\n+    summaryStore.start();\n+\n+    Configuration conf \u003d getConfig();\n+    aclManager \u003d new TimelineACLsManager(conf);\n+    aclManager.setTimelineStore(summaryStore);\n+    summaryTdm \u003d new TimelineDataManager(summaryStore, aclManager);\n+    summaryTdm.init(conf);\n+    summaryTdm.start();\n+    activeRootPath \u003d new Path(conf.get(\n+        YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_ACTIVE_DIR,\n+        YarnConfiguration\n+            .TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_ACTIVE_DIR_DEFAULT));\n+    doneRootPath \u003d new Path(conf.get(\n+        YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_DONE_DIR,\n+        YarnConfiguration\n+            .TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_DONE_DIR_DEFAULT));\n+    fs \u003d activeRootPath.getFileSystem(conf);\n+    if (!fs.exists(activeRootPath)) {\n+      fs.mkdirs(activeRootPath);\n+      fs.setPermission(activeRootPath, ACTIVE_DIR_PERMISSION);\n+    }\n+    if (!fs.exists(doneRootPath)) {\n+      fs.mkdirs(doneRootPath);\n+      fs.setPermission(doneRootPath, DONE_DIR_PERMISSION);\n+    }\n+\n+    objMapper \u003d new ObjectMapper();\n+    objMapper.setAnnotationIntrospector(new JaxbAnnotationIntrospector());\n+    jsonFactory \u003d new MappingJsonFactory(objMapper);\n+    final long scanIntervalSecs \u003d conf.getLong(\n+        YarnConfiguration\n+            .TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_SCAN_INTERVAL_SECONDS,\n+        YarnConfiguration\n+            .TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_SCAN_INTERVAL_SECONDS_DEFAULT\n+    );\n+    final long cleanerIntervalSecs \u003d conf.getLong(\n+        YarnConfiguration\n+          .TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_CLEANER_INTERVAL_SECONDS,\n+        YarnConfiguration\n+          .TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_CLEANER_INTERVAL_SECONDS_DEFAULT\n+    );\n+    final int numThreads \u003d conf.getInt(\n+        YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_THREADS,\n+        YarnConfiguration\n+            .TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_THREADS_DEFAULT);\n+    LOG.info(\"Scanning active directory every {} seconds\", scanIntervalSecs);\n+    LOG.info(\"Cleaning logs every {} seconds\", cleanerIntervalSecs);\n+\n+    executor \u003d new ScheduledThreadPoolExecutor(numThreads,\n+        new ThreadFactoryBuilder().setNameFormat(\"EntityLogPluginWorker #%d\")\n+            .build());\n+    executor.scheduleAtFixedRate(new EntityLogScanner(), 0, scanIntervalSecs,\n+        TimeUnit.SECONDS);\n+    executor.scheduleAtFixedRate(new EntityLogCleaner(), cleanerIntervalSecs,\n+        cleanerIntervalSecs, TimeUnit.SECONDS);\n+    super.serviceStart();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    LOG.info(\"Starting {}\", getName());\n    yarnClient.start();\n    summaryStore.start();\n\n    Configuration conf \u003d getConfig();\n    aclManager \u003d new TimelineACLsManager(conf);\n    aclManager.setTimelineStore(summaryStore);\n    summaryTdm \u003d new TimelineDataManager(summaryStore, aclManager);\n    summaryTdm.init(conf);\n    summaryTdm.start();\n    activeRootPath \u003d new Path(conf.get(\n        YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_ACTIVE_DIR,\n        YarnConfiguration\n            .TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_ACTIVE_DIR_DEFAULT));\n    doneRootPath \u003d new Path(conf.get(\n        YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_DONE_DIR,\n        YarnConfiguration\n            .TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_DONE_DIR_DEFAULT));\n    fs \u003d activeRootPath.getFileSystem(conf);\n    if (!fs.exists(activeRootPath)) {\n      fs.mkdirs(activeRootPath);\n      fs.setPermission(activeRootPath, ACTIVE_DIR_PERMISSION);\n    }\n    if (!fs.exists(doneRootPath)) {\n      fs.mkdirs(doneRootPath);\n      fs.setPermission(doneRootPath, DONE_DIR_PERMISSION);\n    }\n\n    objMapper \u003d new ObjectMapper();\n    objMapper.setAnnotationIntrospector(new JaxbAnnotationIntrospector());\n    jsonFactory \u003d new MappingJsonFactory(objMapper);\n    final long scanIntervalSecs \u003d conf.getLong(\n        YarnConfiguration\n            .TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_SCAN_INTERVAL_SECONDS,\n        YarnConfiguration\n            .TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_SCAN_INTERVAL_SECONDS_DEFAULT\n    );\n    final long cleanerIntervalSecs \u003d conf.getLong(\n        YarnConfiguration\n          .TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_CLEANER_INTERVAL_SECONDS,\n        YarnConfiguration\n          .TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_CLEANER_INTERVAL_SECONDS_DEFAULT\n    );\n    final int numThreads \u003d conf.getInt(\n        YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_THREADS,\n        YarnConfiguration\n            .TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_THREADS_DEFAULT);\n    LOG.info(\"Scanning active directory every {} seconds\", scanIntervalSecs);\n    LOG.info(\"Cleaning logs every {} seconds\", cleanerIntervalSecs);\n\n    executor \u003d new ScheduledThreadPoolExecutor(numThreads,\n        new ThreadFactoryBuilder().setNameFormat(\"EntityLogPluginWorker #%d\")\n            .build());\n    executor.scheduleAtFixedRate(new EntityLogScanner(), 0, scanIntervalSecs,\n        TimeUnit.SECONDS);\n    executor.scheduleAtFixedRate(new EntityLogCleaner(), cleanerIntervalSecs,\n        cleanerIntervalSecs, TimeUnit.SECONDS);\n    super.serviceStart();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java"
    }
  }
}