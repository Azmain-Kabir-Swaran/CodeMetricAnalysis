{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ApplicationMaster.java",
  "functionName": "onContainersCompleted",
  "functionId": "onContainersCompleted___completedContainers-List__ContainerStatus__",
  "sourceFilePath": "hadoop-tools/hadoop-dynamometer/hadoop-dynamometer-infra/src/main/java/org/apache/hadoop/tools/dynamometer/ApplicationMaster.java",
  "functionStartLine": 462,
  "functionEndLine": 508,
  "numCommitsSeen": 2,
  "timeTaken": 399,
  "changeHistory": [
    "ab0b180ddb5d0775a2452d5eeb7badd252aadb91"
  ],
  "changeHistoryShort": {
    "ab0b180ddb5d0775a2452d5eeb7badd252aadb91": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ab0b180ddb5d0775a2452d5eeb7badd252aadb91": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-12345 Add Dynamometer to hadoop-tools, a tool for scale testing the HDFS NameNode with real metadata and workloads. Contributed by Erik Krogen.\n",
      "commitDate": "25/06/19 8:07 AM",
      "commitName": "ab0b180ddb5d0775a2452d5eeb7badd252aadb91",
      "commitAuthor": "Erik Krogen",
      "diff": "@@ -0,0 +1,47 @@\n+    public void onContainersCompleted(\n+        List\u003cContainerStatus\u003e completedContainers) {\n+      LOG.info(\"Got response from RM for container ask, completedCnt\u003d\"\n+          + completedContainers.size());\n+      for (ContainerStatus containerStatus : completedContainers) {\n+        String containerInfo \u003d \"containerID\u003d\" + containerStatus.getContainerId()\n+            + \", state\u003d\" + containerStatus.getState() + \", exitStatus\u003d\"\n+            + containerStatus.getExitStatus() + \", diagnostics\u003d\"\n+            + StringUtils.abbreviate(containerStatus.getDiagnostics(), 1000);\n+        String component;\n+        if (isNameNode(containerStatus.getContainerId())) {\n+          component \u003d \"NAMENODE\";\n+        } else if (isDataNode(containerStatus.getContainerId())) {\n+          component \u003d \"DATANODE\";\n+        } else {\n+          LOG.error(\"Received container status for unknown container: \"\n+              + containerInfo);\n+          continue;\n+        }\n+        LOG.info(\n+            \"Got container status for \" + component + \": \" + containerInfo);\n+\n+        // non complete containers should not be here\n+        assert (containerStatus.getState() \u003d\u003d ContainerState.COMPLETE);\n+\n+        if (component.equals(\"NAMENODE\")) {\n+          LOG.info(\"NameNode container completed; marking application as done\");\n+          markCompleted();\n+        }\n+\n+        // increment counters for completed/failed containers\n+        int exitStatus \u003d containerStatus.getExitStatus();\n+        int completedIdx \u003d numCompletedDataNodeContainers.incrementAndGet();\n+        if (0 !\u003d exitStatus) {\n+          numFailedDataNodeContainers.incrementAndGet();\n+        } else {\n+          LOG.info(\"DataNode {} completed successfully, containerId\u003d{}\",\n+              completedIdx, containerStatus.getContainerId());\n+        }\n+      }\n+\n+      if (numCompletedDataNodeContainers.get() \u003d\u003d numTotalDataNodeContainers) {\n+        LOG.info(\n+            \"All datanode containers completed; marking application as done\");\n+        markCompleted();\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void onContainersCompleted(\n        List\u003cContainerStatus\u003e completedContainers) {\n      LOG.info(\"Got response from RM for container ask, completedCnt\u003d\"\n          + completedContainers.size());\n      for (ContainerStatus containerStatus : completedContainers) {\n        String containerInfo \u003d \"containerID\u003d\" + containerStatus.getContainerId()\n            + \", state\u003d\" + containerStatus.getState() + \", exitStatus\u003d\"\n            + containerStatus.getExitStatus() + \", diagnostics\u003d\"\n            + StringUtils.abbreviate(containerStatus.getDiagnostics(), 1000);\n        String component;\n        if (isNameNode(containerStatus.getContainerId())) {\n          component \u003d \"NAMENODE\";\n        } else if (isDataNode(containerStatus.getContainerId())) {\n          component \u003d \"DATANODE\";\n        } else {\n          LOG.error(\"Received container status for unknown container: \"\n              + containerInfo);\n          continue;\n        }\n        LOG.info(\n            \"Got container status for \" + component + \": \" + containerInfo);\n\n        // non complete containers should not be here\n        assert (containerStatus.getState() \u003d\u003d ContainerState.COMPLETE);\n\n        if (component.equals(\"NAMENODE\")) {\n          LOG.info(\"NameNode container completed; marking application as done\");\n          markCompleted();\n        }\n\n        // increment counters for completed/failed containers\n        int exitStatus \u003d containerStatus.getExitStatus();\n        int completedIdx \u003d numCompletedDataNodeContainers.incrementAndGet();\n        if (0 !\u003d exitStatus) {\n          numFailedDataNodeContainers.incrementAndGet();\n        } else {\n          LOG.info(\"DataNode {} completed successfully, containerId\u003d{}\",\n              completedIdx, containerStatus.getContainerId());\n        }\n      }\n\n      if (numCompletedDataNodeContainers.get() \u003d\u003d numTotalDataNodeContainers) {\n        LOG.info(\n            \"All datanode containers completed; marking application as done\");\n        markCompleted();\n      }\n    }",
      "path": "hadoop-tools/hadoop-dynamometer/hadoop-dynamometer-infra/src/main/java/org/apache/hadoop/tools/dynamometer/ApplicationMaster.java"
    }
  }
}