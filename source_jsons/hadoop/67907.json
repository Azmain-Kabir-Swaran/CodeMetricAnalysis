{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DistCpSync.java",
  "functionName": "prepareDiffListForCopyListing",
  "functionId": "prepareDiffListForCopyListing",
  "sourceFilePath": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCpSync.java",
  "functionStartLine": 533,
  "functionEndLine": 558,
  "numCommitsSeen": 33,
  "timeTaken": 3759,
  "changeHistory": [
    "8650cc84f20e7d8c32dcdcd91c94372d476e2276",
    "0bc6d37f3c1e7c2a8682dffa95461a884bd6ba17",
    "412c4c9a342b73bf1c1a7f43ea91245cbf94d02d",
    "0bc15cb6e60dc60885234e01dec1c7cb4557a926"
  ],
  "changeHistoryShort": {
    "8650cc84f20e7d8c32dcdcd91c94372d476e2276": "Ymultichange(Yrename,Ybodychange)",
    "0bc6d37f3c1e7c2a8682dffa95461a884bd6ba17": "Ymultichange(Yrename,Ybodychange)",
    "412c4c9a342b73bf1c1a7f43ea91245cbf94d02d": "Ymultichange(Yrename,Ybodychange)",
    "0bc15cb6e60dc60885234e01dec1c7cb4557a926": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8650cc84f20e7d8c32dcdcd91c94372d476e2276": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "HDFS-9820. Improve distcp to support efficient restore to an earlier snapshot. Contributed by Yongjun Zhang.\n",
      "commitDate": "19/10/16 5:37 PM",
      "commitName": "8650cc84f20e7d8c32dcdcd91c94372d476e2276",
      "commitAuthor": "Yongjun Zhang",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-9820. Improve distcp to support efficient restore to an earlier snapshot. Contributed by Yongjun Zhang.\n",
          "commitDate": "19/10/16 5:37 PM",
          "commitName": "8650cc84f20e7d8c32dcdcd91c94372d476e2276",
          "commitAuthor": "Yongjun Zhang",
          "commitDateOld": "17/10/16 10:47 PM",
          "commitNameOld": "0bc6d37f3c1e7c2a8682dffa95461a884bd6ba17",
          "commitAuthorOld": "Yongjun Zhang",
          "daysBetweenCommits": 1.78,
          "commitsBetweenForRepo": 15,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,26 @@\n-  public ArrayList\u003cDiffInfo\u003e prepareDiffList() {\n+  public ArrayList\u003cDiffInfo\u003e prepareDiffListForCopyListing() {\n     DiffInfo[] modifyAndCreateDiffs \u003d getCreateAndModifyDiffs();\n-\n-    List\u003cDiffInfo\u003e renameDiffsList \u003d\n-        diffMap.get(SnapshotDiffReport.DiffType.RENAME);\n-    DiffInfo[] renameDiffArray \u003d\n-        renameDiffsList.toArray(new DiffInfo[renameDiffsList.size()]);\n-    Arrays.sort(renameDiffArray, DiffInfo.sourceComparator);\n-\n     ArrayList\u003cDiffInfo\u003e finalListWithTarget \u003d new ArrayList\u003c\u003e();\n-    for (DiffInfo diff : modifyAndCreateDiffs) {\n-      DiffInfo renameItem \u003d getRenameItem(diff, renameDiffArray);\n-      if (renameItem \u003d\u003d null) {\n-        diff.target \u003d diff.source;\n-      } else {\n-        diff.target \u003d getTargetPath(diff.source, renameItem);\n+    if (isRdiff()) {\n+      for (DiffInfo diff : modifyAndCreateDiffs) {\n+        diff.setTarget(diff.getSource());\n+        finalListWithTarget.add(diff);\n       }\n-      finalListWithTarget.add(diff);\n+    } else {\n+      List\u003cDiffInfo\u003e renameDiffsList \u003d\n+          diffMap.get(SnapshotDiffReport.DiffType.RENAME);\n+      DiffInfo[] renameDiffArray \u003d\n+          renameDiffsList.toArray(new DiffInfo[renameDiffsList.size()]);\n+      Arrays.sort(renameDiffArray, DiffInfo.sourceComparator);\n+      for (DiffInfo diff : modifyAndCreateDiffs) {\n+        DiffInfo renameItem \u003d getRenameItem(diff, renameDiffArray);\n+        if (renameItem \u003d\u003d null) {\n+          diff.setTarget(diff.getSource());\n+        } else {\n+          diff.setTarget(translateRenamedPath(diff.getSource(), renameItem));\n+        }\n+        finalListWithTarget.add(diff);\n+      }\n     }\n     return finalListWithTarget;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ArrayList\u003cDiffInfo\u003e prepareDiffListForCopyListing() {\n    DiffInfo[] modifyAndCreateDiffs \u003d getCreateAndModifyDiffs();\n    ArrayList\u003cDiffInfo\u003e finalListWithTarget \u003d new ArrayList\u003c\u003e();\n    if (isRdiff()) {\n      for (DiffInfo diff : modifyAndCreateDiffs) {\n        diff.setTarget(diff.getSource());\n        finalListWithTarget.add(diff);\n      }\n    } else {\n      List\u003cDiffInfo\u003e renameDiffsList \u003d\n          diffMap.get(SnapshotDiffReport.DiffType.RENAME);\n      DiffInfo[] renameDiffArray \u003d\n          renameDiffsList.toArray(new DiffInfo[renameDiffsList.size()]);\n      Arrays.sort(renameDiffArray, DiffInfo.sourceComparator);\n      for (DiffInfo diff : modifyAndCreateDiffs) {\n        DiffInfo renameItem \u003d getRenameItem(diff, renameDiffArray);\n        if (renameItem \u003d\u003d null) {\n          diff.setTarget(diff.getSource());\n        } else {\n          diff.setTarget(translateRenamedPath(diff.getSource(), renameItem));\n        }\n        finalListWithTarget.add(diff);\n      }\n    }\n    return finalListWithTarget;\n  }",
          "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCpSync.java",
          "extendedDetails": {
            "oldValue": "prepareDiffList",
            "newValue": "prepareDiffListForCopyListing"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-9820. Improve distcp to support efficient restore to an earlier snapshot. Contributed by Yongjun Zhang.\n",
          "commitDate": "19/10/16 5:37 PM",
          "commitName": "8650cc84f20e7d8c32dcdcd91c94372d476e2276",
          "commitAuthor": "Yongjun Zhang",
          "commitDateOld": "17/10/16 10:47 PM",
          "commitNameOld": "0bc6d37f3c1e7c2a8682dffa95461a884bd6ba17",
          "commitAuthorOld": "Yongjun Zhang",
          "daysBetweenCommits": 1.78,
          "commitsBetweenForRepo": 15,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,26 @@\n-  public ArrayList\u003cDiffInfo\u003e prepareDiffList() {\n+  public ArrayList\u003cDiffInfo\u003e prepareDiffListForCopyListing() {\n     DiffInfo[] modifyAndCreateDiffs \u003d getCreateAndModifyDiffs();\n-\n-    List\u003cDiffInfo\u003e renameDiffsList \u003d\n-        diffMap.get(SnapshotDiffReport.DiffType.RENAME);\n-    DiffInfo[] renameDiffArray \u003d\n-        renameDiffsList.toArray(new DiffInfo[renameDiffsList.size()]);\n-    Arrays.sort(renameDiffArray, DiffInfo.sourceComparator);\n-\n     ArrayList\u003cDiffInfo\u003e finalListWithTarget \u003d new ArrayList\u003c\u003e();\n-    for (DiffInfo diff : modifyAndCreateDiffs) {\n-      DiffInfo renameItem \u003d getRenameItem(diff, renameDiffArray);\n-      if (renameItem \u003d\u003d null) {\n-        diff.target \u003d diff.source;\n-      } else {\n-        diff.target \u003d getTargetPath(diff.source, renameItem);\n+    if (isRdiff()) {\n+      for (DiffInfo diff : modifyAndCreateDiffs) {\n+        diff.setTarget(diff.getSource());\n+        finalListWithTarget.add(diff);\n       }\n-      finalListWithTarget.add(diff);\n+    } else {\n+      List\u003cDiffInfo\u003e renameDiffsList \u003d\n+          diffMap.get(SnapshotDiffReport.DiffType.RENAME);\n+      DiffInfo[] renameDiffArray \u003d\n+          renameDiffsList.toArray(new DiffInfo[renameDiffsList.size()]);\n+      Arrays.sort(renameDiffArray, DiffInfo.sourceComparator);\n+      for (DiffInfo diff : modifyAndCreateDiffs) {\n+        DiffInfo renameItem \u003d getRenameItem(diff, renameDiffArray);\n+        if (renameItem \u003d\u003d null) {\n+          diff.setTarget(diff.getSource());\n+        } else {\n+          diff.setTarget(translateRenamedPath(diff.getSource(), renameItem));\n+        }\n+        finalListWithTarget.add(diff);\n+      }\n     }\n     return finalListWithTarget;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ArrayList\u003cDiffInfo\u003e prepareDiffListForCopyListing() {\n    DiffInfo[] modifyAndCreateDiffs \u003d getCreateAndModifyDiffs();\n    ArrayList\u003cDiffInfo\u003e finalListWithTarget \u003d new ArrayList\u003c\u003e();\n    if (isRdiff()) {\n      for (DiffInfo diff : modifyAndCreateDiffs) {\n        diff.setTarget(diff.getSource());\n        finalListWithTarget.add(diff);\n      }\n    } else {\n      List\u003cDiffInfo\u003e renameDiffsList \u003d\n          diffMap.get(SnapshotDiffReport.DiffType.RENAME);\n      DiffInfo[] renameDiffArray \u003d\n          renameDiffsList.toArray(new DiffInfo[renameDiffsList.size()]);\n      Arrays.sort(renameDiffArray, DiffInfo.sourceComparator);\n      for (DiffInfo diff : modifyAndCreateDiffs) {\n        DiffInfo renameItem \u003d getRenameItem(diff, renameDiffArray);\n        if (renameItem \u003d\u003d null) {\n          diff.setTarget(diff.getSource());\n        } else {\n          diff.setTarget(translateRenamedPath(diff.getSource(), renameItem));\n        }\n        finalListWithTarget.add(diff);\n      }\n    }\n    return finalListWithTarget;\n  }",
          "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCpSync.java",
          "extendedDetails": {}
        }
      ]
    },
    "0bc6d37f3c1e7c2a8682dffa95461a884bd6ba17": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "Revert \"HDFS-9820. Improve distcp to support efficient restore to an earlier snapshot. Contributed by Yongjun Zhang.\"\n\nThis reverts commit 412c4c9a342b73bf1c1a7f43ea91245cbf94d02d.\n",
      "commitDate": "17/10/16 10:47 PM",
      "commitName": "0bc6d37f3c1e7c2a8682dffa95461a884bd6ba17",
      "commitAuthor": "Yongjun Zhang",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "Revert \"HDFS-9820. Improve distcp to support efficient restore to an earlier snapshot. Contributed by Yongjun Zhang.\"\n\nThis reverts commit 412c4c9a342b73bf1c1a7f43ea91245cbf94d02d.\n",
          "commitDate": "17/10/16 10:47 PM",
          "commitName": "0bc6d37f3c1e7c2a8682dffa95461a884bd6ba17",
          "commitAuthor": "Yongjun Zhang",
          "commitDateOld": "17/10/16 11:04 AM",
          "commitNameOld": "412c4c9a342b73bf1c1a7f43ea91245cbf94d02d",
          "commitAuthorOld": "Yongjun Zhang",
          "daysBetweenCommits": 0.49,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,21 @@\n-  public ArrayList\u003cDiffInfo\u003e prepareDiffListForCopyListing() {\n+  public ArrayList\u003cDiffInfo\u003e prepareDiffList() {\n     DiffInfo[] modifyAndCreateDiffs \u003d getCreateAndModifyDiffs();\n+\n+    List\u003cDiffInfo\u003e renameDiffsList \u003d\n+        diffMap.get(SnapshotDiffReport.DiffType.RENAME);\n+    DiffInfo[] renameDiffArray \u003d\n+        renameDiffsList.toArray(new DiffInfo[renameDiffsList.size()]);\n+    Arrays.sort(renameDiffArray, DiffInfo.sourceComparator);\n+\n     ArrayList\u003cDiffInfo\u003e finalListWithTarget \u003d new ArrayList\u003c\u003e();\n-    if (isRdiff()) {\n-      for (DiffInfo diff : modifyAndCreateDiffs) {\n-        diff.setTarget(diff.getSource());\n-        finalListWithTarget.add(diff);\n+    for (DiffInfo diff : modifyAndCreateDiffs) {\n+      DiffInfo renameItem \u003d getRenameItem(diff, renameDiffArray);\n+      if (renameItem \u003d\u003d null) {\n+        diff.target \u003d diff.source;\n+      } else {\n+        diff.target \u003d getTargetPath(diff.source, renameItem);\n       }\n-    } else {\n-      List\u003cDiffInfo\u003e renameDiffsList \u003d\n-          diffMap.get(SnapshotDiffReport.DiffType.RENAME);\n-      DiffInfo[] renameDiffArray \u003d\n-          renameDiffsList.toArray(new DiffInfo[renameDiffsList.size()]);\n-      Arrays.sort(renameDiffArray, DiffInfo.sourceComparator);\n-      for (DiffInfo diff : modifyAndCreateDiffs) {\n-        DiffInfo renameItem \u003d getRenameItem(diff, renameDiffArray);\n-        if (renameItem \u003d\u003d null) {\n-          diff.setTarget(diff.getSource());\n-        } else {\n-          diff.setTarget(translateRenamedPath(diff.getSource(), renameItem));\n-        }\n-        finalListWithTarget.add(diff);\n-      }\n+      finalListWithTarget.add(diff);\n     }\n     return finalListWithTarget;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ArrayList\u003cDiffInfo\u003e prepareDiffList() {\n    DiffInfo[] modifyAndCreateDiffs \u003d getCreateAndModifyDiffs();\n\n    List\u003cDiffInfo\u003e renameDiffsList \u003d\n        diffMap.get(SnapshotDiffReport.DiffType.RENAME);\n    DiffInfo[] renameDiffArray \u003d\n        renameDiffsList.toArray(new DiffInfo[renameDiffsList.size()]);\n    Arrays.sort(renameDiffArray, DiffInfo.sourceComparator);\n\n    ArrayList\u003cDiffInfo\u003e finalListWithTarget \u003d new ArrayList\u003c\u003e();\n    for (DiffInfo diff : modifyAndCreateDiffs) {\n      DiffInfo renameItem \u003d getRenameItem(diff, renameDiffArray);\n      if (renameItem \u003d\u003d null) {\n        diff.target \u003d diff.source;\n      } else {\n        diff.target \u003d getTargetPath(diff.source, renameItem);\n      }\n      finalListWithTarget.add(diff);\n    }\n    return finalListWithTarget;\n  }",
          "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCpSync.java",
          "extendedDetails": {
            "oldValue": "prepareDiffListForCopyListing",
            "newValue": "prepareDiffList"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Revert \"HDFS-9820. Improve distcp to support efficient restore to an earlier snapshot. Contributed by Yongjun Zhang.\"\n\nThis reverts commit 412c4c9a342b73bf1c1a7f43ea91245cbf94d02d.\n",
          "commitDate": "17/10/16 10:47 PM",
          "commitName": "0bc6d37f3c1e7c2a8682dffa95461a884bd6ba17",
          "commitAuthor": "Yongjun Zhang",
          "commitDateOld": "17/10/16 11:04 AM",
          "commitNameOld": "412c4c9a342b73bf1c1a7f43ea91245cbf94d02d",
          "commitAuthorOld": "Yongjun Zhang",
          "daysBetweenCommits": 0.49,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,21 @@\n-  public ArrayList\u003cDiffInfo\u003e prepareDiffListForCopyListing() {\n+  public ArrayList\u003cDiffInfo\u003e prepareDiffList() {\n     DiffInfo[] modifyAndCreateDiffs \u003d getCreateAndModifyDiffs();\n+\n+    List\u003cDiffInfo\u003e renameDiffsList \u003d\n+        diffMap.get(SnapshotDiffReport.DiffType.RENAME);\n+    DiffInfo[] renameDiffArray \u003d\n+        renameDiffsList.toArray(new DiffInfo[renameDiffsList.size()]);\n+    Arrays.sort(renameDiffArray, DiffInfo.sourceComparator);\n+\n     ArrayList\u003cDiffInfo\u003e finalListWithTarget \u003d new ArrayList\u003c\u003e();\n-    if (isRdiff()) {\n-      for (DiffInfo diff : modifyAndCreateDiffs) {\n-        diff.setTarget(diff.getSource());\n-        finalListWithTarget.add(diff);\n+    for (DiffInfo diff : modifyAndCreateDiffs) {\n+      DiffInfo renameItem \u003d getRenameItem(diff, renameDiffArray);\n+      if (renameItem \u003d\u003d null) {\n+        diff.target \u003d diff.source;\n+      } else {\n+        diff.target \u003d getTargetPath(diff.source, renameItem);\n       }\n-    } else {\n-      List\u003cDiffInfo\u003e renameDiffsList \u003d\n-          diffMap.get(SnapshotDiffReport.DiffType.RENAME);\n-      DiffInfo[] renameDiffArray \u003d\n-          renameDiffsList.toArray(new DiffInfo[renameDiffsList.size()]);\n-      Arrays.sort(renameDiffArray, DiffInfo.sourceComparator);\n-      for (DiffInfo diff : modifyAndCreateDiffs) {\n-        DiffInfo renameItem \u003d getRenameItem(diff, renameDiffArray);\n-        if (renameItem \u003d\u003d null) {\n-          diff.setTarget(diff.getSource());\n-        } else {\n-          diff.setTarget(translateRenamedPath(diff.getSource(), renameItem));\n-        }\n-        finalListWithTarget.add(diff);\n-      }\n+      finalListWithTarget.add(diff);\n     }\n     return finalListWithTarget;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ArrayList\u003cDiffInfo\u003e prepareDiffList() {\n    DiffInfo[] modifyAndCreateDiffs \u003d getCreateAndModifyDiffs();\n\n    List\u003cDiffInfo\u003e renameDiffsList \u003d\n        diffMap.get(SnapshotDiffReport.DiffType.RENAME);\n    DiffInfo[] renameDiffArray \u003d\n        renameDiffsList.toArray(new DiffInfo[renameDiffsList.size()]);\n    Arrays.sort(renameDiffArray, DiffInfo.sourceComparator);\n\n    ArrayList\u003cDiffInfo\u003e finalListWithTarget \u003d new ArrayList\u003c\u003e();\n    for (DiffInfo diff : modifyAndCreateDiffs) {\n      DiffInfo renameItem \u003d getRenameItem(diff, renameDiffArray);\n      if (renameItem \u003d\u003d null) {\n        diff.target \u003d diff.source;\n      } else {\n        diff.target \u003d getTargetPath(diff.source, renameItem);\n      }\n      finalListWithTarget.add(diff);\n    }\n    return finalListWithTarget;\n  }",
          "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCpSync.java",
          "extendedDetails": {}
        }
      ]
    },
    "412c4c9a342b73bf1c1a7f43ea91245cbf94d02d": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "HDFS-9820. Improve distcp to support efficient restore to an earlier snapshot. Contributed by Yongjun Zhang.\n",
      "commitDate": "17/10/16 11:04 AM",
      "commitName": "412c4c9a342b73bf1c1a7f43ea91245cbf94d02d",
      "commitAuthor": "Yongjun Zhang",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-9820. Improve distcp to support efficient restore to an earlier snapshot. Contributed by Yongjun Zhang.\n",
          "commitDate": "17/10/16 11:04 AM",
          "commitName": "412c4c9a342b73bf1c1a7f43ea91245cbf94d02d",
          "commitAuthor": "Yongjun Zhang",
          "commitDateOld": "26/04/16 4:08 PM",
          "commitNameOld": "959a28dd1216dfac78d05b438828e8503108d963",
          "commitAuthorOld": "Yongjun Zhang",
          "daysBetweenCommits": 173.79,
          "commitsBetweenForRepo": 1276,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,26 @@\n-  public ArrayList\u003cDiffInfo\u003e prepareDiffList() {\n+  public ArrayList\u003cDiffInfo\u003e prepareDiffListForCopyListing() {\n     DiffInfo[] modifyAndCreateDiffs \u003d getCreateAndModifyDiffs();\n-\n-    List\u003cDiffInfo\u003e renameDiffsList \u003d\n-        diffMap.get(SnapshotDiffReport.DiffType.RENAME);\n-    DiffInfo[] renameDiffArray \u003d\n-        renameDiffsList.toArray(new DiffInfo[renameDiffsList.size()]);\n-    Arrays.sort(renameDiffArray, DiffInfo.sourceComparator);\n-\n     ArrayList\u003cDiffInfo\u003e finalListWithTarget \u003d new ArrayList\u003c\u003e();\n-    for (DiffInfo diff : modifyAndCreateDiffs) {\n-      DiffInfo renameItem \u003d getRenameItem(diff, renameDiffArray);\n-      if (renameItem \u003d\u003d null) {\n-        diff.target \u003d diff.source;\n-      } else {\n-        diff.target \u003d getTargetPath(diff.source, renameItem);\n+    if (isRdiff()) {\n+      for (DiffInfo diff : modifyAndCreateDiffs) {\n+        diff.setTarget(diff.getSource());\n+        finalListWithTarget.add(diff);\n       }\n-      finalListWithTarget.add(diff);\n+    } else {\n+      List\u003cDiffInfo\u003e renameDiffsList \u003d\n+          diffMap.get(SnapshotDiffReport.DiffType.RENAME);\n+      DiffInfo[] renameDiffArray \u003d\n+          renameDiffsList.toArray(new DiffInfo[renameDiffsList.size()]);\n+      Arrays.sort(renameDiffArray, DiffInfo.sourceComparator);\n+      for (DiffInfo diff : modifyAndCreateDiffs) {\n+        DiffInfo renameItem \u003d getRenameItem(diff, renameDiffArray);\n+        if (renameItem \u003d\u003d null) {\n+          diff.setTarget(diff.getSource());\n+        } else {\n+          diff.setTarget(translateRenamedPath(diff.getSource(), renameItem));\n+        }\n+        finalListWithTarget.add(diff);\n+      }\n     }\n     return finalListWithTarget;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ArrayList\u003cDiffInfo\u003e prepareDiffListForCopyListing() {\n    DiffInfo[] modifyAndCreateDiffs \u003d getCreateAndModifyDiffs();\n    ArrayList\u003cDiffInfo\u003e finalListWithTarget \u003d new ArrayList\u003c\u003e();\n    if (isRdiff()) {\n      for (DiffInfo diff : modifyAndCreateDiffs) {\n        diff.setTarget(diff.getSource());\n        finalListWithTarget.add(diff);\n      }\n    } else {\n      List\u003cDiffInfo\u003e renameDiffsList \u003d\n          diffMap.get(SnapshotDiffReport.DiffType.RENAME);\n      DiffInfo[] renameDiffArray \u003d\n          renameDiffsList.toArray(new DiffInfo[renameDiffsList.size()]);\n      Arrays.sort(renameDiffArray, DiffInfo.sourceComparator);\n      for (DiffInfo diff : modifyAndCreateDiffs) {\n        DiffInfo renameItem \u003d getRenameItem(diff, renameDiffArray);\n        if (renameItem \u003d\u003d null) {\n          diff.setTarget(diff.getSource());\n        } else {\n          diff.setTarget(translateRenamedPath(diff.getSource(), renameItem));\n        }\n        finalListWithTarget.add(diff);\n      }\n    }\n    return finalListWithTarget;\n  }",
          "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCpSync.java",
          "extendedDetails": {
            "oldValue": "prepareDiffList",
            "newValue": "prepareDiffListForCopyListing"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-9820. Improve distcp to support efficient restore to an earlier snapshot. Contributed by Yongjun Zhang.\n",
          "commitDate": "17/10/16 11:04 AM",
          "commitName": "412c4c9a342b73bf1c1a7f43ea91245cbf94d02d",
          "commitAuthor": "Yongjun Zhang",
          "commitDateOld": "26/04/16 4:08 PM",
          "commitNameOld": "959a28dd1216dfac78d05b438828e8503108d963",
          "commitAuthorOld": "Yongjun Zhang",
          "daysBetweenCommits": 173.79,
          "commitsBetweenForRepo": 1276,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,26 @@\n-  public ArrayList\u003cDiffInfo\u003e prepareDiffList() {\n+  public ArrayList\u003cDiffInfo\u003e prepareDiffListForCopyListing() {\n     DiffInfo[] modifyAndCreateDiffs \u003d getCreateAndModifyDiffs();\n-\n-    List\u003cDiffInfo\u003e renameDiffsList \u003d\n-        diffMap.get(SnapshotDiffReport.DiffType.RENAME);\n-    DiffInfo[] renameDiffArray \u003d\n-        renameDiffsList.toArray(new DiffInfo[renameDiffsList.size()]);\n-    Arrays.sort(renameDiffArray, DiffInfo.sourceComparator);\n-\n     ArrayList\u003cDiffInfo\u003e finalListWithTarget \u003d new ArrayList\u003c\u003e();\n-    for (DiffInfo diff : modifyAndCreateDiffs) {\n-      DiffInfo renameItem \u003d getRenameItem(diff, renameDiffArray);\n-      if (renameItem \u003d\u003d null) {\n-        diff.target \u003d diff.source;\n-      } else {\n-        diff.target \u003d getTargetPath(diff.source, renameItem);\n+    if (isRdiff()) {\n+      for (DiffInfo diff : modifyAndCreateDiffs) {\n+        diff.setTarget(diff.getSource());\n+        finalListWithTarget.add(diff);\n       }\n-      finalListWithTarget.add(diff);\n+    } else {\n+      List\u003cDiffInfo\u003e renameDiffsList \u003d\n+          diffMap.get(SnapshotDiffReport.DiffType.RENAME);\n+      DiffInfo[] renameDiffArray \u003d\n+          renameDiffsList.toArray(new DiffInfo[renameDiffsList.size()]);\n+      Arrays.sort(renameDiffArray, DiffInfo.sourceComparator);\n+      for (DiffInfo diff : modifyAndCreateDiffs) {\n+        DiffInfo renameItem \u003d getRenameItem(diff, renameDiffArray);\n+        if (renameItem \u003d\u003d null) {\n+          diff.setTarget(diff.getSource());\n+        } else {\n+          diff.setTarget(translateRenamedPath(diff.getSource(), renameItem));\n+        }\n+        finalListWithTarget.add(diff);\n+      }\n     }\n     return finalListWithTarget;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ArrayList\u003cDiffInfo\u003e prepareDiffListForCopyListing() {\n    DiffInfo[] modifyAndCreateDiffs \u003d getCreateAndModifyDiffs();\n    ArrayList\u003cDiffInfo\u003e finalListWithTarget \u003d new ArrayList\u003c\u003e();\n    if (isRdiff()) {\n      for (DiffInfo diff : modifyAndCreateDiffs) {\n        diff.setTarget(diff.getSource());\n        finalListWithTarget.add(diff);\n      }\n    } else {\n      List\u003cDiffInfo\u003e renameDiffsList \u003d\n          diffMap.get(SnapshotDiffReport.DiffType.RENAME);\n      DiffInfo[] renameDiffArray \u003d\n          renameDiffsList.toArray(new DiffInfo[renameDiffsList.size()]);\n      Arrays.sort(renameDiffArray, DiffInfo.sourceComparator);\n      for (DiffInfo diff : modifyAndCreateDiffs) {\n        DiffInfo renameItem \u003d getRenameItem(diff, renameDiffArray);\n        if (renameItem \u003d\u003d null) {\n          diff.setTarget(diff.getSource());\n        } else {\n          diff.setTarget(translateRenamedPath(diff.getSource(), renameItem));\n        }\n        finalListWithTarget.add(diff);\n      }\n    }\n    return finalListWithTarget;\n  }",
          "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCpSync.java",
          "extendedDetails": {}
        }
      ]
    },
    "0bc15cb6e60dc60885234e01dec1c7cb4557a926": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-8828. Utilize Snapshot diff report to build diff copy list in distcp. (Yufei Gu via Yongjun Zhang)\n",
      "commitDate": "20/08/15 8:02 AM",
      "commitName": "0bc15cb6e60dc60885234e01dec1c7cb4557a926",
      "commitAuthor": "Yongjun Zhang",
      "diff": "@@ -0,0 +1,21 @@\n+  public ArrayList\u003cDiffInfo\u003e prepareDiffList() {\n+    DiffInfo[] modifyAndCreateDiffs \u003d getCreateAndModifyDiffs();\n+\n+    List\u003cDiffInfo\u003e renameDiffsList \u003d\n+        diffMap.get(SnapshotDiffReport.DiffType.RENAME);\n+    DiffInfo[] renameDiffArray \u003d\n+        renameDiffsList.toArray(new DiffInfo[renameDiffsList.size()]);\n+    Arrays.sort(renameDiffArray, DiffInfo.sourceComparator);\n+\n+    ArrayList\u003cDiffInfo\u003e finalListWithTarget \u003d new ArrayList\u003c\u003e();\n+    for (DiffInfo diff : modifyAndCreateDiffs) {\n+      DiffInfo renameItem \u003d getRenameItem(diff, renameDiffArray);\n+      if (renameItem \u003d\u003d null) {\n+        diff.target \u003d diff.source;\n+      } else {\n+        diff.target \u003d getTargetPath(diff.source, renameItem);\n+      }\n+      finalListWithTarget.add(diff);\n+    }\n+    return finalListWithTarget;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public ArrayList\u003cDiffInfo\u003e prepareDiffList() {\n    DiffInfo[] modifyAndCreateDiffs \u003d getCreateAndModifyDiffs();\n\n    List\u003cDiffInfo\u003e renameDiffsList \u003d\n        diffMap.get(SnapshotDiffReport.DiffType.RENAME);\n    DiffInfo[] renameDiffArray \u003d\n        renameDiffsList.toArray(new DiffInfo[renameDiffsList.size()]);\n    Arrays.sort(renameDiffArray, DiffInfo.sourceComparator);\n\n    ArrayList\u003cDiffInfo\u003e finalListWithTarget \u003d new ArrayList\u003c\u003e();\n    for (DiffInfo diff : modifyAndCreateDiffs) {\n      DiffInfo renameItem \u003d getRenameItem(diff, renameDiffArray);\n      if (renameItem \u003d\u003d null) {\n        diff.target \u003d diff.source;\n      } else {\n        diff.target \u003d getTargetPath(diff.source, renameItem);\n      }\n      finalListWithTarget.add(diff);\n    }\n    return finalListWithTarget;\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/DistCpSync.java"
    }
  }
}