{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DockerLinuxContainerRuntime.java",
  "functionName": "checkDockerVolumeCreated",
  "functionId": "checkDockerVolumeCreated___dockerVolumeCreationCommand-DockerVolumeCommand__container-Container",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
  "functionStartLine": 461,
  "functionEndLine": 499,
  "numCommitsSeen": 91,
  "timeTaken": 2575,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "6463e10c72344e1720c991307cf2e7b67e112a3a",
    "556aea3f367bdbd4e4db601bea0ca9bf2adde063"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "6463e10c72344e1720c991307cf2e7b67e112a3a": "Ybodychange",
    "556aea3f367bdbd4e4db601bea0ca9bf2adde063": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "12/02/19 1:16 PM",
      "commitNameOld": "3dc252326693170ac1b31bf2914bae72ca73d31a",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 31.09,
      "commitsBetweenForRepo": 294,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,39 @@\n   private void checkDockerVolumeCreated(\n       DockerVolumeCommand dockerVolumeCreationCommand, Container container)\n       throws ContainerExecutionException {\n     DockerVolumeCommand dockerVolumeInspectCommand \u003d new DockerVolumeCommand(\n         DockerVolumeCommand.VOLUME_LS_SUB_COMMAND);\n     String output \u003d runDockerVolumeCommand(dockerVolumeInspectCommand,\n         container);\n \n     // Parse output line by line and check if it matches\n     String volumeName \u003d dockerVolumeCreationCommand.getVolumeName();\n     String driverName \u003d dockerVolumeCreationCommand.getDriverName();\n     if (driverName \u003d\u003d null) {\n       driverName \u003d \"local\";\n     }\n \n     for (String line : output.split(\"\\n\")) {\n       line \u003d line.trim();\n       if (line.contains(volumeName) \u0026\u0026 line.contains(driverName)) {\n         // Good we found it.\n         LOG.info(\n             \"Docker volume-name\u003d\" + volumeName + \" driver-name\u003d\" + driverName\n                 + \" already exists for container\u003d\" + container\n                 .getContainerId() + \", continue...\");\n         return;\n       }\n     }\n \n     // Couldn\u0027t find the volume\n     String message \u003d\n         \" Couldn\u0027t find volume\u003d\" + volumeName + \" driver\u003d\" + driverName\n             + \" for container\u003d\" + container.getContainerId()\n             + \", please check error message in log to understand \"\n             + \"why this happens.\";\n     LOG.error(message);\n-\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"All docker volumes in the system, command\u003d\"\n-          + dockerVolumeInspectCommand.toString());\n-    }\n+    LOG.debug(\"All docker volumes in the system, command\u003d{}\",\n+        dockerVolumeInspectCommand);\n \n     throw new ContainerExecutionException(message);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void checkDockerVolumeCreated(\n      DockerVolumeCommand dockerVolumeCreationCommand, Container container)\n      throws ContainerExecutionException {\n    DockerVolumeCommand dockerVolumeInspectCommand \u003d new DockerVolumeCommand(\n        DockerVolumeCommand.VOLUME_LS_SUB_COMMAND);\n    String output \u003d runDockerVolumeCommand(dockerVolumeInspectCommand,\n        container);\n\n    // Parse output line by line and check if it matches\n    String volumeName \u003d dockerVolumeCreationCommand.getVolumeName();\n    String driverName \u003d dockerVolumeCreationCommand.getDriverName();\n    if (driverName \u003d\u003d null) {\n      driverName \u003d \"local\";\n    }\n\n    for (String line : output.split(\"\\n\")) {\n      line \u003d line.trim();\n      if (line.contains(volumeName) \u0026\u0026 line.contains(driverName)) {\n        // Good we found it.\n        LOG.info(\n            \"Docker volume-name\u003d\" + volumeName + \" driver-name\u003d\" + driverName\n                + \" already exists for container\u003d\" + container\n                .getContainerId() + \", continue...\");\n        return;\n      }\n    }\n\n    // Couldn\u0027t find the volume\n    String message \u003d\n        \" Couldn\u0027t find volume\u003d\" + volumeName + \" driver\u003d\" + driverName\n            + \" for container\u003d\" + container.getContainerId()\n            + \", please check error message in log to understand \"\n            + \"why this happens.\";\n    LOG.error(message);\n    LOG.debug(\"All docker volumes in the system, command\u003d{}\",\n        dockerVolumeInspectCommand);\n\n    throw new ContainerExecutionException(message);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "6463e10c72344e1720c991307cf2e7b67e112a3a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7723. Avoid using docker volume --format option to run against to older docker releases. Contributed by Wangda Tan\n",
      "commitDate": "30/01/18 2:28 AM",
      "commitName": "6463e10c72344e1720c991307cf2e7b67e112a3a",
      "commitAuthor": "Sunil G",
      "commitDateOld": "26/01/18 9:32 AM",
      "commitNameOld": "f2fa736f0ab139b5251d115fd75b833d1d7d1dcd",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 3.71,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,42 @@\n   private void checkDockerVolumeCreated(\n       DockerVolumeCommand dockerVolumeCreationCommand, Container container)\n       throws ContainerExecutionException {\n     DockerVolumeCommand dockerVolumeInspectCommand \u003d new DockerVolumeCommand(\n         DockerVolumeCommand.VOLUME_LS_SUB_COMMAND);\n-    dockerVolumeInspectCommand.setFormat(\"{{.Name}},{{.Driver}}\");\n     String output \u003d runDockerVolumeCommand(dockerVolumeInspectCommand,\n         container);\n \n     // Parse output line by line and check if it matches\n     String volumeName \u003d dockerVolumeCreationCommand.getVolumeName();\n     String driverName \u003d dockerVolumeCreationCommand.getDriverName();\n     if (driverName \u003d\u003d null) {\n       driverName \u003d \"local\";\n     }\n \n     for (String line : output.split(\"\\n\")) {\n       line \u003d line.trim();\n-      String[] arr \u003d line.split(\",\");\n-      String v \u003d arr[0].trim();\n-      String d \u003d null;\n-      if (arr.length \u003e 1) {\n-        d \u003d arr[1].trim();\n-      }\n-      if (d !\u003d null \u0026\u0026 volumeName.equals(v) \u0026\u0026 driverName.equals(d)) {\n+      if (line.contains(volumeName) \u0026\u0026 line.contains(driverName)) {\n         // Good we found it.\n         LOG.info(\n             \"Docker volume-name\u003d\" + volumeName + \" driver-name\u003d\" + driverName\n                 + \" already exists for container\u003d\" + container\n                 .getContainerId() + \", continue...\");\n         return;\n       }\n     }\n \n     // Couldn\u0027t find the volume\n     String message \u003d\n         \" Couldn\u0027t find volume\u003d\" + volumeName + \" driver\u003d\" + driverName\n             + \" for container\u003d\" + container.getContainerId()\n             + \", please check error message in log to understand \"\n             + \"why this happens.\";\n     LOG.error(message);\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"All docker volumes in the system, command\u003d\"\n           + dockerVolumeInspectCommand.toString());\n     }\n \n     throw new ContainerExecutionException(message);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void checkDockerVolumeCreated(\n      DockerVolumeCommand dockerVolumeCreationCommand, Container container)\n      throws ContainerExecutionException {\n    DockerVolumeCommand dockerVolumeInspectCommand \u003d new DockerVolumeCommand(\n        DockerVolumeCommand.VOLUME_LS_SUB_COMMAND);\n    String output \u003d runDockerVolumeCommand(dockerVolumeInspectCommand,\n        container);\n\n    // Parse output line by line and check if it matches\n    String volumeName \u003d dockerVolumeCreationCommand.getVolumeName();\n    String driverName \u003d dockerVolumeCreationCommand.getDriverName();\n    if (driverName \u003d\u003d null) {\n      driverName \u003d \"local\";\n    }\n\n    for (String line : output.split(\"\\n\")) {\n      line \u003d line.trim();\n      if (line.contains(volumeName) \u0026\u0026 line.contains(driverName)) {\n        // Good we found it.\n        LOG.info(\n            \"Docker volume-name\u003d\" + volumeName + \" driver-name\u003d\" + driverName\n                + \" already exists for container\u003d\" + container\n                .getContainerId() + \", continue...\");\n        return;\n      }\n    }\n\n    // Couldn\u0027t find the volume\n    String message \u003d\n        \" Couldn\u0027t find volume\u003d\" + volumeName + \" driver\u003d\" + driverName\n            + \" for container\u003d\" + container.getContainerId()\n            + \", please check error message in log to understand \"\n            + \"why this happens.\";\n    LOG.error(message);\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"All docker volumes in the system, command\u003d\"\n          + dockerVolumeInspectCommand.toString());\n    }\n\n    throw new ContainerExecutionException(message);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "556aea3f367bdbd4e4db601bea0ca9bf2adde063": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7487. Ensure volume to include GPU base libraries after created by plugin. Contributed by Wangda Tan.\n",
      "commitDate": "01/12/17 12:06 AM",
      "commitName": "556aea3f367bdbd4e4db601bea0ca9bf2adde063",
      "commitAuthor": "Sunil G",
      "diff": "@@ -0,0 +1,49 @@\n+  private void checkDockerVolumeCreated(\n+      DockerVolumeCommand dockerVolumeCreationCommand, Container container)\n+      throws ContainerExecutionException {\n+    DockerVolumeCommand dockerVolumeInspectCommand \u003d new DockerVolumeCommand(\n+        DockerVolumeCommand.VOLUME_LS_SUB_COMMAND);\n+    dockerVolumeInspectCommand.setFormat(\"{{.Name}},{{.Driver}}\");\n+    String output \u003d runDockerVolumeCommand(dockerVolumeInspectCommand,\n+        container);\n+\n+    // Parse output line by line and check if it matches\n+    String volumeName \u003d dockerVolumeCreationCommand.getVolumeName();\n+    String driverName \u003d dockerVolumeCreationCommand.getDriverName();\n+    if (driverName \u003d\u003d null) {\n+      driverName \u003d \"local\";\n+    }\n+\n+    for (String line : output.split(\"\\n\")) {\n+      line \u003d line.trim();\n+      String[] arr \u003d line.split(\",\");\n+      String v \u003d arr[0].trim();\n+      String d \u003d null;\n+      if (arr.length \u003e 1) {\n+        d \u003d arr[1].trim();\n+      }\n+      if (d !\u003d null \u0026\u0026 volumeName.equals(v) \u0026\u0026 driverName.equals(d)) {\n+        // Good we found it.\n+        LOG.info(\n+            \"Docker volume-name\u003d\" + volumeName + \" driver-name\u003d\" + driverName\n+                + \" already exists for container\u003d\" + container\n+                .getContainerId() + \", continue...\");\n+        return;\n+      }\n+    }\n+\n+    // Couldn\u0027t find the volume\n+    String message \u003d\n+        \" Couldn\u0027t find volume\u003d\" + volumeName + \" driver\u003d\" + driverName\n+            + \" for container\u003d\" + container.getContainerId()\n+            + \", please check error message in log to understand \"\n+            + \"why this happens.\";\n+    LOG.error(message);\n+\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"All docker volumes in the system, command\u003d\"\n+          + dockerVolumeInspectCommand.toString());\n+    }\n+\n+    throw new ContainerExecutionException(message);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void checkDockerVolumeCreated(\n      DockerVolumeCommand dockerVolumeCreationCommand, Container container)\n      throws ContainerExecutionException {\n    DockerVolumeCommand dockerVolumeInspectCommand \u003d new DockerVolumeCommand(\n        DockerVolumeCommand.VOLUME_LS_SUB_COMMAND);\n    dockerVolumeInspectCommand.setFormat(\"{{.Name}},{{.Driver}}\");\n    String output \u003d runDockerVolumeCommand(dockerVolumeInspectCommand,\n        container);\n\n    // Parse output line by line and check if it matches\n    String volumeName \u003d dockerVolumeCreationCommand.getVolumeName();\n    String driverName \u003d dockerVolumeCreationCommand.getDriverName();\n    if (driverName \u003d\u003d null) {\n      driverName \u003d \"local\";\n    }\n\n    for (String line : output.split(\"\\n\")) {\n      line \u003d line.trim();\n      String[] arr \u003d line.split(\",\");\n      String v \u003d arr[0].trim();\n      String d \u003d null;\n      if (arr.length \u003e 1) {\n        d \u003d arr[1].trim();\n      }\n      if (d !\u003d null \u0026\u0026 volumeName.equals(v) \u0026\u0026 driverName.equals(d)) {\n        // Good we found it.\n        LOG.info(\n            \"Docker volume-name\u003d\" + volumeName + \" driver-name\u003d\" + driverName\n                + \" already exists for container\u003d\" + container\n                .getContainerId() + \", continue...\");\n        return;\n      }\n    }\n\n    // Couldn\u0027t find the volume\n    String message \u003d\n        \" Couldn\u0027t find volume\u003d\" + volumeName + \" driver\u003d\" + driverName\n            + \" for container\u003d\" + container.getContainerId()\n            + \", please check error message in log to understand \"\n            + \"why this happens.\";\n    LOG.error(message);\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"All docker volumes in the system, command\u003d\"\n          + dockerVolumeInspectCommand.toString());\n    }\n\n    throw new ContainerExecutionException(message);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java"
    }
  }
}