{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainerManagerImpl.java",
  "functionName": "preReInitializeOrLocalizeCheck",
  "functionId": "preReInitializeOrLocalizeCheck___containerId-ContainerId__op-ReInitOp",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
  "functionStartLine": 1926,
  "functionEndLine": 1950,
  "numCommitsSeen": 139,
  "timeTaken": 2798,
  "changeHistory": [
    "df800f6cf3ea663daf4081ebe784808b08d9366d",
    "72fe54684198b7df5c5fb2114616dff6d17a4402",
    "4815d024c59cb029e2053d94c7aed33eb8053d3e"
  ],
  "changeHistoryShort": {
    "df800f6cf3ea663daf4081ebe784808b08d9366d": "Ybodychange",
    "72fe54684198b7df5c5fb2114616dff6d17a4402": "Ybodychange",
    "4815d024c59cb029e2053d94c7aed33eb8053d3e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "df800f6cf3ea663daf4081ebe784808b08d9366d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7240. Add more states and transitions to stabilize the NM Container state machine. (Kartheek Muthyala via asuresh)\n",
      "commitDate": "25/09/17 4:02 PM",
      "commitName": "df800f6cf3ea663daf4081ebe784808b08d9366d",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "29/08/17 10:59 PM",
      "commitNameOld": "9b08f365d749185d7ed8e34dc379b2e415a29e99",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 26.71,
      "commitsBetweenForRepo": 264,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,25 @@\n   private Container preReInitializeOrLocalizeCheck(ContainerId containerId,\n       ReInitOp op) throws YarnException {\n     UserGroupInformation remoteUgi \u003d getRemoteUgi();\n     NMTokenIdentifier nmTokenIdentifier \u003d selectNMTokenIdentifier(remoteUgi);\n     authorizeUser(remoteUgi, nmTokenIdentifier);\n     if (!nmTokenIdentifier.getApplicationAttemptId().getApplicationId()\n         .equals(containerId.getApplicationAttemptId().getApplicationId())) {\n       throw new YarnException(\"ApplicationMaster not authorized to perform \" +\n           \"[\"+ op + \"] on Container [\" + containerId + \"]!!\");\n     }\n     Container container \u003d context.getContainers().get(containerId);\n     if (container \u003d\u003d null) {\n       throw new YarnException(\"Specified \" + containerId + \" does not exist!\");\n     }\n-    if (!container.isRunning() || container.isReInitializing()) {\n+    if (!container.isRunning() || container.isReInitializing()\n+        || container.getContainerTokenIdentifier().getExecutionType()\n+        \u003d\u003d ExecutionType.OPPORTUNISTIC) {\n       throw new YarnException(\"Cannot perform \" + op + \" on [\" + containerId\n           + \"]. Current state is [\" + container.getContainerState() + \", \" +\n-          \"isReInitializing\u003d\" + container.isReInitializing() + \"].\");\n+          \"isReInitializing\u003d\" + container.isReInitializing() + \"]. Container\"\n+          + \" Execution Type is [\" + container.getContainerTokenIdentifier()\n+          .getExecutionType() + \"].\");\n     }\n     return container;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Container preReInitializeOrLocalizeCheck(ContainerId containerId,\n      ReInitOp op) throws YarnException {\n    UserGroupInformation remoteUgi \u003d getRemoteUgi();\n    NMTokenIdentifier nmTokenIdentifier \u003d selectNMTokenIdentifier(remoteUgi);\n    authorizeUser(remoteUgi, nmTokenIdentifier);\n    if (!nmTokenIdentifier.getApplicationAttemptId().getApplicationId()\n        .equals(containerId.getApplicationAttemptId().getApplicationId())) {\n      throw new YarnException(\"ApplicationMaster not authorized to perform \" +\n          \"[\"+ op + \"] on Container [\" + containerId + \"]!!\");\n    }\n    Container container \u003d context.getContainers().get(containerId);\n    if (container \u003d\u003d null) {\n      throw new YarnException(\"Specified \" + containerId + \" does not exist!\");\n    }\n    if (!container.isRunning() || container.isReInitializing()\n        || container.getContainerTokenIdentifier().getExecutionType()\n        \u003d\u003d ExecutionType.OPPORTUNISTIC) {\n      throw new YarnException(\"Cannot perform \" + op + \" on [\" + containerId\n          + \"]. Current state is [\" + container.getContainerState() + \", \" +\n          \"isReInitializing\u003d\" + container.isReInitializing() + \"]. Container\"\n          + \" Execution Type is [\" + container.getContainerTokenIdentifier()\n          .getExecutionType() + \"].\");\n    }\n    return container;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "72fe54684198b7df5c5fb2114616dff6d17a4402": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5963. Spelling errors in logging and exceptions for node manager, client, web-proxy, common, and app history code (gsohn via rkanter)\n",
      "commitDate": "07/12/16 3:07 PM",
      "commitName": "72fe54684198b7df5c5fb2114616dff6d17a4402",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "16/11/16 2:21 PM",
      "commitNameOld": "59bfcbf3579e45ddf96db3aafccf669c8e03648f",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 21.03,
      "commitsBetweenForRepo": 129,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n   private Container preReInitializeOrLocalizeCheck(ContainerId containerId,\n       ReInitOp op) throws YarnException {\n     UserGroupInformation remoteUgi \u003d getRemoteUgi();\n     NMTokenIdentifier nmTokenIdentifier \u003d selectNMTokenIdentifier(remoteUgi);\n     authorizeUser(remoteUgi, nmTokenIdentifier);\n     if (!nmTokenIdentifier.getApplicationAttemptId().getApplicationId()\n         .equals(containerId.getApplicationAttemptId().getApplicationId())) {\n-      throw new YarnException(\"ApplicationMaster not autorized to perform \" +\n+      throw new YarnException(\"ApplicationMaster not authorized to perform \" +\n           \"[\"+ op + \"] on Container [\" + containerId + \"]!!\");\n     }\n     Container container \u003d context.getContainers().get(containerId);\n     if (container \u003d\u003d null) {\n       throw new YarnException(\"Specified \" + containerId + \" does not exist!\");\n     }\n     if (!container.isRunning() || container.isReInitializing()) {\n       throw new YarnException(\"Cannot perform \" + op + \" on [\" + containerId\n           + \"]. Current state is [\" + container.getContainerState() + \", \" +\n           \"isReInitializing\u003d\" + container.isReInitializing() + \"].\");\n     }\n     return container;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Container preReInitializeOrLocalizeCheck(ContainerId containerId,\n      ReInitOp op) throws YarnException {\n    UserGroupInformation remoteUgi \u003d getRemoteUgi();\n    NMTokenIdentifier nmTokenIdentifier \u003d selectNMTokenIdentifier(remoteUgi);\n    authorizeUser(remoteUgi, nmTokenIdentifier);\n    if (!nmTokenIdentifier.getApplicationAttemptId().getApplicationId()\n        .equals(containerId.getApplicationAttemptId().getApplicationId())) {\n      throw new YarnException(\"ApplicationMaster not authorized to perform \" +\n          \"[\"+ op + \"] on Container [\" + containerId + \"]!!\");\n    }\n    Container container \u003d context.getContainers().get(containerId);\n    if (container \u003d\u003d null) {\n      throw new YarnException(\"Specified \" + containerId + \" does not exist!\");\n    }\n    if (!container.isRunning() || container.isReInitializing()) {\n      throw new YarnException(\"Cannot perform \" + op + \" on [\" + containerId\n          + \"]. Current state is [\" + container.getContainerState() + \", \" +\n          \"isReInitializing\u003d\" + container.isReInitializing() + \"].\");\n    }\n    return container;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "4815d024c59cb029e2053d94c7aed33eb8053d3e": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5609. Expose upgrade and restart API in ContainerManagementProtocol. Contributed by Arun Suresh\n",
      "commitDate": "26/09/16 8:46 AM",
      "commitName": "4815d024c59cb029e2053d94c7aed33eb8053d3e",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,21 @@\n+  private Container preReInitializeOrLocalizeCheck(ContainerId containerId,\n+      ReInitOp op) throws YarnException {\n+    UserGroupInformation remoteUgi \u003d getRemoteUgi();\n+    NMTokenIdentifier nmTokenIdentifier \u003d selectNMTokenIdentifier(remoteUgi);\n+    authorizeUser(remoteUgi, nmTokenIdentifier);\n+    if (!nmTokenIdentifier.getApplicationAttemptId().getApplicationId()\n+        .equals(containerId.getApplicationAttemptId().getApplicationId())) {\n+      throw new YarnException(\"ApplicationMaster not autorized to perform \" +\n+          \"[\"+ op + \"] on Container [\" + containerId + \"]!!\");\n+    }\n+    Container container \u003d context.getContainers().get(containerId);\n+    if (container \u003d\u003d null) {\n+      throw new YarnException(\"Specified \" + containerId + \" does not exist!\");\n+    }\n+    if (!container.isRunning() || container.isReInitializing()) {\n+      throw new YarnException(\"Cannot perform \" + op + \" on [\" + containerId\n+          + \"]. Current state is [\" + container.getContainerState() + \", \" +\n+          \"isReInitializing\u003d\" + container.isReInitializing() + \"].\");\n+    }\n+    return container;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Container preReInitializeOrLocalizeCheck(ContainerId containerId,\n      ReInitOp op) throws YarnException {\n    UserGroupInformation remoteUgi \u003d getRemoteUgi();\n    NMTokenIdentifier nmTokenIdentifier \u003d selectNMTokenIdentifier(remoteUgi);\n    authorizeUser(remoteUgi, nmTokenIdentifier);\n    if (!nmTokenIdentifier.getApplicationAttemptId().getApplicationId()\n        .equals(containerId.getApplicationAttemptId().getApplicationId())) {\n      throw new YarnException(\"ApplicationMaster not autorized to perform \" +\n          \"[\"+ op + \"] on Container [\" + containerId + \"]!!\");\n    }\n    Container container \u003d context.getContainers().get(containerId);\n    if (container \u003d\u003d null) {\n      throw new YarnException(\"Specified \" + containerId + \" does not exist!\");\n    }\n    if (!container.isRunning() || container.isReInitializing()) {\n      throw new YarnException(\"Cannot perform \" + op + \" on [\" + containerId\n          + \"]. Current state is [\" + container.getContainerState() + \", \" +\n          \"isReInitializing\u003d\" + container.isReInitializing() + \"].\");\n    }\n    return container;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java"
    }
  }
}