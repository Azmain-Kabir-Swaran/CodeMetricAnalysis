{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SaslRpcClient.java",
  "functionName": "readNextRpcPacket",
  "functionId": "readNextRpcPacket",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/SaslRpcClient.java",
  "functionStartLine": 589,
  "functionEndLine": 620,
  "numCommitsSeen": 30,
  "timeTaken": 1039,
  "changeHistory": [
    "c03c8fe199429a43c6aa944016566738abd9b193"
  ],
  "changeHistoryShort": {
    "c03c8fe199429a43c6aa944016566738abd9b193": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c03c8fe199429a43c6aa944016566738abd9b193": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-9820. RPCv9 wire protocol is insufficient to support multiplexing. Contributed by Daryn Sharp.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1512091 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/08/13 4:02 PM",
      "commitName": "c03c8fe199429a43c6aa944016566738abd9b193",
      "commitAuthor": "Jitendra Nath Pandey",
      "diff": "@@ -0,0 +1,32 @@\n+    private void readNextRpcPacket() throws IOException {\n+      LOG.debug(\"reading next wrapped RPC packet\");\n+      DataInputStream dis \u003d new DataInputStream(in);\n+      int rpcLen \u003d dis.readInt();\n+      byte[] rpcBuf \u003d new byte[rpcLen];\n+      dis.readFully(rpcBuf);\n+      \n+      // decode the RPC header\n+      ByteArrayInputStream bis \u003d new ByteArrayInputStream(rpcBuf);\n+      RpcResponseHeaderProto.Builder headerBuilder \u003d\n+          RpcResponseHeaderProto.newBuilder();\n+      headerBuilder.mergeDelimitedFrom(bis);\n+      \n+      boolean isWrapped \u003d false;\n+      // Must be SASL wrapped, verify and decode.\n+      if (headerBuilder.getCallId() \u003d\u003d AuthProtocol.SASL.callId) {\n+        RpcSaslProto.Builder saslMessage \u003d RpcSaslProto.newBuilder();\n+        saslMessage.mergeDelimitedFrom(bis);\n+        if (saslMessage.getState() \u003d\u003d SaslState.WRAP) {\n+          isWrapped \u003d true;\n+          byte[] token \u003d saslMessage.getToken().toByteArray();\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"unwrapping token of length:\" + token.length);\n+          }\n+          token \u003d saslClient.unwrap(token, 0, token.length);\n+          unwrappedRpcBuffer \u003d ByteBuffer.wrap(token);\n+        }\n+      }\n+      if (!isWrapped) {\n+        throw new SaslException(\"Server sent non-wrapped response\");\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void readNextRpcPacket() throws IOException {\n      LOG.debug(\"reading next wrapped RPC packet\");\n      DataInputStream dis \u003d new DataInputStream(in);\n      int rpcLen \u003d dis.readInt();\n      byte[] rpcBuf \u003d new byte[rpcLen];\n      dis.readFully(rpcBuf);\n      \n      // decode the RPC header\n      ByteArrayInputStream bis \u003d new ByteArrayInputStream(rpcBuf);\n      RpcResponseHeaderProto.Builder headerBuilder \u003d\n          RpcResponseHeaderProto.newBuilder();\n      headerBuilder.mergeDelimitedFrom(bis);\n      \n      boolean isWrapped \u003d false;\n      // Must be SASL wrapped, verify and decode.\n      if (headerBuilder.getCallId() \u003d\u003d AuthProtocol.SASL.callId) {\n        RpcSaslProto.Builder saslMessage \u003d RpcSaslProto.newBuilder();\n        saslMessage.mergeDelimitedFrom(bis);\n        if (saslMessage.getState() \u003d\u003d SaslState.WRAP) {\n          isWrapped \u003d true;\n          byte[] token \u003d saslMessage.getToken().toByteArray();\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"unwrapping token of length:\" + token.length);\n          }\n          token \u003d saslClient.unwrap(token, 0, token.length);\n          unwrappedRpcBuffer \u003d ByteBuffer.wrap(token);\n        }\n      }\n      if (!isWrapped) {\n        throw new SaslException(\"Server sent non-wrapped response\");\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/SaslRpcClient.java"
    }
  }
}