{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Trash.java",
  "functionName": "moveToAppropriateTrash",
  "functionId": "moveToAppropriateTrash___fs-FileSystem__p-Path__conf-Configuration",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/Trash.java",
  "functionStartLine": 73,
  "functionEndLine": 97,
  "numCommitsSeen": 24,
  "timeTaken": 1831,
  "changeHistory": [
    "cbc7b6bf97a80c39d4bbb3005e42dacae6726baf",
    "77aaf4cf7dd344eb094d9c079e5fb993c6696ebf",
    "c92f6f360515cc21ecb9b9f49b3e59537ef0cb05",
    "91e832e7b47ff5088ca2bb54aa25f6f166d6c8d5",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "3db6c4a94448163af5a1af50bc5e97aef28878c0"
  ],
  "changeHistoryShort": {
    "cbc7b6bf97a80c39d4bbb3005e42dacae6726baf": "Ybodychange",
    "77aaf4cf7dd344eb094d9c079e5fb993c6696ebf": "Ybodychange",
    "c92f6f360515cc21ecb9b9f49b3e59537ef0cb05": "Ybodychange",
    "91e832e7b47ff5088ca2bb54aa25f6f166d6c8d5": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "3db6c4a94448163af5a1af50bc5e97aef28878c0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cbc7b6bf97a80c39d4bbb3005e42dacae6726baf": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8831. Trash Support for deletion in HDFS encryption zone. Contributed by Xiaoyu Yao.\n",
      "commitDate": "04/12/15 10:39 AM",
      "commitName": "cbc7b6bf97a80c39d4bbb3005e42dacae6726baf",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "15/09/15 6:20 PM",
      "commitNameOld": "77aaf4cf7dd344eb094d9c079e5fb993c6696ebf",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 79.72,
      "commitsBetweenForRepo": 610,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,25 @@\n   public static boolean moveToAppropriateTrash(FileSystem fs, Path p,\n       Configuration conf) throws IOException {\n     Path fullyResolvedPath \u003d fs.resolvePath(p);\n     FileSystem fullyResolvedFs \u003d\n         FileSystem.get(fullyResolvedPath.toUri(), conf);\n     // If the trash interval is configured server side then clobber this\n     // configuration so that we always respect the server configuration.\n     try {\n       long trashInterval \u003d fullyResolvedFs.getServerDefaults(\n           fullyResolvedPath).getTrashInterval();\n       if (0 !\u003d trashInterval) {\n         Configuration confCopy \u003d new Configuration(conf);\n         confCopy.setLong(CommonConfigurationKeysPublic.FS_TRASH_INTERVAL_KEY,\n             trashInterval);\n         conf \u003d confCopy;\n       }\n     } catch (Exception e) {\n       // If we can not determine that trash is enabled server side then\n       // bail rather than potentially deleting a file when trash is enabled.\n       LOG.warn(\"Failed to get server trash configuration\", e);\n       throw new IOException(\"Failed to get server trash configuration\", e);\n     }\n     Trash trash \u003d new Trash(fullyResolvedFs, conf);\n-    boolean success \u003d trash.moveToTrash(fullyResolvedPath);\n-    if (success) {\n-      LOG.info(\"Moved: \u0027\" + p + \"\u0027 to trash at: \" + trash.getCurrentTrashDir());\n-    }\n-    return success;\n+    return trash.moveToTrash(fullyResolvedPath);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static boolean moveToAppropriateTrash(FileSystem fs, Path p,\n      Configuration conf) throws IOException {\n    Path fullyResolvedPath \u003d fs.resolvePath(p);\n    FileSystem fullyResolvedFs \u003d\n        FileSystem.get(fullyResolvedPath.toUri(), conf);\n    // If the trash interval is configured server side then clobber this\n    // configuration so that we always respect the server configuration.\n    try {\n      long trashInterval \u003d fullyResolvedFs.getServerDefaults(\n          fullyResolvedPath).getTrashInterval();\n      if (0 !\u003d trashInterval) {\n        Configuration confCopy \u003d new Configuration(conf);\n        confCopy.setLong(CommonConfigurationKeysPublic.FS_TRASH_INTERVAL_KEY,\n            trashInterval);\n        conf \u003d confCopy;\n      }\n    } catch (Exception e) {\n      // If we can not determine that trash is enabled server side then\n      // bail rather than potentially deleting a file when trash is enabled.\n      LOG.warn(\"Failed to get server trash configuration\", e);\n      throw new IOException(\"Failed to get server trash configuration\", e);\n    }\n    Trash trash \u003d new Trash(fullyResolvedFs, conf);\n    return trash.moveToTrash(fullyResolvedPath);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/Trash.java",
      "extendedDetails": {}
    },
    "77aaf4cf7dd344eb094d9c079e5fb993c6696ebf": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12416. Trash messages should be handled by Logger instead of being delivered on System.out. Contributed by Mingliang Liu.\n",
      "commitDate": "15/09/15 6:20 PM",
      "commitName": "77aaf4cf7dd344eb094d9c079e5fb993c6696ebf",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "20/04/15 3:42 PM",
      "commitNameOld": "c92f6f360515cc21ecb9b9f49b3e59537ef0cb05",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 148.11,
      "commitsBetweenForRepo": 1082,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,29 @@\n   public static boolean moveToAppropriateTrash(FileSystem fs, Path p,\n       Configuration conf) throws IOException {\n     Path fullyResolvedPath \u003d fs.resolvePath(p);\n     FileSystem fullyResolvedFs \u003d\n         FileSystem.get(fullyResolvedPath.toUri(), conf);\n     // If the trash interval is configured server side then clobber this\n     // configuration so that we always respect the server configuration.\n     try {\n       long trashInterval \u003d fullyResolvedFs.getServerDefaults(\n           fullyResolvedPath).getTrashInterval();\n       if (0 !\u003d trashInterval) {\n         Configuration confCopy \u003d new Configuration(conf);\n         confCopy.setLong(CommonConfigurationKeysPublic.FS_TRASH_INTERVAL_KEY,\n             trashInterval);\n         conf \u003d confCopy;\n       }\n     } catch (Exception e) {\n       // If we can not determine that trash is enabled server side then\n       // bail rather than potentially deleting a file when trash is enabled.\n       LOG.warn(\"Failed to get server trash configuration\", e);\n       throw new IOException(\"Failed to get server trash configuration\", e);\n     }\n     Trash trash \u003d new Trash(fullyResolvedFs, conf);\n     boolean success \u003d trash.moveToTrash(fullyResolvedPath);\n     if (success) {\n-      System.out.println(\"Moved: \u0027\" + p + \"\u0027 to trash at: \" +\n-          trash.getCurrentTrashDir() );\n+      LOG.info(\"Moved: \u0027\" + p + \"\u0027 to trash at: \" + trash.getCurrentTrashDir());\n     }\n     return success;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static boolean moveToAppropriateTrash(FileSystem fs, Path p,\n      Configuration conf) throws IOException {\n    Path fullyResolvedPath \u003d fs.resolvePath(p);\n    FileSystem fullyResolvedFs \u003d\n        FileSystem.get(fullyResolvedPath.toUri(), conf);\n    // If the trash interval is configured server side then clobber this\n    // configuration so that we always respect the server configuration.\n    try {\n      long trashInterval \u003d fullyResolvedFs.getServerDefaults(\n          fullyResolvedPath).getTrashInterval();\n      if (0 !\u003d trashInterval) {\n        Configuration confCopy \u003d new Configuration(conf);\n        confCopy.setLong(CommonConfigurationKeysPublic.FS_TRASH_INTERVAL_KEY,\n            trashInterval);\n        conf \u003d confCopy;\n      }\n    } catch (Exception e) {\n      // If we can not determine that trash is enabled server side then\n      // bail rather than potentially deleting a file when trash is enabled.\n      LOG.warn(\"Failed to get server trash configuration\", e);\n      throw new IOException(\"Failed to get server trash configuration\", e);\n    }\n    Trash trash \u003d new Trash(fullyResolvedFs, conf);\n    boolean success \u003d trash.moveToTrash(fullyResolvedPath);\n    if (success) {\n      LOG.info(\"Moved: \u0027\" + p + \"\u0027 to trash at: \" + trash.getCurrentTrashDir());\n    }\n    return success;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/Trash.java",
      "extendedDetails": {}
    },
    "c92f6f360515cc21ecb9b9f49b3e59537ef0cb05": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8179. DFSClient#getServerDefaults returns null within 1 hour of system start. (Contributed by Xiaoyu Yao)\n",
      "commitDate": "20/04/15 3:42 PM",
      "commitName": "c92f6f360515cc21ecb9b9f49b3e59537ef0cb05",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "05/09/12 12:42 PM",
      "commitNameOld": "91e832e7b47ff5088ca2bb54aa25f6f166d6c8d5",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 957.13,
      "commitsBetweenForRepo": 6662,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,30 @@\n   public static boolean moveToAppropriateTrash(FileSystem fs, Path p,\n       Configuration conf) throws IOException {\n     Path fullyResolvedPath \u003d fs.resolvePath(p);\n     FileSystem fullyResolvedFs \u003d\n         FileSystem.get(fullyResolvedPath.toUri(), conf);\n     // If the trash interval is configured server side then clobber this\n     // configuration so that we always respect the server configuration.\n     try {\n       long trashInterval \u003d fullyResolvedFs.getServerDefaults(\n           fullyResolvedPath).getTrashInterval();\n       if (0 !\u003d trashInterval) {\n         Configuration confCopy \u003d new Configuration(conf);\n         confCopy.setLong(CommonConfigurationKeysPublic.FS_TRASH_INTERVAL_KEY,\n             trashInterval);\n         conf \u003d confCopy;\n       }\n     } catch (Exception e) {\n       // If we can not determine that trash is enabled server side then\n       // bail rather than potentially deleting a file when trash is enabled.\n+      LOG.warn(\"Failed to get server trash configuration\", e);\n       throw new IOException(\"Failed to get server trash configuration\", e);\n     }\n     Trash trash \u003d new Trash(fullyResolvedFs, conf);\n     boolean success \u003d trash.moveToTrash(fullyResolvedPath);\n     if (success) {\n       System.out.println(\"Moved: \u0027\" + p + \"\u0027 to trash at: \" +\n           trash.getCurrentTrashDir() );\n     }\n     return success;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static boolean moveToAppropriateTrash(FileSystem fs, Path p,\n      Configuration conf) throws IOException {\n    Path fullyResolvedPath \u003d fs.resolvePath(p);\n    FileSystem fullyResolvedFs \u003d\n        FileSystem.get(fullyResolvedPath.toUri(), conf);\n    // If the trash interval is configured server side then clobber this\n    // configuration so that we always respect the server configuration.\n    try {\n      long trashInterval \u003d fullyResolvedFs.getServerDefaults(\n          fullyResolvedPath).getTrashInterval();\n      if (0 !\u003d trashInterval) {\n        Configuration confCopy \u003d new Configuration(conf);\n        confCopy.setLong(CommonConfigurationKeysPublic.FS_TRASH_INTERVAL_KEY,\n            trashInterval);\n        conf \u003d confCopy;\n      }\n    } catch (Exception e) {\n      // If we can not determine that trash is enabled server side then\n      // bail rather than potentially deleting a file when trash is enabled.\n      LOG.warn(\"Failed to get server trash configuration\", e);\n      throw new IOException(\"Failed to get server trash configuration\", e);\n    }\n    Trash trash \u003d new Trash(fullyResolvedFs, conf);\n    boolean success \u003d trash.moveToTrash(fullyResolvedPath);\n    if (success) {\n      System.out.println(\"Moved: \u0027\" + p + \"\u0027 to trash at: \" +\n          trash.getCurrentTrashDir() );\n    }\n    return success;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/Trash.java",
      "extendedDetails": {}
    },
    "91e832e7b47ff5088ca2bb54aa25f6f166d6c8d5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8770. NN should not RPC to self to find trash defaults. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1381319 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/09/12 12:42 PM",
      "commitName": "91e832e7b47ff5088ca2bb54aa25f6f166d6c8d5",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "17/08/12 4:26 PM",
      "commitNameOld": "54621c3776b62743f4ace2a8785263965369c67e",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 18.84,
      "commitsBetweenForRepo": 114,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,29 @@\n   public static boolean moveToAppropriateTrash(FileSystem fs, Path p,\n       Configuration conf) throws IOException {\n     Path fullyResolvedPath \u003d fs.resolvePath(p);\n-    Trash trash \u003d new Trash(FileSystem.get(fullyResolvedPath.toUri(), conf), conf);\n-    boolean success \u003d  trash.moveToTrash(fullyResolvedPath);\n+    FileSystem fullyResolvedFs \u003d\n+        FileSystem.get(fullyResolvedPath.toUri(), conf);\n+    // If the trash interval is configured server side then clobber this\n+    // configuration so that we always respect the server configuration.\n+    try {\n+      long trashInterval \u003d fullyResolvedFs.getServerDefaults(\n+          fullyResolvedPath).getTrashInterval();\n+      if (0 !\u003d trashInterval) {\n+        Configuration confCopy \u003d new Configuration(conf);\n+        confCopy.setLong(CommonConfigurationKeysPublic.FS_TRASH_INTERVAL_KEY,\n+            trashInterval);\n+        conf \u003d confCopy;\n+      }\n+    } catch (Exception e) {\n+      // If we can not determine that trash is enabled server side then\n+      // bail rather than potentially deleting a file when trash is enabled.\n+      throw new IOException(\"Failed to get server trash configuration\", e);\n+    }\n+    Trash trash \u003d new Trash(fullyResolvedFs, conf);\n+    boolean success \u003d trash.moveToTrash(fullyResolvedPath);\n     if (success) {\n       System.out.println(\"Moved: \u0027\" + p + \"\u0027 to trash at: \" +\n           trash.getCurrentTrashDir() );\n     }\n     return success;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static boolean moveToAppropriateTrash(FileSystem fs, Path p,\n      Configuration conf) throws IOException {\n    Path fullyResolvedPath \u003d fs.resolvePath(p);\n    FileSystem fullyResolvedFs \u003d\n        FileSystem.get(fullyResolvedPath.toUri(), conf);\n    // If the trash interval is configured server side then clobber this\n    // configuration so that we always respect the server configuration.\n    try {\n      long trashInterval \u003d fullyResolvedFs.getServerDefaults(\n          fullyResolvedPath).getTrashInterval();\n      if (0 !\u003d trashInterval) {\n        Configuration confCopy \u003d new Configuration(conf);\n        confCopy.setLong(CommonConfigurationKeysPublic.FS_TRASH_INTERVAL_KEY,\n            trashInterval);\n        conf \u003d confCopy;\n      }\n    } catch (Exception e) {\n      // If we can not determine that trash is enabled server side then\n      // bail rather than potentially deleting a file when trash is enabled.\n      throw new IOException(\"Failed to get server trash configuration\", e);\n    }\n    Trash trash \u003d new Trash(fullyResolvedFs, conf);\n    boolean success \u003d trash.moveToTrash(fullyResolvedPath);\n    if (success) {\n      System.out.println(\"Moved: \u0027\" + p + \"\u0027 to trash at: \" +\n          trash.getCurrentTrashDir() );\n    }\n    return success;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/Trash.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static boolean moveToAppropriateTrash(FileSystem fs, Path p,\n      Configuration conf) throws IOException {\n    Path fullyResolvedPath \u003d fs.resolvePath(p);\n    Trash trash \u003d new Trash(FileSystem.get(fullyResolvedPath.toUri(), conf), conf);\n    boolean success \u003d  trash.moveToTrash(fullyResolvedPath);\n    if (success) {\n      System.out.println(\"Moved: \u0027\" + p + \"\u0027 to trash at: \" +\n          trash.getCurrentTrashDir() );\n    }\n    return success;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/Trash.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/Trash.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/Trash.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static boolean moveToAppropriateTrash(FileSystem fs, Path p,\n      Configuration conf) throws IOException {\n    Path fullyResolvedPath \u003d fs.resolvePath(p);\n    Trash trash \u003d new Trash(FileSystem.get(fullyResolvedPath.toUri(), conf), conf);\n    boolean success \u003d  trash.moveToTrash(fullyResolvedPath);\n    if (success) {\n      System.out.println(\"Moved: \u0027\" + p + \"\u0027 to trash at: \" +\n          trash.getCurrentTrashDir() );\n    }\n    return success;\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/fs/Trash.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/fs/Trash.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/Trash.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static boolean moveToAppropriateTrash(FileSystem fs, Path p,\n      Configuration conf) throws IOException {\n    Path fullyResolvedPath \u003d fs.resolvePath(p);\n    Trash trash \u003d new Trash(FileSystem.get(fullyResolvedPath.toUri(), conf), conf);\n    boolean success \u003d  trash.moveToTrash(fullyResolvedPath);\n    if (success) {\n      System.out.println(\"Moved: \u0027\" + p + \"\u0027 to trash at: \" +\n          trash.getCurrentTrashDir() );\n    }\n    return success;\n  }",
      "path": "common/src/java/org/apache/hadoop/fs/Trash.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/fs/Trash.java",
        "newPath": "common/src/java/org/apache/hadoop/fs/Trash.java"
      }
    },
    "3db6c4a94448163af5a1af50bc5e97aef28878c0": {
      "type": "Yintroduced",
      "commitMessage": "    HADOOP-7284 Trash and shell\u0027s rm does not work for viewfs\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1129989 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/05/11 8:27 PM",
      "commitName": "3db6c4a94448163af5a1af50bc5e97aef28878c0",
      "commitAuthor": "Sanjay Radia",
      "diff": "@@ -0,0 +1,11 @@\n+  public static boolean moveToAppropriateTrash(FileSystem fs, Path p,\n+      Configuration conf) throws IOException {\n+    Path fullyResolvedPath \u003d fs.resolvePath(p);\n+    Trash trash \u003d new Trash(FileSystem.get(fullyResolvedPath.toUri(), conf), conf);\n+    boolean success \u003d  trash.moveToTrash(fullyResolvedPath);\n+    if (success) {\n+      System.out.println(\"Moved: \u0027\" + p + \"\u0027 to trash at: \" +\n+          trash.getCurrentTrashDir() );\n+    }\n+    return success;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static boolean moveToAppropriateTrash(FileSystem fs, Path p,\n      Configuration conf) throws IOException {\n    Path fullyResolvedPath \u003d fs.resolvePath(p);\n    Trash trash \u003d new Trash(FileSystem.get(fullyResolvedPath.toUri(), conf), conf);\n    boolean success \u003d  trash.moveToTrash(fullyResolvedPath);\n    if (success) {\n      System.out.println(\"Moved: \u0027\" + p + \"\u0027 to trash at: \" +\n          trash.getCurrentTrashDir() );\n    }\n    return success;\n  }",
      "path": "src/java/org/apache/hadoop/fs/Trash.java"
    }
  }
}