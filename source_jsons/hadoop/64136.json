{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SignerManager.java",
  "functionName": "initCustomSigners",
  "functionId": "initCustomSigners",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/auth/SignerManager.java",
  "functionStartLine": 65,
  "functionEndLine": 111,
  "numCommitsSeen": 2,
  "timeTaken": 2568,
  "changeHistory": [
    "559ee277f50716a9a8c736ba3b655aad9f616e96",
    "e02b1023c2f42b6792d2941c1f987ae06259b021"
  ],
  "changeHistoryShort": {
    "559ee277f50716a9a8c736ba3b655aad9f616e96": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
    "e02b1023c2f42b6792d2941c1f987ae06259b021": "Yintroduced"
  },
  "changeHistoryDetails": {
    "559ee277f50716a9a8c736ba3b655aad9f616e96": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
      "commitMessage": "HADOOP-16599. Allow a SignerInitializer to be specified along with a Custom Signer\n\n",
      "commitDate": "02/10/19 4:03 PM",
      "commitName": "559ee277f50716a9a8c736ba3b655aad9f616e96",
      "commitAuthor": "Siddharth Seth",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HADOOP-16599. Allow a SignerInitializer to be specified along with a Custom Signer\n\n",
          "commitDate": "02/10/19 4:03 PM",
          "commitName": "559ee277f50716a9a8c736ba3b655aad9f616e96",
          "commitAuthor": "Siddharth Seth",
          "commitDateOld": "02/10/19 3:41 PM",
          "commitNameOld": "b09d389001d95eedb7ec17c6f890e0ea3baace9d",
          "commitAuthorOld": "Bharat Viswanadham",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,47 @@\n-  public void initCustomSigners(Configuration conf) {\n-    String[] customSigners \u003d conf.getTrimmedStrings(CUSTOM_SIGNERS);\n+  public void initCustomSigners() {\n+    String[] customSigners \u003d ownerConf.getTrimmedStrings(CUSTOM_SIGNERS);\n     if (customSigners \u003d\u003d null || customSigners.length \u003d\u003d 0) {\n       // No custom signers specified, nothing to do.\n       LOG.debug(\"No custom signers specified\");\n       return;\n     }\n \n     for (String customSigner : customSigners) {\n       String[] parts \u003d customSigner.split(\":\");\n-      if (parts.length !\u003d 2) {\n-        String message \u003d\n-            \"Invalid format (Expected name:SignerClass) for CustomSigner: [\"\n-                + customSigner\n-                + \"]\";\n+      if (!(parts.length \u003d\u003d 1 || parts.length \u003d\u003d 2 || parts.length \u003d\u003d 3)) {\n+        String message \u003d \"Invalid format (Expected name, name:SignerClass,\"\n+            + \" name:SignerClass:SignerInitializerClass)\"\n+            + \" for CustomSigner: [\" + customSigner + \"]\";\n         LOG.error(message);\n         throw new IllegalArgumentException(message);\n       }\n-      maybeRegisterSigner(parts[0], parts[1], conf);\n+      if (parts.length \u003d\u003d 1) {\n+        // Nothing to do. Trying to use a pre-defined Signer\n+      } else {\n+        // Register any custom Signer\n+        maybeRegisterSigner(parts[0], parts[1], ownerConf);\n+\n+        // If an initializer is specified, take care of instantiating it and\n+        // setting it up\n+        if (parts.length \u003d\u003d 3) {\n+          Class\u003c? extends AwsSignerInitializer\u003e clazz \u003d null;\n+          try {\n+            clazz \u003d (Class\u003c? extends AwsSignerInitializer\u003e) ownerConf\n+                .getClassByName(parts[2]);\n+          } catch (ClassNotFoundException e) {\n+            throw new RuntimeException(String.format(\n+                \"SignerInitializer class\" + \" [%s] not found for signer [%s]\",\n+                parts[2], parts[0]), e);\n+          }\n+          LOG.debug(\"Creating signer initializer: [{}] for signer: [{}]\",\n+              parts[2], parts[0]);\n+          AwsSignerInitializer signerInitializer \u003d ReflectionUtils\n+              .newInstance(clazz, null);\n+          initializers.add(signerInitializer);\n+          signerInitializer\n+              .registerStore(bucketName, ownerConf, delegationTokenProvider,\n+                  ownerUgi);\n+        }\n+      }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void initCustomSigners() {\n    String[] customSigners \u003d ownerConf.getTrimmedStrings(CUSTOM_SIGNERS);\n    if (customSigners \u003d\u003d null || customSigners.length \u003d\u003d 0) {\n      // No custom signers specified, nothing to do.\n      LOG.debug(\"No custom signers specified\");\n      return;\n    }\n\n    for (String customSigner : customSigners) {\n      String[] parts \u003d customSigner.split(\":\");\n      if (!(parts.length \u003d\u003d 1 || parts.length \u003d\u003d 2 || parts.length \u003d\u003d 3)) {\n        String message \u003d \"Invalid format (Expected name, name:SignerClass,\"\n            + \" name:SignerClass:SignerInitializerClass)\"\n            + \" for CustomSigner: [\" + customSigner + \"]\";\n        LOG.error(message);\n        throw new IllegalArgumentException(message);\n      }\n      if (parts.length \u003d\u003d 1) {\n        // Nothing to do. Trying to use a pre-defined Signer\n      } else {\n        // Register any custom Signer\n        maybeRegisterSigner(parts[0], parts[1], ownerConf);\n\n        // If an initializer is specified, take care of instantiating it and\n        // setting it up\n        if (parts.length \u003d\u003d 3) {\n          Class\u003c? extends AwsSignerInitializer\u003e clazz \u003d null;\n          try {\n            clazz \u003d (Class\u003c? extends AwsSignerInitializer\u003e) ownerConf\n                .getClassByName(parts[2]);\n          } catch (ClassNotFoundException e) {\n            throw new RuntimeException(String.format(\n                \"SignerInitializer class\" + \" [%s] not found for signer [%s]\",\n                parts[2], parts[0]), e);\n          }\n          LOG.debug(\"Creating signer initializer: [{}] for signer: [{}]\",\n              parts[2], parts[0]);\n          AwsSignerInitializer signerInitializer \u003d ReflectionUtils\n              .newInstance(clazz, null);\n          initializers.add(signerInitializer);\n          signerInitializer\n              .registerStore(bucketName, ownerConf, delegationTokenProvider,\n                  ownerUgi);\n        }\n      }\n    }\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/auth/SignerManager.java",
          "extendedDetails": {
            "oldPath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/SignerManager.java",
            "newPath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/auth/SignerManager.java",
            "oldMethodName": "initCustomSigners",
            "newMethodName": "initCustomSigners"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-16599. Allow a SignerInitializer to be specified along with a Custom Signer\n\n",
          "commitDate": "02/10/19 4:03 PM",
          "commitName": "559ee277f50716a9a8c736ba3b655aad9f616e96",
          "commitAuthor": "Siddharth Seth",
          "commitDateOld": "02/10/19 3:41 PM",
          "commitNameOld": "b09d389001d95eedb7ec17c6f890e0ea3baace9d",
          "commitAuthorOld": "Bharat Viswanadham",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,47 @@\n-  public void initCustomSigners(Configuration conf) {\n-    String[] customSigners \u003d conf.getTrimmedStrings(CUSTOM_SIGNERS);\n+  public void initCustomSigners() {\n+    String[] customSigners \u003d ownerConf.getTrimmedStrings(CUSTOM_SIGNERS);\n     if (customSigners \u003d\u003d null || customSigners.length \u003d\u003d 0) {\n       // No custom signers specified, nothing to do.\n       LOG.debug(\"No custom signers specified\");\n       return;\n     }\n \n     for (String customSigner : customSigners) {\n       String[] parts \u003d customSigner.split(\":\");\n-      if (parts.length !\u003d 2) {\n-        String message \u003d\n-            \"Invalid format (Expected name:SignerClass) for CustomSigner: [\"\n-                + customSigner\n-                + \"]\";\n+      if (!(parts.length \u003d\u003d 1 || parts.length \u003d\u003d 2 || parts.length \u003d\u003d 3)) {\n+        String message \u003d \"Invalid format (Expected name, name:SignerClass,\"\n+            + \" name:SignerClass:SignerInitializerClass)\"\n+            + \" for CustomSigner: [\" + customSigner + \"]\";\n         LOG.error(message);\n         throw new IllegalArgumentException(message);\n       }\n-      maybeRegisterSigner(parts[0], parts[1], conf);\n+      if (parts.length \u003d\u003d 1) {\n+        // Nothing to do. Trying to use a pre-defined Signer\n+      } else {\n+        // Register any custom Signer\n+        maybeRegisterSigner(parts[0], parts[1], ownerConf);\n+\n+        // If an initializer is specified, take care of instantiating it and\n+        // setting it up\n+        if (parts.length \u003d\u003d 3) {\n+          Class\u003c? extends AwsSignerInitializer\u003e clazz \u003d null;\n+          try {\n+            clazz \u003d (Class\u003c? extends AwsSignerInitializer\u003e) ownerConf\n+                .getClassByName(parts[2]);\n+          } catch (ClassNotFoundException e) {\n+            throw new RuntimeException(String.format(\n+                \"SignerInitializer class\" + \" [%s] not found for signer [%s]\",\n+                parts[2], parts[0]), e);\n+          }\n+          LOG.debug(\"Creating signer initializer: [{}] for signer: [{}]\",\n+              parts[2], parts[0]);\n+          AwsSignerInitializer signerInitializer \u003d ReflectionUtils\n+              .newInstance(clazz, null);\n+          initializers.add(signerInitializer);\n+          signerInitializer\n+              .registerStore(bucketName, ownerConf, delegationTokenProvider,\n+                  ownerUgi);\n+        }\n+      }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void initCustomSigners() {\n    String[] customSigners \u003d ownerConf.getTrimmedStrings(CUSTOM_SIGNERS);\n    if (customSigners \u003d\u003d null || customSigners.length \u003d\u003d 0) {\n      // No custom signers specified, nothing to do.\n      LOG.debug(\"No custom signers specified\");\n      return;\n    }\n\n    for (String customSigner : customSigners) {\n      String[] parts \u003d customSigner.split(\":\");\n      if (!(parts.length \u003d\u003d 1 || parts.length \u003d\u003d 2 || parts.length \u003d\u003d 3)) {\n        String message \u003d \"Invalid format (Expected name, name:SignerClass,\"\n            + \" name:SignerClass:SignerInitializerClass)\"\n            + \" for CustomSigner: [\" + customSigner + \"]\";\n        LOG.error(message);\n        throw new IllegalArgumentException(message);\n      }\n      if (parts.length \u003d\u003d 1) {\n        // Nothing to do. Trying to use a pre-defined Signer\n      } else {\n        // Register any custom Signer\n        maybeRegisterSigner(parts[0], parts[1], ownerConf);\n\n        // If an initializer is specified, take care of instantiating it and\n        // setting it up\n        if (parts.length \u003d\u003d 3) {\n          Class\u003c? extends AwsSignerInitializer\u003e clazz \u003d null;\n          try {\n            clazz \u003d (Class\u003c? extends AwsSignerInitializer\u003e) ownerConf\n                .getClassByName(parts[2]);\n          } catch (ClassNotFoundException e) {\n            throw new RuntimeException(String.format(\n                \"SignerInitializer class\" + \" [%s] not found for signer [%s]\",\n                parts[2], parts[0]), e);\n          }\n          LOG.debug(\"Creating signer initializer: [{}] for signer: [{}]\",\n              parts[2], parts[0]);\n          AwsSignerInitializer signerInitializer \u003d ReflectionUtils\n              .newInstance(clazz, null);\n          initializers.add(signerInitializer);\n          signerInitializer\n              .registerStore(bucketName, ownerConf, delegationTokenProvider,\n                  ownerUgi);\n        }\n      }\n    }\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/auth/SignerManager.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-16599. Allow a SignerInitializer to be specified along with a Custom Signer\n\n",
          "commitDate": "02/10/19 4:03 PM",
          "commitName": "559ee277f50716a9a8c736ba3b655aad9f616e96",
          "commitAuthor": "Siddharth Seth",
          "commitDateOld": "02/10/19 3:41 PM",
          "commitNameOld": "b09d389001d95eedb7ec17c6f890e0ea3baace9d",
          "commitAuthorOld": "Bharat Viswanadham",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,47 @@\n-  public void initCustomSigners(Configuration conf) {\n-    String[] customSigners \u003d conf.getTrimmedStrings(CUSTOM_SIGNERS);\n+  public void initCustomSigners() {\n+    String[] customSigners \u003d ownerConf.getTrimmedStrings(CUSTOM_SIGNERS);\n     if (customSigners \u003d\u003d null || customSigners.length \u003d\u003d 0) {\n       // No custom signers specified, nothing to do.\n       LOG.debug(\"No custom signers specified\");\n       return;\n     }\n \n     for (String customSigner : customSigners) {\n       String[] parts \u003d customSigner.split(\":\");\n-      if (parts.length !\u003d 2) {\n-        String message \u003d\n-            \"Invalid format (Expected name:SignerClass) for CustomSigner: [\"\n-                + customSigner\n-                + \"]\";\n+      if (!(parts.length \u003d\u003d 1 || parts.length \u003d\u003d 2 || parts.length \u003d\u003d 3)) {\n+        String message \u003d \"Invalid format (Expected name, name:SignerClass,\"\n+            + \" name:SignerClass:SignerInitializerClass)\"\n+            + \" for CustomSigner: [\" + customSigner + \"]\";\n         LOG.error(message);\n         throw new IllegalArgumentException(message);\n       }\n-      maybeRegisterSigner(parts[0], parts[1], conf);\n+      if (parts.length \u003d\u003d 1) {\n+        // Nothing to do. Trying to use a pre-defined Signer\n+      } else {\n+        // Register any custom Signer\n+        maybeRegisterSigner(parts[0], parts[1], ownerConf);\n+\n+        // If an initializer is specified, take care of instantiating it and\n+        // setting it up\n+        if (parts.length \u003d\u003d 3) {\n+          Class\u003c? extends AwsSignerInitializer\u003e clazz \u003d null;\n+          try {\n+            clazz \u003d (Class\u003c? extends AwsSignerInitializer\u003e) ownerConf\n+                .getClassByName(parts[2]);\n+          } catch (ClassNotFoundException e) {\n+            throw new RuntimeException(String.format(\n+                \"SignerInitializer class\" + \" [%s] not found for signer [%s]\",\n+                parts[2], parts[0]), e);\n+          }\n+          LOG.debug(\"Creating signer initializer: [{}] for signer: [{}]\",\n+              parts[2], parts[0]);\n+          AwsSignerInitializer signerInitializer \u003d ReflectionUtils\n+              .newInstance(clazz, null);\n+          initializers.add(signerInitializer);\n+          signerInitializer\n+              .registerStore(bucketName, ownerConf, delegationTokenProvider,\n+                  ownerUgi);\n+        }\n+      }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void initCustomSigners() {\n    String[] customSigners \u003d ownerConf.getTrimmedStrings(CUSTOM_SIGNERS);\n    if (customSigners \u003d\u003d null || customSigners.length \u003d\u003d 0) {\n      // No custom signers specified, nothing to do.\n      LOG.debug(\"No custom signers specified\");\n      return;\n    }\n\n    for (String customSigner : customSigners) {\n      String[] parts \u003d customSigner.split(\":\");\n      if (!(parts.length \u003d\u003d 1 || parts.length \u003d\u003d 2 || parts.length \u003d\u003d 3)) {\n        String message \u003d \"Invalid format (Expected name, name:SignerClass,\"\n            + \" name:SignerClass:SignerInitializerClass)\"\n            + \" for CustomSigner: [\" + customSigner + \"]\";\n        LOG.error(message);\n        throw new IllegalArgumentException(message);\n      }\n      if (parts.length \u003d\u003d 1) {\n        // Nothing to do. Trying to use a pre-defined Signer\n      } else {\n        // Register any custom Signer\n        maybeRegisterSigner(parts[0], parts[1], ownerConf);\n\n        // If an initializer is specified, take care of instantiating it and\n        // setting it up\n        if (parts.length \u003d\u003d 3) {\n          Class\u003c? extends AwsSignerInitializer\u003e clazz \u003d null;\n          try {\n            clazz \u003d (Class\u003c? extends AwsSignerInitializer\u003e) ownerConf\n                .getClassByName(parts[2]);\n          } catch (ClassNotFoundException e) {\n            throw new RuntimeException(String.format(\n                \"SignerInitializer class\" + \" [%s] not found for signer [%s]\",\n                parts[2], parts[0]), e);\n          }\n          LOG.debug(\"Creating signer initializer: [{}] for signer: [{}]\",\n              parts[2], parts[0]);\n          AwsSignerInitializer signerInitializer \u003d ReflectionUtils\n              .newInstance(clazz, null);\n          initializers.add(signerInitializer);\n          signerInitializer\n              .registerStore(bucketName, ownerConf, delegationTokenProvider,\n                  ownerUgi);\n        }\n      }\n    }\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/auth/SignerManager.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration]",
            "newValue": "[]"
          }
        }
      ]
    },
    "e02b1023c2f42b6792d2941c1f987ae06259b021": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-16445. Allow separate custom signing algorithms for S3 and DDB (#1332)\n\n",
      "commitDate": "20/09/19 11:20 PM",
      "commitName": "e02b1023c2f42b6792d2941c1f987ae06259b021",
      "commitAuthor": "Siddharth Seth",
      "diff": "@@ -0,0 +1,21 @@\n+  public void initCustomSigners(Configuration conf) {\n+    String[] customSigners \u003d conf.getTrimmedStrings(CUSTOM_SIGNERS);\n+    if (customSigners \u003d\u003d null || customSigners.length \u003d\u003d 0) {\n+      // No custom signers specified, nothing to do.\n+      LOG.debug(\"No custom signers specified\");\n+      return;\n+    }\n+\n+    for (String customSigner : customSigners) {\n+      String[] parts \u003d customSigner.split(\":\");\n+      if (parts.length !\u003d 2) {\n+        String message \u003d\n+            \"Invalid format (Expected name:SignerClass) for CustomSigner: [\"\n+                + customSigner\n+                + \"]\";\n+        LOG.error(message);\n+        throw new IllegalArgumentException(message);\n+      }\n+      maybeRegisterSigner(parts[0], parts[1], conf);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void initCustomSigners(Configuration conf) {\n    String[] customSigners \u003d conf.getTrimmedStrings(CUSTOM_SIGNERS);\n    if (customSigners \u003d\u003d null || customSigners.length \u003d\u003d 0) {\n      // No custom signers specified, nothing to do.\n      LOG.debug(\"No custom signers specified\");\n      return;\n    }\n\n    for (String customSigner : customSigners) {\n      String[] parts \u003d customSigner.split(\":\");\n      if (parts.length !\u003d 2) {\n        String message \u003d\n            \"Invalid format (Expected name:SignerClass) for CustomSigner: [\"\n                + customSigner\n                + \"]\";\n        LOG.error(message);\n        throw new IllegalArgumentException(message);\n      }\n      maybeRegisterSigner(parts[0], parts[1], conf);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/SignerManager.java"
    }
  }
}