{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ZKRMStateStore.java",
  "functionName": "getAndIncrementEpoch",
  "functionId": "getAndIncrementEpoch",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
  "functionStartLine": 494,
  "functionEndLine": 517,
  "numCommitsSeen": 77,
  "timeTaken": 3849,
  "changeHistory": [
    "e6a80e476d4348a4373e6dd5792d70edff16516f",
    "4249172e1419acdb2b69ae3db43dc59da2aa2e03",
    "2797507d51566ab3b8328e5fb1d0beb9fbce5bae",
    "960b8f19ca98dbcfdd30f2f1f275b8718d2e872f",
    "e516706b896743e47e2852be81944eb5613e3e76",
    "3122daa80261b466e309e88d88d1e2c030525e3f",
    "b0c51504c494847a5d0e98d212660297ed43ba56"
  ],
  "changeHistoryShort": {
    "e6a80e476d4348a4373e6dd5792d70edff16516f": "Ybodychange",
    "4249172e1419acdb2b69ae3db43dc59da2aa2e03": "Ybodychange",
    "2797507d51566ab3b8328e5fb1d0beb9fbce5bae": "Ybodychange",
    "960b8f19ca98dbcfdd30f2f1f275b8718d2e872f": "Ybodychange",
    "e516706b896743e47e2852be81944eb5613e3e76": "Ybodychange",
    "3122daa80261b466e309e88d88d1e2c030525e3f": "Ymultichange(Yreturntypechange,Ybodychange)",
    "b0c51504c494847a5d0e98d212660297ed43ba56": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e6a80e476d4348a4373e6dd5792d70edff16516f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8151. Yarn RM Epoch should wrap around. Contributed by Young Chen.\n",
      "commitDate": "02/05/18 5:23 PM",
      "commitName": "e6a80e476d4348a4373e6dd5792d70edff16516f",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "04/12/17 1:14 PM",
      "commitNameOld": "d8863fc16fa3cbcdda5b99f79386c43e4fae5917",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 149.13,
      "commitsBetweenForRepo": 1585,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n   public synchronized long getAndIncrementEpoch() throws Exception {\n     String epochNodePath \u003d getNodePath(zkRootNodePath, EPOCH_NODE);\n     long currentEpoch \u003d baseEpoch;\n \n     if (exists(epochNodePath)) {\n       // load current epoch\n       byte[] data \u003d getData(epochNodePath);\n       Epoch epoch \u003d new EpochPBImpl(EpochProto.parseFrom(data));\n       currentEpoch \u003d epoch.getEpoch();\n       // increment epoch and store it\n-      byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n+      byte[] storeData \u003d Epoch.newInstance(nextEpoch(currentEpoch)).getProto()\n           .toByteArray();\n       zkManager.safeSetData(epochNodePath, storeData, -1, zkAcl,\n           fencingNodePath);\n     } else {\n       // initialize epoch node with 1 for the next time.\n-      byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n+      byte[] storeData \u003d Epoch.newInstance(nextEpoch(currentEpoch)).getProto()\n           .toByteArray();\n       zkManager.safeCreate(epochNodePath, storeData, zkAcl,\n           CreateMode.PERSISTENT, zkAcl, fencingNodePath);\n     }\n \n     return currentEpoch;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized long getAndIncrementEpoch() throws Exception {\n    String epochNodePath \u003d getNodePath(zkRootNodePath, EPOCH_NODE);\n    long currentEpoch \u003d baseEpoch;\n\n    if (exists(epochNodePath)) {\n      // load current epoch\n      byte[] data \u003d getData(epochNodePath);\n      Epoch epoch \u003d new EpochPBImpl(EpochProto.parseFrom(data));\n      currentEpoch \u003d epoch.getEpoch();\n      // increment epoch and store it\n      byte[] storeData \u003d Epoch.newInstance(nextEpoch(currentEpoch)).getProto()\n          .toByteArray();\n      zkManager.safeSetData(epochNodePath, storeData, -1, zkAcl,\n          fencingNodePath);\n    } else {\n      // initialize epoch node with 1 for the next time.\n      byte[] storeData \u003d Epoch.newInstance(nextEpoch(currentEpoch)).getProto()\n          .toByteArray();\n      zkManager.safeCreate(epochNodePath, storeData, zkAcl,\n          CreateMode.PERSISTENT, zkAcl, fencingNodePath);\n    }\n\n    return currentEpoch;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
      "extendedDetails": {}
    },
    "4249172e1419acdb2b69ae3db43dc59da2aa2e03": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7053. Move curator transaction support to ZKCuratorManager. (Jonathan Hung via Subru).\n",
      "commitDate": "22/08/17 7:20 PM",
      "commitName": "4249172e1419acdb2b69ae3db43dc59da2aa2e03",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "15/08/17 4:53 PM",
      "commitNameOld": "75dd866bfb8b63cb9f13179d4365b05c48e0907d",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 7.1,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,24 @@\n   public synchronized long getAndIncrementEpoch() throws Exception {\n     String epochNodePath \u003d getNodePath(zkRootNodePath, EPOCH_NODE);\n     long currentEpoch \u003d baseEpoch;\n \n     if (exists(epochNodePath)) {\n       // load current epoch\n       byte[] data \u003d getData(epochNodePath);\n       Epoch epoch \u003d new EpochPBImpl(EpochProto.parseFrom(data));\n       currentEpoch \u003d epoch.getEpoch();\n       // increment epoch and store it\n       byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n           .toByteArray();\n-      safeSetData(epochNodePath, storeData, -1);\n+      zkManager.safeSetData(epochNodePath, storeData, -1, zkAcl,\n+          fencingNodePath);\n     } else {\n       // initialize epoch node with 1 for the next time.\n       byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n           .toByteArray();\n-      safeCreate(epochNodePath, storeData, zkAcl, CreateMode.PERSISTENT);\n+      zkManager.safeCreate(epochNodePath, storeData, zkAcl,\n+          CreateMode.PERSISTENT, zkAcl, fencingNodePath);\n     }\n \n     return currentEpoch;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized long getAndIncrementEpoch() throws Exception {\n    String epochNodePath \u003d getNodePath(zkRootNodePath, EPOCH_NODE);\n    long currentEpoch \u003d baseEpoch;\n\n    if (exists(epochNodePath)) {\n      // load current epoch\n      byte[] data \u003d getData(epochNodePath);\n      Epoch epoch \u003d new EpochPBImpl(EpochProto.parseFrom(data));\n      currentEpoch \u003d epoch.getEpoch();\n      // increment epoch and store it\n      byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n          .toByteArray();\n      zkManager.safeSetData(epochNodePath, storeData, -1, zkAcl,\n          fencingNodePath);\n    } else {\n      // initialize epoch node with 1 for the next time.\n      byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n          .toByteArray();\n      zkManager.safeCreate(epochNodePath, storeData, zkAcl,\n          CreateMode.PERSISTENT, zkAcl, fencingNodePath);\n    }\n\n    return currentEpoch;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
      "extendedDetails": {}
    },
    "2797507d51566ab3b8328e5fb1d0beb9fbce5bae": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5601. Make the RM epoch base value configurable. Contributed by Subru Krishnan\n\n(cherry picked from commit 9ca2aba9cc65090162b3517b194b5e655ee4a157)\n",
      "commitDate": "01/08/17 5:28 PM",
      "commitName": "2797507d51566ab3b8328e5fb1d0beb9fbce5bae",
      "commitAuthor": "Jian He",
      "commitDateOld": "22/06/17 7:22 PM",
      "commitNameOld": "740204b2926f49ea70596c6059582ce409fbdd90",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 39.92,
      "commitsBetweenForRepo": 212,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n   public synchronized long getAndIncrementEpoch() throws Exception {\n     String epochNodePath \u003d getNodePath(zkRootNodePath, EPOCH_NODE);\n-    long currentEpoch \u003d 0;\n+    long currentEpoch \u003d baseEpoch;\n \n     if (exists(epochNodePath)) {\n       // load current epoch\n       byte[] data \u003d getData(epochNodePath);\n       Epoch epoch \u003d new EpochPBImpl(EpochProto.parseFrom(data));\n       currentEpoch \u003d epoch.getEpoch();\n       // increment epoch and store it\n       byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n           .toByteArray();\n       safeSetData(epochNodePath, storeData, -1);\n     } else {\n       // initialize epoch node with 1 for the next time.\n       byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n           .toByteArray();\n       safeCreate(epochNodePath, storeData, zkAcl, CreateMode.PERSISTENT);\n     }\n \n     return currentEpoch;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized long getAndIncrementEpoch() throws Exception {\n    String epochNodePath \u003d getNodePath(zkRootNodePath, EPOCH_NODE);\n    long currentEpoch \u003d baseEpoch;\n\n    if (exists(epochNodePath)) {\n      // load current epoch\n      byte[] data \u003d getData(epochNodePath);\n      Epoch epoch \u003d new EpochPBImpl(EpochProto.parseFrom(data));\n      currentEpoch \u003d epoch.getEpoch();\n      // increment epoch and store it\n      byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n          .toByteArray();\n      safeSetData(epochNodePath, storeData, -1);\n    } else {\n      // initialize epoch node with 1 for the next time.\n      byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n          .toByteArray();\n      safeCreate(epochNodePath, storeData, zkAcl, CreateMode.PERSISTENT);\n    }\n\n    return currentEpoch;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
      "extendedDetails": {}
    },
    "960b8f19ca98dbcfdd30f2f1f275b8718d2e872f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2716. Refactor ZKRMStateStore retry code with Apache Curator. Contributed by Karthik Kambatla\n",
      "commitDate": "08/06/15 2:50 PM",
      "commitName": "960b8f19ca98dbcfdd30f2f1f275b8718d2e872f",
      "commitAuthor": "Jian He",
      "commitDateOld": "08/05/15 3:12 PM",
      "commitNameOld": "d0b73287c26983f32b0efe01862150e9fd28086f",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 30.99,
      "commitsBetweenForRepo": 257,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n   public synchronized long getAndIncrementEpoch() throws Exception {\n     String epochNodePath \u003d getNodePath(zkRootNodePath, EPOCH_NODE);\n     long currentEpoch \u003d 0;\n-    if (existsWithRetries(epochNodePath, false) !\u003d null) {\n+    if (exists(epochNodePath)) {\n       // load current epoch\n-      byte[] data \u003d getDataWithRetries(epochNodePath, false);\n+      byte[] data \u003d getData(epochNodePath);\n       Epoch epoch \u003d new EpochPBImpl(EpochProto.parseFrom(data));\n       currentEpoch \u003d epoch.getEpoch();\n       // increment epoch and store it\n       byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n           .toByteArray();\n-      setDataWithRetries(epochNodePath, storeData, -1);\n+      safeSetData(epochNodePath, storeData, -1);\n     } else {\n       // initialize epoch node with 1 for the next time.\n       byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n           .toByteArray();\n-      createWithRetries(epochNodePath, storeData, zkAcl, CreateMode.PERSISTENT);\n+      safeCreate(epochNodePath, storeData, zkAcl, CreateMode.PERSISTENT);\n     }\n     return currentEpoch;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized long getAndIncrementEpoch() throws Exception {\n    String epochNodePath \u003d getNodePath(zkRootNodePath, EPOCH_NODE);\n    long currentEpoch \u003d 0;\n    if (exists(epochNodePath)) {\n      // load current epoch\n      byte[] data \u003d getData(epochNodePath);\n      Epoch epoch \u003d new EpochPBImpl(EpochProto.parseFrom(data));\n      currentEpoch \u003d epoch.getEpoch();\n      // increment epoch and store it\n      byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n          .toByteArray();\n      safeSetData(epochNodePath, storeData, -1);\n    } else {\n      // initialize epoch node with 1 for the next time.\n      byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n          .toByteArray();\n      safeCreate(epochNodePath, storeData, zkAcl, CreateMode.PERSISTENT);\n    }\n    return currentEpoch;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
      "extendedDetails": {}
    },
    "e516706b896743e47e2852be81944eb5613e3e76": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3469. ZKRMStateStore: Avoid setting watches that are not required. (Jun Hong via kasha)\n",
      "commitDate": "10/04/15 11:20 AM",
      "commitName": "e516706b896743e47e2852be81944eb5613e3e76",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "04/03/15 7:49 PM",
      "commitNameOld": "8d88691d162f87f95c9ed7e0a569ef08e8385d4f",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 36.61,
      "commitsBetweenForRepo": 327,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n   public synchronized long getAndIncrementEpoch() throws Exception {\n     String epochNodePath \u003d getNodePath(zkRootNodePath, EPOCH_NODE);\n     long currentEpoch \u003d 0;\n-    if (existsWithRetries(epochNodePath, true) !\u003d null) {\n+    if (existsWithRetries(epochNodePath, false) !\u003d null) {\n       // load current epoch\n-      byte[] data \u003d getDataWithRetries(epochNodePath, true);\n+      byte[] data \u003d getDataWithRetries(epochNodePath, false);\n       Epoch epoch \u003d new EpochPBImpl(EpochProto.parseFrom(data));\n       currentEpoch \u003d epoch.getEpoch();\n       // increment epoch and store it\n       byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n           .toByteArray();\n       setDataWithRetries(epochNodePath, storeData, -1);\n     } else {\n       // initialize epoch node with 1 for the next time.\n       byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n           .toByteArray();\n       createWithRetries(epochNodePath, storeData, zkAcl, CreateMode.PERSISTENT);\n     }\n     return currentEpoch;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized long getAndIncrementEpoch() throws Exception {\n    String epochNodePath \u003d getNodePath(zkRootNodePath, EPOCH_NODE);\n    long currentEpoch \u003d 0;\n    if (existsWithRetries(epochNodePath, false) !\u003d null) {\n      // load current epoch\n      byte[] data \u003d getDataWithRetries(epochNodePath, false);\n      Epoch epoch \u003d new EpochPBImpl(EpochProto.parseFrom(data));\n      currentEpoch \u003d epoch.getEpoch();\n      // increment epoch and store it\n      byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n          .toByteArray();\n      setDataWithRetries(epochNodePath, storeData, -1);\n    } else {\n      // initialize epoch node with 1 for the next time.\n      byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n          .toByteArray();\n      createWithRetries(epochNodePath, storeData, zkAcl, CreateMode.PERSISTENT);\n    }\n    return currentEpoch;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
      "extendedDetails": {}
    },
    "3122daa80261b466e309e88d88d1e2c030525e3f": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-2229. Changed the integer field of ContainerId to be long type. Contributed by Tsuyoshi OZAWA\n",
      "commitDate": "12/09/14 10:33 AM",
      "commitName": "3122daa80261b466e309e88d88d1e2c030525e3f",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-2229. Changed the integer field of ContainerId to be long type. Contributed by Tsuyoshi OZAWA\n",
          "commitDate": "12/09/14 10:33 AM",
          "commitName": "3122daa80261b466e309e88d88d1e2c030525e3f",
          "commitAuthor": "Jian He",
          "commitDateOld": "10/09/14 6:20 PM",
          "commitNameOld": "83be3ad44484bf8a24cb90de4b9c26ab59d226a8",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 1.68,
          "commitsBetweenForRepo": 19,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,20 @@\n-  public synchronized int getAndIncrementEpoch() throws Exception {\n+  public synchronized long getAndIncrementEpoch() throws Exception {\n     String epochNodePath \u003d getNodePath(zkRootNodePath, EPOCH_NODE);\n-    int currentEpoch \u003d 0;\n+    long currentEpoch \u003d 0;\n     if (existsWithRetries(epochNodePath, true) !\u003d null) {\n       // load current epoch\n       byte[] data \u003d getDataWithRetries(epochNodePath, true);\n       Epoch epoch \u003d new EpochPBImpl(EpochProto.parseFrom(data));\n       currentEpoch \u003d epoch.getEpoch();\n       // increment epoch and store it\n       byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n           .toByteArray();\n       setDataWithRetries(epochNodePath, storeData, -1);\n     } else {\n       // initialize epoch node with 1 for the next time.\n       byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n           .toByteArray();\n       createWithRetries(epochNodePath, storeData, zkAcl, CreateMode.PERSISTENT);\n     }\n     return currentEpoch;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized long getAndIncrementEpoch() throws Exception {\n    String epochNodePath \u003d getNodePath(zkRootNodePath, EPOCH_NODE);\n    long currentEpoch \u003d 0;\n    if (existsWithRetries(epochNodePath, true) !\u003d null) {\n      // load current epoch\n      byte[] data \u003d getDataWithRetries(epochNodePath, true);\n      Epoch epoch \u003d new EpochPBImpl(EpochProto.parseFrom(data));\n      currentEpoch \u003d epoch.getEpoch();\n      // increment epoch and store it\n      byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n          .toByteArray();\n      setDataWithRetries(epochNodePath, storeData, -1);\n    } else {\n      // initialize epoch node with 1 for the next time.\n      byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n          .toByteArray();\n      createWithRetries(epochNodePath, storeData, zkAcl, CreateMode.PERSISTENT);\n    }\n    return currentEpoch;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
          "extendedDetails": {
            "oldValue": "int",
            "newValue": "long"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2229. Changed the integer field of ContainerId to be long type. Contributed by Tsuyoshi OZAWA\n",
          "commitDate": "12/09/14 10:33 AM",
          "commitName": "3122daa80261b466e309e88d88d1e2c030525e3f",
          "commitAuthor": "Jian He",
          "commitDateOld": "10/09/14 6:20 PM",
          "commitNameOld": "83be3ad44484bf8a24cb90de4b9c26ab59d226a8",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 1.68,
          "commitsBetweenForRepo": 19,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,20 @@\n-  public synchronized int getAndIncrementEpoch() throws Exception {\n+  public synchronized long getAndIncrementEpoch() throws Exception {\n     String epochNodePath \u003d getNodePath(zkRootNodePath, EPOCH_NODE);\n-    int currentEpoch \u003d 0;\n+    long currentEpoch \u003d 0;\n     if (existsWithRetries(epochNodePath, true) !\u003d null) {\n       // load current epoch\n       byte[] data \u003d getDataWithRetries(epochNodePath, true);\n       Epoch epoch \u003d new EpochPBImpl(EpochProto.parseFrom(data));\n       currentEpoch \u003d epoch.getEpoch();\n       // increment epoch and store it\n       byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n           .toByteArray();\n       setDataWithRetries(epochNodePath, storeData, -1);\n     } else {\n       // initialize epoch node with 1 for the next time.\n       byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n           .toByteArray();\n       createWithRetries(epochNodePath, storeData, zkAcl, CreateMode.PERSISTENT);\n     }\n     return currentEpoch;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized long getAndIncrementEpoch() throws Exception {\n    String epochNodePath \u003d getNodePath(zkRootNodePath, EPOCH_NODE);\n    long currentEpoch \u003d 0;\n    if (existsWithRetries(epochNodePath, true) !\u003d null) {\n      // load current epoch\n      byte[] data \u003d getDataWithRetries(epochNodePath, true);\n      Epoch epoch \u003d new EpochPBImpl(EpochProto.parseFrom(data));\n      currentEpoch \u003d epoch.getEpoch();\n      // increment epoch and store it\n      byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n          .toByteArray();\n      setDataWithRetries(epochNodePath, storeData, -1);\n    } else {\n      // initialize epoch node with 1 for the next time.\n      byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n          .toByteArray();\n      createWithRetries(epochNodePath, storeData, zkAcl, CreateMode.PERSISTENT);\n    }\n    return currentEpoch;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
          "extendedDetails": {}
        }
      ]
    },
    "b0c51504c494847a5d0e98d212660297ed43ba56": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2052. Embedded an epoch number in container id to ensure the uniqueness of container id after RM restarts. Contributed by Tsuyoshi OZAWA\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1606557 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/06/14 11:24 AM",
      "commitName": "b0c51504c494847a5d0e98d212660297ed43ba56",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,20 @@\n+  public synchronized int getAndIncrementEpoch() throws Exception {\n+    String epochNodePath \u003d getNodePath(zkRootNodePath, EPOCH_NODE);\n+    int currentEpoch \u003d 0;\n+    if (existsWithRetries(epochNodePath, true) !\u003d null) {\n+      // load current epoch\n+      byte[] data \u003d getDataWithRetries(epochNodePath, true);\n+      Epoch epoch \u003d new EpochPBImpl(EpochProto.parseFrom(data));\n+      currentEpoch \u003d epoch.getEpoch();\n+      // increment epoch and store it\n+      byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n+          .toByteArray();\n+      setDataWithRetries(epochNodePath, storeData, -1);\n+    } else {\n+      // initialize epoch node with 1 for the next time.\n+      byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n+          .toByteArray();\n+      createWithRetries(epochNodePath, storeData, zkAcl, CreateMode.PERSISTENT);\n+    }\n+    return currentEpoch;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized int getAndIncrementEpoch() throws Exception {\n    String epochNodePath \u003d getNodePath(zkRootNodePath, EPOCH_NODE);\n    int currentEpoch \u003d 0;\n    if (existsWithRetries(epochNodePath, true) !\u003d null) {\n      // load current epoch\n      byte[] data \u003d getDataWithRetries(epochNodePath, true);\n      Epoch epoch \u003d new EpochPBImpl(EpochProto.parseFrom(data));\n      currentEpoch \u003d epoch.getEpoch();\n      // increment epoch and store it\n      byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n          .toByteArray();\n      setDataWithRetries(epochNodePath, storeData, -1);\n    } else {\n      // initialize epoch node with 1 for the next time.\n      byte[] storeData \u003d Epoch.newInstance(currentEpoch + 1).getProto()\n          .toByteArray();\n      createWithRetries(epochNodePath, storeData, zkAcl, CreateMode.PERSISTENT);\n    }\n    return currentEpoch;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java"
    }
  }
}