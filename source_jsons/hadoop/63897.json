{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ResourceUtils.java",
  "functionName": "initializeResourcesMap",
  "functionId": "initializeResourcesMap___conf-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
  "functionStartLine": 306,
  "functionEndLine": 310,
  "numCommitsSeen": 44,
  "timeTaken": 4872,
  "changeHistory": [
    "06cceba1cb07340c412c4467439c16ea6812e685",
    "e094eb74b9e7d8c3c6f1990445d248b062cc230b",
    "2e512f016ed689b5afbf1e27fdcd7c9f75b6dc9c",
    "bf2b687412f9a830ec4834477ccf25dbe76fddcd",
    "805095496dfd8e50f71b70cf20845e954d3ba47c",
    "758b7719430c981a6d4d1644d9d03cd16b981cf3",
    "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d",
    "6708ac330147b2d3816a31f2ee83e09c41fe0dd9",
    "ceb12c59a34677518a198e19acb4e29cdfc8a0e1"
  ],
  "changeHistoryShort": {
    "06cceba1cb07340c412c4467439c16ea6812e685": "Ybodychange",
    "e094eb74b9e7d8c3c6f1990445d248b062cc230b": "Ybodychange",
    "2e512f016ed689b5afbf1e27fdcd7c9f75b6dc9c": "Ybodychange",
    "bf2b687412f9a830ec4834477ccf25dbe76fddcd": "Ybodychange",
    "805095496dfd8e50f71b70cf20845e954d3ba47c": "Ybodychange",
    "758b7719430c981a6d4d1644d9d03cd16b981cf3": "Ymultichange(Yparameterchange,Ybodychange)",
    "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d": "Ymultichange(Yfilerename,Ybodychange)",
    "6708ac330147b2d3816a31f2ee83e09c41fe0dd9": "Ybodychange",
    "ceb12c59a34677518a198e19acb4e29cdfc8a0e1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "06cceba1cb07340c412c4467439c16ea6812e685": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7738. CapacityScheduler: Support refresh maximum allocation for multiple resource types. Contributed by Wangda Tan.\n",
      "commitDate": "18/01/18 5:35 AM",
      "commitName": "06cceba1cb07340c412c4467439c16ea6812e685",
      "commitAuthor": "Sunil G",
      "commitDateOld": "05/01/18 11:15 AM",
      "commitNameOld": "f8e7dd9b10f0b1b9d80e6196eb2b0296b523d8f4",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 12.76,
      "commitsBetweenForRepo": 64,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,5 @@\n   static void initializeResourcesMap(Configuration conf) {\n-\n-    Map\u003cString, ResourceInformation\u003e resourceInformationMap \u003d new HashMap\u003c\u003e();\n-    String[] resourceNames \u003d conf.getStrings(YarnConfiguration.RESOURCE_TYPES);\n-\n-    if (resourceNames !\u003d null \u0026\u0026 resourceNames.length !\u003d 0) {\n-      for (String resourceName : resourceNames) {\n-        String resourceUnits \u003d conf.get(\n-            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + UNITS, \"\");\n-        String resourceTypeName \u003d conf.get(\n-            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + TYPE,\n-            ResourceTypes.COUNTABLE.toString());\n-        Long minimumAllocation \u003d conf.getLong(\n-            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName\n-                + MINIMUM_ALLOCATION, 0L);\n-        Long maximumAllocation \u003d conf.getLong(\n-            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName\n-                + MAXIMUM_ALLOCATION, Long.MAX_VALUE);\n-        if (resourceName \u003d\u003d null || resourceName.isEmpty()\n-            || resourceUnits \u003d\u003d null || resourceTypeName \u003d\u003d null) {\n-          throw new YarnRuntimeException(\n-              \"Incomplete configuration for resource type \u0027\" + resourceName\n-                  + \"\u0027. One of name, units or type is configured incorrectly.\");\n-        }\n-        ResourceTypes resourceType \u003d ResourceTypes.valueOf(resourceTypeName);\n-        LOG.info(\"Adding resource type - name \u003d \" + resourceName + \", units \u003d \"\n-            + resourceUnits + \", type \u003d \" + resourceTypeName);\n-        if (resourceInformationMap.containsKey(resourceName)) {\n-          throw new YarnRuntimeException(\n-              \"Error in config, key \u0027\" + resourceName + \"\u0027 specified twice\");\n-        }\n-        resourceInformationMap.put(resourceName, ResourceInformation\n-            .newInstance(resourceName, resourceUnits, 0L, resourceType,\n-                minimumAllocation, maximumAllocation));\n-      }\n-    }\n-\n-    // Validate names of resource information map.\n-    for (String name : resourceInformationMap.keySet()) {\n-      validateNameOfResourceNameAndThrowException(name);\n-    }\n-\n-    checkMandatoryResources(resourceInformationMap);\n-    addMandatoryResources(resourceInformationMap);\n-\n-    setAllocationForMandatoryResources(resourceInformationMap, conf);\n-\n+    Map\u003cString, ResourceInformation\u003e resourceInformationMap \u003d\n+        getResourceInformationMapFromConfig(conf);\n     initializeResourcesFromResourceInformationMap(resourceInformationMap);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static void initializeResourcesMap(Configuration conf) {\n    Map\u003cString, ResourceInformation\u003e resourceInformationMap \u003d\n        getResourceInformationMapFromConfig(conf);\n    initializeResourcesFromResourceInformationMap(resourceInformationMap);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
      "extendedDetails": {}
    },
    "e094eb74b9e7d8c3c6f1990445d248b062cc230b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6953. Clean up ResourceUtils.setMinimumAllocationForMandatoryResources() and setMaximumAllocationForMandatoryResources()\n(Contributed by Manikandan R via Daniel Templeton)\n",
      "commitDate": "15/11/17 10:03 AM",
      "commitName": "e094eb74b9e7d8c3c6f1990445d248b062cc230b",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "13/11/17 11:03 AM",
      "commitNameOld": "2e512f016ed689b5afbf1e27fdcd7c9f75b6dc9c",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 1.96,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,49 @@\n   static void initializeResourcesMap(Configuration conf) {\n \n     Map\u003cString, ResourceInformation\u003e resourceInformationMap \u003d new HashMap\u003c\u003e();\n     String[] resourceNames \u003d conf.getStrings(YarnConfiguration.RESOURCE_TYPES);\n \n     if (resourceNames !\u003d null \u0026\u0026 resourceNames.length !\u003d 0) {\n       for (String resourceName : resourceNames) {\n         String resourceUnits \u003d conf.get(\n             YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + UNITS, \"\");\n         String resourceTypeName \u003d conf.get(\n             YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + TYPE,\n             ResourceTypes.COUNTABLE.toString());\n         Long minimumAllocation \u003d conf.getLong(\n             YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName\n                 + MINIMUM_ALLOCATION, 0L);\n         Long maximumAllocation \u003d conf.getLong(\n             YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName\n                 + MAXIMUM_ALLOCATION, Long.MAX_VALUE);\n         if (resourceName \u003d\u003d null || resourceName.isEmpty()\n             || resourceUnits \u003d\u003d null || resourceTypeName \u003d\u003d null) {\n           throw new YarnRuntimeException(\n               \"Incomplete configuration for resource type \u0027\" + resourceName\n                   + \"\u0027. One of name, units or type is configured incorrectly.\");\n         }\n         ResourceTypes resourceType \u003d ResourceTypes.valueOf(resourceTypeName);\n         LOG.info(\"Adding resource type - name \u003d \" + resourceName + \", units \u003d \"\n             + resourceUnits + \", type \u003d \" + resourceTypeName);\n         if (resourceInformationMap.containsKey(resourceName)) {\n           throw new YarnRuntimeException(\n               \"Error in config, key \u0027\" + resourceName + \"\u0027 specified twice\");\n         }\n         resourceInformationMap.put(resourceName, ResourceInformation\n             .newInstance(resourceName, resourceUnits, 0L, resourceType,\n                 minimumAllocation, maximumAllocation));\n       }\n     }\n \n     // Validate names of resource information map.\n     for (String name : resourceInformationMap.keySet()) {\n       validateNameOfResourceNameAndThrowException(name);\n     }\n \n     checkMandatoryResources(resourceInformationMap);\n     addMandatoryResources(resourceInformationMap);\n \n-    setMinimumAllocationForMandatoryResources(resourceInformationMap, conf);\n-    setMaximumAllocationForMandatoryResources(resourceInformationMap, conf);\n+    setAllocationForMandatoryResources(resourceInformationMap, conf);\n \n     initializeResourcesFromResourceInformationMap(resourceInformationMap);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static void initializeResourcesMap(Configuration conf) {\n\n    Map\u003cString, ResourceInformation\u003e resourceInformationMap \u003d new HashMap\u003c\u003e();\n    String[] resourceNames \u003d conf.getStrings(YarnConfiguration.RESOURCE_TYPES);\n\n    if (resourceNames !\u003d null \u0026\u0026 resourceNames.length !\u003d 0) {\n      for (String resourceName : resourceNames) {\n        String resourceUnits \u003d conf.get(\n            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + UNITS, \"\");\n        String resourceTypeName \u003d conf.get(\n            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + TYPE,\n            ResourceTypes.COUNTABLE.toString());\n        Long minimumAllocation \u003d conf.getLong(\n            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName\n                + MINIMUM_ALLOCATION, 0L);\n        Long maximumAllocation \u003d conf.getLong(\n            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName\n                + MAXIMUM_ALLOCATION, Long.MAX_VALUE);\n        if (resourceName \u003d\u003d null || resourceName.isEmpty()\n            || resourceUnits \u003d\u003d null || resourceTypeName \u003d\u003d null) {\n          throw new YarnRuntimeException(\n              \"Incomplete configuration for resource type \u0027\" + resourceName\n                  + \"\u0027. One of name, units or type is configured incorrectly.\");\n        }\n        ResourceTypes resourceType \u003d ResourceTypes.valueOf(resourceTypeName);\n        LOG.info(\"Adding resource type - name \u003d \" + resourceName + \", units \u003d \"\n            + resourceUnits + \", type \u003d \" + resourceTypeName);\n        if (resourceInformationMap.containsKey(resourceName)) {\n          throw new YarnRuntimeException(\n              \"Error in config, key \u0027\" + resourceName + \"\u0027 specified twice\");\n        }\n        resourceInformationMap.put(resourceName, ResourceInformation\n            .newInstance(resourceName, resourceUnits, 0L, resourceType,\n                minimumAllocation, maximumAllocation));\n      }\n    }\n\n    // Validate names of resource information map.\n    for (String name : resourceInformationMap.keySet()) {\n      validateNameOfResourceNameAndThrowException(name);\n    }\n\n    checkMandatoryResources(resourceInformationMap);\n    addMandatoryResources(resourceInformationMap);\n\n    setAllocationForMandatoryResources(resourceInformationMap, conf);\n\n    initializeResourcesFromResourceInformationMap(resourceInformationMap);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
      "extendedDetails": {}
    },
    "2e512f016ed689b5afbf1e27fdcd7c9f75b6dc9c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7442. [YARN-7069] Limit format of resource type name (Contributed by Wangda Tan via Daniel Templeton)\n",
      "commitDate": "13/11/17 11:03 AM",
      "commitName": "2e512f016ed689b5afbf1e27fdcd7c9f75b6dc9c",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "10/11/17 9:06 PM",
      "commitNameOld": "2c2b7a3672e0744ce6a77a117cedefba04fed603",
      "commitAuthorOld": "bibinchundatt",
      "daysBetweenCommits": 2.58,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,50 @@\n   static void initializeResourcesMap(Configuration conf) {\n \n     Map\u003cString, ResourceInformation\u003e resourceInformationMap \u003d new HashMap\u003c\u003e();\n     String[] resourceNames \u003d conf.getStrings(YarnConfiguration.RESOURCE_TYPES);\n \n     if (resourceNames !\u003d null \u0026\u0026 resourceNames.length !\u003d 0) {\n       for (String resourceName : resourceNames) {\n         String resourceUnits \u003d conf.get(\n             YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + UNITS, \"\");\n         String resourceTypeName \u003d conf.get(\n             YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + TYPE,\n             ResourceTypes.COUNTABLE.toString());\n         Long minimumAllocation \u003d conf.getLong(\n             YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName\n                 + MINIMUM_ALLOCATION, 0L);\n         Long maximumAllocation \u003d conf.getLong(\n             YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName\n                 + MAXIMUM_ALLOCATION, Long.MAX_VALUE);\n         if (resourceName \u003d\u003d null || resourceName.isEmpty()\n             || resourceUnits \u003d\u003d null || resourceTypeName \u003d\u003d null) {\n           throw new YarnRuntimeException(\n               \"Incomplete configuration for resource type \u0027\" + resourceName\n                   + \"\u0027. One of name, units or type is configured incorrectly.\");\n         }\n         ResourceTypes resourceType \u003d ResourceTypes.valueOf(resourceTypeName);\n         LOG.info(\"Adding resource type - name \u003d \" + resourceName + \", units \u003d \"\n             + resourceUnits + \", type \u003d \" + resourceTypeName);\n         if (resourceInformationMap.containsKey(resourceName)) {\n           throw new YarnRuntimeException(\n               \"Error in config, key \u0027\" + resourceName + \"\u0027 specified twice\");\n         }\n         resourceInformationMap.put(resourceName, ResourceInformation\n             .newInstance(resourceName, resourceUnits, 0L, resourceType,\n                 minimumAllocation, maximumAllocation));\n       }\n     }\n \n+    // Validate names of resource information map.\n+    for (String name : resourceInformationMap.keySet()) {\n+      validateNameOfResourceNameAndThrowException(name);\n+    }\n+\n     checkMandatoryResources(resourceInformationMap);\n     addMandatoryResources(resourceInformationMap);\n \n     setMinimumAllocationForMandatoryResources(resourceInformationMap, conf);\n     setMaximumAllocationForMandatoryResources(resourceInformationMap, conf);\n \n     initializeResourcesFromResourceInformationMap(resourceInformationMap);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static void initializeResourcesMap(Configuration conf) {\n\n    Map\u003cString, ResourceInformation\u003e resourceInformationMap \u003d new HashMap\u003c\u003e();\n    String[] resourceNames \u003d conf.getStrings(YarnConfiguration.RESOURCE_TYPES);\n\n    if (resourceNames !\u003d null \u0026\u0026 resourceNames.length !\u003d 0) {\n      for (String resourceName : resourceNames) {\n        String resourceUnits \u003d conf.get(\n            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + UNITS, \"\");\n        String resourceTypeName \u003d conf.get(\n            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + TYPE,\n            ResourceTypes.COUNTABLE.toString());\n        Long minimumAllocation \u003d conf.getLong(\n            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName\n                + MINIMUM_ALLOCATION, 0L);\n        Long maximumAllocation \u003d conf.getLong(\n            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName\n                + MAXIMUM_ALLOCATION, Long.MAX_VALUE);\n        if (resourceName \u003d\u003d null || resourceName.isEmpty()\n            || resourceUnits \u003d\u003d null || resourceTypeName \u003d\u003d null) {\n          throw new YarnRuntimeException(\n              \"Incomplete configuration for resource type \u0027\" + resourceName\n                  + \"\u0027. One of name, units or type is configured incorrectly.\");\n        }\n        ResourceTypes resourceType \u003d ResourceTypes.valueOf(resourceTypeName);\n        LOG.info(\"Adding resource type - name \u003d \" + resourceName + \", units \u003d \"\n            + resourceUnits + \", type \u003d \" + resourceTypeName);\n        if (resourceInformationMap.containsKey(resourceName)) {\n          throw new YarnRuntimeException(\n              \"Error in config, key \u0027\" + resourceName + \"\u0027 specified twice\");\n        }\n        resourceInformationMap.put(resourceName, ResourceInformation\n            .newInstance(resourceName, resourceUnits, 0L, resourceType,\n                minimumAllocation, maximumAllocation));\n      }\n    }\n\n    // Validate names of resource information map.\n    for (String name : resourceInformationMap.keySet()) {\n      validateNameOfResourceNameAndThrowException(name);\n    }\n\n    checkMandatoryResources(resourceInformationMap);\n    addMandatoryResources(resourceInformationMap);\n\n    setMinimumAllocationForMandatoryResources(resourceInformationMap, conf);\n    setMaximumAllocationForMandatoryResources(resourceInformationMap, conf);\n\n    initializeResourcesFromResourceInformationMap(resourceInformationMap);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
      "extendedDetails": {}
    },
    "bf2b687412f9a830ec4834477ccf25dbe76fddcd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7136. Additional Performance Improvement for Resource Profile Feature\n(Contributed by Wangda Tan via Daniel Templeton)\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "bf2b687412f9a830ec4834477ccf25dbe76fddcd",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "805095496dfd8e50f71b70cf20845e954d3ba47c",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,45 @@\n   static void initializeResourcesMap(Configuration conf) {\n \n     Map\u003cString, ResourceInformation\u003e resourceInformationMap \u003d new HashMap\u003c\u003e();\n     String[] resourceNames \u003d conf.getStrings(YarnConfiguration.RESOURCE_TYPES);\n \n     if (resourceNames !\u003d null \u0026\u0026 resourceNames.length !\u003d 0) {\n       for (String resourceName : resourceNames) {\n         String resourceUnits \u003d conf.get(\n             YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + UNITS, \"\");\n         String resourceTypeName \u003d conf.get(\n             YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + TYPE,\n             ResourceTypes.COUNTABLE.toString());\n         Long minimumAllocation \u003d conf.getLong(\n             YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName\n                 + MINIMUM_ALLOCATION, 0L);\n         Long maximumAllocation \u003d conf.getLong(\n             YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName\n                 + MAXIMUM_ALLOCATION, Long.MAX_VALUE);\n         if (resourceName \u003d\u003d null || resourceName.isEmpty()\n             || resourceUnits \u003d\u003d null || resourceTypeName \u003d\u003d null) {\n           throw new YarnRuntimeException(\n               \"Incomplete configuration for resource type \u0027\" + resourceName\n                   + \"\u0027. One of name, units or type is configured incorrectly.\");\n         }\n         ResourceTypes resourceType \u003d ResourceTypes.valueOf(resourceTypeName);\n         LOG.info(\"Adding resource type - name \u003d \" + resourceName + \", units \u003d \"\n             + resourceUnits + \", type \u003d \" + resourceTypeName);\n         if (resourceInformationMap.containsKey(resourceName)) {\n           throw new YarnRuntimeException(\n               \"Error in config, key \u0027\" + resourceName + \"\u0027 specified twice\");\n         }\n         resourceInformationMap.put(resourceName, ResourceInformation\n             .newInstance(resourceName, resourceUnits, 0L, resourceType,\n                 minimumAllocation, maximumAllocation));\n       }\n     }\n+\n     checkMandatoryResources(resourceInformationMap);\n     addMandatoryResources(resourceInformationMap);\n+\n     setMinimumAllocationForMandatoryResources(resourceInformationMap, conf);\n     setMaximumAllocationForMandatoryResources(resourceInformationMap, conf);\n-    resourceTypes \u003d Collections.unmodifiableMap(resourceInformationMap);\n-    updateKnownResources();\n-    updateResourceTypeIndex();\n+\n+    initializeResourcesFromResourceInformationMap(resourceInformationMap);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static void initializeResourcesMap(Configuration conf) {\n\n    Map\u003cString, ResourceInformation\u003e resourceInformationMap \u003d new HashMap\u003c\u003e();\n    String[] resourceNames \u003d conf.getStrings(YarnConfiguration.RESOURCE_TYPES);\n\n    if (resourceNames !\u003d null \u0026\u0026 resourceNames.length !\u003d 0) {\n      for (String resourceName : resourceNames) {\n        String resourceUnits \u003d conf.get(\n            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + UNITS, \"\");\n        String resourceTypeName \u003d conf.get(\n            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + TYPE,\n            ResourceTypes.COUNTABLE.toString());\n        Long minimumAllocation \u003d conf.getLong(\n            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName\n                + MINIMUM_ALLOCATION, 0L);\n        Long maximumAllocation \u003d conf.getLong(\n            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName\n                + MAXIMUM_ALLOCATION, Long.MAX_VALUE);\n        if (resourceName \u003d\u003d null || resourceName.isEmpty()\n            || resourceUnits \u003d\u003d null || resourceTypeName \u003d\u003d null) {\n          throw new YarnRuntimeException(\n              \"Incomplete configuration for resource type \u0027\" + resourceName\n                  + \"\u0027. One of name, units or type is configured incorrectly.\");\n        }\n        ResourceTypes resourceType \u003d ResourceTypes.valueOf(resourceTypeName);\n        LOG.info(\"Adding resource type - name \u003d \" + resourceName + \", units \u003d \"\n            + resourceUnits + \", type \u003d \" + resourceTypeName);\n        if (resourceInformationMap.containsKey(resourceName)) {\n          throw new YarnRuntimeException(\n              \"Error in config, key \u0027\" + resourceName + \"\u0027 specified twice\");\n        }\n        resourceInformationMap.put(resourceName, ResourceInformation\n            .newInstance(resourceName, resourceUnits, 0L, resourceType,\n                minimumAllocation, maximumAllocation));\n      }\n    }\n\n    checkMandatoryResources(resourceInformationMap);\n    addMandatoryResources(resourceInformationMap);\n\n    setMinimumAllocationForMandatoryResources(resourceInformationMap, conf);\n    setMaximumAllocationForMandatoryResources(resourceInformationMap, conf);\n\n    initializeResourcesFromResourceInformationMap(resourceInformationMap);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
      "extendedDetails": {}
    },
    "805095496dfd8e50f71b70cf20845e954d3ba47c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6933. [YARN-3926] ResourceUtils.DISALLOWED_NAMES check is duplicated. Contributed by Manikandan R.\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "805095496dfd8e50f71b70cf20845e954d3ba47c",
      "commitAuthor": "Sunil G",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "53df3eac503064b8c4cd8eb2b659567622f4d8a7",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,44 @@\n   static void initializeResourcesMap(Configuration conf) {\n \n     Map\u003cString, ResourceInformation\u003e resourceInformationMap \u003d new HashMap\u003c\u003e();\n     String[] resourceNames \u003d conf.getStrings(YarnConfiguration.RESOURCE_TYPES);\n \n     if (resourceNames !\u003d null \u0026\u0026 resourceNames.length !\u003d 0) {\n       for (String resourceName : resourceNames) {\n         String resourceUnits \u003d conf.get(\n             YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + UNITS, \"\");\n         String resourceTypeName \u003d conf.get(\n             YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + TYPE,\n             ResourceTypes.COUNTABLE.toString());\n         Long minimumAllocation \u003d conf.getLong(\n             YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName\n                 + MINIMUM_ALLOCATION, 0L);\n         Long maximumAllocation \u003d conf.getLong(\n             YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName\n                 + MAXIMUM_ALLOCATION, Long.MAX_VALUE);\n         if (resourceName \u003d\u003d null || resourceName.isEmpty()\n             || resourceUnits \u003d\u003d null || resourceTypeName \u003d\u003d null) {\n           throw new YarnRuntimeException(\n               \"Incomplete configuration for resource type \u0027\" + resourceName\n                   + \"\u0027. One of name, units or type is configured incorrectly.\");\n         }\n-        if (DISALLOWED_NAMES.contains(resourceName)) {\n-          throw new YarnRuntimeException(\n-              \"Resource type cannot be named \u0027\" + resourceName\n-                  + \"\u0027. That name is disallowed.\");\n-        }\n         ResourceTypes resourceType \u003d ResourceTypes.valueOf(resourceTypeName);\n         LOG.info(\"Adding resource type - name \u003d \" + resourceName + \", units \u003d \"\n             + resourceUnits + \", type \u003d \" + resourceTypeName);\n         if (resourceInformationMap.containsKey(resourceName)) {\n           throw new YarnRuntimeException(\n               \"Error in config, key \u0027\" + resourceName + \"\u0027 specified twice\");\n         }\n         resourceInformationMap.put(resourceName, ResourceInformation\n             .newInstance(resourceName, resourceUnits, 0L, resourceType,\n                 minimumAllocation, maximumAllocation));\n       }\n     }\n-    checkMandatatoryResources(resourceInformationMap);\n-    addManadtoryResources(resourceInformationMap);\n+    checkMandatoryResources(resourceInformationMap);\n+    addMandatoryResources(resourceInformationMap);\n     setMinimumAllocationForMandatoryResources(resourceInformationMap, conf);\n     setMaximumAllocationForMandatoryResources(resourceInformationMap, conf);\n     resourceTypes \u003d Collections.unmodifiableMap(resourceInformationMap);\n     updateKnownResources();\n     updateResourceTypeIndex();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static void initializeResourcesMap(Configuration conf) {\n\n    Map\u003cString, ResourceInformation\u003e resourceInformationMap \u003d new HashMap\u003c\u003e();\n    String[] resourceNames \u003d conf.getStrings(YarnConfiguration.RESOURCE_TYPES);\n\n    if (resourceNames !\u003d null \u0026\u0026 resourceNames.length !\u003d 0) {\n      for (String resourceName : resourceNames) {\n        String resourceUnits \u003d conf.get(\n            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + UNITS, \"\");\n        String resourceTypeName \u003d conf.get(\n            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + TYPE,\n            ResourceTypes.COUNTABLE.toString());\n        Long minimumAllocation \u003d conf.getLong(\n            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName\n                + MINIMUM_ALLOCATION, 0L);\n        Long maximumAllocation \u003d conf.getLong(\n            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName\n                + MAXIMUM_ALLOCATION, Long.MAX_VALUE);\n        if (resourceName \u003d\u003d null || resourceName.isEmpty()\n            || resourceUnits \u003d\u003d null || resourceTypeName \u003d\u003d null) {\n          throw new YarnRuntimeException(\n              \"Incomplete configuration for resource type \u0027\" + resourceName\n                  + \"\u0027. One of name, units or type is configured incorrectly.\");\n        }\n        ResourceTypes resourceType \u003d ResourceTypes.valueOf(resourceTypeName);\n        LOG.info(\"Adding resource type - name \u003d \" + resourceName + \", units \u003d \"\n            + resourceUnits + \", type \u003d \" + resourceTypeName);\n        if (resourceInformationMap.containsKey(resourceName)) {\n          throw new YarnRuntimeException(\n              \"Error in config, key \u0027\" + resourceName + \"\u0027 specified twice\");\n        }\n        resourceInformationMap.put(resourceName, ResourceInformation\n            .newInstance(resourceName, resourceUnits, 0L, resourceType,\n                minimumAllocation, maximumAllocation));\n      }\n    }\n    checkMandatoryResources(resourceInformationMap);\n    addMandatoryResources(resourceInformationMap);\n    setMinimumAllocationForMandatoryResources(resourceInformationMap, conf);\n    setMaximumAllocationForMandatoryResources(resourceInformationMap, conf);\n    resourceTypes \u003d Collections.unmodifiableMap(resourceInformationMap);\n    updateKnownResources();\n    updateResourceTypeIndex();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
      "extendedDetails": {}
    },
    "758b7719430c981a6d4d1644d9d03cd16b981cf3": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-6781. [YARN-3926] ResourceUtils#initializeResourcesMap takes an unnecessary Map parameter. Contributed by Yu-Tang Lin.\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "758b7719430c981a6d4d1644d9d03cd16b981cf3",
      "commitAuthor": "Sunil G",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6781. [YARN-3926] ResourceUtils#initializeResourcesMap takes an unnecessary Map parameter. Contributed by Yu-Tang Lin.\n",
          "commitDate": "12/09/17 9:19 AM",
          "commitName": "758b7719430c981a6d4d1644d9d03cd16b981cf3",
          "commitAuthor": "Sunil G",
          "commitDateOld": "12/09/17 9:19 AM",
          "commitNameOld": "df3855541af98a3805958f2b5b9db6be705d52ab",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,49 +1,49 @@\n-  static void initializeResourcesMap(Configuration conf,\n-      Map\u003cString, ResourceInformation\u003e resourceInformationMap) {\n+  static void initializeResourcesMap(Configuration conf) {\n \n+    Map\u003cString, ResourceInformation\u003e resourceInformationMap \u003d new HashMap\u003c\u003e();\n     String[] resourceNames \u003d conf.getStrings(YarnConfiguration.RESOURCE_TYPES);\n \n     if (resourceNames !\u003d null \u0026\u0026 resourceNames.length !\u003d 0) {\n       for (String resourceName : resourceNames) {\n         String resourceUnits \u003d conf.get(\n             YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + UNITS, \"\");\n         String resourceTypeName \u003d conf.get(\n             YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + TYPE,\n             ResourceTypes.COUNTABLE.toString());\n         Long minimumAllocation \u003d conf.getLong(\n             YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName\n                 + MINIMUM_ALLOCATION, 0L);\n         Long maximumAllocation \u003d conf.getLong(\n             YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName\n                 + MAXIMUM_ALLOCATION, Long.MAX_VALUE);\n         if (resourceName \u003d\u003d null || resourceName.isEmpty()\n             || resourceUnits \u003d\u003d null || resourceTypeName \u003d\u003d null) {\n           throw new YarnRuntimeException(\n               \"Incomplete configuration for resource type \u0027\" + resourceName\n                   + \"\u0027. One of name, units or type is configured incorrectly.\");\n         }\n         if (DISALLOWED_NAMES.contains(resourceName)) {\n           throw new YarnRuntimeException(\n               \"Resource type cannot be named \u0027\" + resourceName\n                   + \"\u0027. That name is disallowed.\");\n         }\n         ResourceTypes resourceType \u003d ResourceTypes.valueOf(resourceTypeName);\n         LOG.info(\"Adding resource type - name \u003d \" + resourceName + \", units \u003d \"\n             + resourceUnits + \", type \u003d \" + resourceTypeName);\n         if (resourceInformationMap.containsKey(resourceName)) {\n           throw new YarnRuntimeException(\n               \"Error in config, key \u0027\" + resourceName + \"\u0027 specified twice\");\n         }\n         resourceInformationMap.put(resourceName, ResourceInformation\n             .newInstance(resourceName, resourceUnits, 0L, resourceType,\n                 minimumAllocation, maximumAllocation));\n       }\n     }\n     checkMandatatoryResources(resourceInformationMap);\n     addManadtoryResources(resourceInformationMap);\n     setMinimumAllocationForMandatoryResources(resourceInformationMap, conf);\n     setMaximumAllocationForMandatoryResources(resourceInformationMap, conf);\n     resourceTypes \u003d Collections.unmodifiableMap(resourceInformationMap);\n     updateKnownResources();\n     updateResourceTypeIndex();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static void initializeResourcesMap(Configuration conf) {\n\n    Map\u003cString, ResourceInformation\u003e resourceInformationMap \u003d new HashMap\u003c\u003e();\n    String[] resourceNames \u003d conf.getStrings(YarnConfiguration.RESOURCE_TYPES);\n\n    if (resourceNames !\u003d null \u0026\u0026 resourceNames.length !\u003d 0) {\n      for (String resourceName : resourceNames) {\n        String resourceUnits \u003d conf.get(\n            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + UNITS, \"\");\n        String resourceTypeName \u003d conf.get(\n            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + TYPE,\n            ResourceTypes.COUNTABLE.toString());\n        Long minimumAllocation \u003d conf.getLong(\n            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName\n                + MINIMUM_ALLOCATION, 0L);\n        Long maximumAllocation \u003d conf.getLong(\n            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName\n                + MAXIMUM_ALLOCATION, Long.MAX_VALUE);\n        if (resourceName \u003d\u003d null || resourceName.isEmpty()\n            || resourceUnits \u003d\u003d null || resourceTypeName \u003d\u003d null) {\n          throw new YarnRuntimeException(\n              \"Incomplete configuration for resource type \u0027\" + resourceName\n                  + \"\u0027. One of name, units or type is configured incorrectly.\");\n        }\n        if (DISALLOWED_NAMES.contains(resourceName)) {\n          throw new YarnRuntimeException(\n              \"Resource type cannot be named \u0027\" + resourceName\n                  + \"\u0027. That name is disallowed.\");\n        }\n        ResourceTypes resourceType \u003d ResourceTypes.valueOf(resourceTypeName);\n        LOG.info(\"Adding resource type - name \u003d \" + resourceName + \", units \u003d \"\n            + resourceUnits + \", type \u003d \" + resourceTypeName);\n        if (resourceInformationMap.containsKey(resourceName)) {\n          throw new YarnRuntimeException(\n              \"Error in config, key \u0027\" + resourceName + \"\u0027 specified twice\");\n        }\n        resourceInformationMap.put(resourceName, ResourceInformation\n            .newInstance(resourceName, resourceUnits, 0L, resourceType,\n                minimumAllocation, maximumAllocation));\n      }\n    }\n    checkMandatatoryResources(resourceInformationMap);\n    addManadtoryResources(resourceInformationMap);\n    setMinimumAllocationForMandatoryResources(resourceInformationMap, conf);\n    setMaximumAllocationForMandatoryResources(resourceInformationMap, conf);\n    resourceTypes \u003d Collections.unmodifiableMap(resourceInformationMap);\n    updateKnownResources();\n    updateResourceTypeIndex();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration, resourceInformationMap-Map\u003cString,ResourceInformation\u003e]",
            "newValue": "[conf-Configuration]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6781. [YARN-3926] ResourceUtils#initializeResourcesMap takes an unnecessary Map parameter. Contributed by Yu-Tang Lin.\n",
          "commitDate": "12/09/17 9:19 AM",
          "commitName": "758b7719430c981a6d4d1644d9d03cd16b981cf3",
          "commitAuthor": "Sunil G",
          "commitDateOld": "12/09/17 9:19 AM",
          "commitNameOld": "df3855541af98a3805958f2b5b9db6be705d52ab",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,49 +1,49 @@\n-  static void initializeResourcesMap(Configuration conf,\n-      Map\u003cString, ResourceInformation\u003e resourceInformationMap) {\n+  static void initializeResourcesMap(Configuration conf) {\n \n+    Map\u003cString, ResourceInformation\u003e resourceInformationMap \u003d new HashMap\u003c\u003e();\n     String[] resourceNames \u003d conf.getStrings(YarnConfiguration.RESOURCE_TYPES);\n \n     if (resourceNames !\u003d null \u0026\u0026 resourceNames.length !\u003d 0) {\n       for (String resourceName : resourceNames) {\n         String resourceUnits \u003d conf.get(\n             YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + UNITS, \"\");\n         String resourceTypeName \u003d conf.get(\n             YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + TYPE,\n             ResourceTypes.COUNTABLE.toString());\n         Long minimumAllocation \u003d conf.getLong(\n             YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName\n                 + MINIMUM_ALLOCATION, 0L);\n         Long maximumAllocation \u003d conf.getLong(\n             YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName\n                 + MAXIMUM_ALLOCATION, Long.MAX_VALUE);\n         if (resourceName \u003d\u003d null || resourceName.isEmpty()\n             || resourceUnits \u003d\u003d null || resourceTypeName \u003d\u003d null) {\n           throw new YarnRuntimeException(\n               \"Incomplete configuration for resource type \u0027\" + resourceName\n                   + \"\u0027. One of name, units or type is configured incorrectly.\");\n         }\n         if (DISALLOWED_NAMES.contains(resourceName)) {\n           throw new YarnRuntimeException(\n               \"Resource type cannot be named \u0027\" + resourceName\n                   + \"\u0027. That name is disallowed.\");\n         }\n         ResourceTypes resourceType \u003d ResourceTypes.valueOf(resourceTypeName);\n         LOG.info(\"Adding resource type - name \u003d \" + resourceName + \", units \u003d \"\n             + resourceUnits + \", type \u003d \" + resourceTypeName);\n         if (resourceInformationMap.containsKey(resourceName)) {\n           throw new YarnRuntimeException(\n               \"Error in config, key \u0027\" + resourceName + \"\u0027 specified twice\");\n         }\n         resourceInformationMap.put(resourceName, ResourceInformation\n             .newInstance(resourceName, resourceUnits, 0L, resourceType,\n                 minimumAllocation, maximumAllocation));\n       }\n     }\n     checkMandatatoryResources(resourceInformationMap);\n     addManadtoryResources(resourceInformationMap);\n     setMinimumAllocationForMandatoryResources(resourceInformationMap, conf);\n     setMaximumAllocationForMandatoryResources(resourceInformationMap, conf);\n     resourceTypes \u003d Collections.unmodifiableMap(resourceInformationMap);\n     updateKnownResources();\n     updateResourceTypeIndex();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static void initializeResourcesMap(Configuration conf) {\n\n    Map\u003cString, ResourceInformation\u003e resourceInformationMap \u003d new HashMap\u003c\u003e();\n    String[] resourceNames \u003d conf.getStrings(YarnConfiguration.RESOURCE_TYPES);\n\n    if (resourceNames !\u003d null \u0026\u0026 resourceNames.length !\u003d 0) {\n      for (String resourceName : resourceNames) {\n        String resourceUnits \u003d conf.get(\n            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + UNITS, \"\");\n        String resourceTypeName \u003d conf.get(\n            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + TYPE,\n            ResourceTypes.COUNTABLE.toString());\n        Long minimumAllocation \u003d conf.getLong(\n            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName\n                + MINIMUM_ALLOCATION, 0L);\n        Long maximumAllocation \u003d conf.getLong(\n            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName\n                + MAXIMUM_ALLOCATION, Long.MAX_VALUE);\n        if (resourceName \u003d\u003d null || resourceName.isEmpty()\n            || resourceUnits \u003d\u003d null || resourceTypeName \u003d\u003d null) {\n          throw new YarnRuntimeException(\n              \"Incomplete configuration for resource type \u0027\" + resourceName\n                  + \"\u0027. One of name, units or type is configured incorrectly.\");\n        }\n        if (DISALLOWED_NAMES.contains(resourceName)) {\n          throw new YarnRuntimeException(\n              \"Resource type cannot be named \u0027\" + resourceName\n                  + \"\u0027. That name is disallowed.\");\n        }\n        ResourceTypes resourceType \u003d ResourceTypes.valueOf(resourceTypeName);\n        LOG.info(\"Adding resource type - name \u003d \" + resourceName + \", units \u003d \"\n            + resourceUnits + \", type \u003d \" + resourceTypeName);\n        if (resourceInformationMap.containsKey(resourceName)) {\n          throw new YarnRuntimeException(\n              \"Error in config, key \u0027\" + resourceName + \"\u0027 specified twice\");\n        }\n        resourceInformationMap.put(resourceName, ResourceInformation\n            .newInstance(resourceName, resourceUnits, 0L, resourceType,\n                minimumAllocation, maximumAllocation));\n      }\n    }\n    checkMandatatoryResources(resourceInformationMap);\n    addManadtoryResources(resourceInformationMap);\n    setMinimumAllocationForMandatoryResources(resourceInformationMap, conf);\n    setMaximumAllocationForMandatoryResources(resourceInformationMap, conf);\n    resourceTypes \u003d Collections.unmodifiableMap(resourceInformationMap);\n    updateKnownResources();\n    updateResourceTypeIndex();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "YARN-6788. [YARN-3926] Improve performance of resource profile branch\n(Contributed by Sunil Govindan via Daniel Templeton)\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d",
      "commitAuthor": "Daniel Templeton",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-6788. [YARN-3926] Improve performance of resource profile branch\n(Contributed by Sunil Govindan via Daniel Templeton)\n",
          "commitDate": "12/09/17 9:19 AM",
          "commitName": "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d",
          "commitAuthor": "Daniel Templeton",
          "commitDateOld": "12/09/17 9:19 AM",
          "commitNameOld": "4e5632d28eb8f6b1b8830c2aa89ec6321d477977",
          "commitAuthorOld": "Sunil G",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,49 @@\n   static void initializeResourcesMap(Configuration conf,\n       Map\u003cString, ResourceInformation\u003e resourceInformationMap) {\n \n     String[] resourceNames \u003d conf.getStrings(YarnConfiguration.RESOURCE_TYPES);\n \n     if (resourceNames !\u003d null \u0026\u0026 resourceNames.length !\u003d 0) {\n       for (String resourceName : resourceNames) {\n         String resourceUnits \u003d conf.get(\n             YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + UNITS, \"\");\n         String resourceTypeName \u003d conf.get(\n             YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + TYPE,\n             ResourceTypes.COUNTABLE.toString());\n         Long minimumAllocation \u003d conf.getLong(\n             YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName\n                 + MINIMUM_ALLOCATION, 0L);\n         Long maximumAllocation \u003d conf.getLong(\n             YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName\n                 + MAXIMUM_ALLOCATION, Long.MAX_VALUE);\n         if (resourceName \u003d\u003d null || resourceName.isEmpty()\n             || resourceUnits \u003d\u003d null || resourceTypeName \u003d\u003d null) {\n           throw new YarnRuntimeException(\n               \"Incomplete configuration for resource type \u0027\" + resourceName\n                   + \"\u0027. One of name, units or type is configured incorrectly.\");\n         }\n         if (DISALLOWED_NAMES.contains(resourceName)) {\n           throw new YarnRuntimeException(\n               \"Resource type cannot be named \u0027\" + resourceName\n                   + \"\u0027. That name is disallowed.\");\n         }\n         ResourceTypes resourceType \u003d ResourceTypes.valueOf(resourceTypeName);\n         LOG.info(\"Adding resource type - name \u003d \" + resourceName + \", units \u003d \"\n             + resourceUnits + \", type \u003d \" + resourceTypeName);\n         if (resourceInformationMap.containsKey(resourceName)) {\n           throw new YarnRuntimeException(\n               \"Error in config, key \u0027\" + resourceName + \"\u0027 specified twice\");\n         }\n         resourceInformationMap.put(resourceName, ResourceInformation\n             .newInstance(resourceName, resourceUnits, 0L, resourceType,\n                 minimumAllocation, maximumAllocation));\n       }\n     }\n     checkMandatatoryResources(resourceInformationMap);\n     addManadtoryResources(resourceInformationMap);\n     setMinimumAllocationForMandatoryResources(resourceInformationMap, conf);\n     setMaximumAllocationForMandatoryResources(resourceInformationMap, conf);\n-    readOnlyResources \u003d Collections.unmodifiableMap(resourceInformationMap);\n+    resourceTypes \u003d Collections.unmodifiableMap(resourceInformationMap);\n+    updateKnownResources();\n+    updateResourceTypeIndex();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static void initializeResourcesMap(Configuration conf,\n      Map\u003cString, ResourceInformation\u003e resourceInformationMap) {\n\n    String[] resourceNames \u003d conf.getStrings(YarnConfiguration.RESOURCE_TYPES);\n\n    if (resourceNames !\u003d null \u0026\u0026 resourceNames.length !\u003d 0) {\n      for (String resourceName : resourceNames) {\n        String resourceUnits \u003d conf.get(\n            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + UNITS, \"\");\n        String resourceTypeName \u003d conf.get(\n            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + TYPE,\n            ResourceTypes.COUNTABLE.toString());\n        Long minimumAllocation \u003d conf.getLong(\n            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName\n                + MINIMUM_ALLOCATION, 0L);\n        Long maximumAllocation \u003d conf.getLong(\n            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName\n                + MAXIMUM_ALLOCATION, Long.MAX_VALUE);\n        if (resourceName \u003d\u003d null || resourceName.isEmpty()\n            || resourceUnits \u003d\u003d null || resourceTypeName \u003d\u003d null) {\n          throw new YarnRuntimeException(\n              \"Incomplete configuration for resource type \u0027\" + resourceName\n                  + \"\u0027. One of name, units or type is configured incorrectly.\");\n        }\n        if (DISALLOWED_NAMES.contains(resourceName)) {\n          throw new YarnRuntimeException(\n              \"Resource type cannot be named \u0027\" + resourceName\n                  + \"\u0027. That name is disallowed.\");\n        }\n        ResourceTypes resourceType \u003d ResourceTypes.valueOf(resourceTypeName);\n        LOG.info(\"Adding resource type - name \u003d \" + resourceName + \", units \u003d \"\n            + resourceUnits + \", type \u003d \" + resourceTypeName);\n        if (resourceInformationMap.containsKey(resourceName)) {\n          throw new YarnRuntimeException(\n              \"Error in config, key \u0027\" + resourceName + \"\u0027 specified twice\");\n        }\n        resourceInformationMap.put(resourceName, ResourceInformation\n            .newInstance(resourceName, resourceUnits, 0L, resourceType,\n                minimumAllocation, maximumAllocation));\n      }\n    }\n    checkMandatatoryResources(resourceInformationMap);\n    addManadtoryResources(resourceInformationMap);\n    setMinimumAllocationForMandatoryResources(resourceInformationMap, conf);\n    setMaximumAllocationForMandatoryResources(resourceInformationMap, conf);\n    resourceTypes \u003d Collections.unmodifiableMap(resourceInformationMap);\n    updateKnownResources();\n    updateResourceTypeIndex();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6788. [YARN-3926] Improve performance of resource profile branch\n(Contributed by Sunil Govindan via Daniel Templeton)\n",
          "commitDate": "12/09/17 9:19 AM",
          "commitName": "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d",
          "commitAuthor": "Daniel Templeton",
          "commitDateOld": "12/09/17 9:19 AM",
          "commitNameOld": "4e5632d28eb8f6b1b8830c2aa89ec6321d477977",
          "commitAuthorOld": "Sunil G",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,49 @@\n   static void initializeResourcesMap(Configuration conf,\n       Map\u003cString, ResourceInformation\u003e resourceInformationMap) {\n \n     String[] resourceNames \u003d conf.getStrings(YarnConfiguration.RESOURCE_TYPES);\n \n     if (resourceNames !\u003d null \u0026\u0026 resourceNames.length !\u003d 0) {\n       for (String resourceName : resourceNames) {\n         String resourceUnits \u003d conf.get(\n             YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + UNITS, \"\");\n         String resourceTypeName \u003d conf.get(\n             YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + TYPE,\n             ResourceTypes.COUNTABLE.toString());\n         Long minimumAllocation \u003d conf.getLong(\n             YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName\n                 + MINIMUM_ALLOCATION, 0L);\n         Long maximumAllocation \u003d conf.getLong(\n             YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName\n                 + MAXIMUM_ALLOCATION, Long.MAX_VALUE);\n         if (resourceName \u003d\u003d null || resourceName.isEmpty()\n             || resourceUnits \u003d\u003d null || resourceTypeName \u003d\u003d null) {\n           throw new YarnRuntimeException(\n               \"Incomplete configuration for resource type \u0027\" + resourceName\n                   + \"\u0027. One of name, units or type is configured incorrectly.\");\n         }\n         if (DISALLOWED_NAMES.contains(resourceName)) {\n           throw new YarnRuntimeException(\n               \"Resource type cannot be named \u0027\" + resourceName\n                   + \"\u0027. That name is disallowed.\");\n         }\n         ResourceTypes resourceType \u003d ResourceTypes.valueOf(resourceTypeName);\n         LOG.info(\"Adding resource type - name \u003d \" + resourceName + \", units \u003d \"\n             + resourceUnits + \", type \u003d \" + resourceTypeName);\n         if (resourceInformationMap.containsKey(resourceName)) {\n           throw new YarnRuntimeException(\n               \"Error in config, key \u0027\" + resourceName + \"\u0027 specified twice\");\n         }\n         resourceInformationMap.put(resourceName, ResourceInformation\n             .newInstance(resourceName, resourceUnits, 0L, resourceType,\n                 minimumAllocation, maximumAllocation));\n       }\n     }\n     checkMandatatoryResources(resourceInformationMap);\n     addManadtoryResources(resourceInformationMap);\n     setMinimumAllocationForMandatoryResources(resourceInformationMap, conf);\n     setMaximumAllocationForMandatoryResources(resourceInformationMap, conf);\n-    readOnlyResources \u003d Collections.unmodifiableMap(resourceInformationMap);\n+    resourceTypes \u003d Collections.unmodifiableMap(resourceInformationMap);\n+    updateKnownResources();\n+    updateResourceTypeIndex();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static void initializeResourcesMap(Configuration conf,\n      Map\u003cString, ResourceInformation\u003e resourceInformationMap) {\n\n    String[] resourceNames \u003d conf.getStrings(YarnConfiguration.RESOURCE_TYPES);\n\n    if (resourceNames !\u003d null \u0026\u0026 resourceNames.length !\u003d 0) {\n      for (String resourceName : resourceNames) {\n        String resourceUnits \u003d conf.get(\n            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + UNITS, \"\");\n        String resourceTypeName \u003d conf.get(\n            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + TYPE,\n            ResourceTypes.COUNTABLE.toString());\n        Long minimumAllocation \u003d conf.getLong(\n            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName\n                + MINIMUM_ALLOCATION, 0L);\n        Long maximumAllocation \u003d conf.getLong(\n            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName\n                + MAXIMUM_ALLOCATION, Long.MAX_VALUE);\n        if (resourceName \u003d\u003d null || resourceName.isEmpty()\n            || resourceUnits \u003d\u003d null || resourceTypeName \u003d\u003d null) {\n          throw new YarnRuntimeException(\n              \"Incomplete configuration for resource type \u0027\" + resourceName\n                  + \"\u0027. One of name, units or type is configured incorrectly.\");\n        }\n        if (DISALLOWED_NAMES.contains(resourceName)) {\n          throw new YarnRuntimeException(\n              \"Resource type cannot be named \u0027\" + resourceName\n                  + \"\u0027. That name is disallowed.\");\n        }\n        ResourceTypes resourceType \u003d ResourceTypes.valueOf(resourceTypeName);\n        LOG.info(\"Adding resource type - name \u003d \" + resourceName + \", units \u003d \"\n            + resourceUnits + \", type \u003d \" + resourceTypeName);\n        if (resourceInformationMap.containsKey(resourceName)) {\n          throw new YarnRuntimeException(\n              \"Error in config, key \u0027\" + resourceName + \"\u0027 specified twice\");\n        }\n        resourceInformationMap.put(resourceName, ResourceInformation\n            .newInstance(resourceName, resourceUnits, 0L, resourceType,\n                minimumAllocation, maximumAllocation));\n      }\n    }\n    checkMandatatoryResources(resourceInformationMap);\n    addManadtoryResources(resourceInformationMap);\n    setMinimumAllocationForMandatoryResources(resourceInformationMap, conf);\n    setMaximumAllocationForMandatoryResources(resourceInformationMap, conf);\n    resourceTypes \u003d Collections.unmodifiableMap(resourceInformationMap);\n    updateKnownResources();\n    updateResourceTypeIndex();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "6708ac330147b2d3816a31f2ee83e09c41fe0dd9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5587. Add support for resource profiles. (vvasudev via asuresh)\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "6708ac330147b2d3816a31f2ee83e09c41fe0dd9",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "239c1824a07fede71dd751ed2c1f40036b22170e",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,47 @@\n   static void initializeResourcesMap(Configuration conf,\n       Map\u003cString, ResourceInformation\u003e resourceInformationMap) {\n \n     String[] resourceNames \u003d conf.getStrings(YarnConfiguration.RESOURCE_TYPES);\n \n     if (resourceNames !\u003d null \u0026\u0026 resourceNames.length !\u003d 0) {\n       for (String resourceName : resourceNames) {\n         String resourceUnits \u003d conf.get(\n             YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + UNITS, \"\");\n         String resourceTypeName \u003d conf.get(\n             YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + TYPE,\n             ResourceTypes.COUNTABLE.toString());\n+        Long minimumAllocation \u003d conf.getLong(\n+            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName\n+                + MINIMUM_ALLOCATION, 0L);\n+        Long maximumAllocation \u003d conf.getLong(\n+            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName\n+                + MAXIMUM_ALLOCATION, Long.MAX_VALUE);\n         if (resourceName \u003d\u003d null || resourceName.isEmpty()\n             || resourceUnits \u003d\u003d null || resourceTypeName \u003d\u003d null) {\n           throw new YarnRuntimeException(\n               \"Incomplete configuration for resource type \u0027\" + resourceName\n                   + \"\u0027. One of name, units or type is configured incorrectly.\");\n         }\n         if (DISALLOWED_NAMES.contains(resourceName)) {\n           throw new YarnRuntimeException(\n               \"Resource type cannot be named \u0027\" + resourceName\n                   + \"\u0027. That name is disallowed.\");\n         }\n         ResourceTypes resourceType \u003d ResourceTypes.valueOf(resourceTypeName);\n         LOG.info(\"Adding resource type - name \u003d \" + resourceName + \", units \u003d \"\n             + resourceUnits + \", type \u003d \" + resourceTypeName);\n         if (resourceInformationMap.containsKey(resourceName)) {\n           throw new YarnRuntimeException(\n               \"Error in config, key \u0027\" + resourceName + \"\u0027 specified twice\");\n         }\n         resourceInformationMap.put(resourceName, ResourceInformation\n-            .newInstance(resourceName, resourceUnits, 0L, resourceType));\n+            .newInstance(resourceName, resourceUnits, 0L, resourceType,\n+                minimumAllocation, maximumAllocation));\n       }\n     }\n     checkMandatatoryResources(resourceInformationMap);\n     addManadtoryResources(resourceInformationMap);\n+    setMinimumAllocationForMandatoryResources(resourceInformationMap, conf);\n+    setMaximumAllocationForMandatoryResources(resourceInformationMap, conf);\n     readOnlyResources \u003d Collections.unmodifiableMap(resourceInformationMap);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static void initializeResourcesMap(Configuration conf,\n      Map\u003cString, ResourceInformation\u003e resourceInformationMap) {\n\n    String[] resourceNames \u003d conf.getStrings(YarnConfiguration.RESOURCE_TYPES);\n\n    if (resourceNames !\u003d null \u0026\u0026 resourceNames.length !\u003d 0) {\n      for (String resourceName : resourceNames) {\n        String resourceUnits \u003d conf.get(\n            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + UNITS, \"\");\n        String resourceTypeName \u003d conf.get(\n            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + TYPE,\n            ResourceTypes.COUNTABLE.toString());\n        Long minimumAllocation \u003d conf.getLong(\n            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName\n                + MINIMUM_ALLOCATION, 0L);\n        Long maximumAllocation \u003d conf.getLong(\n            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName\n                + MAXIMUM_ALLOCATION, Long.MAX_VALUE);\n        if (resourceName \u003d\u003d null || resourceName.isEmpty()\n            || resourceUnits \u003d\u003d null || resourceTypeName \u003d\u003d null) {\n          throw new YarnRuntimeException(\n              \"Incomplete configuration for resource type \u0027\" + resourceName\n                  + \"\u0027. One of name, units or type is configured incorrectly.\");\n        }\n        if (DISALLOWED_NAMES.contains(resourceName)) {\n          throw new YarnRuntimeException(\n              \"Resource type cannot be named \u0027\" + resourceName\n                  + \"\u0027. That name is disallowed.\");\n        }\n        ResourceTypes resourceType \u003d ResourceTypes.valueOf(resourceTypeName);\n        LOG.info(\"Adding resource type - name \u003d \" + resourceName + \", units \u003d \"\n            + resourceUnits + \", type \u003d \" + resourceTypeName);\n        if (resourceInformationMap.containsKey(resourceName)) {\n          throw new YarnRuntimeException(\n              \"Error in config, key \u0027\" + resourceName + \"\u0027 specified twice\");\n        }\n        resourceInformationMap.put(resourceName, ResourceInformation\n            .newInstance(resourceName, resourceUnits, 0L, resourceType,\n                minimumAllocation, maximumAllocation));\n      }\n    }\n    checkMandatatoryResources(resourceInformationMap);\n    addManadtoryResources(resourceInformationMap);\n    setMinimumAllocationForMandatoryResources(resourceInformationMap, conf);\n    setMaximumAllocationForMandatoryResources(resourceInformationMap, conf);\n    readOnlyResources \u003d Collections.unmodifiableMap(resourceInformationMap);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
      "extendedDetails": {}
    },
    "ceb12c59a34677518a198e19acb4e29cdfc8a0e1": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4715. Add support to read resource types from a config file. Contributed by Varun Vasudev.\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "ceb12c59a34677518a198e19acb4e29cdfc8a0e1",
      "commitAuthor": "Varun Vasudev",
      "diff": "@@ -0,0 +1,37 @@\n+  static void initializeResourcesMap(Configuration conf,\n+      Map\u003cString, ResourceInformation\u003e resourceInformationMap) {\n+\n+    String[] resourceNames \u003d conf.getStrings(YarnConfiguration.RESOURCE_TYPES);\n+    if (resourceNames !\u003d null \u0026\u0026 resourceNames.length !\u003d 0) {\n+      for (String resourceName : resourceNames) {\n+        String resourceUnits \u003d conf.get(\n+            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + UNITS, \"\");\n+        String resourceTypeName \u003d conf.get(\n+            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + TYPE,\n+            ResourceTypes.COUNTABLE.toString());\n+        if (resourceName \u003d\u003d null || resourceName.isEmpty()\n+            || resourceUnits \u003d\u003d null || resourceTypeName \u003d\u003d null) {\n+          throw new YarnRuntimeException(\n+              \"Incomplete configuration for resource type \u0027\" + resourceName\n+                  + \"\u0027. One of name, units or type is configured incorrectly.\");\n+        }\n+        if (DISALLOWED_NAMES.contains(resourceName)) {\n+          throw new YarnRuntimeException(\n+              \"Resource type cannot be named \u0027\" + resourceName\n+                  + \"\u0027. That name is disallowed.\");\n+        }\n+        ResourceTypes resourceType \u003d ResourceTypes.valueOf(resourceTypeName);\n+        LOG.info(\"Adding resource type - name \u003d \" + resourceName + \", units \u003d \"\n+            + resourceUnits + \", type \u003d \" + resourceTypeName);\n+        if (resourceInformationMap.containsKey(resourceName)) {\n+          throw new YarnRuntimeException(\n+              \"Error in config, key \u0027\" + resourceName + \"\u0027 specified twice\");\n+        }\n+        resourceInformationMap.put(resourceName, ResourceInformation\n+            .newInstance(resourceName, resourceUnits, 0L, resourceType));\n+      }\n+    }\n+    checkMandatatoryResources(resourceInformationMap);\n+    addManadtoryResources(resourceInformationMap);\n+    readOnlyResources \u003d Collections.unmodifiableMap(resourceInformationMap);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  static void initializeResourcesMap(Configuration conf,\n      Map\u003cString, ResourceInformation\u003e resourceInformationMap) {\n\n    String[] resourceNames \u003d conf.getStrings(YarnConfiguration.RESOURCE_TYPES);\n    if (resourceNames !\u003d null \u0026\u0026 resourceNames.length !\u003d 0) {\n      for (String resourceName : resourceNames) {\n        String resourceUnits \u003d conf.get(\n            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + UNITS, \"\");\n        String resourceTypeName \u003d conf.get(\n            YarnConfiguration.RESOURCE_TYPES + \".\" + resourceName + TYPE,\n            ResourceTypes.COUNTABLE.toString());\n        if (resourceName \u003d\u003d null || resourceName.isEmpty()\n            || resourceUnits \u003d\u003d null || resourceTypeName \u003d\u003d null) {\n          throw new YarnRuntimeException(\n              \"Incomplete configuration for resource type \u0027\" + resourceName\n                  + \"\u0027. One of name, units or type is configured incorrectly.\");\n        }\n        if (DISALLOWED_NAMES.contains(resourceName)) {\n          throw new YarnRuntimeException(\n              \"Resource type cannot be named \u0027\" + resourceName\n                  + \"\u0027. That name is disallowed.\");\n        }\n        ResourceTypes resourceType \u003d ResourceTypes.valueOf(resourceTypeName);\n        LOG.info(\"Adding resource type - name \u003d \" + resourceName + \", units \u003d \"\n            + resourceUnits + \", type \u003d \" + resourceTypeName);\n        if (resourceInformationMap.containsKey(resourceName)) {\n          throw new YarnRuntimeException(\n              \"Error in config, key \u0027\" + resourceName + \"\u0027 specified twice\");\n        }\n        resourceInformationMap.put(resourceName, ResourceInformation\n            .newInstance(resourceName, resourceUnits, 0L, resourceType));\n      }\n    }\n    checkMandatatoryResources(resourceInformationMap);\n    addManadtoryResources(resourceInformationMap);\n    readOnlyResources \u003d Collections.unmodifiableMap(resourceInformationMap);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java"
    }
  }
}