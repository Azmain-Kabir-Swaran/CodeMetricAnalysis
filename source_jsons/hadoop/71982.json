{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AuthenticationFilter.java",
  "functionName": "init",
  "functionId": "init___filterConfig-FilterConfig",
  "sourceFilePath": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/AuthenticationFilter.java",
  "functionStartLine": 157,
  "functionEndLine": 187,
  "numCommitsSeen": 36,
  "timeTaken": 3004,
  "changeHistory": [
    "4bca385241c0fc8ff168c7b0f2984a7aed2c7492",
    "dec8dfdfa66c37f8cc8c0900fd12f98c7529b99e",
    "71aedfabf39e03104c8d22456e95ef6349aae6c0",
    "a815cc157ceb24e02189634a85abed8e874568e0",
    "8a261e68e4177b47be01ceae7310ea56aeb7ca38",
    "932ae036acb96634c5dd435d57ba02ce4d5e8918",
    "6d7a6766bd55b355e44dbdcc4dfa22b050b1a509",
    "2d7dcff6f42020cb91c58c5dd460d030188b8a18",
    "22b9a60964ad5c30270bc4b259c46f6a6e879a2e",
    "2b016dac8232e0f5c43293adcbdf7164f5fca74c",
    "4b661b367022fdde5d1914437892910e14fbd3a6",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "a0f120ce68dddb0cb31b64c89f3224313f3cb5af"
  ],
  "changeHistoryShort": {
    "4bca385241c0fc8ff168c7b0f2984a7aed2c7492": "Ybodychange",
    "dec8dfdfa66c37f8cc8c0900fd12f98c7529b99e": "Ybodychange",
    "71aedfabf39e03104c8d22456e95ef6349aae6c0": "Ybodychange",
    "a815cc157ceb24e02189634a85abed8e874568e0": "Ybodychange",
    "8a261e68e4177b47be01ceae7310ea56aeb7ca38": "Ybodychange",
    "932ae036acb96634c5dd435d57ba02ce4d5e8918": "Ybodychange",
    "6d7a6766bd55b355e44dbdcc4dfa22b050b1a509": "Ybodychange",
    "2d7dcff6f42020cb91c58c5dd460d030188b8a18": "Ybodychange",
    "22b9a60964ad5c30270bc4b259c46f6a6e879a2e": "Ybodychange",
    "2b016dac8232e0f5c43293adcbdf7164f5fca74c": "Yfilerename",
    "4b661b367022fdde5d1914437892910e14fbd3a6": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "a0f120ce68dddb0cb31b64c89f3224313f3cb5af": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4bca385241c0fc8ff168c7b0f2984a7aed2c7492": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12082 Support multiple authentication schemes via AuthenticationFilter\n",
      "commitDate": "18/10/16 6:32 PM",
      "commitName": "4bca385241c0fc8ff168c7b0f2984a7aed2c7492",
      "commitAuthor": "Benoy Antony",
      "commitDateOld": "16/09/16 2:53 PM",
      "commitNameOld": "f6f3a447bf3b2900a2e9a0615ad9877f9310e062",
      "commitAuthorOld": "Wei-Chiu Chuang",
      "daysBetweenCommits": 32.15,
      "commitsBetweenForRepo": 229,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,31 @@\n   public void init(FilterConfig filterConfig) throws ServletException {\n     String configPrefix \u003d filterConfig.getInitParameter(CONFIG_PREFIX);\n     configPrefix \u003d (configPrefix !\u003d null) ? configPrefix + \".\" : \"\";\n     config \u003d getConfiguration(configPrefix, filterConfig);\n     String authHandlerName \u003d config.getProperty(AUTH_TYPE, null);\n     String authHandlerClassName;\n     if (authHandlerName \u003d\u003d null) {\n       throw new ServletException(\"Authentication type must be specified: \" +\n           PseudoAuthenticationHandler.TYPE + \"|\" + \n           KerberosAuthenticationHandler.TYPE + \"|\u003cclass\u003e\");\n     }\n-    if (authHandlerName.toLowerCase(Locale.ENGLISH).equals(\n-        PseudoAuthenticationHandler.TYPE)) {\n-      authHandlerClassName \u003d PseudoAuthenticationHandler.class.getName();\n-    } else if (authHandlerName.toLowerCase(Locale.ENGLISH).equals(\n-        KerberosAuthenticationHandler.TYPE)) {\n-      authHandlerClassName \u003d KerberosAuthenticationHandler.class.getName();\n-    } else {\n-      authHandlerClassName \u003d authHandlerName;\n-    }\n+    authHandlerClassName \u003d\n+        AuthenticationHandlerUtil\n+            .getAuthenticationHandlerClassName(authHandlerName);\n     maxInactiveInterval \u003d Long.parseLong(config.getProperty(\n         AUTH_TOKEN_MAX_INACTIVE_INTERVAL, \"-1\")); // By default, disable.\n     if (maxInactiveInterval \u003e 0) {\n       maxInactiveInterval *\u003d 1000;\n     }\n     validity \u003d Long.parseLong(config.getProperty(AUTH_TOKEN_VALIDITY, \"36000\"))\n         * 1000; //10 hours\n     initializeSecretProvider(filterConfig);\n \n     initializeAuthHandler(authHandlerClassName, filterConfig);\n \n     cookieDomain \u003d config.getProperty(COOKIE_DOMAIN, null);\n     cookiePath \u003d config.getProperty(COOKIE_PATH, null);\n     isCookiePersistent \u003d Boolean.parseBoolean(\n             config.getProperty(COOKIE_PERSISTENT, \"false\"));\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(FilterConfig filterConfig) throws ServletException {\n    String configPrefix \u003d filterConfig.getInitParameter(CONFIG_PREFIX);\n    configPrefix \u003d (configPrefix !\u003d null) ? configPrefix + \".\" : \"\";\n    config \u003d getConfiguration(configPrefix, filterConfig);\n    String authHandlerName \u003d config.getProperty(AUTH_TYPE, null);\n    String authHandlerClassName;\n    if (authHandlerName \u003d\u003d null) {\n      throw new ServletException(\"Authentication type must be specified: \" +\n          PseudoAuthenticationHandler.TYPE + \"|\" + \n          KerberosAuthenticationHandler.TYPE + \"|\u003cclass\u003e\");\n    }\n    authHandlerClassName \u003d\n        AuthenticationHandlerUtil\n            .getAuthenticationHandlerClassName(authHandlerName);\n    maxInactiveInterval \u003d Long.parseLong(config.getProperty(\n        AUTH_TOKEN_MAX_INACTIVE_INTERVAL, \"-1\")); // By default, disable.\n    if (maxInactiveInterval \u003e 0) {\n      maxInactiveInterval *\u003d 1000;\n    }\n    validity \u003d Long.parseLong(config.getProperty(AUTH_TOKEN_VALIDITY, \"36000\"))\n        * 1000; //10 hours\n    initializeSecretProvider(filterConfig);\n\n    initializeAuthHandler(authHandlerClassName, filterConfig);\n\n    cookieDomain \u003d config.getProperty(COOKIE_DOMAIN, null);\n    cookiePath \u003d config.getProperty(COOKIE_PATH, null);\n    isCookiePersistent \u003d Boolean.parseBoolean(\n            config.getProperty(COOKIE_PERSISTENT, \"false\"));\n\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/AuthenticationFilter.java",
      "extendedDetails": {}
    },
    "dec8dfdfa66c37f8cc8c0900fd12f98c7529b99e": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12587. Hadoop AuthToken refuses to work without a maxinactive attribute in issued token. (Benoy Antony)\n",
      "commitDate": "09/01/16 1:41 PM",
      "commitName": "dec8dfdfa66c37f8cc8c0900fd12f98c7529b99e",
      "commitAuthor": "Benoy Antony",
      "commitDateOld": "18/08/15 1:43 PM",
      "commitNameOld": "71aedfabf39e03104c8d22456e95ef6349aae6c0",
      "commitAuthorOld": "Benoy Antony",
      "daysBetweenCommits": 144.04,
      "commitsBetweenForRepo": 969,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,37 @@\n   public void init(FilterConfig filterConfig) throws ServletException {\n     String configPrefix \u003d filterConfig.getInitParameter(CONFIG_PREFIX);\n     configPrefix \u003d (configPrefix !\u003d null) ? configPrefix + \".\" : \"\";\n     config \u003d getConfiguration(configPrefix, filterConfig);\n     String authHandlerName \u003d config.getProperty(AUTH_TYPE, null);\n     String authHandlerClassName;\n     if (authHandlerName \u003d\u003d null) {\n       throw new ServletException(\"Authentication type must be specified: \" +\n           PseudoAuthenticationHandler.TYPE + \"|\" + \n           KerberosAuthenticationHandler.TYPE + \"|\u003cclass\u003e\");\n     }\n     if (authHandlerName.toLowerCase(Locale.ENGLISH).equals(\n         PseudoAuthenticationHandler.TYPE)) {\n       authHandlerClassName \u003d PseudoAuthenticationHandler.class.getName();\n     } else if (authHandlerName.toLowerCase(Locale.ENGLISH).equals(\n         KerberosAuthenticationHandler.TYPE)) {\n       authHandlerClassName \u003d KerberosAuthenticationHandler.class.getName();\n     } else {\n       authHandlerClassName \u003d authHandlerName;\n     }\n-\n     maxInactiveInterval \u003d Long.parseLong(config.getProperty(\n-        AUTH_TOKEN_MAX_INACTIVE_INTERVAL, \"1800\")) * 1000; // 30 minutes;\n+        AUTH_TOKEN_MAX_INACTIVE_INTERVAL, \"-1\")); // By default, disable.\n+    if (maxInactiveInterval \u003e 0) {\n+      maxInactiveInterval *\u003d 1000;\n+    }\n     validity \u003d Long.parseLong(config.getProperty(AUTH_TOKEN_VALIDITY, \"36000\"))\n         * 1000; //10 hours\n     initializeSecretProvider(filterConfig);\n \n     initializeAuthHandler(authHandlerClassName, filterConfig);\n \n     cookieDomain \u003d config.getProperty(COOKIE_DOMAIN, null);\n     cookiePath \u003d config.getProperty(COOKIE_PATH, null);\n     isCookiePersistent \u003d Boolean.parseBoolean(\n             config.getProperty(COOKIE_PERSISTENT, \"false\"));\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(FilterConfig filterConfig) throws ServletException {\n    String configPrefix \u003d filterConfig.getInitParameter(CONFIG_PREFIX);\n    configPrefix \u003d (configPrefix !\u003d null) ? configPrefix + \".\" : \"\";\n    config \u003d getConfiguration(configPrefix, filterConfig);\n    String authHandlerName \u003d config.getProperty(AUTH_TYPE, null);\n    String authHandlerClassName;\n    if (authHandlerName \u003d\u003d null) {\n      throw new ServletException(\"Authentication type must be specified: \" +\n          PseudoAuthenticationHandler.TYPE + \"|\" + \n          KerberosAuthenticationHandler.TYPE + \"|\u003cclass\u003e\");\n    }\n    if (authHandlerName.toLowerCase(Locale.ENGLISH).equals(\n        PseudoAuthenticationHandler.TYPE)) {\n      authHandlerClassName \u003d PseudoAuthenticationHandler.class.getName();\n    } else if (authHandlerName.toLowerCase(Locale.ENGLISH).equals(\n        KerberosAuthenticationHandler.TYPE)) {\n      authHandlerClassName \u003d KerberosAuthenticationHandler.class.getName();\n    } else {\n      authHandlerClassName \u003d authHandlerName;\n    }\n    maxInactiveInterval \u003d Long.parseLong(config.getProperty(\n        AUTH_TOKEN_MAX_INACTIVE_INTERVAL, \"-1\")); // By default, disable.\n    if (maxInactiveInterval \u003e 0) {\n      maxInactiveInterval *\u003d 1000;\n    }\n    validity \u003d Long.parseLong(config.getProperty(AUTH_TOKEN_VALIDITY, \"36000\"))\n        * 1000; //10 hours\n    initializeSecretProvider(filterConfig);\n\n    initializeAuthHandler(authHandlerClassName, filterConfig);\n\n    cookieDomain \u003d config.getProperty(COOKIE_DOMAIN, null);\n    cookiePath \u003d config.getProperty(COOKIE_PATH, null);\n    isCookiePersistent \u003d Boolean.parseBoolean(\n            config.getProperty(COOKIE_PERSISTENT, \"false\"));\n\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/AuthenticationFilter.java",
      "extendedDetails": {}
    },
    "71aedfabf39e03104c8d22456e95ef6349aae6c0": {
      "type": "Ybodychange",
      "commitMessage": "hadoop-12050. Enable MaxInactiveInterval for hadoop http auth token. Contributed by Huizhi Lu.\n",
      "commitDate": "18/08/15 1:43 PM",
      "commitName": "71aedfabf39e03104c8d22456e95ef6349aae6c0",
      "commitAuthor": "Benoy Antony",
      "commitDateOld": "24/06/15 3:59 PM",
      "commitNameOld": "a815cc157ceb24e02189634a85abed8e874568e0",
      "commitAuthorOld": "Benoy Antony",
      "daysBetweenCommits": 54.91,
      "commitsBetweenForRepo": 319,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,35 @@\n   public void init(FilterConfig filterConfig) throws ServletException {\n     String configPrefix \u003d filterConfig.getInitParameter(CONFIG_PREFIX);\n     configPrefix \u003d (configPrefix !\u003d null) ? configPrefix + \".\" : \"\";\n     config \u003d getConfiguration(configPrefix, filterConfig);\n     String authHandlerName \u003d config.getProperty(AUTH_TYPE, null);\n     String authHandlerClassName;\n     if (authHandlerName \u003d\u003d null) {\n       throw new ServletException(\"Authentication type must be specified: \" +\n           PseudoAuthenticationHandler.TYPE + \"|\" + \n           KerberosAuthenticationHandler.TYPE + \"|\u003cclass\u003e\");\n     }\n     if (authHandlerName.toLowerCase(Locale.ENGLISH).equals(\n         PseudoAuthenticationHandler.TYPE)) {\n       authHandlerClassName \u003d PseudoAuthenticationHandler.class.getName();\n     } else if (authHandlerName.toLowerCase(Locale.ENGLISH).equals(\n         KerberosAuthenticationHandler.TYPE)) {\n       authHandlerClassName \u003d KerberosAuthenticationHandler.class.getName();\n     } else {\n       authHandlerClassName \u003d authHandlerName;\n     }\n \n+    maxInactiveInterval \u003d Long.parseLong(config.getProperty(\n+        AUTH_TOKEN_MAX_INACTIVE_INTERVAL, \"1800\")) * 1000; // 30 minutes;\n     validity \u003d Long.parseLong(config.getProperty(AUTH_TOKEN_VALIDITY, \"36000\"))\n         * 1000; //10 hours\n     initializeSecretProvider(filterConfig);\n \n     initializeAuthHandler(authHandlerClassName, filterConfig);\n \n     cookieDomain \u003d config.getProperty(COOKIE_DOMAIN, null);\n     cookiePath \u003d config.getProperty(COOKIE_PATH, null);\n     isCookiePersistent \u003d Boolean.parseBoolean(\n             config.getProperty(COOKIE_PERSISTENT, \"false\"));\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(FilterConfig filterConfig) throws ServletException {\n    String configPrefix \u003d filterConfig.getInitParameter(CONFIG_PREFIX);\n    configPrefix \u003d (configPrefix !\u003d null) ? configPrefix + \".\" : \"\";\n    config \u003d getConfiguration(configPrefix, filterConfig);\n    String authHandlerName \u003d config.getProperty(AUTH_TYPE, null);\n    String authHandlerClassName;\n    if (authHandlerName \u003d\u003d null) {\n      throw new ServletException(\"Authentication type must be specified: \" +\n          PseudoAuthenticationHandler.TYPE + \"|\" + \n          KerberosAuthenticationHandler.TYPE + \"|\u003cclass\u003e\");\n    }\n    if (authHandlerName.toLowerCase(Locale.ENGLISH).equals(\n        PseudoAuthenticationHandler.TYPE)) {\n      authHandlerClassName \u003d PseudoAuthenticationHandler.class.getName();\n    } else if (authHandlerName.toLowerCase(Locale.ENGLISH).equals(\n        KerberosAuthenticationHandler.TYPE)) {\n      authHandlerClassName \u003d KerberosAuthenticationHandler.class.getName();\n    } else {\n      authHandlerClassName \u003d authHandlerName;\n    }\n\n    maxInactiveInterval \u003d Long.parseLong(config.getProperty(\n        AUTH_TOKEN_MAX_INACTIVE_INTERVAL, \"1800\")) * 1000; // 30 minutes;\n    validity \u003d Long.parseLong(config.getProperty(AUTH_TOKEN_VALIDITY, \"36000\"))\n        * 1000; //10 hours\n    initializeSecretProvider(filterConfig);\n\n    initializeAuthHandler(authHandlerClassName, filterConfig);\n\n    cookieDomain \u003d config.getProperty(COOKIE_DOMAIN, null);\n    cookiePath \u003d config.getProperty(COOKIE_PATH, null);\n    isCookiePersistent \u003d Boolean.parseBoolean(\n            config.getProperty(COOKIE_PERSISTENT, \"false\"));\n\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/AuthenticationFilter.java",
      "extendedDetails": {}
    },
    "a815cc157ceb24e02189634a85abed8e874568e0": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12049. Control http authentication cookie persistence via configuration. Contributed by Huizhi Lu.\n",
      "commitDate": "24/06/15 3:59 PM",
      "commitName": "a815cc157ceb24e02189634a85abed8e874568e0",
      "commitAuthor": "Benoy Antony",
      "commitDateOld": "27/04/15 1:25 PM",
      "commitNameOld": "9fec02c069f9bb24b5ee99031917075b4c7a7682",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 58.11,
      "commitsBetweenForRepo": 520,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,33 @@\n   public void init(FilterConfig filterConfig) throws ServletException {\n     String configPrefix \u003d filterConfig.getInitParameter(CONFIG_PREFIX);\n     configPrefix \u003d (configPrefix !\u003d null) ? configPrefix + \".\" : \"\";\n     config \u003d getConfiguration(configPrefix, filterConfig);\n     String authHandlerName \u003d config.getProperty(AUTH_TYPE, null);\n     String authHandlerClassName;\n     if (authHandlerName \u003d\u003d null) {\n       throw new ServletException(\"Authentication type must be specified: \" +\n           PseudoAuthenticationHandler.TYPE + \"|\" + \n           KerberosAuthenticationHandler.TYPE + \"|\u003cclass\u003e\");\n     }\n     if (authHandlerName.toLowerCase(Locale.ENGLISH).equals(\n         PseudoAuthenticationHandler.TYPE)) {\n       authHandlerClassName \u003d PseudoAuthenticationHandler.class.getName();\n     } else if (authHandlerName.toLowerCase(Locale.ENGLISH).equals(\n         KerberosAuthenticationHandler.TYPE)) {\n       authHandlerClassName \u003d KerberosAuthenticationHandler.class.getName();\n     } else {\n       authHandlerClassName \u003d authHandlerName;\n     }\n \n     validity \u003d Long.parseLong(config.getProperty(AUTH_TOKEN_VALIDITY, \"36000\"))\n         * 1000; //10 hours\n     initializeSecretProvider(filterConfig);\n \n     initializeAuthHandler(authHandlerClassName, filterConfig);\n \n     cookieDomain \u003d config.getProperty(COOKIE_DOMAIN, null);\n     cookiePath \u003d config.getProperty(COOKIE_PATH, null);\n+    isCookiePersistent \u003d Boolean.parseBoolean(\n+            config.getProperty(COOKIE_PERSISTENT, \"false\"));\n+\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(FilterConfig filterConfig) throws ServletException {\n    String configPrefix \u003d filterConfig.getInitParameter(CONFIG_PREFIX);\n    configPrefix \u003d (configPrefix !\u003d null) ? configPrefix + \".\" : \"\";\n    config \u003d getConfiguration(configPrefix, filterConfig);\n    String authHandlerName \u003d config.getProperty(AUTH_TYPE, null);\n    String authHandlerClassName;\n    if (authHandlerName \u003d\u003d null) {\n      throw new ServletException(\"Authentication type must be specified: \" +\n          PseudoAuthenticationHandler.TYPE + \"|\" + \n          KerberosAuthenticationHandler.TYPE + \"|\u003cclass\u003e\");\n    }\n    if (authHandlerName.toLowerCase(Locale.ENGLISH).equals(\n        PseudoAuthenticationHandler.TYPE)) {\n      authHandlerClassName \u003d PseudoAuthenticationHandler.class.getName();\n    } else if (authHandlerName.toLowerCase(Locale.ENGLISH).equals(\n        KerberosAuthenticationHandler.TYPE)) {\n      authHandlerClassName \u003d KerberosAuthenticationHandler.class.getName();\n    } else {\n      authHandlerClassName \u003d authHandlerName;\n    }\n\n    validity \u003d Long.parseLong(config.getProperty(AUTH_TOKEN_VALIDITY, \"36000\"))\n        * 1000; //10 hours\n    initializeSecretProvider(filterConfig);\n\n    initializeAuthHandler(authHandlerClassName, filterConfig);\n\n    cookieDomain \u003d config.getProperty(COOKIE_DOMAIN, null);\n    cookiePath \u003d config.getProperty(COOKIE_PATH, null);\n    isCookiePersistent \u003d Boolean.parseBoolean(\n            config.getProperty(COOKIE_PERSISTENT, \"false\"));\n\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/AuthenticationFilter.java",
      "extendedDetails": {}
    },
    "8a261e68e4177b47be01ceae7310ea56aeb7ca38": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11272. Allow ZKSignerSecretProvider and ZKDelegationTokenSecretManager to use the same curator client. Contributed by Arun Suresh.\n",
      "commitDate": "05/11/14 5:47 PM",
      "commitName": "8a261e68e4177b47be01ceae7310ea56aeb7ca38",
      "commitAuthor": "Aaron T. Myers",
      "commitDateOld": "29/10/14 11:18 AM",
      "commitNameOld": "5c900b522e70b512498ab7689f56eb1c5e4b963f",
      "commitAuthorOld": "cnauroth",
      "daysBetweenCommits": 7.31,
      "commitsBetweenForRepo": 85,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,31 @@\n   public void init(FilterConfig filterConfig) throws ServletException {\n     String configPrefix \u003d filterConfig.getInitParameter(CONFIG_PREFIX);\n     configPrefix \u003d (configPrefix !\u003d null) ? configPrefix + \".\" : \"\";\n     config \u003d getConfiguration(configPrefix, filterConfig);\n     String authHandlerName \u003d config.getProperty(AUTH_TYPE, null);\n     String authHandlerClassName;\n     if (authHandlerName \u003d\u003d null) {\n       throw new ServletException(\"Authentication type must be specified: \" +\n           PseudoAuthenticationHandler.TYPE + \"|\" + \n           KerberosAuthenticationHandler.TYPE + \"|\u003cclass\u003e\");\n     }\n     if (authHandlerName.toLowerCase(Locale.ENGLISH).equals(\n         PseudoAuthenticationHandler.TYPE)) {\n       authHandlerClassName \u003d PseudoAuthenticationHandler.class.getName();\n     } else if (authHandlerName.toLowerCase(Locale.ENGLISH).equals(\n         KerberosAuthenticationHandler.TYPE)) {\n       authHandlerClassName \u003d KerberosAuthenticationHandler.class.getName();\n     } else {\n       authHandlerClassName \u003d authHandlerName;\n     }\n \n-    try {\n-      Class\u003c?\u003e klass \u003d Thread.currentThread().getContextClassLoader().loadClass(authHandlerClassName);\n-      authHandler \u003d (AuthenticationHandler) klass.newInstance();\n-      authHandler.init(config);\n-    } catch (ClassNotFoundException ex) {\n-      throw new ServletException(ex);\n-    } catch (InstantiationException ex) {\n-      throw new ServletException(ex);\n-    } catch (IllegalAccessException ex) {\n-      throw new ServletException(ex);\n-    }\n-\n     validity \u003d Long.parseLong(config.getProperty(AUTH_TOKEN_VALIDITY, \"36000\"))\n         * 1000; //10 hours\n-    secretProvider \u003d (SignerSecretProvider) filterConfig.getServletContext().\n-        getAttribute(SIGNER_SECRET_PROVIDER_ATTRIBUTE);\n-    if (secretProvider \u003d\u003d null) {\n-      Class\u003c? extends SignerSecretProvider\u003e providerClass\n-              \u003d getProviderClass(config);\n-      try {\n-        secretProvider \u003d providerClass.newInstance();\n-      } catch (InstantiationException ex) {\n-        throw new ServletException(ex);\n-      } catch (IllegalAccessException ex) {\n-        throw new ServletException(ex);\n-      }\n-      try {\n-        secretProvider.init(config, filterConfig.getServletContext(), validity);\n-      } catch (Exception ex) {\n-        throw new ServletException(ex);\n-      }\n-    } else {\n-      customSecretProvider \u003d true;\n-    }\n-    signer \u003d new Signer(secretProvider);\n+    initializeSecretProvider(filterConfig);\n+\n+    initializeAuthHandler(authHandlerClassName, filterConfig);\n+\n \n     cookieDomain \u003d config.getProperty(COOKIE_DOMAIN, null);\n     cookiePath \u003d config.getProperty(COOKIE_PATH, null);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(FilterConfig filterConfig) throws ServletException {\n    String configPrefix \u003d filterConfig.getInitParameter(CONFIG_PREFIX);\n    configPrefix \u003d (configPrefix !\u003d null) ? configPrefix + \".\" : \"\";\n    config \u003d getConfiguration(configPrefix, filterConfig);\n    String authHandlerName \u003d config.getProperty(AUTH_TYPE, null);\n    String authHandlerClassName;\n    if (authHandlerName \u003d\u003d null) {\n      throw new ServletException(\"Authentication type must be specified: \" +\n          PseudoAuthenticationHandler.TYPE + \"|\" + \n          KerberosAuthenticationHandler.TYPE + \"|\u003cclass\u003e\");\n    }\n    if (authHandlerName.toLowerCase(Locale.ENGLISH).equals(\n        PseudoAuthenticationHandler.TYPE)) {\n      authHandlerClassName \u003d PseudoAuthenticationHandler.class.getName();\n    } else if (authHandlerName.toLowerCase(Locale.ENGLISH).equals(\n        KerberosAuthenticationHandler.TYPE)) {\n      authHandlerClassName \u003d KerberosAuthenticationHandler.class.getName();\n    } else {\n      authHandlerClassName \u003d authHandlerName;\n    }\n\n    validity \u003d Long.parseLong(config.getProperty(AUTH_TOKEN_VALIDITY, \"36000\"))\n        * 1000; //10 hours\n    initializeSecretProvider(filterConfig);\n\n    initializeAuthHandler(authHandlerClassName, filterConfig);\n\n\n    cookieDomain \u003d config.getProperty(COOKIE_DOMAIN, null);\n    cookiePath \u003d config.getProperty(COOKIE_PATH, null);\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/AuthenticationFilter.java",
      "extendedDetails": {}
    },
    "932ae036acb96634c5dd435d57ba02ce4d5e8918": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10868. AuthenticationFilter should support externalizing the secret for signing and provide rotation support. (rkanter via tucu)\n",
      "commitDate": "15/09/14 5:05 PM",
      "commitName": "932ae036acb96634c5dd435d57ba02ce4d5e8918",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "29/08/14 11:23 AM",
      "commitNameOld": "156e6a4f8aed69febec408af423b2a8ac313c643",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 17.24,
      "commitsBetweenForRepo": 139,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,76 +1,60 @@\n   public void init(FilterConfig filterConfig) throws ServletException {\n     String configPrefix \u003d filterConfig.getInitParameter(CONFIG_PREFIX);\n     configPrefix \u003d (configPrefix !\u003d null) ? configPrefix + \".\" : \"\";\n     config \u003d getConfiguration(configPrefix, filterConfig);\n     String authHandlerName \u003d config.getProperty(AUTH_TYPE, null);\n     String authHandlerClassName;\n     if (authHandlerName \u003d\u003d null) {\n       throw new ServletException(\"Authentication type must be specified: \" +\n           PseudoAuthenticationHandler.TYPE + \"|\" + \n           KerberosAuthenticationHandler.TYPE + \"|\u003cclass\u003e\");\n     }\n     if (authHandlerName.toLowerCase(Locale.ENGLISH).equals(\n         PseudoAuthenticationHandler.TYPE)) {\n       authHandlerClassName \u003d PseudoAuthenticationHandler.class.getName();\n     } else if (authHandlerName.toLowerCase(Locale.ENGLISH).equals(\n         KerberosAuthenticationHandler.TYPE)) {\n       authHandlerClassName \u003d KerberosAuthenticationHandler.class.getName();\n     } else {\n       authHandlerClassName \u003d authHandlerName;\n     }\n \n     try {\n       Class\u003c?\u003e klass \u003d Thread.currentThread().getContextClassLoader().loadClass(authHandlerClassName);\n       authHandler \u003d (AuthenticationHandler) klass.newInstance();\n       authHandler.init(config);\n     } catch (ClassNotFoundException ex) {\n       throw new ServletException(ex);\n     } catch (InstantiationException ex) {\n       throw new ServletException(ex);\n     } catch (IllegalAccessException ex) {\n       throw new ServletException(ex);\n     }\n \n     validity \u003d Long.parseLong(config.getProperty(AUTH_TOKEN_VALIDITY, \"36000\"))\n         * 1000; //10 hours\n     secretProvider \u003d (SignerSecretProvider) filterConfig.getServletContext().\n-        getAttribute(SIGNATURE_PROVIDER_ATTRIBUTE);\n+        getAttribute(SIGNER_SECRET_PROVIDER_ATTRIBUTE);\n     if (secretProvider \u003d\u003d null) {\n-      String signerSecretProviderClassName \u003d\n-          config.getProperty(configPrefix + SIGNER_SECRET_PROVIDER_CLASS, null);\n-      if (signerSecretProviderClassName \u003d\u003d null) {\n-        String signatureSecret \u003d\n-            config.getProperty(configPrefix + SIGNATURE_SECRET, null);\n-        if (signatureSecret !\u003d null) {\n-          secretProvider \u003d new StringSignerSecretProvider(signatureSecret);\n-        } else {\n-          secretProvider \u003d new RandomSignerSecretProvider();\n-          randomSecret \u003d true;\n-        }\n-      } else {\n-        try {\n-          Class\u003c?\u003e klass \u003d Thread.currentThread().getContextClassLoader().\n-              loadClass(signerSecretProviderClassName);\n-          secretProvider \u003d (SignerSecretProvider) klass.newInstance();\n-          customSecretProvider \u003d true;\n-        } catch (ClassNotFoundException ex) {\n-          throw new ServletException(ex);\n-        } catch (InstantiationException ex) {\n-          throw new ServletException(ex);\n-        } catch (IllegalAccessException ex) {\n-          throw new ServletException(ex);\n-        }\n+      Class\u003c? extends SignerSecretProvider\u003e providerClass\n+              \u003d getProviderClass(config);\n+      try {\n+        secretProvider \u003d providerClass.newInstance();\n+      } catch (InstantiationException ex) {\n+        throw new ServletException(ex);\n+      } catch (IllegalAccessException ex) {\n+        throw new ServletException(ex);\n       }\n       try {\n-        secretProvider.init(config, validity);\n+        secretProvider.init(config, filterConfig.getServletContext(), validity);\n       } catch (Exception ex) {\n         throw new ServletException(ex);\n       }\n     } else {\n       customSecretProvider \u003d true;\n     }\n     signer \u003d new Signer(secretProvider);\n \n     cookieDomain \u003d config.getProperty(COOKIE_DOMAIN, null);\n     cookiePath \u003d config.getProperty(COOKIE_PATH, null);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(FilterConfig filterConfig) throws ServletException {\n    String configPrefix \u003d filterConfig.getInitParameter(CONFIG_PREFIX);\n    configPrefix \u003d (configPrefix !\u003d null) ? configPrefix + \".\" : \"\";\n    config \u003d getConfiguration(configPrefix, filterConfig);\n    String authHandlerName \u003d config.getProperty(AUTH_TYPE, null);\n    String authHandlerClassName;\n    if (authHandlerName \u003d\u003d null) {\n      throw new ServletException(\"Authentication type must be specified: \" +\n          PseudoAuthenticationHandler.TYPE + \"|\" + \n          KerberosAuthenticationHandler.TYPE + \"|\u003cclass\u003e\");\n    }\n    if (authHandlerName.toLowerCase(Locale.ENGLISH).equals(\n        PseudoAuthenticationHandler.TYPE)) {\n      authHandlerClassName \u003d PseudoAuthenticationHandler.class.getName();\n    } else if (authHandlerName.toLowerCase(Locale.ENGLISH).equals(\n        KerberosAuthenticationHandler.TYPE)) {\n      authHandlerClassName \u003d KerberosAuthenticationHandler.class.getName();\n    } else {\n      authHandlerClassName \u003d authHandlerName;\n    }\n\n    try {\n      Class\u003c?\u003e klass \u003d Thread.currentThread().getContextClassLoader().loadClass(authHandlerClassName);\n      authHandler \u003d (AuthenticationHandler) klass.newInstance();\n      authHandler.init(config);\n    } catch (ClassNotFoundException ex) {\n      throw new ServletException(ex);\n    } catch (InstantiationException ex) {\n      throw new ServletException(ex);\n    } catch (IllegalAccessException ex) {\n      throw new ServletException(ex);\n    }\n\n    validity \u003d Long.parseLong(config.getProperty(AUTH_TOKEN_VALIDITY, \"36000\"))\n        * 1000; //10 hours\n    secretProvider \u003d (SignerSecretProvider) filterConfig.getServletContext().\n        getAttribute(SIGNER_SECRET_PROVIDER_ATTRIBUTE);\n    if (secretProvider \u003d\u003d null) {\n      Class\u003c? extends SignerSecretProvider\u003e providerClass\n              \u003d getProviderClass(config);\n      try {\n        secretProvider \u003d providerClass.newInstance();\n      } catch (InstantiationException ex) {\n        throw new ServletException(ex);\n      } catch (IllegalAccessException ex) {\n        throw new ServletException(ex);\n      }\n      try {\n        secretProvider.init(config, filterConfig.getServletContext(), validity);\n      } catch (Exception ex) {\n        throw new ServletException(ex);\n      }\n    } else {\n      customSecretProvider \u003d true;\n    }\n    signer \u003d new Signer(secretProvider);\n\n    cookieDomain \u003d config.getProperty(COOKIE_DOMAIN, null);\n    cookiePath \u003d config.getProperty(COOKIE_PATH, null);\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/AuthenticationFilter.java",
      "extendedDetails": {}
    },
    "6d7a6766bd55b355e44dbdcc4dfa22b050b1a509": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10835. Implement HTTP proxyuser support in HTTP authentication client/server libraries. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617384 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/08/14 5:10 PM",
      "commitName": "6d7a6766bd55b355e44dbdcc4dfa22b050b1a509",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "05/08/14 2:21 PM",
      "commitNameOld": "2d7dcff6f42020cb91c58c5dd460d030188b8a18",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 6.12,
      "commitsBetweenForRepo": 52,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,76 +1,76 @@\n   public void init(FilterConfig filterConfig) throws ServletException {\n     String configPrefix \u003d filterConfig.getInitParameter(CONFIG_PREFIX);\n     configPrefix \u003d (configPrefix !\u003d null) ? configPrefix + \".\" : \"\";\n-    Properties config \u003d getConfiguration(configPrefix, filterConfig);\n+    config \u003d getConfiguration(configPrefix, filterConfig);\n     String authHandlerName \u003d config.getProperty(AUTH_TYPE, null);\n     String authHandlerClassName;\n     if (authHandlerName \u003d\u003d null) {\n       throw new ServletException(\"Authentication type must be specified: \" +\n           PseudoAuthenticationHandler.TYPE + \"|\" + \n           KerberosAuthenticationHandler.TYPE + \"|\u003cclass\u003e\");\n     }\n     if (authHandlerName.toLowerCase(Locale.ENGLISH).equals(\n         PseudoAuthenticationHandler.TYPE)) {\n       authHandlerClassName \u003d PseudoAuthenticationHandler.class.getName();\n     } else if (authHandlerName.toLowerCase(Locale.ENGLISH).equals(\n         KerberosAuthenticationHandler.TYPE)) {\n       authHandlerClassName \u003d KerberosAuthenticationHandler.class.getName();\n     } else {\n       authHandlerClassName \u003d authHandlerName;\n     }\n \n     try {\n       Class\u003c?\u003e klass \u003d Thread.currentThread().getContextClassLoader().loadClass(authHandlerClassName);\n       authHandler \u003d (AuthenticationHandler) klass.newInstance();\n       authHandler.init(config);\n     } catch (ClassNotFoundException ex) {\n       throw new ServletException(ex);\n     } catch (InstantiationException ex) {\n       throw new ServletException(ex);\n     } catch (IllegalAccessException ex) {\n       throw new ServletException(ex);\n     }\n \n     validity \u003d Long.parseLong(config.getProperty(AUTH_TOKEN_VALIDITY, \"36000\"))\n         * 1000; //10 hours\n     secretProvider \u003d (SignerSecretProvider) filterConfig.getServletContext().\n         getAttribute(SIGNATURE_PROVIDER_ATTRIBUTE);\n     if (secretProvider \u003d\u003d null) {\n       String signerSecretProviderClassName \u003d\n           config.getProperty(configPrefix + SIGNER_SECRET_PROVIDER_CLASS, null);\n       if (signerSecretProviderClassName \u003d\u003d null) {\n         String signatureSecret \u003d\n             config.getProperty(configPrefix + SIGNATURE_SECRET, null);\n         if (signatureSecret !\u003d null) {\n           secretProvider \u003d new StringSignerSecretProvider(signatureSecret);\n         } else {\n           secretProvider \u003d new RandomSignerSecretProvider();\n           randomSecret \u003d true;\n         }\n       } else {\n         try {\n           Class\u003c?\u003e klass \u003d Thread.currentThread().getContextClassLoader().\n               loadClass(signerSecretProviderClassName);\n           secretProvider \u003d (SignerSecretProvider) klass.newInstance();\n           customSecretProvider \u003d true;\n         } catch (ClassNotFoundException ex) {\n           throw new ServletException(ex);\n         } catch (InstantiationException ex) {\n           throw new ServletException(ex);\n         } catch (IllegalAccessException ex) {\n           throw new ServletException(ex);\n         }\n       }\n       try {\n         secretProvider.init(config, validity);\n       } catch (Exception ex) {\n         throw new ServletException(ex);\n       }\n     } else {\n       customSecretProvider \u003d true;\n     }\n     signer \u003d new Signer(secretProvider);\n \n     cookieDomain \u003d config.getProperty(COOKIE_DOMAIN, null);\n     cookiePath \u003d config.getProperty(COOKIE_PATH, null);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(FilterConfig filterConfig) throws ServletException {\n    String configPrefix \u003d filterConfig.getInitParameter(CONFIG_PREFIX);\n    configPrefix \u003d (configPrefix !\u003d null) ? configPrefix + \".\" : \"\";\n    config \u003d getConfiguration(configPrefix, filterConfig);\n    String authHandlerName \u003d config.getProperty(AUTH_TYPE, null);\n    String authHandlerClassName;\n    if (authHandlerName \u003d\u003d null) {\n      throw new ServletException(\"Authentication type must be specified: \" +\n          PseudoAuthenticationHandler.TYPE + \"|\" + \n          KerberosAuthenticationHandler.TYPE + \"|\u003cclass\u003e\");\n    }\n    if (authHandlerName.toLowerCase(Locale.ENGLISH).equals(\n        PseudoAuthenticationHandler.TYPE)) {\n      authHandlerClassName \u003d PseudoAuthenticationHandler.class.getName();\n    } else if (authHandlerName.toLowerCase(Locale.ENGLISH).equals(\n        KerberosAuthenticationHandler.TYPE)) {\n      authHandlerClassName \u003d KerberosAuthenticationHandler.class.getName();\n    } else {\n      authHandlerClassName \u003d authHandlerName;\n    }\n\n    try {\n      Class\u003c?\u003e klass \u003d Thread.currentThread().getContextClassLoader().loadClass(authHandlerClassName);\n      authHandler \u003d (AuthenticationHandler) klass.newInstance();\n      authHandler.init(config);\n    } catch (ClassNotFoundException ex) {\n      throw new ServletException(ex);\n    } catch (InstantiationException ex) {\n      throw new ServletException(ex);\n    } catch (IllegalAccessException ex) {\n      throw new ServletException(ex);\n    }\n\n    validity \u003d Long.parseLong(config.getProperty(AUTH_TOKEN_VALIDITY, \"36000\"))\n        * 1000; //10 hours\n    secretProvider \u003d (SignerSecretProvider) filterConfig.getServletContext().\n        getAttribute(SIGNATURE_PROVIDER_ATTRIBUTE);\n    if (secretProvider \u003d\u003d null) {\n      String signerSecretProviderClassName \u003d\n          config.getProperty(configPrefix + SIGNER_SECRET_PROVIDER_CLASS, null);\n      if (signerSecretProviderClassName \u003d\u003d null) {\n        String signatureSecret \u003d\n            config.getProperty(configPrefix + SIGNATURE_SECRET, null);\n        if (signatureSecret !\u003d null) {\n          secretProvider \u003d new StringSignerSecretProvider(signatureSecret);\n        } else {\n          secretProvider \u003d new RandomSignerSecretProvider();\n          randomSecret \u003d true;\n        }\n      } else {\n        try {\n          Class\u003c?\u003e klass \u003d Thread.currentThread().getContextClassLoader().\n              loadClass(signerSecretProviderClassName);\n          secretProvider \u003d (SignerSecretProvider) klass.newInstance();\n          customSecretProvider \u003d true;\n        } catch (ClassNotFoundException ex) {\n          throw new ServletException(ex);\n        } catch (InstantiationException ex) {\n          throw new ServletException(ex);\n        } catch (IllegalAccessException ex) {\n          throw new ServletException(ex);\n        }\n      }\n      try {\n        secretProvider.init(config, validity);\n      } catch (Exception ex) {\n        throw new ServletException(ex);\n      }\n    } else {\n      customSecretProvider \u003d true;\n    }\n    signer \u003d new Signer(secretProvider);\n\n    cookieDomain \u003d config.getProperty(COOKIE_DOMAIN, null);\n    cookiePath \u003d config.getProperty(COOKIE_PATH, null);\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/AuthenticationFilter.java",
      "extendedDetails": {}
    },
    "2d7dcff6f42020cb91c58c5dd460d030188b8a18": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10791. AuthenticationFilter should support externalizing the secret for signing and provide rotation support. (rkanter via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1616005 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/08/14 2:21 PM",
      "commitName": "2d7dcff6f42020cb91c58c5dd460d030188b8a18",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "30/06/14 1:41 PM",
      "commitNameOld": "4ac6e1d8951149e194eeab0fa4e0463d113732c4",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 36.03,
      "commitsBetweenForRepo": 249,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,76 @@\n   public void init(FilterConfig filterConfig) throws ServletException {\n     String configPrefix \u003d filterConfig.getInitParameter(CONFIG_PREFIX);\n     configPrefix \u003d (configPrefix !\u003d null) ? configPrefix + \".\" : \"\";\n     Properties config \u003d getConfiguration(configPrefix, filterConfig);\n     String authHandlerName \u003d config.getProperty(AUTH_TYPE, null);\n     String authHandlerClassName;\n     if (authHandlerName \u003d\u003d null) {\n       throw new ServletException(\"Authentication type must be specified: \" +\n           PseudoAuthenticationHandler.TYPE + \"|\" + \n           KerberosAuthenticationHandler.TYPE + \"|\u003cclass\u003e\");\n     }\n     if (authHandlerName.toLowerCase(Locale.ENGLISH).equals(\n         PseudoAuthenticationHandler.TYPE)) {\n       authHandlerClassName \u003d PseudoAuthenticationHandler.class.getName();\n     } else if (authHandlerName.toLowerCase(Locale.ENGLISH).equals(\n         KerberosAuthenticationHandler.TYPE)) {\n       authHandlerClassName \u003d KerberosAuthenticationHandler.class.getName();\n     } else {\n       authHandlerClassName \u003d authHandlerName;\n     }\n \n     try {\n       Class\u003c?\u003e klass \u003d Thread.currentThread().getContextClassLoader().loadClass(authHandlerClassName);\n       authHandler \u003d (AuthenticationHandler) klass.newInstance();\n       authHandler.init(config);\n     } catch (ClassNotFoundException ex) {\n       throw new ServletException(ex);\n     } catch (InstantiationException ex) {\n       throw new ServletException(ex);\n     } catch (IllegalAccessException ex) {\n       throw new ServletException(ex);\n     }\n-    String signatureSecret \u003d config.getProperty(configPrefix + SIGNATURE_SECRET);\n-    if (signatureSecret \u003d\u003d null) {\n-      signatureSecret \u003d Long.toString(RAN.nextLong());\n-      randomSecret \u003d true;\n-      LOG.warn(\"\u0027signature.secret\u0027 configuration not set, using a random value as secret\");\n+\n+    validity \u003d Long.parseLong(config.getProperty(AUTH_TOKEN_VALIDITY, \"36000\"))\n+        * 1000; //10 hours\n+    secretProvider \u003d (SignerSecretProvider) filterConfig.getServletContext().\n+        getAttribute(SIGNATURE_PROVIDER_ATTRIBUTE);\n+    if (secretProvider \u003d\u003d null) {\n+      String signerSecretProviderClassName \u003d\n+          config.getProperty(configPrefix + SIGNER_SECRET_PROVIDER_CLASS, null);\n+      if (signerSecretProviderClassName \u003d\u003d null) {\n+        String signatureSecret \u003d\n+            config.getProperty(configPrefix + SIGNATURE_SECRET, null);\n+        if (signatureSecret !\u003d null) {\n+          secretProvider \u003d new StringSignerSecretProvider(signatureSecret);\n+        } else {\n+          secretProvider \u003d new RandomSignerSecretProvider();\n+          randomSecret \u003d true;\n+        }\n+      } else {\n+        try {\n+          Class\u003c?\u003e klass \u003d Thread.currentThread().getContextClassLoader().\n+              loadClass(signerSecretProviderClassName);\n+          secretProvider \u003d (SignerSecretProvider) klass.newInstance();\n+          customSecretProvider \u003d true;\n+        } catch (ClassNotFoundException ex) {\n+          throw new ServletException(ex);\n+        } catch (InstantiationException ex) {\n+          throw new ServletException(ex);\n+        } catch (IllegalAccessException ex) {\n+          throw new ServletException(ex);\n+        }\n+      }\n+      try {\n+        secretProvider.init(config, validity);\n+      } catch (Exception ex) {\n+        throw new ServletException(ex);\n+      }\n+    } else {\n+      customSecretProvider \u003d true;\n     }\n-    signer \u003d new Signer(signatureSecret.getBytes());\n-    validity \u003d Long.parseLong(config.getProperty(AUTH_TOKEN_VALIDITY, \"36000\")) * 1000; //10 hours\n+    signer \u003d new Signer(secretProvider);\n \n     cookieDomain \u003d config.getProperty(COOKIE_DOMAIN, null);\n     cookiePath \u003d config.getProperty(COOKIE_PATH, null);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(FilterConfig filterConfig) throws ServletException {\n    String configPrefix \u003d filterConfig.getInitParameter(CONFIG_PREFIX);\n    configPrefix \u003d (configPrefix !\u003d null) ? configPrefix + \".\" : \"\";\n    Properties config \u003d getConfiguration(configPrefix, filterConfig);\n    String authHandlerName \u003d config.getProperty(AUTH_TYPE, null);\n    String authHandlerClassName;\n    if (authHandlerName \u003d\u003d null) {\n      throw new ServletException(\"Authentication type must be specified: \" +\n          PseudoAuthenticationHandler.TYPE + \"|\" + \n          KerberosAuthenticationHandler.TYPE + \"|\u003cclass\u003e\");\n    }\n    if (authHandlerName.toLowerCase(Locale.ENGLISH).equals(\n        PseudoAuthenticationHandler.TYPE)) {\n      authHandlerClassName \u003d PseudoAuthenticationHandler.class.getName();\n    } else if (authHandlerName.toLowerCase(Locale.ENGLISH).equals(\n        KerberosAuthenticationHandler.TYPE)) {\n      authHandlerClassName \u003d KerberosAuthenticationHandler.class.getName();\n    } else {\n      authHandlerClassName \u003d authHandlerName;\n    }\n\n    try {\n      Class\u003c?\u003e klass \u003d Thread.currentThread().getContextClassLoader().loadClass(authHandlerClassName);\n      authHandler \u003d (AuthenticationHandler) klass.newInstance();\n      authHandler.init(config);\n    } catch (ClassNotFoundException ex) {\n      throw new ServletException(ex);\n    } catch (InstantiationException ex) {\n      throw new ServletException(ex);\n    } catch (IllegalAccessException ex) {\n      throw new ServletException(ex);\n    }\n\n    validity \u003d Long.parseLong(config.getProperty(AUTH_TOKEN_VALIDITY, \"36000\"))\n        * 1000; //10 hours\n    secretProvider \u003d (SignerSecretProvider) filterConfig.getServletContext().\n        getAttribute(SIGNATURE_PROVIDER_ATTRIBUTE);\n    if (secretProvider \u003d\u003d null) {\n      String signerSecretProviderClassName \u003d\n          config.getProperty(configPrefix + SIGNER_SECRET_PROVIDER_CLASS, null);\n      if (signerSecretProviderClassName \u003d\u003d null) {\n        String signatureSecret \u003d\n            config.getProperty(configPrefix + SIGNATURE_SECRET, null);\n        if (signatureSecret !\u003d null) {\n          secretProvider \u003d new StringSignerSecretProvider(signatureSecret);\n        } else {\n          secretProvider \u003d new RandomSignerSecretProvider();\n          randomSecret \u003d true;\n        }\n      } else {\n        try {\n          Class\u003c?\u003e klass \u003d Thread.currentThread().getContextClassLoader().\n              loadClass(signerSecretProviderClassName);\n          secretProvider \u003d (SignerSecretProvider) klass.newInstance();\n          customSecretProvider \u003d true;\n        } catch (ClassNotFoundException ex) {\n          throw new ServletException(ex);\n        } catch (InstantiationException ex) {\n          throw new ServletException(ex);\n        } catch (IllegalAccessException ex) {\n          throw new ServletException(ex);\n        }\n      }\n      try {\n        secretProvider.init(config, validity);\n      } catch (Exception ex) {\n        throw new ServletException(ex);\n      }\n    } else {\n      customSecretProvider \u003d true;\n    }\n    signer \u003d new Signer(secretProvider);\n\n    cookieDomain \u003d config.getProperty(COOKIE_DOMAIN, null);\n    cookiePath \u003d config.getProperty(COOKIE_PATH, null);\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/AuthenticationFilter.java",
      "extendedDetails": {}
    },
    "22b9a60964ad5c30270bc4b259c46f6a6e879a2e": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10665. Make Hadoop Authentication Handler loads case in-sensitive (Contributed by Benoy Antony)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1605049 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/06/14 3:31 AM",
      "commitName": "22b9a60964ad5c30270bc4b259c46f6a6e879a2e",
      "commitAuthor": "Vinayakumar B",
      "commitDateOld": "28/03/14 2:20 PM",
      "commitNameOld": "3c4d44d4cef8f908b76ba9fff28666b9e8ee56b1",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 87.55,
      "commitsBetweenForRepo": 504,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,44 @@\n   public void init(FilterConfig filterConfig) throws ServletException {\n     String configPrefix \u003d filterConfig.getInitParameter(CONFIG_PREFIX);\n     configPrefix \u003d (configPrefix !\u003d null) ? configPrefix + \".\" : \"\";\n     Properties config \u003d getConfiguration(configPrefix, filterConfig);\n     String authHandlerName \u003d config.getProperty(AUTH_TYPE, null);\n     String authHandlerClassName;\n     if (authHandlerName \u003d\u003d null) {\n-      throw new ServletException(\"Authentication type must be specified: simple|kerberos|\u003cclass\u003e\");\n+      throw new ServletException(\"Authentication type must be specified: \" +\n+          PseudoAuthenticationHandler.TYPE + \"|\" + \n+          KerberosAuthenticationHandler.TYPE + \"|\u003cclass\u003e\");\n     }\n-    if (authHandlerName.equals(\"simple\")) {\n+    if (authHandlerName.toLowerCase(Locale.ENGLISH).equals(\n+        PseudoAuthenticationHandler.TYPE)) {\n       authHandlerClassName \u003d PseudoAuthenticationHandler.class.getName();\n-    } else if (authHandlerName.equals(\"kerberos\")) {\n+    } else if (authHandlerName.toLowerCase(Locale.ENGLISH).equals(\n+        KerberosAuthenticationHandler.TYPE)) {\n       authHandlerClassName \u003d KerberosAuthenticationHandler.class.getName();\n     } else {\n       authHandlerClassName \u003d authHandlerName;\n     }\n \n     try {\n       Class\u003c?\u003e klass \u003d Thread.currentThread().getContextClassLoader().loadClass(authHandlerClassName);\n       authHandler \u003d (AuthenticationHandler) klass.newInstance();\n       authHandler.init(config);\n     } catch (ClassNotFoundException ex) {\n       throw new ServletException(ex);\n     } catch (InstantiationException ex) {\n       throw new ServletException(ex);\n     } catch (IllegalAccessException ex) {\n       throw new ServletException(ex);\n     }\n     String signatureSecret \u003d config.getProperty(configPrefix + SIGNATURE_SECRET);\n     if (signatureSecret \u003d\u003d null) {\n       signatureSecret \u003d Long.toString(RAN.nextLong());\n       randomSecret \u003d true;\n       LOG.warn(\"\u0027signature.secret\u0027 configuration not set, using a random value as secret\");\n     }\n     signer \u003d new Signer(signatureSecret.getBytes());\n     validity \u003d Long.parseLong(config.getProperty(AUTH_TOKEN_VALIDITY, \"36000\")) * 1000; //10 hours\n \n     cookieDomain \u003d config.getProperty(COOKIE_DOMAIN, null);\n     cookiePath \u003d config.getProperty(COOKIE_PATH, null);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(FilterConfig filterConfig) throws ServletException {\n    String configPrefix \u003d filterConfig.getInitParameter(CONFIG_PREFIX);\n    configPrefix \u003d (configPrefix !\u003d null) ? configPrefix + \".\" : \"\";\n    Properties config \u003d getConfiguration(configPrefix, filterConfig);\n    String authHandlerName \u003d config.getProperty(AUTH_TYPE, null);\n    String authHandlerClassName;\n    if (authHandlerName \u003d\u003d null) {\n      throw new ServletException(\"Authentication type must be specified: \" +\n          PseudoAuthenticationHandler.TYPE + \"|\" + \n          KerberosAuthenticationHandler.TYPE + \"|\u003cclass\u003e\");\n    }\n    if (authHandlerName.toLowerCase(Locale.ENGLISH).equals(\n        PseudoAuthenticationHandler.TYPE)) {\n      authHandlerClassName \u003d PseudoAuthenticationHandler.class.getName();\n    } else if (authHandlerName.toLowerCase(Locale.ENGLISH).equals(\n        KerberosAuthenticationHandler.TYPE)) {\n      authHandlerClassName \u003d KerberosAuthenticationHandler.class.getName();\n    } else {\n      authHandlerClassName \u003d authHandlerName;\n    }\n\n    try {\n      Class\u003c?\u003e klass \u003d Thread.currentThread().getContextClassLoader().loadClass(authHandlerClassName);\n      authHandler \u003d (AuthenticationHandler) klass.newInstance();\n      authHandler.init(config);\n    } catch (ClassNotFoundException ex) {\n      throw new ServletException(ex);\n    } catch (InstantiationException ex) {\n      throw new ServletException(ex);\n    } catch (IllegalAccessException ex) {\n      throw new ServletException(ex);\n    }\n    String signatureSecret \u003d config.getProperty(configPrefix + SIGNATURE_SECRET);\n    if (signatureSecret \u003d\u003d null) {\n      signatureSecret \u003d Long.toString(RAN.nextLong());\n      randomSecret \u003d true;\n      LOG.warn(\"\u0027signature.secret\u0027 configuration not set, using a random value as secret\");\n    }\n    signer \u003d new Signer(signatureSecret.getBytes());\n    validity \u003d Long.parseLong(config.getProperty(AUTH_TOKEN_VALIDITY, \"36000\")) * 1000; //10 hours\n\n    cookieDomain \u003d config.getProperty(COOKIE_DOMAIN, null);\n    cookiePath \u003d config.getProperty(COOKIE_PATH, null);\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/AuthenticationFilter.java",
      "extendedDetails": {}
    },
    "2b016dac8232e0f5c43293adcbdf7164f5fca74c": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7579. Rename package names from alfredo to auth.  Contributed by Alejandro Abdelnur\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1163852 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/08/11 3:40 PM",
      "commitName": "2b016dac8232e0f5c43293adcbdf7164f5fca74c",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "31/08/11 2:18 PM",
      "commitNameOld": "4f1a0e36fab1f18e6e2c5fcc72cd9a7634967fcd",
      "commitAuthorOld": "Konstantin Shvachko",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void init(FilterConfig filterConfig) throws ServletException {\n    String configPrefix \u003d filterConfig.getInitParameter(CONFIG_PREFIX);\n    configPrefix \u003d (configPrefix !\u003d null) ? configPrefix + \".\" : \"\";\n    Properties config \u003d getConfiguration(configPrefix, filterConfig);\n    String authHandlerName \u003d config.getProperty(AUTH_TYPE, null);\n    String authHandlerClassName;\n    if (authHandlerName \u003d\u003d null) {\n      throw new ServletException(\"Authentication type must be specified: simple|kerberos|\u003cclass\u003e\");\n    }\n    if (authHandlerName.equals(\"simple\")) {\n      authHandlerClassName \u003d PseudoAuthenticationHandler.class.getName();\n    } else if (authHandlerName.equals(\"kerberos\")) {\n      authHandlerClassName \u003d KerberosAuthenticationHandler.class.getName();\n    } else {\n      authHandlerClassName \u003d authHandlerName;\n    }\n\n    try {\n      Class\u003c?\u003e klass \u003d Thread.currentThread().getContextClassLoader().loadClass(authHandlerClassName);\n      authHandler \u003d (AuthenticationHandler) klass.newInstance();\n      authHandler.init(config);\n    } catch (ClassNotFoundException ex) {\n      throw new ServletException(ex);\n    } catch (InstantiationException ex) {\n      throw new ServletException(ex);\n    } catch (IllegalAccessException ex) {\n      throw new ServletException(ex);\n    }\n    String signatureSecret \u003d config.getProperty(configPrefix + SIGNATURE_SECRET);\n    if (signatureSecret \u003d\u003d null) {\n      signatureSecret \u003d Long.toString(RAN.nextLong());\n      randomSecret \u003d true;\n      LOG.warn(\"\u0027signature.secret\u0027 configuration not set, using a random value as secret\");\n    }\n    signer \u003d new Signer(signatureSecret.getBytes());\n    validity \u003d Long.parseLong(config.getProperty(AUTH_TOKEN_VALIDITY, \"36000\")) * 1000; //10 hours\n\n    cookieDomain \u003d config.getProperty(COOKIE_DOMAIN, null);\n    cookiePath \u003d config.getProperty(COOKIE_PATH, null);\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/AuthenticationFilter.java",
      "extendedDetails": {
        "oldPath": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/alfredo/server/AuthenticationFilter.java",
        "newPath": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/AuthenticationFilter.java"
      }
    },
    "4b661b367022fdde5d1914437892910e14fbd3a6": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7576. Fix findbugs warnings and javac warnings in hadoop-auth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1163456 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/08/11 5:18 PM",
      "commitName": "4b661b367022fdde5d1914437892910e14fbd3a6",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 6.0,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   public void init(FilterConfig filterConfig) throws ServletException {\n     String configPrefix \u003d filterConfig.getInitParameter(CONFIG_PREFIX);\n     configPrefix \u003d (configPrefix !\u003d null) ? configPrefix + \".\" : \"\";\n     Properties config \u003d getConfiguration(configPrefix, filterConfig);\n     String authHandlerName \u003d config.getProperty(AUTH_TYPE, null);\n     String authHandlerClassName;\n     if (authHandlerName \u003d\u003d null) {\n       throw new ServletException(\"Authentication type must be specified: simple|kerberos|\u003cclass\u003e\");\n     }\n     if (authHandlerName.equals(\"simple\")) {\n       authHandlerClassName \u003d PseudoAuthenticationHandler.class.getName();\n     } else if (authHandlerName.equals(\"kerberos\")) {\n       authHandlerClassName \u003d KerberosAuthenticationHandler.class.getName();\n     } else {\n       authHandlerClassName \u003d authHandlerName;\n     }\n \n     try {\n-      Class klass \u003d Thread.currentThread().getContextClassLoader().loadClass(authHandlerClassName);\n+      Class\u003c?\u003e klass \u003d Thread.currentThread().getContextClassLoader().loadClass(authHandlerClassName);\n       authHandler \u003d (AuthenticationHandler) klass.newInstance();\n       authHandler.init(config);\n     } catch (ClassNotFoundException ex) {\n       throw new ServletException(ex);\n     } catch (InstantiationException ex) {\n       throw new ServletException(ex);\n     } catch (IllegalAccessException ex) {\n       throw new ServletException(ex);\n     }\n     String signatureSecret \u003d config.getProperty(configPrefix + SIGNATURE_SECRET);\n     if (signatureSecret \u003d\u003d null) {\n-      signatureSecret \u003d Long.toString(new Random(System.currentTimeMillis()).nextLong());\n+      signatureSecret \u003d Long.toString(RAN.nextLong());\n       randomSecret \u003d true;\n       LOG.warn(\"\u0027signature.secret\u0027 configuration not set, using a random value as secret\");\n     }\n     signer \u003d new Signer(signatureSecret.getBytes());\n     validity \u003d Long.parseLong(config.getProperty(AUTH_TOKEN_VALIDITY, \"36000\")) * 1000; //10 hours\n \n     cookieDomain \u003d config.getProperty(COOKIE_DOMAIN, null);\n     cookiePath \u003d config.getProperty(COOKIE_PATH, null);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(FilterConfig filterConfig) throws ServletException {\n    String configPrefix \u003d filterConfig.getInitParameter(CONFIG_PREFIX);\n    configPrefix \u003d (configPrefix !\u003d null) ? configPrefix + \".\" : \"\";\n    Properties config \u003d getConfiguration(configPrefix, filterConfig);\n    String authHandlerName \u003d config.getProperty(AUTH_TYPE, null);\n    String authHandlerClassName;\n    if (authHandlerName \u003d\u003d null) {\n      throw new ServletException(\"Authentication type must be specified: simple|kerberos|\u003cclass\u003e\");\n    }\n    if (authHandlerName.equals(\"simple\")) {\n      authHandlerClassName \u003d PseudoAuthenticationHandler.class.getName();\n    } else if (authHandlerName.equals(\"kerberos\")) {\n      authHandlerClassName \u003d KerberosAuthenticationHandler.class.getName();\n    } else {\n      authHandlerClassName \u003d authHandlerName;\n    }\n\n    try {\n      Class\u003c?\u003e klass \u003d Thread.currentThread().getContextClassLoader().loadClass(authHandlerClassName);\n      authHandler \u003d (AuthenticationHandler) klass.newInstance();\n      authHandler.init(config);\n    } catch (ClassNotFoundException ex) {\n      throw new ServletException(ex);\n    } catch (InstantiationException ex) {\n      throw new ServletException(ex);\n    } catch (IllegalAccessException ex) {\n      throw new ServletException(ex);\n    }\n    String signatureSecret \u003d config.getProperty(configPrefix + SIGNATURE_SECRET);\n    if (signatureSecret \u003d\u003d null) {\n      signatureSecret \u003d Long.toString(RAN.nextLong());\n      randomSecret \u003d true;\n      LOG.warn(\"\u0027signature.secret\u0027 configuration not set, using a random value as secret\");\n    }\n    signer \u003d new Signer(signatureSecret.getBytes());\n    validity \u003d Long.parseLong(config.getProperty(AUTH_TOKEN_VALIDITY, \"36000\")) * 1000; //10 hours\n\n    cookieDomain \u003d config.getProperty(COOKIE_DOMAIN, null);\n    cookiePath \u003d config.getProperty(COOKIE_PATH, null);\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/alfredo/server/AuthenticationFilter.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void init(FilterConfig filterConfig) throws ServletException {\n    String configPrefix \u003d filterConfig.getInitParameter(CONFIG_PREFIX);\n    configPrefix \u003d (configPrefix !\u003d null) ? configPrefix + \".\" : \"\";\n    Properties config \u003d getConfiguration(configPrefix, filterConfig);\n    String authHandlerName \u003d config.getProperty(AUTH_TYPE, null);\n    String authHandlerClassName;\n    if (authHandlerName \u003d\u003d null) {\n      throw new ServletException(\"Authentication type must be specified: simple|kerberos|\u003cclass\u003e\");\n    }\n    if (authHandlerName.equals(\"simple\")) {\n      authHandlerClassName \u003d PseudoAuthenticationHandler.class.getName();\n    } else if (authHandlerName.equals(\"kerberos\")) {\n      authHandlerClassName \u003d KerberosAuthenticationHandler.class.getName();\n    } else {\n      authHandlerClassName \u003d authHandlerName;\n    }\n\n    try {\n      Class klass \u003d Thread.currentThread().getContextClassLoader().loadClass(authHandlerClassName);\n      authHandler \u003d (AuthenticationHandler) klass.newInstance();\n      authHandler.init(config);\n    } catch (ClassNotFoundException ex) {\n      throw new ServletException(ex);\n    } catch (InstantiationException ex) {\n      throw new ServletException(ex);\n    } catch (IllegalAccessException ex) {\n      throw new ServletException(ex);\n    }\n    String signatureSecret \u003d config.getProperty(configPrefix + SIGNATURE_SECRET);\n    if (signatureSecret \u003d\u003d null) {\n      signatureSecret \u003d Long.toString(new Random(System.currentTimeMillis()).nextLong());\n      randomSecret \u003d true;\n      LOG.warn(\"\u0027signature.secret\u0027 configuration not set, using a random value as secret\");\n    }\n    signer \u003d new Signer(signatureSecret.getBytes());\n    validity \u003d Long.parseLong(config.getProperty(AUTH_TOKEN_VALIDITY, \"36000\")) * 1000; //10 hours\n\n    cookieDomain \u003d config.getProperty(COOKIE_DOMAIN, null);\n    cookiePath \u003d config.getProperty(COOKIE_PATH, null);\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/alfredo/server/AuthenticationFilter.java",
      "extendedDetails": {
        "oldPath": "hadoop-alfredo/src/main/java/org/apache/hadoop/alfredo/server/AuthenticationFilter.java",
        "newPath": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/alfredo/server/AuthenticationFilter.java"
      }
    },
    "a0f120ce68dddb0cb31b64c89f3224313f3cb5af": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7119. add Kerberos HTTP SPNEGO authentication support to Hadoop JT/NN/DN/TT web-consoles. (Alejandro Abdelnur via atm)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159804 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 3:31 PM",
      "commitName": "a0f120ce68dddb0cb31b64c89f3224313f3cb5af",
      "commitAuthor": "Aaron Myers",
      "diff": "@@ -0,0 +1,40 @@\n+  public void init(FilterConfig filterConfig) throws ServletException {\n+    String configPrefix \u003d filterConfig.getInitParameter(CONFIG_PREFIX);\n+    configPrefix \u003d (configPrefix !\u003d null) ? configPrefix + \".\" : \"\";\n+    Properties config \u003d getConfiguration(configPrefix, filterConfig);\n+    String authHandlerName \u003d config.getProperty(AUTH_TYPE, null);\n+    String authHandlerClassName;\n+    if (authHandlerName \u003d\u003d null) {\n+      throw new ServletException(\"Authentication type must be specified: simple|kerberos|\u003cclass\u003e\");\n+    }\n+    if (authHandlerName.equals(\"simple\")) {\n+      authHandlerClassName \u003d PseudoAuthenticationHandler.class.getName();\n+    } else if (authHandlerName.equals(\"kerberos\")) {\n+      authHandlerClassName \u003d KerberosAuthenticationHandler.class.getName();\n+    } else {\n+      authHandlerClassName \u003d authHandlerName;\n+    }\n+\n+    try {\n+      Class klass \u003d Thread.currentThread().getContextClassLoader().loadClass(authHandlerClassName);\n+      authHandler \u003d (AuthenticationHandler) klass.newInstance();\n+      authHandler.init(config);\n+    } catch (ClassNotFoundException ex) {\n+      throw new ServletException(ex);\n+    } catch (InstantiationException ex) {\n+      throw new ServletException(ex);\n+    } catch (IllegalAccessException ex) {\n+      throw new ServletException(ex);\n+    }\n+    String signatureSecret \u003d config.getProperty(configPrefix + SIGNATURE_SECRET);\n+    if (signatureSecret \u003d\u003d null) {\n+      signatureSecret \u003d Long.toString(new Random(System.currentTimeMillis()).nextLong());\n+      randomSecret \u003d true;\n+      LOG.warn(\"\u0027signature.secret\u0027 configuration not set, using a random value as secret\");\n+    }\n+    signer \u003d new Signer(signatureSecret.getBytes());\n+    validity \u003d Long.parseLong(config.getProperty(AUTH_TOKEN_VALIDITY, \"36000\")) * 1000; //10 hours\n+\n+    cookieDomain \u003d config.getProperty(COOKIE_DOMAIN, null);\n+    cookiePath \u003d config.getProperty(COOKIE_PATH, null);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(FilterConfig filterConfig) throws ServletException {\n    String configPrefix \u003d filterConfig.getInitParameter(CONFIG_PREFIX);\n    configPrefix \u003d (configPrefix !\u003d null) ? configPrefix + \".\" : \"\";\n    Properties config \u003d getConfiguration(configPrefix, filterConfig);\n    String authHandlerName \u003d config.getProperty(AUTH_TYPE, null);\n    String authHandlerClassName;\n    if (authHandlerName \u003d\u003d null) {\n      throw new ServletException(\"Authentication type must be specified: simple|kerberos|\u003cclass\u003e\");\n    }\n    if (authHandlerName.equals(\"simple\")) {\n      authHandlerClassName \u003d PseudoAuthenticationHandler.class.getName();\n    } else if (authHandlerName.equals(\"kerberos\")) {\n      authHandlerClassName \u003d KerberosAuthenticationHandler.class.getName();\n    } else {\n      authHandlerClassName \u003d authHandlerName;\n    }\n\n    try {\n      Class klass \u003d Thread.currentThread().getContextClassLoader().loadClass(authHandlerClassName);\n      authHandler \u003d (AuthenticationHandler) klass.newInstance();\n      authHandler.init(config);\n    } catch (ClassNotFoundException ex) {\n      throw new ServletException(ex);\n    } catch (InstantiationException ex) {\n      throw new ServletException(ex);\n    } catch (IllegalAccessException ex) {\n      throw new ServletException(ex);\n    }\n    String signatureSecret \u003d config.getProperty(configPrefix + SIGNATURE_SECRET);\n    if (signatureSecret \u003d\u003d null) {\n      signatureSecret \u003d Long.toString(new Random(System.currentTimeMillis()).nextLong());\n      randomSecret \u003d true;\n      LOG.warn(\"\u0027signature.secret\u0027 configuration not set, using a random value as secret\");\n    }\n    signer \u003d new Signer(signatureSecret.getBytes());\n    validity \u003d Long.parseLong(config.getProperty(AUTH_TOKEN_VALIDITY, \"36000\")) * 1000; //10 hours\n\n    cookieDomain \u003d config.getProperty(COOKIE_DOMAIN, null);\n    cookiePath \u003d config.getProperty(COOKIE_PATH, null);\n  }",
      "path": "hadoop-alfredo/src/main/java/org/apache/hadoop/alfredo/server/AuthenticationFilter.java"
    }
  }
}