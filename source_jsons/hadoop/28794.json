{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "OpportunisticContainerAllocator.java",
  "functionName": "createContainer",
  "functionId": "createContainer___rmIdentifier-long__tokenExpiry-long__schedulerKey-SchedulerRequestKey__userName-String__node-RemoteNode__cId-ContainerId__capability-Resource",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerAllocator.java",
  "functionStartLine": 420,
  "functionEndLine": 442,
  "numCommitsSeen": 18,
  "timeTaken": 3108,
  "changeHistory": [
    "6a69239d867070ee85d79026542033ac661c4c1c",
    "a55d0738f1eba225c45578bbdabd0e5a6d6f5392",
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4"
  ],
  "changeHistoryShort": {
    "6a69239d867070ee85d79026542033ac661c4c1c": "Ybodychange",
    "a55d0738f1eba225c45578bbdabd0e5a6d6f5392": "Ybodychange",
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6a69239d867070ee85d79026542033ac661c4c1c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8163. Add support for Node Labels in opportunistic scheduling. Contributed by Abhishek Modi.\n",
      "commitDate": "04/05/18 2:59 PM",
      "commitName": "6a69239d867070ee85d79026542033ac661c4c1c",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "a55d0738f1eba225c45578bbdabd0e5a6d6f5392",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 179.02,
      "commitsBetweenForRepo": 1731,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   private Container createContainer(long rmIdentifier, long tokenExpiry,\n       SchedulerRequestKey schedulerKey, String userName, RemoteNode node,\n       ContainerId cId, Resource capability) {\n     long currTime \u003d System.currentTimeMillis();\n     ContainerTokenIdentifier containerTokenIdentifier \u003d\n         new ContainerTokenIdentifier(\n             cId, 0, node.getNodeId().toString(), userName,\n             capability, currTime + tokenExpiry,\n             tokenSecretManager.getCurrentKey().getKeyId(), rmIdentifier,\n             schedulerKey.getPriority(), currTime,\n-            null, CommonNodeLabelsManager.NO_LABEL, ContainerType.TASK,\n+            null, getRemoteNodePartition(node), ContainerType.TASK,\n             ExecutionType.OPPORTUNISTIC, schedulerKey.getAllocationRequestId());\n     byte[] pwd \u003d\n         tokenSecretManager.createPassword(containerTokenIdentifier);\n     Token containerToken \u003d newContainerToken(node.getNodeId(), pwd,\n         containerTokenIdentifier);\n     Container container \u003d BuilderUtils.newContainer(\n         cId, node.getNodeId(), node.getHttpAddress(),\n         capability, schedulerKey.getPriority(), containerToken,\n         containerTokenIdentifier.getExecutionType(),\n         schedulerKey.getAllocationRequestId());\n     return container;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Container createContainer(long rmIdentifier, long tokenExpiry,\n      SchedulerRequestKey schedulerKey, String userName, RemoteNode node,\n      ContainerId cId, Resource capability) {\n    long currTime \u003d System.currentTimeMillis();\n    ContainerTokenIdentifier containerTokenIdentifier \u003d\n        new ContainerTokenIdentifier(\n            cId, 0, node.getNodeId().toString(), userName,\n            capability, currTime + tokenExpiry,\n            tokenSecretManager.getCurrentKey().getKeyId(), rmIdentifier,\n            schedulerKey.getPriority(), currTime,\n            null, getRemoteNodePartition(node), ContainerType.TASK,\n            ExecutionType.OPPORTUNISTIC, schedulerKey.getAllocationRequestId());\n    byte[] pwd \u003d\n        tokenSecretManager.createPassword(containerTokenIdentifier);\n    Token containerToken \u003d newContainerToken(node.getNodeId(), pwd,\n        containerTokenIdentifier);\n    Container container \u003d BuilderUtils.newContainer(\n        cId, node.getNodeId(), node.getHttpAddress(),\n        capability, schedulerKey.getPriority(), containerToken,\n        containerTokenIdentifier.getExecutionType(),\n        schedulerKey.getAllocationRequestId());\n    return container;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerAllocator.java",
      "extendedDetails": {}
    },
    "a55d0738f1eba225c45578bbdabd0e5a6d6f5392": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7371. Added allocateRequestId in NMContainerStatus for recovery. Contributed by Chandni Singh\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "a55d0738f1eba225c45578bbdabd0e5a6d6f5392",
      "commitAuthor": "Jian He",
      "commitDateOld": "05/10/17 9:58 AM",
      "commitNameOld": "b733348dde18a242e6c9074c512116a8baf1d281",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 32.19,
      "commitsBetweenForRepo": 334,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   private Container createContainer(long rmIdentifier, long tokenExpiry,\n       SchedulerRequestKey schedulerKey, String userName, RemoteNode node,\n       ContainerId cId, Resource capability) {\n     long currTime \u003d System.currentTimeMillis();\n     ContainerTokenIdentifier containerTokenIdentifier \u003d\n         new ContainerTokenIdentifier(\n             cId, 0, node.getNodeId().toString(), userName,\n             capability, currTime + tokenExpiry,\n             tokenSecretManager.getCurrentKey().getKeyId(), rmIdentifier,\n             schedulerKey.getPriority(), currTime,\n             null, CommonNodeLabelsManager.NO_LABEL, ContainerType.TASK,\n-            ExecutionType.OPPORTUNISTIC);\n+            ExecutionType.OPPORTUNISTIC, schedulerKey.getAllocationRequestId());\n     byte[] pwd \u003d\n         tokenSecretManager.createPassword(containerTokenIdentifier);\n     Token containerToken \u003d newContainerToken(node.getNodeId(), pwd,\n         containerTokenIdentifier);\n     Container container \u003d BuilderUtils.newContainer(\n         cId, node.getNodeId(), node.getHttpAddress(),\n         capability, schedulerKey.getPriority(), containerToken,\n         containerTokenIdentifier.getExecutionType(),\n         schedulerKey.getAllocationRequestId());\n     return container;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Container createContainer(long rmIdentifier, long tokenExpiry,\n      SchedulerRequestKey schedulerKey, String userName, RemoteNode node,\n      ContainerId cId, Resource capability) {\n    long currTime \u003d System.currentTimeMillis();\n    ContainerTokenIdentifier containerTokenIdentifier \u003d\n        new ContainerTokenIdentifier(\n            cId, 0, node.getNodeId().toString(), userName,\n            capability, currTime + tokenExpiry,\n            tokenSecretManager.getCurrentKey().getKeyId(), rmIdentifier,\n            schedulerKey.getPriority(), currTime,\n            null, CommonNodeLabelsManager.NO_LABEL, ContainerType.TASK,\n            ExecutionType.OPPORTUNISTIC, schedulerKey.getAllocationRequestId());\n    byte[] pwd \u003d\n        tokenSecretManager.createPassword(containerTokenIdentifier);\n    Token containerToken \u003d newContainerToken(node.getNodeId(), pwd,\n        containerTokenIdentifier);\n    Container container \u003d BuilderUtils.newContainer(\n        cId, node.getNodeId(), node.getHttpAddress(),\n        capability, schedulerKey.getPriority(), containerToken,\n        containerTokenIdentifier.getExecutionType(),\n        schedulerKey.getAllocationRequestId());\n    return container;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerAllocator.java",
      "extendedDetails": {}
    },
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5959. RM changes to support change of container ExecutionType. (Arun Suresh via wangda)\n",
      "commitDate": "05/01/17 10:31 AM",
      "commitName": "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,23 @@\n+  private Container createContainer(long rmIdentifier, long tokenExpiry,\n+      SchedulerRequestKey schedulerKey, String userName, RemoteNode node,\n+      ContainerId cId, Resource capability) {\n+    long currTime \u003d System.currentTimeMillis();\n+    ContainerTokenIdentifier containerTokenIdentifier \u003d\n+        new ContainerTokenIdentifier(\n+            cId, 0, node.getNodeId().toString(), userName,\n+            capability, currTime + tokenExpiry,\n+            tokenSecretManager.getCurrentKey().getKeyId(), rmIdentifier,\n+            schedulerKey.getPriority(), currTime,\n+            null, CommonNodeLabelsManager.NO_LABEL, ContainerType.TASK,\n+            ExecutionType.OPPORTUNISTIC);\n+    byte[] pwd \u003d\n+        tokenSecretManager.createPassword(containerTokenIdentifier);\n+    Token containerToken \u003d newContainerToken(node.getNodeId(), pwd,\n+        containerTokenIdentifier);\n+    Container container \u003d BuilderUtils.newContainer(\n+        cId, node.getNodeId(), node.getHttpAddress(),\n+        capability, schedulerKey.getPriority(), containerToken,\n+        containerTokenIdentifier.getExecutionType(),\n+        schedulerKey.getAllocationRequestId());\n+    return container;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Container createContainer(long rmIdentifier, long tokenExpiry,\n      SchedulerRequestKey schedulerKey, String userName, RemoteNode node,\n      ContainerId cId, Resource capability) {\n    long currTime \u003d System.currentTimeMillis();\n    ContainerTokenIdentifier containerTokenIdentifier \u003d\n        new ContainerTokenIdentifier(\n            cId, 0, node.getNodeId().toString(), userName,\n            capability, currTime + tokenExpiry,\n            tokenSecretManager.getCurrentKey().getKeyId(), rmIdentifier,\n            schedulerKey.getPriority(), currTime,\n            null, CommonNodeLabelsManager.NO_LABEL, ContainerType.TASK,\n            ExecutionType.OPPORTUNISTIC);\n    byte[] pwd \u003d\n        tokenSecretManager.createPassword(containerTokenIdentifier);\n    Token containerToken \u003d newContainerToken(node.getNodeId(), pwd,\n        containerTokenIdentifier);\n    Container container \u003d BuilderUtils.newContainer(\n        cId, node.getNodeId(), node.getHttpAddress(),\n        capability, schedulerKey.getPriority(), containerToken,\n        containerTokenIdentifier.getExecutionType(),\n        schedulerKey.getAllocationRequestId());\n    return container;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerAllocator.java"
    }
  }
}