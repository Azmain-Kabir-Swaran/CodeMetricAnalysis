{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CapacityScheduler.java",
  "functionName": "addApplicationAttempt",
  "functionId": "addApplicationAttempt___applicationAttemptId-ApplicationAttemptId__transferStateFromPreviousAttempt-boolean__isAttemptRecovering-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
  "functionStartLine": 1050,
  "functionEndLine": 1101,
  "numCommitsSeen": 479,
  "timeTaken": 17423,
  "changeHistory": [
    "cdb2107066a2d8557270888c0a9a75f29a6853bf",
    "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "5fb723bb77722d41df6959eee23e1b0cfeb5584e",
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
    "e0d131f055ee126052ad4d0f7b0d192e6c730188",
    "109e528ef5d8df07443373751266b4417acc981a",
    "cf23f2c2b5b4eb9e51de1a66b7aa57dee7ff30b5",
    "57c7ae1affb2e1821fbdc3f47738d7e6fd83c7c1",
    "c39ca541f498712133890961598bbff50d89d68b",
    "bda23181bf1931c37d2590e03da9acdc6688ad34",
    "c3f1c30e65cc6a10928299f50801782ecbb4ccb6",
    "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1",
    "1393581bceda234c88cafec00dbfc0ef2a402e83",
    "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f",
    "28db28d491b4e3e3ddf440db4cebab8c0ad6b7f3",
    "791e43c53b0be23b03d9b3f7d45a0df615eb90da",
    "38c32ed239d45051f5e4a51e3f29b201c17a4288",
    "1943fdbec613715f3cdc3ca60cbd273115f28299",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
    "5262b7ba4d018562d4e7d60772af4ddc3d770a23",
    "1f46b991da9b91585608a0babd3eda39485dce09",
    "0ecba04727b5c31182d29511646c8d3e6441300f",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": "Ybodychange",
    "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd": "Ybodychange",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "5fb723bb77722d41df6959eee23e1b0cfeb5584e": "Ybodychange",
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f": "Ymultichange(Ymodifierchange,Ybodychange)",
    "e0d131f055ee126052ad4d0f7b0d192e6c730188": "Ybodychange",
    "109e528ef5d8df07443373751266b4417acc981a": "Ybodychange",
    "cf23f2c2b5b4eb9e51de1a66b7aa57dee7ff30b5": "Ybodychange",
    "57c7ae1affb2e1821fbdc3f47738d7e6fd83c7c1": "Ybodychange",
    "c39ca541f498712133890961598bbff50d89d68b": "Ybodychange",
    "bda23181bf1931c37d2590e03da9acdc6688ad34": "Ymultichange(Yparameterchange,Ybodychange)",
    "c3f1c30e65cc6a10928299f50801782ecbb4ccb6": "Ymultichange(Yparameterchange,Ybodychange)",
    "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1": "Ybodychange",
    "1393581bceda234c88cafec00dbfc0ef2a402e83": "Ymultichange(Yparameterchange,Ybodychange)",
    "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f": "Ymultichange(Yparameterchange,Ybodychange)",
    "28db28d491b4e3e3ddf440db4cebab8c0ad6b7f3": "Yrename",
    "791e43c53b0be23b03d9b3f7d45a0df615eb90da": "Yrename",
    "38c32ed239d45051f5e4a51e3f29b201c17a4288": "Yrename",
    "1943fdbec613715f3cdc3ca60cbd273115f28299": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": "Ybodychange",
    "5262b7ba4d018562d4e7d60772af4ddc3d770a23": "Ybodychange",
    "1f46b991da9b91585608a0babd3eda39485dce09": "Ybodychange",
    "0ecba04727b5c31182d29511646c8d3e6441300f": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9879. Allow multiple leaf queues with the same name in CapacityScheduler. Contributed by Gergely Pollak.\n",
      "commitDate": "25/03/20 4:20 AM",
      "commitName": "cdb2107066a2d8557270888c0a9a75f29a6853bf",
      "commitAuthor": "Sunil G",
      "commitDateOld": "19/03/20 12:25 AM",
      "commitNameOld": "f2d3ac2a3f27a849e00f529c5c2df6ef0bd82911",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 6.16,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,52 @@\n   private void addApplicationAttempt(\n       ApplicationAttemptId applicationAttemptId,\n       boolean transferStateFromPreviousAttempt,\n       boolean isAttemptRecovering) {\n     writeLock.lock();\n     try {\n       SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d applications.get(\n           applicationAttemptId.getApplicationId());\n       if (application \u003d\u003d null) {\n         LOG.warn(\"Application \" + applicationAttemptId.getApplicationId()\n             + \" cannot be found in scheduler.\");\n         return;\n       }\n       CSQueue queue \u003d (CSQueue) application.getQueue();\n \n       FiCaSchedulerApp attempt \u003d new FiCaSchedulerApp(applicationAttemptId,\n           application.getUser(), queue, queue.getAbstractUsersManager(),\n           rmContext, application.getPriority(), isAttemptRecovering,\n           activitiesManager);\n       if (transferStateFromPreviousAttempt) {\n         attempt.transferStateFromPreviousAttempt(\n             application.getCurrentAppAttempt());\n       }\n       application.setCurrentAppAttempt(attempt);\n \n       // Update attempt priority to the latest to avoid race condition i.e\n       // SchedulerApplicationAttempt is created with old priority but it is not\n       // set to SchedulerApplication#setCurrentAppAttempt.\n       // Scenario would occur is\n       // 1. SchdulerApplicationAttempt is created with old priority.\n       // 2. updateApplicationPriority() updates SchedulerApplication. Since\n       // currentAttempt is null, it just return.\n       // 3. ScheduelerApplcationAttempt is set in\n       // SchedulerApplication#setCurrentAppAttempt.\n       attempt.setPriority(application.getPriority());\n \n       queue.submitApplicationAttempt(attempt, application.getUser());\n       LOG.info(\"Added Application Attempt \" + applicationAttemptId\n           + \" to scheduler from user \" + application.getUser() + \" in queue \"\n-          + queue.getQueueName());\n+          + queue.getQueuePath());\n       if (isAttemptRecovering) {\n         LOG.debug(\"{} is recovering. Skipping notifying ATTEMPT_ADDED\",\n             applicationAttemptId);\n       } else{\n         rmContext.getDispatcher().getEventHandler().handle(\n             new RMAppAttemptEvent(applicationAttemptId,\n                 RMAppAttemptEventType.ATTEMPT_ADDED));\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void addApplicationAttempt(\n      ApplicationAttemptId applicationAttemptId,\n      boolean transferStateFromPreviousAttempt,\n      boolean isAttemptRecovering) {\n    writeLock.lock();\n    try {\n      SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d applications.get(\n          applicationAttemptId.getApplicationId());\n      if (application \u003d\u003d null) {\n        LOG.warn(\"Application \" + applicationAttemptId.getApplicationId()\n            + \" cannot be found in scheduler.\");\n        return;\n      }\n      CSQueue queue \u003d (CSQueue) application.getQueue();\n\n      FiCaSchedulerApp attempt \u003d new FiCaSchedulerApp(applicationAttemptId,\n          application.getUser(), queue, queue.getAbstractUsersManager(),\n          rmContext, application.getPriority(), isAttemptRecovering,\n          activitiesManager);\n      if (transferStateFromPreviousAttempt) {\n        attempt.transferStateFromPreviousAttempt(\n            application.getCurrentAppAttempt());\n      }\n      application.setCurrentAppAttempt(attempt);\n\n      // Update attempt priority to the latest to avoid race condition i.e\n      // SchedulerApplicationAttempt is created with old priority but it is not\n      // set to SchedulerApplication#setCurrentAppAttempt.\n      // Scenario would occur is\n      // 1. SchdulerApplicationAttempt is created with old priority.\n      // 2. updateApplicationPriority() updates SchedulerApplication. Since\n      // currentAttempt is null, it just return.\n      // 3. ScheduelerApplcationAttempt is set in\n      // SchedulerApplication#setCurrentAppAttempt.\n      attempt.setPriority(application.getPriority());\n\n      queue.submitApplicationAttempt(attempt, application.getUser());\n      LOG.info(\"Added Application Attempt \" + applicationAttemptId\n          + \" to scheduler from user \" + application.getUser() + \" in queue \"\n          + queue.getQueuePath());\n      if (isAttemptRecovering) {\n        LOG.debug(\"{} is recovering. Skipping notifying ATTEMPT_ADDED\",\n            applicationAttemptId);\n      } else{\n        rmContext.getDispatcher().getEventHandler().handle(\n            new RMAppAttemptEvent(applicationAttemptId,\n                RMAppAttemptEventType.ATTEMPT_ADDED));\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9363.  Replaced debug logging with SLF4J parameterized log message.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "18/03/19 10:57 AM",
      "commitName": "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "15/03/19 4:20 PM",
      "commitNameOld": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 2.78,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,52 @@\n   private void addApplicationAttempt(\n       ApplicationAttemptId applicationAttemptId,\n       boolean transferStateFromPreviousAttempt,\n       boolean isAttemptRecovering) {\n     writeLock.lock();\n     try {\n       SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d applications.get(\n           applicationAttemptId.getApplicationId());\n       if (application \u003d\u003d null) {\n         LOG.warn(\"Application \" + applicationAttemptId.getApplicationId()\n             + \" cannot be found in scheduler.\");\n         return;\n       }\n       CSQueue queue \u003d (CSQueue) application.getQueue();\n \n       FiCaSchedulerApp attempt \u003d new FiCaSchedulerApp(applicationAttemptId,\n           application.getUser(), queue, queue.getAbstractUsersManager(),\n           rmContext, application.getPriority(), isAttemptRecovering,\n           activitiesManager);\n       if (transferStateFromPreviousAttempt) {\n         attempt.transferStateFromPreviousAttempt(\n             application.getCurrentAppAttempt());\n       }\n       application.setCurrentAppAttempt(attempt);\n \n       // Update attempt priority to the latest to avoid race condition i.e\n       // SchedulerApplicationAttempt is created with old priority but it is not\n       // set to SchedulerApplication#setCurrentAppAttempt.\n       // Scenario would occur is\n       // 1. SchdulerApplicationAttempt is created with old priority.\n       // 2. updateApplicationPriority() updates SchedulerApplication. Since\n       // currentAttempt is null, it just return.\n       // 3. ScheduelerApplcationAttempt is set in\n       // SchedulerApplication#setCurrentAppAttempt.\n       attempt.setPriority(application.getPriority());\n \n       queue.submitApplicationAttempt(attempt, application.getUser());\n       LOG.info(\"Added Application Attempt \" + applicationAttemptId\n           + \" to scheduler from user \" + application.getUser() + \" in queue \"\n           + queue.getQueueName());\n       if (isAttemptRecovering) {\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(applicationAttemptId\n-              + \" is recovering. Skipping notifying ATTEMPT_ADDED\");\n-        }\n+        LOG.debug(\"{} is recovering. Skipping notifying ATTEMPT_ADDED\",\n+            applicationAttemptId);\n       } else{\n         rmContext.getDispatcher().getEventHandler().handle(\n             new RMAppAttemptEvent(applicationAttemptId,\n                 RMAppAttemptEventType.ATTEMPT_ADDED));\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void addApplicationAttempt(\n      ApplicationAttemptId applicationAttemptId,\n      boolean transferStateFromPreviousAttempt,\n      boolean isAttemptRecovering) {\n    writeLock.lock();\n    try {\n      SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d applications.get(\n          applicationAttemptId.getApplicationId());\n      if (application \u003d\u003d null) {\n        LOG.warn(\"Application \" + applicationAttemptId.getApplicationId()\n            + \" cannot be found in scheduler.\");\n        return;\n      }\n      CSQueue queue \u003d (CSQueue) application.getQueue();\n\n      FiCaSchedulerApp attempt \u003d new FiCaSchedulerApp(applicationAttemptId,\n          application.getUser(), queue, queue.getAbstractUsersManager(),\n          rmContext, application.getPriority(), isAttemptRecovering,\n          activitiesManager);\n      if (transferStateFromPreviousAttempt) {\n        attempt.transferStateFromPreviousAttempt(\n            application.getCurrentAppAttempt());\n      }\n      application.setCurrentAppAttempt(attempt);\n\n      // Update attempt priority to the latest to avoid race condition i.e\n      // SchedulerApplicationAttempt is created with old priority but it is not\n      // set to SchedulerApplication#setCurrentAppAttempt.\n      // Scenario would occur is\n      // 1. SchdulerApplicationAttempt is created with old priority.\n      // 2. updateApplicationPriority() updates SchedulerApplication. Since\n      // currentAttempt is null, it just return.\n      // 3. ScheduelerApplcationAttempt is set in\n      // SchedulerApplication#setCurrentAppAttempt.\n      attempt.setPriority(application.getPriority());\n\n      queue.submitApplicationAttempt(attempt, application.getUser());\n      LOG.info(\"Added Application Attempt \" + applicationAttemptId\n          + \" to scheduler from user \" + application.getUser() + \" in queue \"\n          + queue.getQueueName());\n      if (isAttemptRecovering) {\n        LOG.debug(\"{} is recovering. Skipping notifying ATTEMPT_ADDED\",\n            applicationAttemptId);\n      } else{\n        rmContext.getDispatcher().getEventHandler().handle(\n            new RMAppAttemptEvent(applicationAttemptId,\n                RMAppAttemptEventType.ATTEMPT_ADDED));\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 2.69,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,54 @@\n   private void addApplicationAttempt(\n       ApplicationAttemptId applicationAttemptId,\n       boolean transferStateFromPreviousAttempt,\n       boolean isAttemptRecovering) {\n+    writeLock.lock();\n     try {\n-      writeLock.lock();\n       SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d applications.get(\n           applicationAttemptId.getApplicationId());\n       if (application \u003d\u003d null) {\n         LOG.warn(\"Application \" + applicationAttemptId.getApplicationId()\n             + \" cannot be found in scheduler.\");\n         return;\n       }\n       CSQueue queue \u003d (CSQueue) application.getQueue();\n \n       FiCaSchedulerApp attempt \u003d new FiCaSchedulerApp(applicationAttemptId,\n           application.getUser(), queue, queue.getAbstractUsersManager(),\n           rmContext, application.getPriority(), isAttemptRecovering,\n           activitiesManager);\n       if (transferStateFromPreviousAttempt) {\n         attempt.transferStateFromPreviousAttempt(\n             application.getCurrentAppAttempt());\n       }\n       application.setCurrentAppAttempt(attempt);\n \n       // Update attempt priority to the latest to avoid race condition i.e\n       // SchedulerApplicationAttempt is created with old priority but it is not\n       // set to SchedulerApplication#setCurrentAppAttempt.\n       // Scenario would occur is\n       // 1. SchdulerApplicationAttempt is created with old priority.\n       // 2. updateApplicationPriority() updates SchedulerApplication. Since\n       // currentAttempt is null, it just return.\n       // 3. ScheduelerApplcationAttempt is set in\n       // SchedulerApplication#setCurrentAppAttempt.\n       attempt.setPriority(application.getPriority());\n \n       queue.submitApplicationAttempt(attempt, application.getUser());\n       LOG.info(\"Added Application Attempt \" + applicationAttemptId\n           + \" to scheduler from user \" + application.getUser() + \" in queue \"\n           + queue.getQueueName());\n       if (isAttemptRecovering) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(applicationAttemptId\n               + \" is recovering. Skipping notifying ATTEMPT_ADDED\");\n         }\n       } else{\n         rmContext.getDispatcher().getEventHandler().handle(\n             new RMAppAttemptEvent(applicationAttemptId,\n                 RMAppAttemptEventType.ATTEMPT_ADDED));\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void addApplicationAttempt(\n      ApplicationAttemptId applicationAttemptId,\n      boolean transferStateFromPreviousAttempt,\n      boolean isAttemptRecovering) {\n    writeLock.lock();\n    try {\n      SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d applications.get(\n          applicationAttemptId.getApplicationId());\n      if (application \u003d\u003d null) {\n        LOG.warn(\"Application \" + applicationAttemptId.getApplicationId()\n            + \" cannot be found in scheduler.\");\n        return;\n      }\n      CSQueue queue \u003d (CSQueue) application.getQueue();\n\n      FiCaSchedulerApp attempt \u003d new FiCaSchedulerApp(applicationAttemptId,\n          application.getUser(), queue, queue.getAbstractUsersManager(),\n          rmContext, application.getPriority(), isAttemptRecovering,\n          activitiesManager);\n      if (transferStateFromPreviousAttempt) {\n        attempt.transferStateFromPreviousAttempt(\n            application.getCurrentAppAttempt());\n      }\n      application.setCurrentAppAttempt(attempt);\n\n      // Update attempt priority to the latest to avoid race condition i.e\n      // SchedulerApplicationAttempt is created with old priority but it is not\n      // set to SchedulerApplication#setCurrentAppAttempt.\n      // Scenario would occur is\n      // 1. SchdulerApplicationAttempt is created with old priority.\n      // 2. updateApplicationPriority() updates SchedulerApplication. Since\n      // currentAttempt is null, it just return.\n      // 3. ScheduelerApplcationAttempt is set in\n      // SchedulerApplication#setCurrentAppAttempt.\n      attempt.setPriority(application.getPriority());\n\n      queue.submitApplicationAttempt(attempt, application.getUser());\n      LOG.info(\"Added Application Attempt \" + applicationAttemptId\n          + \" to scheduler from user \" + application.getUser() + \" in queue \"\n          + queue.getQueueName());\n      if (isAttemptRecovering) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(applicationAttemptId\n              + \" is recovering. Skipping notifying ATTEMPT_ADDED\");\n        }\n      } else{\n        rmContext.getDispatcher().getEventHandler().handle(\n            new RMAppAttemptEvent(applicationAttemptId,\n                RMAppAttemptEventType.ATTEMPT_ADDED));\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "5fb723bb77722d41df6959eee23e1b0cfeb5584e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5889. Improve and refactor user-limit calculation in Capacity Scheduler. (Sunil G via wangda)\n",
      "commitDate": "09/02/17 10:23 AM",
      "commitName": "5fb723bb77722d41df6959eee23e1b0cfeb5584e",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "23/01/17 10:52 AM",
      "commitNameOld": "ce832059db077fa95922198b066a737ed4f609fe",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 16.98,
      "commitsBetweenForRepo": 67,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,54 @@\n   private void addApplicationAttempt(\n       ApplicationAttemptId applicationAttemptId,\n       boolean transferStateFromPreviousAttempt,\n       boolean isAttemptRecovering) {\n     try {\n       writeLock.lock();\n       SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d applications.get(\n           applicationAttemptId.getApplicationId());\n       if (application \u003d\u003d null) {\n         LOG.warn(\"Application \" + applicationAttemptId.getApplicationId()\n             + \" cannot be found in scheduler.\");\n         return;\n       }\n       CSQueue queue \u003d (CSQueue) application.getQueue();\n \n       FiCaSchedulerApp attempt \u003d new FiCaSchedulerApp(applicationAttemptId,\n-          application.getUser(), queue, queue.getActiveUsersManager(),\n+          application.getUser(), queue, queue.getAbstractUsersManager(),\n           rmContext, application.getPriority(), isAttemptRecovering,\n           activitiesManager);\n       if (transferStateFromPreviousAttempt) {\n         attempt.transferStateFromPreviousAttempt(\n             application.getCurrentAppAttempt());\n       }\n       application.setCurrentAppAttempt(attempt);\n \n       // Update attempt priority to the latest to avoid race condition i.e\n       // SchedulerApplicationAttempt is created with old priority but it is not\n       // set to SchedulerApplication#setCurrentAppAttempt.\n       // Scenario would occur is\n       // 1. SchdulerApplicationAttempt is created with old priority.\n       // 2. updateApplicationPriority() updates SchedulerApplication. Since\n       // currentAttempt is null, it just return.\n       // 3. ScheduelerApplcationAttempt is set in\n       // SchedulerApplication#setCurrentAppAttempt.\n       attempt.setPriority(application.getPriority());\n \n       queue.submitApplicationAttempt(attempt, application.getUser());\n       LOG.info(\"Added Application Attempt \" + applicationAttemptId\n           + \" to scheduler from user \" + application.getUser() + \" in queue \"\n           + queue.getQueueName());\n       if (isAttemptRecovering) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(applicationAttemptId\n               + \" is recovering. Skipping notifying ATTEMPT_ADDED\");\n         }\n       } else{\n         rmContext.getDispatcher().getEventHandler().handle(\n             new RMAppAttemptEvent(applicationAttemptId,\n                 RMAppAttemptEventType.ATTEMPT_ADDED));\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void addApplicationAttempt(\n      ApplicationAttemptId applicationAttemptId,\n      boolean transferStateFromPreviousAttempt,\n      boolean isAttemptRecovering) {\n    try {\n      writeLock.lock();\n      SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d applications.get(\n          applicationAttemptId.getApplicationId());\n      if (application \u003d\u003d null) {\n        LOG.warn(\"Application \" + applicationAttemptId.getApplicationId()\n            + \" cannot be found in scheduler.\");\n        return;\n      }\n      CSQueue queue \u003d (CSQueue) application.getQueue();\n\n      FiCaSchedulerApp attempt \u003d new FiCaSchedulerApp(applicationAttemptId,\n          application.getUser(), queue, queue.getAbstractUsersManager(),\n          rmContext, application.getPriority(), isAttemptRecovering,\n          activitiesManager);\n      if (transferStateFromPreviousAttempt) {\n        attempt.transferStateFromPreviousAttempt(\n            application.getCurrentAppAttempt());\n      }\n      application.setCurrentAppAttempt(attempt);\n\n      // Update attempt priority to the latest to avoid race condition i.e\n      // SchedulerApplicationAttempt is created with old priority but it is not\n      // set to SchedulerApplication#setCurrentAppAttempt.\n      // Scenario would occur is\n      // 1. SchdulerApplicationAttempt is created with old priority.\n      // 2. updateApplicationPriority() updates SchedulerApplication. Since\n      // currentAttempt is null, it just return.\n      // 3. ScheduelerApplcationAttempt is set in\n      // SchedulerApplication#setCurrentAppAttempt.\n      attempt.setPriority(application.getPriority());\n\n      queue.submitApplicationAttempt(attempt, application.getUser());\n      LOG.info(\"Added Application Attempt \" + applicationAttemptId\n          + \" to scheduler from user \" + application.getUser() + \" in queue \"\n          + queue.getQueueName());\n      if (isAttemptRecovering) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(applicationAttemptId\n              + \" is recovering. Skipping notifying ATTEMPT_ADDED\");\n        }\n      } else{\n        rmContext.getDispatcher().getEventHandler().handle(\n            new RMAppAttemptEvent(applicationAttemptId,\n                RMAppAttemptEventType.ATTEMPT_ADDED));\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-3139. Improve locks in AbstractYarnScheduler/CapacityScheduler/FairScheduler. Contributed by Wangda Tan\n",
      "commitDate": "04/10/16 5:23 PM",
      "commitName": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-3139. Improve locks in AbstractYarnScheduler/CapacityScheduler/FairScheduler. Contributed by Wangda Tan\n",
          "commitDate": "04/10/16 5:23 PM",
          "commitName": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
          "commitAuthor": "Jian He",
          "commitDateOld": "30/08/16 3:52 PM",
          "commitNameOld": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 35.06,
          "commitsBetweenForRepo": 195,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,54 @@\n-  private synchronized void addApplicationAttempt(\n+  private void addApplicationAttempt(\n       ApplicationAttemptId applicationAttemptId,\n       boolean transferStateFromPreviousAttempt,\n       boolean isAttemptRecovering) {\n-    SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n-        applications.get(applicationAttemptId.getApplicationId());\n-    if (application \u003d\u003d null) {\n-      LOG.warn(\"Application \" + applicationAttemptId.getApplicationId() +\n-          \" cannot be found in scheduler.\");\n-      return;\n-    }\n-    CSQueue queue \u003d (CSQueue) application.getQueue();\n-\n-    FiCaSchedulerApp attempt \u003d new FiCaSchedulerApp(applicationAttemptId,\n-        application.getUser(), queue, queue.getActiveUsersManager(), rmContext,\n-            application.getPriority(), isAttemptRecovering, activitiesManager);\n-    if (transferStateFromPreviousAttempt) {\n-      attempt.transferStateFromPreviousAttempt(\n-          application.getCurrentAppAttempt());\n-    }\n-    application.setCurrentAppAttempt(attempt);\n-\n-    // Update attempt priority to the latest to avoid race condition i.e\n-    // SchedulerApplicationAttempt is created with old priority but it is not\n-    // set to SchedulerApplication#setCurrentAppAttempt.\n-    // Scenario would occur is\n-    // 1. SchdulerApplicationAttempt is created with old priority.\n-    // 2. updateApplicationPriority() updates SchedulerApplication. Since\n-    // currentAttempt is null, it just return.\n-    // 3. ScheduelerApplcationAttempt is set in\n-    // SchedulerApplication#setCurrentAppAttempt.\n-    attempt.setPriority(application.getPriority());\n-\n-    queue.submitApplicationAttempt(attempt, application.getUser());\n-    LOG.info(\"Added Application Attempt \" + applicationAttemptId\n-        + \" to scheduler from user \" + application.getUser() + \" in queue \"\n-        + queue.getQueueName());\n-    if (isAttemptRecovering) {\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(applicationAttemptId\n-            + \" is recovering. Skipping notifying ATTEMPT_ADDED\");\n+    try {\n+      writeLock.lock();\n+      SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d applications.get(\n+          applicationAttemptId.getApplicationId());\n+      if (application \u003d\u003d null) {\n+        LOG.warn(\"Application \" + applicationAttemptId.getApplicationId()\n+            + \" cannot be found in scheduler.\");\n+        return;\n       }\n-    } else {\n-      rmContext.getDispatcher().getEventHandler().handle(\n-        new RMAppAttemptEvent(applicationAttemptId,\n-            RMAppAttemptEventType.ATTEMPT_ADDED));\n+      CSQueue queue \u003d (CSQueue) application.getQueue();\n+\n+      FiCaSchedulerApp attempt \u003d new FiCaSchedulerApp(applicationAttemptId,\n+          application.getUser(), queue, queue.getActiveUsersManager(),\n+          rmContext, application.getPriority(), isAttemptRecovering,\n+          activitiesManager);\n+      if (transferStateFromPreviousAttempt) {\n+        attempt.transferStateFromPreviousAttempt(\n+            application.getCurrentAppAttempt());\n+      }\n+      application.setCurrentAppAttempt(attempt);\n+\n+      // Update attempt priority to the latest to avoid race condition i.e\n+      // SchedulerApplicationAttempt is created with old priority but it is not\n+      // set to SchedulerApplication#setCurrentAppAttempt.\n+      // Scenario would occur is\n+      // 1. SchdulerApplicationAttempt is created with old priority.\n+      // 2. updateApplicationPriority() updates SchedulerApplication. Since\n+      // currentAttempt is null, it just return.\n+      // 3. ScheduelerApplcationAttempt is set in\n+      // SchedulerApplication#setCurrentAppAttempt.\n+      attempt.setPriority(application.getPriority());\n+\n+      queue.submitApplicationAttempt(attempt, application.getUser());\n+      LOG.info(\"Added Application Attempt \" + applicationAttemptId\n+          + \" to scheduler from user \" + application.getUser() + \" in queue \"\n+          + queue.getQueueName());\n+      if (isAttemptRecovering) {\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(applicationAttemptId\n+              + \" is recovering. Skipping notifying ATTEMPT_ADDED\");\n+        }\n+      } else{\n+        rmContext.getDispatcher().getEventHandler().handle(\n+            new RMAppAttemptEvent(applicationAttemptId,\n+                RMAppAttemptEventType.ATTEMPT_ADDED));\n+      }\n+    } finally {\n+      writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void addApplicationAttempt(\n      ApplicationAttemptId applicationAttemptId,\n      boolean transferStateFromPreviousAttempt,\n      boolean isAttemptRecovering) {\n    try {\n      writeLock.lock();\n      SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d applications.get(\n          applicationAttemptId.getApplicationId());\n      if (application \u003d\u003d null) {\n        LOG.warn(\"Application \" + applicationAttemptId.getApplicationId()\n            + \" cannot be found in scheduler.\");\n        return;\n      }\n      CSQueue queue \u003d (CSQueue) application.getQueue();\n\n      FiCaSchedulerApp attempt \u003d new FiCaSchedulerApp(applicationAttemptId,\n          application.getUser(), queue, queue.getActiveUsersManager(),\n          rmContext, application.getPriority(), isAttemptRecovering,\n          activitiesManager);\n      if (transferStateFromPreviousAttempt) {\n        attempt.transferStateFromPreviousAttempt(\n            application.getCurrentAppAttempt());\n      }\n      application.setCurrentAppAttempt(attempt);\n\n      // Update attempt priority to the latest to avoid race condition i.e\n      // SchedulerApplicationAttempt is created with old priority but it is not\n      // set to SchedulerApplication#setCurrentAppAttempt.\n      // Scenario would occur is\n      // 1. SchdulerApplicationAttempt is created with old priority.\n      // 2. updateApplicationPriority() updates SchedulerApplication. Since\n      // currentAttempt is null, it just return.\n      // 3. ScheduelerApplcationAttempt is set in\n      // SchedulerApplication#setCurrentAppAttempt.\n      attempt.setPriority(application.getPriority());\n\n      queue.submitApplicationAttempt(attempt, application.getUser());\n      LOG.info(\"Added Application Attempt \" + applicationAttemptId\n          + \" to scheduler from user \" + application.getUser() + \" in queue \"\n          + queue.getQueueName());\n      if (isAttemptRecovering) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(applicationAttemptId\n              + \" is recovering. Skipping notifying ATTEMPT_ADDED\");\n        }\n      } else{\n        rmContext.getDispatcher().getEventHandler().handle(\n            new RMAppAttemptEvent(applicationAttemptId,\n                RMAppAttemptEventType.ATTEMPT_ADDED));\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {
            "oldValue": "[private, synchronized]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3139. Improve locks in AbstractYarnScheduler/CapacityScheduler/FairScheduler. Contributed by Wangda Tan\n",
          "commitDate": "04/10/16 5:23 PM",
          "commitName": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
          "commitAuthor": "Jian He",
          "commitDateOld": "30/08/16 3:52 PM",
          "commitNameOld": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 35.06,
          "commitsBetweenForRepo": 195,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,54 @@\n-  private synchronized void addApplicationAttempt(\n+  private void addApplicationAttempt(\n       ApplicationAttemptId applicationAttemptId,\n       boolean transferStateFromPreviousAttempt,\n       boolean isAttemptRecovering) {\n-    SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n-        applications.get(applicationAttemptId.getApplicationId());\n-    if (application \u003d\u003d null) {\n-      LOG.warn(\"Application \" + applicationAttemptId.getApplicationId() +\n-          \" cannot be found in scheduler.\");\n-      return;\n-    }\n-    CSQueue queue \u003d (CSQueue) application.getQueue();\n-\n-    FiCaSchedulerApp attempt \u003d new FiCaSchedulerApp(applicationAttemptId,\n-        application.getUser(), queue, queue.getActiveUsersManager(), rmContext,\n-            application.getPriority(), isAttemptRecovering, activitiesManager);\n-    if (transferStateFromPreviousAttempt) {\n-      attempt.transferStateFromPreviousAttempt(\n-          application.getCurrentAppAttempt());\n-    }\n-    application.setCurrentAppAttempt(attempt);\n-\n-    // Update attempt priority to the latest to avoid race condition i.e\n-    // SchedulerApplicationAttempt is created with old priority but it is not\n-    // set to SchedulerApplication#setCurrentAppAttempt.\n-    // Scenario would occur is\n-    // 1. SchdulerApplicationAttempt is created with old priority.\n-    // 2. updateApplicationPriority() updates SchedulerApplication. Since\n-    // currentAttempt is null, it just return.\n-    // 3. ScheduelerApplcationAttempt is set in\n-    // SchedulerApplication#setCurrentAppAttempt.\n-    attempt.setPriority(application.getPriority());\n-\n-    queue.submitApplicationAttempt(attempt, application.getUser());\n-    LOG.info(\"Added Application Attempt \" + applicationAttemptId\n-        + \" to scheduler from user \" + application.getUser() + \" in queue \"\n-        + queue.getQueueName());\n-    if (isAttemptRecovering) {\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(applicationAttemptId\n-            + \" is recovering. Skipping notifying ATTEMPT_ADDED\");\n+    try {\n+      writeLock.lock();\n+      SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d applications.get(\n+          applicationAttemptId.getApplicationId());\n+      if (application \u003d\u003d null) {\n+        LOG.warn(\"Application \" + applicationAttemptId.getApplicationId()\n+            + \" cannot be found in scheduler.\");\n+        return;\n       }\n-    } else {\n-      rmContext.getDispatcher().getEventHandler().handle(\n-        new RMAppAttemptEvent(applicationAttemptId,\n-            RMAppAttemptEventType.ATTEMPT_ADDED));\n+      CSQueue queue \u003d (CSQueue) application.getQueue();\n+\n+      FiCaSchedulerApp attempt \u003d new FiCaSchedulerApp(applicationAttemptId,\n+          application.getUser(), queue, queue.getActiveUsersManager(),\n+          rmContext, application.getPriority(), isAttemptRecovering,\n+          activitiesManager);\n+      if (transferStateFromPreviousAttempt) {\n+        attempt.transferStateFromPreviousAttempt(\n+            application.getCurrentAppAttempt());\n+      }\n+      application.setCurrentAppAttempt(attempt);\n+\n+      // Update attempt priority to the latest to avoid race condition i.e\n+      // SchedulerApplicationAttempt is created with old priority but it is not\n+      // set to SchedulerApplication#setCurrentAppAttempt.\n+      // Scenario would occur is\n+      // 1. SchdulerApplicationAttempt is created with old priority.\n+      // 2. updateApplicationPriority() updates SchedulerApplication. Since\n+      // currentAttempt is null, it just return.\n+      // 3. ScheduelerApplcationAttempt is set in\n+      // SchedulerApplication#setCurrentAppAttempt.\n+      attempt.setPriority(application.getPriority());\n+\n+      queue.submitApplicationAttempt(attempt, application.getUser());\n+      LOG.info(\"Added Application Attempt \" + applicationAttemptId\n+          + \" to scheduler from user \" + application.getUser() + \" in queue \"\n+          + queue.getQueueName());\n+      if (isAttemptRecovering) {\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(applicationAttemptId\n+              + \" is recovering. Skipping notifying ATTEMPT_ADDED\");\n+        }\n+      } else{\n+        rmContext.getDispatcher().getEventHandler().handle(\n+            new RMAppAttemptEvent(applicationAttemptId,\n+                RMAppAttemptEventType.ATTEMPT_ADDED));\n+      }\n+    } finally {\n+      writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void addApplicationAttempt(\n      ApplicationAttemptId applicationAttemptId,\n      boolean transferStateFromPreviousAttempt,\n      boolean isAttemptRecovering) {\n    try {\n      writeLock.lock();\n      SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d applications.get(\n          applicationAttemptId.getApplicationId());\n      if (application \u003d\u003d null) {\n        LOG.warn(\"Application \" + applicationAttemptId.getApplicationId()\n            + \" cannot be found in scheduler.\");\n        return;\n      }\n      CSQueue queue \u003d (CSQueue) application.getQueue();\n\n      FiCaSchedulerApp attempt \u003d new FiCaSchedulerApp(applicationAttemptId,\n          application.getUser(), queue, queue.getActiveUsersManager(),\n          rmContext, application.getPriority(), isAttemptRecovering,\n          activitiesManager);\n      if (transferStateFromPreviousAttempt) {\n        attempt.transferStateFromPreviousAttempt(\n            application.getCurrentAppAttempt());\n      }\n      application.setCurrentAppAttempt(attempt);\n\n      // Update attempt priority to the latest to avoid race condition i.e\n      // SchedulerApplicationAttempt is created with old priority but it is not\n      // set to SchedulerApplication#setCurrentAppAttempt.\n      // Scenario would occur is\n      // 1. SchdulerApplicationAttempt is created with old priority.\n      // 2. updateApplicationPriority() updates SchedulerApplication. Since\n      // currentAttempt is null, it just return.\n      // 3. ScheduelerApplcationAttempt is set in\n      // SchedulerApplication#setCurrentAppAttempt.\n      attempt.setPriority(application.getPriority());\n\n      queue.submitApplicationAttempt(attempt, application.getUser());\n      LOG.info(\"Added Application Attempt \" + applicationAttemptId\n          + \" to scheduler from user \" + application.getUser() + \" in queue \"\n          + queue.getQueueName());\n      if (isAttemptRecovering) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(applicationAttemptId\n              + \" is recovering. Skipping notifying ATTEMPT_ADDED\");\n        }\n      } else{\n        rmContext.getDispatcher().getEventHandler().handle(\n            new RMAppAttemptEvent(applicationAttemptId,\n                RMAppAttemptEventType.ATTEMPT_ADDED));\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "e0d131f055ee126052ad4d0f7b0d192e6c730188": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4091. Add REST API to retrieve scheduler activity. (Chen Ge and Sunil G via wangda)\n",
      "commitDate": "05/08/16 10:27 AM",
      "commitName": "e0d131f055ee126052ad4d0f7b0d192e6c730188",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "26/07/16 9:22 PM",
      "commitNameOld": "d62e121ffc0239e7feccc1e23ece92c5fac685f6",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 9.54,
      "commitsBetweenForRepo": 75,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n   private synchronized void addApplicationAttempt(\n       ApplicationAttemptId applicationAttemptId,\n       boolean transferStateFromPreviousAttempt,\n       boolean isAttemptRecovering) {\n     SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n         applications.get(applicationAttemptId.getApplicationId());\n     if (application \u003d\u003d null) {\n       LOG.warn(\"Application \" + applicationAttemptId.getApplicationId() +\n           \" cannot be found in scheduler.\");\n       return;\n     }\n     CSQueue queue \u003d (CSQueue) application.getQueue();\n \n     FiCaSchedulerApp attempt \u003d new FiCaSchedulerApp(applicationAttemptId,\n         application.getUser(), queue, queue.getActiveUsersManager(), rmContext,\n-            application.getPriority(), isAttemptRecovering);\n+            application.getPriority(), isAttemptRecovering, activitiesManager);\n     if (transferStateFromPreviousAttempt) {\n       attempt.transferStateFromPreviousAttempt(\n           application.getCurrentAppAttempt());\n     }\n     application.setCurrentAppAttempt(attempt);\n \n     // Update attempt priority to the latest to avoid race condition i.e\n     // SchedulerApplicationAttempt is created with old priority but it is not\n     // set to SchedulerApplication#setCurrentAppAttempt.\n     // Scenario would occur is\n     // 1. SchdulerApplicationAttempt is created with old priority.\n     // 2. updateApplicationPriority() updates SchedulerApplication. Since\n     // currentAttempt is null, it just return.\n     // 3. ScheduelerApplcationAttempt is set in\n     // SchedulerApplication#setCurrentAppAttempt.\n     attempt.setPriority(application.getPriority());\n \n     queue.submitApplicationAttempt(attempt, application.getUser());\n     LOG.info(\"Added Application Attempt \" + applicationAttemptId\n         + \" to scheduler from user \" + application.getUser() + \" in queue \"\n         + queue.getQueueName());\n     if (isAttemptRecovering) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(applicationAttemptId\n             + \" is recovering. Skipping notifying ATTEMPT_ADDED\");\n       }\n     } else {\n       rmContext.getDispatcher().getEventHandler().handle(\n         new RMAppAttemptEvent(applicationAttemptId,\n             RMAppAttemptEventType.ATTEMPT_ADDED));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void addApplicationAttempt(\n      ApplicationAttemptId applicationAttemptId,\n      boolean transferStateFromPreviousAttempt,\n      boolean isAttemptRecovering) {\n    SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n        applications.get(applicationAttemptId.getApplicationId());\n    if (application \u003d\u003d null) {\n      LOG.warn(\"Application \" + applicationAttemptId.getApplicationId() +\n          \" cannot be found in scheduler.\");\n      return;\n    }\n    CSQueue queue \u003d (CSQueue) application.getQueue();\n\n    FiCaSchedulerApp attempt \u003d new FiCaSchedulerApp(applicationAttemptId,\n        application.getUser(), queue, queue.getActiveUsersManager(), rmContext,\n            application.getPriority(), isAttemptRecovering, activitiesManager);\n    if (transferStateFromPreviousAttempt) {\n      attempt.transferStateFromPreviousAttempt(\n          application.getCurrentAppAttempt());\n    }\n    application.setCurrentAppAttempt(attempt);\n\n    // Update attempt priority to the latest to avoid race condition i.e\n    // SchedulerApplicationAttempt is created with old priority but it is not\n    // set to SchedulerApplication#setCurrentAppAttempt.\n    // Scenario would occur is\n    // 1. SchdulerApplicationAttempt is created with old priority.\n    // 2. updateApplicationPriority() updates SchedulerApplication. Since\n    // currentAttempt is null, it just return.\n    // 3. ScheduelerApplcationAttempt is set in\n    // SchedulerApplication#setCurrentAppAttempt.\n    attempt.setPriority(application.getPriority());\n\n    queue.submitApplicationAttempt(attempt, application.getUser());\n    LOG.info(\"Added Application Attempt \" + applicationAttemptId\n        + \" to scheduler from user \" + application.getUser() + \" in queue \"\n        + queue.getQueueName());\n    if (isAttemptRecovering) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(applicationAttemptId\n            + \" is recovering. Skipping notifying ATTEMPT_ADDED\");\n      }\n    } else {\n      rmContext.getDispatcher().getEventHandler().handle(\n        new RMAppAttemptEvent(applicationAttemptId,\n            RMAppAttemptEventType.ATTEMPT_ADDED));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "109e528ef5d8df07443373751266b4417acc981a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4479. Change CS LeafQueue pendingOrderingPolicy to hornor recovered apps. Contributed by Rohith Sharma K S\n",
      "commitDate": "08/01/16 3:51 PM",
      "commitName": "109e528ef5d8df07443373751266b4417acc981a",
      "commitAuthor": "Jian He",
      "commitDateOld": "04/01/16 10:39 PM",
      "commitNameOld": "6da6d87872de518bb2583f65c9595f2090c855d7",
      "commitAuthorOld": "rohithsharmaks",
      "daysBetweenCommits": 3.72,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n   private synchronized void addApplicationAttempt(\n       ApplicationAttemptId applicationAttemptId,\n       boolean transferStateFromPreviousAttempt,\n       boolean isAttemptRecovering) {\n     SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n         applications.get(applicationAttemptId.getApplicationId());\n     if (application \u003d\u003d null) {\n       LOG.warn(\"Application \" + applicationAttemptId.getApplicationId() +\n           \" cannot be found in scheduler.\");\n       return;\n     }\n     CSQueue queue \u003d (CSQueue) application.getQueue();\n \n     FiCaSchedulerApp attempt \u003d new FiCaSchedulerApp(applicationAttemptId,\n         application.getUser(), queue, queue.getActiveUsersManager(), rmContext,\n-        application.getPriority());\n+            application.getPriority(), isAttemptRecovering);\n     if (transferStateFromPreviousAttempt) {\n       attempt.transferStateFromPreviousAttempt(\n           application.getCurrentAppAttempt());\n     }\n     application.setCurrentAppAttempt(attempt);\n \n     // Update attempt priority to the latest to avoid race condition i.e\n     // SchedulerApplicationAttempt is created with old priority but it is not\n     // set to SchedulerApplication#setCurrentAppAttempt.\n     // Scenario would occur is\n     // 1. SchdulerApplicationAttempt is created with old priority.\n     // 2. updateApplicationPriority() updates SchedulerApplication. Since\n     // currentAttempt is null, it just return.\n     // 3. ScheduelerApplcationAttempt is set in\n     // SchedulerApplication#setCurrentAppAttempt.\n     attempt.setPriority(application.getPriority());\n \n     queue.submitApplicationAttempt(attempt, application.getUser());\n     LOG.info(\"Added Application Attempt \" + applicationAttemptId\n         + \" to scheduler from user \" + application.getUser() + \" in queue \"\n         + queue.getQueueName());\n     if (isAttemptRecovering) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(applicationAttemptId\n             + \" is recovering. Skipping notifying ATTEMPT_ADDED\");\n       }\n     } else {\n       rmContext.getDispatcher().getEventHandler().handle(\n         new RMAppAttemptEvent(applicationAttemptId,\n             RMAppAttemptEventType.ATTEMPT_ADDED));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void addApplicationAttempt(\n      ApplicationAttemptId applicationAttemptId,\n      boolean transferStateFromPreviousAttempt,\n      boolean isAttemptRecovering) {\n    SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n        applications.get(applicationAttemptId.getApplicationId());\n    if (application \u003d\u003d null) {\n      LOG.warn(\"Application \" + applicationAttemptId.getApplicationId() +\n          \" cannot be found in scheduler.\");\n      return;\n    }\n    CSQueue queue \u003d (CSQueue) application.getQueue();\n\n    FiCaSchedulerApp attempt \u003d new FiCaSchedulerApp(applicationAttemptId,\n        application.getUser(), queue, queue.getActiveUsersManager(), rmContext,\n            application.getPriority(), isAttemptRecovering);\n    if (transferStateFromPreviousAttempt) {\n      attempt.transferStateFromPreviousAttempt(\n          application.getCurrentAppAttempt());\n    }\n    application.setCurrentAppAttempt(attempt);\n\n    // Update attempt priority to the latest to avoid race condition i.e\n    // SchedulerApplicationAttempt is created with old priority but it is not\n    // set to SchedulerApplication#setCurrentAppAttempt.\n    // Scenario would occur is\n    // 1. SchdulerApplicationAttempt is created with old priority.\n    // 2. updateApplicationPriority() updates SchedulerApplication. Since\n    // currentAttempt is null, it just return.\n    // 3. ScheduelerApplcationAttempt is set in\n    // SchedulerApplication#setCurrentAppAttempt.\n    attempt.setPriority(application.getPriority());\n\n    queue.submitApplicationAttempt(attempt, application.getUser());\n    LOG.info(\"Added Application Attempt \" + applicationAttemptId\n        + \" to scheduler from user \" + application.getUser() + \" in queue \"\n        + queue.getQueueName());\n    if (isAttemptRecovering) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(applicationAttemptId\n            + \" is recovering. Skipping notifying ATTEMPT_ADDED\");\n      }\n    } else {\n      rmContext.getDispatcher().getEventHandler().handle(\n        new RMAppAttemptEvent(applicationAttemptId,\n            RMAppAttemptEventType.ATTEMPT_ADDED));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "cf23f2c2b5b4eb9e51de1a66b7aa57dee7ff30b5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4000. RM crashes with NPE if leaf queue becomes parent queue during restart. Contributed by Varun Saxena\n",
      "commitDate": "15/10/15 5:12 PM",
      "commitName": "cf23f2c2b5b4eb9e51de1a66b7aa57dee7ff30b5",
      "commitAuthor": "Jian He",
      "commitDateOld": "06/10/15 11:56 AM",
      "commitNameOld": "29a582ada0fe195989eca25e5a995895e178f4ea",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 9.22,
      "commitsBetweenForRepo": 87,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,48 @@\n   private synchronized void addApplicationAttempt(\n       ApplicationAttemptId applicationAttemptId,\n       boolean transferStateFromPreviousAttempt,\n       boolean isAttemptRecovering) {\n     SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n         applications.get(applicationAttemptId.getApplicationId());\n+    if (application \u003d\u003d null) {\n+      LOG.warn(\"Application \" + applicationAttemptId.getApplicationId() +\n+          \" cannot be found in scheduler.\");\n+      return;\n+    }\n     CSQueue queue \u003d (CSQueue) application.getQueue();\n \n     FiCaSchedulerApp attempt \u003d new FiCaSchedulerApp(applicationAttemptId,\n         application.getUser(), queue, queue.getActiveUsersManager(), rmContext,\n         application.getPriority());\n     if (transferStateFromPreviousAttempt) {\n       attempt.transferStateFromPreviousAttempt(\n           application.getCurrentAppAttempt());\n     }\n     application.setCurrentAppAttempt(attempt);\n \n     // Update attempt priority to the latest to avoid race condition i.e\n     // SchedulerApplicationAttempt is created with old priority but it is not\n     // set to SchedulerApplication#setCurrentAppAttempt.\n     // Scenario would occur is\n     // 1. SchdulerApplicationAttempt is created with old priority.\n     // 2. updateApplicationPriority() updates SchedulerApplication. Since\n     // currentAttempt is null, it just return.\n     // 3. ScheduelerApplcationAttempt is set in\n     // SchedulerApplication#setCurrentAppAttempt.\n     attempt.setPriority(application.getPriority());\n \n     queue.submitApplicationAttempt(attempt, application.getUser());\n     LOG.info(\"Added Application Attempt \" + applicationAttemptId\n         + \" to scheduler from user \" + application.getUser() + \" in queue \"\n         + queue.getQueueName());\n     if (isAttemptRecovering) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(applicationAttemptId\n             + \" is recovering. Skipping notifying ATTEMPT_ADDED\");\n       }\n     } else {\n       rmContext.getDispatcher().getEventHandler().handle(\n         new RMAppAttemptEvent(applicationAttemptId,\n             RMAppAttemptEventType.ATTEMPT_ADDED));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void addApplicationAttempt(\n      ApplicationAttemptId applicationAttemptId,\n      boolean transferStateFromPreviousAttempt,\n      boolean isAttemptRecovering) {\n    SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n        applications.get(applicationAttemptId.getApplicationId());\n    if (application \u003d\u003d null) {\n      LOG.warn(\"Application \" + applicationAttemptId.getApplicationId() +\n          \" cannot be found in scheduler.\");\n      return;\n    }\n    CSQueue queue \u003d (CSQueue) application.getQueue();\n\n    FiCaSchedulerApp attempt \u003d new FiCaSchedulerApp(applicationAttemptId,\n        application.getUser(), queue, queue.getActiveUsersManager(), rmContext,\n        application.getPriority());\n    if (transferStateFromPreviousAttempt) {\n      attempt.transferStateFromPreviousAttempt(\n          application.getCurrentAppAttempt());\n    }\n    application.setCurrentAppAttempt(attempt);\n\n    // Update attempt priority to the latest to avoid race condition i.e\n    // SchedulerApplicationAttempt is created with old priority but it is not\n    // set to SchedulerApplication#setCurrentAppAttempt.\n    // Scenario would occur is\n    // 1. SchdulerApplicationAttempt is created with old priority.\n    // 2. updateApplicationPriority() updates SchedulerApplication. Since\n    // currentAttempt is null, it just return.\n    // 3. ScheduelerApplcationAttempt is set in\n    // SchedulerApplication#setCurrentAppAttempt.\n    attempt.setPriority(application.getPriority());\n\n    queue.submitApplicationAttempt(attempt, application.getUser());\n    LOG.info(\"Added Application Attempt \" + applicationAttemptId\n        + \" to scheduler from user \" + application.getUser() + \" in queue \"\n        + queue.getQueueName());\n    if (isAttemptRecovering) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(applicationAttemptId\n            + \" is recovering. Skipping notifying ATTEMPT_ADDED\");\n      }\n    } else {\n      rmContext.getDispatcher().getEventHandler().handle(\n        new RMAppAttemptEvent(applicationAttemptId,\n            RMAppAttemptEventType.ATTEMPT_ADDED));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "57c7ae1affb2e1821fbdc3f47738d7e6fd83c7c1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4014. Support user cli interface in for Application Priority. Contributed by Rohith Sharma K S\n",
      "commitDate": "24/08/15 8:36 PM",
      "commitName": "57c7ae1affb2e1821fbdc3f47738d7e6fd83c7c1",
      "commitAuthor": "Jian He",
      "commitDateOld": "10/08/15 8:51 PM",
      "commitNameOld": "fa1d84ae2739a1e76f58b9c96d1378f9453cc0d2",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 13.99,
      "commitsBetweenForRepo": 83,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,43 @@\n   private synchronized void addApplicationAttempt(\n       ApplicationAttemptId applicationAttemptId,\n       boolean transferStateFromPreviousAttempt,\n       boolean isAttemptRecovering) {\n     SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n         applications.get(applicationAttemptId.getApplicationId());\n     CSQueue queue \u003d (CSQueue) application.getQueue();\n \n     FiCaSchedulerApp attempt \u003d new FiCaSchedulerApp(applicationAttemptId,\n         application.getUser(), queue, queue.getActiveUsersManager(), rmContext,\n         application.getPriority());\n     if (transferStateFromPreviousAttempt) {\n       attempt.transferStateFromPreviousAttempt(\n           application.getCurrentAppAttempt());\n     }\n     application.setCurrentAppAttempt(attempt);\n \n+    // Update attempt priority to the latest to avoid race condition i.e\n+    // SchedulerApplicationAttempt is created with old priority but it is not\n+    // set to SchedulerApplication#setCurrentAppAttempt.\n+    // Scenario would occur is\n+    // 1. SchdulerApplicationAttempt is created with old priority.\n+    // 2. updateApplicationPriority() updates SchedulerApplication. Since\n+    // currentAttempt is null, it just return.\n+    // 3. ScheduelerApplcationAttempt is set in\n+    // SchedulerApplication#setCurrentAppAttempt.\n+    attempt.setPriority(application.getPriority());\n+\n     queue.submitApplicationAttempt(attempt, application.getUser());\n     LOG.info(\"Added Application Attempt \" + applicationAttemptId\n         + \" to scheduler from user \" + application.getUser() + \" in queue \"\n         + queue.getQueueName());\n     if (isAttemptRecovering) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(applicationAttemptId\n             + \" is recovering. Skipping notifying ATTEMPT_ADDED\");\n       }\n     } else {\n       rmContext.getDispatcher().getEventHandler().handle(\n         new RMAppAttemptEvent(applicationAttemptId,\n             RMAppAttemptEventType.ATTEMPT_ADDED));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void addApplicationAttempt(\n      ApplicationAttemptId applicationAttemptId,\n      boolean transferStateFromPreviousAttempt,\n      boolean isAttemptRecovering) {\n    SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n        applications.get(applicationAttemptId.getApplicationId());\n    CSQueue queue \u003d (CSQueue) application.getQueue();\n\n    FiCaSchedulerApp attempt \u003d new FiCaSchedulerApp(applicationAttemptId,\n        application.getUser(), queue, queue.getActiveUsersManager(), rmContext,\n        application.getPriority());\n    if (transferStateFromPreviousAttempt) {\n      attempt.transferStateFromPreviousAttempt(\n          application.getCurrentAppAttempt());\n    }\n    application.setCurrentAppAttempt(attempt);\n\n    // Update attempt priority to the latest to avoid race condition i.e\n    // SchedulerApplicationAttempt is created with old priority but it is not\n    // set to SchedulerApplication#setCurrentAppAttempt.\n    // Scenario would occur is\n    // 1. SchdulerApplicationAttempt is created with old priority.\n    // 2. updateApplicationPriority() updates SchedulerApplication. Since\n    // currentAttempt is null, it just return.\n    // 3. ScheduelerApplcationAttempt is set in\n    // SchedulerApplication#setCurrentAppAttempt.\n    attempt.setPriority(application.getPriority());\n\n    queue.submitApplicationAttempt(attempt, application.getUser());\n    LOG.info(\"Added Application Attempt \" + applicationAttemptId\n        + \" to scheduler from user \" + application.getUser() + \" in queue \"\n        + queue.getQueueName());\n    if (isAttemptRecovering) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(applicationAttemptId\n            + \" is recovering. Skipping notifying ATTEMPT_ADDED\");\n      }\n    } else {\n      rmContext.getDispatcher().getEventHandler().handle(\n        new RMAppAttemptEvent(applicationAttemptId,\n            RMAppAttemptEventType.ATTEMPT_ADDED));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "c39ca541f498712133890961598bbff50d89d68b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2003. Support for Application priority : Changes in RM and Capacity Scheduler. (Sunil G via wangda)\n",
      "commitDate": "21/07/15 9:57 AM",
      "commitName": "c39ca541f498712133890961598bbff50d89d68b",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "17/07/15 4:31 AM",
      "commitNameOld": "9b272ccae78918e7d756d84920a9322187d61eed",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 4.23,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   private synchronized void addApplicationAttempt(\n       ApplicationAttemptId applicationAttemptId,\n       boolean transferStateFromPreviousAttempt,\n       boolean isAttemptRecovering) {\n     SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n         applications.get(applicationAttemptId.getApplicationId());\n     CSQueue queue \u003d (CSQueue) application.getQueue();\n \n-    FiCaSchedulerApp attempt \u003d\n-        new FiCaSchedulerApp(applicationAttemptId, application.getUser(),\n-          queue, queue.getActiveUsersManager(), rmContext);\n+    FiCaSchedulerApp attempt \u003d new FiCaSchedulerApp(applicationAttemptId,\n+        application.getUser(), queue, queue.getActiveUsersManager(), rmContext,\n+        application.getPriority());\n     if (transferStateFromPreviousAttempt) {\n       attempt.transferStateFromPreviousAttempt(application\n         .getCurrentAppAttempt());\n     }\n     application.setCurrentAppAttempt(attempt);\n \n     queue.submitApplicationAttempt(attempt, application.getUser());\n     LOG.info(\"Added Application Attempt \" + applicationAttemptId\n         + \" to scheduler from user \" + application.getUser() + \" in queue \"\n         + queue.getQueueName());\n     if (isAttemptRecovering) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(applicationAttemptId\n             + \" is recovering. Skipping notifying ATTEMPT_ADDED\");\n       }\n     } else {\n       rmContext.getDispatcher().getEventHandler().handle(\n         new RMAppAttemptEvent(applicationAttemptId,\n             RMAppAttemptEventType.ATTEMPT_ADDED));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void addApplicationAttempt(\n      ApplicationAttemptId applicationAttemptId,\n      boolean transferStateFromPreviousAttempt,\n      boolean isAttemptRecovering) {\n    SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n        applications.get(applicationAttemptId.getApplicationId());\n    CSQueue queue \u003d (CSQueue) application.getQueue();\n\n    FiCaSchedulerApp attempt \u003d new FiCaSchedulerApp(applicationAttemptId,\n        application.getUser(), queue, queue.getActiveUsersManager(), rmContext,\n        application.getPriority());\n    if (transferStateFromPreviousAttempt) {\n      attempt.transferStateFromPreviousAttempt(application\n        .getCurrentAppAttempt());\n    }\n    application.setCurrentAppAttempt(attempt);\n\n    queue.submitApplicationAttempt(attempt, application.getUser());\n    LOG.info(\"Added Application Attempt \" + applicationAttemptId\n        + \" to scheduler from user \" + application.getUser() + \" in queue \"\n        + queue.getQueueName());\n    if (isAttemptRecovering) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(applicationAttemptId\n            + \" is recovering. Skipping notifying ATTEMPT_ADDED\");\n      }\n    } else {\n      rmContext.getDispatcher().getEventHandler().handle(\n        new RMAppAttemptEvent(applicationAttemptId,\n            RMAppAttemptEventType.ATTEMPT_ADDED));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "bda23181bf1931c37d2590e03da9acdc6688ad34": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-2219. Changed ResourceManager to avoid AMs and NMs getting exceptions after RM recovery but before scheduler learns about apps and app-attempts. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1611222 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/14 5:14 PM",
      "commitName": "bda23181bf1931c37d2590e03da9acdc6688ad34",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-2219. Changed ResourceManager to avoid AMs and NMs getting exceptions after RM recovery but before scheduler learns about apps and app-attempts. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1611222 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/07/14 5:14 PM",
          "commitName": "bda23181bf1931c37d2590e03da9acdc6688ad34",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "15/07/14 2:48 PM",
          "commitNameOld": "43589a8df70d4dbaf86609961e27cc4e23dda993",
          "commitAuthorOld": "Mayank Bansal",
          "daysBetweenCommits": 1.1,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,32 @@\n   private synchronized void addApplicationAttempt(\n       ApplicationAttemptId applicationAttemptId,\n       boolean transferStateFromPreviousAttempt,\n-      boolean shouldNotifyAttemptAdded) {\n+      boolean isAttemptRecovering) {\n     SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n         applications.get(applicationAttemptId.getApplicationId());\n     CSQueue queue \u003d (CSQueue) application.getQueue();\n \n     FiCaSchedulerApp attempt \u003d\n         new FiCaSchedulerApp(applicationAttemptId, application.getUser(),\n           queue, queue.getActiveUsersManager(), rmContext);\n     if (transferStateFromPreviousAttempt) {\n       attempt.transferStateFromPreviousAttempt(application\n         .getCurrentAppAttempt());\n     }\n     application.setCurrentAppAttempt(attempt);\n \n     queue.submitApplicationAttempt(attempt, application.getUser());\n     LOG.info(\"Added Application Attempt \" + applicationAttemptId\n         + \" to scheduler from user \" + application.getUser() + \" in queue \"\n         + queue.getQueueName());\n-    if (shouldNotifyAttemptAdded) {\n-      rmContext.getDispatcher().getEventHandler().handle(\n-          new RMAppAttemptEvent(applicationAttemptId,\n-              RMAppAttemptEventType.ATTEMPT_ADDED));\n-    } else {\n+    if (isAttemptRecovering) {\n       if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Skipping notifying ATTEMPT_ADDED\");\n+        LOG.debug(applicationAttemptId\n+            + \" is recovering. Skipping notifying ATTEMPT_ADDED\");\n       }\n+    } else {\n+      rmContext.getDispatcher().getEventHandler().handle(\n+        new RMAppAttemptEvent(applicationAttemptId,\n+            RMAppAttemptEventType.ATTEMPT_ADDED));\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized void addApplicationAttempt(\n      ApplicationAttemptId applicationAttemptId,\n      boolean transferStateFromPreviousAttempt,\n      boolean isAttemptRecovering) {\n    SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n        applications.get(applicationAttemptId.getApplicationId());\n    CSQueue queue \u003d (CSQueue) application.getQueue();\n\n    FiCaSchedulerApp attempt \u003d\n        new FiCaSchedulerApp(applicationAttemptId, application.getUser(),\n          queue, queue.getActiveUsersManager(), rmContext);\n    if (transferStateFromPreviousAttempt) {\n      attempt.transferStateFromPreviousAttempt(application\n        .getCurrentAppAttempt());\n    }\n    application.setCurrentAppAttempt(attempt);\n\n    queue.submitApplicationAttempt(attempt, application.getUser());\n    LOG.info(\"Added Application Attempt \" + applicationAttemptId\n        + \" to scheduler from user \" + application.getUser() + \" in queue \"\n        + queue.getQueueName());\n    if (isAttemptRecovering) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(applicationAttemptId\n            + \" is recovering. Skipping notifying ATTEMPT_ADDED\");\n      }\n    } else {\n      rmContext.getDispatcher().getEventHandler().handle(\n        new RMAppAttemptEvent(applicationAttemptId,\n            RMAppAttemptEventType.ATTEMPT_ADDED));\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {
            "oldValue": "[applicationAttemptId-ApplicationAttemptId, transferStateFromPreviousAttempt-boolean, shouldNotifyAttemptAdded-boolean]",
            "newValue": "[applicationAttemptId-ApplicationAttemptId, transferStateFromPreviousAttempt-boolean, isAttemptRecovering-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2219. Changed ResourceManager to avoid AMs and NMs getting exceptions after RM recovery but before scheduler learns about apps and app-attempts. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1611222 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/07/14 5:14 PM",
          "commitName": "bda23181bf1931c37d2590e03da9acdc6688ad34",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "15/07/14 2:48 PM",
          "commitNameOld": "43589a8df70d4dbaf86609961e27cc4e23dda993",
          "commitAuthorOld": "Mayank Bansal",
          "daysBetweenCommits": 1.1,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,32 @@\n   private synchronized void addApplicationAttempt(\n       ApplicationAttemptId applicationAttemptId,\n       boolean transferStateFromPreviousAttempt,\n-      boolean shouldNotifyAttemptAdded) {\n+      boolean isAttemptRecovering) {\n     SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n         applications.get(applicationAttemptId.getApplicationId());\n     CSQueue queue \u003d (CSQueue) application.getQueue();\n \n     FiCaSchedulerApp attempt \u003d\n         new FiCaSchedulerApp(applicationAttemptId, application.getUser(),\n           queue, queue.getActiveUsersManager(), rmContext);\n     if (transferStateFromPreviousAttempt) {\n       attempt.transferStateFromPreviousAttempt(application\n         .getCurrentAppAttempt());\n     }\n     application.setCurrentAppAttempt(attempt);\n \n     queue.submitApplicationAttempt(attempt, application.getUser());\n     LOG.info(\"Added Application Attempt \" + applicationAttemptId\n         + \" to scheduler from user \" + application.getUser() + \" in queue \"\n         + queue.getQueueName());\n-    if (shouldNotifyAttemptAdded) {\n-      rmContext.getDispatcher().getEventHandler().handle(\n-          new RMAppAttemptEvent(applicationAttemptId,\n-              RMAppAttemptEventType.ATTEMPT_ADDED));\n-    } else {\n+    if (isAttemptRecovering) {\n       if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Skipping notifying ATTEMPT_ADDED\");\n+        LOG.debug(applicationAttemptId\n+            + \" is recovering. Skipping notifying ATTEMPT_ADDED\");\n       }\n+    } else {\n+      rmContext.getDispatcher().getEventHandler().handle(\n+        new RMAppAttemptEvent(applicationAttemptId,\n+            RMAppAttemptEventType.ATTEMPT_ADDED));\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized void addApplicationAttempt(\n      ApplicationAttemptId applicationAttemptId,\n      boolean transferStateFromPreviousAttempt,\n      boolean isAttemptRecovering) {\n    SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n        applications.get(applicationAttemptId.getApplicationId());\n    CSQueue queue \u003d (CSQueue) application.getQueue();\n\n    FiCaSchedulerApp attempt \u003d\n        new FiCaSchedulerApp(applicationAttemptId, application.getUser(),\n          queue, queue.getActiveUsersManager(), rmContext);\n    if (transferStateFromPreviousAttempt) {\n      attempt.transferStateFromPreviousAttempt(application\n        .getCurrentAppAttempt());\n    }\n    application.setCurrentAppAttempt(attempt);\n\n    queue.submitApplicationAttempt(attempt, application.getUser());\n    LOG.info(\"Added Application Attempt \" + applicationAttemptId\n        + \" to scheduler from user \" + application.getUser() + \" in queue \"\n        + queue.getQueueName());\n    if (isAttemptRecovering) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(applicationAttemptId\n            + \" is recovering. Skipping notifying ATTEMPT_ADDED\");\n      }\n    } else {\n      rmContext.getDispatcher().getEventHandler().handle(\n        new RMAppAttemptEvent(applicationAttemptId,\n            RMAppAttemptEventType.ATTEMPT_ADDED));\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "c3f1c30e65cc6a10928299f50801782ecbb4ccb6": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-1365. Changed ApplicationMasterService to allow an app to re-register after RM restart. Contributed by Anubhav Dhoot\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1605263 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/06/14 9:42 PM",
      "commitName": "c3f1c30e65cc6a10928299f50801782ecbb4ccb6",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-1365. Changed ApplicationMasterService to allow an app to re-register after RM restart. Contributed by Anubhav Dhoot\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1605263 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "24/06/14 9:42 PM",
          "commitName": "c3f1c30e65cc6a10928299f50801782ecbb4ccb6",
          "commitAuthor": "Jian He",
          "commitDateOld": "24/06/14 8:15 AM",
          "commitNameOld": "d16470025aa0c51a04c530863a96108895d72ddf",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.56,
          "commitsBetweenForRepo": 17,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,31 @@\n   private synchronized void addApplicationAttempt(\n       ApplicationAttemptId applicationAttemptId,\n-      boolean transferStateFromPreviousAttempt) {\n+      boolean transferStateFromPreviousAttempt,\n+      boolean shouldNotifyAttemptAdded) {\n     SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n         applications.get(applicationAttemptId.getApplicationId());\n     CSQueue queue \u003d (CSQueue) application.getQueue();\n \n     FiCaSchedulerApp attempt \u003d\n         new FiCaSchedulerApp(applicationAttemptId, application.getUser(),\n           queue, queue.getActiveUsersManager(), rmContext);\n     if (transferStateFromPreviousAttempt) {\n       attempt.transferStateFromPreviousAttempt(application\n         .getCurrentAppAttempt());\n     }\n     application.setCurrentAppAttempt(attempt);\n \n     queue.submitApplicationAttempt(attempt, application.getUser());\n     LOG.info(\"Added Application Attempt \" + applicationAttemptId\n         + \" to scheduler from user \" + application.getUser() + \" in queue \"\n         + queue.getQueueName());\n-    rmContext.getDispatcher().getEventHandler() .handle(\n-        new RMAppAttemptEvent(applicationAttemptId,\n-          RMAppAttemptEventType.ATTEMPT_ADDED));\n+    if (shouldNotifyAttemptAdded) {\n+      rmContext.getDispatcher().getEventHandler().handle(\n+          new RMAppAttemptEvent(applicationAttemptId,\n+              RMAppAttemptEventType.ATTEMPT_ADDED));\n+    } else {\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Skipping notifying ATTEMPT_ADDED\");\n+      }\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized void addApplicationAttempt(\n      ApplicationAttemptId applicationAttemptId,\n      boolean transferStateFromPreviousAttempt,\n      boolean shouldNotifyAttemptAdded) {\n    SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n        applications.get(applicationAttemptId.getApplicationId());\n    CSQueue queue \u003d (CSQueue) application.getQueue();\n\n    FiCaSchedulerApp attempt \u003d\n        new FiCaSchedulerApp(applicationAttemptId, application.getUser(),\n          queue, queue.getActiveUsersManager(), rmContext);\n    if (transferStateFromPreviousAttempt) {\n      attempt.transferStateFromPreviousAttempt(application\n        .getCurrentAppAttempt());\n    }\n    application.setCurrentAppAttempt(attempt);\n\n    queue.submitApplicationAttempt(attempt, application.getUser());\n    LOG.info(\"Added Application Attempt \" + applicationAttemptId\n        + \" to scheduler from user \" + application.getUser() + \" in queue \"\n        + queue.getQueueName());\n    if (shouldNotifyAttemptAdded) {\n      rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptEvent(applicationAttemptId,\n              RMAppAttemptEventType.ATTEMPT_ADDED));\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Skipping notifying ATTEMPT_ADDED\");\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {
            "oldValue": "[applicationAttemptId-ApplicationAttemptId, transferStateFromPreviousAttempt-boolean]",
            "newValue": "[applicationAttemptId-ApplicationAttemptId, transferStateFromPreviousAttempt-boolean, shouldNotifyAttemptAdded-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1365. Changed ApplicationMasterService to allow an app to re-register after RM restart. Contributed by Anubhav Dhoot\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1605263 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "24/06/14 9:42 PM",
          "commitName": "c3f1c30e65cc6a10928299f50801782ecbb4ccb6",
          "commitAuthor": "Jian He",
          "commitDateOld": "24/06/14 8:15 AM",
          "commitNameOld": "d16470025aa0c51a04c530863a96108895d72ddf",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.56,
          "commitsBetweenForRepo": 17,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,31 @@\n   private synchronized void addApplicationAttempt(\n       ApplicationAttemptId applicationAttemptId,\n-      boolean transferStateFromPreviousAttempt) {\n+      boolean transferStateFromPreviousAttempt,\n+      boolean shouldNotifyAttemptAdded) {\n     SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n         applications.get(applicationAttemptId.getApplicationId());\n     CSQueue queue \u003d (CSQueue) application.getQueue();\n \n     FiCaSchedulerApp attempt \u003d\n         new FiCaSchedulerApp(applicationAttemptId, application.getUser(),\n           queue, queue.getActiveUsersManager(), rmContext);\n     if (transferStateFromPreviousAttempt) {\n       attempt.transferStateFromPreviousAttempt(application\n         .getCurrentAppAttempt());\n     }\n     application.setCurrentAppAttempt(attempt);\n \n     queue.submitApplicationAttempt(attempt, application.getUser());\n     LOG.info(\"Added Application Attempt \" + applicationAttemptId\n         + \" to scheduler from user \" + application.getUser() + \" in queue \"\n         + queue.getQueueName());\n-    rmContext.getDispatcher().getEventHandler() .handle(\n-        new RMAppAttemptEvent(applicationAttemptId,\n-          RMAppAttemptEventType.ATTEMPT_ADDED));\n+    if (shouldNotifyAttemptAdded) {\n+      rmContext.getDispatcher().getEventHandler().handle(\n+          new RMAppAttemptEvent(applicationAttemptId,\n+              RMAppAttemptEventType.ATTEMPT_ADDED));\n+    } else {\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Skipping notifying ATTEMPT_ADDED\");\n+      }\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized void addApplicationAttempt(\n      ApplicationAttemptId applicationAttemptId,\n      boolean transferStateFromPreviousAttempt,\n      boolean shouldNotifyAttemptAdded) {\n    SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n        applications.get(applicationAttemptId.getApplicationId());\n    CSQueue queue \u003d (CSQueue) application.getQueue();\n\n    FiCaSchedulerApp attempt \u003d\n        new FiCaSchedulerApp(applicationAttemptId, application.getUser(),\n          queue, queue.getActiveUsersManager(), rmContext);\n    if (transferStateFromPreviousAttempt) {\n      attempt.transferStateFromPreviousAttempt(application\n        .getCurrentAppAttempt());\n    }\n    application.setCurrentAppAttempt(attempt);\n\n    queue.submitApplicationAttempt(attempt, application.getUser());\n    LOG.info(\"Added Application Attempt \" + applicationAttemptId\n        + \" to scheduler from user \" + application.getUser() + \" in queue \"\n        + queue.getQueueName());\n    if (shouldNotifyAttemptAdded) {\n      rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptEvent(applicationAttemptId,\n              RMAppAttemptEventType.ATTEMPT_ADDED));\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Skipping notifying ATTEMPT_ADDED\");\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2017. Merged some of the common scheduler code. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1596753 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/05/14 10:32 PM",
      "commitName": "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/03/14 7:53 PM",
      "commitNameOld": "57cdf8626a32b8595a645b7551f46ab950db4789",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 65.11,
      "commitsBetweenForRepo": 406,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n   private synchronized void addApplicationAttempt(\n       ApplicationAttemptId applicationAttemptId,\n       boolean transferStateFromPreviousAttempt) {\n-    SchedulerApplication application \u003d\n+    SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n         applications.get(applicationAttemptId.getApplicationId());\n     CSQueue queue \u003d (CSQueue) application.getQueue();\n \n     FiCaSchedulerApp attempt \u003d\n         new FiCaSchedulerApp(applicationAttemptId, application.getUser(),\n           queue, queue.getActiveUsersManager(), rmContext);\n     if (transferStateFromPreviousAttempt) {\n       attempt.transferStateFromPreviousAttempt(application\n         .getCurrentAppAttempt());\n     }\n     application.setCurrentAppAttempt(attempt);\n \n     queue.submitApplicationAttempt(attempt, application.getUser());\n     LOG.info(\"Added Application Attempt \" + applicationAttemptId\n         + \" to scheduler from user \" + application.getUser() + \" in queue \"\n         + queue.getQueueName());\n     rmContext.getDispatcher().getEventHandler() .handle(\n         new RMAppAttemptEvent(applicationAttemptId,\n           RMAppAttemptEventType.ATTEMPT_ADDED));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void addApplicationAttempt(\n      ApplicationAttemptId applicationAttemptId,\n      boolean transferStateFromPreviousAttempt) {\n    SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n        applications.get(applicationAttemptId.getApplicationId());\n    CSQueue queue \u003d (CSQueue) application.getQueue();\n\n    FiCaSchedulerApp attempt \u003d\n        new FiCaSchedulerApp(applicationAttemptId, application.getUser(),\n          queue, queue.getActiveUsersManager(), rmContext);\n    if (transferStateFromPreviousAttempt) {\n      attempt.transferStateFromPreviousAttempt(application\n        .getCurrentAppAttempt());\n    }\n    application.setCurrentAppAttempt(attempt);\n\n    queue.submitApplicationAttempt(attempt, application.getUser());\n    LOG.info(\"Added Application Attempt \" + applicationAttemptId\n        + \" to scheduler from user \" + application.getUser() + \" in queue \"\n        + queue.getQueueName());\n    rmContext.getDispatcher().getEventHandler() .handle(\n        new RMAppAttemptEvent(applicationAttemptId,\n          RMAppAttemptEventType.ATTEMPT_ADDED));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "1393581bceda234c88cafec00dbfc0ef2a402e83": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-1490. Introduced the ability to make ResourceManager optionally not kill all containers when an ApplicationMaster exits. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1557143 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/01/14 7:04 AM",
      "commitName": "1393581bceda234c88cafec00dbfc0ef2a402e83",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-1490. Introduced the ability to make ResourceManager optionally not kill all containers when an ApplicationMaster exits. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1557143 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/01/14 7:04 AM",
          "commitName": "1393581bceda234c88cafec00dbfc0ef2a402e83",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "02/01/14 12:19 PM",
          "commitNameOld": "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 7.78,
          "commitsBetweenForRepo": 34,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,24 @@\n   private synchronized void addApplicationAttempt(\n-      ApplicationAttemptId applicationAttemptId) {\n+      ApplicationAttemptId applicationAttemptId,\n+      boolean transferStateFromPreviousAttempt) {\n     SchedulerApplication application \u003d\n         applications.get(applicationAttemptId.getApplicationId());\n     CSQueue queue \u003d (CSQueue) application.getQueue();\n \n-    FiCaSchedulerApp SchedulerApp \u003d\n+    FiCaSchedulerApp attempt \u003d\n         new FiCaSchedulerApp(applicationAttemptId, application.getUser(),\n           queue, queue.getActiveUsersManager(), rmContext);\n-    appAttempts.put(applicationAttemptId, SchedulerApp);\n-    queue.submitApplicationAttempt(SchedulerApp, application.getUser());\n+    if (transferStateFromPreviousAttempt) {\n+      attempt.transferStateFromPreviousAttempt(application\n+        .getCurrentAppAttempt());\n+    }\n+    application.setCurrentAppAttempt(attempt);\n+\n+    queue.submitApplicationAttempt(attempt, application.getUser());\n     LOG.info(\"Added Application Attempt \" + applicationAttemptId\n         + \" to scheduler from user \" + application.getUser() + \" in queue \"\n         + queue.getQueueName());\n-    rmContext.getDispatcher().getEventHandler().handle(\n-      new RMAppAttemptEvent(applicationAttemptId,\n+    rmContext.getDispatcher().getEventHandler() .handle(\n+        new RMAppAttemptEvent(applicationAttemptId,\n           RMAppAttemptEventType.ATTEMPT_ADDED));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized void addApplicationAttempt(\n      ApplicationAttemptId applicationAttemptId,\n      boolean transferStateFromPreviousAttempt) {\n    SchedulerApplication application \u003d\n        applications.get(applicationAttemptId.getApplicationId());\n    CSQueue queue \u003d (CSQueue) application.getQueue();\n\n    FiCaSchedulerApp attempt \u003d\n        new FiCaSchedulerApp(applicationAttemptId, application.getUser(),\n          queue, queue.getActiveUsersManager(), rmContext);\n    if (transferStateFromPreviousAttempt) {\n      attempt.transferStateFromPreviousAttempt(application\n        .getCurrentAppAttempt());\n    }\n    application.setCurrentAppAttempt(attempt);\n\n    queue.submitApplicationAttempt(attempt, application.getUser());\n    LOG.info(\"Added Application Attempt \" + applicationAttemptId\n        + \" to scheduler from user \" + application.getUser() + \" in queue \"\n        + queue.getQueueName());\n    rmContext.getDispatcher().getEventHandler() .handle(\n        new RMAppAttemptEvent(applicationAttemptId,\n          RMAppAttemptEventType.ATTEMPT_ADDED));\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {
            "oldValue": "[applicationAttemptId-ApplicationAttemptId]",
            "newValue": "[applicationAttemptId-ApplicationAttemptId, transferStateFromPreviousAttempt-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1490. Introduced the ability to make ResourceManager optionally not kill all containers when an ApplicationMaster exits. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1557143 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/01/14 7:04 AM",
          "commitName": "1393581bceda234c88cafec00dbfc0ef2a402e83",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "02/01/14 12:19 PM",
          "commitNameOld": "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 7.78,
          "commitsBetweenForRepo": 34,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,24 @@\n   private synchronized void addApplicationAttempt(\n-      ApplicationAttemptId applicationAttemptId) {\n+      ApplicationAttemptId applicationAttemptId,\n+      boolean transferStateFromPreviousAttempt) {\n     SchedulerApplication application \u003d\n         applications.get(applicationAttemptId.getApplicationId());\n     CSQueue queue \u003d (CSQueue) application.getQueue();\n \n-    FiCaSchedulerApp SchedulerApp \u003d\n+    FiCaSchedulerApp attempt \u003d\n         new FiCaSchedulerApp(applicationAttemptId, application.getUser(),\n           queue, queue.getActiveUsersManager(), rmContext);\n-    appAttempts.put(applicationAttemptId, SchedulerApp);\n-    queue.submitApplicationAttempt(SchedulerApp, application.getUser());\n+    if (transferStateFromPreviousAttempt) {\n+      attempt.transferStateFromPreviousAttempt(application\n+        .getCurrentAppAttempt());\n+    }\n+    application.setCurrentAppAttempt(attempt);\n+\n+    queue.submitApplicationAttempt(attempt, application.getUser());\n     LOG.info(\"Added Application Attempt \" + applicationAttemptId\n         + \" to scheduler from user \" + application.getUser() + \" in queue \"\n         + queue.getQueueName());\n-    rmContext.getDispatcher().getEventHandler().handle(\n-      new RMAppAttemptEvent(applicationAttemptId,\n+    rmContext.getDispatcher().getEventHandler() .handle(\n+        new RMAppAttemptEvent(applicationAttemptId,\n           RMAppAttemptEventType.ATTEMPT_ADDED));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized void addApplicationAttempt(\n      ApplicationAttemptId applicationAttemptId,\n      boolean transferStateFromPreviousAttempt) {\n    SchedulerApplication application \u003d\n        applications.get(applicationAttemptId.getApplicationId());\n    CSQueue queue \u003d (CSQueue) application.getQueue();\n\n    FiCaSchedulerApp attempt \u003d\n        new FiCaSchedulerApp(applicationAttemptId, application.getUser(),\n          queue, queue.getActiveUsersManager(), rmContext);\n    if (transferStateFromPreviousAttempt) {\n      attempt.transferStateFromPreviousAttempt(application\n        .getCurrentAppAttempt());\n    }\n    application.setCurrentAppAttempt(attempt);\n\n    queue.submitApplicationAttempt(attempt, application.getUser());\n    LOG.info(\"Added Application Attempt \" + applicationAttemptId\n        + \" to scheduler from user \" + application.getUser() + \" in queue \"\n        + queue.getQueueName());\n    rmContext.getDispatcher().getEventHandler() .handle(\n        new RMAppAttemptEvent(applicationAttemptId,\n          RMAppAttemptEventType.ATTEMPT_ADDED));\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-1493. Changed ResourceManager and Scheduler interfacing to recognize app-attempts separately from apps. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1554896 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/01/14 12:19 PM",
      "commitName": "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-1493. Changed ResourceManager and Scheduler interfacing to recognize app-attempts separately from apps. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1554896 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "02/01/14 12:19 PM",
          "commitName": "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "12/12/13 5:44 PM",
          "commitNameOld": "28db28d491b4e3e3ddf440db4cebab8c0ad6b7f3",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 20.77,
          "commitsBetweenForRepo": 83,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,18 @@\n-      addApplicationAttempt(ApplicationAttemptId applicationAttemptId,\n-          String queueName, String user) {\n+  private synchronized void addApplicationAttempt(\n+      ApplicationAttemptId applicationAttemptId) {\n+    SchedulerApplication application \u003d\n+        applications.get(applicationAttemptId.getApplicationId());\n+    CSQueue queue \u003d (CSQueue) application.getQueue();\n \n-    // Sanity checks\n-    CSQueue queue \u003d getQueue(queueName);\n-    if (queue \u003d\u003d null) {\n-      String message \u003d \"Application \" + applicationAttemptId + \n-      \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n-      this.rmContext.getDispatcher().getEventHandler().handle(\n-          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n-      return;\n-    }\n-    if (!(queue instanceof LeafQueue)) {\n-      String message \u003d \"Application \" + applicationAttemptId + \n-          \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n-      this.rmContext.getDispatcher().getEventHandler().handle(\n-          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n-      return;\n-    }\n-\n-    // TODO: Fix store\n-    FiCaSchedulerApp SchedulerApp \u003d \n-        new FiCaSchedulerApp(applicationAttemptId, user, queue, \n-            queue.getActiveUsersManager(), rmContext);\n-\n-    // Submit to the queue\n-    try {\n-      queue.submitApplication(SchedulerApp, user, queueName);\n-    } catch (AccessControlException ace) {\n-      LOG.info(\"Failed to submit application \" + applicationAttemptId + \n-          \" to queue \" + queueName + \" from user \" + user, ace);\n-      this.rmContext.getDispatcher().getEventHandler().handle(\n-          new RMAppAttemptRejectedEvent(applicationAttemptId, \n-              ace.toString()));\n-      return;\n-    }\n-\n-    applications.put(applicationAttemptId, SchedulerApp);\n-\n-    LOG.info(\"Application Submission: \" + applicationAttemptId + \n-        \", user: \" + user +\n-        \" queue: \" + queue +\n-        \", currently active: \" + applications.size());\n-\n+    FiCaSchedulerApp SchedulerApp \u003d\n+        new FiCaSchedulerApp(applicationAttemptId, application.getUser(),\n+          queue, queue.getActiveUsersManager(), rmContext);\n+    appAttempts.put(applicationAttemptId, SchedulerApp);\n+    queue.submitApplicationAttempt(SchedulerApp, application.getUser());\n+    LOG.info(\"Added Application Attempt \" + applicationAttemptId\n+        + \" to scheduler from user \" + application.getUser() + \" in queue \"\n+        + queue.getQueueName());\n     rmContext.getDispatcher().getEventHandler().handle(\n-        new RMAppAttemptEvent(applicationAttemptId,\n-            RMAppAttemptEventType.APP_ACCEPTED));\n+      new RMAppAttemptEvent(applicationAttemptId,\n+          RMAppAttemptEventType.ATTEMPT_ADDED));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized void addApplicationAttempt(\n      ApplicationAttemptId applicationAttemptId) {\n    SchedulerApplication application \u003d\n        applications.get(applicationAttemptId.getApplicationId());\n    CSQueue queue \u003d (CSQueue) application.getQueue();\n\n    FiCaSchedulerApp SchedulerApp \u003d\n        new FiCaSchedulerApp(applicationAttemptId, application.getUser(),\n          queue, queue.getActiveUsersManager(), rmContext);\n    appAttempts.put(applicationAttemptId, SchedulerApp);\n    queue.submitApplicationAttempt(SchedulerApp, application.getUser());\n    LOG.info(\"Added Application Attempt \" + applicationAttemptId\n        + \" to scheduler from user \" + application.getUser() + \" in queue \"\n        + queue.getQueueName());\n    rmContext.getDispatcher().getEventHandler().handle(\n      new RMAppAttemptEvent(applicationAttemptId,\n          RMAppAttemptEventType.ATTEMPT_ADDED));\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {
            "oldValue": "[applicationAttemptId-ApplicationAttemptId, queueName-String, user-String]",
            "newValue": "[applicationAttemptId-ApplicationAttemptId]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1493. Changed ResourceManager and Scheduler interfacing to recognize app-attempts separately from apps. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1554896 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "02/01/14 12:19 PM",
          "commitName": "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "12/12/13 5:44 PM",
          "commitNameOld": "28db28d491b4e3e3ddf440db4cebab8c0ad6b7f3",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 20.77,
          "commitsBetweenForRepo": 83,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,18 @@\n-      addApplicationAttempt(ApplicationAttemptId applicationAttemptId,\n-          String queueName, String user) {\n+  private synchronized void addApplicationAttempt(\n+      ApplicationAttemptId applicationAttemptId) {\n+    SchedulerApplication application \u003d\n+        applications.get(applicationAttemptId.getApplicationId());\n+    CSQueue queue \u003d (CSQueue) application.getQueue();\n \n-    // Sanity checks\n-    CSQueue queue \u003d getQueue(queueName);\n-    if (queue \u003d\u003d null) {\n-      String message \u003d \"Application \" + applicationAttemptId + \n-      \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n-      this.rmContext.getDispatcher().getEventHandler().handle(\n-          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n-      return;\n-    }\n-    if (!(queue instanceof LeafQueue)) {\n-      String message \u003d \"Application \" + applicationAttemptId + \n-          \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n-      this.rmContext.getDispatcher().getEventHandler().handle(\n-          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n-      return;\n-    }\n-\n-    // TODO: Fix store\n-    FiCaSchedulerApp SchedulerApp \u003d \n-        new FiCaSchedulerApp(applicationAttemptId, user, queue, \n-            queue.getActiveUsersManager(), rmContext);\n-\n-    // Submit to the queue\n-    try {\n-      queue.submitApplication(SchedulerApp, user, queueName);\n-    } catch (AccessControlException ace) {\n-      LOG.info(\"Failed to submit application \" + applicationAttemptId + \n-          \" to queue \" + queueName + \" from user \" + user, ace);\n-      this.rmContext.getDispatcher().getEventHandler().handle(\n-          new RMAppAttemptRejectedEvent(applicationAttemptId, \n-              ace.toString()));\n-      return;\n-    }\n-\n-    applications.put(applicationAttemptId, SchedulerApp);\n-\n-    LOG.info(\"Application Submission: \" + applicationAttemptId + \n-        \", user: \" + user +\n-        \" queue: \" + queue +\n-        \", currently active: \" + applications.size());\n-\n+    FiCaSchedulerApp SchedulerApp \u003d\n+        new FiCaSchedulerApp(applicationAttemptId, application.getUser(),\n+          queue, queue.getActiveUsersManager(), rmContext);\n+    appAttempts.put(applicationAttemptId, SchedulerApp);\n+    queue.submitApplicationAttempt(SchedulerApp, application.getUser());\n+    LOG.info(\"Added Application Attempt \" + applicationAttemptId\n+        + \" to scheduler from user \" + application.getUser() + \" in queue \"\n+        + queue.getQueueName());\n     rmContext.getDispatcher().getEventHandler().handle(\n-        new RMAppAttemptEvent(applicationAttemptId,\n-            RMAppAttemptEventType.APP_ACCEPTED));\n+      new RMAppAttemptEvent(applicationAttemptId,\n+          RMAppAttemptEventType.ATTEMPT_ADDED));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized void addApplicationAttempt(\n      ApplicationAttemptId applicationAttemptId) {\n    SchedulerApplication application \u003d\n        applications.get(applicationAttemptId.getApplicationId());\n    CSQueue queue \u003d (CSQueue) application.getQueue();\n\n    FiCaSchedulerApp SchedulerApp \u003d\n        new FiCaSchedulerApp(applicationAttemptId, application.getUser(),\n          queue, queue.getActiveUsersManager(), rmContext);\n    appAttempts.put(applicationAttemptId, SchedulerApp);\n    queue.submitApplicationAttempt(SchedulerApp, application.getUser());\n    LOG.info(\"Added Application Attempt \" + applicationAttemptId\n        + \" to scheduler from user \" + application.getUser() + \" in queue \"\n        + queue.getQueueName());\n    rmContext.getDispatcher().getEventHandler().handle(\n      new RMAppAttemptEvent(applicationAttemptId,\n          RMAppAttemptEventType.ATTEMPT_ADDED));\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "28db28d491b4e3e3ddf440db4cebab8c0ad6b7f3": {
      "type": "Yrename",
      "commitMessage": "YARN-1311. Fixed app specific scheduler-events\u0027 names to be app-attempt based. Contributed by Vinod Kumar Vavilapalli\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550613 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/12/13 5:44 PM",
      "commitName": "28db28d491b4e3e3ddf440db4cebab8c0ad6b7f3",
      "commitAuthor": "Jian He",
      "commitDateOld": "12/12/13 3:45 PM",
      "commitNameOld": "791e43c53b0be23b03d9b3f7d45a0df615eb90da",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n-      addApplication(ApplicationAttemptId applicationAttemptId,\n+      addApplicationAttempt(ApplicationAttemptId applicationAttemptId,\n           String queueName, String user) {\n \n     // Sanity checks\n     CSQueue queue \u003d getQueue(queueName);\n     if (queue \u003d\u003d null) {\n       String message \u003d \"Application \" + applicationAttemptId + \n       \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n       this.rmContext.getDispatcher().getEventHandler().handle(\n           new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n       return;\n     }\n     if (!(queue instanceof LeafQueue)) {\n       String message \u003d \"Application \" + applicationAttemptId + \n           \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n       this.rmContext.getDispatcher().getEventHandler().handle(\n           new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n       return;\n     }\n \n     // TODO: Fix store\n     FiCaSchedulerApp SchedulerApp \u003d \n         new FiCaSchedulerApp(applicationAttemptId, user, queue, \n             queue.getActiveUsersManager(), rmContext);\n \n     // Submit to the queue\n     try {\n       queue.submitApplication(SchedulerApp, user, queueName);\n     } catch (AccessControlException ace) {\n       LOG.info(\"Failed to submit application \" + applicationAttemptId + \n           \" to queue \" + queueName + \" from user \" + user, ace);\n       this.rmContext.getDispatcher().getEventHandler().handle(\n           new RMAppAttemptRejectedEvent(applicationAttemptId, \n               ace.toString()));\n       return;\n     }\n \n     applications.put(applicationAttemptId, SchedulerApp);\n \n     LOG.info(\"Application Submission: \" + applicationAttemptId + \n         \", user: \" + user +\n         \" queue: \" + queue +\n         \", currently active: \" + applications.size());\n \n     rmContext.getDispatcher().getEventHandler().handle(\n         new RMAppAttemptEvent(applicationAttemptId,\n             RMAppAttemptEventType.APP_ACCEPTED));\n   }\n\\ No newline at end of file\n",
      "actualSource": "      addApplicationAttempt(ApplicationAttemptId applicationAttemptId,\n          String queueName, String user) {\n\n    // Sanity checks\n    CSQueue queue \u003d getQueue(queueName);\n    if (queue \u003d\u003d null) {\n      String message \u003d \"Application \" + applicationAttemptId + \n      \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n      return;\n    }\n    if (!(queue instanceof LeafQueue)) {\n      String message \u003d \"Application \" + applicationAttemptId + \n          \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n      return;\n    }\n\n    // TODO: Fix store\n    FiCaSchedulerApp SchedulerApp \u003d \n        new FiCaSchedulerApp(applicationAttemptId, user, queue, \n            queue.getActiveUsersManager(), rmContext);\n\n    // Submit to the queue\n    try {\n      queue.submitApplication(SchedulerApp, user, queueName);\n    } catch (AccessControlException ace) {\n      LOG.info(\"Failed to submit application \" + applicationAttemptId + \n          \" to queue \" + queueName + \" from user \" + user, ace);\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, \n              ace.toString()));\n      return;\n    }\n\n    applications.put(applicationAttemptId, SchedulerApp);\n\n    LOG.info(\"Application Submission: \" + applicationAttemptId + \n        \", user: \" + user +\n        \" queue: \" + queue +\n        \", currently active: \" + applications.size());\n\n    rmContext.getDispatcher().getEventHandler().handle(\n        new RMAppAttemptEvent(applicationAttemptId,\n            RMAppAttemptEventType.APP_ACCEPTED));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {
        "oldValue": "addApplication",
        "newValue": "addApplicationAttempt"
      }
    },
    "791e43c53b0be23b03d9b3f7d45a0df615eb90da": {
      "type": "Yrename",
      "commitMessage": "Reverting YARN-1311. Fixed app specific scheduler-events\u0027 names to be app-attempt based. Contributed by Vinod Kumar Vavilapalli\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550594 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/12/13 3:45 PM",
      "commitName": "791e43c53b0be23b03d9b3f7d45a0df615eb90da",
      "commitAuthor": "Jian He",
      "commitDateOld": "12/12/13 3:07 PM",
      "commitNameOld": "38c32ed239d45051f5e4a51e3f29b201c17a4288",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n-      addApplicationAttempt(ApplicationAttemptId applicationAttemptId,\n+      addApplication(ApplicationAttemptId applicationAttemptId,\n           String queueName, String user) {\n \n     // Sanity checks\n     CSQueue queue \u003d getQueue(queueName);\n     if (queue \u003d\u003d null) {\n       String message \u003d \"Application \" + applicationAttemptId + \n       \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n       this.rmContext.getDispatcher().getEventHandler().handle(\n           new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n       return;\n     }\n     if (!(queue instanceof LeafQueue)) {\n       String message \u003d \"Application \" + applicationAttemptId + \n           \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n       this.rmContext.getDispatcher().getEventHandler().handle(\n           new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n       return;\n     }\n \n     // TODO: Fix store\n     FiCaSchedulerApp SchedulerApp \u003d \n         new FiCaSchedulerApp(applicationAttemptId, user, queue, \n             queue.getActiveUsersManager(), rmContext);\n \n     // Submit to the queue\n     try {\n       queue.submitApplication(SchedulerApp, user, queueName);\n     } catch (AccessControlException ace) {\n       LOG.info(\"Failed to submit application \" + applicationAttemptId + \n           \" to queue \" + queueName + \" from user \" + user, ace);\n       this.rmContext.getDispatcher().getEventHandler().handle(\n           new RMAppAttemptRejectedEvent(applicationAttemptId, \n               ace.toString()));\n       return;\n     }\n \n     applications.put(applicationAttemptId, SchedulerApp);\n \n     LOG.info(\"Application Submission: \" + applicationAttemptId + \n         \", user: \" + user +\n         \" queue: \" + queue +\n         \", currently active: \" + applications.size());\n \n     rmContext.getDispatcher().getEventHandler().handle(\n         new RMAppAttemptEvent(applicationAttemptId,\n             RMAppAttemptEventType.APP_ACCEPTED));\n   }\n\\ No newline at end of file\n",
      "actualSource": "      addApplication(ApplicationAttemptId applicationAttemptId,\n          String queueName, String user) {\n\n    // Sanity checks\n    CSQueue queue \u003d getQueue(queueName);\n    if (queue \u003d\u003d null) {\n      String message \u003d \"Application \" + applicationAttemptId + \n      \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n      return;\n    }\n    if (!(queue instanceof LeafQueue)) {\n      String message \u003d \"Application \" + applicationAttemptId + \n          \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n      return;\n    }\n\n    // TODO: Fix store\n    FiCaSchedulerApp SchedulerApp \u003d \n        new FiCaSchedulerApp(applicationAttemptId, user, queue, \n            queue.getActiveUsersManager(), rmContext);\n\n    // Submit to the queue\n    try {\n      queue.submitApplication(SchedulerApp, user, queueName);\n    } catch (AccessControlException ace) {\n      LOG.info(\"Failed to submit application \" + applicationAttemptId + \n          \" to queue \" + queueName + \" from user \" + user, ace);\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, \n              ace.toString()));\n      return;\n    }\n\n    applications.put(applicationAttemptId, SchedulerApp);\n\n    LOG.info(\"Application Submission: \" + applicationAttemptId + \n        \", user: \" + user +\n        \" queue: \" + queue +\n        \", currently active: \" + applications.size());\n\n    rmContext.getDispatcher().getEventHandler().handle(\n        new RMAppAttemptEvent(applicationAttemptId,\n            RMAppAttemptEventType.APP_ACCEPTED));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {
        "oldValue": "addApplicationAttempt",
        "newValue": "addApplication"
      }
    },
    "38c32ed239d45051f5e4a51e3f29b201c17a4288": {
      "type": "Yrename",
      "commitMessage": "YARN-1311. Fixed app specific scheduler-events\u0027 names to be app-attempt based. Contributed by Vinod Kumar Vavilapalli\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550579 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/12/13 3:07 PM",
      "commitName": "38c32ed239d45051f5e4a51e3f29b201c17a4288",
      "commitAuthor": "Jian He",
      "commitDateOld": "07/12/13 7:09 PM",
      "commitNameOld": "e1d3670f4c233696dc673c37b578ce46b44a6876",
      "commitAuthorOld": "Sanford Ryza",
      "daysBetweenCommits": 4.83,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n-      addApplication(ApplicationAttemptId applicationAttemptId,\n+      addApplicationAttempt(ApplicationAttemptId applicationAttemptId,\n           String queueName, String user) {\n \n     // Sanity checks\n     CSQueue queue \u003d getQueue(queueName);\n     if (queue \u003d\u003d null) {\n       String message \u003d \"Application \" + applicationAttemptId + \n       \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n       this.rmContext.getDispatcher().getEventHandler().handle(\n           new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n       return;\n     }\n     if (!(queue instanceof LeafQueue)) {\n       String message \u003d \"Application \" + applicationAttemptId + \n           \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n       this.rmContext.getDispatcher().getEventHandler().handle(\n           new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n       return;\n     }\n \n     // TODO: Fix store\n     FiCaSchedulerApp SchedulerApp \u003d \n         new FiCaSchedulerApp(applicationAttemptId, user, queue, \n             queue.getActiveUsersManager(), rmContext);\n \n     // Submit to the queue\n     try {\n       queue.submitApplication(SchedulerApp, user, queueName);\n     } catch (AccessControlException ace) {\n       LOG.info(\"Failed to submit application \" + applicationAttemptId + \n           \" to queue \" + queueName + \" from user \" + user, ace);\n       this.rmContext.getDispatcher().getEventHandler().handle(\n           new RMAppAttemptRejectedEvent(applicationAttemptId, \n               ace.toString()));\n       return;\n     }\n \n     applications.put(applicationAttemptId, SchedulerApp);\n \n     LOG.info(\"Application Submission: \" + applicationAttemptId + \n         \", user: \" + user +\n         \" queue: \" + queue +\n         \", currently active: \" + applications.size());\n \n     rmContext.getDispatcher().getEventHandler().handle(\n         new RMAppAttemptEvent(applicationAttemptId,\n             RMAppAttemptEventType.APP_ACCEPTED));\n   }\n\\ No newline at end of file\n",
      "actualSource": "      addApplicationAttempt(ApplicationAttemptId applicationAttemptId,\n          String queueName, String user) {\n\n    // Sanity checks\n    CSQueue queue \u003d getQueue(queueName);\n    if (queue \u003d\u003d null) {\n      String message \u003d \"Application \" + applicationAttemptId + \n      \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n      return;\n    }\n    if (!(queue instanceof LeafQueue)) {\n      String message \u003d \"Application \" + applicationAttemptId + \n          \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n      return;\n    }\n\n    // TODO: Fix store\n    FiCaSchedulerApp SchedulerApp \u003d \n        new FiCaSchedulerApp(applicationAttemptId, user, queue, \n            queue.getActiveUsersManager(), rmContext);\n\n    // Submit to the queue\n    try {\n      queue.submitApplication(SchedulerApp, user, queueName);\n    } catch (AccessControlException ace) {\n      LOG.info(\"Failed to submit application \" + applicationAttemptId + \n          \" to queue \" + queueName + \" from user \" + user, ace);\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, \n              ace.toString()));\n      return;\n    }\n\n    applications.put(applicationAttemptId, SchedulerApp);\n\n    LOG.info(\"Application Submission: \" + applicationAttemptId + \n        \", user: \" + user +\n        \" queue: \" + queue +\n        \", currently active: \" + applications.size());\n\n    rmContext.getDispatcher().getEventHandler().handle(\n        new RMAppAttemptEvent(applicationAttemptId,\n            RMAppAttemptEventType.APP_ACCEPTED));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {
        "oldValue": "addApplication",
        "newValue": "addApplicationAttempt"
      }
    },
    "1943fdbec613715f3cdc3ca60cbd273115f28299": {
      "type": "Ybodychange",
      "commitMessage": "YARN-229. Remove old unused RM recovery code. Contributed by Bikas Saha.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1415029 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/11/12 5:56 PM",
      "commitName": "1943fdbec613715f3cdc3ca60cbd273115f28299",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "23/10/12 2:06 PM",
      "commitNameOld": "88d326f0a411442b75d1a95425f150621b51da59",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 36.2,
      "commitsBetweenForRepo": 178,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n       addApplication(ApplicationAttemptId applicationAttemptId,\n           String queueName, String user) {\n \n     // Sanity checks\n     CSQueue queue \u003d getQueue(queueName);\n     if (queue \u003d\u003d null) {\n       String message \u003d \"Application \" + applicationAttemptId + \n       \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n       this.rmContext.getDispatcher().getEventHandler().handle(\n           new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n       return;\n     }\n     if (!(queue instanceof LeafQueue)) {\n       String message \u003d \"Application \" + applicationAttemptId + \n           \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n       this.rmContext.getDispatcher().getEventHandler().handle(\n           new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n       return;\n     }\n \n     // TODO: Fix store\n     FiCaSchedulerApp SchedulerApp \u003d \n         new FiCaSchedulerApp(applicationAttemptId, user, queue, \n-            queue.getActiveUsersManager(), rmContext, null);\n+            queue.getActiveUsersManager(), rmContext);\n \n     // Submit to the queue\n     try {\n       queue.submitApplication(SchedulerApp, user, queueName);\n     } catch (AccessControlException ace) {\n       LOG.info(\"Failed to submit application \" + applicationAttemptId + \n           \" to queue \" + queueName + \" from user \" + user, ace);\n       this.rmContext.getDispatcher().getEventHandler().handle(\n           new RMAppAttemptRejectedEvent(applicationAttemptId, \n               ace.toString()));\n       return;\n     }\n \n     applications.put(applicationAttemptId, SchedulerApp);\n \n     LOG.info(\"Application Submission: \" + applicationAttemptId + \n         \", user: \" + user +\n         \" queue: \" + queue +\n         \", currently active: \" + applications.size());\n \n     rmContext.getDispatcher().getEventHandler().handle(\n         new RMAppAttemptEvent(applicationAttemptId,\n             RMAppAttemptEventType.APP_ACCEPTED));\n   }\n\\ No newline at end of file\n",
      "actualSource": "      addApplication(ApplicationAttemptId applicationAttemptId,\n          String queueName, String user) {\n\n    // Sanity checks\n    CSQueue queue \u003d getQueue(queueName);\n    if (queue \u003d\u003d null) {\n      String message \u003d \"Application \" + applicationAttemptId + \n      \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n      return;\n    }\n    if (!(queue instanceof LeafQueue)) {\n      String message \u003d \"Application \" + applicationAttemptId + \n          \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n      return;\n    }\n\n    // TODO: Fix store\n    FiCaSchedulerApp SchedulerApp \u003d \n        new FiCaSchedulerApp(applicationAttemptId, user, queue, \n            queue.getActiveUsersManager(), rmContext);\n\n    // Submit to the queue\n    try {\n      queue.submitApplication(SchedulerApp, user, queueName);\n    } catch (AccessControlException ace) {\n      LOG.info(\"Failed to submit application \" + applicationAttemptId + \n          \" to queue \" + queueName + \" from user \" + user, ace);\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, \n              ace.toString()));\n      return;\n    }\n\n    applications.put(applicationAttemptId, SchedulerApp);\n\n    LOG.info(\"Application Submission: \" + applicationAttemptId + \n        \", user: \" + user +\n        \" queue: \" + queue +\n        \", currently active: \" + applications.size());\n\n    rmContext.getDispatcher().getEventHandler().handle(\n        new RMAppAttemptEvent(applicationAttemptId,\n            RMAppAttemptEventType.APP_ACCEPTED));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "      addApplication(ApplicationAttemptId applicationAttemptId,\n          String queueName, String user) {\n\n    // Sanity checks\n    CSQueue queue \u003d getQueue(queueName);\n    if (queue \u003d\u003d null) {\n      String message \u003d \"Application \" + applicationAttemptId + \n      \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n      return;\n    }\n    if (!(queue instanceof LeafQueue)) {\n      String message \u003d \"Application \" + applicationAttemptId + \n          \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n      return;\n    }\n\n    // TODO: Fix store\n    FiCaSchedulerApp SchedulerApp \u003d \n        new FiCaSchedulerApp(applicationAttemptId, user, queue, \n            queue.getActiveUsersManager(), rmContext, null);\n\n    // Submit to the queue\n    try {\n      queue.submitApplication(SchedulerApp, user, queueName);\n    } catch (AccessControlException ace) {\n      LOG.info(\"Failed to submit application \" + applicationAttemptId + \n          \" to queue \" + queueName + \" from user \" + user, ace);\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, \n              ace.toString()));\n      return;\n    }\n\n    applications.put(applicationAttemptId, SchedulerApp);\n\n    LOG.info(\"Application Submission: \" + applicationAttemptId + \n        \", user: \" + user +\n        \" queue: \" + queue +\n        \", currently active: \" + applications.size());\n\n    rmContext.getDispatcher().getEventHandler().handle(\n        new RMAppAttemptEvent(applicationAttemptId,\n            RMAppAttemptEventType.APP_ACCEPTED));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java"
      }
    },
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4440. Changed SchedulerApp and SchedulerNode to be a minimal interface to allow schedulers to maintain their own.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/12 6:43 PM",
      "commitName": "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "09/03/12 3:34 PM",
      "commitNameOld": "ed4c222d5c0aeb4a46a2dd8a6342c85e88f31d3b",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 129.09,
      "commitsBetweenForRepo": 802,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n       addApplication(ApplicationAttemptId applicationAttemptId,\n           String queueName, String user) {\n \n     // Sanity checks\n     CSQueue queue \u003d getQueue(queueName);\n     if (queue \u003d\u003d null) {\n       String message \u003d \"Application \" + applicationAttemptId + \n       \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n       this.rmContext.getDispatcher().getEventHandler().handle(\n           new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n       return;\n     }\n     if (!(queue instanceof LeafQueue)) {\n       String message \u003d \"Application \" + applicationAttemptId + \n           \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n       this.rmContext.getDispatcher().getEventHandler().handle(\n           new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n       return;\n     }\n \n     // TODO: Fix store\n-    SchedulerApp SchedulerApp \u003d \n-        new SchedulerApp(applicationAttemptId, user, queue, \n+    FiCaSchedulerApp SchedulerApp \u003d \n+        new FiCaSchedulerApp(applicationAttemptId, user, queue, \n             queue.getActiveUsersManager(), rmContext, null);\n \n     // Submit to the queue\n     try {\n       queue.submitApplication(SchedulerApp, user, queueName);\n     } catch (AccessControlException ace) {\n       LOG.info(\"Failed to submit application \" + applicationAttemptId + \n           \" to queue \" + queueName + \" from user \" + user, ace);\n       this.rmContext.getDispatcher().getEventHandler().handle(\n           new RMAppAttemptRejectedEvent(applicationAttemptId, \n               ace.toString()));\n       return;\n     }\n \n     applications.put(applicationAttemptId, SchedulerApp);\n \n     LOG.info(\"Application Submission: \" + applicationAttemptId + \n         \", user: \" + user +\n         \" queue: \" + queue +\n         \", currently active: \" + applications.size());\n \n     rmContext.getDispatcher().getEventHandler().handle(\n         new RMAppAttemptEvent(applicationAttemptId,\n             RMAppAttemptEventType.APP_ACCEPTED));\n   }\n\\ No newline at end of file\n",
      "actualSource": "      addApplication(ApplicationAttemptId applicationAttemptId,\n          String queueName, String user) {\n\n    // Sanity checks\n    CSQueue queue \u003d getQueue(queueName);\n    if (queue \u003d\u003d null) {\n      String message \u003d \"Application \" + applicationAttemptId + \n      \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n      return;\n    }\n    if (!(queue instanceof LeafQueue)) {\n      String message \u003d \"Application \" + applicationAttemptId + \n          \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n      return;\n    }\n\n    // TODO: Fix store\n    FiCaSchedulerApp SchedulerApp \u003d \n        new FiCaSchedulerApp(applicationAttemptId, user, queue, \n            queue.getActiveUsersManager(), rmContext, null);\n\n    // Submit to the queue\n    try {\n      queue.submitApplication(SchedulerApp, user, queueName);\n    } catch (AccessControlException ace) {\n      LOG.info(\"Failed to submit application \" + applicationAttemptId + \n          \" to queue \" + queueName + \" from user \" + user, ace);\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, \n              ace.toString()));\n      return;\n    }\n\n    applications.put(applicationAttemptId, SchedulerApp);\n\n    LOG.info(\"Application Submission: \" + applicationAttemptId + \n        \", user: \" + user +\n        \" queue: \" + queue +\n        \", currently active: \" + applications.size());\n\n    rmContext.getDispatcher().getEventHandler().handle(\n        new RMAppAttemptEvent(applicationAttemptId,\n            RMAppAttemptEventType.APP_ACCEPTED));\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "5262b7ba4d018562d4e7d60772af4ddc3d770a23": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3732. Modified CapacityScheduler to use only users with pending requests for computing user-limits. Contributed by Arun C Murthy.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1236953 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/01/12 5:32 PM",
      "commitName": "5262b7ba4d018562d4e7d60772af4ddc3d770a23",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "13/01/12 1:15 PM",
      "commitNameOld": "78ff0b720e0418785d53802a1b4e72085c1a3556",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 14.18,
      "commitsBetweenForRepo": 77,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,48 @@\n       addApplication(ApplicationAttemptId applicationAttemptId,\n           String queueName, String user) {\n \n     // Sanity checks\n     CSQueue queue \u003d getQueue(queueName);\n     if (queue \u003d\u003d null) {\n       String message \u003d \"Application \" + applicationAttemptId + \n       \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n       this.rmContext.getDispatcher().getEventHandler().handle(\n           new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n       return;\n     }\n     if (!(queue instanceof LeafQueue)) {\n       String message \u003d \"Application \" + applicationAttemptId + \n           \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n       this.rmContext.getDispatcher().getEventHandler().handle(\n           new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n       return;\n     }\n \n     // TODO: Fix store\n     SchedulerApp SchedulerApp \u003d \n-        new SchedulerApp(applicationAttemptId, user, queue, rmContext, null);\n+        new SchedulerApp(applicationAttemptId, user, queue, \n+            queue.getActiveUsersManager(), rmContext, null);\n \n     // Submit to the queue\n     try {\n       queue.submitApplication(SchedulerApp, user, queueName);\n     } catch (AccessControlException ace) {\n       LOG.info(\"Failed to submit application \" + applicationAttemptId + \n           \" to queue \" + queueName + \" from user \" + user, ace);\n       this.rmContext.getDispatcher().getEventHandler().handle(\n           new RMAppAttemptRejectedEvent(applicationAttemptId, \n               ace.toString()));\n       return;\n     }\n \n     applications.put(applicationAttemptId, SchedulerApp);\n \n     LOG.info(\"Application Submission: \" + applicationAttemptId + \n         \", user: \" + user +\n         \" queue: \" + queue +\n         \", currently active: \" + applications.size());\n \n     rmContext.getDispatcher().getEventHandler().handle(\n         new RMAppAttemptEvent(applicationAttemptId,\n             RMAppAttemptEventType.APP_ACCEPTED));\n   }\n\\ No newline at end of file\n",
      "actualSource": "      addApplication(ApplicationAttemptId applicationAttemptId,\n          String queueName, String user) {\n\n    // Sanity checks\n    CSQueue queue \u003d getQueue(queueName);\n    if (queue \u003d\u003d null) {\n      String message \u003d \"Application \" + applicationAttemptId + \n      \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n      return;\n    }\n    if (!(queue instanceof LeafQueue)) {\n      String message \u003d \"Application \" + applicationAttemptId + \n          \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n      return;\n    }\n\n    // TODO: Fix store\n    SchedulerApp SchedulerApp \u003d \n        new SchedulerApp(applicationAttemptId, user, queue, \n            queue.getActiveUsersManager(), rmContext, null);\n\n    // Submit to the queue\n    try {\n      queue.submitApplication(SchedulerApp, user, queueName);\n    } catch (AccessControlException ace) {\n      LOG.info(\"Failed to submit application \" + applicationAttemptId + \n          \" to queue \" + queueName + \" from user \" + user, ace);\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, \n              ace.toString()));\n      return;\n    }\n\n    applications.put(applicationAttemptId, SchedulerApp);\n\n    LOG.info(\"Application Submission: \" + applicationAttemptId + \n        \", user: \" + user +\n        \" queue: \" + queue +\n        \", currently active: \" + applications.size());\n\n    rmContext.getDispatcher().getEventHandler().handle(\n        new RMAppAttemptEvent(applicationAttemptId,\n            RMAppAttemptEventType.APP_ACCEPTED));\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "1f46b991da9b91585608a0babd3eda39485dce09": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2908. Fix all findbugs warnings. Contributed by Vinod K V. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1166838 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/09/11 11:26 AM",
      "commitName": "1f46b991da9b91585608a0babd3eda39485dce09",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "06/09/11 10:54 PM",
      "commitNameOld": "0ecba04727b5c31182d29511646c8d3e6441300f",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 1.52,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n       addApplication(ApplicationAttemptId applicationAttemptId,\n           String queueName, String user) {\n \n     // Sanity checks\n-    Queue queue \u003d getQueue(queueName);\n+    CSQueue queue \u003d getQueue(queueName);\n     if (queue \u003d\u003d null) {\n       String message \u003d \"Application \" + applicationAttemptId + \n       \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n       this.rmContext.getDispatcher().getEventHandler().handle(\n           new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n       return;\n     }\n     if (!(queue instanceof LeafQueue)) {\n       String message \u003d \"Application \" + applicationAttemptId + \n           \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n       this.rmContext.getDispatcher().getEventHandler().handle(\n           new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n       return;\n     }\n \n     // TODO: Fix store\n     SchedulerApp SchedulerApp \u003d \n         new SchedulerApp(applicationAttemptId, user, queue, rmContext, null);\n \n     // Submit to the queue\n     try {\n       queue.submitApplication(SchedulerApp, user, queueName);\n     } catch (AccessControlException ace) {\n       LOG.info(\"Failed to submit application \" + applicationAttemptId + \n           \" to queue \" + queueName + \" from user \" + user, ace);\n       this.rmContext.getDispatcher().getEventHandler().handle(\n           new RMAppAttemptRejectedEvent(applicationAttemptId, \n               ace.toString()));\n       return;\n     }\n \n     applications.put(applicationAttemptId, SchedulerApp);\n \n     LOG.info(\"Application Submission: \" + applicationAttemptId + \n         \", user: \" + user +\n         \" queue: \" + queue +\n         \", currently active: \" + applications.size());\n \n     rmContext.getDispatcher().getEventHandler().handle(\n         new RMAppAttemptEvent(applicationAttemptId,\n             RMAppAttemptEventType.APP_ACCEPTED));\n   }\n\\ No newline at end of file\n",
      "actualSource": "      addApplication(ApplicationAttemptId applicationAttemptId,\n          String queueName, String user) {\n\n    // Sanity checks\n    CSQueue queue \u003d getQueue(queueName);\n    if (queue \u003d\u003d null) {\n      String message \u003d \"Application \" + applicationAttemptId + \n      \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n      return;\n    }\n    if (!(queue instanceof LeafQueue)) {\n      String message \u003d \"Application \" + applicationAttemptId + \n          \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n      return;\n    }\n\n    // TODO: Fix store\n    SchedulerApp SchedulerApp \u003d \n        new SchedulerApp(applicationAttemptId, user, queue, rmContext, null);\n\n    // Submit to the queue\n    try {\n      queue.submitApplication(SchedulerApp, user, queueName);\n    } catch (AccessControlException ace) {\n      LOG.info(\"Failed to submit application \" + applicationAttemptId + \n          \" to queue \" + queueName + \" from user \" + user, ace);\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, \n              ace.toString()));\n      return;\n    }\n\n    applications.put(applicationAttemptId, SchedulerApp);\n\n    LOG.info(\"Application Submission: \" + applicationAttemptId + \n        \", user: \" + user +\n        \" queue: \" + queue +\n        \", currently active: \" + applications.size());\n\n    rmContext.getDispatcher().getEventHandler().handle(\n        new RMAppAttemptEvent(applicationAttemptId,\n            RMAppAttemptEventType.APP_ACCEPTED));\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "0ecba04727b5c31182d29511646c8d3e6441300f": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2938. Log application submission failure in CapacityScheduler\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1166006 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/09/11 10:54 PM",
      "commitName": "0ecba04727b5c31182d29511646c8d3e6441300f",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "06/09/11 6:24 PM",
      "commitNameOld": "cdfabf5ae289836968b3d296668593b9500b6f26",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.19,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,47 @@\n       addApplication(ApplicationAttemptId applicationAttemptId,\n           String queueName, String user) {\n \n     // Sanity checks\n     Queue queue \u003d getQueue(queueName);\n     if (queue \u003d\u003d null) {\n       String message \u003d \"Application \" + applicationAttemptId + \n       \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n       this.rmContext.getDispatcher().getEventHandler().handle(\n           new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n       return;\n     }\n     if (!(queue instanceof LeafQueue)) {\n       String message \u003d \"Application \" + applicationAttemptId + \n           \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n       this.rmContext.getDispatcher().getEventHandler().handle(\n           new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n       return;\n     }\n \n     // TODO: Fix store\n     SchedulerApp SchedulerApp \u003d \n         new SchedulerApp(applicationAttemptId, user, queue, rmContext, null);\n \n     // Submit to the queue\n     try {\n       queue.submitApplication(SchedulerApp, user, queueName);\n     } catch (AccessControlException ace) {\n+      LOG.info(\"Failed to submit application \" + applicationAttemptId + \n+          \" to queue \" + queueName + \" from user \" + user, ace);\n       this.rmContext.getDispatcher().getEventHandler().handle(\n           new RMAppAttemptRejectedEvent(applicationAttemptId, \n               ace.toString()));\n       return;\n     }\n \n     applications.put(applicationAttemptId, SchedulerApp);\n \n     LOG.info(\"Application Submission: \" + applicationAttemptId + \n         \", user: \" + user +\n         \" queue: \" + queue +\n         \", currently active: \" + applications.size());\n \n     rmContext.getDispatcher().getEventHandler().handle(\n         new RMAppAttemptEvent(applicationAttemptId,\n             RMAppAttemptEventType.APP_ACCEPTED));\n   }\n\\ No newline at end of file\n",
      "actualSource": "      addApplication(ApplicationAttemptId applicationAttemptId,\n          String queueName, String user) {\n\n    // Sanity checks\n    Queue queue \u003d getQueue(queueName);\n    if (queue \u003d\u003d null) {\n      String message \u003d \"Application \" + applicationAttemptId + \n      \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n      return;\n    }\n    if (!(queue instanceof LeafQueue)) {\n      String message \u003d \"Application \" + applicationAttemptId + \n          \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n      return;\n    }\n\n    // TODO: Fix store\n    SchedulerApp SchedulerApp \u003d \n        new SchedulerApp(applicationAttemptId, user, queue, rmContext, null);\n\n    // Submit to the queue\n    try {\n      queue.submitApplication(SchedulerApp, user, queueName);\n    } catch (AccessControlException ace) {\n      LOG.info(\"Failed to submit application \" + applicationAttemptId + \n          \" to queue \" + queueName + \" from user \" + user, ace);\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, \n              ace.toString()));\n      return;\n    }\n\n    applications.put(applicationAttemptId, SchedulerApp);\n\n    LOG.info(\"Application Submission: \" + applicationAttemptId + \n        \", user: \" + user +\n        \" queue: \" + queue +\n        \", currently active: \" + applications.size());\n\n    rmContext.getDispatcher().getEventHandler().handle(\n        new RMAppAttemptEvent(applicationAttemptId,\n            RMAppAttemptEventType.APP_ACCEPTED));\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "      addApplication(ApplicationAttemptId applicationAttemptId,\n          String queueName, String user) {\n\n    // Sanity checks\n    Queue queue \u003d getQueue(queueName);\n    if (queue \u003d\u003d null) {\n      String message \u003d \"Application \" + applicationAttemptId + \n      \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n      return;\n    }\n    if (!(queue instanceof LeafQueue)) {\n      String message \u003d \"Application \" + applicationAttemptId + \n          \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n      return;\n    }\n\n    // TODO: Fix store\n    SchedulerApp SchedulerApp \u003d \n        new SchedulerApp(applicationAttemptId, user, queue, rmContext, null);\n\n    // Submit to the queue\n    try {\n      queue.submitApplication(SchedulerApp, user, queueName);\n    } catch (AccessControlException ace) {\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, \n              ace.toString()));\n      return;\n    }\n\n    applications.put(applicationAttemptId, SchedulerApp);\n\n    LOG.info(\"Application Submission: \" + applicationAttemptId + \n        \", user: \" + user +\n        \" queue: \" + queue +\n        \", currently active: \" + applications.size());\n\n    rmContext.getDispatcher().getEventHandler().handle(\n        new RMAppAttemptEvent(applicationAttemptId,\n            RMAppAttemptEventType.APP_ACCEPTED));\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,45 @@\n+      addApplication(ApplicationAttemptId applicationAttemptId,\n+          String queueName, String user) {\n+\n+    // Sanity checks\n+    Queue queue \u003d getQueue(queueName);\n+    if (queue \u003d\u003d null) {\n+      String message \u003d \"Application \" + applicationAttemptId + \n+      \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n+      this.rmContext.getDispatcher().getEventHandler().handle(\n+          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n+      return;\n+    }\n+    if (!(queue instanceof LeafQueue)) {\n+      String message \u003d \"Application \" + applicationAttemptId + \n+          \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n+      this.rmContext.getDispatcher().getEventHandler().handle(\n+          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n+      return;\n+    }\n+\n+    // TODO: Fix store\n+    SchedulerApp SchedulerApp \u003d \n+        new SchedulerApp(applicationAttemptId, user, queue, rmContext, null);\n+\n+    // Submit to the queue\n+    try {\n+      queue.submitApplication(SchedulerApp, user, queueName);\n+    } catch (AccessControlException ace) {\n+      this.rmContext.getDispatcher().getEventHandler().handle(\n+          new RMAppAttemptRejectedEvent(applicationAttemptId, \n+              ace.toString()));\n+      return;\n+    }\n+\n+    applications.put(applicationAttemptId, SchedulerApp);\n+\n+    LOG.info(\"Application Submission: \" + applicationAttemptId + \n+        \", user: \" + user +\n+        \" queue: \" + queue +\n+        \", currently active: \" + applications.size());\n+\n+    rmContext.getDispatcher().getEventHandler().handle(\n+        new RMAppAttemptEvent(applicationAttemptId,\n+            RMAppAttemptEventType.APP_ACCEPTED));\n+  }\n\\ No newline at end of file\n",
      "actualSource": "      addApplication(ApplicationAttemptId applicationAttemptId,\n          String queueName, String user) {\n\n    // Sanity checks\n    Queue queue \u003d getQueue(queueName);\n    if (queue \u003d\u003d null) {\n      String message \u003d \"Application \" + applicationAttemptId + \n      \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n      return;\n    }\n    if (!(queue instanceof LeafQueue)) {\n      String message \u003d \"Application \" + applicationAttemptId + \n          \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n      return;\n    }\n\n    // TODO: Fix store\n    SchedulerApp SchedulerApp \u003d \n        new SchedulerApp(applicationAttemptId, user, queue, rmContext, null);\n\n    // Submit to the queue\n    try {\n      queue.submitApplication(SchedulerApp, user, queueName);\n    } catch (AccessControlException ace) {\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, \n              ace.toString()));\n      return;\n    }\n\n    applications.put(applicationAttemptId, SchedulerApp);\n\n    LOG.info(\"Application Submission: \" + applicationAttemptId + \n        \", user: \" + user +\n        \" queue: \" + queue +\n        \", currently active: \" + applications.size());\n\n    rmContext.getDispatcher().getEventHandler().handle(\n        new RMAppAttemptEvent(applicationAttemptId,\n            RMAppAttemptEventType.APP_ACCEPTED));\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java"
    }
  }
}