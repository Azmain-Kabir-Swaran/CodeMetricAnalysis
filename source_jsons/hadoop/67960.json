{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DistCpUtils.java",
  "functionName": "checksumsAreEqual",
  "functionId": "checksumsAreEqual___sourceFS-FileSystem__source-Path__sourceChecksum-FileChecksum__targetFS-FileSystem__target-Path__sourceLen-long",
  "sourceFilePath": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/util/DistCpUtils.java",
  "functionStartLine": 571,
  "functionEndLine": 590,
  "numCommitsSeen": 57,
  "timeTaken": 3812,
  "changeHistory": [
    "51c64b357d4bd1a0038e61df3d4b8ea0a3ad7449",
    "1976e0066e9ae8852715fa69d8aea3769330e933",
    "067d52b98c1d17a73b142bb53acc8aaa9c041f38",
    "d06948002fb0cabf72cc0d46bf2fa67d45370f67"
  ],
  "changeHistoryShort": {
    "51c64b357d4bd1a0038e61df3d4b8ea0a3ad7449": "Ymultichange(Yparameterchange,Ybodychange)",
    "1976e0066e9ae8852715fa69d8aea3769330e933": "Ybodychange",
    "067d52b98c1d17a73b142bb53acc8aaa9c041f38": "Ymultichange(Yparameterchange,Ybodychange)",
    "d06948002fb0cabf72cc0d46bf2fa67d45370f67": "Yintroduced"
  },
  "changeHistoryDetails": {
    "51c64b357d4bd1a0038e61df3d4b8ea0a3ad7449": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-13660. DistCp job fails when new data is appended in the file while the DistCp copy job is running\n\nThis uses the length of the file known at the start of the copy to determine the amount of data to copy.\n\n* If a file is appended to during the copy, the original bytes are copied.\n* If a file is truncated during a copy, or the attempt to read the data fails with a truncated stream,\n  distcp will now fail. Until now these failures were not detected.\n\nContributed by Mukund Thakur.\n\nChange-Id: I576a49d951fa48d37a45a7e4c82c47488aa8e884\n",
      "commitDate": "24/09/19 3:23 AM",
      "commitName": "51c64b357d4bd1a0038e61df3d4b8ea0a3ad7449",
      "commitAuthor": "Mukund Thakur",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-13660. DistCp job fails when new data is appended in the file while the DistCp copy job is running\n\nThis uses the length of the file known at the start of the copy to determine the amount of data to copy.\n\n* If a file is appended to during the copy, the original bytes are copied.\n* If a file is truncated during a copy, or the attempt to read the data fails with a truncated stream,\n  distcp will now fail. Until now these failures were not detected.\n\nContributed by Mukund Thakur.\n\nChange-Id: I576a49d951fa48d37a45a7e4c82c47488aa8e884\n",
          "commitDate": "24/09/19 3:23 AM",
          "commitName": "51c64b357d4bd1a0038e61df3d4b8ea0a3ad7449",
          "commitAuthor": "Mukund Thakur",
          "commitDateOld": "18/08/19 6:46 PM",
          "commitNameOld": "c765584eb231f8482f5b90b7e8f61f9f7a931d09",
          "commitAuthorOld": "KAI XIE",
          "daysBetweenCommits": 36.36,
          "commitsBetweenForRepo": 313,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,20 @@\n   public static boolean checksumsAreEqual(FileSystem sourceFS, Path source,\n-      FileChecksum sourceChecksum, FileSystem targetFS, Path target)\n+                                          FileChecksum sourceChecksum,\n+                                          FileSystem targetFS,\n+                                          Path target, long sourceLen)\n       throws IOException {\n     FileChecksum targetChecksum \u003d null;\n     try {\n       sourceChecksum \u003d sourceChecksum !\u003d null\n           ? sourceChecksum\n-          : sourceFS.getFileChecksum(source);\n+          : sourceFS.getFileChecksum(source, sourceLen);\n       if (sourceChecksum !\u003d null) {\n         // iff there\u0027s a source checksum, look for one at the destination.\n         targetChecksum \u003d targetFS.getFileChecksum(target);\n       }\n     } catch (IOException e) {\n       LOG.error(\"Unable to retrieve checksum for \" + source + \" or \" + target, e);\n     }\n     return (sourceChecksum \u003d\u003d null || targetChecksum \u003d\u003d null ||\n             sourceChecksum.equals(targetChecksum));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static boolean checksumsAreEqual(FileSystem sourceFS, Path source,\n                                          FileChecksum sourceChecksum,\n                                          FileSystem targetFS,\n                                          Path target, long sourceLen)\n      throws IOException {\n    FileChecksum targetChecksum \u003d null;\n    try {\n      sourceChecksum \u003d sourceChecksum !\u003d null\n          ? sourceChecksum\n          : sourceFS.getFileChecksum(source, sourceLen);\n      if (sourceChecksum !\u003d null) {\n        // iff there\u0027s a source checksum, look for one at the destination.\n        targetChecksum \u003d targetFS.getFileChecksum(target);\n      }\n    } catch (IOException e) {\n      LOG.error(\"Unable to retrieve checksum for \" + source + \" or \" + target, e);\n    }\n    return (sourceChecksum \u003d\u003d null || targetChecksum \u003d\u003d null ||\n            sourceChecksum.equals(targetChecksum));\n  }",
          "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/util/DistCpUtils.java",
          "extendedDetails": {
            "oldValue": "[sourceFS-FileSystem, source-Path, sourceChecksum-FileChecksum, targetFS-FileSystem, target-Path]",
            "newValue": "[sourceFS-FileSystem, source-Path, sourceChecksum-FileChecksum, targetFS-FileSystem, target-Path, sourceLen-long]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-13660. DistCp job fails when new data is appended in the file while the DistCp copy job is running\n\nThis uses the length of the file known at the start of the copy to determine the amount of data to copy.\n\n* If a file is appended to during the copy, the original bytes are copied.\n* If a file is truncated during a copy, or the attempt to read the data fails with a truncated stream,\n  distcp will now fail. Until now these failures were not detected.\n\nContributed by Mukund Thakur.\n\nChange-Id: I576a49d951fa48d37a45a7e4c82c47488aa8e884\n",
          "commitDate": "24/09/19 3:23 AM",
          "commitName": "51c64b357d4bd1a0038e61df3d4b8ea0a3ad7449",
          "commitAuthor": "Mukund Thakur",
          "commitDateOld": "18/08/19 6:46 PM",
          "commitNameOld": "c765584eb231f8482f5b90b7e8f61f9f7a931d09",
          "commitAuthorOld": "KAI XIE",
          "daysBetweenCommits": 36.36,
          "commitsBetweenForRepo": 313,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,20 @@\n   public static boolean checksumsAreEqual(FileSystem sourceFS, Path source,\n-      FileChecksum sourceChecksum, FileSystem targetFS, Path target)\n+                                          FileChecksum sourceChecksum,\n+                                          FileSystem targetFS,\n+                                          Path target, long sourceLen)\n       throws IOException {\n     FileChecksum targetChecksum \u003d null;\n     try {\n       sourceChecksum \u003d sourceChecksum !\u003d null\n           ? sourceChecksum\n-          : sourceFS.getFileChecksum(source);\n+          : sourceFS.getFileChecksum(source, sourceLen);\n       if (sourceChecksum !\u003d null) {\n         // iff there\u0027s a source checksum, look for one at the destination.\n         targetChecksum \u003d targetFS.getFileChecksum(target);\n       }\n     } catch (IOException e) {\n       LOG.error(\"Unable to retrieve checksum for \" + source + \" or \" + target, e);\n     }\n     return (sourceChecksum \u003d\u003d null || targetChecksum \u003d\u003d null ||\n             sourceChecksum.equals(targetChecksum));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static boolean checksumsAreEqual(FileSystem sourceFS, Path source,\n                                          FileChecksum sourceChecksum,\n                                          FileSystem targetFS,\n                                          Path target, long sourceLen)\n      throws IOException {\n    FileChecksum targetChecksum \u003d null;\n    try {\n      sourceChecksum \u003d sourceChecksum !\u003d null\n          ? sourceChecksum\n          : sourceFS.getFileChecksum(source, sourceLen);\n      if (sourceChecksum !\u003d null) {\n        // iff there\u0027s a source checksum, look for one at the destination.\n        targetChecksum \u003d targetFS.getFileChecksum(target);\n      }\n    } catch (IOException e) {\n      LOG.error(\"Unable to retrieve checksum for \" + source + \" or \" + target, e);\n    }\n    return (sourceChecksum \u003d\u003d null || targetChecksum \u003d\u003d null ||\n            sourceChecksum.equals(targetChecksum));\n  }",
          "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/util/DistCpUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "1976e0066e9ae8852715fa69d8aea3769330e933": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15209. DistCp to eliminate needless deletion of files under already-deleted directories.\nContributed by Steve Loughran.\n",
      "commitDate": "15/03/18 11:05 AM",
      "commitName": "1976e0066e9ae8852715fa69d8aea3769330e933",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "13/03/18 11:08 AM",
      "commitNameOld": "45cccadd2e84b99ec56f1cc0e2248dc8fc844f38",
      "commitAuthorOld": "Chris Douglas",
      "daysBetweenCommits": 2.0,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,18 @@\n   public static boolean checksumsAreEqual(FileSystem sourceFS, Path source,\n       FileChecksum sourceChecksum, FileSystem targetFS, Path target)\n       throws IOException {\n     FileChecksum targetChecksum \u003d null;\n     try {\n-      sourceChecksum \u003d sourceChecksum !\u003d null ? sourceChecksum : sourceFS\n-          .getFileChecksum(source);\n-      targetChecksum \u003d targetFS.getFileChecksum(target);\n+      sourceChecksum \u003d sourceChecksum !\u003d null\n+          ? sourceChecksum\n+          : sourceFS.getFileChecksum(source);\n+      if (sourceChecksum !\u003d null) {\n+        // iff there\u0027s a source checksum, look for one at the destination.\n+        targetChecksum \u003d targetFS.getFileChecksum(target);\n+      }\n     } catch (IOException e) {\n       LOG.error(\"Unable to retrieve checksum for \" + source + \" or \" + target, e);\n     }\n     return (sourceChecksum \u003d\u003d null || targetChecksum \u003d\u003d null ||\n             sourceChecksum.equals(targetChecksum));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static boolean checksumsAreEqual(FileSystem sourceFS, Path source,\n      FileChecksum sourceChecksum, FileSystem targetFS, Path target)\n      throws IOException {\n    FileChecksum targetChecksum \u003d null;\n    try {\n      sourceChecksum \u003d sourceChecksum !\u003d null\n          ? sourceChecksum\n          : sourceFS.getFileChecksum(source);\n      if (sourceChecksum !\u003d null) {\n        // iff there\u0027s a source checksum, look for one at the destination.\n        targetChecksum \u003d targetFS.getFileChecksum(target);\n      }\n    } catch (IOException e) {\n      LOG.error(\"Unable to retrieve checksum for \" + source + \" or \" + target, e);\n    }\n    return (sourceChecksum \u003d\u003d null || targetChecksum \u003d\u003d null ||\n            sourceChecksum.equals(targetChecksum));\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/util/DistCpUtils.java",
      "extendedDetails": {}
    },
    "067d52b98c1d17a73b142bb53acc8aaa9c041f38": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-10295. Allow distcp to automatically identify the checksum type of source files and use it for the target. Contributed by Jing Zhao and Laurent Goujon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1563019 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/01/14 3:53 PM",
      "commitName": "067d52b98c1d17a73b142bb53acc8aaa9c041f38",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-10295. Allow distcp to automatically identify the checksum type of source files and use it for the target. Contributed by Jing Zhao and Laurent Goujon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1563019 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "30/01/14 3:53 PM",
          "commitName": "067d52b98c1d17a73b142bb53acc8aaa9c041f38",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "25/01/12 10:36 PM",
          "commitNameOld": "d06948002fb0cabf72cc0d46bf2fa67d45370f67",
          "commitAuthorOld": "Mahadev Konar",
          "daysBetweenCommits": 735.72,
          "commitsBetweenForRepo": 4505,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,14 @@\n   public static boolean checksumsAreEqual(FileSystem sourceFS, Path source,\n-                                   FileSystem targetFS, Path target)\n-                                   throws IOException {\n-    FileChecksum sourceChecksum \u003d null;\n+      FileChecksum sourceChecksum, FileSystem targetFS, Path target)\n+      throws IOException {\n     FileChecksum targetChecksum \u003d null;\n     try {\n-      sourceChecksum \u003d sourceFS.getFileChecksum(source);\n+      sourceChecksum \u003d sourceChecksum !\u003d null ? sourceChecksum : sourceFS\n+          .getFileChecksum(source);\n       targetChecksum \u003d targetFS.getFileChecksum(target);\n     } catch (IOException e) {\n       LOG.error(\"Unable to retrieve checksum for \" + source + \" or \" + target, e);\n     }\n     return (sourceChecksum \u003d\u003d null || targetChecksum \u003d\u003d null ||\n             sourceChecksum.equals(targetChecksum));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static boolean checksumsAreEqual(FileSystem sourceFS, Path source,\n      FileChecksum sourceChecksum, FileSystem targetFS, Path target)\n      throws IOException {\n    FileChecksum targetChecksum \u003d null;\n    try {\n      sourceChecksum \u003d sourceChecksum !\u003d null ? sourceChecksum : sourceFS\n          .getFileChecksum(source);\n      targetChecksum \u003d targetFS.getFileChecksum(target);\n    } catch (IOException e) {\n      LOG.error(\"Unable to retrieve checksum for \" + source + \" or \" + target, e);\n    }\n    return (sourceChecksum \u003d\u003d null || targetChecksum \u003d\u003d null ||\n            sourceChecksum.equals(targetChecksum));\n  }",
          "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/util/DistCpUtils.java",
          "extendedDetails": {
            "oldValue": "[sourceFS-FileSystem, source-Path, targetFS-FileSystem, target-Path]",
            "newValue": "[sourceFS-FileSystem, source-Path, sourceChecksum-FileChecksum, targetFS-FileSystem, target-Path]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-10295. Allow distcp to automatically identify the checksum type of source files and use it for the target. Contributed by Jing Zhao and Laurent Goujon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1563019 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "30/01/14 3:53 PM",
          "commitName": "067d52b98c1d17a73b142bb53acc8aaa9c041f38",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "25/01/12 10:36 PM",
          "commitNameOld": "d06948002fb0cabf72cc0d46bf2fa67d45370f67",
          "commitAuthorOld": "Mahadev Konar",
          "daysBetweenCommits": 735.72,
          "commitsBetweenForRepo": 4505,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,14 @@\n   public static boolean checksumsAreEqual(FileSystem sourceFS, Path source,\n-                                   FileSystem targetFS, Path target)\n-                                   throws IOException {\n-    FileChecksum sourceChecksum \u003d null;\n+      FileChecksum sourceChecksum, FileSystem targetFS, Path target)\n+      throws IOException {\n     FileChecksum targetChecksum \u003d null;\n     try {\n-      sourceChecksum \u003d sourceFS.getFileChecksum(source);\n+      sourceChecksum \u003d sourceChecksum !\u003d null ? sourceChecksum : sourceFS\n+          .getFileChecksum(source);\n       targetChecksum \u003d targetFS.getFileChecksum(target);\n     } catch (IOException e) {\n       LOG.error(\"Unable to retrieve checksum for \" + source + \" or \" + target, e);\n     }\n     return (sourceChecksum \u003d\u003d null || targetChecksum \u003d\u003d null ||\n             sourceChecksum.equals(targetChecksum));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static boolean checksumsAreEqual(FileSystem sourceFS, Path source,\n      FileChecksum sourceChecksum, FileSystem targetFS, Path target)\n      throws IOException {\n    FileChecksum targetChecksum \u003d null;\n    try {\n      sourceChecksum \u003d sourceChecksum !\u003d null ? sourceChecksum : sourceFS\n          .getFileChecksum(source);\n      targetChecksum \u003d targetFS.getFileChecksum(target);\n    } catch (IOException e) {\n      LOG.error(\"Unable to retrieve checksum for \" + source + \" or \" + target, e);\n    }\n    return (sourceChecksum \u003d\u003d null || targetChecksum \u003d\u003d null ||\n            sourceChecksum.equals(targetChecksum));\n  }",
          "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/util/DistCpUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "d06948002fb0cabf72cc0d46bf2fa67d45370f67": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-2765. DistCp Rewrite. (Mithun Radhakrishnan via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1236045 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/01/12 10:36 PM",
      "commitName": "d06948002fb0cabf72cc0d46bf2fa67d45370f67",
      "commitAuthor": "Mahadev Konar",
      "diff": "@@ -0,0 +1,14 @@\n+  public static boolean checksumsAreEqual(FileSystem sourceFS, Path source,\n+                                   FileSystem targetFS, Path target)\n+                                   throws IOException {\n+    FileChecksum sourceChecksum \u003d null;\n+    FileChecksum targetChecksum \u003d null;\n+    try {\n+      sourceChecksum \u003d sourceFS.getFileChecksum(source);\n+      targetChecksum \u003d targetFS.getFileChecksum(target);\n+    } catch (IOException e) {\n+      LOG.error(\"Unable to retrieve checksum for \" + source + \" or \" + target, e);\n+    }\n+    return (sourceChecksum \u003d\u003d null || targetChecksum \u003d\u003d null ||\n+            sourceChecksum.equals(targetChecksum));\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static boolean checksumsAreEqual(FileSystem sourceFS, Path source,\n                                   FileSystem targetFS, Path target)\n                                   throws IOException {\n    FileChecksum sourceChecksum \u003d null;\n    FileChecksum targetChecksum \u003d null;\n    try {\n      sourceChecksum \u003d sourceFS.getFileChecksum(source);\n      targetChecksum \u003d targetFS.getFileChecksum(target);\n    } catch (IOException e) {\n      LOG.error(\"Unable to retrieve checksum for \" + source + \" or \" + target, e);\n    }\n    return (sourceChecksum \u003d\u003d null || targetChecksum \u003d\u003d null ||\n            sourceChecksum.equals(targetChecksum));\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/util/DistCpUtils.java"
    }
  }
}