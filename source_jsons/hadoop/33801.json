{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DockerLinuxContainerRuntime.java",
  "functionName": "handleContainerRemove",
  "functionId": "handleContainerRemove___containerId-String__env-Map__String,String__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
  "functionStartLine": 1348,
  "functionEndLine": 1366,
  "numCommitsSeen": 91,
  "timeTaken": 3667,
  "changeHistory": [
    "2df0a8dcb3dfde15d216481cc1296d97d2cb5d43",
    "7526815e3234ca352854ecfb142a13f1a188d5bd",
    "85585f9eef26baded5b3ef7fcc3283aa37fc362d",
    "3d65dbe032e202361d613344ccc6d9c5f99ba395"
  ],
  "changeHistoryShort": {
    "2df0a8dcb3dfde15d216481cc1296d97d2cb5d43": "Ybodychange",
    "7526815e3234ca352854ecfb142a13f1a188d5bd": "Ybodychange",
    "85585f9eef26baded5b3ef7fcc3283aa37fc362d": "Ybodychange",
    "3d65dbe032e202361d613344ccc6d9c5f99ba395": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2df0a8dcb3dfde15d216481cc1296d97d2cb5d43": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8648. Container cgroups are leaked when using docker. Contributed by Jim Brennan\n",
      "commitDate": "18/09/18 1:36 PM",
      "commitName": "2df0a8dcb3dfde15d216481cc1296d97d2cb5d43",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "07/09/18 5:18 PM",
      "commitNameOld": "bf8a1750e99cfbfa76021ce51b6514c74c06f498",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 10.85,
      "commitsBetweenForRepo": 124,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,19 @@\n   private void handleContainerRemove(String containerId,\n       Map\u003cString, String\u003e env) throws ContainerExecutionException {\n     String delayedRemoval \u003d env.get(ENV_DOCKER_CONTAINER_DELAYED_REMOVAL);\n     if (delayedRemovalAllowed \u0026\u0026 delayedRemoval !\u003d null\n         \u0026\u0026 delayedRemoval.equalsIgnoreCase(\"true\")) {\n       LOG.info(\"Delayed removal requested and allowed, skipping removal - \"\n           + containerId);\n     } else {\n       DockerCommandExecutor.DockerContainerStatus containerStatus \u003d\n           DockerCommandExecutor.getContainerStatus(containerId,\n               privilegedOperationExecutor, nmContext);\n       if (DockerCommandExecutor.isRemovable(containerStatus)) {\n-        DockerRmCommand dockerRmCommand \u003d new DockerRmCommand(containerId);\n+        DockerRmCommand dockerRmCommand \u003d new DockerRmCommand(containerId,\n+            ResourceHandlerModule.getCgroupsRelativeRoot());\n         DockerCommandExecutor.executeDockerCommand(dockerRmCommand, containerId,\n             env, privilegedOperationExecutor, false, nmContext);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleContainerRemove(String containerId,\n      Map\u003cString, String\u003e env) throws ContainerExecutionException {\n    String delayedRemoval \u003d env.get(ENV_DOCKER_CONTAINER_DELAYED_REMOVAL);\n    if (delayedRemovalAllowed \u0026\u0026 delayedRemoval !\u003d null\n        \u0026\u0026 delayedRemoval.equalsIgnoreCase(\"true\")) {\n      LOG.info(\"Delayed removal requested and allowed, skipping removal - \"\n          + containerId);\n    } else {\n      DockerCommandExecutor.DockerContainerStatus containerStatus \u003d\n          DockerCommandExecutor.getContainerStatus(containerId,\n              privilegedOperationExecutor, nmContext);\n      if (DockerCommandExecutor.isRemovable(containerStatus)) {\n        DockerRmCommand dockerRmCommand \u003d new DockerRmCommand(containerId,\n            ResourceHandlerModule.getCgroupsRelativeRoot());\n        DockerCommandExecutor.executeDockerCommand(dockerRmCommand, containerId,\n            env, privilegedOperationExecutor, false, nmContext);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "7526815e3234ca352854ecfb142a13f1a188d5bd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8263. DockerClient still touches hadoop.tmp.dir. Contributed by Craig Condit\n",
      "commitDate": "02/08/18 8:43 AM",
      "commitName": "7526815e3234ca352854ecfb142a13f1a188d5bd",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "23/07/18 5:12 PM",
      "commitNameOld": "8688a0c7f88f2adf1a7fce695e06f3dd1f745080",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 9.65,
      "commitsBetweenForRepo": 79,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n   private void handleContainerRemove(String containerId,\n       Map\u003cString, String\u003e env) throws ContainerExecutionException {\n     String delayedRemoval \u003d env.get(ENV_DOCKER_CONTAINER_DELAYED_REMOVAL);\n     if (delayedRemovalAllowed \u0026\u0026 delayedRemoval !\u003d null\n         \u0026\u0026 delayedRemoval.equalsIgnoreCase(\"true\")) {\n       LOG.info(\"Delayed removal requested and allowed, skipping removal - \"\n           + containerId);\n     } else {\n       DockerCommandExecutor.DockerContainerStatus containerStatus \u003d\n-          DockerCommandExecutor.getContainerStatus(containerId, conf,\n+          DockerCommandExecutor.getContainerStatus(containerId,\n               privilegedOperationExecutor, nmContext);\n       if (DockerCommandExecutor.isRemovable(containerStatus)) {\n         DockerRmCommand dockerRmCommand \u003d new DockerRmCommand(containerId);\n         DockerCommandExecutor.executeDockerCommand(dockerRmCommand, containerId,\n-            env, conf, privilegedOperationExecutor, false, nmContext);\n+            env, privilegedOperationExecutor, false, nmContext);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleContainerRemove(String containerId,\n      Map\u003cString, String\u003e env) throws ContainerExecutionException {\n    String delayedRemoval \u003d env.get(ENV_DOCKER_CONTAINER_DELAYED_REMOVAL);\n    if (delayedRemovalAllowed \u0026\u0026 delayedRemoval !\u003d null\n        \u0026\u0026 delayedRemoval.equalsIgnoreCase(\"true\")) {\n      LOG.info(\"Delayed removal requested and allowed, skipping removal - \"\n          + containerId);\n    } else {\n      DockerCommandExecutor.DockerContainerStatus containerStatus \u003d\n          DockerCommandExecutor.getContainerStatus(containerId,\n              privilegedOperationExecutor, nmContext);\n      if (DockerCommandExecutor.isRemovable(containerStatus)) {\n        DockerRmCommand dockerRmCommand \u003d new DockerRmCommand(containerId);\n        DockerCommandExecutor.executeDockerCommand(dockerRmCommand, containerId,\n            env, privilegedOperationExecutor, false, nmContext);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "85585f9eef26baded5b3ef7fcc3283aa37fc362d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8064.  Bugfix for clean up container-executor cmd helper file.\n            Contributed by Eric Badger\n",
      "commitDate": "20/04/18 10:49 AM",
      "commitName": "85585f9eef26baded5b3ef7fcc3283aa37fc362d",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "11/04/18 11:24 AM",
      "commitNameOld": "933477e9e0526e2ed81ea454f8806de31981822a",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 8.98,
      "commitsBetweenForRepo": 68,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n   private void handleContainerRemove(String containerId,\n       Map\u003cString, String\u003e env) throws ContainerExecutionException {\n     String delayedRemoval \u003d env.get(ENV_DOCKER_CONTAINER_DELAYED_REMOVAL);\n     if (delayedRemovalAllowed \u0026\u0026 delayedRemoval !\u003d null\n         \u0026\u0026 delayedRemoval.equalsIgnoreCase(\"true\")) {\n       LOG.info(\"Delayed removal requested and allowed, skipping removal - \"\n           + containerId);\n     } else {\n       DockerCommandExecutor.DockerContainerStatus containerStatus \u003d\n           DockerCommandExecutor.getContainerStatus(containerId, conf,\n-              privilegedOperationExecutor);\n+              privilegedOperationExecutor, nmContext);\n       if (DockerCommandExecutor.isRemovable(containerStatus)) {\n         DockerRmCommand dockerRmCommand \u003d new DockerRmCommand(containerId);\n         DockerCommandExecutor.executeDockerCommand(dockerRmCommand, containerId,\n-            env, conf, privilegedOperationExecutor, false);\n+            env, conf, privilegedOperationExecutor, false, nmContext);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleContainerRemove(String containerId,\n      Map\u003cString, String\u003e env) throws ContainerExecutionException {\n    String delayedRemoval \u003d env.get(ENV_DOCKER_CONTAINER_DELAYED_REMOVAL);\n    if (delayedRemovalAllowed \u0026\u0026 delayedRemoval !\u003d null\n        \u0026\u0026 delayedRemoval.equalsIgnoreCase(\"true\")) {\n      LOG.info(\"Delayed removal requested and allowed, skipping removal - \"\n          + containerId);\n    } else {\n      DockerCommandExecutor.DockerContainerStatus containerStatus \u003d\n          DockerCommandExecutor.getContainerStatus(containerId, conf,\n              privilegedOperationExecutor, nmContext);\n      if (DockerCommandExecutor.isRemovable(containerStatus)) {\n        DockerRmCommand dockerRmCommand \u003d new DockerRmCommand(containerId);\n        DockerCommandExecutor.executeDockerCommand(dockerRmCommand, containerId,\n            env, conf, privilegedOperationExecutor, false, nmContext);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "3d65dbe032e202361d613344ccc6d9c5f99ba395": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5366. Improve signal handling and delete delay for Docker on Yarn.\n           (Contributed by Shane Kumpf)\n",
      "commitDate": "12/01/18 10:41 AM",
      "commitName": "3d65dbe032e202361d613344ccc6d9c5f99ba395",
      "commitAuthor": "Eric Yang",
      "diff": "@@ -0,0 +1,18 @@\n+  private void handleContainerRemove(String containerId,\n+      Map\u003cString, String\u003e env) throws ContainerExecutionException {\n+    String delayedRemoval \u003d env.get(ENV_DOCKER_CONTAINER_DELAYED_REMOVAL);\n+    if (delayedRemovalAllowed \u0026\u0026 delayedRemoval !\u003d null\n+        \u0026\u0026 delayedRemoval.equalsIgnoreCase(\"true\")) {\n+      LOG.info(\"Delayed removal requested and allowed, skipping removal - \"\n+          + containerId);\n+    } else {\n+      DockerCommandExecutor.DockerContainerStatus containerStatus \u003d\n+          DockerCommandExecutor.getContainerStatus(containerId, conf,\n+              privilegedOperationExecutor);\n+      if (DockerCommandExecutor.isRemovable(containerStatus)) {\n+        DockerRmCommand dockerRmCommand \u003d new DockerRmCommand(containerId);\n+        DockerCommandExecutor.executeDockerCommand(dockerRmCommand, containerId,\n+            env, conf, privilegedOperationExecutor, false);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleContainerRemove(String containerId,\n      Map\u003cString, String\u003e env) throws ContainerExecutionException {\n    String delayedRemoval \u003d env.get(ENV_DOCKER_CONTAINER_DELAYED_REMOVAL);\n    if (delayedRemovalAllowed \u0026\u0026 delayedRemoval !\u003d null\n        \u0026\u0026 delayedRemoval.equalsIgnoreCase(\"true\")) {\n      LOG.info(\"Delayed removal requested and allowed, skipping removal - \"\n          + containerId);\n    } else {\n      DockerCommandExecutor.DockerContainerStatus containerStatus \u003d\n          DockerCommandExecutor.getContainerStatus(containerId, conf,\n              privilegedOperationExecutor);\n      if (DockerCommandExecutor.isRemovable(containerStatus)) {\n        DockerRmCommand dockerRmCommand \u003d new DockerRmCommand(containerId);\n        DockerCommandExecutor.executeDockerCommand(dockerRmCommand, containerId,\n            env, conf, privilegedOperationExecutor, false);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java"
    }
  }
}