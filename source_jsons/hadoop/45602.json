{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AggregatedLogDeletionService.java",
  "functionName": "serviceStart",
  "functionId": "serviceStart",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/AggregatedLogDeletionService.java",
  "functionStartLine": 222,
  "functionEndLine": 225,
  "numCommitsSeen": 16,
  "timeTaken": 1765,
  "changeHistory": [
    "a42e459b9eba8c79652036e44dceb34d717b665e",
    "0928502029ef141759008997335ea2cd836a7154",
    "f81119816416064f915860ee9db0a6d1893d73b0",
    "7fc6ad661d4723cc2ea1df1ff0c4611d5f534f9e"
  ],
  "changeHistoryShort": {
    "a42e459b9eba8c79652036e44dceb34d717b665e": "Ybodychange",
    "0928502029ef141759008997335ea2cd836a7154": "Ymultichange(Yrename,Ymodifierchange,Yexceptionschange,Ybodychange)",
    "f81119816416064f915860ee9db0a6d1893d73b0": "Ybodychange",
    "7fc6ad661d4723cc2ea1df1ff0c4611d5f534f9e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a42e459b9eba8c79652036e44dceb34d717b665e": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5356. Ability to refresh aggregated log retention period and check interval. Contributed by Ashwin Shankar\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1506226 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/07/13 12:20 PM",
      "commitName": "a42e459b9eba8c79652036e44dceb34d717b665e",
      "commitAuthor": "Jason Darrell Lowe",
      "commitDateOld": "16/06/13 11:39 PM",
      "commitNameOld": "b9efe6bd4a1277b4067ecde715a7713a85968886",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 36.53,
      "commitsBetweenForRepo": 203,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,4 @@\n   protected void serviceStart() throws Exception {\n-    Configuration conf \u003d getConfig();\n-    if (!conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n-        YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED)) {\n-      //Log aggregation is not enabled so don\u0027t bother\n-      return;\n-    }\n-    long retentionSecs \u003d conf.getLong(YarnConfiguration.LOG_AGGREGATION_RETAIN_SECONDS,\n-        YarnConfiguration.DEFAULT_LOG_AGGREGATION_RETAIN_SECONDS);\n-    if(retentionSecs \u003c 0) {\n-      LOG.info(\"Log Aggregation deletion is disabled because retention is\" +\n-      \t\t\" too small (\" + retentionSecs + \")\");\n-      return;\n-    }\n-    long checkIntervalMsecs \u003d 1000 * conf.getLong(\n-        YarnConfiguration.LOG_AGGREGATION_RETAIN_CHECK_INTERVAL_SECONDS,\n-        YarnConfiguration.DEFAULT_LOG_AGGREGATION_RETAIN_CHECK_INTERVAL_SECONDS);\n-    if (checkIntervalMsecs \u003c\u003d 0) {\n-      // when unspecified compute check interval as 1/10th of retention\n-      checkIntervalMsecs \u003d (retentionSecs * 1000) / 10;\n-    }\n-    TimerTask task \u003d new LogDeletionTask(conf, retentionSecs);\n-    timer \u003d new Timer();\n-    timer.scheduleAtFixedRate(task, 0, checkIntervalMsecs);\n+    scheduleLogDeletionTask();\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    scheduleLogDeletionTask();\n    super.serviceStart();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/AggregatedLogDeletionService.java",
      "extendedDetails": {}
    },
    "0928502029ef141759008997335ea2cd836a7154": {
      "type": "Ymultichange(Yrename,Ymodifierchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/06/13 8:54 AM",
      "commitName": "0928502029ef141759008997335ea2cd836a7154",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "31/01/13 2:46 PM",
          "commitNameOld": "f81119816416064f915860ee9db0a6d1893d73b0",
          "commitAuthorOld": "Jason Darrell Lowe",
          "daysBetweenCommits": 132.71,
          "commitsBetweenForRepo": 766,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,26 @@\n-  public void start() {\n+  protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n     if (!conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n         YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED)) {\n       //Log aggregation is not enabled so don\u0027t bother\n       return;\n     }\n     long retentionSecs \u003d conf.getLong(YarnConfiguration.LOG_AGGREGATION_RETAIN_SECONDS,\n         YarnConfiguration.DEFAULT_LOG_AGGREGATION_RETAIN_SECONDS);\n     if(retentionSecs \u003c 0) {\n       LOG.info(\"Log Aggregation deletion is disabled because retention is\" +\n       \t\t\" too small (\" + retentionSecs + \")\");\n       return;\n     }\n     long checkIntervalMsecs \u003d 1000 * conf.getLong(\n         YarnConfiguration.LOG_AGGREGATION_RETAIN_CHECK_INTERVAL_SECONDS,\n         YarnConfiguration.DEFAULT_LOG_AGGREGATION_RETAIN_CHECK_INTERVAL_SECONDS);\n     if (checkIntervalMsecs \u003c\u003d 0) {\n       // when unspecified compute check interval as 1/10th of retention\n       checkIntervalMsecs \u003d (retentionSecs * 1000) / 10;\n     }\n     TimerTask task \u003d new LogDeletionTask(conf, retentionSecs);\n     timer \u003d new Timer();\n     timer.scheduleAtFixedRate(task, 0, checkIntervalMsecs);\n-    super.start();\n+    super.serviceStart();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    if (!conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n        YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED)) {\n      //Log aggregation is not enabled so don\u0027t bother\n      return;\n    }\n    long retentionSecs \u003d conf.getLong(YarnConfiguration.LOG_AGGREGATION_RETAIN_SECONDS,\n        YarnConfiguration.DEFAULT_LOG_AGGREGATION_RETAIN_SECONDS);\n    if(retentionSecs \u003c 0) {\n      LOG.info(\"Log Aggregation deletion is disabled because retention is\" +\n      \t\t\" too small (\" + retentionSecs + \")\");\n      return;\n    }\n    long checkIntervalMsecs \u003d 1000 * conf.getLong(\n        YarnConfiguration.LOG_AGGREGATION_RETAIN_CHECK_INTERVAL_SECONDS,\n        YarnConfiguration.DEFAULT_LOG_AGGREGATION_RETAIN_CHECK_INTERVAL_SECONDS);\n    if (checkIntervalMsecs \u003c\u003d 0) {\n      // when unspecified compute check interval as 1/10th of retention\n      checkIntervalMsecs \u003d (retentionSecs * 1000) / 10;\n    }\n    TimerTask task \u003d new LogDeletionTask(conf, retentionSecs);\n    timer \u003d new Timer();\n    timer.scheduleAtFixedRate(task, 0, checkIntervalMsecs);\n    super.serviceStart();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/AggregatedLogDeletionService.java",
          "extendedDetails": {
            "oldValue": "start",
            "newValue": "serviceStart"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "31/01/13 2:46 PM",
          "commitNameOld": "f81119816416064f915860ee9db0a6d1893d73b0",
          "commitAuthorOld": "Jason Darrell Lowe",
          "daysBetweenCommits": 132.71,
          "commitsBetweenForRepo": 766,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,26 @@\n-  public void start() {\n+  protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n     if (!conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n         YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED)) {\n       //Log aggregation is not enabled so don\u0027t bother\n       return;\n     }\n     long retentionSecs \u003d conf.getLong(YarnConfiguration.LOG_AGGREGATION_RETAIN_SECONDS,\n         YarnConfiguration.DEFAULT_LOG_AGGREGATION_RETAIN_SECONDS);\n     if(retentionSecs \u003c 0) {\n       LOG.info(\"Log Aggregation deletion is disabled because retention is\" +\n       \t\t\" too small (\" + retentionSecs + \")\");\n       return;\n     }\n     long checkIntervalMsecs \u003d 1000 * conf.getLong(\n         YarnConfiguration.LOG_AGGREGATION_RETAIN_CHECK_INTERVAL_SECONDS,\n         YarnConfiguration.DEFAULT_LOG_AGGREGATION_RETAIN_CHECK_INTERVAL_SECONDS);\n     if (checkIntervalMsecs \u003c\u003d 0) {\n       // when unspecified compute check interval as 1/10th of retention\n       checkIntervalMsecs \u003d (retentionSecs * 1000) / 10;\n     }\n     TimerTask task \u003d new LogDeletionTask(conf, retentionSecs);\n     timer \u003d new Timer();\n     timer.scheduleAtFixedRate(task, 0, checkIntervalMsecs);\n-    super.start();\n+    super.serviceStart();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    if (!conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n        YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED)) {\n      //Log aggregation is not enabled so don\u0027t bother\n      return;\n    }\n    long retentionSecs \u003d conf.getLong(YarnConfiguration.LOG_AGGREGATION_RETAIN_SECONDS,\n        YarnConfiguration.DEFAULT_LOG_AGGREGATION_RETAIN_SECONDS);\n    if(retentionSecs \u003c 0) {\n      LOG.info(\"Log Aggregation deletion is disabled because retention is\" +\n      \t\t\" too small (\" + retentionSecs + \")\");\n      return;\n    }\n    long checkIntervalMsecs \u003d 1000 * conf.getLong(\n        YarnConfiguration.LOG_AGGREGATION_RETAIN_CHECK_INTERVAL_SECONDS,\n        YarnConfiguration.DEFAULT_LOG_AGGREGATION_RETAIN_CHECK_INTERVAL_SECONDS);\n    if (checkIntervalMsecs \u003c\u003d 0) {\n      // when unspecified compute check interval as 1/10th of retention\n      checkIntervalMsecs \u003d (retentionSecs * 1000) / 10;\n    }\n    TimerTask task \u003d new LogDeletionTask(conf, retentionSecs);\n    timer \u003d new Timer();\n    timer.scheduleAtFixedRate(task, 0, checkIntervalMsecs);\n    super.serviceStart();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/AggregatedLogDeletionService.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "31/01/13 2:46 PM",
          "commitNameOld": "f81119816416064f915860ee9db0a6d1893d73b0",
          "commitAuthorOld": "Jason Darrell Lowe",
          "daysBetweenCommits": 132.71,
          "commitsBetweenForRepo": 766,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,26 @@\n-  public void start() {\n+  protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n     if (!conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n         YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED)) {\n       //Log aggregation is not enabled so don\u0027t bother\n       return;\n     }\n     long retentionSecs \u003d conf.getLong(YarnConfiguration.LOG_AGGREGATION_RETAIN_SECONDS,\n         YarnConfiguration.DEFAULT_LOG_AGGREGATION_RETAIN_SECONDS);\n     if(retentionSecs \u003c 0) {\n       LOG.info(\"Log Aggregation deletion is disabled because retention is\" +\n       \t\t\" too small (\" + retentionSecs + \")\");\n       return;\n     }\n     long checkIntervalMsecs \u003d 1000 * conf.getLong(\n         YarnConfiguration.LOG_AGGREGATION_RETAIN_CHECK_INTERVAL_SECONDS,\n         YarnConfiguration.DEFAULT_LOG_AGGREGATION_RETAIN_CHECK_INTERVAL_SECONDS);\n     if (checkIntervalMsecs \u003c\u003d 0) {\n       // when unspecified compute check interval as 1/10th of retention\n       checkIntervalMsecs \u003d (retentionSecs * 1000) / 10;\n     }\n     TimerTask task \u003d new LogDeletionTask(conf, retentionSecs);\n     timer \u003d new Timer();\n     timer.scheduleAtFixedRate(task, 0, checkIntervalMsecs);\n-    super.start();\n+    super.serviceStart();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    if (!conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n        YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED)) {\n      //Log aggregation is not enabled so don\u0027t bother\n      return;\n    }\n    long retentionSecs \u003d conf.getLong(YarnConfiguration.LOG_AGGREGATION_RETAIN_SECONDS,\n        YarnConfiguration.DEFAULT_LOG_AGGREGATION_RETAIN_SECONDS);\n    if(retentionSecs \u003c 0) {\n      LOG.info(\"Log Aggregation deletion is disabled because retention is\" +\n      \t\t\" too small (\" + retentionSecs + \")\");\n      return;\n    }\n    long checkIntervalMsecs \u003d 1000 * conf.getLong(\n        YarnConfiguration.LOG_AGGREGATION_RETAIN_CHECK_INTERVAL_SECONDS,\n        YarnConfiguration.DEFAULT_LOG_AGGREGATION_RETAIN_CHECK_INTERVAL_SECONDS);\n    if (checkIntervalMsecs \u003c\u003d 0) {\n      // when unspecified compute check interval as 1/10th of retention\n      checkIntervalMsecs \u003d (retentionSecs * 1000) / 10;\n    }\n    TimerTask task \u003d new LogDeletionTask(conf, retentionSecs);\n    timer \u003d new Timer();\n    timer.scheduleAtFixedRate(task, 0, checkIntervalMsecs);\n    super.serviceStart();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/AggregatedLogDeletionService.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[Exception]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "31/01/13 2:46 PM",
          "commitNameOld": "f81119816416064f915860ee9db0a6d1893d73b0",
          "commitAuthorOld": "Jason Darrell Lowe",
          "daysBetweenCommits": 132.71,
          "commitsBetweenForRepo": 766,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,26 @@\n-  public void start() {\n+  protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n     if (!conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n         YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED)) {\n       //Log aggregation is not enabled so don\u0027t bother\n       return;\n     }\n     long retentionSecs \u003d conf.getLong(YarnConfiguration.LOG_AGGREGATION_RETAIN_SECONDS,\n         YarnConfiguration.DEFAULT_LOG_AGGREGATION_RETAIN_SECONDS);\n     if(retentionSecs \u003c 0) {\n       LOG.info(\"Log Aggregation deletion is disabled because retention is\" +\n       \t\t\" too small (\" + retentionSecs + \")\");\n       return;\n     }\n     long checkIntervalMsecs \u003d 1000 * conf.getLong(\n         YarnConfiguration.LOG_AGGREGATION_RETAIN_CHECK_INTERVAL_SECONDS,\n         YarnConfiguration.DEFAULT_LOG_AGGREGATION_RETAIN_CHECK_INTERVAL_SECONDS);\n     if (checkIntervalMsecs \u003c\u003d 0) {\n       // when unspecified compute check interval as 1/10th of retention\n       checkIntervalMsecs \u003d (retentionSecs * 1000) / 10;\n     }\n     TimerTask task \u003d new LogDeletionTask(conf, retentionSecs);\n     timer \u003d new Timer();\n     timer.scheduleAtFixedRate(task, 0, checkIntervalMsecs);\n-    super.start();\n+    super.serviceStart();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    if (!conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n        YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED)) {\n      //Log aggregation is not enabled so don\u0027t bother\n      return;\n    }\n    long retentionSecs \u003d conf.getLong(YarnConfiguration.LOG_AGGREGATION_RETAIN_SECONDS,\n        YarnConfiguration.DEFAULT_LOG_AGGREGATION_RETAIN_SECONDS);\n    if(retentionSecs \u003c 0) {\n      LOG.info(\"Log Aggregation deletion is disabled because retention is\" +\n      \t\t\" too small (\" + retentionSecs + \")\");\n      return;\n    }\n    long checkIntervalMsecs \u003d 1000 * conf.getLong(\n        YarnConfiguration.LOG_AGGREGATION_RETAIN_CHECK_INTERVAL_SECONDS,\n        YarnConfiguration.DEFAULT_LOG_AGGREGATION_RETAIN_CHECK_INTERVAL_SECONDS);\n    if (checkIntervalMsecs \u003c\u003d 0) {\n      // when unspecified compute check interval as 1/10th of retention\n      checkIntervalMsecs \u003d (retentionSecs * 1000) / 10;\n    }\n    TimerTask task \u003d new LogDeletionTask(conf, retentionSecs);\n    timer \u003d new Timer();\n    timer.scheduleAtFixedRate(task, 0, checkIntervalMsecs);\n    super.serviceStart();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/AggregatedLogDeletionService.java",
          "extendedDetails": {}
        }
      ]
    },
    "f81119816416064f915860ee9db0a6d1893d73b0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-364. AggregatedLogDeletionService can take too long to delete logs. Contributed by Jason Lowe\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1441239 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/01/13 2:46 PM",
      "commitName": "f81119816416064f915860ee9db0a6d1893d73b0",
      "commitAuthor": "Jason Darrell Lowe",
      "commitDateOld": "17/08/12 1:29 PM",
      "commitNameOld": "7fc6ad661d4723cc2ea1df1ff0c4611d5f534f9e",
      "commitAuthorOld": "Thomas Graves",
      "daysBetweenCommits": 167.09,
      "commitsBetweenForRepo": 874,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,26 @@\n   public void start() {\n     Configuration conf \u003d getConfig();\n     if (!conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n         YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED)) {\n       //Log aggregation is not enabled so don\u0027t bother\n       return;\n     }\n     long retentionSecs \u003d conf.getLong(YarnConfiguration.LOG_AGGREGATION_RETAIN_SECONDS,\n         YarnConfiguration.DEFAULT_LOG_AGGREGATION_RETAIN_SECONDS);\n     if(retentionSecs \u003c 0) {\n       LOG.info(\"Log Aggregation deletion is disabled because retention is\" +\n       \t\t\" too small (\" + retentionSecs + \")\");\n       return;\n     }\n+    long checkIntervalMsecs \u003d 1000 * conf.getLong(\n+        YarnConfiguration.LOG_AGGREGATION_RETAIN_CHECK_INTERVAL_SECONDS,\n+        YarnConfiguration.DEFAULT_LOG_AGGREGATION_RETAIN_CHECK_INTERVAL_SECONDS);\n+    if (checkIntervalMsecs \u003c\u003d 0) {\n+      // when unspecified compute check interval as 1/10th of retention\n+      checkIntervalMsecs \u003d (retentionSecs * 1000) / 10;\n+    }\n     TimerTask task \u003d new LogDeletionTask(conf, retentionSecs);\n     timer \u003d new Timer();\n-    timer.scheduleAtFixedRate(task, 0, retentionSecs * 1000);\n+    timer.scheduleAtFixedRate(task, 0, checkIntervalMsecs);\n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n    Configuration conf \u003d getConfig();\n    if (!conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n        YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED)) {\n      //Log aggregation is not enabled so don\u0027t bother\n      return;\n    }\n    long retentionSecs \u003d conf.getLong(YarnConfiguration.LOG_AGGREGATION_RETAIN_SECONDS,\n        YarnConfiguration.DEFAULT_LOG_AGGREGATION_RETAIN_SECONDS);\n    if(retentionSecs \u003c 0) {\n      LOG.info(\"Log Aggregation deletion is disabled because retention is\" +\n      \t\t\" too small (\" + retentionSecs + \")\");\n      return;\n    }\n    long checkIntervalMsecs \u003d 1000 * conf.getLong(\n        YarnConfiguration.LOG_AGGREGATION_RETAIN_CHECK_INTERVAL_SECONDS,\n        YarnConfiguration.DEFAULT_LOG_AGGREGATION_RETAIN_CHECK_INTERVAL_SECONDS);\n    if (checkIntervalMsecs \u003c\u003d 0) {\n      // when unspecified compute check interval as 1/10th of retention\n      checkIntervalMsecs \u003d (retentionSecs * 1000) / 10;\n    }\n    TimerTask task \u003d new LogDeletionTask(conf, retentionSecs);\n    timer \u003d new Timer();\n    timer.scheduleAtFixedRate(task, 0, checkIntervalMsecs);\n    super.start();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/AggregatedLogDeletionService.java",
      "extendedDetails": {}
    },
    "7fc6ad661d4723cc2ea1df1ff0c4611d5f534f9e": {
      "type": "Yintroduced",
      "commitMessage": "YARN-25. remove old aggregated logs  (Robert Evans via tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1374424 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/08/12 1:29 PM",
      "commitName": "7fc6ad661d4723cc2ea1df1ff0c4611d5f534f9e",
      "commitAuthor": "Thomas Graves",
      "diff": "@@ -0,0 +1,19 @@\n+  public void start() {\n+    Configuration conf \u003d getConfig();\n+    if (!conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n+        YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED)) {\n+      //Log aggregation is not enabled so don\u0027t bother\n+      return;\n+    }\n+    long retentionSecs \u003d conf.getLong(YarnConfiguration.LOG_AGGREGATION_RETAIN_SECONDS,\n+        YarnConfiguration.DEFAULT_LOG_AGGREGATION_RETAIN_SECONDS);\n+    if(retentionSecs \u003c 0) {\n+      LOG.info(\"Log Aggregation deletion is disabled because retention is\" +\n+      \t\t\" too small (\" + retentionSecs + \")\");\n+      return;\n+    }\n+    TimerTask task \u003d new LogDeletionTask(conf, retentionSecs);\n+    timer \u003d new Timer();\n+    timer.scheduleAtFixedRate(task, 0, retentionSecs * 1000);\n+    super.start();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() {\n    Configuration conf \u003d getConfig();\n    if (!conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n        YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED)) {\n      //Log aggregation is not enabled so don\u0027t bother\n      return;\n    }\n    long retentionSecs \u003d conf.getLong(YarnConfiguration.LOG_AGGREGATION_RETAIN_SECONDS,\n        YarnConfiguration.DEFAULT_LOG_AGGREGATION_RETAIN_SECONDS);\n    if(retentionSecs \u003c 0) {\n      LOG.info(\"Log Aggregation deletion is disabled because retention is\" +\n      \t\t\" too small (\" + retentionSecs + \")\");\n      return;\n    }\n    TimerTask task \u003d new LogDeletionTask(conf, retentionSecs);\n    timer \u003d new Timer();\n    timer.scheduleAtFixedRate(task, 0, retentionSecs * 1000);\n    super.start();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/AggregatedLogDeletionService.java"
    }
  }
}