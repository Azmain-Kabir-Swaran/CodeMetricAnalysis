{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TimelineV2ClientImpl.java",
  "functionName": "putObjects",
  "functionId": "putObjects___base-URI__path-String__params-MultivaluedMap__String,String____obj-Object",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineV2ClientImpl.java",
  "functionStartLine": 298,
  "functionEndLine": 354,
  "numCommitsSeen": 56,
  "timeTaken": 4669,
  "changeHistory": [
    "571795cd180d3077e8ba189b3b70e81f0d1a7044",
    "ac7f52df83d2b4758e7debe9416be7db0ec69d2b",
    "4fa1afdb883dab8786d2fb5c72a195dd2e87d711",
    "6cf6ab7b780de2b0c2c9ea730e1f366965a0d682",
    "84c35ac6c4a76c31d9bf9c87b87ed29394564611",
    "5712b8f9fd1859fe046b482889239bd164ed7dab",
    "4f0c7eaff3b66df6e87aa251e1316a85f38ffab5"
  ],
  "changeHistoryShort": {
    "571795cd180d3077e8ba189b3b70e81f0d1a7044": "Ybodychange",
    "ac7f52df83d2b4758e7debe9416be7db0ec69d2b": "Ybodychange",
    "4fa1afdb883dab8786d2fb5c72a195dd2e87d711": "Ymultichange(Ymovefromfile,Ybodychange)",
    "6cf6ab7b780de2b0c2c9ea730e1f366965a0d682": "Ybodychange",
    "84c35ac6c4a76c31d9bf9c87b87ed29394564611": "Ymodifierchange",
    "5712b8f9fd1859fe046b482889239bd164ed7dab": "Ybodychange",
    "4f0c7eaff3b66df6e87aa251e1316a85f38ffab5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "571795cd180d3077e8ba189b3b70e81f0d1a7044": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10068. Fix TimelineV2Client leaking File Descriptors.\n\nContributed by Anand Srinivasan. Reviewed by Adam Antal.\n",
      "commitDate": "07/01/20 10:31 PM",
      "commitName": "571795cd180d3077e8ba189b3b70e81f0d1a7044",
      "commitAuthor": "Prabhu Joseph",
      "commitDateOld": "03/03/19 11:59 PM",
      "commitNameOld": "bd8d299ded742813cabd4b4e7ce1e33e0d1f9509",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 309.94,
      "commitsBetweenForRepo": 2041,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,57 @@\n   protected void putObjects(URI base, String path,\n       MultivaluedMap\u003cString, String\u003e params, Object obj)\n       throws IOException, YarnException {\n     ClientResponse resp \u003d null;\n     try {\n       resp \u003d authUgi.doAs(new PrivilegedExceptionAction\u003cClientResponse\u003e() {\n         @Override\n         public ClientResponse run() throws Exception {\n           return doPutObjects(base, path, params, obj);\n         }\n       });\n     } catch (UndeclaredThrowableException ue) {\n       Throwable cause \u003d ue.getCause();\n       if (cause instanceof IOException) {\n         throw (IOException)cause;\n       } else {\n         throw new IOException(cause);\n       }\n     } catch (InterruptedException ie) {\n       throw (IOException) new InterruptedIOException().initCause(ie);\n     }\n-    if (resp \u003d\u003d null || resp.getStatusInfo()\n-        .getStatusCode() !\u003d ClientResponse.Status.OK.getStatusCode()) {\n-      String msg \u003d\n-          \"Response from the timeline server is \" + ((resp \u003d\u003d null) ? \"null\"\n-              : \"not successful,\" + \" HTTP error code: \" + resp.getStatus()\n-                  + \", Server response:\\n\" + resp.getEntity(String.class));\n+\n+    //Close ClientResponse\u0027s input stream as we are done posting objects.\n+    //ClientResponse#getEntity closes the input stream upon failure in\n+    //processing HTTP response.\n+    if (resp \u003d\u003d null) {\n+      String msg \u003d \"Error getting HTTP response from the timeline server.\";\n       LOG.error(msg);\n       throw new YarnException(msg);\n+    } else if (resp.getStatusInfo().getStatusCode()\n+            \u003d\u003d ClientResponse.Status.OK.getStatusCode()) {\n+      try {\n+        resp.close();\n+      } catch(ClientHandlerException che) {\n+        LOG.warn(\"Error closing the HTTP response\u0027s inputstream. \", che);\n+      }\n+    } else {\n+      String msg \u003d \"\";\n+      try {\n+        String stringType \u003d resp.getEntity(String.class);\n+        msg \u003d \"Server response:\\n\" + stringType;\n+      } catch (ClientHandlerException | UniformInterfaceException chuie) {\n+        msg \u003d \"Error getting entity from the HTTP response.\"\n+                + chuie.getLocalizedMessage();\n+      } catch (Throwable t) {\n+        msg \u003d \"Error getting entity from the HTTP response.\"\n+                + t.getLocalizedMessage();\n+      } finally {\n+        msg \u003d \"Response from the timeline server is not successful\"\n+                  + \", HTTP error code: \" + resp.getStatus()\n+                  + \", \"\n+                  + msg;\n+        LOG.error(msg);\n+        throw new YarnException(msg);\n+      }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void putObjects(URI base, String path,\n      MultivaluedMap\u003cString, String\u003e params, Object obj)\n      throws IOException, YarnException {\n    ClientResponse resp \u003d null;\n    try {\n      resp \u003d authUgi.doAs(new PrivilegedExceptionAction\u003cClientResponse\u003e() {\n        @Override\n        public ClientResponse run() throws Exception {\n          return doPutObjects(base, path, params, obj);\n        }\n      });\n    } catch (UndeclaredThrowableException ue) {\n      Throwable cause \u003d ue.getCause();\n      if (cause instanceof IOException) {\n        throw (IOException)cause;\n      } else {\n        throw new IOException(cause);\n      }\n    } catch (InterruptedException ie) {\n      throw (IOException) new InterruptedIOException().initCause(ie);\n    }\n\n    //Close ClientResponse\u0027s input stream as we are done posting objects.\n    //ClientResponse#getEntity closes the input stream upon failure in\n    //processing HTTP response.\n    if (resp \u003d\u003d null) {\n      String msg \u003d \"Error getting HTTP response from the timeline server.\";\n      LOG.error(msg);\n      throw new YarnException(msg);\n    } else if (resp.getStatusInfo().getStatusCode()\n            \u003d\u003d ClientResponse.Status.OK.getStatusCode()) {\n      try {\n        resp.close();\n      } catch(ClientHandlerException che) {\n        LOG.warn(\"Error closing the HTTP response\u0027s inputstream. \", che);\n      }\n    } else {\n      String msg \u003d \"\";\n      try {\n        String stringType \u003d resp.getEntity(String.class);\n        msg \u003d \"Server response:\\n\" + stringType;\n      } catch (ClientHandlerException | UniformInterfaceException chuie) {\n        msg \u003d \"Error getting entity from the HTTP response.\"\n                + chuie.getLocalizedMessage();\n      } catch (Throwable t) {\n        msg \u003d \"Error getting entity from the HTTP response.\"\n                + t.getLocalizedMessage();\n      } finally {\n        msg \u003d \"Response from the timeline server is not successful\"\n                  + \", HTTP error code: \" + resp.getStatus()\n                  + \", \"\n                  + msg;\n        LOG.error(msg);\n        throw new YarnException(msg);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineV2ClientImpl.java",
      "extendedDetails": {}
    },
    "ac7f52df83d2b4758e7debe9416be7db0ec69d2b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5648. [ATSv2 Security] Client side changes for authentication. Contributed by Varun Saxena\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "ac7f52df83d2b4758e7debe9416be7db0ec69d2b",
      "commitAuthor": "Jian He",
      "commitDateOld": "30/03/17 1:32 PM",
      "commitNameOld": "7c2bc444b3d6750aafeed9b530c8e5b1bf95c1f4",
      "commitAuthorOld": "Varun Saxena",
      "daysBetweenCommits": 152.39,
      "commitsBetweenForRepo": 897,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,31 @@\n   protected void putObjects(URI base, String path,\n       MultivaluedMap\u003cString, String\u003e params, Object obj)\n       throws IOException, YarnException {\n-    ClientResponse resp;\n+    ClientResponse resp \u003d null;\n     try {\n-      resp \u003d connector.getClient().resource(base).path(path).queryParams(params)\n-          .accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON)\n-          .put(ClientResponse.class, obj);\n-    } catch (RuntimeException re) {\n-      // runtime exception is expected if the client cannot connect the server\n-      String msg \u003d \"Failed to get the response from the timeline server.\";\n-      LOG.error(msg, re);\n-      throw new IOException(re);\n+      resp \u003d authUgi.doAs(new PrivilegedExceptionAction\u003cClientResponse\u003e() {\n+        @Override\n+        public ClientResponse run() throws Exception {\n+          return doPutObjects(base, path, params, obj);\n+        }\n+      });\n+    } catch (UndeclaredThrowableException ue) {\n+      Throwable cause \u003d ue.getCause();\n+      if (cause instanceof IOException) {\n+        throw (IOException)cause;\n+      } else {\n+        throw new IOException(cause);\n+      }\n+    } catch (InterruptedException ie) {\n+      throw (IOException) new InterruptedIOException().initCause(ie);\n     }\n     if (resp \u003d\u003d null || resp.getStatusInfo()\n         .getStatusCode() !\u003d ClientResponse.Status.OK.getStatusCode()) {\n       String msg \u003d\n           \"Response from the timeline server is \" + ((resp \u003d\u003d null) ? \"null\"\n               : \"not successful,\" + \" HTTP error code: \" + resp.getStatus()\n                   + \", Server response:\\n\" + resp.getEntity(String.class));\n       LOG.error(msg);\n       throw new YarnException(msg);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void putObjects(URI base, String path,\n      MultivaluedMap\u003cString, String\u003e params, Object obj)\n      throws IOException, YarnException {\n    ClientResponse resp \u003d null;\n    try {\n      resp \u003d authUgi.doAs(new PrivilegedExceptionAction\u003cClientResponse\u003e() {\n        @Override\n        public ClientResponse run() throws Exception {\n          return doPutObjects(base, path, params, obj);\n        }\n      });\n    } catch (UndeclaredThrowableException ue) {\n      Throwable cause \u003d ue.getCause();\n      if (cause instanceof IOException) {\n        throw (IOException)cause;\n      } else {\n        throw new IOException(cause);\n      }\n    } catch (InterruptedException ie) {\n      throw (IOException) new InterruptedIOException().initCause(ie);\n    }\n    if (resp \u003d\u003d null || resp.getStatusInfo()\n        .getStatusCode() !\u003d ClientResponse.Status.OK.getStatusCode()) {\n      String msg \u003d\n          \"Response from the timeline server is \" + ((resp \u003d\u003d null) ? \"null\"\n              : \"not successful,\" + \" HTTP error code: \" + resp.getStatus()\n                  + \", Server response:\\n\" + resp.getEntity(String.class));\n      LOG.error(msg);\n      throw new YarnException(msg);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineV2ClientImpl.java",
      "extendedDetails": {}
    },
    "4fa1afdb883dab8786d2fb5c72a195dd2e87d711": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "YARN-4675. Reorganize TimelineClient and TimelineClientImpl into separate classes for ATSv1.x and ATSv2. Contributed by Naganarasimha G R.\n",
      "commitDate": "16/02/17 11:41 AM",
      "commitName": "4fa1afdb883dab8786d2fb5c72a195dd2e87d711",
      "commitAuthor": "Sangjin Lee",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-4675. Reorganize TimelineClient and TimelineClientImpl into separate classes for ATSv1.x and ATSv2. Contributed by Naganarasimha G R.\n",
          "commitDate": "16/02/17 11:41 AM",
          "commitName": "4fa1afdb883dab8786d2fb5c72a195dd2e87d711",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "16/02/17 5:39 AM",
          "commitNameOld": "5690b51ef7c708c0a71162ddaff04466bc71cdcc",
          "commitAuthorOld": "Wei-Chiu Chuang",
          "daysBetweenCommits": 0.25,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,24 @@\n-  protected void putObjects(\n-      URI base, String path, MultivaluedMap\u003cString, String\u003e params, Object obj)\n-          throws IOException, YarnException {\n+  protected void putObjects(URI base, String path,\n+      MultivaluedMap\u003cString, String\u003e params, Object obj)\n+      throws IOException, YarnException {\n     ClientResponse resp;\n     try {\n-      resp \u003d client.resource(base).path(path).queryParams(params)\n-          .accept(MediaType.APPLICATION_JSON)\n-          .type(MediaType.APPLICATION_JSON)\n+      resp \u003d connector.getClient().resource(base).path(path).queryParams(params)\n+          .accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON)\n           .put(ClientResponse.class, obj);\n     } catch (RuntimeException re) {\n       // runtime exception is expected if the client cannot connect the server\n-      String msg \u003d\n-          \"Failed to get the response from the timeline server.\";\n+      String msg \u003d \"Failed to get the response from the timeline server.\";\n       LOG.error(msg, re);\n       throw new IOException(re);\n     }\n-    if (resp \u003d\u003d null ||\n-        resp.getStatusInfo().getStatusCode() !\u003d\n-            ClientResponse.Status.OK.getStatusCode()) {\n-      String msg \u003d \"Response from the timeline server is \" +\n-          ((resp \u003d\u003d null) ? \"null\":\n-          \"not successful,\" + \" HTTP error code: \" + resp.getStatus()\n-          + \", Server response:\\n\" + resp.getEntity(String.class));\n+    if (resp \u003d\u003d null || resp.getStatusInfo()\n+        .getStatusCode() !\u003d ClientResponse.Status.OK.getStatusCode()) {\n+      String msg \u003d\n+          \"Response from the timeline server is \" + ((resp \u003d\u003d null) ? \"null\"\n+              : \"not successful,\" + \" HTTP error code: \" + resp.getStatus()\n+                  + \", Server response:\\n\" + resp.getEntity(String.class));\n       LOG.error(msg);\n       throw new YarnException(msg);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void putObjects(URI base, String path,\n      MultivaluedMap\u003cString, String\u003e params, Object obj)\n      throws IOException, YarnException {\n    ClientResponse resp;\n    try {\n      resp \u003d connector.getClient().resource(base).path(path).queryParams(params)\n          .accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON)\n          .put(ClientResponse.class, obj);\n    } catch (RuntimeException re) {\n      // runtime exception is expected if the client cannot connect the server\n      String msg \u003d \"Failed to get the response from the timeline server.\";\n      LOG.error(msg, re);\n      throw new IOException(re);\n    }\n    if (resp \u003d\u003d null || resp.getStatusInfo()\n        .getStatusCode() !\u003d ClientResponse.Status.OK.getStatusCode()) {\n      String msg \u003d\n          \"Response from the timeline server is \" + ((resp \u003d\u003d null) ? \"null\"\n              : \"not successful,\" + \" HTTP error code: \" + resp.getStatus()\n                  + \", Server response:\\n\" + resp.getEntity(String.class));\n      LOG.error(msg);\n      throw new YarnException(msg);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineV2ClientImpl.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineV2ClientImpl.java",
            "oldMethodName": "putObjects",
            "newMethodName": "putObjects"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4675. Reorganize TimelineClient and TimelineClientImpl into separate classes for ATSv1.x and ATSv2. Contributed by Naganarasimha G R.\n",
          "commitDate": "16/02/17 11:41 AM",
          "commitName": "4fa1afdb883dab8786d2fb5c72a195dd2e87d711",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "16/02/17 5:39 AM",
          "commitNameOld": "5690b51ef7c708c0a71162ddaff04466bc71cdcc",
          "commitAuthorOld": "Wei-Chiu Chuang",
          "daysBetweenCommits": 0.25,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,24 @@\n-  protected void putObjects(\n-      URI base, String path, MultivaluedMap\u003cString, String\u003e params, Object obj)\n-          throws IOException, YarnException {\n+  protected void putObjects(URI base, String path,\n+      MultivaluedMap\u003cString, String\u003e params, Object obj)\n+      throws IOException, YarnException {\n     ClientResponse resp;\n     try {\n-      resp \u003d client.resource(base).path(path).queryParams(params)\n-          .accept(MediaType.APPLICATION_JSON)\n-          .type(MediaType.APPLICATION_JSON)\n+      resp \u003d connector.getClient().resource(base).path(path).queryParams(params)\n+          .accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON)\n           .put(ClientResponse.class, obj);\n     } catch (RuntimeException re) {\n       // runtime exception is expected if the client cannot connect the server\n-      String msg \u003d\n-          \"Failed to get the response from the timeline server.\";\n+      String msg \u003d \"Failed to get the response from the timeline server.\";\n       LOG.error(msg, re);\n       throw new IOException(re);\n     }\n-    if (resp \u003d\u003d null ||\n-        resp.getStatusInfo().getStatusCode() !\u003d\n-            ClientResponse.Status.OK.getStatusCode()) {\n-      String msg \u003d \"Response from the timeline server is \" +\n-          ((resp \u003d\u003d null) ? \"null\":\n-          \"not successful,\" + \" HTTP error code: \" + resp.getStatus()\n-          + \", Server response:\\n\" + resp.getEntity(String.class));\n+    if (resp \u003d\u003d null || resp.getStatusInfo()\n+        .getStatusCode() !\u003d ClientResponse.Status.OK.getStatusCode()) {\n+      String msg \u003d\n+          \"Response from the timeline server is \" + ((resp \u003d\u003d null) ? \"null\"\n+              : \"not successful,\" + \" HTTP error code: \" + resp.getStatus()\n+                  + \", Server response:\\n\" + resp.getEntity(String.class));\n       LOG.error(msg);\n       throw new YarnException(msg);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void putObjects(URI base, String path,\n      MultivaluedMap\u003cString, String\u003e params, Object obj)\n      throws IOException, YarnException {\n    ClientResponse resp;\n    try {\n      resp \u003d connector.getClient().resource(base).path(path).queryParams(params)\n          .accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON)\n          .put(ClientResponse.class, obj);\n    } catch (RuntimeException re) {\n      // runtime exception is expected if the client cannot connect the server\n      String msg \u003d \"Failed to get the response from the timeline server.\";\n      LOG.error(msg, re);\n      throw new IOException(re);\n    }\n    if (resp \u003d\u003d null || resp.getStatusInfo()\n        .getStatusCode() !\u003d ClientResponse.Status.OK.getStatusCode()) {\n      String msg \u003d\n          \"Response from the timeline server is \" + ((resp \u003d\u003d null) ? \"null\"\n              : \"not successful,\" + \" HTTP error code: \" + resp.getStatus()\n                  + \", Server response:\\n\" + resp.getEntity(String.class));\n      LOG.error(msg);\n      throw new YarnException(msg);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineV2ClientImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "6cf6ab7b780de2b0c2c9ea730e1f366965a0d682": {
      "type": "Ybodychange",
      "commitMessage": "Made a number of miscellaneous fixes for javac, javadoc, and checstyle warnings.\n",
      "commitDate": "10/07/16 8:46 AM",
      "commitName": "6cf6ab7b780de2b0c2c9ea730e1f366965a0d682",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:46 AM",
      "commitNameOld": "1ff6833bbacf5c4eeaff5e70553ac083a691bb21",
      "commitAuthorOld": "Varun Saxena",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,27 @@\n   protected void putObjects(\n       URI base, String path, MultivaluedMap\u003cString, String\u003e params, Object obj)\n           throws IOException, YarnException {\n     ClientResponse resp;\n     try {\n       resp \u003d client.resource(base).path(path).queryParams(params)\n           .accept(MediaType.APPLICATION_JSON)\n           .type(MediaType.APPLICATION_JSON)\n           .put(ClientResponse.class, obj);\n     } catch (RuntimeException re) {\n       // runtime exception is expected if the client cannot connect the server\n       String msg \u003d\n           \"Failed to get the response from the timeline server.\";\n       LOG.error(msg, re);\n       throw new IOException(re);\n     }\n     if (resp \u003d\u003d null ||\n-        resp.getClientResponseStatus() !\u003d ClientResponse.Status.OK) {\n+        resp.getStatusInfo().getStatusCode() !\u003d\n+            ClientResponse.Status.OK.getStatusCode()) {\n       String msg \u003d \"Response from the timeline server is \" +\n           ((resp \u003d\u003d null) ? \"null\":\n           \"not successful,\" + \" HTTP error code: \" + resp.getStatus()\n           + \", Server response:\\n\" + resp.getEntity(String.class));\n       LOG.error(msg);\n       throw new YarnException(msg);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void putObjects(\n      URI base, String path, MultivaluedMap\u003cString, String\u003e params, Object obj)\n          throws IOException, YarnException {\n    ClientResponse resp;\n    try {\n      resp \u003d client.resource(base).path(path).queryParams(params)\n          .accept(MediaType.APPLICATION_JSON)\n          .type(MediaType.APPLICATION_JSON)\n          .put(ClientResponse.class, obj);\n    } catch (RuntimeException re) {\n      // runtime exception is expected if the client cannot connect the server\n      String msg \u003d\n          \"Failed to get the response from the timeline server.\";\n      LOG.error(msg, re);\n      throw new IOException(re);\n    }\n    if (resp \u003d\u003d null ||\n        resp.getStatusInfo().getStatusCode() !\u003d\n            ClientResponse.Status.OK.getStatusCode()) {\n      String msg \u003d \"Response from the timeline server is \" +\n          ((resp \u003d\u003d null) ? \"null\":\n          \"not successful,\" + \" HTTP error code: \" + resp.getStatus()\n          + \", Server response:\\n\" + resp.getEntity(String.class));\n      LOG.error(msg);\n      throw new YarnException(msg);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
      "extendedDetails": {}
    },
    "84c35ac6c4a76c31d9bf9c87b87ed29394564611": {
      "type": "Ymodifierchange",
      "commitMessage": "YARN-4711. NM is going down with NPE\u0027s due to single thread processing of events by Timeline client (Naganarasimha G R via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "84c35ac6c4a76c31d9bf9c87b87ed29394564611",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "0d02ab8729630ad3cfb4300702927333b1d349e3",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n-  private void putObjects(\n+  protected void putObjects(\n       URI base, String path, MultivaluedMap\u003cString, String\u003e params, Object obj)\n           throws IOException, YarnException {\n     ClientResponse resp;\n     try {\n       resp \u003d client.resource(base).path(path).queryParams(params)\n           .accept(MediaType.APPLICATION_JSON)\n           .type(MediaType.APPLICATION_JSON)\n           .put(ClientResponse.class, obj);\n     } catch (RuntimeException re) {\n       // runtime exception is expected if the client cannot connect the server\n       String msg \u003d\n           \"Failed to get the response from the timeline server.\";\n       LOG.error(msg, re);\n       throw new IOException(re);\n     }\n     if (resp \u003d\u003d null ||\n         resp.getClientResponseStatus() !\u003d ClientResponse.Status.OK) {\n       String msg \u003d \"Response from the timeline server is \" + \n           ((resp \u003d\u003d null) ? \"null\": \n           \"not successful,\" + \" HTTP error code: \" + resp.getStatus()\n           + \", Server response:\\n\" + resp.getEntity(String.class));\n       LOG.error(msg);\n       throw new YarnException(msg);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void putObjects(\n      URI base, String path, MultivaluedMap\u003cString, String\u003e params, Object obj)\n          throws IOException, YarnException {\n    ClientResponse resp;\n    try {\n      resp \u003d client.resource(base).path(path).queryParams(params)\n          .accept(MediaType.APPLICATION_JSON)\n          .type(MediaType.APPLICATION_JSON)\n          .put(ClientResponse.class, obj);\n    } catch (RuntimeException re) {\n      // runtime exception is expected if the client cannot connect the server\n      String msg \u003d\n          \"Failed to get the response from the timeline server.\";\n      LOG.error(msg, re);\n      throw new IOException(re);\n    }\n    if (resp \u003d\u003d null ||\n        resp.getClientResponseStatus() !\u003d ClientResponse.Status.OK) {\n      String msg \u003d \"Response from the timeline server is \" + \n          ((resp \u003d\u003d null) ? \"null\": \n          \"not successful,\" + \" HTTP error code: \" + resp.getStatus()\n          + \", Server response:\\n\" + resp.getEntity(String.class));\n      LOG.error(msg);\n      throw new YarnException(msg);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[protected]"
      }
    },
    "5712b8f9fd1859fe046b482889239bd164ed7dab": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3334. NM uses timeline client to publish container metrics to new timeline service. Contributed by Junping Du.\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "5712b8f9fd1859fe046b482889239bd164ed7dab",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "2188a07e5bea1da26bf679ca0ece26ab596d3438",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,26 @@\n   private void putObjects(\n       URI base, String path, MultivaluedMap\u003cString, String\u003e params, Object obj)\n           throws IOException, YarnException {\n     ClientResponse resp;\n     try {\n       resp \u003d client.resource(base).path(path).queryParams(params)\n           .accept(MediaType.APPLICATION_JSON)\n           .type(MediaType.APPLICATION_JSON)\n           .put(ClientResponse.class, obj);\n     } catch (RuntimeException re) {\n       // runtime exception is expected if the client cannot connect the server\n       String msg \u003d\n           \"Failed to get the response from the timeline server.\";\n       LOG.error(msg, re);\n       throw new IOException(re);\n     }\n     if (resp \u003d\u003d null ||\n         resp.getClientResponseStatus() !\u003d ClientResponse.Status.OK) {\n-      String msg \u003d\n-          \"Failed to get the response from the timeline server.\";\n+      String msg \u003d \"Response from the timeline server is \" + \n+          ((resp \u003d\u003d null) ? \"null\": \n+          \"not successful,\" + \" HTTP error code: \" + resp.getStatus()\n+          + \", Server response:\\n\" + resp.getEntity(String.class));\n       LOG.error(msg);\n-      if (LOG.isDebugEnabled() \u0026\u0026 resp !\u003d null) {\n-        String output \u003d resp.getEntity(String.class);\n-        LOG.debug(\"HTTP error code: \" + resp.getStatus()\n-            + \" Server response:\\n\" + output);\n-      }\n       throw new YarnException(msg);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void putObjects(\n      URI base, String path, MultivaluedMap\u003cString, String\u003e params, Object obj)\n          throws IOException, YarnException {\n    ClientResponse resp;\n    try {\n      resp \u003d client.resource(base).path(path).queryParams(params)\n          .accept(MediaType.APPLICATION_JSON)\n          .type(MediaType.APPLICATION_JSON)\n          .put(ClientResponse.class, obj);\n    } catch (RuntimeException re) {\n      // runtime exception is expected if the client cannot connect the server\n      String msg \u003d\n          \"Failed to get the response from the timeline server.\";\n      LOG.error(msg, re);\n      throw new IOException(re);\n    }\n    if (resp \u003d\u003d null ||\n        resp.getClientResponseStatus() !\u003d ClientResponse.Status.OK) {\n      String msg \u003d \"Response from the timeline server is \" + \n          ((resp \u003d\u003d null) ? \"null\": \n          \"not successful,\" + \" HTTP error code: \" + resp.getStatus()\n          + \", Server response:\\n\" + resp.getEntity(String.class));\n      LOG.error(msg);\n      throw new YarnException(msg);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
      "extendedDetails": {}
    },
    "4f0c7eaff3b66df6e87aa251e1316a85f38ffab5": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3240. Implement client API to put generic entities. Contributed by Zhijie Shen\n\n(cherry picked from commit 4487da249f448d5c67b712cd0aa723e764eed77d)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "4f0c7eaff3b66df6e87aa251e1316a85f38ffab5",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,29 @@\n+  private void putObjects(\n+      URI base, String path, MultivaluedMap\u003cString, String\u003e params, Object obj)\n+          throws IOException, YarnException {\n+    ClientResponse resp;\n+    try {\n+      resp \u003d client.resource(base).path(path).queryParams(params)\n+          .accept(MediaType.APPLICATION_JSON)\n+          .type(MediaType.APPLICATION_JSON)\n+          .put(ClientResponse.class, obj);\n+    } catch (RuntimeException re) {\n+      // runtime exception is expected if the client cannot connect the server\n+      String msg \u003d\n+          \"Failed to get the response from the timeline server.\";\n+      LOG.error(msg, re);\n+      throw new IOException(re);\n+    }\n+    if (resp \u003d\u003d null ||\n+        resp.getClientResponseStatus() !\u003d ClientResponse.Status.OK) {\n+      String msg \u003d\n+          \"Failed to get the response from the timeline server.\";\n+      LOG.error(msg);\n+      if (LOG.isDebugEnabled() \u0026\u0026 resp !\u003d null) {\n+        String output \u003d resp.getEntity(String.class);\n+        LOG.debug(\"HTTP error code: \" + resp.getStatus()\n+            + \" Server response:\\n\" + output);\n+      }\n+      throw new YarnException(msg);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void putObjects(\n      URI base, String path, MultivaluedMap\u003cString, String\u003e params, Object obj)\n          throws IOException, YarnException {\n    ClientResponse resp;\n    try {\n      resp \u003d client.resource(base).path(path).queryParams(params)\n          .accept(MediaType.APPLICATION_JSON)\n          .type(MediaType.APPLICATION_JSON)\n          .put(ClientResponse.class, obj);\n    } catch (RuntimeException re) {\n      // runtime exception is expected if the client cannot connect the server\n      String msg \u003d\n          \"Failed to get the response from the timeline server.\";\n      LOG.error(msg, re);\n      throw new IOException(re);\n    }\n    if (resp \u003d\u003d null ||\n        resp.getClientResponseStatus() !\u003d ClientResponse.Status.OK) {\n      String msg \u003d\n          \"Failed to get the response from the timeline server.\";\n      LOG.error(msg);\n      if (LOG.isDebugEnabled() \u0026\u0026 resp !\u003d null) {\n        String output \u003d resp.getEntity(String.class);\n        LOG.debug(\"HTTP error code: \" + resp.getStatus()\n            + \" Server response:\\n\" + output);\n      }\n      throw new YarnException(msg);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java"
    }
  }
}