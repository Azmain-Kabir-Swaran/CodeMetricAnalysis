{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "XAttrHelper.java",
  "functionName": "buildXAttr",
  "functionId": "buildXAttr___name-String__value-byte[]",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/XAttrHelper.java",
  "functionStartLine": 49,
  "functionEndLine": 83,
  "numCommitsSeen": 9,
  "timeTaken": 3685,
  "changeHistory": [
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
    "d1c6accb6f87b08975175580e15f1ff1fe29ab04",
    "9cedad11d8d2197a54732667a15344983de5c437",
    "946456c6d88780abe0251b098dd771e9e1e93ab3",
    "9ca2f34c8fb03227e7364ced5183562e9f805400",
    "ac23a55547716df29b3e25c98a113399e184d9d1"
  ],
  "changeHistoryShort": {
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": "Ybodychange",
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c": "Yfilerename",
    "d1c6accb6f87b08975175580e15f1ff1fe29ab04": "Ybodychange",
    "9cedad11d8d2197a54732667a15344983de5c437": "Ybodychange",
    "946456c6d88780abe0251b098dd771e9e1e93ab3": "Ybodychange",
    "9ca2f34c8fb03227e7364ced5183562e9f805400": "Ybodychange",
    "ac23a55547716df29b3e25c98a113399e184d9d1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8979. Clean up checkstyle warnings in hadoop-hdfs-client module. Contributed by Mingliang Liu.\n",
      "commitDate": "03/10/15 11:38 AM",
      "commitName": "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "26/09/15 11:08 AM",
      "commitNameOld": "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 7.02,
      "commitsBetweenForRepo": 46,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,35 @@\n   public static XAttr buildXAttr(String name, byte[] value) {\n     Preconditions.checkNotNull(name, \"XAttr name cannot be null.\");\n-    \n+\n     final int prefixIndex \u003d name.indexOf(\".\");\n     if (prefixIndex \u003c 3) {// Prefix length is at least 3.\n       throw new HadoopIllegalArgumentException(\"An XAttr name must be \" +\n           \"prefixed with user/trusted/security/system/raw, followed by a \u0027.\u0027\");\n     } else if (prefixIndex \u003d\u003d name.length() - 1) {\n       throw new HadoopIllegalArgumentException(\"XAttr name cannot be empty.\");\n     }\n-    \n+\n     NameSpace ns;\n     final String prefix \u003d name.substring(0, prefixIndex);\n     if (StringUtils.equalsIgnoreCase(prefix, NameSpace.USER.toString())) {\n       ns \u003d NameSpace.USER;\n     } else if (\n         StringUtils.equalsIgnoreCase(prefix, NameSpace.TRUSTED.toString())) {\n       ns \u003d NameSpace.TRUSTED;\n     } else if (\n         StringUtils.equalsIgnoreCase(prefix, NameSpace.SYSTEM.toString())) {\n       ns \u003d NameSpace.SYSTEM;\n     } else if (\n         StringUtils.equalsIgnoreCase(prefix, NameSpace.SECURITY.toString())) {\n       ns \u003d NameSpace.SECURITY;\n     } else if (\n         StringUtils.equalsIgnoreCase(prefix, NameSpace.RAW.toString())) {\n       ns \u003d NameSpace.RAW;\n     } else {\n       throw new HadoopIllegalArgumentException(\"An XAttr name must be \" +\n           \"prefixed with user/trusted/security/system/raw, followed by a \u0027.\u0027\");\n     }\n-    XAttr xAttr \u003d (new XAttr.Builder()).setNameSpace(ns).setName(name.\n+\n+    return (new XAttr.Builder()).setNameSpace(ns).setName(name.\n         substring(prefixIndex + 1)).setValue(value).build();\n-    \n-    return xAttr;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static XAttr buildXAttr(String name, byte[] value) {\n    Preconditions.checkNotNull(name, \"XAttr name cannot be null.\");\n\n    final int prefixIndex \u003d name.indexOf(\".\");\n    if (prefixIndex \u003c 3) {// Prefix length is at least 3.\n      throw new HadoopIllegalArgumentException(\"An XAttr name must be \" +\n          \"prefixed with user/trusted/security/system/raw, followed by a \u0027.\u0027\");\n    } else if (prefixIndex \u003d\u003d name.length() - 1) {\n      throw new HadoopIllegalArgumentException(\"XAttr name cannot be empty.\");\n    }\n\n    NameSpace ns;\n    final String prefix \u003d name.substring(0, prefixIndex);\n    if (StringUtils.equalsIgnoreCase(prefix, NameSpace.USER.toString())) {\n      ns \u003d NameSpace.USER;\n    } else if (\n        StringUtils.equalsIgnoreCase(prefix, NameSpace.TRUSTED.toString())) {\n      ns \u003d NameSpace.TRUSTED;\n    } else if (\n        StringUtils.equalsIgnoreCase(prefix, NameSpace.SYSTEM.toString())) {\n      ns \u003d NameSpace.SYSTEM;\n    } else if (\n        StringUtils.equalsIgnoreCase(prefix, NameSpace.SECURITY.toString())) {\n      ns \u003d NameSpace.SECURITY;\n    } else if (\n        StringUtils.equalsIgnoreCase(prefix, NameSpace.RAW.toString())) {\n      ns \u003d NameSpace.RAW;\n    } else {\n      throw new HadoopIllegalArgumentException(\"An XAttr name must be \" +\n          \"prefixed with user/trusted/security/system/raw, followed by a \u0027.\u0027\");\n    }\n\n    return (new XAttr.Builder()).setNameSpace(ns).setName(name.\n        substring(prefixIndex + 1)).setValue(value).build();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/XAttrHelper.java",
      "extendedDetails": {}
    },
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8053. Move DFSIn/OutputStream and related classes to hadoop-hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "26/09/15 11:08 AM",
      "commitName": "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "26/09/15 9:06 AM",
      "commitNameOld": "861b52db242f238d7e36ad75c158025be959a696",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static XAttr buildXAttr(String name, byte[] value) {\n    Preconditions.checkNotNull(name, \"XAttr name cannot be null.\");\n    \n    final int prefixIndex \u003d name.indexOf(\".\");\n    if (prefixIndex \u003c 3) {// Prefix length is at least 3.\n      throw new HadoopIllegalArgumentException(\"An XAttr name must be \" +\n          \"prefixed with user/trusted/security/system/raw, followed by a \u0027.\u0027\");\n    } else if (prefixIndex \u003d\u003d name.length() - 1) {\n      throw new HadoopIllegalArgumentException(\"XAttr name cannot be empty.\");\n    }\n    \n    NameSpace ns;\n    final String prefix \u003d name.substring(0, prefixIndex);\n    if (StringUtils.equalsIgnoreCase(prefix, NameSpace.USER.toString())) {\n      ns \u003d NameSpace.USER;\n    } else if (\n        StringUtils.equalsIgnoreCase(prefix, NameSpace.TRUSTED.toString())) {\n      ns \u003d NameSpace.TRUSTED;\n    } else if (\n        StringUtils.equalsIgnoreCase(prefix, NameSpace.SYSTEM.toString())) {\n      ns \u003d NameSpace.SYSTEM;\n    } else if (\n        StringUtils.equalsIgnoreCase(prefix, NameSpace.SECURITY.toString())) {\n      ns \u003d NameSpace.SECURITY;\n    } else if (\n        StringUtils.equalsIgnoreCase(prefix, NameSpace.RAW.toString())) {\n      ns \u003d NameSpace.RAW;\n    } else {\n      throw new HadoopIllegalArgumentException(\"An XAttr name must be \" +\n          \"prefixed with user/trusted/security/system/raw, followed by a \u0027.\u0027\");\n    }\n    XAttr xAttr \u003d (new XAttr.Builder()).setNameSpace(ns).setName(name.\n        substring(prefixIndex + 1)).setValue(value).build();\n    \n    return xAttr;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/XAttrHelper.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/XAttrHelper.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/XAttrHelper.java"
      }
    },
    "d1c6accb6f87b08975175580e15f1ff1fe29ab04": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11602. Fix toUpperCase/toLowerCase to use Locale.ENGLISH. (ozawa)\n",
      "commitDate": "02/03/15 9:17 PM",
      "commitName": "d1c6accb6f87b08975175580e15f1ff1fe29ab04",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "24/02/15 7:32 AM",
      "commitNameOld": "9cedad11d8d2197a54732667a15344983de5c437",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 6.57,
      "commitsBetweenForRepo": 57,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,36 @@\n   public static XAttr buildXAttr(String name, byte[] value) {\n     Preconditions.checkNotNull(name, \"XAttr name cannot be null.\");\n     \n     final int prefixIndex \u003d name.indexOf(\".\");\n     if (prefixIndex \u003c 3) {// Prefix length is at least 3.\n       throw new HadoopIllegalArgumentException(\"An XAttr name must be \" +\n           \"prefixed with user/trusted/security/system/raw, followed by a \u0027.\u0027\");\n     } else if (prefixIndex \u003d\u003d name.length() - 1) {\n       throw new HadoopIllegalArgumentException(\"XAttr name cannot be empty.\");\n     }\n     \n     NameSpace ns;\n-    final String prefix \u003d name.substring(0, prefixIndex).toLowerCase();\n-    if (prefix.equals(NameSpace.USER.toString().toLowerCase())) {\n+    final String prefix \u003d name.substring(0, prefixIndex);\n+    if (StringUtils.equalsIgnoreCase(prefix, NameSpace.USER.toString())) {\n       ns \u003d NameSpace.USER;\n-    } else if (prefix.equals(NameSpace.TRUSTED.toString().toLowerCase())) {\n+    } else if (\n+        StringUtils.equalsIgnoreCase(prefix, NameSpace.TRUSTED.toString())) {\n       ns \u003d NameSpace.TRUSTED;\n-    } else if (prefix.equals(NameSpace.SYSTEM.toString().toLowerCase())) {\n+    } else if (\n+        StringUtils.equalsIgnoreCase(prefix, NameSpace.SYSTEM.toString())) {\n       ns \u003d NameSpace.SYSTEM;\n-    } else if (prefix.equals(NameSpace.SECURITY.toString().toLowerCase())) {\n+    } else if (\n+        StringUtils.equalsIgnoreCase(prefix, NameSpace.SECURITY.toString())) {\n       ns \u003d NameSpace.SECURITY;\n-    } else if (prefix.equals(NameSpace.RAW.toString().toLowerCase())) {\n+    } else if (\n+        StringUtils.equalsIgnoreCase(prefix, NameSpace.RAW.toString())) {\n       ns \u003d NameSpace.RAW;\n     } else {\n       throw new HadoopIllegalArgumentException(\"An XAttr name must be \" +\n           \"prefixed with user/trusted/security/system/raw, followed by a \u0027.\u0027\");\n     }\n     XAttr xAttr \u003d (new XAttr.Builder()).setNameSpace(ns).setName(name.\n         substring(prefixIndex + 1)).setValue(value).build();\n     \n     return xAttr;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static XAttr buildXAttr(String name, byte[] value) {\n    Preconditions.checkNotNull(name, \"XAttr name cannot be null.\");\n    \n    final int prefixIndex \u003d name.indexOf(\".\");\n    if (prefixIndex \u003c 3) {// Prefix length is at least 3.\n      throw new HadoopIllegalArgumentException(\"An XAttr name must be \" +\n          \"prefixed with user/trusted/security/system/raw, followed by a \u0027.\u0027\");\n    } else if (prefixIndex \u003d\u003d name.length() - 1) {\n      throw new HadoopIllegalArgumentException(\"XAttr name cannot be empty.\");\n    }\n    \n    NameSpace ns;\n    final String prefix \u003d name.substring(0, prefixIndex);\n    if (StringUtils.equalsIgnoreCase(prefix, NameSpace.USER.toString())) {\n      ns \u003d NameSpace.USER;\n    } else if (\n        StringUtils.equalsIgnoreCase(prefix, NameSpace.TRUSTED.toString())) {\n      ns \u003d NameSpace.TRUSTED;\n    } else if (\n        StringUtils.equalsIgnoreCase(prefix, NameSpace.SYSTEM.toString())) {\n      ns \u003d NameSpace.SYSTEM;\n    } else if (\n        StringUtils.equalsIgnoreCase(prefix, NameSpace.SECURITY.toString())) {\n      ns \u003d NameSpace.SECURITY;\n    } else if (\n        StringUtils.equalsIgnoreCase(prefix, NameSpace.RAW.toString())) {\n      ns \u003d NameSpace.RAW;\n    } else {\n      throw new HadoopIllegalArgumentException(\"An XAttr name must be \" +\n          \"prefixed with user/trusted/security/system/raw, followed by a \u0027.\u0027\");\n    }\n    XAttr xAttr \u003d (new XAttr.Builder()).setNameSpace(ns).setName(name.\n        substring(prefixIndex + 1)).setValue(value).build();\n    \n    return xAttr;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/XAttrHelper.java",
      "extendedDetails": {}
    },
    "9cedad11d8d2197a54732667a15344983de5c437": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-11602. Fix toUpperCase/toLowerCase to use Locale.ENGLISH. (ozawa)\"\n\nThis reverts commit 946456c6d88780abe0251b098dd771e9e1e93ab3.\n\nConflicts:\n\thadoop-common-project/hadoop-common/CHANGES.txt\n\thadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/QuotaByStorageTypeEntry.java\n",
      "commitDate": "24/02/15 7:32 AM",
      "commitName": "9cedad11d8d2197a54732667a15344983de5c437",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "18/02/15 8:06 PM",
      "commitNameOld": "946456c6d88780abe0251b098dd771e9e1e93ab3",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 5.48,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,32 @@\n   public static XAttr buildXAttr(String name, byte[] value) {\n     Preconditions.checkNotNull(name, \"XAttr name cannot be null.\");\n     \n     final int prefixIndex \u003d name.indexOf(\".\");\n     if (prefixIndex \u003c 3) {// Prefix length is at least 3.\n       throw new HadoopIllegalArgumentException(\"An XAttr name must be \" +\n           \"prefixed with user/trusted/security/system/raw, followed by a \u0027.\u0027\");\n     } else if (prefixIndex \u003d\u003d name.length() - 1) {\n       throw new HadoopIllegalArgumentException(\"XAttr name cannot be empty.\");\n     }\n     \n     NameSpace ns;\n-    final String prefix \u003d name.substring(0, prefixIndex)\n-        .toLowerCase(Locale.ENGLISH);\n-    if (prefix.equals(\n-        NameSpace.USER.toString().toLowerCase(Locale.ENGLISH))) {\n+    final String prefix \u003d name.substring(0, prefixIndex).toLowerCase();\n+    if (prefix.equals(NameSpace.USER.toString().toLowerCase())) {\n       ns \u003d NameSpace.USER;\n-    } else if (prefix.equals(\n-        NameSpace.TRUSTED.toString().toLowerCase(Locale.ENGLISH))) {\n+    } else if (prefix.equals(NameSpace.TRUSTED.toString().toLowerCase())) {\n       ns \u003d NameSpace.TRUSTED;\n-    } else if (prefix.equals(\n-        NameSpace.SYSTEM.toString().toLowerCase(Locale.ENGLISH))) {\n+    } else if (prefix.equals(NameSpace.SYSTEM.toString().toLowerCase())) {\n       ns \u003d NameSpace.SYSTEM;\n-    } else if (prefix.equals(\n-        NameSpace.SECURITY.toString().toLowerCase(Locale.ENGLISH))) {\n+    } else if (prefix.equals(NameSpace.SECURITY.toString().toLowerCase())) {\n       ns \u003d NameSpace.SECURITY;\n-    } else if (prefix.equals(\n-        NameSpace.RAW.toString().toLowerCase(Locale.ENGLISH))) {\n+    } else if (prefix.equals(NameSpace.RAW.toString().toLowerCase())) {\n       ns \u003d NameSpace.RAW;\n     } else {\n       throw new HadoopIllegalArgumentException(\"An XAttr name must be \" +\n           \"prefixed with user/trusted/security/system/raw, followed by a \u0027.\u0027\");\n     }\n     XAttr xAttr \u003d (new XAttr.Builder()).setNameSpace(ns).setName(name.\n         substring(prefixIndex + 1)).setValue(value).build();\n     \n     return xAttr;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static XAttr buildXAttr(String name, byte[] value) {\n    Preconditions.checkNotNull(name, \"XAttr name cannot be null.\");\n    \n    final int prefixIndex \u003d name.indexOf(\".\");\n    if (prefixIndex \u003c 3) {// Prefix length is at least 3.\n      throw new HadoopIllegalArgumentException(\"An XAttr name must be \" +\n          \"prefixed with user/trusted/security/system/raw, followed by a \u0027.\u0027\");\n    } else if (prefixIndex \u003d\u003d name.length() - 1) {\n      throw new HadoopIllegalArgumentException(\"XAttr name cannot be empty.\");\n    }\n    \n    NameSpace ns;\n    final String prefix \u003d name.substring(0, prefixIndex).toLowerCase();\n    if (prefix.equals(NameSpace.USER.toString().toLowerCase())) {\n      ns \u003d NameSpace.USER;\n    } else if (prefix.equals(NameSpace.TRUSTED.toString().toLowerCase())) {\n      ns \u003d NameSpace.TRUSTED;\n    } else if (prefix.equals(NameSpace.SYSTEM.toString().toLowerCase())) {\n      ns \u003d NameSpace.SYSTEM;\n    } else if (prefix.equals(NameSpace.SECURITY.toString().toLowerCase())) {\n      ns \u003d NameSpace.SECURITY;\n    } else if (prefix.equals(NameSpace.RAW.toString().toLowerCase())) {\n      ns \u003d NameSpace.RAW;\n    } else {\n      throw new HadoopIllegalArgumentException(\"An XAttr name must be \" +\n          \"prefixed with user/trusted/security/system/raw, followed by a \u0027.\u0027\");\n    }\n    XAttr xAttr \u003d (new XAttr.Builder()).setNameSpace(ns).setName(name.\n        substring(prefixIndex + 1)).setValue(value).build();\n    \n    return xAttr;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/XAttrHelper.java",
      "extendedDetails": {}
    },
    "946456c6d88780abe0251b098dd771e9e1e93ab3": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11602. Fix toUpperCase/toLowerCase to use Locale.ENGLISH. (ozawa)\n",
      "commitDate": "18/02/15 8:06 PM",
      "commitName": "946456c6d88780abe0251b098dd771e9e1e93ab3",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "29/07/14 6:35 PM",
      "commitNameOld": "9ca2f34c8fb03227e7364ced5183562e9f805400",
      "commitAuthorOld": "Charles Lamb",
      "daysBetweenCommits": 204.11,
      "commitsBetweenForRepo": 1777,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,38 @@\n   public static XAttr buildXAttr(String name, byte[] value) {\n     Preconditions.checkNotNull(name, \"XAttr name cannot be null.\");\n     \n     final int prefixIndex \u003d name.indexOf(\".\");\n     if (prefixIndex \u003c 3) {// Prefix length is at least 3.\n       throw new HadoopIllegalArgumentException(\"An XAttr name must be \" +\n           \"prefixed with user/trusted/security/system/raw, followed by a \u0027.\u0027\");\n     } else if (prefixIndex \u003d\u003d name.length() - 1) {\n       throw new HadoopIllegalArgumentException(\"XAttr name cannot be empty.\");\n     }\n     \n     NameSpace ns;\n-    final String prefix \u003d name.substring(0, prefixIndex).toLowerCase();\n-    if (prefix.equals(NameSpace.USER.toString().toLowerCase())) {\n+    final String prefix \u003d name.substring(0, prefixIndex)\n+        .toLowerCase(Locale.ENGLISH);\n+    if (prefix.equals(\n+        NameSpace.USER.toString().toLowerCase(Locale.ENGLISH))) {\n       ns \u003d NameSpace.USER;\n-    } else if (prefix.equals(NameSpace.TRUSTED.toString().toLowerCase())) {\n+    } else if (prefix.equals(\n+        NameSpace.TRUSTED.toString().toLowerCase(Locale.ENGLISH))) {\n       ns \u003d NameSpace.TRUSTED;\n-    } else if (prefix.equals(NameSpace.SYSTEM.toString().toLowerCase())) {\n+    } else if (prefix.equals(\n+        NameSpace.SYSTEM.toString().toLowerCase(Locale.ENGLISH))) {\n       ns \u003d NameSpace.SYSTEM;\n-    } else if (prefix.equals(NameSpace.SECURITY.toString().toLowerCase())) {\n+    } else if (prefix.equals(\n+        NameSpace.SECURITY.toString().toLowerCase(Locale.ENGLISH))) {\n       ns \u003d NameSpace.SECURITY;\n-    } else if (prefix.equals(NameSpace.RAW.toString().toLowerCase())) {\n+    } else if (prefix.equals(\n+        NameSpace.RAW.toString().toLowerCase(Locale.ENGLISH))) {\n       ns \u003d NameSpace.RAW;\n     } else {\n       throw new HadoopIllegalArgumentException(\"An XAttr name must be \" +\n           \"prefixed with user/trusted/security/system/raw, followed by a \u0027.\u0027\");\n     }\n     XAttr xAttr \u003d (new XAttr.Builder()).setNameSpace(ns).setName(name.\n         substring(prefixIndex + 1)).setValue(value).build();\n     \n     return xAttr;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static XAttr buildXAttr(String name, byte[] value) {\n    Preconditions.checkNotNull(name, \"XAttr name cannot be null.\");\n    \n    final int prefixIndex \u003d name.indexOf(\".\");\n    if (prefixIndex \u003c 3) {// Prefix length is at least 3.\n      throw new HadoopIllegalArgumentException(\"An XAttr name must be \" +\n          \"prefixed with user/trusted/security/system/raw, followed by a \u0027.\u0027\");\n    } else if (prefixIndex \u003d\u003d name.length() - 1) {\n      throw new HadoopIllegalArgumentException(\"XAttr name cannot be empty.\");\n    }\n    \n    NameSpace ns;\n    final String prefix \u003d name.substring(0, prefixIndex)\n        .toLowerCase(Locale.ENGLISH);\n    if (prefix.equals(\n        NameSpace.USER.toString().toLowerCase(Locale.ENGLISH))) {\n      ns \u003d NameSpace.USER;\n    } else if (prefix.equals(\n        NameSpace.TRUSTED.toString().toLowerCase(Locale.ENGLISH))) {\n      ns \u003d NameSpace.TRUSTED;\n    } else if (prefix.equals(\n        NameSpace.SYSTEM.toString().toLowerCase(Locale.ENGLISH))) {\n      ns \u003d NameSpace.SYSTEM;\n    } else if (prefix.equals(\n        NameSpace.SECURITY.toString().toLowerCase(Locale.ENGLISH))) {\n      ns \u003d NameSpace.SECURITY;\n    } else if (prefix.equals(\n        NameSpace.RAW.toString().toLowerCase(Locale.ENGLISH))) {\n      ns \u003d NameSpace.RAW;\n    } else {\n      throw new HadoopIllegalArgumentException(\"An XAttr name must be \" +\n          \"prefixed with user/trusted/security/system/raw, followed by a \u0027.\u0027\");\n    }\n    XAttr xAttr \u003d (new XAttr.Builder()).setNameSpace(ns).setName(name.\n        substring(prefixIndex + 1)).setValue(value).build();\n    \n    return xAttr;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/XAttrHelper.java",
      "extendedDetails": {}
    },
    "9ca2f34c8fb03227e7364ced5183562e9f805400": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6730. Create a .RAW extended attribute namespace. (clamb)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1614535 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/07/14 6:35 PM",
      "commitName": "9ca2f34c8fb03227e7364ced5183562e9f805400",
      "commitAuthor": "Charles Lamb",
      "commitDateOld": "05/06/14 8:48 PM",
      "commitNameOld": "6a4f6d6b3e41e660c214b77c9ed43d4c65200b6a",
      "commitAuthorOld": "Uma Maheswara Rao G",
      "daysBetweenCommits": 53.91,
      "commitsBetweenForRepo": 402,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,32 @@\n   public static XAttr buildXAttr(String name, byte[] value) {\n     Preconditions.checkNotNull(name, \"XAttr name cannot be null.\");\n     \n     final int prefixIndex \u003d name.indexOf(\".\");\n-    if (prefixIndex \u003c 4) {// Prefix length is at least 4.\n+    if (prefixIndex \u003c 3) {// Prefix length is at least 3.\n       throw new HadoopIllegalArgumentException(\"An XAttr name must be \" +\n-          \"prefixed with user/trusted/security/system, followed by a \u0027.\u0027\");\n+          \"prefixed with user/trusted/security/system/raw, followed by a \u0027.\u0027\");\n     } else if (prefixIndex \u003d\u003d name.length() - 1) {\n       throw new HadoopIllegalArgumentException(\"XAttr name cannot be empty.\");\n     }\n     \n     NameSpace ns;\n     final String prefix \u003d name.substring(0, prefixIndex).toLowerCase();\n     if (prefix.equals(NameSpace.USER.toString().toLowerCase())) {\n       ns \u003d NameSpace.USER;\n     } else if (prefix.equals(NameSpace.TRUSTED.toString().toLowerCase())) {\n       ns \u003d NameSpace.TRUSTED;\n     } else if (prefix.equals(NameSpace.SYSTEM.toString().toLowerCase())) {\n       ns \u003d NameSpace.SYSTEM;\n     } else if (prefix.equals(NameSpace.SECURITY.toString().toLowerCase())) {\n       ns \u003d NameSpace.SECURITY;\n+    } else if (prefix.equals(NameSpace.RAW.toString().toLowerCase())) {\n+      ns \u003d NameSpace.RAW;\n     } else {\n       throw new HadoopIllegalArgumentException(\"An XAttr name must be \" +\n-          \"prefixed with user/trusted/security/system, followed by a \u0027.\u0027\");\n+          \"prefixed with user/trusted/security/system/raw, followed by a \u0027.\u0027\");\n     }\n     XAttr xAttr \u003d (new XAttr.Builder()).setNameSpace(ns).setName(name.\n         substring(prefixIndex + 1)).setValue(value).build();\n     \n     return xAttr;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static XAttr buildXAttr(String name, byte[] value) {\n    Preconditions.checkNotNull(name, \"XAttr name cannot be null.\");\n    \n    final int prefixIndex \u003d name.indexOf(\".\");\n    if (prefixIndex \u003c 3) {// Prefix length is at least 3.\n      throw new HadoopIllegalArgumentException(\"An XAttr name must be \" +\n          \"prefixed with user/trusted/security/system/raw, followed by a \u0027.\u0027\");\n    } else if (prefixIndex \u003d\u003d name.length() - 1) {\n      throw new HadoopIllegalArgumentException(\"XAttr name cannot be empty.\");\n    }\n    \n    NameSpace ns;\n    final String prefix \u003d name.substring(0, prefixIndex).toLowerCase();\n    if (prefix.equals(NameSpace.USER.toString().toLowerCase())) {\n      ns \u003d NameSpace.USER;\n    } else if (prefix.equals(NameSpace.TRUSTED.toString().toLowerCase())) {\n      ns \u003d NameSpace.TRUSTED;\n    } else if (prefix.equals(NameSpace.SYSTEM.toString().toLowerCase())) {\n      ns \u003d NameSpace.SYSTEM;\n    } else if (prefix.equals(NameSpace.SECURITY.toString().toLowerCase())) {\n      ns \u003d NameSpace.SECURITY;\n    } else if (prefix.equals(NameSpace.RAW.toString().toLowerCase())) {\n      ns \u003d NameSpace.RAW;\n    } else {\n      throw new HadoopIllegalArgumentException(\"An XAttr name must be \" +\n          \"prefixed with user/trusted/security/system/raw, followed by a \u0027.\u0027\");\n    }\n    XAttr xAttr \u003d (new XAttr.Builder()).setNameSpace(ns).setName(name.\n        substring(prefixIndex + 1)).setValue(value).build();\n    \n    return xAttr;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/XAttrHelper.java",
      "extendedDetails": {}
    },
    "ac23a55547716df29b3e25c98a113399e184d9d1": {
      "type": "Yintroduced",
      "commitMessage": "Merge HDFS-2006 HDFS XAttrs branch to Trunk\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1596575 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/05/14 6:57 AM",
      "commitName": "ac23a55547716df29b3e25c98a113399e184d9d1",
      "commitAuthor": "Uma Maheswara Rao G",
      "diff": "@@ -0,0 +1,30 @@\n+  public static XAttr buildXAttr(String name, byte[] value) {\n+    Preconditions.checkNotNull(name, \"XAttr name cannot be null.\");\n+    \n+    final int prefixIndex \u003d name.indexOf(\".\");\n+    if (prefixIndex \u003c 4) {// Prefix length is at least 4.\n+      throw new HadoopIllegalArgumentException(\"An XAttr name must be \" +\n+          \"prefixed with user/trusted/security/system, followed by a \u0027.\u0027\");\n+    } else if (prefixIndex \u003d\u003d name.length() - 1) {\n+      throw new HadoopIllegalArgumentException(\"XAttr name cannot be empty.\");\n+    }\n+    \n+    NameSpace ns;\n+    final String prefix \u003d name.substring(0, prefixIndex).toLowerCase();\n+    if (prefix.equals(NameSpace.USER.toString().toLowerCase())) {\n+      ns \u003d NameSpace.USER;\n+    } else if (prefix.equals(NameSpace.TRUSTED.toString().toLowerCase())) {\n+      ns \u003d NameSpace.TRUSTED;\n+    } else if (prefix.equals(NameSpace.SYSTEM.toString().toLowerCase())) {\n+      ns \u003d NameSpace.SYSTEM;\n+    } else if (prefix.equals(NameSpace.SECURITY.toString().toLowerCase())) {\n+      ns \u003d NameSpace.SECURITY;\n+    } else {\n+      throw new HadoopIllegalArgumentException(\"An XAttr name must be \" +\n+          \"prefixed with user/trusted/security/system, followed by a \u0027.\u0027\");\n+    }\n+    XAttr xAttr \u003d (new XAttr.Builder()).setNameSpace(ns).setName(name.\n+        substring(prefixIndex + 1)).setValue(value).build();\n+    \n+    return xAttr;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static XAttr buildXAttr(String name, byte[] value) {\n    Preconditions.checkNotNull(name, \"XAttr name cannot be null.\");\n    \n    final int prefixIndex \u003d name.indexOf(\".\");\n    if (prefixIndex \u003c 4) {// Prefix length is at least 4.\n      throw new HadoopIllegalArgumentException(\"An XAttr name must be \" +\n          \"prefixed with user/trusted/security/system, followed by a \u0027.\u0027\");\n    } else if (prefixIndex \u003d\u003d name.length() - 1) {\n      throw new HadoopIllegalArgumentException(\"XAttr name cannot be empty.\");\n    }\n    \n    NameSpace ns;\n    final String prefix \u003d name.substring(0, prefixIndex).toLowerCase();\n    if (prefix.equals(NameSpace.USER.toString().toLowerCase())) {\n      ns \u003d NameSpace.USER;\n    } else if (prefix.equals(NameSpace.TRUSTED.toString().toLowerCase())) {\n      ns \u003d NameSpace.TRUSTED;\n    } else if (prefix.equals(NameSpace.SYSTEM.toString().toLowerCase())) {\n      ns \u003d NameSpace.SYSTEM;\n    } else if (prefix.equals(NameSpace.SECURITY.toString().toLowerCase())) {\n      ns \u003d NameSpace.SECURITY;\n    } else {\n      throw new HadoopIllegalArgumentException(\"An XAttr name must be \" +\n          \"prefixed with user/trusted/security/system, followed by a \u0027.\u0027\");\n    }\n    XAttr xAttr \u003d (new XAttr.Builder()).setNameSpace(ns).setName(name.\n        substring(prefixIndex + 1)).setValue(value).build();\n    \n    return xAttr;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/XAttrHelper.java"
    }
  }
}