{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "YARNRunner.java",
  "functionName": "setupContainerLaunchContextForAM",
  "functionId": "setupContainerLaunchContextForAM___jobConf-Configuration__localResources-Map__String,LocalResource____securityTokens-ByteBuffer__vargs-List__String__",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/YARNRunner.java",
  "functionStartLine": 507,
  "functionEndLine": 557,
  "numCommitsSeen": 80,
  "timeTaken": 1193,
  "changeHistory": [
    "4571351cccf6d4977469d3d623cf045b06a5f5f0",
    "732ee6f0b58a12500198c0d934cc570c7490b520"
  ],
  "changeHistoryShort": {
    "4571351cccf6d4977469d3d623cf045b06a5f5f0": "Ybodychange",
    "732ee6f0b58a12500198c0d934cc570c7490b520": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4571351cccf6d4977469d3d623cf045b06a5f5f0": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-7069. Add ability to specify user environment variables individually. Contributed by Jim Brennan\n",
      "commitDate": "12/04/18 9:12 AM",
      "commitName": "4571351cccf6d4977469d3d623cf045b06a5f5f0",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "06/12/17 11:21 PM",
      "commitNameOld": "d4cae977a2471ad7b8f803617e41b6f94df19c11",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 126.37,
      "commitsBetweenForRepo": 921,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,51 @@\n   private ContainerLaunchContext setupContainerLaunchContextForAM(\n       Configuration jobConf, Map\u003cString, LocalResource\u003e localResources,\n       ByteBuffer securityTokens, List\u003cString\u003e vargs) throws IOException {\n \n     Vector\u003cString\u003e vargsFinal \u003d new Vector\u003c\u003e(8);\n     // Final command\n     StringBuilder mergedCommand \u003d new StringBuilder();\n     for (CharSequence str : vargs) {\n       mergedCommand.append(str).append(\" \");\n     }\n     vargsFinal.add(mergedCommand.toString());\n \n     LOG.debug(\"Command to launch container for ApplicationMaster is : \"\n         + mergedCommand);\n \n     // Setup the CLASSPATH in environment\n     // i.e. add { Hadoop jars, job jar, CWD } to classpath.\n     Map\u003cString, String\u003e environment \u003d new HashMap\u003c\u003e();\n     MRApps.setClasspath(environment, conf);\n \n     // Shell\n     environment.put(Environment.SHELL.name(),\n         conf.get(MRJobConfig.MAPRED_ADMIN_USER_SHELL,\n             MRJobConfig.DEFAULT_SHELL));\n \n     // Add the container working directory in front of LD_LIBRARY_PATH\n     MRApps.addToEnvironment(environment, Environment.LD_LIBRARY_PATH.name(),\n         MRApps.crossPlatformifyMREnv(conf, Environment.PWD), conf);\n \n     // Setup the environment variables for Admin first\n-    MRApps.setEnvFromInputString(environment,\n-        conf.get(MRJobConfig.MR_AM_ADMIN_USER_ENV,\n-            MRJobConfig.DEFAULT_MR_AM_ADMIN_USER_ENV), conf);\n+    MRApps.setEnvFromInputProperty(environment,\n+        MRJobConfig.MR_AM_ADMIN_USER_ENV,\n+        MRJobConfig.DEFAULT_MR_AM_ADMIN_USER_ENV,\n+        conf);\n     // Setup the environment variables (LD_LIBRARY_PATH, etc)\n-    MRApps.setEnvFromInputString(environment,\n-        conf.get(MRJobConfig.MR_AM_ENV), conf);\n+    MRApps.setEnvFromInputProperty(environment, MRJobConfig.MR_AM_ENV, null,\n+        conf);\n \n     // Parse distributed cache\n     MRApps.setupDistributedCache(jobConf, localResources);\n \n     Map\u003cApplicationAccessType, String\u003e acls \u003d new HashMap\u003c\u003e(2);\n     acls.put(ApplicationAccessType.VIEW_APP, jobConf.get(\n         MRJobConfig.JOB_ACL_VIEW_JOB, MRJobConfig.DEFAULT_JOB_ACL_VIEW_JOB));\n     acls.put(ApplicationAccessType.MODIFY_APP, jobConf.get(\n         MRJobConfig.JOB_ACL_MODIFY_JOB,\n         MRJobConfig.DEFAULT_JOB_ACL_MODIFY_JOB));\n \n     return ContainerLaunchContext.newInstance(localResources, environment,\n         vargsFinal, null, securityTokens, acls);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private ContainerLaunchContext setupContainerLaunchContextForAM(\n      Configuration jobConf, Map\u003cString, LocalResource\u003e localResources,\n      ByteBuffer securityTokens, List\u003cString\u003e vargs) throws IOException {\n\n    Vector\u003cString\u003e vargsFinal \u003d new Vector\u003c\u003e(8);\n    // Final command\n    StringBuilder mergedCommand \u003d new StringBuilder();\n    for (CharSequence str : vargs) {\n      mergedCommand.append(str).append(\" \");\n    }\n    vargsFinal.add(mergedCommand.toString());\n\n    LOG.debug(\"Command to launch container for ApplicationMaster is : \"\n        + mergedCommand);\n\n    // Setup the CLASSPATH in environment\n    // i.e. add { Hadoop jars, job jar, CWD } to classpath.\n    Map\u003cString, String\u003e environment \u003d new HashMap\u003c\u003e();\n    MRApps.setClasspath(environment, conf);\n\n    // Shell\n    environment.put(Environment.SHELL.name(),\n        conf.get(MRJobConfig.MAPRED_ADMIN_USER_SHELL,\n            MRJobConfig.DEFAULT_SHELL));\n\n    // Add the container working directory in front of LD_LIBRARY_PATH\n    MRApps.addToEnvironment(environment, Environment.LD_LIBRARY_PATH.name(),\n        MRApps.crossPlatformifyMREnv(conf, Environment.PWD), conf);\n\n    // Setup the environment variables for Admin first\n    MRApps.setEnvFromInputProperty(environment,\n        MRJobConfig.MR_AM_ADMIN_USER_ENV,\n        MRJobConfig.DEFAULT_MR_AM_ADMIN_USER_ENV,\n        conf);\n    // Setup the environment variables (LD_LIBRARY_PATH, etc)\n    MRApps.setEnvFromInputProperty(environment, MRJobConfig.MR_AM_ENV, null,\n        conf);\n\n    // Parse distributed cache\n    MRApps.setupDistributedCache(jobConf, localResources);\n\n    Map\u003cApplicationAccessType, String\u003e acls \u003d new HashMap\u003c\u003e(2);\n    acls.put(ApplicationAccessType.VIEW_APP, jobConf.get(\n        MRJobConfig.JOB_ACL_VIEW_JOB, MRJobConfig.DEFAULT_JOB_ACL_VIEW_JOB));\n    acls.put(ApplicationAccessType.MODIFY_APP, jobConf.get(\n        MRJobConfig.JOB_ACL_MODIFY_JOB,\n        MRJobConfig.DEFAULT_JOB_ACL_MODIFY_JOB));\n\n    return ContainerLaunchContext.newInstance(localResources, environment,\n        vargsFinal, null, securityTokens, acls);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/YARNRunner.java",
      "extendedDetails": {}
    },
    "732ee6f0b58a12500198c0d934cc570c7490b520": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-6825. YARNRunner#createApplicationSubmissionContext method is longer than 150 lines (Contributed by Gergely Nov√°k via Daniel Templeton)\n",
      "commitDate": "22/02/17 3:38 PM",
      "commitName": "732ee6f0b58a12500198c0d934cc570c7490b520",
      "commitAuthor": "Daniel Templeton",
      "diff": "@@ -0,0 +1,50 @@\n+  private ContainerLaunchContext setupContainerLaunchContextForAM(\n+      Configuration jobConf, Map\u003cString, LocalResource\u003e localResources,\n+      ByteBuffer securityTokens, List\u003cString\u003e vargs) throws IOException {\n+\n+    Vector\u003cString\u003e vargsFinal \u003d new Vector\u003c\u003e(8);\n+    // Final command\n+    StringBuilder mergedCommand \u003d new StringBuilder();\n+    for (CharSequence str : vargs) {\n+      mergedCommand.append(str).append(\" \");\n+    }\n+    vargsFinal.add(mergedCommand.toString());\n+\n+    LOG.debug(\"Command to launch container for ApplicationMaster is : \"\n+        + mergedCommand);\n+\n+    // Setup the CLASSPATH in environment\n+    // i.e. add { Hadoop jars, job jar, CWD } to classpath.\n+    Map\u003cString, String\u003e environment \u003d new HashMap\u003c\u003e();\n+    MRApps.setClasspath(environment, conf);\n+\n+    // Shell\n+    environment.put(Environment.SHELL.name(),\n+        conf.get(MRJobConfig.MAPRED_ADMIN_USER_SHELL,\n+            MRJobConfig.DEFAULT_SHELL));\n+\n+    // Add the container working directory in front of LD_LIBRARY_PATH\n+    MRApps.addToEnvironment(environment, Environment.LD_LIBRARY_PATH.name(),\n+        MRApps.crossPlatformifyMREnv(conf, Environment.PWD), conf);\n+\n+    // Setup the environment variables for Admin first\n+    MRApps.setEnvFromInputString(environment,\n+        conf.get(MRJobConfig.MR_AM_ADMIN_USER_ENV,\n+            MRJobConfig.DEFAULT_MR_AM_ADMIN_USER_ENV), conf);\n+    // Setup the environment variables (LD_LIBRARY_PATH, etc)\n+    MRApps.setEnvFromInputString(environment,\n+        conf.get(MRJobConfig.MR_AM_ENV), conf);\n+\n+    // Parse distributed cache\n+    MRApps.setupDistributedCache(jobConf, localResources);\n+\n+    Map\u003cApplicationAccessType, String\u003e acls \u003d new HashMap\u003c\u003e(2);\n+    acls.put(ApplicationAccessType.VIEW_APP, jobConf.get(\n+        MRJobConfig.JOB_ACL_VIEW_JOB, MRJobConfig.DEFAULT_JOB_ACL_VIEW_JOB));\n+    acls.put(ApplicationAccessType.MODIFY_APP, jobConf.get(\n+        MRJobConfig.JOB_ACL_MODIFY_JOB,\n+        MRJobConfig.DEFAULT_JOB_ACL_MODIFY_JOB));\n+\n+    return ContainerLaunchContext.newInstance(localResources, environment,\n+        vargsFinal, null, securityTokens, acls);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private ContainerLaunchContext setupContainerLaunchContextForAM(\n      Configuration jobConf, Map\u003cString, LocalResource\u003e localResources,\n      ByteBuffer securityTokens, List\u003cString\u003e vargs) throws IOException {\n\n    Vector\u003cString\u003e vargsFinal \u003d new Vector\u003c\u003e(8);\n    // Final command\n    StringBuilder mergedCommand \u003d new StringBuilder();\n    for (CharSequence str : vargs) {\n      mergedCommand.append(str).append(\" \");\n    }\n    vargsFinal.add(mergedCommand.toString());\n\n    LOG.debug(\"Command to launch container for ApplicationMaster is : \"\n        + mergedCommand);\n\n    // Setup the CLASSPATH in environment\n    // i.e. add { Hadoop jars, job jar, CWD } to classpath.\n    Map\u003cString, String\u003e environment \u003d new HashMap\u003c\u003e();\n    MRApps.setClasspath(environment, conf);\n\n    // Shell\n    environment.put(Environment.SHELL.name(),\n        conf.get(MRJobConfig.MAPRED_ADMIN_USER_SHELL,\n            MRJobConfig.DEFAULT_SHELL));\n\n    // Add the container working directory in front of LD_LIBRARY_PATH\n    MRApps.addToEnvironment(environment, Environment.LD_LIBRARY_PATH.name(),\n        MRApps.crossPlatformifyMREnv(conf, Environment.PWD), conf);\n\n    // Setup the environment variables for Admin first\n    MRApps.setEnvFromInputString(environment,\n        conf.get(MRJobConfig.MR_AM_ADMIN_USER_ENV,\n            MRJobConfig.DEFAULT_MR_AM_ADMIN_USER_ENV), conf);\n    // Setup the environment variables (LD_LIBRARY_PATH, etc)\n    MRApps.setEnvFromInputString(environment,\n        conf.get(MRJobConfig.MR_AM_ENV), conf);\n\n    // Parse distributed cache\n    MRApps.setupDistributedCache(jobConf, localResources);\n\n    Map\u003cApplicationAccessType, String\u003e acls \u003d new HashMap\u003c\u003e(2);\n    acls.put(ApplicationAccessType.VIEW_APP, jobConf.get(\n        MRJobConfig.JOB_ACL_VIEW_JOB, MRJobConfig.DEFAULT_JOB_ACL_VIEW_JOB));\n    acls.put(ApplicationAccessType.MODIFY_APP, jobConf.get(\n        MRJobConfig.JOB_ACL_MODIFY_JOB,\n        MRJobConfig.DEFAULT_JOB_ACL_MODIFY_JOB));\n\n    return ContainerLaunchContext.newInstance(localResources, environment,\n        vargsFinal, null, securityTokens, acls);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/YARNRunner.java"
    }
  }
}