{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Client.java",
  "functionName": "call",
  "functionId": "call___rpcKind-RPC.RpcKind__rpcRequest-Writable__remoteId-ConnectionId__serviceClass-int__fallbackToSimpleAuth-AtomicBoolean__alignmentContext-AlignmentContext",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
  "functionStartLine": 1446,
  "functionEndLine": 1510,
  "numCommitsSeen": 125,
  "timeTaken": 1774,
  "changeHistory": [
    "c90736350ba158c7872a39426e7a29c5e5e0bb48",
    "e880660a204b6fd0e5a0799393a4d36359765a54"
  ],
  "changeHistoryShort": {
    "c90736350ba158c7872a39426e7a29c5e5e0bb48": "Ybodychange",
    "e880660a204b6fd0e5a0799393a4d36359765a54": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c90736350ba158c7872a39426e7a29c5e5e0bb48": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16208. Do Not Log InterruptedException in Client.\n\nContributed by David Mollitor.\n",
      "commitDate": "04/04/19 8:15 AM",
      "commitName": "c90736350ba158c7872a39426e7a29c5e5e0bb48",
      "commitAuthor": "David Mollitor",
      "commitDateOld": "26/02/19 3:14 PM",
      "commitNameOld": "9192f71e21847ad86bc9ff23847d8957dfe8ae58",
      "commitAuthorOld": "Tsz Wo Nicholas Sze",
      "daysBetweenCommits": 36.67,
      "commitsBetweenForRepo": 302,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,65 @@\n   Writable call(RPC.RpcKind rpcKind, Writable rpcRequest,\n       ConnectionId remoteId, int serviceClass,\n       AtomicBoolean fallbackToSimpleAuth, AlignmentContext alignmentContext)\n       throws IOException {\n     final Call call \u003d createCall(rpcKind, rpcRequest);\n     call.setAlignmentContext(alignmentContext);\n     final Connection connection \u003d getConnection(remoteId, call, serviceClass,\n         fallbackToSimpleAuth);\n \n     try {\n       checkAsyncCall();\n       try {\n         connection.sendRpcRequest(call);                 // send the rpc request\n       } catch (RejectedExecutionException e) {\n         throw new IOException(\"connection has been closed\", e);\n-      } catch (InterruptedException e) {\n+      } catch (InterruptedException ie) {\n         Thread.currentThread().interrupt();\n-        LOG.warn(\"interrupted waiting to send rpc request to server\", e);\n-        throw new IOException(e);\n+        IOException ioe \u003d new InterruptedIOException(\n+            \"Interrupted waiting to send RPC request to server\");\n+        ioe.initCause(ie);\n+        throw ioe;\n       }\n     } catch(Exception e) {\n       if (isAsynchronousMode()) {\n         releaseAsyncCall();\n       }\n       throw e;\n     }\n \n     if (isAsynchronousMode()) {\n       final AsyncGet\u003cWritable, IOException\u003e asyncGet\n           \u003d new AsyncGet\u003cWritable, IOException\u003e() {\n         @Override\n         public Writable get(long timeout, TimeUnit unit)\n             throws IOException, TimeoutException{\n           boolean done \u003d true;\n           try {\n             final Writable w \u003d getRpcResponse(call, connection, timeout, unit);\n             if (w \u003d\u003d null) {\n               done \u003d false;\n               throw new TimeoutException(call + \" timed out \"\n                   + timeout + \" \" + unit);\n             }\n             return w;\n           } finally {\n             if (done) {\n               releaseAsyncCall();\n             }\n           }\n         }\n \n         @Override\n         public boolean isDone() {\n           synchronized (call) {\n             return call.done;\n           }\n         }\n       };\n \n       ASYNC_RPC_RESPONSE.set(asyncGet);\n       return null;\n     } else {\n       return getRpcResponse(call, connection, -1, null);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  Writable call(RPC.RpcKind rpcKind, Writable rpcRequest,\n      ConnectionId remoteId, int serviceClass,\n      AtomicBoolean fallbackToSimpleAuth, AlignmentContext alignmentContext)\n      throws IOException {\n    final Call call \u003d createCall(rpcKind, rpcRequest);\n    call.setAlignmentContext(alignmentContext);\n    final Connection connection \u003d getConnection(remoteId, call, serviceClass,\n        fallbackToSimpleAuth);\n\n    try {\n      checkAsyncCall();\n      try {\n        connection.sendRpcRequest(call);                 // send the rpc request\n      } catch (RejectedExecutionException e) {\n        throw new IOException(\"connection has been closed\", e);\n      } catch (InterruptedException ie) {\n        Thread.currentThread().interrupt();\n        IOException ioe \u003d new InterruptedIOException(\n            \"Interrupted waiting to send RPC request to server\");\n        ioe.initCause(ie);\n        throw ioe;\n      }\n    } catch(Exception e) {\n      if (isAsynchronousMode()) {\n        releaseAsyncCall();\n      }\n      throw e;\n    }\n\n    if (isAsynchronousMode()) {\n      final AsyncGet\u003cWritable, IOException\u003e asyncGet\n          \u003d new AsyncGet\u003cWritable, IOException\u003e() {\n        @Override\n        public Writable get(long timeout, TimeUnit unit)\n            throws IOException, TimeoutException{\n          boolean done \u003d true;\n          try {\n            final Writable w \u003d getRpcResponse(call, connection, timeout, unit);\n            if (w \u003d\u003d null) {\n              done \u003d false;\n              throw new TimeoutException(call + \" timed out \"\n                  + timeout + \" \" + unit);\n            }\n            return w;\n          } finally {\n            if (done) {\n              releaseAsyncCall();\n            }\n          }\n        }\n\n        @Override\n        public boolean isDone() {\n          synchronized (call) {\n            return call.done;\n          }\n        }\n      };\n\n      ASYNC_RPC_RESPONSE.set(asyncGet);\n      return null;\n    } else {\n      return getRpcResponse(call, connection, -1, null);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java",
      "extendedDetails": {}
    },
    "e880660a204b6fd0e5a0799393a4d36359765a54": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-13399. [SBN read] Make Client field AlignmentContext non-static. Contributed by Plamen Jeliazkov.",
      "commitDate": "24/12/18 9:33 AM",
      "commitName": "e880660a204b6fd0e5a0799393a4d36359765a54",
      "commitAuthor": "Plamen Jeliazkov",
      "diff": "@@ -0,0 +1,63 @@\n+  Writable call(RPC.RpcKind rpcKind, Writable rpcRequest,\n+      ConnectionId remoteId, int serviceClass,\n+      AtomicBoolean fallbackToSimpleAuth, AlignmentContext alignmentContext)\n+      throws IOException {\n+    final Call call \u003d createCall(rpcKind, rpcRequest);\n+    call.setAlignmentContext(alignmentContext);\n+    final Connection connection \u003d getConnection(remoteId, call, serviceClass,\n+        fallbackToSimpleAuth);\n+\n+    try {\n+      checkAsyncCall();\n+      try {\n+        connection.sendRpcRequest(call);                 // send the rpc request\n+      } catch (RejectedExecutionException e) {\n+        throw new IOException(\"connection has been closed\", e);\n+      } catch (InterruptedException e) {\n+        Thread.currentThread().interrupt();\n+        LOG.warn(\"interrupted waiting to send rpc request to server\", e);\n+        throw new IOException(e);\n+      }\n+    } catch(Exception e) {\n+      if (isAsynchronousMode()) {\n+        releaseAsyncCall();\n+      }\n+      throw e;\n+    }\n+\n+    if (isAsynchronousMode()) {\n+      final AsyncGet\u003cWritable, IOException\u003e asyncGet\n+          \u003d new AsyncGet\u003cWritable, IOException\u003e() {\n+        @Override\n+        public Writable get(long timeout, TimeUnit unit)\n+            throws IOException, TimeoutException{\n+          boolean done \u003d true;\n+          try {\n+            final Writable w \u003d getRpcResponse(call, connection, timeout, unit);\n+            if (w \u003d\u003d null) {\n+              done \u003d false;\n+              throw new TimeoutException(call + \" timed out \"\n+                  + timeout + \" \" + unit);\n+            }\n+            return w;\n+          } finally {\n+            if (done) {\n+              releaseAsyncCall();\n+            }\n+          }\n+        }\n+\n+        @Override\n+        public boolean isDone() {\n+          synchronized (call) {\n+            return call.done;\n+          }\n+        }\n+      };\n+\n+      ASYNC_RPC_RESPONSE.set(asyncGet);\n+      return null;\n+    } else {\n+      return getRpcResponse(call, connection, -1, null);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  Writable call(RPC.RpcKind rpcKind, Writable rpcRequest,\n      ConnectionId remoteId, int serviceClass,\n      AtomicBoolean fallbackToSimpleAuth, AlignmentContext alignmentContext)\n      throws IOException {\n    final Call call \u003d createCall(rpcKind, rpcRequest);\n    call.setAlignmentContext(alignmentContext);\n    final Connection connection \u003d getConnection(remoteId, call, serviceClass,\n        fallbackToSimpleAuth);\n\n    try {\n      checkAsyncCall();\n      try {\n        connection.sendRpcRequest(call);                 // send the rpc request\n      } catch (RejectedExecutionException e) {\n        throw new IOException(\"connection has been closed\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        LOG.warn(\"interrupted waiting to send rpc request to server\", e);\n        throw new IOException(e);\n      }\n    } catch(Exception e) {\n      if (isAsynchronousMode()) {\n        releaseAsyncCall();\n      }\n      throw e;\n    }\n\n    if (isAsynchronousMode()) {\n      final AsyncGet\u003cWritable, IOException\u003e asyncGet\n          \u003d new AsyncGet\u003cWritable, IOException\u003e() {\n        @Override\n        public Writable get(long timeout, TimeUnit unit)\n            throws IOException, TimeoutException{\n          boolean done \u003d true;\n          try {\n            final Writable w \u003d getRpcResponse(call, connection, timeout, unit);\n            if (w \u003d\u003d null) {\n              done \u003d false;\n              throw new TimeoutException(call + \" timed out \"\n                  + timeout + \" \" + unit);\n            }\n            return w;\n          } finally {\n            if (done) {\n              releaseAsyncCall();\n            }\n          }\n        }\n\n        @Override\n        public boolean isDone() {\n          synchronized (call) {\n            return call.done;\n          }\n        }\n      };\n\n      ASYNC_RPC_RESPONSE.set(asyncGet);\n      return null;\n    } else {\n      return getRpcResponse(call, connection, -1, null);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Client.java"
    }
  }
}