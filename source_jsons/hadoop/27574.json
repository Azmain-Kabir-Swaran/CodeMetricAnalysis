{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TimelineCollectorManager.java",
  "functionName": "putIfAbsent",
  "functionId": "putIfAbsent___appId-ApplicationId__collector-TimelineCollector",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/TimelineCollectorManager.java",
  "functionStartLine": 129,
  "functionEndLine": 153,
  "numCommitsSeen": 24,
  "timeTaken": 3442,
  "changeHistory": [
    "41fb5c738117ab65a2f152a13de8c85476acdc58",
    "11e8905d8daf129afb6fe2e5a0eca11bcb1719c8",
    "d67c9bdb4db2b075484a779802ecf3296bad5cd4",
    "2188a07e5bea1da26bf679ca0ece26ab596d3438",
    "9b5636408005676ae580f8d929f8e912c27828e7",
    "bf54d32750f8b27a170d7a0a8d8f022430327341"
  ],
  "changeHistoryShort": {
    "41fb5c738117ab65a2f152a13de8c85476acdc58": "Ybodychange",
    "11e8905d8daf129afb6fe2e5a0eca11bcb1719c8": "Ybodychange",
    "d67c9bdb4db2b075484a779802ecf3296bad5cd4": "Ybodychange",
    "2188a07e5bea1da26bf679ca0ece26ab596d3438": "Ymultichange(Yfilerename,Yreturntypechange,Ybodychange,Yparameterchange)",
    "9b5636408005676ae580f8d929f8e912c27828e7": "Ymultichange(Yparameterchange,Ybodychange)",
    "bf54d32750f8b27a170d7a0a8d8f022430327341": "Yintroduced"
  },
  "changeHistoryDetails": {
    "41fb5c738117ab65a2f152a13de8c85476acdc58": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3134. Implemented Phoenix timeline writer to access HBase backend. Contributed by Li Lu.\n\n(cherry picked from commit b3b791be466be79e4e964ad068f7a6ec701e22e1)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "41fb5c738117ab65a2f152a13de8c85476acdc58",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "11e8905d8daf129afb6fe2e5a0eca11bcb1719c8",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,25 @@\n   public TimelineCollector putIfAbsent(ApplicationId appId,\n       TimelineCollector collector) {\n     TimelineCollector collectorInTable \u003d null;\n     synchronized (collectors) {\n       collectorInTable \u003d collectors.get(appId);\n       if (collectorInTable \u003d\u003d null) {\n         try {\n           // initialize, start, and add it to the collection so it can be\n           // cleaned up when the parent shuts down\n           collector.init(getConfig());\n+          collector.setWriter(writer);\n           collector.start();\n           collectors.put(appId, collector);\n           LOG.info(\"the collector for \" + appId + \" was added\");\n           collectorInTable \u003d collector;\n           postPut(appId, collectorInTable);\n         } catch (Exception e) {\n           throw new YarnRuntimeException(e);\n         }\n       } else {\n         LOG.info(\"the collector for \" + appId + \" already exists!\");\n       }\n     }\n     return collectorInTable;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineCollector putIfAbsent(ApplicationId appId,\n      TimelineCollector collector) {\n    TimelineCollector collectorInTable \u003d null;\n    synchronized (collectors) {\n      collectorInTable \u003d collectors.get(appId);\n      if (collectorInTable \u003d\u003d null) {\n        try {\n          // initialize, start, and add it to the collection so it can be\n          // cleaned up when the parent shuts down\n          collector.init(getConfig());\n          collector.setWriter(writer);\n          collector.start();\n          collectors.put(appId, collector);\n          LOG.info(\"the collector for \" + appId + \" was added\");\n          collectorInTable \u003d collector;\n          postPut(appId, collectorInTable);\n        } catch (Exception e) {\n          throw new YarnRuntimeException(e);\n        }\n      } else {\n        LOG.info(\"the collector for \" + appId + \" already exists!\");\n      }\n    }\n    return collectorInTable;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/TimelineCollectorManager.java",
      "extendedDetails": {}
    },
    "11e8905d8daf129afb6fe2e5a0eca11bcb1719c8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3390. Reuse TimelineCollectorManager for RM (Zhijie Shen via sjlee)\n\n(cherry picked from commit 58221188811e0f61d842dac89e1f4ad4fd8aa182)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "11e8905d8daf129afb6fe2e5a0eca11bcb1719c8",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "47f35a30bb4d99349593e9d6e1c9e76e71341c40",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,24 @@\n   public TimelineCollector putIfAbsent(ApplicationId appId,\n       TimelineCollector collector) {\n-    String id \u003d appId.toString();\n-    TimelineCollector collectorInTable;\n-    boolean collectorIsNew \u003d false;\n+    TimelineCollector collectorInTable \u003d null;\n     synchronized (collectors) {\n-      collectorInTable \u003d collectors.get(id);\n+      collectorInTable \u003d collectors.get(appId);\n       if (collectorInTable \u003d\u003d null) {\n         try {\n           // initialize, start, and add it to the collection so it can be\n           // cleaned up when the parent shuts down\n           collector.init(getConfig());\n           collector.start();\n-          collectors.put(id, collector);\n-          LOG.info(\"the collector for \" + id + \" was added\");\n+          collectors.put(appId, collector);\n+          LOG.info(\"the collector for \" + appId + \" was added\");\n           collectorInTable \u003d collector;\n-          collectorIsNew \u003d true;\n+          postPut(appId, collectorInTable);\n         } catch (Exception e) {\n           throw new YarnRuntimeException(e);\n         }\n       } else {\n-        String msg \u003d \"the collector for \" + id + \" already exists!\";\n-        LOG.error(msg);\n-      }\n-\n-    }\n-    // Report to NM if a new collector is added.\n-    if (collectorIsNew) {\n-      try {\n-        updateTimelineCollectorContext(appId, collector);\n-        reportNewCollectorToNM(appId);\n-      } catch (Exception e) {\n-        // throw exception here as it cannot be used if failed communicate with NM\n-        LOG.error(\"Failed to communicate with NM Collector Service for \" + appId);\n-        throw new YarnRuntimeException(e);\n+        LOG.info(\"the collector for \" + appId + \" already exists!\");\n       }\n     }\n-\n     return collectorInTable;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineCollector putIfAbsent(ApplicationId appId,\n      TimelineCollector collector) {\n    TimelineCollector collectorInTable \u003d null;\n    synchronized (collectors) {\n      collectorInTable \u003d collectors.get(appId);\n      if (collectorInTable \u003d\u003d null) {\n        try {\n          // initialize, start, and add it to the collection so it can be\n          // cleaned up when the parent shuts down\n          collector.init(getConfig());\n          collector.start();\n          collectors.put(appId, collector);\n          LOG.info(\"the collector for \" + appId + \" was added\");\n          collectorInTable \u003d collector;\n          postPut(appId, collectorInTable);\n        } catch (Exception e) {\n          throw new YarnRuntimeException(e);\n        }\n      } else {\n        LOG.info(\"the collector for \" + appId + \" already exists!\");\n      }\n    }\n    return collectorInTable;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/TimelineCollectorManager.java",
      "extendedDetails": {}
    },
    "d67c9bdb4db2b075484a779802ecf3296bad5cd4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3040. Make putEntities operation be aware of the app\u0027s context. Contributed by Zhijie Shen\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "d67c9bdb4db2b075484a779802ecf3296bad5cd4",
      "commitAuthor": "Junping Du",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "19c1132146df10ccafe93a2caf0dfcef3b288c43",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   public TimelineCollector putIfAbsent(ApplicationId appId,\n       TimelineCollector collector) {\n     String id \u003d appId.toString();\n     TimelineCollector collectorInTable;\n     boolean collectorIsNew \u003d false;\n     synchronized (collectors) {\n       collectorInTable \u003d collectors.get(id);\n       if (collectorInTable \u003d\u003d null) {\n         try {\n           // initialize, start, and add it to the collection so it can be\n           // cleaned up when the parent shuts down\n           collector.init(getConfig());\n           collector.start();\n           collectors.put(id, collector);\n           LOG.info(\"the collector for \" + id + \" was added\");\n           collectorInTable \u003d collector;\n           collectorIsNew \u003d true;\n         } catch (Exception e) {\n           throw new YarnRuntimeException(e);\n         }\n       } else {\n         String msg \u003d \"the collector for \" + id + \" already exists!\";\n         LOG.error(msg);\n       }\n \n     }\n     // Report to NM if a new collector is added.\n     if (collectorIsNew) {\n       try {\n+        updateTimelineCollectorContext(appId, collector);\n         reportNewCollectorToNM(appId);\n       } catch (Exception e) {\n-        // throw exception here as it cannot be used if failed report to NM\n-        LOG.error(\"Failed to report a new collector for application: \" + appId +\n-            \" to the NM Collector Service.\");\n+        // throw exception here as it cannot be used if failed communicate with NM\n+        LOG.error(\"Failed to communicate with NM Collector Service for \" + appId);\n         throw new YarnRuntimeException(e);\n       }\n     }\n \n     return collectorInTable;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineCollector putIfAbsent(ApplicationId appId,\n      TimelineCollector collector) {\n    String id \u003d appId.toString();\n    TimelineCollector collectorInTable;\n    boolean collectorIsNew \u003d false;\n    synchronized (collectors) {\n      collectorInTable \u003d collectors.get(id);\n      if (collectorInTable \u003d\u003d null) {\n        try {\n          // initialize, start, and add it to the collection so it can be\n          // cleaned up when the parent shuts down\n          collector.init(getConfig());\n          collector.start();\n          collectors.put(id, collector);\n          LOG.info(\"the collector for \" + id + \" was added\");\n          collectorInTable \u003d collector;\n          collectorIsNew \u003d true;\n        } catch (Exception e) {\n          throw new YarnRuntimeException(e);\n        }\n      } else {\n        String msg \u003d \"the collector for \" + id + \" already exists!\";\n        LOG.error(msg);\n      }\n\n    }\n    // Report to NM if a new collector is added.\n    if (collectorIsNew) {\n      try {\n        updateTimelineCollectorContext(appId, collector);\n        reportNewCollectorToNM(appId);\n      } catch (Exception e) {\n        // throw exception here as it cannot be used if failed communicate with NM\n        LOG.error(\"Failed to communicate with NM Collector Service for \" + appId);\n        throw new YarnRuntimeException(e);\n      }\n    }\n\n    return collectorInTable;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/TimelineCollectorManager.java",
      "extendedDetails": {}
    },
    "2188a07e5bea1da26bf679ca0ece26ab596d3438": {
      "type": "Ymultichange(Yfilerename,Yreturntypechange,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-3333. Rename TimelineAggregator etc. to TimelineCollector. Contributed by Sangjin Lee\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "2188a07e5bea1da26bf679ca0ece26ab596d3438",
      "commitAuthor": "Junping Du",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-3333. Rename TimelineAggregator etc. to TimelineCollector. Contributed by Sangjin Lee\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "2188a07e5bea1da26bf679ca0ece26ab596d3438",
          "commitAuthor": "Junping Du",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "9b5636408005676ae580f8d929f8e912c27828e7",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,40 @@\n-  public TimelineAggregator putIfAbsent(ApplicationId appId, \n-      TimelineAggregator aggregator) {\n+  public TimelineCollector putIfAbsent(ApplicationId appId,\n+      TimelineCollector collector) {\n     String id \u003d appId.toString();\n-    TimelineAggregator aggregatorInTable;\n-    boolean aggregatorIsNew \u003d false;\n-    synchronized (aggregators) {\n-      aggregatorInTable \u003d aggregators.get(id);\n-      if (aggregatorInTable \u003d\u003d null) {\n+    TimelineCollector collectorInTable;\n+    boolean collectorIsNew \u003d false;\n+    synchronized (collectors) {\n+      collectorInTable \u003d collectors.get(id);\n+      if (collectorInTable \u003d\u003d null) {\n         try {\n           // initialize, start, and add it to the collection so it can be\n           // cleaned up when the parent shuts down\n-          aggregator.init(getConfig());\n-          aggregator.start();\n-          aggregators.put(id, aggregator);\n-          LOG.info(\"the aggregator for \" + id + \" was added\");\n-          aggregatorInTable \u003d aggregator;\n-          aggregatorIsNew \u003d true;\n+          collector.init(getConfig());\n+          collector.start();\n+          collectors.put(id, collector);\n+          LOG.info(\"the collector for \" + id + \" was added\");\n+          collectorInTable \u003d collector;\n+          collectorIsNew \u003d true;\n         } catch (Exception e) {\n           throw new YarnRuntimeException(e);\n         }\n       } else {\n-        String msg \u003d \"the aggregator for \" + id + \" already exists!\";\n+        String msg \u003d \"the collector for \" + id + \" already exists!\";\n         LOG.error(msg);\n       }\n-      \n+\n     }\n-    // Report to NM if a new aggregator is added.\n-    if (aggregatorIsNew) {\n+    // Report to NM if a new collector is added.\n+    if (collectorIsNew) {\n       try {\n-        reportNewAggregatorToNM(appId);\n+        reportNewCollectorToNM(appId);\n       } catch (Exception e) {\n         // throw exception here as it cannot be used if failed report to NM\n-        LOG.error(\"Failed to report a new aggregator for application: \" + appId + \n-            \" to NM Aggregator Services.\");\n+        LOG.error(\"Failed to report a new collector for application: \" + appId +\n+            \" to the NM Collector Service.\");\n         throw new YarnRuntimeException(e);\n       }\n     }\n-    \n-    return aggregatorInTable;\n+\n+    return collectorInTable;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public TimelineCollector putIfAbsent(ApplicationId appId,\n      TimelineCollector collector) {\n    String id \u003d appId.toString();\n    TimelineCollector collectorInTable;\n    boolean collectorIsNew \u003d false;\n    synchronized (collectors) {\n      collectorInTable \u003d collectors.get(id);\n      if (collectorInTable \u003d\u003d null) {\n        try {\n          // initialize, start, and add it to the collection so it can be\n          // cleaned up when the parent shuts down\n          collector.init(getConfig());\n          collector.start();\n          collectors.put(id, collector);\n          LOG.info(\"the collector for \" + id + \" was added\");\n          collectorInTable \u003d collector;\n          collectorIsNew \u003d true;\n        } catch (Exception e) {\n          throw new YarnRuntimeException(e);\n        }\n      } else {\n        String msg \u003d \"the collector for \" + id + \" already exists!\";\n        LOG.error(msg);\n      }\n\n    }\n    // Report to NM if a new collector is added.\n    if (collectorIsNew) {\n      try {\n        reportNewCollectorToNM(appId);\n      } catch (Exception e) {\n        // throw exception here as it cannot be used if failed report to NM\n        LOG.error(\"Failed to report a new collector for application: \" + appId +\n            \" to the NM Collector Service.\");\n        throw new YarnRuntimeException(e);\n      }\n    }\n\n    return collectorInTable;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/TimelineCollectorManager.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/aggregator/TimelineAggregatorsCollection.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/TimelineCollectorManager.java"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-3333. Rename TimelineAggregator etc. to TimelineCollector. Contributed by Sangjin Lee\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "2188a07e5bea1da26bf679ca0ece26ab596d3438",
          "commitAuthor": "Junping Du",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "9b5636408005676ae580f8d929f8e912c27828e7",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,40 @@\n-  public TimelineAggregator putIfAbsent(ApplicationId appId, \n-      TimelineAggregator aggregator) {\n+  public TimelineCollector putIfAbsent(ApplicationId appId,\n+      TimelineCollector collector) {\n     String id \u003d appId.toString();\n-    TimelineAggregator aggregatorInTable;\n-    boolean aggregatorIsNew \u003d false;\n-    synchronized (aggregators) {\n-      aggregatorInTable \u003d aggregators.get(id);\n-      if (aggregatorInTable \u003d\u003d null) {\n+    TimelineCollector collectorInTable;\n+    boolean collectorIsNew \u003d false;\n+    synchronized (collectors) {\n+      collectorInTable \u003d collectors.get(id);\n+      if (collectorInTable \u003d\u003d null) {\n         try {\n           // initialize, start, and add it to the collection so it can be\n           // cleaned up when the parent shuts down\n-          aggregator.init(getConfig());\n-          aggregator.start();\n-          aggregators.put(id, aggregator);\n-          LOG.info(\"the aggregator for \" + id + \" was added\");\n-          aggregatorInTable \u003d aggregator;\n-          aggregatorIsNew \u003d true;\n+          collector.init(getConfig());\n+          collector.start();\n+          collectors.put(id, collector);\n+          LOG.info(\"the collector for \" + id + \" was added\");\n+          collectorInTable \u003d collector;\n+          collectorIsNew \u003d true;\n         } catch (Exception e) {\n           throw new YarnRuntimeException(e);\n         }\n       } else {\n-        String msg \u003d \"the aggregator for \" + id + \" already exists!\";\n+        String msg \u003d \"the collector for \" + id + \" already exists!\";\n         LOG.error(msg);\n       }\n-      \n+\n     }\n-    // Report to NM if a new aggregator is added.\n-    if (aggregatorIsNew) {\n+    // Report to NM if a new collector is added.\n+    if (collectorIsNew) {\n       try {\n-        reportNewAggregatorToNM(appId);\n+        reportNewCollectorToNM(appId);\n       } catch (Exception e) {\n         // throw exception here as it cannot be used if failed report to NM\n-        LOG.error(\"Failed to report a new aggregator for application: \" + appId + \n-            \" to NM Aggregator Services.\");\n+        LOG.error(\"Failed to report a new collector for application: \" + appId +\n+            \" to the NM Collector Service.\");\n         throw new YarnRuntimeException(e);\n       }\n     }\n-    \n-    return aggregatorInTable;\n+\n+    return collectorInTable;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public TimelineCollector putIfAbsent(ApplicationId appId,\n      TimelineCollector collector) {\n    String id \u003d appId.toString();\n    TimelineCollector collectorInTable;\n    boolean collectorIsNew \u003d false;\n    synchronized (collectors) {\n      collectorInTable \u003d collectors.get(id);\n      if (collectorInTable \u003d\u003d null) {\n        try {\n          // initialize, start, and add it to the collection so it can be\n          // cleaned up when the parent shuts down\n          collector.init(getConfig());\n          collector.start();\n          collectors.put(id, collector);\n          LOG.info(\"the collector for \" + id + \" was added\");\n          collectorInTable \u003d collector;\n          collectorIsNew \u003d true;\n        } catch (Exception e) {\n          throw new YarnRuntimeException(e);\n        }\n      } else {\n        String msg \u003d \"the collector for \" + id + \" already exists!\";\n        LOG.error(msg);\n      }\n\n    }\n    // Report to NM if a new collector is added.\n    if (collectorIsNew) {\n      try {\n        reportNewCollectorToNM(appId);\n      } catch (Exception e) {\n        // throw exception here as it cannot be used if failed report to NM\n        LOG.error(\"Failed to report a new collector for application: \" + appId +\n            \" to the NM Collector Service.\");\n        throw new YarnRuntimeException(e);\n      }\n    }\n\n    return collectorInTable;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/TimelineCollectorManager.java",
          "extendedDetails": {
            "oldValue": "TimelineAggregator",
            "newValue": "TimelineCollector"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3333. Rename TimelineAggregator etc. to TimelineCollector. Contributed by Sangjin Lee\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "2188a07e5bea1da26bf679ca0ece26ab596d3438",
          "commitAuthor": "Junping Du",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "9b5636408005676ae580f8d929f8e912c27828e7",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,40 @@\n-  public TimelineAggregator putIfAbsent(ApplicationId appId, \n-      TimelineAggregator aggregator) {\n+  public TimelineCollector putIfAbsent(ApplicationId appId,\n+      TimelineCollector collector) {\n     String id \u003d appId.toString();\n-    TimelineAggregator aggregatorInTable;\n-    boolean aggregatorIsNew \u003d false;\n-    synchronized (aggregators) {\n-      aggregatorInTable \u003d aggregators.get(id);\n-      if (aggregatorInTable \u003d\u003d null) {\n+    TimelineCollector collectorInTable;\n+    boolean collectorIsNew \u003d false;\n+    synchronized (collectors) {\n+      collectorInTable \u003d collectors.get(id);\n+      if (collectorInTable \u003d\u003d null) {\n         try {\n           // initialize, start, and add it to the collection so it can be\n           // cleaned up when the parent shuts down\n-          aggregator.init(getConfig());\n-          aggregator.start();\n-          aggregators.put(id, aggregator);\n-          LOG.info(\"the aggregator for \" + id + \" was added\");\n-          aggregatorInTable \u003d aggregator;\n-          aggregatorIsNew \u003d true;\n+          collector.init(getConfig());\n+          collector.start();\n+          collectors.put(id, collector);\n+          LOG.info(\"the collector for \" + id + \" was added\");\n+          collectorInTable \u003d collector;\n+          collectorIsNew \u003d true;\n         } catch (Exception e) {\n           throw new YarnRuntimeException(e);\n         }\n       } else {\n-        String msg \u003d \"the aggregator for \" + id + \" already exists!\";\n+        String msg \u003d \"the collector for \" + id + \" already exists!\";\n         LOG.error(msg);\n       }\n-      \n+\n     }\n-    // Report to NM if a new aggregator is added.\n-    if (aggregatorIsNew) {\n+    // Report to NM if a new collector is added.\n+    if (collectorIsNew) {\n       try {\n-        reportNewAggregatorToNM(appId);\n+        reportNewCollectorToNM(appId);\n       } catch (Exception e) {\n         // throw exception here as it cannot be used if failed report to NM\n-        LOG.error(\"Failed to report a new aggregator for application: \" + appId + \n-            \" to NM Aggregator Services.\");\n+        LOG.error(\"Failed to report a new collector for application: \" + appId +\n+            \" to the NM Collector Service.\");\n         throw new YarnRuntimeException(e);\n       }\n     }\n-    \n-    return aggregatorInTable;\n+\n+    return collectorInTable;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public TimelineCollector putIfAbsent(ApplicationId appId,\n      TimelineCollector collector) {\n    String id \u003d appId.toString();\n    TimelineCollector collectorInTable;\n    boolean collectorIsNew \u003d false;\n    synchronized (collectors) {\n      collectorInTable \u003d collectors.get(id);\n      if (collectorInTable \u003d\u003d null) {\n        try {\n          // initialize, start, and add it to the collection so it can be\n          // cleaned up when the parent shuts down\n          collector.init(getConfig());\n          collector.start();\n          collectors.put(id, collector);\n          LOG.info(\"the collector for \" + id + \" was added\");\n          collectorInTable \u003d collector;\n          collectorIsNew \u003d true;\n        } catch (Exception e) {\n          throw new YarnRuntimeException(e);\n        }\n      } else {\n        String msg \u003d \"the collector for \" + id + \" already exists!\";\n        LOG.error(msg);\n      }\n\n    }\n    // Report to NM if a new collector is added.\n    if (collectorIsNew) {\n      try {\n        reportNewCollectorToNM(appId);\n      } catch (Exception e) {\n        // throw exception here as it cannot be used if failed report to NM\n        LOG.error(\"Failed to report a new collector for application: \" + appId +\n            \" to the NM Collector Service.\");\n        throw new YarnRuntimeException(e);\n      }\n    }\n\n    return collectorInTable;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/TimelineCollectorManager.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3333. Rename TimelineAggregator etc. to TimelineCollector. Contributed by Sangjin Lee\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "2188a07e5bea1da26bf679ca0ece26ab596d3438",
          "commitAuthor": "Junping Du",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "9b5636408005676ae580f8d929f8e912c27828e7",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,40 @@\n-  public TimelineAggregator putIfAbsent(ApplicationId appId, \n-      TimelineAggregator aggregator) {\n+  public TimelineCollector putIfAbsent(ApplicationId appId,\n+      TimelineCollector collector) {\n     String id \u003d appId.toString();\n-    TimelineAggregator aggregatorInTable;\n-    boolean aggregatorIsNew \u003d false;\n-    synchronized (aggregators) {\n-      aggregatorInTable \u003d aggregators.get(id);\n-      if (aggregatorInTable \u003d\u003d null) {\n+    TimelineCollector collectorInTable;\n+    boolean collectorIsNew \u003d false;\n+    synchronized (collectors) {\n+      collectorInTable \u003d collectors.get(id);\n+      if (collectorInTable \u003d\u003d null) {\n         try {\n           // initialize, start, and add it to the collection so it can be\n           // cleaned up when the parent shuts down\n-          aggregator.init(getConfig());\n-          aggregator.start();\n-          aggregators.put(id, aggregator);\n-          LOG.info(\"the aggregator for \" + id + \" was added\");\n-          aggregatorInTable \u003d aggregator;\n-          aggregatorIsNew \u003d true;\n+          collector.init(getConfig());\n+          collector.start();\n+          collectors.put(id, collector);\n+          LOG.info(\"the collector for \" + id + \" was added\");\n+          collectorInTable \u003d collector;\n+          collectorIsNew \u003d true;\n         } catch (Exception e) {\n           throw new YarnRuntimeException(e);\n         }\n       } else {\n-        String msg \u003d \"the aggregator for \" + id + \" already exists!\";\n+        String msg \u003d \"the collector for \" + id + \" already exists!\";\n         LOG.error(msg);\n       }\n-      \n+\n     }\n-    // Report to NM if a new aggregator is added.\n-    if (aggregatorIsNew) {\n+    // Report to NM if a new collector is added.\n+    if (collectorIsNew) {\n       try {\n-        reportNewAggregatorToNM(appId);\n+        reportNewCollectorToNM(appId);\n       } catch (Exception e) {\n         // throw exception here as it cannot be used if failed report to NM\n-        LOG.error(\"Failed to report a new aggregator for application: \" + appId + \n-            \" to NM Aggregator Services.\");\n+        LOG.error(\"Failed to report a new collector for application: \" + appId +\n+            \" to the NM Collector Service.\");\n         throw new YarnRuntimeException(e);\n       }\n     }\n-    \n-    return aggregatorInTable;\n+\n+    return collectorInTable;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public TimelineCollector putIfAbsent(ApplicationId appId,\n      TimelineCollector collector) {\n    String id \u003d appId.toString();\n    TimelineCollector collectorInTable;\n    boolean collectorIsNew \u003d false;\n    synchronized (collectors) {\n      collectorInTable \u003d collectors.get(id);\n      if (collectorInTable \u003d\u003d null) {\n        try {\n          // initialize, start, and add it to the collection so it can be\n          // cleaned up when the parent shuts down\n          collector.init(getConfig());\n          collector.start();\n          collectors.put(id, collector);\n          LOG.info(\"the collector for \" + id + \" was added\");\n          collectorInTable \u003d collector;\n          collectorIsNew \u003d true;\n        } catch (Exception e) {\n          throw new YarnRuntimeException(e);\n        }\n      } else {\n        String msg \u003d \"the collector for \" + id + \" already exists!\";\n        LOG.error(msg);\n      }\n\n    }\n    // Report to NM if a new collector is added.\n    if (collectorIsNew) {\n      try {\n        reportNewCollectorToNM(appId);\n      } catch (Exception e) {\n        // throw exception here as it cannot be used if failed report to NM\n        LOG.error(\"Failed to report a new collector for application: \" + appId +\n            \" to the NM Collector Service.\");\n        throw new YarnRuntimeException(e);\n      }\n    }\n\n    return collectorInTable;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/collector/TimelineCollectorManager.java",
          "extendedDetails": {
            "oldValue": "[appId-ApplicationId, aggregator-TimelineAggregator]",
            "newValue": "[appId-ApplicationId, collector-TimelineCollector]"
          }
        }
      ]
    },
    "9b5636408005676ae580f8d929f8e912c27828e7": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-3039. Implemented the app-level timeline aggregator discovery service. Contributed by Junping Du.\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "9b5636408005676ae580f8d929f8e912c27828e7",
      "commitAuthor": "Zhijie Shen",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3039. Implemented the app-level timeline aggregator discovery service. Contributed by Junping Du.\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "9b5636408005676ae580f8d929f8e912c27828e7",
          "commitAuthor": "Zhijie Shen",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "bf54d32750f8b27a170d7a0a8d8f022430327341",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,40 @@\n-  public TimelineAggregator putIfAbsent(String id, TimelineAggregator aggregator) {\n+  public TimelineAggregator putIfAbsent(ApplicationId appId, \n+      TimelineAggregator aggregator) {\n+    String id \u003d appId.toString();\n+    TimelineAggregator aggregatorInTable;\n+    boolean aggregatorIsNew \u003d false;\n     synchronized (aggregators) {\n-      TimelineAggregator aggregatorInTable \u003d aggregators.get(id);\n+      aggregatorInTable \u003d aggregators.get(id);\n       if (aggregatorInTable \u003d\u003d null) {\n         try {\n           // initialize, start, and add it to the collection so it can be\n           // cleaned up when the parent shuts down\n           aggregator.init(getConfig());\n           aggregator.start();\n           aggregators.put(id, aggregator);\n           LOG.info(\"the aggregator for \" + id + \" was added\");\n-          return aggregator;\n+          aggregatorInTable \u003d aggregator;\n+          aggregatorIsNew \u003d true;\n         } catch (Exception e) {\n           throw new YarnRuntimeException(e);\n         }\n       } else {\n         String msg \u003d \"the aggregator for \" + id + \" already exists!\";\n         LOG.error(msg);\n-        return aggregatorInTable;\n+      }\n+      \n+    }\n+    // Report to NM if a new aggregator is added.\n+    if (aggregatorIsNew) {\n+      try {\n+        reportNewAggregatorToNM(appId);\n+      } catch (Exception e) {\n+        // throw exception here as it cannot be used if failed report to NM\n+        LOG.error(\"Failed to report a new aggregator for application: \" + appId + \n+            \" to NM Aggregator Services.\");\n+        throw new YarnRuntimeException(e);\n       }\n     }\n+    \n+    return aggregatorInTable;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public TimelineAggregator putIfAbsent(ApplicationId appId, \n      TimelineAggregator aggregator) {\n    String id \u003d appId.toString();\n    TimelineAggregator aggregatorInTable;\n    boolean aggregatorIsNew \u003d false;\n    synchronized (aggregators) {\n      aggregatorInTable \u003d aggregators.get(id);\n      if (aggregatorInTable \u003d\u003d null) {\n        try {\n          // initialize, start, and add it to the collection so it can be\n          // cleaned up when the parent shuts down\n          aggregator.init(getConfig());\n          aggregator.start();\n          aggregators.put(id, aggregator);\n          LOG.info(\"the aggregator for \" + id + \" was added\");\n          aggregatorInTable \u003d aggregator;\n          aggregatorIsNew \u003d true;\n        } catch (Exception e) {\n          throw new YarnRuntimeException(e);\n        }\n      } else {\n        String msg \u003d \"the aggregator for \" + id + \" already exists!\";\n        LOG.error(msg);\n      }\n      \n    }\n    // Report to NM if a new aggregator is added.\n    if (aggregatorIsNew) {\n      try {\n        reportNewAggregatorToNM(appId);\n      } catch (Exception e) {\n        // throw exception here as it cannot be used if failed report to NM\n        LOG.error(\"Failed to report a new aggregator for application: \" + appId + \n            \" to NM Aggregator Services.\");\n        throw new YarnRuntimeException(e);\n      }\n    }\n    \n    return aggregatorInTable;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/aggregator/TimelineAggregatorsCollection.java",
          "extendedDetails": {
            "oldValue": "[id-String, aggregator-TimelineAggregator]",
            "newValue": "[appId-ApplicationId, aggregator-TimelineAggregator]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3039. Implemented the app-level timeline aggregator discovery service. Contributed by Junping Du.\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "9b5636408005676ae580f8d929f8e912c27828e7",
          "commitAuthor": "Zhijie Shen",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "bf54d32750f8b27a170d7a0a8d8f022430327341",
          "commitAuthorOld": "Zhijie Shen",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,40 @@\n-  public TimelineAggregator putIfAbsent(String id, TimelineAggregator aggregator) {\n+  public TimelineAggregator putIfAbsent(ApplicationId appId, \n+      TimelineAggregator aggregator) {\n+    String id \u003d appId.toString();\n+    TimelineAggregator aggregatorInTable;\n+    boolean aggregatorIsNew \u003d false;\n     synchronized (aggregators) {\n-      TimelineAggregator aggregatorInTable \u003d aggregators.get(id);\n+      aggregatorInTable \u003d aggregators.get(id);\n       if (aggregatorInTable \u003d\u003d null) {\n         try {\n           // initialize, start, and add it to the collection so it can be\n           // cleaned up when the parent shuts down\n           aggregator.init(getConfig());\n           aggregator.start();\n           aggregators.put(id, aggregator);\n           LOG.info(\"the aggregator for \" + id + \" was added\");\n-          return aggregator;\n+          aggregatorInTable \u003d aggregator;\n+          aggregatorIsNew \u003d true;\n         } catch (Exception e) {\n           throw new YarnRuntimeException(e);\n         }\n       } else {\n         String msg \u003d \"the aggregator for \" + id + \" already exists!\";\n         LOG.error(msg);\n-        return aggregatorInTable;\n+      }\n+      \n+    }\n+    // Report to NM if a new aggregator is added.\n+    if (aggregatorIsNew) {\n+      try {\n+        reportNewAggregatorToNM(appId);\n+      } catch (Exception e) {\n+        // throw exception here as it cannot be used if failed report to NM\n+        LOG.error(\"Failed to report a new aggregator for application: \" + appId + \n+            \" to NM Aggregator Services.\");\n+        throw new YarnRuntimeException(e);\n       }\n     }\n+    \n+    return aggregatorInTable;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public TimelineAggregator putIfAbsent(ApplicationId appId, \n      TimelineAggregator aggregator) {\n    String id \u003d appId.toString();\n    TimelineAggregator aggregatorInTable;\n    boolean aggregatorIsNew \u003d false;\n    synchronized (aggregators) {\n      aggregatorInTable \u003d aggregators.get(id);\n      if (aggregatorInTable \u003d\u003d null) {\n        try {\n          // initialize, start, and add it to the collection so it can be\n          // cleaned up when the parent shuts down\n          aggregator.init(getConfig());\n          aggregator.start();\n          aggregators.put(id, aggregator);\n          LOG.info(\"the aggregator for \" + id + \" was added\");\n          aggregatorInTable \u003d aggregator;\n          aggregatorIsNew \u003d true;\n        } catch (Exception e) {\n          throw new YarnRuntimeException(e);\n        }\n      } else {\n        String msg \u003d \"the aggregator for \" + id + \" already exists!\";\n        LOG.error(msg);\n      }\n      \n    }\n    // Report to NM if a new aggregator is added.\n    if (aggregatorIsNew) {\n      try {\n        reportNewAggregatorToNM(appId);\n      } catch (Exception e) {\n        // throw exception here as it cannot be used if failed report to NM\n        LOG.error(\"Failed to report a new aggregator for application: \" + appId + \n            \" to NM Aggregator Services.\");\n        throw new YarnRuntimeException(e);\n      }\n    }\n    \n    return aggregatorInTable;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/aggregator/TimelineAggregatorsCollection.java",
          "extendedDetails": {}
        }
      ]
    },
    "bf54d32750f8b27a170d7a0a8d8f022430327341": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3210. Refactored timeline aggregator according to new code organization proposed in YARN-3166. Contributed by Li Lu.\n\n(cherry picked from commit d3ff7f06cbc66d3a23c2551e7d4c752689f46afe)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "bf54d32750f8b27a170d7a0a8d8f022430327341",
      "commitAuthor": "Zhijie Shen",
      "diff": "@@ -0,0 +1,22 @@\n+  public TimelineAggregator putIfAbsent(String id, TimelineAggregator aggregator) {\n+    synchronized (aggregators) {\n+      TimelineAggregator aggregatorInTable \u003d aggregators.get(id);\n+      if (aggregatorInTable \u003d\u003d null) {\n+        try {\n+          // initialize, start, and add it to the collection so it can be\n+          // cleaned up when the parent shuts down\n+          aggregator.init(getConfig());\n+          aggregator.start();\n+          aggregators.put(id, aggregator);\n+          LOG.info(\"the aggregator for \" + id + \" was added\");\n+          return aggregator;\n+        } catch (Exception e) {\n+          throw new YarnRuntimeException(e);\n+        }\n+      } else {\n+        String msg \u003d \"the aggregator for \" + id + \" already exists!\";\n+        LOG.error(msg);\n+        return aggregatorInTable;\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineAggregator putIfAbsent(String id, TimelineAggregator aggregator) {\n    synchronized (aggregators) {\n      TimelineAggregator aggregatorInTable \u003d aggregators.get(id);\n      if (aggregatorInTable \u003d\u003d null) {\n        try {\n          // initialize, start, and add it to the collection so it can be\n          // cleaned up when the parent shuts down\n          aggregator.init(getConfig());\n          aggregator.start();\n          aggregators.put(id, aggregator);\n          LOG.info(\"the aggregator for \" + id + \" was added\");\n          return aggregator;\n        } catch (Exception e) {\n          throw new YarnRuntimeException(e);\n        }\n      } else {\n        String msg \u003d \"the aggregator for \" + id + \" already exists!\";\n        LOG.error(msg);\n        return aggregatorInTable;\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/aggregator/TimelineAggregatorsCollection.java"
    }
  }
}