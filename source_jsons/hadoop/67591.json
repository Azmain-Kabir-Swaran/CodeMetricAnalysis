{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ResourceEstimatorService.java",
  "functionName": "getPrediction",
  "functionId": "getPrediction___pipelineId-String(annotations-@PathParam(value \u003d \"pipelineId\"))",
  "sourceFilePath": "hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/service/ResourceEstimatorService.java",
  "functionStartLine": 147,
  "functionEndLine": 164,
  "numCommitsSeen": 3,
  "timeTaken": 445,
  "changeHistory": [
    "625039ef20e6011ab360131d70582a6e4bf2ec1d"
  ],
  "changeHistoryShort": {
    "625039ef20e6011ab360131d70582a6e4bf2ec1d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "625039ef20e6011ab360131d70582a6e4bf2ec1d": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-14840. Tool to estimate resource requirements of an application pipeline based on prior executions. (Rui Li via Subru).\n",
      "commitDate": "25/10/17 3:51 PM",
      "commitName": "625039ef20e6011ab360131d70582a6e4bf2ec1d",
      "commitAuthor": "Subru Krishnan",
      "diff": "@@ -0,0 +1,18 @@\n+  public String getPrediction(\n+      @PathParam(value \u003d \"pipelineId\") String pipelineId)\n+      throws SolverException, SkylineStoreException {\n+    // first, try to grab the predicted resource allocation from the skyline\n+    // store\n+    RLESparseResourceAllocation result \u003d skylineStore.getEstimation(pipelineId);\n+    // if received resource allocation is null, then run the solver\n+    if (result \u003d\u003d null) {\n+      RecurrenceId recurrenceId \u003d new RecurrenceId(pipelineId, \"*\");\n+      Map\u003cRecurrenceId, List\u003cResourceSkyline\u003e\u003e jobHistory \u003d\n+          skylineStore.getHistory(recurrenceId);\n+      result \u003d solver.solve(jobHistory);\n+    }\n+    final String prediction \u003d gson.toJson(result, rleType);\n+    LOGGER.debug(\"Predict resource requests for pipelineId: {}.\" + pipelineId);\n+\n+    return prediction;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public String getPrediction(\n      @PathParam(value \u003d \"pipelineId\") String pipelineId)\n      throws SolverException, SkylineStoreException {\n    // first, try to grab the predicted resource allocation from the skyline\n    // store\n    RLESparseResourceAllocation result \u003d skylineStore.getEstimation(pipelineId);\n    // if received resource allocation is null, then run the solver\n    if (result \u003d\u003d null) {\n      RecurrenceId recurrenceId \u003d new RecurrenceId(pipelineId, \"*\");\n      Map\u003cRecurrenceId, List\u003cResourceSkyline\u003e\u003e jobHistory \u003d\n          skylineStore.getHistory(recurrenceId);\n      result \u003d solver.solve(jobHistory);\n    }\n    final String prediction \u003d gson.toJson(result, rleType);\n    LOGGER.debug(\"Predict resource requests for pipelineId: {}.\" + pipelineId);\n\n    return prediction;\n  }",
      "path": "hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/service/ResourceEstimatorService.java"
    }
  }
}