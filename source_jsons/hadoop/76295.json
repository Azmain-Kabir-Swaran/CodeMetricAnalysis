{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DecompressorStream.java",
  "functionName": "decompress",
  "functionId": "decompress___b-byte[]__off-int__len-int",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/DecompressorStream.java",
  "functionStartLine": 108,
  "functionEndLine": 173,
  "numCommitsSeen": 11,
  "timeTaken": 1101,
  "changeHistory": [
    "8ef75a702e3b4b8ca7794421c44da7f8d44daa4c",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "2a248dfc32e5061c1f80295f448ca525ade764c6",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "8ef75a702e3b4b8ca7794421c44da7f8d44daa4c": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "2a248dfc32e5061c1f80295f448ca525ade764c6": "Ybodychange",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8ef75a702e3b4b8ca7794421c44da7f8d44daa4c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9939. Increase DecompressorStream skip buffer size. Contributed by John Zhuge.\n",
      "commitDate": "06/05/16 5:23 PM",
      "commitName": "8ef75a702e3b4b8ca7794421c44da7f8d44daa4c",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "10/12/14 12:44 PM",
      "commitNameOld": "bbd6a3277678a60d472e76a207f25a916220946c",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 513.15,
      "commitsBetweenForRepo": 3887,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,66 @@\n   protected int decompress(byte[] b, int off, int len) throws IOException {\n-    int n \u003d 0;\n+    int n;\n \n     while ((n \u003d decompressor.decompress(b, off, len)) \u003d\u003d 0) {\n       if (decompressor.needsDictionary()) {\n         eof \u003d true;\n         return -1;\n       }\n \n       if (decompressor.finished()) {\n         // First see if there was any leftover buffered input from previous\n         // stream; if not, attempt to refill buffer.  If refill -\u003e EOF, we\u0027re\n         // all done; else reset, fix up input buffer, and get ready for next\n         // concatenated substream/\"member\".\n         int nRemaining \u003d decompressor.getRemaining();\n         if (nRemaining \u003d\u003d 0) {\n           int m \u003d getCompressedData();\n           if (m \u003d\u003d -1) {\n             // apparently the previous end-of-stream was also end-of-file:\n             // return success, as if we had never called getCompressedData()\n             eof \u003d true;\n             return -1;\n           }\n           decompressor.reset();\n           decompressor.setInput(buffer, 0, m);\n           lastBytesSent \u003d m;\n         } else {\n           // looks like it\u0027s a concatenated stream:  reset low-level zlib (or\n           // other engine) and buffers, then \"resend\" remaining input data\n           decompressor.reset();\n           int leftoverOffset \u003d lastBytesSent - nRemaining;\n           assert (leftoverOffset \u003e\u003d 0);\n           // this recopies userBuf -\u003e direct buffer if using native libraries:\n           decompressor.setInput(buffer, leftoverOffset, nRemaining);\n           // NOTE:  this is the one place we do NOT want to save the number\n           // of bytes sent (nRemaining here) into lastBytesSent:  since we\n           // are resending what we\u0027ve already sent before, offset is nonzero\n           // in general (only way it could be zero is if it already equals\n           // nRemaining), which would then screw up the offset calculation\n           // _next_ time around.  IOW, getRemaining() is in terms of the\n           // original, zero-offset bufferload, so lastBytesSent must be as\n           // well.  Cheesy ASCII art:\n           //\n           //          \u003c------------ m, lastBytesSent -----------\u003e\n           //          +\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d+\n           // buffer:  |1111111111|22222222222222222|333333333333|     |\n           //          +\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d+\n           //     #1:  \u003c-- off --\u003e|\u003c-------- nRemaining ---------\u003e\n           //     #2:  \u003c----------- off -----------\u003e|\u003c-- nRem. --\u003e\n           //     #3:  (final substream:  nRemaining \u003d\u003d 0; eof \u003d true)\n           //\n           // If lastBytesSent is anything other than m, as shown, then \"off\"\n           // will be calculated incorrectly.\n         }\n       } else if (decompressor.needsInput()) {\n         int m \u003d getCompressedData();\n         if (m \u003d\u003d -1) {\n           throw new EOFException(\"Unexpected end of input stream\");\n         }\n         decompressor.setInput(buffer, 0, m);\n         lastBytesSent \u003d m;\n       }\n     }\n \n     return n;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected int decompress(byte[] b, int off, int len) throws IOException {\n    int n;\n\n    while ((n \u003d decompressor.decompress(b, off, len)) \u003d\u003d 0) {\n      if (decompressor.needsDictionary()) {\n        eof \u003d true;\n        return -1;\n      }\n\n      if (decompressor.finished()) {\n        // First see if there was any leftover buffered input from previous\n        // stream; if not, attempt to refill buffer.  If refill -\u003e EOF, we\u0027re\n        // all done; else reset, fix up input buffer, and get ready for next\n        // concatenated substream/\"member\".\n        int nRemaining \u003d decompressor.getRemaining();\n        if (nRemaining \u003d\u003d 0) {\n          int m \u003d getCompressedData();\n          if (m \u003d\u003d -1) {\n            // apparently the previous end-of-stream was also end-of-file:\n            // return success, as if we had never called getCompressedData()\n            eof \u003d true;\n            return -1;\n          }\n          decompressor.reset();\n          decompressor.setInput(buffer, 0, m);\n          lastBytesSent \u003d m;\n        } else {\n          // looks like it\u0027s a concatenated stream:  reset low-level zlib (or\n          // other engine) and buffers, then \"resend\" remaining input data\n          decompressor.reset();\n          int leftoverOffset \u003d lastBytesSent - nRemaining;\n          assert (leftoverOffset \u003e\u003d 0);\n          // this recopies userBuf -\u003e direct buffer if using native libraries:\n          decompressor.setInput(buffer, leftoverOffset, nRemaining);\n          // NOTE:  this is the one place we do NOT want to save the number\n          // of bytes sent (nRemaining here) into lastBytesSent:  since we\n          // are resending what we\u0027ve already sent before, offset is nonzero\n          // in general (only way it could be zero is if it already equals\n          // nRemaining), which would then screw up the offset calculation\n          // _next_ time around.  IOW, getRemaining() is in terms of the\n          // original, zero-offset bufferload, so lastBytesSent must be as\n          // well.  Cheesy ASCII art:\n          //\n          //          \u003c------------ m, lastBytesSent -----------\u003e\n          //          +\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d+\n          // buffer:  |1111111111|22222222222222222|333333333333|     |\n          //          +\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d+\n          //     #1:  \u003c-- off --\u003e|\u003c-------- nRemaining ---------\u003e\n          //     #2:  \u003c----------- off -----------\u003e|\u003c-- nRem. --\u003e\n          //     #3:  (final substream:  nRemaining \u003d\u003d 0; eof \u003d true)\n          //\n          // If lastBytesSent is anything other than m, as shown, then \"off\"\n          // will be calculated incorrectly.\n        }\n      } else if (decompressor.needsInput()) {\n        int m \u003d getCompressedData();\n        if (m \u003d\u003d -1) {\n          throw new EOFException(\"Unexpected end of input stream\");\n        }\n        decompressor.setInput(buffer, 0, m);\n        lastBytesSent \u003d m;\n      }\n    }\n\n    return n;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/DecompressorStream.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected int decompress(byte[] b, int off, int len) throws IOException {\n    int n \u003d 0;\n\n    while ((n \u003d decompressor.decompress(b, off, len)) \u003d\u003d 0) {\n      if (decompressor.needsDictionary()) {\n        eof \u003d true;\n        return -1;\n      }\n\n      if (decompressor.finished()) {\n        // First see if there was any leftover buffered input from previous\n        // stream; if not, attempt to refill buffer.  If refill -\u003e EOF, we\u0027re\n        // all done; else reset, fix up input buffer, and get ready for next\n        // concatenated substream/\"member\".\n        int nRemaining \u003d decompressor.getRemaining();\n        if (nRemaining \u003d\u003d 0) {\n          int m \u003d getCompressedData();\n          if (m \u003d\u003d -1) {\n            // apparently the previous end-of-stream was also end-of-file:\n            // return success, as if we had never called getCompressedData()\n            eof \u003d true;\n            return -1;\n          }\n          decompressor.reset();\n          decompressor.setInput(buffer, 0, m);\n          lastBytesSent \u003d m;\n        } else {\n          // looks like it\u0027s a concatenated stream:  reset low-level zlib (or\n          // other engine) and buffers, then \"resend\" remaining input data\n          decompressor.reset();\n          int leftoverOffset \u003d lastBytesSent - nRemaining;\n          assert (leftoverOffset \u003e\u003d 0);\n          // this recopies userBuf -\u003e direct buffer if using native libraries:\n          decompressor.setInput(buffer, leftoverOffset, nRemaining);\n          // NOTE:  this is the one place we do NOT want to save the number\n          // of bytes sent (nRemaining here) into lastBytesSent:  since we\n          // are resending what we\u0027ve already sent before, offset is nonzero\n          // in general (only way it could be zero is if it already equals\n          // nRemaining), which would then screw up the offset calculation\n          // _next_ time around.  IOW, getRemaining() is in terms of the\n          // original, zero-offset bufferload, so lastBytesSent must be as\n          // well.  Cheesy ASCII art:\n          //\n          //          \u003c------------ m, lastBytesSent -----------\u003e\n          //          +\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d+\n          // buffer:  |1111111111|22222222222222222|333333333333|     |\n          //          +\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d+\n          //     #1:  \u003c-- off --\u003e|\u003c-------- nRemaining ---------\u003e\n          //     #2:  \u003c----------- off -----------\u003e|\u003c-- nRem. --\u003e\n          //     #3:  (final substream:  nRemaining \u003d\u003d 0; eof \u003d true)\n          //\n          // If lastBytesSent is anything other than m, as shown, then \"off\"\n          // will be calculated incorrectly.\n        }\n      } else if (decompressor.needsInput()) {\n        int m \u003d getCompressedData();\n        if (m \u003d\u003d -1) {\n          throw new EOFException(\"Unexpected end of input stream\");\n        }\n        decompressor.setInput(buffer, 0, m);\n        lastBytesSent \u003d m;\n      }\n    }\n\n    return n;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/DecompressorStream.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/io/compress/DecompressorStream.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/DecompressorStream.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected int decompress(byte[] b, int off, int len) throws IOException {\n    int n \u003d 0;\n\n    while ((n \u003d decompressor.decompress(b, off, len)) \u003d\u003d 0) {\n      if (decompressor.needsDictionary()) {\n        eof \u003d true;\n        return -1;\n      }\n\n      if (decompressor.finished()) {\n        // First see if there was any leftover buffered input from previous\n        // stream; if not, attempt to refill buffer.  If refill -\u003e EOF, we\u0027re\n        // all done; else reset, fix up input buffer, and get ready for next\n        // concatenated substream/\"member\".\n        int nRemaining \u003d decompressor.getRemaining();\n        if (nRemaining \u003d\u003d 0) {\n          int m \u003d getCompressedData();\n          if (m \u003d\u003d -1) {\n            // apparently the previous end-of-stream was also end-of-file:\n            // return success, as if we had never called getCompressedData()\n            eof \u003d true;\n            return -1;\n          }\n          decompressor.reset();\n          decompressor.setInput(buffer, 0, m);\n          lastBytesSent \u003d m;\n        } else {\n          // looks like it\u0027s a concatenated stream:  reset low-level zlib (or\n          // other engine) and buffers, then \"resend\" remaining input data\n          decompressor.reset();\n          int leftoverOffset \u003d lastBytesSent - nRemaining;\n          assert (leftoverOffset \u003e\u003d 0);\n          // this recopies userBuf -\u003e direct buffer if using native libraries:\n          decompressor.setInput(buffer, leftoverOffset, nRemaining);\n          // NOTE:  this is the one place we do NOT want to save the number\n          // of bytes sent (nRemaining here) into lastBytesSent:  since we\n          // are resending what we\u0027ve already sent before, offset is nonzero\n          // in general (only way it could be zero is if it already equals\n          // nRemaining), which would then screw up the offset calculation\n          // _next_ time around.  IOW, getRemaining() is in terms of the\n          // original, zero-offset bufferload, so lastBytesSent must be as\n          // well.  Cheesy ASCII art:\n          //\n          //          \u003c------------ m, lastBytesSent -----------\u003e\n          //          +\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d+\n          // buffer:  |1111111111|22222222222222222|333333333333|     |\n          //          +\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d+\n          //     #1:  \u003c-- off --\u003e|\u003c-------- nRemaining ---------\u003e\n          //     #2:  \u003c----------- off -----------\u003e|\u003c-- nRem. --\u003e\n          //     #3:  (final substream:  nRemaining \u003d\u003d 0; eof \u003d true)\n          //\n          // If lastBytesSent is anything other than m, as shown, then \"off\"\n          // will be calculated incorrectly.\n        }\n      } else if (decompressor.needsInput()) {\n        int m \u003d getCompressedData();\n        if (m \u003d\u003d -1) {\n          throw new EOFException(\"Unexpected end of input stream\");\n        }\n        decompressor.setInput(buffer, 0, m);\n        lastBytesSent \u003d m;\n      }\n    }\n\n    return n;\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/io/compress/DecompressorStream.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/io/compress/DecompressorStream.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/io/compress/DecompressorStream.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected int decompress(byte[] b, int off, int len) throws IOException {\n    int n \u003d 0;\n\n    while ((n \u003d decompressor.decompress(b, off, len)) \u003d\u003d 0) {\n      if (decompressor.needsDictionary()) {\n        eof \u003d true;\n        return -1;\n      }\n\n      if (decompressor.finished()) {\n        // First see if there was any leftover buffered input from previous\n        // stream; if not, attempt to refill buffer.  If refill -\u003e EOF, we\u0027re\n        // all done; else reset, fix up input buffer, and get ready for next\n        // concatenated substream/\"member\".\n        int nRemaining \u003d decompressor.getRemaining();\n        if (nRemaining \u003d\u003d 0) {\n          int m \u003d getCompressedData();\n          if (m \u003d\u003d -1) {\n            // apparently the previous end-of-stream was also end-of-file:\n            // return success, as if we had never called getCompressedData()\n            eof \u003d true;\n            return -1;\n          }\n          decompressor.reset();\n          decompressor.setInput(buffer, 0, m);\n          lastBytesSent \u003d m;\n        } else {\n          // looks like it\u0027s a concatenated stream:  reset low-level zlib (or\n          // other engine) and buffers, then \"resend\" remaining input data\n          decompressor.reset();\n          int leftoverOffset \u003d lastBytesSent - nRemaining;\n          assert (leftoverOffset \u003e\u003d 0);\n          // this recopies userBuf -\u003e direct buffer if using native libraries:\n          decompressor.setInput(buffer, leftoverOffset, nRemaining);\n          // NOTE:  this is the one place we do NOT want to save the number\n          // of bytes sent (nRemaining here) into lastBytesSent:  since we\n          // are resending what we\u0027ve already sent before, offset is nonzero\n          // in general (only way it could be zero is if it already equals\n          // nRemaining), which would then screw up the offset calculation\n          // _next_ time around.  IOW, getRemaining() is in terms of the\n          // original, zero-offset bufferload, so lastBytesSent must be as\n          // well.  Cheesy ASCII art:\n          //\n          //          \u003c------------ m, lastBytesSent -----------\u003e\n          //          +\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d+\n          // buffer:  |1111111111|22222222222222222|333333333333|     |\n          //          +\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d+\n          //     #1:  \u003c-- off --\u003e|\u003c-------- nRemaining ---------\u003e\n          //     #2:  \u003c----------- off -----------\u003e|\u003c-- nRem. --\u003e\n          //     #3:  (final substream:  nRemaining \u003d\u003d 0; eof \u003d true)\n          //\n          // If lastBytesSent is anything other than m, as shown, then \"off\"\n          // will be calculated incorrectly.\n        }\n      } else if (decompressor.needsInput()) {\n        int m \u003d getCompressedData();\n        if (m \u003d\u003d -1) {\n          throw new EOFException(\"Unexpected end of input stream\");\n        }\n        decompressor.setInput(buffer, 0, m);\n        lastBytesSent \u003d m;\n      }\n    }\n\n    return n;\n  }",
      "path": "common/src/java/org/apache/hadoop/io/compress/DecompressorStream.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/io/compress/DecompressorStream.java",
        "newPath": "common/src/java/org/apache/hadoop/io/compress/DecompressorStream.java"
      }
    },
    "2a248dfc32e5061c1f80295f448ca525ade764c6": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6835. Add support for concatenated gzip input. Contributed by Greg Roelofs\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@961532 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/07/10 4:22 PM",
      "commitName": "2a248dfc32e5061c1f80295f448ca525ade764c6",
      "commitAuthor": "Christopher Douglas",
      "commitDateOld": "11/06/10 2:34 PM",
      "commitNameOld": "6378822a67c0baa502d22201f5c2b478cbe1261c",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 26.07,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,66 @@\n   protected int decompress(byte[] b, int off, int len) throws IOException {\n     int n \u003d 0;\n-    \n+\n     while ((n \u003d decompressor.decompress(b, off, len)) \u003d\u003d 0) {\n-      if (decompressor.finished() || decompressor.needsDictionary()) {\n+      if (decompressor.needsDictionary()) {\n         eof \u003d true;\n         return -1;\n       }\n-      if (decompressor.needsInput()) {\n-        getCompressedData();\n+\n+      if (decompressor.finished()) {\n+        // First see if there was any leftover buffered input from previous\n+        // stream; if not, attempt to refill buffer.  If refill -\u003e EOF, we\u0027re\n+        // all done; else reset, fix up input buffer, and get ready for next\n+        // concatenated substream/\"member\".\n+        int nRemaining \u003d decompressor.getRemaining();\n+        if (nRemaining \u003d\u003d 0) {\n+          int m \u003d getCompressedData();\n+          if (m \u003d\u003d -1) {\n+            // apparently the previous end-of-stream was also end-of-file:\n+            // return success, as if we had never called getCompressedData()\n+            eof \u003d true;\n+            return -1;\n+          }\n+          decompressor.reset();\n+          decompressor.setInput(buffer, 0, m);\n+          lastBytesSent \u003d m;\n+        } else {\n+          // looks like it\u0027s a concatenated stream:  reset low-level zlib (or\n+          // other engine) and buffers, then \"resend\" remaining input data\n+          decompressor.reset();\n+          int leftoverOffset \u003d lastBytesSent - nRemaining;\n+          assert (leftoverOffset \u003e\u003d 0);\n+          // this recopies userBuf -\u003e direct buffer if using native libraries:\n+          decompressor.setInput(buffer, leftoverOffset, nRemaining);\n+          // NOTE:  this is the one place we do NOT want to save the number\n+          // of bytes sent (nRemaining here) into lastBytesSent:  since we\n+          // are resending what we\u0027ve already sent before, offset is nonzero\n+          // in general (only way it could be zero is if it already equals\n+          // nRemaining), which would then screw up the offset calculation\n+          // _next_ time around.  IOW, getRemaining() is in terms of the\n+          // original, zero-offset bufferload, so lastBytesSent must be as\n+          // well.  Cheesy ASCII art:\n+          //\n+          //          \u003c------------ m, lastBytesSent -----------\u003e\n+          //          +\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d+\n+          // buffer:  |1111111111|22222222222222222|333333333333|     |\n+          //          +\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d+\n+          //     #1:  \u003c-- off --\u003e|\u003c-------- nRemaining ---------\u003e\n+          //     #2:  \u003c----------- off -----------\u003e|\u003c-- nRem. --\u003e\n+          //     #3:  (final substream:  nRemaining \u003d\u003d 0; eof \u003d true)\n+          //\n+          // If lastBytesSent is anything other than m, as shown, then \"off\"\n+          // will be calculated incorrectly.\n+        }\n+      } else if (decompressor.needsInput()) {\n+        int m \u003d getCompressedData();\n+        if (m \u003d\u003d -1) {\n+          throw new EOFException(\"Unexpected end of input stream\");\n+        }\n+        decompressor.setInput(buffer, 0, m);\n+        lastBytesSent \u003d m;\n       }\n     }\n-    \n+\n     return n;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected int decompress(byte[] b, int off, int len) throws IOException {\n    int n \u003d 0;\n\n    while ((n \u003d decompressor.decompress(b, off, len)) \u003d\u003d 0) {\n      if (decompressor.needsDictionary()) {\n        eof \u003d true;\n        return -1;\n      }\n\n      if (decompressor.finished()) {\n        // First see if there was any leftover buffered input from previous\n        // stream; if not, attempt to refill buffer.  If refill -\u003e EOF, we\u0027re\n        // all done; else reset, fix up input buffer, and get ready for next\n        // concatenated substream/\"member\".\n        int nRemaining \u003d decompressor.getRemaining();\n        if (nRemaining \u003d\u003d 0) {\n          int m \u003d getCompressedData();\n          if (m \u003d\u003d -1) {\n            // apparently the previous end-of-stream was also end-of-file:\n            // return success, as if we had never called getCompressedData()\n            eof \u003d true;\n            return -1;\n          }\n          decompressor.reset();\n          decompressor.setInput(buffer, 0, m);\n          lastBytesSent \u003d m;\n        } else {\n          // looks like it\u0027s a concatenated stream:  reset low-level zlib (or\n          // other engine) and buffers, then \"resend\" remaining input data\n          decompressor.reset();\n          int leftoverOffset \u003d lastBytesSent - nRemaining;\n          assert (leftoverOffset \u003e\u003d 0);\n          // this recopies userBuf -\u003e direct buffer if using native libraries:\n          decompressor.setInput(buffer, leftoverOffset, nRemaining);\n          // NOTE:  this is the one place we do NOT want to save the number\n          // of bytes sent (nRemaining here) into lastBytesSent:  since we\n          // are resending what we\u0027ve already sent before, offset is nonzero\n          // in general (only way it could be zero is if it already equals\n          // nRemaining), which would then screw up the offset calculation\n          // _next_ time around.  IOW, getRemaining() is in terms of the\n          // original, zero-offset bufferload, so lastBytesSent must be as\n          // well.  Cheesy ASCII art:\n          //\n          //          \u003c------------ m, lastBytesSent -----------\u003e\n          //          +\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d+\n          // buffer:  |1111111111|22222222222222222|333333333333|     |\n          //          +\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d+\n          //     #1:  \u003c-- off --\u003e|\u003c-------- nRemaining ---------\u003e\n          //     #2:  \u003c----------- off -----------\u003e|\u003c-- nRem. --\u003e\n          //     #3:  (final substream:  nRemaining \u003d\u003d 0; eof \u003d true)\n          //\n          // If lastBytesSent is anything other than m, as shown, then \"off\"\n          // will be calculated incorrectly.\n        }\n      } else if (decompressor.needsInput()) {\n        int m \u003d getCompressedData();\n        if (m \u003d\u003d -1) {\n          throw new EOFException(\"Unexpected end of input stream\");\n        }\n        decompressor.setInput(buffer, 0, m);\n        lastBytesSent \u003d m;\n      }\n    }\n\n    return n;\n  }",
      "path": "src/java/org/apache/hadoop/io/compress/DecompressorStream.java",
      "extendedDetails": {}
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,15 @@\n+  protected int decompress(byte[] b, int off, int len) throws IOException {\n+    int n \u003d 0;\n+    \n+    while ((n \u003d decompressor.decompress(b, off, len)) \u003d\u003d 0) {\n+      if (decompressor.finished() || decompressor.needsDictionary()) {\n+        eof \u003d true;\n+        return -1;\n+      }\n+      if (decompressor.needsInput()) {\n+        getCompressedData();\n+      }\n+    }\n+    \n+    return n;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected int decompress(byte[] b, int off, int len) throws IOException {\n    int n \u003d 0;\n    \n    while ((n \u003d decompressor.decompress(b, off, len)) \u003d\u003d 0) {\n      if (decompressor.finished() || decompressor.needsDictionary()) {\n        eof \u003d true;\n        return -1;\n      }\n      if (decompressor.needsInput()) {\n        getCompressedData();\n      }\n    }\n    \n    return n;\n  }",
      "path": "src/java/org/apache/hadoop/io/compress/DecompressorStream.java"
    }
  }
}