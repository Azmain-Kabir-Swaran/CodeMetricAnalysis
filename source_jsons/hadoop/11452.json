{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RoundRobinVolumeChoosingPolicy.java",
  "functionName": "chooseVolume",
  "functionId": "chooseVolume___volumes-List__V__(modifiers-final)__blockSize-long__storageId-String",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/RoundRobinVolumeChoosingPolicy.java",
  "functionStartLine": 54,
  "functionEndLine": 70,
  "numCommitsSeen": 21,
  "timeTaken": 3471,
  "changeHistory": [
    "a3954ccab148bddc290cb96528e63ff19799bcc9",
    "3a23dc683c058d3a5262ae9dca2d1c8c588a6a3e",
    "a317bd7b02c37bd57743bfad59593ec12f53f4ed",
    "67bdbd60cdebf909a847d56ba0f90b35876af0b3",
    "5e38a9acea252d324d598fb71fa5b12c574e5044"
  ],
  "changeHistoryShort": {
    "a3954ccab148bddc290cb96528e63ff19799bcc9": "Yparameterchange",
    "3a23dc683c058d3a5262ae9dca2d1c8c588a6a3e": "Ymultichange(Ymodifierchange,Ybodychange)",
    "a317bd7b02c37bd57743bfad59593ec12f53f4ed": "Yparametermetachange",
    "67bdbd60cdebf909a847d56ba0f90b35876af0b3": "Ymultichange(Yfilerename,Ybodychange)",
    "5e38a9acea252d324d598fb71fa5b12c574e5044": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a3954ccab148bddc290cb96528e63ff19799bcc9": {
      "type": "Yparameterchange",
      "commitMessage": "HDFS-9807. Add an optional StorageID to writes. Contributed by Ewan Higgs\n",
      "commitDate": "05/05/17 12:01 PM",
      "commitName": "a3954ccab148bddc290cb96528e63ff19799bcc9",
      "commitAuthor": "Chris Douglas",
      "commitDateOld": "17/02/16 11:29 AM",
      "commitNameOld": "3a23dc683c058d3a5262ae9dca2d1c8c588a6a3e",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 442.98,
      "commitsBetweenForRepo": 2921,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n-  public V chooseVolume(final List\u003cV\u003e volumes, long blockSize)\n+  public V chooseVolume(final List\u003cV\u003e volumes, long blockSize, String storageId)\n       throws IOException {\n \n     if (volumes.size() \u003c 1) {\n       throw new DiskOutOfSpaceException(\"No more available volumes\");\n     }\n \n     // As all the items in volumes are with the same storage type,\n     // so only need to get the storage type index of the first item in volumes\n     StorageType storageType \u003d volumes.get(0).getStorageType();\n     int index \u003d storageType !\u003d null ?\n             storageType.ordinal() : StorageType.DEFAULT.ordinal();\n \n     synchronized (syncLocks[index]) {\n       return chooseVolume(index, volumes, blockSize);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public V chooseVolume(final List\u003cV\u003e volumes, long blockSize, String storageId)\n      throws IOException {\n\n    if (volumes.size() \u003c 1) {\n      throw new DiskOutOfSpaceException(\"No more available volumes\");\n    }\n\n    // As all the items in volumes are with the same storage type,\n    // so only need to get the storage type index of the first item in volumes\n    StorageType storageType \u003d volumes.get(0).getStorageType();\n    int index \u003d storageType !\u003d null ?\n            storageType.ordinal() : StorageType.DEFAULT.ordinal();\n\n    synchronized (syncLocks[index]) {\n      return chooseVolume(index, volumes, blockSize);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/RoundRobinVolumeChoosingPolicy.java",
      "extendedDetails": {
        "oldValue": "[volumes-List\u003cV\u003e(modifiers-final), blockSize-long]",
        "newValue": "[volumes-List\u003cV\u003e(modifiers-final), blockSize-long, storageId-String]"
      }
    },
    "3a23dc683c058d3a5262ae9dca2d1c8c588a6a3e": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "HDFS-9608. Disk IO imbalance in HDFS with heterogeneous storages. Contributed by Wei Zhou.\n",
      "commitDate": "17/02/16 11:29 AM",
      "commitName": "3a23dc683c058d3a5262ae9dca2d1c8c588a6a3e",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-9608. Disk IO imbalance in HDFS with heterogeneous storages. Contributed by Wei Zhou.\n",
          "commitDate": "17/02/16 11:29 AM",
          "commitName": "3a23dc683c058d3a5262ae9dca2d1c8c588a6a3e",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "21/02/15 3:38 PM",
          "commitNameOld": "8b465b4b8caed31ca9daeaae108f9a868a30a455",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 360.83,
          "commitsBetweenForRepo": 2837,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,17 @@\n-  public synchronized V chooseVolume(final List\u003cV\u003e volumes, long blockSize)\n+  public V chooseVolume(final List\u003cV\u003e volumes, long blockSize)\n       throws IOException {\n \n-    if(volumes.size() \u003c 1) {\n+    if (volumes.size() \u003c 1) {\n       throw new DiskOutOfSpaceException(\"No more available volumes\");\n     }\n-    \n-    // since volumes could\u0027ve been removed because of the failure\n-    // make sure we are not out of bounds\n-    if(curVolume \u003e\u003d volumes.size()) {\n-      curVolume \u003d 0;\n-    }\n-    \n-    int startVolume \u003d curVolume;\n-    long maxAvailable \u003d 0;\n-    \n-    while (true) {\n-      final V volume \u003d volumes.get(curVolume);\n-      curVolume \u003d (curVolume + 1) % volumes.size();\n-      long availableVolumeSize \u003d volume.getAvailable();\n-      if (availableVolumeSize \u003e blockSize) {\n-        return volume;\n-      }\n-      \n-      if (availableVolumeSize \u003e maxAvailable) {\n-        maxAvailable \u003d availableVolumeSize;\n-      }\n-      \n-      if (curVolume \u003d\u003d startVolume) {\n-        throw new DiskOutOfSpaceException(\"Out of space: \"\n-            + \"The volume with the most available space (\u003d\" + maxAvailable\n-            + \" B) is less than the block size (\u003d\" + blockSize + \" B).\");\n-      }\n+\n+    // As all the items in volumes are with the same storage type,\n+    // so only need to get the storage type index of the first item in volumes\n+    StorageType storageType \u003d volumes.get(0).getStorageType();\n+    int index \u003d storageType !\u003d null ?\n+            storageType.ordinal() : StorageType.DEFAULT.ordinal();\n+\n+    synchronized (syncLocks[index]) {\n+      return chooseVolume(index, volumes, blockSize);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public V chooseVolume(final List\u003cV\u003e volumes, long blockSize)\n      throws IOException {\n\n    if (volumes.size() \u003c 1) {\n      throw new DiskOutOfSpaceException(\"No more available volumes\");\n    }\n\n    // As all the items in volumes are with the same storage type,\n    // so only need to get the storage type index of the first item in volumes\n    StorageType storageType \u003d volumes.get(0).getStorageType();\n    int index \u003d storageType !\u003d null ?\n            storageType.ordinal() : StorageType.DEFAULT.ordinal();\n\n    synchronized (syncLocks[index]) {\n      return chooseVolume(index, volumes, blockSize);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/RoundRobinVolumeChoosingPolicy.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-9608. Disk IO imbalance in HDFS with heterogeneous storages. Contributed by Wei Zhou.\n",
          "commitDate": "17/02/16 11:29 AM",
          "commitName": "3a23dc683c058d3a5262ae9dca2d1c8c588a6a3e",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "21/02/15 3:38 PM",
          "commitNameOld": "8b465b4b8caed31ca9daeaae108f9a868a30a455",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 360.83,
          "commitsBetweenForRepo": 2837,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,17 @@\n-  public synchronized V chooseVolume(final List\u003cV\u003e volumes, long blockSize)\n+  public V chooseVolume(final List\u003cV\u003e volumes, long blockSize)\n       throws IOException {\n \n-    if(volumes.size() \u003c 1) {\n+    if (volumes.size() \u003c 1) {\n       throw new DiskOutOfSpaceException(\"No more available volumes\");\n     }\n-    \n-    // since volumes could\u0027ve been removed because of the failure\n-    // make sure we are not out of bounds\n-    if(curVolume \u003e\u003d volumes.size()) {\n-      curVolume \u003d 0;\n-    }\n-    \n-    int startVolume \u003d curVolume;\n-    long maxAvailable \u003d 0;\n-    \n-    while (true) {\n-      final V volume \u003d volumes.get(curVolume);\n-      curVolume \u003d (curVolume + 1) % volumes.size();\n-      long availableVolumeSize \u003d volume.getAvailable();\n-      if (availableVolumeSize \u003e blockSize) {\n-        return volume;\n-      }\n-      \n-      if (availableVolumeSize \u003e maxAvailable) {\n-        maxAvailable \u003d availableVolumeSize;\n-      }\n-      \n-      if (curVolume \u003d\u003d startVolume) {\n-        throw new DiskOutOfSpaceException(\"Out of space: \"\n-            + \"The volume with the most available space (\u003d\" + maxAvailable\n-            + \" B) is less than the block size (\u003d\" + blockSize + \" B).\");\n-      }\n+\n+    // As all the items in volumes are with the same storage type,\n+    // so only need to get the storage type index of the first item in volumes\n+    StorageType storageType \u003d volumes.get(0).getStorageType();\n+    int index \u003d storageType !\u003d null ?\n+            storageType.ordinal() : StorageType.DEFAULT.ordinal();\n+\n+    synchronized (syncLocks[index]) {\n+      return chooseVolume(index, volumes, blockSize);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public V chooseVolume(final List\u003cV\u003e volumes, long blockSize)\n      throws IOException {\n\n    if (volumes.size() \u003c 1) {\n      throw new DiskOutOfSpaceException(\"No more available volumes\");\n    }\n\n    // As all the items in volumes are with the same storage type,\n    // so only need to get the storage type index of the first item in volumes\n    StorageType storageType \u003d volumes.get(0).getStorageType();\n    int index \u003d storageType !\u003d null ?\n            storageType.ordinal() : StorageType.DEFAULT.ordinal();\n\n    synchronized (syncLocks[index]) {\n      return chooseVolume(index, volumes, blockSize);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/RoundRobinVolumeChoosingPolicy.java",
          "extendedDetails": {}
        }
      ]
    },
    "a317bd7b02c37bd57743bfad59593ec12f53f4ed": {
      "type": "Yparametermetachange",
      "commitMessage": "HDFS-6925. DataNode should attempt to place replicas on transient storage first if lazyPersist flag is received. (Arpit Agarwal)\n",
      "commitDate": "27/08/14 9:47 PM",
      "commitName": "a317bd7b02c37bd57743bfad59593ec12f53f4ed",
      "commitAuthor": "arp",
      "commitDateOld": "26/03/12 2:14 PM",
      "commitNameOld": "67bdbd60cdebf909a847d56ba0f90b35876af0b3",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 884.31,
      "commitsBetweenForRepo": 5625,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,35 @@\n-  public synchronized V chooseVolume(final List\u003cV\u003e volumes, final long blockSize\n-      ) throws IOException {\n+  public synchronized V chooseVolume(final List\u003cV\u003e volumes, long blockSize)\n+      throws IOException {\n+\n     if(volumes.size() \u003c 1) {\n       throw new DiskOutOfSpaceException(\"No more available volumes\");\n     }\n     \n     // since volumes could\u0027ve been removed because of the failure\n     // make sure we are not out of bounds\n     if(curVolume \u003e\u003d volumes.size()) {\n       curVolume \u003d 0;\n     }\n     \n     int startVolume \u003d curVolume;\n     long maxAvailable \u003d 0;\n     \n     while (true) {\n       final V volume \u003d volumes.get(curVolume);\n       curVolume \u003d (curVolume + 1) % volumes.size();\n       long availableVolumeSize \u003d volume.getAvailable();\n-      if (availableVolumeSize \u003e blockSize) { return volume; }\n+      if (availableVolumeSize \u003e blockSize) {\n+        return volume;\n+      }\n       \n       if (availableVolumeSize \u003e maxAvailable) {\n         maxAvailable \u003d availableVolumeSize;\n       }\n       \n       if (curVolume \u003d\u003d startVolume) {\n         throw new DiskOutOfSpaceException(\"Out of space: \"\n             + \"The volume with the most available space (\u003d\" + maxAvailable\n             + \" B) is less than the block size (\u003d\" + blockSize + \" B).\");\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized V chooseVolume(final List\u003cV\u003e volumes, long blockSize)\n      throws IOException {\n\n    if(volumes.size() \u003c 1) {\n      throw new DiskOutOfSpaceException(\"No more available volumes\");\n    }\n    \n    // since volumes could\u0027ve been removed because of the failure\n    // make sure we are not out of bounds\n    if(curVolume \u003e\u003d volumes.size()) {\n      curVolume \u003d 0;\n    }\n    \n    int startVolume \u003d curVolume;\n    long maxAvailable \u003d 0;\n    \n    while (true) {\n      final V volume \u003d volumes.get(curVolume);\n      curVolume \u003d (curVolume + 1) % volumes.size();\n      long availableVolumeSize \u003d volume.getAvailable();\n      if (availableVolumeSize \u003e blockSize) {\n        return volume;\n      }\n      \n      if (availableVolumeSize \u003e maxAvailable) {\n        maxAvailable \u003d availableVolumeSize;\n      }\n      \n      if (curVolume \u003d\u003d startVolume) {\n        throw new DiskOutOfSpaceException(\"Out of space: \"\n            + \"The volume with the most available space (\u003d\" + maxAvailable\n            + \" B) is less than the block size (\u003d\" + blockSize + \" B).\");\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/RoundRobinVolumeChoosingPolicy.java",
      "extendedDetails": {
        "oldValue": "[volumes-List\u003cV\u003e(modifiers-final), blockSize-long(modifiers-final)]",
        "newValue": "[volumes-List\u003cV\u003e(modifiers-final), blockSize-long]"
      }
    },
    "67bdbd60cdebf909a847d56ba0f90b35876af0b3": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "(recommit) HDFS-3089. Move FSDatasetInterface and the related classes to a package. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1305603 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/03/12 2:14 PM",
      "commitName": "67bdbd60cdebf909a847d56ba0f90b35876af0b3",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "(recommit) HDFS-3089. Move FSDatasetInterface and the related classes to a package. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1305603 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "26/03/12 2:14 PM",
          "commitName": "67bdbd60cdebf909a847d56ba0f90b35876af0b3",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "26/03/12 2:09 PM",
          "commitNameOld": "5e38a9acea252d324d598fb71fa5b12c574e5044",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,32 @@\n   public synchronized V chooseVolume(final List\u003cV\u003e volumes, final long blockSize\n       ) throws IOException {\n     if(volumes.size() \u003c 1) {\n       throw new DiskOutOfSpaceException(\"No more available volumes\");\n     }\n     \n     // since volumes could\u0027ve been removed because of the failure\n     // make sure we are not out of bounds\n     if(curVolume \u003e\u003d volumes.size()) {\n       curVolume \u003d 0;\n     }\n     \n     int startVolume \u003d curVolume;\n     long maxAvailable \u003d 0;\n     \n     while (true) {\n       final V volume \u003d volumes.get(curVolume);\n       curVolume \u003d (curVolume + 1) % volumes.size();\n       long availableVolumeSize \u003d volume.getAvailable();\n       if (availableVolumeSize \u003e blockSize) { return volume; }\n       \n       if (availableVolumeSize \u003e maxAvailable) {\n         maxAvailable \u003d availableVolumeSize;\n       }\n       \n       if (curVolume \u003d\u003d startVolume) {\n-        throw new DiskOutOfSpaceException(\n-            \"Insufficient space for an additional block. Volume with the most available space has \"\n-                + maxAvailable\n-                + \" bytes free, configured block size is \"\n-                + blockSize);\n+        throw new DiskOutOfSpaceException(\"Out of space: \"\n+            + \"The volume with the most available space (\u003d\" + maxAvailable\n+            + \" B) is less than the block size (\u003d\" + blockSize + \" B).\");\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized V chooseVolume(final List\u003cV\u003e volumes, final long blockSize\n      ) throws IOException {\n    if(volumes.size() \u003c 1) {\n      throw new DiskOutOfSpaceException(\"No more available volumes\");\n    }\n    \n    // since volumes could\u0027ve been removed because of the failure\n    // make sure we are not out of bounds\n    if(curVolume \u003e\u003d volumes.size()) {\n      curVolume \u003d 0;\n    }\n    \n    int startVolume \u003d curVolume;\n    long maxAvailable \u003d 0;\n    \n    while (true) {\n      final V volume \u003d volumes.get(curVolume);\n      curVolume \u003d (curVolume + 1) % volumes.size();\n      long availableVolumeSize \u003d volume.getAvailable();\n      if (availableVolumeSize \u003e blockSize) { return volume; }\n      \n      if (availableVolumeSize \u003e maxAvailable) {\n        maxAvailable \u003d availableVolumeSize;\n      }\n      \n      if (curVolume \u003d\u003d startVolume) {\n        throw new DiskOutOfSpaceException(\"Out of space: \"\n            + \"The volume with the most available space (\u003d\" + maxAvailable\n            + \" B) is less than the block size (\u003d\" + blockSize + \" B).\");\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/RoundRobinVolumeChoosingPolicy.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/RoundRobinVolumesPolicy.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/RoundRobinVolumeChoosingPolicy.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "(recommit) HDFS-3089. Move FSDatasetInterface and the related classes to a package. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1305603 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "26/03/12 2:14 PM",
          "commitName": "67bdbd60cdebf909a847d56ba0f90b35876af0b3",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "26/03/12 2:09 PM",
          "commitNameOld": "5e38a9acea252d324d598fb71fa5b12c574e5044",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,32 @@\n   public synchronized V chooseVolume(final List\u003cV\u003e volumes, final long blockSize\n       ) throws IOException {\n     if(volumes.size() \u003c 1) {\n       throw new DiskOutOfSpaceException(\"No more available volumes\");\n     }\n     \n     // since volumes could\u0027ve been removed because of the failure\n     // make sure we are not out of bounds\n     if(curVolume \u003e\u003d volumes.size()) {\n       curVolume \u003d 0;\n     }\n     \n     int startVolume \u003d curVolume;\n     long maxAvailable \u003d 0;\n     \n     while (true) {\n       final V volume \u003d volumes.get(curVolume);\n       curVolume \u003d (curVolume + 1) % volumes.size();\n       long availableVolumeSize \u003d volume.getAvailable();\n       if (availableVolumeSize \u003e blockSize) { return volume; }\n       \n       if (availableVolumeSize \u003e maxAvailable) {\n         maxAvailable \u003d availableVolumeSize;\n       }\n       \n       if (curVolume \u003d\u003d startVolume) {\n-        throw new DiskOutOfSpaceException(\n-            \"Insufficient space for an additional block. Volume with the most available space has \"\n-                + maxAvailable\n-                + \" bytes free, configured block size is \"\n-                + blockSize);\n+        throw new DiskOutOfSpaceException(\"Out of space: \"\n+            + \"The volume with the most available space (\u003d\" + maxAvailable\n+            + \" B) is less than the block size (\u003d\" + blockSize + \" B).\");\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized V chooseVolume(final List\u003cV\u003e volumes, final long blockSize\n      ) throws IOException {\n    if(volumes.size() \u003c 1) {\n      throw new DiskOutOfSpaceException(\"No more available volumes\");\n    }\n    \n    // since volumes could\u0027ve been removed because of the failure\n    // make sure we are not out of bounds\n    if(curVolume \u003e\u003d volumes.size()) {\n      curVolume \u003d 0;\n    }\n    \n    int startVolume \u003d curVolume;\n    long maxAvailable \u003d 0;\n    \n    while (true) {\n      final V volume \u003d volumes.get(curVolume);\n      curVolume \u003d (curVolume + 1) % volumes.size();\n      long availableVolumeSize \u003d volume.getAvailable();\n      if (availableVolumeSize \u003e blockSize) { return volume; }\n      \n      if (availableVolumeSize \u003e maxAvailable) {\n        maxAvailable \u003d availableVolumeSize;\n      }\n      \n      if (curVolume \u003d\u003d startVolume) {\n        throw new DiskOutOfSpaceException(\"Out of space: \"\n            + \"The volume with the most available space (\u003d\" + maxAvailable\n            + \" B) is less than the block size (\u003d\" + blockSize + \" B).\");\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/RoundRobinVolumeChoosingPolicy.java",
          "extendedDetails": {}
        }
      ]
    },
    "5e38a9acea252d324d598fb71fa5b12c574e5044": {
      "type": "Yintroduced",
      "commitMessage": "Revert 1305590 for HDFS-3089.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1305598 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/03/12 2:09 PM",
      "commitName": "5e38a9acea252d324d598fb71fa5b12c574e5044",
      "commitAuthor": "Tsz-wo Sze",
      "diff": "@@ -0,0 +1,34 @@\n+  public synchronized V chooseVolume(final List\u003cV\u003e volumes, final long blockSize\n+      ) throws IOException {\n+    if(volumes.size() \u003c 1) {\n+      throw new DiskOutOfSpaceException(\"No more available volumes\");\n+    }\n+    \n+    // since volumes could\u0027ve been removed because of the failure\n+    // make sure we are not out of bounds\n+    if(curVolume \u003e\u003d volumes.size()) {\n+      curVolume \u003d 0;\n+    }\n+    \n+    int startVolume \u003d curVolume;\n+    long maxAvailable \u003d 0;\n+    \n+    while (true) {\n+      final V volume \u003d volumes.get(curVolume);\n+      curVolume \u003d (curVolume + 1) % volumes.size();\n+      long availableVolumeSize \u003d volume.getAvailable();\n+      if (availableVolumeSize \u003e blockSize) { return volume; }\n+      \n+      if (availableVolumeSize \u003e maxAvailable) {\n+        maxAvailable \u003d availableVolumeSize;\n+      }\n+      \n+      if (curVolume \u003d\u003d startVolume) {\n+        throw new DiskOutOfSpaceException(\n+            \"Insufficient space for an additional block. Volume with the most available space has \"\n+                + maxAvailable\n+                + \" bytes free, configured block size is \"\n+                + blockSize);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized V chooseVolume(final List\u003cV\u003e volumes, final long blockSize\n      ) throws IOException {\n    if(volumes.size() \u003c 1) {\n      throw new DiskOutOfSpaceException(\"No more available volumes\");\n    }\n    \n    // since volumes could\u0027ve been removed because of the failure\n    // make sure we are not out of bounds\n    if(curVolume \u003e\u003d volumes.size()) {\n      curVolume \u003d 0;\n    }\n    \n    int startVolume \u003d curVolume;\n    long maxAvailable \u003d 0;\n    \n    while (true) {\n      final V volume \u003d volumes.get(curVolume);\n      curVolume \u003d (curVolume + 1) % volumes.size();\n      long availableVolumeSize \u003d volume.getAvailable();\n      if (availableVolumeSize \u003e blockSize) { return volume; }\n      \n      if (availableVolumeSize \u003e maxAvailable) {\n        maxAvailable \u003d availableVolumeSize;\n      }\n      \n      if (curVolume \u003d\u003d startVolume) {\n        throw new DiskOutOfSpaceException(\n            \"Insufficient space for an additional block. Volume with the most available space has \"\n                + maxAvailable\n                + \" bytes free, configured block size is \"\n                + blockSize);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/RoundRobinVolumesPolicy.java"
    }
  }
}