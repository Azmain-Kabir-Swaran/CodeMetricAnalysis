{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "S3AFileSystem.java",
  "functionName": "toLocatedFileStatusIterator",
  "functionId": "toLocatedFileStatusIterator___iterator-RemoteIterator__? extends LocatedFileStatus__",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
  "functionStartLine": 4091,
  "functionEndLine": 4104,
  "numCommitsSeen": 247,
  "timeTaken": 6767,
  "changeHistory": [
    "a36274d69947648dbe82721220cc5240ec5d396d",
    "822d661b8fcc42bec6eea958d9fd02ef1aaa4b6c"
  ],
  "changeHistoryShort": {
    "a36274d69947648dbe82721220cc5240ec5d396d": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ymodifierchange,Yexceptionschange,Ybodychange)",
    "822d661b8fcc42bec6eea958d9fd02ef1aaa4b6c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a36274d69947648dbe82721220cc5240ec5d396d": {
      "type": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ymodifierchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "HADOOP-16085. S3Guard: use object version or etags to protect against inconsistent read after replace/overwrite.\n\nContributed by Ben Roling.\n\nS3Guard will now track the etag of uploaded files and, if an S3\nbucket is versioned, the object version.\n\nYou can then control how to react to a mismatch between the data\nin the DynamoDB table and that in the store: warn, fail, or, when\nusing versions, return the original value.\n\nThis adds two new columns to the table: etag and version.\nThis is transparent to older S3A clients -but when such clients\nadd/update data to the S3Guard table, they will not add these values.\nAs a result, the etag/version checks will not work with files uploaded by older clients.\n\nFor a consistent experience, upgrade all clients to use the latest hadoop version.\n",
      "commitDate": "19/05/19 2:29 PM",
      "commitName": "a36274d69947648dbe82721220cc5240ec5d396d",
      "commitAuthor": "Ben Roling",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HADOOP-16085. S3Guard: use object version or etags to protect against inconsistent read after replace/overwrite.\n\nContributed by Ben Roling.\n\nS3Guard will now track the etag of uploaded files and, if an S3\nbucket is versioned, the object version.\n\nYou can then control how to react to a mismatch between the data\nin the DynamoDB table and that in the store: warn, fail, or, when\nusing versions, return the original value.\n\nThis adds two new columns to the table: etag and version.\nThis is transparent to older S3A clients -but when such clients\nadd/update data to the S3Guard table, they will not add these values.\nAs a result, the etag/version checks will not work with files uploaded by older clients.\n\nFor a consistent experience, upgrade all clients to use the latest hadoop version.\n",
          "commitDate": "19/05/19 2:29 PM",
          "commitName": "a36274d69947648dbe82721220cc5240ec5d396d",
          "commitAuthor": "Ben Roling",
          "commitDateOld": "30/04/19 3:53 AM",
          "commitNameOld": "0af4011580878566213016af0c32633eabd15100",
          "commitAuthorOld": "Ben Roling",
          "daysBetweenCommits": 19.44,
          "commitsBetweenForRepo": 90,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,7 +1,14 @@\n-  LocatedFileStatus toLocatedFileStatus(FileStatus status)\n-      throws IOException {\n-    return new LocatedFileStatus(status,\n-        status.isFile() ?\n-          getFileBlockLocations(status, 0, status.getLen())\n-          : null);\n+  private static RemoteIterator\u003cLocatedFileStatus\u003e toLocatedFileStatusIterator(\n+      RemoteIterator\u003c? extends LocatedFileStatus\u003e iterator) {\n+    return new RemoteIterator\u003cLocatedFileStatus\u003e() {\n+      @Override\n+      public boolean hasNext() throws IOException {\n+        return iterator.hasNext();\n+      }\n+\n+      @Override\n+      public LocatedFileStatus next() throws IOException {\n+        return iterator.next();\n+      }\n+    };\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static RemoteIterator\u003cLocatedFileStatus\u003e toLocatedFileStatusIterator(\n      RemoteIterator\u003c? extends LocatedFileStatus\u003e iterator) {\n    return new RemoteIterator\u003cLocatedFileStatus\u003e() {\n      @Override\n      public boolean hasNext() throws IOException {\n        return iterator.hasNext();\n      }\n\n      @Override\n      public LocatedFileStatus next() throws IOException {\n        return iterator.next();\n      }\n    };\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
          "extendedDetails": {
            "oldValue": "toLocatedFileStatus",
            "newValue": "toLocatedFileStatusIterator"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-16085. S3Guard: use object version or etags to protect against inconsistent read after replace/overwrite.\n\nContributed by Ben Roling.\n\nS3Guard will now track the etag of uploaded files and, if an S3\nbucket is versioned, the object version.\n\nYou can then control how to react to a mismatch between the data\nin the DynamoDB table and that in the store: warn, fail, or, when\nusing versions, return the original value.\n\nThis adds two new columns to the table: etag and version.\nThis is transparent to older S3A clients -but when such clients\nadd/update data to the S3Guard table, they will not add these values.\nAs a result, the etag/version checks will not work with files uploaded by older clients.\n\nFor a consistent experience, upgrade all clients to use the latest hadoop version.\n",
          "commitDate": "19/05/19 2:29 PM",
          "commitName": "a36274d69947648dbe82721220cc5240ec5d396d",
          "commitAuthor": "Ben Roling",
          "commitDateOld": "30/04/19 3:53 AM",
          "commitNameOld": "0af4011580878566213016af0c32633eabd15100",
          "commitAuthorOld": "Ben Roling",
          "daysBetweenCommits": 19.44,
          "commitsBetweenForRepo": 90,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,7 +1,14 @@\n-  LocatedFileStatus toLocatedFileStatus(FileStatus status)\n-      throws IOException {\n-    return new LocatedFileStatus(status,\n-        status.isFile() ?\n-          getFileBlockLocations(status, 0, status.getLen())\n-          : null);\n+  private static RemoteIterator\u003cLocatedFileStatus\u003e toLocatedFileStatusIterator(\n+      RemoteIterator\u003c? extends LocatedFileStatus\u003e iterator) {\n+    return new RemoteIterator\u003cLocatedFileStatus\u003e() {\n+      @Override\n+      public boolean hasNext() throws IOException {\n+        return iterator.hasNext();\n+      }\n+\n+      @Override\n+      public LocatedFileStatus next() throws IOException {\n+        return iterator.next();\n+      }\n+    };\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static RemoteIterator\u003cLocatedFileStatus\u003e toLocatedFileStatusIterator(\n      RemoteIterator\u003c? extends LocatedFileStatus\u003e iterator) {\n    return new RemoteIterator\u003cLocatedFileStatus\u003e() {\n      @Override\n      public boolean hasNext() throws IOException {\n        return iterator.hasNext();\n      }\n\n      @Override\n      public LocatedFileStatus next() throws IOException {\n        return iterator.next();\n      }\n    };\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
          "extendedDetails": {
            "oldValue": "[status-FileStatus]",
            "newValue": "[iterator-RemoteIterator\u003c? extends LocatedFileStatus\u003e]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HADOOP-16085. S3Guard: use object version or etags to protect against inconsistent read after replace/overwrite.\n\nContributed by Ben Roling.\n\nS3Guard will now track the etag of uploaded files and, if an S3\nbucket is versioned, the object version.\n\nYou can then control how to react to a mismatch between the data\nin the DynamoDB table and that in the store: warn, fail, or, when\nusing versions, return the original value.\n\nThis adds two new columns to the table: etag and version.\nThis is transparent to older S3A clients -but when such clients\nadd/update data to the S3Guard table, they will not add these values.\nAs a result, the etag/version checks will not work with files uploaded by older clients.\n\nFor a consistent experience, upgrade all clients to use the latest hadoop version.\n",
          "commitDate": "19/05/19 2:29 PM",
          "commitName": "a36274d69947648dbe82721220cc5240ec5d396d",
          "commitAuthor": "Ben Roling",
          "commitDateOld": "30/04/19 3:53 AM",
          "commitNameOld": "0af4011580878566213016af0c32633eabd15100",
          "commitAuthorOld": "Ben Roling",
          "daysBetweenCommits": 19.44,
          "commitsBetweenForRepo": 90,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,7 +1,14 @@\n-  LocatedFileStatus toLocatedFileStatus(FileStatus status)\n-      throws IOException {\n-    return new LocatedFileStatus(status,\n-        status.isFile() ?\n-          getFileBlockLocations(status, 0, status.getLen())\n-          : null);\n+  private static RemoteIterator\u003cLocatedFileStatus\u003e toLocatedFileStatusIterator(\n+      RemoteIterator\u003c? extends LocatedFileStatus\u003e iterator) {\n+    return new RemoteIterator\u003cLocatedFileStatus\u003e() {\n+      @Override\n+      public boolean hasNext() throws IOException {\n+        return iterator.hasNext();\n+      }\n+\n+      @Override\n+      public LocatedFileStatus next() throws IOException {\n+        return iterator.next();\n+      }\n+    };\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static RemoteIterator\u003cLocatedFileStatus\u003e toLocatedFileStatusIterator(\n      RemoteIterator\u003c? extends LocatedFileStatus\u003e iterator) {\n    return new RemoteIterator\u003cLocatedFileStatus\u003e() {\n      @Override\n      public boolean hasNext() throws IOException {\n        return iterator.hasNext();\n      }\n\n      @Override\n      public LocatedFileStatus next() throws IOException {\n        return iterator.next();\n      }\n    };\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
          "extendedDetails": {
            "oldValue": "LocatedFileStatus",
            "newValue": "RemoteIterator\u003cLocatedFileStatus\u003e"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-16085. S3Guard: use object version or etags to protect against inconsistent read after replace/overwrite.\n\nContributed by Ben Roling.\n\nS3Guard will now track the etag of uploaded files and, if an S3\nbucket is versioned, the object version.\n\nYou can then control how to react to a mismatch between the data\nin the DynamoDB table and that in the store: warn, fail, or, when\nusing versions, return the original value.\n\nThis adds two new columns to the table: etag and version.\nThis is transparent to older S3A clients -but when such clients\nadd/update data to the S3Guard table, they will not add these values.\nAs a result, the etag/version checks will not work with files uploaded by older clients.\n\nFor a consistent experience, upgrade all clients to use the latest hadoop version.\n",
          "commitDate": "19/05/19 2:29 PM",
          "commitName": "a36274d69947648dbe82721220cc5240ec5d396d",
          "commitAuthor": "Ben Roling",
          "commitDateOld": "30/04/19 3:53 AM",
          "commitNameOld": "0af4011580878566213016af0c32633eabd15100",
          "commitAuthorOld": "Ben Roling",
          "daysBetweenCommits": 19.44,
          "commitsBetweenForRepo": 90,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,7 +1,14 @@\n-  LocatedFileStatus toLocatedFileStatus(FileStatus status)\n-      throws IOException {\n-    return new LocatedFileStatus(status,\n-        status.isFile() ?\n-          getFileBlockLocations(status, 0, status.getLen())\n-          : null);\n+  private static RemoteIterator\u003cLocatedFileStatus\u003e toLocatedFileStatusIterator(\n+      RemoteIterator\u003c? extends LocatedFileStatus\u003e iterator) {\n+    return new RemoteIterator\u003cLocatedFileStatus\u003e() {\n+      @Override\n+      public boolean hasNext() throws IOException {\n+        return iterator.hasNext();\n+      }\n+\n+      @Override\n+      public LocatedFileStatus next() throws IOException {\n+        return iterator.next();\n+      }\n+    };\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static RemoteIterator\u003cLocatedFileStatus\u003e toLocatedFileStatusIterator(\n      RemoteIterator\u003c? extends LocatedFileStatus\u003e iterator) {\n    return new RemoteIterator\u003cLocatedFileStatus\u003e() {\n      @Override\n      public boolean hasNext() throws IOException {\n        return iterator.hasNext();\n      }\n\n      @Override\n      public LocatedFileStatus next() throws IOException {\n        return iterator.next();\n      }\n    };\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[private, static]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "HADOOP-16085. S3Guard: use object version or etags to protect against inconsistent read after replace/overwrite.\n\nContributed by Ben Roling.\n\nS3Guard will now track the etag of uploaded files and, if an S3\nbucket is versioned, the object version.\n\nYou can then control how to react to a mismatch between the data\nin the DynamoDB table and that in the store: warn, fail, or, when\nusing versions, return the original value.\n\nThis adds two new columns to the table: etag and version.\nThis is transparent to older S3A clients -but when such clients\nadd/update data to the S3Guard table, they will not add these values.\nAs a result, the etag/version checks will not work with files uploaded by older clients.\n\nFor a consistent experience, upgrade all clients to use the latest hadoop version.\n",
          "commitDate": "19/05/19 2:29 PM",
          "commitName": "a36274d69947648dbe82721220cc5240ec5d396d",
          "commitAuthor": "Ben Roling",
          "commitDateOld": "30/04/19 3:53 AM",
          "commitNameOld": "0af4011580878566213016af0c32633eabd15100",
          "commitAuthorOld": "Ben Roling",
          "daysBetweenCommits": 19.44,
          "commitsBetweenForRepo": 90,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,7 +1,14 @@\n-  LocatedFileStatus toLocatedFileStatus(FileStatus status)\n-      throws IOException {\n-    return new LocatedFileStatus(status,\n-        status.isFile() ?\n-          getFileBlockLocations(status, 0, status.getLen())\n-          : null);\n+  private static RemoteIterator\u003cLocatedFileStatus\u003e toLocatedFileStatusIterator(\n+      RemoteIterator\u003c? extends LocatedFileStatus\u003e iterator) {\n+    return new RemoteIterator\u003cLocatedFileStatus\u003e() {\n+      @Override\n+      public boolean hasNext() throws IOException {\n+        return iterator.hasNext();\n+      }\n+\n+      @Override\n+      public LocatedFileStatus next() throws IOException {\n+        return iterator.next();\n+      }\n+    };\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static RemoteIterator\u003cLocatedFileStatus\u003e toLocatedFileStatusIterator(\n      RemoteIterator\u003c? extends LocatedFileStatus\u003e iterator) {\n    return new RemoteIterator\u003cLocatedFileStatus\u003e() {\n      @Override\n      public boolean hasNext() throws IOException {\n        return iterator.hasNext();\n      }\n\n      @Override\n      public LocatedFileStatus next() throws IOException {\n        return iterator.next();\n      }\n    };\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
          "extendedDetails": {
            "oldValue": "[IOException]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-16085. S3Guard: use object version or etags to protect against inconsistent read after replace/overwrite.\n\nContributed by Ben Roling.\n\nS3Guard will now track the etag of uploaded files and, if an S3\nbucket is versioned, the object version.\n\nYou can then control how to react to a mismatch between the data\nin the DynamoDB table and that in the store: warn, fail, or, when\nusing versions, return the original value.\n\nThis adds two new columns to the table: etag and version.\nThis is transparent to older S3A clients -but when such clients\nadd/update data to the S3Guard table, they will not add these values.\nAs a result, the etag/version checks will not work with files uploaded by older clients.\n\nFor a consistent experience, upgrade all clients to use the latest hadoop version.\n",
          "commitDate": "19/05/19 2:29 PM",
          "commitName": "a36274d69947648dbe82721220cc5240ec5d396d",
          "commitAuthor": "Ben Roling",
          "commitDateOld": "30/04/19 3:53 AM",
          "commitNameOld": "0af4011580878566213016af0c32633eabd15100",
          "commitAuthorOld": "Ben Roling",
          "daysBetweenCommits": 19.44,
          "commitsBetweenForRepo": 90,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,7 +1,14 @@\n-  LocatedFileStatus toLocatedFileStatus(FileStatus status)\n-      throws IOException {\n-    return new LocatedFileStatus(status,\n-        status.isFile() ?\n-          getFileBlockLocations(status, 0, status.getLen())\n-          : null);\n+  private static RemoteIterator\u003cLocatedFileStatus\u003e toLocatedFileStatusIterator(\n+      RemoteIterator\u003c? extends LocatedFileStatus\u003e iterator) {\n+    return new RemoteIterator\u003cLocatedFileStatus\u003e() {\n+      @Override\n+      public boolean hasNext() throws IOException {\n+        return iterator.hasNext();\n+      }\n+\n+      @Override\n+      public LocatedFileStatus next() throws IOException {\n+        return iterator.next();\n+      }\n+    };\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static RemoteIterator\u003cLocatedFileStatus\u003e toLocatedFileStatusIterator(\n      RemoteIterator\u003c? extends LocatedFileStatus\u003e iterator) {\n    return new RemoteIterator\u003cLocatedFileStatus\u003e() {\n      @Override\n      public boolean hasNext() throws IOException {\n        return iterator.hasNext();\n      }\n\n      @Override\n      public LocatedFileStatus next() throws IOException {\n        return iterator.next();\n      }\n    };\n  }",
          "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "822d661b8fcc42bec6eea958d9fd02ef1aaa4b6c": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-13208. S3A listFiles(recursive\u003dtrue) to do a bulk listObjects instead of walking the pseudo-tree of directories. Contributed by Steve Loughran.\n",
      "commitDate": "17/08/16 2:54 PM",
      "commitName": "822d661b8fcc42bec6eea958d9fd02ef1aaa4b6c",
      "commitAuthor": "Chris Nauroth",
      "diff": "@@ -0,0 +1,7 @@\n+  LocatedFileStatus toLocatedFileStatus(FileStatus status)\n+      throws IOException {\n+    return new LocatedFileStatus(status,\n+        status.isFile() ?\n+          getFileBlockLocations(status, 0, status.getLen())\n+          : null);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  LocatedFileStatus toLocatedFileStatus(FileStatus status)\n      throws IOException {\n    return new LocatedFileStatus(status,\n        status.isFile() ?\n          getFileBlockLocations(status, 0, status.getLen())\n          : null);\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AFileSystem.java"
    }
  }
}