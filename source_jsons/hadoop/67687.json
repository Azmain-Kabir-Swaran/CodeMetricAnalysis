{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CopyMapper.java",
  "functionName": "checkUpdate",
  "functionId": "checkUpdate___sourceFS-FileSystem__source-CopyListingFileStatus__target-Path__targetFileStatus-FileStatus",
  "sourceFilePath": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/mapred/CopyMapper.java",
  "functionStartLine": 326,
  "functionEndLine": 347,
  "numCommitsSeen": 52,
  "timeTaken": 3785,
  "changeHistory": [
    "a1a0281e12ea96476e75b076f76d5b5eb5254eea",
    "c69a649257a331da55c1a1bf61c819e289015a6b",
    "3671a5e16fbddbe5a0516289ce98e1305e02291c"
  ],
  "changeHistoryShort": {
    "a1a0281e12ea96476e75b076f76d5b5eb5254eea": "Yparameterchange",
    "c69a649257a331da55c1a1bf61c819e289015a6b": "Ymultichange(Yparameterchange,Ybodychange)",
    "3671a5e16fbddbe5a0516289ce98e1305e02291c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a1a0281e12ea96476e75b076f76d5b5eb5254eea": {
      "type": "Yparameterchange",
      "commitMessage": "HADOOP-13626. Remove distcp dependency on FileStatus serialization\n",
      "commitDate": "24/10/16 12:46 PM",
      "commitName": "a1a0281e12ea96476e75b076f76d5b5eb5254eea",
      "commitAuthor": "Chris Douglas",
      "commitDateOld": "17/05/16 5:00 AM",
      "commitNameOld": "c69a649257a331da55c1a1bf61c819e289015a6b",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 160.32,
      "commitsBetweenForRepo": 1196,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,22 @@\n-  private FileAction checkUpdate(FileSystem sourceFS, FileStatus source,\n-      Path target, FileStatus targetFileStatus) throws IOException {\n+  private FileAction checkUpdate(FileSystem sourceFS,\n+      CopyListingFileStatus source, Path target, FileStatus targetFileStatus)\n+      throws IOException {\n     if (targetFileStatus !\u003d null \u0026\u0026 !overWrite) {\n       if (canSkip(sourceFS, source, targetFileStatus)) {\n         return FileAction.SKIP;\n       } else if (append) {\n         long targetLen \u003d targetFileStatus.getLen();\n         if (targetLen \u003c source.getLen()) {\n           FileChecksum sourceChecksum \u003d sourceFS.getFileChecksum(\n               source.getPath(), targetLen);\n           if (sourceChecksum !\u003d null\n               \u0026\u0026 sourceChecksum.equals(targetFS.getFileChecksum(target))) {\n             // We require that the checksum is not null. Thus currently only\n             // DistributedFileSystem is supported\n             return FileAction.APPEND;\n           }\n         }\n       }\n     }\n     return FileAction.OVERWRITE;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private FileAction checkUpdate(FileSystem sourceFS,\n      CopyListingFileStatus source, Path target, FileStatus targetFileStatus)\n      throws IOException {\n    if (targetFileStatus !\u003d null \u0026\u0026 !overWrite) {\n      if (canSkip(sourceFS, source, targetFileStatus)) {\n        return FileAction.SKIP;\n      } else if (append) {\n        long targetLen \u003d targetFileStatus.getLen();\n        if (targetLen \u003c source.getLen()) {\n          FileChecksum sourceChecksum \u003d sourceFS.getFileChecksum(\n              source.getPath(), targetLen);\n          if (sourceChecksum !\u003d null\n              \u0026\u0026 sourceChecksum.equals(targetFS.getFileChecksum(target))) {\n            // We require that the checksum is not null. Thus currently only\n            // DistributedFileSystem is supported\n            return FileAction.APPEND;\n          }\n        }\n      }\n    }\n    return FileAction.OVERWRITE;\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/mapred/CopyMapper.java",
      "extendedDetails": {
        "oldValue": "[sourceFS-FileSystem, source-FileStatus, target-Path, targetFileStatus-FileStatus]",
        "newValue": "[sourceFS-FileSystem, source-CopyListingFileStatus, target-Path, targetFileStatus-FileStatus]"
      }
    },
    "c69a649257a331da55c1a1bf61c819e289015a6b": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-13163 Reuse pre-computed filestatus in Distcp-CopyMapper (Rajesh Balamohan via stevel)\n",
      "commitDate": "17/05/16 5:00 AM",
      "commitName": "c69a649257a331da55c1a1bf61c819e289015a6b",
      "commitAuthor": "Steve Loughran",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-13163 Reuse pre-computed filestatus in Distcp-CopyMapper (Rajesh Balamohan via stevel)\n",
          "commitDate": "17/05/16 5:00 AM",
          "commitName": "c69a649257a331da55c1a1bf61c819e289015a6b",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "04/05/16 10:23 AM",
          "commitNameOld": "af942585a108d70e0946f6dd4c465a54d068eabf",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 12.78,
          "commitsBetweenForRepo": 85,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,21 @@\n   private FileAction checkUpdate(FileSystem sourceFS, FileStatus source,\n-      Path target) throws IOException {\n-    final FileStatus targetFileStatus;\n-    try {\n-      targetFileStatus \u003d targetFS.getFileStatus(target);\n-    } catch (FileNotFoundException e) {\n-      return FileAction.OVERWRITE;\n-    }\n+      Path target, FileStatus targetFileStatus) throws IOException {\n     if (targetFileStatus !\u003d null \u0026\u0026 !overWrite) {\n       if (canSkip(sourceFS, source, targetFileStatus)) {\n         return FileAction.SKIP;\n       } else if (append) {\n         long targetLen \u003d targetFileStatus.getLen();\n         if (targetLen \u003c source.getLen()) {\n           FileChecksum sourceChecksum \u003d sourceFS.getFileChecksum(\n               source.getPath(), targetLen);\n           if (sourceChecksum !\u003d null\n               \u0026\u0026 sourceChecksum.equals(targetFS.getFileChecksum(target))) {\n             // We require that the checksum is not null. Thus currently only\n             // DistributedFileSystem is supported\n             return FileAction.APPEND;\n           }\n         }\n       }\n     }\n     return FileAction.OVERWRITE;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private FileAction checkUpdate(FileSystem sourceFS, FileStatus source,\n      Path target, FileStatus targetFileStatus) throws IOException {\n    if (targetFileStatus !\u003d null \u0026\u0026 !overWrite) {\n      if (canSkip(sourceFS, source, targetFileStatus)) {\n        return FileAction.SKIP;\n      } else if (append) {\n        long targetLen \u003d targetFileStatus.getLen();\n        if (targetLen \u003c source.getLen()) {\n          FileChecksum sourceChecksum \u003d sourceFS.getFileChecksum(\n              source.getPath(), targetLen);\n          if (sourceChecksum !\u003d null\n              \u0026\u0026 sourceChecksum.equals(targetFS.getFileChecksum(target))) {\n            // We require that the checksum is not null. Thus currently only\n            // DistributedFileSystem is supported\n            return FileAction.APPEND;\n          }\n        }\n      }\n    }\n    return FileAction.OVERWRITE;\n  }",
          "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/mapred/CopyMapper.java",
          "extendedDetails": {
            "oldValue": "[sourceFS-FileSystem, source-FileStatus, target-Path]",
            "newValue": "[sourceFS-FileSystem, source-FileStatus, target-Path, targetFileStatus-FileStatus]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-13163 Reuse pre-computed filestatus in Distcp-CopyMapper (Rajesh Balamohan via stevel)\n",
          "commitDate": "17/05/16 5:00 AM",
          "commitName": "c69a649257a331da55c1a1bf61c819e289015a6b",
          "commitAuthor": "Steve Loughran",
          "commitDateOld": "04/05/16 10:23 AM",
          "commitNameOld": "af942585a108d70e0946f6dd4c465a54d068eabf",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 12.78,
          "commitsBetweenForRepo": 85,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,21 @@\n   private FileAction checkUpdate(FileSystem sourceFS, FileStatus source,\n-      Path target) throws IOException {\n-    final FileStatus targetFileStatus;\n-    try {\n-      targetFileStatus \u003d targetFS.getFileStatus(target);\n-    } catch (FileNotFoundException e) {\n-      return FileAction.OVERWRITE;\n-    }\n+      Path target, FileStatus targetFileStatus) throws IOException {\n     if (targetFileStatus !\u003d null \u0026\u0026 !overWrite) {\n       if (canSkip(sourceFS, source, targetFileStatus)) {\n         return FileAction.SKIP;\n       } else if (append) {\n         long targetLen \u003d targetFileStatus.getLen();\n         if (targetLen \u003c source.getLen()) {\n           FileChecksum sourceChecksum \u003d sourceFS.getFileChecksum(\n               source.getPath(), targetLen);\n           if (sourceChecksum !\u003d null\n               \u0026\u0026 sourceChecksum.equals(targetFS.getFileChecksum(target))) {\n             // We require that the checksum is not null. Thus currently only\n             // DistributedFileSystem is supported\n             return FileAction.APPEND;\n           }\n         }\n       }\n     }\n     return FileAction.OVERWRITE;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private FileAction checkUpdate(FileSystem sourceFS, FileStatus source,\n      Path target, FileStatus targetFileStatus) throws IOException {\n    if (targetFileStatus !\u003d null \u0026\u0026 !overWrite) {\n      if (canSkip(sourceFS, source, targetFileStatus)) {\n        return FileAction.SKIP;\n      } else if (append) {\n        long targetLen \u003d targetFileStatus.getLen();\n        if (targetLen \u003c source.getLen()) {\n          FileChecksum sourceChecksum \u003d sourceFS.getFileChecksum(\n              source.getPath(), targetLen);\n          if (sourceChecksum !\u003d null\n              \u0026\u0026 sourceChecksum.equals(targetFS.getFileChecksum(target))) {\n            // We require that the checksum is not null. Thus currently only\n            // DistributedFileSystem is supported\n            return FileAction.APPEND;\n          }\n        }\n      }\n    }\n    return FileAction.OVERWRITE;\n  }",
          "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/mapred/CopyMapper.java",
          "extendedDetails": {}
        }
      ]
    },
    "3671a5e16fbddbe5a0516289ce98e1305e02291c": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-5899. Support incremental data copy in DistCp. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1596931 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/05/14 11:17 AM",
      "commitName": "3671a5e16fbddbe5a0516289ce98e1305e02291c",
      "commitAuthor": "Jing Zhao",
      "diff": "@@ -0,0 +1,27 @@\n+  private FileAction checkUpdate(FileSystem sourceFS, FileStatus source,\n+      Path target) throws IOException {\n+    final FileStatus targetFileStatus;\n+    try {\n+      targetFileStatus \u003d targetFS.getFileStatus(target);\n+    } catch (FileNotFoundException e) {\n+      return FileAction.OVERWRITE;\n+    }\n+    if (targetFileStatus !\u003d null \u0026\u0026 !overWrite) {\n+      if (canSkip(sourceFS, source, targetFileStatus)) {\n+        return FileAction.SKIP;\n+      } else if (append) {\n+        long targetLen \u003d targetFileStatus.getLen();\n+        if (targetLen \u003c source.getLen()) {\n+          FileChecksum sourceChecksum \u003d sourceFS.getFileChecksum(\n+              source.getPath(), targetLen);\n+          if (sourceChecksum !\u003d null\n+              \u0026\u0026 sourceChecksum.equals(targetFS.getFileChecksum(target))) {\n+            // We require that the checksum is not null. Thus currently only\n+            // DistributedFileSystem is supported\n+            return FileAction.APPEND;\n+          }\n+        }\n+      }\n+    }\n+    return FileAction.OVERWRITE;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private FileAction checkUpdate(FileSystem sourceFS, FileStatus source,\n      Path target) throws IOException {\n    final FileStatus targetFileStatus;\n    try {\n      targetFileStatus \u003d targetFS.getFileStatus(target);\n    } catch (FileNotFoundException e) {\n      return FileAction.OVERWRITE;\n    }\n    if (targetFileStatus !\u003d null \u0026\u0026 !overWrite) {\n      if (canSkip(sourceFS, source, targetFileStatus)) {\n        return FileAction.SKIP;\n      } else if (append) {\n        long targetLen \u003d targetFileStatus.getLen();\n        if (targetLen \u003c source.getLen()) {\n          FileChecksum sourceChecksum \u003d sourceFS.getFileChecksum(\n              source.getPath(), targetLen);\n          if (sourceChecksum !\u003d null\n              \u0026\u0026 sourceChecksum.equals(targetFS.getFileChecksum(target))) {\n            // We require that the checksum is not null. Thus currently only\n            // DistributedFileSystem is supported\n            return FileAction.APPEND;\n          }\n        }\n      }\n    }\n    return FileAction.OVERWRITE;\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/mapred/CopyMapper.java"
    }
  }
}