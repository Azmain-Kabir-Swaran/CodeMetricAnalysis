{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSDirXAttrOp.java",
  "functionName": "filterINodeXAttrs",
  "functionId": "filterINodeXAttrs___existingXAttrs-List__XAttr__(modifiers-final)__toFilter-List__XAttr__(modifiers-final)__filtered-List__XAttr__(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirXAttrOp.java",
  "functionStartLine": 229,
  "functionEndLine": 266,
  "numCommitsSeen": 402,
  "timeTaken": 7296,
  "changeHistory": [
    "6c5bbd7a42d1e8b4416fd8870fd60c67867b35c9",
    "ea4e2e843ecadd8019ea35413f4a34b97a424923",
    "c38665282884122d3c82b6f68376cce036aee748",
    "d417e49ce4db119cdeb01be526cdb07f24baf388",
    "ac23a55547716df29b3e25c98a113399e184d9d1"
  ],
  "changeHistoryShort": {
    "6c5bbd7a42d1e8b4416fd8870fd60c67867b35c9": "Ymultichange(Ymovefromfile,Ymodifierchange)",
    "ea4e2e843ecadd8019ea35413f4a34b97a424923": "Ymultichange(Yexceptionschange,Ybodychange)",
    "c38665282884122d3c82b6f68376cce036aee748": "Ybodychange",
    "d417e49ce4db119cdeb01be526cdb07f24baf388": "Ymultichange(Yrename,Yparameterchange,Yexceptionschange,Ybodychange,Yparametermetachange)",
    "ac23a55547716df29b3e25c98a113399e184d9d1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6c5bbd7a42d1e8b4416fd8870fd60c67867b35c9": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange)",
      "commitMessage": "HDFS-7486. Consolidate XAttr-related implementation into a single class. Contributed by Haohui Mai.\n",
      "commitDate": "08/12/14 11:52 AM",
      "commitName": "6c5bbd7a42d1e8b4416fd8870fd60c67867b35c9",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-7486. Consolidate XAttr-related implementation into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "08/12/14 11:52 AM",
          "commitName": "6c5bbd7a42d1e8b4416fd8870fd60c67867b35c9",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "08/12/14 11:08 AM",
          "commitNameOld": "57cb43be50c81daad8da34d33a45f396d9c1c35b",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,38 @@\n-  List\u003cXAttr\u003e filterINodeXAttrs(final List\u003cXAttr\u003e existingXAttrs,\n-      final List\u003cXAttr\u003e toFilter, final List\u003cXAttr\u003e filtered)\n+  static List\u003cXAttr\u003e filterINodeXAttrs(\n+      final List\u003cXAttr\u003e existingXAttrs, final List\u003cXAttr\u003e toFilter,\n+      final List\u003cXAttr\u003e filtered)\n     throws AccessControlException {\n     if (existingXAttrs \u003d\u003d null || existingXAttrs.isEmpty() ||\n         toFilter \u003d\u003d null || toFilter.isEmpty()) {\n       return existingXAttrs;\n     }\n \n     // Populate a new list with XAttrs that pass the filter\n     List\u003cXAttr\u003e newXAttrs \u003d\n         Lists.newArrayListWithCapacity(existingXAttrs.size());\n     for (XAttr a : existingXAttrs) {\n       boolean add \u003d true;\n       for (ListIterator\u003cXAttr\u003e it \u003d toFilter.listIterator(); it.hasNext()\n           ;) {\n         XAttr filter \u003d it.next();\n-        Preconditions.checkArgument(!KEYID_XATTR.equalsIgnoreValue(filter),\n+        Preconditions.checkArgument(\n+            !KEYID_XATTR.equalsIgnoreValue(filter),\n             \"The encryption zone xattr should never be deleted.\");\n         if (UNREADABLE_BY_SUPERUSER_XATTR.equalsIgnoreValue(filter)) {\n           throw new AccessControlException(\"The xattr \u0027\" +\n               SECURITY_XATTR_UNREADABLE_BY_SUPERUSER + \"\u0027 can not be deleted.\");\n         }\n         if (a.equalsIgnoreValue(filter)) {\n           add \u003d false;\n           it.remove();\n           filtered.add(filter);\n           break;\n         }\n       }\n       if (add) {\n         newXAttrs.add(a);\n       }\n     }\n \n     return newXAttrs;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static List\u003cXAttr\u003e filterINodeXAttrs(\n      final List\u003cXAttr\u003e existingXAttrs, final List\u003cXAttr\u003e toFilter,\n      final List\u003cXAttr\u003e filtered)\n    throws AccessControlException {\n    if (existingXAttrs \u003d\u003d null || existingXAttrs.isEmpty() ||\n        toFilter \u003d\u003d null || toFilter.isEmpty()) {\n      return existingXAttrs;\n    }\n\n    // Populate a new list with XAttrs that pass the filter\n    List\u003cXAttr\u003e newXAttrs \u003d\n        Lists.newArrayListWithCapacity(existingXAttrs.size());\n    for (XAttr a : existingXAttrs) {\n      boolean add \u003d true;\n      for (ListIterator\u003cXAttr\u003e it \u003d toFilter.listIterator(); it.hasNext()\n          ;) {\n        XAttr filter \u003d it.next();\n        Preconditions.checkArgument(\n            !KEYID_XATTR.equalsIgnoreValue(filter),\n            \"The encryption zone xattr should never be deleted.\");\n        if (UNREADABLE_BY_SUPERUSER_XATTR.equalsIgnoreValue(filter)) {\n          throw new AccessControlException(\"The xattr \u0027\" +\n              SECURITY_XATTR_UNREADABLE_BY_SUPERUSER + \"\u0027 can not be deleted.\");\n        }\n        if (a.equalsIgnoreValue(filter)) {\n          add \u003d false;\n          it.remove();\n          filtered.add(filter);\n          break;\n        }\n      }\n      if (add) {\n        newXAttrs.add(a);\n      }\n    }\n\n    return newXAttrs;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirXAttrOp.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirXAttrOp.java",
            "oldMethodName": "filterINodeXAttrs",
            "newMethodName": "filterINodeXAttrs"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-7486. Consolidate XAttr-related implementation into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "08/12/14 11:52 AM",
          "commitName": "6c5bbd7a42d1e8b4416fd8870fd60c67867b35c9",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "08/12/14 11:08 AM",
          "commitNameOld": "57cb43be50c81daad8da34d33a45f396d9c1c35b",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,38 @@\n-  List\u003cXAttr\u003e filterINodeXAttrs(final List\u003cXAttr\u003e existingXAttrs,\n-      final List\u003cXAttr\u003e toFilter, final List\u003cXAttr\u003e filtered)\n+  static List\u003cXAttr\u003e filterINodeXAttrs(\n+      final List\u003cXAttr\u003e existingXAttrs, final List\u003cXAttr\u003e toFilter,\n+      final List\u003cXAttr\u003e filtered)\n     throws AccessControlException {\n     if (existingXAttrs \u003d\u003d null || existingXAttrs.isEmpty() ||\n         toFilter \u003d\u003d null || toFilter.isEmpty()) {\n       return existingXAttrs;\n     }\n \n     // Populate a new list with XAttrs that pass the filter\n     List\u003cXAttr\u003e newXAttrs \u003d\n         Lists.newArrayListWithCapacity(existingXAttrs.size());\n     for (XAttr a : existingXAttrs) {\n       boolean add \u003d true;\n       for (ListIterator\u003cXAttr\u003e it \u003d toFilter.listIterator(); it.hasNext()\n           ;) {\n         XAttr filter \u003d it.next();\n-        Preconditions.checkArgument(!KEYID_XATTR.equalsIgnoreValue(filter),\n+        Preconditions.checkArgument(\n+            !KEYID_XATTR.equalsIgnoreValue(filter),\n             \"The encryption zone xattr should never be deleted.\");\n         if (UNREADABLE_BY_SUPERUSER_XATTR.equalsIgnoreValue(filter)) {\n           throw new AccessControlException(\"The xattr \u0027\" +\n               SECURITY_XATTR_UNREADABLE_BY_SUPERUSER + \"\u0027 can not be deleted.\");\n         }\n         if (a.equalsIgnoreValue(filter)) {\n           add \u003d false;\n           it.remove();\n           filtered.add(filter);\n           break;\n         }\n       }\n       if (add) {\n         newXAttrs.add(a);\n       }\n     }\n \n     return newXAttrs;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static List\u003cXAttr\u003e filterINodeXAttrs(\n      final List\u003cXAttr\u003e existingXAttrs, final List\u003cXAttr\u003e toFilter,\n      final List\u003cXAttr\u003e filtered)\n    throws AccessControlException {\n    if (existingXAttrs \u003d\u003d null || existingXAttrs.isEmpty() ||\n        toFilter \u003d\u003d null || toFilter.isEmpty()) {\n      return existingXAttrs;\n    }\n\n    // Populate a new list with XAttrs that pass the filter\n    List\u003cXAttr\u003e newXAttrs \u003d\n        Lists.newArrayListWithCapacity(existingXAttrs.size());\n    for (XAttr a : existingXAttrs) {\n      boolean add \u003d true;\n      for (ListIterator\u003cXAttr\u003e it \u003d toFilter.listIterator(); it.hasNext()\n          ;) {\n        XAttr filter \u003d it.next();\n        Preconditions.checkArgument(\n            !KEYID_XATTR.equalsIgnoreValue(filter),\n            \"The encryption zone xattr should never be deleted.\");\n        if (UNREADABLE_BY_SUPERUSER_XATTR.equalsIgnoreValue(filter)) {\n          throw new AccessControlException(\"The xattr \u0027\" +\n              SECURITY_XATTR_UNREADABLE_BY_SUPERUSER + \"\u0027 can not be deleted.\");\n        }\n        if (a.equalsIgnoreValue(filter)) {\n          add \u003d false;\n          it.remove();\n          filtered.add(filter);\n          break;\n        }\n      }\n      if (add) {\n        newXAttrs.add(a);\n      }\n    }\n\n    return newXAttrs;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirXAttrOp.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[static]"
          }
        }
      ]
    },
    "ea4e2e843ecadd8019ea35413f4a34b97a424923": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "HDFS-6705. Create an XAttr that disallows the HDFS admin from accessing a file. (clamb via wang)\n",
      "commitDate": "17/09/14 11:23 AM",
      "commitName": "ea4e2e843ecadd8019ea35413f4a34b97a424923",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-6705. Create an XAttr that disallows the HDFS admin from accessing a file. (clamb via wang)\n",
          "commitDate": "17/09/14 11:23 AM",
          "commitName": "ea4e2e843ecadd8019ea35413f4a34b97a424923",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "16/09/14 4:41 PM",
          "commitNameOld": "33ce887c20ec806ace02063e42599c3db76b536a",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 0.78,
          "commitsBetweenForRepo": 13,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,36 @@\n   List\u003cXAttr\u003e filterINodeXAttrs(final List\u003cXAttr\u003e existingXAttrs,\n-      final List\u003cXAttr\u003e toFilter, final List\u003cXAttr\u003e filtered) {\n+      final List\u003cXAttr\u003e toFilter, final List\u003cXAttr\u003e filtered)\n+    throws AccessControlException {\n     if (existingXAttrs \u003d\u003d null || existingXAttrs.isEmpty() ||\n         toFilter \u003d\u003d null || toFilter.isEmpty()) {\n       return existingXAttrs;\n     }\n \n     // Populate a new list with XAttrs that pass the filter\n     List\u003cXAttr\u003e newXAttrs \u003d\n         Lists.newArrayListWithCapacity(existingXAttrs.size());\n     for (XAttr a : existingXAttrs) {\n       boolean add \u003d true;\n       for (ListIterator\u003cXAttr\u003e it \u003d toFilter.listIterator(); it.hasNext()\n           ;) {\n         XAttr filter \u003d it.next();\n         Preconditions.checkArgument(!KEYID_XATTR.equalsIgnoreValue(filter),\n             \"The encryption zone xattr should never be deleted.\");\n+        if (UNREADABLE_BY_SUPERUSER_XATTR.equalsIgnoreValue(filter)) {\n+          throw new AccessControlException(\"The xattr \u0027\" +\n+              SECURITY_XATTR_UNREADABLE_BY_SUPERUSER + \"\u0027 can not be deleted.\");\n+        }\n         if (a.equalsIgnoreValue(filter)) {\n           add \u003d false;\n           it.remove();\n           filtered.add(filter);\n           break;\n         }\n       }\n       if (add) {\n         newXAttrs.add(a);\n       }\n     }\n \n     return newXAttrs;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  List\u003cXAttr\u003e filterINodeXAttrs(final List\u003cXAttr\u003e existingXAttrs,\n      final List\u003cXAttr\u003e toFilter, final List\u003cXAttr\u003e filtered)\n    throws AccessControlException {\n    if (existingXAttrs \u003d\u003d null || existingXAttrs.isEmpty() ||\n        toFilter \u003d\u003d null || toFilter.isEmpty()) {\n      return existingXAttrs;\n    }\n\n    // Populate a new list with XAttrs that pass the filter\n    List\u003cXAttr\u003e newXAttrs \u003d\n        Lists.newArrayListWithCapacity(existingXAttrs.size());\n    for (XAttr a : existingXAttrs) {\n      boolean add \u003d true;\n      for (ListIterator\u003cXAttr\u003e it \u003d toFilter.listIterator(); it.hasNext()\n          ;) {\n        XAttr filter \u003d it.next();\n        Preconditions.checkArgument(!KEYID_XATTR.equalsIgnoreValue(filter),\n            \"The encryption zone xattr should never be deleted.\");\n        if (UNREADABLE_BY_SUPERUSER_XATTR.equalsIgnoreValue(filter)) {\n          throw new AccessControlException(\"The xattr \u0027\" +\n              SECURITY_XATTR_UNREADABLE_BY_SUPERUSER + \"\u0027 can not be deleted.\");\n        }\n        if (a.equalsIgnoreValue(filter)) {\n          add \u003d false;\n          it.remove();\n          filtered.add(filter);\n          break;\n        }\n      }\n      if (add) {\n        newXAttrs.add(a);\n      }\n    }\n\n    return newXAttrs;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[AccessControlException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6705. Create an XAttr that disallows the HDFS admin from accessing a file. (clamb via wang)\n",
          "commitDate": "17/09/14 11:23 AM",
          "commitName": "ea4e2e843ecadd8019ea35413f4a34b97a424923",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "16/09/14 4:41 PM",
          "commitNameOld": "33ce887c20ec806ace02063e42599c3db76b536a",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 0.78,
          "commitsBetweenForRepo": 13,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,36 @@\n   List\u003cXAttr\u003e filterINodeXAttrs(final List\u003cXAttr\u003e existingXAttrs,\n-      final List\u003cXAttr\u003e toFilter, final List\u003cXAttr\u003e filtered) {\n+      final List\u003cXAttr\u003e toFilter, final List\u003cXAttr\u003e filtered)\n+    throws AccessControlException {\n     if (existingXAttrs \u003d\u003d null || existingXAttrs.isEmpty() ||\n         toFilter \u003d\u003d null || toFilter.isEmpty()) {\n       return existingXAttrs;\n     }\n \n     // Populate a new list with XAttrs that pass the filter\n     List\u003cXAttr\u003e newXAttrs \u003d\n         Lists.newArrayListWithCapacity(existingXAttrs.size());\n     for (XAttr a : existingXAttrs) {\n       boolean add \u003d true;\n       for (ListIterator\u003cXAttr\u003e it \u003d toFilter.listIterator(); it.hasNext()\n           ;) {\n         XAttr filter \u003d it.next();\n         Preconditions.checkArgument(!KEYID_XATTR.equalsIgnoreValue(filter),\n             \"The encryption zone xattr should never be deleted.\");\n+        if (UNREADABLE_BY_SUPERUSER_XATTR.equalsIgnoreValue(filter)) {\n+          throw new AccessControlException(\"The xattr \u0027\" +\n+              SECURITY_XATTR_UNREADABLE_BY_SUPERUSER + \"\u0027 can not be deleted.\");\n+        }\n         if (a.equalsIgnoreValue(filter)) {\n           add \u003d false;\n           it.remove();\n           filtered.add(filter);\n           break;\n         }\n       }\n       if (add) {\n         newXAttrs.add(a);\n       }\n     }\n \n     return newXAttrs;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  List\u003cXAttr\u003e filterINodeXAttrs(final List\u003cXAttr\u003e existingXAttrs,\n      final List\u003cXAttr\u003e toFilter, final List\u003cXAttr\u003e filtered)\n    throws AccessControlException {\n    if (existingXAttrs \u003d\u003d null || existingXAttrs.isEmpty() ||\n        toFilter \u003d\u003d null || toFilter.isEmpty()) {\n      return existingXAttrs;\n    }\n\n    // Populate a new list with XAttrs that pass the filter\n    List\u003cXAttr\u003e newXAttrs \u003d\n        Lists.newArrayListWithCapacity(existingXAttrs.size());\n    for (XAttr a : existingXAttrs) {\n      boolean add \u003d true;\n      for (ListIterator\u003cXAttr\u003e it \u003d toFilter.listIterator(); it.hasNext()\n          ;) {\n        XAttr filter \u003d it.next();\n        Preconditions.checkArgument(!KEYID_XATTR.equalsIgnoreValue(filter),\n            \"The encryption zone xattr should never be deleted.\");\n        if (UNREADABLE_BY_SUPERUSER_XATTR.equalsIgnoreValue(filter)) {\n          throw new AccessControlException(\"The xattr \u0027\" +\n              SECURITY_XATTR_UNREADABLE_BY_SUPERUSER + \"\u0027 can not be deleted.\");\n        }\n        if (a.equalsIgnoreValue(filter)) {\n          add \u003d false;\n          it.remove();\n          filtered.add(filter);\n          break;\n        }\n      }\n      if (add) {\n        newXAttrs.add(a);\n      }\n    }\n\n    return newXAttrs;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
          "extendedDetails": {}
        }
      ]
    },
    "c38665282884122d3c82b6f68376cce036aee748": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6516. List of Encryption Zones should be based on inodes (clamb)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1607770 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/07/14 5:24 PM",
      "commitName": "c38665282884122d3c82b6f68376cce036aee748",
      "commitAuthor": "Charles Lamb",
      "commitDateOld": "02/07/14 5:58 PM",
      "commitNameOld": "2a3bccddd939ee0d6941aa2d22edc67dea85fe35",
      "commitAuthorOld": "Charles Lamb",
      "daysBetweenCommits": 0.98,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,31 @@\n   List\u003cXAttr\u003e filterINodeXAttrs(final List\u003cXAttr\u003e existingXAttrs,\n       final List\u003cXAttr\u003e toFilter, final List\u003cXAttr\u003e filtered) {\n     if (existingXAttrs \u003d\u003d null || existingXAttrs.isEmpty() ||\n         toFilter \u003d\u003d null || toFilter.isEmpty()) {\n       return existingXAttrs;\n     }\n \n     // Populate a new list with XAttrs that pass the filter\n     List\u003cXAttr\u003e newXAttrs \u003d\n         Lists.newArrayListWithCapacity(existingXAttrs.size());\n     for (XAttr a : existingXAttrs) {\n       boolean add \u003d true;\n       for (ListIterator\u003cXAttr\u003e it \u003d toFilter.listIterator(); it.hasNext()\n           ;) {\n         XAttr filter \u003d it.next();\n+        Preconditions.checkArgument(!KEYID_XATTR.equalsIgnoreValue(filter),\n+            \"The encryption zone xattr should never be deleted.\");\n         if (a.equalsIgnoreValue(filter)) {\n           add \u003d false;\n           it.remove();\n           filtered.add(filter);\n           break;\n         }\n       }\n       if (add) {\n         newXAttrs.add(a);\n       }\n     }\n \n     return newXAttrs;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  List\u003cXAttr\u003e filterINodeXAttrs(final List\u003cXAttr\u003e existingXAttrs,\n      final List\u003cXAttr\u003e toFilter, final List\u003cXAttr\u003e filtered) {\n    if (existingXAttrs \u003d\u003d null || existingXAttrs.isEmpty() ||\n        toFilter \u003d\u003d null || toFilter.isEmpty()) {\n      return existingXAttrs;\n    }\n\n    // Populate a new list with XAttrs that pass the filter\n    List\u003cXAttr\u003e newXAttrs \u003d\n        Lists.newArrayListWithCapacity(existingXAttrs.size());\n    for (XAttr a : existingXAttrs) {\n      boolean add \u003d true;\n      for (ListIterator\u003cXAttr\u003e it \u003d toFilter.listIterator(); it.hasNext()\n          ;) {\n        XAttr filter \u003d it.next();\n        Preconditions.checkArgument(!KEYID_XATTR.equalsIgnoreValue(filter),\n            \"The encryption zone xattr should never be deleted.\");\n        if (a.equalsIgnoreValue(filter)) {\n          add \u003d false;\n          it.remove();\n          filtered.add(filter);\n          break;\n        }\n      }\n      if (add) {\n        newXAttrs.add(a);\n      }\n    }\n\n    return newXAttrs;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
      "extendedDetails": {}
    },
    "d417e49ce4db119cdeb01be526cdb07f24baf388": {
      "type": "Ymultichange(Yrename,Yparameterchange,Yexceptionschange,Ybodychange,Yparametermetachange)",
      "commitMessage": "HDFS-6492. Support create-time xattrs and atomically setting multiple xattrs. (wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603971 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/06/14 10:37 AM",
      "commitName": "d417e49ce4db119cdeb01be526cdb07f24baf388",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-6492. Support create-time xattrs and atomically setting multiple xattrs. (wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603971 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "19/06/14 10:37 AM",
          "commitName": "d417e49ce4db119cdeb01be526cdb07f24baf388",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "18/06/14 9:13 PM",
          "commitNameOld": "a4e0ff5e052abad498595ee198b49c5310c9ec0d",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.56,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,29 @@\n-  List\u003cXAttr\u003e filterINodeXAttr(List\u003cXAttr\u003e existingXAttrs, \n-      XAttr xAttr) throws QuotaExceededException {\n-    if (existingXAttrs \u003d\u003d null || existingXAttrs.isEmpty()) {\n+  List\u003cXAttr\u003e filterINodeXAttrs(final List\u003cXAttr\u003e existingXAttrs,\n+      final List\u003cXAttr\u003e toFilter, final List\u003cXAttr\u003e filtered) {\n+    if (existingXAttrs \u003d\u003d null || existingXAttrs.isEmpty() ||\n+        toFilter \u003d\u003d null || toFilter.isEmpty()) {\n       return existingXAttrs;\n     }\n-    \n-    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(existingXAttrs.size());\n+\n+    // Populate a new list with XAttrs that pass the filter\n+    List\u003cXAttr\u003e newXAttrs \u003d\n+        Lists.newArrayListWithCapacity(existingXAttrs.size());\n     for (XAttr a : existingXAttrs) {\n-      if (!(a.getNameSpace() \u003d\u003d xAttr.getNameSpace()\n-          \u0026\u0026 a.getName().equals(xAttr.getName()))) {\n-        xAttrs.add(a);\n+      boolean add \u003d true;\n+      for (ListIterator\u003cXAttr\u003e it \u003d toFilter.listIterator(); it.hasNext()\n+          ;) {\n+        XAttr filter \u003d it.next();\n+        if (a.equalsIgnoreValue(filter)) {\n+          add \u003d false;\n+          it.remove();\n+          filtered.add(filter);\n+          break;\n+        }\n+      }\n+      if (add) {\n+        newXAttrs.add(a);\n       }\n     }\n-    \n-    return xAttrs;\n+\n+    return newXAttrs;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  List\u003cXAttr\u003e filterINodeXAttrs(final List\u003cXAttr\u003e existingXAttrs,\n      final List\u003cXAttr\u003e toFilter, final List\u003cXAttr\u003e filtered) {\n    if (existingXAttrs \u003d\u003d null || existingXAttrs.isEmpty() ||\n        toFilter \u003d\u003d null || toFilter.isEmpty()) {\n      return existingXAttrs;\n    }\n\n    // Populate a new list with XAttrs that pass the filter\n    List\u003cXAttr\u003e newXAttrs \u003d\n        Lists.newArrayListWithCapacity(existingXAttrs.size());\n    for (XAttr a : existingXAttrs) {\n      boolean add \u003d true;\n      for (ListIterator\u003cXAttr\u003e it \u003d toFilter.listIterator(); it.hasNext()\n          ;) {\n        XAttr filter \u003d it.next();\n        if (a.equalsIgnoreValue(filter)) {\n          add \u003d false;\n          it.remove();\n          filtered.add(filter);\n          break;\n        }\n      }\n      if (add) {\n        newXAttrs.add(a);\n      }\n    }\n\n    return newXAttrs;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
          "extendedDetails": {
            "oldValue": "filterINodeXAttr",
            "newValue": "filterINodeXAttrs"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6492. Support create-time xattrs and atomically setting multiple xattrs. (wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603971 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "19/06/14 10:37 AM",
          "commitName": "d417e49ce4db119cdeb01be526cdb07f24baf388",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "18/06/14 9:13 PM",
          "commitNameOld": "a4e0ff5e052abad498595ee198b49c5310c9ec0d",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.56,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,29 @@\n-  List\u003cXAttr\u003e filterINodeXAttr(List\u003cXAttr\u003e existingXAttrs, \n-      XAttr xAttr) throws QuotaExceededException {\n-    if (existingXAttrs \u003d\u003d null || existingXAttrs.isEmpty()) {\n+  List\u003cXAttr\u003e filterINodeXAttrs(final List\u003cXAttr\u003e existingXAttrs,\n+      final List\u003cXAttr\u003e toFilter, final List\u003cXAttr\u003e filtered) {\n+    if (existingXAttrs \u003d\u003d null || existingXAttrs.isEmpty() ||\n+        toFilter \u003d\u003d null || toFilter.isEmpty()) {\n       return existingXAttrs;\n     }\n-    \n-    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(existingXAttrs.size());\n+\n+    // Populate a new list with XAttrs that pass the filter\n+    List\u003cXAttr\u003e newXAttrs \u003d\n+        Lists.newArrayListWithCapacity(existingXAttrs.size());\n     for (XAttr a : existingXAttrs) {\n-      if (!(a.getNameSpace() \u003d\u003d xAttr.getNameSpace()\n-          \u0026\u0026 a.getName().equals(xAttr.getName()))) {\n-        xAttrs.add(a);\n+      boolean add \u003d true;\n+      for (ListIterator\u003cXAttr\u003e it \u003d toFilter.listIterator(); it.hasNext()\n+          ;) {\n+        XAttr filter \u003d it.next();\n+        if (a.equalsIgnoreValue(filter)) {\n+          add \u003d false;\n+          it.remove();\n+          filtered.add(filter);\n+          break;\n+        }\n+      }\n+      if (add) {\n+        newXAttrs.add(a);\n       }\n     }\n-    \n-    return xAttrs;\n+\n+    return newXAttrs;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  List\u003cXAttr\u003e filterINodeXAttrs(final List\u003cXAttr\u003e existingXAttrs,\n      final List\u003cXAttr\u003e toFilter, final List\u003cXAttr\u003e filtered) {\n    if (existingXAttrs \u003d\u003d null || existingXAttrs.isEmpty() ||\n        toFilter \u003d\u003d null || toFilter.isEmpty()) {\n      return existingXAttrs;\n    }\n\n    // Populate a new list with XAttrs that pass the filter\n    List\u003cXAttr\u003e newXAttrs \u003d\n        Lists.newArrayListWithCapacity(existingXAttrs.size());\n    for (XAttr a : existingXAttrs) {\n      boolean add \u003d true;\n      for (ListIterator\u003cXAttr\u003e it \u003d toFilter.listIterator(); it.hasNext()\n          ;) {\n        XAttr filter \u003d it.next();\n        if (a.equalsIgnoreValue(filter)) {\n          add \u003d false;\n          it.remove();\n          filtered.add(filter);\n          break;\n        }\n      }\n      if (add) {\n        newXAttrs.add(a);\n      }\n    }\n\n    return newXAttrs;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
          "extendedDetails": {
            "oldValue": "[existingXAttrs-List\u003cXAttr\u003e, xAttr-XAttr]",
            "newValue": "[existingXAttrs-List\u003cXAttr\u003e(modifiers-final), toFilter-List\u003cXAttr\u003e(modifiers-final), filtered-List\u003cXAttr\u003e(modifiers-final)]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-6492. Support create-time xattrs and atomically setting multiple xattrs. (wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603971 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "19/06/14 10:37 AM",
          "commitName": "d417e49ce4db119cdeb01be526cdb07f24baf388",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "18/06/14 9:13 PM",
          "commitNameOld": "a4e0ff5e052abad498595ee198b49c5310c9ec0d",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.56,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,29 @@\n-  List\u003cXAttr\u003e filterINodeXAttr(List\u003cXAttr\u003e existingXAttrs, \n-      XAttr xAttr) throws QuotaExceededException {\n-    if (existingXAttrs \u003d\u003d null || existingXAttrs.isEmpty()) {\n+  List\u003cXAttr\u003e filterINodeXAttrs(final List\u003cXAttr\u003e existingXAttrs,\n+      final List\u003cXAttr\u003e toFilter, final List\u003cXAttr\u003e filtered) {\n+    if (existingXAttrs \u003d\u003d null || existingXAttrs.isEmpty() ||\n+        toFilter \u003d\u003d null || toFilter.isEmpty()) {\n       return existingXAttrs;\n     }\n-    \n-    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(existingXAttrs.size());\n+\n+    // Populate a new list with XAttrs that pass the filter\n+    List\u003cXAttr\u003e newXAttrs \u003d\n+        Lists.newArrayListWithCapacity(existingXAttrs.size());\n     for (XAttr a : existingXAttrs) {\n-      if (!(a.getNameSpace() \u003d\u003d xAttr.getNameSpace()\n-          \u0026\u0026 a.getName().equals(xAttr.getName()))) {\n-        xAttrs.add(a);\n+      boolean add \u003d true;\n+      for (ListIterator\u003cXAttr\u003e it \u003d toFilter.listIterator(); it.hasNext()\n+          ;) {\n+        XAttr filter \u003d it.next();\n+        if (a.equalsIgnoreValue(filter)) {\n+          add \u003d false;\n+          it.remove();\n+          filtered.add(filter);\n+          break;\n+        }\n+      }\n+      if (add) {\n+        newXAttrs.add(a);\n       }\n     }\n-    \n-    return xAttrs;\n+\n+    return newXAttrs;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  List\u003cXAttr\u003e filterINodeXAttrs(final List\u003cXAttr\u003e existingXAttrs,\n      final List\u003cXAttr\u003e toFilter, final List\u003cXAttr\u003e filtered) {\n    if (existingXAttrs \u003d\u003d null || existingXAttrs.isEmpty() ||\n        toFilter \u003d\u003d null || toFilter.isEmpty()) {\n      return existingXAttrs;\n    }\n\n    // Populate a new list with XAttrs that pass the filter\n    List\u003cXAttr\u003e newXAttrs \u003d\n        Lists.newArrayListWithCapacity(existingXAttrs.size());\n    for (XAttr a : existingXAttrs) {\n      boolean add \u003d true;\n      for (ListIterator\u003cXAttr\u003e it \u003d toFilter.listIterator(); it.hasNext()\n          ;) {\n        XAttr filter \u003d it.next();\n        if (a.equalsIgnoreValue(filter)) {\n          add \u003d false;\n          it.remove();\n          filtered.add(filter);\n          break;\n        }\n      }\n      if (add) {\n        newXAttrs.add(a);\n      }\n    }\n\n    return newXAttrs;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
          "extendedDetails": {
            "oldValue": "[QuotaExceededException]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6492. Support create-time xattrs and atomically setting multiple xattrs. (wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603971 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "19/06/14 10:37 AM",
          "commitName": "d417e49ce4db119cdeb01be526cdb07f24baf388",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "18/06/14 9:13 PM",
          "commitNameOld": "a4e0ff5e052abad498595ee198b49c5310c9ec0d",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.56,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,29 @@\n-  List\u003cXAttr\u003e filterINodeXAttr(List\u003cXAttr\u003e existingXAttrs, \n-      XAttr xAttr) throws QuotaExceededException {\n-    if (existingXAttrs \u003d\u003d null || existingXAttrs.isEmpty()) {\n+  List\u003cXAttr\u003e filterINodeXAttrs(final List\u003cXAttr\u003e existingXAttrs,\n+      final List\u003cXAttr\u003e toFilter, final List\u003cXAttr\u003e filtered) {\n+    if (existingXAttrs \u003d\u003d null || existingXAttrs.isEmpty() ||\n+        toFilter \u003d\u003d null || toFilter.isEmpty()) {\n       return existingXAttrs;\n     }\n-    \n-    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(existingXAttrs.size());\n+\n+    // Populate a new list with XAttrs that pass the filter\n+    List\u003cXAttr\u003e newXAttrs \u003d\n+        Lists.newArrayListWithCapacity(existingXAttrs.size());\n     for (XAttr a : existingXAttrs) {\n-      if (!(a.getNameSpace() \u003d\u003d xAttr.getNameSpace()\n-          \u0026\u0026 a.getName().equals(xAttr.getName()))) {\n-        xAttrs.add(a);\n+      boolean add \u003d true;\n+      for (ListIterator\u003cXAttr\u003e it \u003d toFilter.listIterator(); it.hasNext()\n+          ;) {\n+        XAttr filter \u003d it.next();\n+        if (a.equalsIgnoreValue(filter)) {\n+          add \u003d false;\n+          it.remove();\n+          filtered.add(filter);\n+          break;\n+        }\n+      }\n+      if (add) {\n+        newXAttrs.add(a);\n       }\n     }\n-    \n-    return xAttrs;\n+\n+    return newXAttrs;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  List\u003cXAttr\u003e filterINodeXAttrs(final List\u003cXAttr\u003e existingXAttrs,\n      final List\u003cXAttr\u003e toFilter, final List\u003cXAttr\u003e filtered) {\n    if (existingXAttrs \u003d\u003d null || existingXAttrs.isEmpty() ||\n        toFilter \u003d\u003d null || toFilter.isEmpty()) {\n      return existingXAttrs;\n    }\n\n    // Populate a new list with XAttrs that pass the filter\n    List\u003cXAttr\u003e newXAttrs \u003d\n        Lists.newArrayListWithCapacity(existingXAttrs.size());\n    for (XAttr a : existingXAttrs) {\n      boolean add \u003d true;\n      for (ListIterator\u003cXAttr\u003e it \u003d toFilter.listIterator(); it.hasNext()\n          ;) {\n        XAttr filter \u003d it.next();\n        if (a.equalsIgnoreValue(filter)) {\n          add \u003d false;\n          it.remove();\n          filtered.add(filter);\n          break;\n        }\n      }\n      if (add) {\n        newXAttrs.add(a);\n      }\n    }\n\n    return newXAttrs;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "HDFS-6492. Support create-time xattrs and atomically setting multiple xattrs. (wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603971 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "19/06/14 10:37 AM",
          "commitName": "d417e49ce4db119cdeb01be526cdb07f24baf388",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "18/06/14 9:13 PM",
          "commitNameOld": "a4e0ff5e052abad498595ee198b49c5310c9ec0d",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.56,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,29 @@\n-  List\u003cXAttr\u003e filterINodeXAttr(List\u003cXAttr\u003e existingXAttrs, \n-      XAttr xAttr) throws QuotaExceededException {\n-    if (existingXAttrs \u003d\u003d null || existingXAttrs.isEmpty()) {\n+  List\u003cXAttr\u003e filterINodeXAttrs(final List\u003cXAttr\u003e existingXAttrs,\n+      final List\u003cXAttr\u003e toFilter, final List\u003cXAttr\u003e filtered) {\n+    if (existingXAttrs \u003d\u003d null || existingXAttrs.isEmpty() ||\n+        toFilter \u003d\u003d null || toFilter.isEmpty()) {\n       return existingXAttrs;\n     }\n-    \n-    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(existingXAttrs.size());\n+\n+    // Populate a new list with XAttrs that pass the filter\n+    List\u003cXAttr\u003e newXAttrs \u003d\n+        Lists.newArrayListWithCapacity(existingXAttrs.size());\n     for (XAttr a : existingXAttrs) {\n-      if (!(a.getNameSpace() \u003d\u003d xAttr.getNameSpace()\n-          \u0026\u0026 a.getName().equals(xAttr.getName()))) {\n-        xAttrs.add(a);\n+      boolean add \u003d true;\n+      for (ListIterator\u003cXAttr\u003e it \u003d toFilter.listIterator(); it.hasNext()\n+          ;) {\n+        XAttr filter \u003d it.next();\n+        if (a.equalsIgnoreValue(filter)) {\n+          add \u003d false;\n+          it.remove();\n+          filtered.add(filter);\n+          break;\n+        }\n+      }\n+      if (add) {\n+        newXAttrs.add(a);\n       }\n     }\n-    \n-    return xAttrs;\n+\n+    return newXAttrs;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  List\u003cXAttr\u003e filterINodeXAttrs(final List\u003cXAttr\u003e existingXAttrs,\n      final List\u003cXAttr\u003e toFilter, final List\u003cXAttr\u003e filtered) {\n    if (existingXAttrs \u003d\u003d null || existingXAttrs.isEmpty() ||\n        toFilter \u003d\u003d null || toFilter.isEmpty()) {\n      return existingXAttrs;\n    }\n\n    // Populate a new list with XAttrs that pass the filter\n    List\u003cXAttr\u003e newXAttrs \u003d\n        Lists.newArrayListWithCapacity(existingXAttrs.size());\n    for (XAttr a : existingXAttrs) {\n      boolean add \u003d true;\n      for (ListIterator\u003cXAttr\u003e it \u003d toFilter.listIterator(); it.hasNext()\n          ;) {\n        XAttr filter \u003d it.next();\n        if (a.equalsIgnoreValue(filter)) {\n          add \u003d false;\n          it.remove();\n          filtered.add(filter);\n          break;\n        }\n      }\n      if (add) {\n        newXAttrs.add(a);\n      }\n    }\n\n    return newXAttrs;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
          "extendedDetails": {
            "oldValue": "[existingXAttrs-List\u003cXAttr\u003e, xAttr-XAttr]",
            "newValue": "[existingXAttrs-List\u003cXAttr\u003e(modifiers-final), toFilter-List\u003cXAttr\u003e(modifiers-final), filtered-List\u003cXAttr\u003e(modifiers-final)]"
          }
        }
      ]
    },
    "ac23a55547716df29b3e25c98a113399e184d9d1": {
      "type": "Yintroduced",
      "commitMessage": "Merge HDFS-2006 HDFS XAttrs branch to Trunk\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1596575 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/05/14 6:57 AM",
      "commitName": "ac23a55547716df29b3e25c98a113399e184d9d1",
      "commitAuthor": "Uma Maheswara Rao G",
      "diff": "@@ -0,0 +1,16 @@\n+  List\u003cXAttr\u003e filterINodeXAttr(List\u003cXAttr\u003e existingXAttrs, \n+      XAttr xAttr) throws QuotaExceededException {\n+    if (existingXAttrs \u003d\u003d null || existingXAttrs.isEmpty()) {\n+      return existingXAttrs;\n+    }\n+    \n+    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(existingXAttrs.size());\n+    for (XAttr a : existingXAttrs) {\n+      if (!(a.getNameSpace() \u003d\u003d xAttr.getNameSpace()\n+          \u0026\u0026 a.getName().equals(xAttr.getName()))) {\n+        xAttrs.add(a);\n+      }\n+    }\n+    \n+    return xAttrs;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  List\u003cXAttr\u003e filterINodeXAttr(List\u003cXAttr\u003e existingXAttrs, \n      XAttr xAttr) throws QuotaExceededException {\n    if (existingXAttrs \u003d\u003d null || existingXAttrs.isEmpty()) {\n      return existingXAttrs;\n    }\n    \n    List\u003cXAttr\u003e xAttrs \u003d Lists.newArrayListWithCapacity(existingXAttrs.size());\n    for (XAttr a : existingXAttrs) {\n      if (!(a.getNameSpace() \u003d\u003d xAttr.getNameSpace()\n          \u0026\u0026 a.getName().equals(xAttr.getName()))) {\n        xAttrs.add(a);\n      }\n    }\n    \n    return xAttrs;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java"
    }
  }
}