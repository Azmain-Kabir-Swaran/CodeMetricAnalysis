{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ServiceLauncher.java",
  "functionName": "launchService",
  "functionId": "launchService___conf-Configuration__processedArgs-List__String____addShutdownHook-boolean__execute-boolean",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/service/launcher/ServiceLauncher.java",
  "functionStartLine": 464,
  "functionEndLine": 469,
  "numCommitsSeen": 3,
  "timeTaken": 1180,
  "changeHistory": [
    "b15ef7dc3d91c6d50fa515158104fba29f43e6b0",
    "373bb4931fb392e3ca6bfd78992887e5a405e186"
  ],
  "changeHistoryShort": {
    "b15ef7dc3d91c6d50fa515158104fba29f43e6b0": "Ybodychange",
    "373bb4931fb392e3ca6bfd78992887e5a405e186": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b15ef7dc3d91c6d50fa515158104fba29f43e6b0": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16384: S3A: Avoid inconsistencies between DDB and S3.\n\nContributed by Steve Loughran\n\nContains\n\n- HADOOP-16397. Hadoop S3Guard Prune command to support a -tombstone option.\n- HADOOP-16406. ITestDynamoDBMetadataStore.testProvisionTable times out intermittently\n\nThis patch doesn\u0027t fix the underlying problem but it\n\n* changes some tests to clean up better\n* does a lot more in logging operations in against DDB, if enabled\n* adds an entry point to dump the state of the metastore and s3 tables (precursor to fsck)\n* adds a purge entry point to help clean up after a test run has got a store into a mess\n* s3guard prune command adds -tombstone option to only clear tombstones\n\nThe outcome is that tests should pass consistently and if problems occur we have better diagnostics.\n\nChange-Id: I3eca3f5529d7f6fec398c0ff0472919f08f054eb\n",
      "commitDate": "12/07/19 5:02 AM",
      "commitName": "b15ef7dc3d91c6d50fa515158104fba29f43e6b0",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "10/10/18 9:51 PM",
      "commitNameOld": "7b57f2f71fbaa5af4897309597cca70a95b04edd",
      "commitAuthorOld": "Takanobu Asanuma",
      "daysBetweenCommits": 274.3,
      "commitsBetweenForRepo": 2016,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,6 @@\n   public ExitUtil.ExitException launchService(Configuration conf,\n       List\u003cString\u003e processedArgs,\n       boolean addShutdownHook,\n       boolean execute) {\n-    \n-    ExitUtil.ExitException exitException;\n-    \n-    try {\n-      int exitCode \u003d coreServiceLaunch(conf, processedArgs, addShutdownHook,\n-          execute);\n-      if (service !\u003d null) {\n-        // check to see if the service failed\n-        Throwable failure \u003d service.getFailureCause();\n-        if (failure !\u003d null) {\n-          // the service exited with a failure.\n-          // check what state it is in\n-          Service.STATE failureState \u003d service.getFailureState();\n-          if (failureState \u003d\u003d Service.STATE.STOPPED) {\n-            // the failure occurred during shutdown, not important enough\n-            // to bother the user as it may just scare them\n-            LOG.debug(\"Failure during shutdown: {} \", failure, failure);\n-          } else {\n-            //throw it for the catch handlers to deal with\n-            throw failure;\n-          }\n-        }\n-      }\n-      String name \u003d getServiceName();\n-\n-      if (exitCode \u003d\u003d 0) {\n-        exitException \u003d new ServiceLaunchException(exitCode,\n-            \"%s succeeded\",\n-            name);\n-      } else {\n-        exitException \u003d new ServiceLaunchException(exitCode,\n-            \"%s failed \", name);\n-      }\n-      // either the service succeeded, or an error raised during shutdown, \n-      // which we don\u0027t worry that much about\n-    } catch (ExitUtil.ExitException ee) {\n-      // exit exceptions are passed through unchanged\n-      exitException \u003d ee;\n-    } catch (Throwable thrown) {\n-      exitException \u003d convertToExitException(thrown);\n-    }\n-    noteException(exitException);\n-    return exitException;\n+    return launchService(conf, null, processedArgs, addShutdownHook, execute);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ExitUtil.ExitException launchService(Configuration conf,\n      List\u003cString\u003e processedArgs,\n      boolean addShutdownHook,\n      boolean execute) {\n    return launchService(conf, null, processedArgs, addShutdownHook, execute);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/service/launcher/ServiceLauncher.java",
      "extendedDetails": {}
    },
    "373bb4931fb392e3ca6bfd78992887e5a405e186": {
      "type": "Yintroduced",
      "commitMessage": "YARN-679. Add an entry point that can start any Yarn service. Contributed by Steve Loughran.\n",
      "commitDate": "28/04/17 10:45 AM",
      "commitName": "373bb4931fb392e3ca6bfd78992887e5a405e186",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,48 @@\n+  public ExitUtil.ExitException launchService(Configuration conf,\n+      List\u003cString\u003e processedArgs,\n+      boolean addShutdownHook,\n+      boolean execute) {\n+    \n+    ExitUtil.ExitException exitException;\n+    \n+    try {\n+      int exitCode \u003d coreServiceLaunch(conf, processedArgs, addShutdownHook,\n+          execute);\n+      if (service !\u003d null) {\n+        // check to see if the service failed\n+        Throwable failure \u003d service.getFailureCause();\n+        if (failure !\u003d null) {\n+          // the service exited with a failure.\n+          // check what state it is in\n+          Service.STATE failureState \u003d service.getFailureState();\n+          if (failureState \u003d\u003d Service.STATE.STOPPED) {\n+            // the failure occurred during shutdown, not important enough\n+            // to bother the user as it may just scare them\n+            LOG.debug(\"Failure during shutdown: {} \", failure, failure);\n+          } else {\n+            //throw it for the catch handlers to deal with\n+            throw failure;\n+          }\n+        }\n+      }\n+      String name \u003d getServiceName();\n+\n+      if (exitCode \u003d\u003d 0) {\n+        exitException \u003d new ServiceLaunchException(exitCode,\n+            \"%s succeeded\",\n+            name);\n+      } else {\n+        exitException \u003d new ServiceLaunchException(exitCode,\n+            \"%s failed \", name);\n+      }\n+      // either the service succeeded, or an error raised during shutdown, \n+      // which we don\u0027t worry that much about\n+    } catch (ExitUtil.ExitException ee) {\n+      // exit exceptions are passed through unchanged\n+      exitException \u003d ee;\n+    } catch (Throwable thrown) {\n+      exitException \u003d convertToExitException(thrown);\n+    }\n+    noteException(exitException);\n+    return exitException;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public ExitUtil.ExitException launchService(Configuration conf,\n      List\u003cString\u003e processedArgs,\n      boolean addShutdownHook,\n      boolean execute) {\n    \n    ExitUtil.ExitException exitException;\n    \n    try {\n      int exitCode \u003d coreServiceLaunch(conf, processedArgs, addShutdownHook,\n          execute);\n      if (service !\u003d null) {\n        // check to see if the service failed\n        Throwable failure \u003d service.getFailureCause();\n        if (failure !\u003d null) {\n          // the service exited with a failure.\n          // check what state it is in\n          Service.STATE failureState \u003d service.getFailureState();\n          if (failureState \u003d\u003d Service.STATE.STOPPED) {\n            // the failure occurred during shutdown, not important enough\n            // to bother the user as it may just scare them\n            LOG.debug(\"Failure during shutdown: {} \", failure, failure);\n          } else {\n            //throw it for the catch handlers to deal with\n            throw failure;\n          }\n        }\n      }\n      String name \u003d getServiceName();\n\n      if (exitCode \u003d\u003d 0) {\n        exitException \u003d new ServiceLaunchException(exitCode,\n            \"%s succeeded\",\n            name);\n      } else {\n        exitException \u003d new ServiceLaunchException(exitCode,\n            \"%s failed \", name);\n      }\n      // either the service succeeded, or an error raised during shutdown, \n      // which we don\u0027t worry that much about\n    } catch (ExitUtil.ExitException ee) {\n      // exit exceptions are passed through unchanged\n      exitException \u003d ee;\n    } catch (Throwable thrown) {\n      exitException \u003d convertToExitException(thrown);\n    }\n    noteException(exitException);\n    return exitException;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/service/launcher/ServiceLauncher.java"
    }
  }
}