{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CosNFileSystem.java",
  "functionName": "getFileStatus",
  "functionId": "getFileStatus___f-Path",
  "sourceFilePath": "hadoop-cloud-storage-project/hadoop-cos/src/main/java/org/apache/hadoop/fs/cosn/CosNFileSystem.java",
  "functionStartLine": 353,
  "functionEndLine": 395,
  "numCommitsSeen": 1,
  "timeTaken": 356,
  "changeHistory": [
    "8a9ede5cff816b66afc37e7c9d2b33aee48795d2"
  ],
  "changeHistoryShort": {
    "8a9ede5cff816b66afc37e7c9d2b33aee48795d2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8a9ede5cff816b66afc37e7c9d2b33aee48795d2": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15616. Incorporate Tencent Cloud COS File System Implementation. Contributed by Yang Yu.\n",
      "commitDate": "27/09/19 1:53 AM",
      "commitName": "8a9ede5cff816b66afc37e7c9d2b33aee48795d2",
      "commitAuthor": "Sammi Chen",
      "diff": "@@ -0,0 +1,43 @@\n+  public FileStatus getFileStatus(Path f) throws IOException {\n+    Path absolutePath \u003d makeAbsolute(f);\n+    String key \u003d pathToKey(absolutePath);\n+\n+    if (key.length() \u003d\u003d 0) {\n+      // root always exists\n+      return newDirectory(absolutePath);\n+    }\n+\n+    LOG.debug(\"Call the getFileStatus to obtain the metadata for \"\n+        + \"the file: [{}].\", f);\n+\n+    FileMetadata meta \u003d store.retrieveMetadata(key);\n+    if (meta !\u003d null) {\n+      if (meta.isFile()) {\n+        LOG.debug(\"Path: [{}] is a file. COS key: [{}]\", f, key);\n+        return newFile(meta, absolutePath);\n+      } else {\n+        LOG.debug(\"Path: [{}] is a dir. COS key: [{}]\", f, key);\n+        return newDirectory(meta, absolutePath);\n+      }\n+    }\n+\n+    if (!key.endsWith(PATH_DELIMITER)) {\n+      key +\u003d PATH_DELIMITER;\n+    }\n+\n+    // Considering that the object store\u0027s directory is a common prefix in\n+    // the object key, it needs to check the existence of the path by listing\n+    // the COS key.\n+    LOG.debug(\"List COS key: [{}] to check the existence of the path.\", key);\n+    PartialListing listing \u003d store.list(key, 1);\n+    if (listing.getFiles().length \u003e 0\n+        || listing.getCommonPrefixes().length \u003e 0) {\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Path: [{}] is a directory. COS key: [{}]\", f, key);\n+      }\n+      return newDirectory(absolutePath);\n+    }\n+\n+    throw new FileNotFoundException(\n+        \"No such file or directory \u0027\" + absolutePath + \"\u0027\");\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus getFileStatus(Path f) throws IOException {\n    Path absolutePath \u003d makeAbsolute(f);\n    String key \u003d pathToKey(absolutePath);\n\n    if (key.length() \u003d\u003d 0) {\n      // root always exists\n      return newDirectory(absolutePath);\n    }\n\n    LOG.debug(\"Call the getFileStatus to obtain the metadata for \"\n        + \"the file: [{}].\", f);\n\n    FileMetadata meta \u003d store.retrieveMetadata(key);\n    if (meta !\u003d null) {\n      if (meta.isFile()) {\n        LOG.debug(\"Path: [{}] is a file. COS key: [{}]\", f, key);\n        return newFile(meta, absolutePath);\n      } else {\n        LOG.debug(\"Path: [{}] is a dir. COS key: [{}]\", f, key);\n        return newDirectory(meta, absolutePath);\n      }\n    }\n\n    if (!key.endsWith(PATH_DELIMITER)) {\n      key +\u003d PATH_DELIMITER;\n    }\n\n    // Considering that the object store\u0027s directory is a common prefix in\n    // the object key, it needs to check the existence of the path by listing\n    // the COS key.\n    LOG.debug(\"List COS key: [{}] to check the existence of the path.\", key);\n    PartialListing listing \u003d store.list(key, 1);\n    if (listing.getFiles().length \u003e 0\n        || listing.getCommonPrefixes().length \u003e 0) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Path: [{}] is a directory. COS key: [{}]\", f, key);\n      }\n      return newDirectory(absolutePath);\n    }\n\n    throw new FileNotFoundException(\n        \"No such file or directory \u0027\" + absolutePath + \"\u0027\");\n  }",
      "path": "hadoop-cloud-storage-project/hadoop-cos/src/main/java/org/apache/hadoop/fs/cosn/CosNFileSystem.java"
    }
  }
}