{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainerLaunch.java",
  "functionName": "handleContainerExitWithFailure",
  "functionId": "handleContainerExitWithFailure___containerID-ContainerId__ret-int__containerLogDir-Path__diagnosticInfo-StringBuilder",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java",
  "functionStartLine": 686,
  "functionEndLine": 765,
  "numCommitsSeen": 95,
  "timeTaken": 3556,
  "changeHistory": [
    "febeead5f95c6fc245ea3735f5b538d4bb4dc8a4",
    "3bee7046c52bff681a5aecc956ba9be6c3543397",
    "d5ff57a08fac983f8b5d201064ce07945f0f216e",
    "0f25a1bb52bc56661fd020a6ba82df99f8c6ef1f",
    "2c17b81569c05b5f375d0ddad99d43cb4e3b23b1"
  ],
  "changeHistoryShort": {
    "febeead5f95c6fc245ea3735f5b538d4bb4dc8a4": "Ybodychange",
    "3bee7046c52bff681a5aecc956ba9be6c3543397": "Ybodychange",
    "d5ff57a08fac983f8b5d201064ce07945f0f216e": "Ybodychange",
    "0f25a1bb52bc56661fd020a6ba82df99f8c6ef1f": "Ymodifierchange",
    "2c17b81569c05b5f375d0ddad99d43cb4e3b23b1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "febeead5f95c6fc245ea3735f5b538d4bb4dc8a4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6550. Capture launch_container.sh logs to a separate log file. (Suma Shivaprasad via wangda)\n\nChange-Id: I0ee0b1bb459437432a22cf68861a6354f0decabb\n",
      "commitDate": "29/09/17 4:39 PM",
      "commitName": "febeead5f95c6fc245ea3735f5b538d4bb4dc8a4",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "14/09/17 8:51 AM",
      "commitNameOld": "66ca0a65408521d5f9b080dd16b353b49fb8eaea",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 15.33,
      "commitsBetweenForRepo": 122,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,80 @@\n   protected void handleContainerExitWithFailure(ContainerId containerID,\n       int ret, Path containerLogDir, StringBuilder diagnosticInfo) {\n-    LOG.warn(diagnosticInfo.toString());\n+    LOG.warn(\"Container launch failed : \" + diagnosticInfo.toString());\n \n+    FileSystem fileSystem \u003d null;\n+    long tailSizeInBytes \u003d\n+        conf.getLong(YarnConfiguration.NM_CONTAINER_STDERR_BYTES,\n+            YarnConfiguration.DEFAULT_NM_CONTAINER_STDERR_BYTES);\n+\n+    // Append container prelaunch stderr to diagnostics\n+    try {\n+      fileSystem \u003d FileSystem.getLocal(conf).getRaw();\n+      FileStatus preLaunchErrorFileStatus \u003d fileSystem\n+          .getFileStatus(new Path(containerLogDir, ContainerLaunch.CONTAINER_PRE_LAUNCH_STDERR));\n+\n+      Path errorFile \u003d preLaunchErrorFileStatus.getPath();\n+      long fileSize \u003d preLaunchErrorFileStatus.getLen();\n+\n+      diagnosticInfo.append(\"Error file: \")\n+          .append(ContainerLaunch.CONTAINER_PRE_LAUNCH_STDERR).append(\".\\n\");\n+      ;\n+\n+      byte[] tailBuffer \u003d tailFile(errorFile, fileSize, tailSizeInBytes);\n+      diagnosticInfo.append(\"Last \").append(tailSizeInBytes)\n+          .append(\" bytes of \").append(errorFile.getName()).append(\" :\\n\")\n+          .append(new String(tailBuffer, StandardCharsets.UTF_8));\n+    } catch (IOException e) {\n+      LOG.error(\"Failed to get tail of the container\u0027s prelaunch error log file\", e);\n+    }\n+\n+    // Append container stderr to diagnostics\n     String errorFileNamePattern \u003d\n         conf.get(YarnConfiguration.NM_CONTAINER_STDERR_PATTERN,\n             YarnConfiguration.DEFAULT_NM_CONTAINER_STDERR_PATTERN);\n-    FSDataInputStream errorFileIS \u003d null;\n+\n     try {\n-      FileSystem fileSystem \u003d FileSystem.getLocal(conf).getRaw();\n+      if (fileSystem \u003d\u003d null) {\n+        fileSystem \u003d FileSystem.getLocal(conf).getRaw();\n+      }\n       FileStatus[] errorFileStatuses \u003d fileSystem\n           .globStatus(new Path(containerLogDir, errorFileNamePattern));\n       if (errorFileStatuses !\u003d null \u0026\u0026 errorFileStatuses.length !\u003d 0) {\n-        long tailSizeInBytes \u003d\n-            conf.getLong(YarnConfiguration.NM_CONTAINER_STDERR_BYTES,\n-                YarnConfiguration.DEFAULT_NM_CONTAINER_STDERR_BYTES);\n         Path errorFile \u003d errorFileStatuses[0].getPath();\n         long fileSize \u003d errorFileStatuses[0].getLen();\n \n         // if more than one file matches the stderr pattern, take the latest\n         // modified file, and also append the file names in the diagnosticInfo\n         if (errorFileStatuses.length \u003e 1) {\n           String[] errorFileNames \u003d new String[errorFileStatuses.length];\n           long latestModifiedTime \u003d errorFileStatuses[0].getModificationTime();\n           errorFileNames[0] \u003d errorFileStatuses[0].getPath().getName();\n           for (int i \u003d 1; i \u003c errorFileStatuses.length; i++) {\n             errorFileNames[i] \u003d errorFileStatuses[i].getPath().getName();\n             if (errorFileStatuses[i]\n                 .getModificationTime() \u003e latestModifiedTime) {\n               latestModifiedTime \u003d errorFileStatuses[i].getModificationTime();\n               errorFile \u003d errorFileStatuses[i].getPath();\n               fileSize \u003d errorFileStatuses[i].getLen();\n             }\n           }\n           diagnosticInfo.append(\"Error files: \")\n               .append(StringUtils.join(\", \", errorFileNames)).append(\".\\n\");\n         }\n \n-        long startPosition \u003d\n-            (fileSize \u003c tailSizeInBytes) ? 0 : fileSize - tailSizeInBytes;\n-        int bufferSize \u003d\n-            (int) ((fileSize \u003c tailSizeInBytes) ? fileSize : tailSizeInBytes);\n-        byte[] tailBuffer \u003d new byte[bufferSize];\n-        errorFileIS \u003d fileSystem.open(errorFile);\n-        errorFileIS.readFully(startPosition, tailBuffer);\n-\n+        byte[] tailBuffer \u003d tailFile(errorFile, fileSize, tailSizeInBytes);\n         String tailBufferMsg \u003d new String(tailBuffer, StandardCharsets.UTF_8);\n         diagnosticInfo.append(\"Last \").append(tailSizeInBytes)\n             .append(\" bytes of \").append(errorFile.getName()).append(\" :\\n\")\n             .append(tailBufferMsg).append(\"\\n\")\n             .append(analysesErrorMsgOfContainerExitWithFailure(tailBufferMsg));\n+\n       }\n     } catch (IOException e) {\n       LOG.error(\"Failed to get tail of the container\u0027s error log file\", e);\n-    } finally {\n-      IOUtils.cleanupWithLogger(LOG, errorFileIS);\n     }\n-\n     this.dispatcher.getEventHandler()\n         .handle(new ContainerExitEvent(containerID,\n             ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, ret,\n             diagnosticInfo.toString()));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void handleContainerExitWithFailure(ContainerId containerID,\n      int ret, Path containerLogDir, StringBuilder diagnosticInfo) {\n    LOG.warn(\"Container launch failed : \" + diagnosticInfo.toString());\n\n    FileSystem fileSystem \u003d null;\n    long tailSizeInBytes \u003d\n        conf.getLong(YarnConfiguration.NM_CONTAINER_STDERR_BYTES,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_STDERR_BYTES);\n\n    // Append container prelaunch stderr to diagnostics\n    try {\n      fileSystem \u003d FileSystem.getLocal(conf).getRaw();\n      FileStatus preLaunchErrorFileStatus \u003d fileSystem\n          .getFileStatus(new Path(containerLogDir, ContainerLaunch.CONTAINER_PRE_LAUNCH_STDERR));\n\n      Path errorFile \u003d preLaunchErrorFileStatus.getPath();\n      long fileSize \u003d preLaunchErrorFileStatus.getLen();\n\n      diagnosticInfo.append(\"Error file: \")\n          .append(ContainerLaunch.CONTAINER_PRE_LAUNCH_STDERR).append(\".\\n\");\n      ;\n\n      byte[] tailBuffer \u003d tailFile(errorFile, fileSize, tailSizeInBytes);\n      diagnosticInfo.append(\"Last \").append(tailSizeInBytes)\n          .append(\" bytes of \").append(errorFile.getName()).append(\" :\\n\")\n          .append(new String(tailBuffer, StandardCharsets.UTF_8));\n    } catch (IOException e) {\n      LOG.error(\"Failed to get tail of the container\u0027s prelaunch error log file\", e);\n    }\n\n    // Append container stderr to diagnostics\n    String errorFileNamePattern \u003d\n        conf.get(YarnConfiguration.NM_CONTAINER_STDERR_PATTERN,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_STDERR_PATTERN);\n\n    try {\n      if (fileSystem \u003d\u003d null) {\n        fileSystem \u003d FileSystem.getLocal(conf).getRaw();\n      }\n      FileStatus[] errorFileStatuses \u003d fileSystem\n          .globStatus(new Path(containerLogDir, errorFileNamePattern));\n      if (errorFileStatuses !\u003d null \u0026\u0026 errorFileStatuses.length !\u003d 0) {\n        Path errorFile \u003d errorFileStatuses[0].getPath();\n        long fileSize \u003d errorFileStatuses[0].getLen();\n\n        // if more than one file matches the stderr pattern, take the latest\n        // modified file, and also append the file names in the diagnosticInfo\n        if (errorFileStatuses.length \u003e 1) {\n          String[] errorFileNames \u003d new String[errorFileStatuses.length];\n          long latestModifiedTime \u003d errorFileStatuses[0].getModificationTime();\n          errorFileNames[0] \u003d errorFileStatuses[0].getPath().getName();\n          for (int i \u003d 1; i \u003c errorFileStatuses.length; i++) {\n            errorFileNames[i] \u003d errorFileStatuses[i].getPath().getName();\n            if (errorFileStatuses[i]\n                .getModificationTime() \u003e latestModifiedTime) {\n              latestModifiedTime \u003d errorFileStatuses[i].getModificationTime();\n              errorFile \u003d errorFileStatuses[i].getPath();\n              fileSize \u003d errorFileStatuses[i].getLen();\n            }\n          }\n          diagnosticInfo.append(\"Error files: \")\n              .append(StringUtils.join(\", \", errorFileNames)).append(\".\\n\");\n        }\n\n        byte[] tailBuffer \u003d tailFile(errorFile, fileSize, tailSizeInBytes);\n        String tailBufferMsg \u003d new String(tailBuffer, StandardCharsets.UTF_8);\n        diagnosticInfo.append(\"Last \").append(tailSizeInBytes)\n            .append(\" bytes of \").append(errorFile.getName()).append(\" :\\n\")\n            .append(tailBufferMsg).append(\"\\n\")\n            .append(analysesErrorMsgOfContainerExitWithFailure(tailBufferMsg));\n\n      }\n    } catch (IOException e) {\n      LOG.error(\"Failed to get tail of the container\u0027s error log file\", e);\n    }\n    this.dispatcher.getEventHandler()\n        .handle(new ContainerExitEvent(containerID,\n            ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, ret,\n            diagnosticInfo.toString()));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java",
      "extendedDetails": {}
    },
    "3bee7046c52bff681a5aecc956ba9be6c3543397": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6999. Add log about how to solve Error: Could not find or load main class org.apache.hadoop.mapreduce.v2.app.MRAppMaster. (Linlin Zhou via gtcarrera9)\n",
      "commitDate": "25/08/17 10:43 PM",
      "commitName": "3bee7046c52bff681a5aecc956ba9be6c3543397",
      "commitAuthor": "Li Lu",
      "commitDateOld": "22/08/17 1:14 AM",
      "commitNameOld": "d5ff57a08fac983f8b5d201064ce07945f0f216e",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 3.9,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,63 @@\n   protected void handleContainerExitWithFailure(ContainerId containerID,\n       int ret, Path containerLogDir, StringBuilder diagnosticInfo) {\n     LOG.warn(diagnosticInfo.toString());\n \n     String errorFileNamePattern \u003d\n         conf.get(YarnConfiguration.NM_CONTAINER_STDERR_PATTERN,\n             YarnConfiguration.DEFAULT_NM_CONTAINER_STDERR_PATTERN);\n     FSDataInputStream errorFileIS \u003d null;\n     try {\n       FileSystem fileSystem \u003d FileSystem.getLocal(conf).getRaw();\n       FileStatus[] errorFileStatuses \u003d fileSystem\n           .globStatus(new Path(containerLogDir, errorFileNamePattern));\n       if (errorFileStatuses !\u003d null \u0026\u0026 errorFileStatuses.length !\u003d 0) {\n         long tailSizeInBytes \u003d\n             conf.getLong(YarnConfiguration.NM_CONTAINER_STDERR_BYTES,\n                 YarnConfiguration.DEFAULT_NM_CONTAINER_STDERR_BYTES);\n         Path errorFile \u003d errorFileStatuses[0].getPath();\n         long fileSize \u003d errorFileStatuses[0].getLen();\n \n         // if more than one file matches the stderr pattern, take the latest\n         // modified file, and also append the file names in the diagnosticInfo\n         if (errorFileStatuses.length \u003e 1) {\n           String[] errorFileNames \u003d new String[errorFileStatuses.length];\n           long latestModifiedTime \u003d errorFileStatuses[0].getModificationTime();\n           errorFileNames[0] \u003d errorFileStatuses[0].getPath().getName();\n           for (int i \u003d 1; i \u003c errorFileStatuses.length; i++) {\n             errorFileNames[i] \u003d errorFileStatuses[i].getPath().getName();\n             if (errorFileStatuses[i]\n                 .getModificationTime() \u003e latestModifiedTime) {\n               latestModifiedTime \u003d errorFileStatuses[i].getModificationTime();\n               errorFile \u003d errorFileStatuses[i].getPath();\n               fileSize \u003d errorFileStatuses[i].getLen();\n             }\n           }\n           diagnosticInfo.append(\"Error files: \")\n               .append(StringUtils.join(\", \", errorFileNames)).append(\".\\n\");\n         }\n \n         long startPosition \u003d\n             (fileSize \u003c tailSizeInBytes) ? 0 : fileSize - tailSizeInBytes;\n         int bufferSize \u003d\n             (int) ((fileSize \u003c tailSizeInBytes) ? fileSize : tailSizeInBytes);\n         byte[] tailBuffer \u003d new byte[bufferSize];\n         errorFileIS \u003d fileSystem.open(errorFile);\n         errorFileIS.readFully(startPosition, tailBuffer);\n \n+        String tailBufferMsg \u003d new String(tailBuffer, StandardCharsets.UTF_8);\n         diagnosticInfo.append(\"Last \").append(tailSizeInBytes)\n             .append(\" bytes of \").append(errorFile.getName()).append(\" :\\n\")\n-            .append(new String(tailBuffer, StandardCharsets.UTF_8));\n+            .append(tailBufferMsg).append(\"\\n\")\n+            .append(analysesErrorMsgOfContainerExitWithFailure(tailBufferMsg));\n       }\n     } catch (IOException e) {\n       LOG.error(\"Failed to get tail of the container\u0027s error log file\", e);\n     } finally {\n       IOUtils.cleanupWithLogger(LOG, errorFileIS);\n     }\n \n     this.dispatcher.getEventHandler()\n         .handle(new ContainerExitEvent(containerID,\n             ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, ret,\n             diagnosticInfo.toString()));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void handleContainerExitWithFailure(ContainerId containerID,\n      int ret, Path containerLogDir, StringBuilder diagnosticInfo) {\n    LOG.warn(diagnosticInfo.toString());\n\n    String errorFileNamePattern \u003d\n        conf.get(YarnConfiguration.NM_CONTAINER_STDERR_PATTERN,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_STDERR_PATTERN);\n    FSDataInputStream errorFileIS \u003d null;\n    try {\n      FileSystem fileSystem \u003d FileSystem.getLocal(conf).getRaw();\n      FileStatus[] errorFileStatuses \u003d fileSystem\n          .globStatus(new Path(containerLogDir, errorFileNamePattern));\n      if (errorFileStatuses !\u003d null \u0026\u0026 errorFileStatuses.length !\u003d 0) {\n        long tailSizeInBytes \u003d\n            conf.getLong(YarnConfiguration.NM_CONTAINER_STDERR_BYTES,\n                YarnConfiguration.DEFAULT_NM_CONTAINER_STDERR_BYTES);\n        Path errorFile \u003d errorFileStatuses[0].getPath();\n        long fileSize \u003d errorFileStatuses[0].getLen();\n\n        // if more than one file matches the stderr pattern, take the latest\n        // modified file, and also append the file names in the diagnosticInfo\n        if (errorFileStatuses.length \u003e 1) {\n          String[] errorFileNames \u003d new String[errorFileStatuses.length];\n          long latestModifiedTime \u003d errorFileStatuses[0].getModificationTime();\n          errorFileNames[0] \u003d errorFileStatuses[0].getPath().getName();\n          for (int i \u003d 1; i \u003c errorFileStatuses.length; i++) {\n            errorFileNames[i] \u003d errorFileStatuses[i].getPath().getName();\n            if (errorFileStatuses[i]\n                .getModificationTime() \u003e latestModifiedTime) {\n              latestModifiedTime \u003d errorFileStatuses[i].getModificationTime();\n              errorFile \u003d errorFileStatuses[i].getPath();\n              fileSize \u003d errorFileStatuses[i].getLen();\n            }\n          }\n          diagnosticInfo.append(\"Error files: \")\n              .append(StringUtils.join(\", \", errorFileNames)).append(\".\\n\");\n        }\n\n        long startPosition \u003d\n            (fileSize \u003c tailSizeInBytes) ? 0 : fileSize - tailSizeInBytes;\n        int bufferSize \u003d\n            (int) ((fileSize \u003c tailSizeInBytes) ? fileSize : tailSizeInBytes);\n        byte[] tailBuffer \u003d new byte[bufferSize];\n        errorFileIS \u003d fileSystem.open(errorFile);\n        errorFileIS.readFully(startPosition, tailBuffer);\n\n        String tailBufferMsg \u003d new String(tailBuffer, StandardCharsets.UTF_8);\n        diagnosticInfo.append(\"Last \").append(tailSizeInBytes)\n            .append(\" bytes of \").append(errorFile.getName()).append(\" :\\n\")\n            .append(tailBufferMsg).append(\"\\n\")\n            .append(analysesErrorMsgOfContainerExitWithFailure(tailBufferMsg));\n      }\n    } catch (IOException e) {\n      LOG.error(\"Failed to get tail of the container\u0027s error log file\", e);\n    } finally {\n      IOUtils.cleanupWithLogger(LOG, errorFileIS);\n    }\n\n    this.dispatcher.getEventHandler()\n        .handle(new ContainerExitEvent(containerID,\n            ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, ret,\n            diagnosticInfo.toString()));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java",
      "extendedDetails": {}
    },
    "d5ff57a08fac983f8b5d201064ce07945f0f216e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7047. Moving logging APIs over to slf4j in hadoop-yarn-server-nodemanager. Contributed by Yeliang Cang.\n",
      "commitDate": "22/08/17 1:14 AM",
      "commitName": "d5ff57a08fac983f8b5d201064ce07945f0f216e",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "10/05/17 10:46 AM",
      "commitNameOld": "74a61438ca01e2191b54000af73b654a2d0b8253",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 103.6,
      "commitsBetweenForRepo": 586,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,61 @@\n   protected void handleContainerExitWithFailure(ContainerId containerID,\n       int ret, Path containerLogDir, StringBuilder diagnosticInfo) {\n-    LOG.warn(diagnosticInfo);\n+    LOG.warn(diagnosticInfo.toString());\n \n     String errorFileNamePattern \u003d\n         conf.get(YarnConfiguration.NM_CONTAINER_STDERR_PATTERN,\n             YarnConfiguration.DEFAULT_NM_CONTAINER_STDERR_PATTERN);\n     FSDataInputStream errorFileIS \u003d null;\n     try {\n       FileSystem fileSystem \u003d FileSystem.getLocal(conf).getRaw();\n       FileStatus[] errorFileStatuses \u003d fileSystem\n           .globStatus(new Path(containerLogDir, errorFileNamePattern));\n       if (errorFileStatuses !\u003d null \u0026\u0026 errorFileStatuses.length !\u003d 0) {\n         long tailSizeInBytes \u003d\n             conf.getLong(YarnConfiguration.NM_CONTAINER_STDERR_BYTES,\n                 YarnConfiguration.DEFAULT_NM_CONTAINER_STDERR_BYTES);\n         Path errorFile \u003d errorFileStatuses[0].getPath();\n         long fileSize \u003d errorFileStatuses[0].getLen();\n \n         // if more than one file matches the stderr pattern, take the latest\n         // modified file, and also append the file names in the diagnosticInfo\n         if (errorFileStatuses.length \u003e 1) {\n           String[] errorFileNames \u003d new String[errorFileStatuses.length];\n           long latestModifiedTime \u003d errorFileStatuses[0].getModificationTime();\n           errorFileNames[0] \u003d errorFileStatuses[0].getPath().getName();\n           for (int i \u003d 1; i \u003c errorFileStatuses.length; i++) {\n             errorFileNames[i] \u003d errorFileStatuses[i].getPath().getName();\n             if (errorFileStatuses[i]\n                 .getModificationTime() \u003e latestModifiedTime) {\n               latestModifiedTime \u003d errorFileStatuses[i].getModificationTime();\n               errorFile \u003d errorFileStatuses[i].getPath();\n               fileSize \u003d errorFileStatuses[i].getLen();\n             }\n           }\n           diagnosticInfo.append(\"Error files: \")\n               .append(StringUtils.join(\", \", errorFileNames)).append(\".\\n\");\n         }\n \n         long startPosition \u003d\n             (fileSize \u003c tailSizeInBytes) ? 0 : fileSize - tailSizeInBytes;\n         int bufferSize \u003d\n             (int) ((fileSize \u003c tailSizeInBytes) ? fileSize : tailSizeInBytes);\n         byte[] tailBuffer \u003d new byte[bufferSize];\n         errorFileIS \u003d fileSystem.open(errorFile);\n         errorFileIS.readFully(startPosition, tailBuffer);\n \n         diagnosticInfo.append(\"Last \").append(tailSizeInBytes)\n             .append(\" bytes of \").append(errorFile.getName()).append(\" :\\n\")\n             .append(new String(tailBuffer, StandardCharsets.UTF_8));\n       }\n     } catch (IOException e) {\n       LOG.error(\"Failed to get tail of the container\u0027s error log file\", e);\n     } finally {\n-      IOUtils.cleanup(LOG, errorFileIS);\n+      IOUtils.cleanupWithLogger(LOG, errorFileIS);\n     }\n \n     this.dispatcher.getEventHandler()\n         .handle(new ContainerExitEvent(containerID,\n             ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, ret,\n             diagnosticInfo.toString()));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void handleContainerExitWithFailure(ContainerId containerID,\n      int ret, Path containerLogDir, StringBuilder diagnosticInfo) {\n    LOG.warn(diagnosticInfo.toString());\n\n    String errorFileNamePattern \u003d\n        conf.get(YarnConfiguration.NM_CONTAINER_STDERR_PATTERN,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_STDERR_PATTERN);\n    FSDataInputStream errorFileIS \u003d null;\n    try {\n      FileSystem fileSystem \u003d FileSystem.getLocal(conf).getRaw();\n      FileStatus[] errorFileStatuses \u003d fileSystem\n          .globStatus(new Path(containerLogDir, errorFileNamePattern));\n      if (errorFileStatuses !\u003d null \u0026\u0026 errorFileStatuses.length !\u003d 0) {\n        long tailSizeInBytes \u003d\n            conf.getLong(YarnConfiguration.NM_CONTAINER_STDERR_BYTES,\n                YarnConfiguration.DEFAULT_NM_CONTAINER_STDERR_BYTES);\n        Path errorFile \u003d errorFileStatuses[0].getPath();\n        long fileSize \u003d errorFileStatuses[0].getLen();\n\n        // if more than one file matches the stderr pattern, take the latest\n        // modified file, and also append the file names in the diagnosticInfo\n        if (errorFileStatuses.length \u003e 1) {\n          String[] errorFileNames \u003d new String[errorFileStatuses.length];\n          long latestModifiedTime \u003d errorFileStatuses[0].getModificationTime();\n          errorFileNames[0] \u003d errorFileStatuses[0].getPath().getName();\n          for (int i \u003d 1; i \u003c errorFileStatuses.length; i++) {\n            errorFileNames[i] \u003d errorFileStatuses[i].getPath().getName();\n            if (errorFileStatuses[i]\n                .getModificationTime() \u003e latestModifiedTime) {\n              latestModifiedTime \u003d errorFileStatuses[i].getModificationTime();\n              errorFile \u003d errorFileStatuses[i].getPath();\n              fileSize \u003d errorFileStatuses[i].getLen();\n            }\n          }\n          diagnosticInfo.append(\"Error files: \")\n              .append(StringUtils.join(\", \", errorFileNames)).append(\".\\n\");\n        }\n\n        long startPosition \u003d\n            (fileSize \u003c tailSizeInBytes) ? 0 : fileSize - tailSizeInBytes;\n        int bufferSize \u003d\n            (int) ((fileSize \u003c tailSizeInBytes) ? fileSize : tailSizeInBytes);\n        byte[] tailBuffer \u003d new byte[bufferSize];\n        errorFileIS \u003d fileSystem.open(errorFile);\n        errorFileIS.readFully(startPosition, tailBuffer);\n\n        diagnosticInfo.append(\"Last \").append(tailSizeInBytes)\n            .append(\" bytes of \").append(errorFile.getName()).append(\" :\\n\")\n            .append(new String(tailBuffer, StandardCharsets.UTF_8));\n      }\n    } catch (IOException e) {\n      LOG.error(\"Failed to get tail of the container\u0027s error log file\", e);\n    } finally {\n      IOUtils.cleanupWithLogger(LOG, errorFileIS);\n    }\n\n    this.dispatcher.getEventHandler()\n        .handle(new ContainerExitEvent(containerID,\n            ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, ret,\n            diagnosticInfo.toString()));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java",
      "extendedDetails": {}
    },
    "0f25a1bb52bc56661fd020a6ba82df99f8c6ef1f": {
      "type": "Ymodifierchange",
      "commitMessage": "YARN-3998. Add support in the NodeManager to re-launch containers. Contributed by Jun Gong.\n",
      "commitDate": "29/04/16 3:39 AM",
      "commitName": "0f25a1bb52bc56661fd020a6ba82df99f8c6ef1f",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "10/04/16 10:55 PM",
      "commitNameOld": "1ff27f9d12e8124c1b9a722708264c5b07fd0fde",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 18.2,
      "commitsBetweenForRepo": 118,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,61 @@\n-  private void handleContainerExitWithFailure(ContainerId containerID, int ret,\n-      Path containerLogDir, StringBuilder diagnosticInfo) {\n+  protected void handleContainerExitWithFailure(ContainerId containerID,\n+      int ret, Path containerLogDir, StringBuilder diagnosticInfo) {\n     LOG.warn(diagnosticInfo);\n \n     String errorFileNamePattern \u003d\n         conf.get(YarnConfiguration.NM_CONTAINER_STDERR_PATTERN,\n             YarnConfiguration.DEFAULT_NM_CONTAINER_STDERR_PATTERN);\n     FSDataInputStream errorFileIS \u003d null;\n     try {\n       FileSystem fileSystem \u003d FileSystem.getLocal(conf).getRaw();\n       FileStatus[] errorFileStatuses \u003d fileSystem\n           .globStatus(new Path(containerLogDir, errorFileNamePattern));\n       if (errorFileStatuses !\u003d null \u0026\u0026 errorFileStatuses.length !\u003d 0) {\n         long tailSizeInBytes \u003d\n             conf.getLong(YarnConfiguration.NM_CONTAINER_STDERR_BYTES,\n                 YarnConfiguration.DEFAULT_NM_CONTAINER_STDERR_BYTES);\n         Path errorFile \u003d errorFileStatuses[0].getPath();\n         long fileSize \u003d errorFileStatuses[0].getLen();\n \n         // if more than one file matches the stderr pattern, take the latest\n         // modified file, and also append the file names in the diagnosticInfo\n         if (errorFileStatuses.length \u003e 1) {\n           String[] errorFileNames \u003d new String[errorFileStatuses.length];\n           long latestModifiedTime \u003d errorFileStatuses[0].getModificationTime();\n           errorFileNames[0] \u003d errorFileStatuses[0].getPath().getName();\n           for (int i \u003d 1; i \u003c errorFileStatuses.length; i++) {\n             errorFileNames[i] \u003d errorFileStatuses[i].getPath().getName();\n             if (errorFileStatuses[i]\n                 .getModificationTime() \u003e latestModifiedTime) {\n               latestModifiedTime \u003d errorFileStatuses[i].getModificationTime();\n               errorFile \u003d errorFileStatuses[i].getPath();\n               fileSize \u003d errorFileStatuses[i].getLen();\n             }\n           }\n           diagnosticInfo.append(\"Error files: \")\n               .append(StringUtils.join(\", \", errorFileNames)).append(\".\\n\");\n         }\n \n         long startPosition \u003d\n             (fileSize \u003c tailSizeInBytes) ? 0 : fileSize - tailSizeInBytes;\n         int bufferSize \u003d\n             (int) ((fileSize \u003c tailSizeInBytes) ? fileSize : tailSizeInBytes);\n         byte[] tailBuffer \u003d new byte[bufferSize];\n         errorFileIS \u003d fileSystem.open(errorFile);\n         errorFileIS.readFully(startPosition, tailBuffer);\n \n         diagnosticInfo.append(\"Last \").append(tailSizeInBytes)\n             .append(\" bytes of \").append(errorFile.getName()).append(\" :\\n\")\n             .append(new String(tailBuffer, StandardCharsets.UTF_8));\n       }\n     } catch (IOException e) {\n       LOG.error(\"Failed to get tail of the container\u0027s error log file\", e);\n     } finally {\n       IOUtils.cleanup(LOG, errorFileIS);\n     }\n \n     this.dispatcher.getEventHandler()\n         .handle(new ContainerExitEvent(containerID,\n             ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, ret,\n             diagnosticInfo.toString()));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void handleContainerExitWithFailure(ContainerId containerID,\n      int ret, Path containerLogDir, StringBuilder diagnosticInfo) {\n    LOG.warn(diagnosticInfo);\n\n    String errorFileNamePattern \u003d\n        conf.get(YarnConfiguration.NM_CONTAINER_STDERR_PATTERN,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_STDERR_PATTERN);\n    FSDataInputStream errorFileIS \u003d null;\n    try {\n      FileSystem fileSystem \u003d FileSystem.getLocal(conf).getRaw();\n      FileStatus[] errorFileStatuses \u003d fileSystem\n          .globStatus(new Path(containerLogDir, errorFileNamePattern));\n      if (errorFileStatuses !\u003d null \u0026\u0026 errorFileStatuses.length !\u003d 0) {\n        long tailSizeInBytes \u003d\n            conf.getLong(YarnConfiguration.NM_CONTAINER_STDERR_BYTES,\n                YarnConfiguration.DEFAULT_NM_CONTAINER_STDERR_BYTES);\n        Path errorFile \u003d errorFileStatuses[0].getPath();\n        long fileSize \u003d errorFileStatuses[0].getLen();\n\n        // if more than one file matches the stderr pattern, take the latest\n        // modified file, and also append the file names in the diagnosticInfo\n        if (errorFileStatuses.length \u003e 1) {\n          String[] errorFileNames \u003d new String[errorFileStatuses.length];\n          long latestModifiedTime \u003d errorFileStatuses[0].getModificationTime();\n          errorFileNames[0] \u003d errorFileStatuses[0].getPath().getName();\n          for (int i \u003d 1; i \u003c errorFileStatuses.length; i++) {\n            errorFileNames[i] \u003d errorFileStatuses[i].getPath().getName();\n            if (errorFileStatuses[i]\n                .getModificationTime() \u003e latestModifiedTime) {\n              latestModifiedTime \u003d errorFileStatuses[i].getModificationTime();\n              errorFile \u003d errorFileStatuses[i].getPath();\n              fileSize \u003d errorFileStatuses[i].getLen();\n            }\n          }\n          diagnosticInfo.append(\"Error files: \")\n              .append(StringUtils.join(\", \", errorFileNames)).append(\".\\n\");\n        }\n\n        long startPosition \u003d\n            (fileSize \u003c tailSizeInBytes) ? 0 : fileSize - tailSizeInBytes;\n        int bufferSize \u003d\n            (int) ((fileSize \u003c tailSizeInBytes) ? fileSize : tailSizeInBytes);\n        byte[] tailBuffer \u003d new byte[bufferSize];\n        errorFileIS \u003d fileSystem.open(errorFile);\n        errorFileIS.readFully(startPosition, tailBuffer);\n\n        diagnosticInfo.append(\"Last \").append(tailSizeInBytes)\n            .append(\" bytes of \").append(errorFile.getName()).append(\" :\\n\")\n            .append(new String(tailBuffer, StandardCharsets.UTF_8));\n      }\n    } catch (IOException e) {\n      LOG.error(\"Failed to get tail of the container\u0027s error log file\", e);\n    } finally {\n      IOUtils.cleanup(LOG, errorFileIS);\n    }\n\n    this.dispatcher.getEventHandler()\n        .handle(new ContainerExitEvent(containerID,\n            ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, ret,\n            diagnosticInfo.toString()));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[protected]"
      }
    },
    "2c17b81569c05b5f375d0ddad99d43cb4e3b23b1": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2934. Improve handling of container\u0027s stderr. (Naganarasimha G R via gera)\n",
      "commitDate": "24/12/15 11:48 PM",
      "commitName": "2c17b81569c05b5f375d0ddad99d43cb4e3b23b1",
      "commitAuthor": "Gera Shegalov",
      "diff": "@@ -0,0 +1,61 @@\n+  private void handleContainerExitWithFailure(ContainerId containerID, int ret,\n+      Path containerLogDir, StringBuilder diagnosticInfo) {\n+    LOG.warn(diagnosticInfo);\n+\n+    String errorFileNamePattern \u003d\n+        conf.get(YarnConfiguration.NM_CONTAINER_STDERR_PATTERN,\n+            YarnConfiguration.DEFAULT_NM_CONTAINER_STDERR_PATTERN);\n+    FSDataInputStream errorFileIS \u003d null;\n+    try {\n+      FileSystem fileSystem \u003d FileSystem.getLocal(conf).getRaw();\n+      FileStatus[] errorFileStatuses \u003d fileSystem\n+          .globStatus(new Path(containerLogDir, errorFileNamePattern));\n+      if (errorFileStatuses !\u003d null \u0026\u0026 errorFileStatuses.length !\u003d 0) {\n+        long tailSizeInBytes \u003d\n+            conf.getLong(YarnConfiguration.NM_CONTAINER_STDERR_BYTES,\n+                YarnConfiguration.DEFAULT_NM_CONTAINER_STDERR_BYTES);\n+        Path errorFile \u003d errorFileStatuses[0].getPath();\n+        long fileSize \u003d errorFileStatuses[0].getLen();\n+\n+        // if more than one file matches the stderr pattern, take the latest\n+        // modified file, and also append the file names in the diagnosticInfo\n+        if (errorFileStatuses.length \u003e 1) {\n+          String[] errorFileNames \u003d new String[errorFileStatuses.length];\n+          long latestModifiedTime \u003d errorFileStatuses[0].getModificationTime();\n+          errorFileNames[0] \u003d errorFileStatuses[0].getPath().getName();\n+          for (int i \u003d 1; i \u003c errorFileStatuses.length; i++) {\n+            errorFileNames[i] \u003d errorFileStatuses[i].getPath().getName();\n+            if (errorFileStatuses[i]\n+                .getModificationTime() \u003e latestModifiedTime) {\n+              latestModifiedTime \u003d errorFileStatuses[i].getModificationTime();\n+              errorFile \u003d errorFileStatuses[i].getPath();\n+              fileSize \u003d errorFileStatuses[i].getLen();\n+            }\n+          }\n+          diagnosticInfo.append(\"Error files: \")\n+              .append(StringUtils.join(\", \", errorFileNames)).append(\".\\n\");\n+        }\n+\n+        long startPosition \u003d\n+            (fileSize \u003c tailSizeInBytes) ? 0 : fileSize - tailSizeInBytes;\n+        int bufferSize \u003d\n+            (int) ((fileSize \u003c tailSizeInBytes) ? fileSize : tailSizeInBytes);\n+        byte[] tailBuffer \u003d new byte[bufferSize];\n+        errorFileIS \u003d fileSystem.open(errorFile);\n+        errorFileIS.readFully(startPosition, tailBuffer);\n+\n+        diagnosticInfo.append(\"Last \").append(tailSizeInBytes)\n+            .append(\" bytes of \").append(errorFile.getName()).append(\" :\\n\")\n+            .append(new String(tailBuffer, StandardCharsets.UTF_8));\n+      }\n+    } catch (IOException e) {\n+      LOG.error(\"Failed to get tail of the container\u0027s error log file\", e);\n+    } finally {\n+      IOUtils.cleanup(LOG, errorFileIS);\n+    }\n+\n+    this.dispatcher.getEventHandler()\n+        .handle(new ContainerExitEvent(containerID,\n+            ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, ret,\n+            diagnosticInfo.toString()));\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleContainerExitWithFailure(ContainerId containerID, int ret,\n      Path containerLogDir, StringBuilder diagnosticInfo) {\n    LOG.warn(diagnosticInfo);\n\n    String errorFileNamePattern \u003d\n        conf.get(YarnConfiguration.NM_CONTAINER_STDERR_PATTERN,\n            YarnConfiguration.DEFAULT_NM_CONTAINER_STDERR_PATTERN);\n    FSDataInputStream errorFileIS \u003d null;\n    try {\n      FileSystem fileSystem \u003d FileSystem.getLocal(conf).getRaw();\n      FileStatus[] errorFileStatuses \u003d fileSystem\n          .globStatus(new Path(containerLogDir, errorFileNamePattern));\n      if (errorFileStatuses !\u003d null \u0026\u0026 errorFileStatuses.length !\u003d 0) {\n        long tailSizeInBytes \u003d\n            conf.getLong(YarnConfiguration.NM_CONTAINER_STDERR_BYTES,\n                YarnConfiguration.DEFAULT_NM_CONTAINER_STDERR_BYTES);\n        Path errorFile \u003d errorFileStatuses[0].getPath();\n        long fileSize \u003d errorFileStatuses[0].getLen();\n\n        // if more than one file matches the stderr pattern, take the latest\n        // modified file, and also append the file names in the diagnosticInfo\n        if (errorFileStatuses.length \u003e 1) {\n          String[] errorFileNames \u003d new String[errorFileStatuses.length];\n          long latestModifiedTime \u003d errorFileStatuses[0].getModificationTime();\n          errorFileNames[0] \u003d errorFileStatuses[0].getPath().getName();\n          for (int i \u003d 1; i \u003c errorFileStatuses.length; i++) {\n            errorFileNames[i] \u003d errorFileStatuses[i].getPath().getName();\n            if (errorFileStatuses[i]\n                .getModificationTime() \u003e latestModifiedTime) {\n              latestModifiedTime \u003d errorFileStatuses[i].getModificationTime();\n              errorFile \u003d errorFileStatuses[i].getPath();\n              fileSize \u003d errorFileStatuses[i].getLen();\n            }\n          }\n          diagnosticInfo.append(\"Error files: \")\n              .append(StringUtils.join(\", \", errorFileNames)).append(\".\\n\");\n        }\n\n        long startPosition \u003d\n            (fileSize \u003c tailSizeInBytes) ? 0 : fileSize - tailSizeInBytes;\n        int bufferSize \u003d\n            (int) ((fileSize \u003c tailSizeInBytes) ? fileSize : tailSizeInBytes);\n        byte[] tailBuffer \u003d new byte[bufferSize];\n        errorFileIS \u003d fileSystem.open(errorFile);\n        errorFileIS.readFully(startPosition, tailBuffer);\n\n        diagnosticInfo.append(\"Last \").append(tailSizeInBytes)\n            .append(\" bytes of \").append(errorFile.getName()).append(\" :\\n\")\n            .append(new String(tailBuffer, StandardCharsets.UTF_8));\n      }\n    } catch (IOException e) {\n      LOG.error(\"Failed to get tail of the container\u0027s error log file\", e);\n    } finally {\n      IOUtils.cleanup(LOG, errorFileIS);\n    }\n\n    this.dispatcher.getEventHandler()\n        .handle(new ContainerExitEvent(containerID,\n            ContainerEventType.CONTAINER_EXITED_WITH_FAILURE, ret,\n            diagnosticInfo.toString()));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java"
    }
  }
}