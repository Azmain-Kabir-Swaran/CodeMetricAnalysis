{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ResourcePluginManager.java",
  "functionName": "initializePluggableDevicePlugins",
  "functionId": "initializePluggableDevicePlugins___context-Context__configuration-Configuration__pluginMap-Map__String,ResourcePlugin__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/ResourcePluginManager.java",
  "functionStartLine": 158,
  "functionEndLine": 243,
  "numCommitsSeen": 13,
  "timeTaken": 3720,
  "changeHistory": [
    "61bdcb7b2bc3057a8fe2b9dfb2b8154a585eab87",
    "579ef4be063745c5211127eca83a393ceddc8b79",
    "63578036450f660d49ae204327efcd629d9dd137",
    "f8c72d7b3acca8285bbc3024f491c4586805be1e"
  ],
  "changeHistoryShort": {
    "61bdcb7b2bc3057a8fe2b9dfb2b8154a585eab87": "Ybodychange",
    "579ef4be063745c5211127eca83a393ceddc8b79": "Ybodychange",
    "63578036450f660d49ae204327efcd629d9dd137": "Ymultichange(Yexceptionschange,Ybodychange)",
    "f8c72d7b3acca8285bbc3024f491c4586805be1e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "61bdcb7b2bc3057a8fe2b9dfb2b8154a585eab87": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9015. [DevicePlugin] Add an interface for device plugin to provide customized scheduler. (Zhankun Tang via wangda)\n\nChange-Id: Ib2e4ae47a6f29bb3082c1f8520cf5a52ca720979\n",
      "commitDate": "12/12/18 11:44 AM",
      "commitName": "61bdcb7b2bc3057a8fe2b9dfb2b8154a585eab87",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "10/12/18 11:12 AM",
      "commitNameOld": "ac578c0e82a5ba24bf59e9e58f91a3eb65c60cfe",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 2.02,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,70 +1,86 @@\n   public void initializePluggableDevicePlugins(Context context,\n       Configuration configuration,\n       Map\u003cString, ResourcePlugin\u003e pluginMap)\n       throws YarnRuntimeException, ClassNotFoundException {\n-    LOG.info(\"The pluggable device framework enabled,\" +\n-        \"trying to load the vendor plugins\");\n-    deviceMappingManager \u003d new DeviceMappingManager(context);\n+    LOG.info(\"The pluggable device framework enabled,\"\n+        + \"trying to load the vendor plugins\");\n+    if (null \u003d\u003d deviceMappingManager) {\n+      LOG.debug(\"DeviceMappingManager initialized.\");\n+      deviceMappingManager \u003d new DeviceMappingManager(context);\n+    }\n     String[] pluginClassNames \u003d configuration.getStrings(\n         YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_DEVICE_CLASSES);\n     if (null \u003d\u003d pluginClassNames) {\n       throw new YarnRuntimeException(\"Null value found in configuration: \"\n           + YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_DEVICE_CLASSES);\n     }\n \n     for (String pluginClassName : pluginClassNames) {\n       Class\u003c?\u003e pluginClazz \u003d Class.forName(pluginClassName);\n       if (!DevicePlugin.class.isAssignableFrom(pluginClazz)) {\n         throw new YarnRuntimeException(\"Class: \" + pluginClassName\n             + \" not instance of \" + DevicePlugin.class.getCanonicalName());\n       }\n       // sanity-check before initialization\n       checkInterfaceCompatibility(DevicePlugin.class, pluginClazz);\n \n       DevicePlugin dpInstance \u003d\n           (DevicePlugin) ReflectionUtils.newInstance(\n               pluginClazz, configuration);\n \n       // Try to register plugin\n       // TODO: handle the plugin method timeout issue\n       DeviceRegisterRequest request \u003d null;\n       try {\n         request \u003d dpInstance.getRegisterRequestInfo();\n       } catch (Exception e) {\n         throw new YarnRuntimeException(\"Exception thrown from plugin\u0027s\"\n             + \" getRegisterRequestInfo:\"\n             + e.getMessage());\n       }\n       String resourceName \u003d request.getResourceName();\n       // check if someone has already registered this resource type name\n       if (pluginMap.containsKey(resourceName)) {\n         throw new YarnRuntimeException(resourceName\n             + \" already registered! Please change resource type name\"\n             + \" or configure correct resource type name\"\n             + \" in resource-types.xml for \"\n             + pluginClassName);\n       }\n       // check resource name is valid and configured in resource-types.xml\n       if (!isConfiguredResourceName(resourceName)) {\n         throw new YarnRuntimeException(resourceName\n             + \" is not configured inside \"\n             + YarnConfiguration.RESOURCE_TYPES_CONFIGURATION_FILE\n             + \" , please configure it first\");\n       }\n       LOG.info(\"New resource type: {} registered successfully by {}\",\n           resourceName,\n           pluginClassName);\n       DevicePluginAdapter pluginAdapter \u003d new DevicePluginAdapter(\n           resourceName, dpInstance, deviceMappingManager);\n       LOG.info(\"Adapter of {} created. Initializing..\", pluginClassName);\n       try {\n         pluginAdapter.initialize(context);\n       } catch (YarnException e) {\n         throw new YarnRuntimeException(\"Adapter of \"\n             + pluginClassName + \" init failed!\");\n       }\n       LOG.info(\"Adapter of {} init success!\", pluginClassName);\n       // Store plugin as adapter instance\n       pluginMap.put(request.getResourceName(), pluginAdapter);\n+      // If the device plugin implements DevicePluginScheduler interface\n+      if (dpInstance instanceof DevicePluginScheduler) {\n+        // check DevicePluginScheduler interface compatibility\n+        checkInterfaceCompatibility(DevicePluginScheduler.class, pluginClazz);\n+        LOG.info(\n+            \"{} can schedule {} devices.\"\n+                + \"Added as preferred device plugin scheduler\",\n+            pluginClassName,\n+            resourceName);\n+        deviceMappingManager.addDevicePluginScheduler(\n+            resourceName,\n+            (DevicePluginScheduler) dpInstance);\n+      }\n     } // end for\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initializePluggableDevicePlugins(Context context,\n      Configuration configuration,\n      Map\u003cString, ResourcePlugin\u003e pluginMap)\n      throws YarnRuntimeException, ClassNotFoundException {\n    LOG.info(\"The pluggable device framework enabled,\"\n        + \"trying to load the vendor plugins\");\n    if (null \u003d\u003d deviceMappingManager) {\n      LOG.debug(\"DeviceMappingManager initialized.\");\n      deviceMappingManager \u003d new DeviceMappingManager(context);\n    }\n    String[] pluginClassNames \u003d configuration.getStrings(\n        YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_DEVICE_CLASSES);\n    if (null \u003d\u003d pluginClassNames) {\n      throw new YarnRuntimeException(\"Null value found in configuration: \"\n          + YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_DEVICE_CLASSES);\n    }\n\n    for (String pluginClassName : pluginClassNames) {\n      Class\u003c?\u003e pluginClazz \u003d Class.forName(pluginClassName);\n      if (!DevicePlugin.class.isAssignableFrom(pluginClazz)) {\n        throw new YarnRuntimeException(\"Class: \" + pluginClassName\n            + \" not instance of \" + DevicePlugin.class.getCanonicalName());\n      }\n      // sanity-check before initialization\n      checkInterfaceCompatibility(DevicePlugin.class, pluginClazz);\n\n      DevicePlugin dpInstance \u003d\n          (DevicePlugin) ReflectionUtils.newInstance(\n              pluginClazz, configuration);\n\n      // Try to register plugin\n      // TODO: handle the plugin method timeout issue\n      DeviceRegisterRequest request \u003d null;\n      try {\n        request \u003d dpInstance.getRegisterRequestInfo();\n      } catch (Exception e) {\n        throw new YarnRuntimeException(\"Exception thrown from plugin\u0027s\"\n            + \" getRegisterRequestInfo:\"\n            + e.getMessage());\n      }\n      String resourceName \u003d request.getResourceName();\n      // check if someone has already registered this resource type name\n      if (pluginMap.containsKey(resourceName)) {\n        throw new YarnRuntimeException(resourceName\n            + \" already registered! Please change resource type name\"\n            + \" or configure correct resource type name\"\n            + \" in resource-types.xml for \"\n            + pluginClassName);\n      }\n      // check resource name is valid and configured in resource-types.xml\n      if (!isConfiguredResourceName(resourceName)) {\n        throw new YarnRuntimeException(resourceName\n            + \" is not configured inside \"\n            + YarnConfiguration.RESOURCE_TYPES_CONFIGURATION_FILE\n            + \" , please configure it first\");\n      }\n      LOG.info(\"New resource type: {} registered successfully by {}\",\n          resourceName,\n          pluginClassName);\n      DevicePluginAdapter pluginAdapter \u003d new DevicePluginAdapter(\n          resourceName, dpInstance, deviceMappingManager);\n      LOG.info(\"Adapter of {} created. Initializing..\", pluginClassName);\n      try {\n        pluginAdapter.initialize(context);\n      } catch (YarnException e) {\n        throw new YarnRuntimeException(\"Adapter of \"\n            + pluginClassName + \" init failed!\");\n      }\n      LOG.info(\"Adapter of {} init success!\", pluginClassName);\n      // Store plugin as adapter instance\n      pluginMap.put(request.getResourceName(), pluginAdapter);\n      // If the device plugin implements DevicePluginScheduler interface\n      if (dpInstance instanceof DevicePluginScheduler) {\n        // check DevicePluginScheduler interface compatibility\n        checkInterfaceCompatibility(DevicePluginScheduler.class, pluginClazz);\n        LOG.info(\n            \"{} can schedule {} devices.\"\n                + \"Added as preferred device plugin scheduler\",\n            pluginClassName,\n            resourceName);\n        deviceMappingManager.addDevicePluginScheduler(\n            resourceName,\n            (DevicePluginScheduler) dpInstance);\n      }\n    } // end for\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/ResourcePluginManager.java",
      "extendedDetails": {}
    },
    "579ef4be063745c5211127eca83a393ceddc8b79": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8882. [YARN-8851] Add a shared device mapping manager (scheduler) for device plugins. (Zhankun Tang via wangda)\n\nChange-Id: I9435136642c3d556971a357bf687f69df90bb45e\n",
      "commitDate": "28/11/18 2:09 PM",
      "commitName": "579ef4be063745c5211127eca83a393ceddc8b79",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "19/11/18 8:54 AM",
      "commitNameOld": "63578036450f660d49ae204327efcd629d9dd137",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 9.22,
      "commitsBetweenForRepo": 66,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,70 +1,70 @@\n   public void initializePluggableDevicePlugins(Context context,\n       Configuration configuration,\n       Map\u003cString, ResourcePlugin\u003e pluginMap)\n       throws YarnRuntimeException, ClassNotFoundException {\n     LOG.info(\"The pluggable device framework enabled,\" +\n         \"trying to load the vendor plugins\");\n-\n+    deviceMappingManager \u003d new DeviceMappingManager(context);\n     String[] pluginClassNames \u003d configuration.getStrings(\n         YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_DEVICE_CLASSES);\n     if (null \u003d\u003d pluginClassNames) {\n       throw new YarnRuntimeException(\"Null value found in configuration: \"\n           + YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_DEVICE_CLASSES);\n     }\n \n     for (String pluginClassName : pluginClassNames) {\n       Class\u003c?\u003e pluginClazz \u003d Class.forName(pluginClassName);\n       if (!DevicePlugin.class.isAssignableFrom(pluginClazz)) {\n         throw new YarnRuntimeException(\"Class: \" + pluginClassName\n             + \" not instance of \" + DevicePlugin.class.getCanonicalName());\n       }\n       // sanity-check before initialization\n       checkInterfaceCompatibility(DevicePlugin.class, pluginClazz);\n \n       DevicePlugin dpInstance \u003d\n           (DevicePlugin) ReflectionUtils.newInstance(\n               pluginClazz, configuration);\n \n       // Try to register plugin\n       // TODO: handle the plugin method timeout issue\n       DeviceRegisterRequest request \u003d null;\n       try {\n         request \u003d dpInstance.getRegisterRequestInfo();\n       } catch (Exception e) {\n         throw new YarnRuntimeException(\"Exception thrown from plugin\u0027s\"\n             + \" getRegisterRequestInfo:\"\n             + e.getMessage());\n       }\n       String resourceName \u003d request.getResourceName();\n       // check if someone has already registered this resource type name\n       if (pluginMap.containsKey(resourceName)) {\n         throw new YarnRuntimeException(resourceName\n             + \" already registered! Please change resource type name\"\n             + \" or configure correct resource type name\"\n             + \" in resource-types.xml for \"\n             + pluginClassName);\n       }\n       // check resource name is valid and configured in resource-types.xml\n       if (!isConfiguredResourceName(resourceName)) {\n         throw new YarnRuntimeException(resourceName\n             + \" is not configured inside \"\n             + YarnConfiguration.RESOURCE_TYPES_CONFIGURATION_FILE\n             + \" , please configure it first\");\n       }\n       LOG.info(\"New resource type: {} registered successfully by {}\",\n           resourceName,\n           pluginClassName);\n       DevicePluginAdapter pluginAdapter \u003d new DevicePluginAdapter(\n-          resourceName, dpInstance);\n+          resourceName, dpInstance, deviceMappingManager);\n       LOG.info(\"Adapter of {} created. Initializing..\", pluginClassName);\n       try {\n         pluginAdapter.initialize(context);\n       } catch (YarnException e) {\n         throw new YarnRuntimeException(\"Adapter of \"\n             + pluginClassName + \" init failed!\");\n       }\n       LOG.info(\"Adapter of {} init success!\", pluginClassName);\n       // Store plugin as adapter instance\n       pluginMap.put(request.getResourceName(), pluginAdapter);\n     } // end for\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initializePluggableDevicePlugins(Context context,\n      Configuration configuration,\n      Map\u003cString, ResourcePlugin\u003e pluginMap)\n      throws YarnRuntimeException, ClassNotFoundException {\n    LOG.info(\"The pluggable device framework enabled,\" +\n        \"trying to load the vendor plugins\");\n    deviceMappingManager \u003d new DeviceMappingManager(context);\n    String[] pluginClassNames \u003d configuration.getStrings(\n        YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_DEVICE_CLASSES);\n    if (null \u003d\u003d pluginClassNames) {\n      throw new YarnRuntimeException(\"Null value found in configuration: \"\n          + YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_DEVICE_CLASSES);\n    }\n\n    for (String pluginClassName : pluginClassNames) {\n      Class\u003c?\u003e pluginClazz \u003d Class.forName(pluginClassName);\n      if (!DevicePlugin.class.isAssignableFrom(pluginClazz)) {\n        throw new YarnRuntimeException(\"Class: \" + pluginClassName\n            + \" not instance of \" + DevicePlugin.class.getCanonicalName());\n      }\n      // sanity-check before initialization\n      checkInterfaceCompatibility(DevicePlugin.class, pluginClazz);\n\n      DevicePlugin dpInstance \u003d\n          (DevicePlugin) ReflectionUtils.newInstance(\n              pluginClazz, configuration);\n\n      // Try to register plugin\n      // TODO: handle the plugin method timeout issue\n      DeviceRegisterRequest request \u003d null;\n      try {\n        request \u003d dpInstance.getRegisterRequestInfo();\n      } catch (Exception e) {\n        throw new YarnRuntimeException(\"Exception thrown from plugin\u0027s\"\n            + \" getRegisterRequestInfo:\"\n            + e.getMessage());\n      }\n      String resourceName \u003d request.getResourceName();\n      // check if someone has already registered this resource type name\n      if (pluginMap.containsKey(resourceName)) {\n        throw new YarnRuntimeException(resourceName\n            + \" already registered! Please change resource type name\"\n            + \" or configure correct resource type name\"\n            + \" in resource-types.xml for \"\n            + pluginClassName);\n      }\n      // check resource name is valid and configured in resource-types.xml\n      if (!isConfiguredResourceName(resourceName)) {\n        throw new YarnRuntimeException(resourceName\n            + \" is not configured inside \"\n            + YarnConfiguration.RESOURCE_TYPES_CONFIGURATION_FILE\n            + \" , please configure it first\");\n      }\n      LOG.info(\"New resource type: {} registered successfully by {}\",\n          resourceName,\n          pluginClassName);\n      DevicePluginAdapter pluginAdapter \u003d new DevicePluginAdapter(\n          resourceName, dpInstance, deviceMappingManager);\n      LOG.info(\"Adapter of {} created. Initializing..\", pluginClassName);\n      try {\n        pluginAdapter.initialize(context);\n      } catch (YarnException e) {\n        throw new YarnRuntimeException(\"Adapter of \"\n            + pluginClassName + \" init failed!\");\n      }\n      LOG.info(\"Adapter of {} init success!\", pluginClassName);\n      // Store plugin as adapter instance\n      pluginMap.put(request.getResourceName(), pluginAdapter);\n    } // end for\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/ResourcePluginManager.java",
      "extendedDetails": {}
    },
    "63578036450f660d49ae204327efcd629d9dd137": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-8881. [YARN-8851] Add basic pluggable device plugin framework. (Zhankun Tang via wangda)\n\nChange-Id: If9a2f68cd4713b4ec932cdeda68106f17437c3d3\n",
      "commitDate": "19/11/18 8:54 AM",
      "commitName": "63578036450f660d49ae204327efcd629d9dd137",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-8881. [YARN-8851] Add basic pluggable device plugin framework. (Zhankun Tang via wangda)\n\nChange-Id: If9a2f68cd4713b4ec932cdeda68106f17437c3d3\n",
          "commitDate": "19/11/18 8:54 AM",
          "commitName": "63578036450f660d49ae204327efcd629d9dd137",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "07/11/18 8:23 PM",
          "commitNameOld": "f8c72d7b3acca8285bbc3024f491c4586805be1e",
          "commitAuthorOld": "Weiwei Yang",
          "daysBetweenCommits": 11.52,
          "commitsBetweenForRepo": 77,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,70 @@\n   public void initializePluggableDevicePlugins(Context context,\n       Configuration configuration,\n       Map\u003cString, ResourcePlugin\u003e pluginMap)\n-      throws YarnRuntimeException {\n+      throws YarnRuntimeException, ClassNotFoundException {\n     LOG.info(\"The pluggable device framework enabled,\" +\n         \"trying to load the vendor plugins\");\n \n     String[] pluginClassNames \u003d configuration.getStrings(\n         YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_DEVICE_CLASSES);\n     if (null \u003d\u003d pluginClassNames) {\n       throw new YarnRuntimeException(\"Null value found in configuration: \"\n           + YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_DEVICE_CLASSES);\n     }\n+\n+    for (String pluginClassName : pluginClassNames) {\n+      Class\u003c?\u003e pluginClazz \u003d Class.forName(pluginClassName);\n+      if (!DevicePlugin.class.isAssignableFrom(pluginClazz)) {\n+        throw new YarnRuntimeException(\"Class: \" + pluginClassName\n+            + \" not instance of \" + DevicePlugin.class.getCanonicalName());\n+      }\n+      // sanity-check before initialization\n+      checkInterfaceCompatibility(DevicePlugin.class, pluginClazz);\n+\n+      DevicePlugin dpInstance \u003d\n+          (DevicePlugin) ReflectionUtils.newInstance(\n+              pluginClazz, configuration);\n+\n+      // Try to register plugin\n+      // TODO: handle the plugin method timeout issue\n+      DeviceRegisterRequest request \u003d null;\n+      try {\n+        request \u003d dpInstance.getRegisterRequestInfo();\n+      } catch (Exception e) {\n+        throw new YarnRuntimeException(\"Exception thrown from plugin\u0027s\"\n+            + \" getRegisterRequestInfo:\"\n+            + e.getMessage());\n+      }\n+      String resourceName \u003d request.getResourceName();\n+      // check if someone has already registered this resource type name\n+      if (pluginMap.containsKey(resourceName)) {\n+        throw new YarnRuntimeException(resourceName\n+            + \" already registered! Please change resource type name\"\n+            + \" or configure correct resource type name\"\n+            + \" in resource-types.xml for \"\n+            + pluginClassName);\n+      }\n+      // check resource name is valid and configured in resource-types.xml\n+      if (!isConfiguredResourceName(resourceName)) {\n+        throw new YarnRuntimeException(resourceName\n+            + \" is not configured inside \"\n+            + YarnConfiguration.RESOURCE_TYPES_CONFIGURATION_FILE\n+            + \" , please configure it first\");\n+      }\n+      LOG.info(\"New resource type: {} registered successfully by {}\",\n+          resourceName,\n+          pluginClassName);\n+      DevicePluginAdapter pluginAdapter \u003d new DevicePluginAdapter(\n+          resourceName, dpInstance);\n+      LOG.info(\"Adapter of {} created. Initializing..\", pluginClassName);\n+      try {\n+        pluginAdapter.initialize(context);\n+      } catch (YarnException e) {\n+        throw new YarnRuntimeException(\"Adapter of \"\n+            + pluginClassName + \" init failed!\");\n+      }\n+      LOG.info(\"Adapter of {} init success!\", pluginClassName);\n+      // Store plugin as adapter instance\n+      pluginMap.put(request.getResourceName(), pluginAdapter);\n+    } // end for\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void initializePluggableDevicePlugins(Context context,\n      Configuration configuration,\n      Map\u003cString, ResourcePlugin\u003e pluginMap)\n      throws YarnRuntimeException, ClassNotFoundException {\n    LOG.info(\"The pluggable device framework enabled,\" +\n        \"trying to load the vendor plugins\");\n\n    String[] pluginClassNames \u003d configuration.getStrings(\n        YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_DEVICE_CLASSES);\n    if (null \u003d\u003d pluginClassNames) {\n      throw new YarnRuntimeException(\"Null value found in configuration: \"\n          + YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_DEVICE_CLASSES);\n    }\n\n    for (String pluginClassName : pluginClassNames) {\n      Class\u003c?\u003e pluginClazz \u003d Class.forName(pluginClassName);\n      if (!DevicePlugin.class.isAssignableFrom(pluginClazz)) {\n        throw new YarnRuntimeException(\"Class: \" + pluginClassName\n            + \" not instance of \" + DevicePlugin.class.getCanonicalName());\n      }\n      // sanity-check before initialization\n      checkInterfaceCompatibility(DevicePlugin.class, pluginClazz);\n\n      DevicePlugin dpInstance \u003d\n          (DevicePlugin) ReflectionUtils.newInstance(\n              pluginClazz, configuration);\n\n      // Try to register plugin\n      // TODO: handle the plugin method timeout issue\n      DeviceRegisterRequest request \u003d null;\n      try {\n        request \u003d dpInstance.getRegisterRequestInfo();\n      } catch (Exception e) {\n        throw new YarnRuntimeException(\"Exception thrown from plugin\u0027s\"\n            + \" getRegisterRequestInfo:\"\n            + e.getMessage());\n      }\n      String resourceName \u003d request.getResourceName();\n      // check if someone has already registered this resource type name\n      if (pluginMap.containsKey(resourceName)) {\n        throw new YarnRuntimeException(resourceName\n            + \" already registered! Please change resource type name\"\n            + \" or configure correct resource type name\"\n            + \" in resource-types.xml for \"\n            + pluginClassName);\n      }\n      // check resource name is valid and configured in resource-types.xml\n      if (!isConfiguredResourceName(resourceName)) {\n        throw new YarnRuntimeException(resourceName\n            + \" is not configured inside \"\n            + YarnConfiguration.RESOURCE_TYPES_CONFIGURATION_FILE\n            + \" , please configure it first\");\n      }\n      LOG.info(\"New resource type: {} registered successfully by {}\",\n          resourceName,\n          pluginClassName);\n      DevicePluginAdapter pluginAdapter \u003d new DevicePluginAdapter(\n          resourceName, dpInstance);\n      LOG.info(\"Adapter of {} created. Initializing..\", pluginClassName);\n      try {\n        pluginAdapter.initialize(context);\n      } catch (YarnException e) {\n        throw new YarnRuntimeException(\"Adapter of \"\n            + pluginClassName + \" init failed!\");\n      }\n      LOG.info(\"Adapter of {} init success!\", pluginClassName);\n      // Store plugin as adapter instance\n      pluginMap.put(request.getResourceName(), pluginAdapter);\n    } // end for\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/ResourcePluginManager.java",
          "extendedDetails": {
            "oldValue": "[YarnRuntimeException]",
            "newValue": "[YarnRuntimeException, ClassNotFoundException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8881. [YARN-8851] Add basic pluggable device plugin framework. (Zhankun Tang via wangda)\n\nChange-Id: If9a2f68cd4713b4ec932cdeda68106f17437c3d3\n",
          "commitDate": "19/11/18 8:54 AM",
          "commitName": "63578036450f660d49ae204327efcd629d9dd137",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "07/11/18 8:23 PM",
          "commitNameOld": "f8c72d7b3acca8285bbc3024f491c4586805be1e",
          "commitAuthorOld": "Weiwei Yang",
          "daysBetweenCommits": 11.52,
          "commitsBetweenForRepo": 77,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,70 @@\n   public void initializePluggableDevicePlugins(Context context,\n       Configuration configuration,\n       Map\u003cString, ResourcePlugin\u003e pluginMap)\n-      throws YarnRuntimeException {\n+      throws YarnRuntimeException, ClassNotFoundException {\n     LOG.info(\"The pluggable device framework enabled,\" +\n         \"trying to load the vendor plugins\");\n \n     String[] pluginClassNames \u003d configuration.getStrings(\n         YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_DEVICE_CLASSES);\n     if (null \u003d\u003d pluginClassNames) {\n       throw new YarnRuntimeException(\"Null value found in configuration: \"\n           + YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_DEVICE_CLASSES);\n     }\n+\n+    for (String pluginClassName : pluginClassNames) {\n+      Class\u003c?\u003e pluginClazz \u003d Class.forName(pluginClassName);\n+      if (!DevicePlugin.class.isAssignableFrom(pluginClazz)) {\n+        throw new YarnRuntimeException(\"Class: \" + pluginClassName\n+            + \" not instance of \" + DevicePlugin.class.getCanonicalName());\n+      }\n+      // sanity-check before initialization\n+      checkInterfaceCompatibility(DevicePlugin.class, pluginClazz);\n+\n+      DevicePlugin dpInstance \u003d\n+          (DevicePlugin) ReflectionUtils.newInstance(\n+              pluginClazz, configuration);\n+\n+      // Try to register plugin\n+      // TODO: handle the plugin method timeout issue\n+      DeviceRegisterRequest request \u003d null;\n+      try {\n+        request \u003d dpInstance.getRegisterRequestInfo();\n+      } catch (Exception e) {\n+        throw new YarnRuntimeException(\"Exception thrown from plugin\u0027s\"\n+            + \" getRegisterRequestInfo:\"\n+            + e.getMessage());\n+      }\n+      String resourceName \u003d request.getResourceName();\n+      // check if someone has already registered this resource type name\n+      if (pluginMap.containsKey(resourceName)) {\n+        throw new YarnRuntimeException(resourceName\n+            + \" already registered! Please change resource type name\"\n+            + \" or configure correct resource type name\"\n+            + \" in resource-types.xml for \"\n+            + pluginClassName);\n+      }\n+      // check resource name is valid and configured in resource-types.xml\n+      if (!isConfiguredResourceName(resourceName)) {\n+        throw new YarnRuntimeException(resourceName\n+            + \" is not configured inside \"\n+            + YarnConfiguration.RESOURCE_TYPES_CONFIGURATION_FILE\n+            + \" , please configure it first\");\n+      }\n+      LOG.info(\"New resource type: {} registered successfully by {}\",\n+          resourceName,\n+          pluginClassName);\n+      DevicePluginAdapter pluginAdapter \u003d new DevicePluginAdapter(\n+          resourceName, dpInstance);\n+      LOG.info(\"Adapter of {} created. Initializing..\", pluginClassName);\n+      try {\n+        pluginAdapter.initialize(context);\n+      } catch (YarnException e) {\n+        throw new YarnRuntimeException(\"Adapter of \"\n+            + pluginClassName + \" init failed!\");\n+      }\n+      LOG.info(\"Adapter of {} init success!\", pluginClassName);\n+      // Store plugin as adapter instance\n+      pluginMap.put(request.getResourceName(), pluginAdapter);\n+    } // end for\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void initializePluggableDevicePlugins(Context context,\n      Configuration configuration,\n      Map\u003cString, ResourcePlugin\u003e pluginMap)\n      throws YarnRuntimeException, ClassNotFoundException {\n    LOG.info(\"The pluggable device framework enabled,\" +\n        \"trying to load the vendor plugins\");\n\n    String[] pluginClassNames \u003d configuration.getStrings(\n        YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_DEVICE_CLASSES);\n    if (null \u003d\u003d pluginClassNames) {\n      throw new YarnRuntimeException(\"Null value found in configuration: \"\n          + YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_DEVICE_CLASSES);\n    }\n\n    for (String pluginClassName : pluginClassNames) {\n      Class\u003c?\u003e pluginClazz \u003d Class.forName(pluginClassName);\n      if (!DevicePlugin.class.isAssignableFrom(pluginClazz)) {\n        throw new YarnRuntimeException(\"Class: \" + pluginClassName\n            + \" not instance of \" + DevicePlugin.class.getCanonicalName());\n      }\n      // sanity-check before initialization\n      checkInterfaceCompatibility(DevicePlugin.class, pluginClazz);\n\n      DevicePlugin dpInstance \u003d\n          (DevicePlugin) ReflectionUtils.newInstance(\n              pluginClazz, configuration);\n\n      // Try to register plugin\n      // TODO: handle the plugin method timeout issue\n      DeviceRegisterRequest request \u003d null;\n      try {\n        request \u003d dpInstance.getRegisterRequestInfo();\n      } catch (Exception e) {\n        throw new YarnRuntimeException(\"Exception thrown from plugin\u0027s\"\n            + \" getRegisterRequestInfo:\"\n            + e.getMessage());\n      }\n      String resourceName \u003d request.getResourceName();\n      // check if someone has already registered this resource type name\n      if (pluginMap.containsKey(resourceName)) {\n        throw new YarnRuntimeException(resourceName\n            + \" already registered! Please change resource type name\"\n            + \" or configure correct resource type name\"\n            + \" in resource-types.xml for \"\n            + pluginClassName);\n      }\n      // check resource name is valid and configured in resource-types.xml\n      if (!isConfiguredResourceName(resourceName)) {\n        throw new YarnRuntimeException(resourceName\n            + \" is not configured inside \"\n            + YarnConfiguration.RESOURCE_TYPES_CONFIGURATION_FILE\n            + \" , please configure it first\");\n      }\n      LOG.info(\"New resource type: {} registered successfully by {}\",\n          resourceName,\n          pluginClassName);\n      DevicePluginAdapter pluginAdapter \u003d new DevicePluginAdapter(\n          resourceName, dpInstance);\n      LOG.info(\"Adapter of {} created. Initializing..\", pluginClassName);\n      try {\n        pluginAdapter.initialize(context);\n      } catch (YarnException e) {\n        throw new YarnRuntimeException(\"Adapter of \"\n            + pluginClassName + \" init failed!\");\n      }\n      LOG.info(\"Adapter of {} init success!\", pluginClassName);\n      // Store plugin as adapter instance\n      pluginMap.put(request.getResourceName(), pluginAdapter);\n    } // end for\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/ResourcePluginManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "f8c72d7b3acca8285bbc3024f491c4586805be1e": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8880. Add configurations for pluggable plugin framework. Contributed by Zhankun Tang.\n",
      "commitDate": "07/11/18 8:23 PM",
      "commitName": "f8c72d7b3acca8285bbc3024f491c4586805be1e",
      "commitAuthor": "Weiwei Yang",
      "diff": "@@ -0,0 +1,14 @@\n+  public void initializePluggableDevicePlugins(Context context,\n+      Configuration configuration,\n+      Map\u003cString, ResourcePlugin\u003e pluginMap)\n+      throws YarnRuntimeException {\n+    LOG.info(\"The pluggable device framework enabled,\" +\n+        \"trying to load the vendor plugins\");\n+\n+    String[] pluginClassNames \u003d configuration.getStrings(\n+        YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_DEVICE_CLASSES);\n+    if (null \u003d\u003d pluginClassNames) {\n+      throw new YarnRuntimeException(\"Null value found in configuration: \"\n+          + YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_DEVICE_CLASSES);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void initializePluggableDevicePlugins(Context context,\n      Configuration configuration,\n      Map\u003cString, ResourcePlugin\u003e pluginMap)\n      throws YarnRuntimeException {\n    LOG.info(\"The pluggable device framework enabled,\" +\n        \"trying to load the vendor plugins\");\n\n    String[] pluginClassNames \u003d configuration.getStrings(\n        YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_DEVICE_CLASSES);\n    if (null \u003d\u003d pluginClassNames) {\n      throw new YarnRuntimeException(\"Null value found in configuration: \"\n          + YarnConfiguration.NM_PLUGGABLE_DEVICE_FRAMEWORK_DEVICE_CLASSES);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/ResourcePluginManager.java"
    }
  }
}