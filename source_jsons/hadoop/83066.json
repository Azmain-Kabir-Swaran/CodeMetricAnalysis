{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "StatsDSink.java",
  "functionName": "putMetrics",
  "functionId": "putMetrics___record-MetricsRecord",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/sink/StatsDSink.java",
  "functionStartLine": 97,
  "functionEndLine": 147,
  "numCommitsSeen": 4,
  "timeTaken": 979,
  "changeHistory": [
    "fb8932a727f757b2e9c1c61a18145878d0eb77bd",
    "c39ddc306d7efd93332fc1062ff4c9b59e94f3e1"
  ],
  "changeHistoryShort": {
    "fb8932a727f757b2e9c1c61a18145878d0eb77bd": "Ybodychange",
    "c39ddc306d7efd93332fc1062ff4c9b59e94f3e1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "fb8932a727f757b2e9c1c61a18145878d0eb77bd": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16029. Consecutive StringBuilder.append can be reused. Contributed by Ayush Saxena.\n",
      "commitDate": "11/01/19 10:54 AM",
      "commitName": "fb8932a727f757b2e9c1c61a18145878d0eb77bd",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "10/10/18 9:51 PM",
      "commitNameOld": "7b57f2f71fbaa5af4897309597cca70a95b04edd",
      "commitAuthorOld": "Takanobu Asanuma",
      "daysBetweenCommits": 92.59,
      "commitsBetweenForRepo": 680,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,51 @@\n   public void putMetrics(MetricsRecord record) {\n \n     String hn \u003d hostName;\n     String ctx \u003d record.context();\n     String sn \u003d serviceName;\n \n     for (MetricsTag tag : record.tags()) {\n       if (tag.info().name().equals(MsInfo.Hostname.name())\n           \u0026\u0026 tag.value() !\u003d null) {\n         hn \u003d tag.value();\n       } else if (tag.info().name().equals(MsInfo.Context.name())\n           \u0026\u0026 tag.value() !\u003d null) {\n         ctx \u003d tag.value();\n       } else if (tag.info().name().equals(MsInfo.ProcessName.name())\n           \u0026\u0026 tag.value() !\u003d null) {\n         sn \u003d tag.value();\n       }\n     }\n \n     StringBuilder buf \u003d new StringBuilder();\n     if (!skipHostname \u0026\u0026 hn !\u003d null) {\n       int idx \u003d hn.indexOf(\".\");\n       if (idx \u003d\u003d -1) {\n         buf.append(hn).append(PERIOD);\n       } else {\n         buf.append(hn.substring(0, idx)).append(PERIOD);\n       }\n     }\n-    buf.append(sn).append(PERIOD);\n-    buf.append(ctx).append(PERIOD);\n-    buf.append(record.name().replaceAll(\"\\\\.\", \"-\")).append(PERIOD);\n+    buf.append(sn).append(PERIOD)\n+        .append(ctx).append(PERIOD)\n+        .append(record.name().replaceAll(\"\\\\.\", \"-\")).append(PERIOD);\n \n     // Collect datapoints.\n     for (AbstractMetric metric : record.metrics()) {\n       String type \u003d null;\n       if (metric.type().equals(MetricType.COUNTER)) {\n         type \u003d \"c\";\n       } else if (metric.type().equals(MetricType.GAUGE)) {\n         type \u003d \"g\";\n       }\n       StringBuilder line \u003d new StringBuilder();\n       line.append(buf.toString())\n           .append(metric.name().replace(\u0027 \u0027, \u0027_\u0027))\n           .append(\":\")\n           .append(metric.value())\n           .append(\"|\")\n           .append(type);\n       writeMetric(line.toString());\n     }\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void putMetrics(MetricsRecord record) {\n\n    String hn \u003d hostName;\n    String ctx \u003d record.context();\n    String sn \u003d serviceName;\n\n    for (MetricsTag tag : record.tags()) {\n      if (tag.info().name().equals(MsInfo.Hostname.name())\n          \u0026\u0026 tag.value() !\u003d null) {\n        hn \u003d tag.value();\n      } else if (tag.info().name().equals(MsInfo.Context.name())\n          \u0026\u0026 tag.value() !\u003d null) {\n        ctx \u003d tag.value();\n      } else if (tag.info().name().equals(MsInfo.ProcessName.name())\n          \u0026\u0026 tag.value() !\u003d null) {\n        sn \u003d tag.value();\n      }\n    }\n\n    StringBuilder buf \u003d new StringBuilder();\n    if (!skipHostname \u0026\u0026 hn !\u003d null) {\n      int idx \u003d hn.indexOf(\".\");\n      if (idx \u003d\u003d -1) {\n        buf.append(hn).append(PERIOD);\n      } else {\n        buf.append(hn.substring(0, idx)).append(PERIOD);\n      }\n    }\n    buf.append(sn).append(PERIOD)\n        .append(ctx).append(PERIOD)\n        .append(record.name().replaceAll(\"\\\\.\", \"-\")).append(PERIOD);\n\n    // Collect datapoints.\n    for (AbstractMetric metric : record.metrics()) {\n      String type \u003d null;\n      if (metric.type().equals(MetricType.COUNTER)) {\n        type \u003d \"c\";\n      } else if (metric.type().equals(MetricType.GAUGE)) {\n        type \u003d \"g\";\n      }\n      StringBuilder line \u003d new StringBuilder();\n      line.append(buf.toString())\n          .append(metric.name().replace(\u0027 \u0027, \u0027_\u0027))\n          .append(\":\")\n          .append(metric.value())\n          .append(\"|\")\n          .append(type);\n      writeMetric(line.toString());\n    }\n\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/sink/StatsDSink.java",
      "extendedDetails": {}
    },
    "c39ddc306d7efd93332fc1062ff4c9b59e94f3e1": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-12360. Create StatsD metrics2 sink. (Dave Marion via stevel)\n",
      "commitDate": "19/09/15 4:41 AM",
      "commitName": "c39ddc306d7efd93332fc1062ff4c9b59e94f3e1",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,51 @@\n+  public void putMetrics(MetricsRecord record) {\n+\n+    String hn \u003d hostName;\n+    String ctx \u003d record.context();\n+    String sn \u003d serviceName;\n+\n+    for (MetricsTag tag : record.tags()) {\n+      if (tag.info().name().equals(MsInfo.Hostname.name())\n+          \u0026\u0026 tag.value() !\u003d null) {\n+        hn \u003d tag.value();\n+      } else if (tag.info().name().equals(MsInfo.Context.name())\n+          \u0026\u0026 tag.value() !\u003d null) {\n+        ctx \u003d tag.value();\n+      } else if (tag.info().name().equals(MsInfo.ProcessName.name())\n+          \u0026\u0026 tag.value() !\u003d null) {\n+        sn \u003d tag.value();\n+      }\n+    }\n+\n+    StringBuilder buf \u003d new StringBuilder();\n+    if (!skipHostname \u0026\u0026 hn !\u003d null) {\n+      int idx \u003d hn.indexOf(\".\");\n+      if (idx \u003d\u003d -1) {\n+        buf.append(hn).append(PERIOD);\n+      } else {\n+        buf.append(hn.substring(0, idx)).append(PERIOD);\n+      }\n+    }\n+    buf.append(sn).append(PERIOD);\n+    buf.append(ctx).append(PERIOD);\n+    buf.append(record.name().replaceAll(\"\\\\.\", \"-\")).append(PERIOD);\n+\n+    // Collect datapoints.\n+    for (AbstractMetric metric : record.metrics()) {\n+      String type \u003d null;\n+      if (metric.type().equals(MetricType.COUNTER)) {\n+        type \u003d \"c\";\n+      } else if (metric.type().equals(MetricType.GAUGE)) {\n+        type \u003d \"g\";\n+      }\n+      StringBuilder line \u003d new StringBuilder();\n+      line.append(buf.toString())\n+          .append(metric.name().replace(\u0027 \u0027, \u0027_\u0027))\n+          .append(\":\")\n+          .append(metric.value())\n+          .append(\"|\")\n+          .append(type);\n+      writeMetric(line.toString());\n+    }\n+\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void putMetrics(MetricsRecord record) {\n\n    String hn \u003d hostName;\n    String ctx \u003d record.context();\n    String sn \u003d serviceName;\n\n    for (MetricsTag tag : record.tags()) {\n      if (tag.info().name().equals(MsInfo.Hostname.name())\n          \u0026\u0026 tag.value() !\u003d null) {\n        hn \u003d tag.value();\n      } else if (tag.info().name().equals(MsInfo.Context.name())\n          \u0026\u0026 tag.value() !\u003d null) {\n        ctx \u003d tag.value();\n      } else if (tag.info().name().equals(MsInfo.ProcessName.name())\n          \u0026\u0026 tag.value() !\u003d null) {\n        sn \u003d tag.value();\n      }\n    }\n\n    StringBuilder buf \u003d new StringBuilder();\n    if (!skipHostname \u0026\u0026 hn !\u003d null) {\n      int idx \u003d hn.indexOf(\".\");\n      if (idx \u003d\u003d -1) {\n        buf.append(hn).append(PERIOD);\n      } else {\n        buf.append(hn.substring(0, idx)).append(PERIOD);\n      }\n    }\n    buf.append(sn).append(PERIOD);\n    buf.append(ctx).append(PERIOD);\n    buf.append(record.name().replaceAll(\"\\\\.\", \"-\")).append(PERIOD);\n\n    // Collect datapoints.\n    for (AbstractMetric metric : record.metrics()) {\n      String type \u003d null;\n      if (metric.type().equals(MetricType.COUNTER)) {\n        type \u003d \"c\";\n      } else if (metric.type().equals(MetricType.GAUGE)) {\n        type \u003d \"g\";\n      }\n      StringBuilder line \u003d new StringBuilder();\n      line.append(buf.toString())\n          .append(metric.name().replace(\u0027 \u0027, \u0027_\u0027))\n          .append(\":\")\n          .append(metric.value())\n          .append(\"|\")\n          .append(type);\n      writeMetric(line.toString());\n    }\n\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/sink/StatsDSink.java"
    }
  }
}