{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DelegationTokenRenewer.java",
  "functionName": "addApplicationAsync",
  "functionId": "addApplicationAsync___applicationId-ApplicationId__ts-Credentials__shouldCancelAtEnd-boolean__user-String__tokenConf-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/DelegationTokenRenewer.java",
  "functionStartLine": 424,
  "functionEndLine": 428,
  "numCommitsSeen": 103,
  "timeTaken": 6533,
  "changeHistory": [
    "69fa81679f59378fd19a2c65db8019393d7c05a2",
    "a16d022ca4313a41425c8e97841c841a2d6f2f54",
    "4de17c60528cb29bf7306dbaa720b96063948b17",
    "512475e56f0a27bf3c3ff596184f96993bb4bef4",
    "f35983b8056b7bd9ac4685acabef53f4dd0e355e",
    "5d679c4f43494eb4508edebc6cc5aa4ddc5a63d2",
    "a806a2aac6c955e35b930d677523637bf016ff7a",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "6733a1ca5ef741d3bdf886f301954e9a9e7a875f",
    "29c6c3ed328965a73fe7b68eb29cb30794beef38"
  ],
  "changeHistoryShort": {
    "69fa81679f59378fd19a2c65db8019393d7c05a2": "Ymultichange(Yparameterchange,Ybodychange)",
    "a16d022ca4313a41425c8e97841c841a2d6f2f54": "Ymultichange(Yparameterchange,Ybodychange)",
    "4de17c60528cb29bf7306dbaa720b96063948b17": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
    "512475e56f0a27bf3c3ff596184f96993bb4bef4": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
    "f35983b8056b7bd9ac4685acabef53f4dd0e355e": "Ybodychange",
    "5d679c4f43494eb4508edebc6cc5aa4ddc5a63d2": "Ymodifierchange",
    "a806a2aac6c955e35b930d677523637bf016ff7a": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "6733a1ca5ef741d3bdf886f301954e9a9e7a875f": "Ymultichange(Yparameterchange,Ybodychange)",
    "29c6c3ed328965a73fe7b68eb29cb30794beef38": "Yintroduced"
  },
  "changeHistoryDetails": {
    "69fa81679f59378fd19a2c65db8019393d7c05a2": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5910. Support for multi-cluster delegation tokens. Contributed by Jian He\n",
      "commitDate": "23/01/17 9:12 AM",
      "commitName": "69fa81679f59378fd19a2c65db8019393d7c05a2",
      "commitAuthor": "Jason Lowe",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5910. Support for multi-cluster delegation tokens. Contributed by Jian He\n",
          "commitDate": "23/01/17 9:12 AM",
          "commitName": "69fa81679f59378fd19a2c65db8019393d7c05a2",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "12/07/16 7:25 PM",
          "commitNameOld": "06c56ff79b4cdf82f733498d3edfa0b6e531a2db",
          "commitAuthorOld": "Varun Saxena",
          "daysBetweenCommits": 194.62,
          "commitsBetweenForRepo": 1287,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,5 +1,5 @@\n   public void addApplicationAsync(ApplicationId applicationId, Credentials ts,\n-      boolean shouldCancelAtEnd, String user) {\n+      boolean shouldCancelAtEnd, String user, Configuration tokenConf) {\n     processDelegationTokenRenewerEvent(new DelegationTokenRenewerAppSubmitEvent(\n-      applicationId, ts, shouldCancelAtEnd, user));\n+      applicationId, ts, shouldCancelAtEnd, user, tokenConf));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void addApplicationAsync(ApplicationId applicationId, Credentials ts,\n      boolean shouldCancelAtEnd, String user, Configuration tokenConf) {\n    processDelegationTokenRenewerEvent(new DelegationTokenRenewerAppSubmitEvent(\n      applicationId, ts, shouldCancelAtEnd, user, tokenConf));\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/DelegationTokenRenewer.java",
          "extendedDetails": {
            "oldValue": "[applicationId-ApplicationId, ts-Credentials, shouldCancelAtEnd-boolean, user-String]",
            "newValue": "[applicationId-ApplicationId, ts-Credentials, shouldCancelAtEnd-boolean, user-String, tokenConf-Configuration]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5910. Support for multi-cluster delegation tokens. Contributed by Jian He\n",
          "commitDate": "23/01/17 9:12 AM",
          "commitName": "69fa81679f59378fd19a2c65db8019393d7c05a2",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "12/07/16 7:25 PM",
          "commitNameOld": "06c56ff79b4cdf82f733498d3edfa0b6e531a2db",
          "commitAuthorOld": "Varun Saxena",
          "daysBetweenCommits": 194.62,
          "commitsBetweenForRepo": 1287,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,5 +1,5 @@\n   public void addApplicationAsync(ApplicationId applicationId, Credentials ts,\n-      boolean shouldCancelAtEnd, String user) {\n+      boolean shouldCancelAtEnd, String user, Configuration tokenConf) {\n     processDelegationTokenRenewerEvent(new DelegationTokenRenewerAppSubmitEvent(\n-      applicationId, ts, shouldCancelAtEnd, user));\n+      applicationId, ts, shouldCancelAtEnd, user, tokenConf));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void addApplicationAsync(ApplicationId applicationId, Credentials ts,\n      boolean shouldCancelAtEnd, String user, Configuration tokenConf) {\n    processDelegationTokenRenewerEvent(new DelegationTokenRenewerAppSubmitEvent(\n      applicationId, ts, shouldCancelAtEnd, user, tokenConf));\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/DelegationTokenRenewer.java",
          "extendedDetails": {}
        }
      ]
    },
    "a16d022ca4313a41425c8e97841c841a2d6f2f54": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-2704. Changed ResourceManager to optionally obtain tokens itself for the sake of localization and log-aggregation for long-running services. Contributed by Jian He.\n",
      "commitDate": "27/10/14 3:49 PM",
      "commitName": "a16d022ca4313a41425c8e97841c841a2d6f2f54",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-2704. Changed ResourceManager to optionally obtain tokens itself for the sake of localization and log-aggregation for long-running services. Contributed by Jian He.\n",
          "commitDate": "27/10/14 3:49 PM",
          "commitName": "a16d022ca4313a41425c8e97841c841a2d6f2f54",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "29/08/14 11:16 AM",
          "commitNameOld": "3de66011c2e80d7c458a67f80042af986fcc677d",
          "commitAuthorOld": "Hitesh Shah",
          "daysBetweenCommits": 59.19,
          "commitsBetweenForRepo": 586,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,5 +1,5 @@\n   public void addApplicationAsync(ApplicationId applicationId, Credentials ts,\n-      boolean shouldCancelAtEnd) {\n+      boolean shouldCancelAtEnd, String user) {\n     processDelegationTokenRenewerEvent(new DelegationTokenRenewerAppSubmitEvent(\n-      applicationId, ts, shouldCancelAtEnd));\n+      applicationId, ts, shouldCancelAtEnd, user));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void addApplicationAsync(ApplicationId applicationId, Credentials ts,\n      boolean shouldCancelAtEnd, String user) {\n    processDelegationTokenRenewerEvent(new DelegationTokenRenewerAppSubmitEvent(\n      applicationId, ts, shouldCancelAtEnd, user));\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/DelegationTokenRenewer.java",
          "extendedDetails": {
            "oldValue": "[applicationId-ApplicationId, ts-Credentials, shouldCancelAtEnd-boolean]",
            "newValue": "[applicationId-ApplicationId, ts-Credentials, shouldCancelAtEnd-boolean, user-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2704. Changed ResourceManager to optionally obtain tokens itself for the sake of localization and log-aggregation for long-running services. Contributed by Jian He.\n",
          "commitDate": "27/10/14 3:49 PM",
          "commitName": "a16d022ca4313a41425c8e97841c841a2d6f2f54",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "29/08/14 11:16 AM",
          "commitNameOld": "3de66011c2e80d7c458a67f80042af986fcc677d",
          "commitAuthorOld": "Hitesh Shah",
          "daysBetweenCommits": 59.19,
          "commitsBetweenForRepo": 586,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,5 +1,5 @@\n   public void addApplicationAsync(ApplicationId applicationId, Credentials ts,\n-      boolean shouldCancelAtEnd) {\n+      boolean shouldCancelAtEnd, String user) {\n     processDelegationTokenRenewerEvent(new DelegationTokenRenewerAppSubmitEvent(\n-      applicationId, ts, shouldCancelAtEnd));\n+      applicationId, ts, shouldCancelAtEnd, user));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void addApplicationAsync(ApplicationId applicationId, Credentials ts,\n      boolean shouldCancelAtEnd, String user) {\n    processDelegationTokenRenewerEvent(new DelegationTokenRenewerAppSubmitEvent(\n      applicationId, ts, shouldCancelAtEnd, user));\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/DelegationTokenRenewer.java",
          "extendedDetails": {}
        }
      ]
    },
    "4de17c60528cb29bf7306dbaa720b96063948b17": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-1812. Fixed ResourceManager to synchrously renew tokens after recovery and thus recover app itself synchronously and avoid races with resyncing NodeManagers. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1576843 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/03/14 11:25 AM",
      "commitName": "4de17c60528cb29bf7306dbaa720b96063948b17",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-1812. Fixed ResourceManager to synchrously renew tokens after recovery and thus recover app itself synchronously and avoid races with resyncing NodeManagers. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1576843 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/03/14 11:25 AM",
          "commitName": "4de17c60528cb29bf7306dbaa720b96063948b17",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "18/11/13 9:20 PM",
          "commitNameOld": "512475e56f0a27bf3c3ff596184f96993bb4bef4",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 113.54,
          "commitsBetweenForRepo": 797,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,7 +1,5 @@\n-  public void addApplication(\n-      ApplicationId applicationId, Credentials ts, boolean shouldCancelAtEnd,\n-      boolean isApplicationRecovered) {\n-    processDelegationTokenRewewerEvent(new DelegationTokenRenewerAppSubmitEvent(\n-        applicationId, ts,\n-        shouldCancelAtEnd, isApplicationRecovered));\n+  public void addApplicationAsync(ApplicationId applicationId, Credentials ts,\n+      boolean shouldCancelAtEnd) {\n+    processDelegationTokenRenewerEvent(new DelegationTokenRenewerAppSubmitEvent(\n+      applicationId, ts, shouldCancelAtEnd));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void addApplicationAsync(ApplicationId applicationId, Credentials ts,\n      boolean shouldCancelAtEnd) {\n    processDelegationTokenRenewerEvent(new DelegationTokenRenewerAppSubmitEvent(\n      applicationId, ts, shouldCancelAtEnd));\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/DelegationTokenRenewer.java",
          "extendedDetails": {
            "oldValue": "addApplication",
            "newValue": "addApplicationAsync"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-1812. Fixed ResourceManager to synchrously renew tokens after recovery and thus recover app itself synchronously and avoid races with resyncing NodeManagers. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1576843 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/03/14 11:25 AM",
          "commitName": "4de17c60528cb29bf7306dbaa720b96063948b17",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "18/11/13 9:20 PM",
          "commitNameOld": "512475e56f0a27bf3c3ff596184f96993bb4bef4",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 113.54,
          "commitsBetweenForRepo": 797,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,7 +1,5 @@\n-  public void addApplication(\n-      ApplicationId applicationId, Credentials ts, boolean shouldCancelAtEnd,\n-      boolean isApplicationRecovered) {\n-    processDelegationTokenRewewerEvent(new DelegationTokenRenewerAppSubmitEvent(\n-        applicationId, ts,\n-        shouldCancelAtEnd, isApplicationRecovered));\n+  public void addApplicationAsync(ApplicationId applicationId, Credentials ts,\n+      boolean shouldCancelAtEnd) {\n+    processDelegationTokenRenewerEvent(new DelegationTokenRenewerAppSubmitEvent(\n+      applicationId, ts, shouldCancelAtEnd));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void addApplicationAsync(ApplicationId applicationId, Credentials ts,\n      boolean shouldCancelAtEnd) {\n    processDelegationTokenRenewerEvent(new DelegationTokenRenewerAppSubmitEvent(\n      applicationId, ts, shouldCancelAtEnd));\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/DelegationTokenRenewer.java",
          "extendedDetails": {
            "oldValue": "[applicationId-ApplicationId, ts-Credentials, shouldCancelAtEnd-boolean, isApplicationRecovered-boolean]",
            "newValue": "[applicationId-ApplicationId, ts-Credentials, shouldCancelAtEnd-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1812. Fixed ResourceManager to synchrously renew tokens after recovery and thus recover app itself synchronously and avoid races with resyncing NodeManagers. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1576843 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "12/03/14 11:25 AM",
          "commitName": "4de17c60528cb29bf7306dbaa720b96063948b17",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "18/11/13 9:20 PM",
          "commitNameOld": "512475e56f0a27bf3c3ff596184f96993bb4bef4",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 113.54,
          "commitsBetweenForRepo": 797,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,7 +1,5 @@\n-  public void addApplication(\n-      ApplicationId applicationId, Credentials ts, boolean shouldCancelAtEnd,\n-      boolean isApplicationRecovered) {\n-    processDelegationTokenRewewerEvent(new DelegationTokenRenewerAppSubmitEvent(\n-        applicationId, ts,\n-        shouldCancelAtEnd, isApplicationRecovered));\n+  public void addApplicationAsync(ApplicationId applicationId, Credentials ts,\n+      boolean shouldCancelAtEnd) {\n+    processDelegationTokenRenewerEvent(new DelegationTokenRenewerAppSubmitEvent(\n+      applicationId, ts, shouldCancelAtEnd));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void addApplicationAsync(ApplicationId applicationId, Credentials ts,\n      boolean shouldCancelAtEnd) {\n    processDelegationTokenRenewerEvent(new DelegationTokenRenewerAppSubmitEvent(\n      applicationId, ts, shouldCancelAtEnd));\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/DelegationTokenRenewer.java",
          "extendedDetails": {}
        }
      ]
    },
    "512475e56f0a27bf3c3ff596184f96993bb4bef4": {
      "type": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-674. Fixed ResourceManager to renew DelegationTokens on submission asynchronously to work around potential slowness in state-store. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1543312 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/11/13 9:20 PM",
      "commitName": "512475e56f0a27bf3c3ff596184f96993bb4bef4",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-674. Fixed ResourceManager to renew DelegationTokens on submission asynchronously to work around potential slowness in state-store. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1543312 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/11/13 9:20 PM",
          "commitName": "512475e56f0a27bf3c3ff596184f96993bb4bef4",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "06/09/13 10:43 PM",
          "commitNameOld": "f35983b8056b7bd9ac4685acabef53f4dd0e355e",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 72.98,
          "commitsBetweenForRepo": 462,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,7 @@\n   public void addApplication(\n-      ApplicationId applicationId, Credentials ts, boolean shouldCancelAtEnd)\n-      throws IOException {\n-    if (ts \u003d\u003d null) {\n-      return; //nothing to add\n-    }\n-    \n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Registering tokens for renewal for:\" + \n-          \" appId \u003d \" + applicationId);\n-    }\n-    \n-    Collection \u003cToken\u003c?\u003e\u003e tokens \u003d ts.getAllTokens();\n-    long now \u003d System.currentTimeMillis();\n-    \n-    // find tokens for renewal, but don\u0027t add timers until we know\n-    // all renewable tokens are valid\n-    // At RM restart it is safe to assume that all the previously added tokens\n-    // are valid\n-    List\u003cDelegationTokenToRenew\u003e tokenList \u003d\n-        new ArrayList\u003cDelegationTokenRenewer.DelegationTokenToRenew\u003e();\n-    for(Token\u003c?\u003e token : tokens) {\n-      if (token.isManaged()) {\n-        tokenList.add(new DelegationTokenToRenew(applicationId,\n-            token, getConfig(), now, shouldCancelAtEnd));\n-      }\n-    }\n-    if (!tokenList.isEmpty()){\n-      renewIfServiceIsStarted(tokenList);\n-    }\n+      ApplicationId applicationId, Credentials ts, boolean shouldCancelAtEnd,\n+      boolean isApplicationRecovered) {\n+    processDelegationTokenRewewerEvent(new DelegationTokenRenewerAppSubmitEvent(\n+        applicationId, ts,\n+        shouldCancelAtEnd, isApplicationRecovered));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void addApplication(\n      ApplicationId applicationId, Credentials ts, boolean shouldCancelAtEnd,\n      boolean isApplicationRecovered) {\n    processDelegationTokenRewewerEvent(new DelegationTokenRenewerAppSubmitEvent(\n        applicationId, ts,\n        shouldCancelAtEnd, isApplicationRecovered));\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/DelegationTokenRenewer.java",
          "extendedDetails": {
            "oldValue": "[applicationId-ApplicationId, ts-Credentials, shouldCancelAtEnd-boolean]",
            "newValue": "[applicationId-ApplicationId, ts-Credentials, shouldCancelAtEnd-boolean, isApplicationRecovered-boolean]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-674. Fixed ResourceManager to renew DelegationTokens on submission asynchronously to work around potential slowness in state-store. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1543312 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/11/13 9:20 PM",
          "commitName": "512475e56f0a27bf3c3ff596184f96993bb4bef4",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "06/09/13 10:43 PM",
          "commitNameOld": "f35983b8056b7bd9ac4685acabef53f4dd0e355e",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 72.98,
          "commitsBetweenForRepo": 462,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,7 @@\n   public void addApplication(\n-      ApplicationId applicationId, Credentials ts, boolean shouldCancelAtEnd)\n-      throws IOException {\n-    if (ts \u003d\u003d null) {\n-      return; //nothing to add\n-    }\n-    \n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Registering tokens for renewal for:\" + \n-          \" appId \u003d \" + applicationId);\n-    }\n-    \n-    Collection \u003cToken\u003c?\u003e\u003e tokens \u003d ts.getAllTokens();\n-    long now \u003d System.currentTimeMillis();\n-    \n-    // find tokens for renewal, but don\u0027t add timers until we know\n-    // all renewable tokens are valid\n-    // At RM restart it is safe to assume that all the previously added tokens\n-    // are valid\n-    List\u003cDelegationTokenToRenew\u003e tokenList \u003d\n-        new ArrayList\u003cDelegationTokenRenewer.DelegationTokenToRenew\u003e();\n-    for(Token\u003c?\u003e token : tokens) {\n-      if (token.isManaged()) {\n-        tokenList.add(new DelegationTokenToRenew(applicationId,\n-            token, getConfig(), now, shouldCancelAtEnd));\n-      }\n-    }\n-    if (!tokenList.isEmpty()){\n-      renewIfServiceIsStarted(tokenList);\n-    }\n+      ApplicationId applicationId, Credentials ts, boolean shouldCancelAtEnd,\n+      boolean isApplicationRecovered) {\n+    processDelegationTokenRewewerEvent(new DelegationTokenRenewerAppSubmitEvent(\n+        applicationId, ts,\n+        shouldCancelAtEnd, isApplicationRecovered));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void addApplication(\n      ApplicationId applicationId, Credentials ts, boolean shouldCancelAtEnd,\n      boolean isApplicationRecovered) {\n    processDelegationTokenRewewerEvent(new DelegationTokenRenewerAppSubmitEvent(\n        applicationId, ts,\n        shouldCancelAtEnd, isApplicationRecovered));\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/DelegationTokenRenewer.java",
          "extendedDetails": {
            "oldValue": "[IOException]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-674. Fixed ResourceManager to renew DelegationTokens on submission asynchronously to work around potential slowness in state-store. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1543312 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/11/13 9:20 PM",
          "commitName": "512475e56f0a27bf3c3ff596184f96993bb4bef4",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "06/09/13 10:43 PM",
          "commitNameOld": "f35983b8056b7bd9ac4685acabef53f4dd0e355e",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 72.98,
          "commitsBetweenForRepo": 462,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,7 @@\n   public void addApplication(\n-      ApplicationId applicationId, Credentials ts, boolean shouldCancelAtEnd)\n-      throws IOException {\n-    if (ts \u003d\u003d null) {\n-      return; //nothing to add\n-    }\n-    \n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Registering tokens for renewal for:\" + \n-          \" appId \u003d \" + applicationId);\n-    }\n-    \n-    Collection \u003cToken\u003c?\u003e\u003e tokens \u003d ts.getAllTokens();\n-    long now \u003d System.currentTimeMillis();\n-    \n-    // find tokens for renewal, but don\u0027t add timers until we know\n-    // all renewable tokens are valid\n-    // At RM restart it is safe to assume that all the previously added tokens\n-    // are valid\n-    List\u003cDelegationTokenToRenew\u003e tokenList \u003d\n-        new ArrayList\u003cDelegationTokenRenewer.DelegationTokenToRenew\u003e();\n-    for(Token\u003c?\u003e token : tokens) {\n-      if (token.isManaged()) {\n-        tokenList.add(new DelegationTokenToRenew(applicationId,\n-            token, getConfig(), now, shouldCancelAtEnd));\n-      }\n-    }\n-    if (!tokenList.isEmpty()){\n-      renewIfServiceIsStarted(tokenList);\n-    }\n+      ApplicationId applicationId, Credentials ts, boolean shouldCancelAtEnd,\n+      boolean isApplicationRecovered) {\n+    processDelegationTokenRewewerEvent(new DelegationTokenRenewerAppSubmitEvent(\n+        applicationId, ts,\n+        shouldCancelAtEnd, isApplicationRecovered));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void addApplication(\n      ApplicationId applicationId, Credentials ts, boolean shouldCancelAtEnd,\n      boolean isApplicationRecovered) {\n    processDelegationTokenRewewerEvent(new DelegationTokenRenewerAppSubmitEvent(\n        applicationId, ts,\n        shouldCancelAtEnd, isApplicationRecovered));\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/DelegationTokenRenewer.java",
          "extendedDetails": {}
        }
      ]
    },
    "f35983b8056b7bd9ac4685acabef53f4dd0e355e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1107. Fixed a bug in ResourceManager because of which RM in secure mode fails to restart. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1520726 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/09/13 10:43 PM",
      "commitName": "f35983b8056b7bd9ac4685acabef53f4dd0e355e",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "16/06/13 11:39 PM",
      "commitNameOld": "b9efe6bd4a1277b4067ecde715a7713a85968886",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 81.96,
      "commitsBetweenForRepo": 473,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,31 @@\n   public void addApplication(\n-      ApplicationId applicationId, Credentials ts, boolean shouldCancelAtEnd) \n-  throws IOException {\n+      ApplicationId applicationId, Credentials ts, boolean shouldCancelAtEnd)\n+      throws IOException {\n     if (ts \u003d\u003d null) {\n       return; //nothing to add\n     }\n     \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Registering tokens for renewal for:\" + \n           \" appId \u003d \" + applicationId);\n     }\n     \n     Collection \u003cToken\u003c?\u003e\u003e tokens \u003d ts.getAllTokens();\n     long now \u003d System.currentTimeMillis();\n     \n     // find tokens for renewal, but don\u0027t add timers until we know\n     // all renewable tokens are valid\n-    Set\u003cDelegationTokenToRenew\u003e dtrs \u003d new HashSet\u003cDelegationTokenToRenew\u003e();\n+    // At RM restart it is safe to assume that all the previously added tokens\n+    // are valid\n+    List\u003cDelegationTokenToRenew\u003e tokenList \u003d\n+        new ArrayList\u003cDelegationTokenRenewer.DelegationTokenToRenew\u003e();\n     for(Token\u003c?\u003e token : tokens) {\n-      // first renew happens immediately\n       if (token.isManaged()) {\n-        DelegationTokenToRenew dtr \u003d \n-          new DelegationTokenToRenew(applicationId, token, getConfig(), now, \n-              shouldCancelAtEnd); \n-        renewToken(dtr);\n-        dtrs.add(dtr);\n+        tokenList.add(new DelegationTokenToRenew(applicationId,\n+            token, getConfig(), now, shouldCancelAtEnd));\n       }\n     }\n-    for (DelegationTokenToRenew dtr : dtrs) {\n-      addTokenToList(dtr);\n-      setTimerForTokenRenewal(dtr);\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Registering token for renewal for:\" +\n-            \" service \u003d \" + dtr.token.getService() +\n-            \" for appId \u003d \" + applicationId);\n-      }\n+    if (!tokenList.isEmpty()){\n+      renewIfServiceIsStarted(tokenList);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void addApplication(\n      ApplicationId applicationId, Credentials ts, boolean shouldCancelAtEnd)\n      throws IOException {\n    if (ts \u003d\u003d null) {\n      return; //nothing to add\n    }\n    \n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Registering tokens for renewal for:\" + \n          \" appId \u003d \" + applicationId);\n    }\n    \n    Collection \u003cToken\u003c?\u003e\u003e tokens \u003d ts.getAllTokens();\n    long now \u003d System.currentTimeMillis();\n    \n    // find tokens for renewal, but don\u0027t add timers until we know\n    // all renewable tokens are valid\n    // At RM restart it is safe to assume that all the previously added tokens\n    // are valid\n    List\u003cDelegationTokenToRenew\u003e tokenList \u003d\n        new ArrayList\u003cDelegationTokenRenewer.DelegationTokenToRenew\u003e();\n    for(Token\u003c?\u003e token : tokens) {\n      if (token.isManaged()) {\n        tokenList.add(new DelegationTokenToRenew(applicationId,\n            token, getConfig(), now, shouldCancelAtEnd));\n      }\n    }\n    if (!tokenList.isEmpty()){\n      renewIfServiceIsStarted(tokenList);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/DelegationTokenRenewer.java",
      "extendedDetails": {}
    },
    "5d679c4f43494eb4508edebc6cc5aa4ddc5a63d2": {
      "type": "Ymodifierchange",
      "commitMessage": "YARN-360. Allow apps to concurrently register tokens for renewal. Contributed by Daryn Sharp.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1442441 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/02/13 4:26 PM",
      "commitName": "5d679c4f43494eb4508edebc6cc5aa4ddc5a63d2",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "21/12/12 10:49 AM",
      "commitNameOld": "a806a2aac6c955e35b930d677523637bf016ff7a",
      "commitAuthorOld": "Thomas Graves",
      "daysBetweenCommits": 45.23,
      "commitsBetweenForRepo": 201,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n-  public synchronized void addApplication(\n+  public void addApplication(\n       ApplicationId applicationId, Credentials ts, boolean shouldCancelAtEnd) \n   throws IOException {\n     if (ts \u003d\u003d null) {\n       return; //nothing to add\n     }\n     \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Registering tokens for renewal for:\" + \n           \" appId \u003d \" + applicationId);\n     }\n     \n     Collection \u003cToken\u003c?\u003e\u003e tokens \u003d ts.getAllTokens();\n     long now \u003d System.currentTimeMillis();\n     \n     // find tokens for renewal, but don\u0027t add timers until we know\n     // all renewable tokens are valid\n     Set\u003cDelegationTokenToRenew\u003e dtrs \u003d new HashSet\u003cDelegationTokenToRenew\u003e();\n     for(Token\u003c?\u003e token : tokens) {\n       // first renew happens immediately\n       if (token.isManaged()) {\n         DelegationTokenToRenew dtr \u003d \n           new DelegationTokenToRenew(applicationId, token, getConfig(), now, \n               shouldCancelAtEnd); \n         renewToken(dtr);\n         dtrs.add(dtr);\n       }\n     }\n     for (DelegationTokenToRenew dtr : dtrs) {\n       addTokenToList(dtr);\n       setTimerForTokenRenewal(dtr);\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Registering token for renewal for:\" +\n             \" service \u003d \" + dtr.token.getService() +\n             \" for appId \u003d \" + applicationId);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void addApplication(\n      ApplicationId applicationId, Credentials ts, boolean shouldCancelAtEnd) \n  throws IOException {\n    if (ts \u003d\u003d null) {\n      return; //nothing to add\n    }\n    \n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Registering tokens for renewal for:\" + \n          \" appId \u003d \" + applicationId);\n    }\n    \n    Collection \u003cToken\u003c?\u003e\u003e tokens \u003d ts.getAllTokens();\n    long now \u003d System.currentTimeMillis();\n    \n    // find tokens for renewal, but don\u0027t add timers until we know\n    // all renewable tokens are valid\n    Set\u003cDelegationTokenToRenew\u003e dtrs \u003d new HashSet\u003cDelegationTokenToRenew\u003e();\n    for(Token\u003c?\u003e token : tokens) {\n      // first renew happens immediately\n      if (token.isManaged()) {\n        DelegationTokenToRenew dtr \u003d \n          new DelegationTokenToRenew(applicationId, token, getConfig(), now, \n              shouldCancelAtEnd); \n        renewToken(dtr);\n        dtrs.add(dtr);\n      }\n    }\n    for (DelegationTokenToRenew dtr : dtrs) {\n      addTokenToList(dtr);\n      setTimerForTokenRenewal(dtr);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Registering token for renewal for:\" +\n            \" service \u003d \" + dtr.token.getService() +\n            \" for appId \u003d \" + applicationId);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/DelegationTokenRenewer.java",
      "extendedDetails": {
        "oldValue": "[public, synchronized]",
        "newValue": "[public]"
      }
    },
    "a806a2aac6c955e35b930d677523637bf016ff7a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-280. RM does not reject app submission with invalid tokens (Daryn Sharp via tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1425079 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/12/12 10:49 AM",
      "commitName": "a806a2aac6c955e35b930d677523637bf016ff7a",
      "commitAuthor": "Thomas Graves",
      "commitDateOld": "13/12/12 2:16 PM",
      "commitNameOld": "be8ef2ec33c6206bfb92734315961b6e3eb51fd0",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 7.86,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,38 @@\n   public synchronized void addApplication(\n       ApplicationId applicationId, Credentials ts, boolean shouldCancelAtEnd) \n   throws IOException {\n     if (ts \u003d\u003d null) {\n       return; //nothing to add\n     }\n     \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Registering tokens for renewal for:\" + \n           \" appId \u003d \" + applicationId);\n     }\n     \n     Collection \u003cToken\u003c?\u003e\u003e tokens \u003d ts.getAllTokens();\n     long now \u003d System.currentTimeMillis();\n     \n+    // find tokens for renewal, but don\u0027t add timers until we know\n+    // all renewable tokens are valid\n+    Set\u003cDelegationTokenToRenew\u003e dtrs \u003d new HashSet\u003cDelegationTokenToRenew\u003e();\n     for(Token\u003c?\u003e token : tokens) {\n       // first renew happens immediately\n       if (token.isManaged()) {\n         DelegationTokenToRenew dtr \u003d \n           new DelegationTokenToRenew(applicationId, token, getConfig(), now, \n               shouldCancelAtEnd); \n-\n-        addTokenToList(dtr);\n-      \n-        setTimerForTokenRenewal(dtr, true);\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Registering token for renewal for:\" +\n-              \" service \u003d \" + token.getService() + \n-              \" for appId \u003d \" + applicationId);\n-        }\n+        renewToken(dtr);\n+        dtrs.add(dtr);\n+      }\n+    }\n+    for (DelegationTokenToRenew dtr : dtrs) {\n+      addTokenToList(dtr);\n+      setTimerForTokenRenewal(dtr);\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Registering token for renewal for:\" +\n+            \" service \u003d \" + dtr.token.getService() +\n+            \" for appId \u003d \" + applicationId);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void addApplication(\n      ApplicationId applicationId, Credentials ts, boolean shouldCancelAtEnd) \n  throws IOException {\n    if (ts \u003d\u003d null) {\n      return; //nothing to add\n    }\n    \n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Registering tokens for renewal for:\" + \n          \" appId \u003d \" + applicationId);\n    }\n    \n    Collection \u003cToken\u003c?\u003e\u003e tokens \u003d ts.getAllTokens();\n    long now \u003d System.currentTimeMillis();\n    \n    // find tokens for renewal, but don\u0027t add timers until we know\n    // all renewable tokens are valid\n    Set\u003cDelegationTokenToRenew\u003e dtrs \u003d new HashSet\u003cDelegationTokenToRenew\u003e();\n    for(Token\u003c?\u003e token : tokens) {\n      // first renew happens immediately\n      if (token.isManaged()) {\n        DelegationTokenToRenew dtr \u003d \n          new DelegationTokenToRenew(applicationId, token, getConfig(), now, \n              shouldCancelAtEnd); \n        renewToken(dtr);\n        dtrs.add(dtr);\n      }\n    }\n    for (DelegationTokenToRenew dtr : dtrs) {\n      addTokenToList(dtr);\n      setTimerForTokenRenewal(dtr);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Registering token for renewal for:\" +\n            \" service \u003d \" + dtr.token.getService() +\n            \" for appId \u003d \" + applicationId);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/DelegationTokenRenewer.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized void addApplication(\n      ApplicationId applicationId, Credentials ts, boolean shouldCancelAtEnd) \n  throws IOException {\n    if (ts \u003d\u003d null) {\n      return; //nothing to add\n    }\n    \n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Registering tokens for renewal for:\" + \n          \" appId \u003d \" + applicationId);\n    }\n    \n    Collection \u003cToken\u003c?\u003e\u003e tokens \u003d ts.getAllTokens();\n    long now \u003d System.currentTimeMillis();\n    \n    for(Token\u003c?\u003e token : tokens) {\n      // first renew happens immediately\n      if (token.isManaged()) {\n        DelegationTokenToRenew dtr \u003d \n          new DelegationTokenToRenew(applicationId, token, getConfig(), now, \n              shouldCancelAtEnd); \n\n        addTokenToList(dtr);\n      \n        setTimerForTokenRenewal(dtr, true);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Registering token for renewal for:\" +\n              \" service \u003d \" + token.getService() + \n              \" for appId \u003d \" + applicationId);\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/DelegationTokenRenewer.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/DelegationTokenRenewer.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/DelegationTokenRenewer.java"
      }
    },
    "6733a1ca5ef741d3bdf886f301954e9a9e7a875f": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-3291. App fail to launch due to delegation token not found in cache (Robert Evans via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1198583 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/11/11 2:58 PM",
      "commitName": "6733a1ca5ef741d3bdf886f301954e9a9e7a875f",
      "commitAuthor": "Mahadev Konar",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-3291. App fail to launch due to delegation token not found in cache (Robert Evans via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1198583 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "06/11/11 2:58 PM",
          "commitName": "6733a1ca5ef741d3bdf886f301954e9a9e7a875f",
          "commitAuthor": "Mahadev Konar",
          "commitDateOld": "25/10/11 7:53 PM",
          "commitNameOld": "29c6c3ed328965a73fe7b68eb29cb30794beef38",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 11.84,
          "commitsBetweenForRepo": 128,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,33 @@\n   public synchronized void addApplication(\n-      ApplicationId applicationId, Credentials ts) \n+      ApplicationId applicationId, Credentials ts, boolean shouldCancelAtEnd) \n   throws IOException {\n     if (ts \u003d\u003d null) {\n       return; //nothing to add\n     }\n     \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Registering tokens for renewal for:\" + \n           \" appId \u003d \" + applicationId);\n     }\n     \n     Collection \u003cToken\u003c?\u003e\u003e tokens \u003d ts.getAllTokens();\n     long now \u003d System.currentTimeMillis();\n     \n     for(Token\u003c?\u003e token : tokens) {\n       // first renew happens immediately\n       if (token.isManaged()) {\n         DelegationTokenToRenew dtr \u003d \n-          new DelegationTokenToRenew(applicationId, token, getConfig(), now); \n+          new DelegationTokenToRenew(applicationId, token, getConfig(), now, \n+              shouldCancelAtEnd); \n \n         addTokenToList(dtr);\n       \n         setTimerForTokenRenewal(dtr, true);\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Registering token for renewal for:\" +\n               \" service \u003d \" + token.getService() + \n               \" for appId \u003d \" + applicationId);\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void addApplication(\n      ApplicationId applicationId, Credentials ts, boolean shouldCancelAtEnd) \n  throws IOException {\n    if (ts \u003d\u003d null) {\n      return; //nothing to add\n    }\n    \n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Registering tokens for renewal for:\" + \n          \" appId \u003d \" + applicationId);\n    }\n    \n    Collection \u003cToken\u003c?\u003e\u003e tokens \u003d ts.getAllTokens();\n    long now \u003d System.currentTimeMillis();\n    \n    for(Token\u003c?\u003e token : tokens) {\n      // first renew happens immediately\n      if (token.isManaged()) {\n        DelegationTokenToRenew dtr \u003d \n          new DelegationTokenToRenew(applicationId, token, getConfig(), now, \n              shouldCancelAtEnd); \n\n        addTokenToList(dtr);\n      \n        setTimerForTokenRenewal(dtr, true);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Registering token for renewal for:\" +\n              \" service \u003d \" + token.getService() + \n              \" for appId \u003d \" + applicationId);\n        }\n      }\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/DelegationTokenRenewer.java",
          "extendedDetails": {
            "oldValue": "[applicationId-ApplicationId, ts-Credentials]",
            "newValue": "[applicationId-ApplicationId, ts-Credentials, shouldCancelAtEnd-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-3291. App fail to launch due to delegation token not found in cache (Robert Evans via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1198583 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "06/11/11 2:58 PM",
          "commitName": "6733a1ca5ef741d3bdf886f301954e9a9e7a875f",
          "commitAuthor": "Mahadev Konar",
          "commitDateOld": "25/10/11 7:53 PM",
          "commitNameOld": "29c6c3ed328965a73fe7b68eb29cb30794beef38",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 11.84,
          "commitsBetweenForRepo": 128,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,33 @@\n   public synchronized void addApplication(\n-      ApplicationId applicationId, Credentials ts) \n+      ApplicationId applicationId, Credentials ts, boolean shouldCancelAtEnd) \n   throws IOException {\n     if (ts \u003d\u003d null) {\n       return; //nothing to add\n     }\n     \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Registering tokens for renewal for:\" + \n           \" appId \u003d \" + applicationId);\n     }\n     \n     Collection \u003cToken\u003c?\u003e\u003e tokens \u003d ts.getAllTokens();\n     long now \u003d System.currentTimeMillis();\n     \n     for(Token\u003c?\u003e token : tokens) {\n       // first renew happens immediately\n       if (token.isManaged()) {\n         DelegationTokenToRenew dtr \u003d \n-          new DelegationTokenToRenew(applicationId, token, getConfig(), now); \n+          new DelegationTokenToRenew(applicationId, token, getConfig(), now, \n+              shouldCancelAtEnd); \n \n         addTokenToList(dtr);\n       \n         setTimerForTokenRenewal(dtr, true);\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Registering token for renewal for:\" +\n               \" service \u003d \" + token.getService() + \n               \" for appId \u003d \" + applicationId);\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void addApplication(\n      ApplicationId applicationId, Credentials ts, boolean shouldCancelAtEnd) \n  throws IOException {\n    if (ts \u003d\u003d null) {\n      return; //nothing to add\n    }\n    \n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Registering tokens for renewal for:\" + \n          \" appId \u003d \" + applicationId);\n    }\n    \n    Collection \u003cToken\u003c?\u003e\u003e tokens \u003d ts.getAllTokens();\n    long now \u003d System.currentTimeMillis();\n    \n    for(Token\u003c?\u003e token : tokens) {\n      // first renew happens immediately\n      if (token.isManaged()) {\n        DelegationTokenToRenew dtr \u003d \n          new DelegationTokenToRenew(applicationId, token, getConfig(), now, \n              shouldCancelAtEnd); \n\n        addTokenToList(dtr);\n      \n        setTimerForTokenRenewal(dtr, true);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Registering token for renewal for:\" +\n              \" service \u003d \" + token.getService() + \n              \" for appId \u003d \" + applicationId);\n        }\n      }\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/DelegationTokenRenewer.java",
          "extendedDetails": {}
        }
      ]
    },
    "29c6c3ed328965a73fe7b68eb29cb30794beef38": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-2977. Fix ResourceManager to renew HDFS delegation tokens for applications. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1189012 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/10/11 7:53 PM",
      "commitName": "29c6c3ed328965a73fe7b68eb29cb30794beef38",
      "commitAuthor": "Arun Murthy",
      "diff": "@@ -0,0 +1,32 @@\n+  public synchronized void addApplication(\n+      ApplicationId applicationId, Credentials ts) \n+  throws IOException {\n+    if (ts \u003d\u003d null) {\n+      return; //nothing to add\n+    }\n+    \n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Registering tokens for renewal for:\" + \n+          \" appId \u003d \" + applicationId);\n+    }\n+    \n+    Collection \u003cToken\u003c?\u003e\u003e tokens \u003d ts.getAllTokens();\n+    long now \u003d System.currentTimeMillis();\n+    \n+    for(Token\u003c?\u003e token : tokens) {\n+      // first renew happens immediately\n+      if (token.isManaged()) {\n+        DelegationTokenToRenew dtr \u003d \n+          new DelegationTokenToRenew(applicationId, token, getConfig(), now); \n+\n+        addTokenToList(dtr);\n+      \n+        setTimerForTokenRenewal(dtr, true);\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Registering token for renewal for:\" +\n+              \" service \u003d \" + token.getService() + \n+              \" for appId \u003d \" + applicationId);\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void addApplication(\n      ApplicationId applicationId, Credentials ts) \n  throws IOException {\n    if (ts \u003d\u003d null) {\n      return; //nothing to add\n    }\n    \n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Registering tokens for renewal for:\" + \n          \" appId \u003d \" + applicationId);\n    }\n    \n    Collection \u003cToken\u003c?\u003e\u003e tokens \u003d ts.getAllTokens();\n    long now \u003d System.currentTimeMillis();\n    \n    for(Token\u003c?\u003e token : tokens) {\n      // first renew happens immediately\n      if (token.isManaged()) {\n        DelegationTokenToRenew dtr \u003d \n          new DelegationTokenToRenew(applicationId, token, getConfig(), now); \n\n        addTokenToList(dtr);\n      \n        setTimerForTokenRenewal(dtr, true);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Registering token for renewal for:\" +\n              \" service \u003d \" + token.getService() + \n              \" for appId \u003d \" + applicationId);\n        }\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/DelegationTokenRenewer.java"
    }
  }
}