{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainerCleanup.java",
  "functionName": "signalProcess",
  "functionId": "signalProcess___processId-String__user-String__containerIdStr-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerCleanup.java",
  "functionStartLine": 192,
  "functionEndLine": 209,
  "numCommitsSeen": 93,
  "timeTaken": 3806,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "5ce70e1211e624d58e8bb1181aec00729ebdc085",
    "3d65dbe032e202361d613344ccc6d9c5f99ba395"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "5ce70e1211e624d58e8bb1181aec00729ebdc085": "Ymultichange(Ymovefromfile,Ybodychange)",
    "3d65dbe032e202361d613344ccc6d9c5f99ba395": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "28/01/19 3:05 PM",
      "commitNameOld": "2e636dd3c497a9f0042642296b127686012de57a",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 46.01,
      "commitsBetweenForRepo": 396,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,18 @@\n   private void signalProcess(String processId, String user,\n       String containerIdStr) throws IOException {\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Sending signal to pid \" + processId + \" as user \" + user\n-          + \" for container \" + containerIdStr);\n-    }\n+    LOG.debug(\"Sending signal to pid {} as user {} for container {}\",\n+        processId, user, containerIdStr);\n     final ContainerExecutor.Signal signal \u003d\n         sleepDelayBeforeSigKill \u003e 0 ? ContainerExecutor.Signal.TERM :\n             ContainerExecutor.Signal.KILL;\n \n     boolean result \u003d sendSignal(user, processId, signal);\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Sent signal \" + signal + \" to pid \" + processId + \" as user \"\n-          + user + \" for container \" + containerIdStr + \", result\u003d\"\n-          + (result ? \"success\" : \"failed\"));\n-    }\n+    LOG.debug(\"Sent signal {} to pid {} as user {} for container {},\"\n+        + \" result\u003d{}\", signal, processId, user, containerIdStr,\n+        (result ? \"success\" : \"failed\"));\n+\n     if (sleepDelayBeforeSigKill \u003e 0) {\n       new ContainerExecutor.DelayedProcessKiller(container, user, processId,\n           sleepDelayBeforeSigKill, ContainerExecutor.Signal.KILL, exec).start();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void signalProcess(String processId, String user,\n      String containerIdStr) throws IOException {\n    LOG.debug(\"Sending signal to pid {} as user {} for container {}\",\n        processId, user, containerIdStr);\n    final ContainerExecutor.Signal signal \u003d\n        sleepDelayBeforeSigKill \u003e 0 ? ContainerExecutor.Signal.TERM :\n            ContainerExecutor.Signal.KILL;\n\n    boolean result \u003d sendSignal(user, processId, signal);\n    LOG.debug(\"Sent signal {} to pid {} as user {} for container {},\"\n        + \" result\u003d{}\", signal, processId, user, containerIdStr,\n        (result ? \"success\" : \"failed\"));\n\n    if (sleepDelayBeforeSigKill \u003e 0) {\n      new ContainerExecutor.DelayedProcessKiller(container, user, processId,\n          sleepDelayBeforeSigKill, ContainerExecutor.Signal.KILL, exec).start();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerCleanup.java",
      "extendedDetails": {}
    },
    "5ce70e1211e624d58e8bb1181aec00729ebdc085": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "YARN-7644. NM gets backed up deleting docker containers. Contributed by Chandni Singh\n",
      "commitDate": "10/10/18 7:52 AM",
      "commitName": "5ce70e1211e624d58e8bb1181aec00729ebdc085",
      "commitAuthor": "Jason Lowe",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-7644. NM gets backed up deleting docker containers. Contributed by Chandni Singh\n",
          "commitDate": "10/10/18 7:52 AM",
          "commitName": "5ce70e1211e624d58e8bb1181aec00729ebdc085",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "10/10/18 6:28 AM",
          "commitNameOld": "cd280514b84e8a2915f274883a07f152b772ebad",
          "commitAuthorOld": "Márton Elek",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,21 @@\n   private void signalProcess(String processId, String user,\n       String containerIdStr) throws IOException {\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Sending signal to pid \" + processId + \" as user \" + user\n           + \" for container \" + containerIdStr);\n     }\n-    final Signal signal \u003d\n-        sleepDelayBeforeSigKill \u003e 0 ? Signal.TERM : Signal.KILL;\n+    final ContainerExecutor.Signal signal \u003d\n+        sleepDelayBeforeSigKill \u003e 0 ? ContainerExecutor.Signal.TERM :\n+            ContainerExecutor.Signal.KILL;\n \n     boolean result \u003d sendSignal(user, processId, signal);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Sent signal \" + signal + \" to pid \" + processId + \" as user \"\n           + user + \" for container \" + containerIdStr + \", result\u003d\"\n           + (result ? \"success\" : \"failed\"));\n     }\n     if (sleepDelayBeforeSigKill \u003e 0) {\n-      new DelayedProcessKiller(container, user, processId,\n-          sleepDelayBeforeSigKill, Signal.KILL, exec).start();\n+      new ContainerExecutor.DelayedProcessKiller(container, user, processId,\n+          sleepDelayBeforeSigKill, ContainerExecutor.Signal.KILL, exec).start();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void signalProcess(String processId, String user,\n      String containerIdStr) throws IOException {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Sending signal to pid \" + processId + \" as user \" + user\n          + \" for container \" + containerIdStr);\n    }\n    final ContainerExecutor.Signal signal \u003d\n        sleepDelayBeforeSigKill \u003e 0 ? ContainerExecutor.Signal.TERM :\n            ContainerExecutor.Signal.KILL;\n\n    boolean result \u003d sendSignal(user, processId, signal);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Sent signal \" + signal + \" to pid \" + processId + \" as user \"\n          + user + \" for container \" + containerIdStr + \", result\u003d\"\n          + (result ? \"success\" : \"failed\"));\n    }\n    if (sleepDelayBeforeSigKill \u003e 0) {\n      new ContainerExecutor.DelayedProcessKiller(container, user, processId,\n          sleepDelayBeforeSigKill, ContainerExecutor.Signal.KILL, exec).start();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerCleanup.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerCleanup.java",
            "oldMethodName": "signalProcess",
            "newMethodName": "signalProcess"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7644. NM gets backed up deleting docker containers. Contributed by Chandni Singh\n",
          "commitDate": "10/10/18 7:52 AM",
          "commitName": "5ce70e1211e624d58e8bb1181aec00729ebdc085",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "10/10/18 6:28 AM",
          "commitNameOld": "cd280514b84e8a2915f274883a07f152b772ebad",
          "commitAuthorOld": "Márton Elek",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,21 @@\n   private void signalProcess(String processId, String user,\n       String containerIdStr) throws IOException {\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Sending signal to pid \" + processId + \" as user \" + user\n           + \" for container \" + containerIdStr);\n     }\n-    final Signal signal \u003d\n-        sleepDelayBeforeSigKill \u003e 0 ? Signal.TERM : Signal.KILL;\n+    final ContainerExecutor.Signal signal \u003d\n+        sleepDelayBeforeSigKill \u003e 0 ? ContainerExecutor.Signal.TERM :\n+            ContainerExecutor.Signal.KILL;\n \n     boolean result \u003d sendSignal(user, processId, signal);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Sent signal \" + signal + \" to pid \" + processId + \" as user \"\n           + user + \" for container \" + containerIdStr + \", result\u003d\"\n           + (result ? \"success\" : \"failed\"));\n     }\n     if (sleepDelayBeforeSigKill \u003e 0) {\n-      new DelayedProcessKiller(container, user, processId,\n-          sleepDelayBeforeSigKill, Signal.KILL, exec).start();\n+      new ContainerExecutor.DelayedProcessKiller(container, user, processId,\n+          sleepDelayBeforeSigKill, ContainerExecutor.Signal.KILL, exec).start();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void signalProcess(String processId, String user,\n      String containerIdStr) throws IOException {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Sending signal to pid \" + processId + \" as user \" + user\n          + \" for container \" + containerIdStr);\n    }\n    final ContainerExecutor.Signal signal \u003d\n        sleepDelayBeforeSigKill \u003e 0 ? ContainerExecutor.Signal.TERM :\n            ContainerExecutor.Signal.KILL;\n\n    boolean result \u003d sendSignal(user, processId, signal);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Sent signal \" + signal + \" to pid \" + processId + \" as user \"\n          + user + \" for container \" + containerIdStr + \", result\u003d\"\n          + (result ? \"success\" : \"failed\"));\n    }\n    if (sleepDelayBeforeSigKill \u003e 0) {\n      new ContainerExecutor.DelayedProcessKiller(container, user, processId,\n          sleepDelayBeforeSigKill, ContainerExecutor.Signal.KILL, exec).start();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerCleanup.java",
          "extendedDetails": {}
        }
      ]
    },
    "3d65dbe032e202361d613344ccc6d9c5f99ba395": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5366. Improve signal handling and delete delay for Docker on Yarn.\n           (Contributed by Shane Kumpf)\n",
      "commitDate": "12/01/18 10:41 AM",
      "commitName": "3d65dbe032e202361d613344ccc6d9c5f99ba395",
      "commitAuthor": "Eric Yang",
      "diff": "@@ -0,0 +1,20 @@\n+  private void signalProcess(String processId, String user,\n+      String containerIdStr) throws IOException {\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Sending signal to pid \" + processId + \" as user \" + user\n+          + \" for container \" + containerIdStr);\n+    }\n+    final Signal signal \u003d\n+        sleepDelayBeforeSigKill \u003e 0 ? Signal.TERM : Signal.KILL;\n+\n+    boolean result \u003d sendSignal(user, processId, signal);\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Sent signal \" + signal + \" to pid \" + processId + \" as user \"\n+          + user + \" for container \" + containerIdStr + \", result\u003d\"\n+          + (result ? \"success\" : \"failed\"));\n+    }\n+    if (sleepDelayBeforeSigKill \u003e 0) {\n+      new DelayedProcessKiller(container, user, processId,\n+          sleepDelayBeforeSigKill, Signal.KILL, exec).start();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void signalProcess(String processId, String user,\n      String containerIdStr) throws IOException {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Sending signal to pid \" + processId + \" as user \" + user\n          + \" for container \" + containerIdStr);\n    }\n    final Signal signal \u003d\n        sleepDelayBeforeSigKill \u003e 0 ? Signal.TERM : Signal.KILL;\n\n    boolean result \u003d sendSignal(user, processId, signal);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Sent signal \" + signal + \" to pid \" + processId + \" as user \"\n          + user + \" for container \" + containerIdStr + \", result\u003d\"\n          + (result ? \"success\" : \"failed\"));\n    }\n    if (sleepDelayBeforeSigKill \u003e 0) {\n      new DelayedProcessKiller(container, user, processId,\n          sleepDelayBeforeSigKill, Signal.KILL, exec).start();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java"
    }
  }
}