{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RollingFileSystemSink.java",
  "functionName": "scheduleFlush",
  "functionId": "scheduleFlush___when-Date",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/sink/RollingFileSystemSink.java",
  "functionStartLine": 566,
  "functionEndLine": 582,
  "numCommitsSeen": 13,
  "timeTaken": 1785,
  "changeHistory": [
    "57c31a3fef625f1ec609d7e8873d4941f7ed5cbc",
    "33ce7f6c072144f55be30c66099eef5bc736405e",
    "5b59a0ea85c923384e36ad7c036e751551774142"
  ],
  "changeHistoryShort": {
    "57c31a3fef625f1ec609d7e8873d4941f7ed5cbc": "Ymultichange(Yparameterchange,Ybodychange)",
    "33ce7f6c072144f55be30c66099eef5bc736405e": "Ybodychange",
    "5b59a0ea85c923384e36ad7c036e751551774142": "Yintroduced"
  },
  "changeHistoryDetails": {
    "57c31a3fef625f1ec609d7e8873d4941f7ed5cbc": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-9782. RollingFileSystemSink should have configurable roll interval. (Daniel Templeton via kasha)\n",
      "commitDate": "24/05/16 10:37 AM",
      "commitName": "57c31a3fef625f1ec609d7e8873d4941f7ed5cbc",
      "commitAuthor": "Karthik Kambatla",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-9782. RollingFileSystemSink should have configurable roll interval. (Daniel Templeton via kasha)\n",
          "commitDate": "24/05/16 10:37 AM",
          "commitName": "57c31a3fef625f1ec609d7e8873d4941f7ed5cbc",
          "commitAuthor": "Karthik Kambatla",
          "commitDateOld": "25/02/16 4:31 PM",
          "commitNameOld": "c2460dad642feee1086442d33c30c24ec77236b9",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 88.71,
          "commitsBetweenForRepo": 545,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,17 @@\n-  private void scheduleFlush(Date now) {\n+  private void scheduleFlush(Date when) {\n     // Store the current currentDirPath to close later\n     final PrintStream toClose \u003d currentOutStream;\n-    Calendar next \u003d Calendar.getInstance();\n-\n-    next.setTime(now);\n-\n-    if (flushQuickly) {\n-      // If we\u0027re running unit tests, flush after a short pause\n-      next.add(Calendar.MILLISECOND, 400);\n-    } else {\n-      // Otherwise flush at the top of the hour\n-      next.set(Calendar.SECOND, 0);\n-      next.set(Calendar.MINUTE, 0);\n-      next.add(Calendar.HOUR, 1);\n-    }\n \n     flushTimer.schedule(new TimerTask() {\n       @Override\n       public void run() {\n         synchronized (lock) {\n           // This close may have already been done by a putMetrics() call. If it\n           // has, the PrintStream will swallow the exception, which is fine.\n           toClose.close();\n         }\n \n         hasFlushed \u003d true;\n       }\n-    }, next.getTime());\n+    }, when);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void scheduleFlush(Date when) {\n    // Store the current currentDirPath to close later\n    final PrintStream toClose \u003d currentOutStream;\n\n    flushTimer.schedule(new TimerTask() {\n      @Override\n      public void run() {\n        synchronized (lock) {\n          // This close may have already been done by a putMetrics() call. If it\n          // has, the PrintStream will swallow the exception, which is fine.\n          toClose.close();\n        }\n\n        hasFlushed \u003d true;\n      }\n    }, when);\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/sink/RollingFileSystemSink.java",
          "extendedDetails": {
            "oldValue": "[now-Date]",
            "newValue": "[when-Date]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-9782. RollingFileSystemSink should have configurable roll interval. (Daniel Templeton via kasha)\n",
          "commitDate": "24/05/16 10:37 AM",
          "commitName": "57c31a3fef625f1ec609d7e8873d4941f7ed5cbc",
          "commitAuthor": "Karthik Kambatla",
          "commitDateOld": "25/02/16 4:31 PM",
          "commitNameOld": "c2460dad642feee1086442d33c30c24ec77236b9",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 88.71,
          "commitsBetweenForRepo": 545,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,17 @@\n-  private void scheduleFlush(Date now) {\n+  private void scheduleFlush(Date when) {\n     // Store the current currentDirPath to close later\n     final PrintStream toClose \u003d currentOutStream;\n-    Calendar next \u003d Calendar.getInstance();\n-\n-    next.setTime(now);\n-\n-    if (flushQuickly) {\n-      // If we\u0027re running unit tests, flush after a short pause\n-      next.add(Calendar.MILLISECOND, 400);\n-    } else {\n-      // Otherwise flush at the top of the hour\n-      next.set(Calendar.SECOND, 0);\n-      next.set(Calendar.MINUTE, 0);\n-      next.add(Calendar.HOUR, 1);\n-    }\n \n     flushTimer.schedule(new TimerTask() {\n       @Override\n       public void run() {\n         synchronized (lock) {\n           // This close may have already been done by a putMetrics() call. If it\n           // has, the PrintStream will swallow the exception, which is fine.\n           toClose.close();\n         }\n \n         hasFlushed \u003d true;\n       }\n-    }, next.getTime());\n+    }, when);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void scheduleFlush(Date when) {\n    // Store the current currentDirPath to close later\n    final PrintStream toClose \u003d currentOutStream;\n\n    flushTimer.schedule(new TimerTask() {\n      @Override\n      public void run() {\n        synchronized (lock) {\n          // This close may have already been done by a putMetrics() call. If it\n          // has, the PrintStream will swallow the exception, which is fine.\n          toClose.close();\n        }\n\n        hasFlushed \u003d true;\n      }\n    }, when);\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/sink/RollingFileSystemSink.java",
          "extendedDetails": {}
        }
      ]
    },
    "33ce7f6c072144f55be30c66099eef5bc736405e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9780. RollingFileSystemSink doesn\u0027t work on secure clusters. (Daniel Templeton via kasha)\n",
      "commitDate": "11/02/16 8:37 PM",
      "commitName": "33ce7f6c072144f55be30c66099eef5bc736405e",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "06/02/16 8:52 PM",
      "commitNameOld": "5b59a0ea85c923384e36ad7c036e751551774142",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 4.99,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   private void scheduleFlush(Date now) {\n     // Store the current currentDirPath to close later\n     final PrintStream toClose \u003d currentOutStream;\n     Calendar next \u003d Calendar.getInstance();\n \n     next.setTime(now);\n \n-    if (isTest) {\n+    if (flushQuickly) {\n       // If we\u0027re running unit tests, flush after a short pause\n       next.add(Calendar.MILLISECOND, 400);\n     } else {\n       // Otherwise flush at the top of the hour\n       next.set(Calendar.SECOND, 0);\n       next.set(Calendar.MINUTE, 0);\n       next.add(Calendar.HOUR, 1);\n     }\n \n     flushTimer.schedule(new TimerTask() {\n       @Override\n       public void run() {\n         synchronized (lock) {\n           // This close may have already been done by a putMetrics() call. If it\n           // has, the PrintStream will swallow the exception, which is fine.\n           toClose.close();\n         }\n \n         hasFlushed \u003d true;\n       }\n     }, next.getTime());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void scheduleFlush(Date now) {\n    // Store the current currentDirPath to close later\n    final PrintStream toClose \u003d currentOutStream;\n    Calendar next \u003d Calendar.getInstance();\n\n    next.setTime(now);\n\n    if (flushQuickly) {\n      // If we\u0027re running unit tests, flush after a short pause\n      next.add(Calendar.MILLISECOND, 400);\n    } else {\n      // Otherwise flush at the top of the hour\n      next.set(Calendar.SECOND, 0);\n      next.set(Calendar.MINUTE, 0);\n      next.add(Calendar.HOUR, 1);\n    }\n\n    flushTimer.schedule(new TimerTask() {\n      @Override\n      public void run() {\n        synchronized (lock) {\n          // This close may have already been done by a putMetrics() call. If it\n          // has, the PrintStream will swallow the exception, which is fine.\n          toClose.close();\n        }\n\n        hasFlushed \u003d true;\n      }\n    }, next.getTime());\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/sink/RollingFileSystemSink.java",
      "extendedDetails": {}
    },
    "5b59a0ea85c923384e36ad7c036e751551774142": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-12759. RollingFileSystemSink should eagerly rotate directories. Contributed by Daniel Templeton.\n",
      "commitDate": "06/02/16 8:52 PM",
      "commitName": "5b59a0ea85c923384e36ad7c036e751551774142",
      "commitAuthor": "Andrew Wang",
      "diff": "@@ -0,0 +1,30 @@\n+  private void scheduleFlush(Date now) {\n+    // Store the current currentDirPath to close later\n+    final PrintStream toClose \u003d currentOutStream;\n+    Calendar next \u003d Calendar.getInstance();\n+\n+    next.setTime(now);\n+\n+    if (isTest) {\n+      // If we\u0027re running unit tests, flush after a short pause\n+      next.add(Calendar.MILLISECOND, 400);\n+    } else {\n+      // Otherwise flush at the top of the hour\n+      next.set(Calendar.SECOND, 0);\n+      next.set(Calendar.MINUTE, 0);\n+      next.add(Calendar.HOUR, 1);\n+    }\n+\n+    flushTimer.schedule(new TimerTask() {\n+      @Override\n+      public void run() {\n+        synchronized (lock) {\n+          // This close may have already been done by a putMetrics() call. If it\n+          // has, the PrintStream will swallow the exception, which is fine.\n+          toClose.close();\n+        }\n+\n+        hasFlushed \u003d true;\n+      }\n+    }, next.getTime());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void scheduleFlush(Date now) {\n    // Store the current currentDirPath to close later\n    final PrintStream toClose \u003d currentOutStream;\n    Calendar next \u003d Calendar.getInstance();\n\n    next.setTime(now);\n\n    if (isTest) {\n      // If we\u0027re running unit tests, flush after a short pause\n      next.add(Calendar.MILLISECOND, 400);\n    } else {\n      // Otherwise flush at the top of the hour\n      next.set(Calendar.SECOND, 0);\n      next.set(Calendar.MINUTE, 0);\n      next.add(Calendar.HOUR, 1);\n    }\n\n    flushTimer.schedule(new TimerTask() {\n      @Override\n      public void run() {\n        synchronized (lock) {\n          // This close may have already been done by a putMetrics() call. If it\n          // has, the PrintStream will swallow the exception, which is fine.\n          toClose.close();\n        }\n\n        hasFlushed \u003d true;\n      }\n    }, next.getTime());\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/sink/RollingFileSystemSink.java"
    }
  }
}