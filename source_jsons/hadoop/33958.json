{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TrafficController.java",
  "functionName": "bootstrap",
  "functionId": "bootstrap___device-String__rootBandwidthMbit-int__yarnBandwidthMbit-int",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/TrafficController.java",
  "functionStartLine": 122,
  "functionEndLine": 171,
  "numCommitsSeen": 5,
  "timeTaken": 672,
  "changeHistory": [
    "a100be685cc4521e9949589948219231aa5d2733"
  ],
  "changeHistoryShort": {
    "a100be685cc4521e9949589948219231aa5d2733": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a100be685cc4521e9949589948219231aa5d2733": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3366. Enhanced NodeManager to support classifying/shaping outgoing network bandwidth traffic originating from YARN containers Contributed by Sidharta Seethana.\n",
      "commitDate": "22/04/15 5:26 PM",
      "commitName": "a100be685cc4521e9949589948219231aa5d2733",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,50 @@\n+  public void bootstrap(String device, int rootBandwidthMbit, int\n+      yarnBandwidthMbit)\n+      throws ResourceHandlerException {\n+    if (device \u003d\u003d null) {\n+      throw new ResourceHandlerException(\"device cannot be null!\");\n+    }\n+\n+    String tmpDirBase \u003d conf.get(\"hadoop.tmp.dir\");\n+    if (tmpDirBase \u003d\u003d null) {\n+      throw new ResourceHandlerException(\"hadoop.tmp.dir not set!\");\n+    }\n+    tmpDirPath \u003d tmpDirBase + \"/nm-tc-rules\";\n+\n+    File tmpDir \u003d new File(tmpDirPath);\n+    if (!(tmpDir.exists() || tmpDir.mkdirs())) {\n+      LOG.warn(\"Unable to create directory: \" + tmpDirPath);\n+      throw new ResourceHandlerException(\"Unable to create directory: \" +\n+          tmpDirPath);\n+    }\n+\n+    this.device \u003d device;\n+    this.rootBandwidthMbit \u003d rootBandwidthMbit;\n+    this.yarnBandwidthMbit \u003d yarnBandwidthMbit;\n+    defaultClassBandwidthMbit \u003d (rootBandwidthMbit - yarnBandwidthMbit) \u003c\u003d 0\n+        ? rootBandwidthMbit : (rootBandwidthMbit - yarnBandwidthMbit);\n+\n+    boolean recoveryEnabled \u003d conf.getBoolean(YarnConfiguration\n+        .NM_RECOVERY_ENABLED, YarnConfiguration.DEFAULT_NM_RECOVERY_ENABLED);\n+    String state \u003d null;\n+\n+    if (!recoveryEnabled) {\n+      LOG.info(\"NM recovery is not enabled. We\u0027ll wipe tc state before proceeding.\");\n+    } else {\n+      //NM recovery enabled - run a state check\n+      state \u003d readState();\n+      if (checkIfAlreadyBootstrapped(state)) {\n+        LOG.info(\"TC configuration is already in place. Not wiping state.\");\n+\n+        //We already have the list of existing container classes, if any\n+        //that were created after bootstrapping\n+        reacquireContainerClasses(state);\n+        return;\n+      } else {\n+        LOG.info(\"TC configuration is incomplete. Wiping tc state before proceeding\");\n+      }\n+    }\n+\n+    wipeState(); //start over in case preview bootstrap was incomplete\n+    initializeState();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void bootstrap(String device, int rootBandwidthMbit, int\n      yarnBandwidthMbit)\n      throws ResourceHandlerException {\n    if (device \u003d\u003d null) {\n      throw new ResourceHandlerException(\"device cannot be null!\");\n    }\n\n    String tmpDirBase \u003d conf.get(\"hadoop.tmp.dir\");\n    if (tmpDirBase \u003d\u003d null) {\n      throw new ResourceHandlerException(\"hadoop.tmp.dir not set!\");\n    }\n    tmpDirPath \u003d tmpDirBase + \"/nm-tc-rules\";\n\n    File tmpDir \u003d new File(tmpDirPath);\n    if (!(tmpDir.exists() || tmpDir.mkdirs())) {\n      LOG.warn(\"Unable to create directory: \" + tmpDirPath);\n      throw new ResourceHandlerException(\"Unable to create directory: \" +\n          tmpDirPath);\n    }\n\n    this.device \u003d device;\n    this.rootBandwidthMbit \u003d rootBandwidthMbit;\n    this.yarnBandwidthMbit \u003d yarnBandwidthMbit;\n    defaultClassBandwidthMbit \u003d (rootBandwidthMbit - yarnBandwidthMbit) \u003c\u003d 0\n        ? rootBandwidthMbit : (rootBandwidthMbit - yarnBandwidthMbit);\n\n    boolean recoveryEnabled \u003d conf.getBoolean(YarnConfiguration\n        .NM_RECOVERY_ENABLED, YarnConfiguration.DEFAULT_NM_RECOVERY_ENABLED);\n    String state \u003d null;\n\n    if (!recoveryEnabled) {\n      LOG.info(\"NM recovery is not enabled. We\u0027ll wipe tc state before proceeding.\");\n    } else {\n      //NM recovery enabled - run a state check\n      state \u003d readState();\n      if (checkIfAlreadyBootstrapped(state)) {\n        LOG.info(\"TC configuration is already in place. Not wiping state.\");\n\n        //We already have the list of existing container classes, if any\n        //that were created after bootstrapping\n        reacquireContainerClasses(state);\n        return;\n      } else {\n        LOG.info(\"TC configuration is incomplete. Wiping tc state before proceeding\");\n      }\n    }\n\n    wipeState(); //start over in case preview bootstrap was incomplete\n    initializeState();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/TrafficController.java"
    }
  }
}