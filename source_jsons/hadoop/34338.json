{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainerLocalizer.java",
  "functionName": "runLocalization",
  "functionId": "runLocalization___nmAddr-InetSocketAddress(modifiers-final)",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
  "functionStartLine": 160,
  "functionEndLine": 217,
  "numCommitsSeen": 41,
  "timeTaken": 9543,
  "changeHistory": [
    "21ec4bdaef4b68adbbf4f33a6f74494c074f803c",
    "9e19f758c1950cbcfcd1969461a8a910efca0767",
    "c380a22031a62e2d2fe533079e3780f06b069943",
    "0a887a091023073b91b1a789a52e3a26e9b24bae",
    "3f809667bc397ea372efe4b8f1aae7e2729b8ca0",
    "df5e2b83526634ac7c1c1131bf1aad73ac353d01",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "0e7204c9e740bfbe13b0128f7612e616e30c1970",
    "cd90b822278bf98a166e34e31aa2503ee4e48083",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "21ec4bdaef4b68adbbf4f33a6f74494c074f803c": "Ybodychange",
    "9e19f758c1950cbcfcd1969461a8a910efca0767": "Ybodychange",
    "c380a22031a62e2d2fe533079e3780f06b069943": "Ymultichange(Yreturntypechange,Ybodychange)",
    "0a887a091023073b91b1a789a52e3a26e9b24bae": "Ybodychange",
    "3f809667bc397ea372efe4b8f1aae7e2729b8ca0": "Ybodychange",
    "df5e2b83526634ac7c1c1131bf1aad73ac353d01": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "0e7204c9e740bfbe13b0128f7612e616e30c1970": "Ybodychange",
    "cd90b822278bf98a166e34e31aa2503ee4e48083": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "21ec4bdaef4b68adbbf4f33a6f74494c074f803c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8672.  Improve token filename management for localization.\n            Contributed by Chandni Singh\n",
      "commitDate": "14/11/18 12:22 PM",
      "commitName": "21ec4bdaef4b68adbbf4f33a6f74494c074f803c",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "22/06/18 2:03 PM",
      "commitNameOld": "1cdce86d33d4b73ba6dd4136c966eb7e822b6f36",
      "commitAuthorOld": "Yufei Gu",
      "daysBetweenCommits": 144.97,
      "commitsBetweenForRepo": 1201,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,58 @@\n   public void runLocalization(final InetSocketAddress nmAddr)\n       throws IOException, InterruptedException {\n     // load credentials\n     initDirs(conf, user, appId, lfs, localDirs);\n     final Credentials creds \u003d new Credentials();\n     DataInputStream credFile \u003d null;\n     try {\n       // assume credentials in cwd\n       // TODO: Fix\n-      Path tokenPath \u003d\n-          new Path(String.format(TOKEN_FILE_NAME_FMT, localizerId));\n+      Path tokenPath \u003d new Path(tokenFileName);\n       credFile \u003d lfs.open(tokenPath);\n       creds.readTokenStorageStream(credFile);\n       // Explicitly deleting token file.\n       lfs.delete(tokenPath, false);      \n     } finally  {\n       if (credFile !\u003d null) {\n         credFile.close();\n       }\n     }\n     // create localizer context\n     UserGroupInformation remoteUser \u003d\n       UserGroupInformation.createRemoteUser(user);\n     remoteUser.addToken(creds.getToken(LocalizerTokenIdentifier.KIND));\n     final LocalizationProtocol nodeManager \u003d\n         remoteUser.doAs(new PrivilegedAction\u003cLocalizationProtocol\u003e() {\n           @Override\n           public LocalizationProtocol run() {\n             return getProxy(nmAddr);\n           }\n         });\n \n     // create user context\n     UserGroupInformation ugi \u003d\n       UserGroupInformation.createRemoteUser(user);\n     for (Token\u003c? extends TokenIdentifier\u003e token : creds.getAllTokens()) {\n       ugi.addToken(token);\n     }\n \n     ExecutorService exec \u003d null;\n     try {\n       exec \u003d createDownloadThreadPool();\n       CompletionService\u003cPath\u003e ecs \u003d createCompletionService(exec);\n       localizeFiles(nodeManager, ecs, ugi);\n     } catch (Throwable e) {\n       throw new IOException(e);\n     } finally {\n       try {\n         if (exec !\u003d null) {\n           exec.shutdown();\n           destroyShellProcesses(getAllShells());\n           exec.awaitTermination(10, TimeUnit.SECONDS);\n         }\n         LocalDirAllocator.removeContext(appCacheDirContextName);\n       } finally {\n         closeFileSystems(ugi);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void runLocalization(final InetSocketAddress nmAddr)\n      throws IOException, InterruptedException {\n    // load credentials\n    initDirs(conf, user, appId, lfs, localDirs);\n    final Credentials creds \u003d new Credentials();\n    DataInputStream credFile \u003d null;\n    try {\n      // assume credentials in cwd\n      // TODO: Fix\n      Path tokenPath \u003d new Path(tokenFileName);\n      credFile \u003d lfs.open(tokenPath);\n      creds.readTokenStorageStream(credFile);\n      // Explicitly deleting token file.\n      lfs.delete(tokenPath, false);      \n    } finally  {\n      if (credFile !\u003d null) {\n        credFile.close();\n      }\n    }\n    // create localizer context\n    UserGroupInformation remoteUser \u003d\n      UserGroupInformation.createRemoteUser(user);\n    remoteUser.addToken(creds.getToken(LocalizerTokenIdentifier.KIND));\n    final LocalizationProtocol nodeManager \u003d\n        remoteUser.doAs(new PrivilegedAction\u003cLocalizationProtocol\u003e() {\n          @Override\n          public LocalizationProtocol run() {\n            return getProxy(nmAddr);\n          }\n        });\n\n    // create user context\n    UserGroupInformation ugi \u003d\n      UserGroupInformation.createRemoteUser(user);\n    for (Token\u003c? extends TokenIdentifier\u003e token : creds.getAllTokens()) {\n      ugi.addToken(token);\n    }\n\n    ExecutorService exec \u003d null;\n    try {\n      exec \u003d createDownloadThreadPool();\n      CompletionService\u003cPath\u003e ecs \u003d createCompletionService(exec);\n      localizeFiles(nodeManager, ecs, ugi);\n    } catch (Throwable e) {\n      throw new IOException(e);\n    } finally {\n      try {\n        if (exec !\u003d null) {\n          exec.shutdown();\n          destroyShellProcesses(getAllShells());\n          exec.awaitTermination(10, TimeUnit.SECONDS);\n        }\n        LocalDirAllocator.removeContext(appCacheDirContextName);\n      } finally {\n        closeFileSystems(ugi);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
      "extendedDetails": {}
    },
    "9e19f758c1950cbcfcd1969461a8a910efca0767": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5641. Localizer leaves behind tarballs after container is complete. Contributed by Eric Badger\n",
      "commitDate": "25/01/17 1:41 PM",
      "commitName": "9e19f758c1950cbcfcd1969461a8a910efca0767",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "10/08/16 7:23 PM",
      "commitNameOld": "aea3e65749333b97d8c45280077f03d4ebddb5a8",
      "commitAuthorOld": "Ray Chiang",
      "daysBetweenCommits": 167.8,
      "commitsBetweenForRepo": 1092,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,59 @@\n   public void runLocalization(final InetSocketAddress nmAddr)\n       throws IOException, InterruptedException {\n     // load credentials\n     initDirs(conf, user, appId, lfs, localDirs);\n     final Credentials creds \u003d new Credentials();\n     DataInputStream credFile \u003d null;\n     try {\n       // assume credentials in cwd\n       // TODO: Fix\n       Path tokenPath \u003d\n           new Path(String.format(TOKEN_FILE_NAME_FMT, localizerId));\n       credFile \u003d lfs.open(tokenPath);\n       creds.readTokenStorageStream(credFile);\n       // Explicitly deleting token file.\n       lfs.delete(tokenPath, false);      \n     } finally  {\n       if (credFile !\u003d null) {\n         credFile.close();\n       }\n     }\n     // create localizer context\n     UserGroupInformation remoteUser \u003d\n       UserGroupInformation.createRemoteUser(user);\n     remoteUser.addToken(creds.getToken(LocalizerTokenIdentifier.KIND));\n     final LocalizationProtocol nodeManager \u003d\n         remoteUser.doAs(new PrivilegedAction\u003cLocalizationProtocol\u003e() {\n           @Override\n           public LocalizationProtocol run() {\n             return getProxy(nmAddr);\n           }\n         });\n \n     // create user context\n     UserGroupInformation ugi \u003d\n       UserGroupInformation.createRemoteUser(user);\n     for (Token\u003c? extends TokenIdentifier\u003e token : creds.getAllTokens()) {\n       ugi.addToken(token);\n     }\n \n     ExecutorService exec \u003d null;\n     try {\n       exec \u003d createDownloadThreadPool();\n       CompletionService\u003cPath\u003e ecs \u003d createCompletionService(exec);\n       localizeFiles(nodeManager, ecs, ugi);\n-      return;\n     } catch (Throwable e) {\n       throw new IOException(e);\n     } finally {\n       try {\n         if (exec !\u003d null) {\n-          exec.shutdownNow();\n+          exec.shutdown();\n+          destroyShellProcesses(getAllShells());\n+          exec.awaitTermination(10, TimeUnit.SECONDS);\n         }\n         LocalDirAllocator.removeContext(appCacheDirContextName);\n       } finally {\n         closeFileSystems(ugi);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void runLocalization(final InetSocketAddress nmAddr)\n      throws IOException, InterruptedException {\n    // load credentials\n    initDirs(conf, user, appId, lfs, localDirs);\n    final Credentials creds \u003d new Credentials();\n    DataInputStream credFile \u003d null;\n    try {\n      // assume credentials in cwd\n      // TODO: Fix\n      Path tokenPath \u003d\n          new Path(String.format(TOKEN_FILE_NAME_FMT, localizerId));\n      credFile \u003d lfs.open(tokenPath);\n      creds.readTokenStorageStream(credFile);\n      // Explicitly deleting token file.\n      lfs.delete(tokenPath, false);      \n    } finally  {\n      if (credFile !\u003d null) {\n        credFile.close();\n      }\n    }\n    // create localizer context\n    UserGroupInformation remoteUser \u003d\n      UserGroupInformation.createRemoteUser(user);\n    remoteUser.addToken(creds.getToken(LocalizerTokenIdentifier.KIND));\n    final LocalizationProtocol nodeManager \u003d\n        remoteUser.doAs(new PrivilegedAction\u003cLocalizationProtocol\u003e() {\n          @Override\n          public LocalizationProtocol run() {\n            return getProxy(nmAddr);\n          }\n        });\n\n    // create user context\n    UserGroupInformation ugi \u003d\n      UserGroupInformation.createRemoteUser(user);\n    for (Token\u003c? extends TokenIdentifier\u003e token : creds.getAllTokens()) {\n      ugi.addToken(token);\n    }\n\n    ExecutorService exec \u003d null;\n    try {\n      exec \u003d createDownloadThreadPool();\n      CompletionService\u003cPath\u003e ecs \u003d createCompletionService(exec);\n      localizeFiles(nodeManager, ecs, ugi);\n    } catch (Throwable e) {\n      throw new IOException(e);\n    } finally {\n      try {\n        if (exec !\u003d null) {\n          exec.shutdown();\n          destroyShellProcesses(getAllShells());\n          exec.awaitTermination(10, TimeUnit.SECONDS);\n        }\n        LocalDirAllocator.removeContext(appCacheDirContextName);\n      } finally {\n        closeFileSystems(ugi);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
      "extendedDetails": {}
    },
    "c380a22031a62e2d2fe533079e3780f06b069943": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-857. Localization failures should be available in container diagnostics. Contributed by  Vinod Kumar Vavilapalli.\n",
      "commitDate": "25/05/16 6:31 AM",
      "commitName": "c380a22031a62e2d2fe533079e3780f06b069943",
      "commitAuthor": "Varun Vasudev",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-857. Localization failures should be available in container diagnostics. Contributed by  Vinod Kumar Vavilapalli.\n",
          "commitDate": "25/05/16 6:31 AM",
          "commitName": "c380a22031a62e2d2fe533079e3780f06b069943",
          "commitAuthor": "Varun Vasudev",
          "commitDateOld": "10/02/16 10:36 PM",
          "commitNameOld": "fa00d3e20560bee412b49e5792595749a247a8ab",
          "commitAuthorOld": "Varun Vasudev",
          "daysBetweenCommits": 104.29,
          "commitsBetweenForRepo": 656,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,61 +1,58 @@\n-  public int runLocalization(final InetSocketAddress nmAddr)\n+  public void runLocalization(final InetSocketAddress nmAddr)\n       throws IOException, InterruptedException {\n     // load credentials\n     initDirs(conf, user, appId, lfs, localDirs);\n     final Credentials creds \u003d new Credentials();\n     DataInputStream credFile \u003d null;\n     try {\n       // assume credentials in cwd\n       // TODO: Fix\n       Path tokenPath \u003d\n           new Path(String.format(TOKEN_FILE_NAME_FMT, localizerId));\n       credFile \u003d lfs.open(tokenPath);\n       creds.readTokenStorageStream(credFile);\n       // Explicitly deleting token file.\n       lfs.delete(tokenPath, false);      \n     } finally  {\n       if (credFile !\u003d null) {\n         credFile.close();\n       }\n     }\n     // create localizer context\n     UserGroupInformation remoteUser \u003d\n       UserGroupInformation.createRemoteUser(user);\n     remoteUser.addToken(creds.getToken(LocalizerTokenIdentifier.KIND));\n     final LocalizationProtocol nodeManager \u003d\n         remoteUser.doAs(new PrivilegedAction\u003cLocalizationProtocol\u003e() {\n           @Override\n           public LocalizationProtocol run() {\n             return getProxy(nmAddr);\n           }\n         });\n \n     // create user context\n     UserGroupInformation ugi \u003d\n       UserGroupInformation.createRemoteUser(user);\n     for (Token\u003c? extends TokenIdentifier\u003e token : creds.getAllTokens()) {\n       ugi.addToken(token);\n     }\n \n     ExecutorService exec \u003d null;\n     try {\n       exec \u003d createDownloadThreadPool();\n       CompletionService\u003cPath\u003e ecs \u003d createCompletionService(exec);\n       localizeFiles(nodeManager, ecs, ugi);\n-      return 0;\n+      return;\n     } catch (Throwable e) {\n-      // Print traces to stdout so that they can be logged by the NM address\n-      // space.\n-      e.printStackTrace(System.out);\n-      return -1;\n+      throw new IOException(e);\n     } finally {\n       try {\n         if (exec !\u003d null) {\n           exec.shutdownNow();\n         }\n         LocalDirAllocator.removeContext(appCacheDirContextName);\n       } finally {\n         closeFileSystems(ugi);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void runLocalization(final InetSocketAddress nmAddr)\n      throws IOException, InterruptedException {\n    // load credentials\n    initDirs(conf, user, appId, lfs, localDirs);\n    final Credentials creds \u003d new Credentials();\n    DataInputStream credFile \u003d null;\n    try {\n      // assume credentials in cwd\n      // TODO: Fix\n      Path tokenPath \u003d\n          new Path(String.format(TOKEN_FILE_NAME_FMT, localizerId));\n      credFile \u003d lfs.open(tokenPath);\n      creds.readTokenStorageStream(credFile);\n      // Explicitly deleting token file.\n      lfs.delete(tokenPath, false);      \n    } finally  {\n      if (credFile !\u003d null) {\n        credFile.close();\n      }\n    }\n    // create localizer context\n    UserGroupInformation remoteUser \u003d\n      UserGroupInformation.createRemoteUser(user);\n    remoteUser.addToken(creds.getToken(LocalizerTokenIdentifier.KIND));\n    final LocalizationProtocol nodeManager \u003d\n        remoteUser.doAs(new PrivilegedAction\u003cLocalizationProtocol\u003e() {\n          @Override\n          public LocalizationProtocol run() {\n            return getProxy(nmAddr);\n          }\n        });\n\n    // create user context\n    UserGroupInformation ugi \u003d\n      UserGroupInformation.createRemoteUser(user);\n    for (Token\u003c? extends TokenIdentifier\u003e token : creds.getAllTokens()) {\n      ugi.addToken(token);\n    }\n\n    ExecutorService exec \u003d null;\n    try {\n      exec \u003d createDownloadThreadPool();\n      CompletionService\u003cPath\u003e ecs \u003d createCompletionService(exec);\n      localizeFiles(nodeManager, ecs, ugi);\n      return;\n    } catch (Throwable e) {\n      throw new IOException(e);\n    } finally {\n      try {\n        if (exec !\u003d null) {\n          exec.shutdownNow();\n        }\n        LocalDirAllocator.removeContext(appCacheDirContextName);\n      } finally {\n        closeFileSystems(ugi);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
          "extendedDetails": {
            "oldValue": "int",
            "newValue": "void"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-857. Localization failures should be available in container diagnostics. Contributed by  Vinod Kumar Vavilapalli.\n",
          "commitDate": "25/05/16 6:31 AM",
          "commitName": "c380a22031a62e2d2fe533079e3780f06b069943",
          "commitAuthor": "Varun Vasudev",
          "commitDateOld": "10/02/16 10:36 PM",
          "commitNameOld": "fa00d3e20560bee412b49e5792595749a247a8ab",
          "commitAuthorOld": "Varun Vasudev",
          "daysBetweenCommits": 104.29,
          "commitsBetweenForRepo": 656,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,61 +1,58 @@\n-  public int runLocalization(final InetSocketAddress nmAddr)\n+  public void runLocalization(final InetSocketAddress nmAddr)\n       throws IOException, InterruptedException {\n     // load credentials\n     initDirs(conf, user, appId, lfs, localDirs);\n     final Credentials creds \u003d new Credentials();\n     DataInputStream credFile \u003d null;\n     try {\n       // assume credentials in cwd\n       // TODO: Fix\n       Path tokenPath \u003d\n           new Path(String.format(TOKEN_FILE_NAME_FMT, localizerId));\n       credFile \u003d lfs.open(tokenPath);\n       creds.readTokenStorageStream(credFile);\n       // Explicitly deleting token file.\n       lfs.delete(tokenPath, false);      \n     } finally  {\n       if (credFile !\u003d null) {\n         credFile.close();\n       }\n     }\n     // create localizer context\n     UserGroupInformation remoteUser \u003d\n       UserGroupInformation.createRemoteUser(user);\n     remoteUser.addToken(creds.getToken(LocalizerTokenIdentifier.KIND));\n     final LocalizationProtocol nodeManager \u003d\n         remoteUser.doAs(new PrivilegedAction\u003cLocalizationProtocol\u003e() {\n           @Override\n           public LocalizationProtocol run() {\n             return getProxy(nmAddr);\n           }\n         });\n \n     // create user context\n     UserGroupInformation ugi \u003d\n       UserGroupInformation.createRemoteUser(user);\n     for (Token\u003c? extends TokenIdentifier\u003e token : creds.getAllTokens()) {\n       ugi.addToken(token);\n     }\n \n     ExecutorService exec \u003d null;\n     try {\n       exec \u003d createDownloadThreadPool();\n       CompletionService\u003cPath\u003e ecs \u003d createCompletionService(exec);\n       localizeFiles(nodeManager, ecs, ugi);\n-      return 0;\n+      return;\n     } catch (Throwable e) {\n-      // Print traces to stdout so that they can be logged by the NM address\n-      // space.\n-      e.printStackTrace(System.out);\n-      return -1;\n+      throw new IOException(e);\n     } finally {\n       try {\n         if (exec !\u003d null) {\n           exec.shutdownNow();\n         }\n         LocalDirAllocator.removeContext(appCacheDirContextName);\n       } finally {\n         closeFileSystems(ugi);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void runLocalization(final InetSocketAddress nmAddr)\n      throws IOException, InterruptedException {\n    // load credentials\n    initDirs(conf, user, appId, lfs, localDirs);\n    final Credentials creds \u003d new Credentials();\n    DataInputStream credFile \u003d null;\n    try {\n      // assume credentials in cwd\n      // TODO: Fix\n      Path tokenPath \u003d\n          new Path(String.format(TOKEN_FILE_NAME_FMT, localizerId));\n      credFile \u003d lfs.open(tokenPath);\n      creds.readTokenStorageStream(credFile);\n      // Explicitly deleting token file.\n      lfs.delete(tokenPath, false);      \n    } finally  {\n      if (credFile !\u003d null) {\n        credFile.close();\n      }\n    }\n    // create localizer context\n    UserGroupInformation remoteUser \u003d\n      UserGroupInformation.createRemoteUser(user);\n    remoteUser.addToken(creds.getToken(LocalizerTokenIdentifier.KIND));\n    final LocalizationProtocol nodeManager \u003d\n        remoteUser.doAs(new PrivilegedAction\u003cLocalizationProtocol\u003e() {\n          @Override\n          public LocalizationProtocol run() {\n            return getProxy(nmAddr);\n          }\n        });\n\n    // create user context\n    UserGroupInformation ugi \u003d\n      UserGroupInformation.createRemoteUser(user);\n    for (Token\u003c? extends TokenIdentifier\u003e token : creds.getAllTokens()) {\n      ugi.addToken(token);\n    }\n\n    ExecutorService exec \u003d null;\n    try {\n      exec \u003d createDownloadThreadPool();\n      CompletionService\u003cPath\u003e ecs \u003d createCompletionService(exec);\n      localizeFiles(nodeManager, ecs, ugi);\n      return;\n    } catch (Throwable e) {\n      throw new IOException(e);\n    } finally {\n      try {\n        if (exec !\u003d null) {\n          exec.shutdownNow();\n        }\n        LocalDirAllocator.removeContext(appCacheDirContextName);\n      } finally {\n        closeFileSystems(ugi);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
          "extendedDetails": {}
        }
      ]
    },
    "0a887a091023073b91b1a789a52e3a26e9b24bae": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1254. Fixed NodeManager to not pollute container\u0027s credentials. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1529382 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/10/13 9:25 PM",
      "commitName": "0a887a091023073b91b1a789a52e3a26e9b24bae",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "23/07/13 8:41 PM",
      "commitNameOld": "3ca3137179ef093e42cde06587c9ea785b10f32c",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 73.03,
      "commitsBetweenForRepo": 443,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,61 @@\n   public int runLocalization(final InetSocketAddress nmAddr)\n       throws IOException, InterruptedException {\n     // load credentials\n     initDirs(conf, user, appId, lfs, localDirs);\n     final Credentials creds \u003d new Credentials();\n     DataInputStream credFile \u003d null;\n     try {\n       // assume credentials in cwd\n       // TODO: Fix\n-      credFile \u003d lfs.open(\n-          new Path(String.format(TOKEN_FILE_NAME_FMT, localizerId)));\n+      Path tokenPath \u003d\n+          new Path(String.format(TOKEN_FILE_NAME_FMT, localizerId));\n+      credFile \u003d lfs.open(tokenPath);\n       creds.readTokenStorageStream(credFile);\n+      // Explicitly deleting token file.\n+      lfs.delete(tokenPath, false);      \n     } finally  {\n       if (credFile !\u003d null) {\n         credFile.close();\n       }\n     }\n     // create localizer context\n     UserGroupInformation remoteUser \u003d\n       UserGroupInformation.createRemoteUser(user);\n     remoteUser.addToken(creds.getToken(LocalizerTokenIdentifier.KIND));\n     final LocalizationProtocol nodeManager \u003d\n         remoteUser.doAs(new PrivilegedAction\u003cLocalizationProtocol\u003e() {\n           @Override\n           public LocalizationProtocol run() {\n             return getProxy(nmAddr);\n           }\n         });\n \n     // create user context\n     UserGroupInformation ugi \u003d\n       UserGroupInformation.createRemoteUser(user);\n     for (Token\u003c? extends TokenIdentifier\u003e token : creds.getAllTokens()) {\n       ugi.addToken(token);\n     }\n \n     ExecutorService exec \u003d null;\n     try {\n       exec \u003d createDownloadThreadPool();\n       CompletionService\u003cPath\u003e ecs \u003d createCompletionService(exec);\n       localizeFiles(nodeManager, ecs, ugi);\n       return 0;\n     } catch (Throwable e) {\n       // Print traces to stdout so that they can be logged by the NM address\n       // space.\n       e.printStackTrace(System.out);\n       return -1;\n     } finally {\n       try {\n         if (exec !\u003d null) {\n           exec.shutdownNow();\n         }\n         LocalDirAllocator.removeContext(appCacheDirContextName);\n       } finally {\n         closeFileSystems(ugi);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int runLocalization(final InetSocketAddress nmAddr)\n      throws IOException, InterruptedException {\n    // load credentials\n    initDirs(conf, user, appId, lfs, localDirs);\n    final Credentials creds \u003d new Credentials();\n    DataInputStream credFile \u003d null;\n    try {\n      // assume credentials in cwd\n      // TODO: Fix\n      Path tokenPath \u003d\n          new Path(String.format(TOKEN_FILE_NAME_FMT, localizerId));\n      credFile \u003d lfs.open(tokenPath);\n      creds.readTokenStorageStream(credFile);\n      // Explicitly deleting token file.\n      lfs.delete(tokenPath, false);      \n    } finally  {\n      if (credFile !\u003d null) {\n        credFile.close();\n      }\n    }\n    // create localizer context\n    UserGroupInformation remoteUser \u003d\n      UserGroupInformation.createRemoteUser(user);\n    remoteUser.addToken(creds.getToken(LocalizerTokenIdentifier.KIND));\n    final LocalizationProtocol nodeManager \u003d\n        remoteUser.doAs(new PrivilegedAction\u003cLocalizationProtocol\u003e() {\n          @Override\n          public LocalizationProtocol run() {\n            return getProxy(nmAddr);\n          }\n        });\n\n    // create user context\n    UserGroupInformation ugi \u003d\n      UserGroupInformation.createRemoteUser(user);\n    for (Token\u003c? extends TokenIdentifier\u003e token : creds.getAllTokens()) {\n      ugi.addToken(token);\n    }\n\n    ExecutorService exec \u003d null;\n    try {\n      exec \u003d createDownloadThreadPool();\n      CompletionService\u003cPath\u003e ecs \u003d createCompletionService(exec);\n      localizeFiles(nodeManager, ecs, ugi);\n      return 0;\n    } catch (Throwable e) {\n      // Print traces to stdout so that they can be logged by the NM address\n      // space.\n      e.printStackTrace(System.out);\n      return -1;\n    } finally {\n      try {\n        if (exec !\u003d null) {\n          exec.shutdownNow();\n        }\n        LocalDirAllocator.removeContext(appCacheDirContextName);\n      } finally {\n        closeFileSystems(ugi);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
      "extendedDetails": {}
    },
    "3f809667bc397ea372efe4b8f1aae7e2729b8ca0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-854. Fixing YARN bugs that are failing applications in secure environment. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1494845 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/06/13 8:41 PM",
      "commitName": "3f809667bc397ea372efe4b8f1aae7e2729b8ca0",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "03/06/13 9:05 PM",
      "commitNameOld": "a83fb61ac07c0468cbc7a38526e92683883dd932",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 15.98,
      "commitsBetweenForRepo": 142,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,58 @@\n   public int runLocalization(final InetSocketAddress nmAddr)\n       throws IOException, InterruptedException {\n     // load credentials\n     initDirs(conf, user, appId, lfs, localDirs);\n     final Credentials creds \u003d new Credentials();\n     DataInputStream credFile \u003d null;\n     try {\n       // assume credentials in cwd\n       // TODO: Fix\n       credFile \u003d lfs.open(\n           new Path(String.format(TOKEN_FILE_NAME_FMT, localizerId)));\n       creds.readTokenStorageStream(credFile);\n     } finally  {\n       if (credFile !\u003d null) {\n         credFile.close();\n       }\n     }\n     // create localizer context\n     UserGroupInformation remoteUser \u003d\n       UserGroupInformation.createRemoteUser(user);\n-    LocalizerTokenSecretManager secretManager \u003d\n-      new LocalizerTokenSecretManager();\n-    LocalizerTokenIdentifier id \u003d secretManager.createIdentifier();\n-    Token\u003cLocalizerTokenIdentifier\u003e localizerToken \u003d\n-      new Token\u003cLocalizerTokenIdentifier\u003e(id, secretManager);\n-    remoteUser.addToken(localizerToken);\n+    remoteUser.addToken(creds.getToken(LocalizerTokenIdentifier.KIND));\n     final LocalizationProtocol nodeManager \u003d\n         remoteUser.doAs(new PrivilegedAction\u003cLocalizationProtocol\u003e() {\n           @Override\n           public LocalizationProtocol run() {\n             return getProxy(nmAddr);\n           }\n         });\n \n     // create user context\n     UserGroupInformation ugi \u003d\n       UserGroupInformation.createRemoteUser(user);\n     for (Token\u003c? extends TokenIdentifier\u003e token : creds.getAllTokens()) {\n       ugi.addToken(token);\n     }\n \n     ExecutorService exec \u003d null;\n     try {\n       exec \u003d createDownloadThreadPool();\n       CompletionService\u003cPath\u003e ecs \u003d createCompletionService(exec);\n       localizeFiles(nodeManager, ecs, ugi);\n       return 0;\n     } catch (Throwable e) {\n       // Print traces to stdout so that they can be logged by the NM address\n       // space.\n       e.printStackTrace(System.out);\n       return -1;\n     } finally {\n       try {\n         if (exec !\u003d null) {\n           exec.shutdownNow();\n         }\n         LocalDirAllocator.removeContext(appCacheDirContextName);\n       } finally {\n         closeFileSystems(ugi);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int runLocalization(final InetSocketAddress nmAddr)\n      throws IOException, InterruptedException {\n    // load credentials\n    initDirs(conf, user, appId, lfs, localDirs);\n    final Credentials creds \u003d new Credentials();\n    DataInputStream credFile \u003d null;\n    try {\n      // assume credentials in cwd\n      // TODO: Fix\n      credFile \u003d lfs.open(\n          new Path(String.format(TOKEN_FILE_NAME_FMT, localizerId)));\n      creds.readTokenStorageStream(credFile);\n    } finally  {\n      if (credFile !\u003d null) {\n        credFile.close();\n      }\n    }\n    // create localizer context\n    UserGroupInformation remoteUser \u003d\n      UserGroupInformation.createRemoteUser(user);\n    remoteUser.addToken(creds.getToken(LocalizerTokenIdentifier.KIND));\n    final LocalizationProtocol nodeManager \u003d\n        remoteUser.doAs(new PrivilegedAction\u003cLocalizationProtocol\u003e() {\n          @Override\n          public LocalizationProtocol run() {\n            return getProxy(nmAddr);\n          }\n        });\n\n    // create user context\n    UserGroupInformation ugi \u003d\n      UserGroupInformation.createRemoteUser(user);\n    for (Token\u003c? extends TokenIdentifier\u003e token : creds.getAllTokens()) {\n      ugi.addToken(token);\n    }\n\n    ExecutorService exec \u003d null;\n    try {\n      exec \u003d createDownloadThreadPool();\n      CompletionService\u003cPath\u003e ecs \u003d createCompletionService(exec);\n      localizeFiles(nodeManager, ecs, ugi);\n      return 0;\n    } catch (Throwable e) {\n      // Print traces to stdout so that they can be logged by the NM address\n      // space.\n      e.printStackTrace(System.out);\n      return -1;\n    } finally {\n      try {\n        if (exec !\u003d null) {\n          exec.shutdownNow();\n        }\n        LocalDirAllocator.removeContext(appCacheDirContextName);\n      } finally {\n        closeFileSystems(ugi);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
      "extendedDetails": {}
    },
    "df5e2b83526634ac7c1c1131bf1aad73ac353d01": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4323. NM leaks filesystems (Jason Lowe via jeagles)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1375164 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/08/12 11:32 AM",
      "commitName": "df5e2b83526634ac7c1c1131bf1aad73ac353d01",
      "commitAuthor": "Jonathan Turner Eagles",
      "commitDateOld": "07/08/12 10:22 PM",
      "commitNameOld": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 12.55,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,63 @@\n   public int runLocalization(final InetSocketAddress nmAddr)\n       throws IOException, InterruptedException {\n     // load credentials\n     initDirs(conf, user, appId, lfs, localDirs);\n     final Credentials creds \u003d new Credentials();\n     DataInputStream credFile \u003d null;\n     try {\n       // assume credentials in cwd\n       // TODO: Fix\n       credFile \u003d lfs.open(\n           new Path(String.format(TOKEN_FILE_NAME_FMT, localizerId)));\n       creds.readTokenStorageStream(credFile);\n     } finally  {\n       if (credFile !\u003d null) {\n         credFile.close();\n       }\n     }\n     // create localizer context\n     UserGroupInformation remoteUser \u003d\n       UserGroupInformation.createRemoteUser(user);\n     LocalizerTokenSecretManager secretManager \u003d\n       new LocalizerTokenSecretManager();\n     LocalizerTokenIdentifier id \u003d secretManager.createIdentifier();\n     Token\u003cLocalizerTokenIdentifier\u003e localizerToken \u003d\n       new Token\u003cLocalizerTokenIdentifier\u003e(id, secretManager);\n     remoteUser.addToken(localizerToken);\n     final LocalizationProtocol nodeManager \u003d\n         remoteUser.doAs(new PrivilegedAction\u003cLocalizationProtocol\u003e() {\n           @Override\n           public LocalizationProtocol run() {\n             return getProxy(nmAddr);\n           }\n         });\n \n     // create user context\n     UserGroupInformation ugi \u003d\n       UserGroupInformation.createRemoteUser(user);\n     for (Token\u003c? extends TokenIdentifier\u003e token : creds.getAllTokens()) {\n       ugi.addToken(token);\n     }\n \n     ExecutorService exec \u003d null;\n     try {\n       exec \u003d createDownloadThreadPool();\n       CompletionService\u003cPath\u003e ecs \u003d createCompletionService(exec);\n       localizeFiles(nodeManager, ecs, ugi);\n       return 0;\n     } catch (Throwable e) {\n       // Print traces to stdout so that they can be logged by the NM address\n       // space.\n       e.printStackTrace(System.out);\n       return -1;\n     } finally {\n-      if (exec !\u003d null) {\n-        exec.shutdownNow();\n+      try {\n+        if (exec !\u003d null) {\n+          exec.shutdownNow();\n+        }\n+        LocalDirAllocator.removeContext(appCacheDirContextName);\n+      } finally {\n+        closeFileSystems(ugi);\n       }\n-      LocalDirAllocator.removeContext(appCacheDirContextName);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int runLocalization(final InetSocketAddress nmAddr)\n      throws IOException, InterruptedException {\n    // load credentials\n    initDirs(conf, user, appId, lfs, localDirs);\n    final Credentials creds \u003d new Credentials();\n    DataInputStream credFile \u003d null;\n    try {\n      // assume credentials in cwd\n      // TODO: Fix\n      credFile \u003d lfs.open(\n          new Path(String.format(TOKEN_FILE_NAME_FMT, localizerId)));\n      creds.readTokenStorageStream(credFile);\n    } finally  {\n      if (credFile !\u003d null) {\n        credFile.close();\n      }\n    }\n    // create localizer context\n    UserGroupInformation remoteUser \u003d\n      UserGroupInformation.createRemoteUser(user);\n    LocalizerTokenSecretManager secretManager \u003d\n      new LocalizerTokenSecretManager();\n    LocalizerTokenIdentifier id \u003d secretManager.createIdentifier();\n    Token\u003cLocalizerTokenIdentifier\u003e localizerToken \u003d\n      new Token\u003cLocalizerTokenIdentifier\u003e(id, secretManager);\n    remoteUser.addToken(localizerToken);\n    final LocalizationProtocol nodeManager \u003d\n        remoteUser.doAs(new PrivilegedAction\u003cLocalizationProtocol\u003e() {\n          @Override\n          public LocalizationProtocol run() {\n            return getProxy(nmAddr);\n          }\n        });\n\n    // create user context\n    UserGroupInformation ugi \u003d\n      UserGroupInformation.createRemoteUser(user);\n    for (Token\u003c? extends TokenIdentifier\u003e token : creds.getAllTokens()) {\n      ugi.addToken(token);\n    }\n\n    ExecutorService exec \u003d null;\n    try {\n      exec \u003d createDownloadThreadPool();\n      CompletionService\u003cPath\u003e ecs \u003d createCompletionService(exec);\n      localizeFiles(nodeManager, ecs, ugi);\n      return 0;\n    } catch (Throwable e) {\n      // Print traces to stdout so that they can be logged by the NM address\n      // space.\n      e.printStackTrace(System.out);\n      return -1;\n    } finally {\n      try {\n        if (exec !\u003d null) {\n          exec.shutdownNow();\n        }\n        LocalDirAllocator.removeContext(appCacheDirContextName);\n      } finally {\n        closeFileSystems(ugi);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public int runLocalization(final InetSocketAddress nmAddr)\n      throws IOException, InterruptedException {\n    // load credentials\n    initDirs(conf, user, appId, lfs, localDirs);\n    final Credentials creds \u003d new Credentials();\n    DataInputStream credFile \u003d null;\n    try {\n      // assume credentials in cwd\n      // TODO: Fix\n      credFile \u003d lfs.open(\n          new Path(String.format(TOKEN_FILE_NAME_FMT, localizerId)));\n      creds.readTokenStorageStream(credFile);\n    } finally  {\n      if (credFile !\u003d null) {\n        credFile.close();\n      }\n    }\n    // create localizer context\n    UserGroupInformation remoteUser \u003d\n      UserGroupInformation.createRemoteUser(user);\n    LocalizerTokenSecretManager secretManager \u003d\n      new LocalizerTokenSecretManager();\n    LocalizerTokenIdentifier id \u003d secretManager.createIdentifier();\n    Token\u003cLocalizerTokenIdentifier\u003e localizerToken \u003d\n      new Token\u003cLocalizerTokenIdentifier\u003e(id, secretManager);\n    remoteUser.addToken(localizerToken);\n    final LocalizationProtocol nodeManager \u003d\n        remoteUser.doAs(new PrivilegedAction\u003cLocalizationProtocol\u003e() {\n          @Override\n          public LocalizationProtocol run() {\n            return getProxy(nmAddr);\n          }\n        });\n\n    // create user context\n    UserGroupInformation ugi \u003d\n      UserGroupInformation.createRemoteUser(user);\n    for (Token\u003c? extends TokenIdentifier\u003e token : creds.getAllTokens()) {\n      ugi.addToken(token);\n    }\n\n    ExecutorService exec \u003d null;\n    try {\n      exec \u003d createDownloadThreadPool();\n      CompletionService\u003cPath\u003e ecs \u003d createCompletionService(exec);\n      localizeFiles(nodeManager, ecs, ugi);\n      return 0;\n    } catch (Throwable e) {\n      // Print traces to stdout so that they can be logged by the NM address\n      // space.\n      e.printStackTrace(System.out);\n      return -1;\n    } finally {\n      if (exec !\u003d null) {\n        exec.shutdownNow();\n      }\n      LocalDirAllocator.removeContext(appCacheDirContextName);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java"
      }
    },
    "0e7204c9e740bfbe13b0128f7612e616e30c1970": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4379. Node Manager throws java.lang.OutOfMemoryError: Java heap space due to org.apache.hadoop.fs.LocalDirAllocator.contexts (Devaraj K via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1358305 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/07/12 10:19 AM",
      "commitName": "0e7204c9e740bfbe13b0128f7612e616e30c1970",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "29/02/12 12:05 PM",
      "commitNameOld": "2659fded836223f1b85f6daf20f76253793a4a54",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 127.88,
      "commitsBetweenForRepo": 784,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,59 @@\n   public int runLocalization(final InetSocketAddress nmAddr)\n       throws IOException, InterruptedException {\n     // load credentials\n     initDirs(conf, user, appId, lfs, localDirs);\n     final Credentials creds \u003d new Credentials();\n     DataInputStream credFile \u003d null;\n     try {\n       // assume credentials in cwd\n       // TODO: Fix\n       credFile \u003d lfs.open(\n           new Path(String.format(TOKEN_FILE_NAME_FMT, localizerId)));\n       creds.readTokenStorageStream(credFile);\n     } finally  {\n       if (credFile !\u003d null) {\n         credFile.close();\n       }\n     }\n     // create localizer context\n     UserGroupInformation remoteUser \u003d\n       UserGroupInformation.createRemoteUser(user);\n     LocalizerTokenSecretManager secretManager \u003d\n       new LocalizerTokenSecretManager();\n     LocalizerTokenIdentifier id \u003d secretManager.createIdentifier();\n     Token\u003cLocalizerTokenIdentifier\u003e localizerToken \u003d\n       new Token\u003cLocalizerTokenIdentifier\u003e(id, secretManager);\n     remoteUser.addToken(localizerToken);\n     final LocalizationProtocol nodeManager \u003d\n         remoteUser.doAs(new PrivilegedAction\u003cLocalizationProtocol\u003e() {\n           @Override\n           public LocalizationProtocol run() {\n             return getProxy(nmAddr);\n           }\n         });\n \n     // create user context\n     UserGroupInformation ugi \u003d\n       UserGroupInformation.createRemoteUser(user);\n     for (Token\u003c? extends TokenIdentifier\u003e token : creds.getAllTokens()) {\n       ugi.addToken(token);\n     }\n \n     ExecutorService exec \u003d null;\n     try {\n       exec \u003d createDownloadThreadPool();\n       CompletionService\u003cPath\u003e ecs \u003d createCompletionService(exec);\n       localizeFiles(nodeManager, ecs, ugi);\n       return 0;\n     } catch (Throwable e) {\n       // Print traces to stdout so that they can be logged by the NM address\n       // space.\n       e.printStackTrace(System.out);\n       return -1;\n     } finally {\n       if (exec !\u003d null) {\n         exec.shutdownNow();\n       }\n+      LocalDirAllocator.removeContext(appCacheDirContextName);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int runLocalization(final InetSocketAddress nmAddr)\n      throws IOException, InterruptedException {\n    // load credentials\n    initDirs(conf, user, appId, lfs, localDirs);\n    final Credentials creds \u003d new Credentials();\n    DataInputStream credFile \u003d null;\n    try {\n      // assume credentials in cwd\n      // TODO: Fix\n      credFile \u003d lfs.open(\n          new Path(String.format(TOKEN_FILE_NAME_FMT, localizerId)));\n      creds.readTokenStorageStream(credFile);\n    } finally  {\n      if (credFile !\u003d null) {\n        credFile.close();\n      }\n    }\n    // create localizer context\n    UserGroupInformation remoteUser \u003d\n      UserGroupInformation.createRemoteUser(user);\n    LocalizerTokenSecretManager secretManager \u003d\n      new LocalizerTokenSecretManager();\n    LocalizerTokenIdentifier id \u003d secretManager.createIdentifier();\n    Token\u003cLocalizerTokenIdentifier\u003e localizerToken \u003d\n      new Token\u003cLocalizerTokenIdentifier\u003e(id, secretManager);\n    remoteUser.addToken(localizerToken);\n    final LocalizationProtocol nodeManager \u003d\n        remoteUser.doAs(new PrivilegedAction\u003cLocalizationProtocol\u003e() {\n          @Override\n          public LocalizationProtocol run() {\n            return getProxy(nmAddr);\n          }\n        });\n\n    // create user context\n    UserGroupInformation ugi \u003d\n      UserGroupInformation.createRemoteUser(user);\n    for (Token\u003c? extends TokenIdentifier\u003e token : creds.getAllTokens()) {\n      ugi.addToken(token);\n    }\n\n    ExecutorService exec \u003d null;\n    try {\n      exec \u003d createDownloadThreadPool();\n      CompletionService\u003cPath\u003e ecs \u003d createCompletionService(exec);\n      localizeFiles(nodeManager, ecs, ugi);\n      return 0;\n    } catch (Throwable e) {\n      // Print traces to stdout so that they can be logged by the NM address\n      // space.\n      e.printStackTrace(System.out);\n      return -1;\n    } finally {\n      if (exec !\u003d null) {\n        exec.shutdownNow();\n      }\n      LocalDirAllocator.removeContext(appCacheDirContextName);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
      "extendedDetails": {}
    },
    "cd90b822278bf98a166e34e31aa2503ee4e48083": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3399. Modifying ContainerLocalizer to send a heartbeat to NM immediately after downloading a resource instead of always waiting for a second. Contributed by Siddarth Seth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1224970 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/12/11 10:26 AM",
      "commitName": "cd90b822278bf98a166e34e31aa2503ee4e48083",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "29/11/11 3:17 PM",
      "commitNameOld": "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 27.8,
      "commitsBetweenForRepo": 150,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,58 @@\n   public int runLocalization(final InetSocketAddress nmAddr)\n       throws IOException, InterruptedException {\n     // load credentials\n     initDirs(conf, user, appId, lfs, localDirs);\n     final Credentials creds \u003d new Credentials();\n     DataInputStream credFile \u003d null;\n     try {\n       // assume credentials in cwd\n       // TODO: Fix\n       credFile \u003d lfs.open(\n           new Path(String.format(TOKEN_FILE_NAME_FMT, localizerId)));\n       creds.readTokenStorageStream(credFile);\n     } finally  {\n       if (credFile !\u003d null) {\n         credFile.close();\n       }\n     }\n     // create localizer context\n     UserGroupInformation remoteUser \u003d\n       UserGroupInformation.createRemoteUser(user);\n     LocalizerTokenSecretManager secretManager \u003d\n       new LocalizerTokenSecretManager();\n     LocalizerTokenIdentifier id \u003d secretManager.createIdentifier();\n     Token\u003cLocalizerTokenIdentifier\u003e localizerToken \u003d\n       new Token\u003cLocalizerTokenIdentifier\u003e(id, secretManager);\n     remoteUser.addToken(localizerToken);\n     final LocalizationProtocol nodeManager \u003d\n         remoteUser.doAs(new PrivilegedAction\u003cLocalizationProtocol\u003e() {\n           @Override\n           public LocalizationProtocol run() {\n             return getProxy(nmAddr);\n           }\n         });\n \n     // create user context\n     UserGroupInformation ugi \u003d\n       UserGroupInformation.createRemoteUser(user);\n     for (Token\u003c? extends TokenIdentifier\u003e token : creds.getAllTokens()) {\n       ugi.addToken(token);\n     }\n \n     ExecutorService exec \u003d null;\n     try {\n       exec \u003d createDownloadThreadPool();\n-      localizeFiles(nodeManager, exec, ugi);\n+      CompletionService\u003cPath\u003e ecs \u003d createCompletionService(exec);\n+      localizeFiles(nodeManager, ecs, ugi);\n       return 0;\n     } catch (Throwable e) {\n       // Print traces to stdout so that they can be logged by the NM address\n       // space.\n       e.printStackTrace(System.out);\n       return -1;\n     } finally {\n       if (exec !\u003d null) {\n         exec.shutdownNow();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int runLocalization(final InetSocketAddress nmAddr)\n      throws IOException, InterruptedException {\n    // load credentials\n    initDirs(conf, user, appId, lfs, localDirs);\n    final Credentials creds \u003d new Credentials();\n    DataInputStream credFile \u003d null;\n    try {\n      // assume credentials in cwd\n      // TODO: Fix\n      credFile \u003d lfs.open(\n          new Path(String.format(TOKEN_FILE_NAME_FMT, localizerId)));\n      creds.readTokenStorageStream(credFile);\n    } finally  {\n      if (credFile !\u003d null) {\n        credFile.close();\n      }\n    }\n    // create localizer context\n    UserGroupInformation remoteUser \u003d\n      UserGroupInformation.createRemoteUser(user);\n    LocalizerTokenSecretManager secretManager \u003d\n      new LocalizerTokenSecretManager();\n    LocalizerTokenIdentifier id \u003d secretManager.createIdentifier();\n    Token\u003cLocalizerTokenIdentifier\u003e localizerToken \u003d\n      new Token\u003cLocalizerTokenIdentifier\u003e(id, secretManager);\n    remoteUser.addToken(localizerToken);\n    final LocalizationProtocol nodeManager \u003d\n        remoteUser.doAs(new PrivilegedAction\u003cLocalizationProtocol\u003e() {\n          @Override\n          public LocalizationProtocol run() {\n            return getProxy(nmAddr);\n          }\n        });\n\n    // create user context\n    UserGroupInformation ugi \u003d\n      UserGroupInformation.createRemoteUser(user);\n    for (Token\u003c? extends TokenIdentifier\u003e token : creds.getAllTokens()) {\n      ugi.addToken(token);\n    }\n\n    ExecutorService exec \u003d null;\n    try {\n      exec \u003d createDownloadThreadPool();\n      CompletionService\u003cPath\u003e ecs \u003d createCompletionService(exec);\n      localizeFiles(nodeManager, ecs, ugi);\n      return 0;\n    } catch (Throwable e) {\n      // Print traces to stdout so that they can be logged by the NM address\n      // space.\n      e.printStackTrace(System.out);\n      return -1;\n    } finally {\n      if (exec !\u003d null) {\n        exec.shutdownNow();\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public int runLocalization(final InetSocketAddress nmAddr)\n      throws IOException, InterruptedException {\n    // load credentials\n    initDirs(conf, user, appId, lfs, localDirs);\n    final Credentials creds \u003d new Credentials();\n    DataInputStream credFile \u003d null;\n    try {\n      // assume credentials in cwd\n      // TODO: Fix\n      credFile \u003d lfs.open(\n          new Path(String.format(TOKEN_FILE_NAME_FMT, localizerId)));\n      creds.readTokenStorageStream(credFile);\n    } finally  {\n      if (credFile !\u003d null) {\n        credFile.close();\n      }\n    }\n    // create localizer context\n    UserGroupInformation remoteUser \u003d\n      UserGroupInformation.createRemoteUser(user);\n    LocalizerTokenSecretManager secretManager \u003d\n      new LocalizerTokenSecretManager();\n    LocalizerTokenIdentifier id \u003d secretManager.createIdentifier();\n    Token\u003cLocalizerTokenIdentifier\u003e localizerToken \u003d\n      new Token\u003cLocalizerTokenIdentifier\u003e(id, secretManager);\n    remoteUser.addToken(localizerToken);\n    final LocalizationProtocol nodeManager \u003d\n        remoteUser.doAs(new PrivilegedAction\u003cLocalizationProtocol\u003e() {\n          @Override\n          public LocalizationProtocol run() {\n            return getProxy(nmAddr);\n          }\n        });\n\n    // create user context\n    UserGroupInformation ugi \u003d\n      UserGroupInformation.createRemoteUser(user);\n    for (Token\u003c? extends TokenIdentifier\u003e token : creds.getAllTokens()) {\n      ugi.addToken(token);\n    }\n\n    ExecutorService exec \u003d null;\n    try {\n      exec \u003d createDownloadThreadPool();\n      localizeFiles(nodeManager, exec, ugi);\n      return 0;\n    } catch (Throwable e) {\n      // Print traces to stdout so that they can be logged by the NM address\n      // space.\n      e.printStackTrace(System.out);\n      return -1;\n    } finally {\n      if (exec !\u003d null) {\n        exec.shutdownNow();\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,57 @@\n+  public int runLocalization(final InetSocketAddress nmAddr)\n+      throws IOException, InterruptedException {\n+    // load credentials\n+    initDirs(conf, user, appId, lfs, localDirs);\n+    final Credentials creds \u003d new Credentials();\n+    DataInputStream credFile \u003d null;\n+    try {\n+      // assume credentials in cwd\n+      // TODO: Fix\n+      credFile \u003d lfs.open(\n+          new Path(String.format(TOKEN_FILE_NAME_FMT, localizerId)));\n+      creds.readTokenStorageStream(credFile);\n+    } finally  {\n+      if (credFile !\u003d null) {\n+        credFile.close();\n+      }\n+    }\n+    // create localizer context\n+    UserGroupInformation remoteUser \u003d\n+      UserGroupInformation.createRemoteUser(user);\n+    LocalizerTokenSecretManager secretManager \u003d\n+      new LocalizerTokenSecretManager();\n+    LocalizerTokenIdentifier id \u003d secretManager.createIdentifier();\n+    Token\u003cLocalizerTokenIdentifier\u003e localizerToken \u003d\n+      new Token\u003cLocalizerTokenIdentifier\u003e(id, secretManager);\n+    remoteUser.addToken(localizerToken);\n+    final LocalizationProtocol nodeManager \u003d\n+        remoteUser.doAs(new PrivilegedAction\u003cLocalizationProtocol\u003e() {\n+          @Override\n+          public LocalizationProtocol run() {\n+            return getProxy(nmAddr);\n+          }\n+        });\n+\n+    // create user context\n+    UserGroupInformation ugi \u003d\n+      UserGroupInformation.createRemoteUser(user);\n+    for (Token\u003c? extends TokenIdentifier\u003e token : creds.getAllTokens()) {\n+      ugi.addToken(token);\n+    }\n+\n+    ExecutorService exec \u003d null;\n+    try {\n+      exec \u003d createDownloadThreadPool();\n+      localizeFiles(nodeManager, exec, ugi);\n+      return 0;\n+    } catch (Throwable e) {\n+      // Print traces to stdout so that they can be logged by the NM address\n+      // space.\n+      e.printStackTrace(System.out);\n+      return -1;\n+    } finally {\n+      if (exec !\u003d null) {\n+        exec.shutdownNow();\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public int runLocalization(final InetSocketAddress nmAddr)\n      throws IOException, InterruptedException {\n    // load credentials\n    initDirs(conf, user, appId, lfs, localDirs);\n    final Credentials creds \u003d new Credentials();\n    DataInputStream credFile \u003d null;\n    try {\n      // assume credentials in cwd\n      // TODO: Fix\n      credFile \u003d lfs.open(\n          new Path(String.format(TOKEN_FILE_NAME_FMT, localizerId)));\n      creds.readTokenStorageStream(credFile);\n    } finally  {\n      if (credFile !\u003d null) {\n        credFile.close();\n      }\n    }\n    // create localizer context\n    UserGroupInformation remoteUser \u003d\n      UserGroupInformation.createRemoteUser(user);\n    LocalizerTokenSecretManager secretManager \u003d\n      new LocalizerTokenSecretManager();\n    LocalizerTokenIdentifier id \u003d secretManager.createIdentifier();\n    Token\u003cLocalizerTokenIdentifier\u003e localizerToken \u003d\n      new Token\u003cLocalizerTokenIdentifier\u003e(id, secretManager);\n    remoteUser.addToken(localizerToken);\n    final LocalizationProtocol nodeManager \u003d\n        remoteUser.doAs(new PrivilegedAction\u003cLocalizationProtocol\u003e() {\n          @Override\n          public LocalizationProtocol run() {\n            return getProxy(nmAddr);\n          }\n        });\n\n    // create user context\n    UserGroupInformation ugi \u003d\n      UserGroupInformation.createRemoteUser(user);\n    for (Token\u003c? extends TokenIdentifier\u003e token : creds.getAllTokens()) {\n      ugi.addToken(token);\n    }\n\n    ExecutorService exec \u003d null;\n    try {\n      exec \u003d createDownloadThreadPool();\n      localizeFiles(nodeManager, exec, ugi);\n      return 0;\n    } catch (Throwable e) {\n      // Print traces to stdout so that they can be logged by the NM address\n      // space.\n      e.printStackTrace(System.out);\n      return -1;\n    } finally {\n      if (exec !\u003d null) {\n        exec.shutdownNow();\n      }\n    }\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/localizer/ContainerLocalizer.java"
    }
  }
}