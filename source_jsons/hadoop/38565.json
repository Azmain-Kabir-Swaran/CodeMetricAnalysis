{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FifoAppAttempt.java",
  "functionName": "allocate",
  "functionId": "allocate___type-NodeType__node-FiCaSchedulerNode__schedulerKey-SchedulerRequestKey__container-Container",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoAppAttempt.java",
  "functionStartLine": 55,
  "functionEndLine": 119,
  "numCommitsSeen": 12,
  "timeTaken": 5187,
  "changeHistory": [
    "c30c23cb665761e997bcfc1dc00908f70b069fa2",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "2ab611d48b7669b31bd2c9b918f47251da77d0f6",
    "a957f1c60e1308d1d70a1803381994f59949c5f8",
    "2977bc6a141041ef7579efc416e93fc55e0c2a1a",
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c"
  ],
  "changeHistoryShort": {
    "c30c23cb665761e997bcfc1dc00908f70b069fa2": "Ybodychange",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "2ab611d48b7669b31bd2c9b918f47251da77d0f6": "Ybodychange",
    "a957f1c60e1308d1d70a1803381994f59949c5f8": "Ybodychange",
    "2977bc6a141041ef7579efc416e93fc55e0c2a1a": "Ymultichange(Yparameterchange,Ybodychange)",
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4": "Ybodychange",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c30c23cb665761e997bcfc1dc00908f70b069fa2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6492. Generate queue metrics for each partition. Contributed by Manikandan R\n",
      "commitDate": "26/05/20 4:29 PM",
      "commitName": "c30c23cb665761e997bcfc1dc00908f70b069fa2",
      "commitAuthor": "Jonathan Hung",
      "commitDateOld": "07/03/19 1:47 PM",
      "commitNameOld": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 446.07,
      "commitsBetweenForRepo": 2472,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,65 @@\n   public RMContainer allocate(NodeType type, FiCaSchedulerNode node,\n       SchedulerRequestKey schedulerKey, Container container) {\n \n     writeLock.lock();\n     try {\n       if (isStopped) {\n         return null;\n       }\n \n       // Required sanity check - AM can call \u0027allocate\u0027 to update resource\n       // request without locking the scheduler, hence we need to check\n       if (getOutstandingAsksCount(schedulerKey) \u003c\u003d 0) {\n         return null;\n       }\n \n       // Create RMContainer\n       RMContainer rmContainer \u003d new RMContainerImpl(container,\n           schedulerKey, this.getApplicationAttemptId(), node.getNodeID(),\n           appSchedulingInfo.getUser(), this.rmContext, node.getPartition());\n       ((RMContainerImpl) rmContainer).setQueueName(this.getQueueName());\n \n       updateAMContainerDiagnostics(AMState.ASSIGNED, null);\n \n       // Add it to allContainers list.\n       addToNewlyAllocatedContainers(node, rmContainer);\n \n       ContainerId containerId \u003d container.getId();\n       liveContainers.put(containerId, rmContainer);\n \n       // Update consumption and track allocations\n       ContainerRequest containerRequest \u003d appSchedulingInfo.allocate(\n-          type, node, schedulerKey, container);\n+            type, node, schedulerKey, rmContainer);\n \n       attemptResourceUsage.incUsed(node.getPartition(),\n           container.getResource());\n \n       // Update resource requests related to \"request\" and store in RMContainer\n       ((RMContainerImpl) rmContainer).setContainerRequest(containerRequest);\n \n       // Inform the container\n       rmContainer.handle(\n           new RMContainerEvent(containerId, RMContainerEventType.START));\n \n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"allocate: applicationAttemptId\u003d\" + containerId\n             .getApplicationAttemptId() + \" container\u003d\" + containerId + \" host\u003d\"\n             + container.getNodeId().getHost() + \" type\u003d\" + type);\n       }\n       // In order to save space in the audit log, only include the partition\n       // if it is not the default partition.\n       String partition \u003d null;\n       if (appAMNodePartitionName !\u003d null \u0026\u0026\n             !appAMNodePartitionName.isEmpty()) {\n         partition \u003d appAMNodePartitionName;\n       }\n       RMAuditLogger.logSuccess(getUser(),\n           RMAuditLogger.AuditConstants.ALLOC_CONTAINER, \"SchedulerApp\",\n           getApplicationId(), containerId, container.getResource(),\n           getQueueName(), partition);\n \n       return rmContainer;\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RMContainer allocate(NodeType type, FiCaSchedulerNode node,\n      SchedulerRequestKey schedulerKey, Container container) {\n\n    writeLock.lock();\n    try {\n      if (isStopped) {\n        return null;\n      }\n\n      // Required sanity check - AM can call \u0027allocate\u0027 to update resource\n      // request without locking the scheduler, hence we need to check\n      if (getOutstandingAsksCount(schedulerKey) \u003c\u003d 0) {\n        return null;\n      }\n\n      // Create RMContainer\n      RMContainer rmContainer \u003d new RMContainerImpl(container,\n          schedulerKey, this.getApplicationAttemptId(), node.getNodeID(),\n          appSchedulingInfo.getUser(), this.rmContext, node.getPartition());\n      ((RMContainerImpl) rmContainer).setQueueName(this.getQueueName());\n\n      updateAMContainerDiagnostics(AMState.ASSIGNED, null);\n\n      // Add it to allContainers list.\n      addToNewlyAllocatedContainers(node, rmContainer);\n\n      ContainerId containerId \u003d container.getId();\n      liveContainers.put(containerId, rmContainer);\n\n      // Update consumption and track allocations\n      ContainerRequest containerRequest \u003d appSchedulingInfo.allocate(\n            type, node, schedulerKey, rmContainer);\n\n      attemptResourceUsage.incUsed(node.getPartition(),\n          container.getResource());\n\n      // Update resource requests related to \"request\" and store in RMContainer\n      ((RMContainerImpl) rmContainer).setContainerRequest(containerRequest);\n\n      // Inform the container\n      rmContainer.handle(\n          new RMContainerEvent(containerId, RMContainerEventType.START));\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"allocate: applicationAttemptId\u003d\" + containerId\n            .getApplicationAttemptId() + \" container\u003d\" + containerId + \" host\u003d\"\n            + container.getNodeId().getHost() + \" type\u003d\" + type);\n      }\n      // In order to save space in the audit log, only include the partition\n      // if it is not the default partition.\n      String partition \u003d null;\n      if (appAMNodePartitionName !\u003d null \u0026\u0026\n            !appAMNodePartitionName.isEmpty()) {\n        partition \u003d appAMNodePartitionName;\n      }\n      RMAuditLogger.logSuccess(getUser(),\n          RMAuditLogger.AuditConstants.ALLOC_CONTAINER, \"SchedulerApp\",\n          getApplicationId(), containerId, container.getResource(),\n          getQueueName(), partition);\n\n      return rmContainer;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoAppAttempt.java",
      "extendedDetails": {}
    },
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 2.69,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,65 @@\n   public RMContainer allocate(NodeType type, FiCaSchedulerNode node,\n       SchedulerRequestKey schedulerKey, Container container) {\n-    try {\n-      writeLock.lock();\n \n+    writeLock.lock();\n+    try {\n       if (isStopped) {\n         return null;\n       }\n \n       // Required sanity check - AM can call \u0027allocate\u0027 to update resource\n       // request without locking the scheduler, hence we need to check\n       if (getOutstandingAsksCount(schedulerKey) \u003c\u003d 0) {\n         return null;\n       }\n \n       // Create RMContainer\n       RMContainer rmContainer \u003d new RMContainerImpl(container,\n           schedulerKey, this.getApplicationAttemptId(), node.getNodeID(),\n           appSchedulingInfo.getUser(), this.rmContext, node.getPartition());\n       ((RMContainerImpl) rmContainer).setQueueName(this.getQueueName());\n \n       updateAMContainerDiagnostics(AMState.ASSIGNED, null);\n \n       // Add it to allContainers list.\n       addToNewlyAllocatedContainers(node, rmContainer);\n \n       ContainerId containerId \u003d container.getId();\n       liveContainers.put(containerId, rmContainer);\n \n       // Update consumption and track allocations\n       ContainerRequest containerRequest \u003d appSchedulingInfo.allocate(\n           type, node, schedulerKey, container);\n \n       attemptResourceUsage.incUsed(node.getPartition(),\n           container.getResource());\n \n       // Update resource requests related to \"request\" and store in RMContainer\n       ((RMContainerImpl) rmContainer).setContainerRequest(containerRequest);\n \n       // Inform the container\n       rmContainer.handle(\n           new RMContainerEvent(containerId, RMContainerEventType.START));\n \n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"allocate: applicationAttemptId\u003d\" + containerId\n             .getApplicationAttemptId() + \" container\u003d\" + containerId + \" host\u003d\"\n             + container.getNodeId().getHost() + \" type\u003d\" + type);\n       }\n       // In order to save space in the audit log, only include the partition\n       // if it is not the default partition.\n       String partition \u003d null;\n       if (appAMNodePartitionName !\u003d null \u0026\u0026\n             !appAMNodePartitionName.isEmpty()) {\n         partition \u003d appAMNodePartitionName;\n       }\n       RMAuditLogger.logSuccess(getUser(),\n           RMAuditLogger.AuditConstants.ALLOC_CONTAINER, \"SchedulerApp\",\n           getApplicationId(), containerId, container.getResource(),\n           getQueueName(), partition);\n \n       return rmContainer;\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RMContainer allocate(NodeType type, FiCaSchedulerNode node,\n      SchedulerRequestKey schedulerKey, Container container) {\n\n    writeLock.lock();\n    try {\n      if (isStopped) {\n        return null;\n      }\n\n      // Required sanity check - AM can call \u0027allocate\u0027 to update resource\n      // request without locking the scheduler, hence we need to check\n      if (getOutstandingAsksCount(schedulerKey) \u003c\u003d 0) {\n        return null;\n      }\n\n      // Create RMContainer\n      RMContainer rmContainer \u003d new RMContainerImpl(container,\n          schedulerKey, this.getApplicationAttemptId(), node.getNodeID(),\n          appSchedulingInfo.getUser(), this.rmContext, node.getPartition());\n      ((RMContainerImpl) rmContainer).setQueueName(this.getQueueName());\n\n      updateAMContainerDiagnostics(AMState.ASSIGNED, null);\n\n      // Add it to allContainers list.\n      addToNewlyAllocatedContainers(node, rmContainer);\n\n      ContainerId containerId \u003d container.getId();\n      liveContainers.put(containerId, rmContainer);\n\n      // Update consumption and track allocations\n      ContainerRequest containerRequest \u003d appSchedulingInfo.allocate(\n          type, node, schedulerKey, container);\n\n      attemptResourceUsage.incUsed(node.getPartition(),\n          container.getResource());\n\n      // Update resource requests related to \"request\" and store in RMContainer\n      ((RMContainerImpl) rmContainer).setContainerRequest(containerRequest);\n\n      // Inform the container\n      rmContainer.handle(\n          new RMContainerEvent(containerId, RMContainerEventType.START));\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"allocate: applicationAttemptId\u003d\" + containerId\n            .getApplicationAttemptId() + \" container\u003d\" + containerId + \" host\u003d\"\n            + container.getNodeId().getHost() + \" type\u003d\" + type);\n      }\n      // In order to save space in the audit log, only include the partition\n      // if it is not the default partition.\n      String partition \u003d null;\n      if (appAMNodePartitionName !\u003d null \u0026\u0026\n            !appAMNodePartitionName.isEmpty()) {\n        partition \u003d appAMNodePartitionName;\n      }\n      RMAuditLogger.logSuccess(getUser(),\n          RMAuditLogger.AuditConstants.ALLOC_CONTAINER, \"SchedulerApp\",\n          getApplicationId(), containerId, container.getResource(),\n          getQueueName(), partition);\n\n      return rmContainer;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoAppAttempt.java",
      "extendedDetails": {}
    },
    "2ab611d48b7669b31bd2c9b918f47251da77d0f6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7225. Add queue and partition info to RM audit log. Contributed by Eric Payne\n",
      "commitDate": "01/11/18 2:22 PM",
      "commitName": "2ab611d48b7669b31bd2c9b918f47251da77d0f6",
      "commitAuthor": "Jonathan Hung",
      "commitDateOld": "05/12/17 9:20 AM",
      "commitNameOld": "a957f1c60e1308d1d70a1803381994f59949c5f8",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 331.17,
      "commitsBetweenForRepo": 3089,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,65 @@\n   public RMContainer allocate(NodeType type, FiCaSchedulerNode node,\n       SchedulerRequestKey schedulerKey, Container container) {\n     try {\n       writeLock.lock();\n \n       if (isStopped) {\n         return null;\n       }\n \n       // Required sanity check - AM can call \u0027allocate\u0027 to update resource\n       // request without locking the scheduler, hence we need to check\n       if (getOutstandingAsksCount(schedulerKey) \u003c\u003d 0) {\n         return null;\n       }\n \n       // Create RMContainer\n       RMContainer rmContainer \u003d new RMContainerImpl(container,\n           schedulerKey, this.getApplicationAttemptId(), node.getNodeID(),\n           appSchedulingInfo.getUser(), this.rmContext, node.getPartition());\n       ((RMContainerImpl) rmContainer).setQueueName(this.getQueueName());\n \n       updateAMContainerDiagnostics(AMState.ASSIGNED, null);\n \n       // Add it to allContainers list.\n       addToNewlyAllocatedContainers(node, rmContainer);\n \n       ContainerId containerId \u003d container.getId();\n       liveContainers.put(containerId, rmContainer);\n \n       // Update consumption and track allocations\n       ContainerRequest containerRequest \u003d appSchedulingInfo.allocate(\n           type, node, schedulerKey, container);\n \n       attemptResourceUsage.incUsed(node.getPartition(),\n           container.getResource());\n \n       // Update resource requests related to \"request\" and store in RMContainer\n       ((RMContainerImpl) rmContainer).setContainerRequest(containerRequest);\n \n       // Inform the container\n       rmContainer.handle(\n           new RMContainerEvent(containerId, RMContainerEventType.START));\n \n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"allocate: applicationAttemptId\u003d\" + containerId\n             .getApplicationAttemptId() + \" container\u003d\" + containerId + \" host\u003d\"\n             + container.getNodeId().getHost() + \" type\u003d\" + type);\n       }\n+      // In order to save space in the audit log, only include the partition\n+      // if it is not the default partition.\n+      String partition \u003d null;\n+      if (appAMNodePartitionName !\u003d null \u0026\u0026\n+            !appAMNodePartitionName.isEmpty()) {\n+        partition \u003d appAMNodePartitionName;\n+      }\n       RMAuditLogger.logSuccess(getUser(),\n           RMAuditLogger.AuditConstants.ALLOC_CONTAINER, \"SchedulerApp\",\n-          getApplicationId(), containerId, container.getResource());\n+          getApplicationId(), containerId, container.getResource(),\n+          getQueueName(), partition);\n \n       return rmContainer;\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RMContainer allocate(NodeType type, FiCaSchedulerNode node,\n      SchedulerRequestKey schedulerKey, Container container) {\n    try {\n      writeLock.lock();\n\n      if (isStopped) {\n        return null;\n      }\n\n      // Required sanity check - AM can call \u0027allocate\u0027 to update resource\n      // request without locking the scheduler, hence we need to check\n      if (getOutstandingAsksCount(schedulerKey) \u003c\u003d 0) {\n        return null;\n      }\n\n      // Create RMContainer\n      RMContainer rmContainer \u003d new RMContainerImpl(container,\n          schedulerKey, this.getApplicationAttemptId(), node.getNodeID(),\n          appSchedulingInfo.getUser(), this.rmContext, node.getPartition());\n      ((RMContainerImpl) rmContainer).setQueueName(this.getQueueName());\n\n      updateAMContainerDiagnostics(AMState.ASSIGNED, null);\n\n      // Add it to allContainers list.\n      addToNewlyAllocatedContainers(node, rmContainer);\n\n      ContainerId containerId \u003d container.getId();\n      liveContainers.put(containerId, rmContainer);\n\n      // Update consumption and track allocations\n      ContainerRequest containerRequest \u003d appSchedulingInfo.allocate(\n          type, node, schedulerKey, container);\n\n      attemptResourceUsage.incUsed(node.getPartition(),\n          container.getResource());\n\n      // Update resource requests related to \"request\" and store in RMContainer\n      ((RMContainerImpl) rmContainer).setContainerRequest(containerRequest);\n\n      // Inform the container\n      rmContainer.handle(\n          new RMContainerEvent(containerId, RMContainerEventType.START));\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"allocate: applicationAttemptId\u003d\" + containerId\n            .getApplicationAttemptId() + \" container\u003d\" + containerId + \" host\u003d\"\n            + container.getNodeId().getHost() + \" type\u003d\" + type);\n      }\n      // In order to save space in the audit log, only include the partition\n      // if it is not the default partition.\n      String partition \u003d null;\n      if (appAMNodePartitionName !\u003d null \u0026\u0026\n            !appAMNodePartitionName.isEmpty()) {\n        partition \u003d appAMNodePartitionName;\n      }\n      RMAuditLogger.logSuccess(getUser(),\n          RMAuditLogger.AuditConstants.ALLOC_CONTAINER, \"SchedulerApp\",\n          getApplicationId(), containerId, container.getResource(),\n          getQueueName(), partition);\n\n      return rmContainer;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoAppAttempt.java",
      "extendedDetails": {}
    },
    "a957f1c60e1308d1d70a1803381994f59949c5f8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7438. Additional changes to make SchedulingPlacementSet agnostic to ResourceRequest / placement algorithm. Contributed by Wangda Tan\n",
      "commitDate": "05/12/17 9:20 AM",
      "commitName": "a957f1c60e1308d1d70a1803381994f59949c5f8",
      "commitAuthor": "Sunil G",
      "commitDateOld": "06/01/17 9:59 AM",
      "commitNameOld": "2977bc6a141041ef7579efc416e93fc55e0c2a1a",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 332.97,
      "commitsBetweenForRepo": 2172,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,57 @@\n   public RMContainer allocate(NodeType type, FiCaSchedulerNode node,\n       SchedulerRequestKey schedulerKey, Container container) {\n     try {\n       writeLock.lock();\n \n       if (isStopped) {\n         return null;\n       }\n \n       // Required sanity check - AM can call \u0027allocate\u0027 to update resource\n       // request without locking the scheduler, hence we need to check\n       if (getOutstandingAsksCount(schedulerKey) \u003c\u003d 0) {\n         return null;\n       }\n \n       // Create RMContainer\n       RMContainer rmContainer \u003d new RMContainerImpl(container,\n           schedulerKey, this.getApplicationAttemptId(), node.getNodeID(),\n           appSchedulingInfo.getUser(), this.rmContext, node.getPartition());\n       ((RMContainerImpl) rmContainer).setQueueName(this.getQueueName());\n \n       updateAMContainerDiagnostics(AMState.ASSIGNED, null);\n \n       // Add it to allContainers list.\n       addToNewlyAllocatedContainers(node, rmContainer);\n \n       ContainerId containerId \u003d container.getId();\n       liveContainers.put(containerId, rmContainer);\n \n       // Update consumption and track allocations\n-      List\u003cResourceRequest\u003e resourceRequestList \u003d appSchedulingInfo.allocate(\n+      ContainerRequest containerRequest \u003d appSchedulingInfo.allocate(\n           type, node, schedulerKey, container);\n \n       attemptResourceUsage.incUsed(node.getPartition(),\n           container.getResource());\n \n       // Update resource requests related to \"request\" and store in RMContainer\n-      ((RMContainerImpl) rmContainer).setResourceRequests(resourceRequestList);\n+      ((RMContainerImpl) rmContainer).setContainerRequest(containerRequest);\n \n       // Inform the container\n       rmContainer.handle(\n           new RMContainerEvent(containerId, RMContainerEventType.START));\n \n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"allocate: applicationAttemptId\u003d\" + containerId\n             .getApplicationAttemptId() + \" container\u003d\" + containerId + \" host\u003d\"\n             + container.getNodeId().getHost() + \" type\u003d\" + type);\n       }\n       RMAuditLogger.logSuccess(getUser(),\n           RMAuditLogger.AuditConstants.ALLOC_CONTAINER, \"SchedulerApp\",\n           getApplicationId(), containerId, container.getResource());\n \n       return rmContainer;\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RMContainer allocate(NodeType type, FiCaSchedulerNode node,\n      SchedulerRequestKey schedulerKey, Container container) {\n    try {\n      writeLock.lock();\n\n      if (isStopped) {\n        return null;\n      }\n\n      // Required sanity check - AM can call \u0027allocate\u0027 to update resource\n      // request without locking the scheduler, hence we need to check\n      if (getOutstandingAsksCount(schedulerKey) \u003c\u003d 0) {\n        return null;\n      }\n\n      // Create RMContainer\n      RMContainer rmContainer \u003d new RMContainerImpl(container,\n          schedulerKey, this.getApplicationAttemptId(), node.getNodeID(),\n          appSchedulingInfo.getUser(), this.rmContext, node.getPartition());\n      ((RMContainerImpl) rmContainer).setQueueName(this.getQueueName());\n\n      updateAMContainerDiagnostics(AMState.ASSIGNED, null);\n\n      // Add it to allContainers list.\n      addToNewlyAllocatedContainers(node, rmContainer);\n\n      ContainerId containerId \u003d container.getId();\n      liveContainers.put(containerId, rmContainer);\n\n      // Update consumption and track allocations\n      ContainerRequest containerRequest \u003d appSchedulingInfo.allocate(\n          type, node, schedulerKey, container);\n\n      attemptResourceUsage.incUsed(node.getPartition(),\n          container.getResource());\n\n      // Update resource requests related to \"request\" and store in RMContainer\n      ((RMContainerImpl) rmContainer).setContainerRequest(containerRequest);\n\n      // Inform the container\n      rmContainer.handle(\n          new RMContainerEvent(containerId, RMContainerEventType.START));\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"allocate: applicationAttemptId\u003d\" + containerId\n            .getApplicationAttemptId() + \" container\u003d\" + containerId + \" host\u003d\"\n            + container.getNodeId().getHost() + \" type\u003d\" + type);\n      }\n      RMAuditLogger.logSuccess(getUser(),\n          RMAuditLogger.AuditConstants.ALLOC_CONTAINER, \"SchedulerApp\",\n          getApplicationId(), containerId, container.getResource());\n\n      return rmContainer;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoAppAttempt.java",
      "extendedDetails": {}
    },
    "2977bc6a141041ef7579efc416e93fc55e0c2a1a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-6040. Introduce api independent PendingAsk to replace usage of ResourceRequest within Scheduler classes. (Wangda Tan via asuresh)\n",
      "commitDate": "06/01/17 9:59 AM",
      "commitName": "2977bc6a141041ef7579efc416e93fc55e0c2a1a",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6040. Introduce api independent PendingAsk to replace usage of ResourceRequest within Scheduler classes. (Wangda Tan via asuresh)\n",
          "commitDate": "06/01/17 9:59 AM",
          "commitName": "2977bc6a141041ef7579efc416e93fc55e0c2a1a",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "05/01/17 10:31 AM",
          "commitNameOld": "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.98,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,59 +1,57 @@\n   public RMContainer allocate(NodeType type, FiCaSchedulerNode node,\n-      SchedulerRequestKey schedulerKey, ResourceRequest request,\n-      Container container) {\n+      SchedulerRequestKey schedulerKey, Container container) {\n     try {\n       writeLock.lock();\n \n       if (isStopped) {\n         return null;\n       }\n \n       // Required sanity check - AM can call \u0027allocate\u0027 to update resource\n       // request without locking the scheduler, hence we need to check\n-      if (getTotalRequiredResources(schedulerKey) \u003c\u003d 0) {\n+      if (getOutstandingAsksCount(schedulerKey) \u003c\u003d 0) {\n         return null;\n       }\n \n       // Create RMContainer\n       RMContainer rmContainer \u003d new RMContainerImpl(container,\n           schedulerKey, this.getApplicationAttemptId(), node.getNodeID(),\n-          appSchedulingInfo.getUser(), this.rmContext,\n-          request.getNodeLabelExpression());\n+          appSchedulingInfo.getUser(), this.rmContext, node.getPartition());\n       ((RMContainerImpl) rmContainer).setQueueName(this.getQueueName());\n \n       updateAMContainerDiagnostics(AMState.ASSIGNED, null);\n \n       // Add it to allContainers list.\n       addToNewlyAllocatedContainers(node, rmContainer);\n \n       ContainerId containerId \u003d container.getId();\n       liveContainers.put(containerId, rmContainer);\n \n       // Update consumption and track allocations\n       List\u003cResourceRequest\u003e resourceRequestList \u003d appSchedulingInfo.allocate(\n-          type, node, schedulerKey, request, container);\n+          type, node, schedulerKey, container);\n \n       attemptResourceUsage.incUsed(node.getPartition(),\n           container.getResource());\n \n       // Update resource requests related to \"request\" and store in RMContainer\n       ((RMContainerImpl) rmContainer).setResourceRequests(resourceRequestList);\n \n       // Inform the container\n       rmContainer.handle(\n           new RMContainerEvent(containerId, RMContainerEventType.START));\n \n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"allocate: applicationAttemptId\u003d\" + containerId\n             .getApplicationAttemptId() + \" container\u003d\" + containerId + \" host\u003d\"\n             + container.getNodeId().getHost() + \" type\u003d\" + type);\n       }\n       RMAuditLogger.logSuccess(getUser(),\n           RMAuditLogger.AuditConstants.ALLOC_CONTAINER, \"SchedulerApp\",\n           getApplicationId(), containerId, container.getResource());\n \n       return rmContainer;\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RMContainer allocate(NodeType type, FiCaSchedulerNode node,\n      SchedulerRequestKey schedulerKey, Container container) {\n    try {\n      writeLock.lock();\n\n      if (isStopped) {\n        return null;\n      }\n\n      // Required sanity check - AM can call \u0027allocate\u0027 to update resource\n      // request without locking the scheduler, hence we need to check\n      if (getOutstandingAsksCount(schedulerKey) \u003c\u003d 0) {\n        return null;\n      }\n\n      // Create RMContainer\n      RMContainer rmContainer \u003d new RMContainerImpl(container,\n          schedulerKey, this.getApplicationAttemptId(), node.getNodeID(),\n          appSchedulingInfo.getUser(), this.rmContext, node.getPartition());\n      ((RMContainerImpl) rmContainer).setQueueName(this.getQueueName());\n\n      updateAMContainerDiagnostics(AMState.ASSIGNED, null);\n\n      // Add it to allContainers list.\n      addToNewlyAllocatedContainers(node, rmContainer);\n\n      ContainerId containerId \u003d container.getId();\n      liveContainers.put(containerId, rmContainer);\n\n      // Update consumption and track allocations\n      List\u003cResourceRequest\u003e resourceRequestList \u003d appSchedulingInfo.allocate(\n          type, node, schedulerKey, container);\n\n      attemptResourceUsage.incUsed(node.getPartition(),\n          container.getResource());\n\n      // Update resource requests related to \"request\" and store in RMContainer\n      ((RMContainerImpl) rmContainer).setResourceRequests(resourceRequestList);\n\n      // Inform the container\n      rmContainer.handle(\n          new RMContainerEvent(containerId, RMContainerEventType.START));\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"allocate: applicationAttemptId\u003d\" + containerId\n            .getApplicationAttemptId() + \" container\u003d\" + containerId + \" host\u003d\"\n            + container.getNodeId().getHost() + \" type\u003d\" + type);\n      }\n      RMAuditLogger.logSuccess(getUser(),\n          RMAuditLogger.AuditConstants.ALLOC_CONTAINER, \"SchedulerApp\",\n          getApplicationId(), containerId, container.getResource());\n\n      return rmContainer;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoAppAttempt.java",
          "extendedDetails": {
            "oldValue": "[type-NodeType, node-FiCaSchedulerNode, schedulerKey-SchedulerRequestKey, request-ResourceRequest, container-Container]",
            "newValue": "[type-NodeType, node-FiCaSchedulerNode, schedulerKey-SchedulerRequestKey, container-Container]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6040. Introduce api independent PendingAsk to replace usage of ResourceRequest within Scheduler classes. (Wangda Tan via asuresh)\n",
          "commitDate": "06/01/17 9:59 AM",
          "commitName": "2977bc6a141041ef7579efc416e93fc55e0c2a1a",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "05/01/17 10:31 AM",
          "commitNameOld": "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.98,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,59 +1,57 @@\n   public RMContainer allocate(NodeType type, FiCaSchedulerNode node,\n-      SchedulerRequestKey schedulerKey, ResourceRequest request,\n-      Container container) {\n+      SchedulerRequestKey schedulerKey, Container container) {\n     try {\n       writeLock.lock();\n \n       if (isStopped) {\n         return null;\n       }\n \n       // Required sanity check - AM can call \u0027allocate\u0027 to update resource\n       // request without locking the scheduler, hence we need to check\n-      if (getTotalRequiredResources(schedulerKey) \u003c\u003d 0) {\n+      if (getOutstandingAsksCount(schedulerKey) \u003c\u003d 0) {\n         return null;\n       }\n \n       // Create RMContainer\n       RMContainer rmContainer \u003d new RMContainerImpl(container,\n           schedulerKey, this.getApplicationAttemptId(), node.getNodeID(),\n-          appSchedulingInfo.getUser(), this.rmContext,\n-          request.getNodeLabelExpression());\n+          appSchedulingInfo.getUser(), this.rmContext, node.getPartition());\n       ((RMContainerImpl) rmContainer).setQueueName(this.getQueueName());\n \n       updateAMContainerDiagnostics(AMState.ASSIGNED, null);\n \n       // Add it to allContainers list.\n       addToNewlyAllocatedContainers(node, rmContainer);\n \n       ContainerId containerId \u003d container.getId();\n       liveContainers.put(containerId, rmContainer);\n \n       // Update consumption and track allocations\n       List\u003cResourceRequest\u003e resourceRequestList \u003d appSchedulingInfo.allocate(\n-          type, node, schedulerKey, request, container);\n+          type, node, schedulerKey, container);\n \n       attemptResourceUsage.incUsed(node.getPartition(),\n           container.getResource());\n \n       // Update resource requests related to \"request\" and store in RMContainer\n       ((RMContainerImpl) rmContainer).setResourceRequests(resourceRequestList);\n \n       // Inform the container\n       rmContainer.handle(\n           new RMContainerEvent(containerId, RMContainerEventType.START));\n \n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"allocate: applicationAttemptId\u003d\" + containerId\n             .getApplicationAttemptId() + \" container\u003d\" + containerId + \" host\u003d\"\n             + container.getNodeId().getHost() + \" type\u003d\" + type);\n       }\n       RMAuditLogger.logSuccess(getUser(),\n           RMAuditLogger.AuditConstants.ALLOC_CONTAINER, \"SchedulerApp\",\n           getApplicationId(), containerId, container.getResource());\n \n       return rmContainer;\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RMContainer allocate(NodeType type, FiCaSchedulerNode node,\n      SchedulerRequestKey schedulerKey, Container container) {\n    try {\n      writeLock.lock();\n\n      if (isStopped) {\n        return null;\n      }\n\n      // Required sanity check - AM can call \u0027allocate\u0027 to update resource\n      // request without locking the scheduler, hence we need to check\n      if (getOutstandingAsksCount(schedulerKey) \u003c\u003d 0) {\n        return null;\n      }\n\n      // Create RMContainer\n      RMContainer rmContainer \u003d new RMContainerImpl(container,\n          schedulerKey, this.getApplicationAttemptId(), node.getNodeID(),\n          appSchedulingInfo.getUser(), this.rmContext, node.getPartition());\n      ((RMContainerImpl) rmContainer).setQueueName(this.getQueueName());\n\n      updateAMContainerDiagnostics(AMState.ASSIGNED, null);\n\n      // Add it to allContainers list.\n      addToNewlyAllocatedContainers(node, rmContainer);\n\n      ContainerId containerId \u003d container.getId();\n      liveContainers.put(containerId, rmContainer);\n\n      // Update consumption and track allocations\n      List\u003cResourceRequest\u003e resourceRequestList \u003d appSchedulingInfo.allocate(\n          type, node, schedulerKey, container);\n\n      attemptResourceUsage.incUsed(node.getPartition(),\n          container.getResource());\n\n      // Update resource requests related to \"request\" and store in RMContainer\n      ((RMContainerImpl) rmContainer).setResourceRequests(resourceRequestList);\n\n      // Inform the container\n      rmContainer.handle(\n          new RMContainerEvent(containerId, RMContainerEventType.START));\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"allocate: applicationAttemptId\u003d\" + containerId\n            .getApplicationAttemptId() + \" container\u003d\" + containerId + \" host\u003d\"\n            + container.getNodeId().getHost() + \" type\u003d\" + type);\n      }\n      RMAuditLogger.logSuccess(getUser(),\n          RMAuditLogger.AuditConstants.ALLOC_CONTAINER, \"SchedulerApp\",\n          getApplicationId(), containerId, container.getResource());\n\n      return rmContainer;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoAppAttempt.java",
          "extendedDetails": {}
        }
      ]
    },
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5959. RM changes to support change of container ExecutionType. (Arun Suresh via wangda)\n",
      "commitDate": "05/01/17 10:31 AM",
      "commitName": "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "27/12/16 12:40 PM",
      "commitNameOld": "ac1e5d4f77e3b9df8dcacb0b1f72eecc27931eb8",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 8.91,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,59 @@\n   public RMContainer allocate(NodeType type, FiCaSchedulerNode node,\n       SchedulerRequestKey schedulerKey, ResourceRequest request,\n       Container container) {\n     try {\n       writeLock.lock();\n \n       if (isStopped) {\n         return null;\n       }\n \n       // Required sanity check - AM can call \u0027allocate\u0027 to update resource\n       // request without locking the scheduler, hence we need to check\n       if (getTotalRequiredResources(schedulerKey) \u003c\u003d 0) {\n         return null;\n       }\n \n       // Create RMContainer\n       RMContainer rmContainer \u003d new RMContainerImpl(container,\n-          this.getApplicationAttemptId(), node.getNodeID(),\n+          schedulerKey, this.getApplicationAttemptId(), node.getNodeID(),\n           appSchedulingInfo.getUser(), this.rmContext,\n           request.getNodeLabelExpression());\n       ((RMContainerImpl) rmContainer).setQueueName(this.getQueueName());\n \n       updateAMContainerDiagnostics(AMState.ASSIGNED, null);\n \n       // Add it to allContainers list.\n-      newlyAllocatedContainers.add(rmContainer);\n+      addToNewlyAllocatedContainers(node, rmContainer);\n \n       ContainerId containerId \u003d container.getId();\n       liveContainers.put(containerId, rmContainer);\n \n       // Update consumption and track allocations\n       List\u003cResourceRequest\u003e resourceRequestList \u003d appSchedulingInfo.allocate(\n           type, node, schedulerKey, request, container);\n \n       attemptResourceUsage.incUsed(node.getPartition(),\n           container.getResource());\n \n       // Update resource requests related to \"request\" and store in RMContainer\n       ((RMContainerImpl) rmContainer).setResourceRequests(resourceRequestList);\n \n       // Inform the container\n       rmContainer.handle(\n           new RMContainerEvent(containerId, RMContainerEventType.START));\n \n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"allocate: applicationAttemptId\u003d\" + containerId\n             .getApplicationAttemptId() + \" container\u003d\" + containerId + \" host\u003d\"\n             + container.getNodeId().getHost() + \" type\u003d\" + type);\n       }\n       RMAuditLogger.logSuccess(getUser(),\n           RMAuditLogger.AuditConstants.ALLOC_CONTAINER, \"SchedulerApp\",\n           getApplicationId(), containerId, container.getResource());\n \n       return rmContainer;\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RMContainer allocate(NodeType type, FiCaSchedulerNode node,\n      SchedulerRequestKey schedulerKey, ResourceRequest request,\n      Container container) {\n    try {\n      writeLock.lock();\n\n      if (isStopped) {\n        return null;\n      }\n\n      // Required sanity check - AM can call \u0027allocate\u0027 to update resource\n      // request without locking the scheduler, hence we need to check\n      if (getTotalRequiredResources(schedulerKey) \u003c\u003d 0) {\n        return null;\n      }\n\n      // Create RMContainer\n      RMContainer rmContainer \u003d new RMContainerImpl(container,\n          schedulerKey, this.getApplicationAttemptId(), node.getNodeID(),\n          appSchedulingInfo.getUser(), this.rmContext,\n          request.getNodeLabelExpression());\n      ((RMContainerImpl) rmContainer).setQueueName(this.getQueueName());\n\n      updateAMContainerDiagnostics(AMState.ASSIGNED, null);\n\n      // Add it to allContainers list.\n      addToNewlyAllocatedContainers(node, rmContainer);\n\n      ContainerId containerId \u003d container.getId();\n      liveContainers.put(containerId, rmContainer);\n\n      // Update consumption and track allocations\n      List\u003cResourceRequest\u003e resourceRequestList \u003d appSchedulingInfo.allocate(\n          type, node, schedulerKey, request, container);\n\n      attemptResourceUsage.incUsed(node.getPartition(),\n          container.getResource());\n\n      // Update resource requests related to \"request\" and store in RMContainer\n      ((RMContainerImpl) rmContainer).setResourceRequests(resourceRequestList);\n\n      // Inform the container\n      rmContainer.handle(\n          new RMContainerEvent(containerId, RMContainerEventType.START));\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"allocate: applicationAttemptId\u003d\" + containerId\n            .getApplicationAttemptId() + \" container\u003d\" + containerId + \" host\u003d\"\n            + container.getNodeId().getHost() + \" type\u003d\" + type);\n      }\n      RMAuditLogger.logSuccess(getUser(),\n          RMAuditLogger.AuditConstants.ALLOC_CONTAINER, \"SchedulerApp\",\n          getApplicationId(), containerId, container.getResource());\n\n      return rmContainer;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoAppAttempt.java",
      "extendedDetails": {}
    },
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5716. Add global scheduler interface definition and update CapacityScheduler to use it. Contributed by Wangda Tan\n",
      "commitDate": "07/11/16 10:14 AM",
      "commitName": "de3b4aac561258ad242a3c5ed1c919428893fd4c",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,59 @@\n+  public RMContainer allocate(NodeType type, FiCaSchedulerNode node,\n+      SchedulerRequestKey schedulerKey, ResourceRequest request,\n+      Container container) {\n+    try {\n+      writeLock.lock();\n+\n+      if (isStopped) {\n+        return null;\n+      }\n+\n+      // Required sanity check - AM can call \u0027allocate\u0027 to update resource\n+      // request without locking the scheduler, hence we need to check\n+      if (getTotalRequiredResources(schedulerKey) \u003c\u003d 0) {\n+        return null;\n+      }\n+\n+      // Create RMContainer\n+      RMContainer rmContainer \u003d new RMContainerImpl(container,\n+          this.getApplicationAttemptId(), node.getNodeID(),\n+          appSchedulingInfo.getUser(), this.rmContext,\n+          request.getNodeLabelExpression());\n+      ((RMContainerImpl) rmContainer).setQueueName(this.getQueueName());\n+\n+      updateAMContainerDiagnostics(AMState.ASSIGNED, null);\n+\n+      // Add it to allContainers list.\n+      newlyAllocatedContainers.add(rmContainer);\n+\n+      ContainerId containerId \u003d container.getId();\n+      liveContainers.put(containerId, rmContainer);\n+\n+      // Update consumption and track allocations\n+      List\u003cResourceRequest\u003e resourceRequestList \u003d appSchedulingInfo.allocate(\n+          type, node, schedulerKey, request, container);\n+\n+      attemptResourceUsage.incUsed(node.getPartition(),\n+          container.getResource());\n+\n+      // Update resource requests related to \"request\" and store in RMContainer\n+      ((RMContainerImpl) rmContainer).setResourceRequests(resourceRequestList);\n+\n+      // Inform the container\n+      rmContainer.handle(\n+          new RMContainerEvent(containerId, RMContainerEventType.START));\n+\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"allocate: applicationAttemptId\u003d\" + containerId\n+            .getApplicationAttemptId() + \" container\u003d\" + containerId + \" host\u003d\"\n+            + container.getNodeId().getHost() + \" type\u003d\" + type);\n+      }\n+      RMAuditLogger.logSuccess(getUser(),\n+          RMAuditLogger.AuditConstants.ALLOC_CONTAINER, \"SchedulerApp\",\n+          getApplicationId(), containerId, container.getResource());\n+\n+      return rmContainer;\n+    } finally {\n+      writeLock.unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public RMContainer allocate(NodeType type, FiCaSchedulerNode node,\n      SchedulerRequestKey schedulerKey, ResourceRequest request,\n      Container container) {\n    try {\n      writeLock.lock();\n\n      if (isStopped) {\n        return null;\n      }\n\n      // Required sanity check - AM can call \u0027allocate\u0027 to update resource\n      // request without locking the scheduler, hence we need to check\n      if (getTotalRequiredResources(schedulerKey) \u003c\u003d 0) {\n        return null;\n      }\n\n      // Create RMContainer\n      RMContainer rmContainer \u003d new RMContainerImpl(container,\n          this.getApplicationAttemptId(), node.getNodeID(),\n          appSchedulingInfo.getUser(), this.rmContext,\n          request.getNodeLabelExpression());\n      ((RMContainerImpl) rmContainer).setQueueName(this.getQueueName());\n\n      updateAMContainerDiagnostics(AMState.ASSIGNED, null);\n\n      // Add it to allContainers list.\n      newlyAllocatedContainers.add(rmContainer);\n\n      ContainerId containerId \u003d container.getId();\n      liveContainers.put(containerId, rmContainer);\n\n      // Update consumption and track allocations\n      List\u003cResourceRequest\u003e resourceRequestList \u003d appSchedulingInfo.allocate(\n          type, node, schedulerKey, request, container);\n\n      attemptResourceUsage.incUsed(node.getPartition(),\n          container.getResource());\n\n      // Update resource requests related to \"request\" and store in RMContainer\n      ((RMContainerImpl) rmContainer).setResourceRequests(resourceRequestList);\n\n      // Inform the container\n      rmContainer.handle(\n          new RMContainerEvent(containerId, RMContainerEventType.START));\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"allocate: applicationAttemptId\u003d\" + containerId\n            .getApplicationAttemptId() + \" container\u003d\" + containerId + \" host\u003d\"\n            + container.getNodeId().getHost() + \" type\u003d\" + type);\n      }\n      RMAuditLogger.logSuccess(getUser(),\n          RMAuditLogger.AuditConstants.ALLOC_CONTAINER, \"SchedulerApp\",\n          getApplicationId(), containerId, container.getResource());\n\n      return rmContainer;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoAppAttempt.java"
    }
  }
}