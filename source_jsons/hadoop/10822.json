{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ErasureCodingWorker.java",
  "functionName": "initializeStripedReadThreadPool",
  "functionId": "initializeStripedReadThreadPool",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/ErasureCodingWorker.java",
  "functionStartLine": 75,
  "functionEndLine": 104,
  "numCommitsSeen": 77,
  "timeTaken": 4436,
  "changeHistory": [
    "123342cd0759ff88801d4f5ab10987f6e3f344b0",
    "3c18a53cbd2efabb2ad108d63a0b0b558424115f",
    "6546d9e7ff73d2c81a803f2c61a1376a8c426987",
    "4ae543fdcd6dcfbe32257b1e72a405df9aa73e17",
    "95363bcc7dae28ba9ae2cd7ee9a258fcb58cd932",
    "914580934c566cd18019035b244f82006868bd7b",
    "6616de24cb14f1c2d0d6568fd4382062618834bd"
  ],
  "changeHistoryShort": {
    "123342cd0759ff88801d4f5ab10987f6e3f344b0": "Ymultichange(Yparameterchange,Ybodychange)",
    "3c18a53cbd2efabb2ad108d63a0b0b558424115f": "Ybodychange",
    "6546d9e7ff73d2c81a803f2c61a1376a8c426987": "Ybodychange",
    "4ae543fdcd6dcfbe32257b1e72a405df9aa73e17": "Ybodychange",
    "95363bcc7dae28ba9ae2cd7ee9a258fcb58cd932": "Ybodychange",
    "914580934c566cd18019035b244f82006868bd7b": "Ybodychange",
    "6616de24cb14f1c2d0d6568fd4382062618834bd": "Yintroduced"
  },
  "changeHistoryDetails": {
    "123342cd0759ff88801d4f5ab10987f6e3f344b0": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-12412. Change ErasureCodingWorker.stripedReadPool to cached thread pool. (Lei (Eddy) Xu)\n",
      "commitDate": "12/09/17 6:12 PM",
      "commitName": "123342cd0759ff88801d4f5ab10987f6e3f344b0",
      "commitAuthor": "Lei Xu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-12412. Change ErasureCodingWorker.stripedReadPool to cached thread pool. (Lei (Eddy) Xu)\n",
          "commitDate": "12/09/17 6:12 PM",
          "commitName": "123342cd0759ff88801d4f5ab10987f6e3f344b0",
          "commitAuthor": "Lei Xu",
          "commitDateOld": "28/07/17 10:50 AM",
          "commitNameOld": "77791e4c36ddc9305306c83806bf486d4d32575d",
          "commitAuthorOld": "Lei Xu",
          "daysBetweenCommits": 46.31,
          "commitsBetweenForRepo": 454,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,30 @@\n-  private void initializeStripedReadThreadPool(int num) {\n-    LOG.debug(\"Using striped reads; pool threads\u003d{}\", num);\n+  private void initializeStripedReadThreadPool() {\n+    LOG.debug(\"Using striped reads\");\n \n-    stripedReadPool \u003d new ThreadPoolExecutor(1, num, 60, TimeUnit.SECONDS,\n-        new SynchronousQueue\u003cRunnable\u003e(),\n+    // Essentially, this is a cachedThreadPool.\n+    stripedReadPool \u003d new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n+        60, TimeUnit.SECONDS,\n+        new SynchronousQueue\u003c\u003e(),\n         new Daemon.DaemonFactory() {\n           private final AtomicInteger threadIndex \u003d new AtomicInteger(0);\n \n           @Override\n           public Thread newThread(Runnable r) {\n             Thread t \u003d super.newThread(r);\n             t.setName(\"stripedRead-\" + threadIndex.getAndIncrement());\n             return t;\n           }\n         },\n         new ThreadPoolExecutor.CallerRunsPolicy() {\n           @Override\n           public void rejectedExecution(Runnable runnable,\n                                         ThreadPoolExecutor e) {\n             LOG.info(\"Execution for striped reading rejected, \"\n                 + \"Executing in current thread\");\n             // will run in the current thread\n             super.rejectedExecution(runnable, e);\n           }\n         });\n \n     stripedReadPool.allowCoreThreadTimeOut(true);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void initializeStripedReadThreadPool() {\n    LOG.debug(\"Using striped reads\");\n\n    // Essentially, this is a cachedThreadPool.\n    stripedReadPool \u003d new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n        60, TimeUnit.SECONDS,\n        new SynchronousQueue\u003c\u003e(),\n        new Daemon.DaemonFactory() {\n          private final AtomicInteger threadIndex \u003d new AtomicInteger(0);\n\n          @Override\n          public Thread newThread(Runnable r) {\n            Thread t \u003d super.newThread(r);\n            t.setName(\"stripedRead-\" + threadIndex.getAndIncrement());\n            return t;\n          }\n        },\n        new ThreadPoolExecutor.CallerRunsPolicy() {\n          @Override\n          public void rejectedExecution(Runnable runnable,\n                                        ThreadPoolExecutor e) {\n            LOG.info(\"Execution for striped reading rejected, \"\n                + \"Executing in current thread\");\n            // will run in the current thread\n            super.rejectedExecution(runnable, e);\n          }\n        });\n\n    stripedReadPool.allowCoreThreadTimeOut(true);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/ErasureCodingWorker.java",
          "extendedDetails": {
            "oldValue": "[num-int]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-12412. Change ErasureCodingWorker.stripedReadPool to cached thread pool. (Lei (Eddy) Xu)\n",
          "commitDate": "12/09/17 6:12 PM",
          "commitName": "123342cd0759ff88801d4f5ab10987f6e3f344b0",
          "commitAuthor": "Lei Xu",
          "commitDateOld": "28/07/17 10:50 AM",
          "commitNameOld": "77791e4c36ddc9305306c83806bf486d4d32575d",
          "commitAuthorOld": "Lei Xu",
          "daysBetweenCommits": 46.31,
          "commitsBetweenForRepo": 454,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,30 @@\n-  private void initializeStripedReadThreadPool(int num) {\n-    LOG.debug(\"Using striped reads; pool threads\u003d{}\", num);\n+  private void initializeStripedReadThreadPool() {\n+    LOG.debug(\"Using striped reads\");\n \n-    stripedReadPool \u003d new ThreadPoolExecutor(1, num, 60, TimeUnit.SECONDS,\n-        new SynchronousQueue\u003cRunnable\u003e(),\n+    // Essentially, this is a cachedThreadPool.\n+    stripedReadPool \u003d new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n+        60, TimeUnit.SECONDS,\n+        new SynchronousQueue\u003c\u003e(),\n         new Daemon.DaemonFactory() {\n           private final AtomicInteger threadIndex \u003d new AtomicInteger(0);\n \n           @Override\n           public Thread newThread(Runnable r) {\n             Thread t \u003d super.newThread(r);\n             t.setName(\"stripedRead-\" + threadIndex.getAndIncrement());\n             return t;\n           }\n         },\n         new ThreadPoolExecutor.CallerRunsPolicy() {\n           @Override\n           public void rejectedExecution(Runnable runnable,\n                                         ThreadPoolExecutor e) {\n             LOG.info(\"Execution for striped reading rejected, \"\n                 + \"Executing in current thread\");\n             // will run in the current thread\n             super.rejectedExecution(runnable, e);\n           }\n         });\n \n     stripedReadPool.allowCoreThreadTimeOut(true);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void initializeStripedReadThreadPool() {\n    LOG.debug(\"Using striped reads\");\n\n    // Essentially, this is a cachedThreadPool.\n    stripedReadPool \u003d new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n        60, TimeUnit.SECONDS,\n        new SynchronousQueue\u003c\u003e(),\n        new Daemon.DaemonFactory() {\n          private final AtomicInteger threadIndex \u003d new AtomicInteger(0);\n\n          @Override\n          public Thread newThread(Runnable r) {\n            Thread t \u003d super.newThread(r);\n            t.setName(\"stripedRead-\" + threadIndex.getAndIncrement());\n            return t;\n          }\n        },\n        new ThreadPoolExecutor.CallerRunsPolicy() {\n          @Override\n          public void rejectedExecution(Runnable runnable,\n                                        ThreadPoolExecutor e) {\n            LOG.info(\"Execution for striped reading rejected, \"\n                + \"Executing in current thread\");\n            // will run in the current thread\n            super.rejectedExecution(runnable, e);\n          }\n        });\n\n    stripedReadPool.allowCoreThreadTimeOut(true);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/ErasureCodingWorker.java",
          "extendedDetails": {}
        }
      ]
    },
    "3c18a53cbd2efabb2ad108d63a0b0b558424115f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9719. Refactoring ErasureCodingWorker into smaller reusable constructs. Contributed by Kai Zheng.\n",
      "commitDate": "06/04/16 10:50 PM",
      "commitName": "3c18a53cbd2efabb2ad108d63a0b0b558424115f",
      "commitAuthor": "Uma Maheswara Rao G",
      "commitDateOld": "30/03/16 1:37 PM",
      "commitNameOld": "37e23ce45c592f3c9c48a08a52a5f46787f6c0e9",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 7.38,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,28 @@\n   private void initializeStripedReadThreadPool(int num) {\n     LOG.debug(\"Using striped reads; pool threads\u003d{}\", num);\n \n-    EC_RECONSTRUCTION_STRIPED_READ_THREAD_POOL \u003d new ThreadPoolExecutor(1, num,\n-        60, TimeUnit.SECONDS, new SynchronousQueue\u003cRunnable\u003e(),\n+    stripedReadPool \u003d new ThreadPoolExecutor(1, num, 60, TimeUnit.SECONDS,\n+        new SynchronousQueue\u003cRunnable\u003e(),\n         new Daemon.DaemonFactory() {\n-      private final AtomicInteger threadIndex \u003d new AtomicInteger(0);\n+          private final AtomicInteger threadIndex \u003d new AtomicInteger(0);\n \n-      @Override\n-      public Thread newThread(Runnable r) {\n-        Thread t \u003d super.newThread(r);\n-        t.setName(\"stripedRead-\" + threadIndex.getAndIncrement());\n-        return t;\n-      }\n-    }, new ThreadPoolExecutor.CallerRunsPolicy() {\n-      @Override\n-      public void rejectedExecution(Runnable runnable, ThreadPoolExecutor e) {\n-        LOG.info(\"Execution for striped reading rejected, \"\n-            + \"Executing in current thread\");\n-        // will run in the current thread\n-        super.rejectedExecution(runnable, e);\n-      }\n-    });\n-    EC_RECONSTRUCTION_STRIPED_READ_THREAD_POOL.allowCoreThreadTimeOut(true);\n+          @Override\n+          public Thread newThread(Runnable r) {\n+            Thread t \u003d super.newThread(r);\n+            t.setName(\"stripedRead-\" + threadIndex.getAndIncrement());\n+            return t;\n+          }\n+        },\n+        new ThreadPoolExecutor.CallerRunsPolicy() {\n+          @Override\n+          public void rejectedExecution(Runnable runnable,\n+                                        ThreadPoolExecutor e) {\n+            LOG.info(\"Execution for striped reading rejected, \"\n+                + \"Executing in current thread\");\n+            // will run in the current thread\n+            super.rejectedExecution(runnable, e);\n+          }\n+        });\n+\n+    stripedReadPool.allowCoreThreadTimeOut(true);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initializeStripedReadThreadPool(int num) {\n    LOG.debug(\"Using striped reads; pool threads\u003d{}\", num);\n\n    stripedReadPool \u003d new ThreadPoolExecutor(1, num, 60, TimeUnit.SECONDS,\n        new SynchronousQueue\u003cRunnable\u003e(),\n        new Daemon.DaemonFactory() {\n          private final AtomicInteger threadIndex \u003d new AtomicInteger(0);\n\n          @Override\n          public Thread newThread(Runnable r) {\n            Thread t \u003d super.newThread(r);\n            t.setName(\"stripedRead-\" + threadIndex.getAndIncrement());\n            return t;\n          }\n        },\n        new ThreadPoolExecutor.CallerRunsPolicy() {\n          @Override\n          public void rejectedExecution(Runnable runnable,\n                                        ThreadPoolExecutor e) {\n            LOG.info(\"Execution for striped reading rejected, \"\n                + \"Executing in current thread\");\n            // will run in the current thread\n            super.rejectedExecution(runnable, e);\n          }\n        });\n\n    stripedReadPool.allowCoreThreadTimeOut(true);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/ErasureCodingWorker.java",
      "extendedDetails": {}
    },
    "6546d9e7ff73d2c81a803f2c61a1376a8c426987": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9829. Erasure Coding: Improve few exception handling logic of ErasureCodingWorker. Contributed by Rakesh R.\n",
      "commitDate": "19/02/16 10:40 AM",
      "commitName": "6546d9e7ff73d2c81a803f2c61a1376a8c426987",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "02/02/16 12:32 PM",
      "commitNameOld": "4ae543fdcd6dcfbe32257b1e72a405df9aa73e17",
      "commitAuthorOld": "zhezhang",
      "daysBetweenCommits": 16.92,
      "commitsBetweenForRepo": 120,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   private void initializeStripedReadThreadPool(int num) {\n-    LOG.debug(\"Using striped reads; pool threads\u003d\" + num);\n+    LOG.debug(\"Using striped reads; pool threads\u003d{}\", num);\n \n     EC_RECONSTRUCTION_STRIPED_READ_THREAD_POOL \u003d new ThreadPoolExecutor(1, num,\n         60, TimeUnit.SECONDS, new SynchronousQueue\u003cRunnable\u003e(),\n         new Daemon.DaemonFactory() {\n       private final AtomicInteger threadIndex \u003d new AtomicInteger(0);\n \n       @Override\n       public Thread newThread(Runnable r) {\n         Thread t \u003d super.newThread(r);\n         t.setName(\"stripedRead-\" + threadIndex.getAndIncrement());\n         return t;\n       }\n     }, new ThreadPoolExecutor.CallerRunsPolicy() {\n       @Override\n       public void rejectedExecution(Runnable runnable, ThreadPoolExecutor e) {\n         LOG.info(\"Execution for striped reading rejected, \"\n             + \"Executing in current thread\");\n         // will run in the current thread\n         super.rejectedExecution(runnable, e);\n       }\n     });\n     EC_RECONSTRUCTION_STRIPED_READ_THREAD_POOL.allowCoreThreadTimeOut(true);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initializeStripedReadThreadPool(int num) {\n    LOG.debug(\"Using striped reads; pool threads\u003d{}\", num);\n\n    EC_RECONSTRUCTION_STRIPED_READ_THREAD_POOL \u003d new ThreadPoolExecutor(1, num,\n        60, TimeUnit.SECONDS, new SynchronousQueue\u003cRunnable\u003e(),\n        new Daemon.DaemonFactory() {\n      private final AtomicInteger threadIndex \u003d new AtomicInteger(0);\n\n      @Override\n      public Thread newThread(Runnable r) {\n        Thread t \u003d super.newThread(r);\n        t.setName(\"stripedRead-\" + threadIndex.getAndIncrement());\n        return t;\n      }\n    }, new ThreadPoolExecutor.CallerRunsPolicy() {\n      @Override\n      public void rejectedExecution(Runnable runnable, ThreadPoolExecutor e) {\n        LOG.info(\"Execution for striped reading rejected, \"\n            + \"Executing in current thread\");\n        // will run in the current thread\n        super.rejectedExecution(runnable, e);\n      }\n    });\n    EC_RECONSTRUCTION_STRIPED_READ_THREAD_POOL.allowCoreThreadTimeOut(true);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/ErasureCodingWorker.java",
      "extendedDetails": {}
    },
    "4ae543fdcd6dcfbe32257b1e72a405df9aa73e17": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9731. Erasure Coding: Rename BlockECRecoveryCommand to BlockECReconstructionCommand. Contributed by Rakesh R.\n\nChange-Id: I405365a8395770e494b92bfe9651f4f0366d8f28\n",
      "commitDate": "02/02/16 12:32 PM",
      "commitName": "4ae543fdcd6dcfbe32257b1e72a405df9aa73e17",
      "commitAuthor": "zhezhang",
      "commitDateOld": "22/01/16 9:46 AM",
      "commitNameOld": "95363bcc7dae28ba9ae2cd7ee9a258fcb58cd932",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 11.12,
      "commitsBetweenForRepo": 72,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   private void initializeStripedReadThreadPool(int num) {\n     LOG.debug(\"Using striped reads; pool threads\u003d\" + num);\n \n-    STRIPED_READ_THREAD_POOL \u003d new ThreadPoolExecutor(1, num, 60,\n-        TimeUnit.SECONDS, new SynchronousQueue\u003cRunnable\u003e(),\n+    EC_RECONSTRUCTION_STRIPED_READ_THREAD_POOL \u003d new ThreadPoolExecutor(1, num,\n+        60, TimeUnit.SECONDS, new SynchronousQueue\u003cRunnable\u003e(),\n         new Daemon.DaemonFactory() {\n       private final AtomicInteger threadIndex \u003d new AtomicInteger(0);\n \n       @Override\n       public Thread newThread(Runnable r) {\n         Thread t \u003d super.newThread(r);\n         t.setName(\"stripedRead-\" + threadIndex.getAndIncrement());\n         return t;\n       }\n     }, new ThreadPoolExecutor.CallerRunsPolicy() {\n       @Override\n       public void rejectedExecution(Runnable runnable, ThreadPoolExecutor e) {\n         LOG.info(\"Execution for striped reading rejected, \"\n             + \"Executing in current thread\");\n         // will run in the current thread\n         super.rejectedExecution(runnable, e);\n       }\n     });\n-    STRIPED_READ_THREAD_POOL.allowCoreThreadTimeOut(true);\n+    EC_RECONSTRUCTION_STRIPED_READ_THREAD_POOL.allowCoreThreadTimeOut(true);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initializeStripedReadThreadPool(int num) {\n    LOG.debug(\"Using striped reads; pool threads\u003d\" + num);\n\n    EC_RECONSTRUCTION_STRIPED_READ_THREAD_POOL \u003d new ThreadPoolExecutor(1, num,\n        60, TimeUnit.SECONDS, new SynchronousQueue\u003cRunnable\u003e(),\n        new Daemon.DaemonFactory() {\n      private final AtomicInteger threadIndex \u003d new AtomicInteger(0);\n\n      @Override\n      public Thread newThread(Runnable r) {\n        Thread t \u003d super.newThread(r);\n        t.setName(\"stripedRead-\" + threadIndex.getAndIncrement());\n        return t;\n      }\n    }, new ThreadPoolExecutor.CallerRunsPolicy() {\n      @Override\n      public void rejectedExecution(Runnable runnable, ThreadPoolExecutor e) {\n        LOG.info(\"Execution for striped reading rejected, \"\n            + \"Executing in current thread\");\n        // will run in the current thread\n        super.rejectedExecution(runnable, e);\n      }\n    });\n    EC_RECONSTRUCTION_STRIPED_READ_THREAD_POOL.allowCoreThreadTimeOut(true);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/ErasureCodingWorker.java",
      "extendedDetails": {}
    },
    "95363bcc7dae28ba9ae2cd7ee9a258fcb58cd932": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9646. ErasureCodingWorker may fail when recovering data blocks with length less than the first internal block. Contributed by Jing Zhao.\n",
      "commitDate": "22/01/16 9:46 AM",
      "commitName": "95363bcc7dae28ba9ae2cd7ee9a258fcb58cd932",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "21/12/15 10:47 PM",
      "commitNameOld": "70d6f201260086a3f12beaa317fede2a99639fef",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 31.46,
      "commitsBetweenForRepo": 179,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,25 @@\n   private void initializeStripedReadThreadPool(int num) {\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Using striped reads; pool threads\u003d\" + num);\n-    }\n+    LOG.debug(\"Using striped reads; pool threads\u003d\" + num);\n+\n     STRIPED_READ_THREAD_POOL \u003d new ThreadPoolExecutor(1, num, 60,\n         TimeUnit.SECONDS, new SynchronousQueue\u003cRunnable\u003e(),\n         new Daemon.DaemonFactory() {\n       private final AtomicInteger threadIndex \u003d new AtomicInteger(0);\n \n       @Override\n       public Thread newThread(Runnable r) {\n         Thread t \u003d super.newThread(r);\n         t.setName(\"stripedRead-\" + threadIndex.getAndIncrement());\n         return t;\n       }\n     }, new ThreadPoolExecutor.CallerRunsPolicy() {\n       @Override\n       public void rejectedExecution(Runnable runnable, ThreadPoolExecutor e) {\n         LOG.info(\"Execution for striped reading rejected, \"\n             + \"Executing in current thread\");\n         // will run in the current thread\n         super.rejectedExecution(runnable, e);\n       }\n     });\n     STRIPED_READ_THREAD_POOL.allowCoreThreadTimeOut(true);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initializeStripedReadThreadPool(int num) {\n    LOG.debug(\"Using striped reads; pool threads\u003d\" + num);\n\n    STRIPED_READ_THREAD_POOL \u003d new ThreadPoolExecutor(1, num, 60,\n        TimeUnit.SECONDS, new SynchronousQueue\u003cRunnable\u003e(),\n        new Daemon.DaemonFactory() {\n      private final AtomicInteger threadIndex \u003d new AtomicInteger(0);\n\n      @Override\n      public Thread newThread(Runnable r) {\n        Thread t \u003d super.newThread(r);\n        t.setName(\"stripedRead-\" + threadIndex.getAndIncrement());\n        return t;\n      }\n    }, new ThreadPoolExecutor.CallerRunsPolicy() {\n      @Override\n      public void rejectedExecution(Runnable runnable, ThreadPoolExecutor e) {\n        LOG.info(\"Execution for striped reading rejected, \"\n            + \"Executing in current thread\");\n        // will run in the current thread\n        super.rejectedExecution(runnable, e);\n      }\n    });\n    STRIPED_READ_THREAD_POOL.allowCoreThreadTimeOut(true);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/ErasureCodingWorker.java",
      "extendedDetails": {}
    },
    "914580934c566cd18019035b244f82006868bd7b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8378. Erasure Coding: Few improvements for the erasure coding worker. Contributed by Rakesh R.\n",
      "commitDate": "26/05/15 12:02 PM",
      "commitName": "914580934c566cd18019035b244f82006868bd7b",
      "commitAuthor": "Walter Su",
      "commitDateOld": "26/05/15 12:02 PM",
      "commitNameOld": "7434c44b16765a49168c8f5cb01a3d0b817d158b",
      "commitAuthorOld": "Zhe Zhang",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,26 @@\n   private void initializeStripedReadThreadPool(int num) {\n-    STRIPED_READ_TRHEAD_POOL \u003d new ThreadPoolExecutor(1, num, 60,\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Using striped reads; pool threads\u003d\" + num);\n+    }\n+    STRIPED_READ_THREAD_POOL \u003d new ThreadPoolExecutor(1, num, 60,\n         TimeUnit.SECONDS, new SynchronousQueue\u003cRunnable\u003e(),\n         new Daemon.DaemonFactory() {\n       private final AtomicInteger threadIndex \u003d new AtomicInteger(0);\n \n       @Override\n       public Thread newThread(Runnable r) {\n         Thread t \u003d super.newThread(r);\n         t.setName(\"stripedRead-\" + threadIndex.getAndIncrement());\n         return t;\n       }\n     }, new ThreadPoolExecutor.CallerRunsPolicy() {\n       @Override\n       public void rejectedExecution(Runnable runnable, ThreadPoolExecutor e) {\n         LOG.info(\"Execution for striped reading rejected, \"\n             + \"Executing in current thread\");\n         // will run in the current thread\n         super.rejectedExecution(runnable, e);\n       }\n     });\n-    STRIPED_READ_TRHEAD_POOL.allowCoreThreadTimeOut(true);\n+    STRIPED_READ_THREAD_POOL.allowCoreThreadTimeOut(true);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initializeStripedReadThreadPool(int num) {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Using striped reads; pool threads\u003d\" + num);\n    }\n    STRIPED_READ_THREAD_POOL \u003d new ThreadPoolExecutor(1, num, 60,\n        TimeUnit.SECONDS, new SynchronousQueue\u003cRunnable\u003e(),\n        new Daemon.DaemonFactory() {\n      private final AtomicInteger threadIndex \u003d new AtomicInteger(0);\n\n      @Override\n      public Thread newThread(Runnable r) {\n        Thread t \u003d super.newThread(r);\n        t.setName(\"stripedRead-\" + threadIndex.getAndIncrement());\n        return t;\n      }\n    }, new ThreadPoolExecutor.CallerRunsPolicy() {\n      @Override\n      public void rejectedExecution(Runnable runnable, ThreadPoolExecutor e) {\n        LOG.info(\"Execution for striped reading rejected, \"\n            + \"Executing in current thread\");\n        // will run in the current thread\n        super.rejectedExecution(runnable, e);\n      }\n    });\n    STRIPED_READ_THREAD_POOL.allowCoreThreadTimeOut(true);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/ErasureCodingWorker.java",
      "extendedDetails": {}
    },
    "6616de24cb14f1c2d0d6568fd4382062618834bd": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-7348. Erasure Coding: DataNode reconstruct striped blocks. Contributed by Yi Liu.\n",
      "commitDate": "26/05/15 12:01 PM",
      "commitName": "6616de24cb14f1c2d0d6568fd4382062618834bd",
      "commitAuthor": "Zhe Zhang",
      "diff": "@@ -0,0 +1,23 @@\n+  private void initializeStripedReadThreadPool(int num) {\n+    STRIPED_READ_TRHEAD_POOL \u003d new ThreadPoolExecutor(1, num, 60,\n+        TimeUnit.SECONDS, new SynchronousQueue\u003cRunnable\u003e(),\n+        new Daemon.DaemonFactory() {\n+      private final AtomicInteger threadIndex \u003d new AtomicInteger(0);\n+\n+      @Override\n+      public Thread newThread(Runnable r) {\n+        Thread t \u003d super.newThread(r);\n+        t.setName(\"stripedRead-\" + threadIndex.getAndIncrement());\n+        return t;\n+      }\n+    }, new ThreadPoolExecutor.CallerRunsPolicy() {\n+      @Override\n+      public void rejectedExecution(Runnable runnable, ThreadPoolExecutor e) {\n+        LOG.info(\"Execution for striped reading rejected, \"\n+            + \"Executing in current thread\");\n+        // will run in the current thread\n+        super.rejectedExecution(runnable, e);\n+      }\n+    });\n+    STRIPED_READ_TRHEAD_POOL.allowCoreThreadTimeOut(true);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void initializeStripedReadThreadPool(int num) {\n    STRIPED_READ_TRHEAD_POOL \u003d new ThreadPoolExecutor(1, num, 60,\n        TimeUnit.SECONDS, new SynchronousQueue\u003cRunnable\u003e(),\n        new Daemon.DaemonFactory() {\n      private final AtomicInteger threadIndex \u003d new AtomicInteger(0);\n\n      @Override\n      public Thread newThread(Runnable r) {\n        Thread t \u003d super.newThread(r);\n        t.setName(\"stripedRead-\" + threadIndex.getAndIncrement());\n        return t;\n      }\n    }, new ThreadPoolExecutor.CallerRunsPolicy() {\n      @Override\n      public void rejectedExecution(Runnable runnable, ThreadPoolExecutor e) {\n        LOG.info(\"Execution for striped reading rejected, \"\n            + \"Executing in current thread\");\n        // will run in the current thread\n        super.rejectedExecution(runnable, e);\n      }\n    });\n    STRIPED_READ_TRHEAD_POOL.allowCoreThreadTimeOut(true);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/ErasureCodingWorker.java"
    }
  }
}