{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NvidiaGPUPluginForRuntimeV2.java",
  "functionName": "topologyAwareSchedule",
  "functionId": "topologyAwareSchedule___allocation-Set__Device____count-int__envs-Map__String,String____availableDevices-Set__Device____cTable-Map__Integer,List__Map.Entry__Set__Device__,Integer______",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/com/nvidia/NvidiaGPUPluginForRuntimeV2.java",
  "functionStartLine": 394,
  "functionEndLine": 430,
  "numCommitsSeen": 3,
  "timeTaken": 801,
  "changeHistory": [
    "dddcfa4d9f07aa96692a12afd3003ae89ac40b17"
  ],
  "changeHistoryShort": {
    "dddcfa4d9f07aa96692a12afd3003ae89ac40b17": "Yintroduced"
  },
  "changeHistoryDetails": {
    "dddcfa4d9f07aa96692a12afd3003ae89ac40b17": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8821. [YARN-8851] GPU hierarchy/topology scheduling support based on pluggable device framework. Contributed by Zhankun Tang.\n",
      "commitDate": "24/02/19 1:07 AM",
      "commitName": "dddcfa4d9f07aa96692a12afd3003ae89ac40b17",
      "commitAuthor": "Sunil G",
      "diff": "@@ -0,0 +1,37 @@\n+  public void topologyAwareSchedule(Set\u003cDevice\u003e allocation, int count,\n+      Map\u003cString, String\u003e envs,\n+      Set\u003cDevice\u003e availableDevices,\n+      Map\u003cInteger, List\u003cMap.Entry\u003cSet\u003cDevice\u003e, Integer\u003e\u003e\u003e cTable) {\n+    int num \u003d 0;\n+    String policy \u003d envs.get(TOPOLOGY_POLICY_ENV_KEY);\n+    if (policy \u003d\u003d null) {\n+      policy \u003d TOPOLOGY_POLICY_PACK;\n+    }\n+\n+    /**\n+     * Get combinations from costTable given the count of device want to\n+     * allocate.\n+     * */\n+    if (cTable \u003d\u003d null) {\n+      LOG.error(\"No cost table initialized!\");\n+      return;\n+    }\n+    List\u003cMap.Entry\u003cSet\u003cDevice\u003e, Integer\u003e\u003e combinationsToCost \u003d\n+        cTable.get(count);\n+    Iterator\u003cMap.Entry\u003cSet\u003cDevice\u003e, Integer\u003e\u003e iterator \u003d\n+        combinationsToCost.iterator();\n+    // the container needs spread policy\n+    if (policy.equalsIgnoreCase(TOPOLOGY_POLICY_SPREAD)) {\n+      // loop from high cost to low cost\n+      iterator \u003d ((LinkedList) combinationsToCost).descendingIterator();\n+    }\n+    while (iterator.hasNext()) {\n+      Map.Entry\u003cSet\u003cDevice\u003e, Integer\u003e element \u003d iterator.next();\n+      if (availableDevices.containsAll(element.getKey())) {\n+        allocation.addAll(element.getKey());\n+        LOG.info(\"Topology scheduler allocated: \" + allocation);\n+        return;\n+      }\n+    }\n+    LOG.error(\"Unknown error happened in topology scheduler\");\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void topologyAwareSchedule(Set\u003cDevice\u003e allocation, int count,\n      Map\u003cString, String\u003e envs,\n      Set\u003cDevice\u003e availableDevices,\n      Map\u003cInteger, List\u003cMap.Entry\u003cSet\u003cDevice\u003e, Integer\u003e\u003e\u003e cTable) {\n    int num \u003d 0;\n    String policy \u003d envs.get(TOPOLOGY_POLICY_ENV_KEY);\n    if (policy \u003d\u003d null) {\n      policy \u003d TOPOLOGY_POLICY_PACK;\n    }\n\n    /**\n     * Get combinations from costTable given the count of device want to\n     * allocate.\n     * */\n    if (cTable \u003d\u003d null) {\n      LOG.error(\"No cost table initialized!\");\n      return;\n    }\n    List\u003cMap.Entry\u003cSet\u003cDevice\u003e, Integer\u003e\u003e combinationsToCost \u003d\n        cTable.get(count);\n    Iterator\u003cMap.Entry\u003cSet\u003cDevice\u003e, Integer\u003e\u003e iterator \u003d\n        combinationsToCost.iterator();\n    // the container needs spread policy\n    if (policy.equalsIgnoreCase(TOPOLOGY_POLICY_SPREAD)) {\n      // loop from high cost to low cost\n      iterator \u003d ((LinkedList) combinationsToCost).descendingIterator();\n    }\n    while (iterator.hasNext()) {\n      Map.Entry\u003cSet\u003cDevice\u003e, Integer\u003e element \u003d iterator.next();\n      if (availableDevices.containsAll(element.getKey())) {\n        allocation.addAll(element.getKey());\n        LOG.info(\"Topology scheduler allocated: \" + allocation);\n        return;\n      }\n    }\n    LOG.error(\"Unknown error happened in topology scheduler\");\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/com/nvidia/NvidiaGPUPluginForRuntimeV2.java"
    }
  }
}