{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HadoopArchiveLogs.java",
  "functionName": "filterAppsByAggregatedStatus",
  "functionId": "filterAppsByAggregatedStatus",
  "sourceFilePath": "hadoop-tools/hadoop-archive-logs/src/main/java/org/apache/hadoop/tools/HadoopArchiveLogs.java",
  "functionStartLine": 322,
  "functionEndLine": 362,
  "numCommitsSeen": 11,
  "timeTaken": 1077,
  "changeHistory": [
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
    "d3c49e76624b7e42a1321c649a1d7bb9906b3073"
  ],
  "changeHistoryShort": {
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": "Ybodychange",
    "d3c49e76624b7e42a1321c649a1d7bb9906b3073": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1942. Deprecate toString/fromString methods from ConverterUtils and move them to records classes like ContainerId/ApplicationId, etc. (wangda)\n",
      "commitDate": "14/06/16 3:06 PM",
      "commitName": "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "31/03/16 7:51 AM",
      "commitNameOld": "0a74610d1c7c7f183d2b2d0b7a775add53cf6c94",
      "commitAuthorOld": "Allen Wittenauer",
      "daysBetweenCommits": 75.3,
      "commitsBetweenForRepo": 487,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n   void filterAppsByAggregatedStatus() throws IOException, YarnException {\n     YarnClient client \u003d YarnClient.createYarnClient();\n     try {\n       client.init(getConf());\n       client.start();\n       for (Iterator\u003cAppInfo\u003e it \u003d eligibleApplications.iterator();\n            it.hasNext();) {\n         AppInfo app \u003d it.next();\n         try {\n           ApplicationReport report \u003d client.getApplicationReport(\n-              ConverterUtils.toApplicationId(app.getAppId()));\n+              ApplicationId.fromString(app.getAppId()));\n           LogAggregationStatus aggStatus \u003d report.getLogAggregationStatus();\n           if (aggStatus.equals(LogAggregationStatus.RUNNING) ||\n               aggStatus.equals(LogAggregationStatus.RUNNING_WITH_FAILURE) ||\n               aggStatus.equals(LogAggregationStatus.NOT_START) ||\n               aggStatus.equals(LogAggregationStatus.DISABLED) ||\n               aggStatus.equals(LogAggregationStatus.FAILED)) {\n             if (verbose) {\n               LOG.info(\"Skipping \" + app.getAppId() +\n                   \" due to aggregation status being \" + aggStatus);\n             }\n             it.remove();\n           } else {\n             if (verbose) {\n               LOG.info(app.getAppId() + \" has aggregation status \" + aggStatus);\n             }\n             app.setFinishTime(report.getFinishTime());\n           }\n         } catch (ApplicationNotFoundException e) {\n           // Assume the aggregation has finished\n           if (verbose) {\n             LOG.info(app.getAppId() + \" not in the ResourceManager\");\n           }\n         }\n       }\n     } finally {\n       if (client !\u003d null) {\n         client.stop();\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void filterAppsByAggregatedStatus() throws IOException, YarnException {\n    YarnClient client \u003d YarnClient.createYarnClient();\n    try {\n      client.init(getConf());\n      client.start();\n      for (Iterator\u003cAppInfo\u003e it \u003d eligibleApplications.iterator();\n           it.hasNext();) {\n        AppInfo app \u003d it.next();\n        try {\n          ApplicationReport report \u003d client.getApplicationReport(\n              ApplicationId.fromString(app.getAppId()));\n          LogAggregationStatus aggStatus \u003d report.getLogAggregationStatus();\n          if (aggStatus.equals(LogAggregationStatus.RUNNING) ||\n              aggStatus.equals(LogAggregationStatus.RUNNING_WITH_FAILURE) ||\n              aggStatus.equals(LogAggregationStatus.NOT_START) ||\n              aggStatus.equals(LogAggregationStatus.DISABLED) ||\n              aggStatus.equals(LogAggregationStatus.FAILED)) {\n            if (verbose) {\n              LOG.info(\"Skipping \" + app.getAppId() +\n                  \" due to aggregation status being \" + aggStatus);\n            }\n            it.remove();\n          } else {\n            if (verbose) {\n              LOG.info(app.getAppId() + \" has aggregation status \" + aggStatus);\n            }\n            app.setFinishTime(report.getFinishTime());\n          }\n        } catch (ApplicationNotFoundException e) {\n          // Assume the aggregation has finished\n          if (verbose) {\n            LOG.info(app.getAppId() + \" not in the ResourceManager\");\n          }\n        }\n      }\n    } finally {\n      if (client !\u003d null) {\n        client.stop();\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-archive-logs/src/main/java/org/apache/hadoop/tools/HadoopArchiveLogs.java",
      "extendedDetails": {}
    },
    "d3c49e76624b7e42a1321c649a1d7bb9906b3073": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-6480. archive-logs tool may miss applications (rkanter)\n",
      "commitDate": "25/09/15 3:02 PM",
      "commitName": "d3c49e76624b7e42a1321c649a1d7bb9906b3073",
      "commitAuthor": "Robert Kanter",
      "diff": "@@ -0,0 +1,41 @@\n+  void filterAppsByAggregatedStatus() throws IOException, YarnException {\n+    YarnClient client \u003d YarnClient.createYarnClient();\n+    try {\n+      client.init(getConf());\n+      client.start();\n+      for (Iterator\u003cAppInfo\u003e it \u003d eligibleApplications.iterator();\n+           it.hasNext();) {\n+        AppInfo app \u003d it.next();\n+        try {\n+          ApplicationReport report \u003d client.getApplicationReport(\n+              ConverterUtils.toApplicationId(app.getAppId()));\n+          LogAggregationStatus aggStatus \u003d report.getLogAggregationStatus();\n+          if (aggStatus.equals(LogAggregationStatus.RUNNING) ||\n+              aggStatus.equals(LogAggregationStatus.RUNNING_WITH_FAILURE) ||\n+              aggStatus.equals(LogAggregationStatus.NOT_START) ||\n+              aggStatus.equals(LogAggregationStatus.DISABLED) ||\n+              aggStatus.equals(LogAggregationStatus.FAILED)) {\n+            if (verbose) {\n+              LOG.info(\"Skipping \" + app.getAppId() +\n+                  \" due to aggregation status being \" + aggStatus);\n+            }\n+            it.remove();\n+          } else {\n+            if (verbose) {\n+              LOG.info(app.getAppId() + \" has aggregation status \" + aggStatus);\n+            }\n+            app.setFinishTime(report.getFinishTime());\n+          }\n+        } catch (ApplicationNotFoundException e) {\n+          // Assume the aggregation has finished\n+          if (verbose) {\n+            LOG.info(app.getAppId() + \" not in the ResourceManager\");\n+          }\n+        }\n+      }\n+    } finally {\n+      if (client !\u003d null) {\n+        client.stop();\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  void filterAppsByAggregatedStatus() throws IOException, YarnException {\n    YarnClient client \u003d YarnClient.createYarnClient();\n    try {\n      client.init(getConf());\n      client.start();\n      for (Iterator\u003cAppInfo\u003e it \u003d eligibleApplications.iterator();\n           it.hasNext();) {\n        AppInfo app \u003d it.next();\n        try {\n          ApplicationReport report \u003d client.getApplicationReport(\n              ConverterUtils.toApplicationId(app.getAppId()));\n          LogAggregationStatus aggStatus \u003d report.getLogAggregationStatus();\n          if (aggStatus.equals(LogAggregationStatus.RUNNING) ||\n              aggStatus.equals(LogAggregationStatus.RUNNING_WITH_FAILURE) ||\n              aggStatus.equals(LogAggregationStatus.NOT_START) ||\n              aggStatus.equals(LogAggregationStatus.DISABLED) ||\n              aggStatus.equals(LogAggregationStatus.FAILED)) {\n            if (verbose) {\n              LOG.info(\"Skipping \" + app.getAppId() +\n                  \" due to aggregation status being \" + aggStatus);\n            }\n            it.remove();\n          } else {\n            if (verbose) {\n              LOG.info(app.getAppId() + \" has aggregation status \" + aggStatus);\n            }\n            app.setFinishTime(report.getFinishTime());\n          }\n        } catch (ApplicationNotFoundException e) {\n          // Assume the aggregation has finished\n          if (verbose) {\n            LOG.info(app.getAppId() + \" not in the ResourceManager\");\n          }\n        }\n      }\n    } finally {\n      if (client !\u003d null) {\n        client.stop();\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-archive-logs/src/main/java/org/apache/hadoop/tools/HadoopArchiveLogs.java"
    }
  }
}