{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Chain.java",
  "functionName": "validateKeyValueTypes",
  "functionId": "validateKeyValueTypes___isMap-boolean__jobConf-Configuration__inputKeyClass-Class__?____inputValueClass-Class__?____outputKeyClass-Class__?____outputValueClass-Class__?____index-int__prefix-String",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/chain/Chain.java",
  "functionStartLine": 667,
  "functionEndLine": 703,
  "numCommitsSeen": 6,
  "timeTaken": 4399,
  "changeHistory": [
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected static void validateKeyValueTypes(boolean isMap,\n      Configuration jobConf, Class\u003c?\u003e inputKeyClass, Class\u003c?\u003e inputValueClass,\n      Class\u003c?\u003e outputKeyClass, Class\u003c?\u003e outputValueClass, int index,\n      String prefix) {\n    // if it is a reducer chain and the first Mapper is being added check the\n    // key and value input classes of the mapper match those of the reducer\n    // output.\n    if (!isMap \u0026\u0026 index \u003d\u003d 0) {\n      Configuration reducerConf \u003d getChainElementConf(jobConf, prefix\n          + CHAIN_REDUCER_CONFIG);\n      if (!inputKeyClass.isAssignableFrom(reducerConf.getClass(\n          REDUCER_OUTPUT_KEY_CLASS, null))) {\n        throw new IllegalArgumentException(\"The Reducer output key class does\"\n            + \" not match the Mapper input key class\");\n      }\n      if (!inputValueClass.isAssignableFrom(reducerConf.getClass(\n          REDUCER_OUTPUT_VALUE_CLASS, null))) {\n        throw new IllegalArgumentException(\"The Reducer output value class\"\n            + \" does not match the Mapper input value class\");\n      }\n    } else if (index \u003e 0) {\n      // check the that the new Mapper in the chain key and value input classes\n      // match those of the previous Mapper output.\n      Configuration previousMapperConf \u003d getChainElementConf(jobConf, prefix\n          + CHAIN_MAPPER_CONFIG + (index - 1));\n      if (!inputKeyClass.isAssignableFrom(previousMapperConf.getClass(\n          MAPPER_OUTPUT_KEY_CLASS, null))) {\n        throw new IllegalArgumentException(\"The specified Mapper input key class does\"\n            + \" not match the previous Mapper\u0027s output key class.\");\n      }\n      if (!inputValueClass.isAssignableFrom(previousMapperConf.getClass(\n          MAPPER_OUTPUT_VALUE_CLASS, null))) {\n        throw new IllegalArgumentException(\"The specified Mapper input value class\"\n            + \" does not match the previous Mapper\u0027s output value class.\");\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/chain/Chain.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/chain/Chain.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/chain/Chain.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected static void validateKeyValueTypes(boolean isMap,\n      Configuration jobConf, Class\u003c?\u003e inputKeyClass, Class\u003c?\u003e inputValueClass,\n      Class\u003c?\u003e outputKeyClass, Class\u003c?\u003e outputValueClass, int index,\n      String prefix) {\n    // if it is a reducer chain and the first Mapper is being added check the\n    // key and value input classes of the mapper match those of the reducer\n    // output.\n    if (!isMap \u0026\u0026 index \u003d\u003d 0) {\n      Configuration reducerConf \u003d getChainElementConf(jobConf, prefix\n          + CHAIN_REDUCER_CONFIG);\n      if (!inputKeyClass.isAssignableFrom(reducerConf.getClass(\n          REDUCER_OUTPUT_KEY_CLASS, null))) {\n        throw new IllegalArgumentException(\"The Reducer output key class does\"\n            + \" not match the Mapper input key class\");\n      }\n      if (!inputValueClass.isAssignableFrom(reducerConf.getClass(\n          REDUCER_OUTPUT_VALUE_CLASS, null))) {\n        throw new IllegalArgumentException(\"The Reducer output value class\"\n            + \" does not match the Mapper input value class\");\n      }\n    } else if (index \u003e 0) {\n      // check the that the new Mapper in the chain key and value input classes\n      // match those of the previous Mapper output.\n      Configuration previousMapperConf \u003d getChainElementConf(jobConf, prefix\n          + CHAIN_MAPPER_CONFIG + (index - 1));\n      if (!inputKeyClass.isAssignableFrom(previousMapperConf.getClass(\n          MAPPER_OUTPUT_KEY_CLASS, null))) {\n        throw new IllegalArgumentException(\"The specified Mapper input key class does\"\n            + \" not match the previous Mapper\u0027s output key class.\");\n      }\n      if (!inputValueClass.isAssignableFrom(previousMapperConf.getClass(\n          MAPPER_OUTPUT_VALUE_CLASS, null))) {\n        throw new IllegalArgumentException(\"The specified Mapper input value class\"\n            + \" does not match the previous Mapper\u0027s output value class.\");\n      }\n    }\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/chain/Chain.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapreduce/lib/chain/Chain.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/chain/Chain.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,37 @@\n+  protected static void validateKeyValueTypes(boolean isMap,\n+      Configuration jobConf, Class\u003c?\u003e inputKeyClass, Class\u003c?\u003e inputValueClass,\n+      Class\u003c?\u003e outputKeyClass, Class\u003c?\u003e outputValueClass, int index,\n+      String prefix) {\n+    // if it is a reducer chain and the first Mapper is being added check the\n+    // key and value input classes of the mapper match those of the reducer\n+    // output.\n+    if (!isMap \u0026\u0026 index \u003d\u003d 0) {\n+      Configuration reducerConf \u003d getChainElementConf(jobConf, prefix\n+          + CHAIN_REDUCER_CONFIG);\n+      if (!inputKeyClass.isAssignableFrom(reducerConf.getClass(\n+          REDUCER_OUTPUT_KEY_CLASS, null))) {\n+        throw new IllegalArgumentException(\"The Reducer output key class does\"\n+            + \" not match the Mapper input key class\");\n+      }\n+      if (!inputValueClass.isAssignableFrom(reducerConf.getClass(\n+          REDUCER_OUTPUT_VALUE_CLASS, null))) {\n+        throw new IllegalArgumentException(\"The Reducer output value class\"\n+            + \" does not match the Mapper input value class\");\n+      }\n+    } else if (index \u003e 0) {\n+      // check the that the new Mapper in the chain key and value input classes\n+      // match those of the previous Mapper output.\n+      Configuration previousMapperConf \u003d getChainElementConf(jobConf, prefix\n+          + CHAIN_MAPPER_CONFIG + (index - 1));\n+      if (!inputKeyClass.isAssignableFrom(previousMapperConf.getClass(\n+          MAPPER_OUTPUT_KEY_CLASS, null))) {\n+        throw new IllegalArgumentException(\"The specified Mapper input key class does\"\n+            + \" not match the previous Mapper\u0027s output key class.\");\n+      }\n+      if (!inputValueClass.isAssignableFrom(previousMapperConf.getClass(\n+          MAPPER_OUTPUT_VALUE_CLASS, null))) {\n+        throw new IllegalArgumentException(\"The specified Mapper input value class\"\n+            + \" does not match the previous Mapper\u0027s output value class.\");\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected static void validateKeyValueTypes(boolean isMap,\n      Configuration jobConf, Class\u003c?\u003e inputKeyClass, Class\u003c?\u003e inputValueClass,\n      Class\u003c?\u003e outputKeyClass, Class\u003c?\u003e outputValueClass, int index,\n      String prefix) {\n    // if it is a reducer chain and the first Mapper is being added check the\n    // key and value input classes of the mapper match those of the reducer\n    // output.\n    if (!isMap \u0026\u0026 index \u003d\u003d 0) {\n      Configuration reducerConf \u003d getChainElementConf(jobConf, prefix\n          + CHAIN_REDUCER_CONFIG);\n      if (!inputKeyClass.isAssignableFrom(reducerConf.getClass(\n          REDUCER_OUTPUT_KEY_CLASS, null))) {\n        throw new IllegalArgumentException(\"The Reducer output key class does\"\n            + \" not match the Mapper input key class\");\n      }\n      if (!inputValueClass.isAssignableFrom(reducerConf.getClass(\n          REDUCER_OUTPUT_VALUE_CLASS, null))) {\n        throw new IllegalArgumentException(\"The Reducer output value class\"\n            + \" does not match the Mapper input value class\");\n      }\n    } else if (index \u003e 0) {\n      // check the that the new Mapper in the chain key and value input classes\n      // match those of the previous Mapper output.\n      Configuration previousMapperConf \u003d getChainElementConf(jobConf, prefix\n          + CHAIN_MAPPER_CONFIG + (index - 1));\n      if (!inputKeyClass.isAssignableFrom(previousMapperConf.getClass(\n          MAPPER_OUTPUT_KEY_CLASS, null))) {\n        throw new IllegalArgumentException(\"The specified Mapper input key class does\"\n            + \" not match the previous Mapper\u0027s output key class.\");\n      }\n      if (!inputValueClass.isAssignableFrom(previousMapperConf.getClass(\n          MAPPER_OUTPUT_VALUE_CLASS, null))) {\n        throw new IllegalArgumentException(\"The specified Mapper input value class\"\n            + \" does not match the previous Mapper\u0027s output value class.\");\n      }\n    }\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapreduce/lib/chain/Chain.java"
    }
  }
}