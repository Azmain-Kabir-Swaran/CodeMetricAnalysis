{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "VolumeAMSProcessor.java",
  "functionName": "aggregateVolumesFrom",
  "functionId": "aggregateVolumesFrom___request-AllocateRequest",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/volume/csi/processor/VolumeAMSProcessor.java",
  "functionStartLine": 111,
  "functionEndLine": 138,
  "numCommitsSeen": 2,
  "timeTaken": 742,
  "changeHistory": [
    "4e7284443e6cf8dac3cd5d2581730c87ae6ffb55"
  ],
  "changeHistoryShort": {
    "4e7284443e6cf8dac3cd5d2581730c87ae6ffb55": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4e7284443e6cf8dac3cd5d2581730c87ae6ffb55": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8902. [CSI] Add volume manager that manages CSI volume lifecycle. Contributed by Weiwei Yang.\n",
      "commitDate": "11/11/18 10:27 PM",
      "commitName": "4e7284443e6cf8dac3cd5d2581730c87ae6ffb55",
      "commitAuthor": "Sunil G",
      "diff": "@@ -0,0 +1,28 @@\n+  private List\u003cVolume\u003e aggregateVolumesFrom(AllocateRequest request)\n+      throws VolumeException {\n+    List\u003cVolume\u003e volumeList \u003d new ArrayList\u003c\u003e();\n+    List\u003cSchedulingRequest\u003e requests \u003d request.getSchedulingRequests();\n+    if (requests !\u003d null) {\n+      for (SchedulingRequest req : requests) {\n+        Resource totalResource \u003d req.getResourceSizing().getResources();\n+        List\u003cResourceInformation\u003e resourceList \u003d\n+            totalResource.getAllResourcesListCopy();\n+        for (ResourceInformation resourceInformation : resourceList) {\n+          List\u003cVolumeMetaData\u003e volumes \u003d\n+              VolumeMetaData.fromResource(resourceInformation);\n+          for (VolumeMetaData vs : volumes) {\n+            if (vs.getVolumeCapabilityRange().getMinCapacity() \u003c\u003d 0) {\n+              // capacity not specified, ignore\n+              continue;\n+            } else if (vs.isProvisionedVolume()) {\n+              volumeList.add(checkAndGetVolume(vs));\n+            } else {\n+              throw new InvalidVolumeException(\"Only pre-provisioned volume\"\n+                  + \" is supported now, volumeID must exist.\");\n+            }\n+          }\n+        }\n+      }\n+    }\n+    return volumeList;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cVolume\u003e aggregateVolumesFrom(AllocateRequest request)\n      throws VolumeException {\n    List\u003cVolume\u003e volumeList \u003d new ArrayList\u003c\u003e();\n    List\u003cSchedulingRequest\u003e requests \u003d request.getSchedulingRequests();\n    if (requests !\u003d null) {\n      for (SchedulingRequest req : requests) {\n        Resource totalResource \u003d req.getResourceSizing().getResources();\n        List\u003cResourceInformation\u003e resourceList \u003d\n            totalResource.getAllResourcesListCopy();\n        for (ResourceInformation resourceInformation : resourceList) {\n          List\u003cVolumeMetaData\u003e volumes \u003d\n              VolumeMetaData.fromResource(resourceInformation);\n          for (VolumeMetaData vs : volumes) {\n            if (vs.getVolumeCapabilityRange().getMinCapacity() \u003c\u003d 0) {\n              // capacity not specified, ignore\n              continue;\n            } else if (vs.isProvisionedVolume()) {\n              volumeList.add(checkAndGetVolume(vs));\n            } else {\n              throw new InvalidVolumeException(\"Only pre-provisioned volume\"\n                  + \" is supported now, volumeID must exist.\");\n            }\n          }\n        }\n      }\n    }\n    return volumeList;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/volume/csi/processor/VolumeAMSProcessor.java"
    }
  }
}