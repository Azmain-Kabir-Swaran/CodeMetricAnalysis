{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ComponentInstance.java",
  "functionName": "updateServiceRecord",
  "functionId": "updateServiceRecord___yarnRegistry-YarnRegistryViewForProviders__status-ContainerStatus",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/component/instance/ComponentInstance.java",
  "functionStartLine": 947,
  "functionEndLine": 964,
  "numCommitsSeen": 49,
  "timeTaken": 7179,
  "changeHistory": [
    "3ebe6a7819292ce6bd557e36137531b59890c845",
    "ce74e64363abc64561263be70a923ab3e67f043f",
    "40ab068eabe50875449d601471619a4e82fff86d",
    "1888318c89776f0bf354c1b13e3ee169e14ff638",
    "8d335e59cf9fa794a379b12f06d2d54f1b781118",
    "a041373dd418a123438c62c511c908859578bf01",
    "845764da146e98927e8ea5b2209f19f4fc3feda5",
    "bce06ed1af8183865889e554c2b353836deb034a"
  ],
  "changeHistoryShort": {
    "3ebe6a7819292ce6bd557e36137531b59890c845": "Ybodychange",
    "ce74e64363abc64561263be70a923ab3e67f043f": "Ybodychange",
    "40ab068eabe50875449d601471619a4e82fff86d": "Yfilerename",
    "1888318c89776f0bf354c1b13e3ee169e14ff638": "Ymultichange(Ymovefromfile,Ymodifierchange,Yexceptionschange,Ybodychange,Yparameterchange)",
    "8d335e59cf9fa794a379b12f06d2d54f1b781118": "Ybodychange",
    "a041373dd418a123438c62c511c908859578bf01": "Ymultichange(Yexceptionschange,Ybodychange)",
    "845764da146e98927e8ea5b2209f19f4fc3feda5": "Ybodychange",
    "bce06ed1af8183865889e554c2b353836deb034a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3ebe6a7819292ce6bd557e36137531b59890c845": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7565. Yarn service pre-maturely releases the container after AM restart. Contributed by Chandni Singh\n",
      "commitDate": "12/12/17 1:35 PM",
      "commitName": "3ebe6a7819292ce6bd557e36137531b59890c845",
      "commitAuthor": "Jian He",
      "commitDateOld": "16/11/17 7:58 AM",
      "commitNameOld": "f4d5d20286eb05449f6fd7cd6ff0554228205fe2",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 26.23,
      "commitsBetweenForRepo": 131,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,18 @@\n   private  void updateServiceRecord(\n       YarnRegistryViewForProviders yarnRegistry, ContainerStatus status) {\n     ServiceRecord record \u003d new ServiceRecord();\n     String containerId \u003d status.getContainerId().toString();\n     record.set(YARN_ID, containerId);\n     record.description \u003d getCompInstanceName();\n     record.set(YARN_PERSISTENCE, PersistencePolicies.CONTAINER);\n     record.set(YARN_IP, status.getIPs().get(0));\n     record.set(YARN_HOSTNAME, status.getHost());\n+    record.set(YARN_COMPONENT, component.getName());\n     try {\n       yarnRegistry\n           .putComponent(RegistryPathUtils.encodeYarnID(containerId), record);\n     } catch (IOException e) {\n       LOG.error(\n           \"Failed to update service record in registry: \" + containerId + \"\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private  void updateServiceRecord(\n      YarnRegistryViewForProviders yarnRegistry, ContainerStatus status) {\n    ServiceRecord record \u003d new ServiceRecord();\n    String containerId \u003d status.getContainerId().toString();\n    record.set(YARN_ID, containerId);\n    record.description \u003d getCompInstanceName();\n    record.set(YARN_PERSISTENCE, PersistencePolicies.CONTAINER);\n    record.set(YARN_IP, status.getIPs().get(0));\n    record.set(YARN_HOSTNAME, status.getHost());\n    record.set(YARN_COMPONENT, component.getName());\n    try {\n      yarnRegistry\n          .putComponent(RegistryPathUtils.encodeYarnID(containerId), record);\n    } catch (IOException e) {\n      LOG.error(\n          \"Failed to update service record in registry: \" + containerId + \"\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/component/instance/ComponentInstance.java",
      "extendedDetails": {}
    },
    "ce74e64363abc64561263be70a923ab3e67f043f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7210. Some NPE fixes in Registry DNS. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "ce74e64363abc64561263be70a923ab3e67f043f",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,17 @@\n   private  void updateServiceRecord(\n       YarnRegistryViewForProviders yarnRegistry, ContainerStatus status) {\n     ServiceRecord record \u003d new ServiceRecord();\n     String containerId \u003d status.getContainerId().toString();\n-    record.set(YarnRegistryAttributes.YARN_ID, containerId);\n+    record.set(YARN_ID, containerId);\n     record.description \u003d getCompInstanceName();\n-    record.set(YarnRegistryAttributes.YARN_PERSISTENCE,\n-        PersistencePolicies.CONTAINER);\n-    record.set(\"yarn:ip\", status.getIPs());\n-    record.set(\"yarn:hostname\", status.getHost());\n+    record.set(YARN_PERSISTENCE, PersistencePolicies.CONTAINER);\n+    record.set(YARN_IP, status.getIPs().get(0));\n+    record.set(YARN_HOSTNAME, status.getHost());\n     try {\n       yarnRegistry\n           .putComponent(RegistryPathUtils.encodeYarnID(containerId), record);\n     } catch (IOException e) {\n       LOG.error(\n           \"Failed to update service record in registry: \" + containerId + \"\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private  void updateServiceRecord(\n      YarnRegistryViewForProviders yarnRegistry, ContainerStatus status) {\n    ServiceRecord record \u003d new ServiceRecord();\n    String containerId \u003d status.getContainerId().toString();\n    record.set(YARN_ID, containerId);\n    record.description \u003d getCompInstanceName();\n    record.set(YARN_PERSISTENCE, PersistencePolicies.CONTAINER);\n    record.set(YARN_IP, status.getIPs().get(0));\n    record.set(YARN_HOSTNAME, status.getHost());\n    try {\n      yarnRegistry\n          .putComponent(RegistryPathUtils.encodeYarnID(containerId), record);\n    } catch (IOException e) {\n      LOG.error(\n          \"Failed to update service record in registry: \" + containerId + \"\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/component/instance/ComponentInstance.java",
      "extendedDetails": {}
    },
    "40ab068eabe50875449d601471619a4e82fff86d": {
      "type": "Yfilerename",
      "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
      "commitAuthorOld": "Gour Saha",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private  void updateServiceRecord(\n      YarnRegistryViewForProviders yarnRegistry, ContainerStatus status) {\n    ServiceRecord record \u003d new ServiceRecord();\n    String containerId \u003d status.getContainerId().toString();\n    record.set(YarnRegistryAttributes.YARN_ID, containerId);\n    record.description \u003d getCompInstanceName();\n    record.set(YarnRegistryAttributes.YARN_PERSISTENCE,\n        PersistencePolicies.CONTAINER);\n    record.set(\"yarn:ip\", status.getIPs());\n    record.set(\"yarn:hostname\", status.getHost());\n    try {\n      yarnRegistry\n          .putComponent(RegistryPathUtils.encodeYarnID(containerId), record);\n    } catch (IOException e) {\n      LOG.error(\n          \"Failed to update service record in registry: \" + containerId + \"\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/component/instance/ComponentInstance.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/compinstance/ComponentInstance.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/component/instance/ComponentInstance.java"
      }
    },
    "1888318c89776f0bf354c1b13e3ee169e14ff638": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Yexceptionschange,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "27dcc679596edaaeb18dc42d2a812957a9d34e89",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,18 @@\n-  public void updateServiceRecord(StateAccessForProviders amState,\n-      YarnRegistryViewForProviders yarnRegistry,\n-      String containerId, String roleName, List\u003cString\u003e ip, String hostname)\n-      throws IOException {\n+  private  void updateServiceRecord(\n+      YarnRegistryViewForProviders yarnRegistry, ContainerStatus status) {\n+    ServiceRecord record \u003d new ServiceRecord();\n+    String containerId \u003d status.getContainerId().toString();\n+    record.set(YarnRegistryAttributes.YARN_ID, containerId);\n+    record.description \u003d getCompInstanceName();\n+    record.set(YarnRegistryAttributes.YARN_PERSISTENCE,\n+        PersistencePolicies.CONTAINER);\n+    record.set(\"yarn:ip\", status.getIPs());\n+    record.set(\"yarn:hostname\", status.getHost());\n     try {\n-      RoleInstance role \u003d null;\n-      if(ip !\u003d null \u0026\u0026 !ip.isEmpty()){\n-        role \u003d amState.getOwnedContainer(containerId);\n-        role.ip \u003d ip.get(0);\n-      }\n-      if(hostname !\u003d null \u0026\u0026 !hostname.isEmpty()){\n-        role \u003d amState.getOwnedContainer(containerId);\n-        role.hostname \u003d hostname;\n-      }\n-      if (role !\u003d null) {\n-        // create and publish updated service record (including hostname \u0026 ip)\n-        ServiceRecord record \u003d new ServiceRecord();\n-        record.set(YarnRegistryAttributes.YARN_ID, containerId);\n-        record.description \u003d role.getCompInstanceName();\n-        record.set(YarnRegistryAttributes.YARN_PERSISTENCE,\n-            PersistencePolicies.CONTAINER);\n-        // TODO: use constants from YarnRegistryAttributes\n-        if (role.ip !\u003d null) {\n-          record.set(\"yarn:ip\", role.ip);\n-        }\n-        if (role.hostname !\u003d null) {\n-          record.set(\"yarn:hostname\", role.hostname);\n-        }\n-        yarnRegistry.putComponent(\n-            RegistryPathUtils.encodeYarnID(containerId), record);\n-      }\n-    } catch (NoSuchNodeException e) {\n-      // ignore - there is nothing to do if we don\u0027t find a container\n-      log.warn(\"Owned container {} not found - {}\", containerId, e);\n+      yarnRegistry\n+          .putComponent(RegistryPathUtils.encodeYarnID(containerId), record);\n+    } catch (IOException e) {\n+      LOG.error(\n+          \"Failed to update service record in registry: \" + containerId + \"\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private  void updateServiceRecord(\n      YarnRegistryViewForProviders yarnRegistry, ContainerStatus status) {\n    ServiceRecord record \u003d new ServiceRecord();\n    String containerId \u003d status.getContainerId().toString();\n    record.set(YarnRegistryAttributes.YARN_ID, containerId);\n    record.description \u003d getCompInstanceName();\n    record.set(YarnRegistryAttributes.YARN_PERSISTENCE,\n        PersistencePolicies.CONTAINER);\n    record.set(\"yarn:ip\", status.getIPs());\n    record.set(\"yarn:hostname\", status.getHost());\n    try {\n      yarnRegistry\n          .putComponent(RegistryPathUtils.encodeYarnID(containerId), record);\n    } catch (IOException e) {\n      LOG.error(\n          \"Failed to update service record in registry: \" + containerId + \"\");\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/compinstance/ComponentInstance.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/providers/ProviderUtils.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/compinstance/ComponentInstance.java",
            "oldMethodName": "updateServiceRecord",
            "newMethodName": "updateServiceRecord"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "27dcc679596edaaeb18dc42d2a812957a9d34e89",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,18 @@\n-  public void updateServiceRecord(StateAccessForProviders amState,\n-      YarnRegistryViewForProviders yarnRegistry,\n-      String containerId, String roleName, List\u003cString\u003e ip, String hostname)\n-      throws IOException {\n+  private  void updateServiceRecord(\n+      YarnRegistryViewForProviders yarnRegistry, ContainerStatus status) {\n+    ServiceRecord record \u003d new ServiceRecord();\n+    String containerId \u003d status.getContainerId().toString();\n+    record.set(YarnRegistryAttributes.YARN_ID, containerId);\n+    record.description \u003d getCompInstanceName();\n+    record.set(YarnRegistryAttributes.YARN_PERSISTENCE,\n+        PersistencePolicies.CONTAINER);\n+    record.set(\"yarn:ip\", status.getIPs());\n+    record.set(\"yarn:hostname\", status.getHost());\n     try {\n-      RoleInstance role \u003d null;\n-      if(ip !\u003d null \u0026\u0026 !ip.isEmpty()){\n-        role \u003d amState.getOwnedContainer(containerId);\n-        role.ip \u003d ip.get(0);\n-      }\n-      if(hostname !\u003d null \u0026\u0026 !hostname.isEmpty()){\n-        role \u003d amState.getOwnedContainer(containerId);\n-        role.hostname \u003d hostname;\n-      }\n-      if (role !\u003d null) {\n-        // create and publish updated service record (including hostname \u0026 ip)\n-        ServiceRecord record \u003d new ServiceRecord();\n-        record.set(YarnRegistryAttributes.YARN_ID, containerId);\n-        record.description \u003d role.getCompInstanceName();\n-        record.set(YarnRegistryAttributes.YARN_PERSISTENCE,\n-            PersistencePolicies.CONTAINER);\n-        // TODO: use constants from YarnRegistryAttributes\n-        if (role.ip !\u003d null) {\n-          record.set(\"yarn:ip\", role.ip);\n-        }\n-        if (role.hostname !\u003d null) {\n-          record.set(\"yarn:hostname\", role.hostname);\n-        }\n-        yarnRegistry.putComponent(\n-            RegistryPathUtils.encodeYarnID(containerId), record);\n-      }\n-    } catch (NoSuchNodeException e) {\n-      // ignore - there is nothing to do if we don\u0027t find a container\n-      log.warn(\"Owned container {} not found - {}\", containerId, e);\n+      yarnRegistry\n+          .putComponent(RegistryPathUtils.encodeYarnID(containerId), record);\n+    } catch (IOException e) {\n+      LOG.error(\n+          \"Failed to update service record in registry: \" + containerId + \"\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private  void updateServiceRecord(\n      YarnRegistryViewForProviders yarnRegistry, ContainerStatus status) {\n    ServiceRecord record \u003d new ServiceRecord();\n    String containerId \u003d status.getContainerId().toString();\n    record.set(YarnRegistryAttributes.YARN_ID, containerId);\n    record.description \u003d getCompInstanceName();\n    record.set(YarnRegistryAttributes.YARN_PERSISTENCE,\n        PersistencePolicies.CONTAINER);\n    record.set(\"yarn:ip\", status.getIPs());\n    record.set(\"yarn:hostname\", status.getHost());\n    try {\n      yarnRegistry\n          .putComponent(RegistryPathUtils.encodeYarnID(containerId), record);\n    } catch (IOException e) {\n      LOG.error(\n          \"Failed to update service record in registry: \" + containerId + \"\");\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/compinstance/ComponentInstance.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "27dcc679596edaaeb18dc42d2a812957a9d34e89",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,18 @@\n-  public void updateServiceRecord(StateAccessForProviders amState,\n-      YarnRegistryViewForProviders yarnRegistry,\n-      String containerId, String roleName, List\u003cString\u003e ip, String hostname)\n-      throws IOException {\n+  private  void updateServiceRecord(\n+      YarnRegistryViewForProviders yarnRegistry, ContainerStatus status) {\n+    ServiceRecord record \u003d new ServiceRecord();\n+    String containerId \u003d status.getContainerId().toString();\n+    record.set(YarnRegistryAttributes.YARN_ID, containerId);\n+    record.description \u003d getCompInstanceName();\n+    record.set(YarnRegistryAttributes.YARN_PERSISTENCE,\n+        PersistencePolicies.CONTAINER);\n+    record.set(\"yarn:ip\", status.getIPs());\n+    record.set(\"yarn:hostname\", status.getHost());\n     try {\n-      RoleInstance role \u003d null;\n-      if(ip !\u003d null \u0026\u0026 !ip.isEmpty()){\n-        role \u003d amState.getOwnedContainer(containerId);\n-        role.ip \u003d ip.get(0);\n-      }\n-      if(hostname !\u003d null \u0026\u0026 !hostname.isEmpty()){\n-        role \u003d amState.getOwnedContainer(containerId);\n-        role.hostname \u003d hostname;\n-      }\n-      if (role !\u003d null) {\n-        // create and publish updated service record (including hostname \u0026 ip)\n-        ServiceRecord record \u003d new ServiceRecord();\n-        record.set(YarnRegistryAttributes.YARN_ID, containerId);\n-        record.description \u003d role.getCompInstanceName();\n-        record.set(YarnRegistryAttributes.YARN_PERSISTENCE,\n-            PersistencePolicies.CONTAINER);\n-        // TODO: use constants from YarnRegistryAttributes\n-        if (role.ip !\u003d null) {\n-          record.set(\"yarn:ip\", role.ip);\n-        }\n-        if (role.hostname !\u003d null) {\n-          record.set(\"yarn:hostname\", role.hostname);\n-        }\n-        yarnRegistry.putComponent(\n-            RegistryPathUtils.encodeYarnID(containerId), record);\n-      }\n-    } catch (NoSuchNodeException e) {\n-      // ignore - there is nothing to do if we don\u0027t find a container\n-      log.warn(\"Owned container {} not found - {}\", containerId, e);\n+      yarnRegistry\n+          .putComponent(RegistryPathUtils.encodeYarnID(containerId), record);\n+    } catch (IOException e) {\n+      LOG.error(\n+          \"Failed to update service record in registry: \" + containerId + \"\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private  void updateServiceRecord(\n      YarnRegistryViewForProviders yarnRegistry, ContainerStatus status) {\n    ServiceRecord record \u003d new ServiceRecord();\n    String containerId \u003d status.getContainerId().toString();\n    record.set(YarnRegistryAttributes.YARN_ID, containerId);\n    record.description \u003d getCompInstanceName();\n    record.set(YarnRegistryAttributes.YARN_PERSISTENCE,\n        PersistencePolicies.CONTAINER);\n    record.set(\"yarn:ip\", status.getIPs());\n    record.set(\"yarn:hostname\", status.getHost());\n    try {\n      yarnRegistry\n          .putComponent(RegistryPathUtils.encodeYarnID(containerId), record);\n    } catch (IOException e) {\n      LOG.error(\n          \"Failed to update service record in registry: \" + containerId + \"\");\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/compinstance/ComponentInstance.java",
          "extendedDetails": {
            "oldValue": "[IOException]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "27dcc679596edaaeb18dc42d2a812957a9d34e89",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,18 @@\n-  public void updateServiceRecord(StateAccessForProviders amState,\n-      YarnRegistryViewForProviders yarnRegistry,\n-      String containerId, String roleName, List\u003cString\u003e ip, String hostname)\n-      throws IOException {\n+  private  void updateServiceRecord(\n+      YarnRegistryViewForProviders yarnRegistry, ContainerStatus status) {\n+    ServiceRecord record \u003d new ServiceRecord();\n+    String containerId \u003d status.getContainerId().toString();\n+    record.set(YarnRegistryAttributes.YARN_ID, containerId);\n+    record.description \u003d getCompInstanceName();\n+    record.set(YarnRegistryAttributes.YARN_PERSISTENCE,\n+        PersistencePolicies.CONTAINER);\n+    record.set(\"yarn:ip\", status.getIPs());\n+    record.set(\"yarn:hostname\", status.getHost());\n     try {\n-      RoleInstance role \u003d null;\n-      if(ip !\u003d null \u0026\u0026 !ip.isEmpty()){\n-        role \u003d amState.getOwnedContainer(containerId);\n-        role.ip \u003d ip.get(0);\n-      }\n-      if(hostname !\u003d null \u0026\u0026 !hostname.isEmpty()){\n-        role \u003d amState.getOwnedContainer(containerId);\n-        role.hostname \u003d hostname;\n-      }\n-      if (role !\u003d null) {\n-        // create and publish updated service record (including hostname \u0026 ip)\n-        ServiceRecord record \u003d new ServiceRecord();\n-        record.set(YarnRegistryAttributes.YARN_ID, containerId);\n-        record.description \u003d role.getCompInstanceName();\n-        record.set(YarnRegistryAttributes.YARN_PERSISTENCE,\n-            PersistencePolicies.CONTAINER);\n-        // TODO: use constants from YarnRegistryAttributes\n-        if (role.ip !\u003d null) {\n-          record.set(\"yarn:ip\", role.ip);\n-        }\n-        if (role.hostname !\u003d null) {\n-          record.set(\"yarn:hostname\", role.hostname);\n-        }\n-        yarnRegistry.putComponent(\n-            RegistryPathUtils.encodeYarnID(containerId), record);\n-      }\n-    } catch (NoSuchNodeException e) {\n-      // ignore - there is nothing to do if we don\u0027t find a container\n-      log.warn(\"Owned container {} not found - {}\", containerId, e);\n+      yarnRegistry\n+          .putComponent(RegistryPathUtils.encodeYarnID(containerId), record);\n+    } catch (IOException e) {\n+      LOG.error(\n+          \"Failed to update service record in registry: \" + containerId + \"\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private  void updateServiceRecord(\n      YarnRegistryViewForProviders yarnRegistry, ContainerStatus status) {\n    ServiceRecord record \u003d new ServiceRecord();\n    String containerId \u003d status.getContainerId().toString();\n    record.set(YarnRegistryAttributes.YARN_ID, containerId);\n    record.description \u003d getCompInstanceName();\n    record.set(YarnRegistryAttributes.YARN_PERSISTENCE,\n        PersistencePolicies.CONTAINER);\n    record.set(\"yarn:ip\", status.getIPs());\n    record.set(\"yarn:hostname\", status.getHost());\n    try {\n      yarnRegistry\n          .putComponent(RegistryPathUtils.encodeYarnID(containerId), record);\n    } catch (IOException e) {\n      LOG.error(\n          \"Failed to update service record in registry: \" + containerId + \"\");\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/compinstance/ComponentInstance.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "27dcc679596edaaeb18dc42d2a812957a9d34e89",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,18 @@\n-  public void updateServiceRecord(StateAccessForProviders amState,\n-      YarnRegistryViewForProviders yarnRegistry,\n-      String containerId, String roleName, List\u003cString\u003e ip, String hostname)\n-      throws IOException {\n+  private  void updateServiceRecord(\n+      YarnRegistryViewForProviders yarnRegistry, ContainerStatus status) {\n+    ServiceRecord record \u003d new ServiceRecord();\n+    String containerId \u003d status.getContainerId().toString();\n+    record.set(YarnRegistryAttributes.YARN_ID, containerId);\n+    record.description \u003d getCompInstanceName();\n+    record.set(YarnRegistryAttributes.YARN_PERSISTENCE,\n+        PersistencePolicies.CONTAINER);\n+    record.set(\"yarn:ip\", status.getIPs());\n+    record.set(\"yarn:hostname\", status.getHost());\n     try {\n-      RoleInstance role \u003d null;\n-      if(ip !\u003d null \u0026\u0026 !ip.isEmpty()){\n-        role \u003d amState.getOwnedContainer(containerId);\n-        role.ip \u003d ip.get(0);\n-      }\n-      if(hostname !\u003d null \u0026\u0026 !hostname.isEmpty()){\n-        role \u003d amState.getOwnedContainer(containerId);\n-        role.hostname \u003d hostname;\n-      }\n-      if (role !\u003d null) {\n-        // create and publish updated service record (including hostname \u0026 ip)\n-        ServiceRecord record \u003d new ServiceRecord();\n-        record.set(YarnRegistryAttributes.YARN_ID, containerId);\n-        record.description \u003d role.getCompInstanceName();\n-        record.set(YarnRegistryAttributes.YARN_PERSISTENCE,\n-            PersistencePolicies.CONTAINER);\n-        // TODO: use constants from YarnRegistryAttributes\n-        if (role.ip !\u003d null) {\n-          record.set(\"yarn:ip\", role.ip);\n-        }\n-        if (role.hostname !\u003d null) {\n-          record.set(\"yarn:hostname\", role.hostname);\n-        }\n-        yarnRegistry.putComponent(\n-            RegistryPathUtils.encodeYarnID(containerId), record);\n-      }\n-    } catch (NoSuchNodeException e) {\n-      // ignore - there is nothing to do if we don\u0027t find a container\n-      log.warn(\"Owned container {} not found - {}\", containerId, e);\n+      yarnRegistry\n+          .putComponent(RegistryPathUtils.encodeYarnID(containerId), record);\n+    } catch (IOException e) {\n+      LOG.error(\n+          \"Failed to update service record in registry: \" + containerId + \"\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private  void updateServiceRecord(\n      YarnRegistryViewForProviders yarnRegistry, ContainerStatus status) {\n    ServiceRecord record \u003d new ServiceRecord();\n    String containerId \u003d status.getContainerId().toString();\n    record.set(YarnRegistryAttributes.YARN_ID, containerId);\n    record.description \u003d getCompInstanceName();\n    record.set(YarnRegistryAttributes.YARN_PERSISTENCE,\n        PersistencePolicies.CONTAINER);\n    record.set(\"yarn:ip\", status.getIPs());\n    record.set(\"yarn:hostname\", status.getHost());\n    try {\n      yarnRegistry\n          .putComponent(RegistryPathUtils.encodeYarnID(containerId), record);\n    } catch (IOException e) {\n      LOG.error(\n          \"Failed to update service record in registry: \" + containerId + \"\");\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/compinstance/ComponentInstance.java",
          "extendedDetails": {
            "oldValue": "[amState-StateAccessForProviders, yarnRegistry-YarnRegistryViewForProviders, containerId-String, roleName-String, ip-List\u003cString\u003e, hostname-String]",
            "newValue": "[yarnRegistry-YarnRegistryViewForProviders, status-ContainerStatus]"
          }
        }
      ]
    },
    "8d335e59cf9fa794a379b12f06d2d54f1b781118": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6804. [yarn-native-services changes] Allow custom hostname for docker containers in native services. Contributed by Billie Rinaldi\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "8d335e59cf9fa794a379b12f06d2d54f1b781118",
      "commitAuthor": "Jian He",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "e86d828548c17ebadc0e6d22b50151eebd9696d5",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,36 @@\n   public void updateServiceRecord(StateAccessForProviders amState,\n       YarnRegistryViewForProviders yarnRegistry,\n       String containerId, String roleName, List\u003cString\u003e ip, String hostname)\n       throws IOException {\n     try {\n       RoleInstance role \u003d null;\n       if(ip !\u003d null \u0026\u0026 !ip.isEmpty()){\n         role \u003d amState.getOwnedContainer(containerId);\n         role.ip \u003d ip.get(0);\n       }\n       if(hostname !\u003d null \u0026\u0026 !hostname.isEmpty()){\n         role \u003d amState.getOwnedContainer(containerId);\n         role.hostname \u003d hostname;\n       }\n       if (role !\u003d null) {\n         // create and publish updated service record (including hostname \u0026 ip)\n         ServiceRecord record \u003d new ServiceRecord();\n         record.set(YarnRegistryAttributes.YARN_ID, containerId);\n-        String componentInstanceName \u003d role.getCompInstanceName();\n-        record.description \u003d componentInstanceName.replaceAll(\"_\", \"-\");\n+        record.description \u003d role.getCompInstanceName();\n         record.set(YarnRegistryAttributes.YARN_PERSISTENCE,\n             PersistencePolicies.CONTAINER);\n         // TODO: use constants from YarnRegistryAttributes\n         if (role.ip !\u003d null) {\n           record.set(\"yarn:ip\", role.ip);\n         }\n         if (role.hostname !\u003d null) {\n           record.set(\"yarn:hostname\", role.hostname);\n         }\n         yarnRegistry.putComponent(\n             RegistryPathUtils.encodeYarnID(containerId), record);\n       }\n     } catch (NoSuchNodeException e) {\n       // ignore - there is nothing to do if we don\u0027t find a container\n       log.warn(\"Owned container {} not found - {}\", containerId, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateServiceRecord(StateAccessForProviders amState,\n      YarnRegistryViewForProviders yarnRegistry,\n      String containerId, String roleName, List\u003cString\u003e ip, String hostname)\n      throws IOException {\n    try {\n      RoleInstance role \u003d null;\n      if(ip !\u003d null \u0026\u0026 !ip.isEmpty()){\n        role \u003d amState.getOwnedContainer(containerId);\n        role.ip \u003d ip.get(0);\n      }\n      if(hostname !\u003d null \u0026\u0026 !hostname.isEmpty()){\n        role \u003d amState.getOwnedContainer(containerId);\n        role.hostname \u003d hostname;\n      }\n      if (role !\u003d null) {\n        // create and publish updated service record (including hostname \u0026 ip)\n        ServiceRecord record \u003d new ServiceRecord();\n        record.set(YarnRegistryAttributes.YARN_ID, containerId);\n        record.description \u003d role.getCompInstanceName();\n        record.set(YarnRegistryAttributes.YARN_PERSISTENCE,\n            PersistencePolicies.CONTAINER);\n        // TODO: use constants from YarnRegistryAttributes\n        if (role.ip !\u003d null) {\n          record.set(\"yarn:ip\", role.ip);\n        }\n        if (role.hostname !\u003d null) {\n          record.set(\"yarn:hostname\", role.hostname);\n        }\n        yarnRegistry.putComponent(\n            RegistryPathUtils.encodeYarnID(containerId), record);\n      }\n    } catch (NoSuchNodeException e) {\n      // ignore - there is nothing to do if we don\u0027t find a container\n      log.warn(\"Owned container {} not found - {}\", containerId, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/providers/ProviderUtils.java",
      "extendedDetails": {}
    },
    "a041373dd418a123438c62c511c908859578bf01": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-6533. Race condition in writing service record to registry in yarn native services. Contributed by Billie Rinaldi\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "a041373dd418a123438c62c511c908859578bf01",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-6533. Race condition in writing service record to registry in yarn native services. Contributed by Billie Rinaldi\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "a041373dd418a123438c62c511c908859578bf01",
          "commitAuthor": "Jian He",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "ce05c6e9811bca0bdc01152c2a82508a639480f5",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,37 @@\n   public void updateServiceRecord(StateAccessForProviders amState,\n       YarnRegistryViewForProviders yarnRegistry,\n-      String containerId, String roleName, List\u003cString\u003e ip, String hostname) {\n+      String containerId, String roleName, List\u003cString\u003e ip, String hostname)\n+      throws IOException {\n     try {\n       RoleInstance role \u003d null;\n       if(ip !\u003d null \u0026\u0026 !ip.isEmpty()){\n         role \u003d amState.getOwnedContainer(containerId);\n         role.ip \u003d ip.get(0);\n       }\n       if(hostname !\u003d null \u0026\u0026 !hostname.isEmpty()){\n         role \u003d amState.getOwnedContainer(containerId);\n         role.hostname \u003d hostname;\n       }\n       if (role !\u003d null) {\n         // create and publish updated service record (including hostname \u0026 ip)\n         ServiceRecord record \u003d new ServiceRecord();\n         record.set(YarnRegistryAttributes.YARN_ID, containerId);\n         String componentInstanceName \u003d role.getCompInstanceName();\n         record.description \u003d componentInstanceName.replaceAll(\"_\", \"-\");\n         record.set(YarnRegistryAttributes.YARN_PERSISTENCE,\n             PersistencePolicies.CONTAINER);\n         // TODO: use constants from YarnRegistryAttributes\n         if (role.ip !\u003d null) {\n           record.set(\"yarn:ip\", role.ip);\n         }\n         if (role.hostname !\u003d null) {\n           record.set(\"yarn:hostname\", role.hostname);\n         }\n         yarnRegistry.putComponent(\n             RegistryPathUtils.encodeYarnID(containerId), record);\n       }\n     } catch (NoSuchNodeException e) {\n       // ignore - there is nothing to do if we don\u0027t find a container\n       log.warn(\"Owned container {} not found - {}\", containerId, e);\n-    } catch (IOException e) {\n-      log.warn(\"Error updating container {} service record in registry\",\n-          containerId, e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void updateServiceRecord(StateAccessForProviders amState,\n      YarnRegistryViewForProviders yarnRegistry,\n      String containerId, String roleName, List\u003cString\u003e ip, String hostname)\n      throws IOException {\n    try {\n      RoleInstance role \u003d null;\n      if(ip !\u003d null \u0026\u0026 !ip.isEmpty()){\n        role \u003d amState.getOwnedContainer(containerId);\n        role.ip \u003d ip.get(0);\n      }\n      if(hostname !\u003d null \u0026\u0026 !hostname.isEmpty()){\n        role \u003d amState.getOwnedContainer(containerId);\n        role.hostname \u003d hostname;\n      }\n      if (role !\u003d null) {\n        // create and publish updated service record (including hostname \u0026 ip)\n        ServiceRecord record \u003d new ServiceRecord();\n        record.set(YarnRegistryAttributes.YARN_ID, containerId);\n        String componentInstanceName \u003d role.getCompInstanceName();\n        record.description \u003d componentInstanceName.replaceAll(\"_\", \"-\");\n        record.set(YarnRegistryAttributes.YARN_PERSISTENCE,\n            PersistencePolicies.CONTAINER);\n        // TODO: use constants from YarnRegistryAttributes\n        if (role.ip !\u003d null) {\n          record.set(\"yarn:ip\", role.ip);\n        }\n        if (role.hostname !\u003d null) {\n          record.set(\"yarn:hostname\", role.hostname);\n        }\n        yarnRegistry.putComponent(\n            RegistryPathUtils.encodeYarnID(containerId), record);\n      }\n    } catch (NoSuchNodeException e) {\n      // ignore - there is nothing to do if we don\u0027t find a container\n      log.warn(\"Owned container {} not found - {}\", containerId, e);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/providers/ProviderUtils.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6533. Race condition in writing service record to registry in yarn native services. Contributed by Billie Rinaldi\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "a041373dd418a123438c62c511c908859578bf01",
          "commitAuthor": "Jian He",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "ce05c6e9811bca0bdc01152c2a82508a639480f5",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,37 @@\n   public void updateServiceRecord(StateAccessForProviders amState,\n       YarnRegistryViewForProviders yarnRegistry,\n-      String containerId, String roleName, List\u003cString\u003e ip, String hostname) {\n+      String containerId, String roleName, List\u003cString\u003e ip, String hostname)\n+      throws IOException {\n     try {\n       RoleInstance role \u003d null;\n       if(ip !\u003d null \u0026\u0026 !ip.isEmpty()){\n         role \u003d amState.getOwnedContainer(containerId);\n         role.ip \u003d ip.get(0);\n       }\n       if(hostname !\u003d null \u0026\u0026 !hostname.isEmpty()){\n         role \u003d amState.getOwnedContainer(containerId);\n         role.hostname \u003d hostname;\n       }\n       if (role !\u003d null) {\n         // create and publish updated service record (including hostname \u0026 ip)\n         ServiceRecord record \u003d new ServiceRecord();\n         record.set(YarnRegistryAttributes.YARN_ID, containerId);\n         String componentInstanceName \u003d role.getCompInstanceName();\n         record.description \u003d componentInstanceName.replaceAll(\"_\", \"-\");\n         record.set(YarnRegistryAttributes.YARN_PERSISTENCE,\n             PersistencePolicies.CONTAINER);\n         // TODO: use constants from YarnRegistryAttributes\n         if (role.ip !\u003d null) {\n           record.set(\"yarn:ip\", role.ip);\n         }\n         if (role.hostname !\u003d null) {\n           record.set(\"yarn:hostname\", role.hostname);\n         }\n         yarnRegistry.putComponent(\n             RegistryPathUtils.encodeYarnID(containerId), record);\n       }\n     } catch (NoSuchNodeException e) {\n       // ignore - there is nothing to do if we don\u0027t find a container\n       log.warn(\"Owned container {} not found - {}\", containerId, e);\n-    } catch (IOException e) {\n-      log.warn(\"Error updating container {} service record in registry\",\n-          containerId, e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void updateServiceRecord(StateAccessForProviders amState,\n      YarnRegistryViewForProviders yarnRegistry,\n      String containerId, String roleName, List\u003cString\u003e ip, String hostname)\n      throws IOException {\n    try {\n      RoleInstance role \u003d null;\n      if(ip !\u003d null \u0026\u0026 !ip.isEmpty()){\n        role \u003d amState.getOwnedContainer(containerId);\n        role.ip \u003d ip.get(0);\n      }\n      if(hostname !\u003d null \u0026\u0026 !hostname.isEmpty()){\n        role \u003d amState.getOwnedContainer(containerId);\n        role.hostname \u003d hostname;\n      }\n      if (role !\u003d null) {\n        // create and publish updated service record (including hostname \u0026 ip)\n        ServiceRecord record \u003d new ServiceRecord();\n        record.set(YarnRegistryAttributes.YARN_ID, containerId);\n        String componentInstanceName \u003d role.getCompInstanceName();\n        record.description \u003d componentInstanceName.replaceAll(\"_\", \"-\");\n        record.set(YarnRegistryAttributes.YARN_PERSISTENCE,\n            PersistencePolicies.CONTAINER);\n        // TODO: use constants from YarnRegistryAttributes\n        if (role.ip !\u003d null) {\n          record.set(\"yarn:ip\", role.ip);\n        }\n        if (role.hostname !\u003d null) {\n          record.set(\"yarn:hostname\", role.hostname);\n        }\n        yarnRegistry.putComponent(\n            RegistryPathUtils.encodeYarnID(containerId), record);\n      }\n    } catch (NoSuchNodeException e) {\n      // ignore - there is nothing to do if we don\u0027t find a container\n      log.warn(\"Owned container {} not found - {}\", containerId, e);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/providers/ProviderUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "845764da146e98927e8ea5b2209f19f4fc3feda5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6405. Improve configuring services through REST API. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:28 PM",
      "commitName": "845764da146e98927e8ea5b2209f19f4fc3feda5",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:28 PM",
      "commitNameOld": "c31cd981ebabc0747cabcc07a8c8797619ed2c53",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,39 @@\n   public void updateServiceRecord(StateAccessForProviders amState,\n       YarnRegistryViewForProviders yarnRegistry,\n       String containerId, String roleName, List\u003cString\u003e ip, String hostname) {\n     try {\n       RoleInstance role \u003d null;\n       if(ip !\u003d null \u0026\u0026 !ip.isEmpty()){\n         role \u003d amState.getOwnedContainer(containerId);\n         role.ip \u003d ip.get(0);\n       }\n       if(hostname !\u003d null \u0026\u0026 !hostname.isEmpty()){\n         role \u003d amState.getOwnedContainer(containerId);\n         role.hostname \u003d hostname;\n       }\n       if (role !\u003d null) {\n         // create and publish updated service record (including hostname \u0026 ip)\n         ServiceRecord record \u003d new ServiceRecord();\n         record.set(YarnRegistryAttributes.YARN_ID, containerId);\n-        record.description \u003d roleName.replaceAll(\"_\", \"-\");\n+        String componentInstanceName \u003d role.getCompInstanceName();\n+        record.description \u003d componentInstanceName.replaceAll(\"_\", \"-\");\n         record.set(YarnRegistryAttributes.YARN_PERSISTENCE,\n             PersistencePolicies.CONTAINER);\n         // TODO: use constants from YarnRegistryAttributes\n         if (role.ip !\u003d null) {\n           record.set(\"yarn:ip\", role.ip);\n         }\n         if (role.hostname !\u003d null) {\n           record.set(\"yarn:hostname\", role.hostname);\n         }\n         yarnRegistry.putComponent(\n             RegistryPathUtils.encodeYarnID(containerId), record);\n       }\n     } catch (NoSuchNodeException e) {\n       // ignore - there is nothing to do if we don\u0027t find a container\n       log.warn(\"Owned container {} not found - {}\", containerId, e);\n     } catch (IOException e) {\n       log.warn(\"Error updating container {} service record in registry\",\n           containerId, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateServiceRecord(StateAccessForProviders amState,\n      YarnRegistryViewForProviders yarnRegistry,\n      String containerId, String roleName, List\u003cString\u003e ip, String hostname) {\n    try {\n      RoleInstance role \u003d null;\n      if(ip !\u003d null \u0026\u0026 !ip.isEmpty()){\n        role \u003d amState.getOwnedContainer(containerId);\n        role.ip \u003d ip.get(0);\n      }\n      if(hostname !\u003d null \u0026\u0026 !hostname.isEmpty()){\n        role \u003d amState.getOwnedContainer(containerId);\n        role.hostname \u003d hostname;\n      }\n      if (role !\u003d null) {\n        // create and publish updated service record (including hostname \u0026 ip)\n        ServiceRecord record \u003d new ServiceRecord();\n        record.set(YarnRegistryAttributes.YARN_ID, containerId);\n        String componentInstanceName \u003d role.getCompInstanceName();\n        record.description \u003d componentInstanceName.replaceAll(\"_\", \"-\");\n        record.set(YarnRegistryAttributes.YARN_PERSISTENCE,\n            PersistencePolicies.CONTAINER);\n        // TODO: use constants from YarnRegistryAttributes\n        if (role.ip !\u003d null) {\n          record.set(\"yarn:ip\", role.ip);\n        }\n        if (role.hostname !\u003d null) {\n          record.set(\"yarn:hostname\", role.hostname);\n        }\n        yarnRegistry.putComponent(\n            RegistryPathUtils.encodeYarnID(containerId), record);\n      }\n    } catch (NoSuchNodeException e) {\n      // ignore - there is nothing to do if we don\u0027t find a container\n      log.warn(\"Owned container {} not found - {}\", containerId, e);\n    } catch (IOException e) {\n      log.warn(\"Error updating container {} service record in registry\",\n          containerId, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/providers/ProviderUtils.java",
      "extendedDetails": {}
    },
    "bce06ed1af8183865889e554c2b353836deb034a": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5505. Create an agent-less docker provider in the native-services framework. Contributed by Billie Rinaldi\n",
      "commitDate": "06/11/17 1:28 PM",
      "commitName": "bce06ed1af8183865889e554c2b353836deb034a",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,38 @@\n+  public void updateServiceRecord(StateAccessForProviders amState,\n+      YarnRegistryViewForProviders yarnRegistry,\n+      String containerId, String roleName, List\u003cString\u003e ip, String hostname) {\n+    try {\n+      RoleInstance role \u003d null;\n+      if(ip !\u003d null \u0026\u0026 !ip.isEmpty()){\n+        role \u003d amState.getOwnedContainer(containerId);\n+        role.ip \u003d ip.get(0);\n+      }\n+      if(hostname !\u003d null \u0026\u0026 !hostname.isEmpty()){\n+        role \u003d amState.getOwnedContainer(containerId);\n+        role.hostname \u003d hostname;\n+      }\n+      if (role !\u003d null) {\n+        // create and publish updated service record (including hostname \u0026 ip)\n+        ServiceRecord record \u003d new ServiceRecord();\n+        record.set(YarnRegistryAttributes.YARN_ID, containerId);\n+        record.description \u003d roleName.replaceAll(\"_\", \"-\");\n+        record.set(YarnRegistryAttributes.YARN_PERSISTENCE,\n+            PersistencePolicies.CONTAINER);\n+        // TODO: use constants from YarnRegistryAttributes\n+        if (role.ip !\u003d null) {\n+          record.set(\"yarn:ip\", role.ip);\n+        }\n+        if (role.hostname !\u003d null) {\n+          record.set(\"yarn:hostname\", role.hostname);\n+        }\n+        yarnRegistry.putComponent(\n+            RegistryPathUtils.encodeYarnID(containerId), record);\n+      }\n+    } catch (NoSuchNodeException e) {\n+      // ignore - there is nothing to do if we don\u0027t find a container\n+      log.warn(\"Owned container {} not found - {}\", containerId, e);\n+    } catch (IOException e) {\n+      log.warn(\"Error updating container {} service record in registry\",\n+          containerId, e);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateServiceRecord(StateAccessForProviders amState,\n      YarnRegistryViewForProviders yarnRegistry,\n      String containerId, String roleName, List\u003cString\u003e ip, String hostname) {\n    try {\n      RoleInstance role \u003d null;\n      if(ip !\u003d null \u0026\u0026 !ip.isEmpty()){\n        role \u003d amState.getOwnedContainer(containerId);\n        role.ip \u003d ip.get(0);\n      }\n      if(hostname !\u003d null \u0026\u0026 !hostname.isEmpty()){\n        role \u003d amState.getOwnedContainer(containerId);\n        role.hostname \u003d hostname;\n      }\n      if (role !\u003d null) {\n        // create and publish updated service record (including hostname \u0026 ip)\n        ServiceRecord record \u003d new ServiceRecord();\n        record.set(YarnRegistryAttributes.YARN_ID, containerId);\n        record.description \u003d roleName.replaceAll(\"_\", \"-\");\n        record.set(YarnRegistryAttributes.YARN_PERSISTENCE,\n            PersistencePolicies.CONTAINER);\n        // TODO: use constants from YarnRegistryAttributes\n        if (role.ip !\u003d null) {\n          record.set(\"yarn:ip\", role.ip);\n        }\n        if (role.hostname !\u003d null) {\n          record.set(\"yarn:hostname\", role.hostname);\n        }\n        yarnRegistry.putComponent(\n            RegistryPathUtils.encodeYarnID(containerId), record);\n      }\n    } catch (NoSuchNodeException e) {\n      // ignore - there is nothing to do if we don\u0027t find a container\n      log.warn(\"Owned container {} not found - {}\", containerId, e);\n    } catch (IOException e) {\n      log.warn(\"Error updating container {} service record in registry\",\n          containerId, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/slider/providers/ProviderUtils.java"
    }
  }
}