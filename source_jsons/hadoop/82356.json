{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "QuickSort.java",
  "functionName": "sortInternal",
  "functionId": "sortInternal___s-IndexedSortable(modifiers-final)__p-int__r-int__rep-Progressable(modifiers-final)__depth-int",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/QuickSort.java",
  "functionStartLine": 66,
  "functionEndLine": 133,
  "numCommitsSeen": 6,
  "timeTaken": 731,
  "changeHistory": [
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static void sortInternal(final IndexedSortable s, int p, int r,\n      final Progressable rep, int depth) {\n    if (null !\u003d rep) {\n      rep.progress();\n    }\n    while (true) {\n    if (r-p \u003c 13) {\n      for (int i \u003d p; i \u003c r; ++i) {\n        for (int j \u003d i; j \u003e p \u0026\u0026 s.compare(j-1, j) \u003e 0; --j) {\n          s.swap(j, j-1);\n        }\n      }\n      return;\n    }\n    if (--depth \u003c 0) {\n      // give up\n      alt.sort(s, p, r, rep);\n      return;\n    }\n\n    // select, move pivot into first position\n    fix(s, (p+r) \u003e\u003e\u003e 1, p);\n    fix(s, (p+r) \u003e\u003e\u003e 1, r - 1);\n    fix(s, p, r-1);\n\n    // Divide\n    int i \u003d p;\n    int j \u003d r;\n    int ll \u003d p;\n    int rr \u003d r;\n    int cr;\n    while(true) {\n      while (++i \u003c j) {\n        if ((cr \u003d s.compare(i, p)) \u003e 0) break;\n        if (0 \u003d\u003d cr \u0026\u0026 ++ll !\u003d i) {\n          s.swap(ll, i);\n        }\n      }\n      while (--j \u003e i) {\n        if ((cr \u003d s.compare(p, j)) \u003e 0) break;\n        if (0 \u003d\u003d cr \u0026\u0026 --rr !\u003d j) {\n          s.swap(rr, j);\n        }\n      }\n      if (i \u003c j) s.swap(i, j);\n      else break;\n    }\n    j \u003d i;\n    // swap pivot- and all eq values- into position\n    while (ll \u003e\u003d p) {\n      s.swap(ll--, --i);\n    }\n    while (rr \u003c r) {\n      s.swap(rr++, j++);\n    }\n\n    // Conquer\n    // Recurse on smaller interval first to keep stack shallow\n    assert i !\u003d j;\n    if (i - p \u003c r - j) {\n      sortInternal(s, p, i, rep, depth);\n      p \u003d j;\n    } else {\n      sortInternal(s, j, r, rep, depth);\n      r \u003d i;\n    }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/QuickSort.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/util/QuickSort.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/QuickSort.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static void sortInternal(final IndexedSortable s, int p, int r,\n      final Progressable rep, int depth) {\n    if (null !\u003d rep) {\n      rep.progress();\n    }\n    while (true) {\n    if (r-p \u003c 13) {\n      for (int i \u003d p; i \u003c r; ++i) {\n        for (int j \u003d i; j \u003e p \u0026\u0026 s.compare(j-1, j) \u003e 0; --j) {\n          s.swap(j, j-1);\n        }\n      }\n      return;\n    }\n    if (--depth \u003c 0) {\n      // give up\n      alt.sort(s, p, r, rep);\n      return;\n    }\n\n    // select, move pivot into first position\n    fix(s, (p+r) \u003e\u003e\u003e 1, p);\n    fix(s, (p+r) \u003e\u003e\u003e 1, r - 1);\n    fix(s, p, r-1);\n\n    // Divide\n    int i \u003d p;\n    int j \u003d r;\n    int ll \u003d p;\n    int rr \u003d r;\n    int cr;\n    while(true) {\n      while (++i \u003c j) {\n        if ((cr \u003d s.compare(i, p)) \u003e 0) break;\n        if (0 \u003d\u003d cr \u0026\u0026 ++ll !\u003d i) {\n          s.swap(ll, i);\n        }\n      }\n      while (--j \u003e i) {\n        if ((cr \u003d s.compare(p, j)) \u003e 0) break;\n        if (0 \u003d\u003d cr \u0026\u0026 --rr !\u003d j) {\n          s.swap(rr, j);\n        }\n      }\n      if (i \u003c j) s.swap(i, j);\n      else break;\n    }\n    j \u003d i;\n    // swap pivot- and all eq values- into position\n    while (ll \u003e\u003d p) {\n      s.swap(ll--, --i);\n    }\n    while (rr \u003c r) {\n      s.swap(rr++, j++);\n    }\n\n    // Conquer\n    // Recurse on smaller interval first to keep stack shallow\n    assert i !\u003d j;\n    if (i - p \u003c r - j) {\n      sortInternal(s, p, i, rep, depth);\n      p \u003d j;\n    } else {\n      sortInternal(s, j, r, rep, depth);\n      r \u003d i;\n    }\n    }\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/util/QuickSort.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/util/QuickSort.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/util/QuickSort.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static void sortInternal(final IndexedSortable s, int p, int r,\n      final Progressable rep, int depth) {\n    if (null !\u003d rep) {\n      rep.progress();\n    }\n    while (true) {\n    if (r-p \u003c 13) {\n      for (int i \u003d p; i \u003c r; ++i) {\n        for (int j \u003d i; j \u003e p \u0026\u0026 s.compare(j-1, j) \u003e 0; --j) {\n          s.swap(j, j-1);\n        }\n      }\n      return;\n    }\n    if (--depth \u003c 0) {\n      // give up\n      alt.sort(s, p, r, rep);\n      return;\n    }\n\n    // select, move pivot into first position\n    fix(s, (p+r) \u003e\u003e\u003e 1, p);\n    fix(s, (p+r) \u003e\u003e\u003e 1, r - 1);\n    fix(s, p, r-1);\n\n    // Divide\n    int i \u003d p;\n    int j \u003d r;\n    int ll \u003d p;\n    int rr \u003d r;\n    int cr;\n    while(true) {\n      while (++i \u003c j) {\n        if ((cr \u003d s.compare(i, p)) \u003e 0) break;\n        if (0 \u003d\u003d cr \u0026\u0026 ++ll !\u003d i) {\n          s.swap(ll, i);\n        }\n      }\n      while (--j \u003e i) {\n        if ((cr \u003d s.compare(p, j)) \u003e 0) break;\n        if (0 \u003d\u003d cr \u0026\u0026 --rr !\u003d j) {\n          s.swap(rr, j);\n        }\n      }\n      if (i \u003c j) s.swap(i, j);\n      else break;\n    }\n    j \u003d i;\n    // swap pivot- and all eq values- into position\n    while (ll \u003e\u003d p) {\n      s.swap(ll--, --i);\n    }\n    while (rr \u003c r) {\n      s.swap(rr++, j++);\n    }\n\n    // Conquer\n    // Recurse on smaller interval first to keep stack shallow\n    assert i !\u003d j;\n    if (i - p \u003c r - j) {\n      sortInternal(s, p, i, rep, depth);\n      p \u003d j;\n    } else {\n      sortInternal(s, j, r, rep, depth);\n      r \u003d i;\n    }\n    }\n  }",
      "path": "common/src/java/org/apache/hadoop/util/QuickSort.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/util/QuickSort.java",
        "newPath": "common/src/java/org/apache/hadoop/util/QuickSort.java"
      }
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,68 @@\n+  private static void sortInternal(final IndexedSortable s, int p, int r,\n+      final Progressable rep, int depth) {\n+    if (null !\u003d rep) {\n+      rep.progress();\n+    }\n+    while (true) {\n+    if (r-p \u003c 13) {\n+      for (int i \u003d p; i \u003c r; ++i) {\n+        for (int j \u003d i; j \u003e p \u0026\u0026 s.compare(j-1, j) \u003e 0; --j) {\n+          s.swap(j, j-1);\n+        }\n+      }\n+      return;\n+    }\n+    if (--depth \u003c 0) {\n+      // give up\n+      alt.sort(s, p, r, rep);\n+      return;\n+    }\n+\n+    // select, move pivot into first position\n+    fix(s, (p+r) \u003e\u003e\u003e 1, p);\n+    fix(s, (p+r) \u003e\u003e\u003e 1, r - 1);\n+    fix(s, p, r-1);\n+\n+    // Divide\n+    int i \u003d p;\n+    int j \u003d r;\n+    int ll \u003d p;\n+    int rr \u003d r;\n+    int cr;\n+    while(true) {\n+      while (++i \u003c j) {\n+        if ((cr \u003d s.compare(i, p)) \u003e 0) break;\n+        if (0 \u003d\u003d cr \u0026\u0026 ++ll !\u003d i) {\n+          s.swap(ll, i);\n+        }\n+      }\n+      while (--j \u003e i) {\n+        if ((cr \u003d s.compare(p, j)) \u003e 0) break;\n+        if (0 \u003d\u003d cr \u0026\u0026 --rr !\u003d j) {\n+          s.swap(rr, j);\n+        }\n+      }\n+      if (i \u003c j) s.swap(i, j);\n+      else break;\n+    }\n+    j \u003d i;\n+    // swap pivot- and all eq values- into position\n+    while (ll \u003e\u003d p) {\n+      s.swap(ll--, --i);\n+    }\n+    while (rr \u003c r) {\n+      s.swap(rr++, j++);\n+    }\n+\n+    // Conquer\n+    // Recurse on smaller interval first to keep stack shallow\n+    assert i !\u003d j;\n+    if (i - p \u003c r - j) {\n+      sortInternal(s, p, i, rep, depth);\n+      p \u003d j;\n+    } else {\n+      sortInternal(s, j, r, rep, depth);\n+      r \u003d i;\n+    }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static void sortInternal(final IndexedSortable s, int p, int r,\n      final Progressable rep, int depth) {\n    if (null !\u003d rep) {\n      rep.progress();\n    }\n    while (true) {\n    if (r-p \u003c 13) {\n      for (int i \u003d p; i \u003c r; ++i) {\n        for (int j \u003d i; j \u003e p \u0026\u0026 s.compare(j-1, j) \u003e 0; --j) {\n          s.swap(j, j-1);\n        }\n      }\n      return;\n    }\n    if (--depth \u003c 0) {\n      // give up\n      alt.sort(s, p, r, rep);\n      return;\n    }\n\n    // select, move pivot into first position\n    fix(s, (p+r) \u003e\u003e\u003e 1, p);\n    fix(s, (p+r) \u003e\u003e\u003e 1, r - 1);\n    fix(s, p, r-1);\n\n    // Divide\n    int i \u003d p;\n    int j \u003d r;\n    int ll \u003d p;\n    int rr \u003d r;\n    int cr;\n    while(true) {\n      while (++i \u003c j) {\n        if ((cr \u003d s.compare(i, p)) \u003e 0) break;\n        if (0 \u003d\u003d cr \u0026\u0026 ++ll !\u003d i) {\n          s.swap(ll, i);\n        }\n      }\n      while (--j \u003e i) {\n        if ((cr \u003d s.compare(p, j)) \u003e 0) break;\n        if (0 \u003d\u003d cr \u0026\u0026 --rr !\u003d j) {\n          s.swap(rr, j);\n        }\n      }\n      if (i \u003c j) s.swap(i, j);\n      else break;\n    }\n    j \u003d i;\n    // swap pivot- and all eq values- into position\n    while (ll \u003e\u003d p) {\n      s.swap(ll--, --i);\n    }\n    while (rr \u003c r) {\n      s.swap(rr++, j++);\n    }\n\n    // Conquer\n    // Recurse on smaller interval first to keep stack shallow\n    assert i !\u003d j;\n    if (i - p \u003c r - j) {\n      sortInternal(s, p, i, rep, depth);\n      p \u003d j;\n    } else {\n      sortInternal(s, j, r, rep, depth);\n      r \u003d i;\n    }\n    }\n  }",
      "path": "src/java/org/apache/hadoop/util/QuickSort.java"
    }
  }
}