{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LocatedFileStatusFetcher.java",
  "functionName": "onSuccess",
  "functionId": "onSuccess___result-ProcessInputDirCallable.Result",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/LocatedFileStatusFetcher.java",
  "functionStartLine": 289,
  "functionEndLine": 309,
  "numCommitsSeen": 6,
  "timeTaken": 1666,
  "changeHistory": [
    "1921e94292f0820985a0cfbf8922a2a1a67fe921",
    "d7979079ea8c6514858b77a78f0119cffc178086",
    "396c6c63a26b098fd0221e830f79be13b7e97432"
  ],
  "changeHistoryShort": {
    "1921e94292f0820985a0cfbf8922a2a1a67fe921": "Ybodychange",
    "d7979079ea8c6514858b77a78f0119cffc178086": "Ybodychange",
    "396c6c63a26b098fd0221e830f79be13b7e97432": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1921e94292f0820985a0cfbf8922a2a1a67fe921": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16458. LocatedFileStatusFetcher.getFileStatuses failing intermittently with S3\n\nContributed by Steve Loughran.\n\nIncludes\n-S3A glob scans don\u0027t bother trying to resolve symlinks\n-stack traces don\u0027t get lost in getFileStatuses() when exceptions are wrapped\n-debug level logging of what is up in Globber\n-Contains HADOOP-13373. Add S3A implementation of FSMainOperationsBaseTest.\n-ITestRestrictedReadAccess tests incomplete read access to files.\n\nThis adds a builder API for constructing globbers which other stores can use\nso that they too can skip symlink resolution when not needed.\n\nChange-Id: I23bcdb2783d6bd77cf168fdc165b1b4b334d91c7\n",
      "commitDate": "01/10/19 10:11 AM",
      "commitName": "1921e94292f0820985a0cfbf8922a2a1a67fe921",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "03/04/19 11:59 AM",
      "commitNameOld": "d7979079ea8c6514858b77a78f0119cffc178086",
      "commitAuthorOld": "Gabor Bota",
      "daysBetweenCommits": 180.92,
      "commitsBetweenForRepo": 1399,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,21 @@\n     public void onSuccess(ProcessInputDirCallable.Result result) {\n       try {\n-        if (result.locatedFileStatuses.size() !\u003d 0) {\n+        if (!result.locatedFileStatuses.isEmpty()) {\n           resultQueue.add(result.locatedFileStatuses);\n         }\n-        if (result.dirsNeedingRecursiveCalls.size() !\u003d 0) {\n+        if (!result.dirsNeedingRecursiveCalls.isEmpty()) {\n           for (FileStatus fileStatus : result.dirsNeedingRecursiveCalls) {\n+            LOG.debug(\"Queueing directory scan {}\", fileStatus.getPath());\n             runningTasks.incrementAndGet();\n             ListenableFuture\u003cProcessInputDirCallable.Result\u003e future \u003d exec\n                 .submit(new ProcessInputDirCallable(result.fs, fileStatus,\n                     recursive, inputFilter));\n             Futures.addCallback(future, processInputDirCallback,\n                 MoreExecutors.directExecutor());\n           }\n         }\n         decrementRunningAndCheckCompletion();\n       } catch (Throwable t) { // Error within the callback itself.\n         registerError(t);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void onSuccess(ProcessInputDirCallable.Result result) {\n      try {\n        if (!result.locatedFileStatuses.isEmpty()) {\n          resultQueue.add(result.locatedFileStatuses);\n        }\n        if (!result.dirsNeedingRecursiveCalls.isEmpty()) {\n          for (FileStatus fileStatus : result.dirsNeedingRecursiveCalls) {\n            LOG.debug(\"Queueing directory scan {}\", fileStatus.getPath());\n            runningTasks.incrementAndGet();\n            ListenableFuture\u003cProcessInputDirCallable.Result\u003e future \u003d exec\n                .submit(new ProcessInputDirCallable(result.fs, fileStatus,\n                    recursive, inputFilter));\n            Futures.addCallback(future, processInputDirCallback,\n                MoreExecutors.directExecutor());\n          }\n        }\n        decrementRunningAndCheckCompletion();\n      } catch (Throwable t) { // Error within the callback itself.\n        registerError(t);\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/LocatedFileStatusFetcher.java",
      "extendedDetails": {}
    },
    "d7979079ea8c6514858b77a78f0119cffc178086": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16210. Update guava to 27.0-jre in hadoop-project trunk. Contributed by Gabor Bota.\n",
      "commitDate": "03/04/19 11:59 AM",
      "commitName": "d7979079ea8c6514858b77a78f0119cffc178086",
      "commitAuthor": "Gabor Bota",
      "commitDateOld": "12/05/16 11:00 AM",
      "commitNameOld": "7eddecd357014d4793df4bf2e5d987add02289f5",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 1056.04,
      "commitsBetweenForRepo": 8095,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,20 @@\n     public void onSuccess(ProcessInputDirCallable.Result result) {\n       try {\n         if (result.locatedFileStatuses.size() !\u003d 0) {\n           resultQueue.add(result.locatedFileStatuses);\n         }\n         if (result.dirsNeedingRecursiveCalls.size() !\u003d 0) {\n           for (FileStatus fileStatus : result.dirsNeedingRecursiveCalls) {\n             runningTasks.incrementAndGet();\n             ListenableFuture\u003cProcessInputDirCallable.Result\u003e future \u003d exec\n                 .submit(new ProcessInputDirCallable(result.fs, fileStatus,\n                     recursive, inputFilter));\n-            Futures.addCallback(future, processInputDirCallback);\n+            Futures.addCallback(future, processInputDirCallback,\n+                MoreExecutors.directExecutor());\n           }\n         }\n         decrementRunningAndCheckCompletion();\n       } catch (Throwable t) { // Error within the callback itself.\n         registerError(t);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void onSuccess(ProcessInputDirCallable.Result result) {\n      try {\n        if (result.locatedFileStatuses.size() !\u003d 0) {\n          resultQueue.add(result.locatedFileStatuses);\n        }\n        if (result.dirsNeedingRecursiveCalls.size() !\u003d 0) {\n          for (FileStatus fileStatus : result.dirsNeedingRecursiveCalls) {\n            runningTasks.incrementAndGet();\n            ListenableFuture\u003cProcessInputDirCallable.Result\u003e future \u003d exec\n                .submit(new ProcessInputDirCallable(result.fs, fileStatus,\n                    recursive, inputFilter));\n            Futures.addCallback(future, processInputDirCallback,\n                MoreExecutors.directExecutor());\n          }\n        }\n        decrementRunningAndCheckCompletion();\n      } catch (Throwable t) { // Error within the callback itself.\n        registerError(t);\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/LocatedFileStatusFetcher.java",
      "extendedDetails": {}
    },
    "396c6c63a26b098fd0221e830f79be13b7e97432": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-2349. Modified FileInputFormat to be able to issue file and block location calls in parallel. Contributed by Siddharth Seth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1579515 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/03/14 7:46 PM",
      "commitName": "396c6c63a26b098fd0221e830f79be13b7e97432",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,19 @@\n+    public void onSuccess(ProcessInputDirCallable.Result result) {\n+      try {\n+        if (result.locatedFileStatuses.size() !\u003d 0) {\n+          resultQueue.add(result.locatedFileStatuses);\n+        }\n+        if (result.dirsNeedingRecursiveCalls.size() !\u003d 0) {\n+          for (FileStatus fileStatus : result.dirsNeedingRecursiveCalls) {\n+            runningTasks.incrementAndGet();\n+            ListenableFuture\u003cProcessInputDirCallable.Result\u003e future \u003d exec\n+                .submit(new ProcessInputDirCallable(result.fs, fileStatus,\n+                    recursive, inputFilter));\n+            Futures.addCallback(future, processInputDirCallback);\n+          }\n+        }\n+        decrementRunningAndCheckCompletion();\n+      } catch (Throwable t) { // Error within the callback itself.\n+        registerError(t);\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void onSuccess(ProcessInputDirCallable.Result result) {\n      try {\n        if (result.locatedFileStatuses.size() !\u003d 0) {\n          resultQueue.add(result.locatedFileStatuses);\n        }\n        if (result.dirsNeedingRecursiveCalls.size() !\u003d 0) {\n          for (FileStatus fileStatus : result.dirsNeedingRecursiveCalls) {\n            runningTasks.incrementAndGet();\n            ListenableFuture\u003cProcessInputDirCallable.Result\u003e future \u003d exec\n                .submit(new ProcessInputDirCallable(result.fs, fileStatus,\n                    recursive, inputFilter));\n            Futures.addCallback(future, processInputDirCallback);\n          }\n        }\n        decrementRunningAndCheckCompletion();\n      } catch (Throwable t) { // Error within the callback itself.\n        registerError(t);\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/LocatedFileStatusFetcher.java"
    }
  }
}