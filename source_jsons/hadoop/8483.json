{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SecondaryNameNode.java",
  "functionName": "recoverCreate",
  "functionId": "recoverCreate___format-boolean",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/SecondaryNameNode.java",
  "functionStartLine": 971,
  "functionEndLine": 1022,
  "numCommitsSeen": 104,
  "timeTaken": 5913,
  "changeHistory": [
    "8ae98a9d1ca4725e28783370517cb3a3ecda7324",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "28e6a4e44a3e920dcaf858f9a74a6358226b3a63",
    "ffbe9e5972bf3eee9037e2602c1330e0dc744646",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "8ae98a9d1ca4725e28783370517cb3a3ecda7324": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "28e6a4e44a3e920dcaf858f9a74a6358226b3a63": "Ymultichange(Yparameterchange,Ybodychange)",
    "ffbe9e5972bf3eee9037e2602c1330e0dc744646": "Ybodychange",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8ae98a9d1ca4725e28783370517cb3a3ecda7324": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-1620. Rename HdfsConstants -\u003e HdfsServerConstants, FSConstants -\u003e HdfsConstants. (Harsh J Chouraria via atm)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1165096 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/09/11 12:30 PM",
      "commitName": "8ae98a9d1ca4725e28783370517cb3a3ecda7324",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 10.8,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,52 @@\n     void recoverCreate(boolean format) throws IOException {\n       storage.attemptRestoreRemovedStorage();\n       storage.unlockAll();\n \n       for (Iterator\u003cStorageDirectory\u003e it \u003d \n                    storage.dirIterator(); it.hasNext();) {\n         StorageDirectory sd \u003d it.next();\n         boolean isAccessible \u003d true;\n         try { // create directories if don\u0027t exist yet\n           if(!sd.getRoot().mkdirs()) {\n             // do nothing, directory is already created\n           }\n         } catch(SecurityException se) {\n           isAccessible \u003d false;\n         }\n         if(!isAccessible)\n           throw new InconsistentFSStateException(sd.getRoot(),\n               \"cannot access checkpoint directory.\");\n         \n         if (format) {\n           // Don\u0027t confirm, since this is just the secondary namenode.\n           LOG.info(\"Formatting storage directory \" + sd);\n           sd.clearDirectory();\n         }\n         \n         StorageState curState;\n         try {\n-          curState \u003d sd.analyzeStorage(HdfsConstants.StartupOption.REGULAR, storage);\n+          curState \u003d sd.analyzeStorage(HdfsServerConstants.StartupOption.REGULAR, storage);\n           // sd is locked but not opened\n           switch(curState) {\n           case NON_EXISTENT:\n             // fail if any of the configured checkpoint dirs are inaccessible \n             throw new InconsistentFSStateException(sd.getRoot(),\n                   \"checkpoint directory does not exist or is not accessible.\");\n           case NOT_FORMATTED:\n             break;  // it\u0027s ok since initially there is no current and VERSION\n           case NORMAL:\n             // Read the VERSION file. This verifies that:\n             // (a) the VERSION file for each of the directories is the same,\n             // and (b) when we connect to a NN, we can verify that the remote\n             // node matches the same namespace that we ran on previously.\n             storage.readProperties(sd);\n             break;\n           default:  // recovery is possible\n             sd.doRecover(curState);\n           }\n         } catch (IOException ioe) {\n           sd.unlock();\n           throw ioe;\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    void recoverCreate(boolean format) throws IOException {\n      storage.attemptRestoreRemovedStorage();\n      storage.unlockAll();\n\n      for (Iterator\u003cStorageDirectory\u003e it \u003d \n                   storage.dirIterator(); it.hasNext();) {\n        StorageDirectory sd \u003d it.next();\n        boolean isAccessible \u003d true;\n        try { // create directories if don\u0027t exist yet\n          if(!sd.getRoot().mkdirs()) {\n            // do nothing, directory is already created\n          }\n        } catch(SecurityException se) {\n          isAccessible \u003d false;\n        }\n        if(!isAccessible)\n          throw new InconsistentFSStateException(sd.getRoot(),\n              \"cannot access checkpoint directory.\");\n        \n        if (format) {\n          // Don\u0027t confirm, since this is just the secondary namenode.\n          LOG.info(\"Formatting storage directory \" + sd);\n          sd.clearDirectory();\n        }\n        \n        StorageState curState;\n        try {\n          curState \u003d sd.analyzeStorage(HdfsServerConstants.StartupOption.REGULAR, storage);\n          // sd is locked but not opened\n          switch(curState) {\n          case NON_EXISTENT:\n            // fail if any of the configured checkpoint dirs are inaccessible \n            throw new InconsistentFSStateException(sd.getRoot(),\n                  \"checkpoint directory does not exist or is not accessible.\");\n          case NOT_FORMATTED:\n            break;  // it\u0027s ok since initially there is no current and VERSION\n          case NORMAL:\n            // Read the VERSION file. This verifies that:\n            // (a) the VERSION file for each of the directories is the same,\n            // and (b) when we connect to a NN, we can verify that the remote\n            // node matches the same namespace that we ran on previously.\n            storage.readProperties(sd);\n            break;\n          default:  // recovery is possible\n            sd.doRecover(curState);\n          }\n        } catch (IOException ioe) {\n          sd.unlock();\n          throw ioe;\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/SecondaryNameNode.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    void recoverCreate(boolean format) throws IOException {\n      storage.attemptRestoreRemovedStorage();\n      storage.unlockAll();\n\n      for (Iterator\u003cStorageDirectory\u003e it \u003d \n                   storage.dirIterator(); it.hasNext();) {\n        StorageDirectory sd \u003d it.next();\n        boolean isAccessible \u003d true;\n        try { // create directories if don\u0027t exist yet\n          if(!sd.getRoot().mkdirs()) {\n            // do nothing, directory is already created\n          }\n        } catch(SecurityException se) {\n          isAccessible \u003d false;\n        }\n        if(!isAccessible)\n          throw new InconsistentFSStateException(sd.getRoot(),\n              \"cannot access checkpoint directory.\");\n        \n        if (format) {\n          // Don\u0027t confirm, since this is just the secondary namenode.\n          LOG.info(\"Formatting storage directory \" + sd);\n          sd.clearDirectory();\n        }\n        \n        StorageState curState;\n        try {\n          curState \u003d sd.analyzeStorage(HdfsConstants.StartupOption.REGULAR, storage);\n          // sd is locked but not opened\n          switch(curState) {\n          case NON_EXISTENT:\n            // fail if any of the configured checkpoint dirs are inaccessible \n            throw new InconsistentFSStateException(sd.getRoot(),\n                  \"checkpoint directory does not exist or is not accessible.\");\n          case NOT_FORMATTED:\n            break;  // it\u0027s ok since initially there is no current and VERSION\n          case NORMAL:\n            // Read the VERSION file. This verifies that:\n            // (a) the VERSION file for each of the directories is the same,\n            // and (b) when we connect to a NN, we can verify that the remote\n            // node matches the same namespace that we ran on previously.\n            storage.readProperties(sd);\n            break;\n          default:  // recovery is possible\n            sd.doRecover(curState);\n          }\n        } catch (IOException ioe) {\n          sd.unlock();\n          throw ioe;\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/SecondaryNameNode.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/SecondaryNameNode.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/SecondaryNameNode.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    void recoverCreate(boolean format) throws IOException {\n      storage.attemptRestoreRemovedStorage();\n      storage.unlockAll();\n\n      for (Iterator\u003cStorageDirectory\u003e it \u003d \n                   storage.dirIterator(); it.hasNext();) {\n        StorageDirectory sd \u003d it.next();\n        boolean isAccessible \u003d true;\n        try { // create directories if don\u0027t exist yet\n          if(!sd.getRoot().mkdirs()) {\n            // do nothing, directory is already created\n          }\n        } catch(SecurityException se) {\n          isAccessible \u003d false;\n        }\n        if(!isAccessible)\n          throw new InconsistentFSStateException(sd.getRoot(),\n              \"cannot access checkpoint directory.\");\n        \n        if (format) {\n          // Don\u0027t confirm, since this is just the secondary namenode.\n          LOG.info(\"Formatting storage directory \" + sd);\n          sd.clearDirectory();\n        }\n        \n        StorageState curState;\n        try {\n          curState \u003d sd.analyzeStorage(HdfsConstants.StartupOption.REGULAR, storage);\n          // sd is locked but not opened\n          switch(curState) {\n          case NON_EXISTENT:\n            // fail if any of the configured checkpoint dirs are inaccessible \n            throw new InconsistentFSStateException(sd.getRoot(),\n                  \"checkpoint directory does not exist or is not accessible.\");\n          case NOT_FORMATTED:\n            break;  // it\u0027s ok since initially there is no current and VERSION\n          case NORMAL:\n            // Read the VERSION file. This verifies that:\n            // (a) the VERSION file for each of the directories is the same,\n            // and (b) when we connect to a NN, we can verify that the remote\n            // node matches the same namespace that we ran on previously.\n            storage.readProperties(sd);\n            break;\n          default:  // recovery is possible\n            sd.doRecover(curState);\n          }\n        } catch (IOException ioe) {\n          sd.unlock();\n          throw ioe;\n        }\n      }\n    }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/SecondaryNameNode.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/SecondaryNameNode.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/SecondaryNameNode.java"
      }
    },
    "28e6a4e44a3e920dcaf858f9a74a6358226b3a63": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-1073. Redesign the NameNode\u0027s storage layout for image checkpoints and edit logs to introduce transaction IDs and be more robust. Contributed by Todd Lipcon and Ivan Kelly.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1152295 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/07/11 9:28 AM",
      "commitName": "28e6a4e44a3e920dcaf858f9a74a6358226b3a63",
      "commitAuthor": "Todd Lipcon",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-1073. Redesign the NameNode\u0027s storage layout for image checkpoints and edit logs to introduce transaction IDs and be more robust. Contributed by Todd Lipcon and Ivan Kelly.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1152295 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "29/07/11 9:28 AM",
          "commitName": "28e6a4e44a3e920dcaf858f9a74a6358226b3a63",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "27/07/11 8:19 PM",
          "commitNameOld": "ffbe9e5972bf3eee9037e2602c1330e0dc744646",
          "commitAuthorOld": "Eli Collins",
          "daysBetweenCommits": 1.55,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,52 @@\n-    void recoverCreate(Collection\u003cURI\u003e dataDirs,\n-                       Collection\u003cURI\u003e editsDirs) throws IOException {\n-      Collection\u003cURI\u003e tempDataDirs \u003d new ArrayList\u003cURI\u003e(dataDirs);\n-      Collection\u003cURI\u003e tempEditsDirs \u003d new ArrayList\u003cURI\u003e(editsDirs);\n-      storage.close();\n-      storage.setStorageDirectories(tempDataDirs, tempEditsDirs);\n+    void recoverCreate(boolean format) throws IOException {\n+      storage.attemptRestoreRemovedStorage();\n+      storage.unlockAll();\n+\n       for (Iterator\u003cStorageDirectory\u003e it \u003d \n                    storage.dirIterator(); it.hasNext();) {\n         StorageDirectory sd \u003d it.next();\n         boolean isAccessible \u003d true;\n         try { // create directories if don\u0027t exist yet\n           if(!sd.getRoot().mkdirs()) {\n             // do nothing, directory is already created\n           }\n         } catch(SecurityException se) {\n           isAccessible \u003d false;\n         }\n         if(!isAccessible)\n           throw new InconsistentFSStateException(sd.getRoot(),\n               \"cannot access checkpoint directory.\");\n+        \n+        if (format) {\n+          // Don\u0027t confirm, since this is just the secondary namenode.\n+          LOG.info(\"Formatting storage directory \" + sd);\n+          sd.clearDirectory();\n+        }\n+        \n         StorageState curState;\n         try {\n           curState \u003d sd.analyzeStorage(HdfsConstants.StartupOption.REGULAR, storage);\n           // sd is locked but not opened\n           switch(curState) {\n           case NON_EXISTENT:\n             // fail if any of the configured checkpoint dirs are inaccessible \n             throw new InconsistentFSStateException(sd.getRoot(),\n                   \"checkpoint directory does not exist or is not accessible.\");\n           case NOT_FORMATTED:\n             break;  // it\u0027s ok since initially there is no current and VERSION\n           case NORMAL:\n+            // Read the VERSION file. This verifies that:\n+            // (a) the VERSION file for each of the directories is the same,\n+            // and (b) when we connect to a NN, we can verify that the remote\n+            // node matches the same namespace that we ran on previously.\n+            storage.readProperties(sd);\n             break;\n           default:  // recovery is possible\n             sd.doRecover(curState);\n           }\n         } catch (IOException ioe) {\n           sd.unlock();\n           throw ioe;\n         }\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    void recoverCreate(boolean format) throws IOException {\n      storage.attemptRestoreRemovedStorage();\n      storage.unlockAll();\n\n      for (Iterator\u003cStorageDirectory\u003e it \u003d \n                   storage.dirIterator(); it.hasNext();) {\n        StorageDirectory sd \u003d it.next();\n        boolean isAccessible \u003d true;\n        try { // create directories if don\u0027t exist yet\n          if(!sd.getRoot().mkdirs()) {\n            // do nothing, directory is already created\n          }\n        } catch(SecurityException se) {\n          isAccessible \u003d false;\n        }\n        if(!isAccessible)\n          throw new InconsistentFSStateException(sd.getRoot(),\n              \"cannot access checkpoint directory.\");\n        \n        if (format) {\n          // Don\u0027t confirm, since this is just the secondary namenode.\n          LOG.info(\"Formatting storage directory \" + sd);\n          sd.clearDirectory();\n        }\n        \n        StorageState curState;\n        try {\n          curState \u003d sd.analyzeStorage(HdfsConstants.StartupOption.REGULAR, storage);\n          // sd is locked but not opened\n          switch(curState) {\n          case NON_EXISTENT:\n            // fail if any of the configured checkpoint dirs are inaccessible \n            throw new InconsistentFSStateException(sd.getRoot(),\n                  \"checkpoint directory does not exist or is not accessible.\");\n          case NOT_FORMATTED:\n            break;  // it\u0027s ok since initially there is no current and VERSION\n          case NORMAL:\n            // Read the VERSION file. This verifies that:\n            // (a) the VERSION file for each of the directories is the same,\n            // and (b) when we connect to a NN, we can verify that the remote\n            // node matches the same namespace that we ran on previously.\n            storage.readProperties(sd);\n            break;\n          default:  // recovery is possible\n            sd.doRecover(curState);\n          }\n        } catch (IOException ioe) {\n          sd.unlock();\n          throw ioe;\n        }\n      }\n    }",
          "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/SecondaryNameNode.java",
          "extendedDetails": {
            "oldValue": "[dataDirs-Collection\u003cURI\u003e, editsDirs-Collection\u003cURI\u003e]",
            "newValue": "[format-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-1073. Redesign the NameNode\u0027s storage layout for image checkpoints and edit logs to introduce transaction IDs and be more robust. Contributed by Todd Lipcon and Ivan Kelly.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1152295 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "29/07/11 9:28 AM",
          "commitName": "28e6a4e44a3e920dcaf858f9a74a6358226b3a63",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "27/07/11 8:19 PM",
          "commitNameOld": "ffbe9e5972bf3eee9037e2602c1330e0dc744646",
          "commitAuthorOld": "Eli Collins",
          "daysBetweenCommits": 1.55,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,52 @@\n-    void recoverCreate(Collection\u003cURI\u003e dataDirs,\n-                       Collection\u003cURI\u003e editsDirs) throws IOException {\n-      Collection\u003cURI\u003e tempDataDirs \u003d new ArrayList\u003cURI\u003e(dataDirs);\n-      Collection\u003cURI\u003e tempEditsDirs \u003d new ArrayList\u003cURI\u003e(editsDirs);\n-      storage.close();\n-      storage.setStorageDirectories(tempDataDirs, tempEditsDirs);\n+    void recoverCreate(boolean format) throws IOException {\n+      storage.attemptRestoreRemovedStorage();\n+      storage.unlockAll();\n+\n       for (Iterator\u003cStorageDirectory\u003e it \u003d \n                    storage.dirIterator(); it.hasNext();) {\n         StorageDirectory sd \u003d it.next();\n         boolean isAccessible \u003d true;\n         try { // create directories if don\u0027t exist yet\n           if(!sd.getRoot().mkdirs()) {\n             // do nothing, directory is already created\n           }\n         } catch(SecurityException se) {\n           isAccessible \u003d false;\n         }\n         if(!isAccessible)\n           throw new InconsistentFSStateException(sd.getRoot(),\n               \"cannot access checkpoint directory.\");\n+        \n+        if (format) {\n+          // Don\u0027t confirm, since this is just the secondary namenode.\n+          LOG.info(\"Formatting storage directory \" + sd);\n+          sd.clearDirectory();\n+        }\n+        \n         StorageState curState;\n         try {\n           curState \u003d sd.analyzeStorage(HdfsConstants.StartupOption.REGULAR, storage);\n           // sd is locked but not opened\n           switch(curState) {\n           case NON_EXISTENT:\n             // fail if any of the configured checkpoint dirs are inaccessible \n             throw new InconsistentFSStateException(sd.getRoot(),\n                   \"checkpoint directory does not exist or is not accessible.\");\n           case NOT_FORMATTED:\n             break;  // it\u0027s ok since initially there is no current and VERSION\n           case NORMAL:\n+            // Read the VERSION file. This verifies that:\n+            // (a) the VERSION file for each of the directories is the same,\n+            // and (b) when we connect to a NN, we can verify that the remote\n+            // node matches the same namespace that we ran on previously.\n+            storage.readProperties(sd);\n             break;\n           default:  // recovery is possible\n             sd.doRecover(curState);\n           }\n         } catch (IOException ioe) {\n           sd.unlock();\n           throw ioe;\n         }\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    void recoverCreate(boolean format) throws IOException {\n      storage.attemptRestoreRemovedStorage();\n      storage.unlockAll();\n\n      for (Iterator\u003cStorageDirectory\u003e it \u003d \n                   storage.dirIterator(); it.hasNext();) {\n        StorageDirectory sd \u003d it.next();\n        boolean isAccessible \u003d true;\n        try { // create directories if don\u0027t exist yet\n          if(!sd.getRoot().mkdirs()) {\n            // do nothing, directory is already created\n          }\n        } catch(SecurityException se) {\n          isAccessible \u003d false;\n        }\n        if(!isAccessible)\n          throw new InconsistentFSStateException(sd.getRoot(),\n              \"cannot access checkpoint directory.\");\n        \n        if (format) {\n          // Don\u0027t confirm, since this is just the secondary namenode.\n          LOG.info(\"Formatting storage directory \" + sd);\n          sd.clearDirectory();\n        }\n        \n        StorageState curState;\n        try {\n          curState \u003d sd.analyzeStorage(HdfsConstants.StartupOption.REGULAR, storage);\n          // sd is locked but not opened\n          switch(curState) {\n          case NON_EXISTENT:\n            // fail if any of the configured checkpoint dirs are inaccessible \n            throw new InconsistentFSStateException(sd.getRoot(),\n                  \"checkpoint directory does not exist or is not accessible.\");\n          case NOT_FORMATTED:\n            break;  // it\u0027s ok since initially there is no current and VERSION\n          case NORMAL:\n            // Read the VERSION file. This verifies that:\n            // (a) the VERSION file for each of the directories is the same,\n            // and (b) when we connect to a NN, we can verify that the remote\n            // node matches the same namespace that we ran on previously.\n            storage.readProperties(sd);\n            break;\n          default:  // recovery is possible\n            sd.doRecover(curState);\n          }\n        } catch (IOException ioe) {\n          sd.unlock();\n          throw ioe;\n        }\n      }\n    }",
          "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/SecondaryNameNode.java",
          "extendedDetails": {}
        }
      ]
    },
    "ffbe9e5972bf3eee9037e2602c1330e0dc744646": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2195. Refactor StorageDirectory to not be an non-static inner class. Contributed by Todd Lipcon\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1151707 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/07/11 8:19 PM",
      "commitName": "ffbe9e5972bf3eee9037e2602c1330e0dc744646",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "27/07/11 8:29 AM",
      "commitNameOld": "b60772c47ddaefbeffd72bb9dce2a98117538dbc",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 0.49,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n     void recoverCreate(Collection\u003cURI\u003e dataDirs,\n                        Collection\u003cURI\u003e editsDirs) throws IOException {\n       Collection\u003cURI\u003e tempDataDirs \u003d new ArrayList\u003cURI\u003e(dataDirs);\n       Collection\u003cURI\u003e tempEditsDirs \u003d new ArrayList\u003cURI\u003e(editsDirs);\n       storage.close();\n       storage.setStorageDirectories(tempDataDirs, tempEditsDirs);\n       for (Iterator\u003cStorageDirectory\u003e it \u003d \n                    storage.dirIterator(); it.hasNext();) {\n         StorageDirectory sd \u003d it.next();\n         boolean isAccessible \u003d true;\n         try { // create directories if don\u0027t exist yet\n           if(!sd.getRoot().mkdirs()) {\n             // do nothing, directory is already created\n           }\n         } catch(SecurityException se) {\n           isAccessible \u003d false;\n         }\n         if(!isAccessible)\n           throw new InconsistentFSStateException(sd.getRoot(),\n               \"cannot access checkpoint directory.\");\n         StorageState curState;\n         try {\n-          curState \u003d sd.analyzeStorage(HdfsConstants.StartupOption.REGULAR);\n+          curState \u003d sd.analyzeStorage(HdfsConstants.StartupOption.REGULAR, storage);\n           // sd is locked but not opened\n           switch(curState) {\n           case NON_EXISTENT:\n             // fail if any of the configured checkpoint dirs are inaccessible \n             throw new InconsistentFSStateException(sd.getRoot(),\n                   \"checkpoint directory does not exist or is not accessible.\");\n           case NOT_FORMATTED:\n             break;  // it\u0027s ok since initially there is no current and VERSION\n           case NORMAL:\n             break;\n           default:  // recovery is possible\n             sd.doRecover(curState);\n           }\n         } catch (IOException ioe) {\n           sd.unlock();\n           throw ioe;\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    void recoverCreate(Collection\u003cURI\u003e dataDirs,\n                       Collection\u003cURI\u003e editsDirs) throws IOException {\n      Collection\u003cURI\u003e tempDataDirs \u003d new ArrayList\u003cURI\u003e(dataDirs);\n      Collection\u003cURI\u003e tempEditsDirs \u003d new ArrayList\u003cURI\u003e(editsDirs);\n      storage.close();\n      storage.setStorageDirectories(tempDataDirs, tempEditsDirs);\n      for (Iterator\u003cStorageDirectory\u003e it \u003d \n                   storage.dirIterator(); it.hasNext();) {\n        StorageDirectory sd \u003d it.next();\n        boolean isAccessible \u003d true;\n        try { // create directories if don\u0027t exist yet\n          if(!sd.getRoot().mkdirs()) {\n            // do nothing, directory is already created\n          }\n        } catch(SecurityException se) {\n          isAccessible \u003d false;\n        }\n        if(!isAccessible)\n          throw new InconsistentFSStateException(sd.getRoot(),\n              \"cannot access checkpoint directory.\");\n        StorageState curState;\n        try {\n          curState \u003d sd.analyzeStorage(HdfsConstants.StartupOption.REGULAR, storage);\n          // sd is locked but not opened\n          switch(curState) {\n          case NON_EXISTENT:\n            // fail if any of the configured checkpoint dirs are inaccessible \n            throw new InconsistentFSStateException(sd.getRoot(),\n                  \"checkpoint directory does not exist or is not accessible.\");\n          case NOT_FORMATTED:\n            break;  // it\u0027s ok since initially there is no current and VERSION\n          case NORMAL:\n            break;\n          default:  // recovery is possible\n            sd.doRecover(curState);\n          }\n        } catch (IOException ioe) {\n          sd.unlock();\n          throw ioe;\n        }\n      }\n    }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/SecondaryNameNode.java",
      "extendedDetails": {}
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,42 @@\n+    void recoverCreate(Collection\u003cURI\u003e dataDirs,\n+                       Collection\u003cURI\u003e editsDirs) throws IOException {\n+      Collection\u003cURI\u003e tempDataDirs \u003d new ArrayList\u003cURI\u003e(dataDirs);\n+      Collection\u003cURI\u003e tempEditsDirs \u003d new ArrayList\u003cURI\u003e(editsDirs);\n+      storage.close();\n+      storage.setStorageDirectories(tempDataDirs, tempEditsDirs);\n+      for (Iterator\u003cStorageDirectory\u003e it \u003d \n+                   storage.dirIterator(); it.hasNext();) {\n+        StorageDirectory sd \u003d it.next();\n+        boolean isAccessible \u003d true;\n+        try { // create directories if don\u0027t exist yet\n+          if(!sd.getRoot().mkdirs()) {\n+            // do nothing, directory is already created\n+          }\n+        } catch(SecurityException se) {\n+          isAccessible \u003d false;\n+        }\n+        if(!isAccessible)\n+          throw new InconsistentFSStateException(sd.getRoot(),\n+              \"cannot access checkpoint directory.\");\n+        StorageState curState;\n+        try {\n+          curState \u003d sd.analyzeStorage(HdfsConstants.StartupOption.REGULAR);\n+          // sd is locked but not opened\n+          switch(curState) {\n+          case NON_EXISTENT:\n+            // fail if any of the configured checkpoint dirs are inaccessible \n+            throw new InconsistentFSStateException(sd.getRoot(),\n+                  \"checkpoint directory does not exist or is not accessible.\");\n+          case NOT_FORMATTED:\n+            break;  // it\u0027s ok since initially there is no current and VERSION\n+          case NORMAL:\n+            break;\n+          default:  // recovery is possible\n+            sd.doRecover(curState);\n+          }\n+        } catch (IOException ioe) {\n+          sd.unlock();\n+          throw ioe;\n+        }\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    void recoverCreate(Collection\u003cURI\u003e dataDirs,\n                       Collection\u003cURI\u003e editsDirs) throws IOException {\n      Collection\u003cURI\u003e tempDataDirs \u003d new ArrayList\u003cURI\u003e(dataDirs);\n      Collection\u003cURI\u003e tempEditsDirs \u003d new ArrayList\u003cURI\u003e(editsDirs);\n      storage.close();\n      storage.setStorageDirectories(tempDataDirs, tempEditsDirs);\n      for (Iterator\u003cStorageDirectory\u003e it \u003d \n                   storage.dirIterator(); it.hasNext();) {\n        StorageDirectory sd \u003d it.next();\n        boolean isAccessible \u003d true;\n        try { // create directories if don\u0027t exist yet\n          if(!sd.getRoot().mkdirs()) {\n            // do nothing, directory is already created\n          }\n        } catch(SecurityException se) {\n          isAccessible \u003d false;\n        }\n        if(!isAccessible)\n          throw new InconsistentFSStateException(sd.getRoot(),\n              \"cannot access checkpoint directory.\");\n        StorageState curState;\n        try {\n          curState \u003d sd.analyzeStorage(HdfsConstants.StartupOption.REGULAR);\n          // sd is locked but not opened\n          switch(curState) {\n          case NON_EXISTENT:\n            // fail if any of the configured checkpoint dirs are inaccessible \n            throw new InconsistentFSStateException(sd.getRoot(),\n                  \"checkpoint directory does not exist or is not accessible.\");\n          case NOT_FORMATTED:\n            break;  // it\u0027s ok since initially there is no current and VERSION\n          case NORMAL:\n            break;\n          default:  // recovery is possible\n            sd.doRecover(curState);\n          }\n        } catch (IOException ioe) {\n          sd.unlock();\n          throw ioe;\n        }\n      }\n    }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/SecondaryNameNode.java"
    }
  }
}