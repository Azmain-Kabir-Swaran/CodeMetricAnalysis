{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SLSFairScheduler.java",
  "functionName": "setConf",
  "functionId": "setConf___conf-Configuration",
  "sourceFilePath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/SLSFairScheduler.java",
  "functionStartLine": 79,
  "functionEndLine": 92,
  "numCommitsSeen": 38,
  "timeTaken": 2131,
  "changeHistory": [
    "de69d6e81128470dd5d2fd865d4b3a79188f740b",
    "6a5516c2381f107d96b8326939514de3c6e53d3d",
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b"
  ],
  "changeHistoryShort": {
    "de69d6e81128470dd5d2fd865d4b3a79188f740b": "Ybodychange",
    "6a5516c2381f107d96b8326939514de3c6e53d3d": "Ymultichange(Ymovefromfile,Ybodychange)",
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "de69d6e81128470dd5d2fd865d4b3a79188f740b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6363. Extending SLS: Synthetic Load Generator. (Carlo Curino via wangda)\n",
      "commitDate": "20/04/17 9:54 PM",
      "commitName": "de69d6e81128470dd5d2fd865d4b3a79188f740b",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "29/03/17 4:18 PM",
      "commitNameOld": "6a5516c2381f107d96b8326939514de3c6e53d3d",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 22.23,
      "commitsBetweenForRepo": 128,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,14 @@\n   public void setConf(Configuration conf) {\n     super.setConfig(conf);\n \n     metricsON \u003d conf.getBoolean(SLSConfiguration.METRICS_SWITCH, true);\n     if (metricsON) {\n       try {\n         schedulerMetrics \u003d SchedulerMetrics.getInstance(conf,\n             FairScheduler.class);\n         schedulerMetrics.init(this, conf);\n       } catch (Exception e) {\n         e.printStackTrace();\n       }\n-\n-      ShutdownHookManager.get().addShutdownHook(new Runnable() {\n-        @Override public void run() {\n-          try {\n-            schedulerMetrics.tearDown();\n-          } catch (Exception e) {\n-            e.printStackTrace();\n-          }\n-        }\n-      }, SLSUtils.SHUTDOWN_HOOK_PRIORITY);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void setConf(Configuration conf) {\n    super.setConfig(conf);\n\n    metricsON \u003d conf.getBoolean(SLSConfiguration.METRICS_SWITCH, true);\n    if (metricsON) {\n      try {\n        schedulerMetrics \u003d SchedulerMetrics.getInstance(conf,\n            FairScheduler.class);\n        schedulerMetrics.init(this, conf);\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/SLSFairScheduler.java",
      "extendedDetails": {}
    },
    "6a5516c2381f107d96b8326939514de3c6e53d3d": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "YARN-5654. Not be able to run SLS with FairScheduler (yufeigu via rkanter)\n",
      "commitDate": "29/03/17 4:18 PM",
      "commitName": "6a5516c2381f107d96b8326939514de3c6e53d3d",
      "commitAuthor": "Robert Kanter",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-5654. Not be able to run SLS with FairScheduler (yufeigu via rkanter)\n",
          "commitDate": "29/03/17 4:18 PM",
          "commitName": "6a5516c2381f107d96b8326939514de3c6e53d3d",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "29/03/17 2:37 PM",
          "commitNameOld": "4966a6e26e45d7dc36e0b270066ff7c87bcd00cc",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,24 @@\n   public void setConf(Configuration conf) {\n-    this.conf \u003d conf;\n-    // set scheduler\n-    Class\u003c? extends ResourceScheduler\u003e klass \u003d conf.getClass(\n-        SLSConfiguration.RM_SCHEDULER, null, ResourceScheduler.class);\n+    super.setConfig(conf);\n \n-    scheduler \u003d ReflectionUtils.newInstance(klass, conf);\n-    // start metrics\n     metricsON \u003d conf.getBoolean(SLSConfiguration.METRICS_SWITCH, true);\n     if (metricsON) {\n       try {\n-        initMetrics();\n+        schedulerMetrics \u003d SchedulerMetrics.getInstance(conf,\n+            FairScheduler.class);\n+        schedulerMetrics.init(this, conf);\n       } catch (Exception e) {\n         e.printStackTrace();\n       }\n-    }\n \n-    ShutdownHookManager.get().addShutdownHook(new Runnable() {\n-      @Override\n-      public void run() {\n-        try {\n-          if (metricsLogBW !\u003d null)  {\n-            metricsLogBW.write(\"]\");\n-            metricsLogBW.close();\n+      ShutdownHookManager.get().addShutdownHook(new Runnable() {\n+        @Override public void run() {\n+          try {\n+            schedulerMetrics.tearDown();\n+          } catch (Exception e) {\n+            e.printStackTrace();\n           }\n-          if (web !\u003d null) {\n-            web.stop();\n-          }\n-          tearDown();\n-        } catch (Exception e) {\n-          e.printStackTrace();\n         }\n-      }\n-    }, SHUTDOWN_HOOK_PRIORITY);\n+      }, SLSUtils.SHUTDOWN_HOOK_PRIORITY);\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void setConf(Configuration conf) {\n    super.setConfig(conf);\n\n    metricsON \u003d conf.getBoolean(SLSConfiguration.METRICS_SWITCH, true);\n    if (metricsON) {\n      try {\n        schedulerMetrics \u003d SchedulerMetrics.getInstance(conf,\n            FairScheduler.class);\n        schedulerMetrics.init(this, conf);\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n\n      ShutdownHookManager.get().addShutdownHook(new Runnable() {\n        @Override public void run() {\n          try {\n            schedulerMetrics.tearDown();\n          } catch (Exception e) {\n            e.printStackTrace();\n          }\n        }\n      }, SLSUtils.SHUTDOWN_HOOK_PRIORITY);\n    }\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/SLSFairScheduler.java",
          "extendedDetails": {
            "oldPath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/ResourceSchedulerWrapper.java",
            "newPath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/SLSFairScheduler.java",
            "oldMethodName": "setConf",
            "newMethodName": "setConf"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5654. Not be able to run SLS with FairScheduler (yufeigu via rkanter)\n",
          "commitDate": "29/03/17 4:18 PM",
          "commitName": "6a5516c2381f107d96b8326939514de3c6e53d3d",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "29/03/17 2:37 PM",
          "commitNameOld": "4966a6e26e45d7dc36e0b270066ff7c87bcd00cc",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,24 @@\n   public void setConf(Configuration conf) {\n-    this.conf \u003d conf;\n-    // set scheduler\n-    Class\u003c? extends ResourceScheduler\u003e klass \u003d conf.getClass(\n-        SLSConfiguration.RM_SCHEDULER, null, ResourceScheduler.class);\n+    super.setConfig(conf);\n \n-    scheduler \u003d ReflectionUtils.newInstance(klass, conf);\n-    // start metrics\n     metricsON \u003d conf.getBoolean(SLSConfiguration.METRICS_SWITCH, true);\n     if (metricsON) {\n       try {\n-        initMetrics();\n+        schedulerMetrics \u003d SchedulerMetrics.getInstance(conf,\n+            FairScheduler.class);\n+        schedulerMetrics.init(this, conf);\n       } catch (Exception e) {\n         e.printStackTrace();\n       }\n-    }\n \n-    ShutdownHookManager.get().addShutdownHook(new Runnable() {\n-      @Override\n-      public void run() {\n-        try {\n-          if (metricsLogBW !\u003d null)  {\n-            metricsLogBW.write(\"]\");\n-            metricsLogBW.close();\n+      ShutdownHookManager.get().addShutdownHook(new Runnable() {\n+        @Override public void run() {\n+          try {\n+            schedulerMetrics.tearDown();\n+          } catch (Exception e) {\n+            e.printStackTrace();\n           }\n-          if (web !\u003d null) {\n-            web.stop();\n-          }\n-          tearDown();\n-        } catch (Exception e) {\n-          e.printStackTrace();\n         }\n-      }\n-    }, SHUTDOWN_HOOK_PRIORITY);\n+      }, SLSUtils.SHUTDOWN_HOOK_PRIORITY);\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void setConf(Configuration conf) {\n    super.setConfig(conf);\n\n    metricsON \u003d conf.getBoolean(SLSConfiguration.METRICS_SWITCH, true);\n    if (metricsON) {\n      try {\n        schedulerMetrics \u003d SchedulerMetrics.getInstance(conf,\n            FairScheduler.class);\n        schedulerMetrics.init(this, conf);\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n\n      ShutdownHookManager.get().addShutdownHook(new Runnable() {\n        @Override public void run() {\n          try {\n            schedulerMetrics.tearDown();\n          } catch (Exception e) {\n            e.printStackTrace();\n          }\n        }\n      }, SLSUtils.SHUTDOWN_HOOK_PRIORITY);\n    }\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/SLSFairScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1021. Yarn Scheduler Load Simulator. (ywskycn via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1527059 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/09/13 1:23 PM",
      "commitName": "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,36 @@\n+  public void setConf(Configuration conf) {\n+    this.conf \u003d conf;\n+    // set scheduler\n+    Class\u003c? extends ResourceScheduler\u003e klass \u003d\n+            conf.getClass(SLSConfiguration.RM_SCHEDULER, null,\n+                    ResourceScheduler.class);\n+\n+    scheduler \u003d ReflectionUtils.newInstance(klass, conf);\n+    // start metrics\n+    metricsON \u003d conf.getBoolean(SLSConfiguration.METRICS_SWITCH, true);\n+    if (metricsON) {\n+      try {\n+        initMetrics();\n+      } catch (Exception e) {\n+        e.printStackTrace();\n+      }\n+    }\n+\n+    ShutdownHookManager.get().addShutdownHook(new Runnable() {\n+      @Override\n+      public void run() {\n+        try {\n+          if (metricsLogBW !\u003d null)  {\n+            metricsLogBW.write(\"]\");\n+            metricsLogBW.close();\n+          }\n+          if (web !\u003d null) {\n+            web.stop();\n+          }\n+          tearDown();\n+        } catch (Exception e) {\n+          e.printStackTrace();\n+        }\n+      }\n+    }, SHUTDOWN_HOOK_PRIORITY);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void setConf(Configuration conf) {\n    this.conf \u003d conf;\n    // set scheduler\n    Class\u003c? extends ResourceScheduler\u003e klass \u003d\n            conf.getClass(SLSConfiguration.RM_SCHEDULER, null,\n                    ResourceScheduler.class);\n\n    scheduler \u003d ReflectionUtils.newInstance(klass, conf);\n    // start metrics\n    metricsON \u003d conf.getBoolean(SLSConfiguration.METRICS_SWITCH, true);\n    if (metricsON) {\n      try {\n        initMetrics();\n      } catch (Exception e) {\n        e.printStackTrace();\n      }\n    }\n\n    ShutdownHookManager.get().addShutdownHook(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          if (metricsLogBW !\u003d null)  {\n            metricsLogBW.write(\"]\");\n            metricsLogBW.close();\n          }\n          if (web !\u003d null) {\n            web.stop();\n          }\n          tearDown();\n        } catch (Exception e) {\n          e.printStackTrace();\n        }\n      }\n    }, SHUTDOWN_HOOK_PRIORITY);\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/ResourceSchedulerWrapper.java"
    }
  }
}