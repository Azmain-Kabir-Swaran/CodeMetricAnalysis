{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "OpportunisticContainerContext.java",
  "functionName": "matchAllocationToOutstandingRequest",
  "functionId": "matchAllocationToOutstandingRequest___capability-Resource__allocations-List__Allocation__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerContext.java",
  "functionStartLine": 170,
  "functionEndLine": 201,
  "numCommitsSeen": 19,
  "timeTaken": 5928,
  "changeHistory": [
    "12c81610e0dcbf6770f10c18c04760fa8d91b9a6",
    "b733348dde18a242e6c9074c512116a8baf1d281",
    "ac1e5d4f77e3b9df8dcacb0b1f72eecc27931eb8",
    "82c9e061017c32e633e0b0cbb7978749a6df4fb2",
    "e5766b1dbee02ae0ef89618e172f3fb227af19e8",
    "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b"
  ],
  "changeHistoryShort": {
    "12c81610e0dcbf6770f10c18c04760fa8d91b9a6": "Ybodychange",
    "b733348dde18a242e6c9074c512116a8baf1d281": "Ymultichange(Yparameterchange,Ybodychange)",
    "ac1e5d4f77e3b9df8dcacb0b1f72eecc27931eb8": "Ybodychange",
    "82c9e061017c32e633e0b0cbb7978749a6df4fb2": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange)",
    "e5766b1dbee02ae0ef89618e172f3fb227af19e8": "Ymultichange(Yfilerename,Ymodifierchange)",
    "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "12c81610e0dcbf6770f10c18c04760fa8d91b9a6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9505. Add container allocation latency for Opportunistic Scheduler. Contributed by Abhishek Modi.\n",
      "commitDate": "17/05/19 12:03 PM",
      "commitName": "12c81610e0dcbf6770f10c18c04760fa8d91b9a6",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "05/10/17 9:58 AM",
      "commitNameOld": "b733348dde18a242e6c9074c512116a8baf1d281",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 589.09,
      "commitsBetweenForRepo": 4915,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,32 @@\n   public void matchAllocationToOutstandingRequest(Resource capability,\n       List\u003cAllocation\u003e allocations) {\n     for (OpportunisticContainerAllocator.Allocation allocation : allocations) {\n       SchedulerRequestKey schedulerKey \u003d\n           SchedulerRequestKey.extractFrom(allocation.getContainer());\n       Map\u003cResource, EnrichedResourceRequest\u003e asks \u003d\n           outstandingOpReqs.get(schedulerKey);\n \n       if (asks \u003d\u003d null) {\n         continue;\n       }\n \n       EnrichedResourceRequest err \u003d asks.get(capability);\n       if (err !\u003d null) {\n         int numContainers \u003d err.getRequest().getNumContainers();\n         numContainers--;\n         err.getRequest().setNumContainers(numContainers);\n         if (numContainers \u003d\u003d 0) {\n           asks.remove(capability);\n           if (asks.size() \u003d\u003d 0) {\n             outstandingOpReqs.remove(schedulerKey);\n           }\n         } else {\n           if (!ResourceRequest.isAnyLocation(allocation.getResourceName())) {\n             err.removeLocation(allocation.getResourceName());\n           }\n         }\n+        getOppSchedulerMetrics().addAllocateOLatencyEntry(\n+            Time.monotonicNow() - err.getTimestamp());\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void matchAllocationToOutstandingRequest(Resource capability,\n      List\u003cAllocation\u003e allocations) {\n    for (OpportunisticContainerAllocator.Allocation allocation : allocations) {\n      SchedulerRequestKey schedulerKey \u003d\n          SchedulerRequestKey.extractFrom(allocation.getContainer());\n      Map\u003cResource, EnrichedResourceRequest\u003e asks \u003d\n          outstandingOpReqs.get(schedulerKey);\n\n      if (asks \u003d\u003d null) {\n        continue;\n      }\n\n      EnrichedResourceRequest err \u003d asks.get(capability);\n      if (err !\u003d null) {\n        int numContainers \u003d err.getRequest().getNumContainers();\n        numContainers--;\n        err.getRequest().setNumContainers(numContainers);\n        if (numContainers \u003d\u003d 0) {\n          asks.remove(capability);\n          if (asks.size() \u003d\u003d 0) {\n            outstandingOpReqs.remove(schedulerKey);\n          }\n        } else {\n          if (!ResourceRequest.isAnyLocation(allocation.getResourceName())) {\n            err.removeLocation(allocation.getResourceName());\n          }\n        }\n        getOppSchedulerMetrics().addAllocateOLatencyEntry(\n            Time.monotonicNow() - err.getTimestamp());\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerContext.java",
      "extendedDetails": {}
    },
    "b733348dde18a242e6c9074c512116a8baf1d281": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-7258. Add Node and Rack Hints to Opportunistic Scheduler. (Kartheek Muthyala via asuresh).\n",
      "commitDate": "05/10/17 9:58 AM",
      "commitName": "b733348dde18a242e6c9074c512116a8baf1d281",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7258. Add Node and Rack Hints to Opportunistic Scheduler. (Kartheek Muthyala via asuresh).\n",
          "commitDate": "05/10/17 9:58 AM",
          "commitName": "b733348dde18a242e6c9074c512116a8baf1d281",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "05/01/17 10:31 AM",
          "commitNameOld": "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 272.94,
          "commitsBetweenForRepo": 1702,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,30 @@\n   public void matchAllocationToOutstandingRequest(Resource capability,\n-      List\u003cContainer\u003e allocatedContainers) {\n-    for (Container c : allocatedContainers) {\n+      List\u003cAllocation\u003e allocations) {\n+    for (OpportunisticContainerAllocator.Allocation allocation : allocations) {\n       SchedulerRequestKey schedulerKey \u003d\n-          SchedulerRequestKey.extractFrom(c);\n-      Map\u003cResource, ResourceRequest\u003e asks \u003d\n+          SchedulerRequestKey.extractFrom(allocation.getContainer());\n+      Map\u003cResource, EnrichedResourceRequest\u003e asks \u003d\n           outstandingOpReqs.get(schedulerKey);\n \n       if (asks \u003d\u003d null) {\n         continue;\n       }\n \n-      ResourceRequest rr \u003d asks.get(capability);\n-      if (rr !\u003d null) {\n-        rr.setNumContainers(rr.getNumContainers() - 1);\n-        if (rr.getNumContainers() \u003d\u003d 0) {\n+      EnrichedResourceRequest err \u003d asks.get(capability);\n+      if (err !\u003d null) {\n+        int numContainers \u003d err.getRequest().getNumContainers();\n+        numContainers--;\n+        err.getRequest().setNumContainers(numContainers);\n+        if (numContainers \u003d\u003d 0) {\n           asks.remove(capability);\n+          if (asks.size() \u003d\u003d 0) {\n+            outstandingOpReqs.remove(schedulerKey);\n+          }\n+        } else {\n+          if (!ResourceRequest.isAnyLocation(allocation.getResourceName())) {\n+            err.removeLocation(allocation.getResourceName());\n+          }\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void matchAllocationToOutstandingRequest(Resource capability,\n      List\u003cAllocation\u003e allocations) {\n    for (OpportunisticContainerAllocator.Allocation allocation : allocations) {\n      SchedulerRequestKey schedulerKey \u003d\n          SchedulerRequestKey.extractFrom(allocation.getContainer());\n      Map\u003cResource, EnrichedResourceRequest\u003e asks \u003d\n          outstandingOpReqs.get(schedulerKey);\n\n      if (asks \u003d\u003d null) {\n        continue;\n      }\n\n      EnrichedResourceRequest err \u003d asks.get(capability);\n      if (err !\u003d null) {\n        int numContainers \u003d err.getRequest().getNumContainers();\n        numContainers--;\n        err.getRequest().setNumContainers(numContainers);\n        if (numContainers \u003d\u003d 0) {\n          asks.remove(capability);\n          if (asks.size() \u003d\u003d 0) {\n            outstandingOpReqs.remove(schedulerKey);\n          }\n        } else {\n          if (!ResourceRequest.isAnyLocation(allocation.getResourceName())) {\n            err.removeLocation(allocation.getResourceName());\n          }\n        }\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerContext.java",
          "extendedDetails": {
            "oldValue": "[capability-Resource, allocatedContainers-List\u003cContainer\u003e]",
            "newValue": "[capability-Resource, allocations-List\u003cAllocation\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7258. Add Node and Rack Hints to Opportunistic Scheduler. (Kartheek Muthyala via asuresh).\n",
          "commitDate": "05/10/17 9:58 AM",
          "commitName": "b733348dde18a242e6c9074c512116a8baf1d281",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "05/01/17 10:31 AM",
          "commitNameOld": "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 272.94,
          "commitsBetweenForRepo": 1702,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,30 @@\n   public void matchAllocationToOutstandingRequest(Resource capability,\n-      List\u003cContainer\u003e allocatedContainers) {\n-    for (Container c : allocatedContainers) {\n+      List\u003cAllocation\u003e allocations) {\n+    for (OpportunisticContainerAllocator.Allocation allocation : allocations) {\n       SchedulerRequestKey schedulerKey \u003d\n-          SchedulerRequestKey.extractFrom(c);\n-      Map\u003cResource, ResourceRequest\u003e asks \u003d\n+          SchedulerRequestKey.extractFrom(allocation.getContainer());\n+      Map\u003cResource, EnrichedResourceRequest\u003e asks \u003d\n           outstandingOpReqs.get(schedulerKey);\n \n       if (asks \u003d\u003d null) {\n         continue;\n       }\n \n-      ResourceRequest rr \u003d asks.get(capability);\n-      if (rr !\u003d null) {\n-        rr.setNumContainers(rr.getNumContainers() - 1);\n-        if (rr.getNumContainers() \u003d\u003d 0) {\n+      EnrichedResourceRequest err \u003d asks.get(capability);\n+      if (err !\u003d null) {\n+        int numContainers \u003d err.getRequest().getNumContainers();\n+        numContainers--;\n+        err.getRequest().setNumContainers(numContainers);\n+        if (numContainers \u003d\u003d 0) {\n           asks.remove(capability);\n+          if (asks.size() \u003d\u003d 0) {\n+            outstandingOpReqs.remove(schedulerKey);\n+          }\n+        } else {\n+          if (!ResourceRequest.isAnyLocation(allocation.getResourceName())) {\n+            err.removeLocation(allocation.getResourceName());\n+          }\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void matchAllocationToOutstandingRequest(Resource capability,\n      List\u003cAllocation\u003e allocations) {\n    for (OpportunisticContainerAllocator.Allocation allocation : allocations) {\n      SchedulerRequestKey schedulerKey \u003d\n          SchedulerRequestKey.extractFrom(allocation.getContainer());\n      Map\u003cResource, EnrichedResourceRequest\u003e asks \u003d\n          outstandingOpReqs.get(schedulerKey);\n\n      if (asks \u003d\u003d null) {\n        continue;\n      }\n\n      EnrichedResourceRequest err \u003d asks.get(capability);\n      if (err !\u003d null) {\n        int numContainers \u003d err.getRequest().getNumContainers();\n        numContainers--;\n        err.getRequest().setNumContainers(numContainers);\n        if (numContainers \u003d\u003d 0) {\n          asks.remove(capability);\n          if (asks.size() \u003d\u003d 0) {\n            outstandingOpReqs.remove(schedulerKey);\n          }\n        } else {\n          if (!ResourceRequest.isAnyLocation(allocation.getResourceName())) {\n            err.removeLocation(allocation.getResourceName());\n          }\n        }\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerContext.java",
          "extendedDetails": {}
        }
      ]
    },
    "ac1e5d4f77e3b9df8dcacb0b1f72eecc27931eb8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5938. Refactoring OpportunisticContainerAllocator to use SchedulerRequestKey instead of Priority and other misc fixes (asuresh)\n",
      "commitDate": "27/12/16 12:40 PM",
      "commitName": "ac1e5d4f77e3b9df8dcacb0b1f72eecc27931eb8",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "29/10/16 2:03 AM",
      "commitNameOld": "aa3cab1eb29c56368d15882d7260a994e615e8d8",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 59.48,
      "commitsBetweenForRepo": 376,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n   public void matchAllocationToOutstandingRequest(Resource capability,\n       List\u003cContainer\u003e allocatedContainers) {\n     for (Container c : allocatedContainers) {\n-      containersAllocated.add(c.getId());\n+      SchedulerRequestKey schedulerKey \u003d SchedulerRequestKey.extractFrom(c);\n       Map\u003cResource, ResourceRequest\u003e asks \u003d\n-          outstandingOpReqs.get(c.getPriority());\n+          outstandingOpReqs.get(schedulerKey);\n \n       if (asks \u003d\u003d null) {\n         continue;\n       }\n \n       ResourceRequest rr \u003d asks.get(capability);\n       if (rr !\u003d null) {\n         rr.setNumContainers(rr.getNumContainers() - 1);\n         if (rr.getNumContainers() \u003d\u003d 0) {\n           asks.remove(capability);\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void matchAllocationToOutstandingRequest(Resource capability,\n      List\u003cContainer\u003e allocatedContainers) {\n    for (Container c : allocatedContainers) {\n      SchedulerRequestKey schedulerKey \u003d SchedulerRequestKey.extractFrom(c);\n      Map\u003cResource, ResourceRequest\u003e asks \u003d\n          outstandingOpReqs.get(schedulerKey);\n\n      if (asks \u003d\u003d null) {\n        continue;\n      }\n\n      ResourceRequest rr \u003d asks.get(capability);\n      if (rr !\u003d null) {\n        rr.setNumContainers(rr.getNumContainers() - 1);\n        if (rr.getNumContainers() \u003d\u003d 0) {\n          asks.remove(capability);\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerContext.java",
      "extendedDetails": {}
    },
    "82c9e061017c32e633e0b0cbb7978749a6df4fb2": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-5457. Refactor DistributedScheduling framework to pull out common functionality. (asuresh)\n",
      "commitDate": "09/08/16 12:42 AM",
      "commitName": "82c9e061017c32e633e0b0cbb7978749a6df4fb2",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-5457. Refactor DistributedScheduling framework to pull out common functionality. (asuresh)\n",
          "commitDate": "09/08/16 12:42 AM",
          "commitName": "82c9e061017c32e633e0b0cbb7978749a6df4fb2",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "08/08/16 5:54 PM",
          "commitNameOld": "8f9b61852bf6600b65e49875fec172bac9e0a85d",
          "commitAuthorOld": "Masatake Iwasaki",
          "daysBetweenCommits": 0.28,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,20 @@\n-  private void matchAllocationToOutstandingRequest(Resource capability,\n+  public void matchAllocationToOutstandingRequest(Resource capability,\n       List\u003cContainer\u003e allocatedContainers) {\n     for (Container c : allocatedContainers) {\n       containersAllocated.add(c.getId());\n       Map\u003cResource, ResourceRequest\u003e asks \u003d\n           outstandingOpReqs.get(c.getPriority());\n \n-      if (asks \u003d\u003d null)\n+      if (asks \u003d\u003d null) {\n         continue;\n+      }\n \n       ResourceRequest rr \u003d asks.get(capability);\n       if (rr !\u003d null) {\n         rr.setNumContainers(rr.getNumContainers() - 1);\n         if (rr.getNumContainers() \u003d\u003d 0) {\n           asks.remove(capability);\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void matchAllocationToOutstandingRequest(Resource capability,\n      List\u003cContainer\u003e allocatedContainers) {\n    for (Container c : allocatedContainers) {\n      containersAllocated.add(c.getId());\n      Map\u003cResource, ResourceRequest\u003e asks \u003d\n          outstandingOpReqs.get(c.getPriority());\n\n      if (asks \u003d\u003d null) {\n        continue;\n      }\n\n      ResourceRequest rr \u003d asks.get(capability);\n      if (rr !\u003d null) {\n        rr.setNumContainers(rr.getNumContainers() - 1);\n        if (rr.getNumContainers() \u003d\u003d 0) {\n          asks.remove(capability);\n        }\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerContext.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/scheduler/DistributedScheduler.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerContext.java",
            "oldMethodName": "matchAllocationToOutstandingRequest",
            "newMethodName": "matchAllocationToOutstandingRequest"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-5457. Refactor DistributedScheduling framework to pull out common functionality. (asuresh)\n",
          "commitDate": "09/08/16 12:42 AM",
          "commitName": "82c9e061017c32e633e0b0cbb7978749a6df4fb2",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "08/08/16 5:54 PM",
          "commitNameOld": "8f9b61852bf6600b65e49875fec172bac9e0a85d",
          "commitAuthorOld": "Masatake Iwasaki",
          "daysBetweenCommits": 0.28,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,20 @@\n-  private void matchAllocationToOutstandingRequest(Resource capability,\n+  public void matchAllocationToOutstandingRequest(Resource capability,\n       List\u003cContainer\u003e allocatedContainers) {\n     for (Container c : allocatedContainers) {\n       containersAllocated.add(c.getId());\n       Map\u003cResource, ResourceRequest\u003e asks \u003d\n           outstandingOpReqs.get(c.getPriority());\n \n-      if (asks \u003d\u003d null)\n+      if (asks \u003d\u003d null) {\n         continue;\n+      }\n \n       ResourceRequest rr \u003d asks.get(capability);\n       if (rr !\u003d null) {\n         rr.setNumContainers(rr.getNumContainers() - 1);\n         if (rr.getNumContainers() \u003d\u003d 0) {\n           asks.remove(capability);\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void matchAllocationToOutstandingRequest(Resource capability,\n      List\u003cContainer\u003e allocatedContainers) {\n    for (Container c : allocatedContainers) {\n      containersAllocated.add(c.getId());\n      Map\u003cResource, ResourceRequest\u003e asks \u003d\n          outstandingOpReqs.get(c.getPriority());\n\n      if (asks \u003d\u003d null) {\n        continue;\n      }\n\n      ResourceRequest rr \u003d asks.get(capability);\n      if (rr !\u003d null) {\n        rr.setNumContainers(rr.getNumContainers() - 1);\n        if (rr.getNumContainers() \u003d\u003d 0) {\n          asks.remove(capability);\n        }\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerContext.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5457. Refactor DistributedScheduling framework to pull out common functionality. (asuresh)\n",
          "commitDate": "09/08/16 12:42 AM",
          "commitName": "82c9e061017c32e633e0b0cbb7978749a6df4fb2",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "08/08/16 5:54 PM",
          "commitNameOld": "8f9b61852bf6600b65e49875fec172bac9e0a85d",
          "commitAuthorOld": "Masatake Iwasaki",
          "daysBetweenCommits": 0.28,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,20 @@\n-  private void matchAllocationToOutstandingRequest(Resource capability,\n+  public void matchAllocationToOutstandingRequest(Resource capability,\n       List\u003cContainer\u003e allocatedContainers) {\n     for (Container c : allocatedContainers) {\n       containersAllocated.add(c.getId());\n       Map\u003cResource, ResourceRequest\u003e asks \u003d\n           outstandingOpReqs.get(c.getPriority());\n \n-      if (asks \u003d\u003d null)\n+      if (asks \u003d\u003d null) {\n         continue;\n+      }\n \n       ResourceRequest rr \u003d asks.get(capability);\n       if (rr !\u003d null) {\n         rr.setNumContainers(rr.getNumContainers() - 1);\n         if (rr.getNumContainers() \u003d\u003d 0) {\n           asks.remove(capability);\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void matchAllocationToOutstandingRequest(Resource capability,\n      List\u003cContainer\u003e allocatedContainers) {\n    for (Container c : allocatedContainers) {\n      containersAllocated.add(c.getId());\n      Map\u003cResource, ResourceRequest\u003e asks \u003d\n          outstandingOpReqs.get(c.getPriority());\n\n      if (asks \u003d\u003d null) {\n        continue;\n      }\n\n      ResourceRequest rr \u003d asks.get(capability);\n      if (rr !\u003d null) {\n        rr.setNumContainers(rr.getNumContainers() - 1);\n        if (rr.getNumContainers() \u003d\u003d 0) {\n          asks.remove(capability);\n        }\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/scheduler/OpportunisticContainerContext.java",
          "extendedDetails": {}
        }
      ]
    },
    "e5766b1dbee02ae0ef89618e172f3fb227af19e8": {
      "type": "Ymultichange(Yfilerename,Ymodifierchange)",
      "commitMessage": "YARN-5113. Refactoring and other clean-up for distributed scheduling. (Konstantinos Karanasos via asuresh)\n",
      "commitDate": "31/07/16 11:48 AM",
      "commitName": "e5766b1dbee02ae0ef89618e172f3fb227af19e8",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-5113. Refactoring and other clean-up for distributed scheduling. (Konstantinos Karanasos via asuresh)\n",
          "commitDate": "31/07/16 11:48 AM",
          "commitName": "e5766b1dbee02ae0ef89618e172f3fb227af19e8",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "30/07/16 7:29 PM",
          "commitNameOld": "3d191cc15244e1e29f837b34a9bd1d029e003064",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 0.68,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,19 @@\n-  public void matchAllocationToOutstandingRequest(Resource capability,\n+  private void matchAllocationToOutstandingRequest(Resource capability,\n       List\u003cContainer\u003e allocatedContainers) {\n     for (Container c : allocatedContainers) {\n       containersAllocated.add(c.getId());\n       Map\u003cResource, ResourceRequest\u003e asks \u003d\n           outstandingOpReqs.get(c.getPriority());\n \n       if (asks \u003d\u003d null)\n         continue;\n \n       ResourceRequest rr \u003d asks.get(capability);\n       if (rr !\u003d null) {\n         rr.setNumContainers(rr.getNumContainers() - 1);\n         if (rr.getNumContainers() \u003d\u003d 0) {\n           asks.remove(capability);\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void matchAllocationToOutstandingRequest(Resource capability,\n      List\u003cContainer\u003e allocatedContainers) {\n    for (Container c : allocatedContainers) {\n      containersAllocated.add(c.getId());\n      Map\u003cResource, ResourceRequest\u003e asks \u003d\n          outstandingOpReqs.get(c.getPriority());\n\n      if (asks \u003d\u003d null)\n        continue;\n\n      ResourceRequest rr \u003d asks.get(capability);\n      if (rr !\u003d null) {\n        rr.setNumContainers(rr.getNumContainers() - 1);\n        if (rr.getNumContainers() \u003d\u003d 0) {\n          asks.remove(capability);\n        }\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/scheduler/DistributedScheduler.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/scheduler/LocalScheduler.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/scheduler/DistributedScheduler.java"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-5113. Refactoring and other clean-up for distributed scheduling. (Konstantinos Karanasos via asuresh)\n",
          "commitDate": "31/07/16 11:48 AM",
          "commitName": "e5766b1dbee02ae0ef89618e172f3fb227af19e8",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "30/07/16 7:29 PM",
          "commitNameOld": "3d191cc15244e1e29f837b34a9bd1d029e003064",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 0.68,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,19 @@\n-  public void matchAllocationToOutstandingRequest(Resource capability,\n+  private void matchAllocationToOutstandingRequest(Resource capability,\n       List\u003cContainer\u003e allocatedContainers) {\n     for (Container c : allocatedContainers) {\n       containersAllocated.add(c.getId());\n       Map\u003cResource, ResourceRequest\u003e asks \u003d\n           outstandingOpReqs.get(c.getPriority());\n \n       if (asks \u003d\u003d null)\n         continue;\n \n       ResourceRequest rr \u003d asks.get(capability);\n       if (rr !\u003d null) {\n         rr.setNumContainers(rr.getNumContainers() - 1);\n         if (rr.getNumContainers() \u003d\u003d 0) {\n           asks.remove(capability);\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void matchAllocationToOutstandingRequest(Resource capability,\n      List\u003cContainer\u003e allocatedContainers) {\n    for (Container c : allocatedContainers) {\n      containersAllocated.add(c.getId());\n      Map\u003cResource, ResourceRequest\u003e asks \u003d\n          outstandingOpReqs.get(c.getPriority());\n\n      if (asks \u003d\u003d null)\n        continue;\n\n      ResourceRequest rr \u003d asks.get(capability);\n      if (rr !\u003d null) {\n        rr.setNumContainers(rr.getNumContainers() - 1);\n        if (rr.getNumContainers() \u003d\u003d 0) {\n          asks.remove(capability);\n        }\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/scheduler/DistributedScheduler.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[private]"
          }
        }
      ]
    },
    "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2885. Create AMRMProxy request interceptor and ContainerAllocator to distribute OPPORTUNISTIC containers to appropriate Nodes (asuresh)\n\n(cherry picked from commit 2bf025278a318b0452fdc9ece4427b4c42124e39)\n",
      "commitDate": "24/04/16 10:38 PM",
      "commitName": "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,19 @@\n+  public void matchAllocationToOutstandingRequest(Resource capability,\n+      List\u003cContainer\u003e allocatedContainers) {\n+    for (Container c : allocatedContainers) {\n+      containersAllocated.add(c.getId());\n+      Map\u003cResource, ResourceRequest\u003e asks \u003d\n+          outstandingOpReqs.get(c.getPriority());\n+\n+      if (asks \u003d\u003d null)\n+        continue;\n+\n+      ResourceRequest rr \u003d asks.get(capability);\n+      if (rr !\u003d null) {\n+        rr.setNumContainers(rr.getNumContainers() - 1);\n+        if (rr.getNumContainers() \u003d\u003d 0) {\n+          asks.remove(capability);\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void matchAllocationToOutstandingRequest(Resource capability,\n      List\u003cContainer\u003e allocatedContainers) {\n    for (Container c : allocatedContainers) {\n      containersAllocated.add(c.getId());\n      Map\u003cResource, ResourceRequest\u003e asks \u003d\n          outstandingOpReqs.get(c.getPriority());\n\n      if (asks \u003d\u003d null)\n        continue;\n\n      ResourceRequest rr \u003d asks.get(capability);\n      if (rr !\u003d null) {\n        rr.setNumContainers(rr.getNumContainers() - 1);\n        if (rr.getNumContainers() \u003d\u003d 0) {\n          asks.remove(capability);\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/scheduler/LocalScheduler.java"
    }
  }
}