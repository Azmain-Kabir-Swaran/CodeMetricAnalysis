{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Fetcher.java",
  "functionName": "openConnectionWithRetry",
  "functionId": "openConnectionWithRetry___url-URL",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/Fetcher.java",
  "functionStartLine": 404,
  "functionEndLine": 430,
  "numCommitsSeen": 65,
  "timeTaken": 2210,
  "changeHistory": [
    "8cc4a67059e37b2083cd5468b35a64a403a3e3ae",
    "177e8090f5809beb3ebcb656cd0affbb3f487de8",
    "2c3da25fd718b3a9c1ed67f05b577975ae613f4e"
  ],
  "changeHistoryShort": {
    "8cc4a67059e37b2083cd5468b35a64a403a3e3ae": "Yparameterchange",
    "177e8090f5809beb3ebcb656cd0affbb3f487de8": "Ybodychange",
    "2c3da25fd718b3a9c1ed67f05b577975ae613f4e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8cc4a67059e37b2083cd5468b35a64a403a3e3ae": {
      "type": "Yparameterchange",
      "commitMessage": "MAPREDUCE-6587. Remove unused params in connection-related methods of Fetcher. Contributed by Yiqun Lin.\n",
      "commitDate": "23/08/16 1:04 AM",
      "commitName": "8cc4a67059e37b2083cd5468b35a64a403a3e3ae",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "09/04/16 9:51 AM",
      "commitNameOld": "1fec06e037d2b22dafc64f33d4f1231bef4ceba8",
      "commitAuthorOld": "Eric Payne",
      "daysBetweenCommits": 135.63,
      "commitsBetweenForRepo": 1025,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,27 @@\n-  private void openConnectionWithRetry(MapHost host,\n-      Set\u003cTaskAttemptID\u003e remaining, URL url) throws IOException {\n+  private void openConnectionWithRetry(URL url) throws IOException {\n     long startTime \u003d Time.monotonicNow();\n     boolean shouldWait \u003d true;\n     while (shouldWait) {\n       try {\n         openConnection(url);\n         shouldWait \u003d false;\n       } catch (IOException e) {\n         if (!fetchRetryEnabled) {\n            // throw exception directly if fetch\u0027s retry is not enabled\n            throw e;\n         }\n         if ((Time.monotonicNow() - startTime) \u003e\u003d this.fetchRetryTimeout) {\n           LOG.warn(\"Failed to connect to host: \" + url + \"after \" \n               + fetchRetryTimeout + \" milliseconds.\");\n           throw e;\n         }\n         try {\n           Thread.sleep(this.fetchRetryInterval);\n         } catch (InterruptedException e1) {\n           if (stopped) {\n             return;\n           }\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void openConnectionWithRetry(URL url) throws IOException {\n    long startTime \u003d Time.monotonicNow();\n    boolean shouldWait \u003d true;\n    while (shouldWait) {\n      try {\n        openConnection(url);\n        shouldWait \u003d false;\n      } catch (IOException e) {\n        if (!fetchRetryEnabled) {\n           // throw exception directly if fetch\u0027s retry is not enabled\n           throw e;\n        }\n        if ((Time.monotonicNow() - startTime) \u003e\u003d this.fetchRetryTimeout) {\n          LOG.warn(\"Failed to connect to host: \" + url + \"after \" \n              + fetchRetryTimeout + \" milliseconds.\");\n          throw e;\n        }\n        try {\n          Thread.sleep(this.fetchRetryInterval);\n        } catch (InterruptedException e1) {\n          if (stopped) {\n            return;\n          }\n        }\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/Fetcher.java",
      "extendedDetails": {
        "oldValue": "[host-MapHost, remaining-Set\u003cTaskAttemptID\u003e, url-URL]",
        "newValue": "[url-URL]"
      }
    },
    "177e8090f5809beb3ebcb656cd0affbb3f487de8": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6156. Fetcher - connect() doesn\u0027t handle connection refused correctly. Contributed by Junping Du\n",
      "commitDate": "13/11/14 7:42 AM",
      "commitName": "177e8090f5809beb3ebcb656cd0affbb3f487de8",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "15/10/14 8:52 AM",
      "commitNameOld": "b9edad64034a9c8a121ec2b37792c190ba561e26",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 28.99,
      "commitsBetweenForRepo": 290,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   private void openConnectionWithRetry(MapHost host,\n       Set\u003cTaskAttemptID\u003e remaining, URL url) throws IOException {\n     long startTime \u003d Time.monotonicNow();\n     boolean shouldWait \u003d true;\n     while (shouldWait) {\n       try {\n         openConnection(url);\n         shouldWait \u003d false;\n       } catch (IOException e) {\n         if (!fetchRetryEnabled) {\n            // throw exception directly if fetch\u0027s retry is not enabled\n            throw e;\n         }\n         if ((Time.monotonicNow() - startTime) \u003e\u003d this.fetchRetryTimeout) {\n           LOG.warn(\"Failed to connect to host: \" + url + \"after \" \n-              + fetchRetryTimeout + \"milliseconds.\");\n+              + fetchRetryTimeout + \" milliseconds.\");\n           throw e;\n         }\n         try {\n           Thread.sleep(this.fetchRetryInterval);\n         } catch (InterruptedException e1) {\n           if (stopped) {\n             return;\n           }\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void openConnectionWithRetry(MapHost host,\n      Set\u003cTaskAttemptID\u003e remaining, URL url) throws IOException {\n    long startTime \u003d Time.monotonicNow();\n    boolean shouldWait \u003d true;\n    while (shouldWait) {\n      try {\n        openConnection(url);\n        shouldWait \u003d false;\n      } catch (IOException e) {\n        if (!fetchRetryEnabled) {\n           // throw exception directly if fetch\u0027s retry is not enabled\n           throw e;\n        }\n        if ((Time.monotonicNow() - startTime) \u003e\u003d this.fetchRetryTimeout) {\n          LOG.warn(\"Failed to connect to host: \" + url + \"after \" \n              + fetchRetryTimeout + \" milliseconds.\");\n          throw e;\n        }\n        try {\n          Thread.sleep(this.fetchRetryInterval);\n        } catch (InterruptedException e1) {\n          if (stopped) {\n            return;\n          }\n        }\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/Fetcher.java",
      "extendedDetails": {}
    },
    "2c3da25fd718b3a9c1ed67f05b577975ae613f4e": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-5891. Improved shuffle error handling across NM restarts. Contributed by Junping Du\n",
      "commitDate": "18/09/14 3:00 PM",
      "commitName": "2c3da25fd718b3a9c1ed67f05b577975ae613f4e",
      "commitAuthor": "Jason Lowe",
      "diff": "@@ -0,0 +1,28 @@\n+  private void openConnectionWithRetry(MapHost host,\n+      Set\u003cTaskAttemptID\u003e remaining, URL url) throws IOException {\n+    long startTime \u003d Time.monotonicNow();\n+    boolean shouldWait \u003d true;\n+    while (shouldWait) {\n+      try {\n+        openConnection(url);\n+        shouldWait \u003d false;\n+      } catch (IOException e) {\n+        if (!fetchRetryEnabled) {\n+           // throw exception directly if fetch\u0027s retry is not enabled\n+           throw e;\n+        }\n+        if ((Time.monotonicNow() - startTime) \u003e\u003d this.fetchRetryTimeout) {\n+          LOG.warn(\"Failed to connect to host: \" + url + \"after \" \n+              + fetchRetryTimeout + \"milliseconds.\");\n+          throw e;\n+        }\n+        try {\n+          Thread.sleep(this.fetchRetryInterval);\n+        } catch (InterruptedException e1) {\n+          if (stopped) {\n+            return;\n+          }\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void openConnectionWithRetry(MapHost host,\n      Set\u003cTaskAttemptID\u003e remaining, URL url) throws IOException {\n    long startTime \u003d Time.monotonicNow();\n    boolean shouldWait \u003d true;\n    while (shouldWait) {\n      try {\n        openConnection(url);\n        shouldWait \u003d false;\n      } catch (IOException e) {\n        if (!fetchRetryEnabled) {\n           // throw exception directly if fetch\u0027s retry is not enabled\n           throw e;\n        }\n        if ((Time.monotonicNow() - startTime) \u003e\u003d this.fetchRetryTimeout) {\n          LOG.warn(\"Failed to connect to host: \" + url + \"after \" \n              + fetchRetryTimeout + \"milliseconds.\");\n          throw e;\n        }\n        try {\n          Thread.sleep(this.fetchRetryInterval);\n        } catch (InterruptedException e1) {\n          if (stopped) {\n            return;\n          }\n        }\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/task/reduce/Fetcher.java"
    }
  }
}