{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "StageExecutionIntervalUnconstrained.java",
  "functionName": "computeExecutionInterval",
  "functionId": "computeExecutionInterval___plan-Plan__reservation-ReservationDefinition__currentReservationStage-ReservationRequest__allocateLeft-boolean__allocations-RLESparseResourceAllocation",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/planning/StageExecutionIntervalUnconstrained.java",
  "functionStartLine": 39,
  "functionEndLine": 72,
  "numCommitsSeen": 1,
  "timeTaken": 927,
  "changeHistory": [
    "a3a615eeab8c14ccdc548311097e62a916963dc5"
  ],
  "changeHistoryShort": {
    "a3a615eeab8c14ccdc548311097e62a916963dc5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a3a615eeab8c14ccdc548311097e62a916963dc5": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4359. Update LowCost agents logic to take advantage of YARN-4358. (Jonathan Yaniv and Ishai Menache via Subru).\n",
      "commitDate": "01/05/17 4:01 PM",
      "commitName": "a3a615eeab8c14ccdc548311097e62a916963dc5",
      "commitAuthor": "Subru Krishnan",
      "diff": "@@ -0,0 +1,34 @@\n+  public ReservationInterval computeExecutionInterval(Plan plan,\n+      ReservationDefinition reservation,\n+      ReservationRequest currentReservationStage, boolean allocateLeft,\n+      RLESparseResourceAllocation allocations) {\n+\n+    Long stageArrival \u003d reservation.getArrival();\n+    Long stageDeadline \u003d reservation.getDeadline();\n+\n+    ReservationRequestInterpreter jobType \u003d\n+        reservation.getReservationRequests().getInterpreter();\n+\n+    // Left to right\n+    if (allocateLeft) {\n+      // If ORDER job, change the stage arrival time\n+      if ((jobType \u003d\u003d ReservationRequestInterpreter.R_ORDER)\n+          || (jobType \u003d\u003d ReservationRequestInterpreter.R_ORDER_NO_GAP)) {\n+        Long allocationEndTime \u003d allocations.getLatestNonNullTime();\n+        if (allocationEndTime !\u003d -1) {\n+          stageArrival \u003d allocationEndTime;\n+        }\n+      }\n+      // Right to left\n+    } else {\n+      // If ORDER job, change the stage deadline\n+      if ((jobType \u003d\u003d ReservationRequestInterpreter.R_ORDER)\n+          || (jobType \u003d\u003d ReservationRequestInterpreter.R_ORDER_NO_GAP)) {\n+        Long allocationStartTime \u003d allocations.getEarliestStartTime();\n+        if (allocationStartTime !\u003d -1) {\n+          stageDeadline \u003d allocationStartTime;\n+        }\n+      }\n+    }\n+    return new ReservationInterval(stageArrival, stageDeadline);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public ReservationInterval computeExecutionInterval(Plan plan,\n      ReservationDefinition reservation,\n      ReservationRequest currentReservationStage, boolean allocateLeft,\n      RLESparseResourceAllocation allocations) {\n\n    Long stageArrival \u003d reservation.getArrival();\n    Long stageDeadline \u003d reservation.getDeadline();\n\n    ReservationRequestInterpreter jobType \u003d\n        reservation.getReservationRequests().getInterpreter();\n\n    // Left to right\n    if (allocateLeft) {\n      // If ORDER job, change the stage arrival time\n      if ((jobType \u003d\u003d ReservationRequestInterpreter.R_ORDER)\n          || (jobType \u003d\u003d ReservationRequestInterpreter.R_ORDER_NO_GAP)) {\n        Long allocationEndTime \u003d allocations.getLatestNonNullTime();\n        if (allocationEndTime !\u003d -1) {\n          stageArrival \u003d allocationEndTime;\n        }\n      }\n      // Right to left\n    } else {\n      // If ORDER job, change the stage deadline\n      if ((jobType \u003d\u003d ReservationRequestInterpreter.R_ORDER)\n          || (jobType \u003d\u003d ReservationRequestInterpreter.R_ORDER_NO_GAP)) {\n        Long allocationStartTime \u003d allocations.getEarliestStartTime();\n        if (allocationStartTime !\u003d -1) {\n          stageDeadline \u003d allocationStartTime;\n        }\n      }\n    }\n    return new ReservationInterval(stageArrival, stageDeadline);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/planning/StageExecutionIntervalUnconstrained.java"
    }
  }
}