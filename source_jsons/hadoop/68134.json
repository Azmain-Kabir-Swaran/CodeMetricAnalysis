{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SwiftNativeInputStream.java",
  "functionName": "seek",
  "functionId": "seek___targetPos-long",
  "sourceFilePath": "hadoop-tools/hadoop-openstack/src/main/java/org/apache/hadoop/fs/swift/snative/SwiftNativeInputStream.java",
  "functionStartLine": 304,
  "functionEndLine": 351,
  "numCommitsSeen": 4,
  "timeTaken": 822,
  "changeHistory": [
    "becc23fb65a5c2b632034b8b2c4c08832d47fd96",
    "3caca924bc72fe4a0e5b1ea89adb098cc1eb7874"
  ],
  "changeHistoryShort": {
    "becc23fb65a5c2b632034b8b2c4c08832d47fd96": "Ybodychange",
    "3caca924bc72fe4a0e5b1ea89adb098cc1eb7874": "Yintroduced"
  },
  "changeHistoryDetails": {
    "becc23fb65a5c2b632034b8b2c4c08832d47fd96": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9361: Strictly define FileSystem APIs - OpenStack portion\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1607599 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/07/14 5:10 AM",
      "commitName": "becc23fb65a5c2b632034b8b2c4c08832d47fd96",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "27/09/13 4:32 AM",
      "commitNameOld": "3caca924bc72fe4a0e5b1ea89adb098cc1eb7874",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 279.03,
      "commitsBetweenForRepo": 1881,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,48 @@\n   public synchronized void seek(long targetPos) throws IOException {\n     if (targetPos \u003c 0) {\n-      throw new IOException(\"Negative Seek offset not supported\");\n+      throw new EOFException(\n+          FSExceptionMessages.NEGATIVE_SEEK);\n     }\n     //there\u0027s some special handling of near-local data\n     //as the seek can be omitted if it is in/adjacent\n     long offset \u003d targetPos - pos;\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Seek to \" + targetPos + \"; current pos \u003d\" + pos\n                 + \"; offset\u003d\"+offset);\n     }\n     if (offset \u003d\u003d 0) {\n       LOG.debug(\"seek is no-op\");\n       return;\n     }\n \n     if (offset \u003c 0) {\n       LOG.debug(\"seek is backwards\");\n     } else if ((rangeOffset + offset \u003c bufferSize)) {\n       //if the seek is in  range of that requested, scan forwards\n       //instead of closing and re-opening a new HTTP connection\n       SwiftUtils.debug(LOG,\n                        \"seek is within current stream\"\n                        + \"; pos\u003d %d ; targetPos\u003d%d; \"\n                        + \"offset\u003d %d ; bufferOffset\u003d%d\",\n                        pos, targetPos, offset, rangeOffset);\n       try {\n         LOG.debug(\"chomping \");\n         chompBytes(offset);\n       } catch (IOException e) {\n         //this is assumed to be recoverable with a seek -or more likely to fail\n         LOG.debug(\"while chomping \",e);\n       }\n       if (targetPos - pos \u003d\u003d 0) {\n         LOG.trace(\"chomping successful\");\n         return;\n       }\n       LOG.trace(\"chomping failed\");\n     } else {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Seek is beyond buffer size of \" + bufferSize);\n       }\n     }\n \n     innerClose(\"seeking to \" + targetPos);\n     fillBuffer(targetPos);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void seek(long targetPos) throws IOException {\n    if (targetPos \u003c 0) {\n      throw new EOFException(\n          FSExceptionMessages.NEGATIVE_SEEK);\n    }\n    //there\u0027s some special handling of near-local data\n    //as the seek can be omitted if it is in/adjacent\n    long offset \u003d targetPos - pos;\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Seek to \" + targetPos + \"; current pos \u003d\" + pos\n                + \"; offset\u003d\"+offset);\n    }\n    if (offset \u003d\u003d 0) {\n      LOG.debug(\"seek is no-op\");\n      return;\n    }\n\n    if (offset \u003c 0) {\n      LOG.debug(\"seek is backwards\");\n    } else if ((rangeOffset + offset \u003c bufferSize)) {\n      //if the seek is in  range of that requested, scan forwards\n      //instead of closing and re-opening a new HTTP connection\n      SwiftUtils.debug(LOG,\n                       \"seek is within current stream\"\n                       + \"; pos\u003d %d ; targetPos\u003d%d; \"\n                       + \"offset\u003d %d ; bufferOffset\u003d%d\",\n                       pos, targetPos, offset, rangeOffset);\n      try {\n        LOG.debug(\"chomping \");\n        chompBytes(offset);\n      } catch (IOException e) {\n        //this is assumed to be recoverable with a seek -or more likely to fail\n        LOG.debug(\"while chomping \",e);\n      }\n      if (targetPos - pos \u003d\u003d 0) {\n        LOG.trace(\"chomping successful\");\n        return;\n      }\n      LOG.trace(\"chomping failed\");\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Seek is beyond buffer size of \" + bufferSize);\n      }\n    }\n\n    innerClose(\"seeking to \" + targetPos);\n    fillBuffer(targetPos);\n  }",
      "path": "hadoop-tools/hadoop-openstack/src/main/java/org/apache/hadoop/fs/swift/snative/SwiftNativeInputStream.java",
      "extendedDetails": {}
    },
    "3caca924bc72fe4a0e5b1ea89adb098cc1eb7874": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-8545. Filesystem Implementation for OpenStack Swift\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1526854 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/09/13 4:32 AM",
      "commitName": "3caca924bc72fe4a0e5b1ea89adb098cc1eb7874",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,47 @@\n+  public synchronized void seek(long targetPos) throws IOException {\n+    if (targetPos \u003c 0) {\n+      throw new IOException(\"Negative Seek offset not supported\");\n+    }\n+    //there\u0027s some special handling of near-local data\n+    //as the seek can be omitted if it is in/adjacent\n+    long offset \u003d targetPos - pos;\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Seek to \" + targetPos + \"; current pos \u003d\" + pos\n+                + \"; offset\u003d\"+offset);\n+    }\n+    if (offset \u003d\u003d 0) {\n+      LOG.debug(\"seek is no-op\");\n+      return;\n+    }\n+\n+    if (offset \u003c 0) {\n+      LOG.debug(\"seek is backwards\");\n+    } else if ((rangeOffset + offset \u003c bufferSize)) {\n+      //if the seek is in  range of that requested, scan forwards\n+      //instead of closing and re-opening a new HTTP connection\n+      SwiftUtils.debug(LOG,\n+                       \"seek is within current stream\"\n+                       + \"; pos\u003d %d ; targetPos\u003d%d; \"\n+                       + \"offset\u003d %d ; bufferOffset\u003d%d\",\n+                       pos, targetPos, offset, rangeOffset);\n+      try {\n+        LOG.debug(\"chomping \");\n+        chompBytes(offset);\n+      } catch (IOException e) {\n+        //this is assumed to be recoverable with a seek -or more likely to fail\n+        LOG.debug(\"while chomping \",e);\n+      }\n+      if (targetPos - pos \u003d\u003d 0) {\n+        LOG.trace(\"chomping successful\");\n+        return;\n+      }\n+      LOG.trace(\"chomping failed\");\n+    } else {\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Seek is beyond buffer size of \" + bufferSize);\n+      }\n+    }\n+\n+    innerClose(\"seeking to \" + targetPos);\n+    fillBuffer(targetPos);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void seek(long targetPos) throws IOException {\n    if (targetPos \u003c 0) {\n      throw new IOException(\"Negative Seek offset not supported\");\n    }\n    //there\u0027s some special handling of near-local data\n    //as the seek can be omitted if it is in/adjacent\n    long offset \u003d targetPos - pos;\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Seek to \" + targetPos + \"; current pos \u003d\" + pos\n                + \"; offset\u003d\"+offset);\n    }\n    if (offset \u003d\u003d 0) {\n      LOG.debug(\"seek is no-op\");\n      return;\n    }\n\n    if (offset \u003c 0) {\n      LOG.debug(\"seek is backwards\");\n    } else if ((rangeOffset + offset \u003c bufferSize)) {\n      //if the seek is in  range of that requested, scan forwards\n      //instead of closing and re-opening a new HTTP connection\n      SwiftUtils.debug(LOG,\n                       \"seek is within current stream\"\n                       + \"; pos\u003d %d ; targetPos\u003d%d; \"\n                       + \"offset\u003d %d ; bufferOffset\u003d%d\",\n                       pos, targetPos, offset, rangeOffset);\n      try {\n        LOG.debug(\"chomping \");\n        chompBytes(offset);\n      } catch (IOException e) {\n        //this is assumed to be recoverable with a seek -or more likely to fail\n        LOG.debug(\"while chomping \",e);\n      }\n      if (targetPos - pos \u003d\u003d 0) {\n        LOG.trace(\"chomping successful\");\n        return;\n      }\n      LOG.trace(\"chomping failed\");\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Seek is beyond buffer size of \" + bufferSize);\n      }\n    }\n\n    innerClose(\"seeking to \" + targetPos);\n    fillBuffer(targetPos);\n  }",
      "path": "hadoop-tools/hadoop-openstack/src/main/java/org/apache/hadoop/fs/swift/snative/SwiftNativeInputStream.java"
    }
  }
}