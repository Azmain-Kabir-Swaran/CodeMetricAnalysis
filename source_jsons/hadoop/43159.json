{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ServiceClient.java",
  "functionName": "loadAppJsonFromLocalFS",
  "functionId": "loadAppJsonFromLocalFS___fileName-String__serviceName-String__lifetime-Long__queue-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
  "functionStartLine": 171,
  "functionEndLine": 219,
  "numCommitsSeen": 61,
  "timeTaken": 6784,
  "changeHistory": [
    "a127f7b0fbde3942ca4329d5463bb8fe421daf7b",
    "ba7ed7b66a48c61086ea837f39ff0f22ffe31eca",
    "ce74e64363abc64561263be70a923ab3e67f043f",
    "37c9b7327d188ccad7fd36b7466a65f68ad0c899",
    "541b64c7985db425c5ce8bd5f71a2d5980809708",
    "40ab068eabe50875449d601471619a4e82fff86d",
    "1888318c89776f0bf354c1b13e3ee169e14ff638"
  ],
  "changeHistoryShort": {
    "a127f7b0fbde3942ca4329d5463bb8fe421daf7b": "Ybodychange",
    "ba7ed7b66a48c61086ea837f39ff0f22ffe31eca": "Ymultichange(Yparameterchange,Ymodifierchange,Yexceptionschange,Ybodychange)",
    "ce74e64363abc64561263be70a923ab3e67f043f": "Ybodychange",
    "37c9b7327d188ccad7fd36b7466a65f68ad0c899": "Ybodychange",
    "541b64c7985db425c5ce8bd5f71a2d5980809708": "Ybodychange",
    "40ab068eabe50875449d601471619a4e82fff86d": "Ymultichange(Yfilerename,Yreturntypechange,Ybodychange)",
    "1888318c89776f0bf354c1b13e3ee169e14ff638": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a127f7b0fbde3942ca4329d5463bb8fe421daf7b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7423. Improve service client loggings. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "a127f7b0fbde3942ca4329d5463bb8fe421daf7b",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n   public Service loadAppJsonFromLocalFS(String fileName, String serviceName,\n       Long lifetime, String queue) throws IOException, YarnException {\n     File file \u003d new File(fileName);\n     if (!file.exists() \u0026\u0026 fileName.equals(file.getName())) {\n       String examplesDirStr \u003d System.getenv(\"YARN_SERVICE_EXAMPLES_DIR\");\n       String[] examplesDirs;\n       if (examplesDirStr \u003d\u003d null) {\n         String yarnHome \u003d System\n             .getenv(ApplicationConstants.Environment.HADOOP_YARN_HOME.key());\n         examplesDirs \u003d new String[]{\n             yarnHome + \"/share/hadoop/yarn/yarn-service-examples\",\n             yarnHome + \"/yarn-service-examples\"\n         };\n       } else {\n         examplesDirs \u003d StringUtils.split(examplesDirStr, \":\");\n       }\n       for (String dir : examplesDirs) {\n         file \u003d new File(MessageFormat.format(\"{0}/{1}/{2}.json\",\n             dir, fileName, fileName));\n         if (file.exists()) {\n           break;\n         }\n         // Then look for secondary location.\n         file \u003d new File(MessageFormat.format(\"{0}/{1}.json\",\n             dir, fileName));\n         if (file.exists()) {\n           break;\n         }\n       }\n     }\n     if (!file.exists()) {\n       throw new YarnException(\"File or example could not be found: \" +\n           fileName);\n     }\n     Path filePath \u003d new Path(file.getAbsolutePath());\n-    LOG.info(\"Loading service definition from: \" + filePath);\n+    LOG.info(\"Loading service definition from local FS: \" + filePath);\n     Service service \u003d jsonSerDeser\n         .load(FileSystem.getLocal(getConfig()), filePath);\n     if (!StringUtils.isEmpty(serviceName)) {\n       service.setName(serviceName);\n     }\n     if (lifetime !\u003d null \u0026\u0026 lifetime \u003e 0) {\n       service.setLifetime(lifetime);\n     }\n     if (!StringUtils.isEmpty(queue)) {\n       service.setQueue(queue);\n     }\n     return service;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Service loadAppJsonFromLocalFS(String fileName, String serviceName,\n      Long lifetime, String queue) throws IOException, YarnException {\n    File file \u003d new File(fileName);\n    if (!file.exists() \u0026\u0026 fileName.equals(file.getName())) {\n      String examplesDirStr \u003d System.getenv(\"YARN_SERVICE_EXAMPLES_DIR\");\n      String[] examplesDirs;\n      if (examplesDirStr \u003d\u003d null) {\n        String yarnHome \u003d System\n            .getenv(ApplicationConstants.Environment.HADOOP_YARN_HOME.key());\n        examplesDirs \u003d new String[]{\n            yarnHome + \"/share/hadoop/yarn/yarn-service-examples\",\n            yarnHome + \"/yarn-service-examples\"\n        };\n      } else {\n        examplesDirs \u003d StringUtils.split(examplesDirStr, \":\");\n      }\n      for (String dir : examplesDirs) {\n        file \u003d new File(MessageFormat.format(\"{0}/{1}/{2}.json\",\n            dir, fileName, fileName));\n        if (file.exists()) {\n          break;\n        }\n        // Then look for secondary location.\n        file \u003d new File(MessageFormat.format(\"{0}/{1}.json\",\n            dir, fileName));\n        if (file.exists()) {\n          break;\n        }\n      }\n    }\n    if (!file.exists()) {\n      throw new YarnException(\"File or example could not be found: \" +\n          fileName);\n    }\n    Path filePath \u003d new Path(file.getAbsolutePath());\n    LOG.info(\"Loading service definition from local FS: \" + filePath);\n    Service service \u003d jsonSerDeser\n        .load(FileSystem.getLocal(getConfig()), filePath);\n    if (!StringUtils.isEmpty(serviceName)) {\n      service.setName(serviceName);\n    }\n    if (lifetime !\u003d null \u0026\u0026 lifetime \u003e 0) {\n      service.setLifetime(lifetime);\n    }\n    if (!StringUtils.isEmpty(queue)) {\n      service.setQueue(queue);\n    }\n    return service;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "ba7ed7b66a48c61086ea837f39ff0f22ffe31eca": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-7384. Remove apiserver cmd and merge service cmd into application cmd. Contributed by Billie Rinaldi\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "ba7ed7b66a48c61086ea837f39ff0f22ffe31eca",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7384. Remove apiserver cmd and merge service cmd into application cmd. Contributed by Billie Rinaldi\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "ba7ed7b66a48c61086ea837f39ff0f22ffe31eca",
          "commitAuthor": "Jian He",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "68acd88dcbfe03a0134c60b5398dfaa31ad2b786",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,49 @@\n-  private Service loadAppJsonFromLocalFS(\n-      AbstractClusterBuildingActionArgs args) throws IOException {\n-    File file \u003d args.getFile();\n+  public Service loadAppJsonFromLocalFS(String fileName, String serviceName,\n+      Long lifetime, String queue) throws IOException, YarnException {\n+    File file \u003d new File(fileName);\n+    if (!file.exists() \u0026\u0026 fileName.equals(file.getName())) {\n+      String examplesDirStr \u003d System.getenv(\"YARN_SERVICE_EXAMPLES_DIR\");\n+      String[] examplesDirs;\n+      if (examplesDirStr \u003d\u003d null) {\n+        String yarnHome \u003d System\n+            .getenv(ApplicationConstants.Environment.HADOOP_YARN_HOME.key());\n+        examplesDirs \u003d new String[]{\n+            yarnHome + \"/share/hadoop/yarn/yarn-service-examples\",\n+            yarnHome + \"/yarn-service-examples\"\n+        };\n+      } else {\n+        examplesDirs \u003d StringUtils.split(examplesDirStr, \":\");\n+      }\n+      for (String dir : examplesDirs) {\n+        file \u003d new File(MessageFormat.format(\"{0}/{1}/{2}.json\",\n+            dir, fileName, fileName));\n+        if (file.exists()) {\n+          break;\n+        }\n+        // Then look for secondary location.\n+        file \u003d new File(MessageFormat.format(\"{0}/{1}.json\",\n+            dir, fileName));\n+        if (file.exists()) {\n+          break;\n+        }\n+      }\n+    }\n+    if (!file.exists()) {\n+      throw new YarnException(\"File or example could not be found: \" +\n+          fileName);\n+    }\n     Path filePath \u003d new Path(file.getAbsolutePath());\n     LOG.info(\"Loading service definition from: \" + filePath);\n     Service service \u003d jsonSerDeser\n         .load(FileSystem.getLocal(getConfig()), filePath);\n-    if (args.lifetime \u003e 0) {\n-      service.setLifetime(args.lifetime);\n+    if (!StringUtils.isEmpty(serviceName)) {\n+      service.setName(serviceName);\n     }\n-    if (!StringUtils.isEmpty(args.getServiceName())) {\n-      service.setName(args.getServiceName());\n+    if (lifetime !\u003d null \u0026\u0026 lifetime \u003e 0) {\n+      service.setLifetime(lifetime);\n     }\n-    if (!StringUtils.isEmpty(args.queue)) {\n-      service.setQueue(args.queue);\n+    if (!StringUtils.isEmpty(queue)) {\n+      service.setQueue(queue);\n     }\n     return service;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Service loadAppJsonFromLocalFS(String fileName, String serviceName,\n      Long lifetime, String queue) throws IOException, YarnException {\n    File file \u003d new File(fileName);\n    if (!file.exists() \u0026\u0026 fileName.equals(file.getName())) {\n      String examplesDirStr \u003d System.getenv(\"YARN_SERVICE_EXAMPLES_DIR\");\n      String[] examplesDirs;\n      if (examplesDirStr \u003d\u003d null) {\n        String yarnHome \u003d System\n            .getenv(ApplicationConstants.Environment.HADOOP_YARN_HOME.key());\n        examplesDirs \u003d new String[]{\n            yarnHome + \"/share/hadoop/yarn/yarn-service-examples\",\n            yarnHome + \"/yarn-service-examples\"\n        };\n      } else {\n        examplesDirs \u003d StringUtils.split(examplesDirStr, \":\");\n      }\n      for (String dir : examplesDirs) {\n        file \u003d new File(MessageFormat.format(\"{0}/{1}/{2}.json\",\n            dir, fileName, fileName));\n        if (file.exists()) {\n          break;\n        }\n        // Then look for secondary location.\n        file \u003d new File(MessageFormat.format(\"{0}/{1}.json\",\n            dir, fileName));\n        if (file.exists()) {\n          break;\n        }\n      }\n    }\n    if (!file.exists()) {\n      throw new YarnException(\"File or example could not be found: \" +\n          fileName);\n    }\n    Path filePath \u003d new Path(file.getAbsolutePath());\n    LOG.info(\"Loading service definition from: \" + filePath);\n    Service service \u003d jsonSerDeser\n        .load(FileSystem.getLocal(getConfig()), filePath);\n    if (!StringUtils.isEmpty(serviceName)) {\n      service.setName(serviceName);\n    }\n    if (lifetime !\u003d null \u0026\u0026 lifetime \u003e 0) {\n      service.setLifetime(lifetime);\n    }\n    if (!StringUtils.isEmpty(queue)) {\n      service.setQueue(queue);\n    }\n    return service;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {
            "oldValue": "[args-AbstractClusterBuildingActionArgs]",
            "newValue": "[fileName-String, serviceName-String, lifetime-Long, queue-String]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-7384. Remove apiserver cmd and merge service cmd into application cmd. Contributed by Billie Rinaldi\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "ba7ed7b66a48c61086ea837f39ff0f22ffe31eca",
          "commitAuthor": "Jian He",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "68acd88dcbfe03a0134c60b5398dfaa31ad2b786",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,49 @@\n-  private Service loadAppJsonFromLocalFS(\n-      AbstractClusterBuildingActionArgs args) throws IOException {\n-    File file \u003d args.getFile();\n+  public Service loadAppJsonFromLocalFS(String fileName, String serviceName,\n+      Long lifetime, String queue) throws IOException, YarnException {\n+    File file \u003d new File(fileName);\n+    if (!file.exists() \u0026\u0026 fileName.equals(file.getName())) {\n+      String examplesDirStr \u003d System.getenv(\"YARN_SERVICE_EXAMPLES_DIR\");\n+      String[] examplesDirs;\n+      if (examplesDirStr \u003d\u003d null) {\n+        String yarnHome \u003d System\n+            .getenv(ApplicationConstants.Environment.HADOOP_YARN_HOME.key());\n+        examplesDirs \u003d new String[]{\n+            yarnHome + \"/share/hadoop/yarn/yarn-service-examples\",\n+            yarnHome + \"/yarn-service-examples\"\n+        };\n+      } else {\n+        examplesDirs \u003d StringUtils.split(examplesDirStr, \":\");\n+      }\n+      for (String dir : examplesDirs) {\n+        file \u003d new File(MessageFormat.format(\"{0}/{1}/{2}.json\",\n+            dir, fileName, fileName));\n+        if (file.exists()) {\n+          break;\n+        }\n+        // Then look for secondary location.\n+        file \u003d new File(MessageFormat.format(\"{0}/{1}.json\",\n+            dir, fileName));\n+        if (file.exists()) {\n+          break;\n+        }\n+      }\n+    }\n+    if (!file.exists()) {\n+      throw new YarnException(\"File or example could not be found: \" +\n+          fileName);\n+    }\n     Path filePath \u003d new Path(file.getAbsolutePath());\n     LOG.info(\"Loading service definition from: \" + filePath);\n     Service service \u003d jsonSerDeser\n         .load(FileSystem.getLocal(getConfig()), filePath);\n-    if (args.lifetime \u003e 0) {\n-      service.setLifetime(args.lifetime);\n+    if (!StringUtils.isEmpty(serviceName)) {\n+      service.setName(serviceName);\n     }\n-    if (!StringUtils.isEmpty(args.getServiceName())) {\n-      service.setName(args.getServiceName());\n+    if (lifetime !\u003d null \u0026\u0026 lifetime \u003e 0) {\n+      service.setLifetime(lifetime);\n     }\n-    if (!StringUtils.isEmpty(args.queue)) {\n-      service.setQueue(args.queue);\n+    if (!StringUtils.isEmpty(queue)) {\n+      service.setQueue(queue);\n     }\n     return service;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Service loadAppJsonFromLocalFS(String fileName, String serviceName,\n      Long lifetime, String queue) throws IOException, YarnException {\n    File file \u003d new File(fileName);\n    if (!file.exists() \u0026\u0026 fileName.equals(file.getName())) {\n      String examplesDirStr \u003d System.getenv(\"YARN_SERVICE_EXAMPLES_DIR\");\n      String[] examplesDirs;\n      if (examplesDirStr \u003d\u003d null) {\n        String yarnHome \u003d System\n            .getenv(ApplicationConstants.Environment.HADOOP_YARN_HOME.key());\n        examplesDirs \u003d new String[]{\n            yarnHome + \"/share/hadoop/yarn/yarn-service-examples\",\n            yarnHome + \"/yarn-service-examples\"\n        };\n      } else {\n        examplesDirs \u003d StringUtils.split(examplesDirStr, \":\");\n      }\n      for (String dir : examplesDirs) {\n        file \u003d new File(MessageFormat.format(\"{0}/{1}/{2}.json\",\n            dir, fileName, fileName));\n        if (file.exists()) {\n          break;\n        }\n        // Then look for secondary location.\n        file \u003d new File(MessageFormat.format(\"{0}/{1}.json\",\n            dir, fileName));\n        if (file.exists()) {\n          break;\n        }\n      }\n    }\n    if (!file.exists()) {\n      throw new YarnException(\"File or example could not be found: \" +\n          fileName);\n    }\n    Path filePath \u003d new Path(file.getAbsolutePath());\n    LOG.info(\"Loading service definition from: \" + filePath);\n    Service service \u003d jsonSerDeser\n        .load(FileSystem.getLocal(getConfig()), filePath);\n    if (!StringUtils.isEmpty(serviceName)) {\n      service.setName(serviceName);\n    }\n    if (lifetime !\u003d null \u0026\u0026 lifetime \u003e 0) {\n      service.setLifetime(lifetime);\n    }\n    if (!StringUtils.isEmpty(queue)) {\n      service.setQueue(queue);\n    }\n    return service;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-7384. Remove apiserver cmd and merge service cmd into application cmd. Contributed by Billie Rinaldi\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "ba7ed7b66a48c61086ea837f39ff0f22ffe31eca",
          "commitAuthor": "Jian He",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "68acd88dcbfe03a0134c60b5398dfaa31ad2b786",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,49 @@\n-  private Service loadAppJsonFromLocalFS(\n-      AbstractClusterBuildingActionArgs args) throws IOException {\n-    File file \u003d args.getFile();\n+  public Service loadAppJsonFromLocalFS(String fileName, String serviceName,\n+      Long lifetime, String queue) throws IOException, YarnException {\n+    File file \u003d new File(fileName);\n+    if (!file.exists() \u0026\u0026 fileName.equals(file.getName())) {\n+      String examplesDirStr \u003d System.getenv(\"YARN_SERVICE_EXAMPLES_DIR\");\n+      String[] examplesDirs;\n+      if (examplesDirStr \u003d\u003d null) {\n+        String yarnHome \u003d System\n+            .getenv(ApplicationConstants.Environment.HADOOP_YARN_HOME.key());\n+        examplesDirs \u003d new String[]{\n+            yarnHome + \"/share/hadoop/yarn/yarn-service-examples\",\n+            yarnHome + \"/yarn-service-examples\"\n+        };\n+      } else {\n+        examplesDirs \u003d StringUtils.split(examplesDirStr, \":\");\n+      }\n+      for (String dir : examplesDirs) {\n+        file \u003d new File(MessageFormat.format(\"{0}/{1}/{2}.json\",\n+            dir, fileName, fileName));\n+        if (file.exists()) {\n+          break;\n+        }\n+        // Then look for secondary location.\n+        file \u003d new File(MessageFormat.format(\"{0}/{1}.json\",\n+            dir, fileName));\n+        if (file.exists()) {\n+          break;\n+        }\n+      }\n+    }\n+    if (!file.exists()) {\n+      throw new YarnException(\"File or example could not be found: \" +\n+          fileName);\n+    }\n     Path filePath \u003d new Path(file.getAbsolutePath());\n     LOG.info(\"Loading service definition from: \" + filePath);\n     Service service \u003d jsonSerDeser\n         .load(FileSystem.getLocal(getConfig()), filePath);\n-    if (args.lifetime \u003e 0) {\n-      service.setLifetime(args.lifetime);\n+    if (!StringUtils.isEmpty(serviceName)) {\n+      service.setName(serviceName);\n     }\n-    if (!StringUtils.isEmpty(args.getServiceName())) {\n-      service.setName(args.getServiceName());\n+    if (lifetime !\u003d null \u0026\u0026 lifetime \u003e 0) {\n+      service.setLifetime(lifetime);\n     }\n-    if (!StringUtils.isEmpty(args.queue)) {\n-      service.setQueue(args.queue);\n+    if (!StringUtils.isEmpty(queue)) {\n+      service.setQueue(queue);\n     }\n     return service;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Service loadAppJsonFromLocalFS(String fileName, String serviceName,\n      Long lifetime, String queue) throws IOException, YarnException {\n    File file \u003d new File(fileName);\n    if (!file.exists() \u0026\u0026 fileName.equals(file.getName())) {\n      String examplesDirStr \u003d System.getenv(\"YARN_SERVICE_EXAMPLES_DIR\");\n      String[] examplesDirs;\n      if (examplesDirStr \u003d\u003d null) {\n        String yarnHome \u003d System\n            .getenv(ApplicationConstants.Environment.HADOOP_YARN_HOME.key());\n        examplesDirs \u003d new String[]{\n            yarnHome + \"/share/hadoop/yarn/yarn-service-examples\",\n            yarnHome + \"/yarn-service-examples\"\n        };\n      } else {\n        examplesDirs \u003d StringUtils.split(examplesDirStr, \":\");\n      }\n      for (String dir : examplesDirs) {\n        file \u003d new File(MessageFormat.format(\"{0}/{1}/{2}.json\",\n            dir, fileName, fileName));\n        if (file.exists()) {\n          break;\n        }\n        // Then look for secondary location.\n        file \u003d new File(MessageFormat.format(\"{0}/{1}.json\",\n            dir, fileName));\n        if (file.exists()) {\n          break;\n        }\n      }\n    }\n    if (!file.exists()) {\n      throw new YarnException(\"File or example could not be found: \" +\n          fileName);\n    }\n    Path filePath \u003d new Path(file.getAbsolutePath());\n    LOG.info(\"Loading service definition from: \" + filePath);\n    Service service \u003d jsonSerDeser\n        .load(FileSystem.getLocal(getConfig()), filePath);\n    if (!StringUtils.isEmpty(serviceName)) {\n      service.setName(serviceName);\n    }\n    if (lifetime !\u003d null \u0026\u0026 lifetime \u003e 0) {\n      service.setLifetime(lifetime);\n    }\n    if (!StringUtils.isEmpty(queue)) {\n      service.setQueue(queue);\n    }\n    return service;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {
            "oldValue": "[IOException]",
            "newValue": "[IOException, YarnException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7384. Remove apiserver cmd and merge service cmd into application cmd. Contributed by Billie Rinaldi\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "ba7ed7b66a48c61086ea837f39ff0f22ffe31eca",
          "commitAuthor": "Jian He",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "68acd88dcbfe03a0134c60b5398dfaa31ad2b786",
          "commitAuthorOld": "Billie Rinaldi",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,49 @@\n-  private Service loadAppJsonFromLocalFS(\n-      AbstractClusterBuildingActionArgs args) throws IOException {\n-    File file \u003d args.getFile();\n+  public Service loadAppJsonFromLocalFS(String fileName, String serviceName,\n+      Long lifetime, String queue) throws IOException, YarnException {\n+    File file \u003d new File(fileName);\n+    if (!file.exists() \u0026\u0026 fileName.equals(file.getName())) {\n+      String examplesDirStr \u003d System.getenv(\"YARN_SERVICE_EXAMPLES_DIR\");\n+      String[] examplesDirs;\n+      if (examplesDirStr \u003d\u003d null) {\n+        String yarnHome \u003d System\n+            .getenv(ApplicationConstants.Environment.HADOOP_YARN_HOME.key());\n+        examplesDirs \u003d new String[]{\n+            yarnHome + \"/share/hadoop/yarn/yarn-service-examples\",\n+            yarnHome + \"/yarn-service-examples\"\n+        };\n+      } else {\n+        examplesDirs \u003d StringUtils.split(examplesDirStr, \":\");\n+      }\n+      for (String dir : examplesDirs) {\n+        file \u003d new File(MessageFormat.format(\"{0}/{1}/{2}.json\",\n+            dir, fileName, fileName));\n+        if (file.exists()) {\n+          break;\n+        }\n+        // Then look for secondary location.\n+        file \u003d new File(MessageFormat.format(\"{0}/{1}.json\",\n+            dir, fileName));\n+        if (file.exists()) {\n+          break;\n+        }\n+      }\n+    }\n+    if (!file.exists()) {\n+      throw new YarnException(\"File or example could not be found: \" +\n+          fileName);\n+    }\n     Path filePath \u003d new Path(file.getAbsolutePath());\n     LOG.info(\"Loading service definition from: \" + filePath);\n     Service service \u003d jsonSerDeser\n         .load(FileSystem.getLocal(getConfig()), filePath);\n-    if (args.lifetime \u003e 0) {\n-      service.setLifetime(args.lifetime);\n+    if (!StringUtils.isEmpty(serviceName)) {\n+      service.setName(serviceName);\n     }\n-    if (!StringUtils.isEmpty(args.getServiceName())) {\n-      service.setName(args.getServiceName());\n+    if (lifetime !\u003d null \u0026\u0026 lifetime \u003e 0) {\n+      service.setLifetime(lifetime);\n     }\n-    if (!StringUtils.isEmpty(args.queue)) {\n-      service.setQueue(args.queue);\n+    if (!StringUtils.isEmpty(queue)) {\n+      service.setQueue(queue);\n     }\n     return service;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Service loadAppJsonFromLocalFS(String fileName, String serviceName,\n      Long lifetime, String queue) throws IOException, YarnException {\n    File file \u003d new File(fileName);\n    if (!file.exists() \u0026\u0026 fileName.equals(file.getName())) {\n      String examplesDirStr \u003d System.getenv(\"YARN_SERVICE_EXAMPLES_DIR\");\n      String[] examplesDirs;\n      if (examplesDirStr \u003d\u003d null) {\n        String yarnHome \u003d System\n            .getenv(ApplicationConstants.Environment.HADOOP_YARN_HOME.key());\n        examplesDirs \u003d new String[]{\n            yarnHome + \"/share/hadoop/yarn/yarn-service-examples\",\n            yarnHome + \"/yarn-service-examples\"\n        };\n      } else {\n        examplesDirs \u003d StringUtils.split(examplesDirStr, \":\");\n      }\n      for (String dir : examplesDirs) {\n        file \u003d new File(MessageFormat.format(\"{0}/{1}/{2}.json\",\n            dir, fileName, fileName));\n        if (file.exists()) {\n          break;\n        }\n        // Then look for secondary location.\n        file \u003d new File(MessageFormat.format(\"{0}/{1}.json\",\n            dir, fileName));\n        if (file.exists()) {\n          break;\n        }\n      }\n    }\n    if (!file.exists()) {\n      throw new YarnException(\"File or example could not be found: \" +\n          fileName);\n    }\n    Path filePath \u003d new Path(file.getAbsolutePath());\n    LOG.info(\"Loading service definition from: \" + filePath);\n    Service service \u003d jsonSerDeser\n        .load(FileSystem.getLocal(getConfig()), filePath);\n    if (!StringUtils.isEmpty(serviceName)) {\n      service.setName(serviceName);\n    }\n    if (lifetime !\u003d null \u0026\u0026 lifetime \u003e 0) {\n      service.setLifetime(lifetime);\n    }\n    if (!StringUtils.isEmpty(queue)) {\n      service.setQueue(queue);\n    }\n    return service;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {}
        }
      ]
    },
    "ce74e64363abc64561263be70a923ab3e67f043f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7210. Some NPE fixes in Registry DNS. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "ce74e64363abc64561263be70a923ab3e67f043f",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "37c9b7327d188ccad7fd36b7466a65f68ad0c899",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,18 @@\n   private Service loadAppJsonFromLocalFS(\n       AbstractClusterBuildingActionArgs args) throws IOException {\n     File file \u003d args.getFile();\n     Path filePath \u003d new Path(file.getAbsolutePath());\n     LOG.info(\"Loading service definition from: \" + filePath);\n     Service service \u003d jsonSerDeser\n         .load(FileSystem.getLocal(getConfig()), filePath);\n     if (args.lifetime \u003e 0) {\n       service.setLifetime(args.lifetime);\n     }\n     if (!StringUtils.isEmpty(args.getServiceName())) {\n       service.setName(args.getServiceName());\n     }\n+    if (!StringUtils.isEmpty(args.queue)) {\n+      service.setQueue(args.queue);\n+    }\n     return service;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Service loadAppJsonFromLocalFS(\n      AbstractClusterBuildingActionArgs args) throws IOException {\n    File file \u003d args.getFile();\n    Path filePath \u003d new Path(file.getAbsolutePath());\n    LOG.info(\"Loading service definition from: \" + filePath);\n    Service service \u003d jsonSerDeser\n        .load(FileSystem.getLocal(getConfig()), filePath);\n    if (args.lifetime \u003e 0) {\n      service.setLifetime(args.lifetime);\n    }\n    if (!StringUtils.isEmpty(args.getServiceName())) {\n      service.setName(args.getServiceName());\n    }\n    if (!StringUtils.isEmpty(args.queue)) {\n      service.setQueue(args.queue);\n    }\n    return service;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "37c9b7327d188ccad7fd36b7466a65f68ad0c899": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7186. Add examples in yarn-service. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "37c9b7327d188ccad7fd36b7466a65f68ad0c899",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "541b64c7985db425c5ce8bd5f71a2d5980809708",
      "commitAuthorOld": "Gour Saha",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,12 +1,15 @@\n   private Service loadAppJsonFromLocalFS(\n       AbstractClusterBuildingActionArgs args) throws IOException {\n     File file \u003d args.getFile();\n     Path filePath \u003d new Path(file.getAbsolutePath());\n-    LOG.info(\"Loading app json from: \" + filePath);\n+    LOG.info(\"Loading service definition from: \" + filePath);\n     Service service \u003d jsonSerDeser\n         .load(FileSystem.getLocal(getConfig()), filePath);\n     if (args.lifetime \u003e 0) {\n       service.setLifetime(args.lifetime);\n     }\n+    if (!StringUtils.isEmpty(args.getServiceName())) {\n+      service.setName(args.getServiceName());\n+    }\n     return service;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Service loadAppJsonFromLocalFS(\n      AbstractClusterBuildingActionArgs args) throws IOException {\n    File file \u003d args.getFile();\n    Path filePath \u003d new Path(file.getAbsolutePath());\n    LOG.info(\"Loading service definition from: \" + filePath);\n    Service service \u003d jsonSerDeser\n        .load(FileSystem.getLocal(getConfig()), filePath);\n    if (args.lifetime \u003e 0) {\n      service.setLifetime(args.lifetime);\n    }\n    if (!StringUtils.isEmpty(args.getServiceName())) {\n      service.setName(args.getServiceName());\n    }\n    return service;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "541b64c7985db425c5ce8bd5f71a2d5980809708": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7165. Miscellaneous fixes in yarn-native-services. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "541b64c7985db425c5ce8bd5f71a2d5980809708",
      "commitAuthor": "Gour Saha",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,12 @@\n   private Service loadAppJsonFromLocalFS(\n       AbstractClusterBuildingActionArgs args) throws IOException {\n-    File file \u003d args.getAppDef();\n+    File file \u003d args.getFile();\n     Path filePath \u003d new Path(file.getAbsolutePath());\n     LOG.info(\"Loading app json from: \" + filePath);\n     Service service \u003d jsonSerDeser\n         .load(FileSystem.getLocal(getConfig()), filePath);\n     if (args.lifetime \u003e 0) {\n       service.setLifetime(args.lifetime);\n     }\n-    service.setName(args.getClusterName());\n     return service;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Service loadAppJsonFromLocalFS(\n      AbstractClusterBuildingActionArgs args) throws IOException {\n    File file \u003d args.getFile();\n    Path filePath \u003d new Path(file.getAbsolutePath());\n    LOG.info(\"Loading app json from: \" + filePath);\n    Service service \u003d jsonSerDeser\n        .load(FileSystem.getLocal(getConfig()), filePath);\n    if (args.lifetime \u003e 0) {\n      service.setLifetime(args.lifetime);\n    }\n    return service;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "40ab068eabe50875449d601471619a4e82fff86d": {
      "type": "Ymultichange(Yfilerename,Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,13 @@\n-  private Application loadAppJsonFromLocalFS(\n+  private Service loadAppJsonFromLocalFS(\n       AbstractClusterBuildingActionArgs args) throws IOException {\n     File file \u003d args.getAppDef();\n     Path filePath \u003d new Path(file.getAbsolutePath());\n     LOG.info(\"Loading app json from: \" + filePath);\n-    Application application \u003d ServiceApiUtil.jsonSerDeser\n+    Service service \u003d jsonSerDeser\n         .load(FileSystem.getLocal(getConfig()), filePath);\n     if (args.lifetime \u003e 0) {\n-      application.setLifetime(args.lifetime);\n+      service.setLifetime(args.lifetime);\n     }\n-    application.setName(args.getClusterName());\n-    return application;\n+    service.setName(args.getClusterName());\n+    return service;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Service loadAppJsonFromLocalFS(\n      AbstractClusterBuildingActionArgs args) throws IOException {\n    File file \u003d args.getAppDef();\n    Path filePath \u003d new Path(file.getAbsolutePath());\n    LOG.info(\"Loading app json from: \" + filePath);\n    Service service \u003d jsonSerDeser\n        .load(FileSystem.getLocal(getConfig()), filePath);\n    if (args.lifetime \u003e 0) {\n      service.setLifetime(args.lifetime);\n    }\n    service.setName(args.getClusterName());\n    return service;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,13 @@\n-  private Application loadAppJsonFromLocalFS(\n+  private Service loadAppJsonFromLocalFS(\n       AbstractClusterBuildingActionArgs args) throws IOException {\n     File file \u003d args.getAppDef();\n     Path filePath \u003d new Path(file.getAbsolutePath());\n     LOG.info(\"Loading app json from: \" + filePath);\n-    Application application \u003d ServiceApiUtil.jsonSerDeser\n+    Service service \u003d jsonSerDeser\n         .load(FileSystem.getLocal(getConfig()), filePath);\n     if (args.lifetime \u003e 0) {\n-      application.setLifetime(args.lifetime);\n+      service.setLifetime(args.lifetime);\n     }\n-    application.setName(args.getClusterName());\n-    return application;\n+    service.setName(args.getClusterName());\n+    return service;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Service loadAppJsonFromLocalFS(\n      AbstractClusterBuildingActionArgs args) throws IOException {\n    File file \u003d args.getAppDef();\n    Path filePath \u003d new Path(file.getAbsolutePath());\n    LOG.info(\"Loading app json from: \" + filePath);\n    Service service \u003d jsonSerDeser\n        .load(FileSystem.getLocal(getConfig()), filePath);\n    if (args.lifetime \u003e 0) {\n      service.setLifetime(args.lifetime);\n    }\n    service.setName(args.getClusterName());\n    return service;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {
            "oldValue": "Application",
            "newValue": "Service"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,13 @@\n-  private Application loadAppJsonFromLocalFS(\n+  private Service loadAppJsonFromLocalFS(\n       AbstractClusterBuildingActionArgs args) throws IOException {\n     File file \u003d args.getAppDef();\n     Path filePath \u003d new Path(file.getAbsolutePath());\n     LOG.info(\"Loading app json from: \" + filePath);\n-    Application application \u003d ServiceApiUtil.jsonSerDeser\n+    Service service \u003d jsonSerDeser\n         .load(FileSystem.getLocal(getConfig()), filePath);\n     if (args.lifetime \u003e 0) {\n-      application.setLifetime(args.lifetime);\n+      service.setLifetime(args.lifetime);\n     }\n-    application.setName(args.getClusterName());\n-    return application;\n+    service.setName(args.getClusterName());\n+    return service;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Service loadAppJsonFromLocalFS(\n      AbstractClusterBuildingActionArgs args) throws IOException {\n    File file \u003d args.getAppDef();\n    Path filePath \u003d new Path(file.getAbsolutePath());\n    LOG.info(\"Loading app json from: \" + filePath);\n    Service service \u003d jsonSerDeser\n        .load(FileSystem.getLocal(getConfig()), filePath);\n    if (args.lifetime \u003e 0) {\n      service.setLifetime(args.lifetime);\n    }\n    service.setName(args.getClusterName());\n    return service;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {}
        }
      ]
    },
    "1888318c89776f0bf354c1b13e3ee169e14ff638": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
      "commitAuthor": "Billie Rinaldi",
      "diff": "@@ -0,0 +1,13 @@\n+  private Application loadAppJsonFromLocalFS(\n+      AbstractClusterBuildingActionArgs args) throws IOException {\n+    File file \u003d args.getAppDef();\n+    Path filePath \u003d new Path(file.getAbsolutePath());\n+    LOG.info(\"Loading app json from: \" + filePath);\n+    Application application \u003d ServiceApiUtil.jsonSerDeser\n+        .load(FileSystem.getLocal(getConfig()), filePath);\n+    if (args.lifetime \u003e 0) {\n+      application.setLifetime(args.lifetime);\n+    }\n+    application.setName(args.getClusterName());\n+    return application;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Application loadAppJsonFromLocalFS(\n      AbstractClusterBuildingActionArgs args) throws IOException {\n    File file \u003d args.getAppDef();\n    Path filePath \u003d new Path(file.getAbsolutePath());\n    LOG.info(\"Loading app json from: \" + filePath);\n    Application application \u003d ServiceApiUtil.jsonSerDeser\n        .load(FileSystem.getLocal(getConfig()), filePath);\n    if (args.lifetime \u003e 0) {\n      application.setLifetime(args.lifetime);\n    }\n    application.setName(args.getClusterName());\n    return application;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java"
    }
  }
}