{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AggregatedLogDeletionService.java",
  "functionName": "deleteAppDirLogs",
  "functionId": "deleteAppDirLogs___cutoffMillis-long__fs-FileSystem__rmClient-ApplicationClientProtocol__appDir-FileStatus",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/AggregatedLogDeletionService.java",
  "functionStartLine": 124,
  "functionEndLine": 165,
  "numCommitsSeen": 14,
  "timeTaken": 1786,
  "changeHistory": [
    "5cfaee2e6db8b2ac55708de0968ff5539ee3bd76"
  ],
  "changeHistoryShort": {
    "5cfaee2e6db8b2ac55708de0968ff5539ee3bd76": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5cfaee2e6db8b2ac55708de0968ff5539ee3bd76": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7495. Improve robustness of the AggregatedLogDeletionService. Contributed by Jonathan Eagles\n",
      "commitDate": "30/11/17 10:39 AM",
      "commitName": "5cfaee2e6db8b2ac55708de0968ff5539ee3bd76",
      "commitAuthor": "Jason Lowe",
      "diff": "@@ -0,0 +1,42 @@\n+    private static void deleteAppDirLogs(long cutoffMillis, FileSystem fs,\n+                                         ApplicationClientProtocol rmClient,\n+                                         FileStatus appDir) {\n+      try {\n+        if (appDir.isDirectory() \u0026\u0026\n+            appDir.getModificationTime() \u003c cutoffMillis) {\n+          ApplicationId appId \u003d ApplicationId.fromString(\n+              appDir.getPath().getName());\n+          boolean appTerminated \u003d isApplicationTerminated(appId, rmClient);\n+          if (!appTerminated) {\n+            // Application is still running\n+            FileStatus[] logFiles;\n+            try {\n+              logFiles \u003d fs.listStatus(appDir.getPath());\n+            } catch (IOException e) {\n+              logException(\"Error reading the contents of \"\n+                  + appDir.getPath(), e);\n+              return;\n+            }\n+            for (FileStatus node : logFiles) {\n+              if (node.getModificationTime() \u003c cutoffMillis) {\n+                try {\n+                  fs.delete(node.getPath(), true);\n+                } catch (IOException ex) {\n+                  logException(\"Could not delete \" + appDir.getPath(), ex);\n+                }\n+              }\n+            }\n+          } else if (shouldDeleteLogDir(appDir, cutoffMillis, fs)) {\n+            // Application is no longer running\n+            try {\n+              LOG.info(\"Deleting aggregated logs in \" + appDir.getPath());\n+              fs.delete(appDir.getPath(), true);\n+            } catch (IOException e) {\n+              logException(\"Could not delete \" + appDir.getPath(), e);\n+            }\n+          }\n+        }\n+      } catch (Exception e) {\n+        logException(\"Could not delete \" + appDir.getPath(), e);\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private static void deleteAppDirLogs(long cutoffMillis, FileSystem fs,\n                                         ApplicationClientProtocol rmClient,\n                                         FileStatus appDir) {\n      try {\n        if (appDir.isDirectory() \u0026\u0026\n            appDir.getModificationTime() \u003c cutoffMillis) {\n          ApplicationId appId \u003d ApplicationId.fromString(\n              appDir.getPath().getName());\n          boolean appTerminated \u003d isApplicationTerminated(appId, rmClient);\n          if (!appTerminated) {\n            // Application is still running\n            FileStatus[] logFiles;\n            try {\n              logFiles \u003d fs.listStatus(appDir.getPath());\n            } catch (IOException e) {\n              logException(\"Error reading the contents of \"\n                  + appDir.getPath(), e);\n              return;\n            }\n            for (FileStatus node : logFiles) {\n              if (node.getModificationTime() \u003c cutoffMillis) {\n                try {\n                  fs.delete(node.getPath(), true);\n                } catch (IOException ex) {\n                  logException(\"Could not delete \" + appDir.getPath(), ex);\n                }\n              }\n            }\n          } else if (shouldDeleteLogDir(appDir, cutoffMillis, fs)) {\n            // Application is no longer running\n            try {\n              LOG.info(\"Deleting aggregated logs in \" + appDir.getPath());\n              fs.delete(appDir.getPath(), true);\n            } catch (IOException e) {\n              logException(\"Could not delete \" + appDir.getPath(), e);\n            }\n          }\n        }\n      } catch (Exception e) {\n        logException(\"Could not delete \" + appDir.getPath(), e);\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/AggregatedLogDeletionService.java"
    }
  }
}