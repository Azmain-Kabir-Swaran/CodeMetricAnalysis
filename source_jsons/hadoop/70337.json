{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NativeAzureFileSystem.java",
  "functionName": "initialize",
  "functionId": "initialize___uri-URI__conf-Configuration",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
  "functionStartLine": 1356,
  "functionEndLine": 1429,
  "numCommitsSeen": 66,
  "timeTaken": 6434,
  "changeHistory": [
    "9a8edb0aeddd7787b2654f6e2a8465c325e048a2",
    "45d9568aaaf532a6da11bd7c1844ff81bf66bab1",
    "572cdb54632d8a29c4d9900f9e988ada8e3fe2ec",
    "38996fdcf0987d1da00ce46f8284d8fcdce57329",
    "56ab02eed9b61e1c80605104dfc4c87fc6abac96",
    "8e15e240597f821968e14893eabfea39815de207",
    "28daaf0eb206d723d2baf0f9d91e43d98bb2fd26",
    "686823529be09bea2a6cecb3503ef722017475bc",
    "52d7d5aa1a303cf70519a61487641211f4267c6f",
    "6b7cd62b8cf12616b13142f2eb2cfc2f25796f0f",
    "2ed58c40e5dcbf5c5303c00e85096085b1055f85",
    "8bc93db2e7c64830b6a662f28c8917a9eef4e7c9",
    "5f6edb30c2bb648d5564c951edc25645e17e6636",
    "734eeb4f357ad3210355a0d3fdbc80706a770d61",
    "2217e2f8ff418b88eac6ad36cafe3a9795a11f40",
    "0a02b5a19bcca8d0c49d2adfc3909aebdf9d606e",
    "0d91576ec31f63402f2db6107a04155368e2632d",
    "81bc395deb3ba00567dc067d6ca71bacf9e3bc82"
  ],
  "changeHistoryShort": {
    "9a8edb0aeddd7787b2654f6e2a8465c325e048a2": "Ybodychange",
    "45d9568aaaf532a6da11bd7c1844ff81bf66bab1": "Ybodychange",
    "572cdb54632d8a29c4d9900f9e988ada8e3fe2ec": "Ybodychange",
    "38996fdcf0987d1da00ce46f8284d8fcdce57329": "Ybodychange",
    "56ab02eed9b61e1c80605104dfc4c87fc6abac96": "Ybodychange",
    "8e15e240597f821968e14893eabfea39815de207": "Ybodychange",
    "28daaf0eb206d723d2baf0f9d91e43d98bb2fd26": "Ybodychange",
    "686823529be09bea2a6cecb3503ef722017475bc": "Ybodychange",
    "52d7d5aa1a303cf70519a61487641211f4267c6f": "Ybodychange",
    "6b7cd62b8cf12616b13142f2eb2cfc2f25796f0f": "Ybodychange",
    "2ed58c40e5dcbf5c5303c00e85096085b1055f85": "Ybodychange",
    "8bc93db2e7c64830b6a662f28c8917a9eef4e7c9": "Ybodychange",
    "5f6edb30c2bb648d5564c951edc25645e17e6636": "Ybodychange",
    "734eeb4f357ad3210355a0d3fdbc80706a770d61": "Ybodychange",
    "2217e2f8ff418b88eac6ad36cafe3a9795a11f40": "Yexceptionschange",
    "0a02b5a19bcca8d0c49d2adfc3909aebdf9d606e": "Ybodychange",
    "0d91576ec31f63402f2db6107a04155368e2632d": "Ybodychange",
    "81bc395deb3ba00567dc067d6ca71bacf9e3bc82": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9a8edb0aeddd7787b2654f6e2a8465c325e048a2": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16640. WASB: Override getCanonicalServiceName() to return URI\n",
      "commitDate": "16/10/19 1:14 PM",
      "commitName": "9a8edb0aeddd7787b2654f6e2a8465c325e048a2",
      "commitAuthor": "Da Zhou",
      "commitDateOld": "25/09/19 4:16 AM",
      "commitNameOld": "e346e3638c595a512cd582739ff51fb64c3b4950",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 21.37,
      "commitsBetweenForRepo": 158,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,72 +1,74 @@\n   public void initialize(URI uri, Configuration conf)\n       throws IOException, IllegalArgumentException {\n     // Check authority for the URI to guarantee that it is non-null.\n     uri \u003d reconstructAuthorityIfNeeded(uri, conf);\n     if (null \u003d\u003d uri.getAuthority()) {\n       final String errMsg \u003d String\n           .format(\"Cannot initialize WASB file system, URI authority not recognized.\");\n       throw new IllegalArgumentException(errMsg);\n     }\n     super.initialize(uri, conf);\n \n     if (store \u003d\u003d null) {\n       store \u003d createDefaultStore(conf);\n     }\n \n     instrumentation \u003d new AzureFileSystemInstrumentation(conf);\n     if(!conf.getBoolean(SKIP_AZURE_METRICS_PROPERTY_NAME, false)) {\n       // Make sure the metrics system is available before interacting with Azure\n       AzureFileSystemMetricsSystem.fileSystemStarted();\n       metricsSourceName \u003d newMetricsSourceName();\n       String sourceDesc \u003d \"Azure Storage Volume File System metrics\";\n       AzureFileSystemMetricsSystem.registerSource(metricsSourceName, sourceDesc,\n         instrumentation);\n     }\n \n     store.initialize(uri, conf, instrumentation);\n     setConf(conf);\n     this.ugi \u003d UserGroupInformation.getCurrentUser();\n     this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n     this.workingDir \u003d new Path(\"/user\", UserGroupInformation.getCurrentUser()\n         .getShortUserName()).makeQualified(getUri(), getWorkingDirectory());\n \n     this.appendSupportEnabled \u003d conf.getBoolean(APPEND_SUPPORT_ENABLE_PROPERTY_NAME, false);\n     LOG.debug(\"NativeAzureFileSystem. Initializing.\");\n     LOG.debug(\"  blockSize  \u003d {}\", store.getHadoopBlockSize());\n \n     // Initialize thread counts from user configuration\n     deleteThreadCount \u003d conf.getInt(AZURE_DELETE_THREADS, DEFAULT_AZURE_DELETE_THREADS);\n     renameThreadCount \u003d conf.getInt(AZURE_RENAME_THREADS, DEFAULT_AZURE_RENAME_THREADS);\n \n     boolean useSecureMode \u003d conf.getBoolean(AzureNativeFileSystemStore.KEY_USE_SECURE_MODE,\n         AzureNativeFileSystemStore.DEFAULT_USE_SECURE_MODE);\n \n     this.azureAuthorization \u003d useSecureMode \u0026\u0026\n         conf.getBoolean(KEY_AZURE_AUTHORIZATION, DEFAULT_AZURE_AUTHORIZATION);\n     this.kerberosSupportEnabled \u003d\n         conf.getBoolean(Constants.AZURE_KERBEROS_SUPPORT_PROPERTY_NAME, false);\n \n     if (this.azureAuthorization) {\n \n       this.authorizer \u003d\n           new RemoteWasbAuthorizerImpl();\n       authorizer.init(conf);\n \n       this.chmodAllowedUsers \u003d\n           Arrays.asList(conf.getTrimmedStrings(\n               AZURE_CHMOD_USERLIST_PROPERTY_NAME,\n                   AZURE_CHMOD_USERLIST_PROPERTY_DEFAULT_VALUE));\n       this.chownAllowedUsers \u003d\n           Arrays.asList(conf.getTrimmedStrings(\n               AZURE_CHOWN_USERLIST_PROPERTY_NAME,\n                   AZURE_CHOWN_USERLIST_PROPERTY_DEFAULT_VALUE));\n       this.daemonUsers \u003d\n           Arrays.asList(conf.getTrimmedStrings(\n               AZURE_DAEMON_USERLIST_PROPERTY_NAME,\n                   AZURE_DAEMON_USERLIST_PROPERTY_DEFAULT_VALUE));\n     }\n \n     if (UserGroupInformation.isSecurityEnabled() \u0026\u0026 kerberosSupportEnabled) {\n       this.wasbDelegationTokenManager \u003d new RemoteWasbDelegationTokenManager(conf);\n     }\n+\n+    this.returnUriAsCanonicalServiceName \u003d conf.getBoolean(RETURN_URI_AS_CANONICAL_SERVICE_NAME_PROPERTY_NAME, false);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration conf)\n      throws IOException, IllegalArgumentException {\n    // Check authority for the URI to guarantee that it is non-null.\n    uri \u003d reconstructAuthorityIfNeeded(uri, conf);\n    if (null \u003d\u003d uri.getAuthority()) {\n      final String errMsg \u003d String\n          .format(\"Cannot initialize WASB file system, URI authority not recognized.\");\n      throw new IllegalArgumentException(errMsg);\n    }\n    super.initialize(uri, conf);\n\n    if (store \u003d\u003d null) {\n      store \u003d createDefaultStore(conf);\n    }\n\n    instrumentation \u003d new AzureFileSystemInstrumentation(conf);\n    if(!conf.getBoolean(SKIP_AZURE_METRICS_PROPERTY_NAME, false)) {\n      // Make sure the metrics system is available before interacting with Azure\n      AzureFileSystemMetricsSystem.fileSystemStarted();\n      metricsSourceName \u003d newMetricsSourceName();\n      String sourceDesc \u003d \"Azure Storage Volume File System metrics\";\n      AzureFileSystemMetricsSystem.registerSource(metricsSourceName, sourceDesc,\n        instrumentation);\n    }\n\n    store.initialize(uri, conf, instrumentation);\n    setConf(conf);\n    this.ugi \u003d UserGroupInformation.getCurrentUser();\n    this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n    this.workingDir \u003d new Path(\"/user\", UserGroupInformation.getCurrentUser()\n        .getShortUserName()).makeQualified(getUri(), getWorkingDirectory());\n\n    this.appendSupportEnabled \u003d conf.getBoolean(APPEND_SUPPORT_ENABLE_PROPERTY_NAME, false);\n    LOG.debug(\"NativeAzureFileSystem. Initializing.\");\n    LOG.debug(\"  blockSize  \u003d {}\", store.getHadoopBlockSize());\n\n    // Initialize thread counts from user configuration\n    deleteThreadCount \u003d conf.getInt(AZURE_DELETE_THREADS, DEFAULT_AZURE_DELETE_THREADS);\n    renameThreadCount \u003d conf.getInt(AZURE_RENAME_THREADS, DEFAULT_AZURE_RENAME_THREADS);\n\n    boolean useSecureMode \u003d conf.getBoolean(AzureNativeFileSystemStore.KEY_USE_SECURE_MODE,\n        AzureNativeFileSystemStore.DEFAULT_USE_SECURE_MODE);\n\n    this.azureAuthorization \u003d useSecureMode \u0026\u0026\n        conf.getBoolean(KEY_AZURE_AUTHORIZATION, DEFAULT_AZURE_AUTHORIZATION);\n    this.kerberosSupportEnabled \u003d\n        conf.getBoolean(Constants.AZURE_KERBEROS_SUPPORT_PROPERTY_NAME, false);\n\n    if (this.azureAuthorization) {\n\n      this.authorizer \u003d\n          new RemoteWasbAuthorizerImpl();\n      authorizer.init(conf);\n\n      this.chmodAllowedUsers \u003d\n          Arrays.asList(conf.getTrimmedStrings(\n              AZURE_CHMOD_USERLIST_PROPERTY_NAME,\n                  AZURE_CHMOD_USERLIST_PROPERTY_DEFAULT_VALUE));\n      this.chownAllowedUsers \u003d\n          Arrays.asList(conf.getTrimmedStrings(\n              AZURE_CHOWN_USERLIST_PROPERTY_NAME,\n                  AZURE_CHOWN_USERLIST_PROPERTY_DEFAULT_VALUE));\n      this.daemonUsers \u003d\n          Arrays.asList(conf.getTrimmedStrings(\n              AZURE_DAEMON_USERLIST_PROPERTY_NAME,\n                  AZURE_DAEMON_USERLIST_PROPERTY_DEFAULT_VALUE));\n    }\n\n    if (UserGroupInformation.isSecurityEnabled() \u0026\u0026 kerberosSupportEnabled) {\n      this.wasbDelegationTokenManager \u003d new RemoteWasbDelegationTokenManager(conf);\n    }\n\n    this.returnUriAsCanonicalServiceName \u003d conf.getBoolean(RETURN_URI_AS_CANONICAL_SERVICE_NAME_PROPERTY_NAME, false);\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "45d9568aaaf532a6da11bd7c1844ff81bf66bab1": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15547/ WASB: improve listStatus performance.\nContributed by Thomas Marquardt.\n\n(cherry picked from commit 749fff577ed9afb4ef8a54b8948f74be083cc620)\n",
      "commitDate": "19/07/18 12:31 PM",
      "commitName": "45d9568aaaf532a6da11bd7c1844ff81bf66bab1",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "27/06/18 10:37 PM",
      "commitNameOld": "2b2399d623539ab68e71a38fa9fbfc9a405bddb8",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 21.58,
      "commitsBetweenForRepo": 124,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,75 +1,72 @@\n   public void initialize(URI uri, Configuration conf)\n       throws IOException, IllegalArgumentException {\n     // Check authority for the URI to guarantee that it is non-null.\n     uri \u003d reconstructAuthorityIfNeeded(uri, conf);\n     if (null \u003d\u003d uri.getAuthority()) {\n       final String errMsg \u003d String\n           .format(\"Cannot initialize WASB file system, URI authority not recognized.\");\n       throw new IllegalArgumentException(errMsg);\n     }\n     super.initialize(uri, conf);\n \n     if (store \u003d\u003d null) {\n       store \u003d createDefaultStore(conf);\n     }\n \n     instrumentation \u003d new AzureFileSystemInstrumentation(conf);\n     if(!conf.getBoolean(SKIP_AZURE_METRICS_PROPERTY_NAME, false)) {\n       // Make sure the metrics system is available before interacting with Azure\n       AzureFileSystemMetricsSystem.fileSystemStarted();\n       metricsSourceName \u003d newMetricsSourceName();\n       String sourceDesc \u003d \"Azure Storage Volume File System metrics\";\n       AzureFileSystemMetricsSystem.registerSource(metricsSourceName, sourceDesc,\n         instrumentation);\n     }\n \n     store.initialize(uri, conf, instrumentation);\n     setConf(conf);\n     this.ugi \u003d UserGroupInformation.getCurrentUser();\n     this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n     this.workingDir \u003d new Path(\"/user\", UserGroupInformation.getCurrentUser()\n         .getShortUserName()).makeQualified(getUri(), getWorkingDirectory());\n-    this.blockSize \u003d conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME,\n-        MAX_AZURE_BLOCK_SIZE);\n \n     this.appendSupportEnabled \u003d conf.getBoolean(APPEND_SUPPORT_ENABLE_PROPERTY_NAME, false);\n     LOG.debug(\"NativeAzureFileSystem. Initializing.\");\n-    LOG.debug(\"  blockSize  \u003d {}\",\n-        conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME, MAX_AZURE_BLOCK_SIZE));\n+    LOG.debug(\"  blockSize  \u003d {}\", store.getHadoopBlockSize());\n \n     // Initialize thread counts from user configuration\n     deleteThreadCount \u003d conf.getInt(AZURE_DELETE_THREADS, DEFAULT_AZURE_DELETE_THREADS);\n     renameThreadCount \u003d conf.getInt(AZURE_RENAME_THREADS, DEFAULT_AZURE_RENAME_THREADS);\n \n     boolean useSecureMode \u003d conf.getBoolean(AzureNativeFileSystemStore.KEY_USE_SECURE_MODE,\n         AzureNativeFileSystemStore.DEFAULT_USE_SECURE_MODE);\n \n     this.azureAuthorization \u003d useSecureMode \u0026\u0026\n         conf.getBoolean(KEY_AZURE_AUTHORIZATION, DEFAULT_AZURE_AUTHORIZATION);\n     this.kerberosSupportEnabled \u003d\n         conf.getBoolean(Constants.AZURE_KERBEROS_SUPPORT_PROPERTY_NAME, false);\n \n     if (this.azureAuthorization) {\n \n       this.authorizer \u003d\n           new RemoteWasbAuthorizerImpl();\n       authorizer.init(conf);\n \n       this.chmodAllowedUsers \u003d\n           Arrays.asList(conf.getTrimmedStrings(\n               AZURE_CHMOD_USERLIST_PROPERTY_NAME,\n                   AZURE_CHMOD_USERLIST_PROPERTY_DEFAULT_VALUE));\n       this.chownAllowedUsers \u003d\n           Arrays.asList(conf.getTrimmedStrings(\n               AZURE_CHOWN_USERLIST_PROPERTY_NAME,\n                   AZURE_CHOWN_USERLIST_PROPERTY_DEFAULT_VALUE));\n       this.daemonUsers \u003d\n           Arrays.asList(conf.getTrimmedStrings(\n               AZURE_DAEMON_USERLIST_PROPERTY_NAME,\n                   AZURE_DAEMON_USERLIST_PROPERTY_DEFAULT_VALUE));\n     }\n \n     if (UserGroupInformation.isSecurityEnabled() \u0026\u0026 kerberosSupportEnabled) {\n       this.wasbDelegationTokenManager \u003d new RemoteWasbDelegationTokenManager(conf);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration conf)\n      throws IOException, IllegalArgumentException {\n    // Check authority for the URI to guarantee that it is non-null.\n    uri \u003d reconstructAuthorityIfNeeded(uri, conf);\n    if (null \u003d\u003d uri.getAuthority()) {\n      final String errMsg \u003d String\n          .format(\"Cannot initialize WASB file system, URI authority not recognized.\");\n      throw new IllegalArgumentException(errMsg);\n    }\n    super.initialize(uri, conf);\n\n    if (store \u003d\u003d null) {\n      store \u003d createDefaultStore(conf);\n    }\n\n    instrumentation \u003d new AzureFileSystemInstrumentation(conf);\n    if(!conf.getBoolean(SKIP_AZURE_METRICS_PROPERTY_NAME, false)) {\n      // Make sure the metrics system is available before interacting with Azure\n      AzureFileSystemMetricsSystem.fileSystemStarted();\n      metricsSourceName \u003d newMetricsSourceName();\n      String sourceDesc \u003d \"Azure Storage Volume File System metrics\";\n      AzureFileSystemMetricsSystem.registerSource(metricsSourceName, sourceDesc,\n        instrumentation);\n    }\n\n    store.initialize(uri, conf, instrumentation);\n    setConf(conf);\n    this.ugi \u003d UserGroupInformation.getCurrentUser();\n    this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n    this.workingDir \u003d new Path(\"/user\", UserGroupInformation.getCurrentUser()\n        .getShortUserName()).makeQualified(getUri(), getWorkingDirectory());\n\n    this.appendSupportEnabled \u003d conf.getBoolean(APPEND_SUPPORT_ENABLE_PROPERTY_NAME, false);\n    LOG.debug(\"NativeAzureFileSystem. Initializing.\");\n    LOG.debug(\"  blockSize  \u003d {}\", store.getHadoopBlockSize());\n\n    // Initialize thread counts from user configuration\n    deleteThreadCount \u003d conf.getInt(AZURE_DELETE_THREADS, DEFAULT_AZURE_DELETE_THREADS);\n    renameThreadCount \u003d conf.getInt(AZURE_RENAME_THREADS, DEFAULT_AZURE_RENAME_THREADS);\n\n    boolean useSecureMode \u003d conf.getBoolean(AzureNativeFileSystemStore.KEY_USE_SECURE_MODE,\n        AzureNativeFileSystemStore.DEFAULT_USE_SECURE_MODE);\n\n    this.azureAuthorization \u003d useSecureMode \u0026\u0026\n        conf.getBoolean(KEY_AZURE_AUTHORIZATION, DEFAULT_AZURE_AUTHORIZATION);\n    this.kerberosSupportEnabled \u003d\n        conf.getBoolean(Constants.AZURE_KERBEROS_SUPPORT_PROPERTY_NAME, false);\n\n    if (this.azureAuthorization) {\n\n      this.authorizer \u003d\n          new RemoteWasbAuthorizerImpl();\n      authorizer.init(conf);\n\n      this.chmodAllowedUsers \u003d\n          Arrays.asList(conf.getTrimmedStrings(\n              AZURE_CHMOD_USERLIST_PROPERTY_NAME,\n                  AZURE_CHMOD_USERLIST_PROPERTY_DEFAULT_VALUE));\n      this.chownAllowedUsers \u003d\n          Arrays.asList(conf.getTrimmedStrings(\n              AZURE_CHOWN_USERLIST_PROPERTY_NAME,\n                  AZURE_CHOWN_USERLIST_PROPERTY_DEFAULT_VALUE));\n      this.daemonUsers \u003d\n          Arrays.asList(conf.getTrimmedStrings(\n              AZURE_DAEMON_USERLIST_PROPERTY_NAME,\n                  AZURE_DAEMON_USERLIST_PROPERTY_DEFAULT_VALUE));\n    }\n\n    if (UserGroupInformation.isSecurityEnabled() \u0026\u0026 kerberosSupportEnabled) {\n      this.wasbDelegationTokenManager \u003d new RemoteWasbDelegationTokenManager(conf);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "572cdb54632d8a29c4d9900f9e988ada8e3fe2ec": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14899. Restrict Access to setPermission operation when authorization is enabled in WASB\nContributed by Kannapiran Srinivasan.\n",
      "commitDate": "06/10/17 9:43 AM",
      "commitName": "572cdb54632d8a29c4d9900f9e988ada8e3fe2ec",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "05/10/17 7:05 AM",
      "commitNameOld": "9288206cb3c1a39044a8e106436987185ef43ddf",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 1.11,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,75 @@\n   public void initialize(URI uri, Configuration conf)\n       throws IOException, IllegalArgumentException {\n     // Check authority for the URI to guarantee that it is non-null.\n     uri \u003d reconstructAuthorityIfNeeded(uri, conf);\n     if (null \u003d\u003d uri.getAuthority()) {\n       final String errMsg \u003d String\n           .format(\"Cannot initialize WASB file system, URI authority not recognized.\");\n       throw new IllegalArgumentException(errMsg);\n     }\n     super.initialize(uri, conf);\n \n     if (store \u003d\u003d null) {\n       store \u003d createDefaultStore(conf);\n     }\n \n     instrumentation \u003d new AzureFileSystemInstrumentation(conf);\n     if(!conf.getBoolean(SKIP_AZURE_METRICS_PROPERTY_NAME, false)) {\n       // Make sure the metrics system is available before interacting with Azure\n       AzureFileSystemMetricsSystem.fileSystemStarted();\n       metricsSourceName \u003d newMetricsSourceName();\n       String sourceDesc \u003d \"Azure Storage Volume File System metrics\";\n       AzureFileSystemMetricsSystem.registerSource(metricsSourceName, sourceDesc,\n         instrumentation);\n     }\n \n     store.initialize(uri, conf, instrumentation);\n     setConf(conf);\n     this.ugi \u003d UserGroupInformation.getCurrentUser();\n     this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n     this.workingDir \u003d new Path(\"/user\", UserGroupInformation.getCurrentUser()\n         .getShortUserName()).makeQualified(getUri(), getWorkingDirectory());\n     this.blockSize \u003d conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME,\n         MAX_AZURE_BLOCK_SIZE);\n \n     this.appendSupportEnabled \u003d conf.getBoolean(APPEND_SUPPORT_ENABLE_PROPERTY_NAME, false);\n     LOG.debug(\"NativeAzureFileSystem. Initializing.\");\n     LOG.debug(\"  blockSize  \u003d {}\",\n         conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME, MAX_AZURE_BLOCK_SIZE));\n \n     // Initialize thread counts from user configuration\n     deleteThreadCount \u003d conf.getInt(AZURE_DELETE_THREADS, DEFAULT_AZURE_DELETE_THREADS);\n     renameThreadCount \u003d conf.getInt(AZURE_RENAME_THREADS, DEFAULT_AZURE_RENAME_THREADS);\n \n     boolean useSecureMode \u003d conf.getBoolean(AzureNativeFileSystemStore.KEY_USE_SECURE_MODE,\n         AzureNativeFileSystemStore.DEFAULT_USE_SECURE_MODE);\n \n     this.azureAuthorization \u003d useSecureMode \u0026\u0026\n         conf.getBoolean(KEY_AZURE_AUTHORIZATION, DEFAULT_AZURE_AUTHORIZATION);\n     this.kerberosSupportEnabled \u003d\n         conf.getBoolean(Constants.AZURE_KERBEROS_SUPPORT_PROPERTY_NAME, false);\n \n     if (this.azureAuthorization) {\n \n       this.authorizer \u003d\n           new RemoteWasbAuthorizerImpl();\n       authorizer.init(conf);\n+\n+      this.chmodAllowedUsers \u003d\n+          Arrays.asList(conf.getTrimmedStrings(\n+              AZURE_CHMOD_USERLIST_PROPERTY_NAME,\n+                  AZURE_CHMOD_USERLIST_PROPERTY_DEFAULT_VALUE));\n+      this.chownAllowedUsers \u003d\n+          Arrays.asList(conf.getTrimmedStrings(\n+              AZURE_CHOWN_USERLIST_PROPERTY_NAME,\n+                  AZURE_CHOWN_USERLIST_PROPERTY_DEFAULT_VALUE));\n+      this.daemonUsers \u003d\n+          Arrays.asList(conf.getTrimmedStrings(\n+              AZURE_DAEMON_USERLIST_PROPERTY_NAME,\n+                  AZURE_DAEMON_USERLIST_PROPERTY_DEFAULT_VALUE));\n     }\n \n     if (UserGroupInformation.isSecurityEnabled() \u0026\u0026 kerberosSupportEnabled) {\n       this.wasbDelegationTokenManager \u003d new RemoteWasbDelegationTokenManager(conf);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration conf)\n      throws IOException, IllegalArgumentException {\n    // Check authority for the URI to guarantee that it is non-null.\n    uri \u003d reconstructAuthorityIfNeeded(uri, conf);\n    if (null \u003d\u003d uri.getAuthority()) {\n      final String errMsg \u003d String\n          .format(\"Cannot initialize WASB file system, URI authority not recognized.\");\n      throw new IllegalArgumentException(errMsg);\n    }\n    super.initialize(uri, conf);\n\n    if (store \u003d\u003d null) {\n      store \u003d createDefaultStore(conf);\n    }\n\n    instrumentation \u003d new AzureFileSystemInstrumentation(conf);\n    if(!conf.getBoolean(SKIP_AZURE_METRICS_PROPERTY_NAME, false)) {\n      // Make sure the metrics system is available before interacting with Azure\n      AzureFileSystemMetricsSystem.fileSystemStarted();\n      metricsSourceName \u003d newMetricsSourceName();\n      String sourceDesc \u003d \"Azure Storage Volume File System metrics\";\n      AzureFileSystemMetricsSystem.registerSource(metricsSourceName, sourceDesc,\n        instrumentation);\n    }\n\n    store.initialize(uri, conf, instrumentation);\n    setConf(conf);\n    this.ugi \u003d UserGroupInformation.getCurrentUser();\n    this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n    this.workingDir \u003d new Path(\"/user\", UserGroupInformation.getCurrentUser()\n        .getShortUserName()).makeQualified(getUri(), getWorkingDirectory());\n    this.blockSize \u003d conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME,\n        MAX_AZURE_BLOCK_SIZE);\n\n    this.appendSupportEnabled \u003d conf.getBoolean(APPEND_SUPPORT_ENABLE_PROPERTY_NAME, false);\n    LOG.debug(\"NativeAzureFileSystem. Initializing.\");\n    LOG.debug(\"  blockSize  \u003d {}\",\n        conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME, MAX_AZURE_BLOCK_SIZE));\n\n    // Initialize thread counts from user configuration\n    deleteThreadCount \u003d conf.getInt(AZURE_DELETE_THREADS, DEFAULT_AZURE_DELETE_THREADS);\n    renameThreadCount \u003d conf.getInt(AZURE_RENAME_THREADS, DEFAULT_AZURE_RENAME_THREADS);\n\n    boolean useSecureMode \u003d conf.getBoolean(AzureNativeFileSystemStore.KEY_USE_SECURE_MODE,\n        AzureNativeFileSystemStore.DEFAULT_USE_SECURE_MODE);\n\n    this.azureAuthorization \u003d useSecureMode \u0026\u0026\n        conf.getBoolean(KEY_AZURE_AUTHORIZATION, DEFAULT_AZURE_AUTHORIZATION);\n    this.kerberosSupportEnabled \u003d\n        conf.getBoolean(Constants.AZURE_KERBEROS_SUPPORT_PROPERTY_NAME, false);\n\n    if (this.azureAuthorization) {\n\n      this.authorizer \u003d\n          new RemoteWasbAuthorizerImpl();\n      authorizer.init(conf);\n\n      this.chmodAllowedUsers \u003d\n          Arrays.asList(conf.getTrimmedStrings(\n              AZURE_CHMOD_USERLIST_PROPERTY_NAME,\n                  AZURE_CHMOD_USERLIST_PROPERTY_DEFAULT_VALUE));\n      this.chownAllowedUsers \u003d\n          Arrays.asList(conf.getTrimmedStrings(\n              AZURE_CHOWN_USERLIST_PROPERTY_NAME,\n                  AZURE_CHOWN_USERLIST_PROPERTY_DEFAULT_VALUE));\n      this.daemonUsers \u003d\n          Arrays.asList(conf.getTrimmedStrings(\n              AZURE_DAEMON_USERLIST_PROPERTY_NAME,\n                  AZURE_DAEMON_USERLIST_PROPERTY_DEFAULT_VALUE));\n    }\n\n    if (UserGroupInformation.isSecurityEnabled() \u0026\u0026 kerberosSupportEnabled) {\n      this.wasbDelegationTokenManager \u003d new RemoteWasbDelegationTokenManager(conf);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "38996fdcf0987d1da00ce46f8284d8fcdce57329": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14443. Azure: Support retry and client side failover for authorization, SASKey and delegation token generation. Contributed by Santhosh G Nayak\n",
      "commitDate": "30/06/17 4:53 PM",
      "commitName": "38996fdcf0987d1da00ce46f8284d8fcdce57329",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "29/06/17 9:22 AM",
      "commitNameOld": "b08cc973964b4eb7e7a7445a440b19d3a0f3d4d5",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 1.31,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,62 @@\n   public void initialize(URI uri, Configuration conf)\n       throws IOException, IllegalArgumentException {\n     // Check authority for the URI to guarantee that it is non-null.\n     uri \u003d reconstructAuthorityIfNeeded(uri, conf);\n     if (null \u003d\u003d uri.getAuthority()) {\n       final String errMsg \u003d String\n           .format(\"Cannot initialize WASB file system, URI authority not recognized.\");\n       throw new IllegalArgumentException(errMsg);\n     }\n     super.initialize(uri, conf);\n \n     if (store \u003d\u003d null) {\n       store \u003d createDefaultStore(conf);\n     }\n \n     instrumentation \u003d new AzureFileSystemInstrumentation(conf);\n     if(!conf.getBoolean(SKIP_AZURE_METRICS_PROPERTY_NAME, false)) {\n       // Make sure the metrics system is available before interacting with Azure\n       AzureFileSystemMetricsSystem.fileSystemStarted();\n       metricsSourceName \u003d newMetricsSourceName();\n       String sourceDesc \u003d \"Azure Storage Volume File System metrics\";\n       AzureFileSystemMetricsSystem.registerSource(metricsSourceName, sourceDesc,\n         instrumentation);\n     }\n \n     store.initialize(uri, conf, instrumentation);\n     setConf(conf);\n     this.ugi \u003d UserGroupInformation.getCurrentUser();\n     this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n     this.workingDir \u003d new Path(\"/user\", UserGroupInformation.getCurrentUser()\n         .getShortUserName()).makeQualified(getUri(), getWorkingDirectory());\n     this.blockSize \u003d conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME,\n         MAX_AZURE_BLOCK_SIZE);\n \n     this.appendSupportEnabled \u003d conf.getBoolean(APPEND_SUPPORT_ENABLE_PROPERTY_NAME, false);\n     LOG.debug(\"NativeAzureFileSystem. Initializing.\");\n     LOG.debug(\"  blockSize  \u003d {}\",\n         conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME, MAX_AZURE_BLOCK_SIZE));\n \n     // Initialize thread counts from user configuration\n     deleteThreadCount \u003d conf.getInt(AZURE_DELETE_THREADS, DEFAULT_AZURE_DELETE_THREADS);\n     renameThreadCount \u003d conf.getInt(AZURE_RENAME_THREADS, DEFAULT_AZURE_RENAME_THREADS);\n \n     boolean useSecureMode \u003d conf.getBoolean(AzureNativeFileSystemStore.KEY_USE_SECURE_MODE,\n         AzureNativeFileSystemStore.DEFAULT_USE_SECURE_MODE);\n \n     this.azureAuthorization \u003d useSecureMode \u0026\u0026\n         conf.getBoolean(KEY_AZURE_AUTHORIZATION, DEFAULT_AZURE_AUTHORIZATION);\n     this.kerberosSupportEnabled \u003d\n         conf.getBoolean(Constants.AZURE_KERBEROS_SUPPORT_PROPERTY_NAME, false);\n \n     if (this.azureAuthorization) {\n \n       this.authorizer \u003d\n           new RemoteWasbAuthorizerImpl();\n       authorizer.init(conf);\n     }\n \n     if (UserGroupInformation.isSecurityEnabled() \u0026\u0026 kerberosSupportEnabled) {\n-      DelegationTokenAuthenticator authenticator \u003d new KerberosDelegationTokenAuthenticator();\n-      authURL \u003d new DelegationTokenAuthenticatedURL(authenticator);\n-      credServiceUrl \u003d SecurityUtils.getCredServiceUrls(conf);\n+      this.wasbDelegationTokenManager \u003d new RemoteWasbDelegationTokenManager(conf);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration conf)\n      throws IOException, IllegalArgumentException {\n    // Check authority for the URI to guarantee that it is non-null.\n    uri \u003d reconstructAuthorityIfNeeded(uri, conf);\n    if (null \u003d\u003d uri.getAuthority()) {\n      final String errMsg \u003d String\n          .format(\"Cannot initialize WASB file system, URI authority not recognized.\");\n      throw new IllegalArgumentException(errMsg);\n    }\n    super.initialize(uri, conf);\n\n    if (store \u003d\u003d null) {\n      store \u003d createDefaultStore(conf);\n    }\n\n    instrumentation \u003d new AzureFileSystemInstrumentation(conf);\n    if(!conf.getBoolean(SKIP_AZURE_METRICS_PROPERTY_NAME, false)) {\n      // Make sure the metrics system is available before interacting with Azure\n      AzureFileSystemMetricsSystem.fileSystemStarted();\n      metricsSourceName \u003d newMetricsSourceName();\n      String sourceDesc \u003d \"Azure Storage Volume File System metrics\";\n      AzureFileSystemMetricsSystem.registerSource(metricsSourceName, sourceDesc,\n        instrumentation);\n    }\n\n    store.initialize(uri, conf, instrumentation);\n    setConf(conf);\n    this.ugi \u003d UserGroupInformation.getCurrentUser();\n    this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n    this.workingDir \u003d new Path(\"/user\", UserGroupInformation.getCurrentUser()\n        .getShortUserName()).makeQualified(getUri(), getWorkingDirectory());\n    this.blockSize \u003d conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME,\n        MAX_AZURE_BLOCK_SIZE);\n\n    this.appendSupportEnabled \u003d conf.getBoolean(APPEND_SUPPORT_ENABLE_PROPERTY_NAME, false);\n    LOG.debug(\"NativeAzureFileSystem. Initializing.\");\n    LOG.debug(\"  blockSize  \u003d {}\",\n        conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME, MAX_AZURE_BLOCK_SIZE));\n\n    // Initialize thread counts from user configuration\n    deleteThreadCount \u003d conf.getInt(AZURE_DELETE_THREADS, DEFAULT_AZURE_DELETE_THREADS);\n    renameThreadCount \u003d conf.getInt(AZURE_RENAME_THREADS, DEFAULT_AZURE_RENAME_THREADS);\n\n    boolean useSecureMode \u003d conf.getBoolean(AzureNativeFileSystemStore.KEY_USE_SECURE_MODE,\n        AzureNativeFileSystemStore.DEFAULT_USE_SECURE_MODE);\n\n    this.azureAuthorization \u003d useSecureMode \u0026\u0026\n        conf.getBoolean(KEY_AZURE_AUTHORIZATION, DEFAULT_AZURE_AUTHORIZATION);\n    this.kerberosSupportEnabled \u003d\n        conf.getBoolean(Constants.AZURE_KERBEROS_SUPPORT_PROPERTY_NAME, false);\n\n    if (this.azureAuthorization) {\n\n      this.authorizer \u003d\n          new RemoteWasbAuthorizerImpl();\n      authorizer.init(conf);\n    }\n\n    if (UserGroupInformation.isSecurityEnabled() \u0026\u0026 kerberosSupportEnabled) {\n      this.wasbDelegationTokenManager \u003d new RemoteWasbDelegationTokenManager(conf);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "56ab02eed9b61e1c80605104dfc4c87fc6abac96": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14273. Azure: NativeAzureFileSystem should respect config for kerberosSupportEnabled flag. Contributed by Santhosh G Nayak\n",
      "commitDate": "04/04/17 11:10 AM",
      "commitName": "56ab02eed9b61e1c80605104dfc4c87fc6abac96",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "20/03/17 4:31 PM",
      "commitNameOld": "8e15e240597f821968e14893eabfea39815de207",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 14.78,
      "commitsBetweenForRepo": 89,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,64 @@\n   public void initialize(URI uri, Configuration conf)\n       throws IOException, IllegalArgumentException {\n     // Check authority for the URI to guarantee that it is non-null.\n     uri \u003d reconstructAuthorityIfNeeded(uri, conf);\n     if (null \u003d\u003d uri.getAuthority()) {\n       final String errMsg \u003d String\n           .format(\"Cannot initialize WASB file system, URI authority not recognized.\");\n       throw new IllegalArgumentException(errMsg);\n     }\n     super.initialize(uri, conf);\n \n     if (store \u003d\u003d null) {\n       store \u003d createDefaultStore(conf);\n     }\n \n     instrumentation \u003d new AzureFileSystemInstrumentation(conf);\n     if(!conf.getBoolean(SKIP_AZURE_METRICS_PROPERTY_NAME, false)) {\n       // Make sure the metrics system is available before interacting with Azure\n       AzureFileSystemMetricsSystem.fileSystemStarted();\n       metricsSourceName \u003d newMetricsSourceName();\n       String sourceDesc \u003d \"Azure Storage Volume File System metrics\";\n       AzureFileSystemMetricsSystem.registerSource(metricsSourceName, sourceDesc,\n         instrumentation);\n     }\n \n     store.initialize(uri, conf, instrumentation);\n     setConf(conf);\n     this.ugi \u003d UserGroupInformation.getCurrentUser();\n     this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n     this.workingDir \u003d new Path(\"/user\", UserGroupInformation.getCurrentUser()\n         .getShortUserName()).makeQualified(getUri(), getWorkingDirectory());\n     this.blockSize \u003d conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME,\n         MAX_AZURE_BLOCK_SIZE);\n \n     this.appendSupportEnabled \u003d conf.getBoolean(APPEND_SUPPORT_ENABLE_PROPERTY_NAME, false);\n     LOG.debug(\"NativeAzureFileSystem. Initializing.\");\n     LOG.debug(\"  blockSize  \u003d {}\",\n         conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME, MAX_AZURE_BLOCK_SIZE));\n \n     // Initialize thread counts from user configuration\n     deleteThreadCount \u003d conf.getInt(AZURE_DELETE_THREADS, DEFAULT_AZURE_DELETE_THREADS);\n     renameThreadCount \u003d conf.getInt(AZURE_RENAME_THREADS, DEFAULT_AZURE_RENAME_THREADS);\n \n     boolean useSecureMode \u003d conf.getBoolean(AzureNativeFileSystemStore.KEY_USE_SECURE_MODE,\n         AzureNativeFileSystemStore.DEFAULT_USE_SECURE_MODE);\n \n     this.azureAuthorization \u003d useSecureMode \u0026\u0026\n         conf.getBoolean(KEY_AZURE_AUTHORIZATION, DEFAULT_AZURE_AUTHORIZATION);\n+    this.kerberosSupportEnabled \u003d\n+        conf.getBoolean(Constants.AZURE_KERBEROS_SUPPORT_PROPERTY_NAME, false);\n \n     if (this.azureAuthorization) {\n \n       this.authorizer \u003d\n           new RemoteWasbAuthorizerImpl();\n       authorizer.init(conf);\n     }\n \n     if (UserGroupInformation.isSecurityEnabled() \u0026\u0026 kerberosSupportEnabled) {\n       DelegationTokenAuthenticator authenticator \u003d new KerberosDelegationTokenAuthenticator();\n       authURL \u003d new DelegationTokenAuthenticatedURL(authenticator);\n       credServiceUrl \u003d SecurityUtils.getCredServiceUrls(conf);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration conf)\n      throws IOException, IllegalArgumentException {\n    // Check authority for the URI to guarantee that it is non-null.\n    uri \u003d reconstructAuthorityIfNeeded(uri, conf);\n    if (null \u003d\u003d uri.getAuthority()) {\n      final String errMsg \u003d String\n          .format(\"Cannot initialize WASB file system, URI authority not recognized.\");\n      throw new IllegalArgumentException(errMsg);\n    }\n    super.initialize(uri, conf);\n\n    if (store \u003d\u003d null) {\n      store \u003d createDefaultStore(conf);\n    }\n\n    instrumentation \u003d new AzureFileSystemInstrumentation(conf);\n    if(!conf.getBoolean(SKIP_AZURE_METRICS_PROPERTY_NAME, false)) {\n      // Make sure the metrics system is available before interacting with Azure\n      AzureFileSystemMetricsSystem.fileSystemStarted();\n      metricsSourceName \u003d newMetricsSourceName();\n      String sourceDesc \u003d \"Azure Storage Volume File System metrics\";\n      AzureFileSystemMetricsSystem.registerSource(metricsSourceName, sourceDesc,\n        instrumentation);\n    }\n\n    store.initialize(uri, conf, instrumentation);\n    setConf(conf);\n    this.ugi \u003d UserGroupInformation.getCurrentUser();\n    this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n    this.workingDir \u003d new Path(\"/user\", UserGroupInformation.getCurrentUser()\n        .getShortUserName()).makeQualified(getUri(), getWorkingDirectory());\n    this.blockSize \u003d conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME,\n        MAX_AZURE_BLOCK_SIZE);\n\n    this.appendSupportEnabled \u003d conf.getBoolean(APPEND_SUPPORT_ENABLE_PROPERTY_NAME, false);\n    LOG.debug(\"NativeAzureFileSystem. Initializing.\");\n    LOG.debug(\"  blockSize  \u003d {}\",\n        conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME, MAX_AZURE_BLOCK_SIZE));\n\n    // Initialize thread counts from user configuration\n    deleteThreadCount \u003d conf.getInt(AZURE_DELETE_THREADS, DEFAULT_AZURE_DELETE_THREADS);\n    renameThreadCount \u003d conf.getInt(AZURE_RENAME_THREADS, DEFAULT_AZURE_RENAME_THREADS);\n\n    boolean useSecureMode \u003d conf.getBoolean(AzureNativeFileSystemStore.KEY_USE_SECURE_MODE,\n        AzureNativeFileSystemStore.DEFAULT_USE_SECURE_MODE);\n\n    this.azureAuthorization \u003d useSecureMode \u0026\u0026\n        conf.getBoolean(KEY_AZURE_AUTHORIZATION, DEFAULT_AZURE_AUTHORIZATION);\n    this.kerberosSupportEnabled \u003d\n        conf.getBoolean(Constants.AZURE_KERBEROS_SUPPORT_PROPERTY_NAME, false);\n\n    if (this.azureAuthorization) {\n\n      this.authorizer \u003d\n          new RemoteWasbAuthorizerImpl();\n      authorizer.init(conf);\n    }\n\n    if (UserGroupInformation.isSecurityEnabled() \u0026\u0026 kerberosSupportEnabled) {\n      DelegationTokenAuthenticator authenticator \u003d new KerberosDelegationTokenAuthenticator();\n      authURL \u003d new DelegationTokenAuthenticatedURL(authenticator);\n      credServiceUrl \u003d SecurityUtils.getCredServiceUrls(conf);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "8e15e240597f821968e14893eabfea39815de207": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13945. Azure: Add Kerberos and Delegation token support to WASB client. Contributed by Santhosh G Nayak\n\nChange-Id: I39fb0a3b0491bf2160571366939a0502a0045429\n",
      "commitDate": "20/03/17 4:31 PM",
      "commitName": "8e15e240597f821968e14893eabfea39815de207",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "07/03/17 2:55 PM",
      "commitNameOld": "28daaf0eb206d723d2baf0f9d91e43d98bb2fd26",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 13.02,
      "commitsBetweenForRepo": 70,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,62 @@\n   public void initialize(URI uri, Configuration conf)\n       throws IOException, IllegalArgumentException {\n     // Check authority for the URI to guarantee that it is non-null.\n     uri \u003d reconstructAuthorityIfNeeded(uri, conf);\n     if (null \u003d\u003d uri.getAuthority()) {\n       final String errMsg \u003d String\n           .format(\"Cannot initialize WASB file system, URI authority not recognized.\");\n       throw new IllegalArgumentException(errMsg);\n     }\n     super.initialize(uri, conf);\n \n     if (store \u003d\u003d null) {\n       store \u003d createDefaultStore(conf);\n     }\n \n     instrumentation \u003d new AzureFileSystemInstrumentation(conf);\n     if(!conf.getBoolean(SKIP_AZURE_METRICS_PROPERTY_NAME, false)) {\n       // Make sure the metrics system is available before interacting with Azure\n       AzureFileSystemMetricsSystem.fileSystemStarted();\n       metricsSourceName \u003d newMetricsSourceName();\n       String sourceDesc \u003d \"Azure Storage Volume File System metrics\";\n       AzureFileSystemMetricsSystem.registerSource(metricsSourceName, sourceDesc,\n         instrumentation);\n     }\n \n     store.initialize(uri, conf, instrumentation);\n     setConf(conf);\n     this.ugi \u003d UserGroupInformation.getCurrentUser();\n     this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n     this.workingDir \u003d new Path(\"/user\", UserGroupInformation.getCurrentUser()\n         .getShortUserName()).makeQualified(getUri(), getWorkingDirectory());\n     this.blockSize \u003d conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME,\n         MAX_AZURE_BLOCK_SIZE);\n \n     this.appendSupportEnabled \u003d conf.getBoolean(APPEND_SUPPORT_ENABLE_PROPERTY_NAME, false);\n     LOG.debug(\"NativeAzureFileSystem. Initializing.\");\n     LOG.debug(\"  blockSize  \u003d {}\",\n         conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME, MAX_AZURE_BLOCK_SIZE));\n \n     // Initialize thread counts from user configuration\n     deleteThreadCount \u003d conf.getInt(AZURE_DELETE_THREADS, DEFAULT_AZURE_DELETE_THREADS);\n     renameThreadCount \u003d conf.getInt(AZURE_RENAME_THREADS, DEFAULT_AZURE_RENAME_THREADS);\n \n     boolean useSecureMode \u003d conf.getBoolean(AzureNativeFileSystemStore.KEY_USE_SECURE_MODE,\n         AzureNativeFileSystemStore.DEFAULT_USE_SECURE_MODE);\n \n     this.azureAuthorization \u003d useSecureMode \u0026\u0026\n         conf.getBoolean(KEY_AZURE_AUTHORIZATION, DEFAULT_AZURE_AUTHORIZATION);\n \n     if (this.azureAuthorization) {\n \n       this.authorizer \u003d\n           new RemoteWasbAuthorizerImpl();\n       authorizer.init(conf);\n     }\n+\n+    if (UserGroupInformation.isSecurityEnabled() \u0026\u0026 kerberosSupportEnabled) {\n+      DelegationTokenAuthenticator authenticator \u003d new KerberosDelegationTokenAuthenticator();\n+      authURL \u003d new DelegationTokenAuthenticatedURL(authenticator);\n+      credServiceUrl \u003d SecurityUtils.getCredServiceUrls(conf);\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration conf)\n      throws IOException, IllegalArgumentException {\n    // Check authority for the URI to guarantee that it is non-null.\n    uri \u003d reconstructAuthorityIfNeeded(uri, conf);\n    if (null \u003d\u003d uri.getAuthority()) {\n      final String errMsg \u003d String\n          .format(\"Cannot initialize WASB file system, URI authority not recognized.\");\n      throw new IllegalArgumentException(errMsg);\n    }\n    super.initialize(uri, conf);\n\n    if (store \u003d\u003d null) {\n      store \u003d createDefaultStore(conf);\n    }\n\n    instrumentation \u003d new AzureFileSystemInstrumentation(conf);\n    if(!conf.getBoolean(SKIP_AZURE_METRICS_PROPERTY_NAME, false)) {\n      // Make sure the metrics system is available before interacting with Azure\n      AzureFileSystemMetricsSystem.fileSystemStarted();\n      metricsSourceName \u003d newMetricsSourceName();\n      String sourceDesc \u003d \"Azure Storage Volume File System metrics\";\n      AzureFileSystemMetricsSystem.registerSource(metricsSourceName, sourceDesc,\n        instrumentation);\n    }\n\n    store.initialize(uri, conf, instrumentation);\n    setConf(conf);\n    this.ugi \u003d UserGroupInformation.getCurrentUser();\n    this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n    this.workingDir \u003d new Path(\"/user\", UserGroupInformation.getCurrentUser()\n        .getShortUserName()).makeQualified(getUri(), getWorkingDirectory());\n    this.blockSize \u003d conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME,\n        MAX_AZURE_BLOCK_SIZE);\n\n    this.appendSupportEnabled \u003d conf.getBoolean(APPEND_SUPPORT_ENABLE_PROPERTY_NAME, false);\n    LOG.debug(\"NativeAzureFileSystem. Initializing.\");\n    LOG.debug(\"  blockSize  \u003d {}\",\n        conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME, MAX_AZURE_BLOCK_SIZE));\n\n    // Initialize thread counts from user configuration\n    deleteThreadCount \u003d conf.getInt(AZURE_DELETE_THREADS, DEFAULT_AZURE_DELETE_THREADS);\n    renameThreadCount \u003d conf.getInt(AZURE_RENAME_THREADS, DEFAULT_AZURE_RENAME_THREADS);\n\n    boolean useSecureMode \u003d conf.getBoolean(AzureNativeFileSystemStore.KEY_USE_SECURE_MODE,\n        AzureNativeFileSystemStore.DEFAULT_USE_SECURE_MODE);\n\n    this.azureAuthorization \u003d useSecureMode \u0026\u0026\n        conf.getBoolean(KEY_AZURE_AUTHORIZATION, DEFAULT_AZURE_AUTHORIZATION);\n\n    if (this.azureAuthorization) {\n\n      this.authorizer \u003d\n          new RemoteWasbAuthorizerImpl();\n      authorizer.init(conf);\n    }\n\n    if (UserGroupInformation.isSecurityEnabled() \u0026\u0026 kerberosSupportEnabled) {\n      DelegationTokenAuthenticator authenticator \u003d new KerberosDelegationTokenAuthenticator();\n      authURL \u003d new DelegationTokenAuthenticatedURL(authenticator);\n      credServiceUrl \u003d SecurityUtils.getCredServiceUrls(conf);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "28daaf0eb206d723d2baf0f9d91e43d98bb2fd26": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14150. Implement getHomeDirectory() method in NativeAzureFileSystem. Contributed by Santhosh G Nayak\n",
      "commitDate": "07/03/17 2:55 PM",
      "commitName": "28daaf0eb206d723d2baf0f9d91e43d98bb2fd26",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "06/03/17 5:16 PM",
      "commitNameOld": "686823529be09bea2a6cecb3503ef722017475bc",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 0.9,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,56 @@\n   public void initialize(URI uri, Configuration conf)\n       throws IOException, IllegalArgumentException {\n     // Check authority for the URI to guarantee that it is non-null.\n     uri \u003d reconstructAuthorityIfNeeded(uri, conf);\n     if (null \u003d\u003d uri.getAuthority()) {\n       final String errMsg \u003d String\n           .format(\"Cannot initialize WASB file system, URI authority not recognized.\");\n       throw new IllegalArgumentException(errMsg);\n     }\n     super.initialize(uri, conf);\n \n     if (store \u003d\u003d null) {\n       store \u003d createDefaultStore(conf);\n     }\n \n     instrumentation \u003d new AzureFileSystemInstrumentation(conf);\n     if(!conf.getBoolean(SKIP_AZURE_METRICS_PROPERTY_NAME, false)) {\n       // Make sure the metrics system is available before interacting with Azure\n       AzureFileSystemMetricsSystem.fileSystemStarted();\n       metricsSourceName \u003d newMetricsSourceName();\n       String sourceDesc \u003d \"Azure Storage Volume File System metrics\";\n       AzureFileSystemMetricsSystem.registerSource(metricsSourceName, sourceDesc,\n         instrumentation);\n     }\n \n     store.initialize(uri, conf, instrumentation);\n     setConf(conf);\n+    this.ugi \u003d UserGroupInformation.getCurrentUser();\n     this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n     this.workingDir \u003d new Path(\"/user\", UserGroupInformation.getCurrentUser()\n         .getShortUserName()).makeQualified(getUri(), getWorkingDirectory());\n     this.blockSize \u003d conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME,\n         MAX_AZURE_BLOCK_SIZE);\n \n     this.appendSupportEnabled \u003d conf.getBoolean(APPEND_SUPPORT_ENABLE_PROPERTY_NAME, false);\n     LOG.debug(\"NativeAzureFileSystem. Initializing.\");\n     LOG.debug(\"  blockSize  \u003d {}\",\n         conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME, MAX_AZURE_BLOCK_SIZE));\n \n     // Initialize thread counts from user configuration\n     deleteThreadCount \u003d conf.getInt(AZURE_DELETE_THREADS, DEFAULT_AZURE_DELETE_THREADS);\n     renameThreadCount \u003d conf.getInt(AZURE_RENAME_THREADS, DEFAULT_AZURE_RENAME_THREADS);\n \n     boolean useSecureMode \u003d conf.getBoolean(AzureNativeFileSystemStore.KEY_USE_SECURE_MODE,\n         AzureNativeFileSystemStore.DEFAULT_USE_SECURE_MODE);\n \n     this.azureAuthorization \u003d useSecureMode \u0026\u0026\n         conf.getBoolean(KEY_AZURE_AUTHORIZATION, DEFAULT_AZURE_AUTHORIZATION);\n \n     if (this.azureAuthorization) {\n \n       this.authorizer \u003d\n           new RemoteWasbAuthorizerImpl();\n       authorizer.init(conf);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration conf)\n      throws IOException, IllegalArgumentException {\n    // Check authority for the URI to guarantee that it is non-null.\n    uri \u003d reconstructAuthorityIfNeeded(uri, conf);\n    if (null \u003d\u003d uri.getAuthority()) {\n      final String errMsg \u003d String\n          .format(\"Cannot initialize WASB file system, URI authority not recognized.\");\n      throw new IllegalArgumentException(errMsg);\n    }\n    super.initialize(uri, conf);\n\n    if (store \u003d\u003d null) {\n      store \u003d createDefaultStore(conf);\n    }\n\n    instrumentation \u003d new AzureFileSystemInstrumentation(conf);\n    if(!conf.getBoolean(SKIP_AZURE_METRICS_PROPERTY_NAME, false)) {\n      // Make sure the metrics system is available before interacting with Azure\n      AzureFileSystemMetricsSystem.fileSystemStarted();\n      metricsSourceName \u003d newMetricsSourceName();\n      String sourceDesc \u003d \"Azure Storage Volume File System metrics\";\n      AzureFileSystemMetricsSystem.registerSource(metricsSourceName, sourceDesc,\n        instrumentation);\n    }\n\n    store.initialize(uri, conf, instrumentation);\n    setConf(conf);\n    this.ugi \u003d UserGroupInformation.getCurrentUser();\n    this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n    this.workingDir \u003d new Path(\"/user\", UserGroupInformation.getCurrentUser()\n        .getShortUserName()).makeQualified(getUri(), getWorkingDirectory());\n    this.blockSize \u003d conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME,\n        MAX_AZURE_BLOCK_SIZE);\n\n    this.appendSupportEnabled \u003d conf.getBoolean(APPEND_SUPPORT_ENABLE_PROPERTY_NAME, false);\n    LOG.debug(\"NativeAzureFileSystem. Initializing.\");\n    LOG.debug(\"  blockSize  \u003d {}\",\n        conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME, MAX_AZURE_BLOCK_SIZE));\n\n    // Initialize thread counts from user configuration\n    deleteThreadCount \u003d conf.getInt(AZURE_DELETE_THREADS, DEFAULT_AZURE_DELETE_THREADS);\n    renameThreadCount \u003d conf.getInt(AZURE_RENAME_THREADS, DEFAULT_AZURE_RENAME_THREADS);\n\n    boolean useSecureMode \u003d conf.getBoolean(AzureNativeFileSystemStore.KEY_USE_SECURE_MODE,\n        AzureNativeFileSystemStore.DEFAULT_USE_SECURE_MODE);\n\n    this.azureAuthorization \u003d useSecureMode \u0026\u0026\n        conf.getBoolean(KEY_AZURE_AUTHORIZATION, DEFAULT_AZURE_AUTHORIZATION);\n\n    if (this.azureAuthorization) {\n\n      this.authorizer \u003d\n          new RemoteWasbAuthorizerImpl();\n      authorizer.init(conf);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "686823529be09bea2a6cecb3503ef722017475bc": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13930. Azure: Add Authorization support to WASB. Contributed by Sivaguru Sankaridurg and Dushyanth\n",
      "commitDate": "06/03/17 5:16 PM",
      "commitName": "686823529be09bea2a6cecb3503ef722017475bc",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "06/03/17 5:10 PM",
      "commitNameOld": "52d7d5aa1a303cf70519a61487641211f4267c6f",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,55 @@\n   public void initialize(URI uri, Configuration conf)\n       throws IOException, IllegalArgumentException {\n     // Check authority for the URI to guarantee that it is non-null.\n     uri \u003d reconstructAuthorityIfNeeded(uri, conf);\n     if (null \u003d\u003d uri.getAuthority()) {\n       final String errMsg \u003d String\n           .format(\"Cannot initialize WASB file system, URI authority not recognized.\");\n       throw new IllegalArgumentException(errMsg);\n     }\n     super.initialize(uri, conf);\n \n     if (store \u003d\u003d null) {\n       store \u003d createDefaultStore(conf);\n     }\n \n     instrumentation \u003d new AzureFileSystemInstrumentation(conf);\n     if(!conf.getBoolean(SKIP_AZURE_METRICS_PROPERTY_NAME, false)) {\n       // Make sure the metrics system is available before interacting with Azure\n       AzureFileSystemMetricsSystem.fileSystemStarted();\n       metricsSourceName \u003d newMetricsSourceName();\n       String sourceDesc \u003d \"Azure Storage Volume File System metrics\";\n       AzureFileSystemMetricsSystem.registerSource(metricsSourceName, sourceDesc,\n         instrumentation);\n     }\n \n     store.initialize(uri, conf, instrumentation);\n     setConf(conf);\n     this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n     this.workingDir \u003d new Path(\"/user\", UserGroupInformation.getCurrentUser()\n         .getShortUserName()).makeQualified(getUri(), getWorkingDirectory());\n     this.blockSize \u003d conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME,\n         MAX_AZURE_BLOCK_SIZE);\n \n     this.appendSupportEnabled \u003d conf.getBoolean(APPEND_SUPPORT_ENABLE_PROPERTY_NAME, false);\n     LOG.debug(\"NativeAzureFileSystem. Initializing.\");\n     LOG.debug(\"  blockSize  \u003d {}\",\n         conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME, MAX_AZURE_BLOCK_SIZE));\n \n     // Initialize thread counts from user configuration\n     deleteThreadCount \u003d conf.getInt(AZURE_DELETE_THREADS, DEFAULT_AZURE_DELETE_THREADS);\n     renameThreadCount \u003d conf.getInt(AZURE_RENAME_THREADS, DEFAULT_AZURE_RENAME_THREADS);\n+\n+    boolean useSecureMode \u003d conf.getBoolean(AzureNativeFileSystemStore.KEY_USE_SECURE_MODE,\n+        AzureNativeFileSystemStore.DEFAULT_USE_SECURE_MODE);\n+\n+    this.azureAuthorization \u003d useSecureMode \u0026\u0026\n+        conf.getBoolean(KEY_AZURE_AUTHORIZATION, DEFAULT_AZURE_AUTHORIZATION);\n+\n+    if (this.azureAuthorization) {\n+\n+      this.authorizer \u003d\n+          new RemoteWasbAuthorizerImpl();\n+      authorizer.init(conf);\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration conf)\n      throws IOException, IllegalArgumentException {\n    // Check authority for the URI to guarantee that it is non-null.\n    uri \u003d reconstructAuthorityIfNeeded(uri, conf);\n    if (null \u003d\u003d uri.getAuthority()) {\n      final String errMsg \u003d String\n          .format(\"Cannot initialize WASB file system, URI authority not recognized.\");\n      throw new IllegalArgumentException(errMsg);\n    }\n    super.initialize(uri, conf);\n\n    if (store \u003d\u003d null) {\n      store \u003d createDefaultStore(conf);\n    }\n\n    instrumentation \u003d new AzureFileSystemInstrumentation(conf);\n    if(!conf.getBoolean(SKIP_AZURE_METRICS_PROPERTY_NAME, false)) {\n      // Make sure the metrics system is available before interacting with Azure\n      AzureFileSystemMetricsSystem.fileSystemStarted();\n      metricsSourceName \u003d newMetricsSourceName();\n      String sourceDesc \u003d \"Azure Storage Volume File System metrics\";\n      AzureFileSystemMetricsSystem.registerSource(metricsSourceName, sourceDesc,\n        instrumentation);\n    }\n\n    store.initialize(uri, conf, instrumentation);\n    setConf(conf);\n    this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n    this.workingDir \u003d new Path(\"/user\", UserGroupInformation.getCurrentUser()\n        .getShortUserName()).makeQualified(getUri(), getWorkingDirectory());\n    this.blockSize \u003d conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME,\n        MAX_AZURE_BLOCK_SIZE);\n\n    this.appendSupportEnabled \u003d conf.getBoolean(APPEND_SUPPORT_ENABLE_PROPERTY_NAME, false);\n    LOG.debug(\"NativeAzureFileSystem. Initializing.\");\n    LOG.debug(\"  blockSize  \u003d {}\",\n        conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME, MAX_AZURE_BLOCK_SIZE));\n\n    // Initialize thread counts from user configuration\n    deleteThreadCount \u003d conf.getInt(AZURE_DELETE_THREADS, DEFAULT_AZURE_DELETE_THREADS);\n    renameThreadCount \u003d conf.getInt(AZURE_RENAME_THREADS, DEFAULT_AZURE_RENAME_THREADS);\n\n    boolean useSecureMode \u003d conf.getBoolean(AzureNativeFileSystemStore.KEY_USE_SECURE_MODE,\n        AzureNativeFileSystemStore.DEFAULT_USE_SECURE_MODE);\n\n    this.azureAuthorization \u003d useSecureMode \u0026\u0026\n        conf.getBoolean(KEY_AZURE_AUTHORIZATION, DEFAULT_AZURE_AUTHORIZATION);\n\n    if (this.azureAuthorization) {\n\n      this.authorizer \u003d\n          new RemoteWasbAuthorizerImpl();\n      authorizer.init(conf);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "52d7d5aa1a303cf70519a61487641211f4267c6f": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-13930. Azure: Add Authorization support to WASB. Contributed by Sivaguru Sankaridurg and Dushyanth\"\n\nThis reverts commit 6b7cd62b8cf12616b13142f2eb2cfc2f25796f0f.\n",
      "commitDate": "06/03/17 5:10 PM",
      "commitName": "52d7d5aa1a303cf70519a61487641211f4267c6f",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "06/03/17 5:00 PM",
      "commitNameOld": "c571cda5c7d929477961dfff4176d7de4944d874",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,42 @@\n   public void initialize(URI uri, Configuration conf)\n       throws IOException, IllegalArgumentException {\n     // Check authority for the URI to guarantee that it is non-null.\n     uri \u003d reconstructAuthorityIfNeeded(uri, conf);\n     if (null \u003d\u003d uri.getAuthority()) {\n       final String errMsg \u003d String\n           .format(\"Cannot initialize WASB file system, URI authority not recognized.\");\n       throw new IllegalArgumentException(errMsg);\n     }\n     super.initialize(uri, conf);\n \n     if (store \u003d\u003d null) {\n       store \u003d createDefaultStore(conf);\n     }\n \n     instrumentation \u003d new AzureFileSystemInstrumentation(conf);\n     if(!conf.getBoolean(SKIP_AZURE_METRICS_PROPERTY_NAME, false)) {\n       // Make sure the metrics system is available before interacting with Azure\n       AzureFileSystemMetricsSystem.fileSystemStarted();\n       metricsSourceName \u003d newMetricsSourceName();\n       String sourceDesc \u003d \"Azure Storage Volume File System metrics\";\n       AzureFileSystemMetricsSystem.registerSource(metricsSourceName, sourceDesc,\n         instrumentation);\n     }\n \n     store.initialize(uri, conf, instrumentation);\n     setConf(conf);\n     this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n     this.workingDir \u003d new Path(\"/user\", UserGroupInformation.getCurrentUser()\n         .getShortUserName()).makeQualified(getUri(), getWorkingDirectory());\n     this.blockSize \u003d conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME,\n         MAX_AZURE_BLOCK_SIZE);\n \n     this.appendSupportEnabled \u003d conf.getBoolean(APPEND_SUPPORT_ENABLE_PROPERTY_NAME, false);\n     LOG.debug(\"NativeAzureFileSystem. Initializing.\");\n     LOG.debug(\"  blockSize  \u003d {}\",\n         conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME, MAX_AZURE_BLOCK_SIZE));\n \n     // Initialize thread counts from user configuration\n     deleteThreadCount \u003d conf.getInt(AZURE_DELETE_THREADS, DEFAULT_AZURE_DELETE_THREADS);\n     renameThreadCount \u003d conf.getInt(AZURE_RENAME_THREADS, DEFAULT_AZURE_RENAME_THREADS);\n-\n-    this.azureAuthorization \u003d conf.getBoolean(KEY_AZURE_AUTHORIZATION,\n-        DEFAULT_AZURE_AUTHORIZATION);\n-    this.kerberosSupportEnabled \u003d conf.getBoolean(\n-        Constants.AZURE_KERBEROS_SUPPORT_PROPERTY_NAME, false);\n-\n-    if (this.azureAuthorization) {\n-\n-      this.authorizer \u003d\n-          new RemoteWasbAuthorizerImpl();\n-      authorizer.init(conf);\n-    }\n-    if (UserGroupInformation.isSecurityEnabled() \u0026\u0026 kerberosSupportEnabled) {\n-      DelegationTokenAuthenticator authenticator \u003d new KerberosDelegationTokenAuthenticator();\n-      authURL \u003d new DelegationTokenAuthenticatedURL(authenticator);\n-      credServiceUrl \u003d conf.get(Constants.KEY_CRED_SERVICE_URL, String\n-          .format(\"http://%s:%s\",\n-              InetAddress.getLocalHost().getCanonicalHostName(),\n-              Constants.DEFAULT_CRED_SERVICE_PORT));\n-    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration conf)\n      throws IOException, IllegalArgumentException {\n    // Check authority for the URI to guarantee that it is non-null.\n    uri \u003d reconstructAuthorityIfNeeded(uri, conf);\n    if (null \u003d\u003d uri.getAuthority()) {\n      final String errMsg \u003d String\n          .format(\"Cannot initialize WASB file system, URI authority not recognized.\");\n      throw new IllegalArgumentException(errMsg);\n    }\n    super.initialize(uri, conf);\n\n    if (store \u003d\u003d null) {\n      store \u003d createDefaultStore(conf);\n    }\n\n    instrumentation \u003d new AzureFileSystemInstrumentation(conf);\n    if(!conf.getBoolean(SKIP_AZURE_METRICS_PROPERTY_NAME, false)) {\n      // Make sure the metrics system is available before interacting with Azure\n      AzureFileSystemMetricsSystem.fileSystemStarted();\n      metricsSourceName \u003d newMetricsSourceName();\n      String sourceDesc \u003d \"Azure Storage Volume File System metrics\";\n      AzureFileSystemMetricsSystem.registerSource(metricsSourceName, sourceDesc,\n        instrumentation);\n    }\n\n    store.initialize(uri, conf, instrumentation);\n    setConf(conf);\n    this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n    this.workingDir \u003d new Path(\"/user\", UserGroupInformation.getCurrentUser()\n        .getShortUserName()).makeQualified(getUri(), getWorkingDirectory());\n    this.blockSize \u003d conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME,\n        MAX_AZURE_BLOCK_SIZE);\n\n    this.appendSupportEnabled \u003d conf.getBoolean(APPEND_SUPPORT_ENABLE_PROPERTY_NAME, false);\n    LOG.debug(\"NativeAzureFileSystem. Initializing.\");\n    LOG.debug(\"  blockSize  \u003d {}\",\n        conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME, MAX_AZURE_BLOCK_SIZE));\n\n    // Initialize thread counts from user configuration\n    deleteThreadCount \u003d conf.getInt(AZURE_DELETE_THREADS, DEFAULT_AZURE_DELETE_THREADS);\n    renameThreadCount \u003d conf.getInt(AZURE_RENAME_THREADS, DEFAULT_AZURE_RENAME_THREADS);\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "6b7cd62b8cf12616b13142f2eb2cfc2f25796f0f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13930. Azure: Add Authorization support to WASB. Contributed by Sivaguru Sankaridurg and Dushyanth\n",
      "commitDate": "03/03/17 5:09 PM",
      "commitName": "6b7cd62b8cf12616b13142f2eb2cfc2f25796f0f",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "29/12/16 4:24 PM",
      "commitNameOld": "c6a5b689db573046819f0e9193cb042e6c7298f4",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 64.03,
      "commitsBetweenForRepo": 324,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,62 @@\n   public void initialize(URI uri, Configuration conf)\n       throws IOException, IllegalArgumentException {\n     // Check authority for the URI to guarantee that it is non-null.\n     uri \u003d reconstructAuthorityIfNeeded(uri, conf);\n     if (null \u003d\u003d uri.getAuthority()) {\n       final String errMsg \u003d String\n           .format(\"Cannot initialize WASB file system, URI authority not recognized.\");\n       throw new IllegalArgumentException(errMsg);\n     }\n     super.initialize(uri, conf);\n \n     if (store \u003d\u003d null) {\n       store \u003d createDefaultStore(conf);\n     }\n \n     instrumentation \u003d new AzureFileSystemInstrumentation(conf);\n     if(!conf.getBoolean(SKIP_AZURE_METRICS_PROPERTY_NAME, false)) {\n       // Make sure the metrics system is available before interacting with Azure\n       AzureFileSystemMetricsSystem.fileSystemStarted();\n       metricsSourceName \u003d newMetricsSourceName();\n       String sourceDesc \u003d \"Azure Storage Volume File System metrics\";\n       AzureFileSystemMetricsSystem.registerSource(metricsSourceName, sourceDesc,\n         instrumentation);\n     }\n \n     store.initialize(uri, conf, instrumentation);\n     setConf(conf);\n     this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n     this.workingDir \u003d new Path(\"/user\", UserGroupInformation.getCurrentUser()\n         .getShortUserName()).makeQualified(getUri(), getWorkingDirectory());\n     this.blockSize \u003d conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME,\n         MAX_AZURE_BLOCK_SIZE);\n \n     this.appendSupportEnabled \u003d conf.getBoolean(APPEND_SUPPORT_ENABLE_PROPERTY_NAME, false);\n     LOG.debug(\"NativeAzureFileSystem. Initializing.\");\n     LOG.debug(\"  blockSize  \u003d {}\",\n         conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME, MAX_AZURE_BLOCK_SIZE));\n \n     // Initialize thread counts from user configuration\n     deleteThreadCount \u003d conf.getInt(AZURE_DELETE_THREADS, DEFAULT_AZURE_DELETE_THREADS);\n     renameThreadCount \u003d conf.getInt(AZURE_RENAME_THREADS, DEFAULT_AZURE_RENAME_THREADS);\n+\n+    this.azureAuthorization \u003d conf.getBoolean(KEY_AZURE_AUTHORIZATION,\n+        DEFAULT_AZURE_AUTHORIZATION);\n+    this.kerberosSupportEnabled \u003d conf.getBoolean(\n+        Constants.AZURE_KERBEROS_SUPPORT_PROPERTY_NAME, false);\n+\n+    if (this.azureAuthorization) {\n+\n+      this.authorizer \u003d\n+          new RemoteWasbAuthorizerImpl();\n+      authorizer.init(conf);\n+    }\n+    if (UserGroupInformation.isSecurityEnabled() \u0026\u0026 kerberosSupportEnabled) {\n+      DelegationTokenAuthenticator authenticator \u003d new KerberosDelegationTokenAuthenticator();\n+      authURL \u003d new DelegationTokenAuthenticatedURL(authenticator);\n+      credServiceUrl \u003d conf.get(Constants.KEY_CRED_SERVICE_URL, String\n+          .format(\"http://%s:%s\",\n+              InetAddress.getLocalHost().getCanonicalHostName(),\n+              Constants.DEFAULT_CRED_SERVICE_PORT));\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration conf)\n      throws IOException, IllegalArgumentException {\n    // Check authority for the URI to guarantee that it is non-null.\n    uri \u003d reconstructAuthorityIfNeeded(uri, conf);\n    if (null \u003d\u003d uri.getAuthority()) {\n      final String errMsg \u003d String\n          .format(\"Cannot initialize WASB file system, URI authority not recognized.\");\n      throw new IllegalArgumentException(errMsg);\n    }\n    super.initialize(uri, conf);\n\n    if (store \u003d\u003d null) {\n      store \u003d createDefaultStore(conf);\n    }\n\n    instrumentation \u003d new AzureFileSystemInstrumentation(conf);\n    if(!conf.getBoolean(SKIP_AZURE_METRICS_PROPERTY_NAME, false)) {\n      // Make sure the metrics system is available before interacting with Azure\n      AzureFileSystemMetricsSystem.fileSystemStarted();\n      metricsSourceName \u003d newMetricsSourceName();\n      String sourceDesc \u003d \"Azure Storage Volume File System metrics\";\n      AzureFileSystemMetricsSystem.registerSource(metricsSourceName, sourceDesc,\n        instrumentation);\n    }\n\n    store.initialize(uri, conf, instrumentation);\n    setConf(conf);\n    this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n    this.workingDir \u003d new Path(\"/user\", UserGroupInformation.getCurrentUser()\n        .getShortUserName()).makeQualified(getUri(), getWorkingDirectory());\n    this.blockSize \u003d conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME,\n        MAX_AZURE_BLOCK_SIZE);\n\n    this.appendSupportEnabled \u003d conf.getBoolean(APPEND_SUPPORT_ENABLE_PROPERTY_NAME, false);\n    LOG.debug(\"NativeAzureFileSystem. Initializing.\");\n    LOG.debug(\"  blockSize  \u003d {}\",\n        conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME, MAX_AZURE_BLOCK_SIZE));\n\n    // Initialize thread counts from user configuration\n    deleteThreadCount \u003d conf.getInt(AZURE_DELETE_THREADS, DEFAULT_AZURE_DELETE_THREADS);\n    renameThreadCount \u003d conf.getInt(AZURE_RENAME_THREADS, DEFAULT_AZURE_RENAME_THREADS);\n\n    this.azureAuthorization \u003d conf.getBoolean(KEY_AZURE_AUTHORIZATION,\n        DEFAULT_AZURE_AUTHORIZATION);\n    this.kerberosSupportEnabled \u003d conf.getBoolean(\n        Constants.AZURE_KERBEROS_SUPPORT_PROPERTY_NAME, false);\n\n    if (this.azureAuthorization) {\n\n      this.authorizer \u003d\n          new RemoteWasbAuthorizerImpl();\n      authorizer.init(conf);\n    }\n    if (UserGroupInformation.isSecurityEnabled() \u0026\u0026 kerberosSupportEnabled) {\n      DelegationTokenAuthenticator authenticator \u003d new KerberosDelegationTokenAuthenticator();\n      authURL \u003d new DelegationTokenAuthenticatedURL(authenticator);\n      credServiceUrl \u003d conf.get(Constants.KEY_CRED_SERVICE_URL, String\n          .format(\"http://%s:%s\",\n              InetAddress.getLocalHost().getCanonicalHostName(),\n              Constants.DEFAULT_CRED_SERVICE_PORT));\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "2ed58c40e5dcbf5c5303c00e85096085b1055f85": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13403. AzureNativeFileSystem rename/delete performance improvements. Contributed by Subramanyam Pattipaka.\n",
      "commitDate": "08/08/16 12:28 PM",
      "commitName": "2ed58c40e5dcbf5c5303c00e85096085b1055f85",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "08/04/16 1:36 PM",
      "commitNameOld": "843ee8d59d8bacbca0d87ccf0790772e39d16138",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 121.95,
      "commitsBetweenForRepo": 924,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,42 @@\n   public void initialize(URI uri, Configuration conf)\n       throws IOException, IllegalArgumentException {\n     // Check authority for the URI to guarantee that it is non-null.\n     uri \u003d reconstructAuthorityIfNeeded(uri, conf);\n     if (null \u003d\u003d uri.getAuthority()) {\n       final String errMsg \u003d String\n           .format(\"Cannot initialize WASB file system, URI authority not recognized.\");\n       throw new IllegalArgumentException(errMsg);\n     }\n     super.initialize(uri, conf);\n \n     if (store \u003d\u003d null) {\n       store \u003d createDefaultStore(conf);\n     }\n \n     instrumentation \u003d new AzureFileSystemInstrumentation(conf);\n     if(!conf.getBoolean(SKIP_AZURE_METRICS_PROPERTY_NAME, false)) {\n       // Make sure the metrics system is available before interacting with Azure\n       AzureFileSystemMetricsSystem.fileSystemStarted();\n       metricsSourceName \u003d newMetricsSourceName();\n       String sourceDesc \u003d \"Azure Storage Volume File System metrics\";\n       AzureFileSystemMetricsSystem.registerSource(metricsSourceName, sourceDesc,\n         instrumentation);\n     }\n \n     store.initialize(uri, conf, instrumentation);\n     setConf(conf);\n     this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n     this.workingDir \u003d new Path(\"/user\", UserGroupInformation.getCurrentUser()\n         .getShortUserName()).makeQualified(getUri(), getWorkingDirectory());\n     this.blockSize \u003d conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME,\n         MAX_AZURE_BLOCK_SIZE);\n \n     this.appendSupportEnabled \u003d conf.getBoolean(APPEND_SUPPORT_ENABLE_PROPERTY_NAME, false);\n     LOG.debug(\"NativeAzureFileSystem. Initializing.\");\n     LOG.debug(\"  blockSize  \u003d {}\",\n         conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME, MAX_AZURE_BLOCK_SIZE));\n \n+    // Initialize thread counts from user configuration\n+    deleteThreadCount \u003d conf.getInt(AZURE_DELETE_THREADS, DEFAULT_AZURE_DELETE_THREADS);\n+    renameThreadCount \u003d conf.getInt(AZURE_RENAME_THREADS, DEFAULT_AZURE_RENAME_THREADS);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration conf)\n      throws IOException, IllegalArgumentException {\n    // Check authority for the URI to guarantee that it is non-null.\n    uri \u003d reconstructAuthorityIfNeeded(uri, conf);\n    if (null \u003d\u003d uri.getAuthority()) {\n      final String errMsg \u003d String\n          .format(\"Cannot initialize WASB file system, URI authority not recognized.\");\n      throw new IllegalArgumentException(errMsg);\n    }\n    super.initialize(uri, conf);\n\n    if (store \u003d\u003d null) {\n      store \u003d createDefaultStore(conf);\n    }\n\n    instrumentation \u003d new AzureFileSystemInstrumentation(conf);\n    if(!conf.getBoolean(SKIP_AZURE_METRICS_PROPERTY_NAME, false)) {\n      // Make sure the metrics system is available before interacting with Azure\n      AzureFileSystemMetricsSystem.fileSystemStarted();\n      metricsSourceName \u003d newMetricsSourceName();\n      String sourceDesc \u003d \"Azure Storage Volume File System metrics\";\n      AzureFileSystemMetricsSystem.registerSource(metricsSourceName, sourceDesc,\n        instrumentation);\n    }\n\n    store.initialize(uri, conf, instrumentation);\n    setConf(conf);\n    this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n    this.workingDir \u003d new Path(\"/user\", UserGroupInformation.getCurrentUser()\n        .getShortUserName()).makeQualified(getUri(), getWorkingDirectory());\n    this.blockSize \u003d conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME,\n        MAX_AZURE_BLOCK_SIZE);\n\n    this.appendSupportEnabled \u003d conf.getBoolean(APPEND_SUPPORT_ENABLE_PROPERTY_NAME, false);\n    LOG.debug(\"NativeAzureFileSystem. Initializing.\");\n    LOG.debug(\"  blockSize  \u003d {}\",\n        conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME, MAX_AZURE_BLOCK_SIZE));\n\n    // Initialize thread counts from user configuration\n    deleteThreadCount \u003d conf.getInt(AZURE_DELETE_THREADS, DEFAULT_AZURE_DELETE_THREADS);\n    renameThreadCount \u003d conf.getInt(AZURE_RENAME_THREADS, DEFAULT_AZURE_RENAME_THREADS);\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "8bc93db2e7c64830b6a662f28c8917a9eef4e7c9": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12635. Adding Append API support for WASB. Contributed by Dushyanth.\n",
      "commitDate": "18/01/16 9:08 AM",
      "commitName": "8bc93db2e7c64830b6a662f28c8917a9eef4e7c9",
      "commitAuthor": "cnauroth",
      "commitDateOld": "09/01/16 10:18 PM",
      "commitNameOld": "0e76f1fceaaaeb66bdb4818f43b9a55fc092bf79",
      "commitAuthorOld": "cnauroth",
      "daysBetweenCommits": 8.45,
      "commitsBetweenForRepo": 64,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   public void initialize(URI uri, Configuration conf)\n       throws IOException, IllegalArgumentException {\n     // Check authority for the URI to guarantee that it is non-null.\n     uri \u003d reconstructAuthorityIfNeeded(uri, conf);\n     if (null \u003d\u003d uri.getAuthority()) {\n       final String errMsg \u003d String\n           .format(\"Cannot initialize WASB file system, URI authority not recognized.\");\n       throw new IllegalArgumentException(errMsg);\n     }\n     super.initialize(uri, conf);\n \n     if (store \u003d\u003d null) {\n       store \u003d createDefaultStore(conf);\n     }\n \n     instrumentation \u003d new AzureFileSystemInstrumentation(conf);\n     if(!conf.getBoolean(SKIP_AZURE_METRICS_PROPERTY_NAME, false)) {\n       // Make sure the metrics system is available before interacting with Azure\n       AzureFileSystemMetricsSystem.fileSystemStarted();\n       metricsSourceName \u003d newMetricsSourceName();\n       String sourceDesc \u003d \"Azure Storage Volume File System metrics\";\n       AzureFileSystemMetricsSystem.registerSource(metricsSourceName, sourceDesc,\n         instrumentation);\n     }\n \n     store.initialize(uri, conf, instrumentation);\n     setConf(conf);\n     this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n     this.workingDir \u003d new Path(\"/user\", UserGroupInformation.getCurrentUser()\n         .getShortUserName()).makeQualified(getUri(), getWorkingDirectory());\n     this.blockSize \u003d conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME,\n         MAX_AZURE_BLOCK_SIZE);\n \n-\n+    this.appendSupportEnabled \u003d conf.getBoolean(APPEND_SUPPORT_ENABLE_PROPERTY_NAME, false);\n     LOG.debug(\"NativeAzureFileSystem. Initializing.\");\n     LOG.debug(\"  blockSize  \u003d {}\",\n         conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME, MAX_AZURE_BLOCK_SIZE));\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration conf)\n      throws IOException, IllegalArgumentException {\n    // Check authority for the URI to guarantee that it is non-null.\n    uri \u003d reconstructAuthorityIfNeeded(uri, conf);\n    if (null \u003d\u003d uri.getAuthority()) {\n      final String errMsg \u003d String\n          .format(\"Cannot initialize WASB file system, URI authority not recognized.\");\n      throw new IllegalArgumentException(errMsg);\n    }\n    super.initialize(uri, conf);\n\n    if (store \u003d\u003d null) {\n      store \u003d createDefaultStore(conf);\n    }\n\n    instrumentation \u003d new AzureFileSystemInstrumentation(conf);\n    if(!conf.getBoolean(SKIP_AZURE_METRICS_PROPERTY_NAME, false)) {\n      // Make sure the metrics system is available before interacting with Azure\n      AzureFileSystemMetricsSystem.fileSystemStarted();\n      metricsSourceName \u003d newMetricsSourceName();\n      String sourceDesc \u003d \"Azure Storage Volume File System metrics\";\n      AzureFileSystemMetricsSystem.registerSource(metricsSourceName, sourceDesc,\n        instrumentation);\n    }\n\n    store.initialize(uri, conf, instrumentation);\n    setConf(conf);\n    this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n    this.workingDir \u003d new Path(\"/user\", UserGroupInformation.getCurrentUser()\n        .getShortUserName()).makeQualified(getUri(), getWorkingDirectory());\n    this.blockSize \u003d conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME,\n        MAX_AZURE_BLOCK_SIZE);\n\n    this.appendSupportEnabled \u003d conf.getBoolean(APPEND_SUPPORT_ENABLE_PROPERTY_NAME, false);\n    LOG.debug(\"NativeAzureFileSystem. Initializing.\");\n    LOG.debug(\"  blockSize  \u003d {}\",\n        conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME, MAX_AZURE_BLOCK_SIZE));\n\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "5f6edb30c2bb648d5564c951edc25645e17e6636": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12350. WASB Logging: Improve WASB Logging around deletes, reads and writes. Contributed by Dushyanth.\n",
      "commitDate": "05/10/15 8:11 PM",
      "commitName": "5f6edb30c2bb648d5564c951edc25645e17e6636",
      "commitAuthor": "cnauroth",
      "commitDateOld": "28/09/15 3:31 PM",
      "commitNameOld": "3abbdc929bde05f8819f5410cef1eaeb8940203f",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 7.19,
      "commitsBetweenForRepo": 44,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   public void initialize(URI uri, Configuration conf)\n       throws IOException, IllegalArgumentException {\n     // Check authority for the URI to guarantee that it is non-null.\n     uri \u003d reconstructAuthorityIfNeeded(uri, conf);\n     if (null \u003d\u003d uri.getAuthority()) {\n       final String errMsg \u003d String\n           .format(\"Cannot initialize WASB file system, URI authority not recognized.\");\n       throw new IllegalArgumentException(errMsg);\n     }\n     super.initialize(uri, conf);\n \n     if (store \u003d\u003d null) {\n       store \u003d createDefaultStore(conf);\n     }\n \n     instrumentation \u003d new AzureFileSystemInstrumentation(conf);\n     if(!conf.getBoolean(SKIP_AZURE_METRICS_PROPERTY_NAME, false)) {\n       // Make sure the metrics system is available before interacting with Azure\n       AzureFileSystemMetricsSystem.fileSystemStarted();\n       metricsSourceName \u003d newMetricsSourceName();\n       String sourceDesc \u003d \"Azure Storage Volume File System metrics\";\n       AzureFileSystemMetricsSystem.registerSource(metricsSourceName, sourceDesc,\n         instrumentation);\n     }\n \n     store.initialize(uri, conf, instrumentation);\n     setConf(conf);\n     this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n     this.workingDir \u003d new Path(\"/user\", UserGroupInformation.getCurrentUser()\n         .getShortUserName()).makeQualified(getUri(), getWorkingDirectory());\n     this.blockSize \u003d conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME,\n         MAX_AZURE_BLOCK_SIZE);\n \n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"NativeAzureFileSystem. Initializing.\");\n-      LOG.debug(\"  blockSize  \u003d \"\n-          + conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME, MAX_AZURE_BLOCK_SIZE));\n-    }\n+\n+    LOG.debug(\"NativeAzureFileSystem. Initializing.\");\n+    LOG.debug(\"  blockSize  \u003d {}\",\n+        conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME, MAX_AZURE_BLOCK_SIZE));\n+\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration conf)\n      throws IOException, IllegalArgumentException {\n    // Check authority for the URI to guarantee that it is non-null.\n    uri \u003d reconstructAuthorityIfNeeded(uri, conf);\n    if (null \u003d\u003d uri.getAuthority()) {\n      final String errMsg \u003d String\n          .format(\"Cannot initialize WASB file system, URI authority not recognized.\");\n      throw new IllegalArgumentException(errMsg);\n    }\n    super.initialize(uri, conf);\n\n    if (store \u003d\u003d null) {\n      store \u003d createDefaultStore(conf);\n    }\n\n    instrumentation \u003d new AzureFileSystemInstrumentation(conf);\n    if(!conf.getBoolean(SKIP_AZURE_METRICS_PROPERTY_NAME, false)) {\n      // Make sure the metrics system is available before interacting with Azure\n      AzureFileSystemMetricsSystem.fileSystemStarted();\n      metricsSourceName \u003d newMetricsSourceName();\n      String sourceDesc \u003d \"Azure Storage Volume File System metrics\";\n      AzureFileSystemMetricsSystem.registerSource(metricsSourceName, sourceDesc,\n        instrumentation);\n    }\n\n    store.initialize(uri, conf, instrumentation);\n    setConf(conf);\n    this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n    this.workingDir \u003d new Path(\"/user\", UserGroupInformation.getCurrentUser()\n        .getShortUserName()).makeQualified(getUri(), getWorkingDirectory());\n    this.blockSize \u003d conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME,\n        MAX_AZURE_BLOCK_SIZE);\n\n\n    LOG.debug(\"NativeAzureFileSystem. Initializing.\");\n    LOG.debug(\"  blockSize  \u003d {}\",\n        conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME, MAX_AZURE_BLOCK_SIZE));\n\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "734eeb4f357ad3210355a0d3fdbc80706a770d61": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11248. Add hadoop configuration to disable Azure Filesystem metrics collection. Contributed by Shanyu Zhao.\n",
      "commitDate": "03/11/14 2:29 PM",
      "commitName": "734eeb4f357ad3210355a0d3fdbc80706a770d61",
      "commitAuthor": "cnauroth",
      "commitDateOld": "08/10/14 2:20 PM",
      "commitNameOld": "2217e2f8ff418b88eac6ad36cafe3a9795a11f40",
      "commitAuthorOld": "cnauroth",
      "daysBetweenCommits": 26.05,
      "commitsBetweenForRepo": 231,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,39 @@\n   public void initialize(URI uri, Configuration conf)\n       throws IOException, IllegalArgumentException {\n     // Check authority for the URI to guarantee that it is non-null.\n     uri \u003d reconstructAuthorityIfNeeded(uri, conf);\n     if (null \u003d\u003d uri.getAuthority()) {\n       final String errMsg \u003d String\n           .format(\"Cannot initialize WASB file system, URI authority not recognized.\");\n       throw new IllegalArgumentException(errMsg);\n     }\n     super.initialize(uri, conf);\n \n     if (store \u003d\u003d null) {\n       store \u003d createDefaultStore(conf);\n     }\n \n-    // Make sure the metrics system is available before interacting with Azure\n-    AzureFileSystemMetricsSystem.fileSystemStarted();\n-    metricsSourceName \u003d newMetricsSourceName();\n-    String sourceDesc \u003d \"Azure Storage Volume File System metrics\";\n     instrumentation \u003d new AzureFileSystemInstrumentation(conf);\n-    AzureFileSystemMetricsSystem.registerSource(metricsSourceName, sourceDesc,\n+    if(!conf.getBoolean(SKIP_AZURE_METRICS_PROPERTY_NAME, false)) {\n+      // Make sure the metrics system is available before interacting with Azure\n+      AzureFileSystemMetricsSystem.fileSystemStarted();\n+      metricsSourceName \u003d newMetricsSourceName();\n+      String sourceDesc \u003d \"Azure Storage Volume File System metrics\";\n+      AzureFileSystemMetricsSystem.registerSource(metricsSourceName, sourceDesc,\n         instrumentation);\n+    }\n \n     store.initialize(uri, conf, instrumentation);\n     setConf(conf);\n     this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n     this.workingDir \u003d new Path(\"/user\", UserGroupInformation.getCurrentUser()\n         .getShortUserName()).makeQualified(getUri(), getWorkingDirectory());\n     this.blockSize \u003d conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME,\n         MAX_AZURE_BLOCK_SIZE);\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NativeAzureFileSystem. Initializing.\");\n       LOG.debug(\"  blockSize  \u003d \"\n           + conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME, MAX_AZURE_BLOCK_SIZE));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration conf)\n      throws IOException, IllegalArgumentException {\n    // Check authority for the URI to guarantee that it is non-null.\n    uri \u003d reconstructAuthorityIfNeeded(uri, conf);\n    if (null \u003d\u003d uri.getAuthority()) {\n      final String errMsg \u003d String\n          .format(\"Cannot initialize WASB file system, URI authority not recognized.\");\n      throw new IllegalArgumentException(errMsg);\n    }\n    super.initialize(uri, conf);\n\n    if (store \u003d\u003d null) {\n      store \u003d createDefaultStore(conf);\n    }\n\n    instrumentation \u003d new AzureFileSystemInstrumentation(conf);\n    if(!conf.getBoolean(SKIP_AZURE_METRICS_PROPERTY_NAME, false)) {\n      // Make sure the metrics system is available before interacting with Azure\n      AzureFileSystemMetricsSystem.fileSystemStarted();\n      metricsSourceName \u003d newMetricsSourceName();\n      String sourceDesc \u003d \"Azure Storage Volume File System metrics\";\n      AzureFileSystemMetricsSystem.registerSource(metricsSourceName, sourceDesc,\n        instrumentation);\n    }\n\n    store.initialize(uri, conf, instrumentation);\n    setConf(conf);\n    this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n    this.workingDir \u003d new Path(\"/user\", UserGroupInformation.getCurrentUser()\n        .getShortUserName()).makeQualified(getUri(), getWorkingDirectory());\n    this.blockSize \u003d conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME,\n        MAX_AZURE_BLOCK_SIZE);\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NativeAzureFileSystem. Initializing.\");\n      LOG.debug(\"  blockSize  \u003d \"\n          + conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME, MAX_AZURE_BLOCK_SIZE));\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "2217e2f8ff418b88eac6ad36cafe3a9795a11f40": {
      "type": "Yexceptionschange",
      "commitMessage": "HADOOP-10809. hadoop-azure: page blob support. Contributed by Dexter Bradshaw, Mostafa Elhemali, Eric Hanson, and Mike Liddell.\n",
      "commitDate": "08/10/14 2:20 PM",
      "commitName": "2217e2f8ff418b88eac6ad36cafe3a9795a11f40",
      "commitAuthor": "cnauroth",
      "commitDateOld": "19/09/14 11:33 AM",
      "commitNameOld": "9f03a7c018bb2c497cd0ef758f1a3e08e8163d06",
      "commitAuthorOld": "Allen Wittenauer",
      "daysBetweenCommits": 19.12,
      "commitsBetweenForRepo": 199,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,37 @@\n-  public void initialize(URI uri, Configuration conf) throws IOException {\n+  public void initialize(URI uri, Configuration conf)\n+      throws IOException, IllegalArgumentException {\n     // Check authority for the URI to guarantee that it is non-null.\n     uri \u003d reconstructAuthorityIfNeeded(uri, conf);\n     if (null \u003d\u003d uri.getAuthority()) {\n       final String errMsg \u003d String\n           .format(\"Cannot initialize WASB file system, URI authority not recognized.\");\n       throw new IllegalArgumentException(errMsg);\n     }\n     super.initialize(uri, conf);\n \n     if (store \u003d\u003d null) {\n       store \u003d createDefaultStore(conf);\n     }\n \n     // Make sure the metrics system is available before interacting with Azure\n     AzureFileSystemMetricsSystem.fileSystemStarted();\n     metricsSourceName \u003d newMetricsSourceName();\n     String sourceDesc \u003d \"Azure Storage Volume File System metrics\";\n     instrumentation \u003d new AzureFileSystemInstrumentation(conf);\n     AzureFileSystemMetricsSystem.registerSource(metricsSourceName, sourceDesc,\n         instrumentation);\n \n     store.initialize(uri, conf, instrumentation);\n     setConf(conf);\n     this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n     this.workingDir \u003d new Path(\"/user\", UserGroupInformation.getCurrentUser()\n         .getShortUserName()).makeQualified(getUri(), getWorkingDirectory());\n     this.blockSize \u003d conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME,\n         MAX_AZURE_BLOCK_SIZE);\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NativeAzureFileSystem. Initializing.\");\n       LOG.debug(\"  blockSize  \u003d \"\n           + conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME, MAX_AZURE_BLOCK_SIZE));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration conf)\n      throws IOException, IllegalArgumentException {\n    // Check authority for the URI to guarantee that it is non-null.\n    uri \u003d reconstructAuthorityIfNeeded(uri, conf);\n    if (null \u003d\u003d uri.getAuthority()) {\n      final String errMsg \u003d String\n          .format(\"Cannot initialize WASB file system, URI authority not recognized.\");\n      throw new IllegalArgumentException(errMsg);\n    }\n    super.initialize(uri, conf);\n\n    if (store \u003d\u003d null) {\n      store \u003d createDefaultStore(conf);\n    }\n\n    // Make sure the metrics system is available before interacting with Azure\n    AzureFileSystemMetricsSystem.fileSystemStarted();\n    metricsSourceName \u003d newMetricsSourceName();\n    String sourceDesc \u003d \"Azure Storage Volume File System metrics\";\n    instrumentation \u003d new AzureFileSystemInstrumentation(conf);\n    AzureFileSystemMetricsSystem.registerSource(metricsSourceName, sourceDesc,\n        instrumentation);\n\n    store.initialize(uri, conf, instrumentation);\n    setConf(conf);\n    this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n    this.workingDir \u003d new Path(\"/user\", UserGroupInformation.getCurrentUser()\n        .getShortUserName()).makeQualified(getUri(), getWorkingDirectory());\n    this.blockSize \u003d conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME,\n        MAX_AZURE_BLOCK_SIZE);\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NativeAzureFileSystem. Initializing.\");\n      LOG.debug(\"  blockSize  \u003d \"\n          + conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME, MAX_AZURE_BLOCK_SIZE));\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {
        "oldValue": "[IOException]",
        "newValue": "[IOException, IllegalArgumentException]"
      }
    },
    "0a02b5a19bcca8d0c49d2adfc3909aebdf9d606e": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10840. Fix OutOfMemoryError caused by metrics system in Azure File System. Contributed by Shanyu Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1611247 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/14 10:04 PM",
      "commitName": "0a02b5a19bcca8d0c49d2adfc3909aebdf9d606e",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "24/06/14 1:52 PM",
      "commitNameOld": "0d91576ec31f63402f2db6107a04155368e2632d",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 22.34,
      "commitsBetweenForRepo": 141,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,36 @@\n   public void initialize(URI uri, Configuration conf) throws IOException {\n     // Check authority for the URI to guarantee that it is non-null.\n     uri \u003d reconstructAuthorityIfNeeded(uri, conf);\n     if (null \u003d\u003d uri.getAuthority()) {\n       final String errMsg \u003d String\n           .format(\"Cannot initialize WASB file system, URI authority not recognized.\");\n       throw new IllegalArgumentException(errMsg);\n     }\n     super.initialize(uri, conf);\n \n     if (store \u003d\u003d null) {\n       store \u003d createDefaultStore(conf);\n     }\n \n     // Make sure the metrics system is available before interacting with Azure\n     AzureFileSystemMetricsSystem.fileSystemStarted();\n-    String sourceName \u003d newMetricsSourceName(),\n-        sourceDesc \u003d \"Azure Storage Volume File System metrics\";\n-    instrumentation \u003d DefaultMetricsSystem.instance().register(sourceName,\n-        sourceDesc, new AzureFileSystemInstrumentation(conf));\n-    AzureFileSystemMetricsSystem.registerSource(sourceName, sourceDesc,\n+    metricsSourceName \u003d newMetricsSourceName();\n+    String sourceDesc \u003d \"Azure Storage Volume File System metrics\";\n+    instrumentation \u003d new AzureFileSystemInstrumentation(conf);\n+    AzureFileSystemMetricsSystem.registerSource(metricsSourceName, sourceDesc,\n         instrumentation);\n \n     store.initialize(uri, conf, instrumentation);\n     setConf(conf);\n     this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n     this.workingDir \u003d new Path(\"/user\", UserGroupInformation.getCurrentUser()\n         .getShortUserName()).makeQualified(getUri(), getWorkingDirectory());\n     this.blockSize \u003d conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME,\n         MAX_AZURE_BLOCK_SIZE);\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NativeAzureFileSystem. Initializing.\");\n       LOG.debug(\"  blockSize  \u003d \"\n           + conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME, MAX_AZURE_BLOCK_SIZE));\n     }\n-\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration conf) throws IOException {\n    // Check authority for the URI to guarantee that it is non-null.\n    uri \u003d reconstructAuthorityIfNeeded(uri, conf);\n    if (null \u003d\u003d uri.getAuthority()) {\n      final String errMsg \u003d String\n          .format(\"Cannot initialize WASB file system, URI authority not recognized.\");\n      throw new IllegalArgumentException(errMsg);\n    }\n    super.initialize(uri, conf);\n\n    if (store \u003d\u003d null) {\n      store \u003d createDefaultStore(conf);\n    }\n\n    // Make sure the metrics system is available before interacting with Azure\n    AzureFileSystemMetricsSystem.fileSystemStarted();\n    metricsSourceName \u003d newMetricsSourceName();\n    String sourceDesc \u003d \"Azure Storage Volume File System metrics\";\n    instrumentation \u003d new AzureFileSystemInstrumentation(conf);\n    AzureFileSystemMetricsSystem.registerSource(metricsSourceName, sourceDesc,\n        instrumentation);\n\n    store.initialize(uri, conf, instrumentation);\n    setConf(conf);\n    this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n    this.workingDir \u003d new Path(\"/user\", UserGroupInformation.getCurrentUser()\n        .getShortUserName()).makeQualified(getUri(), getWorkingDirectory());\n    this.blockSize \u003d conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME,\n        MAX_AZURE_BLOCK_SIZE);\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NativeAzureFileSystem. Initializing.\");\n      LOG.debug(\"  blockSize  \u003d \"\n          + conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME, MAX_AZURE_BLOCK_SIZE));\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "0d91576ec31f63402f2db6107a04155368e2632d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10728. Metrics system for Windows Azure Storage Filesystem. Contributed by Dexter Bradshaw, Mostafa Elhemali, Xi Fang, Johannes Klein, David Lao, Mike Liddell, Chuan Liu, Lengning Liu, Ivan Mitic, Michael Rys, Alexander Stojanovic, Brian Swan, and Min Wei.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1605187 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/06/14 1:52 PM",
      "commitName": "0d91576ec31f63402f2db6107a04155368e2632d",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "20/06/14 11:36 AM",
      "commitNameOld": "61bf9f779919206296d2ce84a8a6b2d912709a59",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 4.09,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,38 @@\n   public void initialize(URI uri, Configuration conf) throws IOException {\n     // Check authority for the URI to guarantee that it is non-null.\n     uri \u003d reconstructAuthorityIfNeeded(uri, conf);\n     if (null \u003d\u003d uri.getAuthority()) {\n       final String errMsg \u003d String\n           .format(\"Cannot initialize WASB file system, URI authority not recognized.\");\n       throw new IllegalArgumentException(errMsg);\n     }\n     super.initialize(uri, conf);\n \n     if (store \u003d\u003d null) {\n       store \u003d createDefaultStore(conf);\n     }\n \n-    store.initialize(uri, conf);\n+    // Make sure the metrics system is available before interacting with Azure\n+    AzureFileSystemMetricsSystem.fileSystemStarted();\n+    String sourceName \u003d newMetricsSourceName(),\n+        sourceDesc \u003d \"Azure Storage Volume File System metrics\";\n+    instrumentation \u003d DefaultMetricsSystem.instance().register(sourceName,\n+        sourceDesc, new AzureFileSystemInstrumentation(conf));\n+    AzureFileSystemMetricsSystem.registerSource(sourceName, sourceDesc,\n+        instrumentation);\n+\n+    store.initialize(uri, conf, instrumentation);\n     setConf(conf);\n     this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n     this.workingDir \u003d new Path(\"/user\", UserGroupInformation.getCurrentUser()\n         .getShortUserName()).makeQualified(getUri(), getWorkingDirectory());\n     this.blockSize \u003d conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME,\n         MAX_AZURE_BLOCK_SIZE);\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NativeAzureFileSystem. Initializing.\");\n       LOG.debug(\"  blockSize  \u003d \"\n           + conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME, MAX_AZURE_BLOCK_SIZE));\n     }\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration conf) throws IOException {\n    // Check authority for the URI to guarantee that it is non-null.\n    uri \u003d reconstructAuthorityIfNeeded(uri, conf);\n    if (null \u003d\u003d uri.getAuthority()) {\n      final String errMsg \u003d String\n          .format(\"Cannot initialize WASB file system, URI authority not recognized.\");\n      throw new IllegalArgumentException(errMsg);\n    }\n    super.initialize(uri, conf);\n\n    if (store \u003d\u003d null) {\n      store \u003d createDefaultStore(conf);\n    }\n\n    // Make sure the metrics system is available before interacting with Azure\n    AzureFileSystemMetricsSystem.fileSystemStarted();\n    String sourceName \u003d newMetricsSourceName(),\n        sourceDesc \u003d \"Azure Storage Volume File System metrics\";\n    instrumentation \u003d DefaultMetricsSystem.instance().register(sourceName,\n        sourceDesc, new AzureFileSystemInstrumentation(conf));\n    AzureFileSystemMetricsSystem.registerSource(sourceName, sourceDesc,\n        instrumentation);\n\n    store.initialize(uri, conf, instrumentation);\n    setConf(conf);\n    this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n    this.workingDir \u003d new Path(\"/user\", UserGroupInformation.getCurrentUser()\n        .getShortUserName()).makeQualified(getUri(), getWorkingDirectory());\n    this.blockSize \u003d conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME,\n        MAX_AZURE_BLOCK_SIZE);\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NativeAzureFileSystem. Initializing.\");\n      LOG.debug(\"  blockSize  \u003d \"\n          + conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME, MAX_AZURE_BLOCK_SIZE));\n    }\n\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java",
      "extendedDetails": {}
    },
    "81bc395deb3ba00567dc067d6ca71bacf9e3bc82": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-9629. Support Windows Azure Storage - Blob as a file system in Hadoop. Contributed by Dexter Bradshaw, Mostafa Elhemali, Xi Fang, Johannes Klein, David Lao, Mike Liddell, Chuan Liu, Lengning Liu, Ivan Mitic, Michael Rys, Alexander Stojanovic, Brian Swan, and Min Wei.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1601781 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/06/14 3:26 PM",
      "commitName": "81bc395deb3ba00567dc067d6ca71bacf9e3bc82",
      "commitAuthor": "Chris Nauroth",
      "diff": "@@ -0,0 +1,29 @@\n+  public void initialize(URI uri, Configuration conf) throws IOException {\n+    // Check authority for the URI to guarantee that it is non-null.\n+    uri \u003d reconstructAuthorityIfNeeded(uri, conf);\n+    if (null \u003d\u003d uri.getAuthority()) {\n+      final String errMsg \u003d String\n+          .format(\"Cannot initialize WASB file system, URI authority not recognized.\");\n+      throw new IllegalArgumentException(errMsg);\n+    }\n+    super.initialize(uri, conf);\n+\n+    if (store \u003d\u003d null) {\n+      store \u003d createDefaultStore(conf);\n+    }\n+\n+    store.initialize(uri, conf);\n+    setConf(conf);\n+    this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n+    this.workingDir \u003d new Path(\"/user\", UserGroupInformation.getCurrentUser()\n+        .getShortUserName()).makeQualified(getUri(), getWorkingDirectory());\n+    this.blockSize \u003d conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME,\n+        MAX_AZURE_BLOCK_SIZE);\n+\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"NativeAzureFileSystem. Initializing.\");\n+      LOG.debug(\"  blockSize  \u003d \"\n+          + conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME, MAX_AZURE_BLOCK_SIZE));\n+    }\n+\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration conf) throws IOException {\n    // Check authority for the URI to guarantee that it is non-null.\n    uri \u003d reconstructAuthorityIfNeeded(uri, conf);\n    if (null \u003d\u003d uri.getAuthority()) {\n      final String errMsg \u003d String\n          .format(\"Cannot initialize WASB file system, URI authority not recognized.\");\n      throw new IllegalArgumentException(errMsg);\n    }\n    super.initialize(uri, conf);\n\n    if (store \u003d\u003d null) {\n      store \u003d createDefaultStore(conf);\n    }\n\n    store.initialize(uri, conf);\n    setConf(conf);\n    this.uri \u003d URI.create(uri.getScheme() + \"://\" + uri.getAuthority());\n    this.workingDir \u003d new Path(\"/user\", UserGroupInformation.getCurrentUser()\n        .getShortUserName()).makeQualified(getUri(), getWorkingDirectory());\n    this.blockSize \u003d conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME,\n        MAX_AZURE_BLOCK_SIZE);\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NativeAzureFileSystem. Initializing.\");\n      LOG.debug(\"  blockSize  \u003d \"\n          + conf.getLong(AZURE_BLOCK_SIZE_PROPERTY_NAME, MAX_AZURE_BLOCK_SIZE));\n    }\n\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/NativeAzureFileSystem.java"
    }
  }
}