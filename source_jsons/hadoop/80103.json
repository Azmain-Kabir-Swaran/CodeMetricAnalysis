{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AclEntry.java",
  "functionName": "parseAclEntry",
  "functionId": "parseAclEntry___aclStr-String__includePermission-boolean",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/permission/AclEntry.java",
  "functionStartLine": 263,
  "functionEndLine": 323,
  "numCommitsSeen": 12,
  "timeTaken": 1383,
  "changeHistory": [
    "d1c6accb6f87b08975175580e15f1ff1fe29ab04",
    "9cedad11d8d2197a54732667a15344983de5c437",
    "946456c6d88780abe0251b098dd771e9e1e93ab3",
    "112145727ed93856e803e6193d45cf283bc16390",
    "b98b344b9af99ce34657041b28a98cd3a8b5278d"
  ],
  "changeHistoryShort": {
    "d1c6accb6f87b08975175580e15f1ff1fe29ab04": "Ybodychange",
    "9cedad11d8d2197a54732667a15344983de5c437": "Ybodychange",
    "946456c6d88780abe0251b098dd771e9e1e93ab3": "Ybodychange",
    "112145727ed93856e803e6193d45cf283bc16390": "Ybodychange",
    "b98b344b9af99ce34657041b28a98cd3a8b5278d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d1c6accb6f87b08975175580e15f1ff1fe29ab04": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11602. Fix toUpperCase/toLowerCase to use Locale.ENGLISH. (ozawa)\n",
      "commitDate": "02/03/15 9:17 PM",
      "commitName": "d1c6accb6f87b08975175580e15f1ff1fe29ab04",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "24/02/15 7:32 AM",
      "commitNameOld": "9cedad11d8d2197a54732667a15344983de5c437",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 6.57,
      "commitsBetweenForRepo": 57,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,61 @@\n   public static AclEntry parseAclEntry(String aclStr,\n       boolean includePermission) {\n     AclEntry.Builder builder \u003d new AclEntry.Builder();\n     // Here \"::\" represent one empty string.\n     // StringUtils.getStringCollection() will ignore this.\n     String[] split \u003d aclStr.split(\":\");\n \n     if (split.length \u003d\u003d 0) {\n       throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \" + aclStr);\n     }\n     int index \u003d 0;\n     if (\"default\".equals(split[0])) {\n       // default entry\n       index++;\n       builder.setScope(AclEntryScope.DEFAULT);\n     }\n \n     if (split.length \u003c\u003d index) {\n       throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \" + aclStr);\n     }\n \n     AclEntryType aclType \u003d null;\n     try {\n-      aclType \u003d Enum.valueOf(AclEntryType.class, split[index].toUpperCase());\n+      aclType \u003d Enum.valueOf(\n+          AclEntryType.class, StringUtils.toUpperCase(split[index]));\n       builder.setType(aclType);\n       index++;\n     } catch (IllegalArgumentException iae) {\n       throw new HadoopIllegalArgumentException(\n           \"Invalid type of acl in \u003caclSpec\u003e :\" + aclStr);\n     }\n \n     if (split.length \u003e index) {\n       String name \u003d split[index];\n       if (!name.isEmpty()) {\n         builder.setName(name);\n       }\n       index++;\n     }\n \n     if (includePermission) {\n       if (split.length \u003c\u003d index) {\n         throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \"\n             + aclStr);\n       }\n       String permission \u003d split[index];\n       FsAction fsAction \u003d FsAction.getFsAction(permission);\n       if (null \u003d\u003d fsAction) {\n         throw new HadoopIllegalArgumentException(\n             \"Invalid permission in \u003caclSpec\u003e : \" + aclStr);\n       }\n       builder.setPermission(fsAction);\n       index++;\n     }\n \n     if (split.length \u003e index) {\n       throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \" + aclStr);\n     }\n     AclEntry aclEntry \u003d builder.build();\n     return aclEntry;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static AclEntry parseAclEntry(String aclStr,\n      boolean includePermission) {\n    AclEntry.Builder builder \u003d new AclEntry.Builder();\n    // Here \"::\" represent one empty string.\n    // StringUtils.getStringCollection() will ignore this.\n    String[] split \u003d aclStr.split(\":\");\n\n    if (split.length \u003d\u003d 0) {\n      throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \" + aclStr);\n    }\n    int index \u003d 0;\n    if (\"default\".equals(split[0])) {\n      // default entry\n      index++;\n      builder.setScope(AclEntryScope.DEFAULT);\n    }\n\n    if (split.length \u003c\u003d index) {\n      throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \" + aclStr);\n    }\n\n    AclEntryType aclType \u003d null;\n    try {\n      aclType \u003d Enum.valueOf(\n          AclEntryType.class, StringUtils.toUpperCase(split[index]));\n      builder.setType(aclType);\n      index++;\n    } catch (IllegalArgumentException iae) {\n      throw new HadoopIllegalArgumentException(\n          \"Invalid type of acl in \u003caclSpec\u003e :\" + aclStr);\n    }\n\n    if (split.length \u003e index) {\n      String name \u003d split[index];\n      if (!name.isEmpty()) {\n        builder.setName(name);\n      }\n      index++;\n    }\n\n    if (includePermission) {\n      if (split.length \u003c\u003d index) {\n        throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \"\n            + aclStr);\n      }\n      String permission \u003d split[index];\n      FsAction fsAction \u003d FsAction.getFsAction(permission);\n      if (null \u003d\u003d fsAction) {\n        throw new HadoopIllegalArgumentException(\n            \"Invalid permission in \u003caclSpec\u003e : \" + aclStr);\n      }\n      builder.setPermission(fsAction);\n      index++;\n    }\n\n    if (split.length \u003e index) {\n      throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \" + aclStr);\n    }\n    AclEntry aclEntry \u003d builder.build();\n    return aclEntry;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/permission/AclEntry.java",
      "extendedDetails": {}
    },
    "9cedad11d8d2197a54732667a15344983de5c437": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-11602. Fix toUpperCase/toLowerCase to use Locale.ENGLISH. (ozawa)\"\n\nThis reverts commit 946456c6d88780abe0251b098dd771e9e1e93ab3.\n\nConflicts:\n\thadoop-common-project/hadoop-common/CHANGES.txt\n\thadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/QuotaByStorageTypeEntry.java\n",
      "commitDate": "24/02/15 7:32 AM",
      "commitName": "9cedad11d8d2197a54732667a15344983de5c437",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "18/02/15 8:06 PM",
      "commitNameOld": "946456c6d88780abe0251b098dd771e9e1e93ab3",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 5.48,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,60 @@\n   public static AclEntry parseAclEntry(String aclStr,\n       boolean includePermission) {\n     AclEntry.Builder builder \u003d new AclEntry.Builder();\n     // Here \"::\" represent one empty string.\n     // StringUtils.getStringCollection() will ignore this.\n     String[] split \u003d aclStr.split(\":\");\n \n     if (split.length \u003d\u003d 0) {\n       throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \" + aclStr);\n     }\n     int index \u003d 0;\n     if (\"default\".equals(split[0])) {\n       // default entry\n       index++;\n       builder.setScope(AclEntryScope.DEFAULT);\n     }\n \n     if (split.length \u003c\u003d index) {\n       throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \" + aclStr);\n     }\n \n     AclEntryType aclType \u003d null;\n     try {\n-      aclType \u003d Enum.valueOf(\n-          AclEntryType.class, split[index].toUpperCase(Locale.ENGLISH));\n+      aclType \u003d Enum.valueOf(AclEntryType.class, split[index].toUpperCase());\n       builder.setType(aclType);\n       index++;\n     } catch (IllegalArgumentException iae) {\n       throw new HadoopIllegalArgumentException(\n           \"Invalid type of acl in \u003caclSpec\u003e :\" + aclStr);\n     }\n \n     if (split.length \u003e index) {\n       String name \u003d split[index];\n       if (!name.isEmpty()) {\n         builder.setName(name);\n       }\n       index++;\n     }\n \n     if (includePermission) {\n       if (split.length \u003c\u003d index) {\n         throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \"\n             + aclStr);\n       }\n       String permission \u003d split[index];\n       FsAction fsAction \u003d FsAction.getFsAction(permission);\n       if (null \u003d\u003d fsAction) {\n         throw new HadoopIllegalArgumentException(\n             \"Invalid permission in \u003caclSpec\u003e : \" + aclStr);\n       }\n       builder.setPermission(fsAction);\n       index++;\n     }\n \n     if (split.length \u003e index) {\n       throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \" + aclStr);\n     }\n     AclEntry aclEntry \u003d builder.build();\n     return aclEntry;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static AclEntry parseAclEntry(String aclStr,\n      boolean includePermission) {\n    AclEntry.Builder builder \u003d new AclEntry.Builder();\n    // Here \"::\" represent one empty string.\n    // StringUtils.getStringCollection() will ignore this.\n    String[] split \u003d aclStr.split(\":\");\n\n    if (split.length \u003d\u003d 0) {\n      throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \" + aclStr);\n    }\n    int index \u003d 0;\n    if (\"default\".equals(split[0])) {\n      // default entry\n      index++;\n      builder.setScope(AclEntryScope.DEFAULT);\n    }\n\n    if (split.length \u003c\u003d index) {\n      throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \" + aclStr);\n    }\n\n    AclEntryType aclType \u003d null;\n    try {\n      aclType \u003d Enum.valueOf(AclEntryType.class, split[index].toUpperCase());\n      builder.setType(aclType);\n      index++;\n    } catch (IllegalArgumentException iae) {\n      throw new HadoopIllegalArgumentException(\n          \"Invalid type of acl in \u003caclSpec\u003e :\" + aclStr);\n    }\n\n    if (split.length \u003e index) {\n      String name \u003d split[index];\n      if (!name.isEmpty()) {\n        builder.setName(name);\n      }\n      index++;\n    }\n\n    if (includePermission) {\n      if (split.length \u003c\u003d index) {\n        throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \"\n            + aclStr);\n      }\n      String permission \u003d split[index];\n      FsAction fsAction \u003d FsAction.getFsAction(permission);\n      if (null \u003d\u003d fsAction) {\n        throw new HadoopIllegalArgumentException(\n            \"Invalid permission in \u003caclSpec\u003e : \" + aclStr);\n      }\n      builder.setPermission(fsAction);\n      index++;\n    }\n\n    if (split.length \u003e index) {\n      throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \" + aclStr);\n    }\n    AclEntry aclEntry \u003d builder.build();\n    return aclEntry;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/permission/AclEntry.java",
      "extendedDetails": {}
    },
    "946456c6d88780abe0251b098dd771e9e1e93ab3": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11602. Fix toUpperCase/toLowerCase to use Locale.ENGLISH. (ozawa)\n",
      "commitDate": "18/02/15 8:06 PM",
      "commitName": "946456c6d88780abe0251b098dd771e9e1e93ab3",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "08/12/14 10:23 AM",
      "commitNameOld": "ffe942b82c1208bc7b22899da3a233944cb5ab52",
      "commitAuthorOld": "cnauroth",
      "daysBetweenCommits": 72.41,
      "commitsBetweenForRepo": 563,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,61 @@\n   public static AclEntry parseAclEntry(String aclStr,\n       boolean includePermission) {\n     AclEntry.Builder builder \u003d new AclEntry.Builder();\n     // Here \"::\" represent one empty string.\n     // StringUtils.getStringCollection() will ignore this.\n     String[] split \u003d aclStr.split(\":\");\n \n     if (split.length \u003d\u003d 0) {\n       throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \" + aclStr);\n     }\n     int index \u003d 0;\n     if (\"default\".equals(split[0])) {\n       // default entry\n       index++;\n       builder.setScope(AclEntryScope.DEFAULT);\n     }\n \n     if (split.length \u003c\u003d index) {\n       throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \" + aclStr);\n     }\n \n     AclEntryType aclType \u003d null;\n     try {\n-      aclType \u003d Enum.valueOf(AclEntryType.class, split[index].toUpperCase());\n+      aclType \u003d Enum.valueOf(\n+          AclEntryType.class, split[index].toUpperCase(Locale.ENGLISH));\n       builder.setType(aclType);\n       index++;\n     } catch (IllegalArgumentException iae) {\n       throw new HadoopIllegalArgumentException(\n           \"Invalid type of acl in \u003caclSpec\u003e :\" + aclStr);\n     }\n \n     if (split.length \u003e index) {\n       String name \u003d split[index];\n       if (!name.isEmpty()) {\n         builder.setName(name);\n       }\n       index++;\n     }\n \n     if (includePermission) {\n       if (split.length \u003c\u003d index) {\n         throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \"\n             + aclStr);\n       }\n       String permission \u003d split[index];\n       FsAction fsAction \u003d FsAction.getFsAction(permission);\n       if (null \u003d\u003d fsAction) {\n         throw new HadoopIllegalArgumentException(\n             \"Invalid permission in \u003caclSpec\u003e : \" + aclStr);\n       }\n       builder.setPermission(fsAction);\n       index++;\n     }\n \n     if (split.length \u003e index) {\n       throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \" + aclStr);\n     }\n     AclEntry aclEntry \u003d builder.build();\n     return aclEntry;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static AclEntry parseAclEntry(String aclStr,\n      boolean includePermission) {\n    AclEntry.Builder builder \u003d new AclEntry.Builder();\n    // Here \"::\" represent one empty string.\n    // StringUtils.getStringCollection() will ignore this.\n    String[] split \u003d aclStr.split(\":\");\n\n    if (split.length \u003d\u003d 0) {\n      throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \" + aclStr);\n    }\n    int index \u003d 0;\n    if (\"default\".equals(split[0])) {\n      // default entry\n      index++;\n      builder.setScope(AclEntryScope.DEFAULT);\n    }\n\n    if (split.length \u003c\u003d index) {\n      throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \" + aclStr);\n    }\n\n    AclEntryType aclType \u003d null;\n    try {\n      aclType \u003d Enum.valueOf(\n          AclEntryType.class, split[index].toUpperCase(Locale.ENGLISH));\n      builder.setType(aclType);\n      index++;\n    } catch (IllegalArgumentException iae) {\n      throw new HadoopIllegalArgumentException(\n          \"Invalid type of acl in \u003caclSpec\u003e :\" + aclStr);\n    }\n\n    if (split.length \u003e index) {\n      String name \u003d split[index];\n      if (!name.isEmpty()) {\n        builder.setName(name);\n      }\n      index++;\n    }\n\n    if (includePermission) {\n      if (split.length \u003c\u003d index) {\n        throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \"\n            + aclStr);\n      }\n      String permission \u003d split[index];\n      FsAction fsAction \u003d FsAction.getFsAction(permission);\n      if (null \u003d\u003d fsAction) {\n        throw new HadoopIllegalArgumentException(\n            \"Invalid permission in \u003caclSpec\u003e : \" + aclStr);\n      }\n      builder.setPermission(fsAction);\n      index++;\n    }\n\n    if (split.length \u003e index) {\n      throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \" + aclStr);\n    }\n    AclEntry aclEntry \u003d builder.build();\n    return aclEntry;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/permission/AclEntry.java",
      "extendedDetails": {}
    },
    "112145727ed93856e803e6193d45cf283bc16390": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10507. FsShell setfacl can throw ArrayIndexOutOfBoundsException when no perm is specified. Contributed by Stephen Chu and Sathish Gurram.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1609503 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/07/14 9:57 AM",
      "commitName": "112145727ed93856e803e6193d45cf283bc16390",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "11/06/14 3:35 PM",
      "commitNameOld": "8bfbec8cfb7fe7c7affef98b17c1a07b81fe27f0",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 28.77,
      "commitsBetweenForRepo": 191,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,60 @@\n   public static AclEntry parseAclEntry(String aclStr,\n       boolean includePermission) {\n     AclEntry.Builder builder \u003d new AclEntry.Builder();\n     // Here \"::\" represent one empty string.\n     // StringUtils.getStringCollection() will ignore this.\n     String[] split \u003d aclStr.split(\":\");\n \n     if (split.length \u003d\u003d 0) {\n       throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \" + aclStr);\n     }\n     int index \u003d 0;\n     if (\"default\".equals(split[0])) {\n       // default entry\n       index++;\n       builder.setScope(AclEntryScope.DEFAULT);\n     }\n \n     if (split.length \u003c\u003d index) {\n       throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \" + aclStr);\n     }\n \n     AclEntryType aclType \u003d null;\n     try {\n       aclType \u003d Enum.valueOf(AclEntryType.class, split[index].toUpperCase());\n       builder.setType(aclType);\n       index++;\n     } catch (IllegalArgumentException iae) {\n       throw new HadoopIllegalArgumentException(\n           \"Invalid type of acl in \u003caclSpec\u003e :\" + aclStr);\n     }\n \n     if (split.length \u003e index) {\n       String name \u003d split[index];\n       if (!name.isEmpty()) {\n         builder.setName(name);\n       }\n       index++;\n     }\n \n     if (includePermission) {\n-      if (split.length \u003c index) {\n+      if (split.length \u003c\u003d index) {\n         throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \"\n             + aclStr);\n       }\n       String permission \u003d split[index];\n       FsAction fsAction \u003d FsAction.getFsAction(permission);\n       if (null \u003d\u003d fsAction) {\n         throw new HadoopIllegalArgumentException(\n             \"Invalid permission in \u003caclSpec\u003e : \" + aclStr);\n       }\n       builder.setPermission(fsAction);\n       index++;\n     }\n \n     if (split.length \u003e index) {\n       throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \" + aclStr);\n     }\n     AclEntry aclEntry \u003d builder.build();\n     return aclEntry;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static AclEntry parseAclEntry(String aclStr,\n      boolean includePermission) {\n    AclEntry.Builder builder \u003d new AclEntry.Builder();\n    // Here \"::\" represent one empty string.\n    // StringUtils.getStringCollection() will ignore this.\n    String[] split \u003d aclStr.split(\":\");\n\n    if (split.length \u003d\u003d 0) {\n      throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \" + aclStr);\n    }\n    int index \u003d 0;\n    if (\"default\".equals(split[0])) {\n      // default entry\n      index++;\n      builder.setScope(AclEntryScope.DEFAULT);\n    }\n\n    if (split.length \u003c\u003d index) {\n      throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \" + aclStr);\n    }\n\n    AclEntryType aclType \u003d null;\n    try {\n      aclType \u003d Enum.valueOf(AclEntryType.class, split[index].toUpperCase());\n      builder.setType(aclType);\n      index++;\n    } catch (IllegalArgumentException iae) {\n      throw new HadoopIllegalArgumentException(\n          \"Invalid type of acl in \u003caclSpec\u003e :\" + aclStr);\n    }\n\n    if (split.length \u003e index) {\n      String name \u003d split[index];\n      if (!name.isEmpty()) {\n        builder.setName(name);\n      }\n      index++;\n    }\n\n    if (includePermission) {\n      if (split.length \u003c\u003d index) {\n        throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \"\n            + aclStr);\n      }\n      String permission \u003d split[index];\n      FsAction fsAction \u003d FsAction.getFsAction(permission);\n      if (null \u003d\u003d fsAction) {\n        throw new HadoopIllegalArgumentException(\n            \"Invalid permission in \u003caclSpec\u003e : \" + aclStr);\n      }\n      builder.setPermission(fsAction);\n      index++;\n    }\n\n    if (split.length \u003e index) {\n      throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \" + aclStr);\n    }\n    AclEntry aclEntry \u003d builder.build();\n    return aclEntry;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/permission/AclEntry.java",
      "extendedDetails": {}
    },
    "b98b344b9af99ce34657041b28a98cd3a8b5278d": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10277. setfacl -x fails to parse ACL spec if trying to remove the mask entry. Contributed by Vinay.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4685@1561769 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/01/14 10:03 AM",
      "commitName": "b98b344b9af99ce34657041b28a98cd3a8b5278d",
      "commitAuthor": "Chris Nauroth",
      "diff": "@@ -0,0 +1,60 @@\n+  public static AclEntry parseAclEntry(String aclStr,\n+      boolean includePermission) {\n+    AclEntry.Builder builder \u003d new AclEntry.Builder();\n+    // Here \"::\" represent one empty string.\n+    // StringUtils.getStringCollection() will ignore this.\n+    String[] split \u003d aclStr.split(\":\");\n+\n+    if (split.length \u003d\u003d 0) {\n+      throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \" + aclStr);\n+    }\n+    int index \u003d 0;\n+    if (\"default\".equals(split[0])) {\n+      // default entry\n+      index++;\n+      builder.setScope(AclEntryScope.DEFAULT);\n+    }\n+\n+    if (split.length \u003c\u003d index) {\n+      throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \" + aclStr);\n+    }\n+\n+    AclEntryType aclType \u003d null;\n+    try {\n+      aclType \u003d Enum.valueOf(AclEntryType.class, split[index].toUpperCase());\n+      builder.setType(aclType);\n+      index++;\n+    } catch (IllegalArgumentException iae) {\n+      throw new HadoopIllegalArgumentException(\n+          \"Invalid type of acl in \u003caclSpec\u003e :\" + aclStr);\n+    }\n+\n+    if (split.length \u003e index) {\n+      String name \u003d split[index];\n+      if (!name.isEmpty()) {\n+        builder.setName(name);\n+      }\n+      index++;\n+    }\n+\n+    if (includePermission) {\n+      if (split.length \u003c index) {\n+        throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \"\n+            + aclStr);\n+      }\n+      String permission \u003d split[index];\n+      FsAction fsAction \u003d FsAction.getFsAction(permission);\n+      if (null \u003d\u003d fsAction) {\n+        throw new HadoopIllegalArgumentException(\n+            \"Invalid permission in \u003caclSpec\u003e : \" + aclStr);\n+      }\n+      builder.setPermission(fsAction);\n+      index++;\n+    }\n+\n+    if (split.length \u003e index) {\n+      throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \" + aclStr);\n+    }\n+    AclEntry aclEntry \u003d builder.build();\n+    return aclEntry;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static AclEntry parseAclEntry(String aclStr,\n      boolean includePermission) {\n    AclEntry.Builder builder \u003d new AclEntry.Builder();\n    // Here \"::\" represent one empty string.\n    // StringUtils.getStringCollection() will ignore this.\n    String[] split \u003d aclStr.split(\":\");\n\n    if (split.length \u003d\u003d 0) {\n      throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \" + aclStr);\n    }\n    int index \u003d 0;\n    if (\"default\".equals(split[0])) {\n      // default entry\n      index++;\n      builder.setScope(AclEntryScope.DEFAULT);\n    }\n\n    if (split.length \u003c\u003d index) {\n      throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \" + aclStr);\n    }\n\n    AclEntryType aclType \u003d null;\n    try {\n      aclType \u003d Enum.valueOf(AclEntryType.class, split[index].toUpperCase());\n      builder.setType(aclType);\n      index++;\n    } catch (IllegalArgumentException iae) {\n      throw new HadoopIllegalArgumentException(\n          \"Invalid type of acl in \u003caclSpec\u003e :\" + aclStr);\n    }\n\n    if (split.length \u003e index) {\n      String name \u003d split[index];\n      if (!name.isEmpty()) {\n        builder.setName(name);\n      }\n      index++;\n    }\n\n    if (includePermission) {\n      if (split.length \u003c index) {\n        throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \"\n            + aclStr);\n      }\n      String permission \u003d split[index];\n      FsAction fsAction \u003d FsAction.getFsAction(permission);\n      if (null \u003d\u003d fsAction) {\n        throw new HadoopIllegalArgumentException(\n            \"Invalid permission in \u003caclSpec\u003e : \" + aclStr);\n      }\n      builder.setPermission(fsAction);\n      index++;\n    }\n\n    if (split.length \u003e index) {\n      throw new HadoopIllegalArgumentException(\"Invalid \u003caclSpec\u003e : \" + aclStr);\n    }\n    AclEntry aclEntry \u003d builder.build();\n    return aclEntry;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/permission/AclEntry.java"
    }
  }
}