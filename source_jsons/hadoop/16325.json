{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RouterClientProtocol.java",
  "functionName": "mkdirs",
  "functionId": "mkdirs___src-String__masked-FsPermission__createParent-boolean",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterClientProtocol.java",
  "functionStartLine": 717,
  "functionEndLine": 756,
  "numCommitsSeen": 40,
  "timeTaken": 3574,
  "changeHistory": [
    "48cb58390655b87506fb8b620e4aafd11e38bb34",
    "ffbb6b6557f4eb8587c7d57cda38f2a0de573f8b",
    "6c42d4050461ab71c88f123569649793dc53aebd",
    "e2a3c4494ba27a7b82117dac275b9d115aee7f95",
    "6425ed27ea638da75f656204d6df4adad1d91fe1"
  ],
  "changeHistoryShort": {
    "48cb58390655b87506fb8b620e4aafd11e38bb34": "Ybodychange",
    "ffbb6b6557f4eb8587c7d57cda38f2a0de573f8b": "Ybodychange",
    "6c42d4050461ab71c88f123569649793dc53aebd": "Ybodychange",
    "e2a3c4494ba27a7b82117dac275b9d115aee7f95": "Ybodychange",
    "6425ed27ea638da75f656204d6df4adad1d91fe1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "48cb58390655b87506fb8b620e4aafd11e38bb34": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14710. RBF: Improve some RPC performance by using previous block. Contributed by xuzq.\n",
      "commitDate": "28/08/19 10:48 AM",
      "commitName": "48cb58390655b87506fb8b620e4aafd11e38bb34",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "23/08/19 8:17 PM",
      "commitNameOld": "d2225c8ca8f9bdc5cef7266697518394d8763c88",
      "commitAuthorOld": "Ayush Saxena",
      "daysBetweenCommits": 4.6,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   public boolean mkdirs(String src, FsPermission masked, boolean createParent)\n       throws IOException {\n     rpcServer.checkOperation(NameNode.OperationCategory.WRITE);\n \n     final List\u003cRemoteLocation\u003e locations \u003d\n         rpcServer.getLocationsForPath(src, false);\n     RemoteMethod method \u003d new RemoteMethod(\"mkdirs\",\n         new Class\u003c?\u003e[] {String.class, FsPermission.class, boolean.class},\n         new RemoteParam(), masked, createParent);\n \n     // Create in all locations\n     if (rpcServer.isPathAll(src)) {\n       return rpcClient.invokeAll(locations, method);\n     }\n \n     if (locations.size() \u003e 1) {\n       // Check if this directory already exists\n       try {\n         HdfsFileStatus fileStatus \u003d getFileInfo(src);\n         if (fileStatus !\u003d null) {\n           // When existing, the NN doesn\u0027t return an exception; return true\n           return true;\n         }\n       } catch (IOException ioe) {\n         // Can\u0027t query if this file exists or not.\n         LOG.error(\"Error getting file info for {} while proxying mkdirs: {}\",\n             src, ioe.getMessage());\n       }\n     }\n \n     final RemoteLocation firstLocation \u003d locations.get(0);\n     try {\n-      return (boolean) rpcClient.invokeSingle(firstLocation, method);\n+      return rpcClient.invokeSingle(firstLocation, method, Boolean.class);\n     } catch (IOException ioe) {\n       final List\u003cRemoteLocation\u003e newLocations \u003d checkFaultTolerantRetry(\n           method, src, ioe, firstLocation, locations);\n       return rpcClient.invokeSequential(\n           newLocations, method, Boolean.class, Boolean.TRUE);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean mkdirs(String src, FsPermission masked, boolean createParent)\n      throws IOException {\n    rpcServer.checkOperation(NameNode.OperationCategory.WRITE);\n\n    final List\u003cRemoteLocation\u003e locations \u003d\n        rpcServer.getLocationsForPath(src, false);\n    RemoteMethod method \u003d new RemoteMethod(\"mkdirs\",\n        new Class\u003c?\u003e[] {String.class, FsPermission.class, boolean.class},\n        new RemoteParam(), masked, createParent);\n\n    // Create in all locations\n    if (rpcServer.isPathAll(src)) {\n      return rpcClient.invokeAll(locations, method);\n    }\n\n    if (locations.size() \u003e 1) {\n      // Check if this directory already exists\n      try {\n        HdfsFileStatus fileStatus \u003d getFileInfo(src);\n        if (fileStatus !\u003d null) {\n          // When existing, the NN doesn\u0027t return an exception; return true\n          return true;\n        }\n      } catch (IOException ioe) {\n        // Can\u0027t query if this file exists or not.\n        LOG.error(\"Error getting file info for {} while proxying mkdirs: {}\",\n            src, ioe.getMessage());\n      }\n    }\n\n    final RemoteLocation firstLocation \u003d locations.get(0);\n    try {\n      return rpcClient.invokeSingle(firstLocation, method, Boolean.class);\n    } catch (IOException ioe) {\n      final List\u003cRemoteLocation\u003e newLocations \u003d checkFaultTolerantRetry(\n          method, src, ioe, firstLocation, locations);\n      return rpcClient.invokeSequential(\n          newLocations, method, Boolean.class, Boolean.TRUE);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterClientProtocol.java",
      "extendedDetails": {}
    },
    "ffbb6b6557f4eb8587c7d57cda38f2a0de573f8b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13255. RBF: Fail when try to remove mount point paths. Contributed by Akira Ajisaka.\n",
      "commitDate": "24/06/19 9:33 AM",
      "commitName": "ffbb6b6557f4eb8587c7d57cda38f2a0de573f8b",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "24/06/19 9:33 AM",
      "commitNameOld": "3deb5d345f439cbebcad5296c69689e8334f59ce",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   public boolean mkdirs(String src, FsPermission masked, boolean createParent)\n       throws IOException {\n     rpcServer.checkOperation(NameNode.OperationCategory.WRITE);\n \n     final List\u003cRemoteLocation\u003e locations \u003d\n-        rpcServer.getLocationsForPath(src, true);\n+        rpcServer.getLocationsForPath(src, false);\n     RemoteMethod method \u003d new RemoteMethod(\"mkdirs\",\n         new Class\u003c?\u003e[] {String.class, FsPermission.class, boolean.class},\n         new RemoteParam(), masked, createParent);\n \n     // Create in all locations\n     if (rpcServer.isPathAll(src)) {\n       return rpcClient.invokeAll(locations, method);\n     }\n \n     if (locations.size() \u003e 1) {\n       // Check if this directory already exists\n       try {\n         HdfsFileStatus fileStatus \u003d getFileInfo(src);\n         if (fileStatus !\u003d null) {\n           // When existing, the NN doesn\u0027t return an exception; return true\n           return true;\n         }\n       } catch (IOException ioe) {\n         // Can\u0027t query if this file exists or not.\n         LOG.error(\"Error getting file info for {} while proxying mkdirs: {}\",\n             src, ioe.getMessage());\n       }\n     }\n \n     final RemoteLocation firstLocation \u003d locations.get(0);\n     try {\n       return (boolean) rpcClient.invokeSingle(firstLocation, method);\n     } catch (IOException ioe) {\n       final List\u003cRemoteLocation\u003e newLocations \u003d checkFaultTolerantRetry(\n           method, src, ioe, firstLocation, locations);\n       return rpcClient.invokeSequential(\n           newLocations, method, Boolean.class, Boolean.TRUE);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean mkdirs(String src, FsPermission masked, boolean createParent)\n      throws IOException {\n    rpcServer.checkOperation(NameNode.OperationCategory.WRITE);\n\n    final List\u003cRemoteLocation\u003e locations \u003d\n        rpcServer.getLocationsForPath(src, false);\n    RemoteMethod method \u003d new RemoteMethod(\"mkdirs\",\n        new Class\u003c?\u003e[] {String.class, FsPermission.class, boolean.class},\n        new RemoteParam(), masked, createParent);\n\n    // Create in all locations\n    if (rpcServer.isPathAll(src)) {\n      return rpcClient.invokeAll(locations, method);\n    }\n\n    if (locations.size() \u003e 1) {\n      // Check if this directory already exists\n      try {\n        HdfsFileStatus fileStatus \u003d getFileInfo(src);\n        if (fileStatus !\u003d null) {\n          // When existing, the NN doesn\u0027t return an exception; return true\n          return true;\n        }\n      } catch (IOException ioe) {\n        // Can\u0027t query if this file exists or not.\n        LOG.error(\"Error getting file info for {} while proxying mkdirs: {}\",\n            src, ioe.getMessage());\n      }\n    }\n\n    final RemoteLocation firstLocation \u003d locations.get(0);\n    try {\n      return (boolean) rpcClient.invokeSingle(firstLocation, method);\n    } catch (IOException ioe) {\n      final List\u003cRemoteLocation\u003e newLocations \u003d checkFaultTolerantRetry(\n          method, src, ioe, firstLocation, locations);\n      return rpcClient.invokeSequential(\n          newLocations, method, Boolean.class, Boolean.TRUE);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterClientProtocol.java",
      "extendedDetails": {}
    },
    "6c42d4050461ab71c88f123569649793dc53aebd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14316. RBF: Support unavailable subclusters for mount points with multiple destinations. Contributed by Inigo Goiri.\n",
      "commitDate": "24/06/19 9:33 AM",
      "commitName": "6c42d4050461ab71c88f123569649793dc53aebd",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "24/06/19 9:33 AM",
      "commitNameOld": "f539e2a4ee93c4ee479fe25e8062c8ab4c7f8ba8",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,40 @@\n   public boolean mkdirs(String src, FsPermission masked, boolean createParent)\n       throws IOException {\n     rpcServer.checkOperation(NameNode.OperationCategory.WRITE);\n \n     final List\u003cRemoteLocation\u003e locations \u003d\n         rpcServer.getLocationsForPath(src, true);\n     RemoteMethod method \u003d new RemoteMethod(\"mkdirs\",\n         new Class\u003c?\u003e[] {String.class, FsPermission.class, boolean.class},\n         new RemoteParam(), masked, createParent);\n \n     // Create in all locations\n     if (rpcServer.isPathAll(src)) {\n       return rpcClient.invokeAll(locations, method);\n     }\n \n     if (locations.size() \u003e 1) {\n       // Check if this directory already exists\n       try {\n         HdfsFileStatus fileStatus \u003d getFileInfo(src);\n         if (fileStatus !\u003d null) {\n           // When existing, the NN doesn\u0027t return an exception; return true\n           return true;\n         }\n       } catch (IOException ioe) {\n         // Can\u0027t query if this file exists or not.\n-        LOG.error(\"Error requesting file info for path {} while proxing mkdirs\",\n-            src, ioe);\n+        LOG.error(\"Error getting file info for {} while proxying mkdirs: {}\",\n+            src, ioe.getMessage());\n       }\n     }\n \n-    RemoteLocation firstLocation \u003d locations.get(0);\n-    return (boolean) rpcClient.invokeSingle(firstLocation, method);\n+    final RemoteLocation firstLocation \u003d locations.get(0);\n+    try {\n+      return (boolean) rpcClient.invokeSingle(firstLocation, method);\n+    } catch (IOException ioe) {\n+      final List\u003cRemoteLocation\u003e newLocations \u003d checkFaultTolerantRetry(\n+          method, src, ioe, firstLocation, locations);\n+      return rpcClient.invokeSequential(\n+          newLocations, method, Boolean.class, Boolean.TRUE);\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean mkdirs(String src, FsPermission masked, boolean createParent)\n      throws IOException {\n    rpcServer.checkOperation(NameNode.OperationCategory.WRITE);\n\n    final List\u003cRemoteLocation\u003e locations \u003d\n        rpcServer.getLocationsForPath(src, true);\n    RemoteMethod method \u003d new RemoteMethod(\"mkdirs\",\n        new Class\u003c?\u003e[] {String.class, FsPermission.class, boolean.class},\n        new RemoteParam(), masked, createParent);\n\n    // Create in all locations\n    if (rpcServer.isPathAll(src)) {\n      return rpcClient.invokeAll(locations, method);\n    }\n\n    if (locations.size() \u003e 1) {\n      // Check if this directory already exists\n      try {\n        HdfsFileStatus fileStatus \u003d getFileInfo(src);\n        if (fileStatus !\u003d null) {\n          // When existing, the NN doesn\u0027t return an exception; return true\n          return true;\n        }\n      } catch (IOException ioe) {\n        // Can\u0027t query if this file exists or not.\n        LOG.error(\"Error getting file info for {} while proxying mkdirs: {}\",\n            src, ioe.getMessage());\n      }\n    }\n\n    final RemoteLocation firstLocation \u003d locations.get(0);\n    try {\n      return (boolean) rpcClient.invokeSingle(firstLocation, method);\n    } catch (IOException ioe) {\n      final List\u003cRemoteLocation\u003e newLocations \u003d checkFaultTolerantRetry(\n          method, src, ioe, firstLocation, locations);\n      return rpcClient.invokeSequential(\n          newLocations, method, Boolean.class, Boolean.TRUE);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterClientProtocol.java",
      "extendedDetails": {}
    },
    "e2a3c4494ba27a7b82117dac275b9d115aee7f95": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14226. RBF: Setting attributes should set on all subclusters\u0027 directories. Contributed by Ayush Saxena.\n",
      "commitDate": "24/06/19 9:33 AM",
      "commitName": "e2a3c4494ba27a7b82117dac275b9d115aee7f95",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "24/06/19 9:33 AM",
      "commitNameOld": "75f8b6ccfa6160e695ce8f7ad13c6e3624e9e7aa",
      "commitAuthorOld": "Brahma Reddy Battula",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n   public boolean mkdirs(String src, FsPermission masked, boolean createParent)\n       throws IOException {\n     rpcServer.checkOperation(NameNode.OperationCategory.WRITE);\n \n     final List\u003cRemoteLocation\u003e locations \u003d\n         rpcServer.getLocationsForPath(src, true);\n     RemoteMethod method \u003d new RemoteMethod(\"mkdirs\",\n         new Class\u003c?\u003e[] {String.class, FsPermission.class, boolean.class},\n         new RemoteParam(), masked, createParent);\n \n     // Create in all locations\n-    if (isPathAll(src)) {\n+    if (rpcServer.isPathAll(src)) {\n       return rpcClient.invokeAll(locations, method);\n     }\n \n     if (locations.size() \u003e 1) {\n       // Check if this directory already exists\n       try {\n         HdfsFileStatus fileStatus \u003d getFileInfo(src);\n         if (fileStatus !\u003d null) {\n           // When existing, the NN doesn\u0027t return an exception; return true\n           return true;\n         }\n       } catch (IOException ioe) {\n         // Can\u0027t query if this file exists or not.\n         LOG.error(\"Error requesting file info for path {} while proxing mkdirs\",\n             src, ioe);\n       }\n     }\n \n     RemoteLocation firstLocation \u003d locations.get(0);\n     return (boolean) rpcClient.invokeSingle(firstLocation, method);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean mkdirs(String src, FsPermission masked, boolean createParent)\n      throws IOException {\n    rpcServer.checkOperation(NameNode.OperationCategory.WRITE);\n\n    final List\u003cRemoteLocation\u003e locations \u003d\n        rpcServer.getLocationsForPath(src, true);\n    RemoteMethod method \u003d new RemoteMethod(\"mkdirs\",\n        new Class\u003c?\u003e[] {String.class, FsPermission.class, boolean.class},\n        new RemoteParam(), masked, createParent);\n\n    // Create in all locations\n    if (rpcServer.isPathAll(src)) {\n      return rpcClient.invokeAll(locations, method);\n    }\n\n    if (locations.size() \u003e 1) {\n      // Check if this directory already exists\n      try {\n        HdfsFileStatus fileStatus \u003d getFileInfo(src);\n        if (fileStatus !\u003d null) {\n          // When existing, the NN doesn\u0027t return an exception; return true\n          return true;\n        }\n      } catch (IOException ioe) {\n        // Can\u0027t query if this file exists or not.\n        LOG.error(\"Error requesting file info for path {} while proxing mkdirs\",\n            src, ioe);\n      }\n    }\n\n    RemoteLocation firstLocation \u003d locations.get(0);\n    return (boolean) rpcClient.invokeSingle(firstLocation, method);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterClientProtocol.java",
      "extendedDetails": {}
    },
    "6425ed27ea638da75f656204d6df4adad1d91fe1": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-13790. RBF: Move ClientProtocol APIs to its own module. Contributed by Chao Sun.\n",
      "commitDate": "19/08/18 11:50 PM",
      "commitName": "6425ed27ea638da75f656204d6df4adad1d91fe1",
      "commitAuthor": "Brahma Reddy Battula",
      "diff": "@@ -0,0 +1,33 @@\n+  public boolean mkdirs(String src, FsPermission masked, boolean createParent)\n+      throws IOException {\n+    rpcServer.checkOperation(NameNode.OperationCategory.WRITE);\n+\n+    final List\u003cRemoteLocation\u003e locations \u003d\n+        rpcServer.getLocationsForPath(src, true);\n+    RemoteMethod method \u003d new RemoteMethod(\"mkdirs\",\n+        new Class\u003c?\u003e[] {String.class, FsPermission.class, boolean.class},\n+        new RemoteParam(), masked, createParent);\n+\n+    // Create in all locations\n+    if (isPathAll(src)) {\n+      return rpcClient.invokeAll(locations, method);\n+    }\n+\n+    if (locations.size() \u003e 1) {\n+      // Check if this directory already exists\n+      try {\n+        HdfsFileStatus fileStatus \u003d getFileInfo(src);\n+        if (fileStatus !\u003d null) {\n+          // When existing, the NN doesn\u0027t return an exception; return true\n+          return true;\n+        }\n+      } catch (IOException ioe) {\n+        // Can\u0027t query if this file exists or not.\n+        LOG.error(\"Error requesting file info for path {} while proxing mkdirs\",\n+            src, ioe);\n+      }\n+    }\n+\n+    RemoteLocation firstLocation \u003d locations.get(0);\n+    return (boolean) rpcClient.invokeSingle(firstLocation, method);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean mkdirs(String src, FsPermission masked, boolean createParent)\n      throws IOException {\n    rpcServer.checkOperation(NameNode.OperationCategory.WRITE);\n\n    final List\u003cRemoteLocation\u003e locations \u003d\n        rpcServer.getLocationsForPath(src, true);\n    RemoteMethod method \u003d new RemoteMethod(\"mkdirs\",\n        new Class\u003c?\u003e[] {String.class, FsPermission.class, boolean.class},\n        new RemoteParam(), masked, createParent);\n\n    // Create in all locations\n    if (isPathAll(src)) {\n      return rpcClient.invokeAll(locations, method);\n    }\n\n    if (locations.size() \u003e 1) {\n      // Check if this directory already exists\n      try {\n        HdfsFileStatus fileStatus \u003d getFileInfo(src);\n        if (fileStatus !\u003d null) {\n          // When existing, the NN doesn\u0027t return an exception; return true\n          return true;\n        }\n      } catch (IOException ioe) {\n        // Can\u0027t query if this file exists or not.\n        LOG.error(\"Error requesting file info for path {} while proxing mkdirs\",\n            src, ioe);\n      }\n    }\n\n    RemoteLocation firstLocation \u003d locations.get(0);\n    return (boolean) rpcClient.invokeSingle(firstLocation, method);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterClientProtocol.java"
    }
  }
}