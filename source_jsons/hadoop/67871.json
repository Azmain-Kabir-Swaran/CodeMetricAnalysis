{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SimpleCopyListing.java",
  "functionName": "doBuildListing",
  "functionId": "doBuildListing___fileListWriter-SequenceFile.Writer__context-DistCpContext",
  "sourceFilePath": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/SimpleCopyListing.java",
  "functionStartLine": 335,
  "functionEndLine": 407,
  "numCommitsSeen": 53,
  "timeTaken": 5185,
  "changeHistory": [
    "3e3963b035911703c61e6d9a2939eb894da5644c",
    "26172a94d6431e70d7fe15d66be9a7e195f79f60",
    "bf3fb585aaf2b179836e139c041fc87920a3c886",
    "144f1cf76527e6c75aec77ef683a898580f3cc8d",
    "064c8b25eca9bc825dc07a54d9147d65c9290a03",
    "98bdb5139769eb55893971b43b9c23da9513a784",
    "95f32015ad9273420299130a9f10acdbafe63556",
    "0bc15cb6e60dc60885234e01dec1c7cb4557a926",
    "0790275f058b0cf41780ad337c9150a1e8ebebc6",
    "cfba355052df15f8eb6cc9b8e90e2d8492bec7d7",
    "932730df7d62077f7356464ad27f69469965d77a",
    "041b8326a1511b721958792a6b94ecfe27d7a1fb",
    "f81c7b0252839ae0dcd92fe2dc626ff9f87cd2c9",
    "11be7334c4e04b1b3fe12d86f4646cc83c068b05",
    "640a097533e0883bf49504673228d5a327089b44",
    "9ea61e44153b938309841b1499488360e9abd176",
    "6f92ad9868b008eb523ae3279e05004de31a08ce",
    "d06948002fb0cabf72cc0d46bf2fa67d45370f67"
  ],
  "changeHistoryShort": {
    "3e3963b035911703c61e6d9a2939eb894da5644c": "Ybodychange",
    "26172a94d6431e70d7fe15d66be9a7e195f79f60": "Ymultichange(Yparameterchange,Ybodychange)",
    "bf3fb585aaf2b179836e139c041fc87920a3c886": "Ybodychange",
    "144f1cf76527e6c75aec77ef683a898580f3cc8d": "Ybodychange",
    "064c8b25eca9bc825dc07a54d9147d65c9290a03": "Ybodychange",
    "98bdb5139769eb55893971b43b9c23da9513a784": "Ybodychange",
    "95f32015ad9273420299130a9f10acdbafe63556": "Ymodifierchange",
    "0bc15cb6e60dc60885234e01dec1c7cb4557a926": "Ybodychange",
    "0790275f058b0cf41780ad337c9150a1e8ebebc6": "Ybodychange",
    "cfba355052df15f8eb6cc9b8e90e2d8492bec7d7": "Ybodychange",
    "932730df7d62077f7356464ad27f69469965d77a": "Ybodychange",
    "041b8326a1511b721958792a6b94ecfe27d7a1fb": "Ybodychange",
    "f81c7b0252839ae0dcd92fe2dc626ff9f87cd2c9": "Ybodychange",
    "11be7334c4e04b1b3fe12d86f4646cc83c068b05": "Ybodychange",
    "640a097533e0883bf49504673228d5a327089b44": "Ybodychange",
    "9ea61e44153b938309841b1499488360e9abd176": "Ymultichange(Yparameterchange,Ybodychange)",
    "6f92ad9868b008eb523ae3279e05004de31a08ce": "Ybodychange",
    "d06948002fb0cabf72cc0d46bf2fa67d45370f67": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3e3963b035911703c61e6d9a2939eb894da5644c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15552. Move logging APIs over to slf4j in hadoop-tools - Part2. Contributed by Ian Pickering.\n",
      "commitDate": "15/08/18 8:31 AM",
      "commitName": "3e3963b035911703c61e6d9a2939eb894da5644c",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "31/03/17 8:04 PM",
      "commitNameOld": "26172a94d6431e70d7fe15d66be9a7e195f79f60",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 501.52,
      "commitsBetweenForRepo": 4071,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,73 +1,73 @@\n   protected void doBuildListing(SequenceFile.Writer fileListWriter,\n       DistCpContext context) throws IOException {\n     if (context.getNumListstatusThreads() \u003e 0) {\n       numListstatusThreads \u003d context.getNumListstatusThreads();\n     }\n \n     try {\n       List\u003cFileStatusInfo\u003e statusList \u003d Lists.newArrayList();\n       for (Path path: context.getSourcePaths()) {\n         FileSystem sourceFS \u003d path.getFileSystem(getConf());\n         final boolean preserveAcls \u003d\n             context.shouldPreserve(FileAttribute.ACL);\n         final boolean preserveXAttrs \u003d\n             context.shouldPreserve(FileAttribute.XATTR);\n         final boolean preserveRawXAttrs \u003d\n             context.shouldPreserveRawXattrs();\n         path \u003d makeQualified(path);\n \n         FileStatus rootStatus \u003d sourceFS.getFileStatus(path);\n         Path sourcePathRoot \u003d computeSourceRootPath(rootStatus, context);\n \n         FileStatus[] sourceFiles \u003d sourceFS.listStatus(path);\n         boolean explore \u003d (sourceFiles !\u003d null \u0026\u0026 sourceFiles.length \u003e 0);\n         if (!explore || rootStatus.isDirectory()) {\n           LinkedList\u003cCopyListingFileStatus\u003e rootCopyListingStatus \u003d\n               DistCpUtils.toCopyListingFileStatus(sourceFS, rootStatus,\n                   preserveAcls, preserveXAttrs, preserveRawXAttrs,\n                   context.getBlocksPerChunk());\n           writeToFileListingRoot(fileListWriter, rootCopyListingStatus,\n               sourcePathRoot, context);\n         }\n         if (explore) {\n           ArrayList\u003cFileStatus\u003e sourceDirs \u003d new ArrayList\u003cFileStatus\u003e();\n           for (FileStatus sourceStatus: sourceFiles) {\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Recording source-path: \" + sourceStatus.getPath() + \" for copy.\");\n             }\n             LinkedList\u003cCopyListingFileStatus\u003e sourceCopyListingStatus \u003d\n                 DistCpUtils.toCopyListingFileStatus(sourceFS, sourceStatus,\n                     preserveAcls \u0026\u0026 sourceStatus.isDirectory(),\n                     preserveXAttrs \u0026\u0026 sourceStatus.isDirectory(),\n                     preserveRawXAttrs \u0026\u0026 sourceStatus.isDirectory(),\n                     context.getBlocksPerChunk());\n             for (CopyListingFileStatus fs : sourceCopyListingStatus) {\n               if (randomizeFileListing) {\n                 addToFileListing(statusList,\n                     new FileStatusInfo(fs, sourcePathRoot), fileListWriter);\n               } else {\n                 writeToFileListing(fileListWriter, fs, sourcePathRoot);\n               }\n             }\n             if (sourceStatus.isDirectory()) {\n               if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"Adding source dir for traverse: \" + sourceStatus.getPath());\n               }\n               sourceDirs.add(sourceStatus);\n             }\n           }\n           traverseDirectory(fileListWriter, sourceFS, sourceDirs,\n               sourcePathRoot, context, null, statusList);\n         }\n       }\n       if (randomizeFileListing) {\n         writeToFileListing(statusList, fileListWriter);\n       }\n       fileListWriter.close();\n       printStats();\n       LOG.info(\"Build file listing completed.\");\n       fileListWriter \u003d null;\n     } finally {\n-      IOUtils.cleanup(LOG, fileListWriter);\n+      IOUtils.cleanupWithLogger(LOG, fileListWriter);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void doBuildListing(SequenceFile.Writer fileListWriter,\n      DistCpContext context) throws IOException {\n    if (context.getNumListstatusThreads() \u003e 0) {\n      numListstatusThreads \u003d context.getNumListstatusThreads();\n    }\n\n    try {\n      List\u003cFileStatusInfo\u003e statusList \u003d Lists.newArrayList();\n      for (Path path: context.getSourcePaths()) {\n        FileSystem sourceFS \u003d path.getFileSystem(getConf());\n        final boolean preserveAcls \u003d\n            context.shouldPreserve(FileAttribute.ACL);\n        final boolean preserveXAttrs \u003d\n            context.shouldPreserve(FileAttribute.XATTR);\n        final boolean preserveRawXAttrs \u003d\n            context.shouldPreserveRawXattrs();\n        path \u003d makeQualified(path);\n\n        FileStatus rootStatus \u003d sourceFS.getFileStatus(path);\n        Path sourcePathRoot \u003d computeSourceRootPath(rootStatus, context);\n\n        FileStatus[] sourceFiles \u003d sourceFS.listStatus(path);\n        boolean explore \u003d (sourceFiles !\u003d null \u0026\u0026 sourceFiles.length \u003e 0);\n        if (!explore || rootStatus.isDirectory()) {\n          LinkedList\u003cCopyListingFileStatus\u003e rootCopyListingStatus \u003d\n              DistCpUtils.toCopyListingFileStatus(sourceFS, rootStatus,\n                  preserveAcls, preserveXAttrs, preserveRawXAttrs,\n                  context.getBlocksPerChunk());\n          writeToFileListingRoot(fileListWriter, rootCopyListingStatus,\n              sourcePathRoot, context);\n        }\n        if (explore) {\n          ArrayList\u003cFileStatus\u003e sourceDirs \u003d new ArrayList\u003cFileStatus\u003e();\n          for (FileStatus sourceStatus: sourceFiles) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Recording source-path: \" + sourceStatus.getPath() + \" for copy.\");\n            }\n            LinkedList\u003cCopyListingFileStatus\u003e sourceCopyListingStatus \u003d\n                DistCpUtils.toCopyListingFileStatus(sourceFS, sourceStatus,\n                    preserveAcls \u0026\u0026 sourceStatus.isDirectory(),\n                    preserveXAttrs \u0026\u0026 sourceStatus.isDirectory(),\n                    preserveRawXAttrs \u0026\u0026 sourceStatus.isDirectory(),\n                    context.getBlocksPerChunk());\n            for (CopyListingFileStatus fs : sourceCopyListingStatus) {\n              if (randomizeFileListing) {\n                addToFileListing(statusList,\n                    new FileStatusInfo(fs, sourcePathRoot), fileListWriter);\n              } else {\n                writeToFileListing(fileListWriter, fs, sourcePathRoot);\n              }\n            }\n            if (sourceStatus.isDirectory()) {\n              if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Adding source dir for traverse: \" + sourceStatus.getPath());\n              }\n              sourceDirs.add(sourceStatus);\n            }\n          }\n          traverseDirectory(fileListWriter, sourceFS, sourceDirs,\n              sourcePathRoot, context, null, statusList);\n        }\n      }\n      if (randomizeFileListing) {\n        writeToFileListing(statusList, fileListWriter);\n      }\n      fileListWriter.close();\n      printStats();\n      LOG.info(\"Build file listing completed.\");\n      fileListWriter \u003d null;\n    } finally {\n      IOUtils.cleanupWithLogger(LOG, fileListWriter);\n    }\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/SimpleCopyListing.java",
      "extendedDetails": {}
    },
    "26172a94d6431e70d7fe15d66be9a7e195f79f60": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-14267. Make DistCpOptions immutable. Contributed by Mingliang Liu\n",
      "commitDate": "31/03/17 8:04 PM",
      "commitName": "26172a94d6431e70d7fe15d66be9a7e195f79f60",
      "commitAuthor": "Mingliang Liu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-14267. Make DistCpOptions immutable. Contributed by Mingliang Liu\n",
          "commitDate": "31/03/17 8:04 PM",
          "commitName": "26172a94d6431e70d7fe15d66be9a7e195f79f60",
          "commitAuthor": "Mingliang Liu",
          "commitDateOld": "30/03/17 5:38 PM",
          "commitNameOld": "bf3fb585aaf2b179836e139c041fc87920a3c886",
          "commitAuthorOld": "Yongjun Zhang",
          "daysBetweenCommits": 1.1,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,70 +1,73 @@\n   protected void doBuildListing(SequenceFile.Writer fileListWriter,\n-      DistCpOptions options) throws IOException {\n-    if (options.getNumListstatusThreads() \u003e 0) {\n-      numListstatusThreads \u003d options.getNumListstatusThreads();\n+      DistCpContext context) throws IOException {\n+    if (context.getNumListstatusThreads() \u003e 0) {\n+      numListstatusThreads \u003d context.getNumListstatusThreads();\n     }\n \n     try {\n       List\u003cFileStatusInfo\u003e statusList \u003d Lists.newArrayList();\n-      for (Path path: options.getSourcePaths()) {\n+      for (Path path: context.getSourcePaths()) {\n         FileSystem sourceFS \u003d path.getFileSystem(getConf());\n-        final boolean preserveAcls \u003d options.shouldPreserve(FileAttribute.ACL);\n-        final boolean preserveXAttrs \u003d options.shouldPreserve(FileAttribute.XATTR);\n-        final boolean preserveRawXAttrs \u003d options.shouldPreserveRawXattrs();\n+        final boolean preserveAcls \u003d\n+            context.shouldPreserve(FileAttribute.ACL);\n+        final boolean preserveXAttrs \u003d\n+            context.shouldPreserve(FileAttribute.XATTR);\n+        final boolean preserveRawXAttrs \u003d\n+            context.shouldPreserveRawXattrs();\n         path \u003d makeQualified(path);\n \n         FileStatus rootStatus \u003d sourceFS.getFileStatus(path);\n-        Path sourcePathRoot \u003d computeSourceRootPath(rootStatus, options);\n+        Path sourcePathRoot \u003d computeSourceRootPath(rootStatus, context);\n \n         FileStatus[] sourceFiles \u003d sourceFS.listStatus(path);\n         boolean explore \u003d (sourceFiles !\u003d null \u0026\u0026 sourceFiles.length \u003e 0);\n         if (!explore || rootStatus.isDirectory()) {\n           LinkedList\u003cCopyListingFileStatus\u003e rootCopyListingStatus \u003d\n               DistCpUtils.toCopyListingFileStatus(sourceFS, rootStatus,\n                   preserveAcls, preserveXAttrs, preserveRawXAttrs,\n-                  options.getBlocksPerChunk());\n+                  context.getBlocksPerChunk());\n           writeToFileListingRoot(fileListWriter, rootCopyListingStatus,\n-              sourcePathRoot, options);\n+              sourcePathRoot, context);\n         }\n         if (explore) {\n           ArrayList\u003cFileStatus\u003e sourceDirs \u003d new ArrayList\u003cFileStatus\u003e();\n           for (FileStatus sourceStatus: sourceFiles) {\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Recording source-path: \" + sourceStatus.getPath() + \" for copy.\");\n             }\n             LinkedList\u003cCopyListingFileStatus\u003e sourceCopyListingStatus \u003d\n                 DistCpUtils.toCopyListingFileStatus(sourceFS, sourceStatus,\n                     preserveAcls \u0026\u0026 sourceStatus.isDirectory(),\n                     preserveXAttrs \u0026\u0026 sourceStatus.isDirectory(),\n                     preserveRawXAttrs \u0026\u0026 sourceStatus.isDirectory(),\n-                    options.getBlocksPerChunk());\n+                    context.getBlocksPerChunk());\n             for (CopyListingFileStatus fs : sourceCopyListingStatus) {\n               if (randomizeFileListing) {\n                 addToFileListing(statusList,\n                     new FileStatusInfo(fs, sourcePathRoot), fileListWriter);\n               } else {\n                 writeToFileListing(fileListWriter, fs, sourcePathRoot);\n               }\n             }\n             if (sourceStatus.isDirectory()) {\n               if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"Adding source dir for traverse: \" + sourceStatus.getPath());\n               }\n               sourceDirs.add(sourceStatus);\n             }\n           }\n           traverseDirectory(fileListWriter, sourceFS, sourceDirs,\n-              sourcePathRoot, options, null, statusList);\n+              sourcePathRoot, context, null, statusList);\n         }\n       }\n       if (randomizeFileListing) {\n         writeToFileListing(statusList, fileListWriter);\n       }\n       fileListWriter.close();\n       printStats();\n       LOG.info(\"Build file listing completed.\");\n       fileListWriter \u003d null;\n     } finally {\n       IOUtils.cleanup(LOG, fileListWriter);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void doBuildListing(SequenceFile.Writer fileListWriter,\n      DistCpContext context) throws IOException {\n    if (context.getNumListstatusThreads() \u003e 0) {\n      numListstatusThreads \u003d context.getNumListstatusThreads();\n    }\n\n    try {\n      List\u003cFileStatusInfo\u003e statusList \u003d Lists.newArrayList();\n      for (Path path: context.getSourcePaths()) {\n        FileSystem sourceFS \u003d path.getFileSystem(getConf());\n        final boolean preserveAcls \u003d\n            context.shouldPreserve(FileAttribute.ACL);\n        final boolean preserveXAttrs \u003d\n            context.shouldPreserve(FileAttribute.XATTR);\n        final boolean preserveRawXAttrs \u003d\n            context.shouldPreserveRawXattrs();\n        path \u003d makeQualified(path);\n\n        FileStatus rootStatus \u003d sourceFS.getFileStatus(path);\n        Path sourcePathRoot \u003d computeSourceRootPath(rootStatus, context);\n\n        FileStatus[] sourceFiles \u003d sourceFS.listStatus(path);\n        boolean explore \u003d (sourceFiles !\u003d null \u0026\u0026 sourceFiles.length \u003e 0);\n        if (!explore || rootStatus.isDirectory()) {\n          LinkedList\u003cCopyListingFileStatus\u003e rootCopyListingStatus \u003d\n              DistCpUtils.toCopyListingFileStatus(sourceFS, rootStatus,\n                  preserveAcls, preserveXAttrs, preserveRawXAttrs,\n                  context.getBlocksPerChunk());\n          writeToFileListingRoot(fileListWriter, rootCopyListingStatus,\n              sourcePathRoot, context);\n        }\n        if (explore) {\n          ArrayList\u003cFileStatus\u003e sourceDirs \u003d new ArrayList\u003cFileStatus\u003e();\n          for (FileStatus sourceStatus: sourceFiles) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Recording source-path: \" + sourceStatus.getPath() + \" for copy.\");\n            }\n            LinkedList\u003cCopyListingFileStatus\u003e sourceCopyListingStatus \u003d\n                DistCpUtils.toCopyListingFileStatus(sourceFS, sourceStatus,\n                    preserveAcls \u0026\u0026 sourceStatus.isDirectory(),\n                    preserveXAttrs \u0026\u0026 sourceStatus.isDirectory(),\n                    preserveRawXAttrs \u0026\u0026 sourceStatus.isDirectory(),\n                    context.getBlocksPerChunk());\n            for (CopyListingFileStatus fs : sourceCopyListingStatus) {\n              if (randomizeFileListing) {\n                addToFileListing(statusList,\n                    new FileStatusInfo(fs, sourcePathRoot), fileListWriter);\n              } else {\n                writeToFileListing(fileListWriter, fs, sourcePathRoot);\n              }\n            }\n            if (sourceStatus.isDirectory()) {\n              if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Adding source dir for traverse: \" + sourceStatus.getPath());\n              }\n              sourceDirs.add(sourceStatus);\n            }\n          }\n          traverseDirectory(fileListWriter, sourceFS, sourceDirs,\n              sourcePathRoot, context, null, statusList);\n        }\n      }\n      if (randomizeFileListing) {\n        writeToFileListing(statusList, fileListWriter);\n      }\n      fileListWriter.close();\n      printStats();\n      LOG.info(\"Build file listing completed.\");\n      fileListWriter \u003d null;\n    } finally {\n      IOUtils.cleanup(LOG, fileListWriter);\n    }\n  }",
          "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/SimpleCopyListing.java",
          "extendedDetails": {
            "oldValue": "[fileListWriter-SequenceFile.Writer, options-DistCpOptions]",
            "newValue": "[fileListWriter-SequenceFile.Writer, context-DistCpContext]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-14267. Make DistCpOptions immutable. Contributed by Mingliang Liu\n",
          "commitDate": "31/03/17 8:04 PM",
          "commitName": "26172a94d6431e70d7fe15d66be9a7e195f79f60",
          "commitAuthor": "Mingliang Liu",
          "commitDateOld": "30/03/17 5:38 PM",
          "commitNameOld": "bf3fb585aaf2b179836e139c041fc87920a3c886",
          "commitAuthorOld": "Yongjun Zhang",
          "daysBetweenCommits": 1.1,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,70 +1,73 @@\n   protected void doBuildListing(SequenceFile.Writer fileListWriter,\n-      DistCpOptions options) throws IOException {\n-    if (options.getNumListstatusThreads() \u003e 0) {\n-      numListstatusThreads \u003d options.getNumListstatusThreads();\n+      DistCpContext context) throws IOException {\n+    if (context.getNumListstatusThreads() \u003e 0) {\n+      numListstatusThreads \u003d context.getNumListstatusThreads();\n     }\n \n     try {\n       List\u003cFileStatusInfo\u003e statusList \u003d Lists.newArrayList();\n-      for (Path path: options.getSourcePaths()) {\n+      for (Path path: context.getSourcePaths()) {\n         FileSystem sourceFS \u003d path.getFileSystem(getConf());\n-        final boolean preserveAcls \u003d options.shouldPreserve(FileAttribute.ACL);\n-        final boolean preserveXAttrs \u003d options.shouldPreserve(FileAttribute.XATTR);\n-        final boolean preserveRawXAttrs \u003d options.shouldPreserveRawXattrs();\n+        final boolean preserveAcls \u003d\n+            context.shouldPreserve(FileAttribute.ACL);\n+        final boolean preserveXAttrs \u003d\n+            context.shouldPreserve(FileAttribute.XATTR);\n+        final boolean preserveRawXAttrs \u003d\n+            context.shouldPreserveRawXattrs();\n         path \u003d makeQualified(path);\n \n         FileStatus rootStatus \u003d sourceFS.getFileStatus(path);\n-        Path sourcePathRoot \u003d computeSourceRootPath(rootStatus, options);\n+        Path sourcePathRoot \u003d computeSourceRootPath(rootStatus, context);\n \n         FileStatus[] sourceFiles \u003d sourceFS.listStatus(path);\n         boolean explore \u003d (sourceFiles !\u003d null \u0026\u0026 sourceFiles.length \u003e 0);\n         if (!explore || rootStatus.isDirectory()) {\n           LinkedList\u003cCopyListingFileStatus\u003e rootCopyListingStatus \u003d\n               DistCpUtils.toCopyListingFileStatus(sourceFS, rootStatus,\n                   preserveAcls, preserveXAttrs, preserveRawXAttrs,\n-                  options.getBlocksPerChunk());\n+                  context.getBlocksPerChunk());\n           writeToFileListingRoot(fileListWriter, rootCopyListingStatus,\n-              sourcePathRoot, options);\n+              sourcePathRoot, context);\n         }\n         if (explore) {\n           ArrayList\u003cFileStatus\u003e sourceDirs \u003d new ArrayList\u003cFileStatus\u003e();\n           for (FileStatus sourceStatus: sourceFiles) {\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Recording source-path: \" + sourceStatus.getPath() + \" for copy.\");\n             }\n             LinkedList\u003cCopyListingFileStatus\u003e sourceCopyListingStatus \u003d\n                 DistCpUtils.toCopyListingFileStatus(sourceFS, sourceStatus,\n                     preserveAcls \u0026\u0026 sourceStatus.isDirectory(),\n                     preserveXAttrs \u0026\u0026 sourceStatus.isDirectory(),\n                     preserveRawXAttrs \u0026\u0026 sourceStatus.isDirectory(),\n-                    options.getBlocksPerChunk());\n+                    context.getBlocksPerChunk());\n             for (CopyListingFileStatus fs : sourceCopyListingStatus) {\n               if (randomizeFileListing) {\n                 addToFileListing(statusList,\n                     new FileStatusInfo(fs, sourcePathRoot), fileListWriter);\n               } else {\n                 writeToFileListing(fileListWriter, fs, sourcePathRoot);\n               }\n             }\n             if (sourceStatus.isDirectory()) {\n               if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"Adding source dir for traverse: \" + sourceStatus.getPath());\n               }\n               sourceDirs.add(sourceStatus);\n             }\n           }\n           traverseDirectory(fileListWriter, sourceFS, sourceDirs,\n-              sourcePathRoot, options, null, statusList);\n+              sourcePathRoot, context, null, statusList);\n         }\n       }\n       if (randomizeFileListing) {\n         writeToFileListing(statusList, fileListWriter);\n       }\n       fileListWriter.close();\n       printStats();\n       LOG.info(\"Build file listing completed.\");\n       fileListWriter \u003d null;\n     } finally {\n       IOUtils.cleanup(LOG, fileListWriter);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void doBuildListing(SequenceFile.Writer fileListWriter,\n      DistCpContext context) throws IOException {\n    if (context.getNumListstatusThreads() \u003e 0) {\n      numListstatusThreads \u003d context.getNumListstatusThreads();\n    }\n\n    try {\n      List\u003cFileStatusInfo\u003e statusList \u003d Lists.newArrayList();\n      for (Path path: context.getSourcePaths()) {\n        FileSystem sourceFS \u003d path.getFileSystem(getConf());\n        final boolean preserveAcls \u003d\n            context.shouldPreserve(FileAttribute.ACL);\n        final boolean preserveXAttrs \u003d\n            context.shouldPreserve(FileAttribute.XATTR);\n        final boolean preserveRawXAttrs \u003d\n            context.shouldPreserveRawXattrs();\n        path \u003d makeQualified(path);\n\n        FileStatus rootStatus \u003d sourceFS.getFileStatus(path);\n        Path sourcePathRoot \u003d computeSourceRootPath(rootStatus, context);\n\n        FileStatus[] sourceFiles \u003d sourceFS.listStatus(path);\n        boolean explore \u003d (sourceFiles !\u003d null \u0026\u0026 sourceFiles.length \u003e 0);\n        if (!explore || rootStatus.isDirectory()) {\n          LinkedList\u003cCopyListingFileStatus\u003e rootCopyListingStatus \u003d\n              DistCpUtils.toCopyListingFileStatus(sourceFS, rootStatus,\n                  preserveAcls, preserveXAttrs, preserveRawXAttrs,\n                  context.getBlocksPerChunk());\n          writeToFileListingRoot(fileListWriter, rootCopyListingStatus,\n              sourcePathRoot, context);\n        }\n        if (explore) {\n          ArrayList\u003cFileStatus\u003e sourceDirs \u003d new ArrayList\u003cFileStatus\u003e();\n          for (FileStatus sourceStatus: sourceFiles) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Recording source-path: \" + sourceStatus.getPath() + \" for copy.\");\n            }\n            LinkedList\u003cCopyListingFileStatus\u003e sourceCopyListingStatus \u003d\n                DistCpUtils.toCopyListingFileStatus(sourceFS, sourceStatus,\n                    preserveAcls \u0026\u0026 sourceStatus.isDirectory(),\n                    preserveXAttrs \u0026\u0026 sourceStatus.isDirectory(),\n                    preserveRawXAttrs \u0026\u0026 sourceStatus.isDirectory(),\n                    context.getBlocksPerChunk());\n            for (CopyListingFileStatus fs : sourceCopyListingStatus) {\n              if (randomizeFileListing) {\n                addToFileListing(statusList,\n                    new FileStatusInfo(fs, sourcePathRoot), fileListWriter);\n              } else {\n                writeToFileListing(fileListWriter, fs, sourcePathRoot);\n              }\n            }\n            if (sourceStatus.isDirectory()) {\n              if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Adding source dir for traverse: \" + sourceStatus.getPath());\n              }\n              sourceDirs.add(sourceStatus);\n            }\n          }\n          traverseDirectory(fileListWriter, sourceFS, sourceDirs,\n              sourcePathRoot, context, null, statusList);\n        }\n      }\n      if (randomizeFileListing) {\n        writeToFileListing(statusList, fileListWriter);\n      }\n      fileListWriter.close();\n      printStats();\n      LOG.info(\"Build file listing completed.\");\n      fileListWriter \u003d null;\n    } finally {\n      IOUtils.cleanup(LOG, fileListWriter);\n    }\n  }",
          "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/SimpleCopyListing.java",
          "extendedDetails": {}
        }
      ]
    },
    "bf3fb585aaf2b179836e139c041fc87920a3c886": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11794. Enable distcp to copy blocks in parallel. Contributed by Yongjun Zhang, Wei-Chiu Chuang, Xiao Chen, Rosie Li.\n",
      "commitDate": "30/03/17 5:38 PM",
      "commitName": "bf3fb585aaf2b179836e139c041fc87920a3c886",
      "commitAuthor": "Yongjun Zhang",
      "commitDateOld": "30/03/17 5:38 PM",
      "commitNameOld": "144f1cf76527e6c75aec77ef683a898580f3cc8d",
      "commitAuthorOld": "Yongjun Zhang",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,69 +1,70 @@\n   protected void doBuildListing(SequenceFile.Writer fileListWriter,\n       DistCpOptions options) throws IOException {\n     if (options.getNumListstatusThreads() \u003e 0) {\n       numListstatusThreads \u003d options.getNumListstatusThreads();\n     }\n \n     try {\n       List\u003cFileStatusInfo\u003e statusList \u003d Lists.newArrayList();\n       for (Path path: options.getSourcePaths()) {\n         FileSystem sourceFS \u003d path.getFileSystem(getConf());\n         final boolean preserveAcls \u003d options.shouldPreserve(FileAttribute.ACL);\n         final boolean preserveXAttrs \u003d options.shouldPreserve(FileAttribute.XATTR);\n         final boolean preserveRawXAttrs \u003d options.shouldPreserveRawXattrs();\n         path \u003d makeQualified(path);\n \n         FileStatus rootStatus \u003d sourceFS.getFileStatus(path);\n         Path sourcePathRoot \u003d computeSourceRootPath(rootStatus, options);\n \n         FileStatus[] sourceFiles \u003d sourceFS.listStatus(path);\n         boolean explore \u003d (sourceFiles !\u003d null \u0026\u0026 sourceFiles.length \u003e 0);\n         if (!explore || rootStatus.isDirectory()) {\n-          CopyListingFileStatus rootCopyListingStatus \u003d\n-            DistCpUtils.toCopyListingFileStatus(sourceFS, rootStatus,\n-                preserveAcls, preserveXAttrs, preserveRawXAttrs);\n+          LinkedList\u003cCopyListingFileStatus\u003e rootCopyListingStatus \u003d\n+              DistCpUtils.toCopyListingFileStatus(sourceFS, rootStatus,\n+                  preserveAcls, preserveXAttrs, preserveRawXAttrs,\n+                  options.getBlocksPerChunk());\n           writeToFileListingRoot(fileListWriter, rootCopyListingStatus,\n               sourcePathRoot, options);\n         }\n         if (explore) {\n           ArrayList\u003cFileStatus\u003e sourceDirs \u003d new ArrayList\u003cFileStatus\u003e();\n           for (FileStatus sourceStatus: sourceFiles) {\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Recording source-path: \" + sourceStatus.getPath() + \" for copy.\");\n             }\n-            CopyListingFileStatus sourceCopyListingStatus \u003d\n-              DistCpUtils.toCopyListingFileStatus(sourceFS, sourceStatus,\n-                  preserveAcls \u0026\u0026 sourceStatus.isDirectory(),\n-                  preserveXAttrs \u0026\u0026 sourceStatus.isDirectory(),\n-                  preserveRawXAttrs \u0026\u0026 sourceStatus.isDirectory());\n-            if (randomizeFileListing) {\n-              addToFileListing(statusList,\n-                  new FileStatusInfo(sourceCopyListingStatus, sourcePathRoot),\n-                  fileListWriter);\n-            } else {\n-              writeToFileListing(fileListWriter, sourceCopyListingStatus,\n-                  sourcePathRoot);\n+            LinkedList\u003cCopyListingFileStatus\u003e sourceCopyListingStatus \u003d\n+                DistCpUtils.toCopyListingFileStatus(sourceFS, sourceStatus,\n+                    preserveAcls \u0026\u0026 sourceStatus.isDirectory(),\n+                    preserveXAttrs \u0026\u0026 sourceStatus.isDirectory(),\n+                    preserveRawXAttrs \u0026\u0026 sourceStatus.isDirectory(),\n+                    options.getBlocksPerChunk());\n+            for (CopyListingFileStatus fs : sourceCopyListingStatus) {\n+              if (randomizeFileListing) {\n+                addToFileListing(statusList,\n+                    new FileStatusInfo(fs, sourcePathRoot), fileListWriter);\n+              } else {\n+                writeToFileListing(fileListWriter, fs, sourcePathRoot);\n+              }\n             }\n-\n             if (sourceStatus.isDirectory()) {\n               if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"Adding source dir for traverse: \" + sourceStatus.getPath());\n               }\n               sourceDirs.add(sourceStatus);\n             }\n           }\n           traverseDirectory(fileListWriter, sourceFS, sourceDirs,\n               sourcePathRoot, options, null, statusList);\n         }\n       }\n       if (randomizeFileListing) {\n         writeToFileListing(statusList, fileListWriter);\n       }\n       fileListWriter.close();\n       printStats();\n       LOG.info(\"Build file listing completed.\");\n       fileListWriter \u003d null;\n     } finally {\n       IOUtils.cleanup(LOG, fileListWriter);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void doBuildListing(SequenceFile.Writer fileListWriter,\n      DistCpOptions options) throws IOException {\n    if (options.getNumListstatusThreads() \u003e 0) {\n      numListstatusThreads \u003d options.getNumListstatusThreads();\n    }\n\n    try {\n      List\u003cFileStatusInfo\u003e statusList \u003d Lists.newArrayList();\n      for (Path path: options.getSourcePaths()) {\n        FileSystem sourceFS \u003d path.getFileSystem(getConf());\n        final boolean preserveAcls \u003d options.shouldPreserve(FileAttribute.ACL);\n        final boolean preserveXAttrs \u003d options.shouldPreserve(FileAttribute.XATTR);\n        final boolean preserveRawXAttrs \u003d options.shouldPreserveRawXattrs();\n        path \u003d makeQualified(path);\n\n        FileStatus rootStatus \u003d sourceFS.getFileStatus(path);\n        Path sourcePathRoot \u003d computeSourceRootPath(rootStatus, options);\n\n        FileStatus[] sourceFiles \u003d sourceFS.listStatus(path);\n        boolean explore \u003d (sourceFiles !\u003d null \u0026\u0026 sourceFiles.length \u003e 0);\n        if (!explore || rootStatus.isDirectory()) {\n          LinkedList\u003cCopyListingFileStatus\u003e rootCopyListingStatus \u003d\n              DistCpUtils.toCopyListingFileStatus(sourceFS, rootStatus,\n                  preserveAcls, preserveXAttrs, preserveRawXAttrs,\n                  options.getBlocksPerChunk());\n          writeToFileListingRoot(fileListWriter, rootCopyListingStatus,\n              sourcePathRoot, options);\n        }\n        if (explore) {\n          ArrayList\u003cFileStatus\u003e sourceDirs \u003d new ArrayList\u003cFileStatus\u003e();\n          for (FileStatus sourceStatus: sourceFiles) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Recording source-path: \" + sourceStatus.getPath() + \" for copy.\");\n            }\n            LinkedList\u003cCopyListingFileStatus\u003e sourceCopyListingStatus \u003d\n                DistCpUtils.toCopyListingFileStatus(sourceFS, sourceStatus,\n                    preserveAcls \u0026\u0026 sourceStatus.isDirectory(),\n                    preserveXAttrs \u0026\u0026 sourceStatus.isDirectory(),\n                    preserveRawXAttrs \u0026\u0026 sourceStatus.isDirectory(),\n                    options.getBlocksPerChunk());\n            for (CopyListingFileStatus fs : sourceCopyListingStatus) {\n              if (randomizeFileListing) {\n                addToFileListing(statusList,\n                    new FileStatusInfo(fs, sourcePathRoot), fileListWriter);\n              } else {\n                writeToFileListing(fileListWriter, fs, sourcePathRoot);\n              }\n            }\n            if (sourceStatus.isDirectory()) {\n              if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Adding source dir for traverse: \" + sourceStatus.getPath());\n              }\n              sourceDirs.add(sourceStatus);\n            }\n          }\n          traverseDirectory(fileListWriter, sourceFS, sourceDirs,\n              sourcePathRoot, options, null, statusList);\n        }\n      }\n      if (randomizeFileListing) {\n        writeToFileListing(statusList, fileListWriter);\n      }\n      fileListWriter.close();\n      printStats();\n      LOG.info(\"Build file listing completed.\");\n      fileListWriter \u003d null;\n    } finally {\n      IOUtils.cleanup(LOG, fileListWriter);\n    }\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/SimpleCopyListing.java",
      "extendedDetails": {}
    },
    "144f1cf76527e6c75aec77ef683a898580f3cc8d": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-11794. Enable distcp to copy blocks in parallel. Contributed by Yongjun Zhang, Wei-Chiu Chuang, Xiao Chen.\"\n\nThis reverts commit 064c8b25eca9bc825dc07a54d9147d65c9290a03.\n",
      "commitDate": "30/03/17 5:38 PM",
      "commitName": "144f1cf76527e6c75aec77ef683a898580f3cc8d",
      "commitAuthor": "Yongjun Zhang",
      "commitDateOld": "30/03/17 5:01 PM",
      "commitNameOld": "064c8b25eca9bc825dc07a54d9147d65c9290a03",
      "commitAuthorOld": "Yongjun Zhang",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,70 +1,69 @@\n   protected void doBuildListing(SequenceFile.Writer fileListWriter,\n       DistCpOptions options) throws IOException {\n     if (options.getNumListstatusThreads() \u003e 0) {\n       numListstatusThreads \u003d options.getNumListstatusThreads();\n     }\n \n     try {\n       List\u003cFileStatusInfo\u003e statusList \u003d Lists.newArrayList();\n       for (Path path: options.getSourcePaths()) {\n         FileSystem sourceFS \u003d path.getFileSystem(getConf());\n         final boolean preserveAcls \u003d options.shouldPreserve(FileAttribute.ACL);\n         final boolean preserveXAttrs \u003d options.shouldPreserve(FileAttribute.XATTR);\n         final boolean preserveRawXAttrs \u003d options.shouldPreserveRawXattrs();\n         path \u003d makeQualified(path);\n \n         FileStatus rootStatus \u003d sourceFS.getFileStatus(path);\n         Path sourcePathRoot \u003d computeSourceRootPath(rootStatus, options);\n \n         FileStatus[] sourceFiles \u003d sourceFS.listStatus(path);\n         boolean explore \u003d (sourceFiles !\u003d null \u0026\u0026 sourceFiles.length \u003e 0);\n         if (!explore || rootStatus.isDirectory()) {\n-          LinkedList\u003cCopyListingFileStatus\u003e rootCopyListingStatus \u003d\n-              DistCpUtils.toCopyListingFileStatus(sourceFS, rootStatus,\n-                  preserveAcls, preserveXAttrs, preserveRawXAttrs,\n-                  options.getBlocksPerChunk());\n+          CopyListingFileStatus rootCopyListingStatus \u003d\n+            DistCpUtils.toCopyListingFileStatus(sourceFS, rootStatus,\n+                preserveAcls, preserveXAttrs, preserveRawXAttrs);\n           writeToFileListingRoot(fileListWriter, rootCopyListingStatus,\n               sourcePathRoot, options);\n         }\n         if (explore) {\n           ArrayList\u003cFileStatus\u003e sourceDirs \u003d new ArrayList\u003cFileStatus\u003e();\n           for (FileStatus sourceStatus: sourceFiles) {\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Recording source-path: \" + sourceStatus.getPath() + \" for copy.\");\n             }\n-            LinkedList\u003cCopyListingFileStatus\u003e sourceCopyListingStatus \u003d\n-                DistCpUtils.toCopyListingFileStatus(sourceFS, sourceStatus,\n-                    preserveAcls \u0026\u0026 sourceStatus.isDirectory(),\n-                    preserveXAttrs \u0026\u0026 sourceStatus.isDirectory(),\n-                    preserveRawXAttrs \u0026\u0026 sourceStatus.isDirectory(),\n-                    options.getBlocksPerChunk());\n-            for (CopyListingFileStatus fs : sourceCopyListingStatus) {\n-              if (randomizeFileListing) {\n-                addToFileListing(statusList,\n-                    new FileStatusInfo(fs, sourcePathRoot), fileListWriter);\n-              } else {\n-                writeToFileListing(fileListWriter, fs, sourcePathRoot);\n-              }\n+            CopyListingFileStatus sourceCopyListingStatus \u003d\n+              DistCpUtils.toCopyListingFileStatus(sourceFS, sourceStatus,\n+                  preserveAcls \u0026\u0026 sourceStatus.isDirectory(),\n+                  preserveXAttrs \u0026\u0026 sourceStatus.isDirectory(),\n+                  preserveRawXAttrs \u0026\u0026 sourceStatus.isDirectory());\n+            if (randomizeFileListing) {\n+              addToFileListing(statusList,\n+                  new FileStatusInfo(sourceCopyListingStatus, sourcePathRoot),\n+                  fileListWriter);\n+            } else {\n+              writeToFileListing(fileListWriter, sourceCopyListingStatus,\n+                  sourcePathRoot);\n             }\n+\n             if (sourceStatus.isDirectory()) {\n               if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"Adding source dir for traverse: \" + sourceStatus.getPath());\n               }\n               sourceDirs.add(sourceStatus);\n             }\n           }\n           traverseDirectory(fileListWriter, sourceFS, sourceDirs,\n               sourcePathRoot, options, null, statusList);\n         }\n       }\n       if (randomizeFileListing) {\n         writeToFileListing(statusList, fileListWriter);\n       }\n       fileListWriter.close();\n       printStats();\n       LOG.info(\"Build file listing completed.\");\n       fileListWriter \u003d null;\n     } finally {\n       IOUtils.cleanup(LOG, fileListWriter);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void doBuildListing(SequenceFile.Writer fileListWriter,\n      DistCpOptions options) throws IOException {\n    if (options.getNumListstatusThreads() \u003e 0) {\n      numListstatusThreads \u003d options.getNumListstatusThreads();\n    }\n\n    try {\n      List\u003cFileStatusInfo\u003e statusList \u003d Lists.newArrayList();\n      for (Path path: options.getSourcePaths()) {\n        FileSystem sourceFS \u003d path.getFileSystem(getConf());\n        final boolean preserveAcls \u003d options.shouldPreserve(FileAttribute.ACL);\n        final boolean preserveXAttrs \u003d options.shouldPreserve(FileAttribute.XATTR);\n        final boolean preserveRawXAttrs \u003d options.shouldPreserveRawXattrs();\n        path \u003d makeQualified(path);\n\n        FileStatus rootStatus \u003d sourceFS.getFileStatus(path);\n        Path sourcePathRoot \u003d computeSourceRootPath(rootStatus, options);\n\n        FileStatus[] sourceFiles \u003d sourceFS.listStatus(path);\n        boolean explore \u003d (sourceFiles !\u003d null \u0026\u0026 sourceFiles.length \u003e 0);\n        if (!explore || rootStatus.isDirectory()) {\n          CopyListingFileStatus rootCopyListingStatus \u003d\n            DistCpUtils.toCopyListingFileStatus(sourceFS, rootStatus,\n                preserveAcls, preserveXAttrs, preserveRawXAttrs);\n          writeToFileListingRoot(fileListWriter, rootCopyListingStatus,\n              sourcePathRoot, options);\n        }\n        if (explore) {\n          ArrayList\u003cFileStatus\u003e sourceDirs \u003d new ArrayList\u003cFileStatus\u003e();\n          for (FileStatus sourceStatus: sourceFiles) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Recording source-path: \" + sourceStatus.getPath() + \" for copy.\");\n            }\n            CopyListingFileStatus sourceCopyListingStatus \u003d\n              DistCpUtils.toCopyListingFileStatus(sourceFS, sourceStatus,\n                  preserveAcls \u0026\u0026 sourceStatus.isDirectory(),\n                  preserveXAttrs \u0026\u0026 sourceStatus.isDirectory(),\n                  preserveRawXAttrs \u0026\u0026 sourceStatus.isDirectory());\n            if (randomizeFileListing) {\n              addToFileListing(statusList,\n                  new FileStatusInfo(sourceCopyListingStatus, sourcePathRoot),\n                  fileListWriter);\n            } else {\n              writeToFileListing(fileListWriter, sourceCopyListingStatus,\n                  sourcePathRoot);\n            }\n\n            if (sourceStatus.isDirectory()) {\n              if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Adding source dir for traverse: \" + sourceStatus.getPath());\n              }\n              sourceDirs.add(sourceStatus);\n            }\n          }\n          traverseDirectory(fileListWriter, sourceFS, sourceDirs,\n              sourcePathRoot, options, null, statusList);\n        }\n      }\n      if (randomizeFileListing) {\n        writeToFileListing(statusList, fileListWriter);\n      }\n      fileListWriter.close();\n      printStats();\n      LOG.info(\"Build file listing completed.\");\n      fileListWriter \u003d null;\n    } finally {\n      IOUtils.cleanup(LOG, fileListWriter);\n    }\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/SimpleCopyListing.java",
      "extendedDetails": {}
    },
    "064c8b25eca9bc825dc07a54d9147d65c9290a03": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11794. Enable distcp to copy blocks in parallel. Contributed by Yongjun Zhang, Wei-Chiu Chuang, Xiao Chen.\n",
      "commitDate": "30/03/17 5:01 PM",
      "commitName": "064c8b25eca9bc825dc07a54d9147d65c9290a03",
      "commitAuthor": "Yongjun Zhang",
      "commitDateOld": "15/11/16 10:57 AM",
      "commitNameOld": "5af572b6443715b7a741296c1bd520a1840f9a7c",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 135.21,
      "commitsBetweenForRepo": 732,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,69 +1,70 @@\n   protected void doBuildListing(SequenceFile.Writer fileListWriter,\n       DistCpOptions options) throws IOException {\n     if (options.getNumListstatusThreads() \u003e 0) {\n       numListstatusThreads \u003d options.getNumListstatusThreads();\n     }\n \n     try {\n       List\u003cFileStatusInfo\u003e statusList \u003d Lists.newArrayList();\n       for (Path path: options.getSourcePaths()) {\n         FileSystem sourceFS \u003d path.getFileSystem(getConf());\n         final boolean preserveAcls \u003d options.shouldPreserve(FileAttribute.ACL);\n         final boolean preserveXAttrs \u003d options.shouldPreserve(FileAttribute.XATTR);\n         final boolean preserveRawXAttrs \u003d options.shouldPreserveRawXattrs();\n         path \u003d makeQualified(path);\n \n         FileStatus rootStatus \u003d sourceFS.getFileStatus(path);\n         Path sourcePathRoot \u003d computeSourceRootPath(rootStatus, options);\n \n         FileStatus[] sourceFiles \u003d sourceFS.listStatus(path);\n         boolean explore \u003d (sourceFiles !\u003d null \u0026\u0026 sourceFiles.length \u003e 0);\n         if (!explore || rootStatus.isDirectory()) {\n-          CopyListingFileStatus rootCopyListingStatus \u003d\n-            DistCpUtils.toCopyListingFileStatus(sourceFS, rootStatus,\n-                preserveAcls, preserveXAttrs, preserveRawXAttrs);\n+          LinkedList\u003cCopyListingFileStatus\u003e rootCopyListingStatus \u003d\n+              DistCpUtils.toCopyListingFileStatus(sourceFS, rootStatus,\n+                  preserveAcls, preserveXAttrs, preserveRawXAttrs,\n+                  options.getBlocksPerChunk());\n           writeToFileListingRoot(fileListWriter, rootCopyListingStatus,\n               sourcePathRoot, options);\n         }\n         if (explore) {\n           ArrayList\u003cFileStatus\u003e sourceDirs \u003d new ArrayList\u003cFileStatus\u003e();\n           for (FileStatus sourceStatus: sourceFiles) {\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Recording source-path: \" + sourceStatus.getPath() + \" for copy.\");\n             }\n-            CopyListingFileStatus sourceCopyListingStatus \u003d\n-              DistCpUtils.toCopyListingFileStatus(sourceFS, sourceStatus,\n-                  preserveAcls \u0026\u0026 sourceStatus.isDirectory(),\n-                  preserveXAttrs \u0026\u0026 sourceStatus.isDirectory(),\n-                  preserveRawXAttrs \u0026\u0026 sourceStatus.isDirectory());\n-            if (randomizeFileListing) {\n-              addToFileListing(statusList,\n-                  new FileStatusInfo(sourceCopyListingStatus, sourcePathRoot),\n-                  fileListWriter);\n-            } else {\n-              writeToFileListing(fileListWriter, sourceCopyListingStatus,\n-                  sourcePathRoot);\n+            LinkedList\u003cCopyListingFileStatus\u003e sourceCopyListingStatus \u003d\n+                DistCpUtils.toCopyListingFileStatus(sourceFS, sourceStatus,\n+                    preserveAcls \u0026\u0026 sourceStatus.isDirectory(),\n+                    preserveXAttrs \u0026\u0026 sourceStatus.isDirectory(),\n+                    preserveRawXAttrs \u0026\u0026 sourceStatus.isDirectory(),\n+                    options.getBlocksPerChunk());\n+            for (CopyListingFileStatus fs : sourceCopyListingStatus) {\n+              if (randomizeFileListing) {\n+                addToFileListing(statusList,\n+                    new FileStatusInfo(fs, sourcePathRoot), fileListWriter);\n+              } else {\n+                writeToFileListing(fileListWriter, fs, sourcePathRoot);\n+              }\n             }\n-\n             if (sourceStatus.isDirectory()) {\n               if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"Adding source dir for traverse: \" + sourceStatus.getPath());\n               }\n               sourceDirs.add(sourceStatus);\n             }\n           }\n           traverseDirectory(fileListWriter, sourceFS, sourceDirs,\n               sourcePathRoot, options, null, statusList);\n         }\n       }\n       if (randomizeFileListing) {\n         writeToFileListing(statusList, fileListWriter);\n       }\n       fileListWriter.close();\n       printStats();\n       LOG.info(\"Build file listing completed.\");\n       fileListWriter \u003d null;\n     } finally {\n       IOUtils.cleanup(LOG, fileListWriter);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void doBuildListing(SequenceFile.Writer fileListWriter,\n      DistCpOptions options) throws IOException {\n    if (options.getNumListstatusThreads() \u003e 0) {\n      numListstatusThreads \u003d options.getNumListstatusThreads();\n    }\n\n    try {\n      List\u003cFileStatusInfo\u003e statusList \u003d Lists.newArrayList();\n      for (Path path: options.getSourcePaths()) {\n        FileSystem sourceFS \u003d path.getFileSystem(getConf());\n        final boolean preserveAcls \u003d options.shouldPreserve(FileAttribute.ACL);\n        final boolean preserveXAttrs \u003d options.shouldPreserve(FileAttribute.XATTR);\n        final boolean preserveRawXAttrs \u003d options.shouldPreserveRawXattrs();\n        path \u003d makeQualified(path);\n\n        FileStatus rootStatus \u003d sourceFS.getFileStatus(path);\n        Path sourcePathRoot \u003d computeSourceRootPath(rootStatus, options);\n\n        FileStatus[] sourceFiles \u003d sourceFS.listStatus(path);\n        boolean explore \u003d (sourceFiles !\u003d null \u0026\u0026 sourceFiles.length \u003e 0);\n        if (!explore || rootStatus.isDirectory()) {\n          LinkedList\u003cCopyListingFileStatus\u003e rootCopyListingStatus \u003d\n              DistCpUtils.toCopyListingFileStatus(sourceFS, rootStatus,\n                  preserveAcls, preserveXAttrs, preserveRawXAttrs,\n                  options.getBlocksPerChunk());\n          writeToFileListingRoot(fileListWriter, rootCopyListingStatus,\n              sourcePathRoot, options);\n        }\n        if (explore) {\n          ArrayList\u003cFileStatus\u003e sourceDirs \u003d new ArrayList\u003cFileStatus\u003e();\n          for (FileStatus sourceStatus: sourceFiles) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Recording source-path: \" + sourceStatus.getPath() + \" for copy.\");\n            }\n            LinkedList\u003cCopyListingFileStatus\u003e sourceCopyListingStatus \u003d\n                DistCpUtils.toCopyListingFileStatus(sourceFS, sourceStatus,\n                    preserveAcls \u0026\u0026 sourceStatus.isDirectory(),\n                    preserveXAttrs \u0026\u0026 sourceStatus.isDirectory(),\n                    preserveRawXAttrs \u0026\u0026 sourceStatus.isDirectory(),\n                    options.getBlocksPerChunk());\n            for (CopyListingFileStatus fs : sourceCopyListingStatus) {\n              if (randomizeFileListing) {\n                addToFileListing(statusList,\n                    new FileStatusInfo(fs, sourcePathRoot), fileListWriter);\n              } else {\n                writeToFileListing(fileListWriter, fs, sourcePathRoot);\n              }\n            }\n            if (sourceStatus.isDirectory()) {\n              if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Adding source dir for traverse: \" + sourceStatus.getPath());\n              }\n              sourceDirs.add(sourceStatus);\n            }\n          }\n          traverseDirectory(fileListWriter, sourceFS, sourceDirs,\n              sourcePathRoot, options, null, statusList);\n        }\n      }\n      if (randomizeFileListing) {\n        writeToFileListing(statusList, fileListWriter);\n      }\n      fileListWriter.close();\n      printStats();\n      LOG.info(\"Build file listing completed.\");\n      fileListWriter \u003d null;\n    } finally {\n      IOUtils.cleanup(LOG, fileListWriter);\n    }\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/SimpleCopyListing.java",
      "extendedDetails": {}
    },
    "98bdb5139769eb55893971b43b9c23da9513a784": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13169. Randomize file list in SimpleCopyListing. Contributed by Rajesh Balamohan.\n",
      "commitDate": "19/09/16 3:16 PM",
      "commitName": "98bdb5139769eb55893971b43b9c23da9513a784",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "21/04/16 12:17 PM",
      "commitNameOld": "a749ba0ceaa843aa83146b6bea19e031c8dc3296",
      "commitAuthorOld": "Yongjun Zhang",
      "daysBetweenCommits": 151.12,
      "commitsBetweenForRepo": 1103,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,69 @@\n   protected void doBuildListing(SequenceFile.Writer fileListWriter,\n       DistCpOptions options) throws IOException {\n     if (options.getNumListstatusThreads() \u003e 0) {\n       numListstatusThreads \u003d options.getNumListstatusThreads();\n     }\n \n     try {\n+      List\u003cFileStatusInfo\u003e statusList \u003d Lists.newArrayList();\n       for (Path path: options.getSourcePaths()) {\n         FileSystem sourceFS \u003d path.getFileSystem(getConf());\n         final boolean preserveAcls \u003d options.shouldPreserve(FileAttribute.ACL);\n         final boolean preserveXAttrs \u003d options.shouldPreserve(FileAttribute.XATTR);\n         final boolean preserveRawXAttrs \u003d options.shouldPreserveRawXattrs();\n         path \u003d makeQualified(path);\n \n         FileStatus rootStatus \u003d sourceFS.getFileStatus(path);\n         Path sourcePathRoot \u003d computeSourceRootPath(rootStatus, options);\n \n         FileStatus[] sourceFiles \u003d sourceFS.listStatus(path);\n         boolean explore \u003d (sourceFiles !\u003d null \u0026\u0026 sourceFiles.length \u003e 0);\n         if (!explore || rootStatus.isDirectory()) {\n           CopyListingFileStatus rootCopyListingStatus \u003d\n             DistCpUtils.toCopyListingFileStatus(sourceFS, rootStatus,\n                 preserveAcls, preserveXAttrs, preserveRawXAttrs);\n           writeToFileListingRoot(fileListWriter, rootCopyListingStatus,\n               sourcePathRoot, options);\n         }\n         if (explore) {\n           ArrayList\u003cFileStatus\u003e sourceDirs \u003d new ArrayList\u003cFileStatus\u003e();\n           for (FileStatus sourceStatus: sourceFiles) {\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Recording source-path: \" + sourceStatus.getPath() + \" for copy.\");\n             }\n             CopyListingFileStatus sourceCopyListingStatus \u003d\n               DistCpUtils.toCopyListingFileStatus(sourceFS, sourceStatus,\n                   preserveAcls \u0026\u0026 sourceStatus.isDirectory(),\n                   preserveXAttrs \u0026\u0026 sourceStatus.isDirectory(),\n                   preserveRawXAttrs \u0026\u0026 sourceStatus.isDirectory());\n-            writeToFileListing(fileListWriter, sourceCopyListingStatus,\n-                sourcePathRoot);\n+            if (randomizeFileListing) {\n+              addToFileListing(statusList,\n+                  new FileStatusInfo(sourceCopyListingStatus, sourcePathRoot),\n+                  fileListWriter);\n+            } else {\n+              writeToFileListing(fileListWriter, sourceCopyListingStatus,\n+                  sourcePathRoot);\n+            }\n \n             if (sourceStatus.isDirectory()) {\n               if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"Adding source dir for traverse: \" + sourceStatus.getPath());\n               }\n               sourceDirs.add(sourceStatus);\n             }\n           }\n           traverseDirectory(fileListWriter, sourceFS, sourceDirs,\n-                            sourcePathRoot, options, null);\n+              sourcePathRoot, options, null, statusList);\n         }\n       }\n+      if (randomizeFileListing) {\n+        writeToFileListing(statusList, fileListWriter);\n+      }\n       fileListWriter.close();\n       printStats();\n       LOG.info(\"Build file listing completed.\");\n       fileListWriter \u003d null;\n     } finally {\n       IOUtils.cleanup(LOG, fileListWriter);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void doBuildListing(SequenceFile.Writer fileListWriter,\n      DistCpOptions options) throws IOException {\n    if (options.getNumListstatusThreads() \u003e 0) {\n      numListstatusThreads \u003d options.getNumListstatusThreads();\n    }\n\n    try {\n      List\u003cFileStatusInfo\u003e statusList \u003d Lists.newArrayList();\n      for (Path path: options.getSourcePaths()) {\n        FileSystem sourceFS \u003d path.getFileSystem(getConf());\n        final boolean preserveAcls \u003d options.shouldPreserve(FileAttribute.ACL);\n        final boolean preserveXAttrs \u003d options.shouldPreserve(FileAttribute.XATTR);\n        final boolean preserveRawXAttrs \u003d options.shouldPreserveRawXattrs();\n        path \u003d makeQualified(path);\n\n        FileStatus rootStatus \u003d sourceFS.getFileStatus(path);\n        Path sourcePathRoot \u003d computeSourceRootPath(rootStatus, options);\n\n        FileStatus[] sourceFiles \u003d sourceFS.listStatus(path);\n        boolean explore \u003d (sourceFiles !\u003d null \u0026\u0026 sourceFiles.length \u003e 0);\n        if (!explore || rootStatus.isDirectory()) {\n          CopyListingFileStatus rootCopyListingStatus \u003d\n            DistCpUtils.toCopyListingFileStatus(sourceFS, rootStatus,\n                preserveAcls, preserveXAttrs, preserveRawXAttrs);\n          writeToFileListingRoot(fileListWriter, rootCopyListingStatus,\n              sourcePathRoot, options);\n        }\n        if (explore) {\n          ArrayList\u003cFileStatus\u003e sourceDirs \u003d new ArrayList\u003cFileStatus\u003e();\n          for (FileStatus sourceStatus: sourceFiles) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Recording source-path: \" + sourceStatus.getPath() + \" for copy.\");\n            }\n            CopyListingFileStatus sourceCopyListingStatus \u003d\n              DistCpUtils.toCopyListingFileStatus(sourceFS, sourceStatus,\n                  preserveAcls \u0026\u0026 sourceStatus.isDirectory(),\n                  preserveXAttrs \u0026\u0026 sourceStatus.isDirectory(),\n                  preserveRawXAttrs \u0026\u0026 sourceStatus.isDirectory());\n            if (randomizeFileListing) {\n              addToFileListing(statusList,\n                  new FileStatusInfo(sourceCopyListingStatus, sourcePathRoot),\n                  fileListWriter);\n            } else {\n              writeToFileListing(fileListWriter, sourceCopyListingStatus,\n                  sourcePathRoot);\n            }\n\n            if (sourceStatus.isDirectory()) {\n              if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Adding source dir for traverse: \" + sourceStatus.getPath());\n              }\n              sourceDirs.add(sourceStatus);\n            }\n          }\n          traverseDirectory(fileListWriter, sourceFS, sourceDirs,\n              sourcePathRoot, options, null, statusList);\n        }\n      }\n      if (randomizeFileListing) {\n        writeToFileListing(statusList, fileListWriter);\n      }\n      fileListWriter.close();\n      printStats();\n      LOG.info(\"Build file listing completed.\");\n      fileListWriter \u003d null;\n    } finally {\n      IOUtils.cleanup(LOG, fileListWriter);\n    }\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/SimpleCopyListing.java",
      "extendedDetails": {}
    },
    "95f32015ad9273420299130a9f10acdbafe63556": {
      "type": "Ymodifierchange",
      "commitMessage": "HDFS-9630. DistCp minor refactoring and clean up. Contributed by Kai Zheng.\n\nChange-Id: I363c4ffcac32116ddcdc0a22fac3db92f14a0db0\n",
      "commitDate": "11/01/16 9:46 AM",
      "commitName": "95f32015ad9273420299130a9f10acdbafe63556",
      "commitAuthor": "Zhe Zhang",
      "commitDateOld": "20/08/15 8:02 AM",
      "commitNameOld": "0bc15cb6e60dc60885234e01dec1c7cb4557a926",
      "commitAuthorOld": "Yongjun Zhang",
      "daysBetweenCommits": 144.11,
      "commitsBetweenForRepo": 960,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,59 @@\n-  public void doBuildListing(SequenceFile.Writer fileListWriter,\n+  protected void doBuildListing(SequenceFile.Writer fileListWriter,\n       DistCpOptions options) throws IOException {\n     if (options.getNumListstatusThreads() \u003e 0) {\n       numListstatusThreads \u003d options.getNumListstatusThreads();\n     }\n \n     try {\n       for (Path path: options.getSourcePaths()) {\n         FileSystem sourceFS \u003d path.getFileSystem(getConf());\n         final boolean preserveAcls \u003d options.shouldPreserve(FileAttribute.ACL);\n         final boolean preserveXAttrs \u003d options.shouldPreserve(FileAttribute.XATTR);\n         final boolean preserveRawXAttrs \u003d options.shouldPreserveRawXattrs();\n         path \u003d makeQualified(path);\n \n         FileStatus rootStatus \u003d sourceFS.getFileStatus(path);\n         Path sourcePathRoot \u003d computeSourceRootPath(rootStatus, options);\n \n         FileStatus[] sourceFiles \u003d sourceFS.listStatus(path);\n         boolean explore \u003d (sourceFiles !\u003d null \u0026\u0026 sourceFiles.length \u003e 0);\n         if (!explore || rootStatus.isDirectory()) {\n           CopyListingFileStatus rootCopyListingStatus \u003d\n             DistCpUtils.toCopyListingFileStatus(sourceFS, rootStatus,\n                 preserveAcls, preserveXAttrs, preserveRawXAttrs);\n           writeToFileListingRoot(fileListWriter, rootCopyListingStatus,\n               sourcePathRoot, options);\n         }\n         if (explore) {\n           ArrayList\u003cFileStatus\u003e sourceDirs \u003d new ArrayList\u003cFileStatus\u003e();\n           for (FileStatus sourceStatus: sourceFiles) {\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Recording source-path: \" + sourceStatus.getPath() + \" for copy.\");\n             }\n             CopyListingFileStatus sourceCopyListingStatus \u003d\n               DistCpUtils.toCopyListingFileStatus(sourceFS, sourceStatus,\n                   preserveAcls \u0026\u0026 sourceStatus.isDirectory(),\n                   preserveXAttrs \u0026\u0026 sourceStatus.isDirectory(),\n                   preserveRawXAttrs \u0026\u0026 sourceStatus.isDirectory());\n             writeToFileListing(fileListWriter, sourceCopyListingStatus,\n                 sourcePathRoot);\n \n             if (sourceStatus.isDirectory()) {\n               if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"Adding source dir for traverse: \" + sourceStatus.getPath());\n               }\n               sourceDirs.add(sourceStatus);\n             }\n           }\n           traverseDirectory(fileListWriter, sourceFS, sourceDirs,\n                             sourcePathRoot, options, null);\n         }\n       }\n       fileListWriter.close();\n       printStats();\n       LOG.info(\"Build file listing completed.\");\n       fileListWriter \u003d null;\n     } finally {\n       IOUtils.cleanup(LOG, fileListWriter);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void doBuildListing(SequenceFile.Writer fileListWriter,\n      DistCpOptions options) throws IOException {\n    if (options.getNumListstatusThreads() \u003e 0) {\n      numListstatusThreads \u003d options.getNumListstatusThreads();\n    }\n\n    try {\n      for (Path path: options.getSourcePaths()) {\n        FileSystem sourceFS \u003d path.getFileSystem(getConf());\n        final boolean preserveAcls \u003d options.shouldPreserve(FileAttribute.ACL);\n        final boolean preserveXAttrs \u003d options.shouldPreserve(FileAttribute.XATTR);\n        final boolean preserveRawXAttrs \u003d options.shouldPreserveRawXattrs();\n        path \u003d makeQualified(path);\n\n        FileStatus rootStatus \u003d sourceFS.getFileStatus(path);\n        Path sourcePathRoot \u003d computeSourceRootPath(rootStatus, options);\n\n        FileStatus[] sourceFiles \u003d sourceFS.listStatus(path);\n        boolean explore \u003d (sourceFiles !\u003d null \u0026\u0026 sourceFiles.length \u003e 0);\n        if (!explore || rootStatus.isDirectory()) {\n          CopyListingFileStatus rootCopyListingStatus \u003d\n            DistCpUtils.toCopyListingFileStatus(sourceFS, rootStatus,\n                preserveAcls, preserveXAttrs, preserveRawXAttrs);\n          writeToFileListingRoot(fileListWriter, rootCopyListingStatus,\n              sourcePathRoot, options);\n        }\n        if (explore) {\n          ArrayList\u003cFileStatus\u003e sourceDirs \u003d new ArrayList\u003cFileStatus\u003e();\n          for (FileStatus sourceStatus: sourceFiles) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Recording source-path: \" + sourceStatus.getPath() + \" for copy.\");\n            }\n            CopyListingFileStatus sourceCopyListingStatus \u003d\n              DistCpUtils.toCopyListingFileStatus(sourceFS, sourceStatus,\n                  preserveAcls \u0026\u0026 sourceStatus.isDirectory(),\n                  preserveXAttrs \u0026\u0026 sourceStatus.isDirectory(),\n                  preserveRawXAttrs \u0026\u0026 sourceStatus.isDirectory());\n            writeToFileListing(fileListWriter, sourceCopyListingStatus,\n                sourcePathRoot);\n\n            if (sourceStatus.isDirectory()) {\n              if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Adding source dir for traverse: \" + sourceStatus.getPath());\n              }\n              sourceDirs.add(sourceStatus);\n            }\n          }\n          traverseDirectory(fileListWriter, sourceFS, sourceDirs,\n                            sourcePathRoot, options, null);\n        }\n      }\n      fileListWriter.close();\n      printStats();\n      LOG.info(\"Build file listing completed.\");\n      fileListWriter \u003d null;\n    } finally {\n      IOUtils.cleanup(LOG, fileListWriter);\n    }\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/SimpleCopyListing.java",
      "extendedDetails": {
        "oldValue": "[public]",
        "newValue": "[protected]"
      }
    },
    "0bc15cb6e60dc60885234e01dec1c7cb4557a926": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8828. Utilize Snapshot diff report to build diff copy list in distcp. (Yufei Gu via Yongjun Zhang)\n",
      "commitDate": "20/08/15 8:02 AM",
      "commitName": "0bc15cb6e60dc60885234e01dec1c7cb4557a926",
      "commitAuthor": "Yongjun Zhang",
      "commitDateOld": "18/05/15 1:24 PM",
      "commitNameOld": "0790275f058b0cf41780ad337c9150a1e8ebebc6",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 93.78,
      "commitsBetweenForRepo": 595,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,59 @@\n   public void doBuildListing(SequenceFile.Writer fileListWriter,\n       DistCpOptions options) throws IOException {\n     if (options.getNumListstatusThreads() \u003e 0) {\n       numListstatusThreads \u003d options.getNumListstatusThreads();\n     }\n \n     try {\n       for (Path path: options.getSourcePaths()) {\n         FileSystem sourceFS \u003d path.getFileSystem(getConf());\n         final boolean preserveAcls \u003d options.shouldPreserve(FileAttribute.ACL);\n         final boolean preserveXAttrs \u003d options.shouldPreserve(FileAttribute.XATTR);\n         final boolean preserveRawXAttrs \u003d options.shouldPreserveRawXattrs();\n         path \u003d makeQualified(path);\n \n         FileStatus rootStatus \u003d sourceFS.getFileStatus(path);\n         Path sourcePathRoot \u003d computeSourceRootPath(rootStatus, options);\n \n         FileStatus[] sourceFiles \u003d sourceFS.listStatus(path);\n         boolean explore \u003d (sourceFiles !\u003d null \u0026\u0026 sourceFiles.length \u003e 0);\n         if (!explore || rootStatus.isDirectory()) {\n           CopyListingFileStatus rootCopyListingStatus \u003d\n             DistCpUtils.toCopyListingFileStatus(sourceFS, rootStatus,\n                 preserveAcls, preserveXAttrs, preserveRawXAttrs);\n           writeToFileListingRoot(fileListWriter, rootCopyListingStatus,\n               sourcePathRoot, options);\n         }\n         if (explore) {\n           ArrayList\u003cFileStatus\u003e sourceDirs \u003d new ArrayList\u003cFileStatus\u003e();\n           for (FileStatus sourceStatus: sourceFiles) {\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Recording source-path: \" + sourceStatus.getPath() + \" for copy.\");\n             }\n             CopyListingFileStatus sourceCopyListingStatus \u003d\n               DistCpUtils.toCopyListingFileStatus(sourceFS, sourceStatus,\n                   preserveAcls \u0026\u0026 sourceStatus.isDirectory(),\n                   preserveXAttrs \u0026\u0026 sourceStatus.isDirectory(),\n                   preserveRawXAttrs \u0026\u0026 sourceStatus.isDirectory());\n             writeToFileListing(fileListWriter, sourceCopyListingStatus,\n                 sourcePathRoot);\n \n             if (sourceStatus.isDirectory()) {\n               if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"Adding source dir for traverse: \" + sourceStatus.getPath());\n               }\n               sourceDirs.add(sourceStatus);\n             }\n           }\n           traverseDirectory(fileListWriter, sourceFS, sourceDirs,\n-                            sourcePathRoot, options);\n+                            sourcePathRoot, options, null);\n         }\n       }\n       fileListWriter.close();\n       printStats();\n       LOG.info(\"Build file listing completed.\");\n       fileListWriter \u003d null;\n     } finally {\n       IOUtils.cleanup(LOG, fileListWriter);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void doBuildListing(SequenceFile.Writer fileListWriter,\n      DistCpOptions options) throws IOException {\n    if (options.getNumListstatusThreads() \u003e 0) {\n      numListstatusThreads \u003d options.getNumListstatusThreads();\n    }\n\n    try {\n      for (Path path: options.getSourcePaths()) {\n        FileSystem sourceFS \u003d path.getFileSystem(getConf());\n        final boolean preserveAcls \u003d options.shouldPreserve(FileAttribute.ACL);\n        final boolean preserveXAttrs \u003d options.shouldPreserve(FileAttribute.XATTR);\n        final boolean preserveRawXAttrs \u003d options.shouldPreserveRawXattrs();\n        path \u003d makeQualified(path);\n\n        FileStatus rootStatus \u003d sourceFS.getFileStatus(path);\n        Path sourcePathRoot \u003d computeSourceRootPath(rootStatus, options);\n\n        FileStatus[] sourceFiles \u003d sourceFS.listStatus(path);\n        boolean explore \u003d (sourceFiles !\u003d null \u0026\u0026 sourceFiles.length \u003e 0);\n        if (!explore || rootStatus.isDirectory()) {\n          CopyListingFileStatus rootCopyListingStatus \u003d\n            DistCpUtils.toCopyListingFileStatus(sourceFS, rootStatus,\n                preserveAcls, preserveXAttrs, preserveRawXAttrs);\n          writeToFileListingRoot(fileListWriter, rootCopyListingStatus,\n              sourcePathRoot, options);\n        }\n        if (explore) {\n          ArrayList\u003cFileStatus\u003e sourceDirs \u003d new ArrayList\u003cFileStatus\u003e();\n          for (FileStatus sourceStatus: sourceFiles) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Recording source-path: \" + sourceStatus.getPath() + \" for copy.\");\n            }\n            CopyListingFileStatus sourceCopyListingStatus \u003d\n              DistCpUtils.toCopyListingFileStatus(sourceFS, sourceStatus,\n                  preserveAcls \u0026\u0026 sourceStatus.isDirectory(),\n                  preserveXAttrs \u0026\u0026 sourceStatus.isDirectory(),\n                  preserveRawXAttrs \u0026\u0026 sourceStatus.isDirectory());\n            writeToFileListing(fileListWriter, sourceCopyListingStatus,\n                sourcePathRoot);\n\n            if (sourceStatus.isDirectory()) {\n              if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Adding source dir for traverse: \" + sourceStatus.getPath());\n              }\n              sourceDirs.add(sourceStatus);\n            }\n          }\n          traverseDirectory(fileListWriter, sourceFS, sourceDirs,\n                            sourcePathRoot, options, null);\n        }\n      }\n      fileListWriter.close();\n      printStats();\n      LOG.info(\"Build file listing completed.\");\n      fileListWriter \u003d null;\n    } finally {\n      IOUtils.cleanup(LOG, fileListWriter);\n    }\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/SimpleCopyListing.java",
      "extendedDetails": {}
    },
    "0790275f058b0cf41780ad337c9150a1e8ebebc6": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-1540. Support file exclusion list in distcp. Contributed by Rich Haase.\n",
      "commitDate": "18/05/15 1:24 PM",
      "commitName": "0790275f058b0cf41780ad337c9150a1e8ebebc6",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "24/04/15 1:39 PM",
      "commitNameOld": "a287d2fb77d9873b61c6ab24134993d784ae8475",
      "commitAuthorOld": "Ravi Prakash",
      "daysBetweenCommits": 23.99,
      "commitsBetweenForRepo": 280,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,59 @@\n   public void doBuildListing(SequenceFile.Writer fileListWriter,\n       DistCpOptions options) throws IOException {\n     if (options.getNumListstatusThreads() \u003e 0) {\n       numListstatusThreads \u003d options.getNumListstatusThreads();\n     }\n \n     try {\n       for (Path path: options.getSourcePaths()) {\n         FileSystem sourceFS \u003d path.getFileSystem(getConf());\n         final boolean preserveAcls \u003d options.shouldPreserve(FileAttribute.ACL);\n         final boolean preserveXAttrs \u003d options.shouldPreserve(FileAttribute.XATTR);\n         final boolean preserveRawXAttrs \u003d options.shouldPreserveRawXattrs();\n         path \u003d makeQualified(path);\n \n         FileStatus rootStatus \u003d sourceFS.getFileStatus(path);\n         Path sourcePathRoot \u003d computeSourceRootPath(rootStatus, options);\n \n         FileStatus[] sourceFiles \u003d sourceFS.listStatus(path);\n         boolean explore \u003d (sourceFiles !\u003d null \u0026\u0026 sourceFiles.length \u003e 0);\n         if (!explore || rootStatus.isDirectory()) {\n           CopyListingFileStatus rootCopyListingStatus \u003d\n             DistCpUtils.toCopyListingFileStatus(sourceFS, rootStatus,\n                 preserveAcls, preserveXAttrs, preserveRawXAttrs);\n           writeToFileListingRoot(fileListWriter, rootCopyListingStatus,\n               sourcePathRoot, options);\n         }\n         if (explore) {\n           ArrayList\u003cFileStatus\u003e sourceDirs \u003d new ArrayList\u003cFileStatus\u003e();\n           for (FileStatus sourceStatus: sourceFiles) {\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Recording source-path: \" + sourceStatus.getPath() + \" for copy.\");\n             }\n             CopyListingFileStatus sourceCopyListingStatus \u003d\n               DistCpUtils.toCopyListingFileStatus(sourceFS, sourceStatus,\n                   preserveAcls \u0026\u0026 sourceStatus.isDirectory(),\n                   preserveXAttrs \u0026\u0026 sourceStatus.isDirectory(),\n                   preserveRawXAttrs \u0026\u0026 sourceStatus.isDirectory());\n             writeToFileListing(fileListWriter, sourceCopyListingStatus,\n-                sourcePathRoot, options);\n+                sourcePathRoot);\n \n             if (sourceStatus.isDirectory()) {\n               if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"Adding source dir for traverse: \" + sourceStatus.getPath());\n               }\n               sourceDirs.add(sourceStatus);\n             }\n           }\n           traverseDirectory(fileListWriter, sourceFS, sourceDirs,\n                             sourcePathRoot, options);\n         }\n       }\n       fileListWriter.close();\n       printStats();\n       LOG.info(\"Build file listing completed.\");\n       fileListWriter \u003d null;\n     } finally {\n       IOUtils.cleanup(LOG, fileListWriter);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void doBuildListing(SequenceFile.Writer fileListWriter,\n      DistCpOptions options) throws IOException {\n    if (options.getNumListstatusThreads() \u003e 0) {\n      numListstatusThreads \u003d options.getNumListstatusThreads();\n    }\n\n    try {\n      for (Path path: options.getSourcePaths()) {\n        FileSystem sourceFS \u003d path.getFileSystem(getConf());\n        final boolean preserveAcls \u003d options.shouldPreserve(FileAttribute.ACL);\n        final boolean preserveXAttrs \u003d options.shouldPreserve(FileAttribute.XATTR);\n        final boolean preserveRawXAttrs \u003d options.shouldPreserveRawXattrs();\n        path \u003d makeQualified(path);\n\n        FileStatus rootStatus \u003d sourceFS.getFileStatus(path);\n        Path sourcePathRoot \u003d computeSourceRootPath(rootStatus, options);\n\n        FileStatus[] sourceFiles \u003d sourceFS.listStatus(path);\n        boolean explore \u003d (sourceFiles !\u003d null \u0026\u0026 sourceFiles.length \u003e 0);\n        if (!explore || rootStatus.isDirectory()) {\n          CopyListingFileStatus rootCopyListingStatus \u003d\n            DistCpUtils.toCopyListingFileStatus(sourceFS, rootStatus,\n                preserveAcls, preserveXAttrs, preserveRawXAttrs);\n          writeToFileListingRoot(fileListWriter, rootCopyListingStatus,\n              sourcePathRoot, options);\n        }\n        if (explore) {\n          ArrayList\u003cFileStatus\u003e sourceDirs \u003d new ArrayList\u003cFileStatus\u003e();\n          for (FileStatus sourceStatus: sourceFiles) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Recording source-path: \" + sourceStatus.getPath() + \" for copy.\");\n            }\n            CopyListingFileStatus sourceCopyListingStatus \u003d\n              DistCpUtils.toCopyListingFileStatus(sourceFS, sourceStatus,\n                  preserveAcls \u0026\u0026 sourceStatus.isDirectory(),\n                  preserveXAttrs \u0026\u0026 sourceStatus.isDirectory(),\n                  preserveRawXAttrs \u0026\u0026 sourceStatus.isDirectory());\n            writeToFileListing(fileListWriter, sourceCopyListingStatus,\n                sourcePathRoot);\n\n            if (sourceStatus.isDirectory()) {\n              if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Adding source dir for traverse: \" + sourceStatus.getPath());\n              }\n              sourceDirs.add(sourceStatus);\n            }\n          }\n          traverseDirectory(fileListWriter, sourceFS, sourceDirs,\n                            sourcePathRoot, options);\n        }\n      }\n      fileListWriter.close();\n      printStats();\n      LOG.info(\"Build file listing completed.\");\n      fileListWriter \u003d null;\n    } finally {\n      IOUtils.cleanup(LOG, fileListWriter);\n    }\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/SimpleCopyListing.java",
      "extendedDetails": {}
    },
    "cfba355052df15f8eb6cc9b8e90e2d8492bec7d7": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11827. Speed-up distcp buildListing() using threadpool (Zoran Dimitrijevic via raviprak)\n",
      "commitDate": "21/04/15 4:49 PM",
      "commitName": "cfba355052df15f8eb6cc9b8e90e2d8492bec7d7",
      "commitAuthor": "Ravi Prakash",
      "commitDateOld": "03/04/15 2:08 PM",
      "commitNameOld": "932730df7d62077f7356464ad27f69469965d77a",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 18.11,
      "commitsBetweenForRepo": 133,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,59 @@\n   public void doBuildListing(SequenceFile.Writer fileListWriter,\n       DistCpOptions options) throws IOException {\n+    if (options.getNumListstatusThreads() \u003e 0) {\n+      numListstatusThreads \u003d options.getNumListstatusThreads();\n+    }\n+\n     try {\n       for (Path path: options.getSourcePaths()) {\n         FileSystem sourceFS \u003d path.getFileSystem(getConf());\n         final boolean preserveAcls \u003d options.shouldPreserve(FileAttribute.ACL);\n         final boolean preserveXAttrs \u003d options.shouldPreserve(FileAttribute.XATTR);\n         final boolean preserveRawXAttrs \u003d options.shouldPreserveRawXattrs();\n         path \u003d makeQualified(path);\n \n         FileStatus rootStatus \u003d sourceFS.getFileStatus(path);\n         Path sourcePathRoot \u003d computeSourceRootPath(rootStatus, options);\n \n         FileStatus[] sourceFiles \u003d sourceFS.listStatus(path);\n         boolean explore \u003d (sourceFiles !\u003d null \u0026\u0026 sourceFiles.length \u003e 0);\n         if (!explore || rootStatus.isDirectory()) {\n           CopyListingFileStatus rootCopyListingStatus \u003d\n             DistCpUtils.toCopyListingFileStatus(sourceFS, rootStatus,\n                 preserveAcls, preserveXAttrs, preserveRawXAttrs);\n           writeToFileListingRoot(fileListWriter, rootCopyListingStatus,\n               sourcePathRoot, options);\n         }\n         if (explore) {\n+          ArrayList\u003cFileStatus\u003e sourceDirs \u003d new ArrayList\u003cFileStatus\u003e();\n           for (FileStatus sourceStatus: sourceFiles) {\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Recording source-path: \" + sourceStatus.getPath() + \" for copy.\");\n             }\n             CopyListingFileStatus sourceCopyListingStatus \u003d\n               DistCpUtils.toCopyListingFileStatus(sourceFS, sourceStatus,\n                   preserveAcls \u0026\u0026 sourceStatus.isDirectory(),\n                   preserveXAttrs \u0026\u0026 sourceStatus.isDirectory(),\n                   preserveRawXAttrs \u0026\u0026 sourceStatus.isDirectory());\n             writeToFileListing(fileListWriter, sourceCopyListingStatus,\n                 sourcePathRoot, options);\n \n             if (sourceStatus.isDirectory()) {\n               if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"Traversing source dir: \" + sourceStatus.getPath());\n+                LOG.debug(\"Adding source dir for traverse: \" + sourceStatus.getPath());\n               }\n-              traverseDirectory(fileListWriter, sourceFS, sourceStatus,\n-                                sourcePathRoot, options);\n+              sourceDirs.add(sourceStatus);\n             }\n           }\n+          traverseDirectory(fileListWriter, sourceFS, sourceDirs,\n+                            sourcePathRoot, options);\n         }\n       }\n       fileListWriter.close();\n+      printStats();\n+      LOG.info(\"Build file listing completed.\");\n       fileListWriter \u003d null;\n     } finally {\n       IOUtils.cleanup(LOG, fileListWriter);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void doBuildListing(SequenceFile.Writer fileListWriter,\n      DistCpOptions options) throws IOException {\n    if (options.getNumListstatusThreads() \u003e 0) {\n      numListstatusThreads \u003d options.getNumListstatusThreads();\n    }\n\n    try {\n      for (Path path: options.getSourcePaths()) {\n        FileSystem sourceFS \u003d path.getFileSystem(getConf());\n        final boolean preserveAcls \u003d options.shouldPreserve(FileAttribute.ACL);\n        final boolean preserveXAttrs \u003d options.shouldPreserve(FileAttribute.XATTR);\n        final boolean preserveRawXAttrs \u003d options.shouldPreserveRawXattrs();\n        path \u003d makeQualified(path);\n\n        FileStatus rootStatus \u003d sourceFS.getFileStatus(path);\n        Path sourcePathRoot \u003d computeSourceRootPath(rootStatus, options);\n\n        FileStatus[] sourceFiles \u003d sourceFS.listStatus(path);\n        boolean explore \u003d (sourceFiles !\u003d null \u0026\u0026 sourceFiles.length \u003e 0);\n        if (!explore || rootStatus.isDirectory()) {\n          CopyListingFileStatus rootCopyListingStatus \u003d\n            DistCpUtils.toCopyListingFileStatus(sourceFS, rootStatus,\n                preserveAcls, preserveXAttrs, preserveRawXAttrs);\n          writeToFileListingRoot(fileListWriter, rootCopyListingStatus,\n              sourcePathRoot, options);\n        }\n        if (explore) {\n          ArrayList\u003cFileStatus\u003e sourceDirs \u003d new ArrayList\u003cFileStatus\u003e();\n          for (FileStatus sourceStatus: sourceFiles) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Recording source-path: \" + sourceStatus.getPath() + \" for copy.\");\n            }\n            CopyListingFileStatus sourceCopyListingStatus \u003d\n              DistCpUtils.toCopyListingFileStatus(sourceFS, sourceStatus,\n                  preserveAcls \u0026\u0026 sourceStatus.isDirectory(),\n                  preserveXAttrs \u0026\u0026 sourceStatus.isDirectory(),\n                  preserveRawXAttrs \u0026\u0026 sourceStatus.isDirectory());\n            writeToFileListing(fileListWriter, sourceCopyListingStatus,\n                sourcePathRoot, options);\n\n            if (sourceStatus.isDirectory()) {\n              if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Adding source dir for traverse: \" + sourceStatus.getPath());\n              }\n              sourceDirs.add(sourceStatus);\n            }\n          }\n          traverseDirectory(fileListWriter, sourceFS, sourceDirs,\n                            sourcePathRoot, options);\n        }\n      }\n      fileListWriter.close();\n      printStats();\n      LOG.info(\"Build file listing completed.\");\n      fileListWriter \u003d null;\n    } finally {\n      IOUtils.cleanup(LOG, fileListWriter);\n    }\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/SimpleCopyListing.java",
      "extendedDetails": {}
    },
    "932730df7d62077f7356464ad27f69469965d77a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11785. Reduce the number of listStatus operation in distcp buildListing (Zoran Dimitrijevic via Colin P. McCabe)\n",
      "commitDate": "03/04/15 2:08 PM",
      "commitName": "932730df7d62077f7356464ad27f69469965d77a",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "17/03/15 12:09 AM",
      "commitNameOld": "ef9946cd52d54200c658987c1dbc3e6fce133f77",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 17.58,
      "commitsBetweenForRepo": 182,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,51 @@\n   public void doBuildListing(SequenceFile.Writer fileListWriter,\n       DistCpOptions options) throws IOException {\n     try {\n       for (Path path: options.getSourcePaths()) {\n         FileSystem sourceFS \u003d path.getFileSystem(getConf());\n         final boolean preserveAcls \u003d options.shouldPreserve(FileAttribute.ACL);\n         final boolean preserveXAttrs \u003d options.shouldPreserve(FileAttribute.XATTR);\n         final boolean preserveRawXAttrs \u003d options.shouldPreserveRawXattrs();\n         path \u003d makeQualified(path);\n \n         FileStatus rootStatus \u003d sourceFS.getFileStatus(path);\n         Path sourcePathRoot \u003d computeSourceRootPath(rootStatus, options);\n \n         FileStatus[] sourceFiles \u003d sourceFS.listStatus(path);\n         boolean explore \u003d (sourceFiles !\u003d null \u0026\u0026 sourceFiles.length \u003e 0);\n         if (!explore || rootStatus.isDirectory()) {\n           CopyListingFileStatus rootCopyListingStatus \u003d\n             DistCpUtils.toCopyListingFileStatus(sourceFS, rootStatus,\n                 preserveAcls, preserveXAttrs, preserveRawXAttrs);\n           writeToFileListingRoot(fileListWriter, rootCopyListingStatus,\n               sourcePathRoot, options);\n         }\n         if (explore) {\n           for (FileStatus sourceStatus: sourceFiles) {\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Recording source-path: \" + sourceStatus.getPath() + \" for copy.\");\n             }\n             CopyListingFileStatus sourceCopyListingStatus \u003d\n               DistCpUtils.toCopyListingFileStatus(sourceFS, sourceStatus,\n                   preserveAcls \u0026\u0026 sourceStatus.isDirectory(),\n                   preserveXAttrs \u0026\u0026 sourceStatus.isDirectory(),\n                   preserveRawXAttrs \u0026\u0026 sourceStatus.isDirectory());\n             writeToFileListing(fileListWriter, sourceCopyListingStatus,\n                 sourcePathRoot, options);\n \n-            if (isDirectoryAndNotEmpty(sourceFS, sourceStatus)) {\n+            if (sourceStatus.isDirectory()) {\n               if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"Traversing non-empty source dir: \" + sourceStatus.getPath());\n+                LOG.debug(\"Traversing source dir: \" + sourceStatus.getPath());\n               }\n-              traverseNonEmptyDirectory(fileListWriter, sourceStatus, sourcePathRoot,\n-                  options);\n+              traverseDirectory(fileListWriter, sourceFS, sourceStatus,\n+                                sourcePathRoot, options);\n             }\n           }\n         }\n       }\n       fileListWriter.close();\n       fileListWriter \u003d null;\n     } finally {\n       IOUtils.cleanup(LOG, fileListWriter);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void doBuildListing(SequenceFile.Writer fileListWriter,\n      DistCpOptions options) throws IOException {\n    try {\n      for (Path path: options.getSourcePaths()) {\n        FileSystem sourceFS \u003d path.getFileSystem(getConf());\n        final boolean preserveAcls \u003d options.shouldPreserve(FileAttribute.ACL);\n        final boolean preserveXAttrs \u003d options.shouldPreserve(FileAttribute.XATTR);\n        final boolean preserveRawXAttrs \u003d options.shouldPreserveRawXattrs();\n        path \u003d makeQualified(path);\n\n        FileStatus rootStatus \u003d sourceFS.getFileStatus(path);\n        Path sourcePathRoot \u003d computeSourceRootPath(rootStatus, options);\n\n        FileStatus[] sourceFiles \u003d sourceFS.listStatus(path);\n        boolean explore \u003d (sourceFiles !\u003d null \u0026\u0026 sourceFiles.length \u003e 0);\n        if (!explore || rootStatus.isDirectory()) {\n          CopyListingFileStatus rootCopyListingStatus \u003d\n            DistCpUtils.toCopyListingFileStatus(sourceFS, rootStatus,\n                preserveAcls, preserveXAttrs, preserveRawXAttrs);\n          writeToFileListingRoot(fileListWriter, rootCopyListingStatus,\n              sourcePathRoot, options);\n        }\n        if (explore) {\n          for (FileStatus sourceStatus: sourceFiles) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Recording source-path: \" + sourceStatus.getPath() + \" for copy.\");\n            }\n            CopyListingFileStatus sourceCopyListingStatus \u003d\n              DistCpUtils.toCopyListingFileStatus(sourceFS, sourceStatus,\n                  preserveAcls \u0026\u0026 sourceStatus.isDirectory(),\n                  preserveXAttrs \u0026\u0026 sourceStatus.isDirectory(),\n                  preserveRawXAttrs \u0026\u0026 sourceStatus.isDirectory());\n            writeToFileListing(fileListWriter, sourceCopyListingStatus,\n                sourcePathRoot, options);\n\n            if (sourceStatus.isDirectory()) {\n              if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Traversing source dir: \" + sourceStatus.getPath());\n              }\n              traverseDirectory(fileListWriter, sourceFS, sourceStatus,\n                                sourcePathRoot, options);\n            }\n          }\n        }\n      }\n      fileListWriter.close();\n      fileListWriter \u003d null;\n    } finally {\n      IOUtils.cleanup(LOG, fileListWriter);\n    }\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/SimpleCopyListing.java",
      "extendedDetails": {}
    },
    "041b8326a1511b721958792a6b94ecfe27d7a1fb": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6007. Add support to distcp to preserve raw.* namespace extended attributes. (clamb)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1616657 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/14 6:32 PM",
      "commitName": "041b8326a1511b721958792a6b94ecfe27d7a1fb",
      "commitAuthor": "Charles Lamb",
      "commitDateOld": "06/06/14 7:45 AM",
      "commitNameOld": "f81c7b0252839ae0dcd92fe2dc626ff9f87cd2c9",
      "commitAuthorOld": "Uma Maheswara Rao G",
      "daysBetweenCommits": 62.45,
      "commitsBetweenForRepo": 482,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,51 @@\n   public void doBuildListing(SequenceFile.Writer fileListWriter,\n       DistCpOptions options) throws IOException {\n     try {\n       for (Path path: options.getSourcePaths()) {\n         FileSystem sourceFS \u003d path.getFileSystem(getConf());\n+        final boolean preserveAcls \u003d options.shouldPreserve(FileAttribute.ACL);\n+        final boolean preserveXAttrs \u003d options.shouldPreserve(FileAttribute.XATTR);\n+        final boolean preserveRawXAttrs \u003d options.shouldPreserveRawXattrs();\n         path \u003d makeQualified(path);\n \n         FileStatus rootStatus \u003d sourceFS.getFileStatus(path);\n         Path sourcePathRoot \u003d computeSourceRootPath(rootStatus, options);\n \n         FileStatus[] sourceFiles \u003d sourceFS.listStatus(path);\n         boolean explore \u003d (sourceFiles !\u003d null \u0026\u0026 sourceFiles.length \u003e 0);\n         if (!explore || rootStatus.isDirectory()) {\n           CopyListingFileStatus rootCopyListingStatus \u003d\n             DistCpUtils.toCopyListingFileStatus(sourceFS, rootStatus,\n-              options.shouldPreserve(FileAttribute.ACL), \n-              options.shouldPreserve(FileAttribute.XATTR));\n+                preserveAcls, preserveXAttrs, preserveRawXAttrs);\n           writeToFileListingRoot(fileListWriter, rootCopyListingStatus,\n               sourcePathRoot, options);\n         }\n         if (explore) {\n           for (FileStatus sourceStatus: sourceFiles) {\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Recording source-path: \" + sourceStatus.getPath() + \" for copy.\");\n             }\n             CopyListingFileStatus sourceCopyListingStatus \u003d\n               DistCpUtils.toCopyListingFileStatus(sourceFS, sourceStatus,\n-                options.shouldPreserve(FileAttribute.ACL) \u0026\u0026\n-                sourceStatus.isDirectory(), options.shouldPreserve(\n-                    FileAttribute.XATTR) \u0026\u0026 sourceStatus.isDirectory());\n+                  preserveAcls \u0026\u0026 sourceStatus.isDirectory(),\n+                  preserveXAttrs \u0026\u0026 sourceStatus.isDirectory(),\n+                  preserveRawXAttrs \u0026\u0026 sourceStatus.isDirectory());\n             writeToFileListing(fileListWriter, sourceCopyListingStatus,\n                 sourcePathRoot, options);\n \n             if (isDirectoryAndNotEmpty(sourceFS, sourceStatus)) {\n               if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"Traversing non-empty source dir: \" + sourceStatus.getPath());\n               }\n               traverseNonEmptyDirectory(fileListWriter, sourceStatus, sourcePathRoot,\n                   options);\n             }\n           }\n         }\n       }\n       fileListWriter.close();\n       fileListWriter \u003d null;\n     } finally {\n       IOUtils.cleanup(LOG, fileListWriter);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void doBuildListing(SequenceFile.Writer fileListWriter,\n      DistCpOptions options) throws IOException {\n    try {\n      for (Path path: options.getSourcePaths()) {\n        FileSystem sourceFS \u003d path.getFileSystem(getConf());\n        final boolean preserveAcls \u003d options.shouldPreserve(FileAttribute.ACL);\n        final boolean preserveXAttrs \u003d options.shouldPreserve(FileAttribute.XATTR);\n        final boolean preserveRawXAttrs \u003d options.shouldPreserveRawXattrs();\n        path \u003d makeQualified(path);\n\n        FileStatus rootStatus \u003d sourceFS.getFileStatus(path);\n        Path sourcePathRoot \u003d computeSourceRootPath(rootStatus, options);\n\n        FileStatus[] sourceFiles \u003d sourceFS.listStatus(path);\n        boolean explore \u003d (sourceFiles !\u003d null \u0026\u0026 sourceFiles.length \u003e 0);\n        if (!explore || rootStatus.isDirectory()) {\n          CopyListingFileStatus rootCopyListingStatus \u003d\n            DistCpUtils.toCopyListingFileStatus(sourceFS, rootStatus,\n                preserveAcls, preserveXAttrs, preserveRawXAttrs);\n          writeToFileListingRoot(fileListWriter, rootCopyListingStatus,\n              sourcePathRoot, options);\n        }\n        if (explore) {\n          for (FileStatus sourceStatus: sourceFiles) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Recording source-path: \" + sourceStatus.getPath() + \" for copy.\");\n            }\n            CopyListingFileStatus sourceCopyListingStatus \u003d\n              DistCpUtils.toCopyListingFileStatus(sourceFS, sourceStatus,\n                  preserveAcls \u0026\u0026 sourceStatus.isDirectory(),\n                  preserveXAttrs \u0026\u0026 sourceStatus.isDirectory(),\n                  preserveRawXAttrs \u0026\u0026 sourceStatus.isDirectory());\n            writeToFileListing(fileListWriter, sourceCopyListingStatus,\n                sourcePathRoot, options);\n\n            if (isDirectoryAndNotEmpty(sourceFS, sourceStatus)) {\n              if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Traversing non-empty source dir: \" + sourceStatus.getPath());\n              }\n              traverseNonEmptyDirectory(fileListWriter, sourceStatus, sourcePathRoot,\n                  options);\n            }\n          }\n        }\n      }\n      fileListWriter.close();\n      fileListWriter \u003d null;\n    } finally {\n      IOUtils.cleanup(LOG, fileListWriter);\n    }\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/SimpleCopyListing.java",
      "extendedDetails": {}
    },
    "f81c7b0252839ae0dcd92fe2dc626ff9f87cd2c9": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5898. distcp to support preserving HDFS extended attributes(XAttrs). Contributed by Yi Liu.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1600900 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/06/14 7:45 AM",
      "commitName": "f81c7b0252839ae0dcd92fe2dc626ff9f87cd2c9",
      "commitAuthor": "Uma Maheswara Rao G",
      "commitDateOld": "16/05/14 11:25 AM",
      "commitNameOld": "11be7334c4e04b1b3fe12d86f4646cc83c068b05",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 20.85,
      "commitsBetweenForRepo": 97,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,49 @@\n   public void doBuildListing(SequenceFile.Writer fileListWriter,\n       DistCpOptions options) throws IOException {\n     try {\n       for (Path path: options.getSourcePaths()) {\n         FileSystem sourceFS \u003d path.getFileSystem(getConf());\n         path \u003d makeQualified(path);\n \n         FileStatus rootStatus \u003d sourceFS.getFileStatus(path);\n         Path sourcePathRoot \u003d computeSourceRootPath(rootStatus, options);\n \n         FileStatus[] sourceFiles \u003d sourceFS.listStatus(path);\n         boolean explore \u003d (sourceFiles !\u003d null \u0026\u0026 sourceFiles.length \u003e 0);\n         if (!explore || rootStatus.isDirectory()) {\n           CopyListingFileStatus rootCopyListingStatus \u003d\n             DistCpUtils.toCopyListingFileStatus(sourceFS, rootStatus,\n-              options.shouldPreserve(FileAttribute.ACL));\n+              options.shouldPreserve(FileAttribute.ACL), \n+              options.shouldPreserve(FileAttribute.XATTR));\n           writeToFileListingRoot(fileListWriter, rootCopyListingStatus,\n               sourcePathRoot, options);\n         }\n         if (explore) {\n           for (FileStatus sourceStatus: sourceFiles) {\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Recording source-path: \" + sourceStatus.getPath() + \" for copy.\");\n             }\n             CopyListingFileStatus sourceCopyListingStatus \u003d\n               DistCpUtils.toCopyListingFileStatus(sourceFS, sourceStatus,\n                 options.shouldPreserve(FileAttribute.ACL) \u0026\u0026\n-                sourceStatus.isDirectory());\n+                sourceStatus.isDirectory(), options.shouldPreserve(\n+                    FileAttribute.XATTR) \u0026\u0026 sourceStatus.isDirectory());\n             writeToFileListing(fileListWriter, sourceCopyListingStatus,\n                 sourcePathRoot, options);\n \n             if (isDirectoryAndNotEmpty(sourceFS, sourceStatus)) {\n               if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"Traversing non-empty source dir: \" + sourceStatus.getPath());\n               }\n               traverseNonEmptyDirectory(fileListWriter, sourceStatus, sourcePathRoot,\n                   options);\n             }\n           }\n         }\n       }\n       fileListWriter.close();\n       fileListWriter \u003d null;\n     } finally {\n       IOUtils.cleanup(LOG, fileListWriter);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void doBuildListing(SequenceFile.Writer fileListWriter,\n      DistCpOptions options) throws IOException {\n    try {\n      for (Path path: options.getSourcePaths()) {\n        FileSystem sourceFS \u003d path.getFileSystem(getConf());\n        path \u003d makeQualified(path);\n\n        FileStatus rootStatus \u003d sourceFS.getFileStatus(path);\n        Path sourcePathRoot \u003d computeSourceRootPath(rootStatus, options);\n\n        FileStatus[] sourceFiles \u003d sourceFS.listStatus(path);\n        boolean explore \u003d (sourceFiles !\u003d null \u0026\u0026 sourceFiles.length \u003e 0);\n        if (!explore || rootStatus.isDirectory()) {\n          CopyListingFileStatus rootCopyListingStatus \u003d\n            DistCpUtils.toCopyListingFileStatus(sourceFS, rootStatus,\n              options.shouldPreserve(FileAttribute.ACL), \n              options.shouldPreserve(FileAttribute.XATTR));\n          writeToFileListingRoot(fileListWriter, rootCopyListingStatus,\n              sourcePathRoot, options);\n        }\n        if (explore) {\n          for (FileStatus sourceStatus: sourceFiles) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Recording source-path: \" + sourceStatus.getPath() + \" for copy.\");\n            }\n            CopyListingFileStatus sourceCopyListingStatus \u003d\n              DistCpUtils.toCopyListingFileStatus(sourceFS, sourceStatus,\n                options.shouldPreserve(FileAttribute.ACL) \u0026\u0026\n                sourceStatus.isDirectory(), options.shouldPreserve(\n                    FileAttribute.XATTR) \u0026\u0026 sourceStatus.isDirectory());\n            writeToFileListing(fileListWriter, sourceCopyListingStatus,\n                sourcePathRoot, options);\n\n            if (isDirectoryAndNotEmpty(sourceFS, sourceStatus)) {\n              if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Traversing non-empty source dir: \" + sourceStatus.getPath());\n              }\n              traverseNonEmptyDirectory(fileListWriter, sourceStatus, sourcePathRoot,\n                  options);\n            }\n          }\n        }\n      }\n      fileListWriter.close();\n      fileListWriter \u003d null;\n    } finally {\n      IOUtils.cleanup(LOG, fileListWriter);\n    }\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/SimpleCopyListing.java",
      "extendedDetails": {}
    },
    "11be7334c4e04b1b3fe12d86f4646cc83c068b05": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5809. Enhance distcp to support preserving HDFS ACLs. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1595283 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/05/14 11:25 AM",
      "commitName": "11be7334c4e04b1b3fe12d86f4646cc83c068b05",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "02/04/14 5:32 PM",
      "commitNameOld": "640a097533e0883bf49504673228d5a327089b44",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 43.75,
      "commitsBetweenForRepo": 263,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,47 @@\n   public void doBuildListing(SequenceFile.Writer fileListWriter,\n       DistCpOptions options) throws IOException {\n     try {\n       for (Path path: options.getSourcePaths()) {\n         FileSystem sourceFS \u003d path.getFileSystem(getConf());\n         path \u003d makeQualified(path);\n \n         FileStatus rootStatus \u003d sourceFS.getFileStatus(path);\n         Path sourcePathRoot \u003d computeSourceRootPath(rootStatus, options);\n-        boolean localFile \u003d (rootStatus.getClass() !\u003d FileStatus.class);\n \n         FileStatus[] sourceFiles \u003d sourceFS.listStatus(path);\n         boolean explore \u003d (sourceFiles !\u003d null \u0026\u0026 sourceFiles.length \u003e 0);\n         if (!explore || rootStatus.isDirectory()) {\n-          writeToFileListingRoot(fileListWriter, rootStatus, sourcePathRoot,\n-              localFile, options);\n+          CopyListingFileStatus rootCopyListingStatus \u003d\n+            DistCpUtils.toCopyListingFileStatus(sourceFS, rootStatus,\n+              options.shouldPreserve(FileAttribute.ACL));\n+          writeToFileListingRoot(fileListWriter, rootCopyListingStatus,\n+              sourcePathRoot, options);\n         }\n         if (explore) {\n           for (FileStatus sourceStatus: sourceFiles) {\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Recording source-path: \" + sourceStatus.getPath() + \" for copy.\");\n             }\n-            writeToFileListing(fileListWriter, sourceStatus, sourcePathRoot,\n-                localFile, options);\n+            CopyListingFileStatus sourceCopyListingStatus \u003d\n+              DistCpUtils.toCopyListingFileStatus(sourceFS, sourceStatus,\n+                options.shouldPreserve(FileAttribute.ACL) \u0026\u0026\n+                sourceStatus.isDirectory());\n+            writeToFileListing(fileListWriter, sourceCopyListingStatus,\n+                sourcePathRoot, options);\n \n             if (isDirectoryAndNotEmpty(sourceFS, sourceStatus)) {\n               if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"Traversing non-empty source dir: \" + sourceStatus.getPath());\n               }\n               traverseNonEmptyDirectory(fileListWriter, sourceStatus, sourcePathRoot,\n-                  localFile, options);\n+                  options);\n             }\n           }\n         }\n       }\n       fileListWriter.close();\n       fileListWriter \u003d null;\n     } finally {\n       IOUtils.cleanup(LOG, fileListWriter);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void doBuildListing(SequenceFile.Writer fileListWriter,\n      DistCpOptions options) throws IOException {\n    try {\n      for (Path path: options.getSourcePaths()) {\n        FileSystem sourceFS \u003d path.getFileSystem(getConf());\n        path \u003d makeQualified(path);\n\n        FileStatus rootStatus \u003d sourceFS.getFileStatus(path);\n        Path sourcePathRoot \u003d computeSourceRootPath(rootStatus, options);\n\n        FileStatus[] sourceFiles \u003d sourceFS.listStatus(path);\n        boolean explore \u003d (sourceFiles !\u003d null \u0026\u0026 sourceFiles.length \u003e 0);\n        if (!explore || rootStatus.isDirectory()) {\n          CopyListingFileStatus rootCopyListingStatus \u003d\n            DistCpUtils.toCopyListingFileStatus(sourceFS, rootStatus,\n              options.shouldPreserve(FileAttribute.ACL));\n          writeToFileListingRoot(fileListWriter, rootCopyListingStatus,\n              sourcePathRoot, options);\n        }\n        if (explore) {\n          for (FileStatus sourceStatus: sourceFiles) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Recording source-path: \" + sourceStatus.getPath() + \" for copy.\");\n            }\n            CopyListingFileStatus sourceCopyListingStatus \u003d\n              DistCpUtils.toCopyListingFileStatus(sourceFS, sourceStatus,\n                options.shouldPreserve(FileAttribute.ACL) \u0026\u0026\n                sourceStatus.isDirectory());\n            writeToFileListing(fileListWriter, sourceCopyListingStatus,\n                sourcePathRoot, options);\n\n            if (isDirectoryAndNotEmpty(sourceFS, sourceStatus)) {\n              if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Traversing non-empty source dir: \" + sourceStatus.getPath());\n              }\n              traverseNonEmptyDirectory(fileListWriter, sourceStatus, sourcePathRoot,\n                  options);\n            }\n          }\n        }\n      }\n      fileListWriter.close();\n      fileListWriter \u003d null;\n    } finally {\n      IOUtils.cleanup(LOG, fileListWriter);\n    }\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/SimpleCopyListing.java",
      "extendedDetails": {}
    },
    "640a097533e0883bf49504673228d5a327089b44": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10459. distcp V2 doesn\u0027t preserve root dir\u0027s attributes when -p is specified. Contributed by Yongjun Zhang.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1584227 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/04/14 5:32 PM",
      "commitName": "640a097533e0883bf49504673228d5a327089b44",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "05/12/13 7:47 AM",
      "commitNameOld": "9ea61e44153b938309841b1499488360e9abd176",
      "commitAuthorOld": "Daryn Sharp",
      "daysBetweenCommits": 118.36,
      "commitsBetweenForRepo": 864,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,41 @@\n   public void doBuildListing(SequenceFile.Writer fileListWriter,\n       DistCpOptions options) throws IOException {\n     try {\n       for (Path path: options.getSourcePaths()) {\n         FileSystem sourceFS \u003d path.getFileSystem(getConf());\n         path \u003d makeQualified(path);\n \n         FileStatus rootStatus \u003d sourceFS.getFileStatus(path);\n         Path sourcePathRoot \u003d computeSourceRootPath(rootStatus, options);\n         boolean localFile \u003d (rootStatus.getClass() !\u003d FileStatus.class);\n \n         FileStatus[] sourceFiles \u003d sourceFS.listStatus(path);\n-        if (sourceFiles !\u003d null \u0026\u0026 sourceFiles.length \u003e 0) {\n+        boolean explore \u003d (sourceFiles !\u003d null \u0026\u0026 sourceFiles.length \u003e 0);\n+        if (!explore || rootStatus.isDirectory()) {\n+          writeToFileListingRoot(fileListWriter, rootStatus, sourcePathRoot,\n+              localFile, options);\n+        }\n+        if (explore) {\n           for (FileStatus sourceStatus: sourceFiles) {\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Recording source-path: \" + sourceStatus.getPath() + \" for copy.\");\n             }\n             writeToFileListing(fileListWriter, sourceStatus, sourcePathRoot,\n                 localFile, options);\n \n             if (isDirectoryAndNotEmpty(sourceFS, sourceStatus)) {\n               if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"Traversing non-empty source dir: \" + sourceStatus.getPath());\n               }\n               traverseNonEmptyDirectory(fileListWriter, sourceStatus, sourcePathRoot,\n                   localFile, options);\n             }\n           }\n-        } else {\n-          writeToFileListing(fileListWriter, rootStatus, sourcePathRoot,\n-              localFile, options);\n         }\n       }\n       fileListWriter.close();\n       fileListWriter \u003d null;\n     } finally {\n       IOUtils.cleanup(LOG, fileListWriter);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void doBuildListing(SequenceFile.Writer fileListWriter,\n      DistCpOptions options) throws IOException {\n    try {\n      for (Path path: options.getSourcePaths()) {\n        FileSystem sourceFS \u003d path.getFileSystem(getConf());\n        path \u003d makeQualified(path);\n\n        FileStatus rootStatus \u003d sourceFS.getFileStatus(path);\n        Path sourcePathRoot \u003d computeSourceRootPath(rootStatus, options);\n        boolean localFile \u003d (rootStatus.getClass() !\u003d FileStatus.class);\n\n        FileStatus[] sourceFiles \u003d sourceFS.listStatus(path);\n        boolean explore \u003d (sourceFiles !\u003d null \u0026\u0026 sourceFiles.length \u003e 0);\n        if (!explore || rootStatus.isDirectory()) {\n          writeToFileListingRoot(fileListWriter, rootStatus, sourcePathRoot,\n              localFile, options);\n        }\n        if (explore) {\n          for (FileStatus sourceStatus: sourceFiles) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Recording source-path: \" + sourceStatus.getPath() + \" for copy.\");\n            }\n            writeToFileListing(fileListWriter, sourceStatus, sourcePathRoot,\n                localFile, options);\n\n            if (isDirectoryAndNotEmpty(sourceFS, sourceStatus)) {\n              if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Traversing non-empty source dir: \" + sourceStatus.getPath());\n              }\n              traverseNonEmptyDirectory(fileListWriter, sourceStatus, sourcePathRoot,\n                  localFile, options);\n            }\n          }\n        }\n      }\n      fileListWriter.close();\n      fileListWriter \u003d null;\n    } finally {\n      IOUtils.cleanup(LOG, fileListWriter);\n    }\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/SimpleCopyListing.java",
      "extendedDetails": {}
    },
    "9ea61e44153b938309841b1499488360e9abd176": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-10129. Distcp may succeed when it fails (daryn)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1548175 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/12/13 7:47 AM",
      "commitName": "9ea61e44153b938309841b1499488360e9abd176",
      "commitAuthor": "Daryn Sharp",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-10129. Distcp may succeed when it fails (daryn)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1548175 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "05/12/13 7:47 AM",
          "commitName": "9ea61e44153b938309841b1499488360e9abd176",
          "commitAuthor": "Daryn Sharp",
          "commitDateOld": "22/03/13 3:09 AM",
          "commitNameOld": "6f92ad9868b008eb523ae3279e05004de31a08ce",
          "commitAuthorOld": "Amareshwari Sri Ramadasu",
          "daysBetweenCommits": 258.24,
          "commitsBetweenForRepo": 1593,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,39 @@\n-  public void doBuildListing(Path pathToListingFile, DistCpOptions options) throws IOException {\n-\n-    SequenceFile.Writer fileListWriter \u003d null;\n-\n+  public void doBuildListing(SequenceFile.Writer fileListWriter,\n+      DistCpOptions options) throws IOException {\n     try {\n-      fileListWriter \u003d getWriter(pathToListingFile);\n-\n       for (Path path: options.getSourcePaths()) {\n         FileSystem sourceFS \u003d path.getFileSystem(getConf());\n         path \u003d makeQualified(path);\n \n         FileStatus rootStatus \u003d sourceFS.getFileStatus(path);\n         Path sourcePathRoot \u003d computeSourceRootPath(rootStatus, options);\n         boolean localFile \u003d (rootStatus.getClass() !\u003d FileStatus.class);\n \n         FileStatus[] sourceFiles \u003d sourceFS.listStatus(path);\n         if (sourceFiles !\u003d null \u0026\u0026 sourceFiles.length \u003e 0) {\n           for (FileStatus sourceStatus: sourceFiles) {\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Recording source-path: \" + sourceStatus.getPath() + \" for copy.\");\n             }\n             writeToFileListing(fileListWriter, sourceStatus, sourcePathRoot,\n                 localFile, options);\n \n             if (isDirectoryAndNotEmpty(sourceFS, sourceStatus)) {\n               if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"Traversing non-empty source dir: \" + sourceStatus.getPath());\n               }\n               traverseNonEmptyDirectory(fileListWriter, sourceStatus, sourcePathRoot,\n                   localFile, options);\n             }\n           }\n         } else {\n           writeToFileListing(fileListWriter, rootStatus, sourcePathRoot,\n               localFile, options);\n         }\n       }\n+      fileListWriter.close();\n+      fileListWriter \u003d null;\n     } finally {\n-      IOUtils.closeStream(fileListWriter);\n+      IOUtils.cleanup(LOG, fileListWriter);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void doBuildListing(SequenceFile.Writer fileListWriter,\n      DistCpOptions options) throws IOException {\n    try {\n      for (Path path: options.getSourcePaths()) {\n        FileSystem sourceFS \u003d path.getFileSystem(getConf());\n        path \u003d makeQualified(path);\n\n        FileStatus rootStatus \u003d sourceFS.getFileStatus(path);\n        Path sourcePathRoot \u003d computeSourceRootPath(rootStatus, options);\n        boolean localFile \u003d (rootStatus.getClass() !\u003d FileStatus.class);\n\n        FileStatus[] sourceFiles \u003d sourceFS.listStatus(path);\n        if (sourceFiles !\u003d null \u0026\u0026 sourceFiles.length \u003e 0) {\n          for (FileStatus sourceStatus: sourceFiles) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Recording source-path: \" + sourceStatus.getPath() + \" for copy.\");\n            }\n            writeToFileListing(fileListWriter, sourceStatus, sourcePathRoot,\n                localFile, options);\n\n            if (isDirectoryAndNotEmpty(sourceFS, sourceStatus)) {\n              if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Traversing non-empty source dir: \" + sourceStatus.getPath());\n              }\n              traverseNonEmptyDirectory(fileListWriter, sourceStatus, sourcePathRoot,\n                  localFile, options);\n            }\n          }\n        } else {\n          writeToFileListing(fileListWriter, rootStatus, sourcePathRoot,\n              localFile, options);\n        }\n      }\n      fileListWriter.close();\n      fileListWriter \u003d null;\n    } finally {\n      IOUtils.cleanup(LOG, fileListWriter);\n    }\n  }",
          "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/SimpleCopyListing.java",
          "extendedDetails": {
            "oldValue": "[pathToListingFile-Path, options-DistCpOptions]",
            "newValue": "[fileListWriter-SequenceFile.Writer, options-DistCpOptions]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-10129. Distcp may succeed when it fails (daryn)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1548175 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "05/12/13 7:47 AM",
          "commitName": "9ea61e44153b938309841b1499488360e9abd176",
          "commitAuthor": "Daryn Sharp",
          "commitDateOld": "22/03/13 3:09 AM",
          "commitNameOld": "6f92ad9868b008eb523ae3279e05004de31a08ce",
          "commitAuthorOld": "Amareshwari Sri Ramadasu",
          "daysBetweenCommits": 258.24,
          "commitsBetweenForRepo": 1593,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,39 @@\n-  public void doBuildListing(Path pathToListingFile, DistCpOptions options) throws IOException {\n-\n-    SequenceFile.Writer fileListWriter \u003d null;\n-\n+  public void doBuildListing(SequenceFile.Writer fileListWriter,\n+      DistCpOptions options) throws IOException {\n     try {\n-      fileListWriter \u003d getWriter(pathToListingFile);\n-\n       for (Path path: options.getSourcePaths()) {\n         FileSystem sourceFS \u003d path.getFileSystem(getConf());\n         path \u003d makeQualified(path);\n \n         FileStatus rootStatus \u003d sourceFS.getFileStatus(path);\n         Path sourcePathRoot \u003d computeSourceRootPath(rootStatus, options);\n         boolean localFile \u003d (rootStatus.getClass() !\u003d FileStatus.class);\n \n         FileStatus[] sourceFiles \u003d sourceFS.listStatus(path);\n         if (sourceFiles !\u003d null \u0026\u0026 sourceFiles.length \u003e 0) {\n           for (FileStatus sourceStatus: sourceFiles) {\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Recording source-path: \" + sourceStatus.getPath() + \" for copy.\");\n             }\n             writeToFileListing(fileListWriter, sourceStatus, sourcePathRoot,\n                 localFile, options);\n \n             if (isDirectoryAndNotEmpty(sourceFS, sourceStatus)) {\n               if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"Traversing non-empty source dir: \" + sourceStatus.getPath());\n               }\n               traverseNonEmptyDirectory(fileListWriter, sourceStatus, sourcePathRoot,\n                   localFile, options);\n             }\n           }\n         } else {\n           writeToFileListing(fileListWriter, rootStatus, sourcePathRoot,\n               localFile, options);\n         }\n       }\n+      fileListWriter.close();\n+      fileListWriter \u003d null;\n     } finally {\n-      IOUtils.closeStream(fileListWriter);\n+      IOUtils.cleanup(LOG, fileListWriter);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void doBuildListing(SequenceFile.Writer fileListWriter,\n      DistCpOptions options) throws IOException {\n    try {\n      for (Path path: options.getSourcePaths()) {\n        FileSystem sourceFS \u003d path.getFileSystem(getConf());\n        path \u003d makeQualified(path);\n\n        FileStatus rootStatus \u003d sourceFS.getFileStatus(path);\n        Path sourcePathRoot \u003d computeSourceRootPath(rootStatus, options);\n        boolean localFile \u003d (rootStatus.getClass() !\u003d FileStatus.class);\n\n        FileStatus[] sourceFiles \u003d sourceFS.listStatus(path);\n        if (sourceFiles !\u003d null \u0026\u0026 sourceFiles.length \u003e 0) {\n          for (FileStatus sourceStatus: sourceFiles) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Recording source-path: \" + sourceStatus.getPath() + \" for copy.\");\n            }\n            writeToFileListing(fileListWriter, sourceStatus, sourcePathRoot,\n                localFile, options);\n\n            if (isDirectoryAndNotEmpty(sourceFS, sourceStatus)) {\n              if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Traversing non-empty source dir: \" + sourceStatus.getPath());\n              }\n              traverseNonEmptyDirectory(fileListWriter, sourceStatus, sourcePathRoot,\n                  localFile, options);\n            }\n          }\n        } else {\n          writeToFileListing(fileListWriter, rootStatus, sourcePathRoot,\n              localFile, options);\n        }\n      }\n      fileListWriter.close();\n      fileListWriter \u003d null;\n    } finally {\n      IOUtils.cleanup(LOG, fileListWriter);\n    }\n  }",
          "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/SimpleCopyListing.java",
          "extendedDetails": {}
        }
      ]
    },
    "6f92ad9868b008eb523ae3279e05004de31a08ce": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5014. Extend Distcp to accept a custom CopyListing. Contributed by Srikanth Sundarrajan\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1459690 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/03/13 3:09 AM",
      "commitName": "6f92ad9868b008eb523ae3279e05004de31a08ce",
      "commitAuthor": "Amareshwari Sri Ramadasu",
      "commitDateOld": "25/01/12 10:36 PM",
      "commitNameOld": "d06948002fb0cabf72cc0d46bf2fa67d45370f67",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 421.15,
      "commitsBetweenForRepo": 2459,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,41 @@\n   public void doBuildListing(Path pathToListingFile, DistCpOptions options) throws IOException {\n \n     SequenceFile.Writer fileListWriter \u003d null;\n \n     try {\n       fileListWriter \u003d getWriter(pathToListingFile);\n \n       for (Path path: options.getSourcePaths()) {\n         FileSystem sourceFS \u003d path.getFileSystem(getConf());\n         path \u003d makeQualified(path);\n \n         FileStatus rootStatus \u003d sourceFS.getFileStatus(path);\n         Path sourcePathRoot \u003d computeSourceRootPath(rootStatus, options);\n         boolean localFile \u003d (rootStatus.getClass() !\u003d FileStatus.class);\n \n         FileStatus[] sourceFiles \u003d sourceFS.listStatus(path);\n         if (sourceFiles !\u003d null \u0026\u0026 sourceFiles.length \u003e 0) {\n           for (FileStatus sourceStatus: sourceFiles) {\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Recording source-path: \" + sourceStatus.getPath() + \" for copy.\");\n             }\n-            writeToFileListing(fileListWriter, sourceStatus, sourcePathRoot, localFile);\n+            writeToFileListing(fileListWriter, sourceStatus, sourcePathRoot,\n+                localFile, options);\n \n             if (isDirectoryAndNotEmpty(sourceFS, sourceStatus)) {\n               if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"Traversing non-empty source dir: \" + sourceStatus.getPath());\n               }\n-              traverseNonEmptyDirectory(fileListWriter, sourceStatus, sourcePathRoot, localFile);\n+              traverseNonEmptyDirectory(fileListWriter, sourceStatus, sourcePathRoot,\n+                  localFile, options);\n             }\n           }\n         } else {\n-          writeToFileListing(fileListWriter, rootStatus, sourcePathRoot, localFile);\n+          writeToFileListing(fileListWriter, rootStatus, sourcePathRoot,\n+              localFile, options);\n         }\n       }\n     } finally {\n       IOUtils.closeStream(fileListWriter);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void doBuildListing(Path pathToListingFile, DistCpOptions options) throws IOException {\n\n    SequenceFile.Writer fileListWriter \u003d null;\n\n    try {\n      fileListWriter \u003d getWriter(pathToListingFile);\n\n      for (Path path: options.getSourcePaths()) {\n        FileSystem sourceFS \u003d path.getFileSystem(getConf());\n        path \u003d makeQualified(path);\n\n        FileStatus rootStatus \u003d sourceFS.getFileStatus(path);\n        Path sourcePathRoot \u003d computeSourceRootPath(rootStatus, options);\n        boolean localFile \u003d (rootStatus.getClass() !\u003d FileStatus.class);\n\n        FileStatus[] sourceFiles \u003d sourceFS.listStatus(path);\n        if (sourceFiles !\u003d null \u0026\u0026 sourceFiles.length \u003e 0) {\n          for (FileStatus sourceStatus: sourceFiles) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Recording source-path: \" + sourceStatus.getPath() + \" for copy.\");\n            }\n            writeToFileListing(fileListWriter, sourceStatus, sourcePathRoot,\n                localFile, options);\n\n            if (isDirectoryAndNotEmpty(sourceFS, sourceStatus)) {\n              if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Traversing non-empty source dir: \" + sourceStatus.getPath());\n              }\n              traverseNonEmptyDirectory(fileListWriter, sourceStatus, sourcePathRoot,\n                  localFile, options);\n            }\n          }\n        } else {\n          writeToFileListing(fileListWriter, rootStatus, sourcePathRoot,\n              localFile, options);\n        }\n      }\n    } finally {\n      IOUtils.closeStream(fileListWriter);\n    }\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/SimpleCopyListing.java",
      "extendedDetails": {}
    },
    "d06948002fb0cabf72cc0d46bf2fa67d45370f67": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-2765. DistCp Rewrite. (Mithun Radhakrishnan via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1236045 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/01/12 10:36 PM",
      "commitName": "d06948002fb0cabf72cc0d46bf2fa67d45370f67",
      "commitAuthor": "Mahadev Konar",
      "diff": "@@ -0,0 +1,38 @@\n+  public void doBuildListing(Path pathToListingFile, DistCpOptions options) throws IOException {\n+\n+    SequenceFile.Writer fileListWriter \u003d null;\n+\n+    try {\n+      fileListWriter \u003d getWriter(pathToListingFile);\n+\n+      for (Path path: options.getSourcePaths()) {\n+        FileSystem sourceFS \u003d path.getFileSystem(getConf());\n+        path \u003d makeQualified(path);\n+\n+        FileStatus rootStatus \u003d sourceFS.getFileStatus(path);\n+        Path sourcePathRoot \u003d computeSourceRootPath(rootStatus, options);\n+        boolean localFile \u003d (rootStatus.getClass() !\u003d FileStatus.class);\n+\n+        FileStatus[] sourceFiles \u003d sourceFS.listStatus(path);\n+        if (sourceFiles !\u003d null \u0026\u0026 sourceFiles.length \u003e 0) {\n+          for (FileStatus sourceStatus: sourceFiles) {\n+            if (LOG.isDebugEnabled()) {\n+              LOG.debug(\"Recording source-path: \" + sourceStatus.getPath() + \" for copy.\");\n+            }\n+            writeToFileListing(fileListWriter, sourceStatus, sourcePathRoot, localFile);\n+\n+            if (isDirectoryAndNotEmpty(sourceFS, sourceStatus)) {\n+              if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Traversing non-empty source dir: \" + sourceStatus.getPath());\n+              }\n+              traverseNonEmptyDirectory(fileListWriter, sourceStatus, sourcePathRoot, localFile);\n+            }\n+          }\n+        } else {\n+          writeToFileListing(fileListWriter, rootStatus, sourcePathRoot, localFile);\n+        }\n+      }\n+    } finally {\n+      IOUtils.closeStream(fileListWriter);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void doBuildListing(Path pathToListingFile, DistCpOptions options) throws IOException {\n\n    SequenceFile.Writer fileListWriter \u003d null;\n\n    try {\n      fileListWriter \u003d getWriter(pathToListingFile);\n\n      for (Path path: options.getSourcePaths()) {\n        FileSystem sourceFS \u003d path.getFileSystem(getConf());\n        path \u003d makeQualified(path);\n\n        FileStatus rootStatus \u003d sourceFS.getFileStatus(path);\n        Path sourcePathRoot \u003d computeSourceRootPath(rootStatus, options);\n        boolean localFile \u003d (rootStatus.getClass() !\u003d FileStatus.class);\n\n        FileStatus[] sourceFiles \u003d sourceFS.listStatus(path);\n        if (sourceFiles !\u003d null \u0026\u0026 sourceFiles.length \u003e 0) {\n          for (FileStatus sourceStatus: sourceFiles) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Recording source-path: \" + sourceStatus.getPath() + \" for copy.\");\n            }\n            writeToFileListing(fileListWriter, sourceStatus, sourcePathRoot, localFile);\n\n            if (isDirectoryAndNotEmpty(sourceFS, sourceStatus)) {\n              if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Traversing non-empty source dir: \" + sourceStatus.getPath());\n              }\n              traverseNonEmptyDirectory(fileListWriter, sourceStatus, sourcePathRoot, localFile);\n            }\n          }\n        } else {\n          writeToFileListing(fileListWriter, rootStatus, sourcePathRoot, localFile);\n        }\n      }\n    } finally {\n      IOUtils.closeStream(fileListWriter);\n    }\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/SimpleCopyListing.java"
    }
  }
}