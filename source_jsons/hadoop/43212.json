{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ServiceClient.java",
  "functionName": "getStatus",
  "functionId": "getStatus___serviceName-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
  "functionStartLine": 1573,
  "functionEndLine": 1621,
  "numCommitsSeen": 56,
  "timeTaken": 6188,
  "changeHistory": [
    "201dc667e9e27de601b2c30956e7c9f9f285281a",
    "fcbd205cc35e7411ac33860c78b9e1e70697bb4a",
    "d9852eb5897a25323ab0302c2c0decb61d310e5e",
    "d553799030a5a64df328319aceb35734d0b2de20",
    "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d",
    "41b581012a83a17db785343362c718363e13e8f5",
    "d30d57828fddaa8667de49af879cde999907c7f6",
    "40ab068eabe50875449d601471619a4e82fff86d",
    "2191f5b533c6b4763f5d443d21127f1f8552ce64",
    "1888318c89776f0bf354c1b13e3ee169e14ff638"
  ],
  "changeHistoryShort": {
    "201dc667e9e27de601b2c30956e7c9f9f285281a": "Ybodychange",
    "fcbd205cc35e7411ac33860c78b9e1e70697bb4a": "Ybodychange",
    "d9852eb5897a25323ab0302c2c0decb61d310e5e": "Ybodychange",
    "d553799030a5a64df328319aceb35734d0b2de20": "Ybodychange",
    "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d": "Ybodychange",
    "41b581012a83a17db785343362c718363e13e8f5": "Ybodychange",
    "d30d57828fddaa8667de49af879cde999907c7f6": "Ybodychange",
    "40ab068eabe50875449d601471619a4e82fff86d": "Ymultichange(Yfilerename,Yreturntypechange,Ybodychange,Yparameterchange)",
    "2191f5b533c6b4763f5d443d21127f1f8552ce64": "Ybodychange",
    "1888318c89776f0bf354c1b13e3ee169e14ff638": "Yintroduced"
  },
  "changeHistoryDetails": {
    "201dc667e9e27de601b2c30956e7c9f9f285281a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9719. Fixed YARN service restart bug when application ID no longer exist in RM.\n           Contributed by kyungwan nam\n",
      "commitDate": "12/08/19 3:24 PM",
      "commitName": "201dc667e9e27de601b2c30956e7c9f9f285281a",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "16/07/19 7:28 PM",
      "commitNameOld": "85d9111a88f94a5e6833cd142272be2c5823e922",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 26.83,
      "commitsBetweenForRepo": 223,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,49 @@\n   public Service getStatus(String serviceName)\n       throws IOException, YarnException {\n     ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n     Service appSpec \u003d new Service();\n     appSpec.setName(serviceName);\n     appSpec.setState(ServiceState.STOPPED);\n     ApplicationId currentAppId \u003d getAppId(serviceName);\n     if (currentAppId \u003d\u003d null) {\n       LOG.info(\"Service {} does not have an application ID\", serviceName);\n       return appSpec;\n     }\n     appSpec.setId(currentAppId.toString());\n-    ApplicationReport appReport \u003d yarnClient.getApplicationReport(currentAppId);\n+    ApplicationReport appReport \u003d null;\n+    try {\n+      appReport \u003d yarnClient.getApplicationReport(currentAppId);\n+    } catch (ApplicationNotFoundException e) {\n+      LOG.info(\"application ID {} doesn\u0027t exist\", currentAppId);\n+      return appSpec;\n+    }\n+    if (appReport \u003d\u003d null) {\n+      LOG.warn(\"application ID {} is reported as null\", currentAppId);\n+      return appSpec;\n+    }\n     appSpec.setState(convertState(appReport.getYarnApplicationState()));\n     ApplicationTimeout lifetime \u003d\n         appReport.getApplicationTimeouts().get(ApplicationTimeoutType.LIFETIME);\n     if (lifetime !\u003d null) {\n       appSpec.setLifetime(lifetime.getRemainingTime());\n     }\n \n     if (appReport.getYarnApplicationState() !\u003d RUNNING) {\n       LOG.info(\"Service {} is at {} state\", serviceName,\n           appReport.getYarnApplicationState());\n       return appSpec;\n     }\n     if (StringUtils.isEmpty(appReport.getHost())) {\n       LOG.warn(serviceName + \" AM hostname is empty\");\n       return appSpec;\n     }\n     ClientAMProtocol amProxy \u003d\n         createAMProxy(serviceName, appReport);\n     GetStatusResponseProto response \u003d\n         amProxy.getStatus(GetStatusRequestProto.newBuilder().build());\n     appSpec \u003d jsonSerDeser.fromJson(response.getStatus());\n     if (lifetime !\u003d null) {\n       appSpec.setLifetime(lifetime.getRemainingTime());\n     }\n     return appSpec;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Service getStatus(String serviceName)\n      throws IOException, YarnException {\n    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n    Service appSpec \u003d new Service();\n    appSpec.setName(serviceName);\n    appSpec.setState(ServiceState.STOPPED);\n    ApplicationId currentAppId \u003d getAppId(serviceName);\n    if (currentAppId \u003d\u003d null) {\n      LOG.info(\"Service {} does not have an application ID\", serviceName);\n      return appSpec;\n    }\n    appSpec.setId(currentAppId.toString());\n    ApplicationReport appReport \u003d null;\n    try {\n      appReport \u003d yarnClient.getApplicationReport(currentAppId);\n    } catch (ApplicationNotFoundException e) {\n      LOG.info(\"application ID {} doesn\u0027t exist\", currentAppId);\n      return appSpec;\n    }\n    if (appReport \u003d\u003d null) {\n      LOG.warn(\"application ID {} is reported as null\", currentAppId);\n      return appSpec;\n    }\n    appSpec.setState(convertState(appReport.getYarnApplicationState()));\n    ApplicationTimeout lifetime \u003d\n        appReport.getApplicationTimeouts().get(ApplicationTimeoutType.LIFETIME);\n    if (lifetime !\u003d null) {\n      appSpec.setLifetime(lifetime.getRemainingTime());\n    }\n\n    if (appReport.getYarnApplicationState() !\u003d RUNNING) {\n      LOG.info(\"Service {} is at {} state\", serviceName,\n          appReport.getYarnApplicationState());\n      return appSpec;\n    }\n    if (StringUtils.isEmpty(appReport.getHost())) {\n      LOG.warn(serviceName + \" AM hostname is empty\");\n      return appSpec;\n    }\n    ClientAMProtocol amProxy \u003d\n        createAMProxy(serviceName, appReport);\n    GetStatusResponseProto response \u003d\n        amProxy.getStatus(GetStatusRequestProto.newBuilder().build());\n    appSpec \u003d jsonSerDeser.fromJson(response.getStatus());\n    if (lifetime !\u003d null) {\n      appSpec.setLifetime(lifetime.getRemainingTime());\n    }\n    return appSpec;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "fcbd205cc35e7411ac33860c78b9e1e70697bb4a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9001. [Submarine] Use AppAdminClient instead of ServiceClient to sumbit jobs. (Zac Zhou via wangda)\n\nChange-Id: Ic3d6c1e439df9cdf74448b345b925343224efe51\n",
      "commitDate": "13/11/18 1:13 PM",
      "commitName": "fcbd205cc35e7411ac33860c78b9e1e70697bb4a",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "12/11/18 4:53 PM",
      "commitNameOld": "4c465f5535054dad2ef0b18128fb115129f6939e",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 0.85,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,39 @@\n   public Service getStatus(String serviceName)\n       throws IOException, YarnException {\n     ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n     Service appSpec \u003d new Service();\n     appSpec.setName(serviceName);\n     appSpec.setState(ServiceState.STOPPED);\n     ApplicationId currentAppId \u003d getAppId(serviceName);\n     if (currentAppId \u003d\u003d null) {\n       LOG.info(\"Service {} does not have an application ID\", serviceName);\n       return appSpec;\n     }\n+    appSpec.setId(currentAppId.toString());\n     ApplicationReport appReport \u003d yarnClient.getApplicationReport(currentAppId);\n     appSpec.setState(convertState(appReport.getYarnApplicationState()));\n     ApplicationTimeout lifetime \u003d\n         appReport.getApplicationTimeouts().get(ApplicationTimeoutType.LIFETIME);\n     if (lifetime !\u003d null) {\n       appSpec.setLifetime(lifetime.getRemainingTime());\n     }\n \n     if (appReport.getYarnApplicationState() !\u003d RUNNING) {\n       LOG.info(\"Service {} is at {} state\", serviceName,\n           appReport.getYarnApplicationState());\n       return appSpec;\n     }\n     if (StringUtils.isEmpty(appReport.getHost())) {\n       LOG.warn(serviceName + \" AM hostname is empty\");\n       return appSpec;\n     }\n     ClientAMProtocol amProxy \u003d\n         createAMProxy(serviceName, appReport);\n     GetStatusResponseProto response \u003d\n         amProxy.getStatus(GetStatusRequestProto.newBuilder().build());\n     appSpec \u003d jsonSerDeser.fromJson(response.getStatus());\n     if (lifetime !\u003d null) {\n       appSpec.setLifetime(lifetime.getRemainingTime());\n     }\n     return appSpec;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Service getStatus(String serviceName)\n      throws IOException, YarnException {\n    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n    Service appSpec \u003d new Service();\n    appSpec.setName(serviceName);\n    appSpec.setState(ServiceState.STOPPED);\n    ApplicationId currentAppId \u003d getAppId(serviceName);\n    if (currentAppId \u003d\u003d null) {\n      LOG.info(\"Service {} does not have an application ID\", serviceName);\n      return appSpec;\n    }\n    appSpec.setId(currentAppId.toString());\n    ApplicationReport appReport \u003d yarnClient.getApplicationReport(currentAppId);\n    appSpec.setState(convertState(appReport.getYarnApplicationState()));\n    ApplicationTimeout lifetime \u003d\n        appReport.getApplicationTimeouts().get(ApplicationTimeoutType.LIFETIME);\n    if (lifetime !\u003d null) {\n      appSpec.setLifetime(lifetime.getRemainingTime());\n    }\n\n    if (appReport.getYarnApplicationState() !\u003d RUNNING) {\n      LOG.info(\"Service {} is at {} state\", serviceName,\n          appReport.getYarnApplicationState());\n      return appSpec;\n    }\n    if (StringUtils.isEmpty(appReport.getHost())) {\n      LOG.warn(serviceName + \" AM hostname is empty\");\n      return appSpec;\n    }\n    ClientAMProtocol amProxy \u003d\n        createAMProxy(serviceName, appReport);\n    GetStatusResponseProto response \u003d\n        amProxy.getStatus(GetStatusRequestProto.newBuilder().build());\n    appSpec \u003d jsonSerDeser.fromJson(response.getStatus());\n    if (lifetime !\u003d null) {\n      appSpec.setLifetime(lifetime.getRemainingTime());\n    }\n    return appSpec;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "d9852eb5897a25323ab0302c2c0decb61d310e5e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8357.  Fixed NPE when YARN service is saved and not deployed.\n            Contributed by Chandni Singh\n",
      "commitDate": "24/05/18 1:32 PM",
      "commitName": "d9852eb5897a25323ab0302c2c0decb61d310e5e",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "15/05/18 5:40 PM",
      "commitNameOld": "8d3b39de89809f5eed06f85f00ab223e2f75e49c",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 8.83,
      "commitsBetweenForRepo": 87,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,38 @@\n   public Service getStatus(String serviceName)\n       throws IOException, YarnException {\n     ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n     Service appSpec \u003d new Service();\n     appSpec.setName(serviceName);\n+    appSpec.setState(ServiceState.STOPPED);\n     ApplicationId currentAppId \u003d getAppId(serviceName);\n     if (currentAppId \u003d\u003d null) {\n       LOG.info(\"Service {} does not have an application ID\", serviceName);\n       return appSpec;\n     }\n     ApplicationReport appReport \u003d yarnClient.getApplicationReport(currentAppId);\n     appSpec.setState(convertState(appReport.getYarnApplicationState()));\n     ApplicationTimeout lifetime \u003d\n         appReport.getApplicationTimeouts().get(ApplicationTimeoutType.LIFETIME);\n     if (lifetime !\u003d null) {\n       appSpec.setLifetime(lifetime.getRemainingTime());\n     }\n \n     if (appReport.getYarnApplicationState() !\u003d RUNNING) {\n       LOG.info(\"Service {} is at {} state\", serviceName,\n           appReport.getYarnApplicationState());\n       return appSpec;\n     }\n     if (StringUtils.isEmpty(appReport.getHost())) {\n       LOG.warn(serviceName + \" AM hostname is empty\");\n       return appSpec;\n     }\n     ClientAMProtocol amProxy \u003d\n         createAMProxy(serviceName, appReport);\n     GetStatusResponseProto response \u003d\n         amProxy.getStatus(GetStatusRequestProto.newBuilder().build());\n     appSpec \u003d jsonSerDeser.fromJson(response.getStatus());\n     if (lifetime !\u003d null) {\n       appSpec.setLifetime(lifetime.getRemainingTime());\n     }\n     return appSpec;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Service getStatus(String serviceName)\n      throws IOException, YarnException {\n    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n    Service appSpec \u003d new Service();\n    appSpec.setName(serviceName);\n    appSpec.setState(ServiceState.STOPPED);\n    ApplicationId currentAppId \u003d getAppId(serviceName);\n    if (currentAppId \u003d\u003d null) {\n      LOG.info(\"Service {} does not have an application ID\", serviceName);\n      return appSpec;\n    }\n    ApplicationReport appReport \u003d yarnClient.getApplicationReport(currentAppId);\n    appSpec.setState(convertState(appReport.getYarnApplicationState()));\n    ApplicationTimeout lifetime \u003d\n        appReport.getApplicationTimeouts().get(ApplicationTimeoutType.LIFETIME);\n    if (lifetime !\u003d null) {\n      appSpec.setLifetime(lifetime.getRemainingTime());\n    }\n\n    if (appReport.getYarnApplicationState() !\u003d RUNNING) {\n      LOG.info(\"Service {} is at {} state\", serviceName,\n          appReport.getYarnApplicationState());\n      return appSpec;\n    }\n    if (StringUtils.isEmpty(appReport.getHost())) {\n      LOG.warn(serviceName + \" AM hostname is empty\");\n      return appSpec;\n    }\n    ClientAMProtocol amProxy \u003d\n        createAMProxy(serviceName, appReport);\n    GetStatusResponseProto response \u003d\n        amProxy.getStatus(GetStatusRequestProto.newBuilder().build());\n    appSpec \u003d jsonSerDeser.fromJson(response.getStatus());\n    if (lifetime !\u003d null) {\n      appSpec.setLifetime(lifetime.getRemainingTime());\n    }\n    return appSpec;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "d553799030a5a64df328319aceb35734d0b2de20": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7984. Improved YARN service stop/destroy and clean up.\n           Contributed by Billie Rinaldi\n",
      "commitDate": "10/04/18 2:40 PM",
      "commitName": "d553799030a5a64df328319aceb35734d0b2de20",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "26/03/18 3:46 PM",
      "commitNameOld": "27d60a16342fd39973d43b61008f54a8815a6237",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 14.95,
      "commitsBetweenForRepo": 77,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,37 @@\n   public Service getStatus(String serviceName)\n       throws IOException, YarnException {\n     ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n-    ApplicationId currentAppId \u003d getAppId(serviceName);\n-    ApplicationReport appReport \u003d yarnClient.getApplicationReport(currentAppId);\n     Service appSpec \u003d new Service();\n     appSpec.setName(serviceName);\n+    ApplicationId currentAppId \u003d getAppId(serviceName);\n+    if (currentAppId \u003d\u003d null) {\n+      LOG.info(\"Service {} does not have an application ID\", serviceName);\n+      return appSpec;\n+    }\n+    ApplicationReport appReport \u003d yarnClient.getApplicationReport(currentAppId);\n     appSpec.setState(convertState(appReport.getYarnApplicationState()));\n     ApplicationTimeout lifetime \u003d\n         appReport.getApplicationTimeouts().get(ApplicationTimeoutType.LIFETIME);\n     if (lifetime !\u003d null) {\n       appSpec.setLifetime(lifetime.getRemainingTime());\n     }\n \n     if (appReport.getYarnApplicationState() !\u003d RUNNING) {\n       LOG.info(\"Service {} is at {} state\", serviceName,\n           appReport.getYarnApplicationState());\n       return appSpec;\n     }\n     if (StringUtils.isEmpty(appReport.getHost())) {\n       LOG.warn(serviceName + \" AM hostname is empty\");\n       return appSpec;\n     }\n     ClientAMProtocol amProxy \u003d\n         createAMProxy(serviceName, appReport);\n     GetStatusResponseProto response \u003d\n         amProxy.getStatus(GetStatusRequestProto.newBuilder().build());\n     appSpec \u003d jsonSerDeser.fromJson(response.getStatus());\n     if (lifetime !\u003d null) {\n       appSpec.setLifetime(lifetime.getRemainingTime());\n     }\n     return appSpec;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Service getStatus(String serviceName)\n      throws IOException, YarnException {\n    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n    Service appSpec \u003d new Service();\n    appSpec.setName(serviceName);\n    ApplicationId currentAppId \u003d getAppId(serviceName);\n    if (currentAppId \u003d\u003d null) {\n      LOG.info(\"Service {} does not have an application ID\", serviceName);\n      return appSpec;\n    }\n    ApplicationReport appReport \u003d yarnClient.getApplicationReport(currentAppId);\n    appSpec.setState(convertState(appReport.getYarnApplicationState()));\n    ApplicationTimeout lifetime \u003d\n        appReport.getApplicationTimeouts().get(ApplicationTimeoutType.LIFETIME);\n    if (lifetime !\u003d null) {\n      appSpec.setLifetime(lifetime.getRemainingTime());\n    }\n\n    if (appReport.getYarnApplicationState() !\u003d RUNNING) {\n      LOG.info(\"Service {} is at {} state\", serviceName,\n          appReport.getYarnApplicationState());\n      return appSpec;\n    }\n    if (StringUtils.isEmpty(appReport.getHost())) {\n      LOG.warn(serviceName + \" AM hostname is empty\");\n      return appSpec;\n    }\n    ClientAMProtocol amProxy \u003d\n        createAMProxy(serviceName, appReport);\n    GetStatusResponseProto response \u003d\n        amProxy.getStatus(GetStatusRequestProto.newBuilder().build());\n    appSpec \u003d jsonSerDeser.fromJson(response.getStatus());\n    if (lifetime !\u003d null) {\n      appSpec.setLifetime(lifetime.getRemainingTime());\n    }\n    return appSpec;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7540 and YARN-7605. Convert yarn app cli to call yarn api services and implement doAs for Api Service REST API. Contributed by Eric Yang and Jian He\n",
      "commitDate": "23/01/18 5:54 PM",
      "commitName": "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "23/01/18 10:53 AM",
      "commitNameOld": "a72cdcc47a1b3a4fcadbc9e12bd1bae2bbf04d83",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.29,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,33 @@\n   public Service getStatus(String serviceName)\n       throws IOException, YarnException {\n     ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n     ApplicationId currentAppId \u003d getAppId(serviceName);\n     ApplicationReport appReport \u003d yarnClient.getApplicationReport(currentAppId);\n     Service appSpec \u003d new Service();\n     appSpec.setName(serviceName);\n     appSpec.setState(convertState(appReport.getYarnApplicationState()));\n     ApplicationTimeout lifetime \u003d\n         appReport.getApplicationTimeouts().get(ApplicationTimeoutType.LIFETIME);\n     if (lifetime !\u003d null) {\n       appSpec.setLifetime(lifetime.getRemainingTime());\n     }\n \n     if (appReport.getYarnApplicationState() !\u003d RUNNING) {\n       LOG.info(\"Service {} is at {} state\", serviceName,\n           appReport.getYarnApplicationState());\n       return appSpec;\n     }\n     if (StringUtils.isEmpty(appReport.getHost())) {\n       LOG.warn(serviceName + \" AM hostname is empty\");\n       return appSpec;\n     }\n     ClientAMProtocol amProxy \u003d\n         createAMProxy(serviceName, appReport);\n     GetStatusResponseProto response \u003d\n         amProxy.getStatus(GetStatusRequestProto.newBuilder().build());\n     appSpec \u003d jsonSerDeser.fromJson(response.getStatus());\n-\n+    if (lifetime !\u003d null) {\n+      appSpec.setLifetime(lifetime.getRemainingTime());\n+    }\n     return appSpec;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Service getStatus(String serviceName)\n      throws IOException, YarnException {\n    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n    ApplicationId currentAppId \u003d getAppId(serviceName);\n    ApplicationReport appReport \u003d yarnClient.getApplicationReport(currentAppId);\n    Service appSpec \u003d new Service();\n    appSpec.setName(serviceName);\n    appSpec.setState(convertState(appReport.getYarnApplicationState()));\n    ApplicationTimeout lifetime \u003d\n        appReport.getApplicationTimeouts().get(ApplicationTimeoutType.LIFETIME);\n    if (lifetime !\u003d null) {\n      appSpec.setLifetime(lifetime.getRemainingTime());\n    }\n\n    if (appReport.getYarnApplicationState() !\u003d RUNNING) {\n      LOG.info(\"Service {} is at {} state\", serviceName,\n          appReport.getYarnApplicationState());\n      return appSpec;\n    }\n    if (StringUtils.isEmpty(appReport.getHost())) {\n      LOG.warn(serviceName + \" AM hostname is empty\");\n      return appSpec;\n    }\n    ClientAMProtocol amProxy \u003d\n        createAMProxy(serviceName, appReport);\n    GetStatusResponseProto response \u003d\n        amProxy.getStatus(GetStatusRequestProto.newBuilder().build());\n    appSpec \u003d jsonSerDeser.fromJson(response.getStatus());\n    if (lifetime !\u003d null) {\n      appSpec.setLifetime(lifetime.getRemainingTime());\n    }\n    return appSpec;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "41b581012a83a17db785343362c718363e13e8f5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7616. Map YARN application status to Service Status more accurately.  (Contributed by Gour Saha)\n",
      "commitDate": "19/12/17 4:14 PM",
      "commitName": "41b581012a83a17db785343362c718363e13e8f5",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/12/17 12:11 PM",
      "commitNameOld": "d30d57828fddaa8667de49af879cde999907c7f6",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 15.17,
      "commitsBetweenForRepo": 143,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   public Service getStatus(String serviceName)\n       throws IOException, YarnException {\n     ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n     ApplicationId currentAppId \u003d getAppId(serviceName);\n     ApplicationReport appReport \u003d yarnClient.getApplicationReport(currentAppId);\n     Service appSpec \u003d new Service();\n     appSpec.setName(serviceName);\n-    appSpec.setState(convertState(appReport.getFinalApplicationStatus()));\n+    appSpec.setState(convertState(appReport.getYarnApplicationState()));\n     ApplicationTimeout lifetime \u003d\n         appReport.getApplicationTimeouts().get(ApplicationTimeoutType.LIFETIME);\n     if (lifetime !\u003d null) {\n       appSpec.setLifetime(lifetime.getRemainingTime());\n     }\n \n     if (appReport.getYarnApplicationState() !\u003d RUNNING) {\n       LOG.info(\"Service {} is at {} state\", serviceName,\n           appReport.getYarnApplicationState());\n       return appSpec;\n     }\n     if (StringUtils.isEmpty(appReport.getHost())) {\n       LOG.warn(serviceName + \" AM hostname is empty\");\n       return appSpec;\n     }\n     ClientAMProtocol amProxy \u003d\n         createAMProxy(serviceName, appReport);\n     GetStatusResponseProto response \u003d\n         amProxy.getStatus(GetStatusRequestProto.newBuilder().build());\n     appSpec \u003d jsonSerDeser.fromJson(response.getStatus());\n \n     return appSpec;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Service getStatus(String serviceName)\n      throws IOException, YarnException {\n    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n    ApplicationId currentAppId \u003d getAppId(serviceName);\n    ApplicationReport appReport \u003d yarnClient.getApplicationReport(currentAppId);\n    Service appSpec \u003d new Service();\n    appSpec.setName(serviceName);\n    appSpec.setState(convertState(appReport.getYarnApplicationState()));\n    ApplicationTimeout lifetime \u003d\n        appReport.getApplicationTimeouts().get(ApplicationTimeoutType.LIFETIME);\n    if (lifetime !\u003d null) {\n      appSpec.setLifetime(lifetime.getRemainingTime());\n    }\n\n    if (appReport.getYarnApplicationState() !\u003d RUNNING) {\n      LOG.info(\"Service {} is at {} state\", serviceName,\n          appReport.getYarnApplicationState());\n      return appSpec;\n    }\n    if (StringUtils.isEmpty(appReport.getHost())) {\n      LOG.warn(serviceName + \" AM hostname is empty\");\n      return appSpec;\n    }\n    ClientAMProtocol amProxy \u003d\n        createAMProxy(serviceName, appReport);\n    GetStatusResponseProto response \u003d\n        amProxy.getStatus(GetStatusRequestProto.newBuilder().build());\n    appSpec \u003d jsonSerDeser.fromJson(response.getStatus());\n\n    return appSpec;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "d30d57828fddaa8667de49af879cde999907c7f6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6669.  Implemented Kerberos security for YARN service framework.  (Contributed by Jian He)\n",
      "commitDate": "04/12/17 12:11 PM",
      "commitName": "d30d57828fddaa8667de49af879cde999907c7f6",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "16/11/17 10:53 AM",
      "commitNameOld": "6bf2c301924a3acae5a7510b8473f6292a5a471b",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 18.05,
      "commitsBetweenForRepo": 71,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   public Service getStatus(String serviceName)\n       throws IOException, YarnException {\n     ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n     ApplicationId currentAppId \u003d getAppId(serviceName);\n     ApplicationReport appReport \u003d yarnClient.getApplicationReport(currentAppId);\n     Service appSpec \u003d new Service();\n     appSpec.setName(serviceName);\n     appSpec.setState(convertState(appReport.getFinalApplicationStatus()));\n     ApplicationTimeout lifetime \u003d\n         appReport.getApplicationTimeouts().get(ApplicationTimeoutType.LIFETIME);\n     if (lifetime !\u003d null) {\n       appSpec.setLifetime(lifetime.getRemainingTime());\n     }\n \n     if (appReport.getYarnApplicationState() !\u003d RUNNING) {\n       LOG.info(\"Service {} is at {} state\", serviceName,\n           appReport.getYarnApplicationState());\n       return appSpec;\n     }\n     if (StringUtils.isEmpty(appReport.getHost())) {\n       LOG.warn(serviceName + \" AM hostname is empty\");\n       return appSpec;\n     }\n     ClientAMProtocol amProxy \u003d\n-        createAMProxy(appReport.getHost(), appReport.getRpcPort());\n+        createAMProxy(serviceName, appReport);\n     GetStatusResponseProto response \u003d\n         amProxy.getStatus(GetStatusRequestProto.newBuilder().build());\n     appSpec \u003d jsonSerDeser.fromJson(response.getStatus());\n \n     return appSpec;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Service getStatus(String serviceName)\n      throws IOException, YarnException {\n    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n    ApplicationId currentAppId \u003d getAppId(serviceName);\n    ApplicationReport appReport \u003d yarnClient.getApplicationReport(currentAppId);\n    Service appSpec \u003d new Service();\n    appSpec.setName(serviceName);\n    appSpec.setState(convertState(appReport.getFinalApplicationStatus()));\n    ApplicationTimeout lifetime \u003d\n        appReport.getApplicationTimeouts().get(ApplicationTimeoutType.LIFETIME);\n    if (lifetime !\u003d null) {\n      appSpec.setLifetime(lifetime.getRemainingTime());\n    }\n\n    if (appReport.getYarnApplicationState() !\u003d RUNNING) {\n      LOG.info(\"Service {} is at {} state\", serviceName,\n          appReport.getYarnApplicationState());\n      return appSpec;\n    }\n    if (StringUtils.isEmpty(appReport.getHost())) {\n      LOG.warn(serviceName + \" AM hostname is empty\");\n      return appSpec;\n    }\n    ClientAMProtocol amProxy \u003d\n        createAMProxy(serviceName, appReport);\n    GetStatusResponseProto response \u003d\n        amProxy.getStatus(GetStatusRequestProto.newBuilder().build());\n    appSpec \u003d jsonSerDeser.fromJson(response.getStatus());\n\n    return appSpec;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "40ab068eabe50875449d601471619a4e82fff86d": {
      "type": "Ymultichange(Yfilerename,Yreturntypechange,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthor": "Billie Rinaldi",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,31 @@\n-  public Application getStatus(String appName)\n+  public Service getStatus(String serviceName)\n       throws IOException, YarnException {\n-    validateClusterName(appName);\n-    ApplicationId currentAppId \u003d getAppId(appName);\n+    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n+    ApplicationId currentAppId \u003d getAppId(serviceName);\n     ApplicationReport appReport \u003d yarnClient.getApplicationReport(currentAppId);\n-    ClientAMProtocol amProxy \u003d getAMProxy(appName, appReport);\n-    Application appSpec;\n-    if (amProxy !\u003d null) {\n-      GetStatusResponseProto response \u003d\n-          amProxy.getStatus(GetStatusRequestProto.newBuilder().build());\n-      appSpec \u003d ServiceApiUtil.jsonSerDeser.fromJson(response.getStatus());\n-    } else {\n-      appSpec \u003d new Application();\n-      appSpec.setName(appName);\n-    }\n+    Service appSpec \u003d new Service();\n+    appSpec.setName(serviceName);\n+    appSpec.setState(convertState(appReport.getFinalApplicationStatus()));\n     ApplicationTimeout lifetime \u003d\n         appReport.getApplicationTimeouts().get(ApplicationTimeoutType.LIFETIME);\n     if (lifetime !\u003d null) {\n       appSpec.setLifetime(lifetime.getRemainingTime());\n     }\n+\n+    if (appReport.getYarnApplicationState() !\u003d RUNNING) {\n+      LOG.info(\"Service {} is at {} state\", serviceName,\n+          appReport.getYarnApplicationState());\n+      return appSpec;\n+    }\n+    if (StringUtils.isEmpty(appReport.getHost())) {\n+      LOG.warn(serviceName + \" AM hostname is empty\");\n+      return appSpec;\n+    }\n+    ClientAMProtocol amProxy \u003d\n+        createAMProxy(appReport.getHost(), appReport.getRpcPort());\n+    GetStatusResponseProto response \u003d\n+        amProxy.getStatus(GetStatusRequestProto.newBuilder().build());\n+    appSpec \u003d jsonSerDeser.fromJson(response.getStatus());\n+\n     return appSpec;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Service getStatus(String serviceName)\n      throws IOException, YarnException {\n    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n    ApplicationId currentAppId \u003d getAppId(serviceName);\n    ApplicationReport appReport \u003d yarnClient.getApplicationReport(currentAppId);\n    Service appSpec \u003d new Service();\n    appSpec.setName(serviceName);\n    appSpec.setState(convertState(appReport.getFinalApplicationStatus()));\n    ApplicationTimeout lifetime \u003d\n        appReport.getApplicationTimeouts().get(ApplicationTimeoutType.LIFETIME);\n    if (lifetime !\u003d null) {\n      appSpec.setLifetime(lifetime.getRemainingTime());\n    }\n\n    if (appReport.getYarnApplicationState() !\u003d RUNNING) {\n      LOG.info(\"Service {} is at {} state\", serviceName,\n          appReport.getYarnApplicationState());\n      return appSpec;\n    }\n    if (StringUtils.isEmpty(appReport.getHost())) {\n      LOG.warn(serviceName + \" AM hostname is empty\");\n      return appSpec;\n    }\n    ClientAMProtocol amProxy \u003d\n        createAMProxy(appReport.getHost(), appReport.getRpcPort());\n    GetStatusResponseProto response \u003d\n        amProxy.getStatus(GetStatusRequestProto.newBuilder().build());\n    appSpec \u003d jsonSerDeser.fromJson(response.getStatus());\n\n    return appSpec;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,31 @@\n-  public Application getStatus(String appName)\n+  public Service getStatus(String serviceName)\n       throws IOException, YarnException {\n-    validateClusterName(appName);\n-    ApplicationId currentAppId \u003d getAppId(appName);\n+    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n+    ApplicationId currentAppId \u003d getAppId(serviceName);\n     ApplicationReport appReport \u003d yarnClient.getApplicationReport(currentAppId);\n-    ClientAMProtocol amProxy \u003d getAMProxy(appName, appReport);\n-    Application appSpec;\n-    if (amProxy !\u003d null) {\n-      GetStatusResponseProto response \u003d\n-          amProxy.getStatus(GetStatusRequestProto.newBuilder().build());\n-      appSpec \u003d ServiceApiUtil.jsonSerDeser.fromJson(response.getStatus());\n-    } else {\n-      appSpec \u003d new Application();\n-      appSpec.setName(appName);\n-    }\n+    Service appSpec \u003d new Service();\n+    appSpec.setName(serviceName);\n+    appSpec.setState(convertState(appReport.getFinalApplicationStatus()));\n     ApplicationTimeout lifetime \u003d\n         appReport.getApplicationTimeouts().get(ApplicationTimeoutType.LIFETIME);\n     if (lifetime !\u003d null) {\n       appSpec.setLifetime(lifetime.getRemainingTime());\n     }\n+\n+    if (appReport.getYarnApplicationState() !\u003d RUNNING) {\n+      LOG.info(\"Service {} is at {} state\", serviceName,\n+          appReport.getYarnApplicationState());\n+      return appSpec;\n+    }\n+    if (StringUtils.isEmpty(appReport.getHost())) {\n+      LOG.warn(serviceName + \" AM hostname is empty\");\n+      return appSpec;\n+    }\n+    ClientAMProtocol amProxy \u003d\n+        createAMProxy(appReport.getHost(), appReport.getRpcPort());\n+    GetStatusResponseProto response \u003d\n+        amProxy.getStatus(GetStatusRequestProto.newBuilder().build());\n+    appSpec \u003d jsonSerDeser.fromJson(response.getStatus());\n+\n     return appSpec;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Service getStatus(String serviceName)\n      throws IOException, YarnException {\n    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n    ApplicationId currentAppId \u003d getAppId(serviceName);\n    ApplicationReport appReport \u003d yarnClient.getApplicationReport(currentAppId);\n    Service appSpec \u003d new Service();\n    appSpec.setName(serviceName);\n    appSpec.setState(convertState(appReport.getFinalApplicationStatus()));\n    ApplicationTimeout lifetime \u003d\n        appReport.getApplicationTimeouts().get(ApplicationTimeoutType.LIFETIME);\n    if (lifetime !\u003d null) {\n      appSpec.setLifetime(lifetime.getRemainingTime());\n    }\n\n    if (appReport.getYarnApplicationState() !\u003d RUNNING) {\n      LOG.info(\"Service {} is at {} state\", serviceName,\n          appReport.getYarnApplicationState());\n      return appSpec;\n    }\n    if (StringUtils.isEmpty(appReport.getHost())) {\n      LOG.warn(serviceName + \" AM hostname is empty\");\n      return appSpec;\n    }\n    ClientAMProtocol amProxy \u003d\n        createAMProxy(appReport.getHost(), appReport.getRpcPort());\n    GetStatusResponseProto response \u003d\n        amProxy.getStatus(GetStatusRequestProto.newBuilder().build());\n    appSpec \u003d jsonSerDeser.fromJson(response.getStatus());\n\n    return appSpec;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {
            "oldValue": "Application",
            "newValue": "Service"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,31 @@\n-  public Application getStatus(String appName)\n+  public Service getStatus(String serviceName)\n       throws IOException, YarnException {\n-    validateClusterName(appName);\n-    ApplicationId currentAppId \u003d getAppId(appName);\n+    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n+    ApplicationId currentAppId \u003d getAppId(serviceName);\n     ApplicationReport appReport \u003d yarnClient.getApplicationReport(currentAppId);\n-    ClientAMProtocol amProxy \u003d getAMProxy(appName, appReport);\n-    Application appSpec;\n-    if (amProxy !\u003d null) {\n-      GetStatusResponseProto response \u003d\n-          amProxy.getStatus(GetStatusRequestProto.newBuilder().build());\n-      appSpec \u003d ServiceApiUtil.jsonSerDeser.fromJson(response.getStatus());\n-    } else {\n-      appSpec \u003d new Application();\n-      appSpec.setName(appName);\n-    }\n+    Service appSpec \u003d new Service();\n+    appSpec.setName(serviceName);\n+    appSpec.setState(convertState(appReport.getFinalApplicationStatus()));\n     ApplicationTimeout lifetime \u003d\n         appReport.getApplicationTimeouts().get(ApplicationTimeoutType.LIFETIME);\n     if (lifetime !\u003d null) {\n       appSpec.setLifetime(lifetime.getRemainingTime());\n     }\n+\n+    if (appReport.getYarnApplicationState() !\u003d RUNNING) {\n+      LOG.info(\"Service {} is at {} state\", serviceName,\n+          appReport.getYarnApplicationState());\n+      return appSpec;\n+    }\n+    if (StringUtils.isEmpty(appReport.getHost())) {\n+      LOG.warn(serviceName + \" AM hostname is empty\");\n+      return appSpec;\n+    }\n+    ClientAMProtocol amProxy \u003d\n+        createAMProxy(appReport.getHost(), appReport.getRpcPort());\n+    GetStatusResponseProto response \u003d\n+        amProxy.getStatus(GetStatusRequestProto.newBuilder().build());\n+    appSpec \u003d jsonSerDeser.fromJson(response.getStatus());\n+\n     return appSpec;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Service getStatus(String serviceName)\n      throws IOException, YarnException {\n    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n    ApplicationId currentAppId \u003d getAppId(serviceName);\n    ApplicationReport appReport \u003d yarnClient.getApplicationReport(currentAppId);\n    Service appSpec \u003d new Service();\n    appSpec.setName(serviceName);\n    appSpec.setState(convertState(appReport.getFinalApplicationStatus()));\n    ApplicationTimeout lifetime \u003d\n        appReport.getApplicationTimeouts().get(ApplicationTimeoutType.LIFETIME);\n    if (lifetime !\u003d null) {\n      appSpec.setLifetime(lifetime.getRemainingTime());\n    }\n\n    if (appReport.getYarnApplicationState() !\u003d RUNNING) {\n      LOG.info(\"Service {} is at {} state\", serviceName,\n          appReport.getYarnApplicationState());\n      return appSpec;\n    }\n    if (StringUtils.isEmpty(appReport.getHost())) {\n      LOG.warn(serviceName + \" AM hostname is empty\");\n      return appSpec;\n    }\n    ClientAMProtocol amProxy \u003d\n        createAMProxy(appReport.getHost(), appReport.getRpcPort());\n    GetStatusResponseProto response \u003d\n        amProxy.getStatus(GetStatusRequestProto.newBuilder().build());\n    appSpec \u003d jsonSerDeser.fromJson(response.getStatus());\n\n    return appSpec;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
          "commitDate": "06/11/17 1:30 PM",
          "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
          "commitAuthor": "Billie Rinaldi",
          "commitDateOld": "06/11/17 1:30 PM",
          "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
          "commitAuthorOld": "Gour Saha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,31 @@\n-  public Application getStatus(String appName)\n+  public Service getStatus(String serviceName)\n       throws IOException, YarnException {\n-    validateClusterName(appName);\n-    ApplicationId currentAppId \u003d getAppId(appName);\n+    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n+    ApplicationId currentAppId \u003d getAppId(serviceName);\n     ApplicationReport appReport \u003d yarnClient.getApplicationReport(currentAppId);\n-    ClientAMProtocol amProxy \u003d getAMProxy(appName, appReport);\n-    Application appSpec;\n-    if (amProxy !\u003d null) {\n-      GetStatusResponseProto response \u003d\n-          amProxy.getStatus(GetStatusRequestProto.newBuilder().build());\n-      appSpec \u003d ServiceApiUtil.jsonSerDeser.fromJson(response.getStatus());\n-    } else {\n-      appSpec \u003d new Application();\n-      appSpec.setName(appName);\n-    }\n+    Service appSpec \u003d new Service();\n+    appSpec.setName(serviceName);\n+    appSpec.setState(convertState(appReport.getFinalApplicationStatus()));\n     ApplicationTimeout lifetime \u003d\n         appReport.getApplicationTimeouts().get(ApplicationTimeoutType.LIFETIME);\n     if (lifetime !\u003d null) {\n       appSpec.setLifetime(lifetime.getRemainingTime());\n     }\n+\n+    if (appReport.getYarnApplicationState() !\u003d RUNNING) {\n+      LOG.info(\"Service {} is at {} state\", serviceName,\n+          appReport.getYarnApplicationState());\n+      return appSpec;\n+    }\n+    if (StringUtils.isEmpty(appReport.getHost())) {\n+      LOG.warn(serviceName + \" AM hostname is empty\");\n+      return appSpec;\n+    }\n+    ClientAMProtocol amProxy \u003d\n+        createAMProxy(appReport.getHost(), appReport.getRpcPort());\n+    GetStatusResponseProto response \u003d\n+        amProxy.getStatus(GetStatusRequestProto.newBuilder().build());\n+    appSpec \u003d jsonSerDeser.fromJson(response.getStatus());\n+\n     return appSpec;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Service getStatus(String serviceName)\n      throws IOException, YarnException {\n    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\n    ApplicationId currentAppId \u003d getAppId(serviceName);\n    ApplicationReport appReport \u003d yarnClient.getApplicationReport(currentAppId);\n    Service appSpec \u003d new Service();\n    appSpec.setName(serviceName);\n    appSpec.setState(convertState(appReport.getFinalApplicationStatus()));\n    ApplicationTimeout lifetime \u003d\n        appReport.getApplicationTimeouts().get(ApplicationTimeoutType.LIFETIME);\n    if (lifetime !\u003d null) {\n      appSpec.setLifetime(lifetime.getRemainingTime());\n    }\n\n    if (appReport.getYarnApplicationState() !\u003d RUNNING) {\n      LOG.info(\"Service {} is at {} state\", serviceName,\n          appReport.getYarnApplicationState());\n      return appSpec;\n    }\n    if (StringUtils.isEmpty(appReport.getHost())) {\n      LOG.warn(serviceName + \" AM hostname is empty\");\n      return appSpec;\n    }\n    ClientAMProtocol amProxy \u003d\n        createAMProxy(appReport.getHost(), appReport.getRpcPort());\n    GetStatusResponseProto response \u003d\n        amProxy.getStatus(GetStatusRequestProto.newBuilder().build());\n    appSpec \u003d jsonSerDeser.fromJson(response.getStatus());\n\n    return appSpec;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
          "extendedDetails": {
            "oldValue": "[appName-String]",
            "newValue": "[serviceName-String]"
          }
        }
      ]
    },
    "2191f5b533c6b4763f5d443d21127f1f8552ce64": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7050. Post cleanup after YARN-6903, removal of org.apache.slider package. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "2191f5b533c6b4763f5d443d21127f1f8552ce64",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "79bf5c084d4a063f1a933cae498af23edfd46792",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,8 +1,22 @@\n   public Application getStatus(String appName)\n       throws IOException, YarnException {\n-    ClientAMProtocol proxy \u003d connectToAM(appName);\n-    GetStatusResponseProto response \u003d\n-        proxy.getStatus(GetStatusRequestProto.newBuilder().build());\n-    return ServiceApiUtil.jsonSerDeser.fromJson(response.getStatus());\n-\n+    validateClusterName(appName);\n+    ApplicationId currentAppId \u003d getAppId(appName);\n+    ApplicationReport appReport \u003d yarnClient.getApplicationReport(currentAppId);\n+    ClientAMProtocol amProxy \u003d getAMProxy(appName, appReport);\n+    Application appSpec;\n+    if (amProxy !\u003d null) {\n+      GetStatusResponseProto response \u003d\n+          amProxy.getStatus(GetStatusRequestProto.newBuilder().build());\n+      appSpec \u003d ServiceApiUtil.jsonSerDeser.fromJson(response.getStatus());\n+    } else {\n+      appSpec \u003d new Application();\n+      appSpec.setName(appName);\n+    }\n+    ApplicationTimeout lifetime \u003d\n+        appReport.getApplicationTimeouts().get(ApplicationTimeoutType.LIFETIME);\n+    if (lifetime !\u003d null) {\n+      appSpec.setLifetime(lifetime.getRemainingTime());\n+    }\n+    return appSpec;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Application getStatus(String appName)\n      throws IOException, YarnException {\n    validateClusterName(appName);\n    ApplicationId currentAppId \u003d getAppId(appName);\n    ApplicationReport appReport \u003d yarnClient.getApplicationReport(currentAppId);\n    ClientAMProtocol amProxy \u003d getAMProxy(appName, appReport);\n    Application appSpec;\n    if (amProxy !\u003d null) {\n      GetStatusResponseProto response \u003d\n          amProxy.getStatus(GetStatusRequestProto.newBuilder().build());\n      appSpec \u003d ServiceApiUtil.jsonSerDeser.fromJson(response.getStatus());\n    } else {\n      appSpec \u003d new Application();\n      appSpec.setName(appName);\n    }\n    ApplicationTimeout lifetime \u003d\n        appReport.getApplicationTimeouts().get(ApplicationTimeoutType.LIFETIME);\n    if (lifetime !\u003d null) {\n      appSpec.setLifetime(lifetime.getRemainingTime());\n    }\n    return appSpec;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java",
      "extendedDetails": {}
    },
    "1888318c89776f0bf354c1b13e3ee169e14ff638": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
      "commitAuthor": "Billie Rinaldi",
      "diff": "@@ -0,0 +1,8 @@\n+  public Application getStatus(String appName)\n+      throws IOException, YarnException {\n+    ClientAMProtocol proxy \u003d connectToAM(appName);\n+    GetStatusResponseProto response \u003d\n+        proxy.getStatus(GetStatusRequestProto.newBuilder().build());\n+    return ServiceApiUtil.jsonSerDeser.fromJson(response.getStatus());\n+\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Application getStatus(String appName)\n      throws IOException, YarnException {\n    ClientAMProtocol proxy \u003d connectToAM(appName);\n    GetStatusResponseProto response \u003d\n        proxy.getStatus(GetStatusRequestProto.newBuilder().build());\n    return ServiceApiUtil.jsonSerDeser.fromJson(response.getStatus());\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/client/ServiceClient.java"
    }
  }
}