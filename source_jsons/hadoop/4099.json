{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DistributedFileSystem.java",
  "functionName": "getTrashRoots",
  "functionId": "getTrashRoots___allUsers-boolean",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
  "functionStartLine": 3286,
  "functionEndLine": 3319,
  "numCommitsSeen": 96,
  "timeTaken": 5104,
  "changeHistory": [
    "2338d25dc7150d75fbda84cc95422380b5622224",
    "8dbc8909c92d502d10a7f94d1de3171878a43b04",
    "5af572b6443715b7a741296c1bd520a1840f9a7c",
    "45a753ccf79d334513c7bc8f2b81c89a4697075d",
    "0fb14aaced7afdbbb72e59316c186ebf6ec2d091",
    "cbc7b6bf97a80c39d4bbb3005e42dacae6726baf"
  ],
  "changeHistoryShort": {
    "2338d25dc7150d75fbda84cc95422380b5622224": "Ybodychange",
    "8dbc8909c92d502d10a7f94d1de3171878a43b04": "Ybodychange",
    "5af572b6443715b7a741296c1bd520a1840f9a7c": "Ybodychange",
    "45a753ccf79d334513c7bc8f2b81c89a4697075d": "Ybodychange",
    "0fb14aaced7afdbbb72e59316c186ebf6ec2d091": "Ymultichange(Yexceptionschange,Ybodychange)",
    "cbc7b6bf97a80c39d4bbb3005e42dacae6726baf": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2338d25dc7150d75fbda84cc95422380b5622224": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15052. WebHDFS getTrashRoot leads to OOM due to FileSystem object creation. (#1758)\n\n\r\n",
      "commitDate": "20/02/20 6:56 PM",
      "commitName": "2338d25dc7150d75fbda84cc95422380b5622224",
      "commitAuthor": "Masatake Iwasaki",
      "commitDateOld": "18/02/20 6:50 PM",
      "commitNameOld": "ac4b556e2d44d3cd10b81c190ecee23e2dd66c10",
      "commitAuthorOld": "Ayush Saxena",
      "daysBetweenCommits": 2.0,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,34 @@\n   public Collection\u003cFileStatus\u003e getTrashRoots(boolean allUsers) {\n     List\u003cFileStatus\u003e ret \u003d new ArrayList\u003c\u003e();\n     // Get normal trash roots\n     ret.addAll(super.getTrashRoots(allUsers));\n \n     try {\n       // Get EZ Trash roots\n       final RemoteIterator\u003cEncryptionZone\u003e it \u003d dfs.listEncryptionZones();\n       while (it.hasNext()) {\n-        Path ezTrashRoot \u003d new Path(it.next().getPath(),\n+        EncryptionZone ez \u003d it.next();\n+        Path ezTrashRoot \u003d new Path(ez.getPath(),\n             FileSystem.TRASH_PREFIX);\n         if (!exists(ezTrashRoot)) {\n           continue;\n         }\n         if (allUsers) {\n           for (FileStatus candidate : listStatus(ezTrashRoot)) {\n             if (exists(candidate.getPath())) {\n               ret.add(candidate);\n             }\n           }\n         } else {\n-          Path userTrash \u003d new Path(ezTrashRoot, dfs.ugi.getShortUserName());\n+          Path userTrash \u003d new Path(DFSUtilClient.getEZTrashRoot(ez, dfs.ugi));\n           try {\n             ret.add(getFileStatus(userTrash));\n           } catch (FileNotFoundException ignored) {\n           }\n         }\n       }\n     } catch (IOException e){\n       DFSClient.LOG.warn(\"Cannot get all encrypted trash roots\", e);\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Collection\u003cFileStatus\u003e getTrashRoots(boolean allUsers) {\n    List\u003cFileStatus\u003e ret \u003d new ArrayList\u003c\u003e();\n    // Get normal trash roots\n    ret.addAll(super.getTrashRoots(allUsers));\n\n    try {\n      // Get EZ Trash roots\n      final RemoteIterator\u003cEncryptionZone\u003e it \u003d dfs.listEncryptionZones();\n      while (it.hasNext()) {\n        EncryptionZone ez \u003d it.next();\n        Path ezTrashRoot \u003d new Path(ez.getPath(),\n            FileSystem.TRASH_PREFIX);\n        if (!exists(ezTrashRoot)) {\n          continue;\n        }\n        if (allUsers) {\n          for (FileStatus candidate : listStatus(ezTrashRoot)) {\n            if (exists(candidate.getPath())) {\n              ret.add(candidate);\n            }\n          }\n        } else {\n          Path userTrash \u003d new Path(DFSUtilClient.getEZTrashRoot(ez, dfs.ugi));\n          try {\n            ret.add(getFileStatus(userTrash));\n          } catch (FileNotFoundException ignored) {\n          }\n        }\n      }\n    } catch (IOException e){\n      DFSClient.LOG.warn(\"Cannot get all encrypted trash roots\", e);\n    }\n    return ret;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
      "extendedDetails": {}
    },
    "8dbc8909c92d502d10a7f94d1de3171878a43b04": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12485. expunge may fail to remove trash from encryption zone. Contributed by Wei-Chiu Chuang.\n",
      "commitDate": "16/10/17 12:57 PM",
      "commitName": "8dbc8909c92d502d10a7f94d1de3171878a43b04",
      "commitAuthor": "Wei-Chiu Chuang",
      "commitDateOld": "20/09/17 11:51 AM",
      "commitNameOld": "a12f09ba3c4a3aa4c4558090c5e1b7bcaebe3b94",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 26.05,
      "commitsBetweenForRepo": 196,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,33 @@\n   public Collection\u003cFileStatus\u003e getTrashRoots(boolean allUsers) {\n     List\u003cFileStatus\u003e ret \u003d new ArrayList\u003c\u003e();\n     // Get normal trash roots\n     ret.addAll(super.getTrashRoots(allUsers));\n \n     try {\n       // Get EZ Trash roots\n       final RemoteIterator\u003cEncryptionZone\u003e it \u003d dfs.listEncryptionZones();\n       while (it.hasNext()) {\n         Path ezTrashRoot \u003d new Path(it.next().getPath(),\n             FileSystem.TRASH_PREFIX);\n         if (!exists(ezTrashRoot)) {\n           continue;\n         }\n         if (allUsers) {\n           for (FileStatus candidate : listStatus(ezTrashRoot)) {\n             if (exists(candidate.getPath())) {\n               ret.add(candidate);\n             }\n           }\n         } else {\n-          Path userTrash \u003d new Path(ezTrashRoot, System.getProperty(\n-              \"user.name\"));\n+          Path userTrash \u003d new Path(ezTrashRoot, dfs.ugi.getShortUserName());\n           try {\n             ret.add(getFileStatus(userTrash));\n           } catch (FileNotFoundException ignored) {\n           }\n         }\n       }\n     } catch (IOException e){\n       DFSClient.LOG.warn(\"Cannot get all encrypted trash roots\", e);\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Collection\u003cFileStatus\u003e getTrashRoots(boolean allUsers) {\n    List\u003cFileStatus\u003e ret \u003d new ArrayList\u003c\u003e();\n    // Get normal trash roots\n    ret.addAll(super.getTrashRoots(allUsers));\n\n    try {\n      // Get EZ Trash roots\n      final RemoteIterator\u003cEncryptionZone\u003e it \u003d dfs.listEncryptionZones();\n      while (it.hasNext()) {\n        Path ezTrashRoot \u003d new Path(it.next().getPath(),\n            FileSystem.TRASH_PREFIX);\n        if (!exists(ezTrashRoot)) {\n          continue;\n        }\n        if (allUsers) {\n          for (FileStatus candidate : listStatus(ezTrashRoot)) {\n            if (exists(candidate.getPath())) {\n              ret.add(candidate);\n            }\n          }\n        } else {\n          Path userTrash \u003d new Path(ezTrashRoot, dfs.ugi.getShortUserName());\n          try {\n            ret.add(getFileStatus(userTrash));\n          } catch (FileNotFoundException ignored) {\n          }\n        }\n      }\n    } catch (IOException e){\n      DFSClient.LOG.warn(\"Cannot get all encrypted trash roots\", e);\n    }\n    return ret;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
      "extendedDetails": {}
    },
    "5af572b6443715b7a741296c1bd520a1840f9a7c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13427. Eliminate needless uses of FileSystem#{exists(), isFile(), isDirectory()}. Contributed by Steve Loughran and Mingliang Liu\n",
      "commitDate": "15/11/16 10:57 AM",
      "commitName": "5af572b6443715b7a741296c1bd520a1840f9a7c",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "14/10/16 11:41 AM",
      "commitNameOld": "0007360c3344b3485fa17de0fd2015a628de947c",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 32.01,
      "commitsBetweenForRepo": 298,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,34 @@\n   public Collection\u003cFileStatus\u003e getTrashRoots(boolean allUsers) {\n     List\u003cFileStatus\u003e ret \u003d new ArrayList\u003c\u003e();\n     // Get normal trash roots\n     ret.addAll(super.getTrashRoots(allUsers));\n \n     try {\n       // Get EZ Trash roots\n       final RemoteIterator\u003cEncryptionZone\u003e it \u003d dfs.listEncryptionZones();\n       while (it.hasNext()) {\n         Path ezTrashRoot \u003d new Path(it.next().getPath(),\n             FileSystem.TRASH_PREFIX);\n         if (!exists(ezTrashRoot)) {\n           continue;\n         }\n         if (allUsers) {\n           for (FileStatus candidate : listStatus(ezTrashRoot)) {\n             if (exists(candidate.getPath())) {\n               ret.add(candidate);\n             }\n           }\n         } else {\n           Path userTrash \u003d new Path(ezTrashRoot, System.getProperty(\n               \"user.name\"));\n-          if (exists(userTrash)) {\n+          try {\n             ret.add(getFileStatus(userTrash));\n+          } catch (FileNotFoundException ignored) {\n           }\n         }\n       }\n     } catch (IOException e){\n       DFSClient.LOG.warn(\"Cannot get all encrypted trash roots\", e);\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Collection\u003cFileStatus\u003e getTrashRoots(boolean allUsers) {\n    List\u003cFileStatus\u003e ret \u003d new ArrayList\u003c\u003e();\n    // Get normal trash roots\n    ret.addAll(super.getTrashRoots(allUsers));\n\n    try {\n      // Get EZ Trash roots\n      final RemoteIterator\u003cEncryptionZone\u003e it \u003d dfs.listEncryptionZones();\n      while (it.hasNext()) {\n        Path ezTrashRoot \u003d new Path(it.next().getPath(),\n            FileSystem.TRASH_PREFIX);\n        if (!exists(ezTrashRoot)) {\n          continue;\n        }\n        if (allUsers) {\n          for (FileStatus candidate : listStatus(ezTrashRoot)) {\n            if (exists(candidate.getPath())) {\n              ret.add(candidate);\n            }\n          }\n        } else {\n          Path userTrash \u003d new Path(ezTrashRoot, System.getProperty(\n              \"user.name\"));\n          try {\n            ret.add(getFileStatus(userTrash));\n          } catch (FileNotFoundException ignored) {\n          }\n        }\n      }\n    } catch (IOException e){\n      DFSClient.LOG.warn(\"Cannot get all encrypted trash roots\", e);\n    }\n    return ret;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
      "extendedDetails": {}
    },
    "45a753ccf79d334513c7bc8f2b81c89a4697075d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10344. DistributedFileSystem#getTrashRoots should skip encryption zone that does not have .Trash. Contributed by Xiaoyu Yao.\n",
      "commitDate": "02/05/16 7:30 PM",
      "commitName": "45a753ccf79d334513c7bc8f2b81c89a4697075d",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "26/04/16 5:10 PM",
      "commitNameOld": "fc94810d3f537e51e826fc21ade7867892b9d8dc",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 6.1,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,33 @@\n   public Collection\u003cFileStatus\u003e getTrashRoots(boolean allUsers) {\n     List\u003cFileStatus\u003e ret \u003d new ArrayList\u003c\u003e();\n     // Get normal trash roots\n     ret.addAll(super.getTrashRoots(allUsers));\n \n     try {\n       // Get EZ Trash roots\n       final RemoteIterator\u003cEncryptionZone\u003e it \u003d dfs.listEncryptionZones();\n       while (it.hasNext()) {\n         Path ezTrashRoot \u003d new Path(it.next().getPath(),\n             FileSystem.TRASH_PREFIX);\n+        if (!exists(ezTrashRoot)) {\n+          continue;\n+        }\n         if (allUsers) {\n           for (FileStatus candidate : listStatus(ezTrashRoot)) {\n             if (exists(candidate.getPath())) {\n               ret.add(candidate);\n             }\n           }\n         } else {\n           Path userTrash \u003d new Path(ezTrashRoot, System.getProperty(\n               \"user.name\"));\n           if (exists(userTrash)) {\n             ret.add(getFileStatus(userTrash));\n           }\n         }\n       }\n     } catch (IOException e){\n       DFSClient.LOG.warn(\"Cannot get all encrypted trash roots\", e);\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Collection\u003cFileStatus\u003e getTrashRoots(boolean allUsers) {\n    List\u003cFileStatus\u003e ret \u003d new ArrayList\u003c\u003e();\n    // Get normal trash roots\n    ret.addAll(super.getTrashRoots(allUsers));\n\n    try {\n      // Get EZ Trash roots\n      final RemoteIterator\u003cEncryptionZone\u003e it \u003d dfs.listEncryptionZones();\n      while (it.hasNext()) {\n        Path ezTrashRoot \u003d new Path(it.next().getPath(),\n            FileSystem.TRASH_PREFIX);\n        if (!exists(ezTrashRoot)) {\n          continue;\n        }\n        if (allUsers) {\n          for (FileStatus candidate : listStatus(ezTrashRoot)) {\n            if (exists(candidate.getPath())) {\n              ret.add(candidate);\n            }\n          }\n        } else {\n          Path userTrash \u003d new Path(ezTrashRoot, System.getProperty(\n              \"user.name\"));\n          if (exists(userTrash)) {\n            ret.add(getFileStatus(userTrash));\n          }\n        }\n      }\n    } catch (IOException e){\n      DFSClient.LOG.warn(\"Cannot get all encrypted trash roots\", e);\n    }\n    return ret;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
      "extendedDetails": {}
    },
    "0fb14aaced7afdbbb72e59316c186ebf6ec2d091": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "HDFS-9799. Reimplement getCurrentTrashDir to remove incompatibility. (zhz)\n\nChange-Id: I7834bcebffed38cb384db5395ddb8b6dd9e79a0b\n",
      "commitDate": "17/02/16 1:30 PM",
      "commitName": "0fb14aaced7afdbbb72e59316c186ebf6ec2d091",
      "commitAuthor": "Zhe Zhang",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-9799. Reimplement getCurrentTrashDir to remove incompatibility. (zhz)\n\nChange-Id: I7834bcebffed38cb384db5395ddb8b6dd9e79a0b\n",
          "commitDate": "17/02/16 1:30 PM",
          "commitName": "0fb14aaced7afdbbb72e59316c186ebf6ec2d091",
          "commitAuthor": "Zhe Zhang",
          "commitDateOld": "08/02/16 4:30 PM",
          "commitNameOld": "dbe49c1bd6f62f04cf4290795b81a66fbd41d44c",
          "commitAuthorOld": "zhezhang",
          "daysBetweenCommits": 8.87,
          "commitsBetweenForRepo": 60,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,30 @@\n-  public Collection\u003cFileStatus\u003e getTrashRoots(boolean allUsers) throws IOException {\n-    List\u003cFileStatus\u003e ret \u003d new ArrayList\u003cFileStatus\u003e();\n+  public Collection\u003cFileStatus\u003e getTrashRoots(boolean allUsers) {\n+    List\u003cFileStatus\u003e ret \u003d new ArrayList\u003c\u003e();\n     // Get normal trash roots\n     ret.addAll(super.getTrashRoots(allUsers));\n \n-    // Get EZ Trash roots\n-    final RemoteIterator\u003cEncryptionZone\u003e it \u003d dfs.listEncryptionZones();\n-    while (it.hasNext()) {\n-      Path ezTrashRoot \u003d new Path(it.next().getPath(), FileSystem.TRASH_PREFIX);\n-      if (allUsers) {\n-        for (FileStatus candidate : listStatus(ezTrashRoot)) {\n-          if (exists(candidate.getPath())) {\n-            ret.add(candidate);\n+    try {\n+      // Get EZ Trash roots\n+      final RemoteIterator\u003cEncryptionZone\u003e it \u003d dfs.listEncryptionZones();\n+      while (it.hasNext()) {\n+        Path ezTrashRoot \u003d new Path(it.next().getPath(),\n+            FileSystem.TRASH_PREFIX);\n+        if (allUsers) {\n+          for (FileStatus candidate : listStatus(ezTrashRoot)) {\n+            if (exists(candidate.getPath())) {\n+              ret.add(candidate);\n+            }\n+          }\n+        } else {\n+          Path userTrash \u003d new Path(ezTrashRoot, System.getProperty(\n+              \"user.name\"));\n+          if (exists(userTrash)) {\n+            ret.add(getFileStatus(userTrash));\n           }\n         }\n-      } else {\n-        Path userTrash \u003d new Path(ezTrashRoot, System.getProperty(\"user.name\"));\n-        if (exists(userTrash)) {\n-          ret.add(getFileStatus(userTrash));\n-        }\n       }\n+    } catch (IOException e){\n+      DFSClient.LOG.warn(\"Cannot get all encrypted trash roots\", e);\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Collection\u003cFileStatus\u003e getTrashRoots(boolean allUsers) {\n    List\u003cFileStatus\u003e ret \u003d new ArrayList\u003c\u003e();\n    // Get normal trash roots\n    ret.addAll(super.getTrashRoots(allUsers));\n\n    try {\n      // Get EZ Trash roots\n      final RemoteIterator\u003cEncryptionZone\u003e it \u003d dfs.listEncryptionZones();\n      while (it.hasNext()) {\n        Path ezTrashRoot \u003d new Path(it.next().getPath(),\n            FileSystem.TRASH_PREFIX);\n        if (allUsers) {\n          for (FileStatus candidate : listStatus(ezTrashRoot)) {\n            if (exists(candidate.getPath())) {\n              ret.add(candidate);\n            }\n          }\n        } else {\n          Path userTrash \u003d new Path(ezTrashRoot, System.getProperty(\n              \"user.name\"));\n          if (exists(userTrash)) {\n            ret.add(getFileStatus(userTrash));\n          }\n        }\n      }\n    } catch (IOException e){\n      DFSClient.LOG.warn(\"Cannot get all encrypted trash roots\", e);\n    }\n    return ret;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
          "extendedDetails": {
            "oldValue": "[IOException]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-9799. Reimplement getCurrentTrashDir to remove incompatibility. (zhz)\n\nChange-Id: I7834bcebffed38cb384db5395ddb8b6dd9e79a0b\n",
          "commitDate": "17/02/16 1:30 PM",
          "commitName": "0fb14aaced7afdbbb72e59316c186ebf6ec2d091",
          "commitAuthor": "Zhe Zhang",
          "commitDateOld": "08/02/16 4:30 PM",
          "commitNameOld": "dbe49c1bd6f62f04cf4290795b81a66fbd41d44c",
          "commitAuthorOld": "zhezhang",
          "daysBetweenCommits": 8.87,
          "commitsBetweenForRepo": 60,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,30 @@\n-  public Collection\u003cFileStatus\u003e getTrashRoots(boolean allUsers) throws IOException {\n-    List\u003cFileStatus\u003e ret \u003d new ArrayList\u003cFileStatus\u003e();\n+  public Collection\u003cFileStatus\u003e getTrashRoots(boolean allUsers) {\n+    List\u003cFileStatus\u003e ret \u003d new ArrayList\u003c\u003e();\n     // Get normal trash roots\n     ret.addAll(super.getTrashRoots(allUsers));\n \n-    // Get EZ Trash roots\n-    final RemoteIterator\u003cEncryptionZone\u003e it \u003d dfs.listEncryptionZones();\n-    while (it.hasNext()) {\n-      Path ezTrashRoot \u003d new Path(it.next().getPath(), FileSystem.TRASH_PREFIX);\n-      if (allUsers) {\n-        for (FileStatus candidate : listStatus(ezTrashRoot)) {\n-          if (exists(candidate.getPath())) {\n-            ret.add(candidate);\n+    try {\n+      // Get EZ Trash roots\n+      final RemoteIterator\u003cEncryptionZone\u003e it \u003d dfs.listEncryptionZones();\n+      while (it.hasNext()) {\n+        Path ezTrashRoot \u003d new Path(it.next().getPath(),\n+            FileSystem.TRASH_PREFIX);\n+        if (allUsers) {\n+          for (FileStatus candidate : listStatus(ezTrashRoot)) {\n+            if (exists(candidate.getPath())) {\n+              ret.add(candidate);\n+            }\n+          }\n+        } else {\n+          Path userTrash \u003d new Path(ezTrashRoot, System.getProperty(\n+              \"user.name\"));\n+          if (exists(userTrash)) {\n+            ret.add(getFileStatus(userTrash));\n           }\n         }\n-      } else {\n-        Path userTrash \u003d new Path(ezTrashRoot, System.getProperty(\"user.name\"));\n-        if (exists(userTrash)) {\n-          ret.add(getFileStatus(userTrash));\n-        }\n       }\n+    } catch (IOException e){\n+      DFSClient.LOG.warn(\"Cannot get all encrypted trash roots\", e);\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Collection\u003cFileStatus\u003e getTrashRoots(boolean allUsers) {\n    List\u003cFileStatus\u003e ret \u003d new ArrayList\u003c\u003e();\n    // Get normal trash roots\n    ret.addAll(super.getTrashRoots(allUsers));\n\n    try {\n      // Get EZ Trash roots\n      final RemoteIterator\u003cEncryptionZone\u003e it \u003d dfs.listEncryptionZones();\n      while (it.hasNext()) {\n        Path ezTrashRoot \u003d new Path(it.next().getPath(),\n            FileSystem.TRASH_PREFIX);\n        if (allUsers) {\n          for (FileStatus candidate : listStatus(ezTrashRoot)) {\n            if (exists(candidate.getPath())) {\n              ret.add(candidate);\n            }\n          }\n        } else {\n          Path userTrash \u003d new Path(ezTrashRoot, System.getProperty(\n              \"user.name\"));\n          if (exists(userTrash)) {\n            ret.add(getFileStatus(userTrash));\n          }\n        }\n      }\n    } catch (IOException e){\n      DFSClient.LOG.warn(\"Cannot get all encrypted trash roots\", e);\n    }\n    return ret;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "cbc7b6bf97a80c39d4bbb3005e42dacae6726baf": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-8831. Trash Support for deletion in HDFS encryption zone. Contributed by Xiaoyu Yao.\n",
      "commitDate": "04/12/15 10:39 AM",
      "commitName": "cbc7b6bf97a80c39d4bbb3005e42dacae6726baf",
      "commitAuthor": "Xiaoyu Yao",
      "diff": "@@ -0,0 +1,24 @@\n+  public Collection\u003cFileStatus\u003e getTrashRoots(boolean allUsers) throws IOException {\n+    List\u003cFileStatus\u003e ret \u003d new ArrayList\u003cFileStatus\u003e();\n+    // Get normal trash roots\n+    ret.addAll(super.getTrashRoots(allUsers));\n+\n+    // Get EZ Trash roots\n+    final RemoteIterator\u003cEncryptionZone\u003e it \u003d dfs.listEncryptionZones();\n+    while (it.hasNext()) {\n+      Path ezTrashRoot \u003d new Path(it.next().getPath(), FileSystem.TRASH_PREFIX);\n+      if (allUsers) {\n+        for (FileStatus candidate : listStatus(ezTrashRoot)) {\n+          if (exists(candidate.getPath())) {\n+            ret.add(candidate);\n+          }\n+        }\n+      } else {\n+        Path userTrash \u003d new Path(ezTrashRoot, System.getProperty(\"user.name\"));\n+        if (exists(userTrash)) {\n+          ret.add(getFileStatus(userTrash));\n+        }\n+      }\n+    }\n+    return ret;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Collection\u003cFileStatus\u003e getTrashRoots(boolean allUsers) throws IOException {\n    List\u003cFileStatus\u003e ret \u003d new ArrayList\u003cFileStatus\u003e();\n    // Get normal trash roots\n    ret.addAll(super.getTrashRoots(allUsers));\n\n    // Get EZ Trash roots\n    final RemoteIterator\u003cEncryptionZone\u003e it \u003d dfs.listEncryptionZones();\n    while (it.hasNext()) {\n      Path ezTrashRoot \u003d new Path(it.next().getPath(), FileSystem.TRASH_PREFIX);\n      if (allUsers) {\n        for (FileStatus candidate : listStatus(ezTrashRoot)) {\n          if (exists(candidate.getPath())) {\n            ret.add(candidate);\n          }\n        }\n      } else {\n        Path userTrash \u003d new Path(ezTrashRoot, System.getProperty(\"user.name\"));\n        if (exists(userTrash)) {\n          ret.add(getFileStatus(userTrash));\n        }\n      }\n    }\n    return ret;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DistributedFileSystem.java"
    }
  }
}