{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LocalJavaKeyStoreProvider.java",
  "functionName": "flush",
  "functionId": "flush",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/alias/LocalJavaKeyStoreProvider.java",
  "functionStartLine": 150,
  "functionEndLine": 166,
  "numCommitsSeen": 12,
  "timeTaken": 2229,
  "changeHistory": [
    "7b988e88992528a0cac2ca8893652c5d4a90c6b9",
    "2dbc40e6086026ef02747223982aa68f2d328ade",
    "860b8373c3a851386b8cd2d4265dd35e5aabc941",
    "b351086ff66ca279c0550e078e3a9d110f3f36a5",
    "c79728478caadd8374bce2bc3f466db1da1e3ad1"
  ],
  "changeHistoryShort": {
    "7b988e88992528a0cac2ca8893652c5d4a90c6b9": "Ybodychange",
    "2dbc40e6086026ef02747223982aa68f2d328ade": "Ybodychange",
    "860b8373c3a851386b8cd2d4265dd35e5aabc941": "Ymultichange(Ymovefromfile,Ybodychange)",
    "b351086ff66ca279c0550e078e3a9d110f3f36a5": "Ybodychange",
    "c79728478caadd8374bce2bc3f466db1da1e3ad1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7b988e88992528a0cac2ca8893652c5d4a90c6b9": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13861. Spelling errors in logging and exceptions for code. Contributed by Grant Sohn.\n",
      "commitDate": "05/12/16 11:18 PM",
      "commitName": "7b988e88992528a0cac2ca8893652c5d4a90c6b9",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "11/05/16 11:30 AM",
      "commitNameOld": "acb509b2fa0bbe6e00f8a90aec37f63a09463afa",
      "commitAuthorOld": "Larry McCay",
      "daysBetweenCommits": 208.53,
      "commitsBetweenForRepo": 1598,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n   public void flush() throws IOException {\n     super.flush();\n     if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Reseting permissions to \u0027\" + permissions + \"\u0027\");\n+      LOG.debug(\"Resetting permissions to \u0027\" + permissions + \"\u0027\");\n     }\n     if (!Shell.WINDOWS) {\n       Files.setPosixFilePermissions(Paths.get(file.getCanonicalPath()),\n           permissions);\n     } else {\n       // FsPermission expects a 10-character string because of the leading\n       // directory indicator, i.e. \"drwx------\". The JDK toString method returns\n       // a 9-character string, so prepend a leading character.\n       FsPermission fsPermission \u003d FsPermission.valueOf(\n           \"-\" + PosixFilePermissions.toString(permissions));\n       FileUtil.setPermission(file, fsPermission);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void flush() throws IOException {\n    super.flush();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Resetting permissions to \u0027\" + permissions + \"\u0027\");\n    }\n    if (!Shell.WINDOWS) {\n      Files.setPosixFilePermissions(Paths.get(file.getCanonicalPath()),\n          permissions);\n    } else {\n      // FsPermission expects a 10-character string because of the leading\n      // directory indicator, i.e. \"drwx------\". The JDK toString method returns\n      // a 9-character string, so prepend a leading character.\n      FsPermission fsPermission \u003d FsPermission.valueOf(\n          \"-\" + PosixFilePermissions.toString(permissions));\n      FileUtil.setPermission(file, fsPermission);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/alias/LocalJavaKeyStoreProvider.java",
      "extendedDetails": {}
    },
    "2dbc40e6086026ef02747223982aa68f2d328ade": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12059. S3Credentials should support use of CredentialProvider. Contributed by Sean Busbey.\n",
      "commitDate": "05/06/15 1:11 PM",
      "commitName": "2dbc40e6086026ef02747223982aa68f2d328ade",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "28/05/15 3:01 PM",
      "commitNameOld": "860b8373c3a851386b8cd2d4265dd35e5aabc941",
      "commitAuthorOld": "cnauroth",
      "daysBetweenCommits": 7.92,
      "commitsBetweenForRepo": 62,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,17 @@\n   public void flush() throws IOException {\n     super.flush();\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Reseting permissions to \u0027\" + permissions + \"\u0027\");\n+    }\n     if (!Shell.WINDOWS) {\n       Files.setPosixFilePermissions(Paths.get(file.getCanonicalPath()),\n           permissions);\n     } else {\n       // FsPermission expects a 10-character string because of the leading\n       // directory indicator, i.e. \"drwx------\". The JDK toString method returns\n       // a 9-character string, so prepend a leading character.\n       FsPermission fsPermission \u003d FsPermission.valueOf(\n           \"-\" + PosixFilePermissions.toString(permissions));\n       FileUtil.setPermission(file, fsPermission);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void flush() throws IOException {\n    super.flush();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Reseting permissions to \u0027\" + permissions + \"\u0027\");\n    }\n    if (!Shell.WINDOWS) {\n      Files.setPosixFilePermissions(Paths.get(file.getCanonicalPath()),\n          permissions);\n    } else {\n      // FsPermission expects a 10-character string because of the leading\n      // directory indicator, i.e. \"drwx------\". The JDK toString method returns\n      // a 9-character string, so prepend a leading character.\n      FsPermission fsPermission \u003d FsPermission.valueOf(\n          \"-\" + PosixFilePermissions.toString(permissions));\n      FileUtil.setPermission(file, fsPermission);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/alias/LocalJavaKeyStoreProvider.java",
      "extendedDetails": {}
    },
    "860b8373c3a851386b8cd2d4265dd35e5aabc941": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "HADOOP-11934. Use of JavaKeyStoreProvider in LdapGroupsMapping causes infinite loop. Contributed by Larry McCay.\n",
      "commitDate": "28/05/15 3:01 PM",
      "commitName": "860b8373c3a851386b8cd2d4265dd35e5aabc941",
      "commitAuthor": "cnauroth",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HADOOP-11934. Use of JavaKeyStoreProvider in LdapGroupsMapping causes infinite loop. Contributed by Larry McCay.\n",
          "commitDate": "28/05/15 3:01 PM",
          "commitName": "860b8373c3a851386b8cd2d4265dd35e5aabc941",
          "commitAuthor": "cnauroth",
          "commitDateOld": "28/05/15 1:24 PM",
          "commitNameOld": "ae1454342064c71f414d20ad0885e60a335c7420",
          "commitAuthorOld": "Allen Wittenauer",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,14 @@\n   public void flush() throws IOException {\n-    writeLock.lock();\n-    try {\n-      if (!changed) {\n-        return;\n-      }\n-      // write out the keystore\n-      try (FSDataOutputStream out \u003d FileSystem.create(fs, path, permissions)) {\n-        keyStore.store(out, password);\n-      } catch (KeyStoreException e) {\n-        throw new IOException(\"Can\u0027t store keystore \" + this, e);\n-      } catch (NoSuchAlgorithmException e) {\n-        throw new IOException(\"No such algorithm storing keystore \" + this, e);\n-      } catch (CertificateException e) {\n-        throw new IOException(\"Certificate exception storing keystore \" + this,\n-            e);\n-      }\n-      changed \u003d false;\n-    }\n-    finally {\n-      writeLock.unlock();\n+    super.flush();\n+    if (!Shell.WINDOWS) {\n+      Files.setPosixFilePermissions(Paths.get(file.getCanonicalPath()),\n+          permissions);\n+    } else {\n+      // FsPermission expects a 10-character string because of the leading\n+      // directory indicator, i.e. \"drwx------\". The JDK toString method returns\n+      // a 9-character string, so prepend a leading character.\n+      FsPermission fsPermission \u003d FsPermission.valueOf(\n+          \"-\" + PosixFilePermissions.toString(permissions));\n+      FileUtil.setPermission(file, fsPermission);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void flush() throws IOException {\n    super.flush();\n    if (!Shell.WINDOWS) {\n      Files.setPosixFilePermissions(Paths.get(file.getCanonicalPath()),\n          permissions);\n    } else {\n      // FsPermission expects a 10-character string because of the leading\n      // directory indicator, i.e. \"drwx------\". The JDK toString method returns\n      // a 9-character string, so prepend a leading character.\n      FsPermission fsPermission \u003d FsPermission.valueOf(\n          \"-\" + PosixFilePermissions.toString(permissions));\n      FileUtil.setPermission(file, fsPermission);\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/alias/LocalJavaKeyStoreProvider.java",
          "extendedDetails": {
            "oldPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/alias/JavaKeyStoreProvider.java",
            "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/alias/LocalJavaKeyStoreProvider.java",
            "oldMethodName": "flush",
            "newMethodName": "flush"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-11934. Use of JavaKeyStoreProvider in LdapGroupsMapping causes infinite loop. Contributed by Larry McCay.\n",
          "commitDate": "28/05/15 3:01 PM",
          "commitName": "860b8373c3a851386b8cd2d4265dd35e5aabc941",
          "commitAuthor": "cnauroth",
          "commitDateOld": "28/05/15 1:24 PM",
          "commitNameOld": "ae1454342064c71f414d20ad0885e60a335c7420",
          "commitAuthorOld": "Allen Wittenauer",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,14 @@\n   public void flush() throws IOException {\n-    writeLock.lock();\n-    try {\n-      if (!changed) {\n-        return;\n-      }\n-      // write out the keystore\n-      try (FSDataOutputStream out \u003d FileSystem.create(fs, path, permissions)) {\n-        keyStore.store(out, password);\n-      } catch (KeyStoreException e) {\n-        throw new IOException(\"Can\u0027t store keystore \" + this, e);\n-      } catch (NoSuchAlgorithmException e) {\n-        throw new IOException(\"No such algorithm storing keystore \" + this, e);\n-      } catch (CertificateException e) {\n-        throw new IOException(\"Certificate exception storing keystore \" + this,\n-            e);\n-      }\n-      changed \u003d false;\n-    }\n-    finally {\n-      writeLock.unlock();\n+    super.flush();\n+    if (!Shell.WINDOWS) {\n+      Files.setPosixFilePermissions(Paths.get(file.getCanonicalPath()),\n+          permissions);\n+    } else {\n+      // FsPermission expects a 10-character string because of the leading\n+      // directory indicator, i.e. \"drwx------\". The JDK toString method returns\n+      // a 9-character string, so prepend a leading character.\n+      FsPermission fsPermission \u003d FsPermission.valueOf(\n+          \"-\" + PosixFilePermissions.toString(permissions));\n+      FileUtil.setPermission(file, fsPermission);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void flush() throws IOException {\n    super.flush();\n    if (!Shell.WINDOWS) {\n      Files.setPosixFilePermissions(Paths.get(file.getCanonicalPath()),\n          permissions);\n    } else {\n      // FsPermission expects a 10-character string because of the leading\n      // directory indicator, i.e. \"drwx------\". The JDK toString method returns\n      // a 9-character string, so prepend a leading character.\n      FsPermission fsPermission \u003d FsPermission.valueOf(\n          \"-\" + PosixFilePermissions.toString(permissions));\n      FileUtil.setPermission(file, fsPermission);\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/alias/LocalJavaKeyStoreProvider.java",
          "extendedDetails": {}
        }
      ]
    },
    "b351086ff66ca279c0550e078e3a9d110f3f36a5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11014. Potential resource leak in JavaKeyStoreProvider due to unclosed stream. (ozawa)\n",
      "commitDate": "25/03/15 12:59 AM",
      "commitName": "b351086ff66ca279c0550e078e3a9d110f3f36a5",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "11/12/14 4:42 PM",
      "commitNameOld": "5b9fcedb4d116d91d70aaad6cbf59093eeee36df",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 103.3,
      "commitsBetweenForRepo": 812,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,23 @@\n   public void flush() throws IOException {\n     writeLock.lock();\n     try {\n       if (!changed) {\n         return;\n       }\n       // write out the keystore\n-      FSDataOutputStream out \u003d FileSystem.create(fs, path, permissions);\n-      try {\n+      try (FSDataOutputStream out \u003d FileSystem.create(fs, path, permissions)) {\n         keyStore.store(out, password);\n       } catch (KeyStoreException e) {\n         throw new IOException(\"Can\u0027t store keystore \" + this, e);\n       } catch (NoSuchAlgorithmException e) {\n         throw new IOException(\"No such algorithm storing keystore \" + this, e);\n       } catch (CertificateException e) {\n         throw new IOException(\"Certificate exception storing keystore \" + this,\n             e);\n       }\n-      out.close();\n       changed \u003d false;\n     }\n     finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void flush() throws IOException {\n    writeLock.lock();\n    try {\n      if (!changed) {\n        return;\n      }\n      // write out the keystore\n      try (FSDataOutputStream out \u003d FileSystem.create(fs, path, permissions)) {\n        keyStore.store(out, password);\n      } catch (KeyStoreException e) {\n        throw new IOException(\"Can\u0027t store keystore \" + this, e);\n      } catch (NoSuchAlgorithmException e) {\n        throw new IOException(\"No such algorithm storing keystore \" + this, e);\n      } catch (CertificateException e) {\n        throw new IOException(\"Certificate exception storing keystore \" + this,\n            e);\n      }\n      changed \u003d false;\n    }\n    finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/alias/JavaKeyStoreProvider.java",
      "extendedDetails": {}
    },
    "c79728478caadd8374bce2bc3f466db1da1e3ad1": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10607. Create API to separate credential/password storage from\napplications. (Larry McCay via omalley)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603491 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/06/14 8:45 AM",
      "commitName": "c79728478caadd8374bce2bc3f466db1da1e3ad1",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,25 @@\n+  public void flush() throws IOException {\n+    writeLock.lock();\n+    try {\n+      if (!changed) {\n+        return;\n+      }\n+      // write out the keystore\n+      FSDataOutputStream out \u003d FileSystem.create(fs, path, permissions);\n+      try {\n+        keyStore.store(out, password);\n+      } catch (KeyStoreException e) {\n+        throw new IOException(\"Can\u0027t store keystore \" + this, e);\n+      } catch (NoSuchAlgorithmException e) {\n+        throw new IOException(\"No such algorithm storing keystore \" + this, e);\n+      } catch (CertificateException e) {\n+        throw new IOException(\"Certificate exception storing keystore \" + this,\n+            e);\n+      }\n+      out.close();\n+      changed \u003d false;\n+    }\n+    finally {\n+      writeLock.unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void flush() throws IOException {\n    writeLock.lock();\n    try {\n      if (!changed) {\n        return;\n      }\n      // write out the keystore\n      FSDataOutputStream out \u003d FileSystem.create(fs, path, permissions);\n      try {\n        keyStore.store(out, password);\n      } catch (KeyStoreException e) {\n        throw new IOException(\"Can\u0027t store keystore \" + this, e);\n      } catch (NoSuchAlgorithmException e) {\n        throw new IOException(\"No such algorithm storing keystore \" + this, e);\n      } catch (CertificateException e) {\n        throw new IOException(\"Certificate exception storing keystore \" + this,\n            e);\n      }\n      out.close();\n      changed \u003d false;\n    }\n    finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/alias/JavaKeyStoreProvider.java"
    }
  }
}