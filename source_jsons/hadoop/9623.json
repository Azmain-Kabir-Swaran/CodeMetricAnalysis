{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ECTopologyVerifier.java",
  "functionName": "getECTopologyVerifierResult",
  "functionId": "getECTopologyVerifierResult___numOfRacks-int(modifiers-final)__numOfDataNodes-int(modifiers-final)__policies-Collection__ErasureCodingPolicy__(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/ECTopologyVerifier.java",
  "functionStartLine": 69,
  "functionEndLine": 90,
  "numCommitsSeen": 10,
  "timeTaken": 4091,
  "changeHistory": [
    "92c58901d767f4fea571274544a590608c911cb8",
    "951cdd7e4cbe68284620f6805f85c51301150c58",
    "dd5e7c6b7239a93f2391beaa11181e442a387db4"
  ],
  "changeHistoryShort": {
    "92c58901d767f4fea571274544a590608c911cb8": "Yparameterchange",
    "951cdd7e4cbe68284620f6805f85c51301150c58": "Ymultichange(Yparameterchange,Ybodychange)",
    "dd5e7c6b7239a93f2391beaa11181e442a387db4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "92c58901d767f4fea571274544a590608c911cb8": {
      "type": "Yparameterchange",
      "commitMessage": "HDFS-15117. EC: Add getECTopologyResultForPolicies to DistributedFileSystem. Contributed by Ayush Saxena\n",
      "commitDate": "23/01/20 4:48 AM",
      "commitName": "92c58901d767f4fea571274544a590608c911cb8",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "22/02/19 11:38 AM",
      "commitNameOld": "7d3b567194f51b745dbc7eb7ee91c1ac160053f4",
      "commitAuthorOld": "Surendra Singh Lilhore",
      "daysBetweenCommits": 334.72,
      "commitsBetweenForRepo": 2195,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n   public static ECTopologyVerifierResult getECTopologyVerifierResult(\n       final int numOfRacks, final int numOfDataNodes,\n-      final ErasureCodingPolicy... policies) {\n+      final Collection\u003cErasureCodingPolicy\u003e policies) {\n     int minDN \u003d 0;\n     int minRack \u003d 0;\n     for (ErasureCodingPolicy policy: policies) {\n       final int policyDN \u003d\n           policy.getNumDataUnits() + policy\n               .getNumParityUnits();\n       minDN \u003d Math.max(minDN, policyDN);\n       final int policyRack \u003d (int) Math.ceil(\n           policyDN / (double) policy.getNumParityUnits());\n       minRack \u003d Math.max(minRack, policyRack);\n     }\n     if (minDN \u003d\u003d 0 || minRack \u003d\u003d 0) {\n       String resultMessage \u003d \"No erasure coding policy is given.\";\n       LOG.trace(resultMessage);\n       return new ECTopologyVerifierResult(true, resultMessage);\n     }\n     return verifyECWithTopology(minDN, minRack, numOfRacks, numOfDataNodes,\n         getReadablePolicies(policies));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static ECTopologyVerifierResult getECTopologyVerifierResult(\n      final int numOfRacks, final int numOfDataNodes,\n      final Collection\u003cErasureCodingPolicy\u003e policies) {\n    int minDN \u003d 0;\n    int minRack \u003d 0;\n    for (ErasureCodingPolicy policy: policies) {\n      final int policyDN \u003d\n          policy.getNumDataUnits() + policy\n              .getNumParityUnits();\n      minDN \u003d Math.max(minDN, policyDN);\n      final int policyRack \u003d (int) Math.ceil(\n          policyDN / (double) policy.getNumParityUnits());\n      minRack \u003d Math.max(minRack, policyRack);\n    }\n    if (minDN \u003d\u003d 0 || minRack \u003d\u003d 0) {\n      String resultMessage \u003d \"No erasure coding policy is given.\";\n      LOG.trace(resultMessage);\n      return new ECTopologyVerifierResult(true, resultMessage);\n    }\n    return verifyECWithTopology(minDN, minRack, numOfRacks, numOfDataNodes,\n        getReadablePolicies(policies));\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/ECTopologyVerifier.java",
      "extendedDetails": {
        "oldValue": "[numOfRacks-int(modifiers-final), numOfDataNodes-int(modifiers-final), policies-ErasureCodingPolicy(modifiers-final)]",
        "newValue": "[numOfRacks-int(modifiers-final), numOfDataNodes-int(modifiers-final), policies-Collection\u003cErasureCodingPolicy\u003e(modifiers-final)]"
      }
    },
    "951cdd7e4cbe68284620f6805f85c51301150c58": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-14061. Check if the cluster topology supports the EC policy before setting, enabling or adding it. Contributed by Kitti Nanasi.\n\nSigned-off-by: Wei-Chiu Chuang \u003cweichiu@apache.org\u003e\n",
      "commitDate": "23/01/19 2:40 PM",
      "commitName": "951cdd7e4cbe68284620f6805f85c51301150c58",
      "commitAuthor": "Kitti Nanasi",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-14061. Check if the cluster topology supports the EC policy before setting, enabling or adding it. Contributed by Kitti Nanasi.\n\nSigned-off-by: Wei-Chiu Chuang \u003cweichiu@apache.org\u003e\n",
          "commitDate": "23/01/19 2:40 PM",
          "commitName": "951cdd7e4cbe68284620f6805f85c51301150c58",
          "commitAuthor": "Kitti Nanasi",
          "commitDateOld": "03/12/18 10:01 AM",
          "commitNameOld": "dd5e7c6b7239a93f2391beaa11181e442a387db4",
          "commitAuthorOld": "Kitti Nanasi",
          "daysBetweenCommits": 51.19,
          "commitsBetweenForRepo": 330,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,22 @@\n   public static ECTopologyVerifierResult getECTopologyVerifierResult(\n-      final ErasureCodingPolicyInfo[] policies, final int numOfRacks,\n-      final int numOfDataNodes) {\n+      final int numOfRacks, final int numOfDataNodes,\n+      final ErasureCodingPolicy... policies) {\n     int minDN \u003d 0;\n     int minRack \u003d 0;\n-    for (ErasureCodingPolicyInfo policy: policies) {\n-      if (policy.isEnabled()) {\n-        final int policyDN \u003d\n-            policy.getPolicy().getNumDataUnits() + policy.getPolicy()\n-                .getNumParityUnits();\n-        minDN \u003d Math.max(minDN, policyDN);\n-        final int policyRack \u003d (int) Math.ceil(\n-            policyDN / (double) policy.getPolicy().getNumParityUnits());\n-        minRack \u003d Math.max(minRack, policyRack);\n-      }\n+    for (ErasureCodingPolicy policy: policies) {\n+      final int policyDN \u003d\n+          policy.getNumDataUnits() + policy\n+              .getNumParityUnits();\n+      minDN \u003d Math.max(minDN, policyDN);\n+      final int policyRack \u003d (int) Math.ceil(\n+          policyDN / (double) policy.getNumParityUnits());\n+      minRack \u003d Math.max(minRack, policyRack);\n     }\n     if (minDN \u003d\u003d 0 || minRack \u003d\u003d 0) {\n-      String resultMessage \u003d \"No erasure coding policy is enabled.\";\n+      String resultMessage \u003d \"No erasure coding policy is given.\";\n       LOG.trace(resultMessage);\n       return new ECTopologyVerifierResult(true, resultMessage);\n     }\n-    return verifyECWithTopology(minDN, minRack, numOfRacks, numOfDataNodes);\n+    return verifyECWithTopology(minDN, minRack, numOfRacks, numOfDataNodes,\n+        getReadablePolicies(policies));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static ECTopologyVerifierResult getECTopologyVerifierResult(\n      final int numOfRacks, final int numOfDataNodes,\n      final ErasureCodingPolicy... policies) {\n    int minDN \u003d 0;\n    int minRack \u003d 0;\n    for (ErasureCodingPolicy policy: policies) {\n      final int policyDN \u003d\n          policy.getNumDataUnits() + policy\n              .getNumParityUnits();\n      minDN \u003d Math.max(minDN, policyDN);\n      final int policyRack \u003d (int) Math.ceil(\n          policyDN / (double) policy.getNumParityUnits());\n      minRack \u003d Math.max(minRack, policyRack);\n    }\n    if (minDN \u003d\u003d 0 || minRack \u003d\u003d 0) {\n      String resultMessage \u003d \"No erasure coding policy is given.\";\n      LOG.trace(resultMessage);\n      return new ECTopologyVerifierResult(true, resultMessage);\n    }\n    return verifyECWithTopology(minDN, minRack, numOfRacks, numOfDataNodes,\n        getReadablePolicies(policies));\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/ECTopologyVerifier.java",
          "extendedDetails": {
            "oldValue": "[policies-ErasureCodingPolicyInfo[](modifiers-final), numOfRacks-int(modifiers-final), numOfDataNodes-int(modifiers-final)]",
            "newValue": "[numOfRacks-int(modifiers-final), numOfDataNodes-int(modifiers-final), policies-ErasureCodingPolicy(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-14061. Check if the cluster topology supports the EC policy before setting, enabling or adding it. Contributed by Kitti Nanasi.\n\nSigned-off-by: Wei-Chiu Chuang \u003cweichiu@apache.org\u003e\n",
          "commitDate": "23/01/19 2:40 PM",
          "commitName": "951cdd7e4cbe68284620f6805f85c51301150c58",
          "commitAuthor": "Kitti Nanasi",
          "commitDateOld": "03/12/18 10:01 AM",
          "commitNameOld": "dd5e7c6b7239a93f2391beaa11181e442a387db4",
          "commitAuthorOld": "Kitti Nanasi",
          "daysBetweenCommits": 51.19,
          "commitsBetweenForRepo": 330,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,22 @@\n   public static ECTopologyVerifierResult getECTopologyVerifierResult(\n-      final ErasureCodingPolicyInfo[] policies, final int numOfRacks,\n-      final int numOfDataNodes) {\n+      final int numOfRacks, final int numOfDataNodes,\n+      final ErasureCodingPolicy... policies) {\n     int minDN \u003d 0;\n     int minRack \u003d 0;\n-    for (ErasureCodingPolicyInfo policy: policies) {\n-      if (policy.isEnabled()) {\n-        final int policyDN \u003d\n-            policy.getPolicy().getNumDataUnits() + policy.getPolicy()\n-                .getNumParityUnits();\n-        minDN \u003d Math.max(minDN, policyDN);\n-        final int policyRack \u003d (int) Math.ceil(\n-            policyDN / (double) policy.getPolicy().getNumParityUnits());\n-        minRack \u003d Math.max(minRack, policyRack);\n-      }\n+    for (ErasureCodingPolicy policy: policies) {\n+      final int policyDN \u003d\n+          policy.getNumDataUnits() + policy\n+              .getNumParityUnits();\n+      minDN \u003d Math.max(minDN, policyDN);\n+      final int policyRack \u003d (int) Math.ceil(\n+          policyDN / (double) policy.getNumParityUnits());\n+      minRack \u003d Math.max(minRack, policyRack);\n     }\n     if (minDN \u003d\u003d 0 || minRack \u003d\u003d 0) {\n-      String resultMessage \u003d \"No erasure coding policy is enabled.\";\n+      String resultMessage \u003d \"No erasure coding policy is given.\";\n       LOG.trace(resultMessage);\n       return new ECTopologyVerifierResult(true, resultMessage);\n     }\n-    return verifyECWithTopology(minDN, minRack, numOfRacks, numOfDataNodes);\n+    return verifyECWithTopology(minDN, minRack, numOfRacks, numOfDataNodes,\n+        getReadablePolicies(policies));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static ECTopologyVerifierResult getECTopologyVerifierResult(\n      final int numOfRacks, final int numOfDataNodes,\n      final ErasureCodingPolicy... policies) {\n    int minDN \u003d 0;\n    int minRack \u003d 0;\n    for (ErasureCodingPolicy policy: policies) {\n      final int policyDN \u003d\n          policy.getNumDataUnits() + policy\n              .getNumParityUnits();\n      minDN \u003d Math.max(minDN, policyDN);\n      final int policyRack \u003d (int) Math.ceil(\n          policyDN / (double) policy.getNumParityUnits());\n      minRack \u003d Math.max(minRack, policyRack);\n    }\n    if (minDN \u003d\u003d 0 || minRack \u003d\u003d 0) {\n      String resultMessage \u003d \"No erasure coding policy is given.\";\n      LOG.trace(resultMessage);\n      return new ECTopologyVerifierResult(true, resultMessage);\n    }\n    return verifyECWithTopology(minDN, minRack, numOfRacks, numOfDataNodes,\n        getReadablePolicies(policies));\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/ECTopologyVerifier.java",
          "extendedDetails": {}
        }
      ]
    },
    "dd5e7c6b7239a93f2391beaa11181e442a387db4": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-12946. Add a tool to check rack configuration against EC policies. Contributed by Kitti Nanasi.\n\nSigned-off-by: Wei-Chiu Chuang \u003cweichiu@apache.org\u003e\n",
      "commitDate": "03/12/18 10:01 AM",
      "commitName": "dd5e7c6b7239a93f2391beaa11181e442a387db4",
      "commitAuthor": "Kitti Nanasi",
      "diff": "@@ -0,0 +1,23 @@\n+  public static ECTopologyVerifierResult getECTopologyVerifierResult(\n+      final ErasureCodingPolicyInfo[] policies, final int numOfRacks,\n+      final int numOfDataNodes) {\n+    int minDN \u003d 0;\n+    int minRack \u003d 0;\n+    for (ErasureCodingPolicyInfo policy: policies) {\n+      if (policy.isEnabled()) {\n+        final int policyDN \u003d\n+            policy.getPolicy().getNumDataUnits() + policy.getPolicy()\n+                .getNumParityUnits();\n+        minDN \u003d Math.max(minDN, policyDN);\n+        final int policyRack \u003d (int) Math.ceil(\n+            policyDN / (double) policy.getPolicy().getNumParityUnits());\n+        minRack \u003d Math.max(minRack, policyRack);\n+      }\n+    }\n+    if (minDN \u003d\u003d 0 || minRack \u003d\u003d 0) {\n+      String resultMessage \u003d \"No erasure coding policy is enabled.\";\n+      LOG.trace(resultMessage);\n+      return new ECTopologyVerifierResult(true, resultMessage);\n+    }\n+    return verifyECWithTopology(minDN, minRack, numOfRacks, numOfDataNodes);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static ECTopologyVerifierResult getECTopologyVerifierResult(\n      final ErasureCodingPolicyInfo[] policies, final int numOfRacks,\n      final int numOfDataNodes) {\n    int minDN \u003d 0;\n    int minRack \u003d 0;\n    for (ErasureCodingPolicyInfo policy: policies) {\n      if (policy.isEnabled()) {\n        final int policyDN \u003d\n            policy.getPolicy().getNumDataUnits() + policy.getPolicy()\n                .getNumParityUnits();\n        minDN \u003d Math.max(minDN, policyDN);\n        final int policyRack \u003d (int) Math.ceil(\n            policyDN / (double) policy.getPolicy().getNumParityUnits());\n        minRack \u003d Math.max(minRack, policyRack);\n      }\n    }\n    if (minDN \u003d\u003d 0 || minRack \u003d\u003d 0) {\n      String resultMessage \u003d \"No erasure coding policy is enabled.\";\n      LOG.trace(resultMessage);\n      return new ECTopologyVerifierResult(true, resultMessage);\n    }\n    return verifyECWithTopology(minDN, minRack, numOfRacks, numOfDataNodes);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/common/ECTopologyVerifier.java"
    }
  }
}