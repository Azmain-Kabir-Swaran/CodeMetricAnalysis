{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "StageAllocatorGreedyRLE.java",
  "functionName": "trackProgress",
  "functionId": "trackProgress___planModifications-RLESparseResourceAllocation__rr-ReservationRequest__stageEarliestStart-long__stageDeadline-long__allocationRequests-Map__ReservationInterval,Resource____dur-long__gangsToPlace-int__maxGang-int",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/planning/StageAllocatorGreedyRLE.java",
  "functionStartLine": 206,
  "functionEndLine": 229,
  "numCommitsSeen": 7,
  "timeTaken": 783,
  "changeHistory": [
    "5cf5c41a895f5ab8bf6270089f8cfdea50573a97"
  ],
  "changeHistoryShort": {
    "5cf5c41a895f5ab8bf6270089f8cfdea50573a97": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5cf5c41a895f5ab8bf6270089f8cfdea50573a97": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4360. Improve GreedyReservationAgent to support \"early\" allocations, and performance improvements (curino via asuresh)\n",
      "commitDate": "10/02/16 9:11 AM",
      "commitName": "5cf5c41a895f5ab8bf6270089f8cfdea50573a97",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,24 @@\n+  private int trackProgress(RLESparseResourceAllocation planModifications,\n+      ReservationRequest rr, long stageEarliestStart, long stageDeadline,\n+      Map\u003cReservationInterval, Resource\u003e allocationRequests, long dur,\n+      int gangsToPlace, int maxGang) {\n+    // if we were able to place any gang, record this, and decrement\n+    // gangsToPlace\n+    if (maxGang \u003e 0) {\n+      gangsToPlace -\u003d maxGang;\n+\n+      ReservationInterval reservationInt \u003d\n+          computeReservationInterval(stageEarliestStart, stageDeadline, dur);\n+      Resource reservationRes \u003d\n+          Resources.multiply(rr.getCapability(), rr.getConcurrency() * maxGang);\n+      // remember occupied space (plan is read-only till we find a plausible\n+      // allocation for the entire request). This is needed since we might be\n+      // placing other ReservationRequest within the same\n+      // ReservationDefinition,\n+      // and we must avoid double-counting the available resources\n+      planModifications.addInterval(reservationInt, reservationRes);\n+      allocationRequests.put(reservationInt, reservationRes);\n+\n+    }\n+    return gangsToPlace;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private int trackProgress(RLESparseResourceAllocation planModifications,\n      ReservationRequest rr, long stageEarliestStart, long stageDeadline,\n      Map\u003cReservationInterval, Resource\u003e allocationRequests, long dur,\n      int gangsToPlace, int maxGang) {\n    // if we were able to place any gang, record this, and decrement\n    // gangsToPlace\n    if (maxGang \u003e 0) {\n      gangsToPlace -\u003d maxGang;\n\n      ReservationInterval reservationInt \u003d\n          computeReservationInterval(stageEarliestStart, stageDeadline, dur);\n      Resource reservationRes \u003d\n          Resources.multiply(rr.getCapability(), rr.getConcurrency() * maxGang);\n      // remember occupied space (plan is read-only till we find a plausible\n      // allocation for the entire request). This is needed since we might be\n      // placing other ReservationRequest within the same\n      // ReservationDefinition,\n      // and we must avoid double-counting the available resources\n      planModifications.addInterval(reservationInt, reservationRes);\n      allocationRequests.put(reservationInt, reservationRes);\n\n    }\n    return gangsToPlace;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/planning/StageAllocatorGreedyRLE.java"
    }
  }
}