{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ServiceScheduler.java",
  "functionName": "initGlobalTokensForSubstitute",
  "functionId": "initGlobalTokensForSubstitute___context-ServiceContext",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
  "functionStartLine": 504,
  "functionEndLine": 528,
  "numCommitsSeen": 34,
  "timeTaken": 3387,
  "changeHistory": [
    "0c559b27820d12ebe5c315c6e2d1685c6de6bd33",
    "37f4696a9cc9284b242215f56a10990e1028d40c",
    "40ab068eabe50875449d601471619a4e82fff86d",
    "2191f5b533c6b4763f5d443d21127f1f8552ce64",
    "1888318c89776f0bf354c1b13e3ee169e14ff638"
  ],
  "changeHistoryShort": {
    "0c559b27820d12ebe5c315c6e2d1685c6de6bd33": "Ybodychange",
    "37f4696a9cc9284b242215f56a10990e1028d40c": "Ybodychange",
    "40ab068eabe50875449d601471619a4e82fff86d": "Yfilerename",
    "2191f5b533c6b4763f5d443d21127f1f8552ce64": "Ybodychange",
    "1888318c89776f0bf354c1b13e3ee169e14ff638": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0c559b27820d12ebe5c315c6e2d1685c6de6bd33": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7777. Fix user name format in YARN Registry DNS name. Contributed by Jian He\n",
      "commitDate": "24/01/18 1:50 PM",
      "commitName": "0c559b27820d12ebe5c315c6e2d1685c6de6bd33",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "18/01/18 12:11 PM",
      "commitNameOld": "37f4696a9cc9284b242215f56a10990e1028d40c",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 6.07,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,25 @@\n   private void initGlobalTokensForSubstitute(ServiceContext context) {\n     // ZK\n     globalTokens.put(ServiceApiConstants.CLUSTER_ZK_QUORUM, getConfig()\n         .getTrimmed(KEY_REGISTRY_ZK_QUORUM, DEFAULT_REGISTRY_ZK_QUORUM));\n-    String user \u003d null;\n-    try {\n-      user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n-    } catch (IOException e) {\n-      LOG.error(\"Failed to get user.\", e);\n-    }\n-    globalTokens\n-        .put(SERVICE_ZK_PATH, ServiceRegistryUtils.mkServiceHomePath(user, app.getName()));\n+    String user \u003d RegistryUtils.currentUser();\n+    globalTokens.put(SERVICE_ZK_PATH,\n+        ServiceRegistryUtils.mkServiceHomePath(user, app.getName()));\n \n     globalTokens.put(ServiceApiConstants.USER, user);\n     String dnsDomain \u003d getConfig().getTrimmed(KEY_DNS_DOMAIN);\n     if (dnsDomain !\u003d null \u0026\u0026 !dnsDomain.isEmpty()) {\n       globalTokens.put(ServiceApiConstants.DOMAIN, dnsDomain);\n     }\n     // HDFS\n     String clusterFs \u003d getConfig().getTrimmed(FS_DEFAULT_NAME_KEY);\n     if (clusterFs !\u003d null \u0026\u0026 !clusterFs.isEmpty()) {\n       globalTokens.put(ServiceApiConstants.CLUSTER_FS_URI, clusterFs);\n       globalTokens.put(ServiceApiConstants.CLUSTER_FS_HOST,\n           URI.create(clusterFs).getHost());\n     }\n     globalTokens.put(SERVICE_HDFS_DIR, context.serviceHdfsDir);\n     // service name\n     globalTokens.put(SERVICE_NAME_LC, app.getName().toLowerCase());\n     globalTokens.put(SERVICE_NAME, app.getName());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initGlobalTokensForSubstitute(ServiceContext context) {\n    // ZK\n    globalTokens.put(ServiceApiConstants.CLUSTER_ZK_QUORUM, getConfig()\n        .getTrimmed(KEY_REGISTRY_ZK_QUORUM, DEFAULT_REGISTRY_ZK_QUORUM));\n    String user \u003d RegistryUtils.currentUser();\n    globalTokens.put(SERVICE_ZK_PATH,\n        ServiceRegistryUtils.mkServiceHomePath(user, app.getName()));\n\n    globalTokens.put(ServiceApiConstants.USER, user);\n    String dnsDomain \u003d getConfig().getTrimmed(KEY_DNS_DOMAIN);\n    if (dnsDomain !\u003d null \u0026\u0026 !dnsDomain.isEmpty()) {\n      globalTokens.put(ServiceApiConstants.DOMAIN, dnsDomain);\n    }\n    // HDFS\n    String clusterFs \u003d getConfig().getTrimmed(FS_DEFAULT_NAME_KEY);\n    if (clusterFs !\u003d null \u0026\u0026 !clusterFs.isEmpty()) {\n      globalTokens.put(ServiceApiConstants.CLUSTER_FS_URI, clusterFs);\n      globalTokens.put(ServiceApiConstants.CLUSTER_FS_HOST,\n          URI.create(clusterFs).getHost());\n    }\n    globalTokens.put(SERVICE_HDFS_DIR, context.serviceHdfsDir);\n    // service name\n    globalTokens.put(SERVICE_NAME_LC, app.getName().toLowerCase());\n    globalTokens.put(SERVICE_NAME, app.getName());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
      "extendedDetails": {}
    },
    "37f4696a9cc9284b242215f56a10990e1028d40c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7740. Fix logging for destroy yarn service cli when app does not exist and some minor bugs. Contributed by Jian He\n",
      "commitDate": "18/01/18 12:11 PM",
      "commitName": "37f4696a9cc9284b242215f56a10990e1028d40c",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "12/01/18 2:04 PM",
      "commitNameOld": "c05b84703b7754b6c2fbcec39f22b5d7802563ec",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 5.92,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   private void initGlobalTokensForSubstitute(ServiceContext context) {\n     // ZK\n     globalTokens.put(ServiceApiConstants.CLUSTER_ZK_QUORUM, getConfig()\n         .getTrimmed(KEY_REGISTRY_ZK_QUORUM, DEFAULT_REGISTRY_ZK_QUORUM));\n     String user \u003d null;\n     try {\n       user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n     } catch (IOException e) {\n       LOG.error(\"Failed to get user.\", e);\n     }\n     globalTokens\n-        .put(SERVICE_ZK_PATH, ServiceRegistryUtils.mkClusterPath(user, app.getName()));\n+        .put(SERVICE_ZK_PATH, ServiceRegistryUtils.mkServiceHomePath(user, app.getName()));\n \n     globalTokens.put(ServiceApiConstants.USER, user);\n     String dnsDomain \u003d getConfig().getTrimmed(KEY_DNS_DOMAIN);\n     if (dnsDomain !\u003d null \u0026\u0026 !dnsDomain.isEmpty()) {\n       globalTokens.put(ServiceApiConstants.DOMAIN, dnsDomain);\n     }\n     // HDFS\n     String clusterFs \u003d getConfig().getTrimmed(FS_DEFAULT_NAME_KEY);\n     if (clusterFs !\u003d null \u0026\u0026 !clusterFs.isEmpty()) {\n       globalTokens.put(ServiceApiConstants.CLUSTER_FS_URI, clusterFs);\n       globalTokens.put(ServiceApiConstants.CLUSTER_FS_HOST,\n           URI.create(clusterFs).getHost());\n     }\n     globalTokens.put(SERVICE_HDFS_DIR, context.serviceHdfsDir);\n     // service name\n     globalTokens.put(SERVICE_NAME_LC, app.getName().toLowerCase());\n     globalTokens.put(SERVICE_NAME, app.getName());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initGlobalTokensForSubstitute(ServiceContext context) {\n    // ZK\n    globalTokens.put(ServiceApiConstants.CLUSTER_ZK_QUORUM, getConfig()\n        .getTrimmed(KEY_REGISTRY_ZK_QUORUM, DEFAULT_REGISTRY_ZK_QUORUM));\n    String user \u003d null;\n    try {\n      user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n    } catch (IOException e) {\n      LOG.error(\"Failed to get user.\", e);\n    }\n    globalTokens\n        .put(SERVICE_ZK_PATH, ServiceRegistryUtils.mkServiceHomePath(user, app.getName()));\n\n    globalTokens.put(ServiceApiConstants.USER, user);\n    String dnsDomain \u003d getConfig().getTrimmed(KEY_DNS_DOMAIN);\n    if (dnsDomain !\u003d null \u0026\u0026 !dnsDomain.isEmpty()) {\n      globalTokens.put(ServiceApiConstants.DOMAIN, dnsDomain);\n    }\n    // HDFS\n    String clusterFs \u003d getConfig().getTrimmed(FS_DEFAULT_NAME_KEY);\n    if (clusterFs !\u003d null \u0026\u0026 !clusterFs.isEmpty()) {\n      globalTokens.put(ServiceApiConstants.CLUSTER_FS_URI, clusterFs);\n      globalTokens.put(ServiceApiConstants.CLUSTER_FS_HOST,\n          URI.create(clusterFs).getHost());\n    }\n    globalTokens.put(SERVICE_HDFS_DIR, context.serviceHdfsDir);\n    // service name\n    globalTokens.put(SERVICE_NAME_LC, app.getName().toLowerCase());\n    globalTokens.put(SERVICE_NAME, app.getName());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
      "extendedDetails": {}
    },
    "40ab068eabe50875449d601471619a4e82fff86d": {
      "type": "Yfilerename",
      "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
      "commitAuthorOld": "Gour Saha",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void initGlobalTokensForSubstitute(ServiceContext context) {\n    // ZK\n    globalTokens.put(ServiceApiConstants.CLUSTER_ZK_QUORUM, getConfig()\n        .getTrimmed(KEY_REGISTRY_ZK_QUORUM, DEFAULT_REGISTRY_ZK_QUORUM));\n    String user \u003d null;\n    try {\n      user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n    } catch (IOException e) {\n      LOG.error(\"Failed to get user.\", e);\n    }\n    globalTokens\n        .put(SERVICE_ZK_PATH, ServiceRegistryUtils.mkClusterPath(user, app.getName()));\n\n    globalTokens.put(ServiceApiConstants.USER, user);\n    String dnsDomain \u003d getConfig().getTrimmed(KEY_DNS_DOMAIN);\n    if (dnsDomain !\u003d null \u0026\u0026 !dnsDomain.isEmpty()) {\n      globalTokens.put(ServiceApiConstants.DOMAIN, dnsDomain);\n    }\n    // HDFS\n    String clusterFs \u003d getConfig().getTrimmed(FS_DEFAULT_NAME_KEY);\n    if (clusterFs !\u003d null \u0026\u0026 !clusterFs.isEmpty()) {\n      globalTokens.put(ServiceApiConstants.CLUSTER_FS_URI, clusterFs);\n      globalTokens.put(ServiceApiConstants.CLUSTER_FS_HOST,\n          URI.create(clusterFs).getHost());\n    }\n    globalTokens.put(SERVICE_HDFS_DIR, context.serviceHdfsDir);\n    // service name\n    globalTokens.put(SERVICE_NAME_LC, app.getName().toLowerCase());\n    globalTokens.put(SERVICE_NAME, app.getName());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java"
      }
    },
    "2191f5b533c6b4763f5d443d21127f1f8552ce64": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7050. Post cleanup after YARN-6903, removal of org.apache.slider package. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "2191f5b533c6b4763f5d443d21127f1f8552ce64",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "79bf5c084d4a063f1a933cae498af23edfd46792",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   private void initGlobalTokensForSubstitute(ServiceContext context) {\n     // ZK\n     globalTokens.put(ServiceApiConstants.CLUSTER_ZK_QUORUM, getConfig()\n         .getTrimmed(KEY_REGISTRY_ZK_QUORUM, DEFAULT_REGISTRY_ZK_QUORUM));\n     String user \u003d null;\n     try {\n       user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n     } catch (IOException e) {\n       LOG.error(\"Failed to get user.\", e);\n     }\n     globalTokens\n-        .put(SERVICE_ZK_PATH, ZKIntegration.mkClusterPath(user, app.getName()));\n+        .put(SERVICE_ZK_PATH, ServiceRegistryUtils.mkClusterPath(user, app.getName()));\n \n     globalTokens.put(ServiceApiConstants.USER, user);\n     String dnsDomain \u003d getConfig().getTrimmed(KEY_DNS_DOMAIN);\n     if (dnsDomain !\u003d null \u0026\u0026 !dnsDomain.isEmpty()) {\n       globalTokens.put(ServiceApiConstants.DOMAIN, dnsDomain);\n     }\n     // HDFS\n     String clusterFs \u003d getConfig().getTrimmed(FS_DEFAULT_NAME_KEY);\n     if (clusterFs !\u003d null \u0026\u0026 !clusterFs.isEmpty()) {\n       globalTokens.put(ServiceApiConstants.CLUSTER_FS_URI, clusterFs);\n       globalTokens.put(ServiceApiConstants.CLUSTER_FS_HOST,\n           URI.create(clusterFs).getHost());\n     }\n     globalTokens.put(SERVICE_HDFS_DIR, context.serviceHdfsDir);\n     // service name\n     globalTokens.put(SERVICE_NAME_LC, app.getName().toLowerCase());\n     globalTokens.put(SERVICE_NAME, app.getName());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initGlobalTokensForSubstitute(ServiceContext context) {\n    // ZK\n    globalTokens.put(ServiceApiConstants.CLUSTER_ZK_QUORUM, getConfig()\n        .getTrimmed(KEY_REGISTRY_ZK_QUORUM, DEFAULT_REGISTRY_ZK_QUORUM));\n    String user \u003d null;\n    try {\n      user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n    } catch (IOException e) {\n      LOG.error(\"Failed to get user.\", e);\n    }\n    globalTokens\n        .put(SERVICE_ZK_PATH, ServiceRegistryUtils.mkClusterPath(user, app.getName()));\n\n    globalTokens.put(ServiceApiConstants.USER, user);\n    String dnsDomain \u003d getConfig().getTrimmed(KEY_DNS_DOMAIN);\n    if (dnsDomain !\u003d null \u0026\u0026 !dnsDomain.isEmpty()) {\n      globalTokens.put(ServiceApiConstants.DOMAIN, dnsDomain);\n    }\n    // HDFS\n    String clusterFs \u003d getConfig().getTrimmed(FS_DEFAULT_NAME_KEY);\n    if (clusterFs !\u003d null \u0026\u0026 !clusterFs.isEmpty()) {\n      globalTokens.put(ServiceApiConstants.CLUSTER_FS_URI, clusterFs);\n      globalTokens.put(ServiceApiConstants.CLUSTER_FS_HOST,\n          URI.create(clusterFs).getHost());\n    }\n    globalTokens.put(SERVICE_HDFS_DIR, context.serviceHdfsDir);\n    // service name\n    globalTokens.put(SERVICE_NAME_LC, app.getName().toLowerCase());\n    globalTokens.put(SERVICE_NAME, app.getName());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
      "extendedDetails": {}
    },
    "1888318c89776f0bf354c1b13e3ee169e14ff638": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
      "commitAuthor": "Billie Rinaldi",
      "diff": "@@ -0,0 +1,30 @@\n+  private void initGlobalTokensForSubstitute(ServiceContext context) {\n+    // ZK\n+    globalTokens.put(ServiceApiConstants.CLUSTER_ZK_QUORUM, getConfig()\n+        .getTrimmed(KEY_REGISTRY_ZK_QUORUM, DEFAULT_REGISTRY_ZK_QUORUM));\n+    String user \u003d null;\n+    try {\n+      user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n+    } catch (IOException e) {\n+      LOG.error(\"Failed to get user.\", e);\n+    }\n+    globalTokens\n+        .put(SERVICE_ZK_PATH, ZKIntegration.mkClusterPath(user, app.getName()));\n+\n+    globalTokens.put(ServiceApiConstants.USER, user);\n+    String dnsDomain \u003d getConfig().getTrimmed(KEY_DNS_DOMAIN);\n+    if (dnsDomain !\u003d null \u0026\u0026 !dnsDomain.isEmpty()) {\n+      globalTokens.put(ServiceApiConstants.DOMAIN, dnsDomain);\n+    }\n+    // HDFS\n+    String clusterFs \u003d getConfig().getTrimmed(FS_DEFAULT_NAME_KEY);\n+    if (clusterFs !\u003d null \u0026\u0026 !clusterFs.isEmpty()) {\n+      globalTokens.put(ServiceApiConstants.CLUSTER_FS_URI, clusterFs);\n+      globalTokens.put(ServiceApiConstants.CLUSTER_FS_HOST,\n+          URI.create(clusterFs).getHost());\n+    }\n+    globalTokens.put(SERVICE_HDFS_DIR, context.serviceHdfsDir);\n+    // service name\n+    globalTokens.put(SERVICE_NAME_LC, app.getName().toLowerCase());\n+    globalTokens.put(SERVICE_NAME, app.getName());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void initGlobalTokensForSubstitute(ServiceContext context) {\n    // ZK\n    globalTokens.put(ServiceApiConstants.CLUSTER_ZK_QUORUM, getConfig()\n        .getTrimmed(KEY_REGISTRY_ZK_QUORUM, DEFAULT_REGISTRY_ZK_QUORUM));\n    String user \u003d null;\n    try {\n      user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n    } catch (IOException e) {\n      LOG.error(\"Failed to get user.\", e);\n    }\n    globalTokens\n        .put(SERVICE_ZK_PATH, ZKIntegration.mkClusterPath(user, app.getName()));\n\n    globalTokens.put(ServiceApiConstants.USER, user);\n    String dnsDomain \u003d getConfig().getTrimmed(KEY_DNS_DOMAIN);\n    if (dnsDomain !\u003d null \u0026\u0026 !dnsDomain.isEmpty()) {\n      globalTokens.put(ServiceApiConstants.DOMAIN, dnsDomain);\n    }\n    // HDFS\n    String clusterFs \u003d getConfig().getTrimmed(FS_DEFAULT_NAME_KEY);\n    if (clusterFs !\u003d null \u0026\u0026 !clusterFs.isEmpty()) {\n      globalTokens.put(ServiceApiConstants.CLUSTER_FS_URI, clusterFs);\n      globalTokens.put(ServiceApiConstants.CLUSTER_FS_HOST,\n          URI.create(clusterFs).getHost());\n    }\n    globalTokens.put(SERVICE_HDFS_DIR, context.serviceHdfsDir);\n    // service name\n    globalTokens.put(SERVICE_NAME_LC, app.getName().toLowerCase());\n    globalTokens.put(SERVICE_NAME, app.getName());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java"
    }
  }
}