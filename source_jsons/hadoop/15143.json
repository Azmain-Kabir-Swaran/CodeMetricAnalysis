{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSImageLoader.java",
  "functionName": "load",
  "functionId": "load___inputFile-String",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/FSImageLoader.java",
  "functionStartLine": 111,
  "functionEndLine": 184,
  "numCommitsSeen": 22,
  "timeTaken": 2755,
  "changeHistory": [
    "177131793a88960b734038f6e646476d568c3626",
    "b60ca37914b22550e3630fa02742d40697decb31",
    "ed72daa5df97669906234e8ac9a406d78136b206",
    "b9f6d0c956f0278c8b9b83e05b523a442a730ebb",
    "1f5b42ac4881b734c799bfb527884c0d117929bd",
    "8af07085802b049a7405fcef2550a34c95470700",
    "54c1daa580e1cceee541be86fc2b694fa1be26df"
  ],
  "changeHistoryShort": {
    "177131793a88960b734038f6e646476d568c3626": "Ybodychange",
    "b60ca37914b22550e3630fa02742d40697decb31": "Ybodychange",
    "ed72daa5df97669906234e8ac9a406d78136b206": "Ybodychange",
    "b9f6d0c956f0278c8b9b83e05b523a442a730ebb": "Ybodychange",
    "1f5b42ac4881b734c799bfb527884c0d117929bd": "Ybodychange",
    "8af07085802b049a7405fcef2550a34c95470700": "Ymodifierchange",
    "54c1daa580e1cceee541be86fc2b694fa1be26df": "Yintroduced"
  },
  "changeHistoryDetails": {
    "177131793a88960b734038f6e646476d568c3626": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14172. Avoid NPE when SectionName#fromString returns null. Contributed by Xiang Li.\n",
      "commitDate": "08/02/19 4:51 AM",
      "commitName": "177131793a88960b734038f6e646476d568c3626",
      "commitAuthor": "Yiqun Lin",
      "commitDateOld": "15/10/18 3:18 AM",
      "commitNameOld": "b60ca37914b22550e3630fa02742d40697decb31",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 116.11,
      "commitsBetweenForRepo": 828,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,74 @@\n   static FSImageLoader load(String inputFile) throws IOException {\n     Configuration conf \u003d new Configuration();\n     RandomAccessFile file \u003d new RandomAccessFile(inputFile, \"r\");\n     if (!FSImageUtil.checkFileFormat(file)) {\n       throw new IOException(\"Unrecognized FSImage\");\n     }\n \n     FsImageProto.FileSummary summary \u003d FSImageUtil.loadSummary(file);\n \n \n     try (FileInputStream fin \u003d new FileInputStream(file.getFD())) {\n       // Map to record INodeReference to the referred id\n       ImmutableList\u003cLong\u003e refIdList \u003d null;\n       SerialNumberManager.StringTable stringTable \u003d null;\n       byte[][] inodes \u003d null;\n       Map\u003cLong, long[]\u003e dirmap \u003d null;\n \n       ArrayList\u003cFsImageProto.FileSummary.Section\u003e sections \u003d\n           Lists.newArrayList(summary.getSectionsList());\n       Collections.sort(sections,\n           new Comparator\u003cFsImageProto.FileSummary.Section\u003e() {\n             @Override\n             public int compare(FsImageProto.FileSummary.Section s1,\n                                FsImageProto.FileSummary.Section s2) {\n               FSImageFormatProtobuf.SectionName n1 \u003d\n                   FSImageFormatProtobuf.SectionName.fromString(s1.getName());\n               FSImageFormatProtobuf.SectionName n2 \u003d\n                   FSImageFormatProtobuf.SectionName.fromString(s2.getName());\n               if (n1 \u003d\u003d null) {\n                 return n2 \u003d\u003d null ? 0 : -1;\n               } else if (n2 \u003d\u003d null) {\n                 return -1;\n               } else {\n                 return n1.ordinal() - n2.ordinal();\n               }\n             }\n           });\n \n       for (FsImageProto.FileSummary.Section s : sections) {\n         fin.getChannel().position(s.getOffset());\n         InputStream is \u003d FSImageUtil.wrapInputStreamForCompression(conf,\n             summary.getCodec(), new BufferedInputStream(new LimitInputStream(\n             fin, s.getLength())));\n \n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Loading section \" + s.getName() + \" length: \" + s.getLength\n               ());\n         }\n-        switch (FSImageFormatProtobuf.SectionName.fromString(s.getName())) {\n+\n+        FSImageFormatProtobuf.SectionName sectionName\n+            \u003d FSImageFormatProtobuf.SectionName.fromString(s.getName());\n+        if (sectionName \u003d\u003d null) {\n+          throw new IOException(\"Unrecognized section \" + s.getName());\n+        }\n+        switch (sectionName) {\n           case STRING_TABLE:\n             stringTable \u003d loadStringTable(is);\n             break;\n           case INODE:\n             inodes \u003d loadINodeSection(is);\n             break;\n           case INODE_REFERENCE:\n             refIdList \u003d loadINodeReferenceSection(is);\n             break;\n           case INODE_DIR:\n             dirmap \u003d loadINodeDirectorySection(is, refIdList);\n             break;\n           default:\n             break;\n         }\n       }\n       return new FSImageLoader(stringTable, inodes, dirmap);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static FSImageLoader load(String inputFile) throws IOException {\n    Configuration conf \u003d new Configuration();\n    RandomAccessFile file \u003d new RandomAccessFile(inputFile, \"r\");\n    if (!FSImageUtil.checkFileFormat(file)) {\n      throw new IOException(\"Unrecognized FSImage\");\n    }\n\n    FsImageProto.FileSummary summary \u003d FSImageUtil.loadSummary(file);\n\n\n    try (FileInputStream fin \u003d new FileInputStream(file.getFD())) {\n      // Map to record INodeReference to the referred id\n      ImmutableList\u003cLong\u003e refIdList \u003d null;\n      SerialNumberManager.StringTable stringTable \u003d null;\n      byte[][] inodes \u003d null;\n      Map\u003cLong, long[]\u003e dirmap \u003d null;\n\n      ArrayList\u003cFsImageProto.FileSummary.Section\u003e sections \u003d\n          Lists.newArrayList(summary.getSectionsList());\n      Collections.sort(sections,\n          new Comparator\u003cFsImageProto.FileSummary.Section\u003e() {\n            @Override\n            public int compare(FsImageProto.FileSummary.Section s1,\n                               FsImageProto.FileSummary.Section s2) {\n              FSImageFormatProtobuf.SectionName n1 \u003d\n                  FSImageFormatProtobuf.SectionName.fromString(s1.getName());\n              FSImageFormatProtobuf.SectionName n2 \u003d\n                  FSImageFormatProtobuf.SectionName.fromString(s2.getName());\n              if (n1 \u003d\u003d null) {\n                return n2 \u003d\u003d null ? 0 : -1;\n              } else if (n2 \u003d\u003d null) {\n                return -1;\n              } else {\n                return n1.ordinal() - n2.ordinal();\n              }\n            }\n          });\n\n      for (FsImageProto.FileSummary.Section s : sections) {\n        fin.getChannel().position(s.getOffset());\n        InputStream is \u003d FSImageUtil.wrapInputStreamForCompression(conf,\n            summary.getCodec(), new BufferedInputStream(new LimitInputStream(\n            fin, s.getLength())));\n\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Loading section \" + s.getName() + \" length: \" + s.getLength\n              ());\n        }\n\n        FSImageFormatProtobuf.SectionName sectionName\n            \u003d FSImageFormatProtobuf.SectionName.fromString(s.getName());\n        if (sectionName \u003d\u003d null) {\n          throw new IOException(\"Unrecognized section \" + s.getName());\n        }\n        switch (sectionName) {\n          case STRING_TABLE:\n            stringTable \u003d loadStringTable(is);\n            break;\n          case INODE:\n            inodes \u003d loadINodeSection(is);\n            break;\n          case INODE_REFERENCE:\n            refIdList \u003d loadINodeReferenceSection(is);\n            break;\n          case INODE_DIR:\n            dirmap \u003d loadINodeDirectorySection(is, refIdList);\n            break;\n          default:\n            break;\n        }\n      }\n      return new FSImageLoader(stringTable, inodes, dirmap);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/FSImageLoader.java",
      "extendedDetails": {}
    },
    "b60ca37914b22550e3630fa02742d40697decb31": {
      "type": "Ybodychange",
      "commitMessage": "Fix potential FSImage corruption. Contributed by Daryn Sharp.\n",
      "commitDate": "15/10/18 3:18 AM",
      "commitName": "b60ca37914b22550e3630fa02742d40697decb31",
      "commitAuthor": "Vinayakumar B",
      "commitDateOld": "06/09/18 2:48 PM",
      "commitNameOld": "eca1a4bfe952fc184fe90dde50bac9b0e5293568",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 38.52,
      "commitsBetweenForRepo": 414,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,68 @@\n   static FSImageLoader load(String inputFile) throws IOException {\n     Configuration conf \u003d new Configuration();\n     RandomAccessFile file \u003d new RandomAccessFile(inputFile, \"r\");\n     if (!FSImageUtil.checkFileFormat(file)) {\n       throw new IOException(\"Unrecognized FSImage\");\n     }\n \n     FsImageProto.FileSummary summary \u003d FSImageUtil.loadSummary(file);\n \n \n     try (FileInputStream fin \u003d new FileInputStream(file.getFD())) {\n       // Map to record INodeReference to the referred id\n       ImmutableList\u003cLong\u003e refIdList \u003d null;\n-      String[] stringTable \u003d null;\n+      SerialNumberManager.StringTable stringTable \u003d null;\n       byte[][] inodes \u003d null;\n       Map\u003cLong, long[]\u003e dirmap \u003d null;\n \n       ArrayList\u003cFsImageProto.FileSummary.Section\u003e sections \u003d\n           Lists.newArrayList(summary.getSectionsList());\n       Collections.sort(sections,\n           new Comparator\u003cFsImageProto.FileSummary.Section\u003e() {\n             @Override\n             public int compare(FsImageProto.FileSummary.Section s1,\n                                FsImageProto.FileSummary.Section s2) {\n               FSImageFormatProtobuf.SectionName n1 \u003d\n                   FSImageFormatProtobuf.SectionName.fromString(s1.getName());\n               FSImageFormatProtobuf.SectionName n2 \u003d\n                   FSImageFormatProtobuf.SectionName.fromString(s2.getName());\n               if (n1 \u003d\u003d null) {\n                 return n2 \u003d\u003d null ? 0 : -1;\n               } else if (n2 \u003d\u003d null) {\n                 return -1;\n               } else {\n                 return n1.ordinal() - n2.ordinal();\n               }\n             }\n           });\n \n       for (FsImageProto.FileSummary.Section s : sections) {\n         fin.getChannel().position(s.getOffset());\n         InputStream is \u003d FSImageUtil.wrapInputStreamForCompression(conf,\n             summary.getCodec(), new BufferedInputStream(new LimitInputStream(\n             fin, s.getLength())));\n \n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Loading section \" + s.getName() + \" length: \" + s.getLength\n               ());\n         }\n         switch (FSImageFormatProtobuf.SectionName.fromString(s.getName())) {\n           case STRING_TABLE:\n             stringTable \u003d loadStringTable(is);\n             break;\n           case INODE:\n             inodes \u003d loadINodeSection(is);\n             break;\n           case INODE_REFERENCE:\n             refIdList \u003d loadINodeReferenceSection(is);\n             break;\n           case INODE_DIR:\n             dirmap \u003d loadINodeDirectorySection(is, refIdList);\n             break;\n           default:\n             break;\n         }\n       }\n       return new FSImageLoader(stringTable, inodes, dirmap);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static FSImageLoader load(String inputFile) throws IOException {\n    Configuration conf \u003d new Configuration();\n    RandomAccessFile file \u003d new RandomAccessFile(inputFile, \"r\");\n    if (!FSImageUtil.checkFileFormat(file)) {\n      throw new IOException(\"Unrecognized FSImage\");\n    }\n\n    FsImageProto.FileSummary summary \u003d FSImageUtil.loadSummary(file);\n\n\n    try (FileInputStream fin \u003d new FileInputStream(file.getFD())) {\n      // Map to record INodeReference to the referred id\n      ImmutableList\u003cLong\u003e refIdList \u003d null;\n      SerialNumberManager.StringTable stringTable \u003d null;\n      byte[][] inodes \u003d null;\n      Map\u003cLong, long[]\u003e dirmap \u003d null;\n\n      ArrayList\u003cFsImageProto.FileSummary.Section\u003e sections \u003d\n          Lists.newArrayList(summary.getSectionsList());\n      Collections.sort(sections,\n          new Comparator\u003cFsImageProto.FileSummary.Section\u003e() {\n            @Override\n            public int compare(FsImageProto.FileSummary.Section s1,\n                               FsImageProto.FileSummary.Section s2) {\n              FSImageFormatProtobuf.SectionName n1 \u003d\n                  FSImageFormatProtobuf.SectionName.fromString(s1.getName());\n              FSImageFormatProtobuf.SectionName n2 \u003d\n                  FSImageFormatProtobuf.SectionName.fromString(s2.getName());\n              if (n1 \u003d\u003d null) {\n                return n2 \u003d\u003d null ? 0 : -1;\n              } else if (n2 \u003d\u003d null) {\n                return -1;\n              } else {\n                return n1.ordinal() - n2.ordinal();\n              }\n            }\n          });\n\n      for (FsImageProto.FileSummary.Section s : sections) {\n        fin.getChannel().position(s.getOffset());\n        InputStream is \u003d FSImageUtil.wrapInputStreamForCompression(conf,\n            summary.getCodec(), new BufferedInputStream(new LimitInputStream(\n            fin, s.getLength())));\n\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Loading section \" + s.getName() + \" length: \" + s.getLength\n              ());\n        }\n        switch (FSImageFormatProtobuf.SectionName.fromString(s.getName())) {\n          case STRING_TABLE:\n            stringTable \u003d loadStringTable(is);\n            break;\n          case INODE:\n            inodes \u003d loadINodeSection(is);\n            break;\n          case INODE_REFERENCE:\n            refIdList \u003d loadINodeReferenceSection(is);\n            break;\n          case INODE_DIR:\n            dirmap \u003d loadINodeDirectorySection(is, refIdList);\n            break;\n          default:\n            break;\n        }\n      }\n      return new FSImageLoader(stringTable, inodes, dirmap);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/FSImageLoader.java",
      "extendedDetails": {}
    },
    "ed72daa5df97669906234e8ac9a406d78136b206": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7978. Add LOG.isDebugEnabled() guard for some LOG.debug(..). Contributed by Walter Su.\n",
      "commitDate": "01/04/15 12:54 PM",
      "commitName": "ed72daa5df97669906234e8ac9a406d78136b206",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "28/01/15 12:36 PM",
      "commitNameOld": "caf7298e49f646a40023af999f62d61846fde5e2",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 62.97,
      "commitsBetweenForRepo": 604,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,68 @@\n   static FSImageLoader load(String inputFile) throws IOException {\n     Configuration conf \u003d new Configuration();\n     RandomAccessFile file \u003d new RandomAccessFile(inputFile, \"r\");\n     if (!FSImageUtil.checkFileFormat(file)) {\n       throw new IOException(\"Unrecognized FSImage\");\n     }\n \n     FsImageProto.FileSummary summary \u003d FSImageUtil.loadSummary(file);\n \n \n     try (FileInputStream fin \u003d new FileInputStream(file.getFD())) {\n       // Map to record INodeReference to the referred id\n       ImmutableList\u003cLong\u003e refIdList \u003d null;\n       String[] stringTable \u003d null;\n       byte[][] inodes \u003d null;\n       Map\u003cLong, long[]\u003e dirmap \u003d null;\n \n       ArrayList\u003cFsImageProto.FileSummary.Section\u003e sections \u003d\n           Lists.newArrayList(summary.getSectionsList());\n       Collections.sort(sections,\n           new Comparator\u003cFsImageProto.FileSummary.Section\u003e() {\n             @Override\n             public int compare(FsImageProto.FileSummary.Section s1,\n                                FsImageProto.FileSummary.Section s2) {\n               FSImageFormatProtobuf.SectionName n1 \u003d\n                   FSImageFormatProtobuf.SectionName.fromString(s1.getName());\n               FSImageFormatProtobuf.SectionName n2 \u003d\n                   FSImageFormatProtobuf.SectionName.fromString(s2.getName());\n               if (n1 \u003d\u003d null) {\n                 return n2 \u003d\u003d null ? 0 : -1;\n               } else if (n2 \u003d\u003d null) {\n                 return -1;\n               } else {\n                 return n1.ordinal() - n2.ordinal();\n               }\n             }\n           });\n \n       for (FsImageProto.FileSummary.Section s : sections) {\n         fin.getChannel().position(s.getOffset());\n         InputStream is \u003d FSImageUtil.wrapInputStreamForCompression(conf,\n             summary.getCodec(), new BufferedInputStream(new LimitInputStream(\n             fin, s.getLength())));\n \n-        LOG.debug(\"Loading section \" + s.getName() + \" length: \" + s.getLength\n-                ());\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Loading section \" + s.getName() + \" length: \" + s.getLength\n+              ());\n+        }\n         switch (FSImageFormatProtobuf.SectionName.fromString(s.getName())) {\n           case STRING_TABLE:\n             stringTable \u003d loadStringTable(is);\n             break;\n           case INODE:\n             inodes \u003d loadINodeSection(is);\n             break;\n           case INODE_REFERENCE:\n             refIdList \u003d loadINodeReferenceSection(is);\n             break;\n           case INODE_DIR:\n             dirmap \u003d loadINodeDirectorySection(is, refIdList);\n             break;\n           default:\n             break;\n         }\n       }\n       return new FSImageLoader(stringTable, inodes, dirmap);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static FSImageLoader load(String inputFile) throws IOException {\n    Configuration conf \u003d new Configuration();\n    RandomAccessFile file \u003d new RandomAccessFile(inputFile, \"r\");\n    if (!FSImageUtil.checkFileFormat(file)) {\n      throw new IOException(\"Unrecognized FSImage\");\n    }\n\n    FsImageProto.FileSummary summary \u003d FSImageUtil.loadSummary(file);\n\n\n    try (FileInputStream fin \u003d new FileInputStream(file.getFD())) {\n      // Map to record INodeReference to the referred id\n      ImmutableList\u003cLong\u003e refIdList \u003d null;\n      String[] stringTable \u003d null;\n      byte[][] inodes \u003d null;\n      Map\u003cLong, long[]\u003e dirmap \u003d null;\n\n      ArrayList\u003cFsImageProto.FileSummary.Section\u003e sections \u003d\n          Lists.newArrayList(summary.getSectionsList());\n      Collections.sort(sections,\n          new Comparator\u003cFsImageProto.FileSummary.Section\u003e() {\n            @Override\n            public int compare(FsImageProto.FileSummary.Section s1,\n                               FsImageProto.FileSummary.Section s2) {\n              FSImageFormatProtobuf.SectionName n1 \u003d\n                  FSImageFormatProtobuf.SectionName.fromString(s1.getName());\n              FSImageFormatProtobuf.SectionName n2 \u003d\n                  FSImageFormatProtobuf.SectionName.fromString(s2.getName());\n              if (n1 \u003d\u003d null) {\n                return n2 \u003d\u003d null ? 0 : -1;\n              } else if (n2 \u003d\u003d null) {\n                return -1;\n              } else {\n                return n1.ordinal() - n2.ordinal();\n              }\n            }\n          });\n\n      for (FsImageProto.FileSummary.Section s : sections) {\n        fin.getChannel().position(s.getOffset());\n        InputStream is \u003d FSImageUtil.wrapInputStreamForCompression(conf,\n            summary.getCodec(), new BufferedInputStream(new LimitInputStream(\n            fin, s.getLength())));\n\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Loading section \" + s.getName() + \" length: \" + s.getLength\n              ());\n        }\n        switch (FSImageFormatProtobuf.SectionName.fromString(s.getName())) {\n          case STRING_TABLE:\n            stringTable \u003d loadStringTable(is);\n            break;\n          case INODE:\n            inodes \u003d loadINodeSection(is);\n            break;\n          case INODE_REFERENCE:\n            refIdList \u003d loadINodeReferenceSection(is);\n            break;\n          case INODE_DIR:\n            dirmap \u003d loadINodeDirectorySection(is, refIdList);\n            break;\n          default:\n            break;\n        }\n      }\n      return new FSImageLoader(stringTable, inodes, dirmap);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/FSImageLoader.java",
      "extendedDetails": {}
    },
    "b9f6d0c956f0278c8b9b83e05b523a442a730ebb": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7515. Fix new findbugs warnings in hadoop-hdfs. Contributed by Haohui Mai.\n",
      "commitDate": "11/12/14 12:36 PM",
      "commitName": "b9f6d0c956f0278c8b9b83e05b523a442a730ebb",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "08/12/14 10:23 AM",
      "commitNameOld": "ffe942b82c1208bc7b22899da3a233944cb5ab52",
      "commitAuthorOld": "cnauroth",
      "daysBetweenCommits": 3.09,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,70 +1,66 @@\n   static FSImageLoader load(String inputFile) throws IOException {\n     Configuration conf \u003d new Configuration();\n     RandomAccessFile file \u003d new RandomAccessFile(inputFile, \"r\");\n     if (!FSImageUtil.checkFileFormat(file)) {\n       throw new IOException(\"Unrecognized FSImage\");\n     }\n \n     FsImageProto.FileSummary summary \u003d FSImageUtil.loadSummary(file);\n-    FileInputStream fin \u003d null;\n \n-    try {\n+\n+    try (FileInputStream fin \u003d new FileInputStream(file.getFD())) {\n       // Map to record INodeReference to the referred id\n       ImmutableList\u003cLong\u003e refIdList \u003d null;\n       String[] stringTable \u003d null;\n       byte[][] inodes \u003d null;\n       Map\u003cLong, long[]\u003e dirmap \u003d null;\n \n-      fin \u003d new FileInputStream(file.getFD());\n-\n       ArrayList\u003cFsImageProto.FileSummary.Section\u003e sections \u003d\n           Lists.newArrayList(summary.getSectionsList());\n       Collections.sort(sections,\n           new Comparator\u003cFsImageProto.FileSummary.Section\u003e() {\n             @Override\n             public int compare(FsImageProto.FileSummary.Section s1,\n                                FsImageProto.FileSummary.Section s2) {\n               FSImageFormatProtobuf.SectionName n1 \u003d\n                   FSImageFormatProtobuf.SectionName.fromString(s1.getName());\n               FSImageFormatProtobuf.SectionName n2 \u003d\n                   FSImageFormatProtobuf.SectionName.fromString(s2.getName());\n               if (n1 \u003d\u003d null) {\n                 return n2 \u003d\u003d null ? 0 : -1;\n               } else if (n2 \u003d\u003d null) {\n                 return -1;\n               } else {\n                 return n1.ordinal() - n2.ordinal();\n               }\n             }\n           });\n \n       for (FsImageProto.FileSummary.Section s : sections) {\n         fin.getChannel().position(s.getOffset());\n         InputStream is \u003d FSImageUtil.wrapInputStreamForCompression(conf,\n             summary.getCodec(), new BufferedInputStream(new LimitInputStream(\n             fin, s.getLength())));\n \n         LOG.debug(\"Loading section \" + s.getName() + \" length: \" + s.getLength\n                 ());\n         switch (FSImageFormatProtobuf.SectionName.fromString(s.getName())) {\n           case STRING_TABLE:\n             stringTable \u003d loadStringTable(is);\n             break;\n           case INODE:\n             inodes \u003d loadINodeSection(is);\n             break;\n           case INODE_REFERENCE:\n             refIdList \u003d loadINodeReferenceSection(is);\n             break;\n           case INODE_DIR:\n             dirmap \u003d loadINodeDirectorySection(is, refIdList);\n             break;\n           default:\n             break;\n         }\n       }\n       return new FSImageLoader(stringTable, inodes, dirmap);\n-    } finally {\n-      IOUtils.cleanup(null, fin);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static FSImageLoader load(String inputFile) throws IOException {\n    Configuration conf \u003d new Configuration();\n    RandomAccessFile file \u003d new RandomAccessFile(inputFile, \"r\");\n    if (!FSImageUtil.checkFileFormat(file)) {\n      throw new IOException(\"Unrecognized FSImage\");\n    }\n\n    FsImageProto.FileSummary summary \u003d FSImageUtil.loadSummary(file);\n\n\n    try (FileInputStream fin \u003d new FileInputStream(file.getFD())) {\n      // Map to record INodeReference to the referred id\n      ImmutableList\u003cLong\u003e refIdList \u003d null;\n      String[] stringTable \u003d null;\n      byte[][] inodes \u003d null;\n      Map\u003cLong, long[]\u003e dirmap \u003d null;\n\n      ArrayList\u003cFsImageProto.FileSummary.Section\u003e sections \u003d\n          Lists.newArrayList(summary.getSectionsList());\n      Collections.sort(sections,\n          new Comparator\u003cFsImageProto.FileSummary.Section\u003e() {\n            @Override\n            public int compare(FsImageProto.FileSummary.Section s1,\n                               FsImageProto.FileSummary.Section s2) {\n              FSImageFormatProtobuf.SectionName n1 \u003d\n                  FSImageFormatProtobuf.SectionName.fromString(s1.getName());\n              FSImageFormatProtobuf.SectionName n2 \u003d\n                  FSImageFormatProtobuf.SectionName.fromString(s2.getName());\n              if (n1 \u003d\u003d null) {\n                return n2 \u003d\u003d null ? 0 : -1;\n              } else if (n2 \u003d\u003d null) {\n                return -1;\n              } else {\n                return n1.ordinal() - n2.ordinal();\n              }\n            }\n          });\n\n      for (FsImageProto.FileSummary.Section s : sections) {\n        fin.getChannel().position(s.getOffset());\n        InputStream is \u003d FSImageUtil.wrapInputStreamForCompression(conf,\n            summary.getCodec(), new BufferedInputStream(new LimitInputStream(\n            fin, s.getLength())));\n\n        LOG.debug(\"Loading section \" + s.getName() + \" length: \" + s.getLength\n                ());\n        switch (FSImageFormatProtobuf.SectionName.fromString(s.getName())) {\n          case STRING_TABLE:\n            stringTable \u003d loadStringTable(is);\n            break;\n          case INODE:\n            inodes \u003d loadINodeSection(is);\n            break;\n          case INODE_REFERENCE:\n            refIdList \u003d loadINodeReferenceSection(is);\n            break;\n          case INODE_DIR:\n            dirmap \u003d loadINodeDirectorySection(is, refIdList);\n            break;\n          default:\n            break;\n        }\n      }\n      return new FSImageLoader(stringTable, inodes, dirmap);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/FSImageLoader.java",
      "extendedDetails": {}
    },
    "1f5b42ac4881b734c799bfb527884c0d117929bd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7158. Reduce the memory usage of WebImageViewer. Contributed by Haohui Mai.\n",
      "commitDate": "01/10/14 10:53 AM",
      "commitName": "1f5b42ac4881b734c799bfb527884c0d117929bd",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "29/09/14 10:27 PM",
      "commitNameOld": "bb84f1fccb18c6c7373851e05d2451d55e908242",
      "commitAuthorOld": "arp",
      "daysBetweenCommits": 1.52,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,70 @@\n   static FSImageLoader load(String inputFile) throws IOException {\n     Configuration conf \u003d new Configuration();\n     RandomAccessFile file \u003d new RandomAccessFile(inputFile, \"r\");\n     if (!FSImageUtil.checkFileFormat(file)) {\n       throw new IOException(\"Unrecognized FSImage\");\n     }\n \n     FsImageProto.FileSummary summary \u003d FSImageUtil.loadSummary(file);\n     FileInputStream fin \u003d null;\n+\n     try {\n+      // Map to record INodeReference to the referred id\n+      ImmutableList\u003cLong\u003e refIdList \u003d null;\n+      String[] stringTable \u003d null;\n+      byte[][] inodes \u003d null;\n+      Map\u003cLong, long[]\u003e dirmap \u003d null;\n+\n       fin \u003d new FileInputStream(file.getFD());\n \n       ArrayList\u003cFsImageProto.FileSummary.Section\u003e sections \u003d\n           Lists.newArrayList(summary.getSectionsList());\n       Collections.sort(sections,\n           new Comparator\u003cFsImageProto.FileSummary.Section\u003e() {\n             @Override\n             public int compare(FsImageProto.FileSummary.Section s1,\n                                FsImageProto.FileSummary.Section s2) {\n               FSImageFormatProtobuf.SectionName n1 \u003d\n                   FSImageFormatProtobuf.SectionName.fromString(s1.getName());\n               FSImageFormatProtobuf.SectionName n2 \u003d\n                   FSImageFormatProtobuf.SectionName.fromString(s2.getName());\n               if (n1 \u003d\u003d null) {\n                 return n2 \u003d\u003d null ? 0 : -1;\n               } else if (n2 \u003d\u003d null) {\n                 return -1;\n               } else {\n                 return n1.ordinal() - n2.ordinal();\n               }\n             }\n           });\n \n       for (FsImageProto.FileSummary.Section s : sections) {\n         fin.getChannel().position(s.getOffset());\n         InputStream is \u003d FSImageUtil.wrapInputStreamForCompression(conf,\n             summary.getCodec(), new BufferedInputStream(new LimitInputStream(\n             fin, s.getLength())));\n \n+        LOG.debug(\"Loading section \" + s.getName() + \" length: \" + s.getLength\n+                ());\n         switch (FSImageFormatProtobuf.SectionName.fromString(s.getName())) {\n           case STRING_TABLE:\n-            loadStringTable(is);\n+            stringTable \u003d loadStringTable(is);\n             break;\n           case INODE:\n-            loadINodeSection(is);\n+            inodes \u003d loadINodeSection(is);\n             break;\n           case INODE_REFERENCE:\n-            loadINodeReferenceSection(is);\n+            refIdList \u003d loadINodeReferenceSection(is);\n             break;\n           case INODE_DIR:\n-            loadINodeDirectorySection(is);\n+            dirmap \u003d loadINodeDirectorySection(is, refIdList);\n             break;\n           default:\n             break;\n         }\n       }\n+      return new FSImageLoader(stringTable, inodes, dirmap);\n     } finally {\n       IOUtils.cleanup(null, fin);\n     }\n-    return new FSImageLoader();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static FSImageLoader load(String inputFile) throws IOException {\n    Configuration conf \u003d new Configuration();\n    RandomAccessFile file \u003d new RandomAccessFile(inputFile, \"r\");\n    if (!FSImageUtil.checkFileFormat(file)) {\n      throw new IOException(\"Unrecognized FSImage\");\n    }\n\n    FsImageProto.FileSummary summary \u003d FSImageUtil.loadSummary(file);\n    FileInputStream fin \u003d null;\n\n    try {\n      // Map to record INodeReference to the referred id\n      ImmutableList\u003cLong\u003e refIdList \u003d null;\n      String[] stringTable \u003d null;\n      byte[][] inodes \u003d null;\n      Map\u003cLong, long[]\u003e dirmap \u003d null;\n\n      fin \u003d new FileInputStream(file.getFD());\n\n      ArrayList\u003cFsImageProto.FileSummary.Section\u003e sections \u003d\n          Lists.newArrayList(summary.getSectionsList());\n      Collections.sort(sections,\n          new Comparator\u003cFsImageProto.FileSummary.Section\u003e() {\n            @Override\n            public int compare(FsImageProto.FileSummary.Section s1,\n                               FsImageProto.FileSummary.Section s2) {\n              FSImageFormatProtobuf.SectionName n1 \u003d\n                  FSImageFormatProtobuf.SectionName.fromString(s1.getName());\n              FSImageFormatProtobuf.SectionName n2 \u003d\n                  FSImageFormatProtobuf.SectionName.fromString(s2.getName());\n              if (n1 \u003d\u003d null) {\n                return n2 \u003d\u003d null ? 0 : -1;\n              } else if (n2 \u003d\u003d null) {\n                return -1;\n              } else {\n                return n1.ordinal() - n2.ordinal();\n              }\n            }\n          });\n\n      for (FsImageProto.FileSummary.Section s : sections) {\n        fin.getChannel().position(s.getOffset());\n        InputStream is \u003d FSImageUtil.wrapInputStreamForCompression(conf,\n            summary.getCodec(), new BufferedInputStream(new LimitInputStream(\n            fin, s.getLength())));\n\n        LOG.debug(\"Loading section \" + s.getName() + \" length: \" + s.getLength\n                ());\n        switch (FSImageFormatProtobuf.SectionName.fromString(s.getName())) {\n          case STRING_TABLE:\n            stringTable \u003d loadStringTable(is);\n            break;\n          case INODE:\n            inodes \u003d loadINodeSection(is);\n            break;\n          case INODE_REFERENCE:\n            refIdList \u003d loadINodeReferenceSection(is);\n            break;\n          case INODE_DIR:\n            dirmap \u003d loadINodeDirectorySection(is, refIdList);\n            break;\n          default:\n            break;\n        }\n      }\n      return new FSImageLoader(stringTable, inodes, dirmap);\n    } finally {\n      IOUtils.cleanup(null, fin);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/FSImageLoader.java",
      "extendedDetails": {}
    },
    "8af07085802b049a7405fcef2550a34c95470700": {
      "type": "Ymodifierchange",
      "commitMessage": "HDFS-6170. Support GETFILESTATUS operation in WebImageViewer. Contributed by Akira Ajisaka.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1586152 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/04/14 2:29 PM",
      "commitName": "8af07085802b049a7405fcef2550a34c95470700",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "08/04/14 11:14 AM",
      "commitNameOld": "7915b362256fe9b748746fe57d462e627f9749fb",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 1.14,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,61 @@\n-  public static FSImageLoader load(String inputFile) throws IOException {\n+  static FSImageLoader load(String inputFile) throws IOException {\n     Configuration conf \u003d new Configuration();\n     RandomAccessFile file \u003d new RandomAccessFile(inputFile, \"r\");\n     if (!FSImageUtil.checkFileFormat(file)) {\n       throw new IOException(\"Unrecognized FSImage\");\n     }\n \n     FsImageProto.FileSummary summary \u003d FSImageUtil.loadSummary(file);\n     FileInputStream fin \u003d null;\n     try {\n       fin \u003d new FileInputStream(file.getFD());\n \n       ArrayList\u003cFsImageProto.FileSummary.Section\u003e sections \u003d\n           Lists.newArrayList(summary.getSectionsList());\n       Collections.sort(sections,\n           new Comparator\u003cFsImageProto.FileSummary.Section\u003e() {\n             @Override\n             public int compare(FsImageProto.FileSummary.Section s1,\n                                FsImageProto.FileSummary.Section s2) {\n               FSImageFormatProtobuf.SectionName n1 \u003d\n                   FSImageFormatProtobuf.SectionName.fromString(s1.getName());\n               FSImageFormatProtobuf.SectionName n2 \u003d\n                   FSImageFormatProtobuf.SectionName.fromString(s2.getName());\n               if (n1 \u003d\u003d null) {\n                 return n2 \u003d\u003d null ? 0 : -1;\n               } else if (n2 \u003d\u003d null) {\n                 return -1;\n               } else {\n                 return n1.ordinal() - n2.ordinal();\n               }\n             }\n           });\n \n       for (FsImageProto.FileSummary.Section s : sections) {\n         fin.getChannel().position(s.getOffset());\n         InputStream is \u003d FSImageUtil.wrapInputStreamForCompression(conf,\n             summary.getCodec(), new BufferedInputStream(new LimitInputStream(\n             fin, s.getLength())));\n \n         switch (FSImageFormatProtobuf.SectionName.fromString(s.getName())) {\n           case STRING_TABLE:\n             loadStringTable(is);\n             break;\n           case INODE:\n             loadINodeSection(is);\n             break;\n           case INODE_REFERENCE:\n             loadINodeReferenceSection(is);\n             break;\n           case INODE_DIR:\n             loadINodeDirectorySection(is);\n             break;\n           default:\n             break;\n         }\n       }\n     } finally {\n       IOUtils.cleanup(null, fin);\n     }\n     return new FSImageLoader();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static FSImageLoader load(String inputFile) throws IOException {\n    Configuration conf \u003d new Configuration();\n    RandomAccessFile file \u003d new RandomAccessFile(inputFile, \"r\");\n    if (!FSImageUtil.checkFileFormat(file)) {\n      throw new IOException(\"Unrecognized FSImage\");\n    }\n\n    FsImageProto.FileSummary summary \u003d FSImageUtil.loadSummary(file);\n    FileInputStream fin \u003d null;\n    try {\n      fin \u003d new FileInputStream(file.getFD());\n\n      ArrayList\u003cFsImageProto.FileSummary.Section\u003e sections \u003d\n          Lists.newArrayList(summary.getSectionsList());\n      Collections.sort(sections,\n          new Comparator\u003cFsImageProto.FileSummary.Section\u003e() {\n            @Override\n            public int compare(FsImageProto.FileSummary.Section s1,\n                               FsImageProto.FileSummary.Section s2) {\n              FSImageFormatProtobuf.SectionName n1 \u003d\n                  FSImageFormatProtobuf.SectionName.fromString(s1.getName());\n              FSImageFormatProtobuf.SectionName n2 \u003d\n                  FSImageFormatProtobuf.SectionName.fromString(s2.getName());\n              if (n1 \u003d\u003d null) {\n                return n2 \u003d\u003d null ? 0 : -1;\n              } else if (n2 \u003d\u003d null) {\n                return -1;\n              } else {\n                return n1.ordinal() - n2.ordinal();\n              }\n            }\n          });\n\n      for (FsImageProto.FileSummary.Section s : sections) {\n        fin.getChannel().position(s.getOffset());\n        InputStream is \u003d FSImageUtil.wrapInputStreamForCompression(conf,\n            summary.getCodec(), new BufferedInputStream(new LimitInputStream(\n            fin, s.getLength())));\n\n        switch (FSImageFormatProtobuf.SectionName.fromString(s.getName())) {\n          case STRING_TABLE:\n            loadStringTable(is);\n            break;\n          case INODE:\n            loadINodeSection(is);\n            break;\n          case INODE_REFERENCE:\n            loadINodeReferenceSection(is);\n            break;\n          case INODE_DIR:\n            loadINodeDirectorySection(is);\n            break;\n          default:\n            break;\n        }\n      }\n    } finally {\n      IOUtils.cleanup(null, fin);\n    }\n    return new FSImageLoader();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/FSImageLoader.java",
      "extendedDetails": {
        "oldValue": "[public, static]",
        "newValue": "[static]"
      }
    },
    "54c1daa580e1cceee541be86fc2b694fa1be26df": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5978. Create a tool to take fsimage and expose read-only WebHDFS API. Contributed by Akira Ajisaka.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1582433 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/03/14 11:15 AM",
      "commitName": "54c1daa580e1cceee541be86fc2b694fa1be26df",
      "commitAuthor": "Haohui Mai",
      "diff": "@@ -0,0 +1,61 @@\n+  public static FSImageLoader load(String inputFile) throws IOException {\n+    Configuration conf \u003d new Configuration();\n+    RandomAccessFile file \u003d new RandomAccessFile(inputFile, \"r\");\n+    if (!FSImageUtil.checkFileFormat(file)) {\n+      throw new IOException(\"Unrecognized FSImage\");\n+    }\n+\n+    FsImageProto.FileSummary summary \u003d FSImageUtil.loadSummary(file);\n+    FileInputStream fin \u003d null;\n+    try {\n+      fin \u003d new FileInputStream(file.getFD());\n+\n+      ArrayList\u003cFsImageProto.FileSummary.Section\u003e sections \u003d\n+          Lists.newArrayList(summary.getSectionsList());\n+      Collections.sort(sections,\n+          new Comparator\u003cFsImageProto.FileSummary.Section\u003e() {\n+            @Override\n+            public int compare(FsImageProto.FileSummary.Section s1,\n+                               FsImageProto.FileSummary.Section s2) {\n+              FSImageFormatProtobuf.SectionName n1 \u003d\n+                  FSImageFormatProtobuf.SectionName.fromString(s1.getName());\n+              FSImageFormatProtobuf.SectionName n2 \u003d\n+                  FSImageFormatProtobuf.SectionName.fromString(s2.getName());\n+              if (n1 \u003d\u003d null) {\n+                return n2 \u003d\u003d null ? 0 : -1;\n+              } else if (n2 \u003d\u003d null) {\n+                return -1;\n+              } else {\n+                return n1.ordinal() - n2.ordinal();\n+              }\n+            }\n+          });\n+\n+      for (FsImageProto.FileSummary.Section s : sections) {\n+        fin.getChannel().position(s.getOffset());\n+        InputStream is \u003d FSImageUtil.wrapInputStreamForCompression(conf,\n+            summary.getCodec(), new BufferedInputStream(new LimitInputStream(\n+            fin, s.getLength())));\n+\n+        switch (FSImageFormatProtobuf.SectionName.fromString(s.getName())) {\n+          case STRING_TABLE:\n+            loadStringTable(is);\n+            break;\n+          case INODE:\n+            loadINodeSection(is);\n+            break;\n+          case INODE_REFERENCE:\n+            loadINodeReferenceSection(is);\n+            break;\n+          case INODE_DIR:\n+            loadINodeDirectorySection(is);\n+            break;\n+          default:\n+            break;\n+        }\n+      }\n+    } finally {\n+      IOUtils.cleanup(null, fin);\n+    }\n+    return new FSImageLoader();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static FSImageLoader load(String inputFile) throws IOException {\n    Configuration conf \u003d new Configuration();\n    RandomAccessFile file \u003d new RandomAccessFile(inputFile, \"r\");\n    if (!FSImageUtil.checkFileFormat(file)) {\n      throw new IOException(\"Unrecognized FSImage\");\n    }\n\n    FsImageProto.FileSummary summary \u003d FSImageUtil.loadSummary(file);\n    FileInputStream fin \u003d null;\n    try {\n      fin \u003d new FileInputStream(file.getFD());\n\n      ArrayList\u003cFsImageProto.FileSummary.Section\u003e sections \u003d\n          Lists.newArrayList(summary.getSectionsList());\n      Collections.sort(sections,\n          new Comparator\u003cFsImageProto.FileSummary.Section\u003e() {\n            @Override\n            public int compare(FsImageProto.FileSummary.Section s1,\n                               FsImageProto.FileSummary.Section s2) {\n              FSImageFormatProtobuf.SectionName n1 \u003d\n                  FSImageFormatProtobuf.SectionName.fromString(s1.getName());\n              FSImageFormatProtobuf.SectionName n2 \u003d\n                  FSImageFormatProtobuf.SectionName.fromString(s2.getName());\n              if (n1 \u003d\u003d null) {\n                return n2 \u003d\u003d null ? 0 : -1;\n              } else if (n2 \u003d\u003d null) {\n                return -1;\n              } else {\n                return n1.ordinal() - n2.ordinal();\n              }\n            }\n          });\n\n      for (FsImageProto.FileSummary.Section s : sections) {\n        fin.getChannel().position(s.getOffset());\n        InputStream is \u003d FSImageUtil.wrapInputStreamForCompression(conf,\n            summary.getCodec(), new BufferedInputStream(new LimitInputStream(\n            fin, s.getLength())));\n\n        switch (FSImageFormatProtobuf.SectionName.fromString(s.getName())) {\n          case STRING_TABLE:\n            loadStringTable(is);\n            break;\n          case INODE:\n            loadINodeSection(is);\n            break;\n          case INODE_REFERENCE:\n            loadINodeReferenceSection(is);\n            break;\n          case INODE_DIR:\n            loadINodeDirectorySection(is);\n            break;\n          default:\n            break;\n        }\n      }\n    } finally {\n      IOUtils.cleanup(null, fin);\n    }\n    return new FSImageLoader();\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/FSImageLoader.java"
    }
  }
}