{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CachedRecordStore.java",
  "functionName": "loadCache",
  "functionId": "loadCache___force-boolean",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/store/CachedRecordStore.java",
  "functionStartLine": 111,
  "functionEndLine": 153,
  "numCommitsSeen": 6,
  "timeTaken": 1862,
  "changeHistory": [
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
    "bc9e588a19c0aaf518de8dab719362be4a8d6a54",
    "55da7fd7ebe2f3fa1c1c828dda727fddc75a1b81"
  ],
  "changeHistoryShort": {
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": "Yfilerename",
    "bc9e588a19c0aaf518de8dab719362be4a8d6a54": "Ybodychange",
    "55da7fd7ebe2f3fa1c1c828dda727fddc75a1b81": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-13215. RBF: Move Router to its own module. Contributed by Wei Yan\n",
      "commitDate": "19/03/18 10:13 PM",
      "commitName": "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
      "commitAuthor": "weiy",
      "commitDateOld": "19/03/18 5:19 PM",
      "commitNameOld": "e65ff1c8be48ef4f04ed96f96ac4caef4974944d",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.2,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public boolean loadCache(boolean force) throws IOException {\n    // Prevent loading the cache too frequently\n    if (force || isUpdateTime()) {\n      List\u003cR\u003e newRecords \u003d null;\n      long t \u003d -1;\n      try {\n        QueryResult\u003cR\u003e result \u003d getDriver().get(getRecordClass());\n        newRecords \u003d result.getRecords();\n        t \u003d result.getTimestamp();\n\n        // If we have any expired record, update the State Store\n        if (this.override) {\n          overrideExpiredRecords(result);\n        }\n      } catch (IOException e) {\n        LOG.error(\"Cannot get \\\"{}\\\" records from the State Store\",\n            getRecordClass().getSimpleName());\n        this.initialized \u003d false;\n        return false;\n      }\n\n      // Update cache atomically\n      writeLock.lock();\n      try {\n        this.records.clear();\n        this.records.addAll(newRecords);\n        this.timestamp \u003d t;\n        this.initialized \u003d true;\n      } finally {\n        writeLock.unlock();\n      }\n\n      // Update the metrics for the cache State Store size\n      StateStoreMetrics metrics \u003d getDriver().getMetrics();\n      if (metrics !\u003d null) {\n        String recordName \u003d getRecordClass().getSimpleName();\n        metrics.setCacheSize(recordName, this.records.size());\n      }\n\n      lastUpdate \u003d Time.monotonicNow();\n    }\n    return true;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/store/CachedRecordStore.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/store/CachedRecordStore.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/store/CachedRecordStore.java"
      }
    },
    "bc9e588a19c0aaf518de8dab719362be4a8d6a54": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12335. Federation Metrics. Contributed by Inigo Goiri.\n\n(cherry picked from commit 3b19e77752afce87936f5c0d1e6d272fba798d7b)\n",
      "commitDate": "06/10/17 6:50 PM",
      "commitName": "bc9e588a19c0aaf518de8dab719362be4a8d6a54",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "06/10/17 6:50 PM",
      "commitNameOld": "55da7fd7ebe2f3fa1c1c828dda727fddc75a1b81",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,43 @@\n   public boolean loadCache(boolean force) throws IOException {\n     // Prevent loading the cache too frequently\n     if (force || isUpdateTime()) {\n       List\u003cR\u003e newRecords \u003d null;\n       long t \u003d -1;\n       try {\n         QueryResult\u003cR\u003e result \u003d getDriver().get(getRecordClass());\n         newRecords \u003d result.getRecords();\n         t \u003d result.getTimestamp();\n \n         // If we have any expired record, update the State Store\n         if (this.override) {\n           overrideExpiredRecords(result);\n         }\n       } catch (IOException e) {\n         LOG.error(\"Cannot get \\\"{}\\\" records from the State Store\",\n             getRecordClass().getSimpleName());\n         this.initialized \u003d false;\n         return false;\n       }\n \n       // Update cache atomically\n       writeLock.lock();\n       try {\n         this.records.clear();\n         this.records.addAll(newRecords);\n         this.timestamp \u003d t;\n         this.initialized \u003d true;\n       } finally {\n         writeLock.unlock();\n       }\n \n+      // Update the metrics for the cache State Store size\n+      StateStoreMetrics metrics \u003d getDriver().getMetrics();\n+      if (metrics !\u003d null) {\n+        String recordName \u003d getRecordClass().getSimpleName();\n+        metrics.setCacheSize(recordName, this.records.size());\n+      }\n+\n       lastUpdate \u003d Time.monotonicNow();\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean loadCache(boolean force) throws IOException {\n    // Prevent loading the cache too frequently\n    if (force || isUpdateTime()) {\n      List\u003cR\u003e newRecords \u003d null;\n      long t \u003d -1;\n      try {\n        QueryResult\u003cR\u003e result \u003d getDriver().get(getRecordClass());\n        newRecords \u003d result.getRecords();\n        t \u003d result.getTimestamp();\n\n        // If we have any expired record, update the State Store\n        if (this.override) {\n          overrideExpiredRecords(result);\n        }\n      } catch (IOException e) {\n        LOG.error(\"Cannot get \\\"{}\\\" records from the State Store\",\n            getRecordClass().getSimpleName());\n        this.initialized \u003d false;\n        return false;\n      }\n\n      // Update cache atomically\n      writeLock.lock();\n      try {\n        this.records.clear();\n        this.records.addAll(newRecords);\n        this.timestamp \u003d t;\n        this.initialized \u003d true;\n      } finally {\n        writeLock.unlock();\n      }\n\n      // Update the metrics for the cache State Store size\n      StateStoreMetrics metrics \u003d getDriver().getMetrics();\n      if (metrics !\u003d null) {\n        String recordName \u003d getRecordClass().getSimpleName();\n        metrics.setCacheSize(recordName, this.records.size());\n      }\n\n      lastUpdate \u003d Time.monotonicNow();\n    }\n    return true;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/store/CachedRecordStore.java",
      "extendedDetails": {}
    },
    "55da7fd7ebe2f3fa1c1c828dda727fddc75a1b81": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-10687. Federation Membership State Store internal API. Contributed by Jason Kace and Inigo Goiri.\n\n(cherry picked from commit 95cae08849d23cf12c5d280c29f90908e6a90d40)\n",
      "commitDate": "06/10/17 6:50 PM",
      "commitName": "55da7fd7ebe2f3fa1c1c828dda727fddc75a1b81",
      "commitAuthor": "Inigo Goiri",
      "diff": "@@ -0,0 +1,36 @@\n+  public boolean loadCache(boolean force) throws IOException {\n+    // Prevent loading the cache too frequently\n+    if (force || isUpdateTime()) {\n+      List\u003cR\u003e newRecords \u003d null;\n+      long t \u003d -1;\n+      try {\n+        QueryResult\u003cR\u003e result \u003d getDriver().get(getRecordClass());\n+        newRecords \u003d result.getRecords();\n+        t \u003d result.getTimestamp();\n+\n+        // If we have any expired record, update the State Store\n+        if (this.override) {\n+          overrideExpiredRecords(result);\n+        }\n+      } catch (IOException e) {\n+        LOG.error(\"Cannot get \\\"{}\\\" records from the State Store\",\n+            getRecordClass().getSimpleName());\n+        this.initialized \u003d false;\n+        return false;\n+      }\n+\n+      // Update cache atomically\n+      writeLock.lock();\n+      try {\n+        this.records.clear();\n+        this.records.addAll(newRecords);\n+        this.timestamp \u003d t;\n+        this.initialized \u003d true;\n+      } finally {\n+        writeLock.unlock();\n+      }\n+\n+      lastUpdate \u003d Time.monotonicNow();\n+    }\n+    return true;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean loadCache(boolean force) throws IOException {\n    // Prevent loading the cache too frequently\n    if (force || isUpdateTime()) {\n      List\u003cR\u003e newRecords \u003d null;\n      long t \u003d -1;\n      try {\n        QueryResult\u003cR\u003e result \u003d getDriver().get(getRecordClass());\n        newRecords \u003d result.getRecords();\n        t \u003d result.getTimestamp();\n\n        // If we have any expired record, update the State Store\n        if (this.override) {\n          overrideExpiredRecords(result);\n        }\n      } catch (IOException e) {\n        LOG.error(\"Cannot get \\\"{}\\\" records from the State Store\",\n            getRecordClass().getSimpleName());\n        this.initialized \u003d false;\n        return false;\n      }\n\n      // Update cache atomically\n      writeLock.lock();\n      try {\n        this.records.clear();\n        this.records.addAll(newRecords);\n        this.timestamp \u003d t;\n        this.initialized \u003d true;\n      } finally {\n        writeLock.unlock();\n      }\n\n      lastUpdate \u003d Time.monotonicNow();\n    }\n    return true;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/store/CachedRecordStore.java"
    }
  }
}