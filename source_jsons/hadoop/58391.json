{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AsyncDispatcher.java",
  "functionName": "createThread",
  "functionId": "createThread",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/event/AsyncDispatcher.java",
  "functionStartLine": 112,
  "functionEndLine": 149,
  "numCommitsSeen": 41,
  "timeTaken": 8477,
  "changeHistory": [
    "172bcd8e01bd0fa58010823eb27d6e6d81609f2a",
    "2466460d4cd13ad5837c044476b26e63082c1d37",
    "aa067c6aa47b4c79577096817acc00ad6421180c",
    "460ac8cb50e024b60e02a96c2ab27368dfe0944d",
    "e28015ed1b40278028cfb70c4c87d9bc95a2b6a6",
    "614a743fea5ab5181b2b7989bba84146e81039de",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "8fa0a3c737f27ff9d12fb657a7b22865754a5fd8",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "172bcd8e01bd0fa58010823eb27d6e6d81609f2a": "Ybodychange",
    "2466460d4cd13ad5837c044476b26e63082c1d37": "Ybodychange",
    "aa067c6aa47b4c79577096817acc00ad6421180c": "Ybodychange",
    "460ac8cb50e024b60e02a96c2ab27368dfe0944d": "Ybodychange",
    "e28015ed1b40278028cfb70c4c87d9bc95a2b6a6": "Ybodychange",
    "614a743fea5ab5181b2b7989bba84146e81039de": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "8fa0a3c737f27ff9d12fb657a7b22865754a5fd8": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "172bcd8e01bd0fa58010823eb27d6e6d81609f2a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8995. Log events info in AsyncDispatcher when event queue size cumulatively reaches a certain number every time. Contributed by zhuqi.\n",
      "commitDate": "05/09/19 1:20 AM",
      "commitName": "172bcd8e01bd0fa58010823eb27d6e6d81609f2a",
      "commitAuthor": "Tao Yang",
      "commitDateOld": "15/03/19 4:20 PM",
      "commitNameOld": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 173.37,
      "commitsBetweenForRepo": 1311,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,38 @@\n   Runnable createThread() {\n     return new Runnable() {\n       @Override\n       public void run() {\n         while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n           drained \u003d eventQueue.isEmpty();\n           // blockNewEvents is only set when dispatcher is draining to stop,\n           // adding this check is to avoid the overhead of acquiring the lock\n           // and calling notify every time in the normal run of the loop.\n           if (blockNewEvents) {\n             synchronized (waitForDrained) {\n               if (drained) {\n                 waitForDrained.notify();\n               }\n             }\n           }\n           Event event;\n           try {\n             event \u003d eventQueue.take();\n           } catch(InterruptedException ie) {\n             if (!stopped) {\n               LOG.warn(\"AsyncDispatcher thread interrupted\", ie);\n             }\n             return;\n           }\n           if (event !\u003d null) {\n             dispatch(event);\n+            if (printTrigger) {\n+              //Log the latest dispatch event type\n+              // may cause the too many events queued\n+              LOG.info(\"Latest dispatch event type: \" + event.getType());\n+              printTrigger \u003d false;\n+            }\n           }\n         }\n       }\n     };\n   }\n\\ No newline at end of file\n",
      "actualSource": "  Runnable createThread() {\n    return new Runnable() {\n      @Override\n      public void run() {\n        while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n          drained \u003d eventQueue.isEmpty();\n          // blockNewEvents is only set when dispatcher is draining to stop,\n          // adding this check is to avoid the overhead of acquiring the lock\n          // and calling notify every time in the normal run of the loop.\n          if (blockNewEvents) {\n            synchronized (waitForDrained) {\n              if (drained) {\n                waitForDrained.notify();\n              }\n            }\n          }\n          Event event;\n          try {\n            event \u003d eventQueue.take();\n          } catch(InterruptedException ie) {\n            if (!stopped) {\n              LOG.warn(\"AsyncDispatcher thread interrupted\", ie);\n            }\n            return;\n          }\n          if (event !\u003d null) {\n            dispatch(event);\n            if (printTrigger) {\n              //Log the latest dispatch event type\n              // may cause the too many events queued\n              LOG.info(\"Latest dispatch event type: \" + event.getType());\n              printTrigger \u003d false;\n            }\n          }\n        }\n      }\n    };\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/event/AsyncDispatcher.java",
      "extendedDetails": {}
    },
    "2466460d4cd13ad5837c044476b26e63082c1d37": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"YARN-3878. AsyncDispatcher can hang while stopping if it is configured for draining events on stop. (Varun Saxena via kasha)\"\n\nThis reverts commit aa067c6aa47b4c79577096817acc00ad6421180c.\n",
      "commitDate": "13/07/15 2:30 PM",
      "commitName": "2466460d4cd13ad5837c044476b26e63082c1d37",
      "commitAuthor": "Jian He",
      "commitDateOld": "09/07/15 9:48 AM",
      "commitNameOld": "aa067c6aa47b4c79577096817acc00ad6421180c",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 4.2,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,32 @@\n   Runnable createThread() {\n     return new Runnable() {\n       @Override\n       public void run() {\n         while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n+          drained \u003d eventQueue.isEmpty();\n           // blockNewEvents is only set when dispatcher is draining to stop,\n           // adding this check is to avoid the overhead of acquiring the lock\n           // and calling notify every time in the normal run of the loop.\n           if (blockNewEvents) {\n             synchronized (waitForDrained) {\n-              if (eventQueue.isEmpty()) {\n+              if (drained) {\n                 waitForDrained.notify();\n               }\n             }\n           }\n           Event event;\n           try {\n             event \u003d eventQueue.take();\n           } catch(InterruptedException ie) {\n             if (!stopped) {\n               LOG.warn(\"AsyncDispatcher thread interrupted\", ie);\n             }\n             return;\n           }\n           if (event !\u003d null) {\n             dispatch(event);\n           }\n         }\n       }\n     };\n   }\n\\ No newline at end of file\n",
      "actualSource": "  Runnable createThread() {\n    return new Runnable() {\n      @Override\n      public void run() {\n        while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n          drained \u003d eventQueue.isEmpty();\n          // blockNewEvents is only set when dispatcher is draining to stop,\n          // adding this check is to avoid the overhead of acquiring the lock\n          // and calling notify every time in the normal run of the loop.\n          if (blockNewEvents) {\n            synchronized (waitForDrained) {\n              if (drained) {\n                waitForDrained.notify();\n              }\n            }\n          }\n          Event event;\n          try {\n            event \u003d eventQueue.take();\n          } catch(InterruptedException ie) {\n            if (!stopped) {\n              LOG.warn(\"AsyncDispatcher thread interrupted\", ie);\n            }\n            return;\n          }\n          if (event !\u003d null) {\n            dispatch(event);\n          }\n        }\n      }\n    };\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/event/AsyncDispatcher.java",
      "extendedDetails": {}
    },
    "aa067c6aa47b4c79577096817acc00ad6421180c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3878. AsyncDispatcher can hang while stopping if it is configured for draining events on stop. (Varun Saxena via kasha)\n",
      "commitDate": "09/07/15 9:48 AM",
      "commitName": "aa067c6aa47b4c79577096817acc00ad6421180c",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "13/05/15 1:06 PM",
      "commitNameOld": "341a476812015d0d584b198b451ea9458645a47c",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 56.86,
      "commitsBetweenForRepo": 408,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,31 @@\n   Runnable createThread() {\n     return new Runnable() {\n       @Override\n       public void run() {\n         while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n-          drained \u003d eventQueue.isEmpty();\n           // blockNewEvents is only set when dispatcher is draining to stop,\n           // adding this check is to avoid the overhead of acquiring the lock\n           // and calling notify every time in the normal run of the loop.\n           if (blockNewEvents) {\n             synchronized (waitForDrained) {\n-              if (drained) {\n+              if (eventQueue.isEmpty()) {\n                 waitForDrained.notify();\n               }\n             }\n           }\n           Event event;\n           try {\n             event \u003d eventQueue.take();\n           } catch(InterruptedException ie) {\n             if (!stopped) {\n               LOG.warn(\"AsyncDispatcher thread interrupted\", ie);\n             }\n             return;\n           }\n           if (event !\u003d null) {\n             dispatch(event);\n           }\n         }\n       }\n     };\n   }\n\\ No newline at end of file\n",
      "actualSource": "  Runnable createThread() {\n    return new Runnable() {\n      @Override\n      public void run() {\n        while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n          // blockNewEvents is only set when dispatcher is draining to stop,\n          // adding this check is to avoid the overhead of acquiring the lock\n          // and calling notify every time in the normal run of the loop.\n          if (blockNewEvents) {\n            synchronized (waitForDrained) {\n              if (eventQueue.isEmpty()) {\n                waitForDrained.notify();\n              }\n            }\n          }\n          Event event;\n          try {\n            event \u003d eventQueue.take();\n          } catch(InterruptedException ie) {\n            if (!stopped) {\n              LOG.warn(\"AsyncDispatcher thread interrupted\", ie);\n            }\n            return;\n          }\n          if (event !\u003d null) {\n            dispatch(event);\n          }\n        }\n      }\n    };\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/event/AsyncDispatcher.java",
      "extendedDetails": {}
    },
    "460ac8cb50e024b60e02a96c2ab27368dfe0944d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1121. Addendum patch. Fixed AsyncDispatcher hang issue during stop due to a race condition caused by the previous patch. Contributed by Jian He. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1554344 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/12/13 5:10 PM",
      "commitName": "460ac8cb50e024b60e02a96c2ab27368dfe0944d",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "08/11/13 4:55 PM",
      "commitNameOld": "e28015ed1b40278028cfb70c4c87d9bc95a2b6a6",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 52.01,
      "commitsBetweenForRepo": 292,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,32 @@\n   Runnable createThread() {\n     return new Runnable() {\n       @Override\n       public void run() {\n         while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n           drained \u003d eventQueue.isEmpty();\n+          // blockNewEvents is only set when dispatcher is draining to stop,\n+          // adding this check is to avoid the overhead of acquiring the lock\n+          // and calling notify every time in the normal run of the loop.\n+          if (blockNewEvents) {\n+            synchronized (waitForDrained) {\n+              if (drained) {\n+                waitForDrained.notify();\n+              }\n+            }\n+          }\n           Event event;\n           try {\n             event \u003d eventQueue.take();\n           } catch(InterruptedException ie) {\n             if (!stopped) {\n               LOG.warn(\"AsyncDispatcher thread interrupted\", ie);\n             }\n             return;\n           }\n           if (event !\u003d null) {\n             dispatch(event);\n           }\n         }\n       }\n     };\n   }\n\\ No newline at end of file\n",
      "actualSource": "  Runnable createThread() {\n    return new Runnable() {\n      @Override\n      public void run() {\n        while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n          drained \u003d eventQueue.isEmpty();\n          // blockNewEvents is only set when dispatcher is draining to stop,\n          // adding this check is to avoid the overhead of acquiring the lock\n          // and calling notify every time in the normal run of the loop.\n          if (blockNewEvents) {\n            synchronized (waitForDrained) {\n              if (drained) {\n                waitForDrained.notify();\n              }\n            }\n          }\n          Event event;\n          try {\n            event \u003d eventQueue.take();\n          } catch(InterruptedException ie) {\n            if (!stopped) {\n              LOG.warn(\"AsyncDispatcher thread interrupted\", ie);\n            }\n            return;\n          }\n          if (event !\u003d null) {\n            dispatch(event);\n          }\n        }\n      }\n    };\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/event/AsyncDispatcher.java",
      "extendedDetails": {}
    },
    "e28015ed1b40278028cfb70c4c87d9bc95a2b6a6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1121. Changed ResourceManager\u0027s state-store to drain all events on shut-down. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1540232 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/11/13 4:55 PM",
      "commitName": "e28015ed1b40278028cfb70c4c87d9bc95a2b6a6",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "16/06/13 11:39 PM",
      "commitNameOld": "b9efe6bd4a1277b4067ecde715a7713a85968886",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 144.76,
      "commitsBetweenForRepo": 881,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,22 @@\n   Runnable createThread() {\n     return new Runnable() {\n       @Override\n       public void run() {\n         while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n+          drained \u003d eventQueue.isEmpty();\n           Event event;\n           try {\n             event \u003d eventQueue.take();\n           } catch(InterruptedException ie) {\n             if (!stopped) {\n               LOG.warn(\"AsyncDispatcher thread interrupted\", ie);\n             }\n             return;\n           }\n           if (event !\u003d null) {\n             dispatch(event);\n           }\n         }\n       }\n     };\n   }\n\\ No newline at end of file\n",
      "actualSource": "  Runnable createThread() {\n    return new Runnable() {\n      @Override\n      public void run() {\n        while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n          drained \u003d eventQueue.isEmpty();\n          Event event;\n          try {\n            event \u003d eventQueue.take();\n          } catch(InterruptedException ie) {\n            if (!stopped) {\n              LOG.warn(\"AsyncDispatcher thread interrupted\", ie);\n            }\n            return;\n          }\n          if (event !\u003d null) {\n            dispatch(event);\n          }\n        }\n      }\n    };\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/event/AsyncDispatcher.java",
      "extendedDetails": {}
    },
    "614a743fea5ab5181b2b7989bba84146e81039de": {
      "type": "Ybodychange",
      "commitMessage": "YARN-139. Interrupted Exception within AsyncDispatcher leads to user confusion. Contributed by Vinod Kumar Vavilapalli\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1401726 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/10/12 8:20 AM",
      "commitName": "614a743fea5ab5181b2b7989bba84146e81039de",
      "commitAuthor": "Jason Darrell Lowe",
      "commitDateOld": "07/08/12 10:22 PM",
      "commitNameOld": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 77.42,
      "commitsBetweenForRepo": 491,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,21 @@\n   Runnable createThread() {\n     return new Runnable() {\n       @Override\n       public void run() {\n         while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n           Event event;\n           try {\n             event \u003d eventQueue.take();\n           } catch(InterruptedException ie) {\n-            LOG.warn(\"AsyncDispatcher thread interrupted\", ie);\n+            if (!stopped) {\n+              LOG.warn(\"AsyncDispatcher thread interrupted\", ie);\n+            }\n             return;\n           }\n           if (event !\u003d null) {\n             dispatch(event);\n           }\n         }\n       }\n     };\n   }\n\\ No newline at end of file\n",
      "actualSource": "  Runnable createThread() {\n    return new Runnable() {\n      @Override\n      public void run() {\n        while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n          Event event;\n          try {\n            event \u003d eventQueue.take();\n          } catch(InterruptedException ie) {\n            if (!stopped) {\n              LOG.warn(\"AsyncDispatcher thread interrupted\", ie);\n            }\n            return;\n          }\n          if (event !\u003d null) {\n            dispatch(event);\n          }\n        }\n      }\n    };\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/event/AsyncDispatcher.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  Runnable createThread() {\n    return new Runnable() {\n      @Override\n      public void run() {\n        while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n          Event event;\n          try {\n            event \u003d eventQueue.take();\n          } catch(InterruptedException ie) {\n            LOG.warn(\"AsyncDispatcher thread interrupted\", ie);\n            return;\n          }\n          if (event !\u003d null) {\n            dispatch(event);\n          }\n        }\n      }\n    };\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/event/AsyncDispatcher.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/event/AsyncDispatcher.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/event/AsyncDispatcher.java"
      }
    },
    "8fa0a3c737f27ff9d12fb657a7b22865754a5fd8": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3567. Extraneous JobConf objects in AM heap. Contributed by Vinod Kumar Vavilapalli)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1222498 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/12/11 2:34 PM",
      "commitName": "8fa0a3c737f27ff9d12fb657a7b22865754a5fd8",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "01/12/11 12:35 AM",
      "commitNameOld": "08da8ea5db5359fc04010be486b842a5d2e6b9c2",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 21.58,
      "commitsBetweenForRepo": 134,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n   Runnable createThread() {\n     return new Runnable() {\n       @Override\n       public void run() {\n         while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n           Event event;\n           try {\n             event \u003d eventQueue.take();\n           } catch(InterruptedException ie) {\n-            LOG.info(\"AsyncDispatcher thread interrupted\", ie);\n+            LOG.warn(\"AsyncDispatcher thread interrupted\", ie);\n             return;\n           }\n           if (event !\u003d null) {\n             dispatch(event);\n           }\n         }\n       }\n     };\n   }\n\\ No newline at end of file\n",
      "actualSource": "  Runnable createThread() {\n    return new Runnable() {\n      @Override\n      public void run() {\n        while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n          Event event;\n          try {\n            event \u003d eventQueue.take();\n          } catch(InterruptedException ie) {\n            LOG.warn(\"AsyncDispatcher thread interrupted\", ie);\n            return;\n          }\n          if (event !\u003d null) {\n            dispatch(event);\n          }\n        }\n      }\n    };\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/event/AsyncDispatcher.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  Runnable createThread() {\n    return new Runnable() {\n      @Override\n      public void run() {\n        while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n          Event event;\n          try {\n            event \u003d eventQueue.take();\n          } catch(InterruptedException ie) {\n            LOG.info(\"AsyncDispatcher thread interrupted\", ie);\n            return;\n          }\n          if (event !\u003d null) {\n            dispatch(event);\n          }\n        }\n      }\n    };\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/event/AsyncDispatcher.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/event/AsyncDispatcher.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/event/AsyncDispatcher.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,19 @@\n+  Runnable createThread() {\n+    return new Runnable() {\n+      @Override\n+      public void run() {\n+        while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n+          Event event;\n+          try {\n+            event \u003d eventQueue.take();\n+          } catch(InterruptedException ie) {\n+            LOG.info(\"AsyncDispatcher thread interrupted\", ie);\n+            return;\n+          }\n+          if (event !\u003d null) {\n+            dispatch(event);\n+          }\n+        }\n+      }\n+    };\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  Runnable createThread() {\n    return new Runnable() {\n      @Override\n      public void run() {\n        while (!stopped \u0026\u0026 !Thread.currentThread().isInterrupted()) {\n          Event event;\n          try {\n            event \u003d eventQueue.take();\n          } catch(InterruptedException ie) {\n            LOG.info(\"AsyncDispatcher thread interrupted\", ie);\n            return;\n          }\n          if (event !\u003d null) {\n            dispatch(event);\n          }\n        }\n      }\n    };\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/event/AsyncDispatcher.java"
    }
  }
}