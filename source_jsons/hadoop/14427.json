{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Journal.java",
  "functionName": "syncLog",
  "functionId": "syncLog___reqInfo-RequestInfo__segment-SegmentStateProto(modifiers-final)__url-URL(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/Journal.java",
  "functionStartLine": 988,
  "functionEndLine": 1021,
  "numCommitsSeen": 77,
  "timeTaken": 2222,
  "changeHistory": [
    "0880be20acd9c57872b511b46e23ba56a051751e",
    "3ccd905d8a0fe5e3a206ac955b689a6f02b25e67",
    "df801074c929d5414b92cc9fc0cc8a2794e02751",
    "c95a1674b61ef2a6963dc64604986ef90a8c636d",
    "74d4573a23db5586c6e47ff2277aa7c35237da34"
  ],
  "changeHistoryShort": {
    "0880be20acd9c57872b511b46e23ba56a051751e": "Ybodychange",
    "3ccd905d8a0fe5e3a206ac955b689a6f02b25e67": "Ymultichange(Yreturntypechange,Ybodychange)",
    "df801074c929d5414b92cc9fc0cc8a2794e02751": "Ymultichange(Ybodychange,Yparametermetachange)",
    "c95a1674b61ef2a6963dc64604986ef90a8c636d": "Ybodychange",
    "74d4573a23db5586c6e47ff2277aa7c35237da34": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0880be20acd9c57872b511b46e23ba56a051751e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4982. JournalNode should relogin from keytab before fetching logs from other JNs. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1502682 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/07/13 1:44 PM",
      "commitName": "0880be20acd9c57872b511b46e23ba56a051751e",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "08/06/13 4:28 PM",
      "commitNameOld": "cb11d68f409b7dabfc1f31c43f026a905810ed01",
      "commitAuthorOld": "Ivan Mitic",
      "daysBetweenCommits": 33.89,
      "commitsBetweenForRepo": 204,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,34 @@\n   private File syncLog(RequestInfo reqInfo,\n       final SegmentStateProto segment, final URL url) throws IOException {\n     final File tmpFile \u003d storage.getSyncLogTemporaryFile(\n         segment.getStartTxId(), reqInfo.getEpoch());\n     final List\u003cFile\u003e localPaths \u003d ImmutableList.of(tmpFile);\n \n     LOG.info(\"Synchronizing log \" +\n         TextFormat.shortDebugString(segment) + \" from \" + url);\n     SecurityUtil.doAsLoginUser(\n         new PrivilegedExceptionAction\u003cVoid\u003e() {\n           @Override\n           public Void run() throws IOException {\n+            // We may have lost our ticket since last checkpoint, log in again, just in case\n+            if (UserGroupInformation.isSecurityEnabled()) {\n+              UserGroupInformation.getCurrentUser().checkTGTAndReloginFromKeytab();\n+            }\n+\n             boolean success \u003d false;\n             try {\n               TransferFsImage.doGetUrl(url, localPaths, storage, true);\n               assert tmpFile.exists();\n               success \u003d true;\n             } finally {\n               if (!success) {\n                 if (!tmpFile.delete()) {\n                   LOG.warn(\"Failed to delete temporary file \" + tmpFile);\n                 }\n               }\n             }\n             return null;\n           }\n         });\n     return tmpFile;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private File syncLog(RequestInfo reqInfo,\n      final SegmentStateProto segment, final URL url) throws IOException {\n    final File tmpFile \u003d storage.getSyncLogTemporaryFile(\n        segment.getStartTxId(), reqInfo.getEpoch());\n    final List\u003cFile\u003e localPaths \u003d ImmutableList.of(tmpFile);\n\n    LOG.info(\"Synchronizing log \" +\n        TextFormat.shortDebugString(segment) + \" from \" + url);\n    SecurityUtil.doAsLoginUser(\n        new PrivilegedExceptionAction\u003cVoid\u003e() {\n          @Override\n          public Void run() throws IOException {\n            // We may have lost our ticket since last checkpoint, log in again, just in case\n            if (UserGroupInformation.isSecurityEnabled()) {\n              UserGroupInformation.getCurrentUser().checkTGTAndReloginFromKeytab();\n            }\n\n            boolean success \u003d false;\n            try {\n              TransferFsImage.doGetUrl(url, localPaths, storage, true);\n              assert tmpFile.exists();\n              success \u003d true;\n            } finally {\n              if (!success) {\n                if (!tmpFile.delete()) {\n                  LOG.warn(\"Failed to delete temporary file \" + tmpFile);\n                }\n              }\n            }\n            return null;\n          }\n        });\n    return tmpFile;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/Journal.java",
      "extendedDetails": {}
    },
    "3ccd905d8a0fe5e3a206ac955b689a6f02b25e67": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-3955. QJM: Make acceptRecovery() atomic. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1387706 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/09/12 11:57 AM",
      "commitName": "3ccd905d8a0fe5e3a206ac955b689a6f02b25e67",
      "commitAuthor": "Todd Lipcon",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-3955. QJM: Make acceptRecovery() atomic. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1387706 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "19/09/12 11:57 AM",
          "commitName": "3ccd905d8a0fe5e3a206ac955b689a6f02b25e67",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "19/09/12 11:52 AM",
          "commitNameOld": "663e7484c04c197eed53f10a7808140f1c955277",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,29 @@\n-  private void syncLog(RequestInfo reqInfo,\n+  private File syncLog(RequestInfo reqInfo,\n       final SegmentStateProto segment, final URL url) throws IOException {\n-    String tmpFileName \u003d\n-        \"synclog_\" + segment.getStartTxId() + \"_\" +\n-        reqInfo.getEpoch() + \".\" + reqInfo.getIpcSerialNumber();\n-    \n-    final List\u003cFile\u003e localPaths \u003d storage.getFiles(null, tmpFileName);\n-    assert localPaths.size() \u003d\u003d 1;\n-    final File tmpFile \u003d localPaths.get(0);\n+    final File tmpFile \u003d storage.getSyncLogTemporaryFile(\n+        segment.getStartTxId(), reqInfo.getEpoch());\n+    final List\u003cFile\u003e localPaths \u003d ImmutableList.of(tmpFile);\n \n     LOG.info(\"Synchronizing log \" +\n         TextFormat.shortDebugString(segment) + \" from \" + url);\n     SecurityUtil.doAsLoginUser(\n         new PrivilegedExceptionAction\u003cVoid\u003e() {\n           @Override\n           public Void run() throws IOException {\n-            TransferFsImage.doGetUrl(url, localPaths, storage, true);\n-            assert tmpFile.exists();\n             boolean success \u003d false;\n             try {\n-              success \u003d tmpFile.renameTo(storage.getInProgressEditLog(\n-                  segment.getStartTxId()));\n+              TransferFsImage.doGetUrl(url, localPaths, storage, true);\n+              assert tmpFile.exists();\n+              success \u003d true;\n             } finally {\n               if (!success) {\n                 if (!tmpFile.delete()) {\n                   LOG.warn(\"Failed to delete temporary file \" + tmpFile);\n                 }\n               }\n             }\n             return null;\n           }\n         });\n+    return tmpFile;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private File syncLog(RequestInfo reqInfo,\n      final SegmentStateProto segment, final URL url) throws IOException {\n    final File tmpFile \u003d storage.getSyncLogTemporaryFile(\n        segment.getStartTxId(), reqInfo.getEpoch());\n    final List\u003cFile\u003e localPaths \u003d ImmutableList.of(tmpFile);\n\n    LOG.info(\"Synchronizing log \" +\n        TextFormat.shortDebugString(segment) + \" from \" + url);\n    SecurityUtil.doAsLoginUser(\n        new PrivilegedExceptionAction\u003cVoid\u003e() {\n          @Override\n          public Void run() throws IOException {\n            boolean success \u003d false;\n            try {\n              TransferFsImage.doGetUrl(url, localPaths, storage, true);\n              assert tmpFile.exists();\n              success \u003d true;\n            } finally {\n              if (!success) {\n                if (!tmpFile.delete()) {\n                  LOG.warn(\"Failed to delete temporary file \" + tmpFile);\n                }\n              }\n            }\n            return null;\n          }\n        });\n    return tmpFile;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/Journal.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "File"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-3955. QJM: Make acceptRecovery() atomic. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1387706 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "19/09/12 11:57 AM",
          "commitName": "3ccd905d8a0fe5e3a206ac955b689a6f02b25e67",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "19/09/12 11:52 AM",
          "commitNameOld": "663e7484c04c197eed53f10a7808140f1c955277",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,29 @@\n-  private void syncLog(RequestInfo reqInfo,\n+  private File syncLog(RequestInfo reqInfo,\n       final SegmentStateProto segment, final URL url) throws IOException {\n-    String tmpFileName \u003d\n-        \"synclog_\" + segment.getStartTxId() + \"_\" +\n-        reqInfo.getEpoch() + \".\" + reqInfo.getIpcSerialNumber();\n-    \n-    final List\u003cFile\u003e localPaths \u003d storage.getFiles(null, tmpFileName);\n-    assert localPaths.size() \u003d\u003d 1;\n-    final File tmpFile \u003d localPaths.get(0);\n+    final File tmpFile \u003d storage.getSyncLogTemporaryFile(\n+        segment.getStartTxId(), reqInfo.getEpoch());\n+    final List\u003cFile\u003e localPaths \u003d ImmutableList.of(tmpFile);\n \n     LOG.info(\"Synchronizing log \" +\n         TextFormat.shortDebugString(segment) + \" from \" + url);\n     SecurityUtil.doAsLoginUser(\n         new PrivilegedExceptionAction\u003cVoid\u003e() {\n           @Override\n           public Void run() throws IOException {\n-            TransferFsImage.doGetUrl(url, localPaths, storage, true);\n-            assert tmpFile.exists();\n             boolean success \u003d false;\n             try {\n-              success \u003d tmpFile.renameTo(storage.getInProgressEditLog(\n-                  segment.getStartTxId()));\n+              TransferFsImage.doGetUrl(url, localPaths, storage, true);\n+              assert tmpFile.exists();\n+              success \u003d true;\n             } finally {\n               if (!success) {\n                 if (!tmpFile.delete()) {\n                   LOG.warn(\"Failed to delete temporary file \" + tmpFile);\n                 }\n               }\n             }\n             return null;\n           }\n         });\n+    return tmpFile;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private File syncLog(RequestInfo reqInfo,\n      final SegmentStateProto segment, final URL url) throws IOException {\n    final File tmpFile \u003d storage.getSyncLogTemporaryFile(\n        segment.getStartTxId(), reqInfo.getEpoch());\n    final List\u003cFile\u003e localPaths \u003d ImmutableList.of(tmpFile);\n\n    LOG.info(\"Synchronizing log \" +\n        TextFormat.shortDebugString(segment) + \" from \" + url);\n    SecurityUtil.doAsLoginUser(\n        new PrivilegedExceptionAction\u003cVoid\u003e() {\n          @Override\n          public Void run() throws IOException {\n            boolean success \u003d false;\n            try {\n              TransferFsImage.doGetUrl(url, localPaths, storage, true);\n              assert tmpFile.exists();\n              success \u003d true;\n            } finally {\n              if (!success) {\n                if (!tmpFile.delete()) {\n                  LOG.warn(\"Failed to delete temporary file \" + tmpFile);\n                }\n              }\n            }\n            return null;\n          }\n        });\n    return tmpFile;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/Journal.java",
          "extendedDetails": {}
        }
      ]
    },
    "df801074c929d5414b92cc9fc0cc8a2794e02751": {
      "type": "Ymultichange(Ybodychange,Yparametermetachange)",
      "commitMessage": "HDFS-3893. QJM: Make QJM work with security enabled. Contributed by Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1381770 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/09/12 2:42 PM",
      "commitName": "df801074c929d5414b92cc9fc0cc8a2794e02751",
      "commitAuthor": "Aaron Myers",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-3893. QJM: Make QJM work with security enabled. Contributed by Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1381770 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "06/09/12 2:42 PM",
          "commitName": "df801074c929d5414b92cc9fc0cc8a2794e02751",
          "commitAuthor": "Aaron Myers",
          "commitDateOld": "06/09/12 12:03 AM",
          "commitNameOld": "cae8116a146cb27d40e4e41cece9a17945bc7f9c",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.61,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,33 @@\n   private void syncLog(RequestInfo reqInfo,\n-      SegmentStateProto segment, URL url) throws IOException {\n+      final SegmentStateProto segment, final URL url) throws IOException {\n     String tmpFileName \u003d\n         \"synclog_\" + segment.getStartTxId() + \"_\" +\n         reqInfo.getEpoch() + \".\" + reqInfo.getIpcSerialNumber();\n     \n-    List\u003cFile\u003e localPaths \u003d storage.getFiles(null, tmpFileName);\n+    final List\u003cFile\u003e localPaths \u003d storage.getFiles(null, tmpFileName);\n     assert localPaths.size() \u003d\u003d 1;\n-    File tmpFile \u003d localPaths.get(0);\n- \n-    boolean success \u003d false;\n+    final File tmpFile \u003d localPaths.get(0);\n \n     LOG.info(\"Synchronizing log \" +\n         TextFormat.shortDebugString(segment) + \" from \" + url);\n-    TransferFsImage.doGetUrl(url, localPaths, storage, true);\n-    assert tmpFile.exists();\n-    try {\n-      success \u003d tmpFile.renameTo(storage.getInProgressEditLog(\n-          segment.getStartTxId()));\n-    } finally {\n-      if (!success) {\n-        if (!tmpFile.delete()) {\n-          LOG.warn(\"Failed to delete temporary file \" + tmpFile);\n-        }\n-      }\n-    }\n+    SecurityUtil.doAsLoginUser(\n+        new PrivilegedExceptionAction\u003cVoid\u003e() {\n+          @Override\n+          public Void run() throws IOException {\n+            TransferFsImage.doGetUrl(url, localPaths, storage, true);\n+            assert tmpFile.exists();\n+            boolean success \u003d false;\n+            try {\n+              success \u003d tmpFile.renameTo(storage.getInProgressEditLog(\n+                  segment.getStartTxId()));\n+            } finally {\n+              if (!success) {\n+                if (!tmpFile.delete()) {\n+                  LOG.warn(\"Failed to delete temporary file \" + tmpFile);\n+                }\n+              }\n+            }\n+            return null;\n+          }\n+        });\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void syncLog(RequestInfo reqInfo,\n      final SegmentStateProto segment, final URL url) throws IOException {\n    String tmpFileName \u003d\n        \"synclog_\" + segment.getStartTxId() + \"_\" +\n        reqInfo.getEpoch() + \".\" + reqInfo.getIpcSerialNumber();\n    \n    final List\u003cFile\u003e localPaths \u003d storage.getFiles(null, tmpFileName);\n    assert localPaths.size() \u003d\u003d 1;\n    final File tmpFile \u003d localPaths.get(0);\n\n    LOG.info(\"Synchronizing log \" +\n        TextFormat.shortDebugString(segment) + \" from \" + url);\n    SecurityUtil.doAsLoginUser(\n        new PrivilegedExceptionAction\u003cVoid\u003e() {\n          @Override\n          public Void run() throws IOException {\n            TransferFsImage.doGetUrl(url, localPaths, storage, true);\n            assert tmpFile.exists();\n            boolean success \u003d false;\n            try {\n              success \u003d tmpFile.renameTo(storage.getInProgressEditLog(\n                  segment.getStartTxId()));\n            } finally {\n              if (!success) {\n                if (!tmpFile.delete()) {\n                  LOG.warn(\"Failed to delete temporary file \" + tmpFile);\n                }\n              }\n            }\n            return null;\n          }\n        });\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/Journal.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "HDFS-3893. QJM: Make QJM work with security enabled. Contributed by Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1381770 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "06/09/12 2:42 PM",
          "commitName": "df801074c929d5414b92cc9fc0cc8a2794e02751",
          "commitAuthor": "Aaron Myers",
          "commitDateOld": "06/09/12 12:03 AM",
          "commitNameOld": "cae8116a146cb27d40e4e41cece9a17945bc7f9c",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.61,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,33 @@\n   private void syncLog(RequestInfo reqInfo,\n-      SegmentStateProto segment, URL url) throws IOException {\n+      final SegmentStateProto segment, final URL url) throws IOException {\n     String tmpFileName \u003d\n         \"synclog_\" + segment.getStartTxId() + \"_\" +\n         reqInfo.getEpoch() + \".\" + reqInfo.getIpcSerialNumber();\n     \n-    List\u003cFile\u003e localPaths \u003d storage.getFiles(null, tmpFileName);\n+    final List\u003cFile\u003e localPaths \u003d storage.getFiles(null, tmpFileName);\n     assert localPaths.size() \u003d\u003d 1;\n-    File tmpFile \u003d localPaths.get(0);\n- \n-    boolean success \u003d false;\n+    final File tmpFile \u003d localPaths.get(0);\n \n     LOG.info(\"Synchronizing log \" +\n         TextFormat.shortDebugString(segment) + \" from \" + url);\n-    TransferFsImage.doGetUrl(url, localPaths, storage, true);\n-    assert tmpFile.exists();\n-    try {\n-      success \u003d tmpFile.renameTo(storage.getInProgressEditLog(\n-          segment.getStartTxId()));\n-    } finally {\n-      if (!success) {\n-        if (!tmpFile.delete()) {\n-          LOG.warn(\"Failed to delete temporary file \" + tmpFile);\n-        }\n-      }\n-    }\n+    SecurityUtil.doAsLoginUser(\n+        new PrivilegedExceptionAction\u003cVoid\u003e() {\n+          @Override\n+          public Void run() throws IOException {\n+            TransferFsImage.doGetUrl(url, localPaths, storage, true);\n+            assert tmpFile.exists();\n+            boolean success \u003d false;\n+            try {\n+              success \u003d tmpFile.renameTo(storage.getInProgressEditLog(\n+                  segment.getStartTxId()));\n+            } finally {\n+              if (!success) {\n+                if (!tmpFile.delete()) {\n+                  LOG.warn(\"Failed to delete temporary file \" + tmpFile);\n+                }\n+              }\n+            }\n+            return null;\n+          }\n+        });\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void syncLog(RequestInfo reqInfo,\n      final SegmentStateProto segment, final URL url) throws IOException {\n    String tmpFileName \u003d\n        \"synclog_\" + segment.getStartTxId() + \"_\" +\n        reqInfo.getEpoch() + \".\" + reqInfo.getIpcSerialNumber();\n    \n    final List\u003cFile\u003e localPaths \u003d storage.getFiles(null, tmpFileName);\n    assert localPaths.size() \u003d\u003d 1;\n    final File tmpFile \u003d localPaths.get(0);\n\n    LOG.info(\"Synchronizing log \" +\n        TextFormat.shortDebugString(segment) + \" from \" + url);\n    SecurityUtil.doAsLoginUser(\n        new PrivilegedExceptionAction\u003cVoid\u003e() {\n          @Override\n          public Void run() throws IOException {\n            TransferFsImage.doGetUrl(url, localPaths, storage, true);\n            assert tmpFile.exists();\n            boolean success \u003d false;\n            try {\n              success \u003d tmpFile.renameTo(storage.getInProgressEditLog(\n                  segment.getStartTxId()));\n            } finally {\n              if (!success) {\n                if (!tmpFile.delete()) {\n                  LOG.warn(\"Failed to delete temporary file \" + tmpFile);\n                }\n              }\n            }\n            return null;\n          }\n        });\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/Journal.java",
          "extendedDetails": {
            "oldValue": "[reqInfo-RequestInfo, segment-SegmentStateProto, url-URL]",
            "newValue": "[reqInfo-RequestInfo, segment-SegmentStateProto(modifiers-final), url-URL(modifiers-final)]"
          }
        }
      ]
    },
    "c95a1674b61ef2a6963dc64604986ef90a8c636d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3799. QJM: handle empty log segments during recovery. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1373183 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/08/12 5:57 PM",
      "commitName": "c95a1674b61ef2a6963dc64604986ef90a8c636d",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "14/08/12 5:54 PM",
      "commitNameOld": "4a9b3c693def87579298fb59b7df0b8892a3508e",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,27 @@\n   private void syncLog(RequestInfo reqInfo,\n       SegmentStateProto segment, URL url) throws IOException {\n     String tmpFileName \u003d\n         \"synclog_\" + segment.getStartTxId() + \"_\" +\n         reqInfo.getEpoch() + \".\" + reqInfo.getIpcSerialNumber();\n     \n     List\u003cFile\u003e localPaths \u003d storage.getFiles(null, tmpFileName);\n     assert localPaths.size() \u003d\u003d 1;\n     File tmpFile \u003d localPaths.get(0);\n  \n     boolean success \u003d false;\n \n     LOG.info(\"Synchronizing log \" +\n         TextFormat.shortDebugString(segment) + \" from \" + url);\n     TransferFsImage.doGetUrl(url, localPaths, storage, true);\n     assert tmpFile.exists();\n     try {\n       success \u003d tmpFile.renameTo(storage.getInProgressEditLog(\n           segment.getStartTxId()));\n-      if (success) {\n-        // If we\u0027re synchronizing the latest segment, update our cached\n-        // info.\n-        // TODO: can this be done more generally?\n-        if (curSegmentTxId \u003d\u003d segment.getStartTxId()) {\n-          nextTxId \u003d segment.getEndTxId() + 1;\n-        }\n-      }\n     } finally {\n       if (!success) {\n         if (!tmpFile.delete()) {\n           LOG.warn(\"Failed to delete temporary file \" + tmpFile);\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void syncLog(RequestInfo reqInfo,\n      SegmentStateProto segment, URL url) throws IOException {\n    String tmpFileName \u003d\n        \"synclog_\" + segment.getStartTxId() + \"_\" +\n        reqInfo.getEpoch() + \".\" + reqInfo.getIpcSerialNumber();\n    \n    List\u003cFile\u003e localPaths \u003d storage.getFiles(null, tmpFileName);\n    assert localPaths.size() \u003d\u003d 1;\n    File tmpFile \u003d localPaths.get(0);\n \n    boolean success \u003d false;\n\n    LOG.info(\"Synchronizing log \" +\n        TextFormat.shortDebugString(segment) + \" from \" + url);\n    TransferFsImage.doGetUrl(url, localPaths, storage, true);\n    assert tmpFile.exists();\n    try {\n      success \u003d tmpFile.renameTo(storage.getInProgressEditLog(\n          segment.getStartTxId()));\n    } finally {\n      if (!success) {\n        if (!tmpFile.delete()) {\n          LOG.warn(\"Failed to delete temporary file \" + tmpFile);\n        }\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/Journal.java",
      "extendedDetails": {}
    },
    "74d4573a23db5586c6e47ff2277aa7c35237da34": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-3077. Quorum-based protocol for reading and writing edit logs. Contributed by Todd Lipcon based on initial work from Brandon Li and Hari Mankude.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1363596 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/07/12 5:25 PM",
      "commitName": "74d4573a23db5586c6e47ff2277aa7c35237da34",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,35 @@\n+  private void syncLog(RequestInfo reqInfo,\n+      SegmentStateProto segment, URL url) throws IOException {\n+    String tmpFileName \u003d\n+        \"synclog_\" + segment.getStartTxId() + \"_\" +\n+        reqInfo.getEpoch() + \".\" + reqInfo.getIpcSerialNumber();\n+    \n+    List\u003cFile\u003e localPaths \u003d storage.getFiles(null, tmpFileName);\n+    assert localPaths.size() \u003d\u003d 1;\n+    File tmpFile \u003d localPaths.get(0);\n+ \n+    boolean success \u003d false;\n+\n+    LOG.info(\"Synchronizing log \" +\n+        TextFormat.shortDebugString(segment) + \" from \" + url);\n+    TransferFsImage.doGetUrl(url, localPaths, storage, true);\n+    assert tmpFile.exists();\n+    try {\n+      success \u003d tmpFile.renameTo(storage.getInProgressEditLog(\n+          segment.getStartTxId()));\n+      if (success) {\n+        // If we\u0027re synchronizing the latest segment, update our cached\n+        // info.\n+        // TODO: can this be done more generally?\n+        if (curSegmentTxId \u003d\u003d segment.getStartTxId()) {\n+          nextTxId \u003d segment.getEndTxId() + 1;\n+        }\n+      }\n+    } finally {\n+      if (!success) {\n+        if (!tmpFile.delete()) {\n+          LOG.warn(\"Failed to delete temporary file \" + tmpFile);\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void syncLog(RequestInfo reqInfo,\n      SegmentStateProto segment, URL url) throws IOException {\n    String tmpFileName \u003d\n        \"synclog_\" + segment.getStartTxId() + \"_\" +\n        reqInfo.getEpoch() + \".\" + reqInfo.getIpcSerialNumber();\n    \n    List\u003cFile\u003e localPaths \u003d storage.getFiles(null, tmpFileName);\n    assert localPaths.size() \u003d\u003d 1;\n    File tmpFile \u003d localPaths.get(0);\n \n    boolean success \u003d false;\n\n    LOG.info(\"Synchronizing log \" +\n        TextFormat.shortDebugString(segment) + \" from \" + url);\n    TransferFsImage.doGetUrl(url, localPaths, storage, true);\n    assert tmpFile.exists();\n    try {\n      success \u003d tmpFile.renameTo(storage.getInProgressEditLog(\n          segment.getStartTxId()));\n      if (success) {\n        // If we\u0027re synchronizing the latest segment, update our cached\n        // info.\n        // TODO: can this be done more generally?\n        if (curSegmentTxId \u003d\u003d segment.getStartTxId()) {\n          nextTxId \u003d segment.getEndTxId() + 1;\n        }\n      }\n    } finally {\n      if (!success) {\n        if (!tmpFile.delete()) {\n          LOG.warn(\"Failed to delete temporary file \" + tmpFile);\n        }\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/Journal.java"
    }
  }
}