{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RouterAdminServer.java",
  "functionName": "updateMountTableEntry",
  "functionId": "updateMountTableEntry___request-UpdateMountTableEntryRequest",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterAdminServer.java",
  "functionStartLine": 333,
  "functionEndLine": 373,
  "numCommitsSeen": 27,
  "timeTaken": 5044,
  "changeHistory": [
    "a3809d202300ce39c75e909fbc4640635dc334bc",
    "8730a7bf6025a3b2b7d6e6686533283b854af192",
    "aa938662f9cca7abd83a7c1be15c0636ae4344f1",
    "05704754a0a3af97311fe99792763cbb34608192",
    "89b102f916cf28b16b2a0a5009472a01b7f38484",
    "4244653e430374d77ce52e4791f5b4817092003a",
    "8f6f9d9c8398567064c9369f48213db63f45538c",
    "a922b9c82cc564e86dc0ef84bcc3597cb7b7c211",
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
    "b3e6bd22e3c02b3e4f50396538f56a1bcb007638"
  ],
  "changeHistoryShort": {
    "a3809d202300ce39c75e909fbc4640635dc334bc": "Ybodychange",
    "8730a7bf6025a3b2b7d6e6686533283b854af192": "Ybodychange",
    "aa938662f9cca7abd83a7c1be15c0636ae4344f1": "Ybodychange",
    "05704754a0a3af97311fe99792763cbb34608192": "Ybodychange",
    "89b102f916cf28b16b2a0a5009472a01b7f38484": "Ybodychange",
    "4244653e430374d77ce52e4791f5b4817092003a": "Ybodychange",
    "8f6f9d9c8398567064c9369f48213db63f45538c": "Ybodychange",
    "a922b9c82cc564e86dc0ef84bcc3597cb7b7c211": "Ybodychange",
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": "Yfilerename",
    "b3e6bd22e3c02b3e4f50396538f56a1bcb007638": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a3809d202300ce39c75e909fbc4640635dc334bc": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15082. RBF: Check each component length of destination path when add/update mount entry. Contributed by Xiaoqiao He.\n",
      "commitDate": "17/05/20 7:15 AM",
      "commitName": "a3809d202300ce39c75e909fbc4640635dc334bc",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "07/02/20 1:21 AM",
      "commitNameOld": "7dac7e1d13eaf0eac04fe805c7502dcecd597979",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 100.2,
      "commitsBetweenForRepo": 339,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,41 @@\n   public UpdateMountTableEntryResponse updateMountTableEntry(\n       UpdateMountTableEntryRequest request) throws IOException {\n     MountTable updateEntry \u003d request.getEntry();\n     MountTable oldEntry \u003d null;\n+    // Checks max component length limit.\n+    verifyMaxComponentLength(updateEntry);\n     if (this.router.getSubclusterResolver() instanceof MountTableResolver) {\n       MountTableResolver mResolver \u003d\n           (MountTableResolver) this.router.getSubclusterResolver();\n       oldEntry \u003d mResolver.getMountPoint(updateEntry.getSourcePath());\n     }\n     UpdateMountTableEntryResponse response \u003d getMountTableStore()\n         .updateMountTableEntry(request);\n     try {\n       if (updateEntry !\u003d null \u0026\u0026 router.isQuotaEnabled()) {\n         // update quota.\n         if (isQuotaUpdated(request, oldEntry)) {\n           synchronizeQuota(updateEntry.getSourcePath(),\n               updateEntry.getQuota().getQuota(),\n               updateEntry.getQuota().getSpaceQuota(), null);\n         }\n         // update storage type quota.\n         RouterQuotaUsage newQuota \u003d request.getEntry().getQuota();\n         boolean locationsChanged \u003d oldEntry \u003d\u003d null ||\n             !oldEntry.getDestinations().equals(updateEntry.getDestinations());\n         for (StorageType t : StorageType.values()) {\n           if (locationsChanged || oldEntry.getQuota().getTypeQuota(t)\n               !\u003d newQuota.getTypeQuota(t)) {\n             synchronizeQuota(updateEntry.getSourcePath(),\n                 HdfsConstants.QUOTA_DONT_SET, newQuota.getTypeQuota(t), t);\n           }\n         }\n       }\n     } catch (Exception e) {\n       // Ignore exception, if any while reseting quota. Specifically to handle\n       // if the actual destination doesn\u0027t exist.\n       LOG.warn(\"Unable to reset quota at the destinations for {}: {}\",\n           request.getEntry(), e.getMessage());\n     }\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public UpdateMountTableEntryResponse updateMountTableEntry(\n      UpdateMountTableEntryRequest request) throws IOException {\n    MountTable updateEntry \u003d request.getEntry();\n    MountTable oldEntry \u003d null;\n    // Checks max component length limit.\n    verifyMaxComponentLength(updateEntry);\n    if (this.router.getSubclusterResolver() instanceof MountTableResolver) {\n      MountTableResolver mResolver \u003d\n          (MountTableResolver) this.router.getSubclusterResolver();\n      oldEntry \u003d mResolver.getMountPoint(updateEntry.getSourcePath());\n    }\n    UpdateMountTableEntryResponse response \u003d getMountTableStore()\n        .updateMountTableEntry(request);\n    try {\n      if (updateEntry !\u003d null \u0026\u0026 router.isQuotaEnabled()) {\n        // update quota.\n        if (isQuotaUpdated(request, oldEntry)) {\n          synchronizeQuota(updateEntry.getSourcePath(),\n              updateEntry.getQuota().getQuota(),\n              updateEntry.getQuota().getSpaceQuota(), null);\n        }\n        // update storage type quota.\n        RouterQuotaUsage newQuota \u003d request.getEntry().getQuota();\n        boolean locationsChanged \u003d oldEntry \u003d\u003d null ||\n            !oldEntry.getDestinations().equals(updateEntry.getDestinations());\n        for (StorageType t : StorageType.values()) {\n          if (locationsChanged || oldEntry.getQuota().getTypeQuota(t)\n              !\u003d newQuota.getTypeQuota(t)) {\n            synchronizeQuota(updateEntry.getSourcePath(),\n                HdfsConstants.QUOTA_DONT_SET, newQuota.getTypeQuota(t), t);\n          }\n        }\n      }\n    } catch (Exception e) {\n      // Ignore exception, if any while reseting quota. Specifically to handle\n      // if the actual destination doesn\u0027t exist.\n      LOG.warn(\"Unable to reset quota at the destinations for {}: {}\",\n          request.getEntry(), e.getMessage());\n    }\n    return response;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterAdminServer.java",
      "extendedDetails": {}
    },
    "8730a7bf6025a3b2b7d6e6686533283b854af192": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15003. RBF: Make Router support storage type quota. Contributed by Jinglun.\n",
      "commitDate": "26/12/19 7:52 PM",
      "commitName": "8730a7bf6025a3b2b7d6e6686533283b854af192",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "14/12/19 4:27 AM",
      "commitNameOld": "72aee114f8b1feae4a187cce0aa5a8d2ff55f416",
      "commitAuthorOld": "Ayush Saxena",
      "daysBetweenCommits": 12.64,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,39 @@\n   public UpdateMountTableEntryResponse updateMountTableEntry(\n       UpdateMountTableEntryRequest request) throws IOException {\n     MountTable updateEntry \u003d request.getEntry();\n     MountTable oldEntry \u003d null;\n     if (this.router.getSubclusterResolver() instanceof MountTableResolver) {\n       MountTableResolver mResolver \u003d\n           (MountTableResolver) this.router.getSubclusterResolver();\n       oldEntry \u003d mResolver.getMountPoint(updateEntry.getSourcePath());\n     }\n     UpdateMountTableEntryResponse response \u003d getMountTableStore()\n         .updateMountTableEntry(request);\n     try {\n-      if (updateEntry !\u003d null \u0026\u0026 router.isQuotaEnabled()\n-          \u0026\u0026 isQuotaUpdated(request, oldEntry)) {\n-        synchronizeQuota(updateEntry.getSourcePath(),\n-            updateEntry.getQuota().getQuota(),\n-            updateEntry.getQuota().getSpaceQuota());\n+      if (updateEntry !\u003d null \u0026\u0026 router.isQuotaEnabled()) {\n+        // update quota.\n+        if (isQuotaUpdated(request, oldEntry)) {\n+          synchronizeQuota(updateEntry.getSourcePath(),\n+              updateEntry.getQuota().getQuota(),\n+              updateEntry.getQuota().getSpaceQuota(), null);\n+        }\n+        // update storage type quota.\n+        RouterQuotaUsage newQuota \u003d request.getEntry().getQuota();\n+        boolean locationsChanged \u003d oldEntry \u003d\u003d null ||\n+            !oldEntry.getDestinations().equals(updateEntry.getDestinations());\n+        for (StorageType t : StorageType.values()) {\n+          if (locationsChanged || oldEntry.getQuota().getTypeQuota(t)\n+              !\u003d newQuota.getTypeQuota(t)) {\n+            synchronizeQuota(updateEntry.getSourcePath(),\n+                HdfsConstants.QUOTA_DONT_SET, newQuota.getTypeQuota(t), t);\n+          }\n+        }\n       }\n     } catch (Exception e) {\n       // Ignore exception, if any while reseting quota. Specifically to handle\n       // if the actual destination doesn\u0027t exist.\n       LOG.warn(\"Unable to reset quota at the destinations for {}: {}\",\n           request.getEntry(), e.getMessage());\n     }\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public UpdateMountTableEntryResponse updateMountTableEntry(\n      UpdateMountTableEntryRequest request) throws IOException {\n    MountTable updateEntry \u003d request.getEntry();\n    MountTable oldEntry \u003d null;\n    if (this.router.getSubclusterResolver() instanceof MountTableResolver) {\n      MountTableResolver mResolver \u003d\n          (MountTableResolver) this.router.getSubclusterResolver();\n      oldEntry \u003d mResolver.getMountPoint(updateEntry.getSourcePath());\n    }\n    UpdateMountTableEntryResponse response \u003d getMountTableStore()\n        .updateMountTableEntry(request);\n    try {\n      if (updateEntry !\u003d null \u0026\u0026 router.isQuotaEnabled()) {\n        // update quota.\n        if (isQuotaUpdated(request, oldEntry)) {\n          synchronizeQuota(updateEntry.getSourcePath(),\n              updateEntry.getQuota().getQuota(),\n              updateEntry.getQuota().getSpaceQuota(), null);\n        }\n        // update storage type quota.\n        RouterQuotaUsage newQuota \u003d request.getEntry().getQuota();\n        boolean locationsChanged \u003d oldEntry \u003d\u003d null ||\n            !oldEntry.getDestinations().equals(updateEntry.getDestinations());\n        for (StorageType t : StorageType.values()) {\n          if (locationsChanged || oldEntry.getQuota().getTypeQuota(t)\n              !\u003d newQuota.getTypeQuota(t)) {\n            synchronizeQuota(updateEntry.getSourcePath(),\n                HdfsConstants.QUOTA_DONT_SET, newQuota.getTypeQuota(t), t);\n          }\n        }\n      }\n    } catch (Exception e) {\n      // Ignore exception, if any while reseting quota. Specifically to handle\n      // if the actual destination doesn\u0027t exist.\n      LOG.warn(\"Unable to reset quota at the destinations for {}: {}\",\n          request.getEntry(), e.getMessage());\n    }\n    return response;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterAdminServer.java",
      "extendedDetails": {}
    },
    "aa938662f9cca7abd83a7c1be15c0636ae4344f1": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14833. RBF: Router Update Doesn\u0027t Sync Quota. Contributed by Ayush Saxena.\n",
      "commitDate": "20/09/19 9:23 PM",
      "commitName": "aa938662f9cca7abd83a7c1be15c0636ae4344f1",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "04/09/19 2:39 AM",
      "commitNameOld": "05704754a0a3af97311fe99792763cbb34608192",
      "commitAuthorOld": "Surendra Singh Lilhore",
      "daysBetweenCommits": 16.78,
      "commitsBetweenForRepo": 143,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,26 @@\n   public UpdateMountTableEntryResponse updateMountTableEntry(\n       UpdateMountTableEntryRequest request) throws IOException {\n-\n+    MountTable updateEntry \u003d request.getEntry();\n+    MountTable oldEntry \u003d null;\n+    if (this.router.getSubclusterResolver() instanceof MountTableResolver) {\n+      MountTableResolver mResolver \u003d\n+          (MountTableResolver) this.router.getSubclusterResolver();\n+      oldEntry \u003d mResolver.getMountPoint(updateEntry.getSourcePath());\n+    }\n     UpdateMountTableEntryResponse response \u003d getMountTableStore()\n         .updateMountTableEntry(request);\n     try {\n-      MountTable mountTable \u003d request.getEntry();\n-      if (mountTable !\u003d null \u0026\u0026 router.isQuotaEnabled()\n-          \u0026\u0026 isQuotaUpdated(request, mountTable)) {\n-        synchronizeQuota(mountTable.getSourcePath(),\n-            mountTable.getQuota().getQuota(),\n-            mountTable.getQuota().getSpaceQuota());\n+      if (updateEntry !\u003d null \u0026\u0026 router.isQuotaEnabled()\n+          \u0026\u0026 isQuotaUpdated(request, oldEntry)) {\n+        synchronizeQuota(updateEntry.getSourcePath(),\n+            updateEntry.getQuota().getQuota(),\n+            updateEntry.getQuota().getSpaceQuota());\n       }\n     } catch (Exception e) {\n       // Ignore exception, if any while reseting quota. Specifically to handle\n       // if the actual destination doesn\u0027t exist.\n       LOG.warn(\"Unable to reset quota at the destinations for {}: {}\",\n           request.getEntry(), e.getMessage());\n     }\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public UpdateMountTableEntryResponse updateMountTableEntry(\n      UpdateMountTableEntryRequest request) throws IOException {\n    MountTable updateEntry \u003d request.getEntry();\n    MountTable oldEntry \u003d null;\n    if (this.router.getSubclusterResolver() instanceof MountTableResolver) {\n      MountTableResolver mResolver \u003d\n          (MountTableResolver) this.router.getSubclusterResolver();\n      oldEntry \u003d mResolver.getMountPoint(updateEntry.getSourcePath());\n    }\n    UpdateMountTableEntryResponse response \u003d getMountTableStore()\n        .updateMountTableEntry(request);\n    try {\n      if (updateEntry !\u003d null \u0026\u0026 router.isQuotaEnabled()\n          \u0026\u0026 isQuotaUpdated(request, oldEntry)) {\n        synchronizeQuota(updateEntry.getSourcePath(),\n            updateEntry.getQuota().getQuota(),\n            updateEntry.getQuota().getSpaceQuota());\n      }\n    } catch (Exception e) {\n      // Ignore exception, if any while reseting quota. Specifically to handle\n      // if the actual destination doesn\u0027t exist.\n      LOG.warn(\"Unable to reset quota at the destinations for {}: {}\",\n          request.getEntry(), e.getMessage());\n    }\n    return response;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterAdminServer.java",
      "extendedDetails": {}
    },
    "05704754a0a3af97311fe99792763cbb34608192": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14777. RBF: Set ReadOnly is failing for mount Table but actually readonly succeed to set. Contributed by Ranith Sardar.\n",
      "commitDate": "04/09/19 2:39 AM",
      "commitName": "05704754a0a3af97311fe99792763cbb34608192",
      "commitAuthor": "Surendra Singh Lilhore",
      "commitDateOld": "31/07/19 8:13 PM",
      "commitNameOld": "89b102f916cf28b16b2a0a5009472a01b7f38484",
      "commitAuthorOld": "Ayush Saxena",
      "daysBetweenCommits": 34.27,
      "commitsBetweenForRepo": 341,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,21 @@\n   public UpdateMountTableEntryResponse updateMountTableEntry(\n       UpdateMountTableEntryRequest request) throws IOException {\n-    UpdateMountTableEntryResponse response \u003d\n-        getMountTableStore().updateMountTableEntry(request);\n+\n+    UpdateMountTableEntryResponse response \u003d getMountTableStore()\n+        .updateMountTableEntry(request);\n     try {\n       MountTable mountTable \u003d request.getEntry();\n-      if (mountTable !\u003d null \u0026\u0026 router.isQuotaEnabled()) {\n+      if (mountTable !\u003d null \u0026\u0026 router.isQuotaEnabled()\n+          \u0026\u0026 isQuotaUpdated(request, mountTable)) {\n         synchronizeQuota(mountTable.getSourcePath(),\n             mountTable.getQuota().getQuota(),\n             mountTable.getQuota().getSpaceQuota());\n       }\n     } catch (Exception e) {\n       // Ignore exception, if any while reseting quota. Specifically to handle\n       // if the actual destination doesn\u0027t exist.\n       LOG.warn(\"Unable to reset quota at the destinations for {}: {}\",\n-          request.getEntry().toString(), e.getMessage());\n+          request.getEntry(), e.getMessage());\n     }\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public UpdateMountTableEntryResponse updateMountTableEntry(\n      UpdateMountTableEntryRequest request) throws IOException {\n\n    UpdateMountTableEntryResponse response \u003d getMountTableStore()\n        .updateMountTableEntry(request);\n    try {\n      MountTable mountTable \u003d request.getEntry();\n      if (mountTable !\u003d null \u0026\u0026 router.isQuotaEnabled()\n          \u0026\u0026 isQuotaUpdated(request, mountTable)) {\n        synchronizeQuota(mountTable.getSourcePath(),\n            mountTable.getQuota().getQuota(),\n            mountTable.getQuota().getSpaceQuota());\n      }\n    } catch (Exception e) {\n      // Ignore exception, if any while reseting quota. Specifically to handle\n      // if the actual destination doesn\u0027t exist.\n      LOG.warn(\"Unable to reset quota at the destinations for {}: {}\",\n          request.getEntry(), e.getMessage());\n    }\n    return response;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterAdminServer.java",
      "extendedDetails": {}
    },
    "89b102f916cf28b16b2a0a5009472a01b7f38484": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14661. RBF: updateMountTableEntry shouldn\u0027t update mountTableEntry if targetPath not exist. Contributed by xuzq.\n",
      "commitDate": "31/07/19 8:13 PM",
      "commitName": "89b102f916cf28b16b2a0a5009472a01b7f38484",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "24/06/19 9:33 AM",
      "commitNameOld": "6cdf8db55ca42ab11cfb21081934e20976f91f12",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 37.44,
      "commitsBetweenForRepo": 275,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,19 @@\n   public UpdateMountTableEntryResponse updateMountTableEntry(\n       UpdateMountTableEntryRequest request) throws IOException {\n     UpdateMountTableEntryResponse response \u003d\n         getMountTableStore().updateMountTableEntry(request);\n-\n-    MountTable mountTable \u003d request.getEntry();\n-    if (mountTable !\u003d null \u0026\u0026 router.isQuotaEnabled()) {\n-      synchronizeQuota(mountTable.getSourcePath(),\n-          mountTable.getQuota().getQuota(),\n-          mountTable.getQuota().getSpaceQuota());\n+    try {\n+      MountTable mountTable \u003d request.getEntry();\n+      if (mountTable !\u003d null \u0026\u0026 router.isQuotaEnabled()) {\n+        synchronizeQuota(mountTable.getSourcePath(),\n+            mountTable.getQuota().getQuota(),\n+            mountTable.getQuota().getSpaceQuota());\n+      }\n+    } catch (Exception e) {\n+      // Ignore exception, if any while reseting quota. Specifically to handle\n+      // if the actual destination doesn\u0027t exist.\n+      LOG.warn(\"Unable to reset quota at the destinations for {}: {}\",\n+          request.getEntry().toString(), e.getMessage());\n     }\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public UpdateMountTableEntryResponse updateMountTableEntry(\n      UpdateMountTableEntryRequest request) throws IOException {\n    UpdateMountTableEntryResponse response \u003d\n        getMountTableStore().updateMountTableEntry(request);\n    try {\n      MountTable mountTable \u003d request.getEntry();\n      if (mountTable !\u003d null \u0026\u0026 router.isQuotaEnabled()) {\n        synchronizeQuota(mountTable.getSourcePath(),\n            mountTable.getQuota().getQuota(),\n            mountTable.getQuota().getSpaceQuota());\n      }\n    } catch (Exception e) {\n      // Ignore exception, if any while reseting quota. Specifically to handle\n      // if the actual destination doesn\u0027t exist.\n      LOG.warn(\"Unable to reset quota at the destinations for {}: {}\",\n          request.getEntry().toString(), e.getMessage());\n    }\n    return response;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterAdminServer.java",
      "extendedDetails": {}
    },
    "4244653e430374d77ce52e4791f5b4817092003a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14150. RBF: Quotas of the sub-cluster should be removed when removing the mount point. Contributed by Takanobu Asanuma.\n",
      "commitDate": "24/06/19 9:33 AM",
      "commitName": "4244653e430374d77ce52e4791f5b4817092003a",
      "commitAuthor": "Yiqun Lin",
      "commitDateOld": "24/06/19 9:33 AM",
      "commitNameOld": "8f6f9d9c8398567064c9369f48213db63f45538c",
      "commitAuthorOld": "Yiqun Lin",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,13 @@\n   public UpdateMountTableEntryResponse updateMountTableEntry(\n       UpdateMountTableEntryRequest request) throws IOException {\n     UpdateMountTableEntryResponse response \u003d\n         getMountTableStore().updateMountTableEntry(request);\n \n     MountTable mountTable \u003d request.getEntry();\n     if (mountTable !\u003d null \u0026\u0026 router.isQuotaEnabled()) {\n-      synchronizeQuota(mountTable);\n+      synchronizeQuota(mountTable.getSourcePath(),\n+          mountTable.getQuota().getQuota(),\n+          mountTable.getQuota().getSpaceQuota());\n     }\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public UpdateMountTableEntryResponse updateMountTableEntry(\n      UpdateMountTableEntryRequest request) throws IOException {\n    UpdateMountTableEntryResponse response \u003d\n        getMountTableStore().updateMountTableEntry(request);\n\n    MountTable mountTable \u003d request.getEntry();\n    if (mountTable !\u003d null \u0026\u0026 router.isQuotaEnabled()) {\n      synchronizeQuota(mountTable.getSourcePath(),\n          mountTable.getQuota().getQuota(),\n          mountTable.getQuota().getSpaceQuota());\n    }\n    return response;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterAdminServer.java",
      "extendedDetails": {}
    },
    "8f6f9d9c8398567064c9369f48213db63f45538c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13443. RBF: Update mount table cache immediately after changing (add/update/remove) mount table entries. Contributed by Mohammad Arshad.\n",
      "commitDate": "24/06/19 9:33 AM",
      "commitName": "8f6f9d9c8398567064c9369f48213db63f45538c",
      "commitAuthor": "Yiqun Lin",
      "commitDateOld": "24/06/19 9:33 AM",
      "commitNameOld": "6f2c871b05b97ea0e18f3c431af8b0d606f88561",
      "commitAuthorOld": "Brahma Reddy Battula",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,11 @@\n   public UpdateMountTableEntryResponse updateMountTableEntry(\n       UpdateMountTableEntryRequest request) throws IOException {\n     UpdateMountTableEntryResponse response \u003d\n         getMountTableStore().updateMountTableEntry(request);\n \n     MountTable mountTable \u003d request.getEntry();\n-    if (mountTable !\u003d null) {\n+    if (mountTable !\u003d null \u0026\u0026 router.isQuotaEnabled()) {\n       synchronizeQuota(mountTable);\n     }\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public UpdateMountTableEntryResponse updateMountTableEntry(\n      UpdateMountTableEntryRequest request) throws IOException {\n    UpdateMountTableEntryResponse response \u003d\n        getMountTableStore().updateMountTableEntry(request);\n\n    MountTable mountTable \u003d request.getEntry();\n    if (mountTable !\u003d null \u0026\u0026 router.isQuotaEnabled()) {\n      synchronizeQuota(mountTable);\n    }\n    return response;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterAdminServer.java",
      "extendedDetails": {}
    },
    "a922b9c82cc564e86dc0ef84bcc3597cb7b7c211": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13346. RBF: Fix synchronization of router quota and nameservice quota.\n",
      "commitDate": "10/05/18 11:51 PM",
      "commitName": "a922b9c82cc564e86dc0ef84bcc3597cb7b7c211",
      "commitAuthor": "Yiqun Lin",
      "commitDateOld": "26/04/18 1:54 PM",
      "commitNameOld": "48269c370c8981244b9d3d5cf1c82a2897ca502e",
      "commitAuthorOld": "Yiqun Lin",
      "daysBetweenCommits": 14.41,
      "commitsBetweenForRepo": 113,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,4 +1,11 @@\n   public UpdateMountTableEntryResponse updateMountTableEntry(\n       UpdateMountTableEntryRequest request) throws IOException {\n-    return getMountTableStore().updateMountTableEntry(request);\n+    UpdateMountTableEntryResponse response \u003d\n+        getMountTableStore().updateMountTableEntry(request);\n+\n+    MountTable mountTable \u003d request.getEntry();\n+    if (mountTable !\u003d null) {\n+      synchronizeQuota(mountTable);\n+    }\n+    return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public UpdateMountTableEntryResponse updateMountTableEntry(\n      UpdateMountTableEntryRequest request) throws IOException {\n    UpdateMountTableEntryResponse response \u003d\n        getMountTableStore().updateMountTableEntry(request);\n\n    MountTable mountTable \u003d request.getEntry();\n    if (mountTable !\u003d null) {\n      synchronizeQuota(mountTable);\n    }\n    return response;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterAdminServer.java",
      "extendedDetails": {}
    },
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-13215. RBF: Move Router to its own module. Contributed by Wei Yan\n",
      "commitDate": "19/03/18 10:13 PM",
      "commitName": "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
      "commitAuthor": "weiy",
      "commitDateOld": "19/03/18 5:19 PM",
      "commitNameOld": "e65ff1c8be48ef4f04ed96f96ac4caef4974944d",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.2,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public UpdateMountTableEntryResponse updateMountTableEntry(\n      UpdateMountTableEntryRequest request) throws IOException {\n    return getMountTableStore().updateMountTableEntry(request);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterAdminServer.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterAdminServer.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterAdminServer.java"
      }
    },
    "b3e6bd22e3c02b3e4f50396538f56a1bcb007638": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-10646. Federation admin tool. Contributed by Inigo Goiri.\n\n(cherry picked from commit ae27e31fbcf546481db0b0345772db2e9132372e)\n",
      "commitDate": "06/10/17 6:50 PM",
      "commitName": "b3e6bd22e3c02b3e4f50396538f56a1bcb007638",
      "commitAuthor": "Inigo Goiri",
      "diff": "@@ -0,0 +1,4 @@\n+  public UpdateMountTableEntryResponse updateMountTableEntry(\n+      UpdateMountTableEntryRequest request) throws IOException {\n+    return getMountTableStore().updateMountTableEntry(request);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public UpdateMountTableEntryResponse updateMountTableEntry(\n      UpdateMountTableEntryRequest request) throws IOException {\n    return getMountTableStore().updateMountTableEntry(request);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/router/RouterAdminServer.java"
    }
  }
}