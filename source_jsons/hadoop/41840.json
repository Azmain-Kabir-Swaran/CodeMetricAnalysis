{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ClusterNodeTracker.java",
  "functionName": "getNodesByResourceName",
  "functionId": "getNodesByResourceName___resourceName-String(modifiers-final)",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/ClusterNodeTracker.java",
  "functionStartLine": 414,
  "functionEndLine": 429,
  "numCommitsSeen": 17,
  "timeTaken": 1160,
  "changeHistory": [
    "9bae6720cb8432efd78c909dc624c00e367cedf5",
    "cda0a280ddd0c77af93d236fc80478c16bbe809a"
  ],
  "changeHistoryShort": {
    "9bae6720cb8432efd78c909dc624c00e367cedf5": "Ybodychange",
    "cda0a280ddd0c77af93d236fc80478c16bbe809a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9bae6720cb8432efd78c909dc624c00e367cedf5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6050. AMs can\u0027t be scheduled on racks or nodes (rkanter)\n",
      "commitDate": "27/03/17 5:23 PM",
      "commitName": "9bae6720cb8432efd78c909dc624c00e367cedf5",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "19/07/16 10:43 AM",
      "commitNameOld": "cda0a280ddd0c77af93d236fc80478c16bbe809a",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 251.28,
      "commitsBetweenForRepo": 1587,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,16 @@\n   public List\u003cN\u003e getNodesByResourceName(final String resourceName) {\n     Preconditions.checkArgument(\n         resourceName !\u003d null \u0026\u0026 !resourceName.isEmpty());\n     List\u003cN\u003e retNodes \u003d new ArrayList\u003c\u003e();\n     if (ResourceRequest.ANY.equals(resourceName)) {\n-      return getAllNodes();\n+      retNodes.addAll(getAllNodes());\n     } else if (nodeNameToNodeMap.containsKey(resourceName)) {\n       retNodes.add(nodeNameToNodeMap.get(resourceName));\n     } else if (nodesPerRack.containsKey(resourceName)) {\n-      return nodesPerRack.get(resourceName);\n+      retNodes.addAll(nodesPerRack.get(resourceName));\n     } else {\n       LOG.info(\n           \"Could not find a node matching given resourceName \" + resourceName);\n     }\n     return retNodes;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cN\u003e getNodesByResourceName(final String resourceName) {\n    Preconditions.checkArgument(\n        resourceName !\u003d null \u0026\u0026 !resourceName.isEmpty());\n    List\u003cN\u003e retNodes \u003d new ArrayList\u003c\u003e();\n    if (ResourceRequest.ANY.equals(resourceName)) {\n      retNodes.addAll(getAllNodes());\n    } else if (nodeNameToNodeMap.containsKey(resourceName)) {\n      retNodes.add(nodeNameToNodeMap.get(resourceName));\n    } else if (nodesPerRack.containsKey(resourceName)) {\n      retNodes.addAll(nodesPerRack.get(resourceName));\n    } else {\n      LOG.info(\n          \"Could not find a node matching given resourceName \" + resourceName);\n    }\n    return retNodes;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/ClusterNodeTracker.java",
      "extendedDetails": {}
    },
    "cda0a280ddd0c77af93d236fc80478c16bbe809a": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5181. ClusterNodeTracker: add method to get list of nodes matching a specific resourceName. (kasha via asuresh)\n",
      "commitDate": "19/07/16 10:43 AM",
      "commitName": "cda0a280ddd0c77af93d236fc80478c16bbe809a",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,16 @@\n+  public List\u003cN\u003e getNodesByResourceName(final String resourceName) {\n+    Preconditions.checkArgument(\n+        resourceName !\u003d null \u0026\u0026 !resourceName.isEmpty());\n+    List\u003cN\u003e retNodes \u003d new ArrayList\u003c\u003e();\n+    if (ResourceRequest.ANY.equals(resourceName)) {\n+      return getAllNodes();\n+    } else if (nodeNameToNodeMap.containsKey(resourceName)) {\n+      retNodes.add(nodeNameToNodeMap.get(resourceName));\n+    } else if (nodesPerRack.containsKey(resourceName)) {\n+      return nodesPerRack.get(resourceName);\n+    } else {\n+      LOG.info(\n+          \"Could not find a node matching given resourceName \" + resourceName);\n+    }\n+    return retNodes;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cN\u003e getNodesByResourceName(final String resourceName) {\n    Preconditions.checkArgument(\n        resourceName !\u003d null \u0026\u0026 !resourceName.isEmpty());\n    List\u003cN\u003e retNodes \u003d new ArrayList\u003c\u003e();\n    if (ResourceRequest.ANY.equals(resourceName)) {\n      return getAllNodes();\n    } else if (nodeNameToNodeMap.containsKey(resourceName)) {\n      retNodes.add(nodeNameToNodeMap.get(resourceName));\n    } else if (nodesPerRack.containsKey(resourceName)) {\n      return nodesPerRack.get(resourceName);\n    } else {\n      LOG.info(\n          \"Could not find a node matching given resourceName \" + resourceName);\n    }\n    return retNodes;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/ClusterNodeTracker.java"
    }
  }
}