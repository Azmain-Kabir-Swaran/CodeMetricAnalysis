{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LegacyTaskRuntimeEstimator.java",
  "functionName": "updateAttempt",
  "functionId": "updateAttempt___status-TaskAttemptStatus__timestamp-long",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/speculate/LegacyTaskRuntimeEstimator.java",
  "functionStartLine": 45,
  "functionEndLine": 115,
  "numCommitsSeen": 2,
  "timeTaken": 6895,
  "changeHistory": [
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void updateAttempt(TaskAttemptStatus status, long timestamp) {\n    super.updateAttempt(status, timestamp);\n    \n\n    TaskAttemptId attemptID \u003d status.id;\n    TaskId taskID \u003d attemptID.getTaskId();\n    JobId jobID \u003d taskID.getJobId();\n    Job job \u003d context.getJob(jobID);\n\n    if (job \u003d\u003d null) {\n      return;\n    }\n\n    Task task \u003d job.getTask(taskID);\n\n    if (task \u003d\u003d null) {\n      return;\n    }\n\n    TaskAttempt taskAttempt \u003d task.getAttempt(attemptID);\n\n    if (taskAttempt \u003d\u003d null) {\n      return;\n    }\n\n    Long boxedStart \u003d startTimes.get(attemptID);\n    long start \u003d boxedStart \u003d\u003d null ? Long.MIN_VALUE : boxedStart;\n\n    // We need to do two things.\n    //  1: If this is a completion, we accumulate statistics in the superclass\n    //  2: If this is not a completion, we learn more about it.\n\n    // This is not a completion, but we\u0027re cooking.\n    //\n    if (taskAttempt.getState() \u003d\u003d TaskAttemptState.RUNNING) {\n      // See if this task is already in the registry\n      AtomicLong estimateContainer \u003d attemptRuntimeEstimates.get(taskAttempt);\n      AtomicLong estimateVarianceContainer\n          \u003d attemptRuntimeEstimateVariances.get(taskAttempt);\n\n      if (estimateContainer \u003d\u003d null) {\n        if (attemptRuntimeEstimates.get(taskAttempt) \u003d\u003d null) {\n          attemptRuntimeEstimates.put(taskAttempt, new AtomicLong());\n\n          estimateContainer \u003d attemptRuntimeEstimates.get(taskAttempt);\n        }\n      }\n\n      if (estimateVarianceContainer \u003d\u003d null) {\n        attemptRuntimeEstimateVariances.putIfAbsent(taskAttempt, new AtomicLong());\n        estimateVarianceContainer \u003d attemptRuntimeEstimateVariances.get(taskAttempt);\n      }\n\n\n      long estimate \u003d -1;\n      long varianceEstimate \u003d -1;\n\n      // This code assumes that we\u0027ll never consider starting a third\n      //  speculative task attempt if two are already running for this task\n      if (start \u003e 0 \u0026\u0026 timestamp \u003e start) {\n        estimate \u003d (long) ((timestamp - start) / Math.max(0.0001, status.progress));\n        varianceEstimate \u003d (long) (estimate * status.progress / 10);\n      }\n      if (estimateContainer !\u003d null) {\n        estimateContainer.set(estimate);\n      }\n      if (estimateVarianceContainer !\u003d null) {\n        estimateVarianceContainer.set(varianceEstimate);\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/speculate/LegacyTaskRuntimeEstimator.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/speculate/LegacyTaskRuntimeEstimator.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/speculate/LegacyTaskRuntimeEstimator.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,71 @@\n+  public void updateAttempt(TaskAttemptStatus status, long timestamp) {\n+    super.updateAttempt(status, timestamp);\n+    \n+\n+    TaskAttemptId attemptID \u003d status.id;\n+    TaskId taskID \u003d attemptID.getTaskId();\n+    JobId jobID \u003d taskID.getJobId();\n+    Job job \u003d context.getJob(jobID);\n+\n+    if (job \u003d\u003d null) {\n+      return;\n+    }\n+\n+    Task task \u003d job.getTask(taskID);\n+\n+    if (task \u003d\u003d null) {\n+      return;\n+    }\n+\n+    TaskAttempt taskAttempt \u003d task.getAttempt(attemptID);\n+\n+    if (taskAttempt \u003d\u003d null) {\n+      return;\n+    }\n+\n+    Long boxedStart \u003d startTimes.get(attemptID);\n+    long start \u003d boxedStart \u003d\u003d null ? Long.MIN_VALUE : boxedStart;\n+\n+    // We need to do two things.\n+    //  1: If this is a completion, we accumulate statistics in the superclass\n+    //  2: If this is not a completion, we learn more about it.\n+\n+    // This is not a completion, but we\u0027re cooking.\n+    //\n+    if (taskAttempt.getState() \u003d\u003d TaskAttemptState.RUNNING) {\n+      // See if this task is already in the registry\n+      AtomicLong estimateContainer \u003d attemptRuntimeEstimates.get(taskAttempt);\n+      AtomicLong estimateVarianceContainer\n+          \u003d attemptRuntimeEstimateVariances.get(taskAttempt);\n+\n+      if (estimateContainer \u003d\u003d null) {\n+        if (attemptRuntimeEstimates.get(taskAttempt) \u003d\u003d null) {\n+          attemptRuntimeEstimates.put(taskAttempt, new AtomicLong());\n+\n+          estimateContainer \u003d attemptRuntimeEstimates.get(taskAttempt);\n+        }\n+      }\n+\n+      if (estimateVarianceContainer \u003d\u003d null) {\n+        attemptRuntimeEstimateVariances.putIfAbsent(taskAttempt, new AtomicLong());\n+        estimateVarianceContainer \u003d attemptRuntimeEstimateVariances.get(taskAttempt);\n+      }\n+\n+\n+      long estimate \u003d -1;\n+      long varianceEstimate \u003d -1;\n+\n+      // This code assumes that we\u0027ll never consider starting a third\n+      //  speculative task attempt if two are already running for this task\n+      if (start \u003e 0 \u0026\u0026 timestamp \u003e start) {\n+        estimate \u003d (long) ((timestamp - start) / Math.max(0.0001, status.progress));\n+        varianceEstimate \u003d (long) (estimate * status.progress / 10);\n+      }\n+      if (estimateContainer !\u003d null) {\n+        estimateContainer.set(estimate);\n+      }\n+      if (estimateVarianceContainer !\u003d null) {\n+        estimateVarianceContainer.set(varianceEstimate);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateAttempt(TaskAttemptStatus status, long timestamp) {\n    super.updateAttempt(status, timestamp);\n    \n\n    TaskAttemptId attemptID \u003d status.id;\n    TaskId taskID \u003d attemptID.getTaskId();\n    JobId jobID \u003d taskID.getJobId();\n    Job job \u003d context.getJob(jobID);\n\n    if (job \u003d\u003d null) {\n      return;\n    }\n\n    Task task \u003d job.getTask(taskID);\n\n    if (task \u003d\u003d null) {\n      return;\n    }\n\n    TaskAttempt taskAttempt \u003d task.getAttempt(attemptID);\n\n    if (taskAttempt \u003d\u003d null) {\n      return;\n    }\n\n    Long boxedStart \u003d startTimes.get(attemptID);\n    long start \u003d boxedStart \u003d\u003d null ? Long.MIN_VALUE : boxedStart;\n\n    // We need to do two things.\n    //  1: If this is a completion, we accumulate statistics in the superclass\n    //  2: If this is not a completion, we learn more about it.\n\n    // This is not a completion, but we\u0027re cooking.\n    //\n    if (taskAttempt.getState() \u003d\u003d TaskAttemptState.RUNNING) {\n      // See if this task is already in the registry\n      AtomicLong estimateContainer \u003d attemptRuntimeEstimates.get(taskAttempt);\n      AtomicLong estimateVarianceContainer\n          \u003d attemptRuntimeEstimateVariances.get(taskAttempt);\n\n      if (estimateContainer \u003d\u003d null) {\n        if (attemptRuntimeEstimates.get(taskAttempt) \u003d\u003d null) {\n          attemptRuntimeEstimates.put(taskAttempt, new AtomicLong());\n\n          estimateContainer \u003d attemptRuntimeEstimates.get(taskAttempt);\n        }\n      }\n\n      if (estimateVarianceContainer \u003d\u003d null) {\n        attemptRuntimeEstimateVariances.putIfAbsent(taskAttempt, new AtomicLong());\n        estimateVarianceContainer \u003d attemptRuntimeEstimateVariances.get(taskAttempt);\n      }\n\n\n      long estimate \u003d -1;\n      long varianceEstimate \u003d -1;\n\n      // This code assumes that we\u0027ll never consider starting a third\n      //  speculative task attempt if two are already running for this task\n      if (start \u003e 0 \u0026\u0026 timestamp \u003e start) {\n        estimate \u003d (long) ((timestamp - start) / Math.max(0.0001, status.progress));\n        varianceEstimate \u003d (long) (estimate * status.progress / 10);\n      }\n      if (estimateContainer !\u003d null) {\n        estimateContainer.set(estimate);\n      }\n      if (estimateVarianceContainer !\u003d null) {\n        estimateVarianceContainer.set(varianceEstimate);\n      }\n    }\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/speculate/LegacyTaskRuntimeEstimator.java"
    }
  }
}