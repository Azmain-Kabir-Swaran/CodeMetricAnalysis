{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ElasticByteBufferPool.java",
  "functionName": "putBuffer",
  "functionId": "putBuffer___buffer-ByteBuffer",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/ElasticByteBufferPool.java",
  "functionStartLine": 103,
  "functionEndLine": 118,
  "numCommitsSeen": 5,
  "timeTaken": 1224,
  "changeHistory": [
    "b5af9be72c72734d668f817c99d889031922a951",
    "eccdb9aa8bcdee750583d16a1253f1c5faabd036"
  ],
  "changeHistoryShort": {
    "b5af9be72c72734d668f817c99d889031922a951": "Ybodychange",
    "eccdb9aa8bcdee750583d16a1253f1c5faabd036": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b5af9be72c72734d668f817c99d889031922a951": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8668. Erasure Coding: revisit buffer used for encoding and decoding. Contributed by Sammi Chen\n",
      "commitDate": "12/08/16 10:52 PM",
      "commitName": "b5af9be72c72734d668f817c99d889031922a951",
      "commitAuthor": "Kai Zheng",
      "commitDateOld": "27/09/13 3:51 PM",
      "commitNameOld": "eccdb9aa8bcdee750583d16a1253f1c5faabd036",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 1050.29,
      "commitsBetweenForRepo": 8039,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,16 @@\n   public synchronized void putBuffer(ByteBuffer buffer) {\n+    buffer.clear();\n     TreeMap\u003cKey, ByteBuffer\u003e tree \u003d getBufferTree(buffer.isDirect());\n     while (true) {\n       Key key \u003d new Key(buffer.capacity(), System.nanoTime());\n       if (!tree.containsKey(key)) {\n         tree.put(key, buffer);\n         return;\n       }\n       // Buffers are indexed by (capacity, time).\n       // If our key is not unique on the first try, we try again, since the\n       // time will be different.  Since we use nanoseconds, it\u0027s pretty\n       // unlikely that we\u0027ll loop even once, unless the system clock has a\n       // poor granularity.\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void putBuffer(ByteBuffer buffer) {\n    buffer.clear();\n    TreeMap\u003cKey, ByteBuffer\u003e tree \u003d getBufferTree(buffer.isDirect());\n    while (true) {\n      Key key \u003d new Key(buffer.capacity(), System.nanoTime());\n      if (!tree.containsKey(key)) {\n        tree.put(key, buffer);\n        return;\n      }\n      // Buffers are indexed by (capacity, time).\n      // If our key is not unique on the first try, we try again, since the\n      // time will be different.  Since we use nanoseconds, it\u0027s pretty\n      // unlikely that we\u0027ll loop even once, unless the system clock has a\n      // poor granularity.\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/ElasticByteBufferPool.java",
      "extendedDetails": {}
    },
    "eccdb9aa8bcdee750583d16a1253f1c5faabd036": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5260. Merge zero-copy memory-mapped HDFS client reads to trunk and branch-2. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1527113 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/09/13 3:51 PM",
      "commitName": "eccdb9aa8bcdee750583d16a1253f1c5faabd036",
      "commitAuthor": "Chris Nauroth",
      "diff": "@@ -0,0 +1,15 @@\n+  public synchronized void putBuffer(ByteBuffer buffer) {\n+    TreeMap\u003cKey, ByteBuffer\u003e tree \u003d getBufferTree(buffer.isDirect());\n+    while (true) {\n+      Key key \u003d new Key(buffer.capacity(), System.nanoTime());\n+      if (!tree.containsKey(key)) {\n+        tree.put(key, buffer);\n+        return;\n+      }\n+      // Buffers are indexed by (capacity, time).\n+      // If our key is not unique on the first try, we try again, since the\n+      // time will be different.  Since we use nanoseconds, it\u0027s pretty\n+      // unlikely that we\u0027ll loop even once, unless the system clock has a\n+      // poor granularity.\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void putBuffer(ByteBuffer buffer) {\n    TreeMap\u003cKey, ByteBuffer\u003e tree \u003d getBufferTree(buffer.isDirect());\n    while (true) {\n      Key key \u003d new Key(buffer.capacity(), System.nanoTime());\n      if (!tree.containsKey(key)) {\n        tree.put(key, buffer);\n        return;\n      }\n      // Buffers are indexed by (capacity, time).\n      // If our key is not unique on the first try, we try again, since the\n      // time will be different.  Since we use nanoseconds, it\u0027s pretty\n      // unlikely that we\u0027ll loop even once, unless the system clock has a\n      // poor granularity.\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/ElasticByteBufferPool.java"
    }
  }
}