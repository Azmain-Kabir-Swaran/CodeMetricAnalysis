{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NMLeveldbStateStoreService.java",
  "functionName": "loadContainerTokensState",
  "functionId": "loadContainerTokensState",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/recovery/NMLeveldbStateStoreService.java",
  "functionStartLine": 1304,
  "functionEndLine": 1313,
  "numCommitsSeen": 48,
  "timeTaken": 2849,
  "changeHistory": [
    "65e7469712be6cf393e29ef73cc94727eec81227",
    "2050e0dad661bade3e140d7a5692cfe1999badc3",
    "403ec8ea80d59f209823a7370dc8185fa2c1c368"
  ],
  "changeHistoryShort": {
    "65e7469712be6cf393e29ef73cc94727eec81227": "Ybodychange",
    "2050e0dad661bade3e140d7a5692cfe1999badc3": "Ymultichange(Yrename,Yreturntypechange,Ybodychange)",
    "403ec8ea80d59f209823a7370dc8185fa2c1c368": "Yintroduced"
  },
  "changeHistoryDetails": {
    "65e7469712be6cf393e29ef73cc94727eec81227": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8242. YARN NM: OOM error while reading back the state store on recovery. Contributed by Pradeep Ambati and Kanwaljeet Sachdev\n",
      "commitDate": "20/08/18 8:14 AM",
      "commitName": "65e7469712be6cf393e29ef73cc94727eec81227",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "28/07/18 8:22 AM",
      "commitNameOld": "3d586841aba99c7df98b2b4d3e48ec0144bad086",
      "commitAuthorOld": "bibinchundatt",
      "daysBetweenCommits": 22.99,
      "commitsBetweenForRepo": 209,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,10 @@\n   public RecoveredContainerTokensState loadContainerTokensState()\n       throws IOException {\n     RecoveredContainerTokensState state \u003d new RecoveredContainerTokensState();\n-    state.activeTokens \u003d new HashMap\u003cContainerId, Long\u003e();\n-    LeveldbIterator iter \u003d null;\n-    try {\n-      iter \u003d new LeveldbIterator(db);\n-      iter.seek(bytes(CONTAINER_TOKENS_KEY_PREFIX));\n-      final int containerTokensKeyPrefixLength \u003d\n-          CONTAINER_TOKENS_KEY_PREFIX.length();\n-      while (iter.hasNext()) {\n-        Entry\u003cbyte[], byte[]\u003e entry \u003d iter.next();\n-        String fullKey \u003d asString(entry.getKey());\n-        if (!fullKey.startsWith(CONTAINER_TOKENS_KEY_PREFIX)) {\n-          break;\n-        }\n-        String key \u003d fullKey.substring(containerTokensKeyPrefixLength);\n-        if (key.equals(CURRENT_MASTER_KEY_SUFFIX)) {\n-          state.currentMasterKey \u003d parseMasterKey(entry.getValue());\n-        } else if (key.equals(PREV_MASTER_KEY_SUFFIX)) {\n-          state.previousMasterKey \u003d parseMasterKey(entry.getValue());\n-        } else if (key.startsWith(ConverterUtils.CONTAINER_PREFIX)) {\n-          loadContainerToken(state, fullKey, key, entry.getValue());\n-        }\n-      }\n-    } catch (DBException e) {\n-      throw new IOException(e);\n-    } finally {\n-      if (iter !\u003d null) {\n-        iter.close();\n-      }\n-    }\n+    state.currentMasterKey \u003d getMasterKey(CONTAINER_TOKENS_KEY_PREFIX\n+        + CURRENT_MASTER_KEY_SUFFIX);\n+    state.previousMasterKey \u003d getMasterKey(CONTAINER_TOKENS_KEY_PREFIX\n+        + PREV_MASTER_KEY_SUFFIX);\n+    state.it \u003d new ContainerTokensStateIterator();\n     return state;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RecoveredContainerTokensState loadContainerTokensState()\n      throws IOException {\n    RecoveredContainerTokensState state \u003d new RecoveredContainerTokensState();\n    state.currentMasterKey \u003d getMasterKey(CONTAINER_TOKENS_KEY_PREFIX\n        + CURRENT_MASTER_KEY_SUFFIX);\n    state.previousMasterKey \u003d getMasterKey(CONTAINER_TOKENS_KEY_PREFIX\n        + PREV_MASTER_KEY_SUFFIX);\n    state.it \u003d new ContainerTokensStateIterator();\n    return state;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/recovery/NMLeveldbStateStoreService.java",
      "extendedDetails": {}
    },
    "2050e0dad661bade3e140d7a5692cfe1999badc3": {
      "type": "Ymultichange(Yrename,Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-1342. Recover container tokens upon nodemanager restart. Contributed by Jason Lowe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1612995 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/07/14 10:02 PM",
      "commitName": "2050e0dad661bade3e140d7a5692cfe1999badc3",
      "commitAuthor": "Devarajulu K",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-1342. Recover container tokens upon nodemanager restart. Contributed by Jason Lowe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1612995 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "23/07/14 10:02 PM",
          "commitName": "2050e0dad661bade3e140d7a5692cfe1999badc3",
          "commitAuthor": "Devarajulu K",
          "commitDateOld": "21/07/14 7:43 AM",
          "commitNameOld": "8a8708582091c87e81e90f7a442624ac1e34ed33",
          "commitAuthorOld": "Jason Darrell Lowe",
          "daysBetweenCommits": 2.6,
          "commitsBetweenForRepo": 39,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,34 @@\n-  public RecoveredNMTokenState loadNMTokenState() throws IOException {\n-    RecoveredNMTokenState state \u003d new RecoveredNMTokenState();\n-    state.applicationMasterKeys \u003d\n-        new HashMap\u003cApplicationAttemptId, MasterKey\u003e();\n+  public RecoveredContainerTokensState loadContainerTokensState()\n+      throws IOException {\n+    RecoveredContainerTokensState state \u003d new RecoveredContainerTokensState();\n+    state.activeTokens \u003d new HashMap\u003cContainerId, Long\u003e();\n     LeveldbIterator iter \u003d null;\n     try {\n       iter \u003d new LeveldbIterator(db);\n-      iter.seek(bytes(NM_TOKENS_KEY_PREFIX));\n+      iter.seek(bytes(CONTAINER_TOKENS_KEY_PREFIX));\n+      final int containerTokensKeyPrefixLength \u003d\n+          CONTAINER_TOKENS_KEY_PREFIX.length();\n       while (iter.hasNext()) {\n         Entry\u003cbyte[], byte[]\u003e entry \u003d iter.next();\n         String fullKey \u003d asString(entry.getKey());\n-        if (!fullKey.startsWith(NM_TOKENS_KEY_PREFIX)) {\n+        if (!fullKey.startsWith(CONTAINER_TOKENS_KEY_PREFIX)) {\n           break;\n         }\n-        String key \u003d fullKey.substring(NM_TOKENS_KEY_PREFIX.length());\n+        String key \u003d fullKey.substring(containerTokensKeyPrefixLength);\n         if (key.equals(CURRENT_MASTER_KEY_SUFFIX)) {\n           state.currentMasterKey \u003d parseMasterKey(entry.getValue());\n         } else if (key.equals(PREV_MASTER_KEY_SUFFIX)) {\n           state.previousMasterKey \u003d parseMasterKey(entry.getValue());\n-        } else if (key.startsWith(\n-            ApplicationAttemptId.appAttemptIdStrPrefix)) {\n-          ApplicationAttemptId attempt;\n-          try {\n-            attempt \u003d ConverterUtils.toApplicationAttemptId(key);\n-          } catch (IllegalArgumentException e) {\n-            throw new IOException(\"Bad application master key state for \"\n-                + fullKey, e);\n-          }\n-          state.applicationMasterKeys.put(attempt,\n-              parseMasterKey(entry.getValue()));\n+        } else if (key.startsWith(ConverterUtils.CONTAINER_PREFIX)) {\n+          loadContainerToken(state, fullKey, key, entry.getValue());\n         }\n       }\n     } catch (DBException e) {\n-      throw new IOException(e.getMessage(), e);\n+      throw new IOException(e);\n     } finally {\n       if (iter !\u003d null) {\n         iter.close();\n       }\n     }\n     return state;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RecoveredContainerTokensState loadContainerTokensState()\n      throws IOException {\n    RecoveredContainerTokensState state \u003d new RecoveredContainerTokensState();\n    state.activeTokens \u003d new HashMap\u003cContainerId, Long\u003e();\n    LeveldbIterator iter \u003d null;\n    try {\n      iter \u003d new LeveldbIterator(db);\n      iter.seek(bytes(CONTAINER_TOKENS_KEY_PREFIX));\n      final int containerTokensKeyPrefixLength \u003d\n          CONTAINER_TOKENS_KEY_PREFIX.length();\n      while (iter.hasNext()) {\n        Entry\u003cbyte[], byte[]\u003e entry \u003d iter.next();\n        String fullKey \u003d asString(entry.getKey());\n        if (!fullKey.startsWith(CONTAINER_TOKENS_KEY_PREFIX)) {\n          break;\n        }\n        String key \u003d fullKey.substring(containerTokensKeyPrefixLength);\n        if (key.equals(CURRENT_MASTER_KEY_SUFFIX)) {\n          state.currentMasterKey \u003d parseMasterKey(entry.getValue());\n        } else if (key.equals(PREV_MASTER_KEY_SUFFIX)) {\n          state.previousMasterKey \u003d parseMasterKey(entry.getValue());\n        } else if (key.startsWith(ConverterUtils.CONTAINER_PREFIX)) {\n          loadContainerToken(state, fullKey, key, entry.getValue());\n        }\n      }\n    } catch (DBException e) {\n      throw new IOException(e);\n    } finally {\n      if (iter !\u003d null) {\n        iter.close();\n      }\n    }\n    return state;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/recovery/NMLeveldbStateStoreService.java",
          "extendedDetails": {
            "oldValue": "loadNMTokenState",
            "newValue": "loadContainerTokensState"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-1342. Recover container tokens upon nodemanager restart. Contributed by Jason Lowe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1612995 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "23/07/14 10:02 PM",
          "commitName": "2050e0dad661bade3e140d7a5692cfe1999badc3",
          "commitAuthor": "Devarajulu K",
          "commitDateOld": "21/07/14 7:43 AM",
          "commitNameOld": "8a8708582091c87e81e90f7a442624ac1e34ed33",
          "commitAuthorOld": "Jason Darrell Lowe",
          "daysBetweenCommits": 2.6,
          "commitsBetweenForRepo": 39,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,34 @@\n-  public RecoveredNMTokenState loadNMTokenState() throws IOException {\n-    RecoveredNMTokenState state \u003d new RecoveredNMTokenState();\n-    state.applicationMasterKeys \u003d\n-        new HashMap\u003cApplicationAttemptId, MasterKey\u003e();\n+  public RecoveredContainerTokensState loadContainerTokensState()\n+      throws IOException {\n+    RecoveredContainerTokensState state \u003d new RecoveredContainerTokensState();\n+    state.activeTokens \u003d new HashMap\u003cContainerId, Long\u003e();\n     LeveldbIterator iter \u003d null;\n     try {\n       iter \u003d new LeveldbIterator(db);\n-      iter.seek(bytes(NM_TOKENS_KEY_PREFIX));\n+      iter.seek(bytes(CONTAINER_TOKENS_KEY_PREFIX));\n+      final int containerTokensKeyPrefixLength \u003d\n+          CONTAINER_TOKENS_KEY_PREFIX.length();\n       while (iter.hasNext()) {\n         Entry\u003cbyte[], byte[]\u003e entry \u003d iter.next();\n         String fullKey \u003d asString(entry.getKey());\n-        if (!fullKey.startsWith(NM_TOKENS_KEY_PREFIX)) {\n+        if (!fullKey.startsWith(CONTAINER_TOKENS_KEY_PREFIX)) {\n           break;\n         }\n-        String key \u003d fullKey.substring(NM_TOKENS_KEY_PREFIX.length());\n+        String key \u003d fullKey.substring(containerTokensKeyPrefixLength);\n         if (key.equals(CURRENT_MASTER_KEY_SUFFIX)) {\n           state.currentMasterKey \u003d parseMasterKey(entry.getValue());\n         } else if (key.equals(PREV_MASTER_KEY_SUFFIX)) {\n           state.previousMasterKey \u003d parseMasterKey(entry.getValue());\n-        } else if (key.startsWith(\n-            ApplicationAttemptId.appAttemptIdStrPrefix)) {\n-          ApplicationAttemptId attempt;\n-          try {\n-            attempt \u003d ConverterUtils.toApplicationAttemptId(key);\n-          } catch (IllegalArgumentException e) {\n-            throw new IOException(\"Bad application master key state for \"\n-                + fullKey, e);\n-          }\n-          state.applicationMasterKeys.put(attempt,\n-              parseMasterKey(entry.getValue()));\n+        } else if (key.startsWith(ConverterUtils.CONTAINER_PREFIX)) {\n+          loadContainerToken(state, fullKey, key, entry.getValue());\n         }\n       }\n     } catch (DBException e) {\n-      throw new IOException(e.getMessage(), e);\n+      throw new IOException(e);\n     } finally {\n       if (iter !\u003d null) {\n         iter.close();\n       }\n     }\n     return state;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RecoveredContainerTokensState loadContainerTokensState()\n      throws IOException {\n    RecoveredContainerTokensState state \u003d new RecoveredContainerTokensState();\n    state.activeTokens \u003d new HashMap\u003cContainerId, Long\u003e();\n    LeveldbIterator iter \u003d null;\n    try {\n      iter \u003d new LeveldbIterator(db);\n      iter.seek(bytes(CONTAINER_TOKENS_KEY_PREFIX));\n      final int containerTokensKeyPrefixLength \u003d\n          CONTAINER_TOKENS_KEY_PREFIX.length();\n      while (iter.hasNext()) {\n        Entry\u003cbyte[], byte[]\u003e entry \u003d iter.next();\n        String fullKey \u003d asString(entry.getKey());\n        if (!fullKey.startsWith(CONTAINER_TOKENS_KEY_PREFIX)) {\n          break;\n        }\n        String key \u003d fullKey.substring(containerTokensKeyPrefixLength);\n        if (key.equals(CURRENT_MASTER_KEY_SUFFIX)) {\n          state.currentMasterKey \u003d parseMasterKey(entry.getValue());\n        } else if (key.equals(PREV_MASTER_KEY_SUFFIX)) {\n          state.previousMasterKey \u003d parseMasterKey(entry.getValue());\n        } else if (key.startsWith(ConverterUtils.CONTAINER_PREFIX)) {\n          loadContainerToken(state, fullKey, key, entry.getValue());\n        }\n      }\n    } catch (DBException e) {\n      throw new IOException(e);\n    } finally {\n      if (iter !\u003d null) {\n        iter.close();\n      }\n    }\n    return state;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/recovery/NMLeveldbStateStoreService.java",
          "extendedDetails": {
            "oldValue": "RecoveredNMTokenState",
            "newValue": "RecoveredContainerTokensState"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1342. Recover container tokens upon nodemanager restart. Contributed by Jason Lowe.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1612995 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "23/07/14 10:02 PM",
          "commitName": "2050e0dad661bade3e140d7a5692cfe1999badc3",
          "commitAuthor": "Devarajulu K",
          "commitDateOld": "21/07/14 7:43 AM",
          "commitNameOld": "8a8708582091c87e81e90f7a442624ac1e34ed33",
          "commitAuthorOld": "Jason Darrell Lowe",
          "daysBetweenCommits": 2.6,
          "commitsBetweenForRepo": 39,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,34 @@\n-  public RecoveredNMTokenState loadNMTokenState() throws IOException {\n-    RecoveredNMTokenState state \u003d new RecoveredNMTokenState();\n-    state.applicationMasterKeys \u003d\n-        new HashMap\u003cApplicationAttemptId, MasterKey\u003e();\n+  public RecoveredContainerTokensState loadContainerTokensState()\n+      throws IOException {\n+    RecoveredContainerTokensState state \u003d new RecoveredContainerTokensState();\n+    state.activeTokens \u003d new HashMap\u003cContainerId, Long\u003e();\n     LeveldbIterator iter \u003d null;\n     try {\n       iter \u003d new LeveldbIterator(db);\n-      iter.seek(bytes(NM_TOKENS_KEY_PREFIX));\n+      iter.seek(bytes(CONTAINER_TOKENS_KEY_PREFIX));\n+      final int containerTokensKeyPrefixLength \u003d\n+          CONTAINER_TOKENS_KEY_PREFIX.length();\n       while (iter.hasNext()) {\n         Entry\u003cbyte[], byte[]\u003e entry \u003d iter.next();\n         String fullKey \u003d asString(entry.getKey());\n-        if (!fullKey.startsWith(NM_TOKENS_KEY_PREFIX)) {\n+        if (!fullKey.startsWith(CONTAINER_TOKENS_KEY_PREFIX)) {\n           break;\n         }\n-        String key \u003d fullKey.substring(NM_TOKENS_KEY_PREFIX.length());\n+        String key \u003d fullKey.substring(containerTokensKeyPrefixLength);\n         if (key.equals(CURRENT_MASTER_KEY_SUFFIX)) {\n           state.currentMasterKey \u003d parseMasterKey(entry.getValue());\n         } else if (key.equals(PREV_MASTER_KEY_SUFFIX)) {\n           state.previousMasterKey \u003d parseMasterKey(entry.getValue());\n-        } else if (key.startsWith(\n-            ApplicationAttemptId.appAttemptIdStrPrefix)) {\n-          ApplicationAttemptId attempt;\n-          try {\n-            attempt \u003d ConverterUtils.toApplicationAttemptId(key);\n-          } catch (IllegalArgumentException e) {\n-            throw new IOException(\"Bad application master key state for \"\n-                + fullKey, e);\n-          }\n-          state.applicationMasterKeys.put(attempt,\n-              parseMasterKey(entry.getValue()));\n+        } else if (key.startsWith(ConverterUtils.CONTAINER_PREFIX)) {\n+          loadContainerToken(state, fullKey, key, entry.getValue());\n         }\n       }\n     } catch (DBException e) {\n-      throw new IOException(e.getMessage(), e);\n+      throw new IOException(e);\n     } finally {\n       if (iter !\u003d null) {\n         iter.close();\n       }\n     }\n     return state;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public RecoveredContainerTokensState loadContainerTokensState()\n      throws IOException {\n    RecoveredContainerTokensState state \u003d new RecoveredContainerTokensState();\n    state.activeTokens \u003d new HashMap\u003cContainerId, Long\u003e();\n    LeveldbIterator iter \u003d null;\n    try {\n      iter \u003d new LeveldbIterator(db);\n      iter.seek(bytes(CONTAINER_TOKENS_KEY_PREFIX));\n      final int containerTokensKeyPrefixLength \u003d\n          CONTAINER_TOKENS_KEY_PREFIX.length();\n      while (iter.hasNext()) {\n        Entry\u003cbyte[], byte[]\u003e entry \u003d iter.next();\n        String fullKey \u003d asString(entry.getKey());\n        if (!fullKey.startsWith(CONTAINER_TOKENS_KEY_PREFIX)) {\n          break;\n        }\n        String key \u003d fullKey.substring(containerTokensKeyPrefixLength);\n        if (key.equals(CURRENT_MASTER_KEY_SUFFIX)) {\n          state.currentMasterKey \u003d parseMasterKey(entry.getValue());\n        } else if (key.equals(PREV_MASTER_KEY_SUFFIX)) {\n          state.previousMasterKey \u003d parseMasterKey(entry.getValue());\n        } else if (key.startsWith(ConverterUtils.CONTAINER_PREFIX)) {\n          loadContainerToken(state, fullKey, key, entry.getValue());\n        }\n      }\n    } catch (DBException e) {\n      throw new IOException(e);\n    } finally {\n      if (iter !\u003d null) {\n        iter.close();\n      }\n    }\n    return state;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/recovery/NMLeveldbStateStoreService.java",
          "extendedDetails": {}
        }
      ]
    },
    "403ec8ea80d59f209823a7370dc8185fa2c1c368": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1341. Recover NMTokens upon nodemanager restart. (Contributed by Jason Lowe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1611512 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/07/14 4:33 PM",
      "commitName": "403ec8ea80d59f209823a7370dc8185fa2c1c368",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,41 @@\n+  public RecoveredNMTokenState loadNMTokenState() throws IOException {\n+    RecoveredNMTokenState state \u003d new RecoveredNMTokenState();\n+    state.applicationMasterKeys \u003d\n+        new HashMap\u003cApplicationAttemptId, MasterKey\u003e();\n+    LeveldbIterator iter \u003d null;\n+    try {\n+      iter \u003d new LeveldbIterator(db);\n+      iter.seek(bytes(NM_TOKENS_KEY_PREFIX));\n+      while (iter.hasNext()) {\n+        Entry\u003cbyte[], byte[]\u003e entry \u003d iter.next();\n+        String fullKey \u003d asString(entry.getKey());\n+        if (!fullKey.startsWith(NM_TOKENS_KEY_PREFIX)) {\n+          break;\n+        }\n+        String key \u003d fullKey.substring(NM_TOKENS_KEY_PREFIX.length());\n+        if (key.equals(CURRENT_MASTER_KEY_SUFFIX)) {\n+          state.currentMasterKey \u003d parseMasterKey(entry.getValue());\n+        } else if (key.equals(PREV_MASTER_KEY_SUFFIX)) {\n+          state.previousMasterKey \u003d parseMasterKey(entry.getValue());\n+        } else if (key.startsWith(\n+            ApplicationAttemptId.appAttemptIdStrPrefix)) {\n+          ApplicationAttemptId attempt;\n+          try {\n+            attempt \u003d ConverterUtils.toApplicationAttemptId(key);\n+          } catch (IllegalArgumentException e) {\n+            throw new IOException(\"Bad application master key state for \"\n+                + fullKey, e);\n+          }\n+          state.applicationMasterKeys.put(attempt,\n+              parseMasterKey(entry.getValue()));\n+        }\n+      }\n+    } catch (DBException e) {\n+      throw new IOException(e.getMessage(), e);\n+    } finally {\n+      if (iter !\u003d null) {\n+        iter.close();\n+      }\n+    }\n+    return state;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public RecoveredNMTokenState loadNMTokenState() throws IOException {\n    RecoveredNMTokenState state \u003d new RecoveredNMTokenState();\n    state.applicationMasterKeys \u003d\n        new HashMap\u003cApplicationAttemptId, MasterKey\u003e();\n    LeveldbIterator iter \u003d null;\n    try {\n      iter \u003d new LeveldbIterator(db);\n      iter.seek(bytes(NM_TOKENS_KEY_PREFIX));\n      while (iter.hasNext()) {\n        Entry\u003cbyte[], byte[]\u003e entry \u003d iter.next();\n        String fullKey \u003d asString(entry.getKey());\n        if (!fullKey.startsWith(NM_TOKENS_KEY_PREFIX)) {\n          break;\n        }\n        String key \u003d fullKey.substring(NM_TOKENS_KEY_PREFIX.length());\n        if (key.equals(CURRENT_MASTER_KEY_SUFFIX)) {\n          state.currentMasterKey \u003d parseMasterKey(entry.getValue());\n        } else if (key.equals(PREV_MASTER_KEY_SUFFIX)) {\n          state.previousMasterKey \u003d parseMasterKey(entry.getValue());\n        } else if (key.startsWith(\n            ApplicationAttemptId.appAttemptIdStrPrefix)) {\n          ApplicationAttemptId attempt;\n          try {\n            attempt \u003d ConverterUtils.toApplicationAttemptId(key);\n          } catch (IllegalArgumentException e) {\n            throw new IOException(\"Bad application master key state for \"\n                + fullKey, e);\n          }\n          state.applicationMasterKeys.put(attempt,\n              parseMasterKey(entry.getValue()));\n        }\n      }\n    } catch (DBException e) {\n      throw new IOException(e.getMessage(), e);\n    } finally {\n      if (iter !\u003d null) {\n        iter.close();\n      }\n    }\n    return state;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/recovery/NMLeveldbStateStoreService.java"
    }
  }
}