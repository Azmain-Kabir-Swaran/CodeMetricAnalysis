{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TopCLI.java",
  "functionName": "showTopScreen",
  "functionId": "showTopScreen",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/TopCLI.java",
  "functionStartLine": 1042,
  "functionEndLine": 1071,
  "numCommitsSeen": 12,
  "timeTaken": 1294,
  "changeHistory": [
    "154c9d2e421390c808dea3b2826cdaae492ea337",
    "577d755e4bf72d6adedeba51be01ff5f3f028de0"
  ],
  "changeHistoryShort": {
    "154c9d2e421390c808dea3b2826cdaae492ea337": "Ybodychange",
    "577d755e4bf72d6adedeba51be01ff5f3f028de0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "154c9d2e421390c808dea3b2826cdaae492ea337": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3961. Expose pending, running and reserved containers of a queue in REST api and yarn top (adhoot via asuresh)\n",
      "commitDate": "05/08/15 11:14 PM",
      "commitName": "154c9d2e421390c808dea3b2826cdaae492ea337",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "10/04/15 9:57 AM",
      "commitNameOld": "577d755e4bf72d6adedeba51be01ff5f3f028de0",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 117.55,
      "commitsBetweenForRepo": 914,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   protected void showTopScreen() {\n     List\u003cApplicationInformation\u003e appsInfo \u003d new ArrayList\u003c\u003e();\n     List\u003cApplicationReport\u003e apps;\n     try {\n       apps \u003d fetchAppReports();\n     } catch (Exception e) {\n       LOG.error(\"Unable to get application information\", e);\n       return;\n     }\n \n     for (ApplicationReport appReport : apps) {\n       ApplicationInformation appInfo \u003d new ApplicationInformation(appReport);\n       appsInfo.add(appInfo);\n     }\n     if (ascendingSort) {\n       Collections.sort(appsInfo, comparator);\n     } else {\n       Collections.sort(appsInfo, Collections.reverseOrder(comparator));\n     }\n     NodesInformation nodesInfo \u003d getNodesInfo();\n     QueueMetrics queueMetrics \u003d getQueueMetrics();\n     String header \u003d getHeader(queueMetrics, nodesInfo);\n     String appsStr \u003d getPrintableAppInformation(appsInfo);\n     synchronized (lock) {\n       printHeader(header);\n       printApps(appsStr);\n-      System.out.print(SET_CURSOR_LINE_6_COLUMN_0);\n+      System.out.print(SET_CURSOR_LINE_7_COLUMN_0);\n       System.out.print(CLEAR_LINE);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void showTopScreen() {\n    List\u003cApplicationInformation\u003e appsInfo \u003d new ArrayList\u003c\u003e();\n    List\u003cApplicationReport\u003e apps;\n    try {\n      apps \u003d fetchAppReports();\n    } catch (Exception e) {\n      LOG.error(\"Unable to get application information\", e);\n      return;\n    }\n\n    for (ApplicationReport appReport : apps) {\n      ApplicationInformation appInfo \u003d new ApplicationInformation(appReport);\n      appsInfo.add(appInfo);\n    }\n    if (ascendingSort) {\n      Collections.sort(appsInfo, comparator);\n    } else {\n      Collections.sort(appsInfo, Collections.reverseOrder(comparator));\n    }\n    NodesInformation nodesInfo \u003d getNodesInfo();\n    QueueMetrics queueMetrics \u003d getQueueMetrics();\n    String header \u003d getHeader(queueMetrics, nodesInfo);\n    String appsStr \u003d getPrintableAppInformation(appsInfo);\n    synchronized (lock) {\n      printHeader(header);\n      printApps(appsStr);\n      System.out.print(SET_CURSOR_LINE_7_COLUMN_0);\n      System.out.print(CLEAR_LINE);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/TopCLI.java",
      "extendedDetails": {}
    },
    "577d755e4bf72d6adedeba51be01ff5f3f028de0": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3348. Add a \u0027yarn top\u0027 tool to help understand cluster usage. Contributed by Varun Vasudev\n",
      "commitDate": "10/04/15 9:57 AM",
      "commitName": "577d755e4bf72d6adedeba51be01ff5f3f028de0",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,30 @@\n+  protected void showTopScreen() {\n+    List\u003cApplicationInformation\u003e appsInfo \u003d new ArrayList\u003c\u003e();\n+    List\u003cApplicationReport\u003e apps;\n+    try {\n+      apps \u003d fetchAppReports();\n+    } catch (Exception e) {\n+      LOG.error(\"Unable to get application information\", e);\n+      return;\n+    }\n+\n+    for (ApplicationReport appReport : apps) {\n+      ApplicationInformation appInfo \u003d new ApplicationInformation(appReport);\n+      appsInfo.add(appInfo);\n+    }\n+    if (ascendingSort) {\n+      Collections.sort(appsInfo, comparator);\n+    } else {\n+      Collections.sort(appsInfo, Collections.reverseOrder(comparator));\n+    }\n+    NodesInformation nodesInfo \u003d getNodesInfo();\n+    QueueMetrics queueMetrics \u003d getQueueMetrics();\n+    String header \u003d getHeader(queueMetrics, nodesInfo);\n+    String appsStr \u003d getPrintableAppInformation(appsInfo);\n+    synchronized (lock) {\n+      printHeader(header);\n+      printApps(appsStr);\n+      System.out.print(SET_CURSOR_LINE_6_COLUMN_0);\n+      System.out.print(CLEAR_LINE);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void showTopScreen() {\n    List\u003cApplicationInformation\u003e appsInfo \u003d new ArrayList\u003c\u003e();\n    List\u003cApplicationReport\u003e apps;\n    try {\n      apps \u003d fetchAppReports();\n    } catch (Exception e) {\n      LOG.error(\"Unable to get application information\", e);\n      return;\n    }\n\n    for (ApplicationReport appReport : apps) {\n      ApplicationInformation appInfo \u003d new ApplicationInformation(appReport);\n      appsInfo.add(appInfo);\n    }\n    if (ascendingSort) {\n      Collections.sort(appsInfo, comparator);\n    } else {\n      Collections.sort(appsInfo, Collections.reverseOrder(comparator));\n    }\n    NodesInformation nodesInfo \u003d getNodesInfo();\n    QueueMetrics queueMetrics \u003d getQueueMetrics();\n    String header \u003d getHeader(queueMetrics, nodesInfo);\n    String appsStr \u003d getPrintableAppInformation(appsInfo);\n    synchronized (lock) {\n      printHeader(header);\n      printApps(appsStr);\n      System.out.print(SET_CURSOR_LINE_6_COLUMN_0);\n      System.out.print(CLEAR_LINE);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/TopCLI.java"
    }
  }
}