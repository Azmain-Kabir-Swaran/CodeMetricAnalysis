{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractProviderService.java",
  "functionName": "buildContainerRetry",
  "functionId": "buildContainerRetry___launcher-AbstractLauncher__yarnConf-Configuration__compLaunchContext-ContainerLaunchService.ComponentLaunchContext__instance-ComponentInstance",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/AbstractProviderService.java",
  "functionStartLine": 119,
  "functionEndLine": 137,
  "numCommitsSeen": 23,
  "timeTaken": 1341,
  "changeHistory": [
    "84d7bf1eeff6b9418361afa4aa713e5e6f771365",
    "6c8e51ca7eaaeef0626658b3c45d446a537e4dc0"
  ],
  "changeHistoryShort": {
    "84d7bf1eeff6b9418361afa4aa713e5e6f771365": "Ymultichange(Yparameterchange,Ybodychange)",
    "6c8e51ca7eaaeef0626658b3c45d446a537e4dc0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "84d7bf1eeff6b9418361afa4aa713e5e6f771365": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-8360. Improve YARN service restart policy and node manager auto restart policy.\n           Contributed by Suma Shivaprasad\n",
      "commitDate": "23/07/18 9:57 AM",
      "commitName": "84d7bf1eeff6b9418361afa4aa713e5e6f771365",
      "commitAuthor": "Eric Yang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-8360. Improve YARN service restart policy and node manager auto restart policy.\n           Contributed by Suma Shivaprasad\n",
          "commitDate": "23/07/18 9:57 AM",
          "commitName": "84d7bf1eeff6b9418361afa4aa713e5e6f771365",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "12/06/18 8:35 AM",
          "commitNameOld": "652bcbb3e4950758e61ce123ecc1798ae2b60a7f",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 41.06,
          "commitsBetweenForRepo": 238,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,19 @@\n   public void buildContainerRetry(AbstractLauncher launcher,\n       Configuration yarnConf,\n-      ContainerLaunchService.ComponentLaunchContext compLaunchContext) {\n+      ContainerLaunchService.ComponentLaunchContext compLaunchContext,\n+      ComponentInstance instance) {\n     // By default retry forever every 30 seconds\n-    launcher.setRetryContext(\n-        YarnServiceConf.getInt(CONTAINER_RETRY_MAX,\n-            DEFAULT_CONTAINER_RETRY_MAX,\n-            compLaunchContext.getConfiguration(), yarnConf),\n-        YarnServiceConf.getInt(CONTAINER_RETRY_INTERVAL,\n-            DEFAULT_CONTAINER_RETRY_INTERVAL,\n-            compLaunchContext.getConfiguration(), yarnConf),\n-        YarnServiceConf.getLong(CONTAINER_FAILURES_VALIDITY_INTERVAL,\n-            DEFAULT_CONTAINER_FAILURES_VALIDITY_INTERVAL,\n-            compLaunchContext.getConfiguration(), yarnConf));\n+\n+    ComponentRestartPolicy restartPolicy \u003d instance.getComponent()\n+        .getRestartPolicyHandler();\n+    if (restartPolicy.allowContainerRetriesForInstance(instance)) {\n+      launcher.setRetryContext(YarnServiceConf\n+          .getInt(CONTAINER_RETRY_MAX, DEFAULT_CONTAINER_RETRY_MAX,\n+              compLaunchContext.getConfiguration(), yarnConf), YarnServiceConf\n+          .getInt(CONTAINER_RETRY_INTERVAL, DEFAULT_CONTAINER_RETRY_INTERVAL,\n+              compLaunchContext.getConfiguration(), yarnConf), YarnServiceConf\n+          .getLong(CONTAINER_FAILURES_VALIDITY_INTERVAL,\n+              DEFAULT_CONTAINER_FAILURES_VALIDITY_INTERVAL,\n+              compLaunchContext.getConfiguration(), yarnConf));\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void buildContainerRetry(AbstractLauncher launcher,\n      Configuration yarnConf,\n      ContainerLaunchService.ComponentLaunchContext compLaunchContext,\n      ComponentInstance instance) {\n    // By default retry forever every 30 seconds\n\n    ComponentRestartPolicy restartPolicy \u003d instance.getComponent()\n        .getRestartPolicyHandler();\n    if (restartPolicy.allowContainerRetriesForInstance(instance)) {\n      launcher.setRetryContext(YarnServiceConf\n          .getInt(CONTAINER_RETRY_MAX, DEFAULT_CONTAINER_RETRY_MAX,\n              compLaunchContext.getConfiguration(), yarnConf), YarnServiceConf\n          .getInt(CONTAINER_RETRY_INTERVAL, DEFAULT_CONTAINER_RETRY_INTERVAL,\n              compLaunchContext.getConfiguration(), yarnConf), YarnServiceConf\n          .getLong(CONTAINER_FAILURES_VALIDITY_INTERVAL,\n              DEFAULT_CONTAINER_FAILURES_VALIDITY_INTERVAL,\n              compLaunchContext.getConfiguration(), yarnConf));\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/AbstractProviderService.java",
          "extendedDetails": {
            "oldValue": "[launcher-AbstractLauncher, yarnConf-Configuration, compLaunchContext-ContainerLaunchService.ComponentLaunchContext]",
            "newValue": "[launcher-AbstractLauncher, yarnConf-Configuration, compLaunchContext-ContainerLaunchService.ComponentLaunchContext, instance-ComponentInstance]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8360. Improve YARN service restart policy and node manager auto restart policy.\n           Contributed by Suma Shivaprasad\n",
          "commitDate": "23/07/18 9:57 AM",
          "commitName": "84d7bf1eeff6b9418361afa4aa713e5e6f771365",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "12/06/18 8:35 AM",
          "commitNameOld": "652bcbb3e4950758e61ce123ecc1798ae2b60a7f",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 41.06,
          "commitsBetweenForRepo": 238,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,19 @@\n   public void buildContainerRetry(AbstractLauncher launcher,\n       Configuration yarnConf,\n-      ContainerLaunchService.ComponentLaunchContext compLaunchContext) {\n+      ContainerLaunchService.ComponentLaunchContext compLaunchContext,\n+      ComponentInstance instance) {\n     // By default retry forever every 30 seconds\n-    launcher.setRetryContext(\n-        YarnServiceConf.getInt(CONTAINER_RETRY_MAX,\n-            DEFAULT_CONTAINER_RETRY_MAX,\n-            compLaunchContext.getConfiguration(), yarnConf),\n-        YarnServiceConf.getInt(CONTAINER_RETRY_INTERVAL,\n-            DEFAULT_CONTAINER_RETRY_INTERVAL,\n-            compLaunchContext.getConfiguration(), yarnConf),\n-        YarnServiceConf.getLong(CONTAINER_FAILURES_VALIDITY_INTERVAL,\n-            DEFAULT_CONTAINER_FAILURES_VALIDITY_INTERVAL,\n-            compLaunchContext.getConfiguration(), yarnConf));\n+\n+    ComponentRestartPolicy restartPolicy \u003d instance.getComponent()\n+        .getRestartPolicyHandler();\n+    if (restartPolicy.allowContainerRetriesForInstance(instance)) {\n+      launcher.setRetryContext(YarnServiceConf\n+          .getInt(CONTAINER_RETRY_MAX, DEFAULT_CONTAINER_RETRY_MAX,\n+              compLaunchContext.getConfiguration(), yarnConf), YarnServiceConf\n+          .getInt(CONTAINER_RETRY_INTERVAL, DEFAULT_CONTAINER_RETRY_INTERVAL,\n+              compLaunchContext.getConfiguration(), yarnConf), YarnServiceConf\n+          .getLong(CONTAINER_FAILURES_VALIDITY_INTERVAL,\n+              DEFAULT_CONTAINER_FAILURES_VALIDITY_INTERVAL,\n+              compLaunchContext.getConfiguration(), yarnConf));\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void buildContainerRetry(AbstractLauncher launcher,\n      Configuration yarnConf,\n      ContainerLaunchService.ComponentLaunchContext compLaunchContext,\n      ComponentInstance instance) {\n    // By default retry forever every 30 seconds\n\n    ComponentRestartPolicy restartPolicy \u003d instance.getComponent()\n        .getRestartPolicyHandler();\n    if (restartPolicy.allowContainerRetriesForInstance(instance)) {\n      launcher.setRetryContext(YarnServiceConf\n          .getInt(CONTAINER_RETRY_MAX, DEFAULT_CONTAINER_RETRY_MAX,\n              compLaunchContext.getConfiguration(), yarnConf), YarnServiceConf\n          .getInt(CONTAINER_RETRY_INTERVAL, DEFAULT_CONTAINER_RETRY_INTERVAL,\n              compLaunchContext.getConfiguration(), yarnConf), YarnServiceConf\n          .getLong(CONTAINER_FAILURES_VALIDITY_INTERVAL,\n              DEFAULT_CONTAINER_FAILURES_VALIDITY_INTERVAL,\n              compLaunchContext.getConfiguration(), yarnConf));\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/AbstractProviderService.java",
          "extendedDetails": {}
        }
      ]
    },
    "6c8e51ca7eaaeef0626658b3c45d446a537e4dc0": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7654. Support ENTRY_POINT for docker container. Contributed by Eric Yang\n",
      "commitDate": "11/05/18 4:56 PM",
      "commitName": "6c8e51ca7eaaeef0626658b3c45d446a537e4dc0",
      "commitAuthor": "Jason Lowe",
      "diff": "@@ -0,0 +1,15 @@\n+  public void buildContainerRetry(AbstractLauncher launcher,\n+      Configuration yarnConf,\n+      ContainerLaunchService.ComponentLaunchContext compLaunchContext) {\n+    // By default retry forever every 30 seconds\n+    launcher.setRetryContext(\n+        YarnServiceConf.getInt(CONTAINER_RETRY_MAX,\n+            DEFAULT_CONTAINER_RETRY_MAX,\n+            compLaunchContext.getConfiguration(), yarnConf),\n+        YarnServiceConf.getInt(CONTAINER_RETRY_INTERVAL,\n+            DEFAULT_CONTAINER_RETRY_INTERVAL,\n+            compLaunchContext.getConfiguration(), yarnConf),\n+        YarnServiceConf.getLong(CONTAINER_FAILURES_VALIDITY_INTERVAL,\n+            DEFAULT_CONTAINER_FAILURES_VALIDITY_INTERVAL,\n+            compLaunchContext.getConfiguration(), yarnConf));\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void buildContainerRetry(AbstractLauncher launcher,\n      Configuration yarnConf,\n      ContainerLaunchService.ComponentLaunchContext compLaunchContext) {\n    // By default retry forever every 30 seconds\n    launcher.setRetryContext(\n        YarnServiceConf.getInt(CONTAINER_RETRY_MAX,\n            DEFAULT_CONTAINER_RETRY_MAX,\n            compLaunchContext.getConfiguration(), yarnConf),\n        YarnServiceConf.getInt(CONTAINER_RETRY_INTERVAL,\n            DEFAULT_CONTAINER_RETRY_INTERVAL,\n            compLaunchContext.getConfiguration(), yarnConf),\n        YarnServiceConf.getLong(CONTAINER_FAILURES_VALIDITY_INTERVAL,\n            DEFAULT_CONTAINER_FAILURES_VALIDITY_INTERVAL,\n            compLaunchContext.getConfiguration(), yarnConf));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/provider/AbstractProviderService.java"
    }
  }
}