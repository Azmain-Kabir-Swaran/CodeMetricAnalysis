{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SelectInputStream.java",
  "functionName": "seek",
  "functionId": "seek___newPos-long",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/select/SelectInputStream.java",
  "functionStartLine": 306,
  "functionEndLine": 336,
  "numCommitsSeen": 1,
  "timeTaken": 1469,
  "changeHistory": [
    "f365957c6326f88734bc0a5d01cfb7eac713db20"
  ],
  "changeHistoryShort": {
    "f365957c6326f88734bc0a5d01cfb7eac713db20": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f365957c6326f88734bc0a5d01cfb7eac713db20": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15229. Add FileSystem builder-based openFile() API to match createFile();\nS3A to implement S3 Select through this API.\n\nThe new openFile() API is asynchronous, and implemented across FileSystem and FileContext.\n\nThe MapReduce V2 inputs are moved to this API, and you can actually set must/may\noptions to pass in.\n\nThis is more useful for setting things like s3a seek policy than for S3 select,\nas the existing input format/record readers can\u0027t handle S3 select output where\nthe stream is shorter than the file length, and splitting plain text is suboptimal.\nFuture work is needed there.\n\nIn the meantime, any/all filesystem connectors are now free to add their own filesystem-specific\nconfiguration parameters which can be set in jobs and used to set filesystem input stream\noptions (seek policy, retry, encryption secrets, etc).\n\nContributed by Steve Loughran\n",
      "commitDate": "05/02/19 3:51 AM",
      "commitName": "f365957c6326f88734bc0a5d01cfb7eac713db20",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,31 @@\n+  public synchronized void seek(long newPos) throws IOException {\n+    long current \u003d getPos();\n+    long distance \u003d newPos - current;\n+    if (distance \u003c 0) {\n+      throw unsupported(SEEK_UNSUPPORTED\n+          + \" backwards from \" + current + \" to \" + newPos);\n+    }\n+    if (distance \u003d\u003d 0) {\n+      LOG.debug(\"ignoring seek to current position.\");\n+    } else {\n+      // the complicated one: Forward seeking. Useful for split files.\n+      LOG.debug(\"Forward seek by reading {} bytes\", distance);\n+      long bytesSkipped \u003d 0;\n+      // read byte-by-byte, hoping that buffering will compensate for this.\n+      // doing it this way ensures that the seek stops at exactly the right\n+      // place. skip(len) can return a smaller value, at which point\n+      // it\u0027s not clear what to do.\n+      while(distance \u003e 0) {\n+        int r \u003d read();\n+        if (r \u003d\u003d -1) {\n+          // reached an EOF too early\n+          throw new EOFException(\"Seek to \" + newPos\n+              + \" reached End of File at offset \" + getPos());\n+        }\n+        distance--;\n+        bytesSkipped++;\n+      }\n+      // read has finished.\n+      streamStatistics.seekForwards(bytesSkipped);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void seek(long newPos) throws IOException {\n    long current \u003d getPos();\n    long distance \u003d newPos - current;\n    if (distance \u003c 0) {\n      throw unsupported(SEEK_UNSUPPORTED\n          + \" backwards from \" + current + \" to \" + newPos);\n    }\n    if (distance \u003d\u003d 0) {\n      LOG.debug(\"ignoring seek to current position.\");\n    } else {\n      // the complicated one: Forward seeking. Useful for split files.\n      LOG.debug(\"Forward seek by reading {} bytes\", distance);\n      long bytesSkipped \u003d 0;\n      // read byte-by-byte, hoping that buffering will compensate for this.\n      // doing it this way ensures that the seek stops at exactly the right\n      // place. skip(len) can return a smaller value, at which point\n      // it\u0027s not clear what to do.\n      while(distance \u003e 0) {\n        int r \u003d read();\n        if (r \u003d\u003d -1) {\n          // reached an EOF too early\n          throw new EOFException(\"Seek to \" + newPos\n              + \" reached End of File at offset \" + getPos());\n        }\n        distance--;\n        bytesSkipped++;\n      }\n      // read has finished.\n      streamStatistics.seekForwards(bytesSkipped);\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/select/SelectInputStream.java"
    }
  }
}