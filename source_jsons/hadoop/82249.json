{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ShutdownHookManager.java",
  "functionName": "run",
  "functionId": "run",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/ShutdownHookManager.java",
  "functionStartLine": 89,
  "functionEndLine": 103,
  "numCommitsSeen": 10,
  "timeTaken": 2275,
  "changeHistory": [
    "b4466a3b0a772d53e948f3e440f3e8e285f12a26",
    "34577d2c21096046861d2deefdbb2638b411c687",
    "8ced42daff5cd0cb11d26042ae8c8255ef629a40",
    "aac4d65bf9c6d68f53610e5fe9997a391e3fa053",
    "8a0c7323ce36032a56c228fc8076d9d3214274ba"
  ],
  "changeHistoryShort": {
    "b4466a3b0a772d53e948f3e440f3e8e285f12a26": "Ybodychange",
    "34577d2c21096046861d2deefdbb2638b411c687": "Ybodychange",
    "8ced42daff5cd0cb11d26042ae8c8255ef629a40": "Ybodychange",
    "aac4d65bf9c6d68f53610e5fe9997a391e3fa053": "Ybodychange",
    "8a0c7323ce36032a56c228fc8076d9d3214274ba": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b4466a3b0a772d53e948f3e440f3e8e285f12a26": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16341. ShutDownHookManager: Regressed performance on Hook removals after HADOOP-15679\n\nContributed by Gopal V and Atilla Magyar.\n\nChange-Id: I066d5eece332a1673594de0f9b484443f95530ec\n",
      "commitDate": "17/07/19 5:50 AM",
      "commitName": "b4466a3b0a772d53e948f3e440f3e8e285f12a26",
      "commitAuthor": "Gopal V",
      "commitDateOld": "10/10/18 9:51 PM",
      "commitNameOld": "7b57f2f71fbaa5af4897309597cca70a95b04edd",
      "commitAuthorOld": "Takanobu Asanuma",
      "daysBetweenCommits": 279.33,
      "commitsBetweenForRepo": 2057,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,15 @@\n           public void run() {\n             if (MGR.shutdownInProgress.getAndSet(true)) {\n               LOG.info(\"Shutdown process invoked a second time: ignoring\");\n               return;\n             }\n             long started \u003d System.currentTimeMillis();\n-            int timeoutCount \u003d executeShutdown();\n+            int timeoutCount \u003d MGR.executeShutdown();\n             long ended \u003d System.currentTimeMillis();\n             LOG.debug(String.format(\n                 \"Completed shutdown in %.3f seconds; Timeouts: %d\",\n                 (ended-started)/1000.0, timeoutCount));\n             // each of the hooks have executed; now shut down the\n             // executor itself.\n             shutdownExecutor(new Configuration());\n           }\n\\ No newline at end of file\n",
      "actualSource": "          public void run() {\n            if (MGR.shutdownInProgress.getAndSet(true)) {\n              LOG.info(\"Shutdown process invoked a second time: ignoring\");\n              return;\n            }\n            long started \u003d System.currentTimeMillis();\n            int timeoutCount \u003d MGR.executeShutdown();\n            long ended \u003d System.currentTimeMillis();\n            LOG.debug(String.format(\n                \"Completed shutdown in %.3f seconds; Timeouts: %d\",\n                (ended-started)/1000.0, timeoutCount));\n            // each of the hooks have executed; now shut down the\n            // executor itself.\n            shutdownExecutor(new Configuration());\n          }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/ShutdownHookManager.java",
      "extendedDetails": {}
    },
    "34577d2c21096046861d2deefdbb2638b411c687": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15679. ShutdownHookManager shutdown time needs to be configurable \u0026 extended.\nContributed by Steve Loughran.\n",
      "commitDate": "20/08/18 6:36 PM",
      "commitName": "34577d2c21096046861d2deefdbb2638b411c687",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "17/07/17 9:32 PM",
      "commitNameOld": "ccaf036662e22da14583942054898c99fa51dae5",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 398.88,
      "commitsBetweenForRepo": 3561,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,15 @@\n           public void run() {\n-            MGR.shutdownInProgress.set(true);\n-            for (HookEntry entry: MGR.getShutdownHooksInOrder()) {\n-              Future\u003c?\u003e future \u003d EXECUTOR.submit(entry.getHook());\n-              try {\n-                future.get(entry.getTimeout(), entry.getTimeUnit());\n-              } catch (TimeoutException ex) {\n-                future.cancel(true);\n-                LOG.warn(\"ShutdownHook \u0027\" + entry.getHook().getClass().\n-                    getSimpleName() + \"\u0027 timeout, \" + ex.toString(), ex);\n-              } catch (Throwable ex) {\n-                LOG.warn(\"ShutdownHook \u0027\" + entry.getHook().getClass().\n-                    getSimpleName() + \"\u0027 failed, \" + ex.toString(), ex);\n-              }\n+            if (MGR.shutdownInProgress.getAndSet(true)) {\n+              LOG.info(\"Shutdown process invoked a second time: ignoring\");\n+              return;\n             }\n-            try {\n-              EXECUTOR.shutdown();\n-              if (!EXECUTOR.awaitTermination(TIMEOUT_DEFAULT,\n-                  TIME_UNIT_DEFAULT)) {\n-                LOG.error(\"ShutdownHookManger shutdown forcefully.\");\n-                EXECUTOR.shutdownNow();\n-              }\n-              LOG.debug(\"ShutdownHookManger complete shutdown.\");\n-            } catch (InterruptedException ex) {\n-              LOG.error(\"ShutdownHookManger interrupted while waiting for \" +\n-                  \"termination.\", ex);\n-              EXECUTOR.shutdownNow();\n-              Thread.currentThread().interrupt();\n-            }\n+            long started \u003d System.currentTimeMillis();\n+            int timeoutCount \u003d executeShutdown();\n+            long ended \u003d System.currentTimeMillis();\n+            LOG.debug(String.format(\n+                \"Completed shutdown in %.3f seconds; Timeouts: %d\",\n+                (ended-started)/1000.0, timeoutCount));\n+            // each of the hooks have executed; now shut down the\n+            // executor itself.\n+            shutdownExecutor(new Configuration());\n           }\n\\ No newline at end of file\n",
      "actualSource": "          public void run() {\n            if (MGR.shutdownInProgress.getAndSet(true)) {\n              LOG.info(\"Shutdown process invoked a second time: ignoring\");\n              return;\n            }\n            long started \u003d System.currentTimeMillis();\n            int timeoutCount \u003d executeShutdown();\n            long ended \u003d System.currentTimeMillis();\n            LOG.debug(String.format(\n                \"Completed shutdown in %.3f seconds; Timeouts: %d\",\n                (ended-started)/1000.0, timeoutCount));\n            // each of the hooks have executed; now shut down the\n            // executor itself.\n            shutdownExecutor(new Configuration());\n          }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/ShutdownHookManager.java",
      "extendedDetails": {}
    },
    "8ced42daff5cd0cb11d26042ae8c8255ef629a40": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12993. Change ShutdownHookManger complete shutdown log from INFO to DEBUG. Contributed by Xiaoyu Yao.\n",
      "commitDate": "13/04/16 3:34 PM",
      "commitName": "8ced42daff5cd0cb11d26042ae8c8255ef629a40",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "31/03/16 3:22 PM",
      "commitNameOld": "aac4d65bf9c6d68f53610e5fe9997a391e3fa053",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 13.01,
      "commitsBetweenForRepo": 76,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n           public void run() {\n             MGR.shutdownInProgress.set(true);\n             for (HookEntry entry: MGR.getShutdownHooksInOrder()) {\n               Future\u003c?\u003e future \u003d EXECUTOR.submit(entry.getHook());\n               try {\n                 future.get(entry.getTimeout(), entry.getTimeUnit());\n               } catch (TimeoutException ex) {\n                 future.cancel(true);\n                 LOG.warn(\"ShutdownHook \u0027\" + entry.getHook().getClass().\n                     getSimpleName() + \"\u0027 timeout, \" + ex.toString(), ex);\n               } catch (Throwable ex) {\n                 LOG.warn(\"ShutdownHook \u0027\" + entry.getHook().getClass().\n                     getSimpleName() + \"\u0027 failed, \" + ex.toString(), ex);\n               }\n             }\n             try {\n               EXECUTOR.shutdown();\n               if (!EXECUTOR.awaitTermination(TIMEOUT_DEFAULT,\n                   TIME_UNIT_DEFAULT)) {\n                 LOG.error(\"ShutdownHookManger shutdown forcefully.\");\n                 EXECUTOR.shutdownNow();\n               }\n-              LOG.info(\"ShutdownHookManger complete shutdown.\");\n+              LOG.debug(\"ShutdownHookManger complete shutdown.\");\n             } catch (InterruptedException ex) {\n               LOG.error(\"ShutdownHookManger interrupted while waiting for \" +\n                   \"termination.\", ex);\n               EXECUTOR.shutdownNow();\n               Thread.currentThread().interrupt();\n             }\n           }\n\\ No newline at end of file\n",
      "actualSource": "          public void run() {\n            MGR.shutdownInProgress.set(true);\n            for (HookEntry entry: MGR.getShutdownHooksInOrder()) {\n              Future\u003c?\u003e future \u003d EXECUTOR.submit(entry.getHook());\n              try {\n                future.get(entry.getTimeout(), entry.getTimeUnit());\n              } catch (TimeoutException ex) {\n                future.cancel(true);\n                LOG.warn(\"ShutdownHook \u0027\" + entry.getHook().getClass().\n                    getSimpleName() + \"\u0027 timeout, \" + ex.toString(), ex);\n              } catch (Throwable ex) {\n                LOG.warn(\"ShutdownHook \u0027\" + entry.getHook().getClass().\n                    getSimpleName() + \"\u0027 failed, \" + ex.toString(), ex);\n              }\n            }\n            try {\n              EXECUTOR.shutdown();\n              if (!EXECUTOR.awaitTermination(TIMEOUT_DEFAULT,\n                  TIME_UNIT_DEFAULT)) {\n                LOG.error(\"ShutdownHookManger shutdown forcefully.\");\n                EXECUTOR.shutdownNow();\n              }\n              LOG.debug(\"ShutdownHookManger complete shutdown.\");\n            } catch (InterruptedException ex) {\n              LOG.error(\"ShutdownHookManger interrupted while waiting for \" +\n                  \"termination.\", ex);\n              EXECUTOR.shutdownNow();\n              Thread.currentThread().interrupt();\n            }\n          }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/ShutdownHookManager.java",
      "extendedDetails": {}
    },
    "aac4d65bf9c6d68f53610e5fe9997a391e3fa053": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12950. ShutdownHookManager should have a timeout for each of the Registered shutdown hook. Contributed by Xiaoyu Yao.\n",
      "commitDate": "31/03/16 3:22 PM",
      "commitName": "aac4d65bf9c6d68f53610e5fe9997a391e3fa053",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "21/01/16 6:38 AM",
      "commitNameOld": "446987e20aacd870e1bc3f950b2bd4bbda1f9571",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 70.32,
      "commitsBetweenForRepo": 465,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,30 @@\n           public void run() {\n             MGR.shutdownInProgress.set(true);\n-            for (Runnable hook: MGR.getShutdownHooksInOrder()) {\n+            for (HookEntry entry: MGR.getShutdownHooksInOrder()) {\n+              Future\u003c?\u003e future \u003d EXECUTOR.submit(entry.getHook());\n               try {\n-                hook.run();\n+                future.get(entry.getTimeout(), entry.getTimeUnit());\n+              } catch (TimeoutException ex) {\n+                future.cancel(true);\n+                LOG.warn(\"ShutdownHook \u0027\" + entry.getHook().getClass().\n+                    getSimpleName() + \"\u0027 timeout, \" + ex.toString(), ex);\n               } catch (Throwable ex) {\n-                LOG.warn(\"ShutdownHook \u0027\" + hook.getClass().getSimpleName() +\n-                         \"\u0027 failed, \" + ex.toString(), ex);\n+                LOG.warn(\"ShutdownHook \u0027\" + entry.getHook().getClass().\n+                    getSimpleName() + \"\u0027 failed, \" + ex.toString(), ex);\n               }\n             }\n+            try {\n+              EXECUTOR.shutdown();\n+              if (!EXECUTOR.awaitTermination(TIMEOUT_DEFAULT,\n+                  TIME_UNIT_DEFAULT)) {\n+                LOG.error(\"ShutdownHookManger shutdown forcefully.\");\n+                EXECUTOR.shutdownNow();\n+              }\n+              LOG.info(\"ShutdownHookManger complete shutdown.\");\n+            } catch (InterruptedException ex) {\n+              LOG.error(\"ShutdownHookManger interrupted while waiting for \" +\n+                  \"termination.\", ex);\n+              EXECUTOR.shutdownNow();\n+              Thread.currentThread().interrupt();\n+            }\n           }\n\\ No newline at end of file\n",
      "actualSource": "          public void run() {\n            MGR.shutdownInProgress.set(true);\n            for (HookEntry entry: MGR.getShutdownHooksInOrder()) {\n              Future\u003c?\u003e future \u003d EXECUTOR.submit(entry.getHook());\n              try {\n                future.get(entry.getTimeout(), entry.getTimeUnit());\n              } catch (TimeoutException ex) {\n                future.cancel(true);\n                LOG.warn(\"ShutdownHook \u0027\" + entry.getHook().getClass().\n                    getSimpleName() + \"\u0027 timeout, \" + ex.toString(), ex);\n              } catch (Throwable ex) {\n                LOG.warn(\"ShutdownHook \u0027\" + entry.getHook().getClass().\n                    getSimpleName() + \"\u0027 failed, \" + ex.toString(), ex);\n              }\n            }\n            try {\n              EXECUTOR.shutdown();\n              if (!EXECUTOR.awaitTermination(TIMEOUT_DEFAULT,\n                  TIME_UNIT_DEFAULT)) {\n                LOG.error(\"ShutdownHookManger shutdown forcefully.\");\n                EXECUTOR.shutdownNow();\n              }\n              LOG.info(\"ShutdownHookManger complete shutdown.\");\n            } catch (InterruptedException ex) {\n              LOG.error(\"ShutdownHookManger interrupted while waiting for \" +\n                  \"termination.\", ex);\n              EXECUTOR.shutdownNow();\n              Thread.currentThread().interrupt();\n            }\n          }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/ShutdownHookManager.java",
      "extendedDetails": {}
    },
    "8a0c7323ce36032a56c228fc8076d9d3214274ba": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-8325. Add a ShutdownHookManager to be used by different components instead of the JVM shutdownhook (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1332345 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/04/12 12:21 PM",
      "commitName": "8a0c7323ce36032a56c228fc8076d9d3214274ba",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,11 @@\n+        public void run() {\n+          MGR.shutdownInProgress.set(true);\n+          for (Runnable hook: MGR.getShutdownHooksInOrder()) {\n+            try {\n+              hook.run();\n+            } catch (Throwable ex) {\n+              LOG.warn(\"ShutdownHook \u0027\" + hook.getClass().getSimpleName() +\n+                       \"\u0027 failed, \" + ex.toString(), ex);\n+            }\n+          }\n+        }\n\\ No newline at end of file\n",
      "actualSource": "        public void run() {\n          MGR.shutdownInProgress.set(true);\n          for (Runnable hook: MGR.getShutdownHooksInOrder()) {\n            try {\n              hook.run();\n            } catch (Throwable ex) {\n              LOG.warn(\"ShutdownHook \u0027\" + hook.getClass().getSimpleName() +\n                       \"\u0027 failed, \" + ex.toString(), ex);\n            }\n          }\n        }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/ShutdownHookManager.java"
    }
  }
}