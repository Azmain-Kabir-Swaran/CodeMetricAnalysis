{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSImage.java",
  "functionName": "loadFSImageFile",
  "functionId": "loadFSImageFile___target-FSNamesystem__recovery-MetaRecoveryContext__imageFile-FSImageFile__startupOption-StartupOption",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImage.java",
  "functionStartLine": 797,
  "functionEndLine": 827,
  "numCommitsSeen": 204,
  "timeTaken": 4495,
  "changeHistory": [
    "25051c3bd08efc12333a6acb51782cc7800403a4",
    "db37f02dc704ad9eec8c56e3e466a5f37d138d74",
    "eb6939cea0343840c62b930d4adb377f5eaf879f",
    "18620649f96d9e378fb7ea40de216284a9d525c7",
    "00067895a01c66d53715b50bbcb3605efd6425f2",
    "bcabbcdf4cf7b4bcda62d74b06c9736bc55f6fc1"
  ],
  "changeHistoryShort": {
    "25051c3bd08efc12333a6acb51782cc7800403a4": "Ybodychange",
    "db37f02dc704ad9eec8c56e3e466a5f37d138d74": "Ybodychange",
    "eb6939cea0343840c62b930d4adb377f5eaf879f": "Ybodychange",
    "18620649f96d9e378fb7ea40de216284a9d525c7": "Ymultichange(Yparameterchange,Ybodychange)",
    "00067895a01c66d53715b50bbcb3605efd6425f2": "Ybodychange",
    "bcabbcdf4cf7b4bcda62d74b06c9736bc55f6fc1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "25051c3bd08efc12333a6acb51782cc7800403a4": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9569. Log the name of the fsimage being loaded for better supportability. (Yongjun Zhang)\n",
      "commitDate": "12/01/16 9:22 AM",
      "commitName": "25051c3bd08efc12333a6acb51782cc7800403a4",
      "commitAuthor": "Yongjun Zhang",
      "commitDateOld": "17/12/15 1:50 PM",
      "commitNameOld": "db37f02dc704ad9eec8c56e3e466a5f37d138d74",
      "commitAuthorOld": "cnauroth",
      "daysBetweenCommits": 25.81,
      "commitsBetweenForRepo": 120,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   void loadFSImageFile(FSNamesystem target, MetaRecoveryContext recovery,\n       FSImageFile imageFile, StartupOption startupOption) throws IOException {\n-    LOG.debug(\"Planning to load image :\\n\" + imageFile);\n+    LOG.info(\"Planning to load image: \" + imageFile);\n     StorageDirectory sdForProperties \u003d imageFile.sd;\n     storage.readProperties(sdForProperties, startupOption);\n \n     if (NameNodeLayoutVersion.supports(\n         LayoutVersion.Feature.TXID_BASED_LAYOUT, getLayoutVersion())) {\n       // For txid-based layout, we should have a .md5 file\n       // next to the image file\n       boolean isRollingRollback \u003d RollingUpgradeStartupOption.ROLLBACK\n           .matches(startupOption);\n       loadFSImage(imageFile.getFile(), target, recovery, isRollingRollback);\n     } else if (NameNodeLayoutVersion.supports(\n         LayoutVersion.Feature.FSIMAGE_CHECKSUM, getLayoutVersion())) {\n       // In 0.22, we have the checksum stored in the VERSION file.\n       String md5 \u003d storage.getDeprecatedProperty(\n           NNStorage.DEPRECATED_MESSAGE_DIGEST_PROPERTY);\n       if (md5 \u003d\u003d null) {\n         throw new InconsistentFSStateException(sdForProperties.getRoot(),\n             \"Message digest property \" +\n             NNStorage.DEPRECATED_MESSAGE_DIGEST_PROPERTY +\n             \" not set for storage directory \" + sdForProperties.getRoot());\n       }\n       loadFSImage(imageFile.getFile(), new MD5Hash(md5), target, recovery,\n           false);\n     } else {\n       // We don\u0027t have any record of the md5sum\n       loadFSImage(imageFile.getFile(), null, target, recovery, false);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void loadFSImageFile(FSNamesystem target, MetaRecoveryContext recovery,\n      FSImageFile imageFile, StartupOption startupOption) throws IOException {\n    LOG.info(\"Planning to load image: \" + imageFile);\n    StorageDirectory sdForProperties \u003d imageFile.sd;\n    storage.readProperties(sdForProperties, startupOption);\n\n    if (NameNodeLayoutVersion.supports(\n        LayoutVersion.Feature.TXID_BASED_LAYOUT, getLayoutVersion())) {\n      // For txid-based layout, we should have a .md5 file\n      // next to the image file\n      boolean isRollingRollback \u003d RollingUpgradeStartupOption.ROLLBACK\n          .matches(startupOption);\n      loadFSImage(imageFile.getFile(), target, recovery, isRollingRollback);\n    } else if (NameNodeLayoutVersion.supports(\n        LayoutVersion.Feature.FSIMAGE_CHECKSUM, getLayoutVersion())) {\n      // In 0.22, we have the checksum stored in the VERSION file.\n      String md5 \u003d storage.getDeprecatedProperty(\n          NNStorage.DEPRECATED_MESSAGE_DIGEST_PROPERTY);\n      if (md5 \u003d\u003d null) {\n        throw new InconsistentFSStateException(sdForProperties.getRoot(),\n            \"Message digest property \" +\n            NNStorage.DEPRECATED_MESSAGE_DIGEST_PROPERTY +\n            \" not set for storage directory \" + sdForProperties.getRoot());\n      }\n      loadFSImage(imageFile.getFile(), new MD5Hash(md5), target, recovery,\n          false);\n    } else {\n      // We don\u0027t have any record of the md5sum\n      loadFSImage(imageFile.getFile(), null, target, recovery, false);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImage.java",
      "extendedDetails": {}
    },
    "db37f02dc704ad9eec8c56e3e466a5f37d138d74": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HDFS-9569.  Log the name of the fsimage being loaded for better supportability. Contributed by Yongjun Zhang.\"\n\nThis reverts commit eb6939cea0343840c62b930d4adb377f5eaf879f.\n",
      "commitDate": "17/12/15 1:50 PM",
      "commitName": "db37f02dc704ad9eec8c56e3e466a5f37d138d74",
      "commitAuthor": "cnauroth",
      "commitDateOld": "17/12/15 8:29 AM",
      "commitNameOld": "eb6939cea0343840c62b930d4adb377f5eaf879f",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 0.22,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   void loadFSImageFile(FSNamesystem target, MetaRecoveryContext recovery,\n       FSImageFile imageFile, StartupOption startupOption) throws IOException {\n-    LOG.info(\"Planning to load image: \" + imageFile);\n+    LOG.debug(\"Planning to load image :\\n\" + imageFile);\n     StorageDirectory sdForProperties \u003d imageFile.sd;\n     storage.readProperties(sdForProperties, startupOption);\n \n     if (NameNodeLayoutVersion.supports(\n         LayoutVersion.Feature.TXID_BASED_LAYOUT, getLayoutVersion())) {\n       // For txid-based layout, we should have a .md5 file\n       // next to the image file\n       boolean isRollingRollback \u003d RollingUpgradeStartupOption.ROLLBACK\n           .matches(startupOption);\n       loadFSImage(imageFile.getFile(), target, recovery, isRollingRollback);\n     } else if (NameNodeLayoutVersion.supports(\n         LayoutVersion.Feature.FSIMAGE_CHECKSUM, getLayoutVersion())) {\n       // In 0.22, we have the checksum stored in the VERSION file.\n       String md5 \u003d storage.getDeprecatedProperty(\n           NNStorage.DEPRECATED_MESSAGE_DIGEST_PROPERTY);\n       if (md5 \u003d\u003d null) {\n         throw new InconsistentFSStateException(sdForProperties.getRoot(),\n             \"Message digest property \" +\n             NNStorage.DEPRECATED_MESSAGE_DIGEST_PROPERTY +\n             \" not set for storage directory \" + sdForProperties.getRoot());\n       }\n       loadFSImage(imageFile.getFile(), new MD5Hash(md5), target, recovery,\n           false);\n     } else {\n       // We don\u0027t have any record of the md5sum\n       loadFSImage(imageFile.getFile(), null, target, recovery, false);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void loadFSImageFile(FSNamesystem target, MetaRecoveryContext recovery,\n      FSImageFile imageFile, StartupOption startupOption) throws IOException {\n    LOG.debug(\"Planning to load image :\\n\" + imageFile);\n    StorageDirectory sdForProperties \u003d imageFile.sd;\n    storage.readProperties(sdForProperties, startupOption);\n\n    if (NameNodeLayoutVersion.supports(\n        LayoutVersion.Feature.TXID_BASED_LAYOUT, getLayoutVersion())) {\n      // For txid-based layout, we should have a .md5 file\n      // next to the image file\n      boolean isRollingRollback \u003d RollingUpgradeStartupOption.ROLLBACK\n          .matches(startupOption);\n      loadFSImage(imageFile.getFile(), target, recovery, isRollingRollback);\n    } else if (NameNodeLayoutVersion.supports(\n        LayoutVersion.Feature.FSIMAGE_CHECKSUM, getLayoutVersion())) {\n      // In 0.22, we have the checksum stored in the VERSION file.\n      String md5 \u003d storage.getDeprecatedProperty(\n          NNStorage.DEPRECATED_MESSAGE_DIGEST_PROPERTY);\n      if (md5 \u003d\u003d null) {\n        throw new InconsistentFSStateException(sdForProperties.getRoot(),\n            \"Message digest property \" +\n            NNStorage.DEPRECATED_MESSAGE_DIGEST_PROPERTY +\n            \" not set for storage directory \" + sdForProperties.getRoot());\n      }\n      loadFSImage(imageFile.getFile(), new MD5Hash(md5), target, recovery,\n          false);\n    } else {\n      // We don\u0027t have any record of the md5sum\n      loadFSImage(imageFile.getFile(), null, target, recovery, false);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImage.java",
      "extendedDetails": {}
    },
    "eb6939cea0343840c62b930d4adb377f5eaf879f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9569.  Log the name of the fsimage being loaded for better supportability. Contributed by Yongjun Zhang.\n",
      "commitDate": "17/12/15 8:29 AM",
      "commitName": "eb6939cea0343840c62b930d4adb377f5eaf879f",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "22/11/15 11:02 PM",
      "commitNameOld": "822869785707b5665962ec0c699cd383dc767345",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 24.39,
      "commitsBetweenForRepo": 156,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   void loadFSImageFile(FSNamesystem target, MetaRecoveryContext recovery,\n       FSImageFile imageFile, StartupOption startupOption) throws IOException {\n-    LOG.debug(\"Planning to load image :\\n\" + imageFile);\n+    LOG.info(\"Planning to load image: \" + imageFile);\n     StorageDirectory sdForProperties \u003d imageFile.sd;\n     storage.readProperties(sdForProperties, startupOption);\n \n     if (NameNodeLayoutVersion.supports(\n         LayoutVersion.Feature.TXID_BASED_LAYOUT, getLayoutVersion())) {\n       // For txid-based layout, we should have a .md5 file\n       // next to the image file\n       boolean isRollingRollback \u003d RollingUpgradeStartupOption.ROLLBACK\n           .matches(startupOption);\n       loadFSImage(imageFile.getFile(), target, recovery, isRollingRollback);\n     } else if (NameNodeLayoutVersion.supports(\n         LayoutVersion.Feature.FSIMAGE_CHECKSUM, getLayoutVersion())) {\n       // In 0.22, we have the checksum stored in the VERSION file.\n       String md5 \u003d storage.getDeprecatedProperty(\n           NNStorage.DEPRECATED_MESSAGE_DIGEST_PROPERTY);\n       if (md5 \u003d\u003d null) {\n         throw new InconsistentFSStateException(sdForProperties.getRoot(),\n             \"Message digest property \" +\n             NNStorage.DEPRECATED_MESSAGE_DIGEST_PROPERTY +\n             \" not set for storage directory \" + sdForProperties.getRoot());\n       }\n       loadFSImage(imageFile.getFile(), new MD5Hash(md5), target, recovery,\n           false);\n     } else {\n       // We don\u0027t have any record of the md5sum\n       loadFSImage(imageFile.getFile(), null, target, recovery, false);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void loadFSImageFile(FSNamesystem target, MetaRecoveryContext recovery,\n      FSImageFile imageFile, StartupOption startupOption) throws IOException {\n    LOG.info(\"Planning to load image: \" + imageFile);\n    StorageDirectory sdForProperties \u003d imageFile.sd;\n    storage.readProperties(sdForProperties, startupOption);\n\n    if (NameNodeLayoutVersion.supports(\n        LayoutVersion.Feature.TXID_BASED_LAYOUT, getLayoutVersion())) {\n      // For txid-based layout, we should have a .md5 file\n      // next to the image file\n      boolean isRollingRollback \u003d RollingUpgradeStartupOption.ROLLBACK\n          .matches(startupOption);\n      loadFSImage(imageFile.getFile(), target, recovery, isRollingRollback);\n    } else if (NameNodeLayoutVersion.supports(\n        LayoutVersion.Feature.FSIMAGE_CHECKSUM, getLayoutVersion())) {\n      // In 0.22, we have the checksum stored in the VERSION file.\n      String md5 \u003d storage.getDeprecatedProperty(\n          NNStorage.DEPRECATED_MESSAGE_DIGEST_PROPERTY);\n      if (md5 \u003d\u003d null) {\n        throw new InconsistentFSStateException(sdForProperties.getRoot(),\n            \"Message digest property \" +\n            NNStorage.DEPRECATED_MESSAGE_DIGEST_PROPERTY +\n            \" not set for storage directory \" + sdForProperties.getRoot());\n      }\n      loadFSImage(imageFile.getFile(), new MD5Hash(md5), target, recovery,\n          false);\n    } else {\n      // We don\u0027t have any record of the md5sum\n      loadFSImage(imageFile.getFile(), null, target, recovery, false);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImage.java",
      "extendedDetails": {}
    },
    "18620649f96d9e378fb7ea40de216284a9d525c7": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-7185. The active NameNode will not accept an fsimage sent from the standby during rolling upgrade. Contributed by Jing Zhao.\n",
      "commitDate": "15/10/14 10:27 AM",
      "commitName": "18620649f96d9e378fb7ea40de216284a9d525c7",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7185. The active NameNode will not accept an fsimage sent from the standby during rolling upgrade. Contributed by Jing Zhao.\n",
          "commitDate": "15/10/14 10:27 AM",
          "commitName": "18620649f96d9e378fb7ea40de216284a9d525c7",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "18/07/14 10:14 AM",
          "commitNameOld": "5f9e52f7459d3dc4ac3a5febd1dc6e00829d30ed",
          "commitAuthorOld": "Chris Nauroth",
          "daysBetweenCommits": 89.01,
          "commitsBetweenForRepo": 875,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,31 @@\n   void loadFSImageFile(FSNamesystem target, MetaRecoveryContext recovery,\n-      FSImageFile imageFile) throws IOException {\n+      FSImageFile imageFile, StartupOption startupOption) throws IOException {\n     LOG.debug(\"Planning to load image :\\n\" + imageFile);\n     StorageDirectory sdForProperties \u003d imageFile.sd;\n-    storage.readProperties(sdForProperties);\n+    storage.readProperties(sdForProperties, startupOption);\n \n     if (NameNodeLayoutVersion.supports(\n         LayoutVersion.Feature.TXID_BASED_LAYOUT, getLayoutVersion())) {\n       // For txid-based layout, we should have a .md5 file\n       // next to the image file\n-      loadFSImage(imageFile.getFile(), target, recovery);\n+      boolean isRollingRollback \u003d RollingUpgradeStartupOption.ROLLBACK\n+          .matches(startupOption);\n+      loadFSImage(imageFile.getFile(), target, recovery, isRollingRollback);\n     } else if (NameNodeLayoutVersion.supports(\n         LayoutVersion.Feature.FSIMAGE_CHECKSUM, getLayoutVersion())) {\n       // In 0.22, we have the checksum stored in the VERSION file.\n       String md5 \u003d storage.getDeprecatedProperty(\n           NNStorage.DEPRECATED_MESSAGE_DIGEST_PROPERTY);\n       if (md5 \u003d\u003d null) {\n         throw new InconsistentFSStateException(sdForProperties.getRoot(),\n             \"Message digest property \" +\n             NNStorage.DEPRECATED_MESSAGE_DIGEST_PROPERTY +\n             \" not set for storage directory \" + sdForProperties.getRoot());\n       }\n-      loadFSImage(imageFile.getFile(), new MD5Hash(md5), target, recovery);\n+      loadFSImage(imageFile.getFile(), new MD5Hash(md5), target, recovery,\n+          false);\n     } else {\n       // We don\u0027t have any record of the md5sum\n-      loadFSImage(imageFile.getFile(), null, target, recovery);\n+      loadFSImage(imageFile.getFile(), null, target, recovery, false);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void loadFSImageFile(FSNamesystem target, MetaRecoveryContext recovery,\n      FSImageFile imageFile, StartupOption startupOption) throws IOException {\n    LOG.debug(\"Planning to load image :\\n\" + imageFile);\n    StorageDirectory sdForProperties \u003d imageFile.sd;\n    storage.readProperties(sdForProperties, startupOption);\n\n    if (NameNodeLayoutVersion.supports(\n        LayoutVersion.Feature.TXID_BASED_LAYOUT, getLayoutVersion())) {\n      // For txid-based layout, we should have a .md5 file\n      // next to the image file\n      boolean isRollingRollback \u003d RollingUpgradeStartupOption.ROLLBACK\n          .matches(startupOption);\n      loadFSImage(imageFile.getFile(), target, recovery, isRollingRollback);\n    } else if (NameNodeLayoutVersion.supports(\n        LayoutVersion.Feature.FSIMAGE_CHECKSUM, getLayoutVersion())) {\n      // In 0.22, we have the checksum stored in the VERSION file.\n      String md5 \u003d storage.getDeprecatedProperty(\n          NNStorage.DEPRECATED_MESSAGE_DIGEST_PROPERTY);\n      if (md5 \u003d\u003d null) {\n        throw new InconsistentFSStateException(sdForProperties.getRoot(),\n            \"Message digest property \" +\n            NNStorage.DEPRECATED_MESSAGE_DIGEST_PROPERTY +\n            \" not set for storage directory \" + sdForProperties.getRoot());\n      }\n      loadFSImage(imageFile.getFile(), new MD5Hash(md5), target, recovery,\n          false);\n    } else {\n      // We don\u0027t have any record of the md5sum\n      loadFSImage(imageFile.getFile(), null, target, recovery, false);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImage.java",
          "extendedDetails": {
            "oldValue": "[target-FSNamesystem, recovery-MetaRecoveryContext, imageFile-FSImageFile]",
            "newValue": "[target-FSNamesystem, recovery-MetaRecoveryContext, imageFile-FSImageFile, startupOption-StartupOption]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7185. The active NameNode will not accept an fsimage sent from the standby during rolling upgrade. Contributed by Jing Zhao.\n",
          "commitDate": "15/10/14 10:27 AM",
          "commitName": "18620649f96d9e378fb7ea40de216284a9d525c7",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "18/07/14 10:14 AM",
          "commitNameOld": "5f9e52f7459d3dc4ac3a5febd1dc6e00829d30ed",
          "commitAuthorOld": "Chris Nauroth",
          "daysBetweenCommits": 89.01,
          "commitsBetweenForRepo": 875,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,31 @@\n   void loadFSImageFile(FSNamesystem target, MetaRecoveryContext recovery,\n-      FSImageFile imageFile) throws IOException {\n+      FSImageFile imageFile, StartupOption startupOption) throws IOException {\n     LOG.debug(\"Planning to load image :\\n\" + imageFile);\n     StorageDirectory sdForProperties \u003d imageFile.sd;\n-    storage.readProperties(sdForProperties);\n+    storage.readProperties(sdForProperties, startupOption);\n \n     if (NameNodeLayoutVersion.supports(\n         LayoutVersion.Feature.TXID_BASED_LAYOUT, getLayoutVersion())) {\n       // For txid-based layout, we should have a .md5 file\n       // next to the image file\n-      loadFSImage(imageFile.getFile(), target, recovery);\n+      boolean isRollingRollback \u003d RollingUpgradeStartupOption.ROLLBACK\n+          .matches(startupOption);\n+      loadFSImage(imageFile.getFile(), target, recovery, isRollingRollback);\n     } else if (NameNodeLayoutVersion.supports(\n         LayoutVersion.Feature.FSIMAGE_CHECKSUM, getLayoutVersion())) {\n       // In 0.22, we have the checksum stored in the VERSION file.\n       String md5 \u003d storage.getDeprecatedProperty(\n           NNStorage.DEPRECATED_MESSAGE_DIGEST_PROPERTY);\n       if (md5 \u003d\u003d null) {\n         throw new InconsistentFSStateException(sdForProperties.getRoot(),\n             \"Message digest property \" +\n             NNStorage.DEPRECATED_MESSAGE_DIGEST_PROPERTY +\n             \" not set for storage directory \" + sdForProperties.getRoot());\n       }\n-      loadFSImage(imageFile.getFile(), new MD5Hash(md5), target, recovery);\n+      loadFSImage(imageFile.getFile(), new MD5Hash(md5), target, recovery,\n+          false);\n     } else {\n       // We don\u0027t have any record of the md5sum\n-      loadFSImage(imageFile.getFile(), null, target, recovery);\n+      loadFSImage(imageFile.getFile(), null, target, recovery, false);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void loadFSImageFile(FSNamesystem target, MetaRecoveryContext recovery,\n      FSImageFile imageFile, StartupOption startupOption) throws IOException {\n    LOG.debug(\"Planning to load image :\\n\" + imageFile);\n    StorageDirectory sdForProperties \u003d imageFile.sd;\n    storage.readProperties(sdForProperties, startupOption);\n\n    if (NameNodeLayoutVersion.supports(\n        LayoutVersion.Feature.TXID_BASED_LAYOUT, getLayoutVersion())) {\n      // For txid-based layout, we should have a .md5 file\n      // next to the image file\n      boolean isRollingRollback \u003d RollingUpgradeStartupOption.ROLLBACK\n          .matches(startupOption);\n      loadFSImage(imageFile.getFile(), target, recovery, isRollingRollback);\n    } else if (NameNodeLayoutVersion.supports(\n        LayoutVersion.Feature.FSIMAGE_CHECKSUM, getLayoutVersion())) {\n      // In 0.22, we have the checksum stored in the VERSION file.\n      String md5 \u003d storage.getDeprecatedProperty(\n          NNStorage.DEPRECATED_MESSAGE_DIGEST_PROPERTY);\n      if (md5 \u003d\u003d null) {\n        throw new InconsistentFSStateException(sdForProperties.getRoot(),\n            \"Message digest property \" +\n            NNStorage.DEPRECATED_MESSAGE_DIGEST_PROPERTY +\n            \" not set for storage directory \" + sdForProperties.getRoot());\n      }\n      loadFSImage(imageFile.getFile(), new MD5Hash(md5), target, recovery,\n          false);\n    } else {\n      // We don\u0027t have any record of the md5sum\n      loadFSImage(imageFile.getFile(), null, target, recovery, false);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImage.java",
          "extendedDetails": {}
        }
      ]
    },
    "00067895a01c66d53715b50bbcb3605efd6425f2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5754. Split LayoutVerion into NameNodeLayoutVersion and DataNodeLayoutVersion. Contributed by Brandon Li\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-5535@1563041 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/01/14 7:21 PM",
      "commitName": "00067895a01c66d53715b50bbcb3605efd6425f2",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "26/01/14 8:34 AM",
      "commitNameOld": "a9110e178837bdcd236e528875daa3651e13dacc",
      "commitAuthorOld": "",
      "daysBetweenCommits": 4.45,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   void loadFSImageFile(FSNamesystem target, MetaRecoveryContext recovery,\n       FSImageFile imageFile) throws IOException {\n     LOG.debug(\"Planning to load image :\\n\" + imageFile);\n     StorageDirectory sdForProperties \u003d imageFile.sd;\n     storage.readProperties(sdForProperties);\n \n-    if (LayoutVersion.supports(Feature.TXID_BASED_LAYOUT,\n-                               getLayoutVersion())) {\n+    if (NameNodeLayoutVersion.supports(\n+        LayoutVersion.Feature.TXID_BASED_LAYOUT, getLayoutVersion())) {\n       // For txid-based layout, we should have a .md5 file\n       // next to the image file\n       loadFSImage(imageFile.getFile(), target, recovery);\n-    } else if (LayoutVersion.supports(Feature.FSIMAGE_CHECKSUM,\n-                                      getLayoutVersion())) {\n+    } else if (NameNodeLayoutVersion.supports(\n+        LayoutVersion.Feature.FSIMAGE_CHECKSUM, getLayoutVersion())) {\n       // In 0.22, we have the checksum stored in the VERSION file.\n       String md5 \u003d storage.getDeprecatedProperty(\n           NNStorage.DEPRECATED_MESSAGE_DIGEST_PROPERTY);\n       if (md5 \u003d\u003d null) {\n         throw new InconsistentFSStateException(sdForProperties.getRoot(),\n             \"Message digest property \" +\n             NNStorage.DEPRECATED_MESSAGE_DIGEST_PROPERTY +\n             \" not set for storage directory \" + sdForProperties.getRoot());\n       }\n       loadFSImage(imageFile.getFile(), new MD5Hash(md5), target, recovery);\n     } else {\n       // We don\u0027t have any record of the md5sum\n       loadFSImage(imageFile.getFile(), null, target, recovery);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void loadFSImageFile(FSNamesystem target, MetaRecoveryContext recovery,\n      FSImageFile imageFile) throws IOException {\n    LOG.debug(\"Planning to load image :\\n\" + imageFile);\n    StorageDirectory sdForProperties \u003d imageFile.sd;\n    storage.readProperties(sdForProperties);\n\n    if (NameNodeLayoutVersion.supports(\n        LayoutVersion.Feature.TXID_BASED_LAYOUT, getLayoutVersion())) {\n      // For txid-based layout, we should have a .md5 file\n      // next to the image file\n      loadFSImage(imageFile.getFile(), target, recovery);\n    } else if (NameNodeLayoutVersion.supports(\n        LayoutVersion.Feature.FSIMAGE_CHECKSUM, getLayoutVersion())) {\n      // In 0.22, we have the checksum stored in the VERSION file.\n      String md5 \u003d storage.getDeprecatedProperty(\n          NNStorage.DEPRECATED_MESSAGE_DIGEST_PROPERTY);\n      if (md5 \u003d\u003d null) {\n        throw new InconsistentFSStateException(sdForProperties.getRoot(),\n            \"Message digest property \" +\n            NNStorage.DEPRECATED_MESSAGE_DIGEST_PROPERTY +\n            \" not set for storage directory \" + sdForProperties.getRoot());\n      }\n      loadFSImage(imageFile.getFile(), new MD5Hash(md5), target, recovery);\n    } else {\n      // We don\u0027t have any record of the md5sum\n      loadFSImage(imageFile.getFile(), null, target, recovery);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImage.java",
      "extendedDetails": {}
    },
    "bcabbcdf4cf7b4bcda62d74b06c9736bc55f6fc1": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-3277. fail over to loading a different FSImage if the first one we try to load is corrupt. Contributed by Colin Patrick McCabe and Andrew Wang.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1456578 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/03/13 11:04 AM",
      "commitName": "bcabbcdf4cf7b4bcda62d74b06c9736bc55f6fc1",
      "commitAuthor": "Aaron Myers",
      "diff": "@@ -0,0 +1,28 @@\n+  void loadFSImageFile(FSNamesystem target, MetaRecoveryContext recovery,\n+      FSImageFile imageFile) throws IOException {\n+    LOG.debug(\"Planning to load image :\\n\" + imageFile);\n+    StorageDirectory sdForProperties \u003d imageFile.sd;\n+    storage.readProperties(sdForProperties);\n+\n+    if (LayoutVersion.supports(Feature.TXID_BASED_LAYOUT,\n+                               getLayoutVersion())) {\n+      // For txid-based layout, we should have a .md5 file\n+      // next to the image file\n+      loadFSImage(imageFile.getFile(), target, recovery);\n+    } else if (LayoutVersion.supports(Feature.FSIMAGE_CHECKSUM,\n+                                      getLayoutVersion())) {\n+      // In 0.22, we have the checksum stored in the VERSION file.\n+      String md5 \u003d storage.getDeprecatedProperty(\n+          NNStorage.DEPRECATED_MESSAGE_DIGEST_PROPERTY);\n+      if (md5 \u003d\u003d null) {\n+        throw new InconsistentFSStateException(sdForProperties.getRoot(),\n+            \"Message digest property \" +\n+            NNStorage.DEPRECATED_MESSAGE_DIGEST_PROPERTY +\n+            \" not set for storage directory \" + sdForProperties.getRoot());\n+      }\n+      loadFSImage(imageFile.getFile(), new MD5Hash(md5), target, recovery);\n+    } else {\n+      // We don\u0027t have any record of the md5sum\n+      loadFSImage(imageFile.getFile(), null, target, recovery);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  void loadFSImageFile(FSNamesystem target, MetaRecoveryContext recovery,\n      FSImageFile imageFile) throws IOException {\n    LOG.debug(\"Planning to load image :\\n\" + imageFile);\n    StorageDirectory sdForProperties \u003d imageFile.sd;\n    storage.readProperties(sdForProperties);\n\n    if (LayoutVersion.supports(Feature.TXID_BASED_LAYOUT,\n                               getLayoutVersion())) {\n      // For txid-based layout, we should have a .md5 file\n      // next to the image file\n      loadFSImage(imageFile.getFile(), target, recovery);\n    } else if (LayoutVersion.supports(Feature.FSIMAGE_CHECKSUM,\n                                      getLayoutVersion())) {\n      // In 0.22, we have the checksum stored in the VERSION file.\n      String md5 \u003d storage.getDeprecatedProperty(\n          NNStorage.DEPRECATED_MESSAGE_DIGEST_PROPERTY);\n      if (md5 \u003d\u003d null) {\n        throw new InconsistentFSStateException(sdForProperties.getRoot(),\n            \"Message digest property \" +\n            NNStorage.DEPRECATED_MESSAGE_DIGEST_PROPERTY +\n            \" not set for storage directory \" + sdForProperties.getRoot());\n      }\n      loadFSImage(imageFile.getFile(), new MD5Hash(md5), target, recovery);\n    } else {\n      // We don\u0027t have any record of the md5sum\n      loadFSImage(imageFile.getFile(), null, target, recovery);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImage.java"
    }
  }
}