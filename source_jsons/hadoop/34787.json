{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DefaultRequestInterceptor.java",
  "functionName": "createRMClient",
  "functionId": "createRMClient___appContext-AMRMProxyApplicationContext__conf-Configuration(modifiers-final)",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/DefaultRequestInterceptor.java",
  "functionStartLine": 95,
  "functionEndLine": 119,
  "numCommitsSeen": 9,
  "timeTaken": 1171,
  "changeHistory": [
    "82c9e061017c32e633e0b0cbb7978749a6df4fb2"
  ],
  "changeHistoryShort": {
    "82c9e061017c32e633e0b0cbb7978749a6df4fb2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "82c9e061017c32e633e0b0cbb7978749a6df4fb2": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5457. Refactor DistributedScheduling framework to pull out common functionality. (asuresh)\n",
      "commitDate": "09/08/16 12:42 AM",
      "commitName": "82c9e061017c32e633e0b0cbb7978749a6df4fb2",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,25 @@\n+  private ApplicationMasterProtocol createRMClient(\n+      AMRMProxyApplicationContext appContext, final Configuration conf)\n+      throws IOException, InterruptedException {\n+    if (appContext.getNMCotext().isDistributedSchedulingEnabled()) {\n+      return user.doAs(\n+          new PrivilegedExceptionAction\u003cDistributedSchedulingAMProtocol\u003e() {\n+            @Override\n+            public DistributedSchedulingAMProtocol run() throws Exception {\n+              setAMRMTokenService(conf);\n+              return ServerRMProxy.createRMProxy(conf,\n+                  DistributedSchedulingAMProtocol.class);\n+            }\n+          });\n+    } else {\n+      return user.doAs(\n+          new PrivilegedExceptionAction\u003cApplicationMasterProtocol\u003e() {\n+            @Override\n+            public ApplicationMasterProtocol run() throws Exception {\n+              setAMRMTokenService(conf);\n+              return ClientRMProxy.createRMProxy(conf,\n+                  ApplicationMasterProtocol.class);\n+            }\n+          });\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private ApplicationMasterProtocol createRMClient(\n      AMRMProxyApplicationContext appContext, final Configuration conf)\n      throws IOException, InterruptedException {\n    if (appContext.getNMCotext().isDistributedSchedulingEnabled()) {\n      return user.doAs(\n          new PrivilegedExceptionAction\u003cDistributedSchedulingAMProtocol\u003e() {\n            @Override\n            public DistributedSchedulingAMProtocol run() throws Exception {\n              setAMRMTokenService(conf);\n              return ServerRMProxy.createRMProxy(conf,\n                  DistributedSchedulingAMProtocol.class);\n            }\n          });\n    } else {\n      return user.doAs(\n          new PrivilegedExceptionAction\u003cApplicationMasterProtocol\u003e() {\n            @Override\n            public ApplicationMasterProtocol run() throws Exception {\n              setAMRMTokenService(conf);\n              return ClientRMProxy.createRMProxy(conf,\n                  ApplicationMasterProtocol.class);\n            }\n          });\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/DefaultRequestInterceptor.java"
    }
  }
}