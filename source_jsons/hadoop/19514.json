{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BackupStore.java",
  "functionName": "createInMemorySegment",
  "functionId": "createInMemorySegment",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/BackupStore.java",
  "functionStartLine": 487,
  "functionEndLine": 515,
  "numCommitsSeen": 8,
  "timeTaken": 9846,
  "changeHistory": [
    "a00a7297291ec2a14b3ddfc0deae94d7b6529828",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "a00a7297291ec2a14b3ddfc0deae94d7b6529828": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Ymovefromfile",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a00a7297291ec2a14b3ddfc0deae94d7b6529828": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5399. Unnecessary Configuration instantiation in IFileInputStream slows down merge. (Stanislav Barton via Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1510811 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/08/13 4:32 PM",
      "commitName": "a00a7297291ec2a14b3ddfc0deae94d7b6529828",
      "commitAuthor": "Sanford Ryza",
      "commitDateOld": "21/09/11 11:28 AM",
      "commitNameOld": "d00b3c49f6fb3f6a617add6203c6b55f6c345940",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 684.21,
      "commitsBetweenForRepo": 4282,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n     void createInMemorySegment () throws IOException {\n \n       // If nothing was written in this block because the record size\n       // was greater than the allocated block size, just return.\n       if (usedSize \u003d\u003d 0) {\n         ramManager.unreserve(blockSize);\n         return;\n       }\n \n       // spaceAvailable would have ensured that there is enough space\n       // left for the EOF markers.\n       assert ((blockSize - usedSize) \u003e\u003d EOF_MARKER_SIZE);\n   \n       WritableUtils.writeVInt(dataOut, IFile.EOF_MARKER);\n       WritableUtils.writeVInt(dataOut, IFile.EOF_MARKER);\n \n       usedSize +\u003d EOF_MARKER_SIZE;\n \n       ramManager.unreserve(blockSize - usedSize);\n \n       Reader\u003cK, V\u003e reader \u003d \n         new org.apache.hadoop.mapreduce.task.reduce.InMemoryReader\u003cK, V\u003e(null, \n             (org.apache.hadoop.mapred.TaskAttemptID) tid, \n-            dataOut.getData(), 0, usedSize);\n+            dataOut.getData(), 0, usedSize, conf);\n       Segment\u003cK, V\u003e segment \u003d new Segment\u003cK, V\u003e(reader, false);\n       segmentList.add(segment);\n       LOG.debug(\"Added Memory Segment to List. List Size is \" + \n           segmentList.size());\n     }\n\\ No newline at end of file\n",
      "actualSource": "    void createInMemorySegment () throws IOException {\n\n      // If nothing was written in this block because the record size\n      // was greater than the allocated block size, just return.\n      if (usedSize \u003d\u003d 0) {\n        ramManager.unreserve(blockSize);\n        return;\n      }\n\n      // spaceAvailable would have ensured that there is enough space\n      // left for the EOF markers.\n      assert ((blockSize - usedSize) \u003e\u003d EOF_MARKER_SIZE);\n  \n      WritableUtils.writeVInt(dataOut, IFile.EOF_MARKER);\n      WritableUtils.writeVInt(dataOut, IFile.EOF_MARKER);\n\n      usedSize +\u003d EOF_MARKER_SIZE;\n\n      ramManager.unreserve(blockSize - usedSize);\n\n      Reader\u003cK, V\u003e reader \u003d \n        new org.apache.hadoop.mapreduce.task.reduce.InMemoryReader\u003cK, V\u003e(null, \n            (org.apache.hadoop.mapred.TaskAttemptID) tid, \n            dataOut.getData(), 0, usedSize, conf);\n      Segment\u003cK, V\u003e segment \u003d new Segment\u003cK, V\u003e(reader, false);\n      segmentList.add(segment);\n      LOG.debug(\"Added Memory Segment to List. List Size is \" + \n          segmentList.size());\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/BackupStore.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    void createInMemorySegment () throws IOException {\n\n      // If nothing was written in this block because the record size\n      // was greater than the allocated block size, just return.\n      if (usedSize \u003d\u003d 0) {\n        ramManager.unreserve(blockSize);\n        return;\n      }\n\n      // spaceAvailable would have ensured that there is enough space\n      // left for the EOF markers.\n      assert ((blockSize - usedSize) \u003e\u003d EOF_MARKER_SIZE);\n  \n      WritableUtils.writeVInt(dataOut, IFile.EOF_MARKER);\n      WritableUtils.writeVInt(dataOut, IFile.EOF_MARKER);\n\n      usedSize +\u003d EOF_MARKER_SIZE;\n\n      ramManager.unreserve(blockSize - usedSize);\n\n      Reader\u003cK, V\u003e reader \u003d \n        new org.apache.hadoop.mapreduce.task.reduce.InMemoryReader\u003cK, V\u003e(null, \n            (org.apache.hadoop.mapred.TaskAttemptID) tid, \n            dataOut.getData(), 0, usedSize);\n      Segment\u003cK, V\u003e segment \u003d new Segment\u003cK, V\u003e(reader, false);\n      segmentList.add(segment);\n      LOG.debug(\"Added Memory Segment to List. List Size is \" + \n          segmentList.size());\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/BackupStore.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/BackupStore.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/BackupStore.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Ymovefromfile",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    void createInMemorySegment () throws IOException {\n\n      // If nothing was written in this block because the record size\n      // was greater than the allocated block size, just return.\n      if (usedSize \u003d\u003d 0) {\n        ramManager.unreserve(blockSize);\n        return;\n      }\n\n      // spaceAvailable would have ensured that there is enough space\n      // left for the EOF markers.\n      assert ((blockSize - usedSize) \u003e\u003d EOF_MARKER_SIZE);\n  \n      WritableUtils.writeVInt(dataOut, IFile.EOF_MARKER);\n      WritableUtils.writeVInt(dataOut, IFile.EOF_MARKER);\n\n      usedSize +\u003d EOF_MARKER_SIZE;\n\n      ramManager.unreserve(blockSize - usedSize);\n\n      Reader\u003cK, V\u003e reader \u003d \n        new org.apache.hadoop.mapreduce.task.reduce.InMemoryReader\u003cK, V\u003e(null, \n            (org.apache.hadoop.mapred.TaskAttemptID) tid, \n            dataOut.getData(), 0, usedSize);\n      Segment\u003cK, V\u003e segment \u003d new Segment\u003cK, V\u003e(reader, false);\n      segmentList.add(segment);\n      LOG.debug(\"Added Memory Segment to List. List Size is \" + \n          segmentList.size());\n    }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/BackupStore.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapred/BackupStore.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapred/BackupStore.java",
        "oldMethodName": "createInMemorySegment",
        "newMethodName": "createInMemorySegment"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,29 @@\n+    void createInMemorySegment () throws IOException {\n+\n+      // If nothing was written in this block because the record size\n+      // was greater than the allocated block size, just return.\n+      if (usedSize \u003d\u003d 0) {\n+        ramManager.unreserve(blockSize);\n+        return;\n+      }\n+\n+      // spaceAvailable would have ensured that there is enough space\n+      // left for the EOF markers.\n+      assert ((blockSize - usedSize) \u003e\u003d EOF_MARKER_SIZE);\n+  \n+      WritableUtils.writeVInt(dataOut, IFile.EOF_MARKER);\n+      WritableUtils.writeVInt(dataOut, IFile.EOF_MARKER);\n+\n+      usedSize +\u003d EOF_MARKER_SIZE;\n+\n+      ramManager.unreserve(blockSize - usedSize);\n+\n+      Reader\u003cK, V\u003e reader \u003d \n+        new org.apache.hadoop.mapreduce.task.reduce.InMemoryReader\u003cK, V\u003e(null, \n+            (org.apache.hadoop.mapred.TaskAttemptID) tid, \n+            dataOut.getData(), 0, usedSize);\n+      Segment\u003cK, V\u003e segment \u003d new Segment\u003cK, V\u003e(reader, false);\n+      segmentList.add(segment);\n+      LOG.debug(\"Added Memory Segment to List. List Size is \" + \n+          segmentList.size());\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    void createInMemorySegment () throws IOException {\n\n      // If nothing was written in this block because the record size\n      // was greater than the allocated block size, just return.\n      if (usedSize \u003d\u003d 0) {\n        ramManager.unreserve(blockSize);\n        return;\n      }\n\n      // spaceAvailable would have ensured that there is enough space\n      // left for the EOF markers.\n      assert ((blockSize - usedSize) \u003e\u003d EOF_MARKER_SIZE);\n  \n      WritableUtils.writeVInt(dataOut, IFile.EOF_MARKER);\n      WritableUtils.writeVInt(dataOut, IFile.EOF_MARKER);\n\n      usedSize +\u003d EOF_MARKER_SIZE;\n\n      ramManager.unreserve(blockSize - usedSize);\n\n      Reader\u003cK, V\u003e reader \u003d \n        new org.apache.hadoop.mapreduce.task.reduce.InMemoryReader\u003cK, V\u003e(null, \n            (org.apache.hadoop.mapred.TaskAttemptID) tid, \n            dataOut.getData(), 0, usedSize);\n      Segment\u003cK, V\u003e segment \u003d new Segment\u003cK, V\u003e(reader, false);\n      segmentList.add(segment);\n      LOG.debug(\"Added Memory Segment to List. List Size is \" + \n          segmentList.size());\n    }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapred/BackupStore.java"
    }
  }
}