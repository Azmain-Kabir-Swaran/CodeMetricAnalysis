{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FlowRunDocument.java",
  "functionName": "aggregateMetrics",
  "functionId": "aggregateMetrics___metricSubDocMap-Map__String,TimelineMetricSubDoc__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-documentstore/src/main/java/org/apache/hadoop/yarn/server/timelineservice/documentstore/collection/document/flowrun/FlowRunDocument.java",
  "functionStartLine": 98,
  "functionEndLine": 121,
  "numCommitsSeen": 2,
  "timeTaken": 1005,
  "changeHistory": [
    "1943db557124439f9f41c18a618455ccf4c3e6cc",
    "f235a942d5b7cab86f0cb4f5ba285f07cd939a40"
  ],
  "changeHistoryShort": {
    "1943db557124439f9f41c18a618455ccf4c3e6cc": "Ybodychange",
    "f235a942d5b7cab86f0cb4f5ba285f07cd939a40": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1943db557124439f9f41c18a618455ccf4c3e6cc": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16237. Fix new findbugs issues after updating guava to 27.0-jre.\n\nAuthor:    Gabor Bota \u003cgabor.bota@cloudera.com\u003e\n",
      "commitDate": "12/04/19 6:28 PM",
      "commitName": "1943db557124439f9f41c18a618455ccf4c3e6cc",
      "commitAuthor": "Gabor Bota",
      "commitDateOld": "13/03/19 4:45 PM",
      "commitNameOld": "f235a942d5b7cab86f0cb4f5ba285f07cd939a40",
      "commitAuthorOld": "Vrushali C",
      "daysBetweenCommits": 30.07,
      "commitsBetweenForRepo": 225,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,24 @@\n   private void aggregateMetrics(\n       Map\u003cString, TimelineMetricSubDoc\u003e metricSubDocMap) {\n-    for(String metricId : metricSubDocMap.keySet()) {\n+    for(Map.Entry\u003cString, TimelineMetricSubDoc\u003e metricEntry :\n+        metricSubDocMap.entrySet()) {\n+      final String metricId \u003d metricEntry.getKey();\n+      final TimelineMetricSubDoc metricValue \u003d metricEntry.getValue();\n+\n       if (this.metrics.containsKey(metricId)) {\n         TimelineMetric incomingMetric \u003d\n-            metricSubDocMap.get(metricId).fetchTimelineMetric();\n+            metricValue.fetchTimelineMetric();\n         TimelineMetric baseMetric \u003d\n             this.metrics.get(metricId).fetchTimelineMetric();\n         if (incomingMetric.getValues().size() \u003e 0) {\n           baseMetric \u003d aggregate(incomingMetric, baseMetric);\n           this.metrics.put(metricId, new TimelineMetricSubDoc(baseMetric));\n         } else {\n           LOG.debug(\"No incoming metric to aggregate for : {}\",\n               baseMetric.getId());\n         }\n       } else {\n-        this.metrics.put(metricId, metricSubDocMap.get(metricId));\n+        this.metrics.put(metricId, metricValue);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void aggregateMetrics(\n      Map\u003cString, TimelineMetricSubDoc\u003e metricSubDocMap) {\n    for(Map.Entry\u003cString, TimelineMetricSubDoc\u003e metricEntry :\n        metricSubDocMap.entrySet()) {\n      final String metricId \u003d metricEntry.getKey();\n      final TimelineMetricSubDoc metricValue \u003d metricEntry.getValue();\n\n      if (this.metrics.containsKey(metricId)) {\n        TimelineMetric incomingMetric \u003d\n            metricValue.fetchTimelineMetric();\n        TimelineMetric baseMetric \u003d\n            this.metrics.get(metricId).fetchTimelineMetric();\n        if (incomingMetric.getValues().size() \u003e 0) {\n          baseMetric \u003d aggregate(incomingMetric, baseMetric);\n          this.metrics.put(metricId, new TimelineMetricSubDoc(baseMetric));\n        } else {\n          LOG.debug(\"No incoming metric to aggregate for : {}\",\n              baseMetric.getId());\n        }\n      } else {\n        this.metrics.put(metricId, metricValue);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-documentstore/src/main/java/org/apache/hadoop/yarn/server/timelineservice/documentstore/collection/document/flowrun/FlowRunDocument.java",
      "extendedDetails": {}
    },
    "f235a942d5b7cab86f0cb4f5ba285f07cd939a40": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9016 DocumentStore as a backend for ATSv2. Contributed by Sushil Ks.\n",
      "commitDate": "13/03/19 4:45 PM",
      "commitName": "f235a942d5b7cab86f0cb4f5ba285f07cd939a40",
      "commitAuthor": "Vrushali C",
      "diff": "@@ -0,0 +1,20 @@\n+  private void aggregateMetrics(\n+      Map\u003cString, TimelineMetricSubDoc\u003e metricSubDocMap) {\n+    for(String metricId : metricSubDocMap.keySet()) {\n+      if (this.metrics.containsKey(metricId)) {\n+        TimelineMetric incomingMetric \u003d\n+            metricSubDocMap.get(metricId).fetchTimelineMetric();\n+        TimelineMetric baseMetric \u003d\n+            this.metrics.get(metricId).fetchTimelineMetric();\n+        if (incomingMetric.getValues().size() \u003e 0) {\n+          baseMetric \u003d aggregate(incomingMetric, baseMetric);\n+          this.metrics.put(metricId, new TimelineMetricSubDoc(baseMetric));\n+        } else {\n+          LOG.debug(\"No incoming metric to aggregate for : {}\",\n+              baseMetric.getId());\n+        }\n+      } else {\n+        this.metrics.put(metricId, metricSubDocMap.get(metricId));\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void aggregateMetrics(\n      Map\u003cString, TimelineMetricSubDoc\u003e metricSubDocMap) {\n    for(String metricId : metricSubDocMap.keySet()) {\n      if (this.metrics.containsKey(metricId)) {\n        TimelineMetric incomingMetric \u003d\n            metricSubDocMap.get(metricId).fetchTimelineMetric();\n        TimelineMetric baseMetric \u003d\n            this.metrics.get(metricId).fetchTimelineMetric();\n        if (incomingMetric.getValues().size() \u003e 0) {\n          baseMetric \u003d aggregate(incomingMetric, baseMetric);\n          this.metrics.put(metricId, new TimelineMetricSubDoc(baseMetric));\n        } else {\n          LOG.debug(\"No incoming metric to aggregate for : {}\",\n              baseMetric.getId());\n        }\n      } else {\n        this.metrics.put(metricId, metricSubDocMap.get(metricId));\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-documentstore/src/main/java/org/apache/hadoop/yarn/server/timelineservice/documentstore/collection/document/flowrun/FlowRunDocument.java"
    }
  }
}