{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AuthoritativeAuditOperation.java",
  "functionName": "executeAudit",
  "functionId": "executeAudit___path-Path(modifiers-final)__requireAuth-boolean(modifiers-final)__recursive-boolean(modifiers-final)",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/AuthoritativeAuditOperation.java",
  "functionStartLine": 151,
  "functionEndLine": 225,
  "numCommitsSeen": 1,
  "timeTaken": 1069,
  "changeHistory": [
    "49df83899543586bbcaf80f01399ade031cf68b0"
  ],
  "changeHistoryShort": {
    "49df83899543586bbcaf80f01399ade031cf68b0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "49df83899543586bbcaf80f01399ade031cf68b0": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-16697. Tune/audit S3A authoritative mode.\n\nContains:\n\nHADOOP-16474. S3Guard ProgressiveRenameTracker to mark destination\n              dirirectory as authoritative on success.\nHADOOP-16684. S3guard bucket info to list a bit more about\n              authoritative paths.\nHADOOP-16722. S3GuardTool to support FilterFileSystem.\n\nThis patch improves the marking of newly created/import directory\ntrees in S3Guard DynamoDB tables as authoritative.\n\nSpecific changes:\n\n * Renamed directories are marked as authoritative if the entire\n   operation succeeded (HADOOP-16474).\n * When updating parent table entries as part of any table write,\n   there\u0027s no overwriting of their authoritative flag.\n\ns3guard import changes:\n\n* new -verbose flag to print out what is going on.\n\n* The \"s3guard import\" command lets you declare that a directory tree\nis to be marked as authoritative\n\n  hadoop s3guard import -authoritative -verbose s3a://bucket/path\n\nWhen importing a listing and a file is found, the import tool queries\nthe metastore and only updates the entry if the file is different from\nbefore, where different \u003d\u003d new timestamp, etag, or length. S3Guard can get\ntimestamp differences due to clock skew in PUT operations.\n\nAs the recursive list performed by the import command doesn\u0027t retrieve the\nversionID, the existing entry may in fact be more complete.\nWhen updating an existing due to clock skew the existing version ID\nis propagated to the new entry (note: the etags must match; this is needed\nto deal with inconsistent listings).\n\nThere is a new s3guard command to audit a s3guard bucket/path\u0027s\nauthoritative state:\n\n  hadoop s3guard authoritative -check-config s3a://bucket/path\n\nThis is primarily for testing/auditing.\n\nThe s3guard bucket-info command also provides some more details on the\nauthoritative state of a store (HADOOP-16684).\n\nChange-Id: I58001341c04f6f3597fcb4fcb1581ccefeb77d91\n",
      "commitDate": "10/01/20 3:11 AM",
      "commitName": "49df83899543586bbcaf80f01399ade031cf68b0",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,75 @@\n+  Pair\u003cInteger, Integer\u003e executeAudit(\n+      final Path path,\n+      final boolean requireAuth,\n+      final boolean recursive) throws IOException {\n+    int dirs \u003d 0;\n+    int nonauth \u003d 0;\n+    final Queue\u003cDDBPathMetadata\u003e queue \u003d new ArrayDeque\u003c\u003e();\n+    final boolean isRoot \u003d path.isRoot();\n+    final DDBPathMetadata baseData \u003d metastore.get(path);\n+    if (baseData \u003d\u003d null) {\n+      throw new ExitUtil.ExitException(LauncherExitCodes.EXIT_NOT_FOUND,\n+          \"No S3Guard entry for path \" + path);\n+    }\n+\n+    if (isRoot || isDirectory(baseData)) {\n+      // we have the root entry or an authoritative a directory\n+      queue.add(baseData);\n+    } else {\n+      LOG.info(\"Path represents file\");\n+      return Pair.of(0, 0);\n+    }\n+\n+    while (!queue.isEmpty()) {\n+      dirs++;\n+      final DDBPathMetadata dir \u003d queue.poll();\n+      final Path p \u003d dir.getFileStatus().getPath();\n+      LOG.debug(\"Directory {}\", dir.prettyPrint());\n+      // log a message about the dir state, with root treated specially\n+      if (!p.isRoot()) {\n+        if (!dir.isAuthoritativeDir()) {\n+          LOG.warn(\"Directory {} is not authoritative\", p);\n+          nonauth++;\n+          verifyAuthDir(dir, requireAuth);\n+        } else {\n+          LOG.info(\"Directory {}\", p);\n+        }\n+      } else {\n+        // this is done to avoid the confusing message about root not being\n+        // authoritative\n+        LOG.info(\"Root directory {}\", p);\n+      }\n+\n+      // list its children\n+      if (recursive) {\n+        final DirListingMetadata entry \u003d metastore.listChildren(p);\n+\n+        if (entry !\u003d null) {\n+          final Collection\u003cPathMetadata\u003e listing \u003d entry.getListing();\n+          int files \u003d 0, subdirs \u003d 0;\n+          for (PathMetadata e : listing) {\n+            if (isDirectory(e)) {\n+              // queue for auditing\n+              queue.add((DDBPathMetadata) e);\n+              subdirs++;\n+            } else {\n+              files++;\n+            }\n+          }\n+          if (verbose \u0026\u0026 files \u003e 0 || subdirs \u003e 0) {\n+            LOG.info(\"  files {}; directories {}\", files, subdirs);\n+          }\n+        } else {\n+          LOG.info(\"Directory {} has been deleted\", dir);\n+        }\n+      }\n+    }\n+    // end of scan\n+    if (dirs \u003d\u003d 1 \u0026\u0026 isRoot) {\n+      LOG.info(\"The store has no directories to scan\");\n+    } else {\n+      LOG.info(\"Scanned {} directories - {} were not marked as authoritative\",\n+          dirs, nonauth);\n+    }\n+    return Pair.of(dirs, nonauth);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  Pair\u003cInteger, Integer\u003e executeAudit(\n      final Path path,\n      final boolean requireAuth,\n      final boolean recursive) throws IOException {\n    int dirs \u003d 0;\n    int nonauth \u003d 0;\n    final Queue\u003cDDBPathMetadata\u003e queue \u003d new ArrayDeque\u003c\u003e();\n    final boolean isRoot \u003d path.isRoot();\n    final DDBPathMetadata baseData \u003d metastore.get(path);\n    if (baseData \u003d\u003d null) {\n      throw new ExitUtil.ExitException(LauncherExitCodes.EXIT_NOT_FOUND,\n          \"No S3Guard entry for path \" + path);\n    }\n\n    if (isRoot || isDirectory(baseData)) {\n      // we have the root entry or an authoritative a directory\n      queue.add(baseData);\n    } else {\n      LOG.info(\"Path represents file\");\n      return Pair.of(0, 0);\n    }\n\n    while (!queue.isEmpty()) {\n      dirs++;\n      final DDBPathMetadata dir \u003d queue.poll();\n      final Path p \u003d dir.getFileStatus().getPath();\n      LOG.debug(\"Directory {}\", dir.prettyPrint());\n      // log a message about the dir state, with root treated specially\n      if (!p.isRoot()) {\n        if (!dir.isAuthoritativeDir()) {\n          LOG.warn(\"Directory {} is not authoritative\", p);\n          nonauth++;\n          verifyAuthDir(dir, requireAuth);\n        } else {\n          LOG.info(\"Directory {}\", p);\n        }\n      } else {\n        // this is done to avoid the confusing message about root not being\n        // authoritative\n        LOG.info(\"Root directory {}\", p);\n      }\n\n      // list its children\n      if (recursive) {\n        final DirListingMetadata entry \u003d metastore.listChildren(p);\n\n        if (entry !\u003d null) {\n          final Collection\u003cPathMetadata\u003e listing \u003d entry.getListing();\n          int files \u003d 0, subdirs \u003d 0;\n          for (PathMetadata e : listing) {\n            if (isDirectory(e)) {\n              // queue for auditing\n              queue.add((DDBPathMetadata) e);\n              subdirs++;\n            } else {\n              files++;\n            }\n          }\n          if (verbose \u0026\u0026 files \u003e 0 || subdirs \u003e 0) {\n            LOG.info(\"  files {}; directories {}\", files, subdirs);\n          }\n        } else {\n          LOG.info(\"Directory {} has been deleted\", dir);\n        }\n      }\n    }\n    // end of scan\n    if (dirs \u003d\u003d 1 \u0026\u0026 isRoot) {\n      LOG.info(\"The store has no directories to scan\");\n    } else {\n      LOG.info(\"Scanned {} directories - {} were not marked as authoritative\",\n          dirs, nonauth);\n    }\n    return Pair.of(dirs, nonauth);\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/s3guard/AuthoritativeAuditOperation.java"
    }
  }
}