{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TaskAttemptImpl.java",
  "functionName": "populateResourceCapability",
  "functionId": "populateResourceCapability___taskType-TaskType",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/TaskAttemptImpl.java",
  "functionStartLine": 705,
  "functionEndLine": 770,
  "numCommitsSeen": 108,
  "timeTaken": 1200,
  "changeHistory": [
    "9a7e81083801a57d6bb96584988415cbef67460d"
  ],
  "changeHistoryShort": {
    "9a7e81083801a57d6bb96584988415cbef67460d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9a7e81083801a57d6bb96584988415cbef67460d": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6927. Add support for individual resource types requests in MapReduce\n(Contributed by Gergo Repas via Daniel Templeton)\n",
      "commitDate": "30/10/17 11:04 AM",
      "commitName": "9a7e81083801a57d6bb96584988415cbef67460d",
      "commitAuthor": "Daniel Templeton",
      "diff": "@@ -0,0 +1,66 @@\n+  private void populateResourceCapability(TaskType taskType) {\n+    String resourceTypePrefix \u003d\n+        getResourceTypePrefix(taskType);\n+    boolean memorySet \u003d false;\n+    boolean cpuVcoresSet \u003d false;\n+    if (resourceTypePrefix !\u003d null) {\n+      List\u003cResourceInformation\u003e resourceRequests \u003d\n+          ResourceUtils.getRequestedResourcesFromConfig(conf,\n+              resourceTypePrefix);\n+      for (ResourceInformation resourceRequest : resourceRequests) {\n+        String resourceName \u003d resourceRequest.getName();\n+        if (MRJobConfig.RESOURCE_TYPE_NAME_MEMORY.equals(resourceName) ||\n+            MRJobConfig.RESOURCE_TYPE_ALTERNATIVE_NAME_MEMORY.equals(\n+                resourceName)) {\n+          if (memorySet) {\n+            throw new IllegalArgumentException(\n+                \"Only one of the following keys \" +\n+                    \"can be specified for a single job: \" +\n+                    MRJobConfig.RESOURCE_TYPE_ALTERNATIVE_NAME_MEMORY + \", \" +\n+                    MRJobConfig.RESOURCE_TYPE_NAME_MEMORY);\n+          }\n+          String units \u003d isEmpty(resourceRequest.getUnits()) ?\n+              ResourceUtils.getDefaultUnit(ResourceInformation.MEMORY_URI) :\n+                resourceRequest.getUnits();\n+          this.resourceCapability.setMemorySize(\n+              UnitsConversionUtil.convert(units, \"Mi\",\n+                  resourceRequest.getValue()));\n+          memorySet \u003d true;\n+          String memoryKey \u003d getMemoryKey(taskType);\n+          if (memoryKey !\u003d null \u0026\u0026 conf.get(memoryKey) !\u003d null) {\n+            LOG.warn(\"Configuration \" + resourceTypePrefix + resourceName +\n+                \"\u003d\" + resourceRequest.getValue() + resourceRequest.getUnits() +\n+                \" is overriding the \" + memoryKey + \"\u003d\" + conf.get(memoryKey) +\n+                \" configuration\");\n+          }\n+        } else if (MRJobConfig.RESOURCE_TYPE_NAME_VCORE.equals(\n+            resourceName)) {\n+          this.resourceCapability.setVirtualCores(\n+              (int) UnitsConversionUtil.convert(resourceRequest.getUnits(), \"\",\n+                  resourceRequest.getValue()));\n+          cpuVcoresSet \u003d true;\n+          String cpuKey \u003d getCpuVcoresKey(taskType);\n+          if (cpuKey !\u003d null \u0026\u0026 conf.get(cpuKey) !\u003d null) {\n+            LOG.warn(\"Configuration \" + resourceTypePrefix +\n+                MRJobConfig.RESOURCE_TYPE_NAME_VCORE + \"\u003d\" +\n+                resourceRequest.getValue() + resourceRequest.getUnits() +\n+                \" is overriding the \" + cpuKey + \"\u003d\" +\n+                conf.get(cpuKey) + \" configuration\");\n+          }\n+        } else {\n+          ResourceInformation resourceInformation \u003d\n+              this.resourceCapability.getResourceInformation(resourceName);\n+          resourceInformation.setUnits(resourceRequest.getUnits());\n+          resourceInformation.setValue(resourceRequest.getValue());\n+          this.resourceCapability.setResourceInformation(resourceName,\n+              resourceInformation);\n+        }\n+      }\n+    }\n+    if (!memorySet) {\n+      this.resourceCapability.setMemorySize(getMemoryRequired(conf, taskType));\n+    }\n+    if (!cpuVcoresSet) {\n+      this.resourceCapability.setVirtualCores(getCpuRequired(conf, taskType));\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void populateResourceCapability(TaskType taskType) {\n    String resourceTypePrefix \u003d\n        getResourceTypePrefix(taskType);\n    boolean memorySet \u003d false;\n    boolean cpuVcoresSet \u003d false;\n    if (resourceTypePrefix !\u003d null) {\n      List\u003cResourceInformation\u003e resourceRequests \u003d\n          ResourceUtils.getRequestedResourcesFromConfig(conf,\n              resourceTypePrefix);\n      for (ResourceInformation resourceRequest : resourceRequests) {\n        String resourceName \u003d resourceRequest.getName();\n        if (MRJobConfig.RESOURCE_TYPE_NAME_MEMORY.equals(resourceName) ||\n            MRJobConfig.RESOURCE_TYPE_ALTERNATIVE_NAME_MEMORY.equals(\n                resourceName)) {\n          if (memorySet) {\n            throw new IllegalArgumentException(\n                \"Only one of the following keys \" +\n                    \"can be specified for a single job: \" +\n                    MRJobConfig.RESOURCE_TYPE_ALTERNATIVE_NAME_MEMORY + \", \" +\n                    MRJobConfig.RESOURCE_TYPE_NAME_MEMORY);\n          }\n          String units \u003d isEmpty(resourceRequest.getUnits()) ?\n              ResourceUtils.getDefaultUnit(ResourceInformation.MEMORY_URI) :\n                resourceRequest.getUnits();\n          this.resourceCapability.setMemorySize(\n              UnitsConversionUtil.convert(units, \"Mi\",\n                  resourceRequest.getValue()));\n          memorySet \u003d true;\n          String memoryKey \u003d getMemoryKey(taskType);\n          if (memoryKey !\u003d null \u0026\u0026 conf.get(memoryKey) !\u003d null) {\n            LOG.warn(\"Configuration \" + resourceTypePrefix + resourceName +\n                \"\u003d\" + resourceRequest.getValue() + resourceRequest.getUnits() +\n                \" is overriding the \" + memoryKey + \"\u003d\" + conf.get(memoryKey) +\n                \" configuration\");\n          }\n        } else if (MRJobConfig.RESOURCE_TYPE_NAME_VCORE.equals(\n            resourceName)) {\n          this.resourceCapability.setVirtualCores(\n              (int) UnitsConversionUtil.convert(resourceRequest.getUnits(), \"\",\n                  resourceRequest.getValue()));\n          cpuVcoresSet \u003d true;\n          String cpuKey \u003d getCpuVcoresKey(taskType);\n          if (cpuKey !\u003d null \u0026\u0026 conf.get(cpuKey) !\u003d null) {\n            LOG.warn(\"Configuration \" + resourceTypePrefix +\n                MRJobConfig.RESOURCE_TYPE_NAME_VCORE + \"\u003d\" +\n                resourceRequest.getValue() + resourceRequest.getUnits() +\n                \" is overriding the \" + cpuKey + \"\u003d\" +\n                conf.get(cpuKey) + \" configuration\");\n          }\n        } else {\n          ResourceInformation resourceInformation \u003d\n              this.resourceCapability.getResourceInformation(resourceName);\n          resourceInformation.setUnits(resourceRequest.getUnits());\n          resourceInformation.setValue(resourceRequest.getValue());\n          this.resourceCapability.setResourceInformation(resourceName,\n              resourceInformation);\n        }\n      }\n    }\n    if (!memorySet) {\n      this.resourceCapability.setMemorySize(getMemoryRequired(conf, taskType));\n    }\n    if (!cpuVcoresSet) {\n      this.resourceCapability.setVirtualCores(getCpuRequired(conf, taskType));\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/TaskAttemptImpl.java"
    }
  }
}