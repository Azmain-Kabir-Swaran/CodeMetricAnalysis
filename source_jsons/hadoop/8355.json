{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSDirErasureCodingOp.java",
  "functionName": "getErasureCodingPolicyForPath",
  "functionId": "getErasureCodingPolicyForPath___fsd-FSDirectory__iip-INodesInPath",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirErasureCodingOp.java",
  "functionStartLine": 448,
  "functionEndLine": 485,
  "numCommitsSeen": 55,
  "timeTaken": 6522,
  "changeHistory": [
    "ae2177d296a322d13708b85aaa8a971b8dcce128",
    "a68b5b31cf846c0fc94c430bafd07a9bca369234",
    "cb672a45a0bbd8950b9b5e304c2e03f516945903",
    "e8bdad7385ab63a122c1e8e8a6a73e0f1100e80b",
    "33a38a534110de454662256545a7f4c075d328c8",
    "3085a604300ed76d06a0011bd5555e419897b6cd",
    "7600e3c48ff2043654dbe9f415a186a336b5ea6c",
    "f62237bc2f02afe11ce185e13aa51a60b5960037",
    "1d37a8812160bb030244a1e6b1c753f962d8d2ed",
    "98d340745be682fb251677bb4830aca76119868f"
  ],
  "changeHistoryShort": {
    "ae2177d296a322d13708b85aaa8a971b8dcce128": "Ybodychange",
    "a68b5b31cf846c0fc94c430bafd07a9bca369234": "Ybodychange",
    "cb672a45a0bbd8950b9b5e304c2e03f516945903": "Ybodychange",
    "e8bdad7385ab63a122c1e8e8a6a73e0f1100e80b": "Ybodychange",
    "33a38a534110de454662256545a7f4c075d328c8": "Ybodychange",
    "3085a604300ed76d06a0011bd5555e419897b6cd": "Ymultichange(Yparameterchange,Ybodychange)",
    "7600e3c48ff2043654dbe9f415a186a336b5ea6c": "Ybodychange",
    "f62237bc2f02afe11ce185e13aa51a60b5960037": "Ymultichange(Ybodychange,Yparametermetachange)",
    "1d37a8812160bb030244a1e6b1c753f962d8d2ed": "Ymultichange(Yrename,Yreturntypechange,Ybodychange)",
    "98d340745be682fb251677bb4830aca76119868f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ae2177d296a322d13708b85aaa8a971b8dcce128": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12897. getErasureCodingPolicy should handle .snapshot dir better. Contributed by LiXin Ge.\n",
      "commitDate": "31/01/18 10:50 PM",
      "commitName": "ae2177d296a322d13708b85aaa8a971b8dcce128",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "02/11/17 9:27 PM",
      "commitNameOld": "e565b5277d5b890dad107fe85e295a3907e4bfc1",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 90.1,
      "commitsBetweenForRepo": 614,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   private static ErasureCodingPolicy getErasureCodingPolicyForPath(\n       FSDirectory fsd, INodesInPath iip) throws IOException {\n     Preconditions.checkNotNull(iip, \"INodes cannot be null\");\n     fsd.readLock();\n     try {\n       for (int i \u003d iip.length() - 1; i \u003e\u003d 0; i--) {\n         final INode inode \u003d iip.getINode(i);\n         if (inode \u003d\u003d null) {\n           continue;\n         }\n         if (inode.isFile()) {\n           byte id \u003d inode.asFile().getErasureCodingPolicyID();\n           return id \u003c 0 ? null :\n               fsd.getFSNamesystem().getErasureCodingPolicyManager().getByID(id);\n         }\n         // We don\u0027t allow setting EC policies on paths with a symlink. Thus\n         // if a symlink is encountered, the dir shouldn\u0027t have EC policy.\n         // TODO: properly support symlinks\n         if (inode.isSymlink()) {\n           return null;\n         }\n-        final XAttrFeature xaf \u003d inode.getXAttrFeature();\n+        final XAttrFeature xaf \u003d inode.getXAttrFeature(iip.getPathSnapshotId());\n         if (xaf !\u003d null) {\n           XAttr xattr \u003d xaf.getXAttr(XATTR_ERASURECODING_POLICY);\n           if (xattr !\u003d null) {\n             ByteArrayInputStream bIn \u003d new ByteArrayInputStream(xattr.getValue());\n             DataInputStream dIn \u003d new DataInputStream(bIn);\n             String ecPolicyName \u003d WritableUtils.readString(dIn);\n             return fsd.getFSNamesystem().getErasureCodingPolicyManager()\n               .getByName(ecPolicyName);\n           }\n         }\n       }\n     } finally {\n       fsd.readUnlock();\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static ErasureCodingPolicy getErasureCodingPolicyForPath(\n      FSDirectory fsd, INodesInPath iip) throws IOException {\n    Preconditions.checkNotNull(iip, \"INodes cannot be null\");\n    fsd.readLock();\n    try {\n      for (int i \u003d iip.length() - 1; i \u003e\u003d 0; i--) {\n        final INode inode \u003d iip.getINode(i);\n        if (inode \u003d\u003d null) {\n          continue;\n        }\n        if (inode.isFile()) {\n          byte id \u003d inode.asFile().getErasureCodingPolicyID();\n          return id \u003c 0 ? null :\n              fsd.getFSNamesystem().getErasureCodingPolicyManager().getByID(id);\n        }\n        // We don\u0027t allow setting EC policies on paths with a symlink. Thus\n        // if a symlink is encountered, the dir shouldn\u0027t have EC policy.\n        // TODO: properly support symlinks\n        if (inode.isSymlink()) {\n          return null;\n        }\n        final XAttrFeature xaf \u003d inode.getXAttrFeature(iip.getPathSnapshotId());\n        if (xaf !\u003d null) {\n          XAttr xattr \u003d xaf.getXAttr(XATTR_ERASURECODING_POLICY);\n          if (xattr !\u003d null) {\n            ByteArrayInputStream bIn \u003d new ByteArrayInputStream(xattr.getValue());\n            DataInputStream dIn \u003d new DataInputStream(bIn);\n            String ecPolicyName \u003d WritableUtils.readString(dIn);\n            return fsd.getFSNamesystem().getErasureCodingPolicyManager()\n              .getByName(ecPolicyName);\n          }\n        }\n      }\n    } finally {\n      fsd.readUnlock();\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirErasureCodingOp.java",
      "extendedDetails": {}
    },
    "a68b5b31cf846c0fc94c430bafd07a9bca369234": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12171. Reduce IIP object allocations for inode lookup. Contributed by Daryn Sharp.\n",
      "commitDate": "25/07/17 9:03 AM",
      "commitName": "a68b5b31cf846c0fc94c430bafd07a9bca369234",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "28/06/17 10:54 AM",
      "commitNameOld": "f99b6d19de77c6e730fed8444f8848a7e63d6130",
      "commitAuthorOld": "Wei-Chiu Chuang",
      "daysBetweenCommits": 26.92,
      "commitsBetweenForRepo": 126,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,38 @@\n   private static ErasureCodingPolicy getErasureCodingPolicyForPath(\n       FSDirectory fsd, INodesInPath iip) throws IOException {\n     Preconditions.checkNotNull(iip, \"INodes cannot be null\");\n     fsd.readLock();\n     try {\n-      List\u003cINode\u003e inodes \u003d iip.getReadOnlyINodes();\n-      for (int i \u003d inodes.size() - 1; i \u003e\u003d 0; i--) {\n-        final INode inode \u003d inodes.get(i);\n+      for (int i \u003d iip.length() - 1; i \u003e\u003d 0; i--) {\n+        final INode inode \u003d iip.getINode(i);\n         if (inode \u003d\u003d null) {\n           continue;\n         }\n         if (inode.isFile()) {\n           byte id \u003d inode.asFile().getErasureCodingPolicyID();\n           return id \u003c 0 ? null :\n               fsd.getFSNamesystem().getErasureCodingPolicyManager().getByID(id);\n         }\n         // We don\u0027t allow setting EC policies on paths with a symlink. Thus\n         // if a symlink is encountered, the dir shouldn\u0027t have EC policy.\n         // TODO: properly support symlinks\n         if (inode.isSymlink()) {\n           return null;\n         }\n         final XAttrFeature xaf \u003d inode.getXAttrFeature();\n         if (xaf !\u003d null) {\n           XAttr xattr \u003d xaf.getXAttr(XATTR_ERASURECODING_POLICY);\n           if (xattr !\u003d null) {\n             ByteArrayInputStream bIn \u003d new ByteArrayInputStream(xattr.getValue());\n             DataInputStream dIn \u003d new DataInputStream(bIn);\n             String ecPolicyName \u003d WritableUtils.readString(dIn);\n             return fsd.getFSNamesystem().getErasureCodingPolicyManager()\n               .getByName(ecPolicyName);\n           }\n         }\n       }\n     } finally {\n       fsd.readUnlock();\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static ErasureCodingPolicy getErasureCodingPolicyForPath(\n      FSDirectory fsd, INodesInPath iip) throws IOException {\n    Preconditions.checkNotNull(iip, \"INodes cannot be null\");\n    fsd.readLock();\n    try {\n      for (int i \u003d iip.length() - 1; i \u003e\u003d 0; i--) {\n        final INode inode \u003d iip.getINode(i);\n        if (inode \u003d\u003d null) {\n          continue;\n        }\n        if (inode.isFile()) {\n          byte id \u003d inode.asFile().getErasureCodingPolicyID();\n          return id \u003c 0 ? null :\n              fsd.getFSNamesystem().getErasureCodingPolicyManager().getByID(id);\n        }\n        // We don\u0027t allow setting EC policies on paths with a symlink. Thus\n        // if a symlink is encountered, the dir shouldn\u0027t have EC policy.\n        // TODO: properly support symlinks\n        if (inode.isSymlink()) {\n          return null;\n        }\n        final XAttrFeature xaf \u003d inode.getXAttrFeature();\n        if (xaf !\u003d null) {\n          XAttr xattr \u003d xaf.getXAttr(XATTR_ERASURECODING_POLICY);\n          if (xattr !\u003d null) {\n            ByteArrayInputStream bIn \u003d new ByteArrayInputStream(xattr.getValue());\n            DataInputStream dIn \u003d new DataInputStream(bIn);\n            String ecPolicyName \u003d WritableUtils.readString(dIn);\n            return fsd.getFSNamesystem().getErasureCodingPolicyManager()\n              .getByName(ecPolicyName);\n          }\n        }\n      }\n    } finally {\n      fsd.readUnlock();\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirErasureCodingOp.java",
      "extendedDetails": {}
    },
    "cb672a45a0bbd8950b9b5e304c2e03f516945903": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11605. Allow user to customize new erasure code policies. Contributed by Huafeng Wang\n",
      "commitDate": "27/04/17 10:18 PM",
      "commitName": "cb672a45a0bbd8950b9b5e304c2e03f516945903",
      "commitAuthor": "Kai Zheng",
      "commitDateOld": "12/04/17 12:27 PM",
      "commitNameOld": "a7312715a66dec5173c3a0a78dff4e0333e7f0b1",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 15.41,
      "commitsBetweenForRepo": 74,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,39 @@\n   private static ErasureCodingPolicy getErasureCodingPolicyForPath(\n       FSDirectory fsd, INodesInPath iip) throws IOException {\n     Preconditions.checkNotNull(iip, \"INodes cannot be null\");\n     fsd.readLock();\n     try {\n       List\u003cINode\u003e inodes \u003d iip.getReadOnlyINodes();\n       for (int i \u003d inodes.size() - 1; i \u003e\u003d 0; i--) {\n         final INode inode \u003d inodes.get(i);\n         if (inode \u003d\u003d null) {\n           continue;\n         }\n         if (inode.isFile()) {\n           byte id \u003d inode.asFile().getErasureCodingPolicyID();\n           return id \u003c 0 ? null :\n-              SystemErasureCodingPolicies.getByID(id);\n+              fsd.getFSNamesystem().getErasureCodingPolicyManager().getByID(id);\n         }\n         // We don\u0027t allow setting EC policies on paths with a symlink. Thus\n         // if a symlink is encountered, the dir shouldn\u0027t have EC policy.\n         // TODO: properly support symlinks\n         if (inode.isSymlink()) {\n           return null;\n         }\n         final XAttrFeature xaf \u003d inode.getXAttrFeature();\n         if (xaf !\u003d null) {\n           XAttr xattr \u003d xaf.getXAttr(XATTR_ERASURECODING_POLICY);\n           if (xattr !\u003d null) {\n             ByteArrayInputStream bIn \u003d new ByteArrayInputStream(xattr.getValue());\n             DataInputStream dIn \u003d new DataInputStream(bIn);\n             String ecPolicyName \u003d WritableUtils.readString(dIn);\n-            return SystemErasureCodingPolicies.getByName(ecPolicyName);\n+            return fsd.getFSNamesystem().getErasureCodingPolicyManager()\n+              .getByName(ecPolicyName);\n           }\n         }\n       }\n     } finally {\n       fsd.readUnlock();\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static ErasureCodingPolicy getErasureCodingPolicyForPath(\n      FSDirectory fsd, INodesInPath iip) throws IOException {\n    Preconditions.checkNotNull(iip, \"INodes cannot be null\");\n    fsd.readLock();\n    try {\n      List\u003cINode\u003e inodes \u003d iip.getReadOnlyINodes();\n      for (int i \u003d inodes.size() - 1; i \u003e\u003d 0; i--) {\n        final INode inode \u003d inodes.get(i);\n        if (inode \u003d\u003d null) {\n          continue;\n        }\n        if (inode.isFile()) {\n          byte id \u003d inode.asFile().getErasureCodingPolicyID();\n          return id \u003c 0 ? null :\n              fsd.getFSNamesystem().getErasureCodingPolicyManager().getByID(id);\n        }\n        // We don\u0027t allow setting EC policies on paths with a symlink. Thus\n        // if a symlink is encountered, the dir shouldn\u0027t have EC policy.\n        // TODO: properly support symlinks\n        if (inode.isSymlink()) {\n          return null;\n        }\n        final XAttrFeature xaf \u003d inode.getXAttrFeature();\n        if (xaf !\u003d null) {\n          XAttr xattr \u003d xaf.getXAttr(XATTR_ERASURECODING_POLICY);\n          if (xattr !\u003d null) {\n            ByteArrayInputStream bIn \u003d new ByteArrayInputStream(xattr.getValue());\n            DataInputStream dIn \u003d new DataInputStream(bIn);\n            String ecPolicyName \u003d WritableUtils.readString(dIn);\n            return fsd.getFSNamesystem().getErasureCodingPolicyManager()\n              .getByName(ecPolicyName);\n          }\n        }\n      }\n    } finally {\n      fsd.readUnlock();\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirErasureCodingOp.java",
      "extendedDetails": {}
    },
    "e8bdad7385ab63a122c1e8e8a6a73e0f1100e80b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11623. Move system erasure coding policies into hadoop-hdfs-client.\n",
      "commitDate": "07/04/17 4:46 PM",
      "commitName": "e8bdad7385ab63a122c1e8e8a6a73e0f1100e80b",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "08/03/17 4:41 PM",
      "commitNameOld": "33a38a534110de454662256545a7f4c075d328c8",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 29.96,
      "commitsBetweenForRepo": 183,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,38 @@\n   private static ErasureCodingPolicy getErasureCodingPolicyForPath(\n       FSDirectory fsd, INodesInPath iip) throws IOException {\n     Preconditions.checkNotNull(iip, \"INodes cannot be null\");\n     fsd.readLock();\n     try {\n       List\u003cINode\u003e inodes \u003d iip.getReadOnlyINodes();\n       for (int i \u003d inodes.size() - 1; i \u003e\u003d 0; i--) {\n         final INode inode \u003d inodes.get(i);\n         if (inode \u003d\u003d null) {\n           continue;\n         }\n         if (inode.isFile()) {\n           byte id \u003d inode.asFile().getErasureCodingPolicyID();\n           return id \u003c 0 ? null :\n-              ErasureCodingPolicyManager.getPolicyByID(id);\n+              SystemErasureCodingPolicies.getByID(id);\n         }\n         // We don\u0027t allow setting EC policies on paths with a symlink. Thus\n         // if a symlink is encountered, the dir shouldn\u0027t have EC policy.\n         // TODO: properly support symlinks\n         if (inode.isSymlink()) {\n           return null;\n         }\n         final XAttrFeature xaf \u003d inode.getXAttrFeature();\n         if (xaf !\u003d null) {\n           XAttr xattr \u003d xaf.getXAttr(XATTR_ERASURECODING_POLICY);\n           if (xattr !\u003d null) {\n             ByteArrayInputStream bIn \u003d new ByteArrayInputStream(xattr.getValue());\n             DataInputStream dIn \u003d new DataInputStream(bIn);\n             String ecPolicyName \u003d WritableUtils.readString(dIn);\n-            return ErasureCodingPolicyManager\n-                .getPolicyByName(ecPolicyName);\n+            return SystemErasureCodingPolicies.getByName(ecPolicyName);\n           }\n         }\n       }\n     } finally {\n       fsd.readUnlock();\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static ErasureCodingPolicy getErasureCodingPolicyForPath(\n      FSDirectory fsd, INodesInPath iip) throws IOException {\n    Preconditions.checkNotNull(iip, \"INodes cannot be null\");\n    fsd.readLock();\n    try {\n      List\u003cINode\u003e inodes \u003d iip.getReadOnlyINodes();\n      for (int i \u003d inodes.size() - 1; i \u003e\u003d 0; i--) {\n        final INode inode \u003d inodes.get(i);\n        if (inode \u003d\u003d null) {\n          continue;\n        }\n        if (inode.isFile()) {\n          byte id \u003d inode.asFile().getErasureCodingPolicyID();\n          return id \u003c 0 ? null :\n              SystemErasureCodingPolicies.getByID(id);\n        }\n        // We don\u0027t allow setting EC policies on paths with a symlink. Thus\n        // if a symlink is encountered, the dir shouldn\u0027t have EC policy.\n        // TODO: properly support symlinks\n        if (inode.isSymlink()) {\n          return null;\n        }\n        final XAttrFeature xaf \u003d inode.getXAttrFeature();\n        if (xaf !\u003d null) {\n          XAttr xattr \u003d xaf.getXAttr(XATTR_ERASURECODING_POLICY);\n          if (xattr !\u003d null) {\n            ByteArrayInputStream bIn \u003d new ByteArrayInputStream(xattr.getValue());\n            DataInputStream dIn \u003d new DataInputStream(bIn);\n            String ecPolicyName \u003d WritableUtils.readString(dIn);\n            return SystemErasureCodingPolicies.getByName(ecPolicyName);\n          }\n        }\n      }\n    } finally {\n      fsd.readUnlock();\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirErasureCodingOp.java",
      "extendedDetails": {}
    },
    "33a38a534110de454662256545a7f4c075d328c8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11314. Enforce set of enabled EC policies on the NameNode.\n",
      "commitDate": "08/03/17 4:41 PM",
      "commitName": "33a38a534110de454662256545a7f4c075d328c8",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "03/03/17 1:00 PM",
      "commitNameOld": "3085a604300ed76d06a0011bd5555e419897b6cd",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 5.15,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   private static ErasureCodingPolicy getErasureCodingPolicyForPath(\n       FSDirectory fsd, INodesInPath iip) throws IOException {\n     Preconditions.checkNotNull(iip, \"INodes cannot be null\");\n     fsd.readLock();\n     try {\n       List\u003cINode\u003e inodes \u003d iip.getReadOnlyINodes();\n       for (int i \u003d inodes.size() - 1; i \u003e\u003d 0; i--) {\n         final INode inode \u003d inodes.get(i);\n         if (inode \u003d\u003d null) {\n           continue;\n         }\n         if (inode.isFile()) {\n           byte id \u003d inode.asFile().getErasureCodingPolicyID();\n-          return id \u003c 0 ? null : fsd.getFSNamesystem().\n-              getErasureCodingPolicyManager().getPolicyByID(id);\n+          return id \u003c 0 ? null :\n+              ErasureCodingPolicyManager.getPolicyByID(id);\n         }\n         // We don\u0027t allow setting EC policies on paths with a symlink. Thus\n         // if a symlink is encountered, the dir shouldn\u0027t have EC policy.\n         // TODO: properly support symlinks\n         if (inode.isSymlink()) {\n           return null;\n         }\n         final XAttrFeature xaf \u003d inode.getXAttrFeature();\n         if (xaf !\u003d null) {\n           XAttr xattr \u003d xaf.getXAttr(XATTR_ERASURECODING_POLICY);\n           if (xattr !\u003d null) {\n             ByteArrayInputStream bIn \u003d new ByteArrayInputStream(xattr.getValue());\n             DataInputStream dIn \u003d new DataInputStream(bIn);\n             String ecPolicyName \u003d WritableUtils.readString(dIn);\n-            return fsd.getFSNamesystem().getErasureCodingPolicyManager().\n-                getPolicyByName(ecPolicyName);\n+            return ErasureCodingPolicyManager\n+                .getPolicyByName(ecPolicyName);\n           }\n         }\n       }\n     } finally {\n       fsd.readUnlock();\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static ErasureCodingPolicy getErasureCodingPolicyForPath(\n      FSDirectory fsd, INodesInPath iip) throws IOException {\n    Preconditions.checkNotNull(iip, \"INodes cannot be null\");\n    fsd.readLock();\n    try {\n      List\u003cINode\u003e inodes \u003d iip.getReadOnlyINodes();\n      for (int i \u003d inodes.size() - 1; i \u003e\u003d 0; i--) {\n        final INode inode \u003d inodes.get(i);\n        if (inode \u003d\u003d null) {\n          continue;\n        }\n        if (inode.isFile()) {\n          byte id \u003d inode.asFile().getErasureCodingPolicyID();\n          return id \u003c 0 ? null :\n              ErasureCodingPolicyManager.getPolicyByID(id);\n        }\n        // We don\u0027t allow setting EC policies on paths with a symlink. Thus\n        // if a symlink is encountered, the dir shouldn\u0027t have EC policy.\n        // TODO: properly support symlinks\n        if (inode.isSymlink()) {\n          return null;\n        }\n        final XAttrFeature xaf \u003d inode.getXAttrFeature();\n        if (xaf !\u003d null) {\n          XAttr xattr \u003d xaf.getXAttr(XATTR_ERASURECODING_POLICY);\n          if (xattr !\u003d null) {\n            ByteArrayInputStream bIn \u003d new ByteArrayInputStream(xattr.getValue());\n            DataInputStream dIn \u003d new DataInputStream(bIn);\n            String ecPolicyName \u003d WritableUtils.readString(dIn);\n            return ErasureCodingPolicyManager\n                .getPolicyByName(ecPolicyName);\n          }\n        }\n      }\n    } finally {\n      fsd.readUnlock();\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirErasureCodingOp.java",
      "extendedDetails": {}
    },
    "3085a604300ed76d06a0011bd5555e419897b6cd": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-8112. Relax permission checking for EC related operations.\n",
      "commitDate": "03/03/17 1:00 PM",
      "commitName": "3085a604300ed76d06a0011bd5555e419897b6cd",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-8112. Relax permission checking for EC related operations.\n",
          "commitDate": "03/03/17 1:00 PM",
          "commitName": "3085a604300ed76d06a0011bd5555e419897b6cd",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "02/03/17 7:58 PM",
          "commitNameOld": "3749152b661d0359b3b941ab1d17177230f3b8dc",
          "commitAuthorOld": "Rakesh Radhakrishnan",
          "daysBetweenCommits": 0.71,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,39 @@\n-  private static ErasureCodingPolicy getErasureCodingPolicyForPath(FSNamesystem fsn,\n-      INodesInPath iip) throws IOException {\n+  private static ErasureCodingPolicy getErasureCodingPolicyForPath(\n+      FSDirectory fsd, INodesInPath iip) throws IOException {\n     Preconditions.checkNotNull(iip, \"INodes cannot be null\");\n-    FSDirectory fsd \u003d fsn.getFSDirectory();\n     fsd.readLock();\n     try {\n       List\u003cINode\u003e inodes \u003d iip.getReadOnlyINodes();\n       for (int i \u003d inodes.size() - 1; i \u003e\u003d 0; i--) {\n         final INode inode \u003d inodes.get(i);\n         if (inode \u003d\u003d null) {\n           continue;\n         }\n         if (inode.isFile()) {\n           byte id \u003d inode.asFile().getErasureCodingPolicyID();\n           return id \u003c 0 ? null : fsd.getFSNamesystem().\n               getErasureCodingPolicyManager().getPolicyByID(id);\n         }\n         // We don\u0027t allow setting EC policies on paths with a symlink. Thus\n         // if a symlink is encountered, the dir shouldn\u0027t have EC policy.\n         // TODO: properly support symlinks\n         if (inode.isSymlink()) {\n           return null;\n         }\n         final XAttrFeature xaf \u003d inode.getXAttrFeature();\n         if (xaf !\u003d null) {\n           XAttr xattr \u003d xaf.getXAttr(XATTR_ERASURECODING_POLICY);\n           if (xattr !\u003d null) {\n             ByteArrayInputStream bIn \u003d new ByteArrayInputStream(xattr.getValue());\n             DataInputStream dIn \u003d new DataInputStream(bIn);\n             String ecPolicyName \u003d WritableUtils.readString(dIn);\n             return fsd.getFSNamesystem().getErasureCodingPolicyManager().\n                 getPolicyByName(ecPolicyName);\n           }\n         }\n       }\n     } finally {\n       fsd.readUnlock();\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static ErasureCodingPolicy getErasureCodingPolicyForPath(\n      FSDirectory fsd, INodesInPath iip) throws IOException {\n    Preconditions.checkNotNull(iip, \"INodes cannot be null\");\n    fsd.readLock();\n    try {\n      List\u003cINode\u003e inodes \u003d iip.getReadOnlyINodes();\n      for (int i \u003d inodes.size() - 1; i \u003e\u003d 0; i--) {\n        final INode inode \u003d inodes.get(i);\n        if (inode \u003d\u003d null) {\n          continue;\n        }\n        if (inode.isFile()) {\n          byte id \u003d inode.asFile().getErasureCodingPolicyID();\n          return id \u003c 0 ? null : fsd.getFSNamesystem().\n              getErasureCodingPolicyManager().getPolicyByID(id);\n        }\n        // We don\u0027t allow setting EC policies on paths with a symlink. Thus\n        // if a symlink is encountered, the dir shouldn\u0027t have EC policy.\n        // TODO: properly support symlinks\n        if (inode.isSymlink()) {\n          return null;\n        }\n        final XAttrFeature xaf \u003d inode.getXAttrFeature();\n        if (xaf !\u003d null) {\n          XAttr xattr \u003d xaf.getXAttr(XATTR_ERASURECODING_POLICY);\n          if (xattr !\u003d null) {\n            ByteArrayInputStream bIn \u003d new ByteArrayInputStream(xattr.getValue());\n            DataInputStream dIn \u003d new DataInputStream(bIn);\n            String ecPolicyName \u003d WritableUtils.readString(dIn);\n            return fsd.getFSNamesystem().getErasureCodingPolicyManager().\n                getPolicyByName(ecPolicyName);\n          }\n        }\n      }\n    } finally {\n      fsd.readUnlock();\n    }\n    return null;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirErasureCodingOp.java",
          "extendedDetails": {
            "oldValue": "[fsn-FSNamesystem, iip-INodesInPath]",
            "newValue": "[fsd-FSDirectory, iip-INodesInPath]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8112. Relax permission checking for EC related operations.\n",
          "commitDate": "03/03/17 1:00 PM",
          "commitName": "3085a604300ed76d06a0011bd5555e419897b6cd",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "02/03/17 7:58 PM",
          "commitNameOld": "3749152b661d0359b3b941ab1d17177230f3b8dc",
          "commitAuthorOld": "Rakesh Radhakrishnan",
          "daysBetweenCommits": 0.71,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,39 @@\n-  private static ErasureCodingPolicy getErasureCodingPolicyForPath(FSNamesystem fsn,\n-      INodesInPath iip) throws IOException {\n+  private static ErasureCodingPolicy getErasureCodingPolicyForPath(\n+      FSDirectory fsd, INodesInPath iip) throws IOException {\n     Preconditions.checkNotNull(iip, \"INodes cannot be null\");\n-    FSDirectory fsd \u003d fsn.getFSDirectory();\n     fsd.readLock();\n     try {\n       List\u003cINode\u003e inodes \u003d iip.getReadOnlyINodes();\n       for (int i \u003d inodes.size() - 1; i \u003e\u003d 0; i--) {\n         final INode inode \u003d inodes.get(i);\n         if (inode \u003d\u003d null) {\n           continue;\n         }\n         if (inode.isFile()) {\n           byte id \u003d inode.asFile().getErasureCodingPolicyID();\n           return id \u003c 0 ? null : fsd.getFSNamesystem().\n               getErasureCodingPolicyManager().getPolicyByID(id);\n         }\n         // We don\u0027t allow setting EC policies on paths with a symlink. Thus\n         // if a symlink is encountered, the dir shouldn\u0027t have EC policy.\n         // TODO: properly support symlinks\n         if (inode.isSymlink()) {\n           return null;\n         }\n         final XAttrFeature xaf \u003d inode.getXAttrFeature();\n         if (xaf !\u003d null) {\n           XAttr xattr \u003d xaf.getXAttr(XATTR_ERASURECODING_POLICY);\n           if (xattr !\u003d null) {\n             ByteArrayInputStream bIn \u003d new ByteArrayInputStream(xattr.getValue());\n             DataInputStream dIn \u003d new DataInputStream(bIn);\n             String ecPolicyName \u003d WritableUtils.readString(dIn);\n             return fsd.getFSNamesystem().getErasureCodingPolicyManager().\n                 getPolicyByName(ecPolicyName);\n           }\n         }\n       }\n     } finally {\n       fsd.readUnlock();\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static ErasureCodingPolicy getErasureCodingPolicyForPath(\n      FSDirectory fsd, INodesInPath iip) throws IOException {\n    Preconditions.checkNotNull(iip, \"INodes cannot be null\");\n    fsd.readLock();\n    try {\n      List\u003cINode\u003e inodes \u003d iip.getReadOnlyINodes();\n      for (int i \u003d inodes.size() - 1; i \u003e\u003d 0; i--) {\n        final INode inode \u003d inodes.get(i);\n        if (inode \u003d\u003d null) {\n          continue;\n        }\n        if (inode.isFile()) {\n          byte id \u003d inode.asFile().getErasureCodingPolicyID();\n          return id \u003c 0 ? null : fsd.getFSNamesystem().\n              getErasureCodingPolicyManager().getPolicyByID(id);\n        }\n        // We don\u0027t allow setting EC policies on paths with a symlink. Thus\n        // if a symlink is encountered, the dir shouldn\u0027t have EC policy.\n        // TODO: properly support symlinks\n        if (inode.isSymlink()) {\n          return null;\n        }\n        final XAttrFeature xaf \u003d inode.getXAttrFeature();\n        if (xaf !\u003d null) {\n          XAttr xattr \u003d xaf.getXAttr(XATTR_ERASURECODING_POLICY);\n          if (xattr !\u003d null) {\n            ByteArrayInputStream bIn \u003d new ByteArrayInputStream(xattr.getValue());\n            DataInputStream dIn \u003d new DataInputStream(bIn);\n            String ecPolicyName \u003d WritableUtils.readString(dIn);\n            return fsd.getFSNamesystem().getErasureCodingPolicyManager().\n                getPolicyByName(ecPolicyName);\n          }\n        }\n      }\n    } finally {\n      fsd.readUnlock();\n    }\n    return null;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirErasureCodingOp.java",
          "extendedDetails": {}
        }
      ]
    },
    "7600e3c48ff2043654dbe9f415a186a336b5ea6c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7866. Erasure coding: NameNode manages multiple erasure coding policies. Contributed by Rui Li.\n",
      "commitDate": "08/03/16 10:30 PM",
      "commitName": "7600e3c48ff2043654dbe9f415a186a336b5ea6c",
      "commitAuthor": "Zhe Zhang",
      "commitDateOld": "11/01/16 11:31 AM",
      "commitNameOld": "9f4bf3bdf9e74800643477cfb18361e01cf6859c",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 57.46,
      "commitsBetweenForRepo": 417,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,40 @@\n   private static ErasureCodingPolicy getErasureCodingPolicyForPath(FSNamesystem fsn,\n       INodesInPath iip) throws IOException {\n     Preconditions.checkNotNull(iip, \"INodes cannot be null\");\n     FSDirectory fsd \u003d fsn.getFSDirectory();\n     fsd.readLock();\n     try {\n       List\u003cINode\u003e inodes \u003d iip.getReadOnlyINodes();\n       for (int i \u003d inodes.size() - 1; i \u003e\u003d 0; i--) {\n         final INode inode \u003d inodes.get(i);\n         if (inode \u003d\u003d null) {\n           continue;\n         }\n-        /**\n-         * TODO: lookup {@link ErasureCodingPolicyManager#getSystemPolices()}\n-         */\n         if (inode.isFile()) {\n-          return inode.asFile().getErasureCodingPolicyID() \u003d\u003d 0 ?\n-              null : ErasureCodingPolicyManager.getSystemDefaultPolicy();\n+          byte id \u003d inode.asFile().getErasureCodingPolicyID();\n+          return id \u003c 0 ? null : fsd.getFSNamesystem().\n+              getErasureCodingPolicyManager().getPolicyByID(id);\n         }\n         // We don\u0027t allow setting EC policies on paths with a symlink. Thus\n         // if a symlink is encountered, the dir shouldn\u0027t have EC policy.\n         // TODO: properly support symlinks\n         if (inode.isSymlink()) {\n           return null;\n         }\n         final XAttrFeature xaf \u003d inode.getXAttrFeature();\n         if (xaf !\u003d null) {\n           XAttr xattr \u003d xaf.getXAttr(XATTR_ERASURECODING_POLICY);\n           if (xattr !\u003d null) {\n             ByteArrayInputStream bIn \u003d new ByteArrayInputStream(xattr.getValue());\n             DataInputStream dIn \u003d new DataInputStream(bIn);\n             String ecPolicyName \u003d WritableUtils.readString(dIn);\n             return fsd.getFSNamesystem().getErasureCodingPolicyManager().\n-                getPolicy(ecPolicyName);\n+                getPolicyByName(ecPolicyName);\n           }\n         }\n       }\n     } finally {\n       fsd.readUnlock();\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static ErasureCodingPolicy getErasureCodingPolicyForPath(FSNamesystem fsn,\n      INodesInPath iip) throws IOException {\n    Preconditions.checkNotNull(iip, \"INodes cannot be null\");\n    FSDirectory fsd \u003d fsn.getFSDirectory();\n    fsd.readLock();\n    try {\n      List\u003cINode\u003e inodes \u003d iip.getReadOnlyINodes();\n      for (int i \u003d inodes.size() - 1; i \u003e\u003d 0; i--) {\n        final INode inode \u003d inodes.get(i);\n        if (inode \u003d\u003d null) {\n          continue;\n        }\n        if (inode.isFile()) {\n          byte id \u003d inode.asFile().getErasureCodingPolicyID();\n          return id \u003c 0 ? null : fsd.getFSNamesystem().\n              getErasureCodingPolicyManager().getPolicyByID(id);\n        }\n        // We don\u0027t allow setting EC policies on paths with a symlink. Thus\n        // if a symlink is encountered, the dir shouldn\u0027t have EC policy.\n        // TODO: properly support symlinks\n        if (inode.isSymlink()) {\n          return null;\n        }\n        final XAttrFeature xaf \u003d inode.getXAttrFeature();\n        if (xaf !\u003d null) {\n          XAttr xattr \u003d xaf.getXAttr(XATTR_ERASURECODING_POLICY);\n          if (xattr !\u003d null) {\n            ByteArrayInputStream bIn \u003d new ByteArrayInputStream(xattr.getValue());\n            DataInputStream dIn \u003d new DataInputStream(bIn);\n            String ecPolicyName \u003d WritableUtils.readString(dIn);\n            return fsd.getFSNamesystem().getErasureCodingPolicyManager().\n                getPolicyByName(ecPolicyName);\n          }\n        }\n      }\n    } finally {\n      fsd.readUnlock();\n    }\n    return null;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirErasureCodingOp.java",
      "extendedDetails": {}
    },
    "f62237bc2f02afe11ce185e13aa51a60b5960037": {
      "type": "Ymultichange(Ybodychange,Yparametermetachange)",
      "commitMessage": "HDFS-8833. Erasure coding: store EC schema and cell size in INodeFile and eliminate notion of EC zones.\n",
      "commitDate": "09/09/15 11:07 PM",
      "commitName": "f62237bc2f02afe11ce185e13aa51a60b5960037",
      "commitAuthor": "Zhe Zhang",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8833. Erasure coding: store EC schema and cell size in INodeFile and eliminate notion of EC zones.\n",
          "commitDate": "09/09/15 11:07 PM",
          "commitName": "f62237bc2f02afe11ce185e13aa51a60b5960037",
          "commitAuthor": "Zhe Zhang",
          "commitDateOld": "13/08/15 10:04 AM",
          "commitNameOld": "1d37a8812160bb030244a1e6b1c753f962d8d2ed",
          "commitAuthorOld": "Zhe Zhang",
          "daysBetweenCommits": 27.54,
          "commitsBetweenForRepo": 115,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,42 @@\n-  private static ErasureCodingPolicy getErasureCodingPolicyForPath(final FSNamesystem fsn,\n-      final INodesInPath iip) throws IOException {\n-    final FSDirectory fsd \u003d fsn.getFSDirectory();\n+  private static ErasureCodingPolicy getErasureCodingPolicyForPath(FSNamesystem fsn,\n+      INodesInPath iip) throws IOException {\n+    Preconditions.checkNotNull(iip, \"INodes cannot be null\");\n+    FSDirectory fsd \u003d fsn.getFSDirectory();\n     fsd.readLock();\n     try {\n-      return fsn.getErasureCodingZoneManager().getErasureCodingPolicy(iip);\n+      List\u003cINode\u003e inodes \u003d iip.getReadOnlyINodes();\n+      for (int i \u003d inodes.size() - 1; i \u003e\u003d 0; i--) {\n+        final INode inode \u003d inodes.get(i);\n+        if (inode \u003d\u003d null) {\n+          continue;\n+        }\n+        /**\n+         * TODO: lookup {@link ErasureCodingPolicyManager#getSystemPolices()}\n+         */\n+        if (inode.isFile()) {\n+          return inode.asFile().getErasureCodingPolicyID() \u003d\u003d 0 ?\n+              null : ErasureCodingPolicyManager.getSystemDefaultPolicy();\n+        }\n+        // We don\u0027t allow setting EC policies on paths with a symlink. Thus\n+        // if a symlink is encountered, the dir shouldn\u0027t have EC policy.\n+        // TODO: properly support symlinks\n+        if (inode.isSymlink()) {\n+          return null;\n+        }\n+        final XAttrFeature xaf \u003d inode.getXAttrFeature();\n+        if (xaf !\u003d null) {\n+          XAttr xattr \u003d xaf.getXAttr(XATTR_ERASURECODING_POLICY);\n+          if (xattr !\u003d null) {\n+            ByteArrayInputStream bIn \u003d new ByteArrayInputStream(xattr.getValue());\n+            DataInputStream dIn \u003d new DataInputStream(bIn);\n+            String ecPolicyName \u003d WritableUtils.readString(dIn);\n+            return fsd.getFSNamesystem().getErasureCodingPolicyManager().\n+                getPolicy(ecPolicyName);\n+          }\n+        }\n+      }\n     } finally {\n       fsd.readUnlock();\n     }\n+    return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static ErasureCodingPolicy getErasureCodingPolicyForPath(FSNamesystem fsn,\n      INodesInPath iip) throws IOException {\n    Preconditions.checkNotNull(iip, \"INodes cannot be null\");\n    FSDirectory fsd \u003d fsn.getFSDirectory();\n    fsd.readLock();\n    try {\n      List\u003cINode\u003e inodes \u003d iip.getReadOnlyINodes();\n      for (int i \u003d inodes.size() - 1; i \u003e\u003d 0; i--) {\n        final INode inode \u003d inodes.get(i);\n        if (inode \u003d\u003d null) {\n          continue;\n        }\n        /**\n         * TODO: lookup {@link ErasureCodingPolicyManager#getSystemPolices()}\n         */\n        if (inode.isFile()) {\n          return inode.asFile().getErasureCodingPolicyID() \u003d\u003d 0 ?\n              null : ErasureCodingPolicyManager.getSystemDefaultPolicy();\n        }\n        // We don\u0027t allow setting EC policies on paths with a symlink. Thus\n        // if a symlink is encountered, the dir shouldn\u0027t have EC policy.\n        // TODO: properly support symlinks\n        if (inode.isSymlink()) {\n          return null;\n        }\n        final XAttrFeature xaf \u003d inode.getXAttrFeature();\n        if (xaf !\u003d null) {\n          XAttr xattr \u003d xaf.getXAttr(XATTR_ERASURECODING_POLICY);\n          if (xattr !\u003d null) {\n            ByteArrayInputStream bIn \u003d new ByteArrayInputStream(xattr.getValue());\n            DataInputStream dIn \u003d new DataInputStream(bIn);\n            String ecPolicyName \u003d WritableUtils.readString(dIn);\n            return fsd.getFSNamesystem().getErasureCodingPolicyManager().\n                getPolicy(ecPolicyName);\n          }\n        }\n      }\n    } finally {\n      fsd.readUnlock();\n    }\n    return null;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirErasureCodingOp.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "HDFS-8833. Erasure coding: store EC schema and cell size in INodeFile and eliminate notion of EC zones.\n",
          "commitDate": "09/09/15 11:07 PM",
          "commitName": "f62237bc2f02afe11ce185e13aa51a60b5960037",
          "commitAuthor": "Zhe Zhang",
          "commitDateOld": "13/08/15 10:04 AM",
          "commitNameOld": "1d37a8812160bb030244a1e6b1c753f962d8d2ed",
          "commitAuthorOld": "Zhe Zhang",
          "daysBetweenCommits": 27.54,
          "commitsBetweenForRepo": 115,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,42 @@\n-  private static ErasureCodingPolicy getErasureCodingPolicyForPath(final FSNamesystem fsn,\n-      final INodesInPath iip) throws IOException {\n-    final FSDirectory fsd \u003d fsn.getFSDirectory();\n+  private static ErasureCodingPolicy getErasureCodingPolicyForPath(FSNamesystem fsn,\n+      INodesInPath iip) throws IOException {\n+    Preconditions.checkNotNull(iip, \"INodes cannot be null\");\n+    FSDirectory fsd \u003d fsn.getFSDirectory();\n     fsd.readLock();\n     try {\n-      return fsn.getErasureCodingZoneManager().getErasureCodingPolicy(iip);\n+      List\u003cINode\u003e inodes \u003d iip.getReadOnlyINodes();\n+      for (int i \u003d inodes.size() - 1; i \u003e\u003d 0; i--) {\n+        final INode inode \u003d inodes.get(i);\n+        if (inode \u003d\u003d null) {\n+          continue;\n+        }\n+        /**\n+         * TODO: lookup {@link ErasureCodingPolicyManager#getSystemPolices()}\n+         */\n+        if (inode.isFile()) {\n+          return inode.asFile().getErasureCodingPolicyID() \u003d\u003d 0 ?\n+              null : ErasureCodingPolicyManager.getSystemDefaultPolicy();\n+        }\n+        // We don\u0027t allow setting EC policies on paths with a symlink. Thus\n+        // if a symlink is encountered, the dir shouldn\u0027t have EC policy.\n+        // TODO: properly support symlinks\n+        if (inode.isSymlink()) {\n+          return null;\n+        }\n+        final XAttrFeature xaf \u003d inode.getXAttrFeature();\n+        if (xaf !\u003d null) {\n+          XAttr xattr \u003d xaf.getXAttr(XATTR_ERASURECODING_POLICY);\n+          if (xattr !\u003d null) {\n+            ByteArrayInputStream bIn \u003d new ByteArrayInputStream(xattr.getValue());\n+            DataInputStream dIn \u003d new DataInputStream(bIn);\n+            String ecPolicyName \u003d WritableUtils.readString(dIn);\n+            return fsd.getFSNamesystem().getErasureCodingPolicyManager().\n+                getPolicy(ecPolicyName);\n+          }\n+        }\n+      }\n     } finally {\n       fsd.readUnlock();\n     }\n+    return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static ErasureCodingPolicy getErasureCodingPolicyForPath(FSNamesystem fsn,\n      INodesInPath iip) throws IOException {\n    Preconditions.checkNotNull(iip, \"INodes cannot be null\");\n    FSDirectory fsd \u003d fsn.getFSDirectory();\n    fsd.readLock();\n    try {\n      List\u003cINode\u003e inodes \u003d iip.getReadOnlyINodes();\n      for (int i \u003d inodes.size() - 1; i \u003e\u003d 0; i--) {\n        final INode inode \u003d inodes.get(i);\n        if (inode \u003d\u003d null) {\n          continue;\n        }\n        /**\n         * TODO: lookup {@link ErasureCodingPolicyManager#getSystemPolices()}\n         */\n        if (inode.isFile()) {\n          return inode.asFile().getErasureCodingPolicyID() \u003d\u003d 0 ?\n              null : ErasureCodingPolicyManager.getSystemDefaultPolicy();\n        }\n        // We don\u0027t allow setting EC policies on paths with a symlink. Thus\n        // if a symlink is encountered, the dir shouldn\u0027t have EC policy.\n        // TODO: properly support symlinks\n        if (inode.isSymlink()) {\n          return null;\n        }\n        final XAttrFeature xaf \u003d inode.getXAttrFeature();\n        if (xaf !\u003d null) {\n          XAttr xattr \u003d xaf.getXAttr(XATTR_ERASURECODING_POLICY);\n          if (xattr !\u003d null) {\n            ByteArrayInputStream bIn \u003d new ByteArrayInputStream(xattr.getValue());\n            DataInputStream dIn \u003d new DataInputStream(bIn);\n            String ecPolicyName \u003d WritableUtils.readString(dIn);\n            return fsd.getFSNamesystem().getErasureCodingPolicyManager().\n                getPolicy(ecPolicyName);\n          }\n        }\n      }\n    } finally {\n      fsd.readUnlock();\n    }\n    return null;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirErasureCodingOp.java",
          "extendedDetails": {
            "oldValue": "[fsn-FSNamesystem(modifiers-final), iip-INodesInPath(modifiers-final)]",
            "newValue": "[fsn-FSNamesystem, iip-INodesInPath]"
          }
        }
      ]
    },
    "1d37a8812160bb030244a1e6b1c753f962d8d2ed": {
      "type": "Ymultichange(Yrename,Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-8854. Erasure coding: add ECPolicy to replace schema+cellSize in hadoop-hdfs. Contributed by Walter Su.\n",
      "commitDate": "13/08/15 10:04 AM",
      "commitName": "1d37a8812160bb030244a1e6b1c753f962d8d2ed",
      "commitAuthor": "Zhe Zhang",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-8854. Erasure coding: add ECPolicy to replace schema+cellSize in hadoop-hdfs. Contributed by Walter Su.\n",
          "commitDate": "13/08/15 10:04 AM",
          "commitName": "1d37a8812160bb030244a1e6b1c753f962d8d2ed",
          "commitAuthor": "Zhe Zhang",
          "commitDateOld": "10/06/15 10:18 PM",
          "commitNameOld": "98d340745be682fb251677bb4830aca76119868f",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 63.49,
          "commitsBetweenForRepo": 37,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,10 @@\n-  private static ECSchema getErasureCodingSchemaForPath(final FSNamesystem fsn,\n+  private static ErasureCodingPolicy getErasureCodingPolicyForPath(final FSNamesystem fsn,\n       final INodesInPath iip) throws IOException {\n     final FSDirectory fsd \u003d fsn.getFSDirectory();\n     fsd.readLock();\n     try {\n-      return fsn.getErasureCodingZoneManager().getErasureCodingSchema(iip);\n+      return fsn.getErasureCodingZoneManager().getErasureCodingPolicy(iip);\n     } finally {\n       fsd.readUnlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static ErasureCodingPolicy getErasureCodingPolicyForPath(final FSNamesystem fsn,\n      final INodesInPath iip) throws IOException {\n    final FSDirectory fsd \u003d fsn.getFSDirectory();\n    fsd.readLock();\n    try {\n      return fsn.getErasureCodingZoneManager().getErasureCodingPolicy(iip);\n    } finally {\n      fsd.readUnlock();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirErasureCodingOp.java",
          "extendedDetails": {
            "oldValue": "getErasureCodingSchemaForPath",
            "newValue": "getErasureCodingPolicyForPath"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-8854. Erasure coding: add ECPolicy to replace schema+cellSize in hadoop-hdfs. Contributed by Walter Su.\n",
          "commitDate": "13/08/15 10:04 AM",
          "commitName": "1d37a8812160bb030244a1e6b1c753f962d8d2ed",
          "commitAuthor": "Zhe Zhang",
          "commitDateOld": "10/06/15 10:18 PM",
          "commitNameOld": "98d340745be682fb251677bb4830aca76119868f",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 63.49,
          "commitsBetweenForRepo": 37,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,10 @@\n-  private static ECSchema getErasureCodingSchemaForPath(final FSNamesystem fsn,\n+  private static ErasureCodingPolicy getErasureCodingPolicyForPath(final FSNamesystem fsn,\n       final INodesInPath iip) throws IOException {\n     final FSDirectory fsd \u003d fsn.getFSDirectory();\n     fsd.readLock();\n     try {\n-      return fsn.getErasureCodingZoneManager().getErasureCodingSchema(iip);\n+      return fsn.getErasureCodingZoneManager().getErasureCodingPolicy(iip);\n     } finally {\n       fsd.readUnlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static ErasureCodingPolicy getErasureCodingPolicyForPath(final FSNamesystem fsn,\n      final INodesInPath iip) throws IOException {\n    final FSDirectory fsd \u003d fsn.getFSDirectory();\n    fsd.readLock();\n    try {\n      return fsn.getErasureCodingZoneManager().getErasureCodingPolicy(iip);\n    } finally {\n      fsd.readUnlock();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirErasureCodingOp.java",
          "extendedDetails": {
            "oldValue": "ECSchema",
            "newValue": "ErasureCodingPolicy"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8854. Erasure coding: add ECPolicy to replace schema+cellSize in hadoop-hdfs. Contributed by Walter Su.\n",
          "commitDate": "13/08/15 10:04 AM",
          "commitName": "1d37a8812160bb030244a1e6b1c753f962d8d2ed",
          "commitAuthor": "Zhe Zhang",
          "commitDateOld": "10/06/15 10:18 PM",
          "commitNameOld": "98d340745be682fb251677bb4830aca76119868f",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 63.49,
          "commitsBetweenForRepo": 37,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,10 @@\n-  private static ECSchema getErasureCodingSchemaForPath(final FSNamesystem fsn,\n+  private static ErasureCodingPolicy getErasureCodingPolicyForPath(final FSNamesystem fsn,\n       final INodesInPath iip) throws IOException {\n     final FSDirectory fsd \u003d fsn.getFSDirectory();\n     fsd.readLock();\n     try {\n-      return fsn.getErasureCodingZoneManager().getErasureCodingSchema(iip);\n+      return fsn.getErasureCodingZoneManager().getErasureCodingPolicy(iip);\n     } finally {\n       fsd.readUnlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static ErasureCodingPolicy getErasureCodingPolicyForPath(final FSNamesystem fsn,\n      final INodesInPath iip) throws IOException {\n    final FSDirectory fsd \u003d fsn.getFSDirectory();\n    fsd.readLock();\n    try {\n      return fsn.getErasureCodingZoneManager().getErasureCodingPolicy(iip);\n    } finally {\n      fsd.readUnlock();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirErasureCodingOp.java",
          "extendedDetails": {}
        }
      ]
    },
    "98d340745be682fb251677bb4830aca76119868f": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-8450. Erasure Coding: Consolidate erasure coding zone related implementation into a single class (Contributed by Rakesh R)\n",
      "commitDate": "10/06/15 10:18 PM",
      "commitName": "98d340745be682fb251677bb4830aca76119868f",
      "commitAuthor": "Vinayakumar B",
      "diff": "@@ -0,0 +1,10 @@\n+  private static ECSchema getErasureCodingSchemaForPath(final FSNamesystem fsn,\n+      final INodesInPath iip) throws IOException {\n+    final FSDirectory fsd \u003d fsn.getFSDirectory();\n+    fsd.readLock();\n+    try {\n+      return fsn.getErasureCodingZoneManager().getErasureCodingSchema(iip);\n+    } finally {\n+      fsd.readUnlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static ECSchema getErasureCodingSchemaForPath(final FSNamesystem fsn,\n      final INodesInPath iip) throws IOException {\n    final FSDirectory fsd \u003d fsn.getFSDirectory();\n    fsd.readLock();\n    try {\n      return fsn.getErasureCodingZoneManager().getErasureCodingSchema(iip);\n    } finally {\n      fsd.readUnlock();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirErasureCodingOp.java"
    }
  }
}