{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LogAggregationUtils.java",
  "functionName": "getRemoteNodeFileList",
  "functionId": "getRemoteNodeFileList___conf-Configuration__appId-ApplicationId__appOwner-String__remoteRootLogDir-org.apache.hadoop.fs.Path__suffix-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/LogAggregationUtils.java",
  "functionStartLine": 331,
  "functionEndLine": 369,
  "numCommitsSeen": 11,
  "timeTaken": 2021,
  "changeHistory": [
    "49e1292ea3e4d00ab0b0191bd8c4ea4d2afed671",
    "accb811e5727f2a780a41cd5e50bab47a0cccb68",
    "3fddabc2fe4fbdb8ef3f9ce7558955c4f0794dcc"
  ],
  "changeHistoryShort": {
    "49e1292ea3e4d00ab0b0191bd8c4ea4d2afed671": "Ybodychange",
    "accb811e5727f2a780a41cd5e50bab47a0cccb68": "Ybodychange",
    "3fddabc2fe4fbdb8ef3f9ce7558955c4f0794dcc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "49e1292ea3e4d00ab0b0191bd8c4ea4d2afed671": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9524.  Fixed TestAHSWebService and TestLogsCLI unit tests.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "06/05/19 4:48 PM",
      "commitName": "49e1292ea3e4d00ab0b0191bd8c4ea4d2afed671",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "30/04/19 2:04 PM",
      "commitNameOld": "accb811e5727f2a780a41cd5e50bab47a0cccb68",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 6.11,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   public static List\u003cFileStatus\u003e getRemoteNodeFileList(\n       Configuration conf, ApplicationId appId, String appOwner,\n       org.apache.hadoop.fs.Path remoteRootLogDir, String suffix)\n       throws IOException {\n     StringBuilder diagnosticsMsg \u003d new StringBuilder();\n-    Path remoteAppLogDir \u003d getRemoteAppLogDir(conf, appId, appOwner,\n-        remoteRootLogDir, suffix);\n     List\u003cFileStatus\u003e nodeFiles \u003d new ArrayList\u003c\u003e();\n-    Path qualifiedLogDir \u003d\n-        FileContext.getFileContext(conf).makeQualified(remoteAppLogDir);\n \n     // Get Node Files from new app log dir\n     try {\n+      Path remoteAppLogDir \u003d getRemoteAppLogDir(conf, appId, appOwner,\n+          remoteRootLogDir, suffix);\n+      Path qualifiedLogDir \u003d\n+          FileContext.getFileContext(conf).makeQualified(remoteAppLogDir);\n       nodeFiles.addAll(Arrays.asList(FileContext.getFileContext(\n           qualifiedLogDir.toUri(), conf).util().listStatus(remoteAppLogDir)));\n     } catch (IOException ex) {\n       diagnosticsMsg.append(ex.getMessage() + \"\\n\");\n     }\n \n     // Get Node Files from old app log dir\n     if (isOlderPathEnabled(conf)) {\n-      remoteAppLogDir \u003d getOlderRemoteAppLogDir(appId, appOwner,\n-          remoteRootLogDir, suffix);\n-      qualifiedLogDir \u003d FileContext.getFileContext(conf).\n-          makeQualified(remoteAppLogDir);\n       try {\n+        Path remoteAppLogDir \u003d getOlderRemoteAppLogDir(conf, appId, appOwner,\n+            remoteRootLogDir, suffix);\n+        Path qualifiedLogDir \u003d FileContext.getFileContext(conf).\n+            makeQualified(remoteAppLogDir);\n         nodeFiles.addAll(Arrays.asList(FileContext.getFileContext(\n             qualifiedLogDir.toUri(), conf).util().listStatus(remoteAppLogDir)));\n       } catch (IOException ex) {\n         diagnosticsMsg.append(ex.getMessage() + \"\\n\");\n       }\n     }\n \n     // Error reading from or new app log dir does not exist\n     if (nodeFiles.isEmpty()) {\n       throw new IOException(diagnosticsMsg.toString());\n     }\n     return nodeFiles;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static List\u003cFileStatus\u003e getRemoteNodeFileList(\n      Configuration conf, ApplicationId appId, String appOwner,\n      org.apache.hadoop.fs.Path remoteRootLogDir, String suffix)\n      throws IOException {\n    StringBuilder diagnosticsMsg \u003d new StringBuilder();\n    List\u003cFileStatus\u003e nodeFiles \u003d new ArrayList\u003c\u003e();\n\n    // Get Node Files from new app log dir\n    try {\n      Path remoteAppLogDir \u003d getRemoteAppLogDir(conf, appId, appOwner,\n          remoteRootLogDir, suffix);\n      Path qualifiedLogDir \u003d\n          FileContext.getFileContext(conf).makeQualified(remoteAppLogDir);\n      nodeFiles.addAll(Arrays.asList(FileContext.getFileContext(\n          qualifiedLogDir.toUri(), conf).util().listStatus(remoteAppLogDir)));\n    } catch (IOException ex) {\n      diagnosticsMsg.append(ex.getMessage() + \"\\n\");\n    }\n\n    // Get Node Files from old app log dir\n    if (isOlderPathEnabled(conf)) {\n      try {\n        Path remoteAppLogDir \u003d getOlderRemoteAppLogDir(conf, appId, appOwner,\n            remoteRootLogDir, suffix);\n        Path qualifiedLogDir \u003d FileContext.getFileContext(conf).\n            makeQualified(remoteAppLogDir);\n        nodeFiles.addAll(Arrays.asList(FileContext.getFileContext(\n            qualifiedLogDir.toUri(), conf).util().listStatus(remoteAppLogDir)));\n      } catch (IOException ex) {\n        diagnosticsMsg.append(ex.getMessage() + \"\\n\");\n      }\n    }\n\n    // Error reading from or new app log dir does not exist\n    if (nodeFiles.isEmpty()) {\n      throw new IOException(diagnosticsMsg.toString());\n    }\n    return nodeFiles;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/LogAggregationUtils.java",
      "extendedDetails": {}
    },
    "accb811e5727f2a780a41cd5e50bab47a0cccb68": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6929.  Improved partition algorithm for yarn remote-app-log-dir.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "30/04/19 2:04 PM",
      "commitName": "accb811e5727f2a780a41cd5e50bab47a0cccb68",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "08/09/17 3:16 PM",
      "commitNameOld": "3fddabc2fe4fbdb8ef3f9ce7558955c4f0794dcc",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 598.95,
      "commitsBetweenForRepo": 5067,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,39 @@\n   public static List\u003cFileStatus\u003e getRemoteNodeFileList(\n       Configuration conf, ApplicationId appId, String appOwner,\n       org.apache.hadoop.fs.Path remoteRootLogDir, String suffix)\n       throws IOException {\n+    StringBuilder diagnosticsMsg \u003d new StringBuilder();\n     Path remoteAppLogDir \u003d getRemoteAppLogDir(conf, appId, appOwner,\n         remoteRootLogDir, suffix);\n     List\u003cFileStatus\u003e nodeFiles \u003d new ArrayList\u003c\u003e();\n     Path qualifiedLogDir \u003d\n         FileContext.getFileContext(conf).makeQualified(remoteAppLogDir);\n-    nodeFiles.addAll(Arrays.asList(FileContext.getFileContext(\n-        qualifiedLogDir.toUri(), conf).util().listStatus(remoteAppLogDir)));\n+\n+    // Get Node Files from new app log dir\n+    try {\n+      nodeFiles.addAll(Arrays.asList(FileContext.getFileContext(\n+          qualifiedLogDir.toUri(), conf).util().listStatus(remoteAppLogDir)));\n+    } catch (IOException ex) {\n+      diagnosticsMsg.append(ex.getMessage() + \"\\n\");\n+    }\n+\n+    // Get Node Files from old app log dir\n+    if (isOlderPathEnabled(conf)) {\n+      remoteAppLogDir \u003d getOlderRemoteAppLogDir(appId, appOwner,\n+          remoteRootLogDir, suffix);\n+      qualifiedLogDir \u003d FileContext.getFileContext(conf).\n+          makeQualified(remoteAppLogDir);\n+      try {\n+        nodeFiles.addAll(Arrays.asList(FileContext.getFileContext(\n+            qualifiedLogDir.toUri(), conf).util().listStatus(remoteAppLogDir)));\n+      } catch (IOException ex) {\n+        diagnosticsMsg.append(ex.getMessage() + \"\\n\");\n+      }\n+    }\n+\n+    // Error reading from or new app log dir does not exist\n+    if (nodeFiles.isEmpty()) {\n+      throw new IOException(diagnosticsMsg.toString());\n+    }\n     return nodeFiles;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static List\u003cFileStatus\u003e getRemoteNodeFileList(\n      Configuration conf, ApplicationId appId, String appOwner,\n      org.apache.hadoop.fs.Path remoteRootLogDir, String suffix)\n      throws IOException {\n    StringBuilder diagnosticsMsg \u003d new StringBuilder();\n    Path remoteAppLogDir \u003d getRemoteAppLogDir(conf, appId, appOwner,\n        remoteRootLogDir, suffix);\n    List\u003cFileStatus\u003e nodeFiles \u003d new ArrayList\u003c\u003e();\n    Path qualifiedLogDir \u003d\n        FileContext.getFileContext(conf).makeQualified(remoteAppLogDir);\n\n    // Get Node Files from new app log dir\n    try {\n      nodeFiles.addAll(Arrays.asList(FileContext.getFileContext(\n          qualifiedLogDir.toUri(), conf).util().listStatus(remoteAppLogDir)));\n    } catch (IOException ex) {\n      diagnosticsMsg.append(ex.getMessage() + \"\\n\");\n    }\n\n    // Get Node Files from old app log dir\n    if (isOlderPathEnabled(conf)) {\n      remoteAppLogDir \u003d getOlderRemoteAppLogDir(appId, appOwner,\n          remoteRootLogDir, suffix);\n      qualifiedLogDir \u003d FileContext.getFileContext(conf).\n          makeQualified(remoteAppLogDir);\n      try {\n        nodeFiles.addAll(Arrays.asList(FileContext.getFileContext(\n            qualifiedLogDir.toUri(), conf).util().listStatus(remoteAppLogDir)));\n      } catch (IOException ex) {\n        diagnosticsMsg.append(ex.getMessage() + \"\\n\");\n      }\n    }\n\n    // Error reading from or new app log dir does not exist\n    if (nodeFiles.isEmpty()) {\n      throw new IOException(diagnosticsMsg.toString());\n    }\n    return nodeFiles;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/LogAggregationUtils.java",
      "extendedDetails": {}
    },
    "3fddabc2fe4fbdb8ef3f9ce7558955c4f0794dcc": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7072. Add a new log aggregation file format controller. Contributed by Xuan Gong.\n",
      "commitDate": "08/09/17 3:16 PM",
      "commitName": "3fddabc2fe4fbdb8ef3f9ce7558955c4f0794dcc",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,13 @@\n+  public static List\u003cFileStatus\u003e getRemoteNodeFileList(\n+      Configuration conf, ApplicationId appId, String appOwner,\n+      org.apache.hadoop.fs.Path remoteRootLogDir, String suffix)\n+      throws IOException {\n+    Path remoteAppLogDir \u003d getRemoteAppLogDir(conf, appId, appOwner,\n+        remoteRootLogDir, suffix);\n+    List\u003cFileStatus\u003e nodeFiles \u003d new ArrayList\u003c\u003e();\n+    Path qualifiedLogDir \u003d\n+        FileContext.getFileContext(conf).makeQualified(remoteAppLogDir);\n+    nodeFiles.addAll(Arrays.asList(FileContext.getFileContext(\n+        qualifiedLogDir.toUri(), conf).util().listStatus(remoteAppLogDir)));\n+    return nodeFiles;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static List\u003cFileStatus\u003e getRemoteNodeFileList(\n      Configuration conf, ApplicationId appId, String appOwner,\n      org.apache.hadoop.fs.Path remoteRootLogDir, String suffix)\n      throws IOException {\n    Path remoteAppLogDir \u003d getRemoteAppLogDir(conf, appId, appOwner,\n        remoteRootLogDir, suffix);\n    List\u003cFileStatus\u003e nodeFiles \u003d new ArrayList\u003c\u003e();\n    Path qualifiedLogDir \u003d\n        FileContext.getFileContext(conf).makeQualified(remoteAppLogDir);\n    nodeFiles.addAll(Arrays.asList(FileContext.getFileContext(\n        qualifiedLogDir.toUri(), conf).util().listStatus(remoteAppLogDir)));\n    return nodeFiles;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/LogAggregationUtils.java"
    }
  }
}