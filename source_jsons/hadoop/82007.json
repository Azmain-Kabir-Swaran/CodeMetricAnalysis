{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "GenericOptionsParser.java",
  "functionName": "validateFiles",
  "functionId": "validateFiles___files-String",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/GenericOptionsParser.java",
  "functionStartLine": 399,
  "functionEndLine": 401,
  "numCommitsSeen": 51,
  "timeTaken": 2356,
  "changeHistory": [
    "0ad48aa2c8f41196743305c711ea19cc48f186da",
    "c7c8e388a953b904b24d3343e5b069b0984244e0",
    "0a2ee2fd53b4759e9041af8620717127a7e81fc3",
    "a126a01fa197beebe955837c8f2efbd3257f7aa5",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "a5427fc7eb4155437261cbcf55144f6f82675809",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "0ad48aa2c8f41196743305c711ea19cc48f186da": "Ymultichange(Yparameterchange,Ybodychange)",
    "c7c8e388a953b904b24d3343e5b069b0984244e0": "Ybodychange",
    "0a2ee2fd53b4759e9041af8620717127a7e81fc3": "Ybodychange",
    "a126a01fa197beebe955837c8f2efbd3257f7aa5": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "a5427fc7eb4155437261cbcf55144f6f82675809": "Ybodychange",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0ad48aa2c8f41196743305c711ea19cc48f186da": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-12747. support wildcard in libjars argument (sjlee)\n",
      "commitDate": "08/08/16 5:34 PM",
      "commitName": "0ad48aa2c8f41196743305c711ea19cc48f186da",
      "commitAuthor": "Sangjin Lee",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-12747. support wildcard in libjars argument (sjlee)\n",
          "commitDate": "08/08/16 5:34 PM",
          "commitName": "0ad48aa2c8f41196743305c711ea19cc48f186da",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "14/06/16 3:31 AM",
          "commitNameOld": "8e8cb4c6ca7e803674b160946ac92274bac0f96d",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 55.59,
          "commitsBetweenForRepo": 500,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,3 @@\n-  private String validateFiles(String files, Configuration conf) \n-      throws IOException  {\n-    if (files \u003d\u003d null) \n-      return null;\n-    String[] fileArr \u003d files.split(\",\");\n-    if (fileArr.length \u003d\u003d 0) {\n-      throw new IllegalArgumentException(\"File name can\u0027t be empty string\");\n-    }\n-    String[] finalArr \u003d new String[fileArr.length];\n-    for (int i \u003d0; i \u003c fileArr.length; i++) {\n-      String tmp \u003d fileArr[i];\n-      if (tmp.isEmpty()) {\n-        throw new IllegalArgumentException(\"File name can\u0027t be empty string\");\n-      }\n-      String finalPath;\n-      URI pathURI;\n-      try {\n-        pathURI \u003d new URI(tmp);\n-      } catch (URISyntaxException e) {\n-        throw new IllegalArgumentException(e);\n-      }\n-      Path path \u003d new Path(pathURI);\n-      FileSystem localFs \u003d FileSystem.getLocal(conf);\n-      if (pathURI.getScheme() \u003d\u003d null) {\n-        //default to the local file system\n-        //check if the file exists or not first\n-        if (!localFs.exists(path)) {\n-          throw new FileNotFoundException(\"File \" + tmp + \" does not exist.\");\n-        }\n-        finalPath \u003d path.makeQualified(localFs.getUri(),\n-            localFs.getWorkingDirectory()).toString();\n-      }\n-      else {\n-        // check if the file exists in this file system\n-        // we need to recreate this filesystem object to copy\n-        // these files to the file system ResourceManager is running\n-        // on.\n-        FileSystem fs \u003d path.getFileSystem(conf);\n-        if (!fs.exists(path)) {\n-          throw new FileNotFoundException(\"File \" + tmp + \" does not exist.\");\n-        }\n-        finalPath \u003d path.makeQualified(fs.getUri(),\n-            fs.getWorkingDirectory()).toString();\n-      }\n-      finalArr[i] \u003d finalPath;\n-    }\n-    return StringUtils.arrayToString(finalArr);\n+  private String validateFiles(String files) throws IOException {\n+    return validateFiles(files, false);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private String validateFiles(String files) throws IOException {\n    return validateFiles(files, false);\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/GenericOptionsParser.java",
          "extendedDetails": {
            "oldValue": "[files-String, conf-Configuration]",
            "newValue": "[files-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-12747. support wildcard in libjars argument (sjlee)\n",
          "commitDate": "08/08/16 5:34 PM",
          "commitName": "0ad48aa2c8f41196743305c711ea19cc48f186da",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "14/06/16 3:31 AM",
          "commitNameOld": "8e8cb4c6ca7e803674b160946ac92274bac0f96d",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 55.59,
          "commitsBetweenForRepo": 500,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,3 @@\n-  private String validateFiles(String files, Configuration conf) \n-      throws IOException  {\n-    if (files \u003d\u003d null) \n-      return null;\n-    String[] fileArr \u003d files.split(\",\");\n-    if (fileArr.length \u003d\u003d 0) {\n-      throw new IllegalArgumentException(\"File name can\u0027t be empty string\");\n-    }\n-    String[] finalArr \u003d new String[fileArr.length];\n-    for (int i \u003d0; i \u003c fileArr.length; i++) {\n-      String tmp \u003d fileArr[i];\n-      if (tmp.isEmpty()) {\n-        throw new IllegalArgumentException(\"File name can\u0027t be empty string\");\n-      }\n-      String finalPath;\n-      URI pathURI;\n-      try {\n-        pathURI \u003d new URI(tmp);\n-      } catch (URISyntaxException e) {\n-        throw new IllegalArgumentException(e);\n-      }\n-      Path path \u003d new Path(pathURI);\n-      FileSystem localFs \u003d FileSystem.getLocal(conf);\n-      if (pathURI.getScheme() \u003d\u003d null) {\n-        //default to the local file system\n-        //check if the file exists or not first\n-        if (!localFs.exists(path)) {\n-          throw new FileNotFoundException(\"File \" + tmp + \" does not exist.\");\n-        }\n-        finalPath \u003d path.makeQualified(localFs.getUri(),\n-            localFs.getWorkingDirectory()).toString();\n-      }\n-      else {\n-        // check if the file exists in this file system\n-        // we need to recreate this filesystem object to copy\n-        // these files to the file system ResourceManager is running\n-        // on.\n-        FileSystem fs \u003d path.getFileSystem(conf);\n-        if (!fs.exists(path)) {\n-          throw new FileNotFoundException(\"File \" + tmp + \" does not exist.\");\n-        }\n-        finalPath \u003d path.makeQualified(fs.getUri(),\n-            fs.getWorkingDirectory()).toString();\n-      }\n-      finalArr[i] \u003d finalPath;\n-    }\n-    return StringUtils.arrayToString(finalArr);\n+  private String validateFiles(String files) throws IOException {\n+    return validateFiles(files, false);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private String validateFiles(String files) throws IOException {\n    return validateFiles(files, false);\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/GenericOptionsParser.java",
          "extendedDetails": {}
        }
      ]
    },
    "c7c8e388a953b904b24d3343e5b069b0984244e0": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5945. Update the description of GenericOptionsParser -jt option (Akira AJISAKA via aw)\n",
      "commitDate": "26/09/14 2:25 PM",
      "commitName": "c7c8e388a953b904b24d3343e5b069b0984244e0",
      "commitAuthor": "Allen Wittenauer",
      "commitDateOld": "09/09/14 10:19 PM",
      "commitNameOld": "b100949404843ed245ef4e118291f55b3fdc81b8",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 16.67,
      "commitsBetweenForRepo": 190,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n   private String validateFiles(String files, Configuration conf) \n       throws IOException  {\n     if (files \u003d\u003d null) \n       return null;\n     String[] fileArr \u003d files.split(\",\");\n     if (fileArr.length \u003d\u003d 0) {\n       throw new IllegalArgumentException(\"File name can\u0027t be empty string\");\n     }\n     String[] finalArr \u003d new String[fileArr.length];\n     for (int i \u003d0; i \u003c fileArr.length; i++) {\n       String tmp \u003d fileArr[i];\n       if (tmp.isEmpty()) {\n         throw new IllegalArgumentException(\"File name can\u0027t be empty string\");\n       }\n       String finalPath;\n       URI pathURI;\n       try {\n         pathURI \u003d new URI(tmp);\n       } catch (URISyntaxException e) {\n         throw new IllegalArgumentException(e);\n       }\n       Path path \u003d new Path(pathURI);\n       FileSystem localFs \u003d FileSystem.getLocal(conf);\n       if (pathURI.getScheme() \u003d\u003d null) {\n         //default to the local file system\n         //check if the file exists or not first\n         if (!localFs.exists(path)) {\n           throw new FileNotFoundException(\"File \" + tmp + \" does not exist.\");\n         }\n         finalPath \u003d path.makeQualified(localFs.getUri(),\n             localFs.getWorkingDirectory()).toString();\n       }\n       else {\n         // check if the file exists in this file system\n         // we need to recreate this filesystem object to copy\n-        // these files to the file system jobtracker is running\n+        // these files to the file system ResourceManager is running\n         // on.\n         FileSystem fs \u003d path.getFileSystem(conf);\n         if (!fs.exists(path)) {\n           throw new FileNotFoundException(\"File \" + tmp + \" does not exist.\");\n         }\n         finalPath \u003d path.makeQualified(fs.getUri(),\n             fs.getWorkingDirectory()).toString();\n       }\n       finalArr[i] \u003d finalPath;\n     }\n     return StringUtils.arrayToString(finalArr);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private String validateFiles(String files, Configuration conf) \n      throws IOException  {\n    if (files \u003d\u003d null) \n      return null;\n    String[] fileArr \u003d files.split(\",\");\n    if (fileArr.length \u003d\u003d 0) {\n      throw new IllegalArgumentException(\"File name can\u0027t be empty string\");\n    }\n    String[] finalArr \u003d new String[fileArr.length];\n    for (int i \u003d0; i \u003c fileArr.length; i++) {\n      String tmp \u003d fileArr[i];\n      if (tmp.isEmpty()) {\n        throw new IllegalArgumentException(\"File name can\u0027t be empty string\");\n      }\n      String finalPath;\n      URI pathURI;\n      try {\n        pathURI \u003d new URI(tmp);\n      } catch (URISyntaxException e) {\n        throw new IllegalArgumentException(e);\n      }\n      Path path \u003d new Path(pathURI);\n      FileSystem localFs \u003d FileSystem.getLocal(conf);\n      if (pathURI.getScheme() \u003d\u003d null) {\n        //default to the local file system\n        //check if the file exists or not first\n        if (!localFs.exists(path)) {\n          throw new FileNotFoundException(\"File \" + tmp + \" does not exist.\");\n        }\n        finalPath \u003d path.makeQualified(localFs.getUri(),\n            localFs.getWorkingDirectory()).toString();\n      }\n      else {\n        // check if the file exists in this file system\n        // we need to recreate this filesystem object to copy\n        // these files to the file system ResourceManager is running\n        // on.\n        FileSystem fs \u003d path.getFileSystem(conf);\n        if (!fs.exists(path)) {\n          throw new FileNotFoundException(\"File \" + tmp + \" does not exist.\");\n        }\n        finalPath \u003d path.makeQualified(fs.getUri(),\n            fs.getWorkingDirectory()).toString();\n      }\n      finalArr[i] \u003d finalPath;\n    }\n    return StringUtils.arrayToString(finalArr);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/GenericOptionsParser.java",
      "extendedDetails": {}
    },
    "0a2ee2fd53b4759e9041af8620717127a7e81fc3": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10820. Throw an exception in GenericOptionsParser when passed an empty Path. Contributed by Alex Holmes and Zhihai Xu.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617542 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/08/14 10:46 AM",
      "commitName": "0a2ee2fd53b4759e9041af8620717127a7e81fc3",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "26/03/14 12:03 PM",
      "commitNameOld": "a126a01fa197beebe955837c8f2efbd3257f7aa5",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 138.95,
      "commitsBetweenForRepo": 871,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,48 @@\n   private String validateFiles(String files, Configuration conf) \n       throws IOException  {\n     if (files \u003d\u003d null) \n       return null;\n     String[] fileArr \u003d files.split(\",\");\n+    if (fileArr.length \u003d\u003d 0) {\n+      throw new IllegalArgumentException(\"File name can\u0027t be empty string\");\n+    }\n     String[] finalArr \u003d new String[fileArr.length];\n     for (int i \u003d0; i \u003c fileArr.length; i++) {\n       String tmp \u003d fileArr[i];\n+      if (tmp.isEmpty()) {\n+        throw new IllegalArgumentException(\"File name can\u0027t be empty string\");\n+      }\n       String finalPath;\n       URI pathURI;\n       try {\n         pathURI \u003d new URI(tmp);\n       } catch (URISyntaxException e) {\n         throw new IllegalArgumentException(e);\n       }\n       Path path \u003d new Path(pathURI);\n       FileSystem localFs \u003d FileSystem.getLocal(conf);\n       if (pathURI.getScheme() \u003d\u003d null) {\n         //default to the local file system\n         //check if the file exists or not first\n         if (!localFs.exists(path)) {\n           throw new FileNotFoundException(\"File \" + tmp + \" does not exist.\");\n         }\n         finalPath \u003d path.makeQualified(localFs.getUri(),\n             localFs.getWorkingDirectory()).toString();\n       }\n       else {\n         // check if the file exists in this file system\n         // we need to recreate this filesystem object to copy\n         // these files to the file system jobtracker is running\n         // on.\n         FileSystem fs \u003d path.getFileSystem(conf);\n         if (!fs.exists(path)) {\n           throw new FileNotFoundException(\"File \" + tmp + \" does not exist.\");\n         }\n         finalPath \u003d path.makeQualified(fs.getUri(),\n             fs.getWorkingDirectory()).toString();\n       }\n       finalArr[i] \u003d finalPath;\n     }\n     return StringUtils.arrayToString(finalArr);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private String validateFiles(String files, Configuration conf) \n      throws IOException  {\n    if (files \u003d\u003d null) \n      return null;\n    String[] fileArr \u003d files.split(\",\");\n    if (fileArr.length \u003d\u003d 0) {\n      throw new IllegalArgumentException(\"File name can\u0027t be empty string\");\n    }\n    String[] finalArr \u003d new String[fileArr.length];\n    for (int i \u003d0; i \u003c fileArr.length; i++) {\n      String tmp \u003d fileArr[i];\n      if (tmp.isEmpty()) {\n        throw new IllegalArgumentException(\"File name can\u0027t be empty string\");\n      }\n      String finalPath;\n      URI pathURI;\n      try {\n        pathURI \u003d new URI(tmp);\n      } catch (URISyntaxException e) {\n        throw new IllegalArgumentException(e);\n      }\n      Path path \u003d new Path(pathURI);\n      FileSystem localFs \u003d FileSystem.getLocal(conf);\n      if (pathURI.getScheme() \u003d\u003d null) {\n        //default to the local file system\n        //check if the file exists or not first\n        if (!localFs.exists(path)) {\n          throw new FileNotFoundException(\"File \" + tmp + \" does not exist.\");\n        }\n        finalPath \u003d path.makeQualified(localFs.getUri(),\n            localFs.getWorkingDirectory()).toString();\n      }\n      else {\n        // check if the file exists in this file system\n        // we need to recreate this filesystem object to copy\n        // these files to the file system jobtracker is running\n        // on.\n        FileSystem fs \u003d path.getFileSystem(conf);\n        if (!fs.exists(path)) {\n          throw new FileNotFoundException(\"File \" + tmp + \" does not exist.\");\n        }\n        finalPath \u003d path.makeQualified(fs.getUri(),\n            fs.getWorkingDirectory()).toString();\n      }\n      finalArr[i] \u003d finalPath;\n    }\n    return StringUtils.arrayToString(finalArr);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/GenericOptionsParser.java",
      "extendedDetails": {}
    },
    "a126a01fa197beebe955837c8f2efbd3257f7aa5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10437. Fix the javac warnings in the conf and the util package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1582015 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/03/14 12:03 PM",
      "commitName": "a126a01fa197beebe955837c8f2efbd3257f7aa5",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "14/11/13 9:47 AM",
      "commitNameOld": "95a87caed0d2b68d196bf5ead835fd81dc95c2e3",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 132.05,
      "commitsBetweenForRepo": 946,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,42 @@\n   private String validateFiles(String files, Configuration conf) \n       throws IOException  {\n     if (files \u003d\u003d null) \n       return null;\n     String[] fileArr \u003d files.split(\",\");\n     String[] finalArr \u003d new String[fileArr.length];\n     for (int i \u003d0; i \u003c fileArr.length; i++) {\n       String tmp \u003d fileArr[i];\n       String finalPath;\n       URI pathURI;\n       try {\n         pathURI \u003d new URI(tmp);\n       } catch (URISyntaxException e) {\n         throw new IllegalArgumentException(e);\n       }\n       Path path \u003d new Path(pathURI);\n       FileSystem localFs \u003d FileSystem.getLocal(conf);\n       if (pathURI.getScheme() \u003d\u003d null) {\n         //default to the local file system\n         //check if the file exists or not first\n         if (!localFs.exists(path)) {\n           throw new FileNotFoundException(\"File \" + tmp + \" does not exist.\");\n         }\n-        finalPath \u003d path.makeQualified(localFs).toString();\n+        finalPath \u003d path.makeQualified(localFs.getUri(),\n+            localFs.getWorkingDirectory()).toString();\n       }\n       else {\n         // check if the file exists in this file system\n         // we need to recreate this filesystem object to copy\n         // these files to the file system jobtracker is running\n         // on.\n         FileSystem fs \u003d path.getFileSystem(conf);\n         if (!fs.exists(path)) {\n           throw new FileNotFoundException(\"File \" + tmp + \" does not exist.\");\n         }\n-        finalPath \u003d path.makeQualified(fs).toString();\n+        finalPath \u003d path.makeQualified(fs.getUri(),\n+            fs.getWorkingDirectory()).toString();\n       }\n       finalArr[i] \u003d finalPath;\n     }\n     return StringUtils.arrayToString(finalArr);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private String validateFiles(String files, Configuration conf) \n      throws IOException  {\n    if (files \u003d\u003d null) \n      return null;\n    String[] fileArr \u003d files.split(\",\");\n    String[] finalArr \u003d new String[fileArr.length];\n    for (int i \u003d0; i \u003c fileArr.length; i++) {\n      String tmp \u003d fileArr[i];\n      String finalPath;\n      URI pathURI;\n      try {\n        pathURI \u003d new URI(tmp);\n      } catch (URISyntaxException e) {\n        throw new IllegalArgumentException(e);\n      }\n      Path path \u003d new Path(pathURI);\n      FileSystem localFs \u003d FileSystem.getLocal(conf);\n      if (pathURI.getScheme() \u003d\u003d null) {\n        //default to the local file system\n        //check if the file exists or not first\n        if (!localFs.exists(path)) {\n          throw new FileNotFoundException(\"File \" + tmp + \" does not exist.\");\n        }\n        finalPath \u003d path.makeQualified(localFs.getUri(),\n            localFs.getWorkingDirectory()).toString();\n      }\n      else {\n        // check if the file exists in this file system\n        // we need to recreate this filesystem object to copy\n        // these files to the file system jobtracker is running\n        // on.\n        FileSystem fs \u003d path.getFileSystem(conf);\n        if (!fs.exists(path)) {\n          throw new FileNotFoundException(\"File \" + tmp + \" does not exist.\");\n        }\n        finalPath \u003d path.makeQualified(fs.getUri(),\n            fs.getWorkingDirectory()).toString();\n      }\n      finalArr[i] \u003d finalPath;\n    }\n    return StringUtils.arrayToString(finalArr);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/GenericOptionsParser.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private String validateFiles(String files, Configuration conf) \n      throws IOException  {\n    if (files \u003d\u003d null) \n      return null;\n    String[] fileArr \u003d files.split(\",\");\n    String[] finalArr \u003d new String[fileArr.length];\n    for (int i \u003d0; i \u003c fileArr.length; i++) {\n      String tmp \u003d fileArr[i];\n      String finalPath;\n      URI pathURI;\n      try {\n        pathURI \u003d new URI(tmp);\n      } catch (URISyntaxException e) {\n        throw new IllegalArgumentException(e);\n      }\n      Path path \u003d new Path(pathURI);\n      FileSystem localFs \u003d FileSystem.getLocal(conf);\n      if (pathURI.getScheme() \u003d\u003d null) {\n        //default to the local file system\n        //check if the file exists or not first\n        if (!localFs.exists(path)) {\n          throw new FileNotFoundException(\"File \" + tmp + \" does not exist.\");\n        }\n        finalPath \u003d path.makeQualified(localFs).toString();\n      }\n      else {\n        // check if the file exists in this file system\n        // we need to recreate this filesystem object to copy\n        // these files to the file system jobtracker is running\n        // on.\n        FileSystem fs \u003d path.getFileSystem(conf);\n        if (!fs.exists(path)) {\n          throw new FileNotFoundException(\"File \" + tmp + \" does not exist.\");\n        }\n        finalPath \u003d path.makeQualified(fs).toString();\n      }\n      finalArr[i] \u003d finalPath;\n    }\n    return StringUtils.arrayToString(finalArr);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/GenericOptionsParser.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/util/GenericOptionsParser.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/GenericOptionsParser.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private String validateFiles(String files, Configuration conf) \n      throws IOException  {\n    if (files \u003d\u003d null) \n      return null;\n    String[] fileArr \u003d files.split(\",\");\n    String[] finalArr \u003d new String[fileArr.length];\n    for (int i \u003d0; i \u003c fileArr.length; i++) {\n      String tmp \u003d fileArr[i];\n      String finalPath;\n      URI pathURI;\n      try {\n        pathURI \u003d new URI(tmp);\n      } catch (URISyntaxException e) {\n        throw new IllegalArgumentException(e);\n      }\n      Path path \u003d new Path(pathURI);\n      FileSystem localFs \u003d FileSystem.getLocal(conf);\n      if (pathURI.getScheme() \u003d\u003d null) {\n        //default to the local file system\n        //check if the file exists or not first\n        if (!localFs.exists(path)) {\n          throw new FileNotFoundException(\"File \" + tmp + \" does not exist.\");\n        }\n        finalPath \u003d path.makeQualified(localFs).toString();\n      }\n      else {\n        // check if the file exists in this file system\n        // we need to recreate this filesystem object to copy\n        // these files to the file system jobtracker is running\n        // on.\n        FileSystem fs \u003d path.getFileSystem(conf);\n        if (!fs.exists(path)) {\n          throw new FileNotFoundException(\"File \" + tmp + \" does not exist.\");\n        }\n        finalPath \u003d path.makeQualified(fs).toString();\n      }\n      finalArr[i] \u003d finalPath;\n    }\n    return StringUtils.arrayToString(finalArr);\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/util/GenericOptionsParser.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/util/GenericOptionsParser.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/util/GenericOptionsParser.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private String validateFiles(String files, Configuration conf) \n      throws IOException  {\n    if (files \u003d\u003d null) \n      return null;\n    String[] fileArr \u003d files.split(\",\");\n    String[] finalArr \u003d new String[fileArr.length];\n    for (int i \u003d0; i \u003c fileArr.length; i++) {\n      String tmp \u003d fileArr[i];\n      String finalPath;\n      URI pathURI;\n      try {\n        pathURI \u003d new URI(tmp);\n      } catch (URISyntaxException e) {\n        throw new IllegalArgumentException(e);\n      }\n      Path path \u003d new Path(pathURI);\n      FileSystem localFs \u003d FileSystem.getLocal(conf);\n      if (pathURI.getScheme() \u003d\u003d null) {\n        //default to the local file system\n        //check if the file exists or not first\n        if (!localFs.exists(path)) {\n          throw new FileNotFoundException(\"File \" + tmp + \" does not exist.\");\n        }\n        finalPath \u003d path.makeQualified(localFs).toString();\n      }\n      else {\n        // check if the file exists in this file system\n        // we need to recreate this filesystem object to copy\n        // these files to the file system jobtracker is running\n        // on.\n        FileSystem fs \u003d path.getFileSystem(conf);\n        if (!fs.exists(path)) {\n          throw new FileNotFoundException(\"File \" + tmp + \" does not exist.\");\n        }\n        finalPath \u003d path.makeQualified(fs).toString();\n      }\n      finalArr[i] \u003d finalPath;\n    }\n    return StringUtils.arrayToString(finalArr);\n  }",
      "path": "common/src/java/org/apache/hadoop/util/GenericOptionsParser.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/util/GenericOptionsParser.java",
        "newPath": "common/src/java/org/apache/hadoop/util/GenericOptionsParser.java"
      }
    },
    "a5427fc7eb4155437261cbcf55144f6f82675809": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6334.  Fix GenericOptionsParser and Path to have a better URI support.  Contributed by Amareshwari Sriramadasu\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@831412 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/10/09 11:21 AM",
      "commitName": "a5427fc7eb4155437261cbcf55144f6f82675809",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "27/08/09 6:55 AM",
      "commitNameOld": "aa10f303e3cb5b8b533e3407a6be6d2b4d81217c",
      "commitAuthorOld": "Sharad Agarwal",
      "daysBetweenCommits": 64.18,
      "commitsBetweenForRepo": 73,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,40 @@\n-  private String validateFiles(String files, Configuration conf) throws IOException  {\n+  private String validateFiles(String files, Configuration conf) \n+      throws IOException  {\n     if (files \u003d\u003d null) \n       return null;\n     String[] fileArr \u003d files.split(\",\");\n     String[] finalArr \u003d new String[fileArr.length];\n     for (int i \u003d0; i \u003c fileArr.length; i++) {\n       String tmp \u003d fileArr[i];\n       String finalPath;\n-      Path path \u003d new Path(tmp);\n-      URI pathURI \u003d  path.toUri();\n+      URI pathURI;\n+      try {\n+        pathURI \u003d new URI(tmp);\n+      } catch (URISyntaxException e) {\n+        throw new IllegalArgumentException(e);\n+      }\n+      Path path \u003d new Path(pathURI);\n       FileSystem localFs \u003d FileSystem.getLocal(conf);\n       if (pathURI.getScheme() \u003d\u003d null) {\n         //default to the local file system\n         //check if the file exists or not first\n         if (!localFs.exists(path)) {\n           throw new FileNotFoundException(\"File \" + tmp + \" does not exist.\");\n         }\n         finalPath \u003d path.makeQualified(localFs).toString();\n       }\n       else {\n         // check if the file exists in this file system\n         // we need to recreate this filesystem object to copy\n         // these files to the file system jobtracker is running\n         // on.\n         FileSystem fs \u003d path.getFileSystem(conf);\n         if (!fs.exists(path)) {\n           throw new FileNotFoundException(\"File \" + tmp + \" does not exist.\");\n         }\n         finalPath \u003d path.makeQualified(fs).toString();\n-        try {\n-          fs.close();\n-        } catch(IOException e){};\n       }\n       finalArr[i] \u003d finalPath;\n     }\n     return StringUtils.arrayToString(finalArr);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private String validateFiles(String files, Configuration conf) \n      throws IOException  {\n    if (files \u003d\u003d null) \n      return null;\n    String[] fileArr \u003d files.split(\",\");\n    String[] finalArr \u003d new String[fileArr.length];\n    for (int i \u003d0; i \u003c fileArr.length; i++) {\n      String tmp \u003d fileArr[i];\n      String finalPath;\n      URI pathURI;\n      try {\n        pathURI \u003d new URI(tmp);\n      } catch (URISyntaxException e) {\n        throw new IllegalArgumentException(e);\n      }\n      Path path \u003d new Path(pathURI);\n      FileSystem localFs \u003d FileSystem.getLocal(conf);\n      if (pathURI.getScheme() \u003d\u003d null) {\n        //default to the local file system\n        //check if the file exists or not first\n        if (!localFs.exists(path)) {\n          throw new FileNotFoundException(\"File \" + tmp + \" does not exist.\");\n        }\n        finalPath \u003d path.makeQualified(localFs).toString();\n      }\n      else {\n        // check if the file exists in this file system\n        // we need to recreate this filesystem object to copy\n        // these files to the file system jobtracker is running\n        // on.\n        FileSystem fs \u003d path.getFileSystem(conf);\n        if (!fs.exists(path)) {\n          throw new FileNotFoundException(\"File \" + tmp + \" does not exist.\");\n        }\n        finalPath \u003d path.makeQualified(fs).toString();\n      }\n      finalArr[i] \u003d finalPath;\n    }\n    return StringUtils.arrayToString(finalArr);\n  }",
      "path": "src/java/org/apache/hadoop/util/GenericOptionsParser.java",
      "extendedDetails": {}
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,37 @@\n+  private String validateFiles(String files, Configuration conf) throws IOException  {\n+    if (files \u003d\u003d null) \n+      return null;\n+    String[] fileArr \u003d files.split(\",\");\n+    String[] finalArr \u003d new String[fileArr.length];\n+    for (int i \u003d0; i \u003c fileArr.length; i++) {\n+      String tmp \u003d fileArr[i];\n+      String finalPath;\n+      Path path \u003d new Path(tmp);\n+      URI pathURI \u003d  path.toUri();\n+      FileSystem localFs \u003d FileSystem.getLocal(conf);\n+      if (pathURI.getScheme() \u003d\u003d null) {\n+        //default to the local file system\n+        //check if the file exists or not first\n+        if (!localFs.exists(path)) {\n+          throw new FileNotFoundException(\"File \" + tmp + \" does not exist.\");\n+        }\n+        finalPath \u003d path.makeQualified(localFs).toString();\n+      }\n+      else {\n+        // check if the file exists in this file system\n+        // we need to recreate this filesystem object to copy\n+        // these files to the file system jobtracker is running\n+        // on.\n+        FileSystem fs \u003d path.getFileSystem(conf);\n+        if (!fs.exists(path)) {\n+          throw new FileNotFoundException(\"File \" + tmp + \" does not exist.\");\n+        }\n+        finalPath \u003d path.makeQualified(fs).toString();\n+        try {\n+          fs.close();\n+        } catch(IOException e){};\n+      }\n+      finalArr[i] \u003d finalPath;\n+    }\n+    return StringUtils.arrayToString(finalArr);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private String validateFiles(String files, Configuration conf) throws IOException  {\n    if (files \u003d\u003d null) \n      return null;\n    String[] fileArr \u003d files.split(\",\");\n    String[] finalArr \u003d new String[fileArr.length];\n    for (int i \u003d0; i \u003c fileArr.length; i++) {\n      String tmp \u003d fileArr[i];\n      String finalPath;\n      Path path \u003d new Path(tmp);\n      URI pathURI \u003d  path.toUri();\n      FileSystem localFs \u003d FileSystem.getLocal(conf);\n      if (pathURI.getScheme() \u003d\u003d null) {\n        //default to the local file system\n        //check if the file exists or not first\n        if (!localFs.exists(path)) {\n          throw new FileNotFoundException(\"File \" + tmp + \" does not exist.\");\n        }\n        finalPath \u003d path.makeQualified(localFs).toString();\n      }\n      else {\n        // check if the file exists in this file system\n        // we need to recreate this filesystem object to copy\n        // these files to the file system jobtracker is running\n        // on.\n        FileSystem fs \u003d path.getFileSystem(conf);\n        if (!fs.exists(path)) {\n          throw new FileNotFoundException(\"File \" + tmp + \" does not exist.\");\n        }\n        finalPath \u003d path.makeQualified(fs).toString();\n        try {\n          fs.close();\n        } catch(IOException e){};\n      }\n      finalArr[i] \u003d finalPath;\n    }\n    return StringUtils.arrayToString(finalArr);\n  }",
      "path": "src/java/org/apache/hadoop/util/GenericOptionsParser.java"
    }
  }
}